{"diffoscope-json-version": 1, "source1": "first/PackingUtils.class", "source2": "second/PackingUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -36,100 +36,66 @@\n             PackingUtils.packingLogger.addHandler((Handler)fileHandler);\n             PackingUtils.packingLogger.setUseParentHandlers(false);\n         }\n         PackingUtils.packingLogger.setVerbose(options.isVerbose());\n     }\n     \n     public static void copyThroughJar(final JarFile jarFile, final OutputStream outputStream) throws IOException {\n-        final JarOutputStream jarOutputStream = new JarOutputStream(outputStream);\n-        Throwable x0 = null;\n-        try {\n+        try (final JarOutputStream jarOutputStream = new JarOutputStream(outputStream)) {\n             jarOutputStream.setComment(\"PACK200\");\n             final byte[] bytes = new byte[16384];\n             final Enumeration<JarEntry> entries = jarFile.entries();\n             while (entries.hasMoreElements()) {\n                 final JarEntry jarEntry = (JarEntry)entries.nextElement();\n                 jarOutputStream.putNextEntry(jarEntry);\n-                final InputStream inputStream = jarFile.getInputStream(jarEntry);\n-                Throwable x2 = null;\n-                try {\n+                try (final InputStream inputStream = jarFile.getInputStream(jarEntry)) {\n                     int bytesRead;\n                     while ((bytesRead = inputStream.read(bytes)) != -1) {\n                         jarOutputStream.write(bytes, 0, bytesRead);\n                     }\n                     jarOutputStream.closeEntry();\n                     log(\"Packed \" + jarEntry.getName());\n-                }\n-                catch (final Throwable t) {\n-                    x2 = t;\n-                    throw t;\n-                }\n-                finally {\n-                    if (inputStream != null) {\n-                        $closeResource(x2, inputStream);\n+                    if (inputStream == null) {\n+                        continue;\n                     }\n                 }\n             }\n             jarFile.close();\n         }\n-        catch (final Throwable t2) {\n-            x0 = t2;\n-            throw t2;\n-        }\n-        finally {\n-            $closeResource(x0, jarOutputStream);\n-        }\n     }\n     \n     public static void copyThroughJar(final JarInputStream jarInputStream, final OutputStream outputStream) throws IOException {\n         final Manifest manifest = jarInputStream.getManifest();\n-        final JarOutputStream jarOutputStream = new JarOutputStream(outputStream, manifest);\n-        Throwable x0 = null;\n-        try {\n+        try (final JarOutputStream jarOutputStream = new JarOutputStream(outputStream, manifest)) {\n             jarOutputStream.setComment(\"PACK200\");\n             log(\"Packed META-INF/MANIFEST.MF\");\n             final byte[] bytes = new byte[16384];\n             JarEntry jarEntry;\n             while ((jarEntry = jarInputStream.getNextJarEntry()) != null) {\n                 jarOutputStream.putNextEntry(jarEntry);\n                 int bytesRead;\n                 while ((bytesRead = jarInputStream.read(bytes)) != -1) {\n                     jarOutputStream.write(bytes, 0, bytesRead);\n                 }\n                 log(\"Packed \" + jarEntry.getName());\n             }\n             jarInputStream.close();\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, jarOutputStream);\n-        }\n     }\n     \n     public static List<Archive.PackingFile> getPackingFileListFromJar(final JarFile jarFile, final boolean keepFileOrder) throws IOException {\n         final List<Archive.PackingFile> packingFileList = new ArrayList<Archive.PackingFile>();\n         final Enumeration<JarEntry> jarEntries = jarFile.entries();\n         while (jarEntries.hasMoreElements()) {\n             final JarEntry jarEntry = (JarEntry)jarEntries.nextElement();\n-            final InputStream inputStream = jarFile.getInputStream(jarEntry);\n-            Throwable x0 = null;\n-            try {\n+            try (final InputStream inputStream = jarFile.getInputStream(jarEntry)) {\n                 final byte[] bytes = readJarEntry(jarEntry, new BufferedInputStream(inputStream));\n                 packingFileList.add(new Archive.PackingFile(bytes, jarEntry));\n-            }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n-            }\n-            finally {\n-                if (inputStream != null) {\n-                    $closeResource(x0, inputStream);\n+                if (inputStream == null) {\n+                    continue;\n                 }\n             }\n         }\n         if (!keepFileOrder) {\n             reorderPackingFiles(packingFileList);\n         }\n         return packingFileList;\n@@ -195,26 +161,12 @@\n             }\n             else {\n                 return fileName0.compareTo(fileName2);\n             }\n         });\n     }\n     \n-    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n-        if (x0 != null) {\n-            try {\n-                x1.close();\n-            }\n-            catch (final Throwable exception) {\n-                x0.addSuppressed(exception);\n-            }\n-        }\n-        else {\n-            x1.close();\n-        }\n-    }\n-    \n     static {\n         PackingUtils.packingLogger = new PackingUtils.PackingLogger(\"org.harmony.apache.pack200\", (String)null);\n         LogManager.getLogManager().addLogger((Logger)PackingUtils.packingLogger);\n     }\n }\n"}]}
