{"diffoscope-json-version": 1, "source1": "first/CharSet.class", "source2": "second/CharSet.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,86 +16,80 @@\n     public static final CharSet ASCII_ALPHA;\n     public static final CharSet ASCII_ALPHA_LOWER;\n     public static final CharSet ASCII_ALPHA_UPPER;\n     public static final CharSet ASCII_NUMERIC;\n     protected static final Map<String, CharSet> COMMON;\n     private final Set<CharRange> set;\n     \n-    public static CharSet getInstance(final String... setStrs) {\n-        if (setStrs == null) {\n+    public static CharSet getInstance(final String... array) {\n+        if (array == null) {\n             return null;\n         }\n-        if (setStrs.length == 1) {\n-            final CharSet common = (CharSet)CharSet.COMMON.get(setStrs[0]);\n-            if (common != null) {\n-                return common;\n+        if (array.length == 1) {\n+            final CharSet set = (CharSet)CharSet.COMMON.get(array[0]);\n+            if (set != null) {\n+                return set;\n             }\n         }\n-        return new CharSet(setStrs);\n+        return new CharSet(array);\n     }\n     \n-    protected CharSet(final String... set) {\n+    protected CharSet(final String... array) {\n         this.set = Collections.synchronizedSet(new HashSet<CharRange>());\n-        for (final String s : set) {\n-            this.add(s);\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            this.add(array[i]);\n         }\n     }\n     \n-    protected void add(final String str) {\n-        if (str == null) {\n+    protected void add(final String s) {\n+        if (s == null) {\n             return;\n         }\n-        final int len = str.length();\n-        int pos = 0;\n-        while (pos < len) {\n-            final int remainder = len - pos;\n-            if (remainder >= 4 && str.charAt(pos) == '^' && str.charAt(pos + 2) == '-') {\n-                this.set.add(CharRange.isNotIn(str.charAt(pos + 1), str.charAt(pos + 3)));\n-                pos += 4;\n-            }\n-            else if (remainder >= 3 && str.charAt(pos + 1) == '-') {\n-                this.set.add(CharRange.isIn(str.charAt(pos), str.charAt(pos + 2)));\n-                pos += 3;\n-            }\n-            else if (remainder >= 2 && str.charAt(pos) == '^') {\n-                this.set.add(CharRange.isNot(str.charAt(pos + 1)));\n-                pos += 2;\n+        final int length = s.length();\n+        int i = 0;\n+        while (i < length) {\n+            final int n = length - i;\n+            if (n >= 4 && s.charAt(i) == '^' && s.charAt(i + 2) == '-') {\n+                this.set.add(CharRange.isNotIn(s.charAt(i + 1), s.charAt(i + 3)));\n+                i += 4;\n+            }\n+            else if (n >= 3 && s.charAt(i + 1) == '-') {\n+                this.set.add(CharRange.isIn(s.charAt(i), s.charAt(i + 2)));\n+                i += 3;\n+            }\n+            else if (n >= 2 && s.charAt(i) == '^') {\n+                this.set.add(CharRange.isNot(s.charAt(i + 1)));\n+                i += 2;\n             }\n             else {\n-                this.set.add(CharRange.is(str.charAt(pos)));\n-                ++pos;\n+                this.set.add(CharRange.is(s.charAt(i)));\n+                ++i;\n             }\n         }\n     }\n     \n     CharRange[] getCharRanges() {\n         return this.set.toArray(CharRange.EMPTY_ARRAY);\n     }\n     \n-    public boolean contains(final char ch) {\n+    public boolean contains(final char c) {\n         synchronized (this.set) {\n-            for (final CharRange range : this.set) {\n-                if (range.contains(ch)) {\n+            final Iterator<CharRange> iterator = this.set.iterator();\n+            while (iterator.hasNext()) {\n+                if (((CharRange)iterator.next()).contains(c)) {\n                     return true;\n                 }\n             }\n         }\n         return false;\n     }\n     \n     @Override\n-    public boolean equals(final Object obj) {\n-        if (obj == this) {\n-            return true;\n-        }\n-        if (!(obj instanceof CharSet)) {\n-            return false;\n-        }\n-        final CharSet other = (CharSet)obj;\n-        return this.set.equals(other.set);\n+    public boolean equals(final Object o) {\n+        return o == this || (o instanceof CharSet && this.set.equals(((CharSet)o).set));\n     }\n     \n     @Override\n     public int hashCode() {\n         return 89 + this.set.hashCode();\n     }\n     \n"}]}
