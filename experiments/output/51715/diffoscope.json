{"diffoscope-json-version": 1, "source1": "first/ExplodingInputStream.class", "source2": "second/ExplodingInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,139 +1,137 @@\n-  SHA-256 checksum 79712a42fe7b5ef1e002f7d47bf98bc1d9477e398dbd58a53fc4783c853e4983\n+  SHA-256 checksum 5b5e55e87d59152b405f3bd2a293501919b703751ed84584b8211e74e8c315f2\n   Compiled from \"ExplodingInputStream.java\"\n class org.apache.commons.compress.archivers.zip.ExplodingInputStream extends java.io.InputStream\n   minor version: 0\n   major version: 51\n   flags: (0x0020) ACC_SUPER\n-  this_class: #31                         // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-  super_class: #32                        // java/io/InputStream\n+  this_class: #1                          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+  super_class: #3                         // java/io/InputStream\n   interfaces: 0, fields: 9, methods: 4, attributes: 1\n Constant pool:\n-    #1 = Methodref          #32.#73       // java/io/InputStream.\"<init>\":()V\n-    #2 = Class              #74           // org/apache/commons/compress/archivers/zip/CircularBuffer\n-    #3 = Integer            32768\n-    #4 = Methodref          #2.#75        // org/apache/commons/compress/archivers/zip/CircularBuffer.\"<init>\":(I)V\n-    #5 = Fieldref           #31.#76       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n-    #6 = Class              #77           // java/lang/IllegalArgumentException\n-    #7 = String             #78           // The dictionary size must be 4096 or 8192\n-    #8 = Methodref          #6.#79        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #9 = String             #80           // The number of trees must be 2 or 3\n-   #10 = Fieldref           #31.#81       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.dictionarySize:I\n-   #11 = Fieldref           #31.#82       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.numberOfTrees:I\n-   #12 = Fieldref           #31.#83       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.minimumMatchLength:I\n-   #13 = Fieldref           #31.#84       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.in:Ljava/io/InputStream;\n-   #14 = Fieldref           #31.#85       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-   #15 = Methodref          #86.#87       // org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #16 = Fieldref           #31.#88       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #17 = Fieldref           #31.#89       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #18 = Fieldref           #31.#90       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #19 = Class              #91           // org/apache/commons/compress/archivers/zip/BitStream\n-   #20 = Methodref          #19.#92       // org/apache/commons/compress/archivers/zip/BitStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #21 = Methodref          #2.#93        // org/apache/commons/compress/archivers/zip/CircularBuffer.available:()Z\n-   #22 = Methodref          #31.#94       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.fillBuffer:()V\n-   #23 = Methodref          #2.#95        // org/apache/commons/compress/archivers/zip/CircularBuffer.get:()I\n-   #24 = Methodref          #31.#96       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.init:()V\n-   #25 = Methodref          #19.#97       // org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n-   #26 = Methodref          #86.#98       // org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n-   #27 = Methodref          #19.#99       // org/apache/commons/compress/archivers/zip/BitStream.nextByte:()I\n-   #28 = Methodref          #2.#100       // org/apache/commons/compress/archivers/zip/CircularBuffer.put:(I)V\n-   #29 = Methodref          #19.#101      // org/apache/commons/compress/archivers/zip/BitStream.nextBits:(I)J\n-   #30 = Methodref          #2.#102       // org/apache/commons/compress/archivers/zip/CircularBuffer.copy:(II)V\n-   #31 = Class              #103          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-   #32 = Class              #104          // java/io/InputStream\n-   #33 = Utf8               in\n-   #34 = Utf8               Ljava/io/InputStream;\n-   #35 = Utf8               bits\n-   #36 = Utf8               Lorg/apache/commons/compress/archivers/zip/BitStream;\n-   #37 = Utf8               dictionarySize\n-   #38 = Utf8               I\n-   #39 = Utf8               numberOfTrees\n-   #40 = Utf8               minimumMatchLength\n-   #41 = Utf8               literalTree\n-   #42 = Utf8               Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #43 = Utf8               lengthTree\n-   #44 = Utf8               distanceTree\n-   #45 = Utf8               buffer\n-   #46 = Utf8               Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n-   #47 = Utf8               <init>\n-   #48 = Utf8               (IILjava/io/InputStream;)V\n-   #49 = Utf8               Code\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+    #3 = Class              #4            // java/io/InputStream\n+    #4 = Utf8               java/io/InputStream\n+    #5 = Utf8               in\n+    #6 = Utf8               Ljava/io/InputStream;\n+    #7 = Utf8               bits\n+    #8 = Utf8               Lorg/apache/commons/compress/archivers/zip/BitStream;\n+    #9 = Utf8               dictionarySize\n+   #10 = Utf8               I\n+   #11 = Utf8               numberOfTrees\n+   #12 = Utf8               minimumMatchLength\n+   #13 = Utf8               literalTree\n+   #14 = Utf8               Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #15 = Utf8               lengthTree\n+   #16 = Utf8               distanceTree\n+   #17 = Utf8               buffer\n+   #18 = Utf8               Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+   #19 = Utf8               <init>\n+   #20 = Utf8               (IILjava/io/InputStream;)V\n+   #21 = Utf8               Code\n+   #22 = Methodref          #3.#23        // java/io/InputStream.\"<init>\":()V\n+   #23 = NameAndType        #19:#24       // \"<init>\":()V\n+   #24 = Utf8               ()V\n+   #25 = Class              #26           // org/apache/commons/compress/archivers/zip/CircularBuffer\n+   #26 = Utf8               org/apache/commons/compress/archivers/zip/CircularBuffer\n+   #27 = Integer            32768\n+   #28 = Methodref          #25.#29       // org/apache/commons/compress/archivers/zip/CircularBuffer.\"<init>\":(I)V\n+   #29 = NameAndType        #19:#30       // \"<init>\":(I)V\n+   #30 = Utf8               (I)V\n+   #31 = Fieldref           #1.#32        // org/apache/commons/compress/archivers/zip/ExplodingInputStream.buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+   #32 = NameAndType        #17:#18       // buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+   #33 = Class              #34           // java/lang/IllegalArgumentException\n+   #34 = Utf8               java/lang/IllegalArgumentException\n+   #35 = String             #36           // The dictionary size must be 4096 or 8192\n+   #36 = Utf8               The dictionary size must be 4096 or 8192\n+   #37 = Methodref          #33.#38       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #38 = NameAndType        #19:#39       // \"<init>\":(Ljava/lang/String;)V\n+   #39 = Utf8               (Ljava/lang/String;)V\n+   #40 = String             #41           // The number of trees must be 2 or 3\n+   #41 = Utf8               The number of trees must be 2 or 3\n+   #42 = Fieldref           #1.#43        // org/apache/commons/compress/archivers/zip/ExplodingInputStream.dictionarySize:I\n+   #43 = NameAndType        #9:#10        // dictionarySize:I\n+   #44 = Fieldref           #1.#45        // org/apache/commons/compress/archivers/zip/ExplodingInputStream.numberOfTrees:I\n+   #45 = NameAndType        #11:#10       // numberOfTrees:I\n+   #46 = Fieldref           #1.#47        // org/apache/commons/compress/archivers/zip/ExplodingInputStream.minimumMatchLength:I\n+   #47 = NameAndType        #12:#10       // minimumMatchLength:I\n+   #48 = Fieldref           #1.#49        // org/apache/commons/compress/archivers/zip/ExplodingInputStream.in:Ljava/io/InputStream;\n+   #49 = NameAndType        #5:#6         // in:Ljava/io/InputStream;\n    #50 = Utf8               LineNumberTable\n    #51 = Utf8               LocalVariableTable\n    #52 = Utf8               this\n    #53 = Utf8               Lorg/apache/commons/compress/archivers/zip/ExplodingInputStream;\n    #54 = Utf8               StackMapTable\n-   #55 = Class              #103          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-   #56 = Class              #104          // java/io/InputStream\n-   #57 = Utf8               init\n-   #58 = Utf8               ()V\n-   #59 = Utf8               Exceptions\n-   #60 = Class              #105          // java/io/IOException\n-   #61 = Utf8               read\n-   #62 = Utf8               ()I\n-   #63 = Utf8               fillBuffer\n-   #64 = Utf8               literal\n-   #65 = Utf8               distanceLowSize\n-   #66 = Utf8               distanceLow\n-   #67 = Utf8               distanceHigh\n-   #68 = Utf8               distance\n-   #69 = Utf8               length\n-   #70 = Utf8               bit\n-   #71 = Utf8               SourceFile\n-   #72 = Utf8               ExplodingInputStream.java\n-   #73 = NameAndType        #47:#58       // \"<init>\":()V\n-   #74 = Utf8               org/apache/commons/compress/archivers/zip/CircularBuffer\n-   #75 = NameAndType        #47:#106      // \"<init>\":(I)V\n-   #76 = NameAndType        #45:#46       // buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n-   #77 = Utf8               java/lang/IllegalArgumentException\n-   #78 = Utf8               The dictionary size must be 4096 or 8192\n-   #79 = NameAndType        #47:#107      // \"<init>\":(Ljava/lang/String;)V\n-   #80 = Utf8               The number of trees must be 2 or 3\n-   #81 = NameAndType        #37:#38       // dictionarySize:I\n-   #82 = NameAndType        #39:#38       // numberOfTrees:I\n-   #83 = NameAndType        #40:#38       // minimumMatchLength:I\n-   #84 = NameAndType        #33:#34       // in:Ljava/io/InputStream;\n-   #85 = NameAndType        #35:#36       // bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-   #86 = Class              #108          // org/apache/commons/compress/archivers/zip/BinaryTree\n-   #87 = NameAndType        #109:#110     // decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #88 = NameAndType        #41:#42       // literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #89 = NameAndType        #43:#42       // lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #90 = NameAndType        #44:#42       // distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #91 = Utf8               org/apache/commons/compress/archivers/zip/BitStream\n-   #92 = NameAndType        #47:#111      // \"<init>\":(Ljava/io/InputStream;)V\n-   #93 = NameAndType        #112:#113     // available:()Z\n-   #94 = NameAndType        #63:#58       // fillBuffer:()V\n-   #95 = NameAndType        #114:#62      // get:()I\n-   #96 = NameAndType        #57:#58       // init:()V\n-   #97 = NameAndType        #115:#62      // nextBit:()I\n-   #98 = NameAndType        #61:#116      // read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n-   #99 = NameAndType        #117:#62      // nextByte:()I\n-  #100 = NameAndType        #118:#106     // put:(I)V\n-  #101 = NameAndType        #119:#120     // nextBits:(I)J\n-  #102 = NameAndType        #121:#122     // copy:(II)V\n-  #103 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-  #104 = Utf8               java/io/InputStream\n-  #105 = Utf8               java/io/IOException\n-  #106 = Utf8               (I)V\n-  #107 = Utf8               (Ljava/lang/String;)V\n-  #108 = Utf8               org/apache/commons/compress/archivers/zip/BinaryTree\n-  #109 = Utf8               decode\n-  #110 = Utf8               (Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-  #111 = Utf8               (Ljava/io/InputStream;)V\n-  #112 = Utf8               available\n-  #113 = Utf8               ()Z\n-  #114 = Utf8               get\n-  #115 = Utf8               nextBit\n-  #116 = Utf8               (Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n-  #117 = Utf8               nextByte\n-  #118 = Utf8               put\n-  #119 = Utf8               nextBits\n-  #120 = Utf8               (I)J\n-  #121 = Utf8               copy\n-  #122 = Utf8               (II)V\n+   #55 = Utf8               init\n+   #56 = Utf8               Exceptions\n+   #57 = Class              #58           // java/io/IOException\n+   #58 = Utf8               java/io/IOException\n+   #59 = Fieldref           #1.#60        // org/apache/commons/compress/archivers/zip/ExplodingInputStream.bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+   #60 = NameAndType        #7:#8         // bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+   #61 = Methodref          #62.#64       // org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #62 = Class              #63           // org/apache/commons/compress/archivers/zip/BinaryTree\n+   #63 = Utf8               org/apache/commons/compress/archivers/zip/BinaryTree\n+   #64 = NameAndType        #65:#66       // decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #65 = Utf8               decode\n+   #66 = Utf8               (Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #67 = Fieldref           #1.#68        // org/apache/commons/compress/archivers/zip/ExplodingInputStream.literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #68 = NameAndType        #13:#14       // literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #69 = Fieldref           #1.#70        // org/apache/commons/compress/archivers/zip/ExplodingInputStream.lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #70 = NameAndType        #15:#14       // lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #71 = Fieldref           #1.#72        // org/apache/commons/compress/archivers/zip/ExplodingInputStream.distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #72 = NameAndType        #16:#14       // distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #73 = Class              #74           // org/apache/commons/compress/archivers/zip/BitStream\n+   #74 = Utf8               org/apache/commons/compress/archivers/zip/BitStream\n+   #75 = Methodref          #73.#76       // org/apache/commons/compress/archivers/zip/BitStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #76 = NameAndType        #19:#77       // \"<init>\":(Ljava/io/InputStream;)V\n+   #77 = Utf8               (Ljava/io/InputStream;)V\n+   #78 = Utf8               read\n+   #79 = Utf8               ()I\n+   #80 = Methodref          #25.#81       // org/apache/commons/compress/archivers/zip/CircularBuffer.available:()Z\n+   #81 = NameAndType        #82:#83       // available:()Z\n+   #82 = Utf8               available\n+   #83 = Utf8               ()Z\n+   #84 = Methodref          #1.#85        // org/apache/commons/compress/archivers/zip/ExplodingInputStream.fillBuffer:()V\n+   #85 = NameAndType        #86:#24       // fillBuffer:()V\n+   #86 = Utf8               fillBuffer\n+   #87 = Methodref          #25.#88       // org/apache/commons/compress/archivers/zip/CircularBuffer.get:()I\n+   #88 = NameAndType        #89:#79       // get:()I\n+   #89 = Utf8               get\n+   #90 = Methodref          #1.#91        // org/apache/commons/compress/archivers/zip/ExplodingInputStream.init:()V\n+   #91 = NameAndType        #55:#24       // init:()V\n+   #92 = Methodref          #73.#93       // org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n+   #93 = NameAndType        #94:#79       // nextBit:()I\n+   #94 = Utf8               nextBit\n+   #95 = Methodref          #62.#96       // org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+   #96 = NameAndType        #78:#97       // read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+   #97 = Utf8               (Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+   #98 = Methodref          #73.#99       // org/apache/commons/compress/archivers/zip/BitStream.nextByte:()I\n+   #99 = NameAndType        #100:#79      // nextByte:()I\n+  #100 = Utf8               nextByte\n+  #101 = Methodref          #25.#102      // org/apache/commons/compress/archivers/zip/CircularBuffer.put:(I)V\n+  #102 = NameAndType        #103:#30      // put:(I)V\n+  #103 = Utf8               put\n+  #104 = Methodref          #73.#105      // org/apache/commons/compress/archivers/zip/BitStream.nextBits:(I)J\n+  #105 = NameAndType        #106:#107     // nextBits:(I)J\n+  #106 = Utf8               nextBits\n+  #107 = Utf8               (I)J\n+  #108 = Methodref          #25.#109      // org/apache/commons/compress/archivers/zip/CircularBuffer.copy:(II)V\n+  #109 = NameAndType        #110:#111     // copy:(II)V\n+  #110 = Utf8               copy\n+  #111 = Utf8               (II)V\n+  #112 = Utf8               bit\n+  #113 = Utf8               literal\n+  #114 = Utf8               distanceLowSize\n+  #115 = Utf8               distanceLow\n+  #116 = Utf8               distanceHigh\n+  #117 = Utf8               distance\n+  #118 = Utf8               length\n+  #119 = Utf8               SourceFile\n+  #120 = Utf8               ExplodingInputStream.java\n {\n   private final java.io.InputStream in;\n     descriptor: Ljava/io/InputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private org.apache.commons.compress.archivers.zip.BitStream bits;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/BitStream;\n@@ -169,55 +167,55 @@\n \n   public org.apache.commons.compress.archivers.zip.ExplodingInputStream(int, int, java.io.InputStream);\n     descriptor: (IILjava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n-         1: invokespecial #1                  // Method java/io/InputStream.\"<init>\":()V\n+         1: invokespecial #22                 // Method java/io/InputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class org/apache/commons/compress/archivers/zip/CircularBuffer\n+         5: new           #25                 // class org/apache/commons/compress/archivers/zip/CircularBuffer\n          8: dup\n-         9: ldc           #3                  // int 32768\n-        11: invokespecial #4                  // Method org/apache/commons/compress/archivers/zip/CircularBuffer.\"<init>\":(I)V\n-        14: putfield      #5                  // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+         9: ldc           #27                 // int 32768\n+        11: invokespecial #28                 // Method org/apache/commons/compress/archivers/zip/CircularBuffer.\"<init>\":(I)V\n+        14: putfield      #31                 // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n         17: iload_1\n         18: sipush        4096\n         21: if_icmpeq     41\n         24: iload_1\n         25: sipush        8192\n         28: if_icmpeq     41\n-        31: new           #6                  // class java/lang/IllegalArgumentException\n+        31: new           #33                 // class java/lang/IllegalArgumentException\n         34: dup\n-        35: ldc           #7                  // String The dictionary size must be 4096 or 8192\n-        37: invokespecial #8                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        35: ldc           #35                 // String The dictionary size must be 4096 or 8192\n+        37: invokespecial #37                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         40: athrow\n         41: iload_2\n         42: iconst_2\n         43: if_icmpeq     61\n         46: iload_2\n         47: iconst_3\n         48: if_icmpeq     61\n-        51: new           #6                  // class java/lang/IllegalArgumentException\n+        51: new           #33                 // class java/lang/IllegalArgumentException\n         54: dup\n-        55: ldc           #9                  // String The number of trees must be 2 or 3\n-        57: invokespecial #8                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        55: ldc           #40                 // String The number of trees must be 2 or 3\n+        57: invokespecial #37                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         60: athrow\n         61: aload_0\n         62: iload_1\n-        63: putfield      #10                 // Field dictionarySize:I\n+        63: putfield      #42                 // Field dictionarySize:I\n         66: aload_0\n         67: iload_2\n-        68: putfield      #11                 // Field numberOfTrees:I\n+        68: putfield      #44                 // Field numberOfTrees:I\n         71: aload_0\n         72: iload_2\n-        73: putfield      #12                 // Field minimumMatchLength:I\n+        73: putfield      #46                 // Field minimumMatchLength:I\n         76: aload_0\n         77: aload_3\n-        78: putfield      #13                 // Field in:Ljava/io/InputStream;\n+        78: putfield      #48                 // Field in:Ljava/io/InputStream;\n         81: return\n       LineNumberTable:\n         line 73: 0\n         line 63: 4\n         line 74: 17\n         line 75: 31\n         line 77: 41\n@@ -239,48 +237,50 @@\n           locals = [ class org/apache/commons/compress/archivers/zip/ExplodingInputStream, int, int, class java/io/InputStream ]\n           stack = []\n         frame_type = 19 /* same */\n \n   private void init() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+         1: getfield      #59                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n          4: ifnonnull     70\n          7: aload_0\n-         8: getfield      #11                 // Field numberOfTrees:I\n+         8: getfield      #44                 // Field numberOfTrees:I\n         11: iconst_3\n         12: if_icmpne     29\n         15: aload_0\n         16: aload_0\n-        17: getfield      #13                 // Field in:Ljava/io/InputStream;\n+        17: getfield      #48                 // Field in:Ljava/io/InputStream;\n         20: sipush        256\n-        23: invokestatic  #15                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-        26: putfield      #16                 // Field literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        23: invokestatic  #61                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        26: putfield      #67                 // Field literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n         29: aload_0\n         30: aload_0\n-        31: getfield      #13                 // Field in:Ljava/io/InputStream;\n+        31: getfield      #48                 // Field in:Ljava/io/InputStream;\n         34: bipush        64\n-        36: invokestatic  #15                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-        39: putfield      #17                 // Field lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        36: invokestatic  #61                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        39: putfield      #69                 // Field lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n         42: aload_0\n         43: aload_0\n-        44: getfield      #13                 // Field in:Ljava/io/InputStream;\n+        44: getfield      #48                 // Field in:Ljava/io/InputStream;\n         47: bipush        64\n-        49: invokestatic  #15                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-        52: putfield      #18                 // Field distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        49: invokestatic  #61                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        52: putfield      #71                 // Field distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n         55: aload_0\n-        56: new           #19                 // class org/apache/commons/compress/archivers/zip/BitStream\n+        56: new           #73                 // class org/apache/commons/compress/archivers/zip/BitStream\n         59: dup\n         60: aload_0\n-        61: getfield      #13                 // Field in:Ljava/io/InputStream;\n-        64: invokespecial #20                 // Method org/apache/commons/compress/archivers/zip/BitStream.\"<init>\":(Ljava/io/InputStream;)V\n-        67: putfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+        61: getfield      #48                 // Field in:Ljava/io/InputStream;\n+        64: invokespecial #75                 // Method org/apache/commons/compress/archivers/zip/BitStream.\"<init>\":(Ljava/io/InputStream;)V\n+        67: putfield      #59                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n         70: return\n       LineNumberTable:\n         line 92: 0\n         line 93: 7\n         line 94: 15\n         line 97: 29\n         line 98: 42\n@@ -288,152 +288,153 @@\n         line 102: 70\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      71     0  this   Lorg/apache/commons/compress/archivers/zip/ExplodingInputStream;\n       StackMapTable: number_of_entries = 2\n         frame_type = 29 /* same */\n         frame_type = 40 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n-         4: invokevirtual #21                 // Method org/apache/commons/compress/archivers/zip/CircularBuffer.available:()Z\n+         1: getfield      #31                 // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+         4: invokevirtual #80                 // Method org/apache/commons/compress/archivers/zip/CircularBuffer.available:()Z\n          7: ifne          14\n         10: aload_0\n-        11: invokespecial #22                 // Method fillBuffer:()V\n+        11: invokespecial #84                 // Method fillBuffer:()V\n         14: aload_0\n-        15: getfield      #5                  // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n-        18: invokevirtual #23                 // Method org/apache/commons/compress/archivers/zip/CircularBuffer.get:()I\n+        15: getfield      #31                 // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+        18: invokevirtual #87                 // Method org/apache/commons/compress/archivers/zip/CircularBuffer.get:()I\n         21: ireturn\n       LineNumberTable:\n         line 106: 0\n         line 107: 10\n         line 110: 14\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      22     0  this   Lorg/apache/commons/compress/archivers/zip/ExplodingInputStream;\n       StackMapTable: number_of_entries = 1\n         frame_type = 14 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   private void fillBuffer() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=7, args_size=1\n          0: aload_0\n-         1: invokespecial #24                 // Method init:()V\n+         1: invokespecial #90                 // Method init:()V\n          4: aload_0\n-         5: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-         8: invokevirtual #25                 // Method org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n+         5: getfield      #59                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+         8: invokevirtual #92                 // Method org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n         11: istore_1\n         12: iload_1\n         13: iconst_1\n         14: if_icmpne     64\n         17: aload_0\n-        18: getfield      #16                 // Field literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        18: getfield      #67                 // Field literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n         21: ifnull        39\n         24: aload_0\n-        25: getfield      #16                 // Field literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        25: getfield      #67                 // Field literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n         28: aload_0\n-        29: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-        32: invokevirtual #26                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+        29: getfield      #59                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+        32: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n         35: istore_2\n         36: goto          47\n         39: aload_0\n-        40: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-        43: invokevirtual #27                 // Method org/apache/commons/compress/archivers/zip/BitStream.nextByte:()I\n+        40: getfield      #59                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+        43: invokevirtual #98                 // Method org/apache/commons/compress/archivers/zip/BitStream.nextByte:()I\n         46: istore_2\n         47: iload_2\n         48: iconst_m1\n         49: if_icmpne     53\n         52: return\n         53: aload_0\n-        54: getfield      #5                  // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+        54: getfield      #31                 // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n         57: iload_2\n-        58: invokevirtual #28                 // Method org/apache/commons/compress/archivers/zip/CircularBuffer.put:(I)V\n+        58: invokevirtual #101                // Method org/apache/commons/compress/archivers/zip/CircularBuffer.put:(I)V\n         61: goto          186\n         64: iload_1\n         65: ifne          186\n         68: aload_0\n-        69: getfield      #10                 // Field dictionarySize:I\n+        69: getfield      #42                 // Field dictionarySize:I\n         72: sipush        4096\n         75: if_icmpne     83\n         78: bipush        6\n         80: goto          85\n         83: bipush        7\n         85: istore_2\n         86: aload_0\n-        87: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+        87: getfield      #59                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n         90: iload_2\n-        91: invokevirtual #29                 // Method org/apache/commons/compress/archivers/zip/BitStream.nextBits:(I)J\n+        91: invokevirtual #104                // Method org/apache/commons/compress/archivers/zip/BitStream.nextBits:(I)J\n         94: l2i\n         95: istore_3\n         96: aload_0\n-        97: getfield      #18                 // Field distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        97: getfield      #71                 // Field distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n        100: aload_0\n-       101: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-       104: invokevirtual #26                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+       101: getfield      #59                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+       104: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n        107: istore        4\n        109: iload         4\n        111: iconst_m1\n        112: if_icmpne     120\n        115: iload_3\n        116: ifgt          120\n        119: return\n        120: iload         4\n        122: iload_2\n        123: ishl\n        124: iload_3\n        125: ior\n        126: istore        5\n        128: aload_0\n-       129: getfield      #17                 // Field lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+       129: getfield      #69                 // Field lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n        132: aload_0\n-       133: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-       136: invokevirtual #26                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+       133: getfield      #59                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+       136: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n        139: istore        6\n        141: iload         6\n        143: bipush        63\n        145: if_icmpne     164\n        148: iload         6\n        150: i2l\n        151: aload_0\n-       152: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+       152: getfield      #59                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n        155: bipush        8\n-       157: invokevirtual #29                 // Method org/apache/commons/compress/archivers/zip/BitStream.nextBits:(I)J\n+       157: invokevirtual #104                // Method org/apache/commons/compress/archivers/zip/BitStream.nextBits:(I)J\n        160: ladd\n        161: l2i\n        162: istore        6\n        164: iload         6\n        166: aload_0\n-       167: getfield      #12                 // Field minimumMatchLength:I\n+       167: getfield      #46                 // Field minimumMatchLength:I\n        170: iadd\n        171: istore        6\n        173: aload_0\n-       174: getfield      #5                  // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+       174: getfield      #31                 // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n        177: iload         5\n        179: iconst_1\n        180: iadd\n        181: iload         6\n-       183: invokevirtual #30                 // Method org/apache/commons/compress/archivers/zip/CircularBuffer.copy:(II)V\n+       183: invokevirtual #108                // Method org/apache/commons/compress/archivers/zip/CircularBuffer.copy:(II)V\n        186: return\n       LineNumberTable:\n         line 118: 0\n         line 120: 4\n         line 121: 12\n         line 124: 17\n         line 125: 24\n+        line 126: 36\n         line 127: 39\n         line 130: 47\n         line 132: 52\n         line 135: 53\n         line 137: 61\n         line 139: 68\n         line 140: 86\n@@ -445,23 +446,23 @@\n         line 149: 141\n         line 150: 148\n         line 152: 164\n         line 154: 173\n         line 156: 186\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n+            0     187     0  this   Lorg/apache/commons/compress/archivers/zip/ExplodingInputStream;\n+           12     175     1   bit   I\n            36       3     2 literal   I\n            47      14     2 literal   I\n            86     100     2 distanceLowSize   I\n            96      90     3 distanceLow   I\n           109      77     4 distanceHigh   I\n           128      58     5 distance   I\n           141      45     6 length   I\n-            0     187     0  this   Lorg/apache/commons/compress/archivers/zip/ExplodingInputStream;\n-           12     175     1   bit   I\n       StackMapTable: number_of_entries = 9\n         frame_type = 252 /* append */\n           offset_delta = 39\n           locals = [ int ]\n         frame_type = 252 /* append */\n           offset_delta = 7\n           locals = [ int ]\n@@ -477,11 +478,9 @@\n         frame_type = 253 /* append */\n           offset_delta = 43\n           locals = [ int, int ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 21\n           locals = [ class org/apache/commons/compress/archivers/zip/ExplodingInputStream, int ]\n           stack = []\n-    Exceptions:\n-      throws java.io.IOException\n }\n SourceFile: \"ExplodingInputStream.java\"\n"}]}
