{"diffoscope-json-version": 1, "source1": "first/CharRange.class", "source2": "second/CharRange.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,101 +10,101 @@\n     private final char start;\n     private final char end;\n     private final boolean negated;\n     private transient String iToString;\n     \n     private CharRange(char start, char end, final boolean negated) {\n         if (start > end) {\n-            final char temp = start;\n+            final char c = start;\n             start = end;\n-            end = temp;\n+            end = c;\n         }\n         this.start = start;\n         this.end = end;\n         this.negated = negated;\n     }\n     \n-    public static CharRange is(final char ch) {\n-        return new CharRange(ch, ch, false);\n+    public static CharRange is(final char c) {\n+        return new CharRange(c, c, false);\n     }\n     \n-    public static CharRange isNot(final char ch) {\n-        return new CharRange(ch, ch, true);\n+    public static CharRange isNot(final char c) {\n+        return new CharRange(c, c, true);\n     }\n     \n-    public static CharRange isIn(final char start, final char end) {\n-        return new CharRange(start, end, false);\n+    public static CharRange isIn(final char c, final char c2) {\n+        return new CharRange(c, c2, false);\n     }\n     \n-    public static CharRange isNotIn(final char start, final char end) {\n-        return new CharRange(start, end, true);\n+    public static CharRange isNotIn(final char c, final char c2) {\n+        return new CharRange(c, c2, true);\n     }\n     \n     public char getStart() {\n         return this.start;\n     }\n     \n     public char getEnd() {\n         return this.end;\n     }\n     \n     public boolean isNegated() {\n         return this.negated;\n     }\n     \n-    public boolean contains(final char ch) {\n-        return (ch >= this.start && ch <= this.end) != this.negated;\n+    public boolean contains(final char c) {\n+        return (c >= this.start && c <= this.end) != this.negated;\n     }\n     \n-    public boolean contains(final CharRange range) {\n-        Validate.notNull((Object)range, \"The Range must not be null\", new Object[0]);\n+    public boolean contains(final CharRange charRange) {\n+        Validate.notNull((Object)charRange, \"The Range must not be null\", new Object[0]);\n         if (this.negated) {\n-            if (range.negated) {\n-                return this.start >= range.start && this.end <= range.end;\n+            if (charRange.negated) {\n+                return this.start >= charRange.start && this.end <= charRange.end;\n             }\n-            return range.end < this.start || range.start > this.end;\n+            return charRange.end < this.start || charRange.start > this.end;\n         }\n         else {\n-            if (range.negated) {\n+            if (charRange.negated) {\n                 return this.start == '\\0' && this.end == '\\uffff';\n             }\n-            return this.start <= range.start && this.end >= range.end;\n+            return this.start <= charRange.start && this.end >= charRange.end;\n         }\n     }\n     \n     @Override\n-    public boolean equals(final Object obj) {\n-        if (obj == this) {\n+    public boolean equals(final Object o) {\n+        if (o == this) {\n             return true;\n         }\n-        if (!(obj instanceof CharRange)) {\n+        if (!(o instanceof CharRange)) {\n             return false;\n         }\n-        final CharRange other = (CharRange)obj;\n-        return this.start == other.start && this.end == other.end && this.negated == other.negated;\n+        final CharRange charRange = (CharRange)o;\n+        return this.start == charRange.start && this.end == charRange.end && this.negated == charRange.negated;\n     }\n     \n     @Override\n     public int hashCode() {\n         return 'S' + this.start + '\\u0007' * this.end + (this.negated ? 1 : 0);\n     }\n     \n     @Override\n     public String toString() {\n         if (this.iToString == null) {\n-            final StringBuilder buf = new StringBuilder(4);\n+            final StringBuilder sb = new StringBuilder(4);\n             if (this.isNegated()) {\n-                buf.append('^');\n+                sb.append('^');\n             }\n-            buf.append(this.start);\n+            sb.append(this.start);\n             if (this.start != this.end) {\n-                buf.append('-');\n-                buf.append(this.end);\n+                sb.append('-');\n+                sb.append(this.end);\n             }\n-            this.iToString = buf.toString();\n+            this.iToString = sb.toString();\n         }\n         return this.iToString;\n     }\n     \n     @Override\n     public Iterator<Character> iterator() {\n         return (Iterator<Character>)new CharRange.CharacterIterator(this, (CharRange.CharRange$1)null);\n"}]}
