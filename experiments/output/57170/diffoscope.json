{"diffoscope-json-version": 1, "source1": "first/FilenameUtils.class", "source2": "second/FilenameUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,21 +1,21 @@\n \n package org.apache.commons.io;\n \n-import java.io.File;\n import java.util.List;\n import java.util.Arrays;\n import java.util.regex.Matcher;\n import java.util.ArrayList;\n import java.util.Deque;\n import java.util.ArrayDeque;\n import java.util.Iterator;\n import java.util.Collection;\n import java.io.IOException;\n import java.util.Objects;\n+import java.io.File;\n import java.util.regex.Pattern;\n \n public class FilenameUtils\n {\n     private static final String[] EMPTY_STRING_ARRAY;\n     private static final String EMPTY_STRING = \"\";\n     private static final int NOT_FOUND = -1;\n@@ -29,14 +29,28 @@\n     private static final int IPV4_MAX_OCTET_VALUE = 255;\n     private static final int IPV6_MAX_HEX_GROUPS = 8;\n     private static final int IPV6_MAX_HEX_DIGITS_PER_GROUP = 4;\n     private static final int MAX_UNSIGNED_SHORT = 65535;\n     private static final int BASE_16 = 16;\n     private static final Pattern REG_NAME_PART_PATTERN;\n     \n+    static {\n+        EMPTY_STRING_ARRAY = new String[0];\n+        EXTENSION_SEPARATOR_STR = Character.toString('.');\n+        SYSTEM_SEPARATOR = File.separatorChar;\n+        if (isSystemWindows()) {\n+            OTHER_SEPARATOR = '/';\n+        }\n+        else {\n+            OTHER_SEPARATOR = '\\\\';\n+        }\n+        IPV4_PATTERN = Pattern.compile(\"^(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})$\");\n+        REG_NAME_PART_PATTERN = Pattern.compile(\"^[a-zA-Z0-9][a-zA-Z0-9-]*$\");\n+    }\n+    \n     static boolean isSystemWindows() {\n         return FilenameUtils.SYSTEM_SEPARATOR == '\\\\';\n     }\n     \n     private static boolean isSeparator(final char ch) {\n         return ch == '/' || ch == '\\\\';\n     }\n@@ -98,29 +112,29 @@\n                     lastIsDirectory = true;\n                 }\n                 System.arraycopy(array, j + 1, array, j - 1, size - j);\n                 size -= 2;\n                 --j;\n             }\n         }\n-    Label_0475:\n+    Label_0472:\n         for (int j = prefix + 2; j < size; ++j) {\n             if (array[j] == separator && array[j - 1] == '.' && array[j - 2] == '.' && (j == prefix + 2 || array[j - 3] == separator)) {\n                 if (j == prefix + 2) {\n                     return null;\n                 }\n                 if (j == size - 1) {\n                     lastIsDirectory = true;\n                 }\n                 for (int k = j - 4; k >= prefix; --k) {\n                     if (array[k] == separator) {\n                         System.arraycopy(array, j + 1, array, k + 1, size - j);\n                         size -= j - k;\n                         j = k + 1;\n-                        continue Label_0475;\n+                        continue Label_0472;\n                     }\n                 }\n                 System.arraycopy(array, j + 1, array, prefix, size - j);\n                 size -= j + 1 - prefix;\n                 j = prefix + 1;\n             }\n         }\n@@ -149,17 +163,17 @@\n         }\n         final int len = basePath.length();\n         if (len == 0) {\n             return normalize(fullFileNameToAdd);\n         }\n         final char ch = basePath.charAt(len - 1);\n         if (isSeparator(ch)) {\n-            return normalize(basePath + fullFileNameToAdd);\n+            return normalize(String.valueOf(basePath) + fullFileNameToAdd);\n         }\n-        return normalize(basePath + '/' + fullFileNameToAdd);\n+        return normalize(String.valueOf(basePath) + '/' + fullFileNameToAdd);\n     }\n     \n     public static boolean directoryContains(final String canonicalParent, final String canonicalChild) throws IOException {\n         Objects.requireNonNull(canonicalParent, \"canonicalParent\");\n         return canonicalChild != null && !IOCase.SYSTEM.checkEquals(canonicalParent, canonicalChild) && IOCase.SYSTEM.checkStartsWith(canonicalChild, canonicalParent);\n     }\n     \n@@ -279,16 +293,16 @@\n             return null;\n         }\n         final int len = getPrefixLength(fileName);\n         if (len < 0) {\n             return null;\n         }\n         if (len > fileName.length()) {\n-            requireNonNullChars(fileName + '/');\n-            return fileName + '/';\n+            requireNonNullChars(String.valueOf(fileName) + '/');\n+            return String.valueOf(fileName) + '/';\n         }\n         final String path = fileName.substring(0, len);\n         requireNonNullChars(path);\n         return path;\n     }\n     \n     public static String getPath(final String fileName) {\n@@ -566,15 +580,17 @@\n         if (text.indexOf(63) == -1 && text.indexOf(42) == -1) {\n             return new String[] { text };\n         }\n         final char[] array = text.toCharArray();\n         final ArrayList<String> list = new ArrayList<String>();\n         final StringBuilder buffer = new StringBuilder();\n         char prevChar = '\\0';\n-        for (final char ch : array) {\n+        char[] array2;\n+        for (int length = (array2 = array).length, i = 0; i < length; ++i) {\n+            final char ch = array2[i];\n             if (ch == '?' || ch == '*') {\n                 if (buffer.length() != 0) {\n                     list.add(buffer.toString());\n                     buffer.setLength();\n                 }\n                 if (ch == '?') {\n                     list.add(\"?\");\n@@ -660,15 +676,15 @@\n                     if (octet.length() > 4) {\n                         return false;\n                     }\n                     int octetInt = 0;\n                     try {\n                         octetInt = Integer.parseInt(octet, 16);\n                     }\n-                    catch (final NumberFormatException e) {\n+                    catch (final NumberFormatException ex) {\n                         return false;\n                     }\n                     if (octetInt < 0 || octetInt > 65535) {\n                         return false;\n                     }\n                 }\n             }\n@@ -685,22 +701,8 @@\n             }\n             if (!FilenameUtils.REG_NAME_PART_PATTERN.matcher(parts[i]).matches()) {\n                 return false;\n             }\n         }\n         return true;\n     }\n-    \n-    static {\n-        EMPTY_STRING_ARRAY = new String[0];\n-        EXTENSION_SEPARATOR_STR = Character.toString('.');\n-        SYSTEM_SEPARATOR = File.separatorChar;\n-        if (isSystemWindows()) {\n-            OTHER_SEPARATOR = '/';\n-        }\n-        else {\n-            OTHER_SEPARATOR = '\\\\';\n-        }\n-        IPV4_PATTERN = Pattern.compile(\"^(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})$\");\n-        REG_NAME_PART_PATTERN = Pattern.compile(\"^[a-zA-Z0-9][a-zA-Z0-9-]*$\");\n-    }\n }\n"}]}
