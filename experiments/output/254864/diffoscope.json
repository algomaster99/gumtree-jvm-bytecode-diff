{"diffoscope-json-version": 1, "source1": "first/BaseNCodecInputStream.class", "source2": "second/BaseNCodecInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,16 +10,16 @@\n {\n     private final BaseNCodec baseNCodec;\n     private final boolean doEncode;\n     private final byte[] singleByte;\n     private final byte[] buf;\n     private final BaseNCodec.Context context;\n     \n-    protected BaseNCodecInputStream(final InputStream inputStream, final BaseNCodec baseNCodec, final boolean doEncode) {\n-        super(inputStream);\n+    protected BaseNCodecInputStream(final InputStream in, final BaseNCodec baseNCodec, final boolean doEncode) {\n+        super(in);\n         this.singleByte = new byte[1];\n         this.context = new BaseNCodec.Context();\n         this.doEncode = doEncode;\n         this.baseNCodec = baseNCodec;\n         this.buf = new byte[doEncode ? 4096 : 8192];\n     }\n     \n@@ -29,81 +29,80 @@\n     }\n     \n     public boolean isStrictDecoding() {\n         return this.baseNCodec.isStrictDecoding();\n     }\n     \n     @Override\n-    public synchronized void mark(final int readLimit) {\n+    public synchronized void mark(final int n) {\n     }\n     \n     @Override\n     public boolean markSupported() {\n         return false;\n     }\n     \n     @Override\n     public int read() throws IOException {\n-        int r;\n-        for (r = this.read(this.singleByte, 0, 1); r == 0; r = this.read(this.singleByte, 0, 1)) {}\n-        if (r > 0) {\n+        int i;\n+        for (i = this.read(this.singleByte, 0, 1); i == 0; i = this.read(this.singleByte, 0, 1)) {}\n+        if (i > 0) {\n             final byte b = this.singleByte[0];\n             return (b < 0) ? (256 + b) : b;\n         }\n         return -1;\n     }\n     \n     @Override\n-    public int read(final byte[] array, final int offset, final int len) throws IOException {\n-        Objects.requireNonNull(array, \"array\");\n-        if (offset < 0 || len < 0) {\n+    public int read(final byte[] obj, final int n, final int n2) throws IOException {\n+        Objects.requireNonNull(obj, \"array\");\n+        if (n < 0 || n2 < 0) {\n             throw new IndexOutOfBoundsException();\n         }\n-        if (offset > array.length || offset + len > array.length) {\n+        if (n > obj.length || n + n2 > obj.length) {\n             throw new IndexOutOfBoundsException();\n         }\n-        if (len == 0) {\n+        if (n2 == 0) {\n             return 0;\n         }\n-        int readLen;\n-        int read;\n-        for (readLen = 0; readLen < len; readLen += read) {\n+        int i;\n+        int results;\n+        for (i = 0; i < n2; i += results) {\n             if (!this.baseNCodec.hasData(this.context)) {\n-                final int c = this.in.read(this.buf);\n+                final int read = this.in.read(this.buf);\n                 if (this.doEncode) {\n-                    this.baseNCodec.encode(this.buf, 0, c, this.context);\n+                    this.baseNCodec.encode(this.buf, 0, read, this.context);\n                 }\n                 else {\n-                    this.baseNCodec.decode(this.buf, 0, c, this.context);\n+                    this.baseNCodec.decode(this.buf, 0, read, this.context);\n                 }\n             }\n-            read = this.baseNCodec.readResults(array, offset + readLen, len - readLen, this.context);\n-            if (read < 0) {\n-                return (readLen != 0) ? readLen : -1;\n+            results = this.baseNCodec.readResults(obj, n + i, n2 - i, this.context);\n+            if (results < 0) {\n+                return (i != 0) ? i : -1;\n             }\n         }\n-        return readLen;\n+        return i;\n     }\n     \n     @Override\n     public synchronized void reset() throws IOException {\n         throw new IOException(\"mark/reset not supported\");\n     }\n     \n     @Override\n-    public long skip(final long n) throws IOException {\n-        if (n < 0L) {\n-            throw new IllegalArgumentException(\"Negative skip length: \" + n);\n-        }\n-        final byte[] b = new byte[512];\n-        long todo;\n-        int len;\n-        for (todo = n; todo > 0L; todo -= len) {\n-            len = (int)Math.min(b.length, todo);\n-            len = this.read(b, 0, len);\n-            if (len == -1) {\n+    public long skip(final long lng) throws IOException {\n+        if (lng < 0L) {\n+            throw new IllegalArgumentException(\"Negative skip length: \" + lng);\n+        }\n+        final byte[] array = new byte[512];\n+        long b;\n+        int read;\n+        for (b = lng; b > 0L; b -= read) {\n+            read = this.read(array, 0, (int)Math.min(array.length, b));\n+            if (read == -1) {\n                 break;\n             }\n         }\n-        return n - todo;\n+        return lng - b;\n     }\n }\n"}]}
