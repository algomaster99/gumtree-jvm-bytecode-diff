{"diffoscope-json-version": 1, "source1": "first/BaseNCodec.class", "source2": "second/BaseNCodec.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,87 +1,87 @@\n-  SHA-256 checksum 2bd333051fd555108c9f959183e71d0816189e5c34b06977a111725bcdedc82d\n+  SHA-256 checksum 70bb500b2e7124c91441f8bb724d978d9a41943ed62c1217625c0935e4d3cad6\n   Compiled from \"BaseNCodec.java\"\n public abstract class org.apache.commons.codec.binary.BaseNCodec implements org.apache.commons.codec.BinaryEncoder,org.apache.commons.codec.BinaryDecoder\n   minor version: 0\n   major version: 52\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n   this_class: #12                         // org/apache/commons/codec/binary/BaseNCodec\n   super_class: #69                        // java/lang/Object\n   interfaces: 2, fields: 17, methods: 30, attributes: 2\n Constant pool:\n-    #1 = Class              #159          // java/lang/Integer\n-    #2 = Class              #160          // java/lang/OutOfMemoryError\n-    #3 = Class              #161          // java/lang/StringBuilder\n-    #4 = Methodref          #3.#162       // java/lang/StringBuilder.\"<init>\":()V\n-    #5 = String             #163          // Unable to allocate array size:\n-    #6 = Methodref          #3.#164       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+    #1 = Class              #157          // java/lang/Integer\n+    #2 = Class              #158          // java/lang/OutOfMemoryError\n+    #3 = Class              #159          // java/lang/StringBuilder\n+    #4 = Methodref          #3.#160       // java/lang/StringBuilder.\"<init>\":()V\n+    #5 = String             #161          // Unable to allocate array size:\n+    #6 = Methodref          #3.#162       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n     #7 = Long               4294967295l\n-    #9 = Methodref          #3.#165       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #10 = Methodref          #3.#166       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #11 = Methodref          #2.#167       // java/lang/OutOfMemoryError.\"<init>\":(Ljava/lang/String;)V\n-   #12 = Class              #168          // org/apache/commons/codec/binary/BaseNCodec\n+    #9 = Methodref          #3.#163       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #10 = Methodref          #3.#164       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #11 = Methodref          #2.#165       // java/lang/OutOfMemoryError.\"<init>\":(Ljava/lang/String;)V\n+   #12 = Class              #166          // org/apache/commons/codec/binary/BaseNCodec\n    #13 = Integer            2147483639\n-   #14 = Methodref          #169.#170     // java/lang/Math.max:(II)I\n-   #15 = Fieldref           #12.#171      // org/apache/commons/codec/binary/BaseNCodec.CHUNK_SEPARATOR:[B\n-   #16 = Methodref          #172.#173     // \"[B\".clone:()Ljava/lang/Object;\n+   #14 = Methodref          #167.#168     // java/lang/Math.max:(II)I\n+   #15 = Fieldref           #12.#169      // org/apache/commons/codec/binary/BaseNCodec.CHUNK_SEPARATOR:[B\n+   #16 = Methodref          #170.#171     // \"[B\".clone:()Ljava/lang/Object;\n    #17 = Class              #95           // \"[B\"\n-   #18 = Methodref          #174.#175     // java/lang/Character.isWhitespace:(I)Z\n-   #19 = Fieldref           #42.#176      // org/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B\n-   #20 = Methodref          #1.#177       // java/lang/Integer.compareUnsigned:(II)I\n-   #21 = Methodref          #12.#178      // org/apache/commons/codec/binary/BaseNCodec.createPositiveCapacity:(I)I\n-   #22 = Methodref          #179.#180     // java/util/Arrays.copyOf:([BI)[B\n-   #23 = Methodref          #12.#181      // org/apache/commons/codec/binary/BaseNCodec.\"<init>\":(IIIIB)V\n-   #24 = Fieldref           #12.#182      // org/apache/commons/codec/binary/BaseNCodec.DECODING_POLICY_DEFAULT:Lorg/apache/commons/codec/CodecPolicy;\n-   #25 = Methodref          #12.#183      // org/apache/commons/codec/binary/BaseNCodec.\"<init>\":(IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n-   #26 = Methodref          #69.#162      // java/lang/Object.\"<init>\":()V\n-   #27 = Fieldref           #12.#184      // org/apache/commons/codec/binary/BaseNCodec.PAD:B\n-   #28 = Fieldref           #12.#185      // org/apache/commons/codec/binary/BaseNCodec.unencodedBlockSize:I\n-   #29 = Fieldref           #12.#186      // org/apache/commons/codec/binary/BaseNCodec.encodedBlockSize:I\n-   #30 = Fieldref           #12.#187      // org/apache/commons/codec/binary/BaseNCodec.lineLength:I\n-   #31 = Fieldref           #12.#188      // org/apache/commons/codec/binary/BaseNCodec.chunkSeparatorLength:I\n-   #32 = Fieldref           #12.#189      // org/apache/commons/codec/binary/BaseNCodec.pad:B\n-   #33 = String             #190          // codecPolicy\n-   #34 = Methodref          #191.#192     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #35 = Class              #193          // org/apache/commons/codec/CodecPolicy\n-   #36 = Fieldref           #12.#194      // org/apache/commons/codec/binary/BaseNCodec.decodingPolicy:Lorg/apache/commons/codec/CodecPolicy;\n-   #37 = Methodref          #12.#195      // org/apache/commons/codec/binary/BaseNCodec.hasData:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z\n-   #38 = Fieldref           #42.#196      // org/apache/commons/codec/binary/BaseNCodec$Context.pos:I\n-   #39 = Fieldref           #42.#197      // org/apache/commons/codec/binary/BaseNCodec$Context.readPos:I\n-   #40 = Methodref          #12.#198      // org/apache/commons/codec/binary/BaseNCodec.isInAlphabet:(B)Z\n-   #41 = Methodref          #199.#200     // org/apache/commons/codec/binary/BinaryCodec.isEmpty:([B)Z\n-   #42 = Class              #201          // org/apache/commons/codec/binary/BaseNCodec$Context\n-   #43 = Methodref          #42.#162      // org/apache/commons/codec/binary/BaseNCodec$Context.\"<init>\":()V\n-   #44 = Methodref          #12.#202      // org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #45 = Methodref          #12.#203      // org/apache/commons/codec/binary/BaseNCodec.readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-   #46 = Methodref          #12.#204      // org/apache/commons/codec/binary/BaseNCodec.decode:([B)[B\n-   #47 = Class              #205          // java/lang/String\n-   #48 = Methodref          #12.#206      // org/apache/commons/codec/binary/BaseNCodec.decode:(Ljava/lang/String;)[B\n-   #49 = Class              #207          // org/apache/commons/codec/DecoderException\n-   #50 = String             #208          // Parameter supplied to Base-N decode is not a byte[] or a String\n-   #51 = Methodref          #49.#167      // org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n-   #52 = Methodref          #209.#210     // org/apache/commons/codec/binary/StringUtils.getBytesUtf8:(Ljava/lang/String;)[B\n-   #53 = Methodref          #12.#211      // org/apache/commons/codec/binary/BaseNCodec.encode:([BII)[B\n-   #54 = Methodref          #12.#212      // org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #55 = Class              #213          // org/apache/commons/codec/EncoderException\n-   #56 = String             #214          // Parameter supplied to Base-N encode is not a byte[]\n-   #57 = Methodref          #55.#167      // org/apache/commons/codec/EncoderException.\"<init>\":(Ljava/lang/String;)V\n-   #58 = Methodref          #12.#215      // org/apache/commons/codec/binary/BaseNCodec.encode:([B)[B\n-   #59 = Methodref          #209.#216     // org/apache/commons/codec/binary/StringUtils.newStringUtf8:([B)Ljava/lang/String;\n-   #60 = Methodref          #12.#217      // org/apache/commons/codec/binary/BaseNCodec.getDefaultBufferSize:()I\n-   #61 = Methodref          #12.#218      // org/apache/commons/codec/binary/BaseNCodec.resizeBuffer:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;I)[B\n-   #62 = Methodref          #12.#219      // org/apache/commons/codec/binary/BaseNCodec.isInAlphabet:([BZ)Z\n-   #63 = Fieldref           #35.#220      // org/apache/commons/codec/CodecPolicy.STRICT:Lorg/apache/commons/codec/CodecPolicy;\n-   #64 = Methodref          #12.#221      // org/apache/commons/codec/binary/BaseNCodec.available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-   #65 = Methodref          #169.#222     // java/lang/Math.min:(II)I\n-   #66 = Methodref          #223.#224     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #67 = Fieldref           #42.#225      // org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n-   #68 = Fieldref           #35.#226      // org/apache/commons/codec/CodecPolicy.LENIENT:Lorg/apache/commons/codec/CodecPolicy;\n-   #69 = Class              #227          // java/lang/Object\n-   #70 = Class              #228          // org/apache/commons/codec/BinaryEncoder\n-   #71 = Class              #229          // org/apache/commons/codec/BinaryDecoder\n+   #18 = Methodref          #172.#173     // java/lang/Character.isWhitespace:(I)Z\n+   #19 = Fieldref           #42.#174      // org/apache/commons/codec/binary/BaseNCodec$Context.buffer:[B\n+   #20 = Methodref          #1.#175       // java/lang/Integer.compareUnsigned:(II)I\n+   #21 = Methodref          #12.#176      // org/apache/commons/codec/binary/BaseNCodec.createPositiveCapacity:(I)I\n+   #22 = Methodref          #177.#178     // java/util/Arrays.copyOf:([BI)[B\n+   #23 = Methodref          #12.#179      // org/apache/commons/codec/binary/BaseNCodec.\"<init>\":(IIIIB)V\n+   #24 = Fieldref           #12.#180      // org/apache/commons/codec/binary/BaseNCodec.DECODING_POLICY_DEFAULT:Lorg/apache/commons/codec/CodecPolicy;\n+   #25 = Methodref          #12.#181      // org/apache/commons/codec/binary/BaseNCodec.\"<init>\":(IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n+   #26 = Methodref          #69.#160      // java/lang/Object.\"<init>\":()V\n+   #27 = Fieldref           #12.#182      // org/apache/commons/codec/binary/BaseNCodec.PAD:B\n+   #28 = Fieldref           #12.#183      // org/apache/commons/codec/binary/BaseNCodec.unencodedBlockSize:I\n+   #29 = Fieldref           #12.#184      // org/apache/commons/codec/binary/BaseNCodec.encodedBlockSize:I\n+   #30 = Fieldref           #12.#185      // org/apache/commons/codec/binary/BaseNCodec.lineLength:I\n+   #31 = Fieldref           #12.#186      // org/apache/commons/codec/binary/BaseNCodec.chunkSeparatorLength:I\n+   #32 = Fieldref           #12.#187      // org/apache/commons/codec/binary/BaseNCodec.pad:B\n+   #33 = String             #188          // codecPolicy\n+   #34 = Methodref          #189.#190     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #35 = Class              #191          // org/apache/commons/codec/CodecPolicy\n+   #36 = Fieldref           #12.#192      // org/apache/commons/codec/binary/BaseNCodec.decodingPolicy:Lorg/apache/commons/codec/CodecPolicy;\n+   #37 = Methodref          #12.#193      // org/apache/commons/codec/binary/BaseNCodec.hasData:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z\n+   #38 = Fieldref           #42.#194      // org/apache/commons/codec/binary/BaseNCodec$Context.pos:I\n+   #39 = Fieldref           #42.#195      // org/apache/commons/codec/binary/BaseNCodec$Context.readPos:I\n+   #40 = Methodref          #12.#196      // org/apache/commons/codec/binary/BaseNCodec.isInAlphabet:(B)Z\n+   #41 = Methodref          #197.#198     // org/apache/commons/codec/binary/BinaryCodec.isEmpty:([B)Z\n+   #42 = Class              #199          // org/apache/commons/codec/binary/BaseNCodec$Context\n+   #43 = Methodref          #42.#160      // org/apache/commons/codec/binary/BaseNCodec$Context.\"<init>\":()V\n+   #44 = Methodref          #12.#200      // org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #45 = Methodref          #12.#201      // org/apache/commons/codec/binary/BaseNCodec.readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #46 = Methodref          #12.#202      // org/apache/commons/codec/binary/BaseNCodec.decode:([B)[B\n+   #47 = Class              #203          // java/lang/String\n+   #48 = Methodref          #12.#204      // org/apache/commons/codec/binary/BaseNCodec.decode:(Ljava/lang/String;)[B\n+   #49 = Class              #205          // org/apache/commons/codec/DecoderException\n+   #50 = String             #206          // Parameter supplied to Base-N decode is not a byte[] or a String\n+   #51 = Methodref          #49.#165      // org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n+   #52 = Methodref          #207.#208     // org/apache/commons/codec/binary/StringUtils.getBytesUtf8:(Ljava/lang/String;)[B\n+   #53 = Methodref          #12.#209      // org/apache/commons/codec/binary/BaseNCodec.encode:([BII)[B\n+   #54 = Methodref          #12.#210      // org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #55 = Class              #211          // org/apache/commons/codec/EncoderException\n+   #56 = String             #212          // Parameter supplied to Base-N encode is not a byte[]\n+   #57 = Methodref          #55.#165      // org/apache/commons/codec/EncoderException.\"<init>\":(Ljava/lang/String;)V\n+   #58 = Methodref          #12.#213      // org/apache/commons/codec/binary/BaseNCodec.encode:([B)[B\n+   #59 = Methodref          #207.#214     // org/apache/commons/codec/binary/StringUtils.newStringUtf8:([B)Ljava/lang/String;\n+   #60 = Methodref          #12.#215      // org/apache/commons/codec/binary/BaseNCodec.getDefaultBufferSize:()I\n+   #61 = Methodref          #12.#216      // org/apache/commons/codec/binary/BaseNCodec.resizeBuffer:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;I)[B\n+   #62 = Methodref          #12.#217      // org/apache/commons/codec/binary/BaseNCodec.isInAlphabet:([BZ)Z\n+   #63 = Fieldref           #35.#218      // org/apache/commons/codec/CodecPolicy.STRICT:Lorg/apache/commons/codec/CodecPolicy;\n+   #64 = Methodref          #12.#219      // org/apache/commons/codec/binary/BaseNCodec.available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #65 = Methodref          #167.#220     // java/lang/Math.min:(II)I\n+   #66 = Methodref          #221.#222     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #67 = Fieldref           #42.#223      // org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n+   #68 = Fieldref           #35.#224      // org/apache/commons/codec/CodecPolicy.LENIENT:Lorg/apache/commons/codec/CodecPolicy;\n+   #69 = Class              #225          // java/lang/Object\n+   #70 = Class              #226          // org/apache/commons/codec/BinaryEncoder\n+   #71 = Class              #227          // org/apache/commons/codec/BinaryDecoder\n    #72 = Utf8               Context\n    #73 = Utf8               InnerClasses\n    #74 = Utf8               EOF\n    #75 = Utf8               I\n    #76 = Utf8               ConstantValue\n    #77 = Integer            -1\n    #78 = Utf8               MIME_CHUNK_SIZE\n@@ -123,160 +123,158 @@\n   #114 = Utf8               (B)Z\n   #115 = Utf8               resizeBuffer\n   #116 = Utf8               (Lorg/apache/commons/codec/binary/BaseNCodec$Context;I)[B\n   #117 = Utf8               <init>\n   #118 = Utf8               (IIII)V\n   #119 = Utf8               (IIIIB)V\n   #120 = Utf8               (IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n-  #121 = Class              #168          // org/apache/commons/codec/binary/BaseNCodec\n-  #122 = Class              #193          // org/apache/commons/codec/CodecPolicy\n-  #123 = Utf8               available\n-  #124 = Utf8               (Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-  #125 = Utf8               containsAlphabetOrPad\n-  #126 = Utf8               ([B)Z\n-  #127 = Utf8               decode\n-  #128 = Utf8               ([B)[B\n-  #129 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #130 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #131 = Utf8               Exceptions\n-  #132 = Utf8               (Ljava/lang/String;)[B\n-  #133 = Utf8               encode\n-  #134 = Utf8               ([BII)[B\n-  #135 = Utf8               encodeAsString\n-  #136 = Utf8               ([B)Ljava/lang/String;\n-  #137 = Utf8               encodeToString\n-  #138 = Utf8               ensureBufferSize\n-  #139 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-  #140 = Utf8               getCodecPolicy\n-  #141 = Utf8               ()Lorg/apache/commons/codec/CodecPolicy;\n-  #142 = Utf8               getDefaultBufferSize\n-  #143 = Utf8               ()I\n-  #144 = Utf8               getEncodedLength\n-  #145 = Utf8               ([B)J\n-  #146 = Utf8               hasData\n-  #147 = Utf8               (Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z\n-  #148 = Utf8               isInAlphabet\n-  #149 = Utf8               ([BZ)Z\n-  #150 = Utf8               (Ljava/lang/String;)Z\n-  #151 = Utf8               isStrictDecoding\n-  #152 = Utf8               ()Z\n-  #153 = Utf8               readResults\n-  #154 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-  #155 = Utf8               <clinit>\n-  #156 = Utf8               ()V\n-  #157 = Utf8               SourceFile\n-  #158 = Utf8               BaseNCodec.java\n-  #159 = Utf8               java/lang/Integer\n-  #160 = Utf8               java/lang/OutOfMemoryError\n-  #161 = Utf8               java/lang/StringBuilder\n-  #162 = NameAndType        #117:#156     // \"<init>\":()V\n-  #163 = Utf8               Unable to allocate array size:\n-  #164 = NameAndType        #230:#231     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #165 = NameAndType        #230:#232     // append:(J)Ljava/lang/StringBuilder;\n-  #166 = NameAndType        #233:#234     // toString:()Ljava/lang/String;\n-  #167 = NameAndType        #117:#235     // \"<init>\":(Ljava/lang/String;)V\n-  #168 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n-  #169 = Class              #236          // java/lang/Math\n-  #170 = NameAndType        #237:#238     // max:(II)I\n-  #171 = NameAndType        #94:#95       // CHUNK_SEPARATOR:[B\n-  #172 = Class              #95           // \"[B\"\n-  #173 = NameAndType        #239:#240     // clone:()Ljava/lang/Object;\n-  #174 = Class              #241          // java/lang/Character\n-  #175 = NameAndType        #242:#243     // isWhitespace:(I)Z\n-  #176 = NameAndType        #244:#95      // buffer:[B\n-  #177 = NameAndType        #245:#238     // compareUnsigned:(II)I\n-  #178 = NameAndType        #106:#107     // createPositiveCapacity:(I)I\n-  #179 = Class              #246          // java/util/Arrays\n-  #180 = NameAndType        #247:#248     // copyOf:([BI)[B\n-  #181 = NameAndType        #117:#119     // \"<init>\":(IIIIB)V\n-  #182 = NameAndType        #92:#93       // DECODING_POLICY_DEFAULT:Lorg/apache/commons/codec/CodecPolicy;\n-  #183 = NameAndType        #117:#120     // \"<init>\":(IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n-  #184 = NameAndType        #96:#90       // PAD:B\n-  #185 = NameAndType        #101:#75      // unencodedBlockSize:I\n-  #186 = NameAndType        #102:#75      // encodedBlockSize:I\n-  #187 = NameAndType        #103:#75      // lineLength:I\n-  #188 = NameAndType        #104:#75      // chunkSeparatorLength:I\n-  #189 = NameAndType        #100:#90      // pad:B\n-  #190 = Utf8               codecPolicy\n-  #191 = Class              #249          // java/util/Objects\n-  #192 = NameAndType        #250:#251     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #193 = Utf8               org/apache/commons/codec/CodecPolicy\n-  #194 = NameAndType        #105:#93      // decodingPolicy:Lorg/apache/commons/codec/CodecPolicy;\n-  #195 = NameAndType        #146:#147     // hasData:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z\n-  #196 = NameAndType        #252:#75      // pos:I\n-  #197 = NameAndType        #253:#75      // readPos:I\n-  #198 = NameAndType        #148:#114     // isInAlphabet:(B)Z\n-  #199 = Class              #254          // org/apache/commons/codec/binary/BinaryCodec\n-  #200 = NameAndType        #255:#126     // isEmpty:([B)Z\n-  #201 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n-  #202 = NameAndType        #127:#129     // decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #203 = NameAndType        #153:#154     // readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-  #204 = NameAndType        #127:#128     // decode:([B)[B\n-  #205 = Utf8               java/lang/String\n-  #206 = NameAndType        #127:#132     // decode:(Ljava/lang/String;)[B\n-  #207 = Utf8               org/apache/commons/codec/DecoderException\n-  #208 = Utf8               Parameter supplied to Base-N decode is not a byte[] or a String\n-  #209 = Class              #256          // org/apache/commons/codec/binary/StringUtils\n-  #210 = NameAndType        #257:#132     // getBytesUtf8:(Ljava/lang/String;)[B\n-  #211 = NameAndType        #133:#134     // encode:([BII)[B\n-  #212 = NameAndType        #133:#129     // encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #213 = Utf8               org/apache/commons/codec/EncoderException\n-  #214 = Utf8               Parameter supplied to Base-N encode is not a byte[]\n-  #215 = NameAndType        #133:#128     // encode:([B)[B\n-  #216 = NameAndType        #258:#136     // newStringUtf8:([B)Ljava/lang/String;\n-  #217 = NameAndType        #142:#143     // getDefaultBufferSize:()I\n-  #218 = NameAndType        #115:#116     // resizeBuffer:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;I)[B\n-  #219 = NameAndType        #148:#149     // isInAlphabet:([BZ)Z\n-  #220 = NameAndType        #259:#93      // STRICT:Lorg/apache/commons/codec/CodecPolicy;\n-  #221 = NameAndType        #123:#124     // available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-  #222 = NameAndType        #260:#238     // min:(II)I\n-  #223 = Class              #261          // java/lang/System\n-  #224 = NameAndType        #262:#263     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #225 = NameAndType        #264:#265     // eof:Z\n-  #226 = NameAndType        #266:#93      // LENIENT:Lorg/apache/commons/codec/CodecPolicy;\n-  #227 = Utf8               java/lang/Object\n-  #228 = Utf8               org/apache/commons/codec/BinaryEncoder\n-  #229 = Utf8               org/apache/commons/codec/BinaryDecoder\n-  #230 = Utf8               append\n-  #231 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #232 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #233 = Utf8               toString\n-  #234 = Utf8               ()Ljava/lang/String;\n-  #235 = Utf8               (Ljava/lang/String;)V\n-  #236 = Utf8               java/lang/Math\n-  #237 = Utf8               max\n-  #238 = Utf8               (II)I\n-  #239 = Utf8               clone\n-  #240 = Utf8               ()Ljava/lang/Object;\n-  #241 = Utf8               java/lang/Character\n-  #242 = Utf8               isWhitespace\n-  #243 = Utf8               (I)Z\n-  #244 = Utf8               buffer\n-  #245 = Utf8               compareUnsigned\n-  #246 = Utf8               java/util/Arrays\n-  #247 = Utf8               copyOf\n-  #248 = Utf8               ([BI)[B\n-  #249 = Utf8               java/util/Objects\n-  #250 = Utf8               requireNonNull\n-  #251 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #252 = Utf8               pos\n-  #253 = Utf8               readPos\n-  #254 = Utf8               org/apache/commons/codec/binary/BinaryCodec\n-  #255 = Utf8               isEmpty\n-  #256 = Utf8               org/apache/commons/codec/binary/StringUtils\n-  #257 = Utf8               getBytesUtf8\n-  #258 = Utf8               newStringUtf8\n-  #259 = Utf8               STRICT\n-  #260 = Utf8               min\n-  #261 = Utf8               java/lang/System\n-  #262 = Utf8               arraycopy\n-  #263 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #264 = Utf8               eof\n-  #265 = Utf8               Z\n-  #266 = Utf8               LENIENT\n+  #121 = Utf8               available\n+  #122 = Utf8               (Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+  #123 = Utf8               containsAlphabetOrPad\n+  #124 = Utf8               ([B)Z\n+  #125 = Utf8               decode\n+  #126 = Utf8               ([B)[B\n+  #127 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #128 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #129 = Utf8               Exceptions\n+  #130 = Utf8               (Ljava/lang/String;)[B\n+  #131 = Utf8               encode\n+  #132 = Utf8               ([BII)[B\n+  #133 = Utf8               encodeAsString\n+  #134 = Utf8               ([B)Ljava/lang/String;\n+  #135 = Utf8               encodeToString\n+  #136 = Utf8               ensureBufferSize\n+  #137 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+  #138 = Utf8               getCodecPolicy\n+  #139 = Utf8               ()Lorg/apache/commons/codec/CodecPolicy;\n+  #140 = Utf8               getDefaultBufferSize\n+  #141 = Utf8               ()I\n+  #142 = Utf8               getEncodedLength\n+  #143 = Utf8               ([B)J\n+  #144 = Utf8               hasData\n+  #145 = Utf8               (Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z\n+  #146 = Utf8               isInAlphabet\n+  #147 = Utf8               ([BZ)Z\n+  #148 = Utf8               (Ljava/lang/String;)Z\n+  #149 = Utf8               isStrictDecoding\n+  #150 = Utf8               ()Z\n+  #151 = Utf8               readResults\n+  #152 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+  #153 = Utf8               <clinit>\n+  #154 = Utf8               ()V\n+  #155 = Utf8               SourceFile\n+  #156 = Utf8               BaseNCodec.java\n+  #157 = Utf8               java/lang/Integer\n+  #158 = Utf8               java/lang/OutOfMemoryError\n+  #159 = Utf8               java/lang/StringBuilder\n+  #160 = NameAndType        #117:#154     // \"<init>\":()V\n+  #161 = Utf8               Unable to allocate array size:\n+  #162 = NameAndType        #228:#229     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #163 = NameAndType        #228:#230     // append:(J)Ljava/lang/StringBuilder;\n+  #164 = NameAndType        #231:#232     // toString:()Ljava/lang/String;\n+  #165 = NameAndType        #117:#233     // \"<init>\":(Ljava/lang/String;)V\n+  #166 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n+  #167 = Class              #234          // java/lang/Math\n+  #168 = NameAndType        #235:#236     // max:(II)I\n+  #169 = NameAndType        #94:#95       // CHUNK_SEPARATOR:[B\n+  #170 = Class              #95           // \"[B\"\n+  #171 = NameAndType        #237:#238     // clone:()Ljava/lang/Object;\n+  #172 = Class              #239          // java/lang/Character\n+  #173 = NameAndType        #240:#241     // isWhitespace:(I)Z\n+  #174 = NameAndType        #242:#95      // buffer:[B\n+  #175 = NameAndType        #243:#236     // compareUnsigned:(II)I\n+  #176 = NameAndType        #106:#107     // createPositiveCapacity:(I)I\n+  #177 = Class              #244          // java/util/Arrays\n+  #178 = NameAndType        #245:#246     // copyOf:([BI)[B\n+  #179 = NameAndType        #117:#119     // \"<init>\":(IIIIB)V\n+  #180 = NameAndType        #92:#93       // DECODING_POLICY_DEFAULT:Lorg/apache/commons/codec/CodecPolicy;\n+  #181 = NameAndType        #117:#120     // \"<init>\":(IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n+  #182 = NameAndType        #96:#90       // PAD:B\n+  #183 = NameAndType        #101:#75      // unencodedBlockSize:I\n+  #184 = NameAndType        #102:#75      // encodedBlockSize:I\n+  #185 = NameAndType        #103:#75      // lineLength:I\n+  #186 = NameAndType        #104:#75      // chunkSeparatorLength:I\n+  #187 = NameAndType        #100:#90      // pad:B\n+  #188 = Utf8               codecPolicy\n+  #189 = Class              #247          // java/util/Objects\n+  #190 = NameAndType        #248:#249     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #191 = Utf8               org/apache/commons/codec/CodecPolicy\n+  #192 = NameAndType        #105:#93      // decodingPolicy:Lorg/apache/commons/codec/CodecPolicy;\n+  #193 = NameAndType        #144:#145     // hasData:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z\n+  #194 = NameAndType        #250:#75      // pos:I\n+  #195 = NameAndType        #251:#75      // readPos:I\n+  #196 = NameAndType        #146:#114     // isInAlphabet:(B)Z\n+  #197 = Class              #252          // org/apache/commons/codec/binary/BinaryCodec\n+  #198 = NameAndType        #253:#124     // isEmpty:([B)Z\n+  #199 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n+  #200 = NameAndType        #125:#127     // decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #201 = NameAndType        #151:#152     // readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+  #202 = NameAndType        #125:#126     // decode:([B)[B\n+  #203 = Utf8               java/lang/String\n+  #204 = NameAndType        #125:#130     // decode:(Ljava/lang/String;)[B\n+  #205 = Utf8               org/apache/commons/codec/DecoderException\n+  #206 = Utf8               Parameter supplied to Base-N decode is not a byte[] or a String\n+  #207 = Class              #254          // org/apache/commons/codec/binary/StringUtils\n+  #208 = NameAndType        #255:#130     // getBytesUtf8:(Ljava/lang/String;)[B\n+  #209 = NameAndType        #131:#132     // encode:([BII)[B\n+  #210 = NameAndType        #131:#127     // encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #211 = Utf8               org/apache/commons/codec/EncoderException\n+  #212 = Utf8               Parameter supplied to Base-N encode is not a byte[]\n+  #213 = NameAndType        #131:#126     // encode:([B)[B\n+  #214 = NameAndType        #256:#134     // newStringUtf8:([B)Ljava/lang/String;\n+  #215 = NameAndType        #140:#141     // getDefaultBufferSize:()I\n+  #216 = NameAndType        #115:#116     // resizeBuffer:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;I)[B\n+  #217 = NameAndType        #146:#147     // isInAlphabet:([BZ)Z\n+  #218 = NameAndType        #257:#93      // STRICT:Lorg/apache/commons/codec/CodecPolicy;\n+  #219 = NameAndType        #121:#122     // available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+  #220 = NameAndType        #258:#236     // min:(II)I\n+  #221 = Class              #259          // java/lang/System\n+  #222 = NameAndType        #260:#261     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #223 = NameAndType        #262:#263     // eof:Z\n+  #224 = NameAndType        #264:#93      // LENIENT:Lorg/apache/commons/codec/CodecPolicy;\n+  #225 = Utf8               java/lang/Object\n+  #226 = Utf8               org/apache/commons/codec/BinaryEncoder\n+  #227 = Utf8               org/apache/commons/codec/BinaryDecoder\n+  #228 = Utf8               append\n+  #229 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #230 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #231 = Utf8               toString\n+  #232 = Utf8               ()Ljava/lang/String;\n+  #233 = Utf8               (Ljava/lang/String;)V\n+  #234 = Utf8               java/lang/Math\n+  #235 = Utf8               max\n+  #236 = Utf8               (II)I\n+  #237 = Utf8               clone\n+  #238 = Utf8               ()Ljava/lang/Object;\n+  #239 = Utf8               java/lang/Character\n+  #240 = Utf8               isWhitespace\n+  #241 = Utf8               (I)Z\n+  #242 = Utf8               buffer\n+  #243 = Utf8               compareUnsigned\n+  #244 = Utf8               java/util/Arrays\n+  #245 = Utf8               copyOf\n+  #246 = Utf8               ([BI)[B\n+  #247 = Utf8               java/util/Objects\n+  #248 = Utf8               requireNonNull\n+  #249 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #250 = Utf8               pos\n+  #251 = Utf8               readPos\n+  #252 = Utf8               org/apache/commons/codec/binary/BinaryCodec\n+  #253 = Utf8               isEmpty\n+  #254 = Utf8               org/apache/commons/codec/binary/StringUtils\n+  #255 = Utf8               getBytesUtf8\n+  #256 = Utf8               newStringUtf8\n+  #257 = Utf8               STRICT\n+  #258 = Utf8               min\n+  #259 = Utf8               java/lang/System\n+  #260 = Utf8               arraycopy\n+  #261 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #262 = Utf8               eof\n+  #263 = Utf8               Z\n+  #264 = Utf8               LENIENT\n {\n   static final int EOF = -1;\n     descriptor: I\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n     ConstantValue: int -1\n \n   public static final int MIME_CHUNK_SIZE = 76;\n@@ -719,42 +717,41 @@\n   public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException;\n     descriptor: (Ljava/lang/Object;)Ljava/lang/Object;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_1\n          1: instanceof    #17                 // class \"[B\"\n-         4: ifeq          19\n+         4: ifeq          16\n          7: aload_0\n          8: aload_1\n          9: checkcast     #17                 // class \"[B\"\n-        12: checkcast     #17                 // class \"[B\"\n-        15: invokevirtual #46                 // Method decode:([B)[B\n-        18: areturn\n-        19: aload_1\n-        20: instanceof    #47                 // class java/lang/String\n-        23: ifeq          35\n-        26: aload_0\n-        27: aload_1\n-        28: checkcast     #47                 // class java/lang/String\n-        31: invokevirtual #48                 // Method decode:(Ljava/lang/String;)[B\n-        34: areturn\n-        35: new           #49                 // class org/apache/commons/codec/DecoderException\n-        38: dup\n-        39: ldc           #50                 // String Parameter supplied to Base-N decode is not a byte[] or a String\n-        41: invokespecial #51                 // Method org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n-        44: athrow\n+        12: invokevirtual #46                 // Method decode:([B)[B\n+        15: areturn\n+        16: aload_1\n+        17: instanceof    #47                 // class java/lang/String\n+        20: ifeq          32\n+        23: aload_0\n+        24: aload_1\n+        25: checkcast     #47                 // class java/lang/String\n+        28: invokevirtual #48                 // Method decode:(Ljava/lang/String;)[B\n+        31: areturn\n+        32: new           #49                 // class org/apache/commons/codec/DecoderException\n+        35: dup\n+        36: ldc           #50                 // String Parameter supplied to Base-N decode is not a byte[] or a String\n+        38: invokespecial #51                 // Method org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n+        41: athrow\n       LineNumberTable:\n         line 434: 0\n         line 435: 7\n-        line 437: 19\n-        line 438: 26\n-        line 440: 35\n+        line 437: 16\n+        line 438: 23\n+        line 440: 32\n       StackMapTable: number_of_entries = 2\n-        frame_type = 19 /* same */\n+        frame_type = 16 /* same */\n         frame_type = 15 /* same */\n     Exceptions:\n       throws org.apache.commons.codec.DecoderException\n \n   public byte[] decode(java.lang.String);\n     descriptor: (Ljava/lang/String;)[B\n     flags: (0x0001) ACC_PUBLIC\n@@ -863,17 +860,16 @@\n         10: dup\n         11: ldc           #56                 // String Parameter supplied to Base-N encode is not a byte[]\n         13: invokespecial #57                 // Method org/apache/commons/codec/EncoderException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_0\n         18: aload_1\n         19: checkcast     #17                 // class \"[B\"\n-        22: checkcast     #17                 // class \"[B\"\n-        25: invokevirtual #58                 // Method encode:([B)[B\n-        28: areturn\n+        22: invokevirtual #58                 // Method encode:([B)[B\n+        25: areturn\n       LineNumberTable:\n         line 509: 0\n         line 510: 7\n         line 512: 17\n       StackMapTable: number_of_entries = 1\n         frame_type = 17 /* same */\n     Exceptions:\n"}]}
