{"diffoscope-json-version": 1, "source1": "first/ZipSplitReadOnlySeekableByteChannel.class", "source2": "second/ZipSplitReadOnlySeekableByteChannel.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,426 +1,426 @@\n-  SHA-256 checksum b3eb6941fa2e80dfeba1114ae73ff0fce622a6187027de2d1798cd2c61b9757f\n+  SHA-256 checksum 6c4c975c06ed5c7e8374ae9ef479a0ab6b89b49a4934fda14d90fc44cd076291\n   Compiled from \"ZipSplitReadOnlySeekableByteChannel.java\"\n public class org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel extends org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #2                          // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-  super_class: #95                        // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n+  this_class: #7                          // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+  super_class: #2                         // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n   interfaces: 0, fields: 3, methods: 14, attributes: 3\n Constant pool:\n-    #1 = Methodref          #95.#186      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n-    #2 = Class              #187          // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-    #3 = Methodref          #188.#189     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-    #4 = Fieldref           #2.#190       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.zipSplitSignatureByteBuffer:Ljava/nio/ByteBuffer;\n-    #5 = Methodref          #2.#191       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.assertSplitSignature:(Ljava/util/List;)V\n-    #6 = InterfaceMethodref #164.#192     // java/util/List.get:(I)Ljava/lang/Object;\n-    #7 = Class              #193          // java/nio/channels/SeekableByteChannel\n-    #8 = InterfaceMethodref #7.#194       // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-    #9 = Methodref          #188.#195     // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-   #10 = InterfaceMethodref #7.#196       // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n-   #11 = Class              #197          // org/apache/commons/compress/archivers/zip/ZipLong\n-   #12 = Methodref          #188.#198     // java/nio/ByteBuffer.array:()[B\n-   #13 = Methodref          #11.#199      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n-   #14 = Fieldref           #11.#200      // org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #15 = Methodref          #11.#201      // org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n-   #16 = Class              #202          // java/io/IOException\n-   #17 = String             #203          // The first zip split segment does not begin with split zip file signature\n-   #18 = Methodref          #16.#204      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #19 = String             #205          // channels must not be null\n-   #20 = Methodref          #206.#207     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #21 = Class              #129          // \"[Ljava/nio/channels/SeekableByteChannel;\"\n-   #22 = Methodref          #208.#209     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-   #23 = Methodref          #2.#186       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n-   #24 = String             #114          // channels\n-   #25 = String             #131          // lastSegmentChannel\n-   #26 = Class              #210          // java/util/ArrayList\n-   #27 = Methodref          #26.#211      // java/util/ArrayList.\"<init>\":()V\n-   #28 = Methodref          #206.#212     // java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #29 = InvokeDynamic      #0:#218       // #0:accept:(Ljava/util/List;)Ljava/util/function/Consumer;\n-   #30 = InterfaceMethodref #219.#220     // java/lang/Iterable.forEach:(Ljava/util/function/Consumer;)V\n-   #31 = InterfaceMethodref #164.#221     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #32 = InterfaceMethodref #164.#222     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #33 = Methodref          #2.#223       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n-   #34 = Methodref          #224.#225     // java/io/File.toPath:()Ljava/nio/file/Path;\n-   #35 = Methodref          #2.#226       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment:(Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n-   #36 = Methodref          #227.#228     // org/apache/commons/compress/utils/FileNameUtils.getExtension:(Ljava/nio/file/Path;)Ljava/lang/String;\n-   #37 = Class              #229          // org/apache/commons/compress/archivers/ArchiveStreamFactory\n-   #38 = String             #230          // zip\n-   #39 = Methodref          #47.#231      // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n-   #40 = Class              #232          // java/lang/IllegalArgumentException\n-   #41 = String             #233          // The extension of last zip split segment should be .zip\n-   #42 = Methodref          #40.#204      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #43 = InterfaceMethodref #94.#234      // java/nio/file/Path.getParent:()Ljava/nio/file/Path;\n-   #44 = Methodref          #206.#235     // java/util/Objects.nonNull:(Ljava/lang/Object;)Z\n-   #45 = InterfaceMethodref #94.#236      // java/nio/file/Path.getFileSystem:()Ljava/nio/file/FileSystem;\n-   #46 = String             #237          // .\n-   #47 = Class              #238          // java/lang/String\n-   #48 = Methodref          #239.#240     // java/nio/file/FileSystem.getPath:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;\n-   #49 = Methodref          #227.#241     // org/apache/commons/compress/utils/FileNameUtils.getBaseName:(Ljava/nio/file/Path;)Ljava/lang/String;\n-   #50 = Class              #242          // java/lang/StringBuilder\n-   #51 = Methodref          #50.#211      // java/lang/StringBuilder.\"<init>\":()V\n-   #52 = Methodref          #155.#243     // java/util/regex/Pattern.quote:(Ljava/lang/String;)Ljava/lang/String;\n-   #53 = Methodref          #50.#244      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #54 = String             #245          // .[zZ][0-9]+\n-   #55 = Methodref          #50.#246      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #56 = Methodref          #155.#247     // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-   #57 = Class              #248          // java/nio/file/FileVisitOption\n-   #58 = Methodref          #249.#250     // java/nio/file/Files.walk:(Ljava/nio/file/Path;I[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream;\n-   #59 = InvokeDynamic      #1:#254       // #1:test:()Ljava/util/function/Predicate;\n-   #60 = InterfaceMethodref #156.#255     // java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\n-   #61 = InvokeDynamic      #2:#257       // #2:test:(Ljava/util/regex/Pattern;)Ljava/util/function/Predicate;\n-   #62 = Class              #258          // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator\n-   #63 = Methodref          #62.#259      // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1;)V\n-   #64 = InterfaceMethodref #156.#260     // java/util/stream/Stream.sorted:(Ljava/util/Comparator;)Ljava/util/stream/Stream;\n-   #65 = InvokeDynamic      #3:#264       // #3:get:()Ljava/util/function/Supplier;\n-   #66 = Methodref          #265.#266     // java/util/stream/Collectors.toCollection:(Ljava/util/function/Supplier;)Ljava/util/stream/Collector;\n-   #67 = InterfaceMethodref #156.#267     // java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;\n-   #68 = InterfaceMethodref #156.#268     // java/util/stream/Stream.close:()V\n-   #69 = Class              #269          // java/lang/Throwable\n-   #70 = Methodref          #69.#270      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #71 = Methodref          #2.#271       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forPaths:(Ljava/nio/file/Path;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-   #72 = String             #272          // files must not be null\n-   #73 = Class              #161          // \"[Ljava/io/File;\"\n-   #74 = Fieldref           #2.#273       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.EMPTY_PATH_ARRAY:[Ljava/nio/file/Path;\n-   #75 = Class              #100          // \"[Ljava/nio/file/Path;\"\n-   #76 = Methodref          #2.#274       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forPaths:([Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n-   #77 = String             #275          // paths must not be null\n-   #78 = Class              #276          // java/nio/file/OpenOption\n-   #79 = Fieldref           #277.#278     // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-   #80 = Methodref          #249.#279     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-   #81 = InterfaceMethodref #164.#280     // java/util/List.size:()I\n-   #82 = String             #160          // files\n-   #83 = String             #138          // lastSegmentFile\n-   #84 = InvokeDynamic      #4:#218       // #4:accept:(Ljava/util/List;)Ljava/util/function/Consumer;\n-   #85 = String             #162          // paths\n-   #86 = String             #145          // lastSegmentPath\n-   #87 = InvokeDynamic      #5:#218       // #5:accept:(Ljava/util/List;)Ljava/util/function/Consumer;\n-   #88 = InterfaceMethodref #94.#284      // java/nio/file/Path.getFileName:()Ljava/nio/file/Path;\n-   #89 = InterfaceMethodref #94.#246      // java/nio/file/Path.toString:()Ljava/lang/String;\n-   #90 = Methodref          #155.#285     // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-   #91 = Methodref          #286.#287     // java/util/regex/Matcher.matches:()Z\n-   #92 = Class              #288          // java/nio/file/LinkOption\n-   #93 = Methodref          #249.#289     // java/nio/file/Files.isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-   #94 = Class              #290          // java/nio/file/Path\n-   #95 = Class              #291          // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n-   #96 = Class              #292          // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1\n-   #97 = Utf8               InnerClasses\n-   #98 = Utf8               ZipSplitSegmentComparator\n-   #99 = Utf8               EMPTY_PATH_ARRAY\n-  #100 = Utf8               [Ljava/nio/file/Path;\n-  #101 = Utf8               ZIP_SPLIT_SIGNATURE_LENGTH\n-  #102 = Utf8               I\n-  #103 = Utf8               ConstantValue\n-  #104 = Integer            4\n-  #105 = Utf8               zipSplitSignatureByteBuffer\n-  #106 = Utf8               Ljava/nio/ByteBuffer;\n-  #107 = Utf8               <init>\n-  #108 = Utf8               (Ljava/util/List;)V\n-  #109 = Utf8               Code\n-  #110 = Utf8               LineNumberTable\n-  #111 = Utf8               LocalVariableTable\n-  #112 = Utf8               this\n-  #113 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel;\n-  #114 = Utf8               channels\n-  #115 = Utf8               Ljava/util/List;\n-  #116 = Utf8               LocalVariableTypeTable\n-  #117 = Utf8               Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n-  #118 = Utf8               Exceptions\n-  #119 = Utf8               Signature\n-  #120 = Utf8               (Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;)V\n-  #121 = Utf8               assertSplitSignature\n-  #122 = Utf8               channel\n-  #123 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n-  #124 = Utf8               signature\n-  #125 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #126 = Utf8               StackMapTable\n-  #127 = Utf8               forOrderedSeekableByteChannels\n-  #128 = Utf8               ([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n-  #129 = Utf8               [Ljava/nio/channels/SeekableByteChannel;\n-  #130 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-  #131 = Utf8               lastSegmentChannel\n-  #132 = Utf8               Ljava/lang/Iterable;\n-  #133 = Utf8               channelsList\n-  #134 = Utf8               Ljava/lang/Iterable<Ljava/nio/channels/SeekableByteChannel;>;\n-  #135 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable<Ljava/nio/channels/SeekableByteChannel;>;)Ljava/nio/channels/SeekableByteChannel;\n-  #136 = Utf8               buildFromLastSplitSegment\n-  #137 = Utf8               (Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-  #138 = Utf8               lastSegmentFile\n-  #139 = Utf8               Ljava/io/File;\n-  #140 = Utf8               (Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n-  #141 = Utf8               splitZipSegments\n-  #142 = Utf8               Ljava/util/ArrayList;\n-  #143 = Utf8               walk\n-  #144 = Utf8               Ljava/util/stream/Stream;\n-  #145 = Utf8               lastSegmentPath\n-  #146 = Utf8               Ljava/nio/file/Path;\n-  #147 = Utf8               extension\n-  #148 = Utf8               Ljava/lang/String;\n-  #149 = Utf8               parent\n-  #150 = Utf8               fileBaseName\n-  #151 = Utf8               pattern\n-  #152 = Utf8               Ljava/util/regex/Pattern;\n-  #153 = Utf8               Ljava/util/ArrayList<Ljava/nio/file/Path;>;\n-  #154 = Utf8               Ljava/util/stream/Stream<Ljava/nio/file/Path;>;\n-  #155 = Class              #293          // java/util/regex/Pattern\n-  #156 = Class              #294          // java/util/stream/Stream\n-  #157 = Utf8               forFiles\n-  #158 = Utf8               ([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-  #159 = Utf8               f\n-  #160 = Utf8               files\n-  #161 = Utf8               [Ljava/io/File;\n-  #162 = Utf8               paths\n-  #163 = Utf8               Ljava/util/List<Ljava/nio/file/Path;>;\n-  #164 = Class              #295          // java/util/List\n-  #165 = Utf8               forPaths\n-  #166 = Utf8               ([Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n-  #167 = Utf8               path\n-  #168 = Utf8               (Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-  #169 = Utf8               filesList\n-  #170 = Utf8               Ljava/lang/Iterable<Ljava/io/File;>;\n-  #171 = Utf8               (Ljava/io/File;Ljava/lang/Iterable<Ljava/io/File;>;)Ljava/nio/channels/SeekableByteChannel;\n-  #172 = Utf8               (Ljava/nio/file/Path;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-  #173 = Utf8               Ljava/lang/Iterable<Ljava/nio/file/Path;>;\n-  #174 = Utf8               (Ljava/nio/file/Path;Ljava/lang/Iterable<Ljava/nio/file/Path;>;)Ljava/nio/channels/SeekableByteChannel;\n-  #175 = Utf8               lambda$forFiles$2\n-  #176 = Utf8               (Ljava/util/List;Ljava/io/File;)V\n-  #177 = Utf8               lambda$buildFromLastSplitSegment$1\n-  #178 = Utf8               (Ljava/util/regex/Pattern;Ljava/nio/file/Path;)Z\n-  #179 = Utf8               lambda$buildFromLastSplitSegment$0\n-  #180 = Utf8               (Ljava/nio/file/Path;)Z\n-  #181 = Utf8               x$0\n-  #182 = Utf8               <clinit>\n-  #183 = Utf8               ()V\n-  #184 = Utf8               SourceFile\n-  #185 = Utf8               ZipSplitReadOnlySeekableByteChannel.java\n-  #186 = NameAndType        #107:#108     // \"<init>\":(Ljava/util/List;)V\n-  #187 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-  #188 = Class              #296          // java/nio/ByteBuffer\n-  #189 = NameAndType        #297:#298     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #190 = NameAndType        #105:#106     // zipSplitSignatureByteBuffer:Ljava/nio/ByteBuffer;\n-  #191 = NameAndType        #121:#108     // assertSplitSignature:(Ljava/util/List;)V\n-  #192 = NameAndType        #299:#300     // get:(I)Ljava/lang/Object;\n-  #193 = Utf8               java/nio/channels/SeekableByteChannel\n-  #194 = NameAndType        #301:#302     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #195 = NameAndType        #303:#304     // rewind:()Ljava/nio/Buffer;\n-  #196 = NameAndType        #305:#306     // read:(Ljava/nio/ByteBuffer;)I\n-  #197 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #198 = NameAndType        #307:#308     // array:()[B\n-  #199 = NameAndType        #107:#309     // \"<init>\":([B)V\n-  #200 = NameAndType        #310:#125     // DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #201 = NameAndType        #311:#312     // equals:(Ljava/lang/Object;)Z\n-  #202 = Utf8               java/io/IOException\n-  #203 = Utf8               The first zip split segment does not begin with split zip file signature\n-  #204 = NameAndType        #107:#313     // \"<init>\":(Ljava/lang/String;)V\n-  #205 = Utf8               channels must not be null\n-  #206 = Class              #314          // java/util/Objects\n-  #207 = NameAndType        #315:#316     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #208 = Class              #317          // java/util/Arrays\n-  #209 = NameAndType        #318:#319     // asList:([Ljava/lang/Object;)Ljava/util/List;\n-  #210 = Utf8               java/util/ArrayList\n-  #211 = NameAndType        #107:#183     // \"<init>\":()V\n-  #212 = NameAndType        #315:#320     // requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #213 = Utf8               BootstrapMethods\n-  #214 = MethodHandle       6:#321        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #215 = MethodType         #322          //  (Ljava/lang/Object;)V\n-  #216 = MethodHandle       9:#31         // REF_invokeInterface java/util/List.add:(Ljava/lang/Object;)Z\n-  #217 = MethodType         #323          //  (Ljava/nio/channels/SeekableByteChannel;)V\n-  #218 = NameAndType        #324:#325     // accept:(Ljava/util/List;)Ljava/util/function/Consumer;\n-  #219 = Class              #326          // java/lang/Iterable\n-  #220 = NameAndType        #327:#328     // forEach:(Ljava/util/function/Consumer;)V\n-  #221 = NameAndType        #329:#312     // add:(Ljava/lang/Object;)Z\n-  #222 = NameAndType        #330:#331     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #223 = NameAndType        #127:#128     // forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n-  #224 = Class              #332          // java/io/File\n-  #225 = NameAndType        #333:#334     // toPath:()Ljava/nio/file/Path;\n-  #226 = NameAndType        #136:#140     // buildFromLastSplitSegment:(Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n-  #227 = Class              #335          // org/apache/commons/compress/utils/FileNameUtils\n-  #228 = NameAndType        #336:#337     // getExtension:(Ljava/nio/file/Path;)Ljava/lang/String;\n-  #229 = Utf8               org/apache/commons/compress/archivers/ArchiveStreamFactory\n-  #230 = Utf8               zip\n-  #231 = NameAndType        #338:#339     // equalsIgnoreCase:(Ljava/lang/String;)Z\n-  #232 = Utf8               java/lang/IllegalArgumentException\n-  #233 = Utf8               The extension of last zip split segment should be .zip\n-  #234 = NameAndType        #340:#334     // getParent:()Ljava/nio/file/Path;\n-  #235 = NameAndType        #341:#312     // nonNull:(Ljava/lang/Object;)Z\n-  #236 = NameAndType        #342:#343     // getFileSystem:()Ljava/nio/file/FileSystem;\n-  #237 = Utf8               .\n-  #238 = Utf8               java/lang/String\n-  #239 = Class              #344          // java/nio/file/FileSystem\n-  #240 = NameAndType        #345:#346     // getPath:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;\n-  #241 = NameAndType        #347:#337     // getBaseName:(Ljava/nio/file/Path;)Ljava/lang/String;\n-  #242 = Utf8               java/lang/StringBuilder\n-  #243 = NameAndType        #348:#349     // quote:(Ljava/lang/String;)Ljava/lang/String;\n-  #244 = NameAndType        #350:#351     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #245 = Utf8               .[zZ][0-9]+\n-  #246 = NameAndType        #352:#353     // toString:()Ljava/lang/String;\n-  #247 = NameAndType        #354:#355     // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-  #248 = Utf8               java/nio/file/FileVisitOption\n-  #249 = Class              #356          // java/nio/file/Files\n-  #250 = NameAndType        #143:#357     // walk:(Ljava/nio/file/Path;I[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream;\n-  #251 = MethodType         #312          //  (Ljava/lang/Object;)Z\n-  #252 = MethodHandle       6:#358        // REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$buildFromLastSplitSegment$0:(Ljava/nio/file/Path;)Z\n-  #253 = MethodType         #180          //  (Ljava/nio/file/Path;)Z\n-  #254 = NameAndType        #359:#360     // test:()Ljava/util/function/Predicate;\n-  #255 = NameAndType        #361:#362     // filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\n-  #256 = MethodHandle       6:#363        // REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$buildFromLastSplitSegment$1:(Ljava/util/regex/Pattern;Ljava/nio/file/Path;)Z\n-  #257 = NameAndType        #359:#364     // test:(Ljava/util/regex/Pattern;)Ljava/util/function/Predicate;\n-  #258 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator\n-  #259 = NameAndType        #107:#365     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1;)V\n-  #260 = NameAndType        #366:#367     // sorted:(Ljava/util/Comparator;)Ljava/util/stream/Stream;\n-  #261 = MethodType         #368          //  ()Ljava/lang/Object;\n-  #262 = MethodHandle       8:#27         // REF_newInvokeSpecial java/util/ArrayList.\"<init>\":()V\n-  #263 = MethodType         #369          //  ()Ljava/util/ArrayList;\n-  #264 = NameAndType        #299:#370     // get:()Ljava/util/function/Supplier;\n-  #265 = Class              #371          // java/util/stream/Collectors\n-  #266 = NameAndType        #372:#373     // toCollection:(Ljava/util/function/Supplier;)Ljava/util/stream/Collector;\n-  #267 = NameAndType        #374:#375     // collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;\n-  #268 = NameAndType        #376:#183     // close:()V\n-  #269 = Utf8               java/lang/Throwable\n-  #270 = NameAndType        #377:#378     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #271 = NameAndType        #165:#172     // forPaths:(Ljava/nio/file/Path;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-  #272 = Utf8               files must not be null\n-  #273 = NameAndType        #99:#100      // EMPTY_PATH_ARRAY:[Ljava/nio/file/Path;\n-  #274 = NameAndType        #165:#166     // forPaths:([Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n-  #275 = Utf8               paths must not be null\n-  #276 = Utf8               java/nio/file/OpenOption\n-  #277 = Class              #379          // java/nio/file/StandardOpenOption\n-  #278 = NameAndType        #380:#381     // READ:Ljava/nio/file/StandardOpenOption;\n-  #279 = NameAndType        #382:#383     // newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-  #280 = NameAndType        #384:#385     // size:()I\n-  #281 = MethodHandle       6:#386        // REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$forFiles$2:(Ljava/util/List;Ljava/io/File;)V\n-  #282 = MethodType         #387          //  (Ljava/io/File;)V\n-  #283 = MethodType         #388          //  (Ljava/nio/file/Path;)V\n-  #284 = NameAndType        #389:#334     // getFileName:()Ljava/nio/file/Path;\n-  #285 = NameAndType        #390:#391     // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-  #286 = Class              #392          // java/util/regex/Matcher\n-  #287 = NameAndType        #393:#394     // matches:()Z\n-  #288 = Utf8               java/nio/file/LinkOption\n-  #289 = NameAndType        #395:#396     // isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-  #290 = Utf8               java/nio/file/Path\n-  #291 = Utf8               org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n-  #292 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1\n-  #293 = Utf8               java/util/regex/Pattern\n-  #294 = Utf8               java/util/stream/Stream\n-  #295 = Utf8               java/util/List\n-  #296 = Utf8               java/nio/ByteBuffer\n-  #297 = Utf8               allocate\n-  #298 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #299 = Utf8               get\n-  #300 = Utf8               (I)Ljava/lang/Object;\n-  #301 = Utf8               position\n-  #302 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-  #303 = Utf8               rewind\n-  #304 = Utf8               ()Ljava/nio/Buffer;\n-  #305 = Utf8               read\n-  #306 = Utf8               (Ljava/nio/ByteBuffer;)I\n-  #307 = Utf8               array\n-  #308 = Utf8               ()[B\n-  #309 = Utf8               ([B)V\n-  #310 = Utf8               DD_SIG\n-  #311 = Utf8               equals\n-  #312 = Utf8               (Ljava/lang/Object;)Z\n-  #313 = Utf8               (Ljava/lang/String;)V\n-  #314 = Utf8               java/util/Objects\n-  #315 = Utf8               requireNonNull\n-  #316 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #317 = Utf8               java/util/Arrays\n-  #318 = Utf8               asList\n-  #319 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n-  #320 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #321 = Methodref          #397.#398     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #322 = Utf8               (Ljava/lang/Object;)V\n-  #323 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n-  #324 = Utf8               accept\n-  #325 = Utf8               (Ljava/util/List;)Ljava/util/function/Consumer;\n-  #326 = Utf8               java/lang/Iterable\n-  #327 = Utf8               forEach\n-  #328 = Utf8               (Ljava/util/function/Consumer;)V\n-  #329 = Utf8               add\n-  #330 = Utf8               toArray\n-  #331 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #332 = Utf8               java/io/File\n-  #333 = Utf8               toPath\n-  #334 = Utf8               ()Ljava/nio/file/Path;\n-  #335 = Utf8               org/apache/commons/compress/utils/FileNameUtils\n-  #336 = Utf8               getExtension\n-  #337 = Utf8               (Ljava/nio/file/Path;)Ljava/lang/String;\n-  #338 = Utf8               equalsIgnoreCase\n-  #339 = Utf8               (Ljava/lang/String;)Z\n-  #340 = Utf8               getParent\n-  #341 = Utf8               nonNull\n-  #342 = Utf8               getFileSystem\n-  #343 = Utf8               ()Ljava/nio/file/FileSystem;\n-  #344 = Utf8               java/nio/file/FileSystem\n-  #345 = Utf8               getPath\n-  #346 = Utf8               (Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;\n-  #347 = Utf8               getBaseName\n-  #348 = Utf8               quote\n-  #349 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #350 = Utf8               append\n-  #351 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #352 = Utf8               toString\n-  #353 = Utf8               ()Ljava/lang/String;\n-  #354 = Utf8               compile\n-  #355 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;\n-  #356 = Utf8               java/nio/file/Files\n-  #357 = Utf8               (Ljava/nio/file/Path;I[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream;\n-  #358 = Methodref          #2.#399       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$buildFromLastSplitSegment$0:(Ljava/nio/file/Path;)Z\n-  #359 = Utf8               test\n-  #360 = Utf8               ()Ljava/util/function/Predicate;\n-  #361 = Utf8               filter\n-  #362 = Utf8               (Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\n-  #363 = Methodref          #2.#400       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$buildFromLastSplitSegment$1:(Ljava/util/regex/Pattern;Ljava/nio/file/Path;)Z\n-  #364 = Utf8               (Ljava/util/regex/Pattern;)Ljava/util/function/Predicate;\n-  #365 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1;)V\n-  #366 = Utf8               sorted\n-  #367 = Utf8               (Ljava/util/Comparator;)Ljava/util/stream/Stream;\n-  #368 = Utf8               ()Ljava/lang/Object;\n-  #369 = Utf8               ()Ljava/util/ArrayList;\n-  #370 = Utf8               ()Ljava/util/function/Supplier;\n-  #371 = Utf8               java/util/stream/Collectors\n-  #372 = Utf8               toCollection\n-  #373 = Utf8               (Ljava/util/function/Supplier;)Ljava/util/stream/Collector;\n-  #374 = Utf8               collect\n-  #375 = Utf8               (Ljava/util/stream/Collector;)Ljava/lang/Object;\n-  #376 = Utf8               close\n-  #377 = Utf8               addSuppressed\n-  #378 = Utf8               (Ljava/lang/Throwable;)V\n-  #379 = Utf8               java/nio/file/StandardOpenOption\n-  #380 = Utf8               READ\n-  #381 = Utf8               Ljava/nio/file/StandardOpenOption;\n-  #382 = Utf8               newByteChannel\n-  #383 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-  #384 = Utf8               size\n-  #385 = Utf8               ()I\n-  #386 = Methodref          #2.#401       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$forFiles$2:(Ljava/util/List;Ljava/io/File;)V\n-  #387 = Utf8               (Ljava/io/File;)V\n-  #388 = Utf8               (Ljava/nio/file/Path;)V\n-  #389 = Utf8               getFileName\n-  #390 = Utf8               matcher\n-  #391 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-  #392 = Utf8               java/util/regex/Matcher\n-  #393 = Utf8               matches\n-  #394 = Utf8               ()Z\n-  #395 = Utf8               isRegularFile\n-  #396 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-  #397 = Class              #402          // java/lang/invoke/LambdaMetafactory\n-  #398 = NameAndType        #403:#406     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #399 = NameAndType        #179:#180     // lambda$buildFromLastSplitSegment$0:(Ljava/nio/file/Path;)Z\n-  #400 = NameAndType        #177:#178     // lambda$buildFromLastSplitSegment$1:(Ljava/util/regex/Pattern;Ljava/nio/file/Path;)Z\n-  #401 = NameAndType        #175:#176     // lambda$forFiles$2:(Ljava/util/List;Ljava/io/File;)V\n-  #402 = Utf8               java/lang/invoke/LambdaMetafactory\n-  #403 = Utf8               metafactory\n-  #404 = Class              #408          // java/lang/invoke/MethodHandles$Lookup\n-  #405 = Utf8               Lookup\n-  #406 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #407 = Class              #409          // java/lang/invoke/MethodHandles\n-  #408 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #409 = Utf8               java/lang/invoke/MethodHandles\n+    #1 = Methodref          #2.#3         // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n+    #2 = Class              #4            // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n+    #3 = NameAndType        #5:#6         // \"<init>\":(Ljava/util/List;)V\n+    #4 = Utf8               org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n+    #5 = Utf8               <init>\n+    #6 = Utf8               (Ljava/util/List;)V\n+    #7 = Class              #8            // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+    #8 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+    #9 = Methodref          #10.#11       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #10 = Class              #12           // java/nio/ByteBuffer\n+   #11 = NameAndType        #13:#14       // allocate:(I)Ljava/nio/ByteBuffer;\n+   #12 = Utf8               java/nio/ByteBuffer\n+   #13 = Utf8               allocate\n+   #14 = Utf8               (I)Ljava/nio/ByteBuffer;\n+   #15 = Fieldref           #7.#16        // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.zipSplitSignatureByteBuffer:Ljava/nio/ByteBuffer;\n+   #16 = NameAndType        #17:#18       // zipSplitSignatureByteBuffer:Ljava/nio/ByteBuffer;\n+   #17 = Utf8               zipSplitSignatureByteBuffer\n+   #18 = Utf8               Ljava/nio/ByteBuffer;\n+   #19 = Methodref          #7.#20        // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.assertSplitSignature:(Ljava/util/List;)V\n+   #20 = NameAndType        #21:#6        // assertSplitSignature:(Ljava/util/List;)V\n+   #21 = Utf8               assertSplitSignature\n+   #22 = InterfaceMethodref #23.#24       // java/util/List.get:(I)Ljava/lang/Object;\n+   #23 = Class              #25           // java/util/List\n+   #24 = NameAndType        #26:#27       // get:(I)Ljava/lang/Object;\n+   #25 = Utf8               java/util/List\n+   #26 = Utf8               get\n+   #27 = Utf8               (I)Ljava/lang/Object;\n+   #28 = Class              #29           // java/nio/channels/SeekableByteChannel\n+   #29 = Utf8               java/nio/channels/SeekableByteChannel\n+   #30 = InterfaceMethodref #28.#31       // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #31 = NameAndType        #32:#33       // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #32 = Utf8               position\n+   #33 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+   #34 = Methodref          #10.#35       // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+   #35 = NameAndType        #36:#37       // rewind:()Ljava/nio/Buffer;\n+   #36 = Utf8               rewind\n+   #37 = Utf8               ()Ljava/nio/Buffer;\n+   #38 = InterfaceMethodref #28.#39       // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+   #39 = NameAndType        #40:#41       // read:(Ljava/nio/ByteBuffer;)I\n+   #40 = Utf8               read\n+   #41 = Utf8               (Ljava/nio/ByteBuffer;)I\n+   #42 = Class              #43           // org/apache/commons/compress/archivers/zip/ZipLong\n+   #43 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+   #44 = Methodref          #10.#45       // java/nio/ByteBuffer.array:()[B\n+   #45 = NameAndType        #46:#47       // array:()[B\n+   #46 = Utf8               array\n+   #47 = Utf8               ()[B\n+   #48 = Methodref          #42.#49       // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+   #49 = NameAndType        #5:#50        // \"<init>\":([B)V\n+   #50 = Utf8               ([B)V\n+   #51 = Fieldref           #42.#52       // org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #52 = NameAndType        #53:#54       // DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #53 = Utf8               DD_SIG\n+   #54 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #55 = Methodref          #42.#56       // org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+   #56 = NameAndType        #57:#58       // equals:(Ljava/lang/Object;)Z\n+   #57 = Utf8               equals\n+   #58 = Utf8               (Ljava/lang/Object;)Z\n+   #59 = Class              #60           // java/io/IOException\n+   #60 = Utf8               java/io/IOException\n+   #61 = String             #62           // The first zip split segment does not begin with split zip file signature\n+   #62 = Utf8               The first zip split segment does not begin with split zip file signature\n+   #63 = Methodref          #59.#64       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #64 = NameAndType        #5:#65        // \"<init>\":(Ljava/lang/String;)V\n+   #65 = Utf8               (Ljava/lang/String;)V\n+   #66 = String             #67           // channels must not be null\n+   #67 = Utf8               channels must not be null\n+   #68 = Methodref          #69.#70       // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #69 = Class              #71           // java/util/Objects\n+   #70 = NameAndType        #72:#73       // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #71 = Utf8               java/util/Objects\n+   #72 = Utf8               requireNonNull\n+   #73 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #74 = Class              #75           // \"[Ljava/nio/channels/SeekableByteChannel;\"\n+   #75 = Utf8               [Ljava/nio/channels/SeekableByteChannel;\n+   #76 = Methodref          #77.#78       // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+   #77 = Class              #79           // java/util/Arrays\n+   #78 = NameAndType        #80:#81       // asList:([Ljava/lang/Object;)Ljava/util/List;\n+   #79 = Utf8               java/util/Arrays\n+   #80 = Utf8               asList\n+   #81 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n+   #82 = Methodref          #7.#3         // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n+   #83 = String             #84           // channels\n+   #84 = Utf8               channels\n+   #85 = String             #86           // lastSegmentChannel\n+   #86 = Utf8               lastSegmentChannel\n+   #87 = Class              #88           // java/util/ArrayList\n+   #88 = Utf8               java/util/ArrayList\n+   #89 = Methodref          #87.#90       // java/util/ArrayList.\"<init>\":()V\n+   #90 = NameAndType        #5:#91        // \"<init>\":()V\n+   #91 = Utf8               ()V\n+   #92 = Methodref          #69.#93       // java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #93 = NameAndType        #72:#94       // requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #94 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+   #95 = InvokeDynamic      #0:#96        // #0:accept:(Ljava/util/List;)Ljava/util/function/Consumer;\n+   #96 = NameAndType        #97:#98       // accept:(Ljava/util/List;)Ljava/util/function/Consumer;\n+   #97 = Utf8               accept\n+   #98 = Utf8               (Ljava/util/List;)Ljava/util/function/Consumer;\n+   #99 = InterfaceMethodref #100.#101     // java/lang/Iterable.forEach:(Ljava/util/function/Consumer;)V\n+  #100 = Class              #102          // java/lang/Iterable\n+  #101 = NameAndType        #103:#104     // forEach:(Ljava/util/function/Consumer;)V\n+  #102 = Utf8               java/lang/Iterable\n+  #103 = Utf8               forEach\n+  #104 = Utf8               (Ljava/util/function/Consumer;)V\n+  #105 = InterfaceMethodref #23.#106      // java/util/List.add:(Ljava/lang/Object;)Z\n+  #106 = NameAndType        #107:#58      // add:(Ljava/lang/Object;)Z\n+  #107 = Utf8               add\n+  #108 = InterfaceMethodref #23.#109      // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #109 = NameAndType        #110:#111     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #110 = Utf8               toArray\n+  #111 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #112 = Methodref          #7.#113       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n+  #113 = NameAndType        #114:#115     // forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n+  #114 = Utf8               forOrderedSeekableByteChannels\n+  #115 = Utf8               ([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n+  #116 = Methodref          #117.#118     // java/io/File.toPath:()Ljava/nio/file/Path;\n+  #117 = Class              #119          // java/io/File\n+  #118 = NameAndType        #120:#121     // toPath:()Ljava/nio/file/Path;\n+  #119 = Utf8               java/io/File\n+  #120 = Utf8               toPath\n+  #121 = Utf8               ()Ljava/nio/file/Path;\n+  #122 = Methodref          #7.#123       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment:(Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n+  #123 = NameAndType        #124:#125     // buildFromLastSplitSegment:(Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n+  #124 = Utf8               buildFromLastSplitSegment\n+  #125 = Utf8               (Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n+  #126 = Methodref          #127.#128     // org/apache/commons/compress/utils/FileNameUtils.getExtension:(Ljava/nio/file/Path;)Ljava/lang/String;\n+  #127 = Class              #129          // org/apache/commons/compress/utils/FileNameUtils\n+  #128 = NameAndType        #130:#131     // getExtension:(Ljava/nio/file/Path;)Ljava/lang/String;\n+  #129 = Utf8               org/apache/commons/compress/utils/FileNameUtils\n+  #130 = Utf8               getExtension\n+  #131 = Utf8               (Ljava/nio/file/Path;)Ljava/lang/String;\n+  #132 = Class              #133          // org/apache/commons/compress/archivers/ArchiveStreamFactory\n+  #133 = Utf8               org/apache/commons/compress/archivers/ArchiveStreamFactory\n+  #134 = String             #135          // zip\n+  #135 = Utf8               zip\n+  #136 = Methodref          #137.#138     // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n+  #137 = Class              #139          // java/lang/String\n+  #138 = NameAndType        #140:#141     // equalsIgnoreCase:(Ljava/lang/String;)Z\n+  #139 = Utf8               java/lang/String\n+  #140 = Utf8               equalsIgnoreCase\n+  #141 = Utf8               (Ljava/lang/String;)Z\n+  #142 = Class              #143          // java/lang/IllegalArgumentException\n+  #143 = Utf8               java/lang/IllegalArgumentException\n+  #144 = String             #145          // The extension of last zip split segment should be .zip\n+  #145 = Utf8               The extension of last zip split segment should be .zip\n+  #146 = Methodref          #142.#64      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+  #147 = InterfaceMethodref #148.#149     // java/nio/file/Path.getParent:()Ljava/nio/file/Path;\n+  #148 = Class              #150          // java/nio/file/Path\n+  #149 = NameAndType        #151:#121     // getParent:()Ljava/nio/file/Path;\n+  #150 = Utf8               java/nio/file/Path\n+  #151 = Utf8               getParent\n+  #152 = Methodref          #69.#153      // java/util/Objects.nonNull:(Ljava/lang/Object;)Z\n+  #153 = NameAndType        #154:#58      // nonNull:(Ljava/lang/Object;)Z\n+  #154 = Utf8               nonNull\n+  #155 = InterfaceMethodref #148.#156     // java/nio/file/Path.getFileSystem:()Ljava/nio/file/FileSystem;\n+  #156 = NameAndType        #157:#158     // getFileSystem:()Ljava/nio/file/FileSystem;\n+  #157 = Utf8               getFileSystem\n+  #158 = Utf8               ()Ljava/nio/file/FileSystem;\n+  #159 = String             #160          // .\n+  #160 = Utf8               .\n+  #161 = Methodref          #162.#163     // java/nio/file/FileSystem.getPath:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;\n+  #162 = Class              #164          // java/nio/file/FileSystem\n+  #163 = NameAndType        #165:#166     // getPath:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;\n+  #164 = Utf8               java/nio/file/FileSystem\n+  #165 = Utf8               getPath\n+  #166 = Utf8               (Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;\n+  #167 = Methodref          #127.#168     // org/apache/commons/compress/utils/FileNameUtils.getBaseName:(Ljava/nio/file/Path;)Ljava/lang/String;\n+  #168 = NameAndType        #169:#131     // getBaseName:(Ljava/nio/file/Path;)Ljava/lang/String;\n+  #169 = Utf8               getBaseName\n+  #170 = Class              #171          // java/lang/StringBuilder\n+  #171 = Utf8               java/lang/StringBuilder\n+  #172 = Methodref          #170.#90      // java/lang/StringBuilder.\"<init>\":()V\n+  #173 = Methodref          #174.#175     // java/util/regex/Pattern.quote:(Ljava/lang/String;)Ljava/lang/String;\n+  #174 = Class              #176          // java/util/regex/Pattern\n+  #175 = NameAndType        #177:#178     // quote:(Ljava/lang/String;)Ljava/lang/String;\n+  #176 = Utf8               java/util/regex/Pattern\n+  #177 = Utf8               quote\n+  #178 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #179 = Methodref          #170.#180     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #180 = NameAndType        #181:#182     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #181 = Utf8               append\n+  #182 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #183 = String             #184          // .[zZ][0-9]+\n+  #184 = Utf8               .[zZ][0-9]+\n+  #185 = Methodref          #170.#186     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #186 = NameAndType        #187:#188     // toString:()Ljava/lang/String;\n+  #187 = Utf8               toString\n+  #188 = Utf8               ()Ljava/lang/String;\n+  #189 = Methodref          #174.#190     // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+  #190 = NameAndType        #191:#192     // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+  #191 = Utf8               compile\n+  #192 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;\n+  #193 = Class              #194          // java/nio/file/FileVisitOption\n+  #194 = Utf8               java/nio/file/FileVisitOption\n+  #195 = Methodref          #196.#197     // java/nio/file/Files.walk:(Ljava/nio/file/Path;I[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream;\n+  #196 = Class              #198          // java/nio/file/Files\n+  #197 = NameAndType        #199:#200     // walk:(Ljava/nio/file/Path;I[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream;\n+  #198 = Utf8               java/nio/file/Files\n+  #199 = Utf8               walk\n+  #200 = Utf8               (Ljava/nio/file/Path;I[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream;\n+  #201 = InvokeDynamic      #1:#202       // #1:test:()Ljava/util/function/Predicate;\n+  #202 = NameAndType        #203:#204     // test:()Ljava/util/function/Predicate;\n+  #203 = Utf8               test\n+  #204 = Utf8               ()Ljava/util/function/Predicate;\n+  #205 = InterfaceMethodref #206.#207     // java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\n+  #206 = Class              #208          // java/util/stream/Stream\n+  #207 = NameAndType        #209:#210     // filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\n+  #208 = Utf8               java/util/stream/Stream\n+  #209 = Utf8               filter\n+  #210 = Utf8               (Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\n+  #211 = InvokeDynamic      #2:#212       // #2:test:(Ljava/util/regex/Pattern;)Ljava/util/function/Predicate;\n+  #212 = NameAndType        #203:#213     // test:(Ljava/util/regex/Pattern;)Ljava/util/function/Predicate;\n+  #213 = Utf8               (Ljava/util/regex/Pattern;)Ljava/util/function/Predicate;\n+  #214 = Class              #215          // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator\n+  #215 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator\n+  #216 = Methodref          #214.#217     // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1;)V\n+  #217 = NameAndType        #5:#218       // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1;)V\n+  #218 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1;)V\n+  #219 = InterfaceMethodref #206.#220     // java/util/stream/Stream.sorted:(Ljava/util/Comparator;)Ljava/util/stream/Stream;\n+  #220 = NameAndType        #221:#222     // sorted:(Ljava/util/Comparator;)Ljava/util/stream/Stream;\n+  #221 = Utf8               sorted\n+  #222 = Utf8               (Ljava/util/Comparator;)Ljava/util/stream/Stream;\n+  #223 = InvokeDynamic      #3:#224       // #3:get:()Ljava/util/function/Supplier;\n+  #224 = NameAndType        #26:#225      // get:()Ljava/util/function/Supplier;\n+  #225 = Utf8               ()Ljava/util/function/Supplier;\n+  #226 = Methodref          #227.#228     // java/util/stream/Collectors.toCollection:(Ljava/util/function/Supplier;)Ljava/util/stream/Collector;\n+  #227 = Class              #229          // java/util/stream/Collectors\n+  #228 = NameAndType        #230:#231     // toCollection:(Ljava/util/function/Supplier;)Ljava/util/stream/Collector;\n+  #229 = Utf8               java/util/stream/Collectors\n+  #230 = Utf8               toCollection\n+  #231 = Utf8               (Ljava/util/function/Supplier;)Ljava/util/stream/Collector;\n+  #232 = InterfaceMethodref #206.#233     // java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;\n+  #233 = NameAndType        #234:#235     // collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;\n+  #234 = Utf8               collect\n+  #235 = Utf8               (Ljava/util/stream/Collector;)Ljava/lang/Object;\n+  #236 = InterfaceMethodref #206.#237     // java/util/stream/Stream.close:()V\n+  #237 = NameAndType        #238:#91      // close:()V\n+  #238 = Utf8               close\n+  #239 = Class              #240          // java/lang/Throwable\n+  #240 = Utf8               java/lang/Throwable\n+  #241 = Methodref          #239.#242     // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+  #242 = NameAndType        #243:#244     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #243 = Utf8               addSuppressed\n+  #244 = Utf8               (Ljava/lang/Throwable;)V\n+  #245 = Methodref          #7.#246       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forPaths:(Ljava/nio/file/Path;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+  #246 = NameAndType        #247:#248     // forPaths:(Ljava/nio/file/Path;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+  #247 = Utf8               forPaths\n+  #248 = Utf8               (Ljava/nio/file/Path;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+  #249 = String             #250          // files must not be null\n+  #250 = Utf8               files must not be null\n+  #251 = Class              #252          // \"[Ljava/io/File;\"\n+  #252 = Utf8               [Ljava/io/File;\n+  #253 = Fieldref           #7.#254       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.EMPTY_PATH_ARRAY:[Ljava/nio/file/Path;\n+  #254 = NameAndType        #255:#256     // EMPTY_PATH_ARRAY:[Ljava/nio/file/Path;\n+  #255 = Utf8               EMPTY_PATH_ARRAY\n+  #256 = Utf8               [Ljava/nio/file/Path;\n+  #257 = Class              #256          // \"[Ljava/nio/file/Path;\"\n+  #258 = Methodref          #7.#259       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forPaths:([Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n+  #259 = NameAndType        #247:#260     // forPaths:([Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n+  #260 = Utf8               ([Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n+  #261 = String             #262          // paths must not be null\n+  #262 = Utf8               paths must not be null\n+  #263 = Class              #264          // java/nio/file/OpenOption\n+  #264 = Utf8               java/nio/file/OpenOption\n+  #265 = Fieldref           #266.#267     // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+  #266 = Class              #268          // java/nio/file/StandardOpenOption\n+  #267 = NameAndType        #269:#270     // READ:Ljava/nio/file/StandardOpenOption;\n+  #268 = Utf8               java/nio/file/StandardOpenOption\n+  #269 = Utf8               READ\n+  #270 = Utf8               Ljava/nio/file/StandardOpenOption;\n+  #271 = Methodref          #196.#272     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+  #272 = NameAndType        #273:#274     // newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+  #273 = Utf8               newByteChannel\n+  #274 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+  #275 = InterfaceMethodref #23.#276      // java/util/List.size:()I\n+  #276 = NameAndType        #277:#278     // size:()I\n+  #277 = Utf8               size\n+  #278 = Utf8               ()I\n+  #279 = String             #280          // files\n+  #280 = Utf8               files\n+  #281 = String             #282          // lastSegmentFile\n+  #282 = Utf8               lastSegmentFile\n+  #283 = InvokeDynamic      #4:#96        // #4:accept:(Ljava/util/List;)Ljava/util/function/Consumer;\n+  #284 = String             #285          // paths\n+  #285 = Utf8               paths\n+  #286 = String             #287          // lastSegmentPath\n+  #287 = Utf8               lastSegmentPath\n+  #288 = InvokeDynamic      #5:#96        // #5:accept:(Ljava/util/List;)Ljava/util/function/Consumer;\n+  #289 = InterfaceMethodref #148.#290     // java/nio/file/Path.getFileName:()Ljava/nio/file/Path;\n+  #290 = NameAndType        #291:#121     // getFileName:()Ljava/nio/file/Path;\n+  #291 = Utf8               getFileName\n+  #292 = InterfaceMethodref #148.#186     // java/nio/file/Path.toString:()Ljava/lang/String;\n+  #293 = Methodref          #174.#294     // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #294 = NameAndType        #295:#296     // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #295 = Utf8               matcher\n+  #296 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #297 = Methodref          #298.#299     // java/util/regex/Matcher.matches:()Z\n+  #298 = Class              #300          // java/util/regex/Matcher\n+  #299 = NameAndType        #301:#302     // matches:()Z\n+  #300 = Utf8               java/util/regex/Matcher\n+  #301 = Utf8               matches\n+  #302 = Utf8               ()Z\n+  #303 = Class              #304          // java/nio/file/LinkOption\n+  #304 = Utf8               java/nio/file/LinkOption\n+  #305 = Methodref          #196.#306     // java/nio/file/Files.isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #306 = NameAndType        #307:#308     // isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #307 = Utf8               isRegularFile\n+  #308 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #309 = Utf8               ZIP_SPLIT_SIGNATURE_LENGTH\n+  #310 = Utf8               I\n+  #311 = Utf8               ConstantValue\n+  #312 = Integer            4\n+  #313 = Utf8               Code\n+  #314 = Utf8               LineNumberTable\n+  #315 = Utf8               LocalVariableTable\n+  #316 = Utf8               this\n+  #317 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel;\n+  #318 = Utf8               Ljava/util/List;\n+  #319 = Utf8               LocalVariableTypeTable\n+  #320 = Utf8               Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n+  #321 = Utf8               Exceptions\n+  #322 = Utf8               Signature\n+  #323 = Utf8               (Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;)V\n+  #324 = Utf8               channel\n+  #325 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n+  #326 = Utf8               signature\n+  #327 = Utf8               StackMapTable\n+  #328 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+  #329 = Utf8               Ljava/lang/Iterable;\n+  #330 = Utf8               channelsList\n+  #331 = Utf8               Ljava/lang/Iterable<Ljava/nio/channels/SeekableByteChannel;>;\n+  #332 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable<Ljava/nio/channels/SeekableByteChannel;>;)Ljava/nio/channels/SeekableByteChannel;\n+  #333 = Utf8               (Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+  #334 = Utf8               Ljava/io/File;\n+  #335 = Utf8               splitZipSegments\n+  #336 = Utf8               Ljava/util/ArrayList;\n+  #337 = Utf8               Ljava/util/stream/Stream;\n+  #338 = Utf8               Ljava/nio/file/Path;\n+  #339 = Utf8               extension\n+  #340 = Utf8               Ljava/lang/String;\n+  #341 = Utf8               parent\n+  #342 = Utf8               fileBaseName\n+  #343 = Utf8               pattern\n+  #344 = Utf8               Ljava/util/regex/Pattern;\n+  #345 = Utf8               Ljava/util/ArrayList<Ljava/nio/file/Path;>;\n+  #346 = Utf8               Ljava/util/stream/Stream<Ljava/nio/file/Path;>;\n+  #347 = Utf8               forFiles\n+  #348 = Utf8               ([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+  #349 = Utf8               f\n+  #350 = Utf8               Ljava/util/List<Ljava/nio/file/Path;>;\n+  #351 = Utf8               path\n+  #352 = Utf8               (Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+  #353 = Utf8               filesList\n+  #354 = Utf8               Ljava/lang/Iterable<Ljava/io/File;>;\n+  #355 = Utf8               (Ljava/io/File;Ljava/lang/Iterable<Ljava/io/File;>;)Ljava/nio/channels/SeekableByteChannel;\n+  #356 = Utf8               Ljava/lang/Iterable<Ljava/nio/file/Path;>;\n+  #357 = Utf8               (Ljava/nio/file/Path;Ljava/lang/Iterable<Ljava/nio/file/Path;>;)Ljava/nio/channels/SeekableByteChannel;\n+  #358 = Utf8               lambda$forFiles$2\n+  #359 = Utf8               (Ljava/util/List;Ljava/io/File;)V\n+  #360 = Utf8               lambda$buildFromLastSplitSegment$1\n+  #361 = Utf8               (Ljava/util/regex/Pattern;Ljava/nio/file/Path;)Z\n+  #362 = Utf8               lambda$buildFromLastSplitSegment$0\n+  #363 = Utf8               (Ljava/nio/file/Path;)Z\n+  #364 = Utf8               x$0\n+  #365 = Utf8               <clinit>\n+  #366 = Utf8               SourceFile\n+  #367 = Utf8               ZipSplitReadOnlySeekableByteChannel.java\n+  #368 = Utf8               BootstrapMethods\n+  #369 = MethodHandle       6:#370        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #370 = Methodref          #371.#372     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #371 = Class              #373          // java/lang/invoke/LambdaMetafactory\n+  #372 = NameAndType        #374:#375     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #373 = Utf8               java/lang/invoke/LambdaMetafactory\n+  #374 = Utf8               metafactory\n+  #375 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #376 = MethodType         #377          //  (Ljava/lang/Object;)V\n+  #377 = Utf8               (Ljava/lang/Object;)V\n+  #378 = MethodHandle       9:#105        // REF_invokeInterface java/util/List.add:(Ljava/lang/Object;)Z\n+  #379 = MethodType         #380          //  (Ljava/nio/channels/SeekableByteChannel;)V\n+  #380 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n+  #381 = MethodType         #58           //  (Ljava/lang/Object;)Z\n+  #382 = MethodHandle       6:#383        // REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$buildFromLastSplitSegment$0:(Ljava/nio/file/Path;)Z\n+  #383 = Methodref          #7.#384       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$buildFromLastSplitSegment$0:(Ljava/nio/file/Path;)Z\n+  #384 = NameAndType        #362:#363     // lambda$buildFromLastSplitSegment$0:(Ljava/nio/file/Path;)Z\n+  #385 = MethodType         #363          //  (Ljava/nio/file/Path;)Z\n+  #386 = MethodHandle       6:#387        // REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$buildFromLastSplitSegment$1:(Ljava/util/regex/Pattern;Ljava/nio/file/Path;)Z\n+  #387 = Methodref          #7.#388       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$buildFromLastSplitSegment$1:(Ljava/util/regex/Pattern;Ljava/nio/file/Path;)Z\n+  #388 = NameAndType        #360:#361     // lambda$buildFromLastSplitSegment$1:(Ljava/util/regex/Pattern;Ljava/nio/file/Path;)Z\n+  #389 = MethodType         #390          //  ()Ljava/lang/Object;\n+  #390 = Utf8               ()Ljava/lang/Object;\n+  #391 = MethodHandle       8:#89         // REF_newInvokeSpecial java/util/ArrayList.\"<init>\":()V\n+  #392 = MethodType         #393          //  ()Ljava/util/ArrayList;\n+  #393 = Utf8               ()Ljava/util/ArrayList;\n+  #394 = MethodHandle       6:#395        // REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$forFiles$2:(Ljava/util/List;Ljava/io/File;)V\n+  #395 = Methodref          #7.#396       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$forFiles$2:(Ljava/util/List;Ljava/io/File;)V\n+  #396 = NameAndType        #358:#359     // lambda$forFiles$2:(Ljava/util/List;Ljava/io/File;)V\n+  #397 = MethodType         #398          //  (Ljava/io/File;)V\n+  #398 = Utf8               (Ljava/io/File;)V\n+  #399 = MethodType         #400          //  (Ljava/nio/file/Path;)V\n+  #400 = Utf8               (Ljava/nio/file/Path;)V\n+  #401 = Utf8               InnerClasses\n+  #402 = Utf8               ZipSplitSegmentComparator\n+  #403 = Class              #404          // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1\n+  #404 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1\n+  #405 = Class              #406          // java/lang/invoke/MethodHandles$Lookup\n+  #406 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #407 = Class              #408          // java/lang/invoke/MethodHandles\n+  #408 = Utf8               java/lang/invoke/MethodHandles\n+  #409 = Utf8               Lookup\n {\n   private static final java.nio.file.Path[] EMPTY_PATH_ARRAY;\n     descriptor: [Ljava/nio/file/Path;\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   private static final int ZIP_SPLIT_SIGNATURE_LENGTH = 4;\n     descriptor: I\n@@ -437,19 +437,19 @@\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: invokespecial #1                  // Method org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n          5: aload_0\n          6: iconst_4\n-         7: invokestatic  #3                  // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-        10: putfield      #4                  // Field zipSplitSignatureByteBuffer:Ljava/nio/ByteBuffer;\n+         7: invokestatic  #9                  // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        10: putfield      #15                 // Field zipSplitSignatureByteBuffer:Ljava/nio/ByteBuffer;\n         13: aload_0\n         14: aload_1\n-        15: invokespecial #5                  // Method assertSplitSignature:(Ljava/util/List;)V\n+        15: invokespecial #19                 // Method assertSplitSignature:(Ljava/util/List;)V\n         18: return\n       LineNumberTable:\n         line 71: 0\n         line 54: 5\n         line 55: 7\n         line 74: 13\n         line 75: 18\n@@ -458,62 +458,62 @@\n             0      19     0  this   Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel;\n             0      19     1 channels   Ljava/util/List;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      19     1 channels   Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #120                         // (Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;)V\n+    Signature: #323                         // (Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;)V\n \n   private void assertSplitSignature(java.util.List<java.nio.channels.SeekableByteChannel>) throws java.io.IOException;\n     descriptor: (Ljava/util/List;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=4, args_size=2\n          0: aload_1\n          1: iconst_0\n-         2: invokeinterface #6,  2            // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n-         7: checkcast     #7                  // class java/nio/channels/SeekableByteChannel\n+         2: invokeinterface #22,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n+         7: checkcast     #28                 // class java/nio/channels/SeekableByteChannel\n         10: astore_2\n         11: aload_2\n         12: lconst_0\n-        13: invokeinterface #8,  3            // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        13: invokeinterface #30,  3           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         18: pop\n         19: aload_0\n-        20: getfield      #4                  // Field zipSplitSignatureByteBuffer:Ljava/nio/ByteBuffer;\n-        23: invokevirtual #9                  // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        20: getfield      #15                 // Field zipSplitSignatureByteBuffer:Ljava/nio/ByteBuffer;\n+        23: invokevirtual #34                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n         26: pop\n         27: aload_2\n         28: aload_0\n-        29: getfield      #4                  // Field zipSplitSignatureByteBuffer:Ljava/nio/ByteBuffer;\n-        32: invokeinterface #10,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+        29: getfield      #15                 // Field zipSplitSignatureByteBuffer:Ljava/nio/ByteBuffer;\n+        32: invokeinterface #38,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         37: pop\n-        38: new           #11                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+        38: new           #42                 // class org/apache/commons/compress/archivers/zip/ZipLong\n         41: dup\n         42: aload_0\n-        43: getfield      #4                  // Field zipSplitSignatureByteBuffer:Ljava/nio/ByteBuffer;\n-        46: invokevirtual #12                 // Method java/nio/ByteBuffer.array:()[B\n-        49: invokespecial #13                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+        43: getfield      #15                 // Field zipSplitSignatureByteBuffer:Ljava/nio/ByteBuffer;\n+        46: invokevirtual #44                 // Method java/nio/ByteBuffer.array:()[B\n+        49: invokespecial #48                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n         52: astore_3\n         53: aload_3\n-        54: getstatic     #14                 // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        57: invokevirtual #15                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        54: getstatic     #51                 // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        57: invokevirtual #55                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n         60: ifne          81\n         63: aload_2\n         64: lconst_0\n-        65: invokeinterface #8,  3            // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        65: invokeinterface #30,  3           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         70: pop\n-        71: new           #16                 // class java/io/IOException\n+        71: new           #59                 // class java/io/IOException\n         74: dup\n-        75: ldc           #17                 // String The first zip split segment does not begin with split zip file signature\n-        77: invokespecial #18                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        75: ldc           #61                 // String The first zip split segment does not begin with split zip file signature\n+        77: invokespecial #63                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         80: athrow\n         81: aload_2\n         82: lconst_0\n-        83: invokeinterface #8,  3            // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        83: invokeinterface #30,  3           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         88: pop\n         89: return\n       LineNumberTable:\n         line 97: 0\n         line 99: 11\n         line 101: 19\n         line 102: 27\n@@ -534,37 +534,37 @@\n             0      90     1 channels   Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n       StackMapTable: number_of_entries = 1\n         frame_type = 253 /* append */\n           offset_delta = 81\n           locals = [ class java/nio/channels/SeekableByteChannel, class org/apache/commons/compress/archivers/zip/ZipLong ]\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #120                         // (Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;)V\n+    Signature: #323                         // (Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;)V\n \n   public static java.nio.channels.SeekableByteChannel forOrderedSeekableByteChannels(java.nio.channels.SeekableByteChannel...) throws java.io.IOException;\n     descriptor: ([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0089) ACC_PUBLIC, ACC_STATIC, ACC_VARARGS\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n-         1: ldc           #19                 // String channels must not be null\n-         3: invokestatic  #20                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-         6: checkcast     #21                 // class \"[Ljava/nio/channels/SeekableByteChannel;\"\n+         1: ldc           #66                 // String channels must not be null\n+         3: invokestatic  #68                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+         6: checkcast     #74                 // class \"[Ljava/nio/channels/SeekableByteChannel;\"\n          9: arraylength\n         10: iconst_1\n         11: if_icmpne     18\n         14: aload_0\n         15: iconst_0\n         16: aaload\n         17: areturn\n-        18: new           #2                  // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+        18: new           #7                  // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n         21: dup\n         22: aload_0\n-        23: invokestatic  #22                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-        26: invokespecial #23                 // Method \"<init>\":(Ljava/util/List;)V\n+        23: invokestatic  #76                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+        26: invokespecial #82                 // Method \"<init>\":(Ljava/util/List;)V\n         29: areturn\n       LineNumberTable:\n         line 122: 0\n         line 123: 14\n         line 125: 18\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -576,42 +576,42 @@\n \n   public static java.nio.channels.SeekableByteChannel forOrderedSeekableByteChannels(java.nio.channels.SeekableByteChannel, java.lang.Iterable<java.nio.channels.SeekableByteChannel>) throws java.io.IOException;\n     descriptor: (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_1\n-         1: ldc           #24                 // String channels\n-         3: invokestatic  #20                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+         1: ldc           #83                 // String channels\n+         3: invokestatic  #68                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n          6: pop\n          7: aload_0\n-         8: ldc           #25                 // String lastSegmentChannel\n-        10: invokestatic  #20                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+         8: ldc           #85                 // String lastSegmentChannel\n+        10: invokestatic  #68                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n         13: pop\n-        14: new           #26                 // class java/util/ArrayList\n+        14: new           #87                 // class java/util/ArrayList\n         17: dup\n-        18: invokespecial #27                 // Method java/util/ArrayList.\"<init>\":()V\n+        18: invokespecial #89                 // Method java/util/ArrayList.\"<init>\":()V\n         21: astore_2\n         22: aload_1\n         23: aload_2\n         24: dup\n-        25: invokestatic  #28                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n+        25: invokestatic  #92                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n         28: pop\n-        29: invokedynamic #29,  0             // InvokeDynamic #0:accept:(Ljava/util/List;)Ljava/util/function/Consumer;\n-        34: invokeinterface #30,  2           // InterfaceMethod java/lang/Iterable.forEach:(Ljava/util/function/Consumer;)V\n+        29: invokedynamic #95,  0             // InvokeDynamic #0:accept:(Ljava/util/List;)Ljava/util/function/Consumer;\n+        34: invokeinterface #99,  2           // InterfaceMethod java/lang/Iterable.forEach:(Ljava/util/function/Consumer;)V\n         39: aload_2\n         40: aload_0\n-        41: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        41: invokeinterface #105,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n         46: pop\n         47: aload_2\n         48: iconst_0\n-        49: anewarray     #7                  // class java/nio/channels/SeekableByteChannel\n-        52: invokeinterface #32,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-        57: checkcast     #21                 // class \"[Ljava/nio/channels/SeekableByteChannel;\"\n-        60: invokestatic  #33                 // Method forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n+        49: anewarray     #28                 // class java/nio/channels/SeekableByteChannel\n+        52: invokeinterface #108,  2          // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+        57: checkcast     #74                 // class \"[Ljava/nio/channels/SeekableByteChannel;\"\n+        60: invokestatic  #112                // Method forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n         63: areturn\n       LineNumberTable:\n         line 141: 0\n         line 142: 7\n         line 144: 14\n         line 145: 22\n         line 146: 39\n@@ -623,24 +623,24 @@\n            22      42     2 channelsList   Ljava/util/List;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      64     1 channels   Ljava/lang/Iterable<Ljava/nio/channels/SeekableByteChannel;>;\n            22      42     2 channelsList   Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #135                         // (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable<Ljava/nio/channels/SeekableByteChannel;>;)Ljava/nio/channels/SeekableByteChannel;\n+    Signature: #332                         // (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable<Ljava/nio/channels/SeekableByteChannel;>;)Ljava/nio/channels/SeekableByteChannel;\n \n   public static java.nio.channels.SeekableByteChannel buildFromLastSplitSegment(java.io.File) throws java.io.IOException;\n     descriptor: (Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #34                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n-         4: invokestatic  #35                 // Method buildFromLastSplitSegment:(Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n+         1: invokevirtual #116                // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         4: invokestatic  #122                // Method buildFromLastSplitSegment:(Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n          7: areturn\n       LineNumberTable:\n         line 161: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0 lastSegmentFile   Ljava/io/File;\n     Exceptions:\n@@ -648,95 +648,95 @@\n \n   public static java.nio.channels.SeekableByteChannel buildFromLastSplitSegment(java.nio.file.Path) throws java.io.IOException;\n     descriptor: (Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=9, args_size=1\n          0: aload_0\n-         1: invokestatic  #36                 // Method org/apache/commons/compress/utils/FileNameUtils.getExtension:(Ljava/nio/file/Path;)Ljava/lang/String;\n+         1: invokestatic  #126                // Method org/apache/commons/compress/utils/FileNameUtils.getExtension:(Ljava/nio/file/Path;)Ljava/lang/String;\n          4: astore_1\n          5: aload_1\n-         6: ldc           #38                 // String zip\n-         8: invokevirtual #39                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n+         6: ldc           #134                // String zip\n+         8: invokevirtual #136                // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n         11: ifne          24\n-        14: new           #40                 // class java/lang/IllegalArgumentException\n+        14: new           #142                // class java/lang/IllegalArgumentException\n         17: dup\n-        18: ldc           #41                 // String The extension of last zip split segment should be .zip\n-        20: invokespecial #42                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        18: ldc           #144                // String The extension of last zip split segment should be .zip\n+        20: invokespecial #146                // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         23: athrow\n         24: aload_0\n-        25: invokeinterface #43,  1           // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;\n-        30: invokestatic  #44                 // Method java/util/Objects.nonNull:(Ljava/lang/Object;)Z\n+        25: invokeinterface #147,  1          // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;\n+        30: invokestatic  #152                // Method java/util/Objects.nonNull:(Ljava/lang/Object;)Z\n         33: ifeq          45\n         36: aload_0\n-        37: invokeinterface #43,  1           // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;\n+        37: invokeinterface #147,  1          // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;\n         42: goto          60\n         45: aload_0\n-        46: invokeinterface #45,  1           // InterfaceMethod java/nio/file/Path.getFileSystem:()Ljava/nio/file/FileSystem;\n-        51: ldc           #46                 // String .\n+        46: invokeinterface #155,  1          // InterfaceMethod java/nio/file/Path.getFileSystem:()Ljava/nio/file/FileSystem;\n+        51: ldc           #159                // String .\n         53: iconst_0\n-        54: anewarray     #47                 // class java/lang/String\n-        57: invokevirtual #48                 // Method java/nio/file/FileSystem.getPath:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;\n+        54: anewarray     #137                // class java/lang/String\n+        57: invokevirtual #161                // Method java/nio/file/FileSystem.getPath:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;\n         60: astore_2\n         61: aload_0\n-        62: invokestatic  #49                 // Method org/apache/commons/compress/utils/FileNameUtils.getBaseName:(Ljava/nio/file/Path;)Ljava/lang/String;\n+        62: invokestatic  #167                // Method org/apache/commons/compress/utils/FileNameUtils.getBaseName:(Ljava/nio/file/Path;)Ljava/lang/String;\n         65: astore_3\n-        66: new           #50                 // class java/lang/StringBuilder\n+        66: new           #170                // class java/lang/StringBuilder\n         69: dup\n-        70: invokespecial #51                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        70: invokespecial #172                // Method java/lang/StringBuilder.\"<init>\":()V\n         73: aload_3\n-        74: invokestatic  #52                 // Method java/util/regex/Pattern.quote:(Ljava/lang/String;)Ljava/lang/String;\n-        77: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        80: ldc           #54                 // String .[zZ][0-9]+\n-        82: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        85: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        88: invokestatic  #56                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+        74: invokestatic  #173                // Method java/util/regex/Pattern.quote:(Ljava/lang/String;)Ljava/lang/String;\n+        77: invokevirtual #179                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        80: ldc           #183                // String .[zZ][0-9]+\n+        82: invokevirtual #179                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        85: invokevirtual #185                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        88: invokestatic  #189                // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n         91: astore        5\n         93: aload_2\n         94: iconst_1\n         95: iconst_0\n-        96: anewarray     #57                 // class java/nio/file/FileVisitOption\n-        99: invokestatic  #58                 // Method java/nio/file/Files.walk:(Ljava/nio/file/Path;I[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream;\n+        96: anewarray     #193                // class java/nio/file/FileVisitOption\n+        99: invokestatic  #195                // Method java/nio/file/Files.walk:(Ljava/nio/file/Path;I[Ljava/nio/file/FileVisitOption;)Ljava/util/stream/Stream;\n        102: astore        6\n        104: aload         6\n-       106: invokedynamic #59,  0             // InvokeDynamic #1:test:()Ljava/util/function/Predicate;\n-       111: invokeinterface #60,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\n+       106: invokedynamic #201,  0            // InvokeDynamic #1:test:()Ljava/util/function/Predicate;\n+       111: invokeinterface #205,  2          // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\n        116: aload         5\n-       118: invokedynamic #61,  0             // InvokeDynamic #2:test:(Ljava/util/regex/Pattern;)Ljava/util/function/Predicate;\n-       123: invokeinterface #60,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\n-       128: new           #62                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator\n+       118: invokedynamic #211,  0            // InvokeDynamic #2:test:(Ljava/util/regex/Pattern;)Ljava/util/function/Predicate;\n+       123: invokeinterface #205,  2          // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\n+       128: new           #214                // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator\n        131: dup\n        132: aconst_null\n-       133: invokespecial #63                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1;)V\n-       136: invokeinterface #64,  2           // InterfaceMethod java/util/stream/Stream.sorted:(Ljava/util/Comparator;)Ljava/util/stream/Stream;\n-       141: invokedynamic #65,  0             // InvokeDynamic #3:get:()Ljava/util/function/Supplier;\n-       146: invokestatic  #66                 // Method java/util/stream/Collectors.toCollection:(Ljava/util/function/Supplier;)Ljava/util/stream/Collector;\n-       149: invokeinterface #67,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;\n-       154: checkcast     #26                 // class java/util/ArrayList\n+       133: invokespecial #216                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1;)V\n+       136: invokeinterface #219,  2          // InterfaceMethod java/util/stream/Stream.sorted:(Ljava/util/Comparator;)Ljava/util/stream/Stream;\n+       141: invokedynamic #223,  0            // InvokeDynamic #3:get:()Ljava/util/function/Supplier;\n+       146: invokestatic  #226                // Method java/util/stream/Collectors.toCollection:(Ljava/util/function/Supplier;)Ljava/util/stream/Collector;\n+       149: invokeinterface #232,  2          // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;\n+       154: checkcast     #87                 // class java/util/ArrayList\n        157: astore        4\n        159: aload         6\n        161: ifnull        203\n        164: aload         6\n-       166: invokeinterface #68,  1           // InterfaceMethod java/util/stream/Stream.close:()V\n+       166: invokeinterface #236,  1          // InterfaceMethod java/util/stream/Stream.close:()V\n        171: goto          203\n        174: astore        7\n        176: aload         6\n        178: ifnull        200\n        181: aload         6\n-       183: invokeinterface #68,  1           // InterfaceMethod java/util/stream/Stream.close:()V\n+       183: invokeinterface #236,  1          // InterfaceMethod java/util/stream/Stream.close:()V\n        188: goto          200\n        191: astore        8\n        193: aload         7\n        195: aload         8\n-       197: invokevirtual #70                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+       197: invokevirtual #241                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n        200: aload         7\n        202: athrow\n        203: aload_0\n        204: aload         4\n-       206: invokestatic  #71                 // Method forPaths:(Ljava/nio/file/Path;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+       206: invokestatic  #245                // Method forPaths:(Ljava/nio/file/Path;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n        209: areturn\n       Exception table:\n          from    to  target type\n            104   159   174   Class java/lang/Throwable\n            181   188   191   Class java/lang/Throwable\n       LineNumberTable:\n         line 174: 0\n@@ -794,22 +794,22 @@\n       throws java.io.IOException\n \n   public static java.nio.channels.SeekableByteChannel forFiles(java.io.File...) throws java.io.IOException;\n     descriptor: ([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0089) ACC_PUBLIC, ACC_STATIC, ACC_VARARGS\n     Code:\n       stack=2, locals=6, args_size=1\n-         0: new           #26                 // class java/util/ArrayList\n+         0: new           #87                 // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #27                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #89                 // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n-         9: ldc           #72                 // String files must not be null\n-        11: invokestatic  #20                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-        14: checkcast     #73                 // class \"[Ljava/io/File;\"\n+         9: ldc           #249                // String files must not be null\n+        11: invokestatic  #68                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+        14: checkcast     #251                // class \"[Ljava/io/File;\"\n         17: astore_2\n         18: aload_2\n         19: arraylength\n         20: istore_3\n         21: iconst_0\n         22: istore        4\n         24: iload         4\n@@ -817,24 +817,24 @@\n         27: if_icmpge     54\n         30: aload_2\n         31: iload         4\n         33: aaload\n         34: astore        5\n         36: aload_1\n         37: aload         5\n-        39: invokevirtual #34                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n-        42: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        39: invokevirtual #116                // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+        42: invokeinterface #105,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n         47: pop\n         48: iinc          4, 1\n         51: goto          24\n         54: aload_1\n-        55: getstatic     #74                 // Field EMPTY_PATH_ARRAY:[Ljava/nio/file/Path;\n-        58: invokeinterface #32,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-        63: checkcast     #75                 // class \"[Ljava/nio/file/Path;\"\n-        66: invokestatic  #76                 // Method forPaths:([Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n+        55: getstatic     #253                // Field EMPTY_PATH_ARRAY:[Ljava/nio/file/Path;\n+        58: invokeinterface #108,  2          // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+        63: checkcast     #257                // class \"[Ljava/nio/file/Path;\"\n+        66: invokestatic  #258                // Method forPaths:([Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n         69: areturn\n       LineNumberTable:\n         line 209: 0\n         line 210: 8\n         line 211: 36\n         line 210: 48\n         line 214: 54\n@@ -857,197 +857,197 @@\n       throws java.io.IOException\n \n   public static java.nio.channels.SeekableByteChannel forPaths(java.nio.file.Path...) throws java.io.IOException;\n     descriptor: ([Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0089) ACC_PUBLIC, ACC_STATIC, ACC_VARARGS\n     Code:\n       stack=6, locals=6, args_size=1\n-         0: new           #26                 // class java/util/ArrayList\n+         0: new           #87                 // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #27                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #89                 // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n-         9: ldc           #77                 // String paths must not be null\n-        11: invokestatic  #20                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-        14: checkcast     #75                 // class \"[Ljava/nio/file/Path;\"\n-        17: astore_2\n-        18: aload_2\n-        19: arraylength\n-        20: istore_3\n-        21: iconst_0\n-        22: istore        4\n-        24: iload         4\n-        26: iload_3\n-        27: if_icmpge     64\n-        30: aload_2\n-        31: iload         4\n-        33: aaload\n-        34: astore        5\n-        36: aload_1\n-        37: aload         5\n-        39: iconst_1\n-        40: anewarray     #78                 // class java/nio/file/OpenOption\n-        43: dup\n-        44: iconst_0\n-        45: getstatic     #79                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-        48: aastore\n-        49: invokestatic  #80                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-        52: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-        57: pop\n-        58: iinc          4, 1\n-        61: goto          24\n-        64: aload_1\n-        65: invokeinterface #81,  1           // InterfaceMethod java/util/List.size:()I\n-        70: iconst_1\n-        71: if_icmpne     85\n-        74: aload_1\n-        75: iconst_0\n-        76: invokeinterface #6,  2            // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n-        81: checkcast     #7                  // class java/nio/channels/SeekableByteChannel\n-        84: areturn\n-        85: new           #2                  // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-        88: dup\n-        89: aload_1\n-        90: invokespecial #23                 // Method \"<init>\":(Ljava/util/List;)V\n-        93: areturn\n+         9: ldc_w         #261                // String paths must not be null\n+        12: invokestatic  #68                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+        15: checkcast     #257                // class \"[Ljava/nio/file/Path;\"\n+        18: astore_2\n+        19: aload_2\n+        20: arraylength\n+        21: istore_3\n+        22: iconst_0\n+        23: istore        4\n+        25: iload         4\n+        27: iload_3\n+        28: if_icmpge     65\n+        31: aload_2\n+        32: iload         4\n+        34: aaload\n+        35: astore        5\n+        37: aload_1\n+        38: aload         5\n+        40: iconst_1\n+        41: anewarray     #263                // class java/nio/file/OpenOption\n+        44: dup\n+        45: iconst_0\n+        46: getstatic     #265                // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+        49: aastore\n+        50: invokestatic  #271                // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+        53: invokeinterface #105,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        58: pop\n+        59: iinc          4, 1\n+        62: goto          25\n+        65: aload_1\n+        66: invokeinterface #275,  1          // InterfaceMethod java/util/List.size:()I\n+        71: iconst_1\n+        72: if_icmpne     86\n+        75: aload_1\n+        76: iconst_0\n+        77: invokeinterface #22,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n+        82: checkcast     #28                 // class java/nio/channels/SeekableByteChannel\n+        85: areturn\n+        86: new           #7                  // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+        89: dup\n+        90: aload_1\n+        91: invokespecial #82                 // Method \"<init>\":(Ljava/util/List;)V\n+        94: areturn\n       LineNumberTable:\n         line 229: 0\n         line 230: 8\n-        line 231: 36\n-        line 230: 58\n-        line 233: 64\n-        line 234: 74\n-        line 236: 85\n+        line 231: 37\n+        line 230: 59\n+        line 233: 65\n+        line 234: 75\n+        line 236: 86\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           36      22     5  path   Ljava/nio/file/Path;\n-            0      94     0 paths   [Ljava/nio/file/Path;\n-            8      86     1 channels   Ljava/util/List;\n+           37      22     5  path   Ljava/nio/file/Path;\n+            0      95     0 paths   [Ljava/nio/file/Path;\n+            8      87     1 channels   Ljava/util/List;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n-            8      86     1 channels   Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n+            8      87     1 channels   Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n       StackMapTable: number_of_entries = 3\n         frame_type = 255 /* full_frame */\n-          offset_delta = 24\n+          offset_delta = 25\n           locals = [ class \"[Ljava/nio/file/Path;\", class java/util/List, class \"[Ljava/nio/file/Path;\", int, int ]\n           stack = []\n         frame_type = 248 /* chop */\n           offset_delta = 39\n         frame_type = 20 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   public static java.nio.channels.SeekableByteChannel forFiles(java.io.File, java.lang.Iterable<java.io.File>) throws java.io.IOException;\n     descriptor: (Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_1\n-         1: ldc           #82                 // String files\n-         3: invokestatic  #20                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-         6: pop\n-         7: aload_0\n-         8: ldc           #83                 // String lastSegmentFile\n-        10: invokestatic  #20                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-        13: pop\n-        14: new           #26                 // class java/util/ArrayList\n-        17: dup\n-        18: invokespecial #27                 // Method java/util/ArrayList.\"<init>\":()V\n-        21: astore_2\n-        22: aload_1\n-        23: aload_2\n-        24: invokedynamic #84,  0             // InvokeDynamic #4:accept:(Ljava/util/List;)Ljava/util/function/Consumer;\n-        29: invokeinterface #30,  2           // InterfaceMethod java/lang/Iterable.forEach:(Ljava/util/function/Consumer;)V\n-        34: aload_0\n-        35: invokevirtual #34                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n-        38: aload_2\n-        39: invokestatic  #71                 // Method forPaths:(Ljava/nio/file/Path;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-        42: areturn\n+         1: ldc_w         #279                // String files\n+         4: invokestatic  #68                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+         7: pop\n+         8: aload_0\n+         9: ldc_w         #281                // String lastSegmentFile\n+        12: invokestatic  #68                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+        15: pop\n+        16: new           #87                 // class java/util/ArrayList\n+        19: dup\n+        20: invokespecial #89                 // Method java/util/ArrayList.\"<init>\":()V\n+        23: astore_2\n+        24: aload_1\n+        25: aload_2\n+        26: invokedynamic #283,  0            // InvokeDynamic #4:accept:(Ljava/util/List;)Ljava/util/function/Consumer;\n+        31: invokeinterface #99,  2           // InterfaceMethod java/lang/Iterable.forEach:(Ljava/util/function/Consumer;)V\n+        36: aload_0\n+        37: invokevirtual #116                // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+        40: aload_2\n+        41: invokestatic  #245                // Method forPaths:(Ljava/nio/file/Path;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+        44: areturn\n       LineNumberTable:\n         line 251: 0\n-        line 252: 7\n-        line 254: 14\n-        line 255: 22\n-        line 257: 34\n+        line 252: 8\n+        line 254: 16\n+        line 255: 24\n+        line 257: 36\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      43     0 lastSegmentFile   Ljava/io/File;\n-            0      43     1 files   Ljava/lang/Iterable;\n-           22      21     2 filesList   Ljava/util/List;\n+            0      45     0 lastSegmentFile   Ljava/io/File;\n+            0      45     1 files   Ljava/lang/Iterable;\n+           24      21     2 filesList   Ljava/util/List;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n-            0      43     1 files   Ljava/lang/Iterable<Ljava/io/File;>;\n-           22      21     2 filesList   Ljava/util/List<Ljava/nio/file/Path;>;\n+            0      45     1 files   Ljava/lang/Iterable<Ljava/io/File;>;\n+           24      21     2 filesList   Ljava/util/List<Ljava/nio/file/Path;>;\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #171                         // (Ljava/io/File;Ljava/lang/Iterable<Ljava/io/File;>;)Ljava/nio/channels/SeekableByteChannel;\n+    Signature: #355                         // (Ljava/io/File;Ljava/lang/Iterable<Ljava/io/File;>;)Ljava/nio/channels/SeekableByteChannel;\n \n   public static java.nio.channels.SeekableByteChannel forPaths(java.nio.file.Path, java.lang.Iterable<java.nio.file.Path>) throws java.io.IOException;\n     descriptor: (Ljava/nio/file/Path;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_1\n-         1: ldc           #85                 // String paths\n-         3: invokestatic  #20                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-         6: pop\n-         7: aload_0\n-         8: ldc           #86                 // String lastSegmentPath\n-        10: invokestatic  #20                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-        13: pop\n-        14: new           #26                 // class java/util/ArrayList\n-        17: dup\n-        18: invokespecial #27                 // Method java/util/ArrayList.\"<init>\":()V\n-        21: astore_2\n-        22: aload_1\n-        23: aload_2\n-        24: dup\n-        25: invokestatic  #28                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n-        28: pop\n-        29: invokedynamic #87,  0             // InvokeDynamic #5:accept:(Ljava/util/List;)Ljava/util/function/Consumer;\n-        34: invokeinterface #30,  2           // InterfaceMethod java/lang/Iterable.forEach:(Ljava/util/function/Consumer;)V\n-        39: aload_2\n-        40: aload_0\n-        41: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-        46: pop\n-        47: aload_2\n-        48: getstatic     #74                 // Field EMPTY_PATH_ARRAY:[Ljava/nio/file/Path;\n-        51: invokeinterface #32,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-        56: checkcast     #75                 // class \"[Ljava/nio/file/Path;\"\n-        59: invokestatic  #76                 // Method forPaths:([Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n-        62: areturn\n+         1: ldc_w         #284                // String paths\n+         4: invokestatic  #68                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+         7: pop\n+         8: aload_0\n+         9: ldc_w         #286                // String lastSegmentPath\n+        12: invokestatic  #68                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+        15: pop\n+        16: new           #87                 // class java/util/ArrayList\n+        19: dup\n+        20: invokespecial #89                 // Method java/util/ArrayList.\"<init>\":()V\n+        23: astore_2\n+        24: aload_1\n+        25: aload_2\n+        26: dup\n+        27: invokestatic  #92                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n+        30: pop\n+        31: invokedynamic #288,  0            // InvokeDynamic #5:accept:(Ljava/util/List;)Ljava/util/function/Consumer;\n+        36: invokeinterface #99,  2           // InterfaceMethod java/lang/Iterable.forEach:(Ljava/util/function/Consumer;)V\n+        41: aload_2\n+        42: aload_0\n+        43: invokeinterface #105,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        48: pop\n+        49: aload_2\n+        50: getstatic     #253                // Field EMPTY_PATH_ARRAY:[Ljava/nio/file/Path;\n+        53: invokeinterface #108,  2          // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+        58: checkcast     #257                // class \"[Ljava/nio/file/Path;\"\n+        61: invokestatic  #258                // Method forPaths:([Ljava/nio/file/Path;)Ljava/nio/channels/SeekableByteChannel;\n+        64: areturn\n       LineNumberTable:\n         line 272: 0\n-        line 273: 7\n-        line 275: 14\n-        line 276: 22\n-        line 277: 39\n-        line 279: 47\n+        line 273: 8\n+        line 275: 16\n+        line 276: 24\n+        line 277: 41\n+        line 279: 49\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      63     0 lastSegmentPath   Ljava/nio/file/Path;\n-            0      63     1 paths   Ljava/lang/Iterable;\n-           22      41     2 filesList   Ljava/util/List;\n+            0      65     0 lastSegmentPath   Ljava/nio/file/Path;\n+            0      65     1 paths   Ljava/lang/Iterable;\n+           24      41     2 filesList   Ljava/util/List;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n-            0      63     1 paths   Ljava/lang/Iterable<Ljava/nio/file/Path;>;\n-           22      41     2 filesList   Ljava/util/List<Ljava/nio/file/Path;>;\n+            0      65     1 paths   Ljava/lang/Iterable<Ljava/nio/file/Path;>;\n+           24      41     2 filesList   Ljava/util/List<Ljava/nio/file/Path;>;\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #174                         // (Ljava/nio/file/Path;Ljava/lang/Iterable<Ljava/nio/file/Path;>;)Ljava/nio/channels/SeekableByteChannel;\n+    Signature: #357                         // (Ljava/nio/file/Path;Ljava/lang/Iterable<Ljava/nio/file/Path;>;)Ljava/nio/channels/SeekableByteChannel;\n \n   private static void lambda$forFiles$2(java.util.List, java.io.File);\n     descriptor: (Ljava/util/List;Ljava/io/File;)V\n     flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #34                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n-         5: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+         2: invokevirtual #116                // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         5: invokeinterface #105,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n         10: pop\n         11: return\n       LineNumberTable:\n         line 255: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      12     0 filesList   Ljava/util/List;\n@@ -1056,18 +1056,18 @@\n   private static boolean lambda$buildFromLastSplitSegment$1(java.util.regex.Pattern, java.nio.file.Path);\n     descriptor: (Ljava/util/regex/Pattern;Ljava/nio/file/Path;)Z\n     flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokeinterface #88,  1           // InterfaceMethod java/nio/file/Path.getFileName:()Ljava/nio/file/Path;\n-         7: invokeinterface #89,  1           // InterfaceMethod java/nio/file/Path.toString:()Ljava/lang/String;\n-        12: invokevirtual #90                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-        15: invokevirtual #91                 // Method java/util/regex/Matcher.matches:()Z\n+         2: invokeinterface #289,  1          // InterfaceMethod java/nio/file/Path.getFileName:()Ljava/nio/file/Path;\n+         7: invokeinterface #292,  1          // InterfaceMethod java/nio/file/Path.toString:()Ljava/lang/String;\n+        12: invokevirtual #293                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+        15: invokevirtual #297                // Method java/util/regex/Matcher.matches:()Z\n         18: ireturn\n       LineNumberTable:\n         line 189: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      19     0 pattern   Ljava/util/regex/Pattern;\n             0      19     1  path   Ljava/nio/file/Path;\n@@ -1075,64 +1075,64 @@\n   private static boolean lambda$buildFromLastSplitSegment$0(java.nio.file.Path);\n     descriptor: (Ljava/nio/file/Path;)Z\n     flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_0\n-         2: anewarray     #92                 // class java/nio/file/LinkOption\n-         5: invokestatic  #93                 // Method java/nio/file/Files.isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+         2: anewarray     #303                // class java/nio/file/LinkOption\n+         5: invokestatic  #305                // Method java/nio/file/Files.isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n          8: ireturn\n       LineNumberTable:\n         line 188: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0   x$0   Ljava/nio/file/Path;\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n          0: iconst_0\n-         1: anewarray     #94                 // class java/nio/file/Path\n-         4: putstatic     #74                 // Field EMPTY_PATH_ARRAY:[Ljava/nio/file/Path;\n+         1: anewarray     #148                // class java/nio/file/Path\n+         4: putstatic     #253                // Field EMPTY_PATH_ARRAY:[Ljava/nio/file/Path;\n          7: return\n       LineNumberTable:\n         line 52: 0\n }\n SourceFile: \"ZipSplitReadOnlySeekableByteChannel.java\"\n-InnerClasses:\n-  static #96;                             // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1\n-  private static #98= #62 of #2;          // ZipSplitSegmentComparator=class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator of class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-  public static final #405= #404 of #407; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #214 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  0: #369 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #215 (Ljava/lang/Object;)V\n-      #216 REF_invokeInterface java/util/List.add:(Ljava/lang/Object;)Z\n-      #217 (Ljava/nio/channels/SeekableByteChannel;)V\n-  1: #214 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #376 (Ljava/lang/Object;)V\n+      #378 REF_invokeInterface java/util/List.add:(Ljava/lang/Object;)Z\n+      #379 (Ljava/nio/channels/SeekableByteChannel;)V\n+  1: #369 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #251 (Ljava/lang/Object;)Z\n-      #252 REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$buildFromLastSplitSegment$0:(Ljava/nio/file/Path;)Z\n-      #253 (Ljava/nio/file/Path;)Z\n-  2: #214 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #381 (Ljava/lang/Object;)Z\n+      #382 REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$buildFromLastSplitSegment$0:(Ljava/nio/file/Path;)Z\n+      #385 (Ljava/nio/file/Path;)Z\n+  2: #369 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #251 (Ljava/lang/Object;)Z\n-      #256 REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$buildFromLastSplitSegment$1:(Ljava/util/regex/Pattern;Ljava/nio/file/Path;)Z\n-      #253 (Ljava/nio/file/Path;)Z\n-  3: #214 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #381 (Ljava/lang/Object;)Z\n+      #386 REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$buildFromLastSplitSegment$1:(Ljava/util/regex/Pattern;Ljava/nio/file/Path;)Z\n+      #385 (Ljava/nio/file/Path;)Z\n+  3: #369 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #261 ()Ljava/lang/Object;\n-      #262 REF_newInvokeSpecial java/util/ArrayList.\"<init>\":()V\n-      #263 ()Ljava/util/ArrayList;\n-  4: #214 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #389 ()Ljava/lang/Object;\n+      #391 REF_newInvokeSpecial java/util/ArrayList.\"<init>\":()V\n+      #392 ()Ljava/util/ArrayList;\n+  4: #369 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #215 (Ljava/lang/Object;)V\n-      #281 REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$forFiles$2:(Ljava/util/List;Ljava/io/File;)V\n-      #282 (Ljava/io/File;)V\n-  5: #214 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #376 (Ljava/lang/Object;)V\n+      #394 REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.lambda$forFiles$2:(Ljava/util/List;Ljava/io/File;)V\n+      #397 (Ljava/io/File;)V\n+  5: #369 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #215 (Ljava/lang/Object;)V\n-      #216 REF_invokeInterface java/util/List.add:(Ljava/lang/Object;)Z\n-      #283 (Ljava/nio/file/Path;)V\n+      #376 (Ljava/lang/Object;)V\n+      #378 REF_invokeInterface java/util/List.add:(Ljava/lang/Object;)Z\n+      #399 (Ljava/nio/file/Path;)V\n+InnerClasses:\n+  private static #402= #214 of #7;        // ZipSplitSegmentComparator=class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator of class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+  static #403;                            // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1\n+  public static final #409= #405 of #407; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
