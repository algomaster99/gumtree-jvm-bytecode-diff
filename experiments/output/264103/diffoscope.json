{"diffoscope-json-version": 1, "source1": "first/VMSVersioningFTPEntryParser.class", "source2": "second/VMSVersioningFTPEntryParser.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,12 +1,12 @@\n \n package org.apache.commons.net.ftp.parser;\n \n-import java.util.regex.Matcher;\n import java.util.regex.MatchResult;\n+import java.util.regex.Matcher;\n import java.util.ListIterator;\n import java.util.HashMap;\n import java.util.List;\n import java.util.regex.PatternSyntaxException;\n import org.apache.commons.net.ftp.FTPClientConfig;\n import java.util.regex.Pattern;\n \n@@ -15,61 +15,55 @@\n     private static final String PRE_PARSE_REGEX = \"(.*?);([0-9]+)\\\\s*.*\";\n     private final Pattern preparsePattern;\n     \n     public VMSVersioningFTPEntryParser() {\n         this(null);\n     }\n     \n-    public VMSVersioningFTPEntryParser(final FTPClientConfig config) {\n-        this.configure(config);\n+    public VMSVersioningFTPEntryParser(final FTPClientConfig ftpClientConfig) {\n+        this.configure(ftpClientConfig);\n         try {\n             this.preparsePattern = Pattern.compile(\"(.*?);([0-9]+)\\\\s*.*\");\n         }\n-        catch (final PatternSyntaxException pse) {\n+        catch (final PatternSyntaxException ex) {\n             throw new IllegalArgumentException(\"Unparseable regex supplied:  (.*?);([0-9]+)\\\\s*.*\");\n         }\n     }\n     \n     protected boolean isVersioning() {\n         return true;\n     }\n     \n-    public List<String> preParse(final List<String> original) {\n-        final HashMap<String, Integer> existingEntries = new HashMap<String, Integer>();\n-        final ListIterator<String> iter = original.listIterator();\n-        while (iter.hasNext()) {\n-            final String entry = ((String)iter.next()).trim();\n-            MatchResult result = null;\n-            final Matcher _preparse_matcher_ = this.preparsePattern.matcher(entry);\n-            if (_preparse_matcher_.matches()) {\n-                result = _preparse_matcher_.toMatchResult();\n-                final String name = result.group(1);\n-                final String version = result.group(2);\n-                final Integer nv = Integer.valueOf(version);\n-                final Integer existing = Integer.valueOf(existingEntries.get((Object)name));\n-                if (null != existing && nv < existing) {\n-                    iter.remove();\n+    public List<String> preParse(final List<String> list) {\n+        final HashMap hashMap = new HashMap();\n+        final ListIterator<String> listIterator = list.listIterator();\n+        while (listIterator.hasNext()) {\n+            final Matcher matcher = this.preparsePattern.matcher(((String)listIterator.next()).trim());\n+            if (matcher.matches()) {\n+                final MatchResult matchResult = matcher.toMatchResult();\n+                final String group = matchResult.group(1);\n+                final Integer value = Integer.valueOf(matchResult.group(2));\n+                final Integer n = Integer.valueOf(hashMap.get((Object)group));\n+                if (null != n && value < n) {\n+                    listIterator.remove();\n                 }\n                 else {\n-                    existingEntries.put(name, nv);\n+                    hashMap.put(group, value);\n                 }\n             }\n         }\n-        while (iter.hasPrevious()) {\n-            final String entry = ((String)iter.previous()).trim();\n-            MatchResult result = null;\n-            final Matcher _preparse_matcher_ = this.preparsePattern.matcher(entry);\n-            if (_preparse_matcher_.matches()) {\n-                result = _preparse_matcher_.toMatchResult();\n-                final String name = result.group(1);\n-                final String version = result.group(2);\n-                final int nv2 = Integer.parseInt(version);\n-                final Integer existing = Integer.valueOf(existingEntries.get((Object)name));\n-                if (null == existing || nv2 >= existing) {\n+        while (listIterator.hasPrevious()) {\n+            final Matcher matcher2 = this.preparsePattern.matcher(((String)listIterator.previous()).trim());\n+            if (matcher2.matches()) {\n+                final MatchResult matchResult2 = matcher2.toMatchResult();\n+                final String group2 = matchResult2.group(1);\n+                final int int1 = Integer.parseInt(matchResult2.group(2));\n+                final Integer n2 = Integer.valueOf(hashMap.get((Object)group2));\n+                if (null == n2 || int1 >= n2) {\n                     continue;\n                 }\n-                iter.remove();\n+                listIterator.remove();\n             }\n         }\n-        return original;\n+        return list;\n     }\n }\n"}]}
