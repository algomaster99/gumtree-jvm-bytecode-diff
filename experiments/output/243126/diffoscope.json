{"diffoscope-json-version": 1, "source1": "first/StackMapEntry.class", "source2": "second/StackMapEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -32,34 +32,34 @@\n             this.byteCodeOffset = dataInput.readUnsignedShort();\n         }\n         else if (this.frameType == 251) {\n             this.byteCodeOffset = dataInput.readUnsignedShort();\n         }\n         else if (this.frameType >= 252 && this.frameType <= 254) {\n             this.byteCodeOffset = dataInput.readUnsignedShort();\n-            final int numberOfLocals = this.frameType - 251;\n-            this.typesOfLocals = new StackMapType[numberOfLocals];\n-            for (int i = 0; i < numberOfLocals; ++i) {\n+            final int n = this.frameType - 251;\n+            this.typesOfLocals = new StackMapType[n];\n+            for (int i = 0; i < n; ++i) {\n                 this.typesOfLocals[i] = new StackMapType(dataInput, constantPool);\n             }\n         }\n         else {\n             if (this.frameType != 255) {\n                 throw new ClassFormatException(\"Invalid frame type found while parsing stack map table: \" + this.frameType);\n             }\n             this.byteCodeOffset = dataInput.readUnsignedShort();\n-            final int numberOfLocals = dataInput.readUnsignedShort();\n-            this.typesOfLocals = new StackMapType[numberOfLocals];\n-            for (int i = 0; i < numberOfLocals; ++i) {\n-                this.typesOfLocals[i] = new StackMapType(dataInput, constantPool);\n-            }\n-            final int numberOfStackItems = dataInput.readUnsignedShort();\n-            this.typesOfStackItems = new StackMapType[numberOfStackItems];\n-            for (int j = 0; j < numberOfStackItems; ++j) {\n-                this.typesOfStackItems[j] = new StackMapType(dataInput, constantPool);\n+            final int unsignedShort = dataInput.readUnsignedShort();\n+            this.typesOfLocals = new StackMapType[unsignedShort];\n+            for (int j = 0; j < unsignedShort; ++j) {\n+                this.typesOfLocals[j] = new StackMapType(dataInput, constantPool);\n+            }\n+            final int unsignedShort2 = dataInput.readUnsignedShort();\n+            this.typesOfStackItems = new StackMapType[unsignedShort2];\n+            for (int k = 0; k < unsignedShort2; ++k) {\n+                this.typesOfStackItems[k] = new StackMapType(dataInput, constantPool);\n             }\n         }\n     }\n     \n     @Deprecated\n     public StackMapEntry(final int byteCodeOffset, final int numberOfLocals, final StackMapType[] typesOfLocals, final int numberOfStackItems, final StackMapType[] typesOfStackItems, final ConstantPool constantPool) {\n         this.byteCodeOffset = byteCodeOffset;\n@@ -83,24 +83,24 @@\n     }\n     \n     public void accept(final Visitor v) {\n         v.visitStackMapEntry(this);\n     }\n     \n     public StackMapEntry copy() {\n-        StackMapEntry e;\n+        StackMapEntry stackMapEntry;\n         try {\n-            e = (StackMapEntry)this.clone();\n+            stackMapEntry = (StackMapEntry)this.clone();\n         }\n         catch (final CloneNotSupportedException ex) {\n             throw new Error(\"Clone Not Supported\");\n         }\n-        Arrays.setAll(e.typesOfLocals = new StackMapType[this.typesOfLocals.length], i -> this.typesOfLocals[i].copy());\n-        Arrays.setAll(e.typesOfStackItems = new StackMapType[this.typesOfStackItems.length], i -> this.typesOfStackItems[i].copy());\n-        return e;\n+        Arrays.setAll(stackMapEntry.typesOfLocals = new StackMapType[this.typesOfLocals.length], n2 -> this.typesOfLocals[n2].copy());\n+        Arrays.setAll(stackMapEntry.typesOfStackItems = new StackMapType[this.typesOfStackItems.length], n4 -> this.typesOfStackItems[n4].copy());\n+        return stackMapEntry;\n     }\n     \n     public void dump(final DataOutputStream file) throws IOException {\n         file.write(this.frameType);\n         if (this.frameType >= 64 && this.frameType <= 127) {\n             this.typesOfStackItems[0].dump(file);\n         }\n@@ -112,27 +112,30 @@\n             file.writeShort(this.byteCodeOffset);\n         }\n         else if (this.frameType == 251) {\n             file.writeShort(this.byteCodeOffset);\n         }\n         else if (this.frameType >= 252 && this.frameType <= 254) {\n             file.writeShort(this.byteCodeOffset);\n-            for (final StackMapType type : this.typesOfLocals) {\n-                type.dump(file);\n+            final StackMapType[] typesOfLocals = this.typesOfLocals;\n+            for (int length = typesOfLocals.length, i = 0; i < length; ++i) {\n+                typesOfLocals[i].dump(file);\n             }\n         }\n         else if (this.frameType == 255) {\n             file.writeShort(this.byteCodeOffset);\n             file.writeShort(this.typesOfLocals.length);\n-            for (final StackMapType type : this.typesOfLocals) {\n-                type.dump(file);\n+            final StackMapType[] typesOfLocals2 = this.typesOfLocals;\n+            for (int length2 = typesOfLocals2.length, j = 0; j < length2; ++j) {\n+                typesOfLocals2[j].dump(file);\n             }\n             file.writeShort(this.typesOfStackItems.length);\n-            for (final StackMapType type : this.typesOfStackItems) {\n-                type.dump(file);\n+            final StackMapType[] typesOfStackItems = this.typesOfStackItems;\n+            for (int length3 = typesOfStackItems.length, k = 0; k < length3; ++k) {\n+                typesOfStackItems[k].dump(file);\n             }\n         }\n         else if (this.frameType < 0 || this.frameType > 63) {\n             throw new ClassFormatException(\"Invalid Stack map table tag: \" + this.frameType);\n         }\n     }\n     \n@@ -158,31 +161,34 @@\n         if (this.frameType == 247) {\n             return 3 + (this.typesOfStackItems[0].hasIndex() ? 3 : 1);\n         }\n         if ((this.frameType >= 248 && this.frameType <= 250) || this.frameType == 251) {\n             return 3;\n         }\n         if (this.frameType >= 252 && this.frameType <= 254) {\n-            int len = 3;\n-            for (final StackMapType typesOfLocal : this.typesOfLocals) {\n-                len += (typesOfLocal.hasIndex() ? 3 : 1);\n+            int n = 3;\n+            final StackMapType[] typesOfLocals = this.typesOfLocals;\n+            for (int length = typesOfLocals.length, i = 0; i < length; ++i) {\n+                n += (typesOfLocals[i].hasIndex() ? 3 : 1);\n             }\n-            return len;\n+            return n;\n         }\n         if (this.frameType != 255) {\n             throw new IllegalStateException(\"Invalid StackMap frameType: \" + this.frameType);\n         }\n-        int len = 7;\n-        for (final StackMapType typesOfLocal : this.typesOfLocals) {\n-            len += (typesOfLocal.hasIndex() ? 3 : 1);\n-        }\n-        for (final StackMapType typesOfStackItem : this.typesOfStackItems) {\n-            len += (typesOfStackItem.hasIndex() ? 3 : 1);\n+        int n2 = 7;\n+        final StackMapType[] typesOfLocals2 = this.typesOfLocals;\n+        for (int length2 = typesOfLocals2.length, j = 0; j < length2; ++j) {\n+            n2 += (typesOfLocals2[j].hasIndex() ? 3 : 1);\n+        }\n+        final StackMapType[] typesOfStackItems = this.typesOfStackItems;\n+        for (int length3 = typesOfStackItems.length, k = 0; k < length3; ++k) {\n+            n2 += (typesOfStackItems[k].hasIndex() ? 3 : 1);\n         }\n-        return len;\n+        return n2;\n     }\n     \n     public int getNumberOfLocals() {\n         return this.typesOfLocals.length;\n     }\n     \n     public int getNumberOfStackItems() {\n@@ -258,63 +264,63 @@\n     \n     public void setTypesOfStackItems(final StackMapType[] types) {\n         this.typesOfStackItems = ((types != null) ? types : StackMapType.EMPTY_ARRAY);\n     }\n     \n     @Override\n     public String toString() {\n-        final StringBuilder buf = new StringBuilder(64);\n-        buf.append(\"(\");\n+        final StringBuilder sb = new StringBuilder(64);\n+        sb.append(\"(\");\n         if (this.frameType >= 0 && this.frameType <= 63) {\n-            buf.append(\"SAME\");\n+            sb.append(\"SAME\");\n         }\n         else if (this.frameType >= 64 && this.frameType <= 127) {\n-            buf.append(\"SAME_LOCALS_1_STACK\");\n+            sb.append(\"SAME_LOCALS_1_STACK\");\n         }\n         else if (this.frameType == 247) {\n-            buf.append(\"SAME_LOCALS_1_STACK_EXTENDED\");\n+            sb.append(\"SAME_LOCALS_1_STACK_EXTENDED\");\n         }\n         else if (this.frameType >= 248 && this.frameType <= 250) {\n-            buf.append(\"CHOP \").append(String.valueOf(251 - this.frameType));\n+            sb.append(\"CHOP \").append(String.valueOf(251 - this.frameType));\n         }\n         else if (this.frameType == 251) {\n-            buf.append(\"SAME_EXTENDED\");\n+            sb.append(\"SAME_EXTENDED\");\n         }\n         else if (this.frameType >= 252 && this.frameType <= 254) {\n-            buf.append(\"APPEND \").append(String.valueOf(this.frameType - 251));\n+            sb.append(\"APPEND \").append(String.valueOf(this.frameType - 251));\n         }\n         else if (this.frameType == 255) {\n-            buf.append(\"FULL\");\n+            sb.append(\"FULL\");\n         }\n         else {\n-            buf.append(\"UNKNOWN (\").append(this.frameType).append(\")\");\n+            sb.append(\"UNKNOWN (\").append(this.frameType).append(\")\");\n         }\n-        buf.append(\", offset delta=\").append(this.byteCodeOffset);\n+        sb.append(\", offset delta=\").append(this.byteCodeOffset);\n         if (this.typesOfLocals.length > 0) {\n-            buf.append(\", locals={\");\n+            sb.append(\", locals={\");\n             for (int i = 0; i < this.typesOfLocals.length; ++i) {\n-                buf.append(this.typesOfLocals[i]);\n+                sb.append(this.typesOfLocals[i]);\n                 if (i < this.typesOfLocals.length - 1) {\n-                    buf.append(\", \");\n+                    sb.append(\", \");\n                 }\n             }\n-            buf.append(\"}\");\n+            sb.append(\"}\");\n         }\n         if (this.typesOfStackItems.length > 0) {\n-            buf.append(\", stack items={\");\n-            for (int i = 0; i < this.typesOfStackItems.length; ++i) {\n-                buf.append(this.typesOfStackItems[i]);\n-                if (i < this.typesOfStackItems.length - 1) {\n-                    buf.append(\", \");\n+            sb.append(\", stack items={\");\n+            for (int j = 0; j < this.typesOfStackItems.length; ++j) {\n+                sb.append(this.typesOfStackItems[j]);\n+                if (j < this.typesOfStackItems.length - 1) {\n+                    sb.append(\", \");\n                 }\n             }\n-            buf.append(\"}\");\n+            sb.append(\"}\");\n         }\n-        buf.append(\")\");\n-        return buf.toString();\n+        sb.append(\")\");\n+        return sb.toString();\n     }\n     \n     public void updateByteCodeOffset(final int delta) {\n         this.setByteCodeOffset(this.byteCodeOffset + delta);\n     }\n     \n     static {\n"}]}
