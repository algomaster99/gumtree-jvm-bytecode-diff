{"diffoscope-json-version": 1, "source1": "first/StreamReadFeature.class", "source2": "second/StreamReadFeature.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,34 +1,36 @@\n \n package com.fasterxml.jackson.core;\n \n import com.fasterxml.jackson.core.util.JacksonFeature;\n \n public enum StreamReadFeature implements JacksonFeature\n {\n-    AUTO_CLOSE_SOURCE(JsonParser.Feature.AUTO_CLOSE_SOURCE), \n-    STRICT_DUPLICATE_DETECTION(JsonParser.Feature.STRICT_DUPLICATE_DETECTION), \n-    IGNORE_UNDEFINED(JsonParser.Feature.IGNORE_UNDEFINED), \n-    INCLUDE_SOURCE_IN_LOCATION(JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION), \n-    USE_FAST_DOUBLE_PARSER(JsonParser.Feature.USE_FAST_DOUBLE_PARSER), \n-    USE_FAST_BIG_NUMBER_PARSER(JsonParser.Feature.USE_FAST_BIG_NUMBER_PARSER);\n+    AUTO_CLOSE_SOURCE(\"AUTO_CLOSE_SOURCE\", 0, JsonParser.Feature.AUTO_CLOSE_SOURCE), \n+    STRICT_DUPLICATE_DETECTION(\"STRICT_DUPLICATE_DETECTION\", 1, JsonParser.Feature.STRICT_DUPLICATE_DETECTION), \n+    IGNORE_UNDEFINED(\"IGNORE_UNDEFINED\", 2, JsonParser.Feature.IGNORE_UNDEFINED), \n+    INCLUDE_SOURCE_IN_LOCATION(\"INCLUDE_SOURCE_IN_LOCATION\", 3, JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION), \n+    USE_FAST_DOUBLE_PARSER(\"USE_FAST_DOUBLE_PARSER\", 4, JsonParser.Feature.USE_FAST_DOUBLE_PARSER), \n+    USE_FAST_BIG_NUMBER_PARSER(\"USE_FAST_BIG_NUMBER_PARSER\", 5, JsonParser.Feature.USE_FAST_BIG_NUMBER_PARSER);\n     \n     private final boolean _defaultState;\n     private final int _mask;\n     private final JsonParser.Feature _mappedFeature;\n     \n-    private StreamReadFeature(final JsonParser.Feature mapTo) {\n+    private StreamReadFeature(final String name, final int ordinal, final JsonParser.Feature mapTo) {\n         this._mappedFeature = mapTo;\n         this._mask = mapTo.getMask();\n         this._defaultState = mapTo.enabledByDefault();\n     }\n     \n     public static int collectDefaults() {\n         int flags = 0;\n-        for (final StreamReadFeature f : values()) {\n+        StreamReadFeature[] values;\n+        for (int length = (values = values()).length, i = 0; i < length; ++i) {\n+            final StreamReadFeature f = values[i];\n             if (f.enabledByDefault()) {\n                 flags |= f.getMask();\n             }\n         }\n         return flags;\n     }\n     \n"}]}
