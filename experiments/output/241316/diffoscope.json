{"diffoscope-json-version": 1, "source1": "first/TFTPRequestPacket.class", "source2": "second/TFTPRequestPacket.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,90 +8,91 @@\n public abstract class TFTPRequestPacket extends TFTPPacket\n {\n     static final String[] modeStrings;\n     private static final byte[][] modeBytes;\n     private final int mode;\n     private final String fileName;\n     \n-    TFTPRequestPacket(final InetAddress destination, final int port, final int type, final String fileName, final int mode) {\n-        super(type, destination, port);\n+    TFTPRequestPacket(final InetAddress inetAddress, final int n, final int n2, final String fileName, final int mode) {\n+        super(n2, inetAddress, n);\n         this.fileName = fileName;\n         this.mode = mode;\n     }\n     \n-    TFTPRequestPacket(final int type, final DatagramPacket datagram) throws TFTPPacketException {\n-        super(type, datagram.getAddress(), datagram.getPort());\n-        final byte[] data = datagram.getData();\n+    TFTPRequestPacket(final int n, final DatagramPacket datagramPacket) throws TFTPPacketException {\n+        super(n, datagramPacket.getAddress(), datagramPacket.getPort());\n+        final byte[] data = datagramPacket.getData();\n         if (this.getType() != data[1]) {\n             throw new TFTPPacketException(\"TFTP operator code does not match type.\");\n         }\n-        final StringBuilder buffer = new StringBuilder();\n-        int index;\n+        final StringBuilder sb = new StringBuilder();\n+        int n2;\n         int length;\n-        for (index = 2, length = datagram.getLength(); index < length && data[index] != 0; ++index) {\n-            buffer.append((char)data[index]);\n+        for (n2 = 2, length = datagramPacket.getLength(); n2 < length && data[n2] != 0; ++n2) {\n+            sb.append((char)data[n2]);\n         }\n-        this.fileName = buffer.toString();\n-        if (index >= length) {\n+        this.fileName = sb.toString();\n+        if (n2 >= length) {\n             throw new TFTPPacketException(\"Bad file name and mode format.\");\n         }\n-        buffer.setLength();\n-        ++index;\n-        while (index < length && data[index] != 0) {\n-            buffer.append((char)data[index]);\n-            ++index;\n+        sb.setLength();\n+        ++n2;\n+        while (n2 < length && data[n2] != 0) {\n+            sb.append((char)data[n2]);\n+            ++n2;\n         }\n-        final String modeString = buffer.toString().toLowerCase(Locale.ENGLISH);\n-        length = TFTPRequestPacket.modeStrings.length;\n+        final String lowerCase = sb.toString().toLowerCase(Locale.ENGLISH);\n+        final int length2 = TFTPRequestPacket.modeStrings.length;\n         int mode = 0;\n-        for (index = 0; index < length; ++index) {\n-            if (modeString.equals(TFTPRequestPacket.modeStrings[index])) {\n-                mode = index;\n+        int i;\n+        for (i = 0; i < length2; ++i) {\n+            if (lowerCase.equals(TFTPRequestPacket.modeStrings[i])) {\n+                mode = i;\n                 break;\n             }\n         }\n         this.mode = mode;\n-        if (index >= length) {\n-            throw new TFTPPacketException(\"Unrecognized TFTP transfer mode: \" + modeString);\n+        if (i >= length2) {\n+            throw new TFTPPacketException(\"Unrecognized TFTP transfer mode: \" + lowerCase);\n         }\n     }\n     \n     public final String getFilename() {\n         return this.fileName;\n     }\n     \n     public final int getMode() {\n         return this.mode;\n     }\n     \n     public final DatagramPacket newDatagram() {\n-        final int fileLength = this.fileName.length();\n-        final int modeLength = TFTPRequestPacket.modeBytes[this.mode].length;\n-        final byte[] data = new byte[fileLength + modeLength + 4];\n-        data[0] = 0;\n-        data[1] = (byte)this.type;\n-        System.arraycopy(this.fileName.getBytes(), 0, data, 2, fileLength);\n-        data[fileLength + 2] = 0;\n-        System.arraycopy(TFTPRequestPacket.modeBytes[this.mode], 0, data, fileLength + 3, modeLength);\n-        return new DatagramPacket(data, data.length, this.address, this.port);\n+        final int length = this.fileName.length();\n+        final int length2 = TFTPRequestPacket.modeBytes[this.mode].length;\n+        final byte[] buf = new byte[length + length2 + 4];\n+        buf[0] = 0;\n+        buf[1] = (byte)this.type;\n+        System.arraycopy(this.fileName.getBytes(), 0, buf, 2, length);\n+        buf[length + 2] = 0;\n+        System.arraycopy(TFTPRequestPacket.modeBytes[this.mode], 0, buf, length + 3, length2);\n+        return new DatagramPacket(buf, buf.length, this.address, this.port);\n     }\n     \n-    final DatagramPacket newDatagram(final DatagramPacket datagram, final byte[] data) {\n-        final int fileLength = this.fileName.length();\n-        final int modeLength = TFTPRequestPacket.modeBytes[this.mode].length;\n+    final DatagramPacket newDatagram(final DatagramPacket datagramPacket, final byte[] data) {\n+        final int length = this.fileName.length();\n+        final int length2 = TFTPRequestPacket.modeBytes[this.mode].length;\n         data[0] = 0;\n         data[1] = (byte)this.type;\n-        System.arraycopy(this.fileName.getBytes(), 0, data, 2, fileLength);\n-        data[fileLength + 2] = 0;\n-        System.arraycopy(TFTPRequestPacket.modeBytes[this.mode], 0, data, fileLength + 3, modeLength);\n-        datagram.setAddress(this.address);\n-        datagram.setPort(this.port);\n-        datagram.setData(data);\n-        datagram.setLength(fileLength + modeLength + 3);\n-        return datagram;\n+        System.arraycopy(this.fileName.getBytes(), 0, data, 2, length);\n+        data[length + 2] = 0;\n+        System.arraycopy(TFTPRequestPacket.modeBytes[this.mode], 0, data, length + 3, length2);\n+        datagramPacket.setAddress(this.address);\n+        datagramPacket.setPort(this.port);\n+        datagramPacket.setData(data);\n+        datagramPacket.setLength(length + length2 + 3);\n+        return datagramPacket;\n     }\n     \n     static {\n         modeStrings = new String[] { \"netascii\", \"octet\" };\n         modeBytes = new byte[][] { { 110, 101, 116, 97, 115, 99, 105, 105, 0 }, { 111, 99, 116, 101, 116, 0 } };\n     }\n }\n"}]}
