{"diffoscope-json-version": 1, "source1": "first/Parameters$Builder.class", "source2": "second/Parameters$Builder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,15 +10,15 @@\n     private int maxLiteralLength;\n     private Integer niceBackReferenceLength;\n     private Integer maxCandidates;\n     private Integer lazyThreshold;\n     private Boolean lazyMatches;\n     \n     private Builder(final int windowSize) {\n-        if (windowSize < 2 || !Parameters.access$100(windowSize)) {\n+        if (windowSize < 2 || !Parameters.access$0(windowSize)) {\n             throw new IllegalArgumentException(\"windowSize must be a power of two\");\n         }\n         this.windowSize = windowSize;\n         this.minBackReferenceLength = 3;\n         this.maxBackReferenceLength = windowSize - 1;\n         this.maxOffset = windowSize - 1;\n         this.maxLiteralLength = windowSize;\n@@ -88,10 +88,10 @@\n     }\n     \n     public Parameters build() {\n         final int niceLen = (this.niceBackReferenceLength != null) ? ((int)this.niceBackReferenceLength) : Math.max(this.minBackReferenceLength, this.maxBackReferenceLength / 2);\n         final int candidates = (this.maxCandidates != null) ? ((int)this.maxCandidates) : Math.max(256, this.windowSize / 128);\n         final boolean lazy = this.lazyMatches == null || this.lazyMatches;\n         final int threshold = lazy ? ((this.lazyThreshold != null) ? ((int)this.lazyThreshold) : niceLen) : this.minBackReferenceLength;\n-        return new Parameters(this.windowSize, this.minBackReferenceLength, this.maxBackReferenceLength, this.maxOffset, this.maxLiteralLength, niceLen, candidates, lazy, threshold, (Parameters.Parameters$1)null);\n+        return new Parameters(this.windowSize, this.minBackReferenceLength, this.maxBackReferenceLength, this.maxOffset, this.maxLiteralLength, niceLen, candidates, lazy, threshold, (Parameters)null);\n     }\n }\n"}]}
