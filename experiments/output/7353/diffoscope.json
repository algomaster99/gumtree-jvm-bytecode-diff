{"diffoscope-json-version": 1, "source1": "first/JSONML.class", "source2": "second/JSONML.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,105 +1,105 @@\n-  SHA-256 checksum 372739cf28edd5c6265fd08ae381707bbb640caff299e23aafafb28e196c6d6f\n+  SHA-256 checksum 37fe78efbf5bbf8395c136988a252d2d1f86d7cbefabac92ba24d4ca634e4c63\n   Compiled from \"JSONML.java\"\n public class org.json.JSONML\n   minor version: 0\n   major version: 50\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #87                         // org/json/JSONML\n   super_class: #88                        // java/lang/Object\n   interfaces: 0, fields: 0, methods: 17, attributes: 1\n Constant pool:\n-    #1 = Methodref          #88.#159      // java/lang/Object.\"<init>\":()V\n-    #2 = Fieldref           #160.#161     // org/json/JSONMLParserConfiguration.KEEP_STRINGS:Lorg/json/JSONMLParserConfiguration;\n-    #3 = Fieldref           #160.#162     // org/json/JSONMLParserConfiguration.ORIGINAL:Lorg/json/JSONMLParserConfiguration;\n-    #4 = Methodref          #87.#163      // org/json/JSONML.parse:(Lorg/json/XMLTokener;ZLorg/json/JSONArray;Lorg/json/JSONMLParserConfiguration;I)Ljava/lang/Object;\n-    #5 = Methodref          #67.#164      // org/json/XMLTokener.more:()Z\n-    #6 = String             #165          // Bad XML\n-    #7 = Methodref          #67.#166      // org/json/XMLTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-    #8 = Methodref          #67.#167      // org/json/XMLTokener.nextContent:()Ljava/lang/Object;\n-    #9 = Fieldref           #168.#169     // org/json/XML.LT:Ljava/lang/Character;\n-   #10 = Methodref          #67.#170      // org/json/XMLTokener.nextToken:()Ljava/lang/Object;\n-   #11 = Class              #171          // java/lang/Character\n-   #12 = Fieldref           #168.#172     // org/json/XML.SLASH:Ljava/lang/Character;\n-   #13 = Class              #173          // java/lang/String\n-   #14 = Class              #174          // org/json/JSONException\n-   #15 = Class              #175          // java/lang/StringBuilder\n-   #16 = Methodref          #15.#159      // java/lang/StringBuilder.\"<init>\":()V\n-   #17 = String             #176          // Expected a closing name instead of \\'\n-   #18 = Methodref          #15.#177      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #19 = Methodref          #15.#178      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #20 = String             #179          // \\'.\n-   #21 = Methodref          #15.#180      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #22 = Methodref          #14.#181      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n-   #23 = Fieldref           #168.#182     // org/json/XML.GT:Ljava/lang/Character;\n-   #24 = String             #183          // Misshaped close tag\n-   #25 = Fieldref           #168.#184     // org/json/XML.BANG:Ljava/lang/Character;\n-   #26 = Methodref          #67.#185      // org/json/XMLTokener.next:()C\n-   #27 = String             #186          // -->\n-   #28 = Methodref          #67.#187      // org/json/XMLTokener.skipPast:(Ljava/lang/String;)V\n-   #29 = Methodref          #67.#188      // org/json/XMLTokener.back:()V\n-   #30 = String             #189          // CDATA\n-   #31 = Methodref          #88.#190      // java/lang/Object.equals:(Ljava/lang/Object;)Z\n-   #32 = Methodref          #67.#191      // org/json/XMLTokener.nextCDATA:()Ljava/lang/String;\n-   #33 = Methodref          #41.#192      // org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n-   #34 = String             #193          // Expected \\'CDATA[\\'\n-   #35 = Methodref          #67.#194      // org/json/XMLTokener.nextMeta:()Ljava/lang/Object;\n-   #36 = String             #195          // Missing \\'>\\' after \\'<!\\'.\n-   #37 = Fieldref           #168.#196     // org/json/XML.QUEST:Ljava/lang/Character;\n-   #38 = String             #197          // ?>\n-   #39 = String             #198          // Misshaped tag\n-   #40 = String             #199          // Bad tagName \\'\n-   #41 = Class              #200          // org/json/JSONArray\n-   #42 = Methodref          #41.#159      // org/json/JSONArray.\"<init>\":()V\n-   #43 = Class              #201          // org/json/JSONObject\n-   #44 = Methodref          #43.#159      // org/json/JSONObject.\"<init>\":()V\n-   #45 = String             #126          // tagName\n-   #46 = Methodref          #43.#202      // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #47 = Methodref          #13.#190      // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #48 = String             #203          // childNode\n-   #49 = String             #204          // Reserved attribute.\n-   #50 = Fieldref           #168.#205     // org/json/XML.EQ:Ljava/lang/Character;\n-   #51 = String             #206          // Missing value\n-   #52 = Methodref          #160.#207     // org/json/JSONMLParserConfiguration.isKeepStrings:()Z\n-   #53 = Methodref          #168.#208     // org/json/XML.stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n-   #54 = Methodref          #43.#209      // org/json/JSONObject.accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #55 = String             #210          //\n-   #56 = Methodref          #43.#211      // org/json/JSONObject.length:()I\n-   #57 = Methodref          #160.#212     // org/json/JSONMLParserConfiguration.getMaxNestingDepth:()I\n-   #58 = String             #213          // Maximum nesting depth of\n-   #59 = Methodref          #15.#214      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #60 = String             #215          //  reached\n-   #61 = String             #216          // Mismatched \\'\n-   #62 = String             #217          // \\' and \\'\n-   #63 = String             #218          // \\'\n-   #64 = Methodref          #41.#211      // org/json/JSONArray.length:()I\n-   #65 = String             #219          // childNodes\n-   #66 = Methodref          #168.#220     // org/json/XML.unescape:(Ljava/lang/String;)Ljava/lang/String;\n-   #67 = Class              #221          // org/json/XMLTokener\n-   #68 = Methodref          #67.#181      // org/json/XMLTokener.\"<init>\":(Ljava/lang/String;)V\n-   #69 = Methodref          #87.#222      // org/json/JSONML.parse:(Lorg/json/XMLTokener;ZLorg/json/JSONArray;ZI)Ljava/lang/Object;\n-   #70 = Methodref          #41.#223      // org/json/JSONArray.getString:(I)Ljava/lang/String;\n-   #71 = Methodref          #168.#224     // org/json/XML.noSpace:(Ljava/lang/String;)V\n-   #72 = Methodref          #168.#225     // org/json/XML.escape:(Ljava/lang/String;)Ljava/lang/String;\n-   #73 = Methodref          #15.#226      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-   #74 = Methodref          #41.#227      // org/json/JSONArray.opt:(I)Ljava/lang/Object;\n-   #75 = Methodref          #43.#228      // org/json/JSONObject.keySet:()Ljava/util/Set;\n-   #76 = InterfaceMethodref #229.#230     // java/util/Set.iterator:()Ljava/util/Iterator;\n-   #77 = InterfaceMethodref #231.#232     // java/util/Iterator.hasNext:()Z\n-   #78 = InterfaceMethodref #231.#233     // java/util/Iterator.next:()Ljava/lang/Object;\n-   #79 = Methodref          #43.#234      // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n-   #80 = Methodref          #88.#180      // java/lang/Object.toString:()Ljava/lang/String;\n-   #81 = Methodref          #41.#235      // org/json/JSONArray.get:(I)Ljava/lang/Object;\n-   #82 = Methodref          #87.#236      // org/json/JSONML.toString:(Lorg/json/JSONObject;)Ljava/lang/String;\n-   #83 = Methodref          #87.#237      // org/json/JSONML.toString:(Lorg/json/JSONArray;)Ljava/lang/String;\n-   #84 = Methodref          #43.#238      // org/json/JSONObject.optString:(Ljava/lang/String;)Ljava/lang/String;\n-   #85 = Methodref          #43.#180      // org/json/JSONObject.toString:()Ljava/lang/String;\n-   #86 = Methodref          #43.#239      // org/json/JSONObject.optJSONArray:(Ljava/lang/String;)Lorg/json/JSONArray;\n-   #87 = Class              #240          // org/json/JSONML\n-   #88 = Class              #241          // java/lang/Object\n+    #1 = Methodref          #88.#153      // java/lang/Object.\"<init>\":()V\n+    #2 = Fieldref           #108.#154     // org/json/JSONMLParserConfiguration.KEEP_STRINGS:Lorg/json/JSONMLParserConfiguration;\n+    #3 = Fieldref           #108.#155     // org/json/JSONMLParserConfiguration.ORIGINAL:Lorg/json/JSONMLParserConfiguration;\n+    #4 = Methodref          #87.#156      // org/json/JSONML.parse:(Lorg/json/XMLTokener;ZLorg/json/JSONArray;Lorg/json/JSONMLParserConfiguration;I)Ljava/lang/Object;\n+    #5 = Methodref          #67.#157      // org/json/XMLTokener.more:()Z\n+    #6 = String             #158          // Bad XML\n+    #7 = Methodref          #67.#159      // org/json/XMLTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+    #8 = Methodref          #67.#160      // org/json/XMLTokener.nextContent:()Ljava/lang/Object;\n+    #9 = Fieldref           #161.#162     // org/json/XML.LT:Ljava/lang/Character;\n+   #10 = Methodref          #67.#163      // org/json/XMLTokener.nextToken:()Ljava/lang/Object;\n+   #11 = Class              #164          // java/lang/Character\n+   #12 = Fieldref           #161.#165     // org/json/XML.SLASH:Ljava/lang/Character;\n+   #13 = Class              #166          // java/lang/String\n+   #14 = Class              #167          // org/json/JSONException\n+   #15 = Class              #168          // java/lang/StringBuilder\n+   #16 = Methodref          #15.#153      // java/lang/StringBuilder.\"<init>\":()V\n+   #17 = String             #169          // Expected a closing name instead of \\'\n+   #18 = Methodref          #15.#170      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #19 = Methodref          #15.#171      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #20 = String             #172          // \\'.\n+   #21 = Methodref          #15.#173      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #22 = Methodref          #14.#174      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n+   #23 = Fieldref           #161.#175     // org/json/XML.GT:Ljava/lang/Character;\n+   #24 = String             #176          // Misshaped close tag\n+   #25 = Fieldref           #161.#177     // org/json/XML.BANG:Ljava/lang/Character;\n+   #26 = Methodref          #67.#178      // org/json/XMLTokener.next:()C\n+   #27 = String             #179          // -->\n+   #28 = Methodref          #67.#180      // org/json/XMLTokener.skipPast:(Ljava/lang/String;)V\n+   #29 = Methodref          #67.#181      // org/json/XMLTokener.back:()V\n+   #30 = String             #182          // CDATA\n+   #31 = Methodref          #88.#183      // java/lang/Object.equals:(Ljava/lang/Object;)Z\n+   #32 = Methodref          #67.#184      // org/json/XMLTokener.nextCDATA:()Ljava/lang/String;\n+   #33 = Methodref          #41.#185      // org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n+   #34 = String             #186          // Expected \\'CDATA[\\'\n+   #35 = Methodref          #67.#187      // org/json/XMLTokener.nextMeta:()Ljava/lang/Object;\n+   #36 = String             #188          // Missing \\'>\\' after \\'<!\\'.\n+   #37 = Fieldref           #161.#189     // org/json/XML.QUEST:Ljava/lang/Character;\n+   #38 = String             #190          // ?>\n+   #39 = String             #191          // Misshaped tag\n+   #40 = String             #192          // Bad tagName \\'\n+   #41 = Class              #193          // org/json/JSONArray\n+   #42 = Methodref          #41.#153      // org/json/JSONArray.\"<init>\":()V\n+   #43 = Class              #194          // org/json/JSONObject\n+   #44 = Methodref          #43.#153      // org/json/JSONObject.\"<init>\":()V\n+   #45 = String             #124          // tagName\n+   #46 = Methodref          #43.#195      // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #47 = Methodref          #13.#183      // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #48 = String             #196          // childNode\n+   #49 = String             #197          // Reserved attribute.\n+   #50 = Fieldref           #161.#198     // org/json/XML.EQ:Ljava/lang/Character;\n+   #51 = String             #199          // Missing value\n+   #52 = Methodref          #108.#200     // org/json/JSONMLParserConfiguration.isKeepStrings:()Z\n+   #53 = Methodref          #161.#201     // org/json/XML.stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n+   #54 = Methodref          #43.#202      // org/json/JSONObject.accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #55 = String             #203          //\n+   #56 = Methodref          #43.#204      // org/json/JSONObject.length:()I\n+   #57 = Methodref          #108.#205     // org/json/JSONMLParserConfiguration.getMaxNestingDepth:()I\n+   #58 = String             #206          // Maximum nesting depth of\n+   #59 = Methodref          #15.#207      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #60 = String             #208          //  reached\n+   #61 = String             #209          // Mismatched \\'\n+   #62 = String             #210          // \\' and \\'\n+   #63 = String             #211          // \\'\n+   #64 = Methodref          #41.#204      // org/json/JSONArray.length:()I\n+   #65 = String             #212          // childNodes\n+   #66 = Methodref          #161.#213     // org/json/XML.unescape:(Ljava/lang/String;)Ljava/lang/String;\n+   #67 = Class              #214          // org/json/XMLTokener\n+   #68 = Methodref          #67.#174      // org/json/XMLTokener.\"<init>\":(Ljava/lang/String;)V\n+   #69 = Methodref          #87.#215      // org/json/JSONML.parse:(Lorg/json/XMLTokener;ZLorg/json/JSONArray;ZI)Ljava/lang/Object;\n+   #70 = Methodref          #41.#216      // org/json/JSONArray.getString:(I)Ljava/lang/String;\n+   #71 = Methodref          #161.#217     // org/json/XML.noSpace:(Ljava/lang/String;)V\n+   #72 = Methodref          #161.#218     // org/json/XML.escape:(Ljava/lang/String;)Ljava/lang/String;\n+   #73 = Methodref          #15.#219      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+   #74 = Methodref          #41.#220      // org/json/JSONArray.opt:(I)Ljava/lang/Object;\n+   #75 = Methodref          #43.#221      // org/json/JSONObject.keySet:()Ljava/util/Set;\n+   #76 = InterfaceMethodref #222.#223     // java/util/Set.iterator:()Ljava/util/Iterator;\n+   #77 = InterfaceMethodref #149.#224     // java/util/Iterator.hasNext:()Z\n+   #78 = InterfaceMethodref #149.#225     // java/util/Iterator.next:()Ljava/lang/Object;\n+   #79 = Methodref          #43.#226      // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n+   #80 = Methodref          #88.#173      // java/lang/Object.toString:()Ljava/lang/String;\n+   #81 = Methodref          #41.#227      // org/json/JSONArray.get:(I)Ljava/lang/Object;\n+   #82 = Methodref          #87.#228      // org/json/JSONML.toString:(Lorg/json/JSONObject;)Ljava/lang/String;\n+   #83 = Methodref          #87.#229      // org/json/JSONML.toString:(Lorg/json/JSONArray;)Ljava/lang/String;\n+   #84 = Methodref          #43.#230      // org/json/JSONObject.optString:(Ljava/lang/String;)Ljava/lang/String;\n+   #85 = Methodref          #43.#173      // org/json/JSONObject.toString:()Ljava/lang/String;\n+   #86 = Methodref          #43.#231      // org/json/JSONObject.optJSONArray:(Ljava/lang/String;)Lorg/json/JSONArray;\n+   #87 = Class              #232          // org/json/JSONML\n+   #88 = Class              #233          // java/lang/Object\n    #89 = Utf8               <init>\n    #90 = Utf8               ()V\n    #91 = Utf8               Code\n    #92 = Utf8               LineNumberTable\n    #93 = Utf8               LocalVariableTable\n    #94 = Utf8               this\n    #95 = Utf8               Lorg/json/JSONML;\n@@ -111,208 +111,200 @@\n   #101 = Utf8               Z\n   #102 = Utf8               ja\n   #103 = Utf8               Lorg/json/JSONArray;\n   #104 = Utf8               keepStrings\n   #105 = Utf8               currentNestingDepth\n   #106 = Utf8               I\n   #107 = Utf8               StackMapTable\n-  #108 = Class              #221          // org/json/XMLTokener\n-  #109 = Class              #200          // org/json/JSONArray\n-  #110 = Class              #242          // org/json/JSONMLParserConfiguration\n-  #111 = Utf8               Exceptions\n-  #112 = Utf8               (Lorg/json/XMLTokener;ZLorg/json/JSONArray;Lorg/json/JSONMLParserConfiguration;I)Ljava/lang/Object;\n-  #113 = Utf8               c\n-  #114 = Utf8               C\n-  #115 = Utf8               i\n-  #116 = Utf8               attribute\n-  #117 = Utf8               Ljava/lang/String;\n-  #118 = Utf8               config\n-  #119 = Utf8               Lorg/json/JSONMLParserConfiguration;\n-  #120 = Utf8               closeTag\n-  #121 = Utf8               newja\n-  #122 = Utf8               newjo\n-  #123 = Utf8               Lorg/json/JSONObject;\n-  #124 = Utf8               token\n-  #125 = Utf8               Ljava/lang/Object;\n-  #126 = Utf8               tagName\n-  #127 = Class              #173          // java/lang/String\n-  #128 = Class              #201          // org/json/JSONObject\n-  #129 = Class              #241          // java/lang/Object\n-  #130 = Utf8               toJSONArray\n-  #131 = Utf8               (Ljava/lang/String;)Lorg/json/JSONArray;\n-  #132 = Utf8               string\n-  #133 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONArray;\n-  #134 = Utf8               (Ljava/lang/String;Lorg/json/JSONMLParserConfiguration;)Lorg/json/JSONArray;\n-  #135 = Utf8               (Lorg/json/XMLTokener;Lorg/json/JSONMLParserConfiguration;)Lorg/json/JSONArray;\n-  #136 = Utf8               (Lorg/json/XMLTokener;Z)Lorg/json/JSONArray;\n-  #137 = Utf8               (Lorg/json/XMLTokener;)Lorg/json/JSONArray;\n-  #138 = Utf8               toJSONObject\n-  #139 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n-  #140 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n-  #141 = Utf8               (Ljava/lang/String;Lorg/json/JSONMLParserConfiguration;)Lorg/json/JSONObject;\n-  #142 = Utf8               (Lorg/json/XMLTokener;)Lorg/json/JSONObject;\n-  #143 = Utf8               (Lorg/json/XMLTokener;Z)Lorg/json/JSONObject;\n-  #144 = Utf8               (Lorg/json/XMLTokener;Lorg/json/JSONMLParserConfiguration;)Lorg/json/JSONObject;\n-  #145 = Utf8               toString\n-  #146 = Utf8               (Lorg/json/JSONArray;)Ljava/lang/String;\n-  #147 = Utf8               value\n-  #148 = Utf8               key\n-  #149 = Utf8               jo\n-  #150 = Utf8               length\n-  #151 = Utf8               object\n-  #152 = Utf8               sb\n-  #153 = Utf8               Ljava/lang/StringBuilder;\n-  #154 = Class              #175          // java/lang/StringBuilder\n-  #155 = Class              #243          // java/util/Iterator\n-  #156 = Utf8               (Lorg/json/JSONObject;)Ljava/lang/String;\n-  #157 = Utf8               SourceFile\n-  #158 = Utf8               JSONML.java\n-  #159 = NameAndType        #89:#90       // \"<init>\":()V\n-  #160 = Class              #242          // org/json/JSONMLParserConfiguration\n-  #161 = NameAndType        #244:#119     // KEEP_STRINGS:Lorg/json/JSONMLParserConfiguration;\n-  #162 = NameAndType        #245:#119     // ORIGINAL:Lorg/json/JSONMLParserConfiguration;\n-  #163 = NameAndType        #96:#112      // parse:(Lorg/json/XMLTokener;ZLorg/json/JSONArray;Lorg/json/JSONMLParserConfiguration;I)Ljava/lang/Object;\n-  #164 = NameAndType        #246:#247     // more:()Z\n-  #165 = Utf8               Bad XML\n-  #166 = NameAndType        #248:#249     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-  #167 = NameAndType        #250:#251     // nextContent:()Ljava/lang/Object;\n-  #168 = Class              #252          // org/json/XML\n-  #169 = NameAndType        #253:#254     // LT:Ljava/lang/Character;\n-  #170 = NameAndType        #255:#251     // nextToken:()Ljava/lang/Object;\n-  #171 = Utf8               java/lang/Character\n-  #172 = NameAndType        #256:#254     // SLASH:Ljava/lang/Character;\n-  #173 = Utf8               java/lang/String\n-  #174 = Utf8               org/json/JSONException\n-  #175 = Utf8               java/lang/StringBuilder\n-  #176 = Utf8               Expected a closing name instead of \\'\n-  #177 = NameAndType        #257:#258     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #178 = NameAndType        #257:#259     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #179 = Utf8               \\'.\n-  #180 = NameAndType        #145:#260     // toString:()Ljava/lang/String;\n-  #181 = NameAndType        #89:#261      // \"<init>\":(Ljava/lang/String;)V\n-  #182 = NameAndType        #262:#254     // GT:Ljava/lang/Character;\n-  #183 = Utf8               Misshaped close tag\n-  #184 = NameAndType        #263:#254     // BANG:Ljava/lang/Character;\n-  #185 = NameAndType        #264:#265     // next:()C\n-  #186 = Utf8               -->\n-  #187 = NameAndType        #266:#261     // skipPast:(Ljava/lang/String;)V\n-  #188 = NameAndType        #267:#90      // back:()V\n-  #189 = Utf8               CDATA\n-  #190 = NameAndType        #268:#269     // equals:(Ljava/lang/Object;)Z\n-  #191 = NameAndType        #270:#260     // nextCDATA:()Ljava/lang/String;\n-  #192 = NameAndType        #271:#272     // put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n-  #193 = Utf8               Expected \\'CDATA[\\'\n-  #194 = NameAndType        #273:#251     // nextMeta:()Ljava/lang/Object;\n-  #195 = Utf8               Missing \\'>\\' after \\'<!\\'.\n-  #196 = NameAndType        #274:#254     // QUEST:Ljava/lang/Character;\n-  #197 = Utf8               ?>\n-  #198 = Utf8               Misshaped tag\n-  #199 = Utf8               Bad tagName \\'\n-  #200 = Utf8               org/json/JSONArray\n-  #201 = Utf8               org/json/JSONObject\n-  #202 = NameAndType        #271:#275     // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #203 = Utf8               childNode\n-  #204 = Utf8               Reserved attribute.\n-  #205 = NameAndType        #276:#254     // EQ:Ljava/lang/Character;\n-  #206 = Utf8               Missing value\n-  #207 = NameAndType        #277:#247     // isKeepStrings:()Z\n-  #208 = NameAndType        #278:#279     // stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n-  #209 = NameAndType        #280:#275     // accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #210 = Utf8\n-  #211 = NameAndType        #150:#281     // length:()I\n-  #212 = NameAndType        #282:#281     // getMaxNestingDepth:()I\n-  #213 = Utf8               Maximum nesting depth of\n-  #214 = NameAndType        #257:#283     // append:(I)Ljava/lang/StringBuilder;\n-  #215 = Utf8                reached\n-  #216 = Utf8               Mismatched \\'\n-  #217 = Utf8               \\' and \\'\n-  #218 = Utf8               \\'\n-  #219 = Utf8               childNodes\n-  #220 = NameAndType        #284:#285     // unescape:(Ljava/lang/String;)Ljava/lang/String;\n-  #221 = Utf8               org/json/XMLTokener\n-  #222 = NameAndType        #96:#97       // parse:(Lorg/json/XMLTokener;ZLorg/json/JSONArray;ZI)Ljava/lang/Object;\n-  #223 = NameAndType        #286:#287     // getString:(I)Ljava/lang/String;\n-  #224 = NameAndType        #288:#261     // noSpace:(Ljava/lang/String;)V\n-  #225 = NameAndType        #289:#285     // escape:(Ljava/lang/String;)Ljava/lang/String;\n-  #226 = NameAndType        #257:#290     // append:(C)Ljava/lang/StringBuilder;\n-  #227 = NameAndType        #291:#292     // opt:(I)Ljava/lang/Object;\n-  #228 = NameAndType        #293:#294     // keySet:()Ljava/util/Set;\n-  #229 = Class              #295          // java/util/Set\n-  #230 = NameAndType        #296:#297     // iterator:()Ljava/util/Iterator;\n-  #231 = Class              #243          // java/util/Iterator\n-  #232 = NameAndType        #298:#247     // hasNext:()Z\n-  #233 = NameAndType        #264:#251     // next:()Ljava/lang/Object;\n-  #234 = NameAndType        #291:#279     // opt:(Ljava/lang/String;)Ljava/lang/Object;\n-  #235 = NameAndType        #299:#292     // get:(I)Ljava/lang/Object;\n-  #236 = NameAndType        #145:#156     // toString:(Lorg/json/JSONObject;)Ljava/lang/String;\n-  #237 = NameAndType        #145:#146     // toString:(Lorg/json/JSONArray;)Ljava/lang/String;\n-  #238 = NameAndType        #300:#285     // optString:(Ljava/lang/String;)Ljava/lang/String;\n-  #239 = NameAndType        #301:#131     // optJSONArray:(Ljava/lang/String;)Lorg/json/JSONArray;\n-  #240 = Utf8               org/json/JSONML\n-  #241 = Utf8               java/lang/Object\n-  #242 = Utf8               org/json/JSONMLParserConfiguration\n-  #243 = Utf8               java/util/Iterator\n-  #244 = Utf8               KEEP_STRINGS\n-  #245 = Utf8               ORIGINAL\n-  #246 = Utf8               more\n-  #247 = Utf8               ()Z\n-  #248 = Utf8               syntaxError\n-  #249 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n-  #250 = Utf8               nextContent\n-  #251 = Utf8               ()Ljava/lang/Object;\n-  #252 = Utf8               org/json/XML\n-  #253 = Utf8               LT\n-  #254 = Utf8               Ljava/lang/Character;\n-  #255 = Utf8               nextToken\n-  #256 = Utf8               SLASH\n-  #257 = Utf8               append\n-  #258 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #259 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #260 = Utf8               ()Ljava/lang/String;\n-  #261 = Utf8               (Ljava/lang/String;)V\n-  #262 = Utf8               GT\n-  #263 = Utf8               BANG\n-  #264 = Utf8               next\n-  #265 = Utf8               ()C\n-  #266 = Utf8               skipPast\n-  #267 = Utf8               back\n-  #268 = Utf8               equals\n-  #269 = Utf8               (Ljava/lang/Object;)Z\n-  #270 = Utf8               nextCDATA\n-  #271 = Utf8               put\n-  #272 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONArray;\n-  #273 = Utf8               nextMeta\n-  #274 = Utf8               QUEST\n-  #275 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #276 = Utf8               EQ\n-  #277 = Utf8               isKeepStrings\n-  #278 = Utf8               stringToValue\n-  #279 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n-  #280 = Utf8               accumulate\n-  #281 = Utf8               ()I\n-  #282 = Utf8               getMaxNestingDepth\n-  #283 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #284 = Utf8               unescape\n-  #285 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #286 = Utf8               getString\n-  #287 = Utf8               (I)Ljava/lang/String;\n-  #288 = Utf8               noSpace\n-  #289 = Utf8               escape\n-  #290 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #291 = Utf8               opt\n-  #292 = Utf8               (I)Ljava/lang/Object;\n-  #293 = Utf8               keySet\n-  #294 = Utf8               ()Ljava/util/Set;\n-  #295 = Utf8               java/util/Set\n-  #296 = Utf8               iterator\n-  #297 = Utf8               ()Ljava/util/Iterator;\n-  #298 = Utf8               hasNext\n-  #299 = Utf8               get\n-  #300 = Utf8               optString\n-  #301 = Utf8               optJSONArray\n+  #108 = Class              #234          // org/json/JSONMLParserConfiguration\n+  #109 = Utf8               Exceptions\n+  #110 = Utf8               (Lorg/json/XMLTokener;ZLorg/json/JSONArray;Lorg/json/JSONMLParserConfiguration;I)Ljava/lang/Object;\n+  #111 = Utf8               c\n+  #112 = Utf8               C\n+  #113 = Utf8               i\n+  #114 = Utf8               attribute\n+  #115 = Utf8               Ljava/lang/String;\n+  #116 = Utf8               config\n+  #117 = Utf8               Lorg/json/JSONMLParserConfiguration;\n+  #118 = Utf8               closeTag\n+  #119 = Utf8               newja\n+  #120 = Utf8               newjo\n+  #121 = Utf8               Lorg/json/JSONObject;\n+  #122 = Utf8               token\n+  #123 = Utf8               Ljava/lang/Object;\n+  #124 = Utf8               tagName\n+  #125 = Utf8               toJSONArray\n+  #126 = Utf8               (Ljava/lang/String;)Lorg/json/JSONArray;\n+  #127 = Utf8               string\n+  #128 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONArray;\n+  #129 = Utf8               (Ljava/lang/String;Lorg/json/JSONMLParserConfiguration;)Lorg/json/JSONArray;\n+  #130 = Utf8               (Lorg/json/XMLTokener;Lorg/json/JSONMLParserConfiguration;)Lorg/json/JSONArray;\n+  #131 = Utf8               (Lorg/json/XMLTokener;Z)Lorg/json/JSONArray;\n+  #132 = Utf8               (Lorg/json/XMLTokener;)Lorg/json/JSONArray;\n+  #133 = Utf8               toJSONObject\n+  #134 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n+  #135 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n+  #136 = Utf8               (Ljava/lang/String;Lorg/json/JSONMLParserConfiguration;)Lorg/json/JSONObject;\n+  #137 = Utf8               (Lorg/json/XMLTokener;)Lorg/json/JSONObject;\n+  #138 = Utf8               (Lorg/json/XMLTokener;Z)Lorg/json/JSONObject;\n+  #139 = Utf8               (Lorg/json/XMLTokener;Lorg/json/JSONMLParserConfiguration;)Lorg/json/JSONObject;\n+  #140 = Utf8               toString\n+  #141 = Utf8               (Lorg/json/JSONArray;)Ljava/lang/String;\n+  #142 = Utf8               value\n+  #143 = Utf8               key\n+  #144 = Utf8               jo\n+  #145 = Utf8               length\n+  #146 = Utf8               object\n+  #147 = Utf8               sb\n+  #148 = Utf8               Ljava/lang/StringBuilder;\n+  #149 = Class              #235          // java/util/Iterator\n+  #150 = Utf8               (Lorg/json/JSONObject;)Ljava/lang/String;\n+  #151 = Utf8               SourceFile\n+  #152 = Utf8               JSONML.java\n+  #153 = NameAndType        #89:#90       // \"<init>\":()V\n+  #154 = NameAndType        #236:#117     // KEEP_STRINGS:Lorg/json/JSONMLParserConfiguration;\n+  #155 = NameAndType        #237:#117     // ORIGINAL:Lorg/json/JSONMLParserConfiguration;\n+  #156 = NameAndType        #96:#110      // parse:(Lorg/json/XMLTokener;ZLorg/json/JSONArray;Lorg/json/JSONMLParserConfiguration;I)Ljava/lang/Object;\n+  #157 = NameAndType        #238:#239     // more:()Z\n+  #158 = Utf8               Bad XML\n+  #159 = NameAndType        #240:#241     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+  #160 = NameAndType        #242:#243     // nextContent:()Ljava/lang/Object;\n+  #161 = Class              #244          // org/json/XML\n+  #162 = NameAndType        #245:#246     // LT:Ljava/lang/Character;\n+  #163 = NameAndType        #247:#243     // nextToken:()Ljava/lang/Object;\n+  #164 = Utf8               java/lang/Character\n+  #165 = NameAndType        #248:#246     // SLASH:Ljava/lang/Character;\n+  #166 = Utf8               java/lang/String\n+  #167 = Utf8               org/json/JSONException\n+  #168 = Utf8               java/lang/StringBuilder\n+  #169 = Utf8               Expected a closing name instead of \\'\n+  #170 = NameAndType        #249:#250     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #171 = NameAndType        #249:#251     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #172 = Utf8               \\'.\n+  #173 = NameAndType        #140:#252     // toString:()Ljava/lang/String;\n+  #174 = NameAndType        #89:#253      // \"<init>\":(Ljava/lang/String;)V\n+  #175 = NameAndType        #254:#246     // GT:Ljava/lang/Character;\n+  #176 = Utf8               Misshaped close tag\n+  #177 = NameAndType        #255:#246     // BANG:Ljava/lang/Character;\n+  #178 = NameAndType        #256:#257     // next:()C\n+  #179 = Utf8               -->\n+  #180 = NameAndType        #258:#253     // skipPast:(Ljava/lang/String;)V\n+  #181 = NameAndType        #259:#90      // back:()V\n+  #182 = Utf8               CDATA\n+  #183 = NameAndType        #260:#261     // equals:(Ljava/lang/Object;)Z\n+  #184 = NameAndType        #262:#252     // nextCDATA:()Ljava/lang/String;\n+  #185 = NameAndType        #263:#264     // put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n+  #186 = Utf8               Expected \\'CDATA[\\'\n+  #187 = NameAndType        #265:#243     // nextMeta:()Ljava/lang/Object;\n+  #188 = Utf8               Missing \\'>\\' after \\'<!\\'.\n+  #189 = NameAndType        #266:#246     // QUEST:Ljava/lang/Character;\n+  #190 = Utf8               ?>\n+  #191 = Utf8               Misshaped tag\n+  #192 = Utf8               Bad tagName \\'\n+  #193 = Utf8               org/json/JSONArray\n+  #194 = Utf8               org/json/JSONObject\n+  #195 = NameAndType        #263:#267     // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #196 = Utf8               childNode\n+  #197 = Utf8               Reserved attribute.\n+  #198 = NameAndType        #268:#246     // EQ:Ljava/lang/Character;\n+  #199 = Utf8               Missing value\n+  #200 = NameAndType        #269:#239     // isKeepStrings:()Z\n+  #201 = NameAndType        #270:#271     // stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n+  #202 = NameAndType        #272:#267     // accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #203 = Utf8\n+  #204 = NameAndType        #145:#273     // length:()I\n+  #205 = NameAndType        #274:#273     // getMaxNestingDepth:()I\n+  #206 = Utf8               Maximum nesting depth of\n+  #207 = NameAndType        #249:#275     // append:(I)Ljava/lang/StringBuilder;\n+  #208 = Utf8                reached\n+  #209 = Utf8               Mismatched \\'\n+  #210 = Utf8               \\' and \\'\n+  #211 = Utf8               \\'\n+  #212 = Utf8               childNodes\n+  #213 = NameAndType        #276:#277     // unescape:(Ljava/lang/String;)Ljava/lang/String;\n+  #214 = Utf8               org/json/XMLTokener\n+  #215 = NameAndType        #96:#97       // parse:(Lorg/json/XMLTokener;ZLorg/json/JSONArray;ZI)Ljava/lang/Object;\n+  #216 = NameAndType        #278:#279     // getString:(I)Ljava/lang/String;\n+  #217 = NameAndType        #280:#253     // noSpace:(Ljava/lang/String;)V\n+  #218 = NameAndType        #281:#277     // escape:(Ljava/lang/String;)Ljava/lang/String;\n+  #219 = NameAndType        #249:#282     // append:(C)Ljava/lang/StringBuilder;\n+  #220 = NameAndType        #283:#284     // opt:(I)Ljava/lang/Object;\n+  #221 = NameAndType        #285:#286     // keySet:()Ljava/util/Set;\n+  #222 = Class              #287          // java/util/Set\n+  #223 = NameAndType        #288:#289     // iterator:()Ljava/util/Iterator;\n+  #224 = NameAndType        #290:#239     // hasNext:()Z\n+  #225 = NameAndType        #256:#243     // next:()Ljava/lang/Object;\n+  #226 = NameAndType        #283:#271     // opt:(Ljava/lang/String;)Ljava/lang/Object;\n+  #227 = NameAndType        #291:#284     // get:(I)Ljava/lang/Object;\n+  #228 = NameAndType        #140:#150     // toString:(Lorg/json/JSONObject;)Ljava/lang/String;\n+  #229 = NameAndType        #140:#141     // toString:(Lorg/json/JSONArray;)Ljava/lang/String;\n+  #230 = NameAndType        #292:#277     // optString:(Ljava/lang/String;)Ljava/lang/String;\n+  #231 = NameAndType        #293:#126     // optJSONArray:(Ljava/lang/String;)Lorg/json/JSONArray;\n+  #232 = Utf8               org/json/JSONML\n+  #233 = Utf8               java/lang/Object\n+  #234 = Utf8               org/json/JSONMLParserConfiguration\n+  #235 = Utf8               java/util/Iterator\n+  #236 = Utf8               KEEP_STRINGS\n+  #237 = Utf8               ORIGINAL\n+  #238 = Utf8               more\n+  #239 = Utf8               ()Z\n+  #240 = Utf8               syntaxError\n+  #241 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n+  #242 = Utf8               nextContent\n+  #243 = Utf8               ()Ljava/lang/Object;\n+  #244 = Utf8               org/json/XML\n+  #245 = Utf8               LT\n+  #246 = Utf8               Ljava/lang/Character;\n+  #247 = Utf8               nextToken\n+  #248 = Utf8               SLASH\n+  #249 = Utf8               append\n+  #250 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #251 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #252 = Utf8               ()Ljava/lang/String;\n+  #253 = Utf8               (Ljava/lang/String;)V\n+  #254 = Utf8               GT\n+  #255 = Utf8               BANG\n+  #256 = Utf8               next\n+  #257 = Utf8               ()C\n+  #258 = Utf8               skipPast\n+  #259 = Utf8               back\n+  #260 = Utf8               equals\n+  #261 = Utf8               (Ljava/lang/Object;)Z\n+  #262 = Utf8               nextCDATA\n+  #263 = Utf8               put\n+  #264 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONArray;\n+  #265 = Utf8               nextMeta\n+  #266 = Utf8               QUEST\n+  #267 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #268 = Utf8               EQ\n+  #269 = Utf8               isKeepStrings\n+  #270 = Utf8               stringToValue\n+  #271 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n+  #272 = Utf8               accumulate\n+  #273 = Utf8               ()I\n+  #274 = Utf8               getMaxNestingDepth\n+  #275 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #276 = Utf8               unescape\n+  #277 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #278 = Utf8               getString\n+  #279 = Utf8               (I)Ljava/lang/String;\n+  #280 = Utf8               noSpace\n+  #281 = Utf8               escape\n+  #282 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #283 = Utf8               opt\n+  #284 = Utf8               (I)Ljava/lang/Object;\n+  #285 = Utf8               keySet\n+  #286 = Utf8               ()Ljava/util/Set;\n+  #287 = Utf8               java/util/Set\n+  #288 = Utf8               iterator\n+  #289 = Utf8               ()Ljava/util/Iterator;\n+  #290 = Utf8               hasNext\n+  #291 = Utf8               get\n+  #292 = Utf8               optString\n+  #293 = Utf8               optJSONArray\n {\n   public org.json.JSONML();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -338,14 +330,16 @@\n         10: goto          16\n         13: getstatic     #3                  // Field org/json/JSONMLParserConfiguration.ORIGINAL:Lorg/json/JSONMLParserConfiguration;\n         16: iload         4\n         18: invokestatic  #4                  // Method parse:(Lorg/json/XMLTokener;ZLorg/json/JSONArray;Lorg/json/JSONMLParserConfiguration;I)Ljava/lang/Object;\n         21: areturn\n       LineNumberTable:\n         line 33: 0\n+        line 34: 3\n+        line 33: 18\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      22     0     x   Lorg/json/XMLTokener;\n             0      22     1 arrayForm   Z\n             0      22     2    ja   Lorg/json/JSONArray;\n             0      22     3 keepStrings   Z\n             0      22     4 currentNestingDepth   I\n@@ -850,15 +844,16 @@\n         line 222: 780\n         line 224: 790\n         line 225: 794\n         line 226: 798\n         line 228: 801\n         line 234: 804\n         line 235: 808\n-        line 236: 818\n+        line 236: 817\n+        line 237: 846\n         line 235: 848\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n           143     141     6     c   C\n           233      51     8     i   I\n           462     116     5 attribute   Ljava/lang/String;\n             0     855     0     x   Lorg/json/XMLTokener;\n"}]}
