{"diffoscope-json-version": 1, "source1": "first/EnumElementValue.class", "source2": "second/EnumElementValue.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,113 +1,111 @@\n-  SHA-256 checksum d35b71662dcdbbcba27b0c7c84034d6757cacc3900fcd8e767018649fa024aa7\n+  SHA-256 checksum ef65495843040c2e305c90f8eea95351c41c41bf1b4fb44f045a811014362e72\n   Compiled from \"EnumElementValue.java\"\n public class org.apache.bcel.classfile.EnumElementValue extends org.apache.bcel.classfile.ElementValue\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #21                         // org/apache/bcel/classfile/EnumElementValue\n   super_class: #2                         // org/apache/bcel/classfile/ElementValue\n   interfaces: 0, fields: 2, methods: 7, attributes: 1\n Constant pool:\n-   #1 = Methodref          #2.#55         // org/apache/bcel/classfile/ElementValue.\"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n-   #2 = Class              #56            // org/apache/bcel/classfile/ElementValue\n-   #3 = Class              #57            // java/lang/IllegalArgumentException\n-   #4 = Class              #58            // java/lang/StringBuilder\n-   #5 = Methodref          #4.#59         // java/lang/StringBuilder.\"<init>\":()V\n-   #6 = String             #60            // Only element values of type enum can be built with this ctor - type specified:\n-   #7 = Methodref          #4.#61         // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #8 = Methodref          #4.#62         // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #9 = Methodref          #4.#63         // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-  #10 = Methodref          #3.#64         // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-  #11 = Fieldref           #21.#65        // org/apache/bcel/classfile/EnumElementValue.typeIdx:I\n-  #12 = Fieldref           #21.#66        // org/apache/bcel/classfile/EnumElementValue.valueIdx:I\n-  #13 = Methodref          #2.#67         // org/apache/bcel/classfile/ElementValue.getType:()I\n-  #14 = Methodref          #68.#69        // java/io/DataOutputStream.writeByte:(I)V\n-  #15 = Methodref          #68.#70        // java/io/DataOutputStream.writeShort:(I)V\n-  #16 = Methodref          #2.#71         // org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n-  #17 = Class              #72            // org/apache/bcel/Const\n-  #18 = Methodref          #73.#74        // org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-  #19 = Class              #75            // org/apache/bcel/classfile/ConstantUtf8\n-  #20 = Methodref          #19.#76        // org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n-  #21 = Class              #77            // org/apache/bcel/classfile/EnumElementValue\n+   #1 = Methodref          #2.#54         // org/apache/bcel/classfile/ElementValue.\"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n+   #2 = Class              #55            // org/apache/bcel/classfile/ElementValue\n+   #3 = Class              #56            // java/lang/IllegalArgumentException\n+   #4 = Class              #57            // java/lang/StringBuilder\n+   #5 = Methodref          #4.#58         // java/lang/StringBuilder.\"<init>\":()V\n+   #6 = String             #59            // Only element values of type enum can be built with this ctor - type specified:\n+   #7 = Methodref          #4.#60         // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #8 = Methodref          #4.#61         // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #9 = Methodref          #4.#62         // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #10 = Methodref          #3.#63         // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+  #11 = Fieldref           #21.#64        // org/apache/bcel/classfile/EnumElementValue.typeIdx:I\n+  #12 = Fieldref           #21.#65        // org/apache/bcel/classfile/EnumElementValue.valueIdx:I\n+  #13 = Methodref          #2.#66         // org/apache/bcel/classfile/ElementValue.getType:()I\n+  #14 = Methodref          #67.#68        // java/io/DataOutputStream.writeByte:(I)V\n+  #15 = Methodref          #67.#69        // java/io/DataOutputStream.writeShort:(I)V\n+  #16 = Methodref          #2.#70         // org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+  #17 = Class              #71            // org/apache/bcel/Const\n+  #18 = Methodref          #36.#72        // org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+  #19 = Class              #73            // org/apache/bcel/classfile/ConstantUtf8\n+  #20 = Methodref          #19.#74        // org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n+  #21 = Class              #75            // org/apache/bcel/classfile/EnumElementValue\n   #22 = Utf8               typeIdx\n   #23 = Utf8               I\n   #24 = Utf8               valueIdx\n   #25 = Utf8               <init>\n   #26 = Utf8               (IIILorg/apache/bcel/classfile/ConstantPool;)V\n   #27 = Utf8               Code\n   #28 = Utf8               LineNumberTable\n   #29 = Utf8               LocalVariableTable\n   #30 = Utf8               this\n   #31 = Utf8               Lorg/apache/bcel/classfile/EnumElementValue;\n   #32 = Utf8               type\n   #33 = Utf8               cpool\n   #34 = Utf8               Lorg/apache/bcel/classfile/ConstantPool;\n   #35 = Utf8               StackMapTable\n-  #36 = Class              #77            // org/apache/bcel/classfile/EnumElementValue\n-  #37 = Class              #78            // org/apache/bcel/classfile/ConstantPool\n-  #38 = Utf8               dump\n-  #39 = Utf8               (Ljava/io/DataOutputStream;)V\n-  #40 = Utf8               dos\n-  #41 = Utf8               Ljava/io/DataOutputStream;\n-  #42 = Utf8               Exceptions\n-  #43 = Class              #79            // java/io/IOException\n-  #44 = Utf8               stringifyValue\n-  #45 = Utf8               ()Ljava/lang/String;\n-  #46 = Utf8               cu8\n-  #47 = Utf8               Lorg/apache/bcel/classfile/ConstantUtf8;\n-  #48 = Utf8               getEnumTypeString\n-  #49 = Utf8               getEnumValueString\n-  #50 = Utf8               getValueIndex\n-  #51 = Utf8               ()I\n-  #52 = Utf8               getTypeIndex\n-  #53 = Utf8               SourceFile\n-  #54 = Utf8               EnumElementValue.java\n-  #55 = NameAndType        #25:#80        // \"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n-  #56 = Utf8               org/apache/bcel/classfile/ElementValue\n-  #57 = Utf8               java/lang/IllegalArgumentException\n-  #58 = Utf8               java/lang/StringBuilder\n-  #59 = NameAndType        #25:#81        // \"<init>\":()V\n-  #60 = Utf8               Only element values of type enum can be built with this ctor - type specified:\n-  #61 = NameAndType        #82:#83        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #62 = NameAndType        #82:#84        // append:(I)Ljava/lang/StringBuilder;\n-  #63 = NameAndType        #85:#45        // toString:()Ljava/lang/String;\n-  #64 = NameAndType        #25:#86        // \"<init>\":(Ljava/lang/String;)V\n-  #65 = NameAndType        #22:#23        // typeIdx:I\n-  #66 = NameAndType        #24:#23        // valueIdx:I\n-  #67 = NameAndType        #87:#51        // getType:()I\n-  #68 = Class              #88            // java/io/DataOutputStream\n-  #69 = NameAndType        #89:#90        // writeByte:(I)V\n-  #70 = NameAndType        #91:#90        // writeShort:(I)V\n-  #71 = NameAndType        #92:#93        // getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n-  #72 = Utf8               org/apache/bcel/Const\n-  #73 = Class              #78            // org/apache/bcel/classfile/ConstantPool\n-  #74 = NameAndType        #94:#95        // getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-  #75 = Utf8               org/apache/bcel/classfile/ConstantUtf8\n-  #76 = NameAndType        #96:#45        // getBytes:()Ljava/lang/String;\n-  #77 = Utf8               org/apache/bcel/classfile/EnumElementValue\n-  #78 = Utf8               org/apache/bcel/classfile/ConstantPool\n-  #79 = Utf8               java/io/IOException\n-  #80 = Utf8               (ILorg/apache/bcel/classfile/ConstantPool;)V\n-  #81 = Utf8               ()V\n-  #82 = Utf8               append\n-  #83 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #84 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #85 = Utf8               toString\n-  #86 = Utf8               (Ljava/lang/String;)V\n-  #87 = Utf8               getType\n-  #88 = Utf8               java/io/DataOutputStream\n-  #89 = Utf8               writeByte\n-  #90 = Utf8               (I)V\n-  #91 = Utf8               writeShort\n-  #92 = Utf8               getConstantPool\n-  #93 = Utf8               ()Lorg/apache/bcel/classfile/ConstantPool;\n-  #94 = Utf8               getConstant\n-  #95 = Utf8               (IB)Lorg/apache/bcel/classfile/Constant;\n-  #96 = Utf8               getBytes\n+  #36 = Class              #76            // org/apache/bcel/classfile/ConstantPool\n+  #37 = Utf8               dump\n+  #38 = Utf8               (Ljava/io/DataOutputStream;)V\n+  #39 = Utf8               dos\n+  #40 = Utf8               Ljava/io/DataOutputStream;\n+  #41 = Utf8               Exceptions\n+  #42 = Class              #77            // java/io/IOException\n+  #43 = Utf8               stringifyValue\n+  #44 = Utf8               ()Ljava/lang/String;\n+  #45 = Utf8               cu8\n+  #46 = Utf8               Lorg/apache/bcel/classfile/ConstantUtf8;\n+  #47 = Utf8               getEnumTypeString\n+  #48 = Utf8               getEnumValueString\n+  #49 = Utf8               getValueIndex\n+  #50 = Utf8               ()I\n+  #51 = Utf8               getTypeIndex\n+  #52 = Utf8               SourceFile\n+  #53 = Utf8               EnumElementValue.java\n+  #54 = NameAndType        #25:#78        // \"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n+  #55 = Utf8               org/apache/bcel/classfile/ElementValue\n+  #56 = Utf8               java/lang/IllegalArgumentException\n+  #57 = Utf8               java/lang/StringBuilder\n+  #58 = NameAndType        #25:#79        // \"<init>\":()V\n+  #59 = Utf8               Only element values of type enum can be built with this ctor - type specified:\n+  #60 = NameAndType        #80:#81        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #61 = NameAndType        #80:#82        // append:(I)Ljava/lang/StringBuilder;\n+  #62 = NameAndType        #83:#44        // toString:()Ljava/lang/String;\n+  #63 = NameAndType        #25:#84        // \"<init>\":(Ljava/lang/String;)V\n+  #64 = NameAndType        #22:#23        // typeIdx:I\n+  #65 = NameAndType        #24:#23        // valueIdx:I\n+  #66 = NameAndType        #85:#50        // getType:()I\n+  #67 = Class              #86            // java/io/DataOutputStream\n+  #68 = NameAndType        #87:#88        // writeByte:(I)V\n+  #69 = NameAndType        #89:#88        // writeShort:(I)V\n+  #70 = NameAndType        #90:#91        // getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+  #71 = Utf8               org/apache/bcel/Const\n+  #72 = NameAndType        #92:#93        // getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+  #73 = Utf8               org/apache/bcel/classfile/ConstantUtf8\n+  #74 = NameAndType        #94:#44        // getBytes:()Ljava/lang/String;\n+  #75 = Utf8               org/apache/bcel/classfile/EnumElementValue\n+  #76 = Utf8               org/apache/bcel/classfile/ConstantPool\n+  #77 = Utf8               java/io/IOException\n+  #78 = Utf8               (ILorg/apache/bcel/classfile/ConstantPool;)V\n+  #79 = Utf8               ()V\n+  #80 = Utf8               append\n+  #81 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #82 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #83 = Utf8               toString\n+  #84 = Utf8               (Ljava/lang/String;)V\n+  #85 = Utf8               getType\n+  #86 = Utf8               java/io/DataOutputStream\n+  #87 = Utf8               writeByte\n+  #88 = Utf8               (I)V\n+  #89 = Utf8               writeShort\n+  #90 = Utf8               getConstantPool\n+  #91 = Utf8               ()Lorg/apache/bcel/classfile/ConstantPool;\n+  #92 = Utf8               getConstant\n+  #93 = Utf8               (IB)Lorg/apache/bcel/classfile/Constant;\n+  #94 = Utf8               getBytes\n {\n   private final int typeIdx;\n     descriptor: I\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final int valueIdx;\n     descriptor: I\n"}]}
