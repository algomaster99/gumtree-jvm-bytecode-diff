{"diffoscope-json-version": 1, "source1": "first/EventCountCircuitBreaker$StateStrategy.class", "source2": "second/EventCountCircuitBreaker$StateStrategy.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,131 +1,122 @@\n-  SHA-256 checksum 41657fb3db7ac424e95ec975063edb6c24a3801b40b528d7b508cec9a51a9377\n+  SHA-256 checksum 787c2652c9b1e58348410b769f60bfac57816232d4fd5657507d9f608854e54a\n   Compiled from \"EventCountCircuitBreaker.java\"\n abstract class org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy\n   minor version: 0\n   major version: 52\n   flags: (0x0420) ACC_SUPER, ACC_ABSTRACT\n-  this_class: #5                          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n-  super_class: #6                         // java/lang/Object\n+  this_class: #1                          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n+  super_class: #3                         // java/lang/Object\n   interfaces: 0, fields: 0, methods: 5, attributes: 2\n Constant pool:\n-   #1 = Methodref          #5.#37         // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.\"<init>\":()V\n-   #2 = Methodref          #6.#37         // java/lang/Object.\"<init>\":()V\n-   #3 = Methodref          #17.#38        // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.getCheckIntervalStart:()J\n-   #4 = Methodref          #5.#39         // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.fetchCheckInterval:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;)J\n-   #5 = Class              #41            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n-   #6 = Class              #42            // java/lang/Object\n-   #7 = Utf8               <init>\n-   #8 = Utf8               ()V\n-   #9 = Utf8               Code\n+   #1 = Class              #2             // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n+   #2 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n+   #3 = Class              #4             // java/lang/Object\n+   #4 = Utf8               java/lang/Object\n+   #5 = Utf8               <init>\n+   #6 = Utf8               ()V\n+   #7 = Utf8               Code\n+   #8 = Methodref          #3.#9          // java/lang/Object.\"<init>\":()V\n+   #9 = NameAndType        #5:#6          // \"<init>\":()V\n   #10 = Utf8               LineNumberTable\n   #11 = Utf8               LocalVariableTable\n   #12 = Utf8               this\n-  #13 = Utf8               StateStrategy\n-  #14 = Utf8               InnerClasses\n-  #15 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n-  #16 = Utf8               isCheckIntervalFinished\n-  #17 = Class              #43            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n-  #18 = Utf8               CheckIntervalData\n-  #19 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n-  #20 = Utf8               breaker\n-  #21 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n-  #22 = Utf8               currentData\n-  #23 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n-  #24 = Utf8               now\n-  #25 = Utf8               J\n-  #26 = Utf8               StackMapTable\n-  #27 = Utf8               isStateTransition\n-  #28 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n-  #29 = Utf8               fetchCheckInterval\n-  #30 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;)J\n-  #31 = Class              #44            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n-  #32 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n-  #33 = Utf8               x0\n-  #34 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;\n-  #35 = Utf8               SourceFile\n-  #36 = Utf8               EventCountCircuitBreaker.java\n-  #37 = NameAndType        #7:#8          // \"<init>\":()V\n-  #38 = NameAndType        #45:#46        // getCheckIntervalStart:()J\n-  #39 = NameAndType        #29:#30        // fetchCheckInterval:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;)J\n-  #40 = Class              #47            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n-  #41 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n-  #42 = Utf8               java/lang/Object\n-  #43 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n-  #44 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n-  #45 = Utf8               getCheckIntervalStart\n-  #46 = Utf8               ()J\n-  #47 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+  #13 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n+  #14 = Utf8               isCheckIntervalFinished\n+  #15 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n+  #16 = Methodref          #17.#19        // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.getCheckIntervalStart:()J\n+  #17 = Class              #18            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n+  #18 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n+  #19 = NameAndType        #20:#21        // getCheckIntervalStart:()J\n+  #20 = Utf8               getCheckIntervalStart\n+  #21 = Utf8               ()J\n+  #22 = Methodref          #1.#23         // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.fetchCheckInterval:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;)J\n+  #23 = NameAndType        #24:#25        // fetchCheckInterval:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;)J\n+  #24 = Utf8               fetchCheckInterval\n+  #25 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;)J\n+  #26 = Utf8               breaker\n+  #27 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n+  #28 = Utf8               currentData\n+  #29 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+  #30 = Utf8               now\n+  #31 = Utf8               J\n+  #32 = Utf8               StackMapTable\n+  #33 = Utf8               isStateTransition\n+  #34 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n+  #35 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;)V\n+  #36 = Methodref          #1.#9          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.\"<init>\":()V\n+  #37 = Utf8               SourceFile\n+  #38 = Utf8               EventCountCircuitBreaker.java\n+  #39 = Utf8               InnerClasses\n+  #40 = Class              #41            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+  #41 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+  #42 = Utf8               CheckIntervalData\n+  #43 = Utf8               StateStrategy\n {\n   private org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #8                  // Method java/lang/Object.\"<init>\":()V\n          4: return\n       LineNumberTable:\n         line 482: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n \n   public boolean isCheckIntervalFinished(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData, long);\n     descriptor: (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=5, args_size=4\n          0: lload_3\n          1: aload_2\n-         2: invokevirtual #3                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.getCheckIntervalStart:()J\n+         2: invokevirtual #16                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.getCheckIntervalStart:()J\n          5: lsub\n          6: aload_0\n          7: aload_1\n-         8: invokevirtual #4                  // Method fetchCheckInterval:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;)J\n+         8: invokevirtual #22                 // Method fetchCheckInterval:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;)J\n         11: lcmp\n-        12: ifle          19\n+        12: ifle          17\n         15: iconst_1\n-        16: goto          20\n-        19: iconst_0\n-        20: ireturn\n+        16: ireturn\n+        17: iconst_0\n+        18: ireturn\n       LineNumberTable:\n         line 493: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      21     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n-            0      21     1 breaker   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n-            0      21     2 currentData   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n-            0      21     3   now   J\n-      StackMapTable: number_of_entries = 2\n-        frame_type = 19 /* same */\n-        frame_type = 64 /* same_locals_1_stack_item */\n-          stack = [ int ]\n+            0      19     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n+            0      19     1 breaker   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n+            0      19     2 currentData   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+            0      19     3   now   J\n+      StackMapTable: number_of_entries = 1\n+        frame_type = 17 /* same */\n \n   public abstract boolean isStateTransition(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData);\n     descriptor: (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n     flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT\n \n   protected abstract long fetchCheckInterval(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker);\n     descriptor: (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;)J\n     flags: (0x0404) ACC_PROTECTED, ACC_ABSTRACT\n \n-  org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$1);\n-    descriptor: (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n+  org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy);\n+    descriptor: (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;)V\n     flags: (0x1000) ACC_SYNTHETIC\n     Code:\n       stack=1, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #1                  // Method \"<init>\":()V\n+         1: invokespecial #36                 // Method \"<init>\":()V\n          4: return\n       LineNumberTable:\n         line 482: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0       5     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n-            0       5     1    x0   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;\n }\n SourceFile: \"EventCountCircuitBreaker.java\"\n InnerClasses:\n-  private static abstract #13= #5 of #40; // StateStrategy=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n-  private static #18= #17 of #40;         // CheckIntervalData=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n-  static #31;                             // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n+  private static #42= #17 of #40;         // CheckIntervalData=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+  private static abstract #43= #1 of #40; // StateStrategy=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n"}]}
