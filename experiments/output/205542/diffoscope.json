{"diffoscope-json-version": 1, "source1": "first/PropertiesConfiguration$JupPropertiesReader.class", "source2": "second/PropertiesConfiguration$JupPropertiesReader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,47 +8,46 @@\n {\n     public JupPropertiesReader(final Reader reader) {\n         super(reader);\n     }\n     \n     public String readProperty() throws IOException {\n         this.getCommentLines().clear();\n-        final StringBuilder buffer = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder();\n         while (true) {\n-            String line = this.readLine();\n-            if (line == null) {\n-                if (buffer.length() > 0) {\n+            String str = this.readLine();\n+            if (str == null) {\n+                if (sb.length() > 0) {\n                     break;\n                 }\n                 return null;\n             }\n-            else if (PropertiesConfiguration.isCommentLine(line) && buffer.length() == 0) {\n-                this.getCommentLines().add(line);\n+            else if (PropertiesConfiguration.isCommentLine(str) && sb.length() == 0) {\n+                this.getCommentLines().add(str);\n             }\n             else {\n-                if (buffer.length() > 0) {\n-                    int i;\n-                    for (i = 0; i < line.length() && Character.isWhitespace(line.charAt(i)); ++i) {}\n-                    line = line.substring(i);\n+                if (sb.length() > 0) {\n+                    int n;\n+                    for (n = 0; n < str.length() && Character.isWhitespace(str.charAt(n)); ++n) {}\n+                    str = str.substring(n);\n                 }\n-                if (!checkCombineLines(line)) {\n-                    buffer.append(line);\n+                if (!checkCombineLines(str)) {\n+                    sb.append(str);\n                     break;\n                 }\n-                line = line.substring(0, line.length() - 1);\n-                buffer.append(line);\n+                sb.append(str.substring(0, str.length() - 1));\n             }\n         }\n-        return buffer.toString();\n+        return sb.toString();\n     }\n     \n-    protected void parseProperty(final String line) {\n-        final String[] property = doParseProperty(line, false);\n-        this.initPropertyName(property[0]);\n-        this.initPropertyValue(property[1]);\n-        this.initPropertySeparator(property[2]);\n+    protected void parseProperty(final String s) {\n+        final String[] doParseProperty = doParseProperty(s, false);\n+        this.initPropertyName(doParseProperty[0]);\n+        this.initPropertyValue(doParseProperty[1]);\n+        this.initPropertySeparator(doParseProperty[2]);\n     }\n     \n-    protected String unescapePropertyValue(final String value) {\n-        return PropertiesConfiguration.unescapeJava(value, true);\n+    protected String unescapePropertyValue(final String s) {\n+        return PropertiesConfiguration.unescapeJava(s, true);\n     }\n }\n"}]}
