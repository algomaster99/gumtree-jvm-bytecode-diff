{"diffoscope-json-version": 1, "source1": "first/JavadocTypeCheck.class", "source2": "second/JavadocTypeCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -38,14 +38,19 @@\n     private Scope excludeScope;\n     private Pattern authorFormat;\n     private Pattern versionFormat;\n     private boolean allowMissingParamTags;\n     private boolean allowUnknownTags;\n     private Set<String> allowedAnnotations;\n     \n+    static {\n+        TYPE_NAME_IN_JAVADOC_TAG = Pattern.compile(\"\\\\s*<([^>]+)>.*\");\n+        TYPE_NAME_IN_JAVADOC_TAG_SPLITTER = Pattern.compile(\"\\\\s+\");\n+    }\n+    \n     public JavadocTypeCheck() {\n         this.scope = Scope.PRIVATE;\n         this.allowedAnnotations = Set.of(\"Generated\");\n     }\n     \n     public void setScope(final Scope scope) {\n         this.scope = scope;\n@@ -97,16 +102,16 @@\n                 if (ScopeUtil.isOuterMostType(ast)) {\n                     this.checkTag(ast, tags, JavadocTagInfo.AUTHOR.getName(), this.authorFormat);\n                     this.checkTag(ast, tags, JavadocTagInfo.VERSION.getName(), this.versionFormat);\n                 }\n                 final List<String> typeParamNames = CheckUtil.getTypeParameterNames(ast);\n                 final List<String> recordComponentNames = getRecordComponentNames(ast);\n                 if (!this.allowMissingParamTags) {\n-                    typeParamNames.forEach(typeParamName -> this.checkTypeParamTag(ast, tags, typeParamName));\n-                    recordComponentNames.forEach(componentName -> this.checkComponentParamTag(ast, tags, componentName));\n+                    typeParamNames.forEach(typeParamName -> this.checkTypeParamTag(ast2, tags2, typeParamName));\n+                    recordComponentNames.forEach(componentName -> this.checkComponentParamTag(ast3, tags3, componentName));\n                 }\n                 this.checkUnusedParamTags(tags, typeParamNames, recordComponentNames);\n             }\n         }\n     }\n     \n     private boolean shouldCheck(final DetailAST ast) {\n@@ -125,15 +130,15 @@\n         return tags.getValidTags();\n     }\n     \n     private void checkTag(final DetailAST ast, final Iterable<JavadocTag> tags, final String tagName, final Pattern formatPattern) {\n         if (formatPattern != null) {\n             boolean hasTag = false;\n             final String tagPrefix = \"@\";\n-            for (JavadocTag tag : tags) {\n+            for (final JavadocTag tag : tags) {\n                 if (tag.getTagName().equals(tagName)) {\n                     hasTag = true;\n                     if (formatPattern.matcher(tag.getFirstArg()).find()) {\n                         continue;\n                     }\n                     this.log(ast, \"type.tagFormat\", new Object[] { \"@\" + tagName, formatPattern.pattern() });\n                 }\n@@ -141,25 +146,25 @@\n             if (!hasTag) {\n                 this.log(ast, \"type.missingTag\", new Object[] { \"@\" + tagName });\n             }\n         }\n     }\n     \n     private void checkComponentParamTag(final DetailAST ast, final Collection<JavadocTag> tags, final String recordComponentName) {\n-        final boolean found = tags.stream().filter(JavadocTag::isParamTag).anyMatch(tag -> tag.getFirstArg().indexOf(recordComponentName) == 0);\n+        final boolean found = tags.stream().filter(JavadocTag::isParamTag).anyMatch(tag -> tag.getFirstArg().indexOf(str) == 0);\n         if (!found) {\n-            this.log(ast, \"type.missingTag\", new Object[] { JavadocTagInfo.PARAM.getText() + \" \" + recordComponentName });\n+            this.log(ast, \"type.missingTag\", new Object[] { String.valueOf(JavadocTagInfo.PARAM.getText()) + \" \" + recordComponentName });\n         }\n     }\n     \n     private void checkTypeParamTag(final DetailAST ast, final Collection<JavadocTag> tags, final String typeParamName) {\n-        final String typeParamNameWithBrackets = \"<\" + typeParamName;\n-        final boolean found = tags.stream().filter(JavadocTag::isParamTag).anyMatch(tag -> tag.getFirstArg().indexOf(typeParamNameWithBrackets) == 0);\n+        final String typeParamNameWithBrackets = \"<\" + typeParamName + \">\";\n+        final boolean found = tags.stream().filter(JavadocTag::isParamTag).anyMatch(tag -> tag.getFirstArg().indexOf(str) == 0);\n         if (!found) {\n-            this.log(ast, \"type.missingTag\", new Object[] { JavadocTagInfo.PARAM.getText() + \" \" + typeParamNameWithBrackets });\n+            this.log(ast, \"type.missingTag\", new Object[] { String.valueOf(JavadocTagInfo.PARAM.getText()) + \" \" + typeParamNameWithBrackets });\n         }\n     }\n     \n     private void checkUnusedParamTags(final List<JavadocTag> tags, final List<String> typeParamNames, final List<String> recordComponentNames) {\n         for (final JavadocTag tag : tags) {\n             if (tag.isParamTag()) {\n                 final String paramName = extractParamNameFromTag(tag);\n@@ -187,19 +192,14 @@\n     \n     private static List<String> getRecordComponentNames(final DetailAST node) {\n         final DetailAST components = node.findFirstToken(201);\n         final List<String> componentList = new ArrayList<String>();\n         if (components != null) {\n             TokenUtil.forEachChild(components, 202, component -> {\n                 final DetailAST ident = component.findFirstToken(58);\n-                componentList.add(ident.getText());\n+                list.add(ident.getText());\n                 return;\n             });\n         }\n         return componentList;\n     }\n-    \n-    static {\n-        TYPE_NAME_IN_JAVADOC_TAG = Pattern.compile(\"\\\\s*<([^>]+)>.*\");\n-        TYPE_NAME_IN_JAVADOC_TAG_SPLITTER = Pattern.compile(\"\\\\s+\");\n-    }\n }\n"}]}
