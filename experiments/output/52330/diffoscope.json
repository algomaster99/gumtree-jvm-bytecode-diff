{"diffoscope-json-version": 1, "source1": "first/XZCompressorInputStream.class", "source2": "second/XZCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,136 +1,133 @@\n-  SHA-256 checksum 8354502b6a1298d960fb780988aa27762f00502a5ad301f5ea6e61deb904ce24\n+  SHA-256 checksum ad5e573d56d9fe493014bd06c4ce88931b48a8597830cd75c8301fcc12d024bb\n   Compiled from \"XZCompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.xz.XZCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #25                         // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n-  super_class: #26                        // org/apache/commons/compress/compressors/CompressorInputStream\n+  this_class: #1                          // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n+  super_class: #3                         // org/apache/commons/compress/compressors/CompressorInputStream\n   interfaces: 1, fields: 2, methods: 10, attributes: 1\n Constant pool:\n-    #1 = Fieldref           #78.#79       // org/tukaani/xz/XZ.HEADER_MAGIC:[B\n-    #2 = Methodref          #25.#80       // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n-    #3 = Methodref          #25.#81       // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;ZI)V\n-    #4 = Methodref          #26.#82       // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-    #5 = Class              #83           // org/apache/commons/compress/utils/CountingInputStream\n-    #6 = Methodref          #5.#84        // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-    #7 = Fieldref           #25.#85       // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-    #8 = Class              #86           // org/tukaani/xz/XZInputStream\n-    #9 = Methodref          #8.#87        // org/tukaani/xz/XZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-   #10 = Fieldref           #25.#88       // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.in:Ljava/io/InputStream;\n-   #11 = Class              #89           // org/tukaani/xz/SingleXZInputStream\n-   #12 = Methodref          #11.#87       // org/tukaani/xz/SingleXZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-   #13 = Methodref          #90.#91       // java/io/InputStream.read:()I\n-   #14 = Methodref          #25.#92       // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.count:(I)V\n-   #15 = Class              #93           // org/tukaani/xz/MemoryLimitException\n-   #16 = Class              #94           // org/apache/commons/compress/MemoryLimitException\n-   #17 = Methodref          #15.#95       // org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n-   #18 = Methodref          #15.#96       // org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n-   #19 = Methodref          #16.#97       // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n-   #20 = Methodref          #90.#98       // java/io/InputStream.read:([BII)I\n-   #21 = Methodref          #99.#100      // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-   #22 = Methodref          #90.#101      // java/io/InputStream.available:()I\n-   #23 = Methodref          #90.#102      // java/io/InputStream.close:()V\n-   #24 = Methodref          #5.#103       // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n-   #25 = Class              #104          // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n-   #26 = Class              #105          // org/apache/commons/compress/compressors/CompressorInputStream\n-   #27 = Class              #106          // org/apache/commons/compress/utils/InputStreamStatistics\n-   #28 = Utf8               countingStream\n-   #29 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #30 = Utf8               in\n-   #31 = Utf8               Ljava/io/InputStream;\n-   #32 = Utf8               matches\n-   #33 = Utf8               ([BI)Z\n-   #34 = Utf8               Code\n-   #35 = Utf8               LineNumberTable\n-   #36 = Utf8               LocalVariableTable\n-   #37 = Utf8               i\n-   #38 = Utf8               I\n-   #39 = Utf8               signature\n-   #40 = Utf8               [B\n-   #41 = Utf8               length\n-   #42 = Utf8               StackMapTable\n-   #43 = Utf8               <init>\n-   #44 = Utf8               (Ljava/io/InputStream;)V\n-   #45 = Utf8               this\n-   #46 = Utf8               Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n-   #47 = Utf8               inputStream\n-   #48 = Utf8               Exceptions\n-   #49 = Class              #107          // java/io/IOException\n-   #50 = Utf8               (Ljava/io/InputStream;Z)V\n-   #51 = Utf8               decompressConcatenated\n-   #52 = Utf8               Z\n-   #53 = Utf8               (Ljava/io/InputStream;ZI)V\n-   #54 = Utf8               memoryLimitInKb\n-   #55 = Class              #104          // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n-   #56 = Class              #108          // java/io/InputStream\n-   #57 = Utf8               read\n-   #58 = Utf8               ()I\n-   #59 = Utf8               ret\n-   #60 = Utf8               e\n-   #61 = Utf8               Lorg/tukaani/xz/MemoryLimitException;\n-   #62 = Class              #93           // org/tukaani/xz/MemoryLimitException\n-   #63 = Utf8               ([BII)I\n-   #64 = Utf8               buf\n-   #65 = Utf8               off\n-   #66 = Utf8               len\n-   #67 = Utf8               skip\n-   #68 = Utf8               (J)J\n-   #69 = Utf8               n\n-   #70 = Utf8               J\n-   #71 = Utf8               available\n-   #72 = Utf8               close\n-   #73 = Utf8               ()V\n-   #74 = Utf8               getCompressedCount\n-   #75 = Utf8               ()J\n-   #76 = Utf8               SourceFile\n-   #77 = Utf8               XZCompressorInputStream.java\n-   #78 = Class              #109          // org/tukaani/xz/XZ\n-   #79 = NameAndType        #110:#40      // HEADER_MAGIC:[B\n-   #80 = NameAndType        #43:#50       // \"<init>\":(Ljava/io/InputStream;Z)V\n-   #81 = NameAndType        #43:#53       // \"<init>\":(Ljava/io/InputStream;ZI)V\n-   #82 = NameAndType        #43:#73       // \"<init>\":()V\n-   #83 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n-   #84 = NameAndType        #43:#44       // \"<init>\":(Ljava/io/InputStream;)V\n-   #85 = NameAndType        #28:#29       // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #86 = Utf8               org/tukaani/xz/XZInputStream\n-   #87 = NameAndType        #43:#111      // \"<init>\":(Ljava/io/InputStream;I)V\n-   #88 = NameAndType        #30:#31       // in:Ljava/io/InputStream;\n-   #89 = Utf8               org/tukaani/xz/SingleXZInputStream\n-   #90 = Class              #108          // java/io/InputStream\n-   #91 = NameAndType        #57:#58       // read:()I\n-   #92 = NameAndType        #112:#113     // count:(I)V\n-   #93 = Utf8               org/tukaani/xz/MemoryLimitException\n-   #94 = Utf8               org/apache/commons/compress/MemoryLimitException\n-   #95 = NameAndType        #114:#58      // getMemoryNeeded:()I\n-   #96 = NameAndType        #115:#58      // getMemoryLimit:()I\n-   #97 = NameAndType        #43:#116      // \"<init>\":(JILjava/lang/Exception;)V\n-   #98 = NameAndType        #57:#63       // read:([BII)I\n-   #99 = Class              #117          // org/apache/commons/compress/utils/IOUtils\n-  #100 = NameAndType        #67:#118      // skip:(Ljava/io/InputStream;J)J\n-  #101 = NameAndType        #71:#58       // available:()I\n-  #102 = NameAndType        #72:#73       // close:()V\n-  #103 = NameAndType        #119:#75      // getBytesRead:()J\n-  #104 = Utf8               org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n-  #105 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-  #106 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #107 = Utf8               java/io/IOException\n-  #108 = Utf8               java/io/InputStream\n-  #109 = Utf8               org/tukaani/xz/XZ\n-  #110 = Utf8               HEADER_MAGIC\n-  #111 = Utf8               (Ljava/io/InputStream;I)V\n-  #112 = Utf8               count\n-  #113 = Utf8               (I)V\n-  #114 = Utf8               getMemoryNeeded\n-  #115 = Utf8               getMemoryLimit\n-  #116 = Utf8               (JILjava/lang/Exception;)V\n-  #117 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #118 = Utf8               (Ljava/io/InputStream;J)J\n-  #119 = Utf8               getBytesRead\n+    #1 = Class              #2            // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n+    #2 = Utf8               org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n+    #3 = Class              #4            // org/apache/commons/compress/compressors/CompressorInputStream\n+    #4 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+    #5 = Class              #6            // org/apache/commons/compress/utils/InputStreamStatistics\n+    #6 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+    #7 = Utf8               countingStream\n+    #8 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n+    #9 = Utf8               in\n+   #10 = Utf8               Ljava/io/InputStream;\n+   #11 = Utf8               matches\n+   #12 = Utf8               ([BI)Z\n+   #13 = Utf8               Code\n+   #14 = Fieldref           #15.#17       // org/tukaani/xz/XZ.HEADER_MAGIC:[B\n+   #15 = Class              #16           // org/tukaani/xz/XZ\n+   #16 = Utf8               org/tukaani/xz/XZ\n+   #17 = NameAndType        #18:#19       // HEADER_MAGIC:[B\n+   #18 = Utf8               HEADER_MAGIC\n+   #19 = Utf8               [B\n+   #20 = Utf8               LineNumberTable\n+   #21 = Utf8               LocalVariableTable\n+   #22 = Utf8               signature\n+   #23 = Utf8               length\n+   #24 = Utf8               I\n+   #25 = Utf8               i\n+   #26 = Utf8               StackMapTable\n+   #27 = Utf8               <init>\n+   #28 = Utf8               (Ljava/io/InputStream;)V\n+   #29 = Utf8               Exceptions\n+   #30 = Class              #31           // java/io/IOException\n+   #31 = Utf8               java/io/IOException\n+   #32 = Methodref          #1.#33        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n+   #33 = NameAndType        #27:#34       // \"<init>\":(Ljava/io/InputStream;Z)V\n+   #34 = Utf8               (Ljava/io/InputStream;Z)V\n+   #35 = Utf8               this\n+   #36 = Utf8               Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n+   #37 = Utf8               inputStream\n+   #38 = Methodref          #1.#39        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;ZI)V\n+   #39 = NameAndType        #27:#40       // \"<init>\":(Ljava/io/InputStream;ZI)V\n+   #40 = Utf8               (Ljava/io/InputStream;ZI)V\n+   #41 = Utf8               decompressConcatenated\n+   #42 = Utf8               Z\n+   #43 = Methodref          #3.#44        // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+   #44 = NameAndType        #27:#45       // \"<init>\":()V\n+   #45 = Utf8               ()V\n+   #46 = Class              #47           // org/apache/commons/compress/utils/CountingInputStream\n+   #47 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n+   #48 = Methodref          #46.#49       // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #49 = NameAndType        #27:#28       // \"<init>\":(Ljava/io/InputStream;)V\n+   #50 = Fieldref           #1.#51        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #51 = NameAndType        #7:#8         // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #52 = Class              #53           // org/tukaani/xz/XZInputStream\n+   #53 = Utf8               org/tukaani/xz/XZInputStream\n+   #54 = Methodref          #52.#55       // org/tukaani/xz/XZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+   #55 = NameAndType        #27:#56       // \"<init>\":(Ljava/io/InputStream;I)V\n+   #56 = Utf8               (Ljava/io/InputStream;I)V\n+   #57 = Fieldref           #1.#58        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.in:Ljava/io/InputStream;\n+   #58 = NameAndType        #9:#10        // in:Ljava/io/InputStream;\n+   #59 = Class              #60           // org/tukaani/xz/SingleXZInputStream\n+   #60 = Utf8               org/tukaani/xz/SingleXZInputStream\n+   #61 = Methodref          #59.#55       // org/tukaani/xz/SingleXZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+   #62 = Utf8               memoryLimitInKb\n+   #63 = Class              #64           // java/io/InputStream\n+   #64 = Utf8               java/io/InputStream\n+   #65 = Utf8               read\n+   #66 = Utf8               ()I\n+   #67 = Methodref          #63.#68       // java/io/InputStream.read:()I\n+   #68 = NameAndType        #65:#66       // read:()I\n+   #69 = Methodref          #1.#70        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.count:(I)V\n+   #70 = NameAndType        #71:#72       // count:(I)V\n+   #71 = Utf8               count\n+   #72 = Utf8               (I)V\n+   #73 = Class              #74           // org/apache/commons/compress/MemoryLimitException\n+   #74 = Utf8               org/apache/commons/compress/MemoryLimitException\n+   #75 = Methodref          #76.#78       // org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+   #76 = Class              #77           // org/tukaani/xz/MemoryLimitException\n+   #77 = Utf8               org/tukaani/xz/MemoryLimitException\n+   #78 = NameAndType        #79:#66       // getMemoryNeeded:()I\n+   #79 = Utf8               getMemoryNeeded\n+   #80 = Methodref          #76.#81       // org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+   #81 = NameAndType        #82:#66       // getMemoryLimit:()I\n+   #82 = Utf8               getMemoryLimit\n+   #83 = Methodref          #73.#84       // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+   #84 = NameAndType        #27:#85       // \"<init>\":(JILjava/lang/Exception;)V\n+   #85 = Utf8               (JILjava/lang/Exception;)V\n+   #86 = Utf8               ret\n+   #87 = Utf8               e\n+   #88 = Utf8               Lorg/tukaani/xz/MemoryLimitException;\n+   #89 = Utf8               ([BII)I\n+   #90 = Methodref          #63.#91       // java/io/InputStream.read:([BII)I\n+   #91 = NameAndType        #65:#89       // read:([BII)I\n+   #92 = Utf8               buf\n+   #93 = Utf8               off\n+   #94 = Utf8               len\n+   #95 = Utf8               skip\n+   #96 = Utf8               (J)J\n+   #97 = Methodref          #98.#100      // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+   #98 = Class              #99           // org/apache/commons/compress/utils/IOUtils\n+   #99 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #100 = NameAndType        #95:#101      // skip:(Ljava/io/InputStream;J)J\n+  #101 = Utf8               (Ljava/io/InputStream;J)J\n+  #102 = Utf8               n\n+  #103 = Utf8               J\n+  #104 = Utf8               available\n+  #105 = Methodref          #63.#106      // java/io/InputStream.available:()I\n+  #106 = NameAndType        #104:#66      // available:()I\n+  #107 = Utf8               close\n+  #108 = Methodref          #63.#109      // java/io/InputStream.close:()V\n+  #109 = NameAndType        #107:#45      // close:()V\n+  #110 = Utf8               getCompressedCount\n+  #111 = Utf8               ()J\n+  #112 = Methodref          #46.#113      // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+  #113 = NameAndType        #114:#111     // getBytesRead:()J\n+  #114 = Utf8               getBytesRead\n+  #115 = Utf8               SourceFile\n+  #116 = Utf8               XZCompressorInputStream.java\n {\n   private final org.apache.commons.compress.utils.CountingInputStream countingStream;\n     descriptor: Lorg/apache/commons/compress/utils/CountingInputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final java.io.InputStream in;\n     descriptor: Ljava/io/InputStream;\n@@ -138,357 +135,357 @@\n \n   public static boolean matches(byte[], int);\n     descriptor: ([BI)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: iload_1\n-         1: getstatic     #1                  // Field org/tukaani/xz/XZ.HEADER_MAGIC:[B\n+         1: getstatic     #14                 // Field org/tukaani/xz/XZ.HEADER_MAGIC:[B\n          4: arraylength\n          5: if_icmpge     10\n          8: iconst_0\n          9: ireturn\n         10: iconst_0\n         11: istore_2\n-        12: iload_2\n-        13: getstatic     #1                  // Field org/tukaani/xz/XZ.HEADER_MAGIC:[B\n-        16: arraylength\n-        17: if_icmpge     39\n-        20: aload_0\n+        12: goto          31\n+        15: aload_0\n+        16: iload_2\n+        17: baload\n+        18: getstatic     #14                 // Field org/tukaani/xz/XZ.HEADER_MAGIC:[B\n         21: iload_2\n         22: baload\n-        23: getstatic     #1                  // Field org/tukaani/xz/XZ.HEADER_MAGIC:[B\n-        26: iload_2\n-        27: baload\n-        28: if_icmpeq     33\n-        31: iconst_0\n-        32: ireturn\n-        33: iinc          2, 1\n-        36: goto          12\n+        23: if_icmpeq     28\n+        26: iconst_0\n+        27: ireturn\n+        28: iinc          2, 1\n+        31: iload_2\n+        32: getstatic     #14                 // Field org/tukaani/xz/XZ.HEADER_MAGIC:[B\n+        35: arraylength\n+        36: if_icmplt     15\n         39: iconst_1\n         40: ireturn\n       LineNumberTable:\n         line 52: 0\n         line 53: 8\n         line 56: 10\n-        line 57: 20\n-        line 58: 31\n-        line 56: 33\n+        line 57: 15\n+        line 58: 26\n+        line 56: 28\n         line 62: 39\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           12      27     2     i   I\n             0      41     0 signature   [B\n             0      41     1 length   I\n+           12      27     2     i   I\n       StackMapTable: number_of_entries = 4\n         frame_type = 10 /* same */\n         frame_type = 252 /* append */\n-          offset_delta = 1\n+          offset_delta = 4\n           locals = [ int ]\n-        frame_type = 20 /* same */\n-        frame_type = 250 /* chop */\n-          offset_delta = 5\n+        frame_type = 12 /* same */\n+        frame_type = 2 /* same */\n \n   public org.apache.commons.compress.compressors.xz.XZCompressorInputStream(java.io.InputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: invokespecial #2                  // Method \"<init>\":(Ljava/io/InputStream;Z)V\n+         3: invokespecial #32                 // Method \"<init>\":(Ljava/io/InputStream;Z)V\n          6: return\n       LineNumberTable:\n         line 80: 0\n         line 81: 6\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n             0       7     1 inputStream   Ljava/io/InputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public org.apache.commons.compress.compressors.xz.XZCompressorInputStream(java.io.InputStream, boolean) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;Z)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iconst_m1\n-         4: invokespecial #3                  // Method \"<init>\":(Ljava/io/InputStream;ZI)V\n+         4: invokespecial #38                 // Method \"<init>\":(Ljava/io/InputStream;ZI)V\n          7: return\n       LineNumberTable:\n         line 103: 0\n         line 104: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n             0       8     1 inputStream   Ljava/io/InputStream;\n             0       8     2 decompressConcatenated   Z\n-    Exceptions:\n-      throws java.io.IOException\n \n   public org.apache.commons.compress.compressors.xz.XZCompressorInputStream(java.io.InputStream, boolean, int) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;ZI)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_0\n-         1: invokespecial #4                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+         1: invokespecial #43                 // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #5                  // class org/apache/commons/compress/utils/CountingInputStream\n+         5: new           #46                 // class org/apache/commons/compress/utils/CountingInputStream\n          8: dup\n          9: aload_1\n-        10: invokespecial #6                  // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-        13: putfield      #7                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        10: invokespecial #48                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        13: putfield      #50                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         16: iload_2\n         17: ifeq          39\n         20: aload_0\n-        21: new           #8                  // class org/tukaani/xz/XZInputStream\n+        21: new           #52                 // class org/tukaani/xz/XZInputStream\n         24: dup\n         25: aload_0\n-        26: getfield      #7                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        26: getfield      #50                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         29: iload_3\n-        30: invokespecial #9                  // Method org/tukaani/xz/XZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-        33: putfield      #10                 // Field in:Ljava/io/InputStream;\n+        30: invokespecial #54                 // Method org/tukaani/xz/XZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        33: putfield      #57                 // Field in:Ljava/io/InputStream;\n         36: goto          55\n         39: aload_0\n-        40: new           #11                 // class org/tukaani/xz/SingleXZInputStream\n+        40: new           #59                 // class org/tukaani/xz/SingleXZInputStream\n         43: dup\n         44: aload_0\n-        45: getfield      #7                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        45: getfield      #50                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         48: iload_3\n-        49: invokespecial #12                 // Method org/tukaani/xz/SingleXZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-        52: putfield      #10                 // Field in:Ljava/io/InputStream;\n+        49: invokespecial #61                 // Method org/tukaani/xz/SingleXZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        52: putfield      #57                 // Field in:Ljava/io/InputStream;\n         55: return\n       LineNumberTable:\n-        line 130: 0\n+        line 128: 0\n         line 131: 4\n         line 132: 16\n         line 133: 20\n+        line 134: 36\n         line 135: 39\n         line 137: 55\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      56     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n             0      56     1 inputStream   Ljava/io/InputStream;\n             0      56     2 decompressConcatenated   Z\n             0      56     3 memoryLimitInKb   I\n       StackMapTable: number_of_entries = 2\n         frame_type = 255 /* full_frame */\n           offset_delta = 39\n           locals = [ class org/apache/commons/compress/compressors/xz/XZCompressorInputStream, class java/io/InputStream, int, int ]\n           stack = []\n         frame_type = 15 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=6, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #10                 // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #13                 // Method java/io/InputStream.read:()I\n+         1: getfield      #57                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #67                 // Method java/io/InputStream.read:()I\n          7: istore_1\n          8: aload_0\n          9: iload_1\n         10: iconst_m1\n         11: if_icmpne     18\n         14: iconst_m1\n         15: goto          19\n         18: iconst_1\n-        19: invokevirtual #14                 // Method count:(I)V\n+        19: invokevirtual #69                 // Method count:(I)V\n         22: iload_1\n         23: ireturn\n         24: astore_1\n-        25: new           #16                 // class org/apache/commons/compress/MemoryLimitException\n+        25: new           #73                 // class org/apache/commons/compress/MemoryLimitException\n         28: dup\n         29: aload_1\n-        30: invokevirtual #17                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+        30: invokevirtual #75                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n         33: i2l\n         34: aload_1\n-        35: invokevirtual #18                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+        35: invokevirtual #80                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n         38: aload_1\n-        39: invokespecial #19                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+        39: invokespecial #83                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n         42: athrow\n       Exception table:\n          from    to  target type\n              0    23    24   Class org/tukaani/xz/MemoryLimitException\n       LineNumberTable:\n         line 142: 0\n         line 143: 8\n         line 144: 22\n         line 145: 24\n         line 146: 25\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n+            0      43     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n             8      16     1   ret   I\n            25      18     1     e   Lorg/tukaani/xz/MemoryLimitException;\n-            0      43     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n       StackMapTable: number_of_entries = 3\n         frame_type = 255 /* full_frame */\n           offset_delta = 18\n           locals = [ class org/apache/commons/compress/compressors/xz/XZCompressorInputStream, int ]\n           stack = [ class org/apache/commons/compress/compressors/xz/XZCompressorInputStream ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 0\n           locals = [ class org/apache/commons/compress/compressors/xz/XZCompressorInputStream, int ]\n           stack = [ class org/apache/commons/compress/compressors/xz/XZCompressorInputStream, int ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 4\n           locals = [ class org/apache/commons/compress/compressors/xz/XZCompressorInputStream ]\n           stack = [ class org/tukaani/xz/MemoryLimitException ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int read(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=6, locals=5, args_size=4\n          0: iload_3\n          1: ifne          6\n          4: iconst_0\n          5: ireturn\n          6: aload_0\n-         7: getfield      #10                 // Field in:Ljava/io/InputStream;\n+         7: getfield      #57                 // Field in:Ljava/io/InputStream;\n         10: aload_1\n         11: iload_2\n         12: iload_3\n-        13: invokevirtual #20                 // Method java/io/InputStream.read:([BII)I\n+        13: invokevirtual #90                 // Method java/io/InputStream.read:([BII)I\n         16: istore        4\n         18: aload_0\n         19: iload         4\n-        21: invokevirtual #14                 // Method count:(I)V\n+        21: invokevirtual #69                 // Method count:(I)V\n         24: iload         4\n         26: ireturn\n         27: astore        4\n-        29: new           #16                 // class org/apache/commons/compress/MemoryLimitException\n+        29: new           #73                 // class org/apache/commons/compress/MemoryLimitException\n         32: dup\n         33: aload         4\n-        35: invokevirtual #17                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+        35: invokevirtual #75                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n         38: i2l\n         39: aload         4\n-        41: invokevirtual #18                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+        41: invokevirtual #80                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n         44: aload         4\n-        46: invokespecial #19                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+        46: invokespecial #83                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n         49: athrow\n       Exception table:\n          from    to  target type\n              6    26    27   Class org/tukaani/xz/MemoryLimitException\n       LineNumberTable:\n         line 152: 0\n         line 153: 4\n         line 156: 6\n         line 157: 18\n         line 158: 24\n         line 159: 27\n         line 161: 29\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           18       9     4   ret   I\n-           29      21     4     e   Lorg/tukaani/xz/MemoryLimitException;\n             0      50     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n             0      50     1   buf   [B\n             0      50     2   off   I\n             0      50     3   len   I\n+           18       9     4   ret   I\n+           29      21     4     e   Lorg/tukaani/xz/MemoryLimitException;\n       StackMapTable: number_of_entries = 2\n         frame_type = 6 /* same */\n         frame_type = 84 /* same_locals_1_stack_item */\n           stack = [ class org/tukaani/xz/MemoryLimitException ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   public long skip(long) throws java.io.IOException;\n     descriptor: (J)J\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=6, locals=4, args_size=2\n          0: aload_0\n-         1: getfield      #10                 // Field in:Ljava/io/InputStream;\n+         1: getfield      #57                 // Field in:Ljava/io/InputStream;\n          4: lload_1\n-         5: invokestatic  #21                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+         5: invokestatic  #97                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n          8: lreturn\n          9: astore_3\n-        10: new           #16                 // class org/apache/commons/compress/MemoryLimitException\n+        10: new           #73                 // class org/apache/commons/compress/MemoryLimitException\n         13: dup\n         14: aload_3\n-        15: invokevirtual #17                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+        15: invokevirtual #75                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n         18: i2l\n         19: aload_3\n-        20: invokevirtual #18                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+        20: invokevirtual #80                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n         23: aload_3\n-        24: invokespecial #19                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+        24: invokespecial #83                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n         27: athrow\n       Exception table:\n          from    to  target type\n              0     8     9   Class org/tukaani/xz/MemoryLimitException\n       LineNumberTable:\n         line 168: 0\n         line 169: 9\n         line 171: 10\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           10      18     3     e   Lorg/tukaani/xz/MemoryLimitException;\n             0      28     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n             0      28     1     n   J\n+           10      18     3     e   Lorg/tukaani/xz/MemoryLimitException;\n       StackMapTable: number_of_entries = 1\n         frame_type = 73 /* same_locals_1_stack_item */\n           stack = [ class org/tukaani/xz/MemoryLimitException ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #10                 // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #22                 // Method java/io/InputStream.available:()I\n+         1: getfield      #57                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #105                // Method java/io/InputStream.available:()I\n          7: ireturn\n       LineNumberTable:\n         line 177: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #10                 // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #23                 // Method java/io/InputStream.close:()V\n+         1: getfield      #57                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #108                // Method java/io/InputStream.close:()V\n          7: return\n       LineNumberTable:\n         line 182: 0\n         line 183: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-         4: invokevirtual #24                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+         1: getfield      #50                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+         4: invokevirtual #112                // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n          7: lreturn\n       LineNumberTable:\n         line 190: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n }\n"}]}
