{"diffoscope-json-version": 1, "source1": "first/Method.class", "source2": "second/Method.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,14 +7,18 @@\n import org.apache.bcel.util.BCELComparator;\n \n public final class Method extends FieldOrMethod\n {\n     private static BCELComparator bcelComparator;\n     private ParameterAnnotationEntry[] parameterAnnotationEntries;\n     \n+    static {\n+        Method.bcelComparator = (BCELComparator)new Method.Method$1();\n+    }\n+    \n     public Method() {\n     }\n     \n     public Method(final Method c) {\n         super((FieldOrMethod)c);\n     }\n     \n@@ -27,24 +31,28 @@\n     }\n     \n     public void accept(final Visitor v) {\n         v.visitMethod(this);\n     }\n     \n     public Code getCode() {\n-        for (final Attribute attribute : super.getAttributes()) {\n+        Attribute[] attributes;\n+        for (int length = (attributes = super.getAttributes()).length, i = 0; i < length; ++i) {\n+            final Attribute attribute = attributes[i];\n             if (attribute instanceof Code) {\n                 return (Code)attribute;\n             }\n         }\n         return null;\n     }\n     \n     public ExceptionTable getExceptionTable() {\n-        for (final Attribute attribute : super.getAttributes()) {\n+        Attribute[] attributes;\n+        for (int length = (attributes = super.getAttributes()).length, i = 0; i < length; ++i) {\n+            final Attribute attribute = attributes[i];\n             if (attribute instanceof ExceptionTable) {\n                 return (ExceptionTable)attribute;\n             }\n         }\n         return null;\n     }\n     \n@@ -68,15 +76,17 @@\n         final String access = Utility.accessToString(super.getAccessFlags());\n         ConstantUtf8 c = (ConstantUtf8)super.getConstantPool().getConstant(super.getSignatureIndex(), (byte)1);\n         String signature = c.getBytes();\n         c = (ConstantUtf8)super.getConstantPool().getConstant(super.getNameIndex(), (byte)1);\n         final String name = c.getBytes();\n         signature = Utility.methodSignatureToString(signature, name, access, true, this.getLocalVariableTable());\n         final StringBuilder buf = new StringBuilder(signature);\n-        for (final Attribute attribute : super.getAttributes()) {\n+        Attribute[] attributes;\n+        for (int length = (attributes = super.getAttributes()).length, i = 0; i < length; ++i) {\n+            final Attribute attribute = attributes[i];\n             if (!(attribute instanceof Code) && !(attribute instanceof ExceptionTable)) {\n                 buf.append(\" [\").append(attribute).append(\"]\");\n             }\n         }\n         final ExceptionTable e = this.getExceptionTable();\n         if (e != null) {\n             final String str = e.toString();\n@@ -117,12 +127,8 @@\n     \n     public ParameterAnnotationEntry[] getParameterAnnotationEntries() {\n         if (this.parameterAnnotationEntries == null) {\n             this.parameterAnnotationEntries = ParameterAnnotationEntry.createParameterAnnotationEntries(this.getAttributes());\n         }\n         return this.parameterAnnotationEntries;\n     }\n-    \n-    static {\n-        Method.bcelComparator = (BCELComparator)new Method.Method$1();\n-    }\n }\n"}]}
