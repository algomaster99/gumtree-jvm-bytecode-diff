{"diffoscope-json-version": 1, "source1": "first/BlockParentHandler.class", "source2": "second/BlockParentHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,87 +4,86 @@\n import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n \n public class BlockParentHandler extends AbstractExpressionHandler\n {\n     private static final int[] CHECKED_CHILDREN;\n     \n-    public BlockParentHandler(final IndentationCheck indentCheck, final String name, final DetailAST ast, final AbstractExpressionHandler parent) {\n-        super(indentCheck, name, ast, parent);\n+    public BlockParentHandler(final IndentationCheck indentationCheck, final String s, final DetailAST detailAST, final AbstractExpressionHandler abstractExpressionHandler) {\n+        super(indentationCheck, s, detailAST, abstractExpressionHandler);\n     }\n     \n     protected int[] getCheckedChildren() {\n         return BlockParentHandler.CHECKED_CHILDREN.clone();\n     }\n     \n     protected DetailAST getTopLevelAst() {\n         return this.getMainAst();\n     }\n     \n     protected void checkTopLevelToken() {\n-        final DetailAST topLevel = this.getTopLevelAst();\n-        if (topLevel != null && !this.getIndent().isAcceptable(this.expandedTabsColumnNo(topLevel)) && this.isOnStartOfLine(topLevel)) {\n-            this.logError(topLevel, \"\", this.expandedTabsColumnNo(topLevel));\n+        final DetailAST topLevelAst = this.getTopLevelAst();\n+        if (topLevelAst != null && !this.getIndent().isAcceptable(this.expandedTabsColumnNo(topLevelAst)) && this.isOnStartOfLine(topLevelAst)) {\n+            this.logError(topLevelAst, \"\", this.expandedTabsColumnNo(topLevelAst));\n         }\n     }\n     \n     private boolean hasCurlies() {\n         return this.getLeftCurly() != null && this.getRightCurly() != null;\n     }\n     \n     protected DetailAST getLeftCurly() {\n         return this.getMainAst().findFirstToken(7);\n     }\n     \n     protected DetailAST getRightCurly() {\n-        final DetailAST slist = this.getMainAst().findFirstToken(7);\n-        return slist.findFirstToken(73);\n+        return this.getMainAst().findFirstToken(7).findFirstToken(73);\n     }\n     \n     private void checkLeftCurly() {\n-        final DetailAST lcurly = this.getLeftCurly();\n-        final int lcurlyPos = this.expandedTabsColumnNo(lcurly);\n-        if (!this.curlyIndent().isAcceptable(lcurlyPos) && this.isOnStartOfLine(lcurly)) {\n-            this.logError(lcurly, \"lcurly\", lcurlyPos, this.curlyIndent());\n+        final DetailAST leftCurly = this.getLeftCurly();\n+        final int expandedTabsColumnNo = this.expandedTabsColumnNo(leftCurly);\n+        if (!this.curlyIndent().isAcceptable(expandedTabsColumnNo) && this.isOnStartOfLine(leftCurly)) {\n+            this.logError(leftCurly, \"lcurly\", expandedTabsColumnNo, this.curlyIndent());\n         }\n     }\n     \n     protected IndentLevel curlyIndent() {\n-        final DetailAST lcurly = this.getLeftCurly();\n-        IndentLevel expIndentLevel = new IndentLevel(this.getIndent(), new int[] { this.getBraceAdjustment() });\n-        if (!this.isOnStartOfLine(lcurly) || lcurly.getParent().getType() == 11) {\n-            expIndentLevel = new IndentLevel(this.getIndent(), new int[] { 0 });\n+        final DetailAST leftCurly = this.getLeftCurly();\n+        IndentLevel indentLevel = new IndentLevel(this.getIndent(), new int[] { this.getBraceAdjustment() });\n+        if (!this.isOnStartOfLine(leftCurly) || leftCurly.getParent().getType() == 11) {\n+            indentLevel = new IndentLevel(this.getIndent(), new int[] { 0 });\n         }\n-        return expIndentLevel;\n+        return indentLevel;\n     }\n     \n     protected boolean canChildrenBeNested() {\n         return false;\n     }\n     \n     private void checkRightCurly() {\n-        final DetailAST rcurly = this.getRightCurly();\n-        final int rcurlyPos = this.expandedTabsColumnNo(rcurly);\n-        if (!this.curlyIndent().isAcceptable(rcurlyPos) && this.isOnStartOfLine(rcurly)) {\n-            this.logError(rcurly, \"rcurly\", rcurlyPos, this.curlyIndent());\n+        final DetailAST rightCurly = this.getRightCurly();\n+        final int expandedTabsColumnNo = this.expandedTabsColumnNo(rightCurly);\n+        if (!this.curlyIndent().isAcceptable(expandedTabsColumnNo) && this.isOnStartOfLine(rightCurly)) {\n+            this.logError(rightCurly, \"rcurly\", expandedTabsColumnNo, this.curlyIndent());\n         }\n     }\n     \n     protected DetailAST getNonListChild() {\n         return this.getMainAst().findFirstToken(77).getNextSibling();\n     }\n     \n     private void checkNonListChild() {\n-        final DetailAST nonList = this.getNonListChild();\n-        if (nonList != null) {\n-            final IndentLevel expected = new IndentLevel(this.getIndent(), new int[] { this.getBasicOffset() });\n-            this.checkExpressionSubtree(nonList, expected, false, false);\n-            final DetailAST nonListStartAst = getFirstAstNode(nonList);\n-            if (nonList != nonListStartAst) {\n-                this.checkExpressionSubtree(nonListStartAst, expected, false, false);\n+        final DetailAST nonListChild = this.getNonListChild();\n+        if (nonListChild != null) {\n+            final IndentLevel indentLevel = new IndentLevel(this.getIndent(), new int[] { this.getBasicOffset() });\n+            this.checkExpressionSubtree(nonListChild, indentLevel, false, false);\n+            final DetailAST firstAstNode = getFirstAstNode(nonListChild);\n+            if (nonListChild != firstAstNode) {\n+                this.checkExpressionSubtree(firstAstNode, indentLevel, false, false);\n             }\n         }\n     }\n     \n     protected DetailAST getListChild() {\n         return this.getMainAst().findFirstToken(7);\n     }\n@@ -117,25 +116,25 @@\n     protected IndentLevel getChildrenExpectedIndent() {\n         IndentLevel indentLevel = new IndentLevel(this.getIndent(), new int[] { this.getBasicOffset() });\n         if (this.getIndent().isMultiLevel() && this.hasCurlies()) {\n             if (this.isOnStartOfLine(this.getLeftCurly())) {\n                 indentLevel = new IndentLevel(this.expandedTabsColumnNo(this.getLeftCurly()) + this.getBasicOffset());\n             }\n             else if (this.isOnStartOfLine(this.getRightCurly())) {\n-                final IndentLevel level = new IndentLevel(this.curlyIndent(), new int[] { this.getBasicOffset() });\n-                indentLevel = IndentLevel.addAcceptable(level, new int[] { level.getFirstIndentLevel() + this.getLineWrappingIndent() });\n+                final IndentLevel indentLevel2 = new IndentLevel(this.curlyIndent(), new int[] { this.getBasicOffset() });\n+                indentLevel = IndentLevel.addAcceptable(indentLevel2, new int[] { indentLevel2.getFirstIndentLevel() + this.getLineWrappingIndent() });\n             }\n         }\n         if (this.hasCurlies() && this.isOnStartOfLine(this.getLeftCurly())) {\n             indentLevel = IndentLevel.addAcceptable(indentLevel, new int[] { this.curlyIndent().getFirstIndentLevel() + this.getBasicOffset() });\n         }\n         return indentLevel;\n     }\n     \n-    public IndentLevel getSuggestedChildIndent(final AbstractExpressionHandler child) {\n+    public IndentLevel getSuggestedChildIndent(final AbstractExpressionHandler abstractExpressionHandler) {\n         return this.getChildrenExpectedIndent();\n     }\n     \n     private int getLineWrappingIndent() {\n         return this.getIndentCheck().getLineWrappingIndentation();\n     }\n     \n"}]}
