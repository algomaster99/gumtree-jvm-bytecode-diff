{"diffoscope-json-version": 1, "source1": "first/ConstructorUtils.class", "source2": "second/ConstructorUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,93 +8,86 @@\n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.ArrayUtils;\n \n public class ConstructorUtils\n {\n-    public static <T> T invokeConstructor(final Class<T> cls, Object... args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n-        args = ArrayUtils.nullToEmpty(args);\n-        final Class<?>[] parameterTypes = ClassUtils.toClass(args);\n-        return invokeConstructor(cls, args, parameterTypes);\n+    public static <T> T invokeConstructor(final Class<T> clazz, Object... nullToEmpty) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n+        nullToEmpty = ArrayUtils.nullToEmpty(nullToEmpty);\n+        return invokeConstructor(clazz, nullToEmpty, ClassUtils.toClass(nullToEmpty));\n     }\n     \n-    public static <T> T invokeConstructor(final Class<T> cls, Object[] args, Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n-        args = ArrayUtils.nullToEmpty(args);\n-        parameterTypes = ArrayUtils.nullToEmpty((Class[])parameterTypes);\n-        final Constructor<T> ctor = getMatchingAccessibleConstructor(cls, parameterTypes);\n-        if (ctor == null) {\n-            throw new NoSuchMethodException(\"No such accessible constructor on object: \" + cls.getName());\n+    public static <T> T invokeConstructor(final Class<T> clazz, Object[] initargs, final Class<?>[] array) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n+        initargs = ArrayUtils.nullToEmpty(initargs);\n+        final Constructor<T> matchingAccessibleConstructor = getMatchingAccessibleConstructor(clazz, (Class<?>[])ArrayUtils.nullToEmpty((Class[])array));\n+        if (matchingAccessibleConstructor == null) {\n+            throw new NoSuchMethodException(\"No such accessible constructor on object: \" + clazz.getName());\n         }\n-        if (ctor.isVarArgs()) {\n-            final Class<?>[] methodParameterTypes = ctor.getParameterTypes();\n-            args = MethodUtils.getVarArgs(args, (Class[])methodParameterTypes);\n+        if (matchingAccessibleConstructor.isVarArgs()) {\n+            initargs = MethodUtils.getVarArgs(initargs, (Class[])matchingAccessibleConstructor.getParameterTypes());\n         }\n-        return ctor.newInstance(args);\n+        return (T)matchingAccessibleConstructor.newInstance(initargs);\n     }\n     \n-    public static <T> T invokeExactConstructor(final Class<T> cls, Object... args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n-        args = ArrayUtils.nullToEmpty(args);\n-        final Class<?>[] parameterTypes = ClassUtils.toClass(args);\n-        return invokeExactConstructor(cls, args, parameterTypes);\n+    public static <T> T invokeExactConstructor(final Class<T> clazz, Object... nullToEmpty) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n+        nullToEmpty = ArrayUtils.nullToEmpty(nullToEmpty);\n+        return invokeExactConstructor(clazz, nullToEmpty, ClassUtils.toClass(nullToEmpty));\n     }\n     \n-    public static <T> T invokeExactConstructor(final Class<T> cls, Object[] args, Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n-        args = ArrayUtils.nullToEmpty(args);\n-        parameterTypes = ArrayUtils.nullToEmpty((Class[])parameterTypes);\n-        final Constructor<T> ctor = getAccessibleConstructor(cls, parameterTypes);\n-        if (ctor == null) {\n-            throw new NoSuchMethodException(\"No such accessible constructor on object: \" + cls.getName());\n+    public static <T> T invokeExactConstructor(final Class<T> clazz, Object[] nullToEmpty, final Class<?>[] array) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\n+        nullToEmpty = ArrayUtils.nullToEmpty(nullToEmpty);\n+        final Constructor<T> accessibleConstructor = getAccessibleConstructor(clazz, (Class<?>[])ArrayUtils.nullToEmpty((Class[])array));\n+        if (accessibleConstructor == null) {\n+            throw new NoSuchMethodException(\"No such accessible constructor on object: \" + clazz.getName());\n         }\n-        return ctor.newInstance(args);\n+        return accessibleConstructor.newInstance(nullToEmpty);\n     }\n     \n-    public static <T> Constructor<T> getAccessibleConstructor(final Class<T> cls, final Class<?>... parameterTypes) {\n-        Validate.notNull((Object)cls, \"cls\", new Object[0]);\n+    public static <T> Constructor<T> getAccessibleConstructor(final Class<T> clazz, final Class<?>... parameterTypes) {\n+        Validate.notNull((Object)clazz, \"cls\", new Object[0]);\n         try {\n-            return getAccessibleConstructor(cls.getConstructor(parameterTypes));\n+            return getAccessibleConstructor(clazz.getConstructor(parameterTypes));\n         }\n-        catch (final NoSuchMethodException e) {\n+        catch (final NoSuchMethodException ex) {\n             return null;\n         }\n     }\n     \n-    public static <T> Constructor<T> getAccessibleConstructor(final Constructor<T> ctor) {\n-        Validate.notNull((Object)ctor, \"ctor\", new Object[0]);\n-        return (MemberUtils.isAccessible((Member)ctor) && isAccessible(ctor.getDeclaringClass())) ? ctor : null;\n+    public static <T> Constructor<T> getAccessibleConstructor(final Constructor<T> constructor) {\n+        Validate.notNull((Object)constructor, \"ctor\", new Object[0]);\n+        return (MemberUtils.isAccessible((Member)constructor) && isAccessible(constructor.getDeclaringClass())) ? constructor : null;\n     }\n     \n-    public static <T> Constructor<T> getMatchingAccessibleConstructor(final Class<T> cls, final Class<?>... parameterTypes) {\n-        Validate.notNull((Object)cls, \"cls\", new Object[0]);\n+    public static <T> Constructor<T> getMatchingAccessibleConstructor(final Class<T> clazz, final Class<?>... parameterTypes) {\n+        Validate.notNull((Object)clazz, \"cls\", new Object[0]);\n         try {\n-            final Constructor<T> ctor = cls.getConstructor(parameterTypes);\n-            MemberUtils.setAccessibleWorkaround((AccessibleObject)ctor);\n-            return ctor;\n+            final Constructor constructor = clazz.getConstructor((Class[])parameterTypes);\n+            MemberUtils.setAccessibleWorkaround((AccessibleObject)constructor);\n+            return constructor;\n         }\n         catch (final NoSuchMethodException ex) {\n-            Constructor<T> result = null;\n-            final Constructor<?>[] constructors;\n-            final Constructor<?>[] ctors = constructors = cls.getConstructors();\n-            for (Constructor<?> ctor2 : constructors) {\n-                if (MemberUtils.isMatchingConstructor((Constructor)ctor2, (Class[])parameterTypes)) {\n-                    ctor2 = getAccessibleConstructor(ctor2);\n-                    if (ctor2 != null) {\n-                        MemberUtils.setAccessibleWorkaround((AccessibleObject)ctor2);\n-                        if (result == null || MemberUtils.compareConstructorFit((Constructor)ctor2, (Constructor)result, (Class[])parameterTypes) < 0) {\n-                            final Constructor<T> constructor = result = (Constructor<T>)ctor2;\n+            Constructor<Object> constructor2 = null;\n+            for (final Constructor constructor3 : clazz.getConstructors()) {\n+                if (MemberUtils.isMatchingConstructor((Constructor)constructor3, (Class[])parameterTypes)) {\n+                    final Constructor<Object> accessibleConstructor = getAccessibleConstructor(constructor3);\n+                    if (accessibleConstructor != null) {\n+                        MemberUtils.setAccessibleWorkaround((AccessibleObject)accessibleConstructor);\n+                        if (constructor2 == null || MemberUtils.compareConstructorFit((Constructor)accessibleConstructor, (Constructor)constructor2, (Class[])parameterTypes) < 0) {\n+                            constructor2 = accessibleConstructor;\n                         }\n                     }\n                 }\n             }\n-            return result;\n+            return (Constructor<T>)constructor2;\n         }\n     }\n     \n-    private static boolean isAccessible(final Class<?> type) {\n-        for (Class<?> cls = type; cls != null; cls = cls.getEnclosingClass()) {\n-            if (!Modifier.isPublic(cls.getModifiers())) {\n+    private static boolean isAccessible(final Class<?> clazz) {\n+        for (Class<?> enclosingClass = clazz; enclosingClass != null; enclosingClass = enclosingClass.getEnclosingClass()) {\n+            if (!Modifier.isPublic(enclosingClass.getModifiers())) {\n                 return false;\n             }\n         }\n         return true;\n     }\n }\n"}]}
