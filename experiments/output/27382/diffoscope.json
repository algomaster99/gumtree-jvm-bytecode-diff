{"diffoscope-json-version": 1, "source1": "first/NioZipEncoding.class", "source2": "second/NioZipEncoding.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,277 +1,277 @@\n-  SHA-256 checksum 465f35a2ea2c64d2c52efa7677722a34b772e651e41f7ae5dc5bc647b22d47c6\n+  SHA-256 checksum d266e60781d2b48f9083b7d22485742acbcf3714205e5f0ca393df10aa0c5b79\n   Compiled from \"NioZipEncoding.java\"\n class org.apache.commons.compress.archivers.zip.NioZipEncoding implements org.apache.commons.compress.archivers.zip.ZipEncoding,org.apache.commons.compress.archivers.zip.CharsetAccessor\n   minor version: 0\n   major version: 53\n   flags: (0x0020) ACC_SUPER\n-  this_class: #56                         // org/apache/commons/compress/archivers/zip/NioZipEncoding\n-  super_class: #58                        // java/lang/Object\n+  this_class: #8                          // org/apache/commons/compress/archivers/zip/NioZipEncoding\n+  super_class: #2                         // java/lang/Object\n   interfaces: 2, fields: 6, methods: 12, attributes: 1\n Constant pool:\n-    #1 = Methodref          #58.#137      // java/lang/Object.\"<init>\":()V\n-    #2 = Fieldref           #56.#138      // org/apache/commons/compress/archivers/zip/NioZipEncoding.charset:Ljava/nio/charset/Charset;\n-    #3 = Fieldref           #56.#139      // org/apache/commons/compress/archivers/zip/NioZipEncoding.useReplacement:Z\n-    #4 = Methodref          #56.#140      // org/apache/commons/compress/archivers/zip/NioZipEncoding.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n-    #5 = Methodref          #106.#141     // java/nio/charset/CharsetEncoder.canEncode:(Ljava/lang/CharSequence;)Z\n-    #6 = Methodref          #107.#142     // java/nio/CharBuffer.wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n-    #7 = Methodref          #107.#143     // java/nio/CharBuffer.remaining:()I\n-    #8 = Methodref          #56.#144      // org/apache/commons/compress/archivers/zip/NioZipEncoding.estimateInitialBufferSize:(Ljava/nio/charset/CharsetEncoder;I)I\n-    #9 = Methodref          #108.#145     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #10 = Methodref          #107.#146     // java/nio/CharBuffer.hasRemaining:()Z\n-   #11 = Methodref          #106.#147     // java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n-   #12 = Methodref          #109.#148     // java/nio/charset/CoderResult.isUnmappable:()Z\n-   #13 = Methodref          #109.#149     // java/nio/charset/CoderResult.isMalformed:()Z\n-   #14 = Methodref          #109.#150     // java/nio/charset/CoderResult.length:()I\n-   #15 = Methodref          #56.#151      // org/apache/commons/compress/archivers/zip/NioZipEncoding.estimateIncrementalEncodingSize:(Ljava/nio/charset/CharsetEncoder;I)I\n-   #16 = Methodref          #108.#143     // java/nio/ByteBuffer.remaining:()I\n-   #17 = Methodref          #107.#152     // java/nio/CharBuffer.position:()I\n-   #18 = Methodref          #107.#153     // java/nio/CharBuffer.limit:()I\n-   #19 = Methodref          #107.#154     // java/nio/CharBuffer.get:(I)C\n-   #20 = Methodref          #106.#155     // java/nio/charset/CharsetEncoder.canEncode:(C)Z\n-   #21 = Methodref          #156.#157     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.growBufferBy:(Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n-   #22 = Methodref          #107.#158     // java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;\n-   #23 = Methodref          #107.#159     // java/nio/CharBuffer.get:()C\n-   #24 = Methodref          #56.#160      // org/apache/commons/compress/archivers/zip/NioZipEncoding.encodeSurrogate:(Ljava/nio/CharBuffer;C)Ljava/nio/CharBuffer;\n-   #25 = Methodref          #56.#161      // org/apache/commons/compress/archivers/zip/NioZipEncoding.encodeFully:(Ljava/nio/charset/CharsetEncoder;Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n-   #26 = Methodref          #109.#162     // java/nio/charset/CoderResult.isOverflow:()Z\n-   #27 = Methodref          #109.#163     // java/nio/charset/CoderResult.isUnderflow:()Z\n-   #28 = Methodref          #109.#164     // java/nio/charset/CoderResult.isError:()Z\n-   #29 = Methodref          #108.#152     // java/nio/ByteBuffer.position:()I\n-   #30 = Methodref          #108.#165     // java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n-   #31 = Methodref          #108.#166     // java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n-   #32 = Methodref          #56.#167      // org/apache/commons/compress/archivers/zip/NioZipEncoding.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n-   #33 = Methodref          #108.#168     // java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-   #34 = Methodref          #169.#170     // java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;\n-   #35 = Methodref          #107.#171     // java/nio/CharBuffer.toString:()Ljava/lang/String;\n-   #36 = Methodref          #107.#172     // java/nio/CharBuffer.position:(I)Ljava/nio/CharBuffer;\n-   #37 = Methodref          #107.#173     // java/nio/CharBuffer.limit:(I)Ljava/nio/CharBuffer;\n-   #38 = Methodref          #107.#174     // java/nio/CharBuffer.put:(C)Ljava/nio/CharBuffer;\n-   #39 = Fieldref           #56.#175      // org/apache/commons/compress/archivers/zip/NioZipEncoding.HEX_CHARS:[C\n-   #40 = Methodref          #107.#176     // java/nio/CharBuffer.flip:()Ljava/nio/CharBuffer;\n-   #41 = Methodref          #177.#140     // java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n-   #42 = Fieldref           #178.#179     // java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n-   #43 = Methodref          #106.#180     // java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-   #44 = Methodref          #106.#181     // java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-   #45 = Fieldref           #56.#182      // org/apache/commons/compress/archivers/zip/NioZipEncoding.REPLACEMENT_BYTES:[B\n-   #46 = Methodref          #106.#183     // java/nio/charset/CharsetEncoder.replaceWith:([B)Ljava/nio/charset/CharsetEncoder;\n-   #47 = Fieldref           #178.#184     // java/nio/charset/CodingErrorAction.REPORT:Ljava/nio/charset/CodingErrorAction;\n-   #48 = Methodref          #177.#167     // java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n-   #49 = Methodref          #169.#185     // java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-   #50 = Methodref          #169.#186     // java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-   #51 = Fieldref           #56.#187      // org/apache/commons/compress/archivers/zip/NioZipEncoding.REPLACEMENT_STRING:Ljava/lang/String;\n-   #52 = Methodref          #169.#188     // java/nio/charset/CharsetDecoder.replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n-   #53 = Methodref          #106.#189     // java/nio/charset/CharsetEncoder.maxBytesPerChar:()F\n-   #54 = Methodref          #106.#190     // java/nio/charset/CharsetEncoder.averageBytesPerChar:()F\n-   #55 = Methodref          #191.#192     // java/lang/Math.ceil:(D)D\n-   #56 = Class              #193          // org/apache/commons/compress/archivers/zip/NioZipEncoding\n-   #57 = Methodref          #105.#194     // java/lang/String.valueOf:(C)Ljava/lang/String;\n-   #58 = Class              #195          // java/lang/Object\n-   #59 = Class              #196          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-   #60 = Class              #197          // org/apache/commons/compress/archivers/zip/CharsetAccessor\n-   #61 = Utf8               charset\n-   #62 = Utf8               Ljava/nio/charset/Charset;\n-   #63 = Utf8               useReplacement\n-   #64 = Utf8               Z\n-   #65 = Utf8               REPLACEMENT\n-   #66 = Utf8               C\n-   #67 = Utf8               ConstantValue\n-   #68 = Integer            63\n-   #69 = Utf8               REPLACEMENT_BYTES\n-   #70 = Utf8               [B\n-   #71 = Utf8               REPLACEMENT_STRING\n-   #72 = Utf8               Ljava/lang/String;\n-   #73 = Utf8               HEX_CHARS\n-   #74 = Utf8               [C\n-   #75 = Utf8               <init>\n-   #76 = Utf8               (Ljava/nio/charset/Charset;Z)V\n-   #77 = Utf8               Code\n-   #78 = Utf8               LineNumberTable\n-   #79 = Utf8               LocalVariableTable\n-   #80 = Utf8               this\n-   #81 = Utf8               Lorg/apache/commons/compress/archivers/zip/NioZipEncoding;\n-   #82 = Utf8               getCharset\n-   #83 = Utf8               ()Ljava/nio/charset/Charset;\n-   #84 = Utf8               canEncode\n-   #85 = Utf8               (Ljava/lang/String;)Z\n-   #86 = Utf8               name\n-   #87 = Utf8               enc\n-   #88 = Utf8               Ljava/nio/charset/CharsetEncoder;\n-   #89 = Utf8               encode\n-   #90 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-   #91 = Utf8               i\n-   #92 = Utf8               I\n-   #93 = Utf8               charCount\n-   #94 = Utf8               totalExtraSpace\n-   #95 = Utf8               spaceForSurrogate\n-   #96 = Utf8               increment\n-   #97 = Utf8               res\n-   #98 = Utf8               Ljava/nio/charset/CoderResult;\n-   #99 = Utf8               cb\n-  #100 = Utf8               Ljava/nio/CharBuffer;\n-  #101 = Utf8               tmp\n-  #102 = Utf8               out\n-  #103 = Utf8               Ljava/nio/ByteBuffer;\n-  #104 = Utf8               StackMapTable\n-  #105 = Class              #198          // java/lang/String\n-  #106 = Class              #199          // java/nio/charset/CharsetEncoder\n-  #107 = Class              #200          // java/nio/CharBuffer\n-  #108 = Class              #201          // java/nio/ByteBuffer\n-  #109 = Class              #202          // java/nio/charset/CoderResult\n-  #110 = Utf8               decode\n-  #111 = Utf8               ([B)Ljava/lang/String;\n-  #112 = Utf8               data\n-  #113 = Utf8               Exceptions\n-  #114 = Class              #203          // java/io/IOException\n-  #115 = Utf8               encodeFully\n-  #116 = Utf8               (Ljava/nio/charset/CharsetEncoder;Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n-  #117 = Utf8               result\n-  #118 = Utf8               o\n-  #119 = Utf8               encodeSurrogate\n-  #120 = Utf8               (Ljava/nio/CharBuffer;C)Ljava/nio/CharBuffer;\n-  #121 = Utf8               c\n-  #122 = Utf8               newEncoder\n-  #123 = Utf8               ()Ljava/nio/charset/CharsetEncoder;\n-  #124 = Utf8               newDecoder\n-  #125 = Utf8               ()Ljava/nio/charset/CharsetDecoder;\n-  #126 = Utf8               estimateInitialBufferSize\n-  #127 = Utf8               (Ljava/nio/charset/CharsetEncoder;I)I\n-  #128 = Utf8               charChount\n-  #129 = Utf8               first\n-  #130 = Utf8               F\n-  #131 = Utf8               rest\n-  #132 = Utf8               estimateIncrementalEncodingSize\n-  #133 = Utf8               <clinit>\n-  #134 = Utf8               ()V\n-  #135 = Utf8               SourceFile\n-  #136 = Utf8               NioZipEncoding.java\n-  #137 = NameAndType        #75:#134      // \"<init>\":()V\n-  #138 = NameAndType        #61:#62       // charset:Ljava/nio/charset/Charset;\n-  #139 = NameAndType        #63:#64       // useReplacement:Z\n-  #140 = NameAndType        #122:#123     // newEncoder:()Ljava/nio/charset/CharsetEncoder;\n-  #141 = NameAndType        #84:#204      // canEncode:(Ljava/lang/CharSequence;)Z\n-  #142 = NameAndType        #205:#206     // wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n-  #143 = NameAndType        #207:#208     // remaining:()I\n-  #144 = NameAndType        #126:#127     // estimateInitialBufferSize:(Ljava/nio/charset/CharsetEncoder;I)I\n-  #145 = NameAndType        #209:#210     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #146 = NameAndType        #211:#212     // hasRemaining:()Z\n-  #147 = NameAndType        #89:#213      // encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n-  #148 = NameAndType        #214:#212     // isUnmappable:()Z\n-  #149 = NameAndType        #215:#212     // isMalformed:()Z\n-  #150 = NameAndType        #216:#208     // length:()I\n-  #151 = NameAndType        #132:#127     // estimateIncrementalEncodingSize:(Ljava/nio/charset/CharsetEncoder;I)I\n-  #152 = NameAndType        #217:#208     // position:()I\n-  #153 = NameAndType        #218:#208     // limit:()I\n-  #154 = NameAndType        #219:#220     // get:(I)C\n-  #155 = NameAndType        #84:#221      // canEncode:(C)Z\n-  #156 = Class              #222          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #157 = NameAndType        #223:#224     // growBufferBy:(Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n-  #158 = NameAndType        #209:#225     // allocate:(I)Ljava/nio/CharBuffer;\n-  #159 = NameAndType        #219:#226     // get:()C\n-  #160 = NameAndType        #119:#120     // encodeSurrogate:(Ljava/nio/CharBuffer;C)Ljava/nio/CharBuffer;\n-  #161 = NameAndType        #115:#116     // encodeFully:(Ljava/nio/charset/CharsetEncoder;Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n-  #162 = NameAndType        #227:#212     // isOverflow:()Z\n-  #163 = NameAndType        #228:#212     // isUnderflow:()Z\n-  #164 = NameAndType        #229:#212     // isError:()Z\n-  #165 = NameAndType        #218:#210     // limit:(I)Ljava/nio/ByteBuffer;\n-  #166 = NameAndType        #230:#231     // rewind:()Ljava/nio/ByteBuffer;\n-  #167 = NameAndType        #124:#125     // newDecoder:()Ljava/nio/charset/CharsetDecoder;\n-  #168 = NameAndType        #205:#232     // wrap:([B)Ljava/nio/ByteBuffer;\n-  #169 = Class              #233          // java/nio/charset/CharsetDecoder\n-  #170 = NameAndType        #110:#234     // decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;\n-  #171 = NameAndType        #235:#236     // toString:()Ljava/lang/String;\n-  #172 = NameAndType        #217:#225     // position:(I)Ljava/nio/CharBuffer;\n-  #173 = NameAndType        #218:#225     // limit:(I)Ljava/nio/CharBuffer;\n-  #174 = NameAndType        #237:#238     // put:(C)Ljava/nio/CharBuffer;\n-  #175 = NameAndType        #73:#74       // HEX_CHARS:[C\n-  #176 = NameAndType        #239:#240     // flip:()Ljava/nio/CharBuffer;\n-  #177 = Class              #241          // java/nio/charset/Charset\n-  #178 = Class              #242          // java/nio/charset/CodingErrorAction\n-  #179 = NameAndType        #243:#244     // REPLACE:Ljava/nio/charset/CodingErrorAction;\n-  #180 = NameAndType        #245:#246     // onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-  #181 = NameAndType        #247:#246     // onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-  #182 = NameAndType        #69:#70       // REPLACEMENT_BYTES:[B\n-  #183 = NameAndType        #248:#249     // replaceWith:([B)Ljava/nio/charset/CharsetEncoder;\n-  #184 = NameAndType        #250:#244     // REPORT:Ljava/nio/charset/CodingErrorAction;\n-  #185 = NameAndType        #245:#251     // onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-  #186 = NameAndType        #247:#251     // onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-  #187 = NameAndType        #71:#72       // REPLACEMENT_STRING:Ljava/lang/String;\n-  #188 = NameAndType        #248:#252     // replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n-  #189 = NameAndType        #253:#254     // maxBytesPerChar:()F\n-  #190 = NameAndType        #255:#254     // averageBytesPerChar:()F\n-  #191 = Class              #256          // java/lang/Math\n-  #192 = NameAndType        #257:#258     // ceil:(D)D\n-  #193 = Utf8               org/apache/commons/compress/archivers/zip/NioZipEncoding\n-  #194 = NameAndType        #259:#260     // valueOf:(C)Ljava/lang/String;\n-  #195 = Utf8               java/lang/Object\n-  #196 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #197 = Utf8               org/apache/commons/compress/archivers/zip/CharsetAccessor\n-  #198 = Utf8               java/lang/String\n-  #199 = Utf8               java/nio/charset/CharsetEncoder\n-  #200 = Utf8               java/nio/CharBuffer\n-  #201 = Utf8               java/nio/ByteBuffer\n-  #202 = Utf8               java/nio/charset/CoderResult\n-  #203 = Utf8               java/io/IOException\n-  #204 = Utf8               (Ljava/lang/CharSequence;)Z\n-  #205 = Utf8               wrap\n-  #206 = Utf8               (Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n-  #207 = Utf8               remaining\n-  #208 = Utf8               ()I\n-  #209 = Utf8               allocate\n-  #210 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #211 = Utf8               hasRemaining\n-  #212 = Utf8               ()Z\n-  #213 = Utf8               (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n-  #214 = Utf8               isUnmappable\n-  #215 = Utf8               isMalformed\n-  #216 = Utf8               length\n-  #217 = Utf8               position\n-  #218 = Utf8               limit\n-  #219 = Utf8               get\n-  #220 = Utf8               (I)C\n-  #221 = Utf8               (C)Z\n-  #222 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #223 = Utf8               growBufferBy\n-  #224 = Utf8               (Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n-  #225 = Utf8               (I)Ljava/nio/CharBuffer;\n-  #226 = Utf8               ()C\n-  #227 = Utf8               isOverflow\n-  #228 = Utf8               isUnderflow\n-  #229 = Utf8               isError\n-  #230 = Utf8               rewind\n-  #231 = Utf8               ()Ljava/nio/ByteBuffer;\n-  #232 = Utf8               ([B)Ljava/nio/ByteBuffer;\n-  #233 = Utf8               java/nio/charset/CharsetDecoder\n-  #234 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;\n-  #235 = Utf8               toString\n-  #236 = Utf8               ()Ljava/lang/String;\n-  #237 = Utf8               put\n-  #238 = Utf8               (C)Ljava/nio/CharBuffer;\n-  #239 = Utf8               flip\n-  #240 = Utf8               ()Ljava/nio/CharBuffer;\n-  #241 = Utf8               java/nio/charset/Charset\n-  #242 = Utf8               java/nio/charset/CodingErrorAction\n-  #243 = Utf8               REPLACE\n-  #244 = Utf8               Ljava/nio/charset/CodingErrorAction;\n-  #245 = Utf8               onMalformedInput\n-  #246 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-  #247 = Utf8               onUnmappableCharacter\n-  #248 = Utf8               replaceWith\n-  #249 = Utf8               ([B)Ljava/nio/charset/CharsetEncoder;\n-  #250 = Utf8               REPORT\n-  #251 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-  #252 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n-  #253 = Utf8               maxBytesPerChar\n-  #254 = Utf8               ()F\n-  #255 = Utf8               averageBytesPerChar\n-  #256 = Utf8               java/lang/Math\n-  #257 = Utf8               ceil\n-  #258 = Utf8               (D)D\n-  #259 = Utf8               valueOf\n-  #260 = Utf8               (C)Ljava/lang/String;\n+    #1 = Methodref          #2.#3         // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #4            // java/lang/Object\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               java/lang/Object\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Fieldref           #8.#9         // org/apache/commons/compress/archivers/zip/NioZipEncoding.charset:Ljava/nio/charset/Charset;\n+    #8 = Class              #10           // org/apache/commons/compress/archivers/zip/NioZipEncoding\n+    #9 = NameAndType        #11:#12       // charset:Ljava/nio/charset/Charset;\n+   #10 = Utf8               org/apache/commons/compress/archivers/zip/NioZipEncoding\n+   #11 = Utf8               charset\n+   #12 = Utf8               Ljava/nio/charset/Charset;\n+   #13 = Fieldref           #8.#14        // org/apache/commons/compress/archivers/zip/NioZipEncoding.useReplacement:Z\n+   #14 = NameAndType        #15:#16       // useReplacement:Z\n+   #15 = Utf8               useReplacement\n+   #16 = Utf8               Z\n+   #17 = Methodref          #8.#18        // org/apache/commons/compress/archivers/zip/NioZipEncoding.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n+   #18 = NameAndType        #19:#20       // newEncoder:()Ljava/nio/charset/CharsetEncoder;\n+   #19 = Utf8               newEncoder\n+   #20 = Utf8               ()Ljava/nio/charset/CharsetEncoder;\n+   #21 = Methodref          #22.#23       // java/nio/charset/CharsetEncoder.canEncode:(Ljava/lang/CharSequence;)Z\n+   #22 = Class              #24           // java/nio/charset/CharsetEncoder\n+   #23 = NameAndType        #25:#26       // canEncode:(Ljava/lang/CharSequence;)Z\n+   #24 = Utf8               java/nio/charset/CharsetEncoder\n+   #25 = Utf8               canEncode\n+   #26 = Utf8               (Ljava/lang/CharSequence;)Z\n+   #27 = Methodref          #28.#29       // java/nio/CharBuffer.wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n+   #28 = Class              #30           // java/nio/CharBuffer\n+   #29 = NameAndType        #31:#32       // wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n+   #30 = Utf8               java/nio/CharBuffer\n+   #31 = Utf8               wrap\n+   #32 = Utf8               (Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n+   #33 = Methodref          #28.#34       // java/nio/CharBuffer.remaining:()I\n+   #34 = NameAndType        #35:#36       // remaining:()I\n+   #35 = Utf8               remaining\n+   #36 = Utf8               ()I\n+   #37 = Methodref          #8.#38        // org/apache/commons/compress/archivers/zip/NioZipEncoding.estimateInitialBufferSize:(Ljava/nio/charset/CharsetEncoder;I)I\n+   #38 = NameAndType        #39:#40       // estimateInitialBufferSize:(Ljava/nio/charset/CharsetEncoder;I)I\n+   #39 = Utf8               estimateInitialBufferSize\n+   #40 = Utf8               (Ljava/nio/charset/CharsetEncoder;I)I\n+   #41 = Methodref          #42.#43       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #42 = Class              #44           // java/nio/ByteBuffer\n+   #43 = NameAndType        #45:#46       // allocate:(I)Ljava/nio/ByteBuffer;\n+   #44 = Utf8               java/nio/ByteBuffer\n+   #45 = Utf8               allocate\n+   #46 = Utf8               (I)Ljava/nio/ByteBuffer;\n+   #47 = Methodref          #28.#48       // java/nio/CharBuffer.hasRemaining:()Z\n+   #48 = NameAndType        #49:#50       // hasRemaining:()Z\n+   #49 = Utf8               hasRemaining\n+   #50 = Utf8               ()Z\n+   #51 = Methodref          #22.#52       // java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n+   #52 = NameAndType        #53:#54       // encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n+   #53 = Utf8               encode\n+   #54 = Utf8               (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n+   #55 = Methodref          #56.#57       // java/nio/charset/CoderResult.isUnmappable:()Z\n+   #56 = Class              #58           // java/nio/charset/CoderResult\n+   #57 = NameAndType        #59:#50       // isUnmappable:()Z\n+   #58 = Utf8               java/nio/charset/CoderResult\n+   #59 = Utf8               isUnmappable\n+   #60 = Methodref          #56.#61       // java/nio/charset/CoderResult.isMalformed:()Z\n+   #61 = NameAndType        #62:#50       // isMalformed:()Z\n+   #62 = Utf8               isMalformed\n+   #63 = Methodref          #56.#64       // java/nio/charset/CoderResult.length:()I\n+   #64 = NameAndType        #65:#36       // length:()I\n+   #65 = Utf8               length\n+   #66 = Methodref          #8.#67        // org/apache/commons/compress/archivers/zip/NioZipEncoding.estimateIncrementalEncodingSize:(Ljava/nio/charset/CharsetEncoder;I)I\n+   #67 = NameAndType        #68:#40       // estimateIncrementalEncodingSize:(Ljava/nio/charset/CharsetEncoder;I)I\n+   #68 = Utf8               estimateIncrementalEncodingSize\n+   #69 = Methodref          #42.#34       // java/nio/ByteBuffer.remaining:()I\n+   #70 = Methodref          #28.#71       // java/nio/CharBuffer.position:()I\n+   #71 = NameAndType        #72:#36       // position:()I\n+   #72 = Utf8               position\n+   #73 = Methodref          #28.#74       // java/nio/CharBuffer.limit:()I\n+   #74 = NameAndType        #75:#36       // limit:()I\n+   #75 = Utf8               limit\n+   #76 = Methodref          #28.#77       // java/nio/CharBuffer.get:(I)C\n+   #77 = NameAndType        #78:#79       // get:(I)C\n+   #78 = Utf8               get\n+   #79 = Utf8               (I)C\n+   #80 = Methodref          #22.#81       // java/nio/charset/CharsetEncoder.canEncode:(C)Z\n+   #81 = NameAndType        #25:#82       // canEncode:(C)Z\n+   #82 = Utf8               (C)Z\n+   #83 = Methodref          #84.#85       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.growBufferBy:(Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n+   #84 = Class              #86           // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #85 = NameAndType        #87:#88       // growBufferBy:(Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n+   #86 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #87 = Utf8               growBufferBy\n+   #88 = Utf8               (Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n+   #89 = Methodref          #28.#90       // java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;\n+   #90 = NameAndType        #45:#91       // allocate:(I)Ljava/nio/CharBuffer;\n+   #91 = Utf8               (I)Ljava/nio/CharBuffer;\n+   #92 = Methodref          #28.#93       // java/nio/CharBuffer.get:()C\n+   #93 = NameAndType        #78:#94       // get:()C\n+   #94 = Utf8               ()C\n+   #95 = Methodref          #8.#96        // org/apache/commons/compress/archivers/zip/NioZipEncoding.encodeSurrogate:(Ljava/nio/CharBuffer;C)Ljava/nio/CharBuffer;\n+   #96 = NameAndType        #97:#98       // encodeSurrogate:(Ljava/nio/CharBuffer;C)Ljava/nio/CharBuffer;\n+   #97 = Utf8               encodeSurrogate\n+   #98 = Utf8               (Ljava/nio/CharBuffer;C)Ljava/nio/CharBuffer;\n+   #99 = Methodref          #8.#100       // org/apache/commons/compress/archivers/zip/NioZipEncoding.encodeFully:(Ljava/nio/charset/CharsetEncoder;Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+  #100 = NameAndType        #101:#102     // encodeFully:(Ljava/nio/charset/CharsetEncoder;Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+  #101 = Utf8               encodeFully\n+  #102 = Utf8               (Ljava/nio/charset/CharsetEncoder;Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+  #103 = Methodref          #56.#104      // java/nio/charset/CoderResult.isOverflow:()Z\n+  #104 = NameAndType        #105:#50      // isOverflow:()Z\n+  #105 = Utf8               isOverflow\n+  #106 = Methodref          #56.#107      // java/nio/charset/CoderResult.isUnderflow:()Z\n+  #107 = NameAndType        #108:#50      // isUnderflow:()Z\n+  #108 = Utf8               isUnderflow\n+  #109 = Methodref          #56.#110      // java/nio/charset/CoderResult.isError:()Z\n+  #110 = NameAndType        #111:#50      // isError:()Z\n+  #111 = Utf8               isError\n+  #112 = Methodref          #42.#71       // java/nio/ByteBuffer.position:()I\n+  #113 = Methodref          #42.#114      // java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+  #114 = NameAndType        #75:#46       // limit:(I)Ljava/nio/ByteBuffer;\n+  #115 = Methodref          #42.#116      // java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+  #116 = NameAndType        #117:#118     // rewind:()Ljava/nio/ByteBuffer;\n+  #117 = Utf8               rewind\n+  #118 = Utf8               ()Ljava/nio/ByteBuffer;\n+  #119 = Methodref          #8.#120       // org/apache/commons/compress/archivers/zip/NioZipEncoding.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n+  #120 = NameAndType        #121:#122     // newDecoder:()Ljava/nio/charset/CharsetDecoder;\n+  #121 = Utf8               newDecoder\n+  #122 = Utf8               ()Ljava/nio/charset/CharsetDecoder;\n+  #123 = Methodref          #42.#124      // java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n+  #124 = NameAndType        #31:#125      // wrap:([B)Ljava/nio/ByteBuffer;\n+  #125 = Utf8               ([B)Ljava/nio/ByteBuffer;\n+  #126 = Methodref          #127.#128     // java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;\n+  #127 = Class              #129          // java/nio/charset/CharsetDecoder\n+  #128 = NameAndType        #130:#131     // decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;\n+  #129 = Utf8               java/nio/charset/CharsetDecoder\n+  #130 = Utf8               decode\n+  #131 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;\n+  #132 = Methodref          #28.#133      // java/nio/CharBuffer.toString:()Ljava/lang/String;\n+  #133 = NameAndType        #134:#135     // toString:()Ljava/lang/String;\n+  #134 = Utf8               toString\n+  #135 = Utf8               ()Ljava/lang/String;\n+  #136 = Methodref          #28.#137      // java/nio/CharBuffer.position:(I)Ljava/nio/CharBuffer;\n+  #137 = NameAndType        #72:#91       // position:(I)Ljava/nio/CharBuffer;\n+  #138 = Methodref          #28.#139      // java/nio/CharBuffer.limit:(I)Ljava/nio/CharBuffer;\n+  #139 = NameAndType        #75:#91       // limit:(I)Ljava/nio/CharBuffer;\n+  #140 = Methodref          #28.#141      // java/nio/CharBuffer.put:(C)Ljava/nio/CharBuffer;\n+  #141 = NameAndType        #142:#143     // put:(C)Ljava/nio/CharBuffer;\n+  #142 = Utf8               put\n+  #143 = Utf8               (C)Ljava/nio/CharBuffer;\n+  #144 = Fieldref           #8.#145       // org/apache/commons/compress/archivers/zip/NioZipEncoding.HEX_CHARS:[C\n+  #145 = NameAndType        #146:#147     // HEX_CHARS:[C\n+  #146 = Utf8               HEX_CHARS\n+  #147 = Utf8               [C\n+  #148 = Methodref          #28.#149      // java/nio/CharBuffer.flip:()Ljava/nio/CharBuffer;\n+  #149 = NameAndType        #150:#151     // flip:()Ljava/nio/CharBuffer;\n+  #150 = Utf8               flip\n+  #151 = Utf8               ()Ljava/nio/CharBuffer;\n+  #152 = Methodref          #153.#18      // java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n+  #153 = Class              #154          // java/nio/charset/Charset\n+  #154 = Utf8               java/nio/charset/Charset\n+  #155 = Fieldref           #156.#157     // java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n+  #156 = Class              #158          // java/nio/charset/CodingErrorAction\n+  #157 = NameAndType        #159:#160     // REPLACE:Ljava/nio/charset/CodingErrorAction;\n+  #158 = Utf8               java/nio/charset/CodingErrorAction\n+  #159 = Utf8               REPLACE\n+  #160 = Utf8               Ljava/nio/charset/CodingErrorAction;\n+  #161 = Methodref          #22.#162      // java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+  #162 = NameAndType        #163:#164     // onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+  #163 = Utf8               onMalformedInput\n+  #164 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+  #165 = Methodref          #22.#166      // java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+  #166 = NameAndType        #167:#164     // onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+  #167 = Utf8               onUnmappableCharacter\n+  #168 = Fieldref           #8.#169       // org/apache/commons/compress/archivers/zip/NioZipEncoding.REPLACEMENT_BYTES:[B\n+  #169 = NameAndType        #170:#171     // REPLACEMENT_BYTES:[B\n+  #170 = Utf8               REPLACEMENT_BYTES\n+  #171 = Utf8               [B\n+  #172 = Methodref          #22.#173      // java/nio/charset/CharsetEncoder.replaceWith:([B)Ljava/nio/charset/CharsetEncoder;\n+  #173 = NameAndType        #174:#175     // replaceWith:([B)Ljava/nio/charset/CharsetEncoder;\n+  #174 = Utf8               replaceWith\n+  #175 = Utf8               ([B)Ljava/nio/charset/CharsetEncoder;\n+  #176 = Fieldref           #156.#177     // java/nio/charset/CodingErrorAction.REPORT:Ljava/nio/charset/CodingErrorAction;\n+  #177 = NameAndType        #178:#160     // REPORT:Ljava/nio/charset/CodingErrorAction;\n+  #178 = Utf8               REPORT\n+  #179 = Methodref          #153.#120     // java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n+  #180 = Methodref          #127.#181     // java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+  #181 = NameAndType        #163:#182     // onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+  #182 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+  #183 = Methodref          #127.#184     // java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+  #184 = NameAndType        #167:#182     // onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+  #185 = Fieldref           #8.#186       // org/apache/commons/compress/archivers/zip/NioZipEncoding.REPLACEMENT_STRING:Ljava/lang/String;\n+  #186 = NameAndType        #187:#188     // REPLACEMENT_STRING:Ljava/lang/String;\n+  #187 = Utf8               REPLACEMENT_STRING\n+  #188 = Utf8               Ljava/lang/String;\n+  #189 = Methodref          #127.#190     // java/nio/charset/CharsetDecoder.replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n+  #190 = NameAndType        #174:#191     // replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n+  #191 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n+  #192 = Methodref          #22.#193      // java/nio/charset/CharsetEncoder.maxBytesPerChar:()F\n+  #193 = NameAndType        #194:#195     // maxBytesPerChar:()F\n+  #194 = Utf8               maxBytesPerChar\n+  #195 = Utf8               ()F\n+  #196 = Methodref          #22.#197      // java/nio/charset/CharsetEncoder.averageBytesPerChar:()F\n+  #197 = NameAndType        #198:#195     // averageBytesPerChar:()F\n+  #198 = Utf8               averageBytesPerChar\n+  #199 = Methodref          #200.#201     // java/lang/Math.ceil:(D)D\n+  #200 = Class              #202          // java/lang/Math\n+  #201 = NameAndType        #203:#204     // ceil:(D)D\n+  #202 = Utf8               java/lang/Math\n+  #203 = Utf8               ceil\n+  #204 = Utf8               (D)D\n+  #205 = Methodref          #206.#207     // java/lang/String.valueOf:(C)Ljava/lang/String;\n+  #206 = Class              #208          // java/lang/String\n+  #207 = NameAndType        #209:#210     // valueOf:(C)Ljava/lang/String;\n+  #208 = Utf8               java/lang/String\n+  #209 = Utf8               valueOf\n+  #210 = Utf8               (C)Ljava/lang/String;\n+  #211 = Class              #212          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #212 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #213 = Class              #214          // org/apache/commons/compress/archivers/zip/CharsetAccessor\n+  #214 = Utf8               org/apache/commons/compress/archivers/zip/CharsetAccessor\n+  #215 = Utf8               REPLACEMENT\n+  #216 = Utf8               C\n+  #217 = Utf8               ConstantValue\n+  #218 = Integer            63\n+  #219 = Utf8               (Ljava/nio/charset/Charset;Z)V\n+  #220 = Utf8               Code\n+  #221 = Utf8               LineNumberTable\n+  #222 = Utf8               LocalVariableTable\n+  #223 = Utf8               this\n+  #224 = Utf8               Lorg/apache/commons/compress/archivers/zip/NioZipEncoding;\n+  #225 = Utf8               getCharset\n+  #226 = Utf8               ()Ljava/nio/charset/Charset;\n+  #227 = Utf8               (Ljava/lang/String;)Z\n+  #228 = Utf8               name\n+  #229 = Utf8               enc\n+  #230 = Utf8               Ljava/nio/charset/CharsetEncoder;\n+  #231 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #232 = Utf8               i\n+  #233 = Utf8               I\n+  #234 = Utf8               charCount\n+  #235 = Utf8               totalExtraSpace\n+  #236 = Utf8               spaceForSurrogate\n+  #237 = Utf8               increment\n+  #238 = Utf8               res\n+  #239 = Utf8               Ljava/nio/charset/CoderResult;\n+  #240 = Utf8               cb\n+  #241 = Utf8               Ljava/nio/CharBuffer;\n+  #242 = Utf8               tmp\n+  #243 = Utf8               out\n+  #244 = Utf8               Ljava/nio/ByteBuffer;\n+  #245 = Utf8               StackMapTable\n+  #246 = Utf8               ([B)Ljava/lang/String;\n+  #247 = Utf8               data\n+  #248 = Utf8               Exceptions\n+  #249 = Class              #250          // java/io/IOException\n+  #250 = Utf8               java/io/IOException\n+  #251 = Utf8               result\n+  #252 = Utf8               o\n+  #253 = Utf8               c\n+  #254 = Utf8               charChount\n+  #255 = Utf8               first\n+  #256 = Utf8               F\n+  #257 = Utf8               rest\n+  #258 = Utf8               <clinit>\n+  #259 = Utf8               SourceFile\n+  #260 = Utf8               NioZipEncoding.java\n {\n   private final java.nio.charset.Charset charset;\n     descriptor: Ljava/nio/charset/Charset;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final boolean useReplacement;\n     descriptor: Z\n@@ -299,18 +299,18 @@\n     flags: (0x0000)\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_0\n          1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n-         6: putfield      #2                  // Field charset:Ljava/nio/charset/Charset;\n+         6: putfield      #7                  // Field charset:Ljava/nio/charset/Charset;\n          9: aload_0\n         10: iload_2\n-        11: putfield      #3                  // Field useReplacement:Z\n+        11: putfield      #13                 // Field useReplacement:Z\n         14: return\n       LineNumberTable:\n         line 54: 0\n         line 55: 4\n         line 56: 9\n         line 57: 14\n       LocalVariableTable:\n@@ -321,33 +321,33 @@\n \n   public java.nio.charset.Charset getCharset();\n     descriptor: ()Ljava/nio/charset/Charset;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #2                  // Field charset:Ljava/nio/charset/Charset;\n+         1: getfield      #7                  // Field charset:Ljava/nio/charset/Charset;\n          4: areturn\n       LineNumberTable:\n         line 61: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/NioZipEncoding;\n \n   public boolean canEncode(java.lang.String);\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_0\n-         1: invokespecial #4                  // Method newEncoder:()Ljava/nio/charset/CharsetEncoder;\n+         1: invokespecial #17                 // Method newEncoder:()Ljava/nio/charset/CharsetEncoder;\n          4: astore_2\n          5: aload_2\n          6: aload_1\n-         7: invokevirtual #5                  // Method java/nio/charset/CharsetEncoder.canEncode:(Ljava/lang/CharSequence;)Z\n+         7: invokevirtual #21                 // Method java/nio/charset/CharsetEncoder.canEncode:(Ljava/lang/CharSequence;)Z\n         10: ireturn\n       LineNumberTable:\n         line 69: 0\n         line 71: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/apache/commons/compress/archivers/zip/NioZipEncoding;\n@@ -356,143 +356,143 @@\n \n   public java.nio.ByteBuffer encode(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=10, args_size=2\n          0: aload_0\n-         1: invokespecial #4                  // Method newEncoder:()Ljava/nio/charset/CharsetEncoder;\n+         1: invokespecial #17                 // Method newEncoder:()Ljava/nio/charset/CharsetEncoder;\n          4: astore_2\n          5: aload_1\n-         6: invokestatic  #6                  // Method java/nio/CharBuffer.wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n+         6: invokestatic  #27                 // Method java/nio/CharBuffer.wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n          9: astore_3\n         10: aconst_null\n         11: astore        4\n         13: aload_2\n         14: aload_3\n-        15: invokevirtual #7                  // Method java/nio/CharBuffer.remaining:()I\n-        18: invokestatic  #8                  // Method estimateInitialBufferSize:(Ljava/nio/charset/CharsetEncoder;I)I\n-        21: invokestatic  #9                  // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        15: invokevirtual #33                 // Method java/nio/CharBuffer.remaining:()I\n+        18: invokestatic  #37                 // Method estimateInitialBufferSize:(Ljava/nio/charset/CharsetEncoder;I)I\n+        21: invokestatic  #41                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n         24: astore        5\n         26: aload_3\n-        27: invokevirtual #10                 // Method java/nio/CharBuffer.hasRemaining:()Z\n+        27: invokevirtual #47                 // Method java/nio/CharBuffer.hasRemaining:()Z\n         30: ifeq          257\n         33: aload_2\n         34: aload_3\n         35: aload         5\n         37: iconst_0\n-        38: invokevirtual #11                 // Method java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n+        38: invokevirtual #51                 // Method java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n         41: astore        6\n         43: aload         6\n-        45: invokevirtual #12                 // Method java/nio/charset/CoderResult.isUnmappable:()Z\n+        45: invokevirtual #55                 // Method java/nio/charset/CoderResult.isUnmappable:()Z\n         48: ifne          59\n         51: aload         6\n-        53: invokevirtual #13                 // Method java/nio/charset/CoderResult.isMalformed:()Z\n+        53: invokevirtual #60                 // Method java/nio/charset/CoderResult.isMalformed:()Z\n         56: ifeq          205\n         59: aload_2\n         60: bipush        6\n         62: aload         6\n-        64: invokevirtual #14                 // Method java/nio/charset/CoderResult.length:()I\n+        64: invokevirtual #63                 // Method java/nio/charset/CoderResult.length:()I\n         67: imul\n-        68: invokestatic  #15                 // Method estimateIncrementalEncodingSize:(Ljava/nio/charset/CharsetEncoder;I)I\n+        68: invokestatic  #66                 // Method estimateIncrementalEncodingSize:(Ljava/nio/charset/CharsetEncoder;I)I\n         71: istore        7\n         73: iload         7\n         75: aload         5\n-        77: invokevirtual #16                 // Method java/nio/ByteBuffer.remaining:()I\n+        77: invokevirtual #69                 // Method java/nio/ByteBuffer.remaining:()I\n         80: if_icmple     154\n         83: iconst_0\n         84: istore        8\n         86: aload_3\n-        87: invokevirtual #17                 // Method java/nio/CharBuffer.position:()I\n+        87: invokevirtual #70                 // Method java/nio/CharBuffer.position:()I\n         90: istore        9\n         92: iload         9\n         94: aload_3\n-        95: invokevirtual #18                 // Method java/nio/CharBuffer.limit:()I\n+        95: invokevirtual #73                 // Method java/nio/CharBuffer.limit:()I\n         98: if_icmpge     131\n        101: iload         8\n        103: aload_2\n        104: aload_3\n        105: iload         9\n-       107: invokevirtual #19                 // Method java/nio/CharBuffer.get:(I)C\n-       110: invokevirtual #20                 // Method java/nio/charset/CharsetEncoder.canEncode:(C)Z\n+       107: invokevirtual #76                 // Method java/nio/CharBuffer.get:(I)C\n+       110: invokevirtual #80                 // Method java/nio/charset/CharsetEncoder.canEncode:(C)Z\n        113: ifne          121\n        116: bipush        6\n        118: goto          122\n        121: iconst_1\n        122: iadd\n        123: istore        8\n        125: iinc          9, 1\n        128: goto          92\n        131: aload_2\n        132: iload         8\n-       134: invokestatic  #15                 // Method estimateIncrementalEncodingSize:(Ljava/nio/charset/CharsetEncoder;I)I\n+       134: invokestatic  #66                 // Method estimateIncrementalEncodingSize:(Ljava/nio/charset/CharsetEncoder;I)I\n        137: istore        9\n        139: aload         5\n        141: iload         9\n        143: aload         5\n-       145: invokevirtual #16                 // Method java/nio/ByteBuffer.remaining:()I\n+       145: invokevirtual #69                 // Method java/nio/ByteBuffer.remaining:()I\n        148: isub\n-       149: invokestatic  #21                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.growBufferBy:(Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n+       149: invokestatic  #83                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.growBufferBy:(Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n        152: astore        5\n        154: aload         4\n        156: ifnonnull     166\n        159: bipush        6\n-       161: invokestatic  #22                 // Method java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;\n+       161: invokestatic  #89                 // Method java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;\n        164: astore        4\n        166: iconst_0\n        167: istore        8\n        169: iload         8\n        171: aload         6\n-       173: invokevirtual #14                 // Method java/nio/charset/CoderResult.length:()I\n+       173: invokevirtual #63                 // Method java/nio/charset/CoderResult.length:()I\n        176: if_icmpge     202\n        179: aload_2\n        180: aload         4\n        182: aload_3\n-       183: invokevirtual #23                 // Method java/nio/CharBuffer.get:()C\n-       186: invokestatic  #24                 // Method encodeSurrogate:(Ljava/nio/CharBuffer;C)Ljava/nio/CharBuffer;\n+       183: invokevirtual #92                 // Method java/nio/CharBuffer.get:()C\n+       186: invokestatic  #95                 // Method encodeSurrogate:(Ljava/nio/CharBuffer;C)Ljava/nio/CharBuffer;\n        189: aload         5\n-       191: invokestatic  #25                 // Method encodeFully:(Ljava/nio/charset/CharsetEncoder;Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+       191: invokestatic  #99                 // Method encodeFully:(Ljava/nio/charset/CharsetEncoder;Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n        194: astore        5\n        196: iinc          8, 1\n        199: goto          169\n        202: goto          254\n        205: aload         6\n-       207: invokevirtual #26                 // Method java/nio/charset/CoderResult.isOverflow:()Z\n+       207: invokevirtual #103                // Method java/nio/charset/CoderResult.isOverflow:()Z\n        210: ifeq          235\n        213: aload_2\n        214: aload_3\n-       215: invokevirtual #7                  // Method java/nio/CharBuffer.remaining:()I\n-       218: invokestatic  #15                 // Method estimateIncrementalEncodingSize:(Ljava/nio/charset/CharsetEncoder;I)I\n+       215: invokevirtual #33                 // Method java/nio/CharBuffer.remaining:()I\n+       218: invokestatic  #66                 // Method estimateIncrementalEncodingSize:(Ljava/nio/charset/CharsetEncoder;I)I\n        221: istore        7\n        223: aload         5\n        225: iload         7\n-       227: invokestatic  #21                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.growBufferBy:(Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n+       227: invokestatic  #83                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.growBufferBy:(Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n        230: astore        5\n        232: goto          254\n        235: aload         6\n-       237: invokevirtual #27                 // Method java/nio/charset/CoderResult.isUnderflow:()Z\n+       237: invokevirtual #106                // Method java/nio/charset/CoderResult.isUnderflow:()Z\n        240: ifne          257\n        243: aload         6\n-       245: invokevirtual #28                 // Method java/nio/charset/CoderResult.isError:()Z\n+       245: invokevirtual #109                // Method java/nio/charset/CoderResult.isError:()Z\n        248: ifeq          254\n        251: goto          257\n        254: goto          26\n        257: aload_2\n        258: aload_3\n        259: aload         5\n        261: iconst_1\n-       262: invokevirtual #11                 // Method java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n+       262: invokevirtual #51                 // Method java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n        265: pop\n        266: aload         5\n        268: aload         5\n-       270: invokevirtual #29                 // Method java/nio/ByteBuffer.position:()I\n-       273: invokevirtual #30                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+       270: invokevirtual #112                // Method java/nio/ByteBuffer.position:()I\n+       273: invokevirtual #113                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n        276: pop\n        277: aload         5\n-       279: invokevirtual #31                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+       279: invokevirtual #115                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n        282: pop\n        283: aload         5\n        285: areturn\n       LineNumberTable:\n         line 79: 0\n         line 81: 5\n         line 82: 10\n@@ -573,19 +573,19 @@\n \n   public java.lang.String decode(byte[]) throws java.io.IOException;\n     descriptor: ([B)Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #32                 // Method newDecoder:()Ljava/nio/charset/CharsetDecoder;\n+         1: invokespecial #119                // Method newDecoder:()Ljava/nio/charset/CharsetDecoder;\n          4: aload_1\n-         5: invokestatic  #33                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-         8: invokevirtual #34                 // Method java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;\n-        11: invokevirtual #35                 // Method java/nio/CharBuffer.toString:()Ljava/lang/String;\n+         5: invokestatic  #123                // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n+         8: invokevirtual #126                // Method java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;\n+        11: invokevirtual #132                // Method java/nio/CharBuffer.toString:()Ljava/lang/String;\n         14: areturn\n       LineNumberTable:\n         line 135: 0\n         line 136: 5\n         line 135: 14\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -598,33 +598,33 @@\n     descriptor: (Ljava/nio/charset/CharsetEncoder;Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=6, args_size=3\n          0: aload_2\n          1: astore_3\n          2: aload_1\n-         3: invokevirtual #10                 // Method java/nio/CharBuffer.hasRemaining:()Z\n+         3: invokevirtual #47                 // Method java/nio/CharBuffer.hasRemaining:()Z\n          6: ifeq          46\n          9: aload_0\n         10: aload_1\n         11: aload_3\n         12: iconst_0\n-        13: invokevirtual #11                 // Method java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n+        13: invokevirtual #51                 // Method java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n         16: astore        4\n         18: aload         4\n-        20: invokevirtual #26                 // Method java/nio/charset/CoderResult.isOverflow:()Z\n+        20: invokevirtual #103                // Method java/nio/charset/CoderResult.isOverflow:()Z\n         23: ifeq          43\n         26: aload_0\n         27: aload_1\n-        28: invokevirtual #7                  // Method java/nio/CharBuffer.remaining:()I\n-        31: invokestatic  #15                 // Method estimateIncrementalEncodingSize:(Ljava/nio/charset/CharsetEncoder;I)I\n+        28: invokevirtual #33                 // Method java/nio/CharBuffer.remaining:()I\n+        31: invokestatic  #66                 // Method estimateIncrementalEncodingSize:(Ljava/nio/charset/CharsetEncoder;I)I\n         34: istore        5\n         36: aload_3\n         37: iload         5\n-        39: invokestatic  #21                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.growBufferBy:(Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n+        39: invokestatic  #83                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.growBufferBy:(Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n         42: astore_3\n         43: goto          2\n         46: aload_3\n         47: areturn\n       LineNumberTable:\n         line 140: 0\n         line 141: 2\n@@ -652,66 +652,66 @@\n   private static java.nio.CharBuffer encodeSurrogate(java.nio.CharBuffer, char);\n     descriptor: (Ljava/nio/CharBuffer;C)Ljava/nio/CharBuffer;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: iconst_0\n-         2: invokevirtual #36                 // Method java/nio/CharBuffer.position:(I)Ljava/nio/CharBuffer;\n+         2: invokevirtual #136                // Method java/nio/CharBuffer.position:(I)Ljava/nio/CharBuffer;\n          5: bipush        6\n-         7: invokevirtual #37                 // Method java/nio/CharBuffer.limit:(I)Ljava/nio/CharBuffer;\n+         7: invokevirtual #138                // Method java/nio/CharBuffer.limit:(I)Ljava/nio/CharBuffer;\n         10: pop\n         11: aload_0\n         12: bipush        37\n-        14: invokevirtual #38                 // Method java/nio/CharBuffer.put:(C)Ljava/nio/CharBuffer;\n+        14: invokevirtual #140                // Method java/nio/CharBuffer.put:(C)Ljava/nio/CharBuffer;\n         17: pop\n         18: aload_0\n         19: bipush        85\n-        21: invokevirtual #38                 // Method java/nio/CharBuffer.put:(C)Ljava/nio/CharBuffer;\n+        21: invokevirtual #140                // Method java/nio/CharBuffer.put:(C)Ljava/nio/CharBuffer;\n         24: pop\n         25: aload_0\n-        26: getstatic     #39                 // Field HEX_CHARS:[C\n+        26: getstatic     #144                // Field HEX_CHARS:[C\n         29: iload_1\n         30: bipush        12\n         32: ishr\n         33: bipush        15\n         35: iand\n         36: caload\n-        37: invokevirtual #38                 // Method java/nio/CharBuffer.put:(C)Ljava/nio/CharBuffer;\n+        37: invokevirtual #140                // Method java/nio/CharBuffer.put:(C)Ljava/nio/CharBuffer;\n         40: pop\n         41: aload_0\n-        42: getstatic     #39                 // Field HEX_CHARS:[C\n+        42: getstatic     #144                // Field HEX_CHARS:[C\n         45: iload_1\n         46: bipush        8\n         48: ishr\n         49: bipush        15\n         51: iand\n         52: caload\n-        53: invokevirtual #38                 // Method java/nio/CharBuffer.put:(C)Ljava/nio/CharBuffer;\n+        53: invokevirtual #140                // Method java/nio/CharBuffer.put:(C)Ljava/nio/CharBuffer;\n         56: pop\n         57: aload_0\n-        58: getstatic     #39                 // Field HEX_CHARS:[C\n+        58: getstatic     #144                // Field HEX_CHARS:[C\n         61: iload_1\n         62: iconst_4\n         63: ishr\n         64: bipush        15\n         66: iand\n         67: caload\n-        68: invokevirtual #38                 // Method java/nio/CharBuffer.put:(C)Ljava/nio/CharBuffer;\n+        68: invokevirtual #140                // Method java/nio/CharBuffer.put:(C)Ljava/nio/CharBuffer;\n         71: pop\n         72: aload_0\n-        73: getstatic     #39                 // Field HEX_CHARS:[C\n+        73: getstatic     #144                // Field HEX_CHARS:[C\n         76: iload_1\n         77: bipush        15\n         79: iand\n         80: caload\n-        81: invokevirtual #38                 // Method java/nio/CharBuffer.put:(C)Ljava/nio/CharBuffer;\n+        81: invokevirtual #140                // Method java/nio/CharBuffer.put:(C)Ljava/nio/CharBuffer;\n         84: pop\n         85: aload_0\n-        86: invokevirtual #40                 // Method java/nio/CharBuffer.flip:()Ljava/nio/CharBuffer;\n+        86: invokevirtual #148                // Method java/nio/CharBuffer.flip:()Ljava/nio/CharBuffer;\n         89: pop\n         90: aload_0\n         91: areturn\n       LineNumberTable:\n         line 152: 0\n         line 153: 11\n         line 154: 18\n@@ -728,33 +728,33 @@\n \n   private java.nio.charset.CharsetEncoder newEncoder();\n     descriptor: ()Ljava/nio/charset/CharsetEncoder;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field useReplacement:Z\n+         1: getfield      #13                 // Field useReplacement:Z\n          4: ifeq          33\n          7: aload_0\n-         8: getfield      #2                  // Field charset:Ljava/nio/charset/Charset;\n-        11: invokevirtual #41                 // Method java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n-        14: getstatic     #42                 // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n-        17: invokevirtual #43                 // Method java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-        20: getstatic     #42                 // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n-        23: invokevirtual #44                 // Method java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-        26: getstatic     #45                 // Field REPLACEMENT_BYTES:[B\n-        29: invokevirtual #46                 // Method java/nio/charset/CharsetEncoder.replaceWith:([B)Ljava/nio/charset/CharsetEncoder;\n+         8: getfield      #7                  // Field charset:Ljava/nio/charset/Charset;\n+        11: invokevirtual #152                // Method java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n+        14: getstatic     #155                // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n+        17: invokevirtual #161                // Method java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+        20: getstatic     #155                // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n+        23: invokevirtual #165                // Method java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+        26: getstatic     #168                // Field REPLACEMENT_BYTES:[B\n+        29: invokevirtual #172                // Method java/nio/charset/CharsetEncoder.replaceWith:([B)Ljava/nio/charset/CharsetEncoder;\n         32: areturn\n         33: aload_0\n-        34: getfield      #2                  // Field charset:Ljava/nio/charset/Charset;\n-        37: invokevirtual #41                 // Method java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n-        40: getstatic     #47                 // Field java/nio/charset/CodingErrorAction.REPORT:Ljava/nio/charset/CodingErrorAction;\n-        43: invokevirtual #43                 // Method java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-        46: getstatic     #47                 // Field java/nio/charset/CodingErrorAction.REPORT:Ljava/nio/charset/CodingErrorAction;\n-        49: invokevirtual #44                 // Method java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+        34: getfield      #7                  // Field charset:Ljava/nio/charset/Charset;\n+        37: invokevirtual #152                // Method java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n+        40: getstatic     #176                // Field java/nio/charset/CodingErrorAction.REPORT:Ljava/nio/charset/CodingErrorAction;\n+        43: invokevirtual #161                // Method java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+        46: getstatic     #176                // Field java/nio/charset/CodingErrorAction.REPORT:Ljava/nio/charset/CodingErrorAction;\n+        49: invokevirtual #165                // Method java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n         52: areturn\n       LineNumberTable:\n         line 165: 0\n         line 166: 7\n         line 167: 17\n         line 168: 23\n         line 169: 29\n@@ -771,33 +771,33 @@\n \n   private java.nio.charset.CharsetDecoder newDecoder();\n     descriptor: ()Ljava/nio/charset/CharsetDecoder;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field useReplacement:Z\n+         1: getfield      #13                 // Field useReplacement:Z\n          4: ifne          27\n          7: aload_0\n-         8: getfield      #2                  // Field charset:Ljava/nio/charset/Charset;\n-        11: invokevirtual #48                 // Method java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n-        14: getstatic     #47                 // Field java/nio/charset/CodingErrorAction.REPORT:Ljava/nio/charset/CodingErrorAction;\n-        17: invokevirtual #49                 // Method java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-        20: getstatic     #47                 // Field java/nio/charset/CodingErrorAction.REPORT:Ljava/nio/charset/CodingErrorAction;\n-        23: invokevirtual #50                 // Method java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+         8: getfield      #7                  // Field charset:Ljava/nio/charset/Charset;\n+        11: invokevirtual #179                // Method java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n+        14: getstatic     #176                // Field java/nio/charset/CodingErrorAction.REPORT:Ljava/nio/charset/CodingErrorAction;\n+        17: invokevirtual #180                // Method java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+        20: getstatic     #176                // Field java/nio/charset/CodingErrorAction.REPORT:Ljava/nio/charset/CodingErrorAction;\n+        23: invokevirtual #183                // Method java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n         26: areturn\n         27: aload_0\n-        28: getfield      #2                  // Field charset:Ljava/nio/charset/Charset;\n-        31: invokevirtual #48                 // Method java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n-        34: getstatic     #42                 // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n-        37: invokevirtual #49                 // Method java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-        40: getstatic     #42                 // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n-        43: invokevirtual #50                 // Method java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-        46: getstatic     #51                 // Field REPLACEMENT_STRING:Ljava/lang/String;\n-        49: invokevirtual #52                 // Method java/nio/charset/CharsetDecoder.replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n+        28: getfield      #7                  // Field charset:Ljava/nio/charset/Charset;\n+        31: invokevirtual #179                // Method java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n+        34: getstatic     #155                // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n+        37: invokevirtual #180                // Method java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+        40: getstatic     #155                // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n+        43: invokevirtual #183                // Method java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+        46: getstatic     #185                // Field REPLACEMENT_STRING:Ljava/lang/String;\n+        49: invokevirtual #189                // Method java/nio/charset/CharsetDecoder.replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n         52: areturn\n       LineNumberTable:\n         line 177: 0\n         line 178: 7\n         line 179: 17\n         line 180: 23\n         line 178: 26\n@@ -814,29 +814,29 @@\n \n   private static int estimateInitialBufferSize(java.nio.charset.CharsetEncoder, int);\n     descriptor: (Ljava/nio/charset/CharsetEncoder;I)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=2, locals=4, args_size=2\n          0: aload_0\n-         1: invokevirtual #53                 // Method java/nio/charset/CharsetEncoder.maxBytesPerChar:()F\n+         1: invokevirtual #192                // Method java/nio/charset/CharsetEncoder.maxBytesPerChar:()F\n          4: fstore_2\n          5: iload_1\n          6: iconst_1\n          7: isub\n          8: i2f\n          9: aload_0\n-        10: invokevirtual #54                 // Method java/nio/charset/CharsetEncoder.averageBytesPerChar:()F\n+        10: invokevirtual #196                // Method java/nio/charset/CharsetEncoder.averageBytesPerChar:()F\n         13: fmul\n         14: fstore_3\n         15: fload_2\n         16: fload_3\n         17: fadd\n         18: f2d\n-        19: invokestatic  #55                 // Method java/lang/Math.ceil:(D)D\n+        19: invokestatic  #199                // Method java/lang/Math.ceil:(D)D\n         22: d2i\n         23: ireturn\n       LineNumberTable:\n         line 201: 0\n         line 202: 5\n         line 203: 15\n       LocalVariableTable:\n@@ -850,18 +850,18 @@\n     descriptor: (Ljava/nio/charset/CharsetEncoder;I)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: iload_1\n          1: i2f\n          2: aload_0\n-         3: invokevirtual #54                 // Method java/nio/charset/CharsetEncoder.averageBytesPerChar:()F\n+         3: invokevirtual #196                // Method java/nio/charset/CharsetEncoder.averageBytesPerChar:()F\n          6: fmul\n          7: f2d\n-         8: invokestatic  #55                 // Method java/lang/Math.ceil:(D)D\n+         8: invokestatic  #199                // Method java/lang/Math.ceil:(D)D\n         11: d2i\n         12: ireturn\n       LineNumberTable:\n         line 214: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0   enc   Ljava/nio/charset/CharsetEncoder;\n@@ -874,18 +874,18 @@\n       stack=4, locals=0, args_size=0\n          0: iconst_1\n          1: newarray       byte\n          3: dup\n          4: iconst_0\n          5: bipush        63\n          7: bastore\n-         8: putstatic     #45                 // Field REPLACEMENT_BYTES:[B\n+         8: putstatic     #168                // Field REPLACEMENT_BYTES:[B\n         11: bipush        63\n-        13: invokestatic  #57                 // Method java/lang/String.valueOf:(C)Ljava/lang/String;\n-        16: putstatic     #51                 // Field REPLACEMENT_STRING:Ljava/lang/String;\n+        13: invokestatic  #205                // Method java/lang/String.valueOf:(C)Ljava/lang/String;\n+        16: putstatic     #185                // Field REPLACEMENT_STRING:Ljava/lang/String;\n         19: bipush        16\n         21: newarray       char\n         23: dup\n         24: iconst_0\n         25: bipush        48\n         27: castore\n         28: dup\n@@ -944,15 +944,15 @@\n        102: bipush        14\n        104: bipush        69\n        106: castore\n        107: dup\n        108: bipush        15\n        110: bipush        70\n        112: castore\n-       113: putstatic     #39                 // Field HEX_CHARS:[C\n+       113: putstatic     #144                // Field HEX_CHARS:[C\n        116: return\n       LineNumberTable:\n         line 42: 0\n         line 43: 11\n         line 44: 19\n }\n SourceFile: \"NioZipEncoding.java\"\n"}]}
