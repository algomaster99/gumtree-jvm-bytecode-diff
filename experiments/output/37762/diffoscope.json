{"diffoscope-json-version": 1, "source1": "first/Lang.class", "source2": "second/Lang.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,32 +1,41 @@\n \n package org.apache.commons.codec.language.bm;\n \n-import java.util.EnumMap;\n import java.util.Iterator;\n import java.util.Locale;\n import java.util.Collections;\n import java.io.InputStream;\n import java.util.Set;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Arrays;\n import java.util.regex.Pattern;\n import java.util.Scanner;\n import java.util.ArrayList;\n+import java.util.EnumMap;\n import java.util.List;\n import java.util.Map;\n \n public class Lang\n {\n     private static final Map<NameType, Lang> Langs;\n     private static final String LANGUAGE_RULES_RN = \"org/apache/commons/codec/language/bm/%s_lang.txt\";\n     private final Languages languages;\n     private final List<Lang.LangRule> rules;\n     \n+    static {\n+        Langs = new EnumMap<NameType, Lang>(NameType.class);\n+        NameType[] values;\n+        for (int length = (values = NameType.values()).length, i = 0; i < length; ++i) {\n+            final NameType s = values[i];\n+            Lang.Langs.put(s, loadFromResource(String.format(\"org/apache/commons/codec/language/bm/%s_lang.txt\", s.getName()), Languages.getInstance(s)));\n+        }\n+    }\n+    \n     public static Lang instance(final NameType nameType) {\n         return Lang.Langs.get(nameType);\n     }\n     \n     public static Lang loadFromResource(final String languageRulesResourceName, final Languages languages) {\n         final List<Lang.LangRule> rules = new ArrayList<Lang.LangRule>();\n         final InputStream lRulesIS = Lang.class.getClassLoader().getResourceAsStream(languageRulesResourceName);\n@@ -60,21 +69,22 @@\n                     final String[] parts = line.split(\"\\\\s+\");\n                     if (parts.length != 3) {\n                         throw new IllegalArgumentException(\"Malformed line '\" + rawLine + \"' in language resource '\" + languageRulesResourceName + \"'\");\n                     }\n                     final Pattern pattern = Pattern.compile(parts[0]);\n                     final String[] langs = parts[1].split(\"\\\\+\");\n                     final boolean accept = parts[2].equals(\"true\");\n-                    rules.add(new Lang.LangRule(pattern, (Set)new HashSet(Arrays.asList(langs)), accept, (Lang.Lang$1)null));\n+                    rules.add(new Lang.LangRule(pattern, (Set)new HashSet(Arrays.asList(langs)), accept, (Lang.LangRule)null));\n                 }\n             }\n         }\n         finally {\n             scanner.close();\n         }\n+        scanner.close();\n         return new Lang(rules, languages);\n     }\n     \n     private Lang(final List<Lang.LangRule> rules, final Languages languages) {\n         this.rules = Collections.unmodifiableList((List<? extends Lang.LangRule>)rules);\n         this.languages = languages;\n     }\n@@ -85,26 +95,19 @@\n     }\n     \n     public Languages.LanguageSet guessLanguages(final String input) {\n         final String text = input.toLowerCase(Locale.ENGLISH);\n         final Set<String> langs = new HashSet<String>(this.languages.getLanguages());\n         for (final Lang.LangRule rule : this.rules) {\n             if (rule.matches(text)) {\n-                if (Lang.LangRule.access$100(rule)) {\n-                    langs.retainAll(Lang.LangRule.access$200(rule));\n+                if (Lang.LangRule.access$1(rule)) {\n+                    langs.retainAll(Lang.LangRule.access$2(rule));\n                 }\n                 else {\n-                    langs.removeAll(Lang.LangRule.access$200(rule));\n+                    langs.removeAll(Lang.LangRule.access$2(rule));\n                 }\n             }\n         }\n         final Languages.LanguageSet ls = Languages.LanguageSet.from((Set)langs);\n         return ls.equals(Languages.NO_LANGUAGES) ? Languages.ANY_LANGUAGE : ls;\n     }\n-    \n-    static {\n-        Langs = new EnumMap<NameType, Lang>(NameType.class);\n-        for (final NameType s : NameType.values()) {\n-            Lang.Langs.put(s, loadFromResource(String.format(\"org/apache/commons/codec/language/bm/%s_lang.txt\", s.getName()), Languages.getInstance(s)));\n-        }\n-    }\n }\n"}]}
