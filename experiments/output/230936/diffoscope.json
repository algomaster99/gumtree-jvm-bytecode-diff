{"diffoscope-json-version": 1, "source1": "first/BandSet.class", "source2": "second/BandSet.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,434 +1,428 @@\n \n package org.apache.commons.compress.harmony.pack200;\n \n import java.util.Arrays;\n import java.util.Map;\n+import java.util.List;\n import java.util.HashMap;\n import java.util.Iterator;\n-import java.util.List;\n import java.util.ArrayList;\n import java.util.Objects;\n import java.util.stream.IntStream;\n import java.io.IOException;\n import java.io.OutputStream;\n \n public abstract class BandSet\n {\n     protected final SegmentHeader segmentHeader;\n     final int effort;\n     private static final int[] effortThresholds;\n     private long[] canonicalLargest;\n     private long[] canonicalSmallest;\n     \n-    public BandSet(final int effort, final SegmentHeader header) {\n+    public BandSet(final int effort, final SegmentHeader segmentHeader) {\n         this.effort = effort;\n-        this.segmentHeader = header;\n+        this.segmentHeader = segmentHeader;\n     }\n     \n     public abstract void pack(final OutputStream p0) throws IOException, Pack200Exception;\n     \n-    public byte[] encodeScalar(final int[] band, final BHSDCodec codec) throws Pack200Exception {\n-        return codec.encode(band);\n+    public byte[] encodeScalar(final int[] array, final BHSDCodec bhsdCodec) throws Pack200Exception {\n+        return bhsdCodec.encode(array);\n     }\n     \n-    public byte[] encodeScalar(final int value, final BHSDCodec codec) throws Pack200Exception {\n-        return codec.encode(value);\n+    public byte[] encodeScalar(final int n, final BHSDCodec bhsdCodec) throws Pack200Exception {\n+        return bhsdCodec.encode(n);\n     }\n     \n-    public byte[] encodeBandInt(final String name, final int[] ints, final BHSDCodec defaultCodec) throws Pack200Exception {\n-        byte[] encodedBand = null;\n-        if (this.effort > 1 && ints.length >= BandSet.effortThresholds[this.effort]) {\n-            final BandSet.BandAnalysisResults results = this.analyseBand(name, ints, defaultCodec);\n-            final Codec betterCodec = BandSet.BandAnalysisResults.access$000(results);\n-            encodedBand = BandSet.BandAnalysisResults.access$100(results);\n-            if (betterCodec != null) {\n-                if (betterCodec instanceof BHSDCodec) {\n-                    final int[] specifierBand = CodecEncoding.getSpecifier(betterCodec, (Codec)defaultCodec);\n-                    int specifier = specifierBand[0];\n-                    if (specifierBand.length > 1) {\n-                        for (int i = 1; i < specifierBand.length; ++i) {\n-                            this.segmentHeader.appendBandCodingSpecifier(specifierBand[i]);\n+    public byte[] encodeBandInt(final String s, final int[] array, final BHSDCodec bhsdCodec) throws Pack200Exception {\n+        byte[] array2 = null;\n+        if (this.effort > 1 && array.length >= BandSet.effortThresholds[this.effort]) {\n+            final BandSet.BandAnalysisResults analyseBand = this.analyseBand(s, array, bhsdCodec);\n+            final Codec access$000 = BandSet.BandAnalysisResults.access$000(analyseBand);\n+            array2 = BandSet.BandAnalysisResults.access$100(analyseBand);\n+            if (access$000 != null) {\n+                if (access$000 instanceof BHSDCodec) {\n+                    final int[] specifier = CodecEncoding.getSpecifier(access$000, (Codec)bhsdCodec);\n+                    final int n = specifier[0];\n+                    if (specifier.length > 1) {\n+                        for (int i = 1; i < specifier.length; ++i) {\n+                            this.segmentHeader.appendBandCodingSpecifier(specifier[i]);\n                         }\n                     }\n-                    if (defaultCodec.isSigned()) {\n-                        specifier = -1 - specifier;\n+                    int n2;\n+                    if (bhsdCodec.isSigned()) {\n+                        n2 = -1 - n;\n                     }\n                     else {\n-                        specifier += defaultCodec.getL();\n+                        n2 = n + bhsdCodec.getL();\n                     }\n-                    final byte[] specifierEncoded = defaultCodec.encode(new int[] { specifier });\n-                    final byte[] band = new byte[specifierEncoded.length + encodedBand.length];\n-                    System.arraycopy(specifierEncoded, 0, band, 0, specifierEncoded.length);\n-                    System.arraycopy(encodedBand, 0, band, specifierEncoded.length, encodedBand.length);\n-                    return band;\n+                    final byte[] encode = bhsdCodec.encode(new int[] { n2 });\n+                    final byte[] array3 = new byte[encode.length + array2.length];\n+                    System.arraycopy(encode, 0, array3, 0, encode.length);\n+                    System.arraycopy(array2, 0, array3, encode.length, array2.length);\n+                    return array3;\n                 }\n-                if (betterCodec instanceof PopulationCodec) {\n-                    final IntStream of = IntStream.of(BandSet.BandAnalysisResults.access$200(results));\n+                if (access$000 instanceof PopulationCodec) {\n+                    final IntStream of = IntStream.of(BandSet.BandAnalysisResults.access$200(analyseBand));\n                     final SegmentHeader segmentHeader = this.segmentHeader;\n                     Objects.requireNonNull(segmentHeader);\n                     of.forEach(segmentHeader::appendBandCodingSpecifier);\n-                    return encodedBand;\n+                    return array2;\n                 }\n-                if (betterCodec instanceof RunCodec) {}\n+                if (access$000 instanceof RunCodec) {}\n             }\n         }\n-        if (ints.length > 0) {\n-            if (encodedBand == null) {\n-                encodedBand = defaultCodec.encode(ints);\n-            }\n-            final int first = ints[0];\n-            if (defaultCodec.getB() != 1) {\n-                if (defaultCodec.isSigned() && first >= -256 && first <= -1) {\n-                    final int specifier2 = -1 - CodecEncoding.getSpecifierForDefaultCodec(defaultCodec);\n-                    final byte[] specifierEncoded2 = defaultCodec.encode(new int[] { specifier2 });\n-                    final byte[] band2 = new byte[specifierEncoded2.length + encodedBand.length];\n-                    System.arraycopy(specifierEncoded2, 0, band2, 0, specifierEncoded2.length);\n-                    System.arraycopy(encodedBand, 0, band2, specifierEncoded2.length, encodedBand.length);\n-                    return band2;\n+        if (array.length > 0) {\n+            if (array2 == null) {\n+                array2 = bhsdCodec.encode(array);\n+            }\n+            final int n3 = array[0];\n+            if (bhsdCodec.getB() != 1) {\n+                if (bhsdCodec.isSigned() && n3 >= -256 && n3 <= -1) {\n+                    final byte[] encode2 = bhsdCodec.encode(new int[] { -1 - CodecEncoding.getSpecifierForDefaultCodec(bhsdCodec) });\n+                    final byte[] array4 = new byte[encode2.length + array2.length];\n+                    System.arraycopy(encode2, 0, array4, 0, encode2.length);\n+                    System.arraycopy(array2, 0, array4, encode2.length, array2.length);\n+                    return array4;\n                 }\n-                if (!defaultCodec.isSigned() && first >= defaultCodec.getL() && first <= defaultCodec.getL() + 255) {\n-                    final int specifier2 = CodecEncoding.getSpecifierForDefaultCodec(defaultCodec) + defaultCodec.getL();\n-                    final byte[] specifierEncoded2 = defaultCodec.encode(new int[] { specifier2 });\n-                    final byte[] band2 = new byte[specifierEncoded2.length + encodedBand.length];\n-                    System.arraycopy(specifierEncoded2, 0, band2, 0, specifierEncoded2.length);\n-                    System.arraycopy(encodedBand, 0, band2, specifierEncoded2.length, encodedBand.length);\n-                    return band2;\n+                if (!bhsdCodec.isSigned() && n3 >= bhsdCodec.getL() && n3 <= bhsdCodec.getL() + 255) {\n+                    final byte[] encode3 = bhsdCodec.encode(new int[] { CodecEncoding.getSpecifierForDefaultCodec(bhsdCodec) + bhsdCodec.getL() });\n+                    final byte[] array5 = new byte[encode3.length + array2.length];\n+                    System.arraycopy(encode3, 0, array5, 0, encode3.length);\n+                    System.arraycopy(array2, 0, array5, encode3.length, array2.length);\n+                    return array5;\n                 }\n             }\n-            return encodedBand;\n+            return array2;\n         }\n         return new byte[0];\n     }\n     \n-    private BandSet.BandAnalysisResults analyseBand(final String name, final int[] band, final BHSDCodec defaultCodec) throws Pack200Exception {\n-        final BandSet.BandAnalysisResults results = new BandSet.BandAnalysisResults(this);\n+    private BandSet.BandAnalysisResults analyseBand(final String s, final int[] array, final BHSDCodec bhsdCodec) throws Pack200Exception {\n+        final BandSet.BandAnalysisResults bandAnalysisResults = new BandSet.BandAnalysisResults(this);\n         if (this.canonicalLargest == null) {\n             this.canonicalLargest = new long[116];\n             this.canonicalSmallest = new long[116];\n             for (int i = 1; i < this.canonicalLargest.length; ++i) {\n                 this.canonicalLargest[i] = CodecEncoding.getCanonicalCodec(i).largest();\n                 this.canonicalSmallest[i] = CodecEncoding.getCanonicalCodec(i).smallest();\n             }\n         }\n-        final BandSet.BandData bandData = new BandSet.BandData(this, band);\n-        final byte[] encoded = defaultCodec.encode(band);\n-        BandSet.BandAnalysisResults.access$102(results, encoded);\n-        if (encoded.length <= band.length + 23 - 2 * this.effort) {\n-            return results;\n+        final BandSet.BandData bandData = new BandSet.BandData(this, array);\n+        final byte[] encode = bhsdCodec.encode(array);\n+        BandSet.BandAnalysisResults.access$102(bandAnalysisResults, encode);\n+        if (encode.length <= array.length + 23 - 2 * this.effort) {\n+            return bandAnalysisResults;\n         }\n         if (!bandData.anyNegatives() && BandSet.BandData.access$300(bandData) <= Codec.BYTE1.largest()) {\n-            BandSet.BandAnalysisResults.access$102(results, Codec.BYTE1.encode(band));\n-            BandSet.BandAnalysisResults.access$002(results, (Codec)Codec.BYTE1);\n-            return results;\n+            BandSet.BandAnalysisResults.access$102(bandAnalysisResults, Codec.BYTE1.encode(array));\n+            BandSet.BandAnalysisResults.access$002(bandAnalysisResults, (Codec)Codec.BYTE1);\n+            return bandAnalysisResults;\n         }\n-        if (this.effort > 3 && !name.equals(\"POPULATION\")) {\n+        if (this.effort > 3 && !s.equals(\"POPULATION\")) {\n             final int numDistinctValues = bandData.numDistinctValues();\n-            final float distinctValuesAsProportion = numDistinctValues / (float)band.length;\n-            if (numDistinctValues < 100 || distinctValuesAsProportion < 0.02 || (this.effort > 6 && distinctValuesAsProportion < 0.04)) {\n-                this.encodeWithPopulationCodec(name, band, defaultCodec, bandData, results);\n-                if (this.timeToStop(results)) {\n-                    return results;\n+            final float n = numDistinctValues / (float)array.length;\n+            if (numDistinctValues < 100 || n < 0.02 || (this.effort > 6 && n < 0.04)) {\n+                this.encodeWithPopulationCodec(s, array, bhsdCodec, bandData, bandAnalysisResults);\n+                if (this.timeToStop(bandAnalysisResults)) {\n+                    return bandAnalysisResults;\n                 }\n             }\n         }\n-        final List<BHSDCodec[]> codecFamiliesToTry = new ArrayList<BHSDCodec[]>();\n+        final ArrayList list = new ArrayList();\n         if (bandData.mainlyPositiveDeltas() && bandData.mainlySmallDeltas()) {\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs2);\n+            list.add(CanonicalCodecFamilies.deltaUnsignedCodecs2);\n         }\n         if (bandData.wellCorrelated()) {\n             if (bandData.mainlyPositiveDeltas()) {\n-                codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs1);\n-                codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs3);\n-                codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs4);\n-                codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs5);\n-                codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs1);\n-                codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs3);\n-                codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs4);\n-                codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs5);\n-                codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs2);\n+                list.add(CanonicalCodecFamilies.deltaUnsignedCodecs1);\n+                list.add(CanonicalCodecFamilies.deltaUnsignedCodecs3);\n+                list.add(CanonicalCodecFamilies.deltaUnsignedCodecs4);\n+                list.add(CanonicalCodecFamilies.deltaUnsignedCodecs5);\n+                list.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs1);\n+                list.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs3);\n+                list.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs4);\n+                list.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs5);\n+                list.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs2);\n             }\n             else {\n-                codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs1);\n-                codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs3);\n-                codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs2);\n-                codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs4);\n-                codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs5);\n-                codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaSignedCodecs1);\n-                codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaSignedCodecs2);\n+                list.add(CanonicalCodecFamilies.deltaSignedCodecs1);\n+                list.add(CanonicalCodecFamilies.deltaSignedCodecs3);\n+                list.add(CanonicalCodecFamilies.deltaSignedCodecs2);\n+                list.add(CanonicalCodecFamilies.deltaSignedCodecs4);\n+                list.add(CanonicalCodecFamilies.deltaSignedCodecs5);\n+                list.add(CanonicalCodecFamilies.nonDeltaSignedCodecs1);\n+                list.add(CanonicalCodecFamilies.nonDeltaSignedCodecs2);\n             }\n         }\n         else if (bandData.anyNegatives()) {\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaSignedCodecs1);\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaSignedCodecs2);\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs1);\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs2);\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs3);\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs4);\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.deltaSignedCodecs5);\n+            list.add(CanonicalCodecFamilies.nonDeltaSignedCodecs1);\n+            list.add(CanonicalCodecFamilies.nonDeltaSignedCodecs2);\n+            list.add(CanonicalCodecFamilies.deltaSignedCodecs1);\n+            list.add(CanonicalCodecFamilies.deltaSignedCodecs2);\n+            list.add(CanonicalCodecFamilies.deltaSignedCodecs3);\n+            list.add(CanonicalCodecFamilies.deltaSignedCodecs4);\n+            list.add(CanonicalCodecFamilies.deltaSignedCodecs5);\n         }\n         else {\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs1);\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs3);\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs4);\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs5);\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs2);\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs1);\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs3);\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs4);\n-            codecFamiliesToTry.add(CanonicalCodecFamilies.deltaUnsignedCodecs5);\n+            list.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs1);\n+            list.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs3);\n+            list.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs4);\n+            list.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs5);\n+            list.add(CanonicalCodecFamilies.nonDeltaUnsignedCodecs2);\n+            list.add(CanonicalCodecFamilies.deltaUnsignedCodecs1);\n+            list.add(CanonicalCodecFamilies.deltaUnsignedCodecs3);\n+            list.add(CanonicalCodecFamilies.deltaUnsignedCodecs4);\n+            list.add(CanonicalCodecFamilies.deltaUnsignedCodecs5);\n         }\n-        if (name.equalsIgnoreCase(\"cpint\")) {\n+        if (s.equalsIgnoreCase(\"cpint\")) {\n             System.out.print(\"\");\n         }\n-        for (final BHSDCodec[] family : codecFamiliesToTry) {\n-            this.tryCodecs(name, band, defaultCodec, bandData, results, encoded, family);\n-            if (this.timeToStop(results)) {\n+        final Iterator iterator = list.iterator();\n+        while (iterator.hasNext()) {\n+            this.tryCodecs(s, array, bhsdCodec, bandData, bandAnalysisResults, encode, (BHSDCodec[])iterator.next());\n+            if (this.timeToStop(bandAnalysisResults)) {\n                 break;\n             }\n         }\n-        return results;\n+        return bandAnalysisResults;\n     }\n     \n-    private boolean timeToStop(final BandSet.BandAnalysisResults results) {\n+    private boolean timeToStop(final BandSet.BandAnalysisResults bandAnalysisResults) {\n         if (this.effort > 6) {\n-            return BandSet.BandAnalysisResults.access$400(results) >= this.effort * 2;\n+            return BandSet.BandAnalysisResults.access$400(bandAnalysisResults) >= this.effort * 2;\n         }\n-        return BandSet.BandAnalysisResults.access$400(results) >= this.effort;\n+        return BandSet.BandAnalysisResults.access$400(bandAnalysisResults) >= this.effort;\n     }\n     \n-    private void tryCodecs(final String name, final int[] band, final BHSDCodec defaultCodec, final BandSet.BandData bandData, final BandSet.BandAnalysisResults results, final byte[] encoded, final BHSDCodec[] potentialCodecs) throws Pack200Exception {\n-        for (final BHSDCodec potential : potentialCodecs) {\n-            if (potential.equals((Object)defaultCodec)) {\n+    private void tryCodecs(final String s, final int[] array, final BHSDCodec bhsdCodec, final BandSet.BandData bandData, final BandSet.BandAnalysisResults bandAnalysisResults, final byte[] array2, final BHSDCodec[] array3) throws Pack200Exception {\n+        for (final BHSDCodec bhsdCodec2 : array3) {\n+            if (bhsdCodec2.equals((Object)bhsdCodec)) {\n                 return;\n             }\n-            if (potential.isDelta()) {\n-                if (potential.largest() >= BandSet.BandData.access$500(bandData) && potential.smallest() <= BandSet.BandData.access$600(bandData) && potential.largest() >= BandSet.BandData.access$300(bandData) && potential.smallest() <= BandSet.BandData.access$700(bandData)) {\n-                    final byte[] encoded2 = potential.encode(band);\n-                    BandSet.BandAnalysisResults.access$408(results);\n-                    final byte[] specifierEncoded = defaultCodec.encode(CodecEncoding.getSpecifier((Codec)potential, (Codec)null));\n-                    final int saved = encoded.length - encoded2.length - specifierEncoded.length;\n-                    if (saved > BandSet.BandAnalysisResults.access$800(results)) {\n-                        BandSet.BandAnalysisResults.access$002(results, (Codec)potential);\n-                        BandSet.BandAnalysisResults.access$102(results, encoded2);\n-                        BandSet.BandAnalysisResults.access$802(results, saved);\n+            if (bhsdCodec2.isDelta()) {\n+                if (bhsdCodec2.largest() >= BandSet.BandData.access$500(bandData) && bhsdCodec2.smallest() <= BandSet.BandData.access$600(bandData) && bhsdCodec2.largest() >= BandSet.BandData.access$300(bandData) && bhsdCodec2.smallest() <= BandSet.BandData.access$700(bandData)) {\n+                    final byte[] encode = bhsdCodec2.encode(array);\n+                    BandSet.BandAnalysisResults.access$408(bandAnalysisResults);\n+                    final int n = array2.length - encode.length - bhsdCodec.encode(CodecEncoding.getSpecifier((Codec)bhsdCodec2, (Codec)null)).length;\n+                    if (n > BandSet.BandAnalysisResults.access$800(bandAnalysisResults)) {\n+                        BandSet.BandAnalysisResults.access$002(bandAnalysisResults, (Codec)bhsdCodec2);\n+                        BandSet.BandAnalysisResults.access$102(bandAnalysisResults, encode);\n+                        BandSet.BandAnalysisResults.access$802(bandAnalysisResults, n);\n                     }\n                 }\n             }\n-            else if (potential.largest() >= BandSet.BandData.access$300(bandData) && potential.smallest() <= BandSet.BandData.access$700(bandData)) {\n-                final byte[] encoded2 = potential.encode(band);\n-                BandSet.BandAnalysisResults.access$408(results);\n-                final byte[] specifierEncoded = defaultCodec.encode(CodecEncoding.getSpecifier((Codec)potential, (Codec)null));\n-                final int saved = encoded.length - encoded2.length - specifierEncoded.length;\n-                if (saved > BandSet.BandAnalysisResults.access$800(results)) {\n-                    BandSet.BandAnalysisResults.access$002(results, (Codec)potential);\n-                    BandSet.BandAnalysisResults.access$102(results, encoded2);\n-                    BandSet.BandAnalysisResults.access$802(results, saved);\n+            else if (bhsdCodec2.largest() >= BandSet.BandData.access$300(bandData) && bhsdCodec2.smallest() <= BandSet.BandData.access$700(bandData)) {\n+                final byte[] encode2 = bhsdCodec2.encode(array);\n+                BandSet.BandAnalysisResults.access$408(bandAnalysisResults);\n+                final int n2 = array2.length - encode2.length - bhsdCodec.encode(CodecEncoding.getSpecifier((Codec)bhsdCodec2, (Codec)null)).length;\n+                if (n2 > BandSet.BandAnalysisResults.access$800(bandAnalysisResults)) {\n+                    BandSet.BandAnalysisResults.access$002(bandAnalysisResults, (Codec)bhsdCodec2);\n+                    BandSet.BandAnalysisResults.access$102(bandAnalysisResults, encode2);\n+                    BandSet.BandAnalysisResults.access$802(bandAnalysisResults, n2);\n                 }\n             }\n-            if (this.timeToStop(results)) {\n+            if (this.timeToStop(bandAnalysisResults)) {\n                 return;\n             }\n         }\n     }\n     \n-    private void encodeWithPopulationCodec(final String name, final int[] band, final BHSDCodec defaultCodec, final BandSet.BandData bandData, final BandSet.BandAnalysisResults results) throws Pack200Exception {\n-        BandSet.BandAnalysisResults.access$412(results, 3);\n-        final Map<Integer, Integer> distinctValues = BandSet.BandData.access$900(bandData);\n-        final List<Integer> favored = new ArrayList<Integer>();\n-        final int k;\n-        distinctValues.forEach((k, v) -> {\n-            if (v > 2 || distinctValues.size() < 256) {\n-                favored.add(k);\n+    private void encodeWithPopulationCodec(final String s, final int[] array, final BHSDCodec bhsdCodec, final BandSet.BandData bandData, final BandSet.BandAnalysisResults bandAnalysisResults) throws Pack200Exception {\n+        BandSet.BandAnalysisResults.access$412(bandAnalysisResults, 3);\n+        final Map access$900 = BandSet.BandData.access$900(bandData);\n+        final ArrayList list = new ArrayList();\n+        access$900.forEach((n7, n8) -> {\n+            if (n8 > 2 || map.size() < 256) {\n+                list4.add(n7);\n             }\n             return;\n         });\n-        if (distinctValues.size() > 255) {\n-            favored.sort((arg0, arg1) -> Integer.valueOf(distinctValues.get((Object)arg1)).compareTo(Integer.valueOf(distinctValues.get((Object)arg0))));\n+        if (access$900.size() > 255) {\n+            list.sort((n9, n10) -> Integer.valueOf(map2.get((Object)n10)).compareTo(Integer.valueOf(map2.get((Object)n9))));\n         }\n-        final Map<Integer, Integer> favoredToIndex = new HashMap<Integer, Integer>();\n-        for (int i = 0; i < favored.size(); ++i) {\n-            favoredToIndex.put(Integer.valueOf(favored.get(i)), Integer.valueOf(i));\n-        }\n-        final IntList unfavoured = new IntList();\n-        final int[] tokens = new int[band.length];\n-        for (int j = 0; j < band.length; ++j) {\n-            final Integer favouredIndex = Integer.valueOf(favoredToIndex.get((Object)Integer.valueOf(band[j])));\n-            if (favouredIndex == null) {\n-                tokens[j] = 0;\n-                unfavoured.add(band[j]);\n+        final HashMap hashMap = new HashMap();\n+        for (int i = 0; i < list.size(); ++i) {\n+            hashMap.put(list.get(i), Integer.valueOf(i));\n+        }\n+        final IntList list2 = new IntList();\n+        final int[] array2 = new int[array.length];\n+        for (int j = 0; j < array.length; ++j) {\n+            final Integer n = (Integer)hashMap.get(Integer.valueOf(array[j]));\n+            if (n == null) {\n+                array2[j] = 0;\n+                list2.add(array[j]);\n             }\n             else {\n-                tokens[j] = favouredIndex + 1;\n+                array2[j] = n + 1;\n             }\n         }\n-        favored.add(Integer.valueOf(favored.get(favored.size() - 1)));\n-        final int[] favouredBand = this.integerListToArray(favored);\n-        final int[] unfavouredBand = unfavoured.toArray();\n-        final BandSet.BandAnalysisResults favouredResults = this.analyseBand(\"POPULATION\", favouredBand, defaultCodec);\n-        final BandSet.BandAnalysisResults unfavouredResults = this.analyseBand(\"POPULATION\", unfavouredBand, defaultCodec);\n-        int tdefL = 0;\n+        list.add(list.get(list.size() - 1));\n+        final int[] integerListToArray = this.integerListToArray(list);\n+        final int[] array3 = list2.toArray();\n+        final BandSet.BandAnalysisResults analyseBand = this.analyseBand(\"POPULATION\", integerListToArray, bhsdCodec);\n+        final BandSet.BandAnalysisResults analyseBand2 = this.analyseBand(\"POPULATION\", array3, bhsdCodec);\n+        int n2 = 0;\n         int l = 0;\n-        Codec tokenCodec = null;\n-        k = favored.size() - 1;\n-        byte[] tokensEncoded;\n-        if (k < 256) {\n-            tdefL = 1;\n-            tokensEncoded = Codec.BYTE1.encode(tokens);\n+        Object access$901 = null;\n+        final int n3 = list.size() - 1;\n+        byte[] array4;\n+        if (n3 < 256) {\n+            n2 = 1;\n+            array4 = Codec.BYTE1.encode(array2);\n         }\n         else {\n-            final BandSet.BandAnalysisResults tokenResults = this.analyseBand(\"POPULATION\", tokens, defaultCodec);\n-            tokenCodec = BandSet.BandAnalysisResults.access$000(tokenResults);\n-            tokensEncoded = BandSet.BandAnalysisResults.access$100(tokenResults);\n-            if (tokenCodec == null) {\n-                tokenCodec = (Codec)defaultCodec;\n-            }\n-            l = ((BHSDCodec)tokenCodec).getL();\n-            final int h = ((BHSDCodec)tokenCodec).getH();\n-            final int s = ((BHSDCodec)tokenCodec).getS();\n-            final int b = ((BHSDCodec)tokenCodec).getB();\n-            final int d = ((BHSDCodec)tokenCodec).isDelta() ? 1 : 0;\n-            if (s == 0 && d == 0) {\n-                boolean canUseTDefL = true;\n-                if (b > 1) {\n-                    final BHSDCodec oneLowerB = new BHSDCodec(b - 1, h);\n-                    if (oneLowerB.largest() >= k) {\n-                        canUseTDefL = false;\n-                    }\n+            final BandSet.BandAnalysisResults analyseBand3 = this.analyseBand(\"POPULATION\", array2, bhsdCodec);\n+            access$901 = BandSet.BandAnalysisResults.access$000(analyseBand3);\n+            array4 = BandSet.BandAnalysisResults.access$100(analyseBand3);\n+            if (access$901 == null) {\n+                access$901 = bhsdCodec;\n+            }\n+            l = ((BHSDCodec)access$901).getL();\n+            final int h = ((BHSDCodec)access$901).getH();\n+            final int s2 = ((BHSDCodec)access$901).getS();\n+            final int b = ((BHSDCodec)access$901).getB();\n+            final boolean delta = ((BHSDCodec)access$901).isDelta();\n+            if (s2 == 0 && !delta) {\n+                boolean b2 = true;\n+                if (b > 1 && new BHSDCodec(b - 1, h).largest() >= n3) {\n+                    b2 = false;\n                 }\n-                if (canUseTDefL) {\n+                if (b2) {\n                     switch (l) {\n                         case 4: {\n-                            tdefL = 1;\n+                            n2 = 1;\n                             break;\n                         }\n                         case 8: {\n-                            tdefL = 2;\n+                            n2 = 2;\n                             break;\n                         }\n                         case 16: {\n-                            tdefL = 3;\n+                            n2 = 3;\n                             break;\n                         }\n                         case 32: {\n-                            tdefL = 4;\n+                            n2 = 4;\n                             break;\n                         }\n                         case 64: {\n-                            tdefL = 5;\n+                            n2 = 5;\n                             break;\n                         }\n                         case 128: {\n-                            tdefL = 6;\n+                            n2 = 6;\n                             break;\n                         }\n                         case 192: {\n-                            tdefL = 7;\n+                            n2 = 7;\n                             break;\n                         }\n                         case 224: {\n-                            tdefL = 8;\n+                            n2 = 8;\n                             break;\n                         }\n                         case 240: {\n-                            tdefL = 9;\n+                            n2 = 9;\n                             break;\n                         }\n                         case 248: {\n-                            tdefL = 10;\n+                            n2 = 10;\n                             break;\n                         }\n                         case 252: {\n-                            tdefL = 11;\n+                            n2 = 11;\n                             break;\n                         }\n                     }\n                 }\n             }\n         }\n-        final byte[] favouredEncoded = BandSet.BandAnalysisResults.access$100(favouredResults);\n-        final byte[] unfavouredEncoded = BandSet.BandAnalysisResults.access$100(unfavouredResults);\n-        final Codec favouredCodec = BandSet.BandAnalysisResults.access$000(favouredResults);\n-        final Codec unfavouredCodec = BandSet.BandAnalysisResults.access$000(unfavouredResults);\n-        int specifier = 141 + ((favouredCodec == null) ? 1 : 0) + 4 * tdefL + ((unfavouredCodec == null) ? 2 : 0);\n-        final IntList extraBandMetadata = new IntList(3);\n-        if (favouredCodec != null) {\n-            final IntStream of = IntStream.of(CodecEncoding.getSpecifier(favouredCodec, (Codec)null));\n-            final IntList obj = extraBandMetadata;\n+        final byte[] access$902 = BandSet.BandAnalysisResults.access$100(analyseBand);\n+        final byte[] access$903 = BandSet.BandAnalysisResults.access$100(analyseBand2);\n+        final Codec access$904 = BandSet.BandAnalysisResults.access$000(analyseBand);\n+        final Codec access$905 = BandSet.BandAnalysisResults.access$000(analyseBand2);\n+        final int n4 = 141 + ((access$904 == null) ? 1 : 0) + 4 * n2 + ((access$905 == null) ? 2 : 0);\n+        final IntList list3 = new IntList(3);\n+        if (access$904 != null) {\n+            final IntStream of = IntStream.of(CodecEncoding.getSpecifier(access$904, (Codec)null));\n+            final IntList obj = list3;\n             Objects.requireNonNull(obj);\n             of.forEach(obj::add);\n         }\n-        if (tdefL == 0) {\n-            final IntStream of2 = IntStream.of(CodecEncoding.getSpecifier(tokenCodec, (Codec)null));\n-            final IntList obj2 = extraBandMetadata;\n+        if (n2 == 0) {\n+            final IntStream of2 = IntStream.of(CodecEncoding.getSpecifier((Codec)access$901, (Codec)null));\n+            final IntList obj2 = list3;\n             Objects.requireNonNull(obj2);\n             of2.forEach(obj2::add);\n         }\n-        if (unfavouredCodec != null) {\n-            final IntStream of3 = IntStream.of(CodecEncoding.getSpecifier(unfavouredCodec, (Codec)null));\n-            final IntList obj3 = extraBandMetadata;\n+        if (access$905 != null) {\n+            final IntStream of3 = IntStream.of(CodecEncoding.getSpecifier(access$905, (Codec)null));\n+            final IntList obj3 = list3;\n             Objects.requireNonNull(obj3);\n             of3.forEach(obj3::add);\n         }\n-        final int[] extraMetadata = extraBandMetadata.toArray();\n-        final byte[] extraMetadataEncoded = Codec.UNSIGNED5.encode(extraMetadata);\n-        if (defaultCodec.isSigned()) {\n-            specifier = -1 - specifier;\n+        final int[] array5 = list3.toArray();\n+        final byte[] encode = Codec.UNSIGNED5.encode(array5);\n+        int n5;\n+        if (bhsdCodec.isSigned()) {\n+            n5 = -1 - n4;\n         }\n         else {\n-            specifier += defaultCodec.getL();\n+            n5 = n4 + bhsdCodec.getL();\n         }\n-        final byte[] firstValueEncoded = defaultCodec.encode(new int[] { specifier });\n-        final int totalBandLength = firstValueEncoded.length + favouredEncoded.length + tokensEncoded.length + unfavouredEncoded.length;\n-        if (totalBandLength + extraMetadataEncoded.length < BandSet.BandAnalysisResults.access$100(results).length) {\n-            BandSet.BandAnalysisResults.access$812(results, BandSet.BandAnalysisResults.access$100(results).length - (totalBandLength + extraMetadataEncoded.length));\n-            final byte[] encodedBand = new byte[totalBandLength];\n-            System.arraycopy(firstValueEncoded, 0, encodedBand, 0, firstValueEncoded.length);\n-            System.arraycopy(favouredEncoded, 0, encodedBand, firstValueEncoded.length, favouredEncoded.length);\n-            System.arraycopy(tokensEncoded, 0, encodedBand, firstValueEncoded.length + favouredEncoded.length, tokensEncoded.length);\n-            System.arraycopy(unfavouredEncoded, 0, encodedBand, firstValueEncoded.length + favouredEncoded.length + tokensEncoded.length, unfavouredEncoded.length);\n-            BandSet.BandAnalysisResults.access$102(results, encodedBand);\n-            BandSet.BandAnalysisResults.access$202(results, extraMetadata);\n+        final byte[] encode2 = bhsdCodec.encode(new int[] { n5 });\n+        final int n6 = encode2.length + access$902.length + array4.length + access$903.length;\n+        if (n6 + encode.length < BandSet.BandAnalysisResults.access$100(bandAnalysisResults).length) {\n+            BandSet.BandAnalysisResults.access$812(bandAnalysisResults, BandSet.BandAnalysisResults.access$100(bandAnalysisResults).length - (n6 + encode.length));\n+            final byte[] array6 = new byte[n6];\n+            System.arraycopy(encode2, 0, array6, 0, encode2.length);\n+            System.arraycopy(access$902, 0, array6, encode2.length, access$902.length);\n+            System.arraycopy(array4, 0, array6, encode2.length + access$902.length, array4.length);\n+            System.arraycopy(access$903, 0, array6, encode2.length + access$902.length + array4.length, access$903.length);\n+            BandSet.BandAnalysisResults.access$102(bandAnalysisResults, array6);\n+            BandSet.BandAnalysisResults.access$202(bandAnalysisResults, array5);\n             if (l != 0) {\n-                BandSet.BandAnalysisResults.access$002(results, (Codec)new PopulationCodec(favouredCodec, l, unfavouredCodec));\n+                BandSet.BandAnalysisResults.access$002(bandAnalysisResults, (Codec)new PopulationCodec(access$904, l, access$905));\n             }\n             else {\n-                BandSet.BandAnalysisResults.access$002(results, (Codec)new PopulationCodec(favouredCodec, tokenCodec, unfavouredCodec));\n+                BandSet.BandAnalysisResults.access$002(bandAnalysisResults, (Codec)new PopulationCodec(access$904, (Codec)access$901, access$905));\n             }\n         }\n     }\n     \n-    protected byte[] encodeFlags(final String name, final long[] flags, final BHSDCodec loCodec, final BHSDCodec hiCodec, final boolean haveHiFlags) throws Pack200Exception {\n-        if (!haveHiFlags) {\n-            final int[] loBits = new int[flags.length];\n-            final int i;\n-            Arrays.setAll(loBits, i -> (int)flags[i]);\n-            return this.encodeBandInt(name, loBits, loCodec);\n+    protected byte[] encodeFlags(final String s, final long[] array, final BHSDCodec bhsdCodec, final BHSDCodec bhsdCodec2, final boolean b) throws Pack200Exception {\n+        if (!b) {\n+            final int[] array2 = new int[array.length];\n+            Arrays.setAll(array2, n3 -> (int)array6[n3]);\n+            return this.encodeBandInt(s, array2, bhsdCodec);\n         }\n-        final int[] hiBits = new int[flags.length];\n-        final int[] loBits2 = new int[flags.length];\n-        for (int i = 0; i < flags.length; ++i) {\n-            final long l = flags[i];\n-            hiBits[i] = (int)(l >> 32);\n-            loBits2[i] = (int)l;\n+        final int[] array3 = new int[array.length];\n+        final int[] array4 = new int[array.length];\n+        for (int i = 0; i < array.length; ++i) {\n+            final long n = array[i];\n+            array3[i] = (int)(n >> 32);\n+            array4[i] = (int)n;\n         }\n-        final byte[] hi = this.encodeBandInt(name, hiBits, hiCodec);\n-        final byte[] lo = this.encodeBandInt(name, loBits2, loCodec);\n-        final byte[] total = new byte[hi.length + lo.length];\n-        System.arraycopy(hi, 0, total, 0, hi.length);\n-        System.arraycopy(lo, 0, total, hi.length + 1, lo.length);\n-        return total;\n+        final byte[] encodeBandInt = this.encodeBandInt(s, array3, bhsdCodec2);\n+        final byte[] encodeBandInt2 = this.encodeBandInt(s, array4, bhsdCodec);\n+        final byte[] array5 = new byte[encodeBandInt.length + encodeBandInt2.length];\n+        System.arraycopy(encodeBandInt, 0, array5, 0, encodeBandInt.length);\n+        System.arraycopy(encodeBandInt2, 0, array5, encodeBandInt.length + 1, encodeBandInt2.length);\n+        return array5;\n     }\n     \n-    protected int[] integerListToArray(final List<Integer> integerList) {\n-        return integerList.stream().mapToInt(Integer::intValue).toArray();\n+    protected int[] integerListToArray(final List<Integer> list) {\n+        return list.stream().mapToInt(Integer::intValue).toArray();\n     }\n     \n-    protected long[] longListToArray(final List<Long> longList) {\n-        return longList.stream().mapToLong(Long::longValue).toArray();\n+    protected long[] longListToArray(final List<Long> list) {\n+        return list.stream().mapToLong(Long::longValue).toArray();\n     }\n     \n     protected int[] cpEntryListToArray(final List<? extends ConstantPoolEntry> list) {\n         final int[] array = new int[list.size()];\n         for (int i = 0; i < array.length; ++i) {\n             array[i] = ((ConstantPoolEntry)list.get(i)).getIndex();\n             if (array[i] < 0) {\n@@ -436,42 +430,41 @@\n             }\n         }\n         return array;\n     }\n     \n     protected int[] cpEntryOrNullListToArray(final List<? extends ConstantPoolEntry> list) {\n         final int[] array = new int[list.size()];\n-        for (int j = 0; j < array.length; ++j) {\n-            final ConstantPoolEntry cpEntry = (ConstantPoolEntry)list.get(j);\n-            array[j] = ((cpEntry == null) ? 0 : (cpEntry.getIndex() + 1));\n-            if (cpEntry != null && cpEntry.getIndex() < 0) {\n+        for (int i = 0; i < array.length; ++i) {\n+            final ConstantPoolEntry constantPoolEntry = (ConstantPoolEntry)list.get(i);\n+            array[i] = ((constantPoolEntry == null) ? 0 : (constantPoolEntry.getIndex() + 1));\n+            if (constantPoolEntry != null && constantPoolEntry.getIndex() < 0) {\n                 throw new IllegalArgumentException(\"Index should be > 0\");\n             }\n         }\n         return array;\n     }\n     \n-    protected byte[] encodeFlags(final String name, final long[][] flags, final BHSDCodec loCodec, final BHSDCodec hiCodec, final boolean haveHiFlags) throws Pack200Exception {\n-        return this.encodeFlags(name, this.flatten(flags), loCodec, hiCodec, haveHiFlags);\n+    protected byte[] encodeFlags(final String s, final long[][] array, final BHSDCodec bhsdCodec, final BHSDCodec bhsdCodec2, final boolean b) throws Pack200Exception {\n+        return this.encodeFlags(s, this.flatten(array), bhsdCodec, bhsdCodec2, b);\n     }\n     \n-    private long[] flatten(final long[][] flags) {\n-        int totalSize = 0;\n-        for (final long[] flag : flags) {\n-            totalSize += flag.length;\n+    private long[] flatten(final long[][] array) {\n+        int n = 0;\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            n += array[i].length;\n         }\n-        final long[] flatArray = new long[totalSize];\n-        int index = 0;\n-        for (final long[] array : flags) {\n-            final long[] flag2 = array;\n-            for (final long element : array) {\n-                flatArray[index] = element;\n-                ++index;\n+        final long[] array2 = new long[n];\n+        int n2 = 0;\n+        for (final long[] array3 : array) {\n+            for (int length3 = array3.length, k = 0; k < length3; ++k) {\n+                array2[n2] = array3[k];\n+                ++n2;\n             }\n         }\n-        return flatArray;\n+        return array2;\n     }\n     \n     static {\n         effortThresholds = new int[] { 0, 0, 1000, 500, 100, 100, 100, 100, 100, 0 };\n     }\n }\n"}]}
