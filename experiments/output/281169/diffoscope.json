{"diffoscope-json-version": 1, "source1": "first/XmlStreamWriter.class", "source2": "second/XmlStreamWriter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,30 +20,30 @@\n     private final OutputStream out;\n     private final String defaultEncoding;\n     private StringWriter xmlPrologWriter;\n     private Writer writer;\n     private String encoding;\n     static final Pattern ENCODING_PATTERN;\n     \n-    public XmlStreamWriter(final OutputStream out) {\n-        this(out, null);\n+    public XmlStreamWriter(final OutputStream outputStream) {\n+        this(outputStream, null);\n     }\n     \n-    public XmlStreamWriter(final OutputStream out, final String defaultEncoding) {\n+    public XmlStreamWriter(final OutputStream out, final String s) {\n         this.xmlPrologWriter = new StringWriter(8192);\n         this.out = out;\n-        this.defaultEncoding = ((defaultEncoding != null) ? defaultEncoding : \"UTF-8\");\n+        this.defaultEncoding = ((s != null) ? s : \"UTF-8\");\n     }\n     \n     public XmlStreamWriter(final File file) throws FileNotFoundException {\n         this(file, null);\n     }\n     \n-    public XmlStreamWriter(final File file, final String defaultEncoding) throws FileNotFoundException {\n-        this(new FileOutputStream(file), defaultEncoding);\n+    public XmlStreamWriter(final File file, final String s) throws FileNotFoundException {\n+        this(new FileOutputStream(file), s);\n     }\n     \n     public String getEncoding() {\n         return this.encoding;\n     }\n     \n     public String getDefaultEncoding() {\n@@ -62,58 +62,58 @@\n     @Override\n     public void flush() throws IOException {\n         if (this.writer != null) {\n             this.writer.flush();\n         }\n     }\n     \n-    private void detectEncoding(final char[] cbuf, final int off, final int len) throws IOException {\n-        int size = len;\n-        final StringBuffer xmlProlog = this.xmlPrologWriter.getBuffer();\n-        if (xmlProlog.length() + len > 8192) {\n-            size = 8192 - xmlProlog.length();\n-        }\n-        this.xmlPrologWriter.write(cbuf, off, size);\n-        if (xmlProlog.length() >= 5) {\n-            if (xmlProlog.substring(0, 5).equals(\"<?xml\")) {\n-                final int xmlPrologEnd = xmlProlog.indexOf(\"?>\");\n-                if (xmlPrologEnd > 0) {\n-                    final Matcher m = XmlStreamWriter.ENCODING_PATTERN.matcher(xmlProlog.substring(0, xmlPrologEnd));\n-                    if (m.find()) {\n-                        this.encoding = m.group(1).toUpperCase(Locale.ROOT);\n+    private void detectEncoding(final char[] cbuf, final int off, final int n) throws IOException {\n+        int len = n;\n+        final StringBuffer buffer = this.xmlPrologWriter.getBuffer();\n+        if (buffer.length() + n > 8192) {\n+            len = 8192 - buffer.length();\n+        }\n+        this.xmlPrologWriter.write(cbuf, off, len);\n+        if (buffer.length() >= 5) {\n+            if (buffer.substring(0, 5).equals(\"<?xml\")) {\n+                final int index = buffer.indexOf(\"?>\");\n+                if (index > 0) {\n+                    final Matcher matcher = XmlStreamWriter.ENCODING_PATTERN.matcher(buffer.substring(0, index));\n+                    if (matcher.find()) {\n+                        this.encoding = matcher.group(1).toUpperCase(Locale.ROOT);\n                         this.encoding = this.encoding.substring(1, this.encoding.length() - 1);\n                     }\n                     else {\n                         this.encoding = this.defaultEncoding;\n                     }\n                 }\n-                else if (xmlProlog.length() >= 8192) {\n+                else if (buffer.length() >= 8192) {\n                     this.encoding = this.defaultEncoding;\n                 }\n             }\n             else {\n                 this.encoding = this.defaultEncoding;\n             }\n             if (this.encoding != null) {\n                 this.xmlPrologWriter = null;\n-                (this.writer = new OutputStreamWriter(this.out, this.encoding)).write(xmlProlog.toString());\n-                if (len > size) {\n-                    this.writer.write(cbuf, off + size, len - size);\n+                (this.writer = new OutputStreamWriter(this.out, this.encoding)).write(buffer.toString());\n+                if (n > len) {\n+                    this.writer.write(cbuf, off + len, n - len);\n                 }\n             }\n         }\n     }\n     \n     @Override\n-    public void write(final char[] cbuf, final int off, final int len) throws IOException {\n+    public void write(final char[] array, final int n, final int n2) throws IOException {\n         if (this.xmlPrologWriter != null) {\n-            this.detectEncoding(cbuf, off, len);\n+            this.detectEncoding(array, n, n2);\n         }\n         else {\n-            this.writer.write(cbuf, off, len);\n+            this.writer.write(array, n, n2);\n         }\n     }\n     \n     static {\n         ENCODING_PATTERN = XmlStreamReader.ENCODING_PATTERN;\n     }\n }\n"}]}
