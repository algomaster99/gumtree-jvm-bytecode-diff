{"diffoscope-json-version": 1, "source1": "first/PhoneticEngine.class", "source2": "second/PhoneticEngine.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,35 +1,41 @@\n \n package org.apache.commons.codec.language.bm;\n \n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.EnumMap;\n-import java.util.Collection;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Locale;\n import java.util.Comparator;\n import java.util.TreeMap;\n import java.util.Objects;\n import java.util.List;\n import java.util.Iterator;\n+import java.util.Collections;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Arrays;\n+import java.util.EnumMap;\n import java.util.Set;\n import java.util.Map;\n \n public class PhoneticEngine\n {\n     private static final Map<NameType, Set<String>> NAME_PREFIXES;\n     private static final int DEFAULT_MAX_PHONEMES = 20;\n     private final Lang lang;\n     private final NameType nameType;\n     private final RuleType ruleType;\n     private final boolean concat;\n     private final int maxPhonemes;\n     \n+    static {\n+        (NAME_PREFIXES = new EnumMap<NameType, Set<String>>(NameType.class)).put(NameType.ASHKENAZI, Collections.unmodifiableSet((Set<? extends String>)new HashSet<String>(Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))));\n+        PhoneticEngine.NAME_PREFIXES.put(NameType.SEPHARDIC, Collections.unmodifiableSet((Set<? extends String>)new HashSet<String>(Arrays.asList(\"al\", \"el\", \"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))));\n+        PhoneticEngine.NAME_PREFIXES.put(NameType.GENERIC, Collections.unmodifiableSet((Set<? extends String>)new HashSet<String>(Arrays.asList(\"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))));\n+    }\n+    \n     private static String join(final Iterable<String> strings, final String sep) {\n         final StringBuilder sb = new StringBuilder();\n         final Iterator<String> si = strings.iterator();\n         if (si.hasNext()) {\n             sb.append(si.next());\n         }\n         while (si.hasNext()) {\n@@ -78,15 +84,15 @@\n                     phonemes.put(mergedPhoneme, mergedPhoneme);\n                 }\n                 else {\n                     phonemes.put(newPhoneme, newPhoneme);\n                 }\n             }\n         }\n-        return new PhoneticEngine.PhonemeBuilder((Set)phonemes.keySet(), (PhoneticEngine.PhoneticEngine$1)null);\n+        return new PhoneticEngine.PhonemeBuilder((Set)phonemes.keySet(), (PhoneticEngine.PhonemeBuilder)null);\n     }\n     \n     public String encode(final String input) {\n         final Languages.LanguageSet languageSet = this.lang.guessLanguages(input);\n         return this.encode(input, languageSet);\n     }\n     \n@@ -98,39 +104,39 @@\n         if (this.nameType == NameType.GENERIC) {\n             if (input.length() >= 2 && input.substring(0, 2).equals(\"d'\")) {\n                 final String remainder = input.substring(2);\n                 final String combined = \"d\" + remainder;\n                 return \"(\" + this.encode(remainder) + \")-(\" + this.encode(combined) + \")\";\n             }\n             for (final String l : (Set)PhoneticEngine.NAME_PREFIXES.get(this.nameType)) {\n-                if (input.startsWith(l + \" \")) {\n+                if (input.startsWith(String.valueOf(l) + \" \")) {\n                     final String remainder2 = input.substring(l.length() + 1);\n-                    final String combined2 = l + remainder2;\n+                    final String combined2 = String.valueOf(l) + remainder2;\n                     return \"(\" + this.encode(remainder2) + \")-(\" + this.encode(combined2) + \")\";\n                 }\n             }\n         }\n         final List<String> words = Arrays.asList(input.split(\"\\\\s+\"));\n         final List<String> words2 = new ArrayList<String>();\n-        switch (PhoneticEngine.PhoneticEngine$1.$SwitchMap$org$apache$commons$codec$language$bm$NameType[this.nameType.ordinal()]) {\n-            case 1: {\n+        switch (this.nameType) {\n+            case SEPHARDIC: {\n                 for (final String aWord : words) {\n                     final String[] parts = aWord.split(\"'\");\n                     final String lastPart = parts[parts.length - 1];\n                     words2.add(lastPart);\n                 }\n                 words2.removeAll(PhoneticEngine.NAME_PREFIXES.get(this.nameType));\n                 break;\n             }\n-            case 2: {\n+            case ASHKENAZI: {\n                 words2.addAll(words);\n                 words2.removeAll(PhoneticEngine.NAME_PREFIXES.get(this.nameType));\n                 break;\n             }\n-            case 3: {\n+            case GENERIC: {\n                 words2.addAll(words);\n                 break;\n             }\n             default: {\n                 throw new IllegalStateException(\"Unreachable case: \" + this.nameType);\n             }\n         }\n@@ -172,14 +178,8 @@\n     public boolean isConcat() {\n         return this.concat;\n     }\n     \n     public int getMaxPhonemes() {\n         return this.maxPhonemes;\n     }\n-    \n-    static {\n-        (NAME_PREFIXES = new EnumMap<NameType, Set<String>>(NameType.class)).put(NameType.ASHKENAZI, Collections.unmodifiableSet((Set<? extends String>)new HashSet<String>(Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))));\n-        PhoneticEngine.NAME_PREFIXES.put(NameType.SEPHARDIC, Collections.unmodifiableSet((Set<? extends String>)new HashSet<String>(Arrays.asList(\"al\", \"el\", \"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))));\n-        PhoneticEngine.NAME_PREFIXES.put(NameType.GENERIC, Collections.unmodifiableSet((Set<? extends String>)new HashSet<String>(Arrays.asList(\"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))));\n-    }\n }\n"}]}
