{"diffoscope-json-version": 1, "source1": "first/IllegalTokenTextCheck.class", "source2": "second/IllegalTokenTextCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -35,43 +35,42 @@\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n     public boolean isCommentNodesRequired() {\n         return true;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final String text = ast.getText();\n-        if (this.format.matcher(text).find()) {\n-            String customMessage = this.message;\n-            if (customMessage.isEmpty()) {\n-                customMessage = \"illegal.token.text\";\n+    public void visitToken(final DetailAST detailAST) {\n+        if (this.format.matcher(detailAST.getText()).find()) {\n+            String message = this.message;\n+            if (message.isEmpty()) {\n+                message = \"illegal.token.text\";\n             }\n-            this.log(ast, customMessage, new Object[] { this.formatString });\n+            this.log(detailAST, message, new Object[] { this.formatString });\n         }\n     }\n     \n-    public void setMessage(final String message) {\n-        this.message = Objects.requireNonNullElse(message, \"\");\n+    public void setMessage(final String obj) {\n+        this.message = Objects.requireNonNullElse(obj, \"\");\n     }\n     \n-    public void setFormat(final String format) {\n-        this.formatString = format;\n+    public void setFormat(final String formatString) {\n+        this.formatString = formatString;\n         this.updateRegexp();\n     }\n     \n-    public void setIgnoreCase(final boolean caseInsensitive) {\n-        this.ignoreCase = caseInsensitive;\n+    public void setIgnoreCase(final boolean ignoreCase) {\n+        this.ignoreCase = ignoreCase;\n         this.updateRegexp();\n     }\n     \n     private void updateRegexp() {\n-        int compileFlags;\n+        int n;\n         if (this.ignoreCase) {\n-            compileFlags = 2;\n+            n = 2;\n         }\n         else {\n-            compileFlags = 0;\n+            n = 0;\n         }\n-        this.format = CommonUtil.createPattern(this.formatString, compileFlags);\n+        this.format = CommonUtil.createPattern(this.formatString, n);\n     }\n }\n"}]}
