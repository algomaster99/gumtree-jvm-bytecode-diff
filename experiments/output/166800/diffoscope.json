{"diffoscope-json-version": 1, "source1": "first/CSVFormat.class", "source2": "second/CSVFormat.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,224 +1,224 @@\n-  SHA-256 checksum 81fc4c51c4f2556eb4f924b23f922d98585f04ad17543369ea8dcc551ed54f8c\n+  SHA-256 checksum eaf2fbf96edd0af16b3dc0ab3eab9d6ef40f7b8e9cb49c96837687b58c86fa07\n   Compiled from \"CSVFormat.java\"\n public final class org.apache.commons.csv.CSVFormat implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #4                          // org/apache/commons/csv/CSVFormat\n   super_class: #203                       // java/lang/Object\n   interfaces: 1, fields: 32, methods: 84, attributes: 2\n Constant pool:\n-    #1 = Class              #441          // org/apache/commons/csv/Constants\n-    #2 = Methodref          #442.#443     // java/lang/Character.charValue:()C\n-    #3 = Methodref          #4.#444       // org/apache/commons/csv/CSVFormat.isLineBreak:(C)Z\n-    #4 = Class              #445          // org/apache/commons/csv/CSVFormat\n-    #5 = Methodref          #4.#446       // org/apache/commons/csv/CSVFormat.\"<init>\":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZZ)V\n-    #6 = Methodref          #207.#447     // org/apache/commons/csv/CSVFormat$Predefined.valueOf:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n-    #7 = Methodref          #207.#448     // org/apache/commons/csv/CSVFormat$Predefined.getFormat:()Lorg/apache/commons/csv/CSVFormat;\n-    #8 = Methodref          #203.#449     // java/lang/Object.\"<init>\":()V\n-    #9 = Fieldref           #4.#450       // org/apache/commons/csv/CSVFormat.delimiter:C\n-   #10 = Fieldref           #4.#451       // org/apache/commons/csv/CSVFormat.quoteCharacter:Ljava/lang/Character;\n-   #11 = Fieldref           #4.#452       // org/apache/commons/csv/CSVFormat.quoteMode:Lorg/apache/commons/csv/QuoteMode;\n-   #12 = Fieldref           #4.#453       // org/apache/commons/csv/CSVFormat.commentMarker:Ljava/lang/Character;\n-   #13 = Fieldref           #4.#454       // org/apache/commons/csv/CSVFormat.escapeCharacter:Ljava/lang/Character;\n-   #14 = Fieldref           #4.#455       // org/apache/commons/csv/CSVFormat.ignoreSurroundingSpaces:Z\n-   #15 = Fieldref           #4.#456       // org/apache/commons/csv/CSVFormat.allowMissingColumnNames:Z\n-   #16 = Fieldref           #4.#457       // org/apache/commons/csv/CSVFormat.ignoreEmptyLines:Z\n-   #17 = Fieldref           #4.#458       // org/apache/commons/csv/CSVFormat.recordSeparator:Ljava/lang/String;\n-   #18 = Fieldref           #4.#459       // org/apache/commons/csv/CSVFormat.nullString:Ljava/lang/String;\n-   #19 = Methodref          #4.#460       // org/apache/commons/csv/CSVFormat.toStringArray:([Ljava/lang/Object;)[Ljava/lang/String;\n-   #20 = Fieldref           #4.#461       // org/apache/commons/csv/CSVFormat.headerComments:[Ljava/lang/String;\n-   #21 = Methodref          #462.#463     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n+    #1 = Class              #431          // org/apache/commons/csv/Constants\n+    #2 = Methodref          #272.#432     // java/lang/Character.charValue:()C\n+    #3 = Methodref          #4.#433       // org/apache/commons/csv/CSVFormat.isLineBreak:(C)Z\n+    #4 = Class              #434          // org/apache/commons/csv/CSVFormat\n+    #5 = Methodref          #4.#435       // org/apache/commons/csv/CSVFormat.\"<init>\":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZZ)V\n+    #6 = Methodref          #207.#436     // org/apache/commons/csv/CSVFormat$Predefined.valueOf:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n+    #7 = Methodref          #207.#437     // org/apache/commons/csv/CSVFormat$Predefined.getFormat:()Lorg/apache/commons/csv/CSVFormat;\n+    #8 = Methodref          #203.#438     // java/lang/Object.\"<init>\":()V\n+    #9 = Fieldref           #4.#439       // org/apache/commons/csv/CSVFormat.delimiter:C\n+   #10 = Fieldref           #4.#440       // org/apache/commons/csv/CSVFormat.quoteCharacter:Ljava/lang/Character;\n+   #11 = Fieldref           #4.#441       // org/apache/commons/csv/CSVFormat.quoteMode:Lorg/apache/commons/csv/QuoteMode;\n+   #12 = Fieldref           #4.#442       // org/apache/commons/csv/CSVFormat.commentMarker:Ljava/lang/Character;\n+   #13 = Fieldref           #4.#443       // org/apache/commons/csv/CSVFormat.escapeCharacter:Ljava/lang/Character;\n+   #14 = Fieldref           #4.#444       // org/apache/commons/csv/CSVFormat.ignoreSurroundingSpaces:Z\n+   #15 = Fieldref           #4.#445       // org/apache/commons/csv/CSVFormat.allowMissingColumnNames:Z\n+   #16 = Fieldref           #4.#446       // org/apache/commons/csv/CSVFormat.ignoreEmptyLines:Z\n+   #17 = Fieldref           #4.#447       // org/apache/commons/csv/CSVFormat.recordSeparator:Ljava/lang/String;\n+   #18 = Fieldref           #4.#448       // org/apache/commons/csv/CSVFormat.nullString:Ljava/lang/String;\n+   #19 = Methodref          #4.#449       // org/apache/commons/csv/CSVFormat.toStringArray:([Ljava/lang/Object;)[Ljava/lang/String;\n+   #20 = Fieldref           #4.#450       // org/apache/commons/csv/CSVFormat.headerComments:[Ljava/lang/String;\n+   #21 = Methodref          #451.#452     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n    #22 = Class              #237          // \"[Ljava/lang/String;\"\n-   #23 = Fieldref           #4.#464       // org/apache/commons/csv/CSVFormat.header:[Ljava/lang/String;\n-   #24 = Fieldref           #4.#465       // org/apache/commons/csv/CSVFormat.skipHeaderRecord:Z\n-   #25 = Fieldref           #4.#466       // org/apache/commons/csv/CSVFormat.ignoreHeaderCase:Z\n-   #26 = Fieldref           #4.#467       // org/apache/commons/csv/CSVFormat.trailingDelimiter:Z\n-   #27 = Fieldref           #4.#468       // org/apache/commons/csv/CSVFormat.trim:Z\n-   #28 = Fieldref           #4.#469       // org/apache/commons/csv/CSVFormat.autoFlush:Z\n-   #29 = Class              #470          // java/lang/StringBuilder\n-   #30 = Methodref          #29.#449      // java/lang/StringBuilder.\"<init>\":()V\n-   #31 = Methodref          #29.#471      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #32 = Methodref          #29.#472      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #33 = Methodref          #29.#473      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #34 = Fieldref           #4.#474       // org/apache/commons/csv/CSVFormat.quotedNullString:Ljava/lang/String;\n-   #35 = Fieldref           #4.#475       // org/apache/commons/csv/CSVFormat.allowDuplicateHeaderNames:Z\n-   #36 = Methodref          #4.#476       // org/apache/commons/csv/CSVFormat.validate:()V\n-   #37 = Methodref          #203.#477     // java/lang/Object.getClass:()Ljava/lang/Class;\n-   #38 = Methodref          #442.#478     // java/lang/Character.equals:(Ljava/lang/Object;)Z\n-   #39 = Methodref          #132.#478     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #40 = Methodref          #479.#480     // java/util/Arrays.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z\n-   #41 = Class              #481          // java/io/StringWriter\n-   #42 = Methodref          #41.#449      // java/io/StringWriter.\"<init>\":()V\n-   #43 = Class              #482          // org/apache/commons/csv/CSVPrinter\n-   #44 = Methodref          #43.#483      // org/apache/commons/csv/CSVPrinter.\"<init>\":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n-   #45 = Methodref          #43.#484      // org/apache/commons/csv/CSVPrinter.printRecord:([Ljava/lang/Object;)V\n-   #46 = Methodref          #41.#473      // java/io/StringWriter.toString:()Ljava/lang/String;\n-   #47 = Methodref          #132.#485     // java/lang/String.trim:()Ljava/lang/String;\n-   #48 = Methodref          #43.#486      // org/apache/commons/csv/CSVPrinter.close:()V\n-   #49 = Class              #487          // java/lang/Throwable\n-   #50 = Methodref          #49.#488      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #51 = Class              #489          // java/io/IOException\n-   #52 = Class              #490          // java/lang/IllegalStateException\n-   #53 = Methodref          #52.#491      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #54 = Methodref          #492.#463     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n-   #55 = Methodref          #493.#463     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n-   #56 = Methodref          #494.#495     // org/apache/commons/csv/QuoteMode.hashCode:()I\n-   #57 = Methodref          #442.#495     // java/lang/Character.hashCode:()I\n-   #58 = Methodref          #132.#495     // java/lang/String.hashCode:()I\n-   #59 = Methodref          #479.#496     // java/util/Arrays.hashCode:([Ljava/lang/Object;)I\n-   #60 = Class              #497          // org/apache/commons/csv/CSVParser\n-   #61 = Methodref          #60.#498      // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-   #62 = Class              #499          // java/io/OutputStreamWriter\n-   #63 = Class              #500          // java/io/FileOutputStream\n-   #64 = Methodref          #63.#501      // java/io/FileOutputStream.\"<init>\":(Ljava/io/File;)V\n-   #65 = Methodref          #62.#502      // java/io/OutputStreamWriter.\"<init>\":(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n-   #66 = String             #503          //\n-   #67 = Fieldref           #494.#504     // org/apache/commons/csv/QuoteMode.ALL:Lorg/apache/commons/csv/QuoteMode;\n-   #68 = Class              #505          // java/lang/CharSequence\n-   #69 = Class              #506          // java/io/Reader\n-   #70 = Methodref          #4.#507       // org/apache/commons/csv/CSVFormat.print:(Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n-   #71 = Methodref          #203.#473     // java/lang/Object.toString:()Ljava/lang/String;\n-   #72 = Methodref          #4.#508       // org/apache/commons/csv/CSVFormat.getTrim:()Z\n-   #73 = Methodref          #4.#509       // org/apache/commons/csv/CSVFormat.trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n-   #74 = Methodref          #4.#510       // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n-   #75 = InterfaceMethodref #68.#511      // java/lang/CharSequence.length:()I\n-   #76 = Methodref          #4.#512       // org/apache/commons/csv/CSVFormat.getDelimiter:()C\n-   #77 = InterfaceMethodref #513.#514     // java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n-   #78 = InterfaceMethodref #513.#515     // java/lang/Appendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n-   #79 = Methodref          #4.#516       // org/apache/commons/csv/CSVFormat.isQuoteCharacterSet:()Z\n-   #80 = Methodref          #4.#517       // org/apache/commons/csv/CSVFormat.printWithQuotes:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n-   #81 = Methodref          #4.#518       // org/apache/commons/csv/CSVFormat.isEscapeCharacterSet:()Z\n-   #82 = Methodref          #4.#519       // org/apache/commons/csv/CSVFormat.printWithEscapes:(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n-   #83 = InterfaceMethodref #513.#520     // java/lang/Appendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n-   #84 = Class              #521          // java/nio/file/OpenOption\n-   #85 = Methodref          #522.#523     // java/nio/file/Files.newBufferedWriter:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n-   #86 = Methodref          #4.#524       // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n-   #87 = Methodref          #4.#525       // org/apache/commons/csv/CSVFormat.printWithQuotes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n-   #88 = Methodref          #4.#526       // org/apache/commons/csv/CSVFormat.printWithEscapes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n-   #89 = Class              #527          // java/io/Writer\n-   #90 = Methodref          #98.#528      // org/apache/commons/csv/IOUtils.copyLarge:(Ljava/io/Reader;Ljava/io/Writer;)J\n-   #91 = Methodref          #98.#529      // org/apache/commons/csv/IOUtils.copy:(Ljava/io/Reader;Ljava/lang/Appendable;)J\n-   #92 = Fieldref           #530.#531     // java/lang/System.out:Ljava/io/PrintStream;\n-   #93 = Methodref          #4.#532       // org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z\n-   #94 = Methodref          #4.#533       // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n-   #95 = Methodref          #4.#534       // org/apache/commons/csv/CSVFormat.println:(Ljava/lang/Appendable;)V\n-   #96 = Methodref          #4.#535       // org/apache/commons/csv/CSVFormat.getEscapeCharacter:()Ljava/lang/Character;\n-   #97 = InterfaceMethodref #68.#536      // java/lang/CharSequence.charAt:(I)C\n-   #98 = Class              #537          // org/apache/commons/csv/IOUtils\n-   #99 = Methodref          #29.#538      // java/lang/StringBuilder.\"<init>\":(I)V\n-  #100 = Methodref          #69.#539      // java/io/Reader.read:()I\n-  #101 = Methodref          #29.#540      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-  #102 = Methodref          #29.#541      // java/lang/StringBuilder.substring:(II)Ljava/lang/String;\n-  #103 = Methodref          #29.#542      // java/lang/StringBuilder.setLength:(I)V\n-  #104 = Methodref          #4.#543       // org/apache/commons/csv/CSVFormat.getQuoteCharacter:()Ljava/lang/Character;\n-  #105 = Methodref          #4.#544       // org/apache/commons/csv/CSVFormat.getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n-  #106 = Fieldref           #494.#545     // org/apache/commons/csv/QuoteMode.MINIMAL:Lorg/apache/commons/csv/QuoteMode;\n-  #107 = Fieldref           #205.#546     // org/apache/commons/csv/CSVFormat$1.$SwitchMap$org$apache$commons$csv$QuoteMode:[I\n-  #108 = Methodref          #494.#547     // org/apache/commons/csv/QuoteMode.ordinal:()I\n-  #109 = Class              #548          // java/lang/Number\n-  #110 = String             #549          // Unexpected Quote value:\n-  #111 = Methodref          #52.#550      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-  #112 = Fieldref           #494.#551     // org/apache/commons/csv/QuoteMode.NONE:Lorg/apache/commons/csv/QuoteMode;\n-  #113 = String             #552          // Delimiter=<\n-  #114 = String             #553          // Escape=<\n-  #115 = String             #554          // QuoteChar=<\n-  #116 = Methodref          #4.#555       // org/apache/commons/csv/CSVFormat.isCommentMarkerSet:()Z\n-  #117 = String             #556          // CommentStart=<\n-  #118 = Methodref          #4.#557       // org/apache/commons/csv/CSVFormat.isNullStringSet:()Z\n-  #119 = String             #558          // NullString=<\n-  #120 = String             #559          // RecordSeparator=<\n-  #121 = Methodref          #4.#560       // org/apache/commons/csv/CSVFormat.getIgnoreEmptyLines:()Z\n-  #122 = String             #561          //  EmptyLines:ignored\n-  #123 = Methodref          #4.#562       // org/apache/commons/csv/CSVFormat.getIgnoreSurroundingSpaces:()Z\n-  #124 = String             #563          //  SurroundingSpaces:ignored\n-  #125 = Methodref          #4.#564       // org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z\n-  #126 = String             #565          //  IgnoreHeaderCase:ignored\n-  #127 = String             #566          //  SkipHeaderRecord:\n-  #128 = Methodref          #29.#567      // java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;\n-  #129 = String             #568          // HeaderComments:\n-  #130 = Methodref          #479.#569     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n-  #131 = String             #570          // Header:\n-  #132 = Class              #571          // java/lang/String\n-  #133 = InterfaceMethodref #68.#572      // java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;\n-  #134 = Class              #573          // java/lang/IllegalArgumentException\n-  #135 = String             #574          // The delimiter cannot be a line break\n-  #136 = Methodref          #134.#550     // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-  #137 = String             #575          // The quoteChar character and the delimiter cannot be the same (\\'\n-  #138 = String             #576          // \\')\n-  #139 = String             #577          // The escape character and the delimiter cannot be the same (\\'\n-  #140 = String             #578          // The comment start character and the delimiter cannot be the same (\\'\n-  #141 = String             #579          // The comment start character and the quoteChar cannot be the same (\\'\n-  #142 = String             #580          // The comment start and the escape character cannot be the same (\\'\n-  #143 = String             #581          // No quotes mode set but no escape character is set\n-  #144 = Class              #582          // java/util/HashSet\n-  #145 = Methodref          #144.#449     // java/util/HashSet.\"<init>\":()V\n-  #146 = InterfaceMethodref #583.#584     // java/util/Set.add:(Ljava/lang/Object;)Z\n-  #147 = String             #585          // The header contains a duplicate entry: \\'\n-  #148 = String             #586          // \\' in\n-  #149 = Methodref          #4.#587       // org/apache/commons/csv/CSVFormat.withAllowDuplicateHeaderNames:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #150 = Methodref          #4.#588       // org/apache/commons/csv/CSVFormat.withAllowMissingColumnNames:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #151 = Methodref          #442.#589     // java/lang/Character.valueOf:(C)Ljava/lang/Character;\n-  #152 = Methodref          #4.#590       // org/apache/commons/csv/CSVFormat.withCommentMarker:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n-  #153 = Methodref          #4.#591       // org/apache/commons/csv/CSVFormat.isLineBreak:(Ljava/lang/Character;)Z\n-  #154 = String             #592          // The comment start marker character cannot be a line break\n-  #155 = Methodref          #4.#593       // org/apache/commons/csv/CSVFormat.withEscape:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n-  #156 = String             #594          // The escape character cannot be a line break\n-  #157 = Methodref          #4.#595       // org/apache/commons/csv/CSVFormat.withHeader:([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n-  #158 = Methodref          #4.#596       // org/apache/commons/csv/CSVFormat.withSkipHeaderRecord:()Lorg/apache/commons/csv/CSVFormat;\n-  #159 = Methodref          #597.#598     // java/lang/Class.getEnumConstants:()[Ljava/lang/Object;\n-  #160 = Class              #405          // \"[Ljava/lang/Enum;\"\n-  #161 = Methodref          #599.#600     // java/lang/Enum.name:()Ljava/lang/String;\n-  #162 = InterfaceMethodref #601.#602     // java/sql/ResultSet.getMetaData:()Ljava/sql/ResultSetMetaData;\n-  #163 = Methodref          #4.#603       // org/apache/commons/csv/CSVFormat.withHeader:(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;\n-  #164 = InterfaceMethodref #604.#605     // java/sql/ResultSetMetaData.getColumnCount:()I\n-  #165 = InterfaceMethodref #604.#606     // java/sql/ResultSetMetaData.getColumnLabel:(I)Ljava/lang/String;\n-  #166 = Methodref          #4.#607       // org/apache/commons/csv/CSVFormat.withIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #167 = Methodref          #4.#608       // org/apache/commons/csv/CSVFormat.withIgnoreHeaderCase:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #168 = Methodref          #4.#609       // org/apache/commons/csv/CSVFormat.withIgnoreSurroundingSpaces:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #169 = Methodref          #4.#610       // org/apache/commons/csv/CSVFormat.withQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n-  #170 = String             #611          // The quoteChar cannot be a line break\n-  #171 = Methodref          #132.#612     // java/lang/String.valueOf:(C)Ljava/lang/String;\n-  #172 = Methodref          #4.#613       // org/apache/commons/csv/CSVFormat.withRecordSeparator:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n-  #173 = Methodref          #4.#614       // org/apache/commons/csv/CSVFormat.withSkipHeaderRecord:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #174 = String             #615          // line.separator\n-  #175 = Methodref          #530.#616     // java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;\n-  #176 = Methodref          #4.#617       // org/apache/commons/csv/CSVFormat.withTrailingDelimiter:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #177 = Methodref          #4.#618       // org/apache/commons/csv/CSVFormat.withTrim:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #178 = Fieldref           #1.#619       // org/apache/commons/csv/Constants.DOUBLE_QUOTE_CHAR:Ljava/lang/Character;\n-  #179 = String             #620          // \\r\\n\n-  #180 = Fieldref           #4.#621       // org/apache/commons/csv/CSVFormat.DEFAULT:Lorg/apache/commons/csv/CSVFormat;\n-  #181 = Methodref          #4.#622       // org/apache/commons/csv/CSVFormat.withAllowMissingColumnNames:()Lorg/apache/commons/csv/CSVFormat;\n-  #182 = Fieldref           #4.#623       // org/apache/commons/csv/CSVFormat.EXCEL:Lorg/apache/commons/csv/CSVFormat;\n-  #183 = Methodref          #4.#624       // org/apache/commons/csv/CSVFormat.withDelimiter:(C)Lorg/apache/commons/csv/CSVFormat;\n-  #184 = Methodref          #4.#625       // org/apache/commons/csv/CSVFormat.withEscape:(C)Lorg/apache/commons/csv/CSVFormat;\n-  #185 = Methodref          #4.#626       // org/apache/commons/csv/CSVFormat.withRecordSeparator:(C)Lorg/apache/commons/csv/CSVFormat;\n-  #186 = Fieldref           #4.#627       // org/apache/commons/csv/CSVFormat.INFORMIX_UNLOAD:Lorg/apache/commons/csv/CSVFormat;\n-  #187 = Fieldref           #4.#628       // org/apache/commons/csv/CSVFormat.INFORMIX_UNLOAD_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #188 = Methodref          #4.#629       // org/apache/commons/csv/CSVFormat.withQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;\n-  #189 = Fieldref           #4.#630       // org/apache/commons/csv/CSVFormat.MONGODB_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #190 = Fieldref           #4.#631       // org/apache/commons/csv/CSVFormat.MONGODB_TSV:Lorg/apache/commons/csv/CSVFormat;\n-  #191 = String             #632          // \\\\N\n-  #192 = Methodref          #4.#633       // org/apache/commons/csv/CSVFormat.withNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n-  #193 = Fieldref           #494.#634     // org/apache/commons/csv/QuoteMode.ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n-  #194 = Fieldref           #4.#635       // org/apache/commons/csv/CSVFormat.MYSQL:Lorg/apache/commons/csv/CSVFormat;\n-  #195 = Methodref          #4.#636       // org/apache/commons/csv/CSVFormat.withTrim:()Lorg/apache/commons/csv/CSVFormat;\n-  #196 = Methodref          #4.#637       // org/apache/commons/csv/CSVFormat.withSystemRecordSeparator:()Lorg/apache/commons/csv/CSVFormat;\n-  #197 = Fieldref           #4.#638       // org/apache/commons/csv/CSVFormat.ORACLE:Lorg/apache/commons/csv/CSVFormat;\n-  #198 = Fieldref           #4.#639       // org/apache/commons/csv/CSVFormat.POSTGRESQL_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #199 = Fieldref           #4.#640       // org/apache/commons/csv/CSVFormat.POSTGRESQL_TEXT:Lorg/apache/commons/csv/CSVFormat;\n-  #200 = Fieldref           #4.#641       // org/apache/commons/csv/CSVFormat.RFC4180:Lorg/apache/commons/csv/CSVFormat;\n-  #201 = Methodref          #4.#642       // org/apache/commons/csv/CSVFormat.withIgnoreSurroundingSpaces:()Lorg/apache/commons/csv/CSVFormat;\n-  #202 = Fieldref           #4.#643       // org/apache/commons/csv/CSVFormat.TDF:Lorg/apache/commons/csv/CSVFormat;\n-  #203 = Class              #644          // java/lang/Object\n-  #204 = Class              #645          // java/io/Serializable\n-  #205 = Class              #646          // org/apache/commons/csv/CSVFormat$1\n+   #23 = Fieldref           #4.#453       // org/apache/commons/csv/CSVFormat.header:[Ljava/lang/String;\n+   #24 = Fieldref           #4.#454       // org/apache/commons/csv/CSVFormat.skipHeaderRecord:Z\n+   #25 = Fieldref           #4.#455       // org/apache/commons/csv/CSVFormat.ignoreHeaderCase:Z\n+   #26 = Fieldref           #4.#456       // org/apache/commons/csv/CSVFormat.trailingDelimiter:Z\n+   #27 = Fieldref           #4.#457       // org/apache/commons/csv/CSVFormat.trim:Z\n+   #28 = Fieldref           #4.#458       // org/apache/commons/csv/CSVFormat.autoFlush:Z\n+   #29 = Class              #459          // java/lang/StringBuilder\n+   #30 = Methodref          #29.#438      // java/lang/StringBuilder.\"<init>\":()V\n+   #31 = Methodref          #29.#460      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #32 = Methodref          #29.#461      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #33 = Methodref          #29.#462      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #34 = Fieldref           #4.#463       // org/apache/commons/csv/CSVFormat.quotedNullString:Ljava/lang/String;\n+   #35 = Fieldref           #4.#464       // org/apache/commons/csv/CSVFormat.allowDuplicateHeaderNames:Z\n+   #36 = Methodref          #4.#465       // org/apache/commons/csv/CSVFormat.validate:()V\n+   #37 = Methodref          #203.#466     // java/lang/Object.getClass:()Ljava/lang/Class;\n+   #38 = Methodref          #272.#467     // java/lang/Character.equals:(Ljava/lang/Object;)Z\n+   #39 = Methodref          #132.#467     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #40 = Methodref          #468.#469     // java/util/Arrays.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z\n+   #41 = Class              #470          // java/io/StringWriter\n+   #42 = Methodref          #41.#438      // java/io/StringWriter.\"<init>\":()V\n+   #43 = Class              #471          // org/apache/commons/csv/CSVPrinter\n+   #44 = Methodref          #43.#472      // org/apache/commons/csv/CSVPrinter.\"<init>\":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n+   #45 = Methodref          #43.#473      // org/apache/commons/csv/CSVPrinter.printRecord:([Ljava/lang/Object;)V\n+   #46 = Methodref          #41.#462      // java/io/StringWriter.toString:()Ljava/lang/String;\n+   #47 = Methodref          #132.#474     // java/lang/String.trim:()Ljava/lang/String;\n+   #48 = Methodref          #43.#475      // org/apache/commons/csv/CSVPrinter.close:()V\n+   #49 = Class              #476          // java/lang/Throwable\n+   #50 = Methodref          #49.#477      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+   #51 = Class              #478          // java/io/IOException\n+   #52 = Class              #479          // java/lang/IllegalStateException\n+   #53 = Methodref          #52.#480      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n+   #54 = Methodref          #481.#452     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n+   #55 = Methodref          #482.#452     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n+   #56 = Methodref          #273.#483     // org/apache/commons/csv/QuoteMode.hashCode:()I\n+   #57 = Methodref          #272.#483     // java/lang/Character.hashCode:()I\n+   #58 = Methodref          #132.#483     // java/lang/String.hashCode:()I\n+   #59 = Methodref          #468.#484     // java/util/Arrays.hashCode:([Ljava/lang/Object;)I\n+   #60 = Class              #485          // org/apache/commons/csv/CSVParser\n+   #61 = Methodref          #60.#486      // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+   #62 = Class              #487          // java/io/OutputStreamWriter\n+   #63 = Class              #488          // java/io/FileOutputStream\n+   #64 = Methodref          #63.#489      // java/io/FileOutputStream.\"<init>\":(Ljava/io/File;)V\n+   #65 = Methodref          #62.#490      // java/io/OutputStreamWriter.\"<init>\":(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n+   #66 = String             #491          //\n+   #67 = Fieldref           #273.#492     // org/apache/commons/csv/QuoteMode.ALL:Lorg/apache/commons/csv/QuoteMode;\n+   #68 = Class              #493          // java/lang/CharSequence\n+   #69 = Class              #494          // java/io/Reader\n+   #70 = Methodref          #4.#495       // org/apache/commons/csv/CSVFormat.print:(Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n+   #71 = Methodref          #203.#462     // java/lang/Object.toString:()Ljava/lang/String;\n+   #72 = Methodref          #4.#496       // org/apache/commons/csv/CSVFormat.getTrim:()Z\n+   #73 = Methodref          #4.#497       // org/apache/commons/csv/CSVFormat.trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n+   #74 = Methodref          #4.#498       // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n+   #75 = InterfaceMethodref #68.#499      // java/lang/CharSequence.length:()I\n+   #76 = Methodref          #4.#500       // org/apache/commons/csv/CSVFormat.getDelimiter:()C\n+   #77 = InterfaceMethodref #353.#501     // java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n+   #78 = InterfaceMethodref #353.#502     // java/lang/Appendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n+   #79 = Methodref          #4.#503       // org/apache/commons/csv/CSVFormat.isQuoteCharacterSet:()Z\n+   #80 = Methodref          #4.#504       // org/apache/commons/csv/CSVFormat.printWithQuotes:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n+   #81 = Methodref          #4.#505       // org/apache/commons/csv/CSVFormat.isEscapeCharacterSet:()Z\n+   #82 = Methodref          #4.#506       // org/apache/commons/csv/CSVFormat.printWithEscapes:(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n+   #83 = InterfaceMethodref #353.#507     // java/lang/Appendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n+   #84 = Class              #508          // java/nio/file/OpenOption\n+   #85 = Methodref          #509.#510     // java/nio/file/Files.newBufferedWriter:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n+   #86 = Methodref          #4.#511       // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n+   #87 = Methodref          #4.#512       // org/apache/commons/csv/CSVFormat.printWithQuotes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n+   #88 = Methodref          #4.#513       // org/apache/commons/csv/CSVFormat.printWithEscapes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n+   #89 = Class              #514          // java/io/Writer\n+   #90 = Methodref          #98.#515      // org/apache/commons/csv/IOUtils.copyLarge:(Ljava/io/Reader;Ljava/io/Writer;)J\n+   #91 = Methodref          #98.#516      // org/apache/commons/csv/IOUtils.copy:(Ljava/io/Reader;Ljava/lang/Appendable;)J\n+   #92 = Fieldref           #517.#518     // java/lang/System.out:Ljava/io/PrintStream;\n+   #93 = Methodref          #4.#519       // org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z\n+   #94 = Methodref          #4.#520       // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n+   #95 = Methodref          #4.#521       // org/apache/commons/csv/CSVFormat.println:(Ljava/lang/Appendable;)V\n+   #96 = Methodref          #4.#522       // org/apache/commons/csv/CSVFormat.getEscapeCharacter:()Ljava/lang/Character;\n+   #97 = InterfaceMethodref #68.#523      // java/lang/CharSequence.charAt:(I)C\n+   #98 = Class              #524          // org/apache/commons/csv/IOUtils\n+   #99 = Methodref          #29.#525      // java/lang/StringBuilder.\"<init>\":(I)V\n+  #100 = Methodref          #69.#526      // java/io/Reader.read:()I\n+  #101 = Methodref          #29.#527      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+  #102 = Methodref          #29.#528      // java/lang/StringBuilder.substring:(II)Ljava/lang/String;\n+  #103 = Methodref          #29.#529      // java/lang/StringBuilder.setLength:(I)V\n+  #104 = Methodref          #4.#530       // org/apache/commons/csv/CSVFormat.getQuoteCharacter:()Ljava/lang/Character;\n+  #105 = Methodref          #4.#531       // org/apache/commons/csv/CSVFormat.getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n+  #106 = Fieldref           #273.#532     // org/apache/commons/csv/QuoteMode.MINIMAL:Lorg/apache/commons/csv/QuoteMode;\n+  #107 = Fieldref           #205.#533     // org/apache/commons/csv/CSVFormat$1.$SwitchMap$org$apache$commons$csv$QuoteMode:[I\n+  #108 = Methodref          #273.#534     // org/apache/commons/csv/QuoteMode.ordinal:()I\n+  #109 = Class              #535          // java/lang/Number\n+  #110 = String             #536          // Unexpected Quote value:\n+  #111 = Methodref          #52.#537      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+  #112 = Fieldref           #273.#538     // org/apache/commons/csv/QuoteMode.NONE:Lorg/apache/commons/csv/QuoteMode;\n+  #113 = String             #539          // Delimiter=<\n+  #114 = String             #540          // Escape=<\n+  #115 = String             #541          // QuoteChar=<\n+  #116 = Methodref          #4.#542       // org/apache/commons/csv/CSVFormat.isCommentMarkerSet:()Z\n+  #117 = String             #543          // CommentStart=<\n+  #118 = Methodref          #4.#544       // org/apache/commons/csv/CSVFormat.isNullStringSet:()Z\n+  #119 = String             #545          // NullString=<\n+  #120 = String             #546          // RecordSeparator=<\n+  #121 = Methodref          #4.#547       // org/apache/commons/csv/CSVFormat.getIgnoreEmptyLines:()Z\n+  #122 = String             #548          //  EmptyLines:ignored\n+  #123 = Methodref          #4.#549       // org/apache/commons/csv/CSVFormat.getIgnoreSurroundingSpaces:()Z\n+  #124 = String             #550          //  SurroundingSpaces:ignored\n+  #125 = Methodref          #4.#551       // org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z\n+  #126 = String             #552          //  IgnoreHeaderCase:ignored\n+  #127 = String             #553          //  SkipHeaderRecord:\n+  #128 = Methodref          #29.#554      // java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;\n+  #129 = String             #555          // HeaderComments:\n+  #130 = Methodref          #468.#556     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n+  #131 = String             #557          // Header:\n+  #132 = Class              #558          // java/lang/String\n+  #133 = InterfaceMethodref #68.#559      // java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;\n+  #134 = Class              #560          // java/lang/IllegalArgumentException\n+  #135 = String             #561          // The delimiter cannot be a line break\n+  #136 = Methodref          #134.#537     // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+  #137 = String             #562          // The quoteChar character and the delimiter cannot be the same (\\'\n+  #138 = String             #563          // \\')\n+  #139 = String             #564          // The escape character and the delimiter cannot be the same (\\'\n+  #140 = String             #565          // The comment start character and the delimiter cannot be the same (\\'\n+  #141 = String             #566          // The comment start character and the quoteChar cannot be the same (\\'\n+  #142 = String             #567          // The comment start and the escape character cannot be the same (\\'\n+  #143 = String             #568          // No quotes mode set but no escape character is set\n+  #144 = Class              #569          // java/util/HashSet\n+  #145 = Methodref          #144.#438     // java/util/HashSet.\"<init>\":()V\n+  #146 = InterfaceMethodref #381.#570     // java/util/Set.add:(Ljava/lang/Object;)Z\n+  #147 = String             #571          // The header contains a duplicate entry: \\'\n+  #148 = String             #572          // \\' in\n+  #149 = Methodref          #4.#573       // org/apache/commons/csv/CSVFormat.withAllowDuplicateHeaderNames:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #150 = Methodref          #4.#574       // org/apache/commons/csv/CSVFormat.withAllowMissingColumnNames:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #151 = Methodref          #272.#575     // java/lang/Character.valueOf:(C)Ljava/lang/Character;\n+  #152 = Methodref          #4.#576       // org/apache/commons/csv/CSVFormat.withCommentMarker:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n+  #153 = Methodref          #4.#577       // org/apache/commons/csv/CSVFormat.isLineBreak:(Ljava/lang/Character;)Z\n+  #154 = String             #578          // The comment start marker character cannot be a line break\n+  #155 = Methodref          #4.#579       // org/apache/commons/csv/CSVFormat.withEscape:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n+  #156 = String             #580          // The escape character cannot be a line break\n+  #157 = Methodref          #4.#581       // org/apache/commons/csv/CSVFormat.withHeader:([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n+  #158 = Methodref          #4.#582       // org/apache/commons/csv/CSVFormat.withSkipHeaderRecord:()Lorg/apache/commons/csv/CSVFormat;\n+  #159 = Methodref          #583.#584     // java/lang/Class.getEnumConstants:()[Ljava/lang/Object;\n+  #160 = Class              #395          // \"[Ljava/lang/Enum;\"\n+  #161 = Methodref          #585.#586     // java/lang/Enum.name:()Ljava/lang/String;\n+  #162 = InterfaceMethodref #405.#587     // java/sql/ResultSet.getMetaData:()Ljava/sql/ResultSetMetaData;\n+  #163 = Methodref          #4.#588       // org/apache/commons/csv/CSVFormat.withHeader:(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;\n+  #164 = InterfaceMethodref #406.#589     // java/sql/ResultSetMetaData.getColumnCount:()I\n+  #165 = InterfaceMethodref #406.#590     // java/sql/ResultSetMetaData.getColumnLabel:(I)Ljava/lang/String;\n+  #166 = Methodref          #4.#591       // org/apache/commons/csv/CSVFormat.withIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #167 = Methodref          #4.#592       // org/apache/commons/csv/CSVFormat.withIgnoreHeaderCase:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #168 = Methodref          #4.#593       // org/apache/commons/csv/CSVFormat.withIgnoreSurroundingSpaces:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #169 = Methodref          #4.#594       // org/apache/commons/csv/CSVFormat.withQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n+  #170 = String             #595          // The quoteChar cannot be a line break\n+  #171 = Methodref          #132.#596     // java/lang/String.valueOf:(C)Ljava/lang/String;\n+  #172 = Methodref          #4.#597       // org/apache/commons/csv/CSVFormat.withRecordSeparator:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n+  #173 = Methodref          #4.#598       // org/apache/commons/csv/CSVFormat.withSkipHeaderRecord:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #174 = String             #599          // line.separator\n+  #175 = Methodref          #517.#600     // java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;\n+  #176 = Methodref          #4.#601       // org/apache/commons/csv/CSVFormat.withTrailingDelimiter:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #177 = Methodref          #4.#602       // org/apache/commons/csv/CSVFormat.withTrim:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #178 = Fieldref           #1.#603       // org/apache/commons/csv/Constants.DOUBLE_QUOTE_CHAR:Ljava/lang/Character;\n+  #179 = String             #604          // \\r\\n\n+  #180 = Fieldref           #4.#605       // org/apache/commons/csv/CSVFormat.DEFAULT:Lorg/apache/commons/csv/CSVFormat;\n+  #181 = Methodref          #4.#606       // org/apache/commons/csv/CSVFormat.withAllowMissingColumnNames:()Lorg/apache/commons/csv/CSVFormat;\n+  #182 = Fieldref           #4.#607       // org/apache/commons/csv/CSVFormat.EXCEL:Lorg/apache/commons/csv/CSVFormat;\n+  #183 = Methodref          #4.#608       // org/apache/commons/csv/CSVFormat.withDelimiter:(C)Lorg/apache/commons/csv/CSVFormat;\n+  #184 = Methodref          #4.#609       // org/apache/commons/csv/CSVFormat.withEscape:(C)Lorg/apache/commons/csv/CSVFormat;\n+  #185 = Methodref          #4.#610       // org/apache/commons/csv/CSVFormat.withRecordSeparator:(C)Lorg/apache/commons/csv/CSVFormat;\n+  #186 = Fieldref           #4.#611       // org/apache/commons/csv/CSVFormat.INFORMIX_UNLOAD:Lorg/apache/commons/csv/CSVFormat;\n+  #187 = Fieldref           #4.#612       // org/apache/commons/csv/CSVFormat.INFORMIX_UNLOAD_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #188 = Methodref          #4.#613       // org/apache/commons/csv/CSVFormat.withQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;\n+  #189 = Fieldref           #4.#614       // org/apache/commons/csv/CSVFormat.MONGODB_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #190 = Fieldref           #4.#615       // org/apache/commons/csv/CSVFormat.MONGODB_TSV:Lorg/apache/commons/csv/CSVFormat;\n+  #191 = String             #616          // \\\\N\n+  #192 = Methodref          #4.#617       // org/apache/commons/csv/CSVFormat.withNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n+  #193 = Fieldref           #273.#618     // org/apache/commons/csv/QuoteMode.ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n+  #194 = Fieldref           #4.#619       // org/apache/commons/csv/CSVFormat.MYSQL:Lorg/apache/commons/csv/CSVFormat;\n+  #195 = Methodref          #4.#620       // org/apache/commons/csv/CSVFormat.withTrim:()Lorg/apache/commons/csv/CSVFormat;\n+  #196 = Methodref          #4.#621       // org/apache/commons/csv/CSVFormat.withSystemRecordSeparator:()Lorg/apache/commons/csv/CSVFormat;\n+  #197 = Fieldref           #4.#622       // org/apache/commons/csv/CSVFormat.ORACLE:Lorg/apache/commons/csv/CSVFormat;\n+  #198 = Fieldref           #4.#623       // org/apache/commons/csv/CSVFormat.POSTGRESQL_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #199 = Fieldref           #4.#624       // org/apache/commons/csv/CSVFormat.POSTGRESQL_TEXT:Lorg/apache/commons/csv/CSVFormat;\n+  #200 = Fieldref           #4.#625       // org/apache/commons/csv/CSVFormat.RFC4180:Lorg/apache/commons/csv/CSVFormat;\n+  #201 = Methodref          #4.#626       // org/apache/commons/csv/CSVFormat.withIgnoreSurroundingSpaces:()Lorg/apache/commons/csv/CSVFormat;\n+  #202 = Fieldref           #4.#627       // org/apache/commons/csv/CSVFormat.TDF:Lorg/apache/commons/csv/CSVFormat;\n+  #203 = Class              #628          // java/lang/Object\n+  #204 = Class              #629          // java/io/Serializable\n+  #205 = Class              #630          // org/apache/commons/csv/CSVFormat$1\n   #206 = Utf8               InnerClasses\n-  #207 = Class              #647          // org/apache/commons/csv/CSVFormat$Predefined\n+  #207 = Class              #631          // org/apache/commons/csv/CSVFormat$Predefined\n   #208 = Utf8               Predefined\n   #209 = Utf8               DEFAULT\n   #210 = Utf8               Lorg/apache/commons/csv/CSVFormat;\n   #211 = Utf8               EXCEL\n   #212 = Utf8               INFORMIX_UNLOAD\n   #213 = Utf8               INFORMIX_UNLOAD_CSV\n   #214 = Utf8               MONGODB_CSV\n@@ -274,466 +274,450 @@\n   #265 = Utf8               <init>\n   #266 = Utf8               (CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZZ)V\n   #267 = Utf8               this\n   #268 = Utf8               quoteChar\n   #269 = Utf8               commentStart\n   #270 = Utf8               escape\n   #271 = Utf8               [Ljava/lang/Object;\n-  #272 = Class              #445          // org/apache/commons/csv/CSVFormat\n-  #273 = Class              #648          // java/lang/Character\n-  #274 = Class              #649          // org/apache/commons/csv/QuoteMode\n-  #275 = Class              #571          // java/lang/String\n-  #276 = Class              #271          // \"[Ljava/lang/Object;\"\n-  #277 = Utf8               equals\n-  #278 = Utf8               (Ljava/lang/Object;)Z\n-  #279 = Utf8               obj\n-  #280 = Utf8               Ljava/lang/Object;\n-  #281 = Utf8               other\n-  #282 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n-  #283 = Utf8               csvPrinter\n-  #284 = Utf8               Lorg/apache/commons/csv/CSVPrinter;\n-  #285 = Utf8               e\n-  #286 = Utf8               Ljava/io/IOException;\n-  #287 = Utf8               values\n-  #288 = Utf8               out\n-  #289 = Utf8               Ljava/io/StringWriter;\n-  #290 = Class              #481          // java/io/StringWriter\n-  #291 = Class              #482          // org/apache/commons/csv/CSVPrinter\n-  #292 = Class              #487          // java/lang/Throwable\n-  #293 = Class              #489          // java/io/IOException\n-  #294 = Utf8               getAllowDuplicateHeaderNames\n-  #295 = Utf8               ()Z\n-  #296 = Utf8               getAllowMissingColumnNames\n-  #297 = Utf8               getAutoFlush\n-  #298 = Utf8               getCommentMarker\n-  #299 = Utf8               ()Ljava/lang/Character;\n-  #300 = Utf8               getDelimiter\n-  #301 = Utf8               ()C\n-  #302 = Utf8               getEscapeCharacter\n-  #303 = Utf8               getHeader\n-  #304 = Utf8               ()[Ljava/lang/String;\n-  #305 = Utf8               getHeaderComments\n-  #306 = Utf8               getIgnoreEmptyLines\n-  #307 = Utf8               getIgnoreHeaderCase\n-  #308 = Utf8               getIgnoreSurroundingSpaces\n-  #309 = Utf8               getNullString\n-  #310 = Utf8               ()Ljava/lang/String;\n-  #311 = Utf8               getQuoteCharacter\n-  #312 = Utf8               getQuoteMode\n-  #313 = Utf8               ()Lorg/apache/commons/csv/QuoteMode;\n-  #314 = Utf8               getRecordSeparator\n-  #315 = Utf8               getSkipHeaderRecord\n-  #316 = Utf8               getTrailingDelimiter\n-  #317 = Utf8               getTrim\n-  #318 = Utf8               hashCode\n-  #319 = Utf8               ()I\n-  #320 = Utf8               prime\n-  #321 = Utf8               I\n-  #322 = Utf8               result\n-  #323 = Utf8               isCommentMarkerSet\n-  #324 = Utf8               isEscapeCharacterSet\n-  #325 = Utf8               isNullStringSet\n-  #326 = Utf8               isQuoteCharacterSet\n-  #327 = Utf8               parse\n-  #328 = Utf8               (Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;\n-  #329 = Utf8               in\n-  #330 = Utf8               Ljava/io/Reader;\n-  #331 = Utf8               Exceptions\n-  #332 = Utf8               print\n-  #333 = Utf8               (Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n-  #334 = Utf8               Ljava/lang/Appendable;\n-  #335 = Utf8               (Ljava/io/File;Ljava/nio/charset/Charset;)Lorg/apache/commons/csv/CSVPrinter;\n-  #336 = Utf8               Ljava/io/File;\n-  #337 = Utf8               charset\n-  #338 = Utf8               Ljava/nio/charset/Charset;\n-  #339 = Utf8               (Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n-  #340 = Utf8               charSequence\n-  #341 = Utf8               Ljava/lang/CharSequence;\n-  #342 = Utf8               value\n-  #343 = Utf8               newRecord\n-  #344 = Class              #505          // java/lang/CharSequence\n-  #345 = Utf8               (Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n-  #346 = Utf8               object\n-  #347 = Utf8               offset\n-  #348 = Utf8               len\n-  #349 = Utf8               (Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Lorg/apache/commons/csv/CSVPrinter;\n-  #350 = Utf8               Ljava/nio/file/Path;\n-  #351 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n-  #352 = Utf8               reader\n-  #353 = Utf8               printer\n-  #354 = Utf8               ()Lorg/apache/commons/csv/CSVPrinter;\n-  #355 = Utf8               println\n-  #356 = Utf8               (Ljava/lang/Appendable;)V\n-  #357 = Utf8               printRecord\n-  #358 = Utf8               (Ljava/lang/Appendable;[Ljava/lang/Object;)V\n-  #359 = Utf8               i\n-  #360 = Class              #650          // java/lang/Appendable\n-  #361 = Class              #644          // java/lang/Object\n-  #362 = Utf8               printWithEscapes\n-  #363 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n-  #364 = Utf8               start\n-  #365 = Utf8               pos\n-  #366 = Utf8               end\n-  #367 = Utf8               delim\n-  #368 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;)V\n-  #369 = Utf8               builder\n-  #370 = Utf8               Ljava/lang/StringBuilder;\n-  #371 = Class              #506          // java/io/Reader\n-  #372 = Class              #470          // java/lang/StringBuilder\n-  #373 = Utf8               printWithQuotes\n-  #374 = Utf8               quote\n-  #375 = Utf8               delimChar\n-  #376 = Utf8               quoteModePolicy\n-  #377 = Utf8               toString\n-  #378 = Utf8               sb\n-  #379 = Utf8               toStringArray\n-  #380 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/String;\n-  #381 = Utf8               strings\n-  #382 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n-  #383 = Utf8               count\n-  #384 = Utf8               validate\n-  #385 = Utf8               ()V\n-  #386 = Utf8               hdr\n-  #387 = Utf8               dupCheck\n-  #388 = Utf8               Ljava/util/Set;\n-  #389 = Utf8               LocalVariableTypeTable\n-  #390 = Utf8               Ljava/util/Set<Ljava/lang/String;>;\n-  #391 = Class              #651          // java/util/Set\n-  #392 = Utf8               withAllowDuplicateHeaderNames\n-  #393 = Utf8               ()Lorg/apache/commons/csv/CSVFormat;\n-  #394 = Utf8               (Z)Lorg/apache/commons/csv/CSVFormat;\n-  #395 = Utf8               withAllowMissingColumnNames\n-  #396 = Utf8               withAutoFlush\n-  #397 = Utf8               withCommentMarker\n-  #398 = Utf8               (Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n-  #399 = Utf8               withDelimiter\n-  #400 = Utf8               withEscape\n-  #401 = Utf8               withFirstRecordAsHeader\n-  #402 = Utf8               withHeader\n-  #403 = Utf8               (Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat;\n-  #404 = Utf8               enumValues\n-  #405 = Utf8               [Ljava/lang/Enum;\n-  #406 = Utf8               headerEnum\n-  #407 = Utf8               Ljava/lang/Class;\n-  #408 = Utf8               [Ljava/lang/Enum<*>;\n-  #409 = Utf8               Ljava/lang/Class<+Ljava/lang/Enum<*>;>;\n-  #410 = Utf8               Signature\n-  #411 = Utf8               (Ljava/lang/Class<+Ljava/lang/Enum<*>;>;)Lorg/apache/commons/csv/CSVFormat;\n-  #412 = Utf8               (Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat;\n-  #413 = Utf8               resultSet\n-  #414 = Utf8               Ljava/sql/ResultSet;\n-  #415 = Class              #652          // java/sql/ResultSet\n-  #416 = Class              #653          // java/sql/ResultSetMetaData\n-  #417 = Class              #654          // java/sql/SQLException\n-  #418 = Utf8               (Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;\n-  #419 = Utf8               columnCount\n-  #420 = Utf8               metaData\n-  #421 = Utf8               Ljava/sql/ResultSetMetaData;\n-  #422 = Utf8               labels\n-  #423 = Utf8               ([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n-  #424 = Utf8               withHeaderComments\n-  #425 = Utf8               ([Ljava/lang/Object;)Lorg/apache/commons/csv/CSVFormat;\n-  #426 = Utf8               withIgnoreEmptyLines\n-  #427 = Utf8               withIgnoreHeaderCase\n-  #428 = Utf8               withIgnoreSurroundingSpaces\n-  #429 = Utf8               withNullString\n-  #430 = Utf8               withQuote\n-  #431 = Utf8               withQuoteMode\n-  #432 = Utf8               (Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;\n-  #433 = Utf8               withRecordSeparator\n-  #434 = Utf8               withSkipHeaderRecord\n-  #435 = Utf8               withSystemRecordSeparator\n-  #436 = Utf8               withTrailingDelimiter\n-  #437 = Utf8               withTrim\n-  #438 = Utf8               <clinit>\n-  #439 = Utf8               SourceFile\n-  #440 = Utf8               CSVFormat.java\n-  #441 = Utf8               org/apache/commons/csv/Constants\n-  #442 = Class              #648          // java/lang/Character\n-  #443 = NameAndType        #655:#301     // charValue:()C\n-  #444 = NameAndType        #252:#253     // isLineBreak:(C)Z\n-  #445 = Utf8               org/apache/commons/csv/CSVFormat\n-  #446 = NameAndType        #265:#266     // \"<init>\":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZZ)V\n-  #447 = NameAndType        #262:#656     // valueOf:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n-  #448 = NameAndType        #657:#393     // getFormat:()Lorg/apache/commons/csv/CSVFormat;\n-  #449 = NameAndType        #265:#385     // \"<init>\":()V\n-  #450 = NameAndType        #233:#234     // delimiter:C\n-  #451 = NameAndType        #244:#232     // quoteCharacter:Ljava/lang/Character;\n-  #452 = NameAndType        #246:#247     // quoteMode:Lorg/apache/commons/csv/QuoteMode;\n-  #453 = NameAndType        #231:#232     // commentMarker:Ljava/lang/Character;\n-  #454 = NameAndType        #235:#232     // escapeCharacter:Ljava/lang/Character;\n-  #455 = NameAndType        #241:#228     // ignoreSurroundingSpaces:Z\n-  #456 = NameAndType        #229:#228     // allowMissingColumnNames:Z\n-  #457 = NameAndType        #239:#228     // ignoreEmptyLines:Z\n-  #458 = NameAndType        #248:#243     // recordSeparator:Ljava/lang/String;\n-  #459 = NameAndType        #242:#243     // nullString:Ljava/lang/String;\n-  #460 = NameAndType        #379:#380     // toStringArray:([Ljava/lang/Object;)[Ljava/lang/String;\n-  #461 = NameAndType        #238:#237     // headerComments:[Ljava/lang/String;\n-  #462 = Class              #237          // \"[Ljava/lang/String;\"\n-  #463 = NameAndType        #658:#659     // clone:()Ljava/lang/Object;\n-  #464 = NameAndType        #236:#237     // header:[Ljava/lang/String;\n-  #465 = NameAndType        #249:#228     // skipHeaderRecord:Z\n-  #466 = NameAndType        #240:#228     // ignoreHeaderCase:Z\n-  #467 = NameAndType        #250:#228     // trailingDelimiter:Z\n-  #468 = NameAndType        #251:#228     // trim:Z\n-  #469 = NameAndType        #230:#228     // autoFlush:Z\n-  #470 = Utf8               java/lang/StringBuilder\n-  #471 = NameAndType        #660:#661     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #472 = NameAndType        #660:#662     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #473 = NameAndType        #377:#310     // toString:()Ljava/lang/String;\n-  #474 = NameAndType        #245:#243     // quotedNullString:Ljava/lang/String;\n-  #475 = NameAndType        #227:#228     // allowDuplicateHeaderNames:Z\n-  #476 = NameAndType        #384:#385     // validate:()V\n-  #477 = NameAndType        #663:#664     // getClass:()Ljava/lang/Class;\n-  #478 = NameAndType        #277:#278     // equals:(Ljava/lang/Object;)Z\n-  #479 = Class              #665          // java/util/Arrays\n-  #480 = NameAndType        #277:#666     // equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z\n-  #481 = Utf8               java/io/StringWriter\n-  #482 = Utf8               org/apache/commons/csv/CSVPrinter\n-  #483 = NameAndType        #265:#667     // \"<init>\":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n-  #484 = NameAndType        #357:#668     // printRecord:([Ljava/lang/Object;)V\n-  #485 = NameAndType        #251:#310     // trim:()Ljava/lang/String;\n-  #486 = NameAndType        #669:#385     // close:()V\n-  #487 = Utf8               java/lang/Throwable\n-  #488 = NameAndType        #670:#671     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #489 = Utf8               java/io/IOException\n-  #490 = Utf8               java/lang/IllegalStateException\n-  #491 = NameAndType        #265:#671     // \"<init>\":(Ljava/lang/Throwable;)V\n-  #492 = Class              #237          // \"[Ljava/lang/String;\"\n-  #493 = Class              #237          // \"[Ljava/lang/String;\"\n-  #494 = Class              #649          // org/apache/commons/csv/QuoteMode\n-  #495 = NameAndType        #318:#319     // hashCode:()I\n-  #496 = NameAndType        #318:#672     // hashCode:([Ljava/lang/Object;)I\n-  #497 = Utf8               org/apache/commons/csv/CSVParser\n-  #498 = NameAndType        #265:#673     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-  #499 = Utf8               java/io/OutputStreamWriter\n-  #500 = Utf8               java/io/FileOutputStream\n-  #501 = NameAndType        #265:#674     // \"<init>\":(Ljava/io/File;)V\n-  #502 = NameAndType        #265:#675     // \"<init>\":(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n-  #503 = Utf8\n-  #504 = NameAndType        #676:#247     // ALL:Lorg/apache/commons/csv/QuoteMode;\n-  #505 = Utf8               java/lang/CharSequence\n-  #506 = Utf8               java/io/Reader\n-  #507 = NameAndType        #332:#351     // print:(Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n-  #508 = NameAndType        #317:#295     // getTrim:()Z\n-  #509 = NameAndType        #251:#382     // trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n-  #510 = NameAndType        #332:#345     // print:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n-  #511 = NameAndType        #677:#319     // length:()I\n-  #512 = NameAndType        #300:#301     // getDelimiter:()C\n-  #513 = Class              #650          // java/lang/Appendable\n-  #514 = NameAndType        #660:#678     // append:(C)Ljava/lang/Appendable;\n-  #515 = NameAndType        #660:#679     // append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n-  #516 = NameAndType        #326:#295     // isQuoteCharacterSet:()Z\n-  #517 = NameAndType        #373:#345     // printWithQuotes:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n-  #518 = NameAndType        #324:#295     // isEscapeCharacterSet:()Z\n-  #519 = NameAndType        #362:#363     // printWithEscapes:(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n-  #520 = NameAndType        #660:#680     // append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n-  #521 = Utf8               java/nio/file/OpenOption\n-  #522 = Class              #681          // java/nio/file/Files\n-  #523 = NameAndType        #682:#683     // newBufferedWriter:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n-  #524 = NameAndType        #332:#333     // print:(Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n-  #525 = NameAndType        #373:#368     // printWithQuotes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n-  #526 = NameAndType        #362:#368     // printWithEscapes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n-  #527 = Utf8               java/io/Writer\n-  #528 = NameAndType        #684:#685     // copyLarge:(Ljava/io/Reader;Ljava/io/Writer;)J\n-  #529 = NameAndType        #686:#687     // copy:(Ljava/io/Reader;Ljava/lang/Appendable;)J\n-  #530 = Class              #688          // java/lang/System\n-  #531 = NameAndType        #288:#689     // out:Ljava/io/PrintStream;\n-  #532 = NameAndType        #316:#295     // getTrailingDelimiter:()Z\n-  #533 = NameAndType        #332:#339     // print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n-  #534 = NameAndType        #355:#356     // println:(Ljava/lang/Appendable;)V\n-  #535 = NameAndType        #302:#299     // getEscapeCharacter:()Ljava/lang/Character;\n-  #536 = NameAndType        #690:#691     // charAt:(I)C\n-  #537 = Utf8               org/apache/commons/csv/IOUtils\n-  #538 = NameAndType        #265:#692     // \"<init>\":(I)V\n-  #539 = NameAndType        #693:#319     // read:()I\n-  #540 = NameAndType        #660:#694     // append:(C)Ljava/lang/StringBuilder;\n-  #541 = NameAndType        #695:#696     // substring:(II)Ljava/lang/String;\n-  #542 = NameAndType        #697:#692     // setLength:(I)V\n-  #543 = NameAndType        #311:#299     // getQuoteCharacter:()Ljava/lang/Character;\n-  #544 = NameAndType        #312:#313     // getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n-  #545 = NameAndType        #698:#247     // MINIMAL:Lorg/apache/commons/csv/QuoteMode;\n-  #546 = NameAndType        #699:#700     // $SwitchMap$org$apache$commons$csv$QuoteMode:[I\n-  #547 = NameAndType        #701:#319     // ordinal:()I\n-  #548 = Utf8               java/lang/Number\n-  #549 = Utf8               Unexpected Quote value:\n-  #550 = NameAndType        #265:#702     // \"<init>\":(Ljava/lang/String;)V\n-  #551 = NameAndType        #703:#247     // NONE:Lorg/apache/commons/csv/QuoteMode;\n-  #552 = Utf8               Delimiter=<\n-  #553 = Utf8               Escape=<\n-  #554 = Utf8               QuoteChar=<\n-  #555 = NameAndType        #323:#295     // isCommentMarkerSet:()Z\n-  #556 = Utf8               CommentStart=<\n-  #557 = NameAndType        #325:#295     // isNullStringSet:()Z\n-  #558 = Utf8               NullString=<\n-  #559 = Utf8               RecordSeparator=<\n-  #560 = NameAndType        #306:#295     // getIgnoreEmptyLines:()Z\n-  #561 = Utf8                EmptyLines:ignored\n-  #562 = NameAndType        #308:#295     // getIgnoreSurroundingSpaces:()Z\n-  #563 = Utf8                SurroundingSpaces:ignored\n-  #564 = NameAndType        #307:#295     // getIgnoreHeaderCase:()Z\n-  #565 = Utf8                IgnoreHeaderCase:ignored\n-  #566 = Utf8                SkipHeaderRecord:\n-  #567 = NameAndType        #660:#704     // append:(Z)Ljava/lang/StringBuilder;\n-  #568 = Utf8               HeaderComments:\n-  #569 = NameAndType        #377:#282     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n-  #570 = Utf8               Header:\n-  #571 = Utf8               java/lang/String\n-  #572 = NameAndType        #705:#706     // subSequence:(II)Ljava/lang/CharSequence;\n-  #573 = Utf8               java/lang/IllegalArgumentException\n-  #574 = Utf8               The delimiter cannot be a line break\n-  #575 = Utf8               The quoteChar character and the delimiter cannot be the same (\\'\n-  #576 = Utf8               \\')\n-  #577 = Utf8               The escape character and the delimiter cannot be the same (\\'\n-  #578 = Utf8               The comment start character and the delimiter cannot be the same (\\'\n-  #579 = Utf8               The comment start character and the quoteChar cannot be the same (\\'\n-  #580 = Utf8               The comment start and the escape character cannot be the same (\\'\n-  #581 = Utf8               No quotes mode set but no escape character is set\n-  #582 = Utf8               java/util/HashSet\n-  #583 = Class              #651          // java/util/Set\n-  #584 = NameAndType        #707:#278     // add:(Ljava/lang/Object;)Z\n-  #585 = Utf8               The header contains a duplicate entry: \\'\n-  #586 = Utf8               \\' in\n-  #587 = NameAndType        #392:#394     // withAllowDuplicateHeaderNames:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #588 = NameAndType        #395:#394     // withAllowMissingColumnNames:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #589 = NameAndType        #262:#708     // valueOf:(C)Ljava/lang/Character;\n-  #590 = NameAndType        #397:#398     // withCommentMarker:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n-  #591 = NameAndType        #252:#259     // isLineBreak:(Ljava/lang/Character;)Z\n-  #592 = Utf8               The comment start marker character cannot be a line break\n-  #593 = NameAndType        #400:#398     // withEscape:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n-  #594 = Utf8               The escape character cannot be a line break\n-  #595 = NameAndType        #402:#423     // withHeader:([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n-  #596 = NameAndType        #434:#393     // withSkipHeaderRecord:()Lorg/apache/commons/csv/CSVFormat;\n-  #597 = Class              #709          // java/lang/Class\n-  #598 = NameAndType        #710:#711     // getEnumConstants:()[Ljava/lang/Object;\n-  #599 = Class              #712          // java/lang/Enum\n-  #600 = NameAndType        #713:#310     // name:()Ljava/lang/String;\n-  #601 = Class              #652          // java/sql/ResultSet\n-  #602 = NameAndType        #714:#715     // getMetaData:()Ljava/sql/ResultSetMetaData;\n-  #603 = NameAndType        #402:#418     // withHeader:(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;\n-  #604 = Class              #653          // java/sql/ResultSetMetaData\n-  #605 = NameAndType        #716:#319     // getColumnCount:()I\n-  #606 = NameAndType        #717:#718     // getColumnLabel:(I)Ljava/lang/String;\n-  #607 = NameAndType        #426:#394     // withIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #608 = NameAndType        #427:#394     // withIgnoreHeaderCase:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #609 = NameAndType        #428:#394     // withIgnoreSurroundingSpaces:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #610 = NameAndType        #430:#398     // withQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n-  #611 = Utf8               The quoteChar cannot be a line break\n-  #612 = NameAndType        #262:#719     // valueOf:(C)Ljava/lang/String;\n-  #613 = NameAndType        #433:#263     // withRecordSeparator:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n-  #614 = NameAndType        #434:#394     // withSkipHeaderRecord:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #615 = Utf8               line.separator\n-  #616 = NameAndType        #720:#721     // getProperty:(Ljava/lang/String;)Ljava/lang/String;\n-  #617 = NameAndType        #436:#394     // withTrailingDelimiter:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #618 = NameAndType        #437:#394     // withTrim:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #619 = NameAndType        #722:#232     // DOUBLE_QUOTE_CHAR:Ljava/lang/Character;\n-  #620 = Utf8               \\r\\n\n-  #621 = NameAndType        #209:#210     // DEFAULT:Lorg/apache/commons/csv/CSVFormat;\n-  #622 = NameAndType        #395:#393     // withAllowMissingColumnNames:()Lorg/apache/commons/csv/CSVFormat;\n-  #623 = NameAndType        #211:#210     // EXCEL:Lorg/apache/commons/csv/CSVFormat;\n-  #624 = NameAndType        #399:#261     // withDelimiter:(C)Lorg/apache/commons/csv/CSVFormat;\n-  #625 = NameAndType        #400:#261     // withEscape:(C)Lorg/apache/commons/csv/CSVFormat;\n-  #626 = NameAndType        #433:#261     // withRecordSeparator:(C)Lorg/apache/commons/csv/CSVFormat;\n-  #627 = NameAndType        #212:#210     // INFORMIX_UNLOAD:Lorg/apache/commons/csv/CSVFormat;\n-  #628 = NameAndType        #213:#210     // INFORMIX_UNLOAD_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #629 = NameAndType        #431:#432     // withQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;\n-  #630 = NameAndType        #214:#210     // MONGODB_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #631 = NameAndType        #215:#210     // MONGODB_TSV:Lorg/apache/commons/csv/CSVFormat;\n-  #632 = Utf8               \\\\N\n-  #633 = NameAndType        #429:#263     // withNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n-  #634 = NameAndType        #723:#247     // ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n-  #635 = NameAndType        #216:#210     // MYSQL:Lorg/apache/commons/csv/CSVFormat;\n-  #636 = NameAndType        #437:#393     // withTrim:()Lorg/apache/commons/csv/CSVFormat;\n-  #637 = NameAndType        #435:#393     // withSystemRecordSeparator:()Lorg/apache/commons/csv/CSVFormat;\n-  #638 = NameAndType        #217:#210     // ORACLE:Lorg/apache/commons/csv/CSVFormat;\n-  #639 = NameAndType        #218:#210     // POSTGRESQL_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #640 = NameAndType        #219:#210     // POSTGRESQL_TEXT:Lorg/apache/commons/csv/CSVFormat;\n-  #641 = NameAndType        #220:#210     // RFC4180:Lorg/apache/commons/csv/CSVFormat;\n-  #642 = NameAndType        #428:#393     // withIgnoreSurroundingSpaces:()Lorg/apache/commons/csv/CSVFormat;\n-  #643 = NameAndType        #226:#210     // TDF:Lorg/apache/commons/csv/CSVFormat;\n-  #644 = Utf8               java/lang/Object\n-  #645 = Utf8               java/io/Serializable\n-  #646 = Utf8               org/apache/commons/csv/CSVFormat$1\n-  #647 = Utf8               org/apache/commons/csv/CSVFormat$Predefined\n-  #648 = Utf8               java/lang/Character\n-  #649 = Utf8               org/apache/commons/csv/QuoteMode\n-  #650 = Utf8               java/lang/Appendable\n-  #651 = Utf8               java/util/Set\n-  #652 = Utf8               java/sql/ResultSet\n-  #653 = Utf8               java/sql/ResultSetMetaData\n-  #654 = Utf8               java/sql/SQLException\n-  #655 = Utf8               charValue\n-  #656 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n-  #657 = Utf8               getFormat\n-  #658 = Utf8               clone\n-  #659 = Utf8               ()Ljava/lang/Object;\n-  #660 = Utf8               append\n-  #661 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #662 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #663 = Utf8               getClass\n-  #664 = Utf8               ()Ljava/lang/Class;\n-  #665 = Utf8               java/util/Arrays\n-  #666 = Utf8               ([Ljava/lang/Object;[Ljava/lang/Object;)Z\n-  #667 = Utf8               (Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n-  #668 = Utf8               ([Ljava/lang/Object;)V\n-  #669 = Utf8               close\n-  #670 = Utf8               addSuppressed\n-  #671 = Utf8               (Ljava/lang/Throwable;)V\n-  #672 = Utf8               ([Ljava/lang/Object;)I\n-  #673 = Utf8               (Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-  #674 = Utf8               (Ljava/io/File;)V\n-  #675 = Utf8               (Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n-  #676 = Utf8               ALL\n-  #677 = Utf8               length\n-  #678 = Utf8               (C)Ljava/lang/Appendable;\n-  #679 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n-  #680 = Utf8               (Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n-  #681 = Utf8               java/nio/file/Files\n-  #682 = Utf8               newBufferedWriter\n-  #683 = Utf8               (Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n-  #684 = Utf8               copyLarge\n-  #685 = Utf8               (Ljava/io/Reader;Ljava/io/Writer;)J\n-  #686 = Utf8               copy\n-  #687 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;)J\n-  #688 = Utf8               java/lang/System\n-  #689 = Utf8               Ljava/io/PrintStream;\n-  #690 = Utf8               charAt\n-  #691 = Utf8               (I)C\n-  #692 = Utf8               (I)V\n-  #693 = Utf8               read\n-  #694 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #695 = Utf8               substring\n-  #696 = Utf8               (II)Ljava/lang/String;\n-  #697 = Utf8               setLength\n-  #698 = Utf8               MINIMAL\n-  #699 = Utf8               $SwitchMap$org$apache$commons$csv$QuoteMode\n-  #700 = Utf8               [I\n-  #701 = Utf8               ordinal\n-  #702 = Utf8               (Ljava/lang/String;)V\n-  #703 = Utf8               NONE\n-  #704 = Utf8               (Z)Ljava/lang/StringBuilder;\n-  #705 = Utf8               subSequence\n-  #706 = Utf8               (II)Ljava/lang/CharSequence;\n-  #707 = Utf8               add\n-  #708 = Utf8               (C)Ljava/lang/Character;\n-  #709 = Utf8               java/lang/Class\n-  #710 = Utf8               getEnumConstants\n-  #711 = Utf8               ()[Ljava/lang/Object;\n-  #712 = Utf8               java/lang/Enum\n-  #713 = Utf8               name\n-  #714 = Utf8               getMetaData\n-  #715 = Utf8               ()Ljava/sql/ResultSetMetaData;\n-  #716 = Utf8               getColumnCount\n-  #717 = Utf8               getColumnLabel\n-  #718 = Utf8               (I)Ljava/lang/String;\n-  #719 = Utf8               (C)Ljava/lang/String;\n-  #720 = Utf8               getProperty\n-  #721 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #722 = Utf8               DOUBLE_QUOTE_CHAR\n-  #723 = Utf8               ALL_NON_NULL\n+  #272 = Class              #632          // java/lang/Character\n+  #273 = Class              #633          // org/apache/commons/csv/QuoteMode\n+  #274 = Class              #271          // \"[Ljava/lang/Object;\"\n+  #275 = Utf8               equals\n+  #276 = Utf8               (Ljava/lang/Object;)Z\n+  #277 = Utf8               obj\n+  #278 = Utf8               Ljava/lang/Object;\n+  #279 = Utf8               other\n+  #280 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n+  #281 = Utf8               csvPrinter\n+  #282 = Utf8               Lorg/apache/commons/csv/CSVPrinter;\n+  #283 = Utf8               e\n+  #284 = Utf8               Ljava/io/IOException;\n+  #285 = Utf8               values\n+  #286 = Utf8               out\n+  #287 = Utf8               Ljava/io/StringWriter;\n+  #288 = Utf8               getAllowDuplicateHeaderNames\n+  #289 = Utf8               ()Z\n+  #290 = Utf8               getAllowMissingColumnNames\n+  #291 = Utf8               getAutoFlush\n+  #292 = Utf8               getCommentMarker\n+  #293 = Utf8               ()Ljava/lang/Character;\n+  #294 = Utf8               getDelimiter\n+  #295 = Utf8               ()C\n+  #296 = Utf8               getEscapeCharacter\n+  #297 = Utf8               getHeader\n+  #298 = Utf8               ()[Ljava/lang/String;\n+  #299 = Utf8               getHeaderComments\n+  #300 = Utf8               getIgnoreEmptyLines\n+  #301 = Utf8               getIgnoreHeaderCase\n+  #302 = Utf8               getIgnoreSurroundingSpaces\n+  #303 = Utf8               getNullString\n+  #304 = Utf8               ()Ljava/lang/String;\n+  #305 = Utf8               getQuoteCharacter\n+  #306 = Utf8               getQuoteMode\n+  #307 = Utf8               ()Lorg/apache/commons/csv/QuoteMode;\n+  #308 = Utf8               getRecordSeparator\n+  #309 = Utf8               getSkipHeaderRecord\n+  #310 = Utf8               getTrailingDelimiter\n+  #311 = Utf8               getTrim\n+  #312 = Utf8               hashCode\n+  #313 = Utf8               ()I\n+  #314 = Utf8               prime\n+  #315 = Utf8               I\n+  #316 = Utf8               result\n+  #317 = Utf8               isCommentMarkerSet\n+  #318 = Utf8               isEscapeCharacterSet\n+  #319 = Utf8               isNullStringSet\n+  #320 = Utf8               isQuoteCharacterSet\n+  #321 = Utf8               parse\n+  #322 = Utf8               (Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;\n+  #323 = Utf8               in\n+  #324 = Utf8               Ljava/io/Reader;\n+  #325 = Utf8               Exceptions\n+  #326 = Utf8               print\n+  #327 = Utf8               (Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n+  #328 = Utf8               Ljava/lang/Appendable;\n+  #329 = Utf8               (Ljava/io/File;Ljava/nio/charset/Charset;)Lorg/apache/commons/csv/CSVPrinter;\n+  #330 = Utf8               Ljava/io/File;\n+  #331 = Utf8               charset\n+  #332 = Utf8               Ljava/nio/charset/Charset;\n+  #333 = Utf8               (Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n+  #334 = Utf8               charSequence\n+  #335 = Utf8               Ljava/lang/CharSequence;\n+  #336 = Utf8               value\n+  #337 = Utf8               newRecord\n+  #338 = Utf8               (Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n+  #339 = Utf8               object\n+  #340 = Utf8               offset\n+  #341 = Utf8               len\n+  #342 = Utf8               (Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Lorg/apache/commons/csv/CSVPrinter;\n+  #343 = Utf8               Ljava/nio/file/Path;\n+  #344 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n+  #345 = Utf8               reader\n+  #346 = Utf8               printer\n+  #347 = Utf8               ()Lorg/apache/commons/csv/CSVPrinter;\n+  #348 = Utf8               println\n+  #349 = Utf8               (Ljava/lang/Appendable;)V\n+  #350 = Utf8               printRecord\n+  #351 = Utf8               (Ljava/lang/Appendable;[Ljava/lang/Object;)V\n+  #352 = Utf8               i\n+  #353 = Class              #634          // java/lang/Appendable\n+  #354 = Utf8               printWithEscapes\n+  #355 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n+  #356 = Utf8               start\n+  #357 = Utf8               pos\n+  #358 = Utf8               end\n+  #359 = Utf8               delim\n+  #360 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;)V\n+  #361 = Utf8               builder\n+  #362 = Utf8               Ljava/lang/StringBuilder;\n+  #363 = Utf8               printWithQuotes\n+  #364 = Utf8               quote\n+  #365 = Utf8               delimChar\n+  #366 = Utf8               quoteModePolicy\n+  #367 = Utf8               toString\n+  #368 = Utf8               sb\n+  #369 = Utf8               toStringArray\n+  #370 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/String;\n+  #371 = Utf8               strings\n+  #372 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n+  #373 = Utf8               count\n+  #374 = Utf8               validate\n+  #375 = Utf8               ()V\n+  #376 = Utf8               hdr\n+  #377 = Utf8               dupCheck\n+  #378 = Utf8               Ljava/util/Set;\n+  #379 = Utf8               LocalVariableTypeTable\n+  #380 = Utf8               Ljava/util/Set<Ljava/lang/String;>;\n+  #381 = Class              #635          // java/util/Set\n+  #382 = Utf8               withAllowDuplicateHeaderNames\n+  #383 = Utf8               ()Lorg/apache/commons/csv/CSVFormat;\n+  #384 = Utf8               (Z)Lorg/apache/commons/csv/CSVFormat;\n+  #385 = Utf8               withAllowMissingColumnNames\n+  #386 = Utf8               withAutoFlush\n+  #387 = Utf8               withCommentMarker\n+  #388 = Utf8               (Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n+  #389 = Utf8               withDelimiter\n+  #390 = Utf8               withEscape\n+  #391 = Utf8               withFirstRecordAsHeader\n+  #392 = Utf8               withHeader\n+  #393 = Utf8               (Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat;\n+  #394 = Utf8               enumValues\n+  #395 = Utf8               [Ljava/lang/Enum;\n+  #396 = Utf8               headerEnum\n+  #397 = Utf8               Ljava/lang/Class;\n+  #398 = Utf8               [Ljava/lang/Enum<*>;\n+  #399 = Utf8               Ljava/lang/Class<+Ljava/lang/Enum<*>;>;\n+  #400 = Utf8               Signature\n+  #401 = Utf8               (Ljava/lang/Class<+Ljava/lang/Enum<*>;>;)Lorg/apache/commons/csv/CSVFormat;\n+  #402 = Utf8               (Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat;\n+  #403 = Utf8               resultSet\n+  #404 = Utf8               Ljava/sql/ResultSet;\n+  #405 = Class              #636          // java/sql/ResultSet\n+  #406 = Class              #637          // java/sql/ResultSetMetaData\n+  #407 = Class              #638          // java/sql/SQLException\n+  #408 = Utf8               (Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;\n+  #409 = Utf8               columnCount\n+  #410 = Utf8               metaData\n+  #411 = Utf8               Ljava/sql/ResultSetMetaData;\n+  #412 = Utf8               labels\n+  #413 = Utf8               ([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n+  #414 = Utf8               withHeaderComments\n+  #415 = Utf8               ([Ljava/lang/Object;)Lorg/apache/commons/csv/CSVFormat;\n+  #416 = Utf8               withIgnoreEmptyLines\n+  #417 = Utf8               withIgnoreHeaderCase\n+  #418 = Utf8               withIgnoreSurroundingSpaces\n+  #419 = Utf8               withNullString\n+  #420 = Utf8               withQuote\n+  #421 = Utf8               withQuoteMode\n+  #422 = Utf8               (Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;\n+  #423 = Utf8               withRecordSeparator\n+  #424 = Utf8               withSkipHeaderRecord\n+  #425 = Utf8               withSystemRecordSeparator\n+  #426 = Utf8               withTrailingDelimiter\n+  #427 = Utf8               withTrim\n+  #428 = Utf8               <clinit>\n+  #429 = Utf8               SourceFile\n+  #430 = Utf8               CSVFormat.java\n+  #431 = Utf8               org/apache/commons/csv/Constants\n+  #432 = NameAndType        #639:#295     // charValue:()C\n+  #433 = NameAndType        #252:#253     // isLineBreak:(C)Z\n+  #434 = Utf8               org/apache/commons/csv/CSVFormat\n+  #435 = NameAndType        #265:#266     // \"<init>\":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZZ)V\n+  #436 = NameAndType        #262:#640     // valueOf:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n+  #437 = NameAndType        #641:#383     // getFormat:()Lorg/apache/commons/csv/CSVFormat;\n+  #438 = NameAndType        #265:#375     // \"<init>\":()V\n+  #439 = NameAndType        #233:#234     // delimiter:C\n+  #440 = NameAndType        #244:#232     // quoteCharacter:Ljava/lang/Character;\n+  #441 = NameAndType        #246:#247     // quoteMode:Lorg/apache/commons/csv/QuoteMode;\n+  #442 = NameAndType        #231:#232     // commentMarker:Ljava/lang/Character;\n+  #443 = NameAndType        #235:#232     // escapeCharacter:Ljava/lang/Character;\n+  #444 = NameAndType        #241:#228     // ignoreSurroundingSpaces:Z\n+  #445 = NameAndType        #229:#228     // allowMissingColumnNames:Z\n+  #446 = NameAndType        #239:#228     // ignoreEmptyLines:Z\n+  #447 = NameAndType        #248:#243     // recordSeparator:Ljava/lang/String;\n+  #448 = NameAndType        #242:#243     // nullString:Ljava/lang/String;\n+  #449 = NameAndType        #369:#370     // toStringArray:([Ljava/lang/Object;)[Ljava/lang/String;\n+  #450 = NameAndType        #238:#237     // headerComments:[Ljava/lang/String;\n+  #451 = Class              #237          // \"[Ljava/lang/String;\"\n+  #452 = NameAndType        #642:#643     // clone:()Ljava/lang/Object;\n+  #453 = NameAndType        #236:#237     // header:[Ljava/lang/String;\n+  #454 = NameAndType        #249:#228     // skipHeaderRecord:Z\n+  #455 = NameAndType        #240:#228     // ignoreHeaderCase:Z\n+  #456 = NameAndType        #250:#228     // trailingDelimiter:Z\n+  #457 = NameAndType        #251:#228     // trim:Z\n+  #458 = NameAndType        #230:#228     // autoFlush:Z\n+  #459 = Utf8               java/lang/StringBuilder\n+  #460 = NameAndType        #644:#645     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #461 = NameAndType        #644:#646     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #462 = NameAndType        #367:#304     // toString:()Ljava/lang/String;\n+  #463 = NameAndType        #245:#243     // quotedNullString:Ljava/lang/String;\n+  #464 = NameAndType        #227:#228     // allowDuplicateHeaderNames:Z\n+  #465 = NameAndType        #374:#375     // validate:()V\n+  #466 = NameAndType        #647:#648     // getClass:()Ljava/lang/Class;\n+  #467 = NameAndType        #275:#276     // equals:(Ljava/lang/Object;)Z\n+  #468 = Class              #649          // java/util/Arrays\n+  #469 = NameAndType        #275:#650     // equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z\n+  #470 = Utf8               java/io/StringWriter\n+  #471 = Utf8               org/apache/commons/csv/CSVPrinter\n+  #472 = NameAndType        #265:#651     // \"<init>\":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n+  #473 = NameAndType        #350:#652     // printRecord:([Ljava/lang/Object;)V\n+  #474 = NameAndType        #251:#304     // trim:()Ljava/lang/String;\n+  #475 = NameAndType        #653:#375     // close:()V\n+  #476 = Utf8               java/lang/Throwable\n+  #477 = NameAndType        #654:#655     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #478 = Utf8               java/io/IOException\n+  #479 = Utf8               java/lang/IllegalStateException\n+  #480 = NameAndType        #265:#655     // \"<init>\":(Ljava/lang/Throwable;)V\n+  #481 = Class              #237          // \"[Ljava/lang/String;\"\n+  #482 = Class              #237          // \"[Ljava/lang/String;\"\n+  #483 = NameAndType        #312:#313     // hashCode:()I\n+  #484 = NameAndType        #312:#656     // hashCode:([Ljava/lang/Object;)I\n+  #485 = Utf8               org/apache/commons/csv/CSVParser\n+  #486 = NameAndType        #265:#657     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+  #487 = Utf8               java/io/OutputStreamWriter\n+  #488 = Utf8               java/io/FileOutputStream\n+  #489 = NameAndType        #265:#658     // \"<init>\":(Ljava/io/File;)V\n+  #490 = NameAndType        #265:#659     // \"<init>\":(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n+  #491 = Utf8\n+  #492 = NameAndType        #660:#247     // ALL:Lorg/apache/commons/csv/QuoteMode;\n+  #493 = Utf8               java/lang/CharSequence\n+  #494 = Utf8               java/io/Reader\n+  #495 = NameAndType        #326:#344     // print:(Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n+  #496 = NameAndType        #311:#289     // getTrim:()Z\n+  #497 = NameAndType        #251:#372     // trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n+  #498 = NameAndType        #326:#338     // print:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n+  #499 = NameAndType        #661:#313     // length:()I\n+  #500 = NameAndType        #294:#295     // getDelimiter:()C\n+  #501 = NameAndType        #644:#662     // append:(C)Ljava/lang/Appendable;\n+  #502 = NameAndType        #644:#663     // append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n+  #503 = NameAndType        #320:#289     // isQuoteCharacterSet:()Z\n+  #504 = NameAndType        #363:#338     // printWithQuotes:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n+  #505 = NameAndType        #318:#289     // isEscapeCharacterSet:()Z\n+  #506 = NameAndType        #354:#355     // printWithEscapes:(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n+  #507 = NameAndType        #644:#664     // append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n+  #508 = Utf8               java/nio/file/OpenOption\n+  #509 = Class              #665          // java/nio/file/Files\n+  #510 = NameAndType        #666:#667     // newBufferedWriter:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n+  #511 = NameAndType        #326:#327     // print:(Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n+  #512 = NameAndType        #363:#360     // printWithQuotes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n+  #513 = NameAndType        #354:#360     // printWithEscapes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n+  #514 = Utf8               java/io/Writer\n+  #515 = NameAndType        #668:#669     // copyLarge:(Ljava/io/Reader;Ljava/io/Writer;)J\n+  #516 = NameAndType        #670:#671     // copy:(Ljava/io/Reader;Ljava/lang/Appendable;)J\n+  #517 = Class              #672          // java/lang/System\n+  #518 = NameAndType        #286:#673     // out:Ljava/io/PrintStream;\n+  #519 = NameAndType        #310:#289     // getTrailingDelimiter:()Z\n+  #520 = NameAndType        #326:#333     // print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n+  #521 = NameAndType        #348:#349     // println:(Ljava/lang/Appendable;)V\n+  #522 = NameAndType        #296:#293     // getEscapeCharacter:()Ljava/lang/Character;\n+  #523 = NameAndType        #674:#675     // charAt:(I)C\n+  #524 = Utf8               org/apache/commons/csv/IOUtils\n+  #525 = NameAndType        #265:#676     // \"<init>\":(I)V\n+  #526 = NameAndType        #677:#313     // read:()I\n+  #527 = NameAndType        #644:#678     // append:(C)Ljava/lang/StringBuilder;\n+  #528 = NameAndType        #679:#680     // substring:(II)Ljava/lang/String;\n+  #529 = NameAndType        #681:#676     // setLength:(I)V\n+  #530 = NameAndType        #305:#293     // getQuoteCharacter:()Ljava/lang/Character;\n+  #531 = NameAndType        #306:#307     // getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n+  #532 = NameAndType        #682:#247     // MINIMAL:Lorg/apache/commons/csv/QuoteMode;\n+  #533 = NameAndType        #683:#684     // $SwitchMap$org$apache$commons$csv$QuoteMode:[I\n+  #534 = NameAndType        #685:#313     // ordinal:()I\n+  #535 = Utf8               java/lang/Number\n+  #536 = Utf8               Unexpected Quote value:\n+  #537 = NameAndType        #265:#686     // \"<init>\":(Ljava/lang/String;)V\n+  #538 = NameAndType        #687:#247     // NONE:Lorg/apache/commons/csv/QuoteMode;\n+  #539 = Utf8               Delimiter=<\n+  #540 = Utf8               Escape=<\n+  #541 = Utf8               QuoteChar=<\n+  #542 = NameAndType        #317:#289     // isCommentMarkerSet:()Z\n+  #543 = Utf8               CommentStart=<\n+  #544 = NameAndType        #319:#289     // isNullStringSet:()Z\n+  #545 = Utf8               NullString=<\n+  #546 = Utf8               RecordSeparator=<\n+  #547 = NameAndType        #300:#289     // getIgnoreEmptyLines:()Z\n+  #548 = Utf8                EmptyLines:ignored\n+  #549 = NameAndType        #302:#289     // getIgnoreSurroundingSpaces:()Z\n+  #550 = Utf8                SurroundingSpaces:ignored\n+  #551 = NameAndType        #301:#289     // getIgnoreHeaderCase:()Z\n+  #552 = Utf8                IgnoreHeaderCase:ignored\n+  #553 = Utf8                SkipHeaderRecord:\n+  #554 = NameAndType        #644:#688     // append:(Z)Ljava/lang/StringBuilder;\n+  #555 = Utf8               HeaderComments:\n+  #556 = NameAndType        #367:#280     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n+  #557 = Utf8               Header:\n+  #558 = Utf8               java/lang/String\n+  #559 = NameAndType        #689:#690     // subSequence:(II)Ljava/lang/CharSequence;\n+  #560 = Utf8               java/lang/IllegalArgumentException\n+  #561 = Utf8               The delimiter cannot be a line break\n+  #562 = Utf8               The quoteChar character and the delimiter cannot be the same (\\'\n+  #563 = Utf8               \\')\n+  #564 = Utf8               The escape character and the delimiter cannot be the same (\\'\n+  #565 = Utf8               The comment start character and the delimiter cannot be the same (\\'\n+  #566 = Utf8               The comment start character and the quoteChar cannot be the same (\\'\n+  #567 = Utf8               The comment start and the escape character cannot be the same (\\'\n+  #568 = Utf8               No quotes mode set but no escape character is set\n+  #569 = Utf8               java/util/HashSet\n+  #570 = NameAndType        #691:#276     // add:(Ljava/lang/Object;)Z\n+  #571 = Utf8               The header contains a duplicate entry: \\'\n+  #572 = Utf8               \\' in\n+  #573 = NameAndType        #382:#384     // withAllowDuplicateHeaderNames:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #574 = NameAndType        #385:#384     // withAllowMissingColumnNames:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #575 = NameAndType        #262:#692     // valueOf:(C)Ljava/lang/Character;\n+  #576 = NameAndType        #387:#388     // withCommentMarker:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n+  #577 = NameAndType        #252:#259     // isLineBreak:(Ljava/lang/Character;)Z\n+  #578 = Utf8               The comment start marker character cannot be a line break\n+  #579 = NameAndType        #390:#388     // withEscape:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n+  #580 = Utf8               The escape character cannot be a line break\n+  #581 = NameAndType        #392:#413     // withHeader:([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n+  #582 = NameAndType        #424:#383     // withSkipHeaderRecord:()Lorg/apache/commons/csv/CSVFormat;\n+  #583 = Class              #693          // java/lang/Class\n+  #584 = NameAndType        #694:#695     // getEnumConstants:()[Ljava/lang/Object;\n+  #585 = Class              #696          // java/lang/Enum\n+  #586 = NameAndType        #697:#304     // name:()Ljava/lang/String;\n+  #587 = NameAndType        #698:#699     // getMetaData:()Ljava/sql/ResultSetMetaData;\n+  #588 = NameAndType        #392:#408     // withHeader:(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;\n+  #589 = NameAndType        #700:#313     // getColumnCount:()I\n+  #590 = NameAndType        #701:#702     // getColumnLabel:(I)Ljava/lang/String;\n+  #591 = NameAndType        #416:#384     // withIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #592 = NameAndType        #417:#384     // withIgnoreHeaderCase:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #593 = NameAndType        #418:#384     // withIgnoreSurroundingSpaces:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #594 = NameAndType        #420:#388     // withQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n+  #595 = Utf8               The quoteChar cannot be a line break\n+  #596 = NameAndType        #262:#703     // valueOf:(C)Ljava/lang/String;\n+  #597 = NameAndType        #423:#263     // withRecordSeparator:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n+  #598 = NameAndType        #424:#384     // withSkipHeaderRecord:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #599 = Utf8               line.separator\n+  #600 = NameAndType        #704:#705     // getProperty:(Ljava/lang/String;)Ljava/lang/String;\n+  #601 = NameAndType        #426:#384     // withTrailingDelimiter:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #602 = NameAndType        #427:#384     // withTrim:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #603 = NameAndType        #706:#232     // DOUBLE_QUOTE_CHAR:Ljava/lang/Character;\n+  #604 = Utf8               \\r\\n\n+  #605 = NameAndType        #209:#210     // DEFAULT:Lorg/apache/commons/csv/CSVFormat;\n+  #606 = NameAndType        #385:#383     // withAllowMissingColumnNames:()Lorg/apache/commons/csv/CSVFormat;\n+  #607 = NameAndType        #211:#210     // EXCEL:Lorg/apache/commons/csv/CSVFormat;\n+  #608 = NameAndType        #389:#261     // withDelimiter:(C)Lorg/apache/commons/csv/CSVFormat;\n+  #609 = NameAndType        #390:#261     // withEscape:(C)Lorg/apache/commons/csv/CSVFormat;\n+  #610 = NameAndType        #423:#261     // withRecordSeparator:(C)Lorg/apache/commons/csv/CSVFormat;\n+  #611 = NameAndType        #212:#210     // INFORMIX_UNLOAD:Lorg/apache/commons/csv/CSVFormat;\n+  #612 = NameAndType        #213:#210     // INFORMIX_UNLOAD_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #613 = NameAndType        #421:#422     // withQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;\n+  #614 = NameAndType        #214:#210     // MONGODB_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #615 = NameAndType        #215:#210     // MONGODB_TSV:Lorg/apache/commons/csv/CSVFormat;\n+  #616 = Utf8               \\\\N\n+  #617 = NameAndType        #419:#263     // withNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n+  #618 = NameAndType        #707:#247     // ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n+  #619 = NameAndType        #216:#210     // MYSQL:Lorg/apache/commons/csv/CSVFormat;\n+  #620 = NameAndType        #427:#383     // withTrim:()Lorg/apache/commons/csv/CSVFormat;\n+  #621 = NameAndType        #425:#383     // withSystemRecordSeparator:()Lorg/apache/commons/csv/CSVFormat;\n+  #622 = NameAndType        #217:#210     // ORACLE:Lorg/apache/commons/csv/CSVFormat;\n+  #623 = NameAndType        #218:#210     // POSTGRESQL_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #624 = NameAndType        #219:#210     // POSTGRESQL_TEXT:Lorg/apache/commons/csv/CSVFormat;\n+  #625 = NameAndType        #220:#210     // RFC4180:Lorg/apache/commons/csv/CSVFormat;\n+  #626 = NameAndType        #418:#383     // withIgnoreSurroundingSpaces:()Lorg/apache/commons/csv/CSVFormat;\n+  #627 = NameAndType        #226:#210     // TDF:Lorg/apache/commons/csv/CSVFormat;\n+  #628 = Utf8               java/lang/Object\n+  #629 = Utf8               java/io/Serializable\n+  #630 = Utf8               org/apache/commons/csv/CSVFormat$1\n+  #631 = Utf8               org/apache/commons/csv/CSVFormat$Predefined\n+  #632 = Utf8               java/lang/Character\n+  #633 = Utf8               org/apache/commons/csv/QuoteMode\n+  #634 = Utf8               java/lang/Appendable\n+  #635 = Utf8               java/util/Set\n+  #636 = Utf8               java/sql/ResultSet\n+  #637 = Utf8               java/sql/ResultSetMetaData\n+  #638 = Utf8               java/sql/SQLException\n+  #639 = Utf8               charValue\n+  #640 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n+  #641 = Utf8               getFormat\n+  #642 = Utf8               clone\n+  #643 = Utf8               ()Ljava/lang/Object;\n+  #644 = Utf8               append\n+  #645 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #646 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #647 = Utf8               getClass\n+  #648 = Utf8               ()Ljava/lang/Class;\n+  #649 = Utf8               java/util/Arrays\n+  #650 = Utf8               ([Ljava/lang/Object;[Ljava/lang/Object;)Z\n+  #651 = Utf8               (Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n+  #652 = Utf8               ([Ljava/lang/Object;)V\n+  #653 = Utf8               close\n+  #654 = Utf8               addSuppressed\n+  #655 = Utf8               (Ljava/lang/Throwable;)V\n+  #656 = Utf8               ([Ljava/lang/Object;)I\n+  #657 = Utf8               (Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+  #658 = Utf8               (Ljava/io/File;)V\n+  #659 = Utf8               (Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n+  #660 = Utf8               ALL\n+  #661 = Utf8               length\n+  #662 = Utf8               (C)Ljava/lang/Appendable;\n+  #663 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n+  #664 = Utf8               (Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n+  #665 = Utf8               java/nio/file/Files\n+  #666 = Utf8               newBufferedWriter\n+  #667 = Utf8               (Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n+  #668 = Utf8               copyLarge\n+  #669 = Utf8               (Ljava/io/Reader;Ljava/io/Writer;)J\n+  #670 = Utf8               copy\n+  #671 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;)J\n+  #672 = Utf8               java/lang/System\n+  #673 = Utf8               Ljava/io/PrintStream;\n+  #674 = Utf8               charAt\n+  #675 = Utf8               (I)C\n+  #676 = Utf8               (I)V\n+  #677 = Utf8               read\n+  #678 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #679 = Utf8               substring\n+  #680 = Utf8               (II)Ljava/lang/String;\n+  #681 = Utf8               setLength\n+  #682 = Utf8               MINIMAL\n+  #683 = Utf8               $SwitchMap$org$apache$commons$csv$QuoteMode\n+  #684 = Utf8               [I\n+  #685 = Utf8               ordinal\n+  #686 = Utf8               (Ljava/lang/String;)V\n+  #687 = Utf8               NONE\n+  #688 = Utf8               (Z)Ljava/lang/StringBuilder;\n+  #689 = Utf8               subSequence\n+  #690 = Utf8               (II)Ljava/lang/CharSequence;\n+  #691 = Utf8               add\n+  #692 = Utf8               (C)Ljava/lang/Character;\n+  #693 = Utf8               java/lang/Class\n+  #694 = Utf8               getEnumConstants\n+  #695 = Utf8               ()[Ljava/lang/Object;\n+  #696 = Utf8               java/lang/Enum\n+  #697 = Utf8               name\n+  #698 = Utf8               getMetaData\n+  #699 = Utf8               ()Ljava/sql/ResultSetMetaData;\n+  #700 = Utf8               getColumnCount\n+  #701 = Utf8               getColumnLabel\n+  #702 = Utf8               (I)Ljava/lang/String;\n+  #703 = Utf8               (C)Ljava/lang/String;\n+  #704 = Utf8               getProperty\n+  #705 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #706 = Utf8               DOUBLE_QUOTE_CHAR\n+  #707 = Utf8               ALL_NON_NULL\n {\n   public static final org.apache.commons.csv.CSVFormat DEFAULT;\n     descriptor: Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n \n   public static final org.apache.commons.csv.CSVFormat EXCEL;\n     descriptor: Lorg/apache/commons/csv/CSVFormat;\n@@ -1322,123 +1306,85 @@\n         frame_type = 15 /* same */\n         frame_type = 15 /* same */\n \n   public java.lang.String format(java.lang.Object...);\n     descriptor: ([Ljava/lang/Object;)Ljava/lang/String;\n     flags: (0x0081) ACC_PUBLIC, ACC_VARARGS\n     Code:\n-      stack=4, locals=9, args_size=2\n+      stack=4, locals=6, args_size=2\n          0: new           #41                 // class java/io/StringWriter\n          3: dup\n          4: invokespecial #42                 // Method java/io/StringWriter.\"<init>\":()V\n          7: astore_2\n          8: new           #43                 // class org/apache/commons/csv/CSVPrinter\n         11: dup\n         12: aload_2\n         13: aload_0\n         14: invokespecial #44                 // Method org/apache/commons/csv/CSVPrinter.\"<init>\":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n         17: astore_3\n-        18: aconst_null\n-        19: astore        4\n-        21: aload_3\n-        22: aload_1\n-        23: invokevirtual #45                 // Method org/apache/commons/csv/CSVPrinter.printRecord:([Ljava/lang/Object;)V\n-        26: aload_2\n-        27: invokevirtual #46                 // Method java/io/StringWriter.toString:()Ljava/lang/String;\n-        30: invokevirtual #47                 // Method java/lang/String.trim:()Ljava/lang/String;\n-        33: astore        5\n-        35: aload_3\n-        36: ifnull        67\n-        39: aload         4\n-        41: ifnull        63\n-        44: aload_3\n-        45: invokevirtual #48                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n-        48: goto          67\n-        51: astore        6\n-        53: aload         4\n-        55: aload         6\n-        57: invokevirtual #50                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-        60: goto          67\n-        63: aload_3\n-        64: invokevirtual #48                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n-        67: aload         5\n-        69: areturn\n-        70: astore        5\n-        72: aload         5\n-        74: astore        4\n-        76: aload         5\n-        78: athrow\n-        79: astore        7\n-        81: aload_3\n-        82: ifnull        113\n-        85: aload         4\n-        87: ifnull        109\n-        90: aload_3\n-        91: invokevirtual #48                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n-        94: goto          113\n-        97: astore        8\n-        99: aload         4\n-       101: aload         8\n-       103: invokevirtual #50                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-       106: goto          113\n-       109: aload_3\n-       110: invokevirtual #48                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n-       113: aload         7\n-       115: athrow\n-       116: astore_3\n-       117: new           #52                 // class java/lang/IllegalStateException\n-       120: dup\n-       121: aload_3\n-       122: invokespecial #53                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n-       125: athrow\n+        18: aload_3\n+        19: aload_1\n+        20: invokevirtual #45                 // Method org/apache/commons/csv/CSVPrinter.printRecord:([Ljava/lang/Object;)V\n+        23: aload_2\n+        24: invokevirtual #46                 // Method java/io/StringWriter.toString:()Ljava/lang/String;\n+        27: invokevirtual #47                 // Method java/lang/String.trim:()Ljava/lang/String;\n+        30: astore        4\n+        32: aload_3\n+        33: invokevirtual #48                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n+        36: aload         4\n+        38: areturn\n+        39: astore        4\n+        41: aload_3\n+        42: invokevirtual #48                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n+        45: goto          57\n+        48: astore        5\n+        50: aload         4\n+        52: aload         5\n+        54: invokevirtual #50                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        57: aload         4\n+        59: athrow\n+        60: astore_3\n+        61: new           #52                 // class java/lang/IllegalStateException\n+        64: dup\n+        65: aload_3\n+        66: invokespecial #53                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n+        69: athrow\n       Exception table:\n          from    to  target type\n-            44    48    51   Class java/lang/Throwable\n-            21    35    70   Class java/lang/Throwable\n-            21    35    79   any\n-            90    94    97   Class java/lang/Throwable\n-            70    81    79   any\n-             8    67   116   Class java/io/IOException\n-            70   116   116   Class java/io/IOException\n+            18    32    39   Class java/lang/Throwable\n+            41    45    48   Class java/lang/Throwable\n+             8    36    60   Class java/io/IOException\n+            39    60    60   Class java/io/IOException\n       LineNumberTable:\n         line 873: 0\n         line 874: 8\n-        line 875: 21\n-        line 876: 26\n-        line 877: 35\n-        line 876: 67\n-        line 874: 70\n-        line 877: 79\n-        line 879: 117\n+        line 875: 18\n+        line 876: 23\n+        line 877: 32\n+        line 876: 36\n+        line 874: 39\n+        line 877: 60\n+        line 879: 61\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           18      98     3 csvPrinter   Lorg/apache/commons/csv/CSVPrinter;\n-          117       9     3     e   Ljava/io/IOException;\n-            0     126     0  this   Lorg/apache/commons/csv/CSVFormat;\n-            0     126     1 values   [Ljava/lang/Object;\n-            8     118     2   out   Ljava/io/StringWriter;\n-      StackMapTable: number_of_entries = 9\n+           18      42     3 csvPrinter   Lorg/apache/commons/csv/CSVPrinter;\n+           61       9     3     e   Ljava/io/IOException;\n+            0      70     0  this   Lorg/apache/commons/csv/CSVFormat;\n+            0      70     1 values   [Ljava/lang/Object;\n+            8      62     2   out   Ljava/io/StringWriter;\n+      StackMapTable: number_of_entries = 4\n         frame_type = 255 /* full_frame */\n-          offset_delta = 51\n-          locals = [ class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/io/StringWriter, class org/apache/commons/csv/CSVPrinter, class java/lang/Throwable, class java/lang/String ]\n+          offset_delta = 39\n+          locals = [ class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/io/StringWriter, class org/apache/commons/csv/CSVPrinter ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 11 /* same */\n-        frame_type = 3 /* same */\n         frame_type = 255 /* full_frame */\n-          offset_delta = 2\n+          offset_delta = 8\n           locals = [ class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/io/StringWriter, class org/apache/commons/csv/CSVPrinter, class java/lang/Throwable ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 72 /* same_locals_1_stack_item */\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 255 /* full_frame */\n-          offset_delta = 17\n-          locals = [ class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/io/StringWriter, class org/apache/commons/csv/CSVPrinter, class java/lang/Throwable, top, top, class java/lang/Throwable ]\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 11 /* same */\n-        frame_type = 3 /* same */\n+        frame_type = 8 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 2\n           locals = [ class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/io/StringWriter ]\n           stack = [ class java/io/IOException ]\n \n   public boolean getAllowDuplicateHeaderNames();\n     descriptor: ()Z\n@@ -4274,15 +4220,15 @@\n             0      53     1 headerEnum   Ljava/lang/Class<+Ljava/lang/Enum<*>;>;\n       StackMapTable: number_of_entries = 2\n         frame_type = 254 /* append */\n           offset_delta = 23\n           locals = [ class \"[Ljava/lang/String;\", class \"[Ljava/lang/Enum;\", int ]\n         frame_type = 249 /* chop */\n           offset_delta = 23\n-    Signature: #411                         // (Ljava/lang/Class<+Ljava/lang/Enum<*>;>;)Lorg/apache/commons/csv/CSVFormat;\n+    Signature: #401                         // (Ljava/lang/Class<+Ljava/lang/Enum<*>;>;)Lorg/apache/commons/csv/CSVFormat;\n \n   public org.apache.commons.csv.CSVFormat withHeader(java.sql.ResultSet) throws java.sql.SQLException;\n     descriptor: (Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n"}]}
