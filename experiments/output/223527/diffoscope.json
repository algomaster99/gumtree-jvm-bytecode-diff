{"diffoscope-json-version": 1, "source1": "first/AbstractAutomaticBean.class", "source2": "second/AbstractAutomaticBean.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,14 +1,12 @@\n \n package com.puppycrawl.tools.checkstyle;\n \n import java.util.Iterator;\n-import java.util.Collection;\n import com.puppycrawl.tools.checkstyle.api.Context;\n-import java.beans.PropertyDescriptor;\n import org.apache.commons.beanutils.ConversionException;\n import java.lang.reflect.InvocationTargetException;\n import java.util.Locale;\n import org.apache.commons.beanutils.PropertyUtils;\n import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;\n import java.net.URI;\n import com.puppycrawl.tools.checkstyle.api.Scope;\n@@ -36,105 +34,93 @@\n {\n     private static final String COMMA_SEPARATOR = \",\";\n     private Configuration configuration;\n     \n     protected abstract void finishLocalSetup() throws CheckstyleException;\n     \n     private static BeanUtilsBean createBeanUtilsBean() {\n-        final ConvertUtilsBean cub = new ConvertUtilsBean();\n-        registerIntegralTypes(cub);\n-        registerCustomTypes(cub);\n-        return new BeanUtilsBean(cub, new PropertyUtilsBean());\n-    }\n-    \n-    private static void registerIntegralTypes(final ConvertUtilsBean cub) {\n-        cub.register((Converter)new BooleanConverter(), (Class)Boolean.TYPE);\n-        cub.register((Converter)new BooleanConverter(), (Class)Boolean.class);\n-        cub.register((Converter)new ArrayConverter((Class)boolean[].class, (Converter)new BooleanConverter()), (Class)boolean[].class);\n-        cub.register((Converter)new ByteConverter(), (Class)Byte.TYPE);\n-        cub.register((Converter)new ByteConverter(), (Class)Byte.class);\n-        cub.register((Converter)new ArrayConverter((Class)byte[].class, (Converter)new ByteConverter()), (Class)byte[].class);\n-        cub.register((Converter)new CharacterConverter(), (Class)Character.TYPE);\n-        cub.register((Converter)new CharacterConverter(), (Class)Character.class);\n-        cub.register((Converter)new ArrayConverter((Class)char[].class, (Converter)new CharacterConverter()), (Class)char[].class);\n-        cub.register((Converter)new DoubleConverter(), (Class)Double.TYPE);\n-        cub.register((Converter)new DoubleConverter(), (Class)Double.class);\n-        cub.register((Converter)new ArrayConverter((Class)double[].class, (Converter)new DoubleConverter()), (Class)double[].class);\n-        cub.register((Converter)new FloatConverter(), (Class)Float.TYPE);\n-        cub.register((Converter)new FloatConverter(), (Class)Float.class);\n-        cub.register((Converter)new ArrayConverter((Class)float[].class, (Converter)new FloatConverter()), (Class)float[].class);\n-        cub.register((Converter)new IntegerConverter(), (Class)Integer.TYPE);\n-        cub.register((Converter)new IntegerConverter(), (Class)Integer.class);\n-        cub.register((Converter)new ArrayConverter((Class)int[].class, (Converter)new IntegerConverter()), (Class)int[].class);\n-        cub.register((Converter)new LongConverter(), (Class)Long.TYPE);\n-        cub.register((Converter)new LongConverter(), (Class)Long.class);\n-        cub.register((Converter)new ArrayConverter((Class)long[].class, (Converter)new LongConverter()), (Class)long[].class);\n-        cub.register((Converter)new ShortConverter(), (Class)Short.TYPE);\n-        cub.register((Converter)new ShortConverter(), (Class)Short.class);\n-        cub.register((Converter)new ArrayConverter((Class)short[].class, (Converter)new ShortConverter()), (Class)short[].class);\n-        cub.register((Converter)new AbstractAutomaticBean.RelaxedStringArrayConverter(), (Class)String[].class);\n-    }\n-    \n-    private static void registerCustomTypes(final ConvertUtilsBean cub) {\n-        cub.register((Converter)new AbstractAutomaticBean.PatternConverter(), (Class)Pattern.class);\n-        cub.register((Converter)new AbstractAutomaticBean.SeverityLevelConverter(), (Class)SeverityLevel.class);\n-        cub.register((Converter)new AbstractAutomaticBean.ScopeConverter(), (Class)Scope.class);\n-        cub.register((Converter)new AbstractAutomaticBean.UriConverter(), (Class)URI.class);\n-        cub.register((Converter)new AbstractAutomaticBean.RelaxedAccessModifierArrayConverter(), (Class)AccessModifierOption[].class);\n-    }\n-    \n-    public final void configure(final Configuration config) throws CheckstyleException {\n-        this.configuration = config;\n-        final String[] propertyNames;\n-        final String[] attributes = propertyNames = config.getPropertyNames();\n-        for (final String key : propertyNames) {\n-            final String value = config.getProperty(key);\n-            this.tryCopyProperty(key, value, true);\n+        final ConvertUtilsBean convertUtilsBean = new ConvertUtilsBean();\n+        registerIntegralTypes(convertUtilsBean);\n+        registerCustomTypes(convertUtilsBean);\n+        return new BeanUtilsBean(convertUtilsBean, new PropertyUtilsBean());\n+    }\n+    \n+    private static void registerIntegralTypes(final ConvertUtilsBean convertUtilsBean) {\n+        convertUtilsBean.register((Converter)new BooleanConverter(), (Class)Boolean.TYPE);\n+        convertUtilsBean.register((Converter)new BooleanConverter(), (Class)Boolean.class);\n+        convertUtilsBean.register((Converter)new ArrayConverter((Class)boolean[].class, (Converter)new BooleanConverter()), (Class)boolean[].class);\n+        convertUtilsBean.register((Converter)new ByteConverter(), (Class)Byte.TYPE);\n+        convertUtilsBean.register((Converter)new ByteConverter(), (Class)Byte.class);\n+        convertUtilsBean.register((Converter)new ArrayConverter((Class)byte[].class, (Converter)new ByteConverter()), (Class)byte[].class);\n+        convertUtilsBean.register((Converter)new CharacterConverter(), (Class)Character.TYPE);\n+        convertUtilsBean.register((Converter)new CharacterConverter(), (Class)Character.class);\n+        convertUtilsBean.register((Converter)new ArrayConverter((Class)char[].class, (Converter)new CharacterConverter()), (Class)char[].class);\n+        convertUtilsBean.register((Converter)new DoubleConverter(), (Class)Double.TYPE);\n+        convertUtilsBean.register((Converter)new DoubleConverter(), (Class)Double.class);\n+        convertUtilsBean.register((Converter)new ArrayConverter((Class)double[].class, (Converter)new DoubleConverter()), (Class)double[].class);\n+        convertUtilsBean.register((Converter)new FloatConverter(), (Class)Float.TYPE);\n+        convertUtilsBean.register((Converter)new FloatConverter(), (Class)Float.class);\n+        convertUtilsBean.register((Converter)new ArrayConverter((Class)float[].class, (Converter)new FloatConverter()), (Class)float[].class);\n+        convertUtilsBean.register((Converter)new IntegerConverter(), (Class)Integer.TYPE);\n+        convertUtilsBean.register((Converter)new IntegerConverter(), (Class)Integer.class);\n+        convertUtilsBean.register((Converter)new ArrayConverter((Class)int[].class, (Converter)new IntegerConverter()), (Class)int[].class);\n+        convertUtilsBean.register((Converter)new LongConverter(), (Class)Long.TYPE);\n+        convertUtilsBean.register((Converter)new LongConverter(), (Class)Long.class);\n+        convertUtilsBean.register((Converter)new ArrayConverter((Class)long[].class, (Converter)new LongConverter()), (Class)long[].class);\n+        convertUtilsBean.register((Converter)new ShortConverter(), (Class)Short.TYPE);\n+        convertUtilsBean.register((Converter)new ShortConverter(), (Class)Short.class);\n+        convertUtilsBean.register((Converter)new ArrayConverter((Class)short[].class, (Converter)new ShortConverter()), (Class)short[].class);\n+        convertUtilsBean.register((Converter)new AbstractAutomaticBean.RelaxedStringArrayConverter(), (Class)String[].class);\n+    }\n+    \n+    private static void registerCustomTypes(final ConvertUtilsBean convertUtilsBean) {\n+        convertUtilsBean.register((Converter)new AbstractAutomaticBean.PatternConverter(), (Class)Pattern.class);\n+        convertUtilsBean.register((Converter)new AbstractAutomaticBean.SeverityLevelConverter(), (Class)SeverityLevel.class);\n+        convertUtilsBean.register((Converter)new AbstractAutomaticBean.ScopeConverter(), (Class)Scope.class);\n+        convertUtilsBean.register((Converter)new AbstractAutomaticBean.UriConverter(), (Class)URI.class);\n+        convertUtilsBean.register((Converter)new AbstractAutomaticBean.RelaxedAccessModifierArrayConverter(), (Class)AccessModifierOption[].class);\n+    }\n+    \n+    public final void configure(final Configuration configuration) throws CheckstyleException {\n+        this.configuration = configuration;\n+        for (final String s : configuration.getPropertyNames()) {\n+            this.tryCopyProperty(s, configuration.getProperty(s), true);\n         }\n         this.finishLocalSetup();\n-        final Configuration[] children;\n-        final Configuration[] childConfigs = children = config.getChildren();\n-        for (final Configuration childConfig : children) {\n-            this.setupChild(childConfig);\n+        final Configuration[] children = configuration.getChildren();\n+        for (int length2 = children.length, j = 0; j < length2; ++j) {\n+            this.setupChild(children[j]);\n         }\n     }\n     \n-    private void tryCopyProperty(final String key, final Object value, final boolean recheck) throws CheckstyleException {\n-        final BeanUtilsBean beanUtils = createBeanUtilsBean();\n+    private void tryCopyProperty(final String s, final Object o, final boolean b) throws CheckstyleException {\n+        final BeanUtilsBean beanUtilsBean = createBeanUtilsBean();\n         try {\n-            if (recheck) {\n-                final PropertyDescriptor descriptor = PropertyUtils.getPropertyDescriptor((Object)this, key);\n-                if (descriptor == null) {\n-                    final String message = String.format(Locale.ROOT, \"Property '%s' does not exist, please check the documentation\", key);\n-                    throw new CheckstyleException(message);\n-                }\n+            if (b && PropertyUtils.getPropertyDescriptor((Object)this, s) == null) {\n+                throw new CheckstyleException(String.format(Locale.ROOT, \"Property '%s' does not exist, please check the documentation\", s));\n             }\n-            beanUtils.copyProperty((Object)this, key, value);\n+            beanUtilsBean.copyProperty((Object)this, s, o);\n         }\n         catch (final InvocationTargetException | IllegalAccessException | NoSuchMethodException ex) {\n-            final String message = String.format(Locale.ROOT, \"Cannot set property '%s' to '%s'\", key, value);\n-            throw new CheckstyleException(message, (Throwable)ex);\n+            throw new CheckstyleException(String.format(Locale.ROOT, \"Cannot set property '%s' to '%s'\", s, o), (Throwable)ex);\n         }\n         catch (final IllegalArgumentException | ConversionException ex2) {\n-            final String message = String.format(Locale.ROOT, \"illegal value '%s' for property '%s'\", value, key);\n-            throw new CheckstyleException(message, (Throwable)ex2);\n+            throw new CheckstyleException(String.format(Locale.ROOT, \"illegal value '%s' for property '%s'\", o, s), (Throwable)ex2);\n         }\n     }\n     \n     public final void contextualize(final Context context) throws CheckstyleException {\n-        final Collection<String> attributes = context.getAttributeNames();\n-        for (final String key : attributes) {\n-            final Object value = context.get(key);\n-            this.tryCopyProperty(key, value, false);\n+        for (final String s : context.getAttributeNames()) {\n+            this.tryCopyProperty(s, context.get(s), false);\n         }\n     }\n     \n     protected final Configuration getConfiguration() {\n         return this.configuration;\n     }\n     \n-    protected void setupChild(final Configuration childConf) throws CheckstyleException {\n-        if (childConf != null) {\n-            throw new CheckstyleException(childConf.getName() + \" is not allowed as a child in \" + this.configuration.getName() + \". Please review 'Parent Module' section for this Check in web documentation if Check is standard.\");\n+    protected void setupChild(final Configuration configuration) throws CheckstyleException {\n+        if (configuration != null) {\n+            throw new CheckstyleException(configuration.getName() + \" is not allowed as a child in \" + this.configuration.getName() + \". Please review 'Parent Module' section for this Check in web documentation if Check is standard.\");\n         }\n     }\n }\n"}]}
