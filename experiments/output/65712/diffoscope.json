{"diffoscope-json-version": 1, "source1": "first/NewAttributeBands.class", "source2": "second/NewAttributeBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -67,29 +67,29 @@\n         for (int i = 0; i < this.attributeLayoutElements.size(); ++i) {\n             final NewAttributeBands.AttributeLayoutElement element = (NewAttributeBands.AttributeLayoutElement)this.attributeLayoutElements.get(i);\n             if (element instanceof NewAttributeBands.Callable) {\n                 final NewAttributeBands.Callable callable = (NewAttributeBands.Callable)element;\n                 if (i == 0) {\n                     callable.setFirstCallable(true);\n                 }\n-                final List body = NewAttributeBands.Callable.access$000(callable);\n+                final List body = NewAttributeBands.Callable.access$0(callable);\n                 for (int iIndex = 0; iIndex < body.size(); ++iIndex) {\n                     final NewAttributeBands.LayoutElement layoutElement = (NewAttributeBands.LayoutElement)body.get(iIndex);\n                     backwardsCalls += this.resolveCallsForElement(i, callable, layoutElement);\n                 }\n             }\n         }\n         this.backwardsCallCount = backwardsCalls;\n     }\n     \n     private int resolveCallsForElement(final int i, final NewAttributeBands.Callable currentCallable, final NewAttributeBands.LayoutElement layoutElement) {\n         int backwardsCalls = 0;\n         if (layoutElement instanceof NewAttributeBands.Call) {\n             final NewAttributeBands.Call call = (NewAttributeBands.Call)layoutElement;\n-            int index = NewAttributeBands.Call.access$100(call);\n+            int index = NewAttributeBands.Call.access$0(call);\n             if (index == 0) {\n                 ++backwardsCalls;\n                 call.setCallable(currentCallable);\n             }\n             else if (index > 0) {\n                 for (int k = i + 1; k < this.attributeLayoutElements.size(); ++k) {\n                     final NewAttributeBands.AttributeLayoutElement el = (NewAttributeBands.AttributeLayoutElement)this.attributeLayoutElements.get(k);\n@@ -107,15 +107,15 @@\n                         call.setCallable((NewAttributeBands.Callable)el);\n                         break;\n                     }\n                 }\n             }\n         }\n         else if (layoutElement instanceof NewAttributeBands.Replication) {\n-            final List children = NewAttributeBands.Replication.access$200((NewAttributeBands.Replication)layoutElement);\n+            final List children = NewAttributeBands.Replication.access$0((NewAttributeBands.Replication)layoutElement);\n             for (final NewAttributeBands.LayoutElement object : children) {\n                 backwardsCalls += this.resolveCallsForElement(i, currentCallable, object);\n             }\n         }\n         return backwardsCalls;\n     }\n     \n@@ -165,20 +165,20 @@\n                 }\n                 return (NewAttributeBands.LayoutElement)new NewAttributeBands.Integral(this, \"OS\" + (char)stream.read());\n             }\n             case 78: {\n                 final char uint_type = (char)stream.read();\n                 stream.read();\n                 final String str = this.readUpToMatchingBracket(stream);\n-                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Replication(this, \"\" + uint_type, str);\n+                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Replication(this, new StringBuilder().append(uint_type).toString(), str);\n             }\n             case 84: {\n-                String int_type = \"\" + (char)stream.read();\n+                String int_type = new StringBuilder().append((char)stream.read()).toString();\n                 if (int_type.equals(\"S\")) {\n-                    int_type += (char)stream.read();\n+                    int_type = String.valueOf(int_type) + (char)stream.read();\n                 }\n                 final List unionCases = new ArrayList();\n                 NewAttributeBands.UnionCase c;\n                 while ((c = this.readNextUnionCase(stream)) != null) {\n                     unionCases.add(c);\n                 }\n                 stream.read();\n@@ -313,15 +313,15 @@\n             return null;\n         }\n         final char[] digits = new char[length];\n         final int read = stream.read(digits);\n         if (read != digits.length) {\n             throw new IOException(\"Error reading from the input stream\");\n         }\n-        return Integer.valueOf(Integer.parseInt((negative ? \"-\" : \"\") + new String(digits)));\n+        return Integer.valueOf(Integer.parseInt(String.valueOf(negative ? \"-\" : \"\") + new String(digits)));\n     }\n     \n     private List readBody(final StringReader stream) throws IOException {\n         final List layoutElements = new ArrayList();\n         NewAttributeBands.LayoutElement e;\n         while ((e = this.readNextLayoutElement(stream)) != null) {\n             layoutElements.add(e);\n"}]}
