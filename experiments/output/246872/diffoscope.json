{"diffoscope-json-version": 1, "source1": "first/DescendantIterator.class", "source2": "second/DescendantIterator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,40 +9,40 @@\n import net.sf.saxon.tree.iter.AxisIterator;\n \n public class DescendantIterator implements AxisIterator\n {\n     private final Queue<NodeInfo> queue;\n     private AxisIterator descendantEnum;\n     \n-    public DescendantIterator(final NodeInfo start, final DescendantIterator.StartWith startWith) {\n+    public DescendantIterator(final NodeInfo nodeInfo, final DescendantIterator.StartWith startWith) {\n         this.queue = new LinkedList<NodeInfo>();\n         if (startWith == DescendantIterator.StartWith.CURRENT_NODE) {\n-            this.descendantEnum = SingleNodeIterator.makeIterator(start);\n+            this.descendantEnum = SingleNodeIterator.makeIterator(nodeInfo);\n         }\n         else if (startWith == DescendantIterator.StartWith.CHILDREN) {\n-            this.descendantEnum = start.iterateAxis(3);\n+            this.descendantEnum = nodeInfo.iterateAxis(3);\n         }\n     }\n     \n     public NodeInfo next() {\n-        NodeInfo result = null;\n+        NodeInfo next = null;\n         do {\n             if (this.descendantEnum == null) {\n                 if (this.queue.isEmpty()) {\n                     break;\n                 }\n                 this.descendantEnum = ((NodeInfo)this.queue.poll()).iterateAxis(3);\n             }\n             else {\n-                result = this.descendantEnum.next();\n-                if (result != null) {\n+                next = this.descendantEnum.next();\n+                if (next != null) {\n                     continue;\n                 }\n                 this.descendantEnum = null;\n             }\n-        } while (result == null);\n-        if (result != null) {\n-            this.queue.add(result);\n+        } while (next == null);\n+        if (next != null) {\n+            this.queue.add(next);\n         }\n-        return result;\n+        return next;\n     }\n }\n"}]}
