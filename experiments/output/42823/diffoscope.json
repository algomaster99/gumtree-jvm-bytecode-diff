{"diffoscope-json-version": 1, "source1": "first/ConstantLookup.class", "source2": "second/ConstantLookup.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,70 +1,73 @@\n \n package org.apache.commons.configuration2.interpol;\n \n-import java.util.HashMap;\n import org.apache.commons.lang3.ClassUtils;\n import java.lang.reflect.Field;\n import org.apache.commons.logging.LogFactory;\n+import java.util.HashMap;\n import org.apache.commons.logging.Log;\n import java.util.Map;\n \n public class ConstantLookup implements Lookup\n {\n     private static final char FIELD_SEPRATOR = '.';\n     private static Map<String, Object> constantCache;\n     private final Log log;\n     \n+    static {\n+        ConstantLookup.constantCache = new HashMap<String, Object>();\n+    }\n+    \n     public ConstantLookup() {\n         this.log = LogFactory.getLog((Class)this.getClass());\n     }\n     \n     public Object lookup(final String var) {\n         if (var == null) {\n             return null;\n         }\n         Object result;\n         synchronized (ConstantLookup.constantCache) {\n             result = ConstantLookup.constantCache.get(var);\n+            monitorexit(ConstantLookup.constantCache);\n         }\n         if (result != null) {\n             return result;\n         }\n         final int fieldPos = var.lastIndexOf(46);\n         if (fieldPos < 0) {\n             return null;\n         }\n         try {\n             final Object value = this.resolveField(var.substring(0, fieldPos), var.substring(fieldPos + 1));\n             if (value != null) {\n                 synchronized (ConstantLookup.constantCache) {\n                     ConstantLookup.constantCache.put(var, value);\n+                    monitorexit(ConstantLookup.constantCache);\n                 }\n                 result = value;\n             }\n         }\n         catch (final Exception ex) {\n             this.log.warn((Object)(\"Could not obtain value for variable \" + var), (Throwable)ex);\n         }\n         return result;\n     }\n     \n     public static void clear() {\n         synchronized (ConstantLookup.constantCache) {\n             ConstantLookup.constantCache.clear();\n+            monitorexit(ConstantLookup.constantCache);\n         }\n     }\n     \n     protected Object resolveField(final String className, final String fieldName) throws Exception {\n         final Class<?> clazz = this.fetchClass(className);\n         final Field field = clazz.getField(fieldName);\n         return field.get(null);\n     }\n     \n     protected Class<?> fetchClass(final String className) throws ClassNotFoundException {\n         return ClassUtils.getClass(className);\n     }\n-    \n-    static {\n-        ConstantLookup.constantCache = new HashMap<String, Object>();\n-    }\n }\n"}]}
