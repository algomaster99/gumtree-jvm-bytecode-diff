{"diffoscope-json-version": 1, "source1": "first/UnnecessaryParenthesesCheck.class", "source2": "second/UnnecessaryParenthesesCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,14 +26,24 @@\n     private static final int[] CONDITIONAL_OPERATOR;\n     private static final int[] RELATIONAL_OPERATOR;\n     private static final int[] UNARY_AND_POSTFIX;\n     private static final int[] BITWISE_BINARY_OPERATORS;\n     private DetailAST parentToSkip;\n     private int assignDepth;\n     \n+    static {\n+        NEWLINE = Pattern.compile(\"\\\\R\");\n+        LITERALS = new int[] { 142, 140, 137, 141, 139, 135, 134, 133, 204 };\n+        ASSIGNMENTS = new int[] { 80, 106, 108, 104, 107, 101, 99, 102, 98, 105, 103, 100 };\n+        CONDITIONAL_OPERATOR = new int[] { 110, 111 };\n+        RELATIONAL_OPERATOR = new int[] { 121, 118, 117, 120, 119, 116, 115 };\n+        UNARY_AND_POSTFIX = new int[] { 31, 32, 129, 130, 132, 131, 25, 26 };\n+        BITWISE_BINARY_OPERATORS = new int[] { 113, 112, 114 };\n+    }\n+    \n     public int[] getDefaultTokens() {\n         return new int[] { 28, 58, 142, 140, 137, 141, 139, 135, 134, 133, 80, 106, 108, 104, 107, 101, 99, 102, 98, 105, 103, 100, 181, 204, 111, 110, 121, 118, 117, 120, 119, 116, 115, 31, 32, 129, 130, 132, 131, 25, 26 };\n     }\n     \n     public int[] getAcceptableTokens() {\n         return new int[] { 28, 58, 142, 140, 137, 141, 139, 135, 134, 133, 80, 106, 108, 104, 107, 101, 99, 102, 98, 105, 103, 100, 181, 204, 111, 110, 121, 118, 117, 120, 119, 116, 115, 31, 32, 129, 130, 132, 131, 25, 26, 113, 112, 114 };\n     }\n@@ -56,15 +66,15 @@\n             }\n             else if (surrounded && TokenUtil.isOfType(type, UnnecessaryParenthesesCheck.LITERALS)) {\n                 this.parentToSkip = ast.getParent();\n                 if (type == 139) {\n                     this.log(ast, \"unnecessary.paren.string\", new Object[] { chopString(ast.getText()) });\n                 }\n                 else if (type == 204) {\n-                    final String logString = \"\\\"\" + UnnecessaryParenthesesCheck.NEWLINE.matcher(ast.getFirstChild().getText()).replaceAll(\"\\\\\\\\n\");\n+                    final String logString = \"\\\"\" + UnnecessaryParenthesesCheck.NEWLINE.matcher(ast.getFirstChild().getText()).replaceAll(\"\\\\\\\\n\") + \"\\\"\";\n                     this.log(ast, \"unnecessary.paren.string\", new Object[] { chopString(logString) });\n                 }\n                 else {\n                     this.log(ast, \"unnecessary.paren.literal\", new Object[] { ast.getText() });\n                 }\n             }\n             else if (TokenUtil.isOfType(type, UnnecessaryParenthesesCheck.ASSIGNMENTS)) {\n@@ -181,22 +191,12 @@\n         }\n         return result;\n     }\n     \n     private static String chopString(final String value) {\n         String result = value;\n         if (value.length() > 25) {\n-            result = value.substring(0, 25) + \"...\\\"\";\n+            result = String.valueOf(value.substring(0, 25)) + \"...\\\"\";\n         }\n         return result;\n     }\n-    \n-    static {\n-        NEWLINE = Pattern.compile(\"\\\\R\");\n-        LITERALS = new int[] { 142, 140, 137, 141, 139, 135, 134, 133, 204 };\n-        ASSIGNMENTS = new int[] { 80, 106, 108, 104, 107, 101, 99, 102, 98, 105, 103, 100 };\n-        CONDITIONAL_OPERATOR = new int[] { 110, 111 };\n-        RELATIONAL_OPERATOR = new int[] { 121, 118, 117, 120, 119, 116, 115 };\n-        UNARY_AND_POSTFIX = new int[] { 31, 32, 129, 130, 132, 131, 25, 26 };\n-        BITWISE_BINARY_OPERATORS = new int[] { 113, 112, 114 };\n-    }\n }\n"}]}
