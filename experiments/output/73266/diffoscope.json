{"diffoscope-json-version": 1, "source1": "first/IcTuple.class", "source2": "second/IcTuple.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,41 +26,48 @@\n     private boolean outerIsAnonymous;\n     private boolean member;\n     private int cachedOuterClassIndex;\n     private int cachedSimpleClassNameIndex;\n     private boolean hashCodeComputed;\n     private int cachedHashCode;\n     \n+    static {\n+        EMPTY_STRING_ARRAY = new String[0];\n+        EMPTY_ARRAY = new IcTuple[0];\n+    }\n+    \n     public IcTuple(final String C, final int F, final String C2, final String N, final int cIndex, final int c2Index, final int nIndex, final int tIndex) {\n         this.member = true;\n         this.cachedOuterClassIndex = -1;\n         this.cachedSimpleClassNameIndex = -1;\n         this.C = C;\n         this.F = F;\n         this.C2 = C2;\n         this.N = N;\n         this.cIndex = cIndex;\n         this.c2Index = c2Index;\n         this.nIndex = nIndex;\n         this.tIndex = tIndex;\n-        if (null == N) {\n+        if (N == null) {\n             this.predictSimple = true;\n         }\n-        if (null == C2) {\n+        if (C2 == null) {\n             this.predictOuter = true;\n         }\n         this.initializeClassStrings();\n     }\n     \n     private boolean computeOuterIsAnonymous() {\n         final String[] result = this.innerBreakAtDollar(this.cachedOuterClassString);\n         if (result.length == 0) {\n             throw new Error(\"Should have an outer before checking if it's anonymous\");\n         }\n-        for (final String element : result) {\n+        String[] array;\n+        for (int length = (array = result).length, i = 0; i < length; ++i) {\n+            final String element = array[i];\n             if (this.isAllDigits(element)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n@@ -123,29 +130,29 @@\n         if (!this.predictSimple) {\n             this.cachedSimpleClassName = this.N;\n         }\n         if (!this.predictOuter) {\n             this.cachedOuterClassString = this.C2;\n         }\n         final String[] nameComponents = this.innerBreakAtDollar(this.C);\n-        if (nameComponents.length == 0) {}\n-        if (nameComponents.length == 1) {}\n+        final int length = nameComponents.length;\n+        final int length2 = nameComponents.length;\n         if (nameComponents.length < 2) {\n             return;\n         }\n         final int lastPosition = nameComponents.length - 1;\n         this.cachedSimpleClassName = nameComponents[lastPosition];\n         this.cachedOuterClassString = \"\";\n         for (int index = 0; index < lastPosition; ++index) {\n-            this.cachedOuterClassString += nameComponents[index];\n+            this.cachedOuterClassString = String.valueOf(this.cachedOuterClassString) + nameComponents[index];\n             if (this.isAllDigits(nameComponents[index])) {\n                 this.member = false;\n             }\n             if (index + 1 != lastPosition) {\n-                this.cachedOuterClassString += '$';\n+                this.cachedOuterClassString = String.valueOf(this.cachedOuterClassString) + '$';\n             }\n         }\n         if (!this.predictSimple) {\n             this.cachedSimpleClassName = this.N;\n             this.cachedSimpleClassNameIndex = this.nIndex;\n         }\n         if (!this.predictOuter) {\n@@ -175,15 +182,15 @@\n                 resultList.add(className.substring(start));\n             }\n         }\n         return resultList.toArray(IcTuple.EMPTY_STRING_ARRAY);\n     }\n     \n     private boolean isAllDigits(final String nameString) {\n-        if (null == nameString) {\n+        if (nameString == null) {\n             return false;\n         }\n         for (int index = 0; index < nameString.length(); ++index) {\n             if (!Character.isDigit(nameString.charAt(index))) {\n                 return false;\n             }\n         }\n@@ -199,16 +206,16 @@\n     }\n     \n     public boolean nestedExplicitFlagSet() {\n         return (this.F & 0x10000) == 0x10000;\n     }\n     \n     public boolean nullSafeEquals(final String stringOne, final String stringTwo) {\n-        if (null == stringOne) {\n-            return null == stringTwo;\n+        if (stringOne == null) {\n+            return stringTwo == null;\n         }\n         return stringOne.equals(stringTwo);\n     }\n     \n     public int outerClassIndex() {\n         return this.cachedOuterClassIndex;\n     }\n@@ -240,27 +247,22 @@\n         return -1;\n     }\n     \n     public String thisClassString() {\n         if (this.predicted()) {\n             return this.C;\n         }\n-        return this.C2 + \"$\" + this.N;\n+        return String.valueOf(this.C2) + \"$\" + this.N;\n     }\n     \n     @Override\n     public String toString() {\n         final StringBuilder result = new StringBuilder();\n         result.append(\"IcTuple \");\n         result.append('(');\n         result.append(this.simpleClassName());\n         result.append(\" in \");\n         result.append(this.outerClassString());\n         result.append(')');\n         return result.toString();\n     }\n-    \n-    static {\n-        EMPTY_STRING_ARRAY = new String[0];\n-        EMPTY_ARRAY = new IcTuple[0];\n-    }\n }\n"}]}
