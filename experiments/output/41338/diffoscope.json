{"diffoscope-json-version": 1, "source1": "first/Expander.class", "source2": "second/Expander.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -51,16 +51,37 @@\n                 if (!nullTarget && !Files.isDirectory(parent, new LinkOption[0]) && Files.createDirectories(parent, (FileAttribute<?>[])new FileAttribute[0]) == null) {\n                     throw new IOException(\"Failed to create directory \" + parent);\n                 }\n                 if (nullTarget) {\n                     writer.accept((ArchiveEntry)nextEntry, (OutputStream)null);\n                 }\n                 else {\n-                    try (final OutputStream outputStream = Files.newOutputStream(targetPath, new OpenOption[0])) {\n-                        writer.accept((ArchiveEntry)nextEntry, outputStream);\n+                    Throwable t = null;\n+                    try {\n+                        final OutputStream outputStream = Files.newOutputStream(targetPath, new OpenOption[0]);\n+                        try {\n+                            writer.accept((ArchiveEntry)nextEntry, outputStream);\n+                        }\n+                        finally {\n+                            if (outputStream != null) {\n+                                outputStream.close();\n+                            }\n+                        }\n+                    }\n+                    finally {\n+                        if (t == null) {\n+                            final Throwable exception;\n+                            t = exception;\n+                        }\n+                        else {\n+                            final Throwable exception;\n+                            if (t != exception) {\n+                                t.addSuppressed(exception);\n+                            }\n+                        }\n                     }\n                 }\n             }\n         }\n     }\n     \n     public void expand(final ArchiveInputStream archive, final File targetDirectory) throws IOException {\n@@ -81,23 +102,65 @@\n     \n     @Deprecated\n     public void expand(final InputStream archive, final File targetDirectory) throws IOException, ArchiveException {\n         this.expand(archive, targetDirectory, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n     public void expand(final InputStream archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n-            this.expand((ArchiveInputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveInputStream(archive)), targetDirectory);\n+        Throwable t = null;\n+        try {\n+            final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n+            try {\n+                this.expand((ArchiveInputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveInputStream(archive)), targetDirectory);\n+            }\n+            finally {\n+                if (c != null) {\n+                    c.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public void expand(final Path archive, final Path targetDirectory) throws IOException, ArchiveException {\n         String format = null;\n-        try (final InputStream inputStream = new BufferedInputStream(Files.newInputStream(archive, new OpenOption[0]))) {\n-            format = ArchiveStreamFactory.detect(inputStream);\n+        Throwable t = null;\n+        try {\n+            final InputStream inputStream = new BufferedInputStream(Files.newInputStream(archive, new OpenOption[0]));\n+            try {\n+                format = ArchiveStreamFactory.detect(inputStream);\n+            }\n+            finally {\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n         this.expand(format, archive, targetDirectory);\n     }\n     \n     public void expand(final SevenZFile archive, final File targetDirectory) throws IOException {\n         this.expand(archive, this.toPath(targetDirectory));\n     }\n@@ -124,69 +187,174 @@\n     }\n     \n     public void expand(final String format, final InputStream archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n         this.expand(format, archive, this.toPath(targetDirectory), closeableConsumer);\n     }\n     \n     public void expand(final String format, final InputStream archive, final Path targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n-            this.expand((ArchiveInputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveInputStream(format, archive)), targetDirectory);\n+        Throwable t = null;\n+        try {\n+            final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n+            try {\n+                this.expand((ArchiveInputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveInputStream(format, archive)), targetDirectory);\n+            }\n+            finally {\n+                if (c != null) {\n+                    c.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public void expand(final String format, final Path archive, final Path targetDirectory) throws IOException, ArchiveException {\n         if (this.prefersSeekableByteChannel(format)) {\n-            try (final SeekableByteChannel channel = FileChannel.open(archive, StandardOpenOption.READ)) {\n-                this.expand(format, channel, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);\n+            Throwable t = null;\n+            try {\n+                final SeekableByteChannel channel = FileChannel.open(archive, StandardOpenOption.READ);\n+                try {\n+                    this.expand(format, channel, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);\n+                }\n+                finally {\n+                    if (channel != null) {\n+                        channel.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n             }\n             return;\n         }\n-        try (final InputStream inputStream = new BufferedInputStream(Files.newInputStream(archive, new OpenOption[0]))) {\n-            this.expand(format, inputStream, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);\n+        Throwable t2 = null;\n+        try {\n+            final InputStream inputStream = new BufferedInputStream(Files.newInputStream(archive, new OpenOption[0]));\n+            try {\n+                this.expand(format, inputStream, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);\n+            }\n+            finally {\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t2 == null) {\n+                final Throwable exception2;\n+                t2 = exception2;\n+            }\n+            else {\n+                final Throwable exception2;\n+                if (t2 != exception2) {\n+                    t2.addSuppressed(exception2);\n+                }\n+            }\n         }\n     }\n     \n     @Deprecated\n     public void expand(final String format, final SeekableByteChannel archive, final File targetDirectory) throws IOException, ArchiveException {\n         this.expand(format, archive, targetDirectory, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n     public void expand(final String format, final SeekableByteChannel archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n         this.expand(format, archive, this.toPath(targetDirectory), closeableConsumer);\n     }\n     \n     public void expand(final String format, final SeekableByteChannel archive, final Path targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n-            if (!this.prefersSeekableByteChannel(format)) {\n-                this.expand(format, (InputStream)c.track((Closeable)Channels.newInputStream(archive)), targetDirectory, CloseableConsumer.NULL_CONSUMER);\n+        Throwable t = null;\n+        try {\n+            final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n+            try {\n+                if (!this.prefersSeekableByteChannel(format)) {\n+                    this.expand(format, (InputStream)c.track((Closeable)Channels.newInputStream(archive)), targetDirectory, CloseableConsumer.NULL_CONSUMER);\n+                }\n+                else if (\"tar\".equalsIgnoreCase(format)) {\n+                    this.expand((TarFile)c.track((Closeable)new TarFile(archive)), targetDirectory);\n+                }\n+                else if (\"zip\".equalsIgnoreCase(format)) {\n+                    this.expand((ZipFile)c.track((Closeable)new ZipFile(archive)), targetDirectory);\n+                }\n+                else {\n+                    if (!\"7z\".equalsIgnoreCase(format)) {\n+                        throw new ArchiveException(\"Don't know how to handle format \" + format);\n+                    }\n+                    this.expand((SevenZFile)c.track((Closeable)new SevenZFile(archive)), targetDirectory);\n+                }\n             }\n-            else if (\"tar\".equalsIgnoreCase(format)) {\n-                this.expand((TarFile)c.track((Closeable)new TarFile(archive)), targetDirectory);\n+            finally {\n+                if (c != null) {\n+                    c.close();\n+                }\n             }\n-            else if (\"zip\".equalsIgnoreCase(format)) {\n-                this.expand((ZipFile)c.track((Closeable)new ZipFile(archive)), targetDirectory);\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n             }\n             else {\n-                if (!\"7z\".equalsIgnoreCase(format)) {\n-                    throw new ArchiveException(\"Don't know how to handle format \" + format);\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n                 }\n-                this.expand((SevenZFile)c.track((Closeable)new SevenZFile(archive)), targetDirectory);\n             }\n         }\n     }\n     \n     public void expand(final TarFile archive, final File targetDirectory) throws IOException {\n         this.expand(archive, this.toPath(targetDirectory));\n     }\n     \n     public void expand(final TarFile archive, final Path targetDirectory) throws IOException {\n         final Iterator<TarArchiveEntry> entryIterator = archive.getEntries().iterator();\n         this.expand((Expander.ArchiveEntrySupplier<ArchiveEntry>)(() -> entryIterator.hasNext() ? ((TarArchiveEntry)entryIterator.next()) : null), (Expander.ArchiveEntryBiConsumer<ArchiveEntry>)((entry, out) -> {\n-            try (final InputStream in = archive.getInputStream(entry)) {\n-                IOUtils.copy(in, out);\n+            Throwable t = null;\n+            try {\n+                final InputStream in = archive.getInputStream(entry);\n+                try {\n+                    IOUtils.copy(in, out);\n+                }\n+                finally {\n+                    if (in != null) {\n+                        in.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n             }\n         }), targetDirectory);\n     }\n     \n     public void expand(final ZipFile archive, final File targetDirectory) throws IOException {\n         this.expand(archive, this.toPath(targetDirectory));\n     }\n@@ -194,16 +362,37 @@\n     public void expand(final ZipFile archive, final Path targetDirectory) throws IOException {\n         final Enumeration<ZipArchiveEntry> entries = archive.getEntries();\n         this.expand((Expander.ArchiveEntrySupplier<ArchiveEntry>)(() -> {\n             ZipArchiveEntry next;\n             for (next = (entries.hasMoreElements() ? ((ZipArchiveEntry)entries.nextElement()) : null); next != null && !archive.canReadEntryData(next); next = (entries.hasMoreElements() ? ((ZipArchiveEntry)entries.nextElement()) : null)) {}\n             return next;\n         }), (Expander.ArchiveEntryBiConsumer<ArchiveEntry>)((entry, out) -> {\n-            try (final InputStream in = archive.getInputStream(entry)) {\n-                IOUtils.copy(in, out);\n+            Throwable t = null;\n+            try {\n+                final InputStream in = archive.getInputStream(entry);\n+                try {\n+                    IOUtils.copy(in, out);\n+                }\n+                finally {\n+                    if (in != null) {\n+                        in.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n             }\n         }), targetDirectory);\n     }\n     \n     private boolean prefersSeekableByteChannel(final String format) {\n         return \"tar\".equalsIgnoreCase(format) || \"zip\".equalsIgnoreCase(format) || \"7z\".equalsIgnoreCase(format);\n     }\n"}]}
