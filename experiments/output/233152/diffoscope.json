{"diffoscope-json-version": 1, "source1": "first/HierarchicalConfigurationXMLReader$SAXVisitor.class", "source2": "second/HierarchicalConfigurationXMLReader$SAXVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,39 +11,39 @@\n {\n     private static final String ATTR_TYPE = \"CDATA\";\n     \n     private SAXVisitor(final HierarchicalConfigurationXMLReader this$0) {\n         this.this$0 = this$0;\n     }\n     \n-    public void visitAfterChildren(final Object node, final NodeHandler handler) {\n-        this.this$0.fireElementEnd(this.nodeName(node, handler));\n+    public void visitAfterChildren(final Object o, final NodeHandler nodeHandler) {\n+        this.this$0.fireElementEnd(this.nodeName(o, nodeHandler));\n     }\n     \n-    public void visitBeforeChildren(final Object node, final NodeHandler handler) {\n-        this.this$0.fireElementStart(this.nodeName(node, handler), this.fetchAttributes(node, handler));\n-        final Object value = handler.getValue(node);\n+    public void visitBeforeChildren(final Object o, final NodeHandler nodeHandler) {\n+        this.this$0.fireElementStart(this.nodeName(o, nodeHandler), this.fetchAttributes(o, nodeHandler));\n+        final Object value = nodeHandler.getValue(o);\n         if (value != null) {\n             this.this$0.fireCharacters(value.toString());\n         }\n     }\n     \n     public boolean terminate() {\n         return this.this$0.getException() != null;\n     }\n     \n-    protected Attributes fetchAttributes(final Object node, final NodeHandler handler) {\n-        final AttributesImpl attrs = new AttributesImpl();\n-        for (final String attr : handler.getAttributes(node)) {\n-            final Object value = handler.getAttributeValue(node, attr);\n-            if (value != null) {\n-                attrs.addAttribute(\"\", attr, attr, \"CDATA\", value.toString());\n+    protected Attributes fetchAttributes(final Object o, final NodeHandler nodeHandler) {\n+        final AttributesImpl attributesImpl = new AttributesImpl();\n+        for (final String s : nodeHandler.getAttributes(o)) {\n+            final Object attributeValue = nodeHandler.getAttributeValue(o, s);\n+            if (attributeValue != null) {\n+                attributesImpl.addAttribute(\"\", s, s, \"CDATA\", attributeValue.toString());\n             }\n         }\n-        return attrs;\n+        return attributesImpl;\n     }\n     \n-    private String nodeName(final Object node, final NodeHandler handler) {\n-        final String nodeName = handler.nodeName(node);\n+    private String nodeName(final Object o, final NodeHandler nodeHandler) {\n+        final String nodeName = nodeHandler.nodeName(o);\n         return (nodeName == null) ? this.this$0.getRootName() : nodeName;\n     }\n }\n"}]}
