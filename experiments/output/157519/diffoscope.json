{"diffoscope-json-version": 1, "source1": "first/UTF8StreamJsonParser.class", "source2": "second/UTF8StreamJsonParser.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,24 +1,24 @@\n \n package com.fasterxml.jackson.core.json;\n \n import com.fasterxml.jackson.core.JsonLocation;\n import com.fasterxml.jackson.core.JsonParseException;\n-import com.fasterxml.jackson.core.io.CharTypes;\n import com.fasterxml.jackson.core.SerializableString;\n import com.fasterxml.jackson.core.util.ByteArrayBuilder;\n import com.fasterxml.jackson.core.Base64Variant;\n import java.io.Writer;\n import com.fasterxml.jackson.core.JsonToken;\n-import com.fasterxml.jackson.core.JsonParser;\n import java.io.IOException;\n import java.io.OutputStream;\n import com.fasterxml.jackson.core.StreamReadCapability;\n import com.fasterxml.jackson.core.util.JacksonFeatureSet;\n import com.fasterxml.jackson.core.io.IOContext;\n+import com.fasterxml.jackson.core.io.CharTypes;\n+import com.fasterxml.jackson.core.JsonParser;\n import java.io.InputStream;\n import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;\n import com.fasterxml.jackson.core.ObjectCodec;\n import com.fasterxml.jackson.core.base.ParserBase;\n \n public class UTF8StreamJsonParser extends ParserBase\n {\n@@ -41,14 +41,27 @@\n     protected int _nameStartOffset;\n     protected int _nameStartRow;\n     protected int _nameStartCol;\n     protected InputStream _inputStream;\n     protected byte[] _inputBuffer;\n     protected boolean _bufferRecyclable;\n     \n+    static {\n+        FEAT_MASK_TRAILING_COMMA = JsonParser.Feature.ALLOW_TRAILING_COMMA.getMask();\n+        FEAT_MASK_LEADING_ZEROS = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS.getMask();\n+        FEAT_MASK_NON_NUM_NUMBERS = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS.getMask();\n+        FEAT_MASK_ALLOW_MISSING = JsonParser.Feature.ALLOW_MISSING_VALUES.getMask();\n+        FEAT_MASK_ALLOW_SINGLE_QUOTES = JsonParser.Feature.ALLOW_SINGLE_QUOTES.getMask();\n+        FEAT_MASK_ALLOW_UNQUOTED_NAMES = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES.getMask();\n+        FEAT_MASK_ALLOW_JAVA_COMMENTS = JsonParser.Feature.ALLOW_COMMENTS.getMask();\n+        FEAT_MASK_ALLOW_YAML_COMMENTS = JsonParser.Feature.ALLOW_YAML_COMMENTS.getMask();\n+        _icUTF8 = CharTypes.getInputCodeUtf8();\n+        _icLatin1 = CharTypes.getInputCodeLatin1();\n+    }\n+    \n     @Deprecated\n     public UTF8StreamJsonParser(final IOContext ctxt, final int features, final InputStream in, final ObjectCodec codec, final ByteQuadsCanonicalizer sym, final byte[] inputBuffer, final int start, final int end, final boolean bufferRecyclable) {\n         this(ctxt, features, in, codec, sym, inputBuffer, start, end, 0, bufferRecyclable);\n     }\n     \n     public UTF8StreamJsonParser(final IOContext ctxt, final int features, final InputStream in, final ObjectCodec codec, final ByteQuadsCanonicalizer sym, final byte[] inputBuffer, final int start, final int end, final int bytesPreProcessed, final boolean bufferRecyclable) {\n         super(ctxt, features);\n@@ -2118,38 +2131,37 @@\n                     this._inputPtr = ptr;\n                     if (c == 34) {\n                         break Block_4;\n                     }\n                     switch (codes[c]) {\n                         case 1: {\n                             this._decodeEscaped();\n-                            break;\n+                            continue Block_4;\n                         }\n                         case 2: {\n                             this._skipUtf8_2();\n-                            break;\n+                            continue Block_4;\n                         }\n                         case 3: {\n                             this._skipUtf8_3();\n-                            break;\n+                            continue Block_4;\n                         }\n                         case 4: {\n                             this._skipUtf8_4(c);\n-                            break;\n+                            continue Block_4;\n                         }\n                         default: {\n                             if (c < 32) {\n                                 this._throwUnquotedSpace(c, \"string value\");\n-                                break;\n+                                continue Block_4;\n                             }\n                             this._reportInvalidChar(c);\n-                            break;\n+                            continue Block_4;\n                         }\n                     }\n-                    continue Block_4;\n                 }\n             }\n             this._inputPtr = ptr;\n         }\n     }\n     \n     protected JsonToken _handleUnexpectedValue(final int c) throws IOException {\n@@ -2194,27 +2206,27 @@\n                 if (this._inputPtr >= this._inputEnd && !this._loadMore()) {\n                     this._reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_INT);\n                 }\n                 return this._handleInvalidNumberStart(this._inputBuffer[this._inputPtr++] & 0xFF, false, true);\n             }\n         }\n         if (Character.isJavaIdentifierStart(c)) {\n-            this._reportInvalidToken(\"\" + (char)c, this._validJsonTokenList());\n+            this._reportInvalidToken(new StringBuilder().append((char)c).toString(), this._validJsonTokenList());\n         }\n         this._reportUnexpectedChar(c, \"expected a valid value \" + this._validJsonValueList());\n         return null;\n     }\n     \n     protected JsonToken _handleApos() throws IOException {\n         int c = 0;\n         int outPtr = 0;\n         char[] outBuf = this._textBuffer.emptyAndGetCurrentSegment();\n         final int[] codes = UTF8StreamJsonParser._icUTF8;\n         final byte[] inputBuffer = this._inputBuffer;\n-    Block_5:\n+    Block_4:\n         while (true) {\n             if (this._inputPtr >= this._inputEnd) {\n                 this._loadMoreGuaranteed();\n             }\n             if (outPtr >= outBuf.length) {\n                 outBuf = this._textBuffer.finishCurrentSegment();\n                 outPtr = 0;\n@@ -2223,15 +2235,15 @@\n             final int max2 = this._inputPtr + (outBuf.length - outPtr);\n             if (max2 < max) {\n                 max = max2;\n             }\n             while (this._inputPtr < max) {\n                 c = (inputBuffer[this._inputPtr++] & 0xFF);\n                 if (c == 39) {\n-                    break Block_5;\n+                    break Block_4;\n                 }\n                 if (codes[c] != 0 && c != 34) {\n                     switch (codes[c]) {\n                         case 1: {\n                             c = this._decodeEscaped();\n                             break;\n                         }\n@@ -2674,23 +2686,23 @@\n         else {\n             this._reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");\n         }\n     }\n     \n     private final void _skipCComment() throws IOException {\n         final int[] codes = CharTypes.getInputCodeComment();\n-    Label_0216:\n+    Label_0215:\n         while (this._inputPtr < this._inputEnd || this._loadMore()) {\n             final int i = this._inputBuffer[this._inputPtr++] & 0xFF;\n             final int code = codes[i];\n             if (code != 0) {\n                 switch (code) {\n                     case 42: {\n                         if (this._inputPtr >= this._inputEnd && !this._loadMore()) {\n-                            break Label_0216;\n+                            break Label_0215;\n                         }\n                         if (this._inputBuffer[this._inputPtr] == 47) {\n                             ++this._inputPtr;\n                             return;\n                         }\n                         continue;\n                     }\n@@ -3189,21 +3201,8 @@\n     private final void _closeObjectScope() throws JsonParseException {\n         this._updateLocation();\n         if (!this._parsingContext.inObject()) {\n             this._reportMismatchedEndMarker(125, ']');\n         }\n         this._parsingContext = this._parsingContext.clearAndGetParent();\n     }\n-    \n-    static {\n-        FEAT_MASK_TRAILING_COMMA = JsonParser.Feature.ALLOW_TRAILING_COMMA.getMask();\n-        FEAT_MASK_LEADING_ZEROS = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS.getMask();\n-        FEAT_MASK_NON_NUM_NUMBERS = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS.getMask();\n-        FEAT_MASK_ALLOW_MISSING = JsonParser.Feature.ALLOW_MISSING_VALUES.getMask();\n-        FEAT_MASK_ALLOW_SINGLE_QUOTES = JsonParser.Feature.ALLOW_SINGLE_QUOTES.getMask();\n-        FEAT_MASK_ALLOW_UNQUOTED_NAMES = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES.getMask();\n-        FEAT_MASK_ALLOW_JAVA_COMMENTS = JsonParser.Feature.ALLOW_COMMENTS.getMask();\n-        FEAT_MASK_ALLOW_YAML_COMMENTS = JsonParser.Feature.ALLOW_YAML_COMMENTS.getMask();\n-        _icUTF8 = CharTypes.getInputCodeUtf8();\n-        _icLatin1 = CharTypes.getInputCodeLatin1();\n-    }\n }\n"}]}
