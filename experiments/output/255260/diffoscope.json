{"diffoscope-json-version": 1, "source1": "first/ChangeSet.class", "source2": "second/ChangeSet.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,75 +12,71 @@\n {\n     private final Set<Change> changes;\n     \n     public ChangeSet() {\n         this.changes = new LinkedHashSet<Change>();\n     }\n     \n-    public void delete(final String fileName) {\n-        this.addDeletion(new Change(fileName, 1));\n+    public void delete(final String s) {\n+        this.addDeletion(new Change(s, 1));\n     }\n     \n-    public void deleteDir(final String dirName) {\n-        this.addDeletion(new Change(dirName, 4));\n+    public void deleteDir(final String s) {\n+        this.addDeletion(new Change(s, 4));\n     }\n     \n-    public void add(final ArchiveEntry pEntry, final InputStream pInput) {\n-        this.add(pEntry, pInput, true);\n+    public void add(final ArchiveEntry archiveEntry, final InputStream inputStream) {\n+        this.add(archiveEntry, inputStream, true);\n     }\n     \n-    public void add(final ArchiveEntry pEntry, final InputStream pInput, final boolean replace) {\n-        this.addAddition(new Change(pEntry, pInput, replace));\n+    public void add(final ArchiveEntry archiveEntry, final InputStream inputStream, final boolean b) {\n+        this.addAddition(new Change(archiveEntry, inputStream, b));\n     }\n     \n-    private void addAddition(final Change pChange) {\n-        if (2 != pChange.type() || pChange.getInput() == null) {\n+    private void addAddition(final Change change) {\n+        if (2 != change.type() || change.getInput() == null) {\n             return;\n         }\n         if (!this.changes.isEmpty()) {\n-            final Iterator<Change> it = this.changes.iterator();\n-            while (it.hasNext()) {\n-                final Change change = (Change)it.next();\n-                if (change.type() == 2 && change.getEntry() != null) {\n-                    final ArchiveEntry entry = change.getEntry();\n-                    if (!entry.equals(pChange.getEntry())) {\n-                        continue;\n-                    }\n-                    if (pChange.isReplaceMode()) {\n-                        it.remove();\n-                        this.changes.add(pChange);\n+            final Iterator<Change> iterator = this.changes.iterator();\n+            while (iterator.hasNext()) {\n+                final Change change2 = (Change)iterator.next();\n+                if (change2.type() == 2 && change2.getEntry() != null && change2.getEntry().equals(change.getEntry())) {\n+                    if (change.isReplaceMode()) {\n+                        iterator.remove();\n+                        this.changes.add(change);\n                     }\n                     return;\n                 }\n             }\n         }\n-        this.changes.add(pChange);\n+        this.changes.add(change);\n     }\n     \n-    private void addDeletion(final Change pChange) {\n-        if ((1 != pChange.type() && 4 != pChange.type()) || pChange.targetFile() == null) {\n+    private void addDeletion(final Change change) {\n+        if ((1 != change.type() && 4 != change.type()) || change.targetFile() == null) {\n             return;\n         }\n-        final String source = pChange.targetFile();\n-        if (source != null && !this.changes.isEmpty()) {\n-            final Iterator<Change> it = this.changes.iterator();\n-            while (it.hasNext()) {\n-                final Change change = (Change)it.next();\n-                if (change.type() == 2 && change.getEntry() != null) {\n-                    final String target = change.getEntry().getName();\n-                    if (target == null) {\n+        final String targetFile = change.targetFile();\n+        if (targetFile != null && !this.changes.isEmpty()) {\n+            final Iterator<Change> iterator = this.changes.iterator();\n+            while (iterator.hasNext()) {\n+                final Change change2 = (Change)iterator.next();\n+                if (change2.type() == 2 && change2.getEntry() != null) {\n+                    final String name = change2.getEntry().getName();\n+                    if (name == null) {\n                         continue;\n                     }\n-                    if ((1 != pChange.type() || !source.equals(target)) && (4 != pChange.type() || !target.matches(source + \"/.*\"))) {\n+                    if ((1 != change.type() || !targetFile.equals(name)) && (4 != change.type() || !name.matches(targetFile + \"/.*\"))) {\n                         continue;\n                     }\n-                    it.remove();\n+                    iterator.remove();\n                 }\n             }\n         }\n-        this.changes.add(pChange);\n+        this.changes.add(change);\n     }\n     \n     Set<Change> getChanges() {\n         return new LinkedHashSet<Change>(this.changes);\n     }\n }\n"}]}
