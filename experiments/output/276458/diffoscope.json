{"diffoscope-json-version": 1, "source1": "first/ModifierOrderCheck.class", "source2": "second/ModifierOrderCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -23,88 +23,83 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 5 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final List<DetailAST> mods = new ArrayList<DetailAST>();\n-        for (DetailAST modifier = ast.getFirstChild(); modifier != null; modifier = modifier.getNextSibling()) {\n-            mods.add(modifier);\n+    public void visitToken(final DetailAST detailAST) {\n+        final ArrayList list = new ArrayList();\n+        for (DetailAST detailAST2 = detailAST.getFirstChild(); detailAST2 != null; detailAST2 = detailAST2.getNextSibling()) {\n+            list.add(detailAST2);\n         }\n-        if (!mods.isEmpty()) {\n-            final DetailAST error = checkOrderSuggestedByJls(mods);\n-            if (error != null) {\n-                if (error.getType() == 159) {\n-                    this.log(error, \"annotation.order\", new Object[] { error.getFirstChild().getText() + error.getFirstChild().getNextSibling().getText() });\n+        if (!list.isEmpty()) {\n+            final DetailAST checkOrderSuggestedByJls = checkOrderSuggestedByJls(list);\n+            if (checkOrderSuggestedByJls != null) {\n+                if (checkOrderSuggestedByJls.getType() == 159) {\n+                    this.log(checkOrderSuggestedByJls, \"annotation.order\", new Object[] { checkOrderSuggestedByJls.getFirstChild().getText() + checkOrderSuggestedByJls.getFirstChild().getNextSibling().getText() });\n                 }\n                 else {\n-                    this.log(error, \"mod.order\", new Object[] { error.getText() });\n+                    this.log(checkOrderSuggestedByJls, \"mod.order\", new Object[] { checkOrderSuggestedByJls.getText() });\n                 }\n             }\n         }\n     }\n     \n-    private static DetailAST checkOrderSuggestedByJls(final List<DetailAST> modifiers) {\n-        final Iterator<DetailAST> iterator = modifiers.iterator();\n-        DetailAST modifier = skipAnnotations(iterator);\n-        DetailAST offendingModifier = null;\n-        if (modifier.getType() != 159) {\n-            int index = 0;\n-            while (modifier != null && offendingModifier == null) {\n-                if (modifier.getType() == 159) {\n-                    if (!isAnnotationOnType(modifier)) {\n-                        offendingModifier = modifier;\n+    private static DetailAST checkOrderSuggestedByJls(final List<DetailAST> list) {\n+        final Iterator<DetailAST> iterator = list.iterator();\n+        DetailAST skipAnnotations = skipAnnotations(iterator);\n+        DetailAST detailAST = null;\n+        if (skipAnnotations.getType() != 159) {\n+            int n = 0;\n+            while (skipAnnotations != null && detailAST == null) {\n+                if (skipAnnotations.getType() == 159) {\n+                    if (!isAnnotationOnType(skipAnnotations)) {\n+                        detailAST = skipAnnotations;\n                         break;\n                     }\n                     break;\n                 }\n                 else {\n-                    while (index < ModifierOrderCheck.JLS_ORDER.length && !ModifierOrderCheck.JLS_ORDER[index].equals(modifier.getText())) {\n-                        ++index;\n+                    while (n < ModifierOrderCheck.JLS_ORDER.length && !ModifierOrderCheck.JLS_ORDER[n].equals(skipAnnotations.getText())) {\n+                        ++n;\n                     }\n-                    if (index == ModifierOrderCheck.JLS_ORDER.length) {\n-                        offendingModifier = modifier;\n+                    if (n == ModifierOrderCheck.JLS_ORDER.length) {\n+                        detailAST = skipAnnotations;\n                     }\n                     else if (iterator.hasNext()) {\n-                        modifier = iterator.next();\n+                        skipAnnotations = iterator.next();\n                     }\n                     else {\n-                        modifier = null;\n+                        skipAnnotations = null;\n                     }\n                 }\n             }\n         }\n-        return offendingModifier;\n+        return detailAST;\n     }\n     \n-    private static DetailAST skipAnnotations(final Iterator<DetailAST> modifierIterator) {\n-        DetailAST modifier;\n+    private static DetailAST skipAnnotations(final Iterator<DetailAST> iterator) {\n+        DetailAST detailAST;\n         do {\n-            modifier = modifierIterator.next();\n-        } while (modifierIterator.hasNext() && modifier.getType() == 159);\n-        return modifier;\n+            detailAST = iterator.next();\n+        } while (iterator.hasNext() && detailAST.getType() == 159);\n+        return detailAST;\n     }\n     \n-    private static boolean isAnnotationOnType(final DetailAST modifier) {\n-        boolean annotationOnType = false;\n-        final DetailAST modifiers = modifier.getParent();\n-        final DetailAST definition = modifiers.getParent();\n-        final int definitionType = definition.getType();\n-        if (definitionType == 10 || definitionType == 21 || definitionType == 8) {\n-            annotationOnType = true;\n+    private static boolean isAnnotationOnType(final DetailAST detailAST) {\n+        boolean b = false;\n+        final DetailAST parent = detailAST.getParent().getParent();\n+        final int type = parent.getType();\n+        if (type == 10 || type == 21 || type == 8) {\n+            b = true;\n         }\n-        else if (definitionType == 9) {\n-            final DetailAST typeToken = definition.findFirstToken(13);\n-            final int methodReturnType = typeToken.getLastChild().getType();\n-            if (methodReturnType != 49) {\n-                annotationOnType = true;\n-            }\n+        else if (type == 9 && parent.findFirstToken(13).getLastChild().getType() != 49) {\n+            b = true;\n         }\n-        return annotationOnType;\n+        return b;\n     }\n     \n     static {\n         JLS_ORDER = new String[] { \"public\", \"protected\", \"private\", \"abstract\", \"default\", \"static\", \"sealed\", \"non-sealed\", \"final\", \"transient\", \"volatile\", \"synchronized\", \"native\", \"strictfp\" };\n     }\n }\n"}]}
