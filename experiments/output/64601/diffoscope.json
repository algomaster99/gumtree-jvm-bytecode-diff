{"diffoscope-json-version": 1, "source1": "first/LZMACompressorInputStream.class", "source2": "second/LZMACompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,198 +1,199 @@\n-  SHA-256 checksum 76f92b951cff8fc617481b97769beeee46b7da3e633bdb44226c3ecffa69d6aa\n+  SHA-256 checksum d94a504e89b4b3f28094dcd05d95ac1b281f33aa8b1ae2029ed66a54be3e7153\n   Compiled from \"LZMACompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream\n   minor version: 0\n-  major version: 53\n+  major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #16                         // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n-  super_class: #17                        // org/apache/commons/compress/compressors/CompressorInputStream\n+  this_class: #1                          // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n+  super_class: #3                         // org/apache/commons/compress/compressors/CompressorInputStream\n   interfaces: 0, fields: 1, methods: 8, attributes: 1\n Constant pool:\n-   #1 = Methodref          #17.#58        // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-   #2 = Class              #59            // org/tukaani/xz/LZMAInputStream\n-   #3 = Methodref          #2.#60         // org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-   #4 = Fieldref           #16.#61        // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.in:Ljava/io/InputStream;\n-   #5 = Class              #62            // org/tukaani/xz/MemoryLimitException\n-   #6 = Class              #63            // org/apache/commons/compress/MemoryLimitException\n-   #7 = Methodref          #5.#64         // org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n-   #8 = Methodref          #5.#65         // org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n-   #9 = Methodref          #6.#66         // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n-  #10 = Methodref          #36.#67        // java/io/InputStream.read:()I\n-  #11 = Methodref          #16.#68        // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.count:(I)V\n-  #12 = Methodref          #36.#69        // java/io/InputStream.read:([BII)I\n-  #13 = Methodref          #36.#70        // java/io/InputStream.skip:(J)J\n-  #14 = Methodref          #36.#71        // java/io/InputStream.available:()I\n-  #15 = Methodref          #36.#72        // java/io/InputStream.close:()V\n-  #16 = Class              #73            // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n-  #17 = Class              #74            // org/apache/commons/compress/compressors/CompressorInputStream\n-  #18 = Utf8               in\n-  #19 = Utf8               Ljava/io/InputStream;\n-  #20 = Utf8               <init>\n-  #21 = Utf8               (Ljava/io/InputStream;)V\n-  #22 = Utf8               Code\n+   #1 = Class              #2             // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n+   #2 = Utf8               org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n+   #3 = Class              #4             // org/apache/commons/compress/compressors/CompressorInputStream\n+   #4 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+   #5 = Utf8               in\n+   #6 = Utf8               Ljava/io/InputStream;\n+   #7 = Utf8               <init>\n+   #8 = Utf8               (Ljava/io/InputStream;)V\n+   #9 = Utf8               Exceptions\n+  #10 = Class              #11            // java/io/IOException\n+  #11 = Utf8               java/io/IOException\n+  #12 = Utf8               Code\n+  #13 = Methodref          #3.#14         // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+  #14 = NameAndType        #7:#15         // \"<init>\":()V\n+  #15 = Utf8               ()V\n+  #16 = Class              #17            // org/tukaani/xz/LZMAInputStream\n+  #17 = Utf8               org/tukaani/xz/LZMAInputStream\n+  #18 = Methodref          #16.#19        // org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+  #19 = NameAndType        #7:#20         // \"<init>\":(Ljava/io/InputStream;I)V\n+  #20 = Utf8               (Ljava/io/InputStream;I)V\n+  #21 = Fieldref           #1.#22         // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.in:Ljava/io/InputStream;\n+  #22 = NameAndType        #5:#6          // in:Ljava/io/InputStream;\n   #23 = Utf8               LineNumberTable\n   #24 = Utf8               LocalVariableTable\n   #25 = Utf8               this\n   #26 = Utf8               Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n   #27 = Utf8               inputStream\n-  #28 = Utf8               Exceptions\n-  #29 = Class              #75            // java/io/IOException\n-  #30 = Utf8               (Ljava/io/InputStream;I)V\n-  #31 = Utf8               e\n-  #32 = Utf8               Lorg/tukaani/xz/MemoryLimitException;\n-  #33 = Utf8               memoryLimitInKb\n-  #34 = Utf8               I\n-  #35 = Utf8               StackMapTable\n-  #36 = Class              #76            // java/io/InputStream\n-  #37 = Utf8               read\n-  #38 = Utf8               ()I\n-  #39 = Utf8               ret\n-  #40 = Utf8               ([BII)I\n-  #41 = Utf8               buf\n-  #42 = Utf8               [B\n-  #43 = Utf8               off\n-  #44 = Utf8               len\n-  #45 = Utf8               skip\n-  #46 = Utf8               (J)J\n-  #47 = Utf8               n\n-  #48 = Utf8               J\n-  #49 = Utf8               available\n-  #50 = Utf8               close\n-  #51 = Utf8               ()V\n-  #52 = Utf8               matches\n-  #53 = Utf8               ([BI)Z\n-  #54 = Utf8               signature\n-  #55 = Utf8               length\n-  #56 = Utf8               SourceFile\n-  #57 = Utf8               LZMACompressorInputStream.java\n-  #58 = NameAndType        #20:#51        // \"<init>\":()V\n-  #59 = Utf8               org/tukaani/xz/LZMAInputStream\n-  #60 = NameAndType        #20:#30        // \"<init>\":(Ljava/io/InputStream;I)V\n-  #61 = NameAndType        #18:#19        // in:Ljava/io/InputStream;\n-  #62 = Utf8               org/tukaani/xz/MemoryLimitException\n-  #63 = Utf8               org/apache/commons/compress/MemoryLimitException\n-  #64 = NameAndType        #77:#38        // getMemoryNeeded:()I\n-  #65 = NameAndType        #78:#38        // getMemoryLimit:()I\n-  #66 = NameAndType        #20:#79        // \"<init>\":(JILjava/lang/Exception;)V\n-  #67 = NameAndType        #37:#38        // read:()I\n-  #68 = NameAndType        #80:#81        // count:(I)V\n-  #69 = NameAndType        #37:#40        // read:([BII)I\n-  #70 = NameAndType        #45:#46        // skip:(J)J\n-  #71 = NameAndType        #49:#38        // available:()I\n-  #72 = NameAndType        #50:#51        // close:()V\n-  #73 = Utf8               org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n-  #74 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-  #75 = Utf8               java/io/IOException\n-  #76 = Utf8               java/io/InputStream\n-  #77 = Utf8               getMemoryNeeded\n-  #78 = Utf8               getMemoryLimit\n-  #79 = Utf8               (JILjava/lang/Exception;)V\n-  #80 = Utf8               count\n-  #81 = Utf8               (I)V\n+  #28 = Class              #29            // org/apache/commons/compress/MemoryLimitException\n+  #29 = Utf8               org/apache/commons/compress/MemoryLimitException\n+  #30 = Methodref          #31.#33        // org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+  #31 = Class              #32            // org/tukaani/xz/MemoryLimitException\n+  #32 = Utf8               org/tukaani/xz/MemoryLimitException\n+  #33 = NameAndType        #34:#35        // getMemoryNeeded:()I\n+  #34 = Utf8               getMemoryNeeded\n+  #35 = Utf8               ()I\n+  #36 = Methodref          #31.#37        // org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+  #37 = NameAndType        #38:#35        // getMemoryLimit:()I\n+  #38 = Utf8               getMemoryLimit\n+  #39 = Methodref          #28.#40        // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+  #40 = NameAndType        #7:#41         // \"<init>\":(JILjava/lang/Exception;)V\n+  #41 = Utf8               (JILjava/lang/Exception;)V\n+  #42 = Utf8               memoryLimitInKb\n+  #43 = Utf8               I\n+  #44 = Utf8               e\n+  #45 = Utf8               Lorg/tukaani/xz/MemoryLimitException;\n+  #46 = Utf8               StackMapTable\n+  #47 = Class              #48            // java/io/InputStream\n+  #48 = Utf8               java/io/InputStream\n+  #49 = Utf8               read\n+  #50 = Methodref          #47.#51        // java/io/InputStream.read:()I\n+  #51 = NameAndType        #49:#35        // read:()I\n+  #52 = Methodref          #1.#53         // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.count:(I)V\n+  #53 = NameAndType        #54:#55        // count:(I)V\n+  #54 = Utf8               count\n+  #55 = Utf8               (I)V\n+  #56 = Utf8               ret\n+  #57 = Utf8               ([BII)I\n+  #58 = Methodref          #47.#59        // java/io/InputStream.read:([BII)I\n+  #59 = NameAndType        #49:#57        // read:([BII)I\n+  #60 = Utf8               buf\n+  #61 = Utf8               [B\n+  #62 = Utf8               off\n+  #63 = Utf8               len\n+  #64 = Utf8               skip\n+  #65 = Utf8               (J)J\n+  #66 = Methodref          #47.#67        // java/io/InputStream.skip:(J)J\n+  #67 = NameAndType        #64:#65        // skip:(J)J\n+  #68 = Utf8               n\n+  #69 = Utf8               J\n+  #70 = Utf8               available\n+  #71 = Methodref          #47.#72        // java/io/InputStream.available:()I\n+  #72 = NameAndType        #70:#35        // available:()I\n+  #73 = Utf8               close\n+  #74 = Methodref          #47.#75        // java/io/InputStream.close:()V\n+  #75 = NameAndType        #73:#15        // close:()V\n+  #76 = Utf8               matches\n+  #77 = Utf8               ([BI)Z\n+  #78 = Utf8               signature\n+  #79 = Utf8               length\n+  #80 = Utf8               SourceFile\n+  #81 = Utf8               LZMACompressorInputStream.java\n {\n   private final java.io.InputStream in;\n     descriptor: Ljava/io/InputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream(java.io.InputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #1                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+         1: invokespecial #13                 // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class org/tukaani/xz/LZMAInputStream\n+         5: new           #16                 // class org/tukaani/xz/LZMAInputStream\n          8: dup\n          9: aload_1\n         10: iconst_m1\n-        11: invokespecial #3                  // Method org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-        14: putfield      #4                  // Field in:Ljava/io/InputStream;\n+        11: invokespecial #18                 // Method org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        14: putfield      #21                 // Field in:Ljava/io/InputStream;\n         17: return\n       LineNumberTable:\n-        line 49: 0\n+        line 48: 0\n         line 50: 4\n         line 51: 17\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      18     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n             0      18     1 inputStream   Ljava/io/InputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream(java.io.InputStream, int) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;I)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=6, locals=4, args_size=3\n          0: aload_0\n-         1: invokespecial #1                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+         1: invokespecial #13                 // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class org/tukaani/xz/LZMAInputStream\n+         5: new           #16                 // class org/tukaani/xz/LZMAInputStream\n          8: dup\n          9: aload_1\n         10: iload_2\n-        11: invokespecial #3                  // Method org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-        14: putfield      #4                  // Field in:Ljava/io/InputStream;\n+        11: invokespecial #18                 // Method org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        14: putfield      #21                 // Field in:Ljava/io/InputStream;\n         17: goto          39\n         20: astore_3\n-        21: new           #6                  // class org/apache/commons/compress/MemoryLimitException\n+        21: new           #28                 // class org/apache/commons/compress/MemoryLimitException\n         24: dup\n         25: aload_3\n-        26: invokevirtual #7                  // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+        26: invokevirtual #30                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n         29: i2l\n         30: aload_3\n-        31: invokevirtual #8                  // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+        31: invokevirtual #36                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n         34: aload_3\n-        35: invokespecial #9                  // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+        35: invokespecial #39                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n         38: athrow\n         39: return\n       Exception table:\n          from    to  target type\n              4    17    20   Class org/tukaani/xz/MemoryLimitException\n       LineNumberTable:\n-        line 71: 0\n+        line 70: 0\n         line 73: 4\n-        line 77: 17\n-        line 74: 20\n+        line 74: 17\n         line 76: 21\n         line 78: 39\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           21      18     3     e   Lorg/tukaani/xz/MemoryLimitException;\n             0      40     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n             0      40     1 inputStream   Ljava/io/InputStream;\n             0      40     2 memoryLimitInKb   I\n+           21      18     3     e   Lorg/tukaani/xz/MemoryLimitException;\n       StackMapTable: number_of_entries = 2\n         frame_type = 255 /* full_frame */\n           offset_delta = 20\n           locals = [ class org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream, class java/io/InputStream, int ]\n           stack = [ class org/tukaani/xz/MemoryLimitException ]\n         frame_type = 18 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #10                 // Method java/io/InputStream.read:()I\n+         1: getfield      #21                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #50                 // Method java/io/InputStream.read:()I\n          7: istore_1\n          8: aload_0\n          9: iload_1\n         10: iconst_m1\n         11: if_icmpne     18\n         14: iconst_0\n         15: goto          19\n         18: iconst_1\n-        19: invokevirtual #11                 // Method count:(I)V\n+        19: invokevirtual #52                 // Method count:(I)V\n         22: iload_1\n         23: ireturn\n       LineNumberTable:\n         line 83: 0\n         line 84: 8\n         line 85: 22\n       LocalVariableTable:\n@@ -204,134 +205,133 @@\n           offset_delta = 18\n           locals = [ class org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream, int ]\n           stack = [ class org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 0\n           locals = [ class org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream, int ]\n           stack = [ class org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream, int ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int read(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=5, args_size=4\n          0: aload_0\n-         1: getfield      #4                  // Field in:Ljava/io/InputStream;\n+         1: getfield      #21                 // Field in:Ljava/io/InputStream;\n          4: aload_1\n          5: iload_2\n          6: iload_3\n-         7: invokevirtual #12                 // Method java/io/InputStream.read:([BII)I\n+         7: invokevirtual #58                 // Method java/io/InputStream.read:([BII)I\n         10: istore        4\n         12: aload_0\n         13: iload         4\n-        15: invokevirtual #11                 // Method count:(I)V\n+        15: invokevirtual #52                 // Method count:(I)V\n         18: iload         4\n         20: ireturn\n       LineNumberTable:\n         line 91: 0\n         line 92: 12\n         line 93: 18\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      21     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n             0      21     1   buf   [B\n             0      21     2   off   I\n             0      21     3   len   I\n            12       9     4   ret   I\n-    Exceptions:\n-      throws java.io.IOException\n \n   public long skip(long) throws java.io.IOException;\n     descriptor: (J)J\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #4                  // Field in:Ljava/io/InputStream;\n+         1: getfield      #21                 // Field in:Ljava/io/InputStream;\n          4: lload_1\n-         5: invokevirtual #13                 // Method java/io/InputStream.skip:(J)J\n+         5: invokevirtual #66                 // Method java/io/InputStream.skip:(J)J\n          8: lreturn\n       LineNumberTable:\n         line 99: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n             0       9     1     n   J\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #14                 // Method java/io/InputStream.available:()I\n+         1: getfield      #21                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #71                 // Method java/io/InputStream.available:()I\n          7: ireturn\n       LineNumberTable:\n         line 105: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #15                 // Method java/io/InputStream.close:()V\n+         1: getfield      #21                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #74                 // Method java/io/InputStream.close:()V\n          7: return\n       LineNumberTable:\n         line 111: 0\n         line 112: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public static boolean matches(byte[], int);\n     descriptor: ([BI)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: ifnull        33\n+         1: ifnull        31\n          4: iload_1\n          5: iconst_3\n-         6: if_icmplt     33\n+         6: if_icmplt     31\n          9: aload_0\n         10: iconst_0\n         11: baload\n         12: bipush        93\n-        14: if_icmpne     33\n+        14: if_icmpne     31\n         17: aload_0\n         18: iconst_1\n         19: baload\n-        20: ifne          33\n+        20: ifne          31\n         23: aload_0\n         24: iconst_2\n         25: baload\n-        26: ifne          33\n+        26: ifne          31\n         29: iconst_1\n-        30: goto          34\n-        33: iconst_0\n-        34: ireturn\n+        30: ireturn\n+        31: iconst_0\n+        32: ireturn\n       LineNumberTable:\n         line 126: 0\n+        line 127: 9\n+        line 128: 23\n+        line 126: 29\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      35     0 signature   [B\n-            0      35     1 length   I\n-      StackMapTable: number_of_entries = 2\n-        frame_type = 33 /* same */\n-        frame_type = 64 /* same_locals_1_stack_item */\n-          stack = [ int ]\n+            0      33     0 signature   [B\n+            0      33     1 length   I\n+      StackMapTable: number_of_entries = 1\n+        frame_type = 31 /* same */\n }\n SourceFile: \"LZMACompressorInputStream.java\"\n"}]}
