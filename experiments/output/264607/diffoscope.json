{"diffoscope-json-version": 1, "source1": "first/ClassPath$JrtModules.class", "source2": "second/ClassPath$JrtModules.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,60 +9,64 @@\n import java.nio.file.Path;\n \n private static class JrtModules extends ClassPath.AbstractPathEntry\n {\n     private final ModularRuntimeImage modularRuntimeImage;\n     private final ClassPath.JrtModule[] modules;\n     \n-    public JrtModules(final String path) throws IOException {\n+    public JrtModules(final String s) throws IOException {\n         super((ClassPath.ClassPath$1)null);\n         this.modularRuntimeImage = new ModularRuntimeImage();\n-        final List<Path> list = this.modularRuntimeImage.list(path);\n+        final List list = this.modularRuntimeImage.list(s);\n         this.modules = new ClassPath.JrtModule[list.size()];\n         for (int i = 0; i < this.modules.length; ++i) {\n             this.modules[i] = new ClassPath.JrtModule((Path)list.get(i));\n         }\n     }\n     \n     public void close() throws IOException {\n         if (this.modules != null) {\n-            for (final ClassPath.JrtModule module : this.modules) {\n-                module.close();\n+            final ClassPath.JrtModule[] modules = this.modules;\n+            for (int length = modules.length, i = 0; i < length; ++i) {\n+                modules[i].close();\n             }\n         }\n         if (this.modularRuntimeImage != null) {\n             this.modularRuntimeImage.close();\n         }\n     }\n     \n-    ClassPath.ClassFile getClassFile(final String name, final String suffix) throws IOException {\n-        for (final ClassPath.JrtModule module : this.modules) {\n-            final ClassPath.ClassFile classFile = module.getClassFile(name, suffix);\n+    ClassPath.ClassFile getClassFile(final String s, final String s2) throws IOException {\n+        final ClassPath.JrtModule[] modules = this.modules;\n+        for (int length = modules.length, i = 0; i < length; ++i) {\n+            final ClassPath.ClassFile classFile = modules[i].getClassFile(s, s2);\n             if (classFile != null) {\n                 return classFile;\n             }\n         }\n         return null;\n     }\n     \n-    URL getResource(final String name) {\n-        for (final ClassPath.JrtModule module : this.modules) {\n-            final URL url = module.getResource(name);\n-            if (url != null) {\n-                return url;\n+    URL getResource(final String s) {\n+        final ClassPath.JrtModule[] modules = this.modules;\n+        for (int length = modules.length, i = 0; i < length; ++i) {\n+            final URL resource = modules[i].getResource(s);\n+            if (resource != null) {\n+                return resource;\n             }\n         }\n         return null;\n     }\n     \n-    InputStream getResourceAsStream(final String name) {\n-        for (final ClassPath.JrtModule module : this.modules) {\n-            final InputStream inputStream = module.getResourceAsStream(name);\n-            if (inputStream != null) {\n-                return inputStream;\n+    InputStream getResourceAsStream(final String s) {\n+        final ClassPath.JrtModule[] modules = this.modules;\n+        for (int length = modules.length, i = 0; i < length; ++i) {\n+            final InputStream resourceAsStream = modules[i].getResourceAsStream(s);\n+            if (resourceAsStream != null) {\n+                return resourceAsStream;\n             }\n         }\n         return null;\n     }\n     \n     public String toString() {\n         return Arrays.toString(this.modules);\n"}]}
