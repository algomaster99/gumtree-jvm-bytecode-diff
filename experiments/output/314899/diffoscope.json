{"diffoscope-json-version": 1, "source1": "first/IOTriFunction.class", "source2": "second/IOTriFunction.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,122 +1,122 @@\n-  SHA-256 checksum 89a73570adf34ceb03df5265b291f5b7c7f250911bd5677c62b5f9bf796723af\n+  SHA-256 checksum a2665903c6ea55fcb5cd42ed69cfb133f21f06959bc17d762a20a13a8c626efd\n   Compiled from \"IOTriFunction.java\"\n public interface org.apache.commons.io.function.IOTriFunction<T extends java.lang.Object, U extends java.lang.Object, V extends java.lang.Object, R extends java.lang.Object>\n   minor version: 0\n   major version: 52\n   flags: (0x0601) ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT\n-  this_class: #5                          // org/apache/commons/io/function/IOTriFunction\n-  super_class: #6                         // java/lang/Object\n+  this_class: #12                         // org/apache/commons/io/function/IOTriFunction\n+  super_class: #20                        // java/lang/Object\n   interfaces: 0, fields: 0, methods: 3, attributes: 5\n Constant pool:\n-   #1 = Methodref          #25.#26        // java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #2 = InvokeDynamic      #0:#31         // #0:apply:(Lorg/apache/commons/io/function/IOTriFunction;Lorg/apache/commons/io/function/IOFunction;)Lorg/apache/commons/io/function/IOTriFunction;\n-   #3 = InterfaceMethodref #5.#32         // org/apache/commons/io/function/IOTriFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #4 = InterfaceMethodref #33.#34        // org/apache/commons/io/function/IOFunction.apply:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #5 = Class              #35            // org/apache/commons/io/function/IOTriFunction\n-   #6 = Class              #36            // java/lang/Object\n-   #7 = Utf8               andThen\n-   #8 = Utf8               (Lorg/apache/commons/io/function/IOFunction;)Lorg/apache/commons/io/function/IOTriFunction;\n-   #9 = Utf8               Code\n-  #10 = Utf8               LineNumberTable\n-  #11 = Utf8               Signature\n-  #12 = Utf8               <W:Ljava/lang/Object;>(Lorg/apache/commons/io/function/IOFunction<-TR;+TW;>;)Lorg/apache/commons/io/function/IOTriFunction<TT;TU;TV;TW;>;\n-  #13 = Utf8               apply\n-  #14 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #15 = Utf8               Exceptions\n-  #16 = Class              #37            // java/io/IOException\n-  #17 = Utf8               (TT;TU;TV;)TR;\n-  #18 = Utf8               lambda$andThen$0\n-  #19 = Utf8               (Lorg/apache/commons/io/function/IOFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #20 = Utf8               <T:Ljava/lang/Object;U:Ljava/lang/Object;V:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/lang/Object;\n-  #21 = Utf8               SourceFile\n-  #22 = Utf8               IOTriFunction.java\n-  #23 = Utf8               RuntimeVisibleAnnotations\n-  #24 = Utf8               Ljava/lang/FunctionalInterface;\n-  #25 = Class              #38            // java/util/Objects\n-  #26 = NameAndType        #39:#40        // requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #27 = Utf8               BootstrapMethods\n-  #28 = MethodHandle       6:#41          // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #29 = MethodType         #14            //  (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #30 = MethodHandle       7:#42          // REF_invokeSpecial org/apache/commons/io/function/IOTriFunction.lambda$andThen$0:(Lorg/apache/commons/io/function/IOFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #31 = NameAndType        #13:#43        // apply:(Lorg/apache/commons/io/function/IOTriFunction;Lorg/apache/commons/io/function/IOFunction;)Lorg/apache/commons/io/function/IOTriFunction;\n-  #32 = NameAndType        #13:#14        // apply:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #33 = Class              #44            // org/apache/commons/io/function/IOFunction\n-  #34 = NameAndType        #13:#40        // apply:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #35 = Utf8               org/apache/commons/io/function/IOTriFunction\n-  #36 = Utf8               java/lang/Object\n-  #37 = Utf8               java/io/IOException\n-  #38 = Utf8               java/util/Objects\n-  #39 = Utf8               requireNonNull\n-  #40 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #41 = Methodref          #45.#46        // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #42 = InterfaceMethodref #5.#47         // org/apache/commons/io/function/IOTriFunction.lambda$andThen$0:(Lorg/apache/commons/io/function/IOFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #43 = Utf8               (Lorg/apache/commons/io/function/IOTriFunction;Lorg/apache/commons/io/function/IOFunction;)Lorg/apache/commons/io/function/IOTriFunction;\n-  #44 = Utf8               org/apache/commons/io/function/IOFunction\n-  #45 = Class              #48            // java/lang/invoke/LambdaMetafactory\n-  #46 = NameAndType        #49:#53        // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #47 = NameAndType        #18:#19        // lambda$andThen$0:(Lorg/apache/commons/io/function/IOFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #48 = Utf8               java/lang/invoke/LambdaMetafactory\n-  #49 = Utf8               metafactory\n-  #50 = Class              #55            // java/lang/invoke/MethodHandles$Lookup\n-  #51 = Utf8               Lookup\n-  #52 = Utf8               InnerClasses\n-  #53 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #54 = Class              #56            // java/lang/invoke/MethodHandles\n-  #55 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #56 = Utf8               java/lang/invoke/MethodHandles\n+   #1 = Methodref          #2.#3          // java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #2 = Class              #4             // java/util/Objects\n+   #3 = NameAndType        #5:#6          // requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #4 = Utf8               java/util/Objects\n+   #5 = Utf8               requireNonNull\n+   #6 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+   #7 = InvokeDynamic      #0:#8          // #0:apply:(Lorg/apache/commons/io/function/IOTriFunction;Lorg/apache/commons/io/function/IOFunction;)Lorg/apache/commons/io/function/IOTriFunction;\n+   #8 = NameAndType        #9:#10         // apply:(Lorg/apache/commons/io/function/IOTriFunction;Lorg/apache/commons/io/function/IOFunction;)Lorg/apache/commons/io/function/IOTriFunction;\n+   #9 = Utf8               apply\n+  #10 = Utf8               (Lorg/apache/commons/io/function/IOTriFunction;Lorg/apache/commons/io/function/IOFunction;)Lorg/apache/commons/io/function/IOTriFunction;\n+  #11 = InterfaceMethodref #12.#13        // org/apache/commons/io/function/IOTriFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #12 = Class              #14            // org/apache/commons/io/function/IOTriFunction\n+  #13 = NameAndType        #9:#15         // apply:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #14 = Utf8               org/apache/commons/io/function/IOTriFunction\n+  #15 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #16 = InterfaceMethodref #17.#18        // org/apache/commons/io/function/IOFunction.apply:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #17 = Class              #19            // org/apache/commons/io/function/IOFunction\n+  #18 = NameAndType        #9:#6          // apply:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #19 = Utf8               org/apache/commons/io/function/IOFunction\n+  #20 = Class              #21            // java/lang/Object\n+  #21 = Utf8               java/lang/Object\n+  #22 = Utf8               andThen\n+  #23 = Utf8               (Lorg/apache/commons/io/function/IOFunction;)Lorg/apache/commons/io/function/IOTriFunction;\n+  #24 = Utf8               Code\n+  #25 = Utf8               LineNumberTable\n+  #26 = Utf8               Signature\n+  #27 = Utf8               <W:Ljava/lang/Object;>(Lorg/apache/commons/io/function/IOFunction<-TR;+TW;>;)Lorg/apache/commons/io/function/IOTriFunction<TT;TU;TV;TW;>;\n+  #28 = Utf8               Exceptions\n+  #29 = Class              #30            // java/io/IOException\n+  #30 = Utf8               java/io/IOException\n+  #31 = Utf8               (TT;TU;TV;)TR;\n+  #32 = Utf8               lambda$andThen$0\n+  #33 = Utf8               (Lorg/apache/commons/io/function/IOFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #34 = Utf8               <T:Ljava/lang/Object;U:Ljava/lang/Object;V:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/lang/Object;\n+  #35 = Utf8               SourceFile\n+  #36 = Utf8               IOTriFunction.java\n+  #37 = Utf8               RuntimeVisibleAnnotations\n+  #38 = Utf8               Ljava/lang/FunctionalInterface;\n+  #39 = Utf8               BootstrapMethods\n+  #40 = MethodHandle       6:#41          // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #41 = Methodref          #42.#43        // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #42 = Class              #44            // java/lang/invoke/LambdaMetafactory\n+  #43 = NameAndType        #45:#46        // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #44 = Utf8               java/lang/invoke/LambdaMetafactory\n+  #45 = Utf8               metafactory\n+  #46 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #47 = MethodType         #15            //  (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #48 = MethodHandle       7:#49          // REF_invokeSpecial org/apache/commons/io/function/IOTriFunction.lambda$andThen$0:(Lorg/apache/commons/io/function/IOFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #49 = InterfaceMethodref #12.#50        // org/apache/commons/io/function/IOTriFunction.lambda$andThen$0:(Lorg/apache/commons/io/function/IOFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #50 = NameAndType        #32:#33        // lambda$andThen$0:(Lorg/apache/commons/io/function/IOFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #51 = Utf8               InnerClasses\n+  #52 = Class              #53            // java/lang/invoke/MethodHandles$Lookup\n+  #53 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #54 = Class              #55            // java/lang/invoke/MethodHandles\n+  #55 = Utf8               java/lang/invoke/MethodHandles\n+  #56 = Utf8               Lookup\n {\n   public default <W extends java.lang.Object> org.apache.commons.io.function.IOTriFunction<T, U, V, W> andThen(org.apache.commons.io.function.IOFunction<? super R, ? extends W>);\n     descriptor: (Lorg/apache/commons/io/function/IOFunction;)Lorg/apache/commons/io/function/IOTriFunction;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n          1: invokestatic  #1                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n          4: pop\n          5: aload_0\n          6: aload_1\n-         7: invokedynamic #2,  0              // InvokeDynamic #0:apply:(Lorg/apache/commons/io/function/IOTriFunction;Lorg/apache/commons/io/function/IOFunction;)Lorg/apache/commons/io/function/IOTriFunction;\n+         7: invokedynamic #7,  0              // InvokeDynamic #0:apply:(Lorg/apache/commons/io/function/IOTriFunction;Lorg/apache/commons/io/function/IOFunction;)Lorg/apache/commons/io/function/IOTriFunction;\n         12: areturn\n       LineNumberTable:\n         line 54: 0\n         line 55: 5\n-    Signature: #12                          // <W:Ljava/lang/Object;>(Lorg/apache/commons/io/function/IOFunction<-TR;+TW;>;)Lorg/apache/commons/io/function/IOTriFunction<TT;TU;TV;TW;>;\n+    Signature: #27                          // <W:Ljava/lang/Object;>(Lorg/apache/commons/io/function/IOFunction<-TR;+TW;>;)Lorg/apache/commons/io/function/IOTriFunction<TT;TU;TV;TW;>;\n \n   public abstract R apply(T, U, V) throws java.io.IOException;\n     descriptor: (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n     flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #17                          // (TT;TU;TV;)TR;\n+    Signature: #31                          // (TT;TU;TV;)TR;\n \n   private java.lang.Object lambda$andThen$0(org.apache.commons.io.function.IOFunction, java.lang.Object, java.lang.Object, java.lang.Object) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/io/function/IOFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n     flags: (0x1002) ACC_PRIVATE, ACC_SYNTHETIC\n     Code:\n       stack=5, locals=5, args_size=5\n          0: aload_1\n          1: aload_0\n          2: aload_2\n          3: aload_3\n          4: aload         4\n-         6: invokeinterface #3,  4            // InterfaceMethod apply:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-        11: invokeinterface #4,  2            // InterfaceMethod org/apache/commons/io/function/IOFunction.apply:(Ljava/lang/Object;)Ljava/lang/Object;\n+         6: invokeinterface #11,  4           // InterfaceMethod apply:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+        11: invokeinterface #16,  2           // InterfaceMethod org/apache/commons/io/function/IOFunction.apply:(Ljava/lang/Object;)Ljava/lang/Object;\n         16: areturn\n       LineNumberTable:\n         line 55: 0\n     Exceptions:\n       throws java.io.IOException\n }\n-Signature: #20                          // <T:Ljava/lang/Object;U:Ljava/lang/Object;V:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/lang/Object;\n+Signature: #34                          // <T:Ljava/lang/Object;U:Ljava/lang/Object;V:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/lang/Object;\n SourceFile: \"IOTriFunction.java\"\n RuntimeVisibleAnnotations:\n-  0: #24()\n+  0: #38()\n     java.lang.FunctionalInterface\n-InnerClasses:\n-  public static final #51= #50 of #54;    // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #28 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  0: #40 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #29 (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-      #30 REF_invokeSpecial org/apache/commons/io/function/IOTriFunction.lambda$andThen$0:(Lorg/apache/commons/io/function/IOFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-      #29 (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+      #47 (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+      #48 REF_invokeSpecial org/apache/commons/io/function/IOTriFunction.lambda$andThen$0:(Lorg/apache/commons/io/function/IOFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+      #47 (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+InnerClasses:\n+  public static final #56= #52 of #54;    // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
