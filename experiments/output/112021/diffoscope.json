{"diffoscope-json-version": 1, "source1": "first/ClassGen.class", "source2": "second/ClassGen.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -36,14 +36,18 @@\n     private final List<Field> fieldList;\n     private final List<Method> methodList;\n     private final List<Attribute> attributeList;\n     private final List<String> interfaceList;\n     private final List<AnnotationEntryGen> annotationList;\n     private List<ClassObserver> observers;\n     \n+    static {\n+        ClassGen.bcelComparator = (BCELComparator)new ClassGen.ClassGen$1();\n+    }\n+    \n     public static BCELComparator getComparator() {\n         return ClassGen.bcelComparator;\n     }\n     \n     public static void setComparator(final BCELComparator comparator) {\n         ClassGen.bcelComparator = comparator;\n     }\n@@ -66,15 +70,17 @@\n         this.fileName = clazz.getSourceFileName();\n         this.cp = new ConstantPoolGen(clazz.getConstantPool());\n         this.major = clazz.getMajor();\n         this.minor = clazz.getMinor();\n         final Attribute[] attributes = clazz.getAttributes();\n         final AnnotationEntryGen[] annotations = this.unpackAnnotations(attributes);\n         Collections.addAll(this.interfaceList, clazz.getInterfaceNames());\n-        for (final Attribute attribute : attributes) {\n+        Attribute[] array;\n+        for (int length = (array = attributes).length, i = 0; i < length; ++i) {\n+            final Attribute attribute = array[i];\n             if (!(attribute instanceof Annotations)) {\n                 this.addAttribute(attribute);\n             }\n         }\n         Collections.addAll(this.annotationList, annotations);\n         Collections.addAll(this.methodList, clazz.getMethods());\n         Collections.addAll(this.fieldList, clazz.getFields());\n@@ -356,29 +362,25 @@\n     }\n     \n     private AnnotationEntryGen[] unpackAnnotations(final Attribute[] attrs) {\n         final List<AnnotationEntryGen> annotationGenObjs = new ArrayList<AnnotationEntryGen>();\n         for (final Attribute attr : attrs) {\n             if (attr instanceof RuntimeVisibleAnnotations) {\n                 final RuntimeVisibleAnnotations rva = (RuntimeVisibleAnnotations)attr;\n-                rva.forEach(a -> annotationGenObjs.add(new AnnotationEntryGen(a, this.getConstantPool(), false)));\n+                rva.forEach(a -> list.add(new AnnotationEntryGen(a, this.getConstantPool(), false)));\n             }\n             else if (attr instanceof RuntimeInvisibleAnnotations) {\n                 final RuntimeInvisibleAnnotations ria = (RuntimeInvisibleAnnotations)attr;\n-                ria.forEach(a -> annotationGenObjs.add(new AnnotationEntryGen(a, this.getConstantPool(), false)));\n+                ria.forEach(a -> list2.add(new AnnotationEntryGen(a, this.getConstantPool(), false)));\n             }\n         }\n         return annotationGenObjs.toArray(AnnotationEntryGen.EMPTY_ARRAY);\n     }\n     \n     public void update() {\n         if (this.observers != null) {\n             for (final ClassObserver observer : this.observers) {\n                 observer.notify(this);\n             }\n         }\n     }\n-    \n-    static {\n-        ClassGen.bcelComparator = (BCELComparator)new ClassGen.ClassGen$1();\n-    }\n }\n"}]}
