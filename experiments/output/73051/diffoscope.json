{"diffoscope-json-version": 1, "source1": "first/X0015_CertificateIdForFile.class", "source2": "second/X0015_CertificateIdForFile.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,73 +1,73 @@\n-  SHA-256 checksum 95b34762826727cf744eccdbe016ee1744e3fc8858113922a57a9538db4c0f31\n+  SHA-256 checksum 6dc46f6a1950fe49aa125d4717d54b27d50d4e2aab91655a6cc3b6d3ec8cea38\n   Compiled from \"X0015_CertificateIdForFile.java\"\n public class org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile extends org.apache.commons.compress.archivers.zip.PKWareExtraHeader\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #13                         // org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile\n-  super_class: #8                         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  this_class: #1                          // org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile\n+  super_class: #3                         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n   interfaces: 0, fields: 2, methods: 4, attributes: 2\n Constant pool:\n-   #1 = Class              #2             // org/apache/commons/compress/archivers/zip/ZipShort\n-   #2 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-   #3 = Methodref          #1.#4          // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-   #4 = NameAndType        #5:#6          // \"<init>\":(I)V\n-   #5 = Utf8               <init>\n-   #6 = Utf8               (I)V\n-   #7 = Methodref          #8.#9          // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-   #8 = Class              #10            // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-   #9 = NameAndType        #5:#11         // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-  #10 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-  #11 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-  #12 = Fieldref           #13.#14        // org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile.hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-  #13 = Class              #15            // org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile\n-  #14 = NameAndType        #16:#17        // hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-  #15 = Utf8               org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile\n-  #16 = Utf8               hashAlg\n-  #17 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-  #18 = Fieldref           #13.#19        // org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile.rcount:I\n-  #19 = NameAndType        #20:#21        // rcount:I\n-  #20 = Utf8               rcount\n-  #21 = Utf8               I\n-  #22 = Methodref          #13.#23        // org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile.assertMinimalLength:(II)V\n-  #23 = NameAndType        #24:#25        // assertMinimalLength:(II)V\n-  #24 = Utf8               assertMinimalLength\n-  #25 = Utf8               (II)V\n-  #26 = Methodref          #8.#27         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n-  #27 = NameAndType        #28:#29        // parseFromCentralDirectoryData:([BII)V\n-  #28 = Utf8               parseFromCentralDirectoryData\n-  #29 = Utf8               ([BII)V\n-  #30 = Methodref          #1.#31         // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-  #31 = NameAndType        #32:#33        // getValue:([BI)I\n-  #32 = Utf8               getValue\n-  #33 = Utf8               ([BI)I\n-  #34 = Methodref          #35.#36        // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-  #35 = Class              #37            // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n-  #36 = NameAndType        #38:#39        // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-  #37 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n-  #38 = Utf8               getAlgorithmByCode\n-  #39 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-  #40 = Utf8               ()V\n-  #41 = Utf8               Code\n-  #42 = Utf8               LineNumberTable\n-  #43 = Utf8               LocalVariableTable\n-  #44 = Utf8               this\n-  #45 = Utf8               Lorg/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile;\n-  #46 = Utf8               getHashAlgorithm\n-  #47 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-  #48 = Utf8               getRecordCount\n-  #49 = Utf8               ()I\n-  #50 = Utf8               data\n-  #51 = Utf8               [B\n-  #52 = Utf8               offset\n-  #53 = Utf8               length\n-  #54 = Utf8               Exceptions\n-  #55 = Class              #56            // java/util/zip/ZipException\n-  #56 = Utf8               java/util/zip/ZipException\n+   #1 = Class              #2             // org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile\n+   #2 = Utf8               org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile\n+   #3 = Class              #4             // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+   #4 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+   #5 = Utf8               rcount\n+   #6 = Utf8               I\n+   #7 = Utf8               hashAlg\n+   #8 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #9 = Utf8               <init>\n+  #10 = Utf8               ()V\n+  #11 = Utf8               Code\n+  #12 = Class              #13            // org/apache/commons/compress/archivers/zip/ZipShort\n+  #13 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+  #14 = Methodref          #12.#15        // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+  #15 = NameAndType        #9:#16         // \"<init>\":(I)V\n+  #16 = Utf8               (I)V\n+  #17 = Methodref          #3.#18         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+  #18 = NameAndType        #9:#19         // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+  #19 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+  #20 = Utf8               LineNumberTable\n+  #21 = Utf8               LocalVariableTable\n+  #22 = Utf8               this\n+  #23 = Utf8               Lorg/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile;\n+  #24 = Utf8               getHashAlgorithm\n+  #25 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+  #26 = Fieldref           #1.#27         // org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile.hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+  #27 = NameAndType        #7:#8          // hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+  #28 = Utf8               getRecordCount\n+  #29 = Utf8               ()I\n+  #30 = Fieldref           #1.#31         // org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile.rcount:I\n+  #31 = NameAndType        #5:#6          // rcount:I\n+  #32 = Utf8               parseFromCentralDirectoryData\n+  #33 = Utf8               ([BII)V\n+  #34 = Utf8               Exceptions\n+  #35 = Class              #36            // java/util/zip/ZipException\n+  #36 = Utf8               java/util/zip/ZipException\n+  #37 = Methodref          #1.#38         // org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile.assertMinimalLength:(II)V\n+  #38 = NameAndType        #39:#40        // assertMinimalLength:(II)V\n+  #39 = Utf8               assertMinimalLength\n+  #40 = Utf8               (II)V\n+  #41 = Methodref          #3.#42         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n+  #42 = NameAndType        #32:#33        // parseFromCentralDirectoryData:([BII)V\n+  #43 = Methodref          #12.#44        // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+  #44 = NameAndType        #45:#46        // getValue:([BI)I\n+  #45 = Utf8               getValue\n+  #46 = Utf8               ([BI)I\n+  #47 = Methodref          #48.#50        // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+  #48 = Class              #49            // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n+  #49 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n+  #50 = NameAndType        #51:#52        // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+  #51 = Utf8               getAlgorithmByCode\n+  #52 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+  #53 = Utf8               data\n+  #54 = Utf8               [B\n+  #55 = Utf8               offset\n+  #56 = Utf8               length\n   #57 = Utf8               SourceFile\n   #58 = Utf8               X0015_CertificateIdForFile.java\n   #59 = Utf8               InnerClasses\n   #60 = Utf8               HashAlgorithm\n {\n   private int rcount;\n     descriptor: I\n@@ -79,94 +79,94 @@\n \n   public org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n-         1: new           #1                  // class org/apache/commons/compress/archivers/zip/ZipShort\n+         1: new           #12                 // class org/apache/commons/compress/archivers/zip/ZipShort\n          4: dup\n          5: bipush        21\n-         7: invokespecial #3                  // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-        10: invokespecial #7                  // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+         7: invokespecial #14                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+        10: invokespecial #17                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n         13: return\n       LineNumberTable:\n         line 53: 0\n         line 54: 13\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      14     0  this   Lorg/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile;\n \n   public org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm getHashAlgorithm();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #12                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+         1: getfield      #26                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n          4: areturn\n       LineNumberTable:\n         line 61: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile;\n \n   public int getRecordCount();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #18                 // Field rcount:I\n+         1: getfield      #30                 // Field rcount:I\n          4: ireturn\n       LineNumberTable:\n         line 69: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile;\n \n   public void parseFromCentralDirectoryData(byte[], int, int) throws java.util.zip.ZipException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.util.zip.ZipException\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: iconst_4\n          2: iload_3\n-         3: invokevirtual #22                 // Method assertMinimalLength:(II)V\n+         3: invokevirtual #37                 // Method assertMinimalLength:(II)V\n          6: aload_0\n          7: aload_1\n          8: iload_2\n          9: iload_3\n-        10: invokespecial #26                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n+        10: invokespecial #41                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n         13: aload_0\n         14: aload_1\n         15: iload_2\n-        16: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        19: putfield      #18                 // Field rcount:I\n+        16: invokestatic  #43                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        19: putfield      #30                 // Field rcount:I\n         22: aload_0\n         23: aload_1\n         24: iload_2\n         25: iconst_2\n         26: iadd\n-        27: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        30: invokestatic  #34                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-        33: putfield      #12                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+        27: invokestatic  #43                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        30: invokestatic  #47                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+        33: putfield      #26                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n         36: return\n       LineNumberTable:\n         line 75: 0\n         line 76: 6\n         line 77: 13\n         line 78: 22\n         line 79: 36\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      37     0  this   Lorg/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile;\n             0      37     1  data   [B\n             0      37     2 offset   I\n             0      37     3 length   I\n-    Exceptions:\n-      throws java.util.zip.ZipException\n }\n SourceFile: \"X0015_CertificateIdForFile.java\"\n InnerClasses:\n-  public static final #60= #35 of #8;     // HashAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  public static final #60= #48 of #3;     // HashAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n"}]}
