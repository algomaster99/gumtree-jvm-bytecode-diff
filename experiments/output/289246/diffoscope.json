{"diffoscope-json-version": 1, "source1": "first/CompositeConfiguration.class", "source2": "second/CompositeConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,14 +2,15 @@\n package org.apache.commons.configuration2;\n \n import java.util.Set;\n import org.apache.commons.configuration2.convert.ListDelimiterHandler;\n import org.apache.commons.configuration2.ex.ConfigurationRuntimeException;\n import java.util.ListIterator;\n import java.util.ArrayList;\n+import java.util.Objects;\n import java.util.LinkedHashSet;\n import java.util.Iterator;\n import java.util.function.Consumer;\n import java.util.Collection;\n import java.util.LinkedList;\n import java.util.List;\n \n@@ -129,21 +130,33 @@\n     \n     protected Object getPropertyInternal(final String s) {\n         return this.configList.stream().filter(configuration -> configuration.containsKey(s2)).findFirst().map(configuration2 -> configuration2.getProperty(s3)).orElse(null);\n     }\n     \n     protected Iterator<String> getKeysInternal() {\n         final LinkedHashSet set = new LinkedHashSet();\n-        this.configList.forEach(configuration -> configuration.getKeys().forEachRemaining(set2::add));\n+        this.configList.forEach(configuration -> {\n+            configuration.getKeys();\n+            Objects.requireNonNull(obj);\n+            final Iterator iterator;\n+            iterator.forEachRemaining(obj::add);\n+            return;\n+        });\n         return set.iterator();\n     }\n     \n     protected Iterator<String> getKeysInternal(final String s) {\n         final LinkedHashSet set = new LinkedHashSet();\n-        this.configList.forEach(configuration -> configuration.getKeys(s2).forEachRemaining(set2::add));\n+        this.configList.forEach(configuration -> {\n+            configuration.getKeys(s2);\n+            Objects.requireNonNull(obj);\n+            final Iterator iterator;\n+            iterator.forEachRemaining(obj::add);\n+            return;\n+        });\n         return set.iterator();\n     }\n     \n     protected boolean isEmptyInternal() {\n         return this.configList.stream().allMatch(ImmutableConfiguration::isEmpty);\n     }\n     \n"}]}
