{"diffoscope-json-version": 1, "source1": "first/BeanHelper.class", "source2": "second/BeanHelper.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,14 +26,19 @@\n public final class BeanHelper\n {\n     public static final BeanHelper INSTANCE;\n     private static final BeanUtilsBean BEAN_UTILS_BEAN;\n     private final Map<String, BeanFactory> beanFactories;\n     private final BeanFactory defaultBeanFactory;\n     \n+    static {\n+        INSTANCE = new BeanHelper();\n+        BEAN_UTILS_BEAN = initBeanUtilsBean();\n+    }\n+    \n     public BeanHelper() {\n         this(null);\n     }\n     \n     public BeanHelper(final BeanFactory defaultBeanFactory) {\n         this.beanFactories = Collections.synchronizedMap(new HashMap<String, BeanFactory>());\n         this.defaultBeanFactory = (BeanFactory)((defaultBeanFactory != null) ? defaultBeanFactory : DefaultBeanFactory.INSTANCE);\n@@ -80,27 +85,27 @@\n                     else {\n                         final BeanDeclaration decl2 = (BeanDeclaration)e.getValue();\n                         coll.add(this.createBean(decl2, defaultClass));\n                     }\n                 }\n             }\n             else {\n-                for (final Map.Entry<String, Object> e : nestedBeans.entrySet()) {\n-                    final String propName = (String)e.getKey();\n+                for (final Map.Entry<String, Object> e2 : nestedBeans.entrySet()) {\n+                    final String propName = (String)e2.getKey();\n                     final Class<?> defaultClass = getDefaultClass(bean, propName);\n-                    final Object prop = e.getValue();\n+                    final Object prop = e2.getValue();\n                     if (prop instanceof Collection) {\n                         final Collection<Object> beanCollection = createPropertyCollection(propName, defaultClass);\n                         for (final Object elemDef : (Collection)prop) {\n                             beanCollection.add(this.createBean((BeanDeclaration)elemDef));\n                         }\n                         initProperty(bean, propName, beanCollection);\n                     }\n                     else {\n-                        initProperty(bean, propName, this.createBean((BeanDeclaration)e.getValue(), defaultClass));\n+                        initProperty(bean, propName, this.createBean((BeanDeclaration)e2.getValue(), defaultClass));\n                     }\n                 }\n             }\n         }\n     }\n     \n     public static void initBeanProperties(final Object bean, final BeanDeclaration data) {\n@@ -230,21 +235,16 @@\n             throw new ConfigurationRuntimeException(\"Unknown bean factory: \" + factoryName);\n         }\n         return factory;\n     }\n     \n     private BeanCreationContext createBeanCreationContext(final BeanDeclaration data, final Class<?> defaultClass, final Object param, final BeanFactory factory) {\n         final Class<?> beanClass = fetchBeanClass(data, defaultClass, factory);\n-        return (BeanCreationContext)new BeanHelper.BeanCreationContextImpl(this, (Class)beanClass, data, param, (BeanHelper.BeanHelper$1)null);\n+        return (BeanCreationContext)new BeanHelper.BeanCreationContextImpl(this, (Class)beanClass, data, param, (BeanHelper.BeanCreationContextImpl)null);\n     }\n     \n     private static BeanUtilsBean initBeanUtilsBean() {\n         final PropertyUtilsBean propUtilsBean = new PropertyUtilsBean();\n         propUtilsBean.addBeanIntrospector((BeanIntrospector)new FluentPropertyBeanIntrospector());\n         return new BeanUtilsBean(new ConvertUtilsBean(), propUtilsBean);\n     }\n-    \n-    static {\n-        INSTANCE = new BeanHelper();\n-        BEAN_UTILS_BEAN = initBeanUtilsBean();\n-    }\n }\n"}]}
