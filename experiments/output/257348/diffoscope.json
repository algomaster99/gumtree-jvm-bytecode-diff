{"diffoscope-json-version": 1, "source1": "first/RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.class", "source2": "second/RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,35 +14,39 @@\n     \n     public ParameterAnnotation(final AnnotationsAttribute.Annotation[] annotations) {\n         this.numAnnotations = annotations.length;\n         this.annotations = annotations;\n     }\n     \n     public List<Object> getClassFileEntries() {\n-        final List<Object> nested = new ArrayList<Object>();\n-        for (final AnnotationsAttribute.Annotation annotation : this.annotations) {\n-            nested.addAll(annotation.getClassFileEntries());\n+        final ArrayList list = new ArrayList();\n+        final AnnotationsAttribute.Annotation[] annotations = this.annotations;\n+        for (int length = annotations.length, i = 0; i < length; ++i) {\n+            list.addAll(annotations[i].getClassFileEntries());\n         }\n-        return nested;\n+        return list;\n     }\n     \n     public int getLength() {\n-        int length = 2;\n-        for (final AnnotationsAttribute.Annotation annotation : this.annotations) {\n-            length += annotation.getLength();\n+        int n = 2;\n+        final AnnotationsAttribute.Annotation[] annotations = this.annotations;\n+        for (int length = annotations.length, i = 0; i < length; ++i) {\n+            n += annotations[i].getLength();\n         }\n-        return length;\n+        return n;\n     }\n     \n-    public void resolve(final ClassConstantPool pool) {\n-        for (final AnnotationsAttribute.Annotation annotation : this.annotations) {\n-            annotation.resolve(pool);\n+    public void resolve(final ClassConstantPool classConstantPool) {\n+        final AnnotationsAttribute.Annotation[] annotations = this.annotations;\n+        for (int length = annotations.length, i = 0; i < length; ++i) {\n+            annotations[i].resolve(classConstantPool);\n         }\n     }\n     \n-    public void writeBody(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.numAnnotations);\n-        for (final AnnotationsAttribute.Annotation annotation : this.annotations) {\n-            annotation.writeBody(dos);\n+    public void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.numAnnotations);\n+        final AnnotationsAttribute.Annotation[] annotations = this.annotations;\n+        for (int length = annotations.length, i = 0; i < length; ++i) {\n+            annotations[i].writeBody(dataOutputStream);\n         }\n     }\n }\n"}]}
