{"diffoscope-json-version": 1, "source1": "first/TapeInputStream.class", "source2": "second/TapeInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -66,15 +66,15 @@\n         int bytes;\n         int n;\n         for (bytes = 0; bytes < len; bytes += n, off += n) {\n             if (this.readOffset == this.blockSize) {\n                 try {\n                     this.readBlock(true);\n                 }\n-                catch (final ShortFileException sfe) {\n+                catch (final ShortFileException ex) {\n                     return -1;\n                 }\n             }\n             n = 0;\n             if (this.readOffset + (len - bytes) <= this.blockSize) {\n                 n = len - bytes;\n             }\n@@ -95,15 +95,15 @@\n         long bytes;\n         long n;\n         for (bytes = 0L; bytes < len; bytes += n) {\n             if (this.readOffset == this.blockSize) {\n                 try {\n                     this.readBlock(len - bytes < (long)this.blockSize);\n                 }\n-                catch (final ShortFileException sfe) {\n+                catch (final ShortFileException ex) {\n                     return -1L;\n                 }\n             }\n             n = 0L;\n             if (this.readOffset + (len - bytes) <= this.blockSize) {\n                 n = len - bytes;\n             }\n@@ -123,15 +123,15 @@\n     }\n     \n     public byte[] peek() throws IOException {\n         if (this.readOffset == this.blockSize) {\n             try {\n                 this.readBlock(true);\n             }\n-            catch (final ShortFileException sfe) {\n+            catch (final ShortFileException ex) {\n                 return null;\n             }\n         }\n         final byte[] b = new byte[1024];\n         System.arraycopy(this.blockBuffer, this.readOffset, b, 0, b.length);\n         return b;\n     }\n@@ -167,36 +167,37 @@\n                 final byte[] compBuffer = new byte[length];\n                 this.readFully(compBuffer, 0, length);\n                 this.bytesRead += length;\n                 if (!decompress) {\n                     Arrays.fill(this.blockBuffer, (byte)0);\n                 }\n                 else {\n-                    switch (TapeInputStream.TapeInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE[DumpArchiveConstants.COMPRESSION_TYPE.find(flags & 0x3).ordinal()]) {\n-                        case 1: {\n+                    switch (DumpArchiveConstants.COMPRESSION_TYPE.find(flags & 0x3)) {\n+                        case ZLIB: {\n                             final Inflater inflator = new Inflater();\n                             try {\n                                 inflator.setInput(compBuffer, 0, compBuffer.length);\n                                 length = inflator.inflate(this.blockBuffer);\n                                 if (length != this.blockSize) {\n                                     throw new ShortFileException();\n                                 }\n                             }\n                             catch (final DataFormatException e) {\n                                 throw new DumpArchiveException(\"Bad data\", (Throwable)e);\n                             }\n                             finally {\n                                 inflator.end();\n                             }\n+                            inflator.end();\n                             break;\n                         }\n-                        case 2: {\n+                        case BZLIB: {\n                             throw new UnsupportedCompressionAlgorithmException(\"BZLIB2\");\n                         }\n-                        case 3: {\n+                        case LZO: {\n                             throw new UnsupportedCompressionAlgorithmException(\"LZO\");\n                         }\n                         default: {\n                             throw new UnsupportedCompressionAlgorithmException();\n                         }\n                     }\n                 }\n"}]}
