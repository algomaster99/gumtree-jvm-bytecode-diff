{"diffoscope-json-version": 1, "source1": "first/X5455_ExtendedTimestamp.class", "source2": "second/X5455_ExtendedTimestamp.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -61,36 +61,36 @@\n         return array;\n     }\n     \n     public byte[] getCentralDirectoryData() {\n         return Arrays.copyOf(this.getLocalFileDataData(), this.getCentralDirectoryLength().getValue());\n     }\n     \n-    public void parseFromLocalFileData(final byte[] array, int n, final int i) throws ZipException {\n+    public void parseFromLocalFileData(final byte[] array, int n, final int n2) throws ZipException {\n         this.reset();\n-        if (i < 1) {\n-            throw new ZipException(\"X5455_ExtendedTimestamp too short, only \" + i + \" bytes\");\n+        if (n2 < 1) {\n+            throw new ZipException(\"X5455_ExtendedTimestamp too short, only \" + n2 + \" bytes\");\n         }\n-        final int n2 = n + i;\n+        final int n3 = n + n2;\n         this.setFlags(array[n++]);\n-        if (this.bit0_modifyTimePresent && n + 4 <= n2) {\n+        if (this.bit0_modifyTimePresent && n + 4 <= n3) {\n             this.modifyTime = new ZipLong(array, n);\n             n += 4;\n         }\n         else {\n             this.bit0_modifyTimePresent = false;\n         }\n-        if (this.bit1_accessTimePresent && n + 4 <= n2) {\n+        if (this.bit1_accessTimePresent && n + 4 <= n3) {\n             this.accessTime = new ZipLong(array, n);\n             n += 4;\n         }\n         else {\n             this.bit1_accessTimePresent = false;\n         }\n-        if (this.bit2_createTimePresent && n + 4 <= n2) {\n+        if (this.bit2_createTimePresent && n + 4 <= n3) {\n             this.createTime = new ZipLong(array, n);\n             n += 4;\n         }\n         else {\n             this.bit2_createTimePresent = false;\n         }\n     }\n@@ -236,18 +236,18 @@\n         return n;\n     }\n     \n     private static Date zipLongToDate(final ZipLong zipLong) {\n         return (zipLong != null) ? new Date(zipLong.getIntValue() * 1000L) : null;\n     }\n     \n-    private static ZipLong unixTimeToZipLong(final long lng) {\n-        if (lng < -2147483648L || lng > 2147483647L) {\n-            throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + lng);\n+    private static ZipLong unixTimeToZipLong(final long n) {\n+        if (n < -2147483648L || n > 2147483647L) {\n+            throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + n);\n         }\n-        return new ZipLong(lng);\n+        return new ZipLong(n);\n     }\n     \n     static {\n         HEADER_ID = new ZipShort(21589);\n     }\n }\n"}]}
