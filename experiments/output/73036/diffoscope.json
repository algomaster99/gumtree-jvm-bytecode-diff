{"diffoscope-json-version": 1, "source1": "first/ScatterZipOutputStream.class", "source2": "second/ScatterZipOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -45,16 +45,37 @@\n         this.items = new ConcurrentLinkedQueue<ScatterZipOutputStream.CompressedEntry>();\n         this.isClosed = new AtomicBoolean();\n         this.backingStore = backingStore;\n         this.streamCompressor = streamCompressor;\n     }\n     \n     public void addArchiveEntry(final ZipArchiveEntryRequest zipArchiveEntryRequest) throws IOException {\n-        try (final InputStream payloadStream = zipArchiveEntryRequest.getPayloadStream()) {\n-            this.streamCompressor.deflate(payloadStream, zipArchiveEntryRequest.getMethod());\n+        Throwable t = null;\n+        try {\n+            final InputStream payloadStream = zipArchiveEntryRequest.getPayloadStream();\n+            try {\n+                this.streamCompressor.deflate(payloadStream, zipArchiveEntryRequest.getMethod());\n+            }\n+            finally {\n+                if (payloadStream != null) {\n+                    payloadStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n         this.items.add(new ScatterZipOutputStream.CompressedEntry(zipArchiveEntryRequest, this.streamCompressor.getCrc32(), this.streamCompressor.getBytesWrittenForLastEntry(), this.streamCompressor.getBytesRead()));\n     }\n     \n     @Override\n     public void close() throws IOException {\n         if (!this.isClosed.compareAndSet(false, true)) {\n@@ -65,22 +86,53 @@\n                 this.zipEntryWriter.close();\n             }\n             this.backingStore.close();\n         }\n         finally {\n             this.streamCompressor.close();\n         }\n+        this.streamCompressor.close();\n     }\n     \n     public void writeTo(final ZipArchiveOutputStream target) throws IOException {\n         this.backingStore.closeForWriting();\n-        try (final InputStream data = this.backingStore.getInputStream()) {\n-            for (final ScatterZipOutputStream.CompressedEntry compressedEntry : this.items) {\n-                try (final BoundedInputStream rawStream = new BoundedInputStream(data, compressedEntry.compressedSize)) {\n-                    target.addRawArchiveEntry(compressedEntry.transferToArchiveEntry(), (InputStream)rawStream);\n+        Throwable t = null;\n+        try {\n+            final InputStream data = this.backingStore.getInputStream();\n+            try {\n+                for (final ScatterZipOutputStream.CompressedEntry compressedEntry : this.items) {\n+                    try {\n+                        final BoundedInputStream rawStream = new BoundedInputStream(data, compressedEntry.compressedSize);\n+                        try {\n+                            target.addRawArchiveEntry(compressedEntry.transferToArchiveEntry(), (InputStream)rawStream);\n+                        }\n+                        finally {\n+                            if (rawStream != null) {\n+                                rawStream.close();\n+                            }\n+                        }\n+                    }\n+                    finally {}\n+                }\n+            }\n+            finally {\n+                if (data != null) {\n+                    data.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n                 }\n             }\n         }\n     }\n     \n     public ScatterZipOutputStream.ZipEntryWriter zipEntryWriter() throws IOException {\n         if (this.zipEntryWriter == null) {\n"}]}
