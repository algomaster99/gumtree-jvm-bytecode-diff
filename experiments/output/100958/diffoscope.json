{"diffoscope-json-version": 1, "source1": "first/VisibilityModifierCheck.class", "source2": "second/VisibilityModifierCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -38,14 +38,20 @@\n     private Set<String> ignoreAnnotationCanonicalNames;\n     private boolean protectedAllowed;\n     private boolean packageAllowed;\n     private boolean allowPublicImmutableFields;\n     private boolean allowPublicFinalFields;\n     private Set<String> immutableClassCanonicalNames;\n     \n+    static {\n+        DEFAULT_IMMUTABLE_TYPES = Set.of(new String[] { \"java.lang.String\", \"java.lang.Integer\", \"java.lang.Byte\", \"java.lang.Character\", \"java.lang.Short\", \"java.lang.Boolean\", \"java.lang.Long\", \"java.lang.Double\", \"java.lang.Float\", \"java.lang.StackTraceElement\", \"java.math.BigInteger\", \"java.math.BigDecimal\", \"java.io.File\", \"java.util.Locale\", \"java.util.UUID\", \"java.net.URL\", \"java.net.URI\", \"java.net.Inet4Address\", \"java.net.Inet6Address\", \"java.net.InetSocketAddress\" });\n+        DEFAULT_IGNORE_ANNOTATIONS = Set.of(\"org.junit.Rule\", \"org.junit.ClassRule\", \"com.google.common.annotations.VisibleForTesting\");\n+        EXPLICIT_MODS = new String[] { \"public\", \"private\", \"protected\" };\n+    }\n+    \n     public VisibilityModifierCheck() {\n         this.publicMemberPattern = Pattern.compile(\"^serialVersionUID$\");\n         this.ignoreAnnotationCanonicalNames = VisibilityModifierCheck.DEFAULT_IGNORE_ANNOTATIONS;\n         this.immutableClassCanonicalNames = VisibilityModifierCheck.DEFAULT_IMMUTABLE_TYPES;\n     }\n     \n     public void setIgnoreAnnotationCanonicalNames(final String... annotationNames) {\n@@ -197,15 +203,17 @@\n         }\n         return modifiersSet;\n     }\n     \n     private static String getVisibilityScope(final DetailAST variableDef) {\n         final Set<String> modifiers = getModifiers(variableDef);\n         String accessModifier = \"package\";\n-        for (final String modifier : VisibilityModifierCheck.EXPLICIT_MODS) {\n+        String[] explicit_MODS;\n+        for (int length = (explicit_MODS = VisibilityModifierCheck.EXPLICIT_MODS).length, i = 0; i < length; ++i) {\n+            final String modifier = explicit_MODS[i];\n             if (modifiers.contains(modifier)) {\n                 accessModifier = modifier;\n                 break;\n             }\n         }\n         return accessModifier;\n     }\n@@ -326,14 +334,8 @@\n                     matchingAnnotation = child;\n                     break;\n                 }\n             }\n         }\n         return matchingAnnotation;\n     }\n-    \n-    static {\n-        DEFAULT_IMMUTABLE_TYPES = Set.of(new String[] { \"java.lang.String\", \"java.lang.Integer\", \"java.lang.Byte\", \"java.lang.Character\", \"java.lang.Short\", \"java.lang.Boolean\", \"java.lang.Long\", \"java.lang.Double\", \"java.lang.Float\", \"java.lang.StackTraceElement\", \"java.math.BigInteger\", \"java.math.BigDecimal\", \"java.io.File\", \"java.util.Locale\", \"java.util.UUID\", \"java.net.URL\", \"java.net.URI\", \"java.net.Inet4Address\", \"java.net.Inet6Address\", \"java.net.InetSocketAddress\" });\n-        DEFAULT_IGNORE_ANNOTATIONS = Set.of(\"org.junit.Rule\", \"org.junit.ClassRule\", \"com.google.common.annotations.VisibleForTesting\");\n-        EXPLICIT_MODS = new String[] { \"public\", \"private\", \"protected\" };\n-    }\n }\n"}]}
