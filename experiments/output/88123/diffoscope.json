{"diffoscope-json-version": 1, "source1": "first/AnnotationUtils.class", "source2": "second/AnnotationUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,14 +8,18 @@\n import java.lang.annotation.Annotation;\n import org.apache.commons.lang3.builder.ToStringStyle;\n \n public class AnnotationUtils\n {\n     private static final ToStringStyle TO_STRING_STYLE;\n     \n+    static {\n+        TO_STRING_STYLE = (ToStringStyle)new AnnotationUtils.AnnotationUtils$1();\n+    }\n+    \n     public static boolean equals(final Annotation a1, final Annotation a2) {\n         if (a1 == a2) {\n             return true;\n         }\n         if (a1 == null || a2 == null) {\n             return false;\n         }\n@@ -23,15 +27,17 @@\n         final Class<? extends Annotation> type2 = a2.annotationType();\n         Validate.notNull((Object)type, \"Annotation %s with null annotationType()\", new Object[] { a1 });\n         Validate.notNull((Object)type2, \"Annotation %s with null annotationType()\", new Object[] { a2 });\n         if (!type.equals(type2)) {\n             return false;\n         }\n         try {\n-            for (final Method m : type.getDeclaredMethods()) {\n+            Method[] declaredMethods;\n+            for (int length = (declaredMethods = type.getDeclaredMethods()).length, i = 0; i < length; ++i) {\n+                final Method m = declaredMethods[i];\n                 if (m.getParameterTypes().length == 0 && isValidAnnotationMemberType(m.getReturnType())) {\n                     final Object v1 = m.invoke(a1, new Object[0]);\n                     final Object v2 = m.invoke(a2, new Object[0]);\n                     if (!memberEquals(m.getReturnType(), v1, v2)) {\n                         return false;\n                     }\n                 }\n@@ -42,15 +48,17 @@\n         }\n         return true;\n     }\n     \n     public static int hashCode(final Annotation a) {\n         int result = 0;\n         final Class<? extends Annotation> type = a.annotationType();\n-        for (final Method m : type.getDeclaredMethods()) {\n+        Method[] declaredMethods;\n+        for (int length = (declaredMethods = type.getDeclaredMethods()).length, i = 0; i < length; ++i) {\n+            final Method m = declaredMethods[i];\n             try {\n                 final Object value = m.invoke(a, new Object[0]);\n                 if (value == null) {\n                     throw new IllegalStateException(String.format(\"Annotation method %s returned null\", m));\n                 }\n                 result += hashMember(m.getName(), value);\n             }\n@@ -62,15 +70,17 @@\n             }\n         }\n         return result;\n     }\n     \n     public static String toString(final Annotation a) {\n         final ToStringBuilder builder = new ToStringBuilder((Object)a, AnnotationUtils.TO_STRING_STYLE);\n-        for (final Method m : a.annotationType().getDeclaredMethods()) {\n+        Method[] declaredMethods;\n+        for (int length = (declaredMethods = a.annotationType().getDeclaredMethods()).length, i = 0; i < length; ++i) {\n+            final Method m = declaredMethods[i];\n             if (m.getParameterTypes().length <= 0) {\n                 try {\n                     builder.append(m.getName(), m.invoke((Object)a, new Object[0]));\n                 }\n                 catch (final RuntimeException ex) {\n                     throw ex;\n                 }\n@@ -185,12 +195,8 @@\n             return Arrays.hashCode((double[])o);\n         }\n         if (componentType.equals(Boolean.TYPE)) {\n             return Arrays.hashCode((boolean[])o);\n         }\n         return Arrays.hashCode((Object[])o);\n     }\n-    \n-    static {\n-        TO_STRING_STYLE = (ToStringStyle)new AnnotationUtils.AnnotationUtils$1();\n-    }\n }\n"}]}
