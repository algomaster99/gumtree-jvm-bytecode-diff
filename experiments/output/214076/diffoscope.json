{"diffoscope-json-version": 1, "source1": "first/SocketClient.class", "source2": "second/SocketClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -47,88 +47,88 @@\n         this._output_ = null;\n         this._timeout_ = 0;\n         this._defaultPort_ = 0;\n         this._socketFactory_ = SocketClient.DEFAULT_SOCKET_FACTORY;\n         this._serverSocketFactory_ = SocketClient.DEFAULT_SERVER_SOCKET_FACTORY;\n     }\n     \n-    private void _connect(final InetAddress host, final int port, final InetAddress localAddr, final int localPort) throws SocketException, IOException {\n+    private void _connect(final InetAddress addr, final int port, final InetAddress addr2, final int port2) throws SocketException, IOException {\n         this._socket_ = this._socketFactory_.createSocket();\n         if (this.receiveBufferSize != -1) {\n             this._socket_.setReceiveBufferSize(this.receiveBufferSize);\n         }\n         if (this.sendBufferSize != -1) {\n             this._socket_.setSendBufferSize(this.sendBufferSize);\n         }\n-        if (localAddr != null) {\n-            this._socket_.bind(new InetSocketAddress(localAddr, localPort));\n+        if (addr2 != null) {\n+            this._socket_.bind(new InetSocketAddress(addr2, port2));\n         }\n-        this._socket_.connect(new InetSocketAddress(host, port), this.connectTimeout);\n+        this._socket_.connect(new InetSocketAddress(addr, port), this.connectTimeout);\n         this._connectAction_();\n     }\n     \n     protected void _connectAction_() throws IOException {\n         this.applySocketAttributes();\n         this._input_ = this._socket_.getInputStream();\n         this._output_ = this._socket_.getOutputStream();\n     }\n     \n-    public void addProtocolCommandListener(final ProtocolCommandListener listener) {\n-        this.getCommandSupport().addProtocolCommandListener(listener);\n+    public void addProtocolCommandListener(final ProtocolCommandListener protocolCommandListener) {\n+        this.getCommandSupport().addProtocolCommandListener(protocolCommandListener);\n     }\n     \n     protected void applySocketAttributes() throws SocketException {\n         this._socket_.setSoTimeout(this._timeout_);\n     }\n     \n-    private void closeQuietly(final Closeable close) {\n-        if (close != null) {\n+    private void closeQuietly(final Closeable closeable) {\n+        if (closeable != null) {\n             try {\n-                close.close();\n+                closeable.close();\n             }\n             catch (final IOException ex) {}\n         }\n     }\n     \n     private void closeQuietly(final Socket socket) {\n         if (socket != null) {\n             try {\n                 socket.close();\n             }\n             catch (final IOException ex) {}\n         }\n     }\n     \n-    public void connect(final InetAddress host) throws SocketException, IOException {\n+    public void connect(final InetAddress inetAddress) throws SocketException, IOException {\n         this._hostname_ = null;\n-        this.connect(host, this._defaultPort_);\n+        this.connect(inetAddress, this._defaultPort_);\n     }\n     \n-    public void connect(final InetAddress host, final int port) throws SocketException, IOException {\n+    public void connect(final InetAddress inetAddress, final int n) throws SocketException, IOException {\n         this._hostname_ = null;\n-        this._connect(host, port, null, -1);\n+        this._connect(inetAddress, n, null, -1);\n     }\n     \n-    public void connect(final InetAddress host, final int port, final InetAddress localAddr, final int localPort) throws SocketException, IOException {\n+    public void connect(final InetAddress inetAddress, final int n, final InetAddress inetAddress2, final int n2) throws SocketException, IOException {\n         this._hostname_ = null;\n-        this._connect(host, port, localAddr, localPort);\n+        this._connect(inetAddress, n, inetAddress2, n2);\n     }\n     \n-    public void connect(final String hostname) throws SocketException, IOException {\n-        this.connect(hostname, this._defaultPort_);\n+    public void connect(final String s) throws SocketException, IOException {\n+        this.connect(s, this._defaultPort_);\n     }\n     \n-    public void connect(final String hostname, final int port) throws SocketException, IOException {\n-        this._hostname_ = hostname;\n-        this._connect(InetAddress.getByName(hostname), port, null, -1);\n+    public void connect(final String s, final int n) throws SocketException, IOException {\n+        this._hostname_ = s;\n+        this._connect(InetAddress.getByName(s), n, null, -1);\n     }\n     \n-    public void connect(final String hostname, final int port, final InetAddress localAddr, final int localPort) throws SocketException, IOException {\n-        this._hostname_ = hostname;\n-        this._connect(InetAddress.getByName(hostname), port, localAddr, localPort);\n+    public void connect(final String s, final int n, final InetAddress inetAddress, final int n2) throws SocketException, IOException {\n+        this._hostname_ = s;\n+        this._connect(InetAddress.getByName(s), n, inetAddress, n2);\n     }\n     \n     protected void createCommandSupport() {\n         this.commandSupport = new ProtocolCommandSupport((Object)this);\n     }\n     \n     public void disconnect() throws IOException {\n@@ -137,23 +137,23 @@\n         this.closeQuietly(this._output_);\n         this._socket_ = null;\n         this._hostname_ = null;\n         this._input_ = null;\n         this._output_ = null;\n     }\n     \n-    protected void fireCommandSent(final String command, final String message) {\n+    protected void fireCommandSent(final String s, final String s2) {\n         if (this.getCommandSupport().getListenerCount() > 0) {\n-            this.getCommandSupport().fireCommandSent(command, message);\n+            this.getCommandSupport().fireCommandSent(s, s2);\n         }\n     }\n     \n-    protected void fireReplyReceived(final int replyCode, final String reply) {\n+    protected void fireReplyReceived(final int n, final String s) {\n         if (this.getCommandSupport().getListenerCount() > 0) {\n-            this.getCommandSupport().fireReplyReceived(replyCode, reply);\n+            this.getCommandSupport().fireReplyReceived(n, s);\n         }\n     }\n     \n     public Charset getCharset() {\n         return this.charset;\n     }\n     \n@@ -246,97 +246,95 @@\n                 }\n                 if (this._socket_.isOutputShutdown()) {\n                     return false;\n                 }\n                 this._socket_.getInputStream();\n                 this._socket_.getOutputStream();\n             }\n-            catch (final IOException ioex) {\n+            catch (final IOException ex) {\n                 return false;\n             }\n             return true;\n         }\n         return false;\n     }\n     \n     public boolean isConnected() {\n         return this._socket_ != null && this._socket_.isConnected();\n     }\n     \n-    public void removeProtocolCommandListener(final ProtocolCommandListener listener) {\n-        this.getCommandSupport().removeProtocolCommandListener(listener);\n+    public void removeProtocolCommandListener(final ProtocolCommandListener protocolCommandListener) {\n+        this.getCommandSupport().removeProtocolCommandListener(protocolCommandListener);\n     }\n     \n     public void setCharset(final Charset charset) {\n         this.charset = charset;\n     }\n     \n     public void setConnectTimeout(final int connectTimeout) {\n         this.connectTimeout = connectTimeout;\n     }\n     \n-    public void setDefaultPort(final int port) {\n-        this._defaultPort_ = port;\n+    public void setDefaultPort(final int defaultPort_) {\n+        this._defaultPort_ = defaultPort_;\n     }\n     \n-    public void setDefaultTimeout(final int timeout) {\n-        this._timeout_ = timeout;\n+    public void setDefaultTimeout(final int timeout_) {\n+        this._timeout_ = timeout_;\n     }\n     \n     public void setKeepAlive(final boolean keepAlive) throws SocketException {\n         this._socket_.setKeepAlive(keepAlive);\n     }\n     \n-    public void setProxy(final Proxy proxy) {\n-        this.setSocketFactory((SocketFactory)new DefaultSocketFactory(proxy));\n-        this.connProxy = proxy;\n+    public void setProxy(final Proxy connProxy) {\n+        this.setSocketFactory((SocketFactory)new DefaultSocketFactory(connProxy));\n+        this.connProxy = connProxy;\n     }\n     \n-    public void setReceiveBufferSize(final int size) throws SocketException {\n-        this.receiveBufferSize = size;\n+    public void setReceiveBufferSize(final int receiveBufferSize) throws SocketException {\n+        this.receiveBufferSize = receiveBufferSize;\n     }\n     \n-    public void setSendBufferSize(final int size) throws SocketException {\n-        this.sendBufferSize = size;\n+    public void setSendBufferSize(final int sendBufferSize) throws SocketException {\n+        this.sendBufferSize = sendBufferSize;\n     }\n     \n-    public void setServerSocketFactory(final ServerSocketFactory factory) {\n-        if (factory == null) {\n+    public void setServerSocketFactory(final ServerSocketFactory serverSocketFactory_) {\n+        if (serverSocketFactory_ == null) {\n             this._serverSocketFactory_ = SocketClient.DEFAULT_SERVER_SOCKET_FACTORY;\n         }\n         else {\n-            this._serverSocketFactory_ = factory;\n+            this._serverSocketFactory_ = serverSocketFactory_;\n         }\n     }\n     \n-    public void setSocketFactory(final SocketFactory factory) {\n-        if (factory == null) {\n+    public void setSocketFactory(final SocketFactory socketFactory_) {\n+        if (socketFactory_ == null) {\n             this._socketFactory_ = SocketClient.DEFAULT_SOCKET_FACTORY;\n         }\n         else {\n-            this._socketFactory_ = factory;\n+            this._socketFactory_ = socketFactory_;\n         }\n     }\n     \n-    public void setSoLinger(final boolean on, final int val) throws SocketException {\n-        this._socket_.setSoLinger(on, val);\n+    public void setSoLinger(final boolean on, final int linger) throws SocketException {\n+        this._socket_.setSoLinger(on, linger);\n     }\n     \n-    public void setSoTimeout(final int timeout) throws SocketException {\n-        this._socket_.setSoTimeout(timeout);\n+    public void setSoTimeout(final int soTimeout) throws SocketException {\n+        this._socket_.setSoTimeout(soTimeout);\n     }\n     \n-    public void setTcpNoDelay(final boolean on) throws SocketException {\n-        this._socket_.setTcpNoDelay(on);\n+    public void setTcpNoDelay(final boolean tcpNoDelay) throws SocketException {\n+        this._socket_.setTcpNoDelay(tcpNoDelay);\n     }\n     \n     public boolean verifyRemote(final Socket socket) {\n-        final InetAddress host1 = socket.getInetAddress();\n-        final InetAddress host2 = this.getRemoteAddress();\n-        return host1.equals(host2);\n+        return socket.getInetAddress().equals(this.getRemoteAddress());\n     }\n     \n     static {\n         DEFAULT_SOCKET_FACTORY = SocketFactory.getDefault();\n         DEFAULT_SERVER_SOCKET_FACTORY = ServerSocketFactory.getDefault();\n     }\n }\n"}]}
