{"diffoscope-json-version": 1, "source1": "first/MurmurHash3$IncrementalHash32x86.class", "source2": "second/MurmurHash3$IncrementalHash32x86.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -47,28 +47,28 @@\n                     k = orBytes(this.unprocessed[0], this.unprocessed[1], this.unprocessed[2], data[offset]);\n                     break;\n                 }\n                 default: {\n                     throw new IllegalStateException(\"Unprocessed length should be 1, 2, or 3: \" + this.unprocessedLength);\n                 }\n             }\n-            this.hash = MurmurHash3.access$000(k, this.hash);\n+            this.hash = MurmurHash3.access$0(k, this.hash);\n             final int consumed = 4 - this.unprocessedLength;\n             newOffset = offset + consumed;\n             newLength = length - consumed;\n         }\n         else {\n             newOffset = offset;\n             newLength = length;\n         }\n         final int nblocks = newLength >> 2;\n         for (int i = 0; i < nblocks; ++i) {\n             final int index = newOffset + (i << 2);\n-            final int j = MurmurHash3.access$100(data, index);\n-            this.hash = MurmurHash3.access$000(j, this.hash);\n+            final int j = MurmurHash3.access$1(data, index);\n+            this.hash = MurmurHash3.access$0(j, this.hash);\n         }\n         final int consumed = nblocks << 2;\n         this.unprocessedLength = newLength - consumed;\n         if (this.unprocessedLength != 0) {\n             System.arraycopy(data, newOffset + consumed, this.unprocessed, 0, this.unprocessedLength);\n         }\n     }\n@@ -93,14 +93,14 @@\n                 k1 = Integer.rotateLeft(k1, 15);\n                 k1 *= 461845907;\n                 result ^= k1;\n                 break;\n             }\n         }\n         result ^= totalLen;\n-        return MurmurHash3.access$200(result);\n+        return MurmurHash3.access$2(result);\n     }\n     \n     private static int orBytes(final byte b1, final byte b2, final byte b3, final byte b4) {\n         return (b1 & 0xFF) | (b2 & 0xFF) << 8 | (b3 & 0xFF) << 16 | (b4 & 0xFF) << 24;\n     }\n }\n"}]}
