{"diffoscope-json-version": 1, "source1": "first/IllegalImportCheck.class", "source2": "second/IllegalImportCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -23,28 +23,28 @@\n     \n     public IllegalImportCheck() {\n         this.illegalPkgsRegexps = new ArrayList<Pattern>();\n         this.illegalClassesRegexps = new ArrayList<Pattern>();\n         this.setIllegalPkgs(\"sun\");\n     }\n     \n-    public final void setIllegalPkgs(final String... from) {\n-        this.illegalPkgs = from.clone();\n+    public final void setIllegalPkgs(final String... array) {\n+        this.illegalPkgs = array.clone();\n         this.illegalPkgsRegexps.clear();\n         final String[] illegalPkgs = this.illegalPkgs;\n         for (int length = illegalPkgs.length, i = 0; i < length; ++i) {\n-            final String illegalPkg = illegalPkgs[i];\n-            this.illegalPkgsRegexps.add(CommonUtil.createPattern(\"^\" + illegalPkg + \"\\\\..*\"));\n+            this.illegalPkgsRegexps.add(CommonUtil.createPattern(\"^\" + illegalPkgs[i] + \"\\\\..*\"));\n         }\n     }\n     \n-    public void setIllegalClasses(final String... from) {\n-        this.illegalClasses = from.clone();\n-        for (final String illegalClass : this.illegalClasses) {\n-            this.illegalClassesRegexps.add(CommonUtil.createPattern(illegalClass));\n+    public void setIllegalClasses(final String... array) {\n+        this.illegalClasses = array.clone();\n+        final String[] illegalClasses = this.illegalClasses;\n+        for (int length = illegalClasses.length, i = 0; i < length; ++i) {\n+            this.illegalClassesRegexps.add(CommonUtil.createPattern(illegalClasses[i]));\n         }\n     }\n     \n     public void setRegexp(final boolean regexp) {\n         this.regexp = regexp;\n     }\n     \n@@ -56,70 +56,72 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 30, 152 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        FullIdent imp;\n-        if (ast.getType() == 30) {\n-            imp = FullIdent.createFullIdentBelow(ast);\n+    public void visitToken(final DetailAST detailAST) {\n+        FullIdent fullIdent;\n+        if (detailAST.getType() == 30) {\n+            fullIdent = FullIdent.createFullIdentBelow(detailAST);\n         }\n         else {\n-            imp = FullIdent.createFullIdent(ast.getFirstChild().getNextSibling());\n+            fullIdent = FullIdent.createFullIdent(detailAST.getFirstChild().getNextSibling());\n         }\n-        final String importText = imp.getText();\n-        if (this.isIllegalImport(importText)) {\n-            this.log(ast, \"import.illegal\", new Object[] { importText });\n+        final String text = fullIdent.getText();\n+        if (this.isIllegalImport(text)) {\n+            this.log(detailAST, \"import.illegal\", new Object[] { text });\n         }\n     }\n     \n-    private boolean isIllegalImportByRegularExpressions(final String importText) {\n-        boolean result = false;\n-        for (final Pattern pattern : this.illegalPkgsRegexps) {\n-            if (pattern.matcher(importText).matches()) {\n-                result = true;\n+    private boolean isIllegalImportByRegularExpressions(final String s) {\n+        boolean b = false;\n+        final Iterator<Pattern> iterator = this.illegalPkgsRegexps.iterator();\n+        while (iterator.hasNext()) {\n+            if (((Pattern)iterator.next()).matcher(s).matches()) {\n+                b = true;\n                 break;\n             }\n         }\n-        for (final Pattern pattern : this.illegalClassesRegexps) {\n-            if (pattern.matcher(importText).matches()) {\n-                result = true;\n+        final Iterator<Pattern> iterator2 = this.illegalClassesRegexps.iterator();\n+        while (iterator2.hasNext()) {\n+            if (((Pattern)iterator2.next()).matcher(s).matches()) {\n+                b = true;\n                 break;\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private boolean isIllegalImportByPackagesAndClassNames(final String importText) {\n-        boolean result = false;\n+    private boolean isIllegalImportByPackagesAndClassNames(final String s) {\n+        boolean b = false;\n         final String[] illegalPkgs = this.illegalPkgs;\n         for (int length = illegalPkgs.length, i = 0; i < length; ++i) {\n-            final String element = illegalPkgs[i];\n-            if (importText.startsWith(element)) {\n-                result = true;\n+            if (s.startsWith(illegalPkgs[i])) {\n+                b = true;\n                 break;\n             }\n         }\n         if (this.illegalClasses != null) {\n-            for (final String element : this.illegalClasses) {\n-                if (importText.equals(element)) {\n-                    result = true;\n+            final String[] illegalClasses = this.illegalClasses;\n+            for (int length2 = illegalClasses.length, j = 0; j < length2; ++j) {\n+                if (s.equals(illegalClasses[j])) {\n+                    b = true;\n                     break;\n                 }\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private boolean isIllegalImport(final String importText) {\n-        boolean result;\n+    private boolean isIllegalImport(final String s) {\n+        boolean b;\n         if (this.regexp) {\n-            result = this.isIllegalImportByRegularExpressions(importText);\n+            b = this.isIllegalImportByRegularExpressions(s);\n         }\n         else {\n-            result = this.isIllegalImportByPackagesAndClassNames(importText);\n+            b = this.isIllegalImportByPackagesAndClassNames(s);\n         }\n-        return result;\n+        return b;\n     }\n }\n"}]}
