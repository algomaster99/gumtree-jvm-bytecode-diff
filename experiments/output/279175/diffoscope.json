{"diffoscope-json-version": 1, "source1": "first/Archiver$ArchiverFileVisitor.class", "source2": "second/Archiver$ArchiverFileVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package org.apache.commons.compress.archivers.examples;\n \n-import org.apache.commons.compress.archivers.ArchiveEntry;\n import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Objects;\n import java.io.IOException;\n import java.nio.file.FileVisitResult;\n import java.nio.file.attribute.BasicFileAttributes;\n import org.apache.commons.compress.utils.IOUtils;\n@@ -16,38 +15,37 @@\n \n private static class ArchiverFileVisitor extends SimpleFileVisitor<Path>\n {\n     private final ArchiveOutputStream target;\n     private final Path directory;\n     private final LinkOption[] linkOptions;\n     \n-    private ArchiverFileVisitor(final ArchiveOutputStream target, final Path directory, final LinkOption... linkOptions) {\n+    private ArchiverFileVisitor(final ArchiveOutputStream target, final Path directory, final LinkOption... array) {\n         this.target = target;\n         this.directory = directory;\n-        this.linkOptions = ((linkOptions == null) ? IOUtils.EMPTY_LINK_OPTIONS : ((LinkOption[])linkOptions.clone()));\n+        this.linkOptions = ((array == null) ? IOUtils.EMPTY_LINK_OPTIONS : ((LinkOption[])array.clone()));\n     }\n     \n     @Override\n-    public FileVisitResult preVisitDirectory(final Path dir, final BasicFileAttributes attrs) throws IOException {\n-        return this.visit(dir, attrs, false);\n+    public FileVisitResult preVisitDirectory(final Path path, final BasicFileAttributes basicFileAttributes) throws IOException {\n+        return this.visit(path, basicFileAttributes, false);\n     }\n     \n-    protected FileVisitResult visit(final Path path, final BasicFileAttributes attrs, final boolean isFile) throws IOException {\n+    protected FileVisitResult visit(final Path path, final BasicFileAttributes obj, final boolean b) throws IOException {\n         Objects.requireNonNull(path);\n-        Objects.requireNonNull(attrs);\n-        final String name = this.directory.relativize(path).toString().replace('\\\\', '/');\n-        if (!name.isEmpty()) {\n-            final ArchiveEntry archiveEntry = this.target.createArchiveEntry(path, (isFile || name.endsWith(\"/\")) ? name : (name + \"/\"), this.linkOptions);\n-            this.target.putArchiveEntry(archiveEntry);\n-            if (isFile) {\n+        Objects.requireNonNull(obj);\n+        final String replace = this.directory.relativize(path).toString().replace('\\\\', '/');\n+        if (!replace.isEmpty()) {\n+            this.target.putArchiveEntry(this.target.createArchiveEntry(path, (b || replace.endsWith(\"/\")) ? replace : (replace + \"/\"), this.linkOptions));\n+            if (b) {\n                 Files.copy(path, (OutputStream)this.target);\n             }\n             this.target.closeArchiveEntry();\n         }\n         return FileVisitResult.CONTINUE;\n     }\n     \n     @Override\n-    public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {\n-        return this.visit(file, attrs, true);\n+    public FileVisitResult visitFile(final Path path, final BasicFileAttributes basicFileAttributes) throws IOException {\n+        return this.visit(path, basicFileAttributes, true);\n     }\n }\n"}]}
