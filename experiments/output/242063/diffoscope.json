{"diffoscope-json-version": 1, "source1": "first/ModuleMainClass.class", "source2": "second/ModuleMainClass.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,52 +5,51 @@\n import java.io.IOException;\n import java.io.DataInput;\n \n public final class ModuleMainClass extends Attribute\n {\n     private int mainClassIndex;\n     \n-    ModuleMainClass(final int nameIndex, final int length, final DataInput input, final ConstantPool constantPool) throws IOException {\n-        this(nameIndex, length, 0, constantPool);\n-        this.mainClassIndex = input.readUnsignedShort();\n+    ModuleMainClass(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, n2, 0, constantPool);\n+        this.mainClassIndex = dataInput.readUnsignedShort();\n     }\n     \n-    public ModuleMainClass(final int name_index, final int length, final int mainClassIndex, final ConstantPool constantPool) {\n-        super((byte)26, name_index, length, constantPool);\n+    public ModuleMainClass(final int n, final int n2, final int mainClassIndex, final ConstantPool constantPool) {\n+        super((byte)26, n, n2, constantPool);\n         this.mainClassIndex = mainClassIndex;\n     }\n     \n-    public ModuleMainClass(final ModuleMainClass c) {\n-        this(c.getNameIndex(), c.getLength(), c.getHostClassIndex(), c.getConstantPool());\n+    public ModuleMainClass(final ModuleMainClass moduleMainClass) {\n+        this(moduleMainClass.getNameIndex(), moduleMainClass.getLength(), moduleMainClass.getHostClassIndex(), moduleMainClass.getConstantPool());\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitModuleMainClass(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitModuleMainClass(this);\n     }\n     \n     public Attribute copy(final ConstantPool constantPool) {\n-        final ModuleMainClass c = (ModuleMainClass)this.clone();\n-        c.setConstantPool(constantPool);\n-        return c;\n+        final ModuleMainClass moduleMainClass = (ModuleMainClass)this.clone();\n+        moduleMainClass.setConstantPool(constantPool);\n+        return moduleMainClass;\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n-        file.writeShort(this.mainClassIndex);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeShort(this.mainClassIndex);\n     }\n     \n     public int getHostClassIndex() {\n         return this.mainClassIndex;\n     }\n     \n     public void setHostClassIndex(final int mainClassIndex) {\n         this.mainClassIndex = mainClassIndex;\n     }\n     \n     public String toString() {\n-        final StringBuilder buf = new StringBuilder();\n-        buf.append(\"ModuleMainClass: \");\n-        final String className = super.getConstantPool().getConstantString(this.mainClassIndex, (byte)7);\n-        buf.append(Utility.compactClassName(className, false));\n-        return buf.toString();\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"ModuleMainClass: \");\n+        sb.append(Utility.compactClassName(super.getConstantPool().getConstantString(this.mainClassIndex, (byte)7), false));\n+        return sb.toString();\n     }\n }\n"}]}
