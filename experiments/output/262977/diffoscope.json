{"diffoscope-json-version": 1, "source1": "first/EventUtils.class", "source2": "second/EventUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,27 +4,26 @@\n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Proxy;\n import java.lang.reflect.InvocationTargetException;\n import org.apache.commons.lang3.reflect.MethodUtils;\n \n public class EventUtils\n {\n-    public static <L> void addEventListener(final Object eventSource, final Class<L> listenerType, final L listener) {\n+    public static <L> void addEventListener(final Object o, final Class<L> clazz, final L l) {\n         try {\n-            MethodUtils.invokeMethod(eventSource, \"add\" + listenerType.getSimpleName(), new Object[] { listener });\n+            MethodUtils.invokeMethod(o, \"add\" + clazz.getSimpleName(), new Object[] { l });\n         }\n-        catch (final NoSuchMethodException e) {\n-            throw new IllegalArgumentException(\"Class \" + eventSource.getClass().getName() + \" does not have a public add\" + listenerType.getSimpleName() + \" method which takes a parameter of type \" + listenerType.getName() + \".\");\n+        catch (final NoSuchMethodException ex) {\n+            throw new IllegalArgumentException(\"Class \" + o.getClass().getName() + \" does not have a public add\" + clazz.getSimpleName() + \" method which takes a parameter of type \" + clazz.getName() + \".\");\n         }\n-        catch (final IllegalAccessException e2) {\n-            throw new IllegalArgumentException(\"Class \" + eventSource.getClass().getName() + \" does not have an accessible add\" + listenerType.getSimpleName() + \" method which takes a parameter of type \" + listenerType.getName() + \".\");\n+        catch (final IllegalAccessException ex2) {\n+            throw new IllegalArgumentException(\"Class \" + o.getClass().getName() + \" does not have an accessible add\" + clazz.getSimpleName() + \" method which takes a parameter of type \" + clazz.getName() + \".\");\n         }\n-        catch (final InvocationTargetException e3) {\n-            throw new RuntimeException(\"Unable to add listener.\", e3.getCause());\n+        catch (final InvocationTargetException ex3) {\n+            throw new RuntimeException(\"Unable to add listener.\", ex3.getCause());\n         }\n     }\n     \n-    public static <L> void bindEventsToMethod(final Object target, final String methodName, final Object eventSource, final Class<L> listenerType, final String... eventTypes) {\n-        final L listener = listenerType.cast(Proxy.newProxyInstance(target.getClass().getClassLoader(), (Class<?>[])new Class[] { listenerType }, (InvocationHandler)new EventUtils.EventBindingInvocationHandler(target, methodName, eventTypes)));\n-        addEventListener(eventSource, listenerType, listener);\n+    public static <L> void bindEventsToMethod(final Object o, final String s, final Object o2, final Class<L> clazz, final String... array) {\n+        addEventListener(o2, clazz, clazz.cast(Proxy.newProxyInstance(o.getClass().getClassLoader(), (Class<?>[])new Class[] { clazz }, (InvocationHandler)new EventUtils.EventBindingInvocationHandler(o, s, array))));\n     }\n }\n"}]}
