{"diffoscope-json-version": 1, "source1": "first/CSVPrinter.class", "source2": "second/CSVPrinter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,222 +1,222 @@\n-  SHA-256 checksum 2579c7e75188332b7a5eaba71aa885f031954847aecb529ade7d77f4097787d6\n+  SHA-256 checksum 40f145092b585e2f4bedbcc4c145b9b465465ac629d563995e90dbd3b1793e5f\n   Compiled from \"CSVPrinter.java\"\n public final class org.apache.commons.csv.CSVPrinter implements java.io.Flushable,java.io.Closeable\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n-  this_class: #52                         // org/apache/commons/csv/CSVPrinter\n-  super_class: #42                        // java/lang/Object\n+  this_class: #10                         // org/apache/commons/csv/CSVPrinter\n+  super_class: #4                         // java/lang/Object\n   interfaces: 2, fields: 3, methods: 15, attributes: 2\n Constant pool:\n-    #1 = Class              #94           // org/apache/commons/csv/Constants\n-    #2 = Methodref          #42.#95       // java/lang/Object.\"<init>\":()V\n-    #3 = Fieldref           #52.#96       // org/apache/commons/csv/CSVPrinter.newRecord:Z\n-    #4 = String             #53           // appendable\n-    #5 = Methodref          #97.#98       // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-    #6 = String             #55           // format\n-    #7 = Fieldref           #52.#99       // org/apache/commons/csv/CSVPrinter.appendable:Ljava/lang/Appendable;\n-    #8 = Methodref          #65.#100      // org/apache/commons/csv/CSVFormat.copy:()Lorg/apache/commons/csv/CSVFormat;\n-    #9 = Fieldref           #52.#101      // org/apache/commons/csv/CSVPrinter.format:Lorg/apache/commons/csv/CSVFormat;\n-   #10 = Methodref          #65.#102      // org/apache/commons/csv/CSVFormat.getHeaderComments:()[Ljava/lang/String;\n-   #11 = Methodref          #52.#103      // org/apache/commons/csv/CSVPrinter.printComment:(Ljava/lang/String;)V\n-   #12 = Methodref          #65.#104      // org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n-   #13 = Methodref          #65.#105      // org/apache/commons/csv/CSVFormat.getSkipHeaderRecord:()Z\n-   #14 = Class              #106          // \"[Ljava/lang/Object;\"\n-   #15 = Methodref          #52.#107      // org/apache/commons/csv/CSVPrinter.printRecord:([Ljava/lang/Object;)V\n-   #16 = Methodref          #52.#108      // org/apache/commons/csv/CSVPrinter.close:(Z)V\n-   #17 = Methodref          #65.#109      // org/apache/commons/csv/CSVFormat.getAutoFlush:()Z\n-   #18 = Methodref          #52.#110      // org/apache/commons/csv/CSVPrinter.flush:()V\n-   #19 = Class              #111          // java/io/Closeable\n-   #20 = InterfaceMethodref #19.#112      // java/io/Closeable.close:()V\n-   #21 = Class              #113          // java/io/Flushable\n-   #22 = InterfaceMethodref #21.#110      // java/io/Flushable.flush:()V\n-   #23 = Methodref          #65.#114      // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n-   #24 = Methodref          #65.#115      // org/apache/commons/csv/CSVFormat.isCommentMarkerSet:()Z\n-   #25 = Methodref          #52.#116      // org/apache/commons/csv/CSVPrinter.println:()V\n-   #26 = Methodref          #65.#117      // org/apache/commons/csv/CSVFormat.getCommentMarker:()Ljava/lang/Character;\n-   #27 = Methodref          #118.#119     // java/lang/Character.charValue:()C\n-   #28 = InterfaceMethodref #64.#120      // java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n-   #29 = Methodref          #121.#122     // java/lang/String.length:()I\n-   #30 = Methodref          #121.#123     // java/lang/String.charAt:(I)C\n-   #31 = Methodref          #65.#124      // org/apache/commons/csv/CSVFormat.builder:()Lorg/apache/commons/csv/CSVFormat$Builder;\n-   #32 = Methodref          #125.#126     // org/apache/commons/csv/CSVFormat$Builder.setHeader:(Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-   #33 = Methodref          #125.#127     // org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n-   #34 = Methodref          #65.#128      // org/apache/commons/csv/CSVFormat.println:(Ljava/lang/Appendable;)V\n-   #35 = InterfaceMethodref #41.#129      // java/lang/Iterable.iterator:()Ljava/util/Iterator;\n-   #36 = InterfaceMethodref #85.#130      // java/util/Iterator.hasNext:()Z\n-   #37 = InterfaceMethodref #85.#131      // java/util/Iterator.next:()Ljava/lang/Object;\n-   #38 = Methodref          #52.#132      // org/apache/commons/csv/CSVPrinter.print:(Ljava/lang/Object;)V\n-   #39 = Methodref          #133.#134     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-   #40 = Methodref          #52.#135      // org/apache/commons/csv/CSVPrinter.printRecord:(Ljava/lang/Iterable;)V\n-   #41 = Class              #136          // java/lang/Iterable\n-   #42 = Class              #137          // java/lang/Object\n-   #43 = Methodref          #52.#138      // org/apache/commons/csv/CSVPrinter.printRecords:(Ljava/lang/Iterable;)V\n-   #44 = InterfaceMethodref #90.#139      // java/sql/ResultSet.getMetaData:()Ljava/sql/ResultSetMetaData;\n-   #45 = InterfaceMethodref #140.#141     // java/sql/ResultSetMetaData.getColumnCount:()I\n-   #46 = InterfaceMethodref #90.#142      // java/sql/ResultSet.next:()Z\n-   #47 = InterfaceMethodref #90.#143      // java/sql/ResultSet.getObject:(I)Ljava/lang/Object;\n-   #48 = Class              #144          // java/sql/Clob\n-   #49 = InterfaceMethodref #48.#145      // java/sql/Clob.getCharacterStream:()Ljava/io/Reader;\n-   #50 = Methodref          #52.#146      // org/apache/commons/csv/CSVPrinter.printHeaders:(Ljava/sql/ResultSet;)V\n-   #51 = Methodref          #52.#147      // org/apache/commons/csv/CSVPrinter.printRecords:(Ljava/sql/ResultSet;)V\n-   #52 = Class              #148          // org/apache/commons/csv/CSVPrinter\n-   #53 = Utf8               appendable\n-   #54 = Utf8               Ljava/lang/Appendable;\n-   #55 = Utf8               format\n-   #56 = Utf8               Lorg/apache/commons/csv/CSVFormat;\n-   #57 = Utf8               newRecord\n-   #58 = Utf8               Z\n-   #59 = Utf8               <init>\n-   #60 = Utf8               (Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n-   #61 = Utf8               Code\n-   #62 = Utf8               LineNumberTable\n-   #63 = Utf8               StackMapTable\n-   #64 = Class              #149          // java/lang/Appendable\n-   #65 = Class              #150          // org/apache/commons/csv/CSVFormat\n-   #66 = Class              #151          // \"[Ljava/lang/String;\"\n-   #67 = Utf8               Exceptions\n-   #68 = Class              #152          // java/io/IOException\n-   #69 = Utf8               close\n-   #70 = Utf8               ()V\n-   #71 = Utf8               (Z)V\n-   #72 = Utf8               flush\n-   #73 = Utf8               getOut\n-   #74 = Utf8               ()Ljava/lang/Appendable;\n-   #75 = Utf8               print\n-   #76 = Utf8               (Ljava/lang/Object;)V\n-   #77 = Utf8               printComment\n-   #78 = Utf8               (Ljava/lang/String;)V\n-   #79 = Utf8               printHeaders\n-   #80 = Utf8               (Ljava/sql/ResultSet;)V\n-   #81 = Class              #153          // java/sql/SQLException\n-   #82 = Utf8               println\n-   #83 = Utf8               printRecord\n-   #84 = Utf8               (Ljava/lang/Iterable;)V\n-   #85 = Class              #154          // java/util/Iterator\n-   #86 = Utf8               Signature\n-   #87 = Utf8               (Ljava/lang/Iterable<*>;)V\n-   #88 = Utf8               ([Ljava/lang/Object;)V\n-   #89 = Utf8               printRecords\n-   #90 = Class              #155          // java/sql/ResultSet\n-   #91 = Utf8               (Ljava/sql/ResultSet;Z)V\n-   #92 = Utf8               SourceFile\n-   #93 = Utf8               CSVPrinter.java\n-   #94 = Utf8               org/apache/commons/csv/Constants\n-   #95 = NameAndType        #59:#70       // \"<init>\":()V\n-   #96 = NameAndType        #57:#58       // newRecord:Z\n-   #97 = Class              #156          // java/util/Objects\n-   #98 = NameAndType        #157:#158     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #99 = NameAndType        #53:#54       // appendable:Ljava/lang/Appendable;\n-  #100 = NameAndType        #159:#160     // copy:()Lorg/apache/commons/csv/CSVFormat;\n-  #101 = NameAndType        #55:#56       // format:Lorg/apache/commons/csv/CSVFormat;\n-  #102 = NameAndType        #161:#162     // getHeaderComments:()[Ljava/lang/String;\n-  #103 = NameAndType        #77:#78       // printComment:(Ljava/lang/String;)V\n-  #104 = NameAndType        #163:#162     // getHeader:()[Ljava/lang/String;\n-  #105 = NameAndType        #164:#165     // getSkipHeaderRecord:()Z\n-  #106 = Utf8               [Ljava/lang/Object;\n-  #107 = NameAndType        #83:#88       // printRecord:([Ljava/lang/Object;)V\n-  #108 = NameAndType        #69:#71       // close:(Z)V\n-  #109 = NameAndType        #166:#165     // getAutoFlush:()Z\n-  #110 = NameAndType        #72:#70       // flush:()V\n-  #111 = Utf8               java/io/Closeable\n-  #112 = NameAndType        #69:#70       // close:()V\n-  #113 = Utf8               java/io/Flushable\n-  #114 = NameAndType        #75:#167      // print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n-  #115 = NameAndType        #168:#165     // isCommentMarkerSet:()Z\n-  #116 = NameAndType        #82:#70       // println:()V\n-  #117 = NameAndType        #169:#170     // getCommentMarker:()Ljava/lang/Character;\n-  #118 = Class              #171          // java/lang/Character\n-  #119 = NameAndType        #172:#173     // charValue:()C\n-  #120 = NameAndType        #174:#175     // append:(C)Ljava/lang/Appendable;\n-  #121 = Class              #176          // java/lang/String\n-  #122 = NameAndType        #177:#178     // length:()I\n-  #123 = NameAndType        #179:#180     // charAt:(I)C\n-  #124 = NameAndType        #181:#184     // builder:()Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #125 = Class              #185          // org/apache/commons/csv/CSVFormat$Builder\n-  #126 = NameAndType        #186:#187     // setHeader:(Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #127 = NameAndType        #188:#160     // build:()Lorg/apache/commons/csv/CSVFormat;\n-  #128 = NameAndType        #82:#189      // println:(Ljava/lang/Appendable;)V\n-  #129 = NameAndType        #190:#191     // iterator:()Ljava/util/Iterator;\n-  #130 = NameAndType        #192:#165     // hasNext:()Z\n-  #131 = NameAndType        #193:#194     // next:()Ljava/lang/Object;\n-  #132 = NameAndType        #75:#76       // print:(Ljava/lang/Object;)V\n-  #133 = Class              #195          // java/util/Arrays\n-  #134 = NameAndType        #196:#197     // asList:([Ljava/lang/Object;)Ljava/util/List;\n-  #135 = NameAndType        #83:#84       // printRecord:(Ljava/lang/Iterable;)V\n-  #136 = Utf8               java/lang/Iterable\n-  #137 = Utf8               java/lang/Object\n-  #138 = NameAndType        #89:#84       // printRecords:(Ljava/lang/Iterable;)V\n-  #139 = NameAndType        #198:#199     // getMetaData:()Ljava/sql/ResultSetMetaData;\n-  #140 = Class              #200          // java/sql/ResultSetMetaData\n-  #141 = NameAndType        #201:#178     // getColumnCount:()I\n-  #142 = NameAndType        #193:#165     // next:()Z\n-  #143 = NameAndType        #202:#203     // getObject:(I)Ljava/lang/Object;\n-  #144 = Utf8               java/sql/Clob\n-  #145 = NameAndType        #204:#205     // getCharacterStream:()Ljava/io/Reader;\n-  #146 = NameAndType        #79:#80       // printHeaders:(Ljava/sql/ResultSet;)V\n-  #147 = NameAndType        #89:#80       // printRecords:(Ljava/sql/ResultSet;)V\n-  #148 = Utf8               org/apache/commons/csv/CSVPrinter\n-  #149 = Utf8               java/lang/Appendable\n-  #150 = Utf8               org/apache/commons/csv/CSVFormat\n-  #151 = Utf8               [Ljava/lang/String;\n-  #152 = Utf8               java/io/IOException\n-  #153 = Utf8               java/sql/SQLException\n-  #154 = Utf8               java/util/Iterator\n-  #155 = Utf8               java/sql/ResultSet\n-  #156 = Utf8               java/util/Objects\n-  #157 = Utf8               requireNonNull\n-  #158 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #159 = Utf8               copy\n-  #160 = Utf8               ()Lorg/apache/commons/csv/CSVFormat;\n-  #161 = Utf8               getHeaderComments\n-  #162 = Utf8               ()[Ljava/lang/String;\n-  #163 = Utf8               getHeader\n-  #164 = Utf8               getSkipHeaderRecord\n-  #165 = Utf8               ()Z\n-  #166 = Utf8               getAutoFlush\n-  #167 = Utf8               (Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n-  #168 = Utf8               isCommentMarkerSet\n-  #169 = Utf8               getCommentMarker\n-  #170 = Utf8               ()Ljava/lang/Character;\n-  #171 = Utf8               java/lang/Character\n-  #172 = Utf8               charValue\n-  #173 = Utf8               ()C\n-  #174 = Utf8               append\n-  #175 = Utf8               (C)Ljava/lang/Appendable;\n-  #176 = Utf8               java/lang/String\n-  #177 = Utf8               length\n-  #178 = Utf8               ()I\n-  #179 = Utf8               charAt\n-  #180 = Utf8               (I)C\n-  #181 = Utf8               builder\n-  #182 = Utf8               Builder\n-  #183 = Utf8               InnerClasses\n-  #184 = Utf8               ()Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #185 = Utf8               org/apache/commons/csv/CSVFormat$Builder\n-  #186 = Utf8               setHeader\n-  #187 = Utf8               (Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #188 = Utf8               build\n-  #189 = Utf8               (Ljava/lang/Appendable;)V\n-  #190 = Utf8               iterator\n-  #191 = Utf8               ()Ljava/util/Iterator;\n-  #192 = Utf8               hasNext\n-  #193 = Utf8               next\n-  #194 = Utf8               ()Ljava/lang/Object;\n-  #195 = Utf8               java/util/Arrays\n-  #196 = Utf8               asList\n-  #197 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n-  #198 = Utf8               getMetaData\n-  #199 = Utf8               ()Ljava/sql/ResultSetMetaData;\n-  #200 = Utf8               java/sql/ResultSetMetaData\n-  #201 = Utf8               getColumnCount\n-  #202 = Utf8               getObject\n-  #203 = Utf8               (I)Ljava/lang/Object;\n-  #204 = Utf8               getCharacterStream\n-  #205 = Utf8               ()Ljava/io/Reader;\n+    #1 = Class              #2            // org/apache/commons/csv/Constants\n+    #2 = Utf8               org/apache/commons/csv/Constants\n+    #3 = Methodref          #4.#5         // java/lang/Object.\"<init>\":()V\n+    #4 = Class              #6            // java/lang/Object\n+    #5 = NameAndType        #7:#8         // \"<init>\":()V\n+    #6 = Utf8               java/lang/Object\n+    #7 = Utf8               <init>\n+    #8 = Utf8               ()V\n+    #9 = Fieldref           #10.#11       // org/apache/commons/csv/CSVPrinter.newRecord:Z\n+   #10 = Class              #12           // org/apache/commons/csv/CSVPrinter\n+   #11 = NameAndType        #13:#14       // newRecord:Z\n+   #12 = Utf8               org/apache/commons/csv/CSVPrinter\n+   #13 = Utf8               newRecord\n+   #14 = Utf8               Z\n+   #15 = String             #16           // appendable\n+   #16 = Utf8               appendable\n+   #17 = Methodref          #18.#19       // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #18 = Class              #20           // java/util/Objects\n+   #19 = NameAndType        #21:#22       // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #20 = Utf8               java/util/Objects\n+   #21 = Utf8               requireNonNull\n+   #22 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #23 = String             #24           // format\n+   #24 = Utf8               format\n+   #25 = Fieldref           #10.#26       // org/apache/commons/csv/CSVPrinter.appendable:Ljava/lang/Appendable;\n+   #26 = NameAndType        #16:#27       // appendable:Ljava/lang/Appendable;\n+   #27 = Utf8               Ljava/lang/Appendable;\n+   #28 = Methodref          #29.#30       // org/apache/commons/csv/CSVFormat.copy:()Lorg/apache/commons/csv/CSVFormat;\n+   #29 = Class              #31           // org/apache/commons/csv/CSVFormat\n+   #30 = NameAndType        #32:#33       // copy:()Lorg/apache/commons/csv/CSVFormat;\n+   #31 = Utf8               org/apache/commons/csv/CSVFormat\n+   #32 = Utf8               copy\n+   #33 = Utf8               ()Lorg/apache/commons/csv/CSVFormat;\n+   #34 = Fieldref           #10.#35       // org/apache/commons/csv/CSVPrinter.format:Lorg/apache/commons/csv/CSVFormat;\n+   #35 = NameAndType        #24:#36       // format:Lorg/apache/commons/csv/CSVFormat;\n+   #36 = Utf8               Lorg/apache/commons/csv/CSVFormat;\n+   #37 = Methodref          #29.#38       // org/apache/commons/csv/CSVFormat.getHeaderComments:()[Ljava/lang/String;\n+   #38 = NameAndType        #39:#40       // getHeaderComments:()[Ljava/lang/String;\n+   #39 = Utf8               getHeaderComments\n+   #40 = Utf8               ()[Ljava/lang/String;\n+   #41 = Methodref          #10.#42       // org/apache/commons/csv/CSVPrinter.printComment:(Ljava/lang/String;)V\n+   #42 = NameAndType        #43:#44       // printComment:(Ljava/lang/String;)V\n+   #43 = Utf8               printComment\n+   #44 = Utf8               (Ljava/lang/String;)V\n+   #45 = Methodref          #29.#46       // org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n+   #46 = NameAndType        #47:#40       // getHeader:()[Ljava/lang/String;\n+   #47 = Utf8               getHeader\n+   #48 = Methodref          #29.#49       // org/apache/commons/csv/CSVFormat.getSkipHeaderRecord:()Z\n+   #49 = NameAndType        #50:#51       // getSkipHeaderRecord:()Z\n+   #50 = Utf8               getSkipHeaderRecord\n+   #51 = Utf8               ()Z\n+   #52 = Class              #53           // \"[Ljava/lang/Object;\"\n+   #53 = Utf8               [Ljava/lang/Object;\n+   #54 = Methodref          #10.#55       // org/apache/commons/csv/CSVPrinter.printRecord:([Ljava/lang/Object;)V\n+   #55 = NameAndType        #56:#57       // printRecord:([Ljava/lang/Object;)V\n+   #56 = Utf8               printRecord\n+   #57 = Utf8               ([Ljava/lang/Object;)V\n+   #58 = Methodref          #10.#59       // org/apache/commons/csv/CSVPrinter.close:(Z)V\n+   #59 = NameAndType        #60:#61       // close:(Z)V\n+   #60 = Utf8               close\n+   #61 = Utf8               (Z)V\n+   #62 = Methodref          #29.#63       // org/apache/commons/csv/CSVFormat.getAutoFlush:()Z\n+   #63 = NameAndType        #64:#51       // getAutoFlush:()Z\n+   #64 = Utf8               getAutoFlush\n+   #65 = Methodref          #10.#66       // org/apache/commons/csv/CSVPrinter.flush:()V\n+   #66 = NameAndType        #67:#8        // flush:()V\n+   #67 = Utf8               flush\n+   #68 = Class              #69           // java/io/Closeable\n+   #69 = Utf8               java/io/Closeable\n+   #70 = InterfaceMethodref #68.#71       // java/io/Closeable.close:()V\n+   #71 = NameAndType        #60:#8        // close:()V\n+   #72 = Class              #73           // java/io/Flushable\n+   #73 = Utf8               java/io/Flushable\n+   #74 = InterfaceMethodref #72.#66       // java/io/Flushable.flush:()V\n+   #75 = Methodref          #29.#76       // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n+   #76 = NameAndType        #77:#78       // print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n+   #77 = Utf8               print\n+   #78 = Utf8               (Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n+   #79 = Methodref          #29.#80       // org/apache/commons/csv/CSVFormat.isCommentMarkerSet:()Z\n+   #80 = NameAndType        #81:#51       // isCommentMarkerSet:()Z\n+   #81 = Utf8               isCommentMarkerSet\n+   #82 = Methodref          #10.#83       // org/apache/commons/csv/CSVPrinter.println:()V\n+   #83 = NameAndType        #84:#8        // println:()V\n+   #84 = Utf8               println\n+   #85 = Methodref          #29.#86       // org/apache/commons/csv/CSVFormat.getCommentMarker:()Ljava/lang/Character;\n+   #86 = NameAndType        #87:#88       // getCommentMarker:()Ljava/lang/Character;\n+   #87 = Utf8               getCommentMarker\n+   #88 = Utf8               ()Ljava/lang/Character;\n+   #89 = Methodref          #90.#91       // java/lang/Character.charValue:()C\n+   #90 = Class              #92           // java/lang/Character\n+   #91 = NameAndType        #93:#94       // charValue:()C\n+   #92 = Utf8               java/lang/Character\n+   #93 = Utf8               charValue\n+   #94 = Utf8               ()C\n+   #95 = InterfaceMethodref #96.#97       // java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n+   #96 = Class              #98           // java/lang/Appendable\n+   #97 = NameAndType        #99:#100      // append:(C)Ljava/lang/Appendable;\n+   #98 = Utf8               java/lang/Appendable\n+   #99 = Utf8               append\n+  #100 = Utf8               (C)Ljava/lang/Appendable;\n+  #101 = Methodref          #102.#103     // java/lang/String.length:()I\n+  #102 = Class              #104          // java/lang/String\n+  #103 = NameAndType        #105:#106     // length:()I\n+  #104 = Utf8               java/lang/String\n+  #105 = Utf8               length\n+  #106 = Utf8               ()I\n+  #107 = Methodref          #102.#108     // java/lang/String.charAt:(I)C\n+  #108 = NameAndType        #109:#110     // charAt:(I)C\n+  #109 = Utf8               charAt\n+  #110 = Utf8               (I)C\n+  #111 = Methodref          #29.#112      // org/apache/commons/csv/CSVFormat.builder:()Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #112 = NameAndType        #113:#114     // builder:()Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #113 = Utf8               builder\n+  #114 = Utf8               ()Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #115 = Methodref          #116.#117     // org/apache/commons/csv/CSVFormat$Builder.setHeader:(Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #116 = Class              #118          // org/apache/commons/csv/CSVFormat$Builder\n+  #117 = NameAndType        #119:#120     // setHeader:(Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #118 = Utf8               org/apache/commons/csv/CSVFormat$Builder\n+  #119 = Utf8               setHeader\n+  #120 = Utf8               (Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #121 = Methodref          #116.#122     // org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n+  #122 = NameAndType        #123:#33      // build:()Lorg/apache/commons/csv/CSVFormat;\n+  #123 = Utf8               build\n+  #124 = Methodref          #29.#125      // org/apache/commons/csv/CSVFormat.println:(Ljava/lang/Appendable;)V\n+  #125 = NameAndType        #84:#126      // println:(Ljava/lang/Appendable;)V\n+  #126 = Utf8               (Ljava/lang/Appendable;)V\n+  #127 = InterfaceMethodref #128.#129     // java/lang/Iterable.iterator:()Ljava/util/Iterator;\n+  #128 = Class              #130          // java/lang/Iterable\n+  #129 = NameAndType        #131:#132     // iterator:()Ljava/util/Iterator;\n+  #130 = Utf8               java/lang/Iterable\n+  #131 = Utf8               iterator\n+  #132 = Utf8               ()Ljava/util/Iterator;\n+  #133 = InterfaceMethodref #134.#135     // java/util/Iterator.hasNext:()Z\n+  #134 = Class              #136          // java/util/Iterator\n+  #135 = NameAndType        #137:#51      // hasNext:()Z\n+  #136 = Utf8               java/util/Iterator\n+  #137 = Utf8               hasNext\n+  #138 = InterfaceMethodref #134.#139     // java/util/Iterator.next:()Ljava/lang/Object;\n+  #139 = NameAndType        #140:#141     // next:()Ljava/lang/Object;\n+  #140 = Utf8               next\n+  #141 = Utf8               ()Ljava/lang/Object;\n+  #142 = Methodref          #10.#143      // org/apache/commons/csv/CSVPrinter.print:(Ljava/lang/Object;)V\n+  #143 = NameAndType        #77:#144      // print:(Ljava/lang/Object;)V\n+  #144 = Utf8               (Ljava/lang/Object;)V\n+  #145 = Methodref          #146.#147     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+  #146 = Class              #148          // java/util/Arrays\n+  #147 = NameAndType        #149:#150     // asList:([Ljava/lang/Object;)Ljava/util/List;\n+  #148 = Utf8               java/util/Arrays\n+  #149 = Utf8               asList\n+  #150 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n+  #151 = Methodref          #10.#152      // org/apache/commons/csv/CSVPrinter.printRecord:(Ljava/lang/Iterable;)V\n+  #152 = NameAndType        #56:#153      // printRecord:(Ljava/lang/Iterable;)V\n+  #153 = Utf8               (Ljava/lang/Iterable;)V\n+  #154 = Methodref          #10.#155      // org/apache/commons/csv/CSVPrinter.printRecords:(Ljava/lang/Iterable;)V\n+  #155 = NameAndType        #156:#153     // printRecords:(Ljava/lang/Iterable;)V\n+  #156 = Utf8               printRecords\n+  #157 = InterfaceMethodref #158.#159     // java/sql/ResultSet.getMetaData:()Ljava/sql/ResultSetMetaData;\n+  #158 = Class              #160          // java/sql/ResultSet\n+  #159 = NameAndType        #161:#162     // getMetaData:()Ljava/sql/ResultSetMetaData;\n+  #160 = Utf8               java/sql/ResultSet\n+  #161 = Utf8               getMetaData\n+  #162 = Utf8               ()Ljava/sql/ResultSetMetaData;\n+  #163 = InterfaceMethodref #164.#165     // java/sql/ResultSetMetaData.getColumnCount:()I\n+  #164 = Class              #166          // java/sql/ResultSetMetaData\n+  #165 = NameAndType        #167:#106     // getColumnCount:()I\n+  #166 = Utf8               java/sql/ResultSetMetaData\n+  #167 = Utf8               getColumnCount\n+  #168 = InterfaceMethodref #158.#169     // java/sql/ResultSet.next:()Z\n+  #169 = NameAndType        #140:#51      // next:()Z\n+  #170 = InterfaceMethodref #158.#171     // java/sql/ResultSet.getObject:(I)Ljava/lang/Object;\n+  #171 = NameAndType        #172:#173     // getObject:(I)Ljava/lang/Object;\n+  #172 = Utf8               getObject\n+  #173 = Utf8               (I)Ljava/lang/Object;\n+  #174 = Class              #175          // java/sql/Clob\n+  #175 = Utf8               java/sql/Clob\n+  #176 = InterfaceMethodref #174.#177     // java/sql/Clob.getCharacterStream:()Ljava/io/Reader;\n+  #177 = NameAndType        #178:#179     // getCharacterStream:()Ljava/io/Reader;\n+  #178 = Utf8               getCharacterStream\n+  #179 = Utf8               ()Ljava/io/Reader;\n+  #180 = Methodref          #10.#181      // org/apache/commons/csv/CSVPrinter.printHeaders:(Ljava/sql/ResultSet;)V\n+  #181 = NameAndType        #182:#183     // printHeaders:(Ljava/sql/ResultSet;)V\n+  #182 = Utf8               printHeaders\n+  #183 = Utf8               (Ljava/sql/ResultSet;)V\n+  #184 = Methodref          #10.#185      // org/apache/commons/csv/CSVPrinter.printRecords:(Ljava/sql/ResultSet;)V\n+  #185 = NameAndType        #156:#183     // printRecords:(Ljava/sql/ResultSet;)V\n+  #186 = Utf8               (Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n+  #187 = Utf8               Code\n+  #188 = Utf8               LineNumberTable\n+  #189 = Utf8               StackMapTable\n+  #190 = Class              #191          // \"[Ljava/lang/String;\"\n+  #191 = Utf8               [Ljava/lang/String;\n+  #192 = Utf8               Exceptions\n+  #193 = Class              #194          // java/io/IOException\n+  #194 = Utf8               java/io/IOException\n+  #195 = Utf8               getOut\n+  #196 = Utf8               ()Ljava/lang/Appendable;\n+  #197 = Class              #198          // java/sql/SQLException\n+  #198 = Utf8               java/sql/SQLException\n+  #199 = Utf8               Signature\n+  #200 = Utf8               (Ljava/lang/Iterable<*>;)V\n+  #201 = Utf8               (Ljava/sql/ResultSet;Z)V\n+  #202 = Utf8               SourceFile\n+  #203 = Utf8               CSVPrinter.java\n+  #204 = Utf8               InnerClasses\n+  #205 = Utf8               Builder\n {\n   private final java.lang.Appendable appendable;\n     descriptor: Ljava/lang/Appendable;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final org.apache.commons.csv.CSVFormat format;\n     descriptor: Lorg/apache/commons/csv/CSVFormat;\n@@ -228,38 +228,38 @@\n \n   public org.apache.commons.csv.CSVPrinter(java.lang.Appendable, org.apache.commons.csv.CSVFormat) throws java.io.IOException;\n     descriptor: (Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=7, args_size=3\n          0: aload_0\n-         1: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #3                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: iconst_1\n-         6: putfield      #3                  // Field newRecord:Z\n+         6: putfield      #9                  // Field newRecord:Z\n          9: aload_1\n-        10: ldc           #4                  // String appendable\n-        12: invokestatic  #5                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+        10: ldc           #15                 // String appendable\n+        12: invokestatic  #17                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n         15: pop\n         16: aload_2\n-        17: ldc           #6                  // String format\n-        19: invokestatic  #5                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+        17: ldc           #23                 // String format\n+        19: invokestatic  #17                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n         22: pop\n         23: aload_0\n         24: aload_1\n-        25: putfield      #7                  // Field appendable:Ljava/lang/Appendable;\n+        25: putfield      #25                 // Field appendable:Ljava/lang/Appendable;\n         28: aload_0\n         29: aload_2\n-        30: invokevirtual #8                  // Method org/apache/commons/csv/CSVFormat.copy:()Lorg/apache/commons/csv/CSVFormat;\n-        33: putfield      #9                  // Field format:Lorg/apache/commons/csv/CSVFormat;\n+        30: invokevirtual #28                 // Method org/apache/commons/csv/CSVFormat.copy:()Lorg/apache/commons/csv/CSVFormat;\n+        33: putfield      #34                 // Field format:Lorg/apache/commons/csv/CSVFormat;\n         36: aload_2\n-        37: invokevirtual #10                 // Method org/apache/commons/csv/CSVFormat.getHeaderComments:()[Ljava/lang/String;\n+        37: invokevirtual #37                 // Method org/apache/commons/csv/CSVFormat.getHeaderComments:()[Ljava/lang/String;\n         40: ifnull        80\n         43: aload_2\n-        44: invokevirtual #10                 // Method org/apache/commons/csv/CSVFormat.getHeaderComments:()[Ljava/lang/String;\n+        44: invokevirtual #37                 // Method org/apache/commons/csv/CSVFormat.getHeaderComments:()[Ljava/lang/String;\n         47: astore_3\n         48: aload_3\n         49: arraylength\n         50: istore        4\n         52: iconst_0\n         53: istore        5\n         55: iload         5\n@@ -267,28 +267,28 @@\n         59: if_icmpge     80\n         62: aload_3\n         63: iload         5\n         65: aaload\n         66: astore        6\n         68: aload_0\n         69: aload         6\n-        71: invokevirtual #11                 // Method printComment:(Ljava/lang/String;)V\n+        71: invokevirtual #41                 // Method printComment:(Ljava/lang/String;)V\n         74: iinc          5, 1\n         77: goto          55\n         80: aload_2\n-        81: invokevirtual #12                 // Method org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n+        81: invokevirtual #45                 // Method org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n         84: ifnull        105\n         87: aload_2\n-        88: invokevirtual #13                 // Method org/apache/commons/csv/CSVFormat.getSkipHeaderRecord:()Z\n+        88: invokevirtual #48                 // Method org/apache/commons/csv/CSVFormat.getSkipHeaderRecord:()Z\n         91: ifne          105\n         94: aload_0\n         95: aload_2\n-        96: invokevirtual #12                 // Method org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n-        99: checkcast     #14                 // class \"[Ljava/lang/Object;\"\n-       102: invokevirtual #15                 // Method printRecord:([Ljava/lang/Object;)V\n+        96: invokevirtual #45                 // Method org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n+        99: checkcast     #52                 // class \"[Ljava/lang/Object;\"\n+       102: invokevirtual #54                 // Method printRecord:([Ljava/lang/Object;)V\n        105: return\n       LineNumberTable:\n         line 95: 0\n         line 77: 4\n         line 96: 9\n         line 97: 16\n         line 99: 23\n@@ -314,15 +314,15 @@\n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_0\n-         2: invokevirtual #16                 // Method close:(Z)V\n+         2: invokevirtual #58                 // Method close:(Z)V\n          5: return\n       LineNumberTable:\n         line 115: 0\n         line 116: 5\n     Exceptions:\n       throws java.io.IOException\n \n@@ -330,27 +330,27 @@\n     descriptor: (Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=2, args_size=2\n          0: iload_1\n          1: ifne          14\n          4: aload_0\n-         5: getfield      #9                  // Field format:Lorg/apache/commons/csv/CSVFormat;\n-         8: invokevirtual #17                 // Method org/apache/commons/csv/CSVFormat.getAutoFlush:()Z\n+         5: getfield      #34                 // Field format:Lorg/apache/commons/csv/CSVFormat;\n+         8: invokevirtual #62                 // Method org/apache/commons/csv/CSVFormat.getAutoFlush:()Z\n         11: ifeq          18\n         14: aload_0\n-        15: invokevirtual #18                 // Method flush:()V\n+        15: invokevirtual #65                 // Method flush:()V\n         18: aload_0\n-        19: getfield      #7                  // Field appendable:Ljava/lang/Appendable;\n-        22: instanceof    #19                 // class java/io/Closeable\n+        19: getfield      #25                 // Field appendable:Ljava/lang/Appendable;\n+        22: instanceof    #68                 // class java/io/Closeable\n         25: ifeq          40\n         28: aload_0\n-        29: getfield      #7                  // Field appendable:Ljava/lang/Appendable;\n-        32: checkcast     #19                 // class java/io/Closeable\n-        35: invokeinterface #20,  1           // InterfaceMethod java/io/Closeable.close:()V\n+        29: getfield      #25                 // Field appendable:Ljava/lang/Appendable;\n+        32: checkcast     #68                 // class java/io/Closeable\n+        35: invokeinterface #70,  1           // InterfaceMethod java/io/Closeable.close:()V\n         40: return\n       LineNumberTable:\n         line 127: 0\n         line 128: 14\n         line 130: 18\n         line 131: 28\n         line 133: 40\n@@ -363,21 +363,21 @@\n \n   public void flush() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field appendable:Ljava/lang/Appendable;\n-         4: instanceof    #21                 // class java/io/Flushable\n+         1: getfield      #25                 // Field appendable:Ljava/lang/Appendable;\n+         4: instanceof    #72                 // class java/io/Flushable\n          7: ifeq          22\n         10: aload_0\n-        11: getfield      #7                  // Field appendable:Ljava/lang/Appendable;\n-        14: checkcast     #21                 // class java/io/Flushable\n-        17: invokeinterface #22,  1           // InterfaceMethod java/io/Flushable.flush:()V\n+        11: getfield      #25                 // Field appendable:Ljava/lang/Appendable;\n+        14: checkcast     #72                 // class java/io/Flushable\n+        17: invokeinterface #74,  1           // InterfaceMethod java/io/Flushable.flush:()V\n         22: return\n       LineNumberTable:\n         line 143: 0\n         line 144: 10\n         line 146: 22\n       StackMapTable: number_of_entries = 1\n         frame_type = 22 /* same */\n@@ -386,35 +386,35 @@\n \n   public java.lang.Appendable getOut();\n     descriptor: ()Ljava/lang/Appendable;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field appendable:Ljava/lang/Appendable;\n+         1: getfield      #25                 // Field appendable:Ljava/lang/Appendable;\n          4: areturn\n       LineNumberTable:\n         line 154: 0\n \n   public void print(java.lang.Object) throws java.io.IOException;\n     descriptor: (Ljava/lang/Object;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #9                  // Field format:Lorg/apache/commons/csv/CSVFormat;\n+         1: getfield      #34                 // Field format:Lorg/apache/commons/csv/CSVFormat;\n          4: aload_1\n          5: aload_0\n-         6: getfield      #7                  // Field appendable:Ljava/lang/Appendable;\n+         6: getfield      #25                 // Field appendable:Ljava/lang/Appendable;\n          9: aload_0\n-        10: getfield      #3                  // Field newRecord:Z\n-        13: invokevirtual #23                 // Method org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n+        10: getfield      #9                  // Field newRecord:Z\n+        13: invokevirtual #75                 // Method org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n         16: aload_0\n         17: iconst_0\n-        18: putfield      #3                  // Field newRecord:Z\n+        18: putfield      #9                  // Field newRecord:Z\n         21: return\n       LineNumberTable:\n         line 166: 0\n         line 167: 16\n         line 168: 21\n     Exceptions:\n       throws java.io.IOException\n@@ -423,91 +423,91 @@\n     descriptor: (Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=4, args_size=2\n          0: aload_1\n          1: ifnull        14\n          4: aload_0\n-         5: getfield      #9                  // Field format:Lorg/apache/commons/csv/CSVFormat;\n-         8: invokevirtual #24                 // Method org/apache/commons/csv/CSVFormat.isCommentMarkerSet:()Z\n+         5: getfield      #34                 // Field format:Lorg/apache/commons/csv/CSVFormat;\n+         8: invokevirtual #79                 // Method org/apache/commons/csv/CSVFormat.isCommentMarkerSet:()Z\n         11: ifne          15\n         14: return\n         15: aload_0\n-        16: getfield      #3                  // Field newRecord:Z\n+        16: getfield      #9                  // Field newRecord:Z\n         19: ifne          26\n         22: aload_0\n-        23: invokevirtual #25                 // Method println:()V\n+        23: invokevirtual #82                 // Method println:()V\n         26: aload_0\n-        27: getfield      #7                  // Field appendable:Ljava/lang/Appendable;\n+        27: getfield      #25                 // Field appendable:Ljava/lang/Appendable;\n         30: aload_0\n-        31: getfield      #9                  // Field format:Lorg/apache/commons/csv/CSVFormat;\n-        34: invokevirtual #26                 // Method org/apache/commons/csv/CSVFormat.getCommentMarker:()Ljava/lang/Character;\n-        37: invokevirtual #27                 // Method java/lang/Character.charValue:()C\n-        40: invokeinterface #28,  2           // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n+        31: getfield      #34                 // Field format:Lorg/apache/commons/csv/CSVFormat;\n+        34: invokevirtual #85                 // Method org/apache/commons/csv/CSVFormat.getCommentMarker:()Ljava/lang/Character;\n+        37: invokevirtual #89                 // Method java/lang/Character.charValue:()C\n+        40: invokeinterface #95,  2           // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n         45: pop\n         46: aload_0\n-        47: getfield      #7                  // Field appendable:Ljava/lang/Appendable;\n+        47: getfield      #25                 // Field appendable:Ljava/lang/Appendable;\n         50: bipush        32\n-        52: invokeinterface #28,  2           // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n+        52: invokeinterface #95,  2           // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n         57: pop\n         58: iconst_0\n         59: istore_2\n         60: iload_2\n         61: aload_1\n-        62: invokevirtual #29                 // Method java/lang/String.length:()I\n+        62: invokevirtual #101                // Method java/lang/String.length:()I\n         65: if_icmpge     181\n         68: aload_1\n         69: iload_2\n-        70: invokevirtual #30                 // Method java/lang/String.charAt:(I)C\n+        70: invokevirtual #107                // Method java/lang/String.charAt:(I)C\n         73: istore_3\n         74: iload_3\n         75: lookupswitch  { // 2\n                       10: 125\n                       13: 100\n                  default: 164\n             }\n        100: iload_2\n        101: iconst_1\n        102: iadd\n        103: aload_1\n-       104: invokevirtual #29                 // Method java/lang/String.length:()I\n+       104: invokevirtual #101                // Method java/lang/String.length:()I\n        107: if_icmpge     125\n        110: aload_1\n        111: iload_2\n        112: iconst_1\n        113: iadd\n-       114: invokevirtual #30                 // Method java/lang/String.charAt:(I)C\n+       114: invokevirtual #107                // Method java/lang/String.charAt:(I)C\n        117: bipush        10\n        119: if_icmpne     125\n        122: iinc          2, 1\n        125: aload_0\n-       126: invokevirtual #25                 // Method println:()V\n+       126: invokevirtual #82                 // Method println:()V\n        129: aload_0\n-       130: getfield      #7                  // Field appendable:Ljava/lang/Appendable;\n+       130: getfield      #25                 // Field appendable:Ljava/lang/Appendable;\n        133: aload_0\n-       134: getfield      #9                  // Field format:Lorg/apache/commons/csv/CSVFormat;\n-       137: invokevirtual #26                 // Method org/apache/commons/csv/CSVFormat.getCommentMarker:()Ljava/lang/Character;\n-       140: invokevirtual #27                 // Method java/lang/Character.charValue:()C\n-       143: invokeinterface #28,  2           // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n+       134: getfield      #34                 // Field format:Lorg/apache/commons/csv/CSVFormat;\n+       137: invokevirtual #85                 // Method org/apache/commons/csv/CSVFormat.getCommentMarker:()Ljava/lang/Character;\n+       140: invokevirtual #89                 // Method java/lang/Character.charValue:()C\n+       143: invokeinterface #95,  2           // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n        148: pop\n        149: aload_0\n-       150: getfield      #7                  // Field appendable:Ljava/lang/Appendable;\n+       150: getfield      #25                 // Field appendable:Ljava/lang/Appendable;\n        153: bipush        32\n-       155: invokeinterface #28,  2           // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n+       155: invokeinterface #95,  2           // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n        160: pop\n        161: goto          175\n        164: aload_0\n-       165: getfield      #7                  // Field appendable:Ljava/lang/Appendable;\n+       165: getfield      #25                 // Field appendable:Ljava/lang/Appendable;\n        168: iload_3\n-       169: invokeinterface #28,  2           // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n+       169: invokeinterface #95,  2           // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n        174: pop\n        175: iinc          2, 1\n        178: goto          60\n        181: aload_0\n-       182: invokevirtual #25                 // Method println:()V\n+       182: invokevirtual #82                 // Method println:()V\n        185: return\n       LineNumberTable:\n         line 192: 0\n         line 193: 14\n         line 195: 15\n         line 196: 22\n         line 198: 26\n@@ -547,70 +547,70 @@\n   public void printHeaders(java.sql.ResultSet) throws java.io.IOException, java.sql.SQLException;\n     descriptor: (Ljava/sql/ResultSet;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_0\n-         2: getfield      #9                  // Field format:Lorg/apache/commons/csv/CSVFormat;\n-         5: invokevirtual #31                 // Method org/apache/commons/csv/CSVFormat.builder:()Lorg/apache/commons/csv/CSVFormat$Builder;\n+         2: getfield      #34                 // Field format:Lorg/apache/commons/csv/CSVFormat;\n+         5: invokevirtual #111                // Method org/apache/commons/csv/CSVFormat.builder:()Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: aload_1\n-         9: invokevirtual #32                 // Method org/apache/commons/csv/CSVFormat$Builder.setHeader:(Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-        12: invokevirtual #33                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n-        15: invokevirtual #12                 // Method org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n-        18: checkcast     #14                 // class \"[Ljava/lang/Object;\"\n-        21: invokevirtual #15                 // Method printRecord:([Ljava/lang/Object;)V\n+         9: invokevirtual #115                // Method org/apache/commons/csv/CSVFormat$Builder.setHeader:(Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+        12: invokevirtual #121                // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n+        15: invokevirtual #45                 // Method org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n+        18: checkcast     #52                 // class \"[Ljava/lang/Object;\"\n+        21: invokevirtual #54                 // Method printRecord:([Ljava/lang/Object;)V\n         24: return\n       LineNumberTable:\n         line 230: 0\n         line 231: 24\n     Exceptions:\n       throws java.io.IOException, java.sql.SQLException\n \n   public void println() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #9                  // Field format:Lorg/apache/commons/csv/CSVFormat;\n+         1: getfield      #34                 // Field format:Lorg/apache/commons/csv/CSVFormat;\n          4: aload_0\n-         5: getfield      #7                  // Field appendable:Ljava/lang/Appendable;\n-         8: invokevirtual #34                 // Method org/apache/commons/csv/CSVFormat.println:(Ljava/lang/Appendable;)V\n+         5: getfield      #25                 // Field appendable:Ljava/lang/Appendable;\n+         8: invokevirtual #124                // Method org/apache/commons/csv/CSVFormat.println:(Ljava/lang/Appendable;)V\n         11: aload_0\n         12: iconst_1\n-        13: putfield      #3                  // Field newRecord:Z\n+        13: putfield      #9                  // Field newRecord:Z\n         16: return\n       LineNumberTable:\n         line 240: 0\n         line 241: 11\n         line 242: 16\n     Exceptions:\n       throws java.io.IOException\n \n   public void printRecord(java.lang.Iterable<?>) throws java.io.IOException;\n     descriptor: (Ljava/lang/Iterable;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=4, args_size=2\n          0: aload_1\n-         1: invokeinterface #35,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;\n+         1: invokeinterface #127,  1          // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;\n          6: astore_2\n          7: aload_2\n-         8: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n+         8: invokeinterface #133,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n         13: ifeq          31\n         16: aload_2\n-        17: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        17: invokeinterface #138,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n         22: astore_3\n         23: aload_0\n         24: aload_3\n-        25: invokevirtual #38                 // Method print:(Ljava/lang/Object;)V\n+        25: invokevirtual #142                // Method print:(Ljava/lang/Object;)V\n         28: goto          7\n         31: aload_0\n-        32: invokevirtual #25                 // Method println:()V\n+        32: invokevirtual #82                 // Method println:()V\n         35: return\n       LineNumberTable:\n         line 258: 0\n         line 259: 23\n         line 260: 28\n         line 261: 31\n         line 262: 35\n@@ -618,70 +618,70 @@\n         frame_type = 252 /* append */\n           offset_delta = 7\n           locals = [ class java/util/Iterator ]\n         frame_type = 250 /* chop */\n           offset_delta = 23\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #87                          // (Ljava/lang/Iterable<*>;)V\n+    Signature: #200                         // (Ljava/lang/Iterable<*>;)V\n \n   public void printRecord(java.lang.Object...) throws java.io.IOException;\n     descriptor: ([Ljava/lang/Object;)V\n     flags: (0x0081) ACC_PUBLIC, ACC_VARARGS\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokestatic  #39                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-         5: invokevirtual #40                 // Method printRecord:(Ljava/lang/Iterable;)V\n+         2: invokestatic  #145                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+         5: invokevirtual #151                // Method printRecord:(Ljava/lang/Iterable;)V\n          8: return\n       LineNumberTable:\n         line 278: 0\n         line 279: 8\n     Exceptions:\n       throws java.io.IOException\n \n   public void printRecords(java.lang.Iterable<?>) throws java.io.IOException;\n     descriptor: (Ljava/lang/Iterable;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=4, args_size=2\n          0: aload_1\n-         1: invokeinterface #35,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;\n+         1: invokeinterface #127,  1          // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;\n          6: astore_2\n          7: aload_2\n-         8: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n+         8: invokeinterface #133,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n         13: ifeq          74\n         16: aload_2\n-        17: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        17: invokeinterface #138,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n         22: astore_3\n         23: aload_3\n-        24: instanceof    #14                 // class \"[Ljava/lang/Object;\"\n+        24: instanceof    #52                 // class \"[Ljava/lang/Object;\"\n         27: ifeq          41\n         30: aload_0\n         31: aload_3\n-        32: checkcast     #14                 // class \"[Ljava/lang/Object;\"\n-        35: invokevirtual #15                 // Method printRecord:([Ljava/lang/Object;)V\n+        32: checkcast     #52                 // class \"[Ljava/lang/Object;\"\n+        35: invokevirtual #54                 // Method printRecord:([Ljava/lang/Object;)V\n         38: goto          71\n         41: aload_3\n-        42: instanceof    #41                 // class java/lang/Iterable\n+        42: instanceof    #128                // class java/lang/Iterable\n         45: ifeq          59\n         48: aload_0\n         49: aload_3\n-        50: checkcast     #41                 // class java/lang/Iterable\n-        53: invokevirtual #40                 // Method printRecord:(Ljava/lang/Iterable;)V\n+        50: checkcast     #128                // class java/lang/Iterable\n+        53: invokevirtual #151                // Method printRecord:(Ljava/lang/Iterable;)V\n         56: goto          71\n         59: aload_0\n         60: iconst_1\n-        61: anewarray     #42                 // class java/lang/Object\n+        61: anewarray     #4                  // class java/lang/Object\n         64: dup\n         65: iconst_0\n         66: aload_3\n         67: aastore\n-        68: invokevirtual #15                 // Method printRecord:([Ljava/lang/Object;)V\n+        68: invokevirtual #54                 // Method printRecord:([Ljava/lang/Object;)V\n         71: goto          7\n         74: return\n       LineNumberTable:\n         line 321: 0\n         line 322: 23\n         line 323: 30\n         line 324: 41\n@@ -699,67 +699,67 @@\n         frame_type = 17 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 11\n         frame_type = 250 /* chop */\n           offset_delta = 2\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #87                          // (Ljava/lang/Iterable<*>;)V\n+    Signature: #200                         // (Ljava/lang/Iterable<*>;)V\n \n   public void printRecords(java.lang.Object...) throws java.io.IOException;\n     descriptor: ([Ljava/lang/Object;)V\n     flags: (0x0081) ACC_PUBLIC, ACC_VARARGS\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokestatic  #39                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-         5: invokevirtual #43                 // Method printRecords:(Ljava/lang/Iterable;)V\n+         2: invokestatic  #145                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+         5: invokevirtual #154                // Method printRecords:(Ljava/lang/Iterable;)V\n          8: return\n       LineNumberTable:\n         line 372: 0\n         line 373: 8\n     Exceptions:\n       throws java.io.IOException\n \n   public void printRecords(java.sql.ResultSet) throws java.sql.SQLException, java.io.IOException;\n     descriptor: (Ljava/sql/ResultSet;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=5, args_size=2\n          0: aload_1\n-         1: invokeinterface #44,  1           // InterfaceMethod java/sql/ResultSet.getMetaData:()Ljava/sql/ResultSetMetaData;\n-         6: invokeinterface #45,  1           // InterfaceMethod java/sql/ResultSetMetaData.getColumnCount:()I\n+         1: invokeinterface #157,  1          // InterfaceMethod java/sql/ResultSet.getMetaData:()Ljava/sql/ResultSetMetaData;\n+         6: invokeinterface #163,  1          // InterfaceMethod java/sql/ResultSetMetaData.getColumnCount:()I\n         11: istore_2\n         12: aload_1\n-        13: invokeinterface #46,  1           // InterfaceMethod java/sql/ResultSet.next:()Z\n+        13: invokeinterface #168,  1          // InterfaceMethod java/sql/ResultSet.next:()Z\n         18: ifeq          77\n         21: iconst_1\n         22: istore_3\n         23: iload_3\n         24: iload_2\n         25: if_icmpgt     70\n         28: aload_1\n         29: iload_3\n-        30: invokeinterface #47,  2           // InterfaceMethod java/sql/ResultSet.getObject:(I)Ljava/lang/Object;\n+        30: invokeinterface #170,  2          // InterfaceMethod java/sql/ResultSet.getObject:(I)Ljava/lang/Object;\n         35: astore        4\n         37: aload_0\n         38: aload         4\n-        40: instanceof    #48                 // class java/sql/Clob\n+        40: instanceof    #174                // class java/sql/Clob\n         43: ifeq          59\n         46: aload         4\n-        48: checkcast     #48                 // class java/sql/Clob\n-        51: invokeinterface #49,  1           // InterfaceMethod java/sql/Clob.getCharacterStream:()Ljava/io/Reader;\n+        48: checkcast     #174                // class java/sql/Clob\n+        51: invokeinterface #176,  1          // InterfaceMethod java/sql/Clob.getCharacterStream:()Ljava/io/Reader;\n         56: goto          61\n         59: aload         4\n-        61: invokevirtual #38                 // Method print:(Ljava/lang/Object;)V\n+        61: invokevirtual #142                // Method print:(Ljava/lang/Object;)V\n         64: iinc          3, 1\n         67: goto          23\n         70: aload_0\n-        71: invokevirtual #25                 // Method println:()V\n+        71: invokevirtual #82                 // Method println:()V\n         74: goto          12\n         77: return\n       LineNumberTable:\n         line 386: 0\n         line 387: 12\n         line 388: 21\n         line 389: 28\n@@ -793,25 +793,25 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=3\n          0: iload_2\n          1: ifeq          9\n          4: aload_0\n          5: aload_1\n-         6: invokevirtual #50                 // Method printHeaders:(Ljava/sql/ResultSet;)V\n+         6: invokevirtual #180                // Method printHeaders:(Ljava/sql/ResultSet;)V\n          9: aload_0\n         10: aload_1\n-        11: invokevirtual #51                 // Method printRecords:(Ljava/sql/ResultSet;)V\n+        11: invokevirtual #184                // Method printRecords:(Ljava/sql/ResultSet;)V\n         14: return\n       LineNumberTable:\n         line 407: 0\n         line 408: 4\n         line 410: 9\n         line 411: 14\n       StackMapTable: number_of_entries = 1\n         frame_type = 9 /* same */\n     Exceptions:\n       throws java.sql.SQLException, java.io.IOException\n }\n SourceFile: \"CSVPrinter.java\"\n InnerClasses:\n-  public static #182= #125 of #65;        // Builder=class org/apache/commons/csv/CSVFormat$Builder of class org/apache/commons/csv/CSVFormat\n+  public static #205= #116 of #29;        // Builder=class org/apache/commons/csv/CSVFormat$Builder of class org/apache/commons/csv/CSVFormat\n"}]}
