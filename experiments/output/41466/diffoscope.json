{"diffoscope-json-version": 1, "source1": "first/ZipMethod.class", "source2": "second/ZipMethod.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,55 +3,57 @@\n \n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n \n public enum ZipMethod\n {\n-    STORED(0), \n-    UNSHRINKING(1), \n-    EXPANDING_LEVEL_1(2), \n-    EXPANDING_LEVEL_2(3), \n-    EXPANDING_LEVEL_3(4), \n-    EXPANDING_LEVEL_4(5), \n-    IMPLODING(6), \n-    TOKENIZATION(7), \n-    DEFLATED(8), \n-    ENHANCED_DEFLATED(9), \n-    PKWARE_IMPLODING(10), \n-    BZIP2(12), \n-    LZMA(14), \n-    XZ(95), \n-    JPEG(96), \n-    WAVPACK(97), \n-    PPMD(98), \n-    AES_ENCRYPTED(99), \n-    UNKNOWN;\n+    STORED(\"STORED\", 0, 0), \n+    UNSHRINKING(\"UNSHRINKING\", 1, 1), \n+    EXPANDING_LEVEL_1(\"EXPANDING_LEVEL_1\", 2, 2), \n+    EXPANDING_LEVEL_2(\"EXPANDING_LEVEL_2\", 3, 3), \n+    EXPANDING_LEVEL_3(\"EXPANDING_LEVEL_3\", 4, 4), \n+    EXPANDING_LEVEL_4(\"EXPANDING_LEVEL_4\", 5, 5), \n+    IMPLODING(\"IMPLODING\", 6, 6), \n+    TOKENIZATION(\"TOKENIZATION\", 7, 7), \n+    DEFLATED(\"DEFLATED\", 8, 8), \n+    ENHANCED_DEFLATED(\"ENHANCED_DEFLATED\", 9, 9), \n+    PKWARE_IMPLODING(\"PKWARE_IMPLODING\", 10, 10), \n+    BZIP2(\"BZIP2\", 11, 12), \n+    LZMA(\"LZMA\", 12, 14), \n+    XZ(\"XZ\", 13, 95), \n+    JPEG(\"JPEG\", 14, 96), \n+    WAVPACK(\"WAVPACK\", 15, 97), \n+    PPMD(\"PPMD\", 16, 98), \n+    AES_ENCRYPTED(\"AES_ENCRYPTED\", 17, 99), \n+    UNKNOWN(\"UNKNOWN\", 18);\n     \n     static final int UNKNOWN_CODE = -1;\n     private static final Map<Integer, ZipMethod> codeToEnum;\n     private final int code;\n     \n+    static {\n+        final Map<Integer, ZipMethod> cte = new HashMap<Integer, ZipMethod>();\n+        ZipMethod[] values;\n+        for (int length = (values = values()).length, i = 0; i < length; ++i) {\n+            final ZipMethod method = values[i];\n+            cte.put(Integer.valueOf(method.getCode()), method);\n+        }\n+        codeToEnum = Collections.unmodifiableMap((Map<? extends Integer, ? extends ZipMethod>)cte);\n+    }\n+    \n     public static ZipMethod getMethodByCode(final int code) {\n         return ZipMethod.codeToEnum.get(Integer.valueOf(code));\n     }\n     \n-    private ZipMethod() {\n-        this(-1);\n+    private ZipMethod(final String s, final int n) {\n+        this(s, n, -1);\n     }\n     \n-    private ZipMethod(final int code) {\n+    private ZipMethod(final String name, final int ordinal, final int code) {\n         this.code = code;\n     }\n     \n     public int getCode() {\n         return this.code;\n     }\n-    \n-    static {\n-        final Map<Integer, ZipMethod> cte = new HashMap<Integer, ZipMethod>();\n-        for (final ZipMethod method : values()) {\n-            cte.put(Integer.valueOf(method.getCode()), method);\n-        }\n-        codeToEnum = Collections.unmodifiableMap((Map<? extends Integer, ? extends ZipMethod>)cte);\n-    }\n }\n"}]}
