{"diffoscope-json-version": 1, "source1": "first/DoubleBitsFromCharSequence.class", "source2": "second/DoubleBitsFromCharSequence.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,142 +1,142 @@\n-  SHA-256 checksum eca4c053000c2f0ed3025b65e49ab585841622ad9fd37b2641c4991bfc67aee0\n+  SHA-256 checksum 15db399d7d152df110514ed0fce40cc1e4a5f44a5dbe4c84ccbdb899ff5c2de2\n   Compiled from \"DoubleBitsFromCharSequence.java\"\n final class com.fasterxml.jackson.core.io.doubleparser.DoubleBitsFromCharSequence extends com.fasterxml.jackson.core.io.doubleparser.AbstractFloatingPointBitsFromCharSequence\n   minor version: 0\n   major version: 52\n   flags: (0x0030) ACC_FINAL, ACC_SUPER\n-  this_class: #16                         // com/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharSequence\n-  super_class: #17                        // com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharSequence\n+  this_class: #1                          // com/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharSequence\n+  super_class: #3                         // com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharSequence\n   interfaces: 0, fields: 0, methods: 6, attributes: 1\n Constant pool:\n-   #1 = Methodref          #17.#49        // com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharSequence.\"<init>\":()V\n-   #2 = Class              #50            // java/lang/Double\n-   #3 = Double             NaNd\n-   #5 = Methodref          #2.#51         // java/lang/Double.doubleToRawLongBits:(D)J\n-   #6 = Double             -Infinityd\n-   #8 = Double             Infinityd\n-  #10 = Methodref          #52.#53        // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryDecFloatToDoubleTruncated:(ZJIZI)D\n-  #11 = Methodref          #2.#54         // java/lang/Double.isNaN:(D)Z\n-  #12 = InterfaceMethodref #55.#56        // java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;\n-  #13 = InterfaceMethodref #55.#57        // java/lang/CharSequence.toString:()Ljava/lang/String;\n-  #14 = Methodref          #2.#58         // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n-  #15 = Methodref          #52.#59        // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryHexFloatToDoubleTruncated:(ZJJZJ)D\n-  #16 = Class              #60            // com/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharSequence\n-  #17 = Class              #61            // com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharSequence\n-  #18 = Utf8               <init>\n-  #19 = Utf8               ()V\n-  #20 = Utf8               Code\n-  #21 = Utf8               LineNumberTable\n-  #22 = Utf8               LocalVariableTable\n-  #23 = Utf8               this\n-  #24 = Utf8               Lcom/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharSequence;\n-  #25 = Utf8               nan\n-  #26 = Utf8               ()J\n-  #27 = Utf8               negativeInfinity\n-  #28 = Utf8               positiveInfinity\n-  #29 = Utf8               valueOfFloatLiteral\n-  #30 = Utf8               (Ljava/lang/CharSequence;IIZJIZI)J\n-  #31 = Utf8               str\n-  #32 = Utf8               Ljava/lang/CharSequence;\n-  #33 = Utf8               startIndex\n-  #34 = Utf8               I\n-  #35 = Utf8               endIndex\n-  #36 = Utf8               isNegative\n-  #37 = Utf8               Z\n-  #38 = Utf8               significand\n-  #39 = Utf8               J\n-  #40 = Utf8               exponent\n-  #41 = Utf8               isSignificandTruncated\n-  #42 = Utf8               exponentOfTruncatedSignificand\n-  #43 = Utf8               d\n-  #44 = Utf8               D\n-  #45 = Utf8               StackMapTable\n-  #46 = Utf8               valueOfHexLiteral\n-  #47 = Utf8               SourceFile\n-  #48 = Utf8               DoubleBitsFromCharSequence.java\n-  #49 = NameAndType        #18:#19        // \"<init>\":()V\n-  #50 = Utf8               java/lang/Double\n-  #51 = NameAndType        #62:#63        // doubleToRawLongBits:(D)J\n-  #52 = Class              #64            // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n-  #53 = NameAndType        #65:#66        // tryDecFloatToDoubleTruncated:(ZJIZI)D\n-  #54 = NameAndType        #67:#68        // isNaN:(D)Z\n-  #55 = Class              #69            // java/lang/CharSequence\n-  #56 = NameAndType        #70:#71        // subSequence:(II)Ljava/lang/CharSequence;\n-  #57 = NameAndType        #72:#73        // toString:()Ljava/lang/String;\n-  #58 = NameAndType        #74:#75        // parseDouble:(Ljava/lang/String;)D\n-  #59 = NameAndType        #76:#77        // tryHexFloatToDoubleTruncated:(ZJJZJ)D\n-  #60 = Utf8               com/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharSequence\n-  #61 = Utf8               com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharSequence\n-  #62 = Utf8               doubleToRawLongBits\n-  #63 = Utf8               (D)J\n-  #64 = Utf8               com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n-  #65 = Utf8               tryDecFloatToDoubleTruncated\n-  #66 = Utf8               (ZJIZI)D\n-  #67 = Utf8               isNaN\n-  #68 = Utf8               (D)Z\n-  #69 = Utf8               java/lang/CharSequence\n-  #70 = Utf8               subSequence\n-  #71 = Utf8               (II)Ljava/lang/CharSequence;\n-  #72 = Utf8               toString\n-  #73 = Utf8               ()Ljava/lang/String;\n-  #74 = Utf8               parseDouble\n-  #75 = Utf8               (Ljava/lang/String;)D\n-  #76 = Utf8               tryHexFloatToDoubleTruncated\n-  #77 = Utf8               (ZJJZJ)D\n+   #1 = Class              #2             // com/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharSequence\n+   #2 = Utf8               com/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharSequence\n+   #3 = Class              #4             // com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharSequence\n+   #4 = Utf8               com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharSequence\n+   #5 = Utf8               <init>\n+   #6 = Utf8               ()V\n+   #7 = Utf8               Code\n+   #8 = Methodref          #3.#9          // com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharSequence.\"<init>\":()V\n+   #9 = NameAndType        #5:#6          // \"<init>\":()V\n+  #10 = Utf8               LineNumberTable\n+  #11 = Utf8               LocalVariableTable\n+  #12 = Utf8               this\n+  #13 = Utf8               Lcom/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharSequence;\n+  #14 = Utf8               nan\n+  #15 = Utf8               ()J\n+  #16 = Double             NaNd\n+  #18 = Methodref          #19.#21        // java/lang/Double.doubleToRawLongBits:(D)J\n+  #19 = Class              #20            // java/lang/Double\n+  #20 = Utf8               java/lang/Double\n+  #21 = NameAndType        #22:#23        // doubleToRawLongBits:(D)J\n+  #22 = Utf8               doubleToRawLongBits\n+  #23 = Utf8               (D)J\n+  #24 = Utf8               negativeInfinity\n+  #25 = Double             -Infinityd\n+  #27 = Utf8               positiveInfinity\n+  #28 = Double             Infinityd\n+  #30 = Utf8               valueOfFloatLiteral\n+  #31 = Utf8               (Ljava/lang/CharSequence;IIZJIZI)J\n+  #32 = Methodref          #33.#35        // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryDecFloatToDoubleTruncated:(ZJIZI)D\n+  #33 = Class              #34            // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n+  #34 = Utf8               com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n+  #35 = NameAndType        #36:#37        // tryDecFloatToDoubleTruncated:(ZJIZI)D\n+  #36 = Utf8               tryDecFloatToDoubleTruncated\n+  #37 = Utf8               (ZJIZI)D\n+  #38 = Methodref          #19.#39        // java/lang/Double.isNaN:(D)Z\n+  #39 = NameAndType        #40:#41        // isNaN:(D)Z\n+  #40 = Utf8               isNaN\n+  #41 = Utf8               (D)Z\n+  #42 = InterfaceMethodref #43.#45        // java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;\n+  #43 = Class              #44            // java/lang/CharSequence\n+  #44 = Utf8               java/lang/CharSequence\n+  #45 = NameAndType        #46:#47        // subSequence:(II)Ljava/lang/CharSequence;\n+  #46 = Utf8               subSequence\n+  #47 = Utf8               (II)Ljava/lang/CharSequence;\n+  #48 = InterfaceMethodref #43.#49        // java/lang/CharSequence.toString:()Ljava/lang/String;\n+  #49 = NameAndType        #50:#51        // toString:()Ljava/lang/String;\n+  #50 = Utf8               toString\n+  #51 = Utf8               ()Ljava/lang/String;\n+  #52 = Methodref          #19.#53        // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n+  #53 = NameAndType        #54:#55        // parseDouble:(Ljava/lang/String;)D\n+  #54 = Utf8               parseDouble\n+  #55 = Utf8               (Ljava/lang/String;)D\n+  #56 = Utf8               str\n+  #57 = Utf8               Ljava/lang/CharSequence;\n+  #58 = Utf8               startIndex\n+  #59 = Utf8               I\n+  #60 = Utf8               endIndex\n+  #61 = Utf8               isNegative\n+  #62 = Utf8               Z\n+  #63 = Utf8               significand\n+  #64 = Utf8               J\n+  #65 = Utf8               exponent\n+  #66 = Utf8               isSignificandTruncated\n+  #67 = Utf8               exponentOfTruncatedSignificand\n+  #68 = Utf8               d\n+  #69 = Utf8               D\n+  #70 = Utf8               StackMapTable\n+  #71 = Utf8               valueOfHexLiteral\n+  #72 = Methodref          #33.#73        // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryHexFloatToDoubleTruncated:(ZJJZJ)D\n+  #73 = NameAndType        #74:#75        // tryHexFloatToDoubleTruncated:(ZJJZJ)D\n+  #74 = Utf8               tryHexFloatToDoubleTruncated\n+  #75 = Utf8               (ZJJZJ)D\n+  #76 = Utf8               SourceFile\n+  #77 = Utf8               DoubleBitsFromCharSequence.java\n {\n   public com.fasterxml.jackson.core.io.doubleparser.DoubleBitsFromCharSequence();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #1                  // Method com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharSequence.\"<init>\":()V\n+         1: invokespecial #8                  // Method com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharSequence.\"<init>\":()V\n          4: return\n       LineNumberTable:\n         line 21: 0\n         line 23: 4\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lcom/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharSequence;\n \n   long nan();\n     descriptor: ()J\n     flags: (0x0000)\n     Code:\n       stack=2, locals=1, args_size=1\n-         0: ldc2_w        #3                  // double NaNd\n-         3: invokestatic  #5                  // Method java/lang/Double.doubleToRawLongBits:(D)J\n+         0: ldc2_w        #16                 // double NaNd\n+         3: invokestatic  #18                 // Method java/lang/Double.doubleToRawLongBits:(D)J\n          6: lreturn\n       LineNumberTable:\n         line 27: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lcom/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharSequence;\n \n   long negativeInfinity();\n     descriptor: ()J\n     flags: (0x0000)\n     Code:\n       stack=2, locals=1, args_size=1\n-         0: ldc2_w        #6                  // double -Infinityd\n-         3: invokestatic  #5                  // Method java/lang/Double.doubleToRawLongBits:(D)J\n+         0: ldc2_w        #25                 // double -Infinityd\n+         3: invokestatic  #18                 // Method java/lang/Double.doubleToRawLongBits:(D)J\n          6: lreturn\n       LineNumberTable:\n         line 32: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lcom/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharSequence;\n \n   long positiveInfinity();\n     descriptor: ()J\n     flags: (0x0000)\n     Code:\n       stack=2, locals=1, args_size=1\n-         0: ldc2_w        #8                  // double Infinityd\n-         3: invokestatic  #5                  // Method java/lang/Double.doubleToRawLongBits:(D)J\n+         0: ldc2_w        #28                 // double Infinityd\n+         3: invokestatic  #18                 // Method java/lang/Double.doubleToRawLongBits:(D)J\n          6: lreturn\n       LineNumberTable:\n         line 37: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lcom/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharSequence;\n \n@@ -146,31 +146,33 @@\n     Code:\n       stack=6, locals=12, args_size=9\n          0: iload         4\n          2: lload         5\n          4: iload         7\n          6: iload         8\n          8: iload         9\n-        10: invokestatic  #10                 // Method com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryDecFloatToDoubleTruncated:(ZJIZI)D\n+        10: invokestatic  #32                 // Method com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryDecFloatToDoubleTruncated:(ZJIZI)D\n         13: dstore        10\n         15: dload         10\n-        17: invokestatic  #11                 // Method java/lang/Double.isNaN:(D)Z\n+        17: invokestatic  #38                 // Method java/lang/Double.isNaN:(D)Z\n         20: ifeq          42\n         23: aload_1\n         24: iload_2\n         25: iload_3\n-        26: invokeinterface #12,  3           // InterfaceMethod java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;\n-        31: invokeinterface #13,  1           // InterfaceMethod java/lang/CharSequence.toString:()Ljava/lang/String;\n-        36: invokestatic  #14                 // Method java/lang/Double.parseDouble:(Ljava/lang/String;)D\n+        26: invokeinterface #42,  3           // InterfaceMethod java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;\n+        31: invokeinterface #48,  1           // InterfaceMethod java/lang/CharSequence.toString:()Ljava/lang/String;\n+        36: invokestatic  #52                 // Method java/lang/Double.parseDouble:(Ljava/lang/String;)D\n         39: goto          44\n         42: dload         10\n-        44: invokestatic  #5                  // Method java/lang/Double.doubleToRawLongBits:(D)J\n+        44: invokestatic  #18                 // Method java/lang/Double.doubleToRawLongBits:(D)J\n         47: lreturn\n       LineNumberTable:\n         line 44: 0\n+        line 45: 8\n+        line 44: 10\n         line 46: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      48     0  this   Lcom/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharSequence;\n             0      48     1   str   Ljava/lang/CharSequence;\n             0      48     2 startIndex   I\n             0      48     3 endIndex   I\n@@ -195,31 +197,33 @@\n          0: iload         4\n          2: lload         5\n          4: iload         7\n          6: i2l\n          7: iload         8\n          9: iload         9\n         11: i2l\n-        12: invokestatic  #15                 // Method com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryHexFloatToDoubleTruncated:(ZJJZJ)D\n+        12: invokestatic  #72                 // Method com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryHexFloatToDoubleTruncated:(ZJJZJ)D\n         15: dstore        10\n         17: dload         10\n-        19: invokestatic  #11                 // Method java/lang/Double.isNaN:(D)Z\n+        19: invokestatic  #38                 // Method java/lang/Double.isNaN:(D)Z\n         22: ifeq          44\n         25: aload_1\n         26: iload_2\n         27: iload_3\n-        28: invokeinterface #12,  3           // InterfaceMethod java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;\n-        33: invokeinterface #13,  1           // InterfaceMethod java/lang/CharSequence.toString:()Ljava/lang/String;\n-        38: invokestatic  #14                 // Method java/lang/Double.parseDouble:(Ljava/lang/String;)D\n+        28: invokeinterface #42,  3           // InterfaceMethod java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;\n+        33: invokeinterface #48,  1           // InterfaceMethod java/lang/CharSequence.toString:()Ljava/lang/String;\n+        38: invokestatic  #52                 // Method java/lang/Double.parseDouble:(Ljava/lang/String;)D\n         41: goto          46\n         44: dload         10\n-        46: invokestatic  #5                  // Method java/lang/Double.doubleToRawLongBits:(D)J\n+        46: invokestatic  #18                 // Method java/lang/Double.doubleToRawLongBits:(D)J\n         49: lreturn\n       LineNumberTable:\n         line 53: 0\n+        line 54: 9\n+        line 53: 12\n         line 55: 17\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      50     0  this   Lcom/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharSequence;\n             0      50     1   str   Ljava/lang/CharSequence;\n             0      50     2 startIndex   I\n             0      50     3 endIndex   I\n"}]}
