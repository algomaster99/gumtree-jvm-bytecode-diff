{"diffoscope-json-version": 1, "source1": "first/ArchUtils.class", "source2": "second/ArchUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,62 +15,56 @@\n         init_IA64_32Bit();\n         init_IA64_64Bit();\n         init_PPC_32Bit();\n         init_PPC_64Bit();\n     }\n     \n     private static void init_X86_32Bit() {\n-        final Processor processor = new Processor(Processor.Arch.BIT_32, Processor.Type.X86);\n-        addProcessors(processor, \"x86\", \"i386\", \"i486\", \"i586\", \"i686\", \"pentium\");\n+        addProcessors(new Processor(Processor.Arch.BIT_32, Processor.Type.X86), \"x86\", \"i386\", \"i486\", \"i586\", \"i686\", \"pentium\");\n     }\n     \n     private static void init_X86_64Bit() {\n-        final Processor processor = new Processor(Processor.Arch.BIT_64, Processor.Type.X86);\n-        addProcessors(processor, \"x86_64\", \"amd64\", \"em64t\", \"universal\");\n+        addProcessors(new Processor(Processor.Arch.BIT_64, Processor.Type.X86), \"x86_64\", \"amd64\", \"em64t\", \"universal\");\n     }\n     \n     private static void init_IA64_32Bit() {\n-        final Processor processor = new Processor(Processor.Arch.BIT_32, Processor.Type.IA_64);\n-        addProcessors(processor, \"ia64_32\", \"ia64n\");\n+        addProcessors(new Processor(Processor.Arch.BIT_32, Processor.Type.IA_64), \"ia64_32\", \"ia64n\");\n     }\n     \n     private static void init_IA64_64Bit() {\n-        final Processor processor = new Processor(Processor.Arch.BIT_64, Processor.Type.IA_64);\n-        addProcessors(processor, \"ia64\", \"ia64w\");\n+        addProcessors(new Processor(Processor.Arch.BIT_64, Processor.Type.IA_64), \"ia64\", \"ia64w\");\n     }\n     \n     private static void init_PPC_32Bit() {\n-        final Processor processor = new Processor(Processor.Arch.BIT_32, Processor.Type.PPC);\n-        addProcessors(processor, \"ppc\", \"power\", \"powerpc\", \"power_pc\", \"power_rs\");\n+        addProcessors(new Processor(Processor.Arch.BIT_32, Processor.Type.PPC), \"ppc\", \"power\", \"powerpc\", \"power_pc\", \"power_rs\");\n     }\n     \n     private static void init_PPC_64Bit() {\n-        final Processor processor = new Processor(Processor.Arch.BIT_64, Processor.Type.PPC);\n-        addProcessors(processor, \"ppc64\", \"power64\", \"powerpc64\", \"power_pc64\", \"power_rs64\");\n+        addProcessors(new Processor(Processor.Arch.BIT_64, Processor.Type.PPC), \"ppc64\", \"power64\", \"powerpc64\", \"power_pc64\", \"power_rs64\");\n     }\n     \n-    private static void addProcessor(final String key, final Processor processor) {\n-        if (ArchUtils.ARCH_TO_PROCESSOR.containsKey(key)) {\n-            throw new IllegalStateException(\"Key \" + key + \" already exists in processor map\");\n+    private static void addProcessor(final String str, final Processor processor) {\n+        if (ArchUtils.ARCH_TO_PROCESSOR.containsKey(str)) {\n+            throw new IllegalStateException(\"Key \" + str + \" already exists in processor map\");\n         }\n-        ArchUtils.ARCH_TO_PROCESSOR.put(key, processor);\n+        ArchUtils.ARCH_TO_PROCESSOR.put(str, processor);\n     }\n     \n-    private static void addProcessors(final Processor processor, final String... keys) {\n-        for (final String key : keys) {\n-            addProcessor(key, processor);\n+    private static void addProcessors(final Processor processor, final String... array) {\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            addProcessor(array[i], processor);\n         }\n     }\n     \n     public static Processor getProcessor() {\n         return getProcessor(SystemUtils.OS_ARCH);\n     }\n     \n-    public static Processor getProcessor(final String value) {\n-        return ArchUtils.ARCH_TO_PROCESSOR.get(value);\n+    public static Processor getProcessor(final String s) {\n+        return ArchUtils.ARCH_TO_PROCESSOR.get(s);\n     }\n     \n     static {\n         ARCH_TO_PROCESSOR = new HashMap<String, Processor>();\n         init();\n     }\n }\n"}]}
