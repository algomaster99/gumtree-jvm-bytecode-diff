{"diffoscope-json-version": 1, "source1": "first/Subroutines$SubroutineImpl.class", "source2": "second/Subroutines$SubroutineImpl.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -28,82 +28,77 @@\n         this.this$0 = this$0;\n         this.EMPTY_ARRAY = new SubroutineImpl[0];\n         this.localVariable = -1;\n         this.instructions = new HashSet();\n         this.theJSRs = new HashSet();\n     }\n     \n-    private void _getRecursivelyAccessedLocalsIndicesHelper(final Set<Integer> set, final Subroutine[] subs) {\n-        for (final Subroutine sub : subs) {\n-            final int[] accessedLocalsIndices;\n-            final int[] lvs = accessedLocalsIndices = sub.getAccessedLocalsIndices();\n-            for (final int lv : accessedLocalsIndices) {\n-                set.add(Integer.valueOf(lv));\n+    private void _getRecursivelyAccessedLocalsIndicesHelper(final Set<Integer> set, final Subroutine[] array) {\n+        for (final Subroutine subroutine : array) {\n+            final int[] accessedLocalsIndices = subroutine.getAccessedLocalsIndices();\n+            for (int length2 = accessedLocalsIndices.length, j = 0; j < length2; ++j) {\n+                set.add(Integer.valueOf(accessedLocalsIndices[j]));\n             }\n-            if (sub.subSubs().length != 0) {\n-                this._getRecursivelyAccessedLocalsIndicesHelper(set, sub.subSubs());\n+            if (subroutine.subSubs().length != 0) {\n+                this._getRecursivelyAccessedLocalsIndicesHelper(set, subroutine.subSubs());\n             }\n         }\n     }\n     \n-    public void addEnteringJsrInstruction(final InstructionHandle jsrInst) {\n-        if (jsrInst == null || !(jsrInst.getInstruction() instanceof JsrInstruction)) {\n+    public void addEnteringJsrInstruction(final InstructionHandle instructionHandle) {\n+        if (instructionHandle == null || !(instructionHandle.getInstruction() instanceof JsrInstruction)) {\n             throw new AssertionViolatedException(\"Expecting JsrInstruction InstructionHandle.\");\n         }\n         if (this.localVariable == -1) {\n             throw new AssertionViolatedException(\"Set the localVariable first!\");\n         }\n-        if (this.localVariable != ((ASTORE)((JsrInstruction)jsrInst.getInstruction()).getTarget().getInstruction()).getIndex()) {\n+        if (this.localVariable != ((ASTORE)((JsrInstruction)instructionHandle.getInstruction()).getTarget().getInstruction()).getIndex()) {\n             throw new AssertionViolatedException(\"Setting a wrong JsrInstruction.\");\n         }\n-        this.theJSRs.add(jsrInst);\n+        this.theJSRs.add(instructionHandle);\n     }\n     \n-    void addInstruction(final InstructionHandle ih) {\n+    void addInstruction(final InstructionHandle instructionHandle) {\n         if (this.theRET != null) {\n             throw new AssertionViolatedException(\"All instructions must have been added before invoking setLeavingRET().\");\n         }\n-        this.instructions.add(ih);\n+        this.instructions.add(instructionHandle);\n     }\n     \n-    public boolean contains(final InstructionHandle inst) {\n-        return this.instructions.contains(inst);\n+    public boolean contains(final InstructionHandle instructionHandle) {\n+        return this.instructions.contains(instructionHandle);\n     }\n     \n     public int[] getAccessedLocalsIndices() {\n-        final Set<Integer> acc = new HashSet<Integer>();\n+        final HashSet set = new HashSet();\n         if (this.theRET == null && this != this.this$0.getTopLevel()) {\n             throw new AssertionViolatedException(\"This subroutine object must be built up completely before calculating accessed locals.\");\n         }\n-        for (final InstructionHandle ih : this.instructions) {\n-            if (ih.getInstruction() instanceof LocalVariableInstruction || ih.getInstruction() instanceof RET) {\n-                final int idx = ((IndexedInstruction)ih.getInstruction()).getIndex();\n-                acc.add(Integer.valueOf(idx));\n+        for (final InstructionHandle instructionHandle : this.instructions) {\n+            if (instructionHandle.getInstruction() instanceof LocalVariableInstruction || instructionHandle.getInstruction() instanceof RET) {\n+                final int index = ((IndexedInstruction)instructionHandle.getInstruction()).getIndex();\n+                set.add(Integer.valueOf(index));\n                 try {\n-                    if (!(ih.getInstruction() instanceof LocalVariableInstruction)) {\n+                    if (!(instructionHandle.getInstruction() instanceof LocalVariableInstruction) || ((LocalVariableInstruction)instructionHandle.getInstruction()).getType((ConstantPoolGen)null).getSize() != 2) {\n                         continue;\n                     }\n-                    final int s = ((LocalVariableInstruction)ih.getInstruction()).getType((ConstantPoolGen)null).getSize();\n-                    if (s != 2) {\n-                        continue;\n-                    }\n-                    acc.add(Integer.valueOf(idx + 1));\n+                    set.add(Integer.valueOf(index + 1));\n                 }\n-                catch (final RuntimeException re) {\n-                    throw new AssertionViolatedException(\"BCEL did not like NULL as a ConstantPoolGen object.\", (Throwable)re);\n+                catch (final RuntimeException ex) {\n+                    throw new AssertionViolatedException(\"BCEL did not like NULL as a ConstantPoolGen object.\", (Throwable)ex);\n                 }\n             }\n         }\n-        final int[] ret = new int[acc.size()];\n-        int j = -1;\n-        for (final Integer accessedLocal : acc) {\n-            ++j;\n-            ret[j] = accessedLocal;\n+        final int[] array = new int[set.size()];\n+        int n = -1;\n+        for (final Integer n2 : set) {\n+            ++n;\n+            array[n] = n2;\n         }\n-        return ret;\n+        return array;\n     }\n     \n     public InstructionHandle[] getEnteringJsrInstructions() {\n         if (this == this.this$0.getTopLevel()) {\n             throw new AssertionViolatedException(\"getLeavingRET() called on top level pseudo-subroutine.\");\n         }\n         return this.theJSRs.toArray(InstructionHandle.EMPTY_ARRAY);\n@@ -117,90 +112,87 @@\n         if (this == this.this$0.getTopLevel()) {\n             throw new AssertionViolatedException(\"getLeavingRET() called on top level pseudo-subroutine.\");\n         }\n         return this.theRET;\n     }\n     \n     public int[] getRecursivelyAccessedLocalsIndices() {\n-        final Set<Integer> s = new HashSet<Integer>();\n-        final int[] accessedLocalsIndices;\n-        final int[] lvs = accessedLocalsIndices = this.getAccessedLocalsIndices();\n-        for (final int lv : accessedLocalsIndices) {\n-            s.add(Integer.valueOf(lv));\n-        }\n-        this._getRecursivelyAccessedLocalsIndicesHelper(s, this.subSubs());\n-        final int[] ret = new int[s.size()];\n-        int j = -1;\n-        for (final Integer index : s) {\n-            ++j;\n-            ret[j] = index;\n+        final HashSet set = new HashSet();\n+        final int[] accessedLocalsIndices = this.getAccessedLocalsIndices();\n+        for (int length = accessedLocalsIndices.length, i = 0; i < length; ++i) {\n+            set.add(Integer.valueOf(accessedLocalsIndices[i]));\n+        }\n+        this._getRecursivelyAccessedLocalsIndicesHelper(set, this.subSubs());\n+        final int[] array = new int[set.size()];\n+        int n = -1;\n+        for (final Integer n2 : set) {\n+            ++n;\n+            array[n] = n2;\n         }\n-        return ret;\n+        return array;\n     }\n     \n     void setLeavingRET() {\n         if (this.localVariable == -1) {\n             throw new AssertionViolatedException(\"setLeavingRET() called for top-level 'subroutine' or forgot to set local variable first.\");\n         }\n-        InstructionHandle ret = null;\n-        for (final InstructionHandle actual : this.instructions) {\n-            if (actual.getInstruction() instanceof RET) {\n-                if (ret != null) {\n-                    throw new StructuralCodeConstraintException(\"Subroutine with more then one RET detected: '\" + ret + \"' and '\" + actual + \"'.\");\n+        InstructionHandle theRET = null;\n+        for (final InstructionHandle obj : this.instructions) {\n+            if (obj.getInstruction() instanceof RET) {\n+                if (theRET != null) {\n+                    throw new StructuralCodeConstraintException(\"Subroutine with more then one RET detected: '\" + theRET + \"' and '\" + obj + \"'.\");\n                 }\n-                ret = actual;\n+                theRET = obj;\n             }\n         }\n-        if (ret == null) {\n+        if (theRET == null) {\n             throw new StructuralCodeConstraintException(\"Subroutine without a RET detected.\");\n         }\n-        if (((RET)ret.getInstruction()).getIndex() != this.localVariable) {\n-            throw new StructuralCodeConstraintException(\"Subroutine uses '\" + ret + \"' which does not match the correct local variable '\" + this.localVariable + \"'.\");\n+        if (((RET)theRET.getInstruction()).getIndex() != this.localVariable) {\n+            throw new StructuralCodeConstraintException(\"Subroutine uses '\" + theRET + \"' which does not match the correct local variable '\" + this.localVariable + \"'.\");\n         }\n-        this.theRET = ret;\n+        this.theRET = theRET;\n     }\n     \n-    void setLocalVariable(final int i) {\n+    void setLocalVariable(final int localVariable) {\n         if (this.localVariable != -1) {\n             throw new AssertionViolatedException(\"localVariable set twice.\");\n         }\n-        this.localVariable = i;\n+        this.localVariable = localVariable;\n     }\n     \n     public Subroutine[] subSubs() {\n-        final Set<Subroutine> h = new HashSet<Subroutine>();\n-        for (final InstructionHandle ih : this.instructions) {\n-            final Instruction inst = ih.getInstruction();\n-            if (inst instanceof JsrInstruction) {\n-                final InstructionHandle targ = ((JsrInstruction)inst).getTarget();\n-                h.add(this.this$0.getSubroutine(targ));\n+        final HashSet set = new HashSet();\n+        final Iterator iterator = this.instructions.iterator();\n+        while (iterator.hasNext()) {\n+            final Instruction instruction = ((InstructionHandle)iterator.next()).getInstruction();\n+            if (instruction instanceof JsrInstruction) {\n+                set.add(this.this$0.getSubroutine(((JsrInstruction)instruction).getTarget()));\n             }\n         }\n-        return h.toArray((Subroutine[])this.EMPTY_ARRAY);\n+        return (Subroutine[])set.toArray(this.EMPTY_ARRAY);\n     }\n     \n     @Override\n     public String toString() {\n-        final StringBuilder ret = new StringBuilder();\n-        ret.append(\"Subroutine: Local variable is '\").append(this.localVariable);\n-        ret.append(\"', JSRs are '\").append(this.theJSRs);\n-        ret.append(\"', RET is '\").append(this.theRET);\n-        ret.append(\"', Instructions: '\").append(this.instructions).append(\"'.\");\n-        ret.append(\" Accessed local variable slots: '\");\n-        final int[] accessedLocalsIndices;\n-        int[] alv = accessedLocalsIndices = this.getAccessedLocalsIndices();\n-        for (final int element : accessedLocalsIndices) {\n-            ret.append(element);\n-            ret.append(\" \");\n-        }\n-        ret.append(\"'.\");\n-        ret.append(\" Recursively (via subsub...routines) accessed local variable slots: '\");\n-        final int[] recursivelyAccessedLocalsIndices;\n-        alv = (recursivelyAccessedLocalsIndices = this.getRecursivelyAccessedLocalsIndices());\n-        for (final int element : recursivelyAccessedLocalsIndices) {\n-            ret.append(element);\n-            ret.append(\" \");\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"Subroutine: Local variable is '\").append(this.localVariable);\n+        sb.append(\"', JSRs are '\").append(this.theJSRs);\n+        sb.append(\"', RET is '\").append(this.theRET);\n+        sb.append(\"', Instructions: '\").append(this.instructions).append(\"'.\");\n+        sb.append(\" Accessed local variable slots: '\");\n+        final int[] accessedLocalsIndices = this.getAccessedLocalsIndices();\n+        for (int length = accessedLocalsIndices.length, i = 0; i < length; ++i) {\n+            sb.append(accessedLocalsIndices[i]);\n+            sb.append(\" \");\n+        }\n+        sb.append(\"'.\");\n+        sb.append(\" Recursively (via subsub...routines) accessed local variable slots: '\");\n+        final int[] recursivelyAccessedLocalsIndices = this.getRecursivelyAccessedLocalsIndices();\n+        for (int length2 = recursivelyAccessedLocalsIndices.length, j = 0; j < length2; ++j) {\n+            sb.append(recursivelyAccessedLocalsIndices[j]);\n+            sb.append(\" \");\n         }\n-        ret.append(\"'.\");\n-        return ret.toString();\n+        sb.append(\"'.\");\n+        return sb.toString();\n     }\n }\n"}]}
