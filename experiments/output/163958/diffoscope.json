{"diffoscope-json-version": 1, "source1": "first/TarUtils.class", "source2": "second/TarUtils.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,327 +1,315 @@\n-  SHA-256 checksum 07686742575dfbcc61f50de8313fa7abeaea70eea0b32ea7c000da881f009924\n+  SHA-256 checksum c1bff6b0694badbc4329329ceeba8f2318b8d0022273b7a1d1b1b21fbbaa48fc\n   Compiled from \"TarUtils.java\"\n public class org.apache.commons.compress.archivers.tar.TarUtils\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #83                         // org/apache/commons/compress/archivers/tar/TarUtils\n-  super_class: #87                        // java/lang/Object\n-  interfaces: 0, fields: 3, methods: 22, attributes: 2\n+  this_class: #68                         // org/apache/commons/compress/archivers/tar/TarUtils\n+  super_class: #72                        // java/lang/Object\n+  interfaces: 0, fields: 3, methods: 22, attributes: 3\n Constant pool:\n-    #1 = Class              #191          // org/apache/commons/compress/archivers/tar/TarConstants\n-    #2 = Methodref          #87.#192      // java/lang/Object.\"<init>\":()V\n-    #3 = Class              #193          // java/lang/IllegalArgumentException\n-    #4 = Class              #194          // java/lang/StringBuilder\n-    #5 = Methodref          #4.#192       // java/lang/StringBuilder.\"<init>\":()V\n-    #6 = String             #195          // Length\n-    #7 = Methodref          #4.#196       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #8 = Methodref          #4.#197       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-    #9 = String             #198          //  must be at least 2\n-   #10 = Methodref          #4.#199       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #11 = Methodref          #3.#200       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #12 = Methodref          #83.#201      // org/apache/commons/compress/archivers/tar/TarUtils.exceptionMessage:([BIIIB)Ljava/lang/String;\n-   #13 = Methodref          #83.#202      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctal:([BII)J\n-   #14 = Methodref          #83.#203      // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryLong:([BIIZ)J\n-   #15 = Methodref          #83.#204      // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryBigInteger:([BIIZ)J\n-   #16 = String             #205          // At offset\n-   #17 = String             #206          // ,\n-   #18 = String             #207          //  byte binary number exceeds maximum signed long value\n-   #19 = Double             2.0d\n-   #21 = Double             8.0d\n-   #23 = Methodref          #208.#209     // java/lang/Math.pow:(DD)D\n-   #24 = Methodref          #210.#211     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #25 = Class              #212          // java/math/BigInteger\n-   #26 = Methodref          #25.#213      // java/math/BigInteger.\"<init>\":([B)V\n-   #27 = Long               -1l\n-   #29 = Methodref          #25.#214      // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #30 = Methodref          #25.#215      // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #31 = Methodref          #25.#216      // java/math/BigInteger.not:()Ljava/math/BigInteger;\n-   #32 = Methodref          #25.#217      // java/math/BigInteger.bitLength:()I\n-   #33 = Methodref          #25.#218      // java/math/BigInteger.longValue:()J\n-   #34 = Class              #219          // java/lang/String\n-   #35 = Methodref          #34.#220      // java/lang/String.\"<init>\":([BII)V\n-   #36 = String             #221          // \\u0000\n-   #37 = String             #222          // {NUL}\n-   #38 = Methodref          #34.#223      // java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #39 = String             #224          // Invalid byte\n-   #40 = String             #225          //  at offset\n-   #41 = String             #226          //  in \\'\n-   #42 = String             #227          // \\' len=\n-   #43 = Fieldref           #83.#228      // org/apache/commons/compress/archivers/tar/TarUtils.DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #44 = Methodref          #83.#229      // org/apache/commons/compress/archivers/tar/TarUtils.parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-   #45 = Class              #230          // java/io/IOException\n-   #46 = Fieldref           #83.#231      // org/apache/commons/compress/archivers/tar/TarUtils.FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #47 = Class              #232          // java/lang/RuntimeException\n-   #48 = Methodref          #47.#233      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #49 = InterfaceMethodref #234.#235     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #50 = String             #236          //\n-   #51 = Methodref          #83.#237      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctalOrBinary:([BII)J\n-   #52 = Class              #238          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-   #53 = Methodref          #52.#239      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-   #54 = Methodref          #83.#240      // org/apache/commons/compress/archivers/tar/TarUtils.formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-   #55 = Methodref          #34.#241      // java/lang/String.length:()I\n-   #56 = InterfaceMethodref #234.#242     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-   #57 = Methodref          #243.#244     // java/nio/ByteBuffer.limit:()I\n-   #58 = Methodref          #34.#245      // java/lang/String.substring:(II)Ljava/lang/String;\n-   #59 = Methodref          #243.#246     // java/nio/ByteBuffer.position:()I\n-   #60 = Methodref          #243.#247     // java/nio/ByteBuffer.array:()[B\n-   #61 = Methodref          #243.#248     // java/nio/ByteBuffer.arrayOffset:()I\n-   #62 = Long               7l\n-   #64 = Methodref          #4.#249       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #65 = String             #250          // =\n-   #66 = Methodref          #251.#252     // java/lang/Long.toOctalString:(J)Ljava/lang/String;\n-   #67 = String             #253          //  will not fit in octal number buffer of length\n-   #68 = Methodref          #83.#254      // org/apache/commons/compress/archivers/tar/TarUtils.formatUnsignedOctalString:(J[BII)V\n-   #69 = Long               2097151l\n-   #71 = Long               8589934591l\n-   #73 = Methodref          #83.#255      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongOctalBytes:(J[BII)I\n-   #74 = Methodref          #83.#256      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongBinary:(J[BIIZ)V\n-   #75 = Methodref          #83.#257      // org/apache/commons/compress/archivers/tar/TarUtils.formatBigIntegerBinary:(J[BIIZ)V\n-   #76 = Methodref          #208.#258     // java/lang/Math.abs:(J)J\n-   #77 = String             #259          // Value\n-   #78 = String             #260          //  is too large for\n-   #79 = String             #261          //  byte field.\n-   #80 = Long               255l\n-   #82 = Methodref          #25.#262      // java/math/BigInteger.toByteArray:()[B\n-   #83 = Class              #263          // org/apache/commons/compress/archivers/tar/TarUtils\n-   #84 = Methodref          #264.#265     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #85 = Class              #266          // org/apache/commons/compress/archivers/tar/TarUtils$1\n-   #86 = Methodref          #85.#192      // org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n-   #87 = Class              #267          // java/lang/Object\n-   #88 = Utf8               InnerClasses\n-   #89 = Utf8               BYTE_MASK\n-   #90 = Utf8               I\n-   #91 = Utf8               ConstantValue\n-   #92 = Integer            255\n-   #93 = Utf8               DEFAULT_ENCODING\n-   #94 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #95 = Utf8               FALLBACK_ENCODING\n-   #96 = Utf8               <init>\n-   #97 = Utf8               ()V\n-   #98 = Utf8               Code\n-   #99 = Utf8               LineNumberTable\n-  #100 = Utf8               LocalVariableTable\n-  #101 = Utf8               this\n-  #102 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarUtils;\n-  #103 = Utf8               parseOctal\n-  #104 = Utf8               ([BII)J\n-  #105 = Utf8               currentByte\n-  #106 = Utf8               B\n-  #107 = Utf8               buffer\n-  #108 = Utf8               [B\n-  #109 = Utf8               offset\n-  #110 = Utf8               length\n-  #111 = Utf8               result\n-  #112 = Utf8               J\n-  #113 = Utf8               end\n-  #114 = Utf8               start\n-  #115 = Utf8               trailer\n-  #116 = Utf8               StackMapTable\n-  #117 = Utf8               parseOctalOrBinary\n-  #118 = Utf8               negative\n-  #119 = Utf8               Z\n-  #120 = Utf8               parseBinaryLong\n-  #121 = Utf8               ([BIIZ)J\n-  #122 = Utf8               i\n-  #123 = Utf8               val\n-  #124 = Utf8               parseBinaryBigInteger\n-  #125 = Utf8               remainder\n-  #126 = Utf8               Ljava/math/BigInteger;\n-  #127 = Class              #108          // \"[B\"\n-  #128 = Class              #212          // java/math/BigInteger\n-  #129 = Utf8               parseBoolean\n-  #130 = Utf8               ([BI)Z\n-  #131 = Utf8               exceptionMessage\n-  #132 = Utf8               ([BIIIB)Ljava/lang/String;\n-  #133 = Utf8               current\n-  #134 = Utf8               string\n-  #135 = Utf8               Ljava/lang/String;\n-  #136 = Utf8               parseName\n-  #137 = Utf8               ([BII)Ljava/lang/String;\n-  #138 = Utf8               ex2\n-  #139 = Utf8               Ljava/io/IOException;\n-  #140 = Utf8               ex\n-  #141 = Class              #230          // java/io/IOException\n-  #142 = Utf8               ([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-  #143 = Utf8               b\n-  #144 = Utf8               encoding\n-  #145 = Utf8               len\n-  #146 = Utf8               Exceptions\n-  #147 = Utf8               parseSparse\n-  #148 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-  #149 = Utf8               sparseOffset\n-  #150 = Utf8               sparseNumbytes\n-  #151 = Utf8               formatNameBytes\n-  #152 = Utf8               (Ljava/lang/String;[BII)I\n-  #153 = Utf8               name\n-  #154 = Utf8               buf\n-  #155 = Class              #219          // java/lang/String\n-  #156 = Utf8               (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-  #157 = Utf8               Ljava/nio/ByteBuffer;\n-  #158 = Utf8               limit\n-  #159 = Class              #268          // java/nio/ByteBuffer\n-  #160 = Utf8               formatUnsignedOctalString\n-  #161 = Utf8               (J[BII)V\n-  #162 = Utf8               value\n-  #163 = Utf8               remaining\n-  #164 = Utf8               formatOctalBytes\n-  #165 = Utf8               (J[BII)I\n-  #166 = Utf8               idx\n-  #167 = Utf8               formatLongOctalBytes\n-  #168 = Utf8               formatLongOctalOrBinaryBytes\n-  #169 = Utf8               maxAsOctalChar\n-  #170 = Utf8               formatLongBinary\n-  #171 = Utf8               (J[BIIZ)V\n-  #172 = Utf8               bits\n-  #173 = Utf8               max\n-  #174 = Utf8               formatBigIntegerBinary\n-  #175 = Utf8               off\n-  #176 = Utf8               fill\n-  #177 = Utf8               formatCheckSumOctalBytes\n-  #178 = Utf8               computeCheckSum\n-  #179 = Utf8               ([B)J\n-  #180 = Utf8               element\n-  #181 = Utf8               sum\n-  #182 = Utf8               verifyCheckSum\n-  #183 = Utf8               ([B)Z\n-  #184 = Utf8               header\n-  #185 = Utf8               storedSum\n-  #186 = Utf8               unsignedSum\n-  #187 = Utf8               signedSum\n-  #188 = Utf8               <clinit>\n-  #189 = Utf8               SourceFile\n-  #190 = Utf8               TarUtils.java\n-  #191 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n-  #192 = NameAndType        #96:#97       // \"<init>\":()V\n-  #193 = Utf8               java/lang/IllegalArgumentException\n-  #194 = Utf8               java/lang/StringBuilder\n-  #195 = Utf8               Length\n-  #196 = NameAndType        #269:#270     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #197 = NameAndType        #269:#271     // append:(I)Ljava/lang/StringBuilder;\n-  #198 = Utf8                must be at least 2\n-  #199 = NameAndType        #272:#273     // toString:()Ljava/lang/String;\n-  #200 = NameAndType        #96:#274      // \"<init>\":(Ljava/lang/String;)V\n-  #201 = NameAndType        #131:#132     // exceptionMessage:([BIIIB)Ljava/lang/String;\n-  #202 = NameAndType        #103:#104     // parseOctal:([BII)J\n-  #203 = NameAndType        #120:#121     // parseBinaryLong:([BIIZ)J\n-  #204 = NameAndType        #124:#121     // parseBinaryBigInteger:([BIIZ)J\n-  #205 = Utf8               At offset\n-  #206 = Utf8               ,\n-  #207 = Utf8                byte binary number exceeds maximum signed long value\n-  #208 = Class              #275          // java/lang/Math\n-  #209 = NameAndType        #276:#277     // pow:(DD)D\n-  #210 = Class              #278          // java/lang/System\n-  #211 = NameAndType        #279:#280     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #212 = Utf8               java/math/BigInteger\n-  #213 = NameAndType        #96:#281      // \"<init>\":([B)V\n-  #214 = NameAndType        #282:#283     // valueOf:(J)Ljava/math/BigInteger;\n-  #215 = NameAndType        #284:#285     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #216 = NameAndType        #286:#287     // not:()Ljava/math/BigInteger;\n-  #217 = NameAndType        #288:#289     // bitLength:()I\n-  #218 = NameAndType        #290:#291     // longValue:()J\n-  #219 = Utf8               java/lang/String\n-  #220 = NameAndType        #96:#292      // \"<init>\":([BII)V\n-  #221 = Utf8               \\u0000\n-  #222 = Utf8               {NUL}\n-  #223 = NameAndType        #293:#294     // replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-  #224 = Utf8               Invalid byte\n-  #225 = Utf8                at offset\n-  #226 = Utf8                in \\'\n-  #227 = Utf8               \\' len=\n-  #228 = NameAndType        #93:#94       // DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #229 = NameAndType        #136:#142     // parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-  #230 = Utf8               java/io/IOException\n-  #231 = NameAndType        #95:#94       // FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #232 = Utf8               java/lang/RuntimeException\n-  #233 = NameAndType        #96:#295      // \"<init>\":(Ljava/lang/Throwable;)V\n-  #234 = Class              #296          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #235 = NameAndType        #297:#298     // decode:([B)Ljava/lang/String;\n-  #236 = Utf8\n-  #237 = NameAndType        #117:#104     // parseOctalOrBinary:([BII)J\n-  #238 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-  #239 = NameAndType        #96:#299      // \"<init>\":(JJ)V\n-  #240 = NameAndType        #151:#156     // formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-  #241 = NameAndType        #110:#289     // length:()I\n-  #242 = NameAndType        #300:#301     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #243 = Class              #268          // java/nio/ByteBuffer\n-  #244 = NameAndType        #158:#289     // limit:()I\n-  #245 = NameAndType        #302:#303     // substring:(II)Ljava/lang/String;\n-  #246 = NameAndType        #304:#289     // position:()I\n-  #247 = NameAndType        #305:#306     // array:()[B\n-  #248 = NameAndType        #307:#289     // arrayOffset:()I\n-  #249 = NameAndType        #269:#308     // append:(J)Ljava/lang/StringBuilder;\n-  #250 = Utf8               =\n-  #251 = Class              #309          // java/lang/Long\n-  #252 = NameAndType        #310:#311     // toOctalString:(J)Ljava/lang/String;\n-  #253 = Utf8                will not fit in octal number buffer of length\n-  #254 = NameAndType        #160:#161     // formatUnsignedOctalString:(J[BII)V\n-  #255 = NameAndType        #167:#165     // formatLongOctalBytes:(J[BII)I\n-  #256 = NameAndType        #170:#171     // formatLongBinary:(J[BIIZ)V\n-  #257 = NameAndType        #174:#171     // formatBigIntegerBinary:(J[BIIZ)V\n-  #258 = NameAndType        #312:#313     // abs:(J)J\n-  #259 = Utf8               Value\n-  #260 = Utf8                is too large for\n-  #261 = Utf8                byte field.\n-  #262 = NameAndType        #314:#306     // toByteArray:()[B\n-  #263 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n-  #264 = Class              #315          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #265 = NameAndType        #316:#317     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #266 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils$1\n-  #267 = Utf8               java/lang/Object\n-  #268 = Utf8               java/nio/ByteBuffer\n-  #269 = Utf8               append\n-  #270 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #271 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #272 = Utf8               toString\n-  #273 = Utf8               ()Ljava/lang/String;\n-  #274 = Utf8               (Ljava/lang/String;)V\n-  #275 = Utf8               java/lang/Math\n-  #276 = Utf8               pow\n-  #277 = Utf8               (DD)D\n-  #278 = Utf8               java/lang/System\n-  #279 = Utf8               arraycopy\n-  #280 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #281 = Utf8               ([B)V\n-  #282 = Utf8               valueOf\n-  #283 = Utf8               (J)Ljava/math/BigInteger;\n-  #284 = Utf8               add\n-  #285 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #286 = Utf8               not\n-  #287 = Utf8               ()Ljava/math/BigInteger;\n-  #288 = Utf8               bitLength\n-  #289 = Utf8               ()I\n-  #290 = Utf8               longValue\n-  #291 = Utf8               ()J\n-  #292 = Utf8               ([BII)V\n-  #293 = Utf8               replaceAll\n-  #294 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-  #295 = Utf8               (Ljava/lang/Throwable;)V\n-  #296 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #297 = Utf8               decode\n-  #298 = Utf8               ([B)Ljava/lang/String;\n-  #299 = Utf8               (JJ)V\n-  #300 = Utf8               encode\n-  #301 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #302 = Utf8               substring\n-  #303 = Utf8               (II)Ljava/lang/String;\n-  #304 = Utf8               position\n-  #305 = Utf8               array\n-  #306 = Utf8               ()[B\n-  #307 = Utf8               arrayOffset\n-  #308 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #309 = Utf8               java/lang/Long\n-  #310 = Utf8               toOctalString\n-  #311 = Utf8               (J)Ljava/lang/String;\n-  #312 = Utf8               abs\n-  #313 = Utf8               (J)J\n-  #314 = Utf8               toByteArray\n-  #315 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #316 = Utf8               getZipEncoding\n-  #317 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+    #1 = Class              #173          // org/apache/commons/compress/archivers/tar/TarConstants\n+    #2 = Methodref          #72.#174      // java/lang/Object.\"<init>\":()V\n+    #3 = Class              #175          // java/lang/IllegalArgumentException\n+    #4 = InvokeDynamic      #0:#179       // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+    #5 = Methodref          #3.#180       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+    #6 = Methodref          #68.#181      // org/apache/commons/compress/archivers/tar/TarUtils.exceptionMessage:([BIIIB)Ljava/lang/String;\n+    #7 = Methodref          #68.#182      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctal:([BII)J\n+    #8 = Methodref          #68.#183      // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryLong:([BIIZ)J\n+    #9 = Methodref          #68.#184      // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryBigInteger:([BIIZ)J\n+   #10 = InvokeDynamic      #1:#186       // #1:makeConcatWithConstants:(II)Ljava/lang/String;\n+   #11 = Double             2.0d\n+   #13 = Double             8.0d\n+   #15 = Methodref          #187.#188     // java/lang/Math.pow:(DD)D\n+   #16 = Methodref          #189.#190     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #17 = Class              #191          // java/math/BigInteger\n+   #18 = Methodref          #17.#192      // java/math/BigInteger.\"<init>\":([B)V\n+   #19 = Long               -1l\n+   #21 = Methodref          #17.#193      // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+   #22 = Methodref          #17.#194      // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #23 = Methodref          #17.#195      // java/math/BigInteger.not:()Ljava/math/BigInteger;\n+   #24 = Methodref          #17.#196      // java/math/BigInteger.bitLength:()I\n+   #25 = Methodref          #17.#197      // java/math/BigInteger.longValue:()J\n+   #26 = Class              #198          // java/lang/String\n+   #27 = Methodref          #26.#199      // java/lang/String.\"<init>\":([BII)V\n+   #28 = String             #200          // \\u0000\n+   #29 = String             #201          // {NUL}\n+   #30 = Methodref          #26.#202      // java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+   #31 = InvokeDynamic      #2:#204       // #2:makeConcatWithConstants:(BILjava/lang/String;I)Ljava/lang/String;\n+   #32 = Fieldref           #68.#205      // org/apache/commons/compress/archivers/tar/TarUtils.DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #33 = Methodref          #68.#206      // org/apache/commons/compress/archivers/tar/TarUtils.parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+   #34 = Class              #207          // java/io/IOException\n+   #35 = Fieldref           #68.#208      // org/apache/commons/compress/archivers/tar/TarUtils.FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #36 = Class              #209          // java/lang/RuntimeException\n+   #37 = Methodref          #36.#210      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n+   #38 = InterfaceMethodref #211.#212     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+   #39 = String             #213          //\n+   #40 = Methodref          #68.#214      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctalOrBinary:([BII)J\n+   #41 = Class              #215          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+   #42 = Methodref          #41.#216      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+   #43 = Methodref          #68.#217      // org/apache/commons/compress/archivers/tar/TarUtils.formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+   #44 = Methodref          #26.#218      // java/lang/String.length:()I\n+   #45 = InterfaceMethodref #211.#219     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+   #46 = Methodref          #141.#220     // java/nio/ByteBuffer.limit:()I\n+   #47 = Methodref          #26.#221      // java/lang/String.substring:(II)Ljava/lang/String;\n+   #48 = Methodref          #141.#222     // java/nio/ByteBuffer.position:()I\n+   #49 = Methodref          #141.#223     // java/nio/ByteBuffer.array:()[B\n+   #50 = Methodref          #141.#224     // java/nio/ByteBuffer.arrayOffset:()I\n+   #51 = Long               7l\n+   #53 = Methodref          #225.#226     // java/lang/Long.toOctalString:(J)Ljava/lang/String;\n+   #54 = InvokeDynamic      #3:#228       // #3:makeConcatWithConstants:(JLjava/lang/String;I)Ljava/lang/String;\n+   #55 = Methodref          #68.#229      // org/apache/commons/compress/archivers/tar/TarUtils.formatUnsignedOctalString:(J[BII)V\n+   #56 = Long               2097151l\n+   #58 = Long               8589934591l\n+   #60 = Methodref          #68.#230      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongOctalBytes:(J[BII)I\n+   #61 = Methodref          #68.#231      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongBinary:(J[BIIZ)V\n+   #62 = Methodref          #68.#232      // org/apache/commons/compress/archivers/tar/TarUtils.formatBigIntegerBinary:(J[BIIZ)V\n+   #63 = Methodref          #187.#233     // java/lang/Math.abs:(J)J\n+   #64 = InvokeDynamic      #4:#235       // #4:makeConcatWithConstants:(JI)Ljava/lang/String;\n+   #65 = Long               255l\n+   #67 = Methodref          #17.#236      // java/math/BigInteger.toByteArray:()[B\n+   #68 = Class              #237          // org/apache/commons/compress/archivers/tar/TarUtils\n+   #69 = Methodref          #238.#239     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #70 = Class              #240          // org/apache/commons/compress/archivers/tar/TarUtils$1\n+   #71 = Methodref          #70.#174      // org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n+   #72 = Class              #241          // java/lang/Object\n+   #73 = Utf8               InnerClasses\n+   #74 = Utf8               BYTE_MASK\n+   #75 = Utf8               I\n+   #76 = Utf8               ConstantValue\n+   #77 = Integer            255\n+   #78 = Utf8               DEFAULT_ENCODING\n+   #79 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #80 = Utf8               FALLBACK_ENCODING\n+   #81 = Utf8               <init>\n+   #82 = Utf8               ()V\n+   #83 = Utf8               Code\n+   #84 = Utf8               LineNumberTable\n+   #85 = Utf8               LocalVariableTable\n+   #86 = Utf8               this\n+   #87 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarUtils;\n+   #88 = Utf8               parseOctal\n+   #89 = Utf8               ([BII)J\n+   #90 = Utf8               currentByte\n+   #91 = Utf8               B\n+   #92 = Utf8               buffer\n+   #93 = Utf8               [B\n+   #94 = Utf8               offset\n+   #95 = Utf8               length\n+   #96 = Utf8               result\n+   #97 = Utf8               J\n+   #98 = Utf8               end\n+   #99 = Utf8               start\n+  #100 = Utf8               trailer\n+  #101 = Utf8               StackMapTable\n+  #102 = Utf8               parseOctalOrBinary\n+  #103 = Utf8               negative\n+  #104 = Utf8               Z\n+  #105 = Utf8               parseBinaryLong\n+  #106 = Utf8               ([BIIZ)J\n+  #107 = Utf8               i\n+  #108 = Utf8               val\n+  #109 = Utf8               parseBinaryBigInteger\n+  #110 = Utf8               remainder\n+  #111 = Utf8               Ljava/math/BigInteger;\n+  #112 = Class              #93           // \"[B\"\n+  #113 = Utf8               parseBoolean\n+  #114 = Utf8               ([BI)Z\n+  #115 = Utf8               exceptionMessage\n+  #116 = Utf8               ([BIIIB)Ljava/lang/String;\n+  #117 = Utf8               current\n+  #118 = Utf8               string\n+  #119 = Utf8               Ljava/lang/String;\n+  #120 = Utf8               parseName\n+  #121 = Utf8               ([BII)Ljava/lang/String;\n+  #122 = Utf8               ex2\n+  #123 = Utf8               Ljava/io/IOException;\n+  #124 = Utf8               ex\n+  #125 = Utf8               ([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+  #126 = Utf8               b\n+  #127 = Utf8               encoding\n+  #128 = Utf8               len\n+  #129 = Utf8               Exceptions\n+  #130 = Utf8               parseSparse\n+  #131 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #132 = Utf8               sparseOffset\n+  #133 = Utf8               sparseNumbytes\n+  #134 = Utf8               formatNameBytes\n+  #135 = Utf8               (Ljava/lang/String;[BII)I\n+  #136 = Utf8               name\n+  #137 = Utf8               buf\n+  #138 = Utf8               (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+  #139 = Utf8               Ljava/nio/ByteBuffer;\n+  #140 = Utf8               limit\n+  #141 = Class              #242          // java/nio/ByteBuffer\n+  #142 = Utf8               formatUnsignedOctalString\n+  #143 = Utf8               (J[BII)V\n+  #144 = Utf8               value\n+  #145 = Utf8               remaining\n+  #146 = Utf8               formatOctalBytes\n+  #147 = Utf8               (J[BII)I\n+  #148 = Utf8               idx\n+  #149 = Utf8               formatLongOctalBytes\n+  #150 = Utf8               formatLongOctalOrBinaryBytes\n+  #151 = Utf8               maxAsOctalChar\n+  #152 = Utf8               formatLongBinary\n+  #153 = Utf8               (J[BIIZ)V\n+  #154 = Utf8               bits\n+  #155 = Utf8               max\n+  #156 = Utf8               formatBigIntegerBinary\n+  #157 = Utf8               off\n+  #158 = Utf8               fill\n+  #159 = Utf8               formatCheckSumOctalBytes\n+  #160 = Utf8               computeCheckSum\n+  #161 = Utf8               ([B)J\n+  #162 = Utf8               element\n+  #163 = Utf8               sum\n+  #164 = Utf8               verifyCheckSum\n+  #165 = Utf8               ([B)Z\n+  #166 = Utf8               header\n+  #167 = Utf8               storedSum\n+  #168 = Utf8               unsignedSum\n+  #169 = Utf8               signedSum\n+  #170 = Utf8               <clinit>\n+  #171 = Utf8               SourceFile\n+  #172 = Utf8               TarUtils.java\n+  #173 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n+  #174 = NameAndType        #81:#82       // \"<init>\":()V\n+  #175 = Utf8               java/lang/IllegalArgumentException\n+  #176 = Utf8               BootstrapMethods\n+  #177 = MethodHandle       6:#243        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #178 = String             #244          // Length \\u0001 must be at least 2\n+  #179 = NameAndType        #245:#246     // makeConcatWithConstants:(I)Ljava/lang/String;\n+  #180 = NameAndType        #81:#247      // \"<init>\":(Ljava/lang/String;)V\n+  #181 = NameAndType        #115:#116     // exceptionMessage:([BIIIB)Ljava/lang/String;\n+  #182 = NameAndType        #88:#89       // parseOctal:([BII)J\n+  #183 = NameAndType        #105:#106     // parseBinaryLong:([BIIZ)J\n+  #184 = NameAndType        #109:#106     // parseBinaryBigInteger:([BIIZ)J\n+  #185 = String             #248          // At offset \\u0001, \\u0001 byte binary number exceeds maximum signed long value\n+  #186 = NameAndType        #245:#249     // makeConcatWithConstants:(II)Ljava/lang/String;\n+  #187 = Class              #250          // java/lang/Math\n+  #188 = NameAndType        #251:#252     // pow:(DD)D\n+  #189 = Class              #253          // java/lang/System\n+  #190 = NameAndType        #254:#255     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #191 = Utf8               java/math/BigInteger\n+  #192 = NameAndType        #81:#256      // \"<init>\":([B)V\n+  #193 = NameAndType        #257:#258     // valueOf:(J)Ljava/math/BigInteger;\n+  #194 = NameAndType        #259:#260     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #195 = NameAndType        #261:#262     // not:()Ljava/math/BigInteger;\n+  #196 = NameAndType        #263:#264     // bitLength:()I\n+  #197 = NameAndType        #265:#266     // longValue:()J\n+  #198 = Utf8               java/lang/String\n+  #199 = NameAndType        #81:#267      // \"<init>\":([BII)V\n+  #200 = Utf8               \\u0000\n+  #201 = Utf8               {NUL}\n+  #202 = NameAndType        #268:#269     // replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #203 = String             #270          // Invalid byte \\u0001 at offset \\u0001 in \\'\\u0001\\' len=\\u0001\n+  #204 = NameAndType        #245:#271     // makeConcatWithConstants:(BILjava/lang/String;I)Ljava/lang/String;\n+  #205 = NameAndType        #78:#79       // DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #206 = NameAndType        #120:#125     // parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+  #207 = Utf8               java/io/IOException\n+  #208 = NameAndType        #80:#79       // FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #209 = Utf8               java/lang/RuntimeException\n+  #210 = NameAndType        #81:#272      // \"<init>\":(Ljava/lang/Throwable;)V\n+  #211 = Class              #273          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #212 = NameAndType        #274:#275     // decode:([B)Ljava/lang/String;\n+  #213 = Utf8\n+  #214 = NameAndType        #102:#89      // parseOctalOrBinary:([BII)J\n+  #215 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+  #216 = NameAndType        #81:#276      // \"<init>\":(JJ)V\n+  #217 = NameAndType        #134:#138     // formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+  #218 = NameAndType        #95:#264      // length:()I\n+  #219 = NameAndType        #277:#278     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #220 = NameAndType        #140:#264     // limit:()I\n+  #221 = NameAndType        #279:#249     // substring:(II)Ljava/lang/String;\n+  #222 = NameAndType        #280:#264     // position:()I\n+  #223 = NameAndType        #281:#282     // array:()[B\n+  #224 = NameAndType        #283:#264     // arrayOffset:()I\n+  #225 = Class              #284          // java/lang/Long\n+  #226 = NameAndType        #285:#286     // toOctalString:(J)Ljava/lang/String;\n+  #227 = String             #287          // \\u0001=\\u0001 will not fit in octal number buffer of length \\u0001\n+  #228 = NameAndType        #245:#288     // makeConcatWithConstants:(JLjava/lang/String;I)Ljava/lang/String;\n+  #229 = NameAndType        #142:#143     // formatUnsignedOctalString:(J[BII)V\n+  #230 = NameAndType        #149:#147     // formatLongOctalBytes:(J[BII)I\n+  #231 = NameAndType        #152:#153     // formatLongBinary:(J[BIIZ)V\n+  #232 = NameAndType        #156:#153     // formatBigIntegerBinary:(J[BIIZ)V\n+  #233 = NameAndType        #289:#290     // abs:(J)J\n+  #234 = String             #291          // Value \\u0001 is too large for \\u0001 byte field.\n+  #235 = NameAndType        #245:#292     // makeConcatWithConstants:(JI)Ljava/lang/String;\n+  #236 = NameAndType        #293:#282     // toByteArray:()[B\n+  #237 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n+  #238 = Class              #294          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #239 = NameAndType        #295:#296     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #240 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils$1\n+  #241 = Utf8               java/lang/Object\n+  #242 = Utf8               java/nio/ByteBuffer\n+  #243 = Methodref          #297.#298     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #244 = Utf8               Length \\u0001 must be at least 2\n+  #245 = Utf8               makeConcatWithConstants\n+  #246 = Utf8               (I)Ljava/lang/String;\n+  #247 = Utf8               (Ljava/lang/String;)V\n+  #248 = Utf8               At offset \\u0001, \\u0001 byte binary number exceeds maximum signed long value\n+  #249 = Utf8               (II)Ljava/lang/String;\n+  #250 = Utf8               java/lang/Math\n+  #251 = Utf8               pow\n+  #252 = Utf8               (DD)D\n+  #253 = Utf8               java/lang/System\n+  #254 = Utf8               arraycopy\n+  #255 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #256 = Utf8               ([B)V\n+  #257 = Utf8               valueOf\n+  #258 = Utf8               (J)Ljava/math/BigInteger;\n+  #259 = Utf8               add\n+  #260 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #261 = Utf8               not\n+  #262 = Utf8               ()Ljava/math/BigInteger;\n+  #263 = Utf8               bitLength\n+  #264 = Utf8               ()I\n+  #265 = Utf8               longValue\n+  #266 = Utf8               ()J\n+  #267 = Utf8               ([BII)V\n+  #268 = Utf8               replaceAll\n+  #269 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #270 = Utf8               Invalid byte \\u0001 at offset \\u0001 in \\'\\u0001\\' len=\\u0001\n+  #271 = Utf8               (BILjava/lang/String;I)Ljava/lang/String;\n+  #272 = Utf8               (Ljava/lang/Throwable;)V\n+  #273 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #274 = Utf8               decode\n+  #275 = Utf8               ([B)Ljava/lang/String;\n+  #276 = Utf8               (JJ)V\n+  #277 = Utf8               encode\n+  #278 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #279 = Utf8               substring\n+  #280 = Utf8               position\n+  #281 = Utf8               array\n+  #282 = Utf8               ()[B\n+  #283 = Utf8               arrayOffset\n+  #284 = Utf8               java/lang/Long\n+  #285 = Utf8               toOctalString\n+  #286 = Utf8               (J)Ljava/lang/String;\n+  #287 = Utf8               \\u0001=\\u0001 will not fit in octal number buffer of length \\u0001\n+  #288 = Utf8               (JLjava/lang/String;I)Ljava/lang/String;\n+  #289 = Utf8               abs\n+  #290 = Utf8               (J)J\n+  #291 = Utf8               Value \\u0001 is too large for \\u0001 byte field.\n+  #292 = Utf8               (JI)Ljava/lang/String;\n+  #293 = Utf8               toByteArray\n+  #294 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #295 = Utf8               getZipEncoding\n+  #296 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #297 = Class              #299          // java/lang/invoke/StringConcatFactory\n+  #298 = NameAndType        #245:#302     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #299 = Utf8               java/lang/invoke/StringConcatFactory\n+  #300 = Class              #304          // java/lang/invoke/MethodHandles$Lookup\n+  #301 = Utf8               Lookup\n+  #302 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #303 = Class              #305          // java/lang/invoke/MethodHandles\n+  #304 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #305 = Utf8               java/lang/invoke/MethodHandles\n {\n   private static final int BYTE_MASK = 255;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 255\n \n   static final org.apache.commons.compress.archivers.zip.ZipEncoding DEFAULT_ENCODING;\n@@ -358,139 +346,131 @@\n          3: iload_2\n          4: iadd\n          5: istore        5\n          7: iload_1\n          8: istore        6\n         10: iload_2\n         11: iconst_2\n-        12: if_icmpge     47\n+        12: if_icmpge     29\n         15: new           #3                  // class java/lang/IllegalArgumentException\n         18: dup\n-        19: new           #4                  // class java/lang/StringBuilder\n-        22: dup\n-        23: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        26: ldc           #6                  // String Length\n-        28: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        31: iload_2\n-        32: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        35: ldc           #9                  // String  must be at least 2\n-        37: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        40: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        43: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-        46: athrow\n-        47: aload_0\n-        48: iload         6\n-        50: baload\n-        51: ifne          56\n-        54: lconst_0\n-        55: lreturn\n-        56: iload         6\n-        58: iload         5\n-        60: if_icmpge     78\n-        63: aload_0\n-        64: iload         6\n-        66: baload\n-        67: bipush        32\n-        69: if_icmpne     78\n-        72: iinc          6, 1\n-        75: goto          56\n-        78: aload_0\n-        79: iload         5\n-        81: iconst_1\n-        82: isub\n-        83: baload\n-        84: istore        7\n-        86: iload         6\n-        88: iload         5\n-        90: if_icmpge     119\n-        93: iload         7\n-        95: ifeq          105\n-        98: iload         7\n-       100: bipush        32\n-       102: if_icmpne     119\n-       105: iinc          5, -1\n+        19: iload_2\n+        20: invokedynamic #4,  0              // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+        25: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        28: athrow\n+        29: aload_0\n+        30: iload         6\n+        32: baload\n+        33: ifne          38\n+        36: lconst_0\n+        37: lreturn\n+        38: iload         6\n+        40: iload         5\n+        42: if_icmpge     60\n+        45: aload_0\n+        46: iload         6\n+        48: baload\n+        49: bipush        32\n+        51: if_icmpne     60\n+        54: iinc          6, 1\n+        57: goto          38\n+        60: aload_0\n+        61: iload         5\n+        63: iconst_1\n+        64: isub\n+        65: baload\n+        66: istore        7\n+        68: iload         6\n+        70: iload         5\n+        72: if_icmpge     101\n+        75: iload         7\n+        77: ifeq          87\n+        80: iload         7\n+        82: bipush        32\n+        84: if_icmpne     101\n+        87: iinc          5, -1\n+        90: aload_0\n+        91: iload         5\n+        93: iconst_1\n+        94: isub\n+        95: baload\n+        96: istore        7\n+        98: goto          68\n+       101: iload         6\n+       103: iload         5\n+       105: if_icmpge     163\n        108: aload_0\n-       109: iload         5\n-       111: iconst_1\n-       112: isub\n-       113: baload\n-       114: istore        7\n-       116: goto          86\n-       119: iload         6\n-       121: iload         5\n-       123: if_icmpge     181\n-       126: aload_0\n-       127: iload         6\n-       129: baload\n-       130: istore        8\n-       132: iload         8\n-       134: bipush        48\n-       136: if_icmplt     146\n-       139: iload         8\n-       141: bipush        55\n-       143: if_icmple     164\n-       146: new           #3                  // class java/lang/IllegalArgumentException\n-       149: dup\n-       150: aload_0\n-       151: iload_1\n-       152: iload_2\n-       153: iload         6\n-       155: iload         8\n-       157: invokestatic  #12                 // Method exceptionMessage:([BIIIB)Ljava/lang/String;\n-       160: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-       163: athrow\n-       164: lload_3\n-       165: iconst_3\n-       166: lshl\n-       167: iload         8\n-       169: bipush        48\n-       171: isub\n-       172: i2l\n-       173: ladd\n-       174: lstore_3\n-       175: iinc          6, 1\n-       178: goto          119\n-       181: lload_3\n-       182: lreturn\n+       109: iload         6\n+       111: baload\n+       112: istore        8\n+       114: iload         8\n+       116: bipush        48\n+       118: if_icmplt     128\n+       121: iload         8\n+       123: bipush        55\n+       125: if_icmple     146\n+       128: new           #3                  // class java/lang/IllegalArgumentException\n+       131: dup\n+       132: aload_0\n+       133: iload_1\n+       134: iload_2\n+       135: iload         6\n+       137: iload         8\n+       139: invokestatic  #6                  // Method exceptionMessage:([BIIIB)Ljava/lang/String;\n+       142: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+       145: athrow\n+       146: lload_3\n+       147: iconst_3\n+       148: lshl\n+       149: iload         8\n+       151: bipush        48\n+       153: isub\n+       154: i2l\n+       155: ladd\n+       156: lstore_3\n+       157: iinc          6, 1\n+       160: goto          101\n+       163: lload_3\n+       164: lreturn\n       LineNumberTable:\n         line 107: 0\n         line 108: 2\n         line 109: 7\n         line 111: 10\n         line 112: 15\n-        line 115: 47\n-        line 116: 54\n-        line 120: 56\n-        line 121: 63\n-        line 122: 72\n-        line 132: 78\n-        line 133: 86\n-        line 134: 105\n-        line 135: 108\n-        line 138: 119\n-        line 139: 126\n-        line 141: 132\n-        line 142: 146\n-        line 143: 157\n-        line 145: 164\n-        line 138: 175\n-        line 149: 181\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-          132      43     8 currentByte   B\n-            0     183     0 buffer   [B\n-            0     183     1 offset   I\n-            0     183     2 length   I\n-            2     181     3 result   J\n-            7     176     5   end   I\n-           10     173     6 start   I\n-           86      97     7 trailer   B\n+        line 115: 29\n+        line 116: 36\n+        line 120: 38\n+        line 121: 45\n+        line 122: 54\n+        line 132: 60\n+        line 133: 68\n+        line 134: 87\n+        line 135: 90\n+        line 138: 101\n+        line 139: 108\n+        line 141: 114\n+        line 142: 128\n+        line 143: 139\n+        line 145: 146\n+        line 138: 157\n+        line 149: 163\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+          114      43     8 currentByte   B\n+            0     165     0 buffer   [B\n+            0     165     1 offset   I\n+            0     165     2 length   I\n+            2     163     3 result   J\n+            7     158     5   end   I\n+           10     155     6 start   I\n+           68      97     7 trailer   B\n       StackMapTable: number_of_entries = 9\n         frame_type = 254 /* append */\n-          offset_delta = 47\n+          offset_delta = 29\n           locals = [ long, int, int ]\n         frame_type = 8 /* same */\n         frame_type = 21 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 7\n           locals = [ int ]\n         frame_type = 18 /* same */\n@@ -512,15 +492,15 @@\n          2: baload\n          3: sipush        128\n          6: iand\n          7: ifne          17\n         10: aload_0\n         11: iload_1\n         12: iload_2\n-        13: invokestatic  #13                 // Method parseOctal:([BII)J\n+        13: invokestatic  #7                  // Method parseOctal:([BII)J\n         16: lreturn\n         17: aload_0\n         18: iload_1\n         19: baload\n         20: iconst_m1\n         21: if_icmpne     28\n         24: iconst_1\n@@ -530,21 +510,21 @@\n         30: iload_2\n         31: bipush        9\n         33: if_icmpge     44\n         36: aload_0\n         37: iload_1\n         38: iload_2\n         39: iload_3\n-        40: invokestatic  #14                 // Method parseBinaryLong:([BIIZ)J\n+        40: invokestatic  #8                  // Method parseBinaryLong:([BIIZ)J\n         43: lreturn\n         44: aload_0\n         45: iload_1\n         46: iload_2\n         47: iload_3\n-        48: invokestatic  #15                 // Method parseBinaryBigInteger:([BIIZ)J\n+        48: invokestatic  #9                  // Method parseBinaryBigInteger:([BIIZ)J\n         51: lreturn\n       LineNumberTable:\n         line 172: 0\n         line 173: 10\n         line 175: 17\n         line 176: 30\n         line 177: 36\n@@ -567,103 +547,92 @@\n   private static long parseBinaryLong(byte[], int, int, boolean);\n     descriptor: ([BIIZ)J\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=8, locals=7, args_size=4\n          0: iload_2\n          1: bipush        9\n-         3: if_icmplt     47\n+         3: if_icmplt     21\n          6: new           #3                  // class java/lang/IllegalArgumentException\n          9: dup\n-        10: new           #4                  // class java/lang/StringBuilder\n-        13: dup\n-        14: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        17: ldc           #16                 // String At offset\n-        19: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        22: iload_1\n-        23: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        26: ldc           #17                 // String ,\n-        28: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        31: iload_2\n-        32: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        35: ldc           #18                 // String  byte binary number exceeds maximum signed long value\n-        37: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        40: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        43: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-        46: athrow\n-        47: lconst_0\n-        48: lstore        4\n-        50: iconst_1\n-        51: istore        6\n-        53: iload         6\n-        55: iload_2\n-        56: if_icmpge     84\n-        59: lload         4\n-        61: bipush        8\n-        63: lshl\n-        64: aload_0\n-        65: iload_1\n-        66: iload         6\n-        68: iadd\n-        69: baload\n-        70: sipush        255\n-        73: iand\n-        74: i2l\n-        75: ladd\n-        76: lstore        4\n-        78: iinc          6, 1\n-        81: goto          53\n-        84: iload_3\n-        85: ifeq          116\n-        88: lload         4\n-        90: lconst_1\n-        91: lsub\n-        92: lstore        4\n+        10: iload_1\n+        11: iload_2\n+        12: invokedynamic #10,  0             // InvokeDynamic #1:makeConcatWithConstants:(II)Ljava/lang/String;\n+        17: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        20: athrow\n+        21: lconst_0\n+        22: lstore        4\n+        24: iconst_1\n+        25: istore        6\n+        27: iload         6\n+        29: iload_2\n+        30: if_icmpge     58\n+        33: lload         4\n+        35: bipush        8\n+        37: lshl\n+        38: aload_0\n+        39: iload_1\n+        40: iload         6\n+        42: iadd\n+        43: baload\n+        44: sipush        255\n+        47: iand\n+        48: i2l\n+        49: ladd\n+        50: lstore        4\n+        52: iinc          6, 1\n+        55: goto          27\n+        58: iload_3\n+        59: ifeq          90\n+        62: lload         4\n+        64: lconst_1\n+        65: lsub\n+        66: lstore        4\n+        68: lload         4\n+        70: ldc2_w        #11                 // double 2.0d\n+        73: iload_2\n+        74: iconst_1\n+        75: isub\n+        76: i2d\n+        77: ldc2_w        #13                 // double 8.0d\n+        80: dmul\n+        81: invokestatic  #15                 // Method java/lang/Math.pow:(DD)D\n+        84: d2l\n+        85: lconst_1\n+        86: lsub\n+        87: lxor\n+        88: lstore        4\n+        90: iload_3\n+        91: ifeq          100\n         94: lload         4\n-        96: ldc2_w        #19                 // double 2.0d\n-        99: iload_2\n-       100: iconst_1\n-       101: isub\n-       102: i2d\n-       103: ldc2_w        #21                 // double 8.0d\n-       106: dmul\n-       107: invokestatic  #23                 // Method java/lang/Math.pow:(DD)D\n-       110: d2l\n-       111: lconst_1\n-       112: lsub\n-       113: lxor\n-       114: lstore        4\n-       116: iload_3\n-       117: ifeq          126\n-       120: lload         4\n-       122: lneg\n-       123: goto          128\n-       126: lload         4\n-       128: lreturn\n+        96: lneg\n+        97: goto          102\n+       100: lload         4\n+       102: lreturn\n       LineNumberTable:\n         line 185: 0\n         line 186: 6\n-        line 191: 47\n-        line 192: 50\n-        line 193: 59\n-        line 192: 78\n-        line 195: 84\n-        line 197: 88\n-        line 198: 94\n-        line 200: 116\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-           53      31     6     i   I\n-            0     129     0 buffer   [B\n-            0     129     1 offset   I\n-            0     129     2 length   I\n-            0     129     3 negative   Z\n-           50      79     4   val   J\n+        line 191: 21\n+        line 192: 24\n+        line 193: 33\n+        line 192: 52\n+        line 195: 58\n+        line 197: 62\n+        line 198: 68\n+        line 200: 90\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+           27      31     6     i   I\n+            0     103     0 buffer   [B\n+            0     103     1 offset   I\n+            0     103     2 length   I\n+            0     103     3 negative   Z\n+           24      79     4   val   J\n       StackMapTable: number_of_entries = 6\n-        frame_type = 47 /* same */\n+        frame_type = 21 /* same */\n         frame_type = 253 /* append */\n           offset_delta = 5\n           locals = [ long, int ]\n         frame_type = 250 /* chop */\n           offset_delta = 30\n         frame_type = 31 /* same */\n         frame_type = 9 /* same */\n@@ -685,81 +654,70 @@\n          9: iconst_1\n         10: iadd\n         11: aload         4\n         13: iconst_0\n         14: iload_2\n         15: iconst_1\n         16: isub\n-        17: invokestatic  #24                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-        20: new           #25                 // class java/math/BigInteger\n+        17: invokestatic  #16                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        20: new           #17                 // class java/math/BigInteger\n         23: dup\n         24: aload         4\n-        26: invokespecial #26                 // Method java/math/BigInteger.\"<init>\":([B)V\n+        26: invokespecial #18                 // Method java/math/BigInteger.\"<init>\":([B)V\n         29: astore        5\n         31: iload_3\n         32: ifeq          51\n         35: aload         5\n-        37: ldc2_w        #27                 // long -1l\n-        40: invokestatic  #29                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-        43: invokevirtual #30                 // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-        46: invokevirtual #31                 // Method java/math/BigInteger.not:()Ljava/math/BigInteger;\n+        37: ldc2_w        #19                 // long -1l\n+        40: invokestatic  #21                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+        43: invokevirtual #22                 // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+        46: invokevirtual #23                 // Method java/math/BigInteger.not:()Ljava/math/BigInteger;\n         49: astore        5\n         51: aload         5\n-        53: invokevirtual #32                 // Method java/math/BigInteger.bitLength:()I\n+        53: invokevirtual #24                 // Method java/math/BigInteger.bitLength:()I\n         56: bipush        63\n-        58: if_icmple     102\n+        58: if_icmple     76\n         61: new           #3                  // class java/lang/IllegalArgumentException\n         64: dup\n-        65: new           #4                  // class java/lang/StringBuilder\n-        68: dup\n-        69: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        72: ldc           #16                 // String At offset\n-        74: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        77: iload_1\n-        78: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        81: ldc           #17                 // String ,\n-        83: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        86: iload_2\n-        87: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        90: ldc           #18                 // String  byte binary number exceeds maximum signed long value\n-        92: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        95: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        98: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-       101: athrow\n-       102: iload_3\n-       103: ifeq          115\n-       106: aload         5\n-       108: invokevirtual #33                 // Method java/math/BigInteger.longValue:()J\n-       111: lneg\n-       112: goto          120\n-       115: aload         5\n-       117: invokevirtual #33                 // Method java/math/BigInteger.longValue:()J\n-       120: lreturn\n+        65: iload_1\n+        66: iload_2\n+        67: invokedynamic #10,  0             // InvokeDynamic #1:makeConcatWithConstants:(II)Ljava/lang/String;\n+        72: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        75: athrow\n+        76: iload_3\n+        77: ifeq          89\n+        80: aload         5\n+        82: invokevirtual #25                 // Method java/math/BigInteger.longValue:()J\n+        85: lneg\n+        86: goto          94\n+        89: aload         5\n+        91: invokevirtual #25                 // Method java/math/BigInteger.longValue:()J\n+        94: lreturn\n       LineNumberTable:\n         line 207: 0\n         line 208: 7\n         line 209: 20\n         line 210: 31\n         line 212: 35\n         line 214: 51\n         line 215: 61\n-        line 220: 102\n+        line 220: 76\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0     121     0 buffer   [B\n-            0     121     1 offset   I\n-            0     121     2 length   I\n-            0     121     3 negative   Z\n-            7     114     4 remainder   [B\n-           31      90     5   val   Ljava/math/BigInteger;\n+            0      95     0 buffer   [B\n+            0      95     1 offset   I\n+            0      95     2 length   I\n+            0      95     3 negative   Z\n+            7      88     4 remainder   [B\n+           31      64     5   val   Ljava/math/BigInteger;\n       StackMapTable: number_of_entries = 4\n         frame_type = 253 /* append */\n           offset_delta = 51\n           locals = [ class \"[B\", class java/math/BigInteger ]\n-        frame_type = 50 /* same */\n+        frame_type = 24 /* same */\n         frame_type = 12 /* same */\n         frame_type = 68 /* same_locals_1_stack_item */\n           stack = [ long ]\n \n   public static boolean parseBoolean(byte[], int);\n     descriptor: ([BI)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n@@ -786,85 +744,70 @@\n           stack = [ int ]\n \n   private static java.lang.String exceptionMessage(byte[], int, int, int, byte);\n     descriptor: ([BIIIB)Ljava/lang/String;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=6, args_size=5\n-         0: new           #34                 // class java/lang/String\n+         0: new           #26                 // class java/lang/String\n          3: dup\n          4: aload_0\n          5: iload_1\n          6: iload_2\n-         7: invokespecial #35                 // Method java/lang/String.\"<init>\":([BII)V\n+         7: invokespecial #27                 // Method java/lang/String.\"<init>\":([BII)V\n         10: astore        5\n         12: aload         5\n-        14: ldc           #36                 // String \\u0000\n-        16: ldc           #37                 // String {NUL}\n-        18: invokevirtual #38                 // Method java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+        14: ldc           #28                 // String \\u0000\n+        16: ldc           #29                 // String {NUL}\n+        18: invokevirtual #30                 // Method java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n         21: astore        5\n-        23: new           #4                  // class java/lang/StringBuilder\n-        26: dup\n-        27: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        30: ldc           #39                 // String Invalid byte\n-        32: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        35: iload         4\n-        37: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        40: ldc           #40                 // String  at offset\n-        42: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        45: iload_3\n-        46: iload_1\n-        47: isub\n-        48: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        51: ldc           #41                 // String  in \\'\n-        53: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        56: aload         5\n-        58: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        61: ldc           #42                 // String \\' len=\n-        63: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        66: iload_2\n-        67: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        70: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        73: areturn\n+        23: iload         4\n+        25: iload_3\n+        26: iload_1\n+        27: isub\n+        28: aload         5\n+        30: iload_2\n+        31: invokedynamic #31,  0             // InvokeDynamic #2:makeConcatWithConstants:(BILjava/lang/String;I)Ljava/lang/String;\n+        36: areturn\n       LineNumberTable:\n         line 247: 0\n         line 249: 12\n         line 250: 23\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      74     0 buffer   [B\n-            0      74     1 offset   I\n-            0      74     2 length   I\n-            0      74     3 current   I\n-            0      74     4 currentByte   B\n-           12      62     5 string   Ljava/lang/String;\n+            0      37     0 buffer   [B\n+            0      37     1 offset   I\n+            0      37     2 length   I\n+            0      37     3 current   I\n+            0      37     4 currentByte   B\n+           12      25     5 string   Ljava/lang/String;\n \n   public static java.lang.String parseName(byte[], int, int);\n     descriptor: ([BII)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=5, args_size=3\n          0: aload_0\n          1: iload_1\n          2: iload_2\n-         3: getstatic     #43                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         6: invokestatic  #44                 // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+         3: getstatic     #32                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         6: invokestatic  #33                 // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n          9: areturn\n         10: astore_3\n         11: aload_0\n         12: iload_1\n         13: iload_2\n-        14: getstatic     #46                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-        17: invokestatic  #44                 // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+        14: getstatic     #35                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        17: invokestatic  #33                 // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n         20: areturn\n         21: astore        4\n-        23: new           #47                 // class java/lang/RuntimeException\n+        23: new           #36                 // class java/lang/RuntimeException\n         26: dup\n         27: aload         4\n-        29: invokespecial #48                 // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n+        29: invokespecial #37                 // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n         32: athrow\n       Exception table:\n          from    to  target type\n              0     9    10   Class java/io/IOException\n             11    20    21   Class java/io/IOException\n       LineNumberTable:\n         line 265: 0\n@@ -912,20 +855,20 @@\n         35: newarray       byte\n         37: astore        5\n         39: aload_0\n         40: iload_1\n         41: aload         5\n         43: iconst_0\n         44: iload         4\n-        46: invokestatic  #24                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        46: invokestatic  #16                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         49: aload_3\n         50: aload         5\n-        52: invokeinterface #49,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+        52: invokeinterface #38,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n         57: areturn\n-        58: ldc           #50                 // String\n+        58: ldc           #39                 // String\n         60: areturn\n       LineNumberTable:\n         line 294: 0\n         line 295: 3\n         line 296: 19\n         line 295: 22\n         line 298: 28\n@@ -956,28 +899,28 @@\n     descriptor: ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=6, locals=6, args_size=2\n          0: aload_0\n          1: iload_1\n          2: bipush        12\n-         4: invokestatic  #51                 // Method parseOctalOrBinary:([BII)J\n+         4: invokestatic  #40                 // Method parseOctalOrBinary:([BII)J\n          7: lstore_2\n          8: aload_0\n          9: iload_1\n         10: bipush        12\n         12: iadd\n         13: bipush        12\n-        15: invokestatic  #51                 // Method parseOctalOrBinary:([BII)J\n+        15: invokestatic  #40                 // Method parseOctalOrBinary:([BII)J\n         18: lstore        4\n-        20: new           #52                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+        20: new           #41                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n         23: dup\n         24: lload_2\n         25: lload         4\n-        27: invokespecial #53                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+        27: invokespecial #42                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n         30: areturn\n       LineNumberTable:\n         line 314: 0\n         line 315: 8\n         line 317: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -991,30 +934,30 @@\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=6, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: getstatic     #43                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         7: invokestatic  #54                 // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+         4: getstatic     #32                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         7: invokestatic  #43                 // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n         10: ireturn\n         11: astore        4\n         13: aload_0\n         14: aload_1\n         15: iload_2\n         16: iload_3\n-        17: getstatic     #46                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-        20: invokestatic  #54                 // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+        17: getstatic     #35                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        20: invokestatic  #43                 // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n         23: ireturn\n         24: astore        5\n-        26: new           #47                 // class java/lang/RuntimeException\n+        26: new           #36                 // class java/lang/RuntimeException\n         29: dup\n         30: aload         5\n-        32: invokespecial #48                 // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n+        32: invokespecial #37                 // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n         35: athrow\n       Exception table:\n          from    to  target type\n              0    10    11   Class java/io/IOException\n             13    23    24   Class java/io/IOException\n       LineNumberTable:\n         line 337: 0\n@@ -1040,49 +983,49 @@\n \n   public static int formatNameBytes(java.lang.String, byte[], int, int, org.apache.commons.compress.archivers.zip.ZipEncoding) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=9, args_size=5\n          0: aload_0\n-         1: invokevirtual #55                 // Method java/lang/String.length:()I\n+         1: invokevirtual #44                 // Method java/lang/String.length:()I\n          4: istore        5\n          6: aload         4\n          8: aload_0\n-         9: invokeinterface #56,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+         9: invokeinterface #45,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n         14: astore        6\n         16: aload         6\n-        18: invokevirtual #57                 // Method java/nio/ByteBuffer.limit:()I\n+        18: invokevirtual #46                 // Method java/nio/ByteBuffer.limit:()I\n         21: iload_3\n         22: if_icmple     52\n         25: iload         5\n         27: ifle          52\n         30: aload         4\n         32: aload_0\n         33: iconst_0\n         34: iinc          5, -1\n         37: iload         5\n-        39: invokevirtual #58                 // Method java/lang/String.substring:(II)Ljava/lang/String;\n-        42: invokeinterface #56,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+        39: invokevirtual #47                 // Method java/lang/String.substring:(II)Ljava/lang/String;\n+        42: invokeinterface #45,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n         47: astore        6\n         49: goto          16\n         52: aload         6\n-        54: invokevirtual #57                 // Method java/nio/ByteBuffer.limit:()I\n+        54: invokevirtual #46                 // Method java/nio/ByteBuffer.limit:()I\n         57: aload         6\n-        59: invokevirtual #59                 // Method java/nio/ByteBuffer.position:()I\n+        59: invokevirtual #48                 // Method java/nio/ByteBuffer.position:()I\n         62: isub\n         63: istore        7\n         65: aload         6\n-        67: invokevirtual #60                 // Method java/nio/ByteBuffer.array:()[B\n+        67: invokevirtual #49                 // Method java/nio/ByteBuffer.array:()[B\n         70: aload         6\n-        72: invokevirtual #61                 // Method java/nio/ByteBuffer.arrayOffset:()I\n+        72: invokevirtual #50                 // Method java/nio/ByteBuffer.arrayOffset:()I\n         75: aload_1\n         76: iload_2\n         77: iload         7\n-        79: invokestatic  #24                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        79: invokestatic  #16                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         82: iload         7\n         84: istore        8\n         86: iload         8\n         88: iload_3\n         89: if_icmpge     105\n         92: aload_1\n         93: iload_2\n@@ -1146,30 +1089,30 @@\n         13: aload_2\n         14: iload_3\n         15: iload         5\n         17: iinc          5, -1\n         20: iadd\n         21: bipush        48\n         23: bastore\n-        24: goto          123\n+        24: goto          99\n         27: lload_0\n         28: lstore        6\n         30: iload         5\n         32: iflt          72\n         35: lload         6\n         37: lconst_0\n         38: lcmp\n         39: ifeq          72\n         42: aload_2\n         43: iload_3\n         44: iload         5\n         46: iadd\n         47: bipush        48\n         49: lload         6\n-        51: ldc2_w        #62                 // long 7l\n+        51: ldc2_w        #51                 // long 7l\n         54: land\n         55: l2i\n         56: i2b\n         57: iadd\n         58: i2b\n         59: bastore\n         60: lload         6\n@@ -1177,80 +1120,70 @@\n         63: lushr\n         64: lstore        6\n         66: iinc          5, -1\n         69: goto          30\n         72: lload         6\n         74: lconst_0\n         75: lcmp\n-        76: ifeq          123\n+        76: ifeq          99\n         79: new           #3                  // class java/lang/IllegalArgumentException\n         82: dup\n-        83: new           #4                  // class java/lang/StringBuilder\n-        86: dup\n-        87: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        90: lload_0\n-        91: invokevirtual #64                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        94: ldc           #65                 // String =\n-        96: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        99: lload_0\n-       100: invokestatic  #66                 // Method java/lang/Long.toOctalString:(J)Ljava/lang/String;\n-       103: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       106: ldc           #67                 // String  will not fit in octal number buffer of length\n-       108: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       111: iload         4\n-       113: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       116: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       119: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-       122: athrow\n-       123: iload         5\n-       125: iflt          142\n-       128: aload_2\n-       129: iload_3\n-       130: iload         5\n-       132: iadd\n-       133: bipush        48\n-       135: bastore\n-       136: iinc          5, -1\n-       139: goto          123\n-       142: return\n+        83: lload_0\n+        84: lload_0\n+        85: invokestatic  #53                 // Method java/lang/Long.toOctalString:(J)Ljava/lang/String;\n+        88: iload         4\n+        90: invokedynamic #54,  0             // InvokeDynamic #3:makeConcatWithConstants:(JLjava/lang/String;I)Ljava/lang/String;\n+        95: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        98: athrow\n+        99: iload         5\n+       101: iflt          118\n+       104: aload_2\n+       105: iload_3\n+       106: iload         5\n+       108: iadd\n+       109: bipush        48\n+       111: bastore\n+       112: iinc          5, -1\n+       115: goto          99\n+       118: return\n       LineNumberTable:\n         line 398: 0\n         line 399: 4\n         line 400: 7\n         line 401: 13\n         line 403: 27\n         line 404: 30\n         line 406: 42\n         line 407: 60\n         line 404: 66\n         line 410: 72\n         line 411: 79\n-        line 412: 100\n-        line 416: 123\n-        line 417: 128\n-        line 416: 136\n-        line 419: 142\n+        line 412: 85\n+        line 416: 99\n+        line 417: 104\n+        line 416: 112\n+        line 419: 118\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           30      93     6   val   J\n-            0     143     0 value   J\n-            0     143     2 buffer   [B\n-            0     143     3 offset   I\n-            0     143     4 length   I\n-            4     139     5 remaining   I\n+           30      69     6   val   J\n+            0     119     0 value   J\n+            0     119     2 buffer   [B\n+            0     119     3 offset   I\n+            0     119     4 length   I\n+            4     115     5 remaining   I\n       StackMapTable: number_of_entries = 5\n         frame_type = 252 /* append */\n           offset_delta = 27\n           locals = [ int ]\n         frame_type = 252 /* append */\n           offset_delta = 2\n           locals = [ long ]\n         frame_type = 41 /* same */\n         frame_type = 250 /* chop */\n-          offset_delta = 50\n+          offset_delta = 26\n         frame_type = 18 /* same */\n \n   public static int formatOctalBytes(long, byte[], int, int);\n     descriptor: (J[BII)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=6, args_size=4\n@@ -1258,15 +1191,15 @@\n          2: iconst_2\n          3: isub\n          4: istore        5\n          6: lload_0\n          7: aload_2\n          8: iload_3\n          9: iload         5\n-        11: invokestatic  #68                 // Method formatUnsignedOctalString:(J[BII)V\n+        11: invokestatic  #55                 // Method formatUnsignedOctalString:(J[BII)V\n         14: aload_2\n         15: iload_3\n         16: iload         5\n         18: iinc          5, 1\n         21: iadd\n         22: bipush        32\n         24: bastore\n@@ -1303,15 +1236,15 @@\n          2: iconst_1\n          3: isub\n          4: istore        5\n          6: lload_0\n          7: aload_2\n          8: iload_3\n          9: iload         5\n-        11: invokestatic  #68                 // Method formatUnsignedOctalString:(J[BII)V\n+        11: invokestatic  #55                 // Method formatUnsignedOctalString:(J[BII)V\n         14: aload_2\n         15: iload_3\n         16: iload         5\n         18: iadd\n         19: bipush        32\n         21: bastore\n         22: iload_3\n@@ -1335,17 +1268,17 @@\n     descriptor: (J[BII)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=6, locals=8, args_size=4\n          0: iload         4\n          2: bipush        8\n          4: if_icmpne     13\n-         7: ldc2_w        #69                 // long 2097151l\n+         7: ldc2_w        #56                 // long 2097151l\n         10: goto          16\n-        13: ldc2_w        #71                 // long 8589934591l\n+        13: ldc2_w        #58                 // long 8589934591l\n         16: lstore        5\n         18: lload_0\n         19: lconst_0\n         20: lcmp\n         21: ifge          28\n         24: iconst_1\n         25: goto          29\n@@ -1357,32 +1290,32 @@\n         37: lload         5\n         39: lcmp\n         40: ifgt          52\n         43: lload_0\n         44: aload_2\n         45: iload_3\n         46: iload         4\n-        48: invokestatic  #73                 // Method formatLongOctalBytes:(J[BII)I\n+        48: invokestatic  #60                 // Method formatLongOctalBytes:(J[BII)I\n         51: ireturn\n         52: iload         4\n         54: bipush        9\n         56: if_icmpge     72\n         59: lload_0\n         60: aload_2\n         61: iload_3\n         62: iload         4\n         64: iload         7\n-        66: invokestatic  #74                 // Method formatLongBinary:(J[BIIZ)V\n+        66: invokestatic  #61                 // Method formatLongBinary:(J[BIIZ)V\n         69: goto          82\n         72: lload_0\n         73: aload_2\n         74: iload_3\n         75: iload         4\n         77: iload         7\n-        79: invokestatic  #75                 // Method formatBigIntegerBinary:(J[BIIZ)V\n+        79: invokestatic  #62                 // Method formatBigIntegerBinary:(J[BIIZ)V\n         82: aload_2\n         83: iload_3\n         84: iload         7\n         86: ifeq          95\n         89: sipush        255\n         92: goto          98\n         95: sipush        128\n@@ -1445,219 +1378,197 @@\n          6: imul\n          7: istore        6\n          9: lconst_1\n         10: iload         6\n         12: lshl\n         13: lstore        7\n         15: lload_0\n-        16: invokestatic  #76                 // Method java/lang/Math.abs:(J)J\n+        16: invokestatic  #63                 // Method java/lang/Math.abs:(J)J\n         19: lstore        9\n         21: lload         9\n         23: lconst_0\n         24: lcmp\n         25: iflt          36\n         28: lload         9\n         30: lload         7\n         32: lcmp\n-        33: iflt          78\n+        33: iflt          52\n         36: new           #3                  // class java/lang/IllegalArgumentException\n         39: dup\n-        40: new           #4                  // class java/lang/StringBuilder\n-        43: dup\n-        44: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        47: ldc           #77                 // String Value\n-        49: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        52: lload_0\n-        53: invokevirtual #64                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        56: ldc           #78                 // String  is too large for\n-        58: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        61: iload         4\n-        63: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        66: ldc           #79                 // String  byte field.\n-        68: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        71: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        74: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-        77: athrow\n-        78: iload         5\n-        80: ifeq          109\n-        83: lload         9\n-        85: lload         7\n-        87: lconst_1\n-        88: lsub\n-        89: lxor\n-        90: lstore        9\n-        92: lload         9\n-        94: lconst_1\n-        95: ladd\n-        96: lstore        9\n-        98: lload         9\n-       100: ldc2_w        #80                 // long 255l\n-       103: iload         6\n-       105: lshl\n-       106: lor\n-       107: lstore        9\n-       109: iload_3\n-       110: iload         4\n-       112: iadd\n-       113: iconst_1\n-       114: isub\n-       115: istore        11\n-       117: iload         11\n-       119: iload_3\n-       120: if_icmplt     144\n-       123: aload_2\n-       124: iload         11\n-       126: lload         9\n-       128: l2i\n-       129: i2b\n-       130: bastore\n-       131: lload         9\n-       133: bipush        8\n-       135: lshr\n-       136: lstore        9\n-       138: iinc          11, -1\n-       141: goto          117\n-       144: return\n+        40: lload_0\n+        41: iload         4\n+        43: invokedynamic #64,  0             // InvokeDynamic #4:makeConcatWithConstants:(JI)Ljava/lang/String;\n+        48: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        51: athrow\n+        52: iload         5\n+        54: ifeq          83\n+        57: lload         9\n+        59: lload         7\n+        61: lconst_1\n+        62: lsub\n+        63: lxor\n+        64: lstore        9\n+        66: lload         9\n+        68: lconst_1\n+        69: ladd\n+        70: lstore        9\n+        72: lload         9\n+        74: ldc2_w        #65                 // long 255l\n+        77: iload         6\n+        79: lshl\n+        80: lor\n+        81: lstore        9\n+        83: iload_3\n+        84: iload         4\n+        86: iadd\n+        87: iconst_1\n+        88: isub\n+        89: istore        11\n+        91: iload         11\n+        93: iload_3\n+        94: if_icmplt     118\n+        97: aload_2\n+        98: iload         11\n+       100: lload         9\n+       102: l2i\n+       103: i2b\n+       104: bastore\n+       105: lload         9\n+       107: bipush        8\n+       109: lshr\n+       110: lstore        9\n+       112: iinc          11, -1\n+       115: goto          91\n+       118: return\n       LineNumberTable:\n         line 511: 0\n         line 512: 9\n         line 513: 15\n         line 514: 21\n         line 515: 36\n-        line 518: 78\n-        line 519: 83\n-        line 520: 92\n-        line 521: 98\n-        line 523: 109\n-        line 524: 123\n-        line 525: 131\n-        line 523: 138\n-        line 527: 144\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-          117      27    11     i   I\n-            0     145     0 value   J\n-            0     145     2   buf   [B\n-            0     145     3 offset   I\n-            0     145     4 length   I\n-            0     145     5 negative   Z\n-            9     136     6  bits   I\n-           15     130     7   max   J\n-           21     124     9   val   J\n+        line 518: 52\n+        line 519: 57\n+        line 520: 66\n+        line 521: 72\n+        line 523: 83\n+        line 524: 97\n+        line 525: 105\n+        line 523: 112\n+        line 527: 118\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+           91      27    11     i   I\n+            0     119     0 value   J\n+            0     119     2   buf   [B\n+            0     119     3 offset   I\n+            0     119     4 length   I\n+            0     119     5 negative   Z\n+            9     110     6  bits   I\n+           15     104     7   max   J\n+           21      98     9   val   J\n       StackMapTable: number_of_entries = 5\n         frame_type = 254 /* append */\n           offset_delta = 36\n           locals = [ int, long, long ]\n-        frame_type = 41 /* same */\n+        frame_type = 15 /* same */\n         frame_type = 30 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 7\n           locals = [ int ]\n         frame_type = 250 /* chop */\n           offset_delta = 26\n \n   private static void formatBigIntegerBinary(long, byte[], int, int, boolean);\n     descriptor: (J[BIIZ)V\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=12, args_size=5\n          0: lload_0\n-         1: invokestatic  #29                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+         1: invokestatic  #21                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n          4: astore        6\n          6: aload         6\n-         8: invokevirtual #82                 // Method java/math/BigInteger.toByteArray:()[B\n+         8: invokevirtual #67                 // Method java/math/BigInteger.toByteArray:()[B\n         11: astore        7\n         13: aload         7\n         15: arraylength\n         16: istore        8\n         18: iload         8\n         20: iload         4\n         22: iconst_1\n         23: isub\n-        24: if_icmple     69\n+        24: if_icmple     43\n         27: new           #3                  // class java/lang/IllegalArgumentException\n         30: dup\n-        31: new           #4                  // class java/lang/StringBuilder\n-        34: dup\n-        35: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        38: ldc           #77                 // String Value\n-        40: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        43: lload_0\n-        44: invokevirtual #64                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        47: ldc           #78                 // String  is too large for\n-        49: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        52: iload         4\n-        54: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        57: ldc           #79                 // String  byte field.\n-        59: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        62: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        65: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-        68: athrow\n-        69: iload_3\n-        70: iload         4\n-        72: iadd\n-        73: iload         8\n-        75: isub\n-        76: istore        9\n-        78: aload         7\n-        80: iconst_0\n-        81: aload_2\n-        82: iload         9\n-        84: iload         8\n-        86: invokestatic  #24                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-        89: iload         5\n-        91: ifeq          100\n-        94: sipush        255\n-        97: goto          101\n-       100: iconst_0\n-       101: i2b\n-       102: istore        10\n-       104: iload_3\n-       105: iconst_1\n-       106: iadd\n-       107: istore        11\n-       109: iload         11\n-       111: iload         9\n-       113: if_icmpge     128\n-       116: aload_2\n-       117: iload         11\n-       119: iload         10\n-       121: bastore\n-       122: iinc          11, 1\n-       125: goto          109\n-       128: return\n+        31: lload_0\n+        32: iload         4\n+        34: invokedynamic #64,  0             // InvokeDynamic #4:makeConcatWithConstants:(JI)Ljava/lang/String;\n+        39: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        42: athrow\n+        43: iload_3\n+        44: iload         4\n+        46: iadd\n+        47: iload         8\n+        49: isub\n+        50: istore        9\n+        52: aload         7\n+        54: iconst_0\n+        55: aload_2\n+        56: iload         9\n+        58: iload         8\n+        60: invokestatic  #16                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        63: iload         5\n+        65: ifeq          74\n+        68: sipush        255\n+        71: goto          75\n+        74: iconst_0\n+        75: i2b\n+        76: istore        10\n+        78: iload_3\n+        79: iconst_1\n+        80: iadd\n+        81: istore        11\n+        83: iload         11\n+        85: iload         9\n+        87: if_icmpge     102\n+        90: aload_2\n+        91: iload         11\n+        93: iload         10\n+        95: bastore\n+        96: iinc          11, 1\n+        99: goto          83\n+       102: return\n       LineNumberTable:\n         line 533: 0\n         line 534: 6\n         line 535: 13\n         line 536: 18\n         line 537: 27\n-        line 540: 69\n-        line 541: 78\n-        line 542: 89\n-        line 543: 104\n-        line 544: 116\n-        line 543: 122\n-        line 546: 128\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-          109      19    11     i   I\n-            0     129     0 value   J\n-            0     129     2   buf   [B\n-            0     129     3 offset   I\n-            0     129     4 length   I\n-            0     129     5 negative   Z\n-            6     123     6   val   Ljava/math/BigInteger;\n-           13     116     7     b   [B\n-           18     111     8   len   I\n-           78      51     9   off   I\n-          104      25    10  fill   B\n+        line 540: 43\n+        line 541: 52\n+        line 542: 63\n+        line 543: 78\n+        line 544: 90\n+        line 543: 96\n+        line 546: 102\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+           83      19    11     i   I\n+            0     103     0 value   J\n+            0     103     2   buf   [B\n+            0     103     3 offset   I\n+            0     103     4 length   I\n+            0     103     5 negative   Z\n+            6      97     6   val   Ljava/math/BigInteger;\n+           13      90     7     b   [B\n+           18      85     8   len   I\n+           52      51     9   off   I\n+           78      25    10  fill   B\n       StackMapTable: number_of_entries = 5\n         frame_type = 254 /* append */\n-          offset_delta = 69\n+          offset_delta = 43\n           locals = [ class java/math/BigInteger, class \"[B\", int ]\n         frame_type = 252 /* append */\n           offset_delta = 30\n           locals = [ int ]\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n         frame_type = 253 /* append */\n@@ -1675,15 +1586,15 @@\n          2: iconst_2\n          3: isub\n          4: istore        5\n          6: lload_0\n          7: aload_2\n          8: iload_3\n          9: iload         5\n-        11: invokestatic  #68                 // Method formatUnsignedOctalString:(J[BII)V\n+        11: invokestatic  #55                 // Method formatUnsignedOctalString:(J[BII)V\n         14: aload_2\n         15: iload_3\n         16: iload         5\n         18: iinc          5, 1\n         21: iadd\n         22: iconst_0\n         23: bastore\n@@ -1766,15 +1677,15 @@\n     descriptor: ([B)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=9, args_size=1\n          0: aload_0\n          1: sipush        148\n          4: bipush        8\n-         6: invokestatic  #13                 // Method parseOctal:([BII)J\n+         6: invokestatic  #7                  // Method parseOctal:([BII)J\n          9: lstore_1\n         10: lconst_0\n         11: lstore_3\n         12: lconst_0\n         13: lstore        5\n         15: iconst_0\n         16: istore        7\n@@ -1857,22 +1768,39 @@\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=2, locals=0, args_size=0\n          0: aconst_null\n-         1: invokestatic  #84                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         4: putstatic     #43                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         7: new           #85                 // class org/apache/commons/compress/archivers/tar/TarUtils$1\n+         1: invokestatic  #69                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         4: putstatic     #32                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         7: new           #70                 // class org/apache/commons/compress/archivers/tar/TarUtils$1\n         10: dup\n-        11: invokespecial #86                 // Method org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n-        14: putstatic     #46                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        11: invokespecial #71                 // Method org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n+        14: putstatic     #35                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         17: return\n       LineNumberTable:\n         line 42: 0\n         line 43: 1\n         line 49: 7\n }\n SourceFile: \"TarUtils.java\"\n InnerClasses:\n-  static #85;                             // class org/apache/commons/compress/archivers/tar/TarUtils$1\n+  #70;                                    // class org/apache/commons/compress/archivers/tar/TarUtils$1\n+  public static final #301= #300 of #303; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+BootstrapMethods:\n+  0: #177 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #178 Length \\u0001 must be at least 2\n+  1: #177 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #185 At offset \\u0001, \\u0001 byte binary number exceeds maximum signed long value\n+  2: #177 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #203 Invalid byte \\u0001 at offset \\u0001 in \\'\\u0001\\' len=\\u0001\n+  3: #177 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #227 \\u0001=\\u0001 will not fit in octal number buffer of length \\u0001\n+  4: #177 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #234 Value \\u0001 is too large for \\u0001 byte field.\n"}]}
