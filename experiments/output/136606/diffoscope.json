{"diffoscope-json-version": 1, "source1": "first/ClassPath$JrtModules.class", "source2": "second/ClassPath$JrtModules.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,52 +10,60 @@\n \n private static class JrtModules extends ClassPath.AbstractPathEntry\n {\n     private final ModularRuntimeImage modularRuntimeImage;\n     private final ClassPath.JrtModule[] modules;\n     \n     public JrtModules(final String path) throws IOException {\n-        super((ClassPath.ClassPath$1)null);\n+        super((ClassPath.AbstractPathEntry)null);\n         this.modularRuntimeImage = new ModularRuntimeImage();\n-        this.modules = (ClassPath.JrtModule[])this.modularRuntimeImage.list(path).stream().map(ClassPath.JrtModule::new).toArray(JrtModules::lambda$new$0);\n+        this.modules = (ClassPath.JrtModule[])this.modularRuntimeImage.list(path).stream().map(ClassPath.JrtModule::new).toArray(JrtModules::lambda$1);\n     }\n     \n     public void close() throws IOException {\n         if (this.modules != null) {\n-            for (final ClassPath.JrtModule module : this.modules) {\n+            ClassPath.JrtModule[] modules;\n+            for (int length = (modules = this.modules).length, i = 0; i < length; ++i) {\n+                final ClassPath.JrtModule module = modules[i];\n                 module.close();\n             }\n         }\n         if (this.modularRuntimeImage != null) {\n             this.modularRuntimeImage.close();\n         }\n     }\n     \n     ClassPath.ClassFile getClassFile(final String name, final String suffix) {\n-        for (final ClassPath.JrtModule module : this.modules) {\n+        ClassPath.JrtModule[] modules;\n+        for (int length = (modules = this.modules).length, i = 0; i < length; ++i) {\n+            final ClassPath.JrtModule module = modules[i];\n             final ClassPath.ClassFile classFile = module.getClassFile(name, suffix);\n             if (classFile != null) {\n                 return classFile;\n             }\n         }\n         return null;\n     }\n     \n     URL getResource(final String name) {\n-        for (final ClassPath.JrtModule module : this.modules) {\n+        ClassPath.JrtModule[] modules;\n+        for (int length = (modules = this.modules).length, i = 0; i < length; ++i) {\n+            final ClassPath.JrtModule module = modules[i];\n             final URL url = module.getResource(name);\n             if (url != null) {\n                 return url;\n             }\n         }\n         return null;\n     }\n     \n     InputStream getResourceAsStream(final String name) {\n-        for (final ClassPath.JrtModule module : this.modules) {\n+        ClassPath.JrtModule[] modules;\n+        for (int length = (modules = this.modules).length, i = 0; i < length; ++i) {\n+            final ClassPath.JrtModule module = modules[i];\n             final InputStream inputStream = module.getResourceAsStream(name);\n             if (inputStream != null) {\n                 return inputStream;\n             }\n         }\n         return null;\n     }\n"}]}
