{"diffoscope-json-version": 1, "source1": "first/InMemoryNodeModel.class", "source2": "second/InMemoryNodeModel.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,27 +2,31 @@\n package org.apache.commons.configuration2.tree;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Iterator;\n import org.apache.commons.configuration2.ex.ConfigurationRuntimeException;\n import org.apache.commons.lang3.mutable.Mutable;\n-import java.util.Collections;\n import org.apache.commons.lang3.mutable.MutableObject;\n-import java.util.Map;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Collection;\n+import java.util.Map;\n+import java.util.Collections;\n import java.util.concurrent.atomic.AtomicReference;\n \n public class InMemoryNodeModel implements NodeModel<ImmutableNode>\n {\n     private static final NodeHandler<ImmutableNode> DUMMY_HANDLER;\n     private final AtomicReference<TreeData> structure;\n     \n+    static {\n+        DUMMY_HANDLER = (NodeHandler)new TreeData((ImmutableNode)null, (Map)Collections.emptyMap(), (Map)Collections.emptyMap(), (NodeTracker)null, new ReferenceTracker());\n+    }\n+    \n     public InMemoryNodeModel() {\n         this(null);\n     }\n     \n     public InMemoryNodeModel(final ImmutableNode root) {\n         this.structure = new AtomicReference<TreeData>(this.createTreeData(initialRootNode(root), null));\n     }\n@@ -483,12 +487,8 @@\n     private static boolean valuesNotEmpty(final Iterable<?> values) {\n         return values.iterator().hasNext();\n     }\n     \n     private static RuntimeException attributeKeyException(final String key) {\n         return new IllegalArgumentException(\"New nodes cannot be added to an attribute key: \" + key);\n     }\n-    \n-    static {\n-        DUMMY_HANDLER = (NodeHandler)new TreeData((ImmutableNode)null, (Map)Collections.emptyMap(), (Map)Collections.emptyMap(), (NodeTracker)null, new ReferenceTracker());\n-    }\n }\n"}]}
