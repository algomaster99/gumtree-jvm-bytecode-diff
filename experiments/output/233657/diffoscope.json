{"diffoscope-json-version": 1, "source1": "first/CombinedConfiguration.class", "source2": "second/CombinedConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,23 +1,23 @@\n \n package org.apache.commons.configuration2;\n \n import org.apache.commons.configuration2.tree.UnionCombiner;\n+import org.apache.commons.configuration2.tree.QueryResult;\n import org.apache.commons.configuration2.event.Event;\n import org.apache.commons.configuration2.event.EventSource;\n import org.apache.commons.configuration2.tree.ConfigurationNodeVisitor;\n import org.apache.commons.configuration2.tree.NodeTreeWalker;\n import org.apache.commons.configuration2.tree.TreeUtils;\n import java.io.OutputStream;\n import java.io.PrintStream;\n import java.io.ByteArrayOutputStream;\n import java.util.HashMap;\n import java.util.ArrayList;\n import org.apache.commons.configuration2.tree.NodeKeyResolver;\n-import org.apache.commons.configuration2.tree.QueryResult;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Set;\n import java.util.stream.Collector;\n import java.util.stream.Collectors;\n import java.util.function.Function;\n@@ -40,16 +40,16 @@\n     private static final ImmutableNode EMPTY_ROOT;\n     private NodeCombiner nodeCombiner;\n     private List<CombinedConfiguration.ConfigData> configurations;\n     private Map<String, Configuration> namedConfigurations;\n     private ExpressionEngine conversionExpressionEngine;\n     private boolean upToDate;\n     \n-    public CombinedConfiguration(final NodeCombiner comb) {\n-        this.nodeCombiner = ((comb != null) ? comb : CombinedConfiguration.DEFAULT_COMBINER);\n+    public CombinedConfiguration(final NodeCombiner nodeCombiner) {\n+        this.nodeCombiner = ((nodeCombiner != null) ? nodeCombiner : CombinedConfiguration.DEFAULT_COMBINER);\n         this.initChildCollections();\n     }\n     \n     public CombinedConfiguration() {\n         this(null);\n     }\n     \n@@ -93,72 +93,71 @@\n             this.conversionExpressionEngine = conversionExpressionEngine;\n         }\n         finally {\n             this.endWrite();\n         }\n     }\n     \n-    public void addConfiguration(final Configuration config, final String name, final String at) {\n-        if (config == null) {\n+    public void addConfiguration(final Configuration obj, final String s, final String s2) {\n+        if (obj == null) {\n             throw new IllegalArgumentException(\"Added configuration must not be null!\");\n         }\n         this.beginWrite(true);\n         try {\n-            if (name != null && this.namedConfigurations.containsKey(name)) {\n-                throw new ConfigurationRuntimeException(\"A configuration with the name '\" + name + \"' already exists in this combined configuration!\");\n+            if (s != null && this.namedConfigurations.containsKey(s)) {\n+                throw new ConfigurationRuntimeException(\"A configuration with the name '\" + s + \"' already exists in this combined configuration!\");\n             }\n-            final CombinedConfiguration.ConfigData cd = new CombinedConfiguration.ConfigData(this, config, name, at);\n+            final CombinedConfiguration.ConfigData configData = new CombinedConfiguration.ConfigData(this, obj, s, s2);\n             if (this.getLogger().isDebugEnabled()) {\n-                this.getLogger().debug(\"Adding configuration \" + config + \" with name \" + name);\n+                this.getLogger().debug(\"Adding configuration \" + obj + \" with name \" + s);\n             }\n-            this.configurations.add(cd);\n-            if (name != null) {\n-                this.namedConfigurations.put(name, config);\n+            this.configurations.add(configData);\n+            if (s != null) {\n+                this.namedConfigurations.put(s, obj);\n             }\n             this.invalidateInternal();\n         }\n         finally {\n             this.endWrite();\n         }\n-        this.registerListenerAt(config);\n+        this.registerListenerAt(obj);\n     }\n     \n-    public void addConfiguration(final Configuration config, final String name) {\n-        this.addConfiguration(config, name, null);\n+    public void addConfiguration(final Configuration configuration, final String s) {\n+        this.addConfiguration(configuration, s, null);\n     }\n     \n-    public void addConfiguration(final Configuration config) {\n-        this.addConfiguration(config, null, null);\n+    public void addConfiguration(final Configuration configuration) {\n+        this.addConfiguration(configuration, null, null);\n     }\n     \n     public int getNumberOfConfigurations() {\n         this.beginRead(true);\n         try {\n             return this.getNumberOfConfigurationsInternal();\n         }\n         finally {\n             this.endRead();\n         }\n     }\n     \n-    public Configuration getConfiguration(final int index) {\n+    public Configuration getConfiguration(final int n) {\n         this.beginRead(true);\n         try {\n-            final CombinedConfiguration.ConfigData cd = (CombinedConfiguration.ConfigData)this.configurations.get(index);\n-            return cd.getConfiguration();\n+            return ((CombinedConfiguration.ConfigData)this.configurations.get(n)).getConfiguration();\n         }\n         finally {\n             this.endRead();\n         }\n     }\n     \n-    public Configuration getConfiguration(final String name) {\n+    public Configuration getConfiguration(final String s) {\n         this.beginRead(true);\n         try {\n-            return this.namedConfigurations.get(name);\n+            return this.namedConfigurations.get(s);\n         }\n         finally {\n             this.endRead();\n         }\n     }\n     \n     public List<Configuration> getConfigurations() {\n@@ -177,40 +176,40 @@\n             return (List<String>)this.configurations.stream().map((Function<? super Object, ?>)CombinedConfiguration.ConfigData::getName).collect((Collector<? super Object, ?, List<? super Object>>)Collectors.toList());\n         }\n         finally {\n             this.endRead();\n         }\n     }\n     \n-    public boolean removeConfiguration(final Configuration config) {\n-        for (int index = 0; index < this.getNumberOfConfigurations(); ++index) {\n-            if (((CombinedConfiguration.ConfigData)this.configurations.get(index)).getConfiguration() == config) {\n-                this.removeConfigurationAt(index);\n+    public boolean removeConfiguration(final Configuration configuration) {\n+        for (int i = 0; i < this.getNumberOfConfigurations(); ++i) {\n+            if (((CombinedConfiguration.ConfigData)this.configurations.get(i)).getConfiguration() == configuration) {\n+                this.removeConfigurationAt(i);\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n-    public Configuration removeConfigurationAt(final int index) {\n-        final CombinedConfiguration.ConfigData cd = (CombinedConfiguration.ConfigData)this.configurations.remove(index);\n-        if (cd.getName() != null) {\n-            this.namedConfigurations.remove(cd.getName());\n+    public Configuration removeConfigurationAt(final int n) {\n+        final CombinedConfiguration.ConfigData configData = (CombinedConfiguration.ConfigData)this.configurations.remove(n);\n+        if (configData.getName() != null) {\n+            this.namedConfigurations.remove(configData.getName());\n         }\n-        this.unregisterListenerAt(cd.getConfiguration());\n+        this.unregisterListenerAt(configData.getConfiguration());\n         this.invalidateInternal();\n-        return cd.getConfiguration();\n+        return configData.getConfiguration();\n     }\n     \n-    public Configuration removeConfiguration(final String name) {\n-        final Configuration conf = this.getConfiguration(name);\n-        if (conf != null) {\n-            this.removeConfiguration(conf);\n+    public Configuration removeConfiguration(final String s) {\n+        final Configuration configuration = this.getConfiguration(s);\n+        if (configuration != null) {\n+            this.removeConfiguration(configuration);\n         }\n-        return conf;\n+        return configuration;\n     }\n     \n     public Set<String> getConfigurationNames() {\n         this.beginRead(true);\n         try {\n             return this.namedConfigurations.keySet();\n         }\n@@ -225,111 +224,112 @@\n             this.invalidateInternal();\n         }\n         finally {\n             this.endWrite();\n         }\n     }\n     \n-    public void onEvent(final ConfigurationEvent event) {\n-        if (event.isBeforeUpdate()) {\n+    public void onEvent(final ConfigurationEvent configurationEvent) {\n+        if (configurationEvent.isBeforeUpdate()) {\n             this.invalidate();\n         }\n     }\n     \n     protected void clearInternal() {\n         this.unregisterListenerAtChildren();\n         this.initChildCollections();\n         this.invalidateInternal();\n     }\n     \n     public Object clone() {\n         this.beginRead(false);\n         try {\n-            final CombinedConfiguration copy = (CombinedConfiguration)super.clone();\n-            copy.initChildCollections();\n-            this.configurations.forEach(cd -> copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd.getConfiguration()), cd.getName(), cd.getAt()));\n-            return copy;\n+            final CombinedConfiguration combinedConfiguration = (CombinedConfiguration)super.clone();\n+            combinedConfiguration.initChildCollections();\n+            this.configurations.forEach(configData -> combinedConfiguration2.addConfiguration(ConfigurationUtils.cloneConfiguration(configData.getConfiguration()), configData.getName(), configData.getAt()));\n+            return combinedConfiguration;\n         }\n         finally {\n             this.endRead();\n         }\n     }\n     \n-    public Configuration getSource(final String key) {\n-        if (key == null) {\n+    public Configuration getSource(final String str) {\n+        if (str == null) {\n             throw new IllegalArgumentException(\"Key must not be null!\");\n         }\n-        final Set<Configuration> sources = this.getSources(key);\n+        final Set<Configuration> sources = this.getSources(str);\n         if (sources.isEmpty()) {\n             return null;\n         }\n         final Iterator<Configuration> iterator = sources.iterator();\n-        final Configuration source = (Configuration)iterator.next();\n+        final Configuration configuration = (Configuration)iterator.next();\n         if (iterator.hasNext()) {\n-            throw new IllegalArgumentException(\"The key \" + key + \" is defined by multiple sources!\");\n+            throw new IllegalArgumentException(\"The key \" + str + \" is defined by multiple sources!\");\n         }\n-        return source;\n+        return configuration;\n     }\n     \n-    public Set<Configuration> getSources(final String key) {\n+    public Set<Configuration> getSources(final String s) {\n         this.beginRead(false);\n         try {\n-            final List<QueryResult<ImmutableNode>> results = this.fetchNodeList(key);\n-            final Set<Configuration> sources = new HashSet<Configuration>();\n-            results.forEach(result -> {\n-                final Set<Configuration> resultSources = this.findSourceConfigurations((ImmutableNode)result.getNode());\n-                if (resultSources.isEmpty()) {\n-                    sources.add(this);\n+            final List fetchNodeList = this.fetchNodeList(s);\n+            final HashSet set = new HashSet();\n+            fetchNodeList.forEach(queryResult -> {\n+                this.findSourceConfigurations((ImmutableNode)queryResult.getNode());\n+                final Set set3;\n+                if (set3.isEmpty()) {\n+                    set2.add(this);\n                 }\n                 else {\n-                    sources.addAll(resultSources);\n+                    set2.addAll(set3);\n                 }\n                 return;\n             });\n-            return sources;\n+            return set;\n         }\n         finally {\n             this.endRead();\n         }\n     }\n     \n-    protected void beginRead(final boolean optimize) {\n-        if (optimize) {\n+    protected void beginRead(final boolean b) {\n+        if (b) {\n             super.beginRead(true);\n             return;\n         }\n-        boolean lockObtained = false;\n+        boolean b2 = false;\n         do {\n             super.beginRead(false);\n             if (this.isUpToDate()) {\n-                lockObtained = true;\n+                b2 = true;\n             }\n             else {\n                 this.endRead();\n                 this.beginWrite(false);\n                 this.endWrite();\n             }\n-        } while (!lockObtained);\n+        } while (!b2);\n     }\n     \n-    protected void beginWrite(final boolean optimize) {\n+    protected void beginWrite(final boolean b) {\n         super.beginWrite(true);\n-        if (optimize) {\n+        if (b) {\n             return;\n         }\n-        boolean success = false;\n+        boolean b2 = false;\n         try {\n             if (!this.isUpToDate()) {\n                 this.getSubConfigurationParentModel().replaceRoot(this.constructCombinedNode(), (NodeKeyResolver)this);\n                 this.upToDate = true;\n             }\n-            success = true;\n+            b2 = true;\n         }\n         finally {\n-            if (!success) {\n+            if (!b2) {\n                 this.endWrite();\n             }\n         }\n     }\n     \n     private boolean isUpToDate() {\n         return this.upToDate;\n@@ -348,40 +348,39 @@\n     private ImmutableNode constructCombinedNode() {\n         if (this.getNumberOfConfigurationsInternal() < 1) {\n             if (this.getLogger().isDebugEnabled()) {\n                 this.getLogger().debug(\"No configurations defined for \" + this);\n             }\n             return CombinedConfiguration.EMPTY_ROOT;\n         }\n-        final Iterator<CombinedConfiguration.ConfigData> it = this.configurations.iterator();\n-        ImmutableNode node = ((CombinedConfiguration.ConfigData)it.next()).getTransformedRoot();\n-        while (it.hasNext()) {\n-            node = this.nodeCombiner.combine(node, ((CombinedConfiguration.ConfigData)it.next()).getTransformedRoot());\n+        final Iterator<CombinedConfiguration.ConfigData> iterator = this.configurations.iterator();\n+        ImmutableNode immutableNode = ((CombinedConfiguration.ConfigData)iterator.next()).getTransformedRoot();\n+        while (iterator.hasNext()) {\n+            immutableNode = this.nodeCombiner.combine(immutableNode, ((CombinedConfiguration.ConfigData)iterator.next()).getTransformedRoot());\n         }\n         if (this.getLogger().isDebugEnabled()) {\n-            final ByteArrayOutputStream os = new ByteArrayOutputStream();\n-            final PrintStream stream = new PrintStream(os);\n-            TreeUtils.printTree(stream, node);\n-            this.getLogger().debug(os.toString());\n-        }\n-        return node;\n-    }\n-    \n-    private Set<Configuration> findSourceConfigurations(final ImmutableNode node) {\n-        final Set<Configuration> result = new HashSet<Configuration>();\n-        final FindNodeVisitor<ImmutableNode> visitor = (FindNodeVisitor<ImmutableNode>)new FindNodeVisitor((Object)node);\n-        this.configurations.forEach(cd -> {\n-            NodeTreeWalker.INSTANCE.walkBFS((Object)cd.getRootNode(), (ConfigurationNodeVisitor)visitor, this.getModel().getNodeHandler());\n-            if (visitor.isFound()) {\n-                result.add(cd.getConfiguration());\n-                visitor.reset();\n+            final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+            TreeUtils.printTree(new PrintStream((OutputStream)out), immutableNode);\n+            this.getLogger().debug(out.toString());\n+        }\n+        return immutableNode;\n+    }\n+    \n+    private Set<Configuration> findSourceConfigurations(final ImmutableNode immutableNode) {\n+        final HashSet set = new HashSet();\n+        this.configurations.forEach(configData -> {\n+            final Object o = new FindNodeVisitor((Object)immutableNode2);\n+            NodeTreeWalker.INSTANCE.walkBFS((Object)configData.getRootNode(), (ConfigurationNodeVisitor)findNodeVisitor, this.getModel().getNodeHandler());\n+            if (findNodeVisitor.isFound()) {\n+                set2.add(configData.getConfiguration());\n+                findNodeVisitor.reset();\n             }\n             return;\n         });\n-        return result;\n+        return set;\n     }\n     \n     private void registerListenerAt(final Configuration configuration) {\n         if (configuration instanceof EventSource) {\n             ((EventSource)configuration).addEventListener(ConfigurationEvent.ANY, (EventListener)this);\n         }\n     }\n@@ -390,15 +389,15 @@\n         if (configuration instanceof EventSource) {\n             ((EventSource)configuration).removeEventListener(ConfigurationEvent.ANY, (EventListener)this);\n         }\n     }\n     \n     private void unregisterListenerAtChildren() {\n         if (this.configurations != null) {\n-            this.configurations.forEach(child -> this.unregisterListenerAt(child.getConfiguration()));\n+            this.configurations.forEach(configData -> this.unregisterListenerAt(configData.getConfiguration()));\n         }\n     }\n     \n     private int getNumberOfConfigurationsInternal() {\n         return this.configurations.size();\n     }\n     \n"}]}
