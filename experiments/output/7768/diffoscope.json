{"diffoscope-json-version": 1, "source1": "first/ZipFile.class", "source2": "second/ZipFile.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,866 +1,858 @@\n-  SHA-256 checksum 03f4dfc9d35889aad0a2d35465c18228cfbfe992f7be0b78dcb2dcee6936dfd3\n+  SHA-256 checksum d9ef038bdc3a3bde47e0bf470727215b2867a42fb77e4b7c5edf66001a0f3028\n   Compiled from \"ZipFile.java\"\n public class org.apache.commons.compress.archivers.zip.ZipFile implements java.io.Closeable\n   minor version: 0\n-  major version: 53\n+  major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #1                          // org/apache/commons/compress/archivers/zip/ZipFile\n-  super_class: #225                       // java/lang/Object\n-  interfaces: 1, fields: 33, methods: 37, attributes: 3\n+  super_class: #230                       // java/lang/Object\n+  interfaces: 1, fields: 33, methods: 37, attributes: 2\n Constant pool:\n-    #1 = Class              #446          // org/apache/commons/compress/archivers/zip/ZipFile\n-    #2 = Class              #447          // org/apache/commons/compress/archivers/zip/ZipConstants\n-    #3 = Fieldref           #1.#448       // org/apache/commons/compress/archivers/zip/ZipFile.archive:Ljava/nio/channels/SeekableByteChannel;\n-    #4 = Class              #449          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-    #5 = String             #450          // UTF8\n-    #6 = Methodref          #1.#451       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-    #7 = Class              #452          // java/io/File\n-    #8 = Methodref          #7.#453       // java/io/File.\"<init>\":(Ljava/lang/String;)V\n-    #9 = Methodref          #1.#454       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;Z)V\n-   #10 = Methodref          #7.#455       // java/io/File.toPath:()Ljava/nio/file/Path;\n-   #11 = Fieldref           #456.#457     // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-   #12 = Methodref          #458.#459     // java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n-   #13 = Class              #460          // java/nio/file/attribute/FileAttribute\n-   #14 = Methodref          #461.#462     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-   #15 = Methodref          #7.#463       // java/io/File.getAbsolutePath:()Ljava/lang/String;\n-   #16 = Methodref          #1.#464       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZ)V\n-   #17 = String             #465          // unknown archive\n-   #18 = Methodref          #1.#466       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n-   #19 = Methodref          #225.#467     // java/lang/Object.\"<init>\":()V\n-   #20 = Class              #468          // java/util/LinkedList\n-   #21 = Methodref          #20.#467      // java/util/LinkedList.\"<init>\":()V\n-   #22 = Fieldref           #1.#469       // org/apache/commons/compress/archivers/zip/ZipFile.entries:Ljava/util/List;\n-   #23 = Class              #470          // java/util/HashMap\n-   #24 = Methodref          #23.#471      // java/util/HashMap.\"<init>\":(I)V\n-   #25 = Fieldref           #1.#472       // org/apache/commons/compress/archivers/zip/ZipFile.nameMap:Ljava/util/Map;\n-   #26 = Fieldref           #1.#473       // org/apache/commons/compress/archivers/zip/ZipFile.closed:Z\n-   #27 = Fieldref           #1.#474       // org/apache/commons/compress/archivers/zip/ZipFile.dwordBuf:[B\n-   #28 = Fieldref           #1.#475       // org/apache/commons/compress/archivers/zip/ZipFile.wordBuf:[B\n-   #29 = Fieldref           #1.#476       // org/apache/commons/compress/archivers/zip/ZipFile.cfhBuf:[B\n-   #30 = Fieldref           #1.#477       // org/apache/commons/compress/archivers/zip/ZipFile.shortBuf:[B\n-   #31 = Methodref          #478.#479     // java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-   #32 = Fieldref           #1.#480       // org/apache/commons/compress/archivers/zip/ZipFile.dwordBbuf:Ljava/nio/ByteBuffer;\n-   #33 = Fieldref           #1.#481       // org/apache/commons/compress/archivers/zip/ZipFile.wordBbuf:Ljava/nio/ByteBuffer;\n-   #34 = Fieldref           #1.#482       // org/apache/commons/compress/archivers/zip/ZipFile.cfhBbuf:Ljava/nio/ByteBuffer;\n-   #35 = Class              #483          // org/apache/commons/compress/archivers/zip/ZipFile$2\n-   #36 = Methodref          #35.#484      // org/apache/commons/compress/archivers/zip/ZipFile$2.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n-   #37 = Fieldref           #1.#485       // org/apache/commons/compress/archivers/zip/ZipFile.offsetComparator:Ljava/util/Comparator;\n-   #38 = Fieldref           #1.#486       // org/apache/commons/compress/archivers/zip/ZipFile.archiveName:Ljava/lang/String;\n-   #39 = Fieldref           #1.#487       // org/apache/commons/compress/archivers/zip/ZipFile.encoding:Ljava/lang/String;\n-   #40 = Methodref          #4.#488       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #41 = Fieldref           #1.#489       // org/apache/commons/compress/archivers/zip/ZipFile.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #42 = Fieldref           #1.#490       // org/apache/commons/compress/archivers/zip/ZipFile.useUnicodeExtraFields:Z\n-   #43 = Methodref          #1.#491       // org/apache/commons/compress/archivers/zip/ZipFile.populateFromCentralDirectory:()Ljava/util/Map;\n-   #44 = Methodref          #1.#492       // org/apache/commons/compress/archivers/zip/ZipFile.resolveLocalFileHeaderData:(Ljava/util/Map;)V\n-   #45 = Methodref          #493.#494     // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n-   #46 = InterfaceMethodref #321.#495     // java/nio/channels/SeekableByteChannel.close:()V\n-   #47 = Methodref          #496.#497     // java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n-   #48 = InterfaceMethodref #56.#498      // java/util/List.size:()I\n-   #49 = Class              #499          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-   #50 = InterfaceMethodref #56.#500      // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #51 = Class              #335          // \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\"\n-   #52 = Methodref          #501.#502     // java/util/Arrays.sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n-   #53 = Methodref          #501.#503     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-   #54 = InterfaceMethodref #396.#504     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #55 = Methodref          #20.#505      // java/util/LinkedList.getFirst:()Ljava/lang/Object;\n-   #56 = Class              #506          // java/util/List\n-   #57 = Methodref          #496.#507     // java/util/Collections.emptyList:()Ljava/util/List;\n-   #58 = InterfaceMethodref #396.#508     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-   #59 = Methodref          #20.#500      // java/util/LinkedList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #60 = Methodref          #509.#510     // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #61 = Class              #511          // org/apache/commons/compress/archivers/zip/ZipFile$Entry\n-   #62 = Methodref          #49.#512      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n-   #63 = Methodref          #49.#513      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-   #64 = Methodref          #1.#514       // org/apache/commons/compress/archivers/zip/ZipFile.createBoundedInputStream:(JJ)Lorg/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream;\n-   #65 = Methodref          #1.#515       // org/apache/commons/compress/archivers/zip/ZipFile.getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n-   #66 = InterfaceMethodref #361.#516     // java/util/Enumeration.hasMoreElements:()Z\n-   #67 = InterfaceMethodref #361.#517     // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n-   #68 = InterfaceMethodref #518.#519     // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate.test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #69 = Methodref          #1.#520       // org/apache/commons/compress/archivers/zip/ZipFile.getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-   #70 = Methodref          #521.#522     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-   #71 = Methodref          #509.#523     // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #72 = Class              #524          // java/io/BufferedInputStream\n-   #73 = Methodref          #72.#525      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #74 = Fieldref           #227.#526     // org/apache/commons/compress/archivers/zip/ZipFile$3.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n-   #75 = Methodref          #49.#527      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-   #76 = Methodref          #528.#529     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #77 = Methodref          #528.#530     // org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n-   #78 = Class              #531          // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-   #79 = Methodref          #78.#525      // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #80 = Class              #532          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-   #81 = Methodref          #49.#533      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #82 = Methodref          #397.#534     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n-   #83 = Methodref          #397.#535     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n-   #84 = Methodref          #80.#536      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n-   #85 = Class              #537          // java/util/zip/Inflater\n-   #86 = Methodref          #85.#538      // java/util/zip/Inflater.\"<init>\":(Z)V\n-   #87 = Class              #539          // org/apache/commons/compress/archivers/zip/ZipFile$1\n-   #88 = Class              #540          // java/io/SequenceInputStream\n-   #89 = Class              #541          // java/io/ByteArrayInputStream\n-   #90 = Fieldref           #1.#542       // org/apache/commons/compress/archivers/zip/ZipFile.ONE_ZERO_BYTE:[B\n-   #91 = Methodref          #89.#543      // java/io/ByteArrayInputStream.\"<init>\":([B)V\n-   #92 = Methodref          #88.#544      // java/io/SequenceInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n-   #93 = Methodref          #87.#545      // org/apache/commons/compress/archivers/zip/ZipFile$1.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n-   #94 = Class              #546          // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-   #95 = Methodref          #94.#525      // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #96 = Class              #547          // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-   #97 = Methodref          #96.#525      // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #98 = Class              #548          // java/util/zip/ZipException\n-   #99 = InvokeDynamic      #0:#552       // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n-  #100 = Methodref          #98.#453      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-  #101 = Methodref          #49.#553      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z\n-  #102 = Methodref          #1.#554       // org/apache/commons/compress/archivers/zip/ZipFile.getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-  #103 = Methodref          #493.#555     // org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n-  #104 = InterfaceMethodref #398.#556     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-  #105 = Methodref          #367.#495     // java/io/InputStream.close:()V\n-  #106 = Class              #557          // java/lang/Throwable\n-  #107 = Methodref          #106.#558     // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-  #108 = Fieldref           #559.#560     // java/lang/System.err:Ljava/io/PrintStream;\n-  #109 = InvokeDynamic      #1:#562       // #1:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n-  #110 = Methodref          #563.#564     // java/io/PrintStream.println:(Ljava/lang/String;)V\n-  #111 = Methodref          #1.#495       // org/apache/commons/compress/archivers/zip/ZipFile.close:()V\n-  #112 = Methodref          #225.#565     // java/lang/Object.finalize:()V\n-  #113 = Methodref          #23.#467      // java/util/HashMap.\"<init>\":()V\n-  #114 = Methodref          #1.#566       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory:()V\n-  #115 = Methodref          #478.#567     // java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n-  #116 = Methodref          #493.#568     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-  #117 = Methodref          #569.#570     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-  #118 = Fieldref           #1.#571       // org/apache/commons/compress/archivers/zip/ZipFile.CFH_SIG:J\n-  #119 = Methodref          #1.#572       // org/apache/commons/compress/archivers/zip/ZipFile.startsWithLocalFileHeader:()Z\n-  #120 = Class              #573          // java/io/IOException\n-  #121 = String             #574          // central directory is empty, can\\'t expand corrupt archive.\n-  #122 = Methodref          #120.#453     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-  #123 = Methodref          #1.#575       // org/apache/commons/compress/archivers/zip/ZipFile.readCentralDirectoryEntry:(Ljava/util/Map;)V\n-  #124 = Methodref          #61.#467      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.\"<init>\":()V\n-  #125 = Methodref          #576.#577     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-  #126 = Methodref          #61.#578      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V\n-  #127 = Methodref          #61.#579      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V\n-  #128 = Methodref          #61.#580      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V\n-  #129 = Methodref          #397.#581     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #130 = Methodref          #397.#582     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n-  #131 = Fieldref           #4.#583       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #132 = Fieldref           #584.#585     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #133 = Methodref          #61.#586      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #134 = Methodref          #61.#587      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-  #135 = Methodref          #61.#588      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V\n-  #136 = Methodref          #61.#589      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V\n-  #137 = Methodref          #569.#590     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-  #138 = Methodref          #509.#591     // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n-  #139 = Methodref          #61.#592      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V\n-  #140 = Methodref          #61.#593      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V\n-  #141 = Methodref          #61.#594      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V\n-  #142 = Methodref          #61.#595      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V\n-  #143 = Methodref          #61.#596      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V\n-  #144 = Methodref          #61.#597      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V\n-  #145 = Methodref          #61.#598      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V\n-  #146 = Methodref          #61.#599      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V\n-  #147 = InterfaceMethodref #56.#600      // java/util/List.add:(Ljava/lang/Object;)Z\n-  #148 = Methodref          #61.#601      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V\n-  #149 = Methodref          #1.#602       // org/apache/commons/compress/archivers/zip/ZipFile.setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;I)V\n-  #150 = Methodref          #61.#603      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V\n-  #151 = Class              #604          // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n-  #152 = Methodref          #151.#605     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.\"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-  #153 = InterfaceMethodref #396.#606     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #154 = Fieldref           #156.#607     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #155 = Methodref          #49.#608      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #156 = Class              #609          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #157 = Methodref          #49.#610      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-  #158 = Long               4294967295l\n-  #160 = Methodref          #49.#611      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-  #161 = Integer            65535\n-  #162 = Methodref          #156.#612     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V\n-  #163 = Methodref          #156.#613     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #164 = Methodref          #166.#614     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-  #165 = Methodref          #49.#595      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n-  #166 = Class              #615          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #167 = Methodref          #166.#616     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-  #168 = Methodref          #156.#617     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #169 = Methodref          #156.#618     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #170 = Methodref          #49.#594      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n-  #171 = Methodref          #156.#619     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #172 = Methodref          #156.#620     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #173 = Methodref          #49.#599      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n-  #174 = Methodref          #1.#621       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtEndOfCentralDirectoryRecord:()V\n-  #175 = InterfaceMethodref #321.#622     // java/nio/channels/SeekableByteChannel.position:()J\n-  #176 = Long               20l\n-  #178 = InterfaceMethodref #321.#623     // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #179 = Fieldref           #521.#624     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n-  #180 = Methodref          #501.#625     // java/util/Arrays.equals:([B[B)Z\n-  #181 = Methodref          #1.#626       // org/apache/commons/compress/archivers/zip/ZipFile.skipBytes:(I)V\n-  #182 = Methodref          #1.#627       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory32:()V\n-  #183 = Methodref          #1.#628       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory64:()V\n-  #184 = Methodref          #166.#629     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n-  #185 = Fieldref           #521.#630     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n-  #186 = String             #631          // archive\\'s ZIP64 end of central directory locator is corrupt.\n-  #187 = Long               22l\n-  #189 = Long               65557l\n-  #191 = Fieldref           #521.#632     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n-  #192 = Methodref          #1.#633       // org/apache/commons/compress/archivers/zip/ZipFile.tryToLocateSignature:(JJ[B)Z\n-  #193 = String             #634          // archive is not a ZIP archive\n-  #194 = InterfaceMethodref #321.#635     // java/nio/channels/SeekableByteChannel.size:()J\n-  #195 = Methodref          #636.#637     // java/lang/Math.max:(JJ)J\n-  #196 = Methodref          #478.#638     // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n-  #197 = Class              #639          // java/io/EOFException\n-  #198 = Methodref          #478.#640     // java/nio/ByteBuffer.get:()B\n-  #199 = Methodref          #197.#467     // java/io/EOFException.\"<init>\":()V\n-  #200 = InterfaceMethodref #56.#641      // java/util/List.iterator:()Ljava/util/Iterator;\n-  #201 = InterfaceMethodref #434.#642     // java/util/Iterator.hasNext:()Z\n-  #202 = InterfaceMethodref #434.#643     // java/util/Iterator.next:()Ljava/lang/Object;\n-  #203 = Methodref          #61.#611      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.getLocalHeaderOffset:()J\n-  #204 = Long               26l\n-  #206 = Methodref          #478.#644     // java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n-  #207 = Methodref          #576.#645     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n-  #208 = Methodref          #61.#646      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V\n-  #209 = Long               2l\n-  #211 = Methodref          #61.#647      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDataOffset:(J)V\n-  #212 = Methodref          #61.#648      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V\n-  #213 = Methodref          #151.#649     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #214 = Methodref          #151.#650     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #215 = Methodref          #509.#651     // org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #216 = Methodref          #61.#652      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.getName:()Ljava/lang/String;\n-  #217 = Methodref          #20.#653      // java/util/LinkedList.addLast:(Ljava/lang/Object;)V\n-  #218 = Fieldref           #521.#654     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n-  #219 = Class              #655          // java/nio/channels/FileChannel\n-  #220 = Class              #656          // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n-  #221 = Methodref          #220.#657     // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-  #222 = Class              #658          // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n-  #223 = Methodref          #222.#657     // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-  #224 = Fieldref           #521.#659     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n-  #225 = Class              #660          // java/lang/Object\n-  #226 = Class              #661          // java/io/Closeable\n-  #227 = Class              #662          // org/apache/commons/compress/archivers/zip/ZipFile$3\n-  #228 = Utf8               InnerClasses\n-  #229 = Utf8               Entry\n-  #230 = Utf8               NameAndComment\n-  #231 = Utf8               BoundedFileChannelInputStream\n-  #232 = Utf8               BoundedInputStream\n-  #233 = Utf8               HASH_SIZE\n-  #234 = Utf8               I\n-  #235 = Utf8               ConstantValue\n-  #236 = Integer            509\n-  #237 = Utf8               NIBLET_MASK\n-  #238 = Integer            15\n-  #239 = Utf8               BYTE_SHIFT\n-  #240 = Integer            8\n-  #241 = Utf8               POS_0\n-  #242 = Integer            0\n-  #243 = Utf8               POS_1\n-  #244 = Integer            1\n-  #245 = Utf8               POS_2\n-  #246 = Integer            2\n-  #247 = Utf8               POS_3\n-  #248 = Integer            3\n-  #249 = Utf8               ONE_ZERO_BYTE\n-  #250 = Utf8               [B\n-  #251 = Utf8               entries\n-  #252 = Utf8               Ljava/util/List;\n-  #253 = Utf8               Signature\n-  #254 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-  #255 = Utf8               nameMap\n-  #256 = Utf8               Ljava/util/Map;\n-  #257 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;>;\n-  #258 = Utf8               encoding\n-  #259 = Utf8               Ljava/lang/String;\n-  #260 = Utf8               zipEncoding\n-  #261 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #262 = Utf8               archiveName\n-  #263 = Utf8               archive\n-  #264 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n-  #265 = Utf8               useUnicodeExtraFields\n-  #266 = Utf8               Z\n-  #267 = Utf8               closed\n-  #268 = Utf8               dwordBuf\n-  #269 = Utf8               wordBuf\n-  #270 = Utf8               cfhBuf\n-  #271 = Utf8               shortBuf\n-  #272 = Utf8               dwordBbuf\n-  #273 = Utf8               Ljava/nio/ByteBuffer;\n-  #274 = Utf8               wordBbuf\n-  #275 = Utf8               cfhBbuf\n-  #276 = Utf8               CFH_LEN\n-  #277 = Integer            42\n-  #278 = Utf8               CFH_SIG\n-  #279 = Utf8               J\n-  #280 = Utf8               MIN_EOCD_SIZE\n-  #281 = Integer            22\n-  #282 = Utf8               MAX_EOCD_SIZE\n-  #283 = Integer            65557\n-  #284 = Utf8               CFD_LOCATOR_OFFSET\n-  #285 = Integer            16\n-  #286 = Utf8               ZIP64_EOCDL_LENGTH\n-  #287 = Integer            20\n-  #288 = Utf8               ZIP64_EOCDL_LOCATOR_OFFSET\n-  #289 = Utf8               ZIP64_EOCD_CFD_LOCATOR_OFFSET\n-  #290 = Integer            48\n-  #291 = Utf8               LFH_OFFSET_FOR_FILENAME_LENGTH\n-  #292 = Utf8               offsetComparator\n-  #293 = Utf8               Ljava/util/Comparator;\n-  #294 = Utf8               Ljava/util/Comparator<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-  #295 = Utf8               <init>\n-  #296 = Utf8               (Ljava/io/File;)V\n-  #297 = Utf8               Code\n-  #298 = Utf8               LineNumberTable\n-  #299 = Utf8               LocalVariableTable\n-  #300 = Utf8               this\n-  #301 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile;\n-  #302 = Utf8               f\n-  #303 = Utf8               Ljava/io/File;\n-  #304 = Utf8               Exceptions\n-  #305 = Utf8               (Ljava/lang/String;)V\n-  #306 = Utf8               name\n-  #307 = Utf8               (Ljava/lang/String;Ljava/lang/String;)V\n-  #308 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n-  #309 = Utf8               (Ljava/io/File;Ljava/lang/String;Z)V\n-  #310 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n-  #311 = Utf8               channel\n-  #312 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;)V\n-  #313 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n-  #314 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZ)V\n-  #315 = Utf8               entriesWithoutUTF8Flag\n-  #316 = Utf8               closeOnError\n-  #317 = Utf8               success\n-  #318 = Utf8               LocalVariableTypeTable\n-  #319 = Utf8               Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n-  #320 = Utf8               StackMapTable\n-  #321 = Class              #663          // java/nio/channels/SeekableByteChannel\n-  #322 = Class              #664          // java/lang/String\n-  #323 = Utf8               getEncoding\n-  #324 = Utf8               ()Ljava/lang/String;\n-  #325 = Utf8               close\n-  #326 = Utf8               ()V\n-  #327 = Utf8               closeQuietly\n-  #328 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n-  #329 = Utf8               zipfile\n-  #330 = Utf8               getEntries\n-  #331 = Utf8               ()Ljava/util/Enumeration;\n-  #332 = Utf8               ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-  #333 = Utf8               getEntriesInPhysicalOrder\n-  #334 = Utf8               allEntries\n-  #335 = Utf8               [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #336 = Utf8               getEntry\n-  #337 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #338 = Utf8               entriesOfThatName\n-  #339 = Utf8               Ljava/util/LinkedList;\n-  #340 = Utf8               Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-  #341 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable;\n-  #342 = Class              #665          // java/lang/Iterable\n-  #343 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-  #344 = Utf8               canReadEntryData\n-  #345 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #346 = Utf8               ze\n-  #347 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #348 = Utf8               getRawInputStream\n-  #349 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-  #350 = Utf8               start\n-  #351 = Utf8               copyRawEntries\n-  #352 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;)V\n-  #353 = Utf8               entry\n-  #354 = Utf8               target\n-  #355 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;\n-  #356 = Utf8               predicate\n-  #357 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;\n-  #358 = Utf8               src\n-  #359 = Utf8               Ljava/util/Enumeration;\n-  #360 = Utf8               Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-  #361 = Class              #666          // java/util/Enumeration\n-  #362 = Utf8               getInputStream\n-  #363 = Utf8               inflater\n-  #364 = Utf8               Ljava/util/zip/Inflater;\n-  #365 = Utf8               is\n-  #366 = Utf8               Ljava/io/InputStream;\n-  #367 = Class              #667          // java/io/InputStream\n-  #368 = Utf8               getUnixSymlink\n-  #369 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n-  #370 = Utf8               in\n-  #371 = Utf8               finalize\n-  #372 = Utf8               populateFromCentralDirectory\n-  #373 = Utf8               ()Ljava/util/Map;\n-  #374 = Utf8               noUTF8Flag\n-  #375 = Utf8               Ljava/util/HashMap;\n-  #376 = Utf8               sig\n-  #377 = Utf8               Ljava/util/HashMap<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n-  #378 = Utf8               ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n-  #379 = Utf8               readCentralDirectoryEntry\n-  #380 = Utf8               (Ljava/util/Map;)V\n-  #381 = Utf8               off\n-  #382 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$Entry;\n-  #383 = Utf8               versionMadeBy\n-  #384 = Utf8               gpFlag\n-  #385 = Utf8               Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #386 = Utf8               hasUTF8Flag\n-  #387 = Utf8               entryEncoding\n-  #388 = Utf8               time\n-  #389 = Utf8               fileNameLen\n-  #390 = Utf8               extraLen\n-  #391 = Utf8               commentLen\n-  #392 = Utf8               diskStart\n-  #393 = Utf8               fileName\n-  #394 = Utf8               cdExtraData\n-  #395 = Utf8               comment\n-  #396 = Class              #668          // java/util/Map\n-  #397 = Class              #669          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #398 = Class              #670          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #399 = Class              #250          // \"[B\"\n-  #400 = Utf8               (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n-  #401 = Utf8               setSizesAndOffsetFromZip64Extra\n-  #402 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;I)V\n-  #403 = Utf8               hasUncompressedSize\n-  #404 = Utf8               hasCompressedSize\n-  #405 = Utf8               hasRelativeHeaderOffset\n-  #406 = Utf8               z64\n-  #407 = Utf8               Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-  #408 = Utf8               positionAtCentralDirectory\n-  #409 = Utf8               found\n-  #410 = Utf8               searchedForZip64EOCD\n-  #411 = Utf8               positionAtCentralDirectory64\n-  #412 = Utf8               positionAtCentralDirectory32\n-  #413 = Utf8               positionAtEndOfCentralDirectoryRecord\n-  #414 = Utf8               tryToLocateSignature\n-  #415 = Utf8               (JJ[B)Z\n-  #416 = Utf8               ex\n-  #417 = Utf8               Ljava/io/EOFException;\n-  #418 = Utf8               curr\n-  #419 = Utf8               minDistanceFromEnd\n-  #420 = Utf8               maxDistanceFromEnd\n-  #421 = Utf8               stopSearching\n-  #422 = Utf8               skipBytes\n-  #423 = Utf8               (I)V\n-  #424 = Utf8               count\n-  #425 = Utf8               currentPosition\n-  #426 = Utf8               newPosition\n-  #427 = Utf8               resolveLocalFileHeaderData\n-  #428 = Utf8               nc\n-  #429 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;\n-  #430 = Utf8               offset\n-  #431 = Utf8               extraFieldLen\n-  #432 = Utf8               localExtraData\n-  #433 = Utf8               zipArchiveEntry\n-  #434 = Class              #671          // java/util/Iterator\n-  #435 = Utf8               startsWithLocalFileHeader\n-  #436 = Utf8               ()Z\n-  #437 = Utf8               createBoundedInputStream\n-  #438 = Utf8               (JJ)Lorg/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream;\n-  #439 = Utf8               remaining\n-  #440 = Utf8               access$300\n-  #441 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n-  #442 = Utf8               x0\n-  #443 = Utf8               <clinit>\n-  #444 = Utf8               SourceFile\n-  #445 = Utf8               ZipFile.java\n-  #446 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n-  #447 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-  #448 = NameAndType        #263:#264     // archive:Ljava/nio/channels/SeekableByteChannel;\n-  #449 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #450 = Utf8               UTF8\n-  #451 = NameAndType        #295:#308     // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-  #452 = Utf8               java/io/File\n-  #453 = NameAndType        #295:#305     // \"<init>\":(Ljava/lang/String;)V\n-  #454 = NameAndType        #295:#309     // \"<init>\":(Ljava/io/File;Ljava/lang/String;Z)V\n-  #455 = NameAndType        #672:#673     // toPath:()Ljava/nio/file/Path;\n-  #456 = Class              #674          // java/nio/file/StandardOpenOption\n-  #457 = NameAndType        #675:#676     // READ:Ljava/nio/file/StandardOpenOption;\n-  #458 = Class              #677          // java/util/EnumSet\n-  #459 = NameAndType        #678:#679     // of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n-  #460 = Utf8               java/nio/file/attribute/FileAttribute\n-  #461 = Class              #680          // java/nio/file/Files\n-  #462 = NameAndType        #681:#682     // newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-  #463 = NameAndType        #683:#324     // getAbsolutePath:()Ljava/lang/String;\n-  #464 = NameAndType        #295:#314     // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZ)V\n-  #465 = Utf8               unknown archive\n-  #466 = NameAndType        #295:#313     // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n-  #467 = NameAndType        #295:#326     // \"<init>\":()V\n-  #468 = Utf8               java/util/LinkedList\n-  #469 = NameAndType        #251:#252     // entries:Ljava/util/List;\n-  #470 = Utf8               java/util/HashMap\n-  #471 = NameAndType        #295:#423     // \"<init>\":(I)V\n-  #472 = NameAndType        #255:#256     // nameMap:Ljava/util/Map;\n-  #473 = NameAndType        #267:#266     // closed:Z\n-  #474 = NameAndType        #268:#250     // dwordBuf:[B\n-  #475 = NameAndType        #269:#250     // wordBuf:[B\n-  #476 = NameAndType        #270:#250     // cfhBuf:[B\n-  #477 = NameAndType        #271:#250     // shortBuf:[B\n-  #478 = Class              #684          // java/nio/ByteBuffer\n-  #479 = NameAndType        #685:#686     // wrap:([B)Ljava/nio/ByteBuffer;\n-  #480 = NameAndType        #272:#273     // dwordBbuf:Ljava/nio/ByteBuffer;\n-  #481 = NameAndType        #274:#273     // wordBbuf:Ljava/nio/ByteBuffer;\n-  #482 = NameAndType        #275:#273     // cfhBbuf:Ljava/nio/ByteBuffer;\n-  #483 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$2\n-  #484 = NameAndType        #295:#328     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n-  #485 = NameAndType        #292:#293     // offsetComparator:Ljava/util/Comparator;\n-  #486 = NameAndType        #262:#259     // archiveName:Ljava/lang/String;\n-  #487 = NameAndType        #258:#259     // encoding:Ljava/lang/String;\n-  #488 = NameAndType        #687:#688     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #489 = NameAndType        #260:#261     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #490 = NameAndType        #265:#266     // useUnicodeExtraFields:Z\n-  #491 = NameAndType        #372:#373     // populateFromCentralDirectory:()Ljava/util/Map;\n-  #492 = NameAndType        #427:#380     // resolveLocalFileHeaderData:(Ljava/util/Map;)V\n-  #493 = Class              #689          // org/apache/commons/compress/utils/IOUtils\n-  #494 = NameAndType        #327:#690     // closeQuietly:(Ljava/io/Closeable;)V\n-  #495 = NameAndType        #325:#326     // close:()V\n-  #496 = Class              #691          // java/util/Collections\n-  #497 = NameAndType        #692:#693     // enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n-  #498 = NameAndType        #694:#695     // size:()I\n-  #499 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #500 = NameAndType        #696:#697     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #501 = Class              #698          // java/util/Arrays\n-  #502 = NameAndType        #699:#700     // sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n-  #503 = NameAndType        #701:#702     // asList:([Ljava/lang/Object;)Ljava/util/List;\n-  #504 = NameAndType        #703:#704     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #505 = NameAndType        #705:#706     // getFirst:()Ljava/lang/Object;\n-  #506 = Utf8               java/util/List\n-  #507 = NameAndType        #707:#708     // emptyList:()Ljava/util/List;\n-  #508 = NameAndType        #709:#710     // containsKey:(Ljava/lang/Object;)Z\n-  #509 = Class              #711          // org/apache/commons/compress/archivers/zip/ZipUtil\n-  #510 = NameAndType        #712:#345     // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #511 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$Entry\n-  #512 = NameAndType        #713:#714     // getDataOffset:()J\n-  #513 = NameAndType        #715:#714     // getCompressedSize:()J\n-  #514 = NameAndType        #437:#438     // createBoundedInputStream:(JJ)Lorg/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream;\n-  #515 = NameAndType        #333:#331     // getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n-  #516 = NameAndType        #716:#436     // hasMoreElements:()Z\n-  #517 = NameAndType        #717:#706     // nextElement:()Ljava/lang/Object;\n-  #518 = Class              #718          // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n-  #519 = NameAndType        #719:#345     // test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #520 = NameAndType        #348:#349     // getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-  #521 = Class              #720          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-  #522 = NameAndType        #721:#722     // addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-  #523 = NameAndType        #723:#724     // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #524 = Utf8               java/io/BufferedInputStream\n-  #525 = NameAndType        #295:#725     // \"<init>\":(Ljava/io/InputStream;)V\n-  #526 = NameAndType        #726:#727     // $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n-  #527 = NameAndType        #728:#695     // getMethod:()I\n-  #528 = Class              #729          // org/apache/commons/compress/archivers/zip/ZipMethod\n-  #529 = NameAndType        #730:#731     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #530 = NameAndType        #732:#695     // ordinal:()I\n-  #531 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-  #532 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-  #533 = NameAndType        #733:#734     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #534 = NameAndType        #735:#695     // getSlidingDictionarySize:()I\n-  #535 = NameAndType        #736:#695     // getNumberOfShannonFanoTrees:()I\n-  #536 = NameAndType        #295:#737     // \"<init>\":(IILjava/io/InputStream;)V\n-  #537 = Utf8               java/util/zip/Inflater\n-  #538 = NameAndType        #295:#738     // \"<init>\":(Z)V\n-  #539 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$1\n-  #540 = Utf8               java/io/SequenceInputStream\n-  #541 = Utf8               java/io/ByteArrayInputStream\n-  #542 = NameAndType        #249:#250     // ONE_ZERO_BYTE:[B\n-  #543 = NameAndType        #295:#739     // \"<init>\":([B)V\n-  #544 = NameAndType        #295:#740     // \"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n-  #545 = NameAndType        #295:#741     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n-  #546 = Utf8               org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-  #547 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-  #548 = Utf8               java/util/zip/ZipException\n-  #549 = Utf8               BootstrapMethods\n-  #550 = MethodHandle       6:#742        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #551 = String             #743          // Found unsupported compression method \\u0001\n-  #552 = NameAndType        #744:#745     // makeConcatWithConstants:(I)Ljava/lang/String;\n-  #553 = NameAndType        #746:#436     // isUnixSymlink:()Z\n-  #554 = NameAndType        #362:#349     // getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-  #555 = NameAndType        #747:#748     // toByteArray:(Ljava/io/InputStream;)[B\n-  #556 = NameAndType        #749:#750     // decode:([B)Ljava/lang/String;\n-  #557 = Utf8               java/lang/Throwable\n-  #558 = NameAndType        #751:#752     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #559 = Class              #753          // java/lang/System\n-  #560 = NameAndType        #754:#755     // err:Ljava/io/PrintStream;\n-  #561 = String             #756          // Cleaning up unclosed ZipFile for archive \\u0001\n-  #562 = NameAndType        #744:#757     // makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n-  #563 = Class              #758          // java/io/PrintStream\n-  #564 = NameAndType        #759:#305     // println:(Ljava/lang/String;)V\n-  #565 = NameAndType        #371:#326     // finalize:()V\n-  #566 = NameAndType        #408:#326     // positionAtCentralDirectory:()V\n-  #567 = NameAndType        #760:#761     // rewind:()Ljava/nio/ByteBuffer;\n-  #568 = NameAndType        #762:#763     // readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-  #569 = Class              #764          // org/apache/commons/compress/archivers/zip/ZipLong\n-  #570 = NameAndType        #765:#766     // getValue:([B)J\n-  #571 = NameAndType        #278:#279     // CFH_SIG:J\n-  #572 = NameAndType        #435:#436     // startsWithLocalFileHeader:()Z\n-  #573 = Utf8               java/io/IOException\n-  #574 = Utf8               central directory is empty, can\\'t expand corrupt archive.\n-  #575 = NameAndType        #379:#380     // readCentralDirectoryEntry:(Ljava/util/Map;)V\n-  #576 = Class              #767          // org/apache/commons/compress/archivers/zip/ZipShort\n-  #577 = NameAndType        #765:#768     // getValue:([BI)I\n-  #578 = NameAndType        #769:#423     // setVersionMadeBy:(I)V\n-  #579 = NameAndType        #770:#423     // setPlatform:(I)V\n-  #580 = NameAndType        #771:#423     // setVersionRequired:(I)V\n-  #581 = NameAndType        #772:#773     // parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #582 = NameAndType        #774:#436     // usesUTF8ForNames:()Z\n-  #583 = NameAndType        #775:#261     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #584 = Class              #776          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #585 = NameAndType        #778:#779     // NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #586 = NameAndType        #780:#781     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #587 = NameAndType        #782:#783     // setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-  #588 = NameAndType        #784:#423     // setRawFlag:(I)V\n-  #589 = NameAndType        #785:#423     // setMethod:(I)V\n-  #590 = NameAndType        #765:#786     // getValue:([BI)J\n-  #591 = NameAndType        #787:#788     // dosToJavaTime:(J)J\n-  #592 = NameAndType        #789:#790     // setTime:(J)V\n-  #593 = NameAndType        #791:#790     // setCrc:(J)V\n-  #594 = NameAndType        #792:#790     // setCompressedSize:(J)V\n-  #595 = NameAndType        #793:#790     // setSize:(J)V\n-  #596 = NameAndType        #794:#423     // setInternalAttributes:(I)V\n-  #597 = NameAndType        #795:#790     // setExternalAttributes:(J)V\n-  #598 = NameAndType        #796:#797     // setName:(Ljava/lang/String;[B)V\n-  #599 = NameAndType        #798:#790     // setLocalHeaderOffset:(J)V\n-  #600 = NameAndType        #799:#710     // add:(Ljava/lang/Object;)Z\n-  #601 = NameAndType        #800:#739     // setCentralDirectoryExtra:([B)V\n-  #602 = NameAndType        #401:#402     // setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;I)V\n-  #603 = NameAndType        #801:#305     // setComment:(Ljava/lang/String;)V\n-  #604 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n-  #605 = NameAndType        #295:#802     // \"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-  #606 = NameAndType        #803:#804     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #607 = NameAndType        #805:#806     // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #608 = NameAndType        #807:#808     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #609 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #610 = NameAndType        #809:#714     // getSize:()J\n-  #611 = NameAndType        #810:#714     // getLocalHeaderOffset:()J\n-  #612 = NameAndType        #811:#812     // reparseCentralDirectoryData:(ZZZZ)V\n-  #613 = NameAndType        #809:#813     // getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #614 = NameAndType        #814:#714     // getLongValue:()J\n-  #615 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #616 = NameAndType        #295:#790     // \"<init>\":(J)V\n-  #617 = NameAndType        #793:#815     // setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #618 = NameAndType        #715:#813     // getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #619 = NameAndType        #792:#815     // setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #620 = NameAndType        #816:#813     // getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #621 = NameAndType        #413:#326     // positionAtEndOfCentralDirectoryRecord:()V\n-  #622 = NameAndType        #817:#714     // position:()J\n-  #623 = NameAndType        #817:#818     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #624 = NameAndType        #819:#250     // ZIP64_EOCD_LOC_SIG:[B\n-  #625 = NameAndType        #820:#821     // equals:([B[B)Z\n-  #626 = NameAndType        #422:#423     // skipBytes:(I)V\n-  #627 = NameAndType        #412:#326     // positionAtCentralDirectory32:()V\n-  #628 = NameAndType        #411:#326     // positionAtCentralDirectory64:()V\n-  #629 = NameAndType        #814:#766     // getLongValue:([B)J\n-  #630 = NameAndType        #822:#250     // ZIP64_EOCD_SIG:[B\n-  #631 = Utf8               archive\\'s ZIP64 end of central directory locator is corrupt.\n-  #632 = NameAndType        #823:#250     // EOCD_SIG:[B\n-  #633 = NameAndType        #414:#415     // tryToLocateSignature:(JJ[B)Z\n-  #634 = Utf8               archive is not a ZIP archive\n-  #635 = NameAndType        #694:#714     // size:()J\n-  #636 = Class              #824          // java/lang/Math\n-  #637 = NameAndType        #825:#826     // max:(JJ)J\n-  #638 = NameAndType        #827:#761     // flip:()Ljava/nio/ByteBuffer;\n-  #639 = Utf8               java/io/EOFException\n-  #640 = NameAndType        #703:#828     // get:()B\n-  #641 = NameAndType        #829:#830     // iterator:()Ljava/util/Iterator;\n-  #642 = NameAndType        #831:#436     // hasNext:()Z\n-  #643 = NameAndType        #832:#706     // next:()Ljava/lang/Object;\n-  #644 = NameAndType        #703:#686     // get:([B)Ljava/nio/ByteBuffer;\n-  #645 = NameAndType        #765:#833     // getValue:([B)I\n-  #646 = NameAndType        #834:#739     // setExtra:([B)V\n-  #647 = NameAndType        #835:#790     // setDataOffset:(J)V\n-  #648 = NameAndType        #836:#738     // setStreamContiguous:(Z)V\n-  #649 = NameAndType        #837:#838     // access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #650 = NameAndType        #839:#838     // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #651 = NameAndType        #840:#841     // setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #652 = NameAndType        #842:#324     // getName:()Ljava/lang/String;\n-  #653 = NameAndType        #843:#844     // addLast:(Ljava/lang/Object;)V\n-  #654 = NameAndType        #845:#250     // LFH_SIG:[B\n-  #655 = Utf8               java/nio/channels/FileChannel\n-  #656 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n-  #657 = NameAndType        #295:#846     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-  #658 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n-  #659 = NameAndType        #278:#250     // CFH_SIG:[B\n-  #660 = Utf8               java/lang/Object\n-  #661 = Utf8               java/io/Closeable\n-  #662 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$3\n-  #663 = Utf8               java/nio/channels/SeekableByteChannel\n-  #664 = Utf8               java/lang/String\n-  #665 = Utf8               java/lang/Iterable\n-  #666 = Utf8               java/util/Enumeration\n-  #667 = Utf8               java/io/InputStream\n-  #668 = Utf8               java/util/Map\n-  #669 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #670 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #671 = Utf8               java/util/Iterator\n-  #672 = Utf8               toPath\n-  #673 = Utf8               ()Ljava/nio/file/Path;\n-  #674 = Utf8               java/nio/file/StandardOpenOption\n-  #675 = Utf8               READ\n-  #676 = Utf8               Ljava/nio/file/StandardOpenOption;\n-  #677 = Utf8               java/util/EnumSet\n-  #678 = Utf8               of\n-  #679 = Utf8               (Ljava/lang/Enum;)Ljava/util/EnumSet;\n-  #680 = Utf8               java/nio/file/Files\n-  #681 = Utf8               newByteChannel\n-  #682 = Utf8               (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-  #683 = Utf8               getAbsolutePath\n-  #684 = Utf8               java/nio/ByteBuffer\n-  #685 = Utf8               wrap\n-  #686 = Utf8               ([B)Ljava/nio/ByteBuffer;\n-  #687 = Utf8               getZipEncoding\n-  #688 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #689 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #690 = Utf8               (Ljava/io/Closeable;)V\n-  #691 = Utf8               java/util/Collections\n-  #692 = Utf8               enumeration\n-  #693 = Utf8               (Ljava/util/Collection;)Ljava/util/Enumeration;\n-  #694 = Utf8               size\n-  #695 = Utf8               ()I\n-  #696 = Utf8               toArray\n-  #697 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #698 = Utf8               java/util/Arrays\n-  #699 = Utf8               sort\n-  #700 = Utf8               ([Ljava/lang/Object;Ljava/util/Comparator;)V\n-  #701 = Utf8               asList\n-  #702 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n-  #703 = Utf8               get\n-  #704 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #705 = Utf8               getFirst\n-  #706 = Utf8               ()Ljava/lang/Object;\n-  #707 = Utf8               emptyList\n-  #708 = Utf8               ()Ljava/util/List;\n-  #709 = Utf8               containsKey\n-  #710 = Utf8               (Ljava/lang/Object;)Z\n-  #711 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-  #712 = Utf8               canHandleEntryData\n-  #713 = Utf8               getDataOffset\n-  #714 = Utf8               ()J\n-  #715 = Utf8               getCompressedSize\n-  #716 = Utf8               hasMoreElements\n-  #717 = Utf8               nextElement\n-  #718 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n-  #719 = Utf8               test\n-  #720 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-  #721 = Utf8               addRawArchiveEntry\n-  #722 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-  #723 = Utf8               checkRequestedFeatures\n-  #724 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #725 = Utf8               (Ljava/io/InputStream;)V\n-  #726 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod\n-  #727 = Utf8               [I\n-  #728 = Utf8               getMethod\n-  #729 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n-  #730 = Utf8               getMethodByCode\n-  #731 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #732 = Utf8               ordinal\n-  #733 = Utf8               getGeneralPurposeBit\n-  #734 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #735 = Utf8               getSlidingDictionarySize\n-  #736 = Utf8               getNumberOfShannonFanoTrees\n-  #737 = Utf8               (IILjava/io/InputStream;)V\n-  #738 = Utf8               (Z)V\n-  #739 = Utf8               ([B)V\n-  #740 = Utf8               (Ljava/io/InputStream;Ljava/io/InputStream;)V\n-  #741 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n-  #742 = Methodref          #847.#848     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #743 = Utf8               Found unsupported compression method \\u0001\n-  #744 = Utf8               makeConcatWithConstants\n-  #745 = Utf8               (I)Ljava/lang/String;\n-  #746 = Utf8               isUnixSymlink\n-  #747 = Utf8               toByteArray\n-  #748 = Utf8               (Ljava/io/InputStream;)[B\n-  #749 = Utf8               decode\n-  #750 = Utf8               ([B)Ljava/lang/String;\n-  #751 = Utf8               addSuppressed\n-  #752 = Utf8               (Ljava/lang/Throwable;)V\n-  #753 = Utf8               java/lang/System\n-  #754 = Utf8               err\n-  #755 = Utf8               Ljava/io/PrintStream;\n-  #756 = Utf8               Cleaning up unclosed ZipFile for archive \\u0001\n-  #757 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #758 = Utf8               java/io/PrintStream\n-  #759 = Utf8               println\n-  #760 = Utf8               rewind\n-  #761 = Utf8               ()Ljava/nio/ByteBuffer;\n-  #762 = Utf8               readFully\n-  #763 = Utf8               (Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-  #764 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #765 = Utf8               getValue\n-  #766 = Utf8               ([B)J\n-  #767 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-  #768 = Utf8               ([BI)I\n-  #769 = Utf8               setVersionMadeBy\n-  #770 = Utf8               setPlatform\n-  #771 = Utf8               setVersionRequired\n-  #772 = Utf8               parse\n-  #773 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #774 = Utf8               usesUTF8ForNames\n-  #775 = Utf8               UTF8_ZIP_ENCODING\n-  #776 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #777 = Utf8               NameSource\n-  #778 = Utf8               NAME_WITH_EFS_FLAG\n-  #779 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #780 = Utf8               setNameSource\n-  #781 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #782 = Utf8               setGeneralPurposeBit\n-  #783 = Utf8               (Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-  #784 = Utf8               setRawFlag\n-  #785 = Utf8               setMethod\n-  #786 = Utf8               ([BI)J\n-  #787 = Utf8               dosToJavaTime\n-  #788 = Utf8               (J)J\n-  #789 = Utf8               setTime\n-  #790 = Utf8               (J)V\n-  #791 = Utf8               setCrc\n-  #792 = Utf8               setCompressedSize\n-  #793 = Utf8               setSize\n-  #794 = Utf8               setInternalAttributes\n-  #795 = Utf8               setExternalAttributes\n-  #796 = Utf8               setName\n-  #797 = Utf8               (Ljava/lang/String;[B)V\n-  #798 = Utf8               setLocalHeaderOffset\n-  #799 = Utf8               add\n-  #800 = Utf8               setCentralDirectoryExtra\n-  #801 = Utf8               setComment\n-  #802 = Utf8               ([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-  #803 = Utf8               put\n-  #804 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #805 = Utf8               HEADER_ID\n-  #806 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #807 = Utf8               getExtraField\n-  #808 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #809 = Utf8               getSize\n-  #810 = Utf8               getLocalHeaderOffset\n-  #811 = Utf8               reparseCentralDirectoryData\n-  #812 = Utf8               (ZZZZ)V\n-  #813 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #814 = Utf8               getLongValue\n-  #815 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #816 = Utf8               getRelativeHeaderOffset\n-  #817 = Utf8               position\n-  #818 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-  #819 = Utf8               ZIP64_EOCD_LOC_SIG\n-  #820 = Utf8               equals\n-  #821 = Utf8               ([B[B)Z\n-  #822 = Utf8               ZIP64_EOCD_SIG\n-  #823 = Utf8               EOCD_SIG\n-  #824 = Utf8               java/lang/Math\n-  #825 = Utf8               max\n-  #826 = Utf8               (JJ)J\n-  #827 = Utf8               flip\n-  #828 = Utf8               ()B\n-  #829 = Utf8               iterator\n-  #830 = Utf8               ()Ljava/util/Iterator;\n-  #831 = Utf8               hasNext\n-  #832 = Utf8               next\n-  #833 = Utf8               ([B)I\n-  #834 = Utf8               setExtra\n-  #835 = Utf8               setDataOffset\n-  #836 = Utf8               setStreamContiguous\n-  #837 = Utf8               access$100\n-  #838 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #839 = Utf8               access$200\n-  #840 = Utf8               setNameAndCommentFromExtraFields\n-  #841 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #842 = Utf8               getName\n-  #843 = Utf8               addLast\n-  #844 = Utf8               (Ljava/lang/Object;)V\n-  #845 = Utf8               LFH_SIG\n-  #846 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-  #847 = Class              #849          // java/lang/invoke/StringConcatFactory\n-  #848 = NameAndType        #744:#852     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #849 = Utf8               java/lang/invoke/StringConcatFactory\n-  #850 = Class              #854          // java/lang/invoke/MethodHandles$Lookup\n-  #851 = Utf8               Lookup\n-  #852 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #853 = Class              #855          // java/lang/invoke/MethodHandles\n-  #854 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #855 = Utf8               java/lang/invoke/MethodHandles\n+    #1 = Class              #450          // org/apache/commons/compress/archivers/zip/ZipFile\n+    #2 = Class              #451          // org/apache/commons/compress/archivers/zip/ZipConstants\n+    #3 = Fieldref           #1.#452       // org/apache/commons/compress/archivers/zip/ZipFile.archive:Ljava/nio/channels/SeekableByteChannel;\n+    #4 = Class              #453          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+    #5 = String             #454          // UTF8\n+    #6 = Methodref          #1.#455       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+    #7 = Class              #456          // java/io/File\n+    #8 = Methodref          #7.#457       // java/io/File.\"<init>\":(Ljava/lang/String;)V\n+    #9 = Methodref          #1.#458       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;Z)V\n+   #10 = Methodref          #7.#459       // java/io/File.toPath:()Ljava/nio/file/Path;\n+   #11 = Fieldref           #460.#461     // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+   #12 = Methodref          #462.#463     // java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n+   #13 = Class              #464          // java/nio/file/attribute/FileAttribute\n+   #14 = Methodref          #465.#466     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+   #15 = Methodref          #7.#467       // java/io/File.getAbsolutePath:()Ljava/lang/String;\n+   #16 = Methodref          #1.#468       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZ)V\n+   #17 = String             #469          // unknown archive\n+   #18 = Methodref          #1.#470       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n+   #19 = Methodref          #230.#471     // java/lang/Object.\"<init>\":()V\n+   #20 = Class              #472          // java/util/LinkedList\n+   #21 = Methodref          #20.#471      // java/util/LinkedList.\"<init>\":()V\n+   #22 = Fieldref           #1.#473       // org/apache/commons/compress/archivers/zip/ZipFile.entries:Ljava/util/List;\n+   #23 = Class              #474          // java/util/HashMap\n+   #24 = Methodref          #23.#475      // java/util/HashMap.\"<init>\":(I)V\n+   #25 = Fieldref           #1.#476       // org/apache/commons/compress/archivers/zip/ZipFile.nameMap:Ljava/util/Map;\n+   #26 = Fieldref           #1.#477       // org/apache/commons/compress/archivers/zip/ZipFile.closed:Z\n+   #27 = Fieldref           #1.#478       // org/apache/commons/compress/archivers/zip/ZipFile.dwordBuf:[B\n+   #28 = Fieldref           #1.#479       // org/apache/commons/compress/archivers/zip/ZipFile.wordBuf:[B\n+   #29 = Fieldref           #1.#480       // org/apache/commons/compress/archivers/zip/ZipFile.cfhBuf:[B\n+   #30 = Fieldref           #1.#481       // org/apache/commons/compress/archivers/zip/ZipFile.shortBuf:[B\n+   #31 = Methodref          #482.#483     // java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n+   #32 = Fieldref           #1.#484       // org/apache/commons/compress/archivers/zip/ZipFile.dwordBbuf:Ljava/nio/ByteBuffer;\n+   #33 = Fieldref           #1.#485       // org/apache/commons/compress/archivers/zip/ZipFile.wordBbuf:Ljava/nio/ByteBuffer;\n+   #34 = Fieldref           #1.#486       // org/apache/commons/compress/archivers/zip/ZipFile.cfhBbuf:Ljava/nio/ByteBuffer;\n+   #35 = Class              #487          // org/apache/commons/compress/archivers/zip/ZipFile$2\n+   #36 = Methodref          #35.#488      // org/apache/commons/compress/archivers/zip/ZipFile$2.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n+   #37 = Fieldref           #1.#489       // org/apache/commons/compress/archivers/zip/ZipFile.offsetComparator:Ljava/util/Comparator;\n+   #38 = Fieldref           #1.#490       // org/apache/commons/compress/archivers/zip/ZipFile.archiveName:Ljava/lang/String;\n+   #39 = Fieldref           #1.#491       // org/apache/commons/compress/archivers/zip/ZipFile.encoding:Ljava/lang/String;\n+   #40 = Methodref          #4.#492       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #41 = Fieldref           #1.#493       // org/apache/commons/compress/archivers/zip/ZipFile.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #42 = Fieldref           #1.#494       // org/apache/commons/compress/archivers/zip/ZipFile.useUnicodeExtraFields:Z\n+   #43 = Methodref          #1.#495       // org/apache/commons/compress/archivers/zip/ZipFile.populateFromCentralDirectory:()Ljava/util/Map;\n+   #44 = Methodref          #1.#496       // org/apache/commons/compress/archivers/zip/ZipFile.resolveLocalFileHeaderData:(Ljava/util/Map;)V\n+   #45 = Methodref          #497.#498     // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n+   #46 = InterfaceMethodref #326.#499     // java/nio/channels/SeekableByteChannel.close:()V\n+   #47 = Methodref          #500.#501     // java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n+   #48 = InterfaceMethodref #56.#502      // java/util/List.size:()I\n+   #49 = Class              #503          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+   #50 = InterfaceMethodref #56.#504      // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #51 = Class              #340          // \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\"\n+   #52 = Methodref          #505.#506     // java/util/Arrays.sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n+   #53 = Methodref          #505.#507     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+   #54 = InterfaceMethodref #400.#508     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #55 = Methodref          #20.#509      // java/util/LinkedList.getFirst:()Ljava/lang/Object;\n+   #56 = Class              #510          // java/util/List\n+   #57 = Methodref          #500.#511     // java/util/Collections.emptyList:()Ljava/util/List;\n+   #58 = InterfaceMethodref #400.#512     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+   #59 = Methodref          #20.#504      // java/util/LinkedList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #60 = Methodref          #513.#514     // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #61 = Class              #515          // org/apache/commons/compress/archivers/zip/ZipFile$Entry\n+   #62 = Methodref          #49.#516      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n+   #63 = Methodref          #49.#517      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+   #64 = Methodref          #1.#518       // org/apache/commons/compress/archivers/zip/ZipFile.createBoundedInputStream:(JJ)Lorg/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream;\n+   #65 = Methodref          #1.#519       // org/apache/commons/compress/archivers/zip/ZipFile.getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n+   #66 = InterfaceMethodref #365.#520     // java/util/Enumeration.hasMoreElements:()Z\n+   #67 = InterfaceMethodref #365.#521     // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n+   #68 = InterfaceMethodref #522.#523     // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate.test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #69 = Methodref          #1.#524       // org/apache/commons/compress/archivers/zip/ZipFile.getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+   #70 = Methodref          #525.#526     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+   #71 = Methodref          #513.#527     // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #72 = Class              #528          // java/io/BufferedInputStream\n+   #73 = Methodref          #72.#529      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #74 = Fieldref           #232.#530     // org/apache/commons/compress/archivers/zip/ZipFile$3.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+   #75 = Methodref          #49.#531      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+   #76 = Methodref          #532.#533     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #77 = Methodref          #532.#534     // org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n+   #78 = Class              #535          // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+   #79 = Methodref          #78.#529      // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #80 = Class              #536          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+   #81 = Methodref          #49.#537      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #82 = Methodref          #401.#538     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n+   #83 = Methodref          #401.#539     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n+   #84 = Methodref          #80.#540      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n+   #85 = Class              #541          // java/util/zip/Inflater\n+   #86 = Methodref          #85.#542      // java/util/zip/Inflater.\"<init>\":(Z)V\n+   #87 = Class              #543          // org/apache/commons/compress/archivers/zip/ZipFile$1\n+   #88 = Class              #544          // java/io/SequenceInputStream\n+   #89 = Class              #545          // java/io/ByteArrayInputStream\n+   #90 = Fieldref           #1.#546       // org/apache/commons/compress/archivers/zip/ZipFile.ONE_ZERO_BYTE:[B\n+   #91 = Methodref          #89.#547      // java/io/ByteArrayInputStream.\"<init>\":([B)V\n+   #92 = Methodref          #88.#548      // java/io/SequenceInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n+   #93 = Methodref          #87.#549      // org/apache/commons/compress/archivers/zip/ZipFile$1.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n+   #94 = Class              #550          // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+   #95 = Methodref          #94.#529      // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #96 = Class              #551          // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+   #97 = Methodref          #96.#529      // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #98 = Class              #552          // java/util/zip/ZipException\n+   #99 = Class              #553          // java/lang/StringBuilder\n+  #100 = Methodref          #99.#471      // java/lang/StringBuilder.\"<init>\":()V\n+  #101 = String             #554          // Found unsupported compression method\n+  #102 = Methodref          #99.#555      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #103 = Methodref          #99.#556      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #104 = Methodref          #99.#557      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #105 = Methodref          #98.#457      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+  #106 = Methodref          #49.#558      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z\n+  #107 = Methodref          #1.#559       // org/apache/commons/compress/archivers/zip/ZipFile.getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+  #108 = Methodref          #497.#560     // org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n+  #109 = InterfaceMethodref #402.#561     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+  #110 = Methodref          #371.#499     // java/io/InputStream.close:()V\n+  #111 = Class              #562          // java/lang/Throwable\n+  #112 = Methodref          #111.#563     // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+  #113 = Fieldref           #564.#565     // java/lang/System.err:Ljava/io/PrintStream;\n+  #114 = String             #566          // Cleaning up unclosed ZipFile for archive\n+  #115 = Methodref          #567.#568     // java/io/PrintStream.println:(Ljava/lang/String;)V\n+  #116 = Methodref          #1.#499       // org/apache/commons/compress/archivers/zip/ZipFile.close:()V\n+  #117 = Methodref          #230.#569     // java/lang/Object.finalize:()V\n+  #118 = Methodref          #23.#471      // java/util/HashMap.\"<init>\":()V\n+  #119 = Methodref          #1.#570       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory:()V\n+  #120 = Methodref          #482.#571     // java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+  #121 = Methodref          #497.#572     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+  #122 = Methodref          #573.#574     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+  #123 = Fieldref           #1.#575       // org/apache/commons/compress/archivers/zip/ZipFile.CFH_SIG:J\n+  #124 = Methodref          #1.#576       // org/apache/commons/compress/archivers/zip/ZipFile.startsWithLocalFileHeader:()Z\n+  #125 = Class              #577          // java/io/IOException\n+  #126 = String             #578          // central directory is empty, can\\'t expand corrupt archive.\n+  #127 = Methodref          #125.#457     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #128 = Methodref          #1.#579       // org/apache/commons/compress/archivers/zip/ZipFile.readCentralDirectoryEntry:(Ljava/util/Map;)V\n+  #129 = Methodref          #61.#471      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.\"<init>\":()V\n+  #130 = Methodref          #580.#581     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+  #131 = Methodref          #61.#582      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V\n+  #132 = Methodref          #61.#583      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V\n+  #133 = Methodref          #61.#584      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V\n+  #134 = Methodref          #401.#585     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #135 = Methodref          #401.#586     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n+  #136 = Fieldref           #4.#587       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #137 = Fieldref           #588.#589     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #138 = Methodref          #61.#590      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #139 = Methodref          #61.#591      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+  #140 = Methodref          #61.#592      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V\n+  #141 = Methodref          #61.#593      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V\n+  #142 = Methodref          #573.#594     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+  #143 = Methodref          #513.#595     // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n+  #144 = Methodref          #61.#596      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V\n+  #145 = Methodref          #61.#597      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V\n+  #146 = Methodref          #61.#598      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V\n+  #147 = Methodref          #61.#599      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V\n+  #148 = Methodref          #61.#600      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V\n+  #149 = Methodref          #61.#601      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V\n+  #150 = Methodref          #61.#602      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V\n+  #151 = Methodref          #61.#603      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V\n+  #152 = InterfaceMethodref #56.#604      // java/util/List.add:(Ljava/lang/Object;)Z\n+  #153 = Methodref          #61.#605      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V\n+  #154 = Methodref          #1.#606       // org/apache/commons/compress/archivers/zip/ZipFile.setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;I)V\n+  #155 = Methodref          #61.#607      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V\n+  #156 = Class              #608          // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n+  #157 = Methodref          #156.#609     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.\"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+  #158 = InterfaceMethodref #400.#610     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #159 = Fieldref           #161.#611     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #160 = Methodref          #49.#612      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #161 = Class              #613          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+  #162 = Methodref          #49.#614      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+  #163 = Long               4294967295l\n+  #165 = Methodref          #49.#615      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+  #166 = Integer            65535\n+  #167 = Methodref          #161.#616     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V\n+  #168 = Methodref          #161.#617     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #169 = Methodref          #171.#618     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+  #170 = Methodref          #49.#599      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+  #171 = Class              #619          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #172 = Methodref          #171.#620     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+  #173 = Methodref          #161.#621     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #174 = Methodref          #161.#622     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #175 = Methodref          #49.#598      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+  #176 = Methodref          #161.#623     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #177 = Methodref          #161.#624     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #178 = Methodref          #49.#603      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n+  #179 = Methodref          #1.#625       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtEndOfCentralDirectoryRecord:()V\n+  #180 = InterfaceMethodref #326.#626     // java/nio/channels/SeekableByteChannel.position:()J\n+  #181 = Long               20l\n+  #183 = InterfaceMethodref #326.#627     // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #184 = Fieldref           #525.#628     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n+  #185 = Methodref          #505.#629     // java/util/Arrays.equals:([B[B)Z\n+  #186 = Methodref          #1.#630       // org/apache/commons/compress/archivers/zip/ZipFile.skipBytes:(I)V\n+  #187 = Methodref          #1.#631       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory32:()V\n+  #188 = Methodref          #1.#632       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory64:()V\n+  #189 = Methodref          #171.#633     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+  #190 = Fieldref           #525.#634     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n+  #191 = String             #635          // archive\\'s ZIP64 end of central directory locator is corrupt.\n+  #192 = Long               22l\n+  #194 = Long               65557l\n+  #196 = Fieldref           #525.#636     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+  #197 = Methodref          #1.#637       // org/apache/commons/compress/archivers/zip/ZipFile.tryToLocateSignature:(JJ[B)Z\n+  #198 = String             #638          // archive is not a ZIP archive\n+  #199 = InterfaceMethodref #326.#639     // java/nio/channels/SeekableByteChannel.size:()J\n+  #200 = Methodref          #640.#641     // java/lang/Math.max:(JJ)J\n+  #201 = Methodref          #482.#642     // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+  #202 = Class              #643          // java/io/EOFException\n+  #203 = Methodref          #482.#644     // java/nio/ByteBuffer.get:()B\n+  #204 = Methodref          #202.#471     // java/io/EOFException.\"<init>\":()V\n+  #205 = InterfaceMethodref #56.#645      // java/util/List.iterator:()Ljava/util/Iterator;\n+  #206 = InterfaceMethodref #438.#646     // java/util/Iterator.hasNext:()Z\n+  #207 = InterfaceMethodref #438.#647     // java/util/Iterator.next:()Ljava/lang/Object;\n+  #208 = Methodref          #61.#615      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.getLocalHeaderOffset:()J\n+  #209 = Long               26l\n+  #211 = Methodref          #482.#648     // java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n+  #212 = Methodref          #580.#649     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+  #213 = Methodref          #61.#650      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V\n+  #214 = Long               2l\n+  #216 = Methodref          #61.#651      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDataOffset:(J)V\n+  #217 = Methodref          #61.#652      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V\n+  #218 = Methodref          #156.#653     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #219 = Methodref          #156.#654     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #220 = Methodref          #513.#655     // org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #221 = Methodref          #61.#656      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.getName:()Ljava/lang/String;\n+  #222 = Methodref          #20.#657      // java/util/LinkedList.addLast:(Ljava/lang/Object;)V\n+  #223 = Fieldref           #525.#658     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+  #224 = Class              #659          // java/nio/channels/FileChannel\n+  #225 = Class              #660          // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n+  #226 = Methodref          #225.#661     // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+  #227 = Class              #662          // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n+  #228 = Methodref          #227.#661     // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+  #229 = Fieldref           #525.#663     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n+  #230 = Class              #664          // java/lang/Object\n+  #231 = Class              #665          // java/io/Closeable\n+  #232 = Class              #666          // org/apache/commons/compress/archivers/zip/ZipFile$3\n+  #233 = Utf8               InnerClasses\n+  #234 = Utf8               Entry\n+  #235 = Utf8               NameAndComment\n+  #236 = Utf8               BoundedFileChannelInputStream\n+  #237 = Utf8               BoundedInputStream\n+  #238 = Utf8               HASH_SIZE\n+  #239 = Utf8               I\n+  #240 = Utf8               ConstantValue\n+  #241 = Integer            509\n+  #242 = Utf8               NIBLET_MASK\n+  #243 = Integer            15\n+  #244 = Utf8               BYTE_SHIFT\n+  #245 = Integer            8\n+  #246 = Utf8               POS_0\n+  #247 = Integer            0\n+  #248 = Utf8               POS_1\n+  #249 = Integer            1\n+  #250 = Utf8               POS_2\n+  #251 = Integer            2\n+  #252 = Utf8               POS_3\n+  #253 = Integer            3\n+  #254 = Utf8               ONE_ZERO_BYTE\n+  #255 = Utf8               [B\n+  #256 = Utf8               entries\n+  #257 = Utf8               Ljava/util/List;\n+  #258 = Utf8               Signature\n+  #259 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+  #260 = Utf8               nameMap\n+  #261 = Utf8               Ljava/util/Map;\n+  #262 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;>;\n+  #263 = Utf8               encoding\n+  #264 = Utf8               Ljava/lang/String;\n+  #265 = Utf8               zipEncoding\n+  #266 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #267 = Utf8               archiveName\n+  #268 = Utf8               archive\n+  #269 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n+  #270 = Utf8               useUnicodeExtraFields\n+  #271 = Utf8               Z\n+  #272 = Utf8               closed\n+  #273 = Utf8               dwordBuf\n+  #274 = Utf8               wordBuf\n+  #275 = Utf8               cfhBuf\n+  #276 = Utf8               shortBuf\n+  #277 = Utf8               dwordBbuf\n+  #278 = Utf8               Ljava/nio/ByteBuffer;\n+  #279 = Utf8               wordBbuf\n+  #280 = Utf8               cfhBbuf\n+  #281 = Utf8               CFH_LEN\n+  #282 = Integer            42\n+  #283 = Utf8               CFH_SIG\n+  #284 = Utf8               J\n+  #285 = Utf8               MIN_EOCD_SIZE\n+  #286 = Integer            22\n+  #287 = Utf8               MAX_EOCD_SIZE\n+  #288 = Integer            65557\n+  #289 = Utf8               CFD_LOCATOR_OFFSET\n+  #290 = Integer            16\n+  #291 = Utf8               ZIP64_EOCDL_LENGTH\n+  #292 = Integer            20\n+  #293 = Utf8               ZIP64_EOCDL_LOCATOR_OFFSET\n+  #294 = Utf8               ZIP64_EOCD_CFD_LOCATOR_OFFSET\n+  #295 = Integer            48\n+  #296 = Utf8               LFH_OFFSET_FOR_FILENAME_LENGTH\n+  #297 = Utf8               offsetComparator\n+  #298 = Utf8               Ljava/util/Comparator;\n+  #299 = Utf8               Ljava/util/Comparator<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+  #300 = Utf8               <init>\n+  #301 = Utf8               (Ljava/io/File;)V\n+  #302 = Utf8               Code\n+  #303 = Utf8               LineNumberTable\n+  #304 = Utf8               LocalVariableTable\n+  #305 = Utf8               this\n+  #306 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile;\n+  #307 = Utf8               f\n+  #308 = Utf8               Ljava/io/File;\n+  #309 = Utf8               Exceptions\n+  #310 = Utf8               (Ljava/lang/String;)V\n+  #311 = Utf8               name\n+  #312 = Utf8               (Ljava/lang/String;Ljava/lang/String;)V\n+  #313 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n+  #314 = Utf8               (Ljava/io/File;Ljava/lang/String;Z)V\n+  #315 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n+  #316 = Utf8               channel\n+  #317 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;)V\n+  #318 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n+  #319 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZ)V\n+  #320 = Utf8               entriesWithoutUTF8Flag\n+  #321 = Utf8               closeOnError\n+  #322 = Utf8               success\n+  #323 = Utf8               LocalVariableTypeTable\n+  #324 = Utf8               Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n+  #325 = Utf8               StackMapTable\n+  #326 = Class              #667          // java/nio/channels/SeekableByteChannel\n+  #327 = Class              #668          // java/lang/String\n+  #328 = Utf8               getEncoding\n+  #329 = Utf8               ()Ljava/lang/String;\n+  #330 = Utf8               close\n+  #331 = Utf8               ()V\n+  #332 = Utf8               closeQuietly\n+  #333 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n+  #334 = Utf8               zipfile\n+  #335 = Utf8               getEntries\n+  #336 = Utf8               ()Ljava/util/Enumeration;\n+  #337 = Utf8               ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+  #338 = Utf8               getEntriesInPhysicalOrder\n+  #339 = Utf8               allEntries\n+  #340 = Utf8               [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #341 = Utf8               getEntry\n+  #342 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #343 = Utf8               entriesOfThatName\n+  #344 = Utf8               Ljava/util/LinkedList;\n+  #345 = Utf8               Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+  #346 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable;\n+  #347 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+  #348 = Utf8               canReadEntryData\n+  #349 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #350 = Utf8               ze\n+  #351 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #352 = Utf8               getRawInputStream\n+  #353 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+  #354 = Utf8               start\n+  #355 = Utf8               copyRawEntries\n+  #356 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;)V\n+  #357 = Utf8               entry\n+  #358 = Utf8               target\n+  #359 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;\n+  #360 = Utf8               predicate\n+  #361 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;\n+  #362 = Utf8               src\n+  #363 = Utf8               Ljava/util/Enumeration;\n+  #364 = Utf8               Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+  #365 = Class              #669          // java/util/Enumeration\n+  #366 = Utf8               getInputStream\n+  #367 = Utf8               inflater\n+  #368 = Utf8               Ljava/util/zip/Inflater;\n+  #369 = Utf8               is\n+  #370 = Utf8               Ljava/io/InputStream;\n+  #371 = Class              #670          // java/io/InputStream\n+  #372 = Utf8               getUnixSymlink\n+  #373 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n+  #374 = Utf8               in\n+  #375 = Utf8               finalize\n+  #376 = Utf8               populateFromCentralDirectory\n+  #377 = Utf8               ()Ljava/util/Map;\n+  #378 = Utf8               noUTF8Flag\n+  #379 = Utf8               Ljava/util/HashMap;\n+  #380 = Utf8               sig\n+  #381 = Utf8               Ljava/util/HashMap<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n+  #382 = Utf8               ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n+  #383 = Utf8               readCentralDirectoryEntry\n+  #384 = Utf8               (Ljava/util/Map;)V\n+  #385 = Utf8               off\n+  #386 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$Entry;\n+  #387 = Utf8               versionMadeBy\n+  #388 = Utf8               gpFlag\n+  #389 = Utf8               Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #390 = Utf8               hasUTF8Flag\n+  #391 = Utf8               entryEncoding\n+  #392 = Utf8               time\n+  #393 = Utf8               fileNameLen\n+  #394 = Utf8               extraLen\n+  #395 = Utf8               commentLen\n+  #396 = Utf8               diskStart\n+  #397 = Utf8               fileName\n+  #398 = Utf8               cdExtraData\n+  #399 = Utf8               comment\n+  #400 = Class              #671          // java/util/Map\n+  #401 = Class              #672          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #402 = Class              #673          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #403 = Class              #255          // \"[B\"\n+  #404 = Utf8               (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n+  #405 = Utf8               setSizesAndOffsetFromZip64Extra\n+  #406 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;I)V\n+  #407 = Utf8               hasUncompressedSize\n+  #408 = Utf8               hasCompressedSize\n+  #409 = Utf8               hasRelativeHeaderOffset\n+  #410 = Utf8               z64\n+  #411 = Utf8               Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+  #412 = Utf8               positionAtCentralDirectory\n+  #413 = Utf8               found\n+  #414 = Utf8               searchedForZip64EOCD\n+  #415 = Utf8               positionAtCentralDirectory64\n+  #416 = Utf8               positionAtCentralDirectory32\n+  #417 = Utf8               positionAtEndOfCentralDirectoryRecord\n+  #418 = Utf8               tryToLocateSignature\n+  #419 = Utf8               (JJ[B)Z\n+  #420 = Utf8               ex\n+  #421 = Utf8               Ljava/io/EOFException;\n+  #422 = Utf8               curr\n+  #423 = Utf8               minDistanceFromEnd\n+  #424 = Utf8               maxDistanceFromEnd\n+  #425 = Utf8               stopSearching\n+  #426 = Utf8               skipBytes\n+  #427 = Utf8               (I)V\n+  #428 = Utf8               count\n+  #429 = Utf8               currentPosition\n+  #430 = Utf8               newPosition\n+  #431 = Utf8               resolveLocalFileHeaderData\n+  #432 = Utf8               nc\n+  #433 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;\n+  #434 = Utf8               offset\n+  #435 = Utf8               extraFieldLen\n+  #436 = Utf8               localExtraData\n+  #437 = Utf8               zipArchiveEntry\n+  #438 = Class              #674          // java/util/Iterator\n+  #439 = Utf8               startsWithLocalFileHeader\n+  #440 = Utf8               ()Z\n+  #441 = Utf8               createBoundedInputStream\n+  #442 = Utf8               (JJ)Lorg/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream;\n+  #443 = Utf8               remaining\n+  #444 = Utf8               access$300\n+  #445 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n+  #446 = Utf8               x0\n+  #447 = Utf8               <clinit>\n+  #448 = Utf8               SourceFile\n+  #449 = Utf8               ZipFile.java\n+  #450 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n+  #451 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+  #452 = NameAndType        #268:#269     // archive:Ljava/nio/channels/SeekableByteChannel;\n+  #453 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #454 = Utf8               UTF8\n+  #455 = NameAndType        #300:#313     // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+  #456 = Utf8               java/io/File\n+  #457 = NameAndType        #300:#310     // \"<init>\":(Ljava/lang/String;)V\n+  #458 = NameAndType        #300:#314     // \"<init>\":(Ljava/io/File;Ljava/lang/String;Z)V\n+  #459 = NameAndType        #675:#676     // toPath:()Ljava/nio/file/Path;\n+  #460 = Class              #677          // java/nio/file/StandardOpenOption\n+  #461 = NameAndType        #678:#679     // READ:Ljava/nio/file/StandardOpenOption;\n+  #462 = Class              #680          // java/util/EnumSet\n+  #463 = NameAndType        #681:#682     // of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n+  #464 = Utf8               java/nio/file/attribute/FileAttribute\n+  #465 = Class              #683          // java/nio/file/Files\n+  #466 = NameAndType        #684:#685     // newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+  #467 = NameAndType        #686:#329     // getAbsolutePath:()Ljava/lang/String;\n+  #468 = NameAndType        #300:#319     // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZ)V\n+  #469 = Utf8               unknown archive\n+  #470 = NameAndType        #300:#318     // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n+  #471 = NameAndType        #300:#331     // \"<init>\":()V\n+  #472 = Utf8               java/util/LinkedList\n+  #473 = NameAndType        #256:#257     // entries:Ljava/util/List;\n+  #474 = Utf8               java/util/HashMap\n+  #475 = NameAndType        #300:#427     // \"<init>\":(I)V\n+  #476 = NameAndType        #260:#261     // nameMap:Ljava/util/Map;\n+  #477 = NameAndType        #272:#271     // closed:Z\n+  #478 = NameAndType        #273:#255     // dwordBuf:[B\n+  #479 = NameAndType        #274:#255     // wordBuf:[B\n+  #480 = NameAndType        #275:#255     // cfhBuf:[B\n+  #481 = NameAndType        #276:#255     // shortBuf:[B\n+  #482 = Class              #687          // java/nio/ByteBuffer\n+  #483 = NameAndType        #688:#689     // wrap:([B)Ljava/nio/ByteBuffer;\n+  #484 = NameAndType        #277:#278     // dwordBbuf:Ljava/nio/ByteBuffer;\n+  #485 = NameAndType        #279:#278     // wordBbuf:Ljava/nio/ByteBuffer;\n+  #486 = NameAndType        #280:#278     // cfhBbuf:Ljava/nio/ByteBuffer;\n+  #487 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$2\n+  #488 = NameAndType        #300:#333     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n+  #489 = NameAndType        #297:#298     // offsetComparator:Ljava/util/Comparator;\n+  #490 = NameAndType        #267:#264     // archiveName:Ljava/lang/String;\n+  #491 = NameAndType        #263:#264     // encoding:Ljava/lang/String;\n+  #492 = NameAndType        #690:#691     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #493 = NameAndType        #265:#266     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #494 = NameAndType        #270:#271     // useUnicodeExtraFields:Z\n+  #495 = NameAndType        #376:#377     // populateFromCentralDirectory:()Ljava/util/Map;\n+  #496 = NameAndType        #431:#384     // resolveLocalFileHeaderData:(Ljava/util/Map;)V\n+  #497 = Class              #692          // org/apache/commons/compress/utils/IOUtils\n+  #498 = NameAndType        #332:#693     // closeQuietly:(Ljava/io/Closeable;)V\n+  #499 = NameAndType        #330:#331     // close:()V\n+  #500 = Class              #694          // java/util/Collections\n+  #501 = NameAndType        #695:#696     // enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n+  #502 = NameAndType        #697:#698     // size:()I\n+  #503 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #504 = NameAndType        #699:#700     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #505 = Class              #701          // java/util/Arrays\n+  #506 = NameAndType        #702:#703     // sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n+  #507 = NameAndType        #704:#705     // asList:([Ljava/lang/Object;)Ljava/util/List;\n+  #508 = NameAndType        #706:#707     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #509 = NameAndType        #708:#709     // getFirst:()Ljava/lang/Object;\n+  #510 = Utf8               java/util/List\n+  #511 = NameAndType        #710:#711     // emptyList:()Ljava/util/List;\n+  #512 = NameAndType        #712:#713     // containsKey:(Ljava/lang/Object;)Z\n+  #513 = Class              #714          // org/apache/commons/compress/archivers/zip/ZipUtil\n+  #514 = NameAndType        #715:#349     // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #515 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$Entry\n+  #516 = NameAndType        #716:#717     // getDataOffset:()J\n+  #517 = NameAndType        #718:#717     // getCompressedSize:()J\n+  #518 = NameAndType        #441:#442     // createBoundedInputStream:(JJ)Lorg/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream;\n+  #519 = NameAndType        #338:#336     // getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n+  #520 = NameAndType        #719:#440     // hasMoreElements:()Z\n+  #521 = NameAndType        #720:#709     // nextElement:()Ljava/lang/Object;\n+  #522 = Class              #721          // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n+  #523 = NameAndType        #722:#349     // test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #524 = NameAndType        #352:#353     // getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+  #525 = Class              #723          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+  #526 = NameAndType        #724:#725     // addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+  #527 = NameAndType        #726:#727     // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #528 = Utf8               java/io/BufferedInputStream\n+  #529 = NameAndType        #300:#728     // \"<init>\":(Ljava/io/InputStream;)V\n+  #530 = NameAndType        #729:#730     // $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+  #531 = NameAndType        #731:#698     // getMethod:()I\n+  #532 = Class              #732          // org/apache/commons/compress/archivers/zip/ZipMethod\n+  #533 = NameAndType        #733:#734     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #534 = NameAndType        #735:#698     // ordinal:()I\n+  #535 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+  #536 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+  #537 = NameAndType        #736:#737     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #538 = NameAndType        #738:#698     // getSlidingDictionarySize:()I\n+  #539 = NameAndType        #739:#698     // getNumberOfShannonFanoTrees:()I\n+  #540 = NameAndType        #300:#740     // \"<init>\":(IILjava/io/InputStream;)V\n+  #541 = Utf8               java/util/zip/Inflater\n+  #542 = NameAndType        #300:#741     // \"<init>\":(Z)V\n+  #543 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$1\n+  #544 = Utf8               java/io/SequenceInputStream\n+  #545 = Utf8               java/io/ByteArrayInputStream\n+  #546 = NameAndType        #254:#255     // ONE_ZERO_BYTE:[B\n+  #547 = NameAndType        #300:#742     // \"<init>\":([B)V\n+  #548 = NameAndType        #300:#743     // \"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n+  #549 = NameAndType        #300:#744     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n+  #550 = Utf8               org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+  #551 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+  #552 = Utf8               java/util/zip/ZipException\n+  #553 = Utf8               java/lang/StringBuilder\n+  #554 = Utf8               Found unsupported compression method\n+  #555 = NameAndType        #745:#746     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #556 = NameAndType        #745:#747     // append:(I)Ljava/lang/StringBuilder;\n+  #557 = NameAndType        #748:#329     // toString:()Ljava/lang/String;\n+  #558 = NameAndType        #749:#440     // isUnixSymlink:()Z\n+  #559 = NameAndType        #366:#353     // getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+  #560 = NameAndType        #750:#751     // toByteArray:(Ljava/io/InputStream;)[B\n+  #561 = NameAndType        #752:#753     // decode:([B)Ljava/lang/String;\n+  #562 = Utf8               java/lang/Throwable\n+  #563 = NameAndType        #754:#755     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #564 = Class              #756          // java/lang/System\n+  #565 = NameAndType        #757:#758     // err:Ljava/io/PrintStream;\n+  #566 = Utf8               Cleaning up unclosed ZipFile for archive\n+  #567 = Class              #759          // java/io/PrintStream\n+  #568 = NameAndType        #760:#310     // println:(Ljava/lang/String;)V\n+  #569 = NameAndType        #375:#331     // finalize:()V\n+  #570 = NameAndType        #412:#331     // positionAtCentralDirectory:()V\n+  #571 = NameAndType        #761:#762     // rewind:()Ljava/nio/ByteBuffer;\n+  #572 = NameAndType        #763:#764     // readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+  #573 = Class              #765          // org/apache/commons/compress/archivers/zip/ZipLong\n+  #574 = NameAndType        #766:#767     // getValue:([B)J\n+  #575 = NameAndType        #283:#284     // CFH_SIG:J\n+  #576 = NameAndType        #439:#440     // startsWithLocalFileHeader:()Z\n+  #577 = Utf8               java/io/IOException\n+  #578 = Utf8               central directory is empty, can\\'t expand corrupt archive.\n+  #579 = NameAndType        #383:#384     // readCentralDirectoryEntry:(Ljava/util/Map;)V\n+  #580 = Class              #768          // org/apache/commons/compress/archivers/zip/ZipShort\n+  #581 = NameAndType        #766:#769     // getValue:([BI)I\n+  #582 = NameAndType        #770:#427     // setVersionMadeBy:(I)V\n+  #583 = NameAndType        #771:#427     // setPlatform:(I)V\n+  #584 = NameAndType        #772:#427     // setVersionRequired:(I)V\n+  #585 = NameAndType        #773:#774     // parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #586 = NameAndType        #775:#440     // usesUTF8ForNames:()Z\n+  #587 = NameAndType        #776:#266     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #588 = Class              #777          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #589 = NameAndType        #779:#780     // NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #590 = NameAndType        #781:#782     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #591 = NameAndType        #783:#784     // setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+  #592 = NameAndType        #785:#427     // setRawFlag:(I)V\n+  #593 = NameAndType        #786:#427     // setMethod:(I)V\n+  #594 = NameAndType        #766:#787     // getValue:([BI)J\n+  #595 = NameAndType        #788:#789     // dosToJavaTime:(J)J\n+  #596 = NameAndType        #790:#791     // setTime:(J)V\n+  #597 = NameAndType        #792:#791     // setCrc:(J)V\n+  #598 = NameAndType        #793:#791     // setCompressedSize:(J)V\n+  #599 = NameAndType        #794:#791     // setSize:(J)V\n+  #600 = NameAndType        #795:#427     // setInternalAttributes:(I)V\n+  #601 = NameAndType        #796:#791     // setExternalAttributes:(J)V\n+  #602 = NameAndType        #797:#798     // setName:(Ljava/lang/String;[B)V\n+  #603 = NameAndType        #799:#791     // setLocalHeaderOffset:(J)V\n+  #604 = NameAndType        #800:#713     // add:(Ljava/lang/Object;)Z\n+  #605 = NameAndType        #801:#742     // setCentralDirectoryExtra:([B)V\n+  #606 = NameAndType        #405:#406     // setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;I)V\n+  #607 = NameAndType        #802:#310     // setComment:(Ljava/lang/String;)V\n+  #608 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n+  #609 = NameAndType        #300:#803     // \"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+  #610 = NameAndType        #804:#805     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #611 = NameAndType        #806:#807     // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #612 = NameAndType        #808:#809     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #613 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+  #614 = NameAndType        #810:#717     // getSize:()J\n+  #615 = NameAndType        #811:#717     // getLocalHeaderOffset:()J\n+  #616 = NameAndType        #812:#813     // reparseCentralDirectoryData:(ZZZZ)V\n+  #617 = NameAndType        #810:#814     // getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #618 = NameAndType        #815:#717     // getLongValue:()J\n+  #619 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #620 = NameAndType        #300:#791     // \"<init>\":(J)V\n+  #621 = NameAndType        #794:#816     // setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #622 = NameAndType        #718:#814     // getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #623 = NameAndType        #793:#816     // setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #624 = NameAndType        #817:#814     // getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #625 = NameAndType        #417:#331     // positionAtEndOfCentralDirectoryRecord:()V\n+  #626 = NameAndType        #818:#717     // position:()J\n+  #627 = NameAndType        #818:#819     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #628 = NameAndType        #820:#255     // ZIP64_EOCD_LOC_SIG:[B\n+  #629 = NameAndType        #821:#822     // equals:([B[B)Z\n+  #630 = NameAndType        #426:#427     // skipBytes:(I)V\n+  #631 = NameAndType        #416:#331     // positionAtCentralDirectory32:()V\n+  #632 = NameAndType        #415:#331     // positionAtCentralDirectory64:()V\n+  #633 = NameAndType        #815:#767     // getLongValue:([B)J\n+  #634 = NameAndType        #823:#255     // ZIP64_EOCD_SIG:[B\n+  #635 = Utf8               archive\\'s ZIP64 end of central directory locator is corrupt.\n+  #636 = NameAndType        #824:#255     // EOCD_SIG:[B\n+  #637 = NameAndType        #418:#419     // tryToLocateSignature:(JJ[B)Z\n+  #638 = Utf8               archive is not a ZIP archive\n+  #639 = NameAndType        #697:#717     // size:()J\n+  #640 = Class              #825          // java/lang/Math\n+  #641 = NameAndType        #826:#827     // max:(JJ)J\n+  #642 = NameAndType        #828:#762     // flip:()Ljava/nio/ByteBuffer;\n+  #643 = Utf8               java/io/EOFException\n+  #644 = NameAndType        #706:#829     // get:()B\n+  #645 = NameAndType        #830:#831     // iterator:()Ljava/util/Iterator;\n+  #646 = NameAndType        #832:#440     // hasNext:()Z\n+  #647 = NameAndType        #833:#709     // next:()Ljava/lang/Object;\n+  #648 = NameAndType        #706:#689     // get:([B)Ljava/nio/ByteBuffer;\n+  #649 = NameAndType        #766:#834     // getValue:([B)I\n+  #650 = NameAndType        #835:#742     // setExtra:([B)V\n+  #651 = NameAndType        #836:#791     // setDataOffset:(J)V\n+  #652 = NameAndType        #837:#741     // setStreamContiguous:(Z)V\n+  #653 = NameAndType        #838:#839     // access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #654 = NameAndType        #840:#839     // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #655 = NameAndType        #841:#842     // setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #656 = NameAndType        #843:#329     // getName:()Ljava/lang/String;\n+  #657 = NameAndType        #844:#845     // addLast:(Ljava/lang/Object;)V\n+  #658 = NameAndType        #846:#255     // LFH_SIG:[B\n+  #659 = Utf8               java/nio/channels/FileChannel\n+  #660 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n+  #661 = NameAndType        #300:#847     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+  #662 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n+  #663 = NameAndType        #283:#255     // CFH_SIG:[B\n+  #664 = Utf8               java/lang/Object\n+  #665 = Utf8               java/io/Closeable\n+  #666 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$3\n+  #667 = Utf8               java/nio/channels/SeekableByteChannel\n+  #668 = Utf8               java/lang/String\n+  #669 = Utf8               java/util/Enumeration\n+  #670 = Utf8               java/io/InputStream\n+  #671 = Utf8               java/util/Map\n+  #672 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #673 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #674 = Utf8               java/util/Iterator\n+  #675 = Utf8               toPath\n+  #676 = Utf8               ()Ljava/nio/file/Path;\n+  #677 = Utf8               java/nio/file/StandardOpenOption\n+  #678 = Utf8               READ\n+  #679 = Utf8               Ljava/nio/file/StandardOpenOption;\n+  #680 = Utf8               java/util/EnumSet\n+  #681 = Utf8               of\n+  #682 = Utf8               (Ljava/lang/Enum;)Ljava/util/EnumSet;\n+  #683 = Utf8               java/nio/file/Files\n+  #684 = Utf8               newByteChannel\n+  #685 = Utf8               (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+  #686 = Utf8               getAbsolutePath\n+  #687 = Utf8               java/nio/ByteBuffer\n+  #688 = Utf8               wrap\n+  #689 = Utf8               ([B)Ljava/nio/ByteBuffer;\n+  #690 = Utf8               getZipEncoding\n+  #691 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #692 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #693 = Utf8               (Ljava/io/Closeable;)V\n+  #694 = Utf8               java/util/Collections\n+  #695 = Utf8               enumeration\n+  #696 = Utf8               (Ljava/util/Collection;)Ljava/util/Enumeration;\n+  #697 = Utf8               size\n+  #698 = Utf8               ()I\n+  #699 = Utf8               toArray\n+  #700 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #701 = Utf8               java/util/Arrays\n+  #702 = Utf8               sort\n+  #703 = Utf8               ([Ljava/lang/Object;Ljava/util/Comparator;)V\n+  #704 = Utf8               asList\n+  #705 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n+  #706 = Utf8               get\n+  #707 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #708 = Utf8               getFirst\n+  #709 = Utf8               ()Ljava/lang/Object;\n+  #710 = Utf8               emptyList\n+  #711 = Utf8               ()Ljava/util/List;\n+  #712 = Utf8               containsKey\n+  #713 = Utf8               (Ljava/lang/Object;)Z\n+  #714 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+  #715 = Utf8               canHandleEntryData\n+  #716 = Utf8               getDataOffset\n+  #717 = Utf8               ()J\n+  #718 = Utf8               getCompressedSize\n+  #719 = Utf8               hasMoreElements\n+  #720 = Utf8               nextElement\n+  #721 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n+  #722 = Utf8               test\n+  #723 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+  #724 = Utf8               addRawArchiveEntry\n+  #725 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+  #726 = Utf8               checkRequestedFeatures\n+  #727 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #728 = Utf8               (Ljava/io/InputStream;)V\n+  #729 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod\n+  #730 = Utf8               [I\n+  #731 = Utf8               getMethod\n+  #732 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n+  #733 = Utf8               getMethodByCode\n+  #734 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #735 = Utf8               ordinal\n+  #736 = Utf8               getGeneralPurposeBit\n+  #737 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #738 = Utf8               getSlidingDictionarySize\n+  #739 = Utf8               getNumberOfShannonFanoTrees\n+  #740 = Utf8               (IILjava/io/InputStream;)V\n+  #741 = Utf8               (Z)V\n+  #742 = Utf8               ([B)V\n+  #743 = Utf8               (Ljava/io/InputStream;Ljava/io/InputStream;)V\n+  #744 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n+  #745 = Utf8               append\n+  #746 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #747 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #748 = Utf8               toString\n+  #749 = Utf8               isUnixSymlink\n+  #750 = Utf8               toByteArray\n+  #751 = Utf8               (Ljava/io/InputStream;)[B\n+  #752 = Utf8               decode\n+  #753 = Utf8               ([B)Ljava/lang/String;\n+  #754 = Utf8               addSuppressed\n+  #755 = Utf8               (Ljava/lang/Throwable;)V\n+  #756 = Utf8               java/lang/System\n+  #757 = Utf8               err\n+  #758 = Utf8               Ljava/io/PrintStream;\n+  #759 = Utf8               java/io/PrintStream\n+  #760 = Utf8               println\n+  #761 = Utf8               rewind\n+  #762 = Utf8               ()Ljava/nio/ByteBuffer;\n+  #763 = Utf8               readFully\n+  #764 = Utf8               (Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+  #765 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+  #766 = Utf8               getValue\n+  #767 = Utf8               ([B)J\n+  #768 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+  #769 = Utf8               ([BI)I\n+  #770 = Utf8               setVersionMadeBy\n+  #771 = Utf8               setPlatform\n+  #772 = Utf8               setVersionRequired\n+  #773 = Utf8               parse\n+  #774 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #775 = Utf8               usesUTF8ForNames\n+  #776 = Utf8               UTF8_ZIP_ENCODING\n+  #777 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #778 = Utf8               NameSource\n+  #779 = Utf8               NAME_WITH_EFS_FLAG\n+  #780 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #781 = Utf8               setNameSource\n+  #782 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #783 = Utf8               setGeneralPurposeBit\n+  #784 = Utf8               (Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+  #785 = Utf8               setRawFlag\n+  #786 = Utf8               setMethod\n+  #787 = Utf8               ([BI)J\n+  #788 = Utf8               dosToJavaTime\n+  #789 = Utf8               (J)J\n+  #790 = Utf8               setTime\n+  #791 = Utf8               (J)V\n+  #792 = Utf8               setCrc\n+  #793 = Utf8               setCompressedSize\n+  #794 = Utf8               setSize\n+  #795 = Utf8               setInternalAttributes\n+  #796 = Utf8               setExternalAttributes\n+  #797 = Utf8               setName\n+  #798 = Utf8               (Ljava/lang/String;[B)V\n+  #799 = Utf8               setLocalHeaderOffset\n+  #800 = Utf8               add\n+  #801 = Utf8               setCentralDirectoryExtra\n+  #802 = Utf8               setComment\n+  #803 = Utf8               ([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+  #804 = Utf8               put\n+  #805 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #806 = Utf8               HEADER_ID\n+  #807 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #808 = Utf8               getExtraField\n+  #809 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #810 = Utf8               getSize\n+  #811 = Utf8               getLocalHeaderOffset\n+  #812 = Utf8               reparseCentralDirectoryData\n+  #813 = Utf8               (ZZZZ)V\n+  #814 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #815 = Utf8               getLongValue\n+  #816 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #817 = Utf8               getRelativeHeaderOffset\n+  #818 = Utf8               position\n+  #819 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+  #820 = Utf8               ZIP64_EOCD_LOC_SIG\n+  #821 = Utf8               equals\n+  #822 = Utf8               ([B[B)Z\n+  #823 = Utf8               ZIP64_EOCD_SIG\n+  #824 = Utf8               EOCD_SIG\n+  #825 = Utf8               java/lang/Math\n+  #826 = Utf8               max\n+  #827 = Utf8               (JJ)J\n+  #828 = Utf8               flip\n+  #829 = Utf8               ()B\n+  #830 = Utf8               iterator\n+  #831 = Utf8               ()Ljava/util/Iterator;\n+  #832 = Utf8               hasNext\n+  #833 = Utf8               next\n+  #834 = Utf8               ([B)I\n+  #835 = Utf8               setExtra\n+  #836 = Utf8               setDataOffset\n+  #837 = Utf8               setStreamContiguous\n+  #838 = Utf8               access$100\n+  #839 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #840 = Utf8               access$200\n+  #841 = Utf8               setNameAndCommentFromExtraFields\n+  #842 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #843 = Utf8               getName\n+  #844 = Utf8               addLast\n+  #845 = Utf8               (Ljava/lang/Object;)V\n+  #846 = Utf8               LFH_SIG\n+  #847 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n {\n   private static final int HASH_SIZE = 509;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 509\n \n   static final int NIBLET_MASK = 15;\n@@ -896,20 +888,20 @@\n   private static final byte[] ONE_ZERO_BYTE;\n     descriptor: [B\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   private final java.util.List<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> entries;\n     descriptor: Ljava/util/List;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #254                         // Ljava/util/List<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #259                         // Ljava/util/List<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   private final java.util.Map<java.lang.String, java.util.LinkedList<org.apache.commons.compress.archivers.zip.ZipArchiveEntry>> nameMap;\n     descriptor: Ljava/util/Map;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #257                         // Ljava/util/Map<Ljava/lang/String;Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;>;\n+    Signature: #262                         // Ljava/util/Map<Ljava/lang/String;Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;>;\n \n   private final java.lang.String encoding;\n     descriptor: Ljava/lang/String;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n@@ -1002,15 +994,15 @@\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 26l\n \n   private final java.util.Comparator<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> offsetComparator;\n     descriptor: Ljava/util/Comparator;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #294                         // Ljava/util/Comparator<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #299                         // Ljava/util/Comparator<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public org.apache.commons.compress.archivers.zip.ZipFile(java.io.File) throws java.io.IOException;\n     descriptor: (Ljava/io/File;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n@@ -1349,14 +1341,15 @@\n         line 296: 153\n         line 298: 156\n         line 299: 170\n         line 300: 180\n         line 298: 190\n         line 299: 206\n         line 300: 216\n+        line 302: 223\n         line 303: 226\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n           147       9     7 entriesWithoutUTF8Flag   Ljava/util/Map;\n             0     227     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n             0     227     1 channel   Ljava/nio/channels/SeekableByteChannel;\n             0     227     2 archiveName   Ljava/lang/String;\n@@ -1453,15 +1446,15 @@\n          4: invokestatic  #47                 // Method java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n          7: areturn\n       LineNumberTable:\n         line 346: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n-    Signature: #332                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #337                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public java.util.Enumeration<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntriesInPhysicalOrder();\n     descriptor: ()Ljava/util/Enumeration;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n@@ -1485,15 +1478,15 @@\n         line 360: 0\n         line 361: 25\n         line 362: 33\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      41     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n            25      16     1 allEntries   [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-    Signature: #332                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #337                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry(java.lang.String);\n     descriptor: (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_0\n@@ -1559,16 +1552,16 @@\n         Start  Length  Slot  Name   Signature\n            14      12     2 entriesOfThatName   Ljava/util/List<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n       StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n           offset_delta = 22\n           locals = [ class java/util/List ]\n         frame_type = 66 /* same_locals_1_stack_item */\n-          stack = [ class java/lang/Iterable ]\n-    Signature: #343                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+          stack = [ class java/util/List ]\n+    Signature: #347                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public java.lang.Iterable<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntriesInPhysicalOrder(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/lang/Iterable;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=2\n          0: iconst_0\n@@ -1606,15 +1599,15 @@\n             0      52     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n             0      52     1  name   Ljava/lang/String;\n             5      47     2 entriesOfThatName   [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 47\n           locals = [ class \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\" ]\n-    Signature: #343                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #347                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public boolean canReadEntryData(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=2, args_size=2\n          0: aload_1\n@@ -1811,19 +1804,25 @@\n        229: new           #96                 // class org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n        232: dup\n        233: aload         4\n        235: invokespecial #97                 // Method org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n        238: areturn\n        239: new           #98                 // class java/util/zip/ZipException\n        242: dup\n-       243: aload_1\n-       244: invokevirtual #75                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       247: invokedynamic #99,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n-       252: invokespecial #100                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       255: athrow\n+       243: new           #99                 // class java/lang/StringBuilder\n+       246: dup\n+       247: invokespecial #100                // Method java/lang/StringBuilder.\"<init>\":()V\n+       250: ldc           #101                // String Found unsupported compression method\n+       252: invokevirtual #102                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       255: aload_1\n+       256: invokevirtual #75                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       259: invokevirtual #103                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       262: invokevirtual #104                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       265: invokespecial #105                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       268: athrow\n       LineNumberTable:\n         line 476: 0\n         line 477: 7\n         line 480: 9\n         line 481: 13\n         line 486: 18\n         line 487: 25\n@@ -1834,22 +1833,22 @@\n         line 495: 165\n         line 494: 176\n         line 497: 177\n         line 503: 187\n         line 515: 219\n         line 517: 229\n         line 532: 239\n-        line 533: 244\n+        line 533: 256\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n           187      32     5 inflater   Ljava/util/zip/Inflater;\n-            0     256     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n-            0     256     1    ze   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-           18     238     2 start   J\n-           36     220     4    is   Ljava/io/InputStream;\n+            0     269     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n+            0     269     1    ze   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+           18     251     2 start   J\n+           36     233     4    is   Ljava/io/InputStream;\n       StackMapTable: number_of_entries = 8\n         frame_type = 9 /* same */\n         frame_type = 253 /* append */\n           offset_delta = 130\n           locals = [ long, class java/io/InputStream ]\n         frame_type = 2 /* same */\n         frame_type = 9 /* same */\n@@ -1864,64 +1863,64 @@\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=8, args_size=2\n          0: aload_1\n          1: ifnull        110\n          4: aload_1\n-         5: invokevirtual #101                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z\n+         5: invokevirtual #106                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z\n          8: ifeq          110\n         11: aload_0\n         12: aload_1\n-        13: invokevirtual #102                // Method getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+        13: invokevirtual #107                // Method getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n         16: astore_2\n         17: aconst_null\n         18: astore_3\n         19: aload_0\n         20: getfield      #41                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         23: aload_2\n-        24: invokestatic  #103                // Method org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n-        27: invokeinterface #104,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+        24: invokestatic  #108                // Method org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n+        27: invokeinterface #109,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n         32: astore        4\n         34: aload_2\n         35: ifnull        64\n         38: aload_3\n         39: ifnull        60\n         42: aload_2\n-        43: invokevirtual #105                // Method java/io/InputStream.close:()V\n+        43: invokevirtual #110                // Method java/io/InputStream.close:()V\n         46: goto          64\n         49: astore        5\n         51: aload_3\n         52: aload         5\n-        54: invokevirtual #107                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        54: invokevirtual #112                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n         57: goto          64\n         60: aload_2\n-        61: invokevirtual #105                // Method java/io/InputStream.close:()V\n+        61: invokevirtual #110                // Method java/io/InputStream.close:()V\n         64: aload         4\n         66: areturn\n         67: astore        4\n         69: aload         4\n         71: astore_3\n         72: aload         4\n         74: athrow\n         75: astore        6\n         77: aload_2\n         78: ifnull        107\n         81: aload_3\n         82: ifnull        103\n         85: aload_2\n-        86: invokevirtual #105                // Method java/io/InputStream.close:()V\n+        86: invokevirtual #110                // Method java/io/InputStream.close:()V\n         89: goto          107\n         92: astore        7\n         94: aload_3\n         95: aload         7\n-        97: invokevirtual #107                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        97: invokevirtual #112                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n        100: goto          107\n        103: aload_2\n-       104: invokevirtual #105                // Method java/io/InputStream.close:()V\n+       104: invokevirtual #110                // Method java/io/InputStream.close:()V\n        107: aload         6\n        109: athrow\n        110: aconst_null\n        111: areturn\n       Exception table:\n          from    to  target type\n             42    46    49   Class java/lang/Throwable\n@@ -1969,111 +1968,118 @@\n     Exceptions:\n       throws java.io.IOException\n \n   protected void finalize() throws java.lang.Throwable;\n     descriptor: ()V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n-      stack=2, locals=2, args_size=1\n+      stack=3, locals=2, args_size=1\n          0: aload_0\n          1: getfield      #26                 // Field closed:Z\n-         4: ifne          26\n-         7: getstatic     #108                // Field java/lang/System.err:Ljava/io/PrintStream;\n-        10: aload_0\n-        11: getfield      #38                 // Field archiveName:Ljava/lang/String;\n-        14: invokedynamic #109,  0            // InvokeDynamic #1:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n-        19: invokevirtual #110                // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n+         4: ifne          39\n+         7: getstatic     #113                // Field java/lang/System.err:Ljava/io/PrintStream;\n+        10: new           #99                 // class java/lang/StringBuilder\n+        13: dup\n+        14: invokespecial #100                // Method java/lang/StringBuilder.\"<init>\":()V\n+        17: ldc           #114                // String Cleaning up unclosed ZipFile for archive\n+        19: invokevirtual #102                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         22: aload_0\n-        23: invokevirtual #111                // Method close:()V\n-        26: aload_0\n-        27: invokespecial #112                // Method java/lang/Object.finalize:()V\n-        30: goto          40\n-        33: astore_1\n-        34: aload_0\n-        35: invokespecial #112                // Method java/lang/Object.finalize:()V\n-        38: aload_1\n-        39: athrow\n-        40: return\n+        23: getfield      #38                 // Field archiveName:Ljava/lang/String;\n+        26: invokevirtual #102                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        29: invokevirtual #104                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        32: invokevirtual #115                // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n+        35: aload_0\n+        36: invokevirtual #116                // Method close:()V\n+        39: aload_0\n+        40: invokespecial #117                // Method java/lang/Object.finalize:()V\n+        43: goto          53\n+        46: astore_1\n+        47: aload_0\n+        48: invokespecial #117                // Method java/lang/Object.finalize:()V\n+        51: aload_1\n+        52: athrow\n+        53: return\n       Exception table:\n          from    to  target type\n-             0    26    33   any\n+             0    39    46   any\n       LineNumberTable:\n         line 568: 0\n         line 569: 7\n-        line 571: 22\n-        line 574: 26\n-        line 575: 30\n-        line 574: 33\n-        line 576: 40\n+        line 571: 35\n+        line 574: 39\n+        line 575: 43\n+        line 574: 46\n+        line 575: 51\n+        line 576: 53\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      41     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n+            0      54     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n       StackMapTable: number_of_entries = 3\n-        frame_type = 26 /* same */\n+        frame_type = 39 /* same */\n         frame_type = 70 /* same_locals_1_stack_item */\n           stack = [ class java/lang/Throwable ]\n         frame_type = 6 /* same */\n     Exceptions:\n       throws java.lang.Throwable\n \n   private java.util.Map<org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment> populateFromCentralDirectory() throws java.io.IOException;\n     descriptor: ()Ljava/util/Map;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=4, args_size=1\n          0: new           #23                 // class java/util/HashMap\n          3: dup\n-         4: invokespecial #113                // Method java/util/HashMap.\"<init>\":()V\n+         4: invokespecial #118                // Method java/util/HashMap.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n-         9: invokespecial #114                // Method positionAtCentralDirectory:()V\n+         9: invokespecial #119                // Method positionAtCentralDirectory:()V\n         12: aload_0\n         13: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        16: invokevirtual #115                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+        16: invokevirtual #120                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         19: pop\n         20: aload_0\n         21: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         24: aload_0\n         25: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        28: invokestatic  #116                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        28: invokestatic  #121                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         31: aload_0\n         32: getfield      #28                 // Field wordBuf:[B\n-        35: invokestatic  #117                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+        35: invokestatic  #122                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n         38: lstore_2\n         39: lload_2\n-        40: getstatic     #118                // Field CFH_SIG:J\n+        40: getstatic     #123                // Field CFH_SIG:J\n         43: lcmp\n         44: ifeq          64\n         47: aload_0\n-        48: invokespecial #119                // Method startsWithLocalFileHeader:()Z\n+        48: invokespecial #124                // Method startsWithLocalFileHeader:()Z\n         51: ifeq          64\n-        54: new           #120                // class java/io/IOException\n+        54: new           #125                // class java/io/IOException\n         57: dup\n-        58: ldc           #121                // String central directory is empty, can\\'t expand corrupt archive.\n-        60: invokespecial #122                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        58: ldc           #126                // String central directory is empty, can\\'t expand corrupt archive.\n+        60: invokespecial #127                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         63: athrow\n         64: lload_2\n-        65: getstatic     #118                // Field CFH_SIG:J\n+        65: getstatic     #123                // Field CFH_SIG:J\n         68: lcmp\n         69: ifne          107\n         72: aload_0\n         73: aload_1\n-        74: invokespecial #123                // Method readCentralDirectoryEntry:(Ljava/util/Map;)V\n+        74: invokespecial #128                // Method readCentralDirectoryEntry:(Ljava/util/Map;)V\n         77: aload_0\n         78: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        81: invokevirtual #115                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+        81: invokevirtual #120                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         84: pop\n         85: aload_0\n         86: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         89: aload_0\n         90: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        93: invokestatic  #116                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        93: invokestatic  #121                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         96: aload_0\n         97: getfield      #28                 // Field wordBuf:[B\n-       100: invokestatic  #117                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+       100: invokestatic  #122                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n        103: lstore_2\n        104: goto          64\n        107: aload_1\n        108: areturn\n       LineNumberTable:\n         line 616: 0\n         line 619: 8\n@@ -2099,232 +2105,232 @@\n       StackMapTable: number_of_entries = 2\n         frame_type = 253 /* append */\n           offset_delta = 64\n           locals = [ class java/util/HashMap, long ]\n         frame_type = 42 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #378                         // ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n+    Signature: #382                         // ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n \n   private void readCentralDirectoryEntry(java.util.Map<org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment>) throws java.io.IOException;\n     descriptor: (Ljava/util/Map;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=17, args_size=2\n          0: aload_0\n          1: getfield      #34                 // Field cfhBbuf:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #115                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+         4: invokevirtual #120                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n          7: pop\n          8: aload_0\n          9: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         12: aload_0\n         13: getfield      #34                 // Field cfhBbuf:Ljava/nio/ByteBuffer;\n-        16: invokestatic  #116                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        16: invokestatic  #121                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         19: iconst_0\n         20: istore_2\n         21: new           #61                 // class org/apache/commons/compress/archivers/zip/ZipFile$Entry\n         24: dup\n-        25: invokespecial #124                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.\"<init>\":()V\n+        25: invokespecial #129                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.\"<init>\":()V\n         28: astore_3\n         29: aload_0\n         30: getfield      #29                 // Field cfhBuf:[B\n         33: iload_2\n-        34: invokestatic  #125                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        34: invokestatic  #130                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n         37: istore        4\n         39: iinc          2, 2\n         42: aload_3\n         43: iload         4\n-        45: invokevirtual #126                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V\n+        45: invokevirtual #131                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V\n         48: aload_3\n         49: iload         4\n         51: bipush        8\n         53: ishr\n         54: bipush        15\n         56: iand\n-        57: invokevirtual #127                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V\n+        57: invokevirtual #132                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V\n         60: aload_3\n         61: aload_0\n         62: getfield      #29                 // Field cfhBuf:[B\n         65: iload_2\n-        66: invokestatic  #125                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        69: invokevirtual #128                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V\n+        66: invokestatic  #130                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        69: invokevirtual #133                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V\n         72: iinc          2, 2\n         75: aload_0\n         76: getfield      #29                 // Field cfhBuf:[B\n         79: iload_2\n-        80: invokestatic  #129                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+        80: invokestatic  #134                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n         83: astore        5\n         85: aload         5\n-        87: invokevirtual #130                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n+        87: invokevirtual #135                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n         90: istore        6\n         92: iload         6\n         94: ifeq          103\n-        97: getstatic     #131                // Field org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        97: getstatic     #136                // Field org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        100: goto          107\n        103: aload_0\n        104: getfield      #41                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        107: astore        7\n        109: iload         6\n        111: ifeq          121\n        114: aload_3\n-       115: getstatic     #132                // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-       118: invokevirtual #133                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+       115: getstatic     #137                // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+       118: invokevirtual #138                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n        121: aload_3\n        122: aload         5\n-       124: invokevirtual #134                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+       124: invokevirtual #139                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n        127: aload_3\n        128: aload_0\n        129: getfield      #29                 // Field cfhBuf:[B\n        132: iload_2\n-       133: invokestatic  #125                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       136: invokevirtual #135                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V\n+       133: invokestatic  #130                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       136: invokevirtual #140                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V\n        139: iinc          2, 2\n        142: aload_3\n        143: aload_0\n        144: getfield      #29                 // Field cfhBuf:[B\n        147: iload_2\n-       148: invokestatic  #125                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       151: invokevirtual #136                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V\n+       148: invokestatic  #130                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       151: invokevirtual #141                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V\n        154: iinc          2, 2\n        157: aload_0\n        158: getfield      #29                 // Field cfhBuf:[B\n        161: iload_2\n-       162: invokestatic  #137                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       165: invokestatic  #138                // Method org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n+       162: invokestatic  #142                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       165: invokestatic  #143                // Method org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n        168: lstore        8\n        170: aload_3\n        171: lload         8\n-       173: invokevirtual #139                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V\n+       173: invokevirtual #144                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V\n        176: iinc          2, 4\n        179: aload_3\n        180: aload_0\n        181: getfield      #29                 // Field cfhBuf:[B\n        184: iload_2\n-       185: invokestatic  #137                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       188: invokevirtual #140                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V\n+       185: invokestatic  #142                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       188: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V\n        191: iinc          2, 4\n        194: aload_3\n        195: aload_0\n        196: getfield      #29                 // Field cfhBuf:[B\n        199: iload_2\n-       200: invokestatic  #137                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       203: invokevirtual #141                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V\n+       200: invokestatic  #142                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       203: invokevirtual #146                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V\n        206: iinc          2, 4\n        209: aload_3\n        210: aload_0\n        211: getfield      #29                 // Field cfhBuf:[B\n        214: iload_2\n-       215: invokestatic  #137                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       218: invokevirtual #142                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V\n+       215: invokestatic  #142                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       218: invokevirtual #147                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V\n        221: iinc          2, 4\n        224: aload_0\n        225: getfield      #29                 // Field cfhBuf:[B\n        228: iload_2\n-       229: invokestatic  #125                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       229: invokestatic  #130                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        232: istore        10\n        234: iinc          2, 2\n        237: aload_0\n        238: getfield      #29                 // Field cfhBuf:[B\n        241: iload_2\n-       242: invokestatic  #125                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       242: invokestatic  #130                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        245: istore        11\n        247: iinc          2, 2\n        250: aload_0\n        251: getfield      #29                 // Field cfhBuf:[B\n        254: iload_2\n-       255: invokestatic  #125                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       255: invokestatic  #130                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        258: istore        12\n        260: iinc          2, 2\n        263: aload_0\n        264: getfield      #29                 // Field cfhBuf:[B\n        267: iload_2\n-       268: invokestatic  #125                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       268: invokestatic  #130                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        271: istore        13\n        273: iinc          2, 2\n        276: aload_3\n        277: aload_0\n        278: getfield      #29                 // Field cfhBuf:[B\n        281: iload_2\n-       282: invokestatic  #125                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       285: invokevirtual #143                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V\n+       282: invokestatic  #130                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       285: invokevirtual #148                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V\n        288: iinc          2, 2\n        291: aload_3\n        292: aload_0\n        293: getfield      #29                 // Field cfhBuf:[B\n        296: iload_2\n-       297: invokestatic  #137                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       300: invokevirtual #144                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V\n+       297: invokestatic  #142                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       300: invokevirtual #149                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V\n        303: iinc          2, 4\n        306: iload         10\n        308: newarray       byte\n        310: astore        14\n        312: aload_0\n        313: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        316: aload         14\n        318: invokestatic  #31                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-       321: invokestatic  #116                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       321: invokestatic  #121                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        324: aload_3\n        325: aload         7\n        327: aload         14\n-       329: invokeinterface #104,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+       329: invokeinterface #109,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n        334: aload         14\n-       336: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V\n+       336: invokevirtual #150                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V\n        339: aload_3\n        340: aload_0\n        341: getfield      #29                 // Field cfhBuf:[B\n        344: iload_2\n-       345: invokestatic  #137                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       348: invokevirtual #146                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V\n+       345: invokestatic  #142                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       348: invokevirtual #151                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V\n        351: aload_0\n        352: getfield      #22                 // Field entries:Ljava/util/List;\n        355: aload_3\n-       356: invokeinterface #147,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       356: invokeinterface #152,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n        361: pop\n        362: iload         11\n        364: newarray       byte\n        366: astore        15\n        368: aload_0\n        369: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        372: aload         15\n        374: invokestatic  #31                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-       377: invokestatic  #116                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       377: invokestatic  #121                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        380: aload_3\n        381: aload         15\n-       383: invokevirtual #148                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V\n+       383: invokevirtual #153                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V\n        386: aload_0\n        387: aload_3\n        388: iload         13\n-       390: invokespecial #149                // Method setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;I)V\n+       390: invokespecial #154                // Method setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;I)V\n        393: iload         12\n        395: newarray       byte\n        397: astore        16\n        399: aload_0\n        400: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        403: aload         16\n        405: invokestatic  #31                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-       408: invokestatic  #116                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       408: invokestatic  #121                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        411: aload_3\n        412: aload         7\n        414: aload         16\n-       416: invokeinterface #104,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-       421: invokevirtual #150                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V\n+       416: invokeinterface #109,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+       421: invokevirtual #155                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V\n        424: iload         6\n        426: ifne          456\n        429: aload_0\n        430: getfield      #42                 // Field useUnicodeExtraFields:Z\n        433: ifeq          456\n        436: aload_1\n        437: aload_3\n-       438: new           #151                // class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n+       438: new           #156                // class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n        441: dup\n        442: aload         14\n        444: aload         16\n        446: aconst_null\n-       447: invokespecial #152                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.\"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-       450: invokeinterface #153,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+       447: invokespecial #157                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.\"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+       450: invokeinterface #158,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n        455: pop\n        456: return\n       LineNumberTable:\n         line 651: 0\n         line 652: 8\n         line 653: 19\n         line 654: 21\n@@ -2413,107 +2419,107 @@\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipEncoding ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 334\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class java/util/Map, int, class org/apache/commons/compress/archivers/zip/ZipFile$Entry, int, class org/apache/commons/compress/archivers/zip/GeneralPurposeBit, int, class org/apache/commons/compress/archivers/zip/ZipEncoding, long, int, int, int, int, class \"[B\", class \"[B\", class \"[B\" ]\n           stack = []\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #400                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n+    Signature: #404                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n \n   private void setSizesAndOffsetFromZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, int) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;I)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=7, args_size=3\n          0: aload_1\n-         1: getstatic     #154                // Field org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-         4: invokevirtual #155                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-         7: checkcast     #156                // class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+         1: getstatic     #159                // Field org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         4: invokevirtual #160                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+         7: checkcast     #161                // class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n         10: astore_3\n         11: aload_3\n         12: ifnull        184\n         15: aload_1\n-        16: invokevirtual #157                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-        19: ldc2_w        #158                // long 4294967295l\n+        16: invokevirtual #162                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+        19: ldc2_w        #163                // long 4294967295l\n         22: lcmp\n         23: ifne          30\n         26: iconst_1\n         27: goto          31\n         30: iconst_0\n         31: istore        4\n         33: aload_1\n         34: invokevirtual #63                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-        37: ldc2_w        #158                // long 4294967295l\n+        37: ldc2_w        #163                // long 4294967295l\n         40: lcmp\n         41: ifne          48\n         44: iconst_1\n         45: goto          49\n         48: iconst_0\n         49: istore        5\n         51: aload_1\n-        52: invokevirtual #160                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-        55: ldc2_w        #158                // long 4294967295l\n+        52: invokevirtual #165                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+        55: ldc2_w        #163                // long 4294967295l\n         58: lcmp\n         59: ifne          66\n         62: iconst_1\n         63: goto          67\n         66: iconst_0\n         67: istore        6\n         69: aload_3\n         70: iload         4\n         72: iload         5\n         74: iload         6\n         76: iload_2\n-        77: ldc           #161                // int 65535\n+        77: ldc           #166                // int 65535\n         79: if_icmpne     86\n         82: iconst_1\n         83: goto          87\n         86: iconst_0\n-        87: invokevirtual #162                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V\n+        87: invokevirtual #167                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V\n         90: iload         4\n         92: ifeq          109\n         95: aload_1\n         96: aload_3\n-        97: invokevirtual #163                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-       100: invokevirtual #164                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-       103: invokevirtual #165                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+        97: invokevirtual #168                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       100: invokevirtual #169                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+       103: invokevirtual #170                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n        106: goto          129\n        109: iload         5\n        111: ifeq          129\n        114: aload_3\n-       115: new           #166                // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+       115: new           #171                // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n        118: dup\n        119: aload_1\n-       120: invokevirtual #157                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-       123: invokespecial #167                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-       126: invokevirtual #168                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+       120: invokevirtual #162                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+       123: invokespecial #172                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+       126: invokevirtual #173                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n        129: iload         5\n        131: ifeq          148\n        134: aload_1\n        135: aload_3\n-       136: invokevirtual #169                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-       139: invokevirtual #164                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-       142: invokevirtual #170                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+       136: invokevirtual #174                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       139: invokevirtual #169                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+       142: invokevirtual #175                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n        145: goto          168\n        148: iload         4\n        150: ifeq          168\n        153: aload_3\n-       154: new           #166                // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+       154: new           #171                // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n        157: dup\n        158: aload_1\n        159: invokevirtual #63                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-       162: invokespecial #167                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-       165: invokevirtual #171                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+       162: invokespecial #172                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+       165: invokevirtual #176                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n        168: iload         6\n        170: ifeq          184\n        173: aload_1\n        174: aload_3\n-       175: invokevirtual #172                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-       178: invokevirtual #164                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-       181: invokevirtual #173                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n+       175: invokevirtual #177                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       178: invokevirtual #169                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+       181: invokevirtual #178                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n        184: return\n       LineNumberTable:\n         line 750: 0\n         line 752: 4\n         line 753: 11\n         line 754: 15\n         line 755: 33\n@@ -2575,64 +2581,64 @@\n \n   private void positionAtCentralDirectory() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=1\n          0: aload_0\n-         1: invokespecial #174                // Method positionAtEndOfCentralDirectoryRecord:()V\n+         1: invokespecial #179                // Method positionAtEndOfCentralDirectoryRecord:()V\n          4: iconst_0\n          5: istore_1\n          6: aload_0\n          7: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        10: invokeinterface #175,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n-        15: ldc2_w        #176                // long 20l\n+        10: invokeinterface #180,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        15: ldc2_w        #181                // long 20l\n         18: lcmp\n         19: ifle          26\n         22: iconst_1\n         23: goto          27\n         26: iconst_0\n         27: istore_2\n         28: iload_2\n         29: ifeq          85\n         32: aload_0\n         33: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         36: aload_0\n         37: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        40: invokeinterface #175,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n-        45: ldc2_w        #176                // long 20l\n+        40: invokeinterface #180,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        45: ldc2_w        #181                // long 20l\n         48: lsub\n-        49: invokeinterface #178,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        49: invokeinterface #183,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         54: pop\n         55: aload_0\n         56: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        59: invokevirtual #115                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+        59: invokevirtual #120                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         62: pop\n         63: aload_0\n         64: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         67: aload_0\n         68: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        71: invokestatic  #116                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-        74: getstatic     #179                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n+        71: invokestatic  #121                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        74: getstatic     #184                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n         77: aload_0\n         78: getfield      #28                 // Field wordBuf:[B\n-        81: invokestatic  #180                // Method java/util/Arrays.equals:([B[B)Z\n+        81: invokestatic  #185                // Method java/util/Arrays.equals:([B[B)Z\n         84: istore_1\n         85: iload_1\n         86: ifne          106\n         89: iload_2\n         90: ifeq          99\n         93: aload_0\n         94: bipush        16\n-        96: invokespecial #181                // Method skipBytes:(I)V\n+        96: invokespecial #186                // Method skipBytes:(I)V\n         99: aload_0\n-       100: invokespecial #182                // Method positionAtCentralDirectory32:()V\n+       100: invokespecial #187                // Method positionAtCentralDirectory32:()V\n        103: goto          110\n        106: aload_0\n-       107: invokespecial #183                // Method positionAtCentralDirectory64:()V\n+       107: invokespecial #188                // Method positionAtCentralDirectory64:()V\n        110: return\n       LineNumberTable:\n         line 881: 0\n         line 882: 4\n         line 883: 6\n         line 884: 10\n         line 885: 28\n@@ -2669,68 +2675,68 @@\n   private void positionAtCentralDirectory64() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: iconst_4\n-         2: invokespecial #181                // Method skipBytes:(I)V\n+         2: invokespecial #186                // Method skipBytes:(I)V\n          5: aload_0\n          6: getfield      #32                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-         9: invokevirtual #115                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+         9: invokevirtual #120                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         12: pop\n         13: aload_0\n         14: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         17: aload_0\n         18: getfield      #32                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-        21: invokestatic  #116                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        21: invokestatic  #121                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         24: aload_0\n         25: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         28: aload_0\n         29: getfield      #27                 // Field dwordBuf:[B\n-        32: invokestatic  #184                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n-        35: invokeinterface #178,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        32: invokestatic  #189                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+        35: invokeinterface #183,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         40: pop\n         41: aload_0\n         42: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        45: invokevirtual #115                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+        45: invokevirtual #120                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         48: pop\n         49: aload_0\n         50: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         53: aload_0\n         54: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        57: invokestatic  #116                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        57: invokestatic  #121                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         60: aload_0\n         61: getfield      #28                 // Field wordBuf:[B\n-        64: getstatic     #185                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n-        67: invokestatic  #180                // Method java/util/Arrays.equals:([B[B)Z\n+        64: getstatic     #190                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n+        67: invokestatic  #185                // Method java/util/Arrays.equals:([B[B)Z\n         70: ifne          83\n         73: new           #98                 // class java/util/zip/ZipException\n         76: dup\n-        77: ldc           #186                // String archive\\'s ZIP64 end of central directory locator is corrupt.\n-        79: invokespecial #100                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        77: ldc           #191                // String archive\\'s ZIP64 end of central directory locator is corrupt.\n+        79: invokespecial #105                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n         82: athrow\n         83: aload_0\n         84: bipush        44\n-        86: invokespecial #181                // Method skipBytes:(I)V\n+        86: invokespecial #186                // Method skipBytes:(I)V\n         89: aload_0\n         90: getfield      #32                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-        93: invokevirtual #115                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+        93: invokevirtual #120                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         96: pop\n         97: aload_0\n         98: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        101: aload_0\n        102: getfield      #32                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-       105: invokestatic  #116                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       105: invokestatic  #121                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        108: aload_0\n        109: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        112: aload_0\n        113: getfield      #27                 // Field dwordBuf:[B\n-       116: invokestatic  #184                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n-       119: invokeinterface #178,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+       116: invokestatic  #189                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+       119: invokeinterface #183,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n        124: pop\n        125: return\n       LineNumberTable:\n         line 914: 0\n         line 916: 5\n         line 917: 13\n         line 918: 24\n@@ -2755,30 +2761,30 @@\n   private void positionAtCentralDirectory32() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: bipush        16\n-         3: invokespecial #181                // Method skipBytes:(I)V\n+         3: invokespecial #186                // Method skipBytes:(I)V\n          6: aload_0\n          7: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        10: invokevirtual #115                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+        10: invokevirtual #120                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         13: pop\n         14: aload_0\n         15: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         18: aload_0\n         19: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        22: invokestatic  #116                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        22: invokestatic  #121                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         25: aload_0\n         26: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         29: aload_0\n         30: getfield      #28                 // Field wordBuf:[B\n-        33: invokestatic  #117                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-        36: invokeinterface #178,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        33: invokestatic  #122                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+        36: invokeinterface #183,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         41: pop\n         42: return\n       LineNumberTable:\n         line 941: 0\n         line 942: 6\n         line 943: 14\n         line 944: 25\n@@ -2791,25 +2797,25 @@\n \n   private void positionAtEndOfCentralDirectoryRecord() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=2, args_size=1\n          0: aload_0\n-         1: ldc2_w        #187                // long 22l\n-         4: ldc2_w        #189                // long 65557l\n-         7: getstatic     #191                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n-        10: invokespecial #192                // Method tryToLocateSignature:(JJ[B)Z\n+         1: ldc2_w        #192                // long 22l\n+         4: ldc2_w        #194                // long 65557l\n+         7: getstatic     #196                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+        10: invokespecial #197                // Method tryToLocateSignature:(JJ[B)Z\n         13: istore_1\n         14: iload_1\n         15: ifne          28\n         18: new           #98                 // class java/util/zip/ZipException\n         21: dup\n-        22: ldc           #193                // String archive is not a ZIP archive\n-        24: invokespecial #100                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        22: ldc           #198                // String archive is not a ZIP archive\n+        24: invokespecial #105                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n         27: athrow\n         28: return\n       LineNumberTable:\n         line 953: 0\n         line 955: 14\n         line 956: 18\n         line 958: 28\n@@ -2829,85 +2835,85 @@\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=12, args_size=4\n          0: iconst_0\n          1: istore        6\n          3: aload_0\n          4: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         7: invokeinterface #194,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+         7: invokeinterface #199,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n         12: lload_1\n         13: lsub\n         14: lstore        7\n         16: lconst_0\n         17: aload_0\n         18: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        21: invokeinterface #194,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+        21: invokeinterface #199,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n         26: lload_3\n         27: lsub\n-        28: invokestatic  #195                // Method java/lang/Math.max:(JJ)J\n+        28: invokestatic  #200                // Method java/lang/Math.max:(JJ)J\n         31: lstore        9\n         33: lload         7\n         35: lconst_0\n         36: lcmp\n         37: iflt          182\n         40: lload         7\n         42: lload         9\n         44: lcmp\n         45: iflt          182\n         48: aload_0\n         49: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         52: lload         7\n-        54: invokeinterface #178,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        54: invokeinterface #183,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         59: pop\n         60: aload_0\n         61: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        64: invokevirtual #115                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+        64: invokevirtual #120                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         67: pop\n         68: aload_0\n         69: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         72: aload_0\n         73: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        76: invokestatic  #116                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        76: invokestatic  #121                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         79: aload_0\n         80: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        83: invokevirtual #196                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+        83: invokevirtual #201                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         86: pop\n         87: goto          95\n         90: astore        11\n         92: goto          182\n         95: aload_0\n         96: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        99: invokevirtual #198                // Method java/nio/ByteBuffer.get:()B\n+        99: invokevirtual #203                // Method java/nio/ByteBuffer.get:()B\n        102: istore        11\n        104: iload         11\n        106: aload         5\n        108: iconst_0\n        109: baload\n        110: if_icmpne     173\n        113: aload_0\n        114: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       117: invokevirtual #198                // Method java/nio/ByteBuffer.get:()B\n+       117: invokevirtual #203                // Method java/nio/ByteBuffer.get:()B\n        120: istore        11\n        122: iload         11\n        124: aload         5\n        126: iconst_1\n        127: baload\n        128: if_icmpne     173\n        131: aload_0\n        132: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       135: invokevirtual #198                // Method java/nio/ByteBuffer.get:()B\n+       135: invokevirtual #203                // Method java/nio/ByteBuffer.get:()B\n        138: istore        11\n        140: iload         11\n        142: aload         5\n        144: iconst_2\n        145: baload\n        146: if_icmpne     173\n        149: aload_0\n        150: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       153: invokevirtual #198                // Method java/nio/ByteBuffer.get:()B\n+       153: invokevirtual #203                // Method java/nio/ByteBuffer.get:()B\n        156: istore        11\n        158: iload         11\n        160: aload         5\n        162: iconst_3\n        163: baload\n        164: if_icmpne     173\n        167: iconst_1\n@@ -2919,15 +2925,15 @@\n        177: lstore        7\n        179: goto          40\n        182: iload         6\n        184: ifeq          199\n        187: aload_0\n        188: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        191: lload         7\n-       193: invokeinterface #178,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+       193: invokeinterface #183,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n        198: pop\n        199: iload         6\n        201: ireturn\n       Exception table:\n          from    to  target type\n             60    87    90   Class java/io/EOFException\n       LineNumberTable:\n@@ -2986,35 +2992,35 @@\n   private void skipBytes(int) throws java.io.IOException;\n     descriptor: (I)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=6, args_size=2\n          0: aload_0\n          1: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         4: invokeinterface #175,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+         4: invokeinterface #180,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n          9: lstore_2\n         10: lload_2\n         11: iload_1\n         12: i2l\n         13: ladd\n         14: lstore        4\n         16: lload         4\n         18: aload_0\n         19: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        22: invokeinterface #194,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+        22: invokeinterface #199,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n         27: lcmp\n         28: ifle          39\n-        31: new           #197                // class java/io/EOFException\n+        31: new           #202                // class java/io/EOFException\n         34: dup\n-        35: invokespecial #199                // Method java/io/EOFException.\"<init>\":()V\n+        35: invokespecial #204                // Method java/io/EOFException.\"<init>\":()V\n         38: athrow\n         39: aload_0\n         40: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         43: lload         4\n-        45: invokeinterface #178,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        45: invokeinterface #183,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         50: pop\n         51: return\n       LineNumberTable:\n         line 1009: 0\n         line 1010: 10\n         line 1011: 16\n         line 1012: 31\n@@ -3036,118 +3042,118 @@\n   private void resolveLocalFileHeaderData(java.util.Map<org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment>) throws java.io.IOException;\n     descriptor: (Ljava/util/Map;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=12, args_size=2\n          0: aload_0\n          1: getfield      #22                 // Field entries:Ljava/util/List;\n-         4: invokeinterface #200,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n+         4: invokeinterface #205,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n          9: astore_2\n         10: aload_2\n-        11: invokeinterface #201,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n+        11: invokeinterface #206,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n         16: ifeq          291\n         19: aload_2\n-        20: invokeinterface #202,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        20: invokeinterface #207,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n         25: checkcast     #49                 // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n         28: astore_3\n         29: aload_3\n         30: checkcast     #61                 // class org/apache/commons/compress/archivers/zip/ZipFile$Entry\n         33: astore        4\n         35: aload         4\n-        37: invokevirtual #203                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.getLocalHeaderOffset:()J\n+        37: invokevirtual #208                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.getLocalHeaderOffset:()J\n         40: lstore        5\n         42: aload_0\n         43: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         46: lload         5\n-        48: ldc2_w        #204                // long 26l\n+        48: ldc2_w        #209                // long 26l\n         51: ladd\n-        52: invokeinterface #178,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        52: invokeinterface #183,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         57: pop\n         58: aload_0\n         59: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        62: invokevirtual #115                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+        62: invokevirtual #120                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         65: pop\n         66: aload_0\n         67: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         70: aload_0\n         71: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        74: invokestatic  #116                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        74: invokestatic  #121                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         77: aload_0\n         78: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        81: invokevirtual #196                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+        81: invokevirtual #201                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         84: pop\n         85: aload_0\n         86: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n         89: aload_0\n         90: getfield      #30                 // Field shortBuf:[B\n-        93: invokevirtual #206                // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n+        93: invokevirtual #211                // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n         96: pop\n         97: aload_0\n         98: getfield      #30                 // Field shortBuf:[B\n-       101: invokestatic  #207                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+       101: invokestatic  #212                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n        104: istore        7\n        106: aload_0\n        107: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n        110: aload_0\n        111: getfield      #30                 // Field shortBuf:[B\n-       114: invokevirtual #206                // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n+       114: invokevirtual #211                // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n        117: pop\n        118: aload_0\n        119: getfield      #30                 // Field shortBuf:[B\n-       122: invokestatic  #207                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+       122: invokestatic  #212                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n        125: istore        8\n        127: aload_0\n        128: iload         7\n-       130: invokespecial #181                // Method skipBytes:(I)V\n+       130: invokespecial #186                // Method skipBytes:(I)V\n        133: iload         8\n        135: newarray       byte\n        137: astore        9\n        139: aload_0\n        140: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        143: aload         9\n        145: invokestatic  #31                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-       148: invokestatic  #116                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       148: invokestatic  #121                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        151: aload         4\n        153: aload         9\n-       155: invokevirtual #208                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V\n+       155: invokevirtual #213                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V\n        158: aload         4\n        160: lload         5\n-       162: ldc2_w        #204                // long 26l\n+       162: ldc2_w        #209                // long 26l\n        165: ladd\n-       166: ldc2_w        #209                // long 2l\n+       166: ldc2_w        #214                // long 2l\n        169: ladd\n-       170: ldc2_w        #209                // long 2l\n+       170: ldc2_w        #214                // long 2l\n        173: ladd\n        174: iload         7\n        176: i2l\n        177: ladd\n        178: iload         8\n        180: i2l\n        181: ladd\n-       182: invokevirtual #211                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDataOffset:(J)V\n+       182: invokevirtual #216                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDataOffset:(J)V\n        185: aload         4\n        187: iconst_1\n-       188: invokevirtual #212                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V\n+       188: invokevirtual #217                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V\n        191: aload_1\n        192: aload         4\n        194: invokeinterface #58,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z\n        199: ifeq          230\n        202: aload_1\n        203: aload         4\n        205: invokeinterface #54,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-       210: checkcast     #151                // class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n+       210: checkcast     #156                // class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n        213: astore        10\n        215: aload         4\n        217: aload         10\n-       219: invokestatic  #213                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+       219: invokestatic  #218                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n        222: aload         10\n-       224: invokestatic  #214                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-       227: invokestatic  #215                // Method org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+       224: invokestatic  #219                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+       227: invokestatic  #220                // Method org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n        230: aload         4\n-       232: invokevirtual #216                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.getName:()Ljava/lang/String;\n+       232: invokevirtual #221                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.getName:()Ljava/lang/String;\n        235: astore        10\n        237: aload_0\n        238: getfield      #25                 // Field nameMap:Ljava/util/Map;\n        241: aload         10\n        243: invokeinterface #54,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n        248: checkcast     #20                 // class java/util/LinkedList\n        251: astore        11\n@@ -3157,19 +3163,19 @@\n        261: dup\n        262: invokespecial #21                 // Method java/util/LinkedList.\"<init>\":()V\n        265: astore        11\n        267: aload_0\n        268: getfield      #25                 // Field nameMap:Ljava/util/Map;\n        271: aload         10\n        273: aload         11\n-       275: invokeinterface #153,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+       275: invokeinterface #158,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n        280: pop\n        281: aload         11\n        283: aload         4\n-       285: invokevirtual #217                // Method java/util/LinkedList.addLast:(Ljava/lang/Object;)V\n+       285: invokevirtual #222                // Method java/util/LinkedList.addLast:(Ljava/lang/Object;)V\n        288: goto          10\n        291: return\n       LineNumberTable:\n         line 1042: 0\n         line 1045: 29\n         line 1046: 35\n         line 1047: 42\n@@ -3229,39 +3235,39 @@\n           locals = [ class java/lang/String, class java/util/LinkedList ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 9\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class java/util/Map ]\n           stack = []\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #400                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n+    Signature: #404                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n \n   private boolean startsWithLocalFileHeader() throws java.io.IOException;\n     descriptor: ()Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n          4: lconst_0\n-         5: invokeinterface #178,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+         5: invokeinterface #183,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         10: pop\n         11: aload_0\n         12: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        15: invokevirtual #115                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+        15: invokevirtual #120                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         18: pop\n         19: aload_0\n         20: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         23: aload_0\n         24: getfield      #33                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        27: invokestatic  #116                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        27: invokestatic  #121                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         30: aload_0\n         31: getfield      #28                 // Field wordBuf:[B\n-        34: getstatic     #218                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n-        37: invokestatic  #180                // Method java/util/Arrays.equals:([B[B)Z\n+        34: getstatic     #223                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+        37: invokestatic  #185                // Method java/util/Arrays.equals:([B[B)Z\n         40: ireturn\n       LineNumberTable:\n         line 1084: 0\n         line 1085: 11\n         line 1086: 19\n         line 1087: 30\n       LocalVariableTable:\n@@ -3273,29 +3279,29 @@\n   private org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream createBoundedInputStream(long, long);\n     descriptor: (JJ)Lorg/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=5, args_size=3\n          0: aload_0\n          1: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         4: instanceof    #219                // class java/nio/channels/FileChannel\n+         4: instanceof    #224                // class java/nio/channels/FileChannel\n          7: ifeq          23\n-        10: new           #220                // class org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n+        10: new           #225                // class org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n         13: dup\n         14: aload_0\n         15: lload_1\n         16: lload_3\n-        17: invokespecial #221                // Method org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+        17: invokespecial #226                // Method org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n         20: goto          33\n-        23: new           #222                // class org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n+        23: new           #227                // class org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n         26: dup\n         27: aload_0\n         28: lload_1\n         29: lload_3\n-        30: invokespecial #223                // Method org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+        30: invokespecial #228                // Method org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n         33: areturn\n       LineNumberTable:\n         line 1095: 0\n         line 1096: 10\n         line 1097: 23\n         line 1095: 33\n       LocalVariableTable:\n@@ -3326,35 +3332,27 @@\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=2, locals=0, args_size=0\n          0: iconst_1\n          1: newarray       byte\n          3: putstatic     #90                 // Field ONE_ZERO_BYTE:[B\n-         6: getstatic     #224                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n-         9: invokestatic  #117                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-        12: putstatic     #118                // Field CFH_SIG:J\n+         6: getstatic     #229                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n+         9: invokestatic  #122                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+        12: putstatic     #123                // Field CFH_SIG:J\n         15: return\n       LineNumberTable:\n         line 95: 0\n         line 600: 6\n         line 601: 9\n         line 600: 15\n }\n SourceFile: \"ZipFile.java\"\n InnerClasses:\n-  static #227;                            // class org/apache/commons/compress/archivers/zip/ZipFile$3\n-  private static #229= #61 of #1;         // Entry=class org/apache/commons/compress/archivers/zip/ZipFile$Entry of class org/apache/commons/compress/archivers/zip/ZipFile\n-  private static final #230= #151 of #1;  // NameAndComment=class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment of class org/apache/commons/compress/archivers/zip/ZipFile\n-  private #231= #220 of #1;               // BoundedFileChannelInputStream=class org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream of class org/apache/commons/compress/archivers/zip/ZipFile\n-  private #232= #222 of #1;               // BoundedInputStream=class org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream of class org/apache/commons/compress/archivers/zip/ZipFile\n+  static #232;                            // class org/apache/commons/compress/archivers/zip/ZipFile$3\n+  private static #234= #61 of #1;         // Entry=class org/apache/commons/compress/archivers/zip/ZipFile$Entry of class org/apache/commons/compress/archivers/zip/ZipFile\n+  private static final #235= #156 of #1;  // NameAndComment=class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment of class org/apache/commons/compress/archivers/zip/ZipFile\n+  private #236= #225 of #1;               // BoundedFileChannelInputStream=class org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream of class org/apache/commons/compress/archivers/zip/ZipFile\n+  private #237= #227 of #1;               // BoundedInputStream=class org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream of class org/apache/commons/compress/archivers/zip/ZipFile\n   #35;                                    // class org/apache/commons/compress/archivers/zip/ZipFile$2\n   #87;                                    // class org/apache/commons/compress/archivers/zip/ZipFile$1\n-  public static final #777= #584 of #49;  // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  public static final #851= #850 of #853; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n-BootstrapMethods:\n-  0: #550 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-    Method arguments:\n-      #551 Found unsupported compression method \\u0001\n-  1: #550 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-    Method arguments:\n-      #561 Cleaning up unclosed ZipFile for archive \\u0001\n+  public static final #778= #588 of #49;  // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n"}]}
