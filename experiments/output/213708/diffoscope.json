{"diffoscope-json-version": 1, "source1": "first/Threader.class", "source2": "second/Threader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,249 +5,246 @@\n import java.util.Map;\n import java.util.Iterator;\n import java.util.HashMap;\n import java.util.List;\n \n public class Threader\n {\n-    public Threadable thread(final List<? extends Threadable> messages) {\n-        return this.thread((Iterable<? extends Threadable>)messages);\n+    public Threadable thread(final List<? extends Threadable> list) {\n+        return this.thread((Iterable<? extends Threadable>)list);\n     }\n     \n-    public Threadable thread(final Iterable<? extends Threadable> messages) {\n-        if (messages == null) {\n+    public Threadable thread(final Iterable<? extends Threadable> iterable) {\n+        if (iterable == null) {\n             return null;\n         }\n-        HashMap<String, ThreadContainer> idTable = new HashMap<String, ThreadContainer>();\n-        for (final Threadable t : messages) {\n-            if (!t.isDummy()) {\n-                this.buildContainer(t, idTable);\n+        final HashMap hashMap = new HashMap();\n+        for (final Threadable threadable : iterable) {\n+            if (!threadable.isDummy()) {\n+                this.buildContainer(threadable, hashMap);\n             }\n         }\n-        if (idTable.isEmpty()) {\n+        if (hashMap.isEmpty()) {\n             return null;\n         }\n-        final ThreadContainer root = this.findRootSet(idTable);\n-        idTable.clear();\n-        idTable = null;\n-        this.pruneEmptyContainers(root);\n-        root.reverseChildren();\n-        this.gatherSubjects(root);\n-        if (root.next != null) {\n-            throw new RuntimeException(\"root node has a next:\" + root);\n-        }\n-        for (ThreadContainer r = root.child; r != null; r = r.next) {\n-            if (r.threadable == null) {\n-                r.threadable = r.child.threadable.makeDummy();\n-            }\n-        }\n-        final Threadable result = (root.child == null) ? null : root.child.threadable;\n-        root.flush();\n-        return result;\n-    }\n-    \n-    private void buildContainer(final Threadable threadable, final HashMap<String, ThreadContainer> idTable) {\n-        String id = threadable.messageThreadId();\n-        ThreadContainer container = (ThreadContainer)idTable.get(id);\n-        int bogusIdCount = 0;\n-        if (container != null) {\n-            if (container.threadable != null) {\n-                ++bogusIdCount;\n-                id = \"<Bogus-id:\" + bogusIdCount + \">\";\n-                container = null;\n+        final ThreadContainer rootSet = this.findRootSet(hashMap);\n+        hashMap.clear();\n+        this.pruneEmptyContainers(rootSet);\n+        rootSet.reverseChildren();\n+        this.gatherSubjects(rootSet);\n+        if (rootSet.next != null) {\n+            throw new RuntimeException(\"root node has a next:\" + rootSet);\n+        }\n+        for (ThreadContainer threadContainer = rootSet.child; threadContainer != null; threadContainer = threadContainer.next) {\n+            if (threadContainer.threadable == null) {\n+                threadContainer.threadable = threadContainer.child.threadable.makeDummy();\n+            }\n+        }\n+        final Threadable threadable2 = (rootSet.child == null) ? null : rootSet.child.threadable;\n+        rootSet.flush();\n+        return threadable2;\n+    }\n+    \n+    private void buildContainer(final Threadable threadable, final HashMap<String, ThreadContainer> hashMap) {\n+        String s = threadable.messageThreadId();\n+        ThreadContainer child = (ThreadContainer)hashMap.get(s);\n+        int i = 0;\n+        if (child != null) {\n+            if (child.threadable != null) {\n+                ++i;\n+                s = \"<Bogus-id:\" + i + \">\";\n+                child = null;\n             }\n             else {\n-                container.threadable = threadable;\n+                child.threadable = threadable;\n             }\n         }\n-        if (container == null) {\n-            container = new ThreadContainer();\n-            container.threadable = threadable;\n-            idTable.put(id, container);\n-        }\n-        ThreadContainer parentRef = null;\n-        final String[] messageThreadReferences;\n-        final String[] references = messageThreadReferences = threadable.messageThreadReferences();\n-        for (final String refString : messageThreadReferences) {\n-            ThreadContainer ref = (ThreadContainer)idTable.get(refString);\n-            if (ref == null) {\n-                ref = new ThreadContainer();\n-                idTable.put(refString, ref);\n-            }\n-            if (parentRef != null && ref.parent == null && parentRef != ref && !ref.findChild(parentRef)) {\n-                ref.parent = parentRef;\n-                ref.next = parentRef.child;\n-                parentRef.child = ref;\n-            }\n-            parentRef = ref;\n-        }\n-        if (parentRef != null && (parentRef == container || container.findChild(parentRef))) {\n-            parentRef = null;\n-        }\n-        if (container.parent != null) {\n-            ThreadContainer prev = null;\n-            ThreadContainer rest;\n-            for (rest = container.parent.child; rest != null && rest != container; rest = rest.next) {\n-                prev = rest;\n+        if (child == null) {\n+            child = new ThreadContainer();\n+            child.threadable = threadable;\n+            hashMap.put(s, child);\n+        }\n+        ThreadContainer threadContainer = null;\n+        for (final String s2 : threadable.messageThreadReferences()) {\n+            ThreadContainer threadContainer2 = (ThreadContainer)hashMap.get(s2);\n+            if (threadContainer2 == null) {\n+                threadContainer2 = new ThreadContainer();\n+                hashMap.put(s2, threadContainer2);\n+            }\n+            if (threadContainer != null && threadContainer2.parent == null && threadContainer != threadContainer2 && !threadContainer2.findChild(threadContainer)) {\n+                threadContainer2.parent = threadContainer;\n+                threadContainer2.next = threadContainer.child;\n+                threadContainer.child = threadContainer2;\n+            }\n+            threadContainer = threadContainer2;\n+        }\n+        if (threadContainer != null && (threadContainer == child || child.findChild(threadContainer))) {\n+            threadContainer = null;\n+        }\n+        if (child.parent != null) {\n+            ThreadContainer threadContainer3 = null;\n+            ThreadContainer threadContainer4;\n+            for (threadContainer4 = child.parent.child; threadContainer4 != null && threadContainer4 != child; threadContainer4 = threadContainer4.next) {\n+                threadContainer3 = threadContainer4;\n             }\n-            if (rest == null) {\n-                throw new RuntimeException(\"Didnt find \" + container + \" in parent\" + container.parent);\n+            if (threadContainer4 == null) {\n+                throw new RuntimeException(\"Didnt find \" + child + \" in parent\" + child.parent);\n             }\n-            if (prev == null) {\n-                container.parent.child = container.next;\n+            if (threadContainer3 == null) {\n+                child.parent.child = child.next;\n             }\n             else {\n-                prev.next = container.next;\n+                threadContainer3.next = child.next;\n             }\n-            container.next = null;\n-            container.parent = null;\n+            child.next = null;\n+            child.parent = null;\n         }\n-        if (parentRef != null) {\n-            container.parent = parentRef;\n-            container.next = parentRef.child;\n-            parentRef.child = container;\n+        if (threadContainer != null) {\n+            child.parent = threadContainer;\n+            child.next = threadContainer.child;\n+            threadContainer.child = child;\n         }\n     }\n     \n-    private ThreadContainer findRootSet(final HashMap<String, ThreadContainer> idTable) {\n-        final ThreadContainer root = new ThreadContainer();\n-        for (final Map.Entry<String, ThreadContainer> entry : idTable.entrySet()) {\n-            final ThreadContainer c = (ThreadContainer)entry.getValue();\n-            if (c.parent == null) {\n-                if (c.next != null) {\n-                    throw new RuntimeException(\"c.next is \" + c.next.toString());\n+    private ThreadContainer findRootSet(final HashMap<String, ThreadContainer> hashMap) {\n+        final ThreadContainer threadContainer = new ThreadContainer();\n+        final Iterator<Map.Entry<String, ThreadContainer>> iterator = hashMap.entrySet().iterator();\n+        while (iterator.hasNext()) {\n+            final ThreadContainer child = (ThreadContainer)((Map.Entry<K, ThreadContainer>)iterator.next()).getValue();\n+            if (child.parent == null) {\n+                if (child.next != null) {\n+                    throw new RuntimeException(\"c.next is \" + child.next.toString());\n                 }\n-                c.next = root.child;\n-                root.child = c;\n+                child.next = threadContainer.child;\n+                threadContainer.child = child;\n             }\n         }\n-        return root;\n+        return threadContainer;\n     }\n     \n-    private void pruneEmptyContainers(final ThreadContainer parent) {\n-        ThreadContainer prev = null;\n-        for (ThreadContainer container = parent.child, next = container.next; container != null; container = next, next = ((container == null) ? null : container.next)) {\n-            if (container.threadable == null && container.child == null) {\n-                if (prev == null) {\n-                    parent.child = container.next;\n+    private void pruneEmptyContainers(final ThreadContainer threadContainer) {\n+        ThreadContainer threadContainer2 = null;\n+        for (ThreadContainer child = threadContainer.child, next = child.next; child != null; child = next, next = ((child == null) ? null : child.next)) {\n+            if (child.threadable == null && child.child == null) {\n+                if (threadContainer2 == null) {\n+                    threadContainer.child = child.next;\n                 }\n                 else {\n-                    prev.next = container.next;\n+                    threadContainer2.next = child.next;\n                 }\n-                container = prev;\n+                child = threadContainer2;\n             }\n-            else if (container.threadable == null && container.child != null && (container.parent != null || container.child.next == null)) {\n-                final ThreadContainer kids = container.child;\n-                if (prev == null) {\n-                    parent.child = kids;\n+            else if (child.threadable == null && child.child != null && (child.parent != null || child.child.next == null)) {\n+                final ThreadContainer child2 = child.child;\n+                if (threadContainer2 == null) {\n+                    threadContainer.child = child2;\n                 }\n                 else {\n-                    prev.next = kids;\n+                    threadContainer2.next = child2;\n                 }\n-                ThreadContainer tail;\n-                for (tail = kids; tail.next != null; tail = tail.next) {\n-                    tail.parent = container.parent;\n+                ThreadContainer next2;\n+                for (next2 = child2; next2.next != null; next2 = next2.next) {\n+                    next2.parent = child.parent;\n                 }\n-                tail.parent = container.parent;\n-                tail.next = container.next;\n-                next = kids;\n-                container = prev;\n+                next2.parent = child.parent;\n+                next2.next = child.next;\n+                next = child2;\n+                child = threadContainer2;\n             }\n-            else if (container.child != null) {\n-                this.pruneEmptyContainers(container);\n+            else if (child.child != null) {\n+                this.pruneEmptyContainers(child);\n             }\n-            prev = container;\n+            threadContainer2 = child;\n         }\n     }\n     \n-    private void gatherSubjects(final ThreadContainer root) {\n-        int count = 0;\n-        for (ThreadContainer c = root.child; c != null; c = c.next) {\n-            ++count;\n+    private void gatherSubjects(final ThreadContainer threadContainer) {\n+        int n = 0;\n+        for (ThreadContainer threadContainer2 = threadContainer.child; threadContainer2 != null; threadContainer2 = threadContainer2.next) {\n+            ++n;\n         }\n-        HashMap<String, ThreadContainer> subjectTable = new HashMap<String, ThreadContainer>((int)(count * 1.2), 0.9f);\n-        count = 0;\n-        for (ThreadContainer c2 = root.child; c2 != null; c2 = c2.next) {\n-            Threadable threadable = c2.threadable;\n+        final HashMap hashMap = new HashMap<String, ThreadContainer>((int)(n * 1.2), 0.9f);\n+        int n2 = 0;\n+        for (ThreadContainer value = threadContainer.child; value != null; value = value.next) {\n+            Threadable threadable = value.threadable;\n             if (threadable == null) {\n-                threadable = c2.child.threadable;\n+                threadable = value.child.threadable;\n             }\n-            final String subj = threadable.simplifiedSubject();\n-            if (subj != null) {\n-                if (subj.length() != 0) {\n-                    final ThreadContainer old = (ThreadContainer)subjectTable.get(subj);\n-                    if (old == null || (c2.threadable == null && old.threadable != null) || (old.threadable != null && old.threadable.subjectIsReply() && c2.threadable != null && !c2.threadable.subjectIsReply())) {\n-                        subjectTable.put(subj, c2);\n-                        ++count;\n+            final String simplifiedSubject = threadable.simplifiedSubject();\n+            if (simplifiedSubject != null) {\n+                if (simplifiedSubject.length() != 0) {\n+                    final ThreadContainer threadContainer3 = (ThreadContainer)hashMap.get(simplifiedSubject);\n+                    if (threadContainer3 == null || (value.threadable == null && threadContainer3.threadable != null) || (threadContainer3.threadable != null && threadContainer3.threadable.subjectIsReply() && value.threadable != null && !value.threadable.subjectIsReply())) {\n+                        hashMap.put(simplifiedSubject, value);\n+                        ++n2;\n                     }\n                 }\n             }\n         }\n-        if (count == 0) {\n+        if (n2 == 0) {\n             return;\n         }\n-        ThreadContainer prev = null;\n-        for (ThreadContainer c3 = root.child, rest = c3.next; c3 != null; c3 = rest, rest = ((rest == null) ? null : rest.next)) {\n-            Threadable threadable2 = c3.threadable;\n+        ThreadContainer threadContainer4 = null;\n+        for (ThreadContainer child = threadContainer.child, next = child.next; child != null; child = next, next = ((next == null) ? null : next.next)) {\n+            Threadable threadable2 = child.threadable;\n             if (threadable2 == null) {\n-                threadable2 = c3.child.threadable;\n+                threadable2 = child.child.threadable;\n             }\n-            final String subj2 = threadable2.simplifiedSubject();\n-            if (subj2 != null) {\n-                if (subj2.length() != 0) {\n-                    final ThreadContainer old2 = (ThreadContainer)subjectTable.get(subj2);\n-                    if (old2 != c3) {\n-                        if (prev == null) {\n-                            root.child = c3.next;\n+            final String simplifiedSubject2 = threadable2.simplifiedSubject();\n+            if (simplifiedSubject2 != null) {\n+                if (simplifiedSubject2.length() != 0) {\n+                    final ThreadContainer threadContainer5 = (ThreadContainer)hashMap.get(simplifiedSubject2);\n+                    if (threadContainer5 != child) {\n+                        if (threadContainer4 == null) {\n+                            threadContainer.child = child.next;\n                         }\n                         else {\n-                            prev.next = c3.next;\n+                            threadContainer4.next = child.next;\n                         }\n-                        c3.next = null;\n-                        if (old2.threadable == null && c3.threadable == null) {\n-                            ThreadContainer tail;\n-                            for (tail = old2.child; tail != null && tail.next != null; tail = tail.next) {}\n-                            if (tail != null) {\n-                                tail.next = c3.child;\n+                        child.next = null;\n+                        if (threadContainer5.threadable == null && child.threadable == null) {\n+                            ThreadContainer threadContainer6;\n+                            for (threadContainer6 = threadContainer5.child; threadContainer6 != null && threadContainer6.next != null; threadContainer6 = threadContainer6.next) {}\n+                            if (threadContainer6 != null) {\n+                                threadContainer6.next = child.child;\n                             }\n-                            for (tail = c3.child; tail != null; tail = tail.next) {\n-                                tail.parent = old2;\n+                            for (ThreadContainer threadContainer7 = child.child; threadContainer7 != null; threadContainer7 = threadContainer7.next) {\n+                                threadContainer7.parent = threadContainer5;\n                             }\n-                            c3.child = null;\n+                            child.child = null;\n                         }\n-                        else if (old2.threadable == null || (c3.threadable != null && c3.threadable.subjectIsReply() && !old2.threadable.subjectIsReply())) {\n-                            c3.parent = old2;\n-                            c3.next = old2.child;\n-                            old2.child = c3;\n+                        else if (threadContainer5.threadable == null || (child.threadable != null && child.threadable.subjectIsReply() && !threadContainer5.threadable.subjectIsReply())) {\n+                            child.parent = threadContainer5;\n+                            child.next = threadContainer5.child;\n+                            threadContainer5.child = child;\n                         }\n                         else {\n-                            final ThreadContainer newc = new ThreadContainer();\n-                            newc.threadable = old2.threadable;\n-                            newc.child = old2.child;\n-                            for (ThreadContainer tail2 = newc.child; tail2 != null; tail2 = tail2.next) {\n-                                tail2.parent = newc;\n+                            final ThreadContainer threadContainer8 = new ThreadContainer();\n+                            threadContainer8.threadable = threadContainer5.threadable;\n+                            threadContainer8.child = threadContainer5.child;\n+                            for (ThreadContainer threadContainer9 = threadContainer8.child; threadContainer9 != null; threadContainer9 = threadContainer9.next) {\n+                                threadContainer9.parent = threadContainer8;\n                             }\n-                            old2.threadable = null;\n-                            old2.child = null;\n-                            c3.parent = old2;\n-                            newc.parent = old2;\n-                            old2.child = c3;\n-                            c3.next = newc;\n+                            threadContainer5.threadable = null;\n+                            threadContainer5.child = null;\n+                            child.parent = threadContainer5;\n+                            threadContainer8.parent = threadContainer5;\n+                            threadContainer5.child = child;\n+                            child.next = threadContainer8;\n                         }\n-                        c3 = prev;\n+                        child = threadContainer4;\n                     }\n                 }\n             }\n-            prev = c3;\n+            threadContainer4 = child;\n         }\n-        subjectTable.clear();\n-        subjectTable = null;\n+        hashMap.clear();\n     }\n     \n     @Deprecated\n-    public Threadable thread(final Threadable[] messages) {\n-        if (messages == null) {\n+    public Threadable thread(final Threadable[] a) {\n+        if (a == null) {\n             return null;\n         }\n-        return this.thread(Arrays.asList(messages));\n+        return this.thread(Arrays.asList(a));\n     }\n }\n"}]}
