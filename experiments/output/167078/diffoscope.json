{"diffoscope-json-version": 1, "source1": "first/ReadAheadInputStream.class", "source2": "second/ReadAheadInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -192,15 +192,15 @@\n         byte[] arr;\n         try {\n             arr = this.readAheadBuffer.array();\n             if (this.endOfStream || this.readInProgress) {\n                 return;\n             }\n             this.checkReadException();\n-            this.readAheadBuffer.position();\n+            this.readAheadBuffer.position(0);\n             this.readAheadBuffer.flip();\n             this.readInProgress = true;\n         }\n         finally {\n             this.stateChangeLock.unlock();\n         }\n         this.executorService.execute(() -> {\n@@ -238,15 +238,15 @@\n                 if (ex instanceof Error) {\n                     throw (Error)ex;\n                 }\n             }\n             finally {\n                 this.stateChangeLock.lock();\n                 try {\n-                    this.readAheadBuffer.limit();\n+                    this.readAheadBuffer.limit(off);\n                     if (read < 0 || exception instanceof EOFException) {\n                         this.endOfStream = true;\n                     }\n                     else if (exception != null) {\n                         this.readAborted = true;\n                         this.readException = exception;\n                     }\n@@ -273,15 +273,15 @@\n     \n     @Override\n     public long skip(final long n) throws IOException {\n         if (n <= 0L) {\n             return 0L;\n         }\n         if (n <= this.activeBuffer.remaining()) {\n-            this.activeBuffer.position();\n+            this.activeBuffer.position((int)n + this.activeBuffer.position());\n             return n;\n         }\n         this.stateChangeLock.lock();\n         long skipped;\n         try {\n             skipped = this.skipInternal(n);\n         }\n@@ -296,28 +296,28 @@\n         this.waitForAsyncReadComplete();\n         if (this.isEndOfStream()) {\n             return 0L;\n         }\n         if (this.available() < n) {\n             final int skippedBytes = this.available();\n             final long toSkip = n - skippedBytes;\n-            this.activeBuffer.position();\n+            this.activeBuffer.position(0);\n             this.activeBuffer.flip();\n-            this.readAheadBuffer.position();\n+            this.readAheadBuffer.position(0);\n             this.readAheadBuffer.flip();\n             final long skippedFromInputStream = this.underlyingInputStream.skip(toSkip);\n             this.readAsync();\n             return skippedBytes + skippedFromInputStream;\n         }\n         int toSkip2 = (int)n;\n         toSkip2 -= this.activeBuffer.remaining();\n         assert toSkip2 > 0;\n-        this.activeBuffer.position();\n+        this.activeBuffer.position(0);\n         this.activeBuffer.flip();\n-        this.readAheadBuffer.position();\n+        this.readAheadBuffer.position(toSkip2 + this.readAheadBuffer.position());\n         this.swapBuffers();\n         this.readAsync();\n         return n;\n     }\n     \n     private void swapBuffers() {\n         final ByteBuffer temp = this.activeBuffer;\n"}]}
