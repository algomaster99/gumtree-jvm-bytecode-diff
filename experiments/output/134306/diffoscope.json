{"diffoscope-json-version": 1, "source1": "first/CharTypes.class", "source2": "second/CharTypes.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,101 +14,14 @@\n     protected static final int[] sInputCodesJsNames;\n     protected static final int[] sInputCodesUtf8JsNames;\n     protected static final int[] sInputCodesComment;\n     protected static final int[] sInputCodesWS;\n     protected static final int[] sOutputEscapes128;\n     protected static final int[] sHexValues;\n     \n-    public static int[] getInputCodeLatin1() {\n-        return CharTypes.sInputCodes;\n-    }\n-    \n-    public static int[] getInputCodeUtf8() {\n-        return CharTypes.sInputCodesUTF8;\n-    }\n-    \n-    public static int[] getInputCodeLatin1JsNames() {\n-        return CharTypes.sInputCodesJsNames;\n-    }\n-    \n-    public static int[] getInputCodeUtf8JsNames() {\n-        return CharTypes.sInputCodesUtf8JsNames;\n-    }\n-    \n-    public static int[] getInputCodeComment() {\n-        return CharTypes.sInputCodesComment;\n-    }\n-    \n-    public static int[] getInputCodeWS() {\n-        return CharTypes.sInputCodesWS;\n-    }\n-    \n-    public static int[] get7BitOutputEscapes() {\n-        return CharTypes.sOutputEscapes128;\n-    }\n-    \n-    public static int[] get7BitOutputEscapes(final int quoteChar) {\n-        if (quoteChar == 34) {\n-            return CharTypes.sOutputEscapes128;\n-        }\n-        return CharTypes.AltEscapes.instance.escapesFor(quoteChar);\n-    }\n-    \n-    public static int charToHex(final int ch) {\n-        return CharTypes.sHexValues[ch & 0xFF];\n-    }\n-    \n-    public static char hexToChar(final int ch) {\n-        return CharTypes.HC[ch];\n-    }\n-    \n-    public static void appendQuoted(final StringBuilder sb, final String content) {\n-        final int[] escCodes = CharTypes.sOutputEscapes128;\n-        final int escLen = escCodes.length;\n-        for (int i = 0, len = content.length(); i < len; ++i) {\n-            final char c = content.charAt(i);\n-            if (c >= escLen || escCodes[c] == 0) {\n-                sb.append(c);\n-            }\n-            else {\n-                sb.append('\\\\');\n-                final int escCode = escCodes[c];\n-                if (escCode < 0) {\n-                    sb.append('u');\n-                    sb.append('0');\n-                    sb.append('0');\n-                    final int value = c;\n-                    sb.append(CharTypes.HC[value >> 4]);\n-                    sb.append(CharTypes.HC[value & 0xF]);\n-                }\n-                else {\n-                    sb.append((char)escCode);\n-                }\n-            }\n-        }\n-    }\n-    \n-    @Deprecated\n-    public static char[] copyHexChars() {\n-        return copyHexChars(true);\n-    }\n-    \n-    public static char[] copyHexChars(final boolean uppercase) {\n-        return uppercase ? ((char[])CharTypes.HC.clone()) : ((char[])CharTypes.HClower.clone());\n-    }\n-    \n-    @Deprecated\n-    public static byte[] copyHexBytes() {\n-        return copyHexBytes(true);\n-    }\n-    \n-    public static byte[] copyHexBytes(final boolean uppercase) {\n-        return uppercase ? ((byte[])CharTypes.HB.clone()) : ((byte[])CharTypes.HBlower.clone());\n-    }\n-    \n     static {\n         HC = \"0123456789ABCDEF\".toCharArray();\n         HClower = \"0123456789abcdef\".toCharArray();\n         final int len = CharTypes.HC.length;\n         HB = new byte[len];\n         HBlower = new byte[len];\n         for (int i = 0; i < len; ++i) {\n@@ -189,8 +102,95 @@\n             CharTypes.sHexValues[48 + j] = j;\n         }\n         for (int j = 0; j < 6; ++j) {\n             CharTypes.sHexValues[97 + j] = 10 + j;\n             CharTypes.sHexValues[65 + j] = 10 + j;\n         }\n     }\n+    \n+    public static int[] getInputCodeLatin1() {\n+        return CharTypes.sInputCodes;\n+    }\n+    \n+    public static int[] getInputCodeUtf8() {\n+        return CharTypes.sInputCodesUTF8;\n+    }\n+    \n+    public static int[] getInputCodeLatin1JsNames() {\n+        return CharTypes.sInputCodesJsNames;\n+    }\n+    \n+    public static int[] getInputCodeUtf8JsNames() {\n+        return CharTypes.sInputCodesUtf8JsNames;\n+    }\n+    \n+    public static int[] getInputCodeComment() {\n+        return CharTypes.sInputCodesComment;\n+    }\n+    \n+    public static int[] getInputCodeWS() {\n+        return CharTypes.sInputCodesWS;\n+    }\n+    \n+    public static int[] get7BitOutputEscapes() {\n+        return CharTypes.sOutputEscapes128;\n+    }\n+    \n+    public static int[] get7BitOutputEscapes(final int quoteChar) {\n+        if (quoteChar == 34) {\n+            return CharTypes.sOutputEscapes128;\n+        }\n+        return CharTypes.AltEscapes.instance.escapesFor(quoteChar);\n+    }\n+    \n+    public static int charToHex(final int ch) {\n+        return CharTypes.sHexValues[ch & 0xFF];\n+    }\n+    \n+    public static char hexToChar(final int ch) {\n+        return CharTypes.HC[ch];\n+    }\n+    \n+    public static void appendQuoted(final StringBuilder sb, final String content) {\n+        final int[] escCodes = CharTypes.sOutputEscapes128;\n+        final int escLen = escCodes.length;\n+        for (int i = 0, len = content.length(); i < len; ++i) {\n+            final char c = content.charAt(i);\n+            if (c >= escLen || escCodes[c] == 0) {\n+                sb.append(c);\n+            }\n+            else {\n+                sb.append('\\\\');\n+                final int escCode = escCodes[c];\n+                if (escCode < 0) {\n+                    sb.append('u');\n+                    sb.append('0');\n+                    sb.append('0');\n+                    final int value = c;\n+                    sb.append(CharTypes.HC[value >> 4]);\n+                    sb.append(CharTypes.HC[value & 0xF]);\n+                }\n+                else {\n+                    sb.append((char)escCode);\n+                }\n+            }\n+        }\n+    }\n+    \n+    @Deprecated\n+    public static char[] copyHexChars() {\n+        return copyHexChars(true);\n+    }\n+    \n+    public static char[] copyHexChars(final boolean uppercase) {\n+        return uppercase ? ((char[])CharTypes.HC.clone()) : ((char[])CharTypes.HClower.clone());\n+    }\n+    \n+    @Deprecated\n+    public static byte[] copyHexBytes() {\n+        return copyHexBytes(true);\n+    }\n+    \n+    public static byte[] copyHexBytes(final boolean uppercase) {\n+        return uppercase ? ((byte[])CharTypes.HB.clone()) : ((byte[])CharTypes.HBlower.clone());\n+    }\n }\n"}]}
