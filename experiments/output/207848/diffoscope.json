{"diffoscope-json-version": 1, "source1": "first/DeferredFileOutputStream.class", "source2": "second/DeferredFileOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,48 +16,48 @@\n     private OutputStream currentOutputStream;\n     private File outputFile;\n     private final String prefix;\n     private final String suffix;\n     private final File directory;\n     private boolean closed;\n     \n-    public DeferredFileOutputStream(final int threshold, final File outputFile) {\n-        this(threshold, outputFile, null, null, null, 1024);\n+    public DeferredFileOutputStream(final int n, final File file) {\n+        this(n, file, null, null, null, 1024);\n     }\n     \n-    private DeferredFileOutputStream(final int threshold, final File outputFile, final String prefix, final String suffix, final File directory, final int initialBufferSize) {\n-        super(threshold);\n+    private DeferredFileOutputStream(final int n, final File outputFile, final String prefix, final String suffix, final File directory, final int n2) {\n+        super(n);\n         this.outputFile = outputFile;\n         this.prefix = prefix;\n         this.suffix = suffix;\n         this.directory = directory;\n-        this.memoryOutputStream = new ByteArrayOutputStream(initialBufferSize);\n+        this.memoryOutputStream = new ByteArrayOutputStream(n2);\n         this.currentOutputStream = (OutputStream)this.memoryOutputStream;\n     }\n     \n-    public DeferredFileOutputStream(final int threshold, final int initialBufferSize, final File outputFile) {\n-        this(threshold, outputFile, null, null, null, initialBufferSize);\n-        if (initialBufferSize < 0) {\n+    public DeferredFileOutputStream(final int n, final int n2, final File file) {\n+        this(n, file, null, null, null, n2);\n+        if (n2 < 0) {\n             throw new IllegalArgumentException(\"Initial buffer size must be atleast 0.\");\n         }\n     }\n     \n-    public DeferredFileOutputStream(final int threshold, final int initialBufferSize, final String prefix, final String suffix, final File directory) {\n-        this(threshold, null, prefix, suffix, directory, initialBufferSize);\n-        if (prefix == null) {\n+    public DeferredFileOutputStream(final int n, final int n2, final String s, final String s2, final File file) {\n+        this(n, null, s, s2, file, n2);\n+        if (s == null) {\n             throw new IllegalArgumentException(\"Temporary file prefix is missing\");\n         }\n-        if (initialBufferSize < 0) {\n+        if (n2 < 0) {\n             throw new IllegalArgumentException(\"Initial buffer size must be atleast 0.\");\n         }\n     }\n     \n-    public DeferredFileOutputStream(final int threshold, final String prefix, final String suffix, final File directory) {\n-        this(threshold, null, prefix, suffix, directory, 1024);\n-        if (prefix == null) {\n+    public DeferredFileOutputStream(final int n, final String s, final String s2, final File file) {\n+        this(n, null, s, s2, file, 1024);\n+        if (s == null) {\n             throw new IllegalArgumentException(\"Temporary file prefix is missing\");\n         }\n     }\n     \n     public void close() throws IOException {\n         super.close();\n         this.closed = true;\n@@ -80,23 +80,23 @@\n     }\n     \n     protected void thresholdReached() throws IOException {\n         if (this.prefix != null) {\n             this.outputFile = File.createTempFile(this.prefix, this.suffix, this.directory);\n         }\n         FileUtils.forceMkdirParent(this.outputFile);\n-        final OutputStream fos = Files.newOutputStream(this.outputFile.toPath(), new OpenOption[0]);\n+        final OutputStream outputStream = Files.newOutputStream(this.outputFile.toPath(), new OpenOption[0]);\n         try {\n-            this.memoryOutputStream.writeTo(fos);\n+            this.memoryOutputStream.writeTo(outputStream);\n         }\n-        catch (final IOException e) {\n-            fos.close();\n-            throw e;\n+        catch (final IOException ex) {\n+            outputStream.close();\n+            throw ex;\n         }\n-        this.currentOutputStream = fos;\n+        this.currentOutputStream = outputStream;\n         this.memoryOutputStream = null;\n     }\n     \n     public InputStream toInputStream() throws IOException {\n         if (!this.closed) {\n             throw new IOException(\"Stream not closed\");\n         }\n@@ -110,13 +110,13 @@\n         if (!this.closed) {\n             throw new IOException(\"Stream not closed\");\n         }\n         if (this.isInMemory()) {\n             this.memoryOutputStream.writeTo(outputStream);\n         }\n         else {\n-            try (final InputStream fis = Files.newInputStream(this.outputFile.toPath(), new OpenOption[0])) {\n-                IOUtils.copy(fis, outputStream);\n+            try (final InputStream inputStream = Files.newInputStream(this.outputFile.toPath(), new OpenOption[0])) {\n+                IOUtils.copy(inputStream, outputStream);\n             }\n         }\n     }\n }\n"}]}
