{"diffoscope-json-version": 1, "source1": "first/XZCompressorInputStream.class", "source2": "second/XZCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,114 +1,114 @@\n-  SHA-256 checksum fe673474e3ecdea3bf22350b78230cd3a709a1f36e4fc1c0881f3e6982e2fc58\n+  SHA-256 checksum 639a9bc247884e339c05ab35b9932ed6d75b75d02ff8ed9fe5e71b12b0c72032\n   Compiled from \"XZCompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.xz.XZCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #25                         // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n-  super_class: #26                        // org/apache/commons/compress/compressors/CompressorInputStream\n+  this_class: #8                          // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n+  super_class: #17                        // org/apache/commons/compress/compressors/CompressorInputStream\n   interfaces: 1, fields: 2, methods: 10, attributes: 1\n Constant pool:\n-   #1 = Fieldref           #56.#57        // org/tukaani/xz/XZ.HEADER_MAGIC:[B\n-   #2 = Methodref          #25.#58        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n-   #3 = Methodref          #25.#59        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;ZI)V\n-   #4 = Methodref          #26.#60        // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-   #5 = Class              #61            // org/apache/commons/compress/utils/CountingInputStream\n-   #6 = Methodref          #5.#62         // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #7 = Fieldref           #25.#63        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #8 = Class              #64            // org/tukaani/xz/XZInputStream\n-   #9 = Methodref          #8.#65         // org/tukaani/xz/XZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-  #10 = Fieldref           #25.#66        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.in:Ljava/io/InputStream;\n-  #11 = Class              #67            // org/tukaani/xz/SingleXZInputStream\n-  #12 = Methodref          #11.#65        // org/tukaani/xz/SingleXZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-  #13 = Methodref          #43.#68        // java/io/InputStream.read:()I\n-  #14 = Methodref          #25.#69        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.count:(I)V\n-  #15 = Class              #70            // org/tukaani/xz/MemoryLimitException\n-  #16 = Class              #71            // org/apache/commons/compress/MemoryLimitException\n-  #17 = Methodref          #15.#72        // org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n-  #18 = Methodref          #15.#73        // org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n-  #19 = Methodref          #16.#74        // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n-  #20 = Methodref          #43.#75        // java/io/InputStream.read:([BII)I\n-  #21 = Methodref          #76.#77        // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-  #22 = Methodref          #43.#78        // java/io/InputStream.available:()I\n-  #23 = Methodref          #43.#79        // java/io/InputStream.close:()V\n-  #24 = Methodref          #5.#80         // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n-  #25 = Class              #81            // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n-  #26 = Class              #82            // org/apache/commons/compress/compressors/CompressorInputStream\n-  #27 = Class              #83            // org/apache/commons/compress/utils/InputStreamStatistics\n+   #1 = Fieldref           #2.#3          // org/tukaani/xz/XZ.HEADER_MAGIC:[B\n+   #2 = Class              #4             // org/tukaani/xz/XZ\n+   #3 = NameAndType        #5:#6          // HEADER_MAGIC:[B\n+   #4 = Utf8               org/tukaani/xz/XZ\n+   #5 = Utf8               HEADER_MAGIC\n+   #6 = Utf8               [B\n+   #7 = Methodref          #8.#9          // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n+   #8 = Class              #10            // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n+   #9 = NameAndType        #11:#12        // \"<init>\":(Ljava/io/InputStream;Z)V\n+  #10 = Utf8               org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n+  #11 = Utf8               <init>\n+  #12 = Utf8               (Ljava/io/InputStream;Z)V\n+  #13 = Methodref          #8.#14         // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;ZI)V\n+  #14 = NameAndType        #11:#15        // \"<init>\":(Ljava/io/InputStream;ZI)V\n+  #15 = Utf8               (Ljava/io/InputStream;ZI)V\n+  #16 = Methodref          #17.#18        // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+  #17 = Class              #19            // org/apache/commons/compress/compressors/CompressorInputStream\n+  #18 = NameAndType        #11:#20        // \"<init>\":()V\n+  #19 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+  #20 = Utf8               ()V\n+  #21 = Class              #22            // org/apache/commons/compress/utils/CountingInputStream\n+  #22 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n+  #23 = Methodref          #21.#24        // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #24 = NameAndType        #11:#25        // \"<init>\":(Ljava/io/InputStream;)V\n+  #25 = Utf8               (Ljava/io/InputStream;)V\n+  #26 = Fieldref           #8.#27         // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+  #27 = NameAndType        #28:#29        // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n   #28 = Utf8               countingStream\n   #29 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n-  #30 = Utf8               in\n-  #31 = Utf8               Ljava/io/InputStream;\n-  #32 = Utf8               matches\n-  #33 = Utf8               ([BI)Z\n-  #34 = Utf8               Code\n-  #35 = Utf8               LineNumberTable\n-  #36 = Utf8               StackMapTable\n-  #37 = Utf8               <init>\n-  #38 = Utf8               (Ljava/io/InputStream;)V\n-  #39 = Utf8               Exceptions\n-  #40 = Class              #84            // java/io/IOException\n-  #41 = Utf8               (Ljava/io/InputStream;Z)V\n-  #42 = Utf8               (Ljava/io/InputStream;ZI)V\n-  #43 = Class              #85            // java/io/InputStream\n-  #44 = Utf8               read\n-  #45 = Utf8               ()I\n-  #46 = Utf8               ([BII)I\n-  #47 = Utf8               skip\n-  #48 = Utf8               (J)J\n-  #49 = Utf8               available\n-  #50 = Utf8               close\n-  #51 = Utf8               ()V\n-  #52 = Utf8               getCompressedCount\n-  #53 = Utf8               ()J\n-  #54 = Utf8               SourceFile\n-  #55 = Utf8               XZCompressorInputStream.java\n-  #56 = Class              #86            // org/tukaani/xz/XZ\n-  #57 = NameAndType        #87:#88        // HEADER_MAGIC:[B\n-  #58 = NameAndType        #37:#41        // \"<init>\":(Ljava/io/InputStream;Z)V\n-  #59 = NameAndType        #37:#42        // \"<init>\":(Ljava/io/InputStream;ZI)V\n-  #60 = NameAndType        #37:#51        // \"<init>\":()V\n-  #61 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n-  #62 = NameAndType        #37:#38        // \"<init>\":(Ljava/io/InputStream;)V\n-  #63 = NameAndType        #28:#29        // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-  #64 = Utf8               org/tukaani/xz/XZInputStream\n-  #65 = NameAndType        #37:#89        // \"<init>\":(Ljava/io/InputStream;I)V\n-  #66 = NameAndType        #30:#31        // in:Ljava/io/InputStream;\n-  #67 = Utf8               org/tukaani/xz/SingleXZInputStream\n-  #68 = NameAndType        #44:#45        // read:()I\n-  #69 = NameAndType        #90:#91        // count:(I)V\n-  #70 = Utf8               org/tukaani/xz/MemoryLimitException\n-  #71 = Utf8               org/apache/commons/compress/MemoryLimitException\n-  #72 = NameAndType        #92:#45        // getMemoryNeeded:()I\n-  #73 = NameAndType        #93:#45        // getMemoryLimit:()I\n-  #74 = NameAndType        #37:#94        // \"<init>\":(JILjava/lang/Exception;)V\n-  #75 = NameAndType        #44:#46        // read:([BII)I\n-  #76 = Class              #95            // org/apache/commons/compress/utils/IOUtils\n-  #77 = NameAndType        #47:#96        // skip:(Ljava/io/InputStream;J)J\n-  #78 = NameAndType        #49:#45        // available:()I\n-  #79 = NameAndType        #50:#51        // close:()V\n-  #80 = NameAndType        #97:#53        // getBytesRead:()J\n-  #81 = Utf8               org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n-  #82 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-  #83 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #84 = Utf8               java/io/IOException\n-  #85 = Utf8               java/io/InputStream\n-  #86 = Utf8               org/tukaani/xz/XZ\n-  #87 = Utf8               HEADER_MAGIC\n-  #88 = Utf8               [B\n-  #89 = Utf8               (Ljava/io/InputStream;I)V\n-  #90 = Utf8               count\n-  #91 = Utf8               (I)V\n-  #92 = Utf8               getMemoryNeeded\n-  #93 = Utf8               getMemoryLimit\n-  #94 = Utf8               (JILjava/lang/Exception;)V\n-  #95 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #96 = Utf8               (Ljava/io/InputStream;J)J\n-  #97 = Utf8               getBytesRead\n+  #30 = Class              #31            // org/tukaani/xz/XZInputStream\n+  #31 = Utf8               org/tukaani/xz/XZInputStream\n+  #32 = Methodref          #30.#33        // org/tukaani/xz/XZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+  #33 = NameAndType        #11:#34        // \"<init>\":(Ljava/io/InputStream;I)V\n+  #34 = Utf8               (Ljava/io/InputStream;I)V\n+  #35 = Fieldref           #8.#36         // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.in:Ljava/io/InputStream;\n+  #36 = NameAndType        #37:#38        // in:Ljava/io/InputStream;\n+  #37 = Utf8               in\n+  #38 = Utf8               Ljava/io/InputStream;\n+  #39 = Class              #40            // org/tukaani/xz/SingleXZInputStream\n+  #40 = Utf8               org/tukaani/xz/SingleXZInputStream\n+  #41 = Methodref          #39.#33        // org/tukaani/xz/SingleXZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+  #42 = Methodref          #43.#44        // java/io/InputStream.read:()I\n+  #43 = Class              #45            // java/io/InputStream\n+  #44 = NameAndType        #46:#47        // read:()I\n+  #45 = Utf8               java/io/InputStream\n+  #46 = Utf8               read\n+  #47 = Utf8               ()I\n+  #48 = Methodref          #8.#49         // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.count:(I)V\n+  #49 = NameAndType        #50:#51        // count:(I)V\n+  #50 = Utf8               count\n+  #51 = Utf8               (I)V\n+  #52 = Class              #53            // org/tukaani/xz/MemoryLimitException\n+  #53 = Utf8               org/tukaani/xz/MemoryLimitException\n+  #54 = Class              #55            // org/apache/commons/compress/MemoryLimitException\n+  #55 = Utf8               org/apache/commons/compress/MemoryLimitException\n+  #56 = Methodref          #52.#57        // org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+  #57 = NameAndType        #58:#47        // getMemoryNeeded:()I\n+  #58 = Utf8               getMemoryNeeded\n+  #59 = Methodref          #52.#60        // org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+  #60 = NameAndType        #61:#47        // getMemoryLimit:()I\n+  #61 = Utf8               getMemoryLimit\n+  #62 = Methodref          #54.#63        // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+  #63 = NameAndType        #11:#64        // \"<init>\":(JILjava/lang/Exception;)V\n+  #64 = Utf8               (JILjava/lang/Exception;)V\n+  #65 = Methodref          #43.#66        // java/io/InputStream.read:([BII)I\n+  #66 = NameAndType        #46:#67        // read:([BII)I\n+  #67 = Utf8               ([BII)I\n+  #68 = Methodref          #69.#70        // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+  #69 = Class              #71            // org/apache/commons/compress/utils/IOUtils\n+  #70 = NameAndType        #72:#73        // skip:(Ljava/io/InputStream;J)J\n+  #71 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #72 = Utf8               skip\n+  #73 = Utf8               (Ljava/io/InputStream;J)J\n+  #74 = Methodref          #43.#75        // java/io/InputStream.available:()I\n+  #75 = NameAndType        #76:#47        // available:()I\n+  #76 = Utf8               available\n+  #77 = Methodref          #43.#78        // java/io/InputStream.close:()V\n+  #78 = NameAndType        #79:#20        // close:()V\n+  #79 = Utf8               close\n+  #80 = Methodref          #21.#81        // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+  #81 = NameAndType        #82:#83        // getBytesRead:()J\n+  #82 = Utf8               getBytesRead\n+  #83 = Utf8               ()J\n+  #84 = Class              #85            // org/apache/commons/compress/utils/InputStreamStatistics\n+  #85 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+  #86 = Utf8               matches\n+  #87 = Utf8               ([BI)Z\n+  #88 = Utf8               Code\n+  #89 = Utf8               LineNumberTable\n+  #90 = Utf8               StackMapTable\n+  #91 = Utf8               Exceptions\n+  #92 = Class              #93            // java/io/IOException\n+  #93 = Utf8               java/io/IOException\n+  #94 = Utf8               (J)J\n+  #95 = Utf8               getCompressedCount\n+  #96 = Utf8               SourceFile\n+  #97 = Utf8               XZCompressorInputStream.java\n {\n   private final org.apache.commons.compress.utils.CountingInputStream countingStream;\n     descriptor: Lorg/apache/commons/compress/utils/CountingInputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final java.io.InputStream in;\n     descriptor: Ljava/io/InputStream;\n@@ -165,15 +165,15 @@\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: invokespecial #2                  // Method \"<init>\":(Ljava/io/InputStream;Z)V\n+         3: invokespecial #7                  // Method \"<init>\":(Ljava/io/InputStream;Z)V\n          6: return\n       LineNumberTable:\n         line 80: 0\n         line 81: 6\n     Exceptions:\n       throws java.io.IOException\n \n@@ -182,54 +182,54 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iconst_m1\n-         4: invokespecial #3                  // Method \"<init>\":(Ljava/io/InputStream;ZI)V\n+         4: invokespecial #13                 // Method \"<init>\":(Ljava/io/InputStream;ZI)V\n          7: return\n       LineNumberTable:\n         line 103: 0\n         line 104: 7\n     Exceptions:\n       throws java.io.IOException\n \n   public org.apache.commons.compress.compressors.xz.XZCompressorInputStream(java.io.InputStream, boolean, int) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;ZI)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_0\n-         1: invokespecial #4                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+         1: invokespecial #16                 // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #5                  // class org/apache/commons/compress/utils/CountingInputStream\n+         5: new           #21                 // class org/apache/commons/compress/utils/CountingInputStream\n          8: dup\n          9: aload_1\n-        10: invokespecial #6                  // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-        13: putfield      #7                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        10: invokespecial #23                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        13: putfield      #26                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         16: iload_2\n         17: ifeq          39\n         20: aload_0\n-        21: new           #8                  // class org/tukaani/xz/XZInputStream\n+        21: new           #30                 // class org/tukaani/xz/XZInputStream\n         24: dup\n         25: aload_0\n-        26: getfield      #7                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        26: getfield      #26                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         29: iload_3\n-        30: invokespecial #9                  // Method org/tukaani/xz/XZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-        33: putfield      #10                 // Field in:Ljava/io/InputStream;\n+        30: invokespecial #32                 // Method org/tukaani/xz/XZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        33: putfield      #35                 // Field in:Ljava/io/InputStream;\n         36: goto          55\n         39: aload_0\n-        40: new           #11                 // class org/tukaani/xz/SingleXZInputStream\n+        40: new           #39                 // class org/tukaani/xz/SingleXZInputStream\n         43: dup\n         44: aload_0\n-        45: getfield      #7                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        45: getfield      #26                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         48: iload_3\n-        49: invokespecial #12                 // Method org/tukaani/xz/SingleXZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-        52: putfield      #10                 // Field in:Ljava/io/InputStream;\n+        49: invokespecial #41                 // Method org/tukaani/xz/SingleXZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        52: putfield      #35                 // Field in:Ljava/io/InputStream;\n         55: return\n       LineNumberTable:\n         line 130: 0\n         line 131: 4\n         line 132: 16\n         line 133: 20\n         line 135: 39\n@@ -245,37 +245,37 @@\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #10                 // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #13                 // Method java/io/InputStream.read:()I\n+         1: getfield      #35                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #42                 // Method java/io/InputStream.read:()I\n          7: istore_1\n          8: aload_0\n          9: iload_1\n         10: iconst_m1\n         11: if_icmpne     18\n         14: iconst_m1\n         15: goto          19\n         18: iconst_1\n-        19: invokevirtual #14                 // Method count:(I)V\n+        19: invokevirtual #48                 // Method count:(I)V\n         22: iload_1\n         23: ireturn\n         24: astore_1\n-        25: new           #16                 // class org/apache/commons/compress/MemoryLimitException\n+        25: new           #54                 // class org/apache/commons/compress/MemoryLimitException\n         28: dup\n         29: aload_1\n-        30: invokevirtual #17                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+        30: invokevirtual #56                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n         33: i2l\n         34: aload_1\n-        35: invokevirtual #18                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+        35: invokevirtual #59                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n         38: aload_1\n-        39: invokespecial #19                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+        39: invokespecial #62                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n         42: athrow\n       Exception table:\n          from    to  target type\n              0    23    24   Class org/tukaani/xz/MemoryLimitException\n       LineNumberTable:\n         line 142: 0\n         line 143: 8\n@@ -304,35 +304,35 @@\n     Code:\n       stack=6, locals=5, args_size=4\n          0: iload_3\n          1: ifne          6\n          4: iconst_0\n          5: ireturn\n          6: aload_0\n-         7: getfield      #10                 // Field in:Ljava/io/InputStream;\n+         7: getfield      #35                 // Field in:Ljava/io/InputStream;\n         10: aload_1\n         11: iload_2\n         12: iload_3\n-        13: invokevirtual #20                 // Method java/io/InputStream.read:([BII)I\n+        13: invokevirtual #65                 // Method java/io/InputStream.read:([BII)I\n         16: istore        4\n         18: aload_0\n         19: iload         4\n-        21: invokevirtual #14                 // Method count:(I)V\n+        21: invokevirtual #48                 // Method count:(I)V\n         24: iload         4\n         26: ireturn\n         27: astore        4\n-        29: new           #16                 // class org/apache/commons/compress/MemoryLimitException\n+        29: new           #54                 // class org/apache/commons/compress/MemoryLimitException\n         32: dup\n         33: aload         4\n-        35: invokevirtual #17                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+        35: invokevirtual #56                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n         38: i2l\n         39: aload         4\n-        41: invokevirtual #18                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+        41: invokevirtual #59                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n         44: aload         4\n-        46: invokespecial #19                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+        46: invokespecial #62                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n         49: athrow\n       Exception table:\n          from    to  target type\n              6    26    27   Class org/tukaani/xz/MemoryLimitException\n       LineNumberTable:\n         line 152: 0\n         line 153: 4\n@@ -350,28 +350,28 @@\n \n   public long skip(long) throws java.io.IOException;\n     descriptor: (J)J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=4, args_size=2\n          0: aload_0\n-         1: getfield      #10                 // Field in:Ljava/io/InputStream;\n+         1: getfield      #35                 // Field in:Ljava/io/InputStream;\n          4: lload_1\n-         5: invokestatic  #21                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+         5: invokestatic  #68                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n          8: lreturn\n          9: astore_3\n-        10: new           #16                 // class org/apache/commons/compress/MemoryLimitException\n+        10: new           #54                 // class org/apache/commons/compress/MemoryLimitException\n         13: dup\n         14: aload_3\n-        15: invokevirtual #17                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+        15: invokevirtual #56                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n         18: i2l\n         19: aload_3\n-        20: invokevirtual #18                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+        20: invokevirtual #59                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n         23: aload_3\n-        24: invokespecial #19                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+        24: invokespecial #62                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n         27: athrow\n       Exception table:\n          from    to  target type\n              0     8     9   Class org/tukaani/xz/MemoryLimitException\n       LineNumberTable:\n         line 168: 0\n         line 169: 9\n@@ -384,43 +384,43 @@\n \n   public int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #10                 // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #22                 // Method java/io/InputStream.available:()I\n+         1: getfield      #35                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #74                 // Method java/io/InputStream.available:()I\n          7: ireturn\n       LineNumberTable:\n         line 177: 0\n     Exceptions:\n       throws java.io.IOException\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #10                 // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #23                 // Method java/io/InputStream.close:()V\n+         1: getfield      #35                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #77                 // Method java/io/InputStream.close:()V\n          7: return\n       LineNumberTable:\n         line 182: 0\n         line 183: 7\n     Exceptions:\n       throws java.io.IOException\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-         4: invokevirtual #24                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+         1: getfield      #26                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+         4: invokevirtual #80                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n          7: lreturn\n       LineNumberTable:\n         line 190: 0\n }\n SourceFile: \"XZCompressorInputStream.java\"\n"}]}
