{"diffoscope-json-version": 1, "source1": "first/BoundedInputStream.class", "source2": "second/BoundedInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,56 +5,55 @@\n import java.io.InputStream;\n \n public class BoundedInputStream extends InputStream\n {\n     private final InputStream in;\n     private long bytesRemaining;\n     \n-    public BoundedInputStream(final InputStream in, final long size) {\n+    public BoundedInputStream(final InputStream in, final long bytesRemaining) {\n         this.in = in;\n-        this.bytesRemaining = size;\n+        this.bytesRemaining = bytesRemaining;\n     }\n     \n     @Override\n     public int read() throws IOException {\n         if (this.bytesRemaining > 0L) {\n             --this.bytesRemaining;\n             return this.in.read();\n         }\n         return -1;\n     }\n     \n     @Override\n-    public int read(final byte[] b, final int off, final int len) throws IOException {\n-        if (len == 0) {\n+    public int read(final byte[] b, final int off, final int n) throws IOException {\n+        if (n == 0) {\n             return 0;\n         }\n         if (this.bytesRemaining == 0L) {\n             return -1;\n         }\n-        int bytesToRead = len;\n-        if (bytesToRead > this.bytesRemaining) {\n-            bytesToRead = (int)this.bytesRemaining;\n+        int len = n;\n+        if (len > this.bytesRemaining) {\n+            len = (int)this.bytesRemaining;\n         }\n-        final int bytesRead = this.in.read(b, off, bytesToRead);\n-        if (bytesRead >= 0) {\n-            this.bytesRemaining -= bytesRead;\n+        final int read = this.in.read(b, off, len);\n+        if (read >= 0) {\n+            this.bytesRemaining -= read;\n         }\n-        return bytesRead;\n+        return read;\n     }\n     \n     @Override\n     public void close() {\n     }\n     \n     @Override\n-    public long skip(final long n) throws IOException {\n-        final long bytesToSkip = Math.min(this.bytesRemaining, n);\n-        final long bytesSkipped = this.in.skip(bytesToSkip);\n-        this.bytesRemaining -= bytesSkipped;\n-        return bytesSkipped;\n+    public long skip(final long b) throws IOException {\n+        final long skip = this.in.skip(Math.min(this.bytesRemaining, b));\n+        this.bytesRemaining -= skip;\n+        return skip;\n     }\n     \n     public long getBytesRemaining() {\n         return this.bytesRemaining;\n     }\n }\n"}]}
