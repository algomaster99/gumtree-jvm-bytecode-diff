{"diffoscope-json-version": 1, "source1": "first/NodeHandlerDecorator.class", "source2": "second/NodeHandlerDecorator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,68 +2,68 @@\n package org.apache.commons.configuration2.tree;\n \n import java.util.Set;\n import java.util.List;\n \n public abstract class NodeHandlerDecorator<T> implements NodeHandler<T>\n {\n-    public String nodeName(final T node) {\n-        return this.getDecoratedNodeHandler().nodeName((Object)node);\n+    public String nodeName(final T t) {\n+        return this.getDecoratedNodeHandler().nodeName((Object)t);\n     }\n     \n-    public Object getValue(final T node) {\n-        return this.getDecoratedNodeHandler().getValue((Object)node);\n+    public Object getValue(final T t) {\n+        return this.getDecoratedNodeHandler().getValue((Object)t);\n     }\n     \n-    public T getParent(final T node) {\n-        return (T)this.getDecoratedNodeHandler().getParent((Object)node);\n+    public T getParent(final T t) {\n+        return (T)this.getDecoratedNodeHandler().getParent((Object)t);\n     }\n     \n-    public List<T> getChildren(final T node) {\n-        return this.getDecoratedNodeHandler().getChildren((Object)node);\n+    public List<T> getChildren(final T t) {\n+        return this.getDecoratedNodeHandler().getChildren((Object)t);\n     }\n     \n-    public <C> List<T> getMatchingChildren(final T node, final NodeMatcher<C> matcher, final C criterion) {\n-        return this.getDecoratedNodeHandler().getMatchingChildren((Object)node, (NodeMatcher)matcher, (Object)criterion);\n+    public <C> List<T> getMatchingChildren(final T t, final NodeMatcher<C> nodeMatcher, final C c) {\n+        return this.getDecoratedNodeHandler().getMatchingChildren((Object)t, (NodeMatcher)nodeMatcher, (Object)c);\n     }\n     \n-    public <C> int getMatchingChildrenCount(final T node, final NodeMatcher<C> matcher, final C criterion) {\n-        return this.getDecoratedNodeHandler().getMatchingChildrenCount((Object)node, (NodeMatcher)matcher, (Object)criterion);\n+    public <C> int getMatchingChildrenCount(final T t, final NodeMatcher<C> nodeMatcher, final C c) {\n+        return this.getDecoratedNodeHandler().getMatchingChildrenCount((Object)t, (NodeMatcher)nodeMatcher, (Object)c);\n     }\n     \n-    public List<T> getChildren(final T node, final String name) {\n-        return this.getDecoratedNodeHandler().getChildren((Object)node, name);\n+    public List<T> getChildren(final T t, final String s) {\n+        return this.getDecoratedNodeHandler().getChildren((Object)t, s);\n     }\n     \n-    public T getChild(final T node, final int index) {\n-        return (T)this.getDecoratedNodeHandler().getChild((Object)node, index);\n+    public T getChild(final T t, final int n) {\n+        return (T)this.getDecoratedNodeHandler().getChild((Object)t, n);\n     }\n     \n-    public int indexOfChild(final T parent, final T child) {\n-        return this.getDecoratedNodeHandler().indexOfChild((Object)parent, (Object)child);\n+    public int indexOfChild(final T t, final T t2) {\n+        return this.getDecoratedNodeHandler().indexOfChild((Object)t, (Object)t2);\n     }\n     \n-    public int getChildrenCount(final T node, final String name) {\n-        return this.getDecoratedNodeHandler().getChildrenCount((Object)node, name);\n+    public int getChildrenCount(final T t, final String s) {\n+        return this.getDecoratedNodeHandler().getChildrenCount((Object)t, s);\n     }\n     \n-    public Set<String> getAttributes(final T node) {\n-        return this.getDecoratedNodeHandler().getAttributes((Object)node);\n+    public Set<String> getAttributes(final T t) {\n+        return this.getDecoratedNodeHandler().getAttributes((Object)t);\n     }\n     \n-    public boolean hasAttributes(final T node) {\n-        return this.getDecoratedNodeHandler().hasAttributes((Object)node);\n+    public boolean hasAttributes(final T t) {\n+        return this.getDecoratedNodeHandler().hasAttributes((Object)t);\n     }\n     \n-    public Object getAttributeValue(final T node, final String name) {\n-        return this.getDecoratedNodeHandler().getAttributeValue((Object)node, name);\n+    public Object getAttributeValue(final T t, final String s) {\n+        return this.getDecoratedNodeHandler().getAttributeValue((Object)t, s);\n     }\n     \n-    public boolean isDefined(final T node) {\n-        return this.getDecoratedNodeHandler().isDefined((Object)node);\n+    public boolean isDefined(final T t) {\n+        return this.getDecoratedNodeHandler().isDefined((Object)t);\n     }\n     \n     public T getRootNode() {\n         return (T)this.getDecoratedNodeHandler().getRootNode();\n     }\n     \n     protected abstract NodeHandler<T> getDecoratedNodeHandler();\n"}]}
