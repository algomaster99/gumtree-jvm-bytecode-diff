{"diffoscope-json-version": 1, "source1": "first/ArArchiveEntry.class", "source2": "second/ArArchiveEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,36 +18,36 @@\n     private final int userId;\n     private final int groupId;\n     private final int mode;\n     private static final int DEFAULT_MODE = 33188;\n     private final long lastModified;\n     private final long length;\n     \n-    public ArArchiveEntry(final String name, final long length) {\n-        this(name, length, 0, 0, 33188, System.currentTimeMillis() / 1000L);\n+    public ArArchiveEntry(final String s, final long n) {\n+        this(s, n, 0, 0, 33188, System.currentTimeMillis() / 1000L);\n     }\n     \n     public ArArchiveEntry(final String name, final long length, final int userId, final int groupId, final int mode, final long lastModified) {\n         this.name = name;\n         if (length < 0L) {\n             throw new IllegalArgumentException(\"length must not be negative\");\n         }\n         this.length = length;\n         this.userId = userId;\n         this.groupId = groupId;\n         this.mode = mode;\n         this.lastModified = lastModified;\n     }\n     \n-    public ArArchiveEntry(final File inputFile, final String entryName) {\n-        this(entryName, inputFile.isFile() ? inputFile.length() : 0L, 0, 0, 33188, inputFile.lastModified() / 1000L);\n+    public ArArchiveEntry(final File file, final String s) {\n+        this(s, file.isFile() ? file.length() : 0L, 0, 0, 33188, file.lastModified() / 1000L);\n     }\n     \n-    public ArArchiveEntry(final Path inputPath, final String entryName, final LinkOption... options) throws IOException {\n-        this(entryName, Files.isRegularFile(inputPath, options) ? Files.size(inputPath) : 0L, 0, 0, 33188, Files.getLastModifiedTime(inputPath, options).toMillis() / 1000L);\n+    public ArArchiveEntry(final Path path, final String s, final LinkOption... array) throws IOException {\n+        this(s, Files.isRegularFile(path, array) ? Files.size(path) : 0L, 0, 0, 33188, Files.getLastModifiedTime(path, array).toMillis() / 1000L);\n     }\n     \n     public long getSize() {\n         return this.getLength();\n     }\n     \n     public String getName() {\n@@ -84,21 +84,21 @@\n     \n     @Override\n     public int hashCode() {\n         return Objects.hash(this.name);\n     }\n     \n     @Override\n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (obj == null || this.getClass() != obj.getClass()) {\n+        if (o == null || this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final ArArchiveEntry other = (ArArchiveEntry)obj;\n+        final ArArchiveEntry arArchiveEntry = (ArArchiveEntry)o;\n         if (this.name == null) {\n-            return other.name == null;\n+            return arArchiveEntry.name == null;\n         }\n-        return this.name.equals(other.name);\n+        return this.name.equals(arArchiveEntry.name);\n     }\n }\n"}]}
