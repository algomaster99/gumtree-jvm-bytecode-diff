{"diffoscope-json-version": 1, "source1": "first/ChecksumVerifyingInputStream.class", "source2": "second/ChecksumVerifyingInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,56 +8,56 @@\n public class ChecksumVerifyingInputStream extends InputStream\n {\n     private final InputStream in;\n     private long bytesRemaining;\n     private final long expectedChecksum;\n     private final Checksum checksum;\n     \n-    public ChecksumVerifyingInputStream(final Checksum checksum, final InputStream in, final long size, final long expectedChecksum) {\n+    public ChecksumVerifyingInputStream(final Checksum checksum, final InputStream in, final long bytesRemaining, final long expectedChecksum) {\n         this.checksum = checksum;\n         this.in = in;\n         this.expectedChecksum = expectedChecksum;\n-        this.bytesRemaining = size;\n+        this.bytesRemaining = bytesRemaining;\n     }\n     \n     @Override\n     public int read() throws IOException {\n         if (this.bytesRemaining <= 0L) {\n             return -1;\n         }\n-        final int ret = this.in.read();\n-        if (ret >= 0) {\n-            this.checksum.update(ret);\n+        final int read = this.in.read();\n+        if (read >= 0) {\n+            this.checksum.update(read);\n             --this.bytesRemaining;\n         }\n         if (this.bytesRemaining == 0L && this.expectedChecksum != this.checksum.getValue()) {\n             throw new IOException(\"Checksum verification failed\");\n         }\n-        return ret;\n+        return read;\n     }\n     \n     @Override\n-    public int read(final byte[] b) throws IOException {\n-        return this.read(b, 0, b.length);\n+    public int read(final byte[] array) throws IOException {\n+        return this.read(array, 0, array.length);\n     }\n     \n     @Override\n     public int read(final byte[] b, final int off, final int len) throws IOException {\n         if (len == 0) {\n             return 0;\n         }\n-        final int ret = this.in.read(b, off, len);\n-        if (ret >= 0) {\n-            this.checksum.update(b, off, ret);\n-            this.bytesRemaining -= ret;\n+        final int read = this.in.read(b, off, len);\n+        if (read >= 0) {\n+            this.checksum.update(b, off, read);\n+            this.bytesRemaining -= read;\n         }\n         if (this.bytesRemaining <= 0L && this.expectedChecksum != this.checksum.getValue()) {\n             throw new IOException(\"Checksum verification failed\");\n         }\n-        return ret;\n+        return read;\n     }\n     \n     @Override\n     public long skip(final long n) throws IOException {\n         if (this.read() >= 0) {\n             return 1L;\n         }\n"}]}
