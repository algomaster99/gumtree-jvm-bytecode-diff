{"diffoscope-json-version": 1, "source1": "first/ArrayElementValue.class", "source2": "second/ArrayElementValue.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,40 +1,40 @@\n-  SHA-256 checksum 594f6f7dd16aef9b932d60bca3681374559bfe52dc30a21fb127a54e7c4001a6\n+  SHA-256 checksum b1aace0d038fa0c27b3f00950639a0aa6369734d53d0fc23adea9b8e7813da68\n   Compiled from \"ArrayElementValue.java\"\n public class org.apache.bcel.classfile.ArrayElementValue extends org.apache.bcel.classfile.ElementValue\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #23                         // org/apache/bcel/classfile/ArrayElementValue\n   super_class: #2                         // org/apache/bcel/classfile/ElementValue\n   interfaces: 0, fields: 1, methods: 6, attributes: 1\n Constant pool:\n-    #1 = Methodref          #2.#64        // org/apache/bcel/classfile/ElementValue.\"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n-    #2 = Class              #65           // org/apache/bcel/classfile/ElementValue\n-    #3 = Class              #66           // org/apache/bcel/classfile/ClassFormatException\n-    #4 = Class              #67           // java/lang/StringBuilder\n-    #5 = Methodref          #4.#68        // java/lang/StringBuilder.\"<init>\":()V\n-    #6 = String             #69           // Only element values of type array can be built with this ctor - type specified:\n-    #7 = Methodref          #4.#70        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #8 = Methodref          #4.#71        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-    #9 = Methodref          #4.#72        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #10 = Methodref          #3.#73        // org/apache/bcel/classfile/ClassFormatException.\"<init>\":(Ljava/lang/String;)V\n-   #11 = Fieldref           #23.#74       // org/apache/bcel/classfile/ArrayElementValue.elementValues:[Lorg/apache/bcel/classfile/ElementValue;\n-   #12 = Methodref          #2.#75        // org/apache/bcel/classfile/ElementValue.getType:()I\n-   #13 = Methodref          #76.#77       // java/io/DataOutputStream.writeByte:(I)V\n-   #14 = Methodref          #76.#78       // java/io/DataOutputStream.writeShort:(I)V\n-   #15 = Methodref          #2.#79        // org/apache/bcel/classfile/ElementValue.dump:(Ljava/io/DataOutputStream;)V\n-   #16 = String             #80           // [\n-   #17 = Methodref          #2.#81        // org/apache/bcel/classfile/ElementValue.stringifyValue:()Ljava/lang/String;\n-   #18 = String             #82           // ,\n-   #19 = String             #83           // ]\n-   #20 = String             #84           // {\n-   #21 = Methodref          #4.#85        // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #22 = String             #86           // }\n-   #23 = Class              #87           // org/apache/bcel/classfile/ArrayElementValue\n+    #1 = Methodref          #2.#62        // org/apache/bcel/classfile/ElementValue.\"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n+    #2 = Class              #63           // org/apache/bcel/classfile/ElementValue\n+    #3 = Class              #64           // org/apache/bcel/classfile/ClassFormatException\n+    #4 = Class              #65           // java/lang/StringBuilder\n+    #5 = Methodref          #4.#66        // java/lang/StringBuilder.\"<init>\":()V\n+    #6 = String             #67           // Only element values of type array can be built with this ctor - type specified:\n+    #7 = Methodref          #4.#68        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+    #8 = Methodref          #4.#69        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+    #9 = Methodref          #4.#70        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #10 = Methodref          #3.#71        // org/apache/bcel/classfile/ClassFormatException.\"<init>\":(Ljava/lang/String;)V\n+   #11 = Fieldref           #23.#72       // org/apache/bcel/classfile/ArrayElementValue.elementValues:[Lorg/apache/bcel/classfile/ElementValue;\n+   #12 = Methodref          #2.#73        // org/apache/bcel/classfile/ElementValue.getType:()I\n+   #13 = Methodref          #74.#75       // java/io/DataOutputStream.writeByte:(I)V\n+   #14 = Methodref          #74.#76       // java/io/DataOutputStream.writeShort:(I)V\n+   #15 = Methodref          #2.#77        // org/apache/bcel/classfile/ElementValue.dump:(Ljava/io/DataOutputStream;)V\n+   #16 = String             #78           // [\n+   #17 = Methodref          #2.#79        // org/apache/bcel/classfile/ElementValue.stringifyValue:()Ljava/lang/String;\n+   #18 = String             #80           // ,\n+   #19 = String             #81           // ]\n+   #20 = String             #82           // {\n+   #21 = Methodref          #4.#83        // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #22 = String             #84           // }\n+   #23 = Class              #85           // org/apache/bcel/classfile/ArrayElementValue\n    #24 = Utf8               elementValues\n    #25 = Utf8               [Lorg/apache/bcel/classfile/ElementValue;\n    #26 = Utf8               <init>\n    #27 = Utf8               (I[Lorg/apache/bcel/classfile/ElementValue;Lorg/apache/bcel/classfile/ConstantPool;)V\n    #28 = Utf8               Code\n    #29 = Utf8               LineNumberTable\n    #30 = Utf8               LocalVariableTable\n@@ -42,77 +42,75 @@\n    #32 = Utf8               Lorg/apache/bcel/classfile/ArrayElementValue;\n    #33 = Utf8               type\n    #34 = Utf8               I\n    #35 = Utf8               datums\n    #36 = Utf8               cpool\n    #37 = Utf8               Lorg/apache/bcel/classfile/ConstantPool;\n    #38 = Utf8               StackMapTable\n-   #39 = Class              #87           // org/apache/bcel/classfile/ArrayElementValue\n-   #40 = Class              #25           // \"[Lorg/apache/bcel/classfile/ElementValue;\"\n-   #41 = Class              #88           // org/apache/bcel/classfile/ConstantPool\n-   #42 = Utf8               MethodParameters\n-   #43 = Utf8               dump\n-   #44 = Utf8               (Ljava/io/DataOutputStream;)V\n-   #45 = Utf8               evalue\n-   #46 = Utf8               Lorg/apache/bcel/classfile/ElementValue;\n-   #47 = Utf8               dos\n-   #48 = Utf8               Ljava/io/DataOutputStream;\n-   #49 = Utf8               Exceptions\n-   #50 = Class              #89           // java/io/IOException\n-   #51 = Utf8               getElementValuesArray\n-   #52 = Utf8               ()[Lorg/apache/bcel/classfile/ElementValue;\n-   #53 = Utf8               getElementValuesArraySize\n-   #54 = Utf8               ()I\n-   #55 = Utf8               stringifyValue\n-   #56 = Utf8               ()Ljava/lang/String;\n-   #57 = Utf8               i\n-   #58 = Utf8               sb\n-   #59 = Utf8               Ljava/lang/StringBuilder;\n-   #60 = Class              #67           // java/lang/StringBuilder\n-   #61 = Utf8               toString\n-   #62 = Utf8               SourceFile\n-   #63 = Utf8               ArrayElementValue.java\n-   #64 = NameAndType        #26:#90       // \"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n-   #65 = Utf8               org/apache/bcel/classfile/ElementValue\n-   #66 = Utf8               org/apache/bcel/classfile/ClassFormatException\n-   #67 = Utf8               java/lang/StringBuilder\n-   #68 = NameAndType        #26:#91       // \"<init>\":()V\n-   #69 = Utf8               Only element values of type array can be built with this ctor - type specified:\n-   #70 = NameAndType        #92:#93       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #71 = NameAndType        #92:#94       // append:(I)Ljava/lang/StringBuilder;\n-   #72 = NameAndType        #61:#56       // toString:()Ljava/lang/String;\n-   #73 = NameAndType        #26:#95       // \"<init>\":(Ljava/lang/String;)V\n-   #74 = NameAndType        #24:#25       // elementValues:[Lorg/apache/bcel/classfile/ElementValue;\n-   #75 = NameAndType        #96:#54       // getType:()I\n-   #76 = Class              #97           // java/io/DataOutputStream\n-   #77 = NameAndType        #98:#99       // writeByte:(I)V\n-   #78 = NameAndType        #100:#99      // writeShort:(I)V\n-   #79 = NameAndType        #43:#44       // dump:(Ljava/io/DataOutputStream;)V\n-   #80 = Utf8               [\n-   #81 = NameAndType        #55:#56       // stringifyValue:()Ljava/lang/String;\n-   #82 = Utf8               ,\n-   #83 = Utf8               ]\n-   #84 = Utf8               {\n-   #85 = NameAndType        #92:#101      // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #86 = Utf8               }\n-   #87 = Utf8               org/apache/bcel/classfile/ArrayElementValue\n-   #88 = Utf8               org/apache/bcel/classfile/ConstantPool\n-   #89 = Utf8               java/io/IOException\n-   #90 = Utf8               (ILorg/apache/bcel/classfile/ConstantPool;)V\n-   #91 = Utf8               ()V\n-   #92 = Utf8               append\n-   #93 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #94 = Utf8               (I)Ljava/lang/StringBuilder;\n-   #95 = Utf8               (Ljava/lang/String;)V\n-   #96 = Utf8               getType\n-   #97 = Utf8               java/io/DataOutputStream\n-   #98 = Utf8               writeByte\n-   #99 = Utf8               (I)V\n-  #100 = Utf8               writeShort\n-  #101 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #39 = Class              #25           // \"[Lorg/apache/bcel/classfile/ElementValue;\"\n+   #40 = Class              #86           // org/apache/bcel/classfile/ConstantPool\n+   #41 = Utf8               MethodParameters\n+   #42 = Utf8               dump\n+   #43 = Utf8               (Ljava/io/DataOutputStream;)V\n+   #44 = Utf8               evalue\n+   #45 = Utf8               Lorg/apache/bcel/classfile/ElementValue;\n+   #46 = Utf8               dos\n+   #47 = Utf8               Ljava/io/DataOutputStream;\n+   #48 = Utf8               Exceptions\n+   #49 = Class              #87           // java/io/IOException\n+   #50 = Utf8               getElementValuesArray\n+   #51 = Utf8               ()[Lorg/apache/bcel/classfile/ElementValue;\n+   #52 = Utf8               getElementValuesArraySize\n+   #53 = Utf8               ()I\n+   #54 = Utf8               stringifyValue\n+   #55 = Utf8               ()Ljava/lang/String;\n+   #56 = Utf8               i\n+   #57 = Utf8               sb\n+   #58 = Utf8               Ljava/lang/StringBuilder;\n+   #59 = Utf8               toString\n+   #60 = Utf8               SourceFile\n+   #61 = Utf8               ArrayElementValue.java\n+   #62 = NameAndType        #26:#88       // \"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n+   #63 = Utf8               org/apache/bcel/classfile/ElementValue\n+   #64 = Utf8               org/apache/bcel/classfile/ClassFormatException\n+   #65 = Utf8               java/lang/StringBuilder\n+   #66 = NameAndType        #26:#89       // \"<init>\":()V\n+   #67 = Utf8               Only element values of type array can be built with this ctor - type specified:\n+   #68 = NameAndType        #90:#91       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #69 = NameAndType        #90:#92       // append:(I)Ljava/lang/StringBuilder;\n+   #70 = NameAndType        #59:#55       // toString:()Ljava/lang/String;\n+   #71 = NameAndType        #26:#93       // \"<init>\":(Ljava/lang/String;)V\n+   #72 = NameAndType        #24:#25       // elementValues:[Lorg/apache/bcel/classfile/ElementValue;\n+   #73 = NameAndType        #94:#53       // getType:()I\n+   #74 = Class              #95           // java/io/DataOutputStream\n+   #75 = NameAndType        #96:#97       // writeByte:(I)V\n+   #76 = NameAndType        #98:#97       // writeShort:(I)V\n+   #77 = NameAndType        #42:#43       // dump:(Ljava/io/DataOutputStream;)V\n+   #78 = Utf8               [\n+   #79 = NameAndType        #54:#55       // stringifyValue:()Ljava/lang/String;\n+   #80 = Utf8               ,\n+   #81 = Utf8               ]\n+   #82 = Utf8               {\n+   #83 = NameAndType        #90:#99       // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #84 = Utf8               }\n+   #85 = Utf8               org/apache/bcel/classfile/ArrayElementValue\n+   #86 = Utf8               org/apache/bcel/classfile/ConstantPool\n+   #87 = Utf8               java/io/IOException\n+   #88 = Utf8               (ILorg/apache/bcel/classfile/ConstantPool;)V\n+   #89 = Utf8               ()V\n+   #90 = Utf8               append\n+   #91 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #92 = Utf8               (I)Ljava/lang/StringBuilder;\n+   #93 = Utf8               (Ljava/lang/String;)V\n+   #94 = Utf8               getType\n+   #95 = Utf8               java/io/DataOutputStream\n+   #96 = Utf8               writeByte\n+   #97 = Utf8               (I)V\n+   #98 = Utf8               writeShort\n+   #99 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n {\n   private final org.apache.bcel.classfile.ElementValue[] elementValues;\n     descriptor: [Lorg/apache/bcel/classfile/ElementValue;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.bcel.classfile.ArrayElementValue(int, org.apache.bcel.classfile.ElementValue[], org.apache.bcel.classfile.ConstantPool);\n     descriptor: (I[Lorg/apache/bcel/classfile/ElementValue;Lorg/apache/bcel/classfile/ConstantPool;)V\n"}]}
