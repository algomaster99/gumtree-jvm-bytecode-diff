{"diffoscope-json-version": 1, "source1": "first/SubnetUtils.class", "source2": "second/SubnetUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,34 +14,33 @@\n     private static final String PARSE_FAIL = \"Could not parse [%s]\";\n     private final int netmask;\n     private final int address;\n     private final int network;\n     private final int broadcast;\n     private boolean inclusiveHostCount;\n     \n-    public SubnetUtils(final String cidrNotation) {\n+    public SubnetUtils(final String input) {\n         this.inclusiveHostCount = false;\n-        final Matcher matcher = SubnetUtils.cidrPattern.matcher(cidrNotation);\n+        final Matcher matcher = SubnetUtils.cidrPattern.matcher(input);\n         if (matcher.matches()) {\n             this.address = matchAddress(matcher);\n-            final int trailingZeroes = 32 - rangeCheck(Integer.parseInt(matcher.group(5)), 0, 32);\n-            this.netmask = (int)(4294967295L << trailingZeroes);\n+            this.netmask = (int)(4294967295L << 32 - rangeCheck(Integer.parseInt(matcher.group(5)), 0, 32));\n             this.network = (this.address & this.netmask);\n             this.broadcast = (this.network | ~this.netmask);\n             return;\n         }\n-        throw new IllegalArgumentException(String.format(\"Could not parse [%s]\", cidrNotation));\n+        throw new IllegalArgumentException(String.format(\"Could not parse [%s]\", input));\n     }\n     \n-    public SubnetUtils(final String address, final String mask) {\n+    public SubnetUtils(final String s, final String s2) {\n         this.inclusiveHostCount = false;\n-        this.address = toInteger(address);\n-        this.netmask = toInteger(mask);\n+        this.address = toInteger(s);\n+        this.netmask = toInteger(s2);\n         if ((this.netmask & -this.netmask) - 1 != ~this.netmask) {\n-            throw new IllegalArgumentException(String.format(\"Could not parse [%s]\", mask));\n+            throw new IllegalArgumentException(String.format(\"Could not parse [%s]\", s2));\n         }\n         this.network = (this.address & this.netmask);\n         this.broadcast = (this.network | ~this.netmask);\n     }\n     \n     public boolean isInclusiveHostCount() {\n         return this.inclusiveHostCount;\n@@ -51,45 +50,44 @@\n         this.inclusiveHostCount = inclusiveHostCount;\n     }\n     \n     public final SubnetUtils.SubnetInfo getInfo() {\n         return new SubnetUtils.SubnetInfo(this, (SubnetUtils.SubnetUtils$1)null);\n     }\n     \n-    private static int toInteger(final String address) {\n-        final Matcher matcher = SubnetUtils.addressPattern.matcher(address);\n+    private static int toInteger(final String input) {\n+        final Matcher matcher = SubnetUtils.addressPattern.matcher(input);\n         if (matcher.matches()) {\n             return matchAddress(matcher);\n         }\n-        throw new IllegalArgumentException(String.format(\"Could not parse [%s]\", address));\n+        throw new IllegalArgumentException(String.format(\"Could not parse [%s]\", input));\n     }\n     \n     private static int matchAddress(final Matcher matcher) {\n-        int addr = 0;\n+        int n = 0;\n         for (int i = 1; i <= 4; ++i) {\n-            final int n = rangeCheck(Integer.parseInt(matcher.group(i)), 0, 255);\n-            addr |= (n & 0xFF) << 8 * (4 - i);\n+            n |= (rangeCheck(Integer.parseInt(matcher.group(i)), 0, 255) & 0xFF) << 8 * (4 - i);\n         }\n-        return addr;\n+        return n;\n     }\n     \n-    private static int rangeCheck(final int value, final int begin, final int end) {\n-        if (value >= begin && value <= end) {\n-            return value;\n+    private static int rangeCheck(final int i, final int j, final int k) {\n+        if (i >= j && i <= k) {\n+            return i;\n         }\n-        throw new IllegalArgumentException(\"Value [\" + value + \"] not in range [\" + begin + \",\" + end + \"]\");\n+        throw new IllegalArgumentException(\"Value [\" + i + \"] not in range [\" + j + \",\" + k + \"]\");\n     }\n     \n-    int pop(int x) {\n-        x -= (x >>> 1 & 0x55555555);\n-        x = (x & 0x33333333) + (x >>> 2 & 0x33333333);\n-        x = (x + (x >>> 4) & 0xF0F0F0F);\n-        x += x >>> 8;\n-        x += x >>> 16;\n-        return x & 0x3F;\n+    int pop(int n) {\n+        n -= (n >>> 1 & 0x55555555);\n+        n = (n & 0x33333333) + (n >>> 2 & 0x33333333);\n+        n = (n + (n >>> 4) & 0xF0F0F0F);\n+        n += n >>> 8;\n+        n += n >>> 16;\n+        return n & 0x3F;\n     }\n     \n     public SubnetUtils getNext() {\n         return new SubnetUtils(this.getInfo().getNextAddress(), this.getInfo().getNetmask());\n     }\n     \n     public SubnetUtils getPrevious() {\n"}]}
