{"diffoscope-json-version": 1, "source1": "first/MagicNumberFileFilter.class", "source2": "second/MagicNumberFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -48,43 +48,24 @@\n         }\n         System.arraycopy(magicNumber, 0, this.magicNumbers = new byte[magicNumber.length], 0, magicNumber.length);\n         this.byteOffset = offset;\n     }\n     \n     public boolean accept(final File file) {\n         if (file != null && file.isFile() && file.canRead()) {\n-            try {\n-                final RandomAccessFile randomAccessFile = new RandomAccessFile(file, \"r\");\n-                Throwable t = null;\n-                try {\n-                    final byte[] fileBytes = new byte[this.magicNumbers.length];\n-                    randomAccessFile.seek(this.byteOffset);\n-                    final int read = randomAccessFile.read(fileBytes);\n-                    if (read != this.magicNumbers.length) {\n-                        return false;\n-                    }\n-                    return Arrays.equals(this.magicNumbers, fileBytes);\n-                }\n-                catch (final Throwable t2) {\n-                    t = t2;\n-                    throw t2;\n-                }\n-                finally {\n-                    if (t != null) {\n-                        try {\n-                            randomAccessFile.close();\n-                        }\n-                        catch (final Throwable exception) {\n-                            t.addSuppressed(exception);\n-                        }\n-                    }\n-                    else {\n-                        randomAccessFile.close();\n-                    }\n+            try (final RandomAccessFile randomAccessFile = new RandomAccessFile(file, \"r\")) {\n+                final byte[] fileBytes = new byte[this.magicNumbers.length];\n+                randomAccessFile.seek(this.byteOffset);\n+                final int read = randomAccessFile.read(fileBytes);\n+                if (read != this.magicNumbers.length) {\n+                    final boolean b = false;\n+                    randomAccessFile.close();\n+                    return b;\n                 }\n+                return Arrays.equals(this.magicNumbers, fileBytes);\n             }\n             catch (final IOException ex) {}\n         }\n         return false;\n     }\n     \n     public String toString() {\n"}]}
