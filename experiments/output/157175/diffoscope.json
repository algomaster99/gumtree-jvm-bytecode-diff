{"diffoscope-json-version": 1, "source1": "first/DotTerminatedMessageReader.class", "source2": "second/DotTerminatedMessageReader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -24,69 +24,80 @@\n     public void close() throws IOException {\n         synchronized (this.lock) {\n             if (!this.eof) {\n                 while (this.read() != -1) {}\n             }\n             this.eof = true;\n             this.atBeginning = false;\n+            monitorexit(this.lock);\n         }\n     }\n     \n     @Override\n     public int read() throws IOException {\n         synchronized (this.lock) {\n             if (this.eof) {\n+                monitorexit(this.lock);\n                 return -1;\n             }\n             int chint = super.read();\n             if (chint == -1) {\n                 this.eof = true;\n+                monitorexit(this.lock);\n                 return -1;\n             }\n             if (this.atBeginning) {\n                 this.atBeginning = false;\n                 if (chint == 46) {\n                     this.mark(2);\n                     chint = super.read();\n                     switch (chint) {\n                         case -1: {\n                             this.eof = true;\n+                            monitorexit(this.lock);\n                             return 46;\n                         }\n                         case 46: {\n-                            return chint;\n+                            final int n = chint;\n+                            monitorexit(this.lock);\n+                            return n;\n                         }\n                         case 13: {\n                             chint = super.read();\n                             if (chint == -1) {\n                                 this.reset();\n+                                monitorexit(this.lock);\n                                 return 46;\n                             }\n                             if (chint == 10) {\n                                 this.atBeginning = true;\n                                 this.eof = true;\n+                                monitorexit(this.lock);\n                                 return -1;\n                             }\n                             break;\n                         }\n                     }\n                     this.reset();\n+                    monitorexit(this.lock);\n                     return 46;\n                 }\n             }\n             if (this.seenCR) {\n                 this.seenCR = false;\n                 if (chint == 10) {\n                     this.atBeginning = true;\n                 }\n             }\n             if (chint == 13) {\n                 this.seenCR = true;\n             }\n-            return chint;\n+            final int n2 = chint;\n+            monitorexit(this.lock);\n+            return n2;\n         }\n     }\n     \n     @Override\n     public int read(final char[] buffer) throws IOException {\n         return this.read(buffer, 0, buffer.length);\n     }\n@@ -95,35 +106,41 @@\n     public int read(final char[] buffer, int offset, int length) throws IOException {\n         if (length < 1) {\n             return 0;\n         }\n         synchronized (this.lock) {\n             int ch;\n             if ((ch = this.read()) == -1) {\n+                monitorexit(this.lock);\n                 return -1;\n             }\n             final int off = offset;\n             do {\n                 buffer[offset++] = (char)ch;\n             } while (--length > 0 && (ch = this.read()) != -1);\n-            return offset - off;\n+            final int n = offset - off;\n+            monitorexit(this.lock);\n+            return n;\n         }\n     }\n     \n     @Override\n     public String readLine() throws IOException {\n         final StringBuilder sb = new StringBuilder();\n         synchronized (this.lock) {\n             int intch;\n             while ((intch = this.read()) != -1) {\n                 if (intch == 10 && this.atBeginning) {\n-                    return sb.substring();\n+                    final String substring = sb.substring();\n+                    monitorexit(this.lock);\n+                    return substring;\n                 }\n                 sb.append((char)intch);\n             }\n+            monitorexit(this.lock);\n         }\n         final String string = sb.toString();\n         if (string.isEmpty()) {\n             return null;\n         }\n         return string;\n     }\n"}]}
