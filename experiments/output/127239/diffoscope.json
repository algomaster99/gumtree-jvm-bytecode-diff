{"diffoscope-json-version": 1, "source1": "first/PropertiesConfiguration$PropertiesWriter.class", "source2": "second/PropertiesConfiguration$PropertiesWriter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,22 +1,22 @@\n \n package org.apache.commons.configuration2;\n \n-import org.apache.commons.text.translate.AggregateTranslator;\n-import org.apache.commons.text.translate.UnicodeEscaper;\n-import org.apache.commons.text.translate.EntityArrays;\n-import org.apache.commons.text.translate.LookupTranslator;\n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.io.IOException;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.ArrayUtils;\n import java.io.Writer;\n+import org.apache.commons.text.translate.AggregateTranslator;\n+import org.apache.commons.text.translate.UnicodeEscaper;\n+import org.apache.commons.text.translate.EntityArrays;\n+import org.apache.commons.text.translate.LookupTranslator;\n+import java.util.Collections;\n+import java.util.HashMap;\n import org.apache.commons.configuration2.convert.ListDelimiterHandler;\n import org.apache.commons.configuration2.convert.ValueTransformer;\n import org.apache.commons.text.translate.CharSequenceTranslator;\n import java.util.Map;\n import java.io.FilterWriter;\n \n public static class PropertiesWriter extends FilterWriter\n@@ -26,29 +26,37 @@\n     private static final ValueTransformer DEFAULT_TRANSFORMER;\n     private final ValueTransformer valueTransformer;\n     private final ListDelimiterHandler delimiterHandler;\n     private String currentSeparator;\n     private String globalSeparator;\n     private String lineSeparator;\n     \n+    static {\n+        final Map<CharSequence, CharSequence> initialMap = new HashMap<CharSequence, CharSequence>();\n+        initialMap.put(\"\\\\\", \"\\\\\\\\\");\n+        PropertiesWriter.PROPERTIES_CHARS_ESCAPE = Collections.unmodifiableMap((Map<?, ?>)initialMap);\n+        PropertiesWriter.ESCAPE_PROPERTIES = (CharSequenceTranslator)new AggregateTranslator(new CharSequenceTranslator[] { (CharSequenceTranslator)new LookupTranslator(PropertiesWriter.PROPERTIES_CHARS_ESCAPE), (CharSequenceTranslator)new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE), (CharSequenceTranslator)UnicodeEscaper.outsideOf(32, 127) });\n+        PropertiesWriter.DEFAULT_TRANSFORMER = PropertiesWriter::lambda$0;\n+    }\n+    \n     public PropertiesWriter(final Writer writer, final ListDelimiterHandler delHandler) {\n         this(writer, delHandler, PropertiesWriter.DEFAULT_TRANSFORMER);\n     }\n     \n     public PropertiesWriter(final Writer writer, final ListDelimiterHandler delHandler, final ValueTransformer valueTransformer) {\n         super(writer);\n         this.delimiterHandler = delHandler;\n         this.valueTransformer = valueTransformer;\n     }\n     \n     protected String escapeKey(final String key) {\n         final StringBuilder newkey = new StringBuilder();\n         for (int i = 0; i < key.length(); ++i) {\n             final char c = key.charAt(i);\n-            if (ArrayUtils.contains(PropertiesConfiguration.access$000(), c) || ArrayUtils.contains(PropertiesConfiguration.access$200(), c) || c == '\\\\') {\n+            if (ArrayUtils.contains(PropertiesConfiguration.access$0(), c) || ArrayUtils.contains(PropertiesConfiguration.access$2(), c) || c == '\\\\') {\n                 newkey.append('\\\\');\n             }\n             newkey.append(c);\n         }\n         return newkey.toString();\n     }\n     \n@@ -65,15 +73,15 @@\n     }\n     \n     public String getGlobalSeparator() {\n         return this.globalSeparator;\n     }\n     \n     public String getLineSeparator() {\n-        return (this.lineSeparator != null) ? this.lineSeparator : PropertiesConfiguration.access$300();\n+        return (this.lineSeparator != null) ? this.lineSeparator : PropertiesConfiguration.access$3();\n     }\n     \n     public void setCurrentSeparator(final String currentSeparator) {\n         this.currentSeparator = currentSeparator;\n     }\n     \n     public void setGlobalSeparator(final String globalSeparator) {\n@@ -125,16 +133,8 @@\n             v = String.valueOf(this.getDelimiterHandler().escape(value, this.valueTransformer));\n         }\n         this.write(this.escapeKey(key));\n         this.write(this.fetchSeparator(key, value));\n         this.write(v);\n         this.writeln(null);\n     }\n-    \n-    static {\n-        final Map<CharSequence, CharSequence> initialMap = new HashMap<CharSequence, CharSequence>();\n-        initialMap.put(\"\\\\\", \"\\\\\\\\\");\n-        PropertiesWriter.PROPERTIES_CHARS_ESCAPE = Collections.unmodifiableMap((Map<?, ?>)initialMap);\n-        PropertiesWriter.ESCAPE_PROPERTIES = (CharSequenceTranslator)new AggregateTranslator(new CharSequenceTranslator[] { (CharSequenceTranslator)new LookupTranslator(PropertiesWriter.PROPERTIES_CHARS_ESCAPE), (CharSequenceTranslator)new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE), (CharSequenceTranslator)UnicodeEscaper.outsideOf(32, 127) });\n-        PropertiesWriter.DEFAULT_TRANSFORMER = PropertiesWriter::lambda$static$0;\n-    }\n }\n"}]}
