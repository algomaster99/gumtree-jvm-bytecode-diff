{"diffoscope-json-version": 1, "source1": "first/ReloadingCombinedConfigurationBuilder.class", "source2": "second/ReloadingCombinedConfigurationBuilder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,16 +1,15 @@\n \n package org.apache.commons.configuration2.builder.combined;\n \n import org.apache.commons.configuration2.builder.BasicConfigurationBuilder;\n import org.apache.commons.configuration2.ImmutableConfiguration;\n-import org.apache.commons.configuration2.Configuration;\n import java.util.Iterator;\n-import java.util.Collection;\n import org.apache.commons.configuration2.reloading.CombinedReloadingController;\n+import java.util.Collection;\n import java.util.LinkedList;\n import org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder;\n import org.apache.commons.configuration2.XMLConfiguration;\n import org.apache.commons.configuration2.HierarchicalConfiguration;\n import org.apache.commons.configuration2.builder.ConfigurationBuilder;\n import org.apache.commons.configuration2.ex.ConfigurationException;\n import org.apache.commons.configuration2.CombinedConfiguration;\n@@ -22,59 +21,59 @@\n public class ReloadingCombinedConfigurationBuilder extends CombinedConfigurationBuilder implements ReloadingControllerSupport\n {\n     private ReloadingController reloadingController;\n     \n     public ReloadingCombinedConfigurationBuilder() {\n     }\n     \n-    public ReloadingCombinedConfigurationBuilder(final Map<String, Object> params, final boolean allowFailOnInit) {\n-        super((Map)params, allowFailOnInit);\n+    public ReloadingCombinedConfigurationBuilder(final Map<String, Object> map, final boolean b) {\n+        super((Map)map, b);\n     }\n     \n-    public ReloadingCombinedConfigurationBuilder(final Map<String, Object> params) {\n-        super((Map)params);\n+    public ReloadingCombinedConfigurationBuilder(final Map<String, Object> map) {\n+        super((Map)map);\n     }\n     \n-    public ReloadingCombinedConfigurationBuilder configure(final BuilderParameters... params) {\n-        super.configure(params);\n+    public ReloadingCombinedConfigurationBuilder configure(final BuilderParameters... array) {\n+        super.configure(array);\n         return this;\n     }\n     \n     public synchronized ReloadingController getReloadingController() {\n         return this.reloadingController;\n     }\n     \n     public CombinedConfiguration getConfiguration() throws ConfigurationException {\n-        final CombinedConfiguration result = (CombinedConfiguration)super.getConfiguration();\n+        final CombinedConfiguration combinedConfiguration = (CombinedConfiguration)super.getConfiguration();\n         this.reloadingController.resetReloadingState();\n-        return result;\n+        return combinedConfiguration;\n     }\n     \n-    protected ConfigurationBuilder<? extends HierarchicalConfiguration<?>> createXMLDefinitionBuilder(final BuilderParameters builderParams) {\n-        return (ConfigurationBuilder<? extends HierarchicalConfiguration<?>>)new ReloadingFileBasedConfigurationBuilder((Class)XMLConfiguration.class).configure(new BuilderParameters[] { builderParams });\n+    protected ConfigurationBuilder<? extends HierarchicalConfiguration<?>> createXMLDefinitionBuilder(final BuilderParameters builderParameters) {\n+        return (ConfigurationBuilder<? extends HierarchicalConfiguration<?>>)new ReloadingFileBasedConfigurationBuilder((Class)XMLConfiguration.class).configure(new BuilderParameters[] { builderParameters });\n     }\n     \n-    protected void initResultInstance(final CombinedConfiguration result) throws ConfigurationException {\n-        super.initResultInstance(result);\n+    protected void initResultInstance(final CombinedConfiguration combinedConfiguration) throws ConfigurationException {\n+        super.initResultInstance(combinedConfiguration);\n         if (this.reloadingController == null) {\n             this.reloadingController = this.createReloadingController();\n         }\n     }\n     \n     protected ReloadingController createReloadingController() throws ConfigurationException {\n-        final Collection<ReloadingController> subControllers = new LinkedList<ReloadingController>();\n-        final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> defBuilder = (ConfigurationBuilder<? extends HierarchicalConfiguration<?>>)this.getDefinitionBuilder();\n-        obtainReloadingController(subControllers, defBuilder);\n-        for (final ConfigurationBuilder<? extends Configuration> b : this.getChildBuilders()) {\n-            obtainReloadingController(subControllers, b);\n+        final LinkedList list = new LinkedList();\n+        obtainReloadingController(list, this.getDefinitionBuilder());\n+        final Iterator iterator = this.getChildBuilders().iterator();\n+        while (iterator.hasNext()) {\n+            obtainReloadingController(list, iterator.next());\n         }\n-        final CombinedReloadingController ctrl = new CombinedReloadingController((Collection)subControllers);\n-        ctrl.resetInitialReloadingState();\n-        return (ReloadingController)ctrl;\n+        final CombinedReloadingController combinedReloadingController = new CombinedReloadingController((Collection)list);\n+        combinedReloadingController.resetInitialReloadingState();\n+        return (ReloadingController)combinedReloadingController;\n     }\n     \n-    public static void obtainReloadingController(final Collection<ReloadingController> subControllers, final Object builder) {\n-        if (builder instanceof ReloadingControllerSupport) {\n-            subControllers.add(((ReloadingControllerSupport)builder).getReloadingController());\n+    public static void obtainReloadingController(final Collection<ReloadingController> collection, final Object o) {\n+        if (o instanceof ReloadingControllerSupport) {\n+            collection.add(((ReloadingControllerSupport)o).getReloadingController());\n         }\n     }\n }\n"}]}
