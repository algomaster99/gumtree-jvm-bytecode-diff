{"diffoscope-json-version": 1, "source1": "first/ZipFile.class", "source2": "second/ZipFile.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,296 +1,296 @@\n-  SHA-256 checksum 8949c6fedbb44be84c0d2ca91070cfd490055be02e4f62e3e17256cfab2c22ce\n+  SHA-256 checksum 2740830c385ff522f656176bbbe9497396b0fe87dcfdb800bc88ec2a19150a31\n   Compiled from \"ZipFile.java\"\n public class org.apache.commons.compress.archivers.zip.ZipFile implements java.io.Closeable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #1                          // org/apache/commons/compress/archivers/zip/ZipFile\n   super_class: #285                       // java/lang/Object\n   interfaces: 1, fields: 42, methods: 49, attributes: 3\n Constant pool:\n-     #1 = Class              #565         // org/apache/commons/compress/archivers/zip/ZipFile\n-     #2 = Class              #566         // org/apache/commons/compress/archivers/zip/ZipConstants\n-     #3 = Fieldref           #1.#567      // org/apache/commons/compress/archivers/zip/ZipFile.archive:Ljava/nio/channels/SeekableByteChannel;\n-     #4 = Class              #568         // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-     #5 = String             #569         // UTF8\n-     #6 = Methodref          #1.#570      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-     #7 = Methodref          #1.#571      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n-     #8 = Class              #572         // java/io/File\n-     #9 = Methodref          #8.#573      // java/io/File.\"<init>\":(Ljava/lang/String;)V\n-    #10 = Methodref          #8.#574      // java/io/File.toPath:()Ljava/nio/file/Path;\n-    #11 = Methodref          #1.#575      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n-    #12 = Methodref          #1.#576      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n-    #13 = Fieldref           #577.#578    // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-    #14 = Methodref          #579.#580    // java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n-    #15 = Class              #581         // java/nio/file/attribute/FileAttribute\n-    #16 = Methodref          #582.#583    // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-    #17 = Methodref          #8.#584      // java/io/File.getAbsolutePath:()Ljava/lang/String;\n-    #18 = Methodref          #1.#585      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n-    #19 = InterfaceMethodref #586.#587    // java/nio/file/Path.toAbsolutePath:()Ljava/nio/file/Path;\n-    #20 = InterfaceMethodref #586.#588    // java/nio/file/Path.toString:()Ljava/lang/String;\n-    #21 = String             #589         // unknown archive\n-    #22 = Methodref          #1.#590      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n-    #23 = Methodref          #285.#591    // java/lang/Object.\"<init>\":()V\n-    #24 = Class              #592         // java/util/LinkedList\n-    #25 = Methodref          #24.#591     // java/util/LinkedList.\"<init>\":()V\n-    #26 = Fieldref           #1.#593      // org/apache/commons/compress/archivers/zip/ZipFile.entries:Ljava/util/List;\n-    #27 = Class              #594         // java/util/HashMap\n-    #28 = Methodref          #27.#595     // java/util/HashMap.\"<init>\":(I)V\n-    #29 = Fieldref           #1.#596      // org/apache/commons/compress/archivers/zip/ZipFile.nameMap:Ljava/util/Map;\n-    #30 = Fieldref           #1.#597      // org/apache/commons/compress/archivers/zip/ZipFile.closed:Z\n-    #31 = Fieldref           #1.#598      // org/apache/commons/compress/archivers/zip/ZipFile.dwordBuf:[B\n-    #32 = Fieldref           #1.#599      // org/apache/commons/compress/archivers/zip/ZipFile.wordBuf:[B\n-    #33 = Fieldref           #1.#600      // org/apache/commons/compress/archivers/zip/ZipFile.cfhBuf:[B\n-    #34 = Fieldref           #1.#601      // org/apache/commons/compress/archivers/zip/ZipFile.shortBuf:[B\n-    #35 = Methodref          #602.#603    // java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-    #36 = Fieldref           #1.#604      // org/apache/commons/compress/archivers/zip/ZipFile.dwordBbuf:Ljava/nio/ByteBuffer;\n-    #37 = Fieldref           #1.#605      // org/apache/commons/compress/archivers/zip/ZipFile.wordBbuf:Ljava/nio/ByteBuffer;\n-    #38 = Fieldref           #1.#606      // org/apache/commons/compress/archivers/zip/ZipFile.cfhBbuf:Ljava/nio/ByteBuffer;\n-    #39 = Fieldref           #1.#607      // org/apache/commons/compress/archivers/zip/ZipFile.shortBbuf:Ljava/nio/ByteBuffer;\n-    #40 = InvokeDynamic      #0:#613      // #0:applyAsLong:()Ljava/util/function/ToLongFunction;\n-    #41 = InterfaceMethodref #614.#615    // java/util/Comparator.comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-    #42 = InvokeDynamic      #1:#613      // #1:applyAsLong:()Ljava/util/function/ToLongFunction;\n-    #43 = InterfaceMethodref #614.#617    // java/util/Comparator.thenComparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-    #44 = Fieldref           #1.#618      // org/apache/commons/compress/archivers/zip/ZipFile.offsetComparator:Ljava/util/Comparator;\n-    #45 = Class              #619         // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-    #46 = Fieldref           #1.#620      // org/apache/commons/compress/archivers/zip/ZipFile.isSplitZipArchive:Z\n-    #47 = Fieldref           #1.#621      // org/apache/commons/compress/archivers/zip/ZipFile.archiveName:Ljava/lang/String;\n-    #48 = Fieldref           #1.#622      // org/apache/commons/compress/archivers/zip/ZipFile.encoding:Ljava/lang/String;\n-    #49 = Methodref          #4.#623      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-    #50 = Fieldref           #1.#624      // org/apache/commons/compress/archivers/zip/ZipFile.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-    #51 = Fieldref           #1.#625      // org/apache/commons/compress/archivers/zip/ZipFile.useUnicodeExtraFields:Z\n-    #52 = Methodref          #1.#626      // org/apache/commons/compress/archivers/zip/ZipFile.populateFromCentralDirectory:()Ljava/util/Map;\n-    #53 = Methodref          #1.#627      // org/apache/commons/compress/archivers/zip/ZipFile.resolveLocalFileHeaderData:(Ljava/util/Map;)V\n-    #54 = Methodref          #1.#628      // org/apache/commons/compress/archivers/zip/ZipFile.fillNameMap:()V\n-    #55 = Methodref          #629.#630    // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n-    #56 = Class              #631         // java/io/IOException\n-    #57 = Class              #632         // java/lang/StringBuilder\n-    #58 = Methodref          #57.#591     // java/lang/StringBuilder.\"<init>\":()V\n-    #59 = String             #633         // Error on ZipFile\n-    #60 = Methodref          #57.#634     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #61 = Methodref          #57.#588     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-    #62 = Methodref          #56.#635     // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-    #63 = InterfaceMethodref #636.#637    // java/nio/channels/SeekableByteChannel.close:()V\n-    #64 = Methodref          #638.#639    // java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n-    #65 = Fieldref           #72.#640     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.EMPTY_ZIP_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-    #66 = InterfaceMethodref #73.#641     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-    #67 = Class              #421         // \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\"\n-    #68 = Methodref          #642.#643    // java/util/Arrays.sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n-    #69 = Methodref          #642.#644    // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-    #70 = InterfaceMethodref #645.#646    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-    #71 = Methodref          #24.#647     // java/util/LinkedList.getFirst:()Ljava/lang/Object;\n-    #72 = Class              #648         // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-    #73 = Class              #649         // java/util/List\n-    #74 = Methodref          #638.#650    // java/util/Collections.emptyList:()Ljava/util/List;\n-    #75 = InterfaceMethodref #645.#651    // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-    #76 = Methodref          #24.#641     // java/util/LinkedList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-    #77 = Methodref          #652.#653    // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-    #78 = Class              #654         // org/apache/commons/compress/archivers/zip/ZipFile$Entry\n-    #79 = Methodref          #72.#655     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n-    #80 = Class              #656         // org/apache/commons/compress/archivers/EntryStreamOffsets\n+     #1 = Class              #553         // org/apache/commons/compress/archivers/zip/ZipFile\n+     #2 = Class              #554         // org/apache/commons/compress/archivers/zip/ZipConstants\n+     #3 = Fieldref           #1.#555      // org/apache/commons/compress/archivers/zip/ZipFile.archive:Ljava/nio/channels/SeekableByteChannel;\n+     #4 = Class              #556         // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+     #5 = String             #557         // UTF8\n+     #6 = Methodref          #1.#558      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+     #7 = Methodref          #1.#559      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n+     #8 = Class              #560         // java/io/File\n+     #9 = Methodref          #8.#561      // java/io/File.\"<init>\":(Ljava/lang/String;)V\n+    #10 = Methodref          #8.#562      // java/io/File.toPath:()Ljava/nio/file/Path;\n+    #11 = Methodref          #1.#563      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n+    #12 = Methodref          #1.#564      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n+    #13 = Fieldref           #565.#566    // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+    #14 = Methodref          #567.#568    // java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n+    #15 = Class              #569         // java/nio/file/attribute/FileAttribute\n+    #16 = Methodref          #570.#571    // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+    #17 = Methodref          #8.#572      // java/io/File.getAbsolutePath:()Ljava/lang/String;\n+    #18 = Methodref          #1.#573      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n+    #19 = InterfaceMethodref #574.#575    // java/nio/file/Path.toAbsolutePath:()Ljava/nio/file/Path;\n+    #20 = InterfaceMethodref #574.#576    // java/nio/file/Path.toString:()Ljava/lang/String;\n+    #21 = String             #577         // unknown archive\n+    #22 = Methodref          #1.#578      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n+    #23 = Methodref          #285.#579    // java/lang/Object.\"<init>\":()V\n+    #24 = Class              #580         // java/util/LinkedList\n+    #25 = Methodref          #24.#579     // java/util/LinkedList.\"<init>\":()V\n+    #26 = Fieldref           #1.#581      // org/apache/commons/compress/archivers/zip/ZipFile.entries:Ljava/util/List;\n+    #27 = Class              #582         // java/util/HashMap\n+    #28 = Methodref          #27.#583     // java/util/HashMap.\"<init>\":(I)V\n+    #29 = Fieldref           #1.#584      // org/apache/commons/compress/archivers/zip/ZipFile.nameMap:Ljava/util/Map;\n+    #30 = Fieldref           #1.#585      // org/apache/commons/compress/archivers/zip/ZipFile.closed:Z\n+    #31 = Fieldref           #1.#586      // org/apache/commons/compress/archivers/zip/ZipFile.dwordBuf:[B\n+    #32 = Fieldref           #1.#587      // org/apache/commons/compress/archivers/zip/ZipFile.wordBuf:[B\n+    #33 = Fieldref           #1.#588      // org/apache/commons/compress/archivers/zip/ZipFile.cfhBuf:[B\n+    #34 = Fieldref           #1.#589      // org/apache/commons/compress/archivers/zip/ZipFile.shortBuf:[B\n+    #35 = Methodref          #590.#591    // java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n+    #36 = Fieldref           #1.#592      // org/apache/commons/compress/archivers/zip/ZipFile.dwordBbuf:Ljava/nio/ByteBuffer;\n+    #37 = Fieldref           #1.#593      // org/apache/commons/compress/archivers/zip/ZipFile.wordBbuf:Ljava/nio/ByteBuffer;\n+    #38 = Fieldref           #1.#594      // org/apache/commons/compress/archivers/zip/ZipFile.cfhBbuf:Ljava/nio/ByteBuffer;\n+    #39 = Fieldref           #1.#595      // org/apache/commons/compress/archivers/zip/ZipFile.shortBbuf:Ljava/nio/ByteBuffer;\n+    #40 = InvokeDynamic      #0:#601      // #0:applyAsLong:()Ljava/util/function/ToLongFunction;\n+    #41 = InterfaceMethodref #602.#603    // java/util/Comparator.comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+    #42 = InvokeDynamic      #1:#601      // #1:applyAsLong:()Ljava/util/function/ToLongFunction;\n+    #43 = InterfaceMethodref #602.#605    // java/util/Comparator.thenComparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+    #44 = Fieldref           #1.#606      // org/apache/commons/compress/archivers/zip/ZipFile.offsetComparator:Ljava/util/Comparator;\n+    #45 = Class              #607         // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+    #46 = Fieldref           #1.#608      // org/apache/commons/compress/archivers/zip/ZipFile.isSplitZipArchive:Z\n+    #47 = Fieldref           #1.#609      // org/apache/commons/compress/archivers/zip/ZipFile.archiveName:Ljava/lang/String;\n+    #48 = Fieldref           #1.#610      // org/apache/commons/compress/archivers/zip/ZipFile.encoding:Ljava/lang/String;\n+    #49 = Methodref          #4.#611      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+    #50 = Fieldref           #1.#612      // org/apache/commons/compress/archivers/zip/ZipFile.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+    #51 = Fieldref           #1.#613      // org/apache/commons/compress/archivers/zip/ZipFile.useUnicodeExtraFields:Z\n+    #52 = Methodref          #1.#614      // org/apache/commons/compress/archivers/zip/ZipFile.populateFromCentralDirectory:()Ljava/util/Map;\n+    #53 = Methodref          #1.#615      // org/apache/commons/compress/archivers/zip/ZipFile.resolveLocalFileHeaderData:(Ljava/util/Map;)V\n+    #54 = Methodref          #1.#616      // org/apache/commons/compress/archivers/zip/ZipFile.fillNameMap:()V\n+    #55 = Methodref          #617.#618    // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n+    #56 = Class              #619         // java/io/IOException\n+    #57 = Class              #620         // java/lang/StringBuilder\n+    #58 = Methodref          #57.#579     // java/lang/StringBuilder.\"<init>\":()V\n+    #59 = String             #621         // Error on ZipFile\n+    #60 = Methodref          #57.#622     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+    #61 = Methodref          #57.#576     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+    #62 = Methodref          #56.#623     // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+    #63 = InterfaceMethodref #403.#624    // java/nio/channels/SeekableByteChannel.close:()V\n+    #64 = Methodref          #625.#626    // java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n+    #65 = Fieldref           #72.#627     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.EMPTY_ZIP_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+    #66 = InterfaceMethodref #73.#628     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+    #67 = Class              #418         // \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\"\n+    #68 = Methodref          #629.#630    // java/util/Arrays.sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n+    #69 = Methodref          #629.#631    // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+    #70 = InterfaceMethodref #405.#632    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+    #71 = Methodref          #24.#633     // java/util/LinkedList.getFirst:()Ljava/lang/Object;\n+    #72 = Class              #634         // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+    #73 = Class              #635         // java/util/List\n+    #74 = Methodref          #625.#636    // java/util/Collections.emptyList:()Ljava/util/List;\n+    #75 = InterfaceMethodref #405.#637    // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+    #76 = Methodref          #24.#628     // java/util/LinkedList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+    #77 = Methodref          #638.#639    // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+    #78 = Class              #640         // org/apache/commons/compress/archivers/zip/ZipFile$Entry\n+    #79 = Methodref          #72.#641     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n+    #80 = Class              #642         // org/apache/commons/compress/archivers/EntryStreamOffsets\n     #81 = Long               -1l\n-    #83 = Methodref          #72.#657     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-    #84 = Methodref          #1.#658      // org/apache/commons/compress/archivers/zip/ZipFile.createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n-    #85 = Methodref          #1.#659      // org/apache/commons/compress/archivers/zip/ZipFile.getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n-    #86 = InterfaceMethodref #660.#661    // java/util/Enumeration.hasMoreElements:()Z\n-    #87 = InterfaceMethodref #660.#662    // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n-    #88 = InterfaceMethodref #663.#664    // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate.test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-    #89 = Methodref          #1.#665      // org/apache/commons/compress/archivers/zip/ZipFile.getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-    #90 = Methodref          #666.#667    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-    #91 = Methodref          #652.#668    // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-    #92 = Methodref          #1.#669      // org/apache/commons/compress/archivers/zip/ZipFile.getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-    #93 = Class              #670         // java/io/BufferedInputStream\n-    #94 = Methodref          #93.#671     // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-    #95 = Fieldref           #287.#672    // org/apache/commons/compress/archivers/zip/ZipFile$2.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n-    #96 = Methodref          #72.#673     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-    #97 = Methodref          #674.#675    // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-    #98 = Methodref          #674.#676    // org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n-    #99 = Class              #677         // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n-   #100 = Methodref          #99.#671     // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #101 = Class              #678         // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-   #102 = Methodref          #101.#671    // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #103 = Class              #679         // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-   #104 = Methodref          #72.#680     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #105 = Methodref          #681.#682    // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n-   #106 = Methodref          #681.#683    // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n-   #107 = Methodref          #103.#684    // org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n-   #108 = Class              #685         // java/lang/IllegalArgumentException\n-   #109 = String             #686         // bad IMPLODE data\n-   #110 = Class              #687         // java/util/zip/Inflater\n-   #111 = Methodref          #110.#688    // java/util/zip/Inflater.\"<init>\":(Z)V\n-   #112 = Class              #689         // org/apache/commons/compress/archivers/zip/ZipFile$1\n-   #113 = Class              #690         // java/io/SequenceInputStream\n-   #114 = Class              #691         // java/io/ByteArrayInputStream\n-   #115 = Fieldref           #1.#692      // org/apache/commons/compress/archivers/zip/ZipFile.ONE_ZERO_BYTE:[B\n-   #116 = Methodref          #114.#693    // java/io/ByteArrayInputStream.\"<init>\":([B)V\n-   #117 = Methodref          #113.#694    // java/io/SequenceInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n-   #118 = Methodref          #112.#695    // org/apache/commons/compress/archivers/zip/ZipFile$1.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n-   #119 = Class              #696         // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-   #120 = Methodref          #119.#671    // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #121 = Class              #697         // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-   #122 = Methodref          #121.#671    // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #123 = Class              #698         // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-   #124 = Methodref          #123.#699    // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #125 = Methodref          #72.#700     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z\n-   #126 = Methodref          #1.#701      // org/apache/commons/compress/archivers/zip/ZipFile.getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-   #127 = Methodref          #629.#702    // org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n-   #128 = InterfaceMethodref #703.#704    // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #129 = Methodref          #705.#637    // java/io/InputStream.close:()V\n-   #130 = Class              #706         // java/lang/Throwable\n-   #131 = Methodref          #130.#707    // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #132 = Fieldref           #708.#709    // java/lang/System.err:Ljava/io/PrintStream;\n-   #133 = String             #710         // Cleaning up unclosed ZipFile for archive\n-   #134 = Methodref          #711.#712    // java/io/PrintStream.println:(Ljava/lang/String;)V\n-   #135 = Methodref          #1.#637      // org/apache/commons/compress/archivers/zip/ZipFile.close:()V\n-   #136 = Methodref          #285.#713    // java/lang/Object.finalize:()V\n-   #137 = Methodref          #27.#591     // java/util/HashMap.\"<init>\":()V\n-   #138 = Methodref          #1.#714      // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory:()V\n-   #139 = InterfaceMethodref #636.#715    // java/nio/channels/SeekableByteChannel.position:()J\n-   #140 = Fieldref           #1.#716      // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartOffset:J\n-   #141 = Methodref          #602.#717    // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-   #142 = Methodref          #629.#718    // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-   #143 = Methodref          #719.#720    // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-   #144 = Fieldref           #1.#721      // org/apache/commons/compress/archivers/zip/ZipFile.CFH_SIG:J\n-   #145 = Methodref          #1.#722      // org/apache/commons/compress/archivers/zip/ZipFile.startsWithLocalFileHeader:()Z\n-   #146 = String             #723         // Central directory is empty, can\\'t expand corrupt archive.\n-   #147 = Methodref          #56.#573     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #148 = Methodref          #1.#724      // org/apache/commons/compress/archivers/zip/ZipFile.readCentralDirectoryEntry:(Ljava/util/Map;)V\n-   #149 = Methodref          #78.#591     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.\"<init>\":()V\n-   #150 = Methodref          #725.#726    // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-   #151 = Methodref          #78.#727     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V\n-   #152 = Methodref          #78.#728     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V\n-   #153 = Methodref          #78.#729     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V\n-   #154 = Methodref          #681.#730    // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #155 = Methodref          #681.#731    // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n-   #156 = Fieldref           #4.#732      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #157 = Fieldref           #733.#734    // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-   #158 = Methodref          #78.#735     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-   #159 = Methodref          #78.#736     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-   #160 = Methodref          #78.#737     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V\n-   #161 = Methodref          #78.#738     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V\n-   #162 = Methodref          #719.#739    // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-   #163 = Methodref          #652.#740    // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n-   #164 = Methodref          #78.#741     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V\n-   #165 = Methodref          #78.#742     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V\n-   #166 = String             #743         // broken archive, entry with negative compressed size\n-   #167 = Methodref          #78.#744     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V\n-   #168 = String             #745         // broken archive, entry with negative size\n-   #169 = Methodref          #78.#746     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V\n-   #170 = String             #747         // broken archive, entry with negative fileNameLen\n-   #171 = String             #748         // broken archive, entry with negative extraLen\n-   #172 = String             #749         // broken archive, entry with negative commentLen\n-   #173 = Methodref          #78.#750     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDiskNumberStart:(J)V\n-   #174 = Methodref          #78.#751     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V\n-   #175 = Methodref          #78.#752     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V\n-   #176 = Methodref          #629.#753    // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n-   #177 = Class              #754         // java/io/EOFException\n-   #178 = Methodref          #177.#591    // java/io/EOFException.\"<init>\":()V\n-   #179 = Methodref          #78.#755     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V\n-   #180 = Methodref          #78.#756     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V\n-   #181 = InterfaceMethodref #73.#757     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #182 = Methodref          #78.#758     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V\n-   #183 = Class              #759         // java/lang/RuntimeException\n-   #184 = Class              #760         // java/util/zip/ZipException\n-   #185 = String             #761         // Invalid extra data in entry\n-   #186 = Methodref          #78.#762     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.getName:()Ljava/lang/String;\n-   #187 = Methodref          #184.#573    // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #188 = Methodref          #184.#763    // java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-   #189 = Methodref          #1.#764      // org/apache/commons/compress/archivers/zip/ZipFile.setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #190 = Methodref          #1.#765      // org/apache/commons/compress/archivers/zip/ZipFile.sanityCheckLFHOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #191 = Methodref          #78.#766     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V\n-   #192 = Class              #767         // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n-   #193 = Methodref          #192.#768    // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.\"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-   #194 = InterfaceMethodref #645.#769    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #195 = Methodref          #78.#770     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V\n-   #196 = Methodref          #72.#771     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n-   #197 = String             #772         // broken archive, entry with negative disk number\n-   #198 = Methodref          #72.#773     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-   #199 = String             #774         // broken archive, entry with negative local file header offset\n-   #200 = Fieldref           #1.#775      // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartDiskNumber:J\n-   #201 = String             #776         // local file header for\n-   #202 = Methodref          #72.#762     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-   #203 = String             #777         //  starts on a later disk than central directory\n-   #204 = Fieldref           #1.#778      // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartRelativeOffset:J\n-   #205 = String             #779         //  starts after central directory\n-   #206 = Fieldref           #208.#780    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #207 = Methodref          #72.#781     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-   #208 = Class              #782         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #209 = String             #783         // archive contains unparseable zip64 extra field\n-   #210 = Methodref          #72.#784     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+    #83 = Methodref          #72.#643     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+    #84 = Methodref          #1.#644      // org/apache/commons/compress/archivers/zip/ZipFile.createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n+    #85 = Methodref          #1.#645      // org/apache/commons/compress/archivers/zip/ZipFile.getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n+    #86 = InterfaceMethodref #444.#646    // java/util/Enumeration.hasMoreElements:()Z\n+    #87 = InterfaceMethodref #444.#647    // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n+    #88 = InterfaceMethodref #648.#649    // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate.test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+    #89 = Methodref          #1.#650      // org/apache/commons/compress/archivers/zip/ZipFile.getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+    #90 = Methodref          #651.#652    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+    #91 = Methodref          #638.#653    // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+    #92 = Methodref          #1.#654      // org/apache/commons/compress/archivers/zip/ZipFile.getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+    #93 = Class              #655         // java/io/BufferedInputStream\n+    #94 = Methodref          #93.#656     // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+    #95 = Fieldref           #287.#657    // org/apache/commons/compress/archivers/zip/ZipFile$2.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+    #96 = Methodref          #72.#658     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+    #97 = Methodref          #659.#660    // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+    #98 = Methodref          #659.#661    // org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n+    #99 = Class              #662         // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n+   #100 = Methodref          #99.#656     // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #101 = Class              #663         // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+   #102 = Methodref          #101.#656    // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #103 = Class              #664         // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+   #104 = Methodref          #72.#665     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #105 = Methodref          #484.#666    // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n+   #106 = Methodref          #484.#667    // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n+   #107 = Methodref          #103.#668    // org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n+   #108 = Class              #669         // java/lang/IllegalArgumentException\n+   #109 = String             #670         // bad IMPLODE data\n+   #110 = Class              #671         // java/util/zip/Inflater\n+   #111 = Methodref          #110.#672    // java/util/zip/Inflater.\"<init>\":(Z)V\n+   #112 = Class              #673         // org/apache/commons/compress/archivers/zip/ZipFile$1\n+   #113 = Class              #674         // java/io/SequenceInputStream\n+   #114 = Class              #675         // java/io/ByteArrayInputStream\n+   #115 = Fieldref           #1.#676      // org/apache/commons/compress/archivers/zip/ZipFile.ONE_ZERO_BYTE:[B\n+   #116 = Methodref          #114.#677    // java/io/ByteArrayInputStream.\"<init>\":([B)V\n+   #117 = Methodref          #113.#678    // java/io/SequenceInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n+   #118 = Methodref          #112.#679    // org/apache/commons/compress/archivers/zip/ZipFile$1.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n+   #119 = Class              #680         // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+   #120 = Methodref          #119.#656    // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #121 = Class              #681         // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+   #122 = Methodref          #121.#656    // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #123 = Class              #682         // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+   #124 = Methodref          #123.#683    // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #125 = Methodref          #72.#684     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z\n+   #126 = Methodref          #1.#685      // org/apache/commons/compress/archivers/zip/ZipFile.getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+   #127 = Methodref          #617.#686    // org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n+   #128 = InterfaceMethodref #485.#687    // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+   #129 = Methodref          #452.#624    // java/io/InputStream.close:()V\n+   #130 = Class              #688         // java/lang/Throwable\n+   #131 = Methodref          #130.#689    // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+   #132 = Fieldref           #690.#691    // java/lang/System.err:Ljava/io/PrintStream;\n+   #133 = String             #692         // Cleaning up unclosed ZipFile for archive\n+   #134 = Methodref          #693.#694    // java/io/PrintStream.println:(Ljava/lang/String;)V\n+   #135 = Methodref          #1.#624      // org/apache/commons/compress/archivers/zip/ZipFile.close:()V\n+   #136 = Methodref          #285.#695    // java/lang/Object.finalize:()V\n+   #137 = Methodref          #27.#579     // java/util/HashMap.\"<init>\":()V\n+   #138 = Methodref          #1.#696      // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory:()V\n+   #139 = InterfaceMethodref #403.#697    // java/nio/channels/SeekableByteChannel.position:()J\n+   #140 = Fieldref           #1.#698      // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartOffset:J\n+   #141 = Methodref          #590.#699    // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+   #142 = Methodref          #617.#700    // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+   #143 = Methodref          #701.#702    // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+   #144 = Fieldref           #1.#703      // org/apache/commons/compress/archivers/zip/ZipFile.CFH_SIG:J\n+   #145 = Methodref          #1.#704      // org/apache/commons/compress/archivers/zip/ZipFile.startsWithLocalFileHeader:()Z\n+   #146 = String             #705         // Central directory is empty, can\\'t expand corrupt archive.\n+   #147 = Methodref          #56.#561     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #148 = Methodref          #1.#706      // org/apache/commons/compress/archivers/zip/ZipFile.readCentralDirectoryEntry:(Ljava/util/Map;)V\n+   #149 = Methodref          #78.#579     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.\"<init>\":()V\n+   #150 = Methodref          #707.#708    // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+   #151 = Methodref          #78.#709     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V\n+   #152 = Methodref          #78.#710     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V\n+   #153 = Methodref          #78.#711     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V\n+   #154 = Methodref          #484.#712    // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #155 = Methodref          #484.#713    // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n+   #156 = Fieldref           #4.#714      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #157 = Fieldref           #715.#716    // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+   #158 = Methodref          #78.#717     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+   #159 = Methodref          #78.#718     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+   #160 = Methodref          #78.#719     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V\n+   #161 = Methodref          #78.#720     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V\n+   #162 = Methodref          #701.#721    // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+   #163 = Methodref          #638.#722    // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n+   #164 = Methodref          #78.#723     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V\n+   #165 = Methodref          #78.#724     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V\n+   #166 = String             #725         // broken archive, entry with negative compressed size\n+   #167 = Methodref          #78.#726     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V\n+   #168 = String             #727         // broken archive, entry with negative size\n+   #169 = Methodref          #78.#728     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V\n+   #170 = String             #729         // broken archive, entry with negative fileNameLen\n+   #171 = String             #730         // broken archive, entry with negative extraLen\n+   #172 = String             #731         // broken archive, entry with negative commentLen\n+   #173 = Methodref          #78.#732     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDiskNumberStart:(J)V\n+   #174 = Methodref          #78.#733     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V\n+   #175 = Methodref          #78.#734     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V\n+   #176 = Methodref          #617.#735    // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n+   #177 = Class              #736         // java/io/EOFException\n+   #178 = Methodref          #177.#579    // java/io/EOFException.\"<init>\":()V\n+   #179 = Methodref          #78.#737     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V\n+   #180 = Methodref          #78.#738     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V\n+   #181 = InterfaceMethodref #73.#739     // java/util/List.add:(Ljava/lang/Object;)Z\n+   #182 = Methodref          #78.#740     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V\n+   #183 = Class              #741         // java/lang/RuntimeException\n+   #184 = Class              #742         // java/util/zip/ZipException\n+   #185 = String             #743         // Invalid extra data in entry\n+   #186 = Methodref          #78.#744     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.getName:()Ljava/lang/String;\n+   #187 = Methodref          #184.#561    // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+   #188 = Methodref          #184.#745    // java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+   #189 = Methodref          #1.#746      // org/apache/commons/compress/archivers/zip/ZipFile.setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #190 = Methodref          #1.#747      // org/apache/commons/compress/archivers/zip/ZipFile.sanityCheckLFHOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #191 = Methodref          #78.#748     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V\n+   #192 = Class              #749         // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n+   #193 = Methodref          #192.#750    // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.\"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+   #194 = InterfaceMethodref #405.#751    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #195 = Methodref          #78.#752     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V\n+   #196 = Methodref          #72.#753     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+   #197 = String             #754         // broken archive, entry with negative disk number\n+   #198 = Methodref          #72.#755     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+   #199 = String             #756         // broken archive, entry with negative local file header offset\n+   #200 = Fieldref           #1.#757      // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartDiskNumber:J\n+   #201 = String             #758         // local file header for\n+   #202 = Methodref          #72.#744     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+   #203 = String             #759         //  starts on a later disk than central directory\n+   #204 = Fieldref           #1.#760      // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartRelativeOffset:J\n+   #205 = String             #761         //  starts after central directory\n+   #206 = Fieldref           #208.#762    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #207 = Methodref          #72.#763     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+   #208 = Class              #764         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+   #209 = String             #765         // archive contains unparseable zip64 extra field\n+   #210 = Methodref          #72.#766     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n    #211 = Long               4294967295l\n    #213 = Long               65535l\n-   #215 = Methodref          #208.#785    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V\n-   #216 = Methodref          #208.#786    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #217 = Methodref          #219.#787    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-   #218 = Methodref          #72.#746     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n-   #219 = Class              #788         // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-   #220 = Methodref          #219.#789    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-   #221 = Methodref          #208.#790    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #222 = Methodref          #208.#791    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #223 = Methodref          #72.#744     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n-   #224 = Methodref          #208.#792    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #225 = Methodref          #208.#793    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #226 = Methodref          #72.#756     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n-   #227 = Methodref          #208.#794    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #228 = Methodref          #719.#795    // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-   #229 = Methodref          #72.#750     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDiskNumberStart:(J)V\n-   #230 = Methodref          #1.#796      // org/apache/commons/compress/archivers/zip/ZipFile.positionAtEndOfCentralDirectoryRecord:()V\n+   #215 = Methodref          #208.#767    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V\n+   #216 = Methodref          #208.#768    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #217 = Methodref          #219.#769    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+   #218 = Methodref          #72.#728     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+   #219 = Class              #770         // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #220 = Methodref          #219.#771    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+   #221 = Methodref          #208.#772    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #222 = Methodref          #208.#773    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #223 = Methodref          #72.#726     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+   #224 = Methodref          #208.#774    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #225 = Methodref          #208.#775    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #226 = Methodref          #72.#738     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n+   #227 = Methodref          #208.#776    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #228 = Methodref          #701.#777    // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+   #229 = Methodref          #72.#732     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDiskNumberStart:(J)V\n+   #230 = Methodref          #1.#778      // org/apache/commons/compress/archivers/zip/ZipFile.positionAtEndOfCentralDirectoryRecord:()V\n    #231 = Long               20l\n-   #233 = InterfaceMethodref #636.#797    // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #234 = Fieldref           #666.#798    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n-   #235 = Methodref          #642.#799    // java/util/Arrays.equals:([B[B)Z\n-   #236 = Methodref          #1.#800      // org/apache/commons/compress/archivers/zip/ZipFile.skipBytes:(I)V\n-   #237 = Methodref          #1.#801      // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory32:()V\n-   #238 = Methodref          #1.#802      // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory64:()V\n-   #239 = Methodref          #219.#803    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n-   #240 = Methodref          #45.#804     // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n-   #241 = Fieldref           #666.#805    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n-   #242 = String             #806         // Archive\\'s ZIP64 end of central directory locator is corrupt.\n-   #243 = Methodref          #725.#807    // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+   #233 = InterfaceMethodref #403.#779    // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #234 = Fieldref           #651.#780    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n+   #235 = Methodref          #629.#781    // java/util/Arrays.equals:([B[B)Z\n+   #236 = Methodref          #1.#782      // org/apache/commons/compress/archivers/zip/ZipFile.skipBytes:(I)V\n+   #237 = Methodref          #1.#783      // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory32:()V\n+   #238 = Methodref          #1.#784      // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory64:()V\n+   #239 = Methodref          #219.#785    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+   #240 = Methodref          #45.#786     // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+   #241 = Fieldref           #651.#787    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n+   #242 = String             #788         // Archive\\'s ZIP64 end of central directory locator is corrupt.\n+   #243 = Methodref          #707.#789    // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n    #244 = Long               22l\n    #246 = Long               65557l\n-   #248 = Fieldref           #666.#808    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n-   #249 = Methodref          #1.#809      // org/apache/commons/compress/archivers/zip/ZipFile.tryToLocateSignature:(JJ[B)Z\n-   #250 = String             #810         // Archive is not a ZIP archive\n-   #251 = InterfaceMethodref #636.#811    // java/nio/channels/SeekableByteChannel.size:()J\n-   #252 = Methodref          #812.#813    // java/lang/Math.max:(JJ)J\n-   #253 = Methodref          #602.#814    // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n-   #254 = Methodref          #602.#815    // java/nio/ByteBuffer.get:()B\n-   #255 = InterfaceMethodref #73.#816     // java/util/List.iterator:()Ljava/util/Iterator;\n-   #256 = InterfaceMethodref #817.#818    // java/util/Iterator.hasNext:()Z\n-   #257 = InterfaceMethodref #817.#819    // java/util/Iterator.next:()Ljava/lang/Object;\n-   #258 = Methodref          #1.#820      // org/apache/commons/compress/archivers/zip/ZipFile.setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n-   #259 = Methodref          #78.#821     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V\n-   #260 = Methodref          #192.#822    // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-   #261 = Methodref          #192.#823    // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-   #262 = Methodref          #652.#824    // org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-   #263 = InvokeDynamic      #2:#828      // #2:accept:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n-   #264 = InterfaceMethodref #73.#829     // java/util/List.forEach:(Ljava/util/function/Consumer;)V\n+   #248 = Fieldref           #651.#790    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+   #249 = Methodref          #1.#791      // org/apache/commons/compress/archivers/zip/ZipFile.tryToLocateSignature:(JJ[B)Z\n+   #250 = String             #792         // Archive is not a ZIP archive\n+   #251 = InterfaceMethodref #403.#793    // java/nio/channels/SeekableByteChannel.size:()J\n+   #252 = Methodref          #794.#795    // java/lang/Math.max:(JJ)J\n+   #253 = Methodref          #590.#796    // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+   #254 = Methodref          #590.#797    // java/nio/ByteBuffer.get:()B\n+   #255 = InterfaceMethodref #73.#798     // java/util/List.iterator:()Ljava/util/Iterator;\n+   #256 = InterfaceMethodref #528.#799    // java/util/Iterator.hasNext:()Z\n+   #257 = InterfaceMethodref #528.#800    // java/util/Iterator.next:()Ljava/lang/Object;\n+   #258 = Methodref          #1.#801      // org/apache/commons/compress/archivers/zip/ZipFile.setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n+   #259 = Methodref          #78.#802     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V\n+   #260 = Methodref          #192.#803    // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+   #261 = Methodref          #192.#804    // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+   #262 = Methodref          #638.#805    // org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+   #263 = InvokeDynamic      #2:#809      // #2:accept:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n+   #264 = InterfaceMethodref #73.#810     // java/util/List.forEach:(Ljava/util/function/Consumer;)V\n    #265 = Long               26l\n-   #267 = Methodref          #602.#830    // java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n+   #267 = Methodref          #590.#811    // java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n    #268 = Long               2l\n-   #270 = Methodref          #72.#831     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n-   #271 = String             #832         // data for\n-   #272 = String             #833         //  overlaps with central directory.\n-   #273 = Fieldref           #666.#834    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n-   #274 = String             #835         // Corrupted archive, stream boundaries are out of range\n-   #275 = Methodref          #108.#573    // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #276 = Class              #836         // java/nio/channels/FileChannel\n-   #277 = Class              #837         // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n-   #278 = Methodref          #277.#838    // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-   #279 = Class              #839         // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n-   #280 = Methodref          #279.#840    // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n-   #281 = InvokeDynamic      #3:#844      // #3:apply:()Ljava/util/function/Function;\n-   #282 = InterfaceMethodref #645.#845    // java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n-   #283 = Methodref          #24.#846     // java/util/LinkedList.addLast:(Ljava/lang/Object;)V\n-   #284 = Fieldref           #666.#847    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n-   #285 = Class              #848         // java/lang/Object\n-   #286 = Class              #849         // java/io/Closeable\n-   #287 = Class              #850         // org/apache/commons/compress/archivers/zip/ZipFile$2\n+   #270 = Methodref          #72.#812     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n+   #271 = String             #813         // data for\n+   #272 = String             #814         //  overlaps with central directory.\n+   #273 = Fieldref           #651.#815    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+   #274 = String             #816         // Corrupted archive, stream boundaries are out of range\n+   #275 = Methodref          #108.#561    // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #276 = Class              #817         // java/nio/channels/FileChannel\n+   #277 = Class              #818         // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n+   #278 = Methodref          #277.#819    // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+   #279 = Class              #820         // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n+   #280 = Methodref          #279.#821    // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n+   #281 = InvokeDynamic      #3:#825      // #3:apply:()Ljava/util/function/Function;\n+   #282 = InterfaceMethodref #405.#826    // java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n+   #283 = Methodref          #24.#827     // java/util/LinkedList.addLast:(Ljava/lang/Object;)V\n+   #284 = Fieldref           #651.#828    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n+   #285 = Class              #829         // java/lang/Object\n+   #286 = Class              #830         // java/io/Closeable\n+   #287 = Class              #831         // org/apache/commons/compress/archivers/zip/ZipFile$2\n    #288 = Utf8               InnerClasses\n    #289 = Utf8               StoredStatisticsStream\n    #290 = Utf8               Entry\n    #291 = Utf8               NameAndComment\n    #292 = Utf8               BoundedFileChannelInputStream\n    #293 = Utf8               HASH_SIZE\n    #294 = Utf8               I\n@@ -398,685 +398,666 @@\n    #396 = Utf8               e\n    #397 = Utf8               Ljava/io/IOException;\n    #398 = Utf8               closeOnError\n    #399 = Utf8               success\n    #400 = Utf8               LocalVariableTypeTable\n    #401 = Utf8               Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n    #402 = Utf8               StackMapTable\n-   #403 = Class              #565         // org/apache/commons/compress/archivers/zip/ZipFile\n-   #404 = Class              #851         // java/nio/channels/SeekableByteChannel\n-   #405 = Class              #852         // java/lang/String\n-   #406 = Class              #853         // java/util/Map\n-   #407 = Class              #631         // java/io/IOException\n-   #408 = Class              #706         // java/lang/Throwable\n-   #409 = Utf8               getEncoding\n-   #410 = Utf8               ()Ljava/lang/String;\n-   #411 = Utf8               close\n-   #412 = Utf8               ()V\n-   #413 = Utf8               closeQuietly\n-   #414 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n-   #415 = Utf8               zipfile\n-   #416 = Utf8               getEntries\n-   #417 = Utf8               ()Ljava/util/Enumeration;\n-   #418 = Utf8               ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-   #419 = Utf8               getEntriesInPhysicalOrder\n-   #420 = Utf8               allEntries\n-   #421 = Utf8               [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #422 = Utf8               getEntry\n-   #423 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #424 = Utf8               entriesOfThatName\n-   #425 = Utf8               Ljava/util/LinkedList;\n-   #426 = Utf8               Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-   #427 = Class              #592         // java/util/LinkedList\n-   #428 = Class              #648         // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-   #429 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable;\n-   #430 = Class              #649         // java/util/List\n-   #431 = Class              #854         // java/lang/Iterable\n-   #432 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-   #433 = Utf8               canReadEntryData\n-   #434 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #435 = Utf8               ze\n-   #436 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #437 = Utf8               getRawInputStream\n-   #438 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-   #439 = Utf8               start\n-   #440 = Utf8               copyRawEntries\n-   #441 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;)V\n-   #442 = Utf8               entry\n-   #443 = Utf8               target\n-   #444 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;\n-   #445 = Utf8               predicate\n-   #446 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;\n-   #447 = Utf8               src\n-   #448 = Utf8               Ljava/util/Enumeration;\n-   #449 = Utf8               Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-   #450 = Class              #855         // java/util/Enumeration\n-   #451 = Utf8               getInputStream\n-   #452 = Utf8               ex\n-   #453 = Utf8               Ljava/lang/IllegalArgumentException;\n-   #454 = Utf8               inflater\n-   #455 = Utf8               Ljava/util/zip/Inflater;\n-   #456 = Utf8               is\n-   #457 = Utf8               Ljava/io/InputStream;\n-   #458 = Class              #856         // java/io/InputStream\n-   #459 = Class              #685         // java/lang/IllegalArgumentException\n-   #460 = Utf8               getUnixSymlink\n-   #461 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n-   #462 = Utf8               in\n-   #463 = Utf8               finalize\n-   #464 = Utf8               populateFromCentralDirectory\n-   #465 = Utf8               ()Ljava/util/Map;\n-   #466 = Utf8               noUTF8Flag\n-   #467 = Utf8               Ljava/util/HashMap;\n-   #468 = Utf8               sig\n-   #469 = Utf8               Ljava/util/HashMap<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n-   #470 = Class              #594         // java/util/HashMap\n-   #471 = Utf8               ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n-   #472 = Utf8               readCentralDirectoryEntry\n-   #473 = Utf8               (Ljava/util/Map;)V\n-   #474 = Utf8               z\n-   #475 = Utf8               Ljava/util/zip/ZipException;\n-   #476 = Utf8               Ljava/lang/RuntimeException;\n-   #477 = Utf8               off\n-   #478 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$Entry;\n-   #479 = Utf8               versionMadeBy\n-   #480 = Utf8               gpFlag\n-   #481 = Utf8               Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #482 = Utf8               hasUTF8Flag\n-   #483 = Utf8               entryEncoding\n-   #484 = Utf8               time\n-   #485 = Utf8               size\n-   #486 = Utf8               fileNameLen\n-   #487 = Utf8               extraLen\n-   #488 = Utf8               commentLen\n-   #489 = Utf8               fileName\n-   #490 = Utf8               cdExtraData\n-   #491 = Utf8               comment\n-   #492 = Class              #654         // org/apache/commons/compress/archivers/zip/ZipFile$Entry\n-   #493 = Class              #857         // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-   #494 = Class              #858         // org/apache/commons/compress/archivers/zip/ZipEncoding\n-   #495 = Class              #310         // \"[B\"\n-   #496 = Class              #759         // java/lang/RuntimeException\n-   #497 = Utf8               (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n-   #498 = Utf8               sanityCheckLFHOffset\n-   #499 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #500 = Utf8               setSizesAndOffsetFromZip64Extra\n-   #501 = Utf8               hasUncompressedSize\n-   #502 = Utf8               hasCompressedSize\n-   #503 = Utf8               hasRelativeHeaderOffset\n-   #504 = Utf8               hasDiskStart\n-   #505 = Utf8               extra\n-   #506 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-   #507 = Utf8               z64\n-   #508 = Utf8               Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-   #509 = Class              #859         // org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #510 = Class              #782         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #511 = Utf8               positionAtCentralDirectory\n-   #512 = Utf8               found\n-   #513 = Utf8               searchedForZip64EOCD\n-   #514 = Utf8               positionAtCentralDirectory64\n-   #515 = Utf8               diskNumberOfEOCD\n-   #516 = Utf8               relativeOffsetOfEOCD\n-   #517 = Utf8               positionAtCentralDirectory32\n-   #518 = Utf8               positionAtEndOfCentralDirectoryRecord\n-   #519 = Utf8               tryToLocateSignature\n-   #520 = Utf8               (JJ[B)Z\n-   #521 = Utf8               Ljava/io/EOFException;\n-   #522 = Utf8               curr\n-   #523 = Utf8               minDistanceFromEnd\n-   #524 = Utf8               maxDistanceFromEnd\n-   #525 = Utf8               stopSearching\n-   #526 = Class              #754         // java/io/EOFException\n-   #527 = Utf8               skipBytes\n-   #528 = Utf8               (I)V\n-   #529 = Utf8               count\n-   #530 = Utf8               currentPosition\n-   #531 = Utf8               newPosition\n-   #532 = Utf8               resolveLocalFileHeaderData\n-   #533 = Utf8               nc\n-   #534 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;\n-   #535 = Utf8               lens\n-   #536 = Utf8               [I\n-   #537 = Utf8               extraFieldLen\n-   #538 = Utf8               localExtraData\n-   #539 = Utf8               zipArchiveEntry\n-   #540 = Class              #860         // java/util/Iterator\n-   #541 = Class              #536         // \"[I\"\n-   #542 = Utf8               fillNameMap\n-   #543 = Utf8               setDataOffset\n-   #544 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n-   #545 = Utf8               offset\n-   #546 = Utf8               getDataOffset\n-   #547 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-   #548 = Utf8               s\n-   #549 = Utf8               startsWithLocalFileHeader\n-   #550 = Utf8               ()Z\n-   #551 = Utf8               createBoundedInputStream\n-   #552 = Utf8               (JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n-   #553 = Utf8               remaining\n-   #554 = Class              #861         // org/apache/commons/compress/utils/BoundedArchiveInputStream\n-   #555 = Utf8               lambda$fillNameMap$1\n-   #556 = Utf8               lambda$null$0\n-   #557 = Utf8               (Ljava/lang/String;)Ljava/util/LinkedList;\n-   #558 = Utf8               k\n-   #559 = Utf8               access$300\n-   #560 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n-   #561 = Utf8               x0\n-   #562 = Utf8               <clinit>\n-   #563 = Utf8               SourceFile\n-   #564 = Utf8               ZipFile.java\n-   #565 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n-   #566 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-   #567 = NameAndType        #323:#324    // archive:Ljava/nio/channels/SeekableByteChannel;\n-   #568 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-   #569 = Utf8               UTF8\n-   #570 = NameAndType        #366:#382    // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-   #571 = NameAndType        #366:#383    // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n-   #572 = Utf8               java/io/File\n-   #573 = NameAndType        #366:#379    // \"<init>\":(Ljava/lang/String;)V\n-   #574 = NameAndType        #862:#863    // toPath:()Ljava/nio/file/Path;\n-   #575 = NameAndType        #366:#385    // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n-   #576 = NameAndType        #366:#388    // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n-   #577 = Class              #864         // java/nio/file/StandardOpenOption\n-   #578 = NameAndType        #865:#866    // READ:Ljava/nio/file/StandardOpenOption;\n-   #579 = Class              #867         // java/util/EnumSet\n-   #580 = NameAndType        #868:#869    // of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n-   #581 = Utf8               java/nio/file/attribute/FileAttribute\n-   #582 = Class              #870         // java/nio/file/Files\n-   #583 = NameAndType        #871:#872    // newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-   #584 = NameAndType        #873:#410    // getAbsolutePath:()Ljava/lang/String;\n-   #585 = NameAndType        #366:#394    // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n-   #586 = Class              #874         // java/nio/file/Path\n-   #587 = NameAndType        #875:#863    // toAbsolutePath:()Ljava/nio/file/Path;\n-   #588 = NameAndType        #876:#410    // toString:()Ljava/lang/String;\n-   #589 = Utf8               unknown archive\n-   #590 = NameAndType        #366:#392    // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n-   #591 = NameAndType        #366:#412    // \"<init>\":()V\n-   #592 = Utf8               java/util/LinkedList\n-   #593 = NameAndType        #311:#312    // entries:Ljava/util/List;\n-   #594 = Utf8               java/util/HashMap\n-   #595 = NameAndType        #366:#528    // \"<init>\":(I)V\n-   #596 = NameAndType        #315:#316    // nameMap:Ljava/util/Map;\n-   #597 = NameAndType        #327:#326    // closed:Z\n-   #598 = NameAndType        #329:#310    // dwordBuf:[B\n-   #599 = NameAndType        #330:#310    // wordBuf:[B\n-   #600 = NameAndType        #331:#310    // cfhBuf:[B\n-   #601 = NameAndType        #332:#310    // shortBuf:[B\n-   #602 = Class              #877         // java/nio/ByteBuffer\n-   #603 = NameAndType        #878:#879    // wrap:([B)Ljava/nio/ByteBuffer;\n-   #604 = NameAndType        #333:#334    // dwordBbuf:Ljava/nio/ByteBuffer;\n-   #605 = NameAndType        #335:#334    // wordBbuf:Ljava/nio/ByteBuffer;\n-   #606 = NameAndType        #336:#334    // cfhBbuf:Ljava/nio/ByteBuffer;\n-   #607 = NameAndType        #337:#334    // shortBbuf:Ljava/nio/ByteBuffer;\n-   #608 = Utf8               BootstrapMethods\n-   #609 = MethodHandle       6:#880       // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-   #610 = MethodType         #881         //  (Ljava/lang/Object;)J\n-   #611 = MethodHandle       5:#196       // REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n-   #612 = MethodType         #547         //  (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-   #613 = NameAndType        #882:#883    // applyAsLong:()Ljava/util/function/ToLongFunction;\n-   #614 = Class              #884         // java/util/Comparator\n-   #615 = NameAndType        #885:#886    // comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-   #616 = MethodHandle       5:#198       // REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-   #617 = NameAndType        #887:#886    // thenComparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-   #618 = NameAndType        #363:#364    // offsetComparator:Ljava/util/Comparator;\n-   #619 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-   #620 = NameAndType        #328:#326    // isSplitZipArchive:Z\n-   #621 = NameAndType        #322:#319    // archiveName:Ljava/lang/String;\n-   #622 = NameAndType        #318:#319    // encoding:Ljava/lang/String;\n-   #623 = NameAndType        #888:#889    // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #624 = NameAndType        #320:#321    // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #625 = NameAndType        #325:#326    // useUnicodeExtraFields:Z\n-   #626 = NameAndType        #464:#465    // populateFromCentralDirectory:()Ljava/util/Map;\n-   #627 = NameAndType        #532:#473    // resolveLocalFileHeaderData:(Ljava/util/Map;)V\n-   #628 = NameAndType        #542:#412    // fillNameMap:()V\n-   #629 = Class              #890         // org/apache/commons/compress/utils/IOUtils\n-   #630 = NameAndType        #413:#891    // closeQuietly:(Ljava/io/Closeable;)V\n-   #631 = Utf8               java/io/IOException\n-   #632 = Utf8               java/lang/StringBuilder\n-   #633 = Utf8               Error on ZipFile\n-   #634 = NameAndType        #892:#893    // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #635 = NameAndType        #366:#894    // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #636 = Class              #851         // java/nio/channels/SeekableByteChannel\n-   #637 = NameAndType        #411:#412    // close:()V\n-   #638 = Class              #895         // java/util/Collections\n-   #639 = NameAndType        #896:#897    // enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n-   #640 = NameAndType        #898:#421    // EMPTY_ZIP_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #641 = NameAndType        #899:#900    // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #642 = Class              #901         // java/util/Arrays\n-   #643 = NameAndType        #902:#903    // sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n-   #644 = NameAndType        #904:#905    // asList:([Ljava/lang/Object;)Ljava/util/List;\n-   #645 = Class              #853         // java/util/Map\n-   #646 = NameAndType        #906:#907    // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #647 = NameAndType        #908:#909    // getFirst:()Ljava/lang/Object;\n-   #648 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-   #649 = Utf8               java/util/List\n-   #650 = NameAndType        #910:#911    // emptyList:()Ljava/util/List;\n-   #651 = NameAndType        #912:#913    // containsKey:(Ljava/lang/Object;)Z\n-   #652 = Class              #914         // org/apache/commons/compress/archivers/zip/ZipUtil\n-   #653 = NameAndType        #915:#434    // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #654 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$Entry\n-   #655 = NameAndType        #546:#916    // getDataOffset:()J\n-   #656 = Utf8               org/apache/commons/compress/archivers/EntryStreamOffsets\n-   #657 = NameAndType        #917:#916    // getCompressedSize:()J\n-   #658 = NameAndType        #551:#552    // createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n-   #659 = NameAndType        #419:#417    // getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n-   #660 = Class              #855         // java/util/Enumeration\n-   #661 = NameAndType        #918:#550    // hasMoreElements:()Z\n-   #662 = NameAndType        #919:#909    // nextElement:()Ljava/lang/Object;\n-   #663 = Class              #920         // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n-   #664 = NameAndType        #921:#434    // test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #665 = NameAndType        #437:#438    // getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-   #666 = Class              #922         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-   #667 = NameAndType        #923:#924    // addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-   #668 = NameAndType        #925:#499    // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #669 = NameAndType        #546:#547    // getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-   #670 = Utf8               java/io/BufferedInputStream\n-   #671 = NameAndType        #366:#926    // \"<init>\":(Ljava/io/InputStream;)V\n-   #672 = NameAndType        #927:#536    // $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n-   #673 = NameAndType        #928:#929    // getMethod:()I\n-   #674 = Class              #930         // org/apache/commons/compress/archivers/zip/ZipMethod\n-   #675 = NameAndType        #931:#932    // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #676 = NameAndType        #933:#929    // ordinal:()I\n-   #677 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n-   #678 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-   #679 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-   #680 = NameAndType        #934:#935    // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #681 = Class              #857         // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-   #682 = NameAndType        #936:#929    // getSlidingDictionarySize:()I\n-   #683 = NameAndType        #937:#929    // getNumberOfShannonFanoTrees:()I\n-   #684 = NameAndType        #366:#938    // \"<init>\":(IILjava/io/InputStream;)V\n-   #685 = Utf8               java/lang/IllegalArgumentException\n-   #686 = Utf8               bad IMPLODE data\n-   #687 = Utf8               java/util/zip/Inflater\n-   #688 = NameAndType        #366:#939    // \"<init>\":(Z)V\n-   #689 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$1\n-   #690 = Utf8               java/io/SequenceInputStream\n-   #691 = Utf8               java/io/ByteArrayInputStream\n-   #692 = NameAndType        #309:#310    // ONE_ZERO_BYTE:[B\n-   #693 = NameAndType        #366:#940    // \"<init>\":([B)V\n-   #694 = NameAndType        #366:#941    // \"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n-   #695 = NameAndType        #366:#942    // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n-   #696 = Utf8               org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-   #697 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-   #698 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-   #699 = NameAndType        #366:#943    // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #700 = NameAndType        #944:#550    // isUnixSymlink:()Z\n-   #701 = NameAndType        #451:#438    // getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-   #702 = NameAndType        #945:#946    // toByteArray:(Ljava/io/InputStream;)[B\n-   #703 = Class              #858         // org/apache/commons/compress/archivers/zip/ZipEncoding\n-   #704 = NameAndType        #947:#948    // decode:([B)Ljava/lang/String;\n-   #705 = Class              #856         // java/io/InputStream\n-   #706 = Utf8               java/lang/Throwable\n-   #707 = NameAndType        #949:#950    // addSuppressed:(Ljava/lang/Throwable;)V\n-   #708 = Class              #951         // java/lang/System\n-   #709 = NameAndType        #952:#953    // err:Ljava/io/PrintStream;\n-   #710 = Utf8               Cleaning up unclosed ZipFile for archive\n-   #711 = Class              #954         // java/io/PrintStream\n-   #712 = NameAndType        #955:#379    // println:(Ljava/lang/String;)V\n-   #713 = NameAndType        #463:#412    // finalize:()V\n-   #714 = NameAndType        #511:#412    // positionAtCentralDirectory:()V\n-   #715 = NameAndType        #956:#916    // position:()J\n-   #716 = NameAndType        #341:#339    // centralDirectoryStartOffset:J\n-   #717 = NameAndType        #957:#958    // rewind:()Ljava/nio/Buffer;\n-   #718 = NameAndType        #959:#960    // readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-   #719 = Class              #961         // org/apache/commons/compress/archivers/zip/ZipLong\n-   #720 = NameAndType        #962:#963    // getValue:([B)J\n-   #721 = NameAndType        #344:#339    // CFH_SIG:J\n-   #722 = NameAndType        #549:#550    // startsWithLocalFileHeader:()Z\n-   #723 = Utf8               Central directory is empty, can\\'t expand corrupt archive.\n-   #724 = NameAndType        #472:#473    // readCentralDirectoryEntry:(Ljava/util/Map;)V\n-   #725 = Class              #964         // org/apache/commons/compress/archivers/zip/ZipShort\n-   #726 = NameAndType        #962:#965    // getValue:([BI)I\n-   #727 = NameAndType        #966:#528    // setVersionMadeBy:(I)V\n-   #728 = NameAndType        #967:#528    // setPlatform:(I)V\n-   #729 = NameAndType        #968:#528    // setVersionRequired:(I)V\n-   #730 = NameAndType        #969:#970    // parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #731 = NameAndType        #971:#550    // usesUTF8ForNames:()Z\n-   #732 = NameAndType        #972:#321    // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #733 = Class              #973         // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-   #734 = NameAndType        #975:#976    // NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-   #735 = NameAndType        #977:#978    // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-   #736 = NameAndType        #979:#980    // setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-   #737 = NameAndType        #981:#528    // setRawFlag:(I)V\n-   #738 = NameAndType        #982:#528    // setMethod:(I)V\n-   #739 = NameAndType        #962:#983    // getValue:([BI)J\n-   #740 = NameAndType        #984:#985    // dosToJavaTime:(J)J\n-   #741 = NameAndType        #986:#987    // setTime:(J)V\n-   #742 = NameAndType        #988:#987    // setCrc:(J)V\n-   #743 = Utf8               broken archive, entry with negative compressed size\n-   #744 = NameAndType        #989:#987    // setCompressedSize:(J)V\n-   #745 = Utf8               broken archive, entry with negative size\n-   #746 = NameAndType        #990:#987    // setSize:(J)V\n-   #747 = Utf8               broken archive, entry with negative fileNameLen\n-   #748 = Utf8               broken archive, entry with negative extraLen\n-   #749 = Utf8               broken archive, entry with negative commentLen\n-   #750 = NameAndType        #991:#987    // setDiskNumberStart:(J)V\n-   #751 = NameAndType        #992:#528    // setInternalAttributes:(I)V\n-   #752 = NameAndType        #993:#987    // setExternalAttributes:(J)V\n-   #753 = NameAndType        #994:#995    // readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n-   #754 = Utf8               java/io/EOFException\n-   #755 = NameAndType        #996:#997    // setName:(Ljava/lang/String;[B)V\n-   #756 = NameAndType        #998:#987    // setLocalHeaderOffset:(J)V\n-   #757 = NameAndType        #999:#913    // add:(Ljava/lang/Object;)Z\n-   #758 = NameAndType        #1000:#940   // setCentralDirectoryExtra:([B)V\n-   #759 = Utf8               java/lang/RuntimeException\n-   #760 = Utf8               java/util/zip/ZipException\n-   #761 = Utf8               Invalid extra data in entry\n-   #762 = NameAndType        #1001:#410   // getName:()Ljava/lang/String;\n-   #763 = NameAndType        #1002:#1003  // initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-   #764 = NameAndType        #500:#499    // setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #765 = NameAndType        #498:#499    // sanityCheckLFHOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #766 = NameAndType        #1004:#379   // setComment:(Ljava/lang/String;)V\n-   #767 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n-   #768 = NameAndType        #366:#1005   // \"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-   #769 = NameAndType        #1006:#1007  // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #770 = NameAndType        #1008:#939   // setStreamContiguous:(Z)V\n-   #771 = NameAndType        #1009:#916   // getDiskNumberStart:()J\n-   #772 = Utf8               broken archive, entry with negative disk number\n-   #773 = NameAndType        #1010:#916   // getLocalHeaderOffset:()J\n-   #774 = Utf8               broken archive, entry with negative local file header offset\n-   #775 = NameAndType        #338:#339    // centralDirectoryStartDiskNumber:J\n-   #776 = Utf8               local file header for\n-   #777 = Utf8                starts on a later disk than central directory\n-   #778 = NameAndType        #340:#339    // centralDirectoryStartRelativeOffset:J\n-   #779 = Utf8                starts after central directory\n-   #780 = NameAndType        #1011:#1012  // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #781 = NameAndType        #1013:#1014  // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-   #782 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #783 = Utf8               archive contains unparseable zip64 extra field\n-   #784 = NameAndType        #1015:#916   // getSize:()J\n-   #785 = NameAndType        #1016:#1017  // reparseCentralDirectoryData:(ZZZZ)V\n-   #786 = NameAndType        #1015:#1018  // getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #787 = NameAndType        #1019:#916   // getLongValue:()J\n-   #788 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-   #789 = NameAndType        #366:#987    // \"<init>\":(J)V\n-   #790 = NameAndType        #990:#1020   // setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #791 = NameAndType        #917:#1018   // getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #792 = NameAndType        #989:#1020   // setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #793 = NameAndType        #1021:#1018  // getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #794 = NameAndType        #1022:#1023  // getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #795 = NameAndType        #962:#916    // getValue:()J\n-   #796 = NameAndType        #518:#412    // positionAtEndOfCentralDirectoryRecord:()V\n-   #797 = NameAndType        #956:#1024   // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #798 = NameAndType        #1025:#310   // ZIP64_EOCD_LOC_SIG:[B\n-   #799 = NameAndType        #1026:#1027  // equals:([B[B)Z\n-   #800 = NameAndType        #527:#528    // skipBytes:(I)V\n-   #801 = NameAndType        #517:#412    // positionAtCentralDirectory32:()V\n-   #802 = NameAndType        #514:#412    // positionAtCentralDirectory64:()V\n-   #803 = NameAndType        #1019:#963   // getLongValue:([B)J\n-   #804 = NameAndType        #956:#1028   // position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n-   #805 = NameAndType        #1029:#310   // ZIP64_EOCD_SIG:[B\n-   #806 = Utf8               Archive\\'s ZIP64 end of central directory locator is corrupt.\n-   #807 = NameAndType        #962:#1030   // getValue:([B)I\n-   #808 = NameAndType        #1031:#310   // EOCD_SIG:[B\n-   #809 = NameAndType        #519:#520    // tryToLocateSignature:(JJ[B)Z\n-   #810 = Utf8               Archive is not a ZIP archive\n-   #811 = NameAndType        #485:#916    // size:()J\n-   #812 = Class              #1032        // java/lang/Math\n-   #813 = NameAndType        #1033:#1034  // max:(JJ)J\n-   #814 = NameAndType        #1035:#958   // flip:()Ljava/nio/Buffer;\n-   #815 = NameAndType        #906:#1036   // get:()B\n-   #816 = NameAndType        #1037:#1038  // iterator:()Ljava/util/Iterator;\n-   #817 = Class              #860         // java/util/Iterator\n-   #818 = NameAndType        #1039:#550   // hasNext:()Z\n-   #819 = NameAndType        #1040:#909   // next:()Ljava/lang/Object;\n-   #820 = NameAndType        #543:#544    // setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n-   #821 = NameAndType        #1041:#940   // setExtra:([B)V\n-   #822 = NameAndType        #1042:#1043  // access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-   #823 = NameAndType        #1044:#1043  // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-   #824 = NameAndType        #1045:#1046  // setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-   #825 = MethodType         #1047        //  (Ljava/lang/Object;)V\n-   #826 = MethodHandle       7:#1048      // REF_invokeSpecial org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #827 = MethodType         #499         //  (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #828 = NameAndType        #1049:#1050  // accept:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n-   #829 = NameAndType        #1051:#1052  // forEach:(Ljava/util/function/Consumer;)V\n-   #830 = NameAndType        #906:#879    // get:([B)Ljava/nio/ByteBuffer;\n-   #831 = NameAndType        #543:#987    // setDataOffset:(J)V\n-   #832 = Utf8               data for\n-   #833 = Utf8                overlaps with central directory.\n-   #834 = NameAndType        #1053:#310   // LFH_SIG:[B\n-   #835 = Utf8               Corrupted archive, stream boundaries are out of range\n-   #836 = Utf8               java/nio/channels/FileChannel\n-   #837 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n-   #838 = NameAndType        #366:#1054   // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-   #839 = Utf8               org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n-   #840 = NameAndType        #366:#1055   // \"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n-   #841 = MethodType         #907         //  (Ljava/lang/Object;)Ljava/lang/Object;\n-   #842 = MethodHandle       6:#1056      // REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipFile.lambda$null$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n-   #843 = MethodType         #557         //  (Ljava/lang/String;)Ljava/util/LinkedList;\n-   #844 = NameAndType        #1057:#1058  // apply:()Ljava/util/function/Function;\n-   #845 = NameAndType        #1059:#1060  // computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n-   #846 = NameAndType        #1061:#1047  // addLast:(Ljava/lang/Object;)V\n-   #847 = NameAndType        #344:#310    // CFH_SIG:[B\n-   #848 = Utf8               java/lang/Object\n-   #849 = Utf8               java/io/Closeable\n-   #850 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$2\n-   #851 = Utf8               java/nio/channels/SeekableByteChannel\n-   #852 = Utf8               java/lang/String\n-   #853 = Utf8               java/util/Map\n-   #854 = Utf8               java/lang/Iterable\n-   #855 = Utf8               java/util/Enumeration\n-   #856 = Utf8               java/io/InputStream\n-   #857 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-   #858 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-   #859 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #860 = Utf8               java/util/Iterator\n-   #861 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n-   #862 = Utf8               toPath\n-   #863 = Utf8               ()Ljava/nio/file/Path;\n-   #864 = Utf8               java/nio/file/StandardOpenOption\n-   #865 = Utf8               READ\n-   #866 = Utf8               Ljava/nio/file/StandardOpenOption;\n-   #867 = Utf8               java/util/EnumSet\n-   #868 = Utf8               of\n-   #869 = Utf8               (Ljava/lang/Enum;)Ljava/util/EnumSet;\n-   #870 = Utf8               java/nio/file/Files\n-   #871 = Utf8               newByteChannel\n-   #872 = Utf8               (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-   #873 = Utf8               getAbsolutePath\n-   #874 = Utf8               java/nio/file/Path\n-   #875 = Utf8               toAbsolutePath\n-   #876 = Utf8               toString\n-   #877 = Utf8               java/nio/ByteBuffer\n-   #878 = Utf8               wrap\n-   #879 = Utf8               ([B)Ljava/nio/ByteBuffer;\n-   #880 = Methodref          #1062.#1063  // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-   #881 = Utf8               (Ljava/lang/Object;)J\n-   #882 = Utf8               applyAsLong\n-   #883 = Utf8               ()Ljava/util/function/ToLongFunction;\n-   #884 = Utf8               java/util/Comparator\n-   #885 = Utf8               comparingLong\n-   #886 = Utf8               (Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-   #887 = Utf8               thenComparingLong\n-   #888 = Utf8               getZipEncoding\n-   #889 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #890 = Utf8               org/apache/commons/compress/utils/IOUtils\n-   #891 = Utf8               (Ljava/io/Closeable;)V\n-   #892 = Utf8               append\n-   #893 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #894 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #895 = Utf8               java/util/Collections\n-   #896 = Utf8               enumeration\n-   #897 = Utf8               (Ljava/util/Collection;)Ljava/util/Enumeration;\n-   #898 = Utf8               EMPTY_ZIP_ARCHIVE_ENTRY_ARRAY\n-   #899 = Utf8               toArray\n-   #900 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #901 = Utf8               java/util/Arrays\n-   #902 = Utf8               sort\n-   #903 = Utf8               ([Ljava/lang/Object;Ljava/util/Comparator;)V\n-   #904 = Utf8               asList\n-   #905 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n-   #906 = Utf8               get\n-   #907 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-   #908 = Utf8               getFirst\n-   #909 = Utf8               ()Ljava/lang/Object;\n-   #910 = Utf8               emptyList\n-   #911 = Utf8               ()Ljava/util/List;\n-   #912 = Utf8               containsKey\n-   #913 = Utf8               (Ljava/lang/Object;)Z\n-   #914 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-   #915 = Utf8               canHandleEntryData\n-   #916 = Utf8               ()J\n-   #917 = Utf8               getCompressedSize\n-   #918 = Utf8               hasMoreElements\n-   #919 = Utf8               nextElement\n-   #920 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n-   #921 = Utf8               test\n-   #922 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-   #923 = Utf8               addRawArchiveEntry\n-   #924 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-   #925 = Utf8               checkRequestedFeatures\n-   #926 = Utf8               (Ljava/io/InputStream;)V\n-   #927 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod\n-   #928 = Utf8               getMethod\n-   #929 = Utf8               ()I\n-   #930 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n-   #931 = Utf8               getMethodByCode\n-   #932 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #933 = Utf8               ordinal\n-   #934 = Utf8               getGeneralPurposeBit\n-   #935 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #936 = Utf8               getSlidingDictionarySize\n-   #937 = Utf8               getNumberOfShannonFanoTrees\n-   #938 = Utf8               (IILjava/io/InputStream;)V\n-   #939 = Utf8               (Z)V\n-   #940 = Utf8               ([B)V\n-   #941 = Utf8               (Ljava/io/InputStream;Ljava/io/InputStream;)V\n-   #942 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n-   #943 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #944 = Utf8               isUnixSymlink\n-   #945 = Utf8               toByteArray\n-   #946 = Utf8               (Ljava/io/InputStream;)[B\n-   #947 = Utf8               decode\n-   #948 = Utf8               ([B)Ljava/lang/String;\n-   #949 = Utf8               addSuppressed\n-   #950 = Utf8               (Ljava/lang/Throwable;)V\n-   #951 = Utf8               java/lang/System\n-   #952 = Utf8               err\n-   #953 = Utf8               Ljava/io/PrintStream;\n-   #954 = Utf8               java/io/PrintStream\n-   #955 = Utf8               println\n-   #956 = Utf8               position\n-   #957 = Utf8               rewind\n-   #958 = Utf8               ()Ljava/nio/Buffer;\n-   #959 = Utf8               readFully\n-   #960 = Utf8               (Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-   #961 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-   #962 = Utf8               getValue\n-   #963 = Utf8               ([B)J\n-   #964 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-   #965 = Utf8               ([BI)I\n-   #966 = Utf8               setVersionMadeBy\n-   #967 = Utf8               setPlatform\n-   #968 = Utf8               setVersionRequired\n-   #969 = Utf8               parse\n-   #970 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #971 = Utf8               usesUTF8ForNames\n-   #972 = Utf8               UTF8_ZIP_ENCODING\n-   #973 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-   #974 = Utf8               NameSource\n-   #975 = Utf8               NAME_WITH_EFS_FLAG\n-   #976 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-   #977 = Utf8               setNameSource\n-   #978 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-   #979 = Utf8               setGeneralPurposeBit\n-   #980 = Utf8               (Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-   #981 = Utf8               setRawFlag\n-   #982 = Utf8               setMethod\n-   #983 = Utf8               ([BI)J\n-   #984 = Utf8               dosToJavaTime\n-   #985 = Utf8               (J)J\n-   #986 = Utf8               setTime\n-   #987 = Utf8               (J)V\n-   #988 = Utf8               setCrc\n-   #989 = Utf8               setCompressedSize\n-   #990 = Utf8               setSize\n-   #991 = Utf8               setDiskNumberStart\n-   #992 = Utf8               setInternalAttributes\n-   #993 = Utf8               setExternalAttributes\n-   #994 = Utf8               readRange\n-   #995 = Utf8               (Ljava/nio/channels/ReadableByteChannel;I)[B\n-   #996 = Utf8               setName\n-   #997 = Utf8               (Ljava/lang/String;[B)V\n-   #998 = Utf8               setLocalHeaderOffset\n-   #999 = Utf8               add\n-  #1000 = Utf8               setCentralDirectoryExtra\n-  #1001 = Utf8               getName\n-  #1002 = Utf8               initCause\n-  #1003 = Utf8               (Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-  #1004 = Utf8               setComment\n-  #1005 = Utf8               ([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-  #1006 = Utf8               put\n-  #1007 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #1008 = Utf8               setStreamContiguous\n-  #1009 = Utf8               getDiskNumberStart\n-  #1010 = Utf8               getLocalHeaderOffset\n-  #1011 = Utf8               HEADER_ID\n-  #1012 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #1013 = Utf8               getExtraField\n-  #1014 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #1015 = Utf8               getSize\n-  #1016 = Utf8               reparseCentralDirectoryData\n-  #1017 = Utf8               (ZZZZ)V\n-  #1018 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #1019 = Utf8               getLongValue\n-  #1020 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #1021 = Utf8               getRelativeHeaderOffset\n-  #1022 = Utf8               getDiskStartNumber\n-  #1023 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #1024 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-  #1025 = Utf8               ZIP64_EOCD_LOC_SIG\n-  #1026 = Utf8               equals\n-  #1027 = Utf8               ([B[B)Z\n-  #1028 = Utf8               (JJ)Ljava/nio/channels/SeekableByteChannel;\n-  #1029 = Utf8               ZIP64_EOCD_SIG\n-  #1030 = Utf8               ([B)I\n-  #1031 = Utf8               EOCD_SIG\n-  #1032 = Utf8               java/lang/Math\n-  #1033 = Utf8               max\n-  #1034 = Utf8               (JJ)J\n-  #1035 = Utf8               flip\n-  #1036 = Utf8               ()B\n-  #1037 = Utf8               iterator\n-  #1038 = Utf8               ()Ljava/util/Iterator;\n-  #1039 = Utf8               hasNext\n-  #1040 = Utf8               next\n-  #1041 = Utf8               setExtra\n-  #1042 = Utf8               access$100\n-  #1043 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #1044 = Utf8               access$200\n-  #1045 = Utf8               setNameAndCommentFromExtraFields\n-  #1046 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #1047 = Utf8               (Ljava/lang/Object;)V\n-  #1048 = Methodref          #1.#1064     // org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #1049 = Utf8               accept\n-  #1050 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n-  #1051 = Utf8               forEach\n-  #1052 = Utf8               (Ljava/util/function/Consumer;)V\n-  #1053 = Utf8               LFH_SIG\n-  #1054 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-  #1055 = Utf8               (JJLjava/nio/channels/SeekableByteChannel;)V\n-  #1056 = Methodref          #1.#1065     // org/apache/commons/compress/archivers/zip/ZipFile.lambda$null$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n-  #1057 = Utf8               apply\n-  #1058 = Utf8               ()Ljava/util/function/Function;\n-  #1059 = Utf8               computeIfAbsent\n-  #1060 = Utf8               (Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n-  #1061 = Utf8               addLast\n-  #1062 = Class              #1066        // java/lang/invoke/LambdaMetafactory\n-  #1063 = NameAndType        #1067:#1070  // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #1064 = NameAndType        #555:#499    // lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #1065 = NameAndType        #556:#557    // lambda$null$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n-  #1066 = Utf8               java/lang/invoke/LambdaMetafactory\n-  #1067 = Utf8               metafactory\n-  #1068 = Class              #1072        // java/lang/invoke/MethodHandles$Lookup\n-  #1069 = Utf8               Lookup\n-  #1070 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #1071 = Class              #1073        // java/lang/invoke/MethodHandles\n-  #1072 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #1073 = Utf8               java/lang/invoke/MethodHandles\n+   #403 = Class              #832         // java/nio/channels/SeekableByteChannel\n+   #404 = Class              #833         // java/lang/String\n+   #405 = Class              #834         // java/util/Map\n+   #406 = Utf8               getEncoding\n+   #407 = Utf8               ()Ljava/lang/String;\n+   #408 = Utf8               close\n+   #409 = Utf8               ()V\n+   #410 = Utf8               closeQuietly\n+   #411 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n+   #412 = Utf8               zipfile\n+   #413 = Utf8               getEntries\n+   #414 = Utf8               ()Ljava/util/Enumeration;\n+   #415 = Utf8               ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+   #416 = Utf8               getEntriesInPhysicalOrder\n+   #417 = Utf8               allEntries\n+   #418 = Utf8               [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #419 = Utf8               getEntry\n+   #420 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #421 = Utf8               entriesOfThatName\n+   #422 = Utf8               Ljava/util/LinkedList;\n+   #423 = Utf8               Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+   #424 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable;\n+   #425 = Class              #835         // java/lang/Iterable\n+   #426 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+   #427 = Utf8               canReadEntryData\n+   #428 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #429 = Utf8               ze\n+   #430 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #431 = Utf8               getRawInputStream\n+   #432 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+   #433 = Utf8               start\n+   #434 = Utf8               copyRawEntries\n+   #435 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;)V\n+   #436 = Utf8               entry\n+   #437 = Utf8               target\n+   #438 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;\n+   #439 = Utf8               predicate\n+   #440 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;\n+   #441 = Utf8               src\n+   #442 = Utf8               Ljava/util/Enumeration;\n+   #443 = Utf8               Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+   #444 = Class              #836         // java/util/Enumeration\n+   #445 = Utf8               getInputStream\n+   #446 = Utf8               ex\n+   #447 = Utf8               Ljava/lang/IllegalArgumentException;\n+   #448 = Utf8               inflater\n+   #449 = Utf8               Ljava/util/zip/Inflater;\n+   #450 = Utf8               is\n+   #451 = Utf8               Ljava/io/InputStream;\n+   #452 = Class              #837         // java/io/InputStream\n+   #453 = Utf8               getUnixSymlink\n+   #454 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n+   #455 = Utf8               in\n+   #456 = Utf8               finalize\n+   #457 = Utf8               populateFromCentralDirectory\n+   #458 = Utf8               ()Ljava/util/Map;\n+   #459 = Utf8               noUTF8Flag\n+   #460 = Utf8               Ljava/util/HashMap;\n+   #461 = Utf8               sig\n+   #462 = Utf8               Ljava/util/HashMap<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n+   #463 = Utf8               ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n+   #464 = Utf8               readCentralDirectoryEntry\n+   #465 = Utf8               (Ljava/util/Map;)V\n+   #466 = Utf8               z\n+   #467 = Utf8               Ljava/util/zip/ZipException;\n+   #468 = Utf8               Ljava/lang/RuntimeException;\n+   #469 = Utf8               off\n+   #470 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$Entry;\n+   #471 = Utf8               versionMadeBy\n+   #472 = Utf8               gpFlag\n+   #473 = Utf8               Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #474 = Utf8               hasUTF8Flag\n+   #475 = Utf8               entryEncoding\n+   #476 = Utf8               time\n+   #477 = Utf8               size\n+   #478 = Utf8               fileNameLen\n+   #479 = Utf8               extraLen\n+   #480 = Utf8               commentLen\n+   #481 = Utf8               fileName\n+   #482 = Utf8               cdExtraData\n+   #483 = Utf8               comment\n+   #484 = Class              #838         // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+   #485 = Class              #839         // org/apache/commons/compress/archivers/zip/ZipEncoding\n+   #486 = Class              #310         // \"[B\"\n+   #487 = Utf8               (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n+   #488 = Utf8               sanityCheckLFHOffset\n+   #489 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #490 = Utf8               setSizesAndOffsetFromZip64Extra\n+   #491 = Utf8               hasUncompressedSize\n+   #492 = Utf8               hasCompressedSize\n+   #493 = Utf8               hasRelativeHeaderOffset\n+   #494 = Utf8               hasDiskStart\n+   #495 = Utf8               extra\n+   #496 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+   #497 = Utf8               z64\n+   #498 = Utf8               Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+   #499 = Class              #840         // org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #500 = Utf8               positionAtCentralDirectory\n+   #501 = Utf8               found\n+   #502 = Utf8               searchedForZip64EOCD\n+   #503 = Utf8               positionAtCentralDirectory64\n+   #504 = Utf8               diskNumberOfEOCD\n+   #505 = Utf8               relativeOffsetOfEOCD\n+   #506 = Utf8               positionAtCentralDirectory32\n+   #507 = Utf8               positionAtEndOfCentralDirectoryRecord\n+   #508 = Utf8               tryToLocateSignature\n+   #509 = Utf8               (JJ[B)Z\n+   #510 = Utf8               Ljava/io/EOFException;\n+   #511 = Utf8               curr\n+   #512 = Utf8               minDistanceFromEnd\n+   #513 = Utf8               maxDistanceFromEnd\n+   #514 = Utf8               stopSearching\n+   #515 = Utf8               skipBytes\n+   #516 = Utf8               (I)V\n+   #517 = Utf8               count\n+   #518 = Utf8               currentPosition\n+   #519 = Utf8               newPosition\n+   #520 = Utf8               resolveLocalFileHeaderData\n+   #521 = Utf8               nc\n+   #522 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;\n+   #523 = Utf8               lens\n+   #524 = Utf8               [I\n+   #525 = Utf8               extraFieldLen\n+   #526 = Utf8               localExtraData\n+   #527 = Utf8               zipArchiveEntry\n+   #528 = Class              #841         // java/util/Iterator\n+   #529 = Class              #524         // \"[I\"\n+   #530 = Utf8               fillNameMap\n+   #531 = Utf8               setDataOffset\n+   #532 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n+   #533 = Utf8               offset\n+   #534 = Utf8               getDataOffset\n+   #535 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+   #536 = Utf8               s\n+   #537 = Utf8               startsWithLocalFileHeader\n+   #538 = Utf8               ()Z\n+   #539 = Utf8               createBoundedInputStream\n+   #540 = Utf8               (JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n+   #541 = Utf8               remaining\n+   #542 = Class              #842         // org/apache/commons/compress/utils/BoundedArchiveInputStream\n+   #543 = Utf8               lambda$fillNameMap$1\n+   #544 = Utf8               lambda$fillNameMap$0\n+   #545 = Utf8               (Ljava/lang/String;)Ljava/util/LinkedList;\n+   #546 = Utf8               k\n+   #547 = Utf8               access$300\n+   #548 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n+   #549 = Utf8               x0\n+   #550 = Utf8               <clinit>\n+   #551 = Utf8               SourceFile\n+   #552 = Utf8               ZipFile.java\n+   #553 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n+   #554 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+   #555 = NameAndType        #323:#324    // archive:Ljava/nio/channels/SeekableByteChannel;\n+   #556 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #557 = Utf8               UTF8\n+   #558 = NameAndType        #366:#382    // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+   #559 = NameAndType        #366:#383    // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n+   #560 = Utf8               java/io/File\n+   #561 = NameAndType        #366:#379    // \"<init>\":(Ljava/lang/String;)V\n+   #562 = NameAndType        #843:#844    // toPath:()Ljava/nio/file/Path;\n+   #563 = NameAndType        #366:#385    // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n+   #564 = NameAndType        #366:#388    // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n+   #565 = Class              #845         // java/nio/file/StandardOpenOption\n+   #566 = NameAndType        #846:#847    // READ:Ljava/nio/file/StandardOpenOption;\n+   #567 = Class              #848         // java/util/EnumSet\n+   #568 = NameAndType        #849:#850    // of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n+   #569 = Utf8               java/nio/file/attribute/FileAttribute\n+   #570 = Class              #851         // java/nio/file/Files\n+   #571 = NameAndType        #852:#853    // newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+   #572 = NameAndType        #854:#407    // getAbsolutePath:()Ljava/lang/String;\n+   #573 = NameAndType        #366:#394    // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n+   #574 = Class              #855         // java/nio/file/Path\n+   #575 = NameAndType        #856:#844    // toAbsolutePath:()Ljava/nio/file/Path;\n+   #576 = NameAndType        #857:#407    // toString:()Ljava/lang/String;\n+   #577 = Utf8               unknown archive\n+   #578 = NameAndType        #366:#392    // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n+   #579 = NameAndType        #366:#409    // \"<init>\":()V\n+   #580 = Utf8               java/util/LinkedList\n+   #581 = NameAndType        #311:#312    // entries:Ljava/util/List;\n+   #582 = Utf8               java/util/HashMap\n+   #583 = NameAndType        #366:#516    // \"<init>\":(I)V\n+   #584 = NameAndType        #315:#316    // nameMap:Ljava/util/Map;\n+   #585 = NameAndType        #327:#326    // closed:Z\n+   #586 = NameAndType        #329:#310    // dwordBuf:[B\n+   #587 = NameAndType        #330:#310    // wordBuf:[B\n+   #588 = NameAndType        #331:#310    // cfhBuf:[B\n+   #589 = NameAndType        #332:#310    // shortBuf:[B\n+   #590 = Class              #858         // java/nio/ByteBuffer\n+   #591 = NameAndType        #859:#860    // wrap:([B)Ljava/nio/ByteBuffer;\n+   #592 = NameAndType        #333:#334    // dwordBbuf:Ljava/nio/ByteBuffer;\n+   #593 = NameAndType        #335:#334    // wordBbuf:Ljava/nio/ByteBuffer;\n+   #594 = NameAndType        #336:#334    // cfhBbuf:Ljava/nio/ByteBuffer;\n+   #595 = NameAndType        #337:#334    // shortBbuf:Ljava/nio/ByteBuffer;\n+   #596 = Utf8               BootstrapMethods\n+   #597 = MethodHandle       6:#861       // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+   #598 = MethodType         #862         //  (Ljava/lang/Object;)J\n+   #599 = MethodHandle       5:#196       // REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+   #600 = MethodType         #535         //  (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+   #601 = NameAndType        #863:#864    // applyAsLong:()Ljava/util/function/ToLongFunction;\n+   #602 = Class              #865         // java/util/Comparator\n+   #603 = NameAndType        #866:#867    // comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+   #604 = MethodHandle       5:#198       // REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+   #605 = NameAndType        #868:#867    // thenComparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+   #606 = NameAndType        #363:#364    // offsetComparator:Ljava/util/Comparator;\n+   #607 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+   #608 = NameAndType        #328:#326    // isSplitZipArchive:Z\n+   #609 = NameAndType        #322:#319    // archiveName:Ljava/lang/String;\n+   #610 = NameAndType        #318:#319    // encoding:Ljava/lang/String;\n+   #611 = NameAndType        #869:#870    // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #612 = NameAndType        #320:#321    // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #613 = NameAndType        #325:#326    // useUnicodeExtraFields:Z\n+   #614 = NameAndType        #457:#458    // populateFromCentralDirectory:()Ljava/util/Map;\n+   #615 = NameAndType        #520:#465    // resolveLocalFileHeaderData:(Ljava/util/Map;)V\n+   #616 = NameAndType        #530:#409    // fillNameMap:()V\n+   #617 = Class              #871         // org/apache/commons/compress/utils/IOUtils\n+   #618 = NameAndType        #410:#872    // closeQuietly:(Ljava/io/Closeable;)V\n+   #619 = Utf8               java/io/IOException\n+   #620 = Utf8               java/lang/StringBuilder\n+   #621 = Utf8               Error on ZipFile\n+   #622 = NameAndType        #873:#874    // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #623 = NameAndType        #366:#875    // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #624 = NameAndType        #408:#409    // close:()V\n+   #625 = Class              #876         // java/util/Collections\n+   #626 = NameAndType        #877:#878    // enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n+   #627 = NameAndType        #879:#418    // EMPTY_ZIP_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #628 = NameAndType        #880:#881    // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #629 = Class              #882         // java/util/Arrays\n+   #630 = NameAndType        #883:#884    // sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n+   #631 = NameAndType        #885:#886    // asList:([Ljava/lang/Object;)Ljava/util/List;\n+   #632 = NameAndType        #887:#888    // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #633 = NameAndType        #889:#890    // getFirst:()Ljava/lang/Object;\n+   #634 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+   #635 = Utf8               java/util/List\n+   #636 = NameAndType        #891:#892    // emptyList:()Ljava/util/List;\n+   #637 = NameAndType        #893:#894    // containsKey:(Ljava/lang/Object;)Z\n+   #638 = Class              #895         // org/apache/commons/compress/archivers/zip/ZipUtil\n+   #639 = NameAndType        #896:#428    // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #640 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$Entry\n+   #641 = NameAndType        #534:#897    // getDataOffset:()J\n+   #642 = Utf8               org/apache/commons/compress/archivers/EntryStreamOffsets\n+   #643 = NameAndType        #898:#897    // getCompressedSize:()J\n+   #644 = NameAndType        #539:#540    // createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n+   #645 = NameAndType        #416:#414    // getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n+   #646 = NameAndType        #899:#538    // hasMoreElements:()Z\n+   #647 = NameAndType        #900:#890    // nextElement:()Ljava/lang/Object;\n+   #648 = Class              #901         // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n+   #649 = NameAndType        #902:#428    // test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #650 = NameAndType        #431:#432    // getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+   #651 = Class              #903         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+   #652 = NameAndType        #904:#905    // addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+   #653 = NameAndType        #906:#489    // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #654 = NameAndType        #534:#535    // getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+   #655 = Utf8               java/io/BufferedInputStream\n+   #656 = NameAndType        #366:#907    // \"<init>\":(Ljava/io/InputStream;)V\n+   #657 = NameAndType        #908:#524    // $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+   #658 = NameAndType        #909:#910    // getMethod:()I\n+   #659 = Class              #911         // org/apache/commons/compress/archivers/zip/ZipMethod\n+   #660 = NameAndType        #912:#913    // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #661 = NameAndType        #914:#910    // ordinal:()I\n+   #662 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n+   #663 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+   #664 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+   #665 = NameAndType        #915:#916    // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #666 = NameAndType        #917:#910    // getSlidingDictionarySize:()I\n+   #667 = NameAndType        #918:#910    // getNumberOfShannonFanoTrees:()I\n+   #668 = NameAndType        #366:#919    // \"<init>\":(IILjava/io/InputStream;)V\n+   #669 = Utf8               java/lang/IllegalArgumentException\n+   #670 = Utf8               bad IMPLODE data\n+   #671 = Utf8               java/util/zip/Inflater\n+   #672 = NameAndType        #366:#920    // \"<init>\":(Z)V\n+   #673 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$1\n+   #674 = Utf8               java/io/SequenceInputStream\n+   #675 = Utf8               java/io/ByteArrayInputStream\n+   #676 = NameAndType        #309:#310    // ONE_ZERO_BYTE:[B\n+   #677 = NameAndType        #366:#921    // \"<init>\":([B)V\n+   #678 = NameAndType        #366:#922    // \"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n+   #679 = NameAndType        #366:#923    // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n+   #680 = Utf8               org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+   #681 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+   #682 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+   #683 = NameAndType        #366:#924    // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #684 = NameAndType        #925:#538    // isUnixSymlink:()Z\n+   #685 = NameAndType        #445:#432    // getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+   #686 = NameAndType        #926:#927    // toByteArray:(Ljava/io/InputStream;)[B\n+   #687 = NameAndType        #928:#929    // decode:([B)Ljava/lang/String;\n+   #688 = Utf8               java/lang/Throwable\n+   #689 = NameAndType        #930:#931    // addSuppressed:(Ljava/lang/Throwable;)V\n+   #690 = Class              #932         // java/lang/System\n+   #691 = NameAndType        #933:#934    // err:Ljava/io/PrintStream;\n+   #692 = Utf8               Cleaning up unclosed ZipFile for archive\n+   #693 = Class              #935         // java/io/PrintStream\n+   #694 = NameAndType        #936:#379    // println:(Ljava/lang/String;)V\n+   #695 = NameAndType        #456:#409    // finalize:()V\n+   #696 = NameAndType        #500:#409    // positionAtCentralDirectory:()V\n+   #697 = NameAndType        #937:#897    // position:()J\n+   #698 = NameAndType        #341:#339    // centralDirectoryStartOffset:J\n+   #699 = NameAndType        #938:#939    // rewind:()Ljava/nio/Buffer;\n+   #700 = NameAndType        #940:#941    // readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+   #701 = Class              #942         // org/apache/commons/compress/archivers/zip/ZipLong\n+   #702 = NameAndType        #943:#944    // getValue:([B)J\n+   #703 = NameAndType        #344:#339    // CFH_SIG:J\n+   #704 = NameAndType        #537:#538    // startsWithLocalFileHeader:()Z\n+   #705 = Utf8               Central directory is empty, can\\'t expand corrupt archive.\n+   #706 = NameAndType        #464:#465    // readCentralDirectoryEntry:(Ljava/util/Map;)V\n+   #707 = Class              #945         // org/apache/commons/compress/archivers/zip/ZipShort\n+   #708 = NameAndType        #943:#946    // getValue:([BI)I\n+   #709 = NameAndType        #947:#516    // setVersionMadeBy:(I)V\n+   #710 = NameAndType        #948:#516    // setPlatform:(I)V\n+   #711 = NameAndType        #949:#516    // setVersionRequired:(I)V\n+   #712 = NameAndType        #950:#951    // parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #713 = NameAndType        #952:#538    // usesUTF8ForNames:()Z\n+   #714 = NameAndType        #953:#321    // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #715 = Class              #954         // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+   #716 = NameAndType        #956:#957    // NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+   #717 = NameAndType        #958:#959    // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+   #718 = NameAndType        #960:#961    // setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+   #719 = NameAndType        #962:#516    // setRawFlag:(I)V\n+   #720 = NameAndType        #963:#516    // setMethod:(I)V\n+   #721 = NameAndType        #943:#964    // getValue:([BI)J\n+   #722 = NameAndType        #965:#966    // dosToJavaTime:(J)J\n+   #723 = NameAndType        #967:#968    // setTime:(J)V\n+   #724 = NameAndType        #969:#968    // setCrc:(J)V\n+   #725 = Utf8               broken archive, entry with negative compressed size\n+   #726 = NameAndType        #970:#968    // setCompressedSize:(J)V\n+   #727 = Utf8               broken archive, entry with negative size\n+   #728 = NameAndType        #971:#968    // setSize:(J)V\n+   #729 = Utf8               broken archive, entry with negative fileNameLen\n+   #730 = Utf8               broken archive, entry with negative extraLen\n+   #731 = Utf8               broken archive, entry with negative commentLen\n+   #732 = NameAndType        #972:#968    // setDiskNumberStart:(J)V\n+   #733 = NameAndType        #973:#516    // setInternalAttributes:(I)V\n+   #734 = NameAndType        #974:#968    // setExternalAttributes:(J)V\n+   #735 = NameAndType        #975:#976    // readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n+   #736 = Utf8               java/io/EOFException\n+   #737 = NameAndType        #977:#978    // setName:(Ljava/lang/String;[B)V\n+   #738 = NameAndType        #979:#968    // setLocalHeaderOffset:(J)V\n+   #739 = NameAndType        #980:#894    // add:(Ljava/lang/Object;)Z\n+   #740 = NameAndType        #981:#921    // setCentralDirectoryExtra:([B)V\n+   #741 = Utf8               java/lang/RuntimeException\n+   #742 = Utf8               java/util/zip/ZipException\n+   #743 = Utf8               Invalid extra data in entry\n+   #744 = NameAndType        #982:#407    // getName:()Ljava/lang/String;\n+   #745 = NameAndType        #983:#984    // initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+   #746 = NameAndType        #490:#489    // setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #747 = NameAndType        #488:#489    // sanityCheckLFHOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #748 = NameAndType        #985:#379    // setComment:(Ljava/lang/String;)V\n+   #749 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n+   #750 = NameAndType        #366:#986    // \"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+   #751 = NameAndType        #987:#988    // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #752 = NameAndType        #989:#920    // setStreamContiguous:(Z)V\n+   #753 = NameAndType        #990:#897    // getDiskNumberStart:()J\n+   #754 = Utf8               broken archive, entry with negative disk number\n+   #755 = NameAndType        #991:#897    // getLocalHeaderOffset:()J\n+   #756 = Utf8               broken archive, entry with negative local file header offset\n+   #757 = NameAndType        #338:#339    // centralDirectoryStartDiskNumber:J\n+   #758 = Utf8               local file header for\n+   #759 = Utf8                starts on a later disk than central directory\n+   #760 = NameAndType        #340:#339    // centralDirectoryStartRelativeOffset:J\n+   #761 = Utf8                starts after central directory\n+   #762 = NameAndType        #992:#993    // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #763 = NameAndType        #994:#995    // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+   #764 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+   #765 = Utf8               archive contains unparseable zip64 extra field\n+   #766 = NameAndType        #996:#897    // getSize:()J\n+   #767 = NameAndType        #997:#998    // reparseCentralDirectoryData:(ZZZZ)V\n+   #768 = NameAndType        #996:#999    // getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #769 = NameAndType        #1000:#897   // getLongValue:()J\n+   #770 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #771 = NameAndType        #366:#968    // \"<init>\":(J)V\n+   #772 = NameAndType        #971:#1001   // setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #773 = NameAndType        #898:#999    // getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #774 = NameAndType        #970:#1001   // setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #775 = NameAndType        #1002:#999   // getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #776 = NameAndType        #1003:#1004  // getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #777 = NameAndType        #943:#897    // getValue:()J\n+   #778 = NameAndType        #507:#409    // positionAtEndOfCentralDirectoryRecord:()V\n+   #779 = NameAndType        #937:#1005   // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #780 = NameAndType        #1006:#310   // ZIP64_EOCD_LOC_SIG:[B\n+   #781 = NameAndType        #1007:#1008  // equals:([B[B)Z\n+   #782 = NameAndType        #515:#516    // skipBytes:(I)V\n+   #783 = NameAndType        #506:#409    // positionAtCentralDirectory32:()V\n+   #784 = NameAndType        #503:#409    // positionAtCentralDirectory64:()V\n+   #785 = NameAndType        #1000:#944   // getLongValue:([B)J\n+   #786 = NameAndType        #937:#1009   // position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+   #787 = NameAndType        #1010:#310   // ZIP64_EOCD_SIG:[B\n+   #788 = Utf8               Archive\\'s ZIP64 end of central directory locator is corrupt.\n+   #789 = NameAndType        #943:#1011   // getValue:([B)I\n+   #790 = NameAndType        #1012:#310   // EOCD_SIG:[B\n+   #791 = NameAndType        #508:#509    // tryToLocateSignature:(JJ[B)Z\n+   #792 = Utf8               Archive is not a ZIP archive\n+   #793 = NameAndType        #477:#897    // size:()J\n+   #794 = Class              #1013        // java/lang/Math\n+   #795 = NameAndType        #1014:#1015  // max:(JJ)J\n+   #796 = NameAndType        #1016:#939   // flip:()Ljava/nio/Buffer;\n+   #797 = NameAndType        #887:#1017   // get:()B\n+   #798 = NameAndType        #1018:#1019  // iterator:()Ljava/util/Iterator;\n+   #799 = NameAndType        #1020:#538   // hasNext:()Z\n+   #800 = NameAndType        #1021:#890   // next:()Ljava/lang/Object;\n+   #801 = NameAndType        #531:#532    // setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n+   #802 = NameAndType        #1022:#921   // setExtra:([B)V\n+   #803 = NameAndType        #1023:#1024  // access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+   #804 = NameAndType        #1025:#1024  // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+   #805 = NameAndType        #1026:#1027  // setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+   #806 = MethodType         #1028        //  (Ljava/lang/Object;)V\n+   #807 = MethodHandle       7:#1029      // REF_invokeSpecial org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #808 = MethodType         #489         //  (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #809 = NameAndType        #1030:#1031  // accept:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n+   #810 = NameAndType        #1032:#1033  // forEach:(Ljava/util/function/Consumer;)V\n+   #811 = NameAndType        #887:#860    // get:([B)Ljava/nio/ByteBuffer;\n+   #812 = NameAndType        #531:#968    // setDataOffset:(J)V\n+   #813 = Utf8               data for\n+   #814 = Utf8                overlaps with central directory.\n+   #815 = NameAndType        #1034:#310   // LFH_SIG:[B\n+   #816 = Utf8               Corrupted archive, stream boundaries are out of range\n+   #817 = Utf8               java/nio/channels/FileChannel\n+   #818 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n+   #819 = NameAndType        #366:#1035   // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+   #820 = Utf8               org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n+   #821 = NameAndType        #366:#1036   // \"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n+   #822 = MethodType         #888         //  (Ljava/lang/Object;)Ljava/lang/Object;\n+   #823 = MethodHandle       6:#1037      // REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n+   #824 = MethodType         #545         //  (Ljava/lang/String;)Ljava/util/LinkedList;\n+   #825 = NameAndType        #1038:#1039  // apply:()Ljava/util/function/Function;\n+   #826 = NameAndType        #1040:#1041  // computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n+   #827 = NameAndType        #1042:#1028  // addLast:(Ljava/lang/Object;)V\n+   #828 = NameAndType        #344:#310    // CFH_SIG:[B\n+   #829 = Utf8               java/lang/Object\n+   #830 = Utf8               java/io/Closeable\n+   #831 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$2\n+   #832 = Utf8               java/nio/channels/SeekableByteChannel\n+   #833 = Utf8               java/lang/String\n+   #834 = Utf8               java/util/Map\n+   #835 = Utf8               java/lang/Iterable\n+   #836 = Utf8               java/util/Enumeration\n+   #837 = Utf8               java/io/InputStream\n+   #838 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+   #839 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+   #840 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #841 = Utf8               java/util/Iterator\n+   #842 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n+   #843 = Utf8               toPath\n+   #844 = Utf8               ()Ljava/nio/file/Path;\n+   #845 = Utf8               java/nio/file/StandardOpenOption\n+   #846 = Utf8               READ\n+   #847 = Utf8               Ljava/nio/file/StandardOpenOption;\n+   #848 = Utf8               java/util/EnumSet\n+   #849 = Utf8               of\n+   #850 = Utf8               (Ljava/lang/Enum;)Ljava/util/EnumSet;\n+   #851 = Utf8               java/nio/file/Files\n+   #852 = Utf8               newByteChannel\n+   #853 = Utf8               (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+   #854 = Utf8               getAbsolutePath\n+   #855 = Utf8               java/nio/file/Path\n+   #856 = Utf8               toAbsolutePath\n+   #857 = Utf8               toString\n+   #858 = Utf8               java/nio/ByteBuffer\n+   #859 = Utf8               wrap\n+   #860 = Utf8               ([B)Ljava/nio/ByteBuffer;\n+   #861 = Methodref          #1043.#1044  // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+   #862 = Utf8               (Ljava/lang/Object;)J\n+   #863 = Utf8               applyAsLong\n+   #864 = Utf8               ()Ljava/util/function/ToLongFunction;\n+   #865 = Utf8               java/util/Comparator\n+   #866 = Utf8               comparingLong\n+   #867 = Utf8               (Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+   #868 = Utf8               thenComparingLong\n+   #869 = Utf8               getZipEncoding\n+   #870 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #871 = Utf8               org/apache/commons/compress/utils/IOUtils\n+   #872 = Utf8               (Ljava/io/Closeable;)V\n+   #873 = Utf8               append\n+   #874 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #875 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #876 = Utf8               java/util/Collections\n+   #877 = Utf8               enumeration\n+   #878 = Utf8               (Ljava/util/Collection;)Ljava/util/Enumeration;\n+   #879 = Utf8               EMPTY_ZIP_ARCHIVE_ENTRY_ARRAY\n+   #880 = Utf8               toArray\n+   #881 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #882 = Utf8               java/util/Arrays\n+   #883 = Utf8               sort\n+   #884 = Utf8               ([Ljava/lang/Object;Ljava/util/Comparator;)V\n+   #885 = Utf8               asList\n+   #886 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n+   #887 = Utf8               get\n+   #888 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+   #889 = Utf8               getFirst\n+   #890 = Utf8               ()Ljava/lang/Object;\n+   #891 = Utf8               emptyList\n+   #892 = Utf8               ()Ljava/util/List;\n+   #893 = Utf8               containsKey\n+   #894 = Utf8               (Ljava/lang/Object;)Z\n+   #895 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+   #896 = Utf8               canHandleEntryData\n+   #897 = Utf8               ()J\n+   #898 = Utf8               getCompressedSize\n+   #899 = Utf8               hasMoreElements\n+   #900 = Utf8               nextElement\n+   #901 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n+   #902 = Utf8               test\n+   #903 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+   #904 = Utf8               addRawArchiveEntry\n+   #905 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+   #906 = Utf8               checkRequestedFeatures\n+   #907 = Utf8               (Ljava/io/InputStream;)V\n+   #908 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod\n+   #909 = Utf8               getMethod\n+   #910 = Utf8               ()I\n+   #911 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n+   #912 = Utf8               getMethodByCode\n+   #913 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #914 = Utf8               ordinal\n+   #915 = Utf8               getGeneralPurposeBit\n+   #916 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #917 = Utf8               getSlidingDictionarySize\n+   #918 = Utf8               getNumberOfShannonFanoTrees\n+   #919 = Utf8               (IILjava/io/InputStream;)V\n+   #920 = Utf8               (Z)V\n+   #921 = Utf8               ([B)V\n+   #922 = Utf8               (Ljava/io/InputStream;Ljava/io/InputStream;)V\n+   #923 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n+   #924 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #925 = Utf8               isUnixSymlink\n+   #926 = Utf8               toByteArray\n+   #927 = Utf8               (Ljava/io/InputStream;)[B\n+   #928 = Utf8               decode\n+   #929 = Utf8               ([B)Ljava/lang/String;\n+   #930 = Utf8               addSuppressed\n+   #931 = Utf8               (Ljava/lang/Throwable;)V\n+   #932 = Utf8               java/lang/System\n+   #933 = Utf8               err\n+   #934 = Utf8               Ljava/io/PrintStream;\n+   #935 = Utf8               java/io/PrintStream\n+   #936 = Utf8               println\n+   #937 = Utf8               position\n+   #938 = Utf8               rewind\n+   #939 = Utf8               ()Ljava/nio/Buffer;\n+   #940 = Utf8               readFully\n+   #941 = Utf8               (Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+   #942 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+   #943 = Utf8               getValue\n+   #944 = Utf8               ([B)J\n+   #945 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+   #946 = Utf8               ([BI)I\n+   #947 = Utf8               setVersionMadeBy\n+   #948 = Utf8               setPlatform\n+   #949 = Utf8               setVersionRequired\n+   #950 = Utf8               parse\n+   #951 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #952 = Utf8               usesUTF8ForNames\n+   #953 = Utf8               UTF8_ZIP_ENCODING\n+   #954 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+   #955 = Utf8               NameSource\n+   #956 = Utf8               NAME_WITH_EFS_FLAG\n+   #957 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+   #958 = Utf8               setNameSource\n+   #959 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+   #960 = Utf8               setGeneralPurposeBit\n+   #961 = Utf8               (Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+   #962 = Utf8               setRawFlag\n+   #963 = Utf8               setMethod\n+   #964 = Utf8               ([BI)J\n+   #965 = Utf8               dosToJavaTime\n+   #966 = Utf8               (J)J\n+   #967 = Utf8               setTime\n+   #968 = Utf8               (J)V\n+   #969 = Utf8               setCrc\n+   #970 = Utf8               setCompressedSize\n+   #971 = Utf8               setSize\n+   #972 = Utf8               setDiskNumberStart\n+   #973 = Utf8               setInternalAttributes\n+   #974 = Utf8               setExternalAttributes\n+   #975 = Utf8               readRange\n+   #976 = Utf8               (Ljava/nio/channels/ReadableByteChannel;I)[B\n+   #977 = Utf8               setName\n+   #978 = Utf8               (Ljava/lang/String;[B)V\n+   #979 = Utf8               setLocalHeaderOffset\n+   #980 = Utf8               add\n+   #981 = Utf8               setCentralDirectoryExtra\n+   #982 = Utf8               getName\n+   #983 = Utf8               initCause\n+   #984 = Utf8               (Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+   #985 = Utf8               setComment\n+   #986 = Utf8               ([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+   #987 = Utf8               put\n+   #988 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #989 = Utf8               setStreamContiguous\n+   #990 = Utf8               getDiskNumberStart\n+   #991 = Utf8               getLocalHeaderOffset\n+   #992 = Utf8               HEADER_ID\n+   #993 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #994 = Utf8               getExtraField\n+   #995 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+   #996 = Utf8               getSize\n+   #997 = Utf8               reparseCentralDirectoryData\n+   #998 = Utf8               (ZZZZ)V\n+   #999 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #1000 = Utf8               getLongValue\n+  #1001 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #1002 = Utf8               getRelativeHeaderOffset\n+  #1003 = Utf8               getDiskStartNumber\n+  #1004 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #1005 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+  #1006 = Utf8               ZIP64_EOCD_LOC_SIG\n+  #1007 = Utf8               equals\n+  #1008 = Utf8               ([B[B)Z\n+  #1009 = Utf8               (JJ)Ljava/nio/channels/SeekableByteChannel;\n+  #1010 = Utf8               ZIP64_EOCD_SIG\n+  #1011 = Utf8               ([B)I\n+  #1012 = Utf8               EOCD_SIG\n+  #1013 = Utf8               java/lang/Math\n+  #1014 = Utf8               max\n+  #1015 = Utf8               (JJ)J\n+  #1016 = Utf8               flip\n+  #1017 = Utf8               ()B\n+  #1018 = Utf8               iterator\n+  #1019 = Utf8               ()Ljava/util/Iterator;\n+  #1020 = Utf8               hasNext\n+  #1021 = Utf8               next\n+  #1022 = Utf8               setExtra\n+  #1023 = Utf8               access$100\n+  #1024 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #1025 = Utf8               access$200\n+  #1026 = Utf8               setNameAndCommentFromExtraFields\n+  #1027 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #1028 = Utf8               (Ljava/lang/Object;)V\n+  #1029 = Methodref          #1.#1045     // org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #1030 = Utf8               accept\n+  #1031 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n+  #1032 = Utf8               forEach\n+  #1033 = Utf8               (Ljava/util/function/Consumer;)V\n+  #1034 = Utf8               LFH_SIG\n+  #1035 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+  #1036 = Utf8               (JJLjava/nio/channels/SeekableByteChannel;)V\n+  #1037 = Methodref          #1.#1046     // org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n+  #1038 = Utf8               apply\n+  #1039 = Utf8               ()Ljava/util/function/Function;\n+  #1040 = Utf8               computeIfAbsent\n+  #1041 = Utf8               (Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n+  #1042 = Utf8               addLast\n+  #1043 = Class              #1047        // java/lang/invoke/LambdaMetafactory\n+  #1044 = NameAndType        #1048:#1051  // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #1045 = NameAndType        #543:#489    // lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #1046 = NameAndType        #544:#545    // lambda$fillNameMap$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n+  #1047 = Utf8               java/lang/invoke/LambdaMetafactory\n+  #1048 = Utf8               metafactory\n+  #1049 = Class              #1053        // java/lang/invoke/MethodHandles$Lookup\n+  #1050 = Utf8               Lookup\n+  #1051 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #1052 = Class              #1054        // java/lang/invoke/MethodHandles\n+  #1053 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #1054 = Utf8               java/lang/invoke/MethodHandles\n {\n   private static final int HASH_SIZE = 509;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 509\n \n   static final int NIBLET_MASK = 15;\n@@ -1915,15 +1896,15 @@\n          4: invokestatic  #64                 // Method java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n          7: areturn\n       LineNumberTable:\n         line 502: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n-    Signature: #418                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #415                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public java.util.Enumeration<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntriesInPhysicalOrder();\n     descriptor: ()Ljava/util/Enumeration;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n@@ -1944,15 +1925,15 @@\n         line 516: 0\n         line 517: 16\n         line 518: 24\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      32     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n            16      16     1 allEntries   [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-    Signature: #418                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #415                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry(java.lang.String);\n     descriptor: (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_0\n@@ -2019,15 +2000,15 @@\n            14      12     2 entriesOfThatName   Ljava/util/List<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n       StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n           offset_delta = 22\n           locals = [ class java/util/List ]\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/lang/Iterable ]\n-    Signature: #432                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #426                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public java.lang.Iterable<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntriesInPhysicalOrder(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/lang/Iterable;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=2\n          0: getstatic     #65                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry.EMPTY_ZIP_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n@@ -2064,15 +2045,15 @@\n             0      51     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n             0      51     1  name   Ljava/lang/String;\n             4      47     2 entriesOfThatName   [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 46\n           locals = [ class \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\" ]\n-    Signature: #432                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #426                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public boolean canReadEntryData(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=2, args_size=2\n          0: aload_1\n@@ -2348,116 +2329,82 @@\n     Exceptions:\n       throws java.io.IOException\n \n   public java.lang.String getUnixSymlink(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n-      stack=2, locals=8, args_size=2\n+      stack=2, locals=5, args_size=2\n          0: aload_1\n-         1: ifnull        110\n+         1: ifnull        63\n          4: aload_1\n          5: invokevirtual #125                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z\n-         8: ifeq          110\n+         8: ifeq          63\n         11: aload_0\n         12: aload_1\n         13: invokevirtual #126                // Method getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n         16: astore_2\n-        17: aconst_null\n-        18: astore_3\n-        19: aload_0\n-        20: getfield      #50                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-        23: aload_2\n-        24: invokestatic  #127                // Method org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n-        27: invokeinterface #128,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-        32: astore        4\n-        34: aload_2\n-        35: ifnull        64\n-        38: aload_3\n-        39: ifnull        60\n+        17: aload_0\n+        18: getfield      #50                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        21: aload_2\n+        22: invokestatic  #127                // Method org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n+        25: invokeinterface #128,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+        30: astore_3\n+        31: aload_2\n+        32: ifnull        39\n+        35: aload_2\n+        36: invokevirtual #129                // Method java/io/InputStream.close:()V\n+        39: aload_3\n+        40: areturn\n+        41: astore_3\n         42: aload_2\n-        43: invokevirtual #129                // Method java/io/InputStream.close:()V\n-        46: goto          64\n-        49: astore        5\n-        51: aload_3\n-        52: aload         5\n-        54: invokevirtual #131                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-        57: goto          64\n-        60: aload_2\n-        61: invokevirtual #129                // Method java/io/InputStream.close:()V\n-        64: aload         4\n-        66: areturn\n-        67: astore        4\n-        69: aload         4\n-        71: astore_3\n-        72: aload         4\n-        74: athrow\n-        75: astore        6\n-        77: aload_2\n-        78: ifnull        107\n-        81: aload_3\n-        82: ifnull        103\n-        85: aload_2\n-        86: invokevirtual #129                // Method java/io/InputStream.close:()V\n-        89: goto          107\n-        92: astore        7\n-        94: aload_3\n-        95: aload         7\n-        97: invokevirtual #131                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-       100: goto          107\n-       103: aload_2\n-       104: invokevirtual #129                // Method java/io/InputStream.close:()V\n-       107: aload         6\n-       109: athrow\n-       110: aconst_null\n-       111: areturn\n+        43: ifnull        61\n+        46: aload_2\n+        47: invokevirtual #129                // Method java/io/InputStream.close:()V\n+        50: goto          61\n+        53: astore        4\n+        55: aload_3\n+        56: aload         4\n+        58: invokevirtual #131                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        61: aload_3\n+        62: athrow\n+        63: aconst_null\n+        64: areturn\n       Exception table:\n          from    to  target type\n-            42    46    49   Class java/lang/Throwable\n-            19    34    67   Class java/lang/Throwable\n-            19    34    75   any\n-            85    89    92   Class java/lang/Throwable\n-            67    77    75   any\n+            17    31    41   Class java/lang/Throwable\n+            46    50    53   Class java/lang/Throwable\n       LineNumberTable:\n         line 715: 0\n         line 716: 11\n-        line 717: 19\n-        line 718: 34\n-        line 717: 64\n-        line 716: 67\n-        line 718: 75\n-        line 720: 110\n+        line 717: 17\n+        line 718: 31\n+        line 717: 39\n+        line 716: 41\n+        line 720: 63\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           17      93     2    in   Ljava/io/InputStream;\n-            0     112     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n-            0     112     1 entry   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-      StackMapTable: number_of_entries = 9\n+           17      46     2    in   Ljava/io/InputStream;\n+            0      65     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n+            0      65     1 entry   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+      StackMapTable: number_of_entries = 5\n+        frame_type = 253 /* append */\n+          offset_delta = 39\n+          locals = [ class java/io/InputStream, class java/lang/String ]\n         frame_type = 255 /* full_frame */\n-          offset_delta = 49\n-          locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class org/apache/commons/compress/archivers/zip/ZipArchiveEntry, class java/io/InputStream, class java/lang/Throwable, class java/lang/String ]\n+          offset_delta = 1\n+          locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class org/apache/commons/compress/archivers/zip/ZipArchiveEntry, class java/io/InputStream ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 10 /* same */\n-        frame_type = 3 /* same */\n         frame_type = 255 /* full_frame */\n-          offset_delta = 2\n+          offset_delta = 11\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class org/apache/commons/compress/archivers/zip/ZipArchiveEntry, class java/io/InputStream, class java/lang/Throwable ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 71 /* same_locals_1_stack_item */\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 255 /* full_frame */\n-          offset_delta = 16\n-          locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class org/apache/commons/compress/archivers/zip/ZipArchiveEntry, class java/io/InputStream, class java/lang/Throwable, top, top, class java/lang/Throwable ]\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 10 /* same */\n-        frame_type = 3 /* same */\n-        frame_type = 255 /* full_frame */\n-          offset_delta = 2\n-          locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class org/apache/commons/compress/archivers/zip/ZipArchiveEntry ]\n-          stack = []\n+        frame_type = 7 /* same */\n+        frame_type = 249 /* chop */\n+          offset_delta = 1\n     Exceptions:\n       throws java.io.IOException\n \n   protected void finalize() throws java.lang.Throwable;\n     descriptor: ()V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n@@ -2600,15 +2547,15 @@\n       StackMapTable: number_of_entries = 2\n         frame_type = 253 /* append */\n           offset_delta = 77\n           locals = [ class java/util/HashMap, long ]\n         frame_type = 42 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #471                         // ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n+    Signature: #463                         // ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n \n   private void readCentralDirectoryEntry(java.util.Map<org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment>) throws java.io.IOException;\n     descriptor: (Ljava/util/Map;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=19, args_size=2\n          0: aload_0\n@@ -2922,15 +2869,15 @@\n         line 821: 39\n         line 822: 42\n         line 823: 48\n         line 825: 60\n         line 826: 72\n         line 828: 75\n         line 829: 85\n-        line 830: 92\n+        line 831: 92\n         line 832: 109\n         line 833: 114\n         line 835: 121\n         line 836: 127\n         line 838: 139\n         line 841: 142\n         line 842: 154\n@@ -3049,15 +2996,15 @@\n         frame_type = 43 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 36\n           locals = [ class \"[B\" ]\n         frame_type = 44 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #497                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n+    Signature: #487                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n \n   private void sanityCheckLFHOffset(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_1\n@@ -4203,15 +4150,15 @@\n           offset_delta = 38\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class java/util/Map, class java/util/Iterator ]\n           stack = []\n         frame_type = 250 /* chop */\n           offset_delta = 2\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #497                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n+    Signature: #487                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n \n   private void fillNameMap();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n@@ -4498,14 +4445,17 @@\n         61: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         64: invokespecial #280                // Method org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n         67: areturn\n       LineNumberTable:\n         line 1462: 0\n         line 1463: 20\n         line 1466: 31\n+        line 1467: 41\n+        line 1468: 54\n+        line 1466: 67\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      68     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n             0      68     1 start   J\n             0      68     3 remaining   J\n       StackMapTable: number_of_entries = 4\n         frame_type = 20 /* same */\n@@ -4544,15 +4494,15 @@\n             0      30     1    ze   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n             5      25     2  name   Ljava/lang/String;\n            24       6     3 entriesOfThatName   Ljava/util/LinkedList;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n            24       6     3 entriesOfThatName   Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n-  private static java.util.LinkedList lambda$null$0(java.lang.String);\n+  private static java.util.LinkedList lambda$fillNameMap$0(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/util/LinkedList;\n     flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: new           #24                 // class java/util/LinkedList\n          3: dup\n          4: invokespecial #25                 // Method java/util/LinkedList.\"<init>\":()V\n@@ -4599,30 +4549,30 @@\n InnerClasses:\n   static #287;                            // class org/apache/commons/compress/archivers/zip/ZipFile$2\n   private static #289= #99 of #1;         // StoredStatisticsStream=class org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream of class org/apache/commons/compress/archivers/zip/ZipFile\n   private static #290= #78 of #1;         // Entry=class org/apache/commons/compress/archivers/zip/ZipFile$Entry of class org/apache/commons/compress/archivers/zip/ZipFile\n   private static final #291= #192 of #1;  // NameAndComment=class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment of class org/apache/commons/compress/archivers/zip/ZipFile\n   private #292= #277 of #1;               // BoundedFileChannelInputStream=class org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream of class org/apache/commons/compress/archivers/zip/ZipFile\n   #112;                                   // class org/apache/commons/compress/archivers/zip/ZipFile$1\n-  public static final #974= #733 of #72;  // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  public static final #1069= #1068 of #1071; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+  public static final #955= #715 of #72;  // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  public static final #1050= #1049 of #1052; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #609 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  0: #597 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #610 (Ljava/lang/Object;)J\n-      #611 REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n-      #612 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-  1: #609 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #598 (Ljava/lang/Object;)J\n+      #599 REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+      #600 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+  1: #597 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #610 (Ljava/lang/Object;)J\n-      #616 REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-      #612 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-  2: #609 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #598 (Ljava/lang/Object;)J\n+      #604 REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+      #600 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+  2: #597 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #825 (Ljava/lang/Object;)V\n-      #826 REF_invokeSpecial org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-      #827 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  3: #609 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #806 (Ljava/lang/Object;)V\n+      #807 REF_invokeSpecial org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+      #808 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  3: #597 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #841 (Ljava/lang/Object;)Ljava/lang/Object;\n-      #842 REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipFile.lambda$null$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n-      #843 (Ljava/lang/String;)Ljava/util/LinkedList;\n+      #822 (Ljava/lang/Object;)Ljava/lang/Object;\n+      #823 REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n+      #824 (Ljava/lang/String;)Ljava/util/LinkedList;\n"}]}
