{"diffoscope-json-version": 1, "source1": "first/TelnetClient.class", "source2": "second/TelnetClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,24 +15,24 @@\n     protected boolean readerThread;\n     private TelnetInputListener inputListener;\n     \n     public TelnetClient() {\n         this(\"VT100\", 512);\n     }\n     \n-    public TelnetClient(final String termtype) {\n-        this(termtype, 512);\n+    public TelnetClient(final String s) {\n+        this(s, 512);\n     }\n     \n-    public TelnetClient(final int maxSubnegotiationLength) {\n-        this(\"VT100\", maxSubnegotiationLength);\n+    public TelnetClient(final int n) {\n+        this(\"VT100\", n);\n     }\n     \n-    public TelnetClient(final String termtype, final int maxSubnegotiationLength) {\n-        super(termtype);\n+    public TelnetClient(final String s, final int maxSubnegotiationLength) {\n+        super(s);\n         this.readerThread = true;\n         this.input = null;\n         this.output = null;\n         this.maxSubnegotiationLength = maxSubnegotiationLength;\n     }\n     \n     void flushOutputStream() throws IOException {\n@@ -52,19 +52,19 @@\n         finally {\n             this._output_ = null;\n         }\n     }\n     \n     protected void _connectAction_() throws IOException {\n         super._connectAction_();\n-        final TelnetInputStream tmp = new TelnetInputStream(this._input_, this, this.readerThread);\n+        final TelnetInputStream in = new TelnetInputStream(this._input_, this, this.readerThread);\n         if (this.readerThread) {\n-            tmp.start();\n+            in.start();\n         }\n-        this.input = new BufferedInputStream((InputStream)tmp);\n+        this.input = new BufferedInputStream((InputStream)in);\n         this.output = (OutputStream)new TelnetOutputStream(this);\n     }\n     \n     public void disconnect() throws IOException {\n         try {\n             if (this.input != null) {\n                 this.input.close();\n@@ -84,80 +84,80 @@\n         return this.output;\n     }\n     \n     public InputStream getInputStream() {\n         return this.input;\n     }\n     \n-    public boolean getLocalOptionState(final int option) {\n-        return this.stateIsWill(option) && this.requestedWill(option);\n+    public boolean getLocalOptionState(final int n) {\n+        return this.stateIsWill(n) && this.requestedWill(n);\n     }\n     \n-    public boolean getRemoteOptionState(final int option) {\n-        return this.stateIsDo(option) && this.requestedDo(option);\n+    public boolean getRemoteOptionState(final int n) {\n+        return this.stateIsDo(n) && this.requestedDo(n);\n     }\n     \n-    public boolean sendAYT(final long timeout) throws IOException, IllegalArgumentException, InterruptedException {\n-        return this._sendAYT(timeout);\n+    public boolean sendAYT(final long n) throws IOException, IllegalArgumentException, InterruptedException {\n+        return this._sendAYT(n);\n     }\n     \n-    public void sendSubnegotiation(final int[] message) throws IOException, IllegalArgumentException {\n-        if (message.length < 1) {\n+    public void sendSubnegotiation(final int[] array) throws IOException, IllegalArgumentException {\n+        if (array.length < 1) {\n             throw new IllegalArgumentException(\"zero length message\");\n         }\n-        this._sendSubnegotiation(message);\n+        this._sendSubnegotiation(array);\n     }\n     \n-    public void sendCommand(final byte command) throws IOException, IllegalArgumentException {\n-        this._sendCommand(command);\n+    public void sendCommand(final byte b) throws IOException, IllegalArgumentException {\n+        this._sendCommand(b);\n     }\n     \n-    public void addOptionHandler(final TelnetOptionHandler opthand) throws InvalidTelnetOptionException, IOException {\n-        super.addOptionHandler(opthand);\n+    public void addOptionHandler(final TelnetOptionHandler telnetOptionHandler) throws InvalidTelnetOptionException, IOException {\n+        super.addOptionHandler(telnetOptionHandler);\n     }\n     \n-    public void deleteOptionHandler(final int optcode) throws InvalidTelnetOptionException, IOException {\n-        super.deleteOptionHandler(optcode);\n+    public void deleteOptionHandler(final int n) throws InvalidTelnetOptionException, IOException {\n+        super.deleteOptionHandler(n);\n     }\n     \n-    public void registerSpyStream(final OutputStream spystream) {\n-        super._registerSpyStream(spystream);\n+    public void registerSpyStream(final OutputStream outputStream) {\n+        super._registerSpyStream(outputStream);\n     }\n     \n     public void stopSpyStream() {\n         super._stopSpyStream();\n     }\n     \n-    public void registerNotifHandler(final TelnetNotificationHandler notifhand) {\n-        super.registerNotifHandler(notifhand);\n+    public void registerNotifHandler(final TelnetNotificationHandler telnetNotificationHandler) {\n+        super.registerNotifHandler(telnetNotificationHandler);\n     }\n     \n     public void unregisterNotifHandler() {\n         super.unregisterNotifHandler();\n     }\n     \n-    public void setReaderThread(final boolean flag) {\n-        this.readerThread = flag;\n+    public void setReaderThread(final boolean readerThread) {\n+        this.readerThread = readerThread;\n     }\n     \n     public boolean getReaderThread() {\n         return this.readerThread;\n     }\n     \n-    public synchronized void registerInputListener(final TelnetInputListener listener) {\n-        this.inputListener = listener;\n+    public synchronized void registerInputListener(final TelnetInputListener inputListener) {\n+        this.inputListener = inputListener;\n     }\n     \n     public synchronized void unregisterInputListener() {\n         this.inputListener = null;\n     }\n     \n     void notifyInputListener() {\n-        final TelnetInputListener listener;\n+        final TelnetInputListener inputListener;\n         synchronized (this) {\n-            listener = this.inputListener;\n+            inputListener = this.inputListener;\n         }\n-        if (listener != null) {\n-            listener.telnetInputAvailable();\n+        if (inputListener != null) {\n+            inputListener.telnetInputAvailable();\n         }\n     }\n }\n"}]}
