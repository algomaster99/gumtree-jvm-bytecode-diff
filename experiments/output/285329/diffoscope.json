{"diffoscope-json-version": 1, "source1": "first/AnnotationEntry.class", "source2": "second/AnnotationEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,27 +3,31 @@\n \n import java.util.Iterator;\n import java.io.DataOutputStream;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.io.DataInput;\n import java.util.function.Predicate;\n+import java.util.Objects;\n import java.util.stream.Stream;\n import java.util.List;\n \n public class AnnotationEntry implements Node\n {\n     public static final AnnotationEntry[] EMPTY_ARRAY;\n     private final int typeIndex;\n     private final ConstantPool constantPool;\n     private final boolean isRuntimeVisible;\n     private List<ElementValuePair> elementValuePairs;\n     \n     public static AnnotationEntry[] createAnnotationEntries(final Attribute[] values) {\n-        return Stream.of(values).filter(Annotations.class::isInstance).flatMap(attribute -> Stream.of(((Annotations)attribute).getAnnotationEntries())).toArray(AnnotationEntry[]::new);\n+        final Stream<Attribute> of = Stream.of(values);\n+        final Class<Annotations> obj = Annotations.class;\n+        Objects.requireNonNull(obj);\n+        return of.filter(obj::isInstance).flatMap(attribute -> Stream.of(((Annotations)attribute).getAnnotationEntries())).toArray(AnnotationEntry[]::new);\n     }\n     \n     public static AnnotationEntry read(final DataInput dataInput, final ConstantPool constantPool, final boolean b) throws IOException {\n         final AnnotationEntry annotationEntry = new AnnotationEntry(dataInput.readUnsignedShort(), constantPool, b);\n         final int unsignedShort = dataInput.readUnsignedShort();\n         annotationEntry.elementValuePairs = new ArrayList<ElementValuePair>();\n         for (int i = 0; i < unsignedShort; ++i) {\n"}]}
