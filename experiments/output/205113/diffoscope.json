{"diffoscope-json-version": 1, "source1": "first/EventType.class", "source2": "second/EventType.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,17 +8,17 @@\n public class EventType<T extends Event> implements Serializable\n {\n     private static final long serialVersionUID = 20150416L;\n     private static final String FMT_TO_STRING = \"%s [ %s ]\";\n     private final EventType<? super T> superType;\n     private final String name;\n     \n-    public EventType(final EventType<? super T> superEventType, final String typeName) {\n-        this.superType = superEventType;\n-        this.name = typeName;\n+    public EventType(final EventType<? super T> superType, final String name) {\n+        this.superType = superType;\n+        this.name = name;\n     }\n     \n     public EventType<? super T> getSuperType() {\n         return this.superType;\n     }\n     \n     public String getName() {\n@@ -27,23 +27,23 @@\n     \n     @Override\n     public String toString() {\n         return String.format(\"%s [ %s ]\", this.getClass().getSimpleName(), this.getName());\n     }\n     \n     public static Set<EventType<?>> fetchSuperEventTypes(final EventType<?> eventType) {\n-        final Set<EventType<?>> types = new HashSet<EventType<?>>();\n-        for (EventType<?> currentType = eventType; currentType != null; currentType = currentType.getSuperType()) {\n-            types.add(currentType);\n+        final HashSet set = new HashSet();\n+        for (EventType<?> superType = eventType; superType != null; superType = superType.getSuperType()) {\n+            set.add(superType);\n         }\n-        return types;\n+        return set;\n     }\n     \n-    public static boolean isInstanceOf(final EventType<?> derivedType, final EventType<?> baseType) {\n-        for (EventType<?> currentType = derivedType; currentType != null; currentType = currentType.getSuperType()) {\n-            if (currentType == baseType) {\n+    public static boolean isInstanceOf(final EventType<?> eventType, final EventType<?> eventType2) {\n+        for (EventType<?> superType = eventType; superType != null; superType = superType.getSuperType()) {\n+            if (superType == eventType2) {\n                 return true;\n             }\n         }\n         return false;\n     }\n }\n"}]}
