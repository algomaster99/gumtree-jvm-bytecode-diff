{"diffoscope-json-version": 1, "source1": "first/MissingJavadocPackageCheck.class", "source2": "second/MissingJavadocPackageCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,36 +26,35 @@\n         return new int[] { 16 };\n     }\n     \n     public boolean isCommentNodesRequired() {\n         return true;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (CheckUtil.isPackageInfo(this.getFilePath()) && !hasJavadoc(ast)) {\n-            this.log(ast, \"package.javadoc.missing\", new Object[0]);\n+    public void visitToken(final DetailAST detailAST) {\n+        if (CheckUtil.isPackageInfo(this.getFilePath()) && !hasJavadoc(detailAST)) {\n+            this.log(detailAST, \"package.javadoc.missing\", new Object[0]);\n         }\n     }\n     \n-    private static boolean hasJavadoc(final DetailAST ast) {\n-        final boolean hasJavadocBefore = ast.getPreviousSibling() != null && isJavadoc(ast.getPreviousSibling());\n-        return hasJavadocBefore || hasJavadocAboveAnnotation(ast);\n+    private static boolean hasJavadoc(final DetailAST detailAST) {\n+        return (detailAST.getPreviousSibling() != null && isJavadoc(detailAST.getPreviousSibling())) || hasJavadocAboveAnnotation(detailAST);\n     }\n     \n-    private static boolean hasJavadocAboveAnnotation(final DetailAST ast) {\n-        final Optional<DetailAST> firstAnnotationChild = Optional.of(ast.getFirstChild()).map((Function<? super DetailAST, ?>)DetailAST::getFirstChild).map((Function<? super Object, ? extends DetailAST>)DetailAST::getFirstChild);\n-        boolean result = false;\n-        if (firstAnnotationChild.isPresent()) {\n-            for (DetailAST child = (DetailAST)firstAnnotationChild.get(); child != null; child = child.getNextSibling()) {\n-                if (isJavadoc(child)) {\n-                    result = true;\n+    private static boolean hasJavadocAboveAnnotation(final DetailAST detailAST) {\n+        final Optional<Object> map = Optional.of(detailAST.getFirstChild()).map((Function<? super DetailAST, ?>)DetailAST::getFirstChild).map((Function<? super Object, ?>)DetailAST::getFirstChild);\n+        boolean b = false;\n+        if (map.isPresent()) {\n+            for (DetailAST nextSibling = (DetailAST)map.get(); nextSibling != null; nextSibling = nextSibling.getNextSibling()) {\n+                if (isJavadoc(nextSibling)) {\n+                    b = true;\n                     break;\n                 }\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private static boolean isJavadoc(final DetailAST ast) {\n-        return ast.getType() == 145 && JavadocUtil.isJavadocComment(ast);\n+    private static boolean isJavadoc(final DetailAST detailAST) {\n+        return detailAST.getType() == 145 && JavadocUtil.isJavadocComment(detailAST);\n     }\n }\n"}]}
