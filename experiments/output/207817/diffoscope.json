{"diffoscope-json-version": 1, "source1": "first/Tailer.class", "source2": "second/Tailer.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,79 +20,79 @@\n     private final Charset charset;\n     private final long delayMillis;\n     private final boolean end;\n     private final TailerListener listener;\n     private final boolean reOpen;\n     private volatile boolean run;\n     \n-    public Tailer(final File file, final TailerListener listener) {\n-        this(file, listener, 1000L);\n+    public Tailer(final File file, final TailerListener tailerListener) {\n+        this(file, tailerListener, 1000L);\n     }\n     \n-    public Tailer(final File file, final TailerListener listener, final long delayMillis) {\n-        this(file, listener, delayMillis, false);\n+    public Tailer(final File file, final TailerListener tailerListener, final long n) {\n+        this(file, tailerListener, n, false);\n     }\n     \n-    public Tailer(final File file, final TailerListener listener, final long delayMillis, final boolean end) {\n-        this(file, listener, delayMillis, end, 8192);\n+    public Tailer(final File file, final TailerListener tailerListener, final long n, final boolean b) {\n+        this(file, tailerListener, n, b, 8192);\n     }\n     \n-    public Tailer(final File file, final TailerListener listener, final long delayMillis, final boolean end, final boolean reOpen) {\n-        this(file, listener, delayMillis, end, reOpen, 8192);\n+    public Tailer(final File file, final TailerListener tailerListener, final long n, final boolean b, final boolean b2) {\n+        this(file, tailerListener, n, b, b2, 8192);\n     }\n     \n-    public Tailer(final File file, final TailerListener listener, final long delayMillis, final boolean end, final int bufSize) {\n-        this(file, listener, delayMillis, end, false, bufSize);\n+    public Tailer(final File file, final TailerListener tailerListener, final long n, final boolean b, final int n2) {\n+        this(file, tailerListener, n, b, false, n2);\n     }\n     \n-    public Tailer(final File file, final TailerListener listener, final long delayMillis, final boolean end, final boolean reOpen, final int bufSize) {\n-        this(file, Tailer.DEFAULT_CHARSET, listener, delayMillis, end, reOpen, bufSize);\n+    public Tailer(final File file, final TailerListener tailerListener, final long n, final boolean b, final boolean b2, final int n2) {\n+        this(file, Tailer.DEFAULT_CHARSET, tailerListener, n, b, b2, n2);\n     }\n     \n-    public Tailer(final File file, final Charset charset, final TailerListener listener, final long delayMillis, final boolean end, final boolean reOpen, final int bufSize) {\n+    public Tailer(final File file, final Charset charset, final TailerListener listener, final long delayMillis, final boolean end, final boolean reOpen, final int n) {\n         this.run = true;\n         this.file = file;\n         this.delayMillis = delayMillis;\n         this.end = end;\n-        this.inbuf = IOUtils.byteArray(bufSize);\n+        this.inbuf = IOUtils.byteArray(n);\n         (this.listener = listener).init(this);\n         this.reOpen = reOpen;\n         this.charset = charset;\n     }\n     \n-    public static Tailer create(final File file, final TailerListener listener, final long delayMillis, final boolean end, final int bufSize) {\n-        return create(file, listener, delayMillis, end, false, bufSize);\n+    public static Tailer create(final File file, final TailerListener tailerListener, final long n, final boolean b, final int n2) {\n+        return create(file, tailerListener, n, b, false, n2);\n     }\n     \n-    public static Tailer create(final File file, final TailerListener listener, final long delayMillis, final boolean end, final boolean reOpen, final int bufSize) {\n-        return create(file, Tailer.DEFAULT_CHARSET, listener, delayMillis, end, reOpen, bufSize);\n+    public static Tailer create(final File file, final TailerListener tailerListener, final long n, final boolean b, final boolean b2, final int n2) {\n+        return create(file, Tailer.DEFAULT_CHARSET, tailerListener, n, b, b2, n2);\n     }\n     \n-    public static Tailer create(final File file, final Charset charset, final TailerListener listener, final long delayMillis, final boolean end, final boolean reOpen, final int bufSize) {\n-        final Tailer tailer = new Tailer(file, charset, listener, delayMillis, end, reOpen, bufSize);\n-        final Thread thread = new Thread(tailer);\n+    public static Tailer create(final File file, final Charset charset, final TailerListener tailerListener, final long n, final boolean b, final boolean b2, final int n2) {\n+        final Tailer task = new Tailer(file, charset, tailerListener, n, b, b2, n2);\n+        final Thread thread = new Thread(task);\n         thread.setDaemon(true);\n         thread.start();\n-        return tailer;\n+        return task;\n     }\n     \n-    public static Tailer create(final File file, final TailerListener listener, final long delayMillis, final boolean end) {\n-        return create(file, listener, delayMillis, end, 8192);\n+    public static Tailer create(final File file, final TailerListener tailerListener, final long n, final boolean b) {\n+        return create(file, tailerListener, n, b, 8192);\n     }\n     \n-    public static Tailer create(final File file, final TailerListener listener, final long delayMillis, final boolean end, final boolean reOpen) {\n-        return create(file, listener, delayMillis, end, reOpen, 8192);\n+    public static Tailer create(final File file, final TailerListener tailerListener, final long n, final boolean b, final boolean b2) {\n+        return create(file, tailerListener, n, b, b2, 8192);\n     }\n     \n-    public static Tailer create(final File file, final TailerListener listener, final long delayMillis) {\n-        return create(file, listener, delayMillis, false);\n+    public static Tailer create(final File file, final TailerListener tailerListener, final long n) {\n+        return create(file, tailerListener, n, false);\n     }\n     \n-    public static Tailer create(final File file, final TailerListener listener) {\n-        return create(file, listener, 1000L, false);\n+    public static Tailer create(final File file, final TailerListener tailerListener) {\n+        return create(file, tailerListener, 1000L, false);\n     }\n     \n     public File getFile() {\n         return this.file;\n     }\n     \n     protected boolean getRun() {\n@@ -101,144 +101,143 @@\n     \n     public long getDelay() {\n         return this.delayMillis;\n     }\n     \n     @Override\n     public void run() {\n-        RandomAccessFile reader = null;\n+        RandomAccessFile randomAccessFile = null;\n         try {\n-            long last = 0L;\n-            long position = 0L;\n-            while (this.getRun() && reader == null) {\n+            long n = 0L;\n+            long n2 = 0L;\n+            while (this.getRun() && randomAccessFile == null) {\n                 try {\n-                    reader = new RandomAccessFile(this.file, \"r\");\n+                    randomAccessFile = new RandomAccessFile(this.file, \"r\");\n                 }\n-                catch (final FileNotFoundException e) {\n+                catch (final FileNotFoundException ex) {\n                     this.listener.fileNotFound();\n                 }\n-                if (reader == null) {\n+                if (randomAccessFile == null) {\n                     Thread.sleep(this.delayMillis);\n                 }\n                 else {\n-                    position = (this.end ? this.file.length() : 0L);\n-                    last = FileUtils.lastModified(this.file);\n-                    reader.seek(position);\n+                    n2 = (this.end ? this.file.length() : 0L);\n+                    n = FileUtils.lastModified(this.file);\n+                    randomAccessFile.seek(n2);\n                 }\n             }\n             while (this.getRun()) {\n-                final boolean newer = FileUtils.isFileNewer(this.file, last);\n+                final boolean fileNewer = FileUtils.isFileNewer(this.file, n);\n                 final long length = this.file.length();\n-                if (length < position) {\n+                if (length < n2) {\n                     this.listener.fileRotated();\n-                    try (final RandomAccessFile save = reader) {\n-                        reader = new RandomAccessFile(this.file, \"r\");\n+                    try (final RandomAccessFile randomAccessFile2 = randomAccessFile) {\n+                        randomAccessFile = new RandomAccessFile(this.file, \"r\");\n                         try {\n-                            this.readLines(save);\n+                            this.readLines(randomAccessFile2);\n                         }\n-                        catch (final IOException ioe) {\n-                            this.listener.handle((Exception)ioe);\n+                        catch (final IOException ex2) {\n+                            this.listener.handle((Exception)ex2);\n                         }\n-                        position = 0L;\n+                        n2 = 0L;\n                     }\n-                    catch (final FileNotFoundException e2) {\n+                    catch (final FileNotFoundException ex3) {\n                         this.listener.fileNotFound();\n                         Thread.sleep(this.delayMillis);\n                     }\n                 }\n                 else {\n-                    if (length > position) {\n-                        position = this.readLines(reader);\n-                        last = FileUtils.lastModified(this.file);\n-                    }\n-                    else if (newer) {\n-                        position = 0L;\n-                        reader.seek(position);\n-                        position = this.readLines(reader);\n-                        last = FileUtils.lastModified(this.file);\n+                    if (length > n2) {\n+                        n2 = this.readLines(randomAccessFile);\n+                        n = FileUtils.lastModified(this.file);\n+                    }\n+                    else if (fileNewer) {\n+                        randomAccessFile.seek(0L);\n+                        n2 = this.readLines(randomAccessFile);\n+                        n = FileUtils.lastModified(this.file);\n                     }\n-                    if (this.reOpen && reader != null) {\n-                        reader.close();\n+                    if (this.reOpen && randomAccessFile != null) {\n+                        randomAccessFile.close();\n                     }\n                     Thread.sleep(this.delayMillis);\n                     if (!this.getRun() || !this.reOpen) {\n                         continue;\n                     }\n-                    reader = new RandomAccessFile(this.file, \"r\");\n-                    reader.seek(position);\n+                    randomAccessFile = new RandomAccessFile(this.file, \"r\");\n+                    randomAccessFile.seek(n2);\n                 }\n             }\n         }\n-        catch (final InterruptedException e3) {\n+        catch (final InterruptedException ex4) {\n             Thread.currentThread().interrupt();\n-            this.listener.handle((Exception)e3);\n+            this.listener.handle((Exception)ex4);\n         }\n-        catch (final Exception e4) {\n-            this.listener.handle(e4);\n+        catch (final Exception ex5) {\n+            this.listener.handle(ex5);\n         }\n         finally {\n             try {\n-                if (reader != null) {\n-                    reader.close();\n+                if (randomAccessFile != null) {\n+                    randomAccessFile.close();\n                 }\n             }\n-            catch (final IOException e5) {\n-                this.listener.handle((Exception)e5);\n+            catch (final IOException ex6) {\n+                this.listener.handle((Exception)ex6);\n             }\n             this.stop();\n         }\n     }\n     \n     public void stop() {\n         this.run = false;\n     }\n     \n-    private long readLines(final RandomAccessFile reader) throws IOException {\n-        try (final ByteArrayOutputStream lineBuf = new ByteArrayOutputStream(64)) {\n-            long rePos;\n-            long pos = rePos = reader.getFilePointer();\n-            boolean seenCR = false;\n-            int num;\n-            while (this.getRun() && (num = reader.read(this.inbuf)) != -1) {\n-                for (int i = 0; i < num; ++i) {\n-                    final byte ch = this.inbuf[i];\n-                    switch (ch) {\n+    private long readLines(final RandomAccessFile randomAccessFile) throws IOException {\n+        try (final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(64)) {\n+            long filePointer2;\n+            long filePointer = filePointer2 = randomAccessFile.getFilePointer();\n+            int n = 0;\n+            int read;\n+            while (this.getRun() && (read = randomAccessFile.read(this.inbuf)) != -1) {\n+                for (int i = 0; i < read; ++i) {\n+                    final byte b = this.inbuf[i];\n+                    switch (b) {\n                         case 10: {\n-                            seenCR = false;\n-                            this.listener.handle(new String(lineBuf.toByteArray(), this.charset));\n-                            lineBuf.reset();\n-                            rePos = pos + i + 1L;\n+                            n = 0;\n+                            this.listener.handle(new String(byteArrayOutputStream.toByteArray(), this.charset));\n+                            byteArrayOutputStream.reset();\n+                            filePointer2 = filePointer + i + 1L;\n                             break;\n                         }\n                         case 13: {\n-                            if (seenCR) {\n-                                lineBuf.write(13);\n+                            if (n != 0) {\n+                                byteArrayOutputStream.write(13);\n                             }\n-                            seenCR = true;\n+                            n = 1;\n                             break;\n                         }\n                         default: {\n-                            if (seenCR) {\n-                                seenCR = false;\n-                                this.listener.handle(new String(lineBuf.toByteArray(), this.charset));\n-                                lineBuf.reset();\n-                                rePos = pos + i + 1L;\n+                            if (n != 0) {\n+                                n = 0;\n+                                this.listener.handle(new String(byteArrayOutputStream.toByteArray(), this.charset));\n+                                byteArrayOutputStream.reset();\n+                                filePointer2 = filePointer + i + 1L;\n                             }\n-                            lineBuf.write(ch);\n+                            byteArrayOutputStream.write(b);\n                             break;\n                         }\n                     }\n                 }\n-                pos = reader.getFilePointer();\n+                filePointer = randomAccessFile.getFilePointer();\n             }\n-            reader.seek(rePos);\n+            randomAccessFile.seek(filePointer2);\n             if (this.listener instanceof TailerListenerAdapter) {\n                 ((TailerListenerAdapter)this.listener).endOfFileReached();\n             }\n-            return rePos;\n+            return filePointer2;\n         }\n     }\n     \n     static {\n         DEFAULT_CHARSET = Charset.defaultCharset();\n     }\n }\n"}]}
