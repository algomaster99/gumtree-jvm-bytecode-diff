{"diffoscope-json-version": 1, "source1": "first/FilesUncheck.class", "source2": "second/FilesUncheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -25,230 +25,230 @@\n import java.nio.file.Files;\n import java.nio.file.CopyOption;\n import java.nio.file.Path;\n import java.io.InputStream;\n \n public final class FilesUncheck\n {\n-    public static long copy(final InputStream in, final Path target, final CopyOption... options) {\n-        return (long)Uncheck.apply(Files::copy, (Object)in, (Object)target, (Object)options);\n+    public static long copy(final InputStream inputStream, final Path path, final CopyOption... array) {\n+        return (long)Uncheck.apply(Files::copy, (Object)inputStream, (Object)path, (Object)array);\n     }\n     \n-    public static long copy(final Path source, final OutputStream out) {\n-        return (long)Uncheck.apply(Files::copy, (Object)source, (Object)out);\n+    public static long copy(final Path path, final OutputStream outputStream) {\n+        return (long)Uncheck.apply(Files::copy, (Object)path, (Object)outputStream);\n     }\n     \n-    public static Path copy(final Path source, final Path target, final CopyOption... options) {\n-        return (Path)Uncheck.apply(Files::copy, (Object)source, (Object)target, (Object)options);\n+    public static Path copy(final Path path, final Path path2, final CopyOption... array) {\n+        return (Path)Uncheck.apply(Files::copy, (Object)path, (Object)path2, (Object)array);\n     }\n     \n-    public static Path createDirectories(final Path dir, final FileAttribute<?>... attrs) {\n-        return (Path)Uncheck.apply(Files::createDirectories, (Object)dir, (Object)attrs);\n+    public static Path createDirectories(final Path path, final FileAttribute<?>... array) {\n+        return (Path)Uncheck.apply(Files::createDirectories, (Object)path, (Object)array);\n     }\n     \n-    public static Path createDirectory(final Path dir, final FileAttribute<?>... attrs) {\n-        return (Path)Uncheck.apply(Files::createDirectory, (Object)dir, (Object)attrs);\n+    public static Path createDirectory(final Path path, final FileAttribute<?>... array) {\n+        return (Path)Uncheck.apply(Files::createDirectory, (Object)path, (Object)array);\n     }\n     \n-    public static Path createFile(final Path path, final FileAttribute<?>... attrs) {\n-        return (Path)Uncheck.apply(Files::createFile, (Object)path, (Object)attrs);\n+    public static Path createFile(final Path path, final FileAttribute<?>... array) {\n+        return (Path)Uncheck.apply(Files::createFile, (Object)path, (Object)array);\n     }\n     \n-    public static Path createLink(final Path link, final Path existing) {\n-        return (Path)Uncheck.apply(Files::createLink, (Object)link, (Object)existing);\n+    public static Path createLink(final Path path, final Path path2) {\n+        return (Path)Uncheck.apply(Files::createLink, (Object)path, (Object)path2);\n     }\n     \n-    public static Path createSymbolicLink(final Path link, final Path target, final FileAttribute<?>... attrs) {\n-        return (Path)Uncheck.apply(Files::createSymbolicLink, (Object)link, (Object)target, (Object)attrs);\n+    public static Path createSymbolicLink(final Path path, final Path path2, final FileAttribute<?>... array) {\n+        return (Path)Uncheck.apply(Files::createSymbolicLink, (Object)path, (Object)path2, (Object)array);\n     }\n     \n-    public static Path createTempDirectory(final Path dir, final String prefix, final FileAttribute<?>... attrs) {\n-        return (Path)Uncheck.apply(Files::createTempDirectory, (Object)dir, (Object)prefix, (Object)attrs);\n+    public static Path createTempDirectory(final Path path, final String s, final FileAttribute<?>... array) {\n+        return (Path)Uncheck.apply(Files::createTempDirectory, (Object)path, (Object)s, (Object)array);\n     }\n     \n-    public static Path createTempDirectory(final String prefix, final FileAttribute<?>... attrs) {\n-        return (Path)Uncheck.apply(Files::createTempDirectory, (Object)prefix, (Object)attrs);\n+    public static Path createTempDirectory(final String s, final FileAttribute<?>... array) {\n+        return (Path)Uncheck.apply(Files::createTempDirectory, (Object)s, (Object)array);\n     }\n     \n-    public static Path createTempFile(final Path dir, final String prefix, final String suffix, final FileAttribute<?>... attrs) {\n-        return (Path)Uncheck.apply(Files::createTempFile, (Object)dir, (Object)prefix, (Object)suffix, (Object)attrs);\n+    public static Path createTempFile(final Path path, final String s, final String s2, final FileAttribute<?>... array) {\n+        return (Path)Uncheck.apply(Files::createTempFile, (Object)path, (Object)s, (Object)s2, (Object)array);\n     }\n     \n-    public static Path createTempFile(final String prefix, final String suffix, final FileAttribute<?>... attrs) {\n-        return (Path)Uncheck.apply(Files::createTempFile, (Object)prefix, (Object)suffix, (Object)attrs);\n+    public static Path createTempFile(final String s, final String s2, final FileAttribute<?>... array) {\n+        return (Path)Uncheck.apply(Files::createTempFile, (Object)s, (Object)s2, (Object)array);\n     }\n     \n     public static void delete(final Path path) {\n         Uncheck.accept(Files::delete, (Object)path);\n     }\n     \n     public static boolean deleteIfExists(final Path path) {\n         return (boolean)Uncheck.apply(Files::deleteIfExists, (Object)path);\n     }\n     \n-    public static Object getAttribute(final Path path, final String attribute, final LinkOption... options) {\n-        return Uncheck.apply(Files::getAttribute, (Object)path, (Object)attribute, (Object)options);\n+    public static Object getAttribute(final Path path, final String s, final LinkOption... array) {\n+        return Uncheck.apply(Files::getAttribute, (Object)path, (Object)s, (Object)array);\n     }\n     \n     public static FileStore getFileStore(final Path path) {\n         return (FileStore)Uncheck.apply(Files::getFileStore, (Object)path);\n     }\n     \n-    public static FileTime getLastModifiedTime(final Path path, final LinkOption... options) {\n-        return (FileTime)Uncheck.apply(Files::getLastModifiedTime, (Object)path, (Object)options);\n+    public static FileTime getLastModifiedTime(final Path path, final LinkOption... array) {\n+        return (FileTime)Uncheck.apply(Files::getLastModifiedTime, (Object)path, (Object)array);\n     }\n     \n-    public static UserPrincipal getOwner(final Path path, final LinkOption... options) {\n-        return (UserPrincipal)Uncheck.apply(Files::getOwner, (Object)path, (Object)options);\n+    public static UserPrincipal getOwner(final Path path, final LinkOption... array) {\n+        return (UserPrincipal)Uncheck.apply(Files::getOwner, (Object)path, (Object)array);\n     }\n     \n-    public static Set<PosixFilePermission> getPosixFilePermissions(final Path path, final LinkOption... options) {\n-        return (Set)Uncheck.apply(Files::getPosixFilePermissions, (Object)path, (Object)options);\n+    public static Set<PosixFilePermission> getPosixFilePermissions(final Path path, final LinkOption... array) {\n+        return (Set)Uncheck.apply(Files::getPosixFilePermissions, (Object)path, (Object)array);\n     }\n     \n     public static boolean isHidden(final Path path) {\n         return (boolean)Uncheck.apply(Files::isHidden, (Object)path);\n     }\n     \n     public static boolean isSameFile(final Path path, final Path path2) {\n         return (boolean)Uncheck.apply(Files::isSameFile, (Object)path, (Object)path2);\n     }\n     \n     public static Stream<String> lines(final Path path) {\n         return (Stream)Uncheck.apply(Files::lines, (Object)path);\n     }\n     \n-    public static Stream<String> lines(final Path path, final Charset cs) {\n-        return (Stream)Uncheck.apply(Files::lines, (Object)path, (Object)cs);\n+    public static Stream<String> lines(final Path path, final Charset charset) {\n+        return (Stream)Uncheck.apply(Files::lines, (Object)path, (Object)charset);\n     }\n     \n-    public static Stream<Path> list(final Path dir) {\n-        return (Stream)Uncheck.apply(Files::list, (Object)dir);\n+    public static Stream<Path> list(final Path path) {\n+        return (Stream)Uncheck.apply(Files::list, (Object)path);\n     }\n     \n-    public static Path move(final Path source, final Path target, final CopyOption... options) {\n-        return (Path)Uncheck.apply(Files::move, (Object)source, (Object)target, (Object)options);\n+    public static Path move(final Path path, final Path path2, final CopyOption... array) {\n+        return (Path)Uncheck.apply(Files::move, (Object)path, (Object)path2, (Object)array);\n     }\n     \n     public static BufferedReader newBufferedReader(final Path path) {\n         return (BufferedReader)Uncheck.apply(Files::newBufferedReader, (Object)path);\n     }\n     \n-    public static BufferedReader newBufferedReader(final Path path, final Charset cs) {\n-        return (BufferedReader)Uncheck.apply(Files::newBufferedReader, (Object)path, (Object)cs);\n+    public static BufferedReader newBufferedReader(final Path path, final Charset charset) {\n+        return (BufferedReader)Uncheck.apply(Files::newBufferedReader, (Object)path, (Object)charset);\n     }\n     \n-    public static BufferedWriter newBufferedWriter(final Path path, final Charset cs, final OpenOption... options) {\n-        return (BufferedWriter)Uncheck.apply(Files::newBufferedWriter, (Object)path, (Object)cs, (Object)options);\n+    public static BufferedWriter newBufferedWriter(final Path path, final Charset charset, final OpenOption... array) {\n+        return (BufferedWriter)Uncheck.apply(Files::newBufferedWriter, (Object)path, (Object)charset, (Object)array);\n     }\n     \n-    public static BufferedWriter newBufferedWriter(final Path path, final OpenOption... options) {\n-        return (BufferedWriter)Uncheck.apply(Files::newBufferedWriter, (Object)path, (Object)options);\n+    public static BufferedWriter newBufferedWriter(final Path path, final OpenOption... array) {\n+        return (BufferedWriter)Uncheck.apply(Files::newBufferedWriter, (Object)path, (Object)array);\n     }\n     \n-    public static SeekableByteChannel newByteChannel(final Path path, final OpenOption... options) {\n-        return (SeekableByteChannel)Uncheck.apply(Files::newByteChannel, (Object)path, (Object)options);\n+    public static SeekableByteChannel newByteChannel(final Path path, final OpenOption... array) {\n+        return (SeekableByteChannel)Uncheck.apply(Files::newByteChannel, (Object)path, (Object)array);\n     }\n     \n-    public static SeekableByteChannel newByteChannel(final Path path, final Set<? extends OpenOption> options, final FileAttribute<?>... attrs) {\n-        return (SeekableByteChannel)Uncheck.apply(Files::newByteChannel, (Object)path, (Object)options, (Object)attrs);\n+    public static SeekableByteChannel newByteChannel(final Path path, final Set<? extends OpenOption> set, final FileAttribute<?>... array) {\n+        return (SeekableByteChannel)Uncheck.apply(Files::newByteChannel, (Object)path, (Object)set, (Object)array);\n     }\n     \n-    public static DirectoryStream<Path> newDirectoryStream(final Path dir) {\n-        return (DirectoryStream)Uncheck.apply(Files::newDirectoryStream, (Object)dir);\n+    public static DirectoryStream<Path> newDirectoryStream(final Path path) {\n+        return (DirectoryStream)Uncheck.apply(Files::newDirectoryStream, (Object)path);\n     }\n     \n-    public static DirectoryStream<Path> newDirectoryStream(final Path dir, final DirectoryStream.Filter<? super Path> filter) {\n-        return (DirectoryStream)Uncheck.apply(Files::newDirectoryStream, (Object)dir, (Object)filter);\n+    public static DirectoryStream<Path> newDirectoryStream(final Path path, final DirectoryStream.Filter<? super Path> filter) {\n+        return (DirectoryStream)Uncheck.apply(Files::newDirectoryStream, (Object)path, (Object)filter);\n     }\n     \n-    public static DirectoryStream<Path> newDirectoryStream(final Path dir, final String glob) {\n-        return (DirectoryStream)Uncheck.apply(Files::newDirectoryStream, (Object)dir, (Object)glob);\n+    public static DirectoryStream<Path> newDirectoryStream(final Path path, final String s) {\n+        return (DirectoryStream)Uncheck.apply(Files::newDirectoryStream, (Object)path, (Object)s);\n     }\n     \n-    public static InputStream newInputStream(final Path path, final OpenOption... options) {\n-        return (InputStream)Uncheck.apply(Files::newInputStream, (Object)path, (Object)options);\n+    public static InputStream newInputStream(final Path path, final OpenOption... array) {\n+        return (InputStream)Uncheck.apply(Files::newInputStream, (Object)path, (Object)array);\n     }\n     \n-    public static OutputStream newOutputStream(final Path path, final OpenOption... options) {\n-        return (OutputStream)Uncheck.apply(Files::newOutputStream, (Object)path, (Object)options);\n+    public static OutputStream newOutputStream(final Path path, final OpenOption... array) {\n+        return (OutputStream)Uncheck.apply(Files::newOutputStream, (Object)path, (Object)array);\n     }\n     \n     public static String probeContentType(final Path path) {\n         return (String)Uncheck.apply(Files::probeContentType, (Object)path);\n     }\n     \n     public static byte[] readAllBytes(final Path path) {\n         return (byte[])Uncheck.apply(Files::readAllBytes, (Object)path);\n     }\n     \n     public static List<String> readAllLines(final Path path) {\n         return (List)Uncheck.apply(Files::readAllLines, (Object)path);\n     }\n     \n-    public static List<String> readAllLines(final Path path, final Charset cs) {\n-        return (List)Uncheck.apply(Files::readAllLines, (Object)path, (Object)cs);\n+    public static List<String> readAllLines(final Path path, final Charset charset) {\n+        return (List)Uncheck.apply(Files::readAllLines, (Object)path, (Object)charset);\n     }\n     \n-    public static <A extends BasicFileAttributes> A readAttributes(final Path path, final Class<A> type, final LinkOption... options) {\n-        return (A)Uncheck.apply(Files::readAttributes, (Object)path, (Object)type, (Object)options);\n+    public static <A extends BasicFileAttributes> A readAttributes(final Path path, final Class<A> clazz, final LinkOption... array) {\n+        return (A)Uncheck.apply(Files::readAttributes, (Object)path, (Object)clazz, (Object)array);\n     }\n     \n-    public static Map<String, Object> readAttributes(final Path path, final String attributes, final LinkOption... options) {\n-        return (Map)Uncheck.apply(Files::readAttributes, (Object)path, (Object)attributes, (Object)options);\n+    public static Map<String, Object> readAttributes(final Path path, final String s, final LinkOption... array) {\n+        return (Map)Uncheck.apply(Files::readAttributes, (Object)path, (Object)s, (Object)array);\n     }\n     \n-    public static Path readSymbolicLink(final Path link) {\n-        return (Path)Uncheck.apply(Files::readSymbolicLink, (Object)link);\n+    public static Path readSymbolicLink(final Path path) {\n+        return (Path)Uncheck.apply(Files::readSymbolicLink, (Object)path);\n     }\n     \n-    public static Path setAttribute(final Path path, final String attribute, final Object value, final LinkOption... options) {\n-        return (Path)Uncheck.apply(Files::setAttribute, (Object)path, (Object)attribute, value, (Object)options);\n+    public static Path setAttribute(final Path path, final String s, final Object o, final LinkOption... array) {\n+        return (Path)Uncheck.apply(Files::setAttribute, (Object)path, (Object)s, o, (Object)array);\n     }\n     \n-    public static Path setLastModifiedTime(final Path path, final FileTime time) {\n-        return (Path)Uncheck.apply(Files::setLastModifiedTime, (Object)path, (Object)time);\n+    public static Path setLastModifiedTime(final Path path, final FileTime fileTime) {\n+        return (Path)Uncheck.apply(Files::setLastModifiedTime, (Object)path, (Object)fileTime);\n     }\n     \n-    public static Path setOwner(final Path path, final UserPrincipal owner) {\n-        return (Path)Uncheck.apply(Files::setOwner, (Object)path, (Object)owner);\n+    public static Path setOwner(final Path path, final UserPrincipal userPrincipal) {\n+        return (Path)Uncheck.apply(Files::setOwner, (Object)path, (Object)userPrincipal);\n     }\n     \n-    public static Path setPosixFilePermissions(final Path path, final Set<PosixFilePermission> perms) {\n-        return (Path)Uncheck.apply(Files::setPosixFilePermissions, (Object)path, (Object)perms);\n+    public static Path setPosixFilePermissions(final Path path, final Set<PosixFilePermission> set) {\n+        return (Path)Uncheck.apply(Files::setPosixFilePermissions, (Object)path, (Object)set);\n     }\n     \n     public static long size(final Path path) {\n         return (long)Uncheck.apply(Files::size, (Object)path);\n     }\n     \n-    public static Stream<Path> walk(final Path start, final FileVisitOption... options) {\n-        return (Stream)Uncheck.apply(Files::walk, (Object)start, (Object)options);\n+    public static Stream<Path> walk(final Path path, final FileVisitOption... array) {\n+        return (Stream)Uncheck.apply(Files::walk, (Object)path, (Object)array);\n     }\n     \n-    public static Stream<Path> walk(final Path start, final int maxDepth, final FileVisitOption... options) {\n-        return (Stream)Uncheck.apply(Files::walk, (Object)start, (Object)Integer.valueOf(maxDepth), (Object)options);\n+    public static Stream<Path> walk(final Path path, final int i, final FileVisitOption... array) {\n+        return (Stream)Uncheck.apply(Files::walk, (Object)path, (Object)Integer.valueOf(i), (Object)array);\n     }\n     \n-    public static Path walkFileTree(final Path start, final FileVisitor<? super Path> visitor) {\n-        return (Path)Uncheck.apply(Files::walkFileTree, (Object)start, (Object)visitor);\n+    public static Path walkFileTree(final Path path, final FileVisitor<? super Path> fileVisitor) {\n+        return (Path)Uncheck.apply(Files::walkFileTree, (Object)path, (Object)fileVisitor);\n     }\n     \n-    public static Path walkFileTree(final Path start, final Set<FileVisitOption> options, final int maxDepth, final FileVisitor<? super Path> visitor) {\n-        return (Path)Uncheck.apply(Files::walkFileTree, (Object)start, (Object)options, (Object)Integer.valueOf(maxDepth), (Object)visitor);\n+    public static Path walkFileTree(final Path path, final Set<FileVisitOption> set, final int i, final FileVisitor<? super Path> fileVisitor) {\n+        return (Path)Uncheck.apply(Files::walkFileTree, (Object)path, (Object)set, (Object)Integer.valueOf(i), (Object)fileVisitor);\n     }\n     \n-    public static Path write(final Path path, final byte[] bytes, final OpenOption... options) {\n-        return (Path)Uncheck.apply(Files::write, (Object)path, (Object)bytes, (Object)options);\n+    public static Path write(final Path path, final byte[] array, final OpenOption... array2) {\n+        return (Path)Uncheck.apply(Files::write, (Object)path, (Object)array, (Object)array2);\n     }\n     \n-    public static Path write(final Path path, final Iterable<? extends CharSequence> lines, final Charset cs, final OpenOption... options) {\n-        return (Path)Uncheck.apply(Files::write, (Object)path, (Object)lines, (Object)cs, (Object)options);\n+    public static Path write(final Path path, final Iterable<? extends CharSequence> iterable, final Charset charset, final OpenOption... array) {\n+        return (Path)Uncheck.apply(Files::write, (Object)path, (Object)iterable, (Object)charset, (Object)array);\n     }\n     \n-    public static Path write(final Path path, final Iterable<? extends CharSequence> lines, final OpenOption... options) {\n-        return (Path)Uncheck.apply(Files::write, (Object)path, (Object)lines, (Object)options);\n+    public static Path write(final Path path, final Iterable<? extends CharSequence> iterable, final OpenOption... array) {\n+        return (Path)Uncheck.apply(Files::write, (Object)path, (Object)iterable, (Object)array);\n     }\n     \n     private FilesUncheck() {\n     }\n }\n"}]}
