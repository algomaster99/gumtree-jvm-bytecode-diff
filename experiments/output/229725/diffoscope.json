{"diffoscope-json-version": 1, "source1": "first/LZMAUtils.class", "source2": "second/LZMAUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,76 +10,75 @@\n     private static final FileNameUtil fileNameUtil;\n     private static final byte[] HEADER_MAGIC;\n     private static volatile LZMAUtils.CachedAvailability cachedLZMAAvailability;\n     \n     private LZMAUtils() {\n     }\n     \n-    public static boolean matches(final byte[] signature, final int length) {\n-        if (length < LZMAUtils.HEADER_MAGIC.length) {\n+    public static boolean matches(final byte[] array, final int n) {\n+        if (n < LZMAUtils.HEADER_MAGIC.length) {\n             return false;\n         }\n         for (int i = 0; i < LZMAUtils.HEADER_MAGIC.length; ++i) {\n-            if (signature[i] != LZMAUtils.HEADER_MAGIC[i]) {\n+            if (array[i] != LZMAUtils.HEADER_MAGIC[i]) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n     public static boolean isLZMACompressionAvailable() {\n-        final LZMAUtils.CachedAvailability cachedResult = LZMAUtils.cachedLZMAAvailability;\n-        if (cachedResult != LZMAUtils.CachedAvailability.DONT_CACHE) {\n-            return cachedResult == LZMAUtils.CachedAvailability.CACHED_AVAILABLE;\n+        final LZMAUtils.CachedAvailability cachedLZMAAvailability = LZMAUtils.cachedLZMAAvailability;\n+        if (cachedLZMAAvailability != LZMAUtils.CachedAvailability.DONT_CACHE) {\n+            return cachedLZMAAvailability == LZMAUtils.CachedAvailability.CACHED_AVAILABLE;\n         }\n         return internalIsLZMACompressionAvailable();\n     }\n     \n     private static boolean internalIsLZMACompressionAvailable() {\n         try {\n             LZMACompressorInputStream.matches((byte[])null, 0);\n             return true;\n         }\n-        catch (final NoClassDefFoundError error) {\n+        catch (final NoClassDefFoundError noClassDefFoundError) {\n             return false;\n         }\n     }\n     \n-    public static boolean isCompressedFilename(final String fileName) {\n-        return LZMAUtils.fileNameUtil.isCompressedFilename(fileName);\n+    public static boolean isCompressedFilename(final String s) {\n+        return LZMAUtils.fileNameUtil.isCompressedFilename(s);\n     }\n     \n-    public static String getUncompressedFilename(final String fileName) {\n-        return LZMAUtils.fileNameUtil.getUncompressedFilename(fileName);\n+    public static String getUncompressedFilename(final String s) {\n+        return LZMAUtils.fileNameUtil.getUncompressedFilename(s);\n     }\n     \n-    public static String getCompressedFilename(final String fileName) {\n-        return LZMAUtils.fileNameUtil.getCompressedFilename(fileName);\n+    public static String getCompressedFilename(final String s) {\n+        return LZMAUtils.fileNameUtil.getCompressedFilename(s);\n     }\n     \n-    public static void setCacheLZMAAvailablity(final boolean doCache) {\n-        if (!doCache) {\n+    public static void setCacheLZMAAvailablity(final boolean b) {\n+        if (!b) {\n             LZMAUtils.cachedLZMAAvailability = LZMAUtils.CachedAvailability.DONT_CACHE;\n         }\n         else if (LZMAUtils.cachedLZMAAvailability == LZMAUtils.CachedAvailability.DONT_CACHE) {\n-            final boolean hasLzma = internalIsLZMACompressionAvailable();\n-            LZMAUtils.cachedLZMAAvailability = (hasLzma ? LZMAUtils.CachedAvailability.CACHED_AVAILABLE : LZMAUtils.CachedAvailability.CACHED_UNAVAILABLE);\n+            LZMAUtils.cachedLZMAAvailability = (internalIsLZMACompressionAvailable() ? LZMAUtils.CachedAvailability.CACHED_AVAILABLE : LZMAUtils.CachedAvailability.CACHED_UNAVAILABLE);\n         }\n     }\n     \n     static LZMAUtils.CachedAvailability getCachedLZMAAvailability() {\n         return LZMAUtils.cachedLZMAAvailability;\n     }\n     \n     static {\n         HEADER_MAGIC = new byte[] { 93, 0, 0 };\n-        final Map<String, String> uncompressSuffix = new HashMap<String, String>();\n-        uncompressSuffix.put(\".lzma\", \"\");\n-        uncompressSuffix.put(\"-lzma\", \"\");\n-        fileNameUtil = new FileNameUtil((Map)uncompressSuffix, \".lzma\");\n+        final HashMap hashMap = new HashMap();\n+        hashMap.put(\".lzma\", \"\");\n+        hashMap.put(\"-lzma\", \"\");\n+        fileNameUtil = new FileNameUtil((Map)hashMap, \".lzma\");\n         LZMAUtils.cachedLZMAAvailability = LZMAUtils.CachedAvailability.DONT_CACHE;\n         try {\n             Class.forName(\"org.osgi.framework.BundleEvent\");\n         }\n         catch (final Exception ex) {\n             setCacheLZMAAvailablity(true);\n         }\n"}]}
