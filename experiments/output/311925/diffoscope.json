{"diffoscope-json-version": 1, "source1": "first/X0017_StrongEncryptionHeader.class", "source2": "second/X0017_StrongEncryptionHeader.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,181 +1,181 @@\n-  SHA-256 checksum ee92af5d7b9ace6c3cca839541e901299a443363d4d584deeafbba1996c4d776\n+  SHA-256 checksum fa4b2c523f5df7df3c829f1e295755adef98419c0e913300cd315f547a915994\n   Compiled from \"X0017_StrongEncryptionHeader.java\"\n public class org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader extends org.apache.commons.compress.archivers.zip.PKWareExtraHeader\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #47                         // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n-  super_class: #48                        // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  this_class: #42                         // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n+  super_class: #8                         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n   interfaces: 0, fields: 13, methods: 9, attributes: 2\n Constant pool:\n-    #1 = Class              #93           // org/apache/commons/compress/archivers/zip/ZipShort\n-    #2 = Methodref          #1.#94        // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-    #3 = Methodref          #48.#95       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-    #4 = Class              #96           // java/util/zip/ZipException\n-    #5 = Class              #97           // java/lang/StringBuilder\n-    #6 = Methodref          #5.#98        // java/lang/StringBuilder.\"<init>\":()V\n-    #7 = String             #99           // Invalid X0017_StrongEncryptionHeader:\n-    #8 = Methodref          #5.#100       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #9 = String             #101          //\n-   #10 = Methodref          #5.#102       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #11 = String             #103          //  doesn\\'t fit into\n-   #12 = String             #104          //  bytes of data at position\n-   #13 = Methodref          #5.#105       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #14 = Methodref          #4.#106       // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #15 = Fieldref           #47.#107      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-   #16 = Fieldref           #47.#108      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #17 = Fieldref           #47.#109      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.rcount:J\n-   #18 = Methodref          #47.#110      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.assertMinimalLength:(II)V\n-   #19 = Methodref          #1.#111       // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-   #20 = Fieldref           #47.#112      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.format:I\n-   #21 = Methodref          #52.#113      // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-   #22 = Fieldref           #47.#114      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.bitlen:I\n-   #23 = Fieldref           #47.#115      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.flags:I\n-   #24 = Methodref          #116.#117     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-   #25 = Methodref          #61.#118      // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #26 = Fieldref           #47.#119      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.hashSize:I\n-   #27 = String             #120          // ivSize\n-   #28 = Methodref          #47.#121      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.assertDynamicLengthFits:(Ljava/lang/String;III)V\n-   #29 = Methodref          #122.#123     // java/util/Arrays.copyOfRange:([BII)[B\n-   #30 = Fieldref           #47.#124      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.ivData:[B\n-   #31 = String             #125          // erdSize\n-   #32 = Fieldref           #47.#126      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.erdData:[B\n-   #33 = String             #127          // vSize\n-   #34 = String             #128          // Invalid X0017_StrongEncryptionHeader: vSize\n-   #35 = String             #129          //  is too small to hold CRC\n-   #36 = Fieldref           #47.#130      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.vData:[B\n-   #37 = Fieldref           #47.#131      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.vCRC32:[B\n-   #38 = String             #132          // Invalid X0017_StrongEncryptionHeader: resize\n-   #39 = String             #133          //  is too small to hold hashSize\n-   #40 = String             #134          // resize\n-   #41 = Fieldref           #47.#135      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.recipientKeyHash:[B\n-   #42 = Fieldref           #47.#136      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.keyBlob:[B\n-   #43 = Methodref          #48.#137      // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n-   #44 = Methodref          #47.#138      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.parseCentralDirectoryFormat:([BII)V\n-   #45 = Methodref          #48.#139      // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromLocalFileData:([BII)V\n-   #46 = Methodref          #47.#140      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.parseFileFormat:([BII)V\n-   #47 = Class              #141          // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n-   #48 = Class              #142          // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-   #49 = Utf8               format\n-   #50 = Utf8               I\n-   #51 = Utf8               algId\n-   #52 = Class              #143          // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n-   #53 = Utf8               EncryptionAlgorithm\n-   #54 = Utf8               InnerClasses\n-   #55 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-   #56 = Utf8               bitlen\n-   #57 = Utf8               flags\n-   #58 = Utf8               rcount\n-   #59 = Utf8               J\n-   #60 = Utf8               hashAlg\n-   #61 = Class              #144          // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n-   #62 = Utf8               HashAlgorithm\n-   #63 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #64 = Utf8               hashSize\n-   #65 = Utf8               ivData\n-   #66 = Utf8               [B\n-   #67 = Utf8               erdData\n-   #68 = Utf8               recipientKeyHash\n-   #69 = Utf8               keyBlob\n-   #70 = Utf8               vData\n-   #71 = Utf8               vCRC32\n-   #72 = Utf8               <init>\n-   #73 = Utf8               ()V\n-   #74 = Utf8               Code\n-   #75 = Utf8               LineNumberTable\n-   #76 = Utf8               assertDynamicLengthFits\n-   #77 = Utf8               (Ljava/lang/String;III)V\n-   #78 = Utf8               StackMapTable\n-   #79 = Utf8               Exceptions\n-   #80 = Utf8               getEncryptionAlgorithm\n-   #81 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-   #82 = Utf8               getHashAlgorithm\n-   #83 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #84 = Utf8               getRecordCount\n-   #85 = Utf8               ()J\n-   #86 = Utf8               parseCentralDirectoryFormat\n-   #87 = Utf8               ([BII)V\n-   #88 = Utf8               parseFileFormat\n-   #89 = Utf8               parseFromCentralDirectoryData\n-   #90 = Utf8               parseFromLocalFileData\n-   #91 = Utf8               SourceFile\n-   #92 = Utf8               X0017_StrongEncryptionHeader.java\n-   #93 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-   #94 = NameAndType        #72:#145      // \"<init>\":(I)V\n-   #95 = NameAndType        #72:#146      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-   #96 = Utf8               java/util/zip/ZipException\n-   #97 = Utf8               java/lang/StringBuilder\n-   #98 = NameAndType        #72:#73       // \"<init>\":()V\n-   #99 = Utf8               Invalid X0017_StrongEncryptionHeader:\n-  #100 = NameAndType        #147:#148     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #101 = Utf8\n-  #102 = NameAndType        #147:#149     // append:(I)Ljava/lang/StringBuilder;\n-  #103 = Utf8                doesn\\'t fit into\n-  #104 = Utf8                bytes of data at position\n-  #105 = NameAndType        #150:#151     // toString:()Ljava/lang/String;\n-  #106 = NameAndType        #72:#152      // \"<init>\":(Ljava/lang/String;)V\n-  #107 = NameAndType        #51:#55       // algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-  #108 = NameAndType        #60:#63       // hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-  #109 = NameAndType        #58:#59       // rcount:J\n-  #110 = NameAndType        #153:#154     // assertMinimalLength:(II)V\n-  #111 = NameAndType        #155:#156     // getValue:([BI)I\n-  #112 = NameAndType        #49:#50       // format:I\n-  #113 = NameAndType        #157:#158     // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-  #114 = NameAndType        #56:#50       // bitlen:I\n-  #115 = NameAndType        #57:#50       // flags:I\n-  #116 = Class              #159          // org/apache/commons/compress/archivers/zip/ZipLong\n-  #117 = NameAndType        #155:#160     // getValue:([BI)J\n-  #118 = NameAndType        #157:#161     // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-  #119 = NameAndType        #64:#50       // hashSize:I\n-  #120 = Utf8               ivSize\n-  #121 = NameAndType        #76:#77       // assertDynamicLengthFits:(Ljava/lang/String;III)V\n-  #122 = Class              #162          // java/util/Arrays\n-  #123 = NameAndType        #163:#164     // copyOfRange:([BII)[B\n-  #124 = NameAndType        #65:#66       // ivData:[B\n-  #125 = Utf8               erdSize\n-  #126 = NameAndType        #67:#66       // erdData:[B\n-  #127 = Utf8               vSize\n-  #128 = Utf8               Invalid X0017_StrongEncryptionHeader: vSize\n-  #129 = Utf8                is too small to hold CRC\n-  #130 = NameAndType        #70:#66       // vData:[B\n-  #131 = NameAndType        #71:#66       // vCRC32:[B\n-  #132 = Utf8               Invalid X0017_StrongEncryptionHeader: resize\n-  #133 = Utf8                is too small to hold hashSize\n-  #134 = Utf8               resize\n-  #135 = NameAndType        #68:#66       // recipientKeyHash:[B\n-  #136 = NameAndType        #69:#66       // keyBlob:[B\n-  #137 = NameAndType        #89:#87       // parseFromCentralDirectoryData:([BII)V\n-  #138 = NameAndType        #86:#87       // parseCentralDirectoryFormat:([BII)V\n-  #139 = NameAndType        #90:#87       // parseFromLocalFileData:([BII)V\n-  #140 = NameAndType        #88:#87       // parseFileFormat:([BII)V\n-  #141 = Utf8               org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n-  #142 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-  #143 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n-  #144 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n-  #145 = Utf8               (I)V\n-  #146 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-  #147 = Utf8               append\n-  #148 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #149 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #150 = Utf8               toString\n-  #151 = Utf8               ()Ljava/lang/String;\n-  #152 = Utf8               (Ljava/lang/String;)V\n-  #153 = Utf8               assertMinimalLength\n-  #154 = Utf8               (II)V\n-  #155 = Utf8               getValue\n-  #156 = Utf8               ([BI)I\n-  #157 = Utf8               getAlgorithmByCode\n-  #158 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-  #159 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #160 = Utf8               ([BI)J\n-  #161 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-  #162 = Utf8               java/util/Arrays\n-  #163 = Utf8               copyOfRange\n-  #164 = Utf8               ([BII)[B\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/ZipShort\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+    #3 = Methodref          #1.#4         // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+    #4 = NameAndType        #5:#6         // \"<init>\":(I)V\n+    #5 = Utf8               <init>\n+    #6 = Utf8               (I)V\n+    #7 = Methodref          #8.#9         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+    #8 = Class              #10           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+    #9 = NameAndType        #5:#11        // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #10 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+   #11 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #12 = Class              #13           // java/util/zip/ZipException\n+   #13 = Utf8               java/util/zip/ZipException\n+   #14 = Class              #15           // java/lang/StringBuilder\n+   #15 = Utf8               java/lang/StringBuilder\n+   #16 = Methodref          #14.#17       // java/lang/StringBuilder.\"<init>\":()V\n+   #17 = NameAndType        #5:#18        // \"<init>\":()V\n+   #18 = Utf8               ()V\n+   #19 = String             #20           // Invalid X0017_StrongEncryptionHeader:\n+   #20 = Utf8               Invalid X0017_StrongEncryptionHeader:\n+   #21 = Methodref          #14.#22       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #22 = NameAndType        #23:#24       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #23 = Utf8               append\n+   #24 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #25 = String             #26           //\n+   #26 = Utf8\n+   #27 = Methodref          #14.#28       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #28 = NameAndType        #23:#29       // append:(I)Ljava/lang/StringBuilder;\n+   #29 = Utf8               (I)Ljava/lang/StringBuilder;\n+   #30 = String             #31           //  doesn\\'t fit into\n+   #31 = Utf8                doesn\\'t fit into\n+   #32 = String             #33           //  bytes of data at position\n+   #33 = Utf8                bytes of data at position\n+   #34 = Methodref          #14.#35       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #35 = NameAndType        #36:#37       // toString:()Ljava/lang/String;\n+   #36 = Utf8               toString\n+   #37 = Utf8               ()Ljava/lang/String;\n+   #38 = Methodref          #12.#39       // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+   #39 = NameAndType        #5:#40        // \"<init>\":(Ljava/lang/String;)V\n+   #40 = Utf8               (Ljava/lang/String;)V\n+   #41 = Fieldref           #42.#43       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #42 = Class              #44           // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n+   #43 = NameAndType        #45:#46       // algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #44 = Utf8               org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n+   #45 = Utf8               algId\n+   #46 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #47 = Fieldref           #42.#48       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #48 = NameAndType        #49:#50       // hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #49 = Utf8               hashAlg\n+   #50 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #51 = Fieldref           #42.#52       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.rcount:J\n+   #52 = NameAndType        #53:#54       // rcount:J\n+   #53 = Utf8               rcount\n+   #54 = Utf8               J\n+   #55 = Methodref          #42.#56       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.assertMinimalLength:(II)V\n+   #56 = NameAndType        #57:#58       // assertMinimalLength:(II)V\n+   #57 = Utf8               assertMinimalLength\n+   #58 = Utf8               (II)V\n+   #59 = Methodref          #1.#60        // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+   #60 = NameAndType        #61:#62       // getValue:([BI)I\n+   #61 = Utf8               getValue\n+   #62 = Utf8               ([BI)I\n+   #63 = Fieldref           #42.#64       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.format:I\n+   #64 = NameAndType        #65:#66       // format:I\n+   #65 = Utf8               format\n+   #66 = Utf8               I\n+   #67 = Methodref          #68.#69       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #68 = Class              #70           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n+   #69 = NameAndType        #71:#72       // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #70 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n+   #71 = Utf8               getAlgorithmByCode\n+   #72 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #73 = Fieldref           #42.#74       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.bitlen:I\n+   #74 = NameAndType        #75:#66       // bitlen:I\n+   #75 = Utf8               bitlen\n+   #76 = Fieldref           #42.#77       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.flags:I\n+   #77 = NameAndType        #78:#66       // flags:I\n+   #78 = Utf8               flags\n+   #79 = Methodref          #80.#81       // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+   #80 = Class              #82           // org/apache/commons/compress/archivers/zip/ZipLong\n+   #81 = NameAndType        #61:#83       // getValue:([BI)J\n+   #82 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+   #83 = Utf8               ([BI)J\n+   #84 = Methodref          #85.#86       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #85 = Class              #87           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n+   #86 = NameAndType        #71:#88       // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #87 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n+   #88 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #89 = Fieldref           #42.#90       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.hashSize:I\n+   #90 = NameAndType        #91:#66       // hashSize:I\n+   #91 = Utf8               hashSize\n+   #92 = String             #93           // ivSize\n+   #93 = Utf8               ivSize\n+   #94 = Methodref          #42.#95       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.assertDynamicLengthFits:(Ljava/lang/String;III)V\n+   #95 = NameAndType        #96:#97       // assertDynamicLengthFits:(Ljava/lang/String;III)V\n+   #96 = Utf8               assertDynamicLengthFits\n+   #97 = Utf8               (Ljava/lang/String;III)V\n+   #98 = Methodref          #99.#100      // java/util/Arrays.copyOfRange:([BII)[B\n+   #99 = Class              #101          // java/util/Arrays\n+  #100 = NameAndType        #102:#103     // copyOfRange:([BII)[B\n+  #101 = Utf8               java/util/Arrays\n+  #102 = Utf8               copyOfRange\n+  #103 = Utf8               ([BII)[B\n+  #104 = Fieldref           #42.#105      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.ivData:[B\n+  #105 = NameAndType        #106:#107     // ivData:[B\n+  #106 = Utf8               ivData\n+  #107 = Utf8               [B\n+  #108 = String             #109          // erdSize\n+  #109 = Utf8               erdSize\n+  #110 = Fieldref           #42.#111      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.erdData:[B\n+  #111 = NameAndType        #112:#107     // erdData:[B\n+  #112 = Utf8               erdData\n+  #113 = String             #114          // vSize\n+  #114 = Utf8               vSize\n+  #115 = String             #116          // Invalid X0017_StrongEncryptionHeader: vSize\n+  #116 = Utf8               Invalid X0017_StrongEncryptionHeader: vSize\n+  #117 = String             #118          //  is too small to hold CRC\n+  #118 = Utf8                is too small to hold CRC\n+  #119 = Fieldref           #42.#120      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.vData:[B\n+  #120 = NameAndType        #121:#107     // vData:[B\n+  #121 = Utf8               vData\n+  #122 = Fieldref           #42.#123      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.vCRC32:[B\n+  #123 = NameAndType        #124:#107     // vCRC32:[B\n+  #124 = Utf8               vCRC32\n+  #125 = String             #126          // Invalid X0017_StrongEncryptionHeader: resize\n+  #126 = Utf8               Invalid X0017_StrongEncryptionHeader: resize\n+  #127 = String             #128          //  is too small to hold hashSize\n+  #128 = Utf8                is too small to hold hashSize\n+  #129 = String             #130          // resize\n+  #130 = Utf8               resize\n+  #131 = Fieldref           #42.#132      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.recipientKeyHash:[B\n+  #132 = NameAndType        #133:#107     // recipientKeyHash:[B\n+  #133 = Utf8               recipientKeyHash\n+  #134 = Fieldref           #42.#135      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.keyBlob:[B\n+  #135 = NameAndType        #136:#107     // keyBlob:[B\n+  #136 = Utf8               keyBlob\n+  #137 = Methodref          #8.#138       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n+  #138 = NameAndType        #139:#140     // parseFromCentralDirectoryData:([BII)V\n+  #139 = Utf8               parseFromCentralDirectoryData\n+  #140 = Utf8               ([BII)V\n+  #141 = Methodref          #42.#142      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.parseCentralDirectoryFormat:([BII)V\n+  #142 = NameAndType        #143:#140     // parseCentralDirectoryFormat:([BII)V\n+  #143 = Utf8               parseCentralDirectoryFormat\n+  #144 = Methodref          #8.#145       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromLocalFileData:([BII)V\n+  #145 = NameAndType        #146:#140     // parseFromLocalFileData:([BII)V\n+  #146 = Utf8               parseFromLocalFileData\n+  #147 = Methodref          #42.#148      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.parseFileFormat:([BII)V\n+  #148 = NameAndType        #149:#140     // parseFileFormat:([BII)V\n+  #149 = Utf8               parseFileFormat\n+  #150 = Utf8               Code\n+  #151 = Utf8               LineNumberTable\n+  #152 = Utf8               StackMapTable\n+  #153 = Utf8               Exceptions\n+  #154 = Utf8               getEncryptionAlgorithm\n+  #155 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+  #156 = Utf8               getHashAlgorithm\n+  #157 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+  #158 = Utf8               getRecordCount\n+  #159 = Utf8               ()J\n+  #160 = Utf8               SourceFile\n+  #161 = Utf8               X0017_StrongEncryptionHeader.java\n+  #162 = Utf8               InnerClasses\n+  #163 = Utf8               EncryptionAlgorithm\n+  #164 = Utf8               HashAlgorithm\n {\n   private int format;\n     descriptor: I\n     flags: (0x0002) ACC_PRIVATE\n \n   private org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm algId;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n@@ -230,16 +230,16 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n          1: new           #1                  // class org/apache/commons/compress/archivers/zip/ZipShort\n          4: dup\n          5: bipush        23\n-         7: invokespecial #2                  // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-        10: invokespecial #3                  // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+         7: invokespecial #3                  // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+        10: invokespecial #7                  // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n         13: return\n       LineNumberTable:\n         line 272: 0\n         line 273: 13\n \n   private void assertDynamicLengthFits(java.lang.String, int, int, int) throws java.util.zip.ZipException;\n     descriptor: (Ljava/lang/String;III)V\n@@ -247,37 +247,37 @@\n     Code:\n       stack=4, locals=5, args_size=5\n          0: iload_3\n          1: iload_2\n          2: iadd\n          3: iload         4\n          5: if_icmple     63\n-         8: new           #4                  // class java/util/zip/ZipException\n+         8: new           #12                 // class java/util/zip/ZipException\n         11: dup\n-        12: new           #5                  // class java/lang/StringBuilder\n+        12: new           #14                 // class java/lang/StringBuilder\n         15: dup\n-        16: invokespecial #6                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        19: ldc           #7                  // String Invalid X0017_StrongEncryptionHeader:\n-        21: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        16: invokespecial #16                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        19: ldc           #19                 // String Invalid X0017_StrongEncryptionHeader:\n+        21: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         24: aload_1\n-        25: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        28: ldc           #9                  // String\n-        30: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        25: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        28: ldc           #25                 // String\n+        30: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         33: iload_2\n-        34: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        37: ldc           #11                 // String  doesn\\'t fit into\n-        39: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        34: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        37: ldc           #30                 // String  doesn\\'t fit into\n+        39: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         42: iload         4\n-        44: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        47: ldc           #12                 // String  bytes of data at position\n-        49: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        44: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        47: ldc           #32                 // String  bytes of data at position\n+        49: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         52: iload_3\n-        53: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        56: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        59: invokespecial #14                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        53: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        56: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        59: invokespecial #38                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n         62: athrow\n         63: return\n       LineNumberTable:\n         line 277: 0\n         line 278: 8\n         line 282: 63\n       StackMapTable: number_of_entries = 1\n@@ -287,108 +287,108 @@\n \n   public org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm getEncryptionAlgorithm();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #15                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+         1: getfield      #41                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n          4: areturn\n       LineNumberTable:\n         line 289: 0\n \n   public org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm getHashAlgorithm();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #16                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+         1: getfield      #47                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n          4: areturn\n       LineNumberTable:\n         line 297: 0\n \n   public long getRecordCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #17                 // Field rcount:J\n+         1: getfield      #51                 // Field rcount:J\n          4: lreturn\n       LineNumberTable:\n         line 305: 0\n \n   public void parseCentralDirectoryFormat(byte[], int, int) throws java.util.zip.ZipException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: bipush        12\n          3: iload_3\n-         4: invokevirtual #18                 // Method assertMinimalLength:(II)V\n+         4: invokevirtual #55                 // Method assertMinimalLength:(II)V\n          7: aload_0\n          8: aload_1\n          9: iload_2\n-        10: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        13: putfield      #20                 // Field format:I\n+        10: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        13: putfield      #63                 // Field format:I\n         16: aload_0\n         17: aload_1\n         18: iload_2\n         19: iconst_2\n         20: iadd\n-        21: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        24: invokestatic  #21                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-        27: putfield      #15                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+        21: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        24: invokestatic  #67                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+        27: putfield      #41                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n         30: aload_0\n         31: aload_1\n         32: iload_2\n         33: iconst_4\n         34: iadd\n-        35: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        38: putfield      #22                 // Field bitlen:I\n+        35: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        38: putfield      #73                 // Field bitlen:I\n         41: aload_0\n         42: aload_1\n         43: iload_2\n         44: bipush        6\n         46: iadd\n-        47: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        50: putfield      #23                 // Field flags:I\n+        47: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        50: putfield      #76                 // Field flags:I\n         53: aload_0\n         54: aload_1\n         55: iload_2\n         56: bipush        8\n         58: iadd\n-        59: invokestatic  #24                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-        62: putfield      #17                 // Field rcount:J\n+        59: invokestatic  #79                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+        62: putfield      #51                 // Field rcount:J\n         65: aload_0\n-        66: getfield      #17                 // Field rcount:J\n+        66: getfield      #51                 // Field rcount:J\n         69: lconst_0\n         70: lcmp\n         71: ifle          108\n         74: aload_0\n         75: bipush        16\n         77: iload_3\n-        78: invokevirtual #18                 // Method assertMinimalLength:(II)V\n+        78: invokevirtual #55                 // Method assertMinimalLength:(II)V\n         81: aload_0\n         82: aload_1\n         83: iload_2\n         84: bipush        12\n         86: iadd\n-        87: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        90: invokestatic  #25                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-        93: putfield      #16                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+        87: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        90: invokestatic  #84                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+        93: putfield      #47                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n         96: aload_0\n         97: aload_1\n         98: iload_2\n         99: bipush        14\n        101: iadd\n-       102: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       105: putfield      #26                 // Field hashSize:I\n+       102: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       105: putfield      #89                 // Field hashSize:I\n        108: return\n       LineNumberTable:\n         line 318: 0\n         line 320: 7\n         line 321: 16\n         line 322: 30\n         line 323: 41\n@@ -408,418 +408,418 @@\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=8, args_size=4\n          0: aload_0\n          1: iconst_4\n          2: iload_3\n-         3: invokevirtual #18                 // Method assertMinimalLength:(II)V\n+         3: invokevirtual #55                 // Method assertMinimalLength:(II)V\n          6: aload_1\n          7: iload_2\n-         8: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+         8: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n         11: istore        4\n         13: aload_0\n-        14: ldc           #27                 // String ivSize\n+        14: ldc           #92                 // String ivSize\n         16: iload         4\n         18: iconst_4\n         19: iload_3\n-        20: invokespecial #28                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+        20: invokespecial #94                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n         23: aload_0\n         24: iload_2\n         25: iconst_4\n         26: iadd\n         27: iload         4\n-        29: invokevirtual #18                 // Method assertMinimalLength:(II)V\n+        29: invokevirtual #55                 // Method assertMinimalLength:(II)V\n         32: aload_0\n         33: aload_1\n         34: iload_2\n         35: iconst_4\n         36: iadd\n         37: iload         4\n-        39: invokestatic  #29                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-        42: putfield      #30                 // Field ivData:[B\n+        39: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+        42: putfield      #104                // Field ivData:[B\n         45: aload_0\n         46: bipush        16\n         48: iload         4\n         50: iadd\n         51: iload_3\n-        52: invokevirtual #18                 // Method assertMinimalLength:(II)V\n+        52: invokevirtual #55                 // Method assertMinimalLength:(II)V\n         55: aload_0\n         56: aload_1\n         57: iload_2\n         58: iload         4\n         60: iadd\n         61: bipush        6\n         63: iadd\n-        64: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        67: putfield      #20                 // Field format:I\n+        64: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        67: putfield      #63                 // Field format:I\n         70: aload_0\n         71: aload_1\n         72: iload_2\n         73: iload         4\n         75: iadd\n         76: bipush        8\n         78: iadd\n-        79: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        82: invokestatic  #21                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-        85: putfield      #15                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+        79: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        82: invokestatic  #67                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+        85: putfield      #41                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n         88: aload_0\n         89: aload_1\n         90: iload_2\n         91: iload         4\n         93: iadd\n         94: bipush        10\n         96: iadd\n-        97: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       100: putfield      #22                 // Field bitlen:I\n+        97: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       100: putfield      #73                 // Field bitlen:I\n        103: aload_0\n        104: aload_1\n        105: iload_2\n        106: iload         4\n        108: iadd\n        109: bipush        12\n        111: iadd\n-       112: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       115: putfield      #23                 // Field flags:I\n+       112: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       115: putfield      #76                 // Field flags:I\n        118: aload_1\n        119: iload_2\n        120: iload         4\n        122: iadd\n        123: bipush        14\n        125: iadd\n-       126: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       126: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        129: istore        5\n        131: aload_0\n-       132: ldc           #31                 // String erdSize\n+       132: ldc           #108                // String erdSize\n        134: iload         5\n        136: iload         4\n        138: bipush        16\n        140: iadd\n        141: iload_3\n-       142: invokespecial #28                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+       142: invokespecial #94                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n        145: aload_0\n        146: iload_2\n        147: iload         4\n        149: iadd\n        150: bipush        16\n        152: iadd\n        153: iload         5\n-       155: invokevirtual #18                 // Method assertMinimalLength:(II)V\n+       155: invokevirtual #55                 // Method assertMinimalLength:(II)V\n        158: aload_0\n        159: aload_1\n        160: iload_2\n        161: iload         4\n        163: iadd\n        164: bipush        16\n        166: iadd\n        167: iload         5\n-       169: invokestatic  #29                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       172: putfield      #32                 // Field erdData:[B\n+       169: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+       172: putfield      #110                // Field erdData:[B\n        175: aload_0\n        176: bipush        20\n        178: iload         4\n        180: iadd\n        181: iload         5\n        183: iadd\n        184: iload_3\n-       185: invokevirtual #18                 // Method assertMinimalLength:(II)V\n+       185: invokevirtual #55                 // Method assertMinimalLength:(II)V\n        188: aload_0\n        189: aload_1\n        190: iload_2\n        191: iload         4\n        193: iadd\n        194: bipush        16\n        196: iadd\n        197: iload         5\n        199: iadd\n-       200: invokestatic  #24                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       203: putfield      #17                 // Field rcount:J\n+       200: invokestatic  #79                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       203: putfield      #51                 // Field rcount:J\n        206: aload_0\n-       207: getfield      #17                 // Field rcount:J\n+       207: getfield      #51                 // Field rcount:J\n        210: lconst_0\n        211: lcmp\n        212: ifne          389\n        215: aload_0\n        216: iload         4\n        218: bipush        20\n        220: iadd\n        221: iload         5\n        223: iadd\n        224: iconst_2\n        225: iadd\n        226: iload_3\n-       227: invokevirtual #18                 // Method assertMinimalLength:(II)V\n+       227: invokevirtual #55                 // Method assertMinimalLength:(II)V\n        230: aload_1\n        231: iload_2\n        232: iload         4\n        234: iadd\n        235: bipush        20\n        237: iadd\n        238: iload         5\n        240: iadd\n-       241: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       241: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        244: istore        6\n        246: aload_0\n-       247: ldc           #33                 // String vSize\n+       247: ldc           #113                // String vSize\n        249: iload         6\n        251: iload         4\n        253: bipush        22\n        255: iadd\n        256: iload         5\n        258: iadd\n        259: iload_3\n-       260: invokespecial #28                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+       260: invokespecial #94                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n        263: iload         6\n        265: iconst_4\n        266: if_icmpge     302\n-       269: new           #4                  // class java/util/zip/ZipException\n+       269: new           #12                 // class java/util/zip/ZipException\n        272: dup\n-       273: new           #5                  // class java/lang/StringBuilder\n+       273: new           #14                 // class java/lang/StringBuilder\n        276: dup\n-       277: invokespecial #6                  // Method java/lang/StringBuilder.\"<init>\":()V\n-       280: ldc           #34                 // String Invalid X0017_StrongEncryptionHeader: vSize\n-       282: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       277: invokespecial #16                 // Method java/lang/StringBuilder.\"<init>\":()V\n+       280: ldc           #115                // String Invalid X0017_StrongEncryptionHeader: vSize\n+       282: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        285: iload         6\n-       287: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       290: ldc           #35                 // String  is too small to hold CRC\n-       292: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       295: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       298: invokespecial #14                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       287: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       290: ldc           #117                // String  is too small to hold CRC\n+       292: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       295: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       298: invokespecial #38                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n        301: athrow\n        302: aload_0\n        303: iload_2\n        304: iload         4\n        306: iadd\n        307: bipush        22\n        309: iadd\n        310: iload         5\n        312: iadd\n        313: iload         6\n        315: iconst_4\n        316: isub\n-       317: invokevirtual #18                 // Method assertMinimalLength:(II)V\n+       317: invokevirtual #55                 // Method assertMinimalLength:(II)V\n        320: aload_0\n        321: aload_1\n        322: iload_2\n        323: iload         4\n        325: iadd\n        326: bipush        22\n        328: iadd\n        329: iload         5\n        331: iadd\n        332: iload         6\n        334: iconst_4\n        335: isub\n-       336: invokestatic  #29                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       339: putfield      #36                 // Field vData:[B\n+       336: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+       339: putfield      #119                // Field vData:[B\n        342: aload_0\n        343: iload_2\n        344: iload         4\n        346: iadd\n        347: bipush        22\n        349: iadd\n        350: iload         5\n        352: iadd\n        353: iload         6\n        355: iadd\n        356: iconst_4\n        357: isub\n        358: iconst_4\n-       359: invokevirtual #18                 // Method assertMinimalLength:(II)V\n+       359: invokevirtual #55                 // Method assertMinimalLength:(II)V\n        362: aload_0\n        363: aload_1\n        364: iload_2\n        365: iload         4\n        367: iadd\n        368: bipush        22\n        370: iadd\n        371: iload         5\n        373: iadd\n        374: iload         6\n        376: iadd\n        377: iconst_4\n        378: isub\n        379: iconst_4\n-       380: invokestatic  #29                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       383: putfield      #37                 // Field vCRC32:[B\n+       380: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+       383: putfield      #122                // Field vCRC32:[B\n        386: goto          726\n        389: aload_0\n        390: iload         4\n        392: bipush        20\n        394: iadd\n        395: iload         5\n        397: iadd\n        398: bipush        6\n        400: iadd\n        401: iload_3\n-       402: invokevirtual #18                 // Method assertMinimalLength:(II)V\n+       402: invokevirtual #55                 // Method assertMinimalLength:(II)V\n        405: aload_0\n        406: aload_1\n        407: iload_2\n        408: iload         4\n        410: iadd\n        411: bipush        20\n        413: iadd\n        414: iload         5\n        416: iadd\n-       417: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       420: invokestatic  #25                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-       423: putfield      #16                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+       417: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       420: invokestatic  #84                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+       423: putfield      #47                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n        426: aload_0\n        427: aload_1\n        428: iload_2\n        429: iload         4\n        431: iadd\n        432: bipush        22\n        434: iadd\n        435: iload         5\n        437: iadd\n-       438: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       441: putfield      #26                 // Field hashSize:I\n+       438: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       441: putfield      #89                 // Field hashSize:I\n        444: aload_1\n        445: iload_2\n        446: iload         4\n        448: iadd\n        449: bipush        24\n        451: iadd\n        452: iload         5\n        454: iadd\n-       455: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       455: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        458: istore        6\n        460: iload         6\n        462: aload_0\n-       463: getfield      #26                 // Field hashSize:I\n+       463: getfield      #89                 // Field hashSize:I\n        466: if_icmpge     509\n-       469: new           #4                  // class java/util/zip/ZipException\n+       469: new           #12                 // class java/util/zip/ZipException\n        472: dup\n-       473: new           #5                  // class java/lang/StringBuilder\n+       473: new           #14                 // class java/lang/StringBuilder\n        476: dup\n-       477: invokespecial #6                  // Method java/lang/StringBuilder.\"<init>\":()V\n-       480: ldc           #38                 // String Invalid X0017_StrongEncryptionHeader: resize\n-       482: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       477: invokespecial #16                 // Method java/lang/StringBuilder.\"<init>\":()V\n+       480: ldc           #125                // String Invalid X0017_StrongEncryptionHeader: resize\n+       482: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        485: iload         6\n-       487: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       490: ldc           #39                 // String  is too small to hold hashSize\n-       492: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       487: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       490: ldc           #127                // String  is too small to hold hashSize\n+       492: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        495: aload_0\n-       496: getfield      #26                 // Field hashSize:I\n-       499: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       502: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       505: invokespecial #14                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       496: getfield      #89                 // Field hashSize:I\n+       499: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       502: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       505: invokespecial #38                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n        508: athrow\n        509: aload_0\n-       510: ldc           #40                 // String resize\n+       510: ldc           #129                // String resize\n        512: iload         6\n        514: iload         4\n        516: bipush        24\n        518: iadd\n        519: iload         5\n        521: iadd\n        522: iload_3\n-       523: invokespecial #28                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+       523: invokespecial #94                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n        526: aload_0\n        527: aload_1\n        528: iload_2\n        529: iload         4\n        531: iadd\n        532: bipush        24\n        534: iadd\n        535: iload         5\n        537: iadd\n        538: aload_0\n-       539: getfield      #26                 // Field hashSize:I\n-       542: invokestatic  #29                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       545: putfield      #41                 // Field recipientKeyHash:[B\n+       539: getfield      #89                 // Field hashSize:I\n+       542: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+       545: putfield      #131                // Field recipientKeyHash:[B\n        548: aload_0\n        549: aload_1\n        550: iload_2\n        551: iload         4\n        553: iadd\n        554: bipush        24\n        556: iadd\n        557: iload         5\n        559: iadd\n        560: aload_0\n-       561: getfield      #26                 // Field hashSize:I\n+       561: getfield      #89                 // Field hashSize:I\n        564: iadd\n        565: iload         6\n        567: aload_0\n-       568: getfield      #26                 // Field hashSize:I\n+       568: getfield      #89                 // Field hashSize:I\n        571: isub\n-       572: invokestatic  #29                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       575: putfield      #42                 // Field keyBlob:[B\n+       572: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+       575: putfield      #134                // Field keyBlob:[B\n        578: aload_0\n        579: iload         4\n        581: bipush        26\n        583: iadd\n        584: iload         5\n        586: iadd\n        587: iload         6\n        589: iadd\n        590: iconst_2\n        591: iadd\n        592: iload_3\n-       593: invokevirtual #18                 // Method assertMinimalLength:(II)V\n+       593: invokevirtual #55                 // Method assertMinimalLength:(II)V\n        596: aload_1\n        597: iload_2\n        598: iload         4\n        600: iadd\n        601: bipush        26\n        603: iadd\n        604: iload         5\n        606: iadd\n        607: iload         6\n        609: iadd\n-       610: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       610: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        613: istore        7\n        615: iload         7\n        617: iconst_4\n        618: if_icmpge     654\n-       621: new           #4                  // class java/util/zip/ZipException\n+       621: new           #12                 // class java/util/zip/ZipException\n        624: dup\n-       625: new           #5                  // class java/lang/StringBuilder\n+       625: new           #14                 // class java/lang/StringBuilder\n        628: dup\n-       629: invokespecial #6                  // Method java/lang/StringBuilder.\"<init>\":()V\n-       632: ldc           #34                 // String Invalid X0017_StrongEncryptionHeader: vSize\n-       634: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       629: invokespecial #16                 // Method java/lang/StringBuilder.\"<init>\":()V\n+       632: ldc           #115                // String Invalid X0017_StrongEncryptionHeader: vSize\n+       634: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        637: iload         7\n-       639: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       642: ldc           #35                 // String  is too small to hold CRC\n-       644: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       647: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       650: invokespecial #14                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       639: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       642: ldc           #117                // String  is too small to hold CRC\n+       644: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       647: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       650: invokespecial #38                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n        653: athrow\n        654: aload_0\n-       655: ldc           #33                 // String vSize\n+       655: ldc           #113                // String vSize\n        657: iload         7\n        659: iload         4\n        661: bipush        22\n        663: iadd\n        664: iload         5\n        666: iadd\n        667: iload         6\n        669: iadd\n        670: iload_3\n-       671: invokespecial #28                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+       671: invokespecial #94                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n        674: aload_0\n        675: aload_1\n        676: iload_2\n        677: iload         4\n        679: iadd\n        680: bipush        22\n        682: iadd\n        683: iload         5\n        685: iadd\n        686: iload         6\n        688: iadd\n        689: iload         7\n        691: iconst_4\n        692: isub\n-       693: invokestatic  #29                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       696: putfield      #36                 // Field vData:[B\n+       693: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+       696: putfield      #119                // Field vData:[B\n        699: aload_0\n        700: aload_1\n        701: iload_2\n        702: iload         4\n        704: iadd\n        705: bipush        22\n        707: iadd\n@@ -828,16 +828,16 @@\n        711: iload         6\n        713: iadd\n        714: iload         7\n        716: iadd\n        717: iconst_4\n        718: isub\n        719: iconst_4\n-       720: invokestatic  #29                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       723: putfield      #37                 // Field vCRC32:[B\n+       720: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+       723: putfield      #122                // Field vCRC32:[B\n        726: return\n       LineNumberTable:\n         line 345: 0\n         line 346: 6\n         line 347: 13\n         line 348: 23\n         line 350: 32\n@@ -902,20 +902,20 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: invokespecial #43                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n+         4: invokespecial #137                // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n          7: aload_0\n          8: aload_1\n          9: iload_2\n         10: iload_3\n-        11: invokevirtual #44                 // Method parseCentralDirectoryFormat:([BII)V\n+        11: invokevirtual #141                // Method parseCentralDirectoryFormat:([BII)V\n         14: return\n       LineNumberTable:\n         line 413: 0\n         line 414: 7\n         line 415: 14\n     Exceptions:\n       throws java.util.zip.ZipException\n@@ -925,25 +925,25 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: invokespecial #45                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromLocalFileData:([BII)V\n+         4: invokespecial #144                // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromLocalFileData:([BII)V\n          7: aload_0\n          8: aload_1\n          9: iload_2\n         10: iload_3\n-        11: invokevirtual #46                 // Method parseFileFormat:([BII)V\n+        11: invokevirtual #147                // Method parseFileFormat:([BII)V\n         14: return\n       LineNumberTable:\n         line 420: 0\n         line 421: 7\n         line 422: 14\n     Exceptions:\n       throws java.util.zip.ZipException\n }\n SourceFile: \"X0017_StrongEncryptionHeader.java\"\n InnerClasses:\n-  public static final #53= #52 of #48;    // EncryptionAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-  public static final #62= #61 of #48;    // HashAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  public static final #163= #68 of #8;    // EncryptionAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  public static final #164= #85 of #8;    // HashAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n"}]}
