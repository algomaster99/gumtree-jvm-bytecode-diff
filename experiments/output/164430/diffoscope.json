{"diffoscope-json-version": 1, "source1": "first/TapeInputStream.class", "source2": "second/TapeInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,241 +1,237 @@\n-  SHA-256 checksum 9c5c8746f474caa3cff8b4a4bcd6b19e624b8aaa4cb759a889c2b119ec7587ea\n+  SHA-256 checksum f00d27ce11a459be672ef3fa751400cd03143d16af1d2534e5902a0053620fdb\n   Compiled from \"TapeInputStream.java\"\n class org.apache.commons.compress.archivers.dump.TapeInputStream extends java.io.FilterInputStream\n   minor version: 0\n-  major version: 52\n+  major version: 53\n   flags: (0x0020) ACC_SUPER\n-  this_class: #17                         // org/apache/commons/compress/archivers/dump/TapeInputStream\n-  super_class: #62                        // java/io/FilterInputStream\n-  interfaces: 0, fields: 7, methods: 13, attributes: 2\n+  this_class: #11                         // org/apache/commons/compress/archivers/dump/TapeInputStream\n+  super_class: #56                        // java/io/FilterInputStream\n+  interfaces: 0, fields: 7, methods: 13, attributes: 3\n Constant pool:\n-    #1 = Class              #140          // org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n-    #2 = Methodref          #62.#141      // java/io/FilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-    #3 = Fieldref           #17.#142      // org/apache/commons/compress/archivers/dump/TapeInputStream.blockBuffer:[B\n-    #4 = Fieldref           #17.#143      // org/apache/commons/compress/archivers/dump/TapeInputStream.currBlkIdx:I\n-    #5 = Fieldref           #17.#144      // org/apache/commons/compress/archivers/dump/TapeInputStream.blockSize:I\n-    #6 = Fieldref           #17.#145      // org/apache/commons/compress/archivers/dump/TapeInputStream.readOffset:I\n-    #7 = Fieldref           #17.#146      // org/apache/commons/compress/archivers/dump/TapeInputStream.isCompressed:Z\n-    #8 = Class              #147          // java/io/IOException\n-    #9 = Class              #148          // java/lang/StringBuilder\n-   #10 = Methodref          #9.#149       // java/lang/StringBuilder.\"<init>\":()V\n-   #11 = String             #150          // Block with\n-   #12 = Methodref          #9.#151       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #13 = Methodref          #9.#152       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #14 = String             #153          //  records found, must be at least 1\n-   #15 = Methodref          #9.#154       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #16 = Methodref          #8.#155       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #17 = Class              #156          // org/apache/commons/compress/archivers/dump/TapeInputStream\n-   #18 = Methodref          #157.#158     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #19 = Methodref          #17.#159      // org/apache/commons/compress/archivers/dump/TapeInputStream.readFully:([BII)V\n-   #20 = Fieldref           #17.#160      // org/apache/commons/compress/archivers/dump/TapeInputStream.in:Ljava/io/InputStream;\n-   #21 = Methodref          #161.#162     // java/io/InputStream.available:()I\n-   #22 = Class              #163          // java/lang/IllegalArgumentException\n-   #23 = String             #164          // All reads must be multiple of record size (1024 bytes.\n-   #24 = Methodref          #22.#155      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #25 = Methodref          #17.#165      // org/apache/commons/compress/archivers/dump/TapeInputStream.readBlock:(Z)V\n-   #26 = Class              #166          // org/apache/commons/compress/archivers/dump/ShortFileException\n-   #27 = Long               1024l\n-   #29 = Long               -1l\n-   #31 = Fieldref           #157.#160     // java/lang/System.in:Ljava/io/InputStream;\n-   #32 = Methodref          #161.#167     // java/io/InputStream.close:()V\n-   #33 = Methodref          #17.#168      // org/apache/commons/compress/archivers/dump/TapeInputStream.read:([BII)I\n-   #34 = Methodref          #26.#149      // org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n-   #35 = String             #169          // Input buffer is closed\n-   #36 = Fieldref           #17.#170      // org/apache/commons/compress/archivers/dump/TapeInputStream.bytesRead:J\n-   #37 = Long               4l\n-   #39 = Methodref          #171.#172     // org/apache/commons/compress/archivers/dump/DumpArchiveUtil.convert32:([BI)I\n-   #40 = Integer            268435455\n-   #41 = Methodref          #17.#173      // org/apache/commons/compress/archivers/dump/TapeInputStream.readRange:(I)[B\n-   #42 = Methodref          #174.#175     // java/util/Arrays.fill:([BB)V\n-   #43 = Fieldref           #63.#176      // org/apache/commons/compress/archivers/dump/TapeInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE:[I\n-   #44 = Methodref          #177.#178     // org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE.find:(I)Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE;\n-   #45 = Methodref          #177.#179     // org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE.ordinal:()I\n-   #46 = Class              #180          // java/util/zip/Inflater\n-   #47 = Methodref          #46.#149      // java/util/zip/Inflater.\"<init>\":()V\n-   #48 = Methodref          #46.#181      // java/util/zip/Inflater.setInput:([BII)V\n-   #49 = Methodref          #46.#182      // java/util/zip/Inflater.inflate:([B)I\n-   #50 = Methodref          #46.#183      // java/util/zip/Inflater.end:()V\n-   #51 = Class              #184          // java/util/zip/DataFormatException\n-   #52 = Class              #185          // org/apache/commons/compress/archivers/dump/DumpArchiveException\n-   #53 = String             #186          // Bad data\n-   #54 = Methodref          #52.#187      // org/apache/commons/compress/archivers/dump/DumpArchiveException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #55 = Class              #188          // org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n-   #56 = String             #189          // BZLIB2\n-   #57 = Methodref          #55.#155      // org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":(Ljava/lang/String;)V\n-   #58 = String             #190          // LZO\n-   #59 = Methodref          #55.#149      // org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":()V\n-   #60 = Methodref          #191.#192     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n-   #61 = Methodref          #191.#193     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n-   #62 = Class              #194          // java/io/FilterInputStream\n-   #63 = Class              #195          // org/apache/commons/compress/archivers/dump/TapeInputStream$1\n-   #64 = Utf8               InnerClasses\n-   #65 = Utf8               blockBuffer\n-   #66 = Utf8               [B\n-   #67 = Utf8               currBlkIdx\n-   #68 = Utf8               I\n-   #69 = Utf8               blockSize\n-   #70 = Utf8               RECORD_SIZE\n-   #71 = Utf8               ConstantValue\n-   #72 = Integer            1024\n-   #73 = Utf8               readOffset\n-   #74 = Utf8               isCompressed\n-   #75 = Utf8               Z\n-   #76 = Utf8               bytesRead\n-   #77 = Utf8               J\n-   #78 = Utf8               <init>\n-   #79 = Utf8               (Ljava/io/InputStream;)V\n-   #80 = Utf8               Code\n-   #81 = Utf8               LineNumberTable\n-   #82 = Utf8               LocalVariableTable\n-   #83 = Utf8               this\n-   #84 = Utf8               Lorg/apache/commons/compress/archivers/dump/TapeInputStream;\n-   #85 = Utf8               in\n-   #86 = Utf8               Ljava/io/InputStream;\n-   #87 = Utf8               resetBlockSize\n-   #88 = Utf8               (IZ)V\n-   #89 = Utf8               recsPerBlock\n-   #90 = Utf8               oldBuffer\n-   #91 = Utf8               StackMapTable\n-   #92 = Utf8               Exceptions\n-   #93 = Utf8               available\n-   #94 = Utf8               ()I\n-   #95 = Utf8               read\n-   #96 = Utf8               ([BII)I\n-   #97 = Utf8               sfe\n-   #98 = Utf8               Lorg/apache/commons/compress/archivers/dump/ShortFileException;\n-   #99 = Utf8               n\n-  #100 = Utf8               b\n-  #101 = Utf8               off\n-  #102 = Utf8               len\n-  #103 = Utf8               bytes\n-  #104 = Class              #166          // org/apache/commons/compress/archivers/dump/ShortFileException\n-  #105 = Utf8               skip\n-  #106 = Utf8               (J)J\n-  #107 = Class              #156          // org/apache/commons/compress/archivers/dump/TapeInputStream\n-  #108 = Utf8               close\n-  #109 = Utf8               ()V\n-  #110 = Utf8               peek\n-  #111 = Utf8               ()[B\n-  #112 = Utf8               readRecord\n-  #113 = Utf8               result\n-  #114 = Class              #66           // \"[B\"\n-  #115 = Utf8               readBlock\n-  #116 = Utf8               (Z)V\n-  #117 = Utf8               e\n-  #118 = Utf8               Ljava/util/zip/DataFormatException;\n-  #119 = Utf8               inflator\n-  #120 = Utf8               Ljava/util/zip/Inflater;\n-  #121 = Utf8               flags\n-  #122 = Utf8               length\n-  #123 = Utf8               compBuffer\n-  #124 = Utf8               h\n-  #125 = Utf8               compressed\n-  #126 = Utf8               decompress\n-  #127 = Class              #180          // java/util/zip/Inflater\n-  #128 = Class              #184          // java/util/zip/DataFormatException\n-  #129 = Class              #196          // java/lang/Throwable\n-  #130 = Utf8               readFully\n-  #131 = Utf8               ([BII)V\n-  #132 = Utf8               count\n-  #133 = Utf8               readRange\n-  #134 = Utf8               (I)[B\n-  #135 = Utf8               ret\n-  #136 = Utf8               getBytesRead\n-  #137 = Utf8               ()J\n-  #138 = Utf8               SourceFile\n-  #139 = Utf8               TapeInputStream.java\n-  #140 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n-  #141 = NameAndType        #78:#79       // \"<init>\":(Ljava/io/InputStream;)V\n-  #142 = NameAndType        #65:#66       // blockBuffer:[B\n-  #143 = NameAndType        #67:#68       // currBlkIdx:I\n-  #144 = NameAndType        #69:#68       // blockSize:I\n-  #145 = NameAndType        #73:#68       // readOffset:I\n-  #146 = NameAndType        #74:#75       // isCompressed:Z\n-  #147 = Utf8               java/io/IOException\n-  #148 = Utf8               java/lang/StringBuilder\n-  #149 = NameAndType        #78:#109      // \"<init>\":()V\n-  #150 = Utf8               Block with\n-  #151 = NameAndType        #197:#198     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #152 = NameAndType        #197:#199     // append:(I)Ljava/lang/StringBuilder;\n-  #153 = Utf8                records found, must be at least 1\n-  #154 = NameAndType        #200:#201     // toString:()Ljava/lang/String;\n-  #155 = NameAndType        #78:#202      // \"<init>\":(Ljava/lang/String;)V\n-  #156 = Utf8               org/apache/commons/compress/archivers/dump/TapeInputStream\n-  #157 = Class              #203          // java/lang/System\n-  #158 = NameAndType        #204:#205     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #159 = NameAndType        #130:#131     // readFully:([BII)V\n-  #160 = NameAndType        #85:#86       // in:Ljava/io/InputStream;\n-  #161 = Class              #206          // java/io/InputStream\n-  #162 = NameAndType        #93:#94       // available:()I\n-  #163 = Utf8               java/lang/IllegalArgumentException\n-  #164 = Utf8               All reads must be multiple of record size (1024 bytes.\n-  #165 = NameAndType        #115:#116     // readBlock:(Z)V\n-  #166 = Utf8               org/apache/commons/compress/archivers/dump/ShortFileException\n-  #167 = NameAndType        #108:#109     // close:()V\n-  #168 = NameAndType        #95:#96       // read:([BII)I\n-  #169 = Utf8               Input buffer is closed\n-  #170 = NameAndType        #76:#77       // bytesRead:J\n-  #171 = Class              #207          // org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n-  #172 = NameAndType        #208:#209     // convert32:([BI)I\n-  #173 = NameAndType        #133:#134     // readRange:(I)[B\n-  #174 = Class              #210          // java/util/Arrays\n-  #175 = NameAndType        #211:#212     // fill:([BB)V\n-  #176 = NameAndType        #213:#214     // $SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE:[I\n-  #177 = Class              #215          // org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE\n-  #178 = NameAndType        #217:#218     // find:(I)Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE;\n-  #179 = NameAndType        #219:#94      // ordinal:()I\n-  #180 = Utf8               java/util/zip/Inflater\n-  #181 = NameAndType        #220:#131     // setInput:([BII)V\n-  #182 = NameAndType        #221:#222     // inflate:([B)I\n-  #183 = NameAndType        #223:#109     // end:()V\n-  #184 = Utf8               java/util/zip/DataFormatException\n-  #185 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveException\n-  #186 = Utf8               Bad data\n-  #187 = NameAndType        #78:#224      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #188 = Utf8               org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n-  #189 = Utf8               BZLIB2\n-  #190 = Utf8               LZO\n-  #191 = Class              #225          // org/apache/commons/compress/utils/IOUtils\n-  #192 = NameAndType        #130:#226     // readFully:(Ljava/io/InputStream;[BII)I\n-  #193 = NameAndType        #133:#227     // readRange:(Ljava/io/InputStream;I)[B\n-  #194 = Utf8               java/io/FilterInputStream\n-  #195 = Utf8               org/apache/commons/compress/archivers/dump/TapeInputStream$1\n-  #196 = Utf8               java/lang/Throwable\n-  #197 = Utf8               append\n-  #198 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #199 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #200 = Utf8               toString\n-  #201 = Utf8               ()Ljava/lang/String;\n-  #202 = Utf8               (Ljava/lang/String;)V\n-  #203 = Utf8               java/lang/System\n-  #204 = Utf8               arraycopy\n-  #205 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #206 = Utf8               java/io/InputStream\n-  #207 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n-  #208 = Utf8               convert32\n-  #209 = Utf8               ([BI)I\n-  #210 = Utf8               java/util/Arrays\n-  #211 = Utf8               fill\n-  #212 = Utf8               ([BB)V\n-  #213 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE\n-  #214 = Utf8               [I\n-  #215 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE\n-  #216 = Utf8               COMPRESSION_TYPE\n-  #217 = Utf8               find\n-  #218 = Utf8               (I)Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE;\n-  #219 = Utf8               ordinal\n-  #220 = Utf8               setInput\n-  #221 = Utf8               inflate\n-  #222 = Utf8               ([B)I\n-  #223 = Utf8               end\n-  #224 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #225 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #226 = Utf8               (Ljava/io/InputStream;[BII)I\n-  #227 = Utf8               (Ljava/io/InputStream;I)[B\n+    #1 = Class              #130          // org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n+    #2 = Methodref          #56.#131      // java/io/FilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+    #3 = Fieldref           #11.#132      // org/apache/commons/compress/archivers/dump/TapeInputStream.blockBuffer:[B\n+    #4 = Fieldref           #11.#133      // org/apache/commons/compress/archivers/dump/TapeInputStream.currBlkIdx:I\n+    #5 = Fieldref           #11.#134      // org/apache/commons/compress/archivers/dump/TapeInputStream.blockSize:I\n+    #6 = Fieldref           #11.#135      // org/apache/commons/compress/archivers/dump/TapeInputStream.readOffset:I\n+    #7 = Fieldref           #11.#136      // org/apache/commons/compress/archivers/dump/TapeInputStream.isCompressed:Z\n+    #8 = Class              #137          // java/io/IOException\n+    #9 = InvokeDynamic      #0:#141       // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+   #10 = Methodref          #8.#142       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #11 = Class              #143          // org/apache/commons/compress/archivers/dump/TapeInputStream\n+   #12 = Methodref          #144.#145     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #13 = Methodref          #11.#146      // org/apache/commons/compress/archivers/dump/TapeInputStream.readFully:([BII)V\n+   #14 = Fieldref           #11.#147      // org/apache/commons/compress/archivers/dump/TapeInputStream.in:Ljava/io/InputStream;\n+   #15 = Methodref          #148.#149     // java/io/InputStream.available:()I\n+   #16 = Class              #150          // java/lang/IllegalArgumentException\n+   #17 = String             #151          // All reads must be multiple of record size (1024 bytes.\n+   #18 = Methodref          #16.#142      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #19 = Methodref          #11.#152      // org/apache/commons/compress/archivers/dump/TapeInputStream.readBlock:(Z)V\n+   #20 = Class              #153          // org/apache/commons/compress/archivers/dump/ShortFileException\n+   #21 = Long               1024l\n+   #23 = Long               -1l\n+   #25 = Fieldref           #144.#147     // java/lang/System.in:Ljava/io/InputStream;\n+   #26 = Methodref          #148.#154     // java/io/InputStream.close:()V\n+   #27 = Methodref          #11.#155      // org/apache/commons/compress/archivers/dump/TapeInputStream.read:([BII)I\n+   #28 = Methodref          #20.#156      // org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n+   #29 = String             #157          // Input buffer is closed\n+   #30 = Fieldref           #11.#158      // org/apache/commons/compress/archivers/dump/TapeInputStream.bytesRead:J\n+   #31 = Long               4l\n+   #33 = Methodref          #159.#160     // org/apache/commons/compress/archivers/dump/DumpArchiveUtil.convert32:([BI)I\n+   #34 = Integer            268435455\n+   #35 = Methodref          #11.#161      // org/apache/commons/compress/archivers/dump/TapeInputStream.readRange:(I)[B\n+   #36 = Methodref          #162.#163     // java/util/Arrays.fill:([BB)V\n+   #37 = Fieldref           #57.#164      // org/apache/commons/compress/archivers/dump/TapeInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE:[I\n+   #38 = Methodref          #165.#166     // org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE.find:(I)Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE;\n+   #39 = Methodref          #165.#167     // org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE.ordinal:()I\n+   #40 = Class              #168          // java/util/zip/Inflater\n+   #41 = Methodref          #40.#156      // java/util/zip/Inflater.\"<init>\":()V\n+   #42 = Methodref          #40.#169      // java/util/zip/Inflater.setInput:([BII)V\n+   #43 = Methodref          #40.#170      // java/util/zip/Inflater.inflate:([B)I\n+   #44 = Methodref          #40.#171      // java/util/zip/Inflater.end:()V\n+   #45 = Class              #172          // java/util/zip/DataFormatException\n+   #46 = Class              #173          // org/apache/commons/compress/archivers/dump/DumpArchiveException\n+   #47 = String             #174          // Bad data\n+   #48 = Methodref          #46.#175      // org/apache/commons/compress/archivers/dump/DumpArchiveException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #49 = Class              #176          // org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n+   #50 = String             #177          // BZLIB2\n+   #51 = Methodref          #49.#142      // org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":(Ljava/lang/String;)V\n+   #52 = String             #178          // LZO\n+   #53 = Methodref          #49.#156      // org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":()V\n+   #54 = Methodref          #179.#180     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n+   #55 = Methodref          #179.#181     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+   #56 = Class              #182          // java/io/FilterInputStream\n+   #57 = Class              #183          // org/apache/commons/compress/archivers/dump/TapeInputStream$1\n+   #58 = Utf8               InnerClasses\n+   #59 = Utf8               blockBuffer\n+   #60 = Utf8               [B\n+   #61 = Utf8               currBlkIdx\n+   #62 = Utf8               I\n+   #63 = Utf8               blockSize\n+   #64 = Utf8               RECORD_SIZE\n+   #65 = Utf8               ConstantValue\n+   #66 = Integer            1024\n+   #67 = Utf8               readOffset\n+   #68 = Utf8               isCompressed\n+   #69 = Utf8               Z\n+   #70 = Utf8               bytesRead\n+   #71 = Utf8               J\n+   #72 = Utf8               <init>\n+   #73 = Utf8               (Ljava/io/InputStream;)V\n+   #74 = Utf8               Code\n+   #75 = Utf8               LineNumberTable\n+   #76 = Utf8               LocalVariableTable\n+   #77 = Utf8               this\n+   #78 = Utf8               Lorg/apache/commons/compress/archivers/dump/TapeInputStream;\n+   #79 = Utf8               in\n+   #80 = Utf8               Ljava/io/InputStream;\n+   #81 = Utf8               resetBlockSize\n+   #82 = Utf8               (IZ)V\n+   #83 = Utf8               recsPerBlock\n+   #84 = Utf8               oldBuffer\n+   #85 = Utf8               StackMapTable\n+   #86 = Utf8               Exceptions\n+   #87 = Utf8               available\n+   #88 = Utf8               ()I\n+   #89 = Utf8               read\n+   #90 = Utf8               ([BII)I\n+   #91 = Utf8               sfe\n+   #92 = Utf8               Lorg/apache/commons/compress/archivers/dump/ShortFileException;\n+   #93 = Utf8               n\n+   #94 = Utf8               b\n+   #95 = Utf8               off\n+   #96 = Utf8               len\n+   #97 = Utf8               bytes\n+   #98 = Utf8               skip\n+   #99 = Utf8               (J)J\n+  #100 = Utf8               close\n+  #101 = Utf8               ()V\n+  #102 = Utf8               peek\n+  #103 = Utf8               ()[B\n+  #104 = Utf8               readRecord\n+  #105 = Utf8               result\n+  #106 = Class              #60           // \"[B\"\n+  #107 = Utf8               readBlock\n+  #108 = Utf8               (Z)V\n+  #109 = Utf8               e\n+  #110 = Utf8               Ljava/util/zip/DataFormatException;\n+  #111 = Utf8               inflator\n+  #112 = Utf8               Ljava/util/zip/Inflater;\n+  #113 = Utf8               flags\n+  #114 = Utf8               length\n+  #115 = Utf8               compBuffer\n+  #116 = Utf8               h\n+  #117 = Utf8               compressed\n+  #118 = Utf8               decompress\n+  #119 = Class              #184          // java/lang/Throwable\n+  #120 = Utf8               readFully\n+  #121 = Utf8               ([BII)V\n+  #122 = Utf8               count\n+  #123 = Utf8               readRange\n+  #124 = Utf8               (I)[B\n+  #125 = Utf8               ret\n+  #126 = Utf8               getBytesRead\n+  #127 = Utf8               ()J\n+  #128 = Utf8               SourceFile\n+  #129 = Utf8               TapeInputStream.java\n+  #130 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n+  #131 = NameAndType        #72:#73       // \"<init>\":(Ljava/io/InputStream;)V\n+  #132 = NameAndType        #59:#60       // blockBuffer:[B\n+  #133 = NameAndType        #61:#62       // currBlkIdx:I\n+  #134 = NameAndType        #63:#62       // blockSize:I\n+  #135 = NameAndType        #67:#62       // readOffset:I\n+  #136 = NameAndType        #68:#69       // isCompressed:Z\n+  #137 = Utf8               java/io/IOException\n+  #138 = Utf8               BootstrapMethods\n+  #139 = MethodHandle       6:#185        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #140 = String             #186          // Block with \\u0001 records found, must be at least 1\n+  #141 = NameAndType        #187:#188     // makeConcatWithConstants:(I)Ljava/lang/String;\n+  #142 = NameAndType        #72:#189      // \"<init>\":(Ljava/lang/String;)V\n+  #143 = Utf8               org/apache/commons/compress/archivers/dump/TapeInputStream\n+  #144 = Class              #190          // java/lang/System\n+  #145 = NameAndType        #191:#192     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #146 = NameAndType        #120:#121     // readFully:([BII)V\n+  #147 = NameAndType        #79:#80       // in:Ljava/io/InputStream;\n+  #148 = Class              #193          // java/io/InputStream\n+  #149 = NameAndType        #87:#88       // available:()I\n+  #150 = Utf8               java/lang/IllegalArgumentException\n+  #151 = Utf8               All reads must be multiple of record size (1024 bytes.\n+  #152 = NameAndType        #107:#108     // readBlock:(Z)V\n+  #153 = Utf8               org/apache/commons/compress/archivers/dump/ShortFileException\n+  #154 = NameAndType        #100:#101     // close:()V\n+  #155 = NameAndType        #89:#90       // read:([BII)I\n+  #156 = NameAndType        #72:#101      // \"<init>\":()V\n+  #157 = Utf8               Input buffer is closed\n+  #158 = NameAndType        #70:#71       // bytesRead:J\n+  #159 = Class              #194          // org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n+  #160 = NameAndType        #195:#196     // convert32:([BI)I\n+  #161 = NameAndType        #123:#124     // readRange:(I)[B\n+  #162 = Class              #197          // java/util/Arrays\n+  #163 = NameAndType        #198:#199     // fill:([BB)V\n+  #164 = NameAndType        #200:#201     // $SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE:[I\n+  #165 = Class              #202          // org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE\n+  #166 = NameAndType        #204:#205     // find:(I)Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE;\n+  #167 = NameAndType        #206:#88      // ordinal:()I\n+  #168 = Utf8               java/util/zip/Inflater\n+  #169 = NameAndType        #207:#121     // setInput:([BII)V\n+  #170 = NameAndType        #208:#209     // inflate:([B)I\n+  #171 = NameAndType        #210:#101     // end:()V\n+  #172 = Utf8               java/util/zip/DataFormatException\n+  #173 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveException\n+  #174 = Utf8               Bad data\n+  #175 = NameAndType        #72:#211      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #176 = Utf8               org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n+  #177 = Utf8               BZLIB2\n+  #178 = Utf8               LZO\n+  #179 = Class              #212          // org/apache/commons/compress/utils/IOUtils\n+  #180 = NameAndType        #120:#213     // readFully:(Ljava/io/InputStream;[BII)I\n+  #181 = NameAndType        #123:#214     // readRange:(Ljava/io/InputStream;I)[B\n+  #182 = Utf8               java/io/FilterInputStream\n+  #183 = Utf8               org/apache/commons/compress/archivers/dump/TapeInputStream$1\n+  #184 = Utf8               java/lang/Throwable\n+  #185 = Methodref          #215.#216     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #186 = Utf8               Block with \\u0001 records found, must be at least 1\n+  #187 = Utf8               makeConcatWithConstants\n+  #188 = Utf8               (I)Ljava/lang/String;\n+  #189 = Utf8               (Ljava/lang/String;)V\n+  #190 = Utf8               java/lang/System\n+  #191 = Utf8               arraycopy\n+  #192 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #193 = Utf8               java/io/InputStream\n+  #194 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n+  #195 = Utf8               convert32\n+  #196 = Utf8               ([BI)I\n+  #197 = Utf8               java/util/Arrays\n+  #198 = Utf8               fill\n+  #199 = Utf8               ([BB)V\n+  #200 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE\n+  #201 = Utf8               [I\n+  #202 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE\n+  #203 = Utf8               COMPRESSION_TYPE\n+  #204 = Utf8               find\n+  #205 = Utf8               (I)Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE;\n+  #206 = Utf8               ordinal\n+  #207 = Utf8               setInput\n+  #208 = Utf8               inflate\n+  #209 = Utf8               ([B)I\n+  #210 = Utf8               end\n+  #211 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #212 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #213 = Utf8               (Ljava/io/InputStream;[BII)I\n+  #214 = Utf8               (Ljava/io/InputStream;I)[B\n+  #215 = Class              #217          // java/lang/invoke/StringConcatFactory\n+  #216 = NameAndType        #187:#220     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #217 = Utf8               java/lang/invoke/StringConcatFactory\n+  #218 = Class              #222          // java/lang/invoke/MethodHandles$Lookup\n+  #219 = Utf8               Lookup\n+  #220 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #221 = Class              #223          // java/lang/invoke/MethodHandles\n+  #222 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #223 = Utf8               java/lang/invoke/MethodHandles\n {\n   private byte[] blockBuffer;\n     descriptor: [B\n     flags: (0x0002) ACC_PRIVATE\n \n   private int currBlkIdx;\n     descriptor: I\n@@ -302,85 +298,77 @@\n     Code:\n       stack=5, locals=4, args_size=3\n          0: aload_0\n          1: iload_2\n          2: putfield      #7                  // Field isCompressed:Z\n          5: iload_1\n          6: iconst_1\n-         7: if_icmpge     42\n+         7: if_icmpge     24\n         10: new           #8                  // class java/io/IOException\n         13: dup\n-        14: new           #9                  // class java/lang/StringBuilder\n-        17: dup\n-        18: invokespecial #10                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        21: ldc           #11                 // String Block with\n-        23: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        26: iload_1\n-        27: invokevirtual #13                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        30: ldc           #14                 // String  records found, must be at least 1\n-        32: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        35: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        38: invokespecial #16                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        41: athrow\n-        42: aload_0\n-        43: sipush        1024\n-        46: iload_1\n-        47: imul\n-        48: putfield      #5                  // Field blockSize:I\n-        51: aload_0\n-        52: getfield      #3                  // Field blockBuffer:[B\n-        55: astore_3\n-        56: aload_0\n-        57: aload_0\n-        58: getfield      #5                  // Field blockSize:I\n-        61: newarray       byte\n-        63: putfield      #3                  // Field blockBuffer:[B\n-        66: aload_3\n-        67: iconst_0\n-        68: aload_0\n-        69: getfield      #3                  // Field blockBuffer:[B\n-        72: iconst_0\n+        14: iload_1\n+        15: invokedynamic #9,  0              // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+        20: invokespecial #10                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        23: athrow\n+        24: aload_0\n+        25: sipush        1024\n+        28: iload_1\n+        29: imul\n+        30: putfield      #5                  // Field blockSize:I\n+        33: aload_0\n+        34: getfield      #3                  // Field blockBuffer:[B\n+        37: astore_3\n+        38: aload_0\n+        39: aload_0\n+        40: getfield      #5                  // Field blockSize:I\n+        43: newarray       byte\n+        45: putfield      #3                  // Field blockBuffer:[B\n+        48: aload_3\n+        49: iconst_0\n+        50: aload_0\n+        51: getfield      #3                  // Field blockBuffer:[B\n+        54: iconst_0\n+        55: sipush        1024\n+        58: invokestatic  #12                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        61: aload_0\n+        62: aload_0\n+        63: getfield      #3                  // Field blockBuffer:[B\n+        66: sipush        1024\n+        69: aload_0\n+        70: getfield      #5                  // Field blockSize:I\n         73: sipush        1024\n-        76: invokestatic  #18                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-        79: aload_0\n+        76: isub\n+        77: invokespecial #13                 // Method readFully:([BII)V\n         80: aload_0\n-        81: getfield      #3                  // Field blockBuffer:[B\n-        84: sipush        1024\n-        87: aload_0\n-        88: getfield      #5                  // Field blockSize:I\n-        91: sipush        1024\n-        94: isub\n-        95: invokespecial #19                 // Method readFully:([BII)V\n-        98: aload_0\n-        99: iconst_0\n-       100: putfield      #4                  // Field currBlkIdx:I\n-       103: aload_0\n-       104: sipush        1024\n-       107: putfield      #6                  // Field readOffset:I\n-       110: return\n+        81: iconst_0\n+        82: putfield      #4                  // Field currBlkIdx:I\n+        85: aload_0\n+        86: sipush        1024\n+        89: putfield      #6                  // Field readOffset:I\n+        92: return\n       LineNumberTable:\n         line 71: 0\n         line 73: 5\n         line 74: 10\n-        line 77: 42\n-        line 80: 51\n-        line 83: 56\n-        line 84: 66\n-        line 85: 79\n-        line 87: 98\n-        line 88: 103\n-        line 89: 110\n+        line 77: 24\n+        line 80: 33\n+        line 83: 38\n+        line 84: 48\n+        line 85: 61\n+        line 87: 80\n+        line 88: 85\n+        line 89: 92\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0     111     0  this   Lorg/apache/commons/compress/archivers/dump/TapeInputStream;\n-            0     111     1 recsPerBlock   I\n-            0     111     2 isCompressed   Z\n-           56      55     3 oldBuffer   [B\n+            0      93     0  this   Lorg/apache/commons/compress/archivers/dump/TapeInputStream;\n+            0      93     1 recsPerBlock   I\n+            0      93     2 isCompressed   Z\n+           38      55     3 oldBuffer   [B\n       StackMapTable: number_of_entries = 1\n-        frame_type = 42 /* same */\n+        frame_type = 24 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   public int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n@@ -393,16 +381,16 @@\n         11: aload_0\n         12: getfield      #5                  // Field blockSize:I\n         15: aload_0\n         16: getfield      #6                  // Field readOffset:I\n         19: isub\n         20: ireturn\n         21: aload_0\n-        22: getfield      #20                 // Field in:Ljava/io/InputStream;\n-        25: invokevirtual #21                 // Method java/io/InputStream.available:()I\n+        22: getfield      #14                 // Field in:Ljava/io/InputStream;\n+        25: invokevirtual #15                 // Method java/io/InputStream.available:()I\n         28: ireturn\n       LineNumberTable:\n         line 96: 0\n         line 97: 11\n         line 100: 21\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -413,18 +401,18 @@\n       throws java.io.IOException\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n-         0: new           #22                 // class java/lang/IllegalArgumentException\n+         0: new           #16                 // class java/lang/IllegalArgumentException\n          3: dup\n-         4: ldc           #23                 // String All reads must be multiple of record size (1024 bytes.\n-         6: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+         4: ldc           #17                 // String All reads must be multiple of record size (1024 bytes.\n+         6: invokespecial #18                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n          9: athrow\n       LineNumberTable:\n         line 108: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/compress/archivers/dump/TapeInputStream;\n     Exceptions:\n@@ -439,32 +427,32 @@\n          1: ifne          6\n          4: iconst_0\n          5: ireturn\n          6: iload_3\n          7: sipush        1024\n         10: irem\n         11: ifeq          24\n-        14: new           #22                 // class java/lang/IllegalArgumentException\n+        14: new           #16                 // class java/lang/IllegalArgumentException\n         17: dup\n-        18: ldc           #23                 // String All reads must be multiple of record size (1024 bytes.\n-        20: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        18: ldc           #17                 // String All reads must be multiple of record size (1024 bytes.\n+        20: invokespecial #18                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         23: athrow\n         24: iconst_0\n         25: istore        4\n         27: iload         4\n         29: iload_3\n         30: if_icmpge     136\n         33: aload_0\n         34: getfield      #6                  // Field readOffset:I\n         37: aload_0\n         38: getfield      #5                  // Field blockSize:I\n         41: if_icmpne     56\n         44: aload_0\n         45: iconst_1\n-        46: invokespecial #25                 // Method readBlock:(Z)V\n+        46: invokespecial #19                 // Method readBlock:(Z)V\n         49: goto          56\n         52: astore        5\n         54: iconst_m1\n         55: ireturn\n         56: iconst_0\n         57: istore        5\n         59: aload_0\n@@ -490,15 +478,15 @@\n         95: aload_0\n         96: getfield      #3                  // Field blockBuffer:[B\n         99: aload_0\n        100: getfield      #6                  // Field readOffset:I\n        103: aload_1\n        104: iload_2\n        105: iload         5\n-       107: invokestatic  #18                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       107: invokestatic  #12                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        110: aload_0\n        111: dup\n        112: getfield      #6                  // Field readOffset:I\n        115: iload         5\n        117: iadd\n        118: putfield      #6                  // Field readOffset:I\n        121: iload         4\n@@ -566,23 +554,23 @@\n \n   public long skip(long) throws java.io.IOException;\n     descriptor: (J)J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=7, args_size=2\n          0: lload_1\n-         1: ldc2_w        #27                 // long 1024l\n+         1: ldc2_w        #21                 // long 1024l\n          4: lrem\n          5: lconst_0\n          6: lcmp\n          7: ifeq          20\n-        10: new           #22                 // class java/lang/IllegalArgumentException\n+        10: new           #16                 // class java/lang/IllegalArgumentException\n         13: dup\n-        14: ldc           #23                 // String All reads must be multiple of record size (1024 bytes.\n-        16: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        14: ldc           #17                 // String All reads must be multiple of record size (1024 bytes.\n+        16: invokespecial #18                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         19: athrow\n         20: lconst_0\n         21: lstore_3\n         22: lload_3\n         23: lload_1\n         24: lcmp\n         25: ifge          132\n@@ -599,18 +587,18 @@\n         44: getfield      #5                  // Field blockSize:I\n         47: i2l\n         48: lcmp\n         49: ifge          56\n         52: iconst_1\n         53: goto          57\n         56: iconst_0\n-        57: invokespecial #25                 // Method readBlock:(Z)V\n+        57: invokespecial #19                 // Method readBlock:(Z)V\n         60: goto          69\n         63: astore        5\n-        65: ldc2_w        #29                 // long -1l\n+        65: ldc2_w        #23                 // long -1l\n         68: lreturn\n         69: lconst_0\n         70: lstore        5\n         72: aload_0\n         73: getfield      #6                  // Field readOffset:I\n         76: i2l\n         77: lload_1\n@@ -703,23 +691,23 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #20                 // Field in:Ljava/io/InputStream;\n+         1: getfield      #14                 // Field in:Ljava/io/InputStream;\n          4: ifnull        24\n          7: aload_0\n-         8: getfield      #20                 // Field in:Ljava/io/InputStream;\n-        11: getstatic     #31                 // Field java/lang/System.in:Ljava/io/InputStream;\n+         8: getfield      #14                 // Field in:Ljava/io/InputStream;\n+        11: getstatic     #25                 // Field java/lang/System.in:Ljava/io/InputStream;\n         14: if_acmpeq     24\n         17: aload_0\n-        18: getfield      #20                 // Field in:Ljava/io/InputStream;\n-        21: invokevirtual #32                 // Method java/io/InputStream.close:()V\n+        18: getfield      #14                 // Field in:Ljava/io/InputStream;\n+        21: invokevirtual #26                 // Method java/io/InputStream.close:()V\n         24: return\n       LineNumberTable:\n         line 222: 0\n         line 223: 17\n         line 225: 24\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -737,15 +725,15 @@\n          0: aload_0\n          1: getfield      #6                  // Field readOffset:I\n          4: aload_0\n          5: getfield      #5                  // Field blockSize:I\n          8: if_icmpne     22\n         11: aload_0\n         12: iconst_1\n-        13: invokespecial #25                 // Method readBlock:(Z)V\n+        13: invokespecial #19                 // Method readBlock:(Z)V\n         16: goto          22\n         19: astore_1\n         20: aconst_null\n         21: areturn\n         22: sipush        1024\n         25: newarray       byte\n         27: astore_1\n@@ -753,15 +741,15 @@\n         29: getfield      #3                  // Field blockBuffer:[B\n         32: aload_0\n         33: getfield      #6                  // Field readOffset:I\n         36: aload_1\n         37: iconst_0\n         38: aload_1\n         39: arraylength\n-        40: invokestatic  #18                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        40: invokestatic  #12                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         43: aload_1\n         44: areturn\n       Exception table:\n          from    to  target type\n             11    16    19   Class org/apache/commons/compress/archivers/dump/ShortFileException\n       LineNumberTable:\n         line 237: 0\n@@ -794,19 +782,19 @@\n          5: astore_1\n          6: iconst_m1\n          7: aload_0\n          8: aload_1\n          9: iconst_0\n         10: aload_1\n         11: arraylength\n-        12: invokevirtual #33                 // Method read:([BII)I\n+        12: invokevirtual #27                 // Method read:([BII)I\n         15: if_icmpne     26\n-        18: new           #26                 // class org/apache/commons/compress/archivers/dump/ShortFileException\n+        18: new           #20                 // class org/apache/commons/compress/archivers/dump/ShortFileException\n         21: dup\n-        22: invokespecial #34                 // Method org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n+        22: invokespecial #28                 // Method org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n         25: athrow\n         26: aload_1\n         27: areturn\n       LineNumberTable:\n         line 259: 0\n         line 263: 6\n         line 264: 18\n@@ -824,60 +812,60 @@\n \n   private void readBlock(boolean) throws java.io.IOException;\n     descriptor: (Z)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=10, args_size=2\n          0: aload_0\n-         1: getfield      #20                 // Field in:Ljava/io/InputStream;\n+         1: getfield      #14                 // Field in:Ljava/io/InputStream;\n          4: ifnonnull     17\n          7: new           #8                  // class java/io/IOException\n         10: dup\n-        11: ldc           #35                 // String Input buffer is closed\n-        13: invokespecial #16                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #29                 // String Input buffer is closed\n+        13: invokespecial #10                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_0\n         18: getfield      #7                  // Field isCompressed:Z\n         21: ifeq          32\n         24: aload_0\n         25: getfield      #4                  // Field currBlkIdx:I\n         28: iconst_m1\n         29: if_icmpne     62\n         32: aload_0\n         33: aload_0\n         34: getfield      #3                  // Field blockBuffer:[B\n         37: iconst_0\n         38: aload_0\n         39: getfield      #5                  // Field blockSize:I\n-        42: invokespecial #19                 // Method readFully:([BII)V\n+        42: invokespecial #13                 // Method readFully:([BII)V\n         45: aload_0\n         46: dup\n-        47: getfield      #36                 // Field bytesRead:J\n+        47: getfield      #30                 // Field bytesRead:J\n         50: aload_0\n         51: getfield      #5                  // Field blockSize:I\n         54: i2l\n         55: ladd\n-        56: putfield      #36                 // Field bytesRead:J\n+        56: putfield      #30                 // Field bytesRead:J\n         59: goto          343\n         62: aload_0\n         63: aload_0\n         64: getfield      #3                  // Field blockBuffer:[B\n         67: iconst_0\n         68: iconst_4\n-        69: invokespecial #19                 // Method readFully:([BII)V\n+        69: invokespecial #13                 // Method readFully:([BII)V\n         72: aload_0\n         73: dup\n-        74: getfield      #36                 // Field bytesRead:J\n-        77: ldc2_w        #37                 // long 4l\n+        74: getfield      #30                 // Field bytesRead:J\n+        77: ldc2_w        #31                 // long 4l\n         80: ladd\n-        81: putfield      #36                 // Field bytesRead:J\n+        81: putfield      #30                 // Field bytesRead:J\n         84: aload_0\n         85: getfield      #3                  // Field blockBuffer:[B\n         88: iconst_0\n-        89: invokestatic  #39                 // Method org/apache/commons/compress/archivers/dump/DumpArchiveUtil.convert32:([BI)I\n+        89: invokestatic  #33                 // Method org/apache/commons/compress/archivers/dump/DumpArchiveUtil.convert32:([BI)I\n         92: istore_2\n         93: iload_2\n         94: iconst_1\n         95: iand\n         96: iconst_1\n         97: if_icmpne     104\n        100: iconst_1\n@@ -888,119 +876,119 @@\n        107: ifne          140\n        110: aload_0\n        111: aload_0\n        112: getfield      #3                  // Field blockBuffer:[B\n        115: iconst_0\n        116: aload_0\n        117: getfield      #5                  // Field blockSize:I\n-       120: invokespecial #19                 // Method readFully:([BII)V\n+       120: invokespecial #13                 // Method readFully:([BII)V\n        123: aload_0\n        124: dup\n-       125: getfield      #36                 // Field bytesRead:J\n+       125: getfield      #30                 // Field bytesRead:J\n        128: aload_0\n        129: getfield      #5                  // Field blockSize:I\n        132: i2l\n        133: ladd\n-       134: putfield      #36                 // Field bytesRead:J\n+       134: putfield      #30                 // Field bytesRead:J\n        137: goto          343\n        140: iload_2\n        141: iconst_1\n        142: ishr\n        143: bipush        7\n        145: iand\n        146: istore        4\n        148: iload_2\n        149: iconst_4\n        150: ishr\n-       151: ldc           #40                 // int 268435455\n+       151: ldc           #34                 // int 268435455\n        153: iand\n        154: istore        5\n        156: aload_0\n        157: iload         5\n-       159: invokespecial #41                 // Method readRange:(I)[B\n+       159: invokespecial #35                 // Method readRange:(I)[B\n        162: astore        6\n        164: aload_0\n        165: dup\n-       166: getfield      #36                 // Field bytesRead:J\n+       166: getfield      #30                 // Field bytesRead:J\n        169: iload         5\n        171: i2l\n        172: ladd\n-       173: putfield      #36                 // Field bytesRead:J\n+       173: putfield      #30                 // Field bytesRead:J\n        176: iload_1\n        177: ifne          191\n        180: aload_0\n        181: getfield      #3                  // Field blockBuffer:[B\n        184: iconst_0\n-       185: invokestatic  #42                 // Method java/util/Arrays.fill:([BB)V\n+       185: invokestatic  #36                 // Method java/util/Arrays.fill:([BB)V\n        188: goto          343\n-       191: getstatic     #43                 // Field org/apache/commons/compress/archivers/dump/TapeInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE:[I\n+       191: getstatic     #37                 // Field org/apache/commons/compress/archivers/dump/TapeInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE:[I\n        194: iload         4\n        196: iconst_3\n        197: iand\n-       198: invokestatic  #44                 // Method org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE.find:(I)Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE;\n-       201: invokevirtual #45                 // Method org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE.ordinal:()I\n+       198: invokestatic  #38                 // Method org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE.find:(I)Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE;\n+       201: invokevirtual #39                 // Method org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE.ordinal:()I\n        204: iaload\n        205: tableswitch   { // 1 to 3\n                        1: 232\n                        2: 315\n                        3: 325\n                  default: 335\n             }\n-       232: new           #46                 // class java/util/zip/Inflater\n+       232: new           #40                 // class java/util/zip/Inflater\n        235: dup\n-       236: invokespecial #47                 // Method java/util/zip/Inflater.\"<init>\":()V\n+       236: invokespecial #41                 // Method java/util/zip/Inflater.\"<init>\":()V\n        239: astore        7\n        241: aload         7\n        243: aload         6\n        245: iconst_0\n        246: aload         6\n        248: arraylength\n-       249: invokevirtual #48                 // Method java/util/zip/Inflater.setInput:([BII)V\n+       249: invokevirtual #42                 // Method java/util/zip/Inflater.setInput:([BII)V\n        252: aload         7\n        254: aload_0\n        255: getfield      #3                  // Field blockBuffer:[B\n-       258: invokevirtual #49                 // Method java/util/zip/Inflater.inflate:([B)I\n+       258: invokevirtual #43                 // Method java/util/zip/Inflater.inflate:([B)I\n        261: istore        5\n        263: iload         5\n        265: aload_0\n        266: getfield      #5                  // Field blockSize:I\n        269: if_icmpeq     280\n-       272: new           #26                 // class org/apache/commons/compress/archivers/dump/ShortFileException\n+       272: new           #20                 // class org/apache/commons/compress/archivers/dump/ShortFileException\n        275: dup\n-       276: invokespecial #34                 // Method org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n+       276: invokespecial #28                 // Method org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n        279: athrow\n        280: aload         7\n-       282: invokevirtual #50                 // Method java/util/zip/Inflater.end:()V\n+       282: invokevirtual #44                 // Method java/util/zip/Inflater.end:()V\n        285: goto          312\n        288: astore        8\n-       290: new           #52                 // class org/apache/commons/compress/archivers/dump/DumpArchiveException\n+       290: new           #46                 // class org/apache/commons/compress/archivers/dump/DumpArchiveException\n        293: dup\n-       294: ldc           #53                 // String Bad data\n+       294: ldc           #47                 // String Bad data\n        296: aload         8\n-       298: invokespecial #54                 // Method org/apache/commons/compress/archivers/dump/DumpArchiveException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+       298: invokespecial #48                 // Method org/apache/commons/compress/archivers/dump/DumpArchiveException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n        301: athrow\n        302: astore        9\n        304: aload         7\n-       306: invokevirtual #50                 // Method java/util/zip/Inflater.end:()V\n+       306: invokevirtual #44                 // Method java/util/zip/Inflater.end:()V\n        309: aload         9\n        311: athrow\n        312: goto          343\n-       315: new           #55                 // class org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n+       315: new           #49                 // class org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n        318: dup\n-       319: ldc           #56                 // String BZLIB2\n-       321: invokespecial #57                 // Method org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":(Ljava/lang/String;)V\n+       319: ldc           #50                 // String BZLIB2\n+       321: invokespecial #51                 // Method org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":(Ljava/lang/String;)V\n        324: athrow\n-       325: new           #55                 // class org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n+       325: new           #49                 // class org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n        328: dup\n-       329: ldc           #58                 // String LZO\n-       331: invokespecial #57                 // Method org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":(Ljava/lang/String;)V\n+       329: ldc           #52                 // String LZO\n+       331: invokespecial #51                 // Method org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":(Ljava/lang/String;)V\n        334: athrow\n-       335: new           #55                 // class org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n+       335: new           #49                 // class org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n        338: dup\n-       339: invokespecial #59                 // Method org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":()V\n+       339: invokespecial #53                 // Method org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":()V\n        342: athrow\n        343: aload_0\n        344: dup\n        345: getfield      #4                  // Field currBlkIdx:I\n        348: iconst_1\n        349: iadd\n        350: putfield      #4                  // Field currBlkIdx:I\n@@ -1099,26 +1087,26 @@\n \n   private void readFully(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=5, args_size=4\n          0: aload_0\n-         1: getfield      #20                 // Field in:Ljava/io/InputStream;\n+         1: getfield      #14                 // Field in:Ljava/io/InputStream;\n          4: aload_1\n          5: iload_2\n          6: iload_3\n-         7: invokestatic  #60                 // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n+         7: invokestatic  #54                 // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n         10: istore        4\n         12: iload         4\n         14: iload_3\n         15: if_icmpge     26\n-        18: new           #26                 // class org/apache/commons/compress/archivers/dump/ShortFileException\n+        18: new           #20                 // class org/apache/commons/compress/archivers/dump/ShortFileException\n         21: dup\n-        22: invokespecial #34                 // Method org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n+        22: invokespecial #28                 // Method org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n         25: athrow\n         26: return\n       LineNumberTable:\n         line 351: 0\n         line 352: 12\n         line 353: 18\n         line 355: 26\n@@ -1138,25 +1126,25 @@\n \n   private byte[] readRange(int) throws java.io.IOException;\n     descriptor: (I)[B\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #20                 // Field in:Ljava/io/InputStream;\n+         1: getfield      #14                 // Field in:Ljava/io/InputStream;\n          4: iload_1\n-         5: invokestatic  #61                 // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+         5: invokestatic  #55                 // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n          8: astore_2\n          9: aload_2\n         10: arraylength\n         11: iload_1\n         12: if_icmpge     23\n-        15: new           #26                 // class org/apache/commons/compress/archivers/dump/ShortFileException\n+        15: new           #20                 // class org/apache/commons/compress/archivers/dump/ShortFileException\n         18: dup\n-        19: invokespecial #34                 // Method org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n+        19: invokespecial #28                 // Method org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n         22: athrow\n         23: aload_2\n         24: areturn\n       LineNumberTable:\n         line 358: 0\n         line 359: 9\n         line 360: 15\n@@ -1175,19 +1163,24 @@\n \n   public long getBytesRead();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #36                 // Field bytesRead:J\n+         1: getfield      #30                 // Field bytesRead:J\n          4: lreturn\n       LineNumberTable:\n         line 369: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/dump/TapeInputStream;\n }\n SourceFile: \"TapeInputStream.java\"\n InnerClasses:\n-  static #63;                             // class org/apache/commons/compress/archivers/dump/TapeInputStream$1\n-  public static final #216= #177 of #1;   // COMPRESSION_TYPE=class org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE of class org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n+  static #57;                             // class org/apache/commons/compress/archivers/dump/TapeInputStream$1\n+  public static final #203= #165 of #1;   // COMPRESSION_TYPE=class org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE of class org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n+  public static final #219= #218 of #221; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+BootstrapMethods:\n+  0: #139 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #140 Block with \\u0001 records found, must be at least 1\n"}]}
