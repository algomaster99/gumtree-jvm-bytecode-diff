{"diffoscope-json-version": 1, "source1": "first/ObservableInputStream.class", "source2": "second/ObservableInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,129 +18,129 @@\n     }\n     \n     private ObservableInputStream(final InputStream inputStream, final List<ObservableInputStream.Observer> observers) {\n         super(inputStream);\n         this.observers = observers;\n     }\n     \n-    public ObservableInputStream(final InputStream inputStream, final ObservableInputStream.Observer... observers) {\n-        this(inputStream, Arrays.asList(observers));\n+    public ObservableInputStream(final InputStream inputStream, final ObservableInputStream.Observer... a) {\n+        this(inputStream, Arrays.asList(a));\n     }\n     \n     public void add(final ObservableInputStream.Observer observer) {\n         this.observers.add(observer);\n     }\n     \n     public void close() throws IOException {\n-        IOException ioe = null;\n+        IOException ex = null;\n         try {\n             super.close();\n         }\n-        catch (final IOException e) {\n-            ioe = e;\n+        catch (final IOException ex2) {\n+            ex = ex2;\n         }\n-        if (ioe == null) {\n+        if (ex == null) {\n             this.noteClosed();\n         }\n         else {\n-            this.noteError(ioe);\n+            this.noteError(ex);\n         }\n     }\n     \n     public void consume() throws IOException {\n         IOUtils.consume((InputStream)this);\n     }\n     \n-    private void forEachObserver(final IOConsumer<ObservableInputStream.Observer> action) throws IOException {\n-        IOConsumer.forAll((IOConsumer)action, (Iterable)this.observers);\n+    private void forEachObserver(final IOConsumer<ObservableInputStream.Observer> ioConsumer) throws IOException {\n+        IOConsumer.forAll((IOConsumer)ioConsumer, (Iterable)this.observers);\n     }\n     \n     public List<ObservableInputStream.Observer> getObservers() {\n         return this.observers;\n     }\n     \n     protected void noteClosed() throws IOException {\n         this.forEachObserver((IOConsumer<ObservableInputStream.Observer>)ObservableInputStream.Observer::closed);\n     }\n     \n-    protected void noteDataByte(final int value) throws IOException {\n-        this.forEachObserver((IOConsumer<ObservableInputStream.Observer>)(observer -> observer.data(value)));\n+    protected void noteDataByte(final int n) throws IOException {\n+        this.forEachObserver((IOConsumer<ObservableInputStream.Observer>)(observer -> observer.data(n)));\n     }\n     \n-    protected void noteDataBytes(final byte[] buffer, final int offset, final int length) throws IOException {\n-        this.forEachObserver((IOConsumer<ObservableInputStream.Observer>)(observer -> observer.data(buffer, offset, length)));\n+    protected void noteDataBytes(final byte[] array, final int n, final int n2) throws IOException {\n+        this.forEachObserver((IOConsumer<ObservableInputStream.Observer>)(observer -> observer.data(array, n, n2)));\n     }\n     \n-    protected void noteError(final IOException exception) throws IOException {\n-        this.forEachObserver((IOConsumer<ObservableInputStream.Observer>)(observer -> observer.error(exception)));\n+    protected void noteError(final IOException ex) throws IOException {\n+        this.forEachObserver((IOConsumer<ObservableInputStream.Observer>)(observer -> observer.error(ex)));\n     }\n     \n     protected void noteFinished() throws IOException {\n         this.forEachObserver((IOConsumer<ObservableInputStream.Observer>)ObservableInputStream.Observer::finished);\n     }\n     \n-    private void notify(final byte[] buffer, final int offset, final int result, final IOException ioe) throws IOException {\n-        if (ioe != null) {\n-            this.noteError(ioe);\n-            throw ioe;\n+    private void notify(final byte[] array, final int n, final int n2, final IOException ex) throws IOException {\n+        if (ex != null) {\n+            this.noteError(ex);\n+            throw ex;\n         }\n-        if (result == -1) {\n+        if (n2 == -1) {\n             this.noteFinished();\n         }\n-        else if (result > 0) {\n-            this.noteDataBytes(buffer, offset, result);\n+        else if (n2 > 0) {\n+            this.noteDataBytes(array, n, n2);\n         }\n     }\n     \n     public int read() throws IOException {\n-        int result = 0;\n-        IOException ioe = null;\n+        int read = 0;\n+        IOException ex = null;\n         try {\n-            result = super.read();\n+            read = super.read();\n         }\n-        catch (final IOException ex) {\n-            ioe = ex;\n+        catch (final IOException ex2) {\n+            ex = ex2;\n         }\n-        if (ioe != null) {\n-            this.noteError(ioe);\n-            throw ioe;\n+        if (ex != null) {\n+            this.noteError(ex);\n+            throw ex;\n         }\n-        if (result == -1) {\n+        if (read == -1) {\n             this.noteFinished();\n         }\n         else {\n-            this.noteDataByte(result);\n+            this.noteDataByte(read);\n         }\n-        return result;\n+        return read;\n     }\n     \n-    public int read(final byte[] buffer) throws IOException {\n-        int result = 0;\n-        IOException ioe = null;\n+    public int read(final byte[] array) throws IOException {\n+        int read = 0;\n+        IOException ex = null;\n         try {\n-            result = super.read(buffer);\n+            read = super.read(array);\n         }\n-        catch (final IOException ex) {\n-            ioe = ex;\n+        catch (final IOException ex2) {\n+            ex = ex2;\n         }\n-        this.notify(buffer, 0, result, ioe);\n-        return result;\n+        this.notify(array, 0, read, ex);\n+        return read;\n     }\n     \n-    public int read(final byte[] buffer, final int offset, final int length) throws IOException {\n-        int result = 0;\n-        IOException ioe = null;\n+    public int read(final byte[] array, final int n, final int n2) throws IOException {\n+        int read = 0;\n+        IOException ex = null;\n         try {\n-            result = super.read(buffer, offset, length);\n+            read = super.read(array, n, n2);\n         }\n-        catch (final IOException ex) {\n-            ioe = ex;\n+        catch (final IOException ex2) {\n+            ex = ex2;\n         }\n-        this.notify(buffer, offset, result, ioe);\n-        return result;\n+        this.notify(array, n, read, ex);\n+        return read;\n     }\n     \n     public void remove(final ObservableInputStream.Observer observer) {\n         this.observers.remove(observer);\n     }\n     \n     public void removeAllObservers() {\n"}]}
