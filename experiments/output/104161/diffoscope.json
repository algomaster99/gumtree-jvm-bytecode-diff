{"diffoscope-json-version": 1, "source1": "first/PropertyConverter.class", "source2": "second/PropertyConverter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -34,14 +34,18 @@\n     private static final int HEX_RADIX = 16;\n     private static final String BIN_PREFIX = \"0b\";\n     private static final int BIN_RADIX = 2;\n     private static final Class<?>[] CONSTR_ARGS;\n     private static final String INTERNET_ADDRESS_CLASSNAME_JAVAX = \"javax.mail.internet.InternetAddress\";\n     private static final String INTERNET_ADDRESS_CLASSNAME_JAKARTA = \"jakarta.mail.internet.InternetAddress\";\n     \n+    static {\n+        CONSTR_ARGS = new Class[] { String.class };\n+    }\n+    \n     private PropertyConverter() {\n     }\n     \n     public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {\n         if (cls.isInstance(value)) {\n             return value;\n         }\n@@ -120,15 +124,15 @@\n             if (InetAddress.class.isAssignableFrom(cls)) {\n                 return toInetAddress(value);\n             }\n             if (Duration.class.equals(cls)) {\n                 return toDuration(value);\n             }\n         }\n-        throw new ConversionException(\"The value '\" + value + \"' (\" + value.getClass() + \") can't be converted to a \" + cls.getName() + \" object\");\n+        throw new ConversionException(\"The value '\" + value + \"' (\" + value.getClass() + \")\" + \" can't be converted to a \" + cls.getName() + \" object\");\n     }\n     \n     public static Boolean toBoolean(final Object value) throws ConversionException {\n         if (value instanceof Boolean) {\n             return (Boolean)value;\n         }\n         if (!(value instanceof String)) {\n@@ -431,16 +435,16 @@\n                 throw new ConversionException(\"The value \" + value + \" can't be converted to a \" + cls.getName());\n             }\n         }\n         if (!(value instanceof Number)) {\n             throw new ConversionException(\"The value \" + value + \" can't be converted to a \" + cls.getName());\n         }\n         try {\n-            final E[] enumConstants = (E[])cls.getEnumConstants();\n-            return enumConstants[((Number)value).intValue()];\n+            final Enum[] enumConstants = (E[])cls.getEnumConstants();\n+            return (E)enumConstants[((Number)value).intValue()];\n         }\n         catch (final Exception e) {\n             throw new ConversionException(\"The value \" + value + \" can't be converted to a \" + cls.getName());\n         }\n     }\n     \n     public static Date toDate(final Object value, final String format) throws ConversionException {\n@@ -482,12 +486,8 @@\n             throw new ConversionException(\"The value \" + value + \" can't be converted to a Calendar\", (Throwable)e);\n         }\n     }\n     \n     private static Object convertToEnum(final Class<?> enumClass, final Object value) {\n         return toEnum(value, (Class<Object>)enumClass.asSubclass(Enum.class));\n     }\n-    \n-    static {\n-        CONSTR_ARGS = new Class[] { String.class };\n-    }\n }\n"}]}
