{"diffoscope-json-version": 1, "source1": "first/DaitchMokotoffSoundex.class", "source2": "second/DaitchMokotoffSoundex.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -204,35 +204,16 @@\n         }\n         return result;\n     }\n     \n     static {\n         RULES = new HashMap<Character, List<DaitchMokotoffSoundex.Rule>>();\n         FOLDINGS = new HashMap<Character, Character>();\n-        final Scanner scanner = new Scanner(Resources.getInputStream(\"org/apache/commons/codec/language/dmrules.txt\"), \"UTF-8\");\n-        Throwable t = null;\n-        try {\n+        try (final Scanner scanner = new Scanner(Resources.getInputStream(\"org/apache/commons/codec/language/dmrules.txt\"), \"UTF-8\")) {\n             parseRules(scanner, \"org/apache/commons/codec/language/dmrules.txt\", DaitchMokotoffSoundex.RULES, DaitchMokotoffSoundex.FOLDINGS);\n         }\n-        catch (final Throwable t2) {\n-            t = t2;\n-            throw t2;\n-        }\n-        finally {\n-            if (t != null) {\n-                try {\n-                    scanner.close();\n-                }\n-                catch (final Throwable exception) {\n-                    t.addSuppressed(exception);\n-                }\n-            }\n-            else {\n-                scanner.close();\n-            }\n-        }\n         for (final Map.Entry<Character, List<DaitchMokotoffSoundex.Rule>> rule : DaitchMokotoffSoundex.RULES.entrySet()) {\n             final List<DaitchMokotoffSoundex.Rule> ruleList = (List<DaitchMokotoffSoundex.Rule>)rule.getValue();\n             Collections.sort(ruleList, (Comparator<? super DaitchMokotoffSoundex.Rule>)new DaitchMokotoffSoundex.DaitchMokotoffSoundex$1());\n         }\n     }\n }\n"}]}
