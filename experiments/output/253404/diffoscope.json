{"diffoscope-json-version": 1, "source1": "first/PackageNamesLoader.class", "source2": "second/PackageNamesLoader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -32,70 +32,68 @@\n     \n     private PackageNamesLoader() throws ParserConfigurationException, SAXException {\n         super((Map)createIdToResourceNameMap());\n         this.packageStack = new ArrayDeque<String>();\n         this.packageNames = new LinkedHashSet<String>();\n     }\n     \n-    public void startElement(final String uri, final String localName, final String qName, final Attributes attributes) {\n-        if (\"package\".equals(qName)) {\n-            final String name = attributes.getValue(\"name\");\n-            this.packageStack.push(name);\n+    public void startElement(final String s, final String s2, final String anObject, final Attributes attributes) {\n+        if (\"package\".equals(anObject)) {\n+            this.packageStack.push(attributes.getValue(\"name\"));\n         }\n     }\n     \n     private String getPackageName() {\n-        final StringBuilder buf = new StringBuilder(256);\n-        final Iterator<String> iterator = this.packageStack.descendingIterator();\n-        while (iterator.hasNext()) {\n-            final String subPackage = (String)iterator.next();\n-            buf.append(subPackage);\n-            if (!subPackage.endsWith(\".\") && iterator.hasNext()) {\n-                buf.append('.');\n+        final StringBuilder sb = new StringBuilder(256);\n+        final Iterator<String> descendingIterator = this.packageStack.descendingIterator();\n+        while (descendingIterator.hasNext()) {\n+            final String str = (String)descendingIterator.next();\n+            sb.append(str);\n+            if (!str.endsWith(\".\") && descendingIterator.hasNext()) {\n+                sb.append('.');\n             }\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n-    public void endElement(final String uri, final String localName, final String qName) {\n-        if (\"package\".equals(qName)) {\n+    public void endElement(final String s, final String s2, final String anObject) {\n+        if (\"package\".equals(anObject)) {\n             this.packageNames.add(this.getPackageName());\n             this.packageStack.pop();\n         }\n     }\n     \n     public static Set<String> getPackageNames(final ClassLoader classLoader) throws CheckstyleException {\n-        Set<String> result;\n+        Set<String> packageNames;\n         try {\n-            final PackageNamesLoader namesLoader = new PackageNamesLoader();\n-            final Enumeration<URL> packageFiles = classLoader.getResources(\"checkstyle_packages.xml\");\n-            while (packageFiles.hasMoreElements()) {\n-                processFile(packageFiles.nextElement(), namesLoader);\n+            final PackageNamesLoader packageNamesLoader = new PackageNamesLoader();\n+            final Enumeration<URL> resources = classLoader.getResources(\"checkstyle_packages.xml\");\n+            while (resources.hasMoreElements()) {\n+                processFile(resources.nextElement(), packageNamesLoader);\n             }\n-            result = namesLoader.packageNames;\n+            packageNames = packageNamesLoader.packageNames;\n         }\n         catch (final IOException ex) {\n             throw new CheckstyleException(\"unable to get package file resources\", (Throwable)ex);\n         }\n         catch (final ParserConfigurationException | SAXException ex2) {\n             throw new CheckstyleException(\"unable to open one of package files\", (Throwable)ex2);\n         }\n-        return Collections.unmodifiableSet((Set<? extends String>)result);\n+        return (Set<String>)Collections.unmodifiableSet((Set<?>)packageNames);\n     }\n     \n-    private static void processFile(final URL packageFile, final PackageNamesLoader namesLoader) throws SAXException, CheckstyleException {\n-        try (final InputStream stream = new BufferedInputStream(packageFile.openStream())) {\n-            final InputSource source = new InputSource(stream);\n-            namesLoader.parseInputSource(source);\n+    private static void processFile(final URL url, final PackageNamesLoader packageNamesLoader) throws SAXException, CheckstyleException {\n+        try (final BufferedInputStream byteStream = new BufferedInputStream(url.openStream())) {\n+            packageNamesLoader.parseInputSource(new InputSource((InputStream)byteStream));\n         }\n         catch (final IOException ex) {\n-            throw new CheckstyleException(\"unable to open \" + packageFile, (Throwable)ex);\n+            throw new CheckstyleException(\"unable to open \" + url, (Throwable)ex);\n         }\n     }\n     \n     private static Map<String, String> createIdToResourceNameMap() {\n-        final Map<String, String> map = new HashMap<String, String>();\n-        map.put(\"-//Puppy Crawl//DTD Package Names 1.0//EN\", \"com/puppycrawl/tools/checkstyle/packages_1_0.dtd\");\n-        map.put(\"-//Checkstyle//DTD Package Names Configuration 1.0//EN\", \"com/puppycrawl/tools/checkstyle/packages_1_0.dtd\");\n-        return map;\n+        final HashMap hashMap = new HashMap();\n+        hashMap.put(\"-//Puppy Crawl//DTD Package Names 1.0//EN\", \"com/puppycrawl/tools/checkstyle/packages_1_0.dtd\");\n+        hashMap.put(\"-//Checkstyle//DTD Package Names Configuration 1.0//EN\", \"com/puppycrawl/tools/checkstyle/packages_1_0.dtd\");\n+        return hashMap;\n     }\n }\n"}]}
