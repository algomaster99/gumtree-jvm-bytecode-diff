{"diffoscope-json-version": 1, "source1": "first/DoubleMetaphone.class", "source2": "second/DoubleMetaphone.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,692 +15,693 @@\n     private static final String[] L_T_K_S_N_M_B_Z;\n     private int maxCodeLen;\n     \n     public DoubleMetaphone() {\n         this.maxCodeLen = 4;\n     }\n     \n-    public String doubleMetaphone(final String value) {\n-        return this.doubleMetaphone(value, false);\n+    public String doubleMetaphone(final String s) {\n+        return this.doubleMetaphone(s, false);\n     }\n     \n-    public String doubleMetaphone(String value, final boolean alternate) {\n-        value = this.cleanInput(value);\n-        if (value == null) {\n+    public String doubleMetaphone(String cleanInput, final boolean b) {\n+        cleanInput = this.cleanInput(cleanInput);\n+        if (cleanInput == null) {\n             return null;\n         }\n-        final boolean slavoGermanic = this.isSlavoGermanic(value);\n-        int index = this.isSilentStart(value) ? 1 : 0;\n-        final DoubleMetaphone.DoubleMetaphoneResult result = new DoubleMetaphone.DoubleMetaphoneResult(this, this.getMaxCodeLen());\n-        while (!result.isComplete() && index <= value.length() - 1) {\n-            switch (value.charAt(index)) {\n+        final boolean slavoGermanic = this.isSlavoGermanic(cleanInput);\n+        int index = this.isSilentStart(cleanInput) ? 1 : 0;\n+        final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult = new DoubleMetaphone.DoubleMetaphoneResult(this, this.getMaxCodeLen());\n+        while (!doubleMetaphoneResult.isComplete() && index <= cleanInput.length() - 1) {\n+            switch (cleanInput.charAt(index)) {\n                 case 'A':\n                 case 'E':\n                 case 'I':\n                 case 'O':\n                 case 'U':\n                 case 'Y': {\n-                    index = this.handleAEIOUY(result, index);\n+                    index = this.handleAEIOUY(doubleMetaphoneResult, index);\n                     continue;\n                 }\n                 case 'B': {\n-                    result.append('P');\n-                    index = ((this.charAt(value, index + 1) == 'B') ? (index + 2) : (index + 1));\n+                    doubleMetaphoneResult.append('P');\n+                    index = ((this.charAt(cleanInput, index + 1) == 'B') ? (index + 2) : (index + 1));\n                     continue;\n                 }\n                 case '\\u00c7': {\n-                    result.append('S');\n+                    doubleMetaphoneResult.append('S');\n                     ++index;\n                     continue;\n                 }\n                 case 'C': {\n-                    index = this.handleC(value, result, index);\n+                    index = this.handleC(cleanInput, doubleMetaphoneResult, index);\n                     continue;\n                 }\n                 case 'D': {\n-                    index = this.handleD(value, result, index);\n+                    index = this.handleD(cleanInput, doubleMetaphoneResult, index);\n                     continue;\n                 }\n                 case 'F': {\n-                    result.append('F');\n-                    index = ((this.charAt(value, index + 1) == 'F') ? (index + 2) : (index + 1));\n+                    doubleMetaphoneResult.append('F');\n+                    index = ((this.charAt(cleanInput, index + 1) == 'F') ? (index + 2) : (index + 1));\n                     continue;\n                 }\n                 case 'G': {\n-                    index = this.handleG(value, result, index, slavoGermanic);\n+                    index = this.handleG(cleanInput, doubleMetaphoneResult, index, slavoGermanic);\n                     continue;\n                 }\n                 case 'H': {\n-                    index = this.handleH(value, result, index);\n+                    index = this.handleH(cleanInput, doubleMetaphoneResult, index);\n                     continue;\n                 }\n                 case 'J': {\n-                    index = this.handleJ(value, result, index, slavoGermanic);\n+                    index = this.handleJ(cleanInput, doubleMetaphoneResult, index, slavoGermanic);\n                     continue;\n                 }\n                 case 'K': {\n-                    result.append('K');\n-                    index = ((this.charAt(value, index + 1) == 'K') ? (index + 2) : (index + 1));\n+                    doubleMetaphoneResult.append('K');\n+                    index = ((this.charAt(cleanInput, index + 1) == 'K') ? (index + 2) : (index + 1));\n                     continue;\n                 }\n                 case 'L': {\n-                    index = this.handleL(value, result, index);\n+                    index = this.handleL(cleanInput, doubleMetaphoneResult, index);\n                     continue;\n                 }\n                 case 'M': {\n-                    result.append('M');\n-                    index = (this.conditionM0(value, index) ? (index + 2) : (index + 1));\n+                    doubleMetaphoneResult.append('M');\n+                    index = (this.conditionM0(cleanInput, index) ? (index + 2) : (index + 1));\n                     continue;\n                 }\n                 case 'N': {\n-                    result.append('N');\n-                    index = ((this.charAt(value, index + 1) == 'N') ? (index + 2) : (index + 1));\n+                    doubleMetaphoneResult.append('N');\n+                    index = ((this.charAt(cleanInput, index + 1) == 'N') ? (index + 2) : (index + 1));\n                     continue;\n                 }\n                 case '\\u00d1': {\n-                    result.append('N');\n+                    doubleMetaphoneResult.append('N');\n                     ++index;\n                     continue;\n                 }\n                 case 'P': {\n-                    index = this.handleP(value, result, index);\n+                    index = this.handleP(cleanInput, doubleMetaphoneResult, index);\n                     continue;\n                 }\n                 case 'Q': {\n-                    result.append('K');\n-                    index = ((this.charAt(value, index + 1) == 'Q') ? (index + 2) : (index + 1));\n+                    doubleMetaphoneResult.append('K');\n+                    index = ((this.charAt(cleanInput, index + 1) == 'Q') ? (index + 2) : (index + 1));\n                     continue;\n                 }\n                 case 'R': {\n-                    index = this.handleR(value, result, index, slavoGermanic);\n+                    index = this.handleR(cleanInput, doubleMetaphoneResult, index, slavoGermanic);\n                     continue;\n                 }\n                 case 'S': {\n-                    index = this.handleS(value, result, index, slavoGermanic);\n+                    index = this.handleS(cleanInput, doubleMetaphoneResult, index, slavoGermanic);\n                     continue;\n                 }\n                 case 'T': {\n-                    index = this.handleT(value, result, index);\n+                    index = this.handleT(cleanInput, doubleMetaphoneResult, index);\n                     continue;\n                 }\n                 case 'V': {\n-                    result.append('F');\n-                    index = ((this.charAt(value, index + 1) == 'V') ? (index + 2) : (index + 1));\n+                    doubleMetaphoneResult.append('F');\n+                    index = ((this.charAt(cleanInput, index + 1) == 'V') ? (index + 2) : (index + 1));\n                     continue;\n                 }\n                 case 'W': {\n-                    index = this.handleW(value, result, index);\n+                    index = this.handleW(cleanInput, doubleMetaphoneResult, index);\n                     continue;\n                 }\n                 case 'X': {\n-                    index = this.handleX(value, result, index);\n+                    index = this.handleX(cleanInput, doubleMetaphoneResult, index);\n                     continue;\n                 }\n                 case 'Z': {\n-                    index = this.handleZ(value, result, index, slavoGermanic);\n+                    index = this.handleZ(cleanInput, doubleMetaphoneResult, index, slavoGermanic);\n                     continue;\n                 }\n                 default: {\n                     ++index;\n                     continue;\n                 }\n             }\n         }\n-        return alternate ? result.getAlternate() : result.getPrimary();\n+        return b ? doubleMetaphoneResult.getAlternate() : doubleMetaphoneResult.getPrimary();\n     }\n     \n-    public Object encode(final Object obj) throws EncoderException {\n-        if (!(obj instanceof String)) {\n+    public Object encode(final Object o) throws EncoderException {\n+        if (!(o instanceof String)) {\n             throw new EncoderException(\"DoubleMetaphone encode parameter is not of type String\");\n         }\n-        return this.doubleMetaphone((String)obj);\n+        return this.doubleMetaphone((String)o);\n     }\n     \n-    public String encode(final String value) {\n-        return this.doubleMetaphone(value);\n+    public String encode(final String s) {\n+        return this.doubleMetaphone(s);\n     }\n     \n-    public boolean isDoubleMetaphoneEqual(final String value1, final String value2) {\n-        return this.isDoubleMetaphoneEqual(value1, value2, false);\n+    public boolean isDoubleMetaphoneEqual(final String s, final String s2) {\n+        return this.isDoubleMetaphoneEqual(s, s2, false);\n     }\n     \n-    public boolean isDoubleMetaphoneEqual(final String value1, final String value2, final boolean alternate) {\n-        return StringUtils.equals((CharSequence)this.doubleMetaphone(value1, alternate), (CharSequence)this.doubleMetaphone(value2, alternate));\n+    public boolean isDoubleMetaphoneEqual(final String s, final String s2, final boolean b) {\n+        return StringUtils.equals((CharSequence)this.doubleMetaphone(s, b), (CharSequence)this.doubleMetaphone(s2, b));\n     }\n     \n     public int getMaxCodeLen() {\n         return this.maxCodeLen;\n     }\n     \n     public void setMaxCodeLen(final int maxCodeLen) {\n         this.maxCodeLen = maxCodeLen;\n     }\n     \n-    private int handleAEIOUY(final DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n-        if (index == 0) {\n-            result.append('A');\n+    private int handleAEIOUY(final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, final int n) {\n+        if (n == 0) {\n+            doubleMetaphoneResult.append('A');\n         }\n-        return index + 1;\n+        return n + 1;\n     }\n     \n-    private int handleC(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n-        if (this.conditionC0(value, index)) {\n-            result.append('K');\n-            index += 2;\n+    private int handleC(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, int handleCH) {\n+        if (this.conditionC0(s, handleCH)) {\n+            doubleMetaphoneResult.append('K');\n+            handleCH += 2;\n         }\n-        else if (index == 0 && contains(value, index, 6, \"CAESAR\")) {\n-            result.append('S');\n-            index += 2;\n+        else if (handleCH == 0 && contains(s, handleCH, 6, \"CAESAR\")) {\n+            doubleMetaphoneResult.append('S');\n+            handleCH += 2;\n         }\n-        else if (contains(value, index, 2, \"CH\")) {\n-            index = this.handleCH(value, result, index);\n+        else if (contains(s, handleCH, 2, \"CH\")) {\n+            handleCH = this.handleCH(s, doubleMetaphoneResult, handleCH);\n         }\n-        else if (contains(value, index, 2, \"CZ\") && !contains(value, index - 2, 4, \"WICZ\")) {\n-            result.append('S', 'X');\n-            index += 2;\n+        else if (contains(s, handleCH, 2, \"CZ\") && !contains(s, handleCH - 2, 4, \"WICZ\")) {\n+            doubleMetaphoneResult.append('S', 'X');\n+            handleCH += 2;\n         }\n-        else if (contains(value, index + 1, 3, \"CIA\")) {\n-            result.append('X');\n-            index += 3;\n+        else if (contains(s, handleCH + 1, 3, \"CIA\")) {\n+            doubleMetaphoneResult.append('X');\n+            handleCH += 3;\n         }\n         else {\n-            if (contains(value, index, 2, \"CC\") && (index != 1 || this.charAt(value, 0) != 'M')) {\n-                return this.handleCC(value, result, index);\n+            if (contains(s, handleCH, 2, \"CC\") && (handleCH != 1 || this.charAt(s, 0) != 'M')) {\n+                return this.handleCC(s, doubleMetaphoneResult, handleCH);\n             }\n-            if (contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n-                result.append('K');\n-                index += 2;\n+            if (contains(s, handleCH, 2, \"CK\", \"CG\", \"CQ\")) {\n+                doubleMetaphoneResult.append('K');\n+                handleCH += 2;\n             }\n-            else if (contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n-                if (contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n-                    result.append('S', 'X');\n+            else if (contains(s, handleCH, 2, \"CI\", \"CE\", \"CY\")) {\n+                if (contains(s, handleCH, 3, \"CIO\", \"CIE\", \"CIA\")) {\n+                    doubleMetaphoneResult.append('S', 'X');\n                 }\n                 else {\n-                    result.append('S');\n+                    doubleMetaphoneResult.append('S');\n                 }\n-                index += 2;\n+                handleCH += 2;\n             }\n             else {\n-                result.append('K');\n-                if (contains(value, index + 1, 2, \" C\", \" Q\", \" G\")) {\n-                    index += 3;\n+                doubleMetaphoneResult.append('K');\n+                if (contains(s, handleCH + 1, 2, \" C\", \" Q\", \" G\")) {\n+                    handleCH += 3;\n                 }\n-                else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index + 1, 2, \"CE\", \"CI\")) {\n-                    index += 2;\n+                else if (contains(s, handleCH + 1, 1, \"C\", \"K\", \"Q\") && !contains(s, handleCH + 1, 2, \"CE\", \"CI\")) {\n+                    handleCH += 2;\n                 }\n                 else {\n-                    ++index;\n+                    ++handleCH;\n                 }\n             }\n         }\n-        return index;\n+        return handleCH;\n     }\n     \n-    private int handleCC(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n-        if (contains(value, index + 2, 1, \"I\", \"E\", \"H\") && !contains(value, index + 2, 2, \"HU\")) {\n-            if ((index == 1 && this.charAt(value, index - 1) == 'A') || contains(value, index - 1, 5, \"UCCEE\", \"UCCES\")) {\n-                result.append(\"KS\");\n+    private int handleCC(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, int n) {\n+        if (contains(s, n + 2, 1, \"I\", \"E\", \"H\") && !contains(s, n + 2, 2, \"HU\")) {\n+            if ((n == 1 && this.charAt(s, n - 1) == 'A') || contains(s, n - 1, 5, \"UCCEE\", \"UCCES\")) {\n+                doubleMetaphoneResult.append(\"KS\");\n             }\n             else {\n-                result.append('X');\n+                doubleMetaphoneResult.append('X');\n             }\n-            index += 3;\n+            n += 3;\n         }\n         else {\n-            result.append('K');\n-            index += 2;\n+            doubleMetaphoneResult.append('K');\n+            n += 2;\n         }\n-        return index;\n+        return n;\n     }\n     \n-    private int handleCH(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n-        if (index > 0 && contains(value, index, 4, \"CHAE\")) {\n-            result.append('K', 'X');\n-            return index + 2;\n+    private int handleCH(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, final int n) {\n+        if (n > 0 && contains(s, n, 4, \"CHAE\")) {\n+            doubleMetaphoneResult.append('K', 'X');\n+            return n + 2;\n         }\n-        if (this.conditionCH0(value, index)) {\n-            result.append('K');\n-            return index + 2;\n+        if (this.conditionCH0(s, n)) {\n+            doubleMetaphoneResult.append('K');\n+            return n + 2;\n         }\n-        if (this.conditionCH1(value, index)) {\n-            result.append('K');\n-            return index + 2;\n+        if (this.conditionCH1(s, n)) {\n+            doubleMetaphoneResult.append('K');\n+            return n + 2;\n         }\n-        if (index > 0) {\n-            if (contains(value, 0, 2, \"MC\")) {\n-                result.append('K');\n+        if (n > 0) {\n+            if (contains(s, 0, 2, \"MC\")) {\n+                doubleMetaphoneResult.append('K');\n             }\n             else {\n-                result.append('X', 'K');\n+                doubleMetaphoneResult.append('X', 'K');\n             }\n         }\n         else {\n-            result.append('X');\n+            doubleMetaphoneResult.append('X');\n         }\n-        return index + 2;\n+        return n + 2;\n     }\n     \n-    private int handleD(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n-        if (contains(value, index, 2, \"DG\")) {\n-            if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) {\n-                result.append('J');\n-                index += 3;\n+    private int handleD(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, int n) {\n+        if (contains(s, n, 2, \"DG\")) {\n+            if (contains(s, n + 2, 1, \"I\", \"E\", \"Y\")) {\n+                doubleMetaphoneResult.append('J');\n+                n += 3;\n             }\n             else {\n-                result.append(\"TK\");\n-                index += 2;\n+                doubleMetaphoneResult.append(\"TK\");\n+                n += 2;\n             }\n         }\n-        else if (contains(value, index, 2, \"DT\", \"DD\")) {\n-            result.append('T');\n-            index += 2;\n+        else if (contains(s, n, 2, \"DT\", \"DD\")) {\n+            doubleMetaphoneResult.append('T');\n+            n += 2;\n         }\n         else {\n-            result.append('T');\n-            ++index;\n+            doubleMetaphoneResult.append('T');\n+            ++n;\n         }\n-        return index;\n+        return n;\n     }\n     \n-    private int handleG(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n-        if (this.charAt(value, index + 1) == 'H') {\n-            index = this.handleGH(value, result, index);\n+    private int handleG(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, int handleGH, final boolean b) {\n+        if (this.charAt(s, handleGH + 1) == 'H') {\n+            handleGH = this.handleGH(s, doubleMetaphoneResult, handleGH);\n         }\n-        else if (this.charAt(value, index + 1) == 'N') {\n-            if (index == 1 && this.isVowel(this.charAt(value, 0)) && !slavoGermanic) {\n-                result.append(\"KN\", \"N\");\n+        else if (this.charAt(s, handleGH + 1) == 'N') {\n+            if (handleGH == 1 && this.isVowel(this.charAt(s, 0)) && !b) {\n+                doubleMetaphoneResult.append(\"KN\", \"N\");\n             }\n-            else if (!contains(value, index + 2, 2, \"EY\") && this.charAt(value, index + 1) != 'Y' && !slavoGermanic) {\n-                result.append(\"N\", \"KN\");\n+            else if (!contains(s, handleGH + 2, 2, \"EY\") && this.charAt(s, handleGH + 1) != 'Y' && !b) {\n+                doubleMetaphoneResult.append(\"N\", \"KN\");\n             }\n             else {\n-                result.append(\"KN\");\n+                doubleMetaphoneResult.append(\"KN\");\n             }\n-            index += 2;\n+            handleGH += 2;\n         }\n-        else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n-            result.append(\"KL\", \"L\");\n-            index += 2;\n+        else if (contains(s, handleGH + 1, 2, \"LI\") && !b) {\n+            doubleMetaphoneResult.append(\"KL\", \"L\");\n+            handleGH += 2;\n         }\n-        else if (index == 0 && (this.charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, DoubleMetaphone.ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n-            result.append('K', 'J');\n-            index += 2;\n+        else if (handleGH == 0 && (this.charAt(s, handleGH + 1) == 'Y' || contains(s, handleGH + 1, 2, DoubleMetaphone.ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n+            doubleMetaphoneResult.append('K', 'J');\n+            handleGH += 2;\n         }\n-        else if ((contains(value, index + 1, 2, \"ER\") || this.charAt(value, index + 1) == 'Y') && !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") && !contains(value, index - 1, 1, \"E\", \"I\") && !contains(value, index - 1, 3, \"RGY\", \"OGY\")) {\n-            result.append('K', 'J');\n-            index += 2;\n+        else if ((contains(s, handleGH + 1, 2, \"ER\") || this.charAt(s, handleGH + 1) == 'Y') && !contains(s, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") && !contains(s, handleGH - 1, 1, \"E\", \"I\") && !contains(s, handleGH - 1, 3, \"RGY\", \"OGY\")) {\n+            doubleMetaphoneResult.append('K', 'J');\n+            handleGH += 2;\n         }\n-        else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) {\n-            if (contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\") || contains(value, index + 1, 2, \"ET\")) {\n-                result.append('K');\n+        else if (contains(s, handleGH + 1, 1, \"E\", \"I\", \"Y\") || contains(s, handleGH - 1, 4, \"AGGI\", \"OGGI\")) {\n+            if (contains(s, 0, 4, \"VAN \", \"VON \") || contains(s, 0, 3, \"SCH\") || contains(s, handleGH + 1, 2, \"ET\")) {\n+                doubleMetaphoneResult.append('K');\n             }\n-            else if (contains(value, index + 1, 3, \"IER\")) {\n-                result.append('J');\n+            else if (contains(s, handleGH + 1, 3, \"IER\")) {\n+                doubleMetaphoneResult.append('J');\n             }\n             else {\n-                result.append('J', 'K');\n+                doubleMetaphoneResult.append('J', 'K');\n             }\n-            index += 2;\n+            handleGH += 2;\n         }\n-        else if (this.charAt(value, index + 1) == 'G') {\n-            index += 2;\n-            result.append('K');\n+        else if (this.charAt(s, handleGH + 1) == 'G') {\n+            handleGH += 2;\n+            doubleMetaphoneResult.append('K');\n         }\n         else {\n-            ++index;\n-            result.append('K');\n+            ++handleGH;\n+            doubleMetaphoneResult.append('K');\n         }\n-        return index;\n+        return handleGH;\n     }\n     \n-    private int handleGH(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n-        if (index > 0 && !this.isVowel(this.charAt(value, index - 1))) {\n-            result.append('K');\n-            index += 2;\n+    private int handleGH(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, int n) {\n+        if (n > 0 && !this.isVowel(this.charAt(s, n - 1))) {\n+            doubleMetaphoneResult.append('K');\n+            n += 2;\n         }\n-        else if (index == 0) {\n-            if (this.charAt(value, index + 2) == 'I') {\n-                result.append('J');\n+        else if (n == 0) {\n+            if (this.charAt(s, n + 2) == 'I') {\n+                doubleMetaphoneResult.append('J');\n             }\n             else {\n-                result.append('K');\n+                doubleMetaphoneResult.append('K');\n             }\n-            index += 2;\n+            n += 2;\n         }\n-        else if ((index > 1 && contains(value, index - 2, 1, \"B\", \"H\", \"D\")) || (index > 2 && contains(value, index - 3, 1, \"B\", \"H\", \"D\")) || (index > 3 && contains(value, index - 4, 1, \"B\", \"H\"))) {\n-            index += 2;\n+        else if ((n > 1 && contains(s, n - 2, 1, \"B\", \"H\", \"D\")) || (n > 2 && contains(s, n - 3, 1, \"B\", \"H\", \"D\")) || (n > 3 && contains(s, n - 4, 1, \"B\", \"H\"))) {\n+            n += 2;\n         }\n         else {\n-            if (index > 2 && this.charAt(value, index - 1) == 'U' && contains(value, index - 3, 1, \"C\", \"G\", \"L\", \"R\", \"T\")) {\n-                result.append('F');\n+            if (n > 2 && this.charAt(s, n - 1) == 'U' && contains(s, n - 3, 1, \"C\", \"G\", \"L\", \"R\", \"T\")) {\n+                doubleMetaphoneResult.append('F');\n             }\n-            else if (index > 0 && this.charAt(value, index - 1) != 'I') {\n-                result.append('K');\n+            else if (n > 0 && this.charAt(s, n - 1) != 'I') {\n+                doubleMetaphoneResult.append('K');\n             }\n-            index += 2;\n+            n += 2;\n         }\n-        return index;\n+        return n;\n     }\n     \n-    private int handleH(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n-        if ((index == 0 || this.isVowel(this.charAt(value, index - 1))) && this.isVowel(this.charAt(value, index + 1))) {\n-            result.append('H');\n-            index += 2;\n+    private int handleH(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, int n) {\n+        if ((n == 0 || this.isVowel(this.charAt(s, n - 1))) && this.isVowel(this.charAt(s, n + 1))) {\n+            doubleMetaphoneResult.append('H');\n+            n += 2;\n         }\n         else {\n-            ++index;\n+            ++n;\n         }\n-        return index;\n+        return n;\n     }\n     \n-    private int handleJ(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n-        if (contains(value, index, 4, \"JOSE\") || contains(value, 0, 4, \"SAN \")) {\n-            if ((index == 0 && this.charAt(value, index + 4) == ' ') || value.length() == 4 || contains(value, 0, 4, \"SAN \")) {\n-                result.append('H');\n+    private int handleJ(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, int n, final boolean b) {\n+        if (contains(s, n, 4, \"JOSE\") || contains(s, 0, 4, \"SAN \")) {\n+            if ((n == 0 && this.charAt(s, n + 4) == ' ') || s.length() == 4 || contains(s, 0, 4, \"SAN \")) {\n+                doubleMetaphoneResult.append('H');\n             }\n             else {\n-                result.append('J', 'H');\n+                doubleMetaphoneResult.append('J', 'H');\n             }\n-            ++index;\n+            ++n;\n         }\n         else {\n-            if (index == 0 && !contains(value, index, 4, \"JOSE\")) {\n-                result.append('J', 'A');\n+            if (n == 0 && !contains(s, n, 4, \"JOSE\")) {\n+                doubleMetaphoneResult.append('J', 'A');\n             }\n-            else if (this.isVowel(this.charAt(value, index - 1)) && !slavoGermanic && (this.charAt(value, index + 1) == 'A' || this.charAt(value, index + 1) == 'O')) {\n-                result.append('J', 'H');\n+            else if (this.isVowel(this.charAt(s, n - 1)) && !b && (this.charAt(s, n + 1) == 'A' || this.charAt(s, n + 1) == 'O')) {\n+                doubleMetaphoneResult.append('J', 'H');\n             }\n-            else if (index == value.length() - 1) {\n-                result.append('J', ' ');\n+            else if (n == s.length() - 1) {\n+                doubleMetaphoneResult.append('J', ' ');\n             }\n-            else if (!contains(value, index + 1, 1, DoubleMetaphone.L_T_K_S_N_M_B_Z) && !contains(value, index - 1, 1, \"S\", \"K\", \"L\")) {\n-                result.append('J');\n+            else if (!contains(s, n + 1, 1, DoubleMetaphone.L_T_K_S_N_M_B_Z) && !contains(s, n - 1, 1, \"S\", \"K\", \"L\")) {\n+                doubleMetaphoneResult.append('J');\n             }\n-            if (this.charAt(value, index + 1) == 'J') {\n-                index += 2;\n+            if (this.charAt(s, n + 1) == 'J') {\n+                n += 2;\n             }\n             else {\n-                ++index;\n+                ++n;\n             }\n         }\n-        return index;\n+        return n;\n     }\n     \n-    private int handleL(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n-        if (this.charAt(value, index + 1) == 'L') {\n-            if (this.conditionL0(value, index)) {\n-                result.appendPrimary('L');\n+    private int handleL(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, int n) {\n+        if (this.charAt(s, n + 1) == 'L') {\n+            if (this.conditionL0(s, n)) {\n+                doubleMetaphoneResult.appendPrimary('L');\n             }\n             else {\n-                result.append('L');\n+                doubleMetaphoneResult.append('L');\n             }\n-            index += 2;\n+            n += 2;\n         }\n         else {\n-            ++index;\n-            result.append('L');\n+            ++n;\n+            doubleMetaphoneResult.append('L');\n         }\n-        return index;\n+        return n;\n     }\n     \n-    private int handleP(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n-        if (this.charAt(value, index + 1) == 'H') {\n-            result.append('F');\n-            index += 2;\n+    private int handleP(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, int n) {\n+        if (this.charAt(s, n + 1) == 'H') {\n+            doubleMetaphoneResult.append('F');\n+            n += 2;\n         }\n         else {\n-            result.append('P');\n-            index = (contains(value, index + 1, 1, \"P\", \"B\") ? (index + 2) : (index + 1));\n+            doubleMetaphoneResult.append('P');\n+            n = (contains(s, n + 1, 1, \"P\", \"B\") ? (n + 2) : (n + 1));\n         }\n-        return index;\n+        return n;\n     }\n     \n-    private int handleR(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, final int index, final boolean slavoGermanic) {\n-        if (index == value.length() - 1 && !slavoGermanic && contains(value, index - 2, 2, \"IE\") && !contains(value, index - 4, 2, \"ME\", \"MA\")) {\n-            result.appendAlternate('R');\n+    private int handleR(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, final int n, final boolean b) {\n+        if (n == s.length() - 1 && !b && contains(s, n - 2, 2, \"IE\") && !contains(s, n - 4, 2, \"ME\", \"MA\")) {\n+            doubleMetaphoneResult.appendAlternate('R');\n         }\n         else {\n-            result.append('R');\n+            doubleMetaphoneResult.append('R');\n         }\n-        return (this.charAt(value, index + 1) == 'R') ? (index + 2) : (index + 1);\n+        return (this.charAt(s, n + 1) == 'R') ? (n + 2) : (n + 1);\n     }\n     \n-    private int handleS(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n-        if (contains(value, index - 1, 3, \"ISL\", \"YSL\")) {\n-            ++index;\n+    private int handleS(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, int handleSC, final boolean b) {\n+        if (contains(s, handleSC - 1, 3, \"ISL\", \"YSL\")) {\n+            ++handleSC;\n         }\n-        else if (index == 0 && contains(value, index, 5, \"SUGAR\")) {\n-            result.append('X', 'S');\n-            ++index;\n+        else if (handleSC == 0 && contains(s, handleSC, 5, \"SUGAR\")) {\n+            doubleMetaphoneResult.append('X', 'S');\n+            ++handleSC;\n         }\n-        else if (contains(value, index, 2, \"SH\")) {\n-            if (contains(value, index + 1, 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n-                result.append('S');\n+        else if (contains(s, handleSC, 2, \"SH\")) {\n+            if (contains(s, handleSC + 1, 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n+                doubleMetaphoneResult.append('S');\n             }\n             else {\n-                result.append('X');\n+                doubleMetaphoneResult.append('X');\n             }\n-            index += 2;\n+            handleSC += 2;\n         }\n-        else if (contains(value, index, 3, \"SIO\", \"SIA\") || contains(value, index, 4, \"SIAN\")) {\n-            if (slavoGermanic) {\n-                result.append('S');\n+        else if (contains(s, handleSC, 3, \"SIO\", \"SIA\") || contains(s, handleSC, 4, \"SIAN\")) {\n+            if (b) {\n+                doubleMetaphoneResult.append('S');\n             }\n             else {\n-                result.append('S', 'X');\n+                doubleMetaphoneResult.append('S', 'X');\n             }\n-            index += 3;\n+            handleSC += 3;\n         }\n-        else if ((index == 0 && contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) || contains(value, index + 1, 1, \"Z\")) {\n-            result.append('S', 'X');\n-            index = (contains(value, index + 1, 1, \"Z\") ? (index + 2) : (index + 1));\n+        else if ((handleSC == 0 && contains(s, handleSC + 1, 1, \"M\", \"N\", \"L\", \"W\")) || contains(s, handleSC + 1, 1, \"Z\")) {\n+            doubleMetaphoneResult.append('S', 'X');\n+            handleSC = (contains(s, handleSC + 1, 1, \"Z\") ? (handleSC + 2) : (handleSC + 1));\n         }\n-        else if (contains(value, index, 2, \"SC\")) {\n-            index = this.handleSC(value, result, index);\n+        else if (contains(s, handleSC, 2, \"SC\")) {\n+            handleSC = this.handleSC(s, doubleMetaphoneResult, handleSC);\n         }\n         else {\n-            if (index == value.length() - 1 && contains(value, index - 2, 2, \"AI\", \"OI\")) {\n-                result.appendAlternate('S');\n+            if (handleSC == s.length() - 1 && contains(s, handleSC - 2, 2, \"AI\", \"OI\")) {\n+                doubleMetaphoneResult.appendAlternate('S');\n             }\n             else {\n-                result.append('S');\n+                doubleMetaphoneResult.append('S');\n             }\n-            index = (contains(value, index + 1, 1, \"S\", \"Z\") ? (index + 2) : (index + 1));\n+            handleSC = (contains(s, handleSC + 1, 1, \"S\", \"Z\") ? (handleSC + 2) : (handleSC + 1));\n         }\n-        return index;\n+        return handleSC;\n     }\n     \n-    private int handleSC(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, final int index) {\n-        if (this.charAt(value, index + 2) == 'H') {\n-            if (contains(value, index + 3, 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n-                if (contains(value, index + 3, 2, \"ER\", \"EN\")) {\n-                    result.append(\"X\", \"SK\");\n+    private int handleSC(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, final int n) {\n+        if (this.charAt(s, n + 2) == 'H') {\n+            if (contains(s, n + 3, 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n+                if (contains(s, n + 3, 2, \"ER\", \"EN\")) {\n+                    doubleMetaphoneResult.append(\"X\", \"SK\");\n                 }\n                 else {\n-                    result.append(\"SK\");\n+                    doubleMetaphoneResult.append(\"SK\");\n                 }\n             }\n-            else if (index == 0 && !this.isVowel(this.charAt(value, 3)) && this.charAt(value, 3) != 'W') {\n-                result.append('X', 'S');\n+            else if (n == 0 && !this.isVowel(this.charAt(s, 3)) && this.charAt(s, 3) != 'W') {\n+                doubleMetaphoneResult.append('X', 'S');\n             }\n             else {\n-                result.append('X');\n+                doubleMetaphoneResult.append('X');\n             }\n         }\n-        else if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) {\n-            result.append('S');\n+        else if (contains(s, n + 2, 1, \"I\", \"E\", \"Y\")) {\n+            doubleMetaphoneResult.append('S');\n         }\n         else {\n-            result.append(\"SK\");\n+            doubleMetaphoneResult.append(\"SK\");\n         }\n-        return index + 3;\n+        return n + 3;\n     }\n     \n-    private int handleT(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n-        if (contains(value, index, 4, \"TION\") || contains(value, index, 3, \"TIA\", \"TCH\")) {\n-            result.append('X');\n-            index += 3;\n+    private int handleT(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, int n) {\n+        if (contains(s, n, 4, \"TION\") || contains(s, n, 3, \"TIA\", \"TCH\")) {\n+            doubleMetaphoneResult.append('X');\n+            n += 3;\n         }\n-        else if (contains(value, index, 2, \"TH\") || contains(value, index, 3, \"TTH\")) {\n-            if (contains(value, index + 2, 2, \"OM\", \"AM\") || contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) {\n-                result.append('T');\n+        else if (contains(s, n, 2, \"TH\") || contains(s, n, 3, \"TTH\")) {\n+            if (contains(s, n + 2, 2, \"OM\", \"AM\") || contains(s, 0, 4, \"VAN \", \"VON \") || contains(s, 0, 3, \"SCH\")) {\n+                doubleMetaphoneResult.append('T');\n             }\n             else {\n-                result.append('0', 'T');\n+                doubleMetaphoneResult.append('0', 'T');\n             }\n-            index += 2;\n+            n += 2;\n         }\n         else {\n-            result.append('T');\n-            index = (contains(value, index + 1, 1, \"T\", \"D\") ? (index + 2) : (index + 1));\n+            doubleMetaphoneResult.append('T');\n+            n = (contains(s, n + 1, 1, \"T\", \"D\") ? (n + 2) : (n + 1));\n         }\n-        return index;\n+        return n;\n     }\n     \n-    private int handleW(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n-        if (contains(value, index, 2, \"WR\")) {\n-            result.append('R');\n-            index += 2;\n+    private int handleW(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, int n) {\n+        if (contains(s, n, 2, \"WR\")) {\n+            doubleMetaphoneResult.append('R');\n+            n += 2;\n         }\n-        else if (index == 0 && (this.isVowel(this.charAt(value, index + 1)) || contains(value, index, 2, \"WH\"))) {\n-            if (this.isVowel(this.charAt(value, index + 1))) {\n-                result.append('A', 'F');\n+        else if (n == 0 && (this.isVowel(this.charAt(s, n + 1)) || contains(s, n, 2, \"WH\"))) {\n+            if (this.isVowel(this.charAt(s, n + 1))) {\n+                doubleMetaphoneResult.append('A', 'F');\n             }\n             else {\n-                result.append('A');\n+                doubleMetaphoneResult.append('A');\n             }\n-            ++index;\n+            ++n;\n         }\n-        else if ((index == value.length() - 1 && this.isVowel(this.charAt(value, index - 1))) || contains(value, index - 1, 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") || contains(value, 0, 3, \"SCH\")) {\n-            result.appendAlternate('F');\n-            ++index;\n+        else if ((n == s.length() - 1 && this.isVowel(this.charAt(s, n - 1))) || contains(s, n - 1, 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") || contains(s, 0, 3, \"SCH\")) {\n+            doubleMetaphoneResult.appendAlternate('F');\n+            ++n;\n         }\n-        else if (contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n-            result.append(\"TS\", \"FX\");\n-            index += 4;\n+        else if (contains(s, n, 4, \"WICZ\", \"WITZ\")) {\n+            doubleMetaphoneResult.append(\"TS\", \"FX\");\n+            n += 4;\n         }\n         else {\n-            ++index;\n+            ++n;\n         }\n-        return index;\n+        return n;\n     }\n     \n-    private int handleX(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, int index) {\n-        if (index == 0) {\n-            result.append('S');\n-            ++index;\n+    private int handleX(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, int n) {\n+        if (n == 0) {\n+            doubleMetaphoneResult.append('S');\n+            ++n;\n         }\n         else {\n-            if (index != value.length() - 1 || (!contains(value, index - 3, 3, \"IAU\", \"EAU\") && !contains(value, index - 2, 2, \"AU\", \"OU\"))) {\n-                result.append(\"KS\");\n+            if (n != s.length() - 1 || (!contains(s, n - 3, 3, \"IAU\", \"EAU\") && !contains(s, n - 2, 2, \"AU\", \"OU\"))) {\n+                doubleMetaphoneResult.append(\"KS\");\n             }\n-            index = (contains(value, index + 1, 1, \"C\", \"X\") ? (index + 2) : (index + 1));\n+            n = (contains(s, n + 1, 1, \"C\", \"X\") ? (n + 2) : (n + 1));\n         }\n-        return index;\n+        return n;\n     }\n     \n-    private int handleZ(final String value, final DoubleMetaphone.DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {\n-        if (this.charAt(value, index + 1) == 'H') {\n-            result.append('J');\n-            index += 2;\n+    private int handleZ(final String s, final DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult, int n, final boolean b) {\n+        if (this.charAt(s, n + 1) == 'H') {\n+            doubleMetaphoneResult.append('J');\n+            n += 2;\n         }\n         else {\n-            if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") || (slavoGermanic && index > 0 && this.charAt(value, index - 1) != 'T')) {\n-                result.append(\"S\", \"TS\");\n+            if (contains(s, n + 1, 2, \"ZO\", \"ZI\", \"ZA\") || (b && n > 0 && this.charAt(s, n - 1) != 'T')) {\n+                doubleMetaphoneResult.append(\"S\", \"TS\");\n             }\n             else {\n-                result.append('S');\n+                doubleMetaphoneResult.append('S');\n             }\n-            index = ((this.charAt(value, index + 1) == 'Z') ? (index + 2) : (index + 1));\n+            n = ((this.charAt(s, n + 1) == 'Z') ? (n + 2) : (n + 1));\n         }\n-        return index;\n+        return n;\n     }\n     \n-    private boolean conditionC0(final String value, final int index) {\n-        if (contains(value, index, 4, \"CHIA\")) {\n+    private boolean conditionC0(final String s, final int n) {\n+        if (contains(s, n, 4, \"CHIA\")) {\n             return true;\n         }\n-        if (index <= 1) {\n+        if (n <= 1) {\n             return false;\n         }\n-        if (this.isVowel(this.charAt(value, index - 2))) {\n+        if (this.isVowel(this.charAt(s, n - 2))) {\n             return false;\n         }\n-        if (!contains(value, index - 1, 3, \"ACH\")) {\n+        if (!contains(s, n - 1, 3, \"ACH\")) {\n             return false;\n         }\n-        final char c = this.charAt(value, index + 2);\n-        return (c != 'I' && c != 'E') || contains(value, index - 2, 6, \"BACHER\", \"MACHER\");\n+        final char char1 = this.charAt(s, n + 2);\n+        return (char1 != 'I' && char1 != 'E') || contains(s, n - 2, 6, \"BACHER\", \"MACHER\");\n     }\n     \n-    private boolean conditionCH0(final String value, final int index) {\n-        return index == 0 && (contains(value, index + 1, 5, \"HARAC\", \"HARIS\") || contains(value, index + 1, 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")) && !contains(value, 0, 5, \"CHORE\");\n+    private boolean conditionCH0(final String s, final int n) {\n+        return n == 0 && (contains(s, n + 1, 5, \"HARAC\", \"HARIS\") || contains(s, n + 1, 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")) && !contains(s, 0, 5, \"CHORE\");\n     }\n     \n-    private boolean conditionCH1(final String value, final int index) {\n-        return contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\") || contains(value, index - 2, 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\") || contains(value, index + 2, 1, \"T\", \"S\") || ((contains(value, index - 1, 1, \"A\", \"O\", \"U\", \"E\") || index == 0) && (contains(value, index + 2, 1, DoubleMetaphone.L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1));\n+    private boolean conditionCH1(final String s, final int n) {\n+        return contains(s, 0, 4, \"VAN \", \"VON \") || contains(s, 0, 3, \"SCH\") || contains(s, n - 2, 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\") || contains(s, n + 2, 1, \"T\", \"S\") || ((contains(s, n - 1, 1, \"A\", \"O\", \"U\", \"E\") || n == 0) && (contains(s, n + 2, 1, DoubleMetaphone.L_R_N_M_B_H_F_V_W_SPACE) || n + 1 == s.length() - 1));\n     }\n     \n-    private boolean conditionL0(final String value, final int index) {\n-        return (index == value.length() - 3 && contains(value, index - 1, 4, \"ILLO\", \"ILLA\", \"ALLE\")) || ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") || contains(value, value.length() - 1, 1, \"A\", \"O\")) && contains(value, index - 1, 4, \"ALLE\"));\n+    private boolean conditionL0(final String s, final int n) {\n+        return (n == s.length() - 3 && contains(s, n - 1, 4, \"ILLO\", \"ILLA\", \"ALLE\")) || ((contains(s, s.length() - 2, 2, \"AS\", \"OS\") || contains(s, s.length() - 1, 1, \"A\", \"O\")) && contains(s, n - 1, 4, \"ALLE\"));\n     }\n     \n-    private boolean conditionM0(final String value, final int index) {\n-        return this.charAt(value, index + 1) == 'M' || (contains(value, index - 1, 3, \"UMB\") && (index + 1 == value.length() - 1 || contains(value, index + 2, 2, \"ER\")));\n+    private boolean conditionM0(final String s, final int n) {\n+        return this.charAt(s, n + 1) == 'M' || (contains(s, n - 1, 3, \"UMB\") && (n + 1 == s.length() - 1 || contains(s, n + 2, 2, \"ER\")));\n     }\n     \n-    private boolean isSlavoGermanic(final String value) {\n-        return value.indexOf(87) > -1 || value.indexOf(75) > -1 || value.contains(\"CZ\") || value.contains(\"WITZ\");\n+    private boolean isSlavoGermanic(final String s) {\n+        return s.indexOf(87) > -1 || s.indexOf(75) > -1 || s.contains(\"CZ\") || s.contains(\"WITZ\");\n     }\n     \n     private boolean isVowel(final char ch) {\n         return \"AEIOUY\".indexOf(ch) != -1;\n     }\n     \n-    private boolean isSilentStart(final String value) {\n-        boolean result = false;\n-        for (final String element : DoubleMetaphone.SILENT_START) {\n-            if (value.startsWith(element)) {\n-                result = true;\n+    private boolean isSilentStart(final String s) {\n+        boolean b = false;\n+        final String[] silent_START = DoubleMetaphone.SILENT_START;\n+        for (int length = silent_START.length, i = 0; i < length; ++i) {\n+            if (s.startsWith(silent_START[i])) {\n+                b = true;\n                 break;\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private String cleanInput(String input) {\n-        if (input == null) {\n+    private String cleanInput(String trim) {\n+        if (trim == null) {\n             return null;\n         }\n-        input = input.trim();\n-        if (input.isEmpty()) {\n+        trim = trim.trim();\n+        if (trim.isEmpty()) {\n             return null;\n         }\n-        return input.toUpperCase(Locale.ENGLISH);\n+        return trim.toUpperCase(Locale.ENGLISH);\n     }\n     \n-    protected char charAt(final String value, final int index) {\n-        if (index < 0 || index >= value.length()) {\n+    protected char charAt(final String s, final int index) {\n+        if (index < 0 || index >= s.length()) {\n             return '\\0';\n         }\n-        return value.charAt(index);\n+        return s.charAt(index);\n     }\n     \n-    protected static boolean contains(final String value, final int start, final int length, final String... criteria) {\n-        boolean result = false;\n-        if (start >= 0 && start + length <= value.length()) {\n-            final String target = value.substring(start, start + length);\n-            for (final String element : criteria) {\n-                if (target.equals(element)) {\n-                    result = true;\n+    protected static boolean contains(final String s, final int beginIndex, final int n, final String... array) {\n+        boolean b = false;\n+        if (beginIndex >= 0 && beginIndex + n <= s.length()) {\n+            final String substring = s.substring(beginIndex, beginIndex + n);\n+            for (int length = array.length, i = 0; i < length; ++i) {\n+                if (substring.equals(array[i])) {\n+                    b = true;\n                     break;\n                 }\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n     static {\n         SILENT_START = new String[] { \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };\n         L_R_N_M_B_H_F_V_W_SPACE = new String[] { \"L\", \"R\", \"N\", \"M\", \"B\", \"H\", \"F\", \"V\", \"W\", \" \" };\n         ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER = new String[] { \"ES\", \"EP\", \"EB\", \"EL\", \"EY\", \"IB\", \"IL\", \"IN\", \"IE\", \"EI\", \"ER\" };\n         L_T_K_S_N_M_B_Z = new String[] { \"L\", \"T\", \"K\", \"S\", \"N\", \"M\", \"B\", \"Z\" };\n"}]}
