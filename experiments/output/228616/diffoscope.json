{"diffoscope-json-version": 1, "source1": "first/MurmurHash2.class", "source2": "second/MurmurHash2.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,117 +9,101 @@\n     private static final int R32 = 24;\n     private static final long M64 = -4132994306676758123L;\n     private static final int R64 = 47;\n     \n     private MurmurHash2() {\n     }\n     \n-    public static int hash32(final byte[] data, final int length, final int seed) {\n-        int h = seed ^ length;\n-        final int nblocks = length >> 2;\n-        for (int i = 0; i < nblocks; ++i) {\n-            final int index = i << 2;\n-            int k = getLittleEndianInt(data, index);\n-            k *= 1540483477;\n-            k ^= k >>> 24;\n-            k *= 1540483477;\n-            h *= 1540483477;\n-            h ^= k;\n+    public static int hash32(final byte[] array, final int n, final int n2) {\n+        int n3 = n2 ^ n;\n+        final int n4 = n >> 2;\n+        for (int i = 0; i < n4; ++i) {\n+            final int n5 = getLittleEndianInt(array, i << 2) * 1540483477;\n+            n3 = (n3 * 1540483477 ^ (n5 ^ n5 >>> 24) * 1540483477);\n         }\n-        final int index2 = nblocks << 2;\n-        switch (length - index2) {\n+        final int n6 = n4 << 2;\n+        switch (n - n6) {\n             case 3: {\n-                h ^= (data[index2 + 2] & 0xFF) << 16;\n+                n3 ^= (array[n6 + 2] & 0xFF) << 16;\n             }\n             case 2: {\n-                h ^= (data[index2 + 1] & 0xFF) << 8;\n+                n3 ^= (array[n6 + 1] & 0xFF) << 8;\n             }\n             case 1: {\n-                h ^= (data[index2] & 0xFF);\n-                h *= 1540483477;\n+                n3 = (n3 ^ (array[n6] & 0xFF)) * 1540483477;\n                 break;\n             }\n         }\n-        h ^= h >>> 13;\n-        h *= 1540483477;\n-        h ^= h >>> 15;\n-        return h;\n+        final int n7 = (n3 ^ n3 >>> 13) * 1540483477;\n+        return n7 ^ n7 >>> 15;\n     }\n     \n-    public static int hash32(final byte[] data, final int length) {\n-        return hash32(data, length, -1756908916);\n+    public static int hash32(final byte[] array, final int n) {\n+        return hash32(array, n, -1756908916);\n     }\n     \n-    public static int hash32(final String text) {\n-        final byte[] bytes = StringUtils.getBytesUtf8(text);\n-        return hash32(bytes, bytes.length);\n+    public static int hash32(final String s) {\n+        final byte[] bytesUtf8 = StringUtils.getBytesUtf8(s);\n+        return hash32(bytesUtf8, bytesUtf8.length);\n     }\n     \n-    public static int hash32(final String text, final int from, final int length) {\n-        return hash32(text.substring(from, from + length));\n+    public static int hash32(final String s, final int beginIndex, final int n) {\n+        return hash32(s.substring(beginIndex, beginIndex + n));\n     }\n     \n-    public static long hash64(final byte[] data, final int length, final int seed) {\n-        long h = ((long)seed & 0xFFFFFFFFL) ^ length * -4132994306676758123L;\n-        final int nblocks = length >> 3;\n-        for (int i = 0; i < nblocks; ++i) {\n-            final int index = i << 3;\n-            long k = getLittleEndianLong(data, index);\n-            k *= -4132994306676758123L;\n-            k ^= k >>> 47;\n-            k *= -4132994306676758123L;\n-            h ^= k;\n-            h *= -4132994306676758123L;\n+    public static long hash64(final byte[] array, final int n, final int n2) {\n+        long n3 = ((long)n2 & 0xFFFFFFFFL) ^ n * -4132994306676758123L;\n+        final int n4 = n >> 3;\n+        for (int i = 0; i < n4; ++i) {\n+            final long n5 = getLittleEndianLong(array, i << 3) * -4132994306676758123L;\n+            n3 = (n3 ^ (n5 ^ n5 >>> 47) * -4132994306676758123L) * -4132994306676758123L;\n         }\n-        final int index2 = nblocks << 3;\n-        switch (length - index2) {\n+        final int n6 = n4 << 3;\n+        switch (n - n6) {\n             case 7: {\n-                h ^= ((long)data[index2 + 6] & 0xFFL) << 48;\n+                n3 ^= ((long)array[n6 + 6] & 0xFFL) << 48;\n             }\n             case 6: {\n-                h ^= ((long)data[index2 + 5] & 0xFFL) << 40;\n+                n3 ^= ((long)array[n6 + 5] & 0xFFL) << 40;\n             }\n             case 5: {\n-                h ^= ((long)data[index2 + 4] & 0xFFL) << 32;\n+                n3 ^= ((long)array[n6 + 4] & 0xFFL) << 32;\n             }\n             case 4: {\n-                h ^= ((long)data[index2 + 3] & 0xFFL) << 24;\n+                n3 ^= ((long)array[n6 + 3] & 0xFFL) << 24;\n             }\n             case 3: {\n-                h ^= ((long)data[index2 + 2] & 0xFFL) << 16;\n+                n3 ^= ((long)array[n6 + 2] & 0xFFL) << 16;\n             }\n             case 2: {\n-                h ^= ((long)data[index2 + 1] & 0xFFL) << 8;\n+                n3 ^= ((long)array[n6 + 1] & 0xFFL) << 8;\n             }\n             case 1: {\n-                h ^= ((long)data[index2] & 0xFFL);\n-                h *= -4132994306676758123L;\n+                n3 = (n3 ^ ((long)array[n6] & 0xFFL)) * -4132994306676758123L;\n                 break;\n             }\n         }\n-        h ^= h >>> 47;\n-        h *= -4132994306676758123L;\n-        h ^= h >>> 47;\n-        return h;\n+        final long n7 = (n3 ^ n3 >>> 47) * -4132994306676758123L;\n+        return n7 ^ n7 >>> 47;\n     }\n     \n-    public static long hash64(final byte[] data, final int length) {\n-        return hash64(data, length, -512093083);\n+    public static long hash64(final byte[] array, final int n) {\n+        return hash64(array, n, -512093083);\n     }\n     \n-    public static long hash64(final String text) {\n-        final byte[] bytes = StringUtils.getBytesUtf8(text);\n-        return hash64(bytes, bytes.length);\n+    public static long hash64(final String s) {\n+        final byte[] bytesUtf8 = StringUtils.getBytesUtf8(s);\n+        return hash64(bytesUtf8, bytesUtf8.length);\n     }\n     \n-    public static long hash64(final String text, final int from, final int length) {\n-        return hash64(text.substring(from, from + length));\n+    public static long hash64(final String s, final int beginIndex, final int n) {\n+        return hash64(s.substring(beginIndex, beginIndex + n));\n     }\n     \n-    private static int getLittleEndianInt(final byte[] data, final int index) {\n-        return (data[index] & 0xFF) | (data[index + 1] & 0xFF) << 8 | (data[index + 2] & 0xFF) << 16 | (data[index + 3] & 0xFF) << 24;\n+    private static int getLittleEndianInt(final byte[] array, final int n) {\n+        return (array[n] & 0xFF) | (array[n + 1] & 0xFF) << 8 | (array[n + 2] & 0xFF) << 16 | (array[n + 3] & 0xFF) << 24;\n     }\n     \n-    private static long getLittleEndianLong(final byte[] data, final int index) {\n-        return ((long)data[index] & 0xFFL) | ((long)data[index + 1] & 0xFFL) << 8 | ((long)data[index + 2] & 0xFFL) << 16 | ((long)data[index + 3] & 0xFFL) << 24 | ((long)data[index + 4] & 0xFFL) << 32 | ((long)data[index + 5] & 0xFFL) << 40 | ((long)data[index + 6] & 0xFFL) << 48 | ((long)data[index + 7] & 0xFFL) << 56;\n+    private static long getLittleEndianLong(final byte[] array, final int n) {\n+        return ((long)array[n] & 0xFFL) | ((long)array[n + 1] & 0xFFL) << 8 | ((long)array[n + 2] & 0xFFL) << 16 | ((long)array[n + 3] & 0xFFL) << 24 | ((long)array[n + 4] & 0xFFL) << 32 | ((long)array[n + 5] & 0xFFL) << 40 | ((long)array[n + 6] & 0xFFL) << 48 | ((long)array[n + 7] & 0xFFL) << 56;\n     }\n }\n"}]}
