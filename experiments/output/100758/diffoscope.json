{"diffoscope-json-version": 1, "source1": "first/AstTreeStringPrinter.class", "source2": "second/AstTreeStringPrinter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,14 +14,21 @@\n public final class AstTreeStringPrinter\n {\n     private static final Pattern NEWLINE;\n     private static final Pattern RETURN;\n     private static final Pattern TAB;\n     private static final String LINE_SEPARATOR;\n     \n+    static {\n+        NEWLINE = Pattern.compile(\"\\n\");\n+        RETURN = Pattern.compile(\"\\r\");\n+        TAB = Pattern.compile(\"\\t\");\n+        LINE_SEPARATOR = System.lineSeparator();\n+    }\n+    \n     private AstTreeStringPrinter() {\n     }\n     \n     public static String printFileAst(final File file, final JavaParser.Options options) throws IOException, CheckstyleException {\n         return printTree(JavaParser.parseFile(file, options));\n     }\n     \n@@ -46,45 +53,45 @@\n     }\n     \n     private static String parseAndPrintJavadocTree(final DetailAST node) {\n         final DetailAST javadocBlock = node.getParent();\n         final DetailNode tree = DetailNodeTreeStringPrinter.parseJavadocAsDetailNode(javadocBlock);\n         String baseIndentation = getIndentation(node);\n         baseIndentation = baseIndentation.substring(0, baseIndentation.length() - 2);\n-        final String rootPrefix = baseIndentation + \"   `--\";\n-        final String prefix = baseIndentation + \"       \";\n+        final String rootPrefix = String.valueOf(baseIndentation) + \"   `--\";\n+        final String prefix = String.valueOf(baseIndentation) + \"       \";\n         return DetailNodeTreeStringPrinter.printTree(tree, rootPrefix, prefix);\n     }\n     \n     public static String printAst(final FileText text, final JavaParser.Options options) throws CheckstyleException {\n         final DetailAST ast = JavaParser.parseFileText(text, options);\n         return printTree(ast);\n     }\n     \n     public static String printBranch(final DetailAST node) {\n         String result;\n         if (node == null) {\n             result = \"\";\n         }\n         else {\n-            result = printBranch(node.getParent()) + getIndentation(node) + getNodeInfo(node) + AstTreeStringPrinter.LINE_SEPARATOR;\n+            result = String.valueOf(printBranch(node.getParent())) + getIndentation(node) + getNodeInfo(node) + AstTreeStringPrinter.LINE_SEPARATOR;\n         }\n         return result;\n     }\n     \n     private static String printTree(final DetailAST ast) {\n         final StringBuilder messageBuilder = new StringBuilder(1024);\n         for (DetailAST node = ast; node != null; node = node.getNextSibling()) {\n             messageBuilder.append(getIndentation(node)).append(getNodeInfo(node)).append(AstTreeStringPrinter.LINE_SEPARATOR).append(printTree(node.getFirstChild()));\n         }\n         return messageBuilder.toString();\n     }\n     \n     private static String getNodeInfo(final DetailAST node) {\n-        return TokenUtil.getTokenName(node.getType()) + \" -> \" + escapeAllControlChars(node.getText()) + \" [\" + node.getLineNo() + \":\" + node.getColumnNo();\n+        return String.valueOf(TokenUtil.getTokenName(node.getType())) + \" -> \" + escapeAllControlChars(node.getText()) + \" [\" + node.getLineNo() + ':' + node.getColumnNo() + ']';\n     }\n     \n     private static String getIndentation(final DetailAST ast) {\n         final boolean isLastChild = ast.getNextSibling() == null;\n         DetailAST node = ast;\n         final StringBuilder indentation = new StringBuilder(1024);\n         while (node.getParent() != null) {\n@@ -108,15 +115,8 @@\n     }\n     \n     private static String escapeAllControlChars(final String text) {\n         final String textWithoutNewlines = AstTreeStringPrinter.NEWLINE.matcher(text).replaceAll(\"\\\\\\\\n\");\n         final String textWithoutReturns = AstTreeStringPrinter.RETURN.matcher(textWithoutNewlines).replaceAll(\"\\\\\\\\r\");\n         return AstTreeStringPrinter.TAB.matcher(textWithoutReturns).replaceAll(\"\\\\\\\\t\");\n     }\n-    \n-    static {\n-        NEWLINE = Pattern.compile(\"\\n\");\n-        RETURN = Pattern.compile(\"\\r\");\n-        TAB = Pattern.compile(\"\\t\");\n-        LINE_SEPARATOR = System.lineSeparator();\n-    }\n }\n"}]}
