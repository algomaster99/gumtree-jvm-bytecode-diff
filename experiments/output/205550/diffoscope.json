{"diffoscope-json-version": 1, "source1": "first/SubnodeConfiguration.class", "source2": "second/SubnodeConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,24 +10,24 @@\n import org.apache.commons.configuration2.tree.NodeSelector;\n \n public class SubnodeConfiguration extends BaseHierarchicalConfiguration\n {\n     private final BaseHierarchicalConfiguration parent;\n     private final NodeSelector rootSelector;\n     \n-    public SubnodeConfiguration(final BaseHierarchicalConfiguration parent, final TrackedNodeModel model) {\n-        super((NodeModel)model);\n+    public SubnodeConfiguration(final BaseHierarchicalConfiguration parent, final TrackedNodeModel trackedNodeModel) {\n+        super((NodeModel)trackedNodeModel);\n         if (parent == null) {\n             throw new IllegalArgumentException(\"Parent configuration must not be null!\");\n         }\n-        if (model == null) {\n+        if (trackedNodeModel == null) {\n             throw new IllegalArgumentException(\"Node model must not be null!\");\n         }\n         this.parent = parent;\n-        this.rootSelector = model.getSelector();\n+        this.rootSelector = trackedNodeModel.getSelector();\n     }\n     \n     public BaseHierarchicalConfiguration getParent() {\n         return this.parent;\n     }\n     \n     public NodeSelector getRootSelector() {\n@@ -35,40 +35,38 @@\n     }\n     \n     public void close() {\n         this.getTrackedModel().close();\n     }\n     \n     public InMemoryNodeModel getNodeModel() {\n-        final ImmutableNode root = this.getParent().getNodeModel().getTrackedNode(this.getRootSelector());\n-        return new InMemoryNodeModel(root);\n+        return new InMemoryNodeModel(this.getParent().getNodeModel().getTrackedNode(this.getRootSelector()));\n     }\n     \n     public InMemoryNodeModel getRootNodeModel() {\n         if (this.getParent() instanceof SubnodeConfiguration) {\n             return ((SubnodeConfiguration)this.getParent()).getRootNodeModel();\n         }\n         return this.getParent().getNodeModel();\n     }\n     \n     protected NodeModel<ImmutableNode> cloneNodeModel() {\n-        final InMemoryNodeModel parentModel = (InMemoryNodeModel)this.getParent().getModel();\n-        parentModel.trackNode(this.getRootSelector(), (NodeKeyResolver)this.getParent());\n+        ((InMemoryNodeModel)this.getParent().getModel()).trackNode(this.getRootSelector(), (NodeKeyResolver)this.getParent());\n         return (NodeModel<ImmutableNode>)new TrackedNodeModel((InMemoryNodeModelSupport)this.getParent(), this.getRootSelector(), true);\n     }\n     \n-    protected NodeSelector getSubConfigurationNodeSelector(final String key) {\n-        return this.getRootSelector().subSelector(key);\n+    protected NodeSelector getSubConfigurationNodeSelector(final String s) {\n+        return this.getRootSelector().subSelector(s);\n     }\n     \n     protected InMemoryNodeModel getSubConfigurationParentModel() {\n         return this.getTrackedModel().getParentModel();\n     }\n     \n-    protected SubnodeConfiguration createSubConfigurationForTrackedNode(final NodeSelector selector, final InMemoryNodeModelSupport parentModelSupport) {\n-        return super.createSubConfigurationForTrackedNode(selector, (InMemoryNodeModelSupport)this.getParent());\n+    protected SubnodeConfiguration createSubConfigurationForTrackedNode(final NodeSelector nodeSelector, final InMemoryNodeModelSupport inMemoryNodeModelSupport) {\n+        return super.createSubConfigurationForTrackedNode(nodeSelector, (InMemoryNodeModelSupport)this.getParent());\n     }\n     \n     private TrackedNodeModel getTrackedModel() {\n         return (TrackedNodeModel)this.getModel();\n     }\n }\n"}]}
