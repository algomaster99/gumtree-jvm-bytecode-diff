{"diffoscope-json-version": 1, "source1": "first/SuppressWithNearbyTextFilter.class", "source2": "second/SuppressWithNearbyTextFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,15 +1,15 @@\n \n package com.puppycrawl.tools.checkstyle.filters;\n \n+import java.util.Optional;\n import java.util.regex.Matcher;\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.io.File;\n-import java.util.Optional;\n import com.puppycrawl.tools.checkstyle.api.FileText;\n import java.util.Collection;\n import com.puppycrawl.tools.checkstyle.api.AuditEvent;\n import java.util.ArrayList;\n import com.puppycrawl.tools.checkstyle.PropertyType;\n import com.puppycrawl.tools.checkstyle.XdocsPropertyType;\n import java.util.regex.Pattern;\n@@ -38,86 +38,83 @@\n         this.suppressions = new ArrayList<SuppressWithNearbyTextFilter.Suppression>();\n         this.nearbyTextPattern = Pattern.compile(\"SUPPRESS CHECKSTYLE (\\\\w+)\");\n         this.checkPattern = \".*\";\n         this.lineRange = \"0\";\n         this.cachedFileAbsolutePath = \"\";\n     }\n     \n-    public final void setNearbyTextPattern(final Pattern pattern) {\n-        this.nearbyTextPattern = pattern;\n+    public final void setNearbyTextPattern(final Pattern nearbyTextPattern) {\n+        this.nearbyTextPattern = nearbyTextPattern;\n     }\n     \n-    public final void setCheckPattern(final String pattern) {\n-        this.checkPattern = pattern;\n+    public final void setCheckPattern(final String checkPattern) {\n+        this.checkPattern = checkPattern;\n     }\n     \n-    public void setMessagePattern(final String pattern) {\n-        this.messagePattern = pattern;\n+    public void setMessagePattern(final String messagePattern) {\n+        this.messagePattern = messagePattern;\n     }\n     \n-    public void setIdPattern(final String pattern) {\n-        this.idPattern = pattern;\n+    public void setIdPattern(final String idPattern) {\n+        this.idPattern = idPattern;\n     }\n     \n-    public final void setLineRange(final String format) {\n-        this.lineRange = format;\n+    public final void setLineRange(final String lineRange) {\n+        this.lineRange = lineRange;\n     }\n     \n-    public boolean accept(final AuditEvent event) {\n-        boolean accepted = true;\n-        if (event.getViolation() != null) {\n-            final String eventFileTextAbsolutePath = event.getFileName();\n-            if (!this.cachedFileAbsolutePath.equals(eventFileTextAbsolutePath)) {\n-                final FileText currentFileText = getFileText(eventFileTextAbsolutePath);\n-                if (currentFileText != null) {\n-                    this.cachedFileAbsolutePath = currentFileText.getFile().getAbsolutePath();\n-                    this.collectSuppressions(currentFileText);\n+    public boolean accept(final AuditEvent auditEvent) {\n+        boolean empty = true;\n+        if (auditEvent.getViolation() != null) {\n+            final String fileName = auditEvent.getFileName();\n+            if (!this.cachedFileAbsolutePath.equals(fileName)) {\n+                final FileText fileText = getFileText(fileName);\n+                if (fileText != null) {\n+                    this.cachedFileAbsolutePath = fileText.getFile().getAbsolutePath();\n+                    this.collectSuppressions(fileText);\n                 }\n             }\n-            final Optional<SuppressWithNearbyTextFilter.Suppression> nearestSuppression = getNearestSuppression(this.suppressions, event);\n-            accepted = nearestSuppression.isEmpty();\n+            empty = getNearestSuppression(this.suppressions, auditEvent).isEmpty();\n         }\n-        return accepted;\n+        return empty;\n     }\n     \n     protected void finishLocalSetup() {\n     }\n     \n-    private static FileText getFileText(final String fileName) {\n-        final File file = new File(fileName);\n-        FileText result = null;\n+    private static FileText getFileText(final String pathname) {\n+        final File file = new File(pathname);\n+        FileText fileText = null;\n         if (!file.isDirectory()) {\n             try {\n-                result = new FileText(file, StandardCharsets.UTF_8.name());\n+                fileText = new FileText(file, StandardCharsets.UTF_8.name());\n             }\n-            catch (final IOException ex) {\n-                throw new IllegalStateException(\"Cannot read source file: \" + fileName, (Throwable)ex);\n+            catch (final IOException cause) {\n+                throw new IllegalStateException(\"Cannot read source file: \" + pathname, (Throwable)cause);\n             }\n         }\n-        return result;\n+        return fileText;\n     }\n     \n     private void collectSuppressions(final FileText fileText) {\n         this.suppressions.clear();\n-        for (int lineNo = 0; lineNo < fileText.size(); ++lineNo) {\n-            final SuppressWithNearbyTextFilter.Suppression suppression = this.getSuppression(fileText, lineNo);\n+        for (int i = 0; i < fileText.size(); ++i) {\n+            final SuppressWithNearbyTextFilter.Suppression suppression = this.getSuppression(fileText, i);\n             if (suppression != null) {\n                 this.suppressions.add(suppression);\n             }\n         }\n     }\n     \n-    private SuppressWithNearbyTextFilter.Suppression getSuppression(final FileText fileText, final int lineNo) {\n-        final String line = fileText.get(lineNo);\n-        final Matcher nearbyTextMatcher = this.nearbyTextPattern.matcher(line);\n+    private SuppressWithNearbyTextFilter.Suppression getSuppression(final FileText fileText, final int n) {\n+        final Matcher matcher = this.nearbyTextPattern.matcher(fileText.get(n));\n         SuppressWithNearbyTextFilter.Suppression suppression = null;\n-        if (nearbyTextMatcher.find()) {\n-            final String text = nearbyTextMatcher.group(0);\n-            suppression = new SuppressWithNearbyTextFilter.Suppression(text, lineNo + 1, this);\n+        if (matcher.find()) {\n+            suppression = new SuppressWithNearbyTextFilter.Suppression(matcher.group(0), n + 1, this);\n         }\n         return suppression;\n     }\n     \n-    private static Optional<SuppressWithNearbyTextFilter.Suppression> getNearestSuppression(final Collection<SuppressWithNearbyTextFilter.Suppression> suppressions, final AuditEvent event) {\n-        return suppressions.stream().filter(suppression -> suppression.isMatch(event)).findFirst();\n+    private static Optional<SuppressWithNearbyTextFilter.Suppression> getNearestSuppression(final Collection<SuppressWithNearbyTextFilter.Suppression> collection, final AuditEvent auditEvent) {\n+        return collection.stream().filter(suppression -> suppression.isMatch(auditEvent2)).findFirst();\n     }\n }\n"}]}
