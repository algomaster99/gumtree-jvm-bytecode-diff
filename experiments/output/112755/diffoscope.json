{"diffoscope-json-version": 1, "source1": "first/Pass3aVerifier$InstOperandConstraintVisitor.class", "source2": "second/Pass3aVerifier$InstOperandConstraintVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -73,36 +73,41 @@\n     }\n     \n     private void constraintViolated(final Instruction i, final String message) {\n         throw new StaticCodeInstructionOperandConstraintException(\"Instruction \" + this.this$0.tostring((Object)i) + \" constraint violated: \" + message);\n     }\n     \n     private Method getMethod(final JavaClass jc, final InvokeInstruction invoke) {\n-        final Method[] methods;\n-        final Method[] ms = methods = jc.getMethods();\n-        for (final Method element : methods) {\n+        final Method[] ms = jc.getMethods();\n+        Method[] array;\n+        for (int length = (array = ms).length, i = 0; i < length; ++i) {\n+            final Method element = array[i];\n             if (element.getName().equals(invoke.getMethodName(this.constantPoolGen)) && Type.getReturnType(element.getSignature()).equals((Object)invoke.getReturnType(this.constantPoolGen)) && Arrays.equals(Type.getArgumentTypes(element.getSignature()), invoke.getArgumentTypes(this.constantPoolGen))) {\n                 return element;\n             }\n         }\n         return null;\n     }\n     \n     private Method getMethodRecursive(final JavaClass jc, final InvokeInstruction invoke) throws ClassNotFoundException {\n         Method m = this.getMethod(jc, invoke);\n         if (m != null) {\n             return m;\n         }\n-        for (final JavaClass superclass : jc.getSuperClasses()) {\n+        JavaClass[] superClasses;\n+        for (int length = (superClasses = jc.getSuperClasses()).length, i = 0; i < length; ++i) {\n+            final JavaClass superclass = superClasses[i];\n             m = this.getMethod(superclass, invoke);\n             if (m != null) {\n                 return m;\n             }\n         }\n-        for (final JavaClass superclass : jc.getInterfaces()) {\n+        JavaClass[] interfaces;\n+        for (int length2 = (interfaces = jc.getInterfaces()).length, j = 0; j < length2; ++j) {\n+            final JavaClass superclass = interfaces[j];\n             m = this.getMethod(superclass, invoke);\n             if (m != null) {\n                 return m;\n             }\n         }\n         return null;\n     }\n@@ -120,15 +125,15 @@\n         if (idx < 0 || idx >= this.constantPoolGen.getSize()) {\n             this.constraintViolated(i, \"Illegal constant pool index '\" + idx + \"'.\");\n         }\n     }\n     \n     private int maxLocals() {\n         try {\n-            return Repository.lookupClass(Pass3aVerifier.access$000(this.this$0).getClassName()).getMethods()[Pass3aVerifier.access$100(this.this$0)].getCode().getMaxLocals();\n+            return Repository.lookupClass(Pass3aVerifier.access$0(this.this$0).getClassName()).getMethods()[Pass3aVerifier.access$1(this.this$0)].getCode().getMaxLocals();\n         }\n         catch (final ClassNotFoundException e) {\n             throw new AssertionViolatedException(\"Missing class: \" + e, (Throwable)e);\n         }\n     }\n     \n     public void visitALOAD(final ALOAD o) {\n@@ -179,28 +184,28 @@\n             this.constraintViolated((Instruction)o, \"Expecting a CONSTANT_Class operand, but found a '\" + this.this$0.tostring((Object)c) + \"'.\");\n         }\n     }\n     \n     public void visitDLOAD(final DLOAD o) {\n         final int idx = o.getIndex();\n         if (idx < 0) {\n-            this.constraintViolated((Instruction)o, \"Index '\" + idx + \"' must be non-negative. [Constraint by JustIce as an analogon to the single-slot xLOAD/xSTORE instructions; may not happen anyway.]\");\n+            this.constraintViolated((Instruction)o, \"Index '\" + idx + \"' must be non-negative.\" + \" [Constraint by JustIce as an analogon to the single-slot xLOAD/xSTORE instructions; may not happen anyway.]\");\n         }\n         else {\n             final int maxminus2 = this.maxLocals() - 2;\n             if (idx > maxminus2) {\n                 this.constraintViolated((Instruction)o, \"Index '\" + idx + \"' must not be greater than max_locals-2 '\" + maxminus2 + \"'.\");\n             }\n         }\n     }\n     \n     public void visitDSTORE(final DSTORE o) {\n         final int idx = o.getIndex();\n         if (idx < 0) {\n-            this.constraintViolated((Instruction)o, \"Index '\" + idx + \"' must be non-negative. [Constraint by JustIce as an analogon to the single-slot xLOAD/xSTORE instructions; may not happen anyway.]\");\n+            this.constraintViolated((Instruction)o, \"Index '\" + idx + \"' must be non-negative.\" + \" [Constraint by JustIce as an analogon to the single-slot xLOAD/xSTORE instructions; may not happen anyway.]\");\n         }\n         else {\n             final int maxminus2 = this.maxLocals() - 2;\n             if (idx > maxminus2) {\n                 this.constraintViolated((Instruction)o, \"Index '\" + idx + \"' must not be greater than max_locals-2 '\" + maxminus2 + \"'.\");\n             }\n         }\n@@ -213,42 +218,46 @@\n             if (!(c instanceof ConstantFieldref)) {\n                 this.constraintViolated((Instruction)o, \"Indexing a constant that's not a CONSTANT_Fieldref but a '\" + this.this$0.tostring((Object)c) + \"'.\");\n             }\n             final String fieldName = o.getFieldName(this.constantPoolGen);\n             final JavaClass jc = Repository.lookupClass(this.getObjectType(o).getClassName());\n             Field[] fields = jc.getFields();\n             Field f = null;\n-            for (final Field field : fields) {\n+            Field[] array;\n+            for (int length = (array = fields).length, i = 0; i < length; ++i) {\n+                final Field field = array[i];\n                 if (field.getName().equals(fieldName)) {\n                     final Type fType = Type.getType(field.getSignature());\n                     final Type oType = o.getType(this.constantPoolGen);\n                     if (fType.equals((Object)oType)) {\n                         f = field;\n                         break;\n                     }\n                 }\n             }\n             if (f == null) {\n-                final JavaClass[] superClasses;\n-                final JavaClass[] superclasses = superClasses = jc.getSuperClasses();\n-            Label_0322:\n-                for (final JavaClass superclass : superClasses) {\n-                    final Field[] fields2;\n-                    fields = (fields2 = superclass.getFields());\n-                    for (final Field field2 : fields2) {\n+                final JavaClass[] superclasses = jc.getSuperClasses();\n+                JavaClass[] array2;\n+            Label_0317:\n+                for (int length2 = (array2 = superclasses).length, j = 0; j < length2; ++j) {\n+                    final JavaClass superclass = array2[j];\n+                    fields = superclass.getFields();\n+                    Field[] array3;\n+                    for (int length3 = (array3 = fields).length, k = 0; k < length3; ++k) {\n+                        final Field field2 = array3[k];\n                         if (field2.getName().equals(fieldName)) {\n                             final Type fType2 = Type.getType(field2.getSignature());\n                             final Type oType2 = o.getType(this.constantPoolGen);\n                             if (fType2.equals((Object)oType2)) {\n                                 f = field2;\n                                 if ((f.getAccessFlags() & 0x5) == 0x0) {\n                                     f = null;\n-                                    break Label_0322;\n+                                    break Label_0317;\n                                 }\n-                                break Label_0322;\n+                                break Label_0317;\n                             }\n                         }\n                     }\n                 }\n                 if (f == null) {\n                     this.constraintViolated((Instruction)o, \"Referenced field '\" + fieldName + \"' does not exist in class '\" + jc.getClassName() + \"'.\");\n                 }\n@@ -291,15 +300,17 @@\n     \n     public void visitGETSTATIC(final GETSTATIC o) {\n         try {\n             final String fieldName = o.getFieldName(this.constantPoolGen);\n             final JavaClass jc = Repository.lookupClass(this.getObjectType((FieldInstruction)o).getClassName());\n             final Field[] fields = jc.getFields();\n             Field f = null;\n-            for (final Field field : fields) {\n+            Field[] array;\n+            for (int length = (array = fields).length, i = 0; i < length; ++i) {\n+                final Field field = array[i];\n                 if (field.getName().equals(fieldName)) {\n                     f = field;\n                     break;\n                 }\n             }\n             if (f == null) {\n                 throw new AssertionViolatedException(\"Field '\" + fieldName + \"' not found in \" + jc.getClassName());\n@@ -390,18 +401,18 @@\n         if (t instanceof ObjectType) {\n             final Verifier v = VerifierFactory.getVerifier(((ObjectType)t).getClassName());\n             final VerificationResult vr = v.doPass2();\n             if (vr.getStatus() != 1) {\n                 this.constraintViolated((Instruction)o, \"Return type class/interface could not be verified successfully: '\" + vr.getMessage() + \"'.\");\n             }\n         }\n-        final Type[] argumentTypes;\n-        final Type[] ts = argumentTypes = o.getArgumentTypes(this.constantPoolGen);\n-        for (int length = argumentTypes.length, i = 0; i < length; ++i) {\n-            final Type element = t = argumentTypes[i];\n+        final Type[] ts = o.getArgumentTypes(this.constantPoolGen);\n+        Type[] array;\n+        for (int length = (array = ts).length, i = 0; i < length; ++i) {\n+            final Type element = t = array[i];\n             if (t instanceof ArrayType) {\n                 t = ((ArrayType)t).getBasicType();\n             }\n             if (t instanceof ObjectType) {\n                 final Verifier v2 = VerifierFactory.getVerifier(((ObjectType)t).getClassName());\n                 final VerificationResult vr2 = v2.doPass2();\n                 if (vr2.getStatus() != 1) {\n@@ -432,24 +443,25 @@\n         try {\n             final String className = o.getClassName(this.constantPoolGen);\n             final JavaClass jc = Repository.lookupClass(className);\n             final Method m = this.getMethodRecursive(jc, (InvokeInstruction)o);\n             if (m == null) {\n                 this.constraintViolated((Instruction)o, \"Referenced method '\" + o.getMethodName(this.constantPoolGen) + \"' with expected signature '\" + o.getSignature(this.constantPoolGen) + \"' not found in class '\" + jc.getClassName() + \"'.\");\n             }\n-            JavaClass current = Repository.lookupClass(Pass3aVerifier.access$000(this.this$0).getClassName());\n+            JavaClass current = Repository.lookupClass(Pass3aVerifier.access$0(this.this$0).getClassName());\n             if (current.isSuper() && Repository.instanceOf(current, jc) && !current.equals((Object)jc) && !o.getMethodName(this.constantPoolGen).equals(\"<init>\")) {\n                 int supidx = -1;\n                 Method meth = null;\n                 while (supidx != 0) {\n                     supidx = current.getSuperclassNameIndex();\n                     current = Repository.lookupClass(current.getSuperclassName());\n-                    final Method[] methods;\n-                    final Method[] meths = methods = current.getMethods();\n-                    for (final Method meth2 : methods) {\n+                    final Method[] meths = current.getMethods();\n+                    Method[] array;\n+                    for (int length = (array = meths).length, i = 0; i < length; ++i) {\n+                        final Method meth2 = array[i];\n                         if (meth2.getName().equals(o.getMethodName(this.constantPoolGen)) && Type.getReturnType(meth2.getSignature()).equals((Object)o.getReturnType(this.constantPoolGen)) && Arrays.equals(Type.getArgumentTypes(meth2.getSignature()), o.getArgumentTypes(this.constantPoolGen))) {\n                             meth = meth2;\n                             break;\n                         }\n                     }\n                     if (meth != null) {\n                         break;\n@@ -536,15 +548,15 @@\n             throw new AssertionViolatedException(\"Does not BCEL handle that? LDC2_W operand has a problem.\", (Throwable)e);\n         }\n     }\n     \n     public void visitLLOAD(final LLOAD o) {\n         final int idx = o.getIndex();\n         if (idx < 0) {\n-            this.constraintViolated((Instruction)o, \"Index '\" + idx + \"' must be non-negative. [Constraint by JustIce as an analogon to the single-slot xLOAD/xSTORE instructions; may not happen anyway.]\");\n+            this.constraintViolated((Instruction)o, \"Index '\" + idx + \"' must be non-negative.\" + \" [Constraint by JustIce as an analogon to the single-slot xLOAD/xSTORE instructions; may not happen anyway.]\");\n         }\n         else {\n             final int maxminus2 = this.maxLocals() - 2;\n             if (idx > maxminus2) {\n                 this.constraintViolated((Instruction)o, \"Index '\" + idx + \"' must not be greater than max_locals-2 '\" + maxminus2 + \"'.\");\n             }\n         }\n@@ -576,15 +588,15 @@\n             }\n         }\n     }\n     \n     public void visitLSTORE(final LSTORE o) {\n         final int idx = o.getIndex();\n         if (idx < 0) {\n-            this.constraintViolated((Instruction)o, \"Index '\" + idx + \"' must be non-negative. [Constraint by JustIce as an analogon to the single-slot xLOAD/xSTORE instructions; may not happen anyway.]\");\n+            this.constraintViolated((Instruction)o, \"Index '\" + idx + \"' must be non-negative.\" + \" [Constraint by JustIce as an analogon to the single-slot xLOAD/xSTORE instructions; may not happen anyway.]\");\n         }\n         else {\n             final int maxminus2 = this.maxLocals() - 2;\n             if (idx > maxminus2) {\n                 this.constraintViolated((Instruction)o, \"Index '\" + idx + \"' must not be greater than max_locals-2 '\" + maxminus2 + \"'.\");\n             }\n         }\n@@ -636,30 +648,32 @@\n     \n     public void visitPUTSTATIC(final PUTSTATIC o) {\n         try {\n             final String fieldName = o.getFieldName(this.constantPoolGen);\n             final JavaClass jc = Repository.lookupClass(this.getObjectType((FieldInstruction)o).getClassName());\n             final Field[] fields = jc.getFields();\n             Field f = null;\n-            for (final Field field : fields) {\n+            Field[] array;\n+            for (int length = (array = fields).length, i = 0; i < length; ++i) {\n+                final Field field = array[i];\n                 if (field.getName().equals(fieldName)) {\n                     f = field;\n                     break;\n                 }\n             }\n             if (f == null) {\n                 throw new AssertionViolatedException(\"Field '\" + fieldName + \"' not found in \" + jc.getClassName());\n             }\n-            if (f.isFinal() && !Pass3aVerifier.access$000(this.this$0).getClassName().equals(this.getObjectType((FieldInstruction)o).getClassName())) {\n-                this.constraintViolated((Instruction)o, \"Referenced field '\" + f + \"' is final and must therefore be declared in the current class '\" + Pass3aVerifier.access$000(this.this$0).getClassName() + \"' which is not the case: it is declared in '\" + o.getReferenceType(this.constantPoolGen) + \"'.\");\n+            if (f.isFinal() && !Pass3aVerifier.access$0(this.this$0).getClassName().equals(this.getObjectType((FieldInstruction)o).getClassName())) {\n+                this.constraintViolated((Instruction)o, \"Referenced field '\" + f + \"' is final and must therefore be declared in the current class '\" + Pass3aVerifier.access$0(this.this$0).getClassName() + \"' which is not the case: it is declared in '\" + o.getReferenceType(this.constantPoolGen) + \"'.\");\n             }\n             if (!f.isStatic()) {\n                 this.constraintViolated((Instruction)o, \"Referenced field '\" + f + \"' is not static which it should be.\");\n             }\n-            final String methName = Repository.lookupClass(Pass3aVerifier.access$000(this.this$0).getClassName()).getMethods()[Pass3aVerifier.access$100(this.this$0)].getName();\n+            final String methName = Repository.lookupClass(Pass3aVerifier.access$0(this.this$0).getClassName()).getMethods()[Pass3aVerifier.access$1(this.this$0)].getName();\n             if (!jc.isClass() && !methName.equals(\"<clinit>\")) {\n                 this.constraintViolated((Instruction)o, \"Interface field '\" + f + \"' must be set in a '\" + \"<clinit>\" + \"' method.\");\n             }\n         }\n         catch (final ClassNotFoundException e) {\n             throw new AssertionViolatedException(\"Missing class: \" + e, (Throwable)e);\n         }\n"}]}
