{"diffoscope-json-version": 1, "source1": "first/Pack200UnpackerAdapter.class", "source2": "second/Pack200UnpackerAdapter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,32 +10,31 @@\n import java.util.jar.JarOutputStream;\n import java.io.File;\n import org.apache.commons.compress.java.util.jar.Pack200;\n import org.apache.commons.compress.harmony.pack200.Pack200Adapter;\n \n public class Pack200UnpackerAdapter extends Pack200Adapter implements Pack200.Unpacker\n {\n-    public void unpack(final File file, final JarOutputStream out) throws IOException {\n-        if (file == null || out == null) {\n+    public void unpack(final File file, final JarOutputStream jarOutputStream) throws IOException {\n+        if (file == null || jarOutputStream == null) {\n             throw new IllegalArgumentException(\"Must specify both input and output streams\");\n         }\n-        final int size = (int)file.length();\n-        final int bufferSize = (size > 0 && size < 8192) ? size : 8192;\n-        try (final InputStream in = new BufferedInputStream(Files.newInputStream(file.toPath(), new OpenOption[0]), bufferSize)) {\n-            this.unpack(in, out);\n+        final int n = (int)file.length();\n+        try (final BufferedInputStream bufferedInputStream = new BufferedInputStream(Files.newInputStream(file.toPath(), new OpenOption[0]), (n > 0 && n < 8192) ? n : 8192)) {\n+            this.unpack(bufferedInputStream, jarOutputStream);\n         }\n     }\n     \n-    public void unpack(final InputStream in, final JarOutputStream out) throws IOException {\n-        if (in == null || out == null) {\n+    public void unpack(final InputStream inputStream, final JarOutputStream jarOutputStream) throws IOException {\n+        if (inputStream == null || jarOutputStream == null) {\n             throw new IllegalArgumentException(\"Must specify both input and output streams\");\n         }\n         this.completed(0.0);\n         try {\n-            new Archive(in, out).unpack();\n+            new Archive(inputStream, jarOutputStream).unpack();\n         }\n-        catch (final Pack200Exception e) {\n-            throw new IOException(\"Failed to unpack Jar:\" + e);\n+        catch (final Pack200Exception obj) {\n+            throw new IOException(\"Failed to unpack Jar:\" + obj);\n         }\n         this.completed(1.0);\n     }\n }\n"}]}
