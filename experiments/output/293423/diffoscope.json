{"diffoscope-json-version": 1, "source1": "first/EnumElementValue.class", "source2": "second/EnumElementValue.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,101 +1,101 @@\n-  SHA-256 checksum cba711bc1bfe17d64a4b98bff31bf1f30185261b71082ab12a39cb4e157d6a86\n+  SHA-256 checksum a20c43ca00a68e60827e64f48fe815aafe8d72d08b4fdf952a6a1202787e9dc9\n   Compiled from \"EnumElementValue.java\"\n public class org.apache.bcel.classfile.EnumElementValue extends org.apache.bcel.classfile.ElementValue\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #21                         // org/apache/bcel/classfile/EnumElementValue\n+  this_class: #31                         // org/apache/bcel/classfile/EnumElementValue\n   super_class: #2                         // org/apache/bcel/classfile/ElementValue\n   interfaces: 0, fields: 2, methods: 7, attributes: 1\n Constant pool:\n-   #1 = Methodref          #2.#44         // org/apache/bcel/classfile/ElementValue.\"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n-   #2 = Class              #45            // org/apache/bcel/classfile/ElementValue\n-   #3 = Class              #46            // java/lang/IllegalArgumentException\n-   #4 = Class              #47            // java/lang/StringBuilder\n-   #5 = Methodref          #4.#48         // java/lang/StringBuilder.\"<init>\":()V\n-   #6 = String             #49            // Only element values of type enum can be built with this ctor - type specified:\n-   #7 = Methodref          #4.#50         // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #8 = Methodref          #4.#51         // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #9 = Methodref          #4.#52         // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-  #10 = Methodref          #3.#53         // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-  #11 = Fieldref           #21.#54        // org/apache/bcel/classfile/EnumElementValue.typeIdx:I\n-  #12 = Fieldref           #21.#55        // org/apache/bcel/classfile/EnumElementValue.valueIdx:I\n-  #13 = Methodref          #2.#56         // org/apache/bcel/classfile/ElementValue.getType:()I\n-  #14 = Methodref          #57.#58        // java/io/DataOutputStream.writeByte:(I)V\n-  #15 = Methodref          #57.#59        // java/io/DataOutputStream.writeShort:(I)V\n-  #16 = Methodref          #2.#60         // org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n-  #17 = Class              #61            // org/apache/bcel/Const\n-  #18 = Methodref          #30.#62        // org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-  #19 = Class              #63            // org/apache/bcel/classfile/ConstantUtf8\n-  #20 = Methodref          #19.#64        // org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n-  #21 = Class              #65            // org/apache/bcel/classfile/EnumElementValue\n-  #22 = Utf8               typeIdx\n-  #23 = Utf8               I\n-  #24 = Utf8               valueIdx\n-  #25 = Utf8               <init>\n-  #26 = Utf8               (IIILorg/apache/bcel/classfile/ConstantPool;)V\n-  #27 = Utf8               Code\n-  #28 = Utf8               LineNumberTable\n-  #29 = Utf8               StackMapTable\n-  #30 = Class              #66            // org/apache/bcel/classfile/ConstantPool\n-  #31 = Utf8               dump\n-  #32 = Utf8               (Ljava/io/DataOutputStream;)V\n-  #33 = Utf8               Exceptions\n-  #34 = Class              #67            // java/io/IOException\n-  #35 = Utf8               stringifyValue\n-  #36 = Utf8               ()Ljava/lang/String;\n-  #37 = Utf8               getEnumTypeString\n-  #38 = Utf8               getEnumValueString\n-  #39 = Utf8               getValueIndex\n-  #40 = Utf8               ()I\n-  #41 = Utf8               getTypeIndex\n-  #42 = Utf8               SourceFile\n-  #43 = Utf8               EnumElementValue.java\n-  #44 = NameAndType        #25:#68        // \"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n-  #45 = Utf8               org/apache/bcel/classfile/ElementValue\n-  #46 = Utf8               java/lang/IllegalArgumentException\n-  #47 = Utf8               java/lang/StringBuilder\n-  #48 = NameAndType        #25:#69        // \"<init>\":()V\n-  #49 = Utf8               Only element values of type enum can be built with this ctor - type specified:\n-  #50 = NameAndType        #70:#71        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #51 = NameAndType        #70:#72        // append:(I)Ljava/lang/StringBuilder;\n-  #52 = NameAndType        #73:#36        // toString:()Ljava/lang/String;\n-  #53 = NameAndType        #25:#74        // \"<init>\":(Ljava/lang/String;)V\n-  #54 = NameAndType        #22:#23        // typeIdx:I\n-  #55 = NameAndType        #24:#23        // valueIdx:I\n-  #56 = NameAndType        #75:#40        // getType:()I\n-  #57 = Class              #76            // java/io/DataOutputStream\n-  #58 = NameAndType        #77:#78        // writeByte:(I)V\n-  #59 = NameAndType        #79:#78        // writeShort:(I)V\n-  #60 = NameAndType        #80:#81        // getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n-  #61 = Utf8               org/apache/bcel/Const\n-  #62 = NameAndType        #82:#83        // getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-  #63 = Utf8               org/apache/bcel/classfile/ConstantUtf8\n-  #64 = NameAndType        #84:#36        // getBytes:()Ljava/lang/String;\n-  #65 = Utf8               org/apache/bcel/classfile/EnumElementValue\n-  #66 = Utf8               org/apache/bcel/classfile/ConstantPool\n-  #67 = Utf8               java/io/IOException\n-  #68 = Utf8               (ILorg/apache/bcel/classfile/ConstantPool;)V\n-  #69 = Utf8               ()V\n-  #70 = Utf8               append\n-  #71 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #72 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #73 = Utf8               toString\n-  #74 = Utf8               (Ljava/lang/String;)V\n-  #75 = Utf8               getType\n-  #76 = Utf8               java/io/DataOutputStream\n-  #77 = Utf8               writeByte\n-  #78 = Utf8               (I)V\n-  #79 = Utf8               writeShort\n-  #80 = Utf8               getConstantPool\n-  #81 = Utf8               ()Lorg/apache/bcel/classfile/ConstantPool;\n-  #82 = Utf8               getConstant\n-  #83 = Utf8               (IB)Lorg/apache/bcel/classfile/Constant;\n-  #84 = Utf8               getBytes\n+   #1 = Methodref          #2.#3          // org/apache/bcel/classfile/ElementValue.\"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n+   #2 = Class              #4             // org/apache/bcel/classfile/ElementValue\n+   #3 = NameAndType        #5:#6          // \"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n+   #4 = Utf8               org/apache/bcel/classfile/ElementValue\n+   #5 = Utf8               <init>\n+   #6 = Utf8               (ILorg/apache/bcel/classfile/ConstantPool;)V\n+   #7 = Class              #8             // java/lang/IllegalArgumentException\n+   #8 = Utf8               java/lang/IllegalArgumentException\n+   #9 = Class              #10            // java/lang/StringBuilder\n+  #10 = Utf8               java/lang/StringBuilder\n+  #11 = Methodref          #9.#12         // java/lang/StringBuilder.\"<init>\":()V\n+  #12 = NameAndType        #5:#13         // \"<init>\":()V\n+  #13 = Utf8               ()V\n+  #14 = String             #15            // Only element values of type enum can be built with this ctor - type specified:\n+  #15 = Utf8               Only element values of type enum can be built with this ctor - type specified:\n+  #16 = Methodref          #9.#17         // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #17 = NameAndType        #18:#19        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #18 = Utf8               append\n+  #19 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #20 = Methodref          #9.#21         // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #21 = NameAndType        #18:#22        // append:(I)Ljava/lang/StringBuilder;\n+  #22 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #23 = Methodref          #9.#24         // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #24 = NameAndType        #25:#26        // toString:()Ljava/lang/String;\n+  #25 = Utf8               toString\n+  #26 = Utf8               ()Ljava/lang/String;\n+  #27 = Methodref          #7.#28         // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+  #28 = NameAndType        #5:#29         // \"<init>\":(Ljava/lang/String;)V\n+  #29 = Utf8               (Ljava/lang/String;)V\n+  #30 = Fieldref           #31.#32        // org/apache/bcel/classfile/EnumElementValue.typeIdx:I\n+  #31 = Class              #33            // org/apache/bcel/classfile/EnumElementValue\n+  #32 = NameAndType        #34:#35        // typeIdx:I\n+  #33 = Utf8               org/apache/bcel/classfile/EnumElementValue\n+  #34 = Utf8               typeIdx\n+  #35 = Utf8               I\n+  #36 = Fieldref           #31.#37        // org/apache/bcel/classfile/EnumElementValue.valueIdx:I\n+  #37 = NameAndType        #38:#35        // valueIdx:I\n+  #38 = Utf8               valueIdx\n+  #39 = Methodref          #2.#40         // org/apache/bcel/classfile/ElementValue.getType:()I\n+  #40 = NameAndType        #41:#42        // getType:()I\n+  #41 = Utf8               getType\n+  #42 = Utf8               ()I\n+  #43 = Methodref          #44.#45        // java/io/DataOutputStream.writeByte:(I)V\n+  #44 = Class              #46            // java/io/DataOutputStream\n+  #45 = NameAndType        #47:#48        // writeByte:(I)V\n+  #46 = Utf8               java/io/DataOutputStream\n+  #47 = Utf8               writeByte\n+  #48 = Utf8               (I)V\n+  #49 = Methodref          #44.#50        // java/io/DataOutputStream.writeShort:(I)V\n+  #50 = NameAndType        #51:#48        // writeShort:(I)V\n+  #51 = Utf8               writeShort\n+  #52 = Methodref          #2.#53         // org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+  #53 = NameAndType        #54:#55        // getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+  #54 = Utf8               getConstantPool\n+  #55 = Utf8               ()Lorg/apache/bcel/classfile/ConstantPool;\n+  #56 = Class              #57            // org/apache/bcel/Const\n+  #57 = Utf8               org/apache/bcel/Const\n+  #58 = Methodref          #59.#60        // org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+  #59 = Class              #61            // org/apache/bcel/classfile/ConstantPool\n+  #60 = NameAndType        #62:#63        // getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+  #61 = Utf8               org/apache/bcel/classfile/ConstantPool\n+  #62 = Utf8               getConstant\n+  #63 = Utf8               (IB)Lorg/apache/bcel/classfile/Constant;\n+  #64 = Class              #65            // org/apache/bcel/classfile/ConstantUtf8\n+  #65 = Utf8               org/apache/bcel/classfile/ConstantUtf8\n+  #66 = Methodref          #64.#67        // org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n+  #67 = NameAndType        #68:#26        // getBytes:()Ljava/lang/String;\n+  #68 = Utf8               getBytes\n+  #69 = Utf8               (IIILorg/apache/bcel/classfile/ConstantPool;)V\n+  #70 = Utf8               Code\n+  #71 = Utf8               LineNumberTable\n+  #72 = Utf8               StackMapTable\n+  #73 = Utf8               dump\n+  #74 = Utf8               (Ljava/io/DataOutputStream;)V\n+  #75 = Utf8               Exceptions\n+  #76 = Class              #77            // java/io/IOException\n+  #77 = Utf8               java/io/IOException\n+  #78 = Utf8               stringifyValue\n+  #79 = Utf8               getEnumTypeString\n+  #80 = Utf8               getEnumValueString\n+  #81 = Utf8               getValueIndex\n+  #82 = Utf8               getTypeIndex\n+  #83 = Utf8               SourceFile\n+  #84 = Utf8               EnumElementValue.java\n {\n   private final int typeIdx;\n     descriptor: I\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final int valueIdx;\n     descriptor: I\n@@ -109,32 +109,32 @@\n          0: aload_0\n          1: iload_1\n          2: aload         4\n          4: invokespecial #1                  // Method org/apache/bcel/classfile/ElementValue.\"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n          7: iload_1\n          8: bipush        101\n         10: if_icmpeq     40\n-        13: new           #3                  // class java/lang/IllegalArgumentException\n+        13: new           #7                  // class java/lang/IllegalArgumentException\n         16: dup\n-        17: new           #4                  // class java/lang/StringBuilder\n+        17: new           #9                  // class java/lang/StringBuilder\n         20: dup\n-        21: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        24: ldc           #6                  // String Only element values of type enum can be built with this ctor - type specified:\n-        26: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        21: invokespecial #11                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        24: ldc           #14                 // String Only element values of type enum can be built with this ctor - type specified:\n+        26: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         29: iload_1\n-        30: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        33: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        36: invokespecial #10                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        30: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        33: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        36: invokespecial #27                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         39: athrow\n         40: aload_0\n         41: iload_2\n-        42: putfield      #11                 // Field typeIdx:I\n+        42: putfield      #30                 // Field typeIdx:I\n         45: aload_0\n         46: iload_3\n-        47: putfield      #12                 // Field valueIdx:I\n+        47: putfield      #36                 // Field valueIdx:I\n         50: return\n       LineNumberTable:\n         line 38: 0\n         line 39: 7\n         line 40: 13\n         line 43: 40\n         line 44: 45\n@@ -148,24 +148,24 @@\n   public void dump(java.io.DataOutputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/DataOutputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n          1: aload_0\n-         2: invokespecial #13                 // Method org/apache/bcel/classfile/ElementValue.getType:()I\n-         5: invokevirtual #14                 // Method java/io/DataOutputStream.writeByte:(I)V\n+         2: invokespecial #39                 // Method org/apache/bcel/classfile/ElementValue.getType:()I\n+         5: invokevirtual #43                 // Method java/io/DataOutputStream.writeByte:(I)V\n          8: aload_1\n          9: aload_0\n-        10: getfield      #11                 // Field typeIdx:I\n-        13: invokevirtual #15                 // Method java/io/DataOutputStream.writeShort:(I)V\n+        10: getfield      #30                 // Field typeIdx:I\n+        13: invokevirtual #49                 // Method java/io/DataOutputStream.writeShort:(I)V\n         16: aload_1\n         17: aload_0\n-        18: getfield      #12                 // Field valueIdx:I\n-        21: invokevirtual #15                 // Method java/io/DataOutputStream.writeShort:(I)V\n+        18: getfield      #36                 // Field valueIdx:I\n+        21: invokevirtual #49                 // Method java/io/DataOutputStream.writeShort:(I)V\n         24: return\n       LineNumberTable:\n         line 50: 0\n         line 51: 8\n         line 52: 16\n         line 53: 24\n     Exceptions:\n@@ -173,84 +173,84 @@\n \n   public java.lang.String stringifyValue();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #16                 // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+         1: invokespecial #52                 // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n          4: aload_0\n-         5: getfield      #12                 // Field valueIdx:I\n+         5: getfield      #36                 // Field valueIdx:I\n          8: iconst_1\n-         9: invokevirtual #18                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-        12: checkcast     #19                 // class org/apache/bcel/classfile/ConstantUtf8\n+         9: invokevirtual #58                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+        12: checkcast     #64                 // class org/apache/bcel/classfile/ConstantUtf8\n         15: astore_1\n         16: aload_1\n-        17: invokevirtual #20                 // Method org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n+        17: invokevirtual #66                 // Method org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n         20: areturn\n       LineNumberTable:\n         line 58: 0\n         line 60: 16\n \n   public java.lang.String getEnumTypeString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #16                 // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+         1: invokespecial #52                 // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n          4: aload_0\n-         5: getfield      #11                 // Field typeIdx:I\n+         5: getfield      #30                 // Field typeIdx:I\n          8: iconst_1\n-         9: invokevirtual #18                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-        12: checkcast     #19                 // class org/apache/bcel/classfile/ConstantUtf8\n+         9: invokevirtual #58                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+        12: checkcast     #64                 // class org/apache/bcel/classfile/ConstantUtf8\n         15: astore_1\n         16: aload_1\n-        17: invokevirtual #20                 // Method org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n+        17: invokevirtual #66                 // Method org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n         20: areturn\n       LineNumberTable:\n         line 65: 0\n         line 67: 16\n \n   public java.lang.String getEnumValueString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #16                 // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+         1: invokespecial #52                 // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n          4: aload_0\n-         5: getfield      #12                 // Field valueIdx:I\n+         5: getfield      #36                 // Field valueIdx:I\n          8: iconst_1\n-         9: invokevirtual #18                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-        12: checkcast     #19                 // class org/apache/bcel/classfile/ConstantUtf8\n+         9: invokevirtual #58                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+        12: checkcast     #64                 // class org/apache/bcel/classfile/ConstantUtf8\n         15: astore_1\n         16: aload_1\n-        17: invokevirtual #20                 // Method org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n+        17: invokevirtual #66                 // Method org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n         20: areturn\n       LineNumberTable:\n         line 72: 0\n         line 74: 16\n \n   public int getValueIndex();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #12                 // Field valueIdx:I\n+         1: getfield      #36                 // Field valueIdx:I\n          4: ireturn\n       LineNumberTable:\n         line 79: 0\n \n   public int getTypeIndex();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #11                 // Field typeIdx:I\n+         1: getfield      #30                 // Field typeIdx:I\n          4: ireturn\n       LineNumberTable:\n         line 84: 0\n }\n SourceFile: \"EnumElementValue.java\"\n"}]}
