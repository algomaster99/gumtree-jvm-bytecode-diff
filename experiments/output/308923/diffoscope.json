{"diffoscope-json-version": 1, "source1": "first/BinaryCodec.class", "source2": "second/BinaryCodec.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,112 +1,112 @@\n-  SHA-256 checksum 2a7c4ae89a98eb079203b8afaf1a4cddcff99a9e210bb83ff74b6a0981939d9d\n+  SHA-256 checksum 25cbd7488e41376a5de192336ac50e57e129f6f4c7626b1b7163e2402682e6de\n   Compiled from \"BinaryCodec.java\"\n public class org.apache.commons.codec.binary.BinaryCodec implements org.apache.commons.codec.BinaryDecoder,org.apache.commons.codec.BinaryEncoder\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #20                         // org/apache/commons/codec/binary/BinaryCodec\n-  super_class: #21                        // java/lang/Object\n+  this_class: #8                          // org/apache/commons/codec/binary/BinaryCodec\n+  super_class: #2                         // java/lang/Object\n   interfaces: 2, fields: 11, methods: 13, attributes: 1\n Constant pool:\n-   #1 = Methodref          #21.#72        // java/lang/Object.\"<init>\":()V\n-   #2 = Methodref          #20.#73        // org/apache/commons/codec/binary/BinaryCodec.toAsciiBytes:([B)[B\n-   #3 = Class              #27            // \"[B\"\n-   #4 = Class              #74            // org/apache/commons/codec/EncoderException\n-   #5 = String             #75            // argument not a byte array\n-   #6 = Methodref          #4.#76         // org/apache/commons/codec/EncoderException.\"<init>\":(Ljava/lang/String;)V\n-   #7 = Methodref          #20.#77        // org/apache/commons/codec/binary/BinaryCodec.toAsciiChars:([B)[C\n-   #8 = Fieldref           #20.#78        // org/apache/commons/codec/binary/BinaryCodec.EMPTY_BYTE_ARRAY:[B\n-   #9 = Methodref          #20.#79        // org/apache/commons/codec/binary/BinaryCodec.fromAscii:([B)[B\n-  #10 = Class              #25            // \"[C\"\n-  #11 = Methodref          #20.#80        // org/apache/commons/codec/binary/BinaryCodec.fromAscii:([C)[B\n-  #12 = Class              #81            // java/lang/String\n-  #13 = Methodref          #12.#82        // java/lang/String.toCharArray:()[C\n-  #14 = Class              #83            // org/apache/commons/codec/DecoderException\n-  #15 = Methodref          #14.#76        // org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n-  #16 = Fieldref           #20.#84        // org/apache/commons/codec/binary/BinaryCodec.BITS:[I\n-  #17 = Methodref          #20.#85        // org/apache/commons/codec/binary/BinaryCodec.isEmpty:([B)Z\n-  #18 = Fieldref           #20.#86        // org/apache/commons/codec/binary/BinaryCodec.EMPTY_CHAR_ARRAY:[C\n-  #19 = Methodref          #12.#87        // java/lang/String.\"<init>\":([C)V\n-  #20 = Class              #88            // org/apache/commons/codec/binary/BinaryCodec\n-  #21 = Class              #89            // java/lang/Object\n-  #22 = Class              #90            // org/apache/commons/codec/BinaryDecoder\n-  #23 = Class              #91            // org/apache/commons/codec/BinaryEncoder\n-  #24 = Utf8               EMPTY_CHAR_ARRAY\n-  #25 = Utf8               [C\n-  #26 = Utf8               EMPTY_BYTE_ARRAY\n-  #27 = Utf8               [B\n-  #28 = Utf8               BIT_0\n-  #29 = Utf8               I\n-  #30 = Utf8               ConstantValue\n-  #31 = Integer            1\n-  #32 = Utf8               BIT_1\n-  #33 = Integer            2\n-  #34 = Utf8               BIT_2\n-  #35 = Integer            4\n-  #36 = Utf8               BIT_3\n-  #37 = Integer            8\n-  #38 = Utf8               BIT_4\n-  #39 = Integer            16\n-  #40 = Utf8               BIT_5\n-  #41 = Integer            32\n-  #42 = Utf8               BIT_6\n-  #43 = Integer            64\n-  #44 = Utf8               BIT_7\n-  #45 = Integer            128\n-  #46 = Utf8               BITS\n-  #47 = Utf8               [I\n-  #48 = Utf8               <init>\n-  #49 = Utf8               ()V\n-  #50 = Utf8               Code\n-  #51 = Utf8               LineNumberTable\n-  #52 = Utf8               encode\n-  #53 = Utf8               ([B)[B\n-  #54 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #55 = Utf8               StackMapTable\n-  #56 = Utf8               Exceptions\n-  #57 = Utf8               decode\n-  #58 = Utf8               toByteArray\n-  #59 = Utf8               (Ljava/lang/String;)[B\n-  #60 = Utf8               fromAscii\n-  #61 = Utf8               ([C)[B\n-  #62 = Utf8               isEmpty\n-  #63 = Utf8               ([B)Z\n-  #64 = Utf8               toAsciiBytes\n-  #65 = Utf8               toAsciiChars\n-  #66 = Utf8               ([B)[C\n-  #67 = Utf8               toAsciiString\n-  #68 = Utf8               ([B)Ljava/lang/String;\n-  #69 = Utf8               <clinit>\n-  #70 = Utf8               SourceFile\n-  #71 = Utf8               BinaryCodec.java\n-  #72 = NameAndType        #48:#49        // \"<init>\":()V\n-  #73 = NameAndType        #64:#53        // toAsciiBytes:([B)[B\n-  #74 = Utf8               org/apache/commons/codec/EncoderException\n-  #75 = Utf8               argument not a byte array\n-  #76 = NameAndType        #48:#92        // \"<init>\":(Ljava/lang/String;)V\n-  #77 = NameAndType        #65:#66        // toAsciiChars:([B)[C\n-  #78 = NameAndType        #26:#27        // EMPTY_BYTE_ARRAY:[B\n-  #79 = NameAndType        #60:#53        // fromAscii:([B)[B\n-  #80 = NameAndType        #60:#61        // fromAscii:([C)[B\n-  #81 = Utf8               java/lang/String\n-  #82 = NameAndType        #93:#94        // toCharArray:()[C\n-  #83 = Utf8               org/apache/commons/codec/DecoderException\n-  #84 = NameAndType        #46:#47        // BITS:[I\n-  #85 = NameAndType        #62:#63        // isEmpty:([B)Z\n-  #86 = NameAndType        #24:#25        // EMPTY_CHAR_ARRAY:[C\n-  #87 = NameAndType        #48:#95        // \"<init>\":([C)V\n-  #88 = Utf8               org/apache/commons/codec/binary/BinaryCodec\n-  #89 = Utf8               java/lang/Object\n-  #90 = Utf8               org/apache/commons/codec/BinaryDecoder\n-  #91 = Utf8               org/apache/commons/codec/BinaryEncoder\n-  #92 = Utf8               (Ljava/lang/String;)V\n-  #93 = Utf8               toCharArray\n-  #94 = Utf8               ()[C\n-  #95 = Utf8               ([C)V\n+   #1 = Methodref          #2.#3          // java/lang/Object.\"<init>\":()V\n+   #2 = Class              #4             // java/lang/Object\n+   #3 = NameAndType        #5:#6          // \"<init>\":()V\n+   #4 = Utf8               java/lang/Object\n+   #5 = Utf8               <init>\n+   #6 = Utf8               ()V\n+   #7 = Methodref          #8.#9          // org/apache/commons/codec/binary/BinaryCodec.toAsciiBytes:([B)[B\n+   #8 = Class              #10            // org/apache/commons/codec/binary/BinaryCodec\n+   #9 = NameAndType        #11:#12        // toAsciiBytes:([B)[B\n+  #10 = Utf8               org/apache/commons/codec/binary/BinaryCodec\n+  #11 = Utf8               toAsciiBytes\n+  #12 = Utf8               ([B)[B\n+  #13 = Class              #14            // \"[B\"\n+  #14 = Utf8               [B\n+  #15 = Class              #16            // org/apache/commons/codec/EncoderException\n+  #16 = Utf8               org/apache/commons/codec/EncoderException\n+  #17 = String             #18            // argument not a byte array\n+  #18 = Utf8               argument not a byte array\n+  #19 = Methodref          #15.#20        // org/apache/commons/codec/EncoderException.\"<init>\":(Ljava/lang/String;)V\n+  #20 = NameAndType        #5:#21         // \"<init>\":(Ljava/lang/String;)V\n+  #21 = Utf8               (Ljava/lang/String;)V\n+  #22 = Methodref          #8.#23         // org/apache/commons/codec/binary/BinaryCodec.toAsciiChars:([B)[C\n+  #23 = NameAndType        #24:#25        // toAsciiChars:([B)[C\n+  #24 = Utf8               toAsciiChars\n+  #25 = Utf8               ([B)[C\n+  #26 = Fieldref           #8.#27         // org/apache/commons/codec/binary/BinaryCodec.EMPTY_BYTE_ARRAY:[B\n+  #27 = NameAndType        #28:#14        // EMPTY_BYTE_ARRAY:[B\n+  #28 = Utf8               EMPTY_BYTE_ARRAY\n+  #29 = Methodref          #8.#30         // org/apache/commons/codec/binary/BinaryCodec.fromAscii:([B)[B\n+  #30 = NameAndType        #31:#12        // fromAscii:([B)[B\n+  #31 = Utf8               fromAscii\n+  #32 = Class              #33            // \"[C\"\n+  #33 = Utf8               [C\n+  #34 = Methodref          #8.#35         // org/apache/commons/codec/binary/BinaryCodec.fromAscii:([C)[B\n+  #35 = NameAndType        #31:#36        // fromAscii:([C)[B\n+  #36 = Utf8               ([C)[B\n+  #37 = Class              #38            // java/lang/String\n+  #38 = Utf8               java/lang/String\n+  #39 = Methodref          #37.#40        // java/lang/String.toCharArray:()[C\n+  #40 = NameAndType        #41:#42        // toCharArray:()[C\n+  #41 = Utf8               toCharArray\n+  #42 = Utf8               ()[C\n+  #43 = Class              #44            // org/apache/commons/codec/DecoderException\n+  #44 = Utf8               org/apache/commons/codec/DecoderException\n+  #45 = Methodref          #43.#20        // org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n+  #46 = Fieldref           #8.#47         // org/apache/commons/codec/binary/BinaryCodec.BITS:[I\n+  #47 = NameAndType        #48:#49        // BITS:[I\n+  #48 = Utf8               BITS\n+  #49 = Utf8               [I\n+  #50 = Methodref          #8.#51         // org/apache/commons/codec/binary/BinaryCodec.isEmpty:([B)Z\n+  #51 = NameAndType        #52:#53        // isEmpty:([B)Z\n+  #52 = Utf8               isEmpty\n+  #53 = Utf8               ([B)Z\n+  #54 = Fieldref           #8.#55         // org/apache/commons/codec/binary/BinaryCodec.EMPTY_CHAR_ARRAY:[C\n+  #55 = NameAndType        #56:#33        // EMPTY_CHAR_ARRAY:[C\n+  #56 = Utf8               EMPTY_CHAR_ARRAY\n+  #57 = Methodref          #37.#58        // java/lang/String.\"<init>\":([C)V\n+  #58 = NameAndType        #5:#59         // \"<init>\":([C)V\n+  #59 = Utf8               ([C)V\n+  #60 = Class              #61            // org/apache/commons/codec/BinaryDecoder\n+  #61 = Utf8               org/apache/commons/codec/BinaryDecoder\n+  #62 = Class              #63            // org/apache/commons/codec/BinaryEncoder\n+  #63 = Utf8               org/apache/commons/codec/BinaryEncoder\n+  #64 = Utf8               BIT_0\n+  #65 = Utf8               I\n+  #66 = Utf8               ConstantValue\n+  #67 = Integer            1\n+  #68 = Utf8               BIT_1\n+  #69 = Integer            2\n+  #70 = Utf8               BIT_2\n+  #71 = Integer            4\n+  #72 = Utf8               BIT_3\n+  #73 = Integer            8\n+  #74 = Utf8               BIT_4\n+  #75 = Integer            16\n+  #76 = Utf8               BIT_5\n+  #77 = Integer            32\n+  #78 = Utf8               BIT_6\n+  #79 = Integer            64\n+  #80 = Utf8               BIT_7\n+  #81 = Integer            128\n+  #82 = Utf8               Code\n+  #83 = Utf8               LineNumberTable\n+  #84 = Utf8               encode\n+  #85 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #86 = Utf8               StackMapTable\n+  #87 = Utf8               Exceptions\n+  #88 = Utf8               decode\n+  #89 = Utf8               toByteArray\n+  #90 = Utf8               (Ljava/lang/String;)[B\n+  #91 = Utf8               toAsciiString\n+  #92 = Utf8               ([B)Ljava/lang/String;\n+  #93 = Utf8               <clinit>\n+  #94 = Utf8               SourceFile\n+  #95 = Utf8               BinaryCodec.java\n {\n   private static final char[] EMPTY_CHAR_ARRAY;\n     descriptor: [C\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   private static final byte[] EMPTY_BYTE_ARRAY;\n     descriptor: [B\n@@ -169,35 +169,35 @@\n \n   public byte[] encode(byte[]);\n     descriptor: ([B)[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=2, args_size=2\n          0: aload_1\n-         1: invokestatic  #2                  // Method toAsciiBytes:([B)[B\n+         1: invokestatic  #7                  // Method toAsciiBytes:([B)[B\n          4: areturn\n       LineNumberTable:\n         line 83: 0\n \n   public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException;\n     descriptor: (Ljava/lang/Object;)Ljava/lang/Object;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_1\n-         1: instanceof    #3                  // class \"[B\"\n+         1: instanceof    #13                 // class \"[B\"\n          4: ifne          17\n-         7: new           #4                  // class org/apache/commons/codec/EncoderException\n+         7: new           #15                 // class org/apache/commons/codec/EncoderException\n         10: dup\n-        11: ldc           #5                  // String argument not a byte array\n-        13: invokespecial #6                  // Method org/apache/commons/codec/EncoderException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #17                 // String argument not a byte array\n+        13: invokespecial #19                 // Method org/apache/commons/codec/EncoderException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_1\n-        18: checkcast     #3                  // class \"[B\"\n-        21: invokestatic  #7                  // Method toAsciiChars:([B)[C\n+        18: checkcast     #13                 // class \"[B\"\n+        21: invokestatic  #22                 // Method toAsciiChars:([B)[C\n         24: areturn\n       LineNumberTable:\n         line 98: 0\n         line 99: 7\n         line 101: 17\n       StackMapTable: number_of_entries = 1\n         frame_type = 17 /* same */\n@@ -207,42 +207,42 @@\n   public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException;\n     descriptor: (Ljava/lang/Object;)Ljava/lang/Object;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_1\n          1: ifnonnull     8\n-         4: getstatic     #8                  // Field EMPTY_BYTE_ARRAY:[B\n+         4: getstatic     #26                 // Field EMPTY_BYTE_ARRAY:[B\n          7: areturn\n          8: aload_1\n-         9: instanceof    #3                  // class \"[B\"\n+         9: instanceof    #13                 // class \"[B\"\n         12: ifeq          23\n         15: aload_1\n-        16: checkcast     #3                  // class \"[B\"\n-        19: invokestatic  #9                  // Method fromAscii:([B)[B\n+        16: checkcast     #13                 // class \"[B\"\n+        19: invokestatic  #29                 // Method fromAscii:([B)[B\n         22: areturn\n         23: aload_1\n-        24: instanceof    #10                 // class \"[C\"\n+        24: instanceof    #32                 // class \"[C\"\n         27: ifeq          38\n         30: aload_1\n-        31: checkcast     #10                 // class \"[C\"\n-        34: invokestatic  #11                 // Method fromAscii:([C)[B\n+        31: checkcast     #32                 // class \"[C\"\n+        34: invokestatic  #34                 // Method fromAscii:([C)[B\n         37: areturn\n         38: aload_1\n-        39: instanceof    #12                 // class java/lang/String\n+        39: instanceof    #37                 // class java/lang/String\n         42: ifeq          56\n         45: aload_1\n-        46: checkcast     #12                 // class java/lang/String\n-        49: invokevirtual #13                 // Method java/lang/String.toCharArray:()[C\n-        52: invokestatic  #11                 // Method fromAscii:([C)[B\n+        46: checkcast     #37                 // class java/lang/String\n+        49: invokevirtual #39                 // Method java/lang/String.toCharArray:()[C\n+        52: invokestatic  #34                 // Method fromAscii:([C)[B\n         55: areturn\n-        56: new           #14                 // class org/apache/commons/codec/DecoderException\n+        56: new           #43                 // class org/apache/commons/codec/DecoderException\n         59: dup\n-        60: ldc           #5                  // String argument not a byte array\n-        62: invokespecial #15                 // Method org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n+        60: ldc           #17                 // String argument not a byte array\n+        62: invokespecial #45                 // Method org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n         65: athrow\n       LineNumberTable:\n         line 116: 0\n         line 117: 4\n         line 119: 8\n         line 120: 15\n         line 122: 23\n@@ -260,31 +260,31 @@\n \n   public byte[] decode(byte[]);\n     descriptor: ([B)[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=2, args_size=2\n          0: aload_1\n-         1: invokestatic  #9                  // Method fromAscii:([B)[B\n+         1: invokestatic  #29                 // Method fromAscii:([B)[B\n          4: areturn\n       LineNumberTable:\n         line 141: 0\n \n   public byte[] toByteArray(java.lang.String);\n     descriptor: (Ljava/lang/String;)[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=2, args_size=2\n          0: aload_1\n          1: ifnonnull     8\n-         4: getstatic     #8                  // Field EMPTY_BYTE_ARRAY:[B\n+         4: getstatic     #26                 // Field EMPTY_BYTE_ARRAY:[B\n          7: areturn\n          8: aload_1\n-         9: invokevirtual #13                 // Method java/lang/String.toCharArray:()[C\n-        12: invokestatic  #11                 // Method fromAscii:([C)[B\n+         9: invokevirtual #39                 // Method java/lang/String.toCharArray:()[C\n+        12: invokestatic  #34                 // Method fromAscii:([C)[B\n         15: areturn\n       LineNumberTable:\n         line 153: 0\n         line 154: 4\n         line 156: 8\n       StackMapTable: number_of_entries = 1\n         frame_type = 8 /* same */\n@@ -295,15 +295,15 @@\n     Code:\n       stack=5, locals=5, args_size=1\n          0: aload_0\n          1: ifnull        9\n          4: aload_0\n          5: arraylength\n          6: ifne          13\n-         9: getstatic     #8                  // Field EMPTY_BYTE_ARRAY:[B\n+         9: getstatic     #26                 // Field EMPTY_BYTE_ARRAY:[B\n         12: areturn\n         13: aload_0\n         14: arraylength\n         15: iconst_3\n         16: ishr\n         17: newarray       byte\n         19: astore_1\n@@ -317,29 +317,29 @@\n         27: iload_2\n         28: aload_1\n         29: arraylength\n         30: if_icmpge     84\n         33: iconst_0\n         34: istore        4\n         36: iload         4\n-        38: getstatic     #16                 // Field BITS:[I\n+        38: getstatic     #46                 // Field BITS:[I\n         41: arraylength\n         42: if_icmpge     75\n         45: aload_0\n         46: iload_3\n         47: iload         4\n         49: isub\n         50: caload\n         51: bipush        49\n         53: if_icmpne     69\n         56: aload_1\n         57: iload_2\n         58: dup2\n         59: baload\n-        60: getstatic     #16                 // Field BITS:[I\n+        60: getstatic     #46                 // Field BITS:[I\n         63: iload         4\n         65: iaload\n         66: ior\n         67: i2b\n         68: bastore\n         69: iinc          4, 1\n         72: goto          36\n@@ -376,17 +376,17 @@\n \n   public static byte[] fromAscii(byte[]);\n     descriptor: ([B)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=5, args_size=1\n          0: aload_0\n-         1: invokestatic  #17                 // Method isEmpty:([B)Z\n+         1: invokestatic  #50                 // Method isEmpty:([B)Z\n          4: ifeq          11\n-         7: getstatic     #8                  // Field EMPTY_BYTE_ARRAY:[B\n+         7: getstatic     #26                 // Field EMPTY_BYTE_ARRAY:[B\n         10: areturn\n         11: aload_0\n         12: arraylength\n         13: iconst_3\n         14: ishr\n         15: newarray       byte\n         17: astore_1\n@@ -400,29 +400,29 @@\n         25: iload_2\n         26: aload_1\n         27: arraylength\n         28: if_icmpge     82\n         31: iconst_0\n         32: istore        4\n         34: iload         4\n-        36: getstatic     #16                 // Field BITS:[I\n+        36: getstatic     #46                 // Field BITS:[I\n         39: arraylength\n         40: if_icmpge     73\n         43: aload_0\n         44: iload_3\n         45: iload         4\n         47: isub\n         48: baload\n         49: bipush        49\n         51: if_icmpne     67\n         54: aload_1\n         55: iload_2\n         56: dup2\n         57: baload\n-        58: getstatic     #16                 // Field BITS:[I\n+        58: getstatic     #46                 // Field BITS:[I\n         61: iload         4\n         63: iaload\n         64: ior\n         65: i2b\n         66: bastore\n         67: iinc          4, 1\n         70: goto          34\n@@ -480,17 +480,17 @@\n \n   public static byte[] toAsciiBytes(byte[]);\n     descriptor: ([B)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=5, args_size=1\n          0: aload_0\n-         1: invokestatic  #17                 // Method isEmpty:([B)Z\n+         1: invokestatic  #50                 // Method isEmpty:([B)Z\n          4: ifeq          11\n-         7: getstatic     #8                  // Field EMPTY_BYTE_ARRAY:[B\n+         7: getstatic     #26                 // Field EMPTY_BYTE_ARRAY:[B\n         10: areturn\n         11: aload_0\n         12: arraylength\n         13: iconst_3\n         14: ishl\n         15: newarray       byte\n         17: astore_1\n@@ -504,21 +504,21 @@\n         25: iload_2\n         26: aload_0\n         27: arraylength\n         28: if_icmpge     90\n         31: iconst_0\n         32: istore        4\n         34: iload         4\n-        36: getstatic     #16                 // Field BITS:[I\n+        36: getstatic     #46                 // Field BITS:[I\n         39: arraylength\n         40: if_icmpge     81\n         43: aload_0\n         44: iload_2\n         45: baload\n-        46: getstatic     #16                 // Field BITS:[I\n+        46: getstatic     #46                 // Field BITS:[I\n         49: iload         4\n         51: iaload\n         52: iand\n         53: ifne          67\n         56: aload_1\n         57: iload_3\n         58: iload         4\n@@ -568,17 +568,17 @@\n \n   public static char[] toAsciiChars(byte[]);\n     descriptor: ([B)[C\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=5, args_size=1\n          0: aload_0\n-         1: invokestatic  #17                 // Method isEmpty:([B)Z\n+         1: invokestatic  #50                 // Method isEmpty:([B)Z\n          4: ifeq          11\n-         7: getstatic     #18                 // Field EMPTY_CHAR_ARRAY:[C\n+         7: getstatic     #54                 // Field EMPTY_CHAR_ARRAY:[C\n         10: areturn\n         11: aload_0\n         12: arraylength\n         13: iconst_3\n         14: ishl\n         15: newarray       char\n         17: astore_1\n@@ -592,21 +592,21 @@\n         25: iload_2\n         26: aload_0\n         27: arraylength\n         28: if_icmpge     90\n         31: iconst_0\n         32: istore        4\n         34: iload         4\n-        36: getstatic     #16                 // Field BITS:[I\n+        36: getstatic     #46                 // Field BITS:[I\n         39: arraylength\n         40: if_icmpge     81\n         43: aload_0\n         44: iload_2\n         45: baload\n-        46: getstatic     #16                 // Field BITS:[I\n+        46: getstatic     #46                 // Field BITS:[I\n         49: iload         4\n         51: iaload\n         52: iand\n         53: ifne          67\n         56: aload_1\n         57: iload_3\n         58: iload         4\n@@ -655,34 +655,34 @@\n           offset_delta = 8\n \n   public static java.lang.String toAsciiString(byte[]);\n     descriptor: ([B)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=1, args_size=1\n-         0: new           #12                 // class java/lang/String\n+         0: new           #37                 // class java/lang/String\n          3: dup\n          4: aload_0\n-         5: invokestatic  #7                  // Method toAsciiChars:([B)[C\n-         8: invokespecial #19                 // Method java/lang/String.\"<init>\":([C)V\n+         5: invokestatic  #22                 // Method toAsciiChars:([B)[C\n+         8: invokespecial #57                 // Method java/lang/String.\"<init>\":([C)V\n         11: areturn\n       LineNumberTable:\n         line 299: 0\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=0, args_size=0\n          0: iconst_0\n          1: newarray       char\n-         3: putstatic     #18                 // Field EMPTY_CHAR_ARRAY:[C\n+         3: putstatic     #54                 // Field EMPTY_CHAR_ARRAY:[C\n          6: iconst_0\n          7: newarray       byte\n-         9: putstatic     #8                  // Field EMPTY_BYTE_ARRAY:[B\n+         9: putstatic     #26                 // Field EMPTY_BYTE_ARRAY:[B\n         12: bipush        8\n         14: newarray       int\n         16: dup\n         17: iconst_0\n         18: iconst_1\n         19: iastore\n         20: dup\n@@ -709,15 +709,15 @@\n         44: bipush        6\n         46: bipush        64\n         48: iastore\n         49: dup\n         50: bipush        7\n         52: sipush        128\n         55: iastore\n-        56: putstatic     #16                 // Field BITS:[I\n+        56: putstatic     #46                 // Field BITS:[I\n         59: return\n       LineNumberTable:\n         line 42: 0\n         line 45: 6\n         line 71: 12\n }\n SourceFile: \"BinaryCodec.java\"\n"}]}
