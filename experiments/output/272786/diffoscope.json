{"diffoscope-json-version": 1, "source1": "first/AbbreviationAsWordInNameCheck.class", "source2": "second/AbbreviationAsWordInNameCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -52,17 +52,17 @@\n         this.ignoreOverriddenMethods = ignoreOverriddenMethods;\n     }\n     \n     public void setAllowedAbbreviationLength(final int allowedAbbreviationLength) {\n         this.allowedAbbreviationLength = allowedAbbreviationLength;\n     }\n     \n-    public void setAllowedAbbreviations(final String... allowedAbbreviations) {\n-        if (allowedAbbreviations != null) {\n-            this.allowedAbbreviations = Arrays.stream(allowedAbbreviations).collect((Collector<? super String, ?, Set<String>>)Collectors.toSet());\n+    public void setAllowedAbbreviations(final String... array) {\n+        if (array != null) {\n+            this.allowedAbbreviations = Arrays.stream(array).collect((Collector<? super String, ?, Set<String>>)Collectors.toSet());\n         }\n     }\n     \n     public int[] getDefaultTokens() {\n         return new int[] { 14, 15, 154, 157, 161, 21, 10, 9, 198, 199, 202 };\n     }\n     \n@@ -70,142 +70,139 @@\n         return new int[] { 14, 15, 154, 157, 161, 21, 10, 9, 155, 198, 199, 202 };\n     }\n     \n     public int[] getRequiredTokens() {\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (!this.isIgnoreSituation(ast)) {\n-            final DetailAST nameAst = ast.findFirstToken(58);\n-            final String typeName = nameAst.getText();\n-            final String abbr = this.getDisallowedAbbreviation(typeName);\n-            if (abbr != null) {\n-                this.log(nameAst, \"abbreviation.as.word\", new Object[] { typeName, Integer.valueOf(this.allowedAbbreviationLength + 1) });\n+    public void visitToken(final DetailAST detailAST) {\n+        if (!this.isIgnoreSituation(detailAST)) {\n+            final DetailAST firstToken = detailAST.findFirstToken(58);\n+            final String text = firstToken.getText();\n+            if (this.getDisallowedAbbreviation(text) != null) {\n+                this.log(firstToken, \"abbreviation.as.word\", new Object[] { text, Integer.valueOf(this.allowedAbbreviationLength + 1) });\n             }\n         }\n     }\n     \n-    private boolean isIgnoreSituation(final DetailAST ast) {\n-        final DetailAST modifiers = ast.getFirstChild();\n-        boolean result;\n-        if (ast.getType() == 10) {\n-            if (isInterfaceDeclaration(ast)) {\n-                result = this.ignoreStaticFinal;\n+    private boolean isIgnoreSituation(final DetailAST detailAST) {\n+        final DetailAST firstChild = detailAST.getFirstChild();\n+        boolean b;\n+        if (detailAST.getType() == 10) {\n+            if (isInterfaceDeclaration(detailAST)) {\n+                b = this.ignoreStaticFinal;\n             }\n             else {\n-                result = this.hasIgnoredModifiers(modifiers);\n+                b = this.hasIgnoredModifiers(firstChild);\n             }\n         }\n-        else if (ast.getType() == 9) {\n-            result = (this.ignoreOverriddenMethods && hasOverrideAnnotation(modifiers));\n+        else if (detailAST.getType() == 9) {\n+            b = (this.ignoreOverriddenMethods && hasOverrideAnnotation(firstChild));\n         }\n         else {\n-            result = CheckUtil.isReceiverParameter(ast);\n+            b = CheckUtil.isReceiverParameter(detailAST);\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private boolean hasIgnoredModifiers(final DetailAST modifiers) {\n-        final boolean isStatic = modifiers.findFirstToken(64) != null;\n-        final boolean isFinal = modifiers.findFirstToken(39) != null;\n-        boolean result;\n-        if (isStatic && isFinal) {\n-            result = this.ignoreStaticFinal;\n+    private boolean hasIgnoredModifiers(final DetailAST detailAST) {\n+        final boolean b = detailAST.findFirstToken(64) != null;\n+        final boolean b2 = detailAST.findFirstToken(39) != null;\n+        boolean ignoreStaticFinal;\n+        if (b && b2) {\n+            ignoreStaticFinal = this.ignoreStaticFinal;\n         }\n         else {\n-            result = ((this.ignoreStatic && isStatic) || (this.ignoreFinal && isFinal));\n+            ignoreStaticFinal = ((this.ignoreStatic && b) || (this.ignoreFinal && b2));\n         }\n-        return result;\n+        return ignoreStaticFinal;\n     }\n     \n-    private static boolean isInterfaceDeclaration(final DetailAST variableDefAst) {\n-        boolean result = false;\n-        final DetailAST astBlock = variableDefAst.getParent();\n-        final DetailAST astParent2 = astBlock.getParent();\n-        if (astParent2.getType() == 15 || astParent2.getType() == 157) {\n-            result = true;\n+    private static boolean isInterfaceDeclaration(final DetailAST detailAST) {\n+        boolean b = false;\n+        final DetailAST parent = detailAST.getParent().getParent();\n+        if (parent.getType() == 15 || parent.getType() == 157) {\n+            b = true;\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private static boolean hasOverrideAnnotation(final DetailAST methodModifiersAST) {\n-        boolean result = false;\n-        for (final DetailAST child : getChildren(methodModifiersAST)) {\n-            final DetailAST annotationIdent = child.findFirstToken(58);\n-            if (annotationIdent != null && \"Override\".equals(annotationIdent.getText())) {\n-                result = true;\n+    private static boolean hasOverrideAnnotation(final DetailAST detailAST) {\n+        boolean b = false;\n+        final Iterator<DetailAST> iterator = getChildren(detailAST).iterator();\n+        while (iterator.hasNext()) {\n+            final DetailAST firstToken = ((DetailAST)iterator.next()).findFirstToken(58);\n+            if (firstToken != null && \"Override\".equals(firstToken.getText())) {\n+                b = true;\n                 break;\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private String getDisallowedAbbreviation(final String str) {\n-        int beginIndex = 0;\n-        boolean abbrStarted = false;\n-        String result = null;\n-        for (int index = 0; index < str.length(); ++index) {\n-            final char symbol = str.charAt(index);\n-            if (Character.isUpperCase(symbol)) {\n-                if (!abbrStarted) {\n-                    abbrStarted = true;\n-                    beginIndex = index;\n+    private String getDisallowedAbbreviation(final String s) {\n+        int n = 0;\n+        int n2 = 0;\n+        String s2 = null;\n+        for (int i = 0; i < s.length(); ++i) {\n+            final char char1 = s.charAt(i);\n+            if (Character.isUpperCase(char1)) {\n+                if (n2 == 0) {\n+                    n2 = 1;\n+                    n = i;\n                 }\n             }\n-            else if (abbrStarted) {\n-                abbrStarted = false;\n-                int endIndex;\n-                int allowedLength;\n-                if (symbol == '_') {\n-                    endIndex = index;\n-                    allowedLength = this.allowedAbbreviationLength + 1;\n+            else if (n2 != 0) {\n+                n2 = 0;\n+                int n3;\n+                int allowedAbbreviationLength;\n+                if (char1 == '_') {\n+                    n3 = i;\n+                    allowedAbbreviationLength = this.allowedAbbreviationLength + 1;\n                 }\n                 else {\n-                    endIndex = index - 1;\n-                    allowedLength = this.allowedAbbreviationLength;\n+                    n3 = i - 1;\n+                    allowedAbbreviationLength = this.allowedAbbreviationLength;\n                 }\n-                result = this.getAbbreviationIfIllegal(str, beginIndex, endIndex, allowedLength);\n-                if (result != null) {\n+                s2 = this.getAbbreviationIfIllegal(s, n, n3, allowedAbbreviationLength);\n+                if (s2 != null) {\n                     break;\n                 }\n-                beginIndex = -1;\n+                n = -1;\n             }\n         }\n-        if (abbrStarted) {\n-            final int endIndex2 = str.length() - 1;\n-            result = this.getAbbreviationIfIllegal(str, beginIndex, endIndex2, this.allowedAbbreviationLength);\n+        if (n2 != 0) {\n+            s2 = this.getAbbreviationIfIllegal(s, n, s.length() - 1, this.allowedAbbreviationLength);\n         }\n-        return result;\n+        return s2;\n     }\n     \n-    private String getAbbreviationIfIllegal(final String str, final int beginIndex, final int endIndex, final int allowedLength) {\n-        String result = null;\n-        final int abbrLength = endIndex - beginIndex;\n-        if (abbrLength > allowedLength) {\n-            final String abbr = getAbbreviation(str, beginIndex, endIndex);\n-            if (!this.allowedAbbreviations.contains(abbr)) {\n-                result = abbr;\n+    private String getAbbreviationIfIllegal(final String s, final int n, final int n2, final int n3) {\n+        String s2 = null;\n+        if (n2 - n > n3) {\n+            final String abbreviation = getAbbreviation(s, n, n2);\n+            if (!this.allowedAbbreviations.contains(abbreviation)) {\n+                s2 = abbreviation;\n             }\n         }\n-        return result;\n+        return s2;\n     }\n     \n-    private static String getAbbreviation(final String str, final int beginIndex, final int endIndex) {\n-        String result;\n-        if (endIndex == str.length() - 1) {\n-            result = str.substring(beginIndex);\n+    private static String getAbbreviation(final String s, final int n, final int endIndex) {\n+        String s2;\n+        if (endIndex == s.length() - 1) {\n+            s2 = s.substring(n);\n         }\n         else {\n-            result = str.substring(beginIndex, endIndex);\n+            s2 = s.substring(n, endIndex);\n         }\n-        return result;\n+        return s2;\n     }\n     \n-    private static List<DetailAST> getChildren(final DetailAST node) {\n-        final List<DetailAST> result = new LinkedList<DetailAST>();\n-        for (DetailAST curNode = node.getFirstChild(); curNode != null; curNode = curNode.getNextSibling()) {\n-            result.add(curNode);\n+    private static List<DetailAST> getChildren(final DetailAST detailAST) {\n+        final LinkedList list = new LinkedList();\n+        for (DetailAST detailAST2 = detailAST.getFirstChild(); detailAST2 != null; detailAST2 = detailAST2.getNextSibling()) {\n+            list.add(detailAST2);\n         }\n-        return result;\n+        return list;\n     }\n }\n"}]}
