{"diffoscope-json-version": 1, "source1": "first/CSVParser.class", "source2": "second/CSVParser.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,150 +1,150 @@\n-  SHA-256 checksum d4812b30fb532a2598a63e6b2f71139ab902463003727be1dc8b51fdd7684bf0\n+  SHA-256 checksum 448dbaf889d1a2a6dc3f8ace75c3490e3635fd8fca9d24144aa75fe3e0efa7ee\n   Compiled from \"CSVParser.java\"\n public final class org.apache.commons.csv.CSVParser extends java.lang.Object implements java.lang.Iterable<org.apache.commons.csv.CSVRecord>, java.io.Closeable\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #14                         // org/apache/commons/csv/CSVParser\n   super_class: #76                        // java/lang/Object\n   interfaces: 2, fields: 8, methods: 25, attributes: 3\n Constant pool:\n     #1 = String             #159          // file\n-    #2 = Methodref          #258.#259     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-    #3 = Methodref          #260.#261     // java/io/File.toPath:()Ljava/nio/file/Path;\n-    #4 = Methodref          #14.#262      // org/apache/commons/csv/CSVParser.parse:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+    #2 = Methodref          #255.#256     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+    #3 = Methodref          #257.#258     // java/io/File.toPath:()Ljava/nio/file/Path;\n+    #4 = Methodref          #14.#259      // org/apache/commons/csv/CSVParser.parse:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n     #5 = String             #165          // inputStream\n     #6 = String             #137          // format\n-    #7 = Class              #263          // java/io/InputStreamReader\n-    #8 = Methodref          #7.#264       // java/io/InputStreamReader.\"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n-    #9 = Methodref          #14.#265      // org/apache/commons/csv/CSVParser.parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+    #7 = Class              #260          // java/io/InputStreamReader\n+    #8 = Methodref          #7.#261       // java/io/InputStreamReader.\"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n+    #9 = Methodref          #14.#262      // org/apache/commons/csv/CSVParser.parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n    #10 = String             #168          // path\n-   #11 = Class              #266          // java/nio/file/OpenOption\n-   #12 = Methodref          #267.#268     // java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-   #13 = Methodref          #14.#269      // org/apache/commons/csv/CSVParser.parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-   #14 = Class              #270          // org/apache/commons/csv/CSVParser\n-   #15 = Methodref          #14.#271      // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+   #11 = Class              #263          // java/nio/file/OpenOption\n+   #12 = Methodref          #264.#265     // java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+   #13 = Methodref          #14.#266      // org/apache/commons/csv/CSVParser.parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+   #14 = Class              #267          // org/apache/commons/csv/CSVParser\n+   #15 = Methodref          #14.#268      // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n    #16 = String             #174          // string\n-   #17 = Class              #272          // java/io/StringReader\n-   #18 = Methodref          #17.#273      // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n+   #17 = Class              #269          // java/io/StringReader\n+   #18 = Methodref          #17.#270      // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n    #19 = String             #177          // url\n    #20 = String             #161          // charset\n-   #21 = Methodref          #274.#275     // java/net/URL.openStream:()Ljava/io/InputStream;\n-   #22 = Methodref          #14.#276      // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n-   #23 = Methodref          #76.#277      // java/lang/Object.\"<init>\":()V\n-   #24 = Class              #278          // java/util/ArrayList\n-   #25 = Methodref          #24.#277      // java/util/ArrayList.\"<init>\":()V\n-   #26 = Fieldref           #14.#279      // org/apache/commons/csv/CSVParser.recordList:Ljava/util/List;\n-   #27 = Class              #280          // org/apache/commons/csv/Token\n-   #28 = Methodref          #27.#277      // org/apache/commons/csv/Token.\"<init>\":()V\n-   #29 = Fieldref           #14.#281      // org/apache/commons/csv/CSVParser.reusableToken:Lorg/apache/commons/csv/Token;\n+   #21 = Methodref          #271.#272     // java/net/URL.openStream:()Ljava/io/InputStream;\n+   #22 = Methodref          #14.#273      // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n+   #23 = Methodref          #76.#274      // java/lang/Object.\"<init>\":()V\n+   #24 = Class              #275          // java/util/ArrayList\n+   #25 = Methodref          #24.#274      // java/util/ArrayList.\"<init>\":()V\n+   #26 = Fieldref           #14.#276      // org/apache/commons/csv/CSVParser.recordList:Ljava/util/List;\n+   #27 = Class              #277          // org/apache/commons/csv/Token\n+   #28 = Methodref          #27.#274      // org/apache/commons/csv/Token.\"<init>\":()V\n+   #29 = Fieldref           #14.#278      // org/apache/commons/csv/CSVParser.reusableToken:Lorg/apache/commons/csv/Token;\n    #30 = String             #171          // reader\n-   #31 = Methodref          #282.#283     // org/apache/commons/csv/CSVFormat.copy:()Lorg/apache/commons/csv/CSVFormat;\n-   #32 = Fieldref           #14.#284      // org/apache/commons/csv/CSVParser.format:Lorg/apache/commons/csv/CSVFormat;\n-   #33 = Class              #285          // org/apache/commons/csv/Lexer\n-   #34 = Class              #286          // org/apache/commons/csv/ExtendedBufferedReader\n-   #35 = Methodref          #34.#287      // org/apache/commons/csv/ExtendedBufferedReader.\"<init>\":(Ljava/io/Reader;)V\n-   #36 = Methodref          #33.#288      // org/apache/commons/csv/Lexer.\"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-   #37 = Fieldref           #14.#289      // org/apache/commons/csv/CSVParser.lexer:Lorg/apache/commons/csv/Lexer;\n-   #38 = Class              #290          // org/apache/commons/csv/CSVParser$CSVRecordIterator\n-   #39 = Methodref          #38.#291      // org/apache/commons/csv/CSVParser$CSVRecordIterator.\"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n-   #40 = Fieldref           #14.#292      // org/apache/commons/csv/CSVParser.csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n-   #41 = Methodref          #14.#293      // org/apache/commons/csv/CSVParser.createHeaders:()Lorg/apache/commons/csv/CSVParser$Headers;\n-   #42 = Fieldref           #14.#294      // org/apache/commons/csv/CSVParser.headers:Lorg/apache/commons/csv/CSVParser$Headers;\n-   #43 = Fieldref           #14.#295      // org/apache/commons/csv/CSVParser.characterOffset:J\n-   #44 = Fieldref           #14.#296      // org/apache/commons/csv/CSVParser.recordNumber:J\n-   #45 = Fieldref           #27.#297      // org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n-   #46 = Methodref          #67.#298      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #47 = Methodref          #282.#299     // org/apache/commons/csv/CSVFormat.getTrim:()Z\n-   #48 = Methodref          #300.#301     // java/lang/String.trim:()Ljava/lang/String;\n-   #49 = Methodref          #300.#302     // java/lang/String.isEmpty:()Z\n-   #50 = Methodref          #282.#303     // org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z\n-   #51 = Methodref          #14.#304      // org/apache/commons/csv/CSVParser.handleNull:(Ljava/lang/String;)Ljava/lang/String;\n-   #52 = InterfaceMethodref #305.#306     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #53 = Methodref          #33.#307      // org/apache/commons/csv/Lexer.close:()V\n-   #54 = Methodref          #282.#308     // org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z\n-   #55 = Class              #309          // java/util/TreeMap\n-   #56 = Fieldref           #300.#310     // java/lang/String.CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n-   #57 = Methodref          #55.#311      // java/util/TreeMap.\"<init>\":(Ljava/util/Comparator;)V\n-   #58 = Class              #312          // java/util/LinkedHashMap\n-   #59 = Methodref          #58.#277      // java/util/LinkedHashMap.\"<init>\":()V\n-   #60 = Methodref          #282.#313     // org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n-   #61 = Methodref          #14.#314      // org/apache/commons/csv/CSVParser.createEmptyHeaderMap:()Ljava/util/Map;\n-   #62 = Methodref          #14.#315      // org/apache/commons/csv/CSVParser.nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n-   #63 = Methodref          #122.#316     // org/apache/commons/csv/CSVRecord.values:()[Ljava/lang/String;\n-   #64 = Methodref          #282.#317     // org/apache/commons/csv/CSVFormat.getSkipHeaderRecord:()Z\n-   #65 = Methodref          #282.#318     // org/apache/commons/csv/CSVFormat.getAllowMissingColumnNames:()Z\n-   #66 = Class              #319          // java/lang/IllegalArgumentException\n-   #67 = Class              #320          // java/lang/StringBuilder\n-   #68 = Methodref          #67.#277      // java/lang/StringBuilder.\"<init>\":()V\n-   #69 = String             #321          // A header name is missing in\n-   #70 = Methodref          #67.#322      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #71 = Methodref          #323.#324     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n-   #72 = Methodref          #66.#273      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #73 = InterfaceMethodref #325.#326     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-   #74 = Methodref          #282.#327     // org/apache/commons/csv/CSVFormat.getAllowDuplicateHeaderNames:()Z\n-   #75 = String             #328          // The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.withAllowDuplicateHeaderNames().\n-   #76 = Class              #329          // java/lang/Object\n-   #77 = Methodref          #300.#330     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-   #78 = Methodref          #331.#332     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #79 = InterfaceMethodref #325.#333     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #80 = Methodref          #24.#334      // java/util/ArrayList.\"<init>\":(I)V\n-   #81 = Methodref          #335.#336     // java/util/Collections.emptyList:()Ljava/util/List;\n-   #82 = Methodref          #335.#337     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-   #83 = Class              #338          // org/apache/commons/csv/CSVParser$Headers\n-   #84 = Methodref          #83.#339      // org/apache/commons/csv/CSVParser$Headers.\"<init>\":(Ljava/util/Map;Ljava/util/List;)V\n-   #85 = Methodref          #33.#340      // org/apache/commons/csv/Lexer.getCurrentLineNumber:()J\n-   #86 = Methodref          #33.#341      // org/apache/commons/csv/Lexer.getFirstEol:()Ljava/lang/String;\n-   #87 = Fieldref           #83.#342      // org/apache/commons/csv/CSVParser$Headers.headerMap:Ljava/util/Map;\n-   #88 = InterfaceMethodref #325.#343     // java/util/Map.putAll:(Ljava/util/Map;)V\n-   #89 = Fieldref           #83.#344      // org/apache/commons/csv/CSVParser$Headers.headerNames:Ljava/util/List;\n-   #90 = Fieldref           #27.#345      // org/apache/commons/csv/Token.isQuoted:Z\n-   #91 = Methodref          #282.#346     // org/apache/commons/csv/CSVFormat.getNullString:()Ljava/lang/String;\n-   #92 = Methodref          #14.#347      // org/apache/commons/csv/CSVParser.isStrictQuoteMode:()Z\n-   #93 = Methodref          #300.#348     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #94 = Methodref          #33.#349      // org/apache/commons/csv/Lexer.isClosed:()Z\n-   #95 = Methodref          #282.#350     // org/apache/commons/csv/CSVFormat.getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n-   #96 = Fieldref           #351.#352     // org/apache/commons/csv/QuoteMode.ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n-   #97 = Fieldref           #351.#353     // org/apache/commons/csv/QuoteMode.NON_NUMERIC:Lorg/apache/commons/csv/QuoteMode;\n-   #98 = InterfaceMethodref #305.#354     // java/util/List.clear:()V\n-   #99 = Methodref          #33.#355      // org/apache/commons/csv/Lexer.getCharacterPosition:()J\n-  #100 = Methodref          #27.#356      // org/apache/commons/csv/Token.reset:()V\n-  #101 = Methodref          #33.#357      // org/apache/commons/csv/Lexer.nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #102 = Fieldref           #133.#358     // org/apache/commons/csv/CSVParser$1.$SwitchMap$org$apache$commons$csv$Token$Type:[I\n-  #103 = Fieldref           #27.#359      // org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n-  #104 = Methodref          #360.#361     // org/apache/commons/csv/Token$Type.ordinal:()I\n-  #105 = Methodref          #14.#362      // org/apache/commons/csv/CSVParser.addRecordValue:(Z)V\n-  #106 = Fieldref           #27.#363      // org/apache/commons/csv/Token.isReady:Z\n-  #107 = Class              #364          // java/io/IOException\n-  #108 = String             #365          // (line\n-  #109 = Methodref          #14.#340      // org/apache/commons/csv/CSVParser.getCurrentLineNumber:()J\n-  #110 = Methodref          #67.#366      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-  #111 = String             #367          // ) invalid parse sequence\n-  #112 = Methodref          #107.#273     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-  #113 = Class              #368          // org/apache/commons/csv/Constants\n-  #114 = Methodref          #67.#369      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-  #115 = Methodref          #67.#370      // java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n-  #116 = Fieldref           #360.#371     // org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n-  #117 = Class              #372          // java/lang/IllegalStateException\n-  #118 = String             #373          // Unexpected Token type:\n-  #119 = Methodref          #67.#374      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #120 = Methodref          #117.#273     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-  #121 = InterfaceMethodref #305.#302     // java/util/List.isEmpty:()Z\n-  #122 = Class              #375          // org/apache/commons/csv/CSVRecord\n-  #123 = Fieldref           #113.#376     // org/apache/commons/csv/Constants.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-  #124 = InterfaceMethodref #305.#377     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #31 = Methodref          #279.#280     // org/apache/commons/csv/CSVFormat.copy:()Lorg/apache/commons/csv/CSVFormat;\n+   #32 = Fieldref           #14.#281      // org/apache/commons/csv/CSVParser.format:Lorg/apache/commons/csv/CSVFormat;\n+   #33 = Class              #282          // org/apache/commons/csv/Lexer\n+   #34 = Class              #283          // org/apache/commons/csv/ExtendedBufferedReader\n+   #35 = Methodref          #34.#284      // org/apache/commons/csv/ExtendedBufferedReader.\"<init>\":(Ljava/io/Reader;)V\n+   #36 = Methodref          #33.#285      // org/apache/commons/csv/Lexer.\"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+   #37 = Fieldref           #14.#286      // org/apache/commons/csv/CSVParser.lexer:Lorg/apache/commons/csv/Lexer;\n+   #38 = Class              #287          // org/apache/commons/csv/CSVParser$CSVRecordIterator\n+   #39 = Methodref          #38.#288      // org/apache/commons/csv/CSVParser$CSVRecordIterator.\"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n+   #40 = Fieldref           #14.#289      // org/apache/commons/csv/CSVParser.csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n+   #41 = Methodref          #14.#290      // org/apache/commons/csv/CSVParser.createHeaders:()Lorg/apache/commons/csv/CSVParser$Headers;\n+   #42 = Fieldref           #14.#291      // org/apache/commons/csv/CSVParser.headers:Lorg/apache/commons/csv/CSVParser$Headers;\n+   #43 = Fieldref           #14.#292      // org/apache/commons/csv/CSVParser.characterOffset:J\n+   #44 = Fieldref           #14.#293      // org/apache/commons/csv/CSVParser.recordNumber:J\n+   #45 = Fieldref           #27.#294      // org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+   #46 = Methodref          #67.#295      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #47 = Methodref          #279.#296     // org/apache/commons/csv/CSVFormat.getTrim:()Z\n+   #48 = Methodref          #191.#297     // java/lang/String.trim:()Ljava/lang/String;\n+   #49 = Methodref          #191.#298     // java/lang/String.isEmpty:()Z\n+   #50 = Methodref          #279.#299     // org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z\n+   #51 = Methodref          #14.#300      // org/apache/commons/csv/CSVParser.handleNull:(Ljava/lang/String;)Ljava/lang/String;\n+   #52 = InterfaceMethodref #215.#301     // java/util/List.add:(Ljava/lang/Object;)Z\n+   #53 = Methodref          #33.#302      // org/apache/commons/csv/Lexer.close:()V\n+   #54 = Methodref          #279.#303     // org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z\n+   #55 = Class              #304          // java/util/TreeMap\n+   #56 = Fieldref           #191.#305     // java/lang/String.CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n+   #57 = Methodref          #55.#306      // java/util/TreeMap.\"<init>\":(Ljava/util/Comparator;)V\n+   #58 = Class              #307          // java/util/LinkedHashMap\n+   #59 = Methodref          #58.#274      // java/util/LinkedHashMap.\"<init>\":()V\n+   #60 = Methodref          #279.#308     // org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n+   #61 = Methodref          #14.#309      // org/apache/commons/csv/CSVParser.createEmptyHeaderMap:()Ljava/util/Map;\n+   #62 = Methodref          #14.#310      // org/apache/commons/csv/CSVParser.nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n+   #63 = Methodref          #122.#311     // org/apache/commons/csv/CSVRecord.values:()[Ljava/lang/String;\n+   #64 = Methodref          #279.#312     // org/apache/commons/csv/CSVFormat.getSkipHeaderRecord:()Z\n+   #65 = Methodref          #279.#313     // org/apache/commons/csv/CSVFormat.getAllowMissingColumnNames:()Z\n+   #66 = Class              #314          // java/lang/IllegalArgumentException\n+   #67 = Class              #315          // java/lang/StringBuilder\n+   #68 = Methodref          #67.#274      // java/lang/StringBuilder.\"<init>\":()V\n+   #69 = String             #316          // A header name is missing in\n+   #70 = Methodref          #67.#317      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #71 = Methodref          #318.#319     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n+   #72 = Methodref          #66.#270      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #73 = InterfaceMethodref #196.#320     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+   #74 = Methodref          #279.#321     // org/apache/commons/csv/CSVFormat.getAllowDuplicateHeaderNames:()Z\n+   #75 = String             #322          // The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.withAllowDuplicateHeaderNames().\n+   #76 = Class              #323          // java/lang/Object\n+   #77 = Methodref          #191.#324     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+   #78 = Methodref          #325.#326     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #79 = InterfaceMethodref #196.#327     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #80 = Methodref          #24.#328      // java/util/ArrayList.\"<init>\":(I)V\n+   #81 = Methodref          #329.#330     // java/util/Collections.emptyList:()Ljava/util/List;\n+   #82 = Methodref          #329.#331     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+   #83 = Class              #332          // org/apache/commons/csv/CSVParser$Headers\n+   #84 = Methodref          #83.#333      // org/apache/commons/csv/CSVParser$Headers.\"<init>\":(Ljava/util/Map;Ljava/util/List;)V\n+   #85 = Methodref          #33.#334      // org/apache/commons/csv/Lexer.getCurrentLineNumber:()J\n+   #86 = Methodref          #33.#335      // org/apache/commons/csv/Lexer.getFirstEol:()Ljava/lang/String;\n+   #87 = Fieldref           #83.#336      // org/apache/commons/csv/CSVParser$Headers.headerMap:Ljava/util/Map;\n+   #88 = InterfaceMethodref #196.#337     // java/util/Map.putAll:(Ljava/util/Map;)V\n+   #89 = Fieldref           #83.#338      // org/apache/commons/csv/CSVParser$Headers.headerNames:Ljava/util/List;\n+   #90 = Fieldref           #27.#339      // org/apache/commons/csv/Token.isQuoted:Z\n+   #91 = Methodref          #279.#340     // org/apache/commons/csv/CSVFormat.getNullString:()Ljava/lang/String;\n+   #92 = Methodref          #14.#341      // org/apache/commons/csv/CSVParser.isStrictQuoteMode:()Z\n+   #93 = Methodref          #191.#342     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #94 = Methodref          #33.#343      // org/apache/commons/csv/Lexer.isClosed:()Z\n+   #95 = Methodref          #279.#344     // org/apache/commons/csv/CSVFormat.getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n+   #96 = Fieldref           #345.#346     // org/apache/commons/csv/QuoteMode.ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n+   #97 = Fieldref           #345.#347     // org/apache/commons/csv/QuoteMode.NON_NUMERIC:Lorg/apache/commons/csv/QuoteMode;\n+   #98 = InterfaceMethodref #215.#348     // java/util/List.clear:()V\n+   #99 = Methodref          #33.#349      // org/apache/commons/csv/Lexer.getCharacterPosition:()J\n+  #100 = Methodref          #27.#350      // org/apache/commons/csv/Token.reset:()V\n+  #101 = Methodref          #33.#351      // org/apache/commons/csv/Lexer.nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #102 = Fieldref           #133.#352     // org/apache/commons/csv/CSVParser$1.$SwitchMap$org$apache$commons$csv$Token$Type:[I\n+  #103 = Fieldref           #27.#353      // org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+  #104 = Methodref          #354.#355     // org/apache/commons/csv/Token$Type.ordinal:()I\n+  #105 = Methodref          #14.#356      // org/apache/commons/csv/CSVParser.addRecordValue:(Z)V\n+  #106 = Fieldref           #27.#357      // org/apache/commons/csv/Token.isReady:Z\n+  #107 = Class              #358          // java/io/IOException\n+  #108 = String             #359          // (line\n+  #109 = Methodref          #14.#334      // org/apache/commons/csv/CSVParser.getCurrentLineNumber:()J\n+  #110 = Methodref          #67.#360      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+  #111 = String             #361          // ) invalid parse sequence\n+  #112 = Methodref          #107.#270     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #113 = Class              #362          // org/apache/commons/csv/Constants\n+  #114 = Methodref          #67.#363      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+  #115 = Methodref          #67.#364      // java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n+  #116 = Fieldref           #354.#365     // org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n+  #117 = Class              #366          // java/lang/IllegalStateException\n+  #118 = String             #367          // Unexpected Token type:\n+  #119 = Methodref          #67.#368      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #120 = Methodref          #117.#270     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+  #121 = InterfaceMethodref #215.#298     // java/util/List.isEmpty:()Z\n+  #122 = Class              #369          // org/apache/commons/csv/CSVRecord\n+  #123 = Fieldref           #113.#370     // org/apache/commons/csv/Constants.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+  #124 = InterfaceMethodref #215.#371     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n   #125 = Class              #208          // \"[Ljava/lang/String;\"\n-  #126 = Methodref          #122.#378     // org/apache/commons/csv/CSVRecord.\"<init>\":(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n-  #127 = Methodref          #14.#379      // org/apache/commons/csv/CSVParser.iterator:()Ljava/util/Iterator;\n-  #128 = Class              #380          // java/util/Spliterator\n-  #129 = Methodref          #381.#382     // java/util/Spliterators.spliteratorUnknownSize:(Ljava/util/Iterator;I)Ljava/util/Spliterator;\n-  #130 = Methodref          #383.#384     // java/util/stream/StreamSupport.stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n-  #131 = Class              #385          // java/lang/Iterable\n-  #132 = Class              #386          // java/io/Closeable\n-  #133 = Class              #387          // org/apache/commons/csv/CSVParser$1\n+  #126 = Methodref          #122.#372     // org/apache/commons/csv/CSVRecord.\"<init>\":(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n+  #127 = Methodref          #14.#373      // org/apache/commons/csv/CSVParser.iterator:()Ljava/util/Iterator;\n+  #128 = Class              #374          // java/util/Spliterator\n+  #129 = Methodref          #375.#376     // java/util/Spliterators.spliteratorUnknownSize:(Ljava/util/Iterator;I)Ljava/util/Spliterator;\n+  #130 = Methodref          #377.#378     // java/util/stream/StreamSupport.stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n+  #131 = Class              #379          // java/lang/Iterable\n+  #132 = Class              #380          // java/io/Closeable\n+  #133 = Class              #381          // org/apache/commons/csv/CSVParser$1\n   #134 = Utf8               InnerClasses\n   #135 = Utf8               Headers\n   #136 = Utf8               CSVRecordIterator\n   #137 = Utf8               format\n   #138 = Utf8               Lorg/apache/commons/csv/CSVFormat;\n   #139 = Utf8               headers\n   #140 = Utf8               Lorg/apache/commons/csv/CSVParser$Headers;\n@@ -194,20 +194,20 @@\n   #184 = Utf8               addRecordValue\n   #185 = Utf8               (Z)V\n   #186 = Utf8               lastRecord\n   #187 = Utf8               Z\n   #188 = Utf8               input\n   #189 = Utf8               inputClean\n   #190 = Utf8               StackMapTable\n-  #191 = Class              #388          // java/lang/String\n+  #191 = Class              #382          // java/lang/String\n   #192 = Utf8               close\n   #193 = Utf8               ()V\n   #194 = Utf8               createEmptyHeaderMap\n   #195 = Utf8               ()Ljava/util/Map;\n-  #196 = Class              #389          // java/util/Map\n+  #196 = Class              #383          // java/util/Map\n   #197 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n   #198 = Utf8               createHeaders\n   #199 = Utf8               ()Lorg/apache/commons/csv/CSVParser$Headers;\n   #200 = Utf8               nextRecord\n   #201 = Utf8               Lorg/apache/commons/csv/CSVRecord;\n   #202 = Utf8               header\n   #203 = Utf8               emptyHeader\n@@ -218,285 +218,279 @@\n   #208 = Utf8               [Ljava/lang/String;\n   #209 = Utf8               hdrMap\n   #210 = Utf8               Ljava/util/Map;\n   #211 = Utf8               headerNames\n   #212 = Utf8               formatHeader\n   #213 = Utf8               LocalVariableTypeTable\n   #214 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n-  #215 = Class              #270          // org/apache/commons/csv/CSVParser\n-  #216 = Class              #390          // java/util/List\n-  #217 = Utf8               getCurrentLineNumber\n-  #218 = Utf8               ()J\n-  #219 = Utf8               getFirstEndOfLine\n-  #220 = Utf8               ()Ljava/lang/String;\n-  #221 = Utf8               getHeaderMap\n-  #222 = Utf8               map\n-  #223 = Utf8               getHeaderMapRaw\n-  #224 = Utf8               getHeaderNames\n-  #225 = Utf8               ()Ljava/util/List;\n-  #226 = Utf8               ()Ljava/util/List<Ljava/lang/String;>;\n-  #227 = Utf8               getRecordNumber\n-  #228 = Utf8               getRecords\n-  #229 = Utf8               rec\n-  #230 = Utf8               records\n-  #231 = Utf8               Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n-  #232 = Class              #375          // org/apache/commons/csv/CSVRecord\n-  #233 = Utf8               ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n-  #234 = Utf8               handleNull\n-  #235 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #236 = Utf8               isQuoted\n-  #237 = Utf8               nullString\n-  #238 = Utf8               strictQuoteMode\n-  #239 = Utf8               isClosed\n-  #240 = Utf8               ()Z\n-  #241 = Utf8               isStrictQuoteMode\n-  #242 = Utf8               iterator\n-  #243 = Utf8               ()Ljava/util/Iterator;\n-  #244 = Utf8               ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n-  #245 = Utf8               ()Lorg/apache/commons/csv/CSVRecord;\n-  #246 = Utf8               comment\n-  #247 = Utf8               result\n-  #248 = Utf8               sb\n-  #249 = Utf8               Ljava/lang/StringBuilder;\n-  #250 = Utf8               startCharPosition\n-  #251 = Class              #320          // java/lang/StringBuilder\n-  #252 = Utf8               stream\n-  #253 = Utf8               ()Ljava/util/stream/Stream;\n-  #254 = Utf8               ()Ljava/util/stream/Stream<Lorg/apache/commons/csv/CSVRecord;>;\n-  #255 = Utf8               Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n-  #256 = Utf8               SourceFile\n-  #257 = Utf8               CSVParser.java\n-  #258 = Class              #391          // java/util/Objects\n-  #259 = NameAndType        #392:#393     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #260 = Class              #394          // java/io/File\n-  #261 = NameAndType        #395:#396     // toPath:()Ljava/nio/file/Path;\n-  #262 = NameAndType        #154:#167     // parse:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-  #263 = Utf8               java/io/InputStreamReader\n-  #264 = NameAndType        #179:#397     // \"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n-  #265 = NameAndType        #154:#170     // parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-  #266 = Utf8               java/nio/file/OpenOption\n-  #267 = Class              #398          // java/nio/file/Files\n-  #268 = NameAndType        #399:#400     // newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #269 = NameAndType        #154:#164     // parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-  #270 = Utf8               org/apache/commons/csv/CSVParser\n-  #271 = NameAndType        #179:#180     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-  #272 = Utf8               java/io/StringReader\n-  #273 = NameAndType        #179:#401     // \"<init>\":(Ljava/lang/String;)V\n-  #274 = Class              #402          // java/net/URL\n-  #275 = NameAndType        #403:#404     // openStream:()Ljava/io/InputStream;\n-  #276 = NameAndType        #179:#183     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n-  #277 = NameAndType        #179:#193     // \"<init>\":()V\n-  #278 = Utf8               java/util/ArrayList\n-  #279 = NameAndType        #145:#146     // recordList:Ljava/util/List;\n-  #280 = Utf8               org/apache/commons/csv/Token\n-  #281 = NameAndType        #152:#153     // reusableToken:Lorg/apache/commons/csv/Token;\n-  #282 = Class              #405          // org/apache/commons/csv/CSVFormat\n-  #283 = NameAndType        #406:#407     // copy:()Lorg/apache/commons/csv/CSVFormat;\n-  #284 = NameAndType        #137:#138     // format:Lorg/apache/commons/csv/CSVFormat;\n-  #285 = Utf8               org/apache/commons/csv/Lexer\n-  #286 = Utf8               org/apache/commons/csv/ExtendedBufferedReader\n-  #287 = NameAndType        #179:#408     // \"<init>\":(Ljava/io/Reader;)V\n-  #288 = NameAndType        #179:#409     // \"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-  #289 = NameAndType        #141:#142     // lexer:Lorg/apache/commons/csv/Lexer;\n-  #290 = Utf8               org/apache/commons/csv/CSVParser$CSVRecordIterator\n-  #291 = NameAndType        #179:#410     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n-  #292 = NameAndType        #143:#144     // csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n-  #293 = NameAndType        #198:#199     // createHeaders:()Lorg/apache/commons/csv/CSVParser$Headers;\n-  #294 = NameAndType        #139:#140     // headers:Lorg/apache/commons/csv/CSVParser$Headers;\n-  #295 = NameAndType        #151:#150     // characterOffset:J\n-  #296 = NameAndType        #149:#150     // recordNumber:J\n-  #297 = NameAndType        #411:#249     // content:Ljava/lang/StringBuilder;\n-  #298 = NameAndType        #412:#220     // toString:()Ljava/lang/String;\n-  #299 = NameAndType        #413:#240     // getTrim:()Z\n-  #300 = Class              #388          // java/lang/String\n-  #301 = NameAndType        #414:#220     // trim:()Ljava/lang/String;\n-  #302 = NameAndType        #415:#240     // isEmpty:()Z\n-  #303 = NameAndType        #416:#240     // getTrailingDelimiter:()Z\n-  #304 = NameAndType        #234:#235     // handleNull:(Ljava/lang/String;)Ljava/lang/String;\n-  #305 = Class              #390          // java/util/List\n-  #306 = NameAndType        #417:#418     // add:(Ljava/lang/Object;)Z\n-  #307 = NameAndType        #192:#193     // close:()V\n-  #308 = NameAndType        #419:#240     // getIgnoreHeaderCase:()Z\n-  #309 = Utf8               java/util/TreeMap\n-  #310 = NameAndType        #420:#421     // CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n-  #311 = NameAndType        #179:#422     // \"<init>\":(Ljava/util/Comparator;)V\n-  #312 = Utf8               java/util/LinkedHashMap\n-  #313 = NameAndType        #423:#424     // getHeader:()[Ljava/lang/String;\n-  #314 = NameAndType        #194:#195     // createEmptyHeaderMap:()Ljava/util/Map;\n-  #315 = NameAndType        #200:#245     // nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n-  #316 = NameAndType        #425:#424     // values:()[Ljava/lang/String;\n-  #317 = NameAndType        #426:#240     // getSkipHeaderRecord:()Z\n-  #318 = NameAndType        #427:#240     // getAllowMissingColumnNames:()Z\n-  #319 = Utf8               java/lang/IllegalArgumentException\n-  #320 = Utf8               java/lang/StringBuilder\n-  #321 = Utf8               A header name is missing in\n-  #322 = NameAndType        #428:#429     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #323 = Class              #430          // java/util/Arrays\n-  #324 = NameAndType        #412:#431     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n-  #325 = Class              #389          // java/util/Map\n-  #326 = NameAndType        #432:#418     // containsKey:(Ljava/lang/Object;)Z\n-  #327 = NameAndType        #433:#240     // getAllowDuplicateHeaderNames:()Z\n-  #328 = Utf8               The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.withAllowDuplicateHeaderNames().\n-  #329 = Utf8               java/lang/Object\n-  #330 = NameAndType        #137:#434     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #331 = Class              #435          // java/lang/Integer\n-  #332 = NameAndType        #436:#437     // valueOf:(I)Ljava/lang/Integer;\n-  #333 = NameAndType        #438:#439     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #334 = NameAndType        #179:#440     // \"<init>\":(I)V\n-  #335 = Class              #441          // java/util/Collections\n-  #336 = NameAndType        #442:#225     // emptyList:()Ljava/util/List;\n-  #337 = NameAndType        #443:#444     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-  #338 = Utf8               org/apache/commons/csv/CSVParser$Headers\n-  #339 = NameAndType        #179:#445     // \"<init>\":(Ljava/util/Map;Ljava/util/List;)V\n-  #340 = NameAndType        #217:#218     // getCurrentLineNumber:()J\n-  #341 = NameAndType        #446:#220     // getFirstEol:()Ljava/lang/String;\n-  #342 = NameAndType        #447:#210     // headerMap:Ljava/util/Map;\n-  #343 = NameAndType        #448:#449     // putAll:(Ljava/util/Map;)V\n-  #344 = NameAndType        #211:#146     // headerNames:Ljava/util/List;\n-  #345 = NameAndType        #236:#187     // isQuoted:Z\n-  #346 = NameAndType        #450:#220     // getNullString:()Ljava/lang/String;\n-  #347 = NameAndType        #241:#240     // isStrictQuoteMode:()Z\n-  #348 = NameAndType        #451:#418     // equals:(Ljava/lang/Object;)Z\n-  #349 = NameAndType        #239:#240     // isClosed:()Z\n-  #350 = NameAndType        #452:#453     // getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n-  #351 = Class              #454          // org/apache/commons/csv/QuoteMode\n-  #352 = NameAndType        #455:#456     // ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n-  #353 = NameAndType        #457:#456     // NON_NUMERIC:Lorg/apache/commons/csv/QuoteMode;\n-  #354 = NameAndType        #458:#193     // clear:()V\n-  #355 = NameAndType        #459:#218     // getCharacterPosition:()J\n-  #356 = NameAndType        #460:#193     // reset:()V\n-  #357 = NameAndType        #461:#462     // nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #358 = NameAndType        #463:#464     // $SwitchMap$org$apache$commons$csv$Token$Type:[I\n-  #359 = NameAndType        #465:#467     // type:Lorg/apache/commons/csv/Token$Type;\n-  #360 = Class              #468          // org/apache/commons/csv/Token$Type\n-  #361 = NameAndType        #469:#470     // ordinal:()I\n-  #362 = NameAndType        #184:#185     // addRecordValue:(Z)V\n-  #363 = NameAndType        #471:#187     // isReady:Z\n-  #364 = Utf8               java/io/IOException\n-  #365 = Utf8               (line\n-  #366 = NameAndType        #428:#472     // append:(J)Ljava/lang/StringBuilder;\n-  #367 = Utf8               ) invalid parse sequence\n-  #368 = Utf8               org/apache/commons/csv/Constants\n-  #369 = NameAndType        #428:#473     // append:(C)Ljava/lang/StringBuilder;\n-  #370 = NameAndType        #428:#474     // append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n-  #371 = NameAndType        #475:#467     // TOKEN:Lorg/apache/commons/csv/Token$Type;\n-  #372 = Utf8               java/lang/IllegalStateException\n-  #373 = Utf8               Unexpected Token type:\n-  #374 = NameAndType        #428:#476     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #375 = Utf8               org/apache/commons/csv/CSVRecord\n-  #376 = NameAndType        #477:#208     // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-  #377 = NameAndType        #478:#479     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #378 = NameAndType        #179:#480     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n-  #379 = NameAndType        #242:#243     // iterator:()Ljava/util/Iterator;\n-  #380 = Utf8               java/util/Spliterator\n-  #381 = Class              #481          // java/util/Spliterators\n-  #382 = NameAndType        #482:#483     // spliteratorUnknownSize:(Ljava/util/Iterator;I)Ljava/util/Spliterator;\n-  #383 = Class              #484          // java/util/stream/StreamSupport\n-  #384 = NameAndType        #252:#485     // stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n-  #385 = Utf8               java/lang/Iterable\n-  #386 = Utf8               java/io/Closeable\n-  #387 = Utf8               org/apache/commons/csv/CSVParser$1\n-  #388 = Utf8               java/lang/String\n-  #389 = Utf8               java/util/Map\n-  #390 = Utf8               java/util/List\n-  #391 = Utf8               java/util/Objects\n-  #392 = Utf8               requireNonNull\n-  #393 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #394 = Utf8               java/io/File\n-  #395 = Utf8               toPath\n-  #396 = Utf8               ()Ljava/nio/file/Path;\n-  #397 = Utf8               (Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n-  #398 = Utf8               java/nio/file/Files\n-  #399 = Utf8               newInputStream\n-  #400 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #401 = Utf8               (Ljava/lang/String;)V\n-  #402 = Utf8               java/net/URL\n-  #403 = Utf8               openStream\n-  #404 = Utf8               ()Ljava/io/InputStream;\n-  #405 = Utf8               org/apache/commons/csv/CSVFormat\n-  #406 = Utf8               copy\n-  #407 = Utf8               ()Lorg/apache/commons/csv/CSVFormat;\n-  #408 = Utf8               (Ljava/io/Reader;)V\n-  #409 = Utf8               (Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-  #410 = Utf8               (Lorg/apache/commons/csv/CSVParser;)V\n-  #411 = Utf8               content\n-  #412 = Utf8               toString\n-  #413 = Utf8               getTrim\n-  #414 = Utf8               trim\n-  #415 = Utf8               isEmpty\n-  #416 = Utf8               getTrailingDelimiter\n-  #417 = Utf8               add\n-  #418 = Utf8               (Ljava/lang/Object;)Z\n-  #419 = Utf8               getIgnoreHeaderCase\n-  #420 = Utf8               CASE_INSENSITIVE_ORDER\n-  #421 = Utf8               Ljava/util/Comparator;\n-  #422 = Utf8               (Ljava/util/Comparator;)V\n-  #423 = Utf8               getHeader\n-  #424 = Utf8               ()[Ljava/lang/String;\n-  #425 = Utf8               values\n-  #426 = Utf8               getSkipHeaderRecord\n-  #427 = Utf8               getAllowMissingColumnNames\n-  #428 = Utf8               append\n-  #429 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #430 = Utf8               java/util/Arrays\n-  #431 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n-  #432 = Utf8               containsKey\n-  #433 = Utf8               getAllowDuplicateHeaderNames\n-  #434 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #435 = Utf8               java/lang/Integer\n-  #436 = Utf8               valueOf\n-  #437 = Utf8               (I)Ljava/lang/Integer;\n-  #438 = Utf8               put\n-  #439 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #440 = Utf8               (I)V\n-  #441 = Utf8               java/util/Collections\n-  #442 = Utf8               emptyList\n-  #443 = Utf8               unmodifiableList\n-  #444 = Utf8               (Ljava/util/List;)Ljava/util/List;\n-  #445 = Utf8               (Ljava/util/Map;Ljava/util/List;)V\n-  #446 = Utf8               getFirstEol\n-  #447 = Utf8               headerMap\n-  #448 = Utf8               putAll\n-  #449 = Utf8               (Ljava/util/Map;)V\n-  #450 = Utf8               getNullString\n-  #451 = Utf8               equals\n-  #452 = Utf8               getQuoteMode\n-  #453 = Utf8               ()Lorg/apache/commons/csv/QuoteMode;\n-  #454 = Utf8               org/apache/commons/csv/QuoteMode\n-  #455 = Utf8               ALL_NON_NULL\n-  #456 = Utf8               Lorg/apache/commons/csv/QuoteMode;\n-  #457 = Utf8               NON_NUMERIC\n-  #458 = Utf8               clear\n-  #459 = Utf8               getCharacterPosition\n-  #460 = Utf8               reset\n-  #461 = Utf8               nextToken\n-  #462 = Utf8               (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #463 = Utf8               $SwitchMap$org$apache$commons$csv$Token$Type\n-  #464 = Utf8               [I\n-  #465 = Utf8               type\n-  #466 = Utf8               Type\n-  #467 = Utf8               Lorg/apache/commons/csv/Token$Type;\n-  #468 = Utf8               org/apache/commons/csv/Token$Type\n-  #469 = Utf8               ordinal\n-  #470 = Utf8               ()I\n-  #471 = Utf8               isReady\n-  #472 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #473 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #474 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n-  #475 = Utf8               TOKEN\n-  #476 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #477 = Utf8               EMPTY_STRING_ARRAY\n-  #478 = Utf8               toArray\n-  #479 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #480 = Utf8               (Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n-  #481 = Utf8               java/util/Spliterators\n-  #482 = Utf8               spliteratorUnknownSize\n-  #483 = Utf8               (Ljava/util/Iterator;I)Ljava/util/Spliterator;\n-  #484 = Utf8               java/util/stream/StreamSupport\n-  #485 = Utf8               (Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n+  #215 = Class              #384          // java/util/List\n+  #216 = Utf8               getCurrentLineNumber\n+  #217 = Utf8               ()J\n+  #218 = Utf8               getFirstEndOfLine\n+  #219 = Utf8               ()Ljava/lang/String;\n+  #220 = Utf8               getHeaderMap\n+  #221 = Utf8               map\n+  #222 = Utf8               getHeaderMapRaw\n+  #223 = Utf8               getHeaderNames\n+  #224 = Utf8               ()Ljava/util/List;\n+  #225 = Utf8               ()Ljava/util/List<Ljava/lang/String;>;\n+  #226 = Utf8               getRecordNumber\n+  #227 = Utf8               getRecords\n+  #228 = Utf8               rec\n+  #229 = Utf8               records\n+  #230 = Utf8               Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n+  #231 = Utf8               ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n+  #232 = Utf8               handleNull\n+  #233 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #234 = Utf8               isQuoted\n+  #235 = Utf8               nullString\n+  #236 = Utf8               strictQuoteMode\n+  #237 = Utf8               isClosed\n+  #238 = Utf8               ()Z\n+  #239 = Utf8               isStrictQuoteMode\n+  #240 = Utf8               iterator\n+  #241 = Utf8               ()Ljava/util/Iterator;\n+  #242 = Utf8               ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n+  #243 = Utf8               ()Lorg/apache/commons/csv/CSVRecord;\n+  #244 = Utf8               comment\n+  #245 = Utf8               result\n+  #246 = Utf8               sb\n+  #247 = Utf8               Ljava/lang/StringBuilder;\n+  #248 = Utf8               startCharPosition\n+  #249 = Utf8               stream\n+  #250 = Utf8               ()Ljava/util/stream/Stream;\n+  #251 = Utf8               ()Ljava/util/stream/Stream<Lorg/apache/commons/csv/CSVRecord;>;\n+  #252 = Utf8               Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n+  #253 = Utf8               SourceFile\n+  #254 = Utf8               CSVParser.java\n+  #255 = Class              #385          // java/util/Objects\n+  #256 = NameAndType        #386:#387     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #257 = Class              #388          // java/io/File\n+  #258 = NameAndType        #389:#390     // toPath:()Ljava/nio/file/Path;\n+  #259 = NameAndType        #154:#167     // parse:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+  #260 = Utf8               java/io/InputStreamReader\n+  #261 = NameAndType        #179:#391     // \"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n+  #262 = NameAndType        #154:#170     // parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+  #263 = Utf8               java/nio/file/OpenOption\n+  #264 = Class              #392          // java/nio/file/Files\n+  #265 = NameAndType        #393:#394     // newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+  #266 = NameAndType        #154:#164     // parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+  #267 = Utf8               org/apache/commons/csv/CSVParser\n+  #268 = NameAndType        #179:#180     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+  #269 = Utf8               java/io/StringReader\n+  #270 = NameAndType        #179:#395     // \"<init>\":(Ljava/lang/String;)V\n+  #271 = Class              #396          // java/net/URL\n+  #272 = NameAndType        #397:#398     // openStream:()Ljava/io/InputStream;\n+  #273 = NameAndType        #179:#183     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n+  #274 = NameAndType        #179:#193     // \"<init>\":()V\n+  #275 = Utf8               java/util/ArrayList\n+  #276 = NameAndType        #145:#146     // recordList:Ljava/util/List;\n+  #277 = Utf8               org/apache/commons/csv/Token\n+  #278 = NameAndType        #152:#153     // reusableToken:Lorg/apache/commons/csv/Token;\n+  #279 = Class              #399          // org/apache/commons/csv/CSVFormat\n+  #280 = NameAndType        #400:#401     // copy:()Lorg/apache/commons/csv/CSVFormat;\n+  #281 = NameAndType        #137:#138     // format:Lorg/apache/commons/csv/CSVFormat;\n+  #282 = Utf8               org/apache/commons/csv/Lexer\n+  #283 = Utf8               org/apache/commons/csv/ExtendedBufferedReader\n+  #284 = NameAndType        #179:#402     // \"<init>\":(Ljava/io/Reader;)V\n+  #285 = NameAndType        #179:#403     // \"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+  #286 = NameAndType        #141:#142     // lexer:Lorg/apache/commons/csv/Lexer;\n+  #287 = Utf8               org/apache/commons/csv/CSVParser$CSVRecordIterator\n+  #288 = NameAndType        #179:#404     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n+  #289 = NameAndType        #143:#144     // csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n+  #290 = NameAndType        #198:#199     // createHeaders:()Lorg/apache/commons/csv/CSVParser$Headers;\n+  #291 = NameAndType        #139:#140     // headers:Lorg/apache/commons/csv/CSVParser$Headers;\n+  #292 = NameAndType        #151:#150     // characterOffset:J\n+  #293 = NameAndType        #149:#150     // recordNumber:J\n+  #294 = NameAndType        #405:#247     // content:Ljava/lang/StringBuilder;\n+  #295 = NameAndType        #406:#219     // toString:()Ljava/lang/String;\n+  #296 = NameAndType        #407:#238     // getTrim:()Z\n+  #297 = NameAndType        #408:#219     // trim:()Ljava/lang/String;\n+  #298 = NameAndType        #409:#238     // isEmpty:()Z\n+  #299 = NameAndType        #410:#238     // getTrailingDelimiter:()Z\n+  #300 = NameAndType        #232:#233     // handleNull:(Ljava/lang/String;)Ljava/lang/String;\n+  #301 = NameAndType        #411:#412     // add:(Ljava/lang/Object;)Z\n+  #302 = NameAndType        #192:#193     // close:()V\n+  #303 = NameAndType        #413:#238     // getIgnoreHeaderCase:()Z\n+  #304 = Utf8               java/util/TreeMap\n+  #305 = NameAndType        #414:#415     // CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n+  #306 = NameAndType        #179:#416     // \"<init>\":(Ljava/util/Comparator;)V\n+  #307 = Utf8               java/util/LinkedHashMap\n+  #308 = NameAndType        #417:#418     // getHeader:()[Ljava/lang/String;\n+  #309 = NameAndType        #194:#195     // createEmptyHeaderMap:()Ljava/util/Map;\n+  #310 = NameAndType        #200:#243     // nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n+  #311 = NameAndType        #419:#418     // values:()[Ljava/lang/String;\n+  #312 = NameAndType        #420:#238     // getSkipHeaderRecord:()Z\n+  #313 = NameAndType        #421:#238     // getAllowMissingColumnNames:()Z\n+  #314 = Utf8               java/lang/IllegalArgumentException\n+  #315 = Utf8               java/lang/StringBuilder\n+  #316 = Utf8               A header name is missing in\n+  #317 = NameAndType        #422:#423     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #318 = Class              #424          // java/util/Arrays\n+  #319 = NameAndType        #406:#425     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n+  #320 = NameAndType        #426:#412     // containsKey:(Ljava/lang/Object;)Z\n+  #321 = NameAndType        #427:#238     // getAllowDuplicateHeaderNames:()Z\n+  #322 = Utf8               The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.withAllowDuplicateHeaderNames().\n+  #323 = Utf8               java/lang/Object\n+  #324 = NameAndType        #137:#428     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #325 = Class              #429          // java/lang/Integer\n+  #326 = NameAndType        #430:#431     // valueOf:(I)Ljava/lang/Integer;\n+  #327 = NameAndType        #432:#433     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #328 = NameAndType        #179:#434     // \"<init>\":(I)V\n+  #329 = Class              #435          // java/util/Collections\n+  #330 = NameAndType        #436:#224     // emptyList:()Ljava/util/List;\n+  #331 = NameAndType        #437:#438     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+  #332 = Utf8               org/apache/commons/csv/CSVParser$Headers\n+  #333 = NameAndType        #179:#439     // \"<init>\":(Ljava/util/Map;Ljava/util/List;)V\n+  #334 = NameAndType        #216:#217     // getCurrentLineNumber:()J\n+  #335 = NameAndType        #440:#219     // getFirstEol:()Ljava/lang/String;\n+  #336 = NameAndType        #441:#210     // headerMap:Ljava/util/Map;\n+  #337 = NameAndType        #442:#443     // putAll:(Ljava/util/Map;)V\n+  #338 = NameAndType        #211:#146     // headerNames:Ljava/util/List;\n+  #339 = NameAndType        #234:#187     // isQuoted:Z\n+  #340 = NameAndType        #444:#219     // getNullString:()Ljava/lang/String;\n+  #341 = NameAndType        #239:#238     // isStrictQuoteMode:()Z\n+  #342 = NameAndType        #445:#412     // equals:(Ljava/lang/Object;)Z\n+  #343 = NameAndType        #237:#238     // isClosed:()Z\n+  #344 = NameAndType        #446:#447     // getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n+  #345 = Class              #448          // org/apache/commons/csv/QuoteMode\n+  #346 = NameAndType        #449:#450     // ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n+  #347 = NameAndType        #451:#450     // NON_NUMERIC:Lorg/apache/commons/csv/QuoteMode;\n+  #348 = NameAndType        #452:#193     // clear:()V\n+  #349 = NameAndType        #453:#217     // getCharacterPosition:()J\n+  #350 = NameAndType        #454:#193     // reset:()V\n+  #351 = NameAndType        #455:#456     // nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #352 = NameAndType        #457:#458     // $SwitchMap$org$apache$commons$csv$Token$Type:[I\n+  #353 = NameAndType        #459:#461     // type:Lorg/apache/commons/csv/Token$Type;\n+  #354 = Class              #462          // org/apache/commons/csv/Token$Type\n+  #355 = NameAndType        #463:#464     // ordinal:()I\n+  #356 = NameAndType        #184:#185     // addRecordValue:(Z)V\n+  #357 = NameAndType        #465:#187     // isReady:Z\n+  #358 = Utf8               java/io/IOException\n+  #359 = Utf8               (line\n+  #360 = NameAndType        #422:#466     // append:(J)Ljava/lang/StringBuilder;\n+  #361 = Utf8               ) invalid parse sequence\n+  #362 = Utf8               org/apache/commons/csv/Constants\n+  #363 = NameAndType        #422:#467     // append:(C)Ljava/lang/StringBuilder;\n+  #364 = NameAndType        #422:#468     // append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n+  #365 = NameAndType        #469:#461     // TOKEN:Lorg/apache/commons/csv/Token$Type;\n+  #366 = Utf8               java/lang/IllegalStateException\n+  #367 = Utf8               Unexpected Token type:\n+  #368 = NameAndType        #422:#470     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #369 = Utf8               org/apache/commons/csv/CSVRecord\n+  #370 = NameAndType        #471:#208     // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+  #371 = NameAndType        #472:#473     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #372 = NameAndType        #179:#474     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n+  #373 = NameAndType        #240:#241     // iterator:()Ljava/util/Iterator;\n+  #374 = Utf8               java/util/Spliterator\n+  #375 = Class              #475          // java/util/Spliterators\n+  #376 = NameAndType        #476:#477     // spliteratorUnknownSize:(Ljava/util/Iterator;I)Ljava/util/Spliterator;\n+  #377 = Class              #478          // java/util/stream/StreamSupport\n+  #378 = NameAndType        #249:#479     // stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n+  #379 = Utf8               java/lang/Iterable\n+  #380 = Utf8               java/io/Closeable\n+  #381 = Utf8               org/apache/commons/csv/CSVParser$1\n+  #382 = Utf8               java/lang/String\n+  #383 = Utf8               java/util/Map\n+  #384 = Utf8               java/util/List\n+  #385 = Utf8               java/util/Objects\n+  #386 = Utf8               requireNonNull\n+  #387 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #388 = Utf8               java/io/File\n+  #389 = Utf8               toPath\n+  #390 = Utf8               ()Ljava/nio/file/Path;\n+  #391 = Utf8               (Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n+  #392 = Utf8               java/nio/file/Files\n+  #393 = Utf8               newInputStream\n+  #394 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+  #395 = Utf8               (Ljava/lang/String;)V\n+  #396 = Utf8               java/net/URL\n+  #397 = Utf8               openStream\n+  #398 = Utf8               ()Ljava/io/InputStream;\n+  #399 = Utf8               org/apache/commons/csv/CSVFormat\n+  #400 = Utf8               copy\n+  #401 = Utf8               ()Lorg/apache/commons/csv/CSVFormat;\n+  #402 = Utf8               (Ljava/io/Reader;)V\n+  #403 = Utf8               (Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+  #404 = Utf8               (Lorg/apache/commons/csv/CSVParser;)V\n+  #405 = Utf8               content\n+  #406 = Utf8               toString\n+  #407 = Utf8               getTrim\n+  #408 = Utf8               trim\n+  #409 = Utf8               isEmpty\n+  #410 = Utf8               getTrailingDelimiter\n+  #411 = Utf8               add\n+  #412 = Utf8               (Ljava/lang/Object;)Z\n+  #413 = Utf8               getIgnoreHeaderCase\n+  #414 = Utf8               CASE_INSENSITIVE_ORDER\n+  #415 = Utf8               Ljava/util/Comparator;\n+  #416 = Utf8               (Ljava/util/Comparator;)V\n+  #417 = Utf8               getHeader\n+  #418 = Utf8               ()[Ljava/lang/String;\n+  #419 = Utf8               values\n+  #420 = Utf8               getSkipHeaderRecord\n+  #421 = Utf8               getAllowMissingColumnNames\n+  #422 = Utf8               append\n+  #423 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #424 = Utf8               java/util/Arrays\n+  #425 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n+  #426 = Utf8               containsKey\n+  #427 = Utf8               getAllowDuplicateHeaderNames\n+  #428 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #429 = Utf8               java/lang/Integer\n+  #430 = Utf8               valueOf\n+  #431 = Utf8               (I)Ljava/lang/Integer;\n+  #432 = Utf8               put\n+  #433 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #434 = Utf8               (I)V\n+  #435 = Utf8               java/util/Collections\n+  #436 = Utf8               emptyList\n+  #437 = Utf8               unmodifiableList\n+  #438 = Utf8               (Ljava/util/List;)Ljava/util/List;\n+  #439 = Utf8               (Ljava/util/Map;Ljava/util/List;)V\n+  #440 = Utf8               getFirstEol\n+  #441 = Utf8               headerMap\n+  #442 = Utf8               putAll\n+  #443 = Utf8               (Ljava/util/Map;)V\n+  #444 = Utf8               getNullString\n+  #445 = Utf8               equals\n+  #446 = Utf8               getQuoteMode\n+  #447 = Utf8               ()Lorg/apache/commons/csv/QuoteMode;\n+  #448 = Utf8               org/apache/commons/csv/QuoteMode\n+  #449 = Utf8               ALL_NON_NULL\n+  #450 = Utf8               Lorg/apache/commons/csv/QuoteMode;\n+  #451 = Utf8               NON_NUMERIC\n+  #452 = Utf8               clear\n+  #453 = Utf8               getCharacterPosition\n+  #454 = Utf8               reset\n+  #455 = Utf8               nextToken\n+  #456 = Utf8               (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #457 = Utf8               $SwitchMap$org$apache$commons$csv$Token$Type\n+  #458 = Utf8               [I\n+  #459 = Utf8               type\n+  #460 = Utf8               Type\n+  #461 = Utf8               Lorg/apache/commons/csv/Token$Type;\n+  #462 = Utf8               org/apache/commons/csv/Token$Type\n+  #463 = Utf8               ordinal\n+  #464 = Utf8               ()I\n+  #465 = Utf8               isReady\n+  #466 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #467 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #468 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n+  #469 = Utf8               TOKEN\n+  #470 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #471 = Utf8               EMPTY_STRING_ARRAY\n+  #472 = Utf8               toArray\n+  #473 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #474 = Utf8               (Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n+  #475 = Utf8               java/util/Spliterators\n+  #476 = Utf8               spliteratorUnknownSize\n+  #477 = Utf8               (Ljava/util/Iterator;I)Ljava/util/Spliterator;\n+  #478 = Utf8               java/util/stream/StreamSupport\n+  #479 = Utf8               (Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n {\n   private final org.apache.commons.csv.CSVFormat format;\n     descriptor: Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final org.apache.commons.csv.CSVParser$Headers headers;\n     descriptor: Lorg/apache/commons/csv/CSVParser$Headers;\n@@ -917,14 +911,17 @@\n         20: goto          30\n         23: new           #58                 // class java/util/LinkedHashMap\n         26: dup\n         27: invokespecial #59                 // Method java/util/LinkedHashMap.\"<init>\":()V\n         30: areturn\n       LineNumberTable:\n         line 460: 0\n+        line 461: 10\n+        line 462: 23\n+        line 460: 30\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      31     0  this   Lorg/apache/commons/csv/CSVParser;\n       StackMapTable: number_of_entries = 2\n         frame_type = 23 /* same */\n         frame_type = 70 /* same_locals_1_stack_item */\n           stack = [ class java/util/Map ]\n@@ -1267,15 +1264,15 @@\n          7: invokestatic  #82                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n         10: areturn\n       LineNumberTable:\n         line 593: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/apache/commons/csv/CSVParser;\n-    Signature: #226                         // ()Ljava/util/List<Ljava/lang/String;>;\n+    Signature: #225                         // ()Ljava/util/List<Ljava/lang/String;>;\n \n   public long getRecordNumber();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n@@ -1327,15 +1324,15 @@\n           locals = [ top, class java/util/List ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 19\n           locals = [ class org/apache/commons/csv/CSVParser, class org/apache/commons/csv/CSVRecord, class java/util/List ]\n           stack = []\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #233                         // ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n+    Signature: #231                         // ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n \n   private java.lang.String handleNull(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/lang/String;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=5, args_size=2\n          0: aload_0\n@@ -1455,15 +1452,15 @@\n          1: getfield      #40                 // Field csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n          4: areturn\n       LineNumberTable:\n         line 684: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/csv/CSVParser;\n-    Signature: #244                         // ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n+    Signature: #242                         // ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n \n   org.apache.commons.csv.CSVRecord nextRecord() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/csv/CSVRecord;\n     flags: (0x0000)\n     Code:\n       stack=9, locals=6, args_size=1\n          0: aconst_null\n@@ -1677,16 +1674,16 @@\n         10: invokestatic  #130                // Method java/util/stream/StreamSupport.stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n         13: areturn\n       LineNumberTable:\n         line 746: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      14     0  this   Lorg/apache/commons/csv/CSVParser;\n-    Signature: #254                         // ()Ljava/util/stream/Stream<Lorg/apache/commons/csv/CSVRecord;>;\n+    Signature: #251                         // ()Ljava/util/stream/Stream<Lorg/apache/commons/csv/CSVRecord;>;\n }\n-Signature: #255                         // Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n+Signature: #252                         // Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n SourceFile: \"CSVParser.java\"\n InnerClasses:\n   static #133;                            // class org/apache/commons/csv/CSVParser$1\n   private static final #135= #83 of #14;  // Headers=class org/apache/commons/csv/CSVParser$Headers of class org/apache/commons/csv/CSVParser\n   #136= #38 of #14;                       // CSVRecordIterator=class org/apache/commons/csv/CSVParser$CSVRecordIterator of class org/apache/commons/csv/CSVParser\n-  static final #466= #360 of #27;         // Type=class org/apache/commons/csv/Token$Type of class org/apache/commons/csv/Token\n+  static final #460= #354 of #27;         // Type=class org/apache/commons/csv/Token$Type of class org/apache/commons/csv/Token\n"}]}
