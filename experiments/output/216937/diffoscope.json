{"diffoscope-json-version": 1, "source1": "first/ModuleOpens.class", "source2": "second/ModuleOpens.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -35,30 +35,30 @@\n         }\n     }\n     \n     public void dump(final DataOutputStream file) throws IOException {\n         file.writeShort(this.opensIndex);\n         file.writeShort(this.opensFlags);\n         file.writeShort(this.opensToCount);\n-        for (final int entry : this.opensToIndex) {\n-            file.writeShort(entry);\n+        final int[] opensToIndex = this.opensToIndex;\n+        for (int length = opensToIndex.length, i = 0; i < length; ++i) {\n+            file.writeShort(opensToIndex[i]);\n         }\n     }\n     \n     @Override\n     public String toString() {\n         return \"opens(\" + this.opensIndex + \", \" + this.opensFlags + \", \" + this.opensToCount + \", ...)\";\n     }\n     \n     public String toString(final ConstantPool constantPool) {\n-        final StringBuilder buf = new StringBuilder();\n-        final String packageName = constantPool.constantToString(this.opensIndex, (byte)20);\n-        buf.append(Utility.compactClassName(packageName, false));\n-        buf.append(\", \").append(String.format(\"%04x\", Integer.valueOf(this.opensFlags)));\n-        buf.append(\", to(\").append(this.opensToCount).append(\"):\\n\");\n-        for (final int index : this.opensToIndex) {\n-            final String moduleName = constantPool.getConstantString(index, (byte)19);\n-            buf.append(\"      \").append(Utility.compactClassName(moduleName, false)).append(\"\\n\");\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(Utility.compactClassName(constantPool.constantToString(this.opensIndex, (byte)20), false));\n+        sb.append(\", \").append(String.format(\"%04x\", Integer.valueOf(this.opensFlags)));\n+        sb.append(\", to(\").append(this.opensToCount).append(\"):\\n\");\n+        final int[] opensToIndex = this.opensToIndex;\n+        for (int length = opensToIndex.length, i = 0; i < length; ++i) {\n+            sb.append(\"      \").append(Utility.compactClassName(constantPool.getConstantString(opensToIndex[i], (byte)19), false)).append(\"\\n\");\n         }\n-        return buf.substring();\n+        return sb.substring();\n     }\n }\n"}]}
