{"diffoscope-json-version": 1, "source1": "first/GzipCompressorOutputStream.class", "source2": "second/GzipCompressorOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,71 +1,71 @@\n-  SHA-256 checksum c91b64cd2ad527b45c2af9c6192860f668fbd37e4c51a2d8559f74167a68a7f3\n+  SHA-256 checksum 145458f470286e4d10ab48b24d30e48b8f56f6e36fca959ee3951e9b37493913\n   Compiled from \"GzipCompressorOutputStream.java\"\n public class org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream extends org.apache.commons.compress.compressors.CompressorOutputStream\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #23                         // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n   super_class: #55                        // org/apache/commons/compress/compressors/CompressorOutputStream\n   interfaces: 0, fields: 7, methods: 11, attributes: 1\n Constant pool:\n-    #1 = Class              #112          // org/apache/commons/compress/compressors/gzip/GzipParameters\n-    #2 = Methodref          #1.#113       // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n-    #3 = Methodref          #23.#114      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-    #4 = Methodref          #55.#113      // org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n-    #5 = Fieldref           #23.#115      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflateBuffer:[B\n-    #6 = Class              #116          // java/util/zip/CRC32\n-    #7 = Methodref          #6.#113       // java/util/zip/CRC32.\"<init>\":()V\n-    #8 = Fieldref           #23.#117      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.crc:Ljava/util/zip/CRC32;\n-    #9 = Fieldref           #23.#118      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.out:Ljava/io/OutputStream;\n-   #10 = Class              #119          // java/util/zip/Deflater\n-   #11 = Methodref          #1.#120       // org/apache/commons/compress/compressors/gzip/GzipParameters.getCompressionLevel:()I\n-   #12 = Methodref          #10.#121      // java/util/zip/Deflater.\"<init>\":(IZ)V\n-   #13 = Fieldref           #23.#122      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflater:Ljava/util/zip/Deflater;\n-   #14 = Methodref          #23.#123      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-   #15 = Methodref          #1.#124       // org/apache/commons/compress/compressors/gzip/GzipParameters.getFilename:()Ljava/lang/String;\n-   #16 = Methodref          #1.#125       // org/apache/commons/compress/compressors/gzip/GzipParameters.getComment:()Ljava/lang/String;\n-   #17 = Methodref          #126.#127     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #18 = Fieldref           #128.#129     // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #19 = Methodref          #126.#130     // java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-   #20 = Class              #131          // java/util/zip/GZIPInputStream\n-   #21 = Methodref          #126.#132     // java/nio/ByteBuffer.putShort:(S)Ljava/nio/ByteBuffer;\n-   #22 = Methodref          #126.#133     // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n-   #23 = Class              #134          // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n-   #24 = Methodref          #1.#135       // org/apache/commons/compress/compressors/gzip/GzipParameters.getModificationTime:()J\n+    #1 = Class              #110          // org/apache/commons/compress/compressors/gzip/GzipParameters\n+    #2 = Methodref          #1.#111       // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n+    #3 = Methodref          #23.#112      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+    #4 = Methodref          #55.#111      // org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n+    #5 = Fieldref           #23.#113      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflateBuffer:[B\n+    #6 = Class              #114          // java/util/zip/CRC32\n+    #7 = Methodref          #6.#111       // java/util/zip/CRC32.\"<init>\":()V\n+    #8 = Fieldref           #23.#115      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.crc:Ljava/util/zip/CRC32;\n+    #9 = Fieldref           #23.#116      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.out:Ljava/io/OutputStream;\n+   #10 = Class              #117          // java/util/zip/Deflater\n+   #11 = Methodref          #1.#118       // org/apache/commons/compress/compressors/gzip/GzipParameters.getCompressionLevel:()I\n+   #12 = Methodref          #10.#119      // java/util/zip/Deflater.\"<init>\":(IZ)V\n+   #13 = Fieldref           #23.#120      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflater:Ljava/util/zip/Deflater;\n+   #14 = Methodref          #23.#121      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+   #15 = Methodref          #1.#122       // org/apache/commons/compress/compressors/gzip/GzipParameters.getFilename:()Ljava/lang/String;\n+   #16 = Methodref          #1.#123       // org/apache/commons/compress/compressors/gzip/GzipParameters.getComment:()Ljava/lang/String;\n+   #17 = Methodref          #93.#124      // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #18 = Fieldref           #125.#126     // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #19 = Methodref          #93.#127      // java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+   #20 = Class              #128          // java/util/zip/GZIPInputStream\n+   #21 = Methodref          #93.#129      // java/nio/ByteBuffer.putShort:(S)Ljava/nio/ByteBuffer;\n+   #22 = Methodref          #93.#130      // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+   #23 = Class              #131          // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n+   #24 = Methodref          #1.#132       // org/apache/commons/compress/compressors/gzip/GzipParameters.getModificationTime:()J\n    #25 = Long               1000l\n-   #27 = Methodref          #126.#136     // java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n-   #28 = Methodref          #1.#137       // org/apache/commons/compress/compressors/gzip/GzipParameters.getOperatingSystem:()I\n-   #29 = Methodref          #126.#138     // java/nio/ByteBuffer.array:()[B\n-   #30 = Methodref          #139.#140     // java/io/OutputStream.write:([B)V\n-   #31 = Class              #141          // org/apache/commons/compress/utils/CharsetNames\n-   #32 = String             #142          // ISO-8859-1\n-   #33 = Methodref          #143.#144     // java/lang/String.getBytes:(Ljava/lang/String;)[B\n-   #34 = Methodref          #139.#145     // java/io/OutputStream.write:(I)V\n-   #35 = Methodref          #6.#146       // java/util/zip/CRC32.getValue:()J\n-   #36 = Methodref          #10.#147      // java/util/zip/Deflater.getTotalIn:()I\n-   #37 = Methodref          #23.#148      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.write:([BII)V\n-   #38 = Methodref          #10.#149      // java/util/zip/Deflater.finished:()Z\n-   #39 = Class              #150          // java/io/IOException\n-   #40 = String             #151          // Cannot write more data, the end of the compressed data stream has been reached\n-   #41 = Methodref          #39.#152      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #42 = Methodref          #10.#153      // java/util/zip/Deflater.setInput:([BII)V\n-   #43 = Methodref          #10.#154      // java/util/zip/Deflater.needsInput:()Z\n-   #44 = Methodref          #23.#155      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflate:()V\n-   #45 = Methodref          #6.#156       // java/util/zip/CRC32.update:([BII)V\n-   #46 = Methodref          #10.#157      // java/util/zip/Deflater.deflate:([BII)I\n-   #47 = Methodref          #139.#148     // java/io/OutputStream.write:([BII)V\n-   #48 = Methodref          #10.#158      // java/util/zip/Deflater.finish:()V\n-   #49 = Methodref          #23.#159      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.writeTrailer:()V\n-   #50 = Methodref          #139.#160     // java/io/OutputStream.flush:()V\n-   #51 = Fieldref           #23.#161      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.closed:Z\n-   #52 = Methodref          #23.#158      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.finish:()V\n-   #53 = Methodref          #10.#162      // java/util/zip/Deflater.end:()V\n-   #54 = Methodref          #139.#163     // java/io/OutputStream.close:()V\n-   #55 = Class              #164          // org/apache/commons/compress/compressors/CompressorOutputStream\n+   #27 = Methodref          #93.#133      // java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n+   #28 = Methodref          #1.#134       // org/apache/commons/compress/compressors/gzip/GzipParameters.getOperatingSystem:()I\n+   #29 = Methodref          #93.#135      // java/nio/ByteBuffer.array:()[B\n+   #30 = Methodref          #136.#137     // java/io/OutputStream.write:([B)V\n+   #31 = Class              #138          // org/apache/commons/compress/utils/CharsetNames\n+   #32 = String             #139          // ISO-8859-1\n+   #33 = Methodref          #92.#140      // java/lang/String.getBytes:(Ljava/lang/String;)[B\n+   #34 = Methodref          #136.#141     // java/io/OutputStream.write:(I)V\n+   #35 = Methodref          #6.#142       // java/util/zip/CRC32.getValue:()J\n+   #36 = Methodref          #10.#143      // java/util/zip/Deflater.getTotalIn:()I\n+   #37 = Methodref          #23.#144      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.write:([BII)V\n+   #38 = Methodref          #10.#145      // java/util/zip/Deflater.finished:()Z\n+   #39 = Class              #146          // java/io/IOException\n+   #40 = String             #147          // Cannot write more data, the end of the compressed data stream has been reached\n+   #41 = Methodref          #39.#148      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #42 = Methodref          #10.#149      // java/util/zip/Deflater.setInput:([BII)V\n+   #43 = Methodref          #10.#150      // java/util/zip/Deflater.needsInput:()Z\n+   #44 = Methodref          #23.#151      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflate:()V\n+   #45 = Methodref          #6.#152       // java/util/zip/CRC32.update:([BII)V\n+   #46 = Methodref          #10.#153      // java/util/zip/Deflater.deflate:([BII)I\n+   #47 = Methodref          #136.#144     // java/io/OutputStream.write:([BII)V\n+   #48 = Methodref          #10.#154      // java/util/zip/Deflater.finish:()V\n+   #49 = Methodref          #23.#155      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.writeTrailer:()V\n+   #50 = Methodref          #136.#156     // java/io/OutputStream.flush:()V\n+   #51 = Fieldref           #23.#157      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.closed:Z\n+   #52 = Methodref          #23.#154      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.finish:()V\n+   #53 = Methodref          #10.#158      // java/util/zip/Deflater.end:()V\n+   #54 = Methodref          #136.#159     // java/io/OutputStream.close:()V\n+   #55 = Class              #160          // org/apache/commons/compress/compressors/CompressorOutputStream\n    #56 = Utf8               FNAME\n    #57 = Utf8               I\n    #58 = Utf8               ConstantValue\n    #59 = Integer            8\n    #60 = Utf8               FCOMMENT\n    #61 = Integer            16\n    #62 = Utf8               out\n@@ -94,126 +94,122 @@\n    #85 = Utf8               filename\n    #86 = Utf8               Ljava/lang/String;\n    #87 = Utf8               comment\n    #88 = Utf8               buffer\n    #89 = Utf8               Ljava/nio/ByteBuffer;\n    #90 = Utf8               compressionLevel\n    #91 = Utf8               StackMapTable\n-   #92 = Class              #134          // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n-   #93 = Class              #112          // org/apache/commons/compress/compressors/gzip/GzipParameters\n-   #94 = Class              #165          // java/lang/String\n-   #95 = Class              #166          // java/nio/ByteBuffer\n-   #96 = Utf8               writeTrailer\n-   #97 = Utf8               ()V\n-   #98 = Utf8               write\n-   #99 = Utf8               (I)V\n-  #100 = Utf8               b\n-  #101 = Utf8               ([B)V\n-  #102 = Utf8               ([BII)V\n-  #103 = Utf8               offset\n-  #104 = Utf8               length\n-  #105 = Utf8               deflate\n-  #106 = Utf8               finish\n-  #107 = Utf8               flush\n-  #108 = Utf8               close\n-  #109 = Class              #167          // java/lang/Throwable\n-  #110 = Utf8               SourceFile\n-  #111 = Utf8               GzipCompressorOutputStream.java\n-  #112 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n-  #113 = NameAndType        #72:#97       // \"<init>\":()V\n-  #114 = NameAndType        #72:#80       // \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-  #115 = NameAndType        #66:#67       // deflateBuffer:[B\n-  #116 = Utf8               java/util/zip/CRC32\n-  #117 = NameAndType        #70:#71       // crc:Ljava/util/zip/CRC32;\n-  #118 = NameAndType        #62:#63       // out:Ljava/io/OutputStream;\n-  #119 = Utf8               java/util/zip/Deflater\n-  #120 = NameAndType        #168:#169     // getCompressionLevel:()I\n-  #121 = NameAndType        #72:#170      // \"<init>\":(IZ)V\n-  #122 = NameAndType        #64:#65       // deflater:Ljava/util/zip/Deflater;\n-  #123 = NameAndType        #83:#84       // writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-  #124 = NameAndType        #171:#172     // getFilename:()Ljava/lang/String;\n-  #125 = NameAndType        #173:#172     // getComment:()Ljava/lang/String;\n-  #126 = Class              #166          // java/nio/ByteBuffer\n-  #127 = NameAndType        #174:#175     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #128 = Class              #176          // java/nio/ByteOrder\n-  #129 = NameAndType        #177:#178     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-  #130 = NameAndType        #179:#180     // order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-  #131 = Utf8               java/util/zip/GZIPInputStream\n-  #132 = NameAndType        #181:#182     // putShort:(S)Ljava/nio/ByteBuffer;\n-  #133 = NameAndType        #183:#184     // put:(B)Ljava/nio/ByteBuffer;\n-  #134 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n-  #135 = NameAndType        #185:#186     // getModificationTime:()J\n-  #136 = NameAndType        #187:#175     // putInt:(I)Ljava/nio/ByteBuffer;\n-  #137 = NameAndType        #188:#169     // getOperatingSystem:()I\n-  #138 = NameAndType        #189:#190     // array:()[B\n-  #139 = Class              #191          // java/io/OutputStream\n-  #140 = NameAndType        #98:#101      // write:([B)V\n-  #141 = Utf8               org/apache/commons/compress/utils/CharsetNames\n-  #142 = Utf8               ISO-8859-1\n-  #143 = Class              #165          // java/lang/String\n-  #144 = NameAndType        #192:#193     // getBytes:(Ljava/lang/String;)[B\n-  #145 = NameAndType        #98:#99       // write:(I)V\n-  #146 = NameAndType        #194:#186     // getValue:()J\n-  #147 = NameAndType        #195:#169     // getTotalIn:()I\n-  #148 = NameAndType        #98:#102      // write:([BII)V\n-  #149 = NameAndType        #196:#197     // finished:()Z\n-  #150 = Utf8               java/io/IOException\n-  #151 = Utf8               Cannot write more data, the end of the compressed data stream has been reached\n-  #152 = NameAndType        #72:#198      // \"<init>\":(Ljava/lang/String;)V\n-  #153 = NameAndType        #199:#102     // setInput:([BII)V\n-  #154 = NameAndType        #200:#197     // needsInput:()Z\n-  #155 = NameAndType        #105:#97      // deflate:()V\n-  #156 = NameAndType        #201:#102     // update:([BII)V\n-  #157 = NameAndType        #105:#202     // deflate:([BII)I\n-  #158 = NameAndType        #106:#97      // finish:()V\n-  #159 = NameAndType        #96:#97       // writeTrailer:()V\n-  #160 = NameAndType        #107:#97      // flush:()V\n-  #161 = NameAndType        #68:#69       // closed:Z\n-  #162 = NameAndType        #203:#97      // end:()V\n-  #163 = NameAndType        #108:#97      // close:()V\n-  #164 = Utf8               org/apache/commons/compress/compressors/CompressorOutputStream\n-  #165 = Utf8               java/lang/String\n-  #166 = Utf8               java/nio/ByteBuffer\n-  #167 = Utf8               java/lang/Throwable\n-  #168 = Utf8               getCompressionLevel\n-  #169 = Utf8               ()I\n-  #170 = Utf8               (IZ)V\n-  #171 = Utf8               getFilename\n-  #172 = Utf8               ()Ljava/lang/String;\n-  #173 = Utf8               getComment\n-  #174 = Utf8               allocate\n-  #175 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #176 = Utf8               java/nio/ByteOrder\n-  #177 = Utf8               LITTLE_ENDIAN\n-  #178 = Utf8               Ljava/nio/ByteOrder;\n-  #179 = Utf8               order\n-  #180 = Utf8               (Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-  #181 = Utf8               putShort\n-  #182 = Utf8               (S)Ljava/nio/ByteBuffer;\n-  #183 = Utf8               put\n-  #184 = Utf8               (B)Ljava/nio/ByteBuffer;\n-  #185 = Utf8               getModificationTime\n-  #186 = Utf8               ()J\n-  #187 = Utf8               putInt\n-  #188 = Utf8               getOperatingSystem\n-  #189 = Utf8               array\n-  #190 = Utf8               ()[B\n-  #191 = Utf8               java/io/OutputStream\n-  #192 = Utf8               getBytes\n-  #193 = Utf8               (Ljava/lang/String;)[B\n-  #194 = Utf8               getValue\n-  #195 = Utf8               getTotalIn\n-  #196 = Utf8               finished\n-  #197 = Utf8               ()Z\n-  #198 = Utf8               (Ljava/lang/String;)V\n-  #199 = Utf8               setInput\n-  #200 = Utf8               needsInput\n-  #201 = Utf8               update\n-  #202 = Utf8               ([BII)I\n-  #203 = Utf8               end\n+   #92 = Class              #161          // java/lang/String\n+   #93 = Class              #162          // java/nio/ByteBuffer\n+   #94 = Utf8               writeTrailer\n+   #95 = Utf8               ()V\n+   #96 = Utf8               write\n+   #97 = Utf8               (I)V\n+   #98 = Utf8               b\n+   #99 = Utf8               ([B)V\n+  #100 = Utf8               ([BII)V\n+  #101 = Utf8               offset\n+  #102 = Utf8               length\n+  #103 = Utf8               deflate\n+  #104 = Utf8               finish\n+  #105 = Utf8               flush\n+  #106 = Utf8               close\n+  #107 = Class              #163          // java/lang/Throwable\n+  #108 = Utf8               SourceFile\n+  #109 = Utf8               GzipCompressorOutputStream.java\n+  #110 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n+  #111 = NameAndType        #72:#95       // \"<init>\":()V\n+  #112 = NameAndType        #72:#80       // \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+  #113 = NameAndType        #66:#67       // deflateBuffer:[B\n+  #114 = Utf8               java/util/zip/CRC32\n+  #115 = NameAndType        #70:#71       // crc:Ljava/util/zip/CRC32;\n+  #116 = NameAndType        #62:#63       // out:Ljava/io/OutputStream;\n+  #117 = Utf8               java/util/zip/Deflater\n+  #118 = NameAndType        #164:#165     // getCompressionLevel:()I\n+  #119 = NameAndType        #72:#166      // \"<init>\":(IZ)V\n+  #120 = NameAndType        #64:#65       // deflater:Ljava/util/zip/Deflater;\n+  #121 = NameAndType        #83:#84       // writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+  #122 = NameAndType        #167:#168     // getFilename:()Ljava/lang/String;\n+  #123 = NameAndType        #169:#168     // getComment:()Ljava/lang/String;\n+  #124 = NameAndType        #170:#171     // allocate:(I)Ljava/nio/ByteBuffer;\n+  #125 = Class              #172          // java/nio/ByteOrder\n+  #126 = NameAndType        #173:#174     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+  #127 = NameAndType        #175:#176     // order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+  #128 = Utf8               java/util/zip/GZIPInputStream\n+  #129 = NameAndType        #177:#178     // putShort:(S)Ljava/nio/ByteBuffer;\n+  #130 = NameAndType        #179:#180     // put:(B)Ljava/nio/ByteBuffer;\n+  #131 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n+  #132 = NameAndType        #181:#182     // getModificationTime:()J\n+  #133 = NameAndType        #183:#171     // putInt:(I)Ljava/nio/ByteBuffer;\n+  #134 = NameAndType        #184:#165     // getOperatingSystem:()I\n+  #135 = NameAndType        #185:#186     // array:()[B\n+  #136 = Class              #187          // java/io/OutputStream\n+  #137 = NameAndType        #96:#99       // write:([B)V\n+  #138 = Utf8               org/apache/commons/compress/utils/CharsetNames\n+  #139 = Utf8               ISO-8859-1\n+  #140 = NameAndType        #188:#189     // getBytes:(Ljava/lang/String;)[B\n+  #141 = NameAndType        #96:#97       // write:(I)V\n+  #142 = NameAndType        #190:#182     // getValue:()J\n+  #143 = NameAndType        #191:#165     // getTotalIn:()I\n+  #144 = NameAndType        #96:#100      // write:([BII)V\n+  #145 = NameAndType        #192:#193     // finished:()Z\n+  #146 = Utf8               java/io/IOException\n+  #147 = Utf8               Cannot write more data, the end of the compressed data stream has been reached\n+  #148 = NameAndType        #72:#194      // \"<init>\":(Ljava/lang/String;)V\n+  #149 = NameAndType        #195:#100     // setInput:([BII)V\n+  #150 = NameAndType        #196:#193     // needsInput:()Z\n+  #151 = NameAndType        #103:#95      // deflate:()V\n+  #152 = NameAndType        #197:#100     // update:([BII)V\n+  #153 = NameAndType        #103:#198     // deflate:([BII)I\n+  #154 = NameAndType        #104:#95      // finish:()V\n+  #155 = NameAndType        #94:#95       // writeTrailer:()V\n+  #156 = NameAndType        #105:#95      // flush:()V\n+  #157 = NameAndType        #68:#69       // closed:Z\n+  #158 = NameAndType        #199:#95      // end:()V\n+  #159 = NameAndType        #106:#95      // close:()V\n+  #160 = Utf8               org/apache/commons/compress/compressors/CompressorOutputStream\n+  #161 = Utf8               java/lang/String\n+  #162 = Utf8               java/nio/ByteBuffer\n+  #163 = Utf8               java/lang/Throwable\n+  #164 = Utf8               getCompressionLevel\n+  #165 = Utf8               ()I\n+  #166 = Utf8               (IZ)V\n+  #167 = Utf8               getFilename\n+  #168 = Utf8               ()Ljava/lang/String;\n+  #169 = Utf8               getComment\n+  #170 = Utf8               allocate\n+  #171 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #172 = Utf8               java/nio/ByteOrder\n+  #173 = Utf8               LITTLE_ENDIAN\n+  #174 = Utf8               Ljava/nio/ByteOrder;\n+  #175 = Utf8               order\n+  #176 = Utf8               (Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+  #177 = Utf8               putShort\n+  #178 = Utf8               (S)Ljava/nio/ByteBuffer;\n+  #179 = Utf8               put\n+  #180 = Utf8               (B)Ljava/nio/ByteBuffer;\n+  #181 = Utf8               getModificationTime\n+  #182 = Utf8               ()J\n+  #183 = Utf8               putInt\n+  #184 = Utf8               getOperatingSystem\n+  #185 = Utf8               array\n+  #186 = Utf8               ()[B\n+  #187 = Utf8               java/io/OutputStream\n+  #188 = Utf8               getBytes\n+  #189 = Utf8               (Ljava/lang/String;)[B\n+  #190 = Utf8               getValue\n+  #191 = Utf8               getTotalIn\n+  #192 = Utf8               finished\n+  #193 = Utf8               ()Z\n+  #194 = Utf8               (Ljava/lang/String;)V\n+  #195 = Utf8               setInput\n+  #196 = Utf8               needsInput\n+  #197 = Utf8               update\n+  #198 = Utf8               ([BII)I\n+  #199 = Utf8               end\n {\n   private static final int FNAME = 8;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 8\n \n   private static final int FCOMMENT = 16;\n"}]}
