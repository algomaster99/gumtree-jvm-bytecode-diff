{"diffoscope-json-version": 1, "source1": "first/FailableDoubleToIntFunction.class", "source2": "second/FailableDoubleToIntFunction.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,87 +1,87 @@\n-  SHA-256 checksum b565c48ec6de0031ccfdee22894d2660772317161f989d87cd245303d975087c\n+  SHA-256 checksum ce1daaa7177b5fa797605690b5bdd6dae4dfb2be35c8da11c9e49b5a94e48e72\n   Compiled from \"FailableDoubleToIntFunction.java\"\n public interface org.apache.commons.lang3.function.FailableDoubleToIntFunction<E extends java.lang.Throwable>\n   minor version: 0\n   major version: 52\n   flags: (0x0601) ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT\n-  this_class: #3                          // org/apache/commons/lang3/function/FailableDoubleToIntFunction\n-  super_class: #4                         // java/lang/Object\n+  this_class: #2                          // org/apache/commons/lang3/function/FailableDoubleToIntFunction\n+  super_class: #11                        // java/lang/Object\n   interfaces: 0, fields: 1, methods: 4, attributes: 5\n Constant pool:\n-   #1 = Fieldref           #3.#26         // org/apache/commons/lang3/function/FailableDoubleToIntFunction.NOP:Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n-   #2 = InvokeDynamic      #0:#31         // #0:applyAsInt:()Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n-   #3 = Class              #32            // org/apache/commons/lang3/function/FailableDoubleToIntFunction\n-   #4 = Class              #33            // java/lang/Object\n+   #1 = Fieldref           #2.#3          // org/apache/commons/lang3/function/FailableDoubleToIntFunction.NOP:Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n+   #2 = Class              #4             // org/apache/commons/lang3/function/FailableDoubleToIntFunction\n+   #3 = NameAndType        #5:#6          // NOP:Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n+   #4 = Utf8               org/apache/commons/lang3/function/FailableDoubleToIntFunction\n    #5 = Utf8               NOP\n    #6 = Utf8               Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n-   #7 = Utf8               nop\n-   #8 = Utf8               ()Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n-   #9 = Utf8               Code\n-  #10 = Utf8               LineNumberTable\n-  #11 = Utf8               Signature\n-  #12 = Utf8               <E:Ljava/lang/Throwable;>()Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction<TE;>;\n-  #13 = Utf8               applyAsInt\n-  #14 = Utf8               (D)I\n-  #15 = Utf8               Exceptions\n-  #16 = Class              #34            // java/lang/Throwable\n-  #17 = Utf8               (D)I^TE;\n-  #18 = Utf8               lambda$static$0\n-  #19 = Utf8               <clinit>\n-  #20 = Utf8               ()V\n-  #21 = Utf8               <E:Ljava/lang/Throwable;>Ljava/lang/Object;\n-  #22 = Utf8               SourceFile\n-  #23 = Utf8               FailableDoubleToIntFunction.java\n-  #24 = Utf8               RuntimeVisibleAnnotations\n-  #25 = Utf8               Ljava/lang/FunctionalInterface;\n-  #26 = NameAndType        #5:#6          // NOP:Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n-  #27 = Utf8               BootstrapMethods\n-  #28 = MethodHandle       6:#35          // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #29 = MethodType         #14            //  (D)I\n-  #30 = MethodHandle       6:#36          // REF_invokeStatic org/apache/commons/lang3/function/FailableDoubleToIntFunction.lambda$static$0:(D)I\n-  #31 = NameAndType        #13:#8         // applyAsInt:()Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n-  #32 = Utf8               org/apache/commons/lang3/function/FailableDoubleToIntFunction\n-  #33 = Utf8               java/lang/Object\n-  #34 = Utf8               java/lang/Throwable\n-  #35 = Methodref          #37.#38        // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #36 = InterfaceMethodref #3.#39         // org/apache/commons/lang3/function/FailableDoubleToIntFunction.lambda$static$0:(D)I\n-  #37 = Class              #40            // java/lang/invoke/LambdaMetafactory\n-  #38 = NameAndType        #41:#45        // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #39 = NameAndType        #18:#14        // lambda$static$0:(D)I\n-  #40 = Utf8               java/lang/invoke/LambdaMetafactory\n-  #41 = Utf8               metafactory\n-  #42 = Class              #47            // java/lang/invoke/MethodHandles$Lookup\n-  #43 = Utf8               Lookup\n-  #44 = Utf8               InnerClasses\n-  #45 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #46 = Class              #48            // java/lang/invoke/MethodHandles\n-  #47 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #48 = Utf8               java/lang/invoke/MethodHandles\n+   #7 = InvokeDynamic      #0:#8          // #0:applyAsInt:()Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n+   #8 = NameAndType        #9:#10         // applyAsInt:()Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n+   #9 = Utf8               applyAsInt\n+  #10 = Utf8               ()Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n+  #11 = Class              #12            // java/lang/Object\n+  #12 = Utf8               java/lang/Object\n+  #13 = Utf8               nop\n+  #14 = Utf8               Code\n+  #15 = Utf8               LineNumberTable\n+  #16 = Utf8               Signature\n+  #17 = Utf8               <E:Ljava/lang/Throwable;>()Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction<TE;>;\n+  #18 = Utf8               (D)I\n+  #19 = Utf8               Exceptions\n+  #20 = Class              #21            // java/lang/Throwable\n+  #21 = Utf8               java/lang/Throwable\n+  #22 = Utf8               (D)I^TE;\n+  #23 = Utf8               lambda$static$0\n+  #24 = Utf8               <clinit>\n+  #25 = Utf8               ()V\n+  #26 = Utf8               <E:Ljava/lang/Throwable;>Ljava/lang/Object;\n+  #27 = Utf8               SourceFile\n+  #28 = Utf8               FailableDoubleToIntFunction.java\n+  #29 = Utf8               RuntimeVisibleAnnotations\n+  #30 = Utf8               Ljava/lang/FunctionalInterface;\n+  #31 = Utf8               BootstrapMethods\n+  #32 = MethodHandle       6:#33          // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #33 = Methodref          #34.#35        // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #34 = Class              #36            // java/lang/invoke/LambdaMetafactory\n+  #35 = NameAndType        #37:#38        // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #36 = Utf8               java/lang/invoke/LambdaMetafactory\n+  #37 = Utf8               metafactory\n+  #38 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #39 = MethodType         #18            //  (D)I\n+  #40 = MethodHandle       6:#41          // REF_invokeStatic org/apache/commons/lang3/function/FailableDoubleToIntFunction.lambda$static$0:(D)I\n+  #41 = InterfaceMethodref #2.#42         // org/apache/commons/lang3/function/FailableDoubleToIntFunction.lambda$static$0:(D)I\n+  #42 = NameAndType        #23:#18        // lambda$static$0:(D)I\n+  #43 = Utf8               InnerClasses\n+  #44 = Class              #45            // java/lang/invoke/MethodHandles$Lookup\n+  #45 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #46 = Class              #47            // java/lang/invoke/MethodHandles\n+  #47 = Utf8               java/lang/invoke/MethodHandles\n+  #48 = Utf8               Lookup\n {\n   public static final org.apache.commons.lang3.function.FailableDoubleToIntFunction NOP;\n     descriptor: Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n \n   public static <E extends java.lang.Throwable> org.apache.commons.lang3.function.FailableDoubleToIntFunction<E> nop();\n     descriptor: ()Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n          0: getstatic     #1                  // Field NOP:Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n          3: areturn\n       LineNumberTable:\n         line 42: 0\n-    Signature: #12                          // <E:Ljava/lang/Throwable;>()Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction<TE;>;\n+    Signature: #17                          // <E:Ljava/lang/Throwable;>()Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction<TE;>;\n \n   public abstract int applyAsInt(double) throws E;\n     descriptor: (D)I\n     flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT\n     Exceptions:\n       throws java.lang.Throwable\n-    Signature: #17                          // (D)I^TE;\n+    Signature: #22                          // (D)I^TE;\n \n   private static int lambda$static$0(double) throws java.lang.Throwable;\n     descriptor: (D)I\n     flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=1, locals=2, args_size=1\n          0: iconst_0\n@@ -92,26 +92,26 @@\n       throws java.lang.Throwable\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n-         0: invokedynamic #2,  0              // InvokeDynamic #0:applyAsInt:()Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n+         0: invokedynamic #7,  0              // InvokeDynamic #0:applyAsInt:()Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n          5: putstatic     #1                  // Field NOP:Lorg/apache/commons/lang3/function/FailableDoubleToIntFunction;\n          8: return\n       LineNumberTable:\n         line 33: 0\n }\n-Signature: #21                          // <E:Ljava/lang/Throwable;>Ljava/lang/Object;\n+Signature: #26                          // <E:Ljava/lang/Throwable;>Ljava/lang/Object;\n SourceFile: \"FailableDoubleToIntFunction.java\"\n RuntimeVisibleAnnotations:\n-  0: #25()\n+  0: #30()\n     java.lang.FunctionalInterface\n-InnerClasses:\n-  public static final #43= #42 of #46;    // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #28 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  0: #32 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #29 (D)I\n-      #30 REF_invokeStatic org/apache/commons/lang3/function/FailableDoubleToIntFunction.lambda$static$0:(D)I\n-      #29 (D)I\n+      #39 (D)I\n+      #40 REF_invokeStatic org/apache/commons/lang3/function/FailableDoubleToIntFunction.lambda$static$0:(D)I\n+      #39 (D)I\n+InnerClasses:\n+  public static final #48= #44 of #46;    // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
