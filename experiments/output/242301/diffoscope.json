{"diffoscope-json-version": 1, "source1": "first/AbstractClassPathRepository.class", "source2": "second/AbstractClassPathRepository.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,61 +20,60 @@\n     public abstract JavaClass findClass(final String p0);\n     \n     public ClassPath getClassPath() {\n         return this.classPath;\n     }\n     \n     public JavaClass loadClass(final Class<?> clazz) throws ClassNotFoundException {\n-        final String className = clazz.getName();\n-        final JavaClass repositoryClass = this.findClass(className);\n-        if (repositoryClass != null) {\n-            return repositoryClass;\n-        }\n-        String name = className;\n-        final int i = name.lastIndexOf(46);\n-        if (i > 0) {\n-            name = name.substring(i + 1);\n+        final String name = clazz.getName();\n+        final JavaClass class1 = this.findClass(name);\n+        if (class1 != null) {\n+            return class1;\n+        }\n+        String substring = name;\n+        final int lastIndex = substring.lastIndexOf(46);\n+        if (lastIndex > 0) {\n+            substring = substring.substring(lastIndex + 1);\n         }\n-        try (final InputStream clsStream = clazz.getResourceAsStream(name + \".class\")) {\n-            return this.loadClass(clsStream, className);\n+        try (final InputStream resourceAsStream = clazz.getResourceAsStream(substring + \".class\")) {\n+            return this.loadClass(resourceAsStream, name);\n         }\n-        catch (final IOException e) {\n+        catch (final IOException ex) {\n             return null;\n         }\n     }\n     \n-    private JavaClass loadClass(final InputStream inputStream, final String className) throws ClassNotFoundException {\n+    private JavaClass loadClass(final InputStream inputStream, final String s) throws ClassNotFoundException {\n         try {\n             if (inputStream != null) {\n-                final ClassParser parser = new ClassParser(inputStream, className);\n-                final JavaClass clazz = parser.parse();\n-                this.storeClass(clazz);\n-                return clazz;\n+                final JavaClass parse = new ClassParser(inputStream, s).parse();\n+                this.storeClass(parse);\n+                return parse;\n             }\n         }\n-        catch (final IOException e) {\n-            throw new ClassNotFoundException(\"Exception while looking for class \" + className + \": \" + e, e);\n+        catch (final IOException ex) {\n+            throw new ClassNotFoundException(\"Exception while looking for class \" + s + \": \" + ex, ex);\n         }\n-        throw new ClassNotFoundException(\"ClassRepository could not load \" + className);\n+        throw new ClassNotFoundException(\"ClassRepository could not load \" + s);\n     }\n     \n-    public JavaClass loadClass(String className) throws ClassNotFoundException {\n-        if (className == null || className.isEmpty()) {\n-            throw new IllegalArgumentException(\"Invalid class name \" + className);\n-        }\n-        className = Utility.pathToPackage(className);\n-        final JavaClass clazz = this.findClass(className);\n-        if (clazz != null) {\n-            return clazz;\n+    public JavaClass loadClass(String pathToPackage) throws ClassNotFoundException {\n+        if (pathToPackage == null || pathToPackage.isEmpty()) {\n+            throw new IllegalArgumentException(\"Invalid class name \" + pathToPackage);\n+        }\n+        pathToPackage = Utility.pathToPackage(pathToPackage);\n+        final JavaClass class1 = this.findClass(pathToPackage);\n+        if (class1 != null) {\n+            return class1;\n         }\n-        try (final InputStream inputStream = this.classPath.getInputStream(className)) {\n-            return this.loadClass(inputStream, className);\n+        try (final InputStream inputStream = this.classPath.getInputStream(pathToPackage)) {\n+            return this.loadClass(inputStream, pathToPackage);\n         }\n-        catch (final IOException e) {\n-            throw new ClassNotFoundException(\"Exception while looking for class \" + className + \": \" + e, e);\n+        catch (final IOException ex) {\n+            throw new ClassNotFoundException(\"Exception while looking for class \" + pathToPackage + \": \" + ex, ex);\n         }\n     }\n     \n     public abstract void removeClass(final JavaClass p0);\n     \n     public abstract void storeClass(final JavaClass p0);\n }\n"}]}
