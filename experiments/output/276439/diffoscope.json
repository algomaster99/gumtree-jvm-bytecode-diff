{"diffoscope-json-version": 1, "source1": "first/TagParser.class", "source2": "second/TagParser.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,98 +4,99 @@\n import java.util.LinkedList;\n import java.util.List;\n \n class TagParser\n {\n     private final List<HtmlTag> tags;\n     \n-    TagParser(final String[] text, final int lineNo) {\n+    TagParser(final String[] array, final int n) {\n         this.tags = new LinkedList<HtmlTag>();\n-        this.parseTags(text, lineNo);\n+        this.parseTags(array, n);\n     }\n     \n     public HtmlTag nextTag() {\n         return this.tags.remove(0);\n     }\n     \n     public boolean hasNextTag() {\n         return !this.tags.isEmpty();\n     }\n     \n-    private void add(final HtmlTag tag) {\n-        this.tags.add(tag);\n+    private void add(final HtmlTag htmlTag) {\n+        this.tags.add(htmlTag);\n     }\n     \n-    private void parseTags(final String[] text, final int lineNo) {\n-        final int nLines = text.length;\n-        for (TagParser.Point position = findChar(text, '<', new TagParser.Point(0, 0)); position.getLineNo() < nLines; position = findChar(text, '<', position)) {\n-            if (isCommentTag(text, position)) {\n-                position = skipHtmlComment(text, position);\n+    private void parseTags(final String[] array, final int n) {\n+        final int length = array.length;\n+        TagParser.Point point2;\n+        for (TagParser.Point point = findChar(array, '<', new TagParser.Point(0, 0)); point.getLineNo() < length; point = findChar(array, '<', point2)) {\n+            if (isCommentTag(array, point)) {\n+                point2 = skipHtmlComment(array, point);\n             }\n-            else if (isTag(text, position)) {\n-                position = this.parseTag(text, lineNo, nLines, position);\n+            else if (isTag(array, point)) {\n+                point2 = this.parseTag(array, n, length, point);\n             }\n             else {\n-                position = getNextPoint(text, position);\n+                point2 = getNextPoint(array, point);\n             }\n         }\n     }\n     \n-    private TagParser.Point parseTag(final String[] text, final int lineNo, final int nLines, final TagParser.Point position) {\n-        final TagParser.Point endTag = findChar(text, '>', position);\n-        final boolean incompleteTag = endTag.getLineNo() >= nLines;\n+    private TagParser.Point parseTag(final String[] array, final int n, final int n2, final TagParser.Point point) {\n+        final TagParser.Point char1 = findChar(array, '>', point);\n+        final boolean b = char1.getLineNo() >= n2;\n         String tagId;\n-        if (incompleteTag) {\n+        if (b) {\n             tagId = \"\";\n         }\n         else {\n-            tagId = getTagId(text, position);\n+            tagId = getTagId(array, point);\n         }\n-        final boolean closedTag = endTag.getLineNo() < nLines && text[endTag.getLineNo()].charAt(endTag.getColumnNo() - 1) == '/';\n-        this.add(new HtmlTag(tagId, position.getLineNo() + lineNo, position.getColumnNo(), closedTag, incompleteTag, text[position.getLineNo()]));\n-        return endTag;\n-    }\n-    \n-    private static boolean isTag(final String[] javadocText, final TagParser.Point pos) {\n-        final int column = pos.getColumnNo() + 1;\n-        final String text = javadocText[pos.getLineNo()];\n-        return column >= text.length() || Character.isJavaIdentifierStart(text.charAt(column)) || text.charAt(column) == '/';\n-    }\n-    \n-    private static String getTagId(final String[] javadocText, final TagParser.Point tagStart) {\n-        String tagId = \"\";\n-        int column = tagStart.getColumnNo() + 1;\n-        String text = javadocText[tagStart.getLineNo()];\n-        if (column < text.length()) {\n-            if (text.charAt(column) == '/') {\n-                ++column;\n+        this.add(new HtmlTag(tagId, point.getLineNo() + n, point.getColumnNo(), char1.getLineNo() < n2 && array[char1.getLineNo()].charAt(char1.getColumnNo() - 1) == '/', b, array[point.getLineNo()]));\n+        return char1;\n+    }\n+    \n+    private static boolean isTag(final String[] array, final TagParser.Point point) {\n+        final int n = point.getColumnNo() + 1;\n+        final String s = array[point.getLineNo()];\n+        return n >= s.length() || Character.isJavaIdentifierStart(s.charAt(n)) || s.charAt(n) == '/';\n+    }\n+    \n+    private static String getTagId(final String[] array, final TagParser.Point point) {\n+        String substring = \"\";\n+        int n = point.getColumnNo() + 1;\n+        final String s = array[point.getLineNo()];\n+        if (n < s.length()) {\n+            if (s.charAt(n) == '/') {\n+                ++n;\n             }\n-            int position;\n-            for (text = text.substring(column).trim(), position = 0; position < text.length() && (Character.isJavaIdentifierStart(text.charAt(position)) || Character.isJavaIdentifierPart(text.charAt(position))); ++position) {}\n-            tagId = text.substring(0, position);\n+            String trim;\n+            int endIndex;\n+            for (trim = s.substring(n).trim(), endIndex = 0; endIndex < trim.length() && (Character.isJavaIdentifierStart(trim.charAt(endIndex)) || Character.isJavaIdentifierPart(trim.charAt(endIndex))); ++endIndex) {}\n+            substring = trim.substring(0, endIndex);\n         }\n-        return tagId;\n+        return substring;\n     }\n     \n-    private static boolean isCommentTag(final String[] text, final TagParser.Point pos) {\n-        return text[pos.getLineNo()].startsWith(\"<!--\", pos.getColumnNo());\n+    private static boolean isCommentTag(final String[] array, final TagParser.Point point) {\n+        return array[point.getLineNo()].startsWith(\"<!--\", point.getColumnNo());\n     }\n     \n-    private static TagParser.Point skipHtmlComment(final String[] text, final TagParser.Point fromPoint) {\n-        TagParser.Point toPoint;\n-        for (toPoint = fromPoint, toPoint = findChar(text, '>', toPoint); toPoint.getLineNo() < text.length && !text[toPoint.getLineNo()].substring(0, toPoint.getColumnNo() + 1).endsWith(\"-->\"); toPoint = findChar(text, '>', getNextPoint(text, toPoint))) {}\n-        return toPoint;\n+    private static TagParser.Point skipHtmlComment(final String[] array, final TagParser.Point point) {\n+        TagParser.Point point2;\n+        for (point2 = findChar(array, '>', point); point2.getLineNo() < array.length && !array[point2.getLineNo()].substring(0, point2.getColumnNo() + 1).endsWith(\"-->\"); point2 = findChar(array, '>', getNextPoint(array, point2))) {}\n+        return point2;\n     }\n     \n-    private static TagParser.Point findChar(final String[] text, final char character, final TagParser.Point from) {\n-        TagParser.Point curr;\n-        for (curr = new TagParser.Point(from.getLineNo(), from.getColumnNo()); curr.getLineNo() < text.length && text[curr.getLineNo()].charAt(curr.getColumnNo()) != character; curr = getNextPoint(text, curr)) {}\n-        return curr;\n+    private static TagParser.Point findChar(final String[] array, final char c, final TagParser.Point point) {\n+        TagParser.Point nextPoint;\n+        for (nextPoint = new TagParser.Point(point.getLineNo(), point.getColumnNo()); nextPoint.getLineNo() < array.length && array[nextPoint.getLineNo()].charAt(nextPoint.getColumnNo()) != c; nextPoint = getNextPoint(array, nextPoint)) {}\n+        return nextPoint;\n     }\n     \n-    private static TagParser.Point getNextPoint(final String[] text, final TagParser.Point from) {\n-        int line;\n-        int column;\n-        for (line = from.getLineNo(), column = from.getColumnNo() + 1; line < text.length && column >= text[line].length(); ++line, column = 0) {}\n-        return new TagParser.Point(line, column);\n+    private static TagParser.Point getNextPoint(final String[] array, final TagParser.Point point) {\n+        int lineNo;\n+        int n;\n+        for (lineNo = point.getLineNo(), n = point.getColumnNo() + 1; lineNo < array.length && n >= array[lineNo].length(); ++lineNo, n = 0) {}\n+        return new TagParser.Point(lineNo, n);\n     }\n }\n"}]}
