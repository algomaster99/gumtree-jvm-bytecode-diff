{"diffoscope-json-version": 1, "source1": "first/LocalVariableTypeTableAttribute.class", "source2": "second/LocalVariableTypeTableAttribute.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,16 +17,16 @@\n     private int[] nameIndexes;\n     private int[] signatureIndexes;\n     private final int[] indexes;\n     private final CPUTF8[] names;\n     private final CPUTF8[] signatures;\n     private int codeLength;\n     \n-    public static void setAttributeName(final CPUTF8 cpUTF8Value) {\n-        LocalVariableTypeTableAttribute.attributeName = cpUTF8Value;\n+    public static void setAttributeName(final CPUTF8 attributeName) {\n+        LocalVariableTypeTableAttribute.attributeName = attributeName;\n     }\n     \n     public LocalVariableTypeTableAttribute(final int localVariableTypeTableLength, final int[] startPcs, final int[] lengths, final CPUTF8[] names, final CPUTF8[] signatures, final int[] indexes) {\n         super(LocalVariableTypeTableAttribute.attributeName);\n         this.localVariableTypeTableLength = localVariableTypeTableLength;\n         this.startPcs = startPcs;\n         this.lengths = lengths;\n@@ -36,75 +36,72 @@\n     }\n     \n     protected int getLength() {\n         return 2 + 10 * this.localVariableTypeTableLength;\n     }\n     \n     protected ClassFileEntry[] getNestedClassFileEntries() {\n-        final List<CPUTF8> nestedEntries = new ArrayList<CPUTF8>();\n-        nestedEntries.add(this.getAttributeName());\n+        final ArrayList list = new ArrayList();\n+        list.add(this.getAttributeName());\n         for (int i = 0; i < this.localVariableTypeTableLength; ++i) {\n-            nestedEntries.add(this.names[i]);\n-            nestedEntries.add(this.signatures[i]);\n+            list.add(this.names[i]);\n+            list.add(this.signatures[i]);\n         }\n-        return nestedEntries.toArray(ClassFileEntry.NONE);\n+        return (ClassFileEntry[])list.toArray(ClassFileEntry.NONE);\n     }\n     \n     protected int[] getStartPCs() {\n         return this.startPcs;\n     }\n     \n-    public void renumber(final List<Integer> byteCodeOffsets) throws Pack200Exception {\n-        final int[] unrenumberedStartPcs = Arrays.copyOf(this.startPcs, this.startPcs.length);\n-        super.renumber((List)byteCodeOffsets);\n-        final int maxSize = this.codeLength;\n-        for (int index = 0; index < this.lengths.length; ++index) {\n-            final int startPc = this.startPcs[index];\n-            int revisedLength = -1;\n-            final int encodedLength = this.lengths[index];\n-            final int indexOfStartPC = unrenumberedStartPcs[index];\n-            final int stopIndex = indexOfStartPC + encodedLength;\n-            if (stopIndex < 0) {\n+    public void renumber(final List<Integer> list) throws Pack200Exception {\n+        final int[] copy = Arrays.copyOf(this.startPcs, this.startPcs.length);\n+        super.renumber((List)list);\n+        final int codeLength = this.codeLength;\n+        for (int i = 0; i < this.lengths.length; ++i) {\n+            final int n = this.startPcs[i];\n+            final int n2 = copy[i] + this.lengths[i];\n+            if (n2 < 0) {\n                 throw new Pack200Exception(\"Error renumbering bytecode indexes\");\n             }\n-            if (stopIndex == byteCodeOffsets.size()) {\n-                revisedLength = maxSize - startPc;\n+            int n3;\n+            if (n2 == list.size()) {\n+                n3 = codeLength - n;\n             }\n             else {\n-                final int stopValue = (int)Integer.valueOf(byteCodeOffsets.get(stopIndex));\n-                revisedLength = stopValue - startPc;\n+                n3 = Integer.valueOf(list.get(n2)) - n;\n             }\n-            this.lengths[index] = revisedLength;\n+            this.lengths[i] = n3;\n         }\n     }\n     \n-    protected void resolve(final ClassConstantPool pool) {\n-        super.resolve(pool);\n+    protected void resolve(final ClassConstantPool classConstantPool) {\n+        super.resolve(classConstantPool);\n         this.nameIndexes = new int[this.localVariableTypeTableLength];\n         this.signatureIndexes = new int[this.localVariableTypeTableLength];\n         for (int i = 0; i < this.localVariableTypeTableLength; ++i) {\n-            this.names[i].resolve(pool);\n-            this.signatures[i].resolve(pool);\n-            this.nameIndexes[i] = pool.indexOf((ClassFileEntry)this.names[i]);\n-            this.signatureIndexes[i] = pool.indexOf((ClassFileEntry)this.signatures[i]);\n+            this.names[i].resolve(classConstantPool);\n+            this.signatures[i].resolve(classConstantPool);\n+            this.nameIndexes[i] = classConstantPool.indexOf((ClassFileEntry)this.names[i]);\n+            this.signatureIndexes[i] = classConstantPool.indexOf((ClassFileEntry)this.signatures[i]);\n         }\n     }\n     \n-    public void setCodeLength(final int length) {\n-        this.codeLength = length;\n+    public void setCodeLength(final int codeLength) {\n+        this.codeLength = codeLength;\n     }\n     \n     public String toString() {\n         return \"LocalVariableTypeTable: \" + this.localVariableTypeTableLength + \" varaibles\";\n     }\n     \n-    protected void writeBody(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.localVariableTypeTableLength);\n+    protected void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.localVariableTypeTableLength);\n         for (int i = 0; i < this.localVariableTypeTableLength; ++i) {\n-            dos.writeShort(this.startPcs[i]);\n-            dos.writeShort(this.lengths[i]);\n-            dos.writeShort(this.nameIndexes[i]);\n-            dos.writeShort(this.signatureIndexes[i]);\n-            dos.writeShort(this.indexes[i]);\n+            dataOutputStream.writeShort(this.startPcs[i]);\n+            dataOutputStream.writeShort(this.lengths[i]);\n+            dataOutputStream.writeShort(this.nameIndexes[i]);\n+            dataOutputStream.writeShort(this.signatureIndexes[i]);\n+            dataOutputStream.writeShort(this.indexes[i]);\n         }\n     }\n }\n"}]}
