{"diffoscope-json-version": 1, "source1": "first/FullIdent.class", "source2": "second/FullIdent.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,59 +9,58 @@\n     private final List<String> elements;\n     private DetailAST detailAst;\n     \n     private FullIdent() {\n         this.elements = new ArrayList<String>();\n     }\n     \n-    public static FullIdent createFullIdentBelow(final DetailAST ast) {\n-        return createFullIdent(ast.getFirstChild());\n+    public static FullIdent createFullIdentBelow(final DetailAST detailAST) {\n+        return createFullIdent(detailAST.getFirstChild());\n     }\n     \n-    public static FullIdent createFullIdent(final DetailAST ast) {\n-        final FullIdent ident = new FullIdent();\n-        extractFullIdent(ident, ast);\n-        return ident;\n-    }\n-    \n-    private static void extractFullIdent(final FullIdent full, final DetailAST ast) {\n-        if (ast != null) {\n-            final DetailAST nextSibling = ast.getNextSibling();\n-            final boolean isArrayTypeDeclarationStart = nextSibling != null && (nextSibling.getType() == 17 || nextSibling.getType() == 158) && isArrayTypeDeclaration(nextSibling);\n-            final int typeOfAst = ast.getType();\n-            if (typeOfAst == 136 && ast.hasChildren()) {\n-                final DetailAST firstChild = ast.getFirstChild();\n-                extractFullIdent(full, firstChild);\n+    public static FullIdent createFullIdent(final DetailAST detailAST) {\n+        final FullIdent fullIdent = new FullIdent();\n+        extractFullIdent(fullIdent, detailAST);\n+        return fullIdent;\n+    }\n+    \n+    private static void extractFullIdent(final FullIdent fullIdent, final DetailAST detailAST) {\n+        if (detailAST != null) {\n+            final DetailAST nextSibling = detailAST.getNextSibling();\n+            final boolean b = nextSibling != null && (nextSibling.getType() == 17 || nextSibling.getType() == 158) && isArrayTypeDeclaration(nextSibling);\n+            final int type = detailAST.getType();\n+            if (type == 136 && detailAST.hasChildren()) {\n+                extractFullIdent(fullIdent, detailAST.getFirstChild());\n             }\n-            else if (typeOfAst == 59) {\n-                final DetailAST firstChild = ast.getFirstChild();\n-                extractFullIdent(full, firstChild);\n-                full.append(\".\");\n-                extractFullIdent(full, firstChild.getNextSibling());\n-                appendBrackets(full, ast);\n+            else if (type == 59) {\n+                final DetailAST firstChild = detailAST.getFirstChild();\n+                extractFullIdent(fullIdent, firstChild);\n+                fullIdent.append(\".\");\n+                extractFullIdent(fullIdent, firstChild.getNextSibling());\n+                appendBrackets(fullIdent, detailAST);\n             }\n-            else if (isArrayTypeDeclarationStart) {\n-                full.append(ast);\n-                appendBrackets(full, ast);\n+            else if (b) {\n+                fullIdent.append(detailAST);\n+                appendBrackets(fullIdent, detailAST);\n             }\n-            else if (typeOfAst != 158) {\n-                full.append(ast);\n+            else if (type != 158) {\n+                fullIdent.append(detailAST);\n             }\n         }\n     }\n     \n-    private static boolean isArrayTypeDeclaration(final DetailAST arrayDeclarator) {\n-        DetailAST expression;\n-        for (expression = arrayDeclarator; expression != null && expression.getType() != 28; expression = expression.getFirstChild()) {}\n-        return expression == null;\n+    private static boolean isArrayTypeDeclaration(final DetailAST detailAST) {\n+        DetailAST firstChild;\n+        for (firstChild = detailAST; firstChild != null && firstChild.getType() != 28; firstChild = firstChild.getFirstChild()) {}\n+        return firstChild == null;\n     }\n     \n-    private static void appendBrackets(final FullIdent full, final DetailAST ast) {\n-        for (int bracketCount = ast.getParent().getChildCount(17), i = 0; i < bracketCount; ++i) {\n-            full.append(\"[]\");\n+    private static void appendBrackets(final FullIdent fullIdent, final DetailAST detailAST) {\n+        for (int childCount = detailAST.getParent().getChildCount(17), i = 0; i < childCount; ++i) {\n+            fullIdent.append(\"[]\");\n         }\n     }\n     \n     public String getText() {\n         return String.join(\"\", this.elements);\n     }\n     \n@@ -78,18 +77,18 @@\n     }\n     \n     @Override\n     public String toString() {\n         return String.join((CharSequence)\"\", (Iterable<? extends CharSequence>)this.elements) + \"[\" + this.detailAst.getLineNo() + \"x\" + this.detailAst.getColumnNo();\n     }\n     \n-    private void append(final String text) {\n-        this.elements.add(text);\n+    private void append(final String s) {\n+        this.elements.add(s);\n     }\n     \n-    private void append(final DetailAST ast) {\n-        this.elements.add(ast.getText());\n+    private void append(final DetailAST detailAst) {\n+        this.elements.add(detailAst.getText());\n         if (this.detailAst == null) {\n-            this.detailAst = ast;\n+            this.detailAst = detailAst;\n         }\n     }\n }\n"}]}
