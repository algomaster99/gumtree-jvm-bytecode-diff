{"diffoscope-json-version": 1, "source1": "first/DefaultFTPFileEntryParserFactory.class", "source2": "second/DefaultFTPFileEntryParserFactory.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,86 +9,85 @@\n \n public class DefaultFTPFileEntryParserFactory implements FTPFileEntryParserFactory\n {\n     private static final String JAVA_IDENTIFIER = \"\\\\p{javaJavaIdentifierStart}(\\\\p{javaJavaIdentifierPart})*\";\n     private static final String JAVA_QUALIFIED_NAME = \"(\\\\p{javaJavaIdentifierStart}(\\\\p{javaJavaIdentifierPart})*\\\\.)+\\\\p{javaJavaIdentifierStart}(\\\\p{javaJavaIdentifierPart})*\";\n     private static final Pattern JAVA_QUALIFIED_NAME_PATTERN;\n     \n-    public FTPFileEntryParser createFileEntryParser(final String key) {\n-        if (key == null) {\n+    public FTPFileEntryParser createFileEntryParser(final String s) {\n+        if (s == null) {\n             throw new ParserInitializationException(\"Parser key cannot be null\");\n         }\n-        return this.createFileEntryParser(key, null);\n+        return this.createFileEntryParser(s, null);\n     }\n     \n-    private FTPFileEntryParser createFileEntryParser(final String key, final FTPClientConfig config) {\n-        FTPFileEntryParser parser = null;\n-        if (DefaultFTPFileEntryParserFactory.JAVA_QUALIFIED_NAME_PATTERN.matcher(key).matches()) {\n+    private FTPFileEntryParser createFileEntryParser(final String str, final FTPClientConfig ftpClientConfig) {\n+        Object o = null;\n+        if (DefaultFTPFileEntryParserFactory.JAVA_QUALIFIED_NAME_PATTERN.matcher(str).matches()) {\n             try {\n-                final Class<?> parserClass = Class.forName(key);\n+                final Class<?> forName = Class.forName(str);\n                 try {\n-                    parser = (FTPFileEntryParser)parserClass.newInstance();\n+                    o = forName.newInstance();\n                 }\n-                catch (final ClassCastException e) {\n-                    throw new ParserInitializationException(parserClass.getName() + \" does not implement the interface org.apache.commons.net.ftp.FTPFileEntryParser.\", (Throwable)e);\n+                catch (final ClassCastException ex) {\n+                    throw new ParserInitializationException(forName.getName() + \" does not implement the interface org.apache.commons.net.ftp.FTPFileEntryParser.\", (Throwable)ex);\n                 }\n-                catch (final Exception e2) {\n-                    throw new ParserInitializationException(\"Error initializing parser\", (Throwable)e2);\n+                catch (final Exception ex2) {\n+                    throw new ParserInitializationException(\"Error initializing parser\", (Throwable)ex2);\n                 }\n-                catch (final ExceptionInInitializerError e3) {\n-                    throw new ParserInitializationException(\"Error initializing parser\", (Throwable)e3);\n+                catch (final ExceptionInInitializerError exceptionInInitializerError) {\n+                    throw new ParserInitializationException(\"Error initializing parser\", (Throwable)exceptionInInitializerError);\n                 }\n             }\n-            catch (final ClassNotFoundException ex) {}\n+            catch (final ClassNotFoundException ex3) {}\n         }\n-        if (parser == null) {\n-            final String ukey = key.toUpperCase(Locale.ENGLISH);\n-            if (ukey.indexOf(\"UNIX_LTRIM\") >= 0) {\n-                parser = (FTPFileEntryParser)new UnixFTPEntryParser(config, true);\n+        if (o == null) {\n+            final String upperCase = str.toUpperCase(Locale.ENGLISH);\n+            if (upperCase.indexOf(\"UNIX_LTRIM\") >= 0) {\n+                o = new UnixFTPEntryParser(ftpClientConfig, true);\n             }\n-            else if (ukey.indexOf(\"UNIX\") >= 0) {\n-                parser = (FTPFileEntryParser)new UnixFTPEntryParser(config, false);\n+            else if (upperCase.indexOf(\"UNIX\") >= 0) {\n+                o = new UnixFTPEntryParser(ftpClientConfig, false);\n             }\n-            else if (ukey.indexOf(\"VMS\") >= 0) {\n-                parser = (FTPFileEntryParser)new VMSVersioningFTPEntryParser(config);\n+            else if (upperCase.indexOf(\"VMS\") >= 0) {\n+                o = new VMSVersioningFTPEntryParser(ftpClientConfig);\n             }\n-            else if (ukey.indexOf(\"WINDOWS\") >= 0) {\n-                parser = this.createNTFTPEntryParser(config);\n+            else if (upperCase.indexOf(\"WINDOWS\") >= 0) {\n+                o = this.createNTFTPEntryParser(ftpClientConfig);\n             }\n-            else if (ukey.indexOf(\"OS/2\") >= 0) {\n-                parser = (FTPFileEntryParser)new OS2FTPEntryParser(config);\n+            else if (upperCase.indexOf(\"OS/2\") >= 0) {\n+                o = new OS2FTPEntryParser(ftpClientConfig);\n             }\n-            else if (ukey.indexOf(\"OS/400\") >= 0 || ukey.indexOf(\"AS/400\") >= 0) {\n-                parser = this.createOS400FTPEntryParser(config);\n+            else if (upperCase.indexOf(\"OS/400\") >= 0 || upperCase.indexOf(\"AS/400\") >= 0) {\n+                o = this.createOS400FTPEntryParser(ftpClientConfig);\n             }\n-            else if (ukey.indexOf(\"MVS\") >= 0) {\n-                parser = (FTPFileEntryParser)new MVSFTPEntryParser();\n+            else if (upperCase.indexOf(\"MVS\") >= 0) {\n+                o = new MVSFTPEntryParser();\n             }\n-            else if (ukey.indexOf(\"NETWARE\") >= 0) {\n-                parser = (FTPFileEntryParser)new NetwareFTPEntryParser(config);\n+            else if (upperCase.indexOf(\"NETWARE\") >= 0) {\n+                o = new NetwareFTPEntryParser(ftpClientConfig);\n             }\n-            else if (ukey.indexOf(\"MACOS PETER\") >= 0) {\n-                parser = (FTPFileEntryParser)new MacOsPeterFTPEntryParser(config);\n+            else if (upperCase.indexOf(\"MACOS PETER\") >= 0) {\n+                o = new MacOsPeterFTPEntryParser(ftpClientConfig);\n             }\n             else {\n-                if (ukey.indexOf(\"TYPE: L8\") < 0) {\n-                    throw new ParserInitializationException(\"Unknown parser type: \" + key);\n+                if (upperCase.indexOf(\"TYPE: L8\") < 0) {\n+                    throw new ParserInitializationException(\"Unknown parser type: \" + str);\n                 }\n-                parser = (FTPFileEntryParser)new UnixFTPEntryParser(config);\n+                o = new UnixFTPEntryParser(ftpClientConfig);\n             }\n         }\n-        if (parser instanceof Configurable) {\n-            ((Configurable)parser).configure(config);\n+        if (o instanceof Configurable) {\n+            ((Configurable)o).configure(ftpClientConfig);\n         }\n-        return parser;\n+        return (FTPFileEntryParser)o;\n     }\n     \n-    public FTPFileEntryParser createFileEntryParser(final FTPClientConfig config) throws ParserInitializationException {\n-        final String key = config.getServerSystemKey();\n-        return this.createFileEntryParser(key, config);\n+    public FTPFileEntryParser createFileEntryParser(final FTPClientConfig ftpClientConfig) throws ParserInitializationException {\n+        return this.createFileEntryParser(ftpClientConfig.getServerSystemKey(), ftpClientConfig);\n     }\n     \n     public FTPFileEntryParser createUnixFTPEntryParser() {\n         return (FTPFileEntryParser)new UnixFTPEntryParser();\n     }\n     \n     public FTPFileEntryParser createVMSVersioningFTPEntryParser() {\n@@ -99,36 +98,36 @@\n         return (FTPFileEntryParser)new NetwareFTPEntryParser();\n     }\n     \n     public FTPFileEntryParser createNTFTPEntryParser() {\n         return this.createNTFTPEntryParser(null);\n     }\n     \n-    private FTPFileEntryParser createNTFTPEntryParser(final FTPClientConfig config) {\n-        if (config != null && \"WINDOWS\".equals(config.getServerSystemKey())) {\n-            return (FTPFileEntryParser)new NTFTPEntryParser(config);\n+    private FTPFileEntryParser createNTFTPEntryParser(final FTPClientConfig ftpClientConfig) {\n+        if (ftpClientConfig != null && \"WINDOWS\".equals(ftpClientConfig.getServerSystemKey())) {\n+            return (FTPFileEntryParser)new NTFTPEntryParser(ftpClientConfig);\n         }\n-        final FTPClientConfig config2 = (config != null) ? new FTPClientConfig(config) : null;\n-        return (FTPFileEntryParser)new CompositeFileEntryParser(new FTPFileEntryParser[] { (FTPFileEntryParser)new NTFTPEntryParser(config), (FTPFileEntryParser)new UnixFTPEntryParser(config2, config2 != null && \"UNIX_LTRIM\".equals(config2.getServerSystemKey())) });\n+        final FTPClientConfig ftpClientConfig2 = (ftpClientConfig != null) ? new FTPClientConfig(ftpClientConfig) : null;\n+        return (FTPFileEntryParser)new CompositeFileEntryParser(new FTPFileEntryParser[] { (FTPFileEntryParser)new NTFTPEntryParser(ftpClientConfig), (FTPFileEntryParser)new UnixFTPEntryParser(ftpClientConfig2, ftpClientConfig2 != null && \"UNIX_LTRIM\".equals(ftpClientConfig2.getServerSystemKey())) });\n     }\n     \n     public FTPFileEntryParser createOS2FTPEntryParser() {\n         return (FTPFileEntryParser)new OS2FTPEntryParser();\n     }\n     \n     public FTPFileEntryParser createOS400FTPEntryParser() {\n         return this.createOS400FTPEntryParser(null);\n     }\n     \n-    private FTPFileEntryParser createOS400FTPEntryParser(final FTPClientConfig config) {\n-        if (config != null && \"OS/400\".equals(config.getServerSystemKey())) {\n-            return (FTPFileEntryParser)new OS400FTPEntryParser(config);\n+    private FTPFileEntryParser createOS400FTPEntryParser(final FTPClientConfig ftpClientConfig) {\n+        if (ftpClientConfig != null && \"OS/400\".equals(ftpClientConfig.getServerSystemKey())) {\n+            return (FTPFileEntryParser)new OS400FTPEntryParser(ftpClientConfig);\n         }\n-        final FTPClientConfig config2 = (config != null) ? new FTPClientConfig(config) : null;\n-        return (FTPFileEntryParser)new CompositeFileEntryParser(new FTPFileEntryParser[] { (FTPFileEntryParser)new OS400FTPEntryParser(config), (FTPFileEntryParser)new UnixFTPEntryParser(config2, config2 != null && \"UNIX_LTRIM\".equals(config2.getServerSystemKey())) });\n+        final FTPClientConfig ftpClientConfig2 = (ftpClientConfig != null) ? new FTPClientConfig(ftpClientConfig) : null;\n+        return (FTPFileEntryParser)new CompositeFileEntryParser(new FTPFileEntryParser[] { (FTPFileEntryParser)new OS400FTPEntryParser(ftpClientConfig), (FTPFileEntryParser)new UnixFTPEntryParser(ftpClientConfig2, ftpClientConfig2 != null && \"UNIX_LTRIM\".equals(ftpClientConfig2.getServerSystemKey())) });\n     }\n     \n     public FTPFileEntryParser createMVSEntryParser() {\n         return (FTPFileEntryParser)new MVSFTPEntryParser();\n     }\n     \n     static {\n"}]}
