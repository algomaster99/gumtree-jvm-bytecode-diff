{"diffoscope-json-version": 1, "source1": "first/RedundantImportCheck.class", "source2": "second/RedundantImportCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -50,20 +50,20 @@\n             final String importText = imp.getText();\n             if (isFromPackage(importText, \"java.lang\")) {\n                 this.log(ast, \"import.lang\", new Object[] { importText });\n             }\n             else if (this.pkgName != null && isFromPackage(importText, this.pkgName)) {\n                 this.log(ast, \"import.same\", new Object[] { importText });\n             }\n-            this.imports.stream().filter(full -> importText.equals(full.getText())).forEach(full -> this.log(ast, \"import.duplicate\", new Object[] { Integer.valueOf(full.getLineNo()), importText }));\n+            this.imports.stream().filter(full -> s.equals(full.getText())).forEach(full -> this.log(detailAST, \"import.duplicate\", new Object[] { Integer.valueOf(full.getLineNo()), s2 }));\n             this.imports.add(imp);\n         }\n         else {\n             final FullIdent imp = FullIdent.createFullIdent(ast.getLastChild().getPreviousSibling());\n-            this.staticImports.stream().filter(full -> imp.getText().equals(full.getText())).forEach(full -> this.log(ast, \"import.duplicate\", new Object[] { Integer.valueOf(full.getLineNo()), imp.getText() }));\n+            this.staticImports.stream().filter(full -> fullIdent.getText().equals(full.getText())).forEach(full -> this.log(detailAST2, \"import.duplicate\", new Object[] { Integer.valueOf(full.getLineNo()), fullIdent2.getText() }));\n             this.staticImports.add(imp);\n         }\n     }\n     \n     private static boolean isFromPackage(final String importName, final String pkg) {\n         final int index = importName.lastIndexOf(46);\n         final String front = importName.substring(0, index);\n"}]}
