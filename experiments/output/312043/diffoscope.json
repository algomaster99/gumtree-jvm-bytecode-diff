{"diffoscope-json-version": 1, "source1": "first/XZCompressorOutputStream.class", "source2": "second/XZCompressorOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,85 +1,85 @@\n-  SHA-256 checksum cada99f4bf8dc561af3baae728fa1458e8e5526efc0a2ca59b262782b63c417b\n+  SHA-256 checksum fdfa4cbe95373b2d05d75f8b4966a27623f39bf6f0f77ccabf3a647d626d5035\n   Compiled from \"XZCompressorOutputStream.java\"\n public class org.apache.commons.compress.compressors.xz.XZCompressorOutputStream extends org.apache.commons.compress.compressors.CompressorOutputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #13                         // org/apache/commons/compress/compressors/xz/XZCompressorOutputStream\n-  super_class: #14                        // org/apache/commons/compress/compressors/CompressorOutputStream\n+  this_class: #16                         // org/apache/commons/compress/compressors/xz/XZCompressorOutputStream\n+  super_class: #2                         // org/apache/commons/compress/compressors/CompressorOutputStream\n   interfaces: 0, fields: 1, methods: 7, attributes: 1\n Constant pool:\n-   #1 = Methodref          #14.#33        // org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n-   #2 = Class              #34            // org/tukaani/xz/XZOutputStream\n-   #3 = Class              #35            // org/tukaani/xz/LZMA2Options\n-   #4 = Methodref          #3.#33         // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n-   #5 = Methodref          #2.#36         // org/tukaani/xz/XZOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n-   #6 = Fieldref           #13.#37        // org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.out:Lorg/tukaani/xz/XZOutputStream;\n-   #7 = Methodref          #3.#38         // org/tukaani/xz/LZMA2Options.\"<init>\":(I)V\n-   #8 = Methodref          #2.#39         // org/tukaani/xz/XZOutputStream.close:()V\n-   #9 = Methodref          #2.#40         // org/tukaani/xz/XZOutputStream.finish:()V\n-  #10 = Methodref          #2.#41         // org/tukaani/xz/XZOutputStream.flush:()V\n-  #11 = Methodref          #2.#42         // org/tukaani/xz/XZOutputStream.write:([BII)V\n-  #12 = Methodref          #2.#43         // org/tukaani/xz/XZOutputStream.write:(I)V\n-  #13 = Class              #44            // org/apache/commons/compress/compressors/xz/XZCompressorOutputStream\n-  #14 = Class              #45            // org/apache/commons/compress/compressors/CompressorOutputStream\n-  #15 = Utf8               out\n-  #16 = Utf8               Lorg/tukaani/xz/XZOutputStream;\n-  #17 = Utf8               <init>\n-  #18 = Utf8               (Ljava/io/OutputStream;)V\n-  #19 = Utf8               Code\n-  #20 = Utf8               LineNumberTable\n-  #21 = Utf8               Exceptions\n-  #22 = Class              #46            // java/io/IOException\n-  #23 = Utf8               (Ljava/io/OutputStream;I)V\n-  #24 = Utf8               close\n-  #25 = Utf8               ()V\n-  #26 = Utf8               finish\n-  #27 = Utf8               flush\n-  #28 = Utf8               write\n-  #29 = Utf8               ([BII)V\n-  #30 = Utf8               (I)V\n-  #31 = Utf8               SourceFile\n-  #32 = Utf8               XZCompressorOutputStream.java\n-  #33 = NameAndType        #17:#25        // \"<init>\":()V\n-  #34 = Utf8               org/tukaani/xz/XZOutputStream\n-  #35 = Utf8               org/tukaani/xz/LZMA2Options\n-  #36 = NameAndType        #17:#47        // \"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n-  #37 = NameAndType        #15:#16        // out:Lorg/tukaani/xz/XZOutputStream;\n-  #38 = NameAndType        #17:#30        // \"<init>\":(I)V\n-  #39 = NameAndType        #24:#25        // close:()V\n-  #40 = NameAndType        #26:#25        // finish:()V\n-  #41 = NameAndType        #27:#25        // flush:()V\n-  #42 = NameAndType        #28:#29        // write:([BII)V\n-  #43 = NameAndType        #28:#30        // write:(I)V\n-  #44 = Utf8               org/apache/commons/compress/compressors/xz/XZCompressorOutputStream\n-  #45 = Utf8               org/apache/commons/compress/compressors/CompressorOutputStream\n-  #46 = Utf8               java/io/IOException\n-  #47 = Utf8               (Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n+   #1 = Methodref          #2.#3          // org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n+   #2 = Class              #4             // org/apache/commons/compress/compressors/CompressorOutputStream\n+   #3 = NameAndType        #5:#6          // \"<init>\":()V\n+   #4 = Utf8               org/apache/commons/compress/compressors/CompressorOutputStream\n+   #5 = Utf8               <init>\n+   #6 = Utf8               ()V\n+   #7 = Class              #8             // org/tukaani/xz/XZOutputStream\n+   #8 = Utf8               org/tukaani/xz/XZOutputStream\n+   #9 = Class              #10            // org/tukaani/xz/LZMA2Options\n+  #10 = Utf8               org/tukaani/xz/LZMA2Options\n+  #11 = Methodref          #9.#3          // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+  #12 = Methodref          #7.#13         // org/tukaani/xz/XZOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n+  #13 = NameAndType        #5:#14         // \"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n+  #14 = Utf8               (Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n+  #15 = Fieldref           #16.#17        // org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.out:Lorg/tukaani/xz/XZOutputStream;\n+  #16 = Class              #18            // org/apache/commons/compress/compressors/xz/XZCompressorOutputStream\n+  #17 = NameAndType        #19:#20        // out:Lorg/tukaani/xz/XZOutputStream;\n+  #18 = Utf8               org/apache/commons/compress/compressors/xz/XZCompressorOutputStream\n+  #19 = Utf8               out\n+  #20 = Utf8               Lorg/tukaani/xz/XZOutputStream;\n+  #21 = Methodref          #9.#22         // org/tukaani/xz/LZMA2Options.\"<init>\":(I)V\n+  #22 = NameAndType        #5:#23         // \"<init>\":(I)V\n+  #23 = Utf8               (I)V\n+  #24 = Methodref          #7.#25         // org/tukaani/xz/XZOutputStream.close:()V\n+  #25 = NameAndType        #26:#6         // close:()V\n+  #26 = Utf8               close\n+  #27 = Methodref          #7.#28         // org/tukaani/xz/XZOutputStream.finish:()V\n+  #28 = NameAndType        #29:#6         // finish:()V\n+  #29 = Utf8               finish\n+  #30 = Methodref          #7.#31         // org/tukaani/xz/XZOutputStream.flush:()V\n+  #31 = NameAndType        #32:#6         // flush:()V\n+  #32 = Utf8               flush\n+  #33 = Methodref          #7.#34         // org/tukaani/xz/XZOutputStream.write:([BII)V\n+  #34 = NameAndType        #35:#36        // write:([BII)V\n+  #35 = Utf8               write\n+  #36 = Utf8               ([BII)V\n+  #37 = Methodref          #7.#38         // org/tukaani/xz/XZOutputStream.write:(I)V\n+  #38 = NameAndType        #35:#23        // write:(I)V\n+  #39 = Utf8               (Ljava/io/OutputStream;)V\n+  #40 = Utf8               Code\n+  #41 = Utf8               LineNumberTable\n+  #42 = Utf8               Exceptions\n+  #43 = Class              #44            // java/io/IOException\n+  #44 = Utf8               java/io/IOException\n+  #45 = Utf8               (Ljava/io/OutputStream;I)V\n+  #46 = Utf8               SourceFile\n+  #47 = Utf8               XZCompressorOutputStream.java\n {\n   private final org.tukaani.xz.XZOutputStream out;\n     descriptor: Lorg/tukaani/xz/XZOutputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.commons.compress.compressors.xz.XZCompressorOutputStream(java.io.OutputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/OutputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=2, args_size=2\n          0: aload_0\n          1: invokespecial #1                  // Method org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class org/tukaani/xz/XZOutputStream\n+         5: new           #7                  // class org/tukaani/xz/XZOutputStream\n          8: dup\n          9: aload_1\n-        10: new           #3                  // class org/tukaani/xz/LZMA2Options\n+        10: new           #9                  // class org/tukaani/xz/LZMA2Options\n         13: dup\n-        14: invokespecial #4                  // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n-        17: invokespecial #5                  // Method org/tukaani/xz/XZOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n-        20: putfield      #6                  // Field out:Lorg/tukaani/xz/XZOutputStream;\n+        14: invokespecial #11                 // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+        17: invokespecial #12                 // Method org/tukaani/xz/XZOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n+        20: putfield      #15                 // Field out:Lorg/tukaani/xz/XZOutputStream;\n         23: return\n       LineNumberTable:\n         line 42: 0\n         line 43: 4\n         line 44: 23\n     Exceptions:\n       throws java.io.IOException\n@@ -88,103 +88,103 @@\n     descriptor: (Ljava/io/OutputStream;I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=7, locals=3, args_size=3\n          0: aload_0\n          1: invokespecial #1                  // Method org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class org/tukaani/xz/XZOutputStream\n+         5: new           #7                  // class org/tukaani/xz/XZOutputStream\n          8: dup\n          9: aload_1\n-        10: new           #3                  // class org/tukaani/xz/LZMA2Options\n+        10: new           #9                  // class org/tukaani/xz/LZMA2Options\n         13: dup\n         14: iload_2\n-        15: invokespecial #7                  // Method org/tukaani/xz/LZMA2Options.\"<init>\":(I)V\n-        18: invokespecial #5                  // Method org/tukaani/xz/XZOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n-        21: putfield      #6                  // Field out:Lorg/tukaani/xz/XZOutputStream;\n+        15: invokespecial #21                 // Method org/tukaani/xz/LZMA2Options.\"<init>\":(I)V\n+        18: invokespecial #12                 // Method org/tukaani/xz/XZOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n+        21: putfield      #15                 // Field out:Lorg/tukaani/xz/XZOutputStream;\n         24: return\n       LineNumberTable:\n         line 63: 0\n         line 64: 4\n         line 65: 24\n     Exceptions:\n       throws java.io.IOException\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field out:Lorg/tukaani/xz/XZOutputStream;\n-         4: invokevirtual #8                  // Method org/tukaani/xz/XZOutputStream.close:()V\n+         1: getfield      #15                 // Field out:Lorg/tukaani/xz/XZOutputStream;\n+         4: invokevirtual #24                 // Method org/tukaani/xz/XZOutputStream.close:()V\n          7: return\n       LineNumberTable:\n         line 69: 0\n         line 70: 7\n     Exceptions:\n       throws java.io.IOException\n \n   public void finish() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field out:Lorg/tukaani/xz/XZOutputStream;\n-         4: invokevirtual #9                  // Method org/tukaani/xz/XZOutputStream.finish:()V\n+         1: getfield      #15                 // Field out:Lorg/tukaani/xz/XZOutputStream;\n+         4: invokevirtual #27                 // Method org/tukaani/xz/XZOutputStream.finish:()V\n          7: return\n       LineNumberTable:\n         line 78: 0\n         line 79: 7\n     Exceptions:\n       throws java.io.IOException\n \n   public void flush() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field out:Lorg/tukaani/xz/XZOutputStream;\n-         4: invokevirtual #10                 // Method org/tukaani/xz/XZOutputStream.flush:()V\n+         1: getfield      #15                 // Field out:Lorg/tukaani/xz/XZOutputStream;\n+         4: invokevirtual #30                 // Method org/tukaani/xz/XZOutputStream.flush:()V\n          7: return\n       LineNumberTable:\n         line 89: 0\n         line 90: 7\n     Exceptions:\n       throws java.io.IOException\n \n   public void write(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n-         1: getfield      #6                  // Field out:Lorg/tukaani/xz/XZOutputStream;\n+         1: getfield      #15                 // Field out:Lorg/tukaani/xz/XZOutputStream;\n          4: aload_1\n          5: iload_2\n          6: iload_3\n-         7: invokevirtual #11                 // Method org/tukaani/xz/XZOutputStream.write:([BII)V\n+         7: invokevirtual #33                 // Method org/tukaani/xz/XZOutputStream.write:([BII)V\n         10: return\n       LineNumberTable:\n         line 94: 0\n         line 95: 10\n     Exceptions:\n       throws java.io.IOException\n \n   public void write(int) throws java.io.IOException;\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #6                  // Field out:Lorg/tukaani/xz/XZOutputStream;\n+         1: getfield      #15                 // Field out:Lorg/tukaani/xz/XZOutputStream;\n          4: iload_1\n-         5: invokevirtual #12                 // Method org/tukaani/xz/XZOutputStream.write:(I)V\n+         5: invokevirtual #37                 // Method org/tukaani/xz/XZOutputStream.write:(I)V\n          8: return\n       LineNumberTable:\n         line 99: 0\n         line 100: 8\n     Exceptions:\n       throws java.io.IOException\n }\n"}]}
