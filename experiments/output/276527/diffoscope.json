{"diffoscope-json-version": 1, "source1": "first/CsvFilterElement.class", "source2": "second/CsvFilterElement.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,61 +8,52 @@\n import java.util.HashSet;\n import java.util.Set;\n \n class CsvFilterElement implements IntFilterElement\n {\n     private final Set<IntFilterElement> filters;\n     \n-    CsvFilterElement(final String pattern) {\n+    CsvFilterElement(final String str) {\n         this.filters = new HashSet<IntFilterElement>();\n-        final StringTokenizer tokenizer = new StringTokenizer(pattern, \",\");\n-        while (tokenizer.hasMoreTokens()) {\n-            final String token = tokenizer.nextToken().trim();\n-            final int index = token.indexOf(45);\n+        final StringTokenizer stringTokenizer = new StringTokenizer(str, \",\");\n+        while (stringTokenizer.hasMoreTokens()) {\n+            final String trim = stringTokenizer.nextToken().trim();\n+            final int index = trim.indexOf(45);\n             if (index == -1) {\n-                final int matchValue = Integer.parseInt(token);\n-                this.addFilter((IntFilterElement)new IntMatchFilterElement(matchValue));\n+                this.addFilter((IntFilterElement)new IntMatchFilterElement(Integer.parseInt(trim)));\n             }\n             else {\n-                final int lowerBound = Integer.parseInt(token.substring(0, index));\n-                final int upperBound = Integer.parseInt(token.substring(index + 1));\n-                this.addFilter((IntFilterElement)new IntRangeFilterElement(lowerBound, upperBound));\n+                this.addFilter((IntFilterElement)new IntRangeFilterElement(Integer.parseInt(trim.substring(0, index)), Integer.parseInt(trim.substring(index + 1))));\n             }\n         }\n     }\n     \n-    private void addFilter(final IntFilterElement filter) {\n-        this.filters.add(filter);\n+    private void addFilter(final IntFilterElement intFilterElement) {\n+        this.filters.add(intFilterElement);\n     }\n     \n     protected Set<IntFilterElement> getFilters() {\n         return UnmodifiableCollectionUtil.unmodifiableSet((Set)this.filters);\n     }\n     \n-    public boolean accept(final int intValue) {\n-        boolean result = false;\n-        for (final IntFilterElement filter : this.getFilters()) {\n-            if (filter.accept(intValue)) {\n-                result = true;\n+    public boolean accept(final int n) {\n+        boolean b = false;\n+        final Iterator<IntFilterElement> iterator = this.getFilters().iterator();\n+        while (iterator.hasNext()) {\n+            if (((IntFilterElement)iterator.next()).accept(n)) {\n+                b = true;\n                 break;\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n     @Override\n-    public boolean equals(final Object object) {\n-        if (this == object) {\n-            return true;\n-        }\n-        if (object == null || this.getClass() != object.getClass()) {\n-            return false;\n-        }\n-        final CsvFilterElement csvFilter = (CsvFilterElement)object;\n-        return Objects.equals(this.filters, csvFilter.filters);\n+    public boolean equals(final Object o) {\n+        return this == o || (o != null && this.getClass() == o.getClass() && Objects.equals(this.filters, ((CsvFilterElement)o).filters));\n     }\n     \n     @Override\n     public int hashCode() {\n         return Objects.hash(this.filters);\n     }\n }\n"}]}
