{"diffoscope-json-version": 1, "source1": "first/StackMap.class", "source2": "second/StackMap.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,71 +6,72 @@\n import java.io.IOException;\n import java.io.DataInput;\n \n public final class StackMap extends Attribute\n {\n     private StackMapEntry[] table;\n     \n-    StackMap(final int nameIndex, final int length, final DataInput input, final ConstantPool constantPool) throws IOException {\n-        this(nameIndex, length, (StackMapEntry[])null, constantPool);\n-        final int mapLength = input.readUnsignedShort();\n-        this.table = new StackMapEntry[mapLength];\n-        for (int i = 0; i < mapLength; ++i) {\n-            this.table[i] = new StackMapEntry(input, constantPool);\n+    StackMap(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, n2, (StackMapEntry[])null, constantPool);\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        this.table = new StackMapEntry[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n+            this.table[i] = new StackMapEntry(dataInput, constantPool);\n         }\n     }\n     \n-    public StackMap(final int nameIndex, final int length, final StackMapEntry[] map, final ConstantPool constantPool) {\n-        super((byte)11, nameIndex, length, constantPool);\n-        this.table = map;\n+    public StackMap(final int n, final int n2, final StackMapEntry[] table, final ConstantPool constantPool) {\n+        super((byte)11, n, n2, constantPool);\n+        this.table = table;\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitStackMap(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitStackMap(this);\n     }\n     \n     public Attribute copy(final ConstantPool constantPool) {\n-        final StackMap c = (StackMap)this.clone();\n-        Arrays.setAll(c.table = new StackMapEntry[this.table.length], i -> this.table[i].copy());\n-        c.setConstantPool(constantPool);\n-        return c;\n+        final StackMap stackMap = (StackMap)this.clone();\n+        Arrays.setAll(stackMap.table = new StackMapEntry[this.table.length], n2 -> this.table[n2].copy());\n+        stackMap.setConstantPool(constantPool);\n+        return stackMap;\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n-        file.writeShort(this.table.length);\n-        for (final StackMapEntry entry : this.table) {\n-            entry.dump(file);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeShort(this.table.length);\n+        final StackMapEntry[] table = this.table;\n+        for (int length = table.length, i = 0; i < length; ++i) {\n+            table[i].dump(dataOutputStream);\n         }\n     }\n     \n     public int getMapLength() {\n         return (this.table == null) ? 0 : this.table.length;\n     }\n     \n     public StackMapEntry[] getStackMap() {\n         return this.table;\n     }\n     \n     public void setStackMap(final StackMapEntry[] table) {\n         this.table = table;\n-        int len = 2;\n-        for (final StackMapEntry element : table) {\n-            len += element.getMapEntrySize();\n+        int length = 2;\n+        for (int length2 = table.length, i = 0; i < length2; ++i) {\n+            length += table[i].getMapEntrySize();\n         }\n-        this.setLength(len);\n+        this.setLength(length);\n     }\n     \n     public String toString() {\n-        final StringBuilder buf = new StringBuilder(\"StackMap(\");\n-        int runningOffset = -1;\n-        for (int i = 0; i < this.table.length; ++i) {\n-            runningOffset = this.table[i].getByteCodeOffset() + runningOffset + 1;\n-            buf.append(String.format(\"%n@%03d %s\", Integer.valueOf(runningOffset), this.table[i]));\n-            if (i < this.table.length - 1) {\n-                buf.append(\", \");\n+        final StringBuilder sb = new StringBuilder(\"StackMap(\");\n+        int i = -1;\n+        for (int j = 0; j < this.table.length; ++j) {\n+            i = this.table[j].getByteCodeOffset() + i + 1;\n+            sb.append(String.format(\"%n@%03d %s\", Integer.valueOf(i), this.table[j]));\n+            if (j < this.table.length - 1) {\n+                sb.append(\", \");\n             }\n         }\n-        buf.append(')');\n-        return buf.toString();\n+        sb.append(')');\n+        return sb.toString();\n     }\n }\n"}]}
