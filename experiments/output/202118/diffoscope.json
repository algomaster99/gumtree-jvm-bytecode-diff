{"diffoscope-json-version": 1, "source1": "first/ZipFile$BoundedInputStream.class", "source2": "second/ZipFile$BoundedInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,21 +7,21 @@\n \n private class BoundedInputStream extends InputStream\n {\n     private ByteBuffer singleByteBuffer;\n     private final long end;\n     private long loc;\n     \n-    BoundedInputStream(final ZipFile this$0, final long start, final long remaining) {\n+    BoundedInputStream(final ZipFile this$0, final long n, final long lng) {\n         this.this$0 = this$0;\n-        this.end = start + remaining;\n-        if (this.end < start) {\n-            throw new IllegalArgumentException(\"Invalid length of stream at offset=\" + start + \", length=\" + remaining);\n+        this.end = n + lng;\n+        if (this.end < n) {\n+            throw new IllegalArgumentException(\"Invalid length of stream at offset=\" + n + \", length=\" + lng);\n         }\n-        this.loc = start;\n+        this.loc = n;\n     }\n     \n     @Override\n     public synchronized int read() throws IOException {\n         if (this.loc >= this.end) {\n             return -1;\n         }\n@@ -36,36 +36,35 @@\n             return read;\n         }\n         ++this.loc;\n         return this.singleByteBuffer.get() & 0xFF;\n     }\n     \n     @Override\n-    public synchronized int read(final byte[] b, final int off, int len) throws IOException {\n-        if (len <= 0) {\n+    public synchronized int read(final byte[] array, final int offset, int length) throws IOException {\n+        if (length <= 0) {\n             return 0;\n         }\n-        if (len > this.end - this.loc) {\n+        if (length > this.end - this.loc) {\n             if (this.loc >= this.end) {\n                 return -1;\n             }\n-            len = (int)(this.end - this.loc);\n+            length = (int)(this.end - this.loc);\n         }\n-        final ByteBuffer buf = ByteBuffer.wrap(b, off, len);\n-        final int ret = this.read(this.loc, buf);\n-        if (ret > 0) {\n-            this.loc += ret;\n-            return ret;\n+        final int read = this.read(this.loc, ByteBuffer.wrap(array, offset, length));\n+        if (read > 0) {\n+            this.loc += read;\n+            return read;\n         }\n-        return ret;\n+        return read;\n     }\n     \n-    protected int read(final long pos, final ByteBuffer buf) throws IOException {\n+    protected int read(final long n, final ByteBuffer byteBuffer) throws IOException {\n         final int read;\n         synchronized (ZipFile.access$300(this.this$0)) {\n-            ZipFile.access$300(this.this$0).position(pos);\n-            read = ZipFile.access$300(this.this$0).read(buf);\n+            ZipFile.access$300(this.this$0).position(n);\n+            read = ZipFile.access$300(this.this$0).read(byteBuffer);\n         }\n-        buf.flip();\n+        byteBuffer.flip();\n         return read;\n     }\n }\n"}]}
