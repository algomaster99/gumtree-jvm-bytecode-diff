{"diffoscope-json-version": 1, "source1": "first/MultiWrapDynaClass.class", "source2": "second/MultiWrapDynaClass.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,14 +12,18 @@\n \n class MultiWrapDynaClass implements DynaClass\n {\n     private static final DynaProperty[] EMPTY_PROPS;\n     private final Collection<DynaProperty> properties;\n     private final Map<String, DynaProperty> namedProperties;\n     \n+    static {\n+        EMPTY_PROPS = new DynaProperty[0];\n+    }\n+    \n     public MultiWrapDynaClass(final Collection<? extends DynaClass> wrappedCls) {\n         this.properties = new LinkedList<DynaProperty>();\n         this.namedProperties = new HashMap<String, DynaProperty>();\n         this.initProperties(wrappedCls);\n     }\n     \n     public String getName() {\n@@ -36,20 +40,17 @@\n     \n     public DynaBean newInstance() throws IllegalAccessException, InstantiationException {\n         throw new UnsupportedOperationException(\"Cannot create an instance of MultiWrapDynaBean!\");\n     }\n     \n     private void initProperties(final Collection<? extends DynaClass> wrappedCls) {\n         for (final DynaClass cls : wrappedCls) {\n-            final DynaProperty[] dynaProperties;\n-            final DynaProperty[] props = dynaProperties = cls.getDynaProperties();\n-            for (final DynaProperty p : dynaProperties) {\n+            final DynaProperty[] props = cls.getDynaProperties();\n+            DynaProperty[] array;\n+            for (int length = (array = props).length, i = 0; i < length; ++i) {\n+                final DynaProperty p = array[i];\n                 this.properties.add(p);\n                 this.namedProperties.put(p.getName(), p);\n             }\n         }\n     }\n-    \n-    static {\n-        EMPTY_PROPS = new DynaProperty[0];\n-    }\n }\n"}]}
