{"diffoscope-json-version": 1, "source1": "first/ElementValueGen.class", "source2": "second/ElementValueGen.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -60,16 +60,16 @@\n             default: {\n                 throw new UnsupportedOperationException(\"Not implemented yet! (\" + value.getElementValueType() + \")\");\n             }\n         }\n     }\n     \n     public static ElementValueGen readElementValue(final DataInput dis, final ConstantPoolGen cpGen) throws IOException {\n-        final int type = dis.readUnsignedByte();\n-        switch (type) {\n+        final int unsignedByte = dis.readUnsignedByte();\n+        switch (unsignedByte) {\n             case 66: {\n                 return (ElementValueGen)new SimpleElementValueGen(66, dis.readUnsignedShort(), cpGen);\n             }\n             case 67: {\n                 return (ElementValueGen)new SimpleElementValueGen(67, dis.readUnsignedShort(), cpGen);\n             }\n             case 68: {\n@@ -99,23 +99,23 @@\n             case 99: {\n                 return (ElementValueGen)new ClassElementValueGen(dis.readUnsignedShort(), cpGen);\n             }\n             case 64: {\n                 return (ElementValueGen)new AnnotationElementValueGen(64, new AnnotationEntryGen(AnnotationEntry.read(dis, cpGen.getConstantPool(), true), cpGen, false), cpGen);\n             }\n             case 91: {\n-                final int numArrayVals = dis.readUnsignedShort();\n-                final ElementValue[] evalues = new ElementValue[numArrayVals];\n-                for (int j = 0; j < numArrayVals; ++j) {\n-                    evalues[j] = ElementValue.readElementValue(dis, cpGen.getConstantPool());\n+                final int unsignedShort = dis.readUnsignedShort();\n+                final ElementValue[] array = new ElementValue[unsignedShort];\n+                for (int i = 0; i < unsignedShort; ++i) {\n+                    array[i] = ElementValue.readElementValue(dis, cpGen.getConstantPool());\n                 }\n-                return (ElementValueGen)new ArrayElementValueGen(91, evalues, cpGen);\n+                return (ElementValueGen)new ArrayElementValueGen(91, array, cpGen);\n             }\n             default: {\n-                throw new IllegalArgumentException(\"Unexpected element value kind in annotation: \" + type);\n+                throw new IllegalArgumentException(\"Unexpected element value kind in annotation: \" + unsignedByte);\n             }\n         }\n     }\n     \n     protected ElementValueGen(final int type, final ConstantPoolGen cpGen) {\n         this.type = type;\n         this.cpGen = cpGen;\n"}]}
