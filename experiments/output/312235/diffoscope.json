{"diffoscope-json-version": 1, "source1": "first/FileBasedScatterGatherBackingStore.class", "source2": "second/FileBasedScatterGatherBackingStore.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,99 +1,99 @@\n-  SHA-256 checksum e68d7e8a1aafb2a9b66cde9f117be5cb99ada688a3c279959261b27382ce859a\n+  SHA-256 checksum 2208bd41d9b35a47345756d6a26227ee56dfc163a40c4320f68f8c2da67d9f12\n   Compiled from \"FileBasedScatterGatherBackingStore.java\"\n public class org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore implements org.apache.commons.compress.parallel.ScatterGatherBackingStore\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #18                         // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore\n-  super_class: #19                        // java/lang/Object\n+  this_class: #8                          // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore\n+  super_class: #14                        // java/lang/Object\n   interfaces: 1, fields: 3, methods: 6, attributes: 1\n Constant pool:\n-   #1 = Methodref          #45.#46        // java/io/File.toPath:()Ljava/nio/file/Path;\n-   #2 = Methodref          #18.#47        // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.\"<init>\":(Ljava/nio/file/Path;)V\n-   #3 = Methodref          #19.#48        // java/lang/Object.\"<init>\":()V\n-   #4 = Fieldref           #18.#49        // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.target:Ljava/nio/file/Path;\n-   #5 = Class              #50            // java/nio/file/OpenOption\n-   #6 = Methodref          #51.#52        // java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-   #7 = Fieldref           #18.#53        // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.outputStream:Ljava/io/OutputStream;\n-   #8 = Class              #54            // java/io/FileNotFoundException\n-   #9 = Class              #55            // java/io/IOException\n-  #10 = Class              #56            // java/io/UncheckedIOException\n-  #11 = Methodref          #10.#57        // java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n-  #12 = Methodref          #18.#58        // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.closeForWriting:()V\n-  #13 = Methodref          #51.#59        // java/nio/file/Files.deleteIfExists:(Ljava/nio/file/Path;)Z\n-  #14 = Fieldref           #18.#60        // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.closed:Z\n-  #15 = Methodref          #61.#62        // java/io/OutputStream.close:()V\n-  #16 = Methodref          #51.#63        // java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #17 = Methodref          #61.#64        // java/io/OutputStream.write:([BII)V\n-  #18 = Class              #65            // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore\n-  #19 = Class              #66            // java/lang/Object\n-  #20 = Class              #67            // org/apache/commons/compress/parallel/ScatterGatherBackingStore\n-  #21 = Utf8               target\n-  #22 = Utf8               Ljava/nio/file/Path;\n-  #23 = Utf8               outputStream\n-  #24 = Utf8               Ljava/io/OutputStream;\n-  #25 = Utf8               closed\n-  #26 = Utf8               Z\n-  #27 = Utf8               <init>\n-  #28 = Utf8               (Ljava/io/File;)V\n-  #29 = Utf8               Code\n-  #30 = Utf8               LineNumberTable\n-  #31 = Utf8               Exceptions\n-  #32 = Utf8               (Ljava/nio/file/Path;)V\n-  #33 = Utf8               StackMapTable\n-  #34 = Class              #68            // java/nio/file/Path\n-  #35 = Utf8               close\n-  #36 = Utf8               ()V\n-  #37 = Class              #69            // java/lang/Throwable\n-  #38 = Utf8               closeForWriting\n-  #39 = Utf8               getInputStream\n-  #40 = Utf8               ()Ljava/io/InputStream;\n-  #41 = Utf8               writeOut\n-  #42 = Utf8               ([BII)V\n-  #43 = Utf8               SourceFile\n-  #44 = Utf8               FileBasedScatterGatherBackingStore.java\n-  #45 = Class              #70            // java/io/File\n-  #46 = NameAndType        #71:#72        // toPath:()Ljava/nio/file/Path;\n-  #47 = NameAndType        #27:#32        // \"<init>\":(Ljava/nio/file/Path;)V\n-  #48 = NameAndType        #27:#36        // \"<init>\":()V\n-  #49 = NameAndType        #21:#22        // target:Ljava/nio/file/Path;\n-  #50 = Utf8               java/nio/file/OpenOption\n-  #51 = Class              #73            // java/nio/file/Files\n-  #52 = NameAndType        #74:#75        // newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-  #53 = NameAndType        #23:#24        // outputStream:Ljava/io/OutputStream;\n-  #54 = Utf8               java/io/FileNotFoundException\n-  #55 = Utf8               java/io/IOException\n-  #56 = Utf8               java/io/UncheckedIOException\n-  #57 = NameAndType        #27:#76        // \"<init>\":(Ljava/io/IOException;)V\n-  #58 = NameAndType        #38:#36        // closeForWriting:()V\n-  #59 = NameAndType        #77:#78        // deleteIfExists:(Ljava/nio/file/Path;)Z\n-  #60 = NameAndType        #25:#26        // closed:Z\n-  #61 = Class              #79            // java/io/OutputStream\n-  #62 = NameAndType        #35:#36        // close:()V\n-  #63 = NameAndType        #80:#81        // newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #64 = NameAndType        #82:#42        // write:([BII)V\n-  #65 = Utf8               org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore\n-  #66 = Utf8               java/lang/Object\n-  #67 = Utf8               org/apache/commons/compress/parallel/ScatterGatherBackingStore\n-  #68 = Utf8               java/nio/file/Path\n-  #69 = Utf8               java/lang/Throwable\n-  #70 = Utf8               java/io/File\n-  #71 = Utf8               toPath\n-  #72 = Utf8               ()Ljava/nio/file/Path;\n-  #73 = Utf8               java/nio/file/Files\n-  #74 = Utf8               newOutputStream\n-  #75 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-  #76 = Utf8               (Ljava/io/IOException;)V\n-  #77 = Utf8               deleteIfExists\n-  #78 = Utf8               (Ljava/nio/file/Path;)Z\n-  #79 = Utf8               java/io/OutputStream\n-  #80 = Utf8               newInputStream\n-  #81 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #82 = Utf8               write\n+   #1 = Methodref          #2.#3          // java/io/File.toPath:()Ljava/nio/file/Path;\n+   #2 = Class              #4             // java/io/File\n+   #3 = NameAndType        #5:#6          // toPath:()Ljava/nio/file/Path;\n+   #4 = Utf8               java/io/File\n+   #5 = Utf8               toPath\n+   #6 = Utf8               ()Ljava/nio/file/Path;\n+   #7 = Methodref          #8.#9          // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.\"<init>\":(Ljava/nio/file/Path;)V\n+   #8 = Class              #10            // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore\n+   #9 = NameAndType        #11:#12        // \"<init>\":(Ljava/nio/file/Path;)V\n+  #10 = Utf8               org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore\n+  #11 = Utf8               <init>\n+  #12 = Utf8               (Ljava/nio/file/Path;)V\n+  #13 = Methodref          #14.#15        // java/lang/Object.\"<init>\":()V\n+  #14 = Class              #16            // java/lang/Object\n+  #15 = NameAndType        #11:#17        // \"<init>\":()V\n+  #16 = Utf8               java/lang/Object\n+  #17 = Utf8               ()V\n+  #18 = Fieldref           #8.#19         // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.target:Ljava/nio/file/Path;\n+  #19 = NameAndType        #20:#21        // target:Ljava/nio/file/Path;\n+  #20 = Utf8               target\n+  #21 = Utf8               Ljava/nio/file/Path;\n+  #22 = Class              #23            // java/nio/file/OpenOption\n+  #23 = Utf8               java/nio/file/OpenOption\n+  #24 = Methodref          #25.#26        // java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+  #25 = Class              #27            // java/nio/file/Files\n+  #26 = NameAndType        #28:#29        // newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+  #27 = Utf8               java/nio/file/Files\n+  #28 = Utf8               newOutputStream\n+  #29 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+  #30 = Fieldref           #8.#31         // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.outputStream:Ljava/io/OutputStream;\n+  #31 = NameAndType        #32:#33        // outputStream:Ljava/io/OutputStream;\n+  #32 = Utf8               outputStream\n+  #33 = Utf8               Ljava/io/OutputStream;\n+  #34 = Class              #35            // java/io/FileNotFoundException\n+  #35 = Utf8               java/io/FileNotFoundException\n+  #36 = Class              #37            // java/io/IOException\n+  #37 = Utf8               java/io/IOException\n+  #38 = Class              #39            // java/io/UncheckedIOException\n+  #39 = Utf8               java/io/UncheckedIOException\n+  #40 = Methodref          #38.#41        // java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n+  #41 = NameAndType        #11:#42        // \"<init>\":(Ljava/io/IOException;)V\n+  #42 = Utf8               (Ljava/io/IOException;)V\n+  #43 = Methodref          #8.#44         // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.closeForWriting:()V\n+  #44 = NameAndType        #45:#17        // closeForWriting:()V\n+  #45 = Utf8               closeForWriting\n+  #46 = Methodref          #25.#47        // java/nio/file/Files.deleteIfExists:(Ljava/nio/file/Path;)Z\n+  #47 = NameAndType        #48:#49        // deleteIfExists:(Ljava/nio/file/Path;)Z\n+  #48 = Utf8               deleteIfExists\n+  #49 = Utf8               (Ljava/nio/file/Path;)Z\n+  #50 = Fieldref           #8.#51         // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.closed:Z\n+  #51 = NameAndType        #52:#53        // closed:Z\n+  #52 = Utf8               closed\n+  #53 = Utf8               Z\n+  #54 = Methodref          #55.#56        // java/io/OutputStream.close:()V\n+  #55 = Class              #57            // java/io/OutputStream\n+  #56 = NameAndType        #58:#17        // close:()V\n+  #57 = Utf8               java/io/OutputStream\n+  #58 = Utf8               close\n+  #59 = Methodref          #25.#60        // java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+  #60 = NameAndType        #61:#62        // newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+  #61 = Utf8               newInputStream\n+  #62 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+  #63 = Methodref          #55.#64        // java/io/OutputStream.write:([BII)V\n+  #64 = NameAndType        #65:#66        // write:([BII)V\n+  #65 = Utf8               write\n+  #66 = Utf8               ([BII)V\n+  #67 = Class              #68            // org/apache/commons/compress/parallel/ScatterGatherBackingStore\n+  #68 = Utf8               org/apache/commons/compress/parallel/ScatterGatherBackingStore\n+  #69 = Utf8               (Ljava/io/File;)V\n+  #70 = Utf8               Code\n+  #71 = Utf8               LineNumberTable\n+  #72 = Utf8               Exceptions\n+  #73 = Utf8               StackMapTable\n+  #74 = Class              #75            // java/nio/file/Path\n+  #75 = Utf8               java/nio/file/Path\n+  #76 = Class              #77            // java/lang/Throwable\n+  #77 = Utf8               java/lang/Throwable\n+  #78 = Utf8               getInputStream\n+  #79 = Utf8               ()Ljava/io/InputStream;\n+  #80 = Utf8               writeOut\n+  #81 = Utf8               SourceFile\n+  #82 = Utf8               FileBasedScatterGatherBackingStore.java\n {\n   private final java.nio.file.Path target;\n     descriptor: Ljava/nio/file/Path;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final java.io.OutputStream outputStream;\n     descriptor: Ljava/io/OutputStream;\n@@ -107,47 +107,47 @@\n     descriptor: (Ljava/io/File;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: invokevirtual #1                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n-         5: invokespecial #2                  // Method \"<init>\":(Ljava/nio/file/Path;)V\n+         5: invokespecial #7                  // Method \"<init>\":(Ljava/nio/file/Path;)V\n          8: return\n       LineNumberTable:\n         line 40: 0\n         line 41: 8\n     Exceptions:\n       throws java.io.FileNotFoundException\n \n   public org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore(java.nio.file.Path) throws java.io.FileNotFoundException;\n     descriptor: (Ljava/nio/file/Path;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n-         1: invokespecial #3                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #13                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n-         6: putfield      #4                  // Field target:Ljava/nio/file/Path;\n+         6: putfield      #18                 // Field target:Ljava/nio/file/Path;\n          9: aload_0\n         10: aload_1\n         11: iconst_0\n-        12: anewarray     #5                  // class java/nio/file/OpenOption\n-        15: invokestatic  #6                  // Method java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-        18: putfield      #7                  // Field outputStream:Ljava/io/OutputStream;\n+        12: anewarray     #22                 // class java/nio/file/OpenOption\n+        15: invokestatic  #24                 // Method java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+        18: putfield      #30                 // Field outputStream:Ljava/io/OutputStream;\n         21: goto          37\n         24: astore_2\n         25: aload_2\n         26: athrow\n         27: astore_2\n-        28: new           #10                 // class java/io/UncheckedIOException\n+        28: new           #38                 // class java/io/UncheckedIOException\n         31: dup\n         32: aload_2\n-        33: invokespecial #11                 // Method java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n+        33: invokespecial #40                 // Method java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n         36: athrow\n         37: return\n       Exception table:\n          from    to  target type\n              9    21    24   Class java/io/FileNotFoundException\n              9    21    27   Class java/io/IOException\n       LineNumberTable:\n@@ -173,24 +173,24 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=2, args_size=1\n          0: aload_0\n-         1: invokevirtual #12                 // Method closeForWriting:()V\n+         1: invokevirtual #43                 // Method closeForWriting:()V\n          4: aload_0\n-         5: getfield      #4                  // Field target:Ljava/nio/file/Path;\n-         8: invokestatic  #13                 // Method java/nio/file/Files.deleteIfExists:(Ljava/nio/file/Path;)Z\n+         5: getfield      #18                 // Field target:Ljava/nio/file/Path;\n+         8: invokestatic  #46                 // Method java/nio/file/Files.deleteIfExists:(Ljava/nio/file/Path;)Z\n         11: pop\n         12: goto          26\n         15: astore_1\n         16: aload_0\n-        17: getfield      #4                  // Field target:Ljava/nio/file/Path;\n-        20: invokestatic  #13                 // Method java/nio/file/Files.deleteIfExists:(Ljava/nio/file/Path;)Z\n+        17: getfield      #18                 // Field target:Ljava/nio/file/Path;\n+        20: invokestatic  #46                 // Method java/nio/file/Files.deleteIfExists:(Ljava/nio/file/Path;)Z\n         23: pop\n         24: aload_1\n         25: athrow\n         26: return\n       Exception table:\n          from    to  target type\n              0     4    15   any\n@@ -210,22 +210,22 @@\n \n   public void closeForWriting() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #14                 // Field closed:Z\n+         1: getfield      #50                 // Field closed:Z\n          4: ifne          19\n          7: aload_0\n-         8: getfield      #7                  // Field outputStream:Ljava/io/OutputStream;\n-        11: invokevirtual #15                 // Method java/io/OutputStream.close:()V\n+         8: getfield      #30                 // Field outputStream:Ljava/io/OutputStream;\n+        11: invokevirtual #54                 // Method java/io/OutputStream.close:()V\n         14: aload_0\n         15: iconst_1\n-        16: putfield      #14                 // Field closed:Z\n+        16: putfield      #50                 // Field closed:Z\n         19: return\n       LineNumberTable:\n         line 73: 0\n         line 74: 7\n         line 75: 14\n         line 77: 19\n       StackMapTable: number_of_entries = 1\n@@ -235,35 +235,35 @@\n \n   public java.io.InputStream getInputStream() throws java.io.IOException;\n     descriptor: ()Ljava/io/InputStream;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field target:Ljava/nio/file/Path;\n+         1: getfield      #18                 // Field target:Ljava/nio/file/Path;\n          4: iconst_0\n-         5: anewarray     #5                  // class java/nio/file/OpenOption\n-         8: invokestatic  #16                 // Method java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+         5: anewarray     #22                 // class java/nio/file/OpenOption\n+         8: invokestatic  #59                 // Method java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n         11: areturn\n       LineNumberTable:\n         line 81: 0\n     Exceptions:\n       throws java.io.IOException\n \n   public void writeOut(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n-         1: getfield      #7                  // Field outputStream:Ljava/io/OutputStream;\n+         1: getfield      #30                 // Field outputStream:Ljava/io/OutputStream;\n          4: aload_1\n          5: iload_2\n          6: iload_3\n-         7: invokevirtual #17                 // Method java/io/OutputStream.write:([BII)V\n+         7: invokevirtual #63                 // Method java/io/OutputStream.write:([BII)V\n         10: return\n       LineNumberTable:\n         line 86: 0\n         line 87: 10\n     Exceptions:\n       throws java.io.IOException\n }\n"}]}
