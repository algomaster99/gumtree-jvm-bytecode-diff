{"diffoscope-json-version": 1, "source1": "first/AtclauseOrderCheck.class", "source2": "second/AtclauseOrderCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -22,64 +22,62 @@\n     private List<String> tagOrder;\n     \n     public AtclauseOrderCheck() {\n         this.target = TokenUtil.asBitSet(new int[] { 14, 15, 154, 9, 8, 10, 199, 203 });\n         this.tagOrder = Arrays.asList(AtclauseOrderCheck.DEFAULT_ORDER);\n     }\n     \n-    public void setTarget(final String... targets) {\n-        this.target = TokenUtil.asBitSet(targets);\n+    public void setTarget(final String... array) {\n+        this.target = TokenUtil.asBitSet(array);\n     }\n     \n-    public void setTagOrder(final String... orders) {\n-        this.tagOrder = Arrays.asList(orders);\n+    public void setTagOrder(final String... a) {\n+        this.tagOrder = Arrays.asList(a);\n     }\n     \n     public int[] getDefaultJavadocTokens() {\n         return new int[] { 10000 };\n     }\n     \n     public int[] getRequiredJavadocTokens() {\n         return this.getAcceptableJavadocTokens();\n     }\n     \n-    public void visitJavadocToken(final DetailNode ast) {\n-        final int parentType = getParentType(this.getBlockCommentAst());\n-        if (this.target.get(parentType)) {\n-            this.checkOrderInTagSection(ast);\n+    public void visitJavadocToken(final DetailNode detailNode) {\n+        if (this.target.get(getParentType(this.getBlockCommentAst()))) {\n+            this.checkOrderInTagSection(detailNode);\n         }\n     }\n     \n-    private void checkOrderInTagSection(final DetailNode javadoc) {\n-        int maxIndexOfPreviousTag = 0;\n-        for (final DetailNode node : javadoc.getChildren()) {\n-            if (node.getType() == 10071) {\n-                final String tagText = JavadocUtil.getFirstChild(node).getText();\n-                final int indexOfCurrentTag = this.tagOrder.indexOf(tagText);\n-                if (indexOfCurrentTag != -1) {\n-                    if (indexOfCurrentTag < maxIndexOfPreviousTag) {\n-                        this.log(node.getLineNumber(), \"at.clause.order\", new Object[] { this.tagOrder.toString() });\n+    private void checkOrderInTagSection(final DetailNode detailNode) {\n+        int n = 0;\n+        for (final DetailNode detailNode2 : detailNode.getChildren()) {\n+            if (detailNode2.getType() == 10071) {\n+                final int index = this.tagOrder.indexOf(JavadocUtil.getFirstChild(detailNode2).getText());\n+                if (index != -1) {\n+                    if (index < n) {\n+                        this.log(detailNode2.getLineNumber(), \"at.clause.order\", new Object[] { this.tagOrder.toString() });\n                     }\n                     else {\n-                        maxIndexOfPreviousTag = indexOfCurrentTag;\n+                        n = index;\n                     }\n                 }\n             }\n         }\n     }\n     \n-    private static int getParentType(final DetailAST commentBlock) {\n-        final DetailAST parentNode = commentBlock.getParent();\n-        int result = parentNode.getType();\n-        if (result == 13 || result == 5) {\n-            result = parentNode.getParent().getType();\n+    private static int getParentType(final DetailAST detailAST) {\n+        final DetailAST parent = detailAST.getParent();\n+        int n = parent.getType();\n+        if (n == 13 || n == 5) {\n+            n = parent.getParent().getType();\n         }\n-        else if (parentNode.getParent() != null && parentNode.getParent().getType() == 5) {\n-            result = parentNode.getParent().getParent().getType();\n+        else if (parent.getParent() != null && parent.getParent().getType() == 5) {\n+            n = parent.getParent().getParent().getType();\n         }\n-        return result;\n+        return n;\n     }\n     \n     static {\n         DEFAULT_ORDER = new String[] { \"@author\", \"@version\", \"@param\", \"@return\", \"@throws\", \"@exception\", \"@see\", \"@since\", \"@serial\", \"@serialField\", \"@serialData\", \"@deprecated\" };\n     }\n }\n"}]}
