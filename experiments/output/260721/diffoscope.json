{"diffoscope-json-version": 1, "source1": "first/SuffixFileFilter.class", "source2": "second/SuffixFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,80 +12,81 @@\n \n public class SuffixFileFilter extends AbstractFileFilter implements Serializable\n {\n     private static final long serialVersionUID = -3389157631240246157L;\n     private final String[] suffixes;\n     private final IOCase caseSensitivity;\n     \n-    public SuffixFileFilter(final List<String> suffixes) {\n-        this(suffixes, IOCase.SENSITIVE);\n+    public SuffixFileFilter(final List<String> list) {\n+        this(list, IOCase.SENSITIVE);\n     }\n     \n-    public SuffixFileFilter(final List<String> suffixes, final IOCase caseSensitivity) {\n-        if (suffixes == null) {\n+    public SuffixFileFilter(final List<String> list, final IOCase ioCase) {\n+        if (list == null) {\n             throw new IllegalArgumentException(\"The list of suffixes must not be null\");\n         }\n-        this.suffixes = suffixes.toArray(SuffixFileFilter.EMPTY_STRING_ARRAY);\n-        this.caseSensitivity = ((caseSensitivity == null) ? IOCase.SENSITIVE : caseSensitivity);\n+        this.suffixes = list.toArray(SuffixFileFilter.EMPTY_STRING_ARRAY);\n+        this.caseSensitivity = ((ioCase == null) ? IOCase.SENSITIVE : ioCase);\n     }\n     \n-    public SuffixFileFilter(final String suffix) {\n-        this(suffix, IOCase.SENSITIVE);\n+    public SuffixFileFilter(final String s) {\n+        this(s, IOCase.SENSITIVE);\n     }\n     \n-    public SuffixFileFilter(final String... suffixes) {\n-        this(suffixes, IOCase.SENSITIVE);\n+    public SuffixFileFilter(final String... array) {\n+        this(array, IOCase.SENSITIVE);\n     }\n     \n-    public SuffixFileFilter(final String suffix, final IOCase caseSensitivity) {\n-        if (suffix == null) {\n+    public SuffixFileFilter(final String s, final IOCase ioCase) {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"The suffix must not be null\");\n         }\n-        this.suffixes = new String[] { suffix };\n-        this.caseSensitivity = ((caseSensitivity == null) ? IOCase.SENSITIVE : caseSensitivity);\n+        this.suffixes = new String[] { s };\n+        this.caseSensitivity = ((ioCase == null) ? IOCase.SENSITIVE : ioCase);\n     }\n     \n-    public SuffixFileFilter(final String[] suffixes, final IOCase caseSensitivity) {\n-        if (suffixes == null) {\n+    public SuffixFileFilter(final String[] array, final IOCase ioCase) {\n+        if (array == null) {\n             throw new IllegalArgumentException(\"The array of suffixes must not be null\");\n         }\n-        System.arraycopy(suffixes, 0, this.suffixes = new String[suffixes.length], 0, suffixes.length);\n-        this.caseSensitivity = ((caseSensitivity == null) ? IOCase.SENSITIVE : caseSensitivity);\n+        System.arraycopy(array, 0, this.suffixes = new String[array.length], 0, array.length);\n+        this.caseSensitivity = ((ioCase == null) ? IOCase.SENSITIVE : ioCase);\n     }\n     \n     public boolean accept(final File file) {\n         return this.accept(file.getName());\n     }\n     \n-    public boolean accept(final File file, final String name) {\n-        return this.accept(name);\n+    public boolean accept(final File file, final String s) {\n+        return this.accept(s);\n     }\n     \n-    public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {\n-        return toFileVisitResult(this.accept(Objects.toString((Object)file.getFileName(), (String)null)), file);\n+    public FileVisitResult accept(final Path path, final BasicFileAttributes basicFileAttributes) {\n+        return toFileVisitResult(this.accept(Objects.toString((Object)path.getFileName(), (String)null)), path);\n     }\n     \n-    private boolean accept(final String name) {\n-        for (final String suffix : this.suffixes) {\n-            if (this.caseSensitivity.checkEndsWith(name, suffix)) {\n+    private boolean accept(final String s) {\n+        final String[] suffixes = this.suffixes;\n+        for (int length = suffixes.length, i = 0; i < length; ++i) {\n+            if (this.caseSensitivity.checkEndsWith(s, suffixes[i])) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n     public String toString() {\n-        final StringBuilder buffer = new StringBuilder();\n-        buffer.append(super.toString());\n-        buffer.append(\"(\");\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(super.toString());\n+        sb.append(\"(\");\n         if (this.suffixes != null) {\n             for (int i = 0; i < this.suffixes.length; ++i) {\n                 if (i > 0) {\n-                    buffer.append(\",\");\n+                    sb.append(\",\");\n                 }\n-                buffer.append(this.suffixes[i]);\n+                sb.append(this.suffixes[i]);\n             }\n         }\n-        buffer.append(\")\");\n-        return buffer.toString();\n+        sb.append(\")\");\n+        return sb.toString();\n     }\n }\n"}]}
