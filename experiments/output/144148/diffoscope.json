{"diffoscope-json-version": 1, "source1": "first/XpathUtil.class", "source2": "second/XpathUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,14 +1,12 @@\n \n package com.puppycrawl.tools.checkstyle.utils;\n \n-import java.util.stream.Stream;\n import net.sf.saxon.sxpath.XPathDynamicContext;\n import net.sf.saxon.sxpath.XPathExpression;\n-import java.util.Objects;\n import net.sf.saxon.om.Item;\n import net.sf.saxon.sxpath.XPathEvaluator;\n import net.sf.saxon.Configuration;\n import java.io.IOException;\n import net.sf.saxon.om.NodeInfo;\n import net.sf.saxon.trans.XPathException;\n import com.puppycrawl.tools.checkstyle.api.CheckstyleException;\n@@ -31,14 +29,21 @@\n public final class XpathUtil\n {\n     private static final BitSet TOKEN_TYPES_WITH_TEXT_ATTRIBUTE;\n     private static final Pattern NEWLINE_TO_TAG;\n     private static final Pattern CARRIAGE_RETURN_TO_TAG;\n     private static final String DELIMITER;\n     \n+    static {\n+        TOKEN_TYPES_WITH_TEXT_ATTRIBUTE = TokenUtil.asBitSet(new int[] { 58, 139, 138, 141, 137, 142, 140, 205, 183 });\n+        NEWLINE_TO_TAG = Pattern.compile(\"\\n\");\n+        CARRIAGE_RETURN_TO_TAG = Pattern.compile(\"\\r\");\n+        DELIMITER = \"---------\" + System.lineSeparator();\n+    }\n+    \n     private XpathUtil() {\n     }\n     \n     public static List<AbstractNode> createChildren(final AbstractNode root, final AbstractNode parent, final DetailAST firstChild) {\n         DetailAST currentChild = firstChild;\n         final int depth = parent.getDepth() + 1;\n         final List<AbstractNode> result = new ArrayList<AbstractNode>();\n@@ -77,20 +82,10 @@\n     }\n     \n     public static List<NodeInfo> getXpathItems(final String xpath, final AbstractNode rootNode) throws XPathException {\n         final XPathEvaluator xpathEvaluator = new XPathEvaluator(Configuration.newConfiguration());\n         final XPathExpression xpathExpression = xpathEvaluator.createExpression(xpath);\n         final XPathDynamicContext xpathDynamicContext = xpathExpression.createDynamicContext((Item)rootNode);\n         final List<Item> items = xpathExpression.evaluate(xpathDynamicContext);\n-        final Stream<Object> stream = items.stream();\n-        final Class<NodeInfo> obj = NodeInfo.class;\n-        Objects.requireNonNull(obj);\n-        return stream.map((Function<? super Object, ?>)obj::cast).collect((Collector<? super Object, ?, List<NodeInfo>>)Collectors.toUnmodifiableList());\n-    }\n-    \n-    static {\n-        TOKEN_TYPES_WITH_TEXT_ATTRIBUTE = TokenUtil.asBitSet(new int[] { 58, 139, 138, 141, 137, 142, 140, 205, 183 });\n-        NEWLINE_TO_TAG = Pattern.compile(\"\\n\");\n-        CARRIAGE_RETURN_TO_TAG = Pattern.compile(\"\\r\");\n-        DELIMITER = \"---------\" + System.lineSeparator();\n+        return items.stream().map((Function<? super Object, ?>)NodeInfo.class::cast).collect((Collector<? super Object, ?, List<NodeInfo>>)Collectors.toUnmodifiableList());\n     }\n }\n"}]}
