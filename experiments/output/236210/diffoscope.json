{"diffoscope-json-version": 1, "source1": "first/SequenceReader.class", "source2": "second/SequenceReader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,67 +8,67 @@\n import java.io.Reader;\n \n public class SequenceReader extends Reader\n {\n     private Reader reader;\n     private Iterator<? extends Reader> readers;\n     \n-    public SequenceReader(final Iterable<? extends Reader> readers) {\n-        this.readers = ((Iterable<? extends Reader>)Objects.requireNonNull(readers, \"readers\")).iterator();\n+    public SequenceReader(final Iterable<? extends Reader> obj) {\n+        this.readers = ((Iterable<? extends Reader>)Objects.requireNonNull(obj, \"readers\")).iterator();\n         this.reader = this.nextReader();\n     }\n     \n-    public SequenceReader(final Reader... readers) {\n-        this(Arrays.asList(readers));\n+    public SequenceReader(final Reader... a) {\n+        this(Arrays.asList(a));\n     }\n     \n     @Override\n     public void close() throws IOException {\n         this.readers = null;\n         this.reader = null;\n     }\n     \n     private Reader nextReader() {\n         return this.readers.hasNext() ? ((Reader)this.readers.next()) : null;\n     }\n     \n     @Override\n     public int read() throws IOException {\n-        int c = -1;\n+        int read = -1;\n         while (this.reader != null) {\n-            c = this.reader.read();\n-            if (c != -1) {\n+            read = this.reader.read();\n+            if (read != -1) {\n                 break;\n             }\n             this.reader = this.nextReader();\n         }\n-        return c;\n+        return read;\n     }\n     \n     @Override\n-    public int read(final char[] cbuf, int off, int len) throws IOException {\n-        Objects.requireNonNull(cbuf, \"cbuf\");\n-        if (len < 0 || off < 0 || off + len > cbuf.length) {\n-            throw new IndexOutOfBoundsException(\"Array Size=\" + cbuf.length + \", offset=\" + off + \", length=\" + len);\n+    public int read(final char[] obj, int i, int j) throws IOException {\n+        Objects.requireNonNull(obj, \"cbuf\");\n+        if (j < 0 || i < 0 || i + j > obj.length) {\n+            throw new IndexOutOfBoundsException(\"Array Size=\" + obj.length + \", offset=\" + i + \", length=\" + j);\n         }\n-        int count = 0;\n+        int n = 0;\n         while (this.reader != null) {\n-            final int readLen = this.reader.read(cbuf, off, len);\n-            if (readLen == -1) {\n+            final int read = this.reader.read(obj, i, j);\n+            if (read == -1) {\n                 this.reader = this.nextReader();\n             }\n             else {\n-                count += readLen;\n-                off += readLen;\n-                len -= readLen;\n-                if (len <= 0) {\n+                n += read;\n+                i += read;\n+                j -= read;\n+                if (j <= 0) {\n                     break;\n                 }\n                 continue;\n             }\n         }\n-        if (count > 0) {\n-            return count;\n+        if (n > 0) {\n+            return n;\n         }\n         return -1;\n     }\n }\n"}]}
