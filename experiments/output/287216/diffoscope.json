{"diffoscope-json-version": 1, "source1": "first/ZipEightByteInteger.class", "source2": "second/ZipEightByteInteger.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,172 +1,176 @@\n-  SHA-256 checksum 6358b485881ff543c7a2b662a5cf00c971fe3a26c208147196f9fc4ab59a372e\n+  SHA-256 checksum ce3f16bff97885b6efb5522c033a33423294629ac96fb9c09c973aabff9a4423\n   Compiled from \"ZipEightByteInteger.java\"\n public final class org.apache.commons.compress.archivers.zip.ZipEightByteInteger implements java.io.Serializable\n   minor version: 0\n-  major version: 52\n+  major version: 53\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #12                         // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  super_class: #41                        // java/lang/Object\n-  interfaces: 1, fields: 26, methods: 17, attributes: 1\n+  super_class: #36                        // java/lang/Object\n+  interfaces: 1, fields: 26, methods: 17, attributes: 3\n Constant pool:\n-    #1 = Class              #127          // org/apache/commons/compress/archivers/zip/ZipConstants\n-    #2 = Methodref          #128.#129     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-    #3 = Methodref          #12.#130      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(Ljava/math/BigInteger;)V\n-    #4 = Methodref          #41.#131      // java/lang/Object.\"<init>\":()V\n-    #5 = Fieldref           #12.#132      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.value:Ljava/math/BigInteger;\n-    #6 = Methodref          #12.#133      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-    #7 = Methodref          #12.#134      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:([BI)Ljava/math/BigInteger;\n-    #8 = Methodref          #12.#135      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:(Ljava/math/BigInteger;)[B\n-    #9 = Methodref          #128.#136     // java/math/BigInteger.longValue:()J\n+    #1 = Class              #122          // org/apache/commons/compress/archivers/zip/ZipConstants\n+    #2 = Methodref          #109.#123     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+    #3 = Methodref          #12.#124      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(Ljava/math/BigInteger;)V\n+    #4 = Methodref          #36.#125      // java/lang/Object.\"<init>\":()V\n+    #5 = Fieldref           #12.#126      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.value:Ljava/math/BigInteger;\n+    #6 = Methodref          #12.#127      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+    #7 = Methodref          #12.#128      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:([BI)Ljava/math/BigInteger;\n+    #8 = Methodref          #12.#129      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:(Ljava/math/BigInteger;)[B\n+    #9 = Methodref          #109.#130     // java/math/BigInteger.longValue:()J\n    #10 = Long               255l\n-   #12 = Class              #137          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #12 = Class              #131          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n    #13 = Long               65280l\n    #15 = Long               16711680l\n    #17 = Long               4278190080l\n    #19 = Long               1095216660480l\n    #21 = Long               280375465082880l\n    #23 = Long               71776119061217280l\n    #25 = Long               9151314442816847872l\n-   #27 = Methodref          #128.#138     // java/math/BigInteger.testBit:(I)Z\n-   #28 = Methodref          #128.#139     // java/math/BigInteger.setBit:(I)Ljava/math/BigInteger;\n-   #29 = Methodref          #12.#140      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([BI)J\n-   #30 = Methodref          #12.#141      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:()Ljava/math/BigInteger;\n-   #31 = Methodref          #128.#142     // java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n-   #32 = Methodref          #128.#143     // java/math/BigInteger.hashCode:()I\n-   #33 = Class              #144          // java/lang/StringBuilder\n-   #34 = Methodref          #33.#131      // java/lang/StringBuilder.\"<init>\":()V\n-   #35 = String             #145          // ZipEightByteInteger value:\n-   #36 = Methodref          #33.#146      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #37 = Methodref          #33.#147      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #38 = Methodref          #33.#148      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #39 = Methodref          #12.#149      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-   #40 = Fieldref           #12.#150      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #41 = Class              #151          // java/lang/Object\n-   #42 = Class              #152          // java/io/Serializable\n-   #43 = Utf8               serialVersionUID\n-   #44 = Utf8               J\n-   #45 = Utf8               ConstantValue\n-   #46 = Long               1l\n-   #48 = Utf8               BYTE_1\n-   #49 = Utf8               I\n-   #50 = Integer            1\n-   #51 = Utf8               BYTE_1_MASK\n-   #52 = Integer            65280\n-   #53 = Utf8               BYTE_1_SHIFT\n-   #54 = Integer            8\n-   #55 = Utf8               BYTE_2\n-   #56 = Integer            2\n-   #57 = Utf8               BYTE_2_MASK\n-   #58 = Integer            16711680\n-   #59 = Utf8               BYTE_2_SHIFT\n-   #60 = Integer            16\n-   #61 = Utf8               BYTE_3\n-   #62 = Integer            3\n-   #63 = Utf8               BYTE_3_MASK\n-   #64 = Utf8               BYTE_3_SHIFT\n-   #65 = Integer            24\n-   #66 = Utf8               BYTE_4\n-   #67 = Integer            4\n-   #68 = Utf8               BYTE_4_MASK\n-   #69 = Utf8               BYTE_4_SHIFT\n-   #70 = Integer            32\n-   #71 = Utf8               BYTE_5\n-   #72 = Integer            5\n-   #73 = Utf8               BYTE_5_MASK\n-   #74 = Utf8               BYTE_5_SHIFT\n-   #75 = Integer            40\n-   #76 = Utf8               BYTE_6\n-   #77 = Integer            6\n-   #78 = Utf8               BYTE_6_MASK\n-   #79 = Utf8               BYTE_6_SHIFT\n-   #80 = Integer            48\n-   #81 = Utf8               BYTE_7\n-   #82 = Integer            7\n-   #83 = Utf8               BYTE_7_MASK\n-   #84 = Utf8               BYTE_7_SHIFT\n-   #85 = Integer            56\n-   #86 = Utf8               LEFTMOST_BIT_SHIFT\n-   #87 = Integer            63\n-   #88 = Utf8               LEFTMOST_BIT\n-   #89 = Utf8               B\n-   #90 = Integer            -128\n-   #91 = Utf8               value\n-   #92 = Utf8               Ljava/math/BigInteger;\n-   #93 = Utf8               ZERO\n-   #94 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #95 = Utf8               <init>\n-   #96 = Utf8               (J)V\n-   #97 = Utf8               Code\n-   #98 = Utf8               LineNumberTable\n-   #99 = Utf8               (Ljava/math/BigInteger;)V\n-  #100 = Utf8               ([B)V\n-  #101 = Utf8               ([BI)V\n-  #102 = Utf8               getBytes\n-  #103 = Utf8               ()[B\n-  #104 = Utf8               getLongValue\n-  #105 = Utf8               ()J\n-  #106 = Utf8               getValue\n-  #107 = Utf8               ()Ljava/math/BigInteger;\n-  #108 = Utf8               (J)[B\n-  #109 = Utf8               (Ljava/math/BigInteger;)[B\n-  #110 = Utf8               StackMapTable\n-  #111 = Class              #153          // \"[B\"\n-  #112 = Utf8               ([BI)J\n-  #113 = Utf8               ([BI)Ljava/math/BigInteger;\n-  #114 = Class              #154          // java/math/BigInteger\n-  #115 = Utf8               ([B)J\n-  #116 = Utf8               ([B)Ljava/math/BigInteger;\n-  #117 = Utf8               equals\n-  #118 = Utf8               (Ljava/lang/Object;)Z\n-  #119 = Utf8               hashCode\n-  #120 = Utf8               ()I\n-  #121 = Utf8               toString\n-  #122 = Utf8               ()Ljava/lang/String;\n-  #123 = Utf8               <clinit>\n-  #124 = Utf8               ()V\n-  #125 = Utf8               SourceFile\n-  #126 = Utf8               ZipEightByteInteger.java\n-  #127 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-  #128 = Class              #154          // java/math/BigInteger\n-  #129 = NameAndType        #155:#156     // valueOf:(J)Ljava/math/BigInteger;\n-  #130 = NameAndType        #95:#99       // \"<init>\":(Ljava/math/BigInteger;)V\n-  #131 = NameAndType        #95:#124      // \"<init>\":()V\n-  #132 = NameAndType        #91:#92       // value:Ljava/math/BigInteger;\n-  #133 = NameAndType        #95:#101      // \"<init>\":([BI)V\n-  #134 = NameAndType        #106:#113     // getValue:([BI)Ljava/math/BigInteger;\n-  #135 = NameAndType        #102:#109     // getBytes:(Ljava/math/BigInteger;)[B\n-  #136 = NameAndType        #157:#105     // longValue:()J\n-  #137 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #138 = NameAndType        #158:#159     // testBit:(I)Z\n-  #139 = NameAndType        #160:#161     // setBit:(I)Ljava/math/BigInteger;\n-  #140 = NameAndType        #104:#112     // getLongValue:([BI)J\n-  #141 = NameAndType        #106:#107     // getValue:()Ljava/math/BigInteger;\n-  #142 = NameAndType        #117:#118     // equals:(Ljava/lang/Object;)Z\n-  #143 = NameAndType        #119:#120     // hashCode:()I\n-  #144 = Utf8               java/lang/StringBuilder\n-  #145 = Utf8               ZipEightByteInteger value:\n-  #146 = NameAndType        #162:#163     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #147 = NameAndType        #162:#164     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #148 = NameAndType        #121:#122     // toString:()Ljava/lang/String;\n-  #149 = NameAndType        #95:#96       // \"<init>\":(J)V\n-  #150 = NameAndType        #93:#94       // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #151 = Utf8               java/lang/Object\n-  #152 = Utf8               java/io/Serializable\n-  #153 = Utf8               [B\n-  #154 = Utf8               java/math/BigInteger\n-  #155 = Utf8               valueOf\n-  #156 = Utf8               (J)Ljava/math/BigInteger;\n-  #157 = Utf8               longValue\n-  #158 = Utf8               testBit\n-  #159 = Utf8               (I)Z\n-  #160 = Utf8               setBit\n-  #161 = Utf8               (I)Ljava/math/BigInteger;\n-  #162 = Utf8               append\n-  #163 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #164 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #27 = Methodref          #109.#132     // java/math/BigInteger.testBit:(I)Z\n+   #28 = Methodref          #109.#133     // java/math/BigInteger.setBit:(I)Ljava/math/BigInteger;\n+   #29 = Methodref          #12.#134      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([BI)J\n+   #30 = Methodref          #12.#135      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:()Ljava/math/BigInteger;\n+   #31 = Methodref          #109.#136     // java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n+   #32 = Methodref          #109.#137     // java/math/BigInteger.hashCode:()I\n+   #33 = InvokeDynamic      #0:#141       // #0:makeConcatWithConstants:(Ljava/math/BigInteger;)Ljava/lang/String;\n+   #34 = Methodref          #12.#142      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+   #35 = Fieldref           #12.#143      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #36 = Class              #144          // java/lang/Object\n+   #37 = Class              #145          // java/io/Serializable\n+   #38 = Utf8               serialVersionUID\n+   #39 = Utf8               J\n+   #40 = Utf8               ConstantValue\n+   #41 = Long               1l\n+   #43 = Utf8               BYTE_1\n+   #44 = Utf8               I\n+   #45 = Integer            1\n+   #46 = Utf8               BYTE_1_MASK\n+   #47 = Integer            65280\n+   #48 = Utf8               BYTE_1_SHIFT\n+   #49 = Integer            8\n+   #50 = Utf8               BYTE_2\n+   #51 = Integer            2\n+   #52 = Utf8               BYTE_2_MASK\n+   #53 = Integer            16711680\n+   #54 = Utf8               BYTE_2_SHIFT\n+   #55 = Integer            16\n+   #56 = Utf8               BYTE_3\n+   #57 = Integer            3\n+   #58 = Utf8               BYTE_3_MASK\n+   #59 = Utf8               BYTE_3_SHIFT\n+   #60 = Integer            24\n+   #61 = Utf8               BYTE_4\n+   #62 = Integer            4\n+   #63 = Utf8               BYTE_4_MASK\n+   #64 = Utf8               BYTE_4_SHIFT\n+   #65 = Integer            32\n+   #66 = Utf8               BYTE_5\n+   #67 = Integer            5\n+   #68 = Utf8               BYTE_5_MASK\n+   #69 = Utf8               BYTE_5_SHIFT\n+   #70 = Integer            40\n+   #71 = Utf8               BYTE_6\n+   #72 = Integer            6\n+   #73 = Utf8               BYTE_6_MASK\n+   #74 = Utf8               BYTE_6_SHIFT\n+   #75 = Integer            48\n+   #76 = Utf8               BYTE_7\n+   #77 = Integer            7\n+   #78 = Utf8               BYTE_7_MASK\n+   #79 = Utf8               BYTE_7_SHIFT\n+   #80 = Integer            56\n+   #81 = Utf8               LEFTMOST_BIT_SHIFT\n+   #82 = Integer            63\n+   #83 = Utf8               LEFTMOST_BIT\n+   #84 = Utf8               B\n+   #85 = Integer            -128\n+   #86 = Utf8               value\n+   #87 = Utf8               Ljava/math/BigInteger;\n+   #88 = Utf8               ZERO\n+   #89 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #90 = Utf8               <init>\n+   #91 = Utf8               (J)V\n+   #92 = Utf8               Code\n+   #93 = Utf8               LineNumberTable\n+   #94 = Utf8               (Ljava/math/BigInteger;)V\n+   #95 = Utf8               ([B)V\n+   #96 = Utf8               ([BI)V\n+   #97 = Utf8               getBytes\n+   #98 = Utf8               ()[B\n+   #99 = Utf8               getLongValue\n+  #100 = Utf8               ()J\n+  #101 = Utf8               getValue\n+  #102 = Utf8               ()Ljava/math/BigInteger;\n+  #103 = Utf8               (J)[B\n+  #104 = Utf8               (Ljava/math/BigInteger;)[B\n+  #105 = Utf8               StackMapTable\n+  #106 = Class              #146          // \"[B\"\n+  #107 = Utf8               ([BI)J\n+  #108 = Utf8               ([BI)Ljava/math/BigInteger;\n+  #109 = Class              #147          // java/math/BigInteger\n+  #110 = Utf8               ([B)J\n+  #111 = Utf8               ([B)Ljava/math/BigInteger;\n+  #112 = Utf8               equals\n+  #113 = Utf8               (Ljava/lang/Object;)Z\n+  #114 = Utf8               hashCode\n+  #115 = Utf8               ()I\n+  #116 = Utf8               toString\n+  #117 = Utf8               ()Ljava/lang/String;\n+  #118 = Utf8               <clinit>\n+  #119 = Utf8               ()V\n+  #120 = Utf8               SourceFile\n+  #121 = Utf8               ZipEightByteInteger.java\n+  #122 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+  #123 = NameAndType        #148:#149     // valueOf:(J)Ljava/math/BigInteger;\n+  #124 = NameAndType        #90:#94       // \"<init>\":(Ljava/math/BigInteger;)V\n+  #125 = NameAndType        #90:#119      // \"<init>\":()V\n+  #126 = NameAndType        #86:#87       // value:Ljava/math/BigInteger;\n+  #127 = NameAndType        #90:#96       // \"<init>\":([BI)V\n+  #128 = NameAndType        #101:#108     // getValue:([BI)Ljava/math/BigInteger;\n+  #129 = NameAndType        #97:#104      // getBytes:(Ljava/math/BigInteger;)[B\n+  #130 = NameAndType        #150:#100     // longValue:()J\n+  #131 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #132 = NameAndType        #151:#152     // testBit:(I)Z\n+  #133 = NameAndType        #153:#154     // setBit:(I)Ljava/math/BigInteger;\n+  #134 = NameAndType        #99:#107      // getLongValue:([BI)J\n+  #135 = NameAndType        #101:#102     // getValue:()Ljava/math/BigInteger;\n+  #136 = NameAndType        #112:#113     // equals:(Ljava/lang/Object;)Z\n+  #137 = NameAndType        #114:#115     // hashCode:()I\n+  #138 = Utf8               BootstrapMethods\n+  #139 = MethodHandle       6:#155        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #140 = String             #156          // ZipEightByteInteger value: \\u0001\n+  #141 = NameAndType        #157:#158     // makeConcatWithConstants:(Ljava/math/BigInteger;)Ljava/lang/String;\n+  #142 = NameAndType        #90:#91       // \"<init>\":(J)V\n+  #143 = NameAndType        #88:#89       // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #144 = Utf8               java/lang/Object\n+  #145 = Utf8               java/io/Serializable\n+  #146 = Utf8               [B\n+  #147 = Utf8               java/math/BigInteger\n+  #148 = Utf8               valueOf\n+  #149 = Utf8               (J)Ljava/math/BigInteger;\n+  #150 = Utf8               longValue\n+  #151 = Utf8               testBit\n+  #152 = Utf8               (I)Z\n+  #153 = Utf8               setBit\n+  #154 = Utf8               (I)Ljava/math/BigInteger;\n+  #155 = Methodref          #159.#160     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #156 = Utf8               ZipEightByteInteger value: \\u0001\n+  #157 = Utf8               makeConcatWithConstants\n+  #158 = Utf8               (Ljava/math/BigInteger;)Ljava/lang/String;\n+  #159 = Class              #161          // java/lang/invoke/StringConcatFactory\n+  #160 = NameAndType        #157:#165     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #161 = Utf8               java/lang/invoke/StringConcatFactory\n+  #162 = Class              #167          // java/lang/invoke/MethodHandles$Lookup\n+  #163 = Utf8               Lookup\n+  #164 = Utf8               InnerClasses\n+  #165 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #166 = Class              #168          // java/lang/invoke/MethodHandles\n+  #167 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #168 = Utf8               java/lang/invoke/MethodHandles\n {\n   private static final long serialVersionUID = 1l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 1l\n \n   private static final int BYTE_1 = 1;\n@@ -664,15 +668,15 @@\n         line 180: 48\n         line 181: 64\n         line 182: 80\n         line 183: 96\n         line 184: 112\n         line 185: 123\n         line 186: 129\n-        line 187: 147\n+        line 187: 143\n         line 186: 155\n       StackMapTable: number_of_entries = 2\n         frame_type = 253 /* append */\n           offset_delta = 153\n           locals = [ long, class java/math/BigInteger ]\n         frame_type = 65 /* same_locals_1_stack_item */\n           stack = [ class java/math/BigInteger ]\n@@ -737,36 +741,36 @@\n       LineNumberTable:\n         line 227: 0\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n-      stack=2, locals=1, args_size=1\n-         0: new           #33                 // class java/lang/StringBuilder\n-         3: dup\n-         4: invokespecial #34                 // Method java/lang/StringBuilder.\"<init>\":()V\n-         7: ldc           #35                 // String ZipEightByteInteger value:\n-         9: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        12: aload_0\n-        13: getfield      #5                  // Field value:Ljava/math/BigInteger;\n-        16: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-        19: invokevirtual #38                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        22: areturn\n+      stack=1, locals=1, args_size=1\n+         0: aload_0\n+         1: getfield      #5                  // Field value:Ljava/math/BigInteger;\n+         4: invokedynamic #33,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/math/BigInteger;)Ljava/lang/String;\n+         9: areturn\n       LineNumberTable:\n         line 232: 0\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=0, args_size=0\n          0: new           #12                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n          3: dup\n          4: lconst_0\n-         5: invokespecial #39                 // Method \"<init>\":(J)V\n-         8: putstatic     #40                 // Field ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         5: invokespecial #34                 // Method \"<init>\":(J)V\n+         8: putstatic     #35                 // Field ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         11: return\n       LineNumberTable:\n         line 68: 0\n }\n SourceFile: \"ZipEightByteInteger.java\"\n+InnerClasses:\n+  public static final #163= #162 of #166; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+BootstrapMethods:\n+  0: #139 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #140 ZipEightByteInteger value: \\u0001\n"}]}
