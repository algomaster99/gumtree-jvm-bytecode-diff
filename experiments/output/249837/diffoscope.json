{"diffoscope-json-version": 1, "source1": "first/IllegalInstantiationCheck.class", "source2": "second/IllegalInstantiationCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -40,140 +40,130 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 30, 136, 16, 14 };\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         this.pkgName = null;\n         this.imports.clear();\n         this.instantiations.clear();\n         this.classNames.clear();\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        switch (ast.getType()) {\n+    public void visitToken(final DetailAST detailAST) {\n+        switch (detailAST.getType()) {\n             case 136: {\n-                this.processLiteralNew(ast);\n+                this.processLiteralNew(detailAST);\n                 break;\n             }\n             case 16: {\n-                this.processPackageDef(ast);\n+                this.processPackageDef(detailAST);\n                 break;\n             }\n             case 30: {\n-                this.processImport(ast);\n+                this.processImport(detailAST);\n                 break;\n             }\n             case 14: {\n-                this.processClassDef(ast);\n+                this.processClassDef(detailAST);\n                 break;\n             }\n             default: {\n-                throw new IllegalArgumentException(\"Unknown type \" + ast);\n+                throw new IllegalArgumentException(\"Unknown type \" + detailAST);\n             }\n         }\n     }\n     \n-    public void finishTree(final DetailAST rootAST) {\n+    public void finishTree(final DetailAST detailAST) {\n         this.instantiations.forEach(this::postProcessLiteralNew);\n     }\n     \n-    private void processClassDef(final DetailAST ast) {\n-        final DetailAST identToken = ast.findFirstToken(58);\n-        final String className = identToken.getText();\n-        this.classNames.add(className);\n+    private void processClassDef(final DetailAST detailAST) {\n+        this.classNames.add(detailAST.findFirstToken(58).getText());\n     }\n     \n-    private void processImport(final DetailAST ast) {\n-        final FullIdent name = FullIdent.createFullIdentBelow(ast);\n-        this.imports.add(name);\n+    private void processImport(final DetailAST detailAST) {\n+        this.imports.add(FullIdent.createFullIdentBelow(detailAST));\n     }\n     \n-    private void processPackageDef(final DetailAST ast) {\n-        final DetailAST packageNameAST = ast.getLastChild().getPreviousSibling();\n-        final FullIdent packageIdent = FullIdent.createFullIdent(packageNameAST);\n-        this.pkgName = packageIdent.getText();\n+    private void processPackageDef(final DetailAST detailAST) {\n+        this.pkgName = FullIdent.createFullIdent(detailAST.getLastChild().getPreviousSibling()).getText();\n     }\n     \n-    private void processLiteralNew(final DetailAST ast) {\n-        if (ast.getParent().getType() != 180) {\n-            this.instantiations.add(ast);\n+    private void processLiteralNew(final DetailAST detailAST) {\n+        if (detailAST.getParent().getType() != 180) {\n+            this.instantiations.add(detailAST);\n         }\n     }\n     \n-    private void postProcessLiteralNew(final DetailAST newTokenAst) {\n-        final DetailAST typeNameAst = newTokenAst.getFirstChild();\n-        final DetailAST nameSibling = typeNameAst.getNextSibling();\n-        if (nameSibling.getType() != 17) {\n-            final FullIdent typeIdent = FullIdent.createFullIdent(typeNameAst);\n-            final String typeName = typeIdent.getText();\n-            final String fqClassName = this.getIllegalInstantiation(typeName);\n-            if (fqClassName != null) {\n-                this.log(newTokenAst, \"instantiation.avoid\", new Object[] { fqClassName });\n+    private void postProcessLiteralNew(final DetailAST detailAST) {\n+        final DetailAST firstChild = detailAST.getFirstChild();\n+        if (firstChild.getNextSibling().getType() != 17) {\n+            final String illegalInstantiation = this.getIllegalInstantiation(FullIdent.createFullIdent(firstChild).getText());\n+            if (illegalInstantiation != null) {\n+                this.log(detailAST, \"instantiation.avoid\", new Object[] { illegalInstantiation });\n             }\n         }\n     }\n     \n-    private String getIllegalInstantiation(final String className) {\n-        String fullClassName = null;\n-        if (this.classes.contains(className)) {\n-            fullClassName = className;\n+    private String getIllegalInstantiation(final String s) {\n+        String checkImportStatements = null;\n+        if (this.classes.contains(s)) {\n+            checkImportStatements = s;\n         }\n         else {\n-            int pkgNameLen;\n+            int length;\n             if (this.pkgName == null) {\n-                pkgNameLen = 0;\n+                length = 0;\n             }\n             else {\n-                pkgNameLen = this.pkgName.length();\n+                length = this.pkgName.length();\n             }\n-            for (final String illegal : this.classes) {\n-                if (this.isSamePackage(className, pkgNameLen, illegal) || this.isStandardClass(className, illegal)) {\n-                    fullClassName = illegal;\n+            for (final String s2 : this.classes) {\n+                if (this.isSamePackage(s, length, s2) || this.isStandardClass(s, s2)) {\n+                    checkImportStatements = s2;\n                 }\n                 else {\n-                    fullClassName = this.checkImportStatements(className);\n+                    checkImportStatements = this.checkImportStatements(s);\n                 }\n-                if (fullClassName != null) {\n+                if (checkImportStatements != null) {\n                     break;\n                 }\n             }\n         }\n-        return fullClassName;\n+        return checkImportStatements;\n     }\n     \n-    private String checkImportStatements(final String className) {\n-        String illegalType = null;\n-        for (FullIdent importLineText : this.imports) {\n-            String importArg = importLineText.getText();\n-            if (importArg.endsWith(\".*\")) {\n-                importArg = importArg.substring(0, importArg.length() - 1) + className;\n+    private String checkImportStatements(final String anObject) {\n+        String s = null;\n+        final Iterator<FullIdent> iterator = this.imports.iterator();\n+        while (iterator.hasNext()) {\n+            String text = ((FullIdent)iterator.next()).getText();\n+            if (text.endsWith(\".*\")) {\n+                text = text.substring(0, text.length() - 1) + anObject;\n             }\n-            if (CommonUtil.baseClassName(importArg).equals(className) && this.classes.contains(importArg)) {\n-                illegalType = importArg;\n+            if (CommonUtil.baseClassName(text).equals(anObject) && this.classes.contains(text)) {\n+                s = text;\n                 break;\n             }\n         }\n-        return illegalType;\n+        return s;\n     }\n     \n-    private boolean isSamePackage(final String className, final int pkgNameLen, final String illegal) {\n-        return this.pkgName != null && className.length() == illegal.length() - pkgNameLen - 1 && illegal.charAt(pkgNameLen) == '.' && illegal.endsWith(className) && illegal.startsWith(this.pkgName);\n+    private boolean isSamePackage(final String suffix, final int index, final String s) {\n+        return this.pkgName != null && suffix.length() == s.length() - index - 1 && s.charAt(index) == '.' && s.endsWith(suffix) && s.startsWith(this.pkgName);\n     }\n     \n-    private boolean isStandardClass(final String className, final String illegal) {\n-        boolean isStandardClass = false;\n-        if (illegal.length() - \"java.lang.\".length() == className.length() && illegal.endsWith(className) && illegal.startsWith(\"java.lang.\")) {\n-            final boolean isSameFile = this.classNames.contains(className);\n-            if (!isSameFile) {\n-                isStandardClass = true;\n-            }\n+    private boolean isStandardClass(final String suffix, final String s) {\n+        boolean b = false;\n+        if (s.length() - \"java.lang.\".length() == suffix.length() && s.endsWith(suffix) && s.startsWith(\"java.lang.\") && !this.classNames.contains(suffix)) {\n+            b = true;\n         }\n-        return isStandardClass;\n+        return b;\n     }\n     \n-    public void setClasses(final String... names) {\n-        this.classes = Arrays.stream(names).collect((Collector<? super String, ?, Set<String>>)Collectors.toSet());\n+    public void setClasses(final String... array) {\n+        this.classes = Arrays.stream(array).collect((Collector<? super String, ?, Set<String>>)Collectors.toSet());\n     }\n }\n"}]}
