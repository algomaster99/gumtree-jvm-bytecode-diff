{"diffoscope-json-version": 1, "source1": "first/XpathFileGeneratorAuditListener.class", "source2": "second/XpathFileGeneratorAuditListener.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,59 +18,59 @@\n     private boolean isXmlHeaderPrinted;\n     \n     public XpathFileGeneratorAuditListener(final OutputStream out, final AbstractAutomaticBean.OutputStreamOptions outputStreamOptions) {\n         this.writer = new PrintWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n         this.closeStream = (outputStreamOptions == AbstractAutomaticBean.OutputStreamOptions.CLOSE);\n     }\n     \n-    public void auditStarted(final AuditEvent event) {\n+    public void auditStarted(final AuditEvent auditEvent) {\n     }\n     \n-    public void auditFinished(final AuditEvent event) {\n+    public void auditFinished(final AuditEvent auditEvent) {\n         if (this.isXmlHeaderPrinted) {\n             this.writer.println(\"</suppressions>\");\n         }\n         this.writer.flush();\n         if (this.closeStream) {\n             this.writer.close();\n         }\n     }\n     \n-    public void fileStarted(final AuditEvent event) {\n+    public void fileStarted(final AuditEvent auditEvent) {\n     }\n     \n-    public void fileFinished(final AuditEvent event) {\n+    public void fileFinished(final AuditEvent auditEvent) {\n     }\n     \n-    public void addError(final AuditEvent event) {\n-        final String xpathQuery = XpathFileGeneratorAstFilter.findCorrespondingXpathQuery(event);\n-        if (xpathQuery != null) {\n+    public void addError(final AuditEvent auditEvent) {\n+        final String correspondingXpathQuery = XpathFileGeneratorAstFilter.findCorrespondingXpathQuery(auditEvent);\n+        if (correspondingXpathQuery != null) {\n             this.printXmlHeader();\n-            final File file = new File(event.getFileName());\n+            final File file = new File(auditEvent.getFileName());\n             this.writer.println(\"<suppress-xpath\");\n             this.writer.print(\"       files=\\\"\");\n             this.writer.print(file.getName());\n             this.writer.println(\"\\\"\");\n-            if (event.getModuleId() == null) {\n-                final String checkName = PackageObjectFactory.getShortFromFullModuleNames(event.getSourceName());\n+            if (auditEvent.getModuleId() == null) {\n+                final String shortFromFullModuleNames = PackageObjectFactory.getShortFromFullModuleNames(auditEvent.getSourceName());\n                 this.writer.print(\"       checks=\\\"\");\n-                this.writer.print(checkName);\n+                this.writer.print(shortFromFullModuleNames);\n             }\n             else {\n                 this.writer.print(\"       id=\\\"\");\n-                this.writer.print(event.getModuleId());\n+                this.writer.print(auditEvent.getModuleId());\n             }\n             this.writer.println(\"\\\"\");\n             this.writer.print(\"       query=\\\"\");\n-            this.writer.print(xpathQuery);\n+            this.writer.print(correspondingXpathQuery);\n             this.writer.println(\"\\\"/>\");\n         }\n     }\n     \n-    public void addException(final AuditEvent event, final Throwable throwable) {\n+    public void addException(final AuditEvent auditEvent, final Throwable t) {\n         throw new UnsupportedOperationException(\"Operation is not supported\");\n     }\n     \n     private void printXmlHeader() {\n         if (!this.isXmlHeaderPrinted) {\n             this.writer.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n             this.writer.println(\"<!DOCTYPE suppressions PUBLIC\");\n"}]}
