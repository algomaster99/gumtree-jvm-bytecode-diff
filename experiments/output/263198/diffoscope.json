{"diffoscope-json-version": 1, "source1": "first/MutableShort.class", "source2": "second/MutableShort.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,96 +11,96 @@\n     public MutableShort() {\n     }\n     \n     public MutableShort(final short value) {\n         this.value = value;\n     }\n     \n-    public MutableShort(final Number value) {\n-        this.value = value.shortValue();\n+    public MutableShort(final Number n) {\n+        this.value = n.shortValue();\n     }\n     \n-    public MutableShort(final String value) {\n-        this.value = Short.parseShort(value);\n+    public MutableShort(final String s) {\n+        this.value = Short.parseShort(s);\n     }\n     \n     public Short getValue() {\n         return Short.valueOf(this.value);\n     }\n     \n     public void setValue(final short value) {\n         this.value = value;\n     }\n     \n-    public void setValue(final Number value) {\n-        this.value = value.shortValue();\n+    public void setValue(final Number n) {\n+        this.value = n.shortValue();\n     }\n     \n     public void increment() {\n         ++this.value;\n     }\n     \n     public short getAndIncrement() {\n-        final short last = this.value;\n+        final short value = this.value;\n         ++this.value;\n-        return last;\n+        return value;\n     }\n     \n     public short incrementAndGet() {\n         return (short)(++this.value);\n     }\n     \n     public void decrement() {\n         --this.value;\n     }\n     \n     public short getAndDecrement() {\n-        final short last = this.value;\n+        final short value = this.value;\n         --this.value;\n-        return last;\n+        return value;\n     }\n     \n     public short decrementAndGet() {\n         return (short)(--this.value);\n     }\n     \n-    public void add(final short operand) {\n-        this.value += operand;\n+    public void add(final short n) {\n+        this.value += n;\n     }\n     \n-    public void add(final Number operand) {\n-        this.value += operand.shortValue();\n+    public void add(final Number n) {\n+        this.value += n.shortValue();\n     }\n     \n-    public void subtract(final short operand) {\n-        this.value -= operand;\n+    public void subtract(final short n) {\n+        this.value -= n;\n     }\n     \n-    public void subtract(final Number operand) {\n-        this.value -= operand.shortValue();\n+    public void subtract(final Number n) {\n+        this.value -= n.shortValue();\n     }\n     \n-    public short addAndGet(final short operand) {\n-        return this.value += operand;\n+    public short addAndGet(final short n) {\n+        return this.value += n;\n     }\n     \n-    public short addAndGet(final Number operand) {\n-        return this.value += operand.shortValue();\n+    public short addAndGet(final Number n) {\n+        return this.value += n.shortValue();\n     }\n     \n-    public short getAndAdd(final short operand) {\n-        final short last = this.value;\n-        this.value += operand;\n-        return last;\n+    public short getAndAdd(final short n) {\n+        final short value = this.value;\n+        this.value += n;\n+        return value;\n     }\n     \n-    public short getAndAdd(final Number operand) {\n-        final short last = this.value;\n-        this.value += operand.shortValue();\n-        return last;\n+    public short getAndAdd(final Number n) {\n+        final short value = this.value;\n+        this.value += n.shortValue();\n+        return value;\n     }\n     \n     @Override\n     public short shortValue() {\n         return this.value;\n     }\n     \n@@ -124,24 +124,24 @@\n         return this.value;\n     }\n     \n     public Short toShort() {\n         return Short.valueOf(this.shortValue());\n     }\n     \n-    public boolean equals(final Object obj) {\n-        return obj instanceof MutableShort && this.value == ((MutableShort)obj).shortValue();\n+    public boolean equals(final Object o) {\n+        return o instanceof MutableShort && this.value == ((MutableShort)o).shortValue();\n     }\n     \n     public int hashCode() {\n         return this.value;\n     }\n     \n     @Override\n-    public int compareTo(final MutableShort other) {\n-        return NumberUtils.compare(this.value, other.value);\n+    public int compareTo(final MutableShort mutableShort) {\n+        return NumberUtils.compare(this.value, mutableShort.value);\n     }\n     \n     public String toString() {\n         return String.valueOf(this.value);\n     }\n }\n"}]}
