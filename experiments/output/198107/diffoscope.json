{"diffoscope-json-version": 1, "source1": "first/Module.class", "source2": "second/Module.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,48 +13,48 @@\n     private ModuleRequires[] requires_table;\n     private ModuleExports[] exports_table;\n     private ModuleOpens[] opens_table;\n     private final int uses_count;\n     private final int[] uses_index;\n     private ModuleProvides[] provides_table;\n     \n-    Module(final int name_index, final int length, final DataInput input, final ConstantPool constant_pool) throws IOException {\n-        super((byte)22, name_index, length, constant_pool);\n-        this.module_name_index = input.readUnsignedShort();\n-        this.module_flags = input.readUnsignedShort();\n-        this.module_version_index = input.readUnsignedShort();\n-        final int requires_count = input.readUnsignedShort();\n-        this.requires_table = new ModuleRequires[requires_count];\n-        for (int i = 0; i < requires_count; ++i) {\n-            this.requires_table[i] = new ModuleRequires(input);\n-        }\n-        final int exports_count = input.readUnsignedShort();\n-        this.exports_table = new ModuleExports[exports_count];\n-        for (int j = 0; j < exports_count; ++j) {\n-            this.exports_table[j] = new ModuleExports(input);\n-        }\n-        final int opens_count = input.readUnsignedShort();\n-        this.opens_table = new ModuleOpens[opens_count];\n-        for (int k = 0; k < opens_count; ++k) {\n-            this.opens_table[k] = new ModuleOpens(input);\n+    Module(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        super((byte)22, n, n2, constantPool);\n+        this.module_name_index = dataInput.readUnsignedShort();\n+        this.module_flags = dataInput.readUnsignedShort();\n+        this.module_version_index = dataInput.readUnsignedShort();\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        this.requires_table = new ModuleRequires[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n+            this.requires_table[i] = new ModuleRequires(dataInput);\n+        }\n+        final int unsignedShort2 = dataInput.readUnsignedShort();\n+        this.exports_table = new ModuleExports[unsignedShort2];\n+        for (int j = 0; j < unsignedShort2; ++j) {\n+            this.exports_table[j] = new ModuleExports(dataInput);\n+        }\n+        final int unsignedShort3 = dataInput.readUnsignedShort();\n+        this.opens_table = new ModuleOpens[unsignedShort3];\n+        for (int k = 0; k < unsignedShort3; ++k) {\n+            this.opens_table[k] = new ModuleOpens(dataInput);\n         }\n-        this.uses_count = input.readUnsignedShort();\n+        this.uses_count = dataInput.readUnsignedShort();\n         this.uses_index = new int[this.uses_count];\n-        for (int k = 0; k < this.uses_count; ++k) {\n-            this.uses_index[k] = input.readUnsignedShort();\n+        for (int l = 0; l < this.uses_count; ++l) {\n+            this.uses_index[l] = dataInput.readUnsignedShort();\n         }\n-        final int provides_count = input.readUnsignedShort();\n-        this.provides_table = new ModuleProvides[provides_count];\n-        for (int l = 0; l < provides_count; ++l) {\n-            this.provides_table[l] = new ModuleProvides(input);\n+        final int unsignedShort4 = dataInput.readUnsignedShort();\n+        this.provides_table = new ModuleProvides[unsignedShort4];\n+        for (int n3 = 0; n3 < unsignedShort4; ++n3) {\n+            this.provides_table[n3] = new ModuleProvides(dataInput);\n         }\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitModule(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitModule(this);\n     }\n     \n     public ModuleRequires[] getRequiresTable() {\n         return this.requires_table;\n     }\n     \n     public ModuleExports[] getExportsTable() {\n@@ -65,88 +65,96 @@\n         return this.opens_table;\n     }\n     \n     public ModuleProvides[] getProvidesTable() {\n         return this.provides_table;\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n-        file.writeShort(this.module_name_index);\n-        file.writeShort(this.module_flags);\n-        file.writeShort(this.module_version_index);\n-        file.writeShort(this.requires_table.length);\n-        for (final ModuleRequires entry : this.requires_table) {\n-            entry.dump(file);\n-        }\n-        file.writeShort(this.exports_table.length);\n-        for (final ModuleExports entry2 : this.exports_table) {\n-            entry2.dump(file);\n-        }\n-        file.writeShort(this.opens_table.length);\n-        for (final ModuleOpens entry3 : this.opens_table) {\n-            entry3.dump(file);\n-        }\n-        file.writeShort(this.uses_index.length);\n-        for (final int entry4 : this.uses_index) {\n-            file.writeShort(entry4);\n-        }\n-        file.writeShort(this.provides_table.length);\n-        for (final ModuleProvides entry5 : this.provides_table) {\n-            entry5.dump(file);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeShort(this.module_name_index);\n+        dataOutputStream.writeShort(this.module_flags);\n+        dataOutputStream.writeShort(this.module_version_index);\n+        dataOutputStream.writeShort(this.requires_table.length);\n+        final ModuleRequires[] requires_table = this.requires_table;\n+        for (int length = requires_table.length, i = 0; i < length; ++i) {\n+            requires_table[i].dump(dataOutputStream);\n+        }\n+        dataOutputStream.writeShort(this.exports_table.length);\n+        final ModuleExports[] exports_table = this.exports_table;\n+        for (int length2 = exports_table.length, j = 0; j < length2; ++j) {\n+            exports_table[j].dump(dataOutputStream);\n+        }\n+        dataOutputStream.writeShort(this.opens_table.length);\n+        final ModuleOpens[] opens_table = this.opens_table;\n+        for (int length3 = opens_table.length, k = 0; k < length3; ++k) {\n+            opens_table[k].dump(dataOutputStream);\n+        }\n+        dataOutputStream.writeShort(this.uses_index.length);\n+        final int[] uses_index = this.uses_index;\n+        for (int length4 = uses_index.length, l = 0; l < length4; ++l) {\n+            dataOutputStream.writeShort(uses_index[l]);\n+        }\n+        dataOutputStream.writeShort(this.provides_table.length);\n+        final ModuleProvides[] provides_table = this.provides_table;\n+        for (int length5 = provides_table.length, n = 0; n < length5; ++n) {\n+            provides_table[n].dump(dataOutputStream);\n         }\n     }\n     \n     public String toString() {\n-        final ConstantPool cp = super.getConstantPool();\n-        final StringBuilder buf = new StringBuilder();\n-        buf.append(\"Module:\\n\");\n-        buf.append(\"  name:    \").append(cp.getConstantString(this.module_name_index, (byte)19).replace('/', '.')).append(\"\\n\");\n-        buf.append(\"  flags:   \").append(String.format(\"%04x\", Integer.valueOf(this.module_flags))).append(\"\\n\");\n-        final String version = (this.module_version_index == 0) ? \"0\" : cp.getConstantString(this.module_version_index, (byte)1);\n-        buf.append(\"  version: \").append(version).append(\"\\n\");\n-        buf.append(\"  requires(\").append(this.requires_table.length).append(\"):\\n\");\n-        for (final ModuleRequires module : this.requires_table) {\n-            buf.append(\"    \").append(module.toString(cp)).append(\"\\n\");\n-        }\n-        buf.append(\"  exports(\").append(this.exports_table.length).append(\"):\\n\");\n-        for (final ModuleExports module2 : this.exports_table) {\n-            buf.append(\"    \").append(module2.toString(cp)).append(\"\\n\");\n-        }\n-        buf.append(\"  opens(\").append(this.opens_table.length).append(\"):\\n\");\n-        for (final ModuleOpens module3 : this.opens_table) {\n-            buf.append(\"    \").append(module3.toString(cp)).append(\"\\n\");\n-        }\n-        buf.append(\"  uses(\").append(this.uses_index.length).append(\"):\\n\");\n-        for (final int index : this.uses_index) {\n-            final String class_name = cp.getConstantString(index, (byte)7);\n-            buf.append(\"    \").append(Utility.compactClassName(class_name, false)).append(\"\\n\");\n-        }\n-        buf.append(\"  provides(\").append(this.provides_table.length).append(\"):\\n\");\n-        for (final ModuleProvides module4 : this.provides_table) {\n-            buf.append(\"    \").append(module4.toString(cp)).append(\"\\n\");\n-        }\n-        return buf.substring();\n-    }\n-    \n-    public Attribute copy(final ConstantPool _constant_pool) {\n-        final Module c = (Module)this.clone();\n-        c.requires_table = new ModuleRequires[this.requires_table.length];\n+        final ConstantPool constantPool = super.getConstantPool();\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"Module:\\n\");\n+        sb.append(\"  name:    \").append(constantPool.getConstantString(this.module_name_index, (byte)19).replace('/', '.')).append(\"\\n\");\n+        sb.append(\"  flags:   \").append(String.format(\"%04x\", Integer.valueOf(this.module_flags))).append(\"\\n\");\n+        sb.append(\"  version: \").append((this.module_version_index == 0) ? \"0\" : constantPool.getConstantString(this.module_version_index, (byte)1)).append(\"\\n\");\n+        sb.append(\"  requires(\").append(this.requires_table.length).append(\"):\\n\");\n+        final ModuleRequires[] requires_table = this.requires_table;\n+        for (int length = requires_table.length, i = 0; i < length; ++i) {\n+            sb.append(\"    \").append(requires_table[i].toString(constantPool)).append(\"\\n\");\n+        }\n+        sb.append(\"  exports(\").append(this.exports_table.length).append(\"):\\n\");\n+        final ModuleExports[] exports_table = this.exports_table;\n+        for (int length2 = exports_table.length, j = 0; j < length2; ++j) {\n+            sb.append(\"    \").append(exports_table[j].toString(constantPool)).append(\"\\n\");\n+        }\n+        sb.append(\"  opens(\").append(this.opens_table.length).append(\"):\\n\");\n+        final ModuleOpens[] opens_table = this.opens_table;\n+        for (int length3 = opens_table.length, k = 0; k < length3; ++k) {\n+            sb.append(\"    \").append(opens_table[k].toString(constantPool)).append(\"\\n\");\n+        }\n+        sb.append(\"  uses(\").append(this.uses_index.length).append(\"):\\n\");\n+        final int[] uses_index = this.uses_index;\n+        for (int length4 = uses_index.length, l = 0; l < length4; ++l) {\n+            sb.append(\"    \").append(Utility.compactClassName(constantPool.getConstantString(uses_index[l], (byte)7), false)).append(\"\\n\");\n+        }\n+        sb.append(\"  provides(\").append(this.provides_table.length).append(\"):\\n\");\n+        final ModuleProvides[] provides_table = this.provides_table;\n+        for (int length5 = provides_table.length, n = 0; n < length5; ++n) {\n+            sb.append(\"    \").append(provides_table[n].toString(constantPool)).append(\"\\n\");\n+        }\n+        return sb.substring();\n+    }\n+    \n+    public Attribute copy(final ConstantPool constantPool) {\n+        final Module module = (Module)this.clone();\n+        module.requires_table = new ModuleRequires[this.requires_table.length];\n         for (int i = 0; i < this.requires_table.length; ++i) {\n-            c.requires_table[i] = this.requires_table[i].copy();\n+            module.requires_table[i] = this.requires_table[i].copy();\n         }\n-        c.exports_table = new ModuleExports[this.exports_table.length];\n-        for (int i = 0; i < this.exports_table.length; ++i) {\n-            c.exports_table[i] = this.exports_table[i].copy();\n-        }\n-        c.opens_table = new ModuleOpens[this.opens_table.length];\n-        for (int i = 0; i < this.opens_table.length; ++i) {\n-            c.opens_table[i] = this.opens_table[i].copy();\n-        }\n-        c.provides_table = new ModuleProvides[this.provides_table.length];\n-        for (int i = 0; i < this.provides_table.length; ++i) {\n-            c.provides_table[i] = this.provides_table[i].copy();\n+        module.exports_table = new ModuleExports[this.exports_table.length];\n+        for (int j = 0; j < this.exports_table.length; ++j) {\n+            module.exports_table[j] = this.exports_table[j].copy();\n+        }\n+        module.opens_table = new ModuleOpens[this.opens_table.length];\n+        for (int k = 0; k < this.opens_table.length; ++k) {\n+            module.opens_table[k] = this.opens_table[k].copy();\n+        }\n+        module.provides_table = new ModuleProvides[this.provides_table.length];\n+        for (int l = 0; l < this.provides_table.length; ++l) {\n+            module.provides_table[l] = this.provides_table[l].copy();\n         }\n-        c.setConstantPool(_constant_pool);\n-        return c;\n+        module.setConstantPool(constantPool);\n+        return module;\n     }\n }\n"}]}
