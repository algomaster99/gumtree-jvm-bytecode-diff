{"diffoscope-json-version": 1, "source1": "first/PKWareExtraHeader.class", "source2": "second/PKWareExtraHeader.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,135 +1,135 @@\n-  SHA-256 checksum a0f360d06adb33b53cc07831eb41d53e15764c0ce00c61157dd9ecc0113699eb\n+  SHA-256 checksum 5681e8e423e95915004e7d58d9fe3c2e21f55ff13332a5572f0b3c52e4b17a29\n   Compiled from \"PKWareExtraHeader.java\"\n public abstract class org.apache.commons.compress.archivers.zip.PKWareExtraHeader implements org.apache.commons.compress.archivers.zip.ZipExtraField\n   minor version: 0\n-  major version: 52\n+  major version: 53\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n-  this_class: #24                         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-  super_class: #25                        // java/lang/Object\n-  interfaces: 1, fields: 3, methods: 11, attributes: 2\n+  this_class: #18                         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  super_class: #19                        // java/lang/Object\n+  interfaces: 1, fields: 3, methods: 11, attributes: 3\n Constant pool:\n-    #1 = Methodref          #25.#71       // java/lang/Object.\"<init>\":()V\n-    #2 = Fieldref           #24.#72       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.headerId:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-    #3 = Methodref          #73.#74       // org/apache/commons/compress/archivers/zip/ZipUtil.copy:([B)[B\n-    #4 = Fieldref           #24.#75       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.localData:[B\n-    #5 = Class              #76           // org/apache/commons/compress/archivers/zip/ZipShort\n-    #6 = Methodref          #5.#77        // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-    #7 = Fieldref           #24.#78       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.centralData:[B\n-    #8 = Methodref          #24.#79       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.getLocalFileDataLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-    #9 = Methodref          #24.#80       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.getLocalFileDataData:()[B\n-   #10 = Methodref          #81.#82       // java/util/Arrays.copyOfRange:([BII)[B\n-   #11 = Methodref          #24.#83       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.setLocalFileDataData:([B)V\n-   #12 = Methodref          #24.#84       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.setCentralDirectoryData:([B)V\n-   #13 = Class              #85           // java/util/zip/ZipException\n-   #14 = Class              #86           // java/lang/StringBuilder\n-   #15 = Methodref          #14.#71       // java/lang/StringBuilder.\"<init>\":()V\n-   #16 = Methodref          #25.#87       // java/lang/Object.getClass:()Ljava/lang/Class;\n-   #17 = Methodref          #88.#89       // java/lang/Class.getName:()Ljava/lang/String;\n-   #18 = Methodref          #14.#90       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #19 = String             #91           //  is too short, only\n-   #20 = Methodref          #14.#92       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #21 = String             #93           //  bytes, expected at least\n-   #22 = Methodref          #14.#94       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #23 = Methodref          #13.#95       // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #24 = Class              #96           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-   #25 = Class              #97           // java/lang/Object\n-   #26 = Class              #98           // org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #27 = Class              #99           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n-   #28 = Utf8               HashAlgorithm\n-   #29 = Utf8               InnerClasses\n-   #30 = Class              #100          // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n-   #31 = Utf8               EncryptionAlgorithm\n-   #32 = Utf8               headerId\n-   #33 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #34 = Utf8               localData\n-   #35 = Utf8               [B\n-   #36 = Utf8               centralData\n-   #37 = Utf8               <init>\n-   #38 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-   #39 = Utf8               Code\n-   #40 = Utf8               LineNumberTable\n-   #41 = Utf8               LocalVariableTable\n-   #42 = Utf8               this\n-   #43 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader;\n-   #44 = Utf8               getHeaderId\n-   #45 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #46 = Utf8               setLocalFileDataData\n-   #47 = Utf8               ([B)V\n-   #48 = Utf8               data\n-   #49 = Utf8               getLocalFileDataLength\n-   #50 = Utf8               StackMapTable\n-   #51 = Class              #96           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-   #52 = Utf8               getLocalFileDataData\n-   #53 = Utf8               ()[B\n-   #54 = Utf8               setCentralDirectoryData\n-   #55 = Utf8               getCentralDirectoryLength\n-   #56 = Utf8               getCentralDirectoryData\n-   #57 = Utf8               parseFromLocalFileData\n-   #58 = Utf8               ([BII)V\n-   #59 = Utf8               offset\n-   #60 = Utf8               I\n-   #61 = Utf8               length\n-   #62 = Utf8               Exceptions\n-   #63 = Utf8               parseFromCentralDirectoryData\n-   #64 = Utf8               tmp\n-   #65 = Class              #35           // \"[B\"\n-   #66 = Utf8               assertMinimalLength\n-   #67 = Utf8               (II)V\n-   #68 = Utf8               minimum\n-   #69 = Utf8               SourceFile\n-   #70 = Utf8               PKWareExtraHeader.java\n-   #71 = NameAndType        #37:#101      // \"<init>\":()V\n-   #72 = NameAndType        #32:#33       // headerId:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #73 = Class              #102          // org/apache/commons/compress/archivers/zip/ZipUtil\n-   #74 = NameAndType        #103:#104     // copy:([B)[B\n-   #75 = NameAndType        #34:#35       // localData:[B\n-   #76 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-   #77 = NameAndType        #37:#105      // \"<init>\":(I)V\n-   #78 = NameAndType        #36:#35       // centralData:[B\n-   #79 = NameAndType        #49:#45       // getLocalFileDataLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #80 = NameAndType        #52:#53       // getLocalFileDataData:()[B\n-   #81 = Class              #106          // java/util/Arrays\n-   #82 = NameAndType        #107:#108     // copyOfRange:([BII)[B\n-   #83 = NameAndType        #46:#47       // setLocalFileDataData:([B)V\n-   #84 = NameAndType        #54:#47       // setCentralDirectoryData:([B)V\n-   #85 = Utf8               java/util/zip/ZipException\n-   #86 = Utf8               java/lang/StringBuilder\n-   #87 = NameAndType        #109:#110     // getClass:()Ljava/lang/Class;\n-   #88 = Class              #111          // java/lang/Class\n-   #89 = NameAndType        #112:#113     // getName:()Ljava/lang/String;\n-   #90 = NameAndType        #114:#115     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #91 = Utf8                is too short, only\n-   #92 = NameAndType        #114:#116     // append:(I)Ljava/lang/StringBuilder;\n-   #93 = Utf8                bytes, expected at least\n-   #94 = NameAndType        #117:#113     // toString:()Ljava/lang/String;\n-   #95 = NameAndType        #37:#118      // \"<init>\":(Ljava/lang/String;)V\n-   #96 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-   #97 = Utf8               java/lang/Object\n-   #98 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #99 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n-  #100 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n-  #101 = Utf8               ()V\n-  #102 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-  #103 = Utf8               copy\n-  #104 = Utf8               ([B)[B\n-  #105 = Utf8               (I)V\n-  #106 = Utf8               java/util/Arrays\n-  #107 = Utf8               copyOfRange\n-  #108 = Utf8               ([BII)[B\n-  #109 = Utf8               getClass\n-  #110 = Utf8               ()Ljava/lang/Class;\n-  #111 = Utf8               java/lang/Class\n-  #112 = Utf8               getName\n-  #113 = Utf8               ()Ljava/lang/String;\n-  #114 = Utf8               append\n-  #115 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #116 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #117 = Utf8               toString\n-  #118 = Utf8               (Ljava/lang/String;)V\n+    #1 = Methodref          #19.#64       // java/lang/Object.\"<init>\":()V\n+    #2 = Fieldref           #18.#65       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.headerId:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+    #3 = Methodref          #66.#67       // org/apache/commons/compress/archivers/zip/ZipUtil.copy:([B)[B\n+    #4 = Fieldref           #18.#68       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.localData:[B\n+    #5 = Class              #69           // org/apache/commons/compress/archivers/zip/ZipShort\n+    #6 = Methodref          #5.#70        // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+    #7 = Fieldref           #18.#71       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.centralData:[B\n+    #8 = Methodref          #18.#72       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.getLocalFileDataLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+    #9 = Methodref          #18.#73       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.getLocalFileDataData:()[B\n+   #10 = Methodref          #74.#75       // java/util/Arrays.copyOfRange:([BII)[B\n+   #11 = Methodref          #18.#76       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.setLocalFileDataData:([B)V\n+   #12 = Methodref          #18.#77       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.setCentralDirectoryData:([B)V\n+   #13 = Class              #78           // java/util/zip/ZipException\n+   #14 = Methodref          #19.#79       // java/lang/Object.getClass:()Ljava/lang/Class;\n+   #15 = Methodref          #80.#81       // java/lang/Class.getName:()Ljava/lang/String;\n+   #16 = InvokeDynamic      #0:#85        // #0:makeConcatWithConstants:(Ljava/lang/String;II)Ljava/lang/String;\n+   #17 = Methodref          #13.#86       // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+   #18 = Class              #87           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+   #19 = Class              #88           // java/lang/Object\n+   #20 = Class              #89           // org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #21 = Class              #90           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n+   #22 = Utf8               HashAlgorithm\n+   #23 = Utf8               InnerClasses\n+   #24 = Class              #91           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n+   #25 = Utf8               EncryptionAlgorithm\n+   #26 = Utf8               headerId\n+   #27 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #28 = Utf8               localData\n+   #29 = Utf8               [B\n+   #30 = Utf8               centralData\n+   #31 = Utf8               <init>\n+   #32 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #33 = Utf8               Code\n+   #34 = Utf8               LineNumberTable\n+   #35 = Utf8               LocalVariableTable\n+   #36 = Utf8               this\n+   #37 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader;\n+   #38 = Utf8               getHeaderId\n+   #39 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #40 = Utf8               setLocalFileDataData\n+   #41 = Utf8               ([B)V\n+   #42 = Utf8               data\n+   #43 = Utf8               getLocalFileDataLength\n+   #44 = Utf8               StackMapTable\n+   #45 = Utf8               getLocalFileDataData\n+   #46 = Utf8               ()[B\n+   #47 = Utf8               setCentralDirectoryData\n+   #48 = Utf8               getCentralDirectoryLength\n+   #49 = Utf8               getCentralDirectoryData\n+   #50 = Utf8               parseFromLocalFileData\n+   #51 = Utf8               ([BII)V\n+   #52 = Utf8               offset\n+   #53 = Utf8               I\n+   #54 = Utf8               length\n+   #55 = Utf8               Exceptions\n+   #56 = Utf8               parseFromCentralDirectoryData\n+   #57 = Utf8               tmp\n+   #58 = Class              #29           // \"[B\"\n+   #59 = Utf8               assertMinimalLength\n+   #60 = Utf8               (II)V\n+   #61 = Utf8               minimum\n+   #62 = Utf8               SourceFile\n+   #63 = Utf8               PKWareExtraHeader.java\n+   #64 = NameAndType        #31:#92       // \"<init>\":()V\n+   #65 = NameAndType        #26:#27       // headerId:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #66 = Class              #93           // org/apache/commons/compress/archivers/zip/ZipUtil\n+   #67 = NameAndType        #94:#95       // copy:([B)[B\n+   #68 = NameAndType        #28:#29       // localData:[B\n+   #69 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+   #70 = NameAndType        #31:#96       // \"<init>\":(I)V\n+   #71 = NameAndType        #30:#29       // centralData:[B\n+   #72 = NameAndType        #43:#39       // getLocalFileDataLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #73 = NameAndType        #45:#46       // getLocalFileDataData:()[B\n+   #74 = Class              #97           // java/util/Arrays\n+   #75 = NameAndType        #98:#99       // copyOfRange:([BII)[B\n+   #76 = NameAndType        #40:#41       // setLocalFileDataData:([B)V\n+   #77 = NameAndType        #47:#41       // setCentralDirectoryData:([B)V\n+   #78 = Utf8               java/util/zip/ZipException\n+   #79 = NameAndType        #100:#101     // getClass:()Ljava/lang/Class;\n+   #80 = Class              #102          // java/lang/Class\n+   #81 = NameAndType        #103:#104     // getName:()Ljava/lang/String;\n+   #82 = Utf8               BootstrapMethods\n+   #83 = MethodHandle       6:#105        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+   #84 = String             #106          // \\u0001 is too short, only \\u0001 bytes, expected at least \\u0001\n+   #85 = NameAndType        #107:#108     // makeConcatWithConstants:(Ljava/lang/String;II)Ljava/lang/String;\n+   #86 = NameAndType        #31:#109      // \"<init>\":(Ljava/lang/String;)V\n+   #87 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+   #88 = Utf8               java/lang/Object\n+   #89 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #90 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n+   #91 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n+   #92 = Utf8               ()V\n+   #93 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+   #94 = Utf8               copy\n+   #95 = Utf8               ([B)[B\n+   #96 = Utf8               (I)V\n+   #97 = Utf8               java/util/Arrays\n+   #98 = Utf8               copyOfRange\n+   #99 = Utf8               ([BII)[B\n+  #100 = Utf8               getClass\n+  #101 = Utf8               ()Ljava/lang/Class;\n+  #102 = Utf8               java/lang/Class\n+  #103 = Utf8               getName\n+  #104 = Utf8               ()Ljava/lang/String;\n+  #105 = Methodref          #110.#111     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #106 = Utf8               \\u0001 is too short, only \\u0001 bytes, expected at least \\u0001\n+  #107 = Utf8               makeConcatWithConstants\n+  #108 = Utf8               (Ljava/lang/String;II)Ljava/lang/String;\n+  #109 = Utf8               (Ljava/lang/String;)V\n+  #110 = Class              #112          // java/lang/invoke/StringConcatFactory\n+  #111 = NameAndType        #107:#115     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #112 = Utf8               java/lang/invoke/StringConcatFactory\n+  #113 = Class              #117          // java/lang/invoke/MethodHandles$Lookup\n+  #114 = Utf8               Lookup\n+  #115 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #116 = Class              #118          // java/lang/invoke/MethodHandles\n+  #117 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #118 = Utf8               java/lang/invoke/MethodHandles\n {\n   private final org.apache.commons.compress.archivers.zip.ZipShort headerId;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private byte[] localData;\n     descriptor: [B\n@@ -377,50 +377,45 @@\n     Exceptions:\n       throws java.util.zip.ZipException\n \n   protected final void assertMinimalLength(int, int) throws java.util.zip.ZipException;\n     descriptor: (II)V\n     flags: (0x0014) ACC_PROTECTED, ACC_FINAL\n     Code:\n-      stack=4, locals=3, args_size=3\n+      stack=5, locals=3, args_size=3\n          0: iload_2\n          1: iload_1\n-         2: if_icmpge     51\n+         2: if_icmpge     27\n          5: new           #13                 // class java/util/zip/ZipException\n          8: dup\n-         9: new           #14                 // class java/lang/StringBuilder\n-        12: dup\n-        13: invokespecial #15                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        16: aload_0\n-        17: invokevirtual #16                 // Method java/lang/Object.getClass:()Ljava/lang/Class;\n-        20: invokevirtual #17                 // Method java/lang/Class.getName:()Ljava/lang/String;\n-        23: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        26: ldc           #19                 // String  is too short, only\n-        28: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        31: iload_2\n-        32: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        35: ldc           #21                 // String  bytes, expected at least\n-        37: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        40: iload_1\n-        41: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        44: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        47: invokespecial #23                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-        50: athrow\n-        51: return\n+         9: aload_0\n+        10: invokevirtual #14                 // Method java/lang/Object.getClass:()Ljava/lang/Class;\n+        13: invokevirtual #15                 // Method java/lang/Class.getName:()Ljava/lang/String;\n+        16: iload_2\n+        17: iload_1\n+        18: invokedynamic #16,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;II)Ljava/lang/String;\n+        23: invokespecial #17                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        26: athrow\n+        27: return\n       LineNumberTable:\n         line 200: 0\n         line 201: 5\n-        line 204: 51\n+        line 204: 27\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      52     0  this   Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader;\n-            0      52     1 minimum   I\n-            0      52     2 length   I\n+            0      28     0  this   Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader;\n+            0      28     1 minimum   I\n+            0      28     2 length   I\n       StackMapTable: number_of_entries = 1\n-        frame_type = 51 /* same */\n+        frame_type = 27 /* same */\n     Exceptions:\n       throws java.util.zip.ZipException\n }\n SourceFile: \"PKWareExtraHeader.java\"\n InnerClasses:\n-  public static final #28= #27 of #24;    // HashAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-  public static final #31= #30 of #24;    // EncryptionAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  public static final #22= #21 of #18;    // HashAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  public static final #25= #24 of #18;    // EncryptionAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  public static final #114= #113 of #116; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+BootstrapMethods:\n+  0: #83 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #84 \\u0001 is too short, only \\u0001 bytes, expected at least \\u0001\n"}]}
