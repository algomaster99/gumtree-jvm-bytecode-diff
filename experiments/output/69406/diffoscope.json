{"diffoscope-json-version": 1, "source1": "first/JsonStringEncoder.class", "source2": "second/JsonStringEncoder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,30 +15,36 @@\n     private static final int SURR2_LAST = 57343;\n     static final int MIN_CHAR_BUFFER_SIZE = 16;\n     static final int MAX_CHAR_BUFFER_SIZE = 32000;\n     static final int MIN_BYTE_BUFFER_SIZE = 24;\n     static final int MAX_BYTE_BUFFER_SIZE = 32000;\n     private static final JsonStringEncoder instance;\n     \n+    static {\n+        HC = CharTypes.copyHexChars(true);\n+        HB = CharTypes.copyHexBytes(true);\n+        instance = new JsonStringEncoder();\n+    }\n+    \n     public static JsonStringEncoder getInstance() {\n         return JsonStringEncoder.instance;\n     }\n     \n     public char[] quoteAsString(final String input) {\n         final int inputLen = input.length();\n         char[] outputBuffer = new char[_initialCharBufSize(inputLen)];\n         final int[] escCodes = CharTypes.get7BitOutputEscapes();\n         final int escCodeCount = escCodes.length;\n         int inPtr = 0;\n         TextBuffer textBuffer = null;\n         int outPtr = 0;\n         char[] qbuf = null;\n-    Label_0268:\n+    Label_0259:\n         while (inPtr < inputLen) {\n-            while (true) {\n+            do {\n                 final char c = input.charAt(inPtr);\n                 if (c < escCodeCount && escCodes[c] != 0) {\n                     if (qbuf == null) {\n                         qbuf = this._qbuf();\n                     }\n                     final char d = input.charAt(inPtr++);\n                     final int escCode = escCodes[d];\n@@ -51,33 +57,32 @@\n                         if (textBuffer == null) {\n                             textBuffer = TextBuffer.fromInitial(outputBuffer);\n                         }\n                         outputBuffer = textBuffer.finishCurrentSegment();\n                         final int second = length - first;\n                         System.arraycopy(qbuf, first, outputBuffer, 0, second);\n                         outPtr = second;\n+                        continue Label_0259;\n                     }\n-                    else {\n-                        System.arraycopy(qbuf, 0, outputBuffer, outPtr, length);\n-                        outPtr += length;\n-                    }\n-                    break;\n+                    System.arraycopy(qbuf, 0, outputBuffer, outPtr, length);\n+                    outPtr += length;\n+                    continue Label_0259;\n                 }\n-                if (outPtr >= outputBuffer.length) {\n-                    if (textBuffer == null) {\n-                        textBuffer = TextBuffer.fromInitial(outputBuffer);\n+                else {\n+                    if (outPtr >= outputBuffer.length) {\n+                        if (textBuffer == null) {\n+                            textBuffer = TextBuffer.fromInitial(outputBuffer);\n+                        }\n+                        outputBuffer = textBuffer.finishCurrentSegment();\n+                        outPtr = 0;\n                     }\n-                    outputBuffer = textBuffer.finishCurrentSegment();\n-                    outPtr = 0;\n+                    outputBuffer[outPtr++] = c;\n                 }\n-                outputBuffer[outPtr++] = c;\n-                if (++inPtr >= inputLen) {\n-                    break Label_0268;\n-                }\n-            }\n+            } while (++inPtr < inputLen);\n+            break;\n         }\n         if (textBuffer == null) {\n             return Arrays.copyOfRange(outputBuffer, 0, outPtr);\n         }\n         textBuffer.setCurrentLength(outPtr);\n         return textBuffer.contentsAsArray();\n     }\n@@ -90,17 +95,17 @@\n         final int inputLen = input.length();\n         char[] outputBuffer = new char[_initialCharBufSize(inputLen)];\n         final int[] escCodes = CharTypes.get7BitOutputEscapes();\n         final int escCodeCount = escCodes.length;\n         int inPtr = 0;\n         int outPtr = 0;\n         char[] qbuf = null;\n-    Label_0295:\n+    Label_0286:\n         while (inPtr < inputLen) {\n-            while (true) {\n+            do {\n                 final char c = input.charAt(inPtr);\n                 if (c < escCodeCount && escCodes[c] != 0) {\n                     if (qbuf == null) {\n                         qbuf = this._qbuf();\n                     }\n                     final char d = input.charAt(inPtr++);\n                     final int escCode = escCodes[d];\n@@ -113,108 +118,101 @@\n                         if (textBuffer == null) {\n                             textBuffer = TextBuffer.fromInitial(outputBuffer);\n                         }\n                         outputBuffer = textBuffer.finishCurrentSegment();\n                         final int second = length - first;\n                         System.arraycopy(qbuf, first, outputBuffer, 0, second);\n                         outPtr = second;\n+                        continue Label_0286;\n                     }\n-                    else {\n-                        System.arraycopy(qbuf, 0, outputBuffer, outPtr, length);\n-                        outPtr += length;\n-                    }\n-                    break;\n+                    System.arraycopy(qbuf, 0, outputBuffer, outPtr, length);\n+                    outPtr += length;\n+                    continue Label_0286;\n                 }\n-                if (outPtr >= outputBuffer.length) {\n-                    if (textBuffer == null) {\n-                        textBuffer = TextBuffer.fromInitial(outputBuffer);\n+                else {\n+                    if (outPtr >= outputBuffer.length) {\n+                        if (textBuffer == null) {\n+                            textBuffer = TextBuffer.fromInitial(outputBuffer);\n+                        }\n+                        outputBuffer = textBuffer.finishCurrentSegment();\n+                        outPtr = 0;\n                     }\n-                    outputBuffer = textBuffer.finishCurrentSegment();\n-                    outPtr = 0;\n+                    outputBuffer[outPtr++] = c;\n                 }\n-                outputBuffer[outPtr++] = c;\n-                if (++inPtr >= inputLen) {\n-                    break Label_0295;\n-                }\n-            }\n+            } while (++inPtr < inputLen);\n+            break;\n         }\n         if (textBuffer == null) {\n             return Arrays.copyOfRange(outputBuffer, 0, outPtr);\n         }\n         textBuffer.setCurrentLength(outPtr);\n         return textBuffer.contentsAsArray();\n     }\n     \n     public void quoteAsString(final CharSequence input, final StringBuilder output) {\n         final int[] escCodes = CharTypes.get7BitOutputEscapes();\n         final int escCodeCount = escCodes.length;\n         int inPtr = 0;\n         final int inputLen = input.length();\n         char[] qbuf = null;\n-    Label_0148:\n+    Label_0138:\n         while (inPtr < inputLen) {\n-            while (true) {\n+            do {\n                 final char c = input.charAt(inPtr);\n                 if (c < escCodeCount && escCodes[c] != 0) {\n                     if (qbuf == null) {\n                         qbuf = this._qbuf();\n                     }\n                     final char d = input.charAt(inPtr++);\n                     final int escCode = escCodes[d];\n                     final int length = (escCode < 0) ? this._appendNumeric(d, qbuf) : this._appendNamed(escCode, qbuf);\n                     output.append(qbuf, 0, length);\n-                    break;\n+                    continue Label_0138;\n                 }\n                 output.append(c);\n-                if (++inPtr >= inputLen) {\n-                    break Label_0148;\n-                }\n-            }\n+            } while (++inPtr < inputLen);\n+            break;\n         }\n     }\n     \n     public byte[] quoteAsUTF8(final String text) {\n         int inputPtr = 0;\n         final int inputEnd = text.length();\n         int outputPtr = 0;\n         byte[] outputBuffer = new byte[_initialByteBufSize(inputEnd)];\n         ByteArrayBuilder bb = null;\n-    Label_0506:\n+    Label_0498:\n         while (inputPtr < inputEnd) {\n             final int[] escCodes = CharTypes.get7BitOutputEscapes();\n-            while (true) {\n+            do {\n                 int ch = text.charAt(inputPtr);\n                 if (ch <= 127 && escCodes[ch] == 0) {\n                     if (outputPtr >= outputBuffer.length) {\n                         if (bb == null) {\n                             bb = ByteArrayBuilder.fromInitial(outputBuffer, outputPtr);\n                         }\n                         outputBuffer = bb.finishCurrentSegment();\n                         outputPtr = 0;\n                     }\n                     outputBuffer[outputPtr++] = (byte)ch;\n-                    if (++inputPtr >= inputEnd) {\n-                        break Label_0506;\n-                    }\n-                    continue;\n                 }\n                 else {\n                     if (bb == null) {\n                         bb = ByteArrayBuilder.fromInitial(outputBuffer, outputPtr);\n                     }\n                     if (outputPtr >= outputBuffer.length) {\n                         outputBuffer = bb.finishCurrentSegment();\n                         outputPtr = 0;\n                     }\n                     ch = text.charAt(inputPtr++);\n                     if (ch <= 127) {\n                         final int escape = escCodes[ch];\n                         outputPtr = this._appendByte(ch, escape, bb, outputPtr);\n                         outputBuffer = bb.getCurrentSegment();\n-                        break;\n+                        continue Label_0498;\n                     }\n                     if (ch <= 2047) {\n                         outputBuffer[outputPtr++] = (byte)(0xC0 | ch >> 6);\n                         ch = (0x80 | (ch & 0x3F));\n                     }\n                     else if (ch < 55296 || ch > 57343) {\n                         outputBuffer[outputPtr++] = (byte)(0xE0 | ch >> 12);\n@@ -250,17 +248,18 @@\n                         ch = (0x80 | (ch & 0x3F));\n                     }\n                     if (outputPtr >= outputBuffer.length) {\n                         outputBuffer = bb.finishCurrentSegment();\n                         outputPtr = 0;\n                     }\n                     outputBuffer[outputPtr++] = (byte)ch;\n-                    break;\n+                    continue Label_0498;\n                 }\n-            }\n+            } while (++inputPtr < inputEnd);\n+            break;\n         }\n         if (bb == null) {\n             return Arrays.copyOfRange(outputBuffer, 0, outputPtr);\n         }\n         return bb.completeAndCoalesce(outputPtr);\n     }\n     \n@@ -485,14 +484,8 @@\n         return Math.min(estimated, 32000);\n     }\n     \n     static int _initialByteBufSize(final int strLen) {\n         final int doubled = Math.max(24, strLen + 6 + (strLen >> 1));\n         return Math.min(doubled, 32000);\n     }\n-    \n-    static {\n-        HC = CharTypes.copyHexChars(true);\n-        HB = CharTypes.copyHexBytes(true);\n-        instance = new JsonStringEncoder();\n-    }\n }\n"}]}
