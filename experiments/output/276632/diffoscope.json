{"diffoscope-json-version": 1, "source1": "first/JavaLanguageParser$ForForContext.class", "source2": "second/JavaLanguageParser$ForForContext.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,16 +15,16 @@\n         return this.getToken(76, 0);\n     }\n     \n     public List<TerminalNode> SEMI() {\n         return this.getTokens(45);\n     }\n     \n-    public TerminalNode SEMI(final int i) {\n-        return this.getToken(45, i);\n+    public TerminalNode SEMI(final int n) {\n+        return this.getToken(45, n);\n     }\n     \n     public TerminalNode RPAREN() {\n         return this.getToken(77, 0);\n     }\n     \n     public JavaLanguageParser.ForInitContext forInit() {\n@@ -35,18 +35,18 @@\n         return (JavaLanguageParser.ExpressionContext)this.getRuleContext((Class)JavaLanguageParser.ExpressionContext.class, 0);\n     }\n     \n     public JavaLanguageParser.ExpressionListContext expressionList() {\n         return (JavaLanguageParser.ExpressionListContext)this.getRuleContext((Class)JavaLanguageParser.ExpressionListContext.class, 0);\n     }\n     \n-    public ForForContext(final JavaLanguageParser.ForControlContext ctx) {\n-        this.copyFrom(ctx);\n+    public ForForContext(final JavaLanguageParser.ForControlContext forControlContext) {\n+        this.copyFrom(forControlContext);\n     }\n     \n-    public <T> T accept(final ParseTreeVisitor<? extends T> visitor) {\n-        if (visitor instanceof JavaLanguageParserVisitor) {\n-            return (T)((JavaLanguageParserVisitor)visitor).visitForFor(this);\n+    public <T> T accept(final ParseTreeVisitor<? extends T> parseTreeVisitor) {\n+        if (parseTreeVisitor instanceof JavaLanguageParserVisitor) {\n+            return (T)((JavaLanguageParserVisitor)parseTreeVisitor).visitForFor(this);\n         }\n-        return (T)visitor.visitChildren((RuleNode)this);\n+        return (T)parseTreeVisitor.visitChildren((RuleNode)this);\n     }\n }\n"}]}
