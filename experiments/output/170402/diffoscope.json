{"diffoscope-json-version": 1, "source1": "first/XML.class", "source2": "second/XML.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,187 +1,187 @@\n-  SHA-256 checksum 73478bcc7f26a706d577c90dfc1773d4d2648c2414040600fe36f63eb3952c81\n+  SHA-256 checksum 5ca52d579ec4de6df14d8981c2f290a3afb2c25b6272bdced564178eda2f2d66\n   Compiled from \"XML.java\"\n public class org.json.XML\n   minor version: 0\n   major version: 50\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #76                         // org/json/XML\n   super_class: #171                       // java/lang/Object\n   interfaces: 0, fields: 11, methods: 26, attributes: 2\n Constant pool:\n-    #1 = Methodref          #171.#305     // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #306          // org/json/XML$1\n-    #3 = Methodref          #2.#307       // org/json/XML$1.\"<init>\":(Ljava/lang/String;)V\n-    #4 = Class              #308          // java/lang/StringBuilder\n-    #5 = Methodref          #70.#309      // java/lang/String.length:()I\n-    #6 = Methodref          #4.#310       // java/lang/StringBuilder.\"<init>\":(I)V\n-    #7 = Methodref          #76.#311      // org/json/XML.codePointIterator:(Ljava/lang/String;)Ljava/lang/Iterable;\n-    #8 = InterfaceMethodref #312.#313     // java/lang/Iterable.iterator:()Ljava/util/Iterator;\n-    #9 = InterfaceMethodref #314.#315     // java/util/Iterator.hasNext:()Z\n-   #10 = InterfaceMethodref #314.#316     // java/util/Iterator.next:()Ljava/lang/Object;\n-   #11 = Class              #317          // java/lang/Integer\n-   #12 = Methodref          #11.#318      // java/lang/Integer.intValue:()I\n-   #13 = String             #319          // &amp;\n-   #14 = Methodref          #4.#320       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #15 = String             #321          // &lt;\n-   #16 = String             #322          // &gt;\n-   #17 = String             #323          // &quot;\n-   #18 = String             #324          // &apos;\n-   #19 = Methodref          #76.#325      // org/json/XML.mustEscape:(I)Z\n-   #20 = String             #326          // &#x\n-   #21 = Methodref          #11.#327      // java/lang/Integer.toHexString:(I)Ljava/lang/String;\n-   #22 = Methodref          #4.#328       // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-   #23 = Methodref          #4.#329       // java/lang/StringBuilder.appendCodePoint:(I)Ljava/lang/StringBuilder;\n-   #24 = Methodref          #4.#330       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #25 = Methodref          #68.#331      // java/lang/Character.isISOControl:(I)Z\n+    #1 = Methodref          #171.#294     // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #295          // org/json/XML$1\n+    #3 = Methodref          #2.#296       // org/json/XML$1.\"<init>\":(Ljava/lang/String;)V\n+    #4 = Class              #297          // java/lang/StringBuilder\n+    #5 = Methodref          #70.#298      // java/lang/String.length:()I\n+    #6 = Methodref          #4.#299       // java/lang/StringBuilder.\"<init>\":(I)V\n+    #7 = Methodref          #76.#300      // org/json/XML.codePointIterator:(Ljava/lang/String;)Ljava/lang/Iterable;\n+    #8 = InterfaceMethodref #301.#302     // java/lang/Iterable.iterator:()Ljava/util/Iterator;\n+    #9 = InterfaceMethodref #206.#303     // java/util/Iterator.hasNext:()Z\n+   #10 = InterfaceMethodref #206.#304     // java/util/Iterator.next:()Ljava/lang/Object;\n+   #11 = Class              #305          // java/lang/Integer\n+   #12 = Methodref          #11.#306      // java/lang/Integer.intValue:()I\n+   #13 = String             #307          // &amp;\n+   #14 = Methodref          #4.#308       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #15 = String             #309          // &lt;\n+   #16 = String             #310          // &gt;\n+   #17 = String             #311          // &quot;\n+   #18 = String             #312          // &apos;\n+   #19 = Methodref          #76.#313      // org/json/XML.mustEscape:(I)Z\n+   #20 = String             #314          // &#x\n+   #21 = Methodref          #11.#315      // java/lang/Integer.toHexString:(I)Ljava/lang/String;\n+   #22 = Methodref          #4.#316       // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+   #23 = Methodref          #4.#317       // java/lang/StringBuilder.appendCodePoint:(I)Ljava/lang/StringBuilder;\n+   #24 = Methodref          #4.#318       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #25 = Methodref          #68.#319      // java/lang/Character.isISOControl:(I)Z\n    #26 = Integer            55295\n    #27 = Integer            57344\n    #28 = Integer            65533\n    #29 = Integer            65536\n    #30 = Integer            1114111\n-   #31 = Methodref          #70.#332      // java/lang/String.charAt:(I)C\n-   #32 = Methodref          #70.#333      // java/lang/String.indexOf:(II)I\n-   #33 = Methodref          #70.#334      // java/lang/String.substring:(II)Ljava/lang/String;\n-   #34 = Methodref          #141.#335     // org/json/XMLTokener.unescapeEntity:(Ljava/lang/String;)Ljava/lang/String;\n-   #35 = Class              #336          // org/json/JSONException\n-   #36 = String             #337          // Empty string.\n-   #37 = Methodref          #35.#307      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n-   #38 = Methodref          #68.#338      // java/lang/Character.isWhitespace:(C)Z\n-   #39 = Methodref          #4.#305       // java/lang/StringBuilder.\"<init>\":()V\n-   #40 = String             #339          // \\'\n-   #41 = String             #340          // \\' contains a space character.\n-   #42 = Methodref          #141.#341     // org/json/XMLTokener.nextToken:()Ljava/lang/Object;\n-   #43 = Fieldref           #76.#342      // org/json/XML.BANG:Ljava/lang/Character;\n-   #44 = Methodref          #141.#343     // org/json/XMLTokener.next:()C\n-   #45 = String             #344          // -->\n-   #46 = Methodref          #141.#345     // org/json/XMLTokener.skipPast:(Ljava/lang/String;)V\n-   #47 = Methodref          #141.#346     // org/json/XMLTokener.back:()V\n-   #48 = String             #347          // CDATA\n-   #49 = Methodref          #70.#348      // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #50 = Methodref          #141.#349     // org/json/XMLTokener.nextCDATA:()Ljava/lang/String;\n-   #51 = Methodref          #350.#351     // org/json/XMLParserConfiguration.getcDataTagName:()Ljava/lang/String;\n-   #52 = Methodref          #71.#352      // org/json/JSONObject.accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #53 = String             #353          // Expected \\'CDATA[\\'\n-   #54 = Methodref          #141.#354     // org/json/XMLTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-   #55 = Methodref          #141.#355     // org/json/XMLTokener.nextMeta:()Ljava/lang/Object;\n-   #56 = String             #356          // Missing \\'>\\' after \\'<!\\'.\n-   #57 = Fieldref           #76.#357      // org/json/XML.LT:Ljava/lang/Character;\n-   #58 = Fieldref           #76.#358      // org/json/XML.GT:Ljava/lang/Character;\n-   #59 = Fieldref           #76.#359      // org/json/XML.QUEST:Ljava/lang/Character;\n-   #60 = String             #360          // ?>\n-   #61 = Fieldref           #76.#361      // org/json/XML.SLASH:Ljava/lang/Character;\n-   #62 = String             #362          // Mismatched close tag\n-   #63 = Methodref          #4.#363       // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #64 = Methodref          #171.#348     // java/lang/Object.equals:(Ljava/lang/Object;)Z\n-   #65 = String             #364          // Mismatched\n-   #66 = String             #365          //  and\n-   #67 = String             #366          // Misshaped close tag\n-   #68 = Class              #367          // java/lang/Character\n-   #69 = String             #368          // Misshaped tag\n-   #70 = Class              #369          // java/lang/String\n-   #71 = Class              #370          // org/json/JSONObject\n-   #72 = Methodref          #71.#305      // org/json/JSONObject.\"<init>\":()V\n-   #73 = Fieldref           #76.#371      // org/json/XML.EQ:Ljava/lang/Character;\n-   #74 = String             #372          // Missing value\n-   #75 = Methodref          #350.#373     // org/json/XMLParserConfiguration.isConvertNilAttributeToNull:()Z\n-   #76 = Class              #374          // org/json/XML\n-   #77 = String             #375          // xsi:nil\n-   #78 = Methodref          #376.#377     // java/lang/Boolean.parseBoolean:(Ljava/lang/String;)Z\n-   #79 = Methodref          #350.#378     // org/json/XMLParserConfiguration.getXsiTypeMap:()Ljava/util/Map;\n-   #80 = InterfaceMethodref #379.#380     // java/util/Map.isEmpty:()Z\n-   #81 = String             #381          // xsi:type\n-   #82 = InterfaceMethodref #379.#382     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #83 = Class              #383          // org/json/XMLXsiTypeConverter\n-   #84 = Methodref          #350.#384     // org/json/XMLParserConfiguration.isKeepStrings:()Z\n-   #85 = Methodref          #76.#385      // org/json/XML.stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n-   #86 = String             #386          //\n-   #87 = Methodref          #350.#387     // org/json/XMLParserConfiguration.getForceList:()Ljava/util/Set;\n-   #88 = InterfaceMethodref #388.#389     // java/util/Set.contains:(Ljava/lang/Object;)Z\n-   #89 = Fieldref           #71.#390      // org/json/JSONObject.NULL:Ljava/lang/Object;\n-   #90 = Methodref          #71.#391      // org/json/JSONObject.append:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #91 = Methodref          #71.#309      // org/json/JSONObject.length:()I\n-   #92 = Class              #392          // org/json/JSONArray\n-   #93 = Methodref          #92.#305      // org/json/JSONArray.\"<init>\":()V\n-   #94 = Methodref          #71.#393      // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #95 = Methodref          #141.#394     // org/json/XMLTokener.nextContent:()Ljava/lang/Object;\n-   #96 = String             #395          // Unclosed tag\n-   #97 = Methodref          #76.#396      // org/json/XML.stringToValue:(Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n-   #98 = Methodref          #350.#397     // org/json/XMLParserConfiguration.getMaxNestingDepth:()I\n-   #99 = String             #398          // Maximum nesting depth of\n-  #100 = Methodref          #4.#399       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-  #101 = String             #400          //  reached\n-  #102 = Methodref          #76.#401      // org/json/XML.parse:(Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;I)Z\n-  #103 = Methodref          #71.#402      // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n-  #104 = InterfaceMethodref #83.#403      // org/json/XMLXsiTypeConverter.convert:(Ljava/lang/String;)Ljava/lang/Object;\n-  #105 = String             #404          // true\n-  #106 = Methodref          #70.#405      // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n-  #107 = Fieldref           #376.#406     // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n-  #108 = String             #407          // false\n-  #109 = Fieldref           #376.#408     // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n-  #110 = String             #409          // null\n-  #111 = Methodref          #76.#410      // org/json/XML.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-  #112 = Class              #411          // java/lang/Exception\n-  #113 = Methodref          #76.#412      // org/json/XML.isDecimalNotation:(Ljava/lang/String;)Z\n-  #114 = Class              #413          // java/math/BigDecimal\n-  #115 = Methodref          #114.#307     // java/math/BigDecimal.\"<init>\":(Ljava/lang/String;)V\n-  #116 = Fieldref           #114.#414     // java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;\n-  #117 = Methodref          #114.#415     // java/math/BigDecimal.compareTo:(Ljava/math/BigDecimal;)I\n+   #31 = Methodref          #70.#320      // java/lang/String.charAt:(I)C\n+   #32 = Methodref          #70.#321      // java/lang/String.indexOf:(II)I\n+   #33 = Methodref          #70.#322      // java/lang/String.substring:(II)Ljava/lang/String;\n+   #34 = Methodref          #141.#323     // org/json/XMLTokener.unescapeEntity:(Ljava/lang/String;)Ljava/lang/String;\n+   #35 = Class              #324          // org/json/JSONException\n+   #36 = String             #325          // Empty string.\n+   #37 = Methodref          #35.#296      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n+   #38 = Methodref          #68.#326      // java/lang/Character.isWhitespace:(C)Z\n+   #39 = Methodref          #4.#294       // java/lang/StringBuilder.\"<init>\":()V\n+   #40 = String             #327          // \\'\n+   #41 = String             #328          // \\' contains a space character.\n+   #42 = Methodref          #141.#329     // org/json/XMLTokener.nextToken:()Ljava/lang/Object;\n+   #43 = Fieldref           #76.#330      // org/json/XML.BANG:Ljava/lang/Character;\n+   #44 = Methodref          #141.#331     // org/json/XMLTokener.next:()C\n+   #45 = String             #332          // -->\n+   #46 = Methodref          #141.#333     // org/json/XMLTokener.skipPast:(Ljava/lang/String;)V\n+   #47 = Methodref          #141.#334     // org/json/XMLTokener.back:()V\n+   #48 = String             #335          // CDATA\n+   #49 = Methodref          #70.#336      // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #50 = Methodref          #141.#337     // org/json/XMLTokener.nextCDATA:()Ljava/lang/String;\n+   #51 = Methodref          #239.#338     // org/json/XMLParserConfiguration.getcDataTagName:()Ljava/lang/String;\n+   #52 = Methodref          #71.#339      // org/json/JSONObject.accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #53 = String             #340          // Expected \\'CDATA[\\'\n+   #54 = Methodref          #141.#341     // org/json/XMLTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+   #55 = Methodref          #141.#342     // org/json/XMLTokener.nextMeta:()Ljava/lang/Object;\n+   #56 = String             #343          // Missing \\'>\\' after \\'<!\\'.\n+   #57 = Fieldref           #76.#344      // org/json/XML.LT:Ljava/lang/Character;\n+   #58 = Fieldref           #76.#345      // org/json/XML.GT:Ljava/lang/Character;\n+   #59 = Fieldref           #76.#346      // org/json/XML.QUEST:Ljava/lang/Character;\n+   #60 = String             #347          // ?>\n+   #61 = Fieldref           #76.#348      // org/json/XML.SLASH:Ljava/lang/Character;\n+   #62 = String             #349          // Mismatched close tag\n+   #63 = Methodref          #4.#350       // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #64 = Methodref          #171.#336     // java/lang/Object.equals:(Ljava/lang/Object;)Z\n+   #65 = String             #351          // Mismatched\n+   #66 = String             #352          //  and\n+   #67 = String             #353          // Misshaped close tag\n+   #68 = Class              #354          // java/lang/Character\n+   #69 = String             #355          // Misshaped tag\n+   #70 = Class              #356          // java/lang/String\n+   #71 = Class              #357          // org/json/JSONObject\n+   #72 = Methodref          #71.#294      // org/json/JSONObject.\"<init>\":()V\n+   #73 = Fieldref           #76.#358      // org/json/XML.EQ:Ljava/lang/Character;\n+   #74 = String             #359          // Missing value\n+   #75 = Methodref          #239.#360     // org/json/XMLParserConfiguration.isConvertNilAttributeToNull:()Z\n+   #76 = Class              #361          // org/json/XML\n+   #77 = String             #362          // xsi:nil\n+   #78 = Methodref          #363.#364     // java/lang/Boolean.parseBoolean:(Ljava/lang/String;)Z\n+   #79 = Methodref          #239.#365     // org/json/XMLParserConfiguration.getXsiTypeMap:()Ljava/util/Map;\n+   #80 = InterfaceMethodref #366.#367     // java/util/Map.isEmpty:()Z\n+   #81 = String             #368          // xsi:type\n+   #82 = InterfaceMethodref #366.#369     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #83 = Class              #370          // org/json/XMLXsiTypeConverter\n+   #84 = Methodref          #239.#371     // org/json/XMLParserConfiguration.isKeepStrings:()Z\n+   #85 = Methodref          #76.#372      // org/json/XML.stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n+   #86 = String             #373          //\n+   #87 = Methodref          #239.#374     // org/json/XMLParserConfiguration.getForceList:()Ljava/util/Set;\n+   #88 = InterfaceMethodref #375.#376     // java/util/Set.contains:(Ljava/lang/Object;)Z\n+   #89 = Fieldref           #71.#377      // org/json/JSONObject.NULL:Ljava/lang/Object;\n+   #90 = Methodref          #71.#378      // org/json/JSONObject.append:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #91 = Methodref          #71.#298      // org/json/JSONObject.length:()I\n+   #92 = Class              #379          // org/json/JSONArray\n+   #93 = Methodref          #92.#294      // org/json/JSONArray.\"<init>\":()V\n+   #94 = Methodref          #71.#380      // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #95 = Methodref          #141.#381     // org/json/XMLTokener.nextContent:()Ljava/lang/Object;\n+   #96 = String             #382          // Unclosed tag\n+   #97 = Methodref          #76.#383      // org/json/XML.stringToValue:(Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n+   #98 = Methodref          #239.#384     // org/json/XMLParserConfiguration.getMaxNestingDepth:()I\n+   #99 = String             #385          // Maximum nesting depth of\n+  #100 = Methodref          #4.#386       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #101 = String             #387          //  reached\n+  #102 = Methodref          #76.#388      // org/json/XML.parse:(Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;I)Z\n+  #103 = Methodref          #71.#389      // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n+  #104 = InterfaceMethodref #83.#390      // org/json/XMLXsiTypeConverter.convert:(Ljava/lang/String;)Ljava/lang/Object;\n+  #105 = String             #391          // true\n+  #106 = Methodref          #70.#392      // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n+  #107 = Fieldref           #363.#393     // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n+  #108 = String             #394          // false\n+  #109 = Fieldref           #363.#395     // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n+  #110 = String             #396          // null\n+  #111 = Methodref          #76.#397      // org/json/XML.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+  #112 = Class              #398          // java/lang/Exception\n+  #113 = Methodref          #76.#399      // org/json/XML.isDecimalNotation:(Ljava/lang/String;)Z\n+  #114 = Class              #400          // java/math/BigDecimal\n+  #115 = Methodref          #114.#296     // java/math/BigDecimal.\"<init>\":(Ljava/lang/String;)V\n+  #116 = Fieldref           #114.#401     // java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;\n+  #117 = Methodref          #114.#402     // java/math/BigDecimal.compareTo:(Ljava/math/BigDecimal;)I\n   #118 = Double             -0.0d\n-  #120 = Methodref          #416.#417     // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n-  #121 = Class              #418          // java/lang/NumberFormatException\n-  #122 = Methodref          #416.#419     // java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n-  #123 = Methodref          #416.#420     // java/lang/Double.isNaN:()Z\n-  #124 = Methodref          #416.#421     // java/lang/Double.isInfinite:()Z\n-  #125 = String             #422          // val [\n-  #126 = String             #423          // ] is not a valid number.\n-  #127 = Methodref          #121.#307     // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n-  #128 = Class              #424          // java/math/BigInteger\n-  #129 = Methodref          #128.#307     // java/math/BigInteger.\"<init>\":(Ljava/lang/String;)V\n-  #130 = Methodref          #128.#425     // java/math/BigInteger.bitLength:()I\n-  #131 = Methodref          #128.#318     // java/math/BigInteger.intValue:()I\n-  #132 = Methodref          #11.#426      // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-  #133 = Methodref          #128.#427     // java/math/BigInteger.longValue:()J\n-  #134 = Methodref          #428.#429     // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n-  #135 = Methodref          #70.#430      // java/lang/String.indexOf:(I)I\n-  #136 = String             #431          // -0\n-  #137 = Fieldref           #350.#432     // org/json/XMLParserConfiguration.ORIGINAL:Lorg/json/XMLParserConfiguration;\n-  #138 = Methodref          #76.#433      // org/json/XML.toJSONObject:(Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #139 = Methodref          #76.#434      // org/json/XML.toJSONObject:(Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #140 = Fieldref           #350.#435     // org/json/XMLParserConfiguration.KEEP_STRINGS:Lorg/json/XMLParserConfiguration;\n-  #141 = Class              #436          // org/json/XMLTokener\n-  #142 = Methodref          #141.#437     // org/json/XMLTokener.\"<init>\":(Ljava/io/Reader;)V\n-  #143 = Methodref          #141.#438     // org/json/XMLTokener.more:()Z\n-  #144 = String             #439          // <\n-  #145 = Class              #440          // java/io/StringReader\n-  #146 = Methodref          #145.#307     // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n-  #147 = Methodref          #76.#441      // org/json/XML.toJSONObject:(Ljava/io/Reader;Z)Lorg/json/JSONObject;\n-  #148 = Methodref          #76.#442      // org/json/XML.toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n-  #149 = Methodref          #76.#443      // org/json/XML.toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;II)Ljava/lang/String;\n-  #150 = Methodref          #76.#444      // org/json/XML.indent:(I)Ljava/lang/String;\n-  #151 = String             #445          // \\n\n-  #152 = Methodref          #71.#446      // org/json/JSONObject.keySet:()Ljava/util/Set;\n-  #153 = InterfaceMethodref #388.#313     // java/util/Set.iterator:()Ljava/util/Iterator;\n-  #154 = Methodref          #171.#447     // java/lang/Object.getClass:()Ljava/lang/Class;\n-  #155 = Methodref          #448.#449     // java/lang/Class.isArray:()Z\n-  #156 = Methodref          #92.#450      // org/json/JSONArray.\"<init>\":(Ljava/lang/Object;)V\n-  #157 = Methodref          #92.#309      // org/json/JSONArray.length:()I\n-  #158 = Methodref          #92.#451      // org/json/JSONArray.opt:(I)Ljava/lang/Object;\n-  #159 = Methodref          #171.#330     // java/lang/Object.toString:()Ljava/lang/String;\n-  #160 = Methodref          #76.#452      // org/json/XML.escape:(Ljava/lang/String;)Ljava/lang/String;\n-  #161 = String             #453          // </\n-  #162 = String             #454          // />\n-  #163 = String             #455          // array\n-  #164 = String             #456          // \\\"\n-  #165 = String             #457          // >\n-  #166 = Methodref          #76.#458      // org/json/XML.toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;I)Ljava/lang/String;\n-  #167 = Methodref          #68.#459      // java/lang/Character.valueOf:(C)Ljava/lang/Character;\n-  #168 = Fieldref           #76.#460      // org/json/XML.AMP:Ljava/lang/Character;\n-  #169 = Fieldref           #76.#461      // org/json/XML.APOS:Ljava/lang/Character;\n-  #170 = Fieldref           #76.#462      // org/json/XML.QUOT:Ljava/lang/Character;\n-  #171 = Class              #463          // java/lang/Object\n+  #120 = Methodref          #260.#403     // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n+  #121 = Class              #404          // java/lang/NumberFormatException\n+  #122 = Methodref          #260.#405     // java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n+  #123 = Methodref          #260.#406     // java/lang/Double.isNaN:()Z\n+  #124 = Methodref          #260.#407     // java/lang/Double.isInfinite:()Z\n+  #125 = String             #408          // val [\n+  #126 = String             #409          // ] is not a valid number.\n+  #127 = Methodref          #121.#296     // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n+  #128 = Class              #410          // java/math/BigInteger\n+  #129 = Methodref          #128.#296     // java/math/BigInteger.\"<init>\":(Ljava/lang/String;)V\n+  #130 = Methodref          #128.#411     // java/math/BigInteger.bitLength:()I\n+  #131 = Methodref          #128.#306     // java/math/BigInteger.intValue:()I\n+  #132 = Methodref          #11.#412      // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+  #133 = Methodref          #128.#413     // java/math/BigInteger.longValue:()J\n+  #134 = Methodref          #414.#415     // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n+  #135 = Methodref          #70.#416      // java/lang/String.indexOf:(I)I\n+  #136 = String             #417          // -0\n+  #137 = Fieldref           #239.#418     // org/json/XMLParserConfiguration.ORIGINAL:Lorg/json/XMLParserConfiguration;\n+  #138 = Methodref          #76.#419      // org/json/XML.toJSONObject:(Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #139 = Methodref          #76.#420      // org/json/XML.toJSONObject:(Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #140 = Fieldref           #239.#421     // org/json/XMLParserConfiguration.KEEP_STRINGS:Lorg/json/XMLParserConfiguration;\n+  #141 = Class              #422          // org/json/XMLTokener\n+  #142 = Methodref          #141.#423     // org/json/XMLTokener.\"<init>\":(Ljava/io/Reader;)V\n+  #143 = Methodref          #141.#424     // org/json/XMLTokener.more:()Z\n+  #144 = String             #425          // <\n+  #145 = Class              #426          // java/io/StringReader\n+  #146 = Methodref          #145.#296     // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n+  #147 = Methodref          #76.#427      // org/json/XML.toJSONObject:(Ljava/io/Reader;Z)Lorg/json/JSONObject;\n+  #148 = Methodref          #76.#428      // org/json/XML.toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n+  #149 = Methodref          #76.#429      // org/json/XML.toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;II)Ljava/lang/String;\n+  #150 = Methodref          #76.#430      // org/json/XML.indent:(I)Ljava/lang/String;\n+  #151 = String             #431          // \\n\n+  #152 = Methodref          #71.#432      // org/json/JSONObject.keySet:()Ljava/util/Set;\n+  #153 = InterfaceMethodref #375.#302     // java/util/Set.iterator:()Ljava/util/Iterator;\n+  #154 = Methodref          #171.#433     // java/lang/Object.getClass:()Ljava/lang/Class;\n+  #155 = Methodref          #434.#435     // java/lang/Class.isArray:()Z\n+  #156 = Methodref          #92.#436      // org/json/JSONArray.\"<init>\":(Ljava/lang/Object;)V\n+  #157 = Methodref          #92.#298      // org/json/JSONArray.length:()I\n+  #158 = Methodref          #92.#437      // org/json/JSONArray.opt:(I)Ljava/lang/Object;\n+  #159 = Methodref          #171.#318     // java/lang/Object.toString:()Ljava/lang/String;\n+  #160 = Methodref          #76.#438      // org/json/XML.escape:(Ljava/lang/String;)Ljava/lang/String;\n+  #161 = String             #439          // </\n+  #162 = String             #440          // />\n+  #163 = String             #441          // array\n+  #164 = String             #442          // \\\"\n+  #165 = String             #443          // >\n+  #166 = Methodref          #76.#444      // org/json/XML.toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;I)Ljava/lang/String;\n+  #167 = Methodref          #68.#445      // java/lang/Character.valueOf:(C)Ljava/lang/Character;\n+  #168 = Fieldref           #76.#446      // org/json/XML.AMP:Ljava/lang/Character;\n+  #169 = Fieldref           #76.#447      // org/json/XML.APOS:Ljava/lang/Character;\n+  #170 = Fieldref           #76.#448      // org/json/XML.QUOT:Ljava/lang/Character;\n+  #171 = Class              #449          // java/lang/Object\n   #172 = Utf8               InnerClasses\n   #173 = Utf8               AMP\n   #174 = Utf8               Ljava/lang/Character;\n   #175 = Utf8               APOS\n   #176 = Utf8               BANG\n   #177 = Utf8               EQ\n   #178 = Utf8               GT\n@@ -208,367 +208,353 @@\n   #199 = Utf8               escape\n   #200 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n   #201 = Utf8               cp\n   #202 = Utf8               I\n   #203 = Utf8               sb\n   #204 = Utf8               Ljava/lang/StringBuilder;\n   #205 = Utf8               StackMapTable\n-  #206 = Class              #308          // java/lang/StringBuilder\n-  #207 = Class              #464          // java/util/Iterator\n-  #208 = Utf8               mustEscape\n-  #209 = Utf8               (I)Z\n-  #210 = Utf8               unescape\n-  #211 = Utf8               entity\n-  #212 = Utf8               semic\n-  #213 = Utf8               c\n-  #214 = Utf8               C\n-  #215 = Utf8               i\n-  #216 = Utf8               length\n-  #217 = Utf8               noSpace\n-  #218 = Utf8               (Ljava/lang/String;)V\n-  #219 = Class              #369          // java/lang/String\n-  #220 = Utf8               Exceptions\n-  #221 = Utf8               parse\n-  #222 = Utf8               (Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;I)Z\n-  #223 = Utf8               nilAttributeFound\n-  #224 = Utf8               Z\n-  #225 = Utf8               x\n-  #226 = Utf8               Lorg/json/XMLTokener;\n-  #227 = Utf8               context\n-  #228 = Utf8               Lorg/json/JSONObject;\n-  #229 = Utf8               name\n-  #230 = Utf8               config\n-  #231 = Utf8               Lorg/json/XMLParserConfiguration;\n-  #232 = Utf8               currentNestingDepth\n-  #233 = Utf8               jsonObject\n-  #234 = Utf8               tagName\n-  #235 = Utf8               token\n-  #236 = Utf8               Ljava/lang/Object;\n-  #237 = Utf8               xmlXsiTypeConverter\n-  #238 = Utf8               Lorg/json/XMLXsiTypeConverter;\n-  #239 = Utf8               LocalVariableTypeTable\n-  #240 = Utf8               Lorg/json/XMLXsiTypeConverter<*>;\n-  #241 = Class              #436          // org/json/XMLTokener\n-  #242 = Class              #370          // org/json/JSONObject\n-  #243 = Class              #465          // org/json/XMLParserConfiguration\n-  #244 = Class              #463          // java/lang/Object\n-  #245 = Class              #383          // org/json/XMLXsiTypeConverter\n-  #246 = Utf8               stringToValue\n-  #247 = Utf8               (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n-  #248 = Utf8               typeConverter\n-  #249 = Utf8               (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter<*>;)Ljava/lang/Object;\n-  #250 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n-  #251 = Utf8               initial\n-  #252 = Class              #411          // java/lang/Exception\n-  #253 = Utf8               stringToNumber\n-  #254 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n-  #255 = Utf8               bd\n-  #256 = Utf8               Ljava/math/BigDecimal;\n-  #257 = Utf8               d\n-  #258 = Utf8               Ljava/lang/Double;\n-  #259 = Utf8               ignore\n-  #260 = Utf8               Ljava/lang/NumberFormatException;\n-  #261 = Utf8               retryAsDouble\n-  #262 = Utf8               at1\n-  #263 = Utf8               at2\n-  #264 = Utf8               bi\n-  #265 = Utf8               Ljava/math/BigInteger;\n-  #266 = Utf8               val\n-  #267 = Class              #413          // java/math/BigDecimal\n-  #268 = Class              #418          // java/lang/NumberFormatException\n-  #269 = Class              #466          // java/lang/Double\n-  #270 = Class              #424          // java/math/BigInteger\n-  #271 = Utf8               isDecimalNotation\n-  #272 = Utf8               (Ljava/lang/String;)Z\n-  #273 = Utf8               toJSONObject\n-  #274 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n-  #275 = Utf8               (Ljava/io/Reader;)Lorg/json/JSONObject;\n-  #276 = Utf8               reader\n-  #277 = Utf8               Ljava/io/Reader;\n-  #278 = Utf8               (Ljava/io/Reader;Z)Lorg/json/JSONObject;\n-  #279 = Utf8               keepStrings\n-  #280 = Utf8               (Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #281 = Utf8               jo\n-  #282 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n-  #283 = Utf8               (Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #284 = Utf8               toString\n-  #285 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n-  #286 = Utf8               object\n-  #287 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n-  #288 = Utf8               (Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n-  #289 = Utf8               (Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;II)Ljava/lang/String;\n-  #290 = Utf8               jaLength\n-  #291 = Utf8               ja\n-  #292 = Utf8               Lorg/json/JSONArray;\n-  #293 = Utf8               value\n-  #294 = Utf8               key\n-  #295 = Utf8               indentFactor\n-  #296 = Utf8               indent\n-  #297 = Class              #392          // org/json/JSONArray\n-  #298 = Utf8               (Ljava/lang/Object;I)Ljava/lang/String;\n-  #299 = Utf8               (Ljava/lang/Object;Ljava/lang/String;I)Ljava/lang/String;\n-  #300 = Utf8               (Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;I)Ljava/lang/String;\n-  #301 = Utf8               (I)Ljava/lang/String;\n-  #302 = Utf8               <clinit>\n-  #303 = Utf8               SourceFile\n-  #304 = Utf8               XML.java\n-  #305 = NameAndType        #187:#188     // \"<init>\":()V\n-  #306 = Utf8               org/json/XML$1\n-  #307 = NameAndType        #187:#218     // \"<init>\":(Ljava/lang/String;)V\n-  #308 = Utf8               java/lang/StringBuilder\n-  #309 = NameAndType        #216:#467     // length:()I\n-  #310 = NameAndType        #187:#468     // \"<init>\":(I)V\n-  #311 = NameAndType        #194:#195     // codePointIterator:(Ljava/lang/String;)Ljava/lang/Iterable;\n-  #312 = Class              #469          // java/lang/Iterable\n-  #313 = NameAndType        #470:#471     // iterator:()Ljava/util/Iterator;\n-  #314 = Class              #464          // java/util/Iterator\n-  #315 = NameAndType        #472:#473     // hasNext:()Z\n-  #316 = NameAndType        #474:#475     // next:()Ljava/lang/Object;\n-  #317 = Utf8               java/lang/Integer\n-  #318 = NameAndType        #476:#467     // intValue:()I\n-  #319 = Utf8               &amp;\n-  #320 = NameAndType        #477:#478     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #321 = Utf8               &lt;\n-  #322 = Utf8               &gt;\n-  #323 = Utf8               &quot;\n-  #324 = Utf8               &apos;\n-  #325 = NameAndType        #208:#209     // mustEscape:(I)Z\n-  #326 = Utf8               &#x\n-  #327 = NameAndType        #479:#301     // toHexString:(I)Ljava/lang/String;\n-  #328 = NameAndType        #477:#480     // append:(C)Ljava/lang/StringBuilder;\n-  #329 = NameAndType        #481:#482     // appendCodePoint:(I)Ljava/lang/StringBuilder;\n-  #330 = NameAndType        #284:#483     // toString:()Ljava/lang/String;\n-  #331 = NameAndType        #484:#209     // isISOControl:(I)Z\n-  #332 = NameAndType        #485:#486     // charAt:(I)C\n-  #333 = NameAndType        #487:#488     // indexOf:(II)I\n-  #334 = NameAndType        #489:#490     // substring:(II)Ljava/lang/String;\n-  #335 = NameAndType        #491:#200     // unescapeEntity:(Ljava/lang/String;)Ljava/lang/String;\n-  #336 = Utf8               org/json/JSONException\n-  #337 = Utf8               Empty string.\n-  #338 = NameAndType        #492:#493     // isWhitespace:(C)Z\n-  #339 = Utf8               \\'\n-  #340 = Utf8               \\' contains a space character.\n-  #341 = NameAndType        #494:#475     // nextToken:()Ljava/lang/Object;\n-  #342 = NameAndType        #176:#174     // BANG:Ljava/lang/Character;\n-  #343 = NameAndType        #474:#495     // next:()C\n-  #344 = Utf8               -->\n-  #345 = NameAndType        #496:#218     // skipPast:(Ljava/lang/String;)V\n-  #346 = NameAndType        #497:#188     // back:()V\n-  #347 = Utf8               CDATA\n-  #348 = NameAndType        #498:#499     // equals:(Ljava/lang/Object;)Z\n-  #349 = NameAndType        #500:#483     // nextCDATA:()Ljava/lang/String;\n-  #350 = Class              #465          // org/json/XMLParserConfiguration\n-  #351 = NameAndType        #501:#483     // getcDataTagName:()Ljava/lang/String;\n-  #352 = NameAndType        #502:#503     // accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #353 = Utf8               Expected \\'CDATA[\\'\n-  #354 = NameAndType        #504:#505     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-  #355 = NameAndType        #506:#475     // nextMeta:()Ljava/lang/Object;\n-  #356 = Utf8               Missing \\'>\\' after \\'<!\\'.\n-  #357 = NameAndType        #179:#174     // LT:Ljava/lang/Character;\n-  #358 = NameAndType        #178:#174     // GT:Ljava/lang/Character;\n-  #359 = NameAndType        #180:#174     // QUEST:Ljava/lang/Character;\n-  #360 = Utf8               ?>\n-  #361 = NameAndType        #182:#174     // SLASH:Ljava/lang/Character;\n-  #362 = Utf8               Mismatched close tag\n-  #363 = NameAndType        #477:#507     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #364 = Utf8               Mismatched\n-  #365 = Utf8                and\n-  #366 = Utf8               Misshaped close tag\n-  #367 = Utf8               java/lang/Character\n-  #368 = Utf8               Misshaped tag\n-  #369 = Utf8               java/lang/String\n-  #370 = Utf8               org/json/JSONObject\n-  #371 = NameAndType        #177:#174     // EQ:Ljava/lang/Character;\n-  #372 = Utf8               Missing value\n-  #373 = NameAndType        #508:#473     // isConvertNilAttributeToNull:()Z\n-  #374 = Utf8               org/json/XML\n-  #375 = Utf8               xsi:nil\n-  #376 = Class              #509          // java/lang/Boolean\n-  #377 = NameAndType        #510:#272     // parseBoolean:(Ljava/lang/String;)Z\n-  #378 = NameAndType        #511:#512     // getXsiTypeMap:()Ljava/util/Map;\n-  #379 = Class              #513          // java/util/Map\n-  #380 = NameAndType        #514:#473     // isEmpty:()Z\n-  #381 = Utf8               xsi:type\n-  #382 = NameAndType        #515:#516     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #383 = Utf8               org/json/XMLXsiTypeConverter\n-  #384 = NameAndType        #517:#473     // isKeepStrings:()Z\n-  #385 = NameAndType        #246:#250     // stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n-  #386 = Utf8\n-  #387 = NameAndType        #518:#519     // getForceList:()Ljava/util/Set;\n-  #388 = Class              #520          // java/util/Set\n-  #389 = NameAndType        #521:#499     // contains:(Ljava/lang/Object;)Z\n-  #390 = NameAndType        #522:#236     // NULL:Ljava/lang/Object;\n-  #391 = NameAndType        #477:#503     // append:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #392 = Utf8               org/json/JSONArray\n-  #393 = NameAndType        #523:#503     // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #394 = NameAndType        #524:#475     // nextContent:()Ljava/lang/Object;\n-  #395 = Utf8               Unclosed tag\n-  #396 = NameAndType        #246:#247     // stringToValue:(Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n-  #397 = NameAndType        #525:#467     // getMaxNestingDepth:()I\n-  #398 = Utf8               Maximum nesting depth of\n-  #399 = NameAndType        #477:#482     // append:(I)Ljava/lang/StringBuilder;\n-  #400 = Utf8                reached\n-  #401 = NameAndType        #221:#222     // parse:(Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;I)Z\n-  #402 = NameAndType        #526:#250     // opt:(Ljava/lang/String;)Ljava/lang/Object;\n-  #403 = NameAndType        #527:#250     // convert:(Ljava/lang/String;)Ljava/lang/Object;\n-  #404 = Utf8               true\n-  #405 = NameAndType        #528:#272     // equalsIgnoreCase:(Ljava/lang/String;)Z\n-  #406 = NameAndType        #529:#530     // TRUE:Ljava/lang/Boolean;\n-  #407 = Utf8               false\n-  #408 = NameAndType        #531:#530     // FALSE:Ljava/lang/Boolean;\n-  #409 = Utf8               null\n-  #410 = NameAndType        #253:#254     // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-  #411 = Utf8               java/lang/Exception\n-  #412 = NameAndType        #271:#272     // isDecimalNotation:(Ljava/lang/String;)Z\n-  #413 = Utf8               java/math/BigDecimal\n-  #414 = NameAndType        #532:#256     // ZERO:Ljava/math/BigDecimal;\n-  #415 = NameAndType        #533:#534     // compareTo:(Ljava/math/BigDecimal;)I\n-  #416 = Class              #466          // java/lang/Double\n-  #417 = NameAndType        #535:#536     // valueOf:(D)Ljava/lang/Double;\n-  #418 = Utf8               java/lang/NumberFormatException\n-  #419 = NameAndType        #535:#537     // valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n-  #420 = NameAndType        #538:#473     // isNaN:()Z\n-  #421 = NameAndType        #539:#473     // isInfinite:()Z\n-  #422 = Utf8               val [\n-  #423 = Utf8               ] is not a valid number.\n-  #424 = Utf8               java/math/BigInteger\n-  #425 = NameAndType        #540:#467     // bitLength:()I\n-  #426 = NameAndType        #535:#541     // valueOf:(I)Ljava/lang/Integer;\n-  #427 = NameAndType        #542:#543     // longValue:()J\n-  #428 = Class              #544          // java/lang/Long\n-  #429 = NameAndType        #535:#545     // valueOf:(J)Ljava/lang/Long;\n-  #430 = NameAndType        #487:#546     // indexOf:(I)I\n-  #431 = Utf8               -0\n-  #432 = NameAndType        #547:#231     // ORIGINAL:Lorg/json/XMLParserConfiguration;\n-  #433 = NameAndType        #273:#283     // toJSONObject:(Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #434 = NameAndType        #273:#280     // toJSONObject:(Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #435 = NameAndType        #548:#231     // KEEP_STRINGS:Lorg/json/XMLParserConfiguration;\n-  #436 = Utf8               org/json/XMLTokener\n-  #437 = NameAndType        #187:#549     // \"<init>\":(Ljava/io/Reader;)V\n-  #438 = NameAndType        #550:#473     // more:()Z\n-  #439 = Utf8               <\n-  #440 = Utf8               java/io/StringReader\n-  #441 = NameAndType        #273:#278     // toJSONObject:(Ljava/io/Reader;Z)Lorg/json/JSONObject;\n-  #442 = NameAndType        #284:#288     // toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n-  #443 = NameAndType        #284:#289     // toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;II)Ljava/lang/String;\n-  #444 = NameAndType        #296:#301     // indent:(I)Ljava/lang/String;\n-  #445 = Utf8               \\n\n-  #446 = NameAndType        #551:#519     // keySet:()Ljava/util/Set;\n-  #447 = NameAndType        #552:#553     // getClass:()Ljava/lang/Class;\n-  #448 = Class              #554          // java/lang/Class\n-  #449 = NameAndType        #555:#473     // isArray:()Z\n-  #450 = NameAndType        #187:#556     // \"<init>\":(Ljava/lang/Object;)V\n-  #451 = NameAndType        #526:#557     // opt:(I)Ljava/lang/Object;\n-  #452 = NameAndType        #199:#200     // escape:(Ljava/lang/String;)Ljava/lang/String;\n-  #453 = Utf8               </\n-  #454 = Utf8               />\n-  #455 = Utf8               array\n-  #456 = Utf8               \\\"\n-  #457 = Utf8               >\n-  #458 = NameAndType        #284:#300     // toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;I)Ljava/lang/String;\n-  #459 = NameAndType        #535:#558     // valueOf:(C)Ljava/lang/Character;\n-  #460 = NameAndType        #173:#174     // AMP:Ljava/lang/Character;\n-  #461 = NameAndType        #175:#174     // APOS:Ljava/lang/Character;\n-  #462 = NameAndType        #181:#174     // QUOT:Ljava/lang/Character;\n-  #463 = Utf8               java/lang/Object\n-  #464 = Utf8               java/util/Iterator\n-  #465 = Utf8               org/json/XMLParserConfiguration\n-  #466 = Utf8               java/lang/Double\n-  #467 = Utf8               ()I\n-  #468 = Utf8               (I)V\n-  #469 = Utf8               java/lang/Iterable\n-  #470 = Utf8               iterator\n-  #471 = Utf8               ()Ljava/util/Iterator;\n-  #472 = Utf8               hasNext\n-  #473 = Utf8               ()Z\n-  #474 = Utf8               next\n-  #475 = Utf8               ()Ljava/lang/Object;\n-  #476 = Utf8               intValue\n-  #477 = Utf8               append\n-  #478 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #479 = Utf8               toHexString\n-  #480 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #481 = Utf8               appendCodePoint\n-  #482 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #483 = Utf8               ()Ljava/lang/String;\n-  #484 = Utf8               isISOControl\n-  #485 = Utf8               charAt\n-  #486 = Utf8               (I)C\n-  #487 = Utf8               indexOf\n-  #488 = Utf8               (II)I\n-  #489 = Utf8               substring\n-  #490 = Utf8               (II)Ljava/lang/String;\n-  #491 = Utf8               unescapeEntity\n-  #492 = Utf8               isWhitespace\n-  #493 = Utf8               (C)Z\n-  #494 = Utf8               nextToken\n-  #495 = Utf8               ()C\n-  #496 = Utf8               skipPast\n-  #497 = Utf8               back\n-  #498 = Utf8               equals\n-  #499 = Utf8               (Ljava/lang/Object;)Z\n-  #500 = Utf8               nextCDATA\n-  #501 = Utf8               getcDataTagName\n-  #502 = Utf8               accumulate\n-  #503 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #504 = Utf8               syntaxError\n-  #505 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n-  #506 = Utf8               nextMeta\n-  #507 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #508 = Utf8               isConvertNilAttributeToNull\n-  #509 = Utf8               java/lang/Boolean\n-  #510 = Utf8               parseBoolean\n-  #511 = Utf8               getXsiTypeMap\n-  #512 = Utf8               ()Ljava/util/Map;\n-  #513 = Utf8               java/util/Map\n-  #514 = Utf8               isEmpty\n-  #515 = Utf8               get\n-  #516 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #517 = Utf8               isKeepStrings\n-  #518 = Utf8               getForceList\n-  #519 = Utf8               ()Ljava/util/Set;\n-  #520 = Utf8               java/util/Set\n-  #521 = Utf8               contains\n-  #522 = Utf8               NULL\n-  #523 = Utf8               put\n-  #524 = Utf8               nextContent\n-  #525 = Utf8               getMaxNestingDepth\n-  #526 = Utf8               opt\n-  #527 = Utf8               convert\n-  #528 = Utf8               equalsIgnoreCase\n-  #529 = Utf8               TRUE\n-  #530 = Utf8               Ljava/lang/Boolean;\n-  #531 = Utf8               FALSE\n-  #532 = Utf8               ZERO\n-  #533 = Utf8               compareTo\n-  #534 = Utf8               (Ljava/math/BigDecimal;)I\n-  #535 = Utf8               valueOf\n-  #536 = Utf8               (D)Ljava/lang/Double;\n-  #537 = Utf8               (Ljava/lang/String;)Ljava/lang/Double;\n-  #538 = Utf8               isNaN\n-  #539 = Utf8               isInfinite\n-  #540 = Utf8               bitLength\n-  #541 = Utf8               (I)Ljava/lang/Integer;\n-  #542 = Utf8               longValue\n-  #543 = Utf8               ()J\n-  #544 = Utf8               java/lang/Long\n-  #545 = Utf8               (J)Ljava/lang/Long;\n-  #546 = Utf8               (I)I\n-  #547 = Utf8               ORIGINAL\n-  #548 = Utf8               KEEP_STRINGS\n-  #549 = Utf8               (Ljava/io/Reader;)V\n-  #550 = Utf8               more\n-  #551 = Utf8               keySet\n-  #552 = Utf8               getClass\n-  #553 = Utf8               ()Ljava/lang/Class;\n-  #554 = Utf8               java/lang/Class\n-  #555 = Utf8               isArray\n-  #556 = Utf8               (Ljava/lang/Object;)V\n-  #557 = Utf8               (I)Ljava/lang/Object;\n-  #558 = Utf8               (C)Ljava/lang/Character;\n+  #206 = Class              #450          // java/util/Iterator\n+  #207 = Utf8               mustEscape\n+  #208 = Utf8               (I)Z\n+  #209 = Utf8               unescape\n+  #210 = Utf8               entity\n+  #211 = Utf8               semic\n+  #212 = Utf8               c\n+  #213 = Utf8               C\n+  #214 = Utf8               i\n+  #215 = Utf8               length\n+  #216 = Utf8               noSpace\n+  #217 = Utf8               (Ljava/lang/String;)V\n+  #218 = Utf8               Exceptions\n+  #219 = Utf8               parse\n+  #220 = Utf8               (Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;I)Z\n+  #221 = Utf8               nilAttributeFound\n+  #222 = Utf8               Z\n+  #223 = Utf8               x\n+  #224 = Utf8               Lorg/json/XMLTokener;\n+  #225 = Utf8               context\n+  #226 = Utf8               Lorg/json/JSONObject;\n+  #227 = Utf8               name\n+  #228 = Utf8               config\n+  #229 = Utf8               Lorg/json/XMLParserConfiguration;\n+  #230 = Utf8               currentNestingDepth\n+  #231 = Utf8               jsonObject\n+  #232 = Utf8               tagName\n+  #233 = Utf8               token\n+  #234 = Utf8               Ljava/lang/Object;\n+  #235 = Utf8               xmlXsiTypeConverter\n+  #236 = Utf8               Lorg/json/XMLXsiTypeConverter;\n+  #237 = Utf8               LocalVariableTypeTable\n+  #238 = Utf8               Lorg/json/XMLXsiTypeConverter<*>;\n+  #239 = Class              #451          // org/json/XMLParserConfiguration\n+  #240 = Utf8               stringToValue\n+  #241 = Utf8               (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n+  #242 = Utf8               typeConverter\n+  #243 = Utf8               (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter<*>;)Ljava/lang/Object;\n+  #244 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n+  #245 = Utf8               initial\n+  #246 = Utf8               stringToNumber\n+  #247 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n+  #248 = Utf8               bd\n+  #249 = Utf8               Ljava/math/BigDecimal;\n+  #250 = Utf8               d\n+  #251 = Utf8               Ljava/lang/Double;\n+  #252 = Utf8               ignore\n+  #253 = Utf8               Ljava/lang/NumberFormatException;\n+  #254 = Utf8               retryAsDouble\n+  #255 = Utf8               at1\n+  #256 = Utf8               at2\n+  #257 = Utf8               bi\n+  #258 = Utf8               Ljava/math/BigInteger;\n+  #259 = Utf8               val\n+  #260 = Class              #452          // java/lang/Double\n+  #261 = Utf8               isDecimalNotation\n+  #262 = Utf8               (Ljava/lang/String;)Z\n+  #263 = Utf8               toJSONObject\n+  #264 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n+  #265 = Utf8               (Ljava/io/Reader;)Lorg/json/JSONObject;\n+  #266 = Utf8               reader\n+  #267 = Utf8               Ljava/io/Reader;\n+  #268 = Utf8               (Ljava/io/Reader;Z)Lorg/json/JSONObject;\n+  #269 = Utf8               keepStrings\n+  #270 = Utf8               (Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #271 = Utf8               jo\n+  #272 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n+  #273 = Utf8               (Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #274 = Utf8               toString\n+  #275 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n+  #276 = Utf8               object\n+  #277 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n+  #278 = Utf8               (Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n+  #279 = Utf8               (Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;II)Ljava/lang/String;\n+  #280 = Utf8               jaLength\n+  #281 = Utf8               ja\n+  #282 = Utf8               Lorg/json/JSONArray;\n+  #283 = Utf8               value\n+  #284 = Utf8               key\n+  #285 = Utf8               indentFactor\n+  #286 = Utf8               indent\n+  #287 = Utf8               (Ljava/lang/Object;I)Ljava/lang/String;\n+  #288 = Utf8               (Ljava/lang/Object;Ljava/lang/String;I)Ljava/lang/String;\n+  #289 = Utf8               (Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;I)Ljava/lang/String;\n+  #290 = Utf8               (I)Ljava/lang/String;\n+  #291 = Utf8               <clinit>\n+  #292 = Utf8               SourceFile\n+  #293 = Utf8               XML.java\n+  #294 = NameAndType        #187:#188     // \"<init>\":()V\n+  #295 = Utf8               org/json/XML$1\n+  #296 = NameAndType        #187:#217     // \"<init>\":(Ljava/lang/String;)V\n+  #297 = Utf8               java/lang/StringBuilder\n+  #298 = NameAndType        #215:#453     // length:()I\n+  #299 = NameAndType        #187:#454     // \"<init>\":(I)V\n+  #300 = NameAndType        #194:#195     // codePointIterator:(Ljava/lang/String;)Ljava/lang/Iterable;\n+  #301 = Class              #455          // java/lang/Iterable\n+  #302 = NameAndType        #456:#457     // iterator:()Ljava/util/Iterator;\n+  #303 = NameAndType        #458:#459     // hasNext:()Z\n+  #304 = NameAndType        #460:#461     // next:()Ljava/lang/Object;\n+  #305 = Utf8               java/lang/Integer\n+  #306 = NameAndType        #462:#453     // intValue:()I\n+  #307 = Utf8               &amp;\n+  #308 = NameAndType        #463:#464     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #309 = Utf8               &lt;\n+  #310 = Utf8               &gt;\n+  #311 = Utf8               &quot;\n+  #312 = Utf8               &apos;\n+  #313 = NameAndType        #207:#208     // mustEscape:(I)Z\n+  #314 = Utf8               &#x\n+  #315 = NameAndType        #465:#290     // toHexString:(I)Ljava/lang/String;\n+  #316 = NameAndType        #463:#466     // append:(C)Ljava/lang/StringBuilder;\n+  #317 = NameAndType        #467:#468     // appendCodePoint:(I)Ljava/lang/StringBuilder;\n+  #318 = NameAndType        #274:#469     // toString:()Ljava/lang/String;\n+  #319 = NameAndType        #470:#208     // isISOControl:(I)Z\n+  #320 = NameAndType        #471:#472     // charAt:(I)C\n+  #321 = NameAndType        #473:#474     // indexOf:(II)I\n+  #322 = NameAndType        #475:#476     // substring:(II)Ljava/lang/String;\n+  #323 = NameAndType        #477:#200     // unescapeEntity:(Ljava/lang/String;)Ljava/lang/String;\n+  #324 = Utf8               org/json/JSONException\n+  #325 = Utf8               Empty string.\n+  #326 = NameAndType        #478:#479     // isWhitespace:(C)Z\n+  #327 = Utf8               \\'\n+  #328 = Utf8               \\' contains a space character.\n+  #329 = NameAndType        #480:#461     // nextToken:()Ljava/lang/Object;\n+  #330 = NameAndType        #176:#174     // BANG:Ljava/lang/Character;\n+  #331 = NameAndType        #460:#481     // next:()C\n+  #332 = Utf8               -->\n+  #333 = NameAndType        #482:#217     // skipPast:(Ljava/lang/String;)V\n+  #334 = NameAndType        #483:#188     // back:()V\n+  #335 = Utf8               CDATA\n+  #336 = NameAndType        #484:#485     // equals:(Ljava/lang/Object;)Z\n+  #337 = NameAndType        #486:#469     // nextCDATA:()Ljava/lang/String;\n+  #338 = NameAndType        #487:#469     // getcDataTagName:()Ljava/lang/String;\n+  #339 = NameAndType        #488:#489     // accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #340 = Utf8               Expected \\'CDATA[\\'\n+  #341 = NameAndType        #490:#491     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+  #342 = NameAndType        #492:#461     // nextMeta:()Ljava/lang/Object;\n+  #343 = Utf8               Missing \\'>\\' after \\'<!\\'.\n+  #344 = NameAndType        #179:#174     // LT:Ljava/lang/Character;\n+  #345 = NameAndType        #178:#174     // GT:Ljava/lang/Character;\n+  #346 = NameAndType        #180:#174     // QUEST:Ljava/lang/Character;\n+  #347 = Utf8               ?>\n+  #348 = NameAndType        #182:#174     // SLASH:Ljava/lang/Character;\n+  #349 = Utf8               Mismatched close tag\n+  #350 = NameAndType        #463:#493     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #351 = Utf8               Mismatched\n+  #352 = Utf8                and\n+  #353 = Utf8               Misshaped close tag\n+  #354 = Utf8               java/lang/Character\n+  #355 = Utf8               Misshaped tag\n+  #356 = Utf8               java/lang/String\n+  #357 = Utf8               org/json/JSONObject\n+  #358 = NameAndType        #177:#174     // EQ:Ljava/lang/Character;\n+  #359 = Utf8               Missing value\n+  #360 = NameAndType        #494:#459     // isConvertNilAttributeToNull:()Z\n+  #361 = Utf8               org/json/XML\n+  #362 = Utf8               xsi:nil\n+  #363 = Class              #495          // java/lang/Boolean\n+  #364 = NameAndType        #496:#262     // parseBoolean:(Ljava/lang/String;)Z\n+  #365 = NameAndType        #497:#498     // getXsiTypeMap:()Ljava/util/Map;\n+  #366 = Class              #499          // java/util/Map\n+  #367 = NameAndType        #500:#459     // isEmpty:()Z\n+  #368 = Utf8               xsi:type\n+  #369 = NameAndType        #501:#502     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #370 = Utf8               org/json/XMLXsiTypeConverter\n+  #371 = NameAndType        #503:#459     // isKeepStrings:()Z\n+  #372 = NameAndType        #240:#244     // stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n+  #373 = Utf8\n+  #374 = NameAndType        #504:#505     // getForceList:()Ljava/util/Set;\n+  #375 = Class              #506          // java/util/Set\n+  #376 = NameAndType        #507:#485     // contains:(Ljava/lang/Object;)Z\n+  #377 = NameAndType        #508:#234     // NULL:Ljava/lang/Object;\n+  #378 = NameAndType        #463:#489     // append:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #379 = Utf8               org/json/JSONArray\n+  #380 = NameAndType        #509:#489     // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #381 = NameAndType        #510:#461     // nextContent:()Ljava/lang/Object;\n+  #382 = Utf8               Unclosed tag\n+  #383 = NameAndType        #240:#241     // stringToValue:(Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n+  #384 = NameAndType        #511:#453     // getMaxNestingDepth:()I\n+  #385 = Utf8               Maximum nesting depth of\n+  #386 = NameAndType        #463:#468     // append:(I)Ljava/lang/StringBuilder;\n+  #387 = Utf8                reached\n+  #388 = NameAndType        #219:#220     // parse:(Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;I)Z\n+  #389 = NameAndType        #512:#244     // opt:(Ljava/lang/String;)Ljava/lang/Object;\n+  #390 = NameAndType        #513:#244     // convert:(Ljava/lang/String;)Ljava/lang/Object;\n+  #391 = Utf8               true\n+  #392 = NameAndType        #514:#262     // equalsIgnoreCase:(Ljava/lang/String;)Z\n+  #393 = NameAndType        #515:#516     // TRUE:Ljava/lang/Boolean;\n+  #394 = Utf8               false\n+  #395 = NameAndType        #517:#516     // FALSE:Ljava/lang/Boolean;\n+  #396 = Utf8               null\n+  #397 = NameAndType        #246:#247     // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+  #398 = Utf8               java/lang/Exception\n+  #399 = NameAndType        #261:#262     // isDecimalNotation:(Ljava/lang/String;)Z\n+  #400 = Utf8               java/math/BigDecimal\n+  #401 = NameAndType        #518:#249     // ZERO:Ljava/math/BigDecimal;\n+  #402 = NameAndType        #519:#520     // compareTo:(Ljava/math/BigDecimal;)I\n+  #403 = NameAndType        #521:#522     // valueOf:(D)Ljava/lang/Double;\n+  #404 = Utf8               java/lang/NumberFormatException\n+  #405 = NameAndType        #521:#523     // valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n+  #406 = NameAndType        #524:#459     // isNaN:()Z\n+  #407 = NameAndType        #525:#459     // isInfinite:()Z\n+  #408 = Utf8               val [\n+  #409 = Utf8               ] is not a valid number.\n+  #410 = Utf8               java/math/BigInteger\n+  #411 = NameAndType        #526:#453     // bitLength:()I\n+  #412 = NameAndType        #521:#527     // valueOf:(I)Ljava/lang/Integer;\n+  #413 = NameAndType        #528:#529     // longValue:()J\n+  #414 = Class              #530          // java/lang/Long\n+  #415 = NameAndType        #521:#531     // valueOf:(J)Ljava/lang/Long;\n+  #416 = NameAndType        #473:#532     // indexOf:(I)I\n+  #417 = Utf8               -0\n+  #418 = NameAndType        #533:#229     // ORIGINAL:Lorg/json/XMLParserConfiguration;\n+  #419 = NameAndType        #263:#273     // toJSONObject:(Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #420 = NameAndType        #263:#270     // toJSONObject:(Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #421 = NameAndType        #534:#229     // KEEP_STRINGS:Lorg/json/XMLParserConfiguration;\n+  #422 = Utf8               org/json/XMLTokener\n+  #423 = NameAndType        #187:#535     // \"<init>\":(Ljava/io/Reader;)V\n+  #424 = NameAndType        #536:#459     // more:()Z\n+  #425 = Utf8               <\n+  #426 = Utf8               java/io/StringReader\n+  #427 = NameAndType        #263:#268     // toJSONObject:(Ljava/io/Reader;Z)Lorg/json/JSONObject;\n+  #428 = NameAndType        #274:#278     // toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n+  #429 = NameAndType        #274:#279     // toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;II)Ljava/lang/String;\n+  #430 = NameAndType        #286:#290     // indent:(I)Ljava/lang/String;\n+  #431 = Utf8               \\n\n+  #432 = NameAndType        #537:#505     // keySet:()Ljava/util/Set;\n+  #433 = NameAndType        #538:#539     // getClass:()Ljava/lang/Class;\n+  #434 = Class              #540          // java/lang/Class\n+  #435 = NameAndType        #541:#459     // isArray:()Z\n+  #436 = NameAndType        #187:#542     // \"<init>\":(Ljava/lang/Object;)V\n+  #437 = NameAndType        #512:#543     // opt:(I)Ljava/lang/Object;\n+  #438 = NameAndType        #199:#200     // escape:(Ljava/lang/String;)Ljava/lang/String;\n+  #439 = Utf8               </\n+  #440 = Utf8               />\n+  #441 = Utf8               array\n+  #442 = Utf8               \\\"\n+  #443 = Utf8               >\n+  #444 = NameAndType        #274:#289     // toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;I)Ljava/lang/String;\n+  #445 = NameAndType        #521:#544     // valueOf:(C)Ljava/lang/Character;\n+  #446 = NameAndType        #173:#174     // AMP:Ljava/lang/Character;\n+  #447 = NameAndType        #175:#174     // APOS:Ljava/lang/Character;\n+  #448 = NameAndType        #181:#174     // QUOT:Ljava/lang/Character;\n+  #449 = Utf8               java/lang/Object\n+  #450 = Utf8               java/util/Iterator\n+  #451 = Utf8               org/json/XMLParserConfiguration\n+  #452 = Utf8               java/lang/Double\n+  #453 = Utf8               ()I\n+  #454 = Utf8               (I)V\n+  #455 = Utf8               java/lang/Iterable\n+  #456 = Utf8               iterator\n+  #457 = Utf8               ()Ljava/util/Iterator;\n+  #458 = Utf8               hasNext\n+  #459 = Utf8               ()Z\n+  #460 = Utf8               next\n+  #461 = Utf8               ()Ljava/lang/Object;\n+  #462 = Utf8               intValue\n+  #463 = Utf8               append\n+  #464 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #465 = Utf8               toHexString\n+  #466 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #467 = Utf8               appendCodePoint\n+  #468 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #469 = Utf8               ()Ljava/lang/String;\n+  #470 = Utf8               isISOControl\n+  #471 = Utf8               charAt\n+  #472 = Utf8               (I)C\n+  #473 = Utf8               indexOf\n+  #474 = Utf8               (II)I\n+  #475 = Utf8               substring\n+  #476 = Utf8               (II)Ljava/lang/String;\n+  #477 = Utf8               unescapeEntity\n+  #478 = Utf8               isWhitespace\n+  #479 = Utf8               (C)Z\n+  #480 = Utf8               nextToken\n+  #481 = Utf8               ()C\n+  #482 = Utf8               skipPast\n+  #483 = Utf8               back\n+  #484 = Utf8               equals\n+  #485 = Utf8               (Ljava/lang/Object;)Z\n+  #486 = Utf8               nextCDATA\n+  #487 = Utf8               getcDataTagName\n+  #488 = Utf8               accumulate\n+  #489 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #490 = Utf8               syntaxError\n+  #491 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n+  #492 = Utf8               nextMeta\n+  #493 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #494 = Utf8               isConvertNilAttributeToNull\n+  #495 = Utf8               java/lang/Boolean\n+  #496 = Utf8               parseBoolean\n+  #497 = Utf8               getXsiTypeMap\n+  #498 = Utf8               ()Ljava/util/Map;\n+  #499 = Utf8               java/util/Map\n+  #500 = Utf8               isEmpty\n+  #501 = Utf8               get\n+  #502 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #503 = Utf8               isKeepStrings\n+  #504 = Utf8               getForceList\n+  #505 = Utf8               ()Ljava/util/Set;\n+  #506 = Utf8               java/util/Set\n+  #507 = Utf8               contains\n+  #508 = Utf8               NULL\n+  #509 = Utf8               put\n+  #510 = Utf8               nextContent\n+  #511 = Utf8               getMaxNestingDepth\n+  #512 = Utf8               opt\n+  #513 = Utf8               convert\n+  #514 = Utf8               equalsIgnoreCase\n+  #515 = Utf8               TRUE\n+  #516 = Utf8               Ljava/lang/Boolean;\n+  #517 = Utf8               FALSE\n+  #518 = Utf8               ZERO\n+  #519 = Utf8               compareTo\n+  #520 = Utf8               (Ljava/math/BigDecimal;)I\n+  #521 = Utf8               valueOf\n+  #522 = Utf8               (D)Ljava/lang/Double;\n+  #523 = Utf8               (Ljava/lang/String;)Ljava/lang/Double;\n+  #524 = Utf8               isNaN\n+  #525 = Utf8               isInfinite\n+  #526 = Utf8               bitLength\n+  #527 = Utf8               (I)Ljava/lang/Integer;\n+  #528 = Utf8               longValue\n+  #529 = Utf8               ()J\n+  #530 = Utf8               java/lang/Long\n+  #531 = Utf8               (J)Ljava/lang/Long;\n+  #532 = Utf8               (I)I\n+  #533 = Utf8               ORIGINAL\n+  #534 = Utf8               KEEP_STRINGS\n+  #535 = Utf8               (Ljava/io/Reader;)V\n+  #536 = Utf8               more\n+  #537 = Utf8               keySet\n+  #538 = Utf8               getClass\n+  #539 = Utf8               ()Ljava/lang/Class;\n+  #540 = Utf8               java/lang/Class\n+  #541 = Utf8               isArray\n+  #542 = Utf8               (Ljava/lang/Object;)V\n+  #543 = Utf8               (I)Ljava/lang/Object;\n+  #544 = Utf8               (C)Ljava/lang/Character;\n {\n   public static final java.lang.Character AMP;\n     descriptor: Ljava/lang/Character;\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n \n   public static final java.lang.Character APOS;\n     descriptor: Ljava/lang/Character;\n@@ -1536,16 +1522,17 @@\n         line 344: 417\n         line 345: 423\n         line 346: 429\n         line 347: 452\n         line 348: 458\n         line 349: 477\n         line 350: 482\n-        line 351: 487\n-        line 353: 506\n+        line 351: 486\n+        line 352: 493\n+        line 353: 501\n         line 350: 509\n         line 355: 513\n         line 357: 519\n         line 361: 532\n         line 363: 540\n         line 364: 550\n         line 366: 557\n@@ -1570,15 +1557,15 @@\n         line 396: 734\n         line 397: 741\n         line 398: 749\n         line 399: 754\n         line 400: 764\n         line 399: 767\n         line 402: 774\n-        line 403: 781\n+        line 403: 780\n         line 402: 797\n         line 407: 804\n         line 409: 812\n         line 410: 821\n         line 413: 853\n         line 414: 869\n         line 416: 883\n@@ -1733,15 +1720,15 @@\n             0      17     0 string   Ljava/lang/String;\n             0      17     1 typeConverter   Lorg/json/XMLXsiTypeConverter;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      17     1 typeConverter   Lorg/json/XMLXsiTypeConverter<*>;\n       StackMapTable: number_of_entries = 1\n         frame_type = 12 /* same */\n-    Signature: #249                         // (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter<*>;)Ljava/lang/Object;\n+    Signature: #243                         // (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter<*>;)Ljava/lang/Object;\n \n   public static java.lang.Object stringToValue(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/lang/Object;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=3, args_size=1\n          0: ldc           #86                 // String\n@@ -2807,14 +2794,16 @@\n         line 897: 648\n         line 901: 654\n         line 903: 672\n         line 904: 676\n         line 905: 724\n         line 906: 732\n         line 908: 779\n+        line 909: 827\n+        line 908: 844\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n           221      14    14   val   Ljava/lang/Object;\n           192      49    13     i   I\n           189      52    12 jaLength   I\n           182      62     6    ja   Lorg/json/JSONArray;\n           302      92    14   val   Ljava/lang/Object;\n@@ -3077,8 +3066,8 @@\n         line 40: 40\n         line 43: 48\n         line 46: 56\n         line 49: 64\n }\n SourceFile: \"XML.java\"\n InnerClasses:\n-  static #2;                              // class org/json/XML$1\n+  #2;                                     // class org/json/XML$1\n"}]}
