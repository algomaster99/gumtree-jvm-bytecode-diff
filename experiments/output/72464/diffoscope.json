{"diffoscope-json-version": 1, "source1": "first/ZstdCompressorInputStream.class", "source2": "second/ZstdCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,275 +1,275 @@\n-  SHA-256 checksum 6c492f5a475fc66ba028ad8cac25ae89e566e912191423e6552419f28f61459d\n+  SHA-256 checksum f2508df205d0bbe7e1e85aa612447e4acc0433fef4d0de14e4363815d6cbcc88\n   Compiled from \"ZstdCompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #15                         // org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream\n-  super_class: #2                         // org/apache/commons/compress/compressors/CompressorInputStream\n+  this_class: #1                          // org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream\n+  super_class: #3                         // org/apache/commons/compress/compressors/CompressorInputStream\n   interfaces: 1, fields: 2, methods: 13, attributes: 1\n Constant pool:\n-    #1 = Methodref          #2.#3         // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-    #2 = Class              #4            // org/apache/commons/compress/compressors/CompressorInputStream\n-    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #1 = Class              #2            // org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream\n+    #2 = Utf8               org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream\n+    #3 = Class              #4            // org/apache/commons/compress/compressors/CompressorInputStream\n     #4 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-    #5 = Utf8               <init>\n-    #6 = Utf8               ()V\n-    #7 = Class              #8            // com/github/luben/zstd/ZstdInputStream\n-    #8 = Utf8               com/github/luben/zstd/ZstdInputStream\n-    #9 = Class              #10           // org/apache/commons/compress/utils/CountingInputStream\n-   #10 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n-   #11 = Methodref          #9.#12        // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #12 = NameAndType        #5:#13        // \"<init>\":(Ljava/io/InputStream;)V\n-   #13 = Utf8               (Ljava/io/InputStream;)V\n-   #14 = Fieldref           #15.#16       // org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #15 = Class              #17           // org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream\n-   #16 = NameAndType        #18:#19       // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #17 = Utf8               org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream\n-   #18 = Utf8               countingStream\n-   #19 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #20 = Methodref          #7.#12        // com/github/luben/zstd/ZstdInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #21 = Fieldref           #15.#22       // org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream.decIS:Lcom/github/luben/zstd/ZstdInputStream;\n-   #22 = NameAndType        #23:#24       // decIS:Lcom/github/luben/zstd/ZstdInputStream;\n-   #23 = Utf8               decIS\n-   #24 = Utf8               Lcom/github/luben/zstd/ZstdInputStream;\n-   #25 = Methodref          #7.#26        // com/github/luben/zstd/ZstdInputStream.\"<init>\":(Ljava/io/InputStream;Lcom/github/luben/zstd/BufferPool;)V\n-   #26 = NameAndType        #5:#27        // \"<init>\":(Ljava/io/InputStream;Lcom/github/luben/zstd/BufferPool;)V\n-   #27 = Utf8               (Ljava/io/InputStream;Lcom/github/luben/zstd/BufferPool;)V\n-   #28 = Methodref          #7.#29        // com/github/luben/zstd/ZstdInputStream.available:()I\n-   #29 = NameAndType        #30:#31       // available:()I\n-   #30 = Utf8               available\n-   #31 = Utf8               ()I\n-   #32 = Methodref          #7.#33        // com/github/luben/zstd/ZstdInputStream.close:()V\n-   #33 = NameAndType        #34:#6        // close:()V\n-   #34 = Utf8               close\n-   #35 = Methodref          #15.#36       // org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream.read:([BII)I\n-   #36 = NameAndType        #37:#38       // read:([BII)I\n-   #37 = Utf8               read\n-   #38 = Utf8               ([BII)I\n-   #39 = Methodref          #40.#41       // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-   #40 = Class              #42           // org/apache/commons/compress/utils/IOUtils\n-   #41 = NameAndType        #43:#44       // skip:(Ljava/io/InputStream;J)J\n-   #42 = Utf8               org/apache/commons/compress/utils/IOUtils\n-   #43 = Utf8               skip\n-   #44 = Utf8               (Ljava/io/InputStream;J)J\n-   #45 = Methodref          #7.#46        // com/github/luben/zstd/ZstdInputStream.mark:(I)V\n-   #46 = NameAndType        #47:#48       // mark:(I)V\n-   #47 = Utf8               mark\n-   #48 = Utf8               (I)V\n-   #49 = Methodref          #7.#50        // com/github/luben/zstd/ZstdInputStream.markSupported:()Z\n-   #50 = NameAndType        #51:#52       // markSupported:()Z\n-   #51 = Utf8               markSupported\n-   #52 = Utf8               ()Z\n-   #53 = Methodref          #7.#54        // com/github/luben/zstd/ZstdInputStream.read:()I\n-   #54 = NameAndType        #37:#31       // read:()I\n-   #55 = Methodref          #15.#56       // org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream.count:(I)V\n-   #56 = NameAndType        #57:#48       // count:(I)V\n-   #57 = Utf8               count\n-   #58 = Methodref          #7.#36        // com/github/luben/zstd/ZstdInputStream.read:([BII)I\n-   #59 = Methodref          #60.#61       // java/lang/Object.toString:()Ljava/lang/String;\n-   #60 = Class              #62           // java/lang/Object\n-   #61 = NameAndType        #63:#64       // toString:()Ljava/lang/String;\n-   #62 = Utf8               java/lang/Object\n-   #63 = Utf8               toString\n-   #64 = Utf8               ()Ljava/lang/String;\n-   #65 = Methodref          #7.#66        // com/github/luben/zstd/ZstdInputStream.reset:()V\n-   #66 = NameAndType        #67:#6        // reset:()V\n-   #67 = Utf8               reset\n-   #68 = Methodref          #9.#69        // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n-   #69 = NameAndType        #70:#71       // getBytesRead:()J\n-   #70 = Utf8               getBytesRead\n-   #71 = Utf8               ()J\n-   #72 = Class              #73           // org/apache/commons/compress/utils/InputStreamStatistics\n-   #73 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-   #74 = Utf8               Code\n-   #75 = Utf8               LineNumberTable\n-   #76 = Utf8               LocalVariableTable\n-   #77 = Utf8               this\n-   #78 = Utf8               Lorg/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream;\n-   #79 = Utf8               in\n-   #80 = Utf8               Ljava/io/InputStream;\n-   #81 = Utf8               Exceptions\n-   #82 = Class              #83           // java/io/IOException\n-   #83 = Utf8               java/io/IOException\n-   #84 = Utf8               bufferPool\n-   #85 = Utf8               Lcom/github/luben/zstd/BufferPool;\n-   #86 = Utf8               ([B)I\n-   #87 = Utf8               b\n-   #88 = Utf8               [B\n-   #89 = Utf8               (J)J\n-   #90 = Utf8               n\n-   #91 = Utf8               J\n-   #92 = Utf8               readlimit\n-   #93 = Utf8               I\n-   #94 = Utf8               ret\n-   #95 = Utf8               StackMapTable\n-   #96 = Utf8               buf\n-   #97 = Utf8               off\n-   #98 = Utf8               len\n-   #99 = Utf8               getCompressedCount\n+    #5 = Class              #6            // org/apache/commons/compress/utils/InputStreamStatistics\n+    #6 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+    #7 = Utf8               countingStream\n+    #8 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n+    #9 = Utf8               decIS\n+   #10 = Utf8               Lcom/github/luben/zstd/ZstdInputStream;\n+   #11 = Utf8               <init>\n+   #12 = Utf8               (Ljava/io/InputStream;)V\n+   #13 = Utf8               Exceptions\n+   #14 = Class              #15           // java/io/IOException\n+   #15 = Utf8               java/io/IOException\n+   #16 = Utf8               Code\n+   #17 = Methodref          #3.#18        // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+   #18 = NameAndType        #11:#19       // \"<init>\":()V\n+   #19 = Utf8               ()V\n+   #20 = Class              #21           // com/github/luben/zstd/ZstdInputStream\n+   #21 = Utf8               com/github/luben/zstd/ZstdInputStream\n+   #22 = Class              #23           // org/apache/commons/compress/utils/CountingInputStream\n+   #23 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n+   #24 = Methodref          #22.#25       // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #25 = NameAndType        #11:#12       // \"<init>\":(Ljava/io/InputStream;)V\n+   #26 = Fieldref           #1.#27        // org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #27 = NameAndType        #7:#8         // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #28 = Methodref          #20.#25       // com/github/luben/zstd/ZstdInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #29 = Fieldref           #1.#30        // org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream.decIS:Lcom/github/luben/zstd/ZstdInputStream;\n+   #30 = NameAndType        #9:#10        // decIS:Lcom/github/luben/zstd/ZstdInputStream;\n+   #31 = Utf8               LineNumberTable\n+   #32 = Utf8               LocalVariableTable\n+   #33 = Utf8               this\n+   #34 = Utf8               Lorg/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream;\n+   #35 = Utf8               in\n+   #36 = Utf8               Ljava/io/InputStream;\n+   #37 = Utf8               (Ljava/io/InputStream;Lcom/github/luben/zstd/BufferPool;)V\n+   #38 = Methodref          #20.#39       // com/github/luben/zstd/ZstdInputStream.\"<init>\":(Ljava/io/InputStream;Lcom/github/luben/zstd/BufferPool;)V\n+   #39 = NameAndType        #11:#37       // \"<init>\":(Ljava/io/InputStream;Lcom/github/luben/zstd/BufferPool;)V\n+   #40 = Utf8               bufferPool\n+   #41 = Utf8               Lcom/github/luben/zstd/BufferPool;\n+   #42 = Utf8               available\n+   #43 = Utf8               ()I\n+   #44 = Methodref          #20.#45       // com/github/luben/zstd/ZstdInputStream.available:()I\n+   #45 = NameAndType        #42:#43       // available:()I\n+   #46 = Utf8               close\n+   #47 = Methodref          #20.#48       // com/github/luben/zstd/ZstdInputStream.close:()V\n+   #48 = NameAndType        #46:#19       // close:()V\n+   #49 = Utf8               read\n+   #50 = Utf8               ([B)I\n+   #51 = Methodref          #1.#52        // org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream.read:([BII)I\n+   #52 = NameAndType        #49:#53       // read:([BII)I\n+   #53 = Utf8               ([BII)I\n+   #54 = Utf8               b\n+   #55 = Utf8               [B\n+   #56 = Utf8               skip\n+   #57 = Utf8               (J)J\n+   #58 = Methodref          #59.#61       // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+   #59 = Class              #60           // org/apache/commons/compress/utils/IOUtils\n+   #60 = Utf8               org/apache/commons/compress/utils/IOUtils\n+   #61 = NameAndType        #56:#62       // skip:(Ljava/io/InputStream;J)J\n+   #62 = Utf8               (Ljava/io/InputStream;J)J\n+   #63 = Utf8               n\n+   #64 = Utf8               J\n+   #65 = Utf8               mark\n+   #66 = Utf8               (I)V\n+   #67 = Methodref          #20.#68       // com/github/luben/zstd/ZstdInputStream.mark:(I)V\n+   #68 = NameAndType        #65:#66       // mark:(I)V\n+   #69 = Utf8               readlimit\n+   #70 = Utf8               I\n+   #71 = Utf8               markSupported\n+   #72 = Utf8               ()Z\n+   #73 = Methodref          #20.#74       // com/github/luben/zstd/ZstdInputStream.markSupported:()Z\n+   #74 = NameAndType        #71:#72       // markSupported:()Z\n+   #75 = Methodref          #20.#76       // com/github/luben/zstd/ZstdInputStream.read:()I\n+   #76 = NameAndType        #49:#43       // read:()I\n+   #77 = Methodref          #1.#78        // org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream.count:(I)V\n+   #78 = NameAndType        #79:#66       // count:(I)V\n+   #79 = Utf8               count\n+   #80 = Utf8               ret\n+   #81 = Utf8               StackMapTable\n+   #82 = Methodref          #20.#52       // com/github/luben/zstd/ZstdInputStream.read:([BII)I\n+   #83 = Utf8               buf\n+   #84 = Utf8               off\n+   #85 = Utf8               len\n+   #86 = Utf8               toString\n+   #87 = Utf8               ()Ljava/lang/String;\n+   #88 = Methodref          #89.#91       // java/lang/Object.toString:()Ljava/lang/String;\n+   #89 = Class              #90           // java/lang/Object\n+   #90 = Utf8               java/lang/Object\n+   #91 = NameAndType        #86:#87       // toString:()Ljava/lang/String;\n+   #92 = Utf8               reset\n+   #93 = Methodref          #20.#94       // com/github/luben/zstd/ZstdInputStream.reset:()V\n+   #94 = NameAndType        #92:#19       // reset:()V\n+   #95 = Utf8               getCompressedCount\n+   #96 = Utf8               ()J\n+   #97 = Methodref          #22.#98       // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+   #98 = NameAndType        #99:#96       // getBytesRead:()J\n+   #99 = Utf8               getBytesRead\n   #100 = Utf8               SourceFile\n   #101 = Utf8               ZstdCompressorInputStream.java\n {\n   private final org.apache.commons.compress.utils.CountingInputStream countingStream;\n     descriptor: Lorg/apache/commons/compress/utils/CountingInputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final com.github.luben.zstd.ZstdInputStream decIS;\n     descriptor: Lcom/github/luben/zstd/ZstdInputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream(java.io.InputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=7, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #1                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+         1: invokespecial #17                 // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #7                  // class com/github/luben/zstd/ZstdInputStream\n+         5: new           #20                 // class com/github/luben/zstd/ZstdInputStream\n          8: dup\n          9: aload_0\n-        10: new           #9                  // class org/apache/commons/compress/utils/CountingInputStream\n+        10: new           #22                 // class org/apache/commons/compress/utils/CountingInputStream\n         13: dup\n         14: aload_1\n-        15: invokespecial #11                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        15: invokespecial #24                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n         18: dup_x1\n-        19: putfield      #14                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-        22: invokespecial #20                 // Method com/github/luben/zstd/ZstdInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-        25: putfield      #21                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n+        19: putfield      #26                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        22: invokespecial #28                 // Method com/github/luben/zstd/ZstdInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        25: putfield      #29                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n         28: return\n       LineNumberTable:\n         line 44: 0\n         line 45: 4\n         line 46: 28\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      29     0  this   Lorg/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream;\n             0      29     1    in   Ljava/io/InputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream(java.io.InputStream, com.github.luben.zstd.BufferPool) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;Lcom/github/luben/zstd/BufferPool;)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=7, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #1                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+         1: invokespecial #17                 // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #7                  // class com/github/luben/zstd/ZstdInputStream\n+         5: new           #20                 // class com/github/luben/zstd/ZstdInputStream\n          8: dup\n          9: aload_0\n-        10: new           #9                  // class org/apache/commons/compress/utils/CountingInputStream\n+        10: new           #22                 // class org/apache/commons/compress/utils/CountingInputStream\n         13: dup\n         14: aload_1\n-        15: invokespecial #11                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        15: invokespecial #24                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n         18: dup_x1\n-        19: putfield      #14                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        19: putfield      #26                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         22: aload_2\n-        23: invokespecial #25                 // Method com/github/luben/zstd/ZstdInputStream.\"<init>\":(Ljava/io/InputStream;Lcom/github/luben/zstd/BufferPool;)V\n-        26: putfield      #21                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n+        23: invokespecial #38                 // Method com/github/luben/zstd/ZstdInputStream.\"<init>\":(Ljava/io/InputStream;Lcom/github/luben/zstd/BufferPool;)V\n+        26: putfield      #29                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n         29: return\n       LineNumberTable:\n         line 60: 0\n         line 61: 4\n         line 62: 29\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      30     0  this   Lorg/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream;\n             0      30     1    in   Ljava/io/InputStream;\n             0      30     2 bufferPool   Lcom/github/luben/zstd/BufferPool;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #21                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n-         4: invokevirtual #28                 // Method com/github/luben/zstd/ZstdInputStream.available:()I\n+         1: getfield      #29                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n+         4: invokevirtual #44                 // Method com/github/luben/zstd/ZstdInputStream.available:()I\n          7: ireturn\n       LineNumberTable:\n         line 66: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #21                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n-         4: invokevirtual #32                 // Method com/github/luben/zstd/ZstdInputStream.close:()V\n+         1: getfield      #29                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n+         4: invokevirtual #47                 // Method com/github/luben/zstd/ZstdInputStream.close:()V\n          7: return\n       LineNumberTable:\n         line 71: 0\n         line 72: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int read(byte[]) throws java.io.IOException;\n     descriptor: ([B)I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n          3: aload_1\n          4: arraylength\n-         5: invokevirtual #35                 // Method read:([BII)I\n+         5: invokevirtual #51                 // Method read:([BII)I\n          8: ireturn\n       LineNumberTable:\n         line 76: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream;\n             0       9     1     b   [B\n-    Exceptions:\n-      throws java.io.IOException\n \n   public long skip(long) throws java.io.IOException;\n     descriptor: (J)J\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #21                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n+         1: getfield      #29                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n          4: lload_1\n-         5: invokestatic  #39                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+         5: invokestatic  #58                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n          8: lreturn\n       LineNumberTable:\n         line 81: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream;\n             0       9     1     n   J\n-    Exceptions:\n-      throws java.io.IOException\n \n   public synchronized void mark(int);\n     descriptor: (I)V\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #21                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n+         1: getfield      #29                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n          4: iload_1\n-         5: invokevirtual #45                 // Method com/github/luben/zstd/ZstdInputStream.mark:(I)V\n+         5: invokevirtual #67                 // Method com/github/luben/zstd/ZstdInputStream.mark:(I)V\n          8: return\n       LineNumberTable:\n         line 86: 0\n         line 87: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream;\n@@ -277,40 +277,42 @@\n \n   public boolean markSupported();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #21                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n-         4: invokevirtual #49                 // Method com/github/luben/zstd/ZstdInputStream.markSupported:()Z\n+         1: getfield      #29                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n+         4: invokevirtual #73                 // Method com/github/luben/zstd/ZstdInputStream.markSupported:()Z\n          7: ireturn\n       LineNumberTable:\n         line 91: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream;\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #21                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n-         4: invokevirtual #53                 // Method com/github/luben/zstd/ZstdInputStream.read:()I\n+         1: getfield      #29                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n+         4: invokevirtual #75                 // Method com/github/luben/zstd/ZstdInputStream.read:()I\n          7: istore_1\n          8: aload_0\n          9: iload_1\n         10: iconst_m1\n         11: if_icmpne     18\n         14: iconst_0\n         15: goto          19\n         18: iconst_1\n-        19: invokevirtual #55                 // Method count:(I)V\n+        19: invokevirtual #77                 // Method count:(I)V\n         22: iload_1\n         23: ireturn\n       LineNumberTable:\n         line 96: 0\n         line 97: 8\n         line 98: 22\n       LocalVariableTable:\n@@ -322,36 +324,36 @@\n           offset_delta = 18\n           locals = [ class org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream, int ]\n           stack = [ class org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 0\n           locals = [ class org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream, int ]\n           stack = [ class org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream, int ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int read(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=5, args_size=4\n          0: iload_3\n          1: ifne          6\n          4: iconst_0\n          5: ireturn\n          6: aload_0\n-         7: getfield      #21                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n+         7: getfield      #29                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n         10: aload_1\n         11: iload_2\n         12: iload_3\n-        13: invokevirtual #58                 // Method com/github/luben/zstd/ZstdInputStream.read:([BII)I\n+        13: invokevirtual #82                 // Method com/github/luben/zstd/ZstdInputStream.read:([BII)I\n         16: istore        4\n         18: aload_0\n         19: iload         4\n-        21: invokevirtual #55                 // Method count:(I)V\n+        21: invokevirtual #77                 // Method count:(I)V\n         24: iload         4\n         26: ireturn\n       LineNumberTable:\n         line 103: 0\n         line 104: 4\n         line 106: 6\n         line 107: 18\n@@ -361,58 +363,56 @@\n             0      27     0  this   Lorg/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream;\n             0      27     1   buf   [B\n             0      27     2   off   I\n             0      27     3   len   I\n            18       9     4   ret   I\n       StackMapTable: number_of_entries = 1\n         frame_type = 6 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #21                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n-         4: invokevirtual #59                 // Method java/lang/Object.toString:()Ljava/lang/String;\n+         1: getfield      #29                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n+         4: invokevirtual #88                 // Method java/lang/Object.toString:()Ljava/lang/String;\n          7: areturn\n       LineNumberTable:\n         line 113: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream;\n \n   public synchronized void reset() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #21                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n-         4: invokevirtual #65                 // Method com/github/luben/zstd/ZstdInputStream.reset:()V\n+         1: getfield      #29                 // Field decIS:Lcom/github/luben/zstd/ZstdInputStream;\n+         4: invokevirtual #93                 // Method com/github/luben/zstd/ZstdInputStream.reset:()V\n          7: return\n       LineNumberTable:\n         line 118: 0\n         line 119: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #14                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-         4: invokevirtual #68                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+         1: getfield      #26                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+         4: invokevirtual #97                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n          7: lreturn\n       LineNumberTable:\n         line 126: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream;\n }\n"}]}
