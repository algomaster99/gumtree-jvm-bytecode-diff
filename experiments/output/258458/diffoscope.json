{"diffoscope-json-version": 1, "source1": "first/ConfigurationNodePointer.class", "source2": "second/ConfigurationNodePointer.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,16 +18,16 @@\n     \n     public ConfigurationNodePointer(final T node, final Locale locale, final NodeHandler<T> handler) {\n         super((NodePointer)null, locale);\n         this.node = node;\n         this.handler = handler;\n     }\n     \n-    public ConfigurationNodePointer(final ConfigurationNodePointer<T> parent, final T node, final NodeHandler<T> handler) {\n-        super((NodePointer)parent);\n+    public ConfigurationNodePointer(final ConfigurationNodePointer<T> configurationNodePointer, final T node, final NodeHandler<T> handler) {\n+        super((NodePointer)configurationNodePointer);\n         this.node = node;\n         this.handler = handler;\n     }\n     \n     public boolean isLeaf() {\n         return this.getNodeHandler().getChildrenCount((Object)this.node, (String)null) < 1;\n     }\n@@ -56,50 +56,49 @@\n         return this.node;\n     }\n     \n     public Object getValue() {\n         return this.getNodeHandler().getValue((Object)this.node);\n     }\n     \n-    public void setValue(final Object value) {\n+    public void setValue(final Object o) {\n         throw new UnsupportedOperationException(\"Node value cannot be set!\");\n     }\n     \n-    public int compareChildNodePointers(final NodePointer pointer1, final NodePointer pointer2) {\n-        final Object node1 = pointer1.getBaseValue();\n-        final Object node2 = pointer2.getBaseValue();\n-        for (final T child : this.getNodeHandler().getChildren((Object)this.node)) {\n-            if (child == node1) {\n+    public int compareChildNodePointers(final NodePointer nodePointer, final NodePointer nodePointer2) {\n+        final Object baseValue = nodePointer.getBaseValue();\n+        final Object baseValue2 = nodePointer2.getBaseValue();\n+        for (final Object next : this.getNodeHandler().getChildren((Object)this.node)) {\n+            if (next == baseValue) {\n                 return -1;\n             }\n-            if (child == node2) {\n+            if (next == baseValue2) {\n                 return 1;\n             }\n         }\n         return 0;\n     }\n     \n-    public NodeIterator attributeIterator(final QName name) {\n-        return (NodeIterator)new ConfigurationNodeIteratorAttribute(this, name);\n+    public NodeIterator attributeIterator(final QName qName) {\n+        return (NodeIterator)new ConfigurationNodeIteratorAttribute(this, qName);\n     }\n     \n-    public NodeIterator childIterator(final NodeTest test, final boolean reverse, final NodePointer startWith) {\n-        return (NodeIterator)new ConfigurationNodeIteratorChildren(this, test, reverse, (ConfigurationNodePointer)this.castPointer(startWith));\n+    public NodeIterator childIterator(final NodeTest nodeTest, final boolean b, final NodePointer nodePointer) {\n+        return (NodeIterator)new ConfigurationNodeIteratorChildren(this, nodeTest, b, (ConfigurationNodePointer)this.castPointer(nodePointer));\n     }\n     \n-    public boolean testNode(final NodeTest test) {\n-        return (test instanceof NodeTypeTest && ((NodeTypeTest)test).getNodeType() == 2) || super.testNode(test);\n+    public boolean testNode(final NodeTest nodeTest) {\n+        return (nodeTest instanceof NodeTypeTest && ((NodeTypeTest)nodeTest).getNodeType() == 2) || super.testNode(nodeTest);\n     }\n     \n     public NodeHandler<T> getNodeHandler() {\n         return this.handler;\n     }\n     \n     public T getConfigurationNode() {\n         return this.node;\n     }\n     \n-    private ConfigurationNodePointer<T> castPointer(final NodePointer p) {\n-        final ConfigurationNodePointer<T> result = (ConfigurationNodePointer)p;\n-        return result;\n+    private ConfigurationNodePointer<T> castPointer(final NodePointer nodePointer) {\n+        return (ConfigurationNodePointer)nodePointer;\n     }\n }\n"}]}
