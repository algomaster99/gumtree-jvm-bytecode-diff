{"diffoscope-json-version": 1, "source1": "first/Charsets.class", "source2": "second/Charsets.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,15 +1,15 @@\n \n package org.apache.commons.io;\n \n+import java.nio.charset.UnsupportedCharsetException;\n import java.util.Collections;\n import java.nio.charset.StandardCharsets;\n import java.util.Comparator;\n import java.util.TreeMap;\n-import java.nio.charset.UnsupportedCharsetException;\n import java.nio.charset.Charset;\n import java.util.SortedMap;\n \n public class Charsets\n {\n     private static final SortedMap<String, Charset> STANDARD_CHARSET_MAP;\n     @Deprecated\n@@ -21,14 +21,31 @@\n     @Deprecated\n     public static final Charset UTF_16BE;\n     @Deprecated\n     public static final Charset UTF_16LE;\n     @Deprecated\n     public static final Charset UTF_8;\n     \n+    static {\n+        final SortedMap<String, Charset> standardCharsetMap = new TreeMap<String, Charset>(String.CASE_INSENSITIVE_ORDER);\n+        standardCharsetMap.put(StandardCharsets.ISO_8859_1.name(), StandardCharsets.ISO_8859_1);\n+        standardCharsetMap.put(StandardCharsets.US_ASCII.name(), StandardCharsets.US_ASCII);\n+        standardCharsetMap.put(StandardCharsets.UTF_16.name(), StandardCharsets.UTF_16);\n+        standardCharsetMap.put(StandardCharsets.UTF_16BE.name(), StandardCharsets.UTF_16BE);\n+        standardCharsetMap.put(StandardCharsets.UTF_16LE.name(), StandardCharsets.UTF_16LE);\n+        standardCharsetMap.put(StandardCharsets.UTF_8.name(), StandardCharsets.UTF_8);\n+        STANDARD_CHARSET_MAP = Collections.unmodifiableSortedMap((SortedMap<String, ? extends Charset>)standardCharsetMap);\n+        ISO_8859_1 = StandardCharsets.ISO_8859_1;\n+        US_ASCII = StandardCharsets.US_ASCII;\n+        UTF_16 = StandardCharsets.UTF_16;\n+        UTF_16BE = StandardCharsets.UTF_16BE;\n+        UTF_16LE = StandardCharsets.UTF_16LE;\n+        UTF_8 = StandardCharsets.UTF_8;\n+    }\n+    \n     public static SortedMap<String, Charset> requiredCharsets() {\n         return Charsets.STANDARD_CHARSET_MAP;\n     }\n     \n     public static Charset toCharset(final Charset charset) {\n         return (charset == null) ? Charset.defaultCharset() : charset;\n     }\n@@ -40,25 +57,8 @@\n     public static Charset toCharset(final String charsetName) throws UnsupportedCharsetException {\n         return toCharset(charsetName, Charset.defaultCharset());\n     }\n     \n     public static Charset toCharset(final String charsetName, final Charset defaultCharset) throws UnsupportedCharsetException {\n         return (charsetName == null) ? defaultCharset : Charset.forName(charsetName);\n     }\n-    \n-    static {\n-        final SortedMap<String, Charset> standardCharsetMap = new TreeMap<String, Charset>(String.CASE_INSENSITIVE_ORDER);\n-        standardCharsetMap.put(StandardCharsets.ISO_8859_1.name(), StandardCharsets.ISO_8859_1);\n-        standardCharsetMap.put(StandardCharsets.US_ASCII.name(), StandardCharsets.US_ASCII);\n-        standardCharsetMap.put(StandardCharsets.UTF_16.name(), StandardCharsets.UTF_16);\n-        standardCharsetMap.put(StandardCharsets.UTF_16BE.name(), StandardCharsets.UTF_16BE);\n-        standardCharsetMap.put(StandardCharsets.UTF_16LE.name(), StandardCharsets.UTF_16LE);\n-        standardCharsetMap.put(StandardCharsets.UTF_8.name(), StandardCharsets.UTF_8);\n-        STANDARD_CHARSET_MAP = Collections.unmodifiableSortedMap((SortedMap<String, ? extends Charset>)standardCharsetMap);\n-        ISO_8859_1 = StandardCharsets.ISO_8859_1;\n-        US_ASCII = StandardCharsets.US_ASCII;\n-        UTF_16 = StandardCharsets.UTF_16;\n-        UTF_16BE = StandardCharsets.UTF_16BE;\n-        UTF_16LE = StandardCharsets.UTF_16LE;\n-        UTF_8 = StandardCharsets.UTF_8;\n-    }\n }\n"}]}
