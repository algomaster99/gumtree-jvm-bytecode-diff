{"diffoscope-json-version": 1, "source1": "first/DoubleBitsFromCharArray.class", "source2": "second/DoubleBitsFromCharArray.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,86 +1,86 @@\n-  SHA-256 checksum 9a89235fc1d4bcb5ff1fee55a82f81726c51356675df4cb0dcca7ac95469a0c2\n+  SHA-256 checksum a4d5ae2a0f417b384533929e893ef833f8b8e41e42cc701a75e67ae4b59a8c12\n   Compiled from \"DoubleBitsFromCharArray.java\"\n final class com.fasterxml.jackson.core.io.doubleparser.DoubleBitsFromCharArray extends com.fasterxml.jackson.core.io.doubleparser.AbstractFloatingPointBitsFromCharArray\n   minor version: 0\n   major version: 52\n   flags: (0x0030) ACC_FINAL, ACC_SUPER\n-  this_class: #16                         // com/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharArray\n-  super_class: #17                        // com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharArray\n+  this_class: #42                         // com/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharArray\n+  super_class: #2                         // com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharArray\n   interfaces: 0, fields: 0, methods: 6, attributes: 1\n Constant pool:\n-   #1 = Methodref          #17.#49        // com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharArray.\"<init>\":()V\n-   #2 = Class              #50            // java/lang/Double\n-   #3 = Double             NaNd\n-   #5 = Methodref          #2.#51         // java/lang/Double.doubleToRawLongBits:(D)J\n-   #6 = Double             -Infinityd\n-   #8 = Double             Infinityd\n-  #10 = Methodref          #52.#53        // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryDecFloatToDoubleTruncated:(ZJIZI)D\n-  #11 = Methodref          #2.#54         // java/lang/Double.isNaN:(D)Z\n-  #12 = Class              #55            // java/lang/String\n-  #13 = Methodref          #12.#56        // java/lang/String.\"<init>\":([CII)V\n-  #14 = Methodref          #2.#57         // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n-  #15 = Methodref          #52.#58        // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryHexFloatToDoubleTruncated:(ZJJZJ)D\n-  #16 = Class              #59            // com/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharArray\n-  #17 = Class              #60            // com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharArray\n-  #18 = Utf8               <init>\n-  #19 = Utf8               ()V\n-  #20 = Utf8               Code\n-  #21 = Utf8               LineNumberTable\n-  #22 = Utf8               LocalVariableTable\n-  #23 = Utf8               this\n-  #24 = Utf8               Lcom/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharArray;\n-  #25 = Utf8               nan\n-  #26 = Utf8               ()J\n-  #27 = Utf8               negativeInfinity\n-  #28 = Utf8               positiveInfinity\n-  #29 = Utf8               valueOfFloatLiteral\n-  #30 = Utf8               ([CIIZJIZI)J\n-  #31 = Utf8               str\n-  #32 = Utf8               [C\n-  #33 = Utf8               startIndex\n-  #34 = Utf8               I\n-  #35 = Utf8               endIndex\n-  #36 = Utf8               isNegative\n-  #37 = Utf8               Z\n-  #38 = Utf8               significand\n-  #39 = Utf8               J\n-  #40 = Utf8               exponent\n-  #41 = Utf8               isSignificandTruncated\n-  #42 = Utf8               exponentOfTruncatedSignificand\n-  #43 = Utf8               d\n-  #44 = Utf8               D\n-  #45 = Utf8               StackMapTable\n-  #46 = Utf8               valueOfHexLiteral\n-  #47 = Utf8               SourceFile\n-  #48 = Utf8               DoubleBitsFromCharArray.java\n-  #49 = NameAndType        #18:#19        // \"<init>\":()V\n-  #50 = Utf8               java/lang/Double\n-  #51 = NameAndType        #61:#62        // doubleToRawLongBits:(D)J\n-  #52 = Class              #63            // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n-  #53 = NameAndType        #64:#65        // tryDecFloatToDoubleTruncated:(ZJIZI)D\n-  #54 = NameAndType        #66:#67        // isNaN:(D)Z\n-  #55 = Utf8               java/lang/String\n-  #56 = NameAndType        #18:#68        // \"<init>\":([CII)V\n-  #57 = NameAndType        #69:#70        // parseDouble:(Ljava/lang/String;)D\n-  #58 = NameAndType        #71:#72        // tryHexFloatToDoubleTruncated:(ZJJZJ)D\n-  #59 = Utf8               com/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharArray\n-  #60 = Utf8               com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharArray\n-  #61 = Utf8               doubleToRawLongBits\n-  #62 = Utf8               (D)J\n-  #63 = Utf8               com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n-  #64 = Utf8               tryDecFloatToDoubleTruncated\n-  #65 = Utf8               (ZJIZI)D\n-  #66 = Utf8               isNaN\n-  #67 = Utf8               (D)Z\n-  #68 = Utf8               ([CII)V\n-  #69 = Utf8               parseDouble\n-  #70 = Utf8               (Ljava/lang/String;)D\n-  #71 = Utf8               tryHexFloatToDoubleTruncated\n-  #72 = Utf8               (ZJJZJ)D\n+   #1 = Methodref          #2.#3          // com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharArray.\"<init>\":()V\n+   #2 = Class              #4             // com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharArray\n+   #3 = NameAndType        #5:#6          // \"<init>\":()V\n+   #4 = Utf8               com/fasterxml/jackson/core/io/doubleparser/AbstractFloatingPointBitsFromCharArray\n+   #5 = Utf8               <init>\n+   #6 = Utf8               ()V\n+   #7 = Class              #8             // java/lang/Double\n+   #8 = Utf8               java/lang/Double\n+   #9 = Double             NaNd\n+  #11 = Methodref          #7.#12         // java/lang/Double.doubleToRawLongBits:(D)J\n+  #12 = NameAndType        #13:#14        // doubleToRawLongBits:(D)J\n+  #13 = Utf8               doubleToRawLongBits\n+  #14 = Utf8               (D)J\n+  #15 = Double             -Infinityd\n+  #17 = Double             Infinityd\n+  #19 = Methodref          #20.#21        // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryDecFloatToDoubleTruncated:(ZJIZI)D\n+  #20 = Class              #22            // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n+  #21 = NameAndType        #23:#24        // tryDecFloatToDoubleTruncated:(ZJIZI)D\n+  #22 = Utf8               com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n+  #23 = Utf8               tryDecFloatToDoubleTruncated\n+  #24 = Utf8               (ZJIZI)D\n+  #25 = Methodref          #7.#26         // java/lang/Double.isNaN:(D)Z\n+  #26 = NameAndType        #27:#28        // isNaN:(D)Z\n+  #27 = Utf8               isNaN\n+  #28 = Utf8               (D)Z\n+  #29 = Class              #30            // java/lang/String\n+  #30 = Utf8               java/lang/String\n+  #31 = Methodref          #29.#32        // java/lang/String.\"<init>\":([CII)V\n+  #32 = NameAndType        #5:#33         // \"<init>\":([CII)V\n+  #33 = Utf8               ([CII)V\n+  #34 = Methodref          #7.#35         // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n+  #35 = NameAndType        #36:#37        // parseDouble:(Ljava/lang/String;)D\n+  #36 = Utf8               parseDouble\n+  #37 = Utf8               (Ljava/lang/String;)D\n+  #38 = Methodref          #20.#39        // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryHexFloatToDoubleTruncated:(ZJJZJ)D\n+  #39 = NameAndType        #40:#41        // tryHexFloatToDoubleTruncated:(ZJJZJ)D\n+  #40 = Utf8               tryHexFloatToDoubleTruncated\n+  #41 = Utf8               (ZJJZJ)D\n+  #42 = Class              #43            // com/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharArray\n+  #43 = Utf8               com/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharArray\n+  #44 = Utf8               Code\n+  #45 = Utf8               LineNumberTable\n+  #46 = Utf8               LocalVariableTable\n+  #47 = Utf8               this\n+  #48 = Utf8               Lcom/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharArray;\n+  #49 = Utf8               nan\n+  #50 = Utf8               ()J\n+  #51 = Utf8               negativeInfinity\n+  #52 = Utf8               positiveInfinity\n+  #53 = Utf8               valueOfFloatLiteral\n+  #54 = Utf8               ([CIIZJIZI)J\n+  #55 = Utf8               str\n+  #56 = Utf8               [C\n+  #57 = Utf8               startIndex\n+  #58 = Utf8               I\n+  #59 = Utf8               endIndex\n+  #60 = Utf8               isNegative\n+  #61 = Utf8               Z\n+  #62 = Utf8               significand\n+  #63 = Utf8               J\n+  #64 = Utf8               exponent\n+  #65 = Utf8               isSignificandTruncated\n+  #66 = Utf8               exponentOfTruncatedSignificand\n+  #67 = Utf8               d\n+  #68 = Utf8               D\n+  #69 = Utf8               StackMapTable\n+  #70 = Utf8               valueOfHexLiteral\n+  #71 = Utf8               SourceFile\n+  #72 = Utf8               DoubleBitsFromCharArray.java\n {\n   public com.fasterxml.jackson.core.io.doubleparser.DoubleBitsFromCharArray();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -94,44 +94,44 @@\n             0       5     0  this   Lcom/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharArray;\n \n   long nan();\n     descriptor: ()J\n     flags: (0x0000)\n     Code:\n       stack=2, locals=1, args_size=1\n-         0: ldc2_w        #3                  // double NaNd\n-         3: invokestatic  #5                  // Method java/lang/Double.doubleToRawLongBits:(D)J\n+         0: ldc2_w        #9                  // double NaNd\n+         3: invokestatic  #11                 // Method java/lang/Double.doubleToRawLongBits:(D)J\n          6: lreturn\n       LineNumberTable:\n         line 27: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lcom/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharArray;\n \n   long negativeInfinity();\n     descriptor: ()J\n     flags: (0x0000)\n     Code:\n       stack=2, locals=1, args_size=1\n-         0: ldc2_w        #6                  // double -Infinityd\n-         3: invokestatic  #5                  // Method java/lang/Double.doubleToRawLongBits:(D)J\n+         0: ldc2_w        #15                 // double -Infinityd\n+         3: invokestatic  #11                 // Method java/lang/Double.doubleToRawLongBits:(D)J\n          6: lreturn\n       LineNumberTable:\n         line 32: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lcom/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharArray;\n \n   long positiveInfinity();\n     descriptor: ()J\n     flags: (0x0000)\n     Code:\n       stack=2, locals=1, args_size=1\n-         0: ldc2_w        #8                  // double Infinityd\n-         3: invokestatic  #5                  // Method java/lang/Double.doubleToRawLongBits:(D)J\n+         0: ldc2_w        #17                 // double Infinityd\n+         3: invokestatic  #11                 // Method java/lang/Double.doubleToRawLongBits:(D)J\n          6: lreturn\n       LineNumberTable:\n         line 37: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lcom/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharArray;\n \n@@ -141,31 +141,31 @@\n     Code:\n       stack=6, locals=12, args_size=9\n          0: iload         4\n          2: lload         5\n          4: iload         7\n          6: iload         8\n          8: iload         9\n-        10: invokestatic  #10                 // Method com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryDecFloatToDoubleTruncated:(ZJIZI)D\n+        10: invokestatic  #19                 // Method com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryDecFloatToDoubleTruncated:(ZJIZI)D\n         13: dstore        10\n         15: dload         10\n-        17: invokestatic  #11                 // Method java/lang/Double.isNaN:(D)Z\n+        17: invokestatic  #25                 // Method java/lang/Double.isNaN:(D)Z\n         20: ifeq          41\n-        23: new           #12                 // class java/lang/String\n+        23: new           #29                 // class java/lang/String\n         26: dup\n         27: aload_1\n         28: iload_2\n         29: iload_3\n         30: iload_2\n         31: isub\n-        32: invokespecial #13                 // Method java/lang/String.\"<init>\":([CII)V\n-        35: invokestatic  #14                 // Method java/lang/Double.parseDouble:(Ljava/lang/String;)D\n+        32: invokespecial #31                 // Method java/lang/String.\"<init>\":([CII)V\n+        35: invokestatic  #34                 // Method java/lang/Double.parseDouble:(Ljava/lang/String;)D\n         38: goto          43\n         41: dload         10\n-        43: invokestatic  #5                  // Method java/lang/Double.doubleToRawLongBits:(D)J\n+        43: invokestatic  #11                 // Method java/lang/Double.doubleToRawLongBits:(D)J\n         46: lreturn\n       LineNumberTable:\n         line 44: 0\n         line 46: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      47     0  this   Lcom/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharArray;\n@@ -193,31 +193,31 @@\n          0: iload         4\n          2: lload         5\n          4: iload         7\n          6: i2l\n          7: iload         8\n          9: iload         9\n         11: i2l\n-        12: invokestatic  #15                 // Method com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryHexFloatToDoubleTruncated:(ZJJZJ)D\n+        12: invokestatic  #38                 // Method com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryHexFloatToDoubleTruncated:(ZJJZJ)D\n         15: dstore        10\n         17: dload         10\n-        19: invokestatic  #11                 // Method java/lang/Double.isNaN:(D)Z\n+        19: invokestatic  #25                 // Method java/lang/Double.isNaN:(D)Z\n         22: ifeq          43\n-        25: new           #12                 // class java/lang/String\n+        25: new           #29                 // class java/lang/String\n         28: dup\n         29: aload_1\n         30: iload_2\n         31: iload_3\n         32: iload_2\n         33: isub\n-        34: invokespecial #13                 // Method java/lang/String.\"<init>\":([CII)V\n-        37: invokestatic  #14                 // Method java/lang/Double.parseDouble:(Ljava/lang/String;)D\n+        34: invokespecial #31                 // Method java/lang/String.\"<init>\":([CII)V\n+        37: invokestatic  #34                 // Method java/lang/Double.parseDouble:(Ljava/lang/String;)D\n         40: goto          45\n         43: dload         10\n-        45: invokestatic  #5                  // Method java/lang/Double.doubleToRawLongBits:(D)J\n+        45: invokestatic  #11                 // Method java/lang/Double.doubleToRawLongBits:(D)J\n         48: lreturn\n       LineNumberTable:\n         line 53: 0\n         line 55: 17\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      49     0  this   Lcom/fasterxml/jackson/core/io/doubleparser/DoubleBitsFromCharArray;\n"}]}
