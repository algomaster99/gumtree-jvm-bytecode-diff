{"diffoscope-json-version": 1, "source1": "first/JavaAstVisitor.class", "source2": "second/JavaAstVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -599,15 +599,15 @@\n         root.addChild((DetailAST)this.visit((ParseTree)ctx.arguments()));\n         root.addChild((DetailAST)this.create(ctx.SEMI()));\n         return root;\n     }\n     \n     public DetailAstImpl visitPrimaryCtorCall(final JavaLanguageParser.PrimaryCtorCallContext ctx) {\n         final DetailAstImpl primaryCtorCall = this.create(42, (Token)ctx.LITERAL_SUPER().getPayload());\n-        this.processChildren(primaryCtorCall, (List<? extends ParseTree>)ctx.children.stream().filter(child -> !child.equals(ctx.LITERAL_SUPER())).collect(Collectors.toList()));\n+        this.processChildren(primaryCtorCall, (List<? extends ParseTree>)ctx.children.stream().filter(child -> !child.equals((Object)ctx.LITERAL_SUPER())).collect(Collectors.toList()));\n         return primaryCtorCall;\n     }\n     \n     public DetailAstImpl visitBlock(final JavaLanguageParser.BlockContext ctx) {\n         final DetailAstImpl slist = this.create(7, ctx.start);\n         this.processChildren(slist, ctx.children.subList(1, ctx.children.size()));\n         return slist;\n@@ -1114,22 +1114,22 @@\n         }\n         postfix.addChild((DetailAST)this.visit((ParseTree)ctx.expr()));\n         return postfix;\n     }\n     \n     public DetailAstImpl visitMethodRef(final JavaLanguageParser.MethodRefContext ctx) {\n         final DetailAstImpl doubleColon = this.create(180, (Token)ctx.DOUBLE_COLON().getPayload());\n-        final List<ParseTree> children = (List)ctx.children.stream().filter(child -> !child.equals(ctx.DOUBLE_COLON())).collect(Collectors.toList());\n+        final List<ParseTree> children = (List)ctx.children.stream().filter(child -> !child.equals((Object)ctx.DOUBLE_COLON())).collect(Collectors.toList());\n         this.processChildren(doubleColon, children);\n         return doubleColon;\n     }\n     \n     public DetailAstImpl visitTernaryOp(final JavaLanguageParser.TernaryOpContext ctx) {\n         final DetailAstImpl root = this.create(ctx.QUESTION());\n-        this.processChildren(root, (List<? extends ParseTree>)ctx.children.stream().filter(child -> !child.equals(ctx.QUESTION())).collect(Collectors.toList()));\n+        this.processChildren(root, (List<? extends ParseTree>)ctx.children.stream().filter(child -> !child.equals((Object)ctx.QUESTION())).collect(Collectors.toList()));\n         return root;\n     }\n     \n     public DetailAstImpl visitBinOp(final JavaLanguageParser.BinOpContext ctx) {\n         final DetailAstImpl bop = this.create(ctx.bop);\n         final List<JavaLanguageParser.BinOpContext> binOpList = new ArrayList<JavaLanguageParser.BinOpContext>();\n         for (ParseTree firstExpression = (ParseTree)ctx.expr(0); firstExpression instanceof JavaLanguageParser.BinOpContext; firstExpression = (ParseTree)((JavaLanguageParser.BinOpContext)firstExpression).expr(0)) {\n"}]}
