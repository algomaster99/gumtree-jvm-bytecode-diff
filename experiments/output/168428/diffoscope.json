{"diffoscope-json-version": 1, "source1": "first/Functions.class", "source2": "second/Functions.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,16 +1,16 @@\n \n package org.apache.commons.lang3;\n \n import java.lang.reflect.UndeclaredThrowableException;\n import java.io.UncheckedIOException;\n import java.io.IOException;\n-import java.util.Objects;\n import java.util.Collection;\n import java.util.stream.Stream;\n+import java.util.Objects;\n import java.util.function.Supplier;\n import java.util.function.BiPredicate;\n import java.util.function.Predicate;\n import java.util.function.BiFunction;\n import java.util.function.Function;\n import java.util.function.BiConsumer;\n import java.util.concurrent.Callable;\n@@ -60,14 +60,15 @@\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n     public static <O, T extends Throwable> O call(final Functions.FailableCallable<O, T> callable) {\n+        Objects.requireNonNull(callable);\n         return get((Functions.FailableSupplier<O, Throwable>)callable::call);\n     }\n     \n     public static <O, T extends Throwable> void accept(final Functions.FailableConsumer<O, T> consumer, final O object) {\n         run((Functions.FailableRunnable<Throwable>)(() -> consumer.accept(object)));\n     }\n     \n"}]}
