{"diffoscope-json-version": 1, "source1": "first/AnnotationDefaultAttribute.class", "source2": "second/AnnotationDefaultAttribute.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,55 +1,54 @@\n \n package org.apache.commons.compress.harmony.unpack200.bytecode;\n \n-import java.util.List;\n import java.util.Collection;\n import java.util.ArrayList;\n import java.io.IOException;\n import java.io.DataOutputStream;\n \n public class AnnotationDefaultAttribute extends AnnotationsAttribute\n {\n     private final AnnotationsAttribute.ElementValue element_value;\n     private static CPUTF8 attributeName;\n     \n-    public static void setAttributeName(final CPUTF8 cpUTF8Value) {\n-        AnnotationDefaultAttribute.attributeName = cpUTF8Value;\n+    public static void setAttributeName(final CPUTF8 attributeName) {\n+        AnnotationDefaultAttribute.attributeName = attributeName;\n     }\n     \n     public AnnotationDefaultAttribute(final AnnotationsAttribute.ElementValue element_value) {\n         super(AnnotationDefaultAttribute.attributeName);\n         this.element_value = element_value;\n     }\n     \n     protected int getLength() {\n         return this.element_value.getLength();\n     }\n     \n-    protected void writeBody(final DataOutputStream dos) throws IOException {\n-        this.element_value.writeBody(dos);\n+    protected void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        this.element_value.writeBody(dataOutputStream);\n     }\n     \n-    protected void resolve(final ClassConstantPool pool) {\n-        super.resolve(pool);\n-        this.element_value.resolve(pool);\n+    protected void resolve(final ClassConstantPool classConstantPool) {\n+        super.resolve(classConstantPool);\n+        this.element_value.resolve(classConstantPool);\n     }\n     \n     public String toString() {\n         return \"AnnotationDefault: \" + this.element_value;\n     }\n     \n-    public boolean equals(final Object obj) {\n-        return this == obj;\n+    public boolean equals(final Object o) {\n+        return this == o;\n     }\n     \n     protected ClassFileEntry[] getNestedClassFileEntries() {\n-        final List<Object> nested = new ArrayList<Object>();\n-        nested.add(AnnotationDefaultAttribute.attributeName);\n-        nested.addAll(this.element_value.getClassFileEntries());\n-        final ClassFileEntry[] nestedEntries = new ClassFileEntry[nested.size()];\n-        for (int i = 0; i < nestedEntries.length; ++i) {\n-            nestedEntries[i] = nested.get(i);\n+        final ArrayList list = new ArrayList();\n+        list.add(AnnotationDefaultAttribute.attributeName);\n+        list.addAll(this.element_value.getClassFileEntries());\n+        final ClassFileEntry[] array = new ClassFileEntry[list.size()];\n+        for (int i = 0; i < array.length; ++i) {\n+            array[i] = (ClassFileEntry)list.get(i);\n         }\n-        return nestedEntries;\n+        return array;\n     }\n }\n"}]}
