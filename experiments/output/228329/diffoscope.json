{"diffoscope-json-version": 1, "source1": "first/Metaphone.class", "source2": "second/Metaphone.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,299 +12,297 @@\n     private static final String VARSON = \"CSPTG\";\n     private int maxCodeLen;\n     \n     public Metaphone() {\n         this.maxCodeLen = 4;\n     }\n     \n-    public String metaphone(final String txt) {\n-        boolean hard = false;\n-        final int txtLength;\n-        if (txt == null || (txtLength = txt.length()) == 0) {\n+    public String metaphone(final String s) {\n+        final int length;\n+        if (s == null || (length = s.length()) == 0) {\n             return \"\";\n         }\n-        if (txtLength == 1) {\n-            return txt.toUpperCase(Locale.ENGLISH);\n+        if (length == 1) {\n+            return s.toUpperCase(Locale.ENGLISH);\n         }\n-        final char[] inwd = txt.toUpperCase(Locale.ENGLISH).toCharArray();\n-        final StringBuilder local = new StringBuilder(40);\n-        final StringBuilder code = new StringBuilder(10);\n-        switch (inwd[0]) {\n+        final char[] charArray = s.toUpperCase(Locale.ENGLISH).toCharArray();\n+        final StringBuilder sb = new StringBuilder(40);\n+        final StringBuilder sb2 = new StringBuilder(10);\n+        switch (charArray[0]) {\n             case 'G':\n             case 'K':\n             case 'P': {\n-                if (inwd[1] == 'N') {\n-                    local.append(inwd, 1, inwd.length - 1);\n+                if (charArray[1] == 'N') {\n+                    sb.append(charArray, 1, charArray.length - 1);\n                     break;\n                 }\n-                local.append(inwd);\n+                sb.append(charArray);\n                 break;\n             }\n             case 'A': {\n-                if (inwd[1] == 'E') {\n-                    local.append(inwd, 1, inwd.length - 1);\n+                if (charArray[1] == 'E') {\n+                    sb.append(charArray, 1, charArray.length - 1);\n                     break;\n                 }\n-                local.append(inwd);\n+                sb.append(charArray);\n                 break;\n             }\n             case 'W': {\n-                if (inwd[1] == 'R') {\n-                    local.append(inwd, 1, inwd.length - 1);\n+                if (charArray[1] == 'R') {\n+                    sb.append(charArray, 1, charArray.length - 1);\n                     break;\n                 }\n-                if (inwd[1] == 'H') {\n-                    local.append(inwd, 1, inwd.length - 1);\n-                    local.setCharAt();\n+                if (charArray[1] == 'H') {\n+                    sb.append(charArray, 1, charArray.length - 1);\n+                    sb.setCharAt();\n                     break;\n                 }\n-                local.append(inwd);\n+                sb.append(charArray);\n                 break;\n             }\n             case 'X': {\n-                inwd[0] = 'S';\n-                local.append(inwd);\n+                charArray[0] = 'S';\n+                sb.append(charArray);\n                 break;\n             }\n             default: {\n-                local.append(inwd);\n+                sb.append(charArray);\n                 break;\n             }\n         }\n-        final int wdsz = local.length();\n+        final int length2 = sb.length();\n         int n = 0;\n-        while (code.length() < this.getMaxCodeLen() && n < wdsz) {\n-            final char symb = local.charAt();\n-            if (symb != 'C' && this.isPreviousChar(local, n, symb)) {\n+        while (sb2.length() < this.getMaxCodeLen() && n < length2) {\n+            final char char1 = sb.charAt();\n+            if (char1 != 'C' && this.isPreviousChar(sb, n, char1)) {\n                 ++n;\n             }\n             else {\n-                switch (symb) {\n+                switch (char1) {\n                     case 'A':\n                     case 'E':\n                     case 'I':\n                     case 'O':\n                     case 'U': {\n                         if (n == 0) {\n-                            code.append(symb);\n+                            sb2.append(char1);\n                             break;\n                         }\n                         break;\n                     }\n                     case 'B': {\n-                        if (this.isPreviousChar(local, n, 'M') && this.isLastChar(wdsz, n)) {\n+                        if (this.isPreviousChar(sb, n, 'M') && this.isLastChar(length2, n)) {\n                             break;\n                         }\n-                        code.append(symb);\n+                        sb2.append(char1);\n                         break;\n                     }\n                     case 'C': {\n-                        if (this.isPreviousChar(local, n, 'S') && !this.isLastChar(wdsz, n) && \"EIY\".indexOf(local.charAt()) >= 0) {\n+                        if (this.isPreviousChar(sb, n, 'S') && !this.isLastChar(length2, n) && \"EIY\".indexOf(sb.charAt()) >= 0) {\n                             break;\n                         }\n-                        if (this.regionMatch(local, n, \"CIA\")) {\n-                            code.append('X');\n+                        if (this.regionMatch(sb, n, \"CIA\")) {\n+                            sb2.append('X');\n                             break;\n                         }\n-                        if (!this.isLastChar(wdsz, n) && \"EIY\".indexOf(local.charAt()) >= 0) {\n-                            code.append('S');\n+                        if (!this.isLastChar(length2, n) && \"EIY\".indexOf(sb.charAt()) >= 0) {\n+                            sb2.append('S');\n                             break;\n                         }\n-                        if (this.isPreviousChar(local, n, 'S') && this.isNextChar(local, n, 'H')) {\n-                            code.append('K');\n+                        if (this.isPreviousChar(sb, n, 'S') && this.isNextChar(sb, n, 'H')) {\n+                            sb2.append('K');\n                             break;\n                         }\n-                        if (!this.isNextChar(local, n, 'H')) {\n-                            code.append('K');\n+                        if (!this.isNextChar(sb, n, 'H')) {\n+                            sb2.append('K');\n                             break;\n                         }\n-                        if (n == 0 && wdsz >= 3 && this.isVowel(local, 2)) {\n-                            code.append('K');\n+                        if (n == 0 && length2 >= 3 && this.isVowel(sb, 2)) {\n+                            sb2.append('K');\n                             break;\n                         }\n-                        code.append('X');\n+                        sb2.append('X');\n                         break;\n                     }\n                     case 'D': {\n-                        if (!this.isLastChar(wdsz, n + 1) && this.isNextChar(local, n, 'G') && \"EIY\".indexOf(local.charAt()) >= 0) {\n-                            code.append('J');\n+                        if (!this.isLastChar(length2, n + 1) && this.isNextChar(sb, n, 'G') && \"EIY\".indexOf(sb.charAt()) >= 0) {\n+                            sb2.append('J');\n                             n += 2;\n                             break;\n                         }\n-                        code.append('T');\n+                        sb2.append('T');\n                         break;\n                     }\n                     case 'G': {\n-                        if (this.isLastChar(wdsz, n + 1) && this.isNextChar(local, n, 'H')) {\n+                        if (this.isLastChar(length2, n + 1) && this.isNextChar(sb, n, 'H')) {\n                             break;\n                         }\n-                        if (!this.isLastChar(wdsz, n + 1) && this.isNextChar(local, n, 'H') && !this.isVowel(local, n + 2)) {\n+                        if (!this.isLastChar(length2, n + 1) && this.isNextChar(sb, n, 'H') && !this.isVowel(sb, n + 2)) {\n                             break;\n                         }\n                         if (n > 0) {\n-                            if (this.regionMatch(local, n, \"GN\")) {\n+                            if (this.regionMatch(sb, n, \"GN\")) {\n                                 break;\n                             }\n-                            if (this.regionMatch(local, n, \"GNED\")) {\n+                            if (this.regionMatch(sb, n, \"GNED\")) {\n                                 break;\n                             }\n                         }\n-                        hard = this.isPreviousChar(local, n, 'G');\n-                        if (!this.isLastChar(wdsz, n) && \"EIY\".indexOf(local.charAt()) >= 0 && !hard) {\n-                            code.append('J');\n+                        final boolean previousChar = this.isPreviousChar(sb, n, 'G');\n+                        if (!this.isLastChar(length2, n) && \"EIY\".indexOf(sb.charAt()) >= 0 && !previousChar) {\n+                            sb2.append('J');\n                             break;\n                         }\n-                        code.append('K');\n+                        sb2.append('K');\n                         break;\n                     }\n                     case 'H': {\n-                        if (this.isLastChar(wdsz, n)) {\n+                        if (this.isLastChar(length2, n)) {\n                             break;\n                         }\n-                        if (n > 0 && \"CSPTG\".indexOf(local.charAt()) >= 0) {\n+                        if (n > 0 && \"CSPTG\".indexOf(sb.charAt()) >= 0) {\n                             break;\n                         }\n-                        if (this.isVowel(local, n + 1)) {\n-                            code.append('H');\n+                        if (this.isVowel(sb, n + 1)) {\n+                            sb2.append('H');\n                             break;\n                         }\n                         break;\n                     }\n                     case 'F':\n                     case 'J':\n                     case 'L':\n                     case 'M':\n                     case 'N':\n                     case 'R': {\n-                        code.append(symb);\n+                        sb2.append(char1);\n                         break;\n                     }\n                     case 'K': {\n                         if (n <= 0) {\n-                            code.append(symb);\n+                            sb2.append(char1);\n                             break;\n                         }\n-                        if (!this.isPreviousChar(local, n, 'C')) {\n-                            code.append(symb);\n+                        if (!this.isPreviousChar(sb, n, 'C')) {\n+                            sb2.append(char1);\n                             break;\n                         }\n                         break;\n                     }\n                     case 'P': {\n-                        if (this.isNextChar(local, n, 'H')) {\n-                            code.append('F');\n+                        if (this.isNextChar(sb, n, 'H')) {\n+                            sb2.append('F');\n                             break;\n                         }\n-                        code.append(symb);\n+                        sb2.append(char1);\n                         break;\n                     }\n                     case 'Q': {\n-                        code.append('K');\n+                        sb2.append('K');\n                         break;\n                     }\n                     case 'S': {\n-                        if (this.regionMatch(local, n, \"SH\") || this.regionMatch(local, n, \"SIO\") || this.regionMatch(local, n, \"SIA\")) {\n-                            code.append('X');\n+                        if (this.regionMatch(sb, n, \"SH\") || this.regionMatch(sb, n, \"SIO\") || this.regionMatch(sb, n, \"SIA\")) {\n+                            sb2.append('X');\n                             break;\n                         }\n-                        code.append('S');\n+                        sb2.append('S');\n                         break;\n                     }\n                     case 'T': {\n-                        if (this.regionMatch(local, n, \"TIA\") || this.regionMatch(local, n, \"TIO\")) {\n-                            code.append('X');\n+                        if (this.regionMatch(sb, n, \"TIA\") || this.regionMatch(sb, n, \"TIO\")) {\n+                            sb2.append('X');\n                             break;\n                         }\n-                        if (this.regionMatch(local, n, \"TCH\")) {\n+                        if (this.regionMatch(sb, n, \"TCH\")) {\n                             break;\n                         }\n-                        if (this.regionMatch(local, n, \"TH\")) {\n-                            code.append('0');\n+                        if (this.regionMatch(sb, n, \"TH\")) {\n+                            sb2.append('0');\n                             break;\n                         }\n-                        code.append('T');\n+                        sb2.append('T');\n                         break;\n                     }\n                     case 'V': {\n-                        code.append('F');\n+                        sb2.append('F');\n                         break;\n                     }\n                     case 'W':\n                     case 'Y': {\n-                        if (!this.isLastChar(wdsz, n) && this.isVowel(local, n + 1)) {\n-                            code.append(symb);\n+                        if (!this.isLastChar(length2, n) && this.isVowel(sb, n + 1)) {\n+                            sb2.append(char1);\n                             break;\n                         }\n                         break;\n                     }\n                     case 'X': {\n-                        code.append('K');\n-                        code.append('S');\n+                        sb2.append('K');\n+                        sb2.append('S');\n                         break;\n                     }\n                     case 'Z': {\n-                        code.append('S');\n+                        sb2.append('S');\n                         break;\n                     }\n                 }\n                 ++n;\n             }\n-            if (code.length() > this.getMaxCodeLen()) {\n-                code.setLength();\n+            if (sb2.length() > this.getMaxCodeLen()) {\n+                sb2.setLength();\n             }\n         }\n-        return code.toString();\n+        return sb2.toString();\n     }\n     \n-    private boolean isVowel(final StringBuilder string, final int index) {\n-        return \"AEIOU\".indexOf(string.charAt()) >= 0;\n+    private boolean isVowel(final StringBuilder sb, final int n) {\n+        return \"AEIOU\".indexOf(sb.charAt()) >= 0;\n     }\n     \n-    private boolean isPreviousChar(final StringBuilder string, final int index, final char c) {\n-        boolean matches = false;\n-        if (index > 0 && index < string.length()) {\n-            matches = (string.charAt() == c);\n+    private boolean isPreviousChar(final StringBuilder sb, final int n, final char c) {\n+        boolean b = false;\n+        if (n > 0 && n < sb.length()) {\n+            b = (sb.charAt() == c);\n         }\n-        return matches;\n+        return b;\n     }\n     \n-    private boolean isNextChar(final StringBuilder string, final int index, final char c) {\n-        boolean matches = false;\n-        if (index >= 0 && index < string.length() - 1) {\n-            matches = (string.charAt() == c);\n+    private boolean isNextChar(final StringBuilder sb, final int n, final char c) {\n+        boolean b = false;\n+        if (n >= 0 && n < sb.length() - 1) {\n+            b = (sb.charAt() == c);\n         }\n-        return matches;\n+        return b;\n     }\n     \n-    private boolean regionMatch(final StringBuilder string, final int index, final String test) {\n-        boolean matches = false;\n-        if (index >= 0 && index + test.length() - 1 < string.length()) {\n-            final String substring = string.substring();\n-            matches = substring.equals(test);\n+    private boolean regionMatch(final StringBuilder sb, final int n, final String anObject) {\n+        boolean equals = false;\n+        if (n >= 0 && n + anObject.length() - 1 < sb.length()) {\n+            equals = sb.substring().equals(anObject);\n         }\n-        return matches;\n+        return equals;\n     }\n     \n-    private boolean isLastChar(final int wdsz, final int n) {\n-        return n + 1 == wdsz;\n+    private boolean isLastChar(final int n, final int n2) {\n+        return n2 + 1 == n;\n     }\n     \n-    public Object encode(final Object obj) throws EncoderException {\n-        if (!(obj instanceof String)) {\n+    public Object encode(final Object o) throws EncoderException {\n+        if (!(o instanceof String)) {\n             throw new EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n         }\n-        return this.metaphone((String)obj);\n+        return this.metaphone((String)o);\n     }\n     \n-    public String encode(final String str) {\n-        return this.metaphone(str);\n+    public String encode(final String s) {\n+        return this.metaphone(s);\n     }\n     \n-    public boolean isMetaphoneEqual(final String str1, final String str2) {\n-        return this.metaphone(str1).equals(this.metaphone(str2));\n+    public boolean isMetaphoneEqual(final String s, final String s2) {\n+        return this.metaphone(s).equals(this.metaphone(s2));\n     }\n     \n     public int getMaxCodeLen() {\n         return this.maxCodeLen;\n     }\n     \n     public void setMaxCodeLen(final int maxCodeLen) {\n"}]}
