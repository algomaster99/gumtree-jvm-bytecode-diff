{"diffoscope-json-version": 1, "source1": "first/ClassBands.class", "source2": "second/ClassBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -98,16 +98,16 @@\n     private int numMethodArgs;\n     private int[] class_InnerClasses_N;\n     private CPClass[] class_InnerClasses_RC;\n     private int[] class_InnerClasses_F;\n     private List<CPClass> classInnerClassesOuterRCN;\n     private List<CPUTF8> classInnerClassesNameRUN;\n     \n-    public ClassBands(final Segment segment, final int numClasses, final int effort, final boolean stripDebug) throws IOException {\n-        super(effort, segment.getSegmentHeader());\n+    public ClassBands(final Segment segment, final int n, final int n2, final boolean stripDebug) throws IOException {\n+        super(n2, segment.getSegmentHeader());\n         this.classSourceFile = new ArrayList<CPUTF8>();\n         this.classEnclosingMethodClass = new ArrayList<ConstantPoolEntry>();\n         this.classEnclosingMethodDesc = new ArrayList<ConstantPoolEntry>();\n         this.classSignature = new ArrayList<CPSignature>();\n         this.classFileVersionMinor = new IntList();\n         this.classFileVersionMajor = new IntList();\n         this.fieldConstantValueKQ = new ArrayList<CPConstant<?>>();\n@@ -152,574 +152,583 @@\n         this.classReferencesInnerClass = new HashMap<CPClass, Set<CPClass>>();\n         this.index = 0;\n         this.numMethodArgs = 0;\n         this.stripDebug = stripDebug;\n         this.segment = segment;\n         this.cpBands = segment.getCpBands();\n         this.attrBands = segment.getAttrBands();\n-        this.class_this = new CPClass[numClasses];\n-        this.class_super = new CPClass[numClasses];\n-        this.class_interface_count = new int[numClasses];\n-        this.class_interface = new CPClass[numClasses][];\n-        this.class_field_count = new int[numClasses];\n-        this.class_method_count = new int[numClasses];\n-        this.field_descr = new CPNameAndType[numClasses][];\n-        this.field_flags = new long[numClasses][];\n-        this.method_descr = new CPNameAndType[numClasses][];\n-        this.method_flags = new long[numClasses][];\n-        for (int i = 0; i < numClasses; ++i) {\n+        this.class_this = new CPClass[n];\n+        this.class_super = new CPClass[n];\n+        this.class_interface_count = new int[n];\n+        this.class_interface = new CPClass[n][];\n+        this.class_field_count = new int[n];\n+        this.class_method_count = new int[n];\n+        this.field_descr = new CPNameAndType[n][];\n+        this.field_flags = new long[n][];\n+        this.method_descr = new CPNameAndType[n][];\n+        this.method_flags = new long[n][];\n+        for (int i = 0; i < n; ++i) {\n             this.field_flags[i] = new long[0];\n             this.method_flags[i] = new long[0];\n         }\n-        this.major_versions = new int[numClasses];\n-        this.class_flags = new long[numClasses];\n-        this.class_RVA_bands = new MetadataBandGroup(\"RVA\", 0, this.cpBands, this.segmentHeader, effort);\n-        this.class_RIA_bands = new MetadataBandGroup(\"RIA\", 0, this.cpBands, this.segmentHeader, effort);\n-        this.field_RVA_bands = new MetadataBandGroup(\"RVA\", 1, this.cpBands, this.segmentHeader, effort);\n-        this.field_RIA_bands = new MetadataBandGroup(\"RIA\", 1, this.cpBands, this.segmentHeader, effort);\n-        this.method_RVA_bands = new MetadataBandGroup(\"RVA\", 2, this.cpBands, this.segmentHeader, effort);\n-        this.method_RIA_bands = new MetadataBandGroup(\"RIA\", 2, this.cpBands, this.segmentHeader, effort);\n-        this.method_RVPA_bands = new MetadataBandGroup(\"RVPA\", 2, this.cpBands, this.segmentHeader, effort);\n-        this.method_RIPA_bands = new MetadataBandGroup(\"RIPA\", 2, this.cpBands, this.segmentHeader, effort);\n-        this.method_AD_bands = new MetadataBandGroup(\"AD\", 2, this.cpBands, this.segmentHeader, effort);\n+        this.major_versions = new int[n];\n+        this.class_flags = new long[n];\n+        this.class_RVA_bands = new MetadataBandGroup(\"RVA\", 0, this.cpBands, this.segmentHeader, n2);\n+        this.class_RIA_bands = new MetadataBandGroup(\"RIA\", 0, this.cpBands, this.segmentHeader, n2);\n+        this.field_RVA_bands = new MetadataBandGroup(\"RVA\", 1, this.cpBands, this.segmentHeader, n2);\n+        this.field_RIA_bands = new MetadataBandGroup(\"RIA\", 1, this.cpBands, this.segmentHeader, n2);\n+        this.method_RVA_bands = new MetadataBandGroup(\"RVA\", 2, this.cpBands, this.segmentHeader, n2);\n+        this.method_RIA_bands = new MetadataBandGroup(\"RIA\", 2, this.cpBands, this.segmentHeader, n2);\n+        this.method_RVPA_bands = new MetadataBandGroup(\"RVPA\", 2, this.cpBands, this.segmentHeader, n2);\n+        this.method_RIPA_bands = new MetadataBandGroup(\"RIPA\", 2, this.cpBands, this.segmentHeader, n2);\n+        this.method_AD_bands = new MetadataBandGroup(\"AD\", 2, this.cpBands, this.segmentHeader, n2);\n         this.createNewAttributeBands();\n     }\n     \n     private void createNewAttributeBands() throws IOException {\n-        for (final AttributeDefinitionBands.AttributeDefinition def : this.attrBands.getClassAttributeLayouts()) {\n-            this.classAttributeBands.add(new NewAttributeBands(this.effort, this.cpBands, this.segment.getSegmentHeader(), def));\n-        }\n-        for (final AttributeDefinitionBands.AttributeDefinition def : this.attrBands.getMethodAttributeLayouts()) {\n-            this.methodAttributeBands.add(new NewAttributeBands(this.effort, this.cpBands, this.segment.getSegmentHeader(), def));\n-        }\n-        for (final AttributeDefinitionBands.AttributeDefinition def : this.attrBands.getFieldAttributeLayouts()) {\n-            this.fieldAttributeBands.add(new NewAttributeBands(this.effort, this.cpBands, this.segment.getSegmentHeader(), def));\n-        }\n-        for (final AttributeDefinitionBands.AttributeDefinition def : this.attrBands.getCodeAttributeLayouts()) {\n-            this.codeAttributeBands.add(new NewAttributeBands(this.effort, this.cpBands, this.segment.getSegmentHeader(), def));\n+        final Iterator iterator = this.attrBands.getClassAttributeLayouts().iterator();\n+        while (iterator.hasNext()) {\n+            this.classAttributeBands.add(new NewAttributeBands(this.effort, this.cpBands, this.segment.getSegmentHeader(), (AttributeDefinitionBands.AttributeDefinition)iterator.next()));\n+        }\n+        final Iterator iterator2 = this.attrBands.getMethodAttributeLayouts().iterator();\n+        while (iterator2.hasNext()) {\n+            this.methodAttributeBands.add(new NewAttributeBands(this.effort, this.cpBands, this.segment.getSegmentHeader(), (AttributeDefinitionBands.AttributeDefinition)iterator2.next()));\n+        }\n+        final Iterator iterator3 = this.attrBands.getFieldAttributeLayouts().iterator();\n+        while (iterator3.hasNext()) {\n+            this.fieldAttributeBands.add(new NewAttributeBands(this.effort, this.cpBands, this.segment.getSegmentHeader(), (AttributeDefinitionBands.AttributeDefinition)iterator3.next()));\n+        }\n+        final Iterator iterator4 = this.attrBands.getCodeAttributeLayouts().iterator();\n+        while (iterator4.hasNext()) {\n+            this.codeAttributeBands.add(new NewAttributeBands(this.effort, this.cpBands, this.segment.getSegmentHeader(), (AttributeDefinitionBands.AttributeDefinition)iterator4.next()));\n         }\n     }\n     \n-    public void addClass(final int major, int flags, final String className, final String signature, final String superName, final String[] interfaces) {\n-        this.class_this[this.index] = this.cpBands.getCPClass(className);\n-        this.class_super[this.index] = this.cpBands.getCPClass(superName);\n-        this.class_interface_count[this.index] = interfaces.length;\n-        Arrays.setAll(this.class_interface[this.index] = new CPClass[interfaces.length], i -> this.cpBands.getCPClass(interfaces[i]));\n-        this.major_versions[this.index] = major;\n-        this.class_flags[this.index] = flags;\n-        if (!this.anySyntheticClasses && (flags & 0x1000) != 0x0 && this.segment.getCurrentClassReader().hasSyntheticAttributes()) {\n+    public void addClass(final int n, int n2, final String s, final String s2, final String s3, final String[] array) {\n+        this.class_this[this.index] = this.cpBands.getCPClass(s);\n+        this.class_super[this.index] = this.cpBands.getCPClass(s3);\n+        this.class_interface_count[this.index] = array.length;\n+        Arrays.setAll(this.class_interface[this.index] = new CPClass[array.length], n4 -> this.cpBands.getCPClass(array2[n4]));\n+        this.major_versions[this.index] = n;\n+        this.class_flags[this.index] = n2;\n+        if (!this.anySyntheticClasses && (n2 & 0x1000) != 0x0 && this.segment.getCurrentClassReader().hasSyntheticAttributes()) {\n             this.cpBands.addCPUtf8(\"Synthetic\");\n             this.anySyntheticClasses = true;\n         }\n-        if ((flags & 0x20000) != 0x0) {\n-            flags &= 0xFFFDFFFF;\n-            flags |= 0x100000;\n+        if ((n2 & 0x20000) != 0x0) {\n+            n2 &= 0xFFFDFFFF;\n+            n2 |= 0x100000;\n         }\n-        if (signature != null) {\n+        if (s2 != null) {\n             final long[] class_flags = this.class_flags;\n             final int index = this.index;\n             class_flags[index] |= 0x80000L;\n-            this.classSignature.add(this.cpBands.getCPSignature(signature));\n+            this.classSignature.add(this.cpBands.getCPSignature(s2));\n         }\n     }\n     \n-    public void currentClassReferencesInnerClass(final CPClass inner) {\n+    public void currentClassReferencesInnerClass(final CPClass obj) {\n         if (this.index < this.class_this.length) {\n-            final CPClass currentClass = this.class_this[this.index];\n-            if (currentClass != null && !currentClass.equals(inner) && !this.isInnerClassOf(currentClass.toString(), inner)) {\n-                Set<CPClass> referencedInnerClasses = (Set<CPClass>)this.classReferencesInnerClass.get(currentClass);\n-                if (referencedInnerClasses == null) {\n-                    referencedInnerClasses = new HashSet<CPClass>();\n-                    this.classReferencesInnerClass.put(currentClass, referencedInnerClasses);\n+            final CPClass cpClass = this.class_this[this.index];\n+            if (cpClass != null && !cpClass.equals(obj) && !this.isInnerClassOf(cpClass.toString(), obj)) {\n+                Set set = (Set)this.classReferencesInnerClass.get(cpClass);\n+                if (set == null) {\n+                    set = new HashSet();\n+                    this.classReferencesInnerClass.put(cpClass, set);\n                 }\n-                referencedInnerClasses.add(inner);\n+                set.add(obj);\n             }\n         }\n     }\n     \n-    private boolean isInnerClassOf(final String possibleInner, final CPClass possibleOuter) {\n-        if (this.isInnerClass(possibleInner)) {\n-            final String superClassName = possibleInner.substring(0, possibleInner.lastIndexOf(36));\n-            return superClassName.equals(possibleOuter.toString()) || this.isInnerClassOf(superClassName, possibleOuter);\n+    private boolean isInnerClassOf(final String s, final CPClass cpClass) {\n+        if (this.isInnerClass(s)) {\n+            final String substring = s.substring(0, s.lastIndexOf(36));\n+            return substring.equals(cpClass.toString()) || this.isInnerClassOf(substring, cpClass);\n         }\n         return false;\n     }\n     \n-    private boolean isInnerClass(final String possibleInner) {\n-        return possibleInner.indexOf(36) != -1;\n+    private boolean isInnerClass(final String s) {\n+        return s.indexOf(36) != -1;\n     }\n     \n-    public void addField(int flags, final String name, final String desc, final String signature, final Object value) {\n-        flags &= 0xFFFF;\n-        this.tempFieldDesc.add(this.cpBands.getCPNameAndType(name, desc));\n-        if (signature != null) {\n-            this.fieldSignature.add(this.cpBands.getCPSignature(signature));\n-            flags |= 0x80000;\n-        }\n-        if ((flags & 0x20000) != 0x0) {\n-            flags &= 0xFFFDFFFF;\n-            flags |= 0x100000;\n-        }\n-        if (value != null) {\n-            this.fieldConstantValueKQ.add((CPConstant<?>)this.cpBands.getConstant(value));\n-            flags |= 0x20000;\n+    public void addField(int n, final String s, final String s2, final String s3, final Object o) {\n+        n &= 0xFFFF;\n+        this.tempFieldDesc.add(this.cpBands.getCPNameAndType(s, s2));\n+        if (s3 != null) {\n+            this.fieldSignature.add(this.cpBands.getCPSignature(s3));\n+            n |= 0x80000;\n+        }\n+        if ((n & 0x20000) != 0x0) {\n+            n &= 0xFFFDFFFF;\n+            n |= 0x100000;\n+        }\n+        if (o != null) {\n+            this.fieldConstantValueKQ.add((CPConstant<?>)this.cpBands.getConstant(o));\n+            n |= 0x20000;\n         }\n-        if (!this.anySyntheticFields && (flags & 0x1000) != 0x0 && this.segment.getCurrentClassReader().hasSyntheticAttributes()) {\n+        if (!this.anySyntheticFields && (n & 0x1000) != 0x0 && this.segment.getCurrentClassReader().hasSyntheticAttributes()) {\n             this.cpBands.addCPUtf8(\"Synthetic\");\n             this.anySyntheticFields = true;\n         }\n-        this.tempFieldFlags.add(Long.valueOf((long)flags));\n+        this.tempFieldFlags.add(Long.valueOf((long)n));\n     }\n     \n     public void finaliseBands() {\n         final int defaultMajorVersion = this.segmentHeader.getDefaultMajorVersion();\n         for (int i = 0; i < this.class_flags.length; ++i) {\n-            final int major = this.major_versions[i];\n-            if (major != defaultMajorVersion) {\n+            final int n = this.major_versions[i];\n+            if (n != defaultMajorVersion) {\n                 final long[] class_flags = this.class_flags;\n-                final int n = i;\n-                class_flags[n] |= 0x1000000L;\n-                this.classFileVersionMajor.add(major);\n+                final int n2 = i;\n+                class_flags[n2] |= 0x1000000L;\n+                this.classFileVersionMajor.add(n);\n                 this.classFileVersionMinor.add(0);\n             }\n         }\n         this.codeHeaders = new int[this.codeHandlerCount.size()];\n-        int removed = 0;\n+        int n3 = 0;\n         for (int j = 0; j < this.codeHeaders.length; ++j) {\n-            final int numHandlers = this.codeHandlerCount.get(j - removed);\n-            final int maxLocals = this.codeMaxLocals.get(j - removed);\n-            final int maxStack = this.codeMaxStack.get(j - removed);\n-            if (numHandlers == 0) {\n-                final int header = maxLocals * 12 + maxStack + 1;\n-                if (header < 145 && maxStack < 12) {\n-                    this.codeHeaders[j] = header;\n-                }\n-            }\n-            else if (numHandlers == 1) {\n-                final int header = maxLocals * 8 + maxStack + 145;\n-                if (header < 209 && maxStack < 8) {\n-                    this.codeHeaders[j] = header;\n-                }\n-            }\n-            else if (numHandlers == 2) {\n-                final int header = maxLocals * 7 + maxStack + 209;\n-                if (header < 256 && maxStack < 7) {\n-                    this.codeHeaders[j] = header;\n+            final int value = this.codeHandlerCount.get(j - n3);\n+            final int value2 = this.codeMaxLocals.get(j - n3);\n+            final int value3 = this.codeMaxStack.get(j - n3);\n+            if (value == 0) {\n+                final int n4 = value2 * 12 + value3 + 1;\n+                if (n4 < 145 && value3 < 12) {\n+                    this.codeHeaders[j] = n4;\n+                }\n+            }\n+            else if (value == 1) {\n+                final int n5 = value2 * 8 + value3 + 145;\n+                if (n5 < 209 && value3 < 8) {\n+                    this.codeHeaders[j] = n5;\n+                }\n+            }\n+            else if (value == 2) {\n+                final int n6 = value2 * 7 + value3 + 209;\n+                if (n6 < 256 && value3 < 7) {\n+                    this.codeHeaders[j] = n6;\n                 }\n             }\n             if (this.codeHeaders[j] != 0) {\n-                this.codeHandlerCount.remove(j - removed);\n-                this.codeMaxLocals.remove(j - removed);\n-                this.codeMaxStack.remove(j - removed);\n-                ++removed;\n+                this.codeHandlerCount.remove(j - n3);\n+                this.codeMaxLocals.remove(j - n3);\n+                this.codeMaxStack.remove(j - n3);\n+                ++n3;\n             }\n             else if (!this.segment.getSegmentHeader().have_all_code_flags()) {\n                 this.codeFlags.add(Long.valueOf(0L));\n             }\n         }\n-        final IntList innerClassesN = new IntList();\n-        final List<IcBands.IcTuple> icLocal = new ArrayList<IcBands.IcTuple>();\n+        final IntList list = new IntList();\n+        final ArrayList list2 = new ArrayList();\n         for (int k = 0; k < this.class_this.length; ++k) {\n             final CPClass cpClass = this.class_this[k];\n-            final Set<CPClass> referencedInnerClasses = (Set<CPClass>)this.classReferencesInnerClass.get(cpClass);\n-            if (referencedInnerClasses != null) {\n-                int innerN = 0;\n-                final List<IcBands.IcTuple> innerClasses = this.segment.getIcBands().getInnerClassesForOuter(cpClass.toString());\n-                if (innerClasses != null) {\n-                    for (final IcBands.IcTuple element : innerClasses) {\n-                        referencedInnerClasses.remove(element.C);\n+            final Set set = (Set)this.classReferencesInnerClass.get(cpClass);\n+            if (set != null) {\n+                int n7 = 0;\n+                final List innerClassesForOuter = this.segment.getIcBands().getInnerClassesForOuter(cpClass.toString());\n+                if (innerClassesForOuter != null) {\n+                    final Iterator iterator = innerClassesForOuter.iterator();\n+                    while (iterator.hasNext()) {\n+                        set.remove(((IcBands.IcTuple)iterator.next()).C);\n                     }\n                 }\n-                for (final CPClass inner : referencedInnerClasses) {\n-                    final IcBands.IcTuple icTuple = this.segment.getIcBands().getIcTuple(inner);\n+                final Iterator iterator2 = set.iterator();\n+                while (iterator2.hasNext()) {\n+                    final IcBands.IcTuple icTuple = this.segment.getIcBands().getIcTuple((CPClass)iterator2.next());\n                     if (icTuple != null && !icTuple.isAnonymous()) {\n-                        icLocal.add(icTuple);\n-                        ++innerN;\n+                        list2.add(icTuple);\n+                        ++n7;\n                     }\n                 }\n-                if (innerN != 0) {\n-                    innerClassesN.add(innerN);\n+                if (n7 != 0) {\n+                    list.add(n7);\n                     final long[] class_flags2 = this.class_flags;\n-                    final int n2 = k;\n-                    class_flags2[n2] |= 0x800000L;\n+                    final int n8 = k;\n+                    class_flags2[n8] |= 0x800000L;\n                 }\n             }\n         }\n-        this.class_InnerClasses_N = innerClassesN.toArray();\n-        this.class_InnerClasses_RC = new CPClass[icLocal.size()];\n-        this.class_InnerClasses_F = new int[icLocal.size()];\n+        this.class_InnerClasses_N = list.toArray();\n+        this.class_InnerClasses_RC = new CPClass[list2.size()];\n+        this.class_InnerClasses_F = new int[list2.size()];\n         this.classInnerClassesOuterRCN = new ArrayList<CPClass>();\n         this.classInnerClassesNameRUN = new ArrayList<CPUTF8>();\n-        for (int k = 0; k < this.class_InnerClasses_RC.length; ++k) {\n-            final IcBands.IcTuple icTuple2 = (IcBands.IcTuple)icLocal.get(k);\n-            this.class_InnerClasses_RC[k] = icTuple2.C;\n+        for (int l = 0; l < this.class_InnerClasses_RC.length; ++l) {\n+            final IcBands.IcTuple icTuple2 = (IcBands.IcTuple)list2.get(l);\n+            this.class_InnerClasses_RC[l] = icTuple2.C;\n             if (icTuple2.C2 == null && icTuple2.N == null) {\n-                this.class_InnerClasses_F[k] = 0;\n+                this.class_InnerClasses_F[l] = 0;\n             }\n             else {\n                 if (icTuple2.F == 0) {\n-                    this.class_InnerClasses_F[k] = 65536;\n+                    this.class_InnerClasses_F[l] = 65536;\n                 }\n                 else {\n-                    this.class_InnerClasses_F[k] = icTuple2.F;\n+                    this.class_InnerClasses_F[l] = icTuple2.F;\n                 }\n                 this.classInnerClassesOuterRCN.add(icTuple2.C2);\n                 this.classInnerClassesNameRUN.add(icTuple2.N);\n             }\n         }\n-        final IntList classAttrCalls = new IntList();\n-        final IntList fieldAttrCalls = new IntList();\n-        final IntList methodAttrCalls = new IntList();\n-        final IntList codeAttrCalls = new IntList();\n+        final IntList list3 = new IntList();\n+        final IntList list4 = new IntList();\n+        final IntList list5 = new IntList();\n+        final IntList list6 = new IntList();\n         if (this.class_RVA_bands.hasContent()) {\n-            classAttrCalls.add(this.class_RVA_bands.numBackwardsCalls());\n+            list3.add(this.class_RVA_bands.numBackwardsCalls());\n         }\n         if (this.class_RIA_bands.hasContent()) {\n-            classAttrCalls.add(this.class_RIA_bands.numBackwardsCalls());\n+            list3.add(this.class_RIA_bands.numBackwardsCalls());\n         }\n         if (this.field_RVA_bands.hasContent()) {\n-            fieldAttrCalls.add(this.field_RVA_bands.numBackwardsCalls());\n+            list4.add(this.field_RVA_bands.numBackwardsCalls());\n         }\n         if (this.field_RIA_bands.hasContent()) {\n-            fieldAttrCalls.add(this.field_RIA_bands.numBackwardsCalls());\n+            list4.add(this.field_RIA_bands.numBackwardsCalls());\n         }\n         if (this.method_RVA_bands.hasContent()) {\n-            methodAttrCalls.add(this.method_RVA_bands.numBackwardsCalls());\n+            list5.add(this.method_RVA_bands.numBackwardsCalls());\n         }\n         if (this.method_RIA_bands.hasContent()) {\n-            methodAttrCalls.add(this.method_RIA_bands.numBackwardsCalls());\n+            list5.add(this.method_RIA_bands.numBackwardsCalls());\n         }\n         if (this.method_RVPA_bands.hasContent()) {\n-            methodAttrCalls.add(this.method_RVPA_bands.numBackwardsCalls());\n+            list5.add(this.method_RVPA_bands.numBackwardsCalls());\n         }\n         if (this.method_RIPA_bands.hasContent()) {\n-            methodAttrCalls.add(this.method_RIPA_bands.numBackwardsCalls());\n+            list5.add(this.method_RIPA_bands.numBackwardsCalls());\n         }\n         if (this.method_AD_bands.hasContent()) {\n-            methodAttrCalls.add(this.method_AD_bands.numBackwardsCalls());\n+            list5.add(this.method_AD_bands.numBackwardsCalls());\n         }\n-        final Comparator<NewAttributeBands> comparator = (arg0, arg1) -> arg0.getFlagIndex() - arg1.getFlagIndex();\n+        final Comparator comparator = (newAttributeBands5, newAttributeBands6) -> newAttributeBands5.getFlagIndex() - newAttributeBands6.getFlagIndex();\n         this.classAttributeBands.sort(comparator);\n         this.methodAttributeBands.sort(comparator);\n         this.fieldAttributeBands.sort(comparator);\n         this.codeAttributeBands.sort(comparator);\n-        for (final NewAttributeBands bands : this.classAttributeBands) {\n-            if (bands.isUsedAtLeastOnce()) {\n-                for (final int backwardsCallCount : bands.numBackwardsCalls()) {\n-                    classAttrCalls.add(backwardsCallCount);\n+        for (final NewAttributeBands newAttributeBands : this.classAttributeBands) {\n+            if (newAttributeBands.isUsedAtLeastOnce()) {\n+                final int[] numBackwardsCalls = newAttributeBands.numBackwardsCalls();\n+                for (int length = numBackwardsCalls.length, n9 = 0; n9 < length; ++n9) {\n+                    list3.add(numBackwardsCalls[n9]);\n                 }\n             }\n         }\n-        for (final NewAttributeBands bands : this.methodAttributeBands) {\n-            if (bands.isUsedAtLeastOnce()) {\n-                for (final int backwardsCallCount : bands.numBackwardsCalls()) {\n-                    methodAttrCalls.add(backwardsCallCount);\n+        for (final NewAttributeBands newAttributeBands2 : this.methodAttributeBands) {\n+            if (newAttributeBands2.isUsedAtLeastOnce()) {\n+                final int[] numBackwardsCalls2 = newAttributeBands2.numBackwardsCalls();\n+                for (int length2 = numBackwardsCalls2.length, n10 = 0; n10 < length2; ++n10) {\n+                    list5.add(numBackwardsCalls2[n10]);\n                 }\n             }\n         }\n-        for (final NewAttributeBands bands : this.fieldAttributeBands) {\n-            if (bands.isUsedAtLeastOnce()) {\n-                for (final int backwardsCallCount : bands.numBackwardsCalls()) {\n-                    fieldAttrCalls.add(backwardsCallCount);\n+        for (final NewAttributeBands newAttributeBands3 : this.fieldAttributeBands) {\n+            if (newAttributeBands3.isUsedAtLeastOnce()) {\n+                final int[] numBackwardsCalls3 = newAttributeBands3.numBackwardsCalls();\n+                for (int length3 = numBackwardsCalls3.length, n11 = 0; n11 < length3; ++n11) {\n+                    list4.add(numBackwardsCalls3[n11]);\n                 }\n             }\n         }\n-        for (final NewAttributeBands bands : this.codeAttributeBands) {\n-            if (bands.isUsedAtLeastOnce()) {\n-                for (final int backwardsCallCount : bands.numBackwardsCalls()) {\n-                    codeAttrCalls.add(backwardsCallCount);\n+        for (final NewAttributeBands newAttributeBands4 : this.codeAttributeBands) {\n+            if (newAttributeBands4.isUsedAtLeastOnce()) {\n+                final int[] numBackwardsCalls4 = newAttributeBands4.numBackwardsCalls();\n+                for (int length4 = numBackwardsCalls4.length, n12 = 0; n12 < length4; ++n12) {\n+                    list6.add(numBackwardsCalls4[n12]);\n                 }\n             }\n         }\n-        this.class_attr_calls = classAttrCalls.toArray();\n-        this.field_attr_calls = fieldAttrCalls.toArray();\n-        this.method_attr_calls = methodAttrCalls.toArray();\n-        this.code_attr_calls = codeAttrCalls.toArray();\n+        this.class_attr_calls = list3.toArray();\n+        this.field_attr_calls = list4.toArray();\n+        this.method_attr_calls = list5.toArray();\n+        this.code_attr_calls = list6.toArray();\n     }\n     \n-    public void pack(final OutputStream out) throws IOException, Pack200Exception {\n+    public void pack(final OutputStream outputStream) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing class bands...\");\n-        byte[] encodedBand = this.encodeBandInt(\"class_this\", this.getInts(this.class_this), Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_this[\" + this.class_this.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"class_super\", this.getInts(this.class_super), Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_super[\" + this.class_super.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"class_interface_count\", this.class_interface_count, Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_interface_count[\" + this.class_interface_count.length + \"]\");\n-        final int totalInterfaces = this.sum(this.class_interface_count);\n-        final int[] classInterface = new int[totalInterfaces];\n-        int k = 0;\n-        for (final CPClass[] element : this.class_interface) {\n-            if (element != null) {\n-                for (final CPClass cpClass : element) {\n-                    classInterface[k] = cpClass.getIndex();\n-                    ++k;\n-                }\n-            }\n-        }\n-        encodedBand = this.encodeBandInt(\"class_interface\", classInterface, Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_interface[\" + classInterface.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"class_field_count\", this.class_field_count, Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_field_count[\" + this.class_field_count.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"class_method_count\", this.class_method_count, Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_method_count[\" + this.class_method_count.length + \"]\");\n-        final int totalFields = this.sum(this.class_field_count);\n-        final int[] fieldDescr = new int[totalFields];\n-        k = 0;\n-        for (int i = 0; i < this.index; ++i) {\n-            for (int j = 0; j < this.field_descr[i].length; ++j) {\n-                final CPNameAndType descr = this.field_descr[i][j];\n-                fieldDescr[k] = descr.getIndex();\n-                ++k;\n-            }\n-        }\n-        encodedBand = this.encodeBandInt(\"field_descr\", fieldDescr, Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from field_descr[\" + fieldDescr.length + \"]\");\n-        this.writeFieldAttributeBands(out);\n-        final int totalMethods = this.sum(this.class_method_count);\n-        final int[] methodDescr = new int[totalMethods];\n-        k = 0;\n-        for (int l = 0; l < this.index; ++l) {\n-            for (int m = 0; m < this.method_descr[l].length; ++m) {\n-                final CPNameAndType descr2 = this.method_descr[l][m];\n-                methodDescr[k] = descr2.getIndex();\n-                ++k;\n-            }\n-        }\n-        encodedBand = this.encodeBandInt(\"method_descr\", methodDescr, Codec.MDELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from method_descr[\" + methodDescr.length + \"]\");\n-        this.writeMethodAttributeBands(out);\n-        this.writeClassAttributeBands(out);\n-        this.writeCodeBands(out);\n-    }\n-    \n-    private int sum(final int[] ints) {\n-        int sum = 0;\n-        for (final int j : ints) {\n-            sum += j;\n-        }\n-        return sum;\n-    }\n-    \n-    private void writeFieldAttributeBands(final OutputStream out) throws IOException, Pack200Exception {\n-        byte[] encodedBand = this.encodeFlags(\"field_flags\", this.field_flags, Codec.UNSIGNED5, Codec.UNSIGNED5, this.segmentHeader.have_field_flags_hi());\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from field_flags[\" + this.field_flags.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"field_attr_calls\", this.field_attr_calls, Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from field_attr_calls[\" + this.field_attr_calls.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"fieldConstantValueKQ\", this.cpEntryListToArray((List)this.fieldConstantValueKQ), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from fieldConstantValueKQ[\" + this.fieldConstantValueKQ.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"fieldSignature\", this.cpEntryListToArray((List)this.fieldSignature), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from fieldSignature[\" + this.fieldSignature.size() + \"]\");\n-        this.field_RVA_bands.pack(out);\n-        this.field_RIA_bands.pack(out);\n-        for (final NewAttributeBands bands : this.fieldAttributeBands) {\n-            bands.pack(out);\n-        }\n-    }\n-    \n-    private void writeMethodAttributeBands(final OutputStream out) throws IOException, Pack200Exception {\n-        byte[] encodedBand = this.encodeFlags(\"method_flags\", this.method_flags, Codec.UNSIGNED5, Codec.UNSIGNED5, this.segmentHeader.have_method_flags_hi());\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from method_flags[\" + this.method_flags.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"method_attr_calls\", this.method_attr_calls, Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from method_attr_calls[\" + this.method_attr_calls.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"methodExceptionNumber\", this.methodExceptionNumber.toArray(), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from methodExceptionNumber[\" + this.methodExceptionNumber.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"methodExceptionClasses\", this.cpEntryListToArray((List)this.methodExceptionClasses), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from methodExceptionClasses[\" + this.methodExceptionClasses.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"methodSignature\", this.cpEntryListToArray((List)this.methodSignature), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from methodSignature[\" + this.methodSignature.size() + \"]\");\n-        this.method_RVA_bands.pack(out);\n-        this.method_RIA_bands.pack(out);\n-        this.method_RVPA_bands.pack(out);\n-        this.method_RIPA_bands.pack(out);\n-        this.method_AD_bands.pack(out);\n-        for (final NewAttributeBands bands : this.methodAttributeBands) {\n-            bands.pack(out);\n-        }\n-    }\n-    \n-    private void writeClassAttributeBands(final OutputStream out) throws IOException, Pack200Exception {\n-        byte[] encodedBand = this.encodeFlags(\"class_flags\", this.class_flags, Codec.UNSIGNED5, Codec.UNSIGNED5, this.segmentHeader.have_class_flags_hi());\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_flags[\" + this.class_flags.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"class_attr_calls\", this.class_attr_calls, Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_attr_calls[\" + this.class_attr_calls.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"classSourceFile\", this.cpEntryOrNullListToArray((List)this.classSourceFile), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from classSourceFile[\" + this.classSourceFile.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"class_enclosing_method_RC\", this.cpEntryListToArray((List)this.classEnclosingMethodClass), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_enclosing_method_RC[\" + this.classEnclosingMethodClass.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"class_EnclosingMethod_RDN\", this.cpEntryOrNullListToArray((List)this.classEnclosingMethodDesc), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_EnclosingMethod_RDN[\" + this.classEnclosingMethodDesc.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"class_Signature_RS\", this.cpEntryListToArray((List)this.classSignature), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_Signature_RS[\" + this.classSignature.size() + \"]\");\n-        this.class_RVA_bands.pack(out);\n-        this.class_RIA_bands.pack(out);\n-        encodedBand = this.encodeBandInt(\"class_InnerClasses_N\", this.class_InnerClasses_N, Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_InnerClasses_N[\" + this.class_InnerClasses_N.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"class_InnerClasses_RC\", this.getInts(this.class_InnerClasses_RC), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_InnerClasses_RC[\" + this.class_InnerClasses_RC.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"class_InnerClasses_F\", this.class_InnerClasses_F, Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_InnerClasses_F[\" + this.class_InnerClasses_F.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"class_InnerClasses_outer_RCN\", this.cpEntryOrNullListToArray((List)this.classInnerClassesOuterRCN), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_InnerClasses_outer_RCN[\" + this.classInnerClassesOuterRCN.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"class_InnerClasses_name_RUN\", this.cpEntryOrNullListToArray((List)this.classInnerClassesNameRUN), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_InnerClasses_name_RUN[\" + this.classInnerClassesNameRUN.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"classFileVersionMinor\", this.classFileVersionMinor.toArray(), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from classFileVersionMinor[\" + this.classFileVersionMinor.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"classFileVersionMajor\", this.classFileVersionMajor.toArray(), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from classFileVersionMajor[\" + this.classFileVersionMajor.size() + \"]\");\n-        for (final NewAttributeBands classAttributeBand : this.classAttributeBands) {\n-            classAttributeBand.pack(out);\n-        }\n-    }\n-    \n-    private int[] getInts(final CPClass[] cpClasses) {\n-        final int[] ints = new int[cpClasses.length];\n-        for (int i = 0; i < ints.length; ++i) {\n-            if (cpClasses[i] != null) {\n-                ints[i] = cpClasses[i].getIndex();\n-            }\n-        }\n-        return ints;\n-    }\n-    \n-    private void writeCodeBands(final OutputStream out) throws IOException, Pack200Exception {\n-        byte[] encodedBand = this.encodeBandInt(\"codeHeaders\", this.codeHeaders, Codec.BYTE1);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHeaders[\" + this.codeHeaders.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"codeMaxStack\", this.codeMaxStack.toArray(), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeMaxStack[\" + this.codeMaxStack.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"codeMaxLocals\", this.codeMaxLocals.toArray(), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeMaxLocals[\" + this.codeMaxLocals.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"codeHandlerCount\", this.codeHandlerCount.toArray(), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHandlerCount[\" + this.codeHandlerCount.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"codeHandlerStartP\", this.integerListToArray(this.codeHandlerStartP), Codec.BCI5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHandlerStartP[\" + this.codeHandlerStartP.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"codeHandlerEndPO\", this.integerListToArray(this.codeHandlerEndPO), Codec.BRANCH5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHandlerEndPO[\" + this.codeHandlerEndPO.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"codeHandlerCatchPO\", this.integerListToArray(this.codeHandlerCatchPO), Codec.BRANCH5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHandlerCatchPO[\" + this.codeHandlerCatchPO.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"codeHandlerClass\", this.cpEntryOrNullListToArray((List)this.codeHandlerClass), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHandlerClass[\" + this.codeHandlerClass.size() + \"]\");\n-        this.writeCodeAttributeBands(out);\n-    }\n-    \n-    private void writeCodeAttributeBands(final OutputStream out) throws IOException, Pack200Exception {\n-        byte[] encodedBand = this.encodeFlags(\"codeFlags\", this.longListToArray((List)this.codeFlags), Codec.UNSIGNED5, Codec.UNSIGNED5, this.segmentHeader.have_code_flags_hi());\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeFlags[\" + this.codeFlags.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"code_attr_calls\", this.code_attr_calls, Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_attr_calls[\" + this.code_attr_calls.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"code_LineNumberTable_N\", this.codeLineNumberTableN.toArray(), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LineNumberTable_N[\" + this.codeLineNumberTableN.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"code_LineNumberTable_bci_P\", this.integerListToArray(this.codeLineNumberTableBciP), Codec.BCI5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LineNumberTable_bci_P[\" + this.codeLineNumberTableBciP.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"code_LineNumberTable_line\", this.codeLineNumberTableLine.toArray(), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LineNumberTable_line[\" + this.codeLineNumberTableLine.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"code_LocalVariableTable_N\", this.codeLocalVariableTableN.toArray(), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_N[\" + this.codeLocalVariableTableN.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"code_LocalVariableTable_bci_P\", this.integerListToArray(this.codeLocalVariableTableBciP), Codec.BCI5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_bci_P[\" + this.codeLocalVariableTableBciP.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"code_LocalVariableTable_span_O\", this.integerListToArray(this.codeLocalVariableTableSpanO), Codec.BRANCH5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_span_O[\" + this.codeLocalVariableTableSpanO.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"code_LocalVariableTable_name_RU\", this.cpEntryListToArray((List)this.codeLocalVariableTableNameRU), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_name_RU[\" + this.codeLocalVariableTableNameRU.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"code_LocalVariableTable_type_RS\", this.cpEntryListToArray((List)this.codeLocalVariableTableTypeRS), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_type_RS[\" + this.codeLocalVariableTableTypeRS.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"code_LocalVariableTable_slot\", this.codeLocalVariableTableSlot.toArray(), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_slot[\" + this.codeLocalVariableTableSlot.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"code_LocalVariableTypeTable_N\", this.codeLocalVariableTypeTableN.toArray(), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_N[\" + this.codeLocalVariableTypeTableN.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"code_LocalVariableTypeTable_bci_P\", this.integerListToArray(this.codeLocalVariableTypeTableBciP), Codec.BCI5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_bci_P[\" + this.codeLocalVariableTypeTableBciP.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"code_LocalVariableTypeTable_span_O\", this.integerListToArray(this.codeLocalVariableTypeTableSpanO), Codec.BRANCH5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_span_O[\" + this.codeLocalVariableTypeTableSpanO.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"code_LocalVariableTypeTable_name_RU\", this.cpEntryListToArray((List)this.codeLocalVariableTypeTableNameRU), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_name_RU[\" + this.codeLocalVariableTypeTableNameRU.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"code_LocalVariableTypeTable_type_RS\", this.cpEntryListToArray((List)this.codeLocalVariableTypeTableTypeRS), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_type_RS[\" + this.codeLocalVariableTypeTableTypeRS.size() + \"]\");\n-        encodedBand = this.encodeBandInt(\"code_LocalVariableTypeTable_slot\", this.codeLocalVariableTypeTableSlot.toArray(), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_slot[\" + this.codeLocalVariableTypeTableSlot.size() + \"]\");\n-        for (final NewAttributeBands bands : this.codeAttributeBands) {\n-            bands.pack(out);\n-        }\n-    }\n-    \n-    public void addMethod(int flags, final String name, final String desc, final String signature, final String[] exceptions) {\n-        final CPNameAndType nt = this.cpBands.getCPNameAndType(name, desc);\n-        this.tempMethodDesc.add(nt);\n-        if (signature != null) {\n-            this.methodSignature.add(this.cpBands.getCPSignature(signature));\n-            flags |= 0x80000;\n-        }\n-        if (exceptions != null) {\n-            this.methodExceptionNumber.add(exceptions.length);\n-            for (final String exception : exceptions) {\n-                this.methodExceptionClasses.add(this.cpBands.getCPClass(exception));\n-            }\n-            flags |= 0x40000;\n-        }\n-        if ((flags & 0x20000) != 0x0) {\n-            flags &= 0xFFFDFFFF;\n-            flags |= 0x100000;\n-        }\n-        this.tempMethodFlags.add(Long.valueOf((long)flags));\n-        this.numMethodArgs = countArgs(desc);\n-        if (!this.anySyntheticMethods && (flags & 0x1000) != 0x0 && this.segment.getCurrentClassReader().hasSyntheticAttributes()) {\n+        final byte[] encodeBandInt = this.encodeBandInt(\"class_this\", this.getInts(this.class_this), Codec.DELTA5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from class_this[\" + this.class_this.length + \"]\");\n+        final byte[] encodeBandInt2 = this.encodeBandInt(\"class_super\", this.getInts(this.class_super), Codec.DELTA5);\n+        outputStream.write(encodeBandInt2);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt2.length + \" bytes from class_super[\" + this.class_super.length + \"]\");\n+        final byte[] encodeBandInt3 = this.encodeBandInt(\"class_interface_count\", this.class_interface_count, Codec.DELTA5);\n+        outputStream.write(encodeBandInt3);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt3.length + \" bytes from class_interface_count[\" + this.class_interface_count.length + \"]\");\n+        final int[] array = new int[this.sum(this.class_interface_count)];\n+        int n = 0;\n+        for (final CPClass[] array2 : this.class_interface) {\n+            if (array2 != null) {\n+                final CPClass[] array3 = array2;\n+                for (int length2 = array3.length, j = 0; j < length2; ++j) {\n+                    array[n] = array3[j].getIndex();\n+                    ++n;\n+                }\n+            }\n+        }\n+        final byte[] encodeBandInt4 = this.encodeBandInt(\"class_interface\", array, Codec.DELTA5);\n+        outputStream.write(encodeBandInt4);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt4.length + \" bytes from class_interface[\" + array.length + \"]\");\n+        final byte[] encodeBandInt5 = this.encodeBandInt(\"class_field_count\", this.class_field_count, Codec.DELTA5);\n+        outputStream.write(encodeBandInt5);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt5.length + \" bytes from class_field_count[\" + this.class_field_count.length + \"]\");\n+        final byte[] encodeBandInt6 = this.encodeBandInt(\"class_method_count\", this.class_method_count, Codec.DELTA5);\n+        outputStream.write(encodeBandInt6);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt6.length + \" bytes from class_method_count[\" + this.class_method_count.length + \"]\");\n+        final int[] array4 = new int[this.sum(this.class_field_count)];\n+        int n2 = 0;\n+        for (int k = 0; k < this.index; ++k) {\n+            for (int l = 0; l < this.field_descr[k].length; ++l) {\n+                array4[n2] = this.field_descr[k][l].getIndex();\n+                ++n2;\n+            }\n+        }\n+        final byte[] encodeBandInt7 = this.encodeBandInt(\"field_descr\", array4, Codec.DELTA5);\n+        outputStream.write(encodeBandInt7);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt7.length + \" bytes from field_descr[\" + array4.length + \"]\");\n+        this.writeFieldAttributeBands(outputStream);\n+        final int[] array5 = new int[this.sum(this.class_method_count)];\n+        int n3 = 0;\n+        for (int n4 = 0; n4 < this.index; ++n4) {\n+            for (int n5 = 0; n5 < this.method_descr[n4].length; ++n5) {\n+                array5[n3] = this.method_descr[n4][n5].getIndex();\n+                ++n3;\n+            }\n+        }\n+        final byte[] encodeBandInt8 = this.encodeBandInt(\"method_descr\", array5, Codec.MDELTA5);\n+        outputStream.write(encodeBandInt8);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt8.length + \" bytes from method_descr[\" + array5.length + \"]\");\n+        this.writeMethodAttributeBands(outputStream);\n+        this.writeClassAttributeBands(outputStream);\n+        this.writeCodeBands(outputStream);\n+    }\n+    \n+    private int sum(final int[] array) {\n+        int n = 0;\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            n += array[i];\n+        }\n+        return n;\n+    }\n+    \n+    private void writeFieldAttributeBands(final OutputStream outputStream) throws IOException, Pack200Exception {\n+        final byte[] encodeFlags = this.encodeFlags(\"field_flags\", this.field_flags, Codec.UNSIGNED5, Codec.UNSIGNED5, this.segmentHeader.have_field_flags_hi());\n+        outputStream.write(encodeFlags);\n+        PackingUtils.log(\"Wrote \" + encodeFlags.length + \" bytes from field_flags[\" + this.field_flags.length + \"]\");\n+        final byte[] encodeBandInt = this.encodeBandInt(\"field_attr_calls\", this.field_attr_calls, Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from field_attr_calls[\" + this.field_attr_calls.length + \"]\");\n+        final byte[] encodeBandInt2 = this.encodeBandInt(\"fieldConstantValueKQ\", this.cpEntryListToArray((List)this.fieldConstantValueKQ), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt2);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt2.length + \" bytes from fieldConstantValueKQ[\" + this.fieldConstantValueKQ.size() + \"]\");\n+        final byte[] encodeBandInt3 = this.encodeBandInt(\"fieldSignature\", this.cpEntryListToArray((List)this.fieldSignature), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt3);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt3.length + \" bytes from fieldSignature[\" + this.fieldSignature.size() + \"]\");\n+        this.field_RVA_bands.pack(outputStream);\n+        this.field_RIA_bands.pack(outputStream);\n+        final Iterator<NewAttributeBands> iterator = this.fieldAttributeBands.iterator();\n+        while (iterator.hasNext()) {\n+            ((NewAttributeBands)iterator.next()).pack(outputStream);\n+        }\n+    }\n+    \n+    private void writeMethodAttributeBands(final OutputStream outputStream) throws IOException, Pack200Exception {\n+        final byte[] encodeFlags = this.encodeFlags(\"method_flags\", this.method_flags, Codec.UNSIGNED5, Codec.UNSIGNED5, this.segmentHeader.have_method_flags_hi());\n+        outputStream.write(encodeFlags);\n+        PackingUtils.log(\"Wrote \" + encodeFlags.length + \" bytes from method_flags[\" + this.method_flags.length + \"]\");\n+        final byte[] encodeBandInt = this.encodeBandInt(\"method_attr_calls\", this.method_attr_calls, Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from method_attr_calls[\" + this.method_attr_calls.length + \"]\");\n+        final byte[] encodeBandInt2 = this.encodeBandInt(\"methodExceptionNumber\", this.methodExceptionNumber.toArray(), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt2);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt2.length + \" bytes from methodExceptionNumber[\" + this.methodExceptionNumber.size() + \"]\");\n+        final byte[] encodeBandInt3 = this.encodeBandInt(\"methodExceptionClasses\", this.cpEntryListToArray((List)this.methodExceptionClasses), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt3);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt3.length + \" bytes from methodExceptionClasses[\" + this.methodExceptionClasses.size() + \"]\");\n+        final byte[] encodeBandInt4 = this.encodeBandInt(\"methodSignature\", this.cpEntryListToArray((List)this.methodSignature), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt4);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt4.length + \" bytes from methodSignature[\" + this.methodSignature.size() + \"]\");\n+        this.method_RVA_bands.pack(outputStream);\n+        this.method_RIA_bands.pack(outputStream);\n+        this.method_RVPA_bands.pack(outputStream);\n+        this.method_RIPA_bands.pack(outputStream);\n+        this.method_AD_bands.pack(outputStream);\n+        final Iterator<NewAttributeBands> iterator = this.methodAttributeBands.iterator();\n+        while (iterator.hasNext()) {\n+            ((NewAttributeBands)iterator.next()).pack(outputStream);\n+        }\n+    }\n+    \n+    private void writeClassAttributeBands(final OutputStream outputStream) throws IOException, Pack200Exception {\n+        final byte[] encodeFlags = this.encodeFlags(\"class_flags\", this.class_flags, Codec.UNSIGNED5, Codec.UNSIGNED5, this.segmentHeader.have_class_flags_hi());\n+        outputStream.write(encodeFlags);\n+        PackingUtils.log(\"Wrote \" + encodeFlags.length + \" bytes from class_flags[\" + this.class_flags.length + \"]\");\n+        final byte[] encodeBandInt = this.encodeBandInt(\"class_attr_calls\", this.class_attr_calls, Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from class_attr_calls[\" + this.class_attr_calls.length + \"]\");\n+        final byte[] encodeBandInt2 = this.encodeBandInt(\"classSourceFile\", this.cpEntryOrNullListToArray((List)this.classSourceFile), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt2);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt2.length + \" bytes from classSourceFile[\" + this.classSourceFile.size() + \"]\");\n+        final byte[] encodeBandInt3 = this.encodeBandInt(\"class_enclosing_method_RC\", this.cpEntryListToArray((List)this.classEnclosingMethodClass), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt3);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt3.length + \" bytes from class_enclosing_method_RC[\" + this.classEnclosingMethodClass.size() + \"]\");\n+        final byte[] encodeBandInt4 = this.encodeBandInt(\"class_EnclosingMethod_RDN\", this.cpEntryOrNullListToArray((List)this.classEnclosingMethodDesc), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt4);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt4.length + \" bytes from class_EnclosingMethod_RDN[\" + this.classEnclosingMethodDesc.size() + \"]\");\n+        final byte[] encodeBandInt5 = this.encodeBandInt(\"class_Signature_RS\", this.cpEntryListToArray((List)this.classSignature), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt5);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt5.length + \" bytes from class_Signature_RS[\" + this.classSignature.size() + \"]\");\n+        this.class_RVA_bands.pack(outputStream);\n+        this.class_RIA_bands.pack(outputStream);\n+        final byte[] encodeBandInt6 = this.encodeBandInt(\"class_InnerClasses_N\", this.class_InnerClasses_N, Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt6);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt6.length + \" bytes from class_InnerClasses_N[\" + this.class_InnerClasses_N.length + \"]\");\n+        final byte[] encodeBandInt7 = this.encodeBandInt(\"class_InnerClasses_RC\", this.getInts(this.class_InnerClasses_RC), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt7);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt7.length + \" bytes from class_InnerClasses_RC[\" + this.class_InnerClasses_RC.length + \"]\");\n+        final byte[] encodeBandInt8 = this.encodeBandInt(\"class_InnerClasses_F\", this.class_InnerClasses_F, Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt8);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt8.length + \" bytes from class_InnerClasses_F[\" + this.class_InnerClasses_F.length + \"]\");\n+        final byte[] encodeBandInt9 = this.encodeBandInt(\"class_InnerClasses_outer_RCN\", this.cpEntryOrNullListToArray((List)this.classInnerClassesOuterRCN), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt9);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt9.length + \" bytes from class_InnerClasses_outer_RCN[\" + this.classInnerClassesOuterRCN.size() + \"]\");\n+        final byte[] encodeBandInt10 = this.encodeBandInt(\"class_InnerClasses_name_RUN\", this.cpEntryOrNullListToArray((List)this.classInnerClassesNameRUN), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt10);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt10.length + \" bytes from class_InnerClasses_name_RUN[\" + this.classInnerClassesNameRUN.size() + \"]\");\n+        final byte[] encodeBandInt11 = this.encodeBandInt(\"classFileVersionMinor\", this.classFileVersionMinor.toArray(), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt11);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt11.length + \" bytes from classFileVersionMinor[\" + this.classFileVersionMinor.size() + \"]\");\n+        final byte[] encodeBandInt12 = this.encodeBandInt(\"classFileVersionMajor\", this.classFileVersionMajor.toArray(), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt12);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt12.length + \" bytes from classFileVersionMajor[\" + this.classFileVersionMajor.size() + \"]\");\n+        final Iterator<NewAttributeBands> iterator = this.classAttributeBands.iterator();\n+        while (iterator.hasNext()) {\n+            ((NewAttributeBands)iterator.next()).pack(outputStream);\n+        }\n+    }\n+    \n+    private int[] getInts(final CPClass[] array) {\n+        final int[] array2 = new int[array.length];\n+        for (int i = 0; i < array2.length; ++i) {\n+            if (array[i] != null) {\n+                array2[i] = array[i].getIndex();\n+            }\n+        }\n+        return array2;\n+    }\n+    \n+    private void writeCodeBands(final OutputStream outputStream) throws IOException, Pack200Exception {\n+        final byte[] encodeBandInt = this.encodeBandInt(\"codeHeaders\", this.codeHeaders, Codec.BYTE1);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from codeHeaders[\" + this.codeHeaders.length + \"]\");\n+        final byte[] encodeBandInt2 = this.encodeBandInt(\"codeMaxStack\", this.codeMaxStack.toArray(), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt2);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt2.length + \" bytes from codeMaxStack[\" + this.codeMaxStack.size() + \"]\");\n+        final byte[] encodeBandInt3 = this.encodeBandInt(\"codeMaxLocals\", this.codeMaxLocals.toArray(), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt3);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt3.length + \" bytes from codeMaxLocals[\" + this.codeMaxLocals.size() + \"]\");\n+        final byte[] encodeBandInt4 = this.encodeBandInt(\"codeHandlerCount\", this.codeHandlerCount.toArray(), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt4);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt4.length + \" bytes from codeHandlerCount[\" + this.codeHandlerCount.size() + \"]\");\n+        final byte[] encodeBandInt5 = this.encodeBandInt(\"codeHandlerStartP\", this.integerListToArray(this.codeHandlerStartP), Codec.BCI5);\n+        outputStream.write(encodeBandInt5);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt5.length + \" bytes from codeHandlerStartP[\" + this.codeHandlerStartP.size() + \"]\");\n+        final byte[] encodeBandInt6 = this.encodeBandInt(\"codeHandlerEndPO\", this.integerListToArray(this.codeHandlerEndPO), Codec.BRANCH5);\n+        outputStream.write(encodeBandInt6);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt6.length + \" bytes from codeHandlerEndPO[\" + this.codeHandlerEndPO.size() + \"]\");\n+        final byte[] encodeBandInt7 = this.encodeBandInt(\"codeHandlerCatchPO\", this.integerListToArray(this.codeHandlerCatchPO), Codec.BRANCH5);\n+        outputStream.write(encodeBandInt7);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt7.length + \" bytes from codeHandlerCatchPO[\" + this.codeHandlerCatchPO.size() + \"]\");\n+        final byte[] encodeBandInt8 = this.encodeBandInt(\"codeHandlerClass\", this.cpEntryOrNullListToArray((List)this.codeHandlerClass), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt8);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt8.length + \" bytes from codeHandlerClass[\" + this.codeHandlerClass.size() + \"]\");\n+        this.writeCodeAttributeBands(outputStream);\n+    }\n+    \n+    private void writeCodeAttributeBands(final OutputStream outputStream) throws IOException, Pack200Exception {\n+        final byte[] encodeFlags = this.encodeFlags(\"codeFlags\", this.longListToArray((List)this.codeFlags), Codec.UNSIGNED5, Codec.UNSIGNED5, this.segmentHeader.have_code_flags_hi());\n+        outputStream.write(encodeFlags);\n+        PackingUtils.log(\"Wrote \" + encodeFlags.length + \" bytes from codeFlags[\" + this.codeFlags.size() + \"]\");\n+        final byte[] encodeBandInt = this.encodeBandInt(\"code_attr_calls\", this.code_attr_calls, Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from code_attr_calls[\" + this.code_attr_calls.length + \"]\");\n+        final byte[] encodeBandInt2 = this.encodeBandInt(\"code_LineNumberTable_N\", this.codeLineNumberTableN.toArray(), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt2);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt2.length + \" bytes from code_LineNumberTable_N[\" + this.codeLineNumberTableN.size() + \"]\");\n+        final byte[] encodeBandInt3 = this.encodeBandInt(\"code_LineNumberTable_bci_P\", this.integerListToArray(this.codeLineNumberTableBciP), Codec.BCI5);\n+        outputStream.write(encodeBandInt3);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt3.length + \" bytes from code_LineNumberTable_bci_P[\" + this.codeLineNumberTableBciP.size() + \"]\");\n+        final byte[] encodeBandInt4 = this.encodeBandInt(\"code_LineNumberTable_line\", this.codeLineNumberTableLine.toArray(), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt4);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt4.length + \" bytes from code_LineNumberTable_line[\" + this.codeLineNumberTableLine.size() + \"]\");\n+        final byte[] encodeBandInt5 = this.encodeBandInt(\"code_LocalVariableTable_N\", this.codeLocalVariableTableN.toArray(), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt5);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt5.length + \" bytes from code_LocalVariableTable_N[\" + this.codeLocalVariableTableN.size() + \"]\");\n+        final byte[] encodeBandInt6 = this.encodeBandInt(\"code_LocalVariableTable_bci_P\", this.integerListToArray(this.codeLocalVariableTableBciP), Codec.BCI5);\n+        outputStream.write(encodeBandInt6);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt6.length + \" bytes from code_LocalVariableTable_bci_P[\" + this.codeLocalVariableTableBciP.size() + \"]\");\n+        final byte[] encodeBandInt7 = this.encodeBandInt(\"code_LocalVariableTable_span_O\", this.integerListToArray(this.codeLocalVariableTableSpanO), Codec.BRANCH5);\n+        outputStream.write(encodeBandInt7);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt7.length + \" bytes from code_LocalVariableTable_span_O[\" + this.codeLocalVariableTableSpanO.size() + \"]\");\n+        final byte[] encodeBandInt8 = this.encodeBandInt(\"code_LocalVariableTable_name_RU\", this.cpEntryListToArray((List)this.codeLocalVariableTableNameRU), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt8);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt8.length + \" bytes from code_LocalVariableTable_name_RU[\" + this.codeLocalVariableTableNameRU.size() + \"]\");\n+        final byte[] encodeBandInt9 = this.encodeBandInt(\"code_LocalVariableTable_type_RS\", this.cpEntryListToArray((List)this.codeLocalVariableTableTypeRS), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt9);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt9.length + \" bytes from code_LocalVariableTable_type_RS[\" + this.codeLocalVariableTableTypeRS.size() + \"]\");\n+        final byte[] encodeBandInt10 = this.encodeBandInt(\"code_LocalVariableTable_slot\", this.codeLocalVariableTableSlot.toArray(), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt10);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt10.length + \" bytes from code_LocalVariableTable_slot[\" + this.codeLocalVariableTableSlot.size() + \"]\");\n+        final byte[] encodeBandInt11 = this.encodeBandInt(\"code_LocalVariableTypeTable_N\", this.codeLocalVariableTypeTableN.toArray(), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt11);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt11.length + \" bytes from code_LocalVariableTypeTable_N[\" + this.codeLocalVariableTypeTableN.size() + \"]\");\n+        final byte[] encodeBandInt12 = this.encodeBandInt(\"code_LocalVariableTypeTable_bci_P\", this.integerListToArray(this.codeLocalVariableTypeTableBciP), Codec.BCI5);\n+        outputStream.write(encodeBandInt12);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt12.length + \" bytes from code_LocalVariableTypeTable_bci_P[\" + this.codeLocalVariableTypeTableBciP.size() + \"]\");\n+        final byte[] encodeBandInt13 = this.encodeBandInt(\"code_LocalVariableTypeTable_span_O\", this.integerListToArray(this.codeLocalVariableTypeTableSpanO), Codec.BRANCH5);\n+        outputStream.write(encodeBandInt13);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt13.length + \" bytes from code_LocalVariableTypeTable_span_O[\" + this.codeLocalVariableTypeTableSpanO.size() + \"]\");\n+        final byte[] encodeBandInt14 = this.encodeBandInt(\"code_LocalVariableTypeTable_name_RU\", this.cpEntryListToArray((List)this.codeLocalVariableTypeTableNameRU), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt14);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt14.length + \" bytes from code_LocalVariableTypeTable_name_RU[\" + this.codeLocalVariableTypeTableNameRU.size() + \"]\");\n+        final byte[] encodeBandInt15 = this.encodeBandInt(\"code_LocalVariableTypeTable_type_RS\", this.cpEntryListToArray((List)this.codeLocalVariableTypeTableTypeRS), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt15);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt15.length + \" bytes from code_LocalVariableTypeTable_type_RS[\" + this.codeLocalVariableTypeTableTypeRS.size() + \"]\");\n+        final byte[] encodeBandInt16 = this.encodeBandInt(\"code_LocalVariableTypeTable_slot\", this.codeLocalVariableTypeTableSlot.toArray(), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt16);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt16.length + \" bytes from code_LocalVariableTypeTable_slot[\" + this.codeLocalVariableTypeTableSlot.size() + \"]\");\n+        final Iterator<NewAttributeBands> iterator = this.codeAttributeBands.iterator();\n+        while (iterator.hasNext()) {\n+            ((NewAttributeBands)iterator.next()).pack(outputStream);\n+        }\n+    }\n+    \n+    public void addMethod(int n, final String s, final String s2, final String s3, final String[] array) {\n+        this.tempMethodDesc.add(this.cpBands.getCPNameAndType(s, s2));\n+        if (s3 != null) {\n+            this.methodSignature.add(this.cpBands.getCPSignature(s3));\n+            n |= 0x80000;\n+        }\n+        if (array != null) {\n+            this.methodExceptionNumber.add(array.length);\n+            for (int length = array.length, i = 0; i < length; ++i) {\n+                this.methodExceptionClasses.add(this.cpBands.getCPClass(array[i]));\n+            }\n+            n |= 0x40000;\n+        }\n+        if ((n & 0x20000) != 0x0) {\n+            n &= 0xFFFDFFFF;\n+            n |= 0x100000;\n+        }\n+        this.tempMethodFlags.add(Long.valueOf((long)n));\n+        this.numMethodArgs = countArgs(s2);\n+        if (!this.anySyntheticMethods && (n & 0x1000) != 0x0 && this.segment.getCurrentClassReader().hasSyntheticAttributes()) {\n             this.cpBands.addCPUtf8(\"Synthetic\");\n             this.anySyntheticMethods = true;\n         }\n     }\n     \n     public void endOfMethod() {\n         if (this.tempMethodRVPA != null) {\n@@ -727,299 +736,289 @@\n             this.tempMethodRVPA = null;\n         }\n         if (this.tempMethodRIPA != null) {\n             this.method_RIPA_bands.addParameterAnnotation(this.tempMethodRIPA.numParams, this.tempMethodRIPA.annoN, this.tempMethodRIPA.pairN, this.tempMethodRIPA.typeRS, this.tempMethodRIPA.nameRU, this.tempMethodRIPA.tags, this.tempMethodRIPA.values, this.tempMethodRIPA.caseArrayN, this.tempMethodRIPA.nestTypeRS, this.tempMethodRIPA.nestNameRU, this.tempMethodRIPA.nestPairN);\n             this.tempMethodRIPA = null;\n         }\n         if (this.codeFlags.size() > 0) {\n-            final long latestCodeFlag = (long)Long.valueOf(this.codeFlags.get(this.codeFlags.size() - 1));\n-            final int latestLocalVariableTableN = this.codeLocalVariableTableN.get(this.codeLocalVariableTableN.size() - 1);\n-            if (latestCodeFlag == 4L && latestLocalVariableTableN == 0) {\n+            final long longValue = (long)Long.valueOf(this.codeFlags.get(this.codeFlags.size() - 1));\n+            final int value = this.codeLocalVariableTableN.get(this.codeLocalVariableTableN.size() - 1);\n+            if (longValue == 4L && value == 0) {\n                 this.codeLocalVariableTableN.remove(this.codeLocalVariableTableN.size() - 1);\n                 this.codeFlags.remove(this.codeFlags.size() - 1);\n                 this.codeFlags.add(Long.valueOf(0L));\n             }\n         }\n     }\n     \n-    protected static int countArgs(final String descriptor) {\n-        final int bra = descriptor.indexOf(40);\n-        final int ket = descriptor.indexOf(41);\n-        if (bra == -1 || ket == -1 || ket < bra) {\n+    protected static int countArgs(final String s) {\n+        final int index = s.indexOf(40);\n+        final int index2 = s.indexOf(41);\n+        if (index == -1 || index2 == -1 || index2 < index) {\n             throw new IllegalArgumentException(\"No arguments\");\n         }\n-        boolean inType = false;\n-        boolean consumingNextType = false;\n-        int count = 0;\n-        for (int i = bra + 1; i < ket; ++i) {\n-            final char charAt = descriptor.charAt(i);\n-            if (inType && charAt == ';') {\n-                inType = false;\n-                consumingNextType = false;\n-            }\n-            else if (!inType && charAt == 'L') {\n-                inType = true;\n-                ++count;\n-            }\n-            else if (charAt == '[') {\n-                consumingNextType = true;\n-            }\n-            else if (!inType) {\n-                if (consumingNextType) {\n-                    ++count;\n-                    consumingNextType = false;\n+        int n = 0;\n+        int n2 = 0;\n+        int n3 = 0;\n+        for (int i = index + 1; i < index2; ++i) {\n+            final char char1 = s.charAt(i);\n+            if (n != 0 && char1 == ';') {\n+                n = 0;\n+                n2 = 0;\n+            }\n+            else if (n == 0 && char1 == 'L') {\n+                n = 1;\n+                ++n3;\n+            }\n+            else if (char1 == '[') {\n+                n2 = 1;\n+            }\n+            else if (n == 0) {\n+                if (n2 != 0) {\n+                    ++n3;\n+                    n2 = 0;\n                 }\n-                else if (charAt == 'D' || charAt == 'J') {\n-                    count += 2;\n+                else if (char1 == 'D' || char1 == 'J') {\n+                    n3 += 2;\n                 }\n                 else {\n-                    ++count;\n+                    ++n3;\n                 }\n             }\n         }\n-        return count;\n+        return n3;\n     }\n     \n     public void endOfClass() {\n-        final int numFields = this.tempFieldDesc.size();\n-        this.class_field_count[this.index] = numFields;\n-        this.field_descr[this.index] = new CPNameAndType[numFields];\n-        this.field_flags[this.index] = new long[numFields];\n-        for (int i = 0; i < numFields; ++i) {\n+        final int size = this.tempFieldDesc.size();\n+        this.class_field_count[this.index] = size;\n+        this.field_descr[this.index] = new CPNameAndType[size];\n+        this.field_flags[this.index] = new long[size];\n+        for (int i = 0; i < size; ++i) {\n             this.field_descr[this.index][i] = this.tempFieldDesc.get(i);\n             this.field_flags[this.index][i] = Long.valueOf(this.tempFieldFlags.get(i));\n         }\n-        final int numMethods = this.tempMethodDesc.size();\n-        this.class_method_count[this.index] = numMethods;\n-        this.method_descr[this.index] = new CPNameAndType[numMethods];\n-        this.method_flags[this.index] = new long[numMethods];\n-        for (int j = 0; j < numMethods; ++j) {\n+        final int size2 = this.tempMethodDesc.size();\n+        this.class_method_count[this.index] = size2;\n+        this.method_descr[this.index] = new CPNameAndType[size2];\n+        this.method_flags[this.index] = new long[size2];\n+        for (int j = 0; j < size2; ++j) {\n             this.method_descr[this.index][j] = this.tempMethodDesc.get(j);\n             this.method_flags[this.index][j] = Long.valueOf(this.tempMethodFlags.get(j));\n         }\n         this.tempFieldDesc.clear();\n         this.tempFieldFlags.clear();\n         this.tempMethodDesc.clear();\n         this.tempMethodFlags.clear();\n         ++this.index;\n     }\n     \n-    public void addSourceFile(final String source) {\n-        String implicitSourceFileName = this.class_this[this.index].toString();\n-        if (implicitSourceFileName.indexOf(36) != -1) {\n-            implicitSourceFileName = implicitSourceFileName.substring(0, implicitSourceFileName.indexOf(36));\n+    public void addSourceFile(final String s) {\n+        String s2 = this.class_this[this.index].toString();\n+        if (s2.indexOf(36) != -1) {\n+            s2 = s2.substring(0, s2.indexOf(36));\n         }\n-        implicitSourceFileName = implicitSourceFileName.substring(implicitSourceFileName.lastIndexOf(47) + 1) + \".java\";\n-        if (source.equals(implicitSourceFileName)) {\n+        if (s.equals(s2.substring(s2.lastIndexOf(47) + 1) + \".java\")) {\n             this.classSourceFile.add(null);\n         }\n         else {\n-            this.classSourceFile.add(this.cpBands.getCPUtf8(source));\n+            this.classSourceFile.add(this.cpBands.getCPUtf8(s));\n         }\n         final long[] class_flags = this.class_flags;\n         final int index = this.index;\n         class_flags[index] |= 0x20000L;\n     }\n     \n-    public void addEnclosingMethod(final String owner, final String name, final String desc) {\n+    public void addEnclosingMethod(final String s, final String s2, final String s3) {\n         final long[] class_flags = this.class_flags;\n         final int index = this.index;\n         class_flags[index] |= 0x40000L;\n-        this.classEnclosingMethodClass.add((ConstantPoolEntry)this.cpBands.getCPClass(owner));\n-        this.classEnclosingMethodDesc.add((ConstantPoolEntry)((name == null) ? null : this.cpBands.getCPNameAndType(name, desc)));\n+        this.classEnclosingMethodClass.add((ConstantPoolEntry)this.cpBands.getCPClass(s));\n+        this.classEnclosingMethodDesc.add((ConstantPoolEntry)((s2 == null) ? null : this.cpBands.getCPNameAndType(s2, s3)));\n     }\n     \n-    public void addClassAttribute(final NewAttribute attribute) {\n-        final String attributeName = attribute.type;\n-        for (final NewAttributeBands bands : this.classAttributeBands) {\n-            if (bands.getAttributeName().equals(attributeName)) {\n-                bands.addAttribute(attribute);\n-                final int flagIndex = bands.getFlagIndex();\n+    public void addClassAttribute(final NewAttribute newAttribute) {\n+        final String type = newAttribute.type;\n+        for (final NewAttributeBands newAttributeBands : this.classAttributeBands) {\n+            if (newAttributeBands.getAttributeName().equals(type)) {\n+                newAttributeBands.addAttribute(newAttribute);\n+                final int flagIndex = newAttributeBands.getFlagIndex();\n                 final long[] class_flags = this.class_flags;\n                 final int index = this.index;\n                 class_flags[index] |= 1 << flagIndex;\n                 return;\n             }\n         }\n-        throw new IllegalArgumentException(\"No suitable definition for \" + attributeName);\n+        throw new IllegalArgumentException(\"No suitable definition for \" + type);\n     }\n     \n-    public void addFieldAttribute(final NewAttribute attribute) {\n-        final String attributeName = attribute.type;\n-        for (final NewAttributeBands bands : this.fieldAttributeBands) {\n-            if (bands.getAttributeName().equals(attributeName)) {\n-                bands.addAttribute(attribute);\n-                final int flagIndex = bands.getFlagIndex();\n-                final Long flags = Long.valueOf(this.tempFieldFlags.remove(this.tempFieldFlags.size() - 1));\n-                this.tempFieldFlags.add(Long.valueOf((long)flags | (long)(1 << flagIndex)));\n+    public void addFieldAttribute(final NewAttribute newAttribute) {\n+        final String type = newAttribute.type;\n+        for (final NewAttributeBands newAttributeBands : this.fieldAttributeBands) {\n+            if (newAttributeBands.getAttributeName().equals(type)) {\n+                newAttributeBands.addAttribute(newAttribute);\n+                this.tempFieldFlags.add(Long.valueOf((long)Long.valueOf(this.tempFieldFlags.remove(this.tempFieldFlags.size() - 1)) | (long)(1 << newAttributeBands.getFlagIndex())));\n                 return;\n             }\n         }\n-        throw new IllegalArgumentException(\"No suitable definition for \" + attributeName);\n+        throw new IllegalArgumentException(\"No suitable definition for \" + type);\n     }\n     \n-    public void addMethodAttribute(final NewAttribute attribute) {\n-        final String attributeName = attribute.type;\n-        for (final NewAttributeBands bands : this.methodAttributeBands) {\n-            if (bands.getAttributeName().equals(attributeName)) {\n-                bands.addAttribute(attribute);\n-                final int flagIndex = bands.getFlagIndex();\n-                final Long flags = Long.valueOf(this.tempMethodFlags.remove(this.tempMethodFlags.size() - 1));\n-                this.tempMethodFlags.add(Long.valueOf((long)flags | (long)(1 << flagIndex)));\n+    public void addMethodAttribute(final NewAttribute newAttribute) {\n+        final String type = newAttribute.type;\n+        for (final NewAttributeBands newAttributeBands : this.methodAttributeBands) {\n+            if (newAttributeBands.getAttributeName().equals(type)) {\n+                newAttributeBands.addAttribute(newAttribute);\n+                this.tempMethodFlags.add(Long.valueOf((long)Long.valueOf(this.tempMethodFlags.remove(this.tempMethodFlags.size() - 1)) | (long)(1 << newAttributeBands.getFlagIndex())));\n                 return;\n             }\n         }\n-        throw new IllegalArgumentException(\"No suitable definition for \" + attributeName);\n+        throw new IllegalArgumentException(\"No suitable definition for \" + type);\n     }\n     \n-    public void addCodeAttribute(final NewAttribute attribute) {\n-        final String attributeName = attribute.type;\n-        for (final NewAttributeBands bands : this.codeAttributeBands) {\n-            if (bands.getAttributeName().equals(attributeName)) {\n-                bands.addAttribute(attribute);\n-                final int flagIndex = bands.getFlagIndex();\n-                final Long flags = Long.valueOf(this.codeFlags.remove(this.codeFlags.size() - 1));\n-                this.codeFlags.add(Long.valueOf((long)flags | (long)(1 << flagIndex)));\n+    public void addCodeAttribute(final NewAttribute newAttribute) {\n+        final String type = newAttribute.type;\n+        for (final NewAttributeBands newAttributeBands : this.codeAttributeBands) {\n+            if (newAttributeBands.getAttributeName().equals(type)) {\n+                newAttributeBands.addAttribute(newAttribute);\n+                this.codeFlags.add(Long.valueOf((long)Long.valueOf(this.codeFlags.remove(this.codeFlags.size() - 1)) | (long)(1 << newAttributeBands.getFlagIndex())));\n                 return;\n             }\n         }\n-        throw new IllegalArgumentException(\"No suitable definition for \" + attributeName);\n+        throw new IllegalArgumentException(\"No suitable definition for \" + type);\n     }\n     \n-    public void addMaxStack(final int maxStack, int maxLocals) {\n-        final Long latestFlag = Long.valueOf(this.tempMethodFlags.remove(this.tempMethodFlags.size() - 1));\n-        final Long newFlag = Long.valueOf(latestFlag.intValue() | 0x20000);\n-        this.tempMethodFlags.add(newFlag);\n-        this.codeMaxStack.add(maxStack);\n-        if (((long)newFlag & 0x8L) == 0x0L) {\n-            --maxLocals;\n+    public void addMaxStack(final int n, int n2) {\n+        final Long value = Long.valueOf(Long.valueOf(this.tempMethodFlags.remove(this.tempMethodFlags.size() - 1)).intValue() | 0x20000);\n+        this.tempMethodFlags.add(value);\n+        this.codeMaxStack.add(n);\n+        if (((long)value & 0x8L) == 0x0L) {\n+            --n2;\n         }\n-        maxLocals -= this.numMethodArgs;\n-        this.codeMaxLocals.add(maxLocals);\n+        n2 -= this.numMethodArgs;\n+        this.codeMaxLocals.add(n2);\n     }\n     \n     public void addCode() {\n         this.codeHandlerCount.add(0);\n         if (!this.stripDebug) {\n             this.codeFlags.add(Long.valueOf(4L));\n             this.codeLocalVariableTableN.add(0);\n         }\n     }\n     \n-    public void addHandler(final Label start, final Label end, final Label handler, final String type) {\n-        final int handlers = this.codeHandlerCount.remove(this.codeHandlerCount.size() - 1);\n-        this.codeHandlerCount.add(handlers + 1);\n-        this.codeHandlerStartP.add(start);\n-        this.codeHandlerEndPO.add(end);\n-        this.codeHandlerCatchPO.add(handler);\n-        this.codeHandlerClass.add((type == null) ? null : this.cpBands.getCPClass(type));\n+    public void addHandler(final Label label, final Label label2, final Label label3, final String s) {\n+        this.codeHandlerCount.add(this.codeHandlerCount.remove(this.codeHandlerCount.size() - 1) + 1);\n+        this.codeHandlerStartP.add(label);\n+        this.codeHandlerEndPO.add(label2);\n+        this.codeHandlerCatchPO.add(label3);\n+        this.codeHandlerClass.add((s == null) ? null : this.cpBands.getCPClass(s));\n     }\n     \n-    public void addLineNumber(final int line, final Label start) {\n-        final Long latestCodeFlag = Long.valueOf(this.codeFlags.get(this.codeFlags.size() - 1));\n-        if ((latestCodeFlag.intValue() & 0x2) == 0x0) {\n+    public void addLineNumber(final int n, final Label label) {\n+        final Long n2 = Long.valueOf(this.codeFlags.get(this.codeFlags.size() - 1));\n+        if ((n2.intValue() & 0x2) == 0x0) {\n             this.codeFlags.remove(this.codeFlags.size() - 1);\n-            this.codeFlags.add(Long.valueOf((long)(latestCodeFlag.intValue() | 0x2)));\n+            this.codeFlags.add(Long.valueOf((long)(n2.intValue() | 0x2)));\n             this.codeLineNumberTableN.add(1);\n         }\n         else {\n             this.codeLineNumberTableN.increment(this.codeLineNumberTableN.size() - 1);\n         }\n-        this.codeLineNumberTableLine.add(line);\n-        this.codeLineNumberTableBciP.add(start);\n+        this.codeLineNumberTableLine.add(n);\n+        this.codeLineNumberTableBciP.add(label);\n     }\n     \n-    public void addLocalVariable(final String name, final String desc, final String signature, final Label start, final Label end, final int indx) {\n-        if (signature != null) {\n-            final Long latestCodeFlag = Long.valueOf(this.codeFlags.get(this.codeFlags.size() - 1));\n-            if ((latestCodeFlag.intValue() & 0x8) == 0x0) {\n+    public void addLocalVariable(final String s, final String s2, final String s3, final Label label, final Label label2, final int n) {\n+        if (s3 != null) {\n+            final Long n2 = Long.valueOf(this.codeFlags.get(this.codeFlags.size() - 1));\n+            if ((n2.intValue() & 0x8) == 0x0) {\n                 this.codeFlags.remove(this.codeFlags.size() - 1);\n-                this.codeFlags.add(Long.valueOf((long)(latestCodeFlag.intValue() | 0x8)));\n+                this.codeFlags.add(Long.valueOf((long)(n2.intValue() | 0x8)));\n                 this.codeLocalVariableTypeTableN.add(1);\n             }\n             else {\n                 this.codeLocalVariableTypeTableN.increment(this.codeLocalVariableTypeTableN.size() - 1);\n             }\n-            this.codeLocalVariableTypeTableBciP.add(start);\n-            this.codeLocalVariableTypeTableSpanO.add(end);\n-            this.codeLocalVariableTypeTableNameRU.add((ConstantPoolEntry)this.cpBands.getCPUtf8(name));\n-            this.codeLocalVariableTypeTableTypeRS.add((ConstantPoolEntry)this.cpBands.getCPSignature(signature));\n-            this.codeLocalVariableTypeTableSlot.add(indx);\n+            this.codeLocalVariableTypeTableBciP.add(label);\n+            this.codeLocalVariableTypeTableSpanO.add(label2);\n+            this.codeLocalVariableTypeTableNameRU.add((ConstantPoolEntry)this.cpBands.getCPUtf8(s));\n+            this.codeLocalVariableTypeTableTypeRS.add((ConstantPoolEntry)this.cpBands.getCPSignature(s3));\n+            this.codeLocalVariableTypeTableSlot.add(n);\n         }\n         this.codeLocalVariableTableN.increment(this.codeLocalVariableTableN.size() - 1);\n-        this.codeLocalVariableTableBciP.add(start);\n-        this.codeLocalVariableTableSpanO.add(end);\n-        this.codeLocalVariableTableNameRU.add((ConstantPoolEntry)this.cpBands.getCPUtf8(name));\n-        this.codeLocalVariableTableTypeRS.add((ConstantPoolEntry)this.cpBands.getCPSignature(desc));\n-        this.codeLocalVariableTableSlot.add(indx);\n-    }\n-    \n-    public void doBciRenumbering(final IntList bciRenumbering, final Map<Label, Integer> labelsToOffsets) {\n-        this.renumberBci(this.codeLineNumberTableBciP, bciRenumbering, labelsToOffsets);\n-        this.renumberBci(this.codeLocalVariableTableBciP, bciRenumbering, labelsToOffsets);\n-        this.renumberOffsetBci(this.codeLocalVariableTableBciP, this.codeLocalVariableTableSpanO, bciRenumbering, labelsToOffsets);\n-        this.renumberBci(this.codeLocalVariableTypeTableBciP, bciRenumbering, labelsToOffsets);\n-        this.renumberOffsetBci(this.codeLocalVariableTypeTableBciP, this.codeLocalVariableTypeTableSpanO, bciRenumbering, labelsToOffsets);\n-        this.renumberBci(this.codeHandlerStartP, bciRenumbering, labelsToOffsets);\n-        this.renumberOffsetBci(this.codeHandlerStartP, this.codeHandlerEndPO, bciRenumbering, labelsToOffsets);\n-        this.renumberDoubleOffsetBci(this.codeHandlerStartP, this.codeHandlerEndPO, this.codeHandlerCatchPO, bciRenumbering, labelsToOffsets);\n-        for (final NewAttributeBands newAttributeBandSet : this.classAttributeBands) {\n-            newAttributeBandSet.renumberBci(bciRenumbering, (Map)labelsToOffsets);\n-        }\n-        for (final NewAttributeBands newAttributeBandSet : this.methodAttributeBands) {\n-            newAttributeBandSet.renumberBci(bciRenumbering, (Map)labelsToOffsets);\n-        }\n-        for (final NewAttributeBands newAttributeBandSet : this.fieldAttributeBands) {\n-            newAttributeBandSet.renumberBci(bciRenumbering, (Map)labelsToOffsets);\n-        }\n-        for (final NewAttributeBands newAttributeBandSet : this.codeAttributeBands) {\n-            newAttributeBandSet.renumberBci(bciRenumbering, (Map)labelsToOffsets);\n+        this.codeLocalVariableTableBciP.add(label);\n+        this.codeLocalVariableTableSpanO.add(label2);\n+        this.codeLocalVariableTableNameRU.add((ConstantPoolEntry)this.cpBands.getCPUtf8(s));\n+        this.codeLocalVariableTableTypeRS.add((ConstantPoolEntry)this.cpBands.getCPSignature(s2));\n+        this.codeLocalVariableTableSlot.add(n);\n+    }\n+    \n+    public void doBciRenumbering(final IntList list, final Map<Label, Integer> map) {\n+        this.renumberBci(this.codeLineNumberTableBciP, list, map);\n+        this.renumberBci(this.codeLocalVariableTableBciP, list, map);\n+        this.renumberOffsetBci(this.codeLocalVariableTableBciP, this.codeLocalVariableTableSpanO, list, map);\n+        this.renumberBci(this.codeLocalVariableTypeTableBciP, list, map);\n+        this.renumberOffsetBci(this.codeLocalVariableTypeTableBciP, this.codeLocalVariableTypeTableSpanO, list, map);\n+        this.renumberBci(this.codeHandlerStartP, list, map);\n+        this.renumberOffsetBci(this.codeHandlerStartP, this.codeHandlerEndPO, list, map);\n+        this.renumberDoubleOffsetBci(this.codeHandlerStartP, this.codeHandlerEndPO, this.codeHandlerCatchPO, list, map);\n+        final Iterator<NewAttributeBands> iterator = this.classAttributeBands.iterator();\n+        while (iterator.hasNext()) {\n+            ((NewAttributeBands)iterator.next()).renumberBci(list, (Map)map);\n+        }\n+        final Iterator<NewAttributeBands> iterator2 = this.methodAttributeBands.iterator();\n+        while (iterator2.hasNext()) {\n+            ((NewAttributeBands)iterator2.next()).renumberBci(list, (Map)map);\n+        }\n+        final Iterator<NewAttributeBands> iterator3 = this.fieldAttributeBands.iterator();\n+        while (iterator3.hasNext()) {\n+            ((NewAttributeBands)iterator3.next()).renumberBci(list, (Map)map);\n+        }\n+        final Iterator<NewAttributeBands> iterator4 = this.codeAttributeBands.iterator();\n+        while (iterator4.hasNext()) {\n+            ((NewAttributeBands)iterator4.next()).renumberBci(list, (Map)map);\n         }\n     }\n     \n-    private void renumberBci(final List<Integer> list, final IntList bciRenumbering, final Map<Label, Integer> labelsToOffsets) {\n+    private void renumberBci(final List<Integer> list, final IntList list2, final Map<Label, Integer> map) {\n         for (int i = list.size() - 1; i >= 0; --i) {\n-            final Object label = list.get(i);\n-            if (label instanceof Integer) {\n+            final Object value = list.get(i);\n+            if (value instanceof Integer) {\n                 break;\n             }\n-            if (label instanceof Label) {\n+            if (value instanceof Label) {\n                 list.remove(i);\n-                final Integer bytecodeIndex = Integer.valueOf(labelsToOffsets.get(label));\n-                list.add(i, Integer.valueOf(bciRenumbering.get((int)bytecodeIndex)));\n+                list.add(i, Integer.valueOf(list2.get((int)Integer.valueOf(map.get(value)))));\n             }\n         }\n     }\n     \n-    private void renumberOffsetBci(final List<Integer> relative, final List<Integer> list, final IntList bciRenumbering, final Map<Label, Integer> labelsToOffsets) {\n-        for (int i = list.size() - 1; i >= 0; --i) {\n-            final Object label = list.get(i);\n-            if (label instanceof Integer) {\n+    private void renumberOffsetBci(final List<Integer> list, final List<Integer> list2, final IntList list3, final Map<Label, Integer> map) {\n+        for (int i = list2.size() - 1; i >= 0; --i) {\n+            final Object value = list2.get(i);\n+            if (value instanceof Integer) {\n                 break;\n             }\n-            if (label instanceof Label) {\n-                list.remove(i);\n-                final Integer bytecodeIndex = Integer.valueOf(labelsToOffsets.get(label));\n-                final Integer renumberedOffset = Integer.valueOf(bciRenumbering.get((int)bytecodeIndex) - (int)Integer.valueOf(relative.get(i)));\n-                list.add(i, renumberedOffset);\n+            if (value instanceof Label) {\n+                list2.remove(i);\n+                list2.add(i, Integer.valueOf(list3.get((int)Integer.valueOf(map.get(value))) - (int)Integer.valueOf(list.get(i))));\n             }\n         }\n     }\n     \n-    private void renumberDoubleOffsetBci(final List<Integer> relative, final List<Integer> firstOffset, final List<Object> list, final IntList bciRenumbering, final Map<Label, Integer> labelsToOffsets) {\n-        for (int i = list.size() - 1; i >= 0; --i) {\n-            final Object label = list.get(i);\n-            if (label instanceof Integer) {\n+    private void renumberDoubleOffsetBci(final List<Integer> list, final List<Integer> list2, final List<Object> list3, final IntList list4, final Map<Label, Integer> map) {\n+        for (int i = list3.size() - 1; i >= 0; --i) {\n+            final Object value = list3.get(i);\n+            if (value instanceof Integer) {\n                 break;\n             }\n-            if (label instanceof Label) {\n-                list.remove(i);\n-                final Integer bytecodeIndex = Integer.valueOf(labelsToOffsets.get(label));\n-                final Integer renumberedOffset = Integer.valueOf(bciRenumbering.get((int)bytecodeIndex) - Integer.valueOf(relative.get(i)) - (int)Integer.valueOf(firstOffset.get(i)));\n-                list.add(i, renumberedOffset);\n+            if (value instanceof Label) {\n+                list3.remove(i);\n+                list3.add(i, Integer.valueOf(list4.get((int)Integer.valueOf(map.get(value))) - Integer.valueOf(list.get(i)) - (int)Integer.valueOf(list2.get(i))));\n             }\n         }\n     }\n     \n     public boolean isAnySyntheticClasses() {\n         return this.anySyntheticClasses;\n     }\n@@ -1028,111 +1027,108 @@\n         return this.anySyntheticFields;\n     }\n     \n     public boolean isAnySyntheticMethods() {\n         return this.anySyntheticMethods;\n     }\n     \n-    public void addParameterAnnotation(final int parameter, final String desc, final boolean visible, final List<String> nameRU, final List<String> tags, final List<Object> values, final List<Integer> caseArrayN, final List<String> nestTypeRS, final List<String> nestNameRU, final List<Integer> nestPairN) {\n-        if (visible) {\n+    public void addParameterAnnotation(final int n, final String s, final boolean b, final List<String> list, final List<String> list2, final List<Object> list3, final List<Integer> list4, final List<String> list5, final List<String> list6, final List<Integer> list7) {\n+        if (b) {\n             if (this.tempMethodRVPA == null) {\n-                (this.tempMethodRVPA = new ClassBands.TempParamAnnotation(this.numMethodArgs)).addParameterAnnotation(parameter, desc, (List)nameRU, (List)tags, (List)values, (List)caseArrayN, (List)nestTypeRS, (List)nestNameRU, (List)nestPairN);\n+                (this.tempMethodRVPA = new ClassBands.TempParamAnnotation(this.numMethodArgs)).addParameterAnnotation(n, s, (List)list, (List)list2, (List)list3, (List)list4, (List)list5, (List)list6, (List)list7);\n             }\n-            final Long flag = Long.valueOf(this.tempMethodFlags.remove(this.tempMethodFlags.size() - 1));\n-            this.tempMethodFlags.add(Long.valueOf((long)flag | 0x800000L));\n+            this.tempMethodFlags.add(Long.valueOf((long)Long.valueOf(this.tempMethodFlags.remove(this.tempMethodFlags.size() - 1)) | 0x800000L));\n         }\n         else {\n             if (this.tempMethodRIPA == null) {\n-                (this.tempMethodRIPA = new ClassBands.TempParamAnnotation(this.numMethodArgs)).addParameterAnnotation(parameter, desc, (List)nameRU, (List)tags, (List)values, (List)caseArrayN, (List)nestTypeRS, (List)nestNameRU, (List)nestPairN);\n+                (this.tempMethodRIPA = new ClassBands.TempParamAnnotation(this.numMethodArgs)).addParameterAnnotation(n, s, (List)list, (List)list2, (List)list3, (List)list4, (List)list5, (List)list6, (List)list7);\n             }\n-            final Long flag = Long.valueOf(this.tempMethodFlags.remove(this.tempMethodFlags.size() - 1));\n-            this.tempMethodFlags.add(Long.valueOf((long)flag | 0x1000000L));\n+            this.tempMethodFlags.add(Long.valueOf((long)Long.valueOf(this.tempMethodFlags.remove(this.tempMethodFlags.size() - 1)) | 0x1000000L));\n         }\n     }\n     \n-    public void addAnnotation(final int context, final String desc, final boolean visible, final List<String> nameRU, final List<String> tags, final List<Object> values, final List<Integer> caseArrayN, final List<String> nestTypeRS, final List<String> nestNameRU, final List<Integer> nestPairN) {\n-        switch (context) {\n+    public void addAnnotation(final int n, final String s, final boolean b, final List<String> list, final List<String> list2, final List<Object> list3, final List<Integer> list4, final List<String> list5, final List<String> list6, final List<Integer> list7) {\n+        switch (n) {\n             case 0: {\n-                if (visible) {\n-                    this.class_RVA_bands.addAnnotation(desc, (List)nameRU, (List)tags, (List)values, (List)caseArrayN, (List)nestTypeRS, (List)nestNameRU, (List)nestPairN);\n+                if (b) {\n+                    this.class_RVA_bands.addAnnotation(s, (List)list, (List)list2, (List)list3, (List)list4, (List)list5, (List)list6, (List)list7);\n                     if ((this.class_flags[this.index] & 0x200000L) != 0x0L) {\n                         this.class_RVA_bands.incrementAnnoN();\n                         break;\n                     }\n                     this.class_RVA_bands.newEntryInAnnoN();\n                     this.class_flags[this.index] |= 0x200000L;\n                     break;\n                 }\n                 else {\n-                    this.class_RIA_bands.addAnnotation(desc, (List)nameRU, (List)tags, (List)values, (List)caseArrayN, (List)nestTypeRS, (List)nestNameRU, (List)nestPairN);\n+                    this.class_RIA_bands.addAnnotation(s, (List)list, (List)list2, (List)list3, (List)list4, (List)list5, (List)list6, (List)list7);\n                     if ((this.class_flags[this.index] & 0x400000L) != 0x0L) {\n                         this.class_RIA_bands.incrementAnnoN();\n                         break;\n                     }\n                     this.class_RIA_bands.newEntryInAnnoN();\n                     this.class_flags[this.index] |= 0x400000L;\n                     break;\n                 }\n                 break;\n             }\n             case 1: {\n-                if (visible) {\n-                    this.field_RVA_bands.addAnnotation(desc, (List)nameRU, (List)tags, (List)values, (List)caseArrayN, (List)nestTypeRS, (List)nestNameRU, (List)nestPairN);\n-                    final Long flag = Long.valueOf(this.tempFieldFlags.remove(this.tempFieldFlags.size() - 1));\n-                    if ((flag.intValue() & 0x200000) != 0x0) {\n+                if (b) {\n+                    this.field_RVA_bands.addAnnotation(s, (List)list, (List)list2, (List)list3, (List)list4, (List)list5, (List)list6, (List)list7);\n+                    final Long n2 = Long.valueOf(this.tempFieldFlags.remove(this.tempFieldFlags.size() - 1));\n+                    if ((n2.intValue() & 0x200000) != 0x0) {\n                         this.field_RVA_bands.incrementAnnoN();\n                     }\n                     else {\n                         this.field_RVA_bands.newEntryInAnnoN();\n                     }\n-                    this.tempFieldFlags.add(Long.valueOf((long)(flag.intValue() | 0x200000)));\n+                    this.tempFieldFlags.add(Long.valueOf((long)(n2.intValue() | 0x200000)));\n                     break;\n                 }\n-                this.field_RIA_bands.addAnnotation(desc, (List)nameRU, (List)tags, (List)values, (List)caseArrayN, (List)nestTypeRS, (List)nestNameRU, (List)nestPairN);\n-                final Long flag = Long.valueOf(this.tempFieldFlags.remove(this.tempFieldFlags.size() - 1));\n-                if ((flag.intValue() & 0x400000) != 0x0) {\n+                this.field_RIA_bands.addAnnotation(s, (List)list, (List)list2, (List)list3, (List)list4, (List)list5, (List)list6, (List)list7);\n+                final Long n3 = Long.valueOf(this.tempFieldFlags.remove(this.tempFieldFlags.size() - 1));\n+                if ((n3.intValue() & 0x400000) != 0x0) {\n                     this.field_RIA_bands.incrementAnnoN();\n                 }\n                 else {\n                     this.field_RIA_bands.newEntryInAnnoN();\n                 }\n-                this.tempFieldFlags.add(Long.valueOf((long)(flag.intValue() | 0x400000)));\n+                this.tempFieldFlags.add(Long.valueOf((long)(n3.intValue() | 0x400000)));\n                 break;\n             }\n             case 2: {\n-                if (visible) {\n-                    this.method_RVA_bands.addAnnotation(desc, (List)nameRU, (List)tags, (List)values, (List)caseArrayN, (List)nestTypeRS, (List)nestNameRU, (List)nestPairN);\n-                    final Long flag = Long.valueOf(this.tempMethodFlags.remove(this.tempMethodFlags.size() - 1));\n-                    if ((flag.intValue() & 0x200000) != 0x0) {\n+                if (b) {\n+                    this.method_RVA_bands.addAnnotation(s, (List)list, (List)list2, (List)list3, (List)list4, (List)list5, (List)list6, (List)list7);\n+                    final Long n4 = Long.valueOf(this.tempMethodFlags.remove(this.tempMethodFlags.size() - 1));\n+                    if ((n4.intValue() & 0x200000) != 0x0) {\n                         this.method_RVA_bands.incrementAnnoN();\n                     }\n                     else {\n                         this.method_RVA_bands.newEntryInAnnoN();\n                     }\n-                    this.tempMethodFlags.add(Long.valueOf((long)(flag.intValue() | 0x200000)));\n+                    this.tempMethodFlags.add(Long.valueOf((long)(n4.intValue() | 0x200000)));\n                     break;\n                 }\n-                this.method_RIA_bands.addAnnotation(desc, (List)nameRU, (List)tags, (List)values, (List)caseArrayN, (List)nestTypeRS, (List)nestNameRU, (List)nestPairN);\n-                final Long flag = Long.valueOf(this.tempMethodFlags.remove(this.tempMethodFlags.size() - 1));\n-                if ((flag.intValue() & 0x400000) != 0x0) {\n+                this.method_RIA_bands.addAnnotation(s, (List)list, (List)list2, (List)list3, (List)list4, (List)list5, (List)list6, (List)list7);\n+                final Long n5 = Long.valueOf(this.tempMethodFlags.remove(this.tempMethodFlags.size() - 1));\n+                if ((n5.intValue() & 0x400000) != 0x0) {\n                     this.method_RIA_bands.incrementAnnoN();\n                 }\n                 else {\n                     this.method_RIA_bands.newEntryInAnnoN();\n                 }\n-                this.tempMethodFlags.add(Long.valueOf((long)(flag.intValue() | 0x400000)));\n+                this.tempMethodFlags.add(Long.valueOf((long)(n5.intValue() | 0x400000)));\n                 break;\n             }\n         }\n     }\n     \n-    public void addAnnotationDefault(final List<String> nameRU, final List<String> tags, final List<Object> values, final List<Integer> caseArrayN, final List<String> nestTypeRS, final List<String> nestNameRU, final List<Integer> nestPairN) {\n-        this.method_AD_bands.addAnnotation((String)null, (List)nameRU, (List)tags, (List)values, (List)caseArrayN, (List)nestTypeRS, (List)nestNameRU, (List)nestPairN);\n-        final Long flag = Long.valueOf(this.tempMethodFlags.remove(this.tempMethodFlags.size() - 1));\n-        this.tempMethodFlags.add(Long.valueOf((long)flag | 0x2000000L));\n+    public void addAnnotationDefault(final List<String> list, final List<String> list2, final List<Object> list3, final List<Integer> list4, final List<String> list5, final List<String> list6, final List<Integer> list7) {\n+        this.method_AD_bands.addAnnotation((String)null, (List)list, (List)list2, (List)list3, (List)list4, (List)list5, (List)list6, (List)list7);\n+        this.tempMethodFlags.add(Long.valueOf((long)Long.valueOf(this.tempMethodFlags.remove(this.tempMethodFlags.size() - 1)) | 0x2000000L));\n     }\n     \n     public void removeCurrentClass() {\n         if ((this.class_flags[this.index] & 0x20000L) != 0x0L) {\n             this.classSourceFile.remove(this.classSourceFile.size() - 1);\n         }\n         if ((this.class_flags[this.index] & 0x40000L) != 0x0L) {\n@@ -1144,91 +1140,93 @@\n         }\n         if ((this.class_flags[this.index] & 0x200000L) != 0x0L) {\n             this.class_RVA_bands.removeLatest();\n         }\n         if ((this.class_flags[this.index] & 0x400000L) != 0x0L) {\n             this.class_RIA_bands.removeLatest();\n         }\n-        for (final Long flagsL : this.tempFieldFlags) {\n-            final long flags = (long)flagsL;\n-            if ((flags & 0x80000L) != 0x0L) {\n+        final Iterator<Long> iterator = this.tempFieldFlags.iterator();\n+        while (iterator.hasNext()) {\n+            final long longValue = (long)Long.valueOf(iterator.next());\n+            if ((longValue & 0x80000L) != 0x0L) {\n                 this.fieldSignature.remove(this.fieldSignature.size() - 1);\n             }\n-            if ((flags & 0x20000L) != 0x0L) {\n+            if ((longValue & 0x20000L) != 0x0L) {\n                 this.fieldConstantValueKQ.remove(this.fieldConstantValueKQ.size() - 1);\n             }\n-            if ((flags & 0x200000L) != 0x0L) {\n+            if ((longValue & 0x200000L) != 0x0L) {\n                 this.field_RVA_bands.removeLatest();\n             }\n-            if ((flags & 0x400000L) != 0x0L) {\n+            if ((longValue & 0x400000L) != 0x0L) {\n                 this.field_RIA_bands.removeLatest();\n             }\n         }\n-        for (final Long flagsL : this.tempMethodFlags) {\n-            final long flags = (long)flagsL;\n-            if ((flags & 0x80000L) != 0x0L) {\n+        final Iterator<Long> iterator2 = this.tempMethodFlags.iterator();\n+        while (iterator2.hasNext()) {\n+            final long longValue2 = (long)Long.valueOf(iterator2.next());\n+            if ((longValue2 & 0x80000L) != 0x0L) {\n                 this.methodSignature.remove(this.methodSignature.size() - 1);\n             }\n-            if ((flags & 0x40000L) != 0x0L) {\n-                for (int exceptions = this.methodExceptionNumber.remove(this.methodExceptionNumber.size() - 1), i = 0; i < exceptions; ++i) {\n+            if ((longValue2 & 0x40000L) != 0x0L) {\n+                for (int remove = this.methodExceptionNumber.remove(this.methodExceptionNumber.size() - 1), i = 0; i < remove; ++i) {\n                     this.methodExceptionClasses.remove(this.methodExceptionClasses.size() - 1);\n                 }\n             }\n-            if ((flags & 0x20000L) != 0x0L) {\n+            if ((longValue2 & 0x20000L) != 0x0L) {\n                 this.codeMaxLocals.remove(this.codeMaxLocals.size() - 1);\n                 this.codeMaxStack.remove(this.codeMaxStack.size() - 1);\n-                for (int handlers = this.codeHandlerCount.remove(this.codeHandlerCount.size() - 1), i = 0; i < handlers; ++i) {\n-                    final int index = this.codeHandlerStartP.size() - 1;\n-                    this.codeHandlerStartP.remove(index);\n-                    this.codeHandlerEndPO.remove(index);\n-                    this.codeHandlerCatchPO.remove(index);\n-                    this.codeHandlerClass.remove(index);\n+                for (int remove2 = this.codeHandlerCount.remove(this.codeHandlerCount.size() - 1), j = 0; j < remove2; ++j) {\n+                    final int n = this.codeHandlerStartP.size() - 1;\n+                    this.codeHandlerStartP.remove(n);\n+                    this.codeHandlerEndPO.remove(n);\n+                    this.codeHandlerCatchPO.remove(n);\n+                    this.codeHandlerClass.remove(n);\n                 }\n                 if (!this.stripDebug) {\n-                    final long cdeFlags = (long)Long.valueOf(this.codeFlags.remove(this.codeFlags.size() - 1));\n-                    for (int numLocalVariables = this.codeLocalVariableTableN.remove(this.codeLocalVariableTableN.size() - 1), j = 0; j < numLocalVariables; ++j) {\n-                        final int location = this.codeLocalVariableTableBciP.size() - 1;\n-                        this.codeLocalVariableTableBciP.remove(location);\n-                        this.codeLocalVariableTableSpanO.remove(location);\n-                        this.codeLocalVariableTableNameRU.remove(location);\n-                        this.codeLocalVariableTableTypeRS.remove(location);\n-                        this.codeLocalVariableTableSlot.remove(location);\n+                    final long longValue3 = (long)Long.valueOf(this.codeFlags.remove(this.codeFlags.size() - 1));\n+                    for (int remove3 = this.codeLocalVariableTableN.remove(this.codeLocalVariableTableN.size() - 1), k = 0; k < remove3; ++k) {\n+                        final int n2 = this.codeLocalVariableTableBciP.size() - 1;\n+                        this.codeLocalVariableTableBciP.remove(n2);\n+                        this.codeLocalVariableTableSpanO.remove(n2);\n+                        this.codeLocalVariableTableNameRU.remove(n2);\n+                        this.codeLocalVariableTableTypeRS.remove(n2);\n+                        this.codeLocalVariableTableSlot.remove(n2);\n                     }\n-                    if ((cdeFlags & 0x8L) != 0x0L) {\n-                        for (int numLocalVariablesInTypeTable = this.codeLocalVariableTypeTableN.remove(this.codeLocalVariableTypeTableN.size() - 1), k = 0; k < numLocalVariablesInTypeTable; ++k) {\n-                            final int location2 = this.codeLocalVariableTypeTableBciP.size() - 1;\n-                            this.codeLocalVariableTypeTableBciP.remove(location2);\n-                            this.codeLocalVariableTypeTableSpanO.remove(location2);\n-                            this.codeLocalVariableTypeTableNameRU.remove(location2);\n-                            this.codeLocalVariableTypeTableTypeRS.remove(location2);\n-                            this.codeLocalVariableTypeTableSlot.remove(location2);\n+                    if ((longValue3 & 0x8L) != 0x0L) {\n+                        for (int remove4 = this.codeLocalVariableTypeTableN.remove(this.codeLocalVariableTypeTableN.size() - 1), l = 0; l < remove4; ++l) {\n+                            final int n3 = this.codeLocalVariableTypeTableBciP.size() - 1;\n+                            this.codeLocalVariableTypeTableBciP.remove(n3);\n+                            this.codeLocalVariableTypeTableSpanO.remove(n3);\n+                            this.codeLocalVariableTypeTableNameRU.remove(n3);\n+                            this.codeLocalVariableTypeTableTypeRS.remove(n3);\n+                            this.codeLocalVariableTypeTableSlot.remove(n3);\n                         }\n                     }\n-                    if ((cdeFlags & 0x2L) != 0x0L) {\n-                        for (int numLineNumbers = this.codeLineNumberTableN.remove(this.codeLineNumberTableN.size() - 1), k = 0; k < numLineNumbers; ++k) {\n-                            final int location2 = this.codeLineNumberTableBciP.size() - 1;\n-                            this.codeLineNumberTableBciP.remove(location2);\n-                            this.codeLineNumberTableLine.remove(location2);\n+                    if ((longValue3 & 0x2L) != 0x0L) {\n+                        for (int remove5 = this.codeLineNumberTableN.remove(this.codeLineNumberTableN.size() - 1), n4 = 0; n4 < remove5; ++n4) {\n+                            final int n5 = this.codeLineNumberTableBciP.size() - 1;\n+                            this.codeLineNumberTableBciP.remove(n5);\n+                            this.codeLineNumberTableLine.remove(n5);\n                         }\n                     }\n                 }\n             }\n-            if ((flags & 0x200000L) != 0x0L) {\n+            if ((longValue2 & 0x200000L) != 0x0L) {\n                 this.method_RVA_bands.removeLatest();\n             }\n-            if ((flags & 0x400000L) != 0x0L) {\n+            if ((longValue2 & 0x400000L) != 0x0L) {\n                 this.method_RIA_bands.removeLatest();\n             }\n-            if ((flags & 0x800000L) != 0x0L) {\n+            if ((longValue2 & 0x800000L) != 0x0L) {\n                 this.method_RVPA_bands.removeLatest();\n             }\n-            if ((flags & 0x1000000L) != 0x0L) {\n+            if ((longValue2 & 0x1000000L) != 0x0L) {\n                 this.method_RIPA_bands.removeLatest();\n             }\n-            if ((flags & 0x2000000L) != 0x0L) {\n+            if ((longValue2 & 0x2000000L) != 0x0L) {\n                 this.method_AD_bands.removeLatest();\n             }\n         }\n         this.class_this[this.index] = null;\n         this.class_super[this.index] = null;\n         this.class_interface_count[this.index] = 0;\n         this.class_interface[this.index] = null;\n"}]}
