{"diffoscope-json-version": 1, "source1": "first/AtomicSafeInitializer.class", "source2": "second/AtomicSafeInitializer.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,101 +1,101 @@\n-  SHA-256 checksum 5c25be1b4b6e4619a0d81d73b71cee758ebf260a93a55e8120db6c75703603d9\n+  SHA-256 checksum 7dcfccdd4465ffb5ebc4a256f8892dd56090b3bb559b5253bc1f9a7e84a82870\n   Compiled from \"AtomicSafeInitializer.java\"\n public abstract class org.apache.commons.lang3.concurrent.AtomicSafeInitializer<T extends java.lang.Object> extends java.lang.Object implements org.apache.commons.lang3.concurrent.ConcurrentInitializer<T>\n   minor version: 0\n   major version: 52\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n-  this_class: #10                         // org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n-  super_class: #11                        // java/lang/Object\n+  this_class: #11                         // org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n+  super_class: #2                         // java/lang/Object\n   interfaces: 1, fields: 2, methods: 3, attributes: 2\n Constant pool:\n-   #1 = Methodref          #11.#41        // java/lang/Object.\"<init>\":()V\n-   #2 = Class              #42            // java/util/concurrent/atomic/AtomicReference\n-   #3 = Methodref          #2.#41         // java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n-   #4 = Fieldref           #10.#43        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.factory:Ljava/util/concurrent/atomic/AtomicReference;\n-   #5 = Fieldref           #10.#44        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.reference:Ljava/util/concurrent/atomic/AtomicReference;\n-   #6 = Methodref          #2.#45         // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n-   #7 = Methodref          #2.#46         // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-   #8 = Methodref          #10.#47        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.initialize:()Ljava/lang/Object;\n-   #9 = Methodref          #2.#48         // java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n-  #10 = Class              #49            // org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n-  #11 = Class              #50            // java/lang/Object\n-  #12 = Class              #51            // org/apache/commons/lang3/concurrent/ConcurrentInitializer\n-  #13 = Utf8               factory\n-  #14 = Utf8               Ljava/util/concurrent/atomic/AtomicReference;\n-  #15 = Utf8               Signature\n-  #16 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;>;\n-  #17 = Utf8               reference\n-  #18 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<TT;>;\n-  #19 = Utf8               <init>\n-  #20 = Utf8               ()V\n-  #21 = Utf8               Code\n-  #22 = Utf8               LineNumberTable\n-  #23 = Utf8               LocalVariableTable\n-  #24 = Utf8               this\n-  #25 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer;\n-  #26 = Utf8               LocalVariableTypeTable\n-  #27 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;\n-  #28 = Utf8               get\n-  #29 = Utf8               ()Ljava/lang/Object;\n-  #30 = Utf8               result\n-  #31 = Utf8               Ljava/lang/Object;\n-  #32 = Utf8               TT;\n-  #33 = Utf8               StackMapTable\n-  #34 = Utf8               Exceptions\n-  #35 = Class              #52            // org/apache/commons/lang3/concurrent/ConcurrentException\n-  #36 = Utf8               ()TT;\n-  #37 = Utf8               initialize\n-  #38 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n-  #39 = Utf8               SourceFile\n-  #40 = Utf8               AtomicSafeInitializer.java\n-  #41 = NameAndType        #19:#20        // \"<init>\":()V\n-  #42 = Utf8               java/util/concurrent/atomic/AtomicReference\n-  #43 = NameAndType        #13:#14        // factory:Ljava/util/concurrent/atomic/AtomicReference;\n-  #44 = NameAndType        #17:#14        // reference:Ljava/util/concurrent/atomic/AtomicReference;\n-  #45 = NameAndType        #28:#29        // get:()Ljava/lang/Object;\n-  #46 = NameAndType        #53:#54        // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #47 = NameAndType        #37:#29        // initialize:()Ljava/lang/Object;\n-  #48 = NameAndType        #55:#56        // set:(Ljava/lang/Object;)V\n-  #49 = Utf8               org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n-  #50 = Utf8               java/lang/Object\n-  #51 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentInitializer\n+   #1 = Methodref          #2.#3          // java/lang/Object.\"<init>\":()V\n+   #2 = Class              #4             // java/lang/Object\n+   #3 = NameAndType        #5:#6          // \"<init>\":()V\n+   #4 = Utf8               java/lang/Object\n+   #5 = Utf8               <init>\n+   #6 = Utf8               ()V\n+   #7 = Class              #8             // java/util/concurrent/atomic/AtomicReference\n+   #8 = Utf8               java/util/concurrent/atomic/AtomicReference\n+   #9 = Methodref          #7.#3          // java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n+  #10 = Fieldref           #11.#12        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.factory:Ljava/util/concurrent/atomic/AtomicReference;\n+  #11 = Class              #13            // org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n+  #12 = NameAndType        #14:#15        // factory:Ljava/util/concurrent/atomic/AtomicReference;\n+  #13 = Utf8               org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n+  #14 = Utf8               factory\n+  #15 = Utf8               Ljava/util/concurrent/atomic/AtomicReference;\n+  #16 = Fieldref           #11.#17        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.reference:Ljava/util/concurrent/atomic/AtomicReference;\n+  #17 = NameAndType        #18:#15        // reference:Ljava/util/concurrent/atomic/AtomicReference;\n+  #18 = Utf8               reference\n+  #19 = Methodref          #7.#20         // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n+  #20 = NameAndType        #21:#22        // get:()Ljava/lang/Object;\n+  #21 = Utf8               get\n+  #22 = Utf8               ()Ljava/lang/Object;\n+  #23 = Methodref          #7.#24         // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #24 = NameAndType        #25:#26        // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #25 = Utf8               compareAndSet\n+  #26 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #27 = Methodref          #11.#28        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.initialize:()Ljava/lang/Object;\n+  #28 = NameAndType        #29:#22        // initialize:()Ljava/lang/Object;\n+  #29 = Utf8               initialize\n+  #30 = Methodref          #7.#31         // java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n+  #31 = NameAndType        #32:#33        // set:(Ljava/lang/Object;)V\n+  #32 = Utf8               set\n+  #33 = Utf8               (Ljava/lang/Object;)V\n+  #34 = Class              #35            // org/apache/commons/lang3/concurrent/ConcurrentInitializer\n+  #35 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentInitializer\n+  #36 = Utf8               Signature\n+  #37 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;>;\n+  #38 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<TT;>;\n+  #39 = Utf8               Code\n+  #40 = Utf8               LineNumberTable\n+  #41 = Utf8               LocalVariableTable\n+  #42 = Utf8               this\n+  #43 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer;\n+  #44 = Utf8               LocalVariableTypeTable\n+  #45 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;\n+  #46 = Utf8               result\n+  #47 = Utf8               Ljava/lang/Object;\n+  #48 = Utf8               TT;\n+  #49 = Utf8               StackMapTable\n+  #50 = Utf8               Exceptions\n+  #51 = Class              #52            // org/apache/commons/lang3/concurrent/ConcurrentException\n   #52 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentException\n-  #53 = Utf8               compareAndSet\n-  #54 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #55 = Utf8               set\n-  #56 = Utf8               (Ljava/lang/Object;)V\n+  #53 = Utf8               ()TT;\n+  #54 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n+  #55 = Utf8               SourceFile\n+  #56 = Utf8               AtomicSafeInitializer.java\n {\n   private final java.util.concurrent.atomic.AtomicReference<org.apache.commons.lang3.concurrent.AtomicSafeInitializer<T>> factory;\n     descriptor: Ljava/util/concurrent/atomic/AtomicReference;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #16                          // Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;>;\n+    Signature: #37                          // Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;>;\n \n   private final java.util.concurrent.atomic.AtomicReference<T> reference;\n     descriptor: Ljava/util/concurrent/atomic/AtomicReference;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #18                          // Ljava/util/concurrent/atomic/AtomicReference<TT;>;\n+    Signature: #38                          // Ljava/util/concurrent/atomic/AtomicReference<TT;>;\n \n   public org.apache.commons.lang3.concurrent.AtomicSafeInitializer();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class java/util/concurrent/atomic/AtomicReference\n+         5: new           #7                  // class java/util/concurrent/atomic/AtomicReference\n          8: dup\n-         9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n-        12: putfield      #4                  // Field factory:Ljava/util/concurrent/atomic/AtomicReference;\n+         9: invokespecial #9                  // Method java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n+        12: putfield      #10                 // Field factory:Ljava/util/concurrent/atomic/AtomicReference;\n         15: aload_0\n-        16: new           #2                  // class java/util/concurrent/atomic/AtomicReference\n+        16: new           #7                  // class java/util/concurrent/atomic/AtomicReference\n         19: dup\n-        20: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n-        23: putfield      #5                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n+        20: invokespecial #9                  // Method java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n+        23: putfield      #16                 // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n         26: return\n       LineNumberTable:\n         line 55: 0\n         line 58: 4\n         line 62: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -106,30 +106,30 @@\n \n   public final T get() throws org.apache.commons.lang3.concurrent.ConcurrentException;\n     descriptor: ()Ljava/lang/Object;\n     flags: (0x0011) ACC_PUBLIC, ACC_FINAL\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n-         4: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n+         1: getfield      #16                 // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n+         4: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n          7: dup\n          8: astore_1\n          9: ifnonnull     38\n         12: aload_0\n-        13: getfield      #4                  // Field factory:Ljava/util/concurrent/atomic/AtomicReference;\n+        13: getfield      #10                 // Field factory:Ljava/util/concurrent/atomic/AtomicReference;\n         16: aconst_null\n         17: aload_0\n-        18: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+        18: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n         21: ifeq          0\n         24: aload_0\n-        25: getfield      #5                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n+        25: getfield      #16                 // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n         28: aload_0\n-        29: invokevirtual #8                  // Method initialize:()Ljava/lang/Object;\n-        32: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n+        29: invokevirtual #27                 // Method initialize:()Ljava/lang/Object;\n+        32: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n         35: goto          0\n         38: aload_1\n         39: areturn\n       LineNumberTable:\n         line 75: 0\n         line 76: 12\n         line 77: 24\n@@ -145,18 +145,18 @@\n       StackMapTable: number_of_entries = 2\n         frame_type = 0 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 37\n           locals = [ class java/lang/Object ]\n     Exceptions:\n       throws org.apache.commons.lang3.concurrent.ConcurrentException\n-    Signature: #36                          // ()TT;\n+    Signature: #53                          // ()TT;\n \n   protected abstract T initialize() throws org.apache.commons.lang3.concurrent.ConcurrentException;\n     descriptor: ()Ljava/lang/Object;\n     flags: (0x0404) ACC_PROTECTED, ACC_ABSTRACT\n     Exceptions:\n       throws org.apache.commons.lang3.concurrent.ConcurrentException\n-    Signature: #36                          // ()TT;\n+    Signature: #53                          // ()TT;\n }\n-Signature: #38                          // <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n+Signature: #54                          // <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n SourceFile: \"AtomicSafeInitializer.java\"\n"}]}
