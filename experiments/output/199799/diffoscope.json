{"diffoscope-json-version": 1, "source1": "first/TransitiveHull.class", "source2": "second/TransitiveHull.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,63 +5,63 @@\n import org.apache.bcel.Repository;\n import org.apache.bcel.classfile.Utility;\n \n public class TransitiveHull implements VerifierFactoryObserver\n {\n     private int indent;\n     \n-    public static void main(final String[] args) {\n-        if (args.length != 1) {\n+    public static void main(final String[] array) {\n+        if (array.length != 1) {\n             System.out.println(\"Need exactly one argument: The root class to verify.\");\n             System.exit(1);\n         }\n-        final int dotclasspos = args[0].lastIndexOf(\".class\");\n-        if (dotclasspos != -1) {\n-            args[0] = args[0].substring(0, dotclasspos);\n-        }\n-        args[0] = Utility.pathToPackage(args[0]);\n-        final TransitiveHull th = new TransitiveHull();\n-        VerifierFactory.attach((VerifierFactoryObserver)th);\n-        VerifierFactory.getVerifier(args[0]);\n-        VerifierFactory.detach((VerifierFactoryObserver)th);\n+        final int lastIndex = array[0].lastIndexOf(\".class\");\n+        if (lastIndex != -1) {\n+            array[0] = array[0].substring(0, lastIndex);\n+        }\n+        array[0] = Utility.pathToPackage(array[0]);\n+        final TransitiveHull transitiveHull = new TransitiveHull();\n+        VerifierFactory.attach((VerifierFactoryObserver)transitiveHull);\n+        VerifierFactory.getVerifier(array[0]);\n+        VerifierFactory.detach((VerifierFactoryObserver)transitiveHull);\n     }\n     \n     private TransitiveHull() {\n     }\n     \n-    public void update(final String classname) {\n+    public void update(final String x) {\n         System.gc();\n         for (int i = 0; i < this.indent; ++i) {\n             System.out.print(\" \");\n         }\n-        System.out.println(classname);\n+        System.out.println(x);\n         ++this.indent;\n-        final Verifier v = VerifierFactory.getVerifier(classname);\n-        VerificationResult vr = v.doPass1();\n-        if (vr != VerificationResult.VR_OK) {\n-            System.out.println(\"Pass 1:\\n\" + vr);\n-        }\n-        vr = v.doPass2();\n-        if (vr != VerificationResult.VR_OK) {\n-            System.out.println(\"Pass 2:\\n\" + vr);\n+        final Verifier verifier = VerifierFactory.getVerifier(x);\n+        final VerificationResult doPass1 = verifier.doPass1();\n+        if (doPass1 != VerificationResult.VR_OK) {\n+            System.out.println(\"Pass 1:\\n\" + doPass1);\n+        }\n+        final VerificationResult doPass2 = verifier.doPass2();\n+        if (doPass2 != VerificationResult.VR_OK) {\n+            System.out.println(\"Pass 2:\\n\" + doPass2);\n         }\n-        if (vr == VerificationResult.VR_OK) {\n+        if (doPass2 == VerificationResult.VR_OK) {\n             try {\n-                final JavaClass jc = Repository.lookupClass(v.getClassName());\n-                for (int j = 0; j < jc.getMethods().length; ++j) {\n-                    vr = v.doPass3a(j);\n-                    if (vr != VerificationResult.VR_OK) {\n-                        System.out.println(v.getClassName() + \", Pass 3a, method \" + j + \" ['\" + jc.getMethods()[j] + \"']:\\n\" + vr);\n+                final JavaClass lookupClass = Repository.lookupClass(verifier.getClassName());\n+                for (int j = 0; j < lookupClass.getMethods().length; ++j) {\n+                    final VerificationResult doPass3a = verifier.doPass3a(j);\n+                    if (doPass3a != VerificationResult.VR_OK) {\n+                        System.out.println(verifier.getClassName() + \", Pass 3a, method \" + j + \" ['\" + lookupClass.getMethods()[j] + \"']:\\n\" + doPass3a);\n                     }\n-                    vr = v.doPass3b(j);\n-                    if (vr != VerificationResult.VR_OK) {\n-                        System.out.println(v.getClassName() + \", Pass 3b, method \" + j + \" ['\" + jc.getMethods()[j] + \"']:\\n\" + vr);\n+                    final VerificationResult doPass3b = verifier.doPass3b(j);\n+                    if (doPass3b != VerificationResult.VR_OK) {\n+                        System.out.println(verifier.getClassName() + \", Pass 3b, method \" + j + \" ['\" + lookupClass.getMethods()[j] + \"']:\\n\" + doPass3b);\n                     }\n                 }\n             }\n-            catch (final ClassNotFoundException e) {\n-                System.err.println(\"Could not find class \" + v.getClassName() + \" in Repository\");\n+            catch (final ClassNotFoundException ex) {\n+                System.err.println(\"Could not find class \" + verifier.getClassName() + \" in Repository\");\n             }\n         }\n         --this.indent;\n     }\n }\n"}]}
