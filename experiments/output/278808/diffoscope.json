{"diffoscope-json-version": 1, "source1": "first/CPRef.class", "source2": "second/CPRef.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,66 +9,65 @@\n {\n     CPClass className;\n     transient int classNameIndex;\n     protected CPNameAndType nameAndType;\n     transient int nameAndTypeIndex;\n     protected String cachedToString;\n     \n-    public CPRef(final byte type, final CPClass className, final CPNameAndType descriptor, final int globalIndex) {\n-        super(type, globalIndex);\n-        this.className = Objects.requireNonNull(className, \"className\");\n-        this.nameAndType = Objects.requireNonNull(descriptor, \"descriptor\");\n+    public CPRef(final byte b, final CPClass obj, final CPNameAndType obj2, final int n) {\n+        super(b, n);\n+        this.className = Objects.requireNonNull(obj, \"className\");\n+        this.nameAndType = Objects.requireNonNull(obj2, \"descriptor\");\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (obj == null) {\n+        if (o == null) {\n             return false;\n         }\n-        if (this.getClass() != obj.getClass()) {\n+        if (this.getClass() != o.getClass()) {\n             return false;\n         }\n-        if (this.hashCode() != obj.hashCode()) {\n+        if (this.hashCode() != o.hashCode()) {\n             return false;\n         }\n-        final CPRef other = (CPRef)obj;\n-        return this.className.equals((Object)other.className) && this.nameAndType.equals((Object)other.nameAndType);\n+        final CPRef cpRef = (CPRef)o;\n+        return this.className.equals((Object)cpRef.className) && this.nameAndType.equals((Object)cpRef.nameAndType);\n     }\n     \n     protected ClassFileEntry[] getNestedClassFileEntries() {\n-        final ClassFileEntry[] entries = { (ClassFileEntry)this.className, (ClassFileEntry)this.nameAndType };\n-        return entries;\n+        return new ClassFileEntry[] { (ClassFileEntry)this.className, (ClassFileEntry)this.nameAndType };\n     }\n     \n-    protected void resolve(final ClassConstantPool pool) {\n-        super.resolve(pool);\n-        this.nameAndTypeIndex = pool.indexOf((ClassFileEntry)this.nameAndType);\n-        this.classNameIndex = pool.indexOf((ClassFileEntry)this.className);\n+    protected void resolve(final ClassConstantPool classConstantPool) {\n+        super.resolve(classConstantPool);\n+        this.nameAndTypeIndex = classConstantPool.indexOf((ClassFileEntry)this.nameAndType);\n+        this.classNameIndex = classConstantPool.indexOf((ClassFileEntry)this.className);\n     }\n     \n     public String toString() {\n         if (this.cachedToString == null) {\n-            String type;\n+            String str;\n             if (this.getTag() == 9) {\n-                type = \"FieldRef\";\n+                str = \"FieldRef\";\n             }\n             else if (this.getTag() == 10) {\n-                type = \"MethoddRef\";\n+                str = \"MethoddRef\";\n             }\n             else if (this.getTag() == 11) {\n-                type = \"InterfaceMethodRef\";\n+                str = \"InterfaceMethodRef\";\n             }\n             else {\n-                type = \"unknown\";\n+                str = \"unknown\";\n             }\n-            this.cachedToString = type + \": \" + this.className + \"#\" + this.nameAndType;\n+            this.cachedToString = str + \": \" + this.className + \"#\" + this.nameAndType;\n         }\n         return this.cachedToString;\n     }\n     \n-    protected void writeBody(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.classNameIndex);\n-        dos.writeShort(this.nameAndTypeIndex);\n+    protected void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.classNameIndex);\n+        dataOutputStream.writeShort(this.nameAndTypeIndex);\n     }\n }\n"}]}
