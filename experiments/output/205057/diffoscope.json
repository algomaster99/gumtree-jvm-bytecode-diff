{"diffoscope-json-version": 1, "source1": "first/BasicConfigurationBuilder.class", "source2": "second/BasicConfigurationBuilder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -25,143 +25,143 @@\n     private final Class<? extends T> resultClass;\n     private final EventListenerList eventListeners;\n     private final boolean allowFailOnInit;\n     private Map<String, Object> parameters;\n     private BeanDeclaration resultDeclaration;\n     private volatile T result;\n     \n-    public BasicConfigurationBuilder(final Class<? extends T> resCls) {\n-        this(resCls, null);\n+    public BasicConfigurationBuilder(final Class<? extends T> clazz) {\n+        this(clazz, null);\n     }\n     \n-    public BasicConfigurationBuilder(final Class<? extends T> resCls, final Map<String, Object> params) {\n-        this(resCls, params, false);\n+    public BasicConfigurationBuilder(final Class<? extends T> clazz, final Map<String, Object> map) {\n+        this(clazz, map, false);\n     }\n     \n-    public BasicConfigurationBuilder(final Class<? extends T> resCls, final Map<String, Object> params, final boolean allowFailOnInit) {\n-        if (resCls == null) {\n+    public BasicConfigurationBuilder(final Class<? extends T> resultClass, final Map<String, Object> map, final boolean allowFailOnInit) {\n+        if (resultClass == null) {\n             throw new IllegalArgumentException(\"Result class must not be null!\");\n         }\n-        this.resultClass = resCls;\n+        this.resultClass = resultClass;\n         this.allowFailOnInit = allowFailOnInit;\n         this.eventListeners = new EventListenerList();\n-        this.updateParameters(params);\n+        this.updateParameters(map);\n     }\n     \n     public Class<? extends T> getResultClass() {\n         return this.resultClass;\n     }\n     \n     public boolean isAllowFailOnInit() {\n         return this.allowFailOnInit;\n     }\n     \n-    public synchronized BasicConfigurationBuilder<T> setParameters(final Map<String, Object> params) {\n-        this.updateParameters(params);\n+    public synchronized BasicConfigurationBuilder<T> setParameters(final Map<String, Object> map) {\n+        this.updateParameters(map);\n         return this;\n     }\n     \n-    public synchronized BasicConfigurationBuilder<T> addParameters(final Map<String, Object> params) {\n-        final Map<String, Object> newParams = new HashMap<String, Object>(this.getParameters());\n-        if (params != null) {\n-            newParams.putAll(params);\n+    public synchronized BasicConfigurationBuilder<T> addParameters(final Map<String, Object> map) {\n+        final HashMap hashMap = new HashMap((Map<? extends K, ? extends V>)this.getParameters());\n+        if (map != null) {\n+            hashMap.putAll(map);\n         }\n-        this.updateParameters(newParams);\n+        this.updateParameters(hashMap);\n         return this;\n     }\n     \n-    public BasicConfigurationBuilder<T> configure(final BuilderParameters... params) {\n-        final Map<String, Object> newParams = new HashMap<String, Object>();\n-        for (final BuilderParameters p : params) {\n-            newParams.putAll(p.getParameters());\n-            this.handleEventListenerProviders(p);\n+    public BasicConfigurationBuilder<T> configure(final BuilderParameters... array) {\n+        final HashMap parameters = new HashMap();\n+        for (final BuilderParameters builderParameters : array) {\n+            parameters.putAll(builderParameters.getParameters());\n+            this.handleEventListenerProviders(builderParameters);\n         }\n-        return this.setParameters(newParams);\n+        return this.setParameters(parameters);\n     }\n     \n     public T getConfiguration() throws ConfigurationException {\n         this.fireBuilderEvent(new ConfigurationBuilderEvent((ConfigurationBuilder)this, ConfigurationBuilderEvent.CONFIGURATION_REQUEST));\n-        T resObj = this.result;\n-        boolean created = false;\n-        if (resObj == null) {\n+        ImmutableConfiguration immutableConfiguration = this.result;\n+        boolean b = false;\n+        if (immutableConfiguration == null) {\n             synchronized (this) {\n-                resObj = this.result;\n-                if (resObj == null) {\n-                    resObj = (this.result = this.createResult());\n-                    created = true;\n+                immutableConfiguration = this.result;\n+                if (immutableConfiguration == null) {\n+                    immutableConfiguration = (this.result = this.createResult());\n+                    b = true;\n                 }\n             }\n         }\n-        if (created) {\n-            this.fireBuilderEvent((ConfigurationBuilderEvent)new ConfigurationBuilderResultCreatedEvent((ConfigurationBuilder)this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, (ImmutableConfiguration)resObj));\n+        if (b) {\n+            this.fireBuilderEvent((ConfigurationBuilderEvent)new ConfigurationBuilderResultCreatedEvent((ConfigurationBuilder)this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, immutableConfiguration));\n         }\n-        return resObj;\n+        return (T)immutableConfiguration;\n     }\n     \n-    public <E extends Event> void addEventListener(final EventType<E> eventType, final EventListener<? super E> listener) {\n-        this.installEventListener((org.apache.commons.configuration2.event.EventType<Event>)eventType, (org.apache.commons.configuration2.event.EventListener<? super Event>)listener);\n+    public <E extends Event> void addEventListener(final EventType<E> eventType, final EventListener<? super E> eventListener) {\n+        this.installEventListener((org.apache.commons.configuration2.event.EventType<Event>)eventType, (org.apache.commons.configuration2.event.EventListener<? super Event>)eventListener);\n     }\n     \n-    public <E extends Event> boolean removeEventListener(final EventType<E> eventType, final EventListener<? super E> listener) {\n-        this.fetchEventSource().removeEventListener((EventType)eventType, (EventListener)listener);\n-        return this.eventListeners.removeEventListener((EventType)eventType, (EventListener)listener);\n+    public <E extends Event> boolean removeEventListener(final EventType<E> eventType, final EventListener<? super E> eventListener) {\n+        this.fetchEventSource().removeEventListener((EventType)eventType, (EventListener)eventListener);\n+        return this.eventListeners.removeEventListener((EventType)eventType, (EventListener)eventListener);\n     }\n     \n     public void resetResult() {\n-        final T oldResult;\n+        final ImmutableConfiguration result;\n         synchronized (this) {\n-            oldResult = this.result;\n+            result = this.result;\n             this.result = null;\n             this.resultDeclaration = null;\n         }\n-        if (oldResult != null) {\n-            this.removeEventListeners(oldResult);\n+        if (result != null) {\n+            this.removeEventListeners((T)result);\n         }\n         this.fireBuilderEvent(new ConfigurationBuilderEvent((ConfigurationBuilder)this, ConfigurationBuilderEvent.RESET));\n     }\n     \n     public void resetParameters() {\n         this.setParameters(null);\n     }\n     \n     public synchronized void reset() {\n         this.resetParameters();\n         this.resetResult();\n     }\n     \n-    public final void connectToReloadingController(final ReloadingController controller) {\n-        if (controller == null) {\n+    public final void connectToReloadingController(final ReloadingController reloadingController) {\n+        if (reloadingController == null) {\n             throw new IllegalArgumentException(\"ReloadingController must not be null!\");\n         }\n-        ReloadingBuilderSupportListener.connect(this, controller);\n+        ReloadingBuilderSupportListener.connect(this, reloadingController);\n     }\n     \n     protected T createResult() throws ConfigurationException {\n-        final T resObj = this.createResultInstance();\n+        final ImmutableConfiguration resultInstance = this.createResultInstance();\n         try {\n-            this.initResultInstance(resObj);\n+            this.initResultInstance((T)resultInstance);\n         }\n-        catch (final ConfigurationException cex) {\n+        catch (final ConfigurationException ex) {\n             if (!this.isAllowFailOnInit()) {\n-                throw cex;\n+                throw ex;\n             }\n         }\n-        return resObj;\n+        return (T)resultInstance;\n     }\n     \n     protected T createResultInstance() throws ConfigurationException {\n         final Object bean = this.fetchBeanHelper().createBean(this.getResultDeclaration());\n         this.checkResultInstance(bean);\n         return (T)this.getResultClass().cast(bean);\n     }\n     \n-    protected void initResultInstance(final T obj) throws ConfigurationException {\n-        this.fetchBeanHelper().initBean((Object)obj, this.getResultDeclaration());\n-        this.registerEventListeners(obj);\n-        this.handleInitializable(obj);\n+    protected void initResultInstance(final T t) throws ConfigurationException {\n+        this.fetchBeanHelper().initBean((Object)t, this.getResultDeclaration());\n+        this.registerEventListeners(t);\n+        this.handleInitializable(t);\n     }\n     \n     protected final synchronized BeanDeclaration getResultDeclaration() throws ConfigurationException {\n         if (this.resultDeclaration == null) {\n             this.resultDeclaration = this.createResultDeclaration(this.getFilteredParameters());\n         }\n         return this.resultDeclaration;\n@@ -171,96 +171,97 @@\n         if (this.parameters != null) {\n             return this.parameters;\n         }\n         return Collections.emptyMap();\n     }\n     \n     protected final BeanHelper fetchBeanHelper() {\n-        final BeanHelper helper = BasicBuilderParameters.fetchBeanHelper((Map)this.getParameters());\n-        return (helper != null) ? helper : BeanHelper.INSTANCE;\n+        final BeanHelper fetchBeanHelper = BasicBuilderParameters.fetchBeanHelper((Map)this.getParameters());\n+        return (fetchBeanHelper != null) ? fetchBeanHelper : BeanHelper.INSTANCE;\n     }\n     \n-    protected BeanDeclaration createResultDeclaration(final Map<String, Object> params) throws ConfigurationException {\n-        return (BeanDeclaration)new BasicConfigurationBuilder.BasicConfigurationBuilder$1(this, (Map)params);\n+    protected BeanDeclaration createResultDeclaration(final Map<String, Object> map) throws ConfigurationException {\n+        return (BeanDeclaration)new BasicConfigurationBuilder.BasicConfigurationBuilder$1(this, (Map)map);\n     }\n     \n-    protected synchronized void copyEventListeners(final BasicConfigurationBuilder<?> target) {\n-        this.copyEventListeners(target, this.eventListeners);\n+    protected synchronized void copyEventListeners(final BasicConfigurationBuilder<?> basicConfigurationBuilder) {\n+        this.copyEventListeners(basicConfigurationBuilder, this.eventListeners);\n     }\n     \n-    protected void copyEventListeners(final BasicConfigurationBuilder<?> target, final EventListenerList listeners) {\n-        target.eventListeners.addAll(listeners);\n+    protected void copyEventListeners(final BasicConfigurationBuilder<?> basicConfigurationBuilder, final EventListenerList list) {\n+        basicConfigurationBuilder.eventListeners.addAll(list);\n     }\n     \n-    protected final <E extends Event> void installEventListener(final EventType<E> eventType, final EventListener<? super E> listener) {\n-        this.fetchEventSource().addEventListener((EventType)eventType, (EventListener)listener);\n-        this.eventListeners.addEventListener((EventType)eventType, (EventListener)listener);\n+    protected final <E extends Event> void installEventListener(final EventType<E> eventType, final EventListener<? super E> eventListener) {\n+        this.fetchEventSource().addEventListener((EventType)eventType, (EventListener)eventListener);\n+        this.eventListeners.addEventListener((EventType)eventType, (EventListener)eventListener);\n     }\n     \n-    protected void fireBuilderEvent(final ConfigurationBuilderEvent event) {\n-        this.eventListeners.fire((Event)event);\n+    protected void fireBuilderEvent(final ConfigurationBuilderEvent configurationBuilderEvent) {\n+        this.eventListeners.fire((Event)configurationBuilderEvent);\n     }\n     \n-    private void updateParameters(final Map<String, Object> newParams) {\n-        final Map<String, Object> map = new HashMap<String, Object>();\n-        if (newParams != null) {\n-            map.putAll(newParams);\n+    private void updateParameters(final Map<String, Object> map) {\n+        final HashMap m = new HashMap();\n+        if (map != null) {\n+            m.putAll(map);\n         }\n-        this.parameters = Collections.unmodifiableMap((Map<? extends String, ?>)map);\n+        this.parameters = (Map<String, Object>)Collections.unmodifiableMap((Map<?, ?>)m);\n     }\n     \n-    private void registerEventListeners(final T obj) {\n-        final EventSource evSrc = ConfigurationUtils.asEventSource((Object)obj, true);\n-        for (final EventListenerRegistrationData<?> regData : this.eventListeners.getRegistrations()) {\n-            registerListener(evSrc, regData);\n+    private void registerEventListeners(final T t) {\n+        final EventSource eventSource = ConfigurationUtils.asEventSource((Object)t, true);\n+        final Iterator iterator = this.eventListeners.getRegistrations().iterator();\n+        while (iterator.hasNext()) {\n+            registerListener(eventSource, (org.apache.commons.configuration2.event.EventListenerRegistrationData<Event>)(EventListenerRegistrationData)iterator.next());\n         }\n     }\n     \n-    private void removeEventListeners(final T obj) {\n-        final EventSource evSrc = ConfigurationUtils.asEventSource((Object)obj, true);\n-        for (final EventListenerRegistrationData<?> regData : this.eventListeners.getRegistrations()) {\n-            removeListener(evSrc, regData);\n+    private void removeEventListeners(final T t) {\n+        final EventSource eventSource = ConfigurationUtils.asEventSource((Object)t, true);\n+        final Iterator iterator = this.eventListeners.getRegistrations().iterator();\n+        while (iterator.hasNext()) {\n+            removeListener(eventSource, (org.apache.commons.configuration2.event.EventListenerRegistrationData<Event>)(EventListenerRegistrationData)iterator.next());\n         }\n     }\n     \n     private EventSource fetchEventSource() {\n         return ConfigurationUtils.asEventSource((Object)this.result, true);\n     }\n     \n-    private void handleEventListenerProviders(final BuilderParameters params) {\n-        if (params instanceof EventListenerProvider) {\n-            this.eventListeners.addAll(((EventListenerProvider)params).getListeners());\n+    private void handleEventListenerProviders(final BuilderParameters builderParameters) {\n+        if (builderParameters instanceof EventListenerProvider) {\n+            this.eventListeners.addAll(((EventListenerProvider)builderParameters).getListeners());\n         }\n     }\n     \n-    private void checkResultInstance(final Object inst) {\n-        if (!this.getResultClass().isInstance(inst)) {\n-            throw new ConfigurationRuntimeException(\"Incompatible result object: \" + inst);\n+    private void checkResultInstance(final Object obj) {\n+        if (!this.getResultClass().isInstance(obj)) {\n+            throw new ConfigurationRuntimeException(\"Incompatible result object: \" + obj);\n         }\n     }\n     \n     private Map<String, Object> getFilteredParameters() {\n-        final Map<String, Object> filteredMap = new HashMap<String, Object>(this.getParameters());\n-        final Iterator<String> it = filteredMap.keySet().iterator();\n-        while (it.hasNext()) {\n-            final String key = (String)it.next();\n-            if (key.startsWith(\"config-\")) {\n-                it.remove();\n+        final HashMap hashMap = new HashMap((Map<? extends K, ? extends V>)this.getParameters());\n+        final Iterator iterator = hashMap.keySet().iterator();\n+        while (iterator.hasNext()) {\n+            if (((String)iterator.next()).startsWith(\"config-\")) {\n+                iterator.remove();\n             }\n         }\n-        return filteredMap;\n+        return hashMap;\n     }\n     \n-    private void handleInitializable(final T obj) {\n-        if (obj instanceof Initializable) {\n-            ((Initializable)obj).initialize();\n+    private void handleInitializable(final T t) {\n+        if (t instanceof Initializable) {\n+            ((Initializable)t).initialize();\n         }\n     }\n     \n-    private static <E extends Event> void registerListener(final EventSource evSrc, final EventListenerRegistrationData<E> regData) {\n-        evSrc.addEventListener(regData.getEventType(), regData.getListener());\n+    private static <E extends Event> void registerListener(final EventSource eventSource, final EventListenerRegistrationData<E> eventListenerRegistrationData) {\n+        eventSource.addEventListener(eventListenerRegistrationData.getEventType(), eventListenerRegistrationData.getListener());\n     }\n     \n-    private static <E extends Event> void removeListener(final EventSource evSrc, final EventListenerRegistrationData<E> regData) {\n-        evSrc.removeEventListener(regData.getEventType(), regData.getListener());\n+    private static <E extends Event> void removeListener(final EventSource eventSource, final EventListenerRegistrationData<E> eventListenerRegistrationData) {\n+        eventSource.removeEventListener(eventListenerRegistrationData.getEventType(), eventListenerRegistrationData.getListener());\n     }\n }\n"}]}
