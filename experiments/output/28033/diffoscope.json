{"diffoscope-json-version": 1, "source1": "first/TapeInputStream.class", "source2": "second/TapeInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,243 +1,243 @@\n-  SHA-256 checksum dd6a778c57f3a205e898a46807fd17f9a0bbc6ba9575304824f03af02cff0e15\n+  SHA-256 checksum 0f6feae05ff6250f2f8ee7f729d65cdc85737e254f894d440a8241e964aee26b\n   Compiled from \"TapeInputStream.java\"\n class org.apache.commons.compress.archivers.dump.TapeInputStream extends java.io.FilterInputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n-  this_class: #17                         // org/apache/commons/compress/archivers/dump/TapeInputStream\n-  super_class: #63                        // java/io/FilterInputStream\n+  this_class: #10                         // org/apache/commons/compress/archivers/dump/TapeInputStream\n+  super_class: #4                         // java/io/FilterInputStream\n   interfaces: 0, fields: 7, methods: 13, attributes: 2\n Constant pool:\n-    #1 = Class              #137          // org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n-    #2 = Methodref          #63.#138      // java/io/FilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-    #3 = Fieldref           #17.#139      // org/apache/commons/compress/archivers/dump/TapeInputStream.blockBuffer:[B\n-    #4 = Fieldref           #17.#140      // org/apache/commons/compress/archivers/dump/TapeInputStream.currBlkIdx:I\n-    #5 = Fieldref           #17.#141      // org/apache/commons/compress/archivers/dump/TapeInputStream.blockSize:I\n-    #6 = Fieldref           #17.#142      // org/apache/commons/compress/archivers/dump/TapeInputStream.readOffset:I\n-    #7 = Fieldref           #17.#143      // org/apache/commons/compress/archivers/dump/TapeInputStream.isCompressed:Z\n-    #8 = Class              #144          // java/io/IOException\n-    #9 = Class              #145          // java/lang/StringBuilder\n-   #10 = Methodref          #9.#146       // java/lang/StringBuilder.\"<init>\":()V\n-   #11 = String             #147          // Block with\n-   #12 = Methodref          #9.#148       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #13 = Methodref          #9.#149       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #14 = String             #150          //  records found, must be at least 1\n-   #15 = Methodref          #9.#151       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #16 = Methodref          #8.#152       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #17 = Class              #153          // org/apache/commons/compress/archivers/dump/TapeInputStream\n-   #18 = Methodref          #154.#155     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #19 = Methodref          #17.#156      // org/apache/commons/compress/archivers/dump/TapeInputStream.readFully:([BII)V\n-   #20 = Fieldref           #17.#157      // org/apache/commons/compress/archivers/dump/TapeInputStream.in:Ljava/io/InputStream;\n-   #21 = Methodref          #158.#159     // java/io/InputStream.available:()I\n-   #22 = Class              #160          // java/lang/IllegalArgumentException\n-   #23 = String             #161          // All reads must be multiple of record size (1024 bytes.\n-   #24 = Methodref          #22.#152      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #25 = Methodref          #17.#162      // org/apache/commons/compress/archivers/dump/TapeInputStream.readBlock:(Z)V\n-   #26 = Class              #163          // org/apache/commons/compress/archivers/dump/ShortFileException\n-   #27 = Long               1024l\n-   #29 = Long               -1l\n-   #31 = Methodref          #164.#165     // org/apache/commons/compress/utils/ExactMath.add:(IJ)I\n-   #32 = Fieldref           #154.#157     // java/lang/System.in:Ljava/io/InputStream;\n-   #33 = Methodref          #158.#166     // java/io/InputStream.close:()V\n-   #34 = Methodref          #17.#167      // org/apache/commons/compress/archivers/dump/TapeInputStream.read:([BII)I\n-   #35 = Methodref          #26.#146      // org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n-   #36 = String             #168          // Input buffer is closed\n-   #37 = Fieldref           #17.#169      // org/apache/commons/compress/archivers/dump/TapeInputStream.bytesRead:J\n-   #38 = Long               4l\n-   #40 = Methodref          #170.#171     // org/apache/commons/compress/archivers/dump/DumpArchiveUtil.convert32:([BI)I\n-   #41 = Integer            268435455\n-   #42 = Methodref          #17.#172      // org/apache/commons/compress/archivers/dump/TapeInputStream.readRange:(I)[B\n-   #43 = Methodref          #173.#174     // java/util/Arrays.fill:([BB)V\n-   #44 = Fieldref           #64.#175      // org/apache/commons/compress/archivers/dump/TapeInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE:[I\n-   #45 = Methodref          #176.#177     // org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE.find:(I)Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE;\n-   #46 = Methodref          #176.#178     // org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE.ordinal:()I\n-   #47 = Class              #179          // java/util/zip/Inflater\n-   #48 = Methodref          #47.#146      // java/util/zip/Inflater.\"<init>\":()V\n-   #49 = Methodref          #47.#180      // java/util/zip/Inflater.setInput:([BII)V\n-   #50 = Methodref          #47.#181      // java/util/zip/Inflater.inflate:([B)I\n-   #51 = Methodref          #47.#182      // java/util/zip/Inflater.end:()V\n-   #52 = Class              #183          // java/util/zip/DataFormatException\n-   #53 = Class              #184          // org/apache/commons/compress/archivers/dump/DumpArchiveException\n-   #54 = String             #185          // Bad data\n-   #55 = Methodref          #53.#186      // org/apache/commons/compress/archivers/dump/DumpArchiveException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #56 = Class              #187          // org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n-   #57 = String             #188          // BZLIB2\n-   #58 = Methodref          #56.#152      // org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":(Ljava/lang/String;)V\n-   #59 = String             #189          // LZO\n-   #60 = Methodref          #56.#146      // org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":()V\n-   #61 = Methodref          #190.#191     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n-   #62 = Methodref          #190.#192     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n-   #63 = Class              #193          // java/io/FilterInputStream\n-   #64 = Class              #194          // org/apache/commons/compress/archivers/dump/TapeInputStream$1\n-   #65 = Utf8               InnerClasses\n-   #66 = Utf8               blockBuffer\n-   #67 = Utf8               [B\n-   #68 = Utf8               currBlkIdx\n-   #69 = Utf8               I\n-   #70 = Utf8               blockSize\n-   #71 = Utf8               RECORD_SIZE\n-   #72 = Utf8               ConstantValue\n-   #73 = Integer            1024\n-   #74 = Utf8               readOffset\n-   #75 = Utf8               isCompressed\n-   #76 = Utf8               Z\n-   #77 = Utf8               bytesRead\n-   #78 = Utf8               J\n-   #79 = Utf8               <init>\n-   #80 = Utf8               (Ljava/io/InputStream;)V\n-   #81 = Utf8               Code\n-   #82 = Utf8               LineNumberTable\n-   #83 = Utf8               LocalVariableTable\n-   #84 = Utf8               this\n-   #85 = Utf8               Lorg/apache/commons/compress/archivers/dump/TapeInputStream;\n-   #86 = Utf8               in\n-   #87 = Utf8               Ljava/io/InputStream;\n-   #88 = Utf8               resetBlockSize\n-   #89 = Utf8               (IZ)V\n-   #90 = Utf8               recsPerBlock\n-   #91 = Utf8               oldBuffer\n-   #92 = Utf8               StackMapTable\n-   #93 = Utf8               Exceptions\n-   #94 = Utf8               available\n-   #95 = Utf8               ()I\n-   #96 = Utf8               read\n-   #97 = Utf8               ([BII)I\n-   #98 = Utf8               sfe\n-   #99 = Utf8               Lorg/apache/commons/compress/archivers/dump/ShortFileException;\n-  #100 = Utf8               n\n-  #101 = Utf8               b\n-  #102 = Utf8               off\n-  #103 = Utf8               len\n-  #104 = Utf8               bytes\n-  #105 = Utf8               skip\n-  #106 = Utf8               (J)J\n-  #107 = Utf8               close\n-  #108 = Utf8               ()V\n-  #109 = Utf8               peek\n-  #110 = Utf8               ()[B\n-  #111 = Utf8               readRecord\n-  #112 = Utf8               result\n-  #113 = Class              #67           // \"[B\"\n-  #114 = Utf8               readBlock\n-  #115 = Utf8               (Z)V\n-  #116 = Utf8               e\n-  #117 = Utf8               Ljava/util/zip/DataFormatException;\n-  #118 = Utf8               inflator\n-  #119 = Utf8               Ljava/util/zip/Inflater;\n-  #120 = Utf8               flags\n-  #121 = Utf8               length\n-  #122 = Utf8               compBuffer\n-  #123 = Utf8               h\n-  #124 = Utf8               compressed\n-  #125 = Utf8               decompress\n-  #126 = Class              #195          // java/lang/Throwable\n-  #127 = Utf8               readFully\n-  #128 = Utf8               ([BII)V\n-  #129 = Utf8               count\n-  #130 = Utf8               readRange\n-  #131 = Utf8               (I)[B\n-  #132 = Utf8               ret\n-  #133 = Utf8               getBytesRead\n-  #134 = Utf8               ()J\n-  #135 = Utf8               SourceFile\n-  #136 = Utf8               TapeInputStream.java\n-  #137 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n-  #138 = NameAndType        #79:#80       // \"<init>\":(Ljava/io/InputStream;)V\n-  #139 = NameAndType        #66:#67       // blockBuffer:[B\n-  #140 = NameAndType        #68:#69       // currBlkIdx:I\n-  #141 = NameAndType        #70:#69       // blockSize:I\n-  #142 = NameAndType        #74:#69       // readOffset:I\n-  #143 = NameAndType        #75:#76       // isCompressed:Z\n-  #144 = Utf8               java/io/IOException\n-  #145 = Utf8               java/lang/StringBuilder\n-  #146 = NameAndType        #79:#108      // \"<init>\":()V\n-  #147 = Utf8               Block with\n-  #148 = NameAndType        #196:#197     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #149 = NameAndType        #196:#198     // append:(I)Ljava/lang/StringBuilder;\n-  #150 = Utf8                records found, must be at least 1\n-  #151 = NameAndType        #199:#200     // toString:()Ljava/lang/String;\n-  #152 = NameAndType        #79:#201      // \"<init>\":(Ljava/lang/String;)V\n-  #153 = Utf8               org/apache/commons/compress/archivers/dump/TapeInputStream\n-  #154 = Class              #202          // java/lang/System\n-  #155 = NameAndType        #203:#204     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #156 = NameAndType        #127:#128     // readFully:([BII)V\n-  #157 = NameAndType        #86:#87       // in:Ljava/io/InputStream;\n-  #158 = Class              #205          // java/io/InputStream\n-  #159 = NameAndType        #94:#95       // available:()I\n-  #160 = Utf8               java/lang/IllegalArgumentException\n-  #161 = Utf8               All reads must be multiple of record size (1024 bytes.\n-  #162 = NameAndType        #114:#115     // readBlock:(Z)V\n-  #163 = Utf8               org/apache/commons/compress/archivers/dump/ShortFileException\n-  #164 = Class              #206          // org/apache/commons/compress/utils/ExactMath\n-  #165 = NameAndType        #207:#208     // add:(IJ)I\n-  #166 = NameAndType        #107:#108     // close:()V\n-  #167 = NameAndType        #96:#97       // read:([BII)I\n-  #168 = Utf8               Input buffer is closed\n-  #169 = NameAndType        #77:#78       // bytesRead:J\n-  #170 = Class              #209          // org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n-  #171 = NameAndType        #210:#211     // convert32:([BI)I\n-  #172 = NameAndType        #130:#131     // readRange:(I)[B\n-  #173 = Class              #212          // java/util/Arrays\n-  #174 = NameAndType        #213:#214     // fill:([BB)V\n-  #175 = NameAndType        #215:#216     // $SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE:[I\n-  #176 = Class              #217          // org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE\n-  #177 = NameAndType        #219:#220     // find:(I)Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE;\n-  #178 = NameAndType        #221:#95      // ordinal:()I\n-  #179 = Utf8               java/util/zip/Inflater\n-  #180 = NameAndType        #222:#128     // setInput:([BII)V\n-  #181 = NameAndType        #223:#224     // inflate:([B)I\n-  #182 = NameAndType        #225:#108     // end:()V\n-  #183 = Utf8               java/util/zip/DataFormatException\n-  #184 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveException\n-  #185 = Utf8               Bad data\n-  #186 = NameAndType        #79:#226      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #187 = Utf8               org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n-  #188 = Utf8               BZLIB2\n-  #189 = Utf8               LZO\n-  #190 = Class              #227          // org/apache/commons/compress/utils/IOUtils\n-  #191 = NameAndType        #127:#228     // readFully:(Ljava/io/InputStream;[BII)I\n-  #192 = NameAndType        #130:#229     // readRange:(Ljava/io/InputStream;I)[B\n-  #193 = Utf8               java/io/FilterInputStream\n-  #194 = Utf8               org/apache/commons/compress/archivers/dump/TapeInputStream$1\n-  #195 = Utf8               java/lang/Throwable\n-  #196 = Utf8               append\n-  #197 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #198 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #199 = Utf8               toString\n-  #200 = Utf8               ()Ljava/lang/String;\n-  #201 = Utf8               (Ljava/lang/String;)V\n-  #202 = Utf8               java/lang/System\n-  #203 = Utf8               arraycopy\n-  #204 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #205 = Utf8               java/io/InputStream\n-  #206 = Utf8               org/apache/commons/compress/utils/ExactMath\n-  #207 = Utf8               add\n-  #208 = Utf8               (IJ)I\n-  #209 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n-  #210 = Utf8               convert32\n-  #211 = Utf8               ([BI)I\n-  #212 = Utf8               java/util/Arrays\n-  #213 = Utf8               fill\n-  #214 = Utf8               ([BB)V\n-  #215 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE\n-  #216 = Utf8               [I\n-  #217 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE\n-  #218 = Utf8               COMPRESSION_TYPE\n-  #219 = Utf8               find\n-  #220 = Utf8               (I)Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE;\n-  #221 = Utf8               ordinal\n-  #222 = Utf8               setInput\n-  #223 = Utf8               inflate\n-  #224 = Utf8               ([B)I\n-  #225 = Utf8               end\n-  #226 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #227 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #228 = Utf8               (Ljava/io/InputStream;[BII)I\n-  #229 = Utf8               (Ljava/io/InputStream;I)[B\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n+    #2 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n+    #3 = Methodref          #4.#5         // java/io/FilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+    #4 = Class              #6            // java/io/FilterInputStream\n+    #5 = NameAndType        #7:#8         // \"<init>\":(Ljava/io/InputStream;)V\n+    #6 = Utf8               java/io/FilterInputStream\n+    #7 = Utf8               <init>\n+    #8 = Utf8               (Ljava/io/InputStream;)V\n+    #9 = Fieldref           #10.#11       // org/apache/commons/compress/archivers/dump/TapeInputStream.blockBuffer:[B\n+   #10 = Class              #12           // org/apache/commons/compress/archivers/dump/TapeInputStream\n+   #11 = NameAndType        #13:#14       // blockBuffer:[B\n+   #12 = Utf8               org/apache/commons/compress/archivers/dump/TapeInputStream\n+   #13 = Utf8               blockBuffer\n+   #14 = Utf8               [B\n+   #15 = Fieldref           #10.#16       // org/apache/commons/compress/archivers/dump/TapeInputStream.currBlkIdx:I\n+   #16 = NameAndType        #17:#18       // currBlkIdx:I\n+   #17 = Utf8               currBlkIdx\n+   #18 = Utf8               I\n+   #19 = Fieldref           #10.#20       // org/apache/commons/compress/archivers/dump/TapeInputStream.blockSize:I\n+   #20 = NameAndType        #21:#18       // blockSize:I\n+   #21 = Utf8               blockSize\n+   #22 = Fieldref           #10.#23       // org/apache/commons/compress/archivers/dump/TapeInputStream.readOffset:I\n+   #23 = NameAndType        #24:#18       // readOffset:I\n+   #24 = Utf8               readOffset\n+   #25 = Fieldref           #10.#26       // org/apache/commons/compress/archivers/dump/TapeInputStream.isCompressed:Z\n+   #26 = NameAndType        #27:#28       // isCompressed:Z\n+   #27 = Utf8               isCompressed\n+   #28 = Utf8               Z\n+   #29 = Class              #30           // java/io/IOException\n+   #30 = Utf8               java/io/IOException\n+   #31 = Class              #32           // java/lang/StringBuilder\n+   #32 = Utf8               java/lang/StringBuilder\n+   #33 = Methodref          #31.#34       // java/lang/StringBuilder.\"<init>\":()V\n+   #34 = NameAndType        #7:#35        // \"<init>\":()V\n+   #35 = Utf8               ()V\n+   #36 = String             #37           // Block with\n+   #37 = Utf8               Block with\n+   #38 = Methodref          #31.#39       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #39 = NameAndType        #40:#41       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #40 = Utf8               append\n+   #41 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #42 = Methodref          #31.#43       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #43 = NameAndType        #40:#44       // append:(I)Ljava/lang/StringBuilder;\n+   #44 = Utf8               (I)Ljava/lang/StringBuilder;\n+   #45 = String             #46           //  records found, must be at least 1\n+   #46 = Utf8                records found, must be at least 1\n+   #47 = Methodref          #31.#48       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #48 = NameAndType        #49:#50       // toString:()Ljava/lang/String;\n+   #49 = Utf8               toString\n+   #50 = Utf8               ()Ljava/lang/String;\n+   #51 = Methodref          #29.#52       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #52 = NameAndType        #7:#53        // \"<init>\":(Ljava/lang/String;)V\n+   #53 = Utf8               (Ljava/lang/String;)V\n+   #54 = Methodref          #55.#56       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #55 = Class              #57           // java/lang/System\n+   #56 = NameAndType        #58:#59       // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #57 = Utf8               java/lang/System\n+   #58 = Utf8               arraycopy\n+   #59 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #60 = Methodref          #10.#61       // org/apache/commons/compress/archivers/dump/TapeInputStream.readFully:([BII)V\n+   #61 = NameAndType        #62:#63       // readFully:([BII)V\n+   #62 = Utf8               readFully\n+   #63 = Utf8               ([BII)V\n+   #64 = Fieldref           #10.#65       // org/apache/commons/compress/archivers/dump/TapeInputStream.in:Ljava/io/InputStream;\n+   #65 = NameAndType        #66:#67       // in:Ljava/io/InputStream;\n+   #66 = Utf8               in\n+   #67 = Utf8               Ljava/io/InputStream;\n+   #68 = Methodref          #69.#70       // java/io/InputStream.available:()I\n+   #69 = Class              #71           // java/io/InputStream\n+   #70 = NameAndType        #72:#73       // available:()I\n+   #71 = Utf8               java/io/InputStream\n+   #72 = Utf8               available\n+   #73 = Utf8               ()I\n+   #74 = Class              #75           // java/lang/IllegalArgumentException\n+   #75 = Utf8               java/lang/IllegalArgumentException\n+   #76 = String             #77           // All reads must be multiple of record size (1024 bytes.\n+   #77 = Utf8               All reads must be multiple of record size (1024 bytes.\n+   #78 = Methodref          #74.#52       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #79 = Methodref          #10.#80       // org/apache/commons/compress/archivers/dump/TapeInputStream.readBlock:(Z)V\n+   #80 = NameAndType        #81:#82       // readBlock:(Z)V\n+   #81 = Utf8               readBlock\n+   #82 = Utf8               (Z)V\n+   #83 = Class              #84           // org/apache/commons/compress/archivers/dump/ShortFileException\n+   #84 = Utf8               org/apache/commons/compress/archivers/dump/ShortFileException\n+   #85 = Long               1024l\n+   #87 = Long               -1l\n+   #89 = Methodref          #90.#91       // org/apache/commons/compress/utils/ExactMath.add:(IJ)I\n+   #90 = Class              #92           // org/apache/commons/compress/utils/ExactMath\n+   #91 = NameAndType        #93:#94       // add:(IJ)I\n+   #92 = Utf8               org/apache/commons/compress/utils/ExactMath\n+   #93 = Utf8               add\n+   #94 = Utf8               (IJ)I\n+   #95 = Fieldref           #55.#65       // java/lang/System.in:Ljava/io/InputStream;\n+   #96 = Methodref          #69.#97       // java/io/InputStream.close:()V\n+   #97 = NameAndType        #98:#35       // close:()V\n+   #98 = Utf8               close\n+   #99 = Methodref          #10.#100      // org/apache/commons/compress/archivers/dump/TapeInputStream.read:([BII)I\n+  #100 = NameAndType        #101:#102     // read:([BII)I\n+  #101 = Utf8               read\n+  #102 = Utf8               ([BII)I\n+  #103 = Methodref          #83.#34       // org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n+  #104 = String             #105          // Input buffer is closed\n+  #105 = Utf8               Input buffer is closed\n+  #106 = Fieldref           #10.#107      // org/apache/commons/compress/archivers/dump/TapeInputStream.bytesRead:J\n+  #107 = NameAndType        #108:#109     // bytesRead:J\n+  #108 = Utf8               bytesRead\n+  #109 = Utf8               J\n+  #110 = Long               4l\n+  #112 = Methodref          #113.#114     // org/apache/commons/compress/archivers/dump/DumpArchiveUtil.convert32:([BI)I\n+  #113 = Class              #115          // org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n+  #114 = NameAndType        #116:#117     // convert32:([BI)I\n+  #115 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n+  #116 = Utf8               convert32\n+  #117 = Utf8               ([BI)I\n+  #118 = Integer            268435455\n+  #119 = Methodref          #10.#120      // org/apache/commons/compress/archivers/dump/TapeInputStream.readRange:(I)[B\n+  #120 = NameAndType        #121:#122     // readRange:(I)[B\n+  #121 = Utf8               readRange\n+  #122 = Utf8               (I)[B\n+  #123 = Methodref          #124.#125     // java/util/Arrays.fill:([BB)V\n+  #124 = Class              #126          // java/util/Arrays\n+  #125 = NameAndType        #127:#128     // fill:([BB)V\n+  #126 = Utf8               java/util/Arrays\n+  #127 = Utf8               fill\n+  #128 = Utf8               ([BB)V\n+  #129 = Fieldref           #130.#131     // org/apache/commons/compress/archivers/dump/TapeInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE:[I\n+  #130 = Class              #132          // org/apache/commons/compress/archivers/dump/TapeInputStream$1\n+  #131 = NameAndType        #133:#134     // $SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE:[I\n+  #132 = Utf8               org/apache/commons/compress/archivers/dump/TapeInputStream$1\n+  #133 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE\n+  #134 = Utf8               [I\n+  #135 = Methodref          #136.#137     // org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE.find:(I)Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE;\n+  #136 = Class              #138          // org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE\n+  #137 = NameAndType        #139:#140     // find:(I)Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE;\n+  #138 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE\n+  #139 = Utf8               find\n+  #140 = Utf8               (I)Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE;\n+  #141 = Methodref          #136.#142     // org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE.ordinal:()I\n+  #142 = NameAndType        #143:#73      // ordinal:()I\n+  #143 = Utf8               ordinal\n+  #144 = Class              #145          // java/util/zip/Inflater\n+  #145 = Utf8               java/util/zip/Inflater\n+  #146 = Methodref          #144.#34      // java/util/zip/Inflater.\"<init>\":()V\n+  #147 = Methodref          #144.#148     // java/util/zip/Inflater.setInput:([BII)V\n+  #148 = NameAndType        #149:#63      // setInput:([BII)V\n+  #149 = Utf8               setInput\n+  #150 = Methodref          #144.#151     // java/util/zip/Inflater.inflate:([B)I\n+  #151 = NameAndType        #152:#153     // inflate:([B)I\n+  #152 = Utf8               inflate\n+  #153 = Utf8               ([B)I\n+  #154 = Methodref          #144.#155     // java/util/zip/Inflater.end:()V\n+  #155 = NameAndType        #156:#35      // end:()V\n+  #156 = Utf8               end\n+  #157 = Class              #158          // java/util/zip/DataFormatException\n+  #158 = Utf8               java/util/zip/DataFormatException\n+  #159 = Class              #160          // org/apache/commons/compress/archivers/dump/DumpArchiveException\n+  #160 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveException\n+  #161 = String             #162          // Bad data\n+  #162 = Utf8               Bad data\n+  #163 = Methodref          #159.#164     // org/apache/commons/compress/archivers/dump/DumpArchiveException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #164 = NameAndType        #7:#165       // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #165 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #166 = Class              #167          // org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n+  #167 = Utf8               org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n+  #168 = String             #169          // BZLIB2\n+  #169 = Utf8               BZLIB2\n+  #170 = Methodref          #166.#52      // org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":(Ljava/lang/String;)V\n+  #171 = String             #172          // LZO\n+  #172 = Utf8               LZO\n+  #173 = Methodref          #166.#34      // org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":()V\n+  #174 = Methodref          #175.#176     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n+  #175 = Class              #177          // org/apache/commons/compress/utils/IOUtils\n+  #176 = NameAndType        #62:#178      // readFully:(Ljava/io/InputStream;[BII)I\n+  #177 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #178 = Utf8               (Ljava/io/InputStream;[BII)I\n+  #179 = Methodref          #175.#180     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+  #180 = NameAndType        #121:#181     // readRange:(Ljava/io/InputStream;I)[B\n+  #181 = Utf8               (Ljava/io/InputStream;I)[B\n+  #182 = Utf8               RECORD_SIZE\n+  #183 = Utf8               ConstantValue\n+  #184 = Integer            1024\n+  #185 = Utf8               Code\n+  #186 = Utf8               LineNumberTable\n+  #187 = Utf8               LocalVariableTable\n+  #188 = Utf8               this\n+  #189 = Utf8               Lorg/apache/commons/compress/archivers/dump/TapeInputStream;\n+  #190 = Utf8               resetBlockSize\n+  #191 = Utf8               (IZ)V\n+  #192 = Utf8               recsPerBlock\n+  #193 = Utf8               oldBuffer\n+  #194 = Utf8               StackMapTable\n+  #195 = Utf8               Exceptions\n+  #196 = Utf8               sfe\n+  #197 = Utf8               Lorg/apache/commons/compress/archivers/dump/ShortFileException;\n+  #198 = Utf8               n\n+  #199 = Utf8               b\n+  #200 = Utf8               off\n+  #201 = Utf8               len\n+  #202 = Utf8               bytes\n+  #203 = Utf8               skip\n+  #204 = Utf8               (J)J\n+  #205 = Utf8               peek\n+  #206 = Utf8               ()[B\n+  #207 = Utf8               readRecord\n+  #208 = Utf8               result\n+  #209 = Class              #14           // \"[B\"\n+  #210 = Utf8               e\n+  #211 = Utf8               Ljava/util/zip/DataFormatException;\n+  #212 = Utf8               inflator\n+  #213 = Utf8               Ljava/util/zip/Inflater;\n+  #214 = Utf8               flags\n+  #215 = Utf8               length\n+  #216 = Utf8               compBuffer\n+  #217 = Utf8               h\n+  #218 = Utf8               compressed\n+  #219 = Utf8               decompress\n+  #220 = Class              #221          // java/lang/Throwable\n+  #221 = Utf8               java/lang/Throwable\n+  #222 = Utf8               count\n+  #223 = Utf8               ret\n+  #224 = Utf8               getBytesRead\n+  #225 = Utf8               ()J\n+  #226 = Utf8               SourceFile\n+  #227 = Utf8               TapeInputStream.java\n+  #228 = Utf8               InnerClasses\n+  #229 = Utf8               COMPRESSION_TYPE\n {\n   private byte[] blockBuffer;\n     descriptor: [B\n     flags: (0x0002) ACC_PRIVATE\n \n   private int currBlkIdx;\n     descriptor: I\n@@ -267,28 +267,28 @@\n   public org.apache.commons.compress.archivers.dump.TapeInputStream(java.io.InputStream);\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #2                  // Method java/io/FilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+         2: invokespecial #3                  // Method java/io/FilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n          5: aload_0\n          6: sipush        1024\n          9: newarray       byte\n-        11: putfield      #3                  // Field blockBuffer:[B\n+        11: putfield      #9                  // Field blockBuffer:[B\n         14: aload_0\n         15: iconst_m1\n-        16: putfield      #4                  // Field currBlkIdx:I\n+        16: putfield      #15                 // Field currBlkIdx:I\n         19: aload_0\n         20: sipush        1024\n-        23: putfield      #5                  // Field blockSize:I\n+        23: putfield      #19                 // Field blockSize:I\n         26: aload_0\n         27: sipush        1024\n-        30: putfield      #6                  // Field readOffset:I\n+        30: putfield      #22                 // Field readOffset:I\n         33: return\n       LineNumberTable:\n         line 50: 0\n         line 38: 5\n         line 39: 14\n         line 40: 19\n         line 42: 26\n@@ -301,67 +301,67 @@\n   public void resetBlockSize(int, boolean) throws java.io.IOException;\n     descriptor: (IZ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=4, args_size=3\n          0: aload_0\n          1: iload_2\n-         2: putfield      #7                  // Field isCompressed:Z\n+         2: putfield      #25                 // Field isCompressed:Z\n          5: iload_1\n          6: iconst_1\n          7: if_icmpge     42\n-        10: new           #8                  // class java/io/IOException\n+        10: new           #29                 // class java/io/IOException\n         13: dup\n-        14: new           #9                  // class java/lang/StringBuilder\n+        14: new           #31                 // class java/lang/StringBuilder\n         17: dup\n-        18: invokespecial #10                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        21: ldc           #11                 // String Block with\n-        23: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        18: invokespecial #33                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        21: ldc           #36                 // String Block with\n+        23: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         26: iload_1\n-        27: invokevirtual #13                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        30: ldc           #14                 // String  records found, must be at least 1\n-        32: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        35: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        38: invokespecial #16                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        27: invokevirtual #42                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        30: ldc           #45                 // String  records found, must be at least 1\n+        32: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        35: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        38: invokespecial #51                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         41: athrow\n         42: aload_0\n         43: sipush        1024\n         46: iload_1\n         47: imul\n-        48: putfield      #5                  // Field blockSize:I\n+        48: putfield      #19                 // Field blockSize:I\n         51: aload_0\n-        52: getfield      #3                  // Field blockBuffer:[B\n+        52: getfield      #9                  // Field blockBuffer:[B\n         55: astore_3\n         56: aload_0\n         57: aload_0\n-        58: getfield      #5                  // Field blockSize:I\n+        58: getfield      #19                 // Field blockSize:I\n         61: newarray       byte\n-        63: putfield      #3                  // Field blockBuffer:[B\n+        63: putfield      #9                  // Field blockBuffer:[B\n         66: aload_3\n         67: iconst_0\n         68: aload_0\n-        69: getfield      #3                  // Field blockBuffer:[B\n+        69: getfield      #9                  // Field blockBuffer:[B\n         72: iconst_0\n         73: sipush        1024\n-        76: invokestatic  #18                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        76: invokestatic  #54                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         79: aload_0\n         80: aload_0\n-        81: getfield      #3                  // Field blockBuffer:[B\n+        81: getfield      #9                  // Field blockBuffer:[B\n         84: sipush        1024\n         87: aload_0\n-        88: getfield      #5                  // Field blockSize:I\n+        88: getfield      #19                 // Field blockSize:I\n         91: sipush        1024\n         94: isub\n-        95: invokespecial #19                 // Method readFully:([BII)V\n+        95: invokespecial #60                 // Method readFully:([BII)V\n         98: aload_0\n         99: iconst_0\n-       100: putfield      #4                  // Field currBlkIdx:I\n+       100: putfield      #15                 // Field currBlkIdx:I\n        103: aload_0\n        104: sipush        1024\n-       107: putfield      #6                  // Field readOffset:I\n+       107: putfield      #22                 // Field readOffset:I\n        110: return\n       LineNumberTable:\n         line 71: 0\n         line 73: 5\n         line 74: 10\n         line 77: 42\n         line 80: 51\n@@ -384,27 +384,27 @@\n \n   public int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field readOffset:I\n+         1: getfield      #22                 // Field readOffset:I\n          4: aload_0\n-         5: getfield      #5                  // Field blockSize:I\n+         5: getfield      #19                 // Field blockSize:I\n          8: if_icmpge     21\n         11: aload_0\n-        12: getfield      #5                  // Field blockSize:I\n+        12: getfield      #19                 // Field blockSize:I\n         15: aload_0\n-        16: getfield      #6                  // Field readOffset:I\n+        16: getfield      #22                 // Field readOffset:I\n         19: isub\n         20: ireturn\n         21: aload_0\n-        22: getfield      #20                 // Field in:Ljava/io/InputStream;\n-        25: invokevirtual #21                 // Method java/io/InputStream.available:()I\n+        22: getfield      #64                 // Field in:Ljava/io/InputStream;\n+        25: invokevirtual #68                 // Method java/io/InputStream.available:()I\n         28: ireturn\n       LineNumberTable:\n         line 96: 0\n         line 97: 11\n         line 100: 21\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -415,18 +415,18 @@\n       throws java.io.IOException\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n-         0: new           #22                 // class java/lang/IllegalArgumentException\n+         0: new           #74                 // class java/lang/IllegalArgumentException\n          3: dup\n-         4: ldc           #23                 // String All reads must be multiple of record size (1024 bytes.\n-         6: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+         4: ldc           #76                 // String All reads must be multiple of record size (1024 bytes.\n+         6: invokespecial #78                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n          9: athrow\n       LineNumberTable:\n         line 108: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/compress/archivers/dump/TapeInputStream;\n     Exceptions:\n@@ -441,72 +441,72 @@\n          1: ifne          6\n          4: iconst_0\n          5: ireturn\n          6: iload_3\n          7: sipush        1024\n         10: irem\n         11: ifeq          24\n-        14: new           #22                 // class java/lang/IllegalArgumentException\n+        14: new           #74                 // class java/lang/IllegalArgumentException\n         17: dup\n-        18: ldc           #23                 // String All reads must be multiple of record size (1024 bytes.\n-        20: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        18: ldc           #76                 // String All reads must be multiple of record size (1024 bytes.\n+        20: invokespecial #78                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         23: athrow\n         24: iconst_0\n         25: istore        4\n         27: iload         4\n         29: iload_3\n         30: if_icmpge     136\n         33: aload_0\n-        34: getfield      #6                  // Field readOffset:I\n+        34: getfield      #22                 // Field readOffset:I\n         37: aload_0\n-        38: getfield      #5                  // Field blockSize:I\n+        38: getfield      #19                 // Field blockSize:I\n         41: if_icmpne     56\n         44: aload_0\n         45: iconst_1\n-        46: invokespecial #25                 // Method readBlock:(Z)V\n+        46: invokespecial #79                 // Method readBlock:(Z)V\n         49: goto          56\n         52: astore        5\n         54: iconst_m1\n         55: ireturn\n         56: iconst_0\n         57: istore        5\n         59: aload_0\n-        60: getfield      #6                  // Field readOffset:I\n+        60: getfield      #22                 // Field readOffset:I\n         63: iload_3\n         64: iload         4\n         66: isub\n         67: iadd\n         68: aload_0\n-        69: getfield      #5                  // Field blockSize:I\n+        69: getfield      #19                 // Field blockSize:I\n         72: if_icmpgt     84\n         75: iload_3\n         76: iload         4\n         78: isub\n         79: istore        5\n         81: goto          95\n         84: aload_0\n-        85: getfield      #5                  // Field blockSize:I\n+        85: getfield      #19                 // Field blockSize:I\n         88: aload_0\n-        89: getfield      #6                  // Field readOffset:I\n+        89: getfield      #22                 // Field readOffset:I\n         92: isub\n         93: istore        5\n         95: aload_0\n-        96: getfield      #3                  // Field blockBuffer:[B\n+        96: getfield      #9                  // Field blockBuffer:[B\n         99: aload_0\n-       100: getfield      #6                  // Field readOffset:I\n+       100: getfield      #22                 // Field readOffset:I\n        103: aload_1\n        104: iload_2\n        105: iload         5\n-       107: invokestatic  #18                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       107: invokestatic  #54                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        110: aload_0\n        111: dup\n-       112: getfield      #6                  // Field readOffset:I\n+       112: getfield      #22                 // Field readOffset:I\n        115: iload         5\n        117: iadd\n-       118: putfield      #6                  // Field readOffset:I\n+       118: putfield      #22                 // Field readOffset:I\n        121: iload         4\n        123: iload         5\n        125: iadd\n        126: istore        4\n        128: iload_2\n        129: iload         5\n        131: iadd\n@@ -568,85 +568,85 @@\n \n   public long skip(long) throws java.io.IOException;\n     descriptor: (J)J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=7, args_size=2\n          0: lload_1\n-         1: ldc2_w        #27                 // long 1024l\n+         1: ldc2_w        #85                 // long 1024l\n          4: lrem\n          5: lconst_0\n          6: lcmp\n          7: ifeq          20\n-        10: new           #22                 // class java/lang/IllegalArgumentException\n+        10: new           #74                 // class java/lang/IllegalArgumentException\n         13: dup\n-        14: ldc           #23                 // String All reads must be multiple of record size (1024 bytes.\n-        16: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        14: ldc           #76                 // String All reads must be multiple of record size (1024 bytes.\n+        16: invokespecial #78                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         19: athrow\n         20: lconst_0\n         21: lstore_3\n         22: lload_3\n         23: lload_1\n         24: lcmp\n         25: ifge          132\n         28: aload_0\n-        29: getfield      #6                  // Field readOffset:I\n+        29: getfield      #22                 // Field readOffset:I\n         32: aload_0\n-        33: getfield      #5                  // Field blockSize:I\n+        33: getfield      #19                 // Field blockSize:I\n         36: if_icmpne     69\n         39: aload_0\n         40: lload_1\n         41: lload_3\n         42: lsub\n         43: aload_0\n-        44: getfield      #5                  // Field blockSize:I\n+        44: getfield      #19                 // Field blockSize:I\n         47: i2l\n         48: lcmp\n         49: ifge          56\n         52: iconst_1\n         53: goto          57\n         56: iconst_0\n-        57: invokespecial #25                 // Method readBlock:(Z)V\n+        57: invokespecial #79                 // Method readBlock:(Z)V\n         60: goto          69\n         63: astore        5\n-        65: ldc2_w        #29                 // long -1l\n+        65: ldc2_w        #87                 // long -1l\n         68: lreturn\n         69: lconst_0\n         70: lstore        5\n         72: aload_0\n-        73: getfield      #6                  // Field readOffset:I\n+        73: getfield      #22                 // Field readOffset:I\n         76: i2l\n         77: lload_1\n         78: lload_3\n         79: lsub\n         80: ladd\n         81: aload_0\n-        82: getfield      #5                  // Field blockSize:I\n+        82: getfield      #19                 // Field blockSize:I\n         85: i2l\n         86: lcmp\n         87: ifgt          98\n         90: lload_1\n         91: lload_3\n         92: lsub\n         93: lstore        5\n         95: goto          111\n         98: aload_0\n-        99: getfield      #5                  // Field blockSize:I\n+        99: getfield      #19                 // Field blockSize:I\n        102: i2l\n        103: aload_0\n-       104: getfield      #6                  // Field readOffset:I\n+       104: getfield      #22                 // Field readOffset:I\n        107: i2l\n        108: lsub\n        109: lstore        5\n        111: aload_0\n        112: aload_0\n-       113: getfield      #6                  // Field readOffset:I\n+       113: getfield      #22                 // Field readOffset:I\n        116: lload         5\n-       118: invokestatic  #31                 // Method org/apache/commons/compress/utils/ExactMath.add:(IJ)I\n-       121: putfield      #6                  // Field readOffset:I\n+       118: invokestatic  #89                 // Method org/apache/commons/compress/utils/ExactMath.add:(IJ)I\n+       121: putfield      #22                 // Field readOffset:I\n        124: lload_3\n        125: lload         5\n        127: ladd\n        128: lstore_3\n        129: goto          22\n        132: lload_3\n        133: lreturn\n@@ -703,23 +703,23 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #20                 // Field in:Ljava/io/InputStream;\n+         1: getfield      #64                 // Field in:Ljava/io/InputStream;\n          4: ifnull        24\n          7: aload_0\n-         8: getfield      #20                 // Field in:Ljava/io/InputStream;\n-        11: getstatic     #32                 // Field java/lang/System.in:Ljava/io/InputStream;\n+         8: getfield      #64                 // Field in:Ljava/io/InputStream;\n+        11: getstatic     #95                 // Field java/lang/System.in:Ljava/io/InputStream;\n         14: if_acmpeq     24\n         17: aload_0\n-        18: getfield      #20                 // Field in:Ljava/io/InputStream;\n-        21: invokevirtual #33                 // Method java/io/InputStream.close:()V\n+        18: getfield      #64                 // Field in:Ljava/io/InputStream;\n+        21: invokevirtual #96                 // Method java/io/InputStream.close:()V\n         24: return\n       LineNumberTable:\n         line 222: 0\n         line 223: 17\n         line 225: 24\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -731,37 +731,37 @@\n \n   public byte[] peek() throws java.io.IOException;\n     descriptor: ()[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field readOffset:I\n+         1: getfield      #22                 // Field readOffset:I\n          4: aload_0\n-         5: getfield      #5                  // Field blockSize:I\n+         5: getfield      #19                 // Field blockSize:I\n          8: if_icmpne     22\n         11: aload_0\n         12: iconst_1\n-        13: invokespecial #25                 // Method readBlock:(Z)V\n+        13: invokespecial #79                 // Method readBlock:(Z)V\n         16: goto          22\n         19: astore_1\n         20: aconst_null\n         21: areturn\n         22: sipush        1024\n         25: newarray       byte\n         27: astore_1\n         28: aload_0\n-        29: getfield      #3                  // Field blockBuffer:[B\n+        29: getfield      #9                  // Field blockBuffer:[B\n         32: aload_0\n-        33: getfield      #6                  // Field readOffset:I\n+        33: getfield      #22                 // Field readOffset:I\n         36: aload_1\n         37: iconst_0\n         38: aload_1\n         39: arraylength\n-        40: invokestatic  #18                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        40: invokestatic  #54                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         43: aload_1\n         44: areturn\n       Exception table:\n          from    to  target type\n             11    16    19   Class org/apache/commons/compress/archivers/dump/ShortFileException\n       LineNumberTable:\n         line 237: 0\n@@ -794,19 +794,19 @@\n          5: astore_1\n          6: iconst_m1\n          7: aload_0\n          8: aload_1\n          9: iconst_0\n         10: aload_1\n         11: arraylength\n-        12: invokevirtual #34                 // Method read:([BII)I\n+        12: invokevirtual #99                 // Method read:([BII)I\n         15: if_icmpne     26\n-        18: new           #26                 // class org/apache/commons/compress/archivers/dump/ShortFileException\n+        18: new           #83                 // class org/apache/commons/compress/archivers/dump/ShortFileException\n         21: dup\n-        22: invokespecial #35                 // Method org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n+        22: invokespecial #103                // Method org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n         25: athrow\n         26: aload_1\n         27: areturn\n       LineNumberTable:\n         line 259: 0\n         line 263: 6\n         line 264: 18\n@@ -824,193 +824,193 @@\n \n   private void readBlock(boolean) throws java.io.IOException;\n     descriptor: (Z)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=10, args_size=2\n          0: aload_0\n-         1: getfield      #20                 // Field in:Ljava/io/InputStream;\n+         1: getfield      #64                 // Field in:Ljava/io/InputStream;\n          4: ifnonnull     17\n-         7: new           #8                  // class java/io/IOException\n+         7: new           #29                 // class java/io/IOException\n         10: dup\n-        11: ldc           #36                 // String Input buffer is closed\n-        13: invokespecial #16                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #104                // String Input buffer is closed\n+        13: invokespecial #51                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_0\n-        18: getfield      #7                  // Field isCompressed:Z\n+        18: getfield      #25                 // Field isCompressed:Z\n         21: ifeq          32\n         24: aload_0\n-        25: getfield      #4                  // Field currBlkIdx:I\n+        25: getfield      #15                 // Field currBlkIdx:I\n         28: iconst_m1\n         29: if_icmpne     62\n         32: aload_0\n         33: aload_0\n-        34: getfield      #3                  // Field blockBuffer:[B\n+        34: getfield      #9                  // Field blockBuffer:[B\n         37: iconst_0\n         38: aload_0\n-        39: getfield      #5                  // Field blockSize:I\n-        42: invokespecial #19                 // Method readFully:([BII)V\n+        39: getfield      #19                 // Field blockSize:I\n+        42: invokespecial #60                 // Method readFully:([BII)V\n         45: aload_0\n         46: dup\n-        47: getfield      #37                 // Field bytesRead:J\n+        47: getfield      #106                // Field bytesRead:J\n         50: aload_0\n-        51: getfield      #5                  // Field blockSize:I\n+        51: getfield      #19                 // Field blockSize:I\n         54: i2l\n         55: ladd\n-        56: putfield      #37                 // Field bytesRead:J\n+        56: putfield      #106                // Field bytesRead:J\n         59: goto          343\n         62: aload_0\n         63: aload_0\n-        64: getfield      #3                  // Field blockBuffer:[B\n+        64: getfield      #9                  // Field blockBuffer:[B\n         67: iconst_0\n         68: iconst_4\n-        69: invokespecial #19                 // Method readFully:([BII)V\n+        69: invokespecial #60                 // Method readFully:([BII)V\n         72: aload_0\n         73: dup\n-        74: getfield      #37                 // Field bytesRead:J\n-        77: ldc2_w        #38                 // long 4l\n+        74: getfield      #106                // Field bytesRead:J\n+        77: ldc2_w        #110                // long 4l\n         80: ladd\n-        81: putfield      #37                 // Field bytesRead:J\n+        81: putfield      #106                // Field bytesRead:J\n         84: aload_0\n-        85: getfield      #3                  // Field blockBuffer:[B\n+        85: getfield      #9                  // Field blockBuffer:[B\n         88: iconst_0\n-        89: invokestatic  #40                 // Method org/apache/commons/compress/archivers/dump/DumpArchiveUtil.convert32:([BI)I\n+        89: invokestatic  #112                // Method org/apache/commons/compress/archivers/dump/DumpArchiveUtil.convert32:([BI)I\n         92: istore_2\n         93: iload_2\n         94: iconst_1\n         95: iand\n         96: iconst_1\n         97: if_icmpne     104\n        100: iconst_1\n        101: goto          105\n        104: iconst_0\n        105: istore_3\n        106: iload_3\n        107: ifne          140\n        110: aload_0\n        111: aload_0\n-       112: getfield      #3                  // Field blockBuffer:[B\n+       112: getfield      #9                  // Field blockBuffer:[B\n        115: iconst_0\n        116: aload_0\n-       117: getfield      #5                  // Field blockSize:I\n-       120: invokespecial #19                 // Method readFully:([BII)V\n+       117: getfield      #19                 // Field blockSize:I\n+       120: invokespecial #60                 // Method readFully:([BII)V\n        123: aload_0\n        124: dup\n-       125: getfield      #37                 // Field bytesRead:J\n+       125: getfield      #106                // Field bytesRead:J\n        128: aload_0\n-       129: getfield      #5                  // Field blockSize:I\n+       129: getfield      #19                 // Field blockSize:I\n        132: i2l\n        133: ladd\n-       134: putfield      #37                 // Field bytesRead:J\n+       134: putfield      #106                // Field bytesRead:J\n        137: goto          343\n        140: iload_2\n        141: iconst_1\n        142: ishr\n        143: bipush        7\n        145: iand\n        146: istore        4\n        148: iload_2\n        149: iconst_4\n        150: ishr\n-       151: ldc           #41                 // int 268435455\n+       151: ldc           #118                // int 268435455\n        153: iand\n        154: istore        5\n        156: aload_0\n        157: iload         5\n-       159: invokespecial #42                 // Method readRange:(I)[B\n+       159: invokespecial #119                // Method readRange:(I)[B\n        162: astore        6\n        164: aload_0\n        165: dup\n-       166: getfield      #37                 // Field bytesRead:J\n+       166: getfield      #106                // Field bytesRead:J\n        169: iload         5\n        171: i2l\n        172: ladd\n-       173: putfield      #37                 // Field bytesRead:J\n+       173: putfield      #106                // Field bytesRead:J\n        176: iload_1\n        177: ifne          191\n        180: aload_0\n-       181: getfield      #3                  // Field blockBuffer:[B\n+       181: getfield      #9                  // Field blockBuffer:[B\n        184: iconst_0\n-       185: invokestatic  #43                 // Method java/util/Arrays.fill:([BB)V\n+       185: invokestatic  #123                // Method java/util/Arrays.fill:([BB)V\n        188: goto          343\n-       191: getstatic     #44                 // Field org/apache/commons/compress/archivers/dump/TapeInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE:[I\n+       191: getstatic     #129                // Field org/apache/commons/compress/archivers/dump/TapeInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE:[I\n        194: iload         4\n        196: iconst_3\n        197: iand\n-       198: invokestatic  #45                 // Method org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE.find:(I)Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE;\n-       201: invokevirtual #46                 // Method org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE.ordinal:()I\n+       198: invokestatic  #135                // Method org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE.find:(I)Lorg/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE;\n+       201: invokevirtual #141                // Method org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE.ordinal:()I\n        204: iaload\n        205: tableswitch   { // 1 to 3\n                        1: 232\n                        2: 315\n                        3: 325\n                  default: 335\n             }\n-       232: new           #47                 // class java/util/zip/Inflater\n+       232: new           #144                // class java/util/zip/Inflater\n        235: dup\n-       236: invokespecial #48                 // Method java/util/zip/Inflater.\"<init>\":()V\n+       236: invokespecial #146                // Method java/util/zip/Inflater.\"<init>\":()V\n        239: astore        7\n        241: aload         7\n        243: aload         6\n        245: iconst_0\n        246: aload         6\n        248: arraylength\n-       249: invokevirtual #49                 // Method java/util/zip/Inflater.setInput:([BII)V\n+       249: invokevirtual #147                // Method java/util/zip/Inflater.setInput:([BII)V\n        252: aload         7\n        254: aload_0\n-       255: getfield      #3                  // Field blockBuffer:[B\n-       258: invokevirtual #50                 // Method java/util/zip/Inflater.inflate:([B)I\n+       255: getfield      #9                  // Field blockBuffer:[B\n+       258: invokevirtual #150                // Method java/util/zip/Inflater.inflate:([B)I\n        261: istore        5\n        263: iload         5\n        265: aload_0\n-       266: getfield      #5                  // Field blockSize:I\n+       266: getfield      #19                 // Field blockSize:I\n        269: if_icmpeq     280\n-       272: new           #26                 // class org/apache/commons/compress/archivers/dump/ShortFileException\n+       272: new           #83                 // class org/apache/commons/compress/archivers/dump/ShortFileException\n        275: dup\n-       276: invokespecial #35                 // Method org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n+       276: invokespecial #103                // Method org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n        279: athrow\n        280: aload         7\n-       282: invokevirtual #51                 // Method java/util/zip/Inflater.end:()V\n+       282: invokevirtual #154                // Method java/util/zip/Inflater.end:()V\n        285: goto          312\n        288: astore        8\n-       290: new           #53                 // class org/apache/commons/compress/archivers/dump/DumpArchiveException\n+       290: new           #159                // class org/apache/commons/compress/archivers/dump/DumpArchiveException\n        293: dup\n-       294: ldc           #54                 // String Bad data\n+       294: ldc           #161                // String Bad data\n        296: aload         8\n-       298: invokespecial #55                 // Method org/apache/commons/compress/archivers/dump/DumpArchiveException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+       298: invokespecial #163                // Method org/apache/commons/compress/archivers/dump/DumpArchiveException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n        301: athrow\n        302: astore        9\n        304: aload         7\n-       306: invokevirtual #51                 // Method java/util/zip/Inflater.end:()V\n+       306: invokevirtual #154                // Method java/util/zip/Inflater.end:()V\n        309: aload         9\n        311: athrow\n        312: goto          343\n-       315: new           #56                 // class org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n+       315: new           #166                // class org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n        318: dup\n-       319: ldc           #57                 // String BZLIB2\n-       321: invokespecial #58                 // Method org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":(Ljava/lang/String;)V\n+       319: ldc           #168                // String BZLIB2\n+       321: invokespecial #170                // Method org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":(Ljava/lang/String;)V\n        324: athrow\n-       325: new           #56                 // class org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n+       325: new           #166                // class org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n        328: dup\n-       329: ldc           #59                 // String LZO\n-       331: invokespecial #58                 // Method org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":(Ljava/lang/String;)V\n+       329: ldc           #171                // String LZO\n+       331: invokespecial #170                // Method org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":(Ljava/lang/String;)V\n        334: athrow\n-       335: new           #56                 // class org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n+       335: new           #166                // class org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException\n        338: dup\n-       339: invokespecial #60                 // Method org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":()V\n+       339: invokespecial #173                // Method org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.\"<init>\":()V\n        342: athrow\n        343: aload_0\n        344: dup\n-       345: getfield      #4                  // Field currBlkIdx:I\n+       345: getfield      #15                 // Field currBlkIdx:I\n        348: iconst_1\n        349: iadd\n-       350: putfield      #4                  // Field currBlkIdx:I\n+       350: putfield      #15                 // Field currBlkIdx:I\n        353: aload_0\n        354: iconst_0\n-       355: putfield      #6                  // Field readOffset:I\n+       355: putfield      #22                 // Field readOffset:I\n        358: return\n       Exception table:\n          from    to  target type\n            241   280   288   Class java/util/zip/DataFormatException\n            241   280   302   any\n            288   304   302   any\n       LineNumberTable:\n@@ -1099,26 +1099,26 @@\n \n   private void readFully(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=5, args_size=4\n          0: aload_0\n-         1: getfield      #20                 // Field in:Ljava/io/InputStream;\n+         1: getfield      #64                 // Field in:Ljava/io/InputStream;\n          4: aload_1\n          5: iload_2\n          6: iload_3\n-         7: invokestatic  #61                 // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n+         7: invokestatic  #174                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n         10: istore        4\n         12: iload         4\n         14: iload_3\n         15: if_icmpge     26\n-        18: new           #26                 // class org/apache/commons/compress/archivers/dump/ShortFileException\n+        18: new           #83                 // class org/apache/commons/compress/archivers/dump/ShortFileException\n         21: dup\n-        22: invokespecial #35                 // Method org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n+        22: invokespecial #103                // Method org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n         25: athrow\n         26: return\n       LineNumberTable:\n         line 351: 0\n         line 352: 12\n         line 353: 18\n         line 355: 26\n@@ -1138,25 +1138,25 @@\n \n   private byte[] readRange(int) throws java.io.IOException;\n     descriptor: (I)[B\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #20                 // Field in:Ljava/io/InputStream;\n+         1: getfield      #64                 // Field in:Ljava/io/InputStream;\n          4: iload_1\n-         5: invokestatic  #62                 // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+         5: invokestatic  #179                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n          8: astore_2\n          9: aload_2\n         10: arraylength\n         11: iload_1\n         12: if_icmpge     23\n-        15: new           #26                 // class org/apache/commons/compress/archivers/dump/ShortFileException\n+        15: new           #83                 // class org/apache/commons/compress/archivers/dump/ShortFileException\n         18: dup\n-        19: invokespecial #35                 // Method org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n+        19: invokespecial #103                // Method org/apache/commons/compress/archivers/dump/ShortFileException.\"<init>\":()V\n         22: athrow\n         23: aload_2\n         24: areturn\n       LineNumberTable:\n         line 358: 0\n         line 359: 9\n         line 360: 15\n@@ -1175,19 +1175,19 @@\n \n   public long getBytesRead();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #37                 // Field bytesRead:J\n+         1: getfield      #106                // Field bytesRead:J\n          4: lreturn\n       LineNumberTable:\n         line 369: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/dump/TapeInputStream;\n }\n SourceFile: \"TapeInputStream.java\"\n InnerClasses:\n-  static #64;                             // class org/apache/commons/compress/archivers/dump/TapeInputStream$1\n-  public static final #218= #176 of #1;   // COMPRESSION_TYPE=class org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE of class org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n+  static #130;                            // class org/apache/commons/compress/archivers/dump/TapeInputStream$1\n+  public static final #229= #136 of #1;   // COMPRESSION_TYPE=class org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE of class org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n"}]}
