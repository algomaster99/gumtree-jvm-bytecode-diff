{"diffoscope-json-version": 1, "source1": "first/MethodParamPadCheck.class", "source2": "second/MethodParamPadCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,42 +29,42 @@\n         return new int[] { 8, 136, 27, 9, 42, 155, 199 };\n     }\n     \n     public int[] getRequiredTokens() {\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        DetailAST parenAST;\n-        if (ast.getType() == 27) {\n-            parenAST = ast;\n+    public void visitToken(final DetailAST detailAST) {\n+        DetailAST firstToken;\n+        if (detailAST.getType() == 27) {\n+            firstToken = detailAST;\n         }\n         else {\n-            parenAST = ast.findFirstToken(76);\n+            firstToken = detailAST.findFirstToken(76);\n         }\n-        if (parenAST != null) {\n-            final int[] line = this.getLineCodePoints(parenAST.getLineNo() - 1);\n-            if (CodePointUtil.hasWhitespaceBefore(parenAST.getColumnNo(), line)) {\n+        if (firstToken != null) {\n+            final int[] lineCodePoints = this.getLineCodePoints(firstToken.getLineNo() - 1);\n+            if (CodePointUtil.hasWhitespaceBefore(firstToken.getColumnNo(), lineCodePoints)) {\n                 if (!this.allowLineBreaks) {\n-                    this.log(parenAST, \"line.previous\", new Object[] { parenAST.getText() });\n+                    this.log(firstToken, \"line.previous\", new Object[] { firstToken.getText() });\n                 }\n             }\n             else {\n-                final int before = parenAST.getColumnNo() - 1;\n-                if (this.option == PadOption.NOSPACE && CommonUtil.isCodePointWhitespace(line, before)) {\n-                    this.log(parenAST, \"ws.preceded\", new Object[] { parenAST.getText() });\n+                final int n = firstToken.getColumnNo() - 1;\n+                if (this.option == PadOption.NOSPACE && CommonUtil.isCodePointWhitespace(lineCodePoints, n)) {\n+                    this.log(firstToken, \"ws.preceded\", new Object[] { firstToken.getText() });\n                 }\n-                else if (this.option == PadOption.SPACE && !CommonUtil.isCodePointWhitespace(line, before)) {\n-                    this.log(parenAST, \"ws.notPreceded\", new Object[] { parenAST.getText() });\n+                else if (this.option == PadOption.SPACE && !CommonUtil.isCodePointWhitespace(lineCodePoints, n)) {\n+                    this.log(firstToken, \"ws.notPreceded\", new Object[] { firstToken.getText() });\n                 }\n             }\n         }\n     }\n     \n     public void setAllowLineBreaks(final boolean allowLineBreaks) {\n         this.allowLineBreaks = allowLineBreaks;\n     }\n     \n-    public void setOption(final String optionStr) {\n-        this.option = PadOption.valueOf(optionStr.trim().toUpperCase(Locale.ENGLISH));\n+    public void setOption(final String s) {\n+        this.option = PadOption.valueOf(s.trim().toUpperCase(Locale.ENGLISH));\n     }\n }\n"}]}
