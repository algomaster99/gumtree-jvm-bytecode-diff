{"diffoscope-json-version": 1, "source1": "first/ConstantLookup.class", "source2": "second/ConstantLookup.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,38 +1,42 @@\n \n package org.apache.commons.configuration2.interpol;\n \n-import java.util.concurrent.ConcurrentHashMap;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.logging.LogFactory;\n+import java.util.concurrent.ConcurrentHashMap;\n import org.apache.commons.logging.Log;\n import java.util.Map;\n \n public class ConstantLookup implements Lookup\n {\n     private static final char FIELD_SEPRATOR = '.';\n     private static final Map<String, Object> CACHE;\n     private final Log log;\n     \n+    static {\n+        CACHE = new ConcurrentHashMap<String, Object>();\n+    }\n+    \n     public ConstantLookup() {\n         this.log = LogFactory.getLog((Class)this.getClass());\n     }\n     \n     public Object lookup(final String var) {\n         if (var == null) {\n             return null;\n         }\n         return ConstantLookup.CACHE.computeIfAbsent(var, k -> {\n-            final int fieldPos = var.lastIndexOf(46);\n+            final int fieldPos = str.lastIndexOf(46);\n             if (fieldPos >= 0) {\n                 try {\n-                    return this.resolveField(var.substring(0, fieldPos), var.substring(fieldPos + 1));\n+                    return this.resolveField(str.substring(0, fieldPos), str.substring(fieldPos + 1));\n                 }\n                 catch (final Exception ex) {\n-                    this.log.warn((Object)(\"Could not obtain value for variable \" + var), (Throwable)ex);\n+                    this.log.warn((Object)(\"Could not obtain value for variable \" + str), (Throwable)ex);\n                 }\n             }\n             return null;\n         });\n     }\n     \n     public static void clear() {\n@@ -42,12 +46,8 @@\n     protected Object resolveField(final String className, final String fieldName) throws Exception {\n         return this.fetchClass(className).getField(fieldName).get(null);\n     }\n     \n     protected Class<?> fetchClass(final String className) throws ClassNotFoundException {\n         return ClassUtils.getClass(className);\n     }\n-    \n-    static {\n-        CACHE = new ConcurrentHashMap<String, Object>();\n-    }\n }\n"}]}
