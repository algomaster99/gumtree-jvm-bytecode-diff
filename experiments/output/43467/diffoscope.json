{"diffoscope-json-version": 1, "source1": "first/PropertyListParserTokenManager.class", "source2": "second/PropertyListParserTokenManager.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -27,14 +27,26 @@\n     int curLexState;\n     int defaultLexState;\n     int jjnewStateCnt;\n     int jjround;\n     int jjmatchedPos;\n     int jjmatchedKind;\n     \n+    static {\n+        jjbitVec0 = new long[] { 0L, 0L, -1L, -1L };\n+        jjnextStates = new int[] { 10, 12, 13 };\n+        jjstrLiteralImages = new String[] { \"\", null, null, null, null, null, null, null, null, null, null, \"(\", \")\", \",\", \"{\", \"}\", \";\", \"=\", \"<\", \">\", \"<*D\", \"\\\"\", null, null, null, null, null, null, null, \"\\\\\\\"\" };\n+        lexStateNames = new String[] { \"DEFAULT\", \"IN_COMMENT\", \"IN_SINGLE_LINE_COMMENT\" };\n+        jjnewLexState = new int[] { -1, -1, -1, -1, -1, 1, -1, 0, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };\n+        jjtoToken = new long[] { 1044379649L };\n+        jjtoSkip = new long[] { 670L };\n+        jjtoSpecial = new long[] { 512L };\n+        jjtoMore = new long[] { 1376L };\n+    }\n+    \n     public void setDebugStream(final PrintStream ds) {\n         this.debugStream = ds;\n     }\n     \n     private final int jjStopStringLiteralDfa_0(final int pos, final long active0) {\n         switch (pos) {\n             case 0: {\n@@ -124,15 +136,15 @@\n         }\n     }\n     \n     private int jjMoveStringLiteralDfa1_0(final long active0) {\n         try {\n             this.curChar = this.input_stream.readChar();\n         }\n-        catch (final IOException e) {\n+        catch (final IOException ex) {\n             this.jjStopStringLiteralDfa_0(0, active0);\n             return 1;\n         }\n         switch (this.curChar) {\n             case '\\\"': {\n                 if ((active0 & 0x20000000L) != 0x0L) {\n                     return this.jjStopAtPos(1, 29);\n@@ -158,15 +170,15 @@\n     private int jjMoveStringLiteralDfa2_0(final long old0, long active0) {\n         if ((active0 &= old0) == 0x0L) {\n             return this.jjStartNfa_0(0, old0);\n         }\n         try {\n             this.curChar = this.input_stream.readChar();\n         }\n-        catch (final IOException e) {\n+        catch (final IOException ex) {\n             this.jjStopStringLiteralDfa_0(1, active0);\n             return 2;\n         }\n         switch (this.curChar) {\n             case 'D': {\n                 if ((active0 & 0x100000L) != 0x0L) {\n                     return this.jjStartNfaWithStates_0(2, 20, 15);\n@@ -179,15 +191,15 @@\n     \n     private int jjStartNfaWithStates_0(final int pos, final int kind, final int state) {\n         this.jjmatchedKind = kind;\n         this.jjmatchedPos = pos;\n         try {\n             this.curChar = this.input_stream.readChar();\n         }\n-        catch (final IOException e) {\n+        catch (final IOException ex) {\n             return pos + 1;\n         }\n         return this.jjMoveNfa_0(state, pos + 1);\n     }\n     \n     private int jjMoveNfa_0(final int startState, int curPos) {\n         int startsAt = 0;\n@@ -510,15 +522,15 @@\n             this.jjnewStateCnt = jjnewStateCnt;\n             if (n == (startsAt = n2 - jjnewStateCnt)) {\n                 break;\n             }\n             try {\n                 this.curChar = this.input_stream.readChar();\n             }\n-            catch (final IOException e) {\n+            catch (final IOException ex) {\n                 return curPos;\n             }\n         }\n         return curPos;\n     }\n     \n     private int jjMoveStringLiteralDfa0_2() {\n@@ -566,22 +578,19 @@\n                         default: {\n                             continue;\n                         }\n                     }\n                 } while (i != startsAt);\n             }\n             else if (this.curChar < '\\u0080') {\n-                final long l = 1L << (this.curChar & '?');\n                 do {\n                     final int n = this.jjstateSet[--i];\n                 } while (i != startsAt);\n             }\n             else {\n-                final int i2 = (this.curChar & '\\u00ff') >> 6;\n-                final long l2 = 1L << (this.curChar & '?');\n                 do {\n                     final int n2 = this.jjstateSet[--i];\n                 } while (i != startsAt);\n             }\n             if (kind != Integer.MAX_VALUE) {\n                 this.jjmatchedKind = kind;\n                 this.jjmatchedPos = curPos;\n@@ -594,15 +603,15 @@\n             this.jjnewStateCnt = jjnewStateCnt;\n             if (n3 == (startsAt = n4 - jjnewStateCnt)) {\n                 break;\n             }\n             try {\n                 this.curChar = this.input_stream.readChar();\n             }\n-            catch (final IOException e) {\n+            catch (final IOException ex) {\n                 return curPos;\n             }\n         }\n         return curPos;\n     }\n     \n     private int jjMoveStringLiteralDfa0_1() {\n@@ -616,15 +625,15 @@\n         }\n     }\n     \n     private int jjMoveStringLiteralDfa1_1(final long active0) {\n         try {\n             this.curChar = this.input_stream.readChar();\n         }\n-        catch (final IOException e) {\n+        catch (final IOException ex) {\n             return 1;\n         }\n         switch (this.curChar) {\n             case '/': {\n                 if ((active0 & 0x80L) != 0x0L) {\n                     return this.jjStopAtPos(1, 7);\n                 }\n@@ -702,32 +711,35 @@\n     Label_0004_Outer:\n         while (true) {\n         Label_0004:\n             while (true) {\n                 try {\n                     this.curChar = this.input_stream.BeginToken();\n                 }\n-                catch (final IOException e) {\n+                catch (final IOException ex) {\n                     this.jjmatchedKind = 0;\n                     final Token matchedToken = this.jjFillToken();\n                     matchedToken.specialToken = specialToken;\n                     return matchedToken;\n                 }\n                 (this.image = this.jjimage).setLength();\n                 this.jjimageLen = 0;\n                 while (true) {\n                     switch (this.curLexState) {\n                         case 0: {\n                             try {\n                                 this.input_stream.backup(0);\n-                                while (this.curChar <= ' ' && (0x100002600L & 1L << this.curChar) != 0x0L) {\n+                                while (this.curChar <= ' ') {\n+                                    if ((0x100002600L & 1L << this.curChar) == 0x0L) {\n+                                        break;\n+                                    }\n                                     this.curChar = this.input_stream.BeginToken();\n                                 }\n                             }\n-                            catch (final IOException e2) {\n+                            catch (final IOException ex2) {\n                                 continue Label_0004;\n                             }\n                             this.jjmatchedKind = Integer.MAX_VALUE;\n                             this.jjmatchedPos = 0;\n                             curPos = this.jjMoveStringLiteralDfa0_0();\n                             break;\n                         }\n@@ -773,15 +785,15 @@\n                         }\n                         curPos = 0;\n                         this.jjmatchedKind = Integer.MAX_VALUE;\n                         try {\n                             this.curChar = this.input_stream.readChar();\n                             continue Label_0004_Outer;\n                         }\n-                        catch (final IOException ex) {}\n+                        catch (final IOException ex3) {}\n                         break Label_0004_Outer;\n                     }\n                     if ((PropertyListParserTokenManager.jjtoSpecial[this.jjmatchedKind >> 6] & 1L << (this.jjmatchedKind & 0x3F)) != 0x0L) {\n                         final Token matchedToken = this.jjFillToken();\n                         if (specialToken == null) {\n                             specialToken = matchedToken;\n                         }\n@@ -810,15 +822,15 @@\n         int error_column = this.input_stream.getEndColumn();\n         String error_after = null;\n         boolean EOFSeen = false;\n         try {\n             this.input_stream.readChar();\n             this.input_stream.backup(1);\n         }\n-        catch (final IOException e3) {\n+        catch (final IOException ex4) {\n             EOFSeen = true;\n             error_after = ((curPos <= 1) ? \"\" : this.input_stream.GetImage());\n             if (this.curChar == '\\n' || this.curChar == '\\r') {\n                 ++error_line;\n                 error_column = 0;\n             }\n             else {\n@@ -855,20 +867,8 @@\n     }\n     \n     private void jjCheckNAddStates(int start, final int end) {\n         do {\n             this.jjCheckNAdd(PropertyListParserTokenManager.jjnextStates[start]);\n         } while (start++ != end);\n     }\n-    \n-    static {\n-        jjbitVec0 = new long[] { 0L, 0L, -1L, -1L };\n-        jjnextStates = new int[] { 10, 12, 13 };\n-        jjstrLiteralImages = new String[] { \"\", null, null, null, null, null, null, null, null, null, null, \"(\", \")\", \",\", \"{\", \"}\", \";\", \"=\", \"<\", \">\", \"<*D\", \"\\\"\", null, null, null, null, null, null, null, \"\\\\\\\"\" };\n-        lexStateNames = new String[] { \"DEFAULT\", \"IN_COMMENT\", \"IN_SINGLE_LINE_COMMENT\" };\n-        jjnewLexState = new int[] { -1, -1, -1, -1, -1, 1, -1, 0, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };\n-        jjtoToken = new long[] { 1044379649L };\n-        jjtoSkip = new long[] { 670L };\n-        jjtoSpecial = new long[] { 512L };\n-        jjtoMore = new long[] { 1376L };\n-    }\n }\n"}]}
