{"diffoscope-json-version": 1, "source1": "first/URLCodecTest.class", "source2": "second/URLCodecTest.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,64 +13,61 @@\n {\n     static final int[] SWISS_GERMAN_STUFF_UNICODE;\n     static final int[] RUSSIAN_STUFF_UNICODE;\n     \n     private void validateState(final URLCodec urlCodec) {\n     }\n     \n-    private String constructString(final int[] unicodeChars) {\n-        final StringBuilder buffer = new StringBuilder();\n-        if (unicodeChars != null) {\n-            for (final int unicodeChar : unicodeChars) {\n-                buffer.append((char)unicodeChar);\n+    private String constructString(final int[] array) {\n+        final StringBuilder sb = new StringBuilder();\n+        if (array != null) {\n+            for (int length = array.length, i = 0; i < length; ++i) {\n+                sb.append((char)array[i]);\n             }\n         }\n-        return buffer.toString();\n+        return sb.toString();\n     }\n     \n     @Test\n     public void testUTF8RoundTrip() throws Exception {\n-        final String ru_msg = this.constructString(URLCodecTest.RUSSIAN_STUFF_UNICODE);\n-        final String ch_msg = this.constructString(URLCodecTest.SWISS_GERMAN_STUFF_UNICODE);\n+        final String constructString = this.constructString(URLCodecTest.RUSSIAN_STUFF_UNICODE);\n+        final String constructString2 = this.constructString(URLCodecTest.SWISS_GERMAN_STUFF_UNICODE);\n         final URLCodec urlCodec = new URLCodec();\n         this.validateState(urlCodec);\n-        Assert.assertEquals((Object)\"%D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\", (Object)urlCodec.encode(ru_msg, \"UTF-8\"));\n-        Assert.assertEquals((Object)\"Gr%C3%BCezi_z%C3%A4m%C3%A4\", (Object)urlCodec.encode(ch_msg, \"UTF-8\"));\n-        Assert.assertEquals((Object)ru_msg, (Object)urlCodec.decode(urlCodec.encode(ru_msg, \"UTF-8\"), \"UTF-8\"));\n-        Assert.assertEquals((Object)ch_msg, (Object)urlCodec.decode(urlCodec.encode(ch_msg, \"UTF-8\"), \"UTF-8\"));\n+        Assert.assertEquals((Object)\"%D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\", (Object)urlCodec.encode(constructString, \"UTF-8\"));\n+        Assert.assertEquals((Object)\"Gr%C3%BCezi_z%C3%A4m%C3%A4\", (Object)urlCodec.encode(constructString2, \"UTF-8\"));\n+        Assert.assertEquals((Object)constructString, (Object)urlCodec.decode(urlCodec.encode(constructString, \"UTF-8\"), \"UTF-8\"));\n+        Assert.assertEquals((Object)constructString2, (Object)urlCodec.decode(urlCodec.encode(constructString2, \"UTF-8\"), \"UTF-8\"));\n         this.validateState(urlCodec);\n     }\n     \n     @Test\n     public void testBasicEncodeDecode() throws Exception {\n         final URLCodec urlCodec = new URLCodec();\n-        final String plain = \"Hello there!\";\n-        final String encoded = urlCodec.encode(\"Hello there!\");\n-        Assert.assertEquals(\"Basic URL encoding test\", (Object)\"Hello+there%21\", (Object)encoded);\n-        Assert.assertEquals(\"Basic URL decoding test\", (Object)\"Hello there!\", (Object)urlCodec.decode(encoded));\n+        final String encode = urlCodec.encode(\"Hello there!\");\n+        Assert.assertEquals(\"Basic URL encoding test\", (Object)\"Hello+there%21\", (Object)encode);\n+        Assert.assertEquals(\"Basic URL decoding test\", (Object)\"Hello there!\", (Object)urlCodec.decode(encode));\n         this.validateState(urlCodec);\n     }\n     \n     @Test\n     public void testSafeCharEncodeDecode() throws Exception {\n         final URLCodec urlCodec = new URLCodec();\n-        final String plain = \"abc123_-.*\";\n-        final String encoded = urlCodec.encode(\"abc123_-.*\");\n-        Assert.assertEquals(\"Safe chars URL encoding test\", (Object)\"abc123_-.*\", (Object)encoded);\n-        Assert.assertEquals(\"Safe chars URL decoding test\", (Object)\"abc123_-.*\", (Object)urlCodec.decode(encoded));\n+        final String encode = urlCodec.encode(\"abc123_-.*\");\n+        Assert.assertEquals(\"Safe chars URL encoding test\", (Object)\"abc123_-.*\", (Object)encode);\n+        Assert.assertEquals(\"Safe chars URL decoding test\", (Object)\"abc123_-.*\", (Object)urlCodec.decode(encode));\n         this.validateState(urlCodec);\n     }\n     \n     @Test\n     public void testUnsafeEncodeDecode() throws Exception {\n         final URLCodec urlCodec = new URLCodec();\n-        final String plain = \"~!@#$%^&()+{}\\\"\\\\;:`,/[]\";\n-        final String encoded = urlCodec.encode(\"~!@#$%^&()+{}\\\"\\\\;:`,/[]\");\n-        Assert.assertEquals(\"Unsafe chars URL encoding test\", (Object)\"%7E%21%40%23%24%25%5E%26%28%29%2B%7B%7D%22%5C%3B%3A%60%2C%2F%5B%5D\", (Object)encoded);\n-        Assert.assertEquals(\"Unsafe chars URL decoding test\", (Object)\"~!@#$%^&()+{}\\\"\\\\;:`,/[]\", (Object)urlCodec.decode(encoded));\n+        final String encode = urlCodec.encode(\"~!@#$%^&()+{}\\\"\\\\;:`,/[]\");\n+        Assert.assertEquals(\"Unsafe chars URL encoding test\", (Object)\"%7E%21%40%23%24%25%5E%26%28%29%2B%7B%7D%22%5C%3B%3A%60%2C%2F%5B%5D\", (Object)encode);\n+        Assert.assertEquals(\"Unsafe chars URL decoding test\", (Object)\"~!@#$%^&()+{}\\\"\\\\;:`,/[]\", (Object)urlCodec.decode(encode));\n         this.validateState(urlCodec);\n     }\n     \n     @Test\n     public void testEncodeDecodeNull() throws Exception {\n         final URLCodec urlCodec = new URLCodec();\n         Assert.assertNull(\"Null string URL encoding test\", (Object)urlCodec.encode((String)null));\n@@ -102,92 +99,73 @@\n         }\n         catch (final DecoderException ex4) {}\n         this.validateState(urlCodec);\n     }\n     \n     @Test\n     public void testDecodeInvalidContent() throws UnsupportedEncodingException, DecoderException {\n-        final String ch_msg = this.constructString(URLCodecTest.SWISS_GERMAN_STUFF_UNICODE);\n+        final String constructString = this.constructString(URLCodecTest.SWISS_GERMAN_STUFF_UNICODE);\n         final URLCodec urlCodec = new URLCodec();\n-        final byte[] input = ch_msg.getBytes(\"ISO-8859-1\");\n-        final byte[] output = urlCodec.decode(input);\n-        Assert.assertEquals((long)input.length, (long)output.length);\n-        for (int i = 0; i < input.length; ++i) {\n-            Assert.assertEquals((long)input[i], (long)output[i]);\n+        final byte[] bytes = constructString.getBytes(\"ISO-8859-1\");\n+        final byte[] decode = urlCodec.decode(bytes);\n+        Assert.assertEquals((long)bytes.length, (long)decode.length);\n+        for (int i = 0; i < bytes.length; ++i) {\n+            Assert.assertEquals((long)bytes[i], (long)decode[i]);\n         }\n         this.validateState(urlCodec);\n     }\n     \n     @Test\n     public void testEncodeNull() throws Exception {\n         final URLCodec urlCodec = new URLCodec();\n-        final byte[] plain = null;\n-        final byte[] encoded = urlCodec.encode(plain);\n-        Assert.assertEquals(\"Encoding a null string should return null\", (Object)null, (Object)encoded);\n+        Assert.assertEquals(\"Encoding a null string should return null\", (Object)null, (Object)urlCodec.encode((byte[])null));\n         this.validateState(urlCodec);\n     }\n     \n     @Test\n     public void testEncodeUrlWithNullBitSet() throws Exception {\n         final URLCodec urlCodec = new URLCodec();\n-        final String plain = \"Hello there!\";\n-        final String encoded = new String(URLCodec.encodeUrl((BitSet)null, \"Hello there!\".getBytes(Charsets.UTF_8)));\n-        Assert.assertEquals(\"Basic URL encoding test\", (Object)\"Hello+there%21\", (Object)encoded);\n-        Assert.assertEquals(\"Basic URL decoding test\", (Object)\"Hello there!\", (Object)urlCodec.decode(encoded));\n+        final String s = new String(URLCodec.encodeUrl((BitSet)null, \"Hello there!\".getBytes(Charsets.UTF_8)));\n+        Assert.assertEquals(\"Basic URL encoding test\", (Object)\"Hello+there%21\", (Object)s);\n+        Assert.assertEquals(\"Basic URL decoding test\", (Object)\"Hello there!\", (Object)urlCodec.decode(s));\n         this.validateState(urlCodec);\n     }\n     \n     @Test\n     public void testDecodeWithNullArray() throws Exception {\n-        final byte[] plain = null;\n-        final byte[] result = URLCodec.decodeUrl(plain);\n-        Assert.assertEquals(\"Result should be null\", (Object)null, (Object)result);\n+        Assert.assertEquals(\"Result should be null\", (Object)null, (Object)URLCodec.decodeUrl((byte[])null));\n     }\n     \n     @Test\n     public void testEncodeStringWithNull() throws Exception {\n-        final URLCodec urlCodec = new URLCodec();\n-        final String test = null;\n-        final String result = urlCodec.encode(test, \"charset\");\n-        Assert.assertEquals(\"Result should be null\", (Object)null, (Object)result);\n+        Assert.assertEquals(\"Result should be null\", (Object)null, (Object)new URLCodec().encode((String)null, \"charset\"));\n     }\n     \n     @Test\n     public void testDecodeStringWithNull() throws Exception {\n-        final URLCodec urlCodec = new URLCodec();\n-        final String test = null;\n-        final String result = urlCodec.decode(test, \"charset\");\n-        Assert.assertEquals(\"Result should be null\", (Object)null, (Object)result);\n+        Assert.assertEquals(\"Result should be null\", (Object)null, (Object)new URLCodec().decode((String)null, \"charset\"));\n     }\n     \n     @Test\n     public void testEncodeObjects() throws Exception {\n         final URLCodec urlCodec = new URLCodec();\n-        final String plain = \"Hello there!\";\n-        String encoded = (String)urlCodec.encode((Object)\"Hello there!\");\n-        Assert.assertEquals(\"Basic URL encoding test\", (Object)\"Hello+there%21\", (Object)encoded);\n-        final byte[] plainBA = \"Hello there!\".getBytes(Charsets.UTF_8);\n-        final byte[] encodedBA = (byte[])urlCodec.encode((Object)plainBA);\n-        encoded = new String(encodedBA);\n-        Assert.assertEquals(\"Basic URL encoding test\", (Object)\"Hello+there%21\", (Object)encoded);\n-        final Object result = urlCodec.encode((Object)null);\n-        Assert.assertEquals(\"Encoding a null Object should return null\", (Object)null, result);\n+        Assert.assertEquals(\"Basic URL encoding test\", (Object)\"Hello+there%21\", (Object)urlCodec.encode((Object)\"Hello there!\"));\n+        Assert.assertEquals(\"Basic URL encoding test\", (Object)\"Hello+there%21\", (Object)new String((byte[])urlCodec.encode((Object)\"Hello there!\".getBytes(Charsets.UTF_8))));\n+        Assert.assertEquals(\"Encoding a null Object should return null\", (Object)null, urlCodec.encode((Object)null));\n         try {\n-            final Object dObj = new Double(3.0);\n-            urlCodec.encode(dObj);\n+            urlCodec.encode((Object)new Double(3.0));\n             Assert.fail(\"Trying to url encode a Double object should cause an exception.\");\n         }\n         catch (final EncoderException ex) {}\n         this.validateState(urlCodec);\n     }\n     \n     @Test\n     public void testInvalidEncoding() {\n         final URLCodec urlCodec = new URLCodec(\"NONSENSE\");\n-        final String plain = \"Hello there!\";\n         try {\n             urlCodec.encode(\"Hello there!\");\n             Assert.fail(\"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n         }\n         catch (final EncoderException ex) {}\n         try {\n             urlCodec.decode(\"Hello there!\");\n@@ -196,40 +174,30 @@\n         catch (final DecoderException ex2) {}\n         this.validateState(urlCodec);\n     }\n     \n     @Test\n     public void testDecodeObjects() throws Exception {\n         final URLCodec urlCodec = new URLCodec();\n-        final String plain = \"Hello+there%21\";\n-        String decoded = (String)urlCodec.decode((Object)\"Hello+there%21\");\n-        Assert.assertEquals(\"Basic URL decoding test\", (Object)\"Hello there!\", (Object)decoded);\n-        final byte[] plainBA = \"Hello+there%21\".getBytes(Charsets.UTF_8);\n-        final byte[] decodedBA = (byte[])urlCodec.decode((Object)plainBA);\n-        decoded = new String(decodedBA);\n-        Assert.assertEquals(\"Basic URL decoding test\", (Object)\"Hello there!\", (Object)decoded);\n-        final Object result = urlCodec.decode((Object)null);\n-        Assert.assertEquals(\"Decoding a null Object should return null\", (Object)null, result);\n+        Assert.assertEquals(\"Basic URL decoding test\", (Object)\"Hello there!\", (Object)urlCodec.decode((Object)\"Hello+there%21\"));\n+        Assert.assertEquals(\"Basic URL decoding test\", (Object)\"Hello there!\", (Object)new String((byte[])urlCodec.decode((Object)\"Hello+there%21\".getBytes(Charsets.UTF_8))));\n+        Assert.assertEquals(\"Decoding a null Object should return null\", (Object)null, urlCodec.decode((Object)null));\n         try {\n-            final Object dObj = new Double(3.0);\n-            urlCodec.decode(dObj);\n+            urlCodec.decode((Object)new Double(3.0));\n             Assert.fail(\"Trying to url encode a Double object should cause an exception.\");\n         }\n         catch (final DecoderException ex) {}\n         this.validateState(urlCodec);\n     }\n     \n     @Test\n     public void testDefaultEncoding() throws Exception {\n-        final String plain = \"Hello there!\";\n         final URLCodec urlCodec = new URLCodec(\"UnicodeBig\");\n         urlCodec.encode(\"Hello there!\");\n-        final String encoded1 = urlCodec.encode(\"Hello there!\", \"UnicodeBig\");\n-        final String encoded2 = urlCodec.encode(\"Hello there!\");\n-        Assert.assertEquals((Object)encoded1, (Object)encoded2);\n+        Assert.assertEquals((Object)urlCodec.encode(\"Hello there!\", \"UnicodeBig\"), (Object)urlCodec.encode(\"Hello there!\"));\n         this.validateState(urlCodec);\n     }\n     \n     static {\n         SWISS_GERMAN_STUFF_UNICODE = new int[] { 71, 114, 252, 101, 122, 105, 95, 122, 228, 109, 228 };\n         RUSSIAN_STUFF_UNICODE = new int[] { 1042, 1089, 1077, 1084, 95, 1087, 1088, 1080, 1074, 1077, 1090 };\n     }\n"}]}
