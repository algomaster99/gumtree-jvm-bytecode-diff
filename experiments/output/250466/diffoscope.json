{"diffoscope-json-version": 1, "source1": "first/BlockCommentPosition.class", "source2": "second/BlockCommentPosition.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,110 +4,110 @@\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n \n public final class BlockCommentPosition\n {\n     private BlockCommentPosition() {\n     }\n     \n-    public static boolean isOnType(final DetailAST blockComment) {\n-        return isOnClass(blockComment) || isOnInterface(blockComment) || isOnEnum(blockComment) || isOnAnnotationDef(blockComment) || isOnRecord(blockComment);\n+    public static boolean isOnType(final DetailAST detailAST) {\n+        return isOnClass(detailAST) || isOnInterface(detailAST) || isOnEnum(detailAST) || isOnAnnotationDef(detailAST) || isOnRecord(detailAST);\n     }\n     \n-    public static boolean isOnClass(final DetailAST blockComment) {\n-        return isOnPlainToken(blockComment, 14, 69) || isOnTokenWithModifiers(blockComment, 14) || isOnTokenWithAnnotation(blockComment, 14);\n+    public static boolean isOnClass(final DetailAST detailAST) {\n+        return isOnPlainToken(detailAST, 14, 69) || isOnTokenWithModifiers(detailAST, 14) || isOnTokenWithAnnotation(detailAST, 14);\n     }\n     \n-    public static boolean isOnRecord(final DetailAST blockComment) {\n-        return isOnPlainToken(blockComment, 199, 200) || isOnTokenWithModifiers(blockComment, 199) || isOnTokenWithAnnotation(blockComment, 199);\n+    public static boolean isOnRecord(final DetailAST detailAST) {\n+        return isOnPlainToken(detailAST, 199, 200) || isOnTokenWithModifiers(detailAST, 199) || isOnTokenWithAnnotation(detailAST, 199);\n     }\n     \n-    public static boolean isOnPackage(final DetailAST blockComment) {\n-        boolean result = isOnTokenWithAnnotation(blockComment, 16);\n-        if (!result) {\n-            DetailAST nextSibling;\n-            for (nextSibling = blockComment.getNextSibling(); nextSibling != null && nextSibling.getType() == 144; nextSibling = nextSibling.getNextSibling()) {}\n-            result = (nextSibling != null && nextSibling.getType() == 16);\n+    public static boolean isOnPackage(final DetailAST detailAST) {\n+        boolean onTokenWithAnnotation = isOnTokenWithAnnotation(detailAST, 16);\n+        if (!onTokenWithAnnotation) {\n+            DetailAST detailAST2;\n+            for (detailAST2 = detailAST.getNextSibling(); detailAST2 != null && detailAST2.getType() == 144; detailAST2 = detailAST2.getNextSibling()) {}\n+            onTokenWithAnnotation = (detailAST2 != null && detailAST2.getType() == 16);\n         }\n-        return result;\n+        return onTokenWithAnnotation;\n     }\n     \n-    public static boolean isOnInterface(final DetailAST blockComment) {\n-        return isOnPlainToken(blockComment, 15, 71) || isOnTokenWithModifiers(blockComment, 15) || isOnTokenWithAnnotation(blockComment, 15);\n+    public static boolean isOnInterface(final DetailAST detailAST) {\n+        return isOnPlainToken(detailAST, 15, 71) || isOnTokenWithModifiers(detailAST, 15) || isOnTokenWithAnnotation(detailAST, 15);\n     }\n     \n-    public static boolean isOnEnum(final DetailAST blockComment) {\n-        return isOnPlainToken(blockComment, 154, 153) || isOnTokenWithModifiers(blockComment, 154) || isOnTokenWithAnnotation(blockComment, 154);\n+    public static boolean isOnEnum(final DetailAST detailAST) {\n+        return isOnPlainToken(detailAST, 154, 153) || isOnTokenWithModifiers(detailAST, 154) || isOnTokenWithAnnotation(detailAST, 154);\n     }\n     \n-    public static boolean isOnAnnotationDef(final DetailAST blockComment) {\n-        return isOnPlainToken(blockComment, 157, 170) || isOnTokenWithModifiers(blockComment, 157) || isOnTokenWithAnnotation(blockComment, 157);\n+    public static boolean isOnAnnotationDef(final DetailAST detailAST) {\n+        return isOnPlainToken(detailAST, 157, 170) || isOnTokenWithModifiers(detailAST, 157) || isOnTokenWithAnnotation(detailAST, 157);\n     }\n     \n-    public static boolean isOnMember(final DetailAST blockComment) {\n-        return isOnMethod(blockComment) || isOnField(blockComment) || isOnConstructor(blockComment) || isOnEnumConstant(blockComment) || isOnAnnotationField(blockComment) || isOnCompactConstructor(blockComment);\n+    public static boolean isOnMember(final DetailAST detailAST) {\n+        return isOnMethod(detailAST) || isOnField(detailAST) || isOnConstructor(detailAST) || isOnEnumConstant(detailAST) || isOnAnnotationField(detailAST) || isOnCompactConstructor(detailAST);\n     }\n     \n-    public static boolean isOnMethod(final DetailAST blockComment) {\n-        return isOnPlainClassMember(blockComment, 9) || isOnTokenWithModifiers(blockComment, 9) || isOnTokenWithAnnotation(blockComment, 9);\n+    public static boolean isOnMethod(final DetailAST detailAST) {\n+        return isOnPlainClassMember(detailAST, 9) || isOnTokenWithModifiers(detailAST, 9) || isOnTokenWithAnnotation(detailAST, 9);\n     }\n     \n-    public static boolean isOnField(final DetailAST blockComment) {\n-        return isOnPlainClassMember(blockComment, 10) || (isOnTokenWithModifiers(blockComment, 10) && blockComment.getParent().getParent().getParent().getType() == 6) || (isOnTokenWithAnnotation(blockComment, 10) && blockComment.getParent().getParent().getParent().getParent().getType() == 6);\n+    public static boolean isOnField(final DetailAST detailAST) {\n+        return isOnPlainClassMember(detailAST, 10) || (isOnTokenWithModifiers(detailAST, 10) && detailAST.getParent().getParent().getParent().getType() == 6) || (isOnTokenWithAnnotation(detailAST, 10) && detailAST.getParent().getParent().getParent().getParent().getType() == 6);\n     }\n     \n-    public static boolean isOnConstructor(final DetailAST blockComment) {\n-        return isOnPlainToken(blockComment, 8, 58) || isOnTokenWithModifiers(blockComment, 8) || isOnTokenWithAnnotation(blockComment, 8) || isOnPlainClassMember(blockComment, 8);\n+    public static boolean isOnConstructor(final DetailAST detailAST) {\n+        return isOnPlainToken(detailAST, 8, 58) || isOnTokenWithModifiers(detailAST, 8) || isOnTokenWithAnnotation(detailAST, 8) || isOnPlainClassMember(detailAST, 8);\n     }\n     \n-    public static boolean isOnCompactConstructor(final DetailAST blockComment) {\n-        return isOnTokenWithModifiers(blockComment, 203) || isOnTokenWithAnnotation(blockComment, 203);\n+    public static boolean isOnCompactConstructor(final DetailAST detailAST) {\n+        return isOnTokenWithModifiers(detailAST, 203) || isOnTokenWithAnnotation(detailAST, 203);\n     }\n     \n-    public static boolean isOnEnumConstant(final DetailAST blockComment) {\n-        final DetailAST parent = blockComment.getParent();\n-        boolean result = false;\n+    public static boolean isOnEnumConstant(final DetailAST detailAST) {\n+        final DetailAST parent = detailAST.getParent();\n+        boolean b = false;\n         if (parent.getType() == 155) {\n-            final DetailAST prevSibling = getPrevSiblingSkipComments(blockComment);\n-            if (prevSibling.getType() == 158 && !prevSibling.hasChildren()) {\n-                result = true;\n+            final DetailAST prevSiblingSkipComments = getPrevSiblingSkipComments(detailAST);\n+            if (prevSiblingSkipComments.getType() == 158 && !prevSiblingSkipComments.hasChildren()) {\n+                b = true;\n             }\n         }\n         else if (parent.getType() == 159 && parent.getParent().getParent().getType() == 155) {\n-            result = true;\n+            b = true;\n         }\n-        return result;\n+        return b;\n     }\n     \n-    public static boolean isOnAnnotationField(final DetailAST blockComment) {\n-        return isOnPlainClassMember(blockComment, 161) || isOnTokenWithModifiers(blockComment, 161) || isOnTokenWithAnnotation(blockComment, 161);\n+    public static boolean isOnAnnotationField(final DetailAST detailAST) {\n+        return isOnPlainClassMember(detailAST, 161) || isOnTokenWithModifiers(detailAST, 161) || isOnTokenWithAnnotation(detailAST, 161);\n     }\n     \n-    private static boolean isOnPlainToken(final DetailAST blockComment, final int parentTokenType, final int nextTokenType) {\n-        return blockComment.getParent().getType() == parentTokenType && !getPrevSiblingSkipComments(blockComment).hasChildren() && getNextSiblingSkipComments(blockComment).getType() == nextTokenType;\n+    private static boolean isOnPlainToken(final DetailAST detailAST, final int n, final int n2) {\n+        return detailAST.getParent().getType() == n && !getPrevSiblingSkipComments(detailAST).hasChildren() && getNextSiblingSkipComments(detailAST).getType() == n2;\n     }\n     \n-    private static boolean isOnTokenWithModifiers(final DetailAST blockComment, final int tokenType) {\n-        return blockComment.getParent().getType() == 5 && blockComment.getParent().getParent().getType() == tokenType && getPrevSiblingSkipComments(blockComment) == null;\n+    private static boolean isOnTokenWithModifiers(final DetailAST detailAST, final int n) {\n+        return detailAST.getParent().getType() == 5 && detailAST.getParent().getParent().getType() == n && getPrevSiblingSkipComments(detailAST) == null;\n     }\n     \n-    private static boolean isOnTokenWithAnnotation(final DetailAST blockComment, final int tokenType) {\n-        return blockComment.getParent().getType() == 159 && getPrevSiblingSkipComments(blockComment.getParent()) == null && blockComment.getParent().getParent().getParent().getType() == tokenType && getPrevSiblingSkipComments(blockComment) == null;\n+    private static boolean isOnTokenWithAnnotation(final DetailAST detailAST, final int n) {\n+        return detailAST.getParent().getType() == 159 && getPrevSiblingSkipComments(detailAST.getParent()) == null && detailAST.getParent().getParent().getParent().getType() == n && getPrevSiblingSkipComments(detailAST) == null;\n     }\n     \n-    private static boolean isOnPlainClassMember(final DetailAST blockComment, final int memberType) {\n-        DetailAST parent;\n-        for (parent = blockComment.getParent(); parent.getType() == 59; parent = parent.getParent()) {}\n-        return (parent.getType() == 13 || parent.getType() == 165) && parent.getParent().getType() == memberType && !parent.getPreviousSibling().hasChildren() && parent.getParent().getParent().getType() == 6;\n+    private static boolean isOnPlainClassMember(final DetailAST detailAST, final int n) {\n+        DetailAST detailAST2;\n+        for (detailAST2 = detailAST.getParent(); detailAST2.getType() == 59; detailAST2 = detailAST2.getParent()) {}\n+        return (detailAST2.getType() == 13 || detailAST2.getType() == 165) && detailAST2.getParent().getType() == n && !detailAST2.getPreviousSibling().hasChildren() && detailAST2.getParent().getParent().getType() == 6;\n     }\n     \n-    private static DetailAST getNextSiblingSkipComments(final DetailAST node) {\n-        DetailAST result;\n-        for (result = node; result.getType() == 144 || result.getType() == 145; result = result.getNextSibling()) {}\n-        return result;\n+    private static DetailAST getNextSiblingSkipComments(final DetailAST detailAST) {\n+        DetailAST nextSibling;\n+        for (nextSibling = detailAST; nextSibling.getType() == 144 || nextSibling.getType() == 145; nextSibling = nextSibling.getNextSibling()) {}\n+        return nextSibling;\n     }\n     \n-    private static DetailAST getPrevSiblingSkipComments(final DetailAST node) {\n-        DetailAST result;\n-        for (result = node.getPreviousSibling(); result != null && (result.getType() == 144 || result.getType() == 145); result = result.getPreviousSibling()) {}\n-        return result;\n+    private static DetailAST getPrevSiblingSkipComments(final DetailAST detailAST) {\n+        DetailAST detailAST2;\n+        for (detailAST2 = detailAST.getPreviousSibling(); detailAST2 != null && (detailAST2.getType() == 144 || detailAST2.getType() == 145); detailAST2 = detailAST2.getPreviousSibling()) {}\n+        return detailAST2;\n     }\n }\n"}]}
