{"diffoscope-json-version": 1, "source1": "first/FramedLZ4CompressorOutputStream.class", "source2": "second/FramedLZ4CompressorOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,37 +17,41 @@\n     private boolean finished;\n     private int currentIndex;\n     private final XXHash32 contentHash;\n     private final XXHash32 blockHash;\n     private final byte[] blockDependencyBuffer;\n     private int collectedBlockDependencyBytes;\n     \n+    static {\n+        END_MARK = new byte[4];\n+    }\n+    \n     public FramedLZ4CompressorOutputStream(final OutputStream out) throws IOException {\n         this(out, FramedLZ4CompressorOutputStream.Parameters.DEFAULT);\n     }\n     \n     public FramedLZ4CompressorOutputStream(final OutputStream out, final FramedLZ4CompressorOutputStream.Parameters params) throws IOException {\n         this.oneByte = new byte[1];\n         this.contentHash = new XXHash32();\n         this.params = params;\n-        this.blockData = new byte[FramedLZ4CompressorOutputStream.Parameters.access$000(params).getSize()];\n+        this.blockData = new byte[FramedLZ4CompressorOutputStream.Parameters.access$0(params).getSize()];\n         this.out = out;\n-        this.blockHash = (FramedLZ4CompressorOutputStream.Parameters.access$100(params) ? new XXHash32() : null);\n+        this.blockHash = (FramedLZ4CompressorOutputStream.Parameters.access$1(params) ? new XXHash32() : null);\n         out.write(FramedLZ4CompressorInputStream.LZ4_SIGNATURE);\n         this.writeFrameDescriptor();\n-        this.blockDependencyBuffer = (byte[])(FramedLZ4CompressorOutputStream.Parameters.access$200(params) ? new byte[65536] : null);\n+        this.blockDependencyBuffer = (byte[])(FramedLZ4CompressorOutputStream.Parameters.access$2(params) ? new byte[65536] : null);\n     }\n     \n     public void write(final int b) throws IOException {\n         this.oneByte[0] = (byte)(b & 0xFF);\n         this.write(this.oneByte);\n     }\n     \n     public void write(final byte[] data, int off, int len) throws IOException {\n-        if (FramedLZ4CompressorOutputStream.Parameters.access$300(this.params)) {\n+        if (FramedLZ4CompressorOutputStream.Parameters.access$3(this.params)) {\n             this.contentHash.update(data, off, len);\n         }\n         final int blockDataLength = this.blockData.length;\n         if (this.currentIndex + len > blockDataLength) {\n             this.flushBlock();\n             while (len > blockDataLength) {\n                 System.arraycopy(data, off, this.blockData, 0, blockDataLength);\n@@ -64,102 +68,105 @@\n     public void close() throws IOException {\n         try {\n             this.finish();\n         }\n         finally {\n             this.out.close();\n         }\n+        this.out.close();\n     }\n     \n     public void finish() throws IOException {\n         if (!this.finished) {\n             if (this.currentIndex > 0) {\n                 this.flushBlock();\n             }\n             this.writeTrailer();\n             this.finished = true;\n         }\n     }\n     \n     private void writeFrameDescriptor() throws IOException {\n         int flags = 64;\n-        if (!FramedLZ4CompressorOutputStream.Parameters.access$200(this.params)) {\n+        if (!FramedLZ4CompressorOutputStream.Parameters.access$2(this.params)) {\n             flags |= 0x20;\n         }\n-        if (FramedLZ4CompressorOutputStream.Parameters.access$300(this.params)) {\n+        if (FramedLZ4CompressorOutputStream.Parameters.access$3(this.params)) {\n             flags |= 0x4;\n         }\n-        if (FramedLZ4CompressorOutputStream.Parameters.access$100(this.params)) {\n+        if (FramedLZ4CompressorOutputStream.Parameters.access$1(this.params)) {\n             flags |= 0x10;\n         }\n         this.out.write(flags);\n         this.contentHash.update(flags);\n-        final int bd = FramedLZ4CompressorOutputStream.Parameters.access$000(this.params).getIndex() << 4 & 0x70;\n+        final int bd = FramedLZ4CompressorOutputStream.Parameters.access$0(this.params).getIndex() << 4 & 0x70;\n         this.out.write(bd);\n         this.contentHash.update(bd);\n         this.out.write((int)(this.contentHash.getValue() >> 8 & 0xFFL));\n         this.contentHash.reset();\n     }\n     \n     private void flushBlock() throws IOException {\n-        final boolean withBlockDependency = FramedLZ4CompressorOutputStream.Parameters.access$200(this.params);\n+        final boolean withBlockDependency = FramedLZ4CompressorOutputStream.Parameters.access$2(this.params);\n         final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        final BlockLZ4CompressorOutputStream o = new BlockLZ4CompressorOutputStream((OutputStream)baos, FramedLZ4CompressorOutputStream.Parameters.access$400(this.params));\n         Throwable t = null;\n         try {\n-            if (withBlockDependency) {\n-                o.prefill(this.blockDependencyBuffer, this.blockDependencyBuffer.length - this.collectedBlockDependencyBytes, this.collectedBlockDependencyBytes);\n+            final BlockLZ4CompressorOutputStream o = new BlockLZ4CompressorOutputStream((OutputStream)baos, FramedLZ4CompressorOutputStream.Parameters.access$4(this.params));\n+            try {\n+                if (withBlockDependency) {\n+                    o.prefill(this.blockDependencyBuffer, this.blockDependencyBuffer.length - this.collectedBlockDependencyBytes, this.collectedBlockDependencyBytes);\n+                }\n+                o.write(this.blockData, 0, this.currentIndex);\n             }\n-            o.write(this.blockData, 0, this.currentIndex);\n-        }\n-        catch (final Throwable t2) {\n-            t = t2;\n-            throw t2;\n-        }\n-        finally {\n-            if (t != null) {\n-                try {\n+            finally {\n+                if (o != null) {\n                     o.close();\n                 }\n-                catch (final Throwable exception) {\n-                    t.addSuppressed(exception);\n-                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n             }\n             else {\n-                o.close();\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n         if (withBlockDependency) {\n             this.appendToBlockDependencyBuffer(this.blockData, 0, this.currentIndex);\n         }\n         final byte[] b = baos.toByteArray();\n         if (b.length > this.currentIndex) {\n             ByteUtils.toLittleEndian(this.out, (long)(this.currentIndex | Integer.MIN_VALUE), 4);\n             this.out.write(this.blockData, 0, this.currentIndex);\n-            if (FramedLZ4CompressorOutputStream.Parameters.access$100(this.params)) {\n+            if (FramedLZ4CompressorOutputStream.Parameters.access$1(this.params)) {\n                 this.blockHash.update(this.blockData, 0, this.currentIndex);\n             }\n         }\n         else {\n             ByteUtils.toLittleEndian(this.out, (long)b.length, 4);\n             this.out.write(b);\n-            if (FramedLZ4CompressorOutputStream.Parameters.access$100(this.params)) {\n+            if (FramedLZ4CompressorOutputStream.Parameters.access$1(this.params)) {\n                 this.blockHash.update(b, 0, b.length);\n             }\n         }\n-        if (FramedLZ4CompressorOutputStream.Parameters.access$100(this.params)) {\n+        if (FramedLZ4CompressorOutputStream.Parameters.access$1(this.params)) {\n             ByteUtils.toLittleEndian(this.out, this.blockHash.getValue(), 4);\n             this.blockHash.reset();\n         }\n         this.currentIndex = 0;\n     }\n     \n     private void writeTrailer() throws IOException {\n         this.out.write(FramedLZ4CompressorOutputStream.END_MARK);\n-        if (FramedLZ4CompressorOutputStream.Parameters.access$300(this.params)) {\n+        if (FramedLZ4CompressorOutputStream.Parameters.access$3(this.params)) {\n             ByteUtils.toLittleEndian(this.out, this.contentHash.getValue(), 4);\n         }\n     }\n     \n     private void appendToBlockDependencyBuffer(final byte[] b, final int off, int len) {\n         len = Math.min(len, this.blockDependencyBuffer.length);\n         if (len > 0) {\n@@ -167,12 +174,8 @@\n             if (keep > 0) {\n                 System.arraycopy(this.blockDependencyBuffer, len, this.blockDependencyBuffer, 0, keep);\n             }\n             System.arraycopy(b, off, this.blockDependencyBuffer, keep, len);\n             this.collectedBlockDependencyBytes = Math.min(this.collectedBlockDependencyBytes + len, this.blockDependencyBuffer.length);\n         }\n     }\n-    \n-    static {\n-        END_MARK = new byte[4];\n-    }\n }\n"}]}
