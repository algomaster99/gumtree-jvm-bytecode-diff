{"diffoscope-json-version": 1, "source1": "first/DurationFormatUtils.class", "source2": "second/DurationFormatUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,324 +16,317 @@\n     static final Object M;\n     static final Object d;\n     static final Object H;\n     static final Object m;\n     static final Object s;\n     static final Object S;\n     \n-    public static String formatDurationHMS(final long durationMillis) {\n-        return formatDuration(durationMillis, \"HH:mm:ss.SSS\");\n+    public static String formatDurationHMS(final long n) {\n+        return formatDuration(n, \"HH:mm:ss.SSS\");\n     }\n     \n-    public static String formatDurationISO(final long durationMillis) {\n-        return formatDuration(durationMillis, \"'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'\", false);\n+    public static String formatDurationISO(final long n) {\n+        return formatDuration(n, \"'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'\", false);\n     }\n     \n-    public static String formatDuration(final long durationMillis, final String format) {\n-        return formatDuration(durationMillis, format, true);\n-    }\n-    \n-    public static String formatDuration(final long durationMillis, final String format, final boolean padWithZeros) {\n-        Validate.inclusiveBetween(0L, Long.MAX_VALUE, durationMillis, \"durationMillis must not be negative\");\n-        final DurationFormatUtils.Token[] tokens = lexx(format);\n-        long days = 0L;\n-        long hours = 0L;\n-        long minutes = 0L;\n-        long seconds = 0L;\n-        long milliseconds = durationMillis;\n-        if (DurationFormatUtils.Token.containsTokenWithValue(tokens, DurationFormatUtils.d)) {\n-            days = milliseconds / 86400000L;\n-            milliseconds -= days * 86400000L;\n-        }\n-        if (DurationFormatUtils.Token.containsTokenWithValue(tokens, DurationFormatUtils.H)) {\n-            hours = milliseconds / 3600000L;\n-            milliseconds -= hours * 3600000L;\n-        }\n-        if (DurationFormatUtils.Token.containsTokenWithValue(tokens, DurationFormatUtils.m)) {\n-            minutes = milliseconds / 60000L;\n-            milliseconds -= minutes * 60000L;\n-        }\n-        if (DurationFormatUtils.Token.containsTokenWithValue(tokens, DurationFormatUtils.s)) {\n-            seconds = milliseconds / 1000L;\n-            milliseconds -= seconds * 1000L;\n-        }\n-        return format(tokens, 0L, 0L, days, hours, minutes, seconds, milliseconds, padWithZeros);\n-    }\n-    \n-    public static String formatDurationWords(final long durationMillis, final boolean suppressLeadingZeroElements, final boolean suppressTrailingZeroElements) {\n-        String duration = formatDuration(durationMillis, \"d' days 'H' hours 'm' minutes 's' seconds'\");\n-        if (suppressLeadingZeroElements) {\n-            duration = \" \" + duration;\n-            String tmp = StringUtils.replaceOnce(duration, \" 0 days\", \"\");\n-            if (tmp.length() != duration.length()) {\n-                duration = tmp;\n-                tmp = StringUtils.replaceOnce(duration, \" 0 hours\", \"\");\n-                if (tmp.length() != duration.length()) {\n-                    duration = tmp;\n-                    tmp = (duration = StringUtils.replaceOnce(duration, \" 0 minutes\", \"\"));\n-                    if (tmp.length() != duration.length()) {\n-                        duration = StringUtils.replaceOnce(tmp, \" 0 seconds\", \"\");\n+    public static String formatDuration(final long n, final String s) {\n+        return formatDuration(n, s, true);\n+    }\n+    \n+    public static String formatDuration(final long n, final String s, final boolean b) {\n+        Validate.inclusiveBetween(0L, Long.MAX_VALUE, n, \"durationMillis must not be negative\");\n+        final DurationFormatUtils.Token[] lexx = lexx(s);\n+        long n2 = 0L;\n+        long n3 = 0L;\n+        long n4 = 0L;\n+        long n5 = 0L;\n+        long n6 = n;\n+        if (DurationFormatUtils.Token.containsTokenWithValue(lexx, DurationFormatUtils.d)) {\n+            n2 = n6 / 86400000L;\n+            n6 -= n2 * 86400000L;\n+        }\n+        if (DurationFormatUtils.Token.containsTokenWithValue(lexx, DurationFormatUtils.H)) {\n+            n3 = n6 / 3600000L;\n+            n6 -= n3 * 3600000L;\n+        }\n+        if (DurationFormatUtils.Token.containsTokenWithValue(lexx, DurationFormatUtils.m)) {\n+            n4 = n6 / 60000L;\n+            n6 -= n4 * 60000L;\n+        }\n+        if (DurationFormatUtils.Token.containsTokenWithValue(lexx, DurationFormatUtils.s)) {\n+            n5 = n6 / 1000L;\n+            n6 -= n5 * 1000L;\n+        }\n+        return format(lexx, 0L, 0L, n2, n3, n4, n5, n6, b);\n+    }\n+    \n+    public static String formatDurationWords(final long n, final boolean b, final boolean b2) {\n+        String s = formatDuration(n, \"d' days 'H' hours 'm' minutes 's' seconds'\");\n+        if (b) {\n+            s = \" \" + s;\n+            final String replaceOnce = StringUtils.replaceOnce(s, \" 0 days\", \"\");\n+            if (replaceOnce.length() != s.length()) {\n+                s = replaceOnce;\n+                final String replaceOnce2 = StringUtils.replaceOnce(s, \" 0 hours\", \"\");\n+                if (replaceOnce2.length() != s.length()) {\n+                    final String s2 = s = StringUtils.replaceOnce(replaceOnce2, \" 0 minutes\", \"\");\n+                    if (s2.length() != s.length()) {\n+                        s = StringUtils.replaceOnce(s2, \" 0 seconds\", \"\");\n                     }\n                 }\n             }\n-            if (!duration.isEmpty()) {\n-                duration = duration.substring(1);\n+            if (!s.isEmpty()) {\n+                s = s.substring(1);\n             }\n         }\n-        if (suppressTrailingZeroElements) {\n-            String tmp = StringUtils.replaceOnce(duration, \" 0 seconds\", \"\");\n-            if (tmp.length() != duration.length()) {\n-                duration = tmp;\n-                tmp = StringUtils.replaceOnce(duration, \" 0 minutes\", \"\");\n-                if (tmp.length() != duration.length()) {\n-                    duration = tmp;\n-                    tmp = StringUtils.replaceOnce(duration, \" 0 hours\", \"\");\n-                    if (tmp.length() != duration.length()) {\n-                        duration = StringUtils.replaceOnce(tmp, \" 0 days\", \"\");\n+        if (b2) {\n+            final String replaceOnce3 = StringUtils.replaceOnce(s, \" 0 seconds\", \"\");\n+            if (replaceOnce3.length() != s.length()) {\n+                s = replaceOnce3;\n+                final String replaceOnce4 = StringUtils.replaceOnce(s, \" 0 minutes\", \"\");\n+                if (replaceOnce4.length() != s.length()) {\n+                    s = replaceOnce4;\n+                    final String replaceOnce5 = StringUtils.replaceOnce(s, \" 0 hours\", \"\");\n+                    if (replaceOnce5.length() != s.length()) {\n+                        s = StringUtils.replaceOnce(replaceOnce5, \" 0 days\", \"\");\n                     }\n                 }\n             }\n         }\n-        duration = \" \" + duration;\n-        duration = StringUtils.replaceOnce(duration, \" 1 seconds\", \" 1 second\");\n-        duration = StringUtils.replaceOnce(duration, \" 1 minutes\", \" 1 minute\");\n-        duration = StringUtils.replaceOnce(duration, \" 1 hours\", \" 1 hour\");\n-        duration = StringUtils.replaceOnce(duration, \" 1 days\", \" 1 day\");\n-        return duration.trim();\n-    }\n-    \n-    public static String formatPeriodISO(final long startMillis, final long endMillis) {\n-        return formatPeriod(startMillis, endMillis, \"'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'\", false, TimeZone.getDefault());\n-    }\n-    \n-    public static String formatPeriod(final long startMillis, final long endMillis, final String format) {\n-        return formatPeriod(startMillis, endMillis, format, true, TimeZone.getDefault());\n-    }\n-    \n-    public static String formatPeriod(final long startMillis, final long endMillis, final String format, final boolean padWithZeros, final TimeZone timezone) {\n-        Validate.isTrue(startMillis <= endMillis, \"startMillis must not be greater than endMillis\", new Object[0]);\n-        final DurationFormatUtils.Token[] tokens = lexx(format);\n-        final Calendar start = Calendar.getInstance(timezone);\n-        start.setTime(new Date(startMillis));\n-        final Calendar end = Calendar.getInstance(timezone);\n-        end.setTime(new Date(endMillis));\n-        int milliseconds = end.get(14) - start.get(14);\n-        int seconds = end.get(13) - start.get(13);\n-        int minutes = end.get(12) - start.get(12);\n-        int hours = end.get(11) - start.get(11);\n-        int days = end.get(5) - start.get(5);\n-        int months = end.get(2) - start.get(2);\n-        int years = end.get(1) - start.get(1);\n-        while (milliseconds < 0) {\n-            milliseconds += 1000;\n-            --seconds;\n-        }\n-        while (seconds < 0) {\n-            seconds += 60;\n-            --minutes;\n-        }\n-        while (minutes < 0) {\n-            minutes += 60;\n-            --hours;\n-        }\n-        while (hours < 0) {\n-            hours += 24;\n-            --days;\n-        }\n-        if (DurationFormatUtils.Token.containsTokenWithValue(tokens, DurationFormatUtils.M)) {\n-            while (days < 0) {\n-                days += start.getActualMaximum(5);\n-                --months;\n-                start.add(2, 1);\n-            }\n-            while (months < 0) {\n-                months += 12;\n-                --years;\n-            }\n-            if (!DurationFormatUtils.Token.containsTokenWithValue(tokens, DurationFormatUtils.y) && years != 0) {\n-                while (years != 0) {\n-                    months += 12 * years;\n-                    years = 0;\n+        return StringUtils.replaceOnce(StringUtils.replaceOnce(StringUtils.replaceOnce(StringUtils.replaceOnce(\" \" + s, \" 1 seconds\", \" 1 second\"), \" 1 minutes\", \" 1 minute\"), \" 1 hours\", \" 1 hour\"), \" 1 days\", \" 1 day\").trim();\n+    }\n+    \n+    public static String formatPeriodISO(final long n, final long n2) {\n+        return formatPeriod(n, n2, \"'P'yyyy'Y'M'M'd'DT'H'H'm'M's.SSS'S'\", false, TimeZone.getDefault());\n+    }\n+    \n+    public static String formatPeriod(final long n, final long n2, final String s) {\n+        return formatPeriod(n, n2, s, true, TimeZone.getDefault());\n+    }\n+    \n+    public static String formatPeriod(final long date, final long date2, final String s, final boolean b, final TimeZone timeZone) {\n+        Validate.isTrue(date <= date2, \"startMillis must not be greater than endMillis\", new Object[0]);\n+        final DurationFormatUtils.Token[] lexx = lexx(s);\n+        final Calendar instance = Calendar.getInstance(timeZone);\n+        instance.setTime(new Date(date));\n+        final Calendar instance2 = Calendar.getInstance(timeZone);\n+        instance2.setTime(new Date(date2));\n+        int i = instance2.get(14) - instance.get(14);\n+        int j = instance2.get(13) - instance.get(13);\n+        int k = instance2.get(12) - instance.get(12);\n+        int l = instance2.get(11) - instance.get(11);\n+        int n = instance2.get(5) - instance.get(5);\n+        int n2 = instance2.get(2) - instance.get(2);\n+        int n3 = instance2.get(1) - instance.get(1);\n+        while (i < 0) {\n+            i += 1000;\n+            --j;\n+        }\n+        while (j < 0) {\n+            j += 60;\n+            --k;\n+        }\n+        while (k < 0) {\n+            k += 60;\n+            --l;\n+        }\n+        while (l < 0) {\n+            l += 24;\n+            --n;\n+        }\n+        if (DurationFormatUtils.Token.containsTokenWithValue(lexx, DurationFormatUtils.M)) {\n+            while (n < 0) {\n+                n += instance.getActualMaximum(5);\n+                --n2;\n+                instance.add(2, 1);\n+            }\n+            while (n2 < 0) {\n+                n2 += 12;\n+                --n3;\n+            }\n+            if (!DurationFormatUtils.Token.containsTokenWithValue(lexx, DurationFormatUtils.y) && n3 != 0) {\n+                while (n3 != 0) {\n+                    n2 += 12 * n3;\n+                    n3 = 0;\n                 }\n             }\n         }\n         else {\n-            if (!DurationFormatUtils.Token.containsTokenWithValue(tokens, DurationFormatUtils.y)) {\n-                int target = end.get(1);\n-                if (months < 0) {\n-                    --target;\n+            if (!DurationFormatUtils.Token.containsTokenWithValue(lexx, DurationFormatUtils.y)) {\n+                int value = instance2.get(1);\n+                if (n2 < 0) {\n+                    --value;\n                 }\n-                while (start.get(1) != target) {\n-                    days += start.getActualMaximum(6) - start.get(6);\n-                    if (start instanceof GregorianCalendar && start.get(2) == 1 && start.get(5) == 29) {\n-                        ++days;\n+                while (instance.get(1) != value) {\n+                    int n4 = n + (instance.getActualMaximum(6) - instance.get(6));\n+                    if (instance instanceof GregorianCalendar && instance.get(2) == 1 && instance.get(5) == 29) {\n+                        ++n4;\n                     }\n-                    start.add(1, 1);\n-                    days += start.get(6);\n+                    instance.add(1, 1);\n+                    n = n4 + instance.get(6);\n                 }\n-                years = 0;\n+                n3 = 0;\n             }\n-            while (start.get(2) != end.get(2)) {\n-                days += start.getActualMaximum(5);\n-                start.add(2, 1);\n+            while (instance.get(2) != instance2.get(2)) {\n+                n += instance.getActualMaximum(5);\n+                instance.add(2, 1);\n             }\n-            months = 0;\n-            while (days < 0) {\n-                days += start.getActualMaximum(5);\n-                --months;\n-                start.add(2, 1);\n+            n2 = 0;\n+            while (n < 0) {\n+                n += instance.getActualMaximum(5);\n+                --n2;\n+                instance.add(2, 1);\n             }\n         }\n-        if (!DurationFormatUtils.Token.containsTokenWithValue(tokens, DurationFormatUtils.d)) {\n-            hours += 24 * days;\n-            days = 0;\n+        if (!DurationFormatUtils.Token.containsTokenWithValue(lexx, DurationFormatUtils.d)) {\n+            l += 24 * n;\n+            n = 0;\n         }\n-        if (!DurationFormatUtils.Token.containsTokenWithValue(tokens, DurationFormatUtils.H)) {\n-            minutes += 60 * hours;\n-            hours = 0;\n+        if (!DurationFormatUtils.Token.containsTokenWithValue(lexx, DurationFormatUtils.H)) {\n+            k += 60 * l;\n+            l = 0;\n         }\n-        if (!DurationFormatUtils.Token.containsTokenWithValue(tokens, DurationFormatUtils.m)) {\n-            seconds += 60 * minutes;\n-            minutes = 0;\n+        if (!DurationFormatUtils.Token.containsTokenWithValue(lexx, DurationFormatUtils.m)) {\n+            j += 60 * k;\n+            k = 0;\n         }\n-        if (!DurationFormatUtils.Token.containsTokenWithValue(tokens, DurationFormatUtils.s)) {\n-            milliseconds += 1000 * seconds;\n-            seconds = 0;\n+        if (!DurationFormatUtils.Token.containsTokenWithValue(lexx, DurationFormatUtils.s)) {\n+            i += 1000 * j;\n+            j = 0;\n         }\n-        return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n+        return format(lexx, n3, n2, n, l, k, j, i, b);\n     }\n     \n-    static String format(final DurationFormatUtils.Token[] tokens, final long years, final long months, final long days, final long hours, final long minutes, final long seconds, final long milliseconds, final boolean padWithZeros) {\n-        final StringBuilder buffer = new StringBuilder();\n-        boolean lastOutputSeconds = false;\n-        for (final DurationFormatUtils.Token token : tokens) {\n+    static String format(final DurationFormatUtils.Token[] array, final long n, final long n2, final long n3, final long n4, final long n5, final long n6, final long n7, final boolean b) {\n+        final StringBuilder sb = new StringBuilder();\n+        int n8 = 0;\n+        for (final DurationFormatUtils.Token token : array) {\n             final Object value = token.getValue();\n             final int count = token.getCount();\n             if (value instanceof StringBuilder) {\n-                buffer.append(value.toString());\n+                sb.append(value.toString());\n             }\n             else if (value.equals(DurationFormatUtils.y)) {\n-                buffer.append(paddedValue(years, padWithZeros, count));\n-                lastOutputSeconds = false;\n+                sb.append(paddedValue(n, b, count));\n+                n8 = 0;\n             }\n             else if (value.equals(DurationFormatUtils.M)) {\n-                buffer.append(paddedValue(months, padWithZeros, count));\n-                lastOutputSeconds = false;\n+                sb.append(paddedValue(n2, b, count));\n+                n8 = 0;\n             }\n             else if (value.equals(DurationFormatUtils.d)) {\n-                buffer.append(paddedValue(days, padWithZeros, count));\n-                lastOutputSeconds = false;\n+                sb.append(paddedValue(n3, b, count));\n+                n8 = 0;\n             }\n             else if (value.equals(DurationFormatUtils.H)) {\n-                buffer.append(paddedValue(hours, padWithZeros, count));\n-                lastOutputSeconds = false;\n+                sb.append(paddedValue(n4, b, count));\n+                n8 = 0;\n             }\n             else if (value.equals(DurationFormatUtils.m)) {\n-                buffer.append(paddedValue(minutes, padWithZeros, count));\n-                lastOutputSeconds = false;\n+                sb.append(paddedValue(n5, b, count));\n+                n8 = 0;\n             }\n             else if (value.equals(DurationFormatUtils.s)) {\n-                buffer.append(paddedValue(seconds, padWithZeros, count));\n-                lastOutputSeconds = true;\n+                sb.append(paddedValue(n6, b, count));\n+                n8 = 1;\n             }\n             else if (value.equals(DurationFormatUtils.S)) {\n-                if (lastOutputSeconds) {\n-                    final int width = padWithZeros ? Math.max(3, count) : 3;\n-                    buffer.append(paddedValue(milliseconds, true, width));\n+                if (n8 != 0) {\n+                    sb.append(paddedValue(n7, true, b ? Math.max(3, count) : 3));\n                 }\n                 else {\n-                    buffer.append(paddedValue(milliseconds, padWithZeros, count));\n+                    sb.append(paddedValue(n7, b, count));\n                 }\n-                lastOutputSeconds = false;\n+                n8 = 0;\n             }\n         }\n-        return buffer.toString();\n+        return sb.toString();\n     }\n     \n-    private static String paddedValue(final long value, final boolean padWithZeros, final int count) {\n-        final String longString = Long.toString(value);\n-        return padWithZeros ? StringUtils.leftPad(longString, count, '0') : longString;\n+    private static String paddedValue(final long i, final boolean b, final int n) {\n+        final String string = Long.toString(i);\n+        return b ? StringUtils.leftPad(string, n, '0') : string;\n     }\n     \n-    static DurationFormatUtils.Token[] lexx(final String format) {\n-        final ArrayList<DurationFormatUtils.Token> list = new ArrayList<DurationFormatUtils.Token>(format.length());\n-        boolean inLiteral = false;\n-        StringBuilder buffer = null;\n-        DurationFormatUtils.Token previous = null;\n-        for (int i = 0; i < format.length(); ++i) {\n-            final char ch = format.charAt(i);\n-            if (inLiteral && ch != '\\'') {\n-                buffer.append(ch);\n+    static DurationFormatUtils.Token[] lexx(final String str) {\n+        final ArrayList list = new ArrayList(str.length());\n+        int n = 0;\n+        StringBuilder sb = null;\n+        DurationFormatUtils.Token token = null;\n+        for (int i = 0; i < str.length(); ++i) {\n+            final char char1 = str.charAt(i);\n+            if (n != 0 && char1 != '\\'') {\n+                sb.append(char1);\n             }\n             else {\n-                Object value = null;\n-                switch (ch) {\n+                Object obj = null;\n+                switch (char1) {\n                     case '\\'': {\n-                        if (inLiteral) {\n-                            buffer = null;\n-                            inLiteral = false;\n+                        if (n != 0) {\n+                            sb = null;\n+                            n = 0;\n                             break;\n                         }\n-                        buffer = new StringBuilder();\n-                        list.add(new DurationFormatUtils.Token((Object)buffer));\n-                        inLiteral = true;\n+                        sb = new StringBuilder();\n+                        list.add(new DurationFormatUtils.Token((Object)sb));\n+                        n = 1;\n                         break;\n                     }\n                     case 'y': {\n-                        value = DurationFormatUtils.y;\n+                        obj = DurationFormatUtils.y;\n                         break;\n                     }\n                     case 'M': {\n-                        value = DurationFormatUtils.M;\n+                        obj = DurationFormatUtils.M;\n                         break;\n                     }\n                     case 'd': {\n-                        value = DurationFormatUtils.d;\n+                        obj = DurationFormatUtils.d;\n                         break;\n                     }\n                     case 'H': {\n-                        value = DurationFormatUtils.H;\n+                        obj = DurationFormatUtils.H;\n                         break;\n                     }\n                     case 'm': {\n-                        value = DurationFormatUtils.m;\n+                        obj = DurationFormatUtils.m;\n                         break;\n                     }\n                     case 's': {\n-                        value = DurationFormatUtils.s;\n+                        obj = DurationFormatUtils.s;\n                         break;\n                     }\n                     case 'S': {\n-                        value = DurationFormatUtils.S;\n+                        obj = DurationFormatUtils.S;\n                         break;\n                     }\n                     default: {\n-                        if (buffer == null) {\n-                            buffer = new StringBuilder();\n-                            list.add(new DurationFormatUtils.Token((Object)buffer));\n+                        if (sb == null) {\n+                            sb = new StringBuilder();\n+                            list.add(new DurationFormatUtils.Token((Object)sb));\n                         }\n-                        buffer.append(ch);\n+                        sb.append(char1);\n                         break;\n                     }\n                 }\n-                if (value != null) {\n-                    if (previous != null && previous.getValue().equals(value)) {\n-                        previous.increment();\n+                if (obj != null) {\n+                    if (token != null && token.getValue().equals(obj)) {\n+                        token.increment();\n                     }\n                     else {\n-                        final DurationFormatUtils.Token token = new DurationFormatUtils.Token(value);\n-                        list.add(token);\n-                        previous = token;\n+                        final DurationFormatUtils.Token e = new DurationFormatUtils.Token(obj);\n+                        list.add(e);\n+                        token = e;\n                     }\n-                    buffer = null;\n+                    sb = null;\n                 }\n             }\n         }\n-        if (inLiteral) {\n-            throw new IllegalArgumentException(\"Unmatched quote in format: \" + format);\n+        if (n != 0) {\n+            throw new IllegalArgumentException(\"Unmatched quote in format: \" + str);\n         }\n         return list.toArray(new DurationFormatUtils.Token[0]);\n     }\n     \n     static {\n         y = \"y\";\n         M = \"M\";\n"}]}
