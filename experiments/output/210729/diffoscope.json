{"diffoscope-json-version": 1, "source1": "first/EqualsBuilder.class", "source2": "second/EqualsBuilder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -24,42 +24,38 @@\n     private Class<?> reflectUpToClass;\n     private String[] excludeFields;\n     \n     static Set<Pair<IDKey, IDKey>> getRegistry() {\n         return EqualsBuilder.REGISTRY.get();\n     }\n     \n-    static Pair<IDKey, IDKey> getRegisterPair(final Object lhs, final Object rhs) {\n-        final IDKey left = new IDKey(lhs);\n-        final IDKey right = new IDKey(rhs);\n-        return (Pair<IDKey, IDKey>)Pair.of((Object)left, (Object)right);\n+    static Pair<IDKey, IDKey> getRegisterPair(final Object o, final Object o2) {\n+        return (Pair<IDKey, IDKey>)Pair.of((Object)new IDKey(o), (Object)new IDKey(o2));\n     }\n     \n-    static boolean isRegistered(final Object lhs, final Object rhs) {\n+    static boolean isRegistered(final Object o, final Object o2) {\n         final Set<Pair<IDKey, IDKey>> registry = getRegistry();\n-        final Pair<IDKey, IDKey> pair = getRegisterPair(lhs, rhs);\n-        final Pair<IDKey, IDKey> swappedPair = (Pair<IDKey, IDKey>)Pair.of(pair.getRight(), pair.getLeft());\n-        return registry != null && (registry.contains(pair) || registry.contains(swappedPair));\n+        final Pair<IDKey, IDKey> registerPair = getRegisterPair(o, o2);\n+        final Pair of = Pair.of(registerPair.getRight(), registerPair.getLeft());\n+        return registry != null && (registry.contains(registerPair) || registry.contains(of));\n     }\n     \n-    private static void register(final Object lhs, final Object rhs) {\n+    private static void register(final Object o, final Object o2) {\n         Set<Pair<IDKey, IDKey>> registry = getRegistry();\n         if (registry == null) {\n             registry = new HashSet<Pair<IDKey, IDKey>>();\n             EqualsBuilder.REGISTRY.set(registry);\n         }\n-        final Pair<IDKey, IDKey> pair = getRegisterPair(lhs, rhs);\n-        registry.add(pair);\n+        registry.add(getRegisterPair(o, o2));\n     }\n     \n-    private static void unregister(final Object lhs, final Object rhs) {\n+    private static void unregister(final Object o, final Object o2) {\n         final Set<Pair<IDKey, IDKey>> registry = getRegistry();\n         if (registry != null) {\n-            final Pair<IDKey, IDKey> pair = getRegisterPair(lhs, rhs);\n-            registry.remove(pair);\n+            registry.remove(getRegisterPair(o, o2));\n             if (registry.isEmpty()) {\n                 EqualsBuilder.REGISTRY.remove();\n             }\n         }\n     }\n     \n     public EqualsBuilder() {\n@@ -92,423 +88,423 @@\n     }\n     \n     public EqualsBuilder setExcludeFields(final String... excludeFields) {\n         this.excludeFields = excludeFields;\n         return this;\n     }\n     \n-    public static boolean reflectionEquals(final Object lhs, final Object rhs, final Collection<String> excludeFields) {\n-        return reflectionEquals(lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray((Collection)excludeFields));\n+    public static boolean reflectionEquals(final Object o, final Object o2, final Collection<String> collection) {\n+        return reflectionEquals(o, o2, ReflectionToStringBuilder.toNoNullStringArray((Collection)collection));\n     }\n     \n-    public static boolean reflectionEquals(final Object lhs, final Object rhs, final String... excludeFields) {\n-        return reflectionEquals(lhs, rhs, false, null, excludeFields);\n+    public static boolean reflectionEquals(final Object o, final Object o2, final String... array) {\n+        return reflectionEquals(o, o2, false, null, array);\n     }\n     \n-    public static boolean reflectionEquals(final Object lhs, final Object rhs, final boolean testTransients) {\n-        return reflectionEquals(lhs, rhs, testTransients, null, new String[0]);\n+    public static boolean reflectionEquals(final Object o, final Object o2, final boolean b) {\n+        return reflectionEquals(o, o2, b, null, new String[0]);\n     }\n     \n-    public static boolean reflectionEquals(final Object lhs, final Object rhs, final boolean testTransients, final Class<?> reflectUpToClass, final String... excludeFields) {\n-        return reflectionEquals(lhs, rhs, testTransients, reflectUpToClass, false, excludeFields);\n+    public static boolean reflectionEquals(final Object o, final Object o2, final boolean b, final Class<?> clazz, final String... array) {\n+        return reflectionEquals(o, o2, b, clazz, false, array);\n     }\n     \n-    public static boolean reflectionEquals(final Object lhs, final Object rhs, final boolean testTransients, final Class<?> reflectUpToClass, final boolean testRecursive, final String... excludeFields) {\n-        return lhs == rhs || (lhs != null && rhs != null && new EqualsBuilder().setExcludeFields(excludeFields).setReflectUpToClass(reflectUpToClass).setTestTransients(testTransients).setTestRecursive(testRecursive).reflectionAppend(lhs, rhs).isEquals());\n+    public static boolean reflectionEquals(final Object o, final Object o2, final boolean testTransients, final Class<?> reflectUpToClass, final boolean testRecursive, final String... excludeFields) {\n+        return o == o2 || (o != null && o2 != null && new EqualsBuilder().setExcludeFields(excludeFields).setReflectUpToClass(reflectUpToClass).setTestTransients(testTransients).setTestRecursive(testRecursive).reflectionAppend(o, o2).isEquals());\n     }\n     \n-    public EqualsBuilder reflectionAppend(final Object lhs, final Object rhs) {\n+    public EqualsBuilder reflectionAppend(final Object o, final Object obj) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (o == obj) {\n             return this;\n         }\n-        if (lhs == null || rhs == null) {\n+        if (o == null || obj == null) {\n             this.isEquals = false;\n             return this;\n         }\n-        final Class<?> lhsClass = lhs.getClass();\n-        final Class<?> rhsClass = rhs.getClass();\n-        Class<?> testClass;\n-        if (lhsClass.isInstance(rhs)) {\n-            testClass = lhsClass;\n-            if (!rhsClass.isInstance(lhs)) {\n-                testClass = rhsClass;\n+        final Class<?> class1 = o.getClass();\n+        final Class<?> class2 = obj.getClass();\n+        Class<?> superclass;\n+        if (class1.isInstance(obj)) {\n+            superclass = class1;\n+            if (!class2.isInstance(o)) {\n+                superclass = class2;\n             }\n         }\n         else {\n-            if (!rhsClass.isInstance(lhs)) {\n+            if (!class2.isInstance(o)) {\n                 this.isEquals = false;\n                 return this;\n             }\n-            testClass = rhsClass;\n-            if (!lhsClass.isInstance(rhs)) {\n-                testClass = lhsClass;\n+            superclass = class2;\n+            if (!class1.isInstance(obj)) {\n+                superclass = class1;\n             }\n         }\n         try {\n-            if (testClass.isArray()) {\n-                this.append(lhs, rhs);\n+            if (superclass.isArray()) {\n+                this.append(o, obj);\n             }\n-            else if (this.bypassReflectionClasses != null && (this.bypassReflectionClasses.contains(lhsClass) || this.bypassReflectionClasses.contains(rhsClass))) {\n-                this.isEquals = lhs.equals(rhs);\n+            else if (this.bypassReflectionClasses != null && (this.bypassReflectionClasses.contains(class1) || this.bypassReflectionClasses.contains(class2))) {\n+                this.isEquals = o.equals(obj);\n             }\n             else {\n-                this.reflectionAppend(lhs, rhs, testClass);\n-                while (testClass.getSuperclass() != null && testClass != this.reflectUpToClass) {\n-                    testClass = testClass.getSuperclass();\n-                    this.reflectionAppend(lhs, rhs, testClass);\n+                this.reflectionAppend(o, obj, superclass);\n+                while (superclass.getSuperclass() != null && superclass != this.reflectUpToClass) {\n+                    superclass = superclass.getSuperclass();\n+                    this.reflectionAppend(o, obj, superclass);\n                 }\n             }\n         }\n-        catch (final IllegalArgumentException e) {\n+        catch (final IllegalArgumentException ex) {\n             this.isEquals = false;\n             return this;\n         }\n         return this;\n     }\n     \n-    private void reflectionAppend(final Object lhs, final Object rhs, final Class<?> clazz) {\n-        if (isRegistered(lhs, rhs)) {\n+    private void reflectionAppend(final Object obj, final Object obj2, final Class<?> clazz) {\n+        if (isRegistered(obj, obj2)) {\n             return;\n         }\n         try {\n-            register(lhs, rhs);\n-            final Field[] fields = clazz.getDeclaredFields();\n-            AccessibleObject.setAccessible(fields, true);\n-            for (int i = 0; i < fields.length && this.isEquals; ++i) {\n-                final Field f = fields[i];\n-                if (!ArrayUtils.contains((Object[])this.excludeFields, (Object)f.getName()) && !f.getName().contains(\"$\") && (this.testTransients || !Modifier.isTransient(f.getModifiers())) && !Modifier.isStatic(f.getModifiers()) && !f.isAnnotationPresent((Class<? extends Annotation>)EqualsExclude.class)) {\n+            register(obj, obj2);\n+            final Field[] declaredFields = clazz.getDeclaredFields();\n+            AccessibleObject.setAccessible(declaredFields, true);\n+            for (int n = 0; n < declaredFields.length && this.isEquals; ++n) {\n+                final Field field = declaredFields[n];\n+                if (!ArrayUtils.contains((Object[])this.excludeFields, (Object)field.getName()) && !field.getName().contains(\"$\") && (this.testTransients || !Modifier.isTransient(field.getModifiers())) && !Modifier.isStatic(field.getModifiers()) && !field.isAnnotationPresent((Class<? extends Annotation>)EqualsExclude.class)) {\n                     try {\n-                        this.append(f.get(lhs), f.get(rhs));\n+                        this.append(field.get(obj), field.get(obj2));\n                     }\n-                    catch (final IllegalAccessException e) {\n+                    catch (final IllegalAccessException ex) {\n                         throw new InternalError(\"Unexpected IllegalAccessException\");\n                     }\n                 }\n             }\n         }\n         finally {\n-            unregister(lhs, rhs);\n+            unregister(obj, obj2);\n         }\n     }\n     \n-    public EqualsBuilder appendSuper(final boolean superEquals) {\n+    public EqualsBuilder appendSuper(final boolean isEquals) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        this.isEquals = superEquals;\n+        this.isEquals = isEquals;\n         return this;\n     }\n     \n-    public EqualsBuilder append(final Object lhs, final Object rhs) {\n+    public EqualsBuilder append(final Object o, final Object obj) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (o == obj) {\n             return this;\n         }\n-        if (lhs == null || rhs == null) {\n+        if (o == null || obj == null) {\n             this.setEquals(false);\n             return this;\n         }\n-        final Class<?> lhsClass = lhs.getClass();\n-        if (lhsClass.isArray()) {\n-            this.appendArray(lhs, rhs);\n+        final Class<?> class1 = o.getClass();\n+        if (class1.isArray()) {\n+            this.appendArray(o, obj);\n         }\n-        else if (this.testRecursive && !ClassUtils.isPrimitiveOrWrapper((Class)lhsClass)) {\n-            this.reflectionAppend(lhs, rhs);\n+        else if (this.testRecursive && !ClassUtils.isPrimitiveOrWrapper((Class)class1)) {\n+            this.reflectionAppend(o, obj);\n         }\n         else {\n-            this.isEquals = lhs.equals(rhs);\n+            this.isEquals = o.equals(obj);\n         }\n         return this;\n     }\n     \n-    private void appendArray(final Object lhs, final Object rhs) {\n-        if (lhs.getClass() != rhs.getClass()) {\n+    private void appendArray(final Object o, final Object o2) {\n+        if (o.getClass() != o2.getClass()) {\n             this.setEquals(false);\n         }\n-        else if (lhs instanceof long[]) {\n-            this.append(lhs, (long[])(long[])rhs);\n+        else if (o instanceof long[]) {\n+            this.append(o, (long[])(long[])o2);\n         }\n-        else if (lhs instanceof int[]) {\n-            this.append(lhs, (int[])(int[])rhs);\n+        else if (o instanceof int[]) {\n+            this.append(o, (int[])(int[])o2);\n         }\n-        else if (lhs instanceof short[]) {\n-            this.append(lhs, (short[])(short[])rhs);\n+        else if (o instanceof short[]) {\n+            this.append(o, (short[])(short[])o2);\n         }\n-        else if (lhs instanceof char[]) {\n-            this.append(lhs, (char[])(char[])rhs);\n+        else if (o instanceof char[]) {\n+            this.append(o, (char[])(char[])o2);\n         }\n-        else if (lhs instanceof byte[]) {\n-            this.append(lhs, (byte[])(byte[])rhs);\n+        else if (o instanceof byte[]) {\n+            this.append(o, (byte[])(byte[])o2);\n         }\n-        else if (lhs instanceof double[]) {\n-            this.append(lhs, (double[])(double[])rhs);\n+        else if (o instanceof double[]) {\n+            this.append(o, (double[])(double[])o2);\n         }\n-        else if (lhs instanceof float[]) {\n-            this.append(lhs, (float[])(float[])rhs);\n+        else if (o instanceof float[]) {\n+            this.append(o, (float[])(float[])o2);\n         }\n-        else if (lhs instanceof boolean[]) {\n-            this.append(lhs, (boolean[])(boolean[])rhs);\n+        else if (o instanceof boolean[]) {\n+            this.append(o, (boolean[])(boolean[])o2);\n         }\n         else {\n-            this.append(lhs, (Object[])(Object[])rhs);\n+            this.append(o, (Object[])(Object[])o2);\n         }\n     }\n     \n-    public EqualsBuilder append(final long lhs, final long rhs) {\n+    public EqualsBuilder append(final long n, final long n2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        this.isEquals = (lhs == rhs);\n+        this.isEquals = (n == n2);\n         return this;\n     }\n     \n-    public EqualsBuilder append(final int lhs, final int rhs) {\n+    public EqualsBuilder append(final int n, final int n2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        this.isEquals = (lhs == rhs);\n+        this.isEquals = (n == n2);\n         return this;\n     }\n     \n-    public EqualsBuilder append(final short lhs, final short rhs) {\n+    public EqualsBuilder append(final short n, final short n2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        this.isEquals = (lhs == rhs);\n+        this.isEquals = (n == n2);\n         return this;\n     }\n     \n-    public EqualsBuilder append(final char lhs, final char rhs) {\n+    public EqualsBuilder append(final char c, final char c2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        this.isEquals = (lhs == rhs);\n+        this.isEquals = (c == c2);\n         return this;\n     }\n     \n-    public EqualsBuilder append(final byte lhs, final byte rhs) {\n+    public EqualsBuilder append(final byte b, final byte b2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        this.isEquals = (lhs == rhs);\n+        this.isEquals = (b == b2);\n         return this;\n     }\n     \n-    public EqualsBuilder append(final double lhs, final double rhs) {\n+    public EqualsBuilder append(final double value, final double value2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        return this.append(Double.doubleToLongBits(lhs), Double.doubleToLongBits(rhs));\n+        return this.append(Double.doubleToLongBits(value), Double.doubleToLongBits(value2));\n     }\n     \n-    public EqualsBuilder append(final float lhs, final float rhs) {\n+    public EqualsBuilder append(final float value, final float value2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        return this.append(Float.floatToIntBits(lhs), Float.floatToIntBits(rhs));\n+        return this.append(Float.floatToIntBits(value), Float.floatToIntBits(value2));\n     }\n     \n-    public EqualsBuilder append(final boolean lhs, final boolean rhs) {\n+    public EqualsBuilder append(final boolean b, final boolean b2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        this.isEquals = (lhs == rhs);\n+        this.isEquals = (b == b2);\n         return this;\n     }\n     \n-    public EqualsBuilder append(final Object[] lhs, final Object[] rhs) {\n+    public EqualsBuilder append(final Object[] array, final Object[] array2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null || rhs == null) {\n+        if (array == null || array2 == null) {\n             this.setEquals(false);\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n+        if (array.length != array2.length) {\n             this.setEquals(false);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.isEquals; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.isEquals; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n-    public EqualsBuilder append(final long[] lhs, final long[] rhs) {\n+    public EqualsBuilder append(final long[] array, final long[] array2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null || rhs == null) {\n+        if (array == null || array2 == null) {\n             this.setEquals(false);\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n+        if (array.length != array2.length) {\n             this.setEquals(false);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.isEquals; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.isEquals; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n-    public EqualsBuilder append(final int[] lhs, final int[] rhs) {\n+    public EqualsBuilder append(final int[] array, final int[] array2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null || rhs == null) {\n+        if (array == null || array2 == null) {\n             this.setEquals(false);\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n+        if (array.length != array2.length) {\n             this.setEquals(false);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.isEquals; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.isEquals; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n-    public EqualsBuilder append(final short[] lhs, final short[] rhs) {\n+    public EqualsBuilder append(final short[] array, final short[] array2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null || rhs == null) {\n+        if (array == null || array2 == null) {\n             this.setEquals(false);\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n+        if (array.length != array2.length) {\n             this.setEquals(false);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.isEquals; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.isEquals; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n-    public EqualsBuilder append(final char[] lhs, final char[] rhs) {\n+    public EqualsBuilder append(final char[] array, final char[] array2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null || rhs == null) {\n+        if (array == null || array2 == null) {\n             this.setEquals(false);\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n+        if (array.length != array2.length) {\n             this.setEquals(false);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.isEquals; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.isEquals; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n-    public EqualsBuilder append(final byte[] lhs, final byte[] rhs) {\n+    public EqualsBuilder append(final byte[] array, final byte[] array2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null || rhs == null) {\n+        if (array == null || array2 == null) {\n             this.setEquals(false);\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n+        if (array.length != array2.length) {\n             this.setEquals(false);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.isEquals; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.isEquals; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n-    public EqualsBuilder append(final double[] lhs, final double[] rhs) {\n+    public EqualsBuilder append(final double[] array, final double[] array2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null || rhs == null) {\n+        if (array == null || array2 == null) {\n             this.setEquals(false);\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n+        if (array.length != array2.length) {\n             this.setEquals(false);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.isEquals; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.isEquals; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n-    public EqualsBuilder append(final float[] lhs, final float[] rhs) {\n+    public EqualsBuilder append(final float[] array, final float[] array2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null || rhs == null) {\n+        if (array == null || array2 == null) {\n             this.setEquals(false);\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n+        if (array.length != array2.length) {\n             this.setEquals(false);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.isEquals; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.isEquals; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n-    public EqualsBuilder append(final boolean[] lhs, final boolean[] rhs) {\n+    public EqualsBuilder append(final boolean[] array, final boolean[] array2) {\n         if (!this.isEquals) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (array == array2) {\n             return this;\n         }\n-        if (lhs == null || rhs == null) {\n+        if (array == null || array2 == null) {\n             this.setEquals(false);\n             return this;\n         }\n-        if (lhs.length != rhs.length) {\n+        if (array.length != array2.length) {\n             this.setEquals(false);\n             return this;\n         }\n-        for (int i = 0; i < lhs.length && this.isEquals; ++i) {\n-            this.append(lhs[i], rhs[i]);\n+        for (int n = 0; n < array.length && this.isEquals; ++n) {\n+            this.append(array[n], array2[n]);\n         }\n         return this;\n     }\n     \n     public boolean isEquals() {\n         return this.isEquals;\n     }\n"}]}
