{"diffoscope-json-version": 1, "source1": "first/ClassPath$Dir.class", "source2": "second/ClassPath$Dir.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,48 +8,48 @@\n import java.io.File;\n import java.io.IOException;\n \n private static class Dir extends ClassPath.AbstractPathEntry\n {\n     private final String dir;\n     \n-    Dir(final String d) {\n+    Dir(final String dir) {\n         super((ClassPath.ClassPath$1)null);\n-        this.dir = d;\n+        this.dir = dir;\n     }\n     \n     public void close() throws IOException {\n     }\n     \n-    ClassPath.ClassFile getClassFile(final String name, final String suffix) throws IOException {\n-        final File file = new File(this.dir + File.separatorChar + name.replace('.', File.separatorChar) + suffix);\n+    ClassPath.ClassFile getClassFile(final String s, final String str) throws IOException {\n+        final File file = new File(this.dir + File.separatorChar + s.replace('.', File.separatorChar) + str);\n         return (ClassPath.ClassFile)(file.exists() ? new Dir.ClassPath$Dir$1(this, file) : null);\n     }\n     \n-    URL getResource(final String name) {\n-        final File file = this.toFile(name);\n+    URL getResource(final String s) {\n+        final File file = this.toFile(s);\n         try {\n             return file.exists() ? file.toURI().toURL() : null;\n         }\n-        catch (final MalformedURLException e) {\n+        catch (final MalformedURLException ex) {\n             return null;\n         }\n     }\n     \n-    InputStream getResourceAsStream(final String name) {\n-        final File file = this.toFile(name);\n+    InputStream getResourceAsStream(final String s) {\n+        final File file = this.toFile(s);\n         try {\n             return file.exists() ? new FileInputStream(file) : null;\n         }\n-        catch (final IOException e) {\n+        catch (final IOException ex) {\n             return null;\n         }\n     }\n     \n-    private File toFile(final String name) {\n-        return new File(this.dir + File.separatorChar + name.replace('/', File.separatorChar));\n+    private File toFile(final String s) {\n+        return new File(this.dir + File.separatorChar + s.replace('/', File.separatorChar));\n     }\n     \n     public String toString() {\n         return this.dir;\n     }\n }\n"}]}
