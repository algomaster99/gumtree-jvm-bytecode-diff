{"diffoscope-json-version": 1, "source1": "first/EventCountCircuitBreaker$StateStrategyOpen.class", "source2": "second/EventCountCircuitBreaker$StateStrategyOpen.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,102 +1,102 @@\n-  SHA-256 checksum 608ac2fc2fb16816c2feb0ee244dfc26e9e84e6bbcf235d5a5045d2620ed0c20\n+  SHA-256 checksum 3ca39f3415f917038cc20a6d09a356ceb48b942cb1902f23bd6b0bce61971c39\n   Compiled from \"EventCountCircuitBreaker.java\"\n class org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyOpen extends org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n-  this_class: #7                          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen\n+  this_class: #2                          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen\n   super_class: #8                         // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n   interfaces: 0, fields: 0, methods: 4, attributes: 2\n Constant pool:\n-   #1 = Methodref          #7.#36         // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen.\"<init>\":()V\n-   #2 = Methodref          #8.#37         // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.\"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n-   #3 = Methodref          #19.#38        // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.getCheckIntervalStart:()J\n-   #4 = Methodref          #19.#39        // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.getEventCount:()I\n-   #5 = Methodref          #40.#41        // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.getClosingThreshold:()I\n-   #6 = Methodref          #40.#42        // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.getClosingInterval:()J\n-   #7 = Class              #43            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen\n-   #8 = Class              #44            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n-   #9 = Utf8               <init>\n-  #10 = Utf8               ()V\n-  #11 = Utf8               Code\n-  #12 = Utf8               LineNumberTable\n-  #13 = Utf8               LocalVariableTable\n-  #14 = Utf8               this\n-  #15 = Utf8               StateStrategyOpen\n-  #16 = Utf8               InnerClasses\n-  #17 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen;\n-  #18 = Utf8               isStateTransition\n-  #19 = Class              #46            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n-  #20 = Utf8               CheckIntervalData\n-  #21 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n-  #22 = Utf8               breaker\n-  #23 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n-  #24 = Utf8               currentData\n-  #25 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n-  #26 = Utf8               nextData\n-  #27 = Utf8               StackMapTable\n-  #28 = Utf8               fetchCheckInterval\n-  #29 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;)J\n-  #30 = Class              #47            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n-  #31 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n-  #32 = Utf8               x0\n-  #33 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;\n-  #34 = Utf8               SourceFile\n-  #35 = Utf8               EventCountCircuitBreaker.java\n-  #36 = NameAndType        #9:#10         // \"<init>\":()V\n-  #37 = NameAndType        #9:#31         // \"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n-  #38 = NameAndType        #48:#49        // getCheckIntervalStart:()J\n-  #39 = NameAndType        #50:#51        // getEventCount:()I\n-  #40 = Class              #52            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n-  #41 = NameAndType        #53:#51        // getClosingThreshold:()I\n-  #42 = NameAndType        #54:#49        // getClosingInterval:()J\n-  #43 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen\n-  #44 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n-  #45 = Utf8               StateStrategy\n-  #46 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n-  #47 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n-  #48 = Utf8               getCheckIntervalStart\n-  #49 = Utf8               ()J\n-  #50 = Utf8               getEventCount\n-  #51 = Utf8               ()I\n-  #52 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n-  #53 = Utf8               getClosingThreshold\n-  #54 = Utf8               getClosingInterval\n+   #1 = Methodref          #2.#3          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen.\"<init>\":()V\n+   #2 = Class              #4             // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen\n+   #3 = NameAndType        #5:#6          // \"<init>\":()V\n+   #4 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen\n+   #5 = Utf8               <init>\n+   #6 = Utf8               ()V\n+   #7 = Methodref          #8.#9          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.\"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n+   #8 = Class              #10            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n+   #9 = NameAndType        #5:#11         // \"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n+  #10 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n+  #11 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n+  #12 = Methodref          #13.#14        // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.getCheckIntervalStart:()J\n+  #13 = Class              #15            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n+  #14 = NameAndType        #16:#17        // getCheckIntervalStart:()J\n+  #15 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n+  #16 = Utf8               getCheckIntervalStart\n+  #17 = Utf8               ()J\n+  #18 = Methodref          #13.#19        // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.getEventCount:()I\n+  #19 = NameAndType        #20:#21        // getEventCount:()I\n+  #20 = Utf8               getEventCount\n+  #21 = Utf8               ()I\n+  #22 = Methodref          #23.#24        // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.getClosingThreshold:()I\n+  #23 = Class              #25            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+  #24 = NameAndType        #26:#21        // getClosingThreshold:()I\n+  #25 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+  #26 = Utf8               getClosingThreshold\n+  #27 = Methodref          #23.#28        // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.getClosingInterval:()J\n+  #28 = NameAndType        #29:#17        // getClosingInterval:()J\n+  #29 = Utf8               getClosingInterval\n+  #30 = Utf8               Code\n+  #31 = Utf8               LineNumberTable\n+  #32 = Utf8               LocalVariableTable\n+  #33 = Utf8               this\n+  #34 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen;\n+  #35 = Utf8               isStateTransition\n+  #36 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n+  #37 = Utf8               breaker\n+  #38 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n+  #39 = Utf8               currentData\n+  #40 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+  #41 = Utf8               nextData\n+  #42 = Utf8               StackMapTable\n+  #43 = Utf8               fetchCheckInterval\n+  #44 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;)J\n+  #45 = Utf8               x0\n+  #46 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;\n+  #47 = Utf8               SourceFile\n+  #48 = Utf8               EventCountCircuitBreaker.java\n+  #49 = Utf8               InnerClasses\n+  #50 = Utf8               StateStrategyOpen\n+  #51 = Utf8               StateStrategy\n+  #52 = Class              #53            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n+  #53 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n+  #54 = Utf8               CheckIntervalData\n {\n   private org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyOpen();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: aconst_null\n-         2: invokespecial #2                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.\"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n+         2: invokespecial #7                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.\"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n          5: return\n       LineNumberTable:\n         line 545: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen;\n \n   public boolean isStateTransition(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData);\n     descriptor: (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_3\n-         1: invokevirtual #3                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.getCheckIntervalStart:()J\n+         1: invokevirtual #12                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.getCheckIntervalStart:()J\n          4: aload_2\n-         5: invokevirtual #3                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.getCheckIntervalStart:()J\n+         5: invokevirtual #12                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.getCheckIntervalStart:()J\n          8: lcmp\n          9: ifeq          27\n         12: aload_2\n-        13: invokevirtual #4                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.getEventCount:()I\n+        13: invokevirtual #18                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.getEventCount:()I\n         16: aload_1\n-        17: invokevirtual #5                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.getClosingThreshold:()I\n+        17: invokevirtual #22                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.getClosingThreshold:()I\n         20: if_icmpge     27\n         23: iconst_1\n         24: goto          28\n         27: iconst_0\n         28: ireturn\n       LineNumberTable:\n         line 552: 0\n@@ -116,15 +116,15 @@\n \n   protected long fetchCheckInterval(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker);\n     descriptor: (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;)J\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: invokevirtual #6                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.getClosingInterval:()J\n+         1: invokevirtual #27                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.getClosingInterval:()J\n          4: lreturn\n       LineNumberTable:\n         line 562: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen;\n             0       5     1 breaker   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n@@ -142,11 +142,11 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen;\n             0       5     1    x0   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;\n }\n SourceFile: \"EventCountCircuitBreaker.java\"\n InnerClasses:\n-  private static #15= #7 of #40;          // StateStrategyOpen=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n-  private static #20= #19 of #40;         // CheckIntervalData=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n-  static #30;                             // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n-  private static abstract #45= #8 of #40; // StateStrategy=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+  private static #50= #2 of #23;          // StateStrategyOpen=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+  private static abstract #51= #8 of #23; // StateStrategy=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+  static #52;                             // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n+  private static #54= #13 of #23;         // CheckIntervalData=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n"}]}
