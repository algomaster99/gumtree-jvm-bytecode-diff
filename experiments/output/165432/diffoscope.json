{"diffoscope-json-version": 1, "source1": "first/X000A_NTFS.class", "source2": "second/X000A_NTFS.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,73 +1,73 @@\n-  SHA-256 checksum fbd270a579a63926ac35eb4e1d770ba1530c48e817bfac902f6244090b56432f\n+  SHA-256 checksum 43d015a5d659e9cbff90c202c5a70baf1f6fda4b126420420f282a12619d3983\n   Compiled from \"X000A_NTFS.java\"\n public class org.apache.commons.compress.archivers.zip.X000A_NTFS implements org.apache.commons.compress.archivers.zip.ZipExtraField\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #14                         // org/apache/commons/compress/archivers/zip/X000A_NTFS\n   super_class: #55                        // java/lang/Object\n   interfaces: 1, fields: 6, methods: 36, attributes: 1\n Constant pool:\n-    #1 = Methodref          #55.#154      // java/lang/Object.\"<init>\":()V\n-    #2 = Fieldref           #6.#155       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-    #3 = Fieldref           #14.#156      // org/apache/commons/compress/archivers/zip/X000A_NTFS.modifyTime:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-    #4 = Fieldref           #14.#157      // org/apache/commons/compress/archivers/zip/X000A_NTFS.accessTime:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-    #5 = Fieldref           #14.#158      // org/apache/commons/compress/archivers/zip/X000A_NTFS.createTime:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-    #6 = Class              #159          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-    #7 = Methodref          #160.#161     // org/apache/commons/compress/utils/TimeUtils.toNtfsTime:(Ljava/util/Date;)J\n-    #8 = Methodref          #6.#162       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-    #9 = Methodref          #160.#163     // org/apache/commons/compress/utils/TimeUtils.toNtfsTime:(Ljava/nio/file/attribute/FileTime;)J\n-   #10 = Methodref          #6.#164       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.equals:(Ljava/lang/Object;)Z\n-   #11 = Methodref          #6.#165       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-   #12 = Methodref          #160.#166     // org/apache/commons/compress/utils/TimeUtils.ntfsTimeToDate:(J)Ljava/util/Date;\n-   #13 = Methodref          #160.#167     // org/apache/commons/compress/utils/TimeUtils.ntfsTimeToFileTime:(J)Ljava/nio/file/attribute/FileTime;\n-   #14 = Class              #168          // org/apache/commons/compress/archivers/zip/X000A_NTFS\n-   #15 = Methodref          #169.#170     // java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-   #16 = Methodref          #14.#171      // org/apache/commons/compress/archivers/zip/X000A_NTFS.zipToFileTime:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)Ljava/nio/file/attribute/FileTime;\n-   #17 = Methodref          #14.#172      // org/apache/commons/compress/archivers/zip/X000A_NTFS.zipToDate:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)Ljava/util/Date;\n-   #18 = Methodref          #14.#173      // org/apache/commons/compress/archivers/zip/X000A_NTFS.getLocalFileDataData:()[B\n-   #19 = Methodref          #14.#174      // org/apache/commons/compress/archivers/zip/X000A_NTFS.getLocalFileDataLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #20 = Fieldref           #14.#175      // org/apache/commons/compress/archivers/zip/X000A_NTFS.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #21 = Methodref          #27.#176      // org/apache/commons/compress/archivers/zip/ZipShort.getValue:()I\n-   #22 = Fieldref           #14.#177      // org/apache/commons/compress/archivers/zip/X000A_NTFS.TIME_ATTR_TAG:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #23 = Methodref          #27.#178      // org/apache/commons/compress/archivers/zip/ZipShort.getBytes:()[B\n-   #24 = Methodref          #179.#180     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #25 = Fieldref           #14.#181      // org/apache/commons/compress/archivers/zip/X000A_NTFS.TIME_ATTR_SIZE:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #26 = Methodref          #6.#178       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n-   #27 = Class              #182          // org/apache/commons/compress/archivers/zip/ZipShort\n-   #28 = Methodref          #27.#183      // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-   #29 = Methodref          #6.#184       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.hashCode:()I\n-   #30 = Methodref          #185.#186     // java/lang/Integer.rotateLeft:(II)I\n-   #31 = Methodref          #14.#187      // org/apache/commons/compress/archivers/zip/X000A_NTFS.reset:()V\n-   #32 = Methodref          #14.#188      // org/apache/commons/compress/archivers/zip/X000A_NTFS.parseFromLocalFileData:([BII)V\n-   #33 = Methodref          #27.#189      // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":([BI)V\n-   #34 = Methodref          #27.#164      // org/apache/commons/compress/archivers/zip/ZipShort.equals:(Ljava/lang/Object;)Z\n-   #35 = Methodref          #14.#190      // org/apache/commons/compress/archivers/zip/X000A_NTFS.readTimeAttr:([BII)V\n-   #36 = Methodref          #6.#189       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-   #37 = Methodref          #14.#191      // org/apache/commons/compress/archivers/zip/X000A_NTFS.fileTimeToZip:(Ljava/nio/file/attribute/FileTime;)Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #38 = Methodref          #14.#192      // org/apache/commons/compress/archivers/zip/X000A_NTFS.setAccessTime:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #39 = Methodref          #14.#193      // org/apache/commons/compress/archivers/zip/X000A_NTFS.dateToZip:(Ljava/util/Date;)Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #40 = Methodref          #14.#194      // org/apache/commons/compress/archivers/zip/X000A_NTFS.setCreateTime:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #41 = Methodref          #14.#195      // org/apache/commons/compress/archivers/zip/X000A_NTFS.setModifyTime:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #42 = Class              #196          // java/lang/StringBuilder\n-   #43 = Methodref          #42.#154      // java/lang/StringBuilder.\"<init>\":()V\n-   #44 = String             #197          // 0x000A Zip Extra Field:\n-   #45 = Methodref          #42.#198      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #46 = String             #199          //  Modify:[\n-   #47 = Methodref          #14.#200      // org/apache/commons/compress/archivers/zip/X000A_NTFS.getModifyFileTime:()Ljava/nio/file/attribute/FileTime;\n-   #48 = Methodref          #42.#201      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #49 = String             #202          // ]\n-   #50 = String             #203          //  Access:[\n-   #51 = Methodref          #14.#204      // org/apache/commons/compress/archivers/zip/X000A_NTFS.getAccessFileTime:()Ljava/nio/file/attribute/FileTime;\n-   #52 = String             #205          //  Create:[\n-   #53 = Methodref          #14.#206      // org/apache/commons/compress/archivers/zip/X000A_NTFS.getCreateFileTime:()Ljava/nio/file/attribute/FileTime;\n-   #54 = Methodref          #42.#207      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #55 = Class              #208          // java/lang/Object\n-   #56 = Class              #209          // org/apache/commons/compress/archivers/zip/ZipExtraField\n+    #1 = Methodref          #55.#151      // java/lang/Object.\"<init>\":()V\n+    #2 = Fieldref           #6.#152       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+    #3 = Fieldref           #14.#153      // org/apache/commons/compress/archivers/zip/X000A_NTFS.modifyTime:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+    #4 = Fieldref           #14.#154      // org/apache/commons/compress/archivers/zip/X000A_NTFS.accessTime:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+    #5 = Fieldref           #14.#155      // org/apache/commons/compress/archivers/zip/X000A_NTFS.createTime:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+    #6 = Class              #156          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+    #7 = Methodref          #157.#158     // org/apache/commons/compress/utils/TimeUtils.toNtfsTime:(Ljava/util/Date;)J\n+    #8 = Methodref          #6.#159       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+    #9 = Methodref          #157.#160     // org/apache/commons/compress/utils/TimeUtils.toNtfsTime:(Ljava/nio/file/attribute/FileTime;)J\n+   #10 = Methodref          #6.#161       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.equals:(Ljava/lang/Object;)Z\n+   #11 = Methodref          #6.#162       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+   #12 = Methodref          #157.#163     // org/apache/commons/compress/utils/TimeUtils.ntfsTimeToDate:(J)Ljava/util/Date;\n+   #13 = Methodref          #157.#164     // org/apache/commons/compress/utils/TimeUtils.ntfsTimeToFileTime:(J)Ljava/nio/file/attribute/FileTime;\n+   #14 = Class              #165          // org/apache/commons/compress/archivers/zip/X000A_NTFS\n+   #15 = Methodref          #166.#167     // java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+   #16 = Methodref          #14.#168      // org/apache/commons/compress/archivers/zip/X000A_NTFS.zipToFileTime:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)Ljava/nio/file/attribute/FileTime;\n+   #17 = Methodref          #14.#169      // org/apache/commons/compress/archivers/zip/X000A_NTFS.zipToDate:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)Ljava/util/Date;\n+   #18 = Methodref          #14.#170      // org/apache/commons/compress/archivers/zip/X000A_NTFS.getLocalFileDataData:()[B\n+   #19 = Methodref          #14.#171      // org/apache/commons/compress/archivers/zip/X000A_NTFS.getLocalFileDataLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #20 = Fieldref           #14.#172      // org/apache/commons/compress/archivers/zip/X000A_NTFS.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #21 = Methodref          #27.#173      // org/apache/commons/compress/archivers/zip/ZipShort.getValue:()I\n+   #22 = Fieldref           #14.#174      // org/apache/commons/compress/archivers/zip/X000A_NTFS.TIME_ATTR_TAG:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #23 = Methodref          #27.#175      // org/apache/commons/compress/archivers/zip/ZipShort.getBytes:()[B\n+   #24 = Methodref          #176.#177     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #25 = Fieldref           #14.#178      // org/apache/commons/compress/archivers/zip/X000A_NTFS.TIME_ATTR_SIZE:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #26 = Methodref          #6.#175       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n+   #27 = Class              #179          // org/apache/commons/compress/archivers/zip/ZipShort\n+   #28 = Methodref          #27.#180      // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+   #29 = Methodref          #6.#181       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.hashCode:()I\n+   #30 = Methodref          #182.#183     // java/lang/Integer.rotateLeft:(II)I\n+   #31 = Methodref          #14.#184      // org/apache/commons/compress/archivers/zip/X000A_NTFS.reset:()V\n+   #32 = Methodref          #14.#185      // org/apache/commons/compress/archivers/zip/X000A_NTFS.parseFromLocalFileData:([BII)V\n+   #33 = Methodref          #27.#186      // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":([BI)V\n+   #34 = Methodref          #27.#161      // org/apache/commons/compress/archivers/zip/ZipShort.equals:(Ljava/lang/Object;)Z\n+   #35 = Methodref          #14.#187      // org/apache/commons/compress/archivers/zip/X000A_NTFS.readTimeAttr:([BII)V\n+   #36 = Methodref          #6.#186       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+   #37 = Methodref          #14.#188      // org/apache/commons/compress/archivers/zip/X000A_NTFS.fileTimeToZip:(Ljava/nio/file/attribute/FileTime;)Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #38 = Methodref          #14.#189      // org/apache/commons/compress/archivers/zip/X000A_NTFS.setAccessTime:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #39 = Methodref          #14.#190      // org/apache/commons/compress/archivers/zip/X000A_NTFS.dateToZip:(Ljava/util/Date;)Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #40 = Methodref          #14.#191      // org/apache/commons/compress/archivers/zip/X000A_NTFS.setCreateTime:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #41 = Methodref          #14.#192      // org/apache/commons/compress/archivers/zip/X000A_NTFS.setModifyTime:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #42 = Class              #193          // java/lang/StringBuilder\n+   #43 = Methodref          #42.#151      // java/lang/StringBuilder.\"<init>\":()V\n+   #44 = String             #194          // 0x000A Zip Extra Field:\n+   #45 = Methodref          #42.#195      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #46 = String             #196          //  Modify:[\n+   #47 = Methodref          #14.#197      // org/apache/commons/compress/archivers/zip/X000A_NTFS.getModifyFileTime:()Ljava/nio/file/attribute/FileTime;\n+   #48 = Methodref          #42.#198      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #49 = String             #199          // ]\n+   #50 = String             #200          //  Access:[\n+   #51 = Methodref          #14.#201      // org/apache/commons/compress/archivers/zip/X000A_NTFS.getAccessFileTime:()Ljava/nio/file/attribute/FileTime;\n+   #52 = String             #202          //  Create:[\n+   #53 = Methodref          #14.#203      // org/apache/commons/compress/archivers/zip/X000A_NTFS.getCreateFileTime:()Ljava/nio/file/attribute/FileTime;\n+   #54 = Methodref          #42.#204      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #55 = Class              #205          // java/lang/Object\n+   #56 = Class              #206          // org/apache/commons/compress/archivers/zip/ZipExtraField\n    #57 = Utf8               HEADER_ID\n    #58 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n    #59 = Utf8               TIME_ATTR_TAG\n    #60 = Utf8               TIME_ATTR_SIZE\n    #61 = Utf8               modifyTime\n    #62 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n    #63 = Utf8               accessTime\n@@ -94,161 +94,158 @@\n    #84 = Utf8               zipToFileTime\n    #85 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)Ljava/nio/file/attribute/FileTime;\n    #86 = Utf8               equals\n    #87 = Utf8               (Ljava/lang/Object;)Z\n    #88 = Utf8               xf\n    #89 = Utf8               o\n    #90 = Utf8               Ljava/lang/Object;\n-   #91 = Class              #168          // org/apache/commons/compress/archivers/zip/X000A_NTFS\n-   #92 = Utf8               getAccessFileTime\n-   #93 = Utf8               ()Ljava/nio/file/attribute/FileTime;\n-   #94 = Utf8               getAccessJavaTime\n-   #95 = Utf8               ()Ljava/util/Date;\n-   #96 = Utf8               getAccessTime\n-   #97 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #98 = Utf8               getCentralDirectoryData\n-   #99 = Utf8               ()[B\n-  #100 = Utf8               getCentralDirectoryLength\n-  #101 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #102 = Utf8               getCreateFileTime\n-  #103 = Utf8               getCreateJavaTime\n-  #104 = Utf8               getCreateTime\n-  #105 = Utf8               getHeaderId\n-  #106 = Utf8               getLocalFileDataData\n-  #107 = Utf8               data\n-  #108 = Utf8               [B\n-  #109 = Utf8               pos\n-  #110 = Utf8               I\n-  #111 = Utf8               getLocalFileDataLength\n-  #112 = Utf8               getModifyFileTime\n-  #113 = Utf8               getModifyJavaTime\n-  #114 = Utf8               getModifyTime\n-  #115 = Utf8               hashCode\n-  #116 = Utf8               ()I\n-  #117 = Utf8               hc\n-  #118 = Utf8               parseFromCentralDirectoryData\n-  #119 = Utf8               ([BII)V\n-  #120 = Utf8               buffer\n-  #121 = Utf8               offset\n-  #122 = Utf8               length\n-  #123 = Utf8               Exceptions\n-  #124 = Class              #210          // java/util/zip/ZipException\n-  #125 = Utf8               parseFromLocalFileData\n-  #126 = Utf8               tag\n-  #127 = Utf8               size\n-  #128 = Utf8               len\n-  #129 = Class              #182          // org/apache/commons/compress/archivers/zip/ZipShort\n-  #130 = Utf8               readTimeAttr\n-  #131 = Utf8               tagValueLength\n-  #132 = Utf8               reset\n-  #133 = Utf8               setAccessFileTime\n-  #134 = Utf8               (Ljava/nio/file/attribute/FileTime;)V\n-  #135 = Utf8               setAccessJavaTime\n-  #136 = Utf8               (Ljava/util/Date;)V\n-  #137 = Utf8               setAccessTime\n-  #138 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #139 = Utf8               t\n-  #140 = Class              #159          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #141 = Utf8               setCreateFileTime\n-  #142 = Utf8               setCreateJavaTime\n-  #143 = Utf8               setCreateTime\n-  #144 = Utf8               setModifyFileTime\n-  #145 = Utf8               setModifyJavaTime\n-  #146 = Utf8               setModifyTime\n-  #147 = Utf8               toString\n-  #148 = Utf8               ()Ljava/lang/String;\n-  #149 = Utf8               buf\n-  #150 = Utf8               Ljava/lang/StringBuilder;\n-  #151 = Utf8               <clinit>\n-  #152 = Utf8               SourceFile\n-  #153 = Utf8               X000A_NTFS.java\n-  #154 = NameAndType        #65:#66       // \"<init>\":()V\n-  #155 = NameAndType        #211:#62      // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #156 = NameAndType        #61:#62       // modifyTime:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #157 = NameAndType        #63:#62       // accessTime:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #158 = NameAndType        #64:#62       // createTime:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #159 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #160 = Class              #212          // org/apache/commons/compress/utils/TimeUtils\n-  #161 = NameAndType        #213:#214     // toNtfsTime:(Ljava/util/Date;)J\n-  #162 = NameAndType        #65:#215      // \"<init>\":(J)V\n-  #163 = NameAndType        #213:#216     // toNtfsTime:(Ljava/nio/file/attribute/FileTime;)J\n-  #164 = NameAndType        #86:#87       // equals:(Ljava/lang/Object;)Z\n-  #165 = NameAndType        #217:#218     // getLongValue:()J\n-  #166 = NameAndType        #219:#220     // ntfsTimeToDate:(J)Ljava/util/Date;\n-  #167 = NameAndType        #221:#222     // ntfsTimeToFileTime:(J)Ljava/nio/file/attribute/FileTime;\n-  #168 = Utf8               org/apache/commons/compress/archivers/zip/X000A_NTFS\n-  #169 = Class              #223          // java/util/Objects\n-  #170 = NameAndType        #86:#224      // equals:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #171 = NameAndType        #84:#85       // zipToFileTime:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)Ljava/nio/file/attribute/FileTime;\n-  #172 = NameAndType        #81:#82       // zipToDate:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)Ljava/util/Date;\n-  #173 = NameAndType        #106:#99      // getLocalFileDataData:()[B\n-  #174 = NameAndType        #111:#101     // getLocalFileDataLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #175 = NameAndType        #57:#58       // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #176 = NameAndType        #225:#116     // getValue:()I\n-  #177 = NameAndType        #59:#58       // TIME_ATTR_TAG:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #178 = NameAndType        #226:#99      // getBytes:()[B\n-  #179 = Class              #227          // java/lang/System\n-  #180 = NameAndType        #228:#229     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #181 = NameAndType        #60:#58       // TIME_ATTR_SIZE:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #182 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-  #183 = NameAndType        #65:#230      // \"<init>\":(I)V\n-  #184 = NameAndType        #115:#116     // hashCode:()I\n-  #185 = Class              #231          // java/lang/Integer\n-  #186 = NameAndType        #232:#233     // rotateLeft:(II)I\n-  #187 = NameAndType        #132:#66      // reset:()V\n-  #188 = NameAndType        #125:#119     // parseFromLocalFileData:([BII)V\n-  #189 = NameAndType        #65:#234      // \"<init>\":([BI)V\n-  #190 = NameAndType        #130:#119     // readTimeAttr:([BII)V\n-  #191 = NameAndType        #77:#78       // fileTimeToZip:(Ljava/nio/file/attribute/FileTime;)Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #192 = NameAndType        #137:#138     // setAccessTime:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #193 = NameAndType        #72:#73       // dateToZip:(Ljava/util/Date;)Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #194 = NameAndType        #143:#138     // setCreateTime:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #195 = NameAndType        #146:#138     // setModifyTime:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #196 = Utf8               java/lang/StringBuilder\n-  #197 = Utf8               0x000A Zip Extra Field:\n-  #198 = NameAndType        #235:#236     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #199 = Utf8                Modify:[\n-  #200 = NameAndType        #112:#93      // getModifyFileTime:()Ljava/nio/file/attribute/FileTime;\n-  #201 = NameAndType        #235:#237     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #202 = Utf8               ]\n-  #203 = Utf8                Access:[\n-  #204 = NameAndType        #92:#93       // getAccessFileTime:()Ljava/nio/file/attribute/FileTime;\n-  #205 = Utf8                Create:[\n-  #206 = NameAndType        #102:#93      // getCreateFileTime:()Ljava/nio/file/attribute/FileTime;\n-  #207 = NameAndType        #147:#148     // toString:()Ljava/lang/String;\n-  #208 = Utf8               java/lang/Object\n-  #209 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #210 = Utf8               java/util/zip/ZipException\n-  #211 = Utf8               ZERO\n-  #212 = Utf8               org/apache/commons/compress/utils/TimeUtils\n-  #213 = Utf8               toNtfsTime\n-  #214 = Utf8               (Ljava/util/Date;)J\n-  #215 = Utf8               (J)V\n-  #216 = Utf8               (Ljava/nio/file/attribute/FileTime;)J\n-  #217 = Utf8               getLongValue\n-  #218 = Utf8               ()J\n-  #219 = Utf8               ntfsTimeToDate\n-  #220 = Utf8               (J)Ljava/util/Date;\n-  #221 = Utf8               ntfsTimeToFileTime\n-  #222 = Utf8               (J)Ljava/nio/file/attribute/FileTime;\n-  #223 = Utf8               java/util/Objects\n-  #224 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #225 = Utf8               getValue\n-  #226 = Utf8               getBytes\n-  #227 = Utf8               java/lang/System\n-  #228 = Utf8               arraycopy\n-  #229 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #230 = Utf8               (I)V\n-  #231 = Utf8               java/lang/Integer\n-  #232 = Utf8               rotateLeft\n-  #233 = Utf8               (II)I\n-  #234 = Utf8               ([BI)V\n-  #235 = Utf8               append\n-  #236 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #237 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #91 = Utf8               getAccessFileTime\n+   #92 = Utf8               ()Ljava/nio/file/attribute/FileTime;\n+   #93 = Utf8               getAccessJavaTime\n+   #94 = Utf8               ()Ljava/util/Date;\n+   #95 = Utf8               getAccessTime\n+   #96 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #97 = Utf8               getCentralDirectoryData\n+   #98 = Utf8               ()[B\n+   #99 = Utf8               getCentralDirectoryLength\n+  #100 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #101 = Utf8               getCreateFileTime\n+  #102 = Utf8               getCreateJavaTime\n+  #103 = Utf8               getCreateTime\n+  #104 = Utf8               getHeaderId\n+  #105 = Utf8               getLocalFileDataData\n+  #106 = Utf8               data\n+  #107 = Utf8               [B\n+  #108 = Utf8               pos\n+  #109 = Utf8               I\n+  #110 = Utf8               getLocalFileDataLength\n+  #111 = Utf8               getModifyFileTime\n+  #112 = Utf8               getModifyJavaTime\n+  #113 = Utf8               getModifyTime\n+  #114 = Utf8               hashCode\n+  #115 = Utf8               ()I\n+  #116 = Utf8               hc\n+  #117 = Utf8               parseFromCentralDirectoryData\n+  #118 = Utf8               ([BII)V\n+  #119 = Utf8               buffer\n+  #120 = Utf8               offset\n+  #121 = Utf8               length\n+  #122 = Utf8               Exceptions\n+  #123 = Class              #207          // java/util/zip/ZipException\n+  #124 = Utf8               parseFromLocalFileData\n+  #125 = Utf8               tag\n+  #126 = Utf8               size\n+  #127 = Utf8               len\n+  #128 = Utf8               readTimeAttr\n+  #129 = Utf8               tagValueLength\n+  #130 = Utf8               reset\n+  #131 = Utf8               setAccessFileTime\n+  #132 = Utf8               (Ljava/nio/file/attribute/FileTime;)V\n+  #133 = Utf8               setAccessJavaTime\n+  #134 = Utf8               (Ljava/util/Date;)V\n+  #135 = Utf8               setAccessTime\n+  #136 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #137 = Utf8               t\n+  #138 = Utf8               setCreateFileTime\n+  #139 = Utf8               setCreateJavaTime\n+  #140 = Utf8               setCreateTime\n+  #141 = Utf8               setModifyFileTime\n+  #142 = Utf8               setModifyJavaTime\n+  #143 = Utf8               setModifyTime\n+  #144 = Utf8               toString\n+  #145 = Utf8               ()Ljava/lang/String;\n+  #146 = Utf8               buf\n+  #147 = Utf8               Ljava/lang/StringBuilder;\n+  #148 = Utf8               <clinit>\n+  #149 = Utf8               SourceFile\n+  #150 = Utf8               X000A_NTFS.java\n+  #151 = NameAndType        #65:#66       // \"<init>\":()V\n+  #152 = NameAndType        #208:#62      // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #153 = NameAndType        #61:#62       // modifyTime:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #154 = NameAndType        #63:#62       // accessTime:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #155 = NameAndType        #64:#62       // createTime:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #156 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #157 = Class              #209          // org/apache/commons/compress/utils/TimeUtils\n+  #158 = NameAndType        #210:#211     // toNtfsTime:(Ljava/util/Date;)J\n+  #159 = NameAndType        #65:#212      // \"<init>\":(J)V\n+  #160 = NameAndType        #210:#213     // toNtfsTime:(Ljava/nio/file/attribute/FileTime;)J\n+  #161 = NameAndType        #86:#87       // equals:(Ljava/lang/Object;)Z\n+  #162 = NameAndType        #214:#215     // getLongValue:()J\n+  #163 = NameAndType        #216:#217     // ntfsTimeToDate:(J)Ljava/util/Date;\n+  #164 = NameAndType        #218:#219     // ntfsTimeToFileTime:(J)Ljava/nio/file/attribute/FileTime;\n+  #165 = Utf8               org/apache/commons/compress/archivers/zip/X000A_NTFS\n+  #166 = Class              #220          // java/util/Objects\n+  #167 = NameAndType        #86:#221      // equals:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #168 = NameAndType        #84:#85       // zipToFileTime:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)Ljava/nio/file/attribute/FileTime;\n+  #169 = NameAndType        #81:#82       // zipToDate:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)Ljava/util/Date;\n+  #170 = NameAndType        #105:#98      // getLocalFileDataData:()[B\n+  #171 = NameAndType        #110:#100     // getLocalFileDataLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #172 = NameAndType        #57:#58       // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #173 = NameAndType        #222:#115     // getValue:()I\n+  #174 = NameAndType        #59:#58       // TIME_ATTR_TAG:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #175 = NameAndType        #223:#98      // getBytes:()[B\n+  #176 = Class              #224          // java/lang/System\n+  #177 = NameAndType        #225:#226     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #178 = NameAndType        #60:#58       // TIME_ATTR_SIZE:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #179 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+  #180 = NameAndType        #65:#227      // \"<init>\":(I)V\n+  #181 = NameAndType        #114:#115     // hashCode:()I\n+  #182 = Class              #228          // java/lang/Integer\n+  #183 = NameAndType        #229:#230     // rotateLeft:(II)I\n+  #184 = NameAndType        #130:#66      // reset:()V\n+  #185 = NameAndType        #124:#118     // parseFromLocalFileData:([BII)V\n+  #186 = NameAndType        #65:#231      // \"<init>\":([BI)V\n+  #187 = NameAndType        #128:#118     // readTimeAttr:([BII)V\n+  #188 = NameAndType        #77:#78       // fileTimeToZip:(Ljava/nio/file/attribute/FileTime;)Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #189 = NameAndType        #135:#136     // setAccessTime:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #190 = NameAndType        #72:#73       // dateToZip:(Ljava/util/Date;)Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #191 = NameAndType        #140:#136     // setCreateTime:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #192 = NameAndType        #143:#136     // setModifyTime:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #193 = Utf8               java/lang/StringBuilder\n+  #194 = Utf8               0x000A Zip Extra Field:\n+  #195 = NameAndType        #232:#233     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #196 = Utf8                Modify:[\n+  #197 = NameAndType        #111:#92      // getModifyFileTime:()Ljava/nio/file/attribute/FileTime;\n+  #198 = NameAndType        #232:#234     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #199 = Utf8               ]\n+  #200 = Utf8                Access:[\n+  #201 = NameAndType        #91:#92       // getAccessFileTime:()Ljava/nio/file/attribute/FileTime;\n+  #202 = Utf8                Create:[\n+  #203 = NameAndType        #101:#92      // getCreateFileTime:()Ljava/nio/file/attribute/FileTime;\n+  #204 = NameAndType        #144:#145     // toString:()Ljava/lang/String;\n+  #205 = Utf8               java/lang/Object\n+  #206 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #207 = Utf8               java/util/zip/ZipException\n+  #208 = Utf8               ZERO\n+  #209 = Utf8               org/apache/commons/compress/utils/TimeUtils\n+  #210 = Utf8               toNtfsTime\n+  #211 = Utf8               (Ljava/util/Date;)J\n+  #212 = Utf8               (J)V\n+  #213 = Utf8               (Ljava/nio/file/attribute/FileTime;)J\n+  #214 = Utf8               getLongValue\n+  #215 = Utf8               ()J\n+  #216 = Utf8               ntfsTimeToDate\n+  #217 = Utf8               (J)Ljava/util/Date;\n+  #218 = Utf8               ntfsTimeToFileTime\n+  #219 = Utf8               (J)Ljava/nio/file/attribute/FileTime;\n+  #220 = Utf8               java/util/Objects\n+  #221 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #222 = Utf8               getValue\n+  #223 = Utf8               getBytes\n+  #224 = Utf8               java/lang/System\n+  #225 = Utf8               arraycopy\n+  #226 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #227 = Utf8               (I)V\n+  #228 = Utf8               java/lang/Integer\n+  #229 = Utf8               rotateLeft\n+  #230 = Utf8               (II)I\n+  #231 = Utf8               ([BI)V\n+  #232 = Utf8               append\n+  #233 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #234 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n {\n   public static final org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n \n   private static final org.apache.commons.compress.archivers.zip.ZipShort TIME_ATTR_TAG;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipShort;\n"}]}
