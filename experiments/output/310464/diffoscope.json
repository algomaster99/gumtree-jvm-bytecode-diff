{"diffoscope-json-version": 1, "source1": "first/StreamCompressor$SeekableByteChannelCompressor.class", "source2": "second/StreamCompressor$SeekableByteChannelCompressor.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,53 +1,53 @@\n-  SHA-256 checksum 5cc7b8dd2159f19c033341737f503c81170d1ccdda839ad3e2db4f374b14352b\n+  SHA-256 checksum d9c7408c844a03bfb04391aad3f7014e9b1c8479dd19b2f9de216241e01e1dab\n   Compiled from \"StreamCompressor.java\"\n final class org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor extends org.apache.commons.compress.archivers.zip.StreamCompressor\n   minor version: 0\n   major version: 53\n   flags: (0x0030) ACC_FINAL, ACC_SUPER\n-  this_class: #5                          // org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n-  super_class: #6                         // org/apache/commons/compress/archivers/zip/StreamCompressor\n+  this_class: #8                          // org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n+  super_class: #2                         // org/apache/commons/compress/archivers/zip/StreamCompressor\n   interfaces: 0, fields: 1, methods: 2, attributes: 2\n Constant pool:\n-   #1 = Methodref          #6.#19         // org/apache/commons/compress/archivers/zip/StreamCompressor.\"<init>\":(Ljava/util/zip/Deflater;)V\n-   #2 = Fieldref           #5.#20         // org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor.channel:Ljava/nio/channels/SeekableByteChannel;\n-   #3 = Methodref          #21.#22        // java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;\n-   #4 = InterfaceMethodref #23.#24        // java/nio/channels/SeekableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n-   #5 = Class              #25            // org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n-   #6 = Class              #28            // org/apache/commons/compress/archivers/zip/StreamCompressor\n-   #7 = Utf8               channel\n-   #8 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n-   #9 = Utf8               <init>\n-  #10 = Utf8               (Ljava/util/zip/Deflater;Ljava/nio/channels/SeekableByteChannel;)V\n-  #11 = Utf8               Code\n-  #12 = Utf8               LineNumberTable\n-  #13 = Utf8               writeOut\n-  #14 = Utf8               ([BII)V\n-  #15 = Utf8               Exceptions\n-  #16 = Class              #29            // java/io/IOException\n-  #17 = Utf8               SourceFile\n-  #18 = Utf8               StreamCompressor.java\n-  #19 = NameAndType        #9:#30         // \"<init>\":(Ljava/util/zip/Deflater;)V\n-  #20 = NameAndType        #7:#8          // channel:Ljava/nio/channels/SeekableByteChannel;\n-  #21 = Class              #31            // java/nio/ByteBuffer\n-  #22 = NameAndType        #32:#33        // wrap:([BII)Ljava/nio/ByteBuffer;\n-  #23 = Class              #34            // java/nio/channels/SeekableByteChannel\n-  #24 = NameAndType        #35:#36        // write:(Ljava/nio/ByteBuffer;)I\n-  #25 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n-  #26 = Utf8               SeekableByteChannelCompressor\n-  #27 = Utf8               InnerClasses\n-  #28 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor\n-  #29 = Utf8               java/io/IOException\n-  #30 = Utf8               (Ljava/util/zip/Deflater;)V\n-  #31 = Utf8               java/nio/ByteBuffer\n-  #32 = Utf8               wrap\n-  #33 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #34 = Utf8               java/nio/channels/SeekableByteChannel\n-  #35 = Utf8               write\n-  #36 = Utf8               (Ljava/nio/ByteBuffer;)I\n+   #1 = Methodref          #2.#3          // org/apache/commons/compress/archivers/zip/StreamCompressor.\"<init>\":(Ljava/util/zip/Deflater;)V\n+   #2 = Class              #4             // org/apache/commons/compress/archivers/zip/StreamCompressor\n+   #3 = NameAndType        #5:#6          // \"<init>\":(Ljava/util/zip/Deflater;)V\n+   #4 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor\n+   #5 = Utf8               <init>\n+   #6 = Utf8               (Ljava/util/zip/Deflater;)V\n+   #7 = Fieldref           #8.#9          // org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor.channel:Ljava/nio/channels/SeekableByteChannel;\n+   #8 = Class              #10            // org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n+   #9 = NameAndType        #11:#12        // channel:Ljava/nio/channels/SeekableByteChannel;\n+  #10 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n+  #11 = Utf8               channel\n+  #12 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n+  #13 = Methodref          #14.#15        // java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;\n+  #14 = Class              #16            // java/nio/ByteBuffer\n+  #15 = NameAndType        #17:#18        // wrap:([BII)Ljava/nio/ByteBuffer;\n+  #16 = Utf8               java/nio/ByteBuffer\n+  #17 = Utf8               wrap\n+  #18 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #19 = InterfaceMethodref #20.#21        // java/nio/channels/SeekableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n+  #20 = Class              #22            // java/nio/channels/SeekableByteChannel\n+  #21 = NameAndType        #23:#24        // write:(Ljava/nio/ByteBuffer;)I\n+  #22 = Utf8               java/nio/channels/SeekableByteChannel\n+  #23 = Utf8               write\n+  #24 = Utf8               (Ljava/nio/ByteBuffer;)I\n+  #25 = Utf8               (Ljava/util/zip/Deflater;Ljava/nio/channels/SeekableByteChannel;)V\n+  #26 = Utf8               Code\n+  #27 = Utf8               LineNumberTable\n+  #28 = Utf8               writeOut\n+  #29 = Utf8               ([BII)V\n+  #30 = Utf8               Exceptions\n+  #31 = Class              #32            // java/io/IOException\n+  #32 = Utf8               java/io/IOException\n+  #33 = Utf8               SourceFile\n+  #34 = Utf8               StreamCompressor.java\n+  #35 = Utf8               InnerClasses\n+  #36 = Utf8               SeekableByteChannelCompressor\n {\n   private final java.nio.channels.SeekableByteChannel channel;\n     descriptor: Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor(java.util.zip.Deflater, java.nio.channels.SeekableByteChannel);\n     descriptor: (Ljava/util/zip/Deflater;Ljava/nio/channels/SeekableByteChannel;)V\n@@ -55,37 +55,37 @@\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: invokespecial #1                  // Method org/apache/commons/compress/archivers/zip/StreamCompressor.\"<init>\":(Ljava/util/zip/Deflater;)V\n          5: aload_0\n          6: aload_2\n-         7: putfield      #2                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+         7: putfield      #7                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n         10: return\n       LineNumberTable:\n         line 330: 0\n         line 331: 5\n         line 332: 10\n \n   protected void writeOut(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n-         1: getfield      #2                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+         1: getfield      #7                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n          4: aload_1\n          5: iload_2\n          6: iload_3\n-         7: invokestatic  #3                  // Method java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;\n-        10: invokeinterface #4,  2            // InterfaceMethod java/nio/channels/SeekableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n+         7: invokestatic  #13                 // Method java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;\n+        10: invokeinterface #19,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n         15: pop\n         16: return\n       LineNumberTable:\n         line 337: 0\n         line 338: 16\n     Exceptions:\n       throws java.io.IOException\n }\n SourceFile: \"StreamCompressor.java\"\n InnerClasses:\n-  private static final #26= #5 of #6;     // SeekableByteChannelCompressor=class org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor of class org/apache/commons/compress/archivers/zip/StreamCompressor\n+  private static final #36= #8 of #2;     // SeekableByteChannelCompressor=class org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor of class org/apache/commons/compress/archivers/zip/StreamCompressor\n"}]}
