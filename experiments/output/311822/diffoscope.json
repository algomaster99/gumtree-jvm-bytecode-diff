{"diffoscope-json-version": 1, "source1": "first/DumpArchiveUtil.class", "source2": "second/DumpArchiveUtil.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,70 +1,70 @@\n-  SHA-256 checksum ef0b87f8bf6f08d0e8870de203526ffe832afa1a366b2059602535fbf20c850b\n+  SHA-256 checksum 09f3df05f89632884afda614b58f38b62d0d0b286ee38bbdf795cd88ee4d4591\n   Compiled from \"DumpArchiveUtil.java\"\n class org.apache.commons.compress.archivers.dump.DumpArchiveUtil\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n-  this_class: #10                         // org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n-  super_class: #11                        // java/lang/Object\n+  this_class: #2                          // org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n+  super_class: #34                        // java/lang/Object\n   interfaces: 0, fields: 0, methods: 8, attributes: 1\n Constant pool:\n-   #1 = Methodref          #10.#33        // org/apache/commons/compress/archivers/dump/DumpArchiveUtil.convert32:([BI)I\n-   #2 = Class              #34            // org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n-   #3 = Integer            84446\n-   #4 = Methodref          #35.#36        // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n-   #5 = Methodref          #37.#38        // java/util/Arrays.copyOfRange:([BII)[B\n-   #6 = InterfaceMethodref #39.#40        // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #7 = Integer            60012\n-   #8 = Methodref          #10.#41        // org/apache/commons/compress/archivers/dump/DumpArchiveUtil.calculateChecksum:([B)I\n-   #9 = Methodref          #11.#42        // java/lang/Object.\"<init>\":()V\n-  #10 = Class              #43            // org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n-  #11 = Class              #44            // java/lang/Object\n-  #12 = Utf8               calculateChecksum\n-  #13 = Utf8               ([B)I\n-  #14 = Utf8               Code\n-  #15 = Utf8               LineNumberTable\n-  #16 = Utf8               StackMapTable\n-  #17 = Utf8               convert16\n-  #18 = Utf8               ([BI)I\n-  #19 = Utf8               convert32\n-  #20 = Utf8               convert64\n-  #21 = Utf8               ([BI)J\n-  #22 = Utf8               decode\n-  #23 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEncoding;[BII)Ljava/lang/String;\n-  #24 = Utf8               Exceptions\n-  #25 = Class              #45            // java/io/IOException\n-  #26 = Utf8               getIno\n-  #27 = Utf8               verify\n-  #28 = Utf8               ([B)Z\n-  #29 = Utf8               <init>\n-  #30 = Utf8               ()V\n-  #31 = Utf8               SourceFile\n-  #32 = Utf8               DumpArchiveUtil.java\n-  #33 = NameAndType        #19:#18        // convert32:([BI)I\n-  #34 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n-  #35 = Class              #46            // org/apache/commons/compress/utils/ByteUtils\n-  #36 = NameAndType        #47:#48        // fromLittleEndian:([BII)J\n-  #37 = Class              #49            // java/util/Arrays\n-  #38 = NameAndType        #50:#51        // copyOfRange:([BII)[B\n-  #39 = Class              #52            // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #40 = NameAndType        #22:#53        // decode:([B)Ljava/lang/String;\n-  #41 = NameAndType        #12:#13        // calculateChecksum:([B)I\n-  #42 = NameAndType        #29:#30        // \"<init>\":()V\n-  #43 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n-  #44 = Utf8               java/lang/Object\n-  #45 = Utf8               java/io/IOException\n-  #46 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #47 = Utf8               fromLittleEndian\n-  #48 = Utf8               ([BII)J\n-  #49 = Utf8               java/util/Arrays\n-  #50 = Utf8               copyOfRange\n-  #51 = Utf8               ([BII)[B\n-  #52 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #53 = Utf8               ([B)Ljava/lang/String;\n+   #1 = Methodref          #2.#3          // org/apache/commons/compress/archivers/dump/DumpArchiveUtil.convert32:([BI)I\n+   #2 = Class              #4             // org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n+   #3 = NameAndType        #5:#6          // convert32:([BI)I\n+   #4 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n+   #5 = Utf8               convert32\n+   #6 = Utf8               ([BI)I\n+   #7 = Class              #8             // org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n+   #8 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n+   #9 = Integer            84446\n+  #10 = Methodref          #11.#12        // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+  #11 = Class              #13            // org/apache/commons/compress/utils/ByteUtils\n+  #12 = NameAndType        #14:#15        // fromLittleEndian:([BII)J\n+  #13 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+  #14 = Utf8               fromLittleEndian\n+  #15 = Utf8               ([BII)J\n+  #16 = Methodref          #17.#18        // java/util/Arrays.copyOfRange:([BII)[B\n+  #17 = Class              #19            // java/util/Arrays\n+  #18 = NameAndType        #20:#21        // copyOfRange:([BII)[B\n+  #19 = Utf8               java/util/Arrays\n+  #20 = Utf8               copyOfRange\n+  #21 = Utf8               ([BII)[B\n+  #22 = InterfaceMethodref #23.#24        // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+  #23 = Class              #25            // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #24 = NameAndType        #26:#27        // decode:([B)Ljava/lang/String;\n+  #25 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #26 = Utf8               decode\n+  #27 = Utf8               ([B)Ljava/lang/String;\n+  #28 = Integer            60012\n+  #29 = Methodref          #2.#30         // org/apache/commons/compress/archivers/dump/DumpArchiveUtil.calculateChecksum:([B)I\n+  #30 = NameAndType        #31:#32        // calculateChecksum:([B)I\n+  #31 = Utf8               calculateChecksum\n+  #32 = Utf8               ([B)I\n+  #33 = Methodref          #34.#35        // java/lang/Object.\"<init>\":()V\n+  #34 = Class              #36            // java/lang/Object\n+  #35 = NameAndType        #37:#38        // \"<init>\":()V\n+  #36 = Utf8               java/lang/Object\n+  #37 = Utf8               <init>\n+  #38 = Utf8               ()V\n+  #39 = Utf8               Code\n+  #40 = Utf8               LineNumberTable\n+  #41 = Utf8               StackMapTable\n+  #42 = Utf8               convert16\n+  #43 = Utf8               convert64\n+  #44 = Utf8               ([BI)J\n+  #45 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEncoding;[BII)Ljava/lang/String;\n+  #46 = Utf8               Exceptions\n+  #47 = Class              #48            // java/io/IOException\n+  #48 = Utf8               java/io/IOException\n+  #49 = Utf8               getIno\n+  #50 = Utf8               verify\n+  #51 = Utf8               ([B)Z\n+  #52 = Utf8               SourceFile\n+  #53 = Utf8               DumpArchiveUtil.java\n {\n   public static int calculateChecksum(byte[]);\n     descriptor: ([B)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=3, args_size=1\n          0: iconst_0\n@@ -80,15 +80,15 @@\n         14: iload_2\n         15: imul\n         16: invokestatic  #1                  // Method convert32:([BI)I\n         19: iadd\n         20: istore_1\n         21: iinc          2, 1\n         24: goto          4\n-        27: ldc           #3                  // int 84446\n+        27: ldc           #9                  // int 84446\n         29: iload_1\n         30: aload_0\n         31: bipush        28\n         33: invokestatic  #1                  // Method convert32:([BI)I\n         36: isub\n         37: isub\n         38: ireturn\n@@ -111,43 +111,43 @@\n     descriptor: ([BI)I\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: iconst_2\n-         3: invokestatic  #4                  // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+         3: invokestatic  #10                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n          6: l2i\n          7: ireturn\n       LineNumberTable:\n         line 56: 0\n \n   public static final int convert32(byte[], int);\n     descriptor: ([BI)I\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: iconst_4\n-         3: invokestatic  #4                  // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+         3: invokestatic  #10                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n          6: l2i\n          7: ireturn\n       LineNumberTable:\n         line 67: 0\n \n   public static final long convert64(byte[], int);\n     descriptor: ([BI)J\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: bipush        8\n-         4: invokestatic  #4                  // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+         4: invokestatic  #10                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n          7: lreturn\n       LineNumberTable:\n         line 78: 0\n \n   static java.lang.String decode(org.apache.commons.compress.archivers.zip.ZipEncoding, byte[], int, int) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipEncoding;[BII)Ljava/lang/String;\n     flags: (0x0008) ACC_STATIC\n@@ -155,16 +155,16 @@\n       stack=5, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_2\n          4: iload_3\n          5: iadd\n-         6: invokestatic  #5                  // Method java/util/Arrays.copyOfRange:([BII)[B\n-         9: invokeinterface #6,  2            // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+         6: invokestatic  #16                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+         9: invokeinterface #22,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n         14: areturn\n       LineNumberTable:\n         line 86: 0\n     Exceptions:\n       throws java.io.IOException\n \n   public static final int getIno(byte[]);\n@@ -185,25 +185,25 @@\n     Code:\n       stack=2, locals=3, args_size=1\n          0: aload_0\n          1: bipush        24\n          3: invokestatic  #1                  // Method convert32:([BI)I\n          6: istore_1\n          7: iload_1\n-         8: ldc           #7                  // int 60012\n+         8: ldc           #28                 // int 60012\n         10: if_icmpeq     15\n         13: iconst_0\n         14: ireturn\n         15: aload_0\n         16: bipush        28\n         18: invokestatic  #1                  // Method convert32:([BI)I\n         21: istore_2\n         22: iload_2\n         23: aload_0\n-        24: invokestatic  #8                  // Method calculateChecksum:([B)I\n+        24: invokestatic  #29                 // Method calculateChecksum:([B)I\n         27: if_icmpne     34\n         30: iconst_1\n         31: goto          35\n         34: iconst_0\n         35: ireturn\n       LineNumberTable:\n         line 107: 0\n@@ -223,14 +223,14 @@\n \n   private org.apache.commons.compress.archivers.dump.DumpArchiveUtil();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #9                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #33                 // Method java/lang/Object.\"<init>\":()V\n          4: return\n       LineNumberTable:\n         line 122: 0\n         line 123: 4\n }\n SourceFile: \"DumpArchiveUtil.java\"\n"}]}
