{"diffoscope-json-version": 1, "source1": "first/FromNetASCIIInputStream.class", "source2": "second/FromNetASCIIInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,73 +13,74 @@\n     static final byte[] _lineSeparatorBytes;\n     private int length;\n     \n     public static boolean isConversionRequired() {\n         return !FromNetASCIIInputStream._noConversionRequired;\n     }\n     \n-    public FromNetASCIIInputStream(final InputStream input) {\n-        super(input, FromNetASCIIInputStream._lineSeparatorBytes.length + 1);\n+    public FromNetASCIIInputStream(final InputStream in) {\n+        super(in, FromNetASCIIInputStream._lineSeparatorBytes.length + 1);\n         this.length = 0;\n     }\n     \n     private int __read() throws IOException {\n-        int ch = super.read();\n-        if (ch == 13) {\n-            ch = super.read();\n-            if (ch != 10) {\n-                if (ch != -1) {\n-                    this.unread(ch);\n+        int n = super.read();\n+        if (n == 13) {\n+            final int read = super.read();\n+            if (read != 10) {\n+                if (read != -1) {\n+                    this.unread(read);\n                 }\n                 return 13;\n             }\n             this.unread(FromNetASCIIInputStream._lineSeparatorBytes);\n-            ch = super.read();\n+            n = super.read();\n             --this.length;\n         }\n-        return ch;\n+        return n;\n     }\n     \n     @Override\n     public int read() throws IOException {\n         if (FromNetASCIIInputStream._noConversionRequired) {\n             return super.read();\n         }\n         return this.__read();\n     }\n     \n     @Override\n-    public int read(final byte[] buffer) throws IOException {\n-        return this.read(buffer, 0, buffer.length);\n+    public int read(final byte[] array) throws IOException {\n+        return this.read(array, 0, array.length);\n     }\n     \n     @Override\n-    public int read(final byte[] buffer, int offset, final int length) throws IOException {\n+    public int read(final byte[] b, int off, final int len) throws IOException {\n         if (FromNetASCIIInputStream._noConversionRequired) {\n-            return super.read(buffer, offset, length);\n+            return super.read(b, off, len);\n         }\n-        if (length < 1) {\n+        if (len < 1) {\n             return 0;\n         }\n-        int ch = this.available();\n-        this.length = ((length > ch) ? ch : length);\n+        final int available = this.available();\n+        this.length = ((len > available) ? available : len);\n         if (this.length < 1) {\n             this.length = 1;\n         }\n-        if ((ch = this.__read()) == -1) {\n+        int n;\n+        if ((n = this.__read()) == -1) {\n             return -1;\n         }\n-        final int off = offset;\n-        int length2;\n+        final int n2 = off;\n+        int length;\n         do {\n-            buffer[offset++] = (byte)ch;\n-            length2 = this.length - 1;\n-            this.length = length2;\n-        } while (length2 > 0 && (ch = this.__read()) != -1);\n-        return offset - off;\n+            b[off++] = (byte)n;\n+            length = this.length - 1;\n+            this.length = length;\n+        } while (length > 0 && (n = this.__read()) != -1);\n+        return off - n2;\n     }\n     \n     @Override\n     public int available() throws IOException {\n         if (this.in == null) {\n             throw new IOException(\"Stream closed\");\n         }\n@@ -88,12 +89,12 @@\n     \n     static {\n         _lineSeparator = System.getProperty(\"line.separator\");\n         _noConversionRequired = FromNetASCIIInputStream._lineSeparator.equals(\"\\r\\n\");\n         try {\n             _lineSeparatorBytes = FromNetASCIIInputStream._lineSeparator.getBytes(\"US-ASCII\");\n         }\n-        catch (final UnsupportedEncodingException e) {\n-            throw new RuntimeException(\"Broken JVM - cannot find US-ASCII charset!\", e);\n+        catch (final UnsupportedEncodingException cause) {\n+            throw new RuntimeException(\"Broken JVM - cannot find US-ASCII charset!\", cause);\n         }\n     }\n }\n"}]}
