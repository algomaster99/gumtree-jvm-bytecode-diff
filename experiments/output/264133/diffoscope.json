{"diffoscope-json-version": 1, "source1": "first/NNTPClient.class", "source2": "second/NNTPClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,613 +14,605 @@\n import java.io.IOException;\n import org.apache.commons.net.MalformedServerReplyException;\n \n public class NNTPClient extends NNTP\n {\n     private static final NewsgroupInfo[] EMPTY_NEWSGROUP_INFO_ARRAY;\n     \n-    static Article parseArticleEntry(final String line) {\n+    static Article parseArticleEntry(final String subject) {\n         final Article article = new Article();\n-        article.setSubject(line);\n-        final String[] parts = line.split(\"\\t\");\n-        if (parts.length > 6) {\n-            int i = 0;\n+        article.setSubject(subject);\n+        final String[] split = subject.split(\"\\t\");\n+        if (split.length > 6) {\n+            int n = 0;\n             try {\n-                article.setArticleNumber(Long.parseLong(parts[i++]));\n-                article.setSubject(parts[i++]);\n-                article.setFrom(parts[i++]);\n-                article.setDate(parts[i++]);\n-                article.setArticleId(parts[i++]);\n-                article.addReference(parts[i++]);\n+                article.setArticleNumber(Long.parseLong(split[n++]));\n+                article.setSubject(split[n++]);\n+                article.setFrom(split[n++]);\n+                article.setDate(split[n++]);\n+                article.setArticleId(split[n++]);\n+                article.addReference(split[n++]);\n             }\n             catch (final NumberFormatException ex) {}\n         }\n         return article;\n     }\n     \n-    private static void parseGroupReply(final String reply, final NewsgroupInfo info) throws MalformedServerReplyException {\n-        final String[] tokens = reply.split(\" \");\n-        if (tokens.length >= 5) {\n-            int i = 1;\n+    private static void parseGroupReply(final String str, final NewsgroupInfo newsgroupInfo) throws MalformedServerReplyException {\n+        final String[] split = str.split(\" \");\n+        if (split.length >= 5) {\n+            int n = 1;\n             try {\n-                info.setArticleCount(Long.parseLong(tokens[i++]));\n-                info.setFirstArticle(Long.parseLong(tokens[i++]));\n-                info.setLastArticle(Long.parseLong(tokens[i++]));\n-                info.setNewsgroup(tokens[i++]);\n-                info.setPostingPermission(0);\n+                newsgroupInfo.setArticleCount(Long.parseLong(split[n++]));\n+                newsgroupInfo.setFirstArticle(Long.parseLong(split[n++]));\n+                newsgroupInfo.setLastArticle(Long.parseLong(split[n++]));\n+                newsgroupInfo.setNewsgroup(split[n++]);\n+                newsgroupInfo.setPostingPermission(0);\n                 return;\n             }\n             catch (final NumberFormatException ex) {}\n         }\n-        throw new MalformedServerReplyException(\"Could not parse newsgroup info.\\nServer reply: \" + reply);\n+        throw new MalformedServerReplyException(\"Could not parse newsgroup info.\\nServer reply: \" + str);\n     }\n     \n-    static NewsgroupInfo parseNewsgroupListEntry(final String entry) {\n-        final String[] tokens = entry.split(\" \");\n-        if (tokens.length < 4) {\n+    static NewsgroupInfo parseNewsgroupListEntry(final String s) {\n+        final String[] split = s.split(\" \");\n+        if (split.length < 4) {\n             return null;\n         }\n-        final NewsgroupInfo result = new NewsgroupInfo();\n-        int i = 0;\n-        result.setNewsgroup(tokens[i++]);\n+        final NewsgroupInfo newsgroupInfo = new NewsgroupInfo();\n+        int n = 0;\n+        newsgroupInfo.setNewsgroup(split[n++]);\n         try {\n-            final long lastNum = Long.parseLong(tokens[i++]);\n-            final long firstNum = Long.parseLong(tokens[i++]);\n-            result.setFirstArticle(firstNum);\n-            result.setLastArticle(lastNum);\n-            if (firstNum == 0L && lastNum == 0L) {\n-                result.setArticleCount(0L);\n+            final long long1 = Long.parseLong(split[n++]);\n+            final long long2 = Long.parseLong(split[n++]);\n+            newsgroupInfo.setFirstArticle(long2);\n+            newsgroupInfo.setLastArticle(long1);\n+            if (long2 == 0L && long1 == 0L) {\n+                newsgroupInfo.setArticleCount(0L);\n             }\n             else {\n-                result.setArticleCount(lastNum - firstNum + 1L);\n+                newsgroupInfo.setArticleCount(long1 - long2 + 1L);\n             }\n         }\n-        catch (final NumberFormatException e) {\n+        catch (final NumberFormatException ex) {\n             return null;\n         }\n-        switch (tokens[i++].charAt(0)) {\n+        switch (split[n++].charAt(0)) {\n             case 'Y':\n             case 'y': {\n-                result.setPostingPermission(2);\n+                newsgroupInfo.setPostingPermission(2);\n                 break;\n             }\n             case 'N':\n             case 'n': {\n-                result.setPostingPermission(3);\n+                newsgroupInfo.setPostingPermission(3);\n                 break;\n             }\n             case 'M':\n             case 'm': {\n-                result.setPostingPermission(1);\n+                newsgroupInfo.setPostingPermission(1);\n                 break;\n             }\n             default: {\n-                result.setPostingPermission(0);\n+                newsgroupInfo.setPostingPermission(0);\n                 break;\n             }\n         }\n-        return result;\n+        return newsgroupInfo;\n     }\n     \n-    private void ai2ap(final ArticleInfo ai, final ArticlePointer ap) {\n-        if (ap != null) {\n-            ap.articleId = ai.articleId;\n-            ap.articleNumber = (int)ai.articleNumber;\n+    private void ai2ap(final ArticleInfo articleInfo, final ArticlePointer articlePointer) {\n+        if (articlePointer != null) {\n+            articlePointer.articleId = articleInfo.articleId;\n+            articlePointer.articleNumber = (int)articleInfo.articleNumber;\n         }\n     }\n     \n-    private ArticleInfo ap2ai(final ArticlePointer ap) {\n-        if (ap == null) {\n+    private ArticleInfo ap2ai(final ArticlePointer articlePointer) {\n+        if (articlePointer == null) {\n             return null;\n         }\n-        final ArticleInfo ai = new ArticleInfo();\n-        return ai;\n+        return new ArticleInfo();\n     }\n     \n-    public boolean authenticate(final String username, final String password) throws IOException {\n-        int replyCode = this.authinfoUser(username);\n-        if (replyCode == 381) {\n-            replyCode = this.authinfoPass(password);\n-            if (replyCode == 281) {\n-                return this._isAllowedToPost = true;\n-            }\n-        }\n-        return false;\n+    public boolean authenticate(final String s, final String s2) throws IOException {\n+        return this.authinfoUser(s) == 381 && this.authinfoPass(s2) == 281 && (this._isAllowedToPost = true);\n     }\n     \n     public boolean completePendingCommand() throws IOException {\n         return NNTPReply.isPositiveCompletion(this.getReply());\n     }\n     \n-    public Writer forwardArticle(final String articleId) throws IOException {\n-        if (!NNTPReply.isPositiveIntermediate(this.ihave(articleId))) {\n+    public Writer forwardArticle(final String s) throws IOException {\n+        if (!NNTPReply.isPositiveIntermediate(this.ihave(s))) {\n             return null;\n         }\n         return (Writer)new DotTerminatedMessageWriter((Writer)this._writer_);\n     }\n     \n-    public Iterable<Article> iterateArticleInfo(final long lowArticleNumber, final long highArticleNumber) throws IOException {\n-        final BufferedReader info = this.retrieveArticleInfo(lowArticleNumber, highArticleNumber);\n-        if (info == null) {\n+    public Iterable<Article> iterateArticleInfo(final long n, final long n2) throws IOException {\n+        final BufferedReader retrieveArticleInfo = this.retrieveArticleInfo(n, n2);\n+        if (retrieveArticleInfo == null) {\n             throw new IOException(\"XOVER command failed: \" + this.getReplyString());\n         }\n-        return (Iterable<Article>)new ArticleIterator((Iterable)new ReplyIterator(info, false));\n+        return (Iterable<Article>)new ArticleIterator((Iterable)new ReplyIterator(retrieveArticleInfo, false));\n     }\n     \n-    public Iterable<String> iterateNewNews(final NewGroupsOrNewsQuery query) throws IOException {\n-        if (NNTPReply.isPositiveCompletion(this.newnews(query.getNewsgroups(), query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {\n+    public Iterable<String> iterateNewNews(final NewGroupsOrNewsQuery newGroupsOrNewsQuery) throws IOException {\n+        if (NNTPReply.isPositiveCompletion(this.newnews(newGroupsOrNewsQuery.getNewsgroups(), newGroupsOrNewsQuery.getDate(), newGroupsOrNewsQuery.getTime(), newGroupsOrNewsQuery.isGMT(), newGroupsOrNewsQuery.getDistributions()))) {\n             return (Iterable<String>)new ReplyIterator(this._reader_);\n         }\n         throw new IOException(\"NEWNEWS command failed: \" + this.getReplyString());\n     }\n     \n-    public Iterable<String> iterateNewNewsgroupListing(final NewGroupsOrNewsQuery query) throws IOException {\n-        if (NNTPReply.isPositiveCompletion(this.newgroups(query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {\n+    public Iterable<String> iterateNewNewsgroupListing(final NewGroupsOrNewsQuery newGroupsOrNewsQuery) throws IOException {\n+        if (NNTPReply.isPositiveCompletion(this.newgroups(newGroupsOrNewsQuery.getDate(), newGroupsOrNewsQuery.getTime(), newGroupsOrNewsQuery.isGMT(), newGroupsOrNewsQuery.getDistributions()))) {\n             return (Iterable<String>)new ReplyIterator(this._reader_);\n         }\n         throw new IOException(\"NEWGROUPS command failed: \" + this.getReplyString());\n     }\n     \n-    public Iterable<NewsgroupInfo> iterateNewNewsgroups(final NewGroupsOrNewsQuery query) throws IOException {\n-        return (Iterable<NewsgroupInfo>)new NewsgroupIterator((Iterable)this.iterateNewNewsgroupListing(query));\n+    public Iterable<NewsgroupInfo> iterateNewNewsgroups(final NewGroupsOrNewsQuery newGroupsOrNewsQuery) throws IOException {\n+        return (Iterable<NewsgroupInfo>)new NewsgroupIterator((Iterable)this.iterateNewNewsgroupListing(newGroupsOrNewsQuery));\n     }\n     \n     public Iterable<String> iterateNewsgroupListing() throws IOException {\n         if (NNTPReply.isPositiveCompletion(this.list())) {\n             return (Iterable<String>)new ReplyIterator(this._reader_);\n         }\n         throw new IOException(\"LIST command failed: \" + this.getReplyString());\n     }\n     \n-    public Iterable<String> iterateNewsgroupListing(final String wildmat) throws IOException {\n-        if (NNTPReply.isPositiveCompletion(this.listActive(wildmat))) {\n+    public Iterable<String> iterateNewsgroupListing(final String str) throws IOException {\n+        if (NNTPReply.isPositiveCompletion(this.listActive(str))) {\n             return (Iterable<String>)new ReplyIterator(this._reader_);\n         }\n-        throw new IOException(\"LIST ACTIVE \" + wildmat + \" command failed: \" + this.getReplyString());\n+        throw new IOException(\"LIST ACTIVE \" + str + \" command failed: \" + this.getReplyString());\n     }\n     \n     public Iterable<NewsgroupInfo> iterateNewsgroups() throws IOException {\n         return (Iterable<NewsgroupInfo>)new NewsgroupIterator((Iterable)this.iterateNewsgroupListing());\n     }\n     \n-    public Iterable<NewsgroupInfo> iterateNewsgroups(final String wildmat) throws IOException {\n-        return (Iterable<NewsgroupInfo>)new NewsgroupIterator((Iterable)this.iterateNewsgroupListing(wildmat));\n+    public Iterable<NewsgroupInfo> iterateNewsgroups(final String s) throws IOException {\n+        return (Iterable<NewsgroupInfo>)new NewsgroupIterator((Iterable)this.iterateNewsgroupListing(s));\n     }\n     \n     public String listHelp() throws IOException {\n         if (!NNTPReply.isInformational(this.help())) {\n             return null;\n         }\n-        try (final StringWriter help = new StringWriter();\n-             final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_)) {\n-            Util.copyReader((Reader)reader, (Writer)help);\n-            return help.toString();\n+        try (final StringWriter stringWriter = new StringWriter();\n+             final DotTerminatedMessageReader dotTerminatedMessageReader = new DotTerminatedMessageReader((Reader)this._reader_)) {\n+            Util.copyReader((Reader)dotTerminatedMessageReader, (Writer)stringWriter);\n+            return stringWriter.toString();\n         }\n     }\n     \n-    public String[] listNewNews(final NewGroupsOrNewsQuery query) throws IOException {\n-        if (!NNTPReply.isPositiveCompletion(this.newnews(query.getNewsgroups(), query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {\n+    public String[] listNewNews(final NewGroupsOrNewsQuery newGroupsOrNewsQuery) throws IOException {\n+        if (!NNTPReply.isPositiveCompletion(this.newnews(newGroupsOrNewsQuery.getNewsgroups(), newGroupsOrNewsQuery.getDate(), newGroupsOrNewsQuery.getTime(), newGroupsOrNewsQuery.isGMT(), newGroupsOrNewsQuery.getDistributions()))) {\n             return null;\n         }\n-        final Vector<String> list = new Vector<String>();\n-        try (final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_)) {\n+        final Vector vector = new Vector();\n+        try (final DotTerminatedMessageReader dotTerminatedMessageReader = new DotTerminatedMessageReader((Reader)this._reader_)) {\n             String line;\n-            while ((line = reader.readLine()) != null) {\n-                list.addElement(line);\n+            while ((line = ((BufferedReader)dotTerminatedMessageReader).readLine()) != null) {\n+                vector.addElement(line);\n             }\n         }\n-        final int size = list.size();\n+        final int size = vector.size();\n         if (size < 1) {\n             return NetConstants.EMPTY_STRING_ARRAY;\n         }\n-        final String[] result = new String[size];\n-        list.copyInto(result);\n-        return result;\n+        final String[] anArray = new String[size];\n+        vector.copyInto(anArray);\n+        return anArray;\n     }\n     \n-    public NewsgroupInfo[] listNewNewsgroups(final NewGroupsOrNewsQuery query) throws IOException {\n-        if (!NNTPReply.isPositiveCompletion(this.newgroups(query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {\n+    public NewsgroupInfo[] listNewNewsgroups(final NewGroupsOrNewsQuery newGroupsOrNewsQuery) throws IOException {\n+        if (!NNTPReply.isPositiveCompletion(this.newgroups(newGroupsOrNewsQuery.getDate(), newGroupsOrNewsQuery.getTime(), newGroupsOrNewsQuery.isGMT(), newGroupsOrNewsQuery.getDistributions()))) {\n             return null;\n         }\n         return this.readNewsgroupListing();\n     }\n     \n     public NewsgroupInfo[] listNewsgroups() throws IOException {\n         if (!NNTPReply.isPositiveCompletion(this.list())) {\n             return null;\n         }\n         return this.readNewsgroupListing();\n     }\n     \n-    public NewsgroupInfo[] listNewsgroups(final String wildmat) throws IOException {\n-        if (!NNTPReply.isPositiveCompletion(this.listActive(wildmat))) {\n+    public NewsgroupInfo[] listNewsgroups(final String s) throws IOException {\n+        if (!NNTPReply.isPositiveCompletion(this.listActive(s))) {\n             return null;\n         }\n         return this.readNewsgroupListing();\n     }\n     \n     public String[] listOverviewFmt() throws IOException {\n         if (!NNTPReply.isPositiveCompletion(this.sendCommand(\"LIST\", \"OVERVIEW.FMT\"))) {\n             return null;\n         }\n-        try (final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_)) {\n-            final ArrayList<String> list = new ArrayList<String>();\n+        try (final DotTerminatedMessageReader dotTerminatedMessageReader = new DotTerminatedMessageReader((Reader)this._reader_)) {\n+            final ArrayList list = new ArrayList();\n             String line;\n-            while ((line = reader.readLine()) != null) {\n+            while ((line = ((BufferedReader)dotTerminatedMessageReader).readLine()) != null) {\n                 list.add(line);\n             }\n             return (String[])list.toArray(NetConstants.EMPTY_STRING_ARRAY);\n         }\n     }\n     \n     public boolean logout() throws IOException {\n         return NNTPReply.isPositiveCompletion(this.quit());\n     }\n     \n-    private void parseArticlePointer(final String reply, final ArticleInfo pointer) throws MalformedServerReplyException {\n-        final String[] tokens = reply.split(\" \");\n-        if (tokens.length >= 3) {\n-            int i = 1;\n+    private void parseArticlePointer(final String str, final ArticleInfo articleInfo) throws MalformedServerReplyException {\n+        final String[] split = str.split(\" \");\n+        if (split.length >= 3) {\n+            int n = 1;\n             try {\n-                pointer.articleNumber = Long.parseLong(tokens[i++]);\n-                pointer.articleId = tokens[i++];\n+                articleInfo.articleNumber = Long.parseLong(split[n++]);\n+                articleInfo.articleId = split[n++];\n                 return;\n             }\n             catch (final NumberFormatException ex) {}\n         }\n-        throw new MalformedServerReplyException(\"Could not parse article pointer.\\nServer reply: \" + reply);\n+        throw new MalformedServerReplyException(\"Could not parse article pointer.\\nServer reply: \" + str);\n     }\n     \n     public Writer postArticle() throws IOException {\n         if (!NNTPReply.isPositiveIntermediate(this.post())) {\n             return null;\n         }\n         return (Writer)new DotTerminatedMessageWriter((Writer)this._writer_);\n     }\n     \n     private NewsgroupInfo[] readNewsgroupListing() throws IOException {\n-        final Vector<NewsgroupInfo> list = new Vector<NewsgroupInfo>(2048);\n-        try (final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_)) {\n+        final Vector vector = new Vector(2048);\n+        try (final DotTerminatedMessageReader dotTerminatedMessageReader = new DotTerminatedMessageReader((Reader)this._reader_)) {\n             String line;\n-            while ((line = reader.readLine()) != null) {\n-                final NewsgroupInfo tmp = parseNewsgroupListEntry(line);\n-                if (tmp == null) {\n+            while ((line = ((BufferedReader)dotTerminatedMessageReader).readLine()) != null) {\n+                final NewsgroupInfo newsgroupListEntry = parseNewsgroupListEntry(line);\n+                if (newsgroupListEntry == null) {\n                     throw new MalformedServerReplyException(line);\n                 }\n-                list.addElement(tmp);\n+                vector.addElement(newsgroupListEntry);\n             }\n         }\n         final int size;\n-        if ((size = list.size()) < 1) {\n+        if ((size = vector.size()) < 1) {\n             return NNTPClient.EMPTY_NEWSGROUP_INFO_ARRAY;\n         }\n-        final NewsgroupInfo[] info = new NewsgroupInfo[size];\n-        list.copyInto(info);\n-        return info;\n+        final NewsgroupInfo[] anArray = new NewsgroupInfo[size];\n+        vector.copyInto(anArray);\n+        return anArray;\n     }\n     \n-    private BufferedReader retrieve(final int command, final long articleNumber, final ArticleInfo pointer) throws IOException {\n-        if (!NNTPReply.isPositiveCompletion(this.sendCommand(command, Long.toString(articleNumber)))) {\n+    private BufferedReader retrieve(final int n, final long i, final ArticleInfo articleInfo) throws IOException {\n+        if (!NNTPReply.isPositiveCompletion(this.sendCommand(n, Long.toString(i)))) {\n             return null;\n         }\n-        if (pointer != null) {\n-            this.parseArticlePointer(this.getReplyString(), pointer);\n+        if (articleInfo != null) {\n+            this.parseArticlePointer(this.getReplyString(), articleInfo);\n         }\n         return (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n     }\n     \n-    private BufferedReader retrieve(final int command, final String articleId, final ArticleInfo pointer) throws IOException {\n-        if (articleId != null) {\n-            if (!NNTPReply.isPositiveCompletion(this.sendCommand(command, articleId))) {\n+    private BufferedReader retrieve(final int n, final String s, final ArticleInfo articleInfo) throws IOException {\n+        if (s != null) {\n+            if (!NNTPReply.isPositiveCompletion(this.sendCommand(n, s))) {\n                 return null;\n             }\n         }\n-        else if (!NNTPReply.isPositiveCompletion(this.sendCommand(command))) {\n+        else if (!NNTPReply.isPositiveCompletion(this.sendCommand(n))) {\n             return null;\n         }\n-        if (pointer != null) {\n-            this.parseArticlePointer(this.getReplyString(), pointer);\n+        if (articleInfo != null) {\n+            this.parseArticlePointer(this.getReplyString(), articleInfo);\n         }\n         return (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n     }\n     \n     public Reader retrieveArticle() throws IOException {\n         return this.retrieveArticle(null);\n     }\n     \n     @Deprecated\n-    public Reader retrieveArticle(final int articleNumber) throws IOException {\n-        return this.retrieveArticle((long)articleNumber);\n+    public Reader retrieveArticle(final int n) throws IOException {\n+        return this.retrieveArticle((long)n);\n     }\n     \n     @Deprecated\n-    public Reader retrieveArticle(final int articleNumber, final ArticlePointer pointer) throws IOException {\n-        final ArticleInfo ai = this.ap2ai(pointer);\n-        final Reader rdr = this.retrieveArticle(articleNumber, ai);\n-        this.ai2ap(ai, pointer);\n-        return rdr;\n+    public Reader retrieveArticle(final int n, final ArticlePointer articlePointer) throws IOException {\n+        final ArticleInfo ap2ai = this.ap2ai(articlePointer);\n+        final BufferedReader retrieveArticle = this.retrieveArticle(n, ap2ai);\n+        this.ai2ap(ap2ai, articlePointer);\n+        return retrieveArticle;\n     }\n     \n-    public BufferedReader retrieveArticle(final long articleNumber) throws IOException {\n-        return this.retrieveArticle(articleNumber, null);\n+    public BufferedReader retrieveArticle(final long n) throws IOException {\n+        return this.retrieveArticle(n, null);\n     }\n     \n-    public BufferedReader retrieveArticle(final long articleNumber, final ArticleInfo pointer) throws IOException {\n-        return this.retrieve(0, articleNumber, pointer);\n+    public BufferedReader retrieveArticle(final long n, final ArticleInfo articleInfo) throws IOException {\n+        return this.retrieve(0, n, articleInfo);\n     }\n     \n-    public Reader retrieveArticle(final String articleId) throws IOException {\n-        return this.retrieveArticle(articleId, (ArticleInfo)null);\n+    public Reader retrieveArticle(final String s) throws IOException {\n+        return this.retrieveArticle(s, (ArticleInfo)null);\n     }\n     \n-    public BufferedReader retrieveArticle(final String articleId, final ArticleInfo pointer) throws IOException {\n-        return this.retrieve(0, articleId, pointer);\n+    public BufferedReader retrieveArticle(final String s, final ArticleInfo articleInfo) throws IOException {\n+        return this.retrieve(0, s, articleInfo);\n     }\n     \n     @Deprecated\n-    public Reader retrieveArticle(final String articleId, final ArticlePointer pointer) throws IOException {\n-        final ArticleInfo ai = this.ap2ai(pointer);\n-        final Reader rdr = this.retrieveArticle(articleId, ai);\n-        this.ai2ap(ai, pointer);\n-        return rdr;\n+    public Reader retrieveArticle(final String s, final ArticlePointer articlePointer) throws IOException {\n+        final ArticleInfo ap2ai = this.ap2ai(articlePointer);\n+        final BufferedReader retrieveArticle = this.retrieveArticle(s, ap2ai);\n+        this.ai2ap(ap2ai, articlePointer);\n+        return retrieveArticle;\n     }\n     \n     public Reader retrieveArticleBody() throws IOException {\n         return this.retrieveArticleBody(null);\n     }\n     \n     @Deprecated\n-    public Reader retrieveArticleBody(final int a) throws IOException {\n-        return this.retrieveArticleBody((long)a);\n+    public Reader retrieveArticleBody(final int n) throws IOException {\n+        return this.retrieveArticleBody((long)n);\n     }\n     \n     @Deprecated\n-    public Reader retrieveArticleBody(final int a, final ArticlePointer ap) throws IOException {\n-        final ArticleInfo ai = this.ap2ai(ap);\n-        final Reader rdr = this.retrieveArticleBody(a, ai);\n-        this.ai2ap(ai, ap);\n-        return rdr;\n+    public Reader retrieveArticleBody(final int n, final ArticlePointer articlePointer) throws IOException {\n+        final ArticleInfo ap2ai = this.ap2ai(articlePointer);\n+        final BufferedReader retrieveArticleBody = this.retrieveArticleBody(n, ap2ai);\n+        this.ai2ap(ap2ai, articlePointer);\n+        return retrieveArticleBody;\n     }\n     \n-    public BufferedReader retrieveArticleBody(final long articleNumber) throws IOException {\n-        return this.retrieveArticleBody(articleNumber, null);\n+    public BufferedReader retrieveArticleBody(final long n) throws IOException {\n+        return this.retrieveArticleBody(n, null);\n     }\n     \n-    public BufferedReader retrieveArticleBody(final long articleNumber, final ArticleInfo pointer) throws IOException {\n-        return this.retrieve(1, articleNumber, pointer);\n+    public BufferedReader retrieveArticleBody(final long n, final ArticleInfo articleInfo) throws IOException {\n+        return this.retrieve(1, n, articleInfo);\n     }\n     \n-    public Reader retrieveArticleBody(final String articleId) throws IOException {\n-        return this.retrieveArticleBody(articleId, (ArticleInfo)null);\n+    public Reader retrieveArticleBody(final String s) throws IOException {\n+        return this.retrieveArticleBody(s, (ArticleInfo)null);\n     }\n     \n-    public BufferedReader retrieveArticleBody(final String articleId, final ArticleInfo pointer) throws IOException {\n-        return this.retrieve(1, articleId, pointer);\n+    public BufferedReader retrieveArticleBody(final String s, final ArticleInfo articleInfo) throws IOException {\n+        return this.retrieve(1, s, articleInfo);\n     }\n     \n     @Deprecated\n-    public Reader retrieveArticleBody(final String articleId, final ArticlePointer pointer) throws IOException {\n-        final ArticleInfo ai = this.ap2ai(pointer);\n-        final Reader rdr = this.retrieveArticleBody(articleId, ai);\n-        this.ai2ap(ai, pointer);\n-        return rdr;\n+    public Reader retrieveArticleBody(final String s, final ArticlePointer articlePointer) throws IOException {\n+        final ArticleInfo ap2ai = this.ap2ai(articlePointer);\n+        final BufferedReader retrieveArticleBody = this.retrieveArticleBody(s, ap2ai);\n+        this.ai2ap(ap2ai, articlePointer);\n+        return retrieveArticleBody;\n     }\n     \n     public Reader retrieveArticleHeader() throws IOException {\n         return this.retrieveArticleHeader(null);\n     }\n     \n     @Deprecated\n-    public Reader retrieveArticleHeader(final int a) throws IOException {\n-        return this.retrieveArticleHeader((long)a);\n+    public Reader retrieveArticleHeader(final int n) throws IOException {\n+        return this.retrieveArticleHeader((long)n);\n     }\n     \n     @Deprecated\n-    public Reader retrieveArticleHeader(final int a, final ArticlePointer ap) throws IOException {\n-        final ArticleInfo ai = this.ap2ai(ap);\n-        final Reader rdr = this.retrieveArticleHeader(a, ai);\n-        this.ai2ap(ai, ap);\n-        return rdr;\n+    public Reader retrieveArticleHeader(final int n, final ArticlePointer articlePointer) throws IOException {\n+        final ArticleInfo ap2ai = this.ap2ai(articlePointer);\n+        final BufferedReader retrieveArticleHeader = this.retrieveArticleHeader(n, ap2ai);\n+        this.ai2ap(ap2ai, articlePointer);\n+        return retrieveArticleHeader;\n     }\n     \n-    public BufferedReader retrieveArticleHeader(final long articleNumber) throws IOException {\n-        return this.retrieveArticleHeader(articleNumber, null);\n+    public BufferedReader retrieveArticleHeader(final long n) throws IOException {\n+        return this.retrieveArticleHeader(n, null);\n     }\n     \n-    public BufferedReader retrieveArticleHeader(final long articleNumber, final ArticleInfo pointer) throws IOException {\n-        return this.retrieve(3, articleNumber, pointer);\n+    public BufferedReader retrieveArticleHeader(final long n, final ArticleInfo articleInfo) throws IOException {\n+        return this.retrieve(3, n, articleInfo);\n     }\n     \n-    public Reader retrieveArticleHeader(final String articleId) throws IOException {\n-        return this.retrieveArticleHeader(articleId, (ArticleInfo)null);\n+    public Reader retrieveArticleHeader(final String s) throws IOException {\n+        return this.retrieveArticleHeader(s, (ArticleInfo)null);\n     }\n     \n-    public BufferedReader retrieveArticleHeader(final String articleId, final ArticleInfo pointer) throws IOException {\n-        return this.retrieve(3, articleId, pointer);\n+    public BufferedReader retrieveArticleHeader(final String s, final ArticleInfo articleInfo) throws IOException {\n+        return this.retrieve(3, s, articleInfo);\n     }\n     \n     @Deprecated\n-    public Reader retrieveArticleHeader(final String articleId, final ArticlePointer pointer) throws IOException {\n-        final ArticleInfo ai = this.ap2ai(pointer);\n-        final Reader rdr = this.retrieveArticleHeader(articleId, ai);\n-        this.ai2ap(ai, pointer);\n-        return rdr;\n+    public Reader retrieveArticleHeader(final String s, final ArticlePointer articlePointer) throws IOException {\n+        final ArticleInfo ap2ai = this.ap2ai(articlePointer);\n+        final BufferedReader retrieveArticleHeader = this.retrieveArticleHeader(s, ap2ai);\n+        this.ai2ap(ap2ai, articlePointer);\n+        return retrieveArticleHeader;\n     }\n     \n     @Deprecated\n-    public Reader retrieveArticleInfo(final int lowArticleNumber) throws IOException {\n-        return this.retrieveArticleInfo((long)lowArticleNumber);\n+    public Reader retrieveArticleInfo(final int n) throws IOException {\n+        return this.retrieveArticleInfo((long)n);\n     }\n     \n     @Deprecated\n-    public Reader retrieveArticleInfo(final int lowArticleNumber, final int highArticleNumber) throws IOException {\n-        return this.retrieveArticleInfo(lowArticleNumber, (long)highArticleNumber);\n+    public Reader retrieveArticleInfo(final int n, final int n2) throws IOException {\n+        return this.retrieveArticleInfo(n, (long)n2);\n     }\n     \n-    public BufferedReader retrieveArticleInfo(final long articleNumber) throws IOException {\n-        return this.retrieveArticleInfo(Long.toString(articleNumber));\n+    public BufferedReader retrieveArticleInfo(final long i) throws IOException {\n+        return this.retrieveArticleInfo(Long.toString(i));\n     }\n     \n-    public BufferedReader retrieveArticleInfo(final long lowArticleNumber, final long highArticleNumber) throws IOException {\n-        return this.retrieveArticleInfo(lowArticleNumber + \"-\" + highArticleNumber);\n+    public BufferedReader retrieveArticleInfo(final long lng, final long lng2) throws IOException {\n+        return this.retrieveArticleInfo(lng + \"-\" + lng2);\n     }\n     \n-    private BufferedReader retrieveArticleInfo(final String articleRange) throws IOException {\n-        if (!NNTPReply.isPositiveCompletion(this.xover(articleRange))) {\n+    private BufferedReader retrieveArticleInfo(final String s) throws IOException {\n+        if (!NNTPReply.isPositiveCompletion(this.xover(s))) {\n             return null;\n         }\n         return (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n     }\n     \n     @Deprecated\n-    public Reader retrieveHeader(final String a, final int b) throws IOException {\n-        return this.retrieveHeader(a, (long)b);\n+    public Reader retrieveHeader(final String s, final int n) throws IOException {\n+        return this.retrieveHeader(s, (long)n);\n     }\n     \n     @Deprecated\n-    public Reader retrieveHeader(final String header, final int lowArticleNumber, final int highArticleNumber) throws IOException {\n-        return this.retrieveHeader(header, lowArticleNumber, (long)highArticleNumber);\n+    public Reader retrieveHeader(final String s, final int n, final int n2) throws IOException {\n+        return this.retrieveHeader(s, n, (long)n2);\n     }\n     \n-    public BufferedReader retrieveHeader(final String header, final long articleNumber) throws IOException {\n-        return this.retrieveHeader(header, Long.toString(articleNumber));\n+    public BufferedReader retrieveHeader(final String s, final long i) throws IOException {\n+        return this.retrieveHeader(s, Long.toString(i));\n     }\n     \n-    public BufferedReader retrieveHeader(final String header, final long lowArticleNumber, final long highArticleNumber) throws IOException {\n-        return this.retrieveHeader(header, lowArticleNumber + \"-\" + highArticleNumber);\n+    public BufferedReader retrieveHeader(final String s, final long lng, final long lng2) throws IOException {\n+        return this.retrieveHeader(s, lng + \"-\" + lng2);\n     }\n     \n-    private BufferedReader retrieveHeader(final String header, final String articleRange) throws IOException {\n-        if (!NNTPReply.isPositiveCompletion(this.xhdr(header, articleRange))) {\n+    private BufferedReader retrieveHeader(final String s, final String s2) throws IOException {\n+        if (!NNTPReply.isPositiveCompletion(this.xhdr(s, s2))) {\n             return null;\n         }\n         return (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n     }\n     \n-    public boolean selectArticle(final ArticleInfo pointer) throws IOException {\n-        return this.selectArticle(null, pointer);\n+    public boolean selectArticle(final ArticleInfo articleInfo) throws IOException {\n+        return this.selectArticle(null, articleInfo);\n     }\n     \n     @Deprecated\n-    public boolean selectArticle(final ArticlePointer pointer) throws IOException {\n-        final ArticleInfo ai = this.ap2ai(pointer);\n-        final boolean b = this.selectArticle(ai);\n-        this.ai2ap(ai, pointer);\n-        return b;\n+    public boolean selectArticle(final ArticlePointer articlePointer) throws IOException {\n+        final ArticleInfo ap2ai = this.ap2ai(articlePointer);\n+        final boolean selectArticle = this.selectArticle(ap2ai);\n+        this.ai2ap(ap2ai, articlePointer);\n+        return selectArticle;\n     }\n     \n     @Deprecated\n-    public boolean selectArticle(final int a) throws IOException {\n-        return this.selectArticle((long)a);\n+    public boolean selectArticle(final int n) throws IOException {\n+        return this.selectArticle((long)n);\n     }\n     \n     @Deprecated\n-    public boolean selectArticle(final int a, final ArticlePointer ap) throws IOException {\n-        final ArticleInfo ai = this.ap2ai(ap);\n-        final boolean b = this.selectArticle(a, ai);\n-        this.ai2ap(ai, ap);\n-        return b;\n+    public boolean selectArticle(final int n, final ArticlePointer articlePointer) throws IOException {\n+        final ArticleInfo ap2ai = this.ap2ai(articlePointer);\n+        final boolean selectArticle = this.selectArticle(n, ap2ai);\n+        this.ai2ap(ap2ai, articlePointer);\n+        return selectArticle;\n     }\n     \n-    public boolean selectArticle(final long articleNumber) throws IOException {\n-        return this.selectArticle(articleNumber, null);\n+    public boolean selectArticle(final long n) throws IOException {\n+        return this.selectArticle(n, null);\n     }\n     \n-    public boolean selectArticle(final long articleNumber, final ArticleInfo pointer) throws IOException {\n-        if (!NNTPReply.isPositiveCompletion(this.stat(articleNumber))) {\n+    public boolean selectArticle(final long n, final ArticleInfo articleInfo) throws IOException {\n+        if (!NNTPReply.isPositiveCompletion(this.stat(n))) {\n             return false;\n         }\n-        if (pointer != null) {\n-            this.parseArticlePointer(this.getReplyString(), pointer);\n+        if (articleInfo != null) {\n+            this.parseArticlePointer(this.getReplyString(), articleInfo);\n         }\n         return true;\n     }\n     \n-    public boolean selectArticle(final String articleId) throws IOException {\n-        return this.selectArticle(articleId, (ArticleInfo)null);\n+    public boolean selectArticle(final String s) throws IOException {\n+        return this.selectArticle(s, (ArticleInfo)null);\n     }\n     \n-    public boolean selectArticle(final String articleId, final ArticleInfo pointer) throws IOException {\n-        if (articleId != null) {\n-            if (!NNTPReply.isPositiveCompletion(this.stat(articleId))) {\n+    public boolean selectArticle(final String s, final ArticleInfo articleInfo) throws IOException {\n+        if (s != null) {\n+            if (!NNTPReply.isPositiveCompletion(this.stat(s))) {\n                 return false;\n             }\n         }\n         else if (!NNTPReply.isPositiveCompletion(this.stat())) {\n             return false;\n         }\n-        if (pointer != null) {\n-            this.parseArticlePointer(this.getReplyString(), pointer);\n+        if (articleInfo != null) {\n+            this.parseArticlePointer(this.getReplyString(), articleInfo);\n         }\n         return true;\n     }\n     \n     @Deprecated\n-    public boolean selectArticle(final String articleId, final ArticlePointer pointer) throws IOException {\n-        final ArticleInfo ai = this.ap2ai(pointer);\n-        final boolean b = this.selectArticle(articleId, ai);\n-        this.ai2ap(ai, pointer);\n-        return b;\n+    public boolean selectArticle(final String s, final ArticlePointer articlePointer) throws IOException {\n+        final ArticleInfo ap2ai = this.ap2ai(articlePointer);\n+        final boolean selectArticle = this.selectArticle(s, ap2ai);\n+        this.ai2ap(ap2ai, articlePointer);\n+        return selectArticle;\n     }\n     \n-    public boolean selectNewsgroup(final String newsgroup) throws IOException {\n-        return this.selectNewsgroup(newsgroup, null);\n+    public boolean selectNewsgroup(final String s) throws IOException {\n+        return this.selectNewsgroup(s, null);\n     }\n     \n-    public boolean selectNewsgroup(final String newsgroup, final NewsgroupInfo info) throws IOException {\n-        if (!NNTPReply.isPositiveCompletion(this.group(newsgroup))) {\n+    public boolean selectNewsgroup(final String s, final NewsgroupInfo newsgroupInfo) throws IOException {\n+        if (!NNTPReply.isPositiveCompletion(this.group(s))) {\n             return false;\n         }\n-        if (info != null) {\n-            parseGroupReply(this.getReplyString(), info);\n+        if (newsgroupInfo != null) {\n+            parseGroupReply(this.getReplyString(), newsgroupInfo);\n         }\n         return true;\n     }\n     \n     public boolean selectNextArticle() throws IOException {\n         return this.selectNextArticle((ArticleInfo)null);\n     }\n     \n-    public boolean selectNextArticle(final ArticleInfo pointer) throws IOException {\n+    public boolean selectNextArticle(final ArticleInfo articleInfo) throws IOException {\n         if (!NNTPReply.isPositiveCompletion(this.next())) {\n             return false;\n         }\n-        if (pointer != null) {\n-            this.parseArticlePointer(this.getReplyString(), pointer);\n+        if (articleInfo != null) {\n+            this.parseArticlePointer(this.getReplyString(), articleInfo);\n         }\n         return true;\n     }\n     \n     @Deprecated\n-    public boolean selectNextArticle(final ArticlePointer pointer) throws IOException {\n-        final ArticleInfo ai = this.ap2ai(pointer);\n-        final boolean b = this.selectNextArticle(ai);\n-        this.ai2ap(ai, pointer);\n-        return b;\n+    public boolean selectNextArticle(final ArticlePointer articlePointer) throws IOException {\n+        final ArticleInfo ap2ai = this.ap2ai(articlePointer);\n+        final boolean selectNextArticle = this.selectNextArticle(ap2ai);\n+        this.ai2ap(ap2ai, articlePointer);\n+        return selectNextArticle;\n     }\n     \n     public boolean selectPreviousArticle() throws IOException {\n         return this.selectPreviousArticle((ArticleInfo)null);\n     }\n     \n-    public boolean selectPreviousArticle(final ArticleInfo pointer) throws IOException {\n+    public boolean selectPreviousArticle(final ArticleInfo articleInfo) throws IOException {\n         if (!NNTPReply.isPositiveCompletion(this.last())) {\n             return false;\n         }\n-        if (pointer != null) {\n-            this.parseArticlePointer(this.getReplyString(), pointer);\n+        if (articleInfo != null) {\n+            this.parseArticlePointer(this.getReplyString(), articleInfo);\n         }\n         return true;\n     }\n     \n     @Deprecated\n-    public boolean selectPreviousArticle(final ArticlePointer pointer) throws IOException {\n-        final ArticleInfo ai = this.ap2ai(pointer);\n-        final boolean b = this.selectPreviousArticle(ai);\n-        this.ai2ap(ai, pointer);\n-        return b;\n+    public boolean selectPreviousArticle(final ArticlePointer articlePointer) throws IOException {\n+        final ArticleInfo ap2ai = this.ap2ai(articlePointer);\n+        final boolean selectPreviousArticle = this.selectPreviousArticle(ap2ai);\n+        this.ai2ap(ap2ai, articlePointer);\n+        return selectPreviousArticle;\n     }\n     \n     static {\n         EMPTY_NEWSGROUP_INFO_ARRAY = new NewsgroupInfo[0];\n     }\n }\n"}]}
