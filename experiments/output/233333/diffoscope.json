{"diffoscope-json-version": 1, "source1": "first/DefaultExpressionEngineSymbols.class", "source2": "second/DefaultExpressionEngineSymbols.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,21 +17,21 @@\n     private final String propertyDelimiter;\n     private final String escapedDelimiter;\n     private final String attributeStart;\n     private final String attributeEnd;\n     private final String indexStart;\n     private final String indexEnd;\n     \n-    private DefaultExpressionEngineSymbols(final DefaultExpressionEngineSymbols.Builder b) {\n-        this.propertyDelimiter = DefaultExpressionEngineSymbols.Builder.access$000(b);\n-        this.escapedDelimiter = DefaultExpressionEngineSymbols.Builder.access$100(b);\n-        this.indexStart = DefaultExpressionEngineSymbols.Builder.access$200(b);\n-        this.indexEnd = DefaultExpressionEngineSymbols.Builder.access$300(b);\n-        this.attributeStart = DefaultExpressionEngineSymbols.Builder.access$400(b);\n-        this.attributeEnd = DefaultExpressionEngineSymbols.Builder.access$500(b);\n+    private DefaultExpressionEngineSymbols(final DefaultExpressionEngineSymbols.Builder builder) {\n+        this.propertyDelimiter = DefaultExpressionEngineSymbols.Builder.access$000(builder);\n+        this.escapedDelimiter = DefaultExpressionEngineSymbols.Builder.access$100(builder);\n+        this.indexStart = DefaultExpressionEngineSymbols.Builder.access$200(builder);\n+        this.indexEnd = DefaultExpressionEngineSymbols.Builder.access$300(builder);\n+        this.attributeStart = DefaultExpressionEngineSymbols.Builder.access$400(builder);\n+        this.attributeEnd = DefaultExpressionEngineSymbols.Builder.access$500(builder);\n     }\n     \n     public String getPropertyDelimiter() {\n         return this.propertyDelimiter;\n     }\n     \n     public String getEscapedDelimiter() {\n@@ -56,23 +56,23 @@\n     \n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().append((Object)this.getPropertyDelimiter()).append((Object)this.getEscapedDelimiter()).append((Object)this.getIndexStart()).append((Object)this.getIndexEnd()).append((Object)this.getAttributeStart()).append((Object)this.getAttributeEnd()).toHashCode();\n     }\n     \n     @Override\n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (!(obj instanceof DefaultExpressionEngineSymbols)) {\n+        if (!(o instanceof DefaultExpressionEngineSymbols)) {\n             return false;\n         }\n-        final DefaultExpressionEngineSymbols c = (DefaultExpressionEngineSymbols)obj;\n-        return new EqualsBuilder().append((Object)this.getPropertyDelimiter(), (Object)c.getPropertyDelimiter()).append((Object)this.getEscapedDelimiter(), (Object)c.getEscapedDelimiter()).append((Object)this.getIndexStart(), (Object)c.getIndexStart()).append((Object)this.getIndexEnd(), (Object)c.getIndexEnd()).append((Object)this.getAttributeStart(), (Object)c.getAttributeStart()).append((Object)this.getAttributeEnd(), (Object)c.getAttributeEnd()).isEquals();\n+        final DefaultExpressionEngineSymbols defaultExpressionEngineSymbols = (DefaultExpressionEngineSymbols)o;\n+        return new EqualsBuilder().append((Object)this.getPropertyDelimiter(), (Object)defaultExpressionEngineSymbols.getPropertyDelimiter()).append((Object)this.getEscapedDelimiter(), (Object)defaultExpressionEngineSymbols.getEscapedDelimiter()).append((Object)this.getIndexStart(), (Object)defaultExpressionEngineSymbols.getIndexStart()).append((Object)this.getIndexEnd(), (Object)defaultExpressionEngineSymbols.getIndexEnd()).append((Object)this.getAttributeStart(), (Object)defaultExpressionEngineSymbols.getAttributeStart()).append((Object)this.getAttributeEnd(), (Object)defaultExpressionEngineSymbols.getAttributeEnd()).isEquals();\n     }\n     \n     @Override\n     public String toString() {\n         return new ToStringBuilder((Object)this).append(\"propertyDelimiter\", (Object)this.getPropertyDelimiter()).append(\"escapedDelimiter\", (Object)this.getEscapedDelimiter()).append(\"indexStart\", (Object)this.getIndexStart()).append(\"indexEnd\", (Object)this.getIndexEnd()).append(\"attributeStart\", (Object)this.getAttributeStart()).append(\"attributeEnd\", (Object)this.getAttributeEnd()).toString();\n     }\n     \n"}]}
