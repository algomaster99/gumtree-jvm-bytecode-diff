{"diffoscope-json-version": 1, "source1": "first/DeferredFileOutputStream.class", "source2": "second/DeferredFileOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -23,49 +23,49 @@\n     private final Path directory;\n     private boolean closed;\n     \n     public static DeferredFileOutputStream.Builder builder() {\n         return new DeferredFileOutputStream.Builder();\n     }\n     \n-    private static int checkBufferSize(final int initialBufferSize) {\n-        if (initialBufferSize < 0) {\n+    private static int checkBufferSize(final int n) {\n+        if (n < 0) {\n             throw new IllegalArgumentException(\"Initial buffer size must be at least 0.\");\n         }\n-        return initialBufferSize;\n+        return n;\n     }\n     \n     @Deprecated\n-    public DeferredFileOutputStream(final int threshold, final File outputFile) {\n-        this(threshold, outputFile, null, null, null, 1024);\n+    public DeferredFileOutputStream(final int n, final File file) {\n+        this(n, file, null, null, null, 1024);\n     }\n     \n-    private DeferredFileOutputStream(final int threshold, final File outputFile, final String prefix, final String suffix, final File directory, final int initialBufferSize) {\n-        super(threshold);\n-        this.outputPath = this.toPath(outputFile, null);\n+    private DeferredFileOutputStream(final int n, final File file, final String prefix, final String suffix, final File file2, final int n2) {\n+        super(n);\n+        this.outputPath = this.toPath(file, null);\n         this.prefix = prefix;\n         this.suffix = suffix;\n-        this.directory = this.toPath(directory, PathUtils::getTempDirectory);\n-        this.memoryOutputStream = new ByteArrayOutputStream(checkBufferSize(initialBufferSize));\n+        this.directory = this.toPath(file2, PathUtils::getTempDirectory);\n+        this.memoryOutputStream = new ByteArrayOutputStream(checkBufferSize(n2));\n         this.currentOutputStream = (OutputStream)this.memoryOutputStream;\n     }\n     \n     @Deprecated\n-    public DeferredFileOutputStream(final int threshold, final int initialBufferSize, final File outputFile) {\n-        this(threshold, outputFile, null, null, null, initialBufferSize);\n+    public DeferredFileOutputStream(final int n, final int n2, final File file) {\n+        this(n, file, null, null, null, n2);\n     }\n     \n     @Deprecated\n-    public DeferredFileOutputStream(final int threshold, final int initialBufferSize, final String prefix, final String suffix, final File directory) {\n-        this(threshold, null, Objects.requireNonNull(prefix, \"prefix\"), suffix, directory, initialBufferSize);\n+    public DeferredFileOutputStream(final int n, final int n2, final String obj, final String s, final File file) {\n+        this(n, null, Objects.requireNonNull(obj, \"prefix\"), s, file, n2);\n     }\n     \n     @Deprecated\n-    public DeferredFileOutputStream(final int threshold, final String prefix, final String suffix, final File directory) {\n-        this(threshold, null, Objects.requireNonNull(prefix, \"prefix\"), suffix, directory, 1024);\n+    public DeferredFileOutputStream(final int n, final String obj, final String s, final File file) {\n+        this(n, null, Objects.requireNonNull(obj, \"prefix\"), s, file, 1024);\n     }\n     \n     public void close() throws IOException {\n         super.close();\n         this.closed = true;\n     }\n     \n@@ -86,45 +86,45 @@\n     }\n     \n     protected void thresholdReached() throws IOException {\n         if (this.prefix != null) {\n             this.outputPath = Files.createTempFile(this.directory, this.prefix, this.suffix, (FileAttribute<?>[])new FileAttribute[0]);\n         }\n         PathUtils.createParentDirectories(this.outputPath, new FileAttribute[0]);\n-        final OutputStream fos = Files.newOutputStream(this.outputPath, new OpenOption[0]);\n+        final OutputStream outputStream = Files.newOutputStream(this.outputPath, new OpenOption[0]);\n         try {\n-            this.memoryOutputStream.writeTo(fos);\n+            this.memoryOutputStream.writeTo(outputStream);\n         }\n-        catch (final IOException e) {\n-            fos.close();\n-            throw e;\n+        catch (final IOException ex) {\n+            outputStream.close();\n+            throw ex;\n         }\n-        this.currentOutputStream = fos;\n+        this.currentOutputStream = outputStream;\n         this.memoryOutputStream = null;\n     }\n     \n     public InputStream toInputStream() throws IOException {\n         if (!this.closed) {\n             throw new IOException(\"Stream not closed\");\n         }\n         if (this.isInMemory()) {\n             return this.memoryOutputStream.toInputStream();\n         }\n         return Files.newInputStream(this.outputPath, new OpenOption[0]);\n     }\n     \n-    private Path toPath(final File file, final Supplier<Path> defaultPathSupplier) {\n-        return (file != null) ? file.toPath() : ((defaultPathSupplier == null) ? null : ((Path)defaultPathSupplier.get()));\n+    private Path toPath(final File file, final Supplier<Path> supplier) {\n+        return (file != null) ? file.toPath() : ((supplier == null) ? null : ((Path)supplier.get()));\n     }\n     \n-    public void writeTo(final OutputStream outputStream) throws IOException {\n+    public void writeTo(final OutputStream out) throws IOException {\n         if (!this.closed) {\n             throw new IOException(\"Stream not closed\");\n         }\n         if (this.isInMemory()) {\n-            this.memoryOutputStream.writeTo(outputStream);\n+            this.memoryOutputStream.writeTo(out);\n         }\n         else {\n-            Files.copy(this.outputPath, outputStream);\n+            Files.copy(this.outputPath, out);\n         }\n     }\n }\n"}]}
