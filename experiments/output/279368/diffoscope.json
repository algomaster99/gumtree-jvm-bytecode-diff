{"diffoscope-json-version": 1, "source1": "first/FramedSnappyCompressorOutputStream.class", "source2": "second/FramedSnappyCompressorOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,23 +15,23 @@\n     private final Parameters params;\n     private final PureJavaCrc32C checksum;\n     private final byte[] oneByte;\n     private final byte[] buffer;\n     private int currentIndex;\n     private final ByteUtils.ByteConsumer consumer;\n     \n-    static long mask(long x) {\n-        x = (x >> 15 | x << 17);\n-        x += 2726488792L;\n-        x &= 0xFFFFFFFFL;\n-        return x;\n+    static long mask(long n) {\n+        n = (n >> 15 | n << 17);\n+        n += 2726488792L;\n+        n &= 0xFFFFFFFFL;\n+        return n;\n     }\n     \n-    public FramedSnappyCompressorOutputStream(final OutputStream out) throws IOException {\n-        this(out, SnappyCompressorOutputStream.createParameterBuilder(32768).build());\n+    public FramedSnappyCompressorOutputStream(final OutputStream outputStream) throws IOException {\n+        this(outputStream, SnappyCompressorOutputStream.createParameterBuilder(32768).build());\n     }\n     \n     public FramedSnappyCompressorOutputStream(final OutputStream out, final Parameters params) throws IOException {\n         this.checksum = new PureJavaCrc32C();\n         this.oneByte = new byte[1];\n         this.buffer = new byte[65536];\n         this.out = out;\n@@ -53,48 +53,48 @@\n         if (this.currentIndex > 0) {\n             this.flushBuffer();\n         }\n     }\n     \n     private void flushBuffer() throws IOException {\n         this.out.write(0);\n-        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        try (final OutputStream o = (OutputStream)new SnappyCompressorOutputStream((OutputStream)baos, (long)this.currentIndex, this.params)) {\n-            o.write(this.buffer, 0, this.currentIndex);\n+        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+        try (final SnappyCompressorOutputStream snappyCompressorOutputStream = new SnappyCompressorOutputStream((OutputStream)byteArrayOutputStream, (long)this.currentIndex, this.params)) {\n+            ((OutputStream)snappyCompressorOutputStream).write(this.buffer, 0, this.currentIndex);\n         }\n-        final byte[] b = baos.toByteArray();\n-        this.writeLittleEndian(3, (long)b.length + 4L);\n+        final byte[] byteArray = byteArrayOutputStream.toByteArray();\n+        this.writeLittleEndian(3, (long)byteArray.length + 4L);\n         this.writeCrc();\n-        this.out.write(b);\n+        this.out.write(byteArray);\n         this.currentIndex = 0;\n     }\n     \n-    public void write(final byte[] data, int off, int len) throws IOException {\n-        if (this.currentIndex + len > 65536) {\n+    public void write(final byte[] array, int n, int i) throws IOException {\n+        if (this.currentIndex + i > 65536) {\n             this.flushBuffer();\n-            while (len > 65536) {\n-                System.arraycopy(data, off, this.buffer, 0, 65536);\n-                off += 65536;\n-                len -= 65536;\n+            while (i > 65536) {\n+                System.arraycopy(array, n, this.buffer, 0, 65536);\n+                n += 65536;\n+                i -= 65536;\n                 this.currentIndex = 65536;\n                 this.flushBuffer();\n             }\n         }\n-        System.arraycopy(data, off, this.buffer, this.currentIndex, len);\n-        this.currentIndex += len;\n+        System.arraycopy(array, n, this.buffer, this.currentIndex, i);\n+        this.currentIndex += i;\n     }\n     \n-    public void write(final int b) throws IOException {\n-        this.oneByte[0] = (byte)(b & 0xFF);\n+    public void write(final int n) throws IOException {\n+        this.oneByte[0] = (byte)(n & 0xFF);\n         this.write(this.oneByte);\n     }\n     \n     private void writeCrc() throws IOException {\n         this.checksum.update(this.buffer, 0, this.currentIndex);\n         this.writeLittleEndian(4, mask(this.checksum.getValue()));\n         this.checksum.reset();\n     }\n     \n-    private void writeLittleEndian(final int numBytes, final long num) throws IOException {\n-        ByteUtils.toLittleEndian(this.consumer, num, numBytes);\n+    private void writeLittleEndian(final int n, final long n2) throws IOException {\n+        ByteUtils.toLittleEndian(this.consumer, n2, n);\n     }\n }\n"}]}
