{"diffoscope-json-version": 1, "source1": "first/PathUtils.class", "source2": "second/PathUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,15 +11,14 @@\n import java.nio.file.attribute.PosixFilePermission;\n import java.nio.file.attribute.PosixFileAttributeView;\n import java.nio.file.attribute.DosFileAttributeView;\n import java.util.stream.Stream;\n import java.util.stream.Collector;\n import java.util.stream.Collectors;\n import java.util.function.Function;\n-import java.util.Objects;\n import java.util.Comparator;\n import java.util.Collection;\n import java.nio.file.DirectoryStream;\n import java.nio.file.attribute.AclFileAttributeView;\n import java.nio.file.attribute.AclEntry;\n import org.apache.commons.io.IOUtils;\n import java.util.Iterator;\n@@ -39,14 +38,21 @@\n public final class PathUtils\n {\n     public static final DeleteOption[] EMPTY_DELETE_OPTION_ARRAY;\n     public static final FileVisitOption[] EMPTY_FILE_VISIT_OPTION_ARRAY;\n     public static final LinkOption[] EMPTY_LINK_OPTION_ARRAY;\n     public static final OpenOption[] EMPTY_OPEN_OPTION_ARRAY;\n     \n+    static {\n+        EMPTY_DELETE_OPTION_ARRAY = new DeleteOption[0];\n+        EMPTY_FILE_VISIT_OPTION_ARRAY = new FileVisitOption[0];\n+        EMPTY_LINK_OPTION_ARRAY = new LinkOption[0];\n+        EMPTY_OPEN_OPTION_ARRAY = new OpenOption[0];\n+    }\n+    \n     private static AccumulatorPathVisitor accumulate(final Path directory, final int maxDepth, final FileVisitOption[] fileVisitOptions) throws IOException {\n         return visitFileTree(AccumulatorPathVisitor.withLongCounters(), directory, toFileVisitOptionSet(fileVisitOptions), maxDepth);\n     }\n     \n     public static Counters.PathCounters cleanDirectory(final Path directory) throws IOException {\n         return cleanDirectory(directory, PathUtils.EMPTY_DELETE_OPTION_ARRAY);\n     }\n@@ -56,28 +62,70 @@\n     }\n     \n     public static Counters.PathCounters copyDirectory(final Path sourceDirectory, final Path targetDirectory, final CopyOption... copyOptions) throws IOException {\n         return ((CopyDirectoryVisitor)visitFileTree(new CopyDirectoryVisitor(Counters.longPathCounters(), sourceDirectory, targetDirectory, copyOptions), sourceDirectory)).getPathCounters();\n     }\n     \n     public static Path copyFile(final URL sourceFile, final Path targetFile, final CopyOption... copyOptions) throws IOException {\n-        try (final InputStream inputStream = sourceFile.openStream()) {\n-            Files.copy(inputStream, targetFile, copyOptions);\n-            return targetFile;\n+        Throwable t = null;\n+        try {\n+            final InputStream inputStream = sourceFile.openStream();\n+            try {\n+                Files.copy(inputStream, targetFile, copyOptions);\n+                return targetFile;\n+            }\n+            finally {\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static Path copyFileToDirectory(final Path sourceFile, final Path targetDirectory, final CopyOption... copyOptions) throws IOException {\n         return Files.copy(sourceFile, targetDirectory.resolve(sourceFile.getFileName()), copyOptions);\n     }\n     \n     public static Path copyFileToDirectory(final URL sourceFile, final Path targetDirectory, final CopyOption... copyOptions) throws IOException {\n-        try (final InputStream inputStream = sourceFile.openStream()) {\n-            Files.copy(inputStream, targetDirectory.resolve(sourceFile.getFile()), copyOptions);\n-            return targetDirectory;\n+        Throwable t = null;\n+        try {\n+            final InputStream inputStream = sourceFile.openStream();\n+            try {\n+                Files.copy(inputStream, targetDirectory.resolve(sourceFile.getFile()), copyOptions);\n+                return targetDirectory;\n+            }\n+            finally {\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static Counters.PathCounters countDirectory(final Path directory) throws IOException {\n         return ((CountingPathVisitor)visitFileTree(new CountingPathVisitor(Counters.longPathCounters()), directory)).getPathCounters();\n     }\n     \n@@ -140,15 +188,15 @@\n         }\n         if (path1 == null ^ path2 == null) {\n             return false;\n         }\n         if (!Files.exists(path1, new LinkOption[0]) && !Files.exists(path2, new LinkOption[0])) {\n             return true;\n         }\n-        final PathUtils.RelativeSortedPaths relativeSortedPaths = new PathUtils.RelativeSortedPaths(path1, path2, Integer.MAX_VALUE, linkOptions, fileVisitOption, (PathUtils.PathUtils$1)null);\n+        final PathUtils.RelativeSortedPaths relativeSortedPaths = new PathUtils.RelativeSortedPaths(path1, path2, Integer.MAX_VALUE, linkOptions, fileVisitOption, (PathUtils.RelativeSortedPaths)null);\n         if (!relativeSortedPaths.equals) {\n             return false;\n         }\n         final List<Path> fileList1 = relativeSortedPaths.relativeFileList1;\n         final List<Path> fileList2 = relativeSortedPaths.relativeFileList2;\n         for (final Path path3 : fileList1) {\n             final int binarySearch = Collections.binarySearch(fileList2, path3);\n@@ -163,15 +211,15 @@\n     }\n     \n     public static boolean directoryContentEquals(final Path path1, final Path path2) throws IOException {\n         return directoryContentEquals(path1, path2, Integer.MAX_VALUE, PathUtils.EMPTY_LINK_OPTION_ARRAY, PathUtils.EMPTY_FILE_VISIT_OPTION_ARRAY);\n     }\n     \n     public static boolean directoryContentEquals(final Path path1, final Path path2, final int maxDepth, final LinkOption[] linkOptions, final FileVisitOption[] fileVisitOptions) throws IOException {\n-        return new PathUtils.RelativeSortedPaths(path1, path2, maxDepth, linkOptions, fileVisitOptions, (PathUtils.PathUtils$1)null).equals;\n+        return new PathUtils.RelativeSortedPaths(path1, path2, maxDepth, linkOptions, fileVisitOptions, (PathUtils.RelativeSortedPaths)null).equals;\n     }\n     \n     public static boolean fileContentEquals(final Path path1, final Path path2) throws IOException {\n         return fileContentEquals(path1, path2, PathUtils.EMPTY_LINK_OPTION_ARRAY, PathUtils.EMPTY_OPEN_OPTION_ARRAY);\n     }\n     \n     public static boolean fileContentEquals(final Path path1, final Path path2, final LinkOption[] linkOptions, final OpenOption[] openOptions) throws IOException {\n@@ -198,50 +246,108 @@\n         }\n         if (Files.size(nPath1) != Files.size(nPath2)) {\n             return false;\n         }\n         if (path1.equals(path2)) {\n             return true;\n         }\n-        try (final InputStream inputStream1 = Files.newInputStream(nPath1, openOptions);\n-             final InputStream inputStream2 = Files.newInputStream(nPath2, openOptions)) {\n-            return IOUtils.contentEquals(inputStream1, inputStream2);\n+        Throwable t = null;\n+        try {\n+            final InputStream inputStream1 = Files.newInputStream(nPath1, openOptions);\n+            try {\n+                final InputStream inputStream2 = Files.newInputStream(nPath2, openOptions);\n+                try {\n+                    final boolean contentEquals = IOUtils.contentEquals(inputStream1, inputStream2);\n+                    if (inputStream2 != null) {\n+                        inputStream2.close();\n+                    }\n+                    return contentEquals;\n+                }\n+                finally {\n+                    if (inputStream2 != null) {\n+                        inputStream2.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n+                if (inputStream1 != null) {\n+                    inputStream1.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception2;\n+                t = exception2;\n+            }\n+            else {\n+                final Throwable exception2;\n+                if (t != exception2) {\n+                    t.addSuppressed(exception2);\n+                }\n+            }\n         }\n     }\n     \n     public static List<AclEntry> getAclEntryList(final Path sourcePath) throws IOException {\n         final AclFileAttributeView fileAttributeView = (AclFileAttributeView)Files.getFileAttributeView(sourcePath, AclFileAttributeView.class, new LinkOption[0]);\n         return (fileAttributeView == null) ? null : fileAttributeView.getAcl();\n     }\n     \n     public static boolean isEmpty(final Path path) throws IOException {\n         return Files.isDirectory(path, new LinkOption[0]) ? isEmptyDirectory(path) : isEmptyFile(path);\n     }\n     \n     public static boolean isEmptyDirectory(final Path directory) throws IOException {\n-        try (final DirectoryStream<Path> directoryStream = Files.newDirectoryStream(directory)) {\n-            if (directoryStream.iterator().hasNext()) {\n-                final boolean b = false;\n+        Throwable t = null;\n+        try {\n+            final DirectoryStream<Path> directoryStream = Files.newDirectoryStream(directory);\n+            try {\n+                if (directoryStream.iterator().hasNext()) {\n+                    return false;\n+                }\n+                return true;\n+            }\n+            finally {\n                 if (directoryStream != null) {\n                     directoryStream.close();\n                 }\n-                return b;\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n         return true;\n     }\n     \n     public static boolean isEmptyFile(final Path file) throws IOException {\n         return Files.size(file) <= 0L;\n     }\n     \n     static List<Path> relativize(final Collection<Path> collection, final Path parent, final boolean sort, final Comparator<? super Path> comparator) {\n-        final Stream<Path> stream2 = collection.stream();\n-        Objects.requireNonNull(parent);\n-        Stream<Path> stream = (Stream<Path>)stream2.map((Function<? super Path, ?>)parent::relativize);\n+        Stream<Path> stream = collection.stream().map((Function<? super Path, ? extends Path>)parent::relativize);\n         if (sort) {\n             stream = ((comparator == null) ? stream.sorted() : stream.sorted(comparator));\n         }\n         return stream.collect((Collector<? super Path, ?, List<Path>>)Collectors.toList());\n     }\n     \n     public static Path setReadOnly(final Path path, final boolean readOnly, final LinkOption... options) throws IOException {\n@@ -282,15 +388,8 @@\n     \n     public static <T extends FileVisitor<? super Path>> T visitFileTree(final T visitor, final URI uri) throws IOException {\n         return visitFileTree(visitor, Paths.get(uri));\n     }\n     \n     private PathUtils() {\n     }\n-    \n-    static {\n-        EMPTY_DELETE_OPTION_ARRAY = new DeleteOption[0];\n-        EMPTY_FILE_VISIT_OPTION_ARRAY = new FileVisitOption[0];\n-        EMPTY_LINK_OPTION_ARRAY = new LinkOption[0];\n-        EMPTY_OPEN_OPTION_ARRAY = new OpenOption[0];\n-    }\n }\n"}]}
