{"diffoscope-json-version": 1, "source1": "first/LZWInputStream.class", "source2": "second/LZWInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,218 +1,218 @@\n-  SHA-256 checksum 12bcde7279b24f42a28efbd265322eaec8c3ab40a039030c0943218258382829\n+  SHA-256 checksum 116b5425b7da98fd1affe0c79fbc1d405d9da6ec9b9e26d06775695cfac82955\n   Compiled from \"LZWInputStream.java\"\n public abstract class org.apache.commons.compress.compressors.lzw.LZWInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 53\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n-  this_class: #4                          // org/apache/commons/compress/compressors/lzw/LZWInputStream\n-  super_class: #39                        // org/apache/commons/compress/compressors/CompressorInputStream\n+  this_class: #8                          // org/apache/commons/compress/compressors/lzw/LZWInputStream\n+  super_class: #2                         // org/apache/commons/compress/compressors/CompressorInputStream\n   interfaces: 1, fields: 13, methods: 26, attributes: 3\n Constant pool:\n-    #1 = Methodref          #39.#134      // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-    #2 = Fieldref           #4.#135       // org/apache/commons/compress/compressors/lzw/LZWInputStream.oneByte:[B\n-    #3 = Fieldref           #4.#136       // org/apache/commons/compress/compressors/lzw/LZWInputStream.clearCode:I\n-    #4 = Class              #137          // org/apache/commons/compress/compressors/lzw/LZWInputStream\n-    #5 = Fieldref           #4.#138       // org/apache/commons/compress/compressors/lzw/LZWInputStream.codeSize:I\n-    #6 = Fieldref           #4.#139       // org/apache/commons/compress/compressors/lzw/LZWInputStream.previousCode:I\n-    #7 = Class              #140          // org/apache/commons/compress/utils/BitInputStream\n-    #8 = Methodref          #7.#141       // org/apache/commons/compress/utils/BitInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-    #9 = Fieldref           #4.#142       // org/apache/commons/compress/compressors/lzw/LZWInputStream.in:Lorg/apache/commons/compress/utils/BitInputStream;\n-   #10 = Methodref          #7.#143       // org/apache/commons/compress/utils/BitInputStream.close:()V\n-   #11 = Methodref          #4.#144       // org/apache/commons/compress/compressors/lzw/LZWInputStream.read:([B)I\n-   #12 = Methodref          #4.#145       // org/apache/commons/compress/compressors/lzw/LZWInputStream.readFromStack:([BII)I\n-   #13 = Methodref          #4.#146       // org/apache/commons/compress/compressors/lzw/LZWInputStream.decompressNextSymbol:()I\n-   #14 = Methodref          #4.#147       // org/apache/commons/compress/compressors/lzw/LZWInputStream.count:(I)V\n-   #15 = Methodref          #7.#148       // org/apache/commons/compress/utils/BitInputStream.getBytesRead:()J\n-   #16 = Class              #149          // java/lang/IllegalArgumentException\n-   #17 = InvokeDynamic      #0:#153       // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n-   #18 = Methodref          #16.#154      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #19 = Long               6l\n-   #21 = Class              #155          // org/apache/commons/compress/MemoryLimitException\n-   #22 = Methodref          #21.#156      // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n-   #23 = Methodref          #4.#157       // org/apache/commons/compress/compressors/lzw/LZWInputStream.initializeTables:(I)V\n-   #24 = Fieldref           #4.#158       // org/apache/commons/compress/compressors/lzw/LZWInputStream.prefixes:[I\n-   #25 = Fieldref           #4.#159       // org/apache/commons/compress/compressors/lzw/LZWInputStream.characters:[B\n-   #26 = Fieldref           #4.#160       // org/apache/commons/compress/compressors/lzw/LZWInputStream.outputStack:[B\n-   #27 = Fieldref           #4.#161       // org/apache/commons/compress/compressors/lzw/LZWInputStream.outputStackLocation:I\n-   #28 = String             #162          // Code size must not be bigger than 31\n-   #29 = Methodref          #7.#163       // org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n-   #30 = Fieldref           #4.#164       // org/apache/commons/compress/compressors/lzw/LZWInputStream.tableSize:I\n-   #31 = Class              #165          // java/io/IOException\n-   #32 = String             #166          // The first code can\\'t be a reference to its preceding code\n-   #33 = Methodref          #31.#154      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #34 = Fieldref           #4.#167       // org/apache/commons/compress/compressors/lzw/LZWInputStream.previousCodeFirstChar:B\n-   #35 = Methodref          #4.#168       // org/apache/commons/compress/compressors/lzw/LZWInputStream.addEntry:(IB)I\n-   #36 = Methodref          #169.#170     // java/lang/Math.min:(II)I\n-   #37 = Methodref          #171.#172     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #38 = Methodref          #4.#173       // org/apache/commons/compress/compressors/lzw/LZWInputStream.setCodeSize:(I)V\n-   #39 = Class              #174          // org/apache/commons/compress/compressors/CompressorInputStream\n-   #40 = Class              #175          // org/apache/commons/compress/utils/InputStreamStatistics\n-   #41 = Utf8               DEFAULT_CODE_SIZE\n-   #42 = Utf8               I\n-   #43 = Utf8               ConstantValue\n-   #44 = Integer            9\n-   #45 = Utf8               UNUSED_PREFIX\n-   #46 = Integer            -1\n-   #47 = Utf8               oneByte\n-   #48 = Utf8               [B\n-   #49 = Utf8               in\n-   #50 = Utf8               Lorg/apache/commons/compress/utils/BitInputStream;\n-   #51 = Utf8               clearCode\n-   #52 = Utf8               codeSize\n-   #53 = Utf8               previousCodeFirstChar\n-   #54 = Utf8               B\n-   #55 = Utf8               previousCode\n-   #56 = Utf8               tableSize\n-   #57 = Utf8               prefixes\n-   #58 = Utf8               [I\n-   #59 = Utf8               characters\n-   #60 = Utf8               outputStack\n-   #61 = Utf8               outputStackLocation\n-   #62 = Utf8               <init>\n-   #63 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-   #64 = Utf8               Code\n-   #65 = Utf8               LineNumberTable\n-   #66 = Utf8               LocalVariableTable\n-   #67 = Utf8               this\n-   #68 = Utf8               Lorg/apache/commons/compress/compressors/lzw/LZWInputStream;\n-   #69 = Utf8               inputStream\n-   #70 = Utf8               Ljava/io/InputStream;\n-   #71 = Utf8               byteOrder\n-   #72 = Utf8               Ljava/nio/ByteOrder;\n-   #73 = Utf8               close\n-   #74 = Utf8               ()V\n-   #75 = Utf8               Exceptions\n-   #76 = Utf8               read\n-   #77 = Utf8               ()I\n-   #78 = Utf8               ret\n-   #79 = Utf8               StackMapTable\n-   #80 = Utf8               ([BII)I\n-   #81 = Utf8               result\n-   #82 = Utf8               b\n-   #83 = Utf8               off\n-   #84 = Utf8               len\n-   #85 = Utf8               bytesRead\n-   #86 = Utf8               getCompressedCount\n-   #87 = Utf8               ()J\n-   #88 = Utf8               decompressNextSymbol\n-   #89 = Utf8               addEntry\n-   #90 = Utf8               (IB)I\n-   #91 = Utf8               setClearCode\n-   #92 = Utf8               (I)V\n-   #93 = Utf8               initializeTables\n-   #94 = Utf8               (II)V\n-   #95 = Utf8               maxTableSize\n-   #96 = Utf8               memoryUsageInBytes\n-   #97 = Utf8               J\n-   #98 = Utf8               memoryUsageInKb\n-   #99 = Utf8               maxCodeSize\n-  #100 = Utf8               memoryLimitInKb\n-  #101 = Utf8               i\n-  #102 = Utf8               max\n-  #103 = Utf8               readNextCode\n-  #104 = Utf8               (IBI)I\n-  #105 = Utf8               character\n-  #106 = Utf8               addRepeatOfPreviousCode\n-  #107 = Utf8               expandCodeToOutputStack\n-  #108 = Utf8               (IZ)I\n-  #109 = Utf8               entry\n-  #110 = Utf8               code\n-  #111 = Utf8               addedUnfinishedEntry\n-  #112 = Utf8               Z\n-  #113 = Utf8               readFromStack\n-  #114 = Utf8               maxLength\n-  #115 = Utf8               remainingInStack\n-  #116 = Utf8               getCodeSize\n-  #117 = Utf8               resetCodeSize\n-  #118 = Utf8               setCodeSize\n-  #119 = Utf8               cs\n-  #120 = Utf8               incrementCodeSize\n-  #121 = Utf8               resetPreviousCode\n-  #122 = Utf8               getPrefix\n-  #123 = Utf8               (I)I\n-  #124 = Utf8               offset\n-  #125 = Utf8               setPrefix\n-  #126 = Utf8               value\n-  #127 = Utf8               getPrefixesLength\n-  #128 = Utf8               getClearCode\n-  #129 = Utf8               getTableSize\n-  #130 = Utf8               setTableSize\n-  #131 = Utf8               newSize\n-  #132 = Utf8               SourceFile\n-  #133 = Utf8               LZWInputStream.java\n-  #134 = NameAndType        #62:#74       // \"<init>\":()V\n-  #135 = NameAndType        #47:#48       // oneByte:[B\n-  #136 = NameAndType        #51:#42       // clearCode:I\n-  #137 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n-  #138 = NameAndType        #52:#42       // codeSize:I\n-  #139 = NameAndType        #55:#42       // previousCode:I\n-  #140 = Utf8               org/apache/commons/compress/utils/BitInputStream\n-  #141 = NameAndType        #62:#63       // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-  #142 = NameAndType        #49:#50       // in:Lorg/apache/commons/compress/utils/BitInputStream;\n-  #143 = NameAndType        #73:#74       // close:()V\n-  #144 = NameAndType        #76:#176      // read:([B)I\n-  #145 = NameAndType        #113:#80      // readFromStack:([BII)I\n-  #146 = NameAndType        #88:#77       // decompressNextSymbol:()I\n-  #147 = NameAndType        #177:#92      // count:(I)V\n-  #148 = NameAndType        #178:#87      // getBytesRead:()J\n-  #149 = Utf8               java/lang/IllegalArgumentException\n-  #150 = Utf8               BootstrapMethods\n-  #151 = MethodHandle       6:#179        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #152 = String             #180          // maxCodeSize is \\u0001, must be bigger than 0\n-  #153 = NameAndType        #181:#182     // makeConcatWithConstants:(I)Ljava/lang/String;\n-  #154 = NameAndType        #62:#183      // \"<init>\":(Ljava/lang/String;)V\n-  #155 = Utf8               org/apache/commons/compress/MemoryLimitException\n-  #156 = NameAndType        #62:#184      // \"<init>\":(JI)V\n-  #157 = NameAndType        #93:#92       // initializeTables:(I)V\n-  #158 = NameAndType        #57:#58       // prefixes:[I\n-  #159 = NameAndType        #59:#48       // characters:[B\n-  #160 = NameAndType        #60:#48       // outputStack:[B\n-  #161 = NameAndType        #61:#42       // outputStackLocation:I\n-  #162 = Utf8               Code size must not be bigger than 31\n-  #163 = NameAndType        #185:#186     // readBits:(I)J\n-  #164 = NameAndType        #56:#42       // tableSize:I\n-  #165 = Utf8               java/io/IOException\n-  #166 = Utf8               The first code can\\'t be a reference to its preceding code\n-  #167 = NameAndType        #53:#54       // previousCodeFirstChar:B\n-  #168 = NameAndType        #89:#90       // addEntry:(IB)I\n-  #169 = Class              #187          // java/lang/Math\n-  #170 = NameAndType        #188:#189     // min:(II)I\n-  #171 = Class              #190          // java/lang/System\n-  #172 = NameAndType        #191:#192     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #173 = NameAndType        #118:#92      // setCodeSize:(I)V\n-  #174 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-  #175 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #176 = Utf8               ([B)I\n-  #177 = Utf8               count\n-  #178 = Utf8               getBytesRead\n-  #179 = Methodref          #193.#194     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #180 = Utf8               maxCodeSize is \\u0001, must be bigger than 0\n-  #181 = Utf8               makeConcatWithConstants\n-  #182 = Utf8               (I)Ljava/lang/String;\n-  #183 = Utf8               (Ljava/lang/String;)V\n-  #184 = Utf8               (JI)V\n-  #185 = Utf8               readBits\n-  #186 = Utf8               (I)J\n-  #187 = Utf8               java/lang/Math\n-  #188 = Utf8               min\n-  #189 = Utf8               (II)I\n-  #190 = Utf8               java/lang/System\n-  #191 = Utf8               arraycopy\n-  #192 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #193 = Class              #195          // java/lang/invoke/StringConcatFactory\n-  #194 = NameAndType        #181:#199     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #195 = Utf8               java/lang/invoke/StringConcatFactory\n-  #196 = Class              #201          // java/lang/invoke/MethodHandles$Lookup\n-  #197 = Utf8               Lookup\n-  #198 = Utf8               InnerClasses\n-  #199 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #200 = Class              #202          // java/lang/invoke/MethodHandles\n-  #201 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #202 = Utf8               java/lang/invoke/MethodHandles\n+    #1 = Methodref          #2.#3         // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+    #2 = Class              #4            // org/apache/commons/compress/compressors/CompressorInputStream\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Fieldref           #8.#9         // org/apache/commons/compress/compressors/lzw/LZWInputStream.oneByte:[B\n+    #8 = Class              #10           // org/apache/commons/compress/compressors/lzw/LZWInputStream\n+    #9 = NameAndType        #11:#12       // oneByte:[B\n+   #10 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n+   #11 = Utf8               oneByte\n+   #12 = Utf8               [B\n+   #13 = Fieldref           #8.#14        // org/apache/commons/compress/compressors/lzw/LZWInputStream.clearCode:I\n+   #14 = NameAndType        #15:#16       // clearCode:I\n+   #15 = Utf8               clearCode\n+   #16 = Utf8               I\n+   #17 = Fieldref           #8.#18        // org/apache/commons/compress/compressors/lzw/LZWInputStream.codeSize:I\n+   #18 = NameAndType        #19:#16       // codeSize:I\n+   #19 = Utf8               codeSize\n+   #20 = Fieldref           #8.#21        // org/apache/commons/compress/compressors/lzw/LZWInputStream.previousCode:I\n+   #21 = NameAndType        #22:#16       // previousCode:I\n+   #22 = Utf8               previousCode\n+   #23 = Class              #24           // org/apache/commons/compress/utils/BitInputStream\n+   #24 = Utf8               org/apache/commons/compress/utils/BitInputStream\n+   #25 = Methodref          #23.#26       // org/apache/commons/compress/utils/BitInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #26 = NameAndType        #5:#27        // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #27 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #28 = Fieldref           #8.#29        // org/apache/commons/compress/compressors/lzw/LZWInputStream.in:Lorg/apache/commons/compress/utils/BitInputStream;\n+   #29 = NameAndType        #30:#31       // in:Lorg/apache/commons/compress/utils/BitInputStream;\n+   #30 = Utf8               in\n+   #31 = Utf8               Lorg/apache/commons/compress/utils/BitInputStream;\n+   #32 = Methodref          #23.#33       // org/apache/commons/compress/utils/BitInputStream.close:()V\n+   #33 = NameAndType        #34:#6        // close:()V\n+   #34 = Utf8               close\n+   #35 = Methodref          #8.#36        // org/apache/commons/compress/compressors/lzw/LZWInputStream.read:([B)I\n+   #36 = NameAndType        #37:#38       // read:([B)I\n+   #37 = Utf8               read\n+   #38 = Utf8               ([B)I\n+   #39 = Methodref          #8.#40        // org/apache/commons/compress/compressors/lzw/LZWInputStream.readFromStack:([BII)I\n+   #40 = NameAndType        #41:#42       // readFromStack:([BII)I\n+   #41 = Utf8               readFromStack\n+   #42 = Utf8               ([BII)I\n+   #43 = Methodref          #8.#44        // org/apache/commons/compress/compressors/lzw/LZWInputStream.decompressNextSymbol:()I\n+   #44 = NameAndType        #45:#46       // decompressNextSymbol:()I\n+   #45 = Utf8               decompressNextSymbol\n+   #46 = Utf8               ()I\n+   #47 = Methodref          #8.#48        // org/apache/commons/compress/compressors/lzw/LZWInputStream.count:(I)V\n+   #48 = NameAndType        #49:#50       // count:(I)V\n+   #49 = Utf8               count\n+   #50 = Utf8               (I)V\n+   #51 = Methodref          #23.#52       // org/apache/commons/compress/utils/BitInputStream.getBytesRead:()J\n+   #52 = NameAndType        #53:#54       // getBytesRead:()J\n+   #53 = Utf8               getBytesRead\n+   #54 = Utf8               ()J\n+   #55 = Class              #56           // java/lang/IllegalArgumentException\n+   #56 = Utf8               java/lang/IllegalArgumentException\n+   #57 = InvokeDynamic      #0:#58        // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+   #58 = NameAndType        #59:#60       // makeConcatWithConstants:(I)Ljava/lang/String;\n+   #59 = Utf8               makeConcatWithConstants\n+   #60 = Utf8               (I)Ljava/lang/String;\n+   #61 = Methodref          #55.#62       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #62 = NameAndType        #5:#63        // \"<init>\":(Ljava/lang/String;)V\n+   #63 = Utf8               (Ljava/lang/String;)V\n+   #64 = Long               6l\n+   #66 = Class              #67           // org/apache/commons/compress/MemoryLimitException\n+   #67 = Utf8               org/apache/commons/compress/MemoryLimitException\n+   #68 = Methodref          #66.#69       // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n+   #69 = NameAndType        #5:#70        // \"<init>\":(JI)V\n+   #70 = Utf8               (JI)V\n+   #71 = Methodref          #8.#72        // org/apache/commons/compress/compressors/lzw/LZWInputStream.initializeTables:(I)V\n+   #72 = NameAndType        #73:#50       // initializeTables:(I)V\n+   #73 = Utf8               initializeTables\n+   #74 = Fieldref           #8.#75        // org/apache/commons/compress/compressors/lzw/LZWInputStream.prefixes:[I\n+   #75 = NameAndType        #76:#77       // prefixes:[I\n+   #76 = Utf8               prefixes\n+   #77 = Utf8               [I\n+   #78 = Fieldref           #8.#79        // org/apache/commons/compress/compressors/lzw/LZWInputStream.characters:[B\n+   #79 = NameAndType        #80:#12       // characters:[B\n+   #80 = Utf8               characters\n+   #81 = Fieldref           #8.#82        // org/apache/commons/compress/compressors/lzw/LZWInputStream.outputStack:[B\n+   #82 = NameAndType        #83:#12       // outputStack:[B\n+   #83 = Utf8               outputStack\n+   #84 = Fieldref           #8.#85        // org/apache/commons/compress/compressors/lzw/LZWInputStream.outputStackLocation:I\n+   #85 = NameAndType        #86:#16       // outputStackLocation:I\n+   #86 = Utf8               outputStackLocation\n+   #87 = String             #88           // Code size must not be bigger than 31\n+   #88 = Utf8               Code size must not be bigger than 31\n+   #89 = Methodref          #23.#90       // org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n+   #90 = NameAndType        #91:#92       // readBits:(I)J\n+   #91 = Utf8               readBits\n+   #92 = Utf8               (I)J\n+   #93 = Fieldref           #8.#94        // org/apache/commons/compress/compressors/lzw/LZWInputStream.tableSize:I\n+   #94 = NameAndType        #95:#16       // tableSize:I\n+   #95 = Utf8               tableSize\n+   #96 = Class              #97           // java/io/IOException\n+   #97 = Utf8               java/io/IOException\n+   #98 = String             #99           // The first code can\\'t be a reference to its preceding code\n+   #99 = Utf8               The first code can\\'t be a reference to its preceding code\n+  #100 = Methodref          #96.#62       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #101 = Fieldref           #8.#102       // org/apache/commons/compress/compressors/lzw/LZWInputStream.previousCodeFirstChar:B\n+  #102 = NameAndType        #103:#104     // previousCodeFirstChar:B\n+  #103 = Utf8               previousCodeFirstChar\n+  #104 = Utf8               B\n+  #105 = Methodref          #8.#106       // org/apache/commons/compress/compressors/lzw/LZWInputStream.addEntry:(IB)I\n+  #106 = NameAndType        #107:#108     // addEntry:(IB)I\n+  #107 = Utf8               addEntry\n+  #108 = Utf8               (IB)I\n+  #109 = Methodref          #110.#111     // java/lang/Math.min:(II)I\n+  #110 = Class              #112          // java/lang/Math\n+  #111 = NameAndType        #113:#114     // min:(II)I\n+  #112 = Utf8               java/lang/Math\n+  #113 = Utf8               min\n+  #114 = Utf8               (II)I\n+  #115 = Methodref          #116.#117     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #116 = Class              #118          // java/lang/System\n+  #117 = NameAndType        #119:#120     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #118 = Utf8               java/lang/System\n+  #119 = Utf8               arraycopy\n+  #120 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #121 = Methodref          #8.#122       // org/apache/commons/compress/compressors/lzw/LZWInputStream.setCodeSize:(I)V\n+  #122 = NameAndType        #123:#50      // setCodeSize:(I)V\n+  #123 = Utf8               setCodeSize\n+  #124 = Class              #125          // org/apache/commons/compress/utils/InputStreamStatistics\n+  #125 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+  #126 = Utf8               DEFAULT_CODE_SIZE\n+  #127 = Utf8               ConstantValue\n+  #128 = Integer            9\n+  #129 = Utf8               UNUSED_PREFIX\n+  #130 = Integer            -1\n+  #131 = Utf8               Code\n+  #132 = Utf8               LineNumberTable\n+  #133 = Utf8               LocalVariableTable\n+  #134 = Utf8               this\n+  #135 = Utf8               Lorg/apache/commons/compress/compressors/lzw/LZWInputStream;\n+  #136 = Utf8               inputStream\n+  #137 = Utf8               Ljava/io/InputStream;\n+  #138 = Utf8               byteOrder\n+  #139 = Utf8               Ljava/nio/ByteOrder;\n+  #140 = Utf8               Exceptions\n+  #141 = Utf8               ret\n+  #142 = Utf8               StackMapTable\n+  #143 = Utf8               result\n+  #144 = Utf8               b\n+  #145 = Utf8               off\n+  #146 = Utf8               len\n+  #147 = Utf8               bytesRead\n+  #148 = Utf8               getCompressedCount\n+  #149 = Utf8               setClearCode\n+  #150 = Utf8               (II)V\n+  #151 = Utf8               maxTableSize\n+  #152 = Utf8               memoryUsageInBytes\n+  #153 = Utf8               J\n+  #154 = Utf8               memoryUsageInKb\n+  #155 = Utf8               maxCodeSize\n+  #156 = Utf8               memoryLimitInKb\n+  #157 = Utf8               i\n+  #158 = Utf8               max\n+  #159 = Utf8               readNextCode\n+  #160 = Utf8               (IBI)I\n+  #161 = Utf8               character\n+  #162 = Utf8               addRepeatOfPreviousCode\n+  #163 = Utf8               expandCodeToOutputStack\n+  #164 = Utf8               (IZ)I\n+  #165 = Utf8               entry\n+  #166 = Utf8               code\n+  #167 = Utf8               addedUnfinishedEntry\n+  #168 = Utf8               Z\n+  #169 = Utf8               maxLength\n+  #170 = Utf8               remainingInStack\n+  #171 = Utf8               getCodeSize\n+  #172 = Utf8               resetCodeSize\n+  #173 = Utf8               cs\n+  #174 = Utf8               incrementCodeSize\n+  #175 = Utf8               resetPreviousCode\n+  #176 = Utf8               getPrefix\n+  #177 = Utf8               (I)I\n+  #178 = Utf8               offset\n+  #179 = Utf8               setPrefix\n+  #180 = Utf8               value\n+  #181 = Utf8               getPrefixesLength\n+  #182 = Utf8               getClearCode\n+  #183 = Utf8               getTableSize\n+  #184 = Utf8               setTableSize\n+  #185 = Utf8               newSize\n+  #186 = Utf8               SourceFile\n+  #187 = Utf8               LZWInputStream.java\n+  #188 = Utf8               BootstrapMethods\n+  #189 = MethodHandle       6:#190        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #190 = Methodref          #191.#192     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #191 = Class              #193          // java/lang/invoke/StringConcatFactory\n+  #192 = NameAndType        #59:#194      // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #193 = Utf8               java/lang/invoke/StringConcatFactory\n+  #194 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #195 = String             #196          // maxCodeSize is \\u0001, must be bigger than 0\n+  #196 = Utf8               maxCodeSize is \\u0001, must be bigger than 0\n+  #197 = Utf8               InnerClasses\n+  #198 = Class              #199          // java/lang/invoke/MethodHandles$Lookup\n+  #199 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #200 = Class              #201          // java/lang/invoke/MethodHandles\n+  #201 = Utf8               java/lang/invoke/MethodHandles\n+  #202 = Utf8               Lookup\n {\n   protected static final int DEFAULT_CODE_SIZE = 9;\n     descriptor: I\n     flags: (0x001c) ACC_PROTECTED, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 9\n \n   protected static final int UNUSED_PREFIX = -1;\n@@ -270,31 +270,31 @@\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n          1: invokespecial #1                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n          5: iconst_1\n          6: newarray       byte\n-         8: putfield      #2                  // Field oneByte:[B\n+         8: putfield      #7                  // Field oneByte:[B\n         11: aload_0\n         12: iconst_m1\n-        13: putfield      #3                  // Field clearCode:I\n+        13: putfield      #13                 // Field clearCode:I\n         16: aload_0\n         17: bipush        9\n-        19: putfield      #5                  // Field codeSize:I\n+        19: putfield      #17                 // Field codeSize:I\n         22: aload_0\n         23: iconst_m1\n-        24: putfield      #6                  // Field previousCode:I\n+        24: putfield      #20                 // Field previousCode:I\n         27: aload_0\n-        28: new           #7                  // class org/apache/commons/compress/utils/BitInputStream\n+        28: new           #23                 // class org/apache/commons/compress/utils/BitInputStream\n         31: dup\n         32: aload_1\n         33: aload_2\n-        34: invokespecial #8                  // Method org/apache/commons/compress/utils/BitInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-        37: putfield      #9                  // Field in:Lorg/apache/commons/compress/utils/BitInputStream;\n+        34: invokespecial #25                 // Method org/apache/commons/compress/utils/BitInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+        37: putfield      #28                 // Field in:Lorg/apache/commons/compress/utils/BitInputStream;\n         40: return\n       LineNumberTable:\n         line 55: 0\n         line 42: 4\n         line 45: 11\n         line 46: 16\n         line 48: 22\n@@ -308,16 +308,16 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #9                  // Field in:Lorg/apache/commons/compress/utils/BitInputStream;\n-         4: invokevirtual #10                 // Method org/apache/commons/compress/utils/BitInputStream.close:()V\n+         1: getfield      #28                 // Field in:Lorg/apache/commons/compress/utils/BitInputStream;\n+         4: invokevirtual #32                 // Method org/apache/commons/compress/utils/BitInputStream.close:()V\n          7: return\n       LineNumberTable:\n         line 61: 0\n         line 62: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/lzw/LZWInputStream;\n@@ -327,24 +327,24 @@\n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n          1: aload_0\n-         2: getfield      #2                  // Field oneByte:[B\n-         5: invokevirtual #11                 // Method read:([B)I\n+         2: getfield      #7                  // Field oneByte:[B\n+         5: invokevirtual #35                 // Method read:([B)I\n          8: istore_1\n          9: iload_1\n         10: ifge          15\n         13: iload_1\n         14: ireturn\n         15: sipush        255\n         18: aload_0\n-        19: getfield      #2                  // Field oneByte:[B\n+        19: getfield      #7                  // Field oneByte:[B\n         22: iconst_0\n         23: baload\n         24: iand\n         25: ireturn\n       LineNumberTable:\n         line 66: 0\n         line 67: 9\n@@ -370,50 +370,50 @@\n          1: ifne          6\n          4: iconst_0\n          5: ireturn\n          6: aload_0\n          7: aload_1\n          8: iload_2\n          9: iload_3\n-        10: invokespecial #12                 // Method readFromStack:([BII)I\n+        10: invokespecial #39                 // Method readFromStack:([BII)I\n         13: istore        4\n         15: iload_3\n         16: iload         4\n         18: isub\n         19: ifle          71\n         22: aload_0\n-        23: invokevirtual #13                 // Method decompressNextSymbol:()I\n+        23: invokevirtual #43                 // Method decompressNextSymbol:()I\n         26: istore        5\n         28: iload         5\n         30: ifge          50\n         33: iload         4\n         35: ifle          47\n         38: aload_0\n         39: iload         4\n-        41: invokevirtual #14                 // Method count:(I)V\n+        41: invokevirtual #47                 // Method count:(I)V\n         44: iload         4\n         46: ireturn\n         47: iload         5\n         49: ireturn\n         50: iload         4\n         52: aload_0\n         53: aload_1\n         54: iload_2\n         55: iload         4\n         57: iadd\n         58: iload_3\n         59: iload         4\n         61: isub\n-        62: invokespecial #12                 // Method readFromStack:([BII)I\n+        62: invokespecial #39                 // Method readFromStack:([BII)I\n         65: iadd\n         66: istore        4\n         68: goto          15\n         71: aload_0\n         72: iload         4\n-        74: invokevirtual #14                 // Method count:(I)V\n+        74: invokevirtual #47                 // Method count:(I)V\n         77: iload         4\n         79: ireturn\n       LineNumberTable:\n         line 75: 0\n         line 76: 4\n         line 78: 6\n         line 79: 15\n@@ -451,16 +451,16 @@\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #9                  // Field in:Lorg/apache/commons/compress/utils/BitInputStream;\n-         4: invokevirtual #15                 // Method org/apache/commons/compress/utils/BitInputStream.getBytesRead:()J\n+         1: getfield      #28                 // Field in:Lorg/apache/commons/compress/utils/BitInputStream;\n+         4: invokevirtual #51                 // Method org/apache/commons/compress/utils/BitInputStream.getBytesRead:()J\n          7: lreturn\n       LineNumberTable:\n         line 99: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/lzw/LZWInputStream;\n \n@@ -483,15 +483,15 @@\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: iconst_1\n          2: iload_1\n          3: iconst_1\n          4: isub\n          5: ishl\n-         6: putfield      #3                  // Field clearCode:I\n+         6: putfield      #13                 // Field clearCode:I\n          9: return\n       LineNumberTable:\n         line 124: 0\n         line 125: 9\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/compress/compressors/lzw/LZWInputStream;\n@@ -500,50 +500,50 @@\n   protected void initializeTables(int, int) throws org.apache.commons.compress.MemoryLimitException;\n     descriptor: (II)V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=5, locals=8, args_size=3\n          0: iload_1\n          1: ifgt          18\n-         4: new           #16                 // class java/lang/IllegalArgumentException\n+         4: new           #55                 // class java/lang/IllegalArgumentException\n          7: dup\n          8: iload_1\n-         9: invokedynamic #17,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n-        14: invokespecial #18                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+         9: invokedynamic #57,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+        14: invokespecial #61                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         17: athrow\n         18: iload_2\n         19: iconst_m1\n         20: if_icmple     61\n         23: iconst_1\n         24: iload_1\n         25: ishl\n         26: istore_3\n         27: iload_3\n         28: i2l\n-        29: ldc2_w        #19                 // long 6l\n+        29: ldc2_w        #64                 // long 6l\n         32: lmul\n         33: lstore        4\n         35: lload         4\n         37: bipush        10\n         39: lshr\n         40: lstore        6\n         42: lload         6\n         44: iload_2\n         45: i2l\n         46: lcmp\n         47: ifle          61\n-        50: new           #21                 // class org/apache/commons/compress/MemoryLimitException\n+        50: new           #66                 // class org/apache/commons/compress/MemoryLimitException\n         53: dup\n         54: lload         6\n         56: iload_2\n-        57: invokespecial #22                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n+        57: invokespecial #68                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n         60: athrow\n         61: aload_0\n         62: iload_1\n-        63: invokevirtual #23                 // Method initializeTables:(I)V\n+        63: invokevirtual #71                 // Method initializeTables:(I)V\n         66: return\n       LineNumberTable:\n         line 138: 0\n         line 139: 4\n         line 143: 18\n         line 144: 23\n         line 146: 27\n@@ -569,53 +569,53 @@\n   protected void initializeTables(int);\n     descriptor: (I)V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=3, locals=5, args_size=2\n          0: iload_1\n          1: ifgt          18\n-         4: new           #16                 // class java/lang/IllegalArgumentException\n+         4: new           #55                 // class java/lang/IllegalArgumentException\n          7: dup\n          8: iload_1\n-         9: invokedynamic #17,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n-        14: invokespecial #18                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+         9: invokedynamic #57,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+        14: invokespecial #61                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         17: athrow\n         18: iconst_1\n         19: iload_1\n         20: ishl\n         21: istore_2\n         22: aload_0\n         23: iload_2\n         24: newarray       int\n-        26: putfield      #24                 // Field prefixes:[I\n+        26: putfield      #74                 // Field prefixes:[I\n         29: aload_0\n         30: iload_2\n         31: newarray       byte\n-        33: putfield      #25                 // Field characters:[B\n+        33: putfield      #78                 // Field characters:[B\n         36: aload_0\n         37: iload_2\n         38: newarray       byte\n-        40: putfield      #26                 // Field outputStack:[B\n+        40: putfield      #81                 // Field outputStack:[B\n         43: aload_0\n         44: iload_2\n-        45: putfield      #27                 // Field outputStackLocation:I\n+        45: putfield      #84                 // Field outputStackLocation:I\n         48: sipush        256\n         51: istore_3\n         52: iconst_0\n         53: istore        4\n         55: iload         4\n         57: sipush        256\n         60: if_icmpge     87\n         63: aload_0\n-        64: getfield      #24                 // Field prefixes:[I\n+        64: getfield      #74                 // Field prefixes:[I\n         67: iload         4\n         69: iconst_m1\n         70: iastore\n         71: aload_0\n-        72: getfield      #25                 // Field characters:[B\n+        72: getfield      #78                 // Field characters:[B\n         75: iload         4\n         77: iload         4\n         79: i2b\n         80: bastore\n         81: iinc          4, 1\n         84: goto          55\n         87: return\n@@ -650,27 +650,27 @@\n \n   protected int readNextCode() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field codeSize:I\n+         1: getfield      #17                 // Field codeSize:I\n          4: bipush        31\n          6: if_icmple     19\n-         9: new           #16                 // class java/lang/IllegalArgumentException\n+         9: new           #55                 // class java/lang/IllegalArgumentException\n         12: dup\n-        13: ldc           #28                 // String Code size must not be bigger than 31\n-        15: invokespecial #18                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        13: ldc           #87                 // String Code size must not be bigger than 31\n+        15: invokespecial #61                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         18: athrow\n         19: aload_0\n-        20: getfield      #9                  // Field in:Lorg/apache/commons/compress/utils/BitInputStream;\n+        20: getfield      #28                 // Field in:Lorg/apache/commons/compress/utils/BitInputStream;\n         23: aload_0\n-        24: getfield      #5                  // Field codeSize:I\n-        27: invokevirtual #29                 // Method org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n+        24: getfield      #17                 // Field codeSize:I\n+        27: invokevirtual #89                 // Method org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n         30: l2i\n         31: ireturn\n       LineNumberTable:\n         line 184: 0\n         line 185: 9\n         line 187: 19\n       LocalVariableTable:\n@@ -683,36 +683,36 @@\n \n   protected int addEntry(int, byte, int);\n     descriptor: (IBI)I\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n-         1: getfield      #30                 // Field tableSize:I\n+         1: getfield      #93                 // Field tableSize:I\n          4: iload_3\n          5: if_icmpge     40\n          8: aload_0\n-         9: getfield      #24                 // Field prefixes:[I\n+         9: getfield      #74                 // Field prefixes:[I\n         12: aload_0\n-        13: getfield      #30                 // Field tableSize:I\n+        13: getfield      #93                 // Field tableSize:I\n         16: iload_1\n         17: iastore\n         18: aload_0\n-        19: getfield      #25                 // Field characters:[B\n+        19: getfield      #78                 // Field characters:[B\n         22: aload_0\n-        23: getfield      #30                 // Field tableSize:I\n+        23: getfield      #93                 // Field tableSize:I\n         26: iload_2\n         27: bastore\n         28: aload_0\n         29: dup\n-        30: getfield      #30                 // Field tableSize:I\n+        30: getfield      #93                 // Field tableSize:I\n         33: dup_x1\n         34: iconst_1\n         35: iadd\n-        36: putfield      #30                 // Field tableSize:I\n+        36: putfield      #93                 // Field tableSize:I\n         39: ireturn\n         40: iconst_m1\n         41: ireturn\n       LineNumberTable:\n         line 199: 0\n         line 200: 8\n         line 201: 18\n@@ -729,28 +729,28 @@\n \n   protected int addRepeatOfPreviousCode() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field previousCode:I\n+         1: getfield      #20                 // Field previousCode:I\n          4: iconst_m1\n          5: if_icmpne     18\n-         8: new           #31                 // class java/io/IOException\n+         8: new           #96                 // class java/io/IOException\n         11: dup\n-        12: ldc           #32                 // String The first code can\\'t be a reference to its preceding code\n-        14: invokespecial #33                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        12: ldc           #98                 // String The first code can\\'t be a reference to its preceding code\n+        14: invokespecial #100                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         17: athrow\n         18: aload_0\n         19: aload_0\n-        20: getfield      #6                  // Field previousCode:I\n+        20: getfield      #20                 // Field previousCode:I\n         23: aload_0\n-        24: getfield      #34                 // Field previousCodeFirstChar:B\n-        27: invokevirtual #35                 // Method addEntry:(IB)I\n+        24: getfield      #101                // Field previousCodeFirstChar:B\n+        27: invokevirtual #105                // Method addEntry:(IB)I\n         30: ireturn\n       LineNumberTable:\n         line 214: 0\n         line 216: 8\n         line 218: 18\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -766,61 +766,61 @@\n     Code:\n       stack=4, locals=4, args_size=3\n          0: iload_1\n          1: istore_3\n          2: iload_3\n          3: iflt          38\n          6: aload_0\n-         7: getfield      #26                 // Field outputStack:[B\n+         7: getfield      #81                 // Field outputStack:[B\n         10: aload_0\n         11: dup\n-        12: getfield      #27                 // Field outputStackLocation:I\n+        12: getfield      #84                 // Field outputStackLocation:I\n         15: iconst_1\n         16: isub\n         17: dup_x1\n-        18: putfield      #27                 // Field outputStackLocation:I\n+        18: putfield      #84                 // Field outputStackLocation:I\n         21: aload_0\n-        22: getfield      #25                 // Field characters:[B\n+        22: getfield      #78                 // Field characters:[B\n         25: iload_3\n         26: baload\n         27: bastore\n         28: aload_0\n-        29: getfield      #24                 // Field prefixes:[I\n+        29: getfield      #74                 // Field prefixes:[I\n         32: iload_3\n         33: iaload\n         34: istore_3\n         35: goto          2\n         38: aload_0\n-        39: getfield      #6                  // Field previousCode:I\n+        39: getfield      #20                 // Field previousCode:I\n         42: iconst_m1\n         43: if_icmpeq     68\n         46: iload_2\n         47: ifne          68\n         50: aload_0\n         51: aload_0\n-        52: getfield      #6                  // Field previousCode:I\n+        52: getfield      #20                 // Field previousCode:I\n         55: aload_0\n-        56: getfield      #26                 // Field outputStack:[B\n+        56: getfield      #81                 // Field outputStack:[B\n         59: aload_0\n-        60: getfield      #27                 // Field outputStackLocation:I\n+        60: getfield      #84                 // Field outputStackLocation:I\n         63: baload\n-        64: invokevirtual #35                 // Method addEntry:(IB)I\n+        64: invokevirtual #105                // Method addEntry:(IB)I\n         67: pop\n         68: aload_0\n         69: iload_1\n-        70: putfield      #6                  // Field previousCode:I\n+        70: putfield      #20                 // Field previousCode:I\n         73: aload_0\n         74: aload_0\n-        75: getfield      #26                 // Field outputStack:[B\n+        75: getfield      #81                 // Field outputStack:[B\n         78: aload_0\n-        79: getfield      #27                 // Field outputStackLocation:I\n+        79: getfield      #84                 // Field outputStackLocation:I\n         82: baload\n-        83: putfield      #34                 // Field previousCodeFirstChar:B\n+        83: putfield      #101                // Field previousCodeFirstChar:B\n         86: aload_0\n-        87: getfield      #27                 // Field outputStackLocation:I\n+        87: getfield      #84                 // Field outputStackLocation:I\n         90: ireturn\n       LineNumberTable:\n         line 231: 0\n         line 232: 6\n         line 231: 28\n         line 234: 38\n         line 235: 50\n@@ -845,40 +845,40 @@\n \n   private int readFromStack(byte[], int, int);\n     descriptor: ([BII)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=6, args_size=4\n          0: aload_0\n-         1: getfield      #26                 // Field outputStack:[B\n+         1: getfield      #81                 // Field outputStack:[B\n          4: arraylength\n          5: aload_0\n-         6: getfield      #27                 // Field outputStackLocation:I\n+         6: getfield      #84                 // Field outputStackLocation:I\n          9: isub\n         10: istore        4\n         12: iload         4\n         14: ifle          54\n         17: iload         4\n         19: iload_3\n-        20: invokestatic  #36                 // Method java/lang/Math.min:(II)I\n+        20: invokestatic  #109                // Method java/lang/Math.min:(II)I\n         23: istore        5\n         25: aload_0\n-        26: getfield      #26                 // Field outputStack:[B\n+        26: getfield      #81                 // Field outputStack:[B\n         29: aload_0\n-        30: getfield      #27                 // Field outputStackLocation:I\n+        30: getfield      #84                 // Field outputStackLocation:I\n         33: aload_1\n         34: iload_2\n         35: iload         5\n-        37: invokestatic  #37                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        37: invokestatic  #115                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         40: aload_0\n         41: dup\n-        42: getfield      #27                 // Field outputStackLocation:I\n+        42: getfield      #84                 // Field outputStackLocation:I\n         45: iload         5\n         47: iadd\n-        48: putfield      #27                 // Field outputStackLocation:I\n+        48: putfield      #84                 // Field outputStackLocation:I\n         51: iload         5\n         53: ireturn\n         54: iconst_0\n         55: ireturn\n       LineNumberTable:\n         line 243: 0\n         line 244: 12\n@@ -902,30 +902,30 @@\n \n   protected int getCodeSize();\n     descriptor: ()I\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field codeSize:I\n+         1: getfield      #17                 // Field codeSize:I\n          4: ireturn\n       LineNumberTable:\n         line 254: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/compressors/lzw/LZWInputStream;\n \n   protected void resetCodeSize();\n     descriptor: ()V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: bipush        9\n-         3: invokevirtual #38                 // Method setCodeSize:(I)V\n+         3: invokevirtual #121                // Method setCodeSize:(I)V\n          6: return\n       LineNumberTable:\n         line 258: 0\n         line 259: 6\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lorg/apache/commons/compress/compressors/lzw/LZWInputStream;\n@@ -933,15 +933,15 @@\n   protected void setCodeSize(int);\n     descriptor: (I)V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: putfield      #5                  // Field codeSize:I\n+         2: putfield      #17                 // Field codeSize:I\n          5: return\n       LineNumberTable:\n         line 262: 0\n         line 263: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/compress/compressors/lzw/LZWInputStream;\n@@ -950,18 +950,18 @@\n   protected void incrementCodeSize();\n     descriptor: ()V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: dup\n-         2: getfield      #5                  // Field codeSize:I\n+         2: getfield      #17                 // Field codeSize:I\n          5: iconst_1\n          6: iadd\n-         7: putfield      #5                  // Field codeSize:I\n+         7: putfield      #17                 // Field codeSize:I\n         10: return\n       LineNumberTable:\n         line 266: 0\n         line 267: 10\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/apache/commons/compress/compressors/lzw/LZWInputStream;\n@@ -969,30 +969,30 @@\n   protected void resetPreviousCode();\n     descriptor: ()V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_m1\n-         2: putfield      #6                  // Field previousCode:I\n+         2: putfield      #20                 // Field previousCode:I\n          5: return\n       LineNumberTable:\n         line 270: 0\n         line 271: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/compress/compressors/lzw/LZWInputStream;\n \n   protected int getPrefix(int);\n     descriptor: (I)I\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #24                 // Field prefixes:[I\n+         1: getfield      #74                 // Field prefixes:[I\n          4: iload_1\n          5: iaload\n          6: ireturn\n       LineNumberTable:\n         line 274: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -1001,15 +1001,15 @@\n \n   protected void setPrefix(int, int);\n     descriptor: (II)V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n-         1: getfield      #24                 // Field prefixes:[I\n+         1: getfield      #74                 // Field prefixes:[I\n          4: iload_1\n          5: iload_2\n          6: iastore\n          7: return\n       LineNumberTable:\n         line 278: 0\n         line 279: 7\n@@ -1021,68 +1021,68 @@\n \n   protected int getPrefixesLength();\n     descriptor: ()I\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #24                 // Field prefixes:[I\n+         1: getfield      #74                 // Field prefixes:[I\n          4: arraylength\n          5: ireturn\n       LineNumberTable:\n         line 282: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/compress/compressors/lzw/LZWInputStream;\n \n   protected int getClearCode();\n     descriptor: ()I\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field clearCode:I\n+         1: getfield      #13                 // Field clearCode:I\n          4: ireturn\n       LineNumberTable:\n         line 286: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/compressors/lzw/LZWInputStream;\n \n   protected int getTableSize();\n     descriptor: ()I\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #30                 // Field tableSize:I\n+         1: getfield      #93                 // Field tableSize:I\n          4: ireturn\n       LineNumberTable:\n         line 290: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/compressors/lzw/LZWInputStream;\n \n   protected void setTableSize(int);\n     descriptor: (I)V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: putfield      #30                 // Field tableSize:I\n+         2: putfield      #93                 // Field tableSize:I\n          5: return\n       LineNumberTable:\n         line 294: 0\n         line 295: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/compress/compressors/lzw/LZWInputStream;\n             0       6     1 newSize   I\n }\n SourceFile: \"LZWInputStream.java\"\n-InnerClasses:\n-  public static final #197= #196 of #200; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #151 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  0: #189 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #152 maxCodeSize is \\u0001, must be bigger than 0\n+      #195 maxCodeSize is \\u0001, must be bigger than 0\n+InnerClasses:\n+  public static final #202= #198 of #200; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
