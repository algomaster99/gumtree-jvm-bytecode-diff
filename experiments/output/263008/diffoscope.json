{"diffoscope-json-version": 1, "source1": "first/FormattableUtils.class", "source2": "second/FormattableUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,34 +11,34 @@\n {\n     private static final String SIMPLEST_FORMAT = \"%s\";\n     \n     public static String toString(final Formattable formattable) {\n         return String.format(\"%s\", formattable);\n     }\n     \n-    public static Formatter append(final CharSequence seq, final Formatter formatter, final int flags, final int width, final int precision) {\n-        return append(seq, formatter, flags, width, precision, ' ', null);\n+    public static Formatter append(final CharSequence charSequence, final Formatter formatter, final int n, final int n2, final int n3) {\n+        return append(charSequence, formatter, n, n2, n3, ' ', null);\n     }\n     \n-    public static Formatter append(final CharSequence seq, final Formatter formatter, final int flags, final int width, final int precision, final char padChar) {\n-        return append(seq, formatter, flags, width, precision, padChar, null);\n+    public static Formatter append(final CharSequence charSequence, final Formatter formatter, final int n, final int n2, final int n3, final char c) {\n+        return append(charSequence, formatter, n, n2, n3, c, null);\n     }\n     \n-    public static Formatter append(final CharSequence seq, final Formatter formatter, final int flags, final int width, final int precision, final CharSequence ellipsis) {\n-        return append(seq, formatter, flags, width, precision, ' ', ellipsis);\n+    public static Formatter append(final CharSequence charSequence, final Formatter formatter, final int n, final int n2, final int n3, final CharSequence charSequence2) {\n+        return append(charSequence, formatter, n, n2, n3, ' ', charSequence2);\n     }\n     \n-    public static Formatter append(final CharSequence seq, final Formatter formatter, final int flags, final int width, final int precision, final char padChar, final CharSequence ellipsis) {\n-        Validate.isTrue(ellipsis == null || precision < 0 || ellipsis.length() <= precision, \"Specified ellipsis '%1$s' exceeds precision of %2$s\", new Object[] { ellipsis, Integer.valueOf(precision) });\n-        final StringBuilder buf = new StringBuilder(seq);\n-        if (precision >= 0 && precision < seq.length()) {\n-            final CharSequence _ellipsis = (CharSequence)ObjectUtils.defaultIfNull((Object)ellipsis, (Object)\"\");\n-            buf.replace(precision - _ellipsis.length(), seq.length(), _ellipsis.toString());\n+    public static Formatter append(final CharSequence seq, final Formatter formatter, final int n, final int n2, final int i, final char c, final CharSequence charSequence) {\n+        Validate.isTrue(charSequence == null || i < 0 || charSequence.length() <= i, \"Specified ellipsis '%1$s' exceeds precision of %2$s\", new Object[] { charSequence, Integer.valueOf(i) });\n+        final StringBuilder sb = new StringBuilder(seq);\n+        if (i >= 0 && i < seq.length()) {\n+            final CharSequence charSequence2 = (CharSequence)ObjectUtils.defaultIfNull((Object)charSequence, (Object)\"\");\n+            sb.replace(i - charSequence2.length(), seq.length(), charSequence2.toString());\n         }\n-        final boolean leftJustify = (flags & 0x1) == 0x1;\n-        for (int i = buf.length(); i < width; ++i) {\n-            buf.insert(leftJustify ? i : 0, padChar);\n+        final boolean b = (n & 0x1) == 0x1;\n+        for (int j = sb.length(); j < n2; ++j) {\n+            sb.insert(b ? j : false, c);\n         }\n-        formatter.format(buf.toString(), new Object[0]);\n+        formatter.format(sb.toString(), new Object[0]);\n         return formatter;\n     }\n }\n"}]}
