{"diffoscope-json-version": 1, "source1": "first/CodeHTML.class", "source2": "second/CodeHTML.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,23 +29,44 @@\n     private final ConstantPool constantPool;\n     private final ConstantHTML constantHtml;\n     \n     CodeHTML(final String dir, final String className, final Method[] methods, final ConstantPool constantPool, final ConstantHTML constantHtml, final Charset charset) throws IOException {\n         this.className = className;\n         this.constantPool = constantPool;\n         this.constantHtml = constantHtml;\n-        try (final PrintWriter newPrintWriter = new PrintWriter(dir + className + \"_code.html\", charset.name())) {\n-            (this.printWriter = newPrintWriter).print(\"<HTML><head><meta charset=\\\"\");\n-            this.printWriter.print(charset.name());\n-            this.printWriter.println(\"\\\"></head>\");\n-            this.printWriter.println(\"<BODY BGCOLOR=\\\"#C0C0C0\\\">\");\n-            for (int i = 0; i < methods.length; ++i) {\n-                this.writeMethod(methods[i], i);\n+        Throwable t = null;\n+        try {\n+            final PrintWriter newPrintWriter = new PrintWriter(String.valueOf(dir) + className + \"_code.html\", charset.name());\n+            try {\n+                (this.printWriter = newPrintWriter).print(\"<HTML><head><meta charset=\\\"\");\n+                this.printWriter.print(charset.name());\n+                this.printWriter.println(\"\\\"></head>\");\n+                this.printWriter.println(\"<BODY BGCOLOR=\\\"#C0C0C0\\\">\");\n+                for (int i = 0; i < methods.length; ++i) {\n+                    this.writeMethod(methods[i], i);\n+                }\n+                this.printWriter.println(\"</BODY></HTML>\");\n+            }\n+            finally {\n+                if (newPrintWriter != null) {\n+                    newPrintWriter.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n-            this.printWriter.println(\"</BODY></HTML>\");\n         }\n     }\n     \n     private String codeToHTML(final ByteSequence bytes, final int methodNumber) throws IOException {\n         final short opcode = (short)bytes.readUnsignedByte();\n         int defaultOffset = 0;\n         int noPadBytes = 0;\n@@ -68,15 +89,17 @@\n                 buf.append(\"<TABLE BORDER=1><TR>\");\n                 final int[] jumpTable = new int[high - low + 1];\n                 for (int j = 0; j < jumpTable.length; ++j) {\n                     jumpTable[j] = offset + bytes.readInt();\n                     buf.append(\"<TH>\").append(low + j).append(\"</TH>\");\n                 }\n                 buf.append(\"<TH>default</TH></TR>\\n<TR>\");\n-                for (final int element : jumpTable) {\n+                int[] array;\n+                for (int length = (array = jumpTable).length, n = 0; n < length; ++n) {\n+                    final int element = array[n];\n                     buf.append(\"<TD><A HREF=\\\"#code\").append(methodNumber).append(\"@\").append(element).append(\"\\\">\").append(element).append(\"</A></TD>\");\n                 }\n                 buf.append(\"<TD><A HREF=\\\"#code\").append(methodNumber).append(\"@\").append(defaultOffset).append(\"\\\">\").append(defaultOffset).append(\"</A></TD></TR>\\n</TABLE>\\n\");\n                 break;\n             }\n             case 171: {\n                 final int npairs = bytes.readInt();\n@@ -291,24 +314,26 @@\n         buf.append(\"</TD>\");\n         return buf.toString();\n     }\n     \n     private void findGotos(final ByteSequence bytes, final Code code) throws IOException {\n         this.gotoSet = new BitSet(bytes.available());\n         if (code != null) {\n-            final CodeException[] exceptionTable;\n-            final CodeException[] ce = exceptionTable = code.getExceptionTable();\n-            for (final CodeException cex : exceptionTable) {\n+            final CodeException[] ce = code.getExceptionTable();\n+            CodeException[] array;\n+            for (int length = (array = ce).length, l = 0; l < length; ++l) {\n+                final CodeException cex = array[l];\n                 this.gotoSet.set(cex.getStartPC());\n                 this.gotoSet.set(cex.getEndPC());\n                 this.gotoSet.set(cex.getHandlerPC());\n             }\n-            final Attribute[] attributes2;\n-            final Attribute[] attributes = attributes2 = code.getAttributes();\n-            for (final Attribute attribute : attributes2) {\n+            final Attribute[] attributes = code.getAttributes();\n+            Attribute[] array2;\n+            for (int length2 = (array2 = attributes).length, n = 0; n < length2; ++n) {\n+                final Attribute attribute = array2[n];\n                 if (attribute.getTag() == 5) {\n                     ((LocalVariableTable)attribute).forEach(var -> {\n                         final int start = var.getStartPC();\n                         this.gotoSet.set(start);\n                         this.gotoSet.set(start + var.getLength());\n                         return;\n                     });\n@@ -392,15 +417,15 @@\n         final String[] args = Utility.methodSignatureArgumentTypes(signature, false);\n         final String type = Utility.methodSignatureReturnType(signature, false);\n         final String name = method.getName();\n         final String htmlName = Class2HTML.toHTML(name);\n         String access = Utility.accessToString(method.getAccessFlags());\n         access = Utility.replace(access, \" \", \"&nbsp;\");\n         final Attribute[] attributes = method.getAttributes();\n-        this.printWriter.print(\"<P><B><FONT COLOR=\\\"#FF0000\\\">\" + access + \"</FONT>&nbsp;<A NAME=method\" + methodNumber + \">\" + Class2HTML.referenceType(type) + \"</A>&nbsp<A HREF=\\\"\" + this.className + \"_methods.html#method\" + methodNumber + \"\\\" TARGET=Methods>\" + htmlName + \"</A>(\");\n+        this.printWriter.print(\"<P><B><FONT COLOR=\\\"#FF0000\\\">\" + access + \"</FONT>&nbsp;\" + \"<A NAME=method\" + methodNumber + \">\" + Class2HTML.referenceType(type) + \"</A>&nbsp<A HREF=\\\"\" + this.className + \"_methods.html#method\" + methodNumber + \"\\\" TARGET=Methods>\" + htmlName + \"</A>(\");\n         for (int i = 0; i < args.length; ++i) {\n             this.printWriter.print(Class2HTML.referenceType(args[i]));\n             if (i < args.length - 1) {\n                 this.printWriter.print(\",&nbsp;\");\n             }\n         }\n         this.printWriter.println(\")</B></P>\");\n@@ -419,42 +444,63 @@\n                 if (tag == 2) {\n                     c = (Code)attributes[j];\n                     final Attribute[] attributes2 = c.getAttributes();\n                     code = c.getCode();\n                     this.printWriter.print(\"<UL>\");\n                     for (int k = 0; k < attributes2.length; ++k) {\n                         tag = attributes2[k].getTag();\n-                        this.printWriter.print(\"<LI><A HREF=\\\"\" + this.className + \"_attributes.html#method\" + methodNumber + \"@\" + j + \"@\" + k + \"\\\" TARGET=Attributes>\" + Const.getAttributeName((int)tag) + \"</A></LI>\\n\");\n+                        this.printWriter.print(\"<LI><A HREF=\\\"\" + this.className + \"_attributes.html#\" + \"method\" + methodNumber + \"@\" + j + \"@\" + k + \"\\\" TARGET=Attributes>\" + Const.getAttributeName((int)tag) + \"</A></LI>\\n\");\n                     }\n                     this.printWriter.print(\"</UL>\");\n                 }\n             }\n             this.printWriter.println(\"</UL>\");\n         }\n         if (code != null) {\n-            try (final ByteSequence stream = new ByteSequence(code)) {\n-                stream.mark(stream.available());\n-                this.findGotos(stream, c);\n-                stream.reset();\n-                this.printWriter.println(\"<TABLE BORDER=0><TR><TH ALIGN=LEFT>Byte<BR>offset</TH><TH ALIGN=LEFT>Instruction</TH><TH ALIGN=LEFT>Argument</TH>\");\n-                while (stream.available() > 0) {\n-                    final int offset = stream.getIndex();\n-                    final String str = this.codeToHTML(stream, methodNumber);\n-                    String anchor = \"\";\n-                    if (this.gotoSet.get(offset)) {\n-                        anchor = \"<A NAME=code\" + methodNumber + \"@\" + offset + \"></A>\";\n+            Throwable t = null;\n+            try {\n+                final ByteSequence stream = new ByteSequence(code);\n+                try {\n+                    stream.mark(stream.available());\n+                    this.findGotos(stream, c);\n+                    stream.reset();\n+                    this.printWriter.println(\"<TABLE BORDER=0><TR><TH ALIGN=LEFT>Byte<BR>offset</TH><TH ALIGN=LEFT>Instruction</TH><TH ALIGN=LEFT>Argument</TH>\");\n+                    while (stream.available() > 0) {\n+                        final int offset = stream.getIndex();\n+                        final String str = this.codeToHTML(stream, methodNumber);\n+                        String anchor = \"\";\n+                        if (this.gotoSet.get(offset)) {\n+                            anchor = \"<A NAME=code\" + methodNumber + \"@\" + offset + \"></A>\";\n+                        }\n+                        String anchor2;\n+                        if (stream.getIndex() == code.length) {\n+                            anchor2 = \"<A NAME=code\" + methodNumber + \"@\" + code.length + \">\" + offset + \"</A>\";\n+                        }\n+                        else {\n+                            anchor2 = new StringBuilder().append(offset).toString();\n+                        }\n+                        this.printWriter.println(\"<TR VALIGN=TOP><TD>\" + anchor2 + \"</TD><TD>\" + anchor + str + \"</TR>\");\n                     }\n-                    String anchor2;\n-                    if (stream.getIndex() == code.length) {\n-                        anchor2 = \"<A NAME=code\" + methodNumber + \"@\" + code.length + \">\" + offset + \"</A>\";\n+                }\n+                finally {\n+                    if (stream != null) {\n+                        stream.close();\n                     }\n-                    else {\n-                        anchor2 = \"\" + offset;\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n                     }\n-                    this.printWriter.println(\"<TR VALIGN=TOP><TD>\" + anchor2 + \"</TD><TD>\" + anchor + str + \"</TR>\");\n                 }\n             }\n             this.printWriter.println(\"<TR><TD> </A></TD></TR>\");\n             this.printWriter.println(\"</TABLE>\");\n         }\n     }\n }\n"}]}
