{"diffoscope-json-version": 1, "source1": "first/NioZipEncoding.class", "source2": "second/NioZipEncoding.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -58,15 +58,15 @@\n                 if (!encode.isOverflow()) {\n                     continue;\n                 }\n                 byteBuffer = ZipEncodingHelper.growBufferBy(byteBuffer, estimateIncrementalEncodingSize(encoder, wrap.remaining()));\n             }\n         }\n         encoder.encode(wrap, byteBuffer, true);\n-        byteBuffer.limit();\n+        byteBuffer.limit(byteBuffer.position());\n         byteBuffer.rewind();\n         return byteBuffer;\n     }\n     \n     public String decode(final byte[] array) throws IOException {\n         return this.newDecoder().decode(ByteBuffer.wrap(array)).toString();\n     }\n@@ -78,15 +78,15 @@\n                 growBufferBy = ZipEncodingHelper.growBufferBy(growBufferBy, estimateIncrementalEncodingSize(charsetEncoder, in.remaining()));\n             }\n         }\n         return growBufferBy;\n     }\n     \n     private static CharBuffer encodeSurrogate(final CharBuffer charBuffer, final char c) {\n-        charBuffer.position().limit(6);\n+        charBuffer.position(0).limit(6);\n         charBuffer.put('%');\n         charBuffer.put('U');\n         charBuffer.put(NioZipEncoding.HEX_CHARS[c >> 12 & 0xF]);\n         charBuffer.put(NioZipEncoding.HEX_CHARS[c >> 8 & 0xF]);\n         charBuffer.put(NioZipEncoding.HEX_CHARS[c >> 4 & 0xF]);\n         charBuffer.put(NioZipEncoding.HEX_CHARS[c & '\\u000f']);\n         charBuffer.flip();\n"}]}
