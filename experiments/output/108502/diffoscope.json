{"diffoscope-json-version": 1, "source1": "first/Fraction.class", "source2": "second/Fraction.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,14 +21,29 @@\n     public static final Fraction FOUR_FIFTHS;\n     private final int numerator;\n     private final int denominator;\n     private transient int hashCode;\n     private transient String toString;\n     private transient String toProperString;\n     \n+    static {\n+        ZERO = new Fraction(0, 1);\n+        ONE = new Fraction(1, 1);\n+        ONE_HALF = new Fraction(1, 2);\n+        ONE_THIRD = new Fraction(1, 3);\n+        TWO_THIRDS = new Fraction(2, 3);\n+        ONE_QUARTER = new Fraction(1, 4);\n+        TWO_QUARTERS = new Fraction(2, 4);\n+        THREE_QUARTERS = new Fraction(3, 4);\n+        ONE_FIFTH = new Fraction(1, 5);\n+        TWO_FIFTHS = new Fraction(2, 5);\n+        THREE_FIFTHS = new Fraction(3, 5);\n+        FOUR_FIFTHS = new Fraction(4, 5);\n+    }\n+    \n     private Fraction(final int numerator, final int denominator) {\n         this.numerator = numerator;\n         this.denominator = denominator;\n     }\n     \n     public static Fraction getFraction(int numerator, int denominator) {\n         if (denominator == 0) {\n@@ -283,30 +298,30 @@\n             int k;\n             for (k = 0; (u & 0x1) == 0x0 && (v & 0x1) == 0x0 && k < 31; u /= 2, v /= 2, ++k) {}\n             if (k == 31) {\n                 throw new ArithmeticException(\"overflow: gcd is 2^31\");\n             }\n             int t = ((u & 0x1) == 0x1) ? v : (-(u / 2));\n             while (true) {\n-                if ((t & 0x1) == 0x0) {\n-                    t /= 2;\n-                }\n-                else {\n+                if ((t & 0x1) != 0x0) {\n                     if (t > 0) {\n                         u = -t;\n                     }\n                     else {\n                         v = t;\n                     }\n                     t = (v - u) / 2;\n                     if (t == 0) {\n                         break;\n                     }\n                     continue;\n                 }\n+                else {\n+                    t /= 2;\n+                }\n             }\n             return -u * (1 << k);\n         }\n     }\n     \n     private static int mulAndCheck(final int x, final int y) {\n         final long m = x * (long)y;\n@@ -424,15 +439,15 @@\n         final long second = other.numerator * (long)this.denominator;\n         return Long.compare(first, second);\n     }\n     \n     @Override\n     public String toString() {\n         if (this.toString == null) {\n-            this.toString = this.getNumerator() + \"/\" + this.getDenominator();\n+            this.toString = String.valueOf(this.getNumerator()) + \"/\" + this.getDenominator();\n         }\n         return this.toString;\n     }\n     \n     public String toProperString() {\n         if (this.toProperString == null) {\n             if (this.numerator == 0) {\n@@ -446,32 +461,17 @@\n             }\n             else if (((this.numerator > 0) ? (-this.numerator) : this.numerator) < -this.denominator) {\n                 final int properNumerator = this.getProperNumerator();\n                 if (properNumerator == 0) {\n                     this.toProperString = Integer.toString(this.getProperWhole());\n                 }\n                 else {\n-                    this.toProperString = this.getProperWhole() + \" \" + properNumerator + \"/\" + this.getDenominator();\n+                    this.toProperString = String.valueOf(this.getProperWhole()) + \" \" + properNumerator + \"/\" + this.getDenominator();\n                 }\n             }\n             else {\n-                this.toProperString = this.getNumerator() + \"/\" + this.getDenominator();\n+                this.toProperString = String.valueOf(this.getNumerator()) + \"/\" + this.getDenominator();\n             }\n         }\n         return this.toProperString;\n     }\n-    \n-    static {\n-        ZERO = new Fraction(0, 1);\n-        ONE = new Fraction(1, 1);\n-        ONE_HALF = new Fraction(1, 2);\n-        ONE_THIRD = new Fraction(1, 3);\n-        TWO_THIRDS = new Fraction(2, 3);\n-        ONE_QUARTER = new Fraction(1, 4);\n-        TWO_QUARTERS = new Fraction(2, 4);\n-        THREE_QUARTERS = new Fraction(3, 4);\n-        ONE_FIFTH = new Fraction(1, 5);\n-        TWO_FIFTHS = new Fraction(2, 5);\n-        THREE_FIFTHS = new Fraction(3, 5);\n-        FOUR_FIFTHS = new Fraction(4, 5);\n-    }\n }\n"}]}
