{"diffoscope-json-version": 1, "source1": "first/MetadataBandGroup.class", "source2": "second/MetadataBandGroup.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -55,57 +55,57 @@\n     private int T_index;\n     private int nesttype_RS_Index;\n     private int nestpair_N_Index;\n     private Iterator<CPUTF8> nestname_RU_Iterator;\n     private int anno_N_Index;\n     private int pair_N_Index;\n     \n-    public static void setRiaAttributeName(final CPUTF8 cpUTF8Value) {\n-        MetadataBandGroup.riaUTF8 = cpUTF8Value;\n+    public static void setRiaAttributeName(final CPUTF8 riaUTF8) {\n+        MetadataBandGroup.riaUTF8 = riaUTF8;\n     }\n     \n-    public static void setRipaAttributeName(final CPUTF8 cpUTF8Value) {\n-        MetadataBandGroup.ripaUTF8 = cpUTF8Value;\n+    public static void setRipaAttributeName(final CPUTF8 ripaUTF8) {\n+        MetadataBandGroup.ripaUTF8 = ripaUTF8;\n     }\n     \n-    public static void setRvaAttributeName(final CPUTF8 cpUTF8Value) {\n-        MetadataBandGroup.rvaUTF8 = cpUTF8Value;\n+    public static void setRvaAttributeName(final CPUTF8 rvaUTF8) {\n+        MetadataBandGroup.rvaUTF8 = rvaUTF8;\n     }\n     \n-    public static void setRvpaAttributeName(final CPUTF8 cpUTF8Value) {\n-        MetadataBandGroup.rvpaUTF8 = cpUTF8Value;\n+    public static void setRvpaAttributeName(final CPUTF8 rvpaUTF8) {\n+        MetadataBandGroup.rvpaUTF8 = rvpaUTF8;\n     }\n     \n     public MetadataBandGroup(final String type, final CpBands cpBands) {\n         this.type = type;\n         this.cpBands = cpBands;\n     }\n     \n-    private AnnotationsAttribute.Annotation getAnnotation(final CPUTF8 type, final int pairCount, final Iterator<CPUTF8> namesIterator) {\n-        final CPUTF8[] elementNames = new CPUTF8[pairCount];\n-        final AnnotationsAttribute.ElementValue[] elementValues = new AnnotationsAttribute.ElementValue[pairCount];\n-        for (int j = 0; j < elementNames.length; ++j) {\n-            elementNames[j] = namesIterator.next();\n-            final int t = this.T[this.T_index++];\n-            elementValues[j] = new AnnotationsAttribute.ElementValue(t, this.getNextValue(t));\n+    private AnnotationsAttribute.Annotation getAnnotation(final CPUTF8 cputf8, final int n, final Iterator<CPUTF8> iterator) {\n+        final CPUTF8[] array = new CPUTF8[n];\n+        final AnnotationsAttribute.ElementValue[] array2 = new AnnotationsAttribute.ElementValue[n];\n+        for (int i = 0; i < array.length; ++i) {\n+            array[i] = iterator.next();\n+            final int n2 = this.T[this.T_index++];\n+            array2[i] = new AnnotationsAttribute.ElementValue(n2, this.getNextValue(n2));\n         }\n-        return new AnnotationsAttribute.Annotation(pairCount, type, elementNames, elementValues);\n+        return new AnnotationsAttribute.Annotation(n, cputf8, array, array2);\n     }\n     \n-    private Attribute getAttribute(final int numAnnotations, final CPUTF8[] types, final int[] pairCounts, final Iterator<CPUTF8> namesIterator) {\n-        final AnnotationsAttribute.Annotation[] annotations = new AnnotationsAttribute.Annotation[numAnnotations];\n-        Arrays.setAll(annotations, i -> this.getAnnotation(types[i], pairCounts[i], namesIterator));\n-        return (Attribute)new RuntimeVisibleorInvisibleAnnotationsAttribute(this.type.equals(\"RVA\") ? MetadataBandGroup.rvaUTF8 : MetadataBandGroup.riaUTF8, annotations);\n+    private Attribute getAttribute(final int n, final CPUTF8[] array, final int[] array2, final Iterator<CPUTF8> iterator) {\n+        final AnnotationsAttribute.Annotation[] array3 = new AnnotationsAttribute.Annotation[n];\n+        Arrays.setAll(array3, n3 -> this.getAnnotation(array4[n3], array5[n3], iterator2));\n+        return (Attribute)new RuntimeVisibleorInvisibleAnnotationsAttribute(this.type.equals(\"RVA\") ? MetadataBandGroup.rvaUTF8 : MetadataBandGroup.riaUTF8, array3);\n     }\n     \n     public List<Attribute> getAttributes() {\n         if (this.attributes == null) {\n             this.attributes = new ArrayList<Attribute>();\n             if (this.name_RU != null) {\n-                final Iterator<CPUTF8> name_RU_Iterator = Arrays.asList(this.name_RU).iterator();\n+                final Iterator<CPUTF8> iterator = Arrays.asList(this.name_RU).iterator();\n                 if (!this.type.equals(\"AD\")) {\n                     this.T_index = 0;\n                 }\n                 this.caseI_KI_Index = 0;\n                 this.caseD_KD_Index = 0;\n                 this.caseF_KF_Index = 0;\n                 this.caseJ_KJ_Index = 0;\n@@ -115,36 +115,37 @@\n                 this.cases_RU_Index = 0;\n                 this.casearray_N_Index = 0;\n                 this.nesttype_RS_Index = 0;\n                 this.nestpair_N_Index = 0;\n                 this.nestname_RU_Iterator = Arrays.asList(this.nestname_RU).iterator();\n                 if (this.type.equals(\"RVA\") || this.type.equals(\"RIA\")) {\n                     for (int i = 0; i < this.anno_N.length; ++i) {\n-                        this.attributes.add(this.getAttribute(this.anno_N[i], this.type_RS[i], this.pair_N[i], name_RU_Iterator));\n+                        this.attributes.add(this.getAttribute(this.anno_N[i], this.type_RS[i], this.pair_N[i], iterator));\n                     }\n                 }\n                 else if (this.type.equals(\"RVPA\") || this.type.equals(\"RIPA\")) {\n                     this.anno_N_Index = 0;\n                     this.pair_N_Index = 0;\n-                    for (final int element : this.param_NB) {\n-                        this.attributes.add(this.getParameterAttribute(element, name_RU_Iterator));\n+                    final int[] param_NB = this.param_NB;\n+                    for (int length = param_NB.length, j = 0; j < length; ++j) {\n+                        this.attributes.add(this.getParameterAttribute(param_NB[j], iterator));\n                     }\n                 }\n             }\n             else if (this.type.equals(\"AD\")) {\n-                for (final int element2 : this.T) {\n-                    this.attributes.add((Attribute)new AnnotationDefaultAttribute(new AnnotationsAttribute.ElementValue(element2, this.getNextValue(element2))));\n+                for (final int n : this.T) {\n+                    this.attributes.add((Attribute)new AnnotationDefaultAttribute(new AnnotationsAttribute.ElementValue(n, this.getNextValue(n))));\n                 }\n             }\n         }\n         return this.attributes;\n     }\n     \n-    private Object getNextValue(final int t) {\n-        switch (t) {\n+    private Object getNextValue(final int n) {\n+        switch (n) {\n             case 66:\n             case 67:\n             case 73:\n             case 83:\n             case 90: {\n                 return this.caseI_KI[this.caseI_KI_Index++];\n             }\n@@ -157,45 +158,42 @@\n             case 74: {\n                 return this.caseJ_KJ[this.caseJ_KJ_Index++];\n             }\n             case 99: {\n                 return this.casec_RS[this.casec_RS_Index++];\n             }\n             case 101: {\n-                final String enumString = this.caseet_RS[this.caseet_RS_Index++] + \":\" + this.caseec_RU[this.caseec_RU_Index++];\n-                return this.cpBands.cpNameAndTypeValue(enumString);\n+                return this.cpBands.cpNameAndTypeValue(this.caseet_RS[this.caseet_RS_Index++] + \":\" + this.caseec_RU[this.caseec_RU_Index++]);\n             }\n             case 115: {\n                 return this.cases_RU[this.cases_RU_Index++];\n             }\n             case 91: {\n-                final int arraySize = this.casearray_N[this.casearray_N_Index++];\n-                final AnnotationsAttribute.ElementValue[] nestedArray = new AnnotationsAttribute.ElementValue[arraySize];\n-                for (int i = 0; i < arraySize; ++i) {\n-                    final int nextT = this.T[this.T_index++];\n-                    nestedArray[i] = new AnnotationsAttribute.ElementValue(nextT, this.getNextValue(nextT));\n+                final int n2 = this.casearray_N[this.casearray_N_Index++];\n+                final AnnotationsAttribute.ElementValue[] array = new AnnotationsAttribute.ElementValue[n2];\n+                for (int i = 0; i < n2; ++i) {\n+                    final int n3 = this.T[this.T_index++];\n+                    array[i] = new AnnotationsAttribute.ElementValue(n3, this.getNextValue(n3));\n                 }\n-                return nestedArray;\n+                return array;\n             }\n             case 64: {\n-                final CPUTF8 type = this.nesttype_RS[this.nesttype_RS_Index++];\n-                final int numPairs = this.nestpair_N[this.nestpair_N_Index++];\n-                return this.getAnnotation(type, numPairs, this.nestname_RU_Iterator);\n+                return this.getAnnotation(this.nesttype_RS[this.nesttype_RS_Index++], this.nestpair_N[this.nestpair_N_Index++], this.nestname_RU_Iterator);\n             }\n             default: {\n                 return null;\n             }\n         }\n     }\n     \n-    private Attribute getParameterAttribute(final int numParameters, final Iterator<CPUTF8> namesIterator) {\n-        final RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation[] parameterAnnotations = new RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation[numParameters];\n-        for (int i = 0; i < numParameters; ++i) {\n-            final int numAnnotations = this.anno_N[this.anno_N_Index++];\n-            final int[] pairCounts = this.pair_N[this.pair_N_Index++];\n-            final AnnotationsAttribute.Annotation[] annotations = new AnnotationsAttribute.Annotation[numAnnotations];\n-            Arrays.setAll(annotations, j -> this.getAnnotation(this.type_RS[this.anno_N_Index - 1][j], pairCounts[j], namesIterator));\n-            parameterAnnotations[i] = new RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation(annotations);\n+    private Attribute getParameterAttribute(final int n, final Iterator<CPUTF8> iterator) {\n+        final RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation[] array = new RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation[n];\n+        for (int i = 0; i < n; ++i) {\n+            final int n2 = this.anno_N[this.anno_N_Index++];\n+            final int[] array2 = this.pair_N[this.pair_N_Index++];\n+            final AnnotationsAttribute.Annotation[] array3 = new AnnotationsAttribute.Annotation[n2];\n+            Arrays.setAll(array3, n4 -> this.getAnnotation(this.type_RS[this.anno_N_Index - 1][n4], array4[n4], iterator2));\n+            array[i] = new RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation(array3);\n         }\n-        return (Attribute)new RuntimeVisibleorInvisibleParameterAnnotationsAttribute(this.type.equals(\"RVPA\") ? MetadataBandGroup.rvpaUTF8 : MetadataBandGroup.ripaUTF8, parameterAnnotations);\n+        return (Attribute)new RuntimeVisibleorInvisibleParameterAnnotationsAttribute(this.type.equals(\"RVPA\") ? MetadataBandGroup.rvpaUTF8 : MetadataBandGroup.ripaUTF8, array);\n     }\n }\n"}]}
