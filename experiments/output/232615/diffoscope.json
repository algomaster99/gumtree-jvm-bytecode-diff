{"diffoscope-json-version": 1, "source1": "first/CompositeConfiguration.class", "source2": "second/CompositeConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,15 +1,14 @@\n \n package org.apache.commons.configuration2;\n \n import org.apache.commons.configuration2.convert.ListDelimiterHandler;\n import org.apache.commons.configuration2.ex.ConfigurationRuntimeException;\n import java.util.ListIterator;\n import java.util.ArrayList;\n-import java.util.Set;\n import java.util.LinkedHashSet;\n import java.util.Iterator;\n import java.util.Collection;\n import java.util.LinkedList;\n import java.util.List;\n \n public class CompositeConfiguration extends AbstractConfiguration implements Cloneable\n@@ -25,83 +24,84 @@\n     \n     public CompositeConfiguration(final Configuration inMemoryConfiguration) {\n         (this.configList = new LinkedList<Configuration>()).clear();\n         this.inMemoryConfiguration = inMemoryConfiguration;\n         this.configList.add(inMemoryConfiguration);\n     }\n     \n-    public CompositeConfiguration(final Collection<? extends Configuration> configurations) {\n-        this((Configuration)new BaseConfiguration(), configurations);\n+    public CompositeConfiguration(final Collection<? extends Configuration> collection) {\n+        this((Configuration)new BaseConfiguration(), collection);\n     }\n     \n-    public CompositeConfiguration(final Configuration inMemoryConfiguration, final Collection<? extends Configuration> configurations) {\n-        this(inMemoryConfiguration);\n-        if (configurations != null) {\n-            for (final Configuration c : configurations) {\n-                this.addConfiguration(c);\n+    public CompositeConfiguration(final Configuration configuration, final Collection<? extends Configuration> collection) {\n+        this(configuration);\n+        if (collection != null) {\n+            final Iterator<? extends Configuration> iterator = collection.iterator();\n+            while (iterator.hasNext()) {\n+                this.addConfiguration((Configuration)iterator.next());\n             }\n         }\n     }\n     \n-    public void addConfiguration(final Configuration config) {\n-        this.addConfiguration(config, false);\n+    public void addConfiguration(final Configuration configuration) {\n+        this.addConfiguration(configuration, false);\n     }\n     \n-    public void addConfiguration(final Configuration config, final boolean asInMemory) {\n+    public void addConfiguration(final Configuration configuration, final boolean b) {\n         this.beginWrite(false);\n         try {\n-            if (!this.configList.contains(config)) {\n-                if (asInMemory) {\n-                    this.replaceInMemoryConfiguration(config);\n+            if (!this.configList.contains(configuration)) {\n+                if (b) {\n+                    this.replaceInMemoryConfiguration(configuration);\n                     this.inMemoryConfigIsChild = true;\n                 }\n                 if (!this.inMemoryConfigIsChild) {\n-                    this.configList.add(this.configList.indexOf((Object)this.inMemoryConfiguration), config);\n+                    this.configList.add(this.configList.indexOf((Object)this.inMemoryConfiguration), configuration);\n                 }\n                 else {\n-                    this.configList.add(config);\n+                    this.configList.add(configuration);\n                 }\n-                if (config instanceof AbstractConfiguration) {\n-                    ((AbstractConfiguration)config).setThrowExceptionOnMissing(this.isThrowExceptionOnMissing());\n+                if (configuration instanceof AbstractConfiguration) {\n+                    ((AbstractConfiguration)configuration).setThrowExceptionOnMissing(this.isThrowExceptionOnMissing());\n                 }\n             }\n         }\n         finally {\n             this.endWrite();\n         }\n     }\n     \n-    public void addConfigurationFirst(final Configuration config) {\n-        this.addConfigurationFirst(config, false);\n+    public void addConfigurationFirst(final Configuration configuration) {\n+        this.addConfigurationFirst(configuration, false);\n     }\n     \n-    public void addConfigurationFirst(final Configuration config, final boolean asInMemory) {\n+    public void addConfigurationFirst(final Configuration configuration, final boolean b) {\n         this.beginWrite(false);\n         try {\n-            if (!this.configList.contains(config)) {\n-                if (asInMemory) {\n-                    this.replaceInMemoryConfiguration(config);\n+            if (!this.configList.contains(configuration)) {\n+                if (b) {\n+                    this.replaceInMemoryConfiguration(configuration);\n                     this.inMemoryConfigIsChild = true;\n                 }\n-                this.configList.add(0, config);\n-                if (config instanceof AbstractConfiguration) {\n-                    ((AbstractConfiguration)config).setThrowExceptionOnMissing(this.isThrowExceptionOnMissing());\n+                this.configList.add(0, configuration);\n+                if (configuration instanceof AbstractConfiguration) {\n+                    ((AbstractConfiguration)configuration).setThrowExceptionOnMissing(this.isThrowExceptionOnMissing());\n                 }\n             }\n         }\n         finally {\n             this.endWrite();\n         }\n     }\n     \n-    public void removeConfiguration(final Configuration config) {\n+    public void removeConfiguration(final Configuration configuration) {\n         this.beginWrite(false);\n         try {\n-            if (!config.equals(this.inMemoryConfiguration)) {\n-                this.configList.remove(config);\n+            if (!configuration.equals(this.inMemoryConfiguration)) {\n+                this.configList.remove(configuration);\n             }\n         }\n         finally {\n             this.endWrite();\n         }\n     }\n     \n@@ -120,112 +120,116 @@\n         this.inMemoryConfiguration = (Configuration)new BaseConfiguration();\n         ((BaseConfiguration)this.inMemoryConfiguration).setThrowExceptionOnMissing(this.isThrowExceptionOnMissing());\n         ((BaseConfiguration)this.inMemoryConfiguration).setListDelimiterHandler(this.getListDelimiterHandler());\n         this.configList.add(this.inMemoryConfiguration);\n         this.inMemoryConfigIsChild = false;\n     }\n     \n-    protected void addPropertyDirect(final String key, final Object token) {\n-        this.inMemoryConfiguration.addProperty(key, token);\n+    protected void addPropertyDirect(final String s, final Object o) {\n+        this.inMemoryConfiguration.addProperty(s, o);\n     }\n     \n-    protected Object getPropertyInternal(final String key) {\n-        Configuration firstMatchingConfiguration = null;\n-        for (final Configuration config : this.configList) {\n-            if (config.containsKey(key)) {\n-                firstMatchingConfiguration = config;\n+    protected Object getPropertyInternal(final String s) {\n+        Configuration configuration = null;\n+        for (final Configuration configuration2 : this.configList) {\n+            if (configuration2.containsKey(s)) {\n+                configuration = configuration2;\n                 break;\n             }\n         }\n-        if (firstMatchingConfiguration != null) {\n-            return firstMatchingConfiguration.getProperty(key);\n+        if (configuration != null) {\n+            return configuration.getProperty(s);\n         }\n         return null;\n     }\n     \n     protected Iterator<String> getKeysInternal() {\n-        final Set<String> keys = new LinkedHashSet<String>();\n-        for (final Configuration config : this.configList) {\n-            final Iterator<String> it = config.getKeys();\n-            while (it.hasNext()) {\n-                keys.add(it.next());\n+        final LinkedHashSet set = new LinkedHashSet();\n+        final Iterator<Configuration> iterator = this.configList.iterator();\n+        while (iterator.hasNext()) {\n+            final Iterator keys = ((Configuration)iterator.next()).getKeys();\n+            while (keys.hasNext()) {\n+                set.add(keys.next());\n             }\n         }\n-        return keys.iterator();\n+        return set.iterator();\n     }\n     \n-    protected Iterator<String> getKeysInternal(final String key) {\n-        final Set<String> keys = new LinkedHashSet<String>();\n-        for (final Configuration config : this.configList) {\n-            final Iterator<String> it = config.getKeys(key);\n-            while (it.hasNext()) {\n-                keys.add(it.next());\n+    protected Iterator<String> getKeysInternal(final String s) {\n+        final LinkedHashSet set = new LinkedHashSet();\n+        final Iterator<Configuration> iterator = this.configList.iterator();\n+        while (iterator.hasNext()) {\n+            final Iterator keys = ((Configuration)iterator.next()).getKeys(s);\n+            while (keys.hasNext()) {\n+                set.add(keys.next());\n             }\n         }\n-        return keys.iterator();\n+        return set.iterator();\n     }\n     \n     protected boolean isEmptyInternal() {\n-        for (final Configuration config : this.configList) {\n-            if (!config.isEmpty()) {\n+        final Iterator<Configuration> iterator = this.configList.iterator();\n+        while (iterator.hasNext()) {\n+            if (!((Configuration)iterator.next()).isEmpty()) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n-    protected void clearPropertyDirect(final String key) {\n-        for (final Configuration config : this.configList) {\n-            config.clearProperty(key);\n+    protected void clearPropertyDirect(final String s) {\n+        final Iterator<Configuration> iterator = this.configList.iterator();\n+        while (iterator.hasNext()) {\n+            ((Configuration)iterator.next()).clearProperty(s);\n         }\n     }\n     \n-    protected boolean containsKeyInternal(final String key) {\n-        for (final Configuration config : this.configList) {\n-            if (config.containsKey(key)) {\n+    protected boolean containsKeyInternal(final String s) {\n+        final Iterator<Configuration> iterator = this.configList.iterator();\n+        while (iterator.hasNext()) {\n+            if (((Configuration)iterator.next()).containsKey(s)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n-    public List<Object> getList(final String key, final List<?> defaultValue) {\n-        final List<Object> list = new ArrayList<Object>();\n-        final Iterator<Configuration> it = this.configList.iterator();\n-        while (it.hasNext() && list.isEmpty()) {\n-            final Configuration config = (Configuration)it.next();\n-            if (config != this.inMemoryConfiguration && config.containsKey(key)) {\n-                this.appendListProperty(list, config, key);\n+    public List<Object> getList(final String s, final List<?> list) {\n+        final ArrayList list2 = new ArrayList();\n+        final Iterator<Configuration> iterator = this.configList.iterator();\n+        while (iterator.hasNext() && list2.isEmpty()) {\n+            final Configuration configuration = (Configuration)iterator.next();\n+            if (configuration != this.inMemoryConfiguration && configuration.containsKey(s)) {\n+                this.appendListProperty(list2, configuration, s);\n             }\n         }\n-        this.appendListProperty(list, this.inMemoryConfiguration, key);\n-        if (list.isEmpty()) {\n-            final List<Object> resultList = (List<Object>)defaultValue;\n-            return resultList;\n+        this.appendListProperty(list2, this.inMemoryConfiguration, s);\n+        if (list2.isEmpty()) {\n+            return (List<Object>)list;\n         }\n-        final ListIterator<Object> lit = list.listIterator();\n-        while (lit.hasNext()) {\n-            lit.set(this.interpolate(lit.next()));\n+        final ListIterator listIterator = list2.listIterator();\n+        while (listIterator.hasNext()) {\n+            listIterator.set(this.interpolate(listIterator.next()));\n         }\n-        return list;\n+        return list2;\n     }\n     \n-    public String[] getStringArray(final String key) {\n-        final List<Object> list = this.getList(key);\n-        final String[] tokens = new String[list.size()];\n-        for (int i = 0; i < tokens.length; ++i) {\n-            tokens[i] = String.valueOf(list.get(i));\n+    public String[] getStringArray(final String s) {\n+        final List list = this.getList(s);\n+        final String[] array = new String[list.size()];\n+        for (int i = 0; i < array.length; ++i) {\n+            array[i] = String.valueOf(list.get(i));\n         }\n-        return tokens;\n+        return array;\n     }\n     \n-    public Configuration getConfiguration(final int index) {\n+    public Configuration getConfiguration(final int n) {\n         this.beginRead(false);\n         try {\n-            return this.configList.get(index);\n+            return this.configList.get(n);\n         }\n         finally {\n             this.endRead();\n         }\n     }\n     \n     public Configuration getInMemoryConfiguration() {\n@@ -236,67 +240,66 @@\n         finally {\n             this.endRead();\n         }\n     }\n     \n     public Object clone() {\n         try {\n-            final CompositeConfiguration copy = (CompositeConfiguration)super.clone();\n-            copy.configList = new LinkedList<Configuration>();\n-            copy.inMemoryConfiguration = ConfigurationUtils.cloneConfiguration(this.getInMemoryConfiguration());\n-            copy.configList.add(copy.inMemoryConfiguration);\n-            for (final Configuration config : this.configList) {\n-                if (config != this.getInMemoryConfiguration()) {\n-                    copy.addConfiguration(ConfigurationUtils.cloneConfiguration(config));\n+            final CompositeConfiguration compositeConfiguration = (CompositeConfiguration)super.clone();\n+            compositeConfiguration.configList = new LinkedList<Configuration>();\n+            compositeConfiguration.inMemoryConfiguration = ConfigurationUtils.cloneConfiguration(this.getInMemoryConfiguration());\n+            compositeConfiguration.configList.add(compositeConfiguration.inMemoryConfiguration);\n+            for (final Configuration configuration : this.configList) {\n+                if (configuration != this.getInMemoryConfiguration()) {\n+                    compositeConfiguration.addConfiguration(ConfigurationUtils.cloneConfiguration(configuration));\n                 }\n             }\n-            copy.cloneInterpolator((AbstractConfiguration)this);\n-            return copy;\n+            compositeConfiguration.cloneInterpolator((AbstractConfiguration)this);\n+            return compositeConfiguration;\n         }\n-        catch (final CloneNotSupportedException cnex) {\n-            throw new ConfigurationRuntimeException((Throwable)cnex);\n+        catch (final CloneNotSupportedException ex) {\n+            throw new ConfigurationRuntimeException((Throwable)ex);\n         }\n     }\n     \n     public void setListDelimiterHandler(final ListDelimiterHandler listDelimiterHandler) {\n         if (this.inMemoryConfiguration instanceof AbstractConfiguration) {\n             ((AbstractConfiguration)this.inMemoryConfiguration).setListDelimiterHandler(listDelimiterHandler);\n         }\n         super.setListDelimiterHandler(listDelimiterHandler);\n     }\n     \n-    public Configuration getSource(final String key) {\n-        if (key == null) {\n+    public Configuration getSource(final String str) {\n+        if (str == null) {\n             throw new IllegalArgumentException(\"Key must not be null!\");\n         }\n-        Configuration source = null;\n-        for (final Configuration conf : this.configList) {\n-            if (conf.containsKey(key)) {\n-                if (source != null) {\n-                    throw new IllegalArgumentException(\"The key \" + key + \" is defined by multiple sources!\");\n+        Configuration configuration = null;\n+        for (final Configuration configuration2 : this.configList) {\n+            if (configuration2.containsKey(str)) {\n+                if (configuration != null) {\n+                    throw new IllegalArgumentException(\"The key \" + str + \" is defined by multiple sources!\");\n                 }\n-                source = conf;\n+                configuration = configuration2;\n             }\n         }\n-        return source;\n+        return configuration;\n     }\n     \n-    private void replaceInMemoryConfiguration(final Configuration config) {\n+    private void replaceInMemoryConfiguration(final Configuration inMemoryConfiguration) {\n         if (!this.inMemoryConfigIsChild) {\n             this.configList.remove(this.inMemoryConfiguration);\n         }\n-        this.inMemoryConfiguration = config;\n+        this.inMemoryConfiguration = inMemoryConfiguration;\n     }\n     \n-    private void appendListProperty(final List<Object> dest, final Configuration config, final String key) {\n-        final Object value = this.interpolate(config.getProperty(key));\n-        if (value != null) {\n-            if (value instanceof Collection) {\n-                final Collection<?> col = (Collection)value;\n-                dest.addAll(col);\n+    private void appendListProperty(final List<Object> list, final Configuration configuration, final String s) {\n+        final Object interpolate = this.interpolate(configuration.getProperty(s));\n+        if (interpolate != null) {\n+            if (interpolate instanceof Collection) {\n+                list.addAll((Collection<? extends Collection>)interpolate);\n             }\n             else {\n-                dest.add(value);\n+                list.add(interpolate);\n             }\n         }\n     }\n }\n"}]}
