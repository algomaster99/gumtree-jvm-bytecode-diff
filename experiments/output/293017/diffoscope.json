{"diffoscope-json-version": 1, "source1": "first/JSONML.class", "source2": "second/JSONML.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,257 +1,250 @@\n-  SHA-256 checksum 6dfa5a7be8aac415ffa3ff71af08fc03886c06acc03feb1fd8fccd97bd732806\n+  SHA-256 checksum 4eb71caa142ced45763eb5f95451c3a9ae4fc42dbd5d72fc8ae77715a083fd5f\n   Compiled from \"JSONML.java\"\n public class org.json.JSONML\n   minor version: 0\n   major version: 50\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #79                         // org/json/JSONML\n   super_class: #80                        // java/lang/Object\n   interfaces: 0, fields: 0, methods: 12, attributes: 1\n Constant pool:\n-    #1 = Methodref          #80.#111      // java/lang/Object.\"<init>\":()V\n-    #2 = Methodref          #60.#112      // org/json/XMLTokener.more:()Z\n-    #3 = String             #113          // Bad XML\n-    #4 = Methodref          #60.#114      // org/json/XMLTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-    #5 = Methodref          #60.#115      // org/json/XMLTokener.nextContent:()Ljava/lang/Object;\n-    #6 = Fieldref           #116.#117     // org/json/XML.LT:Ljava/lang/Character;\n-    #7 = Methodref          #60.#118      // org/json/XMLTokener.nextToken:()Ljava/lang/Object;\n-    #8 = Class              #119          // java/lang/Character\n-    #9 = Fieldref           #116.#120     // org/json/XML.SLASH:Ljava/lang/Character;\n-   #10 = Class              #121          // java/lang/String\n-   #11 = Class              #122          // org/json/JSONException\n-   #12 = Class              #123          // java/lang/StringBuilder\n-   #13 = Methodref          #12.#111      // java/lang/StringBuilder.\"<init>\":()V\n-   #14 = String             #124          // Expected a closing name instead of \\'\n-   #15 = Methodref          #12.#125      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #16 = Methodref          #12.#126      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #17 = String             #127          // \\'.\n-   #18 = Methodref          #12.#128      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #19 = Methodref          #11.#129      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n-   #20 = Fieldref           #116.#130     // org/json/XML.GT:Ljava/lang/Character;\n-   #21 = String             #131          // Misshaped close tag\n-   #22 = Fieldref           #116.#132     // org/json/XML.BANG:Ljava/lang/Character;\n-   #23 = Methodref          #60.#133      // org/json/XMLTokener.next:()C\n-   #24 = String             #134          // -->\n-   #25 = Methodref          #60.#135      // org/json/XMLTokener.skipPast:(Ljava/lang/String;)V\n-   #26 = Methodref          #60.#136      // org/json/XMLTokener.back:()V\n-   #27 = String             #137          // CDATA\n-   #28 = Methodref          #80.#138      // java/lang/Object.equals:(Ljava/lang/Object;)Z\n-   #29 = Methodref          #60.#139      // org/json/XMLTokener.nextCDATA:()Ljava/lang/String;\n-   #30 = Methodref          #38.#140      // org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n-   #31 = String             #141          // Expected \\'CDATA[\\'\n-   #32 = Methodref          #60.#142      // org/json/XMLTokener.nextMeta:()Ljava/lang/Object;\n-   #33 = String             #143          // Missing \\'>\\' after \\'<!\\'.\n-   #34 = Fieldref           #116.#144     // org/json/XML.QUEST:Ljava/lang/Character;\n-   #35 = String             #145          // ?>\n-   #36 = String             #146          // Misshaped tag\n-   #37 = String             #147          // Bad tagName \\'\n-   #38 = Class              #148          // org/json/JSONArray\n-   #39 = Methodref          #38.#111      // org/json/JSONArray.\"<init>\":()V\n-   #40 = Class              #149          // org/json/JSONObject\n-   #41 = Methodref          #40.#111      // org/json/JSONObject.\"<init>\":()V\n-   #42 = String             #150          // tagName\n-   #43 = Methodref          #40.#151      // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #44 = Methodref          #10.#138      // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #45 = String             #152          // childNode\n-   #46 = String             #153          // Reserved attribute.\n-   #47 = Fieldref           #116.#154     // org/json/XML.EQ:Ljava/lang/Character;\n-   #48 = String             #155          // Missing value\n-   #49 = Methodref          #116.#156     // org/json/XML.stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n-   #50 = Methodref          #40.#157      // org/json/JSONObject.accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #51 = String             #158          //\n-   #52 = Methodref          #40.#159      // org/json/JSONObject.length:()I\n-   #53 = Methodref          #79.#160      // org/json/JSONML.parse:(Lorg/json/XMLTokener;ZLorg/json/JSONArray;Z)Ljava/lang/Object;\n-   #54 = String             #161          // Mismatched \\'\n-   #55 = String             #162          // \\' and \\'\n-   #56 = String             #163          // \\'\n-   #57 = Methodref          #38.#159      // org/json/JSONArray.length:()I\n-   #58 = String             #164          // childNodes\n-   #59 = Methodref          #116.#165     // org/json/XML.unescape:(Ljava/lang/String;)Ljava/lang/String;\n-   #60 = Class              #166          // org/json/XMLTokener\n-   #61 = Methodref          #60.#129      // org/json/XMLTokener.\"<init>\":(Ljava/lang/String;)V\n-   #62 = Methodref          #38.#167      // org/json/JSONArray.getString:(I)Ljava/lang/String;\n-   #63 = Methodref          #116.#168     // org/json/XML.noSpace:(Ljava/lang/String;)V\n-   #64 = Methodref          #116.#169     // org/json/XML.escape:(Ljava/lang/String;)Ljava/lang/String;\n-   #65 = Methodref          #12.#170      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-   #66 = Methodref          #38.#171      // org/json/JSONArray.opt:(I)Ljava/lang/Object;\n-   #67 = Methodref          #40.#172      // org/json/JSONObject.keySet:()Ljava/util/Set;\n-   #68 = InterfaceMethodref #173.#174     // java/util/Set.iterator:()Ljava/util/Iterator;\n-   #69 = InterfaceMethodref #175.#176     // java/util/Iterator.hasNext:()Z\n-   #70 = InterfaceMethodref #175.#177     // java/util/Iterator.next:()Ljava/lang/Object;\n-   #71 = Methodref          #40.#178      // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n-   #72 = Methodref          #80.#128      // java/lang/Object.toString:()Ljava/lang/String;\n-   #73 = Methodref          #38.#179      // org/json/JSONArray.get:(I)Ljava/lang/Object;\n-   #74 = Methodref          #79.#180      // org/json/JSONML.toString:(Lorg/json/JSONObject;)Ljava/lang/String;\n-   #75 = Methodref          #79.#181      // org/json/JSONML.toString:(Lorg/json/JSONArray;)Ljava/lang/String;\n-   #76 = Methodref          #40.#182      // org/json/JSONObject.optString:(Ljava/lang/String;)Ljava/lang/String;\n-   #77 = Methodref          #40.#128      // org/json/JSONObject.toString:()Ljava/lang/String;\n-   #78 = Methodref          #40.#183      // org/json/JSONObject.optJSONArray:(Ljava/lang/String;)Lorg/json/JSONArray;\n-   #79 = Class              #184          // org/json/JSONML\n-   #80 = Class              #185          // java/lang/Object\n+    #1 = Methodref          #80.#105      // java/lang/Object.\"<init>\":()V\n+    #2 = Methodref          #60.#106      // org/json/XMLTokener.more:()Z\n+    #3 = String             #107          // Bad XML\n+    #4 = Methodref          #60.#108      // org/json/XMLTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+    #5 = Methodref          #60.#109      // org/json/XMLTokener.nextContent:()Ljava/lang/Object;\n+    #6 = Fieldref           #110.#111     // org/json/XML.LT:Ljava/lang/Character;\n+    #7 = Methodref          #60.#112      // org/json/XMLTokener.nextToken:()Ljava/lang/Object;\n+    #8 = Class              #113          // java/lang/Character\n+    #9 = Fieldref           #110.#114     // org/json/XML.SLASH:Ljava/lang/Character;\n+   #10 = Class              #115          // java/lang/String\n+   #11 = Class              #116          // org/json/JSONException\n+   #12 = Class              #117          // java/lang/StringBuilder\n+   #13 = Methodref          #12.#105      // java/lang/StringBuilder.\"<init>\":()V\n+   #14 = String             #118          // Expected a closing name instead of \\'\n+   #15 = Methodref          #12.#119      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #16 = Methodref          #12.#120      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #17 = String             #121          // \\'.\n+   #18 = Methodref          #12.#122      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #19 = Methodref          #11.#123      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n+   #20 = Fieldref           #110.#124     // org/json/XML.GT:Ljava/lang/Character;\n+   #21 = String             #125          // Misshaped close tag\n+   #22 = Fieldref           #110.#126     // org/json/XML.BANG:Ljava/lang/Character;\n+   #23 = Methodref          #60.#127      // org/json/XMLTokener.next:()C\n+   #24 = String             #128          // -->\n+   #25 = Methodref          #60.#129      // org/json/XMLTokener.skipPast:(Ljava/lang/String;)V\n+   #26 = Methodref          #60.#130      // org/json/XMLTokener.back:()V\n+   #27 = String             #131          // CDATA\n+   #28 = Methodref          #80.#132      // java/lang/Object.equals:(Ljava/lang/Object;)Z\n+   #29 = Methodref          #60.#133      // org/json/XMLTokener.nextCDATA:()Ljava/lang/String;\n+   #30 = Methodref          #38.#134      // org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n+   #31 = String             #135          // Expected \\'CDATA[\\'\n+   #32 = Methodref          #60.#136      // org/json/XMLTokener.nextMeta:()Ljava/lang/Object;\n+   #33 = String             #137          // Missing \\'>\\' after \\'<!\\'.\n+   #34 = Fieldref           #110.#138     // org/json/XML.QUEST:Ljava/lang/Character;\n+   #35 = String             #139          // ?>\n+   #36 = String             #140          // Misshaped tag\n+   #37 = String             #141          // Bad tagName \\'\n+   #38 = Class              #142          // org/json/JSONArray\n+   #39 = Methodref          #38.#105      // org/json/JSONArray.\"<init>\":()V\n+   #40 = Class              #143          // org/json/JSONObject\n+   #41 = Methodref          #40.#105      // org/json/JSONObject.\"<init>\":()V\n+   #42 = String             #144          // tagName\n+   #43 = Methodref          #40.#145      // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #44 = Methodref          #10.#132      // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #45 = String             #146          // childNode\n+   #46 = String             #147          // Reserved attribute.\n+   #47 = Fieldref           #110.#148     // org/json/XML.EQ:Ljava/lang/Character;\n+   #48 = String             #149          // Missing value\n+   #49 = Methodref          #110.#150     // org/json/XML.stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n+   #50 = Methodref          #40.#151      // org/json/JSONObject.accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #51 = String             #152          //\n+   #52 = Methodref          #40.#153      // org/json/JSONObject.length:()I\n+   #53 = Methodref          #79.#154      // org/json/JSONML.parse:(Lorg/json/XMLTokener;ZLorg/json/JSONArray;Z)Ljava/lang/Object;\n+   #54 = String             #155          // Mismatched \\'\n+   #55 = String             #156          // \\' and \\'\n+   #56 = String             #157          // \\'\n+   #57 = Methodref          #38.#153      // org/json/JSONArray.length:()I\n+   #58 = String             #158          // childNodes\n+   #59 = Methodref          #110.#159     // org/json/XML.unescape:(Ljava/lang/String;)Ljava/lang/String;\n+   #60 = Class              #160          // org/json/XMLTokener\n+   #61 = Methodref          #60.#123      // org/json/XMLTokener.\"<init>\":(Ljava/lang/String;)V\n+   #62 = Methodref          #38.#161      // org/json/JSONArray.getString:(I)Ljava/lang/String;\n+   #63 = Methodref          #110.#162     // org/json/XML.noSpace:(Ljava/lang/String;)V\n+   #64 = Methodref          #110.#163     // org/json/XML.escape:(Ljava/lang/String;)Ljava/lang/String;\n+   #65 = Methodref          #12.#164      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+   #66 = Methodref          #38.#165      // org/json/JSONArray.opt:(I)Ljava/lang/Object;\n+   #67 = Methodref          #40.#166      // org/json/JSONObject.keySet:()Ljava/util/Set;\n+   #68 = InterfaceMethodref #167.#168     // java/util/Set.iterator:()Ljava/util/Iterator;\n+   #69 = InterfaceMethodref #101.#169     // java/util/Iterator.hasNext:()Z\n+   #70 = InterfaceMethodref #101.#170     // java/util/Iterator.next:()Ljava/lang/Object;\n+   #71 = Methodref          #40.#171      // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n+   #72 = Methodref          #80.#122      // java/lang/Object.toString:()Ljava/lang/String;\n+   #73 = Methodref          #38.#172      // org/json/JSONArray.get:(I)Ljava/lang/Object;\n+   #74 = Methodref          #79.#173      // org/json/JSONML.toString:(Lorg/json/JSONObject;)Ljava/lang/String;\n+   #75 = Methodref          #79.#174      // org/json/JSONML.toString:(Lorg/json/JSONArray;)Ljava/lang/String;\n+   #76 = Methodref          #40.#175      // org/json/JSONObject.optString:(Ljava/lang/String;)Ljava/lang/String;\n+   #77 = Methodref          #40.#122      // org/json/JSONObject.toString:()Ljava/lang/String;\n+   #78 = Methodref          #40.#176      // org/json/JSONObject.optJSONArray:(Ljava/lang/String;)Lorg/json/JSONArray;\n+   #79 = Class              #177          // org/json/JSONML\n+   #80 = Class              #178          // java/lang/Object\n    #81 = Utf8               <init>\n    #82 = Utf8               ()V\n    #83 = Utf8               Code\n    #84 = Utf8               LineNumberTable\n    #85 = Utf8               parse\n    #86 = Utf8               (Lorg/json/XMLTokener;ZLorg/json/JSONArray;Z)Ljava/lang/Object;\n    #87 = Utf8               StackMapTable\n-   #88 = Class              #166          // org/json/XMLTokener\n-   #89 = Class              #148          // org/json/JSONArray\n-   #90 = Class              #121          // java/lang/String\n-   #91 = Class              #149          // org/json/JSONObject\n-   #92 = Class              #185          // java/lang/Object\n-   #93 = Utf8               Exceptions\n-   #94 = Utf8               toJSONArray\n-   #95 = Utf8               (Ljava/lang/String;)Lorg/json/JSONArray;\n-   #96 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONArray;\n-   #97 = Utf8               (Lorg/json/XMLTokener;Z)Lorg/json/JSONArray;\n-   #98 = Utf8               (Lorg/json/XMLTokener;)Lorg/json/JSONArray;\n-   #99 = Utf8               toJSONObject\n-  #100 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n-  #101 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n-  #102 = Utf8               (Lorg/json/XMLTokener;)Lorg/json/JSONObject;\n-  #103 = Utf8               (Lorg/json/XMLTokener;Z)Lorg/json/JSONObject;\n-  #104 = Utf8               toString\n-  #105 = Utf8               (Lorg/json/JSONArray;)Ljava/lang/String;\n-  #106 = Class              #123          // java/lang/StringBuilder\n-  #107 = Class              #186          // java/util/Iterator\n-  #108 = Utf8               (Lorg/json/JSONObject;)Ljava/lang/String;\n-  #109 = Utf8               SourceFile\n-  #110 = Utf8               JSONML.java\n-  #111 = NameAndType        #81:#82       // \"<init>\":()V\n-  #112 = NameAndType        #187:#188     // more:()Z\n-  #113 = Utf8               Bad XML\n-  #114 = NameAndType        #189:#190     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-  #115 = NameAndType        #191:#192     // nextContent:()Ljava/lang/Object;\n-  #116 = Class              #193          // org/json/XML\n-  #117 = NameAndType        #194:#195     // LT:Ljava/lang/Character;\n-  #118 = NameAndType        #196:#192     // nextToken:()Ljava/lang/Object;\n-  #119 = Utf8               java/lang/Character\n-  #120 = NameAndType        #197:#195     // SLASH:Ljava/lang/Character;\n-  #121 = Utf8               java/lang/String\n-  #122 = Utf8               org/json/JSONException\n-  #123 = Utf8               java/lang/StringBuilder\n-  #124 = Utf8               Expected a closing name instead of \\'\n-  #125 = NameAndType        #198:#199     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #126 = NameAndType        #198:#200     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #127 = Utf8               \\'.\n-  #128 = NameAndType        #104:#201     // toString:()Ljava/lang/String;\n-  #129 = NameAndType        #81:#202      // \"<init>\":(Ljava/lang/String;)V\n-  #130 = NameAndType        #203:#195     // GT:Ljava/lang/Character;\n-  #131 = Utf8               Misshaped close tag\n-  #132 = NameAndType        #204:#195     // BANG:Ljava/lang/Character;\n-  #133 = NameAndType        #205:#206     // next:()C\n-  #134 = Utf8               -->\n-  #135 = NameAndType        #207:#202     // skipPast:(Ljava/lang/String;)V\n-  #136 = NameAndType        #208:#82      // back:()V\n-  #137 = Utf8               CDATA\n-  #138 = NameAndType        #209:#210     // equals:(Ljava/lang/Object;)Z\n-  #139 = NameAndType        #211:#201     // nextCDATA:()Ljava/lang/String;\n-  #140 = NameAndType        #212:#213     // put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n-  #141 = Utf8               Expected \\'CDATA[\\'\n-  #142 = NameAndType        #214:#192     // nextMeta:()Ljava/lang/Object;\n-  #143 = Utf8               Missing \\'>\\' after \\'<!\\'.\n-  #144 = NameAndType        #215:#195     // QUEST:Ljava/lang/Character;\n-  #145 = Utf8               ?>\n-  #146 = Utf8               Misshaped tag\n-  #147 = Utf8               Bad tagName \\'\n-  #148 = Utf8               org/json/JSONArray\n-  #149 = Utf8               org/json/JSONObject\n-  #150 = Utf8               tagName\n-  #151 = NameAndType        #212:#216     // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #152 = Utf8               childNode\n-  #153 = Utf8               Reserved attribute.\n-  #154 = NameAndType        #217:#195     // EQ:Ljava/lang/Character;\n-  #155 = Utf8               Missing value\n-  #156 = NameAndType        #218:#219     // stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n-  #157 = NameAndType        #220:#216     // accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #158 = Utf8\n-  #159 = NameAndType        #221:#222     // length:()I\n-  #160 = NameAndType        #85:#86       // parse:(Lorg/json/XMLTokener;ZLorg/json/JSONArray;Z)Ljava/lang/Object;\n-  #161 = Utf8               Mismatched \\'\n-  #162 = Utf8               \\' and \\'\n-  #163 = Utf8               \\'\n-  #164 = Utf8               childNodes\n-  #165 = NameAndType        #223:#224     // unescape:(Ljava/lang/String;)Ljava/lang/String;\n-  #166 = Utf8               org/json/XMLTokener\n-  #167 = NameAndType        #225:#226     // getString:(I)Ljava/lang/String;\n-  #168 = NameAndType        #227:#202     // noSpace:(Ljava/lang/String;)V\n-  #169 = NameAndType        #228:#224     // escape:(Ljava/lang/String;)Ljava/lang/String;\n-  #170 = NameAndType        #198:#229     // append:(C)Ljava/lang/StringBuilder;\n-  #171 = NameAndType        #230:#231     // opt:(I)Ljava/lang/Object;\n-  #172 = NameAndType        #232:#233     // keySet:()Ljava/util/Set;\n-  #173 = Class              #234          // java/util/Set\n-  #174 = NameAndType        #235:#236     // iterator:()Ljava/util/Iterator;\n-  #175 = Class              #186          // java/util/Iterator\n-  #176 = NameAndType        #237:#188     // hasNext:()Z\n-  #177 = NameAndType        #205:#192     // next:()Ljava/lang/Object;\n-  #178 = NameAndType        #230:#219     // opt:(Ljava/lang/String;)Ljava/lang/Object;\n-  #179 = NameAndType        #238:#231     // get:(I)Ljava/lang/Object;\n-  #180 = NameAndType        #104:#108     // toString:(Lorg/json/JSONObject;)Ljava/lang/String;\n-  #181 = NameAndType        #104:#105     // toString:(Lorg/json/JSONArray;)Ljava/lang/String;\n-  #182 = NameAndType        #239:#224     // optString:(Ljava/lang/String;)Ljava/lang/String;\n-  #183 = NameAndType        #240:#95      // optJSONArray:(Ljava/lang/String;)Lorg/json/JSONArray;\n-  #184 = Utf8               org/json/JSONML\n-  #185 = Utf8               java/lang/Object\n-  #186 = Utf8               java/util/Iterator\n-  #187 = Utf8               more\n-  #188 = Utf8               ()Z\n-  #189 = Utf8               syntaxError\n-  #190 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n-  #191 = Utf8               nextContent\n-  #192 = Utf8               ()Ljava/lang/Object;\n-  #193 = Utf8               org/json/XML\n-  #194 = Utf8               LT\n-  #195 = Utf8               Ljava/lang/Character;\n-  #196 = Utf8               nextToken\n-  #197 = Utf8               SLASH\n-  #198 = Utf8               append\n-  #199 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #200 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #201 = Utf8               ()Ljava/lang/String;\n-  #202 = Utf8               (Ljava/lang/String;)V\n-  #203 = Utf8               GT\n-  #204 = Utf8               BANG\n-  #205 = Utf8               next\n-  #206 = Utf8               ()C\n-  #207 = Utf8               skipPast\n-  #208 = Utf8               back\n-  #209 = Utf8               equals\n-  #210 = Utf8               (Ljava/lang/Object;)Z\n-  #211 = Utf8               nextCDATA\n-  #212 = Utf8               put\n-  #213 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONArray;\n-  #214 = Utf8               nextMeta\n-  #215 = Utf8               QUEST\n-  #216 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #217 = Utf8               EQ\n-  #218 = Utf8               stringToValue\n-  #219 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n-  #220 = Utf8               accumulate\n-  #221 = Utf8               length\n-  #222 = Utf8               ()I\n-  #223 = Utf8               unescape\n-  #224 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #225 = Utf8               getString\n-  #226 = Utf8               (I)Ljava/lang/String;\n-  #227 = Utf8               noSpace\n-  #228 = Utf8               escape\n-  #229 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #230 = Utf8               opt\n-  #231 = Utf8               (I)Ljava/lang/Object;\n-  #232 = Utf8               keySet\n-  #233 = Utf8               ()Ljava/util/Set;\n-  #234 = Utf8               java/util/Set\n-  #235 = Utf8               iterator\n-  #236 = Utf8               ()Ljava/util/Iterator;\n-  #237 = Utf8               hasNext\n-  #238 = Utf8               get\n-  #239 = Utf8               optString\n-  #240 = Utf8               optJSONArray\n+   #88 = Utf8               Exceptions\n+   #89 = Utf8               toJSONArray\n+   #90 = Utf8               (Ljava/lang/String;)Lorg/json/JSONArray;\n+   #91 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONArray;\n+   #92 = Utf8               (Lorg/json/XMLTokener;Z)Lorg/json/JSONArray;\n+   #93 = Utf8               (Lorg/json/XMLTokener;)Lorg/json/JSONArray;\n+   #94 = Utf8               toJSONObject\n+   #95 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n+   #96 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n+   #97 = Utf8               (Lorg/json/XMLTokener;)Lorg/json/JSONObject;\n+   #98 = Utf8               (Lorg/json/XMLTokener;Z)Lorg/json/JSONObject;\n+   #99 = Utf8               toString\n+  #100 = Utf8               (Lorg/json/JSONArray;)Ljava/lang/String;\n+  #101 = Class              #179          // java/util/Iterator\n+  #102 = Utf8               (Lorg/json/JSONObject;)Ljava/lang/String;\n+  #103 = Utf8               SourceFile\n+  #104 = Utf8               JSONML.java\n+  #105 = NameAndType        #81:#82       // \"<init>\":()V\n+  #106 = NameAndType        #180:#181     // more:()Z\n+  #107 = Utf8               Bad XML\n+  #108 = NameAndType        #182:#183     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+  #109 = NameAndType        #184:#185     // nextContent:()Ljava/lang/Object;\n+  #110 = Class              #186          // org/json/XML\n+  #111 = NameAndType        #187:#188     // LT:Ljava/lang/Character;\n+  #112 = NameAndType        #189:#185     // nextToken:()Ljava/lang/Object;\n+  #113 = Utf8               java/lang/Character\n+  #114 = NameAndType        #190:#188     // SLASH:Ljava/lang/Character;\n+  #115 = Utf8               java/lang/String\n+  #116 = Utf8               org/json/JSONException\n+  #117 = Utf8               java/lang/StringBuilder\n+  #118 = Utf8               Expected a closing name instead of \\'\n+  #119 = NameAndType        #191:#192     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #120 = NameAndType        #191:#193     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #121 = Utf8               \\'.\n+  #122 = NameAndType        #99:#194      // toString:()Ljava/lang/String;\n+  #123 = NameAndType        #81:#195      // \"<init>\":(Ljava/lang/String;)V\n+  #124 = NameAndType        #196:#188     // GT:Ljava/lang/Character;\n+  #125 = Utf8               Misshaped close tag\n+  #126 = NameAndType        #197:#188     // BANG:Ljava/lang/Character;\n+  #127 = NameAndType        #198:#199     // next:()C\n+  #128 = Utf8               -->\n+  #129 = NameAndType        #200:#195     // skipPast:(Ljava/lang/String;)V\n+  #130 = NameAndType        #201:#82      // back:()V\n+  #131 = Utf8               CDATA\n+  #132 = NameAndType        #202:#203     // equals:(Ljava/lang/Object;)Z\n+  #133 = NameAndType        #204:#194     // nextCDATA:()Ljava/lang/String;\n+  #134 = NameAndType        #205:#206     // put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n+  #135 = Utf8               Expected \\'CDATA[\\'\n+  #136 = NameAndType        #207:#185     // nextMeta:()Ljava/lang/Object;\n+  #137 = Utf8               Missing \\'>\\' after \\'<!\\'.\n+  #138 = NameAndType        #208:#188     // QUEST:Ljava/lang/Character;\n+  #139 = Utf8               ?>\n+  #140 = Utf8               Misshaped tag\n+  #141 = Utf8               Bad tagName \\'\n+  #142 = Utf8               org/json/JSONArray\n+  #143 = Utf8               org/json/JSONObject\n+  #144 = Utf8               tagName\n+  #145 = NameAndType        #205:#209     // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #146 = Utf8               childNode\n+  #147 = Utf8               Reserved attribute.\n+  #148 = NameAndType        #210:#188     // EQ:Ljava/lang/Character;\n+  #149 = Utf8               Missing value\n+  #150 = NameAndType        #211:#212     // stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n+  #151 = NameAndType        #213:#209     // accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #152 = Utf8\n+  #153 = NameAndType        #214:#215     // length:()I\n+  #154 = NameAndType        #85:#86       // parse:(Lorg/json/XMLTokener;ZLorg/json/JSONArray;Z)Ljava/lang/Object;\n+  #155 = Utf8               Mismatched \\'\n+  #156 = Utf8               \\' and \\'\n+  #157 = Utf8               \\'\n+  #158 = Utf8               childNodes\n+  #159 = NameAndType        #216:#217     // unescape:(Ljava/lang/String;)Ljava/lang/String;\n+  #160 = Utf8               org/json/XMLTokener\n+  #161 = NameAndType        #218:#219     // getString:(I)Ljava/lang/String;\n+  #162 = NameAndType        #220:#195     // noSpace:(Ljava/lang/String;)V\n+  #163 = NameAndType        #221:#217     // escape:(Ljava/lang/String;)Ljava/lang/String;\n+  #164 = NameAndType        #191:#222     // append:(C)Ljava/lang/StringBuilder;\n+  #165 = NameAndType        #223:#224     // opt:(I)Ljava/lang/Object;\n+  #166 = NameAndType        #225:#226     // keySet:()Ljava/util/Set;\n+  #167 = Class              #227          // java/util/Set\n+  #168 = NameAndType        #228:#229     // iterator:()Ljava/util/Iterator;\n+  #169 = NameAndType        #230:#181     // hasNext:()Z\n+  #170 = NameAndType        #198:#185     // next:()Ljava/lang/Object;\n+  #171 = NameAndType        #223:#212     // opt:(Ljava/lang/String;)Ljava/lang/Object;\n+  #172 = NameAndType        #231:#224     // get:(I)Ljava/lang/Object;\n+  #173 = NameAndType        #99:#102      // toString:(Lorg/json/JSONObject;)Ljava/lang/String;\n+  #174 = NameAndType        #99:#100      // toString:(Lorg/json/JSONArray;)Ljava/lang/String;\n+  #175 = NameAndType        #232:#217     // optString:(Ljava/lang/String;)Ljava/lang/String;\n+  #176 = NameAndType        #233:#90      // optJSONArray:(Ljava/lang/String;)Lorg/json/JSONArray;\n+  #177 = Utf8               org/json/JSONML\n+  #178 = Utf8               java/lang/Object\n+  #179 = Utf8               java/util/Iterator\n+  #180 = Utf8               more\n+  #181 = Utf8               ()Z\n+  #182 = Utf8               syntaxError\n+  #183 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n+  #184 = Utf8               nextContent\n+  #185 = Utf8               ()Ljava/lang/Object;\n+  #186 = Utf8               org/json/XML\n+  #187 = Utf8               LT\n+  #188 = Utf8               Ljava/lang/Character;\n+  #189 = Utf8               nextToken\n+  #190 = Utf8               SLASH\n+  #191 = Utf8               append\n+  #192 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #193 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #194 = Utf8               ()Ljava/lang/String;\n+  #195 = Utf8               (Ljava/lang/String;)V\n+  #196 = Utf8               GT\n+  #197 = Utf8               BANG\n+  #198 = Utf8               next\n+  #199 = Utf8               ()C\n+  #200 = Utf8               skipPast\n+  #201 = Utf8               back\n+  #202 = Utf8               equals\n+  #203 = Utf8               (Ljava/lang/Object;)Z\n+  #204 = Utf8               nextCDATA\n+  #205 = Utf8               put\n+  #206 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONArray;\n+  #207 = Utf8               nextMeta\n+  #208 = Utf8               QUEST\n+  #209 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #210 = Utf8               EQ\n+  #211 = Utf8               stringToValue\n+  #212 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n+  #213 = Utf8               accumulate\n+  #214 = Utf8               length\n+  #215 = Utf8               ()I\n+  #216 = Utf8               unescape\n+  #217 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #218 = Utf8               getString\n+  #219 = Utf8               (I)Ljava/lang/String;\n+  #220 = Utf8               noSpace\n+  #221 = Utf8               escape\n+  #222 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #223 = Utf8               opt\n+  #224 = Utf8               (I)Ljava/lang/Object;\n+  #225 = Utf8               keySet\n+  #226 = Utf8               ()Ljava/util/Set;\n+  #227 = Utf8               java/util/Set\n+  #228 = Utf8               iterator\n+  #229 = Utf8               ()Ljava/util/Iterator;\n+  #230 = Utf8               hasNext\n+  #231 = Utf8               get\n+  #232 = Utf8               optString\n+  #233 = Utf8               optJSONArray\n {\n   public org.json.JSONML();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -724,15 +717,16 @@\n         line 212: 732\n         line 214: 742\n         line 215: 746\n         line 216: 750\n         line 218: 753\n         line 224: 756\n         line 225: 760\n-        line 226: 778\n+        line 226: 769\n+        line 227: 795\n         line 225: 797\n       StackMapTable: number_of_entries = 42\n         frame_type = 255 /* full_frame */\n           offset_delta = 12\n           locals = [ class org/json/XMLTokener, int, class org/json/JSONArray, int, top, top, class java/lang/String, top, class org/json/JSONArray, class org/json/JSONObject, top, class java/lang/String ]\n           stack = []\n         frame_type = 13 /* same */\n"}]}
