{"diffoscope-json-version": 1, "source1": "first/SegmentHeader.class", "source2": "second/SegmentHeader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -45,20 +45,20 @@\n     public SegmentHeader() {\n         super(1, (SegmentHeader)null);\n         this.band_headers = new IntList();\n         this.have_all_code_flags = true;\n         this.majverCounter = new SegmentHeader.Counter((SegmentHeader.SegmentHeader$1)null);\n     }\n     \n-    public void addMajorVersion(final int major) {\n-        this.majverCounter.add(major);\n+    public void addMajorVersion(final int n) {\n+        this.majverCounter.add(n);\n     }\n     \n-    public void appendBandCodingSpecifier(final int specifier) {\n-        this.band_headers.add(specifier);\n+    public void appendBandCodingSpecifier(final int n) {\n+        this.band_headers.add(n);\n     }\n     \n     private void calculateArchiveOptions() {\n         if (this.attribute_definition_count > 0 || this.band_headers.size() > 0) {\n             this.archive_options |= 0x1;\n         }\n         if (this.cp_Int_count > 0 || this.cp_Float_count > 0 || this.cp_Long_count > 0 || this.cp_Double_count > 0) {\n@@ -128,83 +128,83 @@\n         return this.have_file_size_hi;\n     }\n     \n     public boolean have_method_flags_hi() {\n         return this.have_method_flags_hi;\n     }\n     \n-    public void pack(final OutputStream out) throws IOException, Pack200Exception {\n-        out.write(this.encodeScalar(SegmentHeader.magic, Codec.BYTE1));\n-        out.write(this.encodeScalar(7, Codec.UNSIGNED5));\n-        out.write(this.encodeScalar(150, Codec.UNSIGNED5));\n+    public void pack(final OutputStream outputStream) throws IOException, Pack200Exception {\n+        outputStream.write(this.encodeScalar(SegmentHeader.magic, Codec.BYTE1));\n+        outputStream.write(this.encodeScalar(7, Codec.UNSIGNED5));\n+        outputStream.write(this.encodeScalar(150, Codec.UNSIGNED5));\n         this.calculateArchiveOptions();\n-        out.write(this.encodeScalar(this.archive_options, Codec.UNSIGNED5));\n-        this.writeArchiveFileCounts(out);\n-        this.writeArchiveSpecialCounts(out);\n-        this.writeCpCounts(out);\n-        this.writeClassCounts(out);\n+        outputStream.write(this.encodeScalar(this.archive_options, Codec.UNSIGNED5));\n+        this.writeArchiveFileCounts(outputStream);\n+        this.writeArchiveSpecialCounts(outputStream);\n+        this.writeCpCounts(outputStream);\n+        this.writeClassCounts(outputStream);\n         if (this.band_headers.size() > 0) {\n-            out.write(this.encodeScalar(this.band_headers.toArray(), Codec.BYTE1));\n+            outputStream.write(this.encodeScalar(this.band_headers.toArray(), Codec.BYTE1));\n         }\n     }\n     \n     public void setAttribute_definition_count(final int attribute_definition_count) {\n         this.attribute_definition_count = attribute_definition_count;\n     }\n     \n     public void setClass_count(final int class_count) {\n         this.class_count = class_count;\n     }\n     \n-    public void setCp_Class_count(final int count) {\n-        this.cp_Class_count = count;\n+    public void setCp_Class_count(final int cp_Class_count) {\n+        this.cp_Class_count = cp_Class_count;\n     }\n     \n-    public void setCp_Descr_count(final int count) {\n-        this.cp_Descr_count = count;\n+    public void setCp_Descr_count(final int cp_Descr_count) {\n+        this.cp_Descr_count = cp_Descr_count;\n     }\n     \n-    public void setCp_Double_count(final int count) {\n-        this.cp_Double_count = count;\n+    public void setCp_Double_count(final int cp_Double_count) {\n+        this.cp_Double_count = cp_Double_count;\n     }\n     \n-    public void setCp_Field_count(final int count) {\n-        this.cp_Field_count = count;\n+    public void setCp_Field_count(final int cp_Field_count) {\n+        this.cp_Field_count = cp_Field_count;\n     }\n     \n-    public void setCp_Float_count(final int count) {\n-        this.cp_Float_count = count;\n+    public void setCp_Float_count(final int cp_Float_count) {\n+        this.cp_Float_count = cp_Float_count;\n     }\n     \n-    public void setCp_Imethod_count(final int count) {\n-        this.cp_Imethod_count = count;\n+    public void setCp_Imethod_count(final int cp_Imethod_count) {\n+        this.cp_Imethod_count = cp_Imethod_count;\n     }\n     \n-    public void setCp_Int_count(final int count) {\n-        this.cp_Int_count = count;\n+    public void setCp_Int_count(final int cp_Int_count) {\n+        this.cp_Int_count = cp_Int_count;\n     }\n     \n-    public void setCp_Long_count(final int count) {\n-        this.cp_Long_count = count;\n+    public void setCp_Long_count(final int cp_Long_count) {\n+        this.cp_Long_count = cp_Long_count;\n     }\n     \n-    public void setCp_Method_count(final int count) {\n-        this.cp_Method_count = count;\n+    public void setCp_Method_count(final int cp_Method_count) {\n+        this.cp_Method_count = cp_Method_count;\n     }\n     \n-    public void setCp_Signature_count(final int count) {\n-        this.cp_Signature_count = count;\n+    public void setCp_Signature_count(final int cp_Signature_count) {\n+        this.cp_Signature_count = cp_Signature_count;\n     }\n     \n-    public void setCp_String_count(final int count) {\n-        this.cp_String_count = count;\n+    public void setCp_String_count(final int cp_String_count) {\n+        this.cp_String_count = cp_String_count;\n     }\n     \n-    public void setCp_Utf8_count(final int count) {\n-        this.cp_Utf8_count = count;\n+    public void setCp_Utf8_count(final int cp_Utf8_count) {\n+        this.cp_Utf8_count = cp_Utf8_count;\n     }\n     \n     public void setDeflate_hint(final boolean deflate_hint) {\n         this.deflate_hint = deflate_hint;\n     }\n     \n     public void setFile_count(final int file_count) {\n@@ -231,54 +231,53 @@\n         this.have_method_flags_hi = have_method_flags_hi;\n     }\n     \n     public void setIc_count(final int ic_count) {\n         this.ic_count = ic_count;\n     }\n     \n-    private void writeArchiveFileCounts(final OutputStream out) throws IOException, Pack200Exception {\n+    private void writeArchiveFileCounts(final OutputStream outputStream) throws IOException, Pack200Exception {\n         if ((this.archive_options & 0x10) > 0) {\n-            out.write(this.encodeScalar(this.archive_size_hi, Codec.UNSIGNED5));\n-            out.write(this.encodeScalar(this.archive_size_lo, Codec.UNSIGNED5));\n-            out.write(this.encodeScalar(this.archive_next_count, Codec.UNSIGNED5));\n-            out.write(this.encodeScalar(this.archive_modtime, Codec.UNSIGNED5));\n-            out.write(this.encodeScalar(this.file_count, Codec.UNSIGNED5));\n+            outputStream.write(this.encodeScalar(this.archive_size_hi, Codec.UNSIGNED5));\n+            outputStream.write(this.encodeScalar(this.archive_size_lo, Codec.UNSIGNED5));\n+            outputStream.write(this.encodeScalar(this.archive_next_count, Codec.UNSIGNED5));\n+            outputStream.write(this.encodeScalar(this.archive_modtime, Codec.UNSIGNED5));\n+            outputStream.write(this.encodeScalar(this.file_count, Codec.UNSIGNED5));\n         }\n     }\n     \n-    private void writeArchiveSpecialCounts(final OutputStream out) throws IOException, Pack200Exception {\n+    private void writeArchiveSpecialCounts(final OutputStream outputStream) throws IOException, Pack200Exception {\n         if ((this.archive_options & 0x1) > 0) {\n-            out.write(this.encodeScalar(this.band_headers.size(), Codec.UNSIGNED5));\n-            out.write(this.encodeScalar(this.attribute_definition_count, Codec.UNSIGNED5));\n+            outputStream.write(this.encodeScalar(this.band_headers.size(), Codec.UNSIGNED5));\n+            outputStream.write(this.encodeScalar(this.attribute_definition_count, Codec.UNSIGNED5));\n         }\n     }\n     \n-    private void writeClassCounts(final OutputStream out) throws IOException, Pack200Exception {\n-        final int default_class_minver = 0;\n-        final int default_class_majver = this.majverCounter.getMostCommon();\n-        out.write(this.encodeScalar(this.ic_count, Codec.UNSIGNED5));\n-        out.write(this.encodeScalar(0, Codec.UNSIGNED5));\n-        out.write(this.encodeScalar(default_class_majver, Codec.UNSIGNED5));\n-        out.write(this.encodeScalar(this.class_count, Codec.UNSIGNED5));\n+    private void writeClassCounts(final OutputStream outputStream) throws IOException, Pack200Exception {\n+        final int mostCommon = this.majverCounter.getMostCommon();\n+        outputStream.write(this.encodeScalar(this.ic_count, Codec.UNSIGNED5));\n+        outputStream.write(this.encodeScalar(0, Codec.UNSIGNED5));\n+        outputStream.write(this.encodeScalar(mostCommon, Codec.UNSIGNED5));\n+        outputStream.write(this.encodeScalar(this.class_count, Codec.UNSIGNED5));\n     }\n     \n-    private void writeCpCounts(final OutputStream out) throws IOException, Pack200Exception {\n-        out.write(this.encodeScalar(this.cp_Utf8_count, Codec.UNSIGNED5));\n+    private void writeCpCounts(final OutputStream outputStream) throws IOException, Pack200Exception {\n+        outputStream.write(this.encodeScalar(this.cp_Utf8_count, Codec.UNSIGNED5));\n         if ((this.archive_options & 0x2) != 0x0) {\n-            out.write(this.encodeScalar(this.cp_Int_count, Codec.UNSIGNED5));\n-            out.write(this.encodeScalar(this.cp_Float_count, Codec.UNSIGNED5));\n-            out.write(this.encodeScalar(this.cp_Long_count, Codec.UNSIGNED5));\n-            out.write(this.encodeScalar(this.cp_Double_count, Codec.UNSIGNED5));\n-        }\n-        out.write(this.encodeScalar(this.cp_String_count, Codec.UNSIGNED5));\n-        out.write(this.encodeScalar(this.cp_Class_count, Codec.UNSIGNED5));\n-        out.write(this.encodeScalar(this.cp_Signature_count, Codec.UNSIGNED5));\n-        out.write(this.encodeScalar(this.cp_Descr_count, Codec.UNSIGNED5));\n-        out.write(this.encodeScalar(this.cp_Field_count, Codec.UNSIGNED5));\n-        out.write(this.encodeScalar(this.cp_Method_count, Codec.UNSIGNED5));\n-        out.write(this.encodeScalar(this.cp_Imethod_count, Codec.UNSIGNED5));\n+            outputStream.write(this.encodeScalar(this.cp_Int_count, Codec.UNSIGNED5));\n+            outputStream.write(this.encodeScalar(this.cp_Float_count, Codec.UNSIGNED5));\n+            outputStream.write(this.encodeScalar(this.cp_Long_count, Codec.UNSIGNED5));\n+            outputStream.write(this.encodeScalar(this.cp_Double_count, Codec.UNSIGNED5));\n+        }\n+        outputStream.write(this.encodeScalar(this.cp_String_count, Codec.UNSIGNED5));\n+        outputStream.write(this.encodeScalar(this.cp_Class_count, Codec.UNSIGNED5));\n+        outputStream.write(this.encodeScalar(this.cp_Signature_count, Codec.UNSIGNED5));\n+        outputStream.write(this.encodeScalar(this.cp_Descr_count, Codec.UNSIGNED5));\n+        outputStream.write(this.encodeScalar(this.cp_Field_count, Codec.UNSIGNED5));\n+        outputStream.write(this.encodeScalar(this.cp_Method_count, Codec.UNSIGNED5));\n+        outputStream.write(this.encodeScalar(this.cp_Imethod_count, Codec.UNSIGNED5));\n     }\n     \n     static {\n         magic = new int[] { 202, 254, 208, 13 };\n     }\n }\n"}]}
