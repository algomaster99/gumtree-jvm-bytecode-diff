{"diffoscope-json-version": 1, "source1": "first/BCELifier.class", "source2": "second/BCELifier.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,16 +2,16 @@\n package org.apache.bcel.util;\n \n import org.apache.bcel.classfile.ExceptionTable;\n import org.apache.bcel.generic.MethodGen;\n import org.apache.bcel.classfile.Visitor;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.bcel.classfile.ConstantValue;\n-import org.apache.bcel.classfile.Method;\n import org.apache.bcel.classfile.Field;\n+import org.apache.bcel.classfile.Method;\n import java.io.Writer;\n import java.io.OutputStreamWriter;\n import java.nio.charset.StandardCharsets;\n import org.apache.bcel.classfile.Utility;\n import org.apache.bcel.generic.ArrayType;\n import java.util.Locale;\n import org.apache.bcel.Const;\n@@ -43,82 +43,81 @@\n     \n     public static void main(final String[] argv) throws Exception {\n         if (argv.length != 1) {\n             System.out.println(\"Usage: BCELifier className\");\n             System.out.println(\"\\tThe class must exist on the classpath\");\n             return;\n         }\n-        final BCELifier bcelifier = new BCELifier(getJavaClass(argv[0]), System.out);\n-        bcelifier.start();\n+        new BCELifier(getJavaClass(argv[0]), System.out).start();\n     }\n     \n     static String printArgumentTypes(final Type[] argTypes) {\n         if (argTypes.length == 0) {\n             return \"Type.NO_ARGS\";\n         }\n-        final StringBuilder args = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder();\n         for (int i = 0; i < argTypes.length; ++i) {\n-            args.append(printType(argTypes[i]));\n+            sb.append(printType(argTypes[i]));\n             if (i < argTypes.length - 1) {\n-                args.append(\", \");\n+                sb.append(\", \");\n             }\n         }\n-        return \"new Type[] { \" + args.toString() + \" }\";\n+        return \"new Type[] { \" + sb.toString() + \" }\";\n     }\n     \n     static String printFlags(final int flags) {\n         return printFlags(flags, BCELifier.FLAGS.UNKNOWN);\n     }\n     \n     public static String printFlags(final int flags, final BCELifier.FLAGS location) {\n         if (flags == 0) {\n             return \"0\";\n         }\n-        final StringBuilder buf = new StringBuilder();\n-        for (int i = 0, pow = 1; pow <= 32768; pow <<= 1, ++i) {\n-            if ((flags & pow) != 0x0) {\n-                if (pow == 32 && location == BCELifier.FLAGS.CLASS) {\n-                    buf.append(BCELifier.CONSTANT_PREFIX).append(\"ACC_SUPER | \");\n+        final StringBuilder sb = new StringBuilder();\n+        for (int n = 0, i = 1; i <= 32768; i <<= 1, ++n) {\n+            if ((flags & i) != 0x0) {\n+                if (i == 32 && location == BCELifier.FLAGS.CLASS) {\n+                    sb.append(BCELifier.CONSTANT_PREFIX).append(\"ACC_SUPER | \");\n                 }\n-                else if (pow == 64 && location == BCELifier.FLAGS.METHOD) {\n-                    buf.append(BCELifier.CONSTANT_PREFIX).append(\"ACC_BRIDGE | \");\n+                else if (i == 64 && location == BCELifier.FLAGS.METHOD) {\n+                    sb.append(BCELifier.CONSTANT_PREFIX).append(\"ACC_BRIDGE | \");\n                 }\n-                else if (pow == 128 && location == BCELifier.FLAGS.METHOD) {\n-                    buf.append(BCELifier.CONSTANT_PREFIX).append(\"ACC_VARARGS | \");\n+                else if (i == 128 && location == BCELifier.FLAGS.METHOD) {\n+                    sb.append(BCELifier.CONSTANT_PREFIX).append(\"ACC_VARARGS | \");\n                 }\n-                else if (i < Const.ACCESS_NAMES_LENGTH) {\n-                    buf.append(BCELifier.CONSTANT_PREFIX).append(\"ACC_\").append(Const.getAccessName(i).toUpperCase(Locale.ENGLISH)).append(\" | \");\n+                else if (n < Const.ACCESS_NAMES_LENGTH) {\n+                    sb.append(BCELifier.CONSTANT_PREFIX).append(\"ACC_\").append(Const.getAccessName(n).toUpperCase(Locale.ENGLISH)).append(\" | \");\n                 }\n                 else {\n-                    buf.append(String.format(BCELifier.CONSTANT_PREFIX + \"ACC_BIT %x | \", Integer.valueOf(pow)));\n+                    sb.append(String.format(BCELifier.CONSTANT_PREFIX + \"ACC_BIT %x | \", Integer.valueOf(i)));\n                 }\n             }\n         }\n-        final String str = buf.toString();\n-        return str.substring(0, str.length() - 3);\n+        final String string = sb.toString();\n+        return string.substring(0, string.length() - 3);\n     }\n     \n     static String printType(final String signature) {\n         final Type type = Type.getType(signature);\n-        final byte t = type.getType();\n-        if (t <= 12) {\n-            return \"Type.\" + Const.getTypeName((int)t).toUpperCase(Locale.ENGLISH);\n+        final byte type2 = type.getType();\n+        if (type2 <= 12) {\n+            return \"Type.\" + Const.getTypeName((int)type2).toUpperCase(Locale.ENGLISH);\n         }\n         if (type.toString().equals(\"java.lang.String\")) {\n             return \"Type.STRING\";\n         }\n         if (type.toString().equals(\"java.lang.Object\")) {\n             return \"Type.OBJECT\";\n         }\n         if (type.toString().equals(\"java.lang.StringBuffer\")) {\n             return \"Type.STRINGBUFFER\";\n         }\n         if (type instanceof ArrayType) {\n-            final ArrayType at = (ArrayType)type;\n-            return \"new ArrayType(\" + printType(at.getBasicType()) + \", \" + at.getDimensions() + \")\";\n+            final ArrayType arrayType = (ArrayType)type;\n+            return \"new ArrayType(\" + printType(arrayType.getBasicType()) + \", \" + arrayType.getDimensions() + \")\";\n         }\n         return \"new ObjectType(\\\"\" + Utility.signatureToString(signature, false) + \"\\\")\";\n     }\n     \n     static String printType(final Type type) {\n         return printType(type.getSignature());\n     }\n@@ -127,16 +126,15 @@\n         this.clazz = clazz;\n         this.printWriter = new PrintWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8), false);\n         this.constantPoolGen = new ConstantPoolGen(this.clazz.getConstantPool());\n     }\n     \n     private void printCreate() {\n         this.printWriter.println(\"  public void create(OutputStream out) throws IOException {\");\n-        final Field[] fields = this.clazz.getFields();\n-        if (fields.length > 0) {\n+        if (this.clazz.getFields().length > 0) {\n             this.printWriter.println(\"    createFields();\");\n         }\n         final Method[] methods = this.clazz.getMethods();\n         for (int i = 0; i < methods.length; ++i) {\n             this.printWriter.println(\"    createMethod_\" + i + \"();\");\n         }\n         this.printWriter.println(\"    _cg.getJavaClass().dump(out);\");\n@@ -156,27 +154,27 @@\n         this.visitJavaClass(this.clazz);\n         this.printWriter.flush();\n     }\n     \n     public void visitField(final Field field) {\n         this.printWriter.println();\n         this.printWriter.println(\"    field = new FieldGen(\" + printFlags(field.getAccessFlags()) + \", \" + printType(field.getSignature()) + \", \\\"\" + field.getName() + \"\\\", _cp);\");\n-        final ConstantValue cv = field.getConstantValue();\n-        if (cv != null) {\n+        final ConstantValue constantValue = field.getConstantValue();\n+        if (constantValue != null) {\n             this.printWriter.print(\"    field.setInitValue(\");\n             if (field.getType() == Type.CHAR) {\n                 this.printWriter.print(\"(char)\");\n             }\n             if (field.getType() == Type.SHORT) {\n                 this.printWriter.print(\"(short)\");\n             }\n             if (field.getType() == Type.BYTE) {\n                 this.printWriter.print(\"(byte)\");\n             }\n-            this.printWriter.print(cv);\n+            this.printWriter.print(constantValue);\n             if (field.getType() == Type.LONG) {\n                 this.printWriter.print(\"L\");\n             }\n             if (field.getType() == Type.FLOAT) {\n                 this.printWriter.print(\"F\");\n             }\n             if (field.getType() == Type.DOUBLE) {\n@@ -184,81 +182,79 @@\n             }\n             this.printWriter.println(\");\");\n         }\n         this.printWriter.println(\"    _cg.addField(field.getField());\");\n     }\n     \n     public void visitJavaClass(final JavaClass clazz) {\n-        String className = clazz.getClassName();\n-        final String superName = clazz.getSuperclassName();\n+        String str = clazz.getClassName();\n+        final String superclassName = clazz.getSuperclassName();\n         final String packageName = clazz.getPackageName();\n-        final String inter = Utility.printArray((Object[])clazz.getInterfaceNames(), false, true);\n+        final String printArray = Utility.printArray((Object[])clazz.getInterfaceNames(), false, true);\n         if (StringUtils.isNotEmpty((CharSequence)packageName)) {\n-            className = className.substring(packageName.length() + 1);\n+            str = str.substring(packageName.length() + 1);\n             this.printWriter.println(\"package \" + packageName + \";\");\n             this.printWriter.println();\n         }\n         this.printWriter.println(\"import \" + BCELifier.BASE_PACKAGE + \".generic.*;\");\n         this.printWriter.println(\"import \" + BCELifier.BASE_PACKAGE + \".classfile.*;\");\n         this.printWriter.println(\"import \" + BCELifier.BASE_PACKAGE + \".*;\");\n         this.printWriter.println(\"import java.io.*;\");\n         this.printWriter.println();\n-        this.printWriter.println(\"public class \" + className + \"Creator {\");\n+        this.printWriter.println(\"public class \" + str + \"Creator {\");\n         this.printWriter.println(\"  private InstructionFactory _factory;\");\n         this.printWriter.println(\"  private ConstantPoolGen    _cp;\");\n         this.printWriter.println(\"  private ClassGen           _cg;\");\n         this.printWriter.println();\n-        this.printWriter.println(\"  public \" + className + \"Creator() {\");\n-        this.printWriter.println(\"    _cg = new ClassGen(\\\"\" + (packageName.isEmpty() ? className : (packageName + \".\" + className)) + \"\\\", \\\"\" + superName + \"\\\", \\\"\" + clazz.getSourceFileName() + \"\\\", \" + printFlags(clazz.getAccessFlags(), BCELifier.FLAGS.CLASS) + \", new String[] { \" + inter + \" });\");\n+        this.printWriter.println(\"  public \" + str + \"Creator() {\");\n+        this.printWriter.println(\"    _cg = new ClassGen(\\\"\" + (packageName.isEmpty() ? str : (packageName + \".\" + str)) + \"\\\", \\\"\" + superclassName + \"\\\", \\\"\" + clazz.getSourceFileName() + \"\\\", \" + printFlags(clazz.getAccessFlags(), BCELifier.FLAGS.CLASS) + \", new String[] { \" + printArray + \" });\");\n         this.printWriter.println(\"    _cg.setMajor(\" + clazz.getMajor() + \");\");\n         this.printWriter.println(\"    _cg.setMinor(\" + clazz.getMinor() + \");\");\n         this.printWriter.println();\n         this.printWriter.println(\"    _cp = _cg.getConstantPool();\");\n         this.printWriter.println(\"    _factory = new InstructionFactory(_cg, _cp);\");\n         this.printWriter.println(\"  }\");\n         this.printWriter.println();\n         this.printCreate();\n         final Field[] fields = clazz.getFields();\n         if (fields.length > 0) {\n             this.printWriter.println(\"  private void createFields() {\");\n             this.printWriter.println(\"    FieldGen field;\");\n-            for (final Field field : fields) {\n-                field.accept((Visitor)this);\n+            final Field[] array = fields;\n+            for (int length = array.length, i = 0; i < length; ++i) {\n+                array[i].accept((Visitor)this);\n             }\n             this.printWriter.println(\"  }\");\n             this.printWriter.println();\n         }\n         final Method[] methods = clazz.getMethods();\n-        for (int i = 0; i < methods.length; ++i) {\n-            this.printWriter.println(\"  private void createMethod_\" + i + \"() {\");\n-            methods[i].accept((Visitor)this);\n+        for (int j = 0; j < methods.length; ++j) {\n+            this.printWriter.println(\"  private void createMethod_\" + j + \"() {\");\n+            methods[j].accept((Visitor)this);\n             this.printWriter.println(\"  }\");\n             this.printWriter.println();\n         }\n         this.printMain();\n         this.printWriter.println(\"}\");\n     }\n     \n     public void visitMethod(final Method method) {\n-        final MethodGen mg = new MethodGen(method, this.clazz.getClassName(), this.constantPoolGen);\n+        final MethodGen methodGen = new MethodGen(method, this.clazz.getClassName(), this.constantPoolGen);\n         this.printWriter.println(\"    InstructionList il = new InstructionList();\");\n-        this.printWriter.println(\"    MethodGen method = new MethodGen(\" + printFlags(method.getAccessFlags(), BCELifier.FLAGS.METHOD) + \", \" + printType(mg.getReturnType()) + \", \" + printArgumentTypes(mg.getArgumentTypes()) + \", new String[] { \" + Utility.printArray((Object[])mg.getArgumentNames(), false, true) + \" }, \\\"\" + method.getName() + \"\\\", \\\"\" + this.clazz.getClassName() + \"\\\", il, _cp);\");\n+        this.printWriter.println(\"    MethodGen method = new MethodGen(\" + printFlags(method.getAccessFlags(), BCELifier.FLAGS.METHOD) + \", \" + printType(methodGen.getReturnType()) + \", \" + printArgumentTypes(methodGen.getArgumentTypes()) + \", new String[] { \" + Utility.printArray((Object[])methodGen.getArgumentNames(), false, true) + \" }, \\\"\" + method.getName() + \"\\\", \\\"\" + this.clazz.getClassName() + \"\\\", il, _cp);\");\n         final ExceptionTable exceptionTable = method.getExceptionTable();\n         if (exceptionTable != null) {\n-            final String[] exceptionNames2;\n-            final String[] exceptionNames = exceptionNames2 = exceptionTable.getExceptionNames();\n-            for (final String exceptionName : exceptionNames2) {\n+            for (final String s : exceptionTable.getExceptionNames()) {\n                 this.printWriter.print(\"    method.addException(\\\"\");\n-                this.printWriter.print(exceptionName);\n+                this.printWriter.print(s);\n                 this.printWriter.println(\"\\\");\");\n             }\n         }\n         this.printWriter.println();\n-        final BCELFactory factory = new BCELFactory(mg, this.printWriter);\n-        factory.start();\n+        new BCELFactory(methodGen, this.printWriter).start();\n         this.printWriter.println(\"    method.setMaxStack();\");\n         this.printWriter.println(\"    method.setMaxLocals();\");\n         this.printWriter.println(\"    _cg.addMethod(method.getMethod());\");\n         this.printWriter.println(\"    il.dispose();\");\n     }\n     \n     static {\n"}]}
