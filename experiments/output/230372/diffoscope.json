{"diffoscope-json-version": 1, "source1": "first/InnerClassesAttribute.class", "source2": "second/InnerClassesAttribute.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,99 +8,94 @@\n \n public class InnerClassesAttribute extends Attribute\n {\n     private static CPUTF8 attributeName;\n     private final List innerClasses;\n     private final List nestedClassFileEntries;\n     \n-    public static void setAttributeName(final CPUTF8 cpUTF8Value) {\n-        InnerClassesAttribute.attributeName = cpUTF8Value;\n+    public static void setAttributeName(final CPUTF8 attributeName) {\n+        InnerClassesAttribute.attributeName = attributeName;\n     }\n     \n-    public InnerClassesAttribute(final String name) {\n+    public InnerClassesAttribute(final String s) {\n         super(InnerClassesAttribute.attributeName);\n         this.innerClasses = new ArrayList();\n         (this.nestedClassFileEntries = new ArrayList()).add(this.getAttributeName());\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (!super.equals(obj)) {\n+        if (!super.equals(o)) {\n             return false;\n         }\n-        if (this.getClass() != obj.getClass()) {\n+        if (this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final InnerClassesAttribute other = (InnerClassesAttribute)obj;\n+        final InnerClassesAttribute innerClassesAttribute = (InnerClassesAttribute)o;\n         if (this.getAttributeName() == null) {\n-            if (other.getAttributeName() != null) {\n+            if (innerClassesAttribute.getAttributeName() != null) {\n                 return false;\n             }\n         }\n-        else if (!this.getAttributeName().equals((Object)other.getAttributeName())) {\n+        else if (!this.getAttributeName().equals((Object)innerClassesAttribute.getAttributeName())) {\n             return false;\n         }\n         return true;\n     }\n     \n     protected int getLength() {\n         return 2 + 8 * this.innerClasses.size();\n     }\n     \n     protected ClassFileEntry[] getNestedClassFileEntries() {\n-        final ClassFileEntry[] result = new ClassFileEntry[this.nestedClassFileEntries.size()];\n-        for (int index = 0; index < result.length; ++index) {\n-            result[index] = this.nestedClassFileEntries.get(index);\n+        final ClassFileEntry[] array = new ClassFileEntry[this.nestedClassFileEntries.size()];\n+        for (int i = 0; i < array.length; ++i) {\n+            array[i] = (ClassFileEntry)this.nestedClassFileEntries.get(i);\n         }\n-        return result;\n+        return array;\n     }\n     \n     public int hashCode() {\n-        final int PRIME = 31;\n-        int result = super.hashCode();\n-        result = 31 * result + ((this.getAttributeName() == null) ? 0 : this.getAttributeName().hashCode());\n-        return result;\n+        return 31 * super.hashCode() + ((this.getAttributeName() == null) ? 0 : this.getAttributeName().hashCode());\n     }\n     \n-    protected void resolve(final ClassConstantPool pool) {\n-        super.resolve(pool);\n-        for (int it = 0; it < this.innerClasses.size(); ++it) {\n-            final InnerClassesAttribute.InnerClassesEntry entry = (InnerClassesAttribute.InnerClassesEntry)this.innerClasses.get(it);\n-            entry.resolve(pool);\n+    protected void resolve(final ClassConstantPool classConstantPool) {\n+        super.resolve(classConstantPool);\n+        for (int i = 0; i < this.innerClasses.size(); ++i) {\n+            ((InnerClassesAttribute.InnerClassesEntry)this.innerClasses.get(i)).resolve(classConstantPool);\n         }\n     }\n     \n     public String toString() {\n         return \"InnerClasses: \" + this.getAttributeName();\n     }\n     \n-    protected void doWrite(final DataOutputStream dos) throws IOException {\n-        super.doWrite(dos);\n+    protected void doWrite(final DataOutputStream dataOutputStream) throws IOException {\n+        super.doWrite(dataOutputStream);\n     }\n     \n-    protected void writeBody(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.innerClasses.size());\n-        for (int it = 0; it < this.innerClasses.size(); ++it) {\n-            final InnerClassesAttribute.InnerClassesEntry entry = (InnerClassesAttribute.InnerClassesEntry)this.innerClasses.get(it);\n-            entry.write(dos);\n+    protected void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.innerClasses.size());\n+        for (int i = 0; i < this.innerClasses.size(); ++i) {\n+            ((InnerClassesAttribute.InnerClassesEntry)this.innerClasses.get(i)).write(dataOutputStream);\n         }\n     }\n     \n-    public void addInnerClassesEntry(final CPClass innerClass, final CPClass outerClass, final CPUTF8 innerName, final int flags) {\n-        if (innerClass != null) {\n-            this.nestedClassFileEntries.add(innerClass);\n+    public void addInnerClassesEntry(final CPClass cpClass, final CPClass cpClass2, final CPUTF8 cputf8, final int n) {\n+        if (cpClass != null) {\n+            this.nestedClassFileEntries.add(cpClass);\n         }\n-        if (outerClass != null) {\n-            this.nestedClassFileEntries.add(outerClass);\n+        if (cpClass2 != null) {\n+            this.nestedClassFileEntries.add(cpClass2);\n         }\n-        if (innerName != null) {\n-            this.nestedClassFileEntries.add(innerName);\n+        if (cputf8 != null) {\n+            this.nestedClassFileEntries.add(cputf8);\n         }\n-        this.addInnerClassesEntry(new InnerClassesAttribute.InnerClassesEntry(innerClass, outerClass, innerName, flags));\n+        this.addInnerClassesEntry(new InnerClassesAttribute.InnerClassesEntry(cpClass, cpClass2, cputf8, n));\n     }\n     \n     private void addInnerClassesEntry(final InnerClassesAttribute.InnerClassesEntry innerClassesEntry) {\n         this.innerClasses.add(innerClassesEntry);\n     }\n }\n"}]}
