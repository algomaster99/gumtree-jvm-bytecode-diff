{"diffoscope-json-version": 1, "source1": "first/ImmutableConfigurationInvocationHandler.class", "source2": "second/ImmutableConfigurationInvocationHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,28 +7,28 @@\n import java.util.Objects;\n import java.lang.reflect.InvocationHandler;\n \n class ImmutableConfigurationInvocationHandler implements InvocationHandler\n {\n     private final Configuration wrappedConfiguration;\n     \n-    public ImmutableConfigurationInvocationHandler(final Configuration configuration) {\n-        this.wrappedConfiguration = Objects.requireNonNull(configuration, \"configuration\");\n+    public ImmutableConfigurationInvocationHandler(final Configuration obj) {\n+        this.wrappedConfiguration = Objects.requireNonNull(obj, \"configuration\");\n     }\n     \n     @Override\n-    public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {\n+    public Object invoke(final Object o, final Method method, final Object[] args) throws Throwable {\n         try {\n             return handleResult(method.invoke((Object)this.wrappedConfiguration, args));\n         }\n-        catch (final InvocationTargetException e) {\n-            throw e.getCause();\n+        catch (final InvocationTargetException ex) {\n+            throw ex.getCause();\n         }\n     }\n     \n-    private static Object handleResult(final Object result) {\n-        if (result instanceof Iterator) {\n-            return new ImmutableConfigurationInvocationHandler.ImmutableIterator((Iterator)result);\n+    private static Object handleResult(final Object o) {\n+        if (o instanceof Iterator) {\n+            return new ImmutableConfigurationInvocationHandler.ImmutableIterator((Iterator)o);\n         }\n-        return result;\n+        return o;\n     }\n }\n"}]}
