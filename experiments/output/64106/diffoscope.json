{"diffoscope-json-version": 1, "source1": "first/QuotedPrintableCodec.class", "source2": "second/QuotedPrintableCodec.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -24,14 +24,26 @@\n     private static final byte ESCAPE_CHAR = 61;\n     private static final byte TAB = 9;\n     private static final byte SPACE = 32;\n     private static final byte CR = 13;\n     private static final byte LF = 10;\n     private static final int SAFE_LENGTH = 73;\n     \n+    static {\n+        PRINTABLE_CHARS = new BitSet(256);\n+        for (int i = 33; i <= 60; ++i) {\n+            QuotedPrintableCodec.PRINTABLE_CHARS.set(i);\n+        }\n+        for (int i = 62; i <= 126; ++i) {\n+            QuotedPrintableCodec.PRINTABLE_CHARS.set(i);\n+        }\n+        QuotedPrintableCodec.PRINTABLE_CHARS.set(9);\n+        QuotedPrintableCodec.PRINTABLE_CHARS.set(32);\n+    }\n+    \n     public QuotedPrintableCodec() {\n         this(StandardCharsets.UTF_8, false);\n     }\n     \n     public QuotedPrintableCodec(final boolean strict) {\n         this(StandardCharsets.UTF_8, strict);\n     }\n@@ -117,15 +129,15 @@\n             for (int j = bytesLength - 2; j < bytesLength; ++j) {\n                 b2 = getUnsignedOctet(j, bytes);\n                 encode = (!printable.get(b2) || (j > bytesLength - 2 && isWhitespace(b2)));\n                 encodeByte(b2, encode, buffer);\n             }\n         }\n         else {\n-            for (int b3 : bytes) {\n+            for (final int b3 : bytes) {\n                 final byte c = (byte)b3;\n                 if (b3 < 0) {\n                     b3 += 256;\n                 }\n                 if (printable.get(b3)) {\n                     buffer.write(b3);\n                 }\n@@ -238,20 +250,8 @@\n     \n     public String encode(final String sourceStr, final String sourceCharset) throws UnsupportedEncodingException {\n         if (sourceStr == null) {\n             return null;\n         }\n         return StringUtils.newStringUsAscii(this.encode(sourceStr.getBytes(sourceCharset)));\n     }\n-    \n-    static {\n-        PRINTABLE_CHARS = new BitSet(256);\n-        for (int i = 33; i <= 60; ++i) {\n-            QuotedPrintableCodec.PRINTABLE_CHARS.set(i);\n-        }\n-        for (int i = 62; i <= 126; ++i) {\n-            QuotedPrintableCodec.PRINTABLE_CHARS.set(i);\n-        }\n-        QuotedPrintableCodec.PRINTABLE_CHARS.set(9);\n-        QuotedPrintableCodec.PRINTABLE_CHARS.set(32);\n-    }\n }\n"}]}
