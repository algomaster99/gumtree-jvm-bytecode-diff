{"diffoscope-json-version": 1, "source1": "first/Main$CliOptions.class", "source2": "second/Main$CliOptions.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -56,23 +56,27 @@\n     @CommandLine.Option(names = { \"-x\", \"--exclude-regexp\" }, description = { \"Directory/file pattern to exclude from CheckStyle. Multiple excludes are allowed.\" })\n     private List<Pattern> excludeRegex;\n     @CommandLine.Option(names = { \"-E\", \"--executeIgnoredModules\" }, description = { \"Allows ignored modules to be run.\" })\n     private boolean executeIgnoredModules;\n     @CommandLine.Option(names = { \"-b\", \"--branch-matching-xpath\" }, description = { \"Shows Abstract Syntax Tree(AST) branches that match given XPath query.\" })\n     private String xpath;\n     \n+    static {\n+        CliOptions.DEFAULT_OUTPUT_FORMAT = Main.OutputFormat.PLAIN;\n+    }\n+    \n     private CliOptions() {\n         this.tabWidth = 8;\n         this.format = CliOptions.DEFAULT_OUTPUT_FORMAT;\n         this.exclude = new ArrayList();\n         this.excludeRegex = new ArrayList();\n     }\n     \n     private List<Pattern> getExclusions() {\n-        final List<Pattern> result = (List)this.exclude.stream().map(File::getAbsolutePath).map(Pattern::quote).map(CliOptions::lambda$getExclusions$0).collect(Collectors.toCollection(ArrayList::new));\n+        final List<Pattern> result = (List)this.exclude.stream().map(File::getAbsolutePath).map(Pattern::quote).map(CliOptions::lambda$2).collect(Collectors.toCollection(ArrayList::new));\n         result.addAll(this.excludeRegex);\n         return result;\n     }\n     \n     private List<String> validateCli(final CommandLine.ParseResult parseResult, final List<File> filesToProcess) {\n         final List<String> result = new ArrayList<String>();\n         final boolean hasConfigurationFile = this.configurationFile != null;\n@@ -115,12 +119,8 @@\n     private List<String> validateOptionalCliParametersIfConfigDefined() {\n         final List<String> result = new ArrayList<String>();\n         if (this.propertiesFile != null && !this.propertiesFile.exists()) {\n             result.add(String.format(Locale.ROOT, \"Could not find file '%s'.\", this.propertiesFile));\n         }\n         return result;\n     }\n-    \n-    static {\n-        CliOptions.DEFAULT_OUTPUT_FORMAT = Main.OutputFormat.PLAIN;\n-    }\n }\n"}]}
