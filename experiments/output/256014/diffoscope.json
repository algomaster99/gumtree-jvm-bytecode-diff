{"diffoscope-json-version": 1, "source1": "first/WideForm.class", "source2": "second/WideForm.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,46 +2,46 @@\n package org.apache.commons.compress.harmony.unpack200.bytecode.forms;\n \n import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;\n import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;\n \n public class WideForm extends VariableInstructionForm\n {\n-    public WideForm(final int opcode, final String name) {\n-        super(opcode, name);\n+    public WideForm(final int n, final String s) {\n+        super(n, s);\n     }\n     \n-    public void setByteCodeOperands(final ByteCode byteCode, final OperandManager operandManager, final int codeLength) {\n-        final int instruction = operandManager.nextWideByteCode();\n-        if (instruction == 132) {\n-            this.setByteCodeOperandsFormat2(instruction, byteCode, operandManager, codeLength);\n+    public void setByteCodeOperands(final ByteCode byteCode, final OperandManager operandManager, final int n) {\n+        final int nextWideByteCode = operandManager.nextWideByteCode();\n+        if (nextWideByteCode == 132) {\n+            this.setByteCodeOperandsFormat2(nextWideByteCode, byteCode, operandManager, n);\n         }\n         else {\n-            this.setByteCodeOperandsFormat1(instruction, byteCode, operandManager, codeLength);\n+            this.setByteCodeOperandsFormat1(nextWideByteCode, byteCode, operandManager, n);\n         }\n     }\n     \n-    protected void setByteCodeOperandsFormat1(final int instruction, final ByteCode byteCode, final OperandManager operandManager, final int codeLength) {\n-        final int local = operandManager.nextLocal();\n-        final int[] newRewrite = new int[4];\n-        int rewriteIndex = 0;\n-        newRewrite[rewriteIndex++] = byteCode.getOpcode();\n-        newRewrite[rewriteIndex++] = instruction;\n-        this.setRewrite2Bytes(local, rewriteIndex, newRewrite);\n-        rewriteIndex += 2;\n-        byteCode.setRewrite(newRewrite);\n+    protected void setByteCodeOperandsFormat1(final int n, final ByteCode byteCode, final OperandManager operandManager, final int n2) {\n+        final int nextLocal = operandManager.nextLocal();\n+        final int[] rewrite = new int[4];\n+        int n3 = 0;\n+        rewrite[n3++] = byteCode.getOpcode();\n+        rewrite[n3++] = n;\n+        this.setRewrite2Bytes(nextLocal, n3, rewrite);\n+        n3 += 2;\n+        byteCode.setRewrite(rewrite);\n     }\n     \n-    protected void setByteCodeOperandsFormat2(final int instruction, final ByteCode byteCode, final OperandManager operandManager, final int codeLength) {\n-        final int local = operandManager.nextLocal();\n-        final int constWord = operandManager.nextShort();\n-        final int[] newRewrite = new int[6];\n-        int rewriteIndex = 0;\n-        newRewrite[rewriteIndex++] = byteCode.getOpcode();\n-        newRewrite[rewriteIndex++] = instruction;\n-        this.setRewrite2Bytes(local, rewriteIndex, newRewrite);\n-        rewriteIndex += 2;\n-        this.setRewrite2Bytes(constWord, rewriteIndex, newRewrite);\n-        rewriteIndex += 2;\n-        byteCode.setRewrite(newRewrite);\n+    protected void setByteCodeOperandsFormat2(final int n, final ByteCode byteCode, final OperandManager operandManager, final int n2) {\n+        final int nextLocal = operandManager.nextLocal();\n+        final int nextShort = operandManager.nextShort();\n+        final int[] rewrite = new int[6];\n+        int n3 = 0;\n+        rewrite[n3++] = byteCode.getOpcode();\n+        rewrite[n3++] = n;\n+        this.setRewrite2Bytes(nextLocal, n3, rewrite);\n+        n3 += 2;\n+        this.setRewrite2Bytes(nextShort, n3, rewrite);\n+        n3 += 2;\n+        byteCode.setRewrite(rewrite);\n     }\n }\n"}]}
