{"diffoscope-json-version": 1, "source1": "first/ParserUtil.class", "source2": "second/ParserUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,78 +12,78 @@\n     private static final String JAVADOC_START = \"/**\";\n     private static final String BLOCK_MULTIPLE_COMMENT_BEGIN = \"/*\";\n     private static final String BLOCK_MULTIPLE_COMMENT_END = \"*/\";\n     \n     private ParserUtil() {\n     }\n     \n-    public static DetailAST createBlockCommentNode(final String content) {\n-        final DetailAstImpl blockCommentBegin = new DetailAstImpl();\n-        blockCommentBegin.setType(145);\n-        blockCommentBegin.setText(\"/*\");\n-        blockCommentBegin.setLineNo(0);\n-        blockCommentBegin.setColumnNo(-\"/**\".length());\n-        final DetailAstImpl commentContent = new DetailAstImpl();\n-        commentContent.setType(183);\n-        commentContent.setText(\"*\" + content);\n-        commentContent.setLineNo(0);\n-        commentContent.setColumnNo(-1);\n-        final DetailAstImpl blockCommentEnd = new DetailAstImpl();\n-        blockCommentEnd.setType(182);\n-        blockCommentEnd.setText(\"*/\");\n-        blockCommentBegin.setFirstChild((DetailAST)commentContent);\n-        commentContent.setNextSibling((DetailAST)blockCommentEnd);\n-        return (DetailAST)blockCommentBegin;\n+    public static DetailAST createBlockCommentNode(final String s) {\n+        final DetailAstImpl detailAstImpl = new DetailAstImpl();\n+        detailAstImpl.setType(145);\n+        detailAstImpl.setText(\"/*\");\n+        detailAstImpl.setLineNo(0);\n+        detailAstImpl.setColumnNo(-\"/**\".length());\n+        final DetailAstImpl firstChild = new DetailAstImpl();\n+        firstChild.setType(183);\n+        firstChild.setText(\"*\" + s);\n+        firstChild.setLineNo(0);\n+        firstChild.setColumnNo(-1);\n+        final DetailAstImpl nextSibling = new DetailAstImpl();\n+        nextSibling.setType(182);\n+        nextSibling.setText(\"*/\");\n+        detailAstImpl.setFirstChild((DetailAST)firstChild);\n+        firstChild.setNextSibling((DetailAST)nextSibling);\n+        return (DetailAST)detailAstImpl;\n     }\n     \n-    public static DetailAST createBlockCommentNode(final CommonToken token) {\n-        final DetailAstImpl blockComment = new DetailAstImpl();\n-        blockComment.initialize(145, \"/*\");\n-        final int tokenCharPositionInLine = token.getCharPositionInLine();\n-        final int tokenLine = token.getLine();\n-        final String tokenText = token.getText();\n-        blockComment.setColumnNo(tokenCharPositionInLine);\n-        blockComment.setLineNo(tokenLine);\n-        final DetailAstImpl blockCommentContent = new DetailAstImpl();\n-        blockCommentContent.setType(183);\n-        blockCommentContent.setColumnNo(tokenCharPositionInLine + 2);\n-        blockCommentContent.setLineNo(tokenLine);\n-        blockCommentContent.setText(tokenText);\n-        final DetailAstImpl blockCommentClose = new DetailAstImpl();\n-        blockCommentClose.initialize(182, \"*/\");\n-        final Map.Entry<Integer, Integer> linesColumns = countLinesColumns(tokenText, tokenLine, tokenCharPositionInLine + 1);\n-        blockCommentClose.setLineNo((int)Integer.valueOf(linesColumns.getKey()));\n-        blockCommentClose.setColumnNo((int)Integer.valueOf(linesColumns.getValue()));\n-        blockComment.addChild((DetailAST)blockCommentContent);\n-        blockComment.addChild((DetailAST)blockCommentClose);\n-        return (DetailAST)blockComment;\n+    public static DetailAST createBlockCommentNode(final CommonToken commonToken) {\n+        final DetailAstImpl detailAstImpl = new DetailAstImpl();\n+        detailAstImpl.initialize(145, \"/*\");\n+        final int charPositionInLine = commonToken.getCharPositionInLine();\n+        final int line = commonToken.getLine();\n+        final String text = commonToken.getText();\n+        detailAstImpl.setColumnNo(charPositionInLine);\n+        detailAstImpl.setLineNo(line);\n+        final DetailAstImpl detailAstImpl2 = new DetailAstImpl();\n+        detailAstImpl2.setType(183);\n+        detailAstImpl2.setColumnNo(charPositionInLine + 2);\n+        detailAstImpl2.setLineNo(line);\n+        detailAstImpl2.setText(text);\n+        final DetailAstImpl detailAstImpl3 = new DetailAstImpl();\n+        detailAstImpl3.initialize(182, \"*/\");\n+        final Map.Entry<Integer, Integer> countLinesColumns = countLinesColumns(text, line, charPositionInLine + 1);\n+        detailAstImpl3.setLineNo((int)Integer.valueOf(countLinesColumns.getKey()));\n+        detailAstImpl3.setColumnNo((int)Integer.valueOf(countLinesColumns.getValue()));\n+        detailAstImpl.addChild((DetailAST)detailAstImpl2);\n+        detailAstImpl.addChild((DetailAST)detailAstImpl3);\n+        return (DetailAST)detailAstImpl;\n     }\n     \n-    private static Map.Entry<Integer, Integer> countLinesColumns(final String text, final int initialLinesCnt, final int initialColumnsCnt) {\n-        int lines = initialLinesCnt;\n-        int columns = initialColumnsCnt;\n-        boolean foundCr = false;\n-        for (final char c : text.toCharArray()) {\n+    private static Map.Entry<Integer, Integer> countLinesColumns(final String s, final int n, final int n2) {\n+        int i = n;\n+        int j = n2;\n+        int n3 = 0;\n+        for (final char c : s.toCharArray()) {\n             if (c == '\\n') {\n-                foundCr = false;\n-                ++lines;\n-                columns = 0;\n+                n3 = 0;\n+                ++i;\n+                j = 0;\n             }\n             else {\n-                if (foundCr) {\n-                    foundCr = false;\n-                    ++lines;\n-                    columns = 0;\n+                if (n3 != 0) {\n+                    n3 = 0;\n+                    ++i;\n+                    j = 0;\n                 }\n                 if (c == '\\r') {\n-                    foundCr = true;\n+                    n3 = 1;\n                 }\n-                ++columns;\n+                ++j;\n             }\n         }\n-        if (foundCr) {\n-            ++lines;\n-            columns = 0;\n+        if (n3 != 0) {\n+            ++i;\n+            j = 0;\n         }\n-        return new AbstractMap.SimpleEntry<Integer, Integer>(Integer.valueOf(lines), Integer.valueOf(columns));\n+        return new AbstractMap.SimpleEntry<Integer, Integer>(Integer.valueOf(i), Integer.valueOf(j));\n     }\n }\n"}]}
