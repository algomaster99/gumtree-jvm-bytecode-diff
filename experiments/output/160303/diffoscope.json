{"diffoscope-json-version": 1, "source1": "first/FTPClient.class", "source2": "second/FTPClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -166,26 +166,26 @@\n         }\n         this.passiveHost = (\"0,0,0,0\".equals(m.group(1)) ? this._socket_.getInetAddress().getHostAddress() : m.group(1).replace(',', '.'));\n         try {\n             final int oct1 = Integer.parseInt(m.group(2));\n             final int oct2 = Integer.parseInt(m.group(3));\n             this.passivePort = (oct1 << 8 | oct2);\n         }\n-        catch (final NumberFormatException ex) {\n+        catch (final NumberFormatException e) {\n             throw new MalformedServerReplyException(\"Could not parse passive port information.\\nServer Reply: \" + reply);\n         }\n         if (this.passiveNatWorkaroundStrategy != null) {\n             try {\n                 final String newPassiveHost = this.passiveNatWorkaroundStrategy.resolve(this.passiveHost);\n                 if (!this.passiveHost.equals(newPassiveHost)) {\n                     this.fireReplyReceived(0, \"[Replacing PASV mode reply address \" + this.passiveHost + \" with \" + newPassiveHost + \"]\\n\");\n                     this.passiveHost = newPassiveHost;\n                 }\n             }\n-            catch (final UnknownHostException ex2) {\n+            catch (final UnknownHostException e2) {\n                 throw new MalformedServerReplyException(\"Could not parse passive host information.\\nServer Reply: \" + reply);\n             }\n         }\n     }\n     \n     protected void _parseExtendedPassiveModeReply(String reply) throws MalformedServerReplyException {\n         reply = reply.substring(reply.indexOf(40) + 1, reply.indexOf(41)).trim();\n@@ -196,15 +196,15 @@\n         if (delim1 != delim2 || delim2 != delim3 || delim3 != delim4) {\n             throw new MalformedServerReplyException(\"Could not parse extended passive host information.\\nServer Reply: \" + reply);\n         }\n         int port;\n         try {\n             port = Integer.parseInt(reply.substring(3, reply.length() - 1));\n         }\n-        catch (final NumberFormatException ex) {\n+        catch (final NumberFormatException e) {\n             throw new MalformedServerReplyException(\"Could not parse extended passive host information.\\nServer Reply: \" + reply);\n         }\n         this.passiveHost = this.getRemoteAddress().getHostAddress();\n         this.passivePort = port;\n     }\n     \n     private boolean storeFile(final FTPCmd command, final String remote, final InputStream local) throws IOException {\n"}]}
