{"diffoscope-json-version": 1, "source1": "first/ZipUtil.class", "source2": "second/ZipUtil.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,105 +1,105 @@\n-  SHA-256 checksum 8656c4dedc658c6f4453c1e1146fb8b0f2887c3b64d471577e08e660ab92738f\n+  SHA-256 checksum 3f510fac91f66e23426628d3f32161993ee8dcfea53389d133abfb48e59f82e1\n   Compiled from \"ZipUtil.java\"\n public abstract class org.apache.commons.compress.archivers.zip.ZipUtil\n   minor version: 0\n   major version: 52\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n   this_class: #92                         // org/apache/commons/compress/archivers/zip/ZipUtil\n   super_class: #93                        // java/lang/Object\n   interfaces: 0, fields: 1, methods: 22, attributes: 2\n Constant pool:\n-    #1 = Methodref          #93.#201      // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #202          // org/apache/commons/compress/archivers/zip/ZipLong\n-    #3 = Methodref          #40.#203      // java/util/Date.getTime:()J\n-    #4 = Methodref          #92.#204      // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(J)[B\n-    #5 = Methodref          #2.#205       // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n-    #6 = Methodref          #92.#206      // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(J[BI)V\n-    #7 = Methodref          #10.#207      // java/util/Calendar.getInstance:()Ljava/util/Calendar;\n-    #8 = Methodref          #92.#208      // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(Ljava/util/Calendar;J[BI)V\n-    #9 = Methodref          #10.#209      // java/util/Calendar.setTimeInMillis:(J)V\n-   #10 = Class              #210          // java/util/Calendar\n-   #11 = Methodref          #10.#211      // java/util/Calendar.get:(I)I\n-   #12 = Fieldref           #92.#212      // org/apache/commons/compress/archivers/zip/ZipUtil.DOS_TIME_MIN:[B\n-   #13 = Methodref          #92.#213      // org/apache/commons/compress/archivers/zip/ZipUtil.copy:([B[BI)V\n-   #14 = Methodref          #2.#214       // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n-   #15 = Class              #215          // java/lang/Integer\n+    #1 = Methodref          #93.#197      // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #198          // org/apache/commons/compress/archivers/zip/ZipLong\n+    #3 = Methodref          #40.#199      // java/util/Date.getTime:()J\n+    #4 = Methodref          #92.#200      // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(J)[B\n+    #5 = Methodref          #2.#201       // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+    #6 = Methodref          #92.#202      // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(J[BI)V\n+    #7 = Methodref          #10.#203      // java/util/Calendar.getInstance:()Ljava/util/Calendar;\n+    #8 = Methodref          #92.#204      // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(Ljava/util/Calendar;J[BI)V\n+    #9 = Methodref          #10.#205      // java/util/Calendar.setTimeInMillis:(J)V\n+   #10 = Class              #206          // java/util/Calendar\n+   #11 = Methodref          #10.#207      // java/util/Calendar.get:(I)I\n+   #12 = Fieldref           #92.#208      // org/apache/commons/compress/archivers/zip/ZipUtil.DOS_TIME_MIN:[B\n+   #13 = Methodref          #92.#209      // org/apache/commons/compress/archivers/zip/ZipUtil.copy:([B[BI)V\n+   #14 = Methodref          #2.#210       // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n+   #15 = Class              #211          // java/lang/Integer\n    #16 = Long               4294967296l\n-   #18 = Methodref          #216.#217     // java/math/BigInteger.bitLength:()I\n-   #19 = Methodref          #216.#218     // java/math/BigInteger.longValue:()J\n-   #20 = Class              #219          // java/lang/NumberFormatException\n-   #21 = Class              #220          // java/lang/StringBuilder\n-   #22 = Methodref          #21.#201      // java/lang/StringBuilder.\"<init>\":()V\n-   #23 = String             #221          // The BigInteger cannot fit inside a 64 bit java long: [\n-   #24 = Methodref          #21.#222      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #25 = Methodref          #21.#223      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #26 = String             #224          // ]\n-   #27 = Methodref          #21.#225      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #28 = Methodref          #20.#226      // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n+   #18 = Methodref          #212.#213     // java/math/BigInteger.bitLength:()I\n+   #19 = Methodref          #212.#214     // java/math/BigInteger.longValue:()J\n+   #20 = Class              #215          // java/lang/NumberFormatException\n+   #21 = Class              #216          // java/lang/StringBuilder\n+   #22 = Methodref          #21.#197      // java/lang/StringBuilder.\"<init>\":()V\n+   #23 = String             #217          // The BigInteger cannot fit inside a 64 bit java long: [\n+   #24 = Methodref          #21.#218      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #25 = Methodref          #21.#219      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #26 = String             #220          // ]\n+   #27 = Methodref          #21.#221      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #28 = Methodref          #20.#222      // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n    #29 = Long               -2147483648l\n-   #31 = Class              #227          // java/lang/IllegalArgumentException\n-   #32 = String             #228          // Negative longs < -2^31 not permitted: [\n-   #33 = Methodref          #21.#229      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #34 = Methodref          #31.#226      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #35 = Methodref          #92.#230      // org/apache/commons/compress/archivers/zip/ZipUtil.adjustToLong:(I)J\n-   #36 = Methodref          #216.#231     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #37 = String             #232          // Can only convert non-negative integers between [0,255] to byte: [\n-   #38 = Methodref          #21.#233      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #39 = Methodref          #2.#234       // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-   #40 = Class              #235          // java/util/Date\n-   #41 = Methodref          #92.#236      // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n-   #42 = Methodref          #40.#237      // java/util/Date.\"<init>\":(J)V\n+   #31 = Class              #223          // java/lang/IllegalArgumentException\n+   #32 = String             #224          // Negative longs < -2^31 not permitted: [\n+   #33 = Methodref          #21.#225      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #34 = Methodref          #31.#222      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #35 = Methodref          #92.#226      // org/apache/commons/compress/archivers/zip/ZipUtil.adjustToLong:(I)J\n+   #36 = Methodref          #212.#227     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+   #37 = String             #228          // Can only convert non-negative integers between [0,255] to byte: [\n+   #38 = Methodref          #21.#229      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #39 = Methodref          #2.#230       // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+   #40 = Class              #231          // java/util/Date\n+   #41 = Methodref          #92.#232      // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n+   #42 = Methodref          #40.#233      // java/util/Date.\"<init>\":(J)V\n    #43 = Long               127l\n-   #45 = Methodref          #10.#238      // java/util/Calendar.set:(II)V\n+   #45 = Methodref          #10.#234      // java/util/Calendar.set:(II)V\n    #46 = Long               15l\n-   #48 = Methodref          #10.#239      // java/util/Calendar.getTime:()Ljava/util/Date;\n-   #49 = Fieldref           #51.#240      // org/apache/commons/compress/archivers/zip/UnicodePathExtraField.UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #50 = Methodref          #241.#242     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-   #51 = Class              #243          // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-   #52 = Methodref          #92.#244      // org/apache/commons/compress/archivers/zip/ZipUtil.getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n-   #53 = Methodref          #241.#245     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;)V\n-   #54 = Fieldref           #246.#247     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-   #55 = Methodref          #241.#248     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-   #56 = Fieldref           #57.#249      // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #57 = Class              #250          // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-   #58 = Methodref          #241.#251     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setComment:(Ljava/lang/String;)V\n-   #59 = Fieldref           #252.#253     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n-   #60 = Methodref          #241.#254     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n-   #61 = Class              #255          // java/util/zip/CRC32\n-   #62 = Methodref          #61.#201      // java/util/zip/CRC32.\"<init>\":()V\n-   #63 = Methodref          #61.#256      // java/util/zip/CRC32.update:([B)V\n-   #64 = Methodref          #61.#234      // java/util/zip/CRC32.getValue:()J\n-   #65 = Methodref          #257.#258     // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getNameCRC32:()J\n-   #66 = Fieldref           #259.#260     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #67 = Methodref          #257.#261     // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getUnicodeName:()[B\n-   #68 = InterfaceMethodref #262.#263     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #69 = Class              #264          // java/io/IOException\n-   #70 = Methodref          #265.#266     // java/util/Arrays.copyOf:([BI)[B\n-   #71 = Methodref          #267.#268     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #72 = Methodref          #92.#269      // org/apache/commons/compress/archivers/zip/ZipUtil.supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #73 = Methodref          #92.#270      // org/apache/commons/compress/archivers/zip/ZipUtil.supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #74 = Methodref          #241.#271     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #75 = Methodref          #272.#273     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesEncryption:()Z\n-   #76 = Methodref          #241.#274     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-   #77 = Fieldref           #275.#276     // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #78 = Methodref          #275.#277     // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-   #79 = Fieldref           #275.#278     // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #80 = Class              #279          // java/util/zip/ZipEntry\n-   #81 = Fieldref           #275.#280     // org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #82 = Fieldref           #275.#281     // org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #83 = Class              #282          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-   #84 = Fieldref           #283.#284     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-   #85 = Methodref          #83.#285      // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #86 = Methodref          #275.#286     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #87 = Fieldref           #283.#287     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-   #88 = Methodref          #83.#288      // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #48 = Methodref          #10.#235      // java/util/Calendar.getTime:()Ljava/util/Date;\n+   #49 = Fieldref           #51.#236      // org/apache/commons/compress/archivers/zip/UnicodePathExtraField.UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #50 = Methodref          #237.#238     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+   #51 = Class              #239          // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+   #52 = Methodref          #92.#240      // org/apache/commons/compress/archivers/zip/ZipUtil.getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n+   #53 = Methodref          #237.#241     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;)V\n+   #54 = Fieldref           #242.#243     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+   #55 = Methodref          #237.#244     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+   #56 = Fieldref           #57.#245      // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #57 = Class              #246          // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+   #58 = Methodref          #237.#247     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setComment:(Ljava/lang/String;)V\n+   #59 = Fieldref           #248.#249     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n+   #60 = Methodref          #237.#250     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n+   #61 = Class              #251          // java/util/zip/CRC32\n+   #62 = Methodref          #61.#197      // java/util/zip/CRC32.\"<init>\":()V\n+   #63 = Methodref          #61.#252      // java/util/zip/CRC32.update:([B)V\n+   #64 = Methodref          #61.#230      // java/util/zip/CRC32.getValue:()J\n+   #65 = Methodref          #177.#253     // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getNameCRC32:()J\n+   #66 = Fieldref           #254.#255     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #67 = Methodref          #177.#256     // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getUnicodeName:()[B\n+   #68 = InterfaceMethodref #257.#258     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+   #69 = Class              #259          // java/io/IOException\n+   #70 = Methodref          #260.#261     // java/util/Arrays.copyOf:([BI)[B\n+   #71 = Methodref          #262.#263     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #72 = Methodref          #92.#264      // org/apache/commons/compress/archivers/zip/ZipUtil.supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #73 = Methodref          #92.#265      // org/apache/commons/compress/archivers/zip/ZipUtil.supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #74 = Methodref          #237.#266     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #75 = Methodref          #267.#268     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesEncryption:()Z\n+   #76 = Methodref          #237.#269     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+   #77 = Fieldref           #192.#270     // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #78 = Methodref          #192.#271     // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+   #79 = Fieldref           #192.#272     // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #80 = Class              #273          // java/util/zip/ZipEntry\n+   #81 = Fieldref           #192.#274     // org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #82 = Fieldref           #192.#275     // org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #83 = Class              #276          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+   #84 = Fieldref           #277.#278     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+   #85 = Methodref          #83.#279      // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #86 = Methodref          #192.#280     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #87 = Fieldref           #277.#281     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+   #88 = Methodref          #83.#282      // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n    #89 = Long               8448l\n-   #91 = Methodref          #2.#289       // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n-   #92 = Class              #290          // org/apache/commons/compress/archivers/zip/ZipUtil\n-   #93 = Class              #291          // java/lang/Object\n+   #91 = Methodref          #2.#283       // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n+   #92 = Class              #284          // org/apache/commons/compress/archivers/zip/ZipUtil\n+   #93 = Class              #285          // java/lang/Object\n    #94 = Utf8               DOS_TIME_MIN\n    #95 = Utf8               [B\n    #96 = Utf8               <init>\n    #97 = Utf8               ()V\n    #98 = Utf8               Code\n    #99 = Utf8               LineNumberTable\n   #100 = Utf8               LocalVariableTable\n@@ -165,227 +165,221 @@\n   #160 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n   #161 = Utf8               originalNameBytes\n   #162 = Utf8               commentBytes\n   #163 = Utf8               nameCandidate\n   #164 = Utf8               name\n   #165 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnicodePathExtraField;\n   #166 = Utf8               newName\n-  #167 = Class              #292          // org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #168 = Class              #243          // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-  #169 = Class              #293          // java/lang/String\n-  #170 = Class              #250          // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-  #171 = Utf8               getUnicodeStringIfOriginalMatches\n-  #172 = Utf8               (Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n-  #173 = Utf8               crc32\n-  #174 = Utf8               Ljava/util/zip/CRC32;\n-  #175 = Utf8               origCRC32\n-  #176 = Utf8               f\n-  #177 = Utf8               Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;\n-  #178 = Utf8               orig\n-  #179 = Class              #294          // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n-  #180 = Class              #95           // \"[B\"\n-  #181 = Class              #255          // java/util/zip/CRC32\n-  #182 = Class              #264          // java/io/IOException\n-  #183 = Utf8               copy\n-  #184 = Utf8               from\n-  #185 = Utf8               ([B[BI)V\n-  #186 = Utf8               to\n-  #187 = Utf8               canHandleEntryData\n-  #188 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #189 = Utf8               entry\n-  #190 = Utf8               supportsEncryptionOf\n-  #191 = Utf8               supportsMethodOf\n-  #192 = Utf8               checkRequestedFeatures\n-  #193 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #194 = Utf8               m\n-  #195 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #196 = Class              #295          // org/apache/commons/compress/archivers/zip/ZipMethod\n-  #197 = Utf8               Exceptions\n-  #198 = Utf8               <clinit>\n-  #199 = Utf8               SourceFile\n-  #200 = Utf8               ZipUtil.java\n-  #201 = NameAndType        #96:#97       // \"<init>\":()V\n-  #202 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #203 = NameAndType        #296:#297     // getTime:()J\n-  #204 = NameAndType        #103:#107     // toDosTime:(J)[B\n-  #205 = NameAndType        #96:#298      // \"<init>\":([B)V\n-  #206 = NameAndType        #103:#111     // toDosTime:(J[BI)V\n-  #207 = NameAndType        #299:#300     // getInstance:()Ljava/util/Calendar;\n-  #208 = NameAndType        #103:#115     // toDosTime:(Ljava/util/Calendar;J[BI)V\n-  #209 = NameAndType        #301:#302     // setTimeInMillis:(J)V\n-  #210 = Utf8               java/util/Calendar\n-  #211 = NameAndType        #303:#304     // get:(I)I\n-  #212 = NameAndType        #94:#95       // DOS_TIME_MIN:[B\n-  #213 = NameAndType        #183:#185     // copy:([B[BI)V\n-  #214 = NameAndType        #305:#111     // putLong:(J[BI)V\n-  #215 = Utf8               java/lang/Integer\n-  #216 = Class              #306          // java/math/BigInteger\n-  #217 = NameAndType        #307:#308     // bitLength:()I\n-  #218 = NameAndType        #309:#297     // longValue:()J\n-  #219 = Utf8               java/lang/NumberFormatException\n-  #220 = Utf8               java/lang/StringBuilder\n-  #221 = Utf8               The BigInteger cannot fit inside a 64 bit java long: [\n-  #222 = NameAndType        #310:#311     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #223 = NameAndType        #310:#312     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #224 = Utf8               ]\n-  #225 = NameAndType        #313:#314     // toString:()Ljava/lang/String;\n-  #226 = NameAndType        #96:#315      // \"<init>\":(Ljava/lang/String;)V\n-  #227 = Utf8               java/lang/IllegalArgumentException\n-  #228 = Utf8               Negative longs < -2^31 not permitted: [\n-  #229 = NameAndType        #310:#316     // append:(J)Ljava/lang/StringBuilder;\n-  #230 = NameAndType        #122:#123     // adjustToLong:(I)J\n-  #231 = NameAndType        #317:#136     // valueOf:(J)Ljava/math/BigInteger;\n-  #232 = Utf8               Can only convert non-negative integers between [0,255] to byte: [\n-  #233 = NameAndType        #310:#318     // append:(I)Ljava/lang/StringBuilder;\n-  #234 = NameAndType        #319:#297     // getValue:()J\n-  #235 = Utf8               java/util/Date\n-  #236 = NameAndType        #148:#149     // dosToJavaTime:(J)J\n-  #237 = NameAndType        #96:#302      // \"<init>\":(J)V\n-  #238 = NameAndType        #320:#321     // set:(II)V\n-  #239 = NameAndType        #296:#322     // getTime:()Ljava/util/Date;\n-  #240 = NameAndType        #323:#324     // UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #241 = Class              #325          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #242 = NameAndType        #326:#327     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #243 = Utf8               org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-  #244 = NameAndType        #171:#172     // getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n-  #245 = NameAndType        #328:#315     // setName:(Ljava/lang/String;)V\n-  #246 = Class              #329          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #247 = NameAndType        #332:#333     // UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #248 = NameAndType        #334:#335     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #249 = NameAndType        #336:#324     // UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #250 = Utf8               org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-  #251 = NameAndType        #337:#315     // setComment:(Ljava/lang/String;)V\n-  #252 = Class              #338          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource\n-  #253 = NameAndType        #332:#340     // UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n-  #254 = NameAndType        #341:#342     // setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n-  #255 = Utf8               java/util/zip/CRC32\n-  #256 = NameAndType        #343:#298     // update:([B)V\n-  #257 = Class              #294          // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n-  #258 = NameAndType        #344:#297     // getNameCRC32:()J\n-  #259 = Class              #345          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #260 = NameAndType        #346:#347     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #261 = NameAndType        #348:#349     // getUnicodeName:()[B\n-  #262 = Class              #350          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #263 = NameAndType        #351:#352     // decode:([B)Ljava/lang/String;\n-  #264 = Utf8               java/io/IOException\n-  #265 = Class              #353          // java/util/Arrays\n-  #266 = NameAndType        #354:#355     // copyOf:([BI)[B\n-  #267 = Class              #356          // java/lang/System\n-  #268 = NameAndType        #357:#358     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #269 = NameAndType        #190:#188     // supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #270 = NameAndType        #191:#188     // supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #271 = NameAndType        #359:#360     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #272 = Class              #361          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #273 = NameAndType        #362:#363     // usesEncryption:()Z\n-  #274 = NameAndType        #364:#308     // getMethod:()I\n-  #275 = Class              #295          // org/apache/commons/compress/archivers/zip/ZipMethod\n-  #276 = NameAndType        #365:#195     // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #277 = NameAndType        #366:#308     // getCode:()I\n-  #278 = NameAndType        #367:#195     // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #279 = Utf8               java/util/zip/ZipEntry\n-  #280 = NameAndType        #368:#195     // ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #281 = NameAndType        #369:#195     // BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #282 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  #283 = Class              #370          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n-  #284 = NameAndType        #372:#373     // ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #285 = NameAndType        #96:#374      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #286 = NameAndType        #375:#376     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #287 = NameAndType        #377:#373     // METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #288 = NameAndType        #96:#378      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #289 = NameAndType        #379:#107     // getBytes:(J)[B\n-  #290 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-  #291 = Utf8               java/lang/Object\n-  #292 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #293 = Utf8               java/lang/String\n-  #294 = Utf8               org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n-  #295 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n-  #296 = Utf8               getTime\n-  #297 = Utf8               ()J\n-  #298 = Utf8               ([B)V\n-  #299 = Utf8               getInstance\n-  #300 = Utf8               ()Ljava/util/Calendar;\n-  #301 = Utf8               setTimeInMillis\n-  #302 = Utf8               (J)V\n-  #303 = Utf8               get\n-  #304 = Utf8               (I)I\n-  #305 = Utf8               putLong\n-  #306 = Utf8               java/math/BigInteger\n-  #307 = Utf8               bitLength\n-  #308 = Utf8               ()I\n-  #309 = Utf8               longValue\n-  #310 = Utf8               append\n-  #311 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #312 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #313 = Utf8               toString\n-  #314 = Utf8               ()Ljava/lang/String;\n-  #315 = Utf8               (Ljava/lang/String;)V\n-  #316 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #317 = Utf8               valueOf\n-  #318 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #319 = Utf8               getValue\n-  #320 = Utf8               set\n-  #321 = Utf8               (II)V\n-  #322 = Utf8               ()Ljava/util/Date;\n-  #323 = Utf8               UPATH_ID\n-  #324 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #325 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #326 = Utf8               getExtraField\n-  #327 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #328 = Utf8               setName\n-  #329 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #330 = Utf8               NameSource\n-  #331 = Utf8               InnerClasses\n-  #332 = Utf8               UNICODE_EXTRA_FIELD\n-  #333 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #334 = Utf8               setNameSource\n-  #335 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #336 = Utf8               UCOM_ID\n-  #337 = Utf8               setComment\n-  #338 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource\n-  #339 = Utf8               CommentSource\n-  #340 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n-  #341 = Utf8               setCommentSource\n-  #342 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n-  #343 = Utf8               update\n-  #344 = Utf8               getNameCRC32\n-  #345 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #346 = Utf8               UTF8_ZIP_ENCODING\n-  #347 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #348 = Utf8               getUnicodeName\n-  #349 = Utf8               ()[B\n-  #350 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #351 = Utf8               decode\n-  #352 = Utf8               ([B)Ljava/lang/String;\n-  #353 = Utf8               java/util/Arrays\n-  #354 = Utf8               copyOf\n-  #355 = Utf8               ([BI)[B\n-  #356 = Utf8               java/lang/System\n-  #357 = Utf8               arraycopy\n-  #358 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #359 = Utf8               getGeneralPurposeBit\n-  #360 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #361 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #362 = Utf8               usesEncryption\n-  #363 = Utf8               ()Z\n-  #364 = Utf8               getMethod\n-  #365 = Utf8               UNSHRINKING\n-  #366 = Utf8               getCode\n-  #367 = Utf8               IMPLODING\n-  #368 = Utf8               ENHANCED_DEFLATED\n-  #369 = Utf8               BZIP2\n-  #370 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n-  #371 = Utf8               Feature\n-  #372 = Utf8               ENCRYPTION\n-  #373 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #374 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #375 = Utf8               getMethodByCode\n-  #376 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #377 = Utf8               METHOD\n-  #378 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #379 = Utf8               getBytes\n+  #167 = Class              #286          // org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #168 = Class              #287          // java/lang/String\n+  #169 = Utf8               getUnicodeStringIfOriginalMatches\n+  #170 = Utf8               (Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n+  #171 = Utf8               crc32\n+  #172 = Utf8               Ljava/util/zip/CRC32;\n+  #173 = Utf8               origCRC32\n+  #174 = Utf8               f\n+  #175 = Utf8               Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;\n+  #176 = Utf8               orig\n+  #177 = Class              #288          // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n+  #178 = Class              #95           // \"[B\"\n+  #179 = Utf8               copy\n+  #180 = Utf8               from\n+  #181 = Utf8               ([B[BI)V\n+  #182 = Utf8               to\n+  #183 = Utf8               canHandleEntryData\n+  #184 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #185 = Utf8               entry\n+  #186 = Utf8               supportsEncryptionOf\n+  #187 = Utf8               supportsMethodOf\n+  #188 = Utf8               checkRequestedFeatures\n+  #189 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #190 = Utf8               m\n+  #191 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #192 = Class              #289          // org/apache/commons/compress/archivers/zip/ZipMethod\n+  #193 = Utf8               Exceptions\n+  #194 = Utf8               <clinit>\n+  #195 = Utf8               SourceFile\n+  #196 = Utf8               ZipUtil.java\n+  #197 = NameAndType        #96:#97       // \"<init>\":()V\n+  #198 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+  #199 = NameAndType        #290:#291     // getTime:()J\n+  #200 = NameAndType        #103:#107     // toDosTime:(J)[B\n+  #201 = NameAndType        #96:#292      // \"<init>\":([B)V\n+  #202 = NameAndType        #103:#111     // toDosTime:(J[BI)V\n+  #203 = NameAndType        #293:#294     // getInstance:()Ljava/util/Calendar;\n+  #204 = NameAndType        #103:#115     // toDosTime:(Ljava/util/Calendar;J[BI)V\n+  #205 = NameAndType        #295:#296     // setTimeInMillis:(J)V\n+  #206 = Utf8               java/util/Calendar\n+  #207 = NameAndType        #297:#298     // get:(I)I\n+  #208 = NameAndType        #94:#95       // DOS_TIME_MIN:[B\n+  #209 = NameAndType        #179:#181     // copy:([B[BI)V\n+  #210 = NameAndType        #299:#111     // putLong:(J[BI)V\n+  #211 = Utf8               java/lang/Integer\n+  #212 = Class              #300          // java/math/BigInteger\n+  #213 = NameAndType        #301:#302     // bitLength:()I\n+  #214 = NameAndType        #303:#291     // longValue:()J\n+  #215 = Utf8               java/lang/NumberFormatException\n+  #216 = Utf8               java/lang/StringBuilder\n+  #217 = Utf8               The BigInteger cannot fit inside a 64 bit java long: [\n+  #218 = NameAndType        #304:#305     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #219 = NameAndType        #304:#306     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #220 = Utf8               ]\n+  #221 = NameAndType        #307:#308     // toString:()Ljava/lang/String;\n+  #222 = NameAndType        #96:#309      // \"<init>\":(Ljava/lang/String;)V\n+  #223 = Utf8               java/lang/IllegalArgumentException\n+  #224 = Utf8               Negative longs < -2^31 not permitted: [\n+  #225 = NameAndType        #304:#310     // append:(J)Ljava/lang/StringBuilder;\n+  #226 = NameAndType        #122:#123     // adjustToLong:(I)J\n+  #227 = NameAndType        #311:#136     // valueOf:(J)Ljava/math/BigInteger;\n+  #228 = Utf8               Can only convert non-negative integers between [0,255] to byte: [\n+  #229 = NameAndType        #304:#312     // append:(I)Ljava/lang/StringBuilder;\n+  #230 = NameAndType        #313:#291     // getValue:()J\n+  #231 = Utf8               java/util/Date\n+  #232 = NameAndType        #148:#149     // dosToJavaTime:(J)J\n+  #233 = NameAndType        #96:#296      // \"<init>\":(J)V\n+  #234 = NameAndType        #314:#315     // set:(II)V\n+  #235 = NameAndType        #290:#316     // getTime:()Ljava/util/Date;\n+  #236 = NameAndType        #317:#318     // UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #237 = Class              #319          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #238 = NameAndType        #320:#321     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #239 = Utf8               org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+  #240 = NameAndType        #169:#170     // getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n+  #241 = NameAndType        #322:#309     // setName:(Ljava/lang/String;)V\n+  #242 = Class              #323          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #243 = NameAndType        #326:#327     // UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #244 = NameAndType        #328:#329     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #245 = NameAndType        #330:#318     // UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #246 = Utf8               org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+  #247 = NameAndType        #331:#309     // setComment:(Ljava/lang/String;)V\n+  #248 = Class              #332          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource\n+  #249 = NameAndType        #326:#334     // UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n+  #250 = NameAndType        #335:#336     // setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n+  #251 = Utf8               java/util/zip/CRC32\n+  #252 = NameAndType        #337:#292     // update:([B)V\n+  #253 = NameAndType        #338:#291     // getNameCRC32:()J\n+  #254 = Class              #339          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #255 = NameAndType        #340:#341     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #256 = NameAndType        #342:#343     // getUnicodeName:()[B\n+  #257 = Class              #344          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #258 = NameAndType        #345:#346     // decode:([B)Ljava/lang/String;\n+  #259 = Utf8               java/io/IOException\n+  #260 = Class              #347          // java/util/Arrays\n+  #261 = NameAndType        #348:#349     // copyOf:([BI)[B\n+  #262 = Class              #350          // java/lang/System\n+  #263 = NameAndType        #351:#352     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #264 = NameAndType        #186:#184     // supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #265 = NameAndType        #187:#184     // supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #266 = NameAndType        #353:#354     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #267 = Class              #355          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #268 = NameAndType        #356:#357     // usesEncryption:()Z\n+  #269 = NameAndType        #358:#302     // getMethod:()I\n+  #270 = NameAndType        #359:#191     // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #271 = NameAndType        #360:#302     // getCode:()I\n+  #272 = NameAndType        #361:#191     // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #273 = Utf8               java/util/zip/ZipEntry\n+  #274 = NameAndType        #362:#191     // ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #275 = NameAndType        #363:#191     // BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #276 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  #277 = Class              #364          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n+  #278 = NameAndType        #366:#367     // ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #279 = NameAndType        #96:#368      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #280 = NameAndType        #369:#370     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #281 = NameAndType        #371:#367     // METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #282 = NameAndType        #96:#372      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #283 = NameAndType        #373:#107     // getBytes:(J)[B\n+  #284 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+  #285 = Utf8               java/lang/Object\n+  #286 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #287 = Utf8               java/lang/String\n+  #288 = Utf8               org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n+  #289 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n+  #290 = Utf8               getTime\n+  #291 = Utf8               ()J\n+  #292 = Utf8               ([B)V\n+  #293 = Utf8               getInstance\n+  #294 = Utf8               ()Ljava/util/Calendar;\n+  #295 = Utf8               setTimeInMillis\n+  #296 = Utf8               (J)V\n+  #297 = Utf8               get\n+  #298 = Utf8               (I)I\n+  #299 = Utf8               putLong\n+  #300 = Utf8               java/math/BigInteger\n+  #301 = Utf8               bitLength\n+  #302 = Utf8               ()I\n+  #303 = Utf8               longValue\n+  #304 = Utf8               append\n+  #305 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #306 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #307 = Utf8               toString\n+  #308 = Utf8               ()Ljava/lang/String;\n+  #309 = Utf8               (Ljava/lang/String;)V\n+  #310 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #311 = Utf8               valueOf\n+  #312 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #313 = Utf8               getValue\n+  #314 = Utf8               set\n+  #315 = Utf8               (II)V\n+  #316 = Utf8               ()Ljava/util/Date;\n+  #317 = Utf8               UPATH_ID\n+  #318 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #319 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #320 = Utf8               getExtraField\n+  #321 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #322 = Utf8               setName\n+  #323 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #324 = Utf8               NameSource\n+  #325 = Utf8               InnerClasses\n+  #326 = Utf8               UNICODE_EXTRA_FIELD\n+  #327 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #328 = Utf8               setNameSource\n+  #329 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #330 = Utf8               UCOM_ID\n+  #331 = Utf8               setComment\n+  #332 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource\n+  #333 = Utf8               CommentSource\n+  #334 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n+  #335 = Utf8               setCommentSource\n+  #336 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n+  #337 = Utf8               update\n+  #338 = Utf8               getNameCRC32\n+  #339 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #340 = Utf8               UTF8_ZIP_ENCODING\n+  #341 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #342 = Utf8               getUnicodeName\n+  #343 = Utf8               ()[B\n+  #344 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #345 = Utf8               decode\n+  #346 = Utf8               ([B)Ljava/lang/String;\n+  #347 = Utf8               java/util/Arrays\n+  #348 = Utf8               copyOf\n+  #349 = Utf8               ([BI)[B\n+  #350 = Utf8               java/lang/System\n+  #351 = Utf8               arraycopy\n+  #352 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #353 = Utf8               getGeneralPurposeBit\n+  #354 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #355 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #356 = Utf8               usesEncryption\n+  #357 = Utf8               ()Z\n+  #358 = Utf8               getMethod\n+  #359 = Utf8               UNSHRINKING\n+  #360 = Utf8               getCode\n+  #361 = Utf8               IMPLODING\n+  #362 = Utf8               ENHANCED_DEFLATED\n+  #363 = Utf8               BZIP2\n+  #364 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n+  #365 = Utf8               Feature\n+  #366 = Utf8               ENCRYPTION\n+  #367 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #368 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #369 = Utf8               getMethodByCode\n+  #370 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #371 = Utf8               METHOD\n+  #372 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #373 = Utf8               getBytes\n {\n   private static final byte[] DOS_TIME_MIN;\n     descriptor: [B\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   public org.apache.commons.compress.archivers.zip.ZipUtil();\n     descriptor: ()V\n@@ -969,21 +963,23 @@\n        107: aload_0\n        108: getstatic     #59                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n        111: invokevirtual #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n        114: return\n       LineNumberTable:\n         line 237: 0\n         line 238: 8\n+        line 239: 15\n         line 240: 25\n         line 242: 33\n         line 243: 38\n         line 244: 44\n         line 247: 51\n         line 248: 60\n         line 249: 69\n+        line 250: 77\n         line 251: 88\n         line 252: 91\n         line 253: 96\n         line 254: 101\n         line 255: 107\n         line 258: 114\n       LocalVariableTable:\n@@ -1294,10 +1290,10 @@\n          6: putstatic     #12                 // Field DOS_TIME_MIN:[B\n          9: return\n       LineNumberTable:\n         line 36: 0\n }\n SourceFile: \"ZipUtil.java\"\n InnerClasses:\n-  public static final #330= #246 of #241; // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  public static final #339= #252 of #241; // CommentSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  public static #371= #283 of #83;        // Feature=class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature of class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  public static final #324= #242 of #237; // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  public static final #333= #248 of #237; // CommentSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  public static #365= #277 of #83;        // Feature=class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature of class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n"}]}
