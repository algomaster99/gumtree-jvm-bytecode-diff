{"diffoscope-json-version": 1, "source1": "first/Deflate64CompressorInputStream.class", "source2": "second/Deflate64CompressorInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,63 +11,63 @@\n public class Deflate64CompressorInputStream extends CompressorInputStream implements InputStreamStatistics\n {\n     private InputStream originalStream;\n     private HuffmanDecoder decoder;\n     private long compressedBytesRead;\n     private final byte[] oneByte;\n     \n-    public Deflate64CompressorInputStream(final InputStream in) {\n-        this(new HuffmanDecoder(in));\n-        this.originalStream = in;\n+    public Deflate64CompressorInputStream(final InputStream originalStream) {\n+        this(new HuffmanDecoder(originalStream));\n+        this.originalStream = originalStream;\n     }\n     \n     Deflate64CompressorInputStream(final HuffmanDecoder decoder) {\n         this.oneByte = new byte[1];\n         this.decoder = decoder;\n     }\n     \n     public int read() throws IOException {\n         while (true) {\n-            final int r = this.read(this.oneByte);\n-            switch (r) {\n+            final int read = this.read(this.oneByte);\n+            switch (read) {\n                 case 1: {\n                     return this.oneByte[0] & 0xFF;\n                 }\n                 case -1: {\n                     return -1;\n                 }\n                 case 0: {\n                     continue;\n                 }\n                 default: {\n-                    throw new IllegalStateException(\"Invalid return value from read: \" + r);\n+                    throw new IllegalStateException(\"Invalid return value from read: \" + read);\n                 }\n             }\n         }\n     }\n     \n-    public int read(final byte[] b, final int off, final int len) throws IOException {\n-        if (len == 0) {\n+    public int read(final byte[] array, final int n, final int n2) throws IOException {\n+        if (n2 == 0) {\n             return 0;\n         }\n-        int read = -1;\n+        int decode = -1;\n         if (this.decoder != null) {\n             try {\n-                read = this.decoder.decode(b, off, len);\n+                decode = this.decoder.decode(array, n, n2);\n             }\n-            catch (final RuntimeException ex) {\n-                throw new IOException(\"Invalid Deflate64 input\", ex);\n+            catch (final RuntimeException cause) {\n+                throw new IOException(\"Invalid Deflate64 input\", cause);\n             }\n             this.compressedBytesRead = this.decoder.getBytesRead();\n-            this.count(read);\n-            if (read == -1) {\n+            this.count(decode);\n+            if (decode == -1) {\n                 this.closeDecoder();\n             }\n         }\n-        return read;\n+        return decode;\n     }\n     \n     public int available() throws IOException {\n         return (this.decoder != null) ? this.decoder.available() : 0;\n     }\n     \n     public void close() throws IOException {\n"}]}
