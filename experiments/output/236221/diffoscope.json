{"diffoscope-json-version": 1, "source1": "first/XmlStreamReader.class", "source2": "second/XmlStreamReader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -45,311 +45,294 @@\n     private static final String HTTP_EX_2 = \"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], encoding mismatch\";\n     private static final String HTTP_EX_3 = \"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], Invalid MIME\";\n     \n     public String getDefaultEncoding() {\n         return this.defaultEncoding;\n     }\n     \n-    public XmlStreamReader(final File file) throws IOException {\n-        this(new FileInputStream(Objects.requireNonNull(file)));\n+    public XmlStreamReader(final File obj) throws IOException {\n+        this(new FileInputStream(Objects.requireNonNull(obj)));\n     }\n     \n     public XmlStreamReader(final InputStream inputStream) throws IOException {\n         this(inputStream, true);\n     }\n     \n-    public XmlStreamReader(final InputStream inputStream, final boolean lenient) throws IOException {\n-        this(inputStream, lenient, null);\n+    public XmlStreamReader(final InputStream inputStream, final boolean b) throws IOException {\n+        this(inputStream, b, null);\n     }\n     \n-    public XmlStreamReader(final InputStream inputStream, final boolean lenient, final String defaultEncoding) throws IOException {\n+    public XmlStreamReader(final InputStream inputStream, final boolean b, final String defaultEncoding) throws IOException {\n         Objects.requireNonNull(inputStream, \"inputStream\");\n         this.defaultEncoding = defaultEncoding;\n-        final BOMInputStream bom = new BOMInputStream((InputStream)new BufferedInputStream(inputStream, 8192), false, XmlStreamReader.BOMS);\n-        final BOMInputStream pis = new BOMInputStream((InputStream)bom, true, XmlStreamReader.XML_GUESS_BYTES);\n-        this.encoding = this.doRawStream(bom, pis, lenient);\n-        this.reader = new InputStreamReader((InputStream)pis, this.encoding);\n+        final BOMInputStream bomInputStream = new BOMInputStream((InputStream)new BufferedInputStream(inputStream, 8192), false, XmlStreamReader.BOMS);\n+        final BOMInputStream in = new BOMInputStream((InputStream)bomInputStream, true, XmlStreamReader.XML_GUESS_BYTES);\n+        this.encoding = this.doRawStream(bomInputStream, in, b);\n+        this.reader = new InputStreamReader((InputStream)in, this.encoding);\n     }\n     \n-    public XmlStreamReader(final URL url) throws IOException {\n-        this(((URL)Objects.requireNonNull(url, \"url\")).openConnection(), null);\n+    public XmlStreamReader(final URL obj) throws IOException {\n+        this(((URL)Objects.requireNonNull(obj, \"url\")).openConnection(), null);\n     }\n     \n-    public XmlStreamReader(final URLConnection conn, final String defaultEncoding) throws IOException {\n-        Objects.requireNonNull(conn, \"conm\");\n+    public XmlStreamReader(final URLConnection obj, final String defaultEncoding) throws IOException {\n+        Objects.requireNonNull(obj, \"conm\");\n         this.defaultEncoding = defaultEncoding;\n-        final boolean lenient = true;\n-        final String contentType = conn.getContentType();\n-        final InputStream inputStream = conn.getInputStream();\n-        final BOMInputStream bom = new BOMInputStream((InputStream)new BufferedInputStream(inputStream, 8192), false, XmlStreamReader.BOMS);\n-        final BOMInputStream pis = new BOMInputStream((InputStream)bom, true, XmlStreamReader.XML_GUESS_BYTES);\n-        if (conn instanceof HttpURLConnection || contentType != null) {\n-            this.encoding = this.processHttpStream(bom, pis, contentType, true);\n+        final String contentType = obj.getContentType();\n+        final BOMInputStream bomInputStream = new BOMInputStream((InputStream)new BufferedInputStream(obj.getInputStream(), 8192), false, XmlStreamReader.BOMS);\n+        final BOMInputStream in = new BOMInputStream((InputStream)bomInputStream, true, XmlStreamReader.XML_GUESS_BYTES);\n+        if (obj instanceof HttpURLConnection || contentType != null) {\n+            this.encoding = this.processHttpStream(bomInputStream, in, contentType, true);\n         }\n         else {\n-            this.encoding = this.doRawStream(bom, pis, true);\n+            this.encoding = this.doRawStream(bomInputStream, in, true);\n         }\n-        this.reader = new InputStreamReader((InputStream)pis, this.encoding);\n+        this.reader = new InputStreamReader((InputStream)in, this.encoding);\n     }\n     \n-    public XmlStreamReader(final InputStream inputStream, final String httpContentType) throws IOException {\n-        this(inputStream, httpContentType, true);\n+    public XmlStreamReader(final InputStream inputStream, final String s) throws IOException {\n+        this(inputStream, s, true);\n     }\n     \n-    public XmlStreamReader(final InputStream inputStream, final String httpContentType, final boolean lenient, final String defaultEncoding) throws IOException {\n+    public XmlStreamReader(final InputStream inputStream, final String s, final boolean b, final String defaultEncoding) throws IOException {\n         Objects.requireNonNull(inputStream, \"inputStream\");\n         this.defaultEncoding = defaultEncoding;\n-        final BOMInputStream bom = new BOMInputStream((InputStream)new BufferedInputStream(inputStream, 8192), false, XmlStreamReader.BOMS);\n-        final BOMInputStream pis = new BOMInputStream((InputStream)bom, true, XmlStreamReader.XML_GUESS_BYTES);\n-        this.encoding = this.processHttpStream(bom, pis, httpContentType, lenient);\n-        this.reader = new InputStreamReader((InputStream)pis, this.encoding);\n+        final BOMInputStream bomInputStream = new BOMInputStream((InputStream)new BufferedInputStream(inputStream, 8192), false, XmlStreamReader.BOMS);\n+        final BOMInputStream in = new BOMInputStream((InputStream)bomInputStream, true, XmlStreamReader.XML_GUESS_BYTES);\n+        this.encoding = this.processHttpStream(bomInputStream, in, s, b);\n+        this.reader = new InputStreamReader((InputStream)in, this.encoding);\n     }\n     \n-    public XmlStreamReader(final InputStream inputStream, final String httpContentType, final boolean lenient) throws IOException {\n-        this(inputStream, httpContentType, lenient, null);\n+    public XmlStreamReader(final InputStream inputStream, final String s, final boolean b) throws IOException {\n+        this(inputStream, s, b, null);\n     }\n     \n     public String getEncoding() {\n         return this.encoding;\n     }\n     \n     @Override\n-    public int read(final char[] buf, final int offset, final int len) throws IOException {\n-        return this.reader.read(buf, offset, len);\n+    public int read(final char[] array, final int n, final int n2) throws IOException {\n+        return this.reader.read(array, n, n2);\n     }\n     \n     @Override\n     public void close() throws IOException {\n         this.reader.close();\n     }\n     \n-    private String doRawStream(final BOMInputStream bom, final BOMInputStream pis, final boolean lenient) throws IOException {\n-        final String bomEnc = bom.getBOMCharsetName();\n-        final String xmlGuessEnc = pis.getBOMCharsetName();\n-        final String xmlEnc = getXmlProlog((InputStream)pis, xmlGuessEnc);\n+    private String doRawStream(final BOMInputStream bomInputStream, final BOMInputStream bomInputStream2, final boolean b) throws IOException {\n+        final String bomCharsetName = bomInputStream.getBOMCharsetName();\n+        final String bomCharsetName2 = bomInputStream2.getBOMCharsetName();\n+        final String xmlProlog = getXmlProlog((InputStream)bomInputStream2, bomCharsetName2);\n         try {\n-            return this.calculateRawEncoding(bomEnc, xmlGuessEnc, xmlEnc);\n+            return this.calculateRawEncoding(bomCharsetName, bomCharsetName2, xmlProlog);\n         }\n         catch (final XmlStreamReaderException ex) {\n-            if (lenient) {\n+            if (b) {\n                 return this.doLenientDetection(null, ex);\n             }\n             throw ex;\n         }\n     }\n     \n-    private String processHttpStream(final BOMInputStream bom, final BOMInputStream pis, final String httpContentType, final boolean lenient) throws IOException {\n-        final String bomEnc = bom.getBOMCharsetName();\n-        final String xmlGuessEnc = pis.getBOMCharsetName();\n-        final String xmlEnc = getXmlProlog((InputStream)pis, xmlGuessEnc);\n+    private String processHttpStream(final BOMInputStream bomInputStream, final BOMInputStream bomInputStream2, final String s, final boolean b) throws IOException {\n+        final String bomCharsetName = bomInputStream.getBOMCharsetName();\n+        final String bomCharsetName2 = bomInputStream2.getBOMCharsetName();\n+        final String xmlProlog = getXmlProlog((InputStream)bomInputStream2, bomCharsetName2);\n         try {\n-            return this.calculateHttpEncoding(httpContentType, bomEnc, xmlGuessEnc, xmlEnc, lenient);\n+            return this.calculateHttpEncoding(s, bomCharsetName, bomCharsetName2, xmlProlog, b);\n         }\n         catch (final XmlStreamReaderException ex) {\n-            if (lenient) {\n-                return this.doLenientDetection(httpContentType, ex);\n+            if (b) {\n+                return this.doLenientDetection(s, ex);\n             }\n             throw ex;\n         }\n     }\n     \n-    private String doLenientDetection(String httpContentType, XmlStreamReaderException ex) throws IOException {\n-        if (httpContentType != null && httpContentType.startsWith(\"text/html\")) {\n-            httpContentType = httpContentType.substring(\"text/html\".length());\n-            httpContentType = \"text/xml\" + httpContentType;\n+    private String doLenientDetection(String str, XmlStreamReaderException ex) throws IOException {\n+        if (str != null && str.startsWith(\"text/html\")) {\n+            str = str.substring(\"text/html\".length());\n+            str = \"text/xml\" + str;\n             try {\n-                return this.calculateHttpEncoding(httpContentType, ex.getBomEncoding(), ex.getXmlGuessEncoding(), ex.getXmlEncoding(), true);\n+                return this.calculateHttpEncoding(str, ex.getBomEncoding(), ex.getXmlGuessEncoding(), ex.getXmlEncoding(), true);\n             }\n             catch (final XmlStreamReaderException ex2) {\n                 ex = ex2;\n             }\n         }\n-        String encoding = ex.getXmlEncoding();\n-        if (encoding == null) {\n-            encoding = ex.getContentTypeEncoding();\n+        String s = ex.getXmlEncoding();\n+        if (s == null) {\n+            s = ex.getContentTypeEncoding();\n         }\n-        if (encoding == null) {\n-            encoding = ((this.defaultEncoding == null) ? \"UTF-8\" : this.defaultEncoding);\n+        if (s == null) {\n+            s = ((this.defaultEncoding == null) ? \"UTF-8\" : this.defaultEncoding);\n         }\n-        return encoding;\n+        return s;\n     }\n     \n-    String calculateRawEncoding(final String bomEnc, final String xmlGuessEnc, final String xmlEnc) throws IOException {\n-        if (bomEnc == null) {\n-            if (xmlGuessEnc == null || xmlEnc == null) {\n+    String calculateRawEncoding(final String s, final String s2, final String s3) throws IOException {\n+        if (s == null) {\n+            if (s2 == null || s3 == null) {\n                 return (this.defaultEncoding == null) ? \"UTF-8\" : this.defaultEncoding;\n             }\n-            if (xmlEnc.equals(\"UTF-16\") && (xmlGuessEnc.equals(\"UTF-16BE\") || xmlGuessEnc.equals(\"UTF-16LE\"))) {\n-                return xmlGuessEnc;\n+            if (s3.equals(\"UTF-16\") && (s2.equals(\"UTF-16BE\") || s2.equals(\"UTF-16LE\"))) {\n+                return s2;\n             }\n-            return xmlEnc;\n+            return s3;\n         }\n-        else if (bomEnc.equals(\"UTF-8\")) {\n-            if (xmlGuessEnc != null && !xmlGuessEnc.equals(\"UTF-8\")) {\n-                final String msg = MessageFormat.format(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch\", bomEnc, xmlGuessEnc, xmlEnc);\n-                throw new XmlStreamReaderException(msg, bomEnc, xmlGuessEnc, xmlEnc);\n+        else if (s.equals(\"UTF-8\")) {\n+            if (s2 != null && !s2.equals(\"UTF-8\")) {\n+                throw new XmlStreamReaderException(MessageFormat.format(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch\", s, s2, s3), s, s2, s3);\n             }\n-            if (xmlEnc != null && !xmlEnc.equals(\"UTF-8\")) {\n-                final String msg = MessageFormat.format(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch\", bomEnc, xmlGuessEnc, xmlEnc);\n-                throw new XmlStreamReaderException(msg, bomEnc, xmlGuessEnc, xmlEnc);\n+            if (s3 != null && !s3.equals(\"UTF-8\")) {\n+                throw new XmlStreamReaderException(MessageFormat.format(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch\", s, s2, s3), s, s2, s3);\n             }\n-            return bomEnc;\n+            return s;\n         }\n-        else if (bomEnc.equals(\"UTF-16BE\") || bomEnc.equals(\"UTF-16LE\")) {\n-            if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {\n-                final String msg = MessageFormat.format(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch\", bomEnc, xmlGuessEnc, xmlEnc);\n-                throw new XmlStreamReaderException(msg, bomEnc, xmlGuessEnc, xmlEnc);\n+        else if (s.equals(\"UTF-16BE\") || s.equals(\"UTF-16LE\")) {\n+            if (s2 != null && !s2.equals(s)) {\n+                throw new XmlStreamReaderException(MessageFormat.format(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch\", s, s2, s3), s, s2, s3);\n             }\n-            if (xmlEnc != null && !xmlEnc.equals(\"UTF-16\") && !xmlEnc.equals(bomEnc)) {\n-                final String msg = MessageFormat.format(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch\", bomEnc, xmlGuessEnc, xmlEnc);\n-                throw new XmlStreamReaderException(msg, bomEnc, xmlGuessEnc, xmlEnc);\n+            if (s3 != null && !s3.equals(\"UTF-16\") && !s3.equals(s)) {\n+                throw new XmlStreamReaderException(MessageFormat.format(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch\", s, s2, s3), s, s2, s3);\n             }\n-            return bomEnc;\n+            return s;\n         }\n         else {\n-            if (!bomEnc.equals(\"UTF-32BE\") && !bomEnc.equals(\"UTF-32LE\")) {\n-                final String msg = MessageFormat.format(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] unknown BOM\", bomEnc, xmlGuessEnc, xmlEnc);\n-                throw new XmlStreamReaderException(msg, bomEnc, xmlGuessEnc, xmlEnc);\n+            if (!s.equals(\"UTF-32BE\") && !s.equals(\"UTF-32LE\")) {\n+                throw new XmlStreamReaderException(MessageFormat.format(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] unknown BOM\", s, s2, s3), s, s2, s3);\n             }\n-            if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {\n-                final String msg = MessageFormat.format(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch\", bomEnc, xmlGuessEnc, xmlEnc);\n-                throw new XmlStreamReaderException(msg, bomEnc, xmlGuessEnc, xmlEnc);\n+            if (s2 != null && !s2.equals(s)) {\n+                throw new XmlStreamReaderException(MessageFormat.format(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch\", s, s2, s3), s, s2, s3);\n             }\n-            if (xmlEnc != null && !xmlEnc.equals(\"UTF-32\") && !xmlEnc.equals(bomEnc)) {\n-                final String msg = MessageFormat.format(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch\", bomEnc, xmlGuessEnc, xmlEnc);\n-                throw new XmlStreamReaderException(msg, bomEnc, xmlGuessEnc, xmlEnc);\n+            if (s3 != null && !s3.equals(\"UTF-32\") && !s3.equals(s)) {\n+                throw new XmlStreamReaderException(MessageFormat.format(\"Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch\", s, s2, s3), s, s2, s3);\n             }\n-            return bomEnc;\n+            return s;\n         }\n     }\n     \n-    String calculateHttpEncoding(final String httpContentType, final String bomEnc, final String xmlGuessEnc, final String xmlEnc, final boolean lenient) throws IOException {\n-        if (lenient && xmlEnc != null) {\n-            return xmlEnc;\n+    String calculateHttpEncoding(final String s, final String s2, final String s3, final String s4, final boolean b) throws IOException {\n+        if (b && s4 != null) {\n+            return s4;\n         }\n-        final String cTMime = getContentTypeMime(httpContentType);\n-        final String cTEnc = getContentTypeEncoding(httpContentType);\n-        final boolean appXml = isAppXml(cTMime);\n-        final boolean textXml = isTextXml(cTMime);\n+        final String contentTypeMime = getContentTypeMime(s);\n+        final String contentTypeEncoding = getContentTypeEncoding(s);\n+        final boolean appXml = isAppXml(contentTypeMime);\n+        final boolean textXml = isTextXml(contentTypeMime);\n         if (!appXml && !textXml) {\n-            final String msg = MessageFormat.format(\"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], Invalid MIME\", cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n-            throw new XmlStreamReaderException(msg, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n+            throw new XmlStreamReaderException(MessageFormat.format(\"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], Invalid MIME\", contentTypeMime, contentTypeEncoding, s2, s3, s4), contentTypeMime, contentTypeEncoding, s2, s3, s4);\n         }\n-        if (cTEnc == null) {\n+        if (contentTypeEncoding == null) {\n             if (appXml) {\n-                return this.calculateRawEncoding(bomEnc, xmlGuessEnc, xmlEnc);\n+                return this.calculateRawEncoding(s2, s3, s4);\n             }\n             return (this.defaultEncoding == null) ? \"US-ASCII\" : this.defaultEncoding;\n         }\n-        else if (cTEnc.equals(\"UTF-16BE\") || cTEnc.equals(\"UTF-16LE\")) {\n-            if (bomEnc != null) {\n-                final String msg = MessageFormat.format(\"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], BOM must be NULL\", cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n-                throw new XmlStreamReaderException(msg, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n-            }\n-            return cTEnc;\n-        }\n-        else if (cTEnc.equals(\"UTF-16\")) {\n-            if (bomEnc != null && bomEnc.startsWith(\"UTF-16\")) {\n-                return bomEnc;\n-            }\n-            final String msg = MessageFormat.format(\"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], encoding mismatch\", cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n-            throw new XmlStreamReaderException(msg, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n-        }\n-        else if (cTEnc.equals(\"UTF-32BE\") || cTEnc.equals(\"UTF-32LE\")) {\n-            if (bomEnc != null) {\n-                final String msg = MessageFormat.format(\"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], BOM must be NULL\", cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n-                throw new XmlStreamReaderException(msg, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n+        else if (contentTypeEncoding.equals(\"UTF-16BE\") || contentTypeEncoding.equals(\"UTF-16LE\")) {\n+            if (s2 != null) {\n+                throw new XmlStreamReaderException(MessageFormat.format(\"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], BOM must be NULL\", contentTypeMime, contentTypeEncoding, s2, s3, s4), contentTypeMime, contentTypeEncoding, s2, s3, s4);\n             }\n-            return cTEnc;\n+            return contentTypeEncoding;\n+        }\n+        else if (contentTypeEncoding.equals(\"UTF-16\")) {\n+            if (s2 != null && s2.startsWith(\"UTF-16\")) {\n+                return s2;\n+            }\n+            throw new XmlStreamReaderException(MessageFormat.format(\"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], encoding mismatch\", contentTypeMime, contentTypeEncoding, s2, s3, s4), contentTypeMime, contentTypeEncoding, s2, s3, s4);\n+        }\n+        else if (contentTypeEncoding.equals(\"UTF-32BE\") || contentTypeEncoding.equals(\"UTF-32LE\")) {\n+            if (s2 != null) {\n+                throw new XmlStreamReaderException(MessageFormat.format(\"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], BOM must be NULL\", contentTypeMime, contentTypeEncoding, s2, s3, s4), contentTypeMime, contentTypeEncoding, s2, s3, s4);\n+            }\n+            return contentTypeEncoding;\n         }\n         else {\n-            if (!cTEnc.equals(\"UTF-32\")) {\n-                return cTEnc;\n+            if (!contentTypeEncoding.equals(\"UTF-32\")) {\n+                return contentTypeEncoding;\n             }\n-            if (bomEnc != null && bomEnc.startsWith(\"UTF-32\")) {\n-                return bomEnc;\n+            if (s2 != null && s2.startsWith(\"UTF-32\")) {\n+                return s2;\n             }\n-            final String msg = MessageFormat.format(\"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], encoding mismatch\", cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n-            throw new XmlStreamReaderException(msg, cTMime, cTEnc, bomEnc, xmlGuessEnc, xmlEnc);\n+            throw new XmlStreamReaderException(MessageFormat.format(\"Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], encoding mismatch\", contentTypeMime, contentTypeEncoding, s2, s3, s4), contentTypeMime, contentTypeEncoding, s2, s3, s4);\n         }\n     }\n     \n-    static String getContentTypeMime(final String httpContentType) {\n-        String mime = null;\n-        if (httpContentType != null) {\n-            final int i = httpContentType.indexOf(\";\");\n-            if (i >= 0) {\n-                mime = httpContentType.substring(0, i);\n+    static String getContentTypeMime(final String s) {\n+        String trim = null;\n+        if (s != null) {\n+            final int index = s.indexOf(\";\");\n+            String substring;\n+            if (index >= 0) {\n+                substring = s.substring(0, index);\n             }\n             else {\n-                mime = httpContentType;\n+                substring = s;\n             }\n-            mime = mime.trim();\n+            trim = substring.trim();\n         }\n-        return mime;\n+        return trim;\n     }\n     \n-    static String getContentTypeEncoding(final String httpContentType) {\n-        String encoding = null;\n-        if (httpContentType != null) {\n-            final int i = httpContentType.indexOf(\";\");\n-            if (i > -1) {\n-                final String postMime = httpContentType.substring(i + 1);\n-                final Matcher m = XmlStreamReader.CHARSET_PATTERN.matcher(postMime);\n-                encoding = (m.find() ? m.group(1) : null);\n-                encoding = ((encoding != null) ? encoding.toUpperCase(Locale.ROOT) : null);\n+    static String getContentTypeEncoding(final String s) {\n+        String s2 = null;\n+        if (s != null) {\n+            final int index = s.indexOf(\";\");\n+            if (index > -1) {\n+                final Matcher matcher = XmlStreamReader.CHARSET_PATTERN.matcher(s.substring(index + 1));\n+                final String s3 = matcher.find() ? matcher.group(1) : null;\n+                s2 = ((s3 != null) ? s3.toUpperCase(Locale.ROOT) : null);\n             }\n         }\n-        return encoding;\n+        return s2;\n     }\n     \n-    private static String getXmlProlog(final InputStream inputStream, final String guessedEnc) throws IOException {\n-        String encoding = null;\n-        if (guessedEnc != null) {\n+    private static String getXmlProlog(final InputStream inputStream, final String charsetName) throws IOException {\n+        String substring = null;\n+        if (charsetName != null) {\n             final byte[] bytes = new byte[8192];\n             inputStream.mark(8192);\n-            int offset;\n-            int max;\n-            int c;\n-            int firstGT;\n-            String xmlProlog;\n-            for (offset = 0, max = 8192, c = inputStream.read(bytes, offset, max), firstGT = -1, xmlProlog = \"\"; c != -1 && firstGT == -1 && offset < 8192; offset += c, max -= c, c = inputStream.read(bytes, offset, max), xmlProlog = new String(bytes, 0, offset, guessedEnc), firstGT = xmlProlog.indexOf(62)) {}\n-            if (firstGT == -1) {\n-                if (c == -1) {\n+            int n;\n+            int n2;\n+            int n3;\n+            int index;\n+            String s;\n+            for (n = 0, n2 = 8192, n3 = inputStream.read(bytes, n, n2), index = -1, s = \"\"; n3 != -1 && index == -1 && n < 8192; n += n3, n2 -= n3, n3 = inputStream.read(bytes, n, n2), s = new String(bytes, 0, n, charsetName), index = s.indexOf(62)) {}\n+            if (index == -1) {\n+                if (n3 == -1) {\n                     throw new IOException(\"Unexpected end of XML stream\");\n                 }\n-                throw new IOException(\"XML prolog or ROOT element not found on first \" + offset + \" bytes\");\n+                throw new IOException(\"XML prolog or ROOT element not found on first \" + n + \" bytes\");\n             }\n-            else {\n-                final int bytesRead = offset;\n-                if (bytesRead > 0) {\n-                    inputStream.reset();\n-                    final BufferedReader bReader = new BufferedReader(new StringReader(xmlProlog.substring(0, firstGT + 1)));\n-                    final StringBuffer prolog = new StringBuffer();\n-                    String line;\n-                    while ((line = bReader.readLine()) != null) {\n-                        prolog.append(line);\n-                    }\n-                    final Matcher m = XmlStreamReader.ENCODING_PATTERN.matcher(prolog);\n-                    if (m.find()) {\n-                        encoding = m.group(1).toUpperCase(Locale.ROOT);\n-                        encoding = encoding.substring(1, encoding.length() - 1);\n-                    }\n+            else if (n > 0) {\n+                inputStream.reset();\n+                final BufferedReader bufferedReader = new BufferedReader(new StringReader(s.substring(0, index + 1)));\n+                final StringBuffer input = new StringBuffer();\n+                String line;\n+                while ((line = bufferedReader.readLine()) != null) {\n+                    input.append(line);\n+                }\n+                final Matcher matcher = XmlStreamReader.ENCODING_PATTERN.matcher(input);\n+                if (matcher.find()) {\n+                    final String upperCase = matcher.group(1).toUpperCase(Locale.ROOT);\n+                    substring = upperCase.substring(1, upperCase.length() - 1);\n                 }\n             }\n         }\n-        return encoding;\n+        return substring;\n     }\n     \n-    static boolean isAppXml(final String mime) {\n-        return mime != null && (mime.equals(\"application/xml\") || mime.equals(\"application/xml-dtd\") || mime.equals(\"application/xml-external-parsed-entity\") || (mime.startsWith(\"application/\") && mime.endsWith(\"+xml\")));\n+    static boolean isAppXml(final String s) {\n+        return s != null && (s.equals(\"application/xml\") || s.equals(\"application/xml-dtd\") || s.equals(\"application/xml-external-parsed-entity\") || (s.startsWith(\"application/\") && s.endsWith(\"+xml\")));\n     }\n     \n-    static boolean isTextXml(final String mime) {\n-        return mime != null && (mime.equals(\"text/xml\") || mime.equals(\"text/xml-external-parsed-entity\") || (mime.startsWith(\"text/\") && mime.endsWith(\"+xml\")));\n+    static boolean isTextXml(final String s) {\n+        return s != null && (s.equals(\"text/xml\") || s.equals(\"text/xml-external-parsed-entity\") || (s.startsWith(\"text/\") && s.endsWith(\"+xml\")));\n     }\n     \n     static {\n         BOMS = new ByteOrderMark[] { ByteOrderMark.UTF_8, ByteOrderMark.UTF_16BE, ByteOrderMark.UTF_16LE, ByteOrderMark.UTF_32BE, ByteOrderMark.UTF_32LE };\n         XML_GUESS_BYTES = new ByteOrderMark[] { new ByteOrderMark(\"UTF-8\", new int[] { 60, 63, 120, 109 }), new ByteOrderMark(\"UTF-16BE\", new int[] { 0, 60, 0, 63 }), new ByteOrderMark(\"UTF-16LE\", new int[] { 60, 0, 63, 0 }), new ByteOrderMark(\"UTF-32BE\", new int[] { 0, 0, 0, 60, 0, 0, 0, 63, 0, 0, 0, 120, 0, 0, 0, 109 }), new ByteOrderMark(\"UTF-32LE\", new int[] { 60, 0, 0, 0, 63, 0, 0, 0, 120, 0, 0, 0, 109, 0, 0, 0 }), new ByteOrderMark(\"CP1047\", new int[] { 76, 111, 167, 148 }) };\n         CHARSET_PATTERN = Pattern.compile(\"charset=[\\\"']?([.[^; \\\"']]*)[\\\"']?\");\n         ENCODING_PATTERN = Pattern.compile(\"<\\\\?xml.*encoding[\\\\s]*=[\\\\s]*((?:\\\".[^\\\"]*\\\")|(?:'.[^']*'))\", 8);\n"}]}
