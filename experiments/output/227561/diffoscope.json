{"diffoscope-json-version": 1, "source1": "first/MethodCountCheck.class", "source2": "second/MethodCountCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -42,74 +42,70 @@\n         return new int[] { 14, 155, 154, 15, 157, 9, 199 };\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 9 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (ast.getType() == 9) {\n-            if (this.isInLatestScopeDefinition(ast)) {\n-                this.raiseCounter(ast);\n+    public void visitToken(final DetailAST detailAST) {\n+        if (detailAST.getType() == 9) {\n+            if (this.isInLatestScopeDefinition(detailAST)) {\n+                this.raiseCounter(detailAST);\n             }\n         }\n         else {\n-            this.counters.push(new MethodCountCheck.MethodCounter(ast));\n+            this.counters.push(new MethodCountCheck.MethodCounter(detailAST));\n         }\n     }\n     \n-    public void leaveToken(final DetailAST ast) {\n-        if (ast.getType() != 9) {\n-            final MethodCountCheck.MethodCounter counter = (MethodCountCheck.MethodCounter)this.counters.pop();\n-            this.checkCounters(counter, ast);\n+    public void leaveToken(final DetailAST detailAST) {\n+        if (detailAST.getType() != 9) {\n+            this.checkCounters(this.counters.pop(), detailAST);\n         }\n     }\n     \n-    private boolean isInLatestScopeDefinition(final DetailAST methodDef) {\n-        boolean result = false;\n+    private boolean isInLatestScopeDefinition(final DetailAST detailAST) {\n+        boolean b = false;\n         if (!this.counters.isEmpty()) {\n-            final DetailAST latestDefinition = ((MethodCountCheck.MethodCounter)this.counters.peek()).getScopeDefinition();\n-            result = (latestDefinition == methodDef.getParent().getParent());\n+            b = (((MethodCountCheck.MethodCounter)this.counters.peek()).getScopeDefinition() == detailAST.getParent().getParent());\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private void raiseCounter(final DetailAST method) {\n-        final MethodCountCheck.MethodCounter actualCounter = (MethodCountCheck.MethodCounter)this.counters.peek();\n-        final Scope scope = ScopeUtil.getScope(method);\n-        actualCounter.increment(scope);\n+    private void raiseCounter(final DetailAST detailAST) {\n+        ((MethodCountCheck.MethodCounter)this.counters.peek()).increment(ScopeUtil.getScope(detailAST));\n     }\n     \n-    private void checkCounters(final MethodCountCheck.MethodCounter counter, final DetailAST ast) {\n-        this.checkMax(this.maxPrivate, counter.value(Scope.PRIVATE), \"too.many.privateMethods\", ast);\n-        this.checkMax(this.maxPackage, counter.value(Scope.PACKAGE), \"too.many.packageMethods\", ast);\n-        this.checkMax(this.maxProtected, counter.value(Scope.PROTECTED), \"too.many.protectedMethods\", ast);\n-        this.checkMax(this.maxPublic, counter.value(Scope.PUBLIC), \"too.many.publicMethods\", ast);\n-        this.checkMax(this.maxTotal, counter.getTotal(), \"too.many.methods\", ast);\n+    private void checkCounters(final MethodCountCheck.MethodCounter methodCounter, final DetailAST detailAST) {\n+        this.checkMax(this.maxPrivate, methodCounter.value(Scope.PRIVATE), \"too.many.privateMethods\", detailAST);\n+        this.checkMax(this.maxPackage, methodCounter.value(Scope.PACKAGE), \"too.many.packageMethods\", detailAST);\n+        this.checkMax(this.maxProtected, methodCounter.value(Scope.PROTECTED), \"too.many.protectedMethods\", detailAST);\n+        this.checkMax(this.maxPublic, methodCounter.value(Scope.PUBLIC), \"too.many.publicMethods\", detailAST);\n+        this.checkMax(this.maxTotal, methodCounter.getTotal(), \"too.many.methods\", detailAST);\n     }\n     \n-    private void checkMax(final int max, final int value, final String msg, final DetailAST ast) {\n-        if (max < value) {\n-            this.log(ast, msg, new Object[] { Integer.valueOf(value), Integer.valueOf(max) });\n+    private void checkMax(final int i, final int j, final String s, final DetailAST detailAST) {\n+        if (i < j) {\n+            this.log(detailAST, s, new Object[] { Integer.valueOf(j), Integer.valueOf(i) });\n         }\n     }\n     \n-    public void setMaxPrivate(final int value) {\n-        this.maxPrivate = value;\n+    public void setMaxPrivate(final int maxPrivate) {\n+        this.maxPrivate = maxPrivate;\n     }\n     \n-    public void setMaxPackage(final int value) {\n-        this.maxPackage = value;\n+    public void setMaxPackage(final int maxPackage) {\n+        this.maxPackage = maxPackage;\n     }\n     \n-    public void setMaxProtected(final int value) {\n-        this.maxProtected = value;\n+    public void setMaxProtected(final int maxProtected) {\n+        this.maxProtected = maxProtected;\n     }\n     \n-    public void setMaxPublic(final int value) {\n-        this.maxPublic = value;\n+    public void setMaxPublic(final int maxPublic) {\n+        this.maxPublic = maxPublic;\n     }\n     \n-    public void setMaxTotal(final int value) {\n-        this.maxTotal = value;\n+    public void setMaxTotal(final int maxTotal) {\n+        this.maxTotal = maxTotal;\n     }\n }\n"}]}
