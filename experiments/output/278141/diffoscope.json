{"diffoscope-json-version": 1, "source1": "first/LocalVariableTableAttribute.class", "source2": "second/LocalVariableTableAttribute.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,97 +16,94 @@\n     private int[] descriptor_indexes;\n     private final int[] indexes;\n     private final CPUTF8[] names;\n     private final CPUTF8[] descriptors;\n     private int codeLength;\n     private static CPUTF8 attributeName;\n     \n-    public static void setAttributeName(final CPUTF8 cpUTF8Value) {\n-        LocalVariableTableAttribute.attributeName = cpUTF8Value;\n+    public static void setAttributeName(final CPUTF8 attributeName) {\n+        LocalVariableTableAttribute.attributeName = attributeName;\n     }\n     \n     public LocalVariableTableAttribute(final int local_variable_table_length, final int[] start_pcs, final int[] lengths, final CPUTF8[] names, final CPUTF8[] descriptors, final int[] indexes) {\n         super(LocalVariableTableAttribute.attributeName);\n         this.local_variable_table_length = local_variable_table_length;\n         this.start_pcs = start_pcs;\n         this.lengths = lengths;\n         this.names = names;\n         this.descriptors = descriptors;\n         this.indexes = indexes;\n     }\n     \n-    public void setCodeLength(final int length) {\n-        this.codeLength = length;\n+    public void setCodeLength(final int codeLength) {\n+        this.codeLength = codeLength;\n     }\n     \n     protected int getLength() {\n         return 2 + 10 * this.local_variable_table_length;\n     }\n     \n-    protected void writeBody(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.local_variable_table_length);\n+    protected void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.local_variable_table_length);\n         for (int i = 0; i < this.local_variable_table_length; ++i) {\n-            dos.writeShort(this.start_pcs[i]);\n-            dos.writeShort(this.lengths[i]);\n-            dos.writeShort(this.name_indexes[i]);\n-            dos.writeShort(this.descriptor_indexes[i]);\n-            dos.writeShort(this.indexes[i]);\n+            dataOutputStream.writeShort(this.start_pcs[i]);\n+            dataOutputStream.writeShort(this.lengths[i]);\n+            dataOutputStream.writeShort(this.name_indexes[i]);\n+            dataOutputStream.writeShort(this.descriptor_indexes[i]);\n+            dataOutputStream.writeShort(this.indexes[i]);\n         }\n     }\n     \n     protected ClassFileEntry[] getNestedClassFileEntries() {\n-        final ArrayList nestedEntries = new ArrayList();\n-        nestedEntries.add(this.getAttributeName());\n+        final ArrayList list = new ArrayList();\n+        list.add(this.getAttributeName());\n         for (int i = 0; i < this.local_variable_table_length; ++i) {\n-            nestedEntries.add(this.names[i]);\n-            nestedEntries.add(this.descriptors[i]);\n+            list.add(this.names[i]);\n+            list.add(this.descriptors[i]);\n         }\n-        final ClassFileEntry[] nestedEntryArray = new ClassFileEntry[nestedEntries.size()];\n-        nestedEntries.toArray(nestedEntryArray);\n-        return nestedEntryArray;\n+        final ClassFileEntry[] a = new ClassFileEntry[list.size()];\n+        list.toArray(a);\n+        return a;\n     }\n     \n-    protected void resolve(final ClassConstantPool pool) {\n-        super.resolve(pool);\n+    protected void resolve(final ClassConstantPool classConstantPool) {\n+        super.resolve(classConstantPool);\n         this.name_indexes = new int[this.local_variable_table_length];\n         this.descriptor_indexes = new int[this.local_variable_table_length];\n         for (int i = 0; i < this.local_variable_table_length; ++i) {\n-            this.names[i].resolve(pool);\n-            this.descriptors[i].resolve(pool);\n-            this.name_indexes[i] = pool.indexOf((ClassFileEntry)this.names[i]);\n-            this.descriptor_indexes[i] = pool.indexOf((ClassFileEntry)this.descriptors[i]);\n+            this.names[i].resolve(classConstantPool);\n+            this.descriptors[i].resolve(classConstantPool);\n+            this.name_indexes[i] = classConstantPool.indexOf((ClassFileEntry)this.names[i]);\n+            this.descriptor_indexes[i] = classConstantPool.indexOf((ClassFileEntry)this.descriptors[i]);\n         }\n     }\n     \n     public String toString() {\n         return \"LocalVariableTable: \" + this.local_variable_table_length + \" variables\";\n     }\n     \n     protected int[] getStartPCs() {\n         return this.start_pcs;\n     }\n     \n-    public void renumber(final List byteCodeOffsets) throws Pack200Exception {\n-        final int[] unrenumbered_start_pcs = new int[this.start_pcs.length];\n-        System.arraycopy(this.start_pcs, 0, unrenumbered_start_pcs, 0, this.start_pcs.length);\n-        super.renumber(byteCodeOffsets);\n-        final int maxSize = this.codeLength;\n-        for (int index = 0; index < this.lengths.length; ++index) {\n-            final int start_pc = this.start_pcs[index];\n-            int revisedLength = -1;\n-            final int encodedLength = this.lengths[index];\n-            final int indexOfStartPC = unrenumbered_start_pcs[index];\n-            final int stopIndex = indexOfStartPC + encodedLength;\n-            if (stopIndex < 0) {\n+    public void renumber(final List list) throws Pack200Exception {\n+        final int[] array = new int[this.start_pcs.length];\n+        System.arraycopy(this.start_pcs, 0, array, 0, this.start_pcs.length);\n+        super.renumber(list);\n+        final int codeLength = this.codeLength;\n+        for (int i = 0; i < this.lengths.length; ++i) {\n+            final int n = this.start_pcs[i];\n+            final int n2 = array[i] + this.lengths[i];\n+            if (n2 < 0) {\n                 throw new Pack200Exception(\"Error renumbering bytecode indexes\");\n             }\n-            if (stopIndex == byteCodeOffsets.size()) {\n-                revisedLength = maxSize - start_pc;\n+            int n3;\n+            if (n2 == list.size()) {\n+                n3 = codeLength - n;\n             }\n             else {\n-                final int stopValue = (int)Integer.valueOf(byteCodeOffsets.get(stopIndex));\n-                revisedLength = stopValue - start_pc;\n+                n3 = Integer.valueOf(list.get(n2)) - n;\n             }\n-            this.lengths[index] = revisedLength;\n+            this.lengths[i] = n3;\n         }\n     }\n }\n"}]}
