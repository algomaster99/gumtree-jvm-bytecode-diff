{"diffoscope-json-version": 1, "source1": "first/JSONArray.class", "source2": "second/JSONArray.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,258 +17,258 @@\n {\n     private final ArrayList<Object> myArrayList;\n     \n     public JSONArray() {\n         this.myArrayList = new ArrayList<Object>();\n     }\n     \n-    public JSONArray(final JSONTokener x) throws JSONException {\n+    public JSONArray(final JSONTokener jsonTokener) throws JSONException {\n         this();\n-        if (x.nextClean() != '[') {\n-            throw x.syntaxError(\"A JSONArray text must start with '['\");\n+        if (jsonTokener.nextClean() != '[') {\n+            throw jsonTokener.syntaxError(\"A JSONArray text must start with '['\");\n         }\n-        char nextChar = x.nextClean();\n-        if (nextChar == '\\0') {\n-            throw x.syntaxError(\"Expected a ',' or ']'\");\n+        final char nextClean = jsonTokener.nextClean();\n+        if (nextClean == '\\0') {\n+            throw jsonTokener.syntaxError(\"Expected a ',' or ']'\");\n         }\n-        if (nextChar == ']') {\n+        if (nextClean == ']') {\n             return;\n         }\n-        x.back();\n+        jsonTokener.back();\n         while (true) {\n-            if (x.nextClean() == ',') {\n-                x.back();\n+            if (jsonTokener.nextClean() == ',') {\n+                jsonTokener.back();\n                 this.myArrayList.add(JSONObject.NULL);\n             }\n             else {\n-                x.back();\n-                this.myArrayList.add(x.nextValue());\n+                jsonTokener.back();\n+                this.myArrayList.add(jsonTokener.nextValue());\n             }\n-            switch (x.nextClean()) {\n+            switch (jsonTokener.nextClean()) {\n                 case '\\0': {\n-                    throw x.syntaxError(\"Expected a ',' or ']'\");\n+                    throw jsonTokener.syntaxError(\"Expected a ',' or ']'\");\n                 }\n                 case ',': {\n-                    nextChar = x.nextClean();\n-                    if (nextChar == '\\0') {\n-                        throw x.syntaxError(\"Expected a ',' or ']'\");\n+                    final char nextClean2 = jsonTokener.nextClean();\n+                    if (nextClean2 == '\\0') {\n+                        throw jsonTokener.syntaxError(\"Expected a ',' or ']'\");\n                     }\n-                    if (nextChar == ']') {\n+                    if (nextClean2 == ']') {\n                         return;\n                     }\n-                    x.back();\n+                    jsonTokener.back();\n                     continue;\n                 }\n                 case ']': {\n                     return;\n                 }\n                 default: {\n-                    throw x.syntaxError(\"Expected a ',' or ']'\");\n+                    throw jsonTokener.syntaxError(\"Expected a ',' or ']'\");\n                 }\n             }\n         }\n     }\n     \n-    public JSONArray(final String source) throws JSONException {\n-        this(new JSONTokener(source));\n+    public JSONArray(final String s) throws JSONException {\n+        this(new JSONTokener(s));\n     }\n     \n     public JSONArray(final Collection<?> collection) {\n         if (collection == null) {\n             this.myArrayList = new ArrayList<Object>();\n         }\n         else {\n             this.myArrayList = new ArrayList<Object>(collection.size());\n             this.addAll(collection, true);\n         }\n     }\n     \n-    public JSONArray(final Iterable<?> iter) {\n+    public JSONArray(final Iterable<?> iterable) {\n         this();\n-        if (iter == null) {\n+        if (iterable == null) {\n             return;\n         }\n-        this.addAll(iter, true);\n+        this.addAll(iterable, true);\n     }\n     \n-    public JSONArray(final JSONArray array) {\n-        if (array == null) {\n+    public JSONArray(final JSONArray jsonArray) {\n+        if (jsonArray == null) {\n             this.myArrayList = new ArrayList<Object>();\n         }\n         else {\n-            this.myArrayList = new ArrayList<Object>(array.myArrayList);\n+            this.myArrayList = new ArrayList<Object>(jsonArray.myArrayList);\n         }\n     }\n     \n-    public JSONArray(final Object array) throws JSONException {\n+    public JSONArray(final Object o) throws JSONException {\n         this();\n-        if (!array.getClass().isArray()) {\n+        if (!o.getClass().isArray()) {\n             throw new JSONException(\"JSONArray initial value should be a string or collection or array.\");\n         }\n-        this.addAll(array, true);\n+        this.addAll(o, true);\n     }\n     \n     public JSONArray(final int initialCapacity) throws JSONException {\n         if (initialCapacity < 0) {\n             throw new JSONException(\"JSONArray initial capacity cannot be negative.\");\n         }\n         this.myArrayList = new ArrayList<Object>(initialCapacity);\n     }\n     \n     @Override\n     public Iterator<Object> iterator() {\n         return this.myArrayList.iterator();\n     }\n     \n-    public Object get(final int index) throws JSONException {\n-        final Object object = this.opt(index);\n-        if (object == null) {\n-            throw new JSONException(\"JSONArray[\" + index + \"] not found.\");\n+    public Object get(final int i) throws JSONException {\n+        final Object opt = this.opt(i);\n+        if (opt == null) {\n+            throw new JSONException(\"JSONArray[\" + i + \"] not found.\");\n         }\n-        return object;\n+        return opt;\n     }\n     \n-    public boolean getBoolean(final int index) throws JSONException {\n-        final Object object = this.get(index);\n-        if (object.equals(Boolean.FALSE) || (object instanceof String && ((String)object).equalsIgnoreCase(\"false\"))) {\n+    public boolean getBoolean(final int n) throws JSONException {\n+        final Object value = this.get(n);\n+        if (value.equals(Boolean.FALSE) || (value instanceof String && ((String)value).equalsIgnoreCase(\"false\"))) {\n             return false;\n         }\n-        if (object.equals(Boolean.TRUE) || (object instanceof String && ((String)object).equalsIgnoreCase(\"true\"))) {\n+        if (value.equals(Boolean.TRUE) || (value instanceof String && ((String)value).equalsIgnoreCase(\"true\"))) {\n             return true;\n         }\n-        throw wrongValueFormatException(index, \"boolean\", object, null);\n+        throw wrongValueFormatException(n, \"boolean\", value, null);\n     }\n     \n-    public double getDouble(final int index) throws JSONException {\n-        final Object object = this.get(index);\n-        if (object instanceof Number) {\n-            return ((Number)object).doubleValue();\n+    public double getDouble(final int n) throws JSONException {\n+        final Object value = this.get(n);\n+        if (value instanceof Number) {\n+            return ((Number)value).doubleValue();\n         }\n         try {\n-            return Double.parseDouble(object.toString());\n+            return Double.parseDouble(value.toString());\n         }\n-        catch (final Exception e) {\n-            throw wrongValueFormatException(index, \"double\", object, e);\n+        catch (final Exception ex) {\n+            throw wrongValueFormatException(n, \"double\", value, ex);\n         }\n     }\n     \n-    public float getFloat(final int index) throws JSONException {\n-        final Object object = this.get(index);\n-        if (object instanceof Number) {\n-            return ((Number)object).floatValue();\n+    public float getFloat(final int n) throws JSONException {\n+        final Object value = this.get(n);\n+        if (value instanceof Number) {\n+            return ((Number)value).floatValue();\n         }\n         try {\n-            return Float.parseFloat(object.toString());\n+            return Float.parseFloat(value.toString());\n         }\n-        catch (final Exception e) {\n-            throw wrongValueFormatException(index, \"float\", object, e);\n+        catch (final Exception ex) {\n+            throw wrongValueFormatException(n, \"float\", value, ex);\n         }\n     }\n     \n-    public Number getNumber(final int index) throws JSONException {\n-        final Object object = this.get(index);\n+    public Number getNumber(final int n) throws JSONException {\n+        final Object value = this.get(n);\n         try {\n-            if (object instanceof Number) {\n-                return (Number)object;\n+            if (value instanceof Number) {\n+                return (Number)value;\n             }\n-            return JSONObject.stringToNumber(object.toString());\n+            return JSONObject.stringToNumber(value.toString());\n         }\n-        catch (final Exception e) {\n-            throw wrongValueFormatException(index, \"number\", object, e);\n+        catch (final Exception ex) {\n+            throw wrongValueFormatException(n, \"number\", value, ex);\n         }\n     }\n     \n-    public <E extends Enum<E>> E getEnum(final Class<E> clazz, final int index) throws JSONException {\n-        final E val = (E)this.optEnum((Class<Enum>)clazz, index);\n-        if (val == null) {\n-            throw wrongValueFormatException(index, \"enum of type \" + JSONObject.quote(clazz.getSimpleName()), this.opt(index), null);\n+    public <E extends Enum<E>> E getEnum(final Class<E> clazz, final int n) throws JSONException {\n+        final Enum optEnum = this.optEnum((Class<Enum>)clazz, n);\n+        if (optEnum == null) {\n+            throw wrongValueFormatException(n, \"enum of type \" + JSONObject.quote(clazz.getSimpleName()), this.opt(n), null);\n         }\n-        return val;\n+        return (E)optEnum;\n     }\n     \n-    public BigDecimal getBigDecimal(final int index) throws JSONException {\n-        final Object object = this.get(index);\n-        final BigDecimal val = JSONObject.objectToBigDecimal(object, (BigDecimal)null);\n-        if (val == null) {\n-            throw wrongValueFormatException(index, \"BigDecimal\", object, null);\n+    public BigDecimal getBigDecimal(final int n) throws JSONException {\n+        final Object value = this.get(n);\n+        final BigDecimal objectToBigDecimal = JSONObject.objectToBigDecimal(value, (BigDecimal)null);\n+        if (objectToBigDecimal == null) {\n+            throw wrongValueFormatException(n, \"BigDecimal\", value, null);\n         }\n-        return val;\n+        return objectToBigDecimal;\n     }\n     \n-    public BigInteger getBigInteger(final int index) throws JSONException {\n-        final Object object = this.get(index);\n-        final BigInteger val = JSONObject.objectToBigInteger(object, (BigInteger)null);\n-        if (val == null) {\n-            throw wrongValueFormatException(index, \"BigInteger\", object, null);\n+    public BigInteger getBigInteger(final int n) throws JSONException {\n+        final Object value = this.get(n);\n+        final BigInteger objectToBigInteger = JSONObject.objectToBigInteger(value, (BigInteger)null);\n+        if (objectToBigInteger == null) {\n+            throw wrongValueFormatException(n, \"BigInteger\", value, null);\n         }\n-        return val;\n+        return objectToBigInteger;\n     }\n     \n-    public int getInt(final int index) throws JSONException {\n-        final Object object = this.get(index);\n-        if (object instanceof Number) {\n-            return ((Number)object).intValue();\n+    public int getInt(final int n) throws JSONException {\n+        final Object value = this.get(n);\n+        if (value instanceof Number) {\n+            return ((Number)value).intValue();\n         }\n         try {\n-            return Integer.parseInt(object.toString());\n+            return Integer.parseInt(value.toString());\n         }\n-        catch (final Exception e) {\n-            throw wrongValueFormatException(index, \"int\", object, e);\n+        catch (final Exception ex) {\n+            throw wrongValueFormatException(n, \"int\", value, ex);\n         }\n     }\n     \n-    public JSONArray getJSONArray(final int index) throws JSONException {\n-        final Object object = this.get(index);\n-        if (object instanceof JSONArray) {\n-            return (JSONArray)object;\n+    public JSONArray getJSONArray(final int n) throws JSONException {\n+        final Object value = this.get(n);\n+        if (value instanceof JSONArray) {\n+            return (JSONArray)value;\n         }\n-        throw wrongValueFormatException(index, \"JSONArray\", object, null);\n+        throw wrongValueFormatException(n, \"JSONArray\", value, null);\n     }\n     \n-    public JSONObject getJSONObject(final int index) throws JSONException {\n-        final Object object = this.get(index);\n-        if (object instanceof JSONObject) {\n-            return (JSONObject)object;\n+    public JSONObject getJSONObject(final int n) throws JSONException {\n+        final Object value = this.get(n);\n+        if (value instanceof JSONObject) {\n+            return (JSONObject)value;\n         }\n-        throw wrongValueFormatException(index, \"JSONObject\", object, null);\n+        throw wrongValueFormatException(n, \"JSONObject\", value, null);\n     }\n     \n-    public long getLong(final int index) throws JSONException {\n-        final Object object = this.get(index);\n-        if (object instanceof Number) {\n-            return ((Number)object).longValue();\n+    public long getLong(final int n) throws JSONException {\n+        final Object value = this.get(n);\n+        if (value instanceof Number) {\n+            return ((Number)value).longValue();\n         }\n         try {\n-            return Long.parseLong(object.toString());\n+            return Long.parseLong(value.toString());\n         }\n-        catch (final Exception e) {\n-            throw wrongValueFormatException(index, \"long\", object, e);\n+        catch (final Exception ex) {\n+            throw wrongValueFormatException(n, \"long\", value, ex);\n         }\n     }\n     \n-    public String getString(final int index) throws JSONException {\n-        final Object object = this.get(index);\n-        if (object instanceof String) {\n-            return (String)object;\n+    public String getString(final int n) throws JSONException {\n+        final Object value = this.get(n);\n+        if (value instanceof String) {\n+            return (String)value;\n         }\n-        throw wrongValueFormatException(index, \"String\", object, null);\n+        throw wrongValueFormatException(n, \"String\", value, null);\n     }\n     \n-    public boolean isNull(final int index) {\n-        return JSONObject.NULL.equals(this.opt(index));\n+    public boolean isNull(final int n) {\n+        return JSONObject.NULL.equals(this.opt(n));\n     }\n     \n-    public String join(final String separator) throws JSONException {\n-        final int len = this.length();\n-        if (len == 0) {\n+    public String join(final String str) throws JSONException {\n+        final int length = this.length();\n+        if (length == 0) {\n             return \"\";\n         }\n         final StringBuilder sb = new StringBuilder(JSONObject.valueToString(this.myArrayList.get(0)));\n-        for (int i = 1; i < len; ++i) {\n-            sb.append(separator).append(JSONObject.valueToString(this.myArrayList.get(i)));\n+        for (int i = 1; i < length; ++i) {\n+            sb.append(str).append(JSONObject.valueToString(this.myArrayList.get(i)));\n         }\n         return sb.toString();\n     }\n     \n     public int length() {\n         return this.myArrayList.size();\n     }\n@@ -277,484 +277,483 @@\n         this.myArrayList.clear();\n     }\n     \n     public Object opt(final int index) {\n         return (index < 0 || index >= this.length()) ? null : this.myArrayList.get(index);\n     }\n     \n-    public boolean optBoolean(final int index) {\n-        return this.optBoolean(index, false);\n+    public boolean optBoolean(final int n) {\n+        return this.optBoolean(n, false);\n     }\n     \n-    public boolean optBoolean(final int index, final boolean defaultValue) {\n+    public boolean optBoolean(final int n, final boolean b) {\n         try {\n-            return this.getBoolean(index);\n+            return this.getBoolean(n);\n         }\n-        catch (final Exception e) {\n-            return defaultValue;\n+        catch (final Exception ex) {\n+            return b;\n         }\n     }\n     \n-    public double optDouble(final int index) {\n-        return this.optDouble(index, Double.NaN);\n+    public double optDouble(final int n) {\n+        return this.optDouble(n, Double.NaN);\n     }\n     \n-    public double optDouble(final int index, final double defaultValue) {\n-        final Number val = this.optNumber(index, null);\n-        if (val == null) {\n-            return defaultValue;\n+    public double optDouble(final int n, final double n2) {\n+        final Number optNumber = this.optNumber(n, null);\n+        if (optNumber == null) {\n+            return n2;\n         }\n-        final double doubleValue = val.doubleValue();\n-        return doubleValue;\n+        return optNumber.doubleValue();\n     }\n     \n-    public float optFloat(final int index) {\n-        return this.optFloat(index, Float.NaN);\n+    public float optFloat(final int n) {\n+        return this.optFloat(n, Float.NaN);\n     }\n     \n-    public float optFloat(final int index, final float defaultValue) {\n-        final Number val = this.optNumber(index, null);\n-        if (val == null) {\n-            return defaultValue;\n+    public float optFloat(final int n, final float n2) {\n+        final Number optNumber = this.optNumber(n, null);\n+        if (optNumber == null) {\n+            return n2;\n         }\n-        final float floatValue = val.floatValue();\n-        return floatValue;\n+        return optNumber.floatValue();\n     }\n     \n-    public int optInt(final int index) {\n-        return this.optInt(index, 0);\n+    public int optInt(final int n) {\n+        return this.optInt(n, 0);\n     }\n     \n-    public int optInt(final int index, final int defaultValue) {\n-        final Number val = this.optNumber(index, null);\n-        if (val == null) {\n-            return defaultValue;\n+    public int optInt(final int n, final int n2) {\n+        final Number optNumber = this.optNumber(n, null);\n+        if (optNumber == null) {\n+            return n2;\n         }\n-        return val.intValue();\n+        return optNumber.intValue();\n     }\n     \n-    public <E extends Enum<E>> E optEnum(final Class<E> clazz, final int index) {\n-        return this.optEnum(clazz, index, (E)null);\n+    public <E extends Enum<E>> E optEnum(final Class<E> clazz, final int n) {\n+        return this.optEnum(clazz, n, (E)null);\n     }\n     \n-    public <E extends Enum<E>> E optEnum(final Class<E> clazz, final int index, final E defaultValue) {\n+    public <E extends Enum<E>> E optEnum(final Class<E> enumClass, final int n, final E e) {\n         try {\n-            final Object val = this.opt(index);\n-            if (JSONObject.NULL.equals(val)) {\n-                return defaultValue;\n+            final Object opt = this.opt(n);\n+            if (JSONObject.NULL.equals(opt)) {\n+                return e;\n             }\n-            if (clazz.isAssignableFrom(val.getClass())) {\n-                final E myE = (E)val;\n-                return myE;\n+            if (enumClass.isAssignableFrom(((Enum<E>)opt).getClass())) {\n+                return (E)opt;\n             }\n-            return Enum.valueOf(clazz, val.toString());\n+            return Enum.valueOf(enumClass, opt.toString());\n         }\n-        catch (final IllegalArgumentException e) {\n-            return defaultValue;\n+        catch (final IllegalArgumentException ex) {\n+            return e;\n         }\n-        catch (final NullPointerException e2) {\n-            return defaultValue;\n+        catch (final NullPointerException ex2) {\n+            return e;\n         }\n     }\n     \n-    public BigInteger optBigInteger(final int index, final BigInteger defaultValue) {\n-        final Object val = this.opt(index);\n-        return JSONObject.objectToBigInteger(val, defaultValue);\n+    public BigInteger optBigInteger(final int n, final BigInteger bigInteger) {\n+        return JSONObject.objectToBigInteger(this.opt(n), bigInteger);\n     }\n     \n-    public BigDecimal optBigDecimal(final int index, final BigDecimal defaultValue) {\n-        final Object val = this.opt(index);\n-        return JSONObject.objectToBigDecimal(val, defaultValue);\n+    public BigDecimal optBigDecimal(final int n, final BigDecimal bigDecimal) {\n+        return JSONObject.objectToBigDecimal(this.opt(n), bigDecimal);\n     }\n     \n-    public JSONArray optJSONArray(final int index) {\n-        final Object o = this.opt(index);\n-        return (o instanceof JSONArray) ? ((JSONArray)o) : null;\n+    public JSONArray optJSONArray(final int n) {\n+        final Object opt = this.opt(n);\n+        return (opt instanceof JSONArray) ? ((JSONArray)opt) : null;\n     }\n     \n-    public JSONObject optJSONObject(final int index) {\n-        final Object o = this.opt(index);\n-        return (o instanceof JSONObject) ? ((JSONObject)o) : null;\n+    public JSONObject optJSONObject(final int n) {\n+        final Object opt = this.opt(n);\n+        return (opt instanceof JSONObject) ? ((JSONObject)opt) : null;\n     }\n     \n-    public long optLong(final int index) {\n-        return this.optLong(index, 0L);\n+    public long optLong(final int n) {\n+        return this.optLong(n, 0L);\n     }\n     \n-    public long optLong(final int index, final long defaultValue) {\n-        final Number val = this.optNumber(index, null);\n-        if (val == null) {\n-            return defaultValue;\n+    public long optLong(final int n, final long n2) {\n+        final Number optNumber = this.optNumber(n, null);\n+        if (optNumber == null) {\n+            return n2;\n         }\n-        return val.longValue();\n+        return optNumber.longValue();\n     }\n     \n-    public Number optNumber(final int index) {\n-        return this.optNumber(index, null);\n+    public Number optNumber(final int n) {\n+        return this.optNumber(n, null);\n     }\n     \n-    public Number optNumber(final int index, final Number defaultValue) {\n-        final Object val = this.opt(index);\n-        if (JSONObject.NULL.equals(val)) {\n-            return defaultValue;\n+    public Number optNumber(final int n, final Number n2) {\n+        final Object opt = this.opt(n);\n+        if (JSONObject.NULL.equals(opt)) {\n+            return n2;\n         }\n-        if (val instanceof Number) {\n-            return (Number)val;\n+        if (opt instanceof Number) {\n+            return (Number)opt;\n         }\n-        if (val instanceof String) {\n+        if (opt instanceof String) {\n             try {\n-                return JSONObject.stringToNumber((String)val);\n+                return JSONObject.stringToNumber((String)opt);\n             }\n-            catch (final Exception e) {\n-                return defaultValue;\n+            catch (final Exception ex) {\n+                return n2;\n             }\n         }\n-        return defaultValue;\n+        return n2;\n     }\n     \n-    public String optString(final int index) {\n-        return this.optString(index, \"\");\n+    public String optString(final int n) {\n+        return this.optString(n, \"\");\n     }\n     \n-    public String optString(final int index, final String defaultValue) {\n-        final Object object = this.opt(index);\n-        return JSONObject.NULL.equals(object) ? defaultValue : object.toString();\n+    public String optString(final int n, final String s) {\n+        final Object opt = this.opt(n);\n+        return JSONObject.NULL.equals(opt) ? s : opt.toString();\n     }\n     \n-    public JSONArray put(final boolean value) {\n-        return this.put(value ? Boolean.TRUE : Boolean.FALSE);\n+    public JSONArray put(final boolean b) {\n+        return this.put(b ? Boolean.TRUE : Boolean.FALSE);\n     }\n     \n-    public JSONArray put(final Collection<?> value) {\n-        return this.put(new JSONArray(value));\n+    public JSONArray put(final Collection<?> collection) {\n+        return this.put(new JSONArray(collection));\n     }\n     \n-    public JSONArray put(final double value) throws JSONException {\n-        return this.put(Double.valueOf(value));\n+    public JSONArray put(final double d) throws JSONException {\n+        return this.put(Double.valueOf(d));\n     }\n     \n-    public JSONArray put(final float value) throws JSONException {\n-        return this.put(Float.valueOf(value));\n+    public JSONArray put(final float f) throws JSONException {\n+        return this.put(Float.valueOf(f));\n     }\n     \n-    public JSONArray put(final int value) {\n-        return this.put(Integer.valueOf(value));\n+    public JSONArray put(final int i) {\n+        return this.put(Integer.valueOf(i));\n     }\n     \n-    public JSONArray put(final long value) {\n-        return this.put(Long.valueOf(value));\n+    public JSONArray put(final long l) {\n+        return this.put(Long.valueOf(l));\n     }\n     \n-    public JSONArray put(final Map<?, ?> value) {\n-        return this.put(new JSONObject((Map)value));\n+    public JSONArray put(final Map<?, ?> map) {\n+        return this.put(new JSONObject((Map)map));\n     }\n     \n-    public JSONArray put(final Object value) {\n-        JSONObject.testValidity(value);\n-        this.myArrayList.add(value);\n+    public JSONArray put(final Object e) {\n+        JSONObject.testValidity(e);\n+        this.myArrayList.add(e);\n         return this;\n     }\n     \n-    public JSONArray put(final int index, final boolean value) throws JSONException {\n-        return this.put(index, value ? Boolean.TRUE : Boolean.FALSE);\n+    public JSONArray put(final int n, final boolean b) throws JSONException {\n+        return this.put(n, b ? Boolean.TRUE : Boolean.FALSE);\n     }\n     \n-    public JSONArray put(final int index, final Collection<?> value) throws JSONException {\n-        return this.put(index, new JSONArray(value));\n+    public JSONArray put(final int n, final Collection<?> collection) throws JSONException {\n+        return this.put(n, new JSONArray(collection));\n     }\n     \n-    public JSONArray put(final int index, final double value) throws JSONException {\n-        return this.put(index, Double.valueOf(value));\n+    public JSONArray put(final int n, final double d) throws JSONException {\n+        return this.put(n, Double.valueOf(d));\n     }\n     \n-    public JSONArray put(final int index, final float value) throws JSONException {\n-        return this.put(index, Float.valueOf(value));\n+    public JSONArray put(final int n, final float f) throws JSONException {\n+        return this.put(n, Float.valueOf(f));\n     }\n     \n-    public JSONArray put(final int index, final int value) throws JSONException {\n-        return this.put(index, Integer.valueOf(value));\n+    public JSONArray put(final int n, final int i) throws JSONException {\n+        return this.put(n, Integer.valueOf(i));\n     }\n     \n-    public JSONArray put(final int index, final long value) throws JSONException {\n-        return this.put(index, Long.valueOf(value));\n+    public JSONArray put(final int n, final long l) throws JSONException {\n+        return this.put(n, Long.valueOf(l));\n     }\n     \n-    public JSONArray put(final int index, final Map<?, ?> value) throws JSONException {\n-        this.put(index, new JSONObject((Map)value));\n+    public JSONArray put(final int n, final Map<?, ?> map) throws JSONException {\n+        this.put(n, new JSONObject((Map)map));\n         return this;\n     }\n     \n-    public JSONArray put(final int index, final Object value) throws JSONException {\n-        if (index < 0) {\n-            throw new JSONException(\"JSONArray[\" + index + \"] not found.\");\n-        }\n-        if (index < this.length()) {\n-            JSONObject.testValidity(value);\n-            this.myArrayList.set(index, value);\n+    public JSONArray put(final int i, final Object element) throws JSONException {\n+        if (i < 0) {\n+            throw new JSONException(\"JSONArray[\" + i + \"] not found.\");\n+        }\n+        if (i < this.length()) {\n+            JSONObject.testValidity(element);\n+            this.myArrayList.set(i, element);\n             return this;\n         }\n-        if (index == this.length()) {\n-            return this.put(value);\n+        if (i == this.length()) {\n+            return this.put(element);\n         }\n-        this.myArrayList.ensureCapacity(index + 1);\n-        while (index != this.length()) {\n+        this.myArrayList.ensureCapacity(i + 1);\n+        while (i != this.length()) {\n             this.myArrayList.add(JSONObject.NULL);\n         }\n-        return this.put(value);\n+        return this.put(element);\n     }\n     \n     public JSONArray putAll(final Collection<?> collection) {\n         this.addAll(collection, false);\n         return this;\n     }\n     \n-    public JSONArray putAll(final Iterable<?> iter) {\n-        this.addAll(iter, false);\n+    public JSONArray putAll(final Iterable<?> iterable) {\n+        this.addAll(iterable, false);\n         return this;\n     }\n     \n-    public JSONArray putAll(final JSONArray array) {\n-        this.myArrayList.addAll(array.myArrayList);\n+    public JSONArray putAll(final JSONArray jsonArray) {\n+        this.myArrayList.addAll(jsonArray.myArrayList);\n         return this;\n     }\n     \n-    public JSONArray putAll(final Object array) throws JSONException {\n-        this.addAll(array, false);\n+    public JSONArray putAll(final Object o) throws JSONException {\n+        this.addAll(o, false);\n         return this;\n     }\n     \n-    public Object query(final String jsonPointer) {\n-        return this.query(new JSONPointer(jsonPointer));\n+    public Object query(final String s) {\n+        return this.query(new JSONPointer(s));\n     }\n     \n     public Object query(final JSONPointer jsonPointer) {\n         return jsonPointer.queryFrom((Object)this);\n     }\n     \n-    public Object optQuery(final String jsonPointer) {\n-        return this.optQuery(new JSONPointer(jsonPointer));\n+    public Object optQuery(final String s) {\n+        return this.optQuery(new JSONPointer(s));\n     }\n     \n     public Object optQuery(final JSONPointer jsonPointer) {\n         try {\n             return jsonPointer.queryFrom((Object)this);\n         }\n-        catch (final JSONPointerException e) {\n+        catch (final JSONPointerException ex) {\n             return null;\n         }\n     }\n     \n     public Object remove(final int index) {\n         return (index >= 0 && index < this.length()) ? this.myArrayList.remove(index) : null;\n     }\n     \n-    public boolean similar(final Object other) {\n-        if (!(other instanceof JSONArray)) {\n+    public boolean similar(final Object o) {\n+        if (!(o instanceof JSONArray)) {\n             return false;\n         }\n-        final int len = this.length();\n-        if (len != ((JSONArray)other).length()) {\n+        final int length = this.length();\n+        if (length != ((JSONArray)o).length()) {\n             return false;\n         }\n-        for (int i = 0; i < len; ++i) {\n-            final Object valueThis = this.myArrayList.get(i);\n-            final Object valueOther = ((JSONArray)other).myArrayList.get(i);\n-            if (valueThis != valueOther) {\n-                if (valueThis == null) {\n+        for (int i = 0; i < length; ++i) {\n+            final Object value = this.myArrayList.get(i);\n+            final Object value2 = ((JSONArray)o).myArrayList.get(i);\n+            if (value != value2) {\n+                if (value == null) {\n                     return false;\n                 }\n-                if (valueThis instanceof JSONObject) {\n-                    if (!((JSONObject)valueThis).similar(valueOther)) {\n+                if (value instanceof JSONObject) {\n+                    if (!((JSONObject)value).similar(value2)) {\n                         return false;\n                     }\n                 }\n-                else if (valueThis instanceof JSONArray) {\n-                    if (!((JSONArray)valueThis).similar(valueOther)) {\n+                else if (value instanceof JSONArray) {\n+                    if (!((JSONArray)value).similar(value2)) {\n                         return false;\n                     }\n                 }\n-                else if (valueThis instanceof Number && valueOther instanceof Number) {\n-                    if (!JSONObject.isNumberSimilar((Number)valueThis, (Number)valueOther)) {\n+                else if (value instanceof Number && value2 instanceof Number) {\n+                    if (!JSONObject.isNumberSimilar((Number)value, (Number)value2)) {\n                         return false;\n                     }\n                 }\n-                else if (valueThis instanceof JSONString && valueOther instanceof JSONString) {\n-                    if (!((JSONString)valueThis).toJSONString().equals(((JSONString)valueOther).toJSONString())) {\n+                else if (value instanceof JSONString && value2 instanceof JSONString) {\n+                    if (!((JSONString)value).toJSONString().equals(((JSONString)value2).toJSONString())) {\n                         return false;\n                     }\n                 }\n-                else if (!valueThis.equals(valueOther)) {\n+                else if (!value.equals(value2)) {\n                     return false;\n                 }\n             }\n         }\n         return true;\n     }\n     \n-    public JSONObject toJSONObject(final JSONArray names) throws JSONException {\n-        if (names == null || names.isEmpty() || this.isEmpty()) {\n+    public JSONObject toJSONObject(final JSONArray jsonArray) throws JSONException {\n+        if (jsonArray == null || jsonArray.isEmpty() || this.isEmpty()) {\n             return null;\n         }\n-        final JSONObject jo = new JSONObject(names.length());\n-        for (int i = 0; i < names.length(); ++i) {\n-            jo.put(names.getString(i), this.opt(i));\n+        final JSONObject jsonObject = new JSONObject(jsonArray.length());\n+        for (int i = 0; i < jsonArray.length(); ++i) {\n+            jsonObject.put(jsonArray.getString(i), this.opt(i));\n         }\n-        return jo;\n+        return jsonObject;\n     }\n     \n     @Override\n     public String toString() {\n         try {\n             return this.toString(0);\n         }\n-        catch (final Exception e) {\n+        catch (final Exception ex) {\n             return null;\n         }\n     }\n     \n-    public String toString(final int indentFactor) throws JSONException {\n-        final StringWriter sw = new StringWriter();\n-        synchronized (sw.getBuffer()) {\n-            return this.write(sw, indentFactor, 0).toString();\n+    public String toString(final int n) throws JSONException {\n+        final StringWriter stringWriter = new StringWriter();\n+        synchronized (stringWriter.getBuffer()) {\n+            return this.write(stringWriter, n, 0).toString();\n         }\n     }\n     \n     public Writer write(final Writer writer) throws JSONException {\n         return this.write(writer, 0, 0);\n     }\n     \n-    public Writer write(final Writer writer, final int indentFactor, final int indent) throws JSONException {\n+    public Writer write(final Writer writer, final int n, final int n2) throws JSONException {\n         try {\n-            boolean needsComma = false;\n+            int n3 = 0;\n             final int length = this.length();\n             writer.write(91);\n             Label_0176: {\n                 if (length == 1) {\n                     try {\n-                        JSONObject.writeValue(writer, this.myArrayList.get(0), indentFactor, indent);\n+                        JSONObject.writeValue(writer, this.myArrayList.get(0), n, n2);\n                         break Label_0176;\n                     }\n-                    catch (final Exception e) {\n-                        throw new JSONException(\"Unable to write JSONArray value at index: 0\", (Throwable)e);\n+                    catch (final Exception ex) {\n+                        throw new JSONException(\"Unable to write JSONArray value at index: 0\", (Throwable)ex);\n                     }\n                 }\n                 if (length != 0) {\n-                    final int newIndent = indent + indentFactor;\n+                    final int n4 = n2 + n;\n                     for (int i = 0; i < length; ++i) {\n-                        if (needsComma) {\n+                        if (n3 != 0) {\n                             writer.write(44);\n                         }\n-                        if (indentFactor > 0) {\n+                        if (n > 0) {\n                             writer.write(10);\n                         }\n-                        JSONObject.indent(writer, newIndent);\n+                        JSONObject.indent(writer, n4);\n                         try {\n-                            JSONObject.writeValue(writer, this.myArrayList.get(i), indentFactor, newIndent);\n+                            JSONObject.writeValue(writer, this.myArrayList.get(i), n, n4);\n                         }\n-                        catch (final Exception e2) {\n-                            throw new JSONException(\"Unable to write JSONArray value at index: \" + i, (Throwable)e2);\n+                        catch (final Exception ex2) {\n+                            throw new JSONException(\"Unable to write JSONArray value at index: \" + i, (Throwable)ex2);\n                         }\n-                        needsComma = true;\n+                        n3 = 1;\n                     }\n-                    if (indentFactor > 0) {\n+                    if (n > 0) {\n                         writer.write(10);\n                     }\n-                    JSONObject.indent(writer, indent);\n+                    JSONObject.indent(writer, n2);\n                 }\n             }\n             writer.write(93);\n             return writer;\n         }\n-        catch (final IOException e3) {\n-            throw new JSONException((Throwable)e3);\n+        catch (final IOException ex3) {\n+            throw new JSONException((Throwable)ex3);\n         }\n     }\n     \n     public List<Object> toList() {\n-        final List<Object> results = new ArrayList<Object>(this.myArrayList.size());\n-        for (final Object element : this.myArrayList) {\n-            if (element == null || JSONObject.NULL.equals(element)) {\n-                results.add(null);\n+        final ArrayList list = new ArrayList(this.myArrayList.size());\n+        for (final JSONObject next : this.myArrayList) {\n+            if (next == null || JSONObject.NULL.equals(next)) {\n+                list.add(null);\n             }\n-            else if (element instanceof JSONArray) {\n-                results.add(((JSONArray)element).toList());\n+            else if (next instanceof JSONArray) {\n+                list.add(((JSONArray)next).toList());\n             }\n-            else if (element instanceof JSONObject) {\n-                results.add(((JSONObject)element).toMap());\n+            else if (next instanceof JSONObject) {\n+                list.add(((JSONObject)next).toMap());\n             }\n             else {\n-                results.add(element);\n+                list.add(next);\n             }\n         }\n-        return results;\n+        return list;\n     }\n     \n     public boolean isEmpty() {\n         return this.myArrayList.isEmpty();\n     }\n     \n-    private void addAll(final Collection<?> collection, final boolean wrap) {\n+    private void addAll(final Collection<?> collection, final boolean b) {\n         this.myArrayList.ensureCapacity(this.myArrayList.size() + collection.size());\n-        if (wrap) {\n-            for (final Object o : collection) {\n-                this.put(JSONObject.wrap(o));\n+        if (b) {\n+            final Iterator iterator = collection.iterator();\n+            while (iterator.hasNext()) {\n+                this.put(JSONObject.wrap(iterator.next()));\n             }\n         }\n         else {\n-            for (final Object o : collection) {\n-                this.put(o);\n+            final Iterator iterator2 = collection.iterator();\n+            while (iterator2.hasNext()) {\n+                this.put(iterator2.next());\n             }\n         }\n     }\n     \n-    private void addAll(final Iterable<?> iter, final boolean wrap) {\n-        if (wrap) {\n-            for (final Object o : iter) {\n-                this.put(JSONObject.wrap(o));\n+    private void addAll(final Iterable<?> iterable, final boolean b) {\n+        if (b) {\n+            final Iterator<?> iterator = iterable.iterator();\n+            while (iterator.hasNext()) {\n+                this.put(JSONObject.wrap((Object)iterator.next()));\n             }\n         }\n         else {\n-            for (final Object o : iter) {\n-                this.put(o);\n+            final Iterator<?> iterator2 = iterable.iterator();\n+            while (iterator2.hasNext()) {\n+                this.put(iterator2.next());\n             }\n         }\n     }\n     \n-    private void addAll(final Object array, final boolean wrap) throws JSONException {\n-        if (array.getClass().isArray()) {\n-            final int length = Array.getLength(array);\n+    private void addAll(final Object o, final boolean b) throws JSONException {\n+        if (o.getClass().isArray()) {\n+            final int length = Array.getLength(o);\n             this.myArrayList.ensureCapacity(this.myArrayList.size() + length);\n-            if (wrap) {\n+            if (b) {\n                 for (int i = 0; i < length; ++i) {\n-                    this.put(JSONObject.wrap(Array.get(array, i)));\n+                    this.put(JSONObject.wrap(Array.get(o, i)));\n                 }\n             }\n             else {\n-                for (int i = 0; i < length; ++i) {\n-                    this.put(Array.get(array, i));\n+                for (int j = 0; j < length; ++j) {\n+                    this.put(Array.get(o, j));\n                 }\n             }\n         }\n-        else if (array instanceof JSONArray) {\n-            this.myArrayList.addAll(((JSONArray)array).myArrayList);\n+        else if (o instanceof JSONArray) {\n+            this.myArrayList.addAll(((JSONArray)o).myArrayList);\n         }\n-        else if (array instanceof Collection) {\n-            this.addAll((Collection<?>)array, wrap);\n+        else if (o instanceof Collection) {\n+            this.addAll((Collection<?>)o, b);\n         }\n         else {\n-            if (!(array instanceof Iterable)) {\n+            if (!(o instanceof Iterable)) {\n                 throw new JSONException(\"JSONArray initial value should be a string or collection or array.\");\n             }\n-            this.addAll((Iterable<?>)array, wrap);\n+            this.addAll((Iterable<?>)o, b);\n         }\n     }\n     \n-    private static JSONException wrongValueFormatException(final int idx, final String valueType, final Object value, final Throwable cause) {\n-        if (value == null) {\n-            return new JSONException(\"JSONArray[\" + idx + \"] is not a \" + valueType + \" (null).\", cause);\n+    private static JSONException wrongValueFormatException(final int i, final String str, final Object obj, final Throwable t) {\n+        if (obj == null) {\n+            return new JSONException(\"JSONArray[\" + i + \"] is not a \" + str + \" (null).\", t);\n         }\n-        if (value instanceof Map || value instanceof Iterable || value instanceof JSONObject) {\n-            return new JSONException(\"JSONArray[\" + idx + \"] is not a \" + valueType + \" (\" + value.getClass() + \").\", cause);\n+        if (obj instanceof Map || obj instanceof Iterable || obj instanceof JSONObject) {\n+            return new JSONException(\"JSONArray[\" + i + \"] is not a \" + str + \" (\" + obj.getClass() + \").\", t);\n         }\n-        return new JSONException(\"JSONArray[\" + idx + \"] is not a \" + valueType + \" (\" + value.getClass() + \" : \" + value + \").\", cause);\n+        return new JSONException(\"JSONArray[\" + i + \"] is not a \" + str + \" (\" + obj.getClass() + \" : \" + obj + \").\", t);\n     }\n }\n"}]}
