{"diffoscope-json-version": 1, "source1": "first/BoundedSeekableByteChannelInputStream.class", "source2": "second/BoundedSeekableByteChannelInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,92 +1,92 @@\n-  SHA-256 checksum a36e0cf22780a0932c9a45d241d02374acca4a405c565783f3fcf47abcf06b6b\n+  SHA-256 checksum 70c9ae9f390f60505f290ef6df04c7ba9c1c9b23ba29431527b2553ad2b77bdc\n   Compiled from \"BoundedSeekableByteChannelInputStream.java\"\n class org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream extends java.io.InputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n-  this_class: #4                          // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n-  super_class: #17                        // java/io/InputStream\n+  this_class: #8                          // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n+  super_class: #2                         // java/io/InputStream\n   interfaces: 0, fields: 4, methods: 5, attributes: 1\n Constant pool:\n-   #1 = Methodref          #17.#45        // java/io/InputStream.\"<init>\":()V\n-   #2 = Fieldref           #4.#46         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n-   #3 = Fieldref           #4.#47         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.bytesRemaining:J\n-   #4 = Class              #48            // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n-   #5 = Long               8192l\n-   #7 = Methodref          #39.#49        // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #8 = Fieldref           #4.#50         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.buffer:Ljava/nio/ByteBuffer;\n-   #9 = Methodref          #4.#51         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.read:(I)I\n-  #10 = Methodref          #39.#52        // java/nio/ByteBuffer.get:()B\n-  #11 = Methodref          #39.#53        // java/nio/ByteBuffer.capacity:()I\n-  #12 = InterfaceMethodref #33.#54        // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n-  #13 = Methodref          #39.#55        // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n-  #14 = Methodref          #39.#56        // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n-  #15 = Methodref          #39.#57        // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-  #16 = Methodref          #58.#59        // java/nio/Buffer.limit:(I)Ljava/nio/Buffer;\n-  #17 = Class              #60            // java/io/InputStream\n-  #18 = Utf8               MAX_BUF_LEN\n-  #19 = Utf8               I\n-  #20 = Utf8               ConstantValue\n-  #21 = Integer            8192\n-  #22 = Utf8               buffer\n-  #23 = Utf8               Ljava/nio/ByteBuffer;\n-  #24 = Utf8               channel\n-  #25 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n-  #26 = Utf8               bytesRemaining\n-  #27 = Utf8               J\n-  #28 = Utf8               <init>\n-  #29 = Utf8               (Ljava/nio/channels/SeekableByteChannel;J)V\n-  #30 = Utf8               Code\n-  #31 = Utf8               LineNumberTable\n-  #32 = Utf8               StackMapTable\n-  #33 = Class              #61            // java/nio/channels/SeekableByteChannel\n-  #34 = Utf8               read\n-  #35 = Utf8               ()I\n-  #36 = Utf8               Exceptions\n-  #37 = Class              #62            // java/io/IOException\n-  #38 = Utf8               ([BII)I\n-  #39 = Class              #63            // java/nio/ByteBuffer\n-  #40 = Utf8               (I)I\n-  #41 = Utf8               close\n-  #42 = Utf8               ()V\n-  #43 = Utf8               SourceFile\n-  #44 = Utf8               BoundedSeekableByteChannelInputStream.java\n-  #45 = NameAndType        #28:#42        // \"<init>\":()V\n-  #46 = NameAndType        #24:#25        // channel:Ljava/nio/channels/SeekableByteChannel;\n-  #47 = NameAndType        #26:#27        // bytesRemaining:J\n-  #48 = Utf8               org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n-  #49 = NameAndType        #64:#65        // allocate:(I)Ljava/nio/ByteBuffer;\n-  #50 = NameAndType        #22:#23        // buffer:Ljava/nio/ByteBuffer;\n-  #51 = NameAndType        #34:#40        // read:(I)I\n-  #52 = NameAndType        #66:#67        // get:()B\n-  #53 = NameAndType        #68:#35        // capacity:()I\n-  #54 = NameAndType        #34:#69        // read:(Ljava/nio/ByteBuffer;)I\n-  #55 = NameAndType        #70:#71        // flip:()Ljava/nio/Buffer;\n-  #56 = NameAndType        #66:#72        // get:([BII)Ljava/nio/ByteBuffer;\n-  #57 = NameAndType        #73:#71        // rewind:()Ljava/nio/Buffer;\n-  #58 = Class              #74            // java/nio/Buffer\n-  #59 = NameAndType        #75:#76        // limit:(I)Ljava/nio/Buffer;\n-  #60 = Utf8               java/io/InputStream\n-  #61 = Utf8               java/nio/channels/SeekableByteChannel\n-  #62 = Utf8               java/io/IOException\n-  #63 = Utf8               java/nio/ByteBuffer\n-  #64 = Utf8               allocate\n-  #65 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #66 = Utf8               get\n-  #67 = Utf8               ()B\n-  #68 = Utf8               capacity\n-  #69 = Utf8               (Ljava/nio/ByteBuffer;)I\n-  #70 = Utf8               flip\n-  #71 = Utf8               ()Ljava/nio/Buffer;\n-  #72 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #73 = Utf8               rewind\n-  #74 = Utf8               java/nio/Buffer\n-  #75 = Utf8               limit\n-  #76 = Utf8               (I)Ljava/nio/Buffer;\n+   #1 = Methodref          #2.#3          // java/io/InputStream.\"<init>\":()V\n+   #2 = Class              #4             // java/io/InputStream\n+   #3 = NameAndType        #5:#6          // \"<init>\":()V\n+   #4 = Utf8               java/io/InputStream\n+   #5 = Utf8               <init>\n+   #6 = Utf8               ()V\n+   #7 = Fieldref           #8.#9          // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n+   #8 = Class              #10            // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n+   #9 = NameAndType        #11:#12        // channel:Ljava/nio/channels/SeekableByteChannel;\n+  #10 = Utf8               org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n+  #11 = Utf8               channel\n+  #12 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n+  #13 = Fieldref           #8.#14         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.bytesRemaining:J\n+  #14 = NameAndType        #15:#16        // bytesRemaining:J\n+  #15 = Utf8               bytesRemaining\n+  #16 = Utf8               J\n+  #17 = Long               8192l\n+  #19 = Methodref          #20.#21        // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+  #20 = Class              #22            // java/nio/ByteBuffer\n+  #21 = NameAndType        #23:#24        // allocate:(I)Ljava/nio/ByteBuffer;\n+  #22 = Utf8               java/nio/ByteBuffer\n+  #23 = Utf8               allocate\n+  #24 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #25 = Fieldref           #8.#26         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.buffer:Ljava/nio/ByteBuffer;\n+  #26 = NameAndType        #27:#28        // buffer:Ljava/nio/ByteBuffer;\n+  #27 = Utf8               buffer\n+  #28 = Utf8               Ljava/nio/ByteBuffer;\n+  #29 = Methodref          #8.#30         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.read:(I)I\n+  #30 = NameAndType        #31:#32        // read:(I)I\n+  #31 = Utf8               read\n+  #32 = Utf8               (I)I\n+  #33 = Methodref          #20.#34        // java/nio/ByteBuffer.get:()B\n+  #34 = NameAndType        #35:#36        // get:()B\n+  #35 = Utf8               get\n+  #36 = Utf8               ()B\n+  #37 = Methodref          #20.#38        // java/nio/ByteBuffer.capacity:()I\n+  #38 = NameAndType        #39:#40        // capacity:()I\n+  #39 = Utf8               capacity\n+  #40 = Utf8               ()I\n+  #41 = InterfaceMethodref #42.#43        // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+  #42 = Class              #44            // java/nio/channels/SeekableByteChannel\n+  #43 = NameAndType        #31:#45        // read:(Ljava/nio/ByteBuffer;)I\n+  #44 = Utf8               java/nio/channels/SeekableByteChannel\n+  #45 = Utf8               (Ljava/nio/ByteBuffer;)I\n+  #46 = Methodref          #20.#47        // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+  #47 = NameAndType        #48:#49        // flip:()Ljava/nio/Buffer;\n+  #48 = Utf8               flip\n+  #49 = Utf8               ()Ljava/nio/Buffer;\n+  #50 = Methodref          #20.#51        // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+  #51 = NameAndType        #35:#52        // get:([BII)Ljava/nio/ByteBuffer;\n+  #52 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #53 = Methodref          #20.#54        // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+  #54 = NameAndType        #55:#49        // rewind:()Ljava/nio/Buffer;\n+  #55 = Utf8               rewind\n+  #56 = Methodref          #57.#58        // java/nio/Buffer.limit:(I)Ljava/nio/Buffer;\n+  #57 = Class              #59            // java/nio/Buffer\n+  #58 = NameAndType        #60:#61        // limit:(I)Ljava/nio/Buffer;\n+  #59 = Utf8               java/nio/Buffer\n+  #60 = Utf8               limit\n+  #61 = Utf8               (I)Ljava/nio/Buffer;\n+  #62 = Utf8               MAX_BUF_LEN\n+  #63 = Utf8               I\n+  #64 = Utf8               ConstantValue\n+  #65 = Integer            8192\n+  #66 = Utf8               (Ljava/nio/channels/SeekableByteChannel;J)V\n+  #67 = Utf8               Code\n+  #68 = Utf8               LineNumberTable\n+  #69 = Utf8               StackMapTable\n+  #70 = Utf8               Exceptions\n+  #71 = Class              #72            // java/io/IOException\n+  #72 = Utf8               java/io/IOException\n+  #73 = Utf8               ([BII)I\n+  #74 = Utf8               close\n+  #75 = Utf8               SourceFile\n+  #76 = Utf8               BoundedSeekableByteChannelInputStream.java\n {\n   private static final int MAX_BUF_LEN = 8192;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 8192\n \n   private final java.nio.ByteBuffer buffer;\n@@ -106,36 +106,36 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=3\n          0: aload_0\n          1: invokespecial #1                  // Method java/io/InputStream.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n-         6: putfield      #2                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+         6: putfield      #7                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n          9: aload_0\n         10: lload_2\n-        11: putfield      #3                  // Field bytesRemaining:J\n+        11: putfield      #13                 // Field bytesRemaining:J\n         14: lload_2\n-        15: ldc2_w        #5                  // long 8192l\n+        15: ldc2_w        #17                 // long 8192l\n         18: lcmp\n         19: ifge          40\n         22: lload_2\n         23: lconst_0\n         24: lcmp\n         25: ifle          40\n         28: aload_0\n         29: lload_2\n         30: l2i\n-        31: invokestatic  #7                  // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-        34: putfield      #8                  // Field buffer:Ljava/nio/ByteBuffer;\n+        31: invokestatic  #19                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        34: putfield      #25                 // Field buffer:Ljava/nio/ByteBuffer;\n         37: goto          50\n         40: aload_0\n         41: sipush        8192\n-        44: invokestatic  #7                  // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-        47: putfield      #8                  // Field buffer:Ljava/nio/ByteBuffer;\n+        44: invokestatic  #19                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        47: putfield      #25                 // Field buffer:Ljava/nio/ByteBuffer;\n         50: return\n       LineNumberTable:\n         line 32: 0\n         line 33: 4\n         line 34: 9\n         line 35: 14\n         line 36: 28\n@@ -150,35 +150,35 @@\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field bytesRemaining:J\n+         1: getfield      #13                 // Field bytesRemaining:J\n          4: lconst_0\n          5: lcmp\n          6: ifle          43\n          9: aload_0\n         10: dup\n-        11: getfield      #3                  // Field bytesRemaining:J\n+        11: getfield      #13                 // Field bytesRemaining:J\n         14: lconst_1\n         15: lsub\n-        16: putfield      #3                  // Field bytesRemaining:J\n+        16: putfield      #13                 // Field bytesRemaining:J\n         19: aload_0\n         20: iconst_1\n-        21: invokespecial #9                  // Method read:(I)I\n+        21: invokespecial #29                 // Method read:(I)I\n         24: istore_1\n         25: iload_1\n         26: ifge          31\n         29: iload_1\n         30: ireturn\n         31: aload_0\n-        32: getfield      #8                  // Field buffer:Ljava/nio/ByteBuffer;\n-        35: invokevirtual #10                 // Method java/nio/ByteBuffer.get:()B\n+        32: getfield      #25                 // Field buffer:Ljava/nio/ByteBuffer;\n+        35: invokevirtual #33                 // Method java/nio/ByteBuffer.get:()B\n         38: sipush        255\n         41: iand\n         42: ireturn\n         43: iconst_m1\n         44: ireturn\n       LineNumberTable:\n         line 44: 0\n@@ -203,71 +203,71 @@\n     Code:\n       stack=5, locals=7, args_size=4\n          0: iload_3\n          1: ifne          6\n          4: iconst_0\n          5: ireturn\n          6: aload_0\n-         7: getfield      #3                  // Field bytesRemaining:J\n+         7: getfield      #13                 // Field bytesRemaining:J\n         10: lconst_0\n         11: lcmp\n         12: ifgt          17\n         15: iconst_m1\n         16: ireturn\n         17: iload_3\n         18: istore        4\n         20: iload         4\n         22: i2l\n         23: aload_0\n-        24: getfield      #3                  // Field bytesRemaining:J\n+        24: getfield      #13                 // Field bytesRemaining:J\n         27: lcmp\n         28: ifle          38\n         31: aload_0\n-        32: getfield      #3                  // Field bytesRemaining:J\n+        32: getfield      #13                 // Field bytesRemaining:J\n         35: l2i\n         36: istore        4\n         38: iload         4\n         40: aload_0\n-        41: getfield      #8                  // Field buffer:Ljava/nio/ByteBuffer;\n-        44: invokevirtual #11                 // Method java/nio/ByteBuffer.capacity:()I\n+        41: getfield      #25                 // Field buffer:Ljava/nio/ByteBuffer;\n+        44: invokevirtual #37                 // Method java/nio/ByteBuffer.capacity:()I\n         47: if_icmpgt     67\n         50: aload_0\n-        51: getfield      #8                  // Field buffer:Ljava/nio/ByteBuffer;\n+        51: getfield      #25                 // Field buffer:Ljava/nio/ByteBuffer;\n         54: astore        6\n         56: aload_0\n         57: iload         4\n-        59: invokespecial #9                  // Method read:(I)I\n+        59: invokespecial #29                 // Method read:(I)I\n         62: istore        5\n         64: goto          93\n         67: iload         4\n-        69: invokestatic  #7                  // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        69: invokestatic  #19                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n         72: astore        6\n         74: aload_0\n-        75: getfield      #2                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+        75: getfield      #7                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n         78: aload         6\n-        80: invokeinterface #12,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+        80: invokeinterface #41,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         85: istore        5\n         87: aload         6\n-        89: invokevirtual #13                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+        89: invokevirtual #46                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n         92: pop\n         93: iload         5\n         95: iflt          120\n         98: aload         6\n        100: aload_1\n        101: iload_2\n        102: iload         5\n-       104: invokevirtual #14                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+       104: invokevirtual #50                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n        107: pop\n        108: aload_0\n        109: dup\n-       110: getfield      #3                  // Field bytesRemaining:J\n+       110: getfield      #13                 // Field bytesRemaining:J\n        113: iload         5\n        115: i2l\n        116: lsub\n-       117: putfield      #3                  // Field bytesRemaining:J\n+       117: putfield      #13                 // Field bytesRemaining:J\n        120: iload         5\n        122: ireturn\n       LineNumberTable:\n         line 68: 0\n         line 69: 4\n         line 71: 6\n         line 72: 15\n@@ -300,28 +300,28 @@\n \n   private int read(int) throws java.io.IOException;\n     descriptor: (I)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #8                  // Field buffer:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #15                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+         1: getfield      #25                 // Field buffer:Ljava/nio/ByteBuffer;\n+         4: invokevirtual #53                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n          7: iload_1\n-         8: invokevirtual #16                 // Method java/nio/Buffer.limit:(I)Ljava/nio/Buffer;\n+         8: invokevirtual #56                 // Method java/nio/Buffer.limit:(I)Ljava/nio/Buffer;\n         11: pop\n         12: aload_0\n-        13: getfield      #2                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+        13: getfield      #7                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n         16: aload_0\n-        17: getfield      #8                  // Field buffer:Ljava/nio/ByteBuffer;\n-        20: invokeinterface #12,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+        17: getfield      #25                 // Field buffer:Ljava/nio/ByteBuffer;\n+        20: invokeinterface #41,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         25: istore_2\n         26: aload_0\n-        27: getfield      #8                  // Field buffer:Ljava/nio/ByteBuffer;\n-        30: invokevirtual #13                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+        27: getfield      #25                 // Field buffer:Ljava/nio/ByteBuffer;\n+        30: invokevirtual #46                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n         33: pop\n         34: iload_2\n         35: ireturn\n       LineNumberTable:\n         line 96: 0\n         line 97: 12\n         line 98: 26\n"}]}
