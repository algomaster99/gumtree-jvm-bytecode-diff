{"diffoscope-json-version": 1, "source1": "first/BaseNCodecOutputStream.class", "source2": "second/BaseNCodecOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,119 +1,119 @@\n-  SHA-256 checksum 05b42d52dcb135aa53c4ec62270f390c1885c00313666a5d6e0156bd6a40d629\n+  SHA-256 checksum ceb0c2a03a09e2e1750ac5d4b5749b10d31a6ff9da0c5ffc299752c7f6fe64a8\n   Compiled from \"BaseNCodecOutputStream.java\"\n public class org.apache.commons.codec.binary.BaseNCodecOutputStream extends java.io.FilterOutputStream\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #10                         // org/apache/commons/codec/binary/BaseNCodecOutputStream\n-  super_class: #4                         // java/io/FilterOutputStream\n+  this_class: #1                          // org/apache/commons/codec/binary/BaseNCodecOutputStream\n+  super_class: #3                         // java/io/FilterOutputStream\n   interfaces: 0, fields: 4, methods: 7, attributes: 2\n Constant pool:\n-    #1 = Class              #2            // org/apache/commons/codec/binary/BaseNCodec\n-    #2 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n-    #3 = Methodref          #4.#5         // java/io/FilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n-    #4 = Class              #6            // java/io/FilterOutputStream\n-    #5 = NameAndType        #7:#8         // \"<init>\":(Ljava/io/OutputStream;)V\n-    #6 = Utf8               java/io/FilterOutputStream\n-    #7 = Utf8               <init>\n-    #8 = Utf8               (Ljava/io/OutputStream;)V\n-    #9 = Fieldref           #10.#11       // org/apache/commons/codec/binary/BaseNCodecOutputStream.singleByte:[B\n-   #10 = Class              #12           // org/apache/commons/codec/binary/BaseNCodecOutputStream\n-   #11 = NameAndType        #13:#14       // singleByte:[B\n-   #12 = Utf8               org/apache/commons/codec/binary/BaseNCodecOutputStream\n-   #13 = Utf8               singleByte\n-   #14 = Utf8               [B\n-   #15 = Class              #16           // org/apache/commons/codec/binary/BaseNCodec$Context\n-   #16 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n-   #17 = Methodref          #15.#18       // org/apache/commons/codec/binary/BaseNCodec$Context.\"<init>\":()V\n-   #18 = NameAndType        #7:#19        // \"<init>\":()V\n-   #19 = Utf8               ()V\n-   #20 = Fieldref           #10.#21       // org/apache/commons/codec/binary/BaseNCodecOutputStream.context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-   #21 = NameAndType        #22:#23       // context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-   #22 = Utf8               context\n-   #23 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-   #24 = Fieldref           #10.#25       // org/apache/commons/codec/binary/BaseNCodecOutputStream.baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n-   #25 = NameAndType        #26:#27       // baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n-   #26 = Utf8               baseNCodec\n-   #27 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec;\n-   #28 = Fieldref           #10.#29       // org/apache/commons/codec/binary/BaseNCodecOutputStream.doEncode:Z\n-   #29 = NameAndType        #30:#31       // doEncode:Z\n-   #30 = Utf8               doEncode\n-   #31 = Utf8               Z\n-   #32 = Methodref          #10.#33       // org/apache/commons/codec/binary/BaseNCodecOutputStream.write:([BII)V\n-   #33 = NameAndType        #34:#35       // write:([BII)V\n-   #34 = Utf8               write\n-   #35 = Utf8               ([BII)V\n-   #36 = String             #37           // array\n-   #37 = Utf8               array\n-   #38 = Methodref          #39.#40       // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #39 = Class              #41           // java/util/Objects\n-   #40 = NameAndType        #42:#43       // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #41 = Utf8               java/util/Objects\n-   #42 = Utf8               requireNonNull\n-   #43 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #44 = Class              #45           // java/lang/IndexOutOfBoundsException\n-   #45 = Utf8               java/lang/IndexOutOfBoundsException\n-   #46 = Methodref          #44.#18       // java/lang/IndexOutOfBoundsException.\"<init>\":()V\n-   #47 = Methodref          #1.#48        // org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #48 = NameAndType        #49:#50       // encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #49 = Utf8               encode\n-   #50 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #51 = Methodref          #1.#52        // org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #52 = NameAndType        #53:#50       // decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #53 = Utf8               decode\n-   #54 = Methodref          #10.#55       // org/apache/commons/codec/binary/BaseNCodecOutputStream.flush:(Z)V\n-   #55 = NameAndType        #56:#57       // flush:(Z)V\n-   #56 = Utf8               flush\n-   #57 = Utf8               (Z)V\n-   #58 = Methodref          #1.#59        // org/apache/commons/codec/binary/BaseNCodec.available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-   #59 = NameAndType        #60:#61       // available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-   #60 = Utf8               available\n-   #61 = Utf8               (Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-   #62 = Methodref          #1.#63        // org/apache/commons/codec/binary/BaseNCodec.readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-   #63 = NameAndType        #64:#65       // readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-   #64 = Utf8               readResults\n-   #65 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-   #66 = Fieldref           #10.#67       // org/apache/commons/codec/binary/BaseNCodecOutputStream.out:Ljava/io/OutputStream;\n-   #67 = NameAndType        #68:#69       // out:Ljava/io/OutputStream;\n-   #68 = Utf8               out\n-   #69 = Utf8               Ljava/io/OutputStream;\n-   #70 = Methodref          #71.#33       // java/io/OutputStream.write:([BII)V\n-   #71 = Class              #72           // java/io/OutputStream\n-   #72 = Utf8               java/io/OutputStream\n-   #73 = Methodref          #71.#74       // java/io/OutputStream.flush:()V\n-   #74 = NameAndType        #56:#19       // flush:()V\n-   #75 = Methodref          #10.#76       // org/apache/commons/codec/binary/BaseNCodecOutputStream.eof:()V\n-   #76 = NameAndType        #77:#19       // eof:()V\n-   #77 = Utf8               eof\n-   #78 = Methodref          #10.#74       // org/apache/commons/codec/binary/BaseNCodecOutputStream.flush:()V\n-   #79 = Methodref          #71.#80       // java/io/OutputStream.close:()V\n-   #80 = NameAndType        #81:#19       // close:()V\n-   #81 = Utf8               close\n-   #82 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/codec/binary/BaseNCodec;Z)V\n-   #83 = Utf8               Code\n-   #84 = Utf8               LineNumberTable\n-   #85 = Utf8               LocalVariableTable\n-   #86 = Utf8               this\n-   #87 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodecOutputStream;\n-   #88 = Utf8               output\n-   #89 = Utf8               basedCodec\n-   #90 = Utf8               (I)V\n-   #91 = Utf8               i\n-   #92 = Utf8               I\n-   #93 = Utf8               Exceptions\n-   #94 = Class              #95           // java/io/IOException\n-   #95 = Utf8               java/io/IOException\n-   #96 = Utf8               offset\n-   #97 = Utf8               len\n-   #98 = Utf8               StackMapTable\n-   #99 = Utf8               buf\n-  #100 = Utf8               c\n-  #101 = Utf8               propagate\n-  #102 = Utf8               avail\n+    #1 = Class              #2            // org/apache/commons/codec/binary/BaseNCodecOutputStream\n+    #2 = Utf8               org/apache/commons/codec/binary/BaseNCodecOutputStream\n+    #3 = Class              #4            // java/io/FilterOutputStream\n+    #4 = Utf8               java/io/FilterOutputStream\n+    #5 = Utf8               doEncode\n+    #6 = Utf8               Z\n+    #7 = Utf8               baseNCodec\n+    #8 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec;\n+    #9 = Utf8               singleByte\n+   #10 = Utf8               [B\n+   #11 = Utf8               context\n+   #12 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+   #13 = Utf8               <init>\n+   #14 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/codec/binary/BaseNCodec;Z)V\n+   #15 = Utf8               Code\n+   #16 = Methodref          #3.#17        // java/io/FilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+   #17 = NameAndType        #13:#18       // \"<init>\":(Ljava/io/OutputStream;)V\n+   #18 = Utf8               (Ljava/io/OutputStream;)V\n+   #19 = Fieldref           #1.#20        // org/apache/commons/codec/binary/BaseNCodecOutputStream.singleByte:[B\n+   #20 = NameAndType        #9:#10        // singleByte:[B\n+   #21 = Class              #22           // org/apache/commons/codec/binary/BaseNCodec$Context\n+   #22 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n+   #23 = Methodref          #21.#24       // org/apache/commons/codec/binary/BaseNCodec$Context.\"<init>\":()V\n+   #24 = NameAndType        #13:#25       // \"<init>\":()V\n+   #25 = Utf8               ()V\n+   #26 = Fieldref           #1.#27        // org/apache/commons/codec/binary/BaseNCodecOutputStream.context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+   #27 = NameAndType        #11:#12       // context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+   #28 = Fieldref           #1.#29        // org/apache/commons/codec/binary/BaseNCodecOutputStream.baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+   #29 = NameAndType        #7:#8         // baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+   #30 = Fieldref           #1.#31        // org/apache/commons/codec/binary/BaseNCodecOutputStream.doEncode:Z\n+   #31 = NameAndType        #5:#6         // doEncode:Z\n+   #32 = Utf8               LineNumberTable\n+   #33 = Utf8               LocalVariableTable\n+   #34 = Utf8               this\n+   #35 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodecOutputStream;\n+   #36 = Utf8               output\n+   #37 = Utf8               Ljava/io/OutputStream;\n+   #38 = Utf8               basedCodec\n+   #39 = Utf8               write\n+   #40 = Utf8               (I)V\n+   #41 = Utf8               Exceptions\n+   #42 = Class              #43           // java/io/IOException\n+   #43 = Utf8               java/io/IOException\n+   #44 = Methodref          #1.#45        // org/apache/commons/codec/binary/BaseNCodecOutputStream.write:([BII)V\n+   #45 = NameAndType        #39:#46       // write:([BII)V\n+   #46 = Utf8               ([BII)V\n+   #47 = Utf8               i\n+   #48 = Utf8               I\n+   #49 = String             #50           // array\n+   #50 = Utf8               array\n+   #51 = Methodref          #52.#54       // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #52 = Class              #53           // java/util/Objects\n+   #53 = Utf8               java/util/Objects\n+   #54 = NameAndType        #55:#56       // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #55 = Utf8               requireNonNull\n+   #56 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #57 = Class              #58           // java/lang/IndexOutOfBoundsException\n+   #58 = Utf8               java/lang/IndexOutOfBoundsException\n+   #59 = Methodref          #57.#24       // java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+   #60 = Methodref          #61.#63       // org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #61 = Class              #62           // org/apache/commons/codec/binary/BaseNCodec\n+   #62 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n+   #63 = NameAndType        #64:#65       // encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #64 = Utf8               encode\n+   #65 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #66 = Methodref          #61.#67       // org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #67 = NameAndType        #68:#65       // decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #68 = Utf8               decode\n+   #69 = Methodref          #1.#70        // org/apache/commons/codec/binary/BaseNCodecOutputStream.flush:(Z)V\n+   #70 = NameAndType        #71:#72       // flush:(Z)V\n+   #71 = Utf8               flush\n+   #72 = Utf8               (Z)V\n+   #73 = Utf8               offset\n+   #74 = Utf8               len\n+   #75 = Utf8               StackMapTable\n+   #76 = Methodref          #61.#77       // org/apache/commons/codec/binary/BaseNCodec.available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #77 = NameAndType        #78:#79       // available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #78 = Utf8               available\n+   #79 = Utf8               (Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #80 = Methodref          #61.#81       // org/apache/commons/codec/binary/BaseNCodec.readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #81 = NameAndType        #82:#83       // readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #82 = Utf8               readResults\n+   #83 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #84 = Fieldref           #1.#85        // org/apache/commons/codec/binary/BaseNCodecOutputStream.out:Ljava/io/OutputStream;\n+   #85 = NameAndType        #86:#37       // out:Ljava/io/OutputStream;\n+   #86 = Utf8               out\n+   #87 = Methodref          #88.#45       // java/io/OutputStream.write:([BII)V\n+   #88 = Class              #89           // java/io/OutputStream\n+   #89 = Utf8               java/io/OutputStream\n+   #90 = Methodref          #88.#91       // java/io/OutputStream.flush:()V\n+   #91 = NameAndType        #71:#25       // flush:()V\n+   #92 = Utf8               propagate\n+   #93 = Utf8               avail\n+   #94 = Utf8               buf\n+   #95 = Utf8               c\n+   #96 = Utf8               close\n+   #97 = Methodref          #1.#98        // org/apache/commons/codec/binary/BaseNCodecOutputStream.eof:()V\n+   #98 = NameAndType        #99:#25       // eof:()V\n+   #99 = Utf8               eof\n+  #100 = Methodref          #1.#91        // org/apache/commons/codec/binary/BaseNCodecOutputStream.flush:()V\n+  #101 = Methodref          #88.#102      // java/io/OutputStream.close:()V\n+  #102 = NameAndType        #96:#25       // close:()V\n   #103 = Utf8               SourceFile\n   #104 = Utf8               BaseNCodecOutputStream.java\n   #105 = Utf8               InnerClasses\n   #106 = Utf8               Context\n {\n   private final boolean doEncode;\n     descriptor: Z\n@@ -134,30 +134,30 @@\n   public org.apache.commons.codec.binary.BaseNCodecOutputStream(java.io.OutputStream, org.apache.commons.codec.binary.BaseNCodec, boolean);\n     descriptor: (Ljava/io/OutputStream;Lorg/apache/commons/codec/binary/BaseNCodec;Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #3                  // Method java/io/FilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+         2: invokespecial #16                 // Method java/io/FilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n          5: aload_0\n          6: iconst_1\n          7: newarray       byte\n-         9: putfield      #9                  // Field singleByte:[B\n+         9: putfield      #19                 // Field singleByte:[B\n         12: aload_0\n-        13: new           #15                 // class org/apache/commons/codec/binary/BaseNCodec$Context\n+        13: new           #21                 // class org/apache/commons/codec/binary/BaseNCodec$Context\n         16: dup\n-        17: invokespecial #17                 // Method org/apache/commons/codec/binary/BaseNCodec$Context.\"<init>\":()V\n-        20: putfield      #20                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+        17: invokespecial #23                 // Method org/apache/commons/codec/binary/BaseNCodec$Context.\"<init>\":()V\n+        20: putfield      #26                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n         23: aload_0\n         24: aload_2\n-        25: putfield      #24                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+        25: putfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n         28: aload_0\n         29: iload_3\n-        30: putfield      #28                 // Field doEncode:Z\n+        30: putfield      #30                 // Field doEncode:Z\n         33: return\n       LineNumberTable:\n         line 58: 0\n         line 46: 5\n         line 48: 12\n         line 59: 23\n         line 60: 28\n@@ -168,106 +168,109 @@\n             0      34     1 output   Ljava/io/OutputStream;\n             0      34     2 basedCodec   Lorg/apache/commons/codec/binary/BaseNCodec;\n             0      34     3 doEncode   Z\n \n   public void write(int) throws java.io.IOException;\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #9                  // Field singleByte:[B\n+         1: getfield      #19                 // Field singleByte:[B\n          4: iconst_0\n          5: iload_1\n          6: i2b\n          7: bastore\n          8: aload_0\n          9: aload_0\n-        10: getfield      #9                  // Field singleByte:[B\n+        10: getfield      #19                 // Field singleByte:[B\n         13: iconst_0\n         14: iconst_1\n-        15: invokevirtual #32                 // Method write:([BII)V\n+        15: invokevirtual #44                 // Method write:([BII)V\n         18: return\n       LineNumberTable:\n         line 73: 0\n         line 74: 8\n         line 75: 18\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      19     0  this   Lorg/apache/commons/codec/binary/BaseNCodecOutputStream;\n             0      19     1     i   I\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void write(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_1\n-         1: ldc           #36                 // String array\n-         3: invokestatic  #38                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+         1: ldc           #49                 // String array\n+         3: invokestatic  #51                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n          6: pop\n          7: iload_2\n          8: iflt          15\n         11: iload_3\n         12: ifge          23\n-        15: new           #44                 // class java/lang/IndexOutOfBoundsException\n+        15: new           #57                 // class java/lang/IndexOutOfBoundsException\n         18: dup\n-        19: invokespecial #46                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+        19: invokespecial #59                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n         22: athrow\n         23: iload_2\n         24: aload_1\n         25: arraylength\n         26: if_icmpgt     37\n         29: iload_2\n         30: iload_3\n         31: iadd\n         32: aload_1\n         33: arraylength\n         34: if_icmple     45\n-        37: new           #44                 // class java/lang/IndexOutOfBoundsException\n+        37: new           #57                 // class java/lang/IndexOutOfBoundsException\n         40: dup\n-        41: invokespecial #46                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+        41: invokespecial #59                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n         44: athrow\n         45: iload_3\n         46: ifle          92\n         49: aload_0\n-        50: getfield      #28                 // Field doEncode:Z\n+        50: getfield      #30                 // Field doEncode:Z\n         53: ifeq          73\n         56: aload_0\n-        57: getfield      #24                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+        57: getfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n         60: aload_1\n         61: iload_2\n         62: iload_3\n         63: aload_0\n-        64: getfield      #20                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-        67: invokevirtual #47                 // Method org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+        64: getfield      #26                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+        67: invokevirtual #60                 // Method org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n         70: goto          87\n         73: aload_0\n-        74: getfield      #24                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+        74: getfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n         77: aload_1\n         78: iload_2\n         79: iload_3\n         80: aload_0\n-        81: getfield      #20                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-        84: invokevirtual #51                 // Method org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+        81: getfield      #26                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+        84: invokevirtual #66                 // Method org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n         87: aload_0\n         88: iconst_0\n-        89: invokespecial #54                 // Method flush:(Z)V\n+        89: invokespecial #69                 // Method flush:(Z)V\n         92: return\n       LineNumberTable:\n         line 97: 0\n         line 98: 7\n         line 99: 15\n         line 100: 23\n         line 101: 37\n         line 102: 45\n         line 103: 49\n         line 104: 56\n+        line 105: 70\n         line 106: 73\n         line 108: 87\n         line 110: 92\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      93     0  this   Lorg/apache/commons/codec/binary/BaseNCodecOutputStream;\n             0      93     1 array   [B\n@@ -277,161 +280,160 @@\n         frame_type = 15 /* same */\n         frame_type = 7 /* same */\n         frame_type = 13 /* same */\n         frame_type = 7 /* same */\n         frame_type = 27 /* same */\n         frame_type = 13 /* same */\n         frame_type = 4 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   private void flush(boolean) throws java.io.IOException;\n     descriptor: (Z)V\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=5, args_size=2\n          0: aload_0\n-         1: getfield      #24                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+         1: getfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n          4: aload_0\n-         5: getfield      #20                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-         8: invokevirtual #58                 // Method org/apache/commons/codec/binary/BaseNCodec.available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+         5: getfield      #26                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+         8: invokevirtual #76                 // Method org/apache/commons/codec/binary/BaseNCodec.available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n         11: istore_2\n         12: iload_2\n         13: ifle          52\n         16: iload_2\n         17: newarray       byte\n         19: astore_3\n         20: aload_0\n-        21: getfield      #24                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+        21: getfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n         24: aload_3\n         25: iconst_0\n         26: iload_2\n         27: aload_0\n-        28: getfield      #20                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-        31: invokevirtual #62                 // Method org/apache/commons/codec/binary/BaseNCodec.readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+        28: getfield      #26                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+        31: invokevirtual #80                 // Method org/apache/commons/codec/binary/BaseNCodec.readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n         34: istore        4\n         36: iload         4\n         38: ifle          52\n         41: aload_0\n-        42: getfield      #66                 // Field out:Ljava/io/OutputStream;\n+        42: getfield      #84                 // Field out:Ljava/io/OutputStream;\n         45: aload_3\n         46: iconst_0\n         47: iload         4\n-        49: invokevirtual #70                 // Method java/io/OutputStream.write:([BII)V\n+        49: invokevirtual #87                 // Method java/io/OutputStream.write:([BII)V\n         52: iload_1\n         53: ifeq          63\n         56: aload_0\n-        57: getfield      #66                 // Field out:Ljava/io/OutputStream;\n-        60: invokevirtual #73                 // Method java/io/OutputStream.flush:()V\n+        57: getfield      #84                 // Field out:Ljava/io/OutputStream;\n+        60: invokevirtual #90                 // Method java/io/OutputStream.flush:()V\n         63: return\n       LineNumberTable:\n         line 122: 0\n         line 123: 12\n         line 124: 16\n         line 125: 20\n         line 126: 36\n         line 127: 41\n         line 130: 52\n         line 131: 56\n         line 133: 63\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           20      32     3   buf   [B\n-           36      16     4     c   I\n             0      64     0  this   Lorg/apache/commons/codec/binary/BaseNCodecOutputStream;\n             0      64     1 propagate   Z\n            12      52     2 avail   I\n+           20      32     3   buf   [B\n+           36      16     4     c   I\n       StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n           offset_delta = 52\n           locals = [ int ]\n         frame_type = 10 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void flush() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_1\n-         2: invokespecial #54                 // Method flush:(Z)V\n+         2: invokespecial #69                 // Method flush:(Z)V\n          5: return\n       LineNumberTable:\n         line 143: 0\n         line 144: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/codec/binary/BaseNCodecOutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #75                 // Method eof:()V\n+         1: invokevirtual #97                 // Method eof:()V\n          4: aload_0\n-         5: invokevirtual #78                 // Method flush:()V\n+         5: invokevirtual #100                // Method flush:()V\n          8: aload_0\n-         9: getfield      #66                 // Field out:Ljava/io/OutputStream;\n-        12: invokevirtual #79                 // Method java/io/OutputStream.close:()V\n+         9: getfield      #84                 // Field out:Ljava/io/OutputStream;\n+        12: invokevirtual #101                // Method java/io/OutputStream.close:()V\n         15: return\n       LineNumberTable:\n         line 160: 0\n         line 161: 4\n         line 162: 8\n         line 163: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      16     0  this   Lorg/apache/commons/codec/binary/BaseNCodecOutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void eof() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #28                 // Field doEncode:Z\n+         1: getfield      #30                 // Field doEncode:Z\n          4: ifeq          27\n          7: aload_0\n-         8: getfield      #24                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+         8: getfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n         11: aload_0\n-        12: getfield      #9                  // Field singleByte:[B\n+        12: getfield      #19                 // Field singleByte:[B\n         15: iconst_0\n         16: iconst_m1\n         17: aload_0\n-        18: getfield      #20                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-        21: invokevirtual #47                 // Method org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+        18: getfield      #26                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+        21: invokevirtual #60                 // Method org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n         24: goto          44\n         27: aload_0\n-        28: getfield      #24                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+        28: getfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n         31: aload_0\n-        32: getfield      #9                  // Field singleByte:[B\n+        32: getfield      #19                 // Field singleByte:[B\n         35: iconst_0\n         36: iconst_m1\n         37: aload_0\n-        38: getfield      #20                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-        41: invokevirtual #51                 // Method org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+        38: getfield      #26                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+        41: invokevirtual #66                 // Method org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n         44: return\n       LineNumberTable:\n         line 174: 0\n         line 175: 7\n+        line 176: 24\n         line 177: 27\n         line 179: 44\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      45     0  this   Lorg/apache/commons/codec/binary/BaseNCodecOutputStream;\n       StackMapTable: number_of_entries = 2\n         frame_type = 27 /* same */\n         frame_type = 16 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n }\n SourceFile: \"BaseNCodecOutputStream.java\"\n InnerClasses:\n-  static #106= #15 of #1;                 // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n+  static #106= #21 of #61;                // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n"}]}
