{"diffoscope-json-version": 1, "source1": "first/Coders.class", "source2": "second/Coders.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,31 +7,31 @@\n import java.io.InputStream;\n import java.util.Map;\n \n class Coders\n {\n     private static final Map<SevenZMethod, CoderBase> CODER_MAP;\n     \n-    static CoderBase findByMethod(final SevenZMethod method) {\n-        return Coders.CODER_MAP.get(method);\n+    static CoderBase findByMethod(final SevenZMethod sevenZMethod) {\n+        return Coders.CODER_MAP.get(sevenZMethod);\n     }\n     \n-    static InputStream addDecoder(final String archiveName, final InputStream is, final long uncompressedLength, final Coder coder, final byte[] password, final int maxMemoryLimitInKb) throws IOException {\n-        final CoderBase cb = findByMethod(SevenZMethod.byId(coder.decompressionMethodId));\n-        if (cb == null) {\n-            throw new IOException(\"Unsupported compression method \" + Arrays.toString(coder.decompressionMethodId) + \" used in \" + archiveName);\n+    static InputStream addDecoder(final String s, final InputStream inputStream, final long n, final Coder coder, final byte[] array, final int n2) throws IOException {\n+        final CoderBase byMethod = findByMethod(SevenZMethod.byId(coder.decompressionMethodId));\n+        if (byMethod == null) {\n+            throw new IOException(\"Unsupported compression method \" + Arrays.toString(coder.decompressionMethodId) + \" used in \" + s);\n         }\n-        return cb.decode(archiveName, is, uncompressedLength, coder, password, maxMemoryLimitInKb);\n+        return byMethod.decode(s, inputStream, n, coder, array, n2);\n     }\n     \n-    static OutputStream addEncoder(final OutputStream out, final SevenZMethod method, final Object options) throws IOException {\n-        final CoderBase cb = findByMethod(method);\n-        if (cb == null) {\n-            throw new IOException(\"Unsupported compression method \" + method);\n+    static OutputStream addEncoder(final OutputStream outputStream, final SevenZMethod sevenZMethod, final Object o) throws IOException {\n+        final CoderBase byMethod = findByMethod(sevenZMethod);\n+        if (byMethod == null) {\n+            throw new IOException(\"Unsupported compression method \" + sevenZMethod);\n         }\n-        return cb.encode(out, options);\n+        return byMethod.encode(outputStream, o);\n     }\n     \n     static {\n         CODER_MAP = (Map)new Coders.Coders$1();\n     }\n }\n"}]}
