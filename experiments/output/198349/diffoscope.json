{"diffoscope-json-version": 1, "source1": "first/BCELFactory.class", "source2": "second/BCELFactory.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -56,236 +56,212 @@\n         this._mg = mg;\n         this._cp = mg.getConstantPool();\n         this._out = out;\n     }\n     \n     public void start() {\n         if (!this._mg.isAbstract() && !this._mg.isNative()) {\n-            for (InstructionHandle ih = this._mg.getInstructionList().getStart(); ih != null; ih = ih.getNext()) {\n-                final Instruction i = ih.getInstruction();\n-                if (i instanceof BranchInstruction) {\n-                    this.branch_map.put(i, ih);\n-                }\n-                if (ih.hasTargeters()) {\n-                    if (i instanceof BranchInstruction) {\n-                        this._out.println(\"    InstructionHandle ih_\" + ih.getPosition() + \";\");\n+            for (InstructionHandle instructionHandle = this._mg.getInstructionList().getStart(); instructionHandle != null; instructionHandle = instructionHandle.getNext()) {\n+                final Instruction instruction = instructionHandle.getInstruction();\n+                if (instruction instanceof BranchInstruction) {\n+                    this.branch_map.put(instruction, instructionHandle);\n+                }\n+                if (instructionHandle.hasTargeters()) {\n+                    if (instruction instanceof BranchInstruction) {\n+                        this._out.println(\"    InstructionHandle ih_\" + instructionHandle.getPosition() + \";\");\n                     }\n                     else {\n-                        this._out.print(\"    InstructionHandle ih_\" + ih.getPosition() + \" = \");\n+                        this._out.print(\"    InstructionHandle ih_\" + instructionHandle.getPosition() + \" = \");\n                     }\n                 }\n                 else {\n                     this._out.print(\"    \");\n                 }\n-                if (!this.visitInstruction(i)) {\n-                    i.accept((Visitor)this);\n+                if (!this.visitInstruction(instruction)) {\n+                    instruction.accept((Visitor)this);\n                 }\n             }\n             this.updateBranchTargets();\n             this.updateExceptionHandlers();\n         }\n     }\n     \n-    private boolean visitInstruction(final Instruction i) {\n-        final short opcode = i.getOpcode();\n-        if (InstructionConst.getInstruction((int)opcode) != null && !(i instanceof ConstantPushInstruction) && !(i instanceof ReturnInstruction)) {\n-            this._out.println(\"il.append(InstructionConst.\" + i.getName().toUpperCase(Locale.ENGLISH) + \");\");\n+    private boolean visitInstruction(final Instruction instruction) {\n+        if (InstructionConst.getInstruction((int)instruction.getOpcode()) != null && !(instruction instanceof ConstantPushInstruction) && !(instruction instanceof ReturnInstruction)) {\n+            this._out.println(\"il.append(InstructionConst.\" + instruction.getName().toUpperCase(Locale.ENGLISH) + \");\");\n             return true;\n         }\n         return false;\n     }\n     \n-    public void visitLocalVariableInstruction(final LocalVariableInstruction i) {\n-        final short opcode = i.getOpcode();\n-        final Type type = i.getType(this._cp);\n+    public void visitLocalVariableInstruction(final LocalVariableInstruction localVariableInstruction) {\n+        final short opcode = localVariableInstruction.getOpcode();\n+        final Type type = localVariableInstruction.getType(this._cp);\n         if (opcode == 132) {\n-            this._out.println(\"il.append(new IINC(\" + i.getIndex() + \", \" + ((IINC)i).getIncrement() + \"));\");\n+            this._out.println(\"il.append(new IINC(\" + localVariableInstruction.getIndex() + \", \" + ((IINC)localVariableInstruction).getIncrement() + \"));\");\n         }\n         else {\n-            final String kind = (opcode < 54) ? \"Load\" : \"Store\";\n-            this._out.println(\"il.append(_factory.create\" + kind + \"(\" + BCELifier.printType(type) + \", \" + i.getIndex() + \"));\");\n+            this._out.println(\"il.append(_factory.create\" + ((opcode < 54) ? \"Load\" : \"Store\") + \"(\" + BCELifier.printType(type) + \", \" + localVariableInstruction.getIndex() + \"));\");\n         }\n     }\n     \n-    public void visitArrayInstruction(final ArrayInstruction i) {\n-        final short opcode = i.getOpcode();\n-        final Type type = i.getType(this._cp);\n-        final String kind = (opcode < 79) ? \"Load\" : \"Store\";\n-        this._out.println(\"il.append(_factory.createArray\" + kind + \"(\" + BCELifier.printType(type) + \"));\");\n+    public void visitArrayInstruction(final ArrayInstruction arrayInstruction) {\n+        this._out.println(\"il.append(_factory.createArray\" + ((arrayInstruction.getOpcode() < 79) ? \"Load\" : \"Store\") + \"(\" + BCELifier.printType(arrayInstruction.getType(this._cp)) + \"));\");\n     }\n     \n-    public void visitFieldInstruction(final FieldInstruction i) {\n-        final short opcode = i.getOpcode();\n-        final String class_name = i.getClassName(this._cp);\n-        final String field_name = i.getFieldName(this._cp);\n-        final Type type = i.getFieldType(this._cp);\n-        this._out.println(\"il.append(_factory.createFieldAccess(\\\"\" + class_name + \"\\\", \\\"\" + field_name + \"\\\", \" + BCELifier.printType(type) + \", \" + BCELFactory.CONSTANT_PREFIX + Const.getOpcodeName((int)opcode).toUpperCase(Locale.ENGLISH) + \"));\");\n+    public void visitFieldInstruction(final FieldInstruction fieldInstruction) {\n+        this._out.println(\"il.append(_factory.createFieldAccess(\\\"\" + fieldInstruction.getClassName(this._cp) + \"\\\", \\\"\" + fieldInstruction.getFieldName(this._cp) + \"\\\", \" + BCELifier.printType(fieldInstruction.getFieldType(this._cp)) + \", \" + BCELFactory.CONSTANT_PREFIX + Const.getOpcodeName((int)fieldInstruction.getOpcode()).toUpperCase(Locale.ENGLISH) + \"));\");\n     }\n     \n-    public void visitInvokeInstruction(final InvokeInstruction i) {\n-        final short opcode = i.getOpcode();\n-        final String class_name = i.getClassName(this._cp);\n-        final String method_name = i.getMethodName(this._cp);\n-        final Type type = i.getReturnType(this._cp);\n-        final Type[] arg_types = i.getArgumentTypes(this._cp);\n-        this._out.println(\"il.append(_factory.createInvoke(\\\"\" + class_name + \"\\\", \\\"\" + method_name + \"\\\", \" + BCELifier.printType(type) + \", \" + BCELifier.printArgumentTypes(arg_types) + \", \" + BCELFactory.CONSTANT_PREFIX + Const.getOpcodeName((int)opcode).toUpperCase(Locale.ENGLISH) + \"));\");\n+    public void visitInvokeInstruction(final InvokeInstruction invokeInstruction) {\n+        this._out.println(\"il.append(_factory.createInvoke(\\\"\" + invokeInstruction.getClassName(this._cp) + \"\\\", \\\"\" + invokeInstruction.getMethodName(this._cp) + \"\\\", \" + BCELifier.printType(invokeInstruction.getReturnType(this._cp)) + \", \" + BCELifier.printArgumentTypes(invokeInstruction.getArgumentTypes(this._cp)) + \", \" + BCELFactory.CONSTANT_PREFIX + Const.getOpcodeName((int)invokeInstruction.getOpcode()).toUpperCase(Locale.ENGLISH) + \"));\");\n     }\n     \n-    public void visitAllocationInstruction(final AllocationInstruction i) {\n+    public void visitAllocationInstruction(final AllocationInstruction allocationInstruction) {\n         Type type;\n-        if (i instanceof CPInstruction) {\n-            type = ((CPInstruction)i).getType(this._cp);\n+        if (allocationInstruction instanceof CPInstruction) {\n+            type = ((CPInstruction)allocationInstruction).getType(this._cp);\n         }\n         else {\n-            type = ((NEWARRAY)i).getType();\n+            type = ((NEWARRAY)allocationInstruction).getType();\n         }\n-        final short opcode = ((Instruction)i).getOpcode();\n-        int dim = 1;\n+        final short opcode = ((Instruction)allocationInstruction).getOpcode();\n+        int dimensions = 1;\n         switch (opcode) {\n             case 187: {\n                 this._out.println(\"il.append(_factory.createNew(\\\"\" + ((ObjectType)type).getClassName() + \"\\\"));\");\n                 break;\n             }\n             case 197: {\n-                dim = ((MULTIANEWARRAY)i).getDimensions();\n+                dimensions = ((MULTIANEWARRAY)allocationInstruction).getDimensions();\n             }\n             case 188:\n             case 189: {\n                 if (type instanceof ArrayType) {\n                     type = ((ArrayType)type).getBasicType();\n                 }\n-                this._out.println(\"il.append(_factory.createNewArray(\" + BCELifier.printType(type) + \", (short) \" + dim + \"));\");\n+                this._out.println(\"il.append(_factory.createNewArray(\" + BCELifier.printType(type) + \", (short) \" + dimensions + \"));\");\n                 break;\n             }\n             default: {\n                 throw new RuntimeException(\"Oops: \" + opcode);\n             }\n         }\n     }\n     \n-    private void createConstant(final Object value) {\n-        String embed = value.toString();\n-        if (value instanceof String) {\n-            embed = '\\\"' + Utility.convertString(embed) + '\\\"';\n+    private void createConstant(final Object o) {\n+        String str = o.toString();\n+        if (o instanceof String) {\n+            str = '\\\"' + Utility.convertString(str) + '\\\"';\n         }\n-        else if (value instanceof Character) {\n-            embed = \"(char)0x\" + Integer.toHexString((int)value);\n+        else if (o instanceof Character) {\n+            str = \"(char)0x\" + Integer.toHexString((int)o);\n         }\n-        else if (value instanceof Float) {\n-            embed += \"f\";\n+        else if (o instanceof Float) {\n+            str += \"f\";\n         }\n-        else if (value instanceof Long) {\n-            embed += \"L\";\n+        else if (o instanceof Long) {\n+            str += \"L\";\n         }\n-        else if (value instanceof ObjectType) {\n-            final ObjectType ot = (ObjectType)value;\n-            embed = \"new ObjectType(\\\"\" + ot.getClassName() + \"\\\")\";\n+        else if (o instanceof ObjectType) {\n+            str = \"new ObjectType(\\\"\" + ((ObjectType)o).getClassName() + \"\\\")\";\n         }\n-        this._out.println(\"il.append(new PUSH(_cp, \" + embed + \"));\");\n+        this._out.println(\"il.append(new PUSH(_cp, \" + str + \"));\");\n     }\n     \n-    public void visitLDC(final LDC i) {\n-        this.createConstant(i.getValue(this._cp));\n+    public void visitLDC(final LDC ldc) {\n+        this.createConstant(ldc.getValue(this._cp));\n     }\n     \n-    public void visitLDC2_W(final LDC2_W i) {\n-        this.createConstant(i.getValue(this._cp));\n+    public void visitLDC2_W(final LDC2_W ldc2_W) {\n+        this.createConstant(ldc2_W.getValue(this._cp));\n     }\n     \n-    public void visitConstantPushInstruction(final ConstantPushInstruction i) {\n-        this.createConstant(i.getValue());\n+    public void visitConstantPushInstruction(final ConstantPushInstruction constantPushInstruction) {\n+        this.createConstant(constantPushInstruction.getValue());\n     }\n     \n-    public void visitINSTANCEOF(final INSTANCEOF i) {\n-        final Type type = i.getType(this._cp);\n-        this._out.println(\"il.append(new INSTANCEOF(_cp.addClass(\" + BCELifier.printType(type) + \")));\");\n+    public void visitINSTANCEOF(final INSTANCEOF instanceof1) {\n+        this._out.println(\"il.append(new INSTANCEOF(_cp.addClass(\" + BCELifier.printType(instanceof1.getType(this._cp)) + \")));\");\n     }\n     \n-    public void visitCHECKCAST(final CHECKCAST i) {\n-        final Type type = i.getType(this._cp);\n-        this._out.println(\"il.append(_factory.createCheckCast(\" + BCELifier.printType(type) + \"));\");\n+    public void visitCHECKCAST(final CHECKCAST checkcast) {\n+        this._out.println(\"il.append(_factory.createCheckCast(\" + BCELifier.printType(checkcast.getType(this._cp)) + \"));\");\n     }\n     \n-    public void visitReturnInstruction(final ReturnInstruction i) {\n-        final Type type = i.getType(this._cp);\n-        this._out.println(\"il.append(_factory.createReturn(\" + BCELifier.printType(type) + \"));\");\n+    public void visitReturnInstruction(final ReturnInstruction returnInstruction) {\n+        this._out.println(\"il.append(_factory.createReturn(\" + BCELifier.printType(returnInstruction.getType(this._cp)) + \"));\");\n     }\n     \n-    public void visitBranchInstruction(final BranchInstruction bi) {\n-        final BranchHandle bh = (BranchHandle)this.branch_map.get(bi);\n-        final int pos = bh.getPosition();\n-        final String name = bi.getName() + \"_\" + pos;\n-        if (bi instanceof Select) {\n-            final Select s = (Select)bi;\n-            this.branches.add(bi);\n-            final StringBuilder args = new StringBuilder(\"new int[] { \");\n-            final int[] matchs = s.getMatchs();\n+    public void visitBranchInstruction(final BranchInstruction branchInstruction) {\n+        final BranchHandle branchHandle = (BranchHandle)this.branch_map.get(branchInstruction);\n+        final int position = branchHandle.getPosition();\n+        final String string = branchInstruction.getName() + \"_\" + position;\n+        if (branchInstruction instanceof Select) {\n+            final Select select = (Select)branchInstruction;\n+            this.branches.add(branchInstruction);\n+            final StringBuilder obj = new StringBuilder(\"new int[] { \");\n+            final int[] matchs = select.getMatchs();\n             for (int i = 0; i < matchs.length; ++i) {\n-                args.append(matchs[i]);\n+                obj.append(matchs[i]);\n                 if (i < matchs.length - 1) {\n-                    args.append(\", \");\n+                    obj.append(\", \");\n                 }\n             }\n-            args.append(\" }\");\n-            this._out.print(\"Select \" + name + \" = new \" + bi.getName().toUpperCase(Locale.ENGLISH) + \"(\" + (Object)args + \", new InstructionHandle[] { \");\n-            for (int i = 0; i < matchs.length; ++i) {\n+            obj.append(\" }\");\n+            this._out.print(\"Select \" + string + \" = new \" + branchInstruction.getName().toUpperCase(Locale.ENGLISH) + \"(\" + (Object)obj + \", new InstructionHandle[] { \");\n+            for (int j = 0; j < matchs.length; ++j) {\n                 this._out.print(\"null\");\n-                if (i < matchs.length - 1) {\n+                if (j < matchs.length - 1) {\n                     this._out.print(\", \");\n                 }\n             }\n             this._out.println(\" }, null);\");\n         }\n         else {\n-            final int t_pos = bh.getTarget().getPosition();\n-            String target;\n-            if (pos > t_pos) {\n-                target = \"ih_\" + t_pos;\n+            final int position2 = branchHandle.getTarget().getPosition();\n+            String string2;\n+            if (position > position2) {\n+                string2 = \"ih_\" + position2;\n             }\n             else {\n-                this.branches.add(bi);\n-                target = \"null\";\n+                this.branches.add(branchInstruction);\n+                string2 = \"null\";\n             }\n-            this._out.println(\"    BranchInstruction \" + name + \" = _factory.createBranchInstruction(\" + BCELFactory.CONSTANT_PREFIX + bi.getName().toUpperCase(Locale.ENGLISH) + \", \" + target + \");\");\n+            this._out.println(\"    BranchInstruction \" + string + \" = _factory.createBranchInstruction(\" + BCELFactory.CONSTANT_PREFIX + branchInstruction.getName().toUpperCase(Locale.ENGLISH) + \", \" + string2 + \");\");\n         }\n-        if (bh.hasTargeters()) {\n-            this._out.println(\"    ih_\" + pos + \" = il.append(\" + name + \");\");\n+        if (branchHandle.hasTargeters()) {\n+            this._out.println(\"    ih_\" + position + \" = il.append(\" + string + \");\");\n         }\n         else {\n-            this._out.println(\"    il.append(\" + name + \");\");\n+            this._out.println(\"    il.append(\" + string + \");\");\n         }\n     }\n     \n-    public void visitRET(final RET i) {\n-        this._out.println(\"il.append(new RET(\" + i.getIndex() + \")));\");\n+    public void visitRET(final RET ret) {\n+        this._out.println(\"il.append(new RET(\" + ret.getIndex() + \")));\");\n     }\n     \n     private void updateBranchTargets() {\n-        for (final BranchInstruction bi : this.branches) {\n-            final BranchHandle bh = (BranchHandle)this.branch_map.get(bi);\n-            final int pos = bh.getPosition();\n-            final String name = bi.getName() + \"_\" + pos;\n-            int t_pos = bh.getTarget().getPosition();\n-            this._out.println(\"    \" + name + \".setTarget(ih_\" + t_pos + \");\");\n-            if (bi instanceof Select) {\n-                final InstructionHandle[] ihs = ((Select)bi).getTargets();\n-                for (int j = 0; j < ihs.length; ++j) {\n-                    t_pos = ihs[j].getPosition();\n-                    this._out.println(\"    \" + name + \".setTarget(\" + j + \", ih_\" + t_pos + \");\");\n+        for (final BranchInstruction branchInstruction : this.branches) {\n+            final BranchHandle branchHandle = (BranchHandle)this.branch_map.get(branchInstruction);\n+            final String string = branchInstruction.getName() + \"_\" + branchHandle.getPosition();\n+            this._out.println(\"    \" + string + \".setTarget(ih_\" + branchHandle.getTarget().getPosition() + \");\");\n+            if (branchInstruction instanceof Select) {\n+                final InstructionHandle[] targets = ((Select)branchInstruction).getTargets();\n+                for (int i = 0; i < targets.length; ++i) {\n+                    this._out.println(\"    \" + string + \".setTarget(\" + i + \", ih_\" + targets[i].getPosition() + \");\");\n                 }\n             }\n         }\n     }\n     \n     private void updateExceptionHandlers() {\n-        final CodeExceptionGen[] exceptionHandlers;\n-        final CodeExceptionGen[] handlers = exceptionHandlers = this._mg.getExceptionHandlers();\n-        for (final CodeExceptionGen h : exceptionHandlers) {\n-            final String type = (h.getCatchType() == null) ? \"null\" : BCELifier.printType((Type)h.getCatchType());\n-            this._out.println(\"    method.addExceptionHandler(ih_\" + h.getStartPC().getPosition() + \", ih_\" + h.getEndPC().getPosition() + \", ih_\" + h.getHandlerPC().getPosition() + \", \" + type + \");\");\n+        for (final CodeExceptionGen codeExceptionGen : this._mg.getExceptionHandlers()) {\n+            this._out.println(\"    method.addExceptionHandler(ih_\" + codeExceptionGen.getStartPC().getPosition() + \", ih_\" + codeExceptionGen.getEndPC().getPosition() + \", ih_\" + codeExceptionGen.getHandlerPC().getPosition() + \", \" + ((codeExceptionGen.getCatchType() == null) ? \"null\" : BCELifier.printType((Type)codeExceptionGen.getCatchType())) + \");\");\n         }\n     }\n     \n     static {\n         CONSTANT_PREFIX = Const.class.getSimpleName() + \".\";\n     }\n }\n"}]}
