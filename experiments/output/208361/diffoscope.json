{"diffoscope-json-version": 1, "source1": "first/Tailer$Builder.class", "source2": "second/Tailer$Builder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -24,35 +24,35 @@\n     \n     public Builder() {\n         this.delayDuration = Builder.DEFAULT_DELAY_DURATION;\n         this.startThread = true;\n         this.executorService = Executors.newSingleThreadExecutor(Builder::newDaemonThread);\n     }\n     \n-    private static Thread newDaemonThread(final Runnable runnable) {\n-        final Thread thread = new Thread(runnable, \"commons-io-tailer\");\n+    private static Thread newDaemonThread(final Runnable task) {\n+        final Thread thread = new Thread(task, \"commons-io-tailer\");\n         thread.setDaemon(true);\n         return thread;\n     }\n     \n     public Tailer get() {\n         final Tailer tailer = new Tailer(this.tailable, this.getCharset(), this.tailerListener, this.delayDuration, this.end, this.reOpen, this.getBufferSize(), (Tailer.Tailer$1)null);\n         if (this.startThread) {\n             this.executorService.submit((Runnable)tailer);\n         }\n         return tailer;\n     }\n     \n-    public Builder setDelayDuration(final Duration delayDuration) {\n-        this.delayDuration = ((delayDuration != null) ? delayDuration : Builder.DEFAULT_DELAY_DURATION);\n+    public Builder setDelayDuration(final Duration duration) {\n+        this.delayDuration = ((duration != null) ? duration : Builder.DEFAULT_DELAY_DURATION);\n         return this;\n     }\n     \n-    public Builder setExecutorService(final ExecutorService executorService) {\n-        this.executorService = Objects.requireNonNull(executorService, \"executorService\");\n+    public Builder setExecutorService(final ExecutorService obj) {\n+        this.executorService = Objects.requireNonNull(obj, \"executorService\");\n         return this;\n     }\n     \n     protected Builder setOrigin(final AbstractOrigin<?, ?> origin) {\n         this.setTailable((Tailer.Tailable)new Tailer.TailablePath(origin.getPath(), new LinkOption[0], (Tailer.Tailer$1)null));\n         return (Builder)super.setOrigin((AbstractOrigin)origin);\n     }\n@@ -63,21 +63,21 @@\n     }\n     \n     public Builder setStartThread(final boolean startThread) {\n         this.startThread = startThread;\n         return this;\n     }\n     \n-    public Builder setTailable(final Tailer.Tailable tailable) {\n-        this.tailable = Objects.requireNonNull(tailable, \"tailable\");\n+    public Builder setTailable(final Tailer.Tailable obj) {\n+        this.tailable = Objects.requireNonNull(obj, \"tailable\");\n         return this;\n     }\n     \n-    public Builder setTailerListener(final TailerListener tailerListener) {\n-        this.tailerListener = Objects.requireNonNull(tailerListener, \"tailerListener\");\n+    public Builder setTailerListener(final TailerListener obj) {\n+        this.tailerListener = Objects.requireNonNull(obj, \"tailerListener\");\n         return this;\n     }\n     \n     public Builder setTailFromEnd(final boolean end) {\n         this.end = end;\n         return this;\n     }\n"}]}
