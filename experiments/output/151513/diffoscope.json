{"diffoscope-json-version": 1, "source1": "first/JiraCsv93Test.class", "source2": "second/JiraCsv93Test.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,21 +12,47 @@\n import org.apache.commons.csv.CSVFormat;\n \n public class JiraCsv93Test\n {\n     private static Object[] objects1;\n     private static Object[] objects2;\n     \n+    static {\n+        JiraCsv93Test.objects1 = new Object[] { \"abc\", \"\", null, \"a,b,c\", Integer.valueOf(123) };\n+        JiraCsv93Test.objects2 = new Object[] { \"abc\", \"NULL\", null, \"a,b,c\", Integer.valueOf(123) };\n+    }\n+    \n     private void every(final CSVFormat csvFormat, final Object[] objects, final String format, final String[] data) throws IOException {\n         final String source = csvFormat.format(objects);\n         Assertions.assertEquals((Object)format, (Object)csvFormat.format(objects));\n-        try (final CSVParser csvParser = csvFormat.parse((Reader)new StringReader(source))) {\n-            final CSVRecord csvRecord = (CSVRecord)csvParser.iterator().next();\n-            for (int i = 0; i < data.length; ++i) {\n-                Assertions.assertEquals((Object)csvRecord.get(i), (Object)data[i]);\n+        Throwable t = null;\n+        try {\n+            final CSVParser csvParser = csvFormat.parse((Reader)new StringReader(source));\n+            try {\n+                final CSVRecord csvRecord = (CSVRecord)csvParser.iterator().next();\n+                for (int i = 0; i < data.length; ++i) {\n+                    Assertions.assertEquals((Object)csvRecord.get(i), (Object)data[i]);\n+                }\n+            }\n+            finally {\n+                if (csvParser != null) {\n+                    csvParser.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n     }\n     \n     @Test\n     public void testWithNotSetNullString() throws IOException {\n         this.every(CSVFormat.DEFAULT, JiraCsv93Test.objects1, \"abc,,,\\\"a,b,c\\\",123\", new String[] { \"abc\", \"\", \"\", \"a,b,c\", \"123\" });\n@@ -52,13 +78,8 @@\n         this.every(CSVFormat.DEFAULT.builder().setNullString(\"NULL\").build(), JiraCsv93Test.objects2, \"abc,NULL,NULL,\\\"a,b,c\\\",123\", new String[] { \"abc\", null, null, \"a,b,c\", \"123\" });\n         this.every(CSVFormat.DEFAULT.builder().setNullString(\"NULL\").setQuoteMode(QuoteMode.ALL).build(), JiraCsv93Test.objects2, \"\\\"abc\\\",\\\"NULL\\\",\\\"NULL\\\",\\\"a,b,c\\\",\\\"123\\\"\", new String[] { \"abc\", null, null, \"a,b,c\", \"123\" });\n         this.every(CSVFormat.DEFAULT.builder().setNullString(\"NULL\").setQuoteMode(QuoteMode.ALL_NON_NULL).build(), JiraCsv93Test.objects2, \"\\\"abc\\\",\\\"NULL\\\",NULL,\\\"a,b,c\\\",\\\"123\\\"\", new String[] { \"abc\", \"NULL\", null, \"a,b,c\", \"123\" });\n         this.every(CSVFormat.DEFAULT.builder().setNullString(\"NULL\").setQuoteMode(QuoteMode.MINIMAL).build(), JiraCsv93Test.objects2, \"abc,NULL,NULL,\\\"a,b,c\\\",123\", new String[] { \"abc\", null, null, \"a,b,c\", \"123\" });\n         this.every(CSVFormat.DEFAULT.builder().setNullString(\"NULL\").setEscape('?').setQuoteMode(QuoteMode.NONE).build(), JiraCsv93Test.objects2, \"abc,NULL,NULL,a?,b?,c,123\", new String[] { \"abc\", null, null, \"a,b,c\", \"123\" });\n         this.every(CSVFormat.DEFAULT.builder().setNullString(\"NULL\").setQuoteMode(QuoteMode.NON_NUMERIC).build(), JiraCsv93Test.objects2, \"\\\"abc\\\",\\\"NULL\\\",NULL,\\\"a,b,c\\\",123\", new String[] { \"abc\", \"NULL\", null, \"a,b,c\", \"123\" });\n     }\n-    \n-    static {\n-        JiraCsv93Test.objects1 = new Object[] { \"abc\", \"\", null, \"a,b,c\", Integer.valueOf(123) };\n-        JiraCsv93Test.objects2 = new Object[] { \"abc\", \"NULL\", null, \"a,b,c\", Integer.valueOf(123) };\n-    }\n }\n"}]}
