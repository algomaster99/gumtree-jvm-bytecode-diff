{"diffoscope-json-version": 1, "source1": "first/WindowSizeOptionHandler.class", "source2": "second/WindowSizeOptionHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,52 +3,50 @@\n \n public class WindowSizeOptionHandler extends TelnetOptionHandler\n {\n     private int width;\n     private int height;\n     protected static final int WINDOW_SIZE = 31;\n     \n-    public WindowSizeOptionHandler(final int nWidth, final int nHeight, final boolean initlocal, final boolean initremote, final boolean acceptlocal, final boolean acceptremote) {\n-        super(31, initlocal, initremote, acceptlocal, acceptremote);\n+    public WindowSizeOptionHandler(final int width, final int height, final boolean b, final boolean b2, final boolean b3, final boolean b4) {\n+        super(31, b, b2, b3, b4);\n         this.width = 80;\n         this.height = 24;\n-        this.width = nWidth;\n-        this.height = nHeight;\n+        this.width = width;\n+        this.height = height;\n     }\n     \n-    public WindowSizeOptionHandler(final int nWidth, final int nHeight) {\n+    public WindowSizeOptionHandler(final int width, final int height) {\n         super(31, false, false, false, false);\n         this.width = 80;\n         this.height = 24;\n-        this.width = nWidth;\n-        this.height = nHeight;\n+        this.width = width;\n+        this.height = height;\n     }\n     \n     public int[] startSubnegotiationLocal() {\n-        final int nCompoundWindowSize = this.width * 65536 + this.height;\n-        int nResponseSize = 5;\n+        final int n = this.width * 65536 + this.height;\n+        int n2 = 5;\n         if (this.width % 256 == 255) {\n-            ++nResponseSize;\n+            ++n2;\n         }\n         if (this.width / 256 == 255) {\n-            ++nResponseSize;\n+            ++n2;\n         }\n         if (this.height % 256 == 255) {\n-            ++nResponseSize;\n+            ++n2;\n         }\n         if (this.height / 256 == 255) {\n-            ++nResponseSize;\n+            ++n2;\n         }\n-        final int[] response = new int[nResponseSize];\n-        response[0] = 31;\n-        for (int nIndex = 1, nShift = 24; nIndex < nResponseSize; ++nIndex, nShift -= 8) {\n-            int nTurnedOnBits = 255;\n-            nTurnedOnBits <<= nShift;\n-            response[nIndex] = (nCompoundWindowSize & nTurnedOnBits) >>> nShift;\n-            if (response[nIndex] == 255) {\n-                ++nIndex;\n-                response[nIndex] = 255;\n+        final int[] array = new int[n2];\n+        array[0] = 31;\n+        for (int i = 1, n3 = 24; i < n2; ++i, n3 -= 8) {\n+            array[i] = (n & 255 << n3) >>> n3;\n+            if (array[i] == 255) {\n+                ++i;\n+                array[i] = 255;\n             }\n         }\n-        return response;\n+        return array;\n     }\n }\n"}]}
