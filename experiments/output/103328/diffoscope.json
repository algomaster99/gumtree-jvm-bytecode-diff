{"diffoscope-json-version": 1, "source1": "first/LZMA2Decoder.class", "source2": "second/LZMA2Decoder.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,328 +1,330 @@\n-  SHA-256 checksum a8169fadb886f6986f4f6f50187bad12303240ab6a3e57b4aa79dac81a1a5473\n+  SHA-256 checksum 2ec2718822143ba0fc8cd81d290163ab41e1153e6a271a71e685537724b1c3e6\n   Compiled from \"LZMA2Decoder.java\"\n class org.apache.commons.compress.archivers.sevenz.LZMA2Decoder extends org.apache.commons.compress.archivers.sevenz.AbstractCoder\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n-  this_class: #14                         // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n-  super_class: #8                         // org/apache/commons/compress/archivers/sevenz/AbstractCoder\n+  this_class: #1                          // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n+  super_class: #3                         // org/apache/commons/compress/archivers/sevenz/AbstractCoder\n   interfaces: 0, fields: 0, methods: 9, attributes: 1\n Constant pool:\n-    #1 = Class              #2            // java/lang/Class\n-    #2 = Utf8               java/lang/Class\n-    #3 = Class              #4            // org/tukaani/xz/LZMA2Options\n-    #4 = Utf8               org/tukaani/xz/LZMA2Options\n-    #5 = Class              #6            // java/lang/Number\n-    #6 = Utf8               java/lang/Number\n-    #7 = Methodref          #8.#9         // org/apache/commons/compress/archivers/sevenz/AbstractCoder.\"<init>\":([Ljava/lang/Class;)V\n-    #8 = Class              #10           // org/apache/commons/compress/archivers/sevenz/AbstractCoder\n-    #9 = NameAndType        #11:#12       // \"<init>\":([Ljava/lang/Class;)V\n-   #10 = Utf8               org/apache/commons/compress/archivers/sevenz/AbstractCoder\n-   #11 = Utf8               <init>\n-   #12 = Utf8               ([Ljava/lang/Class;)V\n-   #13 = Methodref          #14.#15       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-   #14 = Class              #16           // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n-   #15 = NameAndType        #17:#18       // getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-   #16 = Utf8               org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n-   #17 = Utf8               getDictionarySize\n-   #18 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-   #19 = Methodref          #20.#21       // org/tukaani/xz/LZMA2InputStream.getMemoryUsage:(I)I\n-   #20 = Class              #22           // org/tukaani/xz/LZMA2InputStream\n-   #21 = NameAndType        #23:#24       // getMemoryUsage:(I)I\n-   #22 = Utf8               org/tukaani/xz/LZMA2InputStream\n-   #23 = Utf8               getMemoryUsage\n-   #24 = Utf8               (I)I\n-   #25 = Class              #26           // org/apache/commons/compress/MemoryLimitException\n-   #26 = Utf8               org/apache/commons/compress/MemoryLimitException\n-   #27 = Methodref          #25.#28       // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n-   #28 = NameAndType        #11:#29       // \"<init>\":(JI)V\n-   #29 = Utf8               (JI)V\n-   #30 = Methodref          #20.#31       // org/tukaani/xz/LZMA2InputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-   #31 = NameAndType        #11:#32       // \"<init>\":(Ljava/io/InputStream;I)V\n-   #32 = Utf8               (Ljava/io/InputStream;I)V\n-   #33 = Class              #34           // java/lang/IllegalArgumentException\n-   #34 = Utf8               java/lang/IllegalArgumentException\n-   #35 = Class              #36           // java/io/IOException\n-   #36 = Utf8               java/io/IOException\n-   #37 = Methodref          #35.#38       // java/io/IOException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #38 = NameAndType        #11:#39       // \"<init>\":(Ljava/lang/Throwable;)V\n-   #39 = Utf8               (Ljava/lang/Throwable;)V\n-   #40 = Methodref          #14.#41       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-   #41 = NameAndType        #42:#43       // getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-   #42 = Utf8               getOptions\n-   #43 = Utf8               (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-   #44 = Class              #45           // org/tukaani/xz/FinishableWrapperOutputStream\n-   #45 = Utf8               org/tukaani/xz/FinishableWrapperOutputStream\n-   #46 = Methodref          #44.#47       // org/tukaani/xz/FinishableWrapperOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n-   #47 = NameAndType        #11:#48       // \"<init>\":(Ljava/io/OutputStream;)V\n-   #48 = Utf8               (Ljava/io/OutputStream;)V\n-   #49 = Methodref          #3.#50        // org/tukaani/xz/LZMA2Options.getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n-   #50 = NameAndType        #51:#52       // getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n-   #51 = Utf8               getOutputStream\n-   #52 = Utf8               (Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n-   #53 = Fieldref           #54.#55       // org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n-   #54 = Class              #56           // org/apache/commons/compress/archivers/sevenz/Coder\n-   #55 = NameAndType        #57:#58       // properties:[B\n-   #56 = Utf8               org/apache/commons/compress/archivers/sevenz/Coder\n-   #57 = Utf8               properties\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n+    #2 = Utf8               org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n+    #3 = Class              #4            // org/apache/commons/compress/archivers/sevenz/AbstractCoder\n+    #4 = Utf8               org/apache/commons/compress/archivers/sevenz/AbstractCoder\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Utf8               Code\n+    #8 = Class              #9            // java/lang/Class\n+    #9 = Utf8               java/lang/Class\n+   #10 = Class              #11           // org/tukaani/xz/LZMA2Options\n+   #11 = Utf8               org/tukaani/xz/LZMA2Options\n+   #12 = Class              #13           // java/lang/Number\n+   #13 = Utf8               java/lang/Number\n+   #14 = Methodref          #3.#15        // org/apache/commons/compress/archivers/sevenz/AbstractCoder.\"<init>\":([Ljava/lang/Class;)V\n+   #15 = NameAndType        #5:#16        // \"<init>\":([Ljava/lang/Class;)V\n+   #16 = Utf8               ([Ljava/lang/Class;)V\n+   #17 = Utf8               LineNumberTable\n+   #18 = Utf8               LocalVariableTable\n+   #19 = Utf8               this\n+   #20 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n+   #21 = Utf8               decode\n+   #22 = Utf8               (Ljava/lang/String;Ljava/io/InputStream;JLorg/apache/commons/compress/archivers/sevenz/Coder;[BI)Ljava/io/InputStream;\n+   #23 = Utf8               Exceptions\n+   #24 = Class              #25           // java/io/IOException\n+   #25 = Utf8               java/io/IOException\n+   #26 = Methodref          #1.#27        // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #27 = NameAndType        #28:#29       // getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #28 = Utf8               getDictionarySize\n+   #29 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #30 = Methodref          #31.#33       // org/tukaani/xz/LZMA2InputStream.getMemoryUsage:(I)I\n+   #31 = Class              #32           // org/tukaani/xz/LZMA2InputStream\n+   #32 = Utf8               org/tukaani/xz/LZMA2InputStream\n+   #33 = NameAndType        #34:#35       // getMemoryUsage:(I)I\n+   #34 = Utf8               getMemoryUsage\n+   #35 = Utf8               (I)I\n+   #36 = Class              #37           // org/apache/commons/compress/MemoryLimitException\n+   #37 = Utf8               org/apache/commons/compress/MemoryLimitException\n+   #38 = Methodref          #36.#39       // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n+   #39 = NameAndType        #5:#40        // \"<init>\":(JI)V\n+   #40 = Utf8               (JI)V\n+   #41 = Methodref          #31.#42       // org/tukaani/xz/LZMA2InputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+   #42 = NameAndType        #5:#43        // \"<init>\":(Ljava/io/InputStream;I)V\n+   #43 = Utf8               (Ljava/io/InputStream;I)V\n+   #44 = Methodref          #24.#45       // java/io/IOException.\"<init>\":(Ljava/lang/Throwable;)V\n+   #45 = NameAndType        #5:#46        // \"<init>\":(Ljava/lang/Throwable;)V\n+   #46 = Utf8               (Ljava/lang/Throwable;)V\n+   #47 = Class              #48           // java/lang/IllegalArgumentException\n+   #48 = Utf8               java/lang/IllegalArgumentException\n+   #49 = Utf8               archiveName\n+   #50 = Utf8               Ljava/lang/String;\n+   #51 = Utf8               in\n+   #52 = Utf8               Ljava/io/InputStream;\n+   #53 = Utf8               uncompressedLength\n+   #54 = Utf8               J\n+   #55 = Utf8               coder\n+   #56 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/Coder;\n+   #57 = Utf8               password\n    #58 = Utf8               [B\n-   #59 = String             #60           // Missing LZMA2 properties\n-   #60 = Utf8               Missing LZMA2 properties\n-   #61 = Methodref          #35.#62       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #62 = NameAndType        #11:#63       // \"<init>\":(Ljava/lang/String;)V\n-   #63 = Utf8               (Ljava/lang/String;)V\n-   #64 = String             #65           // LZMA2 properties too short\n-   #65 = Utf8               LZMA2 properties too short\n-   #66 = String             #67           // Unsupported LZMA2 property bits\n-   #67 = Utf8               Unsupported LZMA2 property bits\n-   #68 = String             #69           // Dictionary larger than 4GiB maximum size\n-   #69 = Utf8               Dictionary larger than 4GiB maximum size\n-   #70 = Methodref          #3.#71        // org/tukaani/xz/LZMA2Options.getDictSize:()I\n-   #71 = NameAndType        #72:#73       // getDictSize:()I\n-   #72 = Utf8               getDictSize\n-   #73 = Utf8               ()I\n-   #74 = Methodref          #14.#75       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.numberOptionOrDefault:(Ljava/lang/Object;)I\n-   #75 = NameAndType        #76:#77       // numberOptionOrDefault:(Ljava/lang/Object;)I\n-   #76 = Utf8               numberOptionOrDefault\n-   #77 = Utf8               (Ljava/lang/Object;)I\n-   #78 = Methodref          #3.#79        // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n-   #79 = NameAndType        #11:#80       // \"<init>\":()V\n-   #80 = Utf8               ()V\n-   #81 = Methodref          #3.#82        // org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n-   #82 = NameAndType        #83:#84       // setDictSize:(I)V\n-   #83 = Utf8               setDictSize\n-   #84 = Utf8               (I)V\n-   #85 = Methodref          #14.#86       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getDictSize:(Ljava/lang/Object;)I\n-   #86 = NameAndType        #72:#77       // getDictSize:(Ljava/lang/Object;)I\n-   #87 = Methodref          #88.#89       // java/lang/Integer.numberOfLeadingZeros:(I)I\n-   #88 = Class              #90           // java/lang/Integer\n-   #89 = NameAndType        #91:#24       // numberOfLeadingZeros:(I)I\n-   #90 = Utf8               java/lang/Integer\n-   #91 = Utf8               numberOfLeadingZeros\n-   #92 = Methodref          #88.#93       // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #93 = NameAndType        #94:#95       // valueOf:(I)Ljava/lang/Integer;\n-   #94 = Utf8               valueOf\n-   #95 = Utf8               (I)Ljava/lang/Integer;\n-   #96 = Integer            8388608\n-   #97 = Methodref          #14.#98       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.toInt:(Ljava/lang/Object;I)I\n-   #98 = NameAndType        #99:#100      // toInt:(Ljava/lang/Object;I)I\n-   #99 = Utf8               toInt\n-  #100 = Utf8               (Ljava/lang/Object;I)I\n-  #101 = Utf8               Code\n-  #102 = Utf8               LineNumberTable\n-  #103 = Utf8               LocalVariableTable\n-  #104 = Utf8               this\n-  #105 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n-  #106 = Utf8               decode\n-  #107 = Utf8               (Ljava/lang/String;Ljava/io/InputStream;JLorg/apache/commons/compress/archivers/sevenz/Coder;[BI)Ljava/io/InputStream;\n-  #108 = Utf8               dictionarySize\n-  #109 = Utf8               I\n-  #110 = Utf8               memoryUsageInKb\n-  #111 = Utf8               ex\n-  #112 = Utf8               Ljava/lang/IllegalArgumentException;\n-  #113 = Utf8               archiveName\n-  #114 = Utf8               Ljava/lang/String;\n-  #115 = Utf8               in\n-  #116 = Utf8               Ljava/io/InputStream;\n-  #117 = Utf8               uncompressedLength\n-  #118 = Utf8               J\n-  #119 = Utf8               coder\n-  #120 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/Coder;\n-  #121 = Utf8               password\n-  #122 = Utf8               maxMemoryLimitInKb\n-  #123 = Utf8               StackMapTable\n-  #124 = Class              #125          // java/lang/String\n-  #125 = Utf8               java/lang/String\n-  #126 = Class              #127          // java/io/InputStream\n-  #127 = Utf8               java/io/InputStream\n-  #128 = Class              #58           // \"[B\"\n-  #129 = Utf8               Exceptions\n-  #130 = Utf8               encode\n-  #131 = Utf8               (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n-  #132 = Utf8               out\n-  #133 = Utf8               Ljava/io/OutputStream;\n-  #134 = Utf8               opts\n-  #135 = Utf8               Ljava/lang/Object;\n-  #136 = Utf8               dictionarySizeBits\n-  #137 = Utf8               options\n-  #138 = Utf8               Lorg/tukaani/xz/LZMA2Options;\n-  #139 = Utf8               getOptionsAsProperties\n-  #140 = Utf8               (Ljava/lang/Object;)[B\n-  #141 = Utf8               dictSize\n-  #142 = Utf8               lead\n-  #143 = Utf8               secondBit\n-  #144 = Utf8               getOptionsFromCoder\n-  #145 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n+   #59 = Utf8               maxMemoryLimitInKb\n+   #60 = Utf8               I\n+   #61 = Utf8               dictionarySize\n+   #62 = Utf8               memoryUsageInKb\n+   #63 = Utf8               ex\n+   #64 = Utf8               Ljava/lang/IllegalArgumentException;\n+   #65 = Utf8               StackMapTable\n+   #66 = Class              #67           // java/lang/String\n+   #67 = Utf8               java/lang/String\n+   #68 = Class              #69           // java/io/InputStream\n+   #69 = Utf8               java/io/InputStream\n+   #70 = Class              #71           // org/apache/commons/compress/archivers/sevenz/Coder\n+   #71 = Utf8               org/apache/commons/compress/archivers/sevenz/Coder\n+   #72 = Class              #58           // \"[B\"\n+   #73 = Utf8               encode\n+   #74 = Utf8               (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n+   #75 = Methodref          #1.#76        // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+   #76 = NameAndType        #77:#78       // getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+   #77 = Utf8               getOptions\n+   #78 = Utf8               (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+   #79 = Class              #80           // org/tukaani/xz/FinishableWrapperOutputStream\n+   #80 = Utf8               org/tukaani/xz/FinishableWrapperOutputStream\n+   #81 = Methodref          #79.#82       // org/tukaani/xz/FinishableWrapperOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+   #82 = NameAndType        #5:#83        // \"<init>\":(Ljava/io/OutputStream;)V\n+   #83 = Utf8               (Ljava/io/OutputStream;)V\n+   #84 = Methodref          #10.#85       // org/tukaani/xz/LZMA2Options.getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n+   #85 = NameAndType        #86:#87       // getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n+   #86 = Utf8               getOutputStream\n+   #87 = Utf8               (Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n+   #88 = Utf8               out\n+   #89 = Utf8               Ljava/io/OutputStream;\n+   #90 = Utf8               opts\n+   #91 = Utf8               Ljava/lang/Object;\n+   #92 = Fieldref           #70.#93       // org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+   #93 = NameAndType        #94:#58       // properties:[B\n+   #94 = Utf8               properties\n+   #95 = String             #96           // Missing LZMA2 properties\n+   #96 = Utf8               Missing LZMA2 properties\n+   #97 = Methodref          #24.#98       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #98 = NameAndType        #5:#99        // \"<init>\":(Ljava/lang/String;)V\n+   #99 = Utf8               (Ljava/lang/String;)V\n+  #100 = String             #101          // LZMA2 properties too short\n+  #101 = Utf8               LZMA2 properties too short\n+  #102 = String             #103          // Unsupported LZMA2 property bits\n+  #103 = Utf8               Unsupported LZMA2 property bits\n+  #104 = String             #105          // Dictionary larger than 4GiB maximum size\n+  #105 = Utf8               Dictionary larger than 4GiB maximum size\n+  #106 = Utf8               dictionarySizeBits\n+  #107 = Utf8               getDictSize\n+  #108 = Utf8               (Ljava/lang/Object;)I\n+  #109 = Methodref          #10.#110      // org/tukaani/xz/LZMA2Options.getDictSize:()I\n+  #110 = NameAndType        #107:#111     // getDictSize:()I\n+  #111 = Utf8               ()I\n+  #112 = Methodref          #1.#113       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.numberOptionOrDefault:(Ljava/lang/Object;)I\n+  #113 = NameAndType        #114:#108     // numberOptionOrDefault:(Ljava/lang/Object;)I\n+  #114 = Utf8               numberOptionOrDefault\n+  #115 = Methodref          #10.#116      // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+  #116 = NameAndType        #5:#6         // \"<init>\":()V\n+  #117 = Methodref          #10.#118      // org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n+  #118 = NameAndType        #119:#120     // setDictSize:(I)V\n+  #119 = Utf8               setDictSize\n+  #120 = Utf8               (I)V\n+  #121 = Utf8               options\n+  #122 = Utf8               Lorg/tukaani/xz/LZMA2Options;\n+  #123 = Utf8               getOptionsAsProperties\n+  #124 = Utf8               (Ljava/lang/Object;)[B\n+  #125 = Methodref          #1.#126       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getDictSize:(Ljava/lang/Object;)I\n+  #126 = NameAndType        #107:#108     // getDictSize:(Ljava/lang/Object;)I\n+  #127 = Methodref          #128.#130     // java/lang/Integer.numberOfLeadingZeros:(I)I\n+  #128 = Class              #129          // java/lang/Integer\n+  #129 = Utf8               java/lang/Integer\n+  #130 = NameAndType        #131:#35      // numberOfLeadingZeros:(I)I\n+  #131 = Utf8               numberOfLeadingZeros\n+  #132 = Utf8               dictSize\n+  #133 = Utf8               lead\n+  #134 = Utf8               secondBit\n+  #135 = Utf8               getOptionsFromCoder\n+  #136 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n+  #137 = Methodref          #128.#138     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+  #138 = NameAndType        #139:#140     // valueOf:(I)Ljava/lang/Integer;\n+  #139 = Utf8               valueOf\n+  #140 = Utf8               (I)Ljava/lang/Integer;\n+  #141 = Integer            8388608\n+  #142 = Methodref          #1.#143       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.toInt:(Ljava/lang/Object;I)I\n+  #143 = NameAndType        #144:#145     // toInt:(Ljava/lang/Object;I)I\n+  #144 = Utf8               toInt\n+  #145 = Utf8               (Ljava/lang/Object;I)I\n   #146 = Utf8               SourceFile\n   #147 = Utf8               LZMA2Decoder.java\n {\n   org.apache.commons.compress.archivers.sevenz.LZMA2Decoder();\n     descriptor: ()V\n     flags: (0x0000)\n     Code:\n       stack=5, locals=1, args_size=1\n          0: aload_0\n          1: iconst_2\n-         2: anewarray     #1                  // class java/lang/Class\n+         2: anewarray     #8                  // class java/lang/Class\n          5: dup\n          6: iconst_0\n-         7: ldc           #3                  // class org/tukaani/xz/LZMA2Options\n+         7: ldc           #10                 // class org/tukaani/xz/LZMA2Options\n          9: aastore\n         10: dup\n         11: iconst_1\n-        12: ldc           #5                  // class java/lang/Number\n+        12: ldc           #12                 // class java/lang/Number\n         14: aastore\n-        15: invokespecial #7                  // Method org/apache/commons/compress/archivers/sevenz/AbstractCoder.\"<init>\":([Ljava/lang/Class;)V\n+        15: invokespecial #14                 // Method org/apache/commons/compress/archivers/sevenz/AbstractCoder.\"<init>\":([Ljava/lang/Class;)V\n         18: return\n       LineNumberTable:\n         line 32: 0\n         line 33: 18\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      19     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n \n   java.io.InputStream decode(java.lang.String, java.io.InputStream, long, org.apache.commons.compress.archivers.sevenz.Coder, byte[], int) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;Ljava/io/InputStream;JLorg/apache/commons/compress/archivers/sevenz/Coder;[BI)Ljava/io/InputStream;\n     flags: (0x0000)\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=10, args_size=7\n          0: aload_0\n          1: aload         5\n-         3: invokespecial #13                 // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+         3: invokespecial #26                 // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n          6: istore        8\n          8: iload         8\n-        10: invokestatic  #19                 // Method org/tukaani/xz/LZMA2InputStream.getMemoryUsage:(I)I\n+        10: invokestatic  #30                 // Method org/tukaani/xz/LZMA2InputStream.getMemoryUsage:(I)I\n         13: istore        9\n         15: iload         9\n         17: iload         7\n         19: if_icmple     35\n-        22: new           #25                 // class org/apache/commons/compress/MemoryLimitException\n+        22: new           #36                 // class org/apache/commons/compress/MemoryLimitException\n         25: dup\n         26: iload         9\n         28: i2l\n         29: iload         7\n-        31: invokespecial #27                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n+        31: invokespecial #38                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n         34: athrow\n-        35: new           #20                 // class org/tukaani/xz/LZMA2InputStream\n+        35: new           #31                 // class org/tukaani/xz/LZMA2InputStream\n         38: dup\n         39: aload_2\n         40: iload         8\n-        42: invokespecial #30                 // Method org/tukaani/xz/LZMA2InputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        42: invokespecial #41                 // Method org/tukaani/xz/LZMA2InputStream.\"<init>\":(Ljava/io/InputStream;I)V\n         45: areturn\n         46: astore        8\n-        48: new           #35                 // class java/io/IOException\n+        48: new           #24                 // class java/io/IOException\n         51: dup\n         52: aload         8\n-        54: invokespecial #37                 // Method java/io/IOException.\"<init>\":(Ljava/lang/Throwable;)V\n+        54: invokespecial #44                 // Method java/io/IOException.\"<init>\":(Ljava/lang/Throwable;)V\n         57: athrow\n       Exception table:\n          from    to  target type\n              0    45    46   Class java/lang/IllegalArgumentException\n       LineNumberTable:\n         line 39: 0\n         line 40: 8\n         line 41: 15\n         line 42: 22\n         line 44: 35\n         line 45: 46\n         line 46: 48\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            8      38     8 dictionarySize   I\n-           15      31     9 memoryUsageInKb   I\n-           48      10     8    ex   Ljava/lang/IllegalArgumentException;\n             0      58     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n             0      58     1 archiveName   Ljava/lang/String;\n             0      58     2    in   Ljava/io/InputStream;\n             0      58     3 uncompressedLength   J\n             0      58     5 coder   Lorg/apache/commons/compress/archivers/sevenz/Coder;\n             0      58     6 password   [B\n             0      58     7 maxMemoryLimitInKb   I\n+            8      38     8 dictionarySize   I\n+           15      31     9 memoryUsageInKb   I\n+           48      10     8    ex   Ljava/lang/IllegalArgumentException;\n       StackMapTable: number_of_entries = 2\n         frame_type = 253 /* append */\n           offset_delta = 35\n           locals = [ int, int ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 10\n           locals = [ class org/apache/commons/compress/archivers/sevenz/LZMA2Decoder, class java/lang/String, class java/io/InputStream, long, class org/apache/commons/compress/archivers/sevenz/Coder, class \"[B\", int ]\n           stack = [ class java/lang/IllegalArgumentException ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   java.io.OutputStream encode(java.io.OutputStream, java.lang.Object) throws java.io.IOException;\n     descriptor: (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n     flags: (0x0000)\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: aload_2\n-         2: invokespecial #40                 // Method getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-         5: new           #44                 // class org/tukaani/xz/FinishableWrapperOutputStream\n+         2: invokespecial #75                 // Method getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+         5: new           #79                 // class org/tukaani/xz/FinishableWrapperOutputStream\n          8: dup\n          9: aload_1\n-        10: invokespecial #46                 // Method org/tukaani/xz/FinishableWrapperOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n-        13: invokevirtual #49                 // Method org/tukaani/xz/LZMA2Options.getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n+        10: invokespecial #81                 // Method org/tukaani/xz/FinishableWrapperOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+        13: invokevirtual #84                 // Method org/tukaani/xz/LZMA2Options.getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n         16: areturn\n       LineNumberTable:\n         line 53: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      17     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n             0      17     1   out   Ljava/io/OutputStream;\n             0      17     2  opts   Ljava/lang/Object;\n-    Exceptions:\n-      throws java.io.IOException\n \n   private int getDictionarySize(org.apache.commons.compress.archivers.sevenz.Coder) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_1\n-         1: getfield      #53                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+         1: getfield      #92                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n          4: ifnonnull     17\n-         7: new           #35                 // class java/io/IOException\n+         7: new           #24                 // class java/io/IOException\n         10: dup\n-        11: ldc           #59                 // String Missing LZMA2 properties\n-        13: invokespecial #61                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #95                 // String Missing LZMA2 properties\n+        13: invokespecial #97                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_1\n-        18: getfield      #53                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+        18: getfield      #92                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n         21: arraylength\n         22: iconst_1\n         23: if_icmpge     36\n-        26: new           #35                 // class java/io/IOException\n+        26: new           #24                 // class java/io/IOException\n         29: dup\n-        30: ldc           #64                 // String LZMA2 properties too short\n-        32: invokespecial #61                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        30: ldc           #100                // String LZMA2 properties too short\n+        32: invokespecial #97                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         35: athrow\n         36: sipush        255\n         39: aload_1\n-        40: getfield      #53                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+        40: getfield      #92                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n         43: iconst_0\n         44: baload\n         45: iand\n         46: istore_2\n         47: iload_2\n         48: bipush        -64\n         50: iand\n         51: ifeq          64\n-        54: new           #35                 // class java/io/IOException\n+        54: new           #24                 // class java/io/IOException\n         57: dup\n-        58: ldc           #66                 // String Unsupported LZMA2 property bits\n-        60: invokespecial #61                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        58: ldc           #102                // String Unsupported LZMA2 property bits\n+        60: invokespecial #97                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         63: athrow\n         64: iload_2\n         65: bipush        40\n         67: if_icmple     80\n-        70: new           #35                 // class java/io/IOException\n+        70: new           #24                 // class java/io/IOException\n         73: dup\n-        74: ldc           #68                 // String Dictionary larger than 4GiB maximum size\n-        76: invokespecial #61                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        74: ldc           #104                // String Dictionary larger than 4GiB maximum size\n+        76: invokespecial #97                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         79: athrow\n         80: iload_2\n         81: bipush        40\n         83: if_icmpne     88\n         86: iconst_m1\n         87: ireturn\n         88: iconst_2\n@@ -359,32 +361,30 @@\n         frame_type = 17 /* same */\n         frame_type = 18 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 27\n           locals = [ int ]\n         frame_type = 15 /* same */\n         frame_type = 7 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   private int getDictSize(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: instanceof    #3                  // class org/tukaani/xz/LZMA2Options\n+         1: instanceof    #10                 // class org/tukaani/xz/LZMA2Options\n          4: ifeq          15\n          7: aload_1\n-         8: checkcast     #3                  // class org/tukaani/xz/LZMA2Options\n-        11: invokevirtual #70                 // Method org/tukaani/xz/LZMA2Options.getDictSize:()I\n+         8: checkcast     #10                 // class org/tukaani/xz/LZMA2Options\n+        11: invokevirtual #109                // Method org/tukaani/xz/LZMA2Options.getDictSize:()I\n         14: ireturn\n         15: aload_0\n         16: aload_1\n-        17: invokespecial #74                 // Method numberOptionOrDefault:(Ljava/lang/Object;)I\n+        17: invokespecial #112                // Method numberOptionOrDefault:(Ljava/lang/Object;)I\n         20: ireturn\n       LineNumberTable:\n         line 77: 0\n         line 78: 7\n         line 80: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -392,31 +392,33 @@\n             0      21     1  opts   Ljava/lang/Object;\n       StackMapTable: number_of_entries = 1\n         frame_type = 15 /* same */\n \n   private org.tukaani.xz.LZMA2Options getOptions(java.lang.Object) throws java.io.IOException;\n     descriptor: (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_1\n-         1: instanceof    #3                  // class org/tukaani/xz/LZMA2Options\n+         1: instanceof    #10                 // class org/tukaani/xz/LZMA2Options\n          4: ifeq          12\n          7: aload_1\n-         8: checkcast     #3                  // class org/tukaani/xz/LZMA2Options\n+         8: checkcast     #10                 // class org/tukaani/xz/LZMA2Options\n         11: areturn\n-        12: new           #3                  // class org/tukaani/xz/LZMA2Options\n+        12: new           #10                 // class org/tukaani/xz/LZMA2Options\n         15: dup\n-        16: invokespecial #78                 // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+        16: invokespecial #115                // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n         19: astore_2\n         20: aload_2\n         21: aload_0\n         22: aload_1\n-        23: invokespecial #74                 // Method numberOptionOrDefault:(Ljava/lang/Object;)I\n-        26: invokevirtual #81                 // Method org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n+        23: invokespecial #112                // Method numberOptionOrDefault:(Ljava/lang/Object;)I\n+        26: invokevirtual #117                // Method org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n         29: aload_2\n         30: areturn\n       LineNumberTable:\n         line 84: 0\n         line 85: 7\n         line 87: 12\n         line 88: 20\n@@ -424,28 +426,26 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      31     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n             0      31     1  opts   Ljava/lang/Object;\n            20      11     2 options   Lorg/tukaani/xz/LZMA2Options;\n       StackMapTable: number_of_entries = 1\n         frame_type = 12 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   byte[] getOptionsAsProperties(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)[B\n     flags: (0x0000)\n     Code:\n       stack=5, locals=5, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #85                 // Method getDictSize:(Ljava/lang/Object;)I\n+         2: invokespecial #125                // Method getDictSize:(Ljava/lang/Object;)I\n          5: istore_2\n          6: iload_2\n-         7: invokestatic  #87                 // Method java/lang/Integer.numberOfLeadingZeros:(I)I\n+         7: invokestatic  #127                // Method java/lang/Integer.numberOfLeadingZeros:(I)I\n         10: istore_3\n         11: iload_2\n         12: bipush        30\n         14: iload_3\n         15: isub\n         16: iushr\n         17: iconst_2\n@@ -466,50 +466,52 @@\n         36: bastore\n         37: areturn\n       LineNumberTable:\n         line 94: 0\n         line 95: 6\n         line 96: 11\n         line 97: 21\n+        line 98: 26\n+        line 97: 37\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      38     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n             0      38     1  opts   Ljava/lang/Object;\n             6      32     2 dictSize   I\n            11      27     3  lead   I\n            21      17     4 secondBit   I\n \n   java.lang.Object getOptionsFromCoder(org.apache.commons.compress.archivers.sevenz.Coder, java.io.InputStream) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n     flags: (0x0000)\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #13                 // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-         5: invokestatic  #92                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+         2: invokespecial #26                 // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+         5: invokestatic  #137                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n          8: areturn\n       LineNumberTable:\n         line 105: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n             0       9     1 coder   Lorg/apache/commons/compress/archivers/sevenz/Coder;\n             0       9     2    in   Ljava/io/InputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   private int numberOptionOrDefault(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: ldc           #96                 // int 8388608\n-         3: invokestatic  #97                 // Method toInt:(Ljava/lang/Object;I)I\n+         1: ldc           #141                // int 8388608\n+         3: invokestatic  #142                // Method toInt:(Ljava/lang/Object;I)I\n          6: ireturn\n       LineNumberTable:\n         line 109: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n             0       7     1  opts   Ljava/lang/Object;\n"}]}
