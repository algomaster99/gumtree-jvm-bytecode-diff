{"diffoscope-json-version": 1, "source1": "first/CSVParser.class", "source2": "second/CSVParser.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,141 +1,141 @@\n-  SHA-256 checksum cc6288520aa06a42c89782928cece296a3aa076d8cf97b2e54402dab772d7745\n+  SHA-256 checksum 3a03121a5a195ba41b51a127dd34ff435b9da087f78a9709376a879d30c9185c\n   Compiled from \"CSVParser.java\"\n public final class org.apache.commons.csv.CSVParser extends java.lang.Object implements java.lang.Iterable<org.apache.commons.csv.CSVRecord>, java.io.Closeable\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #4                          // org/apache/commons/csv/CSVParser\n   super_class: #72                        // java/lang/Object\n   interfaces: 2, fields: 9, methods: 22, attributes: 3\n Constant pool:\n-    #1 = String             #198          // file\n-    #2 = Methodref          #199.#200     // org/apache/commons/csv/Assertions.notNull:(Ljava/lang/Object;Ljava/lang/String;)V\n+    #1 = String             #194          // file\n+    #2 = Methodref          #195.#196     // org/apache/commons/csv/Assertions.notNull:(Ljava/lang/Object;Ljava/lang/String;)V\n     #3 = String             #128          // format\n-    #4 = Class              #201          // org/apache/commons/csv/CSVParser\n-    #5 = Class              #202          // java/io/InputStreamReader\n-    #6 = Class              #203          // java/io/FileInputStream\n-    #7 = Methodref          #6.#204       // java/io/FileInputStream.\"<init>\":(Ljava/io/File;)V\n-    #8 = Methodref          #5.#205       // java/io/InputStreamReader.\"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n-    #9 = Methodref          #4.#206       // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-   #10 = String             #207          // inputStream\n-   #11 = Methodref          #4.#208       // org/apache/commons/csv/CSVParser.parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-   #12 = String             #209          // path\n-   #13 = Class              #210          // java/nio/file/OpenOption\n-   #14 = Methodref          #211.#212     // java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-   #15 = Methodref          #4.#213       // org/apache/commons/csv/CSVParser.parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-   #16 = String             #214          // string\n-   #17 = Class              #215          // java/io/StringReader\n-   #18 = Methodref          #17.#216      // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n-   #19 = String             #217          // url\n-   #20 = String             #218          // charset\n-   #21 = Methodref          #219.#220     // java/net/URL.openStream:()Ljava/io/InputStream;\n-   #22 = Methodref          #4.#221       // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n-   #23 = Methodref          #72.#222      // java/lang/Object.\"<init>\":()V\n-   #24 = Class              #223          // java/util/ArrayList\n-   #25 = Methodref          #24.#222      // java/util/ArrayList.\"<init>\":()V\n-   #26 = Fieldref           #4.#224       // org/apache/commons/csv/CSVParser.recordList:Ljava/util/List;\n-   #27 = Class              #225          // org/apache/commons/csv/Token\n-   #28 = Methodref          #27.#222      // org/apache/commons/csv/Token.\"<init>\":()V\n-   #29 = Fieldref           #4.#226       // org/apache/commons/csv/CSVParser.reusableToken:Lorg/apache/commons/csv/Token;\n-   #30 = String             #227          // reader\n-   #31 = Fieldref           #4.#228       // org/apache/commons/csv/CSVParser.format:Lorg/apache/commons/csv/CSVFormat;\n-   #32 = Class              #229          // org/apache/commons/csv/Lexer\n-   #33 = Class              #230          // org/apache/commons/csv/ExtendedBufferedReader\n-   #34 = Methodref          #33.#231      // org/apache/commons/csv/ExtendedBufferedReader.\"<init>\":(Ljava/io/Reader;)V\n-   #35 = Methodref          #32.#232      // org/apache/commons/csv/Lexer.\"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-   #36 = Fieldref           #4.#233       // org/apache/commons/csv/CSVParser.lexer:Lorg/apache/commons/csv/Lexer;\n-   #37 = Class              #234          // org/apache/commons/csv/CSVParser$CSVRecordIterator\n-   #38 = Methodref          #37.#235      // org/apache/commons/csv/CSVParser$CSVRecordIterator.\"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n-   #39 = Fieldref           #4.#236       // org/apache/commons/csv/CSVParser.csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n-   #40 = Methodref          #4.#237       // org/apache/commons/csv/CSVParser.createHeaders:()Lorg/apache/commons/csv/CSVParser$Headers;\n-   #41 = Fieldref           #86.#238      // org/apache/commons/csv/CSVParser$Headers.headerMap:Ljava/util/Map;\n-   #42 = Fieldref           #4.#238       // org/apache/commons/csv/CSVParser.headerMap:Ljava/util/Map;\n-   #43 = Fieldref           #86.#239      // org/apache/commons/csv/CSVParser$Headers.headerNames:Ljava/util/List;\n-   #44 = Fieldref           #4.#239       // org/apache/commons/csv/CSVParser.headerNames:Ljava/util/List;\n-   #45 = Fieldref           #4.#240       // org/apache/commons/csv/CSVParser.characterOffset:J\n-   #46 = Fieldref           #4.#241       // org/apache/commons/csv/CSVParser.recordNumber:J\n-   #47 = Fieldref           #27.#242      // org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n-   #48 = Methodref          #77.#243      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #49 = Methodref          #244.#245     // org/apache/commons/csv/CSVFormat.getTrim:()Z\n-   #50 = Methodref          #118.#246     // java/lang/String.trim:()Ljava/lang/String;\n-   #51 = Methodref          #118.#247     // java/lang/String.isEmpty:()Z\n-   #52 = Methodref          #244.#248     // org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z\n-   #53 = Methodref          #244.#249     // org/apache/commons/csv/CSVFormat.getNullString:()Ljava/lang/String;\n-   #54 = Methodref          #118.#250     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #55 = InterfaceMethodref #251.#252     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #56 = Methodref          #32.#253      // org/apache/commons/csv/Lexer.close:()V\n-   #57 = Methodref          #244.#254     // org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z\n-   #58 = Class              #255          // java/util/TreeMap\n-   #59 = Fieldref           #118.#256     // java/lang/String.CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n-   #60 = Methodref          #58.#257      // java/util/TreeMap.\"<init>\":(Ljava/util/Comparator;)V\n-   #61 = Class              #258          // java/util/LinkedHashMap\n-   #62 = Methodref          #61.#222      // java/util/LinkedHashMap.\"<init>\":()V\n-   #63 = Methodref          #244.#259     // org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n-   #64 = Methodref          #4.#260       // org/apache/commons/csv/CSVParser.createEmptyHeaderMap:()Ljava/util/Map;\n-   #65 = Methodref          #4.#261       // org/apache/commons/csv/CSVParser.nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n-   #66 = Methodref          #116.#262     // org/apache/commons/csv/CSVRecord.values:()[Ljava/lang/String;\n-   #67 = Methodref          #244.#263     // org/apache/commons/csv/CSVFormat.getSkipHeaderRecord:()Z\n-   #68 = InterfaceMethodref #264.#265     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-   #69 = Methodref          #244.#266     // org/apache/commons/csv/CSVFormat.getAllowDuplicateHeaderNames:()Z\n-   #70 = Class              #267          // java/lang/IllegalArgumentException\n-   #71 = String             #268          // The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.withAllowDuplicateHeaderNames().\n-   #72 = Class              #269          // java/lang/Object\n-   #73 = Methodref          #270.#271     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n-   #74 = Methodref          #118.#272     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-   #75 = Methodref          #70.#216      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #76 = Methodref          #244.#273     // org/apache/commons/csv/CSVFormat.getAllowMissingColumnNames:()Z\n-   #77 = Class              #274          // java/lang/StringBuilder\n-   #78 = Methodref          #77.#222      // java/lang/StringBuilder.\"<init>\":()V\n-   #79 = String             #275          // A header name is missing in\n-   #80 = Methodref          #77.#276      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #81 = Methodref          #277.#278     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #82 = InterfaceMethodref #264.#279     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #83 = Methodref          #24.#280      // java/util/ArrayList.\"<init>\":(I)V\n-   #84 = Methodref          #281.#282     // java/util/Collections.emptyList:()Ljava/util/List;\n-   #85 = Methodref          #281.#283     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-   #86 = Class              #284          // org/apache/commons/csv/CSVParser$Headers\n-   #87 = Methodref          #86.#285      // org/apache/commons/csv/CSVParser$Headers.\"<init>\":(Ljava/util/Map;Ljava/util/List;)V\n-   #88 = Methodref          #32.#286      // org/apache/commons/csv/Lexer.getCurrentLineNumber:()J\n-   #89 = Methodref          #32.#287      // org/apache/commons/csv/Lexer.getFirstEol:()Ljava/lang/String;\n-   #90 = InterfaceMethodref #264.#288     // java/util/Map.putAll:(Ljava/util/Map;)V\n-   #91 = Methodref          #32.#289      // org/apache/commons/csv/Lexer.isClosed:()Z\n-   #92 = InterfaceMethodref #251.#290     // java/util/List.clear:()V\n-   #93 = Methodref          #32.#291      // org/apache/commons/csv/Lexer.getCharacterPosition:()J\n-   #94 = Methodref          #27.#292      // org/apache/commons/csv/Token.reset:()V\n-   #95 = Methodref          #32.#293      // org/apache/commons/csv/Lexer.nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-   #96 = Fieldref           #124.#294     // org/apache/commons/csv/CSVParser$1.$SwitchMap$org$apache$commons$csv$Token$Type:[I\n-   #97 = Fieldref           #27.#295      // org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n-   #98 = Methodref          #296.#297     // org/apache/commons/csv/Token$Type.ordinal:()I\n-   #99 = Methodref          #4.#298       // org/apache/commons/csv/CSVParser.addRecordValue:(Z)V\n-  #100 = Fieldref           #27.#299      // org/apache/commons/csv/Token.isReady:Z\n-  #101 = Class              #300          // java/io/IOException\n-  #102 = String             #301          // (line\n-  #103 = Methodref          #4.#286       // org/apache/commons/csv/CSVParser.getCurrentLineNumber:()J\n-  #104 = Methodref          #77.#302      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-  #105 = String             #303          // ) invalid parse sequence\n-  #106 = Methodref          #101.#216     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-  #107 = Class              #304          // org/apache/commons/csv/Constants\n-  #108 = Methodref          #77.#305      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-  #109 = Methodref          #77.#306      // java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n-  #110 = Fieldref           #296.#307     // org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n-  #111 = Class              #308          // java/lang/IllegalStateException\n-  #112 = String             #309          // Unexpected Token type:\n-  #113 = Methodref          #77.#310      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #114 = Methodref          #111.#216     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-  #115 = InterfaceMethodref #251.#247     // java/util/List.isEmpty:()Z\n-  #116 = Class              #311          // org/apache/commons/csv/CSVRecord\n-  #117 = InterfaceMethodref #251.#312     // java/util/List.size:()I\n-  #118 = Class              #313          // java/lang/String\n-  #119 = InterfaceMethodref #251.#314     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #120 = Class              #315          // \"[Ljava/lang/String;\"\n-  #121 = Methodref          #116.#316     // org/apache/commons/csv/CSVRecord.\"<init>\":(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n-  #122 = Class              #317          // java/lang/Iterable\n-  #123 = Class              #318          // java/io/Closeable\n-  #124 = Class              #319          // org/apache/commons/csv/CSVParser$1\n+    #4 = Class              #197          // org/apache/commons/csv/CSVParser\n+    #5 = Class              #198          // java/io/InputStreamReader\n+    #6 = Class              #199          // java/io/FileInputStream\n+    #7 = Methodref          #6.#200       // java/io/FileInputStream.\"<init>\":(Ljava/io/File;)V\n+    #8 = Methodref          #5.#201       // java/io/InputStreamReader.\"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n+    #9 = Methodref          #4.#202       // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+   #10 = String             #203          // inputStream\n+   #11 = Methodref          #4.#204       // org/apache/commons/csv/CSVParser.parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+   #12 = String             #205          // path\n+   #13 = Class              #206          // java/nio/file/OpenOption\n+   #14 = Methodref          #207.#208     // java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+   #15 = Methodref          #4.#209       // org/apache/commons/csv/CSVParser.parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+   #16 = String             #210          // string\n+   #17 = Class              #211          // java/io/StringReader\n+   #18 = Methodref          #17.#212      // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n+   #19 = String             #213          // url\n+   #20 = String             #214          // charset\n+   #21 = Methodref          #215.#216     // java/net/URL.openStream:()Ljava/io/InputStream;\n+   #22 = Methodref          #4.#217       // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n+   #23 = Methodref          #72.#218      // java/lang/Object.\"<init>\":()V\n+   #24 = Class              #219          // java/util/ArrayList\n+   #25 = Methodref          #24.#218      // java/util/ArrayList.\"<init>\":()V\n+   #26 = Fieldref           #4.#220       // org/apache/commons/csv/CSVParser.recordList:Ljava/util/List;\n+   #27 = Class              #221          // org/apache/commons/csv/Token\n+   #28 = Methodref          #27.#218      // org/apache/commons/csv/Token.\"<init>\":()V\n+   #29 = Fieldref           #4.#222       // org/apache/commons/csv/CSVParser.reusableToken:Lorg/apache/commons/csv/Token;\n+   #30 = String             #223          // reader\n+   #31 = Fieldref           #4.#224       // org/apache/commons/csv/CSVParser.format:Lorg/apache/commons/csv/CSVFormat;\n+   #32 = Class              #225          // org/apache/commons/csv/Lexer\n+   #33 = Class              #226          // org/apache/commons/csv/ExtendedBufferedReader\n+   #34 = Methodref          #33.#227      // org/apache/commons/csv/ExtendedBufferedReader.\"<init>\":(Ljava/io/Reader;)V\n+   #35 = Methodref          #32.#228      // org/apache/commons/csv/Lexer.\"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+   #36 = Fieldref           #4.#229       // org/apache/commons/csv/CSVParser.lexer:Lorg/apache/commons/csv/Lexer;\n+   #37 = Class              #230          // org/apache/commons/csv/CSVParser$CSVRecordIterator\n+   #38 = Methodref          #37.#231      // org/apache/commons/csv/CSVParser$CSVRecordIterator.\"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n+   #39 = Fieldref           #4.#232       // org/apache/commons/csv/CSVParser.csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n+   #40 = Methodref          #4.#233       // org/apache/commons/csv/CSVParser.createHeaders:()Lorg/apache/commons/csv/CSVParser$Headers;\n+   #41 = Fieldref           #86.#234      // org/apache/commons/csv/CSVParser$Headers.headerMap:Ljava/util/Map;\n+   #42 = Fieldref           #4.#234       // org/apache/commons/csv/CSVParser.headerMap:Ljava/util/Map;\n+   #43 = Fieldref           #86.#235      // org/apache/commons/csv/CSVParser$Headers.headerNames:Ljava/util/List;\n+   #44 = Fieldref           #4.#235       // org/apache/commons/csv/CSVParser.headerNames:Ljava/util/List;\n+   #45 = Fieldref           #4.#236       // org/apache/commons/csv/CSVParser.characterOffset:J\n+   #46 = Fieldref           #4.#237       // org/apache/commons/csv/CSVParser.recordNumber:J\n+   #47 = Fieldref           #27.#238      // org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+   #48 = Methodref          #77.#239      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #49 = Methodref          #240.#241     // org/apache/commons/csv/CSVFormat.getTrim:()Z\n+   #50 = Methodref          #118.#242     // java/lang/String.trim:()Ljava/lang/String;\n+   #51 = Methodref          #118.#243     // java/lang/String.isEmpty:()Z\n+   #52 = Methodref          #240.#244     // org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z\n+   #53 = Methodref          #240.#245     // org/apache/commons/csv/CSVFormat.getNullString:()Ljava/lang/String;\n+   #54 = Methodref          #118.#246     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #55 = InterfaceMethodref #163.#247     // java/util/List.add:(Ljava/lang/Object;)Z\n+   #56 = Methodref          #32.#248      // org/apache/commons/csv/Lexer.close:()V\n+   #57 = Methodref          #240.#249     // org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z\n+   #58 = Class              #250          // java/util/TreeMap\n+   #59 = Fieldref           #118.#251     // java/lang/String.CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n+   #60 = Methodref          #58.#252      // java/util/TreeMap.\"<init>\":(Ljava/util/Comparator;)V\n+   #61 = Class              #253          // java/util/LinkedHashMap\n+   #62 = Methodref          #61.#218      // java/util/LinkedHashMap.\"<init>\":()V\n+   #63 = Methodref          #240.#254     // org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n+   #64 = Methodref          #4.#255       // org/apache/commons/csv/CSVParser.createEmptyHeaderMap:()Ljava/util/Map;\n+   #65 = Methodref          #4.#256       // org/apache/commons/csv/CSVParser.nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n+   #66 = Methodref          #116.#257     // org/apache/commons/csv/CSVRecord.values:()[Ljava/lang/String;\n+   #67 = Methodref          #240.#258     // org/apache/commons/csv/CSVFormat.getSkipHeaderRecord:()Z\n+   #68 = InterfaceMethodref #168.#259     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+   #69 = Methodref          #240.#260     // org/apache/commons/csv/CSVFormat.getAllowDuplicateHeaderNames:()Z\n+   #70 = Class              #261          // java/lang/IllegalArgumentException\n+   #71 = String             #262          // The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.withAllowDuplicateHeaderNames().\n+   #72 = Class              #263          // java/lang/Object\n+   #73 = Methodref          #264.#265     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n+   #74 = Methodref          #118.#266     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+   #75 = Methodref          #70.#212      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #76 = Methodref          #240.#267     // org/apache/commons/csv/CSVFormat.getAllowMissingColumnNames:()Z\n+   #77 = Class              #268          // java/lang/StringBuilder\n+   #78 = Methodref          #77.#218      // java/lang/StringBuilder.\"<init>\":()V\n+   #79 = String             #269          // A header name is missing in\n+   #80 = Methodref          #77.#270      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #81 = Methodref          #271.#272     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #82 = InterfaceMethodref #168.#273     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #83 = Methodref          #24.#274      // java/util/ArrayList.\"<init>\":(I)V\n+   #84 = Methodref          #275.#276     // java/util/Collections.emptyList:()Ljava/util/List;\n+   #85 = Methodref          #275.#277     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+   #86 = Class              #278          // org/apache/commons/csv/CSVParser$Headers\n+   #87 = Methodref          #86.#279      // org/apache/commons/csv/CSVParser$Headers.\"<init>\":(Ljava/util/Map;Ljava/util/List;)V\n+   #88 = Methodref          #32.#280      // org/apache/commons/csv/Lexer.getCurrentLineNumber:()J\n+   #89 = Methodref          #32.#281      // org/apache/commons/csv/Lexer.getFirstEol:()Ljava/lang/String;\n+   #90 = InterfaceMethodref #168.#282     // java/util/Map.putAll:(Ljava/util/Map;)V\n+   #91 = Methodref          #32.#283      // org/apache/commons/csv/Lexer.isClosed:()Z\n+   #92 = InterfaceMethodref #163.#284     // java/util/List.clear:()V\n+   #93 = Methodref          #32.#285      // org/apache/commons/csv/Lexer.getCharacterPosition:()J\n+   #94 = Methodref          #27.#286      // org/apache/commons/csv/Token.reset:()V\n+   #95 = Methodref          #32.#287      // org/apache/commons/csv/Lexer.nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+   #96 = Fieldref           #124.#288     // org/apache/commons/csv/CSVParser$1.$SwitchMap$org$apache$commons$csv$Token$Type:[I\n+   #97 = Fieldref           #27.#289      // org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+   #98 = Methodref          #290.#291     // org/apache/commons/csv/Token$Type.ordinal:()I\n+   #99 = Methodref          #4.#292       // org/apache/commons/csv/CSVParser.addRecordValue:(Z)V\n+  #100 = Fieldref           #27.#293      // org/apache/commons/csv/Token.isReady:Z\n+  #101 = Class              #294          // java/io/IOException\n+  #102 = String             #295          // (line\n+  #103 = Methodref          #4.#280       // org/apache/commons/csv/CSVParser.getCurrentLineNumber:()J\n+  #104 = Methodref          #77.#296      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+  #105 = String             #297          // ) invalid parse sequence\n+  #106 = Methodref          #101.#212     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #107 = Class              #298          // org/apache/commons/csv/Constants\n+  #108 = Methodref          #77.#299      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+  #109 = Methodref          #77.#300      // java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n+  #110 = Fieldref           #290.#301     // org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n+  #111 = Class              #302          // java/lang/IllegalStateException\n+  #112 = String             #303          // Unexpected Token type:\n+  #113 = Methodref          #77.#304      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #114 = Methodref          #111.#212     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+  #115 = InterfaceMethodref #163.#243     // java/util/List.isEmpty:()Z\n+  #116 = Class              #305          // org/apache/commons/csv/CSVRecord\n+  #117 = InterfaceMethodref #163.#306     // java/util/List.size:()I\n+  #118 = Class              #307          // java/lang/String\n+  #119 = InterfaceMethodref #163.#308     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #120 = Class              #309          // \"[Ljava/lang/String;\"\n+  #121 = Methodref          #116.#310     // org/apache/commons/csv/CSVRecord.\"<init>\":(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n+  #122 = Class              #311          // java/lang/Iterable\n+  #123 = Class              #312          // java/io/Closeable\n+  #124 = Class              #313          // org/apache/commons/csv/CSVParser$1\n   #125 = Utf8               InnerClasses\n   #126 = Utf8               Headers\n   #127 = Utf8               CSVRecordIterator\n   #128 = Utf8               format\n   #129 = Utf8               Lorg/apache/commons/csv/CSVFormat;\n   #130 = Utf8               headerMap\n   #131 = Utf8               Ljava/util/Map;\n@@ -166,254 +166,248 @@\n   #156 = Utf8               (Ljava/net/URL;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n   #157 = Utf8               <init>\n   #158 = Utf8               (Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n   #159 = Utf8               (Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n   #160 = Utf8               addRecordValue\n   #161 = Utf8               (Z)V\n   #162 = Utf8               StackMapTable\n-  #163 = Class              #313          // java/lang/String\n-  #164 = Class              #201          // org/apache/commons/csv/CSVParser\n-  #165 = Class              #320          // java/util/List\n-  #166 = Utf8               close\n-  #167 = Utf8               ()V\n-  #168 = Utf8               createEmptyHeaderMap\n-  #169 = Utf8               ()Ljava/util/Map;\n-  #170 = Class              #321          // java/util/Map\n-  #171 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n-  #172 = Utf8               createHeaders\n-  #173 = Utf8               ()Lorg/apache/commons/csv/CSVParser$Headers;\n-  #174 = Utf8               getCurrentLineNumber\n-  #175 = Utf8               ()J\n-  #176 = Utf8               getFirstEndOfLine\n-  #177 = Utf8               ()Ljava/lang/String;\n-  #178 = Utf8               getHeaderMap\n-  #179 = Utf8               getHeaderMapRaw\n-  #180 = Utf8               getHeaderNames\n-  #181 = Utf8               ()Ljava/util/List;\n-  #182 = Utf8               ()Ljava/util/List<Ljava/lang/String;>;\n-  #183 = Utf8               getRecordNumber\n-  #184 = Utf8               getRecords\n-  #185 = Class              #311          // org/apache/commons/csv/CSVRecord\n-  #186 = Utf8               ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n-  #187 = Utf8               isClosed\n-  #188 = Utf8               ()Z\n-  #189 = Utf8               iterator\n-  #190 = Utf8               ()Ljava/util/Iterator;\n-  #191 = Utf8               ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n-  #192 = Utf8               nextRecord\n-  #193 = Utf8               ()Lorg/apache/commons/csv/CSVRecord;\n-  #194 = Class              #274          // java/lang/StringBuilder\n-  #195 = Utf8               Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n-  #196 = Utf8               SourceFile\n-  #197 = Utf8               CSVParser.java\n-  #198 = Utf8               file\n-  #199 = Class              #322          // org/apache/commons/csv/Assertions\n-  #200 = NameAndType        #323:#324     // notNull:(Ljava/lang/Object;Ljava/lang/String;)V\n-  #201 = Utf8               org/apache/commons/csv/CSVParser\n-  #202 = Utf8               java/io/InputStreamReader\n-  #203 = Utf8               java/io/FileInputStream\n-  #204 = NameAndType        #157:#325     // \"<init>\":(Ljava/io/File;)V\n-  #205 = NameAndType        #157:#326     // \"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n-  #206 = NameAndType        #157:#158     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-  #207 = Utf8               inputStream\n-  #208 = NameAndType        #147:#154     // parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-  #209 = Utf8               path\n-  #210 = Utf8               java/nio/file/OpenOption\n-  #211 = Class              #327          // java/nio/file/Files\n-  #212 = NameAndType        #328:#329     // newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #213 = NameAndType        #147:#152     // parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-  #214 = Utf8               string\n-  #215 = Utf8               java/io/StringReader\n-  #216 = NameAndType        #157:#330     // \"<init>\":(Ljava/lang/String;)V\n-  #217 = Utf8               url\n-  #218 = Utf8               charset\n-  #219 = Class              #331          // java/net/URL\n-  #220 = NameAndType        #332:#333     // openStream:()Ljava/io/InputStream;\n-  #221 = NameAndType        #157:#159     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n-  #222 = NameAndType        #157:#167     // \"<init>\":()V\n-  #223 = Utf8               java/util/ArrayList\n-  #224 = NameAndType        #141:#135     // recordList:Ljava/util/List;\n-  #225 = Utf8               org/apache/commons/csv/Token\n-  #226 = NameAndType        #145:#146     // reusableToken:Lorg/apache/commons/csv/Token;\n-  #227 = Utf8               reader\n-  #228 = NameAndType        #128:#129     // format:Lorg/apache/commons/csv/CSVFormat;\n-  #229 = Utf8               org/apache/commons/csv/Lexer\n-  #230 = Utf8               org/apache/commons/csv/ExtendedBufferedReader\n-  #231 = NameAndType        #157:#334     // \"<init>\":(Ljava/io/Reader;)V\n-  #232 = NameAndType        #157:#335     // \"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-  #233 = NameAndType        #137:#138     // lexer:Lorg/apache/commons/csv/Lexer;\n-  #234 = Utf8               org/apache/commons/csv/CSVParser$CSVRecordIterator\n-  #235 = NameAndType        #157:#336     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n-  #236 = NameAndType        #139:#140     // csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n-  #237 = NameAndType        #172:#173     // createHeaders:()Lorg/apache/commons/csv/CSVParser$Headers;\n-  #238 = NameAndType        #130:#131     // headerMap:Ljava/util/Map;\n-  #239 = NameAndType        #134:#135     // headerNames:Ljava/util/List;\n-  #240 = NameAndType        #144:#143     // characterOffset:J\n-  #241 = NameAndType        #142:#143     // recordNumber:J\n-  #242 = NameAndType        #337:#338     // content:Ljava/lang/StringBuilder;\n-  #243 = NameAndType        #339:#177     // toString:()Ljava/lang/String;\n-  #244 = Class              #340          // org/apache/commons/csv/CSVFormat\n-  #245 = NameAndType        #341:#188     // getTrim:()Z\n-  #246 = NameAndType        #342:#177     // trim:()Ljava/lang/String;\n-  #247 = NameAndType        #343:#188     // isEmpty:()Z\n-  #248 = NameAndType        #344:#188     // getTrailingDelimiter:()Z\n-  #249 = NameAndType        #345:#177     // getNullString:()Ljava/lang/String;\n-  #250 = NameAndType        #346:#347     // equals:(Ljava/lang/Object;)Z\n-  #251 = Class              #320          // java/util/List\n-  #252 = NameAndType        #348:#347     // add:(Ljava/lang/Object;)Z\n-  #253 = NameAndType        #166:#167     // close:()V\n-  #254 = NameAndType        #349:#188     // getIgnoreHeaderCase:()Z\n-  #255 = Utf8               java/util/TreeMap\n-  #256 = NameAndType        #350:#351     // CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n-  #257 = NameAndType        #157:#352     // \"<init>\":(Ljava/util/Comparator;)V\n-  #258 = Utf8               java/util/LinkedHashMap\n-  #259 = NameAndType        #353:#354     // getHeader:()[Ljava/lang/String;\n-  #260 = NameAndType        #168:#169     // createEmptyHeaderMap:()Ljava/util/Map;\n-  #261 = NameAndType        #192:#193     // nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n-  #262 = NameAndType        #355:#354     // values:()[Ljava/lang/String;\n-  #263 = NameAndType        #356:#188     // getSkipHeaderRecord:()Z\n-  #264 = Class              #321          // java/util/Map\n-  #265 = NameAndType        #357:#347     // containsKey:(Ljava/lang/Object;)Z\n-  #266 = NameAndType        #358:#188     // getAllowDuplicateHeaderNames:()Z\n-  #267 = Utf8               java/lang/IllegalArgumentException\n-  #268 = Utf8               The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.withAllowDuplicateHeaderNames().\n-  #269 = Utf8               java/lang/Object\n-  #270 = Class              #359          // java/util/Arrays\n-  #271 = NameAndType        #339:#360     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n-  #272 = NameAndType        #128:#361     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #273 = NameAndType        #362:#188     // getAllowMissingColumnNames:()Z\n-  #274 = Utf8               java/lang/StringBuilder\n-  #275 = Utf8               A header name is missing in\n-  #276 = NameAndType        #363:#364     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #277 = Class              #365          // java/lang/Integer\n-  #278 = NameAndType        #366:#367     // valueOf:(I)Ljava/lang/Integer;\n-  #279 = NameAndType        #368:#369     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #280 = NameAndType        #157:#370     // \"<init>\":(I)V\n-  #281 = Class              #371          // java/util/Collections\n-  #282 = NameAndType        #372:#181     // emptyList:()Ljava/util/List;\n-  #283 = NameAndType        #373:#374     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-  #284 = Utf8               org/apache/commons/csv/CSVParser$Headers\n-  #285 = NameAndType        #157:#375     // \"<init>\":(Ljava/util/Map;Ljava/util/List;)V\n-  #286 = NameAndType        #174:#175     // getCurrentLineNumber:()J\n-  #287 = NameAndType        #376:#177     // getFirstEol:()Ljava/lang/String;\n-  #288 = NameAndType        #377:#378     // putAll:(Ljava/util/Map;)V\n-  #289 = NameAndType        #187:#188     // isClosed:()Z\n-  #290 = NameAndType        #379:#167     // clear:()V\n-  #291 = NameAndType        #380:#175     // getCharacterPosition:()J\n-  #292 = NameAndType        #381:#167     // reset:()V\n-  #293 = NameAndType        #382:#383     // nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #294 = NameAndType        #384:#385     // $SwitchMap$org$apache$commons$csv$Token$Type:[I\n-  #295 = NameAndType        #386:#388     // type:Lorg/apache/commons/csv/Token$Type;\n-  #296 = Class              #389          // org/apache/commons/csv/Token$Type\n-  #297 = NameAndType        #390:#391     // ordinal:()I\n-  #298 = NameAndType        #160:#161     // addRecordValue:(Z)V\n-  #299 = NameAndType        #392:#393     // isReady:Z\n-  #300 = Utf8               java/io/IOException\n-  #301 = Utf8               (line\n-  #302 = NameAndType        #363:#394     // append:(J)Ljava/lang/StringBuilder;\n-  #303 = Utf8               ) invalid parse sequence\n-  #304 = Utf8               org/apache/commons/csv/Constants\n-  #305 = NameAndType        #363:#395     // append:(C)Ljava/lang/StringBuilder;\n-  #306 = NameAndType        #363:#396     // append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n-  #307 = NameAndType        #397:#388     // TOKEN:Lorg/apache/commons/csv/Token$Type;\n-  #308 = Utf8               java/lang/IllegalStateException\n-  #309 = Utf8               Unexpected Token type:\n-  #310 = NameAndType        #363:#398     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #311 = Utf8               org/apache/commons/csv/CSVRecord\n-  #312 = NameAndType        #399:#391     // size:()I\n-  #313 = Utf8               java/lang/String\n-  #314 = NameAndType        #400:#401     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #315 = Utf8               [Ljava/lang/String;\n-  #316 = NameAndType        #157:#402     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n-  #317 = Utf8               java/lang/Iterable\n-  #318 = Utf8               java/io/Closeable\n-  #319 = Utf8               org/apache/commons/csv/CSVParser$1\n-  #320 = Utf8               java/util/List\n-  #321 = Utf8               java/util/Map\n-  #322 = Utf8               org/apache/commons/csv/Assertions\n-  #323 = Utf8               notNull\n-  #324 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)V\n-  #325 = Utf8               (Ljava/io/File;)V\n-  #326 = Utf8               (Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n-  #327 = Utf8               java/nio/file/Files\n-  #328 = Utf8               newInputStream\n-  #329 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #330 = Utf8               (Ljava/lang/String;)V\n-  #331 = Utf8               java/net/URL\n-  #332 = Utf8               openStream\n-  #333 = Utf8               ()Ljava/io/InputStream;\n-  #334 = Utf8               (Ljava/io/Reader;)V\n-  #335 = Utf8               (Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-  #336 = Utf8               (Lorg/apache/commons/csv/CSVParser;)V\n-  #337 = Utf8               content\n-  #338 = Utf8               Ljava/lang/StringBuilder;\n-  #339 = Utf8               toString\n-  #340 = Utf8               org/apache/commons/csv/CSVFormat\n-  #341 = Utf8               getTrim\n-  #342 = Utf8               trim\n-  #343 = Utf8               isEmpty\n-  #344 = Utf8               getTrailingDelimiter\n-  #345 = Utf8               getNullString\n-  #346 = Utf8               equals\n-  #347 = Utf8               (Ljava/lang/Object;)Z\n-  #348 = Utf8               add\n-  #349 = Utf8               getIgnoreHeaderCase\n-  #350 = Utf8               CASE_INSENSITIVE_ORDER\n-  #351 = Utf8               Ljava/util/Comparator;\n-  #352 = Utf8               (Ljava/util/Comparator;)V\n-  #353 = Utf8               getHeader\n-  #354 = Utf8               ()[Ljava/lang/String;\n-  #355 = Utf8               values\n-  #356 = Utf8               getSkipHeaderRecord\n-  #357 = Utf8               containsKey\n-  #358 = Utf8               getAllowDuplicateHeaderNames\n-  #359 = Utf8               java/util/Arrays\n-  #360 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n-  #361 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #362 = Utf8               getAllowMissingColumnNames\n-  #363 = Utf8               append\n-  #364 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #365 = Utf8               java/lang/Integer\n-  #366 = Utf8               valueOf\n-  #367 = Utf8               (I)Ljava/lang/Integer;\n-  #368 = Utf8               put\n-  #369 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #370 = Utf8               (I)V\n-  #371 = Utf8               java/util/Collections\n-  #372 = Utf8               emptyList\n-  #373 = Utf8               unmodifiableList\n-  #374 = Utf8               (Ljava/util/List;)Ljava/util/List;\n-  #375 = Utf8               (Ljava/util/Map;Ljava/util/List;)V\n-  #376 = Utf8               getFirstEol\n-  #377 = Utf8               putAll\n-  #378 = Utf8               (Ljava/util/Map;)V\n-  #379 = Utf8               clear\n-  #380 = Utf8               getCharacterPosition\n-  #381 = Utf8               reset\n-  #382 = Utf8               nextToken\n-  #383 = Utf8               (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #384 = Utf8               $SwitchMap$org$apache$commons$csv$Token$Type\n-  #385 = Utf8               [I\n-  #386 = Utf8               type\n-  #387 = Utf8               Type\n-  #388 = Utf8               Lorg/apache/commons/csv/Token$Type;\n-  #389 = Utf8               org/apache/commons/csv/Token$Type\n-  #390 = Utf8               ordinal\n-  #391 = Utf8               ()I\n-  #392 = Utf8               isReady\n-  #393 = Utf8               Z\n-  #394 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #395 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #396 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n-  #397 = Utf8               TOKEN\n-  #398 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #399 = Utf8               size\n-  #400 = Utf8               toArray\n-  #401 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #402 = Utf8               (Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n+  #163 = Class              #314          // java/util/List\n+  #164 = Utf8               close\n+  #165 = Utf8               ()V\n+  #166 = Utf8               createEmptyHeaderMap\n+  #167 = Utf8               ()Ljava/util/Map;\n+  #168 = Class              #315          // java/util/Map\n+  #169 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n+  #170 = Utf8               createHeaders\n+  #171 = Utf8               ()Lorg/apache/commons/csv/CSVParser$Headers;\n+  #172 = Utf8               getCurrentLineNumber\n+  #173 = Utf8               ()J\n+  #174 = Utf8               getFirstEndOfLine\n+  #175 = Utf8               ()Ljava/lang/String;\n+  #176 = Utf8               getHeaderMap\n+  #177 = Utf8               getHeaderMapRaw\n+  #178 = Utf8               getHeaderNames\n+  #179 = Utf8               ()Ljava/util/List;\n+  #180 = Utf8               ()Ljava/util/List<Ljava/lang/String;>;\n+  #181 = Utf8               getRecordNumber\n+  #182 = Utf8               getRecords\n+  #183 = Utf8               ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n+  #184 = Utf8               isClosed\n+  #185 = Utf8               ()Z\n+  #186 = Utf8               iterator\n+  #187 = Utf8               ()Ljava/util/Iterator;\n+  #188 = Utf8               ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n+  #189 = Utf8               nextRecord\n+  #190 = Utf8               ()Lorg/apache/commons/csv/CSVRecord;\n+  #191 = Utf8               Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n+  #192 = Utf8               SourceFile\n+  #193 = Utf8               CSVParser.java\n+  #194 = Utf8               file\n+  #195 = Class              #316          // org/apache/commons/csv/Assertions\n+  #196 = NameAndType        #317:#318     // notNull:(Ljava/lang/Object;Ljava/lang/String;)V\n+  #197 = Utf8               org/apache/commons/csv/CSVParser\n+  #198 = Utf8               java/io/InputStreamReader\n+  #199 = Utf8               java/io/FileInputStream\n+  #200 = NameAndType        #157:#319     // \"<init>\":(Ljava/io/File;)V\n+  #201 = NameAndType        #157:#320     // \"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n+  #202 = NameAndType        #157:#158     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+  #203 = Utf8               inputStream\n+  #204 = NameAndType        #147:#154     // parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+  #205 = Utf8               path\n+  #206 = Utf8               java/nio/file/OpenOption\n+  #207 = Class              #321          // java/nio/file/Files\n+  #208 = NameAndType        #322:#323     // newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+  #209 = NameAndType        #147:#152     // parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+  #210 = Utf8               string\n+  #211 = Utf8               java/io/StringReader\n+  #212 = NameAndType        #157:#324     // \"<init>\":(Ljava/lang/String;)V\n+  #213 = Utf8               url\n+  #214 = Utf8               charset\n+  #215 = Class              #325          // java/net/URL\n+  #216 = NameAndType        #326:#327     // openStream:()Ljava/io/InputStream;\n+  #217 = NameAndType        #157:#159     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n+  #218 = NameAndType        #157:#165     // \"<init>\":()V\n+  #219 = Utf8               java/util/ArrayList\n+  #220 = NameAndType        #141:#135     // recordList:Ljava/util/List;\n+  #221 = Utf8               org/apache/commons/csv/Token\n+  #222 = NameAndType        #145:#146     // reusableToken:Lorg/apache/commons/csv/Token;\n+  #223 = Utf8               reader\n+  #224 = NameAndType        #128:#129     // format:Lorg/apache/commons/csv/CSVFormat;\n+  #225 = Utf8               org/apache/commons/csv/Lexer\n+  #226 = Utf8               org/apache/commons/csv/ExtendedBufferedReader\n+  #227 = NameAndType        #157:#328     // \"<init>\":(Ljava/io/Reader;)V\n+  #228 = NameAndType        #157:#329     // \"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+  #229 = NameAndType        #137:#138     // lexer:Lorg/apache/commons/csv/Lexer;\n+  #230 = Utf8               org/apache/commons/csv/CSVParser$CSVRecordIterator\n+  #231 = NameAndType        #157:#330     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n+  #232 = NameAndType        #139:#140     // csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n+  #233 = NameAndType        #170:#171     // createHeaders:()Lorg/apache/commons/csv/CSVParser$Headers;\n+  #234 = NameAndType        #130:#131     // headerMap:Ljava/util/Map;\n+  #235 = NameAndType        #134:#135     // headerNames:Ljava/util/List;\n+  #236 = NameAndType        #144:#143     // characterOffset:J\n+  #237 = NameAndType        #142:#143     // recordNumber:J\n+  #238 = NameAndType        #331:#332     // content:Ljava/lang/StringBuilder;\n+  #239 = NameAndType        #333:#175     // toString:()Ljava/lang/String;\n+  #240 = Class              #334          // org/apache/commons/csv/CSVFormat\n+  #241 = NameAndType        #335:#185     // getTrim:()Z\n+  #242 = NameAndType        #336:#175     // trim:()Ljava/lang/String;\n+  #243 = NameAndType        #337:#185     // isEmpty:()Z\n+  #244 = NameAndType        #338:#185     // getTrailingDelimiter:()Z\n+  #245 = NameAndType        #339:#175     // getNullString:()Ljava/lang/String;\n+  #246 = NameAndType        #340:#341     // equals:(Ljava/lang/Object;)Z\n+  #247 = NameAndType        #342:#341     // add:(Ljava/lang/Object;)Z\n+  #248 = NameAndType        #164:#165     // close:()V\n+  #249 = NameAndType        #343:#185     // getIgnoreHeaderCase:()Z\n+  #250 = Utf8               java/util/TreeMap\n+  #251 = NameAndType        #344:#345     // CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n+  #252 = NameAndType        #157:#346     // \"<init>\":(Ljava/util/Comparator;)V\n+  #253 = Utf8               java/util/LinkedHashMap\n+  #254 = NameAndType        #347:#348     // getHeader:()[Ljava/lang/String;\n+  #255 = NameAndType        #166:#167     // createEmptyHeaderMap:()Ljava/util/Map;\n+  #256 = NameAndType        #189:#190     // nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n+  #257 = NameAndType        #349:#348     // values:()[Ljava/lang/String;\n+  #258 = NameAndType        #350:#185     // getSkipHeaderRecord:()Z\n+  #259 = NameAndType        #351:#341     // containsKey:(Ljava/lang/Object;)Z\n+  #260 = NameAndType        #352:#185     // getAllowDuplicateHeaderNames:()Z\n+  #261 = Utf8               java/lang/IllegalArgumentException\n+  #262 = Utf8               The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.withAllowDuplicateHeaderNames().\n+  #263 = Utf8               java/lang/Object\n+  #264 = Class              #353          // java/util/Arrays\n+  #265 = NameAndType        #333:#354     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n+  #266 = NameAndType        #128:#355     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #267 = NameAndType        #356:#185     // getAllowMissingColumnNames:()Z\n+  #268 = Utf8               java/lang/StringBuilder\n+  #269 = Utf8               A header name is missing in\n+  #270 = NameAndType        #357:#358     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #271 = Class              #359          // java/lang/Integer\n+  #272 = NameAndType        #360:#361     // valueOf:(I)Ljava/lang/Integer;\n+  #273 = NameAndType        #362:#363     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #274 = NameAndType        #157:#364     // \"<init>\":(I)V\n+  #275 = Class              #365          // java/util/Collections\n+  #276 = NameAndType        #366:#179     // emptyList:()Ljava/util/List;\n+  #277 = NameAndType        #367:#368     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+  #278 = Utf8               org/apache/commons/csv/CSVParser$Headers\n+  #279 = NameAndType        #157:#369     // \"<init>\":(Ljava/util/Map;Ljava/util/List;)V\n+  #280 = NameAndType        #172:#173     // getCurrentLineNumber:()J\n+  #281 = NameAndType        #370:#175     // getFirstEol:()Ljava/lang/String;\n+  #282 = NameAndType        #371:#372     // putAll:(Ljava/util/Map;)V\n+  #283 = NameAndType        #184:#185     // isClosed:()Z\n+  #284 = NameAndType        #373:#165     // clear:()V\n+  #285 = NameAndType        #374:#173     // getCharacterPosition:()J\n+  #286 = NameAndType        #375:#165     // reset:()V\n+  #287 = NameAndType        #376:#377     // nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #288 = NameAndType        #378:#379     // $SwitchMap$org$apache$commons$csv$Token$Type:[I\n+  #289 = NameAndType        #380:#382     // type:Lorg/apache/commons/csv/Token$Type;\n+  #290 = Class              #383          // org/apache/commons/csv/Token$Type\n+  #291 = NameAndType        #384:#385     // ordinal:()I\n+  #292 = NameAndType        #160:#161     // addRecordValue:(Z)V\n+  #293 = NameAndType        #386:#387     // isReady:Z\n+  #294 = Utf8               java/io/IOException\n+  #295 = Utf8               (line\n+  #296 = NameAndType        #357:#388     // append:(J)Ljava/lang/StringBuilder;\n+  #297 = Utf8               ) invalid parse sequence\n+  #298 = Utf8               org/apache/commons/csv/Constants\n+  #299 = NameAndType        #357:#389     // append:(C)Ljava/lang/StringBuilder;\n+  #300 = NameAndType        #357:#390     // append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n+  #301 = NameAndType        #391:#382     // TOKEN:Lorg/apache/commons/csv/Token$Type;\n+  #302 = Utf8               java/lang/IllegalStateException\n+  #303 = Utf8               Unexpected Token type:\n+  #304 = NameAndType        #357:#392     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #305 = Utf8               org/apache/commons/csv/CSVRecord\n+  #306 = NameAndType        #393:#385     // size:()I\n+  #307 = Utf8               java/lang/String\n+  #308 = NameAndType        #394:#395     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #309 = Utf8               [Ljava/lang/String;\n+  #310 = NameAndType        #157:#396     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n+  #311 = Utf8               java/lang/Iterable\n+  #312 = Utf8               java/io/Closeable\n+  #313 = Utf8               org/apache/commons/csv/CSVParser$1\n+  #314 = Utf8               java/util/List\n+  #315 = Utf8               java/util/Map\n+  #316 = Utf8               org/apache/commons/csv/Assertions\n+  #317 = Utf8               notNull\n+  #318 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)V\n+  #319 = Utf8               (Ljava/io/File;)V\n+  #320 = Utf8               (Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n+  #321 = Utf8               java/nio/file/Files\n+  #322 = Utf8               newInputStream\n+  #323 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+  #324 = Utf8               (Ljava/lang/String;)V\n+  #325 = Utf8               java/net/URL\n+  #326 = Utf8               openStream\n+  #327 = Utf8               ()Ljava/io/InputStream;\n+  #328 = Utf8               (Ljava/io/Reader;)V\n+  #329 = Utf8               (Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+  #330 = Utf8               (Lorg/apache/commons/csv/CSVParser;)V\n+  #331 = Utf8               content\n+  #332 = Utf8               Ljava/lang/StringBuilder;\n+  #333 = Utf8               toString\n+  #334 = Utf8               org/apache/commons/csv/CSVFormat\n+  #335 = Utf8               getTrim\n+  #336 = Utf8               trim\n+  #337 = Utf8               isEmpty\n+  #338 = Utf8               getTrailingDelimiter\n+  #339 = Utf8               getNullString\n+  #340 = Utf8               equals\n+  #341 = Utf8               (Ljava/lang/Object;)Z\n+  #342 = Utf8               add\n+  #343 = Utf8               getIgnoreHeaderCase\n+  #344 = Utf8               CASE_INSENSITIVE_ORDER\n+  #345 = Utf8               Ljava/util/Comparator;\n+  #346 = Utf8               (Ljava/util/Comparator;)V\n+  #347 = Utf8               getHeader\n+  #348 = Utf8               ()[Ljava/lang/String;\n+  #349 = Utf8               values\n+  #350 = Utf8               getSkipHeaderRecord\n+  #351 = Utf8               containsKey\n+  #352 = Utf8               getAllowDuplicateHeaderNames\n+  #353 = Utf8               java/util/Arrays\n+  #354 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n+  #355 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #356 = Utf8               getAllowMissingColumnNames\n+  #357 = Utf8               append\n+  #358 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #359 = Utf8               java/lang/Integer\n+  #360 = Utf8               valueOf\n+  #361 = Utf8               (I)Ljava/lang/Integer;\n+  #362 = Utf8               put\n+  #363 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #364 = Utf8               (I)V\n+  #365 = Utf8               java/util/Collections\n+  #366 = Utf8               emptyList\n+  #367 = Utf8               unmodifiableList\n+  #368 = Utf8               (Ljava/util/List;)Ljava/util/List;\n+  #369 = Utf8               (Ljava/util/Map;Ljava/util/List;)V\n+  #370 = Utf8               getFirstEol\n+  #371 = Utf8               putAll\n+  #372 = Utf8               (Ljava/util/Map;)V\n+  #373 = Utf8               clear\n+  #374 = Utf8               getCharacterPosition\n+  #375 = Utf8               reset\n+  #376 = Utf8               nextToken\n+  #377 = Utf8               (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #378 = Utf8               $SwitchMap$org$apache$commons$csv$Token$Type\n+  #379 = Utf8               [I\n+  #380 = Utf8               type\n+  #381 = Utf8               Type\n+  #382 = Utf8               Lorg/apache/commons/csv/Token$Type;\n+  #383 = Utf8               org/apache/commons/csv/Token$Type\n+  #384 = Utf8               ordinal\n+  #385 = Utf8               ()I\n+  #386 = Utf8               isReady\n+  #387 = Utf8               Z\n+  #388 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #389 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #390 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n+  #391 = Utf8               TOKEN\n+  #392 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #393 = Utf8               size\n+  #394 = Utf8               toArray\n+  #395 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #396 = Utf8               (Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n {\n   private final org.apache.commons.csv.CSVFormat format;\n     descriptor: Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final java.util.Map<java.lang.String, java.lang.Integer> headerMap;\n     descriptor: Ljava/util/Map;\n@@ -815,19 +809,22 @@\n         20: goto          30\n         23: new           #61                 // class java/util/LinkedHashMap\n         26: dup\n         27: invokespecial #62                 // Method java/util/LinkedHashMap.\"<init>\":()V\n         30: areturn\n       LineNumberTable:\n         line 443: 0\n+        line 444: 10\n+        line 445: 23\n+        line 443: 30\n       StackMapTable: number_of_entries = 2\n         frame_type = 23 /* same */\n         frame_type = 70 /* same_locals_1_stack_item */\n           stack = [ class java/util/Map ]\n-    Signature: #171                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n+    Signature: #169                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n \n   private org.apache.commons.csv.CSVParser$Headers createHeaders() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/csv/CSVParser$Headers;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=9, args_size=1\n          0: aconst_null\n@@ -1097,39 +1094,39 @@\n         line 562: 0\n         line 563: 7\n         line 565: 9\n         line 566: 14\n         line 567: 24\n       StackMapTable: number_of_entries = 1\n         frame_type = 9 /* same */\n-    Signature: #171                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n+    Signature: #169                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n \n   java.util.Map<java.lang.String, java.lang.Integer> getHeaderMapRaw();\n     descriptor: ()Ljava/util/Map;\n     flags: (0x0000)\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n          1: getfield      #42                 // Field headerMap:Ljava/util/Map;\n          4: areturn\n       LineNumberTable:\n         line 576: 0\n-    Signature: #171                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n+    Signature: #169                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n \n   public java.util.List<java.lang.String> getHeaderNames();\n     descriptor: ()Ljava/util/List;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n          1: getfield      #44                 // Field headerNames:Ljava/util/List;\n          4: areturn\n       LineNumberTable:\n         line 586: 0\n-    Signature: #182                         // ()Ljava/util/List<Ljava/lang/String;>;\n+    Signature: #180                         // ()Ljava/util/List<Ljava/lang/String;>;\n \n   public long getRecordNumber();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n@@ -1170,15 +1167,15 @@\n           locals = [ top, class java/util/List ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 19\n           locals = [ class org/apache/commons/csv/CSVParser, class org/apache/commons/csv/CSVRecord, class java/util/List ]\n           stack = []\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #186                         // ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n+    Signature: #183                         // ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n \n   public boolean isClosed();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -1194,15 +1191,15 @@\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n          1: getfield      #39                 // Field csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n          4: areturn\n       LineNumberTable:\n         line 647: 0\n-    Signature: #191                         // ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n+    Signature: #188                         // ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n \n   org.apache.commons.csv.CSVRecord nextRecord() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/csv/CSVRecord;\n     flags: (0x0000)\n     Code:\n       stack=9, locals=6, args_size=1\n          0: aconst_null\n@@ -1395,14 +1392,14 @@\n         frame_type = 42 /* same */\n         frame_type = 67 /* same_locals_1_stack_item */\n           stack = [ class java/lang/String ]\n         frame_type = 41 /* same */\n     Exceptions:\n       throws java.io.IOException\n }\n-Signature: #195                         // Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n+Signature: #191                         // Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n SourceFile: \"CSVParser.java\"\n InnerClasses:\n   static #124;                            // class org/apache/commons/csv/CSVParser$1\n   private static final #126= #86 of #4;   // Headers=class org/apache/commons/csv/CSVParser$Headers of class org/apache/commons/csv/CSVParser\n   #127= #37 of #4;                        // CSVRecordIterator=class org/apache/commons/csv/CSVParser$CSVRecordIterator of class org/apache/commons/csv/CSVParser\n-  static final #387= #296 of #27;         // Type=class org/apache/commons/csv/Token$Type of class org/apache/commons/csv/Token\n+  static final #381= #290 of #27;         // Type=class org/apache/commons/csv/Token$Type of class org/apache/commons/csv/Token\n"}]}
