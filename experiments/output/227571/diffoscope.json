{"diffoscope-json-version": 1, "source1": "first/GenericWhitespaceCheck.class", "source2": "second/GenericWhitespaceCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -27,126 +27,125 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 172, 173 };\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         this.depth = 0;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        switch (ast.getType()) {\n+    public void visitToken(final DetailAST detailAST) {\n+        switch (detailAST.getType()) {\n             case 172: {\n-                this.processStart(ast);\n+                this.processStart(detailAST);\n                 ++this.depth;\n                 break;\n             }\n             case 173: {\n-                this.processEnd(ast);\n+                this.processEnd(detailAST);\n                 --this.depth;\n                 break;\n             }\n             default: {\n-                throw new IllegalArgumentException(\"Unknown type \" + ast);\n+                throw new IllegalArgumentException(\"Unknown type \" + detailAST);\n             }\n         }\n     }\n     \n-    private void processEnd(final DetailAST ast) {\n-        final int[] line = this.getLineCodePoints(ast.getLineNo() - 1);\n-        final int before = ast.getColumnNo() - 1;\n-        final int after = ast.getColumnNo() + 1;\n-        if (before >= 0 && CommonUtil.isCodePointWhitespace(line, before) && !containsWhitespaceBefore(before, line)) {\n-            this.log(ast, \"ws.preceded\", new Object[] { \">\" });\n+    private void processEnd(final DetailAST detailAST) {\n+        final int[] lineCodePoints = this.getLineCodePoints(detailAST.getLineNo() - 1);\n+        final int n = detailAST.getColumnNo() - 1;\n+        final int n2 = detailAST.getColumnNo() + 1;\n+        if (n >= 0 && CommonUtil.isCodePointWhitespace(lineCodePoints, n) && !containsWhitespaceBefore(n, lineCodePoints)) {\n+            this.log(detailAST, \"ws.preceded\", new Object[] { \">\" });\n         }\n-        if (after < line.length) {\n+        if (n2 < lineCodePoints.length) {\n             if (this.depth == 1) {\n-                this.processSingleGeneric(ast, line, after);\n+                this.processSingleGeneric(detailAST, lineCodePoints, n2);\n             }\n             else {\n-                this.processNestedGenerics(ast, line, after);\n+                this.processNestedGenerics(detailAST, lineCodePoints, n2);\n             }\n         }\n     }\n     \n-    private void processNestedGenerics(final DetailAST ast, final int[] line, final int after) {\n-        final int indexOfAmp = IntStream.range(after, line.length).filter(index -> line[index] == 38).findFirst().orElse(-1);\n-        if (indexOfAmp >= 1 && containsWhitespaceBetween(after, indexOfAmp, line)) {\n-            if (indexOfAmp - after == 0) {\n-                this.log(ast, \"ws.notPreceded\", new Object[] { \"&\" });\n+    private void processNestedGenerics(final DetailAST detailAST, final int[] array, final int startInclusive) {\n+        final int orElse = IntStream.range(startInclusive, array.length).filter(n2 -> array2[n2] == 38).findFirst().orElse(-1);\n+        if (orElse >= 1 && containsWhitespaceBetween(startInclusive, orElse, array)) {\n+            if (orElse - startInclusive == 0) {\n+                this.log(detailAST, \"ws.notPreceded\", new Object[] { \"&\" });\n             }\n-            else if (indexOfAmp - after != 1) {\n-                this.log(ast, \"ws.followed\", new Object[] { \">\" });\n+            else if (orElse - startInclusive != 1) {\n+                this.log(detailAST, \"ws.followed\", new Object[] { \">\" });\n             }\n         }\n-        else if (line[after] == 32) {\n-            this.log(ast, \"ws.followed\", new Object[] { \">\" });\n+        else if (array[startInclusive] == 32) {\n+            this.log(detailAST, \"ws.followed\", new Object[] { \">\" });\n         }\n     }\n     \n-    private void processSingleGeneric(final DetailAST ast, final int[] line, final int after) {\n-        final char charAfter = Character.toChars(line[after])[0];\n-        if (isGenericBeforeMethod(ast) || isGenericBeforeCtor(ast)) {\n-            if (Character.isWhitespace(charAfter)) {\n-                this.log(ast, \"ws.followed\", new Object[] { \">\" });\n+    private void processSingleGeneric(final DetailAST detailAST, final int[] array, final int n) {\n+        final char ch = Character.toChars(array[n])[0];\n+        if (isGenericBeforeMethod(detailAST) || isGenericBeforeCtor(detailAST)) {\n+            if (Character.isWhitespace(ch)) {\n+                this.log(detailAST, \"ws.followed\", new Object[] { \">\" });\n             }\n         }\n-        else if (!isCharacterValidAfterGenericEnd(charAfter)) {\n-            this.log(ast, \"ws.illegalFollow\", new Object[] { \">\" });\n+        else if (!isCharacterValidAfterGenericEnd(ch)) {\n+            this.log(detailAST, \"ws.illegalFollow\", new Object[] { \">\" });\n         }\n     }\n     \n-    private static boolean isGenericBeforeCtor(final DetailAST ast) {\n-        final DetailAST parent = ast.getParent();\n+    private static boolean isGenericBeforeCtor(final DetailAST detailAST) {\n+        final DetailAST parent = detailAST.getParent();\n         return parent.getParent().getType() == 136 && (parent.getNextSibling().getType() == 58 || parent.getNextSibling().getType() == 59);\n     }\n     \n-    private static boolean isGenericBeforeMethod(final DetailAST ast) {\n-        return ast.getParent().getParent().getParent().getType() == 27 || isAfterMethodReference(ast);\n+    private static boolean isGenericBeforeMethod(final DetailAST detailAST) {\n+        return detailAST.getParent().getParent().getParent().getType() == 27 || isAfterMethodReference(detailAST);\n     }\n     \n-    private static boolean isAfterMethodReference(final DetailAST genericEnd) {\n-        return genericEnd.getParent().getParent().getType() == 180;\n+    private static boolean isAfterMethodReference(final DetailAST detailAST) {\n+        return detailAST.getParent().getParent().getType() == 180;\n     }\n     \n-    private void processStart(final DetailAST ast) {\n-        final int[] line = this.getLineCodePoints(ast.getLineNo() - 1);\n-        final int before = ast.getColumnNo() - 1;\n-        final int after = ast.getColumnNo() + 1;\n-        if (before >= 0) {\n-            final DetailAST parent = ast.getParent();\n-            final DetailAST grandparent = parent.getParent();\n-            if (grandparent.getType() == 8 || grandparent.getType() == 9 || isGenericBeforeCtor(ast)) {\n-                if (!CommonUtil.isCodePointWhitespace(line, before)) {\n-                    this.log(ast, \"ws.notPreceded\", new Object[] { \"<\" });\n+    private void processStart(final DetailAST detailAST) {\n+        final int[] lineCodePoints = this.getLineCodePoints(detailAST.getLineNo() - 1);\n+        final int n = detailAST.getColumnNo() - 1;\n+        final int n2 = detailAST.getColumnNo() + 1;\n+        if (n >= 0) {\n+            final DetailAST parent = detailAST.getParent().getParent();\n+            if (parent.getType() == 8 || parent.getType() == 9 || isGenericBeforeCtor(detailAST)) {\n+                if (!CommonUtil.isCodePointWhitespace(lineCodePoints, n)) {\n+                    this.log(detailAST, \"ws.notPreceded\", new Object[] { \"<\" });\n                 }\n             }\n-            else if (CommonUtil.isCodePointWhitespace(line, before) && !containsWhitespaceBefore(before, line)) {\n-                this.log(ast, \"ws.preceded\", new Object[] { \"<\" });\n+            else if (CommonUtil.isCodePointWhitespace(lineCodePoints, n) && !containsWhitespaceBefore(n, lineCodePoints)) {\n+                this.log(detailAST, \"ws.preceded\", new Object[] { \"<\" });\n             }\n         }\n-        if (after < line.length && CommonUtil.isCodePointWhitespace(line, after)) {\n-            this.log(ast, \"ws.followed\", new Object[] { \"<\" });\n+        if (n2 < lineCodePoints.length && CommonUtil.isCodePointWhitespace(lineCodePoints, n2)) {\n+            this.log(detailAST, \"ws.followed\", new Object[] { \"<\" });\n         }\n     }\n     \n-    private static boolean containsWhitespaceBetween(final int fromIndex, final int toIndex, final int... line) {\n-        boolean result = true;\n-        for (int i = fromIndex; i < toIndex; ++i) {\n-            if (!CommonUtil.isCodePointWhitespace(line, i)) {\n-                result = false;\n+    private static boolean containsWhitespaceBetween(final int n, final int n2, final int... array) {\n+        boolean b = true;\n+        for (int i = n; i < n2; ++i) {\n+            if (!CommonUtil.isCodePointWhitespace(array, i)) {\n+                b = false;\n                 break;\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private static boolean containsWhitespaceBefore(final int before, final int... line) {\n-        return before != 0 && CodePointUtil.hasWhitespaceBefore(before, line);\n+    private static boolean containsWhitespaceBefore(final int n, final int... array) {\n+        return n != 0 && CodePointUtil.hasWhitespaceBefore(n, array);\n     }\n     \n-    private static boolean isCharacterValidAfterGenericEnd(final char charAfter) {\n-        return charAfter == '(' || charAfter == ')' || charAfter == ',' || charAfter == '[' || charAfter == '.' || charAfter == ':' || charAfter == ';' || Character.isWhitespace(charAfter);\n+    private static boolean isCharacterValidAfterGenericEnd(final char ch) {\n+        return ch == '(' || ch == ')' || ch == ',' || ch == '[' || ch == '.' || ch == ':' || ch == ';' || Character.isWhitespace(ch);\n     }\n }\n"}]}
