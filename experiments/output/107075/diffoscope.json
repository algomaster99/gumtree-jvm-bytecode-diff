{"diffoscope-json-version": 1, "source1": "first/ReversedLinesFileReader$FilePart.class", "source2": "second/ReversedLinesFileReader$FilePart.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,18 +13,18 @@\n     private int currentLastBytePos;\n     \n     private FilePart(final ReversedLinesFileReader this$0, final long no, final int length, final byte[] leftOverOfLastFilePart) throws IOException {\n         this.this$0 = this$0;\n         this.no = no;\n         final int dataLength = length + ((leftOverOfLastFilePart != null) ? leftOverOfLastFilePart.length : 0);\n         this.data = new byte[dataLength];\n-        final long off = (no - 1L) * ReversedLinesFileReader.access$000(this$0);\n+        final long off = (no - 1L) * ReversedLinesFileReader.access$0(this$0);\n         if (no > 0L) {\n-            ReversedLinesFileReader.access$100(this$0).position(off);\n-            final int countRead = ReversedLinesFileReader.access$100(this$0).read(ByteBuffer.wrap(this.data, 0, length));\n+            ReversedLinesFileReader.access$1(this$0).position(off);\n+            final int countRead = ReversedLinesFileReader.access$1(this$0).read(ByteBuffer.wrap(this.data, 0, length));\n             if (countRead != length) {\n                 throw new IllegalStateException(\"Count of requested bytes and actually read bytes don't match\");\n             }\n         }\n         if (leftOverOfLastFilePart != null) {\n             System.arraycopy(leftOverOfLastFilePart, 0, this.data, length, leftOverOfLastFilePart.length);\n         }\n@@ -41,15 +41,17 @@\n         else {\n             this.leftOver = null;\n         }\n         this.currentLastBytePos = -1;\n     }\n     \n     private int getNewLineMatchByteCount(final byte[] data, final int i) {\n-        for (final byte[] newLineSequence : ReversedLinesFileReader.access$200(this.this$0)) {\n+        byte[][] access$2;\n+        for (int length = (access$2 = ReversedLinesFileReader.access$2(this.this$0)).length, l = 0; l < length; ++l) {\n+            final byte[] newLineSequence = access$2[l];\n             boolean match = true;\n             for (int j = newLineSequence.length - 1; j >= 0; --j) {\n                 final int k = i + j - (newLineSequence.length - 1);\n                 match &= (k >= 0 && data[k] == newLineSequence[j]);\n             }\n             if (match) {\n                 return newLineSequence.length;\n@@ -59,53 +61,53 @@\n     }\n     \n     private String readLine() {\n         String line = null;\n         final boolean isLastFilePart = this.no == 1L;\n         int i = this.currentLastBytePos;\n         while (i > -1) {\n-            if (!isLastFilePart && i < ReversedLinesFileReader.access$300(this.this$0)) {\n+            if (!isLastFilePart && i < ReversedLinesFileReader.access$3(this.this$0)) {\n                 this.createLeftOver();\n                 break;\n             }\n             final int newLineMatchByteCount;\n             if ((newLineMatchByteCount = this.getNewLineMatchByteCount(this.data, i)) > 0) {\n                 final int lineStart = i + 1;\n                 final int lineLengthBytes = this.currentLastBytePos - lineStart + 1;\n                 if (lineLengthBytes < 0) {\n                     throw new IllegalStateException(\"Unexpected negative line length=\" + lineLengthBytes);\n                 }\n                 final byte[] lineData = IOUtils.byteArray(lineLengthBytes);\n                 System.arraycopy(this.data, lineStart, lineData, 0, lineLengthBytes);\n-                line = new String(lineData, ReversedLinesFileReader.access$400(this.this$0));\n+                line = new String(lineData, ReversedLinesFileReader.access$4(this.this$0));\n                 this.currentLastBytePos = i - newLineMatchByteCount;\n                 break;\n             }\n             else {\n-                i -= ReversedLinesFileReader.access$500(this.this$0);\n+                i -= ReversedLinesFileReader.access$5(this.this$0);\n                 if (i < 0) {\n                     this.createLeftOver();\n                     break;\n                 }\n                 continue;\n             }\n         }\n         if (isLastFilePart && this.leftOver != null) {\n-            line = new String(this.leftOver, ReversedLinesFileReader.access$400(this.this$0));\n+            line = new String(this.leftOver, ReversedLinesFileReader.access$4(this.this$0));\n             this.leftOver = null;\n         }\n         return line;\n     }\n     \n     private FilePart rollOver() throws IOException {\n         if (this.currentLastBytePos > -1) {\n             throw new IllegalStateException(\"Current currentLastCharPos unexpectedly positive... last readLine() should have returned something! currentLastCharPos=\" + this.currentLastBytePos);\n         }\n         if (this.no > 1L) {\n-            return new FilePart(this.this$0, this.no - 1L, ReversedLinesFileReader.access$000(this.this$0), this.leftOver);\n+            return new FilePart(this.this$0, this.no - 1L, ReversedLinesFileReader.access$0(this.this$0), this.leftOver);\n         }\n         if (this.leftOver != null) {\n-            throw new IllegalStateException(\"Unexpected leftover of the last block: leftOverOfThisFilePart=\" + new String(this.leftOver, ReversedLinesFileReader.access$400(this.this$0)));\n+            throw new IllegalStateException(\"Unexpected leftover of the last block: leftOverOfThisFilePart=\" + new String(this.leftOver, ReversedLinesFileReader.access$4(this.this$0)));\n         }\n         return null;\n     }\n }\n"}]}
