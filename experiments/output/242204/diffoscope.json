{"diffoscope-json-version": 1, "source1": "first/IINC.class", "source2": "second/IINC.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,60 +9,60 @@\n {\n     private boolean wide;\n     private int c;\n     \n     IINC() {\n     }\n     \n-    public IINC(final int n, final int c) {\n+    public IINC(final int index, final int increment) {\n         super.setOpcode((short)132);\n         super.setLength(3);\n-        this.setIndex(n);\n-        this.setIncrement(c);\n+        this.setIndex(index);\n+        this.setIncrement(increment);\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitLocalVariableInstruction((LocalVariableInstruction)this);\n-        v.visitIINC(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitLocalVariableInstruction((LocalVariableInstruction)this);\n+        visitor.visitIINC(this);\n     }\n     \n-    public void dump(final DataOutputStream out) throws IOException {\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n         if (this.wide) {\n-            out.writeByte(196);\n+            dataOutputStream.writeByte(196);\n         }\n-        out.writeByte(super.getOpcode());\n+        dataOutputStream.writeByte(super.getOpcode());\n         if (this.wide) {\n-            out.writeShort(super.getIndex());\n-            out.writeShort(this.c);\n+            dataOutputStream.writeShort(super.getIndex());\n+            dataOutputStream.writeShort(this.c);\n         }\n         else {\n-            out.writeByte(super.getIndex());\n-            out.writeByte(this.c);\n+            dataOutputStream.writeByte(super.getIndex());\n+            dataOutputStream.writeByte(this.c);\n         }\n     }\n     \n     public final int getIncrement() {\n         return this.c;\n     }\n     \n-    public Type getType(final ConstantPoolGen cp) {\n+    public Type getType(final ConstantPoolGen constantPoolGen) {\n         return (Type)Type.INT;\n     }\n     \n-    protected void initFromFile(final ByteSequence bytes, final boolean wide) throws IOException {\n+    protected void initFromFile(final ByteSequence byteSequence, final boolean wide) throws IOException {\n         this.wide = wide;\n         if (wide) {\n             super.setLength(6);\n-            super.setIndexOnly(bytes.readUnsignedShort());\n-            this.c = bytes.readShort();\n+            super.setIndexOnly(byteSequence.readUnsignedShort());\n+            this.c = byteSequence.readShort();\n         }\n         else {\n             super.setLength(3);\n-            super.setIndexOnly(bytes.readUnsignedByte());\n-            this.c = bytes.readByte();\n+            super.setIndexOnly(byteSequence.readUnsignedByte());\n+            this.c = byteSequence.readByte();\n         }\n     }\n     \n     public final void setIncrement(final int c) {\n         this.c = c;\n         this.setWide();\n     }\n@@ -87,11 +87,11 @@\n             super.setLength(6);\n         }\n         else {\n             super.setLength(3);\n         }\n     }\n     \n-    public String toString(final boolean verbose) {\n-        return super.toString(verbose) + \" \" + this.c;\n+    public String toString(final boolean b) {\n+        return super.toString(b) + \" \" + this.c;\n     }\n }\n"}]}
