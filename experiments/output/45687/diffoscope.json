{"diffoscope-json-version": 1, "source1": "first/Tailer.class", "source2": "second/Tailer.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,14 +19,18 @@\n     private final Charset charset;\n     private final long delayMillis;\n     private final boolean end;\n     private final TailerListener listener;\n     private final boolean reOpen;\n     private volatile boolean run;\n     \n+    static {\n+        DEFAULT_CHARSET = Charset.defaultCharset();\n+    }\n+    \n     public Tailer(final File file, final TailerListener listener) {\n         this(file, listener, 1000L);\n     }\n     \n     public Tailer(final File file, final TailerListener listener, final long delayMillis) {\n         this(file, listener, delayMillis, false);\n     }\n@@ -104,19 +108,22 @@\n     \n     @Override\n     public void run() {\n         RandomAccessFile reader = null;\n         try {\n             long last = 0L;\n             long position = 0L;\n-            while (this.getRun() && reader == null) {\n+            while (this.getRun()) {\n+                if (reader != null) {\n+                    break;\n+                }\n                 try {\n                     reader = new RandomAccessFile(this.file, \"r\");\n                 }\n-                catch (final FileNotFoundException e) {\n+                catch (final FileNotFoundException ex) {\n                     this.listener.fileNotFound();\n                 }\n                 if (reader == null) {\n                     Thread.sleep(this.delayMillis);\n                 }\n                 else {\n                     position = (this.end ? this.file.length() : 0L);\n@@ -125,119 +132,166 @@\n                 }\n             }\n             while (this.getRun()) {\n                 final boolean newer = FileUtils.isFileNewer(this.file, last);\n                 final long length = this.file.length();\n                 if (length < position) {\n                     this.listener.fileRotated();\n-                    try (final RandomAccessFile save = reader) {\n-                        reader = new RandomAccessFile(this.file, \"r\");\n+                    try {\n+                        Throwable t = null;\n                         try {\n-                            this.readLines(save);\n+                            final RandomAccessFile save = reader;\n+                            try {\n+                                reader = new RandomAccessFile(this.file, \"r\");\n+                                try {\n+                                    this.readLines(save);\n+                                }\n+                                catch (final IOException ioe) {\n+                                    this.listener.handle((Exception)ioe);\n+                                }\n+                                position = 0L;\n+                            }\n+                            finally {\n+                                if (save != null) {\n+                                    save.close();\n+                                }\n+                            }\n                         }\n-                        catch (final IOException ioe) {\n-                            this.listener.handle((Exception)ioe);\n+                        finally {\n+                            if (t == null) {\n+                                final Throwable exception;\n+                                t = exception;\n+                            }\n+                            else {\n+                                final Throwable exception;\n+                                if (t != exception) {\n+                                    t.addSuppressed(exception);\n+                                }\n+                            }\n                         }\n-                        position = 0L;\n                     }\n-                    catch (final FileNotFoundException e2) {\n+                    catch (final FileNotFoundException ex2) {\n                         this.listener.fileNotFound();\n                         Thread.sleep(this.delayMillis);\n-                    }\n-                }\n-                else {\n-                    if (length > position) {\n-                        position = this.readLines(reader);\n-                        last = this.file.lastModified();\n-                    }\n-                    else if (newer) {\n-                        position = 0L;\n-                        reader.seek(position);\n-                        position = this.readLines(reader);\n-                        last = this.file.lastModified();\n-                    }\n-                    if (this.reOpen && reader != null) {\n-                        reader.close();\n-                    }\n-                    Thread.sleep(this.delayMillis);\n-                    if (!this.getRun() || !this.reOpen) {\n                         continue;\n                     }\n+                }\n+                if (length > position) {\n+                    position = this.readLines(reader);\n+                    last = this.file.lastModified();\n+                }\n+                else if (newer) {\n+                    position = 0L;\n+                    reader.seek(position);\n+                    position = this.readLines(reader);\n+                    last = this.file.lastModified();\n+                }\n+                if (this.reOpen && reader != null) {\n+                    reader.close();\n+                }\n+                Thread.sleep(this.delayMillis);\n+                if (this.getRun() && this.reOpen) {\n                     reader = new RandomAccessFile(this.file, \"r\");\n                     reader.seek(position);\n                 }\n             }\n         }\n-        catch (final InterruptedException e3) {\n+        catch (final InterruptedException e) {\n             Thread.currentThread().interrupt();\n-            this.listener.handle((Exception)e3);\n+            this.listener.handle((Exception)e);\n         }\n-        catch (final Exception e4) {\n-            this.listener.handle(e4);\n+        catch (final Exception e2) {\n+            this.listener.handle(e2);\n         }\n         finally {\n             try {\n                 if (reader != null) {\n                     reader.close();\n                 }\n             }\n-            catch (final IOException e5) {\n-                this.listener.handle((Exception)e5);\n+            catch (final IOException e3) {\n+                this.listener.handle((Exception)e3);\n             }\n             this.stop();\n         }\n+        try {\n+            if (reader != null) {\n+                reader.close();\n+            }\n+        }\n+        catch (final IOException e3) {\n+            this.listener.handle((Exception)e3);\n+        }\n+        this.stop();\n     }\n     \n     public void stop() {\n         this.run = false;\n     }\n     \n     private long readLines(final RandomAccessFile reader) throws IOException {\n-        try (final ByteArrayOutputStream lineBuf = new ByteArrayOutputStream(64)) {\n-            long rePos;\n-            long pos = rePos = reader.getFilePointer();\n-            boolean seenCR = false;\n-            int num;\n-            while (this.getRun() && (num = reader.read(this.inbuf)) != -1) {\n-                for (int i = 0; i < num; ++i) {\n-                    final byte ch = this.inbuf[i];\n-                    switch (ch) {\n-                        case 10: {\n-                            seenCR = false;\n-                            this.listener.handle(new String(lineBuf.toByteArray(), this.charset));\n-                            lineBuf.reset();\n-                            rePos = pos + i + 1L;\n-                            break;\n-                        }\n-                        case 13: {\n-                            if (seenCR) {\n-                                lineBuf.write(13);\n-                            }\n-                            seenCR = true;\n-                            break;\n-                        }\n-                        default: {\n-                            if (seenCR) {\n+        Throwable t = null;\n+        try {\n+            final ByteArrayOutputStream lineBuf = new ByteArrayOutputStream(64);\n+            try {\n+                long rePos;\n+                long pos = rePos = reader.getFilePointer();\n+                boolean seenCR = false;\n+                int num;\n+                while (this.getRun() && (num = reader.read(this.inbuf)) != -1) {\n+                    for (int i = 0; i < num; ++i) {\n+                        final byte ch = this.inbuf[i];\n+                        switch (ch) {\n+                            case 10: {\n                                 seenCR = false;\n                                 this.listener.handle(new String(lineBuf.toByteArray(), this.charset));\n                                 lineBuf.reset();\n                                 rePos = pos + i + 1L;\n+                                break;\n+                            }\n+                            case 13: {\n+                                if (seenCR) {\n+                                    lineBuf.write(13);\n+                                }\n+                                seenCR = true;\n+                                break;\n+                            }\n+                            default: {\n+                                if (seenCR) {\n+                                    seenCR = false;\n+                                    this.listener.handle(new String(lineBuf.toByteArray(), this.charset));\n+                                    lineBuf.reset();\n+                                    rePos = pos + i + 1L;\n+                                }\n+                                lineBuf.write(ch);\n+                                break;\n                             }\n-                            lineBuf.write(ch);\n-                            break;\n                         }\n                     }\n+                    pos = reader.getFilePointer();\n+                }\n+                reader.seek(rePos);\n+                if (this.listener instanceof TailerListenerAdapter) {\n+                    ((TailerListenerAdapter)this.listener).endOfFileReached();\n                 }\n-                pos = reader.getFilePointer();\n+                return rePos;\n             }\n-            reader.seek(rePos);\n-            if (this.listener instanceof TailerListenerAdapter) {\n-                ((TailerListenerAdapter)this.listener).endOfFileReached();\n+            finally {\n+                if (lineBuf != null) {\n+                    lineBuf.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n-            return rePos;\n         }\n-    }\n-    \n-    static {\n-        DEFAULT_CHARSET = Charset.defaultCharset();\n     }\n }\n"}]}
