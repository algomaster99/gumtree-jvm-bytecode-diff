{"diffoscope-json-version": 1, "source1": "first/HuffmanDecoder.class", "source2": "second/HuffmanDecoder.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,341 +1,341 @@\n-  SHA-256 checksum e9f76837569d2b46f42f8cfa87c7179bf7ff4103a2a76f3c28752209811d953e\n+  SHA-256 checksum a1edcccb2373082becd3d929aa1df802405d36298426d58f5f053bd8afccb3e0\n   Compiled from \"HuffmanDecoder.java\"\n class org.apache.commons.compress.compressors.deflate64.HuffmanDecoder implements java.io.Closeable\n   minor version: 0\n   major version: 53\n   flags: (0x0020) ACC_SUPER\n-  this_class: #85                         // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  super_class: #86                        // java/lang/Object\n+  this_class: #2                          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  super_class: #36                        // java/lang/Object\n   interfaces: 1, fields: 10, methods: 23, attributes: 3\n Constant pool:\n-    #1 = Fieldref           #85.#206      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.DISTANCE_TABLE:[I\n-    #2 = Fieldref           #85.#207      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.RUN_LENGTH_TABLE:[S\n-    #3 = Methodref          #85.#208      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.nextSymbol:(Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n-    #4 = Methodref          #85.#209      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-    #5 = Fieldref           #85.#210      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.in:Ljava/io/InputStream;\n-    #6 = Fieldref           #85.#211      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.memory:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n-    #7 = Methodref          #85.#212      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readBits:(I)J\n-    #8 = Fieldref           #85.#213      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.reader:Lorg/apache/commons/compress/utils/BitInputStream;\n-    #9 = Methodref          #86.#214      // java/lang/Object.\"<init>\":()V\n-   #10 = Fieldref           #85.#215      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.finalBlock:Z\n-   #11 = Class              #216          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory\n-   #12 = Methodref          #11.#217      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-   #13 = Class              #218          // org/apache/commons/compress/utils/BitInputStream\n-   #14 = Fieldref           #219.#220     // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #15 = Methodref          #13.#221      // org/apache/commons/compress/utils/BitInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-   #16 = Class              #222          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState\n-   #17 = Methodref          #16.#223      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-   #18 = Fieldref           #85.#224      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n-   #19 = Methodref          #85.#225      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.decode:([BII)I\n-   #20 = Methodref          #95.#226      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.hasData:()Z\n-   #21 = Methodref          #95.#227      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.state:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-   #22 = Fieldref           #228.#229     // org/apache/commons/compress/compressors/deflate64/HuffmanState.INITIAL:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-   #23 = Methodref          #85.#230      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.switchToUncompressedState:()V\n-   #24 = Class              #231          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n-   #25 = Fieldref           #228.#232     // org/apache/commons/compress/compressors/deflate64/HuffmanState.FIXED_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-   #26 = Fieldref           #85.#233      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.FIXED_LITERALS:[I\n-   #27 = Fieldref           #85.#234      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.FIXED_DISTANCE:[I\n-   #28 = Methodref          #24.#235      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n-   #29 = Methodref          #85.#236      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readDynamicTables:()[[I\n-   #30 = Fieldref           #228.#237     // org/apache/commons/compress/compressors/deflate64/HuffmanState.DYNAMIC_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-   #31 = Class              #238          // java/lang/IllegalStateException\n-   #32 = InvokeDynamic      #0:#242       // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n-   #33 = Methodref          #31.#243      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #34 = Methodref          #95.#244      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.read:([BII)I\n-   #35 = Methodref          #13.#245      // org/apache/commons/compress/utils/BitInputStream.getBytesRead:()J\n-   #36 = Methodref          #13.#246      // org/apache/commons/compress/utils/BitInputStream.alignWithByteBoundary:()V\n-   #37 = Long               65535l\n-   #39 = String             #247          // Illegal LEN / NLEN values\n-   #40 = Class              #248          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState\n-   #41 = Methodref          #40.#249      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-   #42 = Class              #100          // \"[I\"\n-   #43 = Long               257l\n-   #45 = Methodref          #85.#250      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.populateDynamicTables:(Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n-   #46 = Methodref          #95.#251      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.available:()I\n-   #47 = Fieldref           #60.#252      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.literal:I\n-   #48 = Methodref          #85.#253      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-   #49 = Fieldref           #60.#254      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-   #50 = Fieldref           #60.#255      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-   #51 = Long               4l\n-   #53 = Fieldref           #85.#256      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.CODE_LENGTHS_ORDER:[I\n-   #54 = Long               3l\n-   #56 = Long               11l\n-   #58 = Methodref          #257.#258     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #59 = Methodref          #85.#259      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.getCodes:([I)[I\n-   #60 = Class              #260          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n-   #61 = Methodref          #60.#261      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.\"<init>\":(ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-   #62 = Methodref          #60.#262      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.left:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-   #63 = Methodref          #60.#263      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.right:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-   #64 = Methodref          #60.#264      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leaf:(I)V\n-   #65 = Methodref          #265.#266     // java/lang/Math.max:(II)I\n-   #66 = Methodref          #267.#268     // java/util/Arrays.copyOf:([II)[I\n-   #67 = Methodref          #13.#212      // org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n-   #68 = Long               -1l\n-   #70 = Class              #269          // java/io/EOFException\n-   #71 = String             #270          // Truncated Deflate64 Stream\n-   #72 = Methodref          #70.#243      // java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n-   #73 = Integer            32794\n-   #74 = Integer            49178\n-   #75 = Integer            65563\n-   #76 = Integer            98331\n-   #77 = Integer            131100\n-   #78 = Integer            196636\n-   #79 = Integer            262173\n-   #80 = Integer            393245\n-   #81 = Integer            524318\n-   #82 = Integer            786462\n-   #83 = Methodref          #267.#271     // java/util/Arrays.fill:([IIII)V\n-   #84 = Methodref          #267.#272     // java/util/Arrays.fill:([II)V\n-   #85 = Class              #273          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-   #86 = Class              #274          // java/lang/Object\n-   #87 = Class              #275          // java/io/Closeable\n-   #88 = Class              #276          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1\n-   #89 = Utf8               InnerClasses\n-   #90 = Utf8               DecodingMemory\n-   #91 = Utf8               BinaryTreeNode\n-   #92 = Utf8               HuffmanCodes\n-   #93 = Utf8               InitialState\n-   #94 = Utf8               UncompressedState\n-   #95 = Class              #277          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState\n-   #96 = Utf8               DecoderState\n-   #97 = Utf8               RUN_LENGTH_TABLE\n-   #98 = Utf8               [S\n-   #99 = Utf8               DISTANCE_TABLE\n-  #100 = Utf8               [I\n-  #101 = Utf8               CODE_LENGTHS_ORDER\n-  #102 = Utf8               FIXED_LITERALS\n-  #103 = Utf8               FIXED_DISTANCE\n-  #104 = Utf8               finalBlock\n-  #105 = Utf8               Z\n-  #106 = Utf8               state\n-  #107 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n-  #108 = Utf8               reader\n-  #109 = Utf8               Lorg/apache/commons/compress/utils/BitInputStream;\n-  #110 = Utf8               in\n-  #111 = Utf8               Ljava/io/InputStream;\n-  #112 = Utf8               memory\n-  #113 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n-  #114 = Utf8               <init>\n-  #115 = Utf8               (Ljava/io/InputStream;)V\n-  #116 = Utf8               Code\n-  #117 = Utf8               LineNumberTable\n-  #118 = Utf8               LocalVariableTable\n-  #119 = Utf8               this\n-  #120 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n-  #121 = Utf8               close\n-  #122 = Utf8               ()V\n-  #123 = Utf8               decode\n-  #124 = Utf8               ([B)I\n-  #125 = Utf8               b\n-  #126 = Utf8               [B\n-  #127 = Utf8               Exceptions\n-  #128 = Class              #278          // java/io/IOException\n-  #129 = Utf8               ([BII)I\n-  #130 = Utf8               tables\n-  #131 = Utf8               [[I\n-  #132 = Utf8               mode\n-  #133 = Utf8               I\n-  #134 = Utf8               r\n-  #135 = Utf8               off\n-  #136 = Utf8               len\n-  #137 = Utf8               StackMapTable\n-  #138 = Class              #126          // \"[B\"\n-  #139 = Utf8               getBytesRead\n-  #140 = Utf8               ()J\n-  #141 = Utf8               switchToUncompressedState\n-  #142 = Utf8               bLen\n-  #143 = Utf8               J\n-  #144 = Utf8               bNLen\n-  #145 = Utf8               readDynamicTables\n-  #146 = Utf8               ()[[I\n-  #147 = Utf8               result\n-  #148 = Utf8               literals\n-  #149 = Utf8               distances\n+    #1 = Fieldref           #2.#3         // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.DISTANCE_TABLE:[I\n+    #2 = Class              #4            // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+    #3 = NameAndType        #5:#6         // DISTANCE_TABLE:[I\n+    #4 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+    #5 = Utf8               DISTANCE_TABLE\n+    #6 = Utf8               [I\n+    #7 = Fieldref           #2.#8         // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.RUN_LENGTH_TABLE:[S\n+    #8 = NameAndType        #9:#10        // RUN_LENGTH_TABLE:[S\n+    #9 = Utf8               RUN_LENGTH_TABLE\n+   #10 = Utf8               [S\n+   #11 = Methodref          #2.#12        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.nextSymbol:(Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n+   #12 = NameAndType        #13:#14       // nextSymbol:(Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n+   #13 = Utf8               nextSymbol\n+   #14 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n+   #15 = Methodref          #2.#16        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+   #16 = NameAndType        #17:#18       // buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+   #17 = Utf8               buildTree\n+   #18 = Utf8               ([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+   #19 = Fieldref           #2.#20        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.in:Ljava/io/InputStream;\n+   #20 = NameAndType        #21:#22       // in:Ljava/io/InputStream;\n+   #21 = Utf8               in\n+   #22 = Utf8               Ljava/io/InputStream;\n+   #23 = Fieldref           #2.#24        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.memory:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n+   #24 = NameAndType        #25:#26       // memory:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n+   #25 = Utf8               memory\n+   #26 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n+   #27 = Methodref          #2.#28        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readBits:(I)J\n+   #28 = NameAndType        #29:#30       // readBits:(I)J\n+   #29 = Utf8               readBits\n+   #30 = Utf8               (I)J\n+   #31 = Fieldref           #2.#32        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.reader:Lorg/apache/commons/compress/utils/BitInputStream;\n+   #32 = NameAndType        #33:#34       // reader:Lorg/apache/commons/compress/utils/BitInputStream;\n+   #33 = Utf8               reader\n+   #34 = Utf8               Lorg/apache/commons/compress/utils/BitInputStream;\n+   #35 = Methodref          #36.#37       // java/lang/Object.\"<init>\":()V\n+   #36 = Class              #38           // java/lang/Object\n+   #37 = NameAndType        #39:#40       // \"<init>\":()V\n+   #38 = Utf8               java/lang/Object\n+   #39 = Utf8               <init>\n+   #40 = Utf8               ()V\n+   #41 = Fieldref           #2.#42        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.finalBlock:Z\n+   #42 = NameAndType        #43:#44       // finalBlock:Z\n+   #43 = Utf8               finalBlock\n+   #44 = Utf8               Z\n+   #45 = Class              #46           // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory\n+   #46 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory\n+   #47 = Methodref          #45.#48       // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+   #48 = NameAndType        #39:#49       // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+   #49 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+   #50 = Class              #51           // org/apache/commons/compress/utils/BitInputStream\n+   #51 = Utf8               org/apache/commons/compress/utils/BitInputStream\n+   #52 = Fieldref           #53.#54       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #53 = Class              #55           // java/nio/ByteOrder\n+   #54 = NameAndType        #56:#57       // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #55 = Utf8               java/nio/ByteOrder\n+   #56 = Utf8               LITTLE_ENDIAN\n+   #57 = Utf8               Ljava/nio/ByteOrder;\n+   #58 = Methodref          #50.#59       // org/apache/commons/compress/utils/BitInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #59 = NameAndType        #39:#60       // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #60 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #61 = Class              #62           // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState\n+   #62 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState\n+   #63 = Methodref          #61.#64       // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+   #64 = NameAndType        #39:#65       // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+   #65 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+   #66 = Fieldref           #2.#67        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+   #67 = NameAndType        #68:#69       // state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+   #68 = Utf8               state\n+   #69 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+   #70 = Methodref          #2.#71        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.decode:([BII)I\n+   #71 = NameAndType        #72:#73       // decode:([BII)I\n+   #72 = Utf8               decode\n+   #73 = Utf8               ([BII)I\n+   #74 = Methodref          #75.#76       // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.hasData:()Z\n+   #75 = Class              #77           // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState\n+   #76 = NameAndType        #78:#79       // hasData:()Z\n+   #77 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState\n+   #78 = Utf8               hasData\n+   #79 = Utf8               ()Z\n+   #80 = Methodref          #75.#81       // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.state:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+   #81 = NameAndType        #68:#82       // state:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+   #82 = Utf8               ()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+   #83 = Fieldref           #84.#85       // org/apache/commons/compress/compressors/deflate64/HuffmanState.INITIAL:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+   #84 = Class              #86           // org/apache/commons/compress/compressors/deflate64/HuffmanState\n+   #85 = NameAndType        #87:#88       // INITIAL:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+   #86 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanState\n+   #87 = Utf8               INITIAL\n+   #88 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+   #89 = Methodref          #2.#90        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.switchToUncompressedState:()V\n+   #90 = NameAndType        #91:#40       // switchToUncompressedState:()V\n+   #91 = Utf8               switchToUncompressedState\n+   #92 = Class              #93           // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n+   #93 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n+   #94 = Fieldref           #84.#95       // org/apache/commons/compress/compressors/deflate64/HuffmanState.FIXED_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+   #95 = NameAndType        #96:#88       // FIXED_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+   #96 = Utf8               FIXED_CODES\n+   #97 = Fieldref           #2.#98        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.FIXED_LITERALS:[I\n+   #98 = NameAndType        #99:#6        // FIXED_LITERALS:[I\n+   #99 = Utf8               FIXED_LITERALS\n+  #100 = Fieldref           #2.#101       // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.FIXED_DISTANCE:[I\n+  #101 = NameAndType        #102:#6       // FIXED_DISTANCE:[I\n+  #102 = Utf8               FIXED_DISTANCE\n+  #103 = Methodref          #92.#104      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n+  #104 = NameAndType        #39:#105      // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n+  #105 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n+  #106 = Methodref          #2.#107       // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readDynamicTables:()[[I\n+  #107 = NameAndType        #108:#109     // readDynamicTables:()[[I\n+  #108 = Utf8               readDynamicTables\n+  #109 = Utf8               ()[[I\n+  #110 = Fieldref           #84.#111      // org/apache/commons/compress/compressors/deflate64/HuffmanState.DYNAMIC_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+  #111 = NameAndType        #112:#88      // DYNAMIC_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+  #112 = Utf8               DYNAMIC_CODES\n+  #113 = Class              #114          // java/lang/IllegalStateException\n+  #114 = Utf8               java/lang/IllegalStateException\n+  #115 = InvokeDynamic      #0:#116       // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+  #116 = NameAndType        #117:#118     // makeConcatWithConstants:(I)Ljava/lang/String;\n+  #117 = Utf8               makeConcatWithConstants\n+  #118 = Utf8               (I)Ljava/lang/String;\n+  #119 = Methodref          #113.#120     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+  #120 = NameAndType        #39:#121      // \"<init>\":(Ljava/lang/String;)V\n+  #121 = Utf8               (Ljava/lang/String;)V\n+  #122 = Methodref          #75.#123      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.read:([BII)I\n+  #123 = NameAndType        #124:#73      // read:([BII)I\n+  #124 = Utf8               read\n+  #125 = Methodref          #50.#126      // org/apache/commons/compress/utils/BitInputStream.getBytesRead:()J\n+  #126 = NameAndType        #127:#128     // getBytesRead:()J\n+  #127 = Utf8               getBytesRead\n+  #128 = Utf8               ()J\n+  #129 = Methodref          #50.#130      // org/apache/commons/compress/utils/BitInputStream.alignWithByteBoundary:()V\n+  #130 = NameAndType        #131:#40      // alignWithByteBoundary:()V\n+  #131 = Utf8               alignWithByteBoundary\n+  #132 = Long               65535l\n+  #134 = String             #135          // Illegal LEN / NLEN values\n+  #135 = Utf8               Illegal LEN / NLEN values\n+  #136 = Class              #137          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState\n+  #137 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState\n+  #138 = Methodref          #136.#139     // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #139 = NameAndType        #39:#140      // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #140 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #141 = Class              #6            // \"[I\"\n+  #142 = Long               257l\n+  #144 = Methodref          #2.#145       // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.populateDynamicTables:(Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n+  #145 = NameAndType        #146:#147     // populateDynamicTables:(Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n+  #146 = Utf8               populateDynamicTables\n+  #147 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n+  #148 = Methodref          #75.#149      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.available:()I\n+  #149 = NameAndType        #150:#151     // available:()I\n   #150 = Utf8               available\n   #151 = Utf8               ()I\n-  #152 = Utf8               nextSymbol\n-  #153 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n-  #154 = Utf8               bit\n-  #155 = Utf8               tree\n-  #156 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #157 = Utf8               node\n-  #158 = Utf8               populateDynamicTables\n-  #159 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n-  #160 = Utf8               cLen\n-  #161 = Utf8               symbol\n-  #162 = Utf8               codeLengths\n-  #163 = Utf8               codeLengthValues\n-  #164 = Utf8               codeLengthTree\n-  #165 = Utf8               auxBuffer\n-  #166 = Utf8               value\n-  #167 = Utf8               length\n-  #168 = Utf8               buildTree\n-  #169 = Utf8               ([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #170 = Utf8               p\n-  #171 = Utf8               lit\n-  #172 = Utf8               i\n-  #173 = Utf8               litTable\n-  #174 = Utf8               literalCodes\n-  #175 = Utf8               root\n-  #176 = Utf8               getCodes\n-  #177 = Utf8               ([I)[I\n-  #178 = Utf8               aLitTable\n-  #179 = Utf8               max\n-  #180 = Utf8               blCount\n-  #181 = Utf8               code\n-  #182 = Utf8               nextCode\n-  #183 = Utf8               readBits\n-  #184 = Utf8               (I)J\n-  #185 = Utf8               numBits\n-  #186 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-  #187 = Utf8               access$400\n-  #188 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Lorg/apache/commons/compress/utils/BitInputStream;\n-  #189 = Utf8               x0\n-  #190 = Utf8               access$500\n-  #191 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;I)J\n-  #192 = Utf8               x1\n-  #193 = Utf8               access$600\n-  #194 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n-  #195 = Utf8               access$700\n-  #196 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Ljava/io/InputStream;\n-  #197 = Utf8               access$800\n-  #198 = Utf8               access$900\n-  #199 = Utf8               access$1000\n-  #200 = Utf8               ()[S\n-  #201 = Utf8               access$1100\n-  #202 = Utf8               ()[I\n-  #203 = Utf8               <clinit>\n-  #204 = Utf8               SourceFile\n-  #205 = Utf8               HuffmanDecoder.java\n-  #206 = NameAndType        #99:#100      // DISTANCE_TABLE:[I\n-  #207 = NameAndType        #97:#98       // RUN_LENGTH_TABLE:[S\n-  #208 = NameAndType        #152:#153     // nextSymbol:(Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n-  #209 = NameAndType        #168:#169     // buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #210 = NameAndType        #110:#111     // in:Ljava/io/InputStream;\n-  #211 = NameAndType        #112:#113     // memory:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n-  #212 = NameAndType        #183:#184     // readBits:(I)J\n-  #213 = NameAndType        #108:#109     // reader:Lorg/apache/commons/compress/utils/BitInputStream;\n-  #214 = NameAndType        #114:#122     // \"<init>\":()V\n-  #215 = NameAndType        #104:#105     // finalBlock:Z\n-  #216 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory\n-  #217 = NameAndType        #114:#279     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #218 = Utf8               org/apache/commons/compress/utils/BitInputStream\n-  #219 = Class              #280          // java/nio/ByteOrder\n-  #220 = NameAndType        #281:#282     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-  #221 = NameAndType        #114:#283     // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-  #222 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState\n-  #223 = NameAndType        #114:#284     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #224 = NameAndType        #106:#107     // state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n-  #225 = NameAndType        #123:#129     // decode:([BII)I\n-  #226 = NameAndType        #285:#286     // hasData:()Z\n-  #227 = NameAndType        #106:#287     // state:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #228 = Class              #288          // org/apache/commons/compress/compressors/deflate64/HuffmanState\n-  #229 = NameAndType        #289:#290     // INITIAL:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #230 = NameAndType        #141:#122     // switchToUncompressedState:()V\n-  #231 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n-  #232 = NameAndType        #291:#290     // FIXED_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #233 = NameAndType        #102:#100     // FIXED_LITERALS:[I\n-  #234 = NameAndType        #103:#100     // FIXED_DISTANCE:[I\n-  #235 = NameAndType        #114:#292     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n-  #236 = NameAndType        #145:#146     // readDynamicTables:()[[I\n-  #237 = NameAndType        #293:#290     // DYNAMIC_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #238 = Utf8               java/lang/IllegalStateException\n-  #239 = Utf8               BootstrapMethods\n-  #240 = MethodHandle       6:#294        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #241 = String             #295          // Unsupported compression: \\u0001\n-  #242 = NameAndType        #296:#297     // makeConcatWithConstants:(I)Ljava/lang/String;\n-  #243 = NameAndType        #114:#298     // \"<init>\":(Ljava/lang/String;)V\n-  #244 = NameAndType        #299:#129     // read:([BII)I\n-  #245 = NameAndType        #139:#140     // getBytesRead:()J\n-  #246 = NameAndType        #300:#122     // alignWithByteBoundary:()V\n-  #247 = Utf8               Illegal LEN / NLEN values\n-  #248 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState\n-  #249 = NameAndType        #114:#301     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #250 = NameAndType        #158:#159     // populateDynamicTables:(Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n-  #251 = NameAndType        #150:#151     // available:()I\n-  #252 = NameAndType        #302:#133     // literal:I\n-  #253 = NameAndType        #183:#186     // readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-  #254 = NameAndType        #303:#156     // leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #255 = NameAndType        #304:#156     // rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #256 = NameAndType        #101:#100     // CODE_LENGTHS_ORDER:[I\n-  #257 = Class              #305          // java/lang/System\n-  #258 = NameAndType        #306:#307     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #259 = NameAndType        #176:#177     // getCodes:([I)[I\n-  #260 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n-  #261 = NameAndType        #114:#308     // \"<init>\":(ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #262 = NameAndType        #309:#310     // left:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #263 = NameAndType        #311:#310     // right:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #264 = NameAndType        #312:#313     // leaf:(I)V\n-  #265 = Class              #314          // java/lang/Math\n-  #266 = NameAndType        #179:#315     // max:(II)I\n-  #267 = Class              #316          // java/util/Arrays\n-  #268 = NameAndType        #317:#318     // copyOf:([II)[I\n-  #269 = Utf8               java/io/EOFException\n-  #270 = Utf8               Truncated Deflate64 Stream\n-  #271 = NameAndType        #319:#320     // fill:([IIII)V\n-  #272 = NameAndType        #319:#321     // fill:([II)V\n-  #273 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  #274 = Utf8               java/lang/Object\n-  #275 = Utf8               java/io/Closeable\n-  #276 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1\n-  #277 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState\n-  #278 = Utf8               java/io/IOException\n-  #279 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #280 = Utf8               java/nio/ByteOrder\n-  #281 = Utf8               LITTLE_ENDIAN\n-  #282 = Utf8               Ljava/nio/ByteOrder;\n-  #283 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-  #284 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #285 = Utf8               hasData\n-  #286 = Utf8               ()Z\n-  #287 = Utf8               ()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #288 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanState\n-  #289 = Utf8               INITIAL\n-  #290 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #291 = Utf8               FIXED_CODES\n-  #292 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n-  #293 = Utf8               DYNAMIC_CODES\n-  #294 = Methodref          #322.#323     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #295 = Utf8               Unsupported compression: \\u0001\n-  #296 = Utf8               makeConcatWithConstants\n-  #297 = Utf8               (I)Ljava/lang/String;\n-  #298 = Utf8               (Ljava/lang/String;)V\n-  #299 = Utf8               read\n-  #300 = Utf8               alignWithByteBoundary\n-  #301 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #302 = Utf8               literal\n-  #303 = Utf8               leftNode\n-  #304 = Utf8               rightNode\n-  #305 = Utf8               java/lang/System\n-  #306 = Utf8               arraycopy\n-  #307 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #308 = Utf8               (ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #309 = Utf8               left\n-  #310 = Utf8               ()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #311 = Utf8               right\n-  #312 = Utf8               leaf\n-  #313 = Utf8               (I)V\n-  #314 = Utf8               java/lang/Math\n-  #315 = Utf8               (II)I\n-  #316 = Utf8               java/util/Arrays\n-  #317 = Utf8               copyOf\n-  #318 = Utf8               ([II)[I\n-  #319 = Utf8               fill\n-  #320 = Utf8               ([IIII)V\n-  #321 = Utf8               ([II)V\n-  #322 = Class              #324          // java/lang/invoke/StringConcatFactory\n-  #323 = NameAndType        #296:#327     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #324 = Utf8               java/lang/invoke/StringConcatFactory\n-  #325 = Class              #329          // java/lang/invoke/MethodHandles$Lookup\n-  #326 = Utf8               Lookup\n-  #327 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #328 = Class              #330          // java/lang/invoke/MethodHandles\n-  #329 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #330 = Utf8               java/lang/invoke/MethodHandles\n+  #152 = Fieldref           #153.#154     // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.literal:I\n+  #153 = Class              #155          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n+  #154 = NameAndType        #156:#157     // literal:I\n+  #155 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n+  #156 = Utf8               literal\n+  #157 = Utf8               I\n+  #158 = Methodref          #2.#159       // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+  #159 = NameAndType        #29:#160      // readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+  #160 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+  #161 = Fieldref           #153.#162     // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #162 = NameAndType        #163:#164     // leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #163 = Utf8               leftNode\n+  #164 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #165 = Fieldref           #153.#166     // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #166 = NameAndType        #167:#164     // rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #167 = Utf8               rightNode\n+  #168 = Long               4l\n+  #170 = Fieldref           #2.#171       // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.CODE_LENGTHS_ORDER:[I\n+  #171 = NameAndType        #172:#6       // CODE_LENGTHS_ORDER:[I\n+  #172 = Utf8               CODE_LENGTHS_ORDER\n+  #173 = Long               3l\n+  #175 = Long               11l\n+  #177 = Methodref          #178.#179     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #178 = Class              #180          // java/lang/System\n+  #179 = NameAndType        #181:#182     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #180 = Utf8               java/lang/System\n+  #181 = Utf8               arraycopy\n+  #182 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #183 = Methodref          #2.#184       // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.getCodes:([I)[I\n+  #184 = NameAndType        #185:#186     // getCodes:([I)[I\n+  #185 = Utf8               getCodes\n+  #186 = Utf8               ([I)[I\n+  #187 = Methodref          #153.#188     // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.\"<init>\":(ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #188 = NameAndType        #39:#189      // \"<init>\":(ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #189 = Utf8               (ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #190 = Methodref          #153.#191     // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.left:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #191 = NameAndType        #192:#193     // left:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #192 = Utf8               left\n+  #193 = Utf8               ()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #194 = Methodref          #153.#195     // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.right:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #195 = NameAndType        #196:#193     // right:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #196 = Utf8               right\n+  #197 = Methodref          #153.#198     // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leaf:(I)V\n+  #198 = NameAndType        #199:#200     // leaf:(I)V\n+  #199 = Utf8               leaf\n+  #200 = Utf8               (I)V\n+  #201 = Methodref          #202.#203     // java/lang/Math.max:(II)I\n+  #202 = Class              #204          // java/lang/Math\n+  #203 = NameAndType        #205:#206     // max:(II)I\n+  #204 = Utf8               java/lang/Math\n+  #205 = Utf8               max\n+  #206 = Utf8               (II)I\n+  #207 = Methodref          #208.#209     // java/util/Arrays.copyOf:([II)[I\n+  #208 = Class              #210          // java/util/Arrays\n+  #209 = NameAndType        #211:#212     // copyOf:([II)[I\n+  #210 = Utf8               java/util/Arrays\n+  #211 = Utf8               copyOf\n+  #212 = Utf8               ([II)[I\n+  #213 = Methodref          #50.#28       // org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n+  #214 = Long               -1l\n+  #216 = Class              #217          // java/io/EOFException\n+  #217 = Utf8               java/io/EOFException\n+  #218 = String             #219          // Truncated Deflate64 Stream\n+  #219 = Utf8               Truncated Deflate64 Stream\n+  #220 = Methodref          #216.#120     // java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n+  #221 = Integer            32794\n+  #222 = Integer            49178\n+  #223 = Integer            65563\n+  #224 = Integer            98331\n+  #225 = Integer            131100\n+  #226 = Integer            196636\n+  #227 = Integer            262173\n+  #228 = Integer            393245\n+  #229 = Integer            524318\n+  #230 = Integer            786462\n+  #231 = Methodref          #208.#232     // java/util/Arrays.fill:([IIII)V\n+  #232 = NameAndType        #233:#234     // fill:([IIII)V\n+  #233 = Utf8               fill\n+  #234 = Utf8               ([IIII)V\n+  #235 = Methodref          #208.#236     // java/util/Arrays.fill:([II)V\n+  #236 = NameAndType        #233:#237     // fill:([II)V\n+  #237 = Utf8               ([II)V\n+  #238 = Class              #239          // java/io/Closeable\n+  #239 = Utf8               java/io/Closeable\n+  #240 = Utf8               (Ljava/io/InputStream;)V\n+  #241 = Utf8               Code\n+  #242 = Utf8               LineNumberTable\n+  #243 = Utf8               LocalVariableTable\n+  #244 = Utf8               this\n+  #245 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+  #246 = Utf8               close\n+  #247 = Utf8               ([B)I\n+  #248 = Utf8               b\n+  #249 = Utf8               [B\n+  #250 = Utf8               Exceptions\n+  #251 = Class              #252          // java/io/IOException\n+  #252 = Utf8               java/io/IOException\n+  #253 = Utf8               tables\n+  #254 = Utf8               [[I\n+  #255 = Utf8               mode\n+  #256 = Utf8               r\n+  #257 = Utf8               off\n+  #258 = Utf8               len\n+  #259 = Utf8               StackMapTable\n+  #260 = Class              #249          // \"[B\"\n+  #261 = Utf8               bLen\n+  #262 = Utf8               J\n+  #263 = Utf8               bNLen\n+  #264 = Utf8               result\n+  #265 = Utf8               literals\n+  #266 = Utf8               distances\n+  #267 = Utf8               bit\n+  #268 = Utf8               tree\n+  #269 = Utf8               node\n+  #270 = Utf8               cLen\n+  #271 = Utf8               symbol\n+  #272 = Utf8               codeLengths\n+  #273 = Utf8               codeLengthValues\n+  #274 = Utf8               codeLengthTree\n+  #275 = Utf8               auxBuffer\n+  #276 = Utf8               value\n+  #277 = Utf8               length\n+  #278 = Utf8               p\n+  #279 = Utf8               lit\n+  #280 = Utf8               i\n+  #281 = Utf8               litTable\n+  #282 = Utf8               literalCodes\n+  #283 = Utf8               root\n+  #284 = Utf8               aLitTable\n+  #285 = Utf8               blCount\n+  #286 = Utf8               code\n+  #287 = Utf8               nextCode\n+  #288 = Utf8               numBits\n+  #289 = Utf8               access$400\n+  #290 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Lorg/apache/commons/compress/utils/BitInputStream;\n+  #291 = Utf8               x0\n+  #292 = Utf8               access$500\n+  #293 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;I)J\n+  #294 = Utf8               x1\n+  #295 = Utf8               access$600\n+  #296 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n+  #297 = Utf8               access$700\n+  #298 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Ljava/io/InputStream;\n+  #299 = Utf8               access$800\n+  #300 = Utf8               access$900\n+  #301 = Utf8               access$1000\n+  #302 = Utf8               ()[S\n+  #303 = Utf8               access$1100\n+  #304 = Utf8               ()[I\n+  #305 = Utf8               <clinit>\n+  #306 = Utf8               SourceFile\n+  #307 = Utf8               HuffmanDecoder.java\n+  #308 = Utf8               BootstrapMethods\n+  #309 = MethodHandle       6:#310        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #310 = Methodref          #311.#312     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #311 = Class              #313          // java/lang/invoke/StringConcatFactory\n+  #312 = NameAndType        #117:#314     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #313 = Utf8               java/lang/invoke/StringConcatFactory\n+  #314 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #315 = String             #316          // Unsupported compression: \\u0001\n+  #316 = Utf8               Unsupported compression: \\u0001\n+  #317 = Utf8               InnerClasses\n+  #318 = Utf8               BinaryTreeNode\n+  #319 = Utf8               DecodingMemory\n+  #320 = Class              #321          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1\n+  #321 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1\n+  #322 = Utf8               InitialState\n+  #323 = Utf8               DecoderState\n+  #324 = Utf8               HuffmanCodes\n+  #325 = Utf8               UncompressedState\n+  #326 = Class              #327          // java/lang/invoke/MethodHandles$Lookup\n+  #327 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #328 = Class              #329          // java/lang/invoke/MethodHandles\n+  #329 = Utf8               java/lang/invoke/MethodHandles\n+  #330 = Utf8               Lookup\n {\n   private static final short[] RUN_LENGTH_TABLE;\n     descriptor: [S\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   private static final int[] DISTANCE_TABLE;\n     descriptor: [I\n@@ -375,41 +375,41 @@\n \n   org.apache.commons.compress.compressors.deflate64.HuffmanDecoder(java.io.InputStream);\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0000)\n     Code:\n       stack=5, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #9                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #35                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: iconst_0\n-         6: putfield      #10                 // Field finalBlock:Z\n+         6: putfield      #41                 // Field finalBlock:Z\n          9: aload_0\n-        10: new           #11                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory\n+        10: new           #45                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory\n         13: dup\n         14: aconst_null\n-        15: invokespecial #12                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-        18: putfield      #6                  // Field memory:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n+        15: invokespecial #47                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+        18: putfield      #23                 // Field memory:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n         21: aload_0\n-        22: new           #13                 // class org/apache/commons/compress/utils/BitInputStream\n+        22: new           #50                 // class org/apache/commons/compress/utils/BitInputStream\n         25: dup\n         26: aload_1\n-        27: getstatic     #14                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-        30: invokespecial #15                 // Method org/apache/commons/compress/utils/BitInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-        33: putfield      #8                  // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n+        27: getstatic     #52                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+        30: invokespecial #58                 // Method org/apache/commons/compress/utils/BitInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+        33: putfield      #31                 // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n         36: aload_0\n         37: aload_1\n-        38: putfield      #5                  // Field in:Ljava/io/InputStream;\n+        38: putfield      #19                 // Field in:Ljava/io/InputStream;\n         41: aload_0\n-        42: new           #16                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState\n+        42: new           #61                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState\n         45: dup\n         46: aload_0\n         47: aconst_null\n-        48: invokespecial #17                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-        51: putfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+        48: invokespecial #63                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+        51: putfield      #66                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n         54: return\n       LineNumberTable:\n         line 116: 0\n         line 109: 4\n         line 114: 9\n         line 117: 21\n         line 118: 36\n@@ -422,23 +422,23 @@\n \n   public void close();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=1, args_size=1\n          0: aload_0\n-         1: new           #16                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState\n+         1: new           #61                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState\n          4: dup\n          5: aload_0\n          6: aconst_null\n-         7: invokespecial #17                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-        10: putfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+         7: invokespecial #63                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+        10: putfield      #66                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n         13: aload_0\n         14: aconst_null\n-        15: putfield      #8                  // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n+        15: putfield      #31                 // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n         18: return\n       LineNumberTable:\n         line 124: 0\n         line 125: 13\n         line 126: 18\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -450,15 +450,15 @@\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n          3: aload_1\n          4: arraylength\n-         5: invokevirtual #19                 // Method decode:([BII)I\n+         5: invokevirtual #70                 // Method decode:([BII)I\n          8: ireturn\n       LineNumberTable:\n         line 129: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n             0       9     1     b   [B\n@@ -467,91 +467,91 @@\n \n   public int decode(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=8, locals=6, args_size=4\n          0: aload_0\n-         1: getfield      #10                 // Field finalBlock:Z\n+         1: getfield      #41                 // Field finalBlock:Z\n          4: ifeq          17\n          7: aload_0\n-         8: getfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n-        11: invokevirtual #20                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.hasData:()Z\n+         8: getfield      #66                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+        11: invokevirtual #74                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.hasData:()Z\n         14: ifeq          188\n         17: aload_0\n-        18: getfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n-        21: invokevirtual #21                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.state:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-        24: getstatic     #22                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanState.INITIAL:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+        18: getfield      #66                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+        21: invokevirtual #80                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.state:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+        24: getstatic     #83                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanState.INITIAL:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n         27: if_acmpne     165\n         30: aload_0\n         31: aload_0\n         32: iconst_1\n-        33: invokespecial #7                  // Method readBits:(I)J\n+        33: invokespecial #27                 // Method readBits:(I)J\n         36: lconst_1\n         37: lcmp\n         38: ifne          45\n         41: iconst_1\n         42: goto          46\n         45: iconst_0\n-        46: putfield      #10                 // Field finalBlock:Z\n+        46: putfield      #41                 // Field finalBlock:Z\n         49: aload_0\n         50: iconst_2\n-        51: invokespecial #7                  // Method readBits:(I)J\n+        51: invokespecial #27                 // Method readBits:(I)J\n         54: l2i\n         55: istore        4\n         57: iload         4\n         59: tableswitch   { // 0 to 2\n                        0: 84\n                        1: 91\n                        2: 115\n                  default: 147\n             }\n         84: aload_0\n-        85: invokespecial #23                 // Method switchToUncompressedState:()V\n+        85: invokespecial #89                 // Method switchToUncompressedState:()V\n         88: goto          162\n         91: aload_0\n-        92: new           #24                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n+        92: new           #92                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n         95: dup\n         96: aload_0\n-        97: getstatic     #25                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanState.FIXED_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-       100: getstatic     #26                 // Field FIXED_LITERALS:[I\n-       103: getstatic     #27                 // Field FIXED_DISTANCE:[I\n-       106: invokespecial #28                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n-       109: putfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+        97: getstatic     #94                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanState.FIXED_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+       100: getstatic     #97                 // Field FIXED_LITERALS:[I\n+       103: getstatic     #100                // Field FIXED_DISTANCE:[I\n+       106: invokespecial #103                // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n+       109: putfield      #66                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n        112: goto          162\n        115: aload_0\n-       116: invokespecial #29                 // Method readDynamicTables:()[[I\n+       116: invokespecial #106                // Method readDynamicTables:()[[I\n        119: astore        5\n        121: aload_0\n-       122: new           #24                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n+       122: new           #92                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n        125: dup\n        126: aload_0\n-       127: getstatic     #30                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanState.DYNAMIC_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+       127: getstatic     #110                // Field org/apache/commons/compress/compressors/deflate64/HuffmanState.DYNAMIC_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n        130: aload         5\n        132: iconst_0\n        133: aaload\n        134: aload         5\n        136: iconst_1\n        137: aaload\n-       138: invokespecial #28                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n-       141: putfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+       138: invokespecial #103                // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n+       141: putfield      #66                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n        144: goto          162\n-       147: new           #31                 // class java/lang/IllegalStateException\n+       147: new           #113                // class java/lang/IllegalStateException\n        150: dup\n        151: iload         4\n-       153: invokedynamic #32,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n-       158: invokespecial #33                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+       153: invokedynamic #115,  0            // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+       158: invokespecial #119                // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n        161: athrow\n        162: goto          0\n        165: aload_0\n-       166: getfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+       166: getfield      #66                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n        169: aload_1\n        170: iload_2\n        171: iload_3\n-       172: invokevirtual #34                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.read:([BII)I\n+       172: invokevirtual #122                // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.read:([BII)I\n        175: istore        4\n        177: iload         4\n        179: ifeq          185\n        182: iload         4\n        184: ireturn\n        185: goto          0\n        188: iconst_m1\n@@ -610,60 +610,60 @@\n \n   long getBytesRead();\n     descriptor: ()J\n     flags: (0x0000)\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #8                  // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n-         4: invokevirtual #35                 // Method org/apache/commons/compress/utils/BitInputStream.getBytesRead:()J\n+         1: getfield      #31                 // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n+         4: invokevirtual #125                // Method org/apache/commons/compress/utils/BitInputStream.getBytesRead:()J\n          7: lreturn\n       LineNumberTable:\n         line 165: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n \n   private void switchToUncompressedState() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=5, args_size=1\n          0: aload_0\n-         1: getfield      #8                  // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n-         4: invokevirtual #36                 // Method org/apache/commons/compress/utils/BitInputStream.alignWithByteBoundary:()V\n+         1: getfield      #31                 // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n+         4: invokevirtual #129                // Method org/apache/commons/compress/utils/BitInputStream.alignWithByteBoundary:()V\n          7: aload_0\n          8: bipush        16\n-        10: invokespecial #7                  // Method readBits:(I)J\n+        10: invokespecial #27                 // Method readBits:(I)J\n         13: lstore_1\n         14: aload_0\n         15: bipush        16\n-        17: invokespecial #7                  // Method readBits:(I)J\n+        17: invokespecial #27                 // Method readBits:(I)J\n         20: lstore_3\n         21: lload_1\n-        22: ldc2_w        #37                 // long 65535l\n+        22: ldc2_w        #132                // long 65535l\n         25: lxor\n-        26: ldc2_w        #37                 // long 65535l\n+        26: ldc2_w        #132                // long 65535l\n         29: land\n         30: lload_3\n         31: lcmp\n         32: ifeq          45\n-        35: new           #31                 // class java/lang/IllegalStateException\n+        35: new           #113                // class java/lang/IllegalStateException\n         38: dup\n-        39: ldc           #39                 // String Illegal LEN / NLEN values\n-        41: invokespecial #33                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        39: ldc           #134                // String Illegal LEN / NLEN values\n+        41: invokespecial #119                // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n         44: athrow\n         45: aload_0\n-        46: new           #40                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState\n+        46: new           #136                // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState\n         49: dup\n         50: aload_0\n         51: lload_1\n         52: aconst_null\n-        53: invokespecial #41                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-        56: putfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+        53: invokespecial #138                // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+        56: putfield      #66                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n         59: return\n       LineNumberTable:\n         line 169: 0\n         line 170: 7\n         line 171: 14\n         line 172: 21\n         line 174: 35\n@@ -683,49 +683,49 @@\n \n   private int[][] readDynamicTables() throws java.io.IOException;\n     descriptor: ()[[I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=4, args_size=1\n          0: iconst_2\n-         1: anewarray     #42                 // class \"[I\"\n+         1: anewarray     #141                // class \"[I\"\n          4: astore_1\n          5: aload_0\n          6: iconst_5\n-         7: invokespecial #7                  // Method readBits:(I)J\n-        10: ldc2_w        #43                 // long 257l\n+         7: invokespecial #27                 // Method readBits:(I)J\n+        10: ldc2_w        #142                // long 257l\n         13: ladd\n         14: l2i\n         15: istore_2\n         16: aload_1\n         17: iconst_0\n         18: iload_2\n         19: newarray       int\n         21: aastore\n         22: aload_0\n         23: iconst_5\n-        24: invokespecial #7                  // Method readBits:(I)J\n+        24: invokespecial #27                 // Method readBits:(I)J\n         27: lconst_1\n         28: ladd\n         29: l2i\n         30: istore_3\n         31: aload_1\n         32: iconst_1\n         33: iload_3\n         34: newarray       int\n         36: aastore\n         37: aload_0\n-        38: getfield      #8                  // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n+        38: getfield      #31                 // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n         41: aload_1\n         42: iconst_0\n         43: aaload\n         44: aload_1\n         45: iconst_1\n         46: aaload\n-        47: invokestatic  #45                 // Method populateDynamicTables:(Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n+        47: invokestatic  #144                // Method populateDynamicTables:(Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n         50: aload_1\n         51: areturn\n       LineNumberTable:\n         line 180: 0\n         line 181: 5\n         line 182: 16\n         line 184: 22\n@@ -743,16 +743,16 @@\n \n   int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0000)\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n-         4: invokevirtual #46                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.available:()I\n+         1: getfield      #66                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+         4: invokevirtual #148                // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.available:()I\n          7: ireturn\n       LineNumberTable:\n         line 192: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n     Exceptions:\n@@ -764,36 +764,36 @@\n     Code:\n       stack=4, locals=5, args_size=2\n          0: aload_1\n          1: astore_2\n          2: aload_2\n          3: ifnull        41\n          6: aload_2\n-         7: getfield      #47                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.literal:I\n+         7: getfield      #152                // Field org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.literal:I\n         10: iconst_m1\n         11: if_icmpne     41\n         14: aload_0\n         15: iconst_1\n-        16: invokestatic  #48                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+        16: invokestatic  #158                // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n         19: lstore_3\n         20: lload_3\n         21: lconst_0\n         22: lcmp\n         23: ifne          33\n         26: aload_2\n-        27: getfield      #49                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+        27: getfield      #161                // Field org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n         30: goto          37\n         33: aload_2\n-        34: getfield      #50                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+        34: getfield      #165                // Field org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n         37: astore_2\n         38: goto          2\n         41: aload_2\n         42: ifnull        52\n         45: aload_2\n-        46: getfield      #47                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.literal:I\n+        46: getfield      #152                // Field org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.literal:I\n         49: goto          53\n         52: iconst_m1\n         53: ireturn\n       LineNumberTable:\n         line 373: 0\n         line 374: 2\n         line 375: 14\n@@ -826,40 +826,40 @@\n   private static void populateDynamicTables(org.apache.commons.compress.utils.BitInputStream, int[], int[]) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=11, args_size=3\n          0: aload_0\n          1: iconst_4\n-         2: invokestatic  #48                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-         5: ldc2_w        #51                 // long 4l\n+         2: invokestatic  #158                // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+         5: ldc2_w        #168                // long 4l\n          8: ladd\n          9: l2i\n         10: istore_3\n         11: bipush        19\n         13: newarray       int\n         15: astore        4\n         17: iconst_0\n         18: istore        5\n         20: iload         5\n         22: iload_3\n         23: if_icmpge     47\n         26: aload         4\n-        28: getstatic     #53                 // Field CODE_LENGTHS_ORDER:[I\n+        28: getstatic     #170                // Field CODE_LENGTHS_ORDER:[I\n         31: iload         5\n         33: iaload\n         34: aload_0\n         35: iconst_3\n-        36: invokestatic  #48                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+        36: invokestatic  #158                // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n         39: l2i\n         40: iastore\n         41: iinc          5, 1\n         44: goto          20\n         47: aload         4\n-        49: invokestatic  #4                  // Method buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+        49: invokestatic  #15                 // Method buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n         52: astore        5\n         54: aload_1\n         55: arraylength\n         56: aload_2\n         57: arraylength\n         58: iadd\n         59: newarray       int\n@@ -881,15 +881,15 @@\n         89: iinc          9, 1\n         92: iload         7\n         94: iastore\n         95: iinc          8, -1\n         98: goto          72\n        101: aload_0\n        102: aload         5\n-       104: invokestatic  #3                  // Method nextSymbol:(Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n+       104: invokestatic  #11                 // Method nextSymbol:(Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n        107: istore        10\n        109: iload         10\n        111: bipush        16\n        113: if_icmpge     133\n        116: iload         10\n        118: istore        7\n        120: aload         6\n@@ -899,61 +899,61 @@\n        129: iastore\n        130: goto          203\n        133: iload         10\n        135: bipush        16\n        137: if_icmpne     155\n        140: aload_0\n        141: iconst_2\n-       142: invokestatic  #48                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-       145: ldc2_w        #54                 // long 3l\n+       142: invokestatic  #158                // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+       145: ldc2_w        #173                // long 3l\n        148: ladd\n        149: l2i\n        150: istore        8\n        152: goto          203\n        155: iload         10\n        157: bipush        17\n        159: if_icmpne     180\n        162: iconst_0\n        163: istore        7\n        165: aload_0\n        166: iconst_3\n-       167: invokestatic  #48                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-       170: ldc2_w        #54                 // long 3l\n+       167: invokestatic  #158                // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+       170: ldc2_w        #173                // long 3l\n        173: ladd\n        174: l2i\n        175: istore        8\n        177: goto          203\n        180: iload         10\n        182: bipush        18\n        184: if_icmpne     203\n        187: iconst_0\n        188: istore        7\n        190: aload_0\n        191: bipush        7\n-       193: invokestatic  #48                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-       196: ldc2_w        #56                 // long 11l\n+       193: invokestatic  #158                // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+       196: ldc2_w        #175                // long 11l\n        199: ladd\n        200: l2i\n        201: istore        8\n        203: goto          72\n        206: aload         6\n        208: iconst_0\n        209: aload_1\n        210: iconst_0\n        211: aload_1\n        212: arraylength\n-       213: invokestatic  #58                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       213: invokestatic  #177                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        216: aload         6\n        218: aload_1\n        219: arraylength\n        220: aload_2\n        221: iconst_0\n        222: aload_2\n        223: arraylength\n-       224: invokestatic  #58                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       224: invokestatic  #177                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        227: return\n       LineNumberTable:\n         line 382: 0\n         line 384: 11\n         line 385: 17\n         line 386: 26\n         line 385: 41\n@@ -1020,21 +1020,21 @@\n \n   private static org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode buildTree(int[]);\n     descriptor: ([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=9, args_size=1\n          0: aload_0\n-         1: invokestatic  #59                 // Method getCodes:([I)[I\n+         1: invokestatic  #183                // Method getCodes:([I)[I\n          4: astore_1\n-         5: new           #60                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n+         5: new           #153                // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n          8: dup\n          9: iconst_0\n         10: aconst_null\n-        11: invokespecial #61                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.\"<init>\":(ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+        11: invokespecial #187                // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.\"<init>\":(ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n         14: astore_2\n         15: iconst_0\n         16: istore_3\n         17: iload_3\n         18: aload_0\n         19: arraylength\n         20: if_icmpge     112\n@@ -1063,24 +1063,24 @@\n         58: iload         7\n         60: ishl\n         61: iand\n         62: istore        8\n         64: iload         8\n         66: ifne          77\n         69: aload         5\n-        71: invokevirtual #62                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.left:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+        71: invokevirtual #190                // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.left:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n         74: goto          82\n         77: aload         5\n-        79: invokevirtual #63                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.right:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+        79: invokevirtual #194                // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.right:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n         82: astore        5\n         84: iinc          7, -1\n         87: goto          50\n         90: aload         5\n         92: iload_3\n-        93: invokevirtual #64                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leaf:(I)V\n+        93: invokevirtual #197                // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leaf:(I)V\n         96: aload_1\n         97: iload         4\n         99: iconst_1\n        100: isub\n        101: dup2\n        102: iaload\n        103: iconst_1\n@@ -1159,30 +1159,30 @@\n         20: if_icmpge     50\n         23: aload_3\n         24: iload         5\n         26: iaload\n         27: istore        6\n         29: iload_1\n         30: iload         6\n-        32: invokestatic  #65                 // Method java/lang/Math.max:(II)I\n+        32: invokestatic  #201                // Method java/lang/Math.max:(II)I\n         35: istore_1\n         36: aload_2\n         37: iload         6\n         39: dup2\n         40: iaload\n         41: iconst_1\n         42: iadd\n         43: iastore\n         44: iinc          5, 1\n         47: goto          16\n         50: aload_2\n         51: iload_1\n         52: iconst_1\n         53: iadd\n-        54: invokestatic  #66                 // Method java/util/Arrays.copyOf:([II)[I\n+        54: invokestatic  #207                // Method java/util/Arrays.copyOf:([II)[I\n         57: astore_2\n         58: iconst_0\n         59: istore_3\n         60: iload_1\n         61: iconst_1\n         62: iadd\n         63: newarray       int\n@@ -1247,17 +1247,17 @@\n \n   private long readBits(int) throws java.io.IOException;\n     descriptor: (I)J\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #8                  // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n+         1: getfield      #31                 // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n          4: iload_1\n-         5: invokestatic  #48                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+         5: invokestatic  #158                // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n          8: lreturn\n       LineNumberTable:\n         line 543: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n             0       9     1 numBits   I\n@@ -1267,24 +1267,24 @@\n   private static long readBits(org.apache.commons.compress.utils.BitInputStream, int) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/utils/BitInputStream;I)J\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=4, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: invokevirtual #67                 // Method org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n+         2: invokevirtual #213                // Method org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n          5: lstore_2\n          6: lload_2\n-         7: ldc2_w        #68                 // long -1l\n+         7: ldc2_w        #214                // long -1l\n         10: lcmp\n         11: ifne          24\n-        14: new           #70                 // class java/io/EOFException\n+        14: new           #216                // class java/io/EOFException\n         17: dup\n-        18: ldc           #71                 // String Truncated Deflate64 Stream\n-        20: invokespecial #72                 // Method java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n+        18: ldc           #218                // String Truncated Deflate64 Stream\n+        20: invokespecial #220                // Method java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n         23: athrow\n         24: lload_2\n         25: lreturn\n       LineNumberTable:\n         line 547: 0\n         line 548: 6\n         line 549: 14\n@@ -1303,30 +1303,30 @@\n \n   static org.apache.commons.compress.utils.BitInputStream access$400(org.apache.commons.compress.compressors.deflate64.HuffmanDecoder);\n     descriptor: (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Lorg/apache/commons/compress/utils/BitInputStream;\n     flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #8                  // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n+         1: getfield      #31                 // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n          4: areturn\n       LineNumberTable:\n         line 31: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0    x0   Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n \n   static long access$500(org.apache.commons.compress.compressors.deflate64.HuffmanDecoder, int) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;I)J\n     flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: invokespecial #7                  // Method readBits:(I)J\n+         2: invokespecial #27                 // Method readBits:(I)J\n          5: lreturn\n       LineNumberTable:\n         line 31: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0    x0   Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n             0       6     1    x1   I\n@@ -1335,58 +1335,58 @@\n \n   static org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory access$600(org.apache.commons.compress.compressors.deflate64.HuffmanDecoder);\n     descriptor: (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n     flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field memory:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n+         1: getfield      #23                 // Field memory:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n          4: areturn\n       LineNumberTable:\n         line 31: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0    x0   Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n \n   static java.io.InputStream access$700(org.apache.commons.compress.compressors.deflate64.HuffmanDecoder);\n     descriptor: (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Ljava/io/InputStream;\n     flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field in:Ljava/io/InputStream;\n+         1: getfield      #19                 // Field in:Ljava/io/InputStream;\n          4: areturn\n       LineNumberTable:\n         line 31: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0    x0   Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n \n   static org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode access$800(int[]);\n     descriptor: ([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n     flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokestatic  #4                  // Method buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+         1: invokestatic  #15                 // Method buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n          4: areturn\n       LineNumberTable:\n         line 31: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0    x0   [I\n \n   static int access$900(org.apache.commons.compress.utils.BitInputStream, org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n     flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokestatic  #3                  // Method nextSymbol:(Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n+         2: invokestatic  #11                 // Method nextSymbol:(Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n          5: ireturn\n       LineNumberTable:\n         line 31: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0    x0   Lorg/apache/commons/compress/utils/BitInputStream;\n             0       6     1    x1   Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n@@ -1394,15 +1394,15 @@\n       throws java.io.IOException\n \n   static short[] access$1000();\n     descriptor: ()[S\n     flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=1, locals=0, args_size=0\n-         0: getstatic     #2                  // Field RUN_LENGTH_TABLE:[S\n+         0: getstatic     #7                  // Field RUN_LENGTH_TABLE:[S\n          3: areturn\n       LineNumberTable:\n         line 31: 0\n \n   static int[] access$1100();\n     descriptor: ()[I\n     flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC\n@@ -1532,15 +1532,15 @@\n        187: bipush        27\n        189: sipush        7269\n        192: sastore\n        193: dup\n        194: bipush        28\n        196: bipush        112\n        198: sastore\n-       199: putstatic     #2                  // Field RUN_LENGTH_TABLE:[S\n+       199: putstatic     #7                  // Field RUN_LENGTH_TABLE:[S\n        202: bipush        32\n        204: newarray       int\n        206: dup\n        207: iconst_0\n        208: bipush        16\n        210: iastore\n        211: dup\n@@ -1625,51 +1625,51 @@\n        340: iastore\n        341: dup\n        342: bipush        21\n        344: sipush        24601\n        347: iastore\n        348: dup\n        349: bipush        22\n-       351: ldc           #73                 // int 32794\n+       351: ldc           #221                // int 32794\n        353: iastore\n        354: dup\n        355: bipush        23\n-       357: ldc           #74                 // int 49178\n+       357: ldc           #222                // int 49178\n        359: iastore\n        360: dup\n        361: bipush        24\n-       363: ldc           #75                 // int 65563\n+       363: ldc           #223                // int 65563\n        365: iastore\n        366: dup\n        367: bipush        25\n-       369: ldc           #76                 // int 98331\n+       369: ldc           #224                // int 98331\n        371: iastore\n        372: dup\n        373: bipush        26\n-       375: ldc           #77                 // int 131100\n+       375: ldc           #225                // int 131100\n        377: iastore\n        378: dup\n        379: bipush        27\n-       381: ldc           #78                 // int 196636\n+       381: ldc           #226                // int 196636\n        383: iastore\n        384: dup\n        385: bipush        28\n-       387: ldc           #79                 // int 262173\n+       387: ldc           #227                // int 262173\n        389: iastore\n        390: dup\n        391: bipush        29\n-       393: ldc           #80                 // int 393245\n+       393: ldc           #228                // int 393245\n        395: iastore\n        396: dup\n        397: bipush        30\n-       399: ldc           #81                 // int 524318\n+       399: ldc           #229                // int 524318\n        401: iastore\n        402: dup\n        403: bipush        31\n-       405: ldc           #82                 // int 786462\n+       405: ldc           #230                // int 786462\n        407: iastore\n        408: putstatic     #1                  // Field DISTANCE_TABLE:[I\n        411: bipush        19\n        413: newarray       int\n        415: dup\n        416: iconst_0\n        417: bipush        16\n@@ -1742,44 +1742,44 @@\n        507: bipush        17\n        509: iconst_1\n        510: iastore\n        511: dup\n        512: bipush        18\n        514: bipush        15\n        516: iastore\n-       517: putstatic     #53                 // Field CODE_LENGTHS_ORDER:[I\n+       517: putstatic     #170                // Field CODE_LENGTHS_ORDER:[I\n        520: sipush        288\n        523: newarray       int\n-       525: putstatic     #26                 // Field FIXED_LITERALS:[I\n-       528: getstatic     #26                 // Field FIXED_LITERALS:[I\n+       525: putstatic     #97                 // Field FIXED_LITERALS:[I\n+       528: getstatic     #97                 // Field FIXED_LITERALS:[I\n        531: iconst_0\n        532: sipush        144\n        535: bipush        8\n-       537: invokestatic  #83                 // Method java/util/Arrays.fill:([IIII)V\n-       540: getstatic     #26                 // Field FIXED_LITERALS:[I\n+       537: invokestatic  #231                // Method java/util/Arrays.fill:([IIII)V\n+       540: getstatic     #97                 // Field FIXED_LITERALS:[I\n        543: sipush        144\n        546: sipush        256\n        549: bipush        9\n-       551: invokestatic  #83                 // Method java/util/Arrays.fill:([IIII)V\n-       554: getstatic     #26                 // Field FIXED_LITERALS:[I\n+       551: invokestatic  #231                // Method java/util/Arrays.fill:([IIII)V\n+       554: getstatic     #97                 // Field FIXED_LITERALS:[I\n        557: sipush        256\n        560: sipush        280\n        563: bipush        7\n-       565: invokestatic  #83                 // Method java/util/Arrays.fill:([IIII)V\n-       568: getstatic     #26                 // Field FIXED_LITERALS:[I\n+       565: invokestatic  #231                // Method java/util/Arrays.fill:([IIII)V\n+       568: getstatic     #97                 // Field FIXED_LITERALS:[I\n        571: sipush        280\n        574: sipush        288\n        577: bipush        8\n-       579: invokestatic  #83                 // Method java/util/Arrays.fill:([IIII)V\n+       579: invokestatic  #231                // Method java/util/Arrays.fill:([IIII)V\n        582: bipush        32\n        584: newarray       int\n-       586: putstatic     #27                 // Field FIXED_DISTANCE:[I\n-       589: getstatic     #27                 // Field FIXED_DISTANCE:[I\n+       586: putstatic     #100                // Field FIXED_DISTANCE:[I\n+       589: getstatic     #100                // Field FIXED_DISTANCE:[I\n        592: iconst_5\n-       593: invokestatic  #84                 // Method java/util/Arrays.fill:([II)V\n+       593: invokestatic  #235                // Method java/util/Arrays.fill:([II)V\n        596: return\n       LineNumberTable:\n         line 52: 0\n         line 78: 202\n         line 89: 411\n         line 99: 520\n         line 100: 528\n@@ -1787,20 +1787,20 @@\n         line 102: 554\n         line 103: 568\n         line 105: 582\n         line 106: 589\n         line 107: 596\n }\n SourceFile: \"HuffmanDecoder.java\"\n-InnerClasses:\n-  static #88;                             // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1\n-  private static #90= #11 of #85;         // DecodingMemory=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  private static #91= #60 of #85;         // BinaryTreeNode=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  private #92= #24 of #85;                // HuffmanCodes=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  private #93= #16 of #85;                // InitialState=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  private #94= #40 of #85;                // UncompressedState=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  private static abstract #96= #95 of #85; // DecoderState=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  public static final #326= #325 of #328; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #240 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  0: #309 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #241 Unsupported compression: \\u0001\n+      #315 Unsupported compression: \\u0001\n+InnerClasses:\n+  private static #318= #153 of #2;        // BinaryTreeNode=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  private static #319= #45 of #2;         // DecodingMemory=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  static #320;                            // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1\n+  private #322= #61 of #2;                // InitialState=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  private static abstract #323= #75 of #2; // DecoderState=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  private #324= #92 of #2;                // HuffmanCodes=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  private #325= #136 of #2;               // UncompressedState=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  public static final #330= #326 of #328; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
