{"diffoscope-json-version": 1, "source1": "first/ByteCode.class", "source2": "second/ByteCode.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,49 +12,48 @@\n     private final ByteCodeForm byteCodeForm;\n     private ClassFileEntry[] nested;\n     private int[][] nestedPositions;\n     private int[] rewrite;\n     private int byteCodeOffset;\n     private int[] byteCodeTargets;\n     \n-    public static ByteCode getByteCode(final int opcode) {\n-        final int byteOpcode = 0xFF & opcode;\n-        if (ByteCodeForm.get(byteOpcode).hasNoOperand()) {\n-            if (null == ByteCode.noArgByteCodes[byteOpcode]) {\n-                ByteCode.noArgByteCodes[byteOpcode] = new ByteCode(byteOpcode);\n+    public static ByteCode getByteCode(final int n) {\n+        final int n2 = 0xFF & n;\n+        if (ByteCodeForm.get(n2).hasNoOperand()) {\n+            if (null == ByteCode.noArgByteCodes[n2]) {\n+                ByteCode.noArgByteCodes[n2] = new ByteCode(n2);\n             }\n-            return ByteCode.noArgByteCodes[byteOpcode];\n+            return ByteCode.noArgByteCodes[n2];\n         }\n-        return new ByteCode(byteOpcode);\n+        return new ByteCode(n2);\n     }\n     \n-    protected ByteCode(final int opcode) {\n-        this(opcode, ClassFileEntry.NONE);\n+    protected ByteCode(final int n) {\n+        this(n, ClassFileEntry.NONE);\n     }\n     \n-    protected ByteCode(final int opcode, final ClassFileEntry[] nested) {\n+    protected ByteCode(final int n, final ClassFileEntry[] nested) {\n         this.byteCodeOffset = -1;\n-        this.byteCodeForm = ByteCodeForm.get(opcode);\n+        this.byteCodeForm = ByteCodeForm.get(n);\n         this.rewrite = this.byteCodeForm.getRewriteCopy();\n         this.nested = nested;\n     }\n     \n-    protected void doWrite(final DataOutputStream dos) throws IOException {\n+    protected void doWrite(final DataOutputStream dataOutputStream) throws IOException {\n         for (int i = 0; i < this.rewrite.length; ++i) {\n-            dos.writeByte(this.rewrite[i]);\n+            dataOutputStream.writeByte(this.rewrite[i]);\n         }\n     }\n     \n-    public boolean equals(final Object obj) {\n-        return this == obj;\n+    public boolean equals(final Object o) {\n+        return this == o;\n     }\n     \n-    public void extractOperands(final OperandManager operandManager, final Segment segment, final int codeLength) {\n-        final ByteCodeForm currentByteCodeForm = this.getByteCodeForm();\n-        currentByteCodeForm.setByteCodeOperands(this, operandManager, codeLength);\n+    public void extractOperands(final OperandManager operandManager, final Segment segment, final int n) {\n+        this.getByteCodeForm().setByteCodeOperands(this, operandManager, n);\n     }\n     \n     protected ByteCodeForm getByteCodeForm() {\n         return this.byteCodeForm;\n     }\n     \n     public int getLength() {\n@@ -73,83 +72,81 @@\n         return this.getByteCodeForm().getOpcode();\n     }\n     \n     public int hashCode() {\n         return this.objectHashCode();\n     }\n     \n-    protected void resolve(final ClassConstantPool pool) {\n-        super.resolve(pool);\n+    protected void resolve(final ClassConstantPool classConstantPool) {\n+        super.resolve(classConstantPool);\n         if (this.nested.length > 0) {\n-            for (int index = 0; index < this.nested.length; ++index) {\n-                final int argLength = this.getNestedPosition(index)[1];\n-                switch (argLength) {\n+            for (int i = 0; i < this.nested.length; ++i) {\n+                switch (this.getNestedPosition(i)[1]) {\n                     case 1: {\n-                        this.setOperandByte(pool.indexOf(this.nested[index]), this.getNestedPosition(index)[0]);\n+                        this.setOperandByte(classConstantPool.indexOf(this.nested[i]), this.getNestedPosition(i)[0]);\n                         break;\n                     }\n                     case 2: {\n-                        this.setOperand2Bytes(pool.indexOf(this.nested[index]), this.getNestedPosition(index)[0]);\n+                        this.setOperand2Bytes(classConstantPool.indexOf(this.nested[i]), this.getNestedPosition(i)[0]);\n                         break;\n                     }\n                     default: {\n                         throw new Error(\"Unhandled resolve \" + this);\n                     }\n                 }\n             }\n         }\n     }\n     \n-    public void setOperandBytes(final int[] operands) {\n+    public void setOperandBytes(final int[] array) {\n         final int firstOperandIndex = this.getByteCodeForm().firstOperandIndex();\n-        final int byteCodeFormLength = this.getByteCodeForm().operandLength();\n+        final int operandLength = this.getByteCodeForm().operandLength();\n         if (firstOperandIndex < 1) {\n             throw new Error(\"Trying to rewrite \" + this + \" that has no rewrite\");\n         }\n-        if (byteCodeFormLength != operands.length) {\n-            throw new Error(\"Trying to rewrite \" + this + \" with \" + operands.length + \" but bytecode has length \" + this.byteCodeForm.operandLength());\n+        if (operandLength != array.length) {\n+            throw new Error(\"Trying to rewrite \" + this + \" with \" + array.length + \" but bytecode has length \" + this.byteCodeForm.operandLength());\n         }\n-        for (int index = 0; index < byteCodeFormLength; ++index) {\n-            this.rewrite[index + firstOperandIndex] = (operands[index] & 0xFF);\n+        for (int i = 0; i < operandLength; ++i) {\n+            this.rewrite[i + firstOperandIndex] = (array[i] & 0xFF);\n         }\n     }\n     \n-    public void setOperand2Bytes(final int operand, final int position) {\n+    public void setOperand2Bytes(final int n, final int i) {\n         final int firstOperandIndex = this.getByteCodeForm().firstOperandIndex();\n-        final int byteCodeFormLength = this.getByteCodeForm().getRewrite().length;\n+        final int length = this.getByteCodeForm().getRewrite().length;\n         if (firstOperandIndex < 1) {\n             throw new Error(\"Trying to rewrite \" + this + \" that has no rewrite\");\n         }\n-        if (firstOperandIndex + position + 1 > byteCodeFormLength) {\n-            throw new Error(\"Trying to rewrite \" + this + \" with an int at position \" + position + \" but this won't fit in the rewrite array\");\n+        if (firstOperandIndex + i + 1 > length) {\n+            throw new Error(\"Trying to rewrite \" + this + \" with an int at position \" + i + \" but this won't fit in the rewrite array\");\n         }\n-        this.rewrite[firstOperandIndex + position] = (operand & 0xFF00) >> 8;\n-        this.rewrite[firstOperandIndex + position + 1] = (operand & 0xFF);\n+        this.rewrite[firstOperandIndex + i] = (n & 0xFF00) >> 8;\n+        this.rewrite[firstOperandIndex + i + 1] = (n & 0xFF);\n     }\n     \n-    public void setOperandSigned2Bytes(final int operand, final int position) {\n-        if (operand >= 0) {\n-            this.setOperand2Bytes(operand, position);\n+    public void setOperandSigned2Bytes(final int n, final int n2) {\n+        if (n >= 0) {\n+            this.setOperand2Bytes(n, n2);\n         }\n         else {\n-            final int twosComplementOperand = 65536 + operand;\n-            this.setOperand2Bytes(twosComplementOperand, position);\n+            this.setOperand2Bytes(65536 + n, n2);\n         }\n     }\n     \n-    public void setOperandByte(final int operand, final int position) {\n+    public void setOperandByte(final int n, final int i) {\n         final int firstOperandIndex = this.getByteCodeForm().firstOperandIndex();\n-        final int byteCodeFormLength = this.getByteCodeForm().operandLength();\n+        final int operandLength = this.getByteCodeForm().operandLength();\n         if (firstOperandIndex < 1) {\n             throw new Error(\"Trying to rewrite \" + this + \" that has no rewrite\");\n         }\n-        if (firstOperandIndex + position > byteCodeFormLength) {\n-            throw new Error(\"Trying to rewrite \" + this + \" with an byte at position \" + position + \" but this won't fit in the rewrite array\");\n+        if (firstOperandIndex + i > operandLength) {\n+            throw new Error(\"Trying to rewrite \" + this + \" with an byte at position \" + i + \" but this won't fit in the rewrite array\");\n         }\n-        this.rewrite[firstOperandIndex + position] = (operand & 0xFF);\n+        this.rewrite[firstOperandIndex + i] = (n & 0xFF);\n     }\n     \n     public String toString() {\n         return this.getByteCodeForm().getName();\n     }\n     \n     public void setNested(final ClassFileEntry[] nested) {\n@@ -160,16 +157,16 @@\n         this.nestedPositions = nestedPositions;\n     }\n     \n     public int[][] getNestedPositions() {\n         return this.nestedPositions;\n     }\n     \n-    public int[] getNestedPosition(final int index) {\n-        return this.getNestedPositions()[index];\n+    public int[] getNestedPosition(final int n) {\n+        return this.getNestedPositions()[n];\n     }\n     \n     public boolean hasMultipleByteCodes() {\n         return this.getByteCodeForm().hasMultipleByteCodes();\n     }\n     \n     public void setByteCodeIndex(final int byteCodeOffset) {\n"}]}
