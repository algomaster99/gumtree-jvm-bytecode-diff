{"diffoscope-json-version": 1, "source1": "first/PerformanceTest.class", "source2": "second/PerformanceTest.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,12 @@\n \n package org.apache.commons.csv.perf;\n \n import org.junit.jupiter.api.Test;\n+import java.util.Objects;\n import java.util.Iterator;\n import org.apache.commons.csv.CSVRecord;\n import org.apache.commons.csv.CSVFormat;\n import java.io.Reader;\n import java.io.FileReader;\n import java.io.BufferedReader;\n import org.junit.jupiter.api.BeforeAll;\n@@ -76,37 +77,37 @@\n     \n     @Test\n     public void testParseBigFileRepeat() throws Exception {\n         long bestTime = Long.MAX_VALUE;\n         int i = 0;\n         while (true) {\n             final int n = i;\n-            this.getClass();\n+            Objects.requireNonNull(this);\n             if (n >= 10) {\n                 break;\n             }\n             bestTime = Math.min(this.testParseBigFile(false), bestTime);\n             ++i;\n         }\n         final String format = \"Best time out of %,d is %,d milliseconds.\";\n         final Object[] args = new Object[2];\n         final int n2 = 0;\n-        this.getClass();\n+        Objects.requireNonNull(this);\n         args[n2] = Integer.valueOf(10);\n         args[1] = Long.valueOf(bestTime);\n         this.println(String.format(format, args));\n     }\n     \n     @Test\n     public void testReadBigFile() throws Exception {\n         long bestTime = Long.MAX_VALUE;\n         int i = 0;\n         while (true) {\n             final int n = i;\n-            this.getClass();\n+            Objects.requireNonNull(this);\n             if (n >= 10) {\n                 break;\n             }\n             long startMillis;\n             long count;\n             try (final BufferedReader in = this.createBufferedReader()) {\n                 startMillis = System.currentTimeMillis();\n@@ -116,15 +117,15 @@\n             bestTime = Math.min(totalMillis, bestTime);\n             this.println(String.format(\"File read in %,d milliseconds: %,d lines.\", Long.valueOf(totalMillis), Long.valueOf(count)));\n             ++i;\n         }\n         final String format = \"Best time out of %,d is %,d milliseconds.\";\n         final Object[] args = new Object[2];\n         final int n2 = 0;\n-        this.getClass();\n+        Objects.requireNonNull(this);\n         args[n2] = Integer.valueOf(10);\n         args[1] = Long.valueOf(bestTime);\n         this.println(String.format(format, args));\n     }\n     \n     static {\n         BIG_FILE = new File(System.getProperty(\"java.io.tmpdir\"), \"worldcitiespop.txt\");\n"}]}
