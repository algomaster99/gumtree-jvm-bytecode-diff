{"diffoscope-json-version": 1, "source1": "first/LOOKUPSWITCH.class", "source2": "second/LOOKUPSWITCH.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,49 +6,47 @@\n import java.io.DataOutputStream;\n \n public class LOOKUPSWITCH extends Select\n {\n     LOOKUPSWITCH() {\n     }\n     \n-    public LOOKUPSWITCH(final int[] match, final InstructionHandle[] targets, final InstructionHandle defaultTarget) {\n-        super((short)171, match, targets, defaultTarget);\n-        final short length = (short)(9 + this.getMatch_length() * 8);\n-        super.setLength((int)length);\n-        this.setFixed_length((int)length);\n+    public LOOKUPSWITCH(final int[] array, final InstructionHandle[] array2, final InstructionHandle instructionHandle) {\n+        super((short)171, array, array2, instructionHandle);\n+        final short n = (short)(9 + this.getMatch_length() * 8);\n+        super.setLength((int)n);\n+        this.setFixed_length((int)n);\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitVariableLengthInstruction((VariableLengthInstruction)this);\n-        v.visitStackConsumer((StackConsumer)this);\n-        v.visitBranchInstruction((BranchInstruction)this);\n-        v.visitSelect((Select)this);\n-        v.visitLOOKUPSWITCH(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitVariableLengthInstruction((VariableLengthInstruction)this);\n+        visitor.visitStackConsumer((StackConsumer)this);\n+        visitor.visitBranchInstruction((BranchInstruction)this);\n+        visitor.visitSelect((Select)this);\n+        visitor.visitLOOKUPSWITCH(this);\n     }\n     \n-    public void dump(final DataOutputStream out) throws IOException {\n-        super.dump(out);\n-        final int matchLength = this.getMatch_length();\n-        out.writeInt(matchLength);\n-        for (int i = 0; i < matchLength; ++i) {\n-            out.writeInt(super.getMatch(i));\n-            out.writeInt(this.setIndices(i, this.getTargetOffset(super.getTarget(i))));\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        final int match_length = this.getMatch_length();\n+        dataOutputStream.writeInt(match_length);\n+        for (int i = 0; i < match_length; ++i) {\n+            dataOutputStream.writeInt(super.getMatch(i));\n+            dataOutputStream.writeInt(this.setIndices(i, this.getTargetOffset(super.getTarget(i))));\n         }\n     }\n     \n-    protected void initFromFile(final ByteSequence bytes, final boolean wide) throws IOException {\n-        super.initFromFile(bytes, wide);\n-        final int matchLength = bytes.readInt();\n-        this.setMatch_length(matchLength);\n-        final short fixedLength = (short)(9 + matchLength * 8);\n-        this.setFixed_length((int)fixedLength);\n-        final short length = (short)(matchLength + super.getPadding());\n-        super.setLength((int)length);\n-        super.setMatches(new int[matchLength]);\n-        super.setIndices(new int[matchLength]);\n-        super.setTargets(new InstructionHandle[matchLength]);\n-        for (int i = 0; i < matchLength; ++i) {\n-            super.setMatch(i, bytes.readInt());\n-            super.setIndices(i, bytes.readInt());\n+    protected void initFromFile(final ByteSequence byteSequence, final boolean b) throws IOException {\n+        super.initFromFile(byteSequence, b);\n+        final int int1 = byteSequence.readInt();\n+        this.setMatch_length(int1);\n+        this.setFixed_length((int)(short)(9 + int1 * 8));\n+        super.setLength((int)(short)(int1 + super.getPadding()));\n+        super.setMatches(new int[int1]);\n+        super.setIndices(new int[int1]);\n+        super.setTargets(new InstructionHandle[int1]);\n+        for (int i = 0; i < int1; ++i) {\n+            super.setMatch(i, byteSequence.readInt());\n+            super.setIndices(i, byteSequence.readInt());\n         }\n     }\n }\n"}]}
