{"diffoscope-json-version": 1, "source1": "first/SuppressWarningsHolder.class", "source2": "second/SuppressWarningsHolder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -24,261 +24,256 @@\n     private static final String CHECK_SUFFIX = \"check\";\n     private static final String ALL_WARNING_MATCHING_ID = \"all\";\n     private static final Map<String, String> CHECK_ALIAS_MAP;\n     private static final ThreadLocal<List<SuppressWarningsHolder.Entry>> ENTRIES;\n     private static final Pattern WHITESPACE;\n     private static final Pattern NEWLINE;\n     \n-    public static String getDefaultAlias(final String sourceName) {\n-        int endIndex = sourceName.length();\n-        final String sourceNameLower = sourceName.toLowerCase(Locale.ENGLISH);\n-        if (sourceNameLower.endsWith(\"check\")) {\n-            endIndex -= \"check\".length();\n+    public static String getDefaultAlias(final String s) {\n+        int length = s.length();\n+        final String lowerCase = s.toLowerCase(Locale.ENGLISH);\n+        if (lowerCase.endsWith(\"check\")) {\n+            length -= \"check\".length();\n         }\n-        final int startIndex = sourceNameLower.lastIndexOf(46) + 1;\n-        return sourceNameLower.substring(startIndex, endIndex);\n+        return lowerCase.substring(lowerCase.lastIndexOf(46) + 1, length);\n     }\n     \n-    public static String getAlias(final String sourceName) {\n-        String checkAlias = (String)SuppressWarningsHolder.CHECK_ALIAS_MAP.get(sourceName);\n-        if (checkAlias == null) {\n-            checkAlias = getDefaultAlias(sourceName);\n+    public static String getAlias(final String s) {\n+        String defaultAlias = (String)SuppressWarningsHolder.CHECK_ALIAS_MAP.get(s);\n+        if (defaultAlias == null) {\n+            defaultAlias = getDefaultAlias(s);\n         }\n-        return checkAlias;\n+        return defaultAlias;\n     }\n     \n-    private static void registerAlias(final String sourceName, final String checkAlias) {\n-        SuppressWarningsHolder.CHECK_ALIAS_MAP.put(sourceName, checkAlias);\n+    private static void registerAlias(final String s, final String s2) {\n+        SuppressWarningsHolder.CHECK_ALIAS_MAP.put(s, s2);\n     }\n     \n-    public void setAliasList(final String... aliasList) {\n-        for (final String sourceAlias : aliasList) {\n-            final int index = sourceAlias.indexOf(61);\n+    public void setAliasList(final String... array) {\n+        for (final String s : array) {\n+            final int index = s.indexOf(61);\n             if (index > 0) {\n-                registerAlias(sourceAlias.substring(0, index), sourceAlias.substring(index + 1));\n+                registerAlias(s.substring(0, index), s.substring(index + 1));\n             }\n-            else if (!sourceAlias.isEmpty()) {\n-                throw new IllegalArgumentException(\"'=' expected in alias list item: \" + sourceAlias);\n+            else if (!s.isEmpty()) {\n+                throw new IllegalArgumentException(\"'=' expected in alias list item: \" + s);\n             }\n         }\n     }\n     \n-    public static boolean isSuppressed(final AuditEvent event) {\n-        final List<SuppressWarningsHolder.Entry> entries = (List<SuppressWarningsHolder.Entry>)SuppressWarningsHolder.ENTRIES.get();\n-        final String sourceName = event.getSourceName();\n-        final String checkAlias = getAlias(sourceName);\n-        final int line = event.getLine();\n-        final int column = event.getColumn();\n-        boolean suppressed = false;\n-        for (final SuppressWarningsHolder.Entry entry : entries) {\n-            final boolean afterStart = isSuppressedAfterEventStart(line, column, entry);\n-            final boolean beforeEnd = isSuppressedBeforeEventEnd(line, column, entry);\n+    public static boolean isSuppressed(final AuditEvent auditEvent) {\n+        final List list = (List)SuppressWarningsHolder.ENTRIES.get();\n+        final String alias = getAlias(auditEvent.getSourceName());\n+        final int line = auditEvent.getLine();\n+        final int column = auditEvent.getColumn();\n+        boolean b = false;\n+        for (final SuppressWarningsHolder.Entry entry : list) {\n+            final boolean suppressedAfterEventStart = isSuppressedAfterEventStart(line, column, entry);\n+            final boolean suppressedBeforeEventEnd = isSuppressedBeforeEventEnd(line, column, entry);\n             final String checkName = entry.getCheckName();\n-            final boolean nameMatches = \"all\".equals(checkName) || checkName.equalsIgnoreCase(checkAlias) || getDefaultAlias(checkName).equalsIgnoreCase(checkAlias);\n-            if (afterStart && beforeEnd && (nameMatches || checkName.equals(event.getModuleId()))) {\n-                suppressed = true;\n+            final boolean b2 = \"all\".equals(checkName) || checkName.equalsIgnoreCase(alias) || getDefaultAlias(checkName).equalsIgnoreCase(alias);\n+            if (suppressedAfterEventStart && suppressedBeforeEventEnd && (b2 || checkName.equals(auditEvent.getModuleId()))) {\n+                b = true;\n                 break;\n             }\n         }\n-        return suppressed;\n+        return b;\n     }\n     \n-    private static boolean isSuppressedAfterEventStart(final int line, final int column, final SuppressWarningsHolder.Entry entry) {\n-        return entry.getFirstLine() < line || (entry.getFirstLine() == line && (column == 0 || entry.getFirstColumn() <= column));\n+    private static boolean isSuppressedAfterEventStart(final int n, final int n2, final SuppressWarningsHolder.Entry entry) {\n+        return entry.getFirstLine() < n || (entry.getFirstLine() == n && (n2 == 0 || entry.getFirstColumn() <= n2));\n     }\n     \n-    private static boolean isSuppressedBeforeEventEnd(final int line, final int column, final SuppressWarningsHolder.Entry entry) {\n-        return entry.getLastLine() > line || (entry.getLastLine() == line && entry.getLastColumn() >= column);\n+    private static boolean isSuppressedBeforeEventEnd(final int n, final int n2, final SuppressWarningsHolder.Entry entry) {\n+        return entry.getLastLine() > n || (entry.getLastLine() == n && entry.getLastColumn() >= n2);\n     }\n     \n     public int[] getDefaultTokens() {\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getAcceptableTokens() {\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 159 };\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         ((List)SuppressWarningsHolder.ENTRIES.get()).clear();\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        String identifier = getIdentifier(getNthChild(ast, 1));\n-        if (identifier.startsWith(\"java.lang.\")) {\n-            identifier = identifier.substring(\"java.lang.\".length());\n-        }\n-        if (\"SuppressWarnings\".equals(identifier)) {\n-            getAnnotationTarget(ast).ifPresent(targetAST -> addSuppressions(getAllAnnotationValues(ast), targetAST));\n+    public void visitToken(final DetailAST detailAST) {\n+        String anObject = getIdentifier(getNthChild(detailAST, 1));\n+        if (anObject.startsWith(\"java.lang.\")) {\n+            anObject = anObject.substring(\"java.lang.\".length());\n+        }\n+        if (\"SuppressWarnings\".equals(anObject)) {\n+            getAnnotationTarget(detailAST).ifPresent(detailAST3 -> addSuppressions(getAllAnnotationValues(detailAST2), detailAST3));\n         }\n     }\n     \n-    private static void addSuppressions(final List<String> values, final DetailAST targetAST) {\n-        final int firstLine = targetAST.getLineNo();\n-        final int firstColumn = targetAST.getColumnNo();\n-        final DetailAST nextAST = targetAST.getNextSibling();\n-        int lastLine;\n-        int lastColumn;\n-        if (nextAST == null) {\n-            lastLine = Integer.MAX_VALUE;\n-            lastColumn = Integer.MAX_VALUE;\n+    private static void addSuppressions(final List<String> list, final DetailAST detailAST) {\n+        final int lineNo = detailAST.getLineNo();\n+        final int columnNo = detailAST.getColumnNo();\n+        final DetailAST nextSibling = detailAST.getNextSibling();\n+        int lineNo2;\n+        int columnNo2;\n+        if (nextSibling == null) {\n+            lineNo2 = Integer.MAX_VALUE;\n+            columnNo2 = Integer.MAX_VALUE;\n         }\n         else {\n-            lastLine = nextAST.getLineNo();\n-            lastColumn = nextAST.getColumnNo();\n+            lineNo2 = nextSibling.getLineNo();\n+            columnNo2 = nextSibling.getColumnNo();\n         }\n-        final List<SuppressWarningsHolder.Entry> entries = (List<SuppressWarningsHolder.Entry>)SuppressWarningsHolder.ENTRIES.get();\n-        for (final String value : values) {\n-            final String checkName = removeCheckstylePrefixIfExists(value);\n-            entries.add(new SuppressWarningsHolder.Entry(checkName, firstLine, firstColumn, lastLine, lastColumn));\n+        final List list2 = (List)SuppressWarningsHolder.ENTRIES.get();\n+        final Iterator<String> iterator = list.iterator();\n+        while (iterator.hasNext()) {\n+            list2.add(new SuppressWarningsHolder.Entry(removeCheckstylePrefixIfExists(iterator.next()), lineNo, columnNo, lineNo2, columnNo2));\n         }\n     }\n     \n-    private static String removeCheckstylePrefixIfExists(final String checkName) {\n-        String result = checkName;\n-        if (checkName.startsWith(\"checkstyle:\")) {\n-            result = checkName.substring(\"checkstyle:\".length());\n+    private static String removeCheckstylePrefixIfExists(final String s) {\n+        String substring = s;\n+        if (s.startsWith(\"checkstyle:\")) {\n+            substring = s.substring(\"checkstyle:\".length());\n         }\n-        return result;\n+        return substring;\n     }\n     \n-    private static List<String> getAllAnnotationValues(final DetailAST ast) {\n-        List<String> values = Collections.emptyList();\n-        final DetailAST lparenAST = ast.findFirstToken(76);\n-        if (lparenAST != null) {\n-            final DetailAST nextAST = lparenAST.getNextSibling();\n-            final int nextType = nextAST.getType();\n-            switch (nextType) {\n+    private static List<String> getAllAnnotationValues(final DetailAST detailAST) {\n+        Object o = Collections.emptyList();\n+        final DetailAST firstToken = detailAST.findFirstToken(76);\n+        if (firstToken != null) {\n+            final DetailAST nextSibling = firstToken.getNextSibling();\n+            switch (nextSibling.getType()) {\n                 case 28:\n                 case 162: {\n-                    values = getAnnotationValues(nextAST);\n+                    o = getAnnotationValues(nextSibling);\n                     break;\n                 }\n                 case 160: {\n-                    values = getAnnotationValues(getNthChild(nextAST, 2));\n+                    o = getAnnotationValues(getNthChild(nextSibling, 2));\n                     break;\n                 }\n                 case 77: {\n                     break;\n                 }\n                 default: {\n-                    throw new IllegalArgumentException(\"Unexpected AST: \" + nextAST);\n+                    throw new IllegalArgumentException(\"Unexpected AST: \" + nextSibling);\n                 }\n             }\n         }\n-        return values;\n+        return (List<String>)o;\n     }\n     \n-    private static Optional<DetailAST> getAnnotationTarget(final DetailAST ast) {\n-        final DetailAST parentAST = ast.getParent();\n-        Optional<DetailAST> result = null;\n-        switch (parentAST.getType()) {\n+    private static Optional<DetailAST> getAnnotationTarget(final DetailAST detailAST) {\n+        final DetailAST parent = detailAST.getParent();\n+        Object o = null;\n+        switch (parent.getType()) {\n             case 5:\n             case 158:\n             case 159:\n             case 160: {\n-                result = Optional.of(parentAST.getParent());\n+                o = Optional.of(parent.getParent());\n                 break;\n             }\n             case 94: {\n-                result = Optional.empty();\n+                o = Optional.empty();\n                 break;\n             }\n             case 162: {\n-                result = getAnnotationTarget(parentAST);\n+                o = getAnnotationTarget(parent);\n                 break;\n             }\n             default: {\n-                throw new IllegalArgumentException(\"Unexpected container AST: \" + parentAST);\n+                throw new IllegalArgumentException(\"Unexpected container AST: \" + parent);\n             }\n         }\n-        return result;\n+        return (Optional<DetailAST>)o;\n     }\n     \n-    private static DetailAST getNthChild(final DetailAST ast, final int index) {\n-        DetailAST child = ast.getFirstChild();\n-        for (int i = 0; i < index && child != null; child = child.getNextSibling(), ++i) {}\n-        return child;\n+    private static DetailAST getNthChild(final DetailAST detailAST, final int n) {\n+        DetailAST detailAST2 = detailAST.getFirstChild();\n+        for (int n2 = 0; n2 < n && detailAST2 != null; detailAST2 = detailAST2.getNextSibling(), ++n2) {}\n+        return detailAST2;\n     }\n     \n-    private static String getIdentifier(final DetailAST ast) {\n-        if (ast == null) {\n+    private static String getIdentifier(final DetailAST detailAST) {\n+        if (detailAST == null) {\n             throw new IllegalArgumentException(\"Identifier AST expected, but get null.\");\n         }\n-        String identifier;\n-        if (ast.getType() == 58) {\n-            identifier = ast.getText();\n+        String text;\n+        if (detailAST.getType() == 58) {\n+            text = detailAST.getText();\n         }\n         else {\n-            identifier = getIdentifier(ast.getFirstChild()) + \".\" + getIdentifier(ast.getLastChild());\n+            text = getIdentifier(detailAST.getFirstChild()) + \".\" + getIdentifier(detailAST.getLastChild());\n         }\n-        return identifier;\n+        return text;\n     }\n     \n-    private static String getStringExpr(final DetailAST ast) {\n-        final DetailAST firstChild = ast.getFirstChild();\n-        String expr = \"\";\n+    private static String getStringExpr(final DetailAST detailAST) {\n+        final DetailAST firstChild = detailAST.getFirstChild();\n+        String s = \"\";\n         switch (firstChild.getType()) {\n             case 139: {\n-                final String quotedText = firstChild.getText();\n-                expr = quotedText.substring(1, quotedText.length() - 1);\n+                final String text = firstChild.getText();\n+                s = text.substring(1, text.length() - 1);\n                 break;\n             }\n             case 58: {\n-                expr = firstChild.getText();\n+                s = firstChild.getText();\n                 break;\n             }\n             case 59: {\n-                expr = firstChild.getLastChild().getText();\n+                s = firstChild.getLastChild().getText();\n                 break;\n             }\n             case 204: {\n-                final String textBlockContent = firstChild.getFirstChild().getText();\n-                expr = getContentWithoutPrecedingWhitespace(textBlockContent);\n+                s = getContentWithoutPrecedingWhitespace(firstChild.getFirstChild().getText());\n                 break;\n             }\n         }\n-        return expr;\n+        return s;\n     }\n     \n-    private static List<String> getAnnotationValues(final DetailAST ast) {\n-        List<String> annotationValues = null;\n-        switch (ast.getType()) {\n+    private static List<String> getAnnotationValues(final DetailAST detailAST) {\n+        List<String> list = null;\n+        switch (detailAST.getType()) {\n             case 28: {\n-                annotationValues = Collections.singletonList(getStringExpr(ast));\n+                list = Collections.singletonList(getStringExpr(detailAST));\n                 break;\n             }\n             case 162: {\n-                annotationValues = findAllExpressionsInChildren(ast);\n+                list = findAllExpressionsInChildren(detailAST);\n                 break;\n             }\n             default: {\n-                throw new IllegalArgumentException(\"Expression or annotation array initializer AST expected: \" + ast);\n+                throw new IllegalArgumentException(\"Expression or annotation array initializer AST expected: \" + detailAST);\n             }\n         }\n-        return annotationValues;\n+        return list;\n     }\n     \n-    private static List<String> findAllExpressionsInChildren(final DetailAST parent) {\n-        final List<String> valueList = new LinkedList<String>();\n-        for (DetailAST childAST = parent.getFirstChild(); childAST != null; childAST = childAST.getNextSibling()) {\n-            if (childAST.getType() == 28) {\n-                valueList.add(getStringExpr(childAST));\n+    private static List<String> findAllExpressionsInChildren(final DetailAST detailAST) {\n+        final LinkedList list = new LinkedList();\n+        for (DetailAST detailAST2 = detailAST.getFirstChild(); detailAST2 != null; detailAST2 = detailAST2.getNextSibling()) {\n+            if (detailAST2.getType() == 28) {\n+                list.add(getStringExpr(detailAST2));\n             }\n         }\n-        return valueList;\n+        return list;\n     }\n     \n-    private static String getContentWithoutPrecedingWhitespace(final String textBlockContent) {\n-        final String contentWithNoPrecedingNewline = SuppressWarningsHolder.NEWLINE.matcher(textBlockContent).replaceAll(\"\");\n-        return SuppressWarningsHolder.WHITESPACE.matcher(contentWithNoPrecedingNewline).replaceAll(\"\");\n+    private static String getContentWithoutPrecedingWhitespace(final String input) {\n+        return SuppressWarningsHolder.WHITESPACE.matcher(SuppressWarningsHolder.NEWLINE.matcher(input).replaceAll(\"\")).replaceAll(\"\");\n     }\n     \n     public void destroy() {\n         super.destroy();\n         SuppressWarningsHolder.ENTRIES.remove();\n     }\n     \n"}]}
