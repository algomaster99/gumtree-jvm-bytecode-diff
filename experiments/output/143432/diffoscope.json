{"diffoscope-json-version": 1, "source1": "first/FileText.class", "source2": "second/FileText.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,14 +29,18 @@\n     private static final Pattern LINE_TERMINATOR;\n     private final File file;\n     private final Charset charset;\n     private final String[] lines;\n     private String fullText;\n     private int[] lineBreaks;\n     \n+    static {\n+        LINE_TERMINATOR = Pattern.compile(\"\\\\n|\\\\r\\\\n?\");\n+    }\n+    \n     public FileText(final FileText fileText) {\n         this.file = fileText.file;\n         this.charset = fileText.charset;\n         this.fullText = fileText.fullText;\n         this.lines = fileText.lines.clone();\n         if (fileText.lineBreaks != null) {\n             this.lineBreaks = fileText.lineBreaks.clone();\n@@ -64,41 +68,83 @@\n             decoder.onUnmappableCharacter(CodingErrorAction.REPLACE);\n         }\n         catch (final UnsupportedCharsetException ex) {\n             final String message = \"Unsupported charset: \" + charsetName;\n             throw new IllegalStateException(message, ex);\n         }\n         this.fullText = readFile(file, decoder);\n-        try (final BufferedReader reader = new BufferedReader(new StringReader(this.fullText))) {\n-            final ArrayList<String> textLines = new ArrayList<String>();\n-            while (true) {\n-                final String line = reader.readLine();\n-                if (line == null) {\n-                    break;\n+        Throwable t = null;\n+        try {\n+            final BufferedReader reader = new BufferedReader(new StringReader(this.fullText));\n+            try {\n+                final ArrayList<String> textLines = new ArrayList<String>();\n+                while (true) {\n+                    final String line = reader.readLine();\n+                    if (line == null) {\n+                        break;\n+                    }\n+                    textLines.add(line);\n+                }\n+                this.lines = textLines.toArray(CommonUtil.EMPTY_STRING_ARRAY);\n+            }\n+            finally {\n+                if (reader != null) {\n+                    reader.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n                 }\n-                textLines.add(line);\n             }\n-            this.lines = textLines.toArray(CommonUtil.EMPTY_STRING_ARRAY);\n         }\n     }\n     \n     private static String readFile(final File inputFile, final CharsetDecoder decoder) throws IOException {\n         if (!inputFile.exists()) {\n-            throw new FileNotFoundException(inputFile.getPath() + \" (No such file or directory)\");\n+            throw new FileNotFoundException(String.valueOf(inputFile.getPath()) + \" (No such file or directory)\");\n         }\n         final StringBuilder buf = new StringBuilder(1024);\n         final InputStream stream = Files.newInputStream(inputFile.toPath(), new OpenOption[0]);\n-        try (final Reader reader = new InputStreamReader(stream, decoder)) {\n-            final char[] chars = new char[1024];\n-            while (true) {\n-                final int len = reader.read(chars);\n-                if (len == -1) {\n-                    break;\n+        Throwable t = null;\n+        try {\n+            final Reader reader = new InputStreamReader(stream, decoder);\n+            try {\n+                final char[] chars = new char[1024];\n+                while (true) {\n+                    final int len = reader.read(chars);\n+                    if (len == -1) {\n+                        break;\n+                    }\n+                    buf.append(chars, 0, len);\n+                }\n+            }\n+            finally {\n+                if (reader != null) {\n+                    reader.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n                 }\n-                buf.append(chars, 0, len);\n             }\n         }\n         return buf.toString();\n     }\n     \n     public String get(final int lineNo) {\n         return this.lines[lineNo];\n@@ -148,12 +194,8 @@\n         }\n         return this.lineBreaks;\n     }\n     \n     public int size() {\n         return this.lines.length;\n     }\n-    \n-    static {\n-        LINE_TERMINATOR = Pattern.compile(\"\\\\n|\\\\r\\\\n?\");\n-    }\n }\n"}]}
