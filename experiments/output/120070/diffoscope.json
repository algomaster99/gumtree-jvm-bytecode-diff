{"diffoscope-json-version": 1, "source1": "first/JavadocPropertiesGenerator.class", "source2": "second/JavadocPropertiesGenerator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,26 +3,29 @@\n \n import java.util.regex.Matcher;\n import com.puppycrawl.tools.checkstyle.api.DetailNode;\n import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n import java.util.function.Consumer;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import java.io.IOException;\n-import java.util.Objects;\n import java.io.PrintWriter;\n import java.nio.charset.StandardCharsets;\n import com.puppycrawl.tools.checkstyle.api.CheckstyleException;\n import picocli.CommandLine;\n import java.util.regex.Pattern;\n \n public final class JavadocPropertiesGenerator\n {\n     private static final Pattern END_OF_SENTENCE_PATTERN;\n     private static final int USAGE_HELP_WIDTH = 100;\n     \n+    static {\n+        END_OF_SENTENCE_PATTERN = Pattern.compile(\"(([^.?!]|[.?!](?!\\\\s|$))*+[.?!])(\\\\s|$)\");\n+    }\n+    \n     private JavadocPropertiesGenerator() {\n     }\n     \n     public static void main(final String... args) throws CheckstyleException {\n         final JavadocPropertiesGenerator.CliOptions cliOptions = new JavadocPropertiesGenerator.CliOptions();\n         final CommandLine cmd = new CommandLine((Object)cliOptions).setUsageHelpWidth(100);\n         try {\n@@ -37,36 +40,56 @@\n         catch (final CommandLine.ParameterException ex) {\n             System.err.println(ex.getMessage());\n             ex.getCommandLine().usage(System.err);\n         }\n     }\n     \n     private static void writePropertiesFile(final JavadocPropertiesGenerator.CliOptions options) throws CheckstyleException {\n-        try (final PrintWriter writer = new PrintWriter(options.outputFile, StandardCharsets.UTF_8)) {\n-            final DetailAST top = JavaParser.parseFile(options.inputFile, JavaParser.Options.WITH_COMMENTS).getFirstChild();\n-            final DetailAST objBlock = getClassBody(top);\n-            if (objBlock != null) {\n-                final DetailAST objBlock2 = objBlock;\n-                final PrintWriter obj = writer;\n-                Objects.requireNonNull(obj);\n-                iteratePublicStaticIntFields(objBlock2, obj::println);\n+        try {\n+            Throwable t = null;\n+            try {\n+                final PrintWriter writer = new PrintWriter(options.outputFile, StandardCharsets.UTF_8);\n+                try {\n+                    final DetailAST top = JavaParser.parseFile(options.inputFile, JavaParser.Options.WITH_COMMENTS).getFirstChild();\n+                    final DetailAST objBlock = getClassBody(top);\n+                    if (objBlock != null) {\n+                        iteratePublicStaticIntFields(objBlock, writer::println);\n+                    }\n+                }\n+                finally {\n+                    if (writer != null) {\n+                        writer.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n             }\n         }\n         catch (final IOException ex) {\n-            throw new CheckstyleException(\"Failed to write javadoc properties of '\" + options.inputFile + \"' to '\" + options.outputFile, (Throwable)ex);\n+            throw new CheckstyleException(\"Failed to write javadoc properties of '\" + options.inputFile + \"' to '\" + options.outputFile + \"'\", (Throwable)ex);\n         }\n     }\n     \n     private static void iteratePublicStaticIntFields(final DetailAST objBlock, final Consumer<String> consumer) throws CheckstyleException {\n         for (DetailAST member = objBlock.getFirstChild(); member != null; member = member.getNextSibling()) {\n             if (isPublicStaticFinalIntField(member)) {\n                 final DetailAST modifiers = member.findFirstToken(5);\n                 final String firstJavadocSentence = getFirstJavadocSentence(modifiers);\n                 if (firstJavadocSentence != null) {\n-                    consumer.accept(getName(member) + \"=\" + firstJavadocSentence.trim());\n+                    consumer.accept(String.valueOf(getName(member)) + \"=\" + firstJavadocSentence.trim());\n                 }\n             }\n         }\n     }\n     \n     private static DetailAST getClassBody(final DetailAST top) {\n         DetailAST ast;\n@@ -109,15 +132,17 @@\n         }\n         return firstSentence;\n     }\n     \n     private static String getFirstJavadocSentence(final DetailNode tree) throws CheckstyleException {\n         String firstSentence = null;\n         final StringBuilder builder = new StringBuilder(128);\n-        for (final DetailNode node : tree.getChildren()) {\n+        DetailNode[] children;\n+        for (int length = (children = tree.getChildren()).length, i = 0; i < length; ++i) {\n+            final DetailNode node = children[i];\n             if (node.getType() == 10074) {\n                 final Matcher matcher = JavadocPropertiesGenerator.END_OF_SENTENCE_PATTERN.matcher(node.getText());\n                 if (matcher.find()) {\n                     firstSentence = builder.append(matcher.group(1)).toString();\n                     break;\n                 }\n                 builder.append(node.getText());\n@@ -130,15 +155,17 @@\n             }\n         }\n         return firstSentence;\n     }\n     \n     private static void formatInlineCodeTag(final StringBuilder builder, final DetailNode inlineTag) throws CheckstyleException {\n         boolean wrapWithCodeTag = false;\n-        for (final DetailNode node : inlineTag.getChildren()) {\n+        DetailNode[] children;\n+        for (int length = (children = inlineTag.getChildren()).length, i = 0; i < length; ++i) {\n+            final DetailNode node = children[i];\n             switch (node.getType()) {\n                 case 45: {\n                     wrapWithCodeTag = true;\n                     break;\n                 }\n                 case 10074: {\n                     if (wrapWithCodeTag) {\n@@ -168,19 +195,17 @@\n             case 57:\n             case 100:\n             case 10074: {\n                 builder.append(node.getText());\n                 break;\n             }\n             default: {\n-                for (final DetailNode child : node.getChildren()) {\n+                DetailNode[] children;\n+                for (int length = (children = node.getChildren()).length, i = 0; i < length; ++i) {\n+                    final DetailNode child = children[i];\n                     formatHtmlElement(builder, child);\n                 }\n                 break;\n             }\n         }\n     }\n-    \n-    static {\n-        END_OF_SENTENCE_PATTERN = Pattern.compile(\"(([^.?!]|[.?!](?!\\\\s|$))*+[.?!])(\\\\s|$)\");\n-    }\n }\n"}]}
