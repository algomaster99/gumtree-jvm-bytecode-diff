{"diffoscope-json-version": 1, "source1": "first/RegexFTPFileEntryParserImpl.class", "source2": "second/RegexFTPFileEntryParserImpl.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,65 +9,65 @@\n \n public abstract class RegexFTPFileEntryParserImpl extends FTPFileEntryParserImpl\n {\n     private Pattern pattern;\n     private MatchResult result;\n     protected Matcher _matcher_;\n     \n-    public RegexFTPFileEntryParserImpl(final String regex) {\n-        this.compileRegex(regex, 0);\n+    public RegexFTPFileEntryParserImpl(final String s) {\n+        this.compileRegex(s, 0);\n     }\n     \n-    public RegexFTPFileEntryParserImpl(final String regex, final int flags) {\n-        this.compileRegex(regex, flags);\n+    public RegexFTPFileEntryParserImpl(final String s, final int n) {\n+        this.compileRegex(s, n);\n     }\n     \n-    private void compileRegex(final String regex, final int flags) {\n+    private void compileRegex(final String s, final int flags) {\n         try {\n-            this.pattern = Pattern.compile(regex, flags);\n+            this.pattern = Pattern.compile(s, flags);\n         }\n-        catch (final PatternSyntaxException pse) {\n-            throw new IllegalArgumentException(\"Unparseable regex supplied: \" + regex);\n+        catch (final PatternSyntaxException ex) {\n+            throw new IllegalArgumentException(\"Unparseable regex supplied: \" + s);\n         }\n     }\n     \n     public int getGroupCnt() {\n         if (this.result == null) {\n             return 0;\n         }\n         return this.result.groupCount();\n     }\n     \n     public String getGroupsAsString() {\n-        final StringBuilder b = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder();\n         for (int i = 1; i <= this.result.groupCount(); ++i) {\n-            b.append(i).append(\") \").append(this.result.group(i)).append(System.lineSeparator());\n+            sb.append(i).append(\") \").append(this.result.group(i)).append(System.lineSeparator());\n         }\n-        return b.toString();\n+        return sb.toString();\n     }\n     \n-    public String group(final int matchnum) {\n+    public String group(final int n) {\n         if (this.result == null) {\n             return null;\n         }\n-        return this.result.group(matchnum);\n+        return this.result.group(n);\n     }\n     \n-    public boolean matches(final String s) {\n+    public boolean matches(final String input) {\n         this.result = null;\n-        this._matcher_ = this.pattern.matcher(s);\n+        this._matcher_ = this.pattern.matcher(input);\n         if (this._matcher_.matches()) {\n             this.result = this._matcher_.toMatchResult();\n         }\n         return null != this.result;\n     }\n     \n-    public boolean setRegex(final String regex) {\n-        this.compileRegex(regex, 0);\n+    public boolean setRegex(final String s) {\n+        this.compileRegex(s, 0);\n         return true;\n     }\n     \n-    public boolean setRegex(final String regex, final int flags) {\n-        this.compileRegex(regex, flags);\n+    public boolean setRegex(final String s, final int n) {\n+        this.compileRegex(s, n);\n         return true;\n     }\n }\n"}]}
