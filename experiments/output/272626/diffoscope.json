{"diffoscope-json-version": 1, "source1": "first/OneStatementPerLineCheck.class", "source2": "second/OneStatementPerLineCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -36,104 +36,103 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 45, 35, 37, 181 };\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         this.lastStatementEnd = 0;\n         this.lastVariableResourceStatementEnd = 0;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        switch (ast.getType()) {\n+    public void visitToken(final DetailAST detailAST) {\n+        switch (detailAST.getType()) {\n             case 45: {\n-                this.checkIfSemicolonIsInDifferentLineThanPrevious(ast);\n+                this.checkIfSemicolonIsInDifferentLineThanPrevious(detailAST);\n                 break;\n             }\n             case 37: {\n-                this.forStatementEnd = ast.getLineNo();\n+                this.forStatementEnd = detailAST.getLineNo();\n                 break;\n             }\n             case 181: {\n                 this.isInLambda = true;\n                 this.countOfSemiInLambda.push(Integer.valueOf(0));\n                 break;\n             }\n             default: {\n                 this.inForHeader = true;\n                 break;\n             }\n         }\n     }\n     \n-    public void leaveToken(final DetailAST ast) {\n-        switch (ast.getType()) {\n+    public void leaveToken(final DetailAST detailAST) {\n+        switch (detailAST.getType()) {\n             case 45: {\n-                this.lastStatementEnd = ast.getLineNo();\n+                this.lastStatementEnd = detailAST.getLineNo();\n                 this.forStatementEnd = 0;\n                 this.lambdaStatementEnd = 0;\n                 break;\n             }\n             case 37: {\n                 this.inForHeader = false;\n                 break;\n             }\n             case 181: {\n                 this.countOfSemiInLambda.pop();\n                 if (this.countOfSemiInLambda.isEmpty()) {\n                     this.isInLambda = false;\n                 }\n-                this.lambdaStatementEnd = ast.getLineNo();\n+                this.lambdaStatementEnd = detailAST.getLineNo();\n                 break;\n             }\n         }\n     }\n     \n-    private void checkIfSemicolonIsInDifferentLineThanPrevious(final DetailAST ast) {\n-        DetailAST currentStatement = ast;\n-        final DetailAST previousSibling = ast.getPreviousSibling();\n-        final boolean isUnnecessarySemicolon = previousSibling == null || previousSibling.getType() == 177 || ast.getParent().getType() == 1;\n-        if (!isUnnecessarySemicolon) {\n-            currentStatement = ast.getPreviousSibling();\n+    private void checkIfSemicolonIsInDifferentLineThanPrevious(final DetailAST detailAST) {\n+        DetailAST previousSibling = detailAST;\n+        final DetailAST previousSibling2 = detailAST.getPreviousSibling();\n+        if (previousSibling2 != null && previousSibling2.getType() != 177 && detailAST.getParent().getType() != 1) {\n+            previousSibling = detailAST.getPreviousSibling();\n         }\n         if (this.isInLambda) {\n-            this.checkLambda(ast, currentStatement);\n+            this.checkLambda(detailAST, previousSibling);\n         }\n-        else if (isResource(ast.getParent())) {\n-            this.checkResourceVariable(ast);\n+        else if (isResource(detailAST.getParent())) {\n+            this.checkResourceVariable(detailAST);\n         }\n-        else if (!this.inForHeader && isOnTheSameLine(currentStatement, this.lastStatementEnd, this.forStatementEnd, this.lambdaStatementEnd)) {\n-            this.log(ast, \"multiple.statements.line\", new Object[0]);\n+        else if (!this.inForHeader && isOnTheSameLine(previousSibling, this.lastStatementEnd, this.forStatementEnd, this.lambdaStatementEnd)) {\n+            this.log(detailAST, \"multiple.statements.line\", new Object[0]);\n         }\n     }\n     \n-    private void checkLambda(final DetailAST ast, final DetailAST currentStatement) {\n-        int countOfSemiInCurrentLambda = (int)Integer.valueOf(this.countOfSemiInLambda.pop());\n-        ++countOfSemiInCurrentLambda;\n-        this.countOfSemiInLambda.push(Integer.valueOf(countOfSemiInCurrentLambda));\n-        if (!this.inForHeader && countOfSemiInCurrentLambda > 1 && isOnTheSameLine(currentStatement, this.lastStatementEnd, this.forStatementEnd, this.lambdaStatementEnd)) {\n-            this.log(ast, \"multiple.statements.line\", new Object[0]);\n+    private void checkLambda(final DetailAST detailAST, final DetailAST detailAST2) {\n+        int intValue = (int)Integer.valueOf(this.countOfSemiInLambda.pop());\n+        ++intValue;\n+        this.countOfSemiInLambda.push(Integer.valueOf(intValue));\n+        if (!this.inForHeader && intValue > 1 && isOnTheSameLine(detailAST2, this.lastStatementEnd, this.forStatementEnd, this.lambdaStatementEnd)) {\n+            this.log(detailAST, \"multiple.statements.line\", new Object[0]);\n         }\n     }\n     \n-    private static boolean isResource(final DetailAST ast) {\n-        return ast.getType() == 177 || ast.getType() == 176;\n+    private static boolean isResource(final DetailAST detailAST) {\n+        return detailAST.getType() == 177 || detailAST.getType() == 176;\n     }\n     \n-    private void checkResourceVariable(final DetailAST currentStatement) {\n+    private void checkResourceVariable(final DetailAST detailAST) {\n         if (this.treatTryResourcesAsStatement) {\n-            final DetailAST nextNode = currentStatement.getNextSibling();\n-            if (currentStatement.getPreviousSibling().findFirstToken(80) != null) {\n-                this.lastVariableResourceStatementEnd = currentStatement.getLineNo();\n+            final DetailAST nextSibling = detailAST.getNextSibling();\n+            if (detailAST.getPreviousSibling().findFirstToken(80) != null) {\n+                this.lastVariableResourceStatementEnd = detailAST.getLineNo();\n             }\n-            if (nextNode.findFirstToken(80) != null && nextNode.getLineNo() == this.lastVariableResourceStatementEnd) {\n-                this.log(currentStatement, \"multiple.statements.line\", new Object[0]);\n+            if (nextSibling.findFirstToken(80) != null && nextSibling.getLineNo() == this.lastVariableResourceStatementEnd) {\n+                this.log(detailAST, \"multiple.statements.line\", new Object[0]);\n             }\n         }\n     }\n     \n-    private static boolean isOnTheSameLine(final DetailAST ast, final int lastStatementEnd, final int forStatementEnd, final int lambdaStatementEnd) {\n-        return lastStatementEnd == ast.getLineNo() && forStatementEnd != ast.getLineNo() && lambdaStatementEnd != ast.getLineNo();\n+    private static boolean isOnTheSameLine(final DetailAST detailAST, final int n, final int n2, final int n3) {\n+        return n == detailAST.getLineNo() && n2 != detailAST.getLineNo() && n3 != detailAST.getLineNo();\n     }\n }\n"}]}
