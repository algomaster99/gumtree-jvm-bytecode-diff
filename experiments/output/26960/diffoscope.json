{"diffoscope-json-version": 1, "source1": "first/GzipCompressorInputStream.class", "source2": "second/GzipCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,334 +1,334 @@\n-  SHA-256 checksum 2d31c73c391547b00a1649889d2ab92ec882acc0f07385a919683a7ec9a2798e\n+  SHA-256 checksum bd183d2706f2c067a9f79077b05fcc7a647c193a0bdd888474bb3d2710898697\n   Compiled from \"GzipCompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #37                         // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-  super_class: #91                        // org/apache/commons/compress/compressors/CompressorInputStream\n+  this_class: #2                          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+  super_class: #8                         // org/apache/commons/compress/compressors/CompressorInputStream\n   interfaces: 1, fields: 16, methods: 11, attributes: 3\n Constant pool:\n-    #1 = Methodref          #37.#177      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n-    #2 = Methodref          #91.#178      // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-    #3 = Fieldref           #37.#179      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.buf:[B\n-    #4 = Class              #180          // java/util/zip/Inflater\n-    #5 = Methodref          #4.#181       // java/util/zip/Inflater.\"<init>\":(Z)V\n-    #6 = Fieldref           #37.#182      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.inf:Ljava/util/zip/Inflater;\n-    #7 = Class              #183          // java/util/zip/CRC32\n-    #8 = Methodref          #7.#178       // java/util/zip/CRC32.\"<init>\":()V\n-    #9 = Fieldref           #37.#184      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.crc:Ljava/util/zip/CRC32;\n-   #10 = Fieldref           #37.#185      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.endReached:Z\n-   #11 = Fieldref           #37.#186      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.oneByte:[B\n-   #12 = Class              #187          // org/apache/commons/compress/compressors/gzip/GzipParameters\n-   #13 = Methodref          #12.#178      // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n-   #14 = Fieldref           #37.#188      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-   #15 = Class              #189          // org/apache/commons/compress/utils/CountingInputStream\n-   #16 = Methodref          #15.#190      // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #17 = Fieldref           #37.#191      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #18 = Methodref          #15.#192      // org/apache/commons/compress/utils/CountingInputStream.markSupported:()Z\n-   #19 = Fieldref           #37.#193      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.in:Ljava/io/InputStream;\n-   #20 = Class              #194          // java/io/BufferedInputStream\n-   #21 = Methodref          #20.#190      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #22 = Fieldref           #37.#195      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.decompressConcatenated:Z\n-   #23 = Methodref          #37.#196      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.init:(Z)Z\n-   #24 = Fieldref           #37.#197      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.$assertionsDisabled:Z\n-   #25 = Class              #198          // java/lang/AssertionError\n-   #26 = Methodref          #25.#178      // java/lang/AssertionError.\"<init>\":()V\n-   #27 = Methodref          #134.#199     // java/io/InputStream.read:()I\n-   #28 = Class              #200          // java/io/IOException\n-   #29 = String             #201          // Input is not in the .gz format\n-   #30 = String             #202          // Garbage after a valid .gz stream\n-   #31 = Methodref          #28.#203      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #32 = Class              #204          // java/io/DataInputStream\n-   #33 = Methodref          #32.#190      // java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #34 = InterfaceMethodref #146.#205     // java/io/DataInput.readUnsignedByte:()I\n-   #35 = Class              #206          // java/util/zip/Deflater\n-   #36 = InvokeDynamic      #0:#210       // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n-   #37 = Class              #211          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-   #38 = String             #212          // Reserved flags are set in the .gz header\n-   #39 = Methodref          #213.#214     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n-   #40 = Long               1000l\n-   #42 = Methodref          #12.#215      // org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n-   #43 = Methodref          #12.#216      // org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n-   #44 = Methodref          #12.#217      // org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n-   #45 = Class              #218          // java/lang/String\n-   #46 = Methodref          #37.#219      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.readToNull:(Ljava/io/DataInput;)[B\n-   #47 = Class              #220          // org/apache/commons/compress/utils/CharsetNames\n-   #48 = String             #221          // ISO-8859-1\n-   #49 = Methodref          #45.#222      // java/lang/String.\"<init>\":([BLjava/lang/String;)V\n-   #50 = Methodref          #12.#223      // org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n-   #51 = Methodref          #12.#224      // org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n-   #52 = InterfaceMethodref #146.#225     // java/io/DataInput.readShort:()S\n-   #53 = Methodref          #4.#226       // java/util/zip/Inflater.reset:()V\n-   #54 = Methodref          #7.#226       // java/util/zip/CRC32.reset:()V\n-   #55 = Class              #227          // java/io/ByteArrayOutputStream\n-   #56 = Methodref          #55.#178      // java/io/ByteArrayOutputStream.\"<init>\":()V\n-   #57 = Methodref          #55.#228      // java/io/ByteArrayOutputStream.write:(I)V\n-   #58 = Methodref          #55.#229      // java/io/ByteArrayOutputStream.toByteArray:()[B\n-   #59 = Methodref          #55.#230      // java/io/ByteArrayOutputStream.close:()V\n-   #60 = Class              #231          // java/lang/Throwable\n-   #61 = Methodref          #60.#232      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #62 = Methodref          #37.#233      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.read:([BII)I\n-   #63 = Methodref          #4.#234       // java/util/zip/Inflater.needsInput:()Z\n-   #64 = Methodref          #134.#235     // java/io/InputStream.mark:(I)V\n-   #65 = Methodref          #134.#236     // java/io/InputStream.read:([B)I\n-   #66 = Fieldref           #37.#237      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.bufUsed:I\n-   #67 = Class              #238          // java/io/EOFException\n-   #68 = Methodref          #67.#178      // java/io/EOFException.\"<init>\":()V\n-   #69 = Methodref          #4.#239       // java/util/zip/Inflater.setInput:([BII)V\n-   #70 = Methodref          #4.#240       // java/util/zip/Inflater.inflate:([BII)I\n-   #71 = Class              #241          // java/util/zip/DataFormatException\n-   #72 = String             #242          // Gzip-compressed data is corrupt\n-   #73 = Methodref          #7.#243       // java/util/zip/CRC32.update:([BII)V\n-   #74 = Methodref          #37.#244      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.count:(I)V\n-   #75 = Methodref          #4.#245       // java/util/zip/Inflater.finished:()Z\n-   #76 = Methodref          #134.#226     // java/io/InputStream.reset:()V\n-   #77 = Methodref          #4.#246       // java/util/zip/Inflater.getRemaining:()I\n-   #78 = Methodref          #247.#248     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-   #79 = Methodref          #28.#178      // java/io/IOException.\"<init>\":()V\n-   #80 = Methodref          #7.#249       // java/util/zip/CRC32.getValue:()J\n-   #81 = String             #250          // Gzip-compressed data is corrupt (CRC32 error)\n-   #82 = Methodref          #4.#251       // java/util/zip/Inflater.getBytesWritten:()J\n-   #83 = Long               4294967295l\n-   #85 = String             #252          // Gzip-compressed data is corrupt(uncompressed size mismatch)\n-   #86 = Methodref          #4.#253       // java/util/zip/Inflater.end:()V\n-   #87 = Fieldref           #254.#193     // java/lang/System.in:Ljava/io/InputStream;\n-   #88 = Methodref          #134.#230     // java/io/InputStream.close:()V\n-   #89 = Methodref          #15.#255      // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n-   #90 = Methodref          #256.#257     // java/lang/Class.desiredAssertionStatus:()Z\n-   #91 = Class              #258          // org/apache/commons/compress/compressors/CompressorInputStream\n-   #92 = Class              #259          // org/apache/commons/compress/utils/InputStreamStatistics\n-   #93 = Utf8               FHCRC\n-   #94 = Utf8               I\n-   #95 = Utf8               ConstantValue\n-   #96 = Integer            2\n-   #97 = Utf8               FEXTRA\n-   #98 = Integer            4\n-   #99 = Utf8               FNAME\n-  #100 = Integer            8\n-  #101 = Utf8               FCOMMENT\n-  #102 = Integer            16\n-  #103 = Utf8               FRESERVED\n-  #104 = Integer            224\n-  #105 = Utf8               countingStream\n-  #106 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n-  #107 = Utf8               in\n-  #108 = Utf8               Ljava/io/InputStream;\n-  #109 = Utf8               decompressConcatenated\n-  #110 = Utf8               Z\n-  #111 = Utf8               buf\n-  #112 = Utf8               [B\n-  #113 = Utf8               bufUsed\n-  #114 = Utf8               inf\n-  #115 = Utf8               Ljava/util/zip/Inflater;\n-  #116 = Utf8               crc\n-  #117 = Utf8               Ljava/util/zip/CRC32;\n-  #118 = Utf8               endReached\n-  #119 = Utf8               oneByte\n-  #120 = Utf8               parameters\n-  #121 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #122 = Utf8               $assertionsDisabled\n-  #123 = Utf8               <init>\n-  #124 = Utf8               (Ljava/io/InputStream;)V\n-  #125 = Utf8               Code\n-  #126 = Utf8               LineNumberTable\n-  #127 = Utf8               LocalVariableTable\n-  #128 = Utf8               this\n-  #129 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n-  #130 = Utf8               inputStream\n-  #131 = Utf8               Exceptions\n-  #132 = Utf8               (Ljava/io/InputStream;Z)V\n-  #133 = Utf8               StackMapTable\n-  #134 = Class              #260          // java/io/InputStream\n-  #135 = Utf8               getMetaData\n-  #136 = Utf8               ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #137 = Utf8               init\n-  #138 = Utf8               (Z)Z\n-  #139 = Utf8               xlen\n-  #140 = Utf8               isFirstMember\n-  #141 = Utf8               magic0\n-  #142 = Utf8               inData\n-  #143 = Utf8               Ljava/io/DataInput;\n-  #144 = Utf8               method\n-  #145 = Utf8               flg\n-  #146 = Class              #261          // java/io/DataInput\n-  #147 = Utf8               readToNull\n-  #148 = Utf8               (Ljava/io/DataInput;)[B\n-  #149 = Utf8               b\n-  #150 = Utf8               bos\n-  #151 = Utf8               Ljava/io/ByteArrayOutputStream;\n-  #152 = Utf8               read\n-  #153 = Utf8               ()I\n-  #154 = Utf8               ([BII)I\n-  #155 = Utf8               ret\n-  #156 = Utf8               e\n-  #157 = Utf8               Ljava/util/zip/DataFormatException;\n-  #158 = Utf8               skipAmount\n-  #159 = Utf8               crcStored\n-  #160 = Utf8               J\n-  #161 = Utf8               isize\n-  #162 = Utf8               off\n-  #163 = Utf8               len\n-  #164 = Utf8               size\n-  #165 = Class              #112          // \"[B\"\n-  #166 = Utf8               matches\n-  #167 = Utf8               ([BI)Z\n-  #168 = Utf8               signature\n-  #169 = Utf8               length\n-  #170 = Utf8               close\n-  #171 = Utf8               ()V\n-  #172 = Utf8               getCompressedCount\n-  #173 = Utf8               ()J\n-  #174 = Utf8               <clinit>\n-  #175 = Utf8               SourceFile\n-  #176 = Utf8               GzipCompressorInputStream.java\n-  #177 = NameAndType        #123:#132     // \"<init>\":(Ljava/io/InputStream;Z)V\n-  #178 = NameAndType        #123:#171     // \"<init>\":()V\n-  #179 = NameAndType        #111:#112     // buf:[B\n-  #180 = Utf8               java/util/zip/Inflater\n-  #181 = NameAndType        #123:#262     // \"<init>\":(Z)V\n-  #182 = NameAndType        #114:#115     // inf:Ljava/util/zip/Inflater;\n-  #183 = Utf8               java/util/zip/CRC32\n-  #184 = NameAndType        #116:#117     // crc:Ljava/util/zip/CRC32;\n-  #185 = NameAndType        #118:#110     // endReached:Z\n-  #186 = NameAndType        #119:#112     // oneByte:[B\n-  #187 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n-  #188 = NameAndType        #120:#121     // parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #189 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n-  #190 = NameAndType        #123:#124     // \"<init>\":(Ljava/io/InputStream;)V\n-  #191 = NameAndType        #105:#106     // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-  #192 = NameAndType        #263:#264     // markSupported:()Z\n-  #193 = NameAndType        #107:#108     // in:Ljava/io/InputStream;\n-  #194 = Utf8               java/io/BufferedInputStream\n-  #195 = NameAndType        #109:#110     // decompressConcatenated:Z\n-  #196 = NameAndType        #137:#138     // init:(Z)Z\n-  #197 = NameAndType        #122:#110     // $assertionsDisabled:Z\n-  #198 = Utf8               java/lang/AssertionError\n-  #199 = NameAndType        #152:#153     // read:()I\n-  #200 = Utf8               java/io/IOException\n-  #201 = Utf8               Input is not in the .gz format\n-  #202 = Utf8               Garbage after a valid .gz stream\n-  #203 = NameAndType        #123:#265     // \"<init>\":(Ljava/lang/String;)V\n-  #204 = Utf8               java/io/DataInputStream\n-  #205 = NameAndType        #266:#153     // readUnsignedByte:()I\n-  #206 = Utf8               java/util/zip/Deflater\n-  #207 = Utf8               BootstrapMethods\n-  #208 = MethodHandle       6:#267        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #209 = String             #268          // Unsupported compression method \\u0001 in the .gz header\n-  #210 = NameAndType        #269:#270     // makeConcatWithConstants:(I)Ljava/lang/String;\n-  #211 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-  #212 = Utf8               Reserved flags are set in the .gz header\n-  #213 = Class              #271          // org/apache/commons/compress/utils/ByteUtils\n-  #214 = NameAndType        #272:#273     // fromLittleEndian:(Ljava/io/DataInput;I)J\n-  #215 = NameAndType        #274:#275     // setModificationTime:(J)V\n-  #216 = NameAndType        #276:#277     // setCompressionLevel:(I)V\n-  #217 = NameAndType        #278:#277     // setOperatingSystem:(I)V\n-  #218 = Utf8               java/lang/String\n-  #219 = NameAndType        #147:#148     // readToNull:(Ljava/io/DataInput;)[B\n-  #220 = Utf8               org/apache/commons/compress/utils/CharsetNames\n-  #221 = Utf8               ISO-8859-1\n-  #222 = NameAndType        #123:#279     // \"<init>\":([BLjava/lang/String;)V\n-  #223 = NameAndType        #280:#265     // setFilename:(Ljava/lang/String;)V\n-  #224 = NameAndType        #281:#265     // setComment:(Ljava/lang/String;)V\n-  #225 = NameAndType        #282:#283     // readShort:()S\n-  #226 = NameAndType        #284:#171     // reset:()V\n-  #227 = Utf8               java/io/ByteArrayOutputStream\n-  #228 = NameAndType        #285:#277     // write:(I)V\n-  #229 = NameAndType        #286:#287     // toByteArray:()[B\n-  #230 = NameAndType        #170:#171     // close:()V\n-  #231 = Utf8               java/lang/Throwable\n-  #232 = NameAndType        #288:#289     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #233 = NameAndType        #152:#154     // read:([BII)I\n-  #234 = NameAndType        #290:#264     // needsInput:()Z\n-  #235 = NameAndType        #291:#277     // mark:(I)V\n-  #236 = NameAndType        #152:#292     // read:([B)I\n-  #237 = NameAndType        #113:#94      // bufUsed:I\n-  #238 = Utf8               java/io/EOFException\n-  #239 = NameAndType        #293:#294     // setInput:([BII)V\n-  #240 = NameAndType        #295:#154     // inflate:([BII)I\n-  #241 = Utf8               java/util/zip/DataFormatException\n-  #242 = Utf8               Gzip-compressed data is corrupt\n-  #243 = NameAndType        #296:#294     // update:([BII)V\n-  #244 = NameAndType        #297:#277     // count:(I)V\n-  #245 = NameAndType        #298:#264     // finished:()Z\n-  #246 = NameAndType        #299:#153     // getRemaining:()I\n-  #247 = Class              #300          // org/apache/commons/compress/utils/IOUtils\n-  #248 = NameAndType        #301:#302     // skip:(Ljava/io/InputStream;J)J\n-  #249 = NameAndType        #303:#173     // getValue:()J\n-  #250 = Utf8               Gzip-compressed data is corrupt (CRC32 error)\n-  #251 = NameAndType        #304:#173     // getBytesWritten:()J\n-  #252 = Utf8               Gzip-compressed data is corrupt(uncompressed size mismatch)\n-  #253 = NameAndType        #305:#171     // end:()V\n-  #254 = Class              #306          // java/lang/System\n-  #255 = NameAndType        #307:#173     // getBytesRead:()J\n-  #256 = Class              #308          // java/lang/Class\n-  #257 = NameAndType        #309:#264     // desiredAssertionStatus:()Z\n-  #258 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-  #259 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #260 = Utf8               java/io/InputStream\n-  #261 = Utf8               java/io/DataInput\n-  #262 = Utf8               (Z)V\n-  #263 = Utf8               markSupported\n-  #264 = Utf8               ()Z\n-  #265 = Utf8               (Ljava/lang/String;)V\n-  #266 = Utf8               readUnsignedByte\n-  #267 = Methodref          #310.#311     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #268 = Utf8               Unsupported compression method \\u0001 in the .gz header\n-  #269 = Utf8               makeConcatWithConstants\n-  #270 = Utf8               (I)Ljava/lang/String;\n-  #271 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #272 = Utf8               fromLittleEndian\n-  #273 = Utf8               (Ljava/io/DataInput;I)J\n-  #274 = Utf8               setModificationTime\n-  #275 = Utf8               (J)V\n-  #276 = Utf8               setCompressionLevel\n-  #277 = Utf8               (I)V\n-  #278 = Utf8               setOperatingSystem\n-  #279 = Utf8               ([BLjava/lang/String;)V\n-  #280 = Utf8               setFilename\n-  #281 = Utf8               setComment\n-  #282 = Utf8               readShort\n-  #283 = Utf8               ()S\n-  #284 = Utf8               reset\n-  #285 = Utf8               write\n-  #286 = Utf8               toByteArray\n-  #287 = Utf8               ()[B\n-  #288 = Utf8               addSuppressed\n-  #289 = Utf8               (Ljava/lang/Throwable;)V\n-  #290 = Utf8               needsInput\n-  #291 = Utf8               mark\n-  #292 = Utf8               ([B)I\n-  #293 = Utf8               setInput\n-  #294 = Utf8               ([BII)V\n-  #295 = Utf8               inflate\n-  #296 = Utf8               update\n-  #297 = Utf8               count\n-  #298 = Utf8               finished\n-  #299 = Utf8               getRemaining\n-  #300 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #301 = Utf8               skip\n-  #302 = Utf8               (Ljava/io/InputStream;J)J\n-  #303 = Utf8               getValue\n-  #304 = Utf8               getBytesWritten\n-  #305 = Utf8               end\n-  #306 = Utf8               java/lang/System\n-  #307 = Utf8               getBytesRead\n-  #308 = Utf8               java/lang/Class\n-  #309 = Utf8               desiredAssertionStatus\n-  #310 = Class              #312          // java/lang/invoke/StringConcatFactory\n-  #311 = NameAndType        #269:#316     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #312 = Utf8               java/lang/invoke/StringConcatFactory\n-  #313 = Class              #318          // java/lang/invoke/MethodHandles$Lookup\n-  #314 = Utf8               Lookup\n-  #315 = Utf8               InnerClasses\n-  #316 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #317 = Class              #319          // java/lang/invoke/MethodHandles\n-  #318 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #319 = Utf8               java/lang/invoke/MethodHandles\n+    #1 = Methodref          #2.#3         // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n+    #2 = Class              #4            // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+    #3 = NameAndType        #5:#6         // \"<init>\":(Ljava/io/InputStream;Z)V\n+    #4 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+    #5 = Utf8               <init>\n+    #6 = Utf8               (Ljava/io/InputStream;Z)V\n+    #7 = Methodref          #8.#9         // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+    #8 = Class              #10           // org/apache/commons/compress/compressors/CompressorInputStream\n+    #9 = NameAndType        #5:#11        // \"<init>\":()V\n+   #10 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+   #11 = Utf8               ()V\n+   #12 = Fieldref           #2.#13        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.buf:[B\n+   #13 = NameAndType        #14:#15       // buf:[B\n+   #14 = Utf8               buf\n+   #15 = Utf8               [B\n+   #16 = Class              #17           // java/util/zip/Inflater\n+   #17 = Utf8               java/util/zip/Inflater\n+   #18 = Methodref          #16.#19       // java/util/zip/Inflater.\"<init>\":(Z)V\n+   #19 = NameAndType        #5:#20        // \"<init>\":(Z)V\n+   #20 = Utf8               (Z)V\n+   #21 = Fieldref           #2.#22        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.inf:Ljava/util/zip/Inflater;\n+   #22 = NameAndType        #23:#24       // inf:Ljava/util/zip/Inflater;\n+   #23 = Utf8               inf\n+   #24 = Utf8               Ljava/util/zip/Inflater;\n+   #25 = Class              #26           // java/util/zip/CRC32\n+   #26 = Utf8               java/util/zip/CRC32\n+   #27 = Methodref          #25.#9        // java/util/zip/CRC32.\"<init>\":()V\n+   #28 = Fieldref           #2.#29        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.crc:Ljava/util/zip/CRC32;\n+   #29 = NameAndType        #30:#31       // crc:Ljava/util/zip/CRC32;\n+   #30 = Utf8               crc\n+   #31 = Utf8               Ljava/util/zip/CRC32;\n+   #32 = Fieldref           #2.#33        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.endReached:Z\n+   #33 = NameAndType        #34:#35       // endReached:Z\n+   #34 = Utf8               endReached\n+   #35 = Utf8               Z\n+   #36 = Fieldref           #2.#37        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.oneByte:[B\n+   #37 = NameAndType        #38:#15       // oneByte:[B\n+   #38 = Utf8               oneByte\n+   #39 = Class              #40           // org/apache/commons/compress/compressors/gzip/GzipParameters\n+   #40 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n+   #41 = Methodref          #39.#9        // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n+   #42 = Fieldref           #2.#43        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+   #43 = NameAndType        #44:#45       // parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+   #44 = Utf8               parameters\n+   #45 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+   #46 = Class              #47           // org/apache/commons/compress/utils/CountingInputStream\n+   #47 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n+   #48 = Methodref          #46.#49       // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #49 = NameAndType        #5:#50        // \"<init>\":(Ljava/io/InputStream;)V\n+   #50 = Utf8               (Ljava/io/InputStream;)V\n+   #51 = Fieldref           #2.#52        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #52 = NameAndType        #53:#54       // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #53 = Utf8               countingStream\n+   #54 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #55 = Methodref          #46.#56       // org/apache/commons/compress/utils/CountingInputStream.markSupported:()Z\n+   #56 = NameAndType        #57:#58       // markSupported:()Z\n+   #57 = Utf8               markSupported\n+   #58 = Utf8               ()Z\n+   #59 = Fieldref           #2.#60        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.in:Ljava/io/InputStream;\n+   #60 = NameAndType        #61:#62       // in:Ljava/io/InputStream;\n+   #61 = Utf8               in\n+   #62 = Utf8               Ljava/io/InputStream;\n+   #63 = Class              #64           // java/io/BufferedInputStream\n+   #64 = Utf8               java/io/BufferedInputStream\n+   #65 = Methodref          #63.#49       // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #66 = Fieldref           #2.#67        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.decompressConcatenated:Z\n+   #67 = NameAndType        #68:#35       // decompressConcatenated:Z\n+   #68 = Utf8               decompressConcatenated\n+   #69 = Methodref          #2.#70        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.init:(Z)Z\n+   #70 = NameAndType        #71:#72       // init:(Z)Z\n+   #71 = Utf8               init\n+   #72 = Utf8               (Z)Z\n+   #73 = Fieldref           #2.#74        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.$assertionsDisabled:Z\n+   #74 = NameAndType        #75:#35       // $assertionsDisabled:Z\n+   #75 = Utf8               $assertionsDisabled\n+   #76 = Class              #77           // java/lang/AssertionError\n+   #77 = Utf8               java/lang/AssertionError\n+   #78 = Methodref          #76.#9        // java/lang/AssertionError.\"<init>\":()V\n+   #79 = Methodref          #80.#81       // java/io/InputStream.read:()I\n+   #80 = Class              #82           // java/io/InputStream\n+   #81 = NameAndType        #83:#84       // read:()I\n+   #82 = Utf8               java/io/InputStream\n+   #83 = Utf8               read\n+   #84 = Utf8               ()I\n+   #85 = Class              #86           // java/io/IOException\n+   #86 = Utf8               java/io/IOException\n+   #87 = String             #88           // Input is not in the .gz format\n+   #88 = Utf8               Input is not in the .gz format\n+   #89 = String             #90           // Garbage after a valid .gz stream\n+   #90 = Utf8               Garbage after a valid .gz stream\n+   #91 = Methodref          #85.#92       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #92 = NameAndType        #5:#93        // \"<init>\":(Ljava/lang/String;)V\n+   #93 = Utf8               (Ljava/lang/String;)V\n+   #94 = Class              #95           // java/io/DataInputStream\n+   #95 = Utf8               java/io/DataInputStream\n+   #96 = Methodref          #94.#49       // java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #97 = InterfaceMethodref #98.#99       // java/io/DataInput.readUnsignedByte:()I\n+   #98 = Class              #100          // java/io/DataInput\n+   #99 = NameAndType        #101:#84      // readUnsignedByte:()I\n+  #100 = Utf8               java/io/DataInput\n+  #101 = Utf8               readUnsignedByte\n+  #102 = Class              #103          // java/util/zip/Deflater\n+  #103 = Utf8               java/util/zip/Deflater\n+  #104 = InvokeDynamic      #0:#105       // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+  #105 = NameAndType        #106:#107     // makeConcatWithConstants:(I)Ljava/lang/String;\n+  #106 = Utf8               makeConcatWithConstants\n+  #107 = Utf8               (I)Ljava/lang/String;\n+  #108 = String             #109          // Reserved flags are set in the .gz header\n+  #109 = Utf8               Reserved flags are set in the .gz header\n+  #110 = Methodref          #111.#112     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+  #111 = Class              #113          // org/apache/commons/compress/utils/ByteUtils\n+  #112 = NameAndType        #114:#115     // fromLittleEndian:(Ljava/io/DataInput;I)J\n+  #113 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+  #114 = Utf8               fromLittleEndian\n+  #115 = Utf8               (Ljava/io/DataInput;I)J\n+  #116 = Long               1000l\n+  #118 = Methodref          #39.#119      // org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n+  #119 = NameAndType        #120:#121     // setModificationTime:(J)V\n+  #120 = Utf8               setModificationTime\n+  #121 = Utf8               (J)V\n+  #122 = Methodref          #39.#123      // org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+  #123 = NameAndType        #124:#125     // setCompressionLevel:(I)V\n+  #124 = Utf8               setCompressionLevel\n+  #125 = Utf8               (I)V\n+  #126 = Methodref          #39.#127      // org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n+  #127 = NameAndType        #128:#125     // setOperatingSystem:(I)V\n+  #128 = Utf8               setOperatingSystem\n+  #129 = Class              #130          // java/lang/String\n+  #130 = Utf8               java/lang/String\n+  #131 = Methodref          #2.#132       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.readToNull:(Ljava/io/DataInput;)[B\n+  #132 = NameAndType        #133:#134     // readToNull:(Ljava/io/DataInput;)[B\n+  #133 = Utf8               readToNull\n+  #134 = Utf8               (Ljava/io/DataInput;)[B\n+  #135 = Class              #136          // org/apache/commons/compress/utils/CharsetNames\n+  #136 = Utf8               org/apache/commons/compress/utils/CharsetNames\n+  #137 = String             #138          // ISO-8859-1\n+  #138 = Utf8               ISO-8859-1\n+  #139 = Methodref          #129.#140     // java/lang/String.\"<init>\":([BLjava/lang/String;)V\n+  #140 = NameAndType        #5:#141       // \"<init>\":([BLjava/lang/String;)V\n+  #141 = Utf8               ([BLjava/lang/String;)V\n+  #142 = Methodref          #39.#143      // org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n+  #143 = NameAndType        #144:#93      // setFilename:(Ljava/lang/String;)V\n+  #144 = Utf8               setFilename\n+  #145 = Methodref          #39.#146      // org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n+  #146 = NameAndType        #147:#93      // setComment:(Ljava/lang/String;)V\n+  #147 = Utf8               setComment\n+  #148 = InterfaceMethodref #98.#149      // java/io/DataInput.readShort:()S\n+  #149 = NameAndType        #150:#151     // readShort:()S\n+  #150 = Utf8               readShort\n+  #151 = Utf8               ()S\n+  #152 = Methodref          #16.#153      // java/util/zip/Inflater.reset:()V\n+  #153 = NameAndType        #154:#11      // reset:()V\n+  #154 = Utf8               reset\n+  #155 = Methodref          #25.#153      // java/util/zip/CRC32.reset:()V\n+  #156 = Class              #157          // java/io/ByteArrayOutputStream\n+  #157 = Utf8               java/io/ByteArrayOutputStream\n+  #158 = Methodref          #156.#9       // java/io/ByteArrayOutputStream.\"<init>\":()V\n+  #159 = Methodref          #156.#160     // java/io/ByteArrayOutputStream.write:(I)V\n+  #160 = NameAndType        #161:#125     // write:(I)V\n+  #161 = Utf8               write\n+  #162 = Methodref          #156.#163     // java/io/ByteArrayOutputStream.toByteArray:()[B\n+  #163 = NameAndType        #164:#165     // toByteArray:()[B\n+  #164 = Utf8               toByteArray\n+  #165 = Utf8               ()[B\n+  #166 = Methodref          #156.#167     // java/io/ByteArrayOutputStream.close:()V\n+  #167 = NameAndType        #168:#11      // close:()V\n+  #168 = Utf8               close\n+  #169 = Class              #170          // java/lang/Throwable\n+  #170 = Utf8               java/lang/Throwable\n+  #171 = Methodref          #169.#172     // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+  #172 = NameAndType        #173:#174     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #173 = Utf8               addSuppressed\n+  #174 = Utf8               (Ljava/lang/Throwable;)V\n+  #175 = Methodref          #2.#176       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.read:([BII)I\n+  #176 = NameAndType        #83:#177      // read:([BII)I\n+  #177 = Utf8               ([BII)I\n+  #178 = Methodref          #16.#179      // java/util/zip/Inflater.needsInput:()Z\n+  #179 = NameAndType        #180:#58      // needsInput:()Z\n+  #180 = Utf8               needsInput\n+  #181 = Methodref          #80.#182      // java/io/InputStream.mark:(I)V\n+  #182 = NameAndType        #183:#125     // mark:(I)V\n+  #183 = Utf8               mark\n+  #184 = Methodref          #80.#185      // java/io/InputStream.read:([B)I\n+  #185 = NameAndType        #83:#186      // read:([B)I\n+  #186 = Utf8               ([B)I\n+  #187 = Fieldref           #2.#188       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.bufUsed:I\n+  #188 = NameAndType        #189:#190     // bufUsed:I\n+  #189 = Utf8               bufUsed\n+  #190 = Utf8               I\n+  #191 = Class              #192          // java/io/EOFException\n+  #192 = Utf8               java/io/EOFException\n+  #193 = Methodref          #191.#9       // java/io/EOFException.\"<init>\":()V\n+  #194 = Methodref          #16.#195      // java/util/zip/Inflater.setInput:([BII)V\n+  #195 = NameAndType        #196:#197     // setInput:([BII)V\n+  #196 = Utf8               setInput\n+  #197 = Utf8               ([BII)V\n+  #198 = Methodref          #16.#199      // java/util/zip/Inflater.inflate:([BII)I\n+  #199 = NameAndType        #200:#177     // inflate:([BII)I\n+  #200 = Utf8               inflate\n+  #201 = Class              #202          // java/util/zip/DataFormatException\n+  #202 = Utf8               java/util/zip/DataFormatException\n+  #203 = String             #204          // Gzip-compressed data is corrupt\n+  #204 = Utf8               Gzip-compressed data is corrupt\n+  #205 = Methodref          #25.#206      // java/util/zip/CRC32.update:([BII)V\n+  #206 = NameAndType        #207:#197     // update:([BII)V\n+  #207 = Utf8               update\n+  #208 = Methodref          #2.#209       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.count:(I)V\n+  #209 = NameAndType        #210:#125     // count:(I)V\n+  #210 = Utf8               count\n+  #211 = Methodref          #16.#212      // java/util/zip/Inflater.finished:()Z\n+  #212 = NameAndType        #213:#58      // finished:()Z\n+  #213 = Utf8               finished\n+  #214 = Methodref          #80.#153      // java/io/InputStream.reset:()V\n+  #215 = Methodref          #16.#216      // java/util/zip/Inflater.getRemaining:()I\n+  #216 = NameAndType        #217:#84      // getRemaining:()I\n+  #217 = Utf8               getRemaining\n+  #218 = Methodref          #219.#220     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+  #219 = Class              #221          // org/apache/commons/compress/utils/IOUtils\n+  #220 = NameAndType        #222:#223     // skip:(Ljava/io/InputStream;J)J\n+  #221 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #222 = Utf8               skip\n+  #223 = Utf8               (Ljava/io/InputStream;J)J\n+  #224 = Methodref          #85.#9        // java/io/IOException.\"<init>\":()V\n+  #225 = Methodref          #25.#226      // java/util/zip/CRC32.getValue:()J\n+  #226 = NameAndType        #227:#228     // getValue:()J\n+  #227 = Utf8               getValue\n+  #228 = Utf8               ()J\n+  #229 = String             #230          // Gzip-compressed data is corrupt (CRC32 error)\n+  #230 = Utf8               Gzip-compressed data is corrupt (CRC32 error)\n+  #231 = Methodref          #16.#232      // java/util/zip/Inflater.getBytesWritten:()J\n+  #232 = NameAndType        #233:#228     // getBytesWritten:()J\n+  #233 = Utf8               getBytesWritten\n+  #234 = Long               4294967295l\n+  #236 = String             #237          // Gzip-compressed data is corrupt(uncompressed size mismatch)\n+  #237 = Utf8               Gzip-compressed data is corrupt(uncompressed size mismatch)\n+  #238 = Methodref          #16.#239      // java/util/zip/Inflater.end:()V\n+  #239 = NameAndType        #240:#11      // end:()V\n+  #240 = Utf8               end\n+  #241 = Fieldref           #242.#60      // java/lang/System.in:Ljava/io/InputStream;\n+  #242 = Class              #243          // java/lang/System\n+  #243 = Utf8               java/lang/System\n+  #244 = Methodref          #80.#167      // java/io/InputStream.close:()V\n+  #245 = Methodref          #46.#246      // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+  #246 = NameAndType        #247:#228     // getBytesRead:()J\n+  #247 = Utf8               getBytesRead\n+  #248 = Methodref          #249.#250     // java/lang/Class.desiredAssertionStatus:()Z\n+  #249 = Class              #251          // java/lang/Class\n+  #250 = NameAndType        #252:#58      // desiredAssertionStatus:()Z\n+  #251 = Utf8               java/lang/Class\n+  #252 = Utf8               desiredAssertionStatus\n+  #253 = Class              #254          // org/apache/commons/compress/utils/InputStreamStatistics\n+  #254 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+  #255 = Utf8               FHCRC\n+  #256 = Utf8               ConstantValue\n+  #257 = Integer            2\n+  #258 = Utf8               FEXTRA\n+  #259 = Integer            4\n+  #260 = Utf8               FNAME\n+  #261 = Integer            8\n+  #262 = Utf8               FCOMMENT\n+  #263 = Integer            16\n+  #264 = Utf8               FRESERVED\n+  #265 = Integer            224\n+  #266 = Utf8               Code\n+  #267 = Utf8               LineNumberTable\n+  #268 = Utf8               LocalVariableTable\n+  #269 = Utf8               this\n+  #270 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n+  #271 = Utf8               inputStream\n+  #272 = Utf8               Exceptions\n+  #273 = Utf8               StackMapTable\n+  #274 = Utf8               getMetaData\n+  #275 = Utf8               ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+  #276 = Utf8               xlen\n+  #277 = Utf8               isFirstMember\n+  #278 = Utf8               magic0\n+  #279 = Utf8               inData\n+  #280 = Utf8               Ljava/io/DataInput;\n+  #281 = Utf8               method\n+  #282 = Utf8               flg\n+  #283 = Utf8               b\n+  #284 = Utf8               bos\n+  #285 = Utf8               Ljava/io/ByteArrayOutputStream;\n+  #286 = Utf8               ret\n+  #287 = Utf8               e\n+  #288 = Utf8               Ljava/util/zip/DataFormatException;\n+  #289 = Utf8               skipAmount\n+  #290 = Utf8               crcStored\n+  #291 = Utf8               J\n+  #292 = Utf8               isize\n+  #293 = Utf8               off\n+  #294 = Utf8               len\n+  #295 = Utf8               size\n+  #296 = Class              #15           // \"[B\"\n+  #297 = Utf8               matches\n+  #298 = Utf8               ([BI)Z\n+  #299 = Utf8               signature\n+  #300 = Utf8               length\n+  #301 = Utf8               getCompressedCount\n+  #302 = Utf8               <clinit>\n+  #303 = Utf8               SourceFile\n+  #304 = Utf8               GzipCompressorInputStream.java\n+  #305 = Utf8               BootstrapMethods\n+  #306 = MethodHandle       6:#307        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #307 = Methodref          #308.#309     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #308 = Class              #310          // java/lang/invoke/StringConcatFactory\n+  #309 = NameAndType        #106:#311     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #310 = Utf8               java/lang/invoke/StringConcatFactory\n+  #311 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #312 = String             #313          // Unsupported compression method \\u0001 in the .gz header\n+  #313 = Utf8               Unsupported compression method \\u0001 in the .gz header\n+  #314 = Utf8               InnerClasses\n+  #315 = Class              #316          // java/lang/invoke/MethodHandles$Lookup\n+  #316 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #317 = Class              #318          // java/lang/invoke/MethodHandles\n+  #318 = Utf8               java/lang/invoke/MethodHandles\n+  #319 = Utf8               Lookup\n {\n   private static final int FHCRC = 2;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 2\n \n   private static final int FEXTRA = 4;\n@@ -417,70 +417,70 @@\n \n   public org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream(java.io.InputStream, boolean) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #2                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+         1: invokespecial #7                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n          5: sipush        8192\n          8: newarray       byte\n-        10: putfield      #3                  // Field buf:[B\n+        10: putfield      #12                 // Field buf:[B\n         13: aload_0\n-        14: new           #4                  // class java/util/zip/Inflater\n+        14: new           #16                 // class java/util/zip/Inflater\n         17: dup\n         18: iconst_1\n-        19: invokespecial #5                  // Method java/util/zip/Inflater.\"<init>\":(Z)V\n-        22: putfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n+        19: invokespecial #18                 // Method java/util/zip/Inflater.\"<init>\":(Z)V\n+        22: putfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n         25: aload_0\n-        26: new           #7                  // class java/util/zip/CRC32\n+        26: new           #25                 // class java/util/zip/CRC32\n         29: dup\n-        30: invokespecial #8                  // Method java/util/zip/CRC32.\"<init>\":()V\n-        33: putfield      #9                  // Field crc:Ljava/util/zip/CRC32;\n+        30: invokespecial #27                 // Method java/util/zip/CRC32.\"<init>\":()V\n+        33: putfield      #28                 // Field crc:Ljava/util/zip/CRC32;\n         36: aload_0\n         37: iconst_0\n-        38: putfield      #10                 // Field endReached:Z\n+        38: putfield      #32                 // Field endReached:Z\n         41: aload_0\n         42: iconst_1\n         43: newarray       byte\n-        45: putfield      #11                 // Field oneByte:[B\n+        45: putfield      #36                 // Field oneByte:[B\n         48: aload_0\n-        49: new           #12                 // class org/apache/commons/compress/compressors/gzip/GzipParameters\n+        49: new           #39                 // class org/apache/commons/compress/compressors/gzip/GzipParameters\n         52: dup\n-        53: invokespecial #13                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n-        56: putfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+        53: invokespecial #41                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n+        56: putfield      #42                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n         59: aload_0\n-        60: new           #15                 // class org/apache/commons/compress/utils/CountingInputStream\n+        60: new           #46                 // class org/apache/commons/compress/utils/CountingInputStream\n         63: dup\n         64: aload_1\n-        65: invokespecial #16                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-        68: putfield      #17                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        65: invokespecial #48                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        68: putfield      #51                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         71: aload_0\n-        72: getfield      #17                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-        75: invokevirtual #18                 // Method org/apache/commons/compress/utils/CountingInputStream.markSupported:()Z\n+        72: getfield      #51                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        75: invokevirtual #55                 // Method org/apache/commons/compress/utils/CountingInputStream.markSupported:()Z\n         78: ifeq          92\n         81: aload_0\n         82: aload_0\n-        83: getfield      #17                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-        86: putfield      #19                 // Field in:Ljava/io/InputStream;\n+        83: getfield      #51                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        86: putfield      #59                 // Field in:Ljava/io/InputStream;\n         89: goto          107\n         92: aload_0\n-        93: new           #20                 // class java/io/BufferedInputStream\n+        93: new           #63                 // class java/io/BufferedInputStream\n         96: dup\n         97: aload_0\n-        98: getfield      #17                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-       101: invokespecial #21                 // Method java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-       104: putfield      #19                 // Field in:Ljava/io/InputStream;\n+        98: getfield      #51                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+       101: invokespecial #65                 // Method java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+       104: putfield      #59                 // Field in:Ljava/io/InputStream;\n        107: aload_0\n        108: iload_2\n-       109: putfield      #22                 // Field decompressConcatenated:Z\n+       109: putfield      #66                 // Field decompressConcatenated:Z\n        112: aload_0\n        113: iconst_1\n-       114: invokespecial #23                 // Method init:(Z)Z\n+       114: invokespecial #69                 // Method init:(Z)Z\n        117: pop\n        118: return\n       LineNumberTable:\n         line 156: 0\n         line 97: 4\n         line 103: 13\n         line 106: 25\n@@ -510,186 +510,186 @@\n \n   public org.apache.commons.compress.compressors.gzip.GzipParameters getMetaData();\n     descriptor: ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+         1: getfield      #42                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n          4: areturn\n       LineNumberTable:\n         line 177: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n \n   private boolean init(boolean) throws java.io.IOException;\n     descriptor: (Z)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=7, args_size=2\n-         0: getstatic     #24                 // Field $assertionsDisabled:Z\n+         0: getstatic     #73                 // Field $assertionsDisabled:Z\n          3: ifne          25\n          6: iload_1\n          7: ifne          25\n         10: aload_0\n-        11: getfield      #22                 // Field decompressConcatenated:Z\n+        11: getfield      #66                 // Field decompressConcatenated:Z\n         14: ifne          25\n-        17: new           #25                 // class java/lang/AssertionError\n+        17: new           #76                 // class java/lang/AssertionError\n         20: dup\n-        21: invokespecial #26                 // Method java/lang/AssertionError.\"<init>\":()V\n+        21: invokespecial #78                 // Method java/lang/AssertionError.\"<init>\":()V\n         24: athrow\n         25: aload_0\n-        26: getfield      #19                 // Field in:Ljava/io/InputStream;\n-        29: invokevirtual #27                 // Method java/io/InputStream.read:()I\n+        26: getfield      #59                 // Field in:Ljava/io/InputStream;\n+        29: invokevirtual #79                 // Method java/io/InputStream.read:()I\n         32: istore_2\n         33: iload_2\n         34: iconst_m1\n         35: if_icmpne     44\n         38: iload_1\n         39: ifne          44\n         42: iconst_0\n         43: ireturn\n         44: iload_2\n         45: bipush        31\n         47: if_icmpne     63\n         50: aload_0\n-        51: getfield      #19                 // Field in:Ljava/io/InputStream;\n-        54: invokevirtual #27                 // Method java/io/InputStream.read:()I\n+        51: getfield      #59                 // Field in:Ljava/io/InputStream;\n+        54: invokevirtual #79                 // Method java/io/InputStream.read:()I\n         57: sipush        139\n         60: if_icmpeq     82\n-        63: new           #28                 // class java/io/IOException\n+        63: new           #85                 // class java/io/IOException\n         66: dup\n         67: iload_1\n         68: ifeq          76\n-        71: ldc           #29                 // String Input is not in the .gz format\n+        71: ldc           #87                 // String Input is not in the .gz format\n         73: goto          78\n-        76: ldc           #30                 // String Garbage after a valid .gz stream\n-        78: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        76: ldc           #89                 // String Garbage after a valid .gz stream\n+        78: invokespecial #91                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         81: athrow\n-        82: new           #32                 // class java/io/DataInputStream\n+        82: new           #94                 // class java/io/DataInputStream\n         85: dup\n         86: aload_0\n-        87: getfield      #19                 // Field in:Ljava/io/InputStream;\n-        90: invokespecial #33                 // Method java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        87: getfield      #59                 // Field in:Ljava/io/InputStream;\n+        90: invokespecial #96                 // Method java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n         93: astore_3\n         94: aload_3\n-        95: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+        95: invokeinterface #97,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        100: istore        4\n        102: iload         4\n        104: bipush        8\n        106: if_icmpeq     124\n-       109: new           #28                 // class java/io/IOException\n+       109: new           #85                 // class java/io/IOException\n        112: dup\n        113: iload         4\n-       115: invokedynamic #36,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n-       120: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       115: invokedynamic #104,  0            // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+       120: invokespecial #91                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        123: athrow\n        124: aload_3\n-       125: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       125: invokeinterface #97,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        130: istore        5\n        132: iload         5\n        134: sipush        224\n        137: iand\n        138: ifeq          151\n-       141: new           #28                 // class java/io/IOException\n+       141: new           #85                 // class java/io/IOException\n        144: dup\n-       145: ldc           #38                 // String Reserved flags are set in the .gz header\n-       147: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       145: ldc           #108                // String Reserved flags are set in the .gz header\n+       147: invokespecial #91                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        150: athrow\n        151: aload_0\n-       152: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       152: getfield      #42                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n        155: aload_3\n        156: iconst_4\n-       157: invokestatic  #39                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n-       160: ldc2_w        #40                 // long 1000l\n+       157: invokestatic  #110                // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+       160: ldc2_w        #116                // long 1000l\n        163: lmul\n-       164: invokevirtual #42                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n+       164: invokevirtual #118                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n        167: aload_3\n-       168: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       168: invokeinterface #97,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        173: lookupswitch  { // 2\n                        2: 200\n                        4: 212\n                  default: 223\n             }\n        200: aload_0\n-       201: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       201: getfield      #42                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n        204: bipush        9\n-       206: invokevirtual #43                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+       206: invokevirtual #122                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n        209: goto          223\n        212: aload_0\n-       213: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       213: getfield      #42                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n        216: iconst_1\n-       217: invokevirtual #43                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+       217: invokevirtual #122                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n        220: goto          223\n        223: aload_0\n-       224: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       224: getfield      #42                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n        227: aload_3\n-       228: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-       233: invokevirtual #44                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n+       228: invokeinterface #97,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       233: invokevirtual #126                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n        236: iload         5\n        238: iconst_4\n        239: iand\n        240: ifeq          283\n        243: aload_3\n-       244: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       244: invokeinterface #97,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        249: istore        6\n        251: iload         6\n        253: aload_3\n-       254: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       254: invokeinterface #97,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        259: bipush        8\n        261: ishl\n        262: ior\n        263: istore        6\n        265: iload         6\n        267: iinc          6, -1\n        270: ifle          283\n        273: aload_3\n-       274: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       274: invokeinterface #97,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        279: pop\n        280: goto          265\n        283: iload         5\n        285: bipush        8\n        287: iand\n        288: ifeq          311\n        291: aload_0\n-       292: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       295: new           #45                 // class java/lang/String\n+       292: getfield      #42                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       295: new           #129                // class java/lang/String\n        298: dup\n        299: aload_3\n-       300: invokestatic  #46                 // Method readToNull:(Ljava/io/DataInput;)[B\n-       303: ldc           #48                 // String ISO-8859-1\n-       305: invokespecial #49                 // Method java/lang/String.\"<init>\":([BLjava/lang/String;)V\n-       308: invokevirtual #50                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n+       300: invokestatic  #131                // Method readToNull:(Ljava/io/DataInput;)[B\n+       303: ldc           #137                // String ISO-8859-1\n+       305: invokespecial #139                // Method java/lang/String.\"<init>\":([BLjava/lang/String;)V\n+       308: invokevirtual #142                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n        311: iload         5\n        313: bipush        16\n        315: iand\n        316: ifeq          339\n        319: aload_0\n-       320: getfield      #14                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       323: new           #45                 // class java/lang/String\n+       320: getfield      #42                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       323: new           #129                // class java/lang/String\n        326: dup\n        327: aload_3\n-       328: invokestatic  #46                 // Method readToNull:(Ljava/io/DataInput;)[B\n-       331: ldc           #48                 // String ISO-8859-1\n-       333: invokespecial #49                 // Method java/lang/String.\"<init>\":([BLjava/lang/String;)V\n-       336: invokevirtual #51                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n+       328: invokestatic  #131                // Method readToNull:(Ljava/io/DataInput;)[B\n+       331: ldc           #137                // String ISO-8859-1\n+       333: invokespecial #139                // Method java/lang/String.\"<init>\":([BLjava/lang/String;)V\n+       336: invokevirtual #145                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n        339: iload         5\n        341: iconst_2\n        342: iand\n        343: ifeq          353\n        346: aload_3\n-       347: invokeinterface #52,  1           // InterfaceMethod java/io/DataInput.readShort:()S\n+       347: invokeinterface #148,  1          // InterfaceMethod java/io/DataInput.readShort:()S\n        352: pop\n        353: aload_0\n-       354: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       357: invokevirtual #53                 // Method java/util/zip/Inflater.reset:()V\n+       354: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n+       357: invokevirtual #152                // Method java/util/zip/Inflater.reset:()V\n        360: aload_0\n-       361: getfield      #9                  // Field crc:Ljava/util/zip/CRC32;\n-       364: invokevirtual #54                 // Method java/util/zip/CRC32.reset:()V\n+       361: getfield      #28                 // Field crc:Ljava/util/zip/CRC32;\n+       364: invokevirtual #155                // Method java/util/zip/CRC32.reset:()V\n        367: iconst_1\n        368: ireturn\n       LineNumberTable:\n         line 181: 0\n         line 184: 25\n         line 188: 33\n         line 189: 42\n@@ -770,44 +770,44 @@\n       throws java.io.IOException\n \n   private static byte[] readToNull(java.io.DataInput) throws java.io.IOException;\n     descriptor: (Ljava/io/DataInput;)[B\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=2, locals=4, args_size=1\n-         0: new           #55                 // class java/io/ByteArrayOutputStream\n+         0: new           #156                // class java/io/ByteArrayOutputStream\n          3: dup\n-         4: invokespecial #56                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+         4: invokespecial #158                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n          7: astore_1\n          8: iconst_0\n          9: istore_2\n         10: aload_0\n-        11: invokeinterface #34,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+        11: invokeinterface #97,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n         16: dup\n         17: istore_2\n         18: ifeq          29\n         21: aload_1\n         22: iload_2\n-        23: invokevirtual #57                 // Method java/io/ByteArrayOutputStream.write:(I)V\n+        23: invokevirtual #159                // Method java/io/ByteArrayOutputStream.write:(I)V\n         26: goto          10\n         29: aload_1\n-        30: invokevirtual #58                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n+        30: invokevirtual #162                // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n         33: astore_3\n         34: aload_1\n-        35: invokevirtual #59                 // Method java/io/ByteArrayOutputStream.close:()V\n+        35: invokevirtual #166                // Method java/io/ByteArrayOutputStream.close:()V\n         38: aload_3\n         39: areturn\n         40: astore_2\n         41: aload_1\n-        42: invokevirtual #59                 // Method java/io/ByteArrayOutputStream.close:()V\n+        42: invokevirtual #166                // Method java/io/ByteArrayOutputStream.close:()V\n         45: goto          54\n         48: astore_3\n         49: aload_2\n         50: aload_3\n-        51: invokevirtual #61                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        51: invokevirtual #171                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n         54: aload_2\n         55: athrow\n       Exception table:\n          from    to  target type\n              8    34    40   Class java/lang/Throwable\n             41    45    48   Class java/lang/Throwable\n       LineNumberTable:\n@@ -844,24 +844,24 @@\n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n          1: aload_0\n-         2: getfield      #11                 // Field oneByte:[B\n+         2: getfield      #36                 // Field oneByte:[B\n          5: iconst_0\n          6: iconst_1\n-         7: invokevirtual #62                 // Method read:([BII)I\n+         7: invokevirtual #175                // Method read:([BII)I\n         10: iconst_m1\n         11: if_icmpne     18\n         14: iconst_m1\n         15: goto          28\n         18: aload_0\n-        19: getfield      #11                 // Field oneByte:[B\n+        19: getfield      #36                 // Field oneByte:[B\n         22: iconst_0\n         23: baload\n         24: sipush        255\n         27: iand\n         28: ireturn\n       LineNumberTable:\n         line 279: 0\n@@ -881,174 +881,174 @@\n     Code:\n       stack=6, locals=12, args_size=4\n          0: iload_3\n          1: ifne          6\n          4: iconst_0\n          5: ireturn\n          6: aload_0\n-         7: getfield      #10                 // Field endReached:Z\n+         7: getfield      #32                 // Field endReached:Z\n         10: ifeq          15\n         13: iconst_m1\n         14: ireturn\n         15: iconst_0\n         16: istore        4\n         18: iload_3\n         19: ifle          339\n         22: aload_0\n-        23: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-        26: invokevirtual #63                 // Method java/util/zip/Inflater.needsInput:()Z\n+        23: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n+        26: invokevirtual #178                // Method java/util/zip/Inflater.needsInput:()Z\n         29: ifeq          91\n         32: aload_0\n-        33: getfield      #19                 // Field in:Ljava/io/InputStream;\n+        33: getfield      #59                 // Field in:Ljava/io/InputStream;\n         36: aload_0\n-        37: getfield      #3                  // Field buf:[B\n+        37: getfield      #12                 // Field buf:[B\n         40: arraylength\n-        41: invokevirtual #64                 // Method java/io/InputStream.mark:(I)V\n+        41: invokevirtual #181                // Method java/io/InputStream.mark:(I)V\n         44: aload_0\n         45: aload_0\n-        46: getfield      #19                 // Field in:Ljava/io/InputStream;\n+        46: getfield      #59                 // Field in:Ljava/io/InputStream;\n         49: aload_0\n-        50: getfield      #3                  // Field buf:[B\n-        53: invokevirtual #65                 // Method java/io/InputStream.read:([B)I\n-        56: putfield      #66                 // Field bufUsed:I\n+        50: getfield      #12                 // Field buf:[B\n+        53: invokevirtual #184                // Method java/io/InputStream.read:([B)I\n+        56: putfield      #187                // Field bufUsed:I\n         59: aload_0\n-        60: getfield      #66                 // Field bufUsed:I\n+        60: getfield      #187                // Field bufUsed:I\n         63: iconst_m1\n         64: if_icmpne     75\n-        67: new           #67                 // class java/io/EOFException\n+        67: new           #191                // class java/io/EOFException\n         70: dup\n-        71: invokespecial #68                 // Method java/io/EOFException.\"<init>\":()V\n+        71: invokespecial #193                // Method java/io/EOFException.\"<init>\":()V\n         74: athrow\n         75: aload_0\n-        76: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n+        76: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n         79: aload_0\n-        80: getfield      #3                  // Field buf:[B\n+        80: getfield      #12                 // Field buf:[B\n         83: iconst_0\n         84: aload_0\n-        85: getfield      #66                 // Field bufUsed:I\n-        88: invokevirtual #69                 // Method java/util/zip/Inflater.setInput:([BII)V\n+        85: getfield      #187                // Field bufUsed:I\n+        88: invokevirtual #194                // Method java/util/zip/Inflater.setInput:([BII)V\n         91: aload_0\n-        92: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n+        92: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n         95: aload_1\n         96: iload_2\n         97: iload_3\n-        98: invokevirtual #70                 // Method java/util/zip/Inflater.inflate:([BII)I\n+        98: invokevirtual #198                // Method java/util/zip/Inflater.inflate:([BII)I\n        101: istore        5\n        103: goto          118\n        106: astore        6\n-       108: new           #28                 // class java/io/IOException\n+       108: new           #85                 // class java/io/IOException\n        111: dup\n-       112: ldc           #72                 // String Gzip-compressed data is corrupt\n-       114: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       112: ldc           #203                // String Gzip-compressed data is corrupt\n+       114: invokespecial #91                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        117: athrow\n        118: aload_0\n-       119: getfield      #9                  // Field crc:Ljava/util/zip/CRC32;\n+       119: getfield      #28                 // Field crc:Ljava/util/zip/CRC32;\n        122: aload_1\n        123: iload_2\n        124: iload         5\n-       126: invokevirtual #73                 // Method java/util/zip/CRC32.update:([BII)V\n+       126: invokevirtual #205                // Method java/util/zip/CRC32.update:([BII)V\n        129: iload_2\n        130: iload         5\n        132: iadd\n        133: istore_2\n        134: iload_3\n        135: iload         5\n        137: isub\n        138: istore_3\n        139: iload         4\n        141: iload         5\n        143: iadd\n        144: istore        4\n        146: aload_0\n        147: iload         5\n-       149: invokevirtual #74                 // Method count:(I)V\n+       149: invokevirtual #208                // Method count:(I)V\n        152: aload_0\n-       153: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       156: invokevirtual #75                 // Method java/util/zip/Inflater.finished:()Z\n+       153: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n+       156: invokevirtual #211                // Method java/util/zip/Inflater.finished:()Z\n        159: ifeq          336\n        162: aload_0\n-       163: getfield      #19                 // Field in:Ljava/io/InputStream;\n-       166: invokevirtual #76                 // Method java/io/InputStream.reset:()V\n+       163: getfield      #59                 // Field in:Ljava/io/InputStream;\n+       166: invokevirtual #214                // Method java/io/InputStream.reset:()V\n        169: aload_0\n-       170: getfield      #66                 // Field bufUsed:I\n+       170: getfield      #187                // Field bufUsed:I\n        173: aload_0\n-       174: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       177: invokevirtual #77                 // Method java/util/zip/Inflater.getRemaining:()I\n+       174: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n+       177: invokevirtual #215                // Method java/util/zip/Inflater.getRemaining:()I\n        180: isub\n        181: istore        6\n        183: aload_0\n-       184: getfield      #19                 // Field in:Ljava/io/InputStream;\n+       184: getfield      #59                 // Field in:Ljava/io/InputStream;\n        187: iload         6\n        189: i2l\n-       190: invokestatic  #78                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+       190: invokestatic  #218                // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n        193: iload         6\n        195: i2l\n        196: lcmp\n        197: ifeq          208\n-       200: new           #28                 // class java/io/IOException\n+       200: new           #85                 // class java/io/IOException\n        203: dup\n-       204: invokespecial #79                 // Method java/io/IOException.\"<init>\":()V\n+       204: invokespecial #224                // Method java/io/IOException.\"<init>\":()V\n        207: athrow\n        208: aload_0\n        209: iconst_0\n-       210: putfield      #66                 // Field bufUsed:I\n-       213: new           #32                 // class java/io/DataInputStream\n+       210: putfield      #187                // Field bufUsed:I\n+       213: new           #94                 // class java/io/DataInputStream\n        216: dup\n        217: aload_0\n-       218: getfield      #19                 // Field in:Ljava/io/InputStream;\n-       221: invokespecial #33                 // Method java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+       218: getfield      #59                 // Field in:Ljava/io/InputStream;\n+       221: invokespecial #96                 // Method java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n        224: astore        7\n        226: aload         7\n        228: iconst_4\n-       229: invokestatic  #39                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+       229: invokestatic  #110                // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n        232: lstore        8\n        234: lload         8\n        236: aload_0\n-       237: getfield      #9                  // Field crc:Ljava/util/zip/CRC32;\n-       240: invokevirtual #80                 // Method java/util/zip/CRC32.getValue:()J\n+       237: getfield      #28                 // Field crc:Ljava/util/zip/CRC32;\n+       240: invokevirtual #225                // Method java/util/zip/CRC32.getValue:()J\n        243: lcmp\n        244: ifeq          257\n-       247: new           #28                 // class java/io/IOException\n+       247: new           #85                 // class java/io/IOException\n        250: dup\n-       251: ldc           #81                 // String Gzip-compressed data is corrupt (CRC32 error)\n-       253: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       251: ldc           #229                // String Gzip-compressed data is corrupt (CRC32 error)\n+       253: invokespecial #91                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        256: athrow\n        257: aload         7\n        259: iconst_4\n-       260: invokestatic  #39                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+       260: invokestatic  #110                // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n        263: lstore        10\n        265: lload         10\n        267: aload_0\n-       268: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       271: invokevirtual #82                 // Method java/util/zip/Inflater.getBytesWritten:()J\n-       274: ldc2_w        #83                 // long 4294967295l\n+       268: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n+       271: invokevirtual #231                // Method java/util/zip/Inflater.getBytesWritten:()J\n+       274: ldc2_w        #234                // long 4294967295l\n        277: land\n        278: lcmp\n        279: ifeq          292\n-       282: new           #28                 // class java/io/IOException\n+       282: new           #85                 // class java/io/IOException\n        285: dup\n-       286: ldc           #85                 // String Gzip-compressed data is corrupt(uncompressed size mismatch)\n-       288: invokespecial #31                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       286: ldc           #236                // String Gzip-compressed data is corrupt(uncompressed size mismatch)\n+       288: invokespecial #91                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        291: athrow\n        292: aload_0\n-       293: getfield      #22                 // Field decompressConcatenated:Z\n+       293: getfield      #66                 // Field decompressConcatenated:Z\n        296: ifeq          307\n        299: aload_0\n        300: iconst_0\n-       301: invokespecial #23                 // Method init:(Z)Z\n+       301: invokespecial #69                 // Method init:(Z)Z\n        304: ifne          336\n        307: aload_0\n-       308: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       311: invokevirtual #86                 // Method java/util/zip/Inflater.end:()V\n+       308: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n+       311: invokevirtual #238                // Method java/util/zip/Inflater.end:()V\n        314: aload_0\n        315: aconst_null\n-       316: putfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n+       316: putfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n        319: aload_0\n        320: iconst_1\n-       321: putfield      #10                 // Field endReached:Z\n+       321: putfield      #32                 // Field endReached:Z\n        324: iload         4\n        326: ifne          333\n        329: iconst_m1\n        330: goto          335\n        333: iload         4\n        335: ireturn\n        336: goto          18\n@@ -1182,29 +1182,29 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n+         1: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n          4: ifnull        19\n          7: aload_0\n-         8: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-        11: invokevirtual #86                 // Method java/util/zip/Inflater.end:()V\n+         8: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n+        11: invokevirtual #238                // Method java/util/zip/Inflater.end:()V\n         14: aload_0\n         15: aconst_null\n-        16: putfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n+        16: putfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n         19: aload_0\n-        20: getfield      #19                 // Field in:Ljava/io/InputStream;\n-        23: getstatic     #87                 // Field java/lang/System.in:Ljava/io/InputStream;\n+        20: getfield      #59                 // Field in:Ljava/io/InputStream;\n+        23: getstatic     #241                // Field java/lang/System.in:Ljava/io/InputStream;\n         26: if_acmpeq     36\n         29: aload_0\n-        30: getfield      #19                 // Field in:Ljava/io/InputStream;\n-        33: invokevirtual #88                 // Method java/io/InputStream.close:()V\n+        30: getfield      #59                 // Field in:Ljava/io/InputStream;\n+        33: invokevirtual #244                // Method java/io/InputStream.close:()V\n         36: return\n       LineNumberTable:\n         line 388: 0\n         line 389: 7\n         line 390: 14\n         line 393: 19\n         line 394: 29\n@@ -1220,43 +1220,43 @@\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #17                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-         4: invokevirtual #89                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+         1: getfield      #51                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+         4: invokevirtual #245                // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n          7: lreturn\n       LineNumberTable:\n         line 403: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n-         0: ldc           #37                 // class org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-         2: invokevirtual #90                 // Method java/lang/Class.desiredAssertionStatus:()Z\n+         0: ldc           #2                  // class org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+         2: invokevirtual #248                // Method java/lang/Class.desiredAssertionStatus:()Z\n          5: ifne          12\n          8: iconst_1\n          9: goto          13\n         12: iconst_0\n-        13: putstatic     #24                 // Field $assertionsDisabled:Z\n+        13: putstatic     #73                 // Field $assertionsDisabled:Z\n         16: return\n       LineNumberTable:\n         line 76: 0\n       StackMapTable: number_of_entries = 2\n         frame_type = 12 /* same */\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n }\n SourceFile: \"GzipCompressorInputStream.java\"\n-InnerClasses:\n-  public static final #314= #313 of #317; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #208 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  0: #306 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #209 Unsupported compression method \\u0001 in the .gz header\n+      #312 Unsupported compression method \\u0001 in the .gz header\n+InnerClasses:\n+  public static final #319= #315 of #317; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
