{"diffoscope-json-version": 1, "source1": "first/GzipCompressorInputStream.class", "source2": "second/GzipCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,335 +1,335 @@\n-  SHA-256 checksum ae7d066dff342f96f7595b3525964d17fd0bd42380063196bf9c4407a53dcab1\n+  SHA-256 checksum c68324a3ad45e371d150fb74492add9e30915584393a6e965807b73c9e7826dd\n   Compiled from \"GzipCompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #53                         // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-  super_class: #96                        // org/apache/commons/compress/compressors/CompressorInputStream\n+  this_class: #31                         // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+  super_class: #36                        // org/apache/commons/compress/compressors/CompressorInputStream\n   interfaces: 1, fields: 16, methods: 11, attributes: 1\n Constant pool:\n-    #1 = Class              #182          // java/io/ByteArrayOutputStream\n-    #2 = Methodref          #1.#183       // java/io/ByteArrayOutputStream.\"<init>\":()V\n-    #3 = InterfaceMethodref #143.#184     // java/io/DataInput.readUnsignedByte:()I\n-    #4 = Methodref          #1.#185       // java/io/ByteArrayOutputStream.write:(I)V\n-    #5 = Methodref          #1.#186       // java/io/ByteArrayOutputStream.toByteArray:()[B\n-    #6 = Methodref          #1.#187       // java/io/ByteArrayOutputStream.close:()V\n-    #7 = Class              #188          // java/lang/Throwable\n-    #8 = Methodref          #7.#189       // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-    #9 = Methodref          #53.#190      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n-   #10 = Methodref          #96.#183      // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-   #11 = Fieldref           #53.#191      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.buf:[B\n-   #12 = Class              #192          // java/util/zip/Inflater\n-   #13 = Methodref          #12.#193      // java/util/zip/Inflater.\"<init>\":(Z)V\n-   #14 = Fieldref           #53.#194      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.inf:Ljava/util/zip/Inflater;\n-   #15 = Class              #195          // java/util/zip/CRC32\n-   #16 = Methodref          #15.#183      // java/util/zip/CRC32.\"<init>\":()V\n-   #17 = Fieldref           #53.#196      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.crc:Ljava/util/zip/CRC32;\n-   #18 = Fieldref           #53.#197      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.oneByte:[B\n-   #19 = Class              #198          // org/apache/commons/compress/compressors/gzip/GzipParameters\n-   #20 = Methodref          #19.#183      // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n-   #21 = Fieldref           #53.#199      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-   #22 = Class              #200          // org/apache/commons/compress/utils/CountingInputStream\n-   #23 = Methodref          #22.#201      // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #24 = Fieldref           #53.#202      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #25 = Methodref          #22.#203      // org/apache/commons/compress/utils/CountingInputStream.markSupported:()Z\n-   #26 = Fieldref           #53.#204      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.in:Ljava/io/InputStream;\n-   #27 = Class              #205          // java/io/BufferedInputStream\n-   #28 = Methodref          #27.#201      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #29 = Fieldref           #53.#206      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.decompressConcatenated:Z\n-   #30 = Methodref          #53.#207      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.init:(Z)Z\n-   #31 = Methodref          #12.#208      // java/util/zip/Inflater.end:()V\n-   #32 = Fieldref           #209.#204     // java/lang/System.in:Ljava/io/InputStream;\n-   #33 = Methodref          #151.#187     // java/io/InputStream.close:()V\n-   #34 = Methodref          #22.#210      // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n-   #35 = Fieldref           #53.#211      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.$assertionsDisabled:Z\n-   #36 = Class              #212          // java/lang/AssertionError\n-   #37 = Methodref          #36.#183      // java/lang/AssertionError.\"<init>\":()V\n-   #38 = Methodref          #151.#213     // java/io/InputStream.read:()I\n-   #39 = Class              #214          // java/io/IOException\n-   #40 = String             #215          // Input is not in the .gz format\n-   #41 = String             #216          // Garbage after a valid .gz stream\n-   #42 = Methodref          #39.#217      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #43 = Class              #218          // java/io/DataInputStream\n-   #44 = Methodref          #43.#201      // java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #45 = Class              #219          // java/util/zip/Deflater\n-   #46 = Class              #220          // java/lang/StringBuilder\n-   #47 = Methodref          #46.#183      // java/lang/StringBuilder.\"<init>\":()V\n-   #48 = String             #221          // Unsupported compression method\n-   #49 = Methodref          #46.#222      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #50 = Methodref          #46.#223      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #51 = String             #224          //  in the .gz header\n-   #52 = Methodref          #46.#225      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #53 = Class              #226          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-   #54 = String             #227          // Reserved flags are set in the .gz header\n-   #55 = Methodref          #228.#229     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n-   #56 = Long               1000l\n-   #58 = Methodref          #19.#230      // org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n-   #59 = Methodref          #19.#231      // org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n-   #60 = Methodref          #19.#232      // org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n-   #61 = Class              #233          // java/lang/String\n-   #62 = Methodref          #53.#234      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.readToNull:(Ljava/io/DataInput;)[B\n-   #63 = Fieldref           #235.#236     // org/apache/commons/compress/compressors/gzip/GzipUtils.GZIP_ENCODING:Ljava/nio/charset/Charset;\n-   #64 = Methodref          #61.#237      // java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-   #65 = Methodref          #19.#238      // org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n-   #66 = Methodref          #19.#239      // org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n-   #67 = InterfaceMethodref #143.#240     // java/io/DataInput.readShort:()S\n-   #68 = Methodref          #12.#241      // java/util/zip/Inflater.reset:()V\n-   #69 = Methodref          #15.#241      // java/util/zip/CRC32.reset:()V\n-   #70 = Methodref          #53.#242      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.read:([BII)I\n-   #71 = Fieldref           #53.#243      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.endReached:Z\n-   #72 = Methodref          #12.#244      // java/util/zip/Inflater.needsInput:()Z\n-   #73 = Methodref          #151.#245     // java/io/InputStream.mark:(I)V\n-   #74 = Methodref          #151.#246     // java/io/InputStream.read:([B)I\n-   #75 = Fieldref           #53.#247      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.bufUsed:I\n-   #76 = Class              #248          // java/io/EOFException\n-   #77 = Methodref          #76.#183      // java/io/EOFException.\"<init>\":()V\n-   #78 = Methodref          #12.#249      // java/util/zip/Inflater.setInput:([BII)V\n-   #79 = Methodref          #12.#250      // java/util/zip/Inflater.inflate:([BII)I\n-   #80 = Class              #251          // java/util/zip/DataFormatException\n-   #81 = String             #252          // Gzip-compressed data is corrupt\n-   #82 = Methodref          #15.#253      // java/util/zip/CRC32.update:([BII)V\n-   #83 = Methodref          #53.#254      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.count:(I)V\n-   #84 = Methodref          #12.#255      // java/util/zip/Inflater.finished:()Z\n-   #85 = Methodref          #151.#241     // java/io/InputStream.reset:()V\n-   #86 = Methodref          #12.#256      // java/util/zip/Inflater.getRemaining:()I\n-   #87 = Methodref          #257.#258     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-   #88 = Methodref          #39.#183      // java/io/IOException.\"<init>\":()V\n-   #89 = Methodref          #15.#259      // java/util/zip/CRC32.getValue:()J\n-   #90 = String             #260          // Gzip-compressed data is corrupt (CRC32 error)\n-   #91 = Methodref          #12.#261      // java/util/zip/Inflater.getBytesWritten:()J\n-   #92 = Long               4294967295l\n-   #94 = String             #262          // Gzip-compressed data is corrupt(uncompressed size mismatch)\n-   #95 = Methodref          #263.#264     // java/lang/Class.desiredAssertionStatus:()Z\n-   #96 = Class              #265          // org/apache/commons/compress/compressors/CompressorInputStream\n-   #97 = Class              #266          // org/apache/commons/compress/utils/InputStreamStatistics\n-   #98 = Utf8               FHCRC\n-   #99 = Utf8               I\n-  #100 = Utf8               ConstantValue\n-  #101 = Integer            2\n-  #102 = Utf8               FEXTRA\n-  #103 = Integer            4\n-  #104 = Utf8               FNAME\n-  #105 = Integer            8\n-  #106 = Utf8               FCOMMENT\n-  #107 = Integer            16\n-  #108 = Utf8               FRESERVED\n-  #109 = Integer            224\n-  #110 = Utf8               countingStream\n-  #111 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n-  #112 = Utf8               in\n-  #113 = Utf8               Ljava/io/InputStream;\n-  #114 = Utf8               decompressConcatenated\n-  #115 = Utf8               Z\n-  #116 = Utf8               buf\n-  #117 = Utf8               [B\n-  #118 = Utf8               bufUsed\n-  #119 = Utf8               inf\n-  #120 = Utf8               Ljava/util/zip/Inflater;\n-  #121 = Utf8               crc\n-  #122 = Utf8               Ljava/util/zip/CRC32;\n-  #123 = Utf8               endReached\n-  #124 = Utf8               oneByte\n-  #125 = Utf8               parameters\n-  #126 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #127 = Utf8               $assertionsDisabled\n-  #128 = Utf8               matches\n-  #129 = Utf8               ([BI)Z\n-  #130 = Utf8               Code\n-  #131 = Utf8               LineNumberTable\n-  #132 = Utf8               LocalVariableTable\n-  #133 = Utf8               signature\n-  #134 = Utf8               length\n-  #135 = Utf8               StackMapTable\n-  #136 = Utf8               readToNull\n-  #137 = Utf8               (Ljava/io/DataInput;)[B\n-  #138 = Utf8               b\n-  #139 = Utf8               bos\n-  #140 = Utf8               Ljava/io/ByteArrayOutputStream;\n-  #141 = Utf8               inData\n-  #142 = Utf8               Ljava/io/DataInput;\n-  #143 = Class              #267          // java/io/DataInput\n-  #144 = Utf8               Exceptions\n-  #145 = Utf8               <init>\n-  #146 = Utf8               (Ljava/io/InputStream;)V\n-  #147 = Utf8               this\n-  #148 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n-  #149 = Utf8               inputStream\n-  #150 = Utf8               (Ljava/io/InputStream;Z)V\n-  #151 = Class              #268          // java/io/InputStream\n-  #152 = Utf8               close\n-  #153 = Utf8               ()V\n-  #154 = Utf8               getCompressedCount\n-  #155 = Utf8               ()J\n-  #156 = Utf8               getMetaData\n-  #157 = Utf8               ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #158 = Utf8               init\n-  #159 = Utf8               (Z)Z\n-  #160 = Utf8               xlen\n-  #161 = Utf8               isFirstMember\n-  #162 = Utf8               magic0\n-  #163 = Utf8               method\n-  #164 = Utf8               flg\n-  #165 = Utf8               read\n-  #166 = Utf8               ()I\n-  #167 = Utf8               ([BII)I\n-  #168 = Utf8               ret\n-  #169 = Utf8               e\n-  #170 = Utf8               Ljava/util/zip/DataFormatException;\n-  #171 = Utf8               skipAmount\n-  #172 = Utf8               crcStored\n-  #173 = Utf8               J\n-  #174 = Utf8               isize\n-  #175 = Utf8               off\n-  #176 = Utf8               len\n-  #177 = Utf8               size\n-  #178 = Class              #117          // \"[B\"\n-  #179 = Utf8               <clinit>\n-  #180 = Utf8               SourceFile\n-  #181 = Utf8               GzipCompressorInputStream.java\n-  #182 = Utf8               java/io/ByteArrayOutputStream\n-  #183 = NameAndType        #145:#153     // \"<init>\":()V\n-  #184 = NameAndType        #269:#166     // readUnsignedByte:()I\n-  #185 = NameAndType        #270:#271     // write:(I)V\n-  #186 = NameAndType        #272:#273     // toByteArray:()[B\n-  #187 = NameAndType        #152:#153     // close:()V\n-  #188 = Utf8               java/lang/Throwable\n-  #189 = NameAndType        #274:#275     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #190 = NameAndType        #145:#150     // \"<init>\":(Ljava/io/InputStream;Z)V\n-  #191 = NameAndType        #116:#117     // buf:[B\n-  #192 = Utf8               java/util/zip/Inflater\n-  #193 = NameAndType        #145:#276     // \"<init>\":(Z)V\n-  #194 = NameAndType        #119:#120     // inf:Ljava/util/zip/Inflater;\n-  #195 = Utf8               java/util/zip/CRC32\n-  #196 = NameAndType        #121:#122     // crc:Ljava/util/zip/CRC32;\n-  #197 = NameAndType        #124:#117     // oneByte:[B\n-  #198 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n-  #199 = NameAndType        #125:#126     // parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #200 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n-  #201 = NameAndType        #145:#146     // \"<init>\":(Ljava/io/InputStream;)V\n-  #202 = NameAndType        #110:#111     // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-  #203 = NameAndType        #277:#278     // markSupported:()Z\n-  #204 = NameAndType        #112:#113     // in:Ljava/io/InputStream;\n-  #205 = Utf8               java/io/BufferedInputStream\n-  #206 = NameAndType        #114:#115     // decompressConcatenated:Z\n-  #207 = NameAndType        #158:#159     // init:(Z)Z\n-  #208 = NameAndType        #279:#153     // end:()V\n-  #209 = Class              #280          // java/lang/System\n-  #210 = NameAndType        #281:#155     // getBytesRead:()J\n-  #211 = NameAndType        #127:#115     // $assertionsDisabled:Z\n-  #212 = Utf8               java/lang/AssertionError\n-  #213 = NameAndType        #165:#166     // read:()I\n-  #214 = Utf8               java/io/IOException\n-  #215 = Utf8               Input is not in the .gz format\n-  #216 = Utf8               Garbage after a valid .gz stream\n-  #217 = NameAndType        #145:#282     // \"<init>\":(Ljava/lang/String;)V\n-  #218 = Utf8               java/io/DataInputStream\n-  #219 = Utf8               java/util/zip/Deflater\n-  #220 = Utf8               java/lang/StringBuilder\n-  #221 = Utf8               Unsupported compression method\n-  #222 = NameAndType        #283:#284     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #223 = NameAndType        #283:#285     // append:(I)Ljava/lang/StringBuilder;\n-  #224 = Utf8                in the .gz header\n-  #225 = NameAndType        #286:#287     // toString:()Ljava/lang/String;\n-  #226 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-  #227 = Utf8               Reserved flags are set in the .gz header\n-  #228 = Class              #288          // org/apache/commons/compress/utils/ByteUtils\n-  #229 = NameAndType        #289:#290     // fromLittleEndian:(Ljava/io/DataInput;I)J\n-  #230 = NameAndType        #291:#292     // setModificationTime:(J)V\n-  #231 = NameAndType        #293:#271     // setCompressionLevel:(I)V\n-  #232 = NameAndType        #294:#271     // setOperatingSystem:(I)V\n-  #233 = Utf8               java/lang/String\n-  #234 = NameAndType        #136:#137     // readToNull:(Ljava/io/DataInput;)[B\n-  #235 = Class              #295          // org/apache/commons/compress/compressors/gzip/GzipUtils\n-  #236 = NameAndType        #296:#297     // GZIP_ENCODING:Ljava/nio/charset/Charset;\n-  #237 = NameAndType        #145:#298     // \"<init>\":([BLjava/nio/charset/Charset;)V\n-  #238 = NameAndType        #299:#282     // setFilename:(Ljava/lang/String;)V\n-  #239 = NameAndType        #300:#282     // setComment:(Ljava/lang/String;)V\n-  #240 = NameAndType        #301:#302     // readShort:()S\n-  #241 = NameAndType        #303:#153     // reset:()V\n-  #242 = NameAndType        #165:#167     // read:([BII)I\n-  #243 = NameAndType        #123:#115     // endReached:Z\n-  #244 = NameAndType        #304:#278     // needsInput:()Z\n-  #245 = NameAndType        #305:#271     // mark:(I)V\n-  #246 = NameAndType        #165:#306     // read:([B)I\n-  #247 = NameAndType        #118:#99      // bufUsed:I\n-  #248 = Utf8               java/io/EOFException\n-  #249 = NameAndType        #307:#308     // setInput:([BII)V\n-  #250 = NameAndType        #309:#167     // inflate:([BII)I\n-  #251 = Utf8               java/util/zip/DataFormatException\n-  #252 = Utf8               Gzip-compressed data is corrupt\n-  #253 = NameAndType        #310:#308     // update:([BII)V\n-  #254 = NameAndType        #311:#271     // count:(I)V\n-  #255 = NameAndType        #312:#278     // finished:()Z\n-  #256 = NameAndType        #313:#166     // getRemaining:()I\n-  #257 = Class              #314          // org/apache/commons/compress/utils/IOUtils\n-  #258 = NameAndType        #315:#316     // skip:(Ljava/io/InputStream;J)J\n-  #259 = NameAndType        #317:#155     // getValue:()J\n-  #260 = Utf8               Gzip-compressed data is corrupt (CRC32 error)\n-  #261 = NameAndType        #318:#155     // getBytesWritten:()J\n-  #262 = Utf8               Gzip-compressed data is corrupt(uncompressed size mismatch)\n-  #263 = Class              #319          // java/lang/Class\n-  #264 = NameAndType        #320:#278     // desiredAssertionStatus:()Z\n-  #265 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-  #266 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #267 = Utf8               java/io/DataInput\n-  #268 = Utf8               java/io/InputStream\n-  #269 = Utf8               readUnsignedByte\n-  #270 = Utf8               write\n-  #271 = Utf8               (I)V\n-  #272 = Utf8               toByteArray\n-  #273 = Utf8               ()[B\n-  #274 = Utf8               addSuppressed\n-  #275 = Utf8               (Ljava/lang/Throwable;)V\n-  #276 = Utf8               (Z)V\n-  #277 = Utf8               markSupported\n-  #278 = Utf8               ()Z\n-  #279 = Utf8               end\n-  #280 = Utf8               java/lang/System\n-  #281 = Utf8               getBytesRead\n-  #282 = Utf8               (Ljava/lang/String;)V\n-  #283 = Utf8               append\n-  #284 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #285 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #286 = Utf8               toString\n-  #287 = Utf8               ()Ljava/lang/String;\n-  #288 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #289 = Utf8               fromLittleEndian\n-  #290 = Utf8               (Ljava/io/DataInput;I)J\n-  #291 = Utf8               setModificationTime\n-  #292 = Utf8               (J)V\n-  #293 = Utf8               setCompressionLevel\n-  #294 = Utf8               setOperatingSystem\n-  #295 = Utf8               org/apache/commons/compress/compressors/gzip/GzipUtils\n-  #296 = Utf8               GZIP_ENCODING\n-  #297 = Utf8               Ljava/nio/charset/Charset;\n-  #298 = Utf8               ([BLjava/nio/charset/Charset;)V\n-  #299 = Utf8               setFilename\n-  #300 = Utf8               setComment\n-  #301 = Utf8               readShort\n-  #302 = Utf8               ()S\n-  #303 = Utf8               reset\n-  #304 = Utf8               needsInput\n-  #305 = Utf8               mark\n-  #306 = Utf8               ([B)I\n-  #307 = Utf8               setInput\n-  #308 = Utf8               ([BII)V\n-  #309 = Utf8               inflate\n-  #310 = Utf8               update\n-  #311 = Utf8               count\n-  #312 = Utf8               finished\n-  #313 = Utf8               getRemaining\n-  #314 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #315 = Utf8               skip\n-  #316 = Utf8               (Ljava/io/InputStream;J)J\n-  #317 = Utf8               getValue\n-  #318 = Utf8               getBytesWritten\n-  #319 = Utf8               java/lang/Class\n-  #320 = Utf8               desiredAssertionStatus\n+    #1 = Class              #2            // java/io/ByteArrayOutputStream\n+    #2 = Utf8               java/io/ByteArrayOutputStream\n+    #3 = Methodref          #1.#4         // java/io/ByteArrayOutputStream.\"<init>\":()V\n+    #4 = NameAndType        #5:#6         // \"<init>\":()V\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = InterfaceMethodref #8.#9         // java/io/DataInput.readUnsignedByte:()I\n+    #8 = Class              #10           // java/io/DataInput\n+    #9 = NameAndType        #11:#12       // readUnsignedByte:()I\n+   #10 = Utf8               java/io/DataInput\n+   #11 = Utf8               readUnsignedByte\n+   #12 = Utf8               ()I\n+   #13 = Methodref          #1.#14        // java/io/ByteArrayOutputStream.write:(I)V\n+   #14 = NameAndType        #15:#16       // write:(I)V\n+   #15 = Utf8               write\n+   #16 = Utf8               (I)V\n+   #17 = Methodref          #1.#18        // java/io/ByteArrayOutputStream.toByteArray:()[B\n+   #18 = NameAndType        #19:#20       // toByteArray:()[B\n+   #19 = Utf8               toByteArray\n+   #20 = Utf8               ()[B\n+   #21 = Methodref          #1.#22        // java/io/ByteArrayOutputStream.close:()V\n+   #22 = NameAndType        #23:#6        // close:()V\n+   #23 = Utf8               close\n+   #24 = Class              #25           // java/lang/Throwable\n+   #25 = Utf8               java/lang/Throwable\n+   #26 = Methodref          #24.#27       // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+   #27 = NameAndType        #28:#29       // addSuppressed:(Ljava/lang/Throwable;)V\n+   #28 = Utf8               addSuppressed\n+   #29 = Utf8               (Ljava/lang/Throwable;)V\n+   #30 = Methodref          #31.#32       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n+   #31 = Class              #33           // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+   #32 = NameAndType        #5:#34        // \"<init>\":(Ljava/io/InputStream;Z)V\n+   #33 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+   #34 = Utf8               (Ljava/io/InputStream;Z)V\n+   #35 = Methodref          #36.#4        // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+   #36 = Class              #37           // org/apache/commons/compress/compressors/CompressorInputStream\n+   #37 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+   #38 = Fieldref           #31.#39       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.buf:[B\n+   #39 = NameAndType        #40:#41       // buf:[B\n+   #40 = Utf8               buf\n+   #41 = Utf8               [B\n+   #42 = Class              #43           // java/util/zip/Inflater\n+   #43 = Utf8               java/util/zip/Inflater\n+   #44 = Methodref          #42.#45       // java/util/zip/Inflater.\"<init>\":(Z)V\n+   #45 = NameAndType        #5:#46        // \"<init>\":(Z)V\n+   #46 = Utf8               (Z)V\n+   #47 = Fieldref           #31.#48       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.inf:Ljava/util/zip/Inflater;\n+   #48 = NameAndType        #49:#50       // inf:Ljava/util/zip/Inflater;\n+   #49 = Utf8               inf\n+   #50 = Utf8               Ljava/util/zip/Inflater;\n+   #51 = Class              #52           // java/util/zip/CRC32\n+   #52 = Utf8               java/util/zip/CRC32\n+   #53 = Methodref          #51.#4        // java/util/zip/CRC32.\"<init>\":()V\n+   #54 = Fieldref           #31.#55       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.crc:Ljava/util/zip/CRC32;\n+   #55 = NameAndType        #56:#57       // crc:Ljava/util/zip/CRC32;\n+   #56 = Utf8               crc\n+   #57 = Utf8               Ljava/util/zip/CRC32;\n+   #58 = Fieldref           #31.#59       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.oneByte:[B\n+   #59 = NameAndType        #60:#41       // oneByte:[B\n+   #60 = Utf8               oneByte\n+   #61 = Class              #62           // org/apache/commons/compress/compressors/gzip/GzipParameters\n+   #62 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n+   #63 = Methodref          #61.#4        // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n+   #64 = Fieldref           #31.#65       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+   #65 = NameAndType        #66:#67       // parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+   #66 = Utf8               parameters\n+   #67 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+   #68 = Class              #69           // org/apache/commons/compress/utils/CountingInputStream\n+   #69 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n+   #70 = Methodref          #68.#71       // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #71 = NameAndType        #5:#72        // \"<init>\":(Ljava/io/InputStream;)V\n+   #72 = Utf8               (Ljava/io/InputStream;)V\n+   #73 = Fieldref           #31.#74       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #74 = NameAndType        #75:#76       // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #75 = Utf8               countingStream\n+   #76 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #77 = Methodref          #68.#78       // org/apache/commons/compress/utils/CountingInputStream.markSupported:()Z\n+   #78 = NameAndType        #79:#80       // markSupported:()Z\n+   #79 = Utf8               markSupported\n+   #80 = Utf8               ()Z\n+   #81 = Fieldref           #31.#82       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.in:Ljava/io/InputStream;\n+   #82 = NameAndType        #83:#84       // in:Ljava/io/InputStream;\n+   #83 = Utf8               in\n+   #84 = Utf8               Ljava/io/InputStream;\n+   #85 = Class              #86           // java/io/BufferedInputStream\n+   #86 = Utf8               java/io/BufferedInputStream\n+   #87 = Methodref          #85.#71       // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #88 = Fieldref           #31.#89       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.decompressConcatenated:Z\n+   #89 = NameAndType        #90:#91       // decompressConcatenated:Z\n+   #90 = Utf8               decompressConcatenated\n+   #91 = Utf8               Z\n+   #92 = Methodref          #31.#93       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.init:(Z)Z\n+   #93 = NameAndType        #94:#95       // init:(Z)Z\n+   #94 = Utf8               init\n+   #95 = Utf8               (Z)Z\n+   #96 = Methodref          #42.#97       // java/util/zip/Inflater.end:()V\n+   #97 = NameAndType        #98:#6        // end:()V\n+   #98 = Utf8               end\n+   #99 = Fieldref           #100.#82      // java/lang/System.in:Ljava/io/InputStream;\n+  #100 = Class              #101          // java/lang/System\n+  #101 = Utf8               java/lang/System\n+  #102 = Methodref          #103.#22      // java/io/InputStream.close:()V\n+  #103 = Class              #104          // java/io/InputStream\n+  #104 = Utf8               java/io/InputStream\n+  #105 = Methodref          #68.#106      // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+  #106 = NameAndType        #107:#108     // getBytesRead:()J\n+  #107 = Utf8               getBytesRead\n+  #108 = Utf8               ()J\n+  #109 = Fieldref           #31.#110      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.$assertionsDisabled:Z\n+  #110 = NameAndType        #111:#91      // $assertionsDisabled:Z\n+  #111 = Utf8               $assertionsDisabled\n+  #112 = Class              #113          // java/lang/AssertionError\n+  #113 = Utf8               java/lang/AssertionError\n+  #114 = Methodref          #112.#4       // java/lang/AssertionError.\"<init>\":()V\n+  #115 = Methodref          #103.#116     // java/io/InputStream.read:()I\n+  #116 = NameAndType        #117:#12      // read:()I\n+  #117 = Utf8               read\n+  #118 = Class              #119          // java/io/IOException\n+  #119 = Utf8               java/io/IOException\n+  #120 = String             #121          // Input is not in the .gz format\n+  #121 = Utf8               Input is not in the .gz format\n+  #122 = String             #123          // Garbage after a valid .gz stream\n+  #123 = Utf8               Garbage after a valid .gz stream\n+  #124 = Methodref          #118.#125     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #125 = NameAndType        #5:#126       // \"<init>\":(Ljava/lang/String;)V\n+  #126 = Utf8               (Ljava/lang/String;)V\n+  #127 = Class              #128          // java/io/DataInputStream\n+  #128 = Utf8               java/io/DataInputStream\n+  #129 = Methodref          #127.#71      // java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #130 = Class              #131          // java/util/zip/Deflater\n+  #131 = Utf8               java/util/zip/Deflater\n+  #132 = Class              #133          // java/lang/StringBuilder\n+  #133 = Utf8               java/lang/StringBuilder\n+  #134 = Methodref          #132.#4       // java/lang/StringBuilder.\"<init>\":()V\n+  #135 = String             #136          // Unsupported compression method\n+  #136 = Utf8               Unsupported compression method\n+  #137 = Methodref          #132.#138     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #138 = NameAndType        #139:#140     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #139 = Utf8               append\n+  #140 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #141 = Methodref          #132.#142     // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #142 = NameAndType        #139:#143     // append:(I)Ljava/lang/StringBuilder;\n+  #143 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #144 = String             #145          //  in the .gz header\n+  #145 = Utf8                in the .gz header\n+  #146 = Methodref          #132.#147     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #147 = NameAndType        #148:#149     // toString:()Ljava/lang/String;\n+  #148 = Utf8               toString\n+  #149 = Utf8               ()Ljava/lang/String;\n+  #150 = String             #151          // Reserved flags are set in the .gz header\n+  #151 = Utf8               Reserved flags are set in the .gz header\n+  #152 = Methodref          #153.#154     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+  #153 = Class              #155          // org/apache/commons/compress/utils/ByteUtils\n+  #154 = NameAndType        #156:#157     // fromLittleEndian:(Ljava/io/DataInput;I)J\n+  #155 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+  #156 = Utf8               fromLittleEndian\n+  #157 = Utf8               (Ljava/io/DataInput;I)J\n+  #158 = Long               1000l\n+  #160 = Methodref          #61.#161      // org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n+  #161 = NameAndType        #162:#163     // setModificationTime:(J)V\n+  #162 = Utf8               setModificationTime\n+  #163 = Utf8               (J)V\n+  #164 = Methodref          #61.#165      // org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+  #165 = NameAndType        #166:#16      // setCompressionLevel:(I)V\n+  #166 = Utf8               setCompressionLevel\n+  #167 = Methodref          #61.#168      // org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n+  #168 = NameAndType        #169:#16      // setOperatingSystem:(I)V\n+  #169 = Utf8               setOperatingSystem\n+  #170 = Class              #171          // java/lang/String\n+  #171 = Utf8               java/lang/String\n+  #172 = Methodref          #31.#173      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.readToNull:(Ljava/io/DataInput;)[B\n+  #173 = NameAndType        #174:#175     // readToNull:(Ljava/io/DataInput;)[B\n+  #174 = Utf8               readToNull\n+  #175 = Utf8               (Ljava/io/DataInput;)[B\n+  #176 = Fieldref           #177.#178     // org/apache/commons/compress/compressors/gzip/GzipUtils.GZIP_ENCODING:Ljava/nio/charset/Charset;\n+  #177 = Class              #179          // org/apache/commons/compress/compressors/gzip/GzipUtils\n+  #178 = NameAndType        #180:#181     // GZIP_ENCODING:Ljava/nio/charset/Charset;\n+  #179 = Utf8               org/apache/commons/compress/compressors/gzip/GzipUtils\n+  #180 = Utf8               GZIP_ENCODING\n+  #181 = Utf8               Ljava/nio/charset/Charset;\n+  #182 = Methodref          #170.#183     // java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+  #183 = NameAndType        #5:#184       // \"<init>\":([BLjava/nio/charset/Charset;)V\n+  #184 = Utf8               ([BLjava/nio/charset/Charset;)V\n+  #185 = Methodref          #61.#186      // org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n+  #186 = NameAndType        #187:#126     // setFilename:(Ljava/lang/String;)V\n+  #187 = Utf8               setFilename\n+  #188 = Methodref          #61.#189      // org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n+  #189 = NameAndType        #190:#126     // setComment:(Ljava/lang/String;)V\n+  #190 = Utf8               setComment\n+  #191 = InterfaceMethodref #8.#192       // java/io/DataInput.readShort:()S\n+  #192 = NameAndType        #193:#194     // readShort:()S\n+  #193 = Utf8               readShort\n+  #194 = Utf8               ()S\n+  #195 = Methodref          #42.#196      // java/util/zip/Inflater.reset:()V\n+  #196 = NameAndType        #197:#6       // reset:()V\n+  #197 = Utf8               reset\n+  #198 = Methodref          #51.#196      // java/util/zip/CRC32.reset:()V\n+  #199 = Methodref          #31.#200      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.read:([BII)I\n+  #200 = NameAndType        #117:#201     // read:([BII)I\n+  #201 = Utf8               ([BII)I\n+  #202 = Fieldref           #31.#203      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.endReached:Z\n+  #203 = NameAndType        #204:#91      // endReached:Z\n+  #204 = Utf8               endReached\n+  #205 = Methodref          #42.#206      // java/util/zip/Inflater.needsInput:()Z\n+  #206 = NameAndType        #207:#80      // needsInput:()Z\n+  #207 = Utf8               needsInput\n+  #208 = Methodref          #103.#209     // java/io/InputStream.mark:(I)V\n+  #209 = NameAndType        #210:#16      // mark:(I)V\n+  #210 = Utf8               mark\n+  #211 = Methodref          #103.#212     // java/io/InputStream.read:([B)I\n+  #212 = NameAndType        #117:#213     // read:([B)I\n+  #213 = Utf8               ([B)I\n+  #214 = Fieldref           #31.#215      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.bufUsed:I\n+  #215 = NameAndType        #216:#217     // bufUsed:I\n+  #216 = Utf8               bufUsed\n+  #217 = Utf8               I\n+  #218 = Class              #219          // java/io/EOFException\n+  #219 = Utf8               java/io/EOFException\n+  #220 = Methodref          #218.#4       // java/io/EOFException.\"<init>\":()V\n+  #221 = Methodref          #42.#222      // java/util/zip/Inflater.setInput:([BII)V\n+  #222 = NameAndType        #223:#224     // setInput:([BII)V\n+  #223 = Utf8               setInput\n+  #224 = Utf8               ([BII)V\n+  #225 = Methodref          #42.#226      // java/util/zip/Inflater.inflate:([BII)I\n+  #226 = NameAndType        #227:#201     // inflate:([BII)I\n+  #227 = Utf8               inflate\n+  #228 = Class              #229          // java/util/zip/DataFormatException\n+  #229 = Utf8               java/util/zip/DataFormatException\n+  #230 = String             #231          // Gzip-compressed data is corrupt\n+  #231 = Utf8               Gzip-compressed data is corrupt\n+  #232 = Methodref          #51.#233      // java/util/zip/CRC32.update:([BII)V\n+  #233 = NameAndType        #234:#224     // update:([BII)V\n+  #234 = Utf8               update\n+  #235 = Methodref          #31.#236      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.count:(I)V\n+  #236 = NameAndType        #237:#16      // count:(I)V\n+  #237 = Utf8               count\n+  #238 = Methodref          #42.#239      // java/util/zip/Inflater.finished:()Z\n+  #239 = NameAndType        #240:#80      // finished:()Z\n+  #240 = Utf8               finished\n+  #241 = Methodref          #103.#196     // java/io/InputStream.reset:()V\n+  #242 = Methodref          #42.#243      // java/util/zip/Inflater.getRemaining:()I\n+  #243 = NameAndType        #244:#12      // getRemaining:()I\n+  #244 = Utf8               getRemaining\n+  #245 = Methodref          #246.#247     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+  #246 = Class              #248          // org/apache/commons/compress/utils/IOUtils\n+  #247 = NameAndType        #249:#250     // skip:(Ljava/io/InputStream;J)J\n+  #248 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #249 = Utf8               skip\n+  #250 = Utf8               (Ljava/io/InputStream;J)J\n+  #251 = Methodref          #118.#4       // java/io/IOException.\"<init>\":()V\n+  #252 = Methodref          #51.#253      // java/util/zip/CRC32.getValue:()J\n+  #253 = NameAndType        #254:#108     // getValue:()J\n+  #254 = Utf8               getValue\n+  #255 = String             #256          // Gzip-compressed data is corrupt (CRC32 error)\n+  #256 = Utf8               Gzip-compressed data is corrupt (CRC32 error)\n+  #257 = Methodref          #42.#258      // java/util/zip/Inflater.getBytesWritten:()J\n+  #258 = NameAndType        #259:#108     // getBytesWritten:()J\n+  #259 = Utf8               getBytesWritten\n+  #260 = Long               4294967295l\n+  #262 = String             #263          // Gzip-compressed data is corrupt(uncompressed size mismatch)\n+  #263 = Utf8               Gzip-compressed data is corrupt(uncompressed size mismatch)\n+  #264 = Methodref          #265.#266     // java/lang/Class.desiredAssertionStatus:()Z\n+  #265 = Class              #267          // java/lang/Class\n+  #266 = NameAndType        #268:#80      // desiredAssertionStatus:()Z\n+  #267 = Utf8               java/lang/Class\n+  #268 = Utf8               desiredAssertionStatus\n+  #269 = Class              #270          // org/apache/commons/compress/utils/InputStreamStatistics\n+  #270 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+  #271 = Utf8               FHCRC\n+  #272 = Utf8               ConstantValue\n+  #273 = Integer            2\n+  #274 = Utf8               FEXTRA\n+  #275 = Integer            4\n+  #276 = Utf8               FNAME\n+  #277 = Integer            8\n+  #278 = Utf8               FCOMMENT\n+  #279 = Integer            16\n+  #280 = Utf8               FRESERVED\n+  #281 = Integer            224\n+  #282 = Utf8               matches\n+  #283 = Utf8               ([BI)Z\n+  #284 = Utf8               Code\n+  #285 = Utf8               LineNumberTable\n+  #286 = Utf8               LocalVariableTable\n+  #287 = Utf8               signature\n+  #288 = Utf8               length\n+  #289 = Utf8               StackMapTable\n+  #290 = Utf8               b\n+  #291 = Utf8               bos\n+  #292 = Utf8               Ljava/io/ByteArrayOutputStream;\n+  #293 = Utf8               inData\n+  #294 = Utf8               Ljava/io/DataInput;\n+  #295 = Utf8               Exceptions\n+  #296 = Utf8               this\n+  #297 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n+  #298 = Utf8               inputStream\n+  #299 = Utf8               getCompressedCount\n+  #300 = Utf8               getMetaData\n+  #301 = Utf8               ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+  #302 = Utf8               xlen\n+  #303 = Utf8               isFirstMember\n+  #304 = Utf8               magic0\n+  #305 = Utf8               method\n+  #306 = Utf8               flg\n+  #307 = Utf8               ret\n+  #308 = Utf8               e\n+  #309 = Utf8               Ljava/util/zip/DataFormatException;\n+  #310 = Utf8               skipAmount\n+  #311 = Utf8               crcStored\n+  #312 = Utf8               J\n+  #313 = Utf8               isize\n+  #314 = Utf8               off\n+  #315 = Utf8               len\n+  #316 = Utf8               size\n+  #317 = Class              #41           // \"[B\"\n+  #318 = Utf8               <clinit>\n+  #319 = Utf8               SourceFile\n+  #320 = Utf8               GzipCompressorInputStream.java\n {\n   private static final int FHCRC = 2;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 2\n \n   private static final int FEXTRA = 4;\n@@ -432,42 +432,42 @@\n   private static byte[] readToNull(java.io.DataInput) throws java.io.IOException;\n     descriptor: (Ljava/io/DataInput;)[B\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=2, locals=4, args_size=1\n          0: new           #1                  // class java/io/ByteArrayOutputStream\n          3: dup\n-         4: invokespecial #2                  // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+         4: invokespecial #3                  // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n          7: astore_1\n          8: iconst_0\n          9: istore_2\n         10: aload_0\n-        11: invokeinterface #3,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+        11: invokeinterface #7,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n         16: dup\n         17: istore_2\n         18: ifeq          29\n         21: aload_1\n         22: iload_2\n-        23: invokevirtual #4                  // Method java/io/ByteArrayOutputStream.write:(I)V\n+        23: invokevirtual #13                 // Method java/io/ByteArrayOutputStream.write:(I)V\n         26: goto          10\n         29: aload_1\n-        30: invokevirtual #5                  // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n+        30: invokevirtual #17                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n         33: astore_3\n         34: aload_1\n-        35: invokevirtual #6                  // Method java/io/ByteArrayOutputStream.close:()V\n+        35: invokevirtual #21                 // Method java/io/ByteArrayOutputStream.close:()V\n         38: aload_3\n         39: areturn\n         40: astore_2\n         41: aload_1\n-        42: invokevirtual #6                  // Method java/io/ByteArrayOutputStream.close:()V\n+        42: invokevirtual #21                 // Method java/io/ByteArrayOutputStream.close:()V\n         45: goto          54\n         48: astore_3\n         49: aload_2\n         50: aload_3\n-        51: invokevirtual #8                  // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        51: invokevirtual #26                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n         54: aload_2\n         55: athrow\n       Exception table:\n          from    to  target type\n              8    34    40   Class java/lang/Throwable\n             41    45    48   Class java/lang/Throwable\n       LineNumberTable:\n@@ -505,15 +505,15 @@\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: invokespecial #9                  // Method \"<init>\":(Ljava/io/InputStream;Z)V\n+         3: invokespecial #30                 // Method \"<init>\":(Ljava/io/InputStream;Z)V\n          6: return\n       LineNumberTable:\n         line 153: 0\n         line 154: 6\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n@@ -523,67 +523,67 @@\n \n   public org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream(java.io.InputStream, boolean) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #10                 // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+         1: invokespecial #35                 // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n          5: sipush        8192\n          8: newarray       byte\n-        10: putfield      #11                 // Field buf:[B\n+        10: putfield      #38                 // Field buf:[B\n         13: aload_0\n-        14: new           #12                 // class java/util/zip/Inflater\n+        14: new           #42                 // class java/util/zip/Inflater\n         17: dup\n         18: iconst_1\n-        19: invokespecial #13                 // Method java/util/zip/Inflater.\"<init>\":(Z)V\n-        22: putfield      #14                 // Field inf:Ljava/util/zip/Inflater;\n+        19: invokespecial #44                 // Method java/util/zip/Inflater.\"<init>\":(Z)V\n+        22: putfield      #47                 // Field inf:Ljava/util/zip/Inflater;\n         25: aload_0\n-        26: new           #15                 // class java/util/zip/CRC32\n+        26: new           #51                 // class java/util/zip/CRC32\n         29: dup\n-        30: invokespecial #16                 // Method java/util/zip/CRC32.\"<init>\":()V\n-        33: putfield      #17                 // Field crc:Ljava/util/zip/CRC32;\n+        30: invokespecial #53                 // Method java/util/zip/CRC32.\"<init>\":()V\n+        33: putfield      #54                 // Field crc:Ljava/util/zip/CRC32;\n         36: aload_0\n         37: iconst_1\n         38: newarray       byte\n-        40: putfield      #18                 // Field oneByte:[B\n+        40: putfield      #58                 // Field oneByte:[B\n         43: aload_0\n-        44: new           #19                 // class org/apache/commons/compress/compressors/gzip/GzipParameters\n+        44: new           #61                 // class org/apache/commons/compress/compressors/gzip/GzipParameters\n         47: dup\n-        48: invokespecial #20                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n-        51: putfield      #21                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+        48: invokespecial #63                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n+        51: putfield      #64                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n         54: aload_0\n-        55: new           #22                 // class org/apache/commons/compress/utils/CountingInputStream\n+        55: new           #68                 // class org/apache/commons/compress/utils/CountingInputStream\n         58: dup\n         59: aload_1\n-        60: invokespecial #23                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-        63: putfield      #24                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        60: invokespecial #70                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        63: putfield      #73                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         66: aload_0\n-        67: getfield      #24                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-        70: invokevirtual #25                 // Method org/apache/commons/compress/utils/CountingInputStream.markSupported:()Z\n+        67: getfield      #73                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        70: invokevirtual #77                 // Method org/apache/commons/compress/utils/CountingInputStream.markSupported:()Z\n         73: ifeq          87\n         76: aload_0\n         77: aload_0\n-        78: getfield      #24                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-        81: putfield      #26                 // Field in:Ljava/io/InputStream;\n+        78: getfield      #73                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        81: putfield      #81                 // Field in:Ljava/io/InputStream;\n         84: goto          102\n         87: aload_0\n-        88: new           #27                 // class java/io/BufferedInputStream\n+        88: new           #85                 // class java/io/BufferedInputStream\n         91: dup\n         92: aload_0\n-        93: getfield      #24                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-        96: invokespecial #28                 // Method java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-        99: putfield      #26                 // Field in:Ljava/io/InputStream;\n+        93: getfield      #73                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        96: invokespecial #87                 // Method java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        99: putfield      #81                 // Field in:Ljava/io/InputStream;\n        102: aload_0\n        103: iload_2\n-       104: putfield      #29                 // Field decompressConcatenated:Z\n+       104: putfield      #88                 // Field decompressConcatenated:Z\n        107: aload_0\n        108: iconst_1\n-       109: invokespecial #30                 // Method init:(Z)Z\n+       109: invokespecial #92                 // Method init:(Z)Z\n        112: pop\n        113: return\n       LineNumberTable:\n         line 178: 0\n         line 119: 4\n         line 125: 13\n         line 128: 25\n@@ -612,29 +612,29 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #14                 // Field inf:Ljava/util/zip/Inflater;\n+         1: getfield      #47                 // Field inf:Ljava/util/zip/Inflater;\n          4: ifnull        19\n          7: aload_0\n-         8: getfield      #14                 // Field inf:Ljava/util/zip/Inflater;\n-        11: invokevirtual #31                 // Method java/util/zip/Inflater.end:()V\n+         8: getfield      #47                 // Field inf:Ljava/util/zip/Inflater;\n+        11: invokevirtual #96                 // Method java/util/zip/Inflater.end:()V\n         14: aload_0\n         15: aconst_null\n-        16: putfield      #14                 // Field inf:Ljava/util/zip/Inflater;\n+        16: putfield      #47                 // Field inf:Ljava/util/zip/Inflater;\n         19: aload_0\n-        20: getfield      #26                 // Field in:Ljava/io/InputStream;\n-        23: getstatic     #32                 // Field java/lang/System.in:Ljava/io/InputStream;\n+        20: getfield      #81                 // Field in:Ljava/io/InputStream;\n+        23: getstatic     #99                 // Field java/lang/System.in:Ljava/io/InputStream;\n         26: if_acmpeq     36\n         29: aload_0\n-        30: getfield      #26                 // Field in:Ljava/io/InputStream;\n-        33: invokevirtual #33                 // Method java/io/InputStream.close:()V\n+        30: getfield      #81                 // Field in:Ljava/io/InputStream;\n+        33: invokevirtual #102                // Method java/io/InputStream.close:()V\n         36: return\n       LineNumberTable:\n         line 199: 0\n         line 200: 7\n         line 201: 14\n         line 204: 19\n         line 205: 29\n@@ -650,209 +650,209 @@\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #24                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-         4: invokevirtual #34                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+         1: getfield      #73                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+         4: invokevirtual #105                // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n          7: lreturn\n       LineNumberTable:\n         line 214: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n \n   public org.apache.commons.compress.compressors.gzip.GzipParameters getMetaData();\n     descriptor: ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #21                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+         1: getfield      #64                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n          4: areturn\n       LineNumberTable:\n         line 224: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n \n   private boolean init(boolean) throws java.io.IOException;\n     descriptor: (Z)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=7, args_size=2\n-         0: getstatic     #35                 // Field $assertionsDisabled:Z\n+         0: getstatic     #109                // Field $assertionsDisabled:Z\n          3: ifne          25\n          6: iload_1\n          7: ifne          25\n         10: aload_0\n-        11: getfield      #29                 // Field decompressConcatenated:Z\n+        11: getfield      #88                 // Field decompressConcatenated:Z\n         14: ifne          25\n-        17: new           #36                 // class java/lang/AssertionError\n+        17: new           #112                // class java/lang/AssertionError\n         20: dup\n-        21: invokespecial #37                 // Method java/lang/AssertionError.\"<init>\":()V\n+        21: invokespecial #114                // Method java/lang/AssertionError.\"<init>\":()V\n         24: athrow\n         25: aload_0\n-        26: getfield      #26                 // Field in:Ljava/io/InputStream;\n-        29: invokevirtual #38                 // Method java/io/InputStream.read:()I\n+        26: getfield      #81                 // Field in:Ljava/io/InputStream;\n+        29: invokevirtual #115                // Method java/io/InputStream.read:()I\n         32: istore_2\n         33: iload_2\n         34: iconst_m1\n         35: if_icmpne     44\n         38: iload_1\n         39: ifne          44\n         42: iconst_0\n         43: ireturn\n         44: iload_2\n         45: bipush        31\n         47: if_icmpne     63\n         50: aload_0\n-        51: getfield      #26                 // Field in:Ljava/io/InputStream;\n-        54: invokevirtual #38                 // Method java/io/InputStream.read:()I\n+        51: getfield      #81                 // Field in:Ljava/io/InputStream;\n+        54: invokevirtual #115                // Method java/io/InputStream.read:()I\n         57: sipush        139\n         60: if_icmpeq     82\n-        63: new           #39                 // class java/io/IOException\n+        63: new           #118                // class java/io/IOException\n         66: dup\n         67: iload_1\n         68: ifeq          76\n-        71: ldc           #40                 // String Input is not in the .gz format\n+        71: ldc           #120                // String Input is not in the .gz format\n         73: goto          78\n-        76: ldc           #41                 // String Garbage after a valid .gz stream\n-        78: invokespecial #42                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        76: ldc           #122                // String Garbage after a valid .gz stream\n+        78: invokespecial #124                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         81: athrow\n-        82: new           #43                 // class java/io/DataInputStream\n+        82: new           #127                // class java/io/DataInputStream\n         85: dup\n         86: aload_0\n-        87: getfield      #26                 // Field in:Ljava/io/InputStream;\n-        90: invokespecial #44                 // Method java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        87: getfield      #81                 // Field in:Ljava/io/InputStream;\n+        90: invokespecial #129                // Method java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n         93: astore_3\n         94: aload_3\n-        95: invokeinterface #3,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+        95: invokeinterface #7,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        100: istore        4\n        102: iload         4\n        104: bipush        8\n        106: if_icmpeq     142\n-       109: new           #39                 // class java/io/IOException\n+       109: new           #118                // class java/io/IOException\n        112: dup\n-       113: new           #46                 // class java/lang/StringBuilder\n+       113: new           #132                // class java/lang/StringBuilder\n        116: dup\n-       117: invokespecial #47                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       120: ldc           #48                 // String Unsupported compression method\n-       122: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       117: invokespecial #134                // Method java/lang/StringBuilder.\"<init>\":()V\n+       120: ldc           #135                // String Unsupported compression method\n+       122: invokevirtual #137                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        125: iload         4\n-       127: invokevirtual #50                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       130: ldc           #51                 // String  in the .gz header\n-       132: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       135: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       138: invokespecial #42                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       127: invokevirtual #141                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       130: ldc           #144                // String  in the .gz header\n+       132: invokevirtual #137                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       135: invokevirtual #146                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       138: invokespecial #124                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        141: athrow\n        142: aload_3\n-       143: invokeinterface #3,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       143: invokeinterface #7,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        148: istore        5\n        150: iload         5\n        152: sipush        224\n        155: iand\n        156: ifeq          169\n-       159: new           #39                 // class java/io/IOException\n+       159: new           #118                // class java/io/IOException\n        162: dup\n-       163: ldc           #54                 // String Reserved flags are set in the .gz header\n-       165: invokespecial #42                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       163: ldc           #150                // String Reserved flags are set in the .gz header\n+       165: invokespecial #124                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        168: athrow\n        169: aload_0\n-       170: getfield      #21                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       170: getfield      #64                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n        173: aload_3\n        174: iconst_4\n-       175: invokestatic  #55                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n-       178: ldc2_w        #56                 // long 1000l\n+       175: invokestatic  #152                // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+       178: ldc2_w        #158                // long 1000l\n        181: lmul\n-       182: invokevirtual #58                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n+       182: invokevirtual #160                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n        185: aload_3\n-       186: invokeinterface #3,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       186: invokeinterface #7,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        191: lookupswitch  { // 2\n                        2: 216\n                        4: 228\n                  default: 239\n             }\n        216: aload_0\n-       217: getfield      #21                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       217: getfield      #64                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n        220: bipush        9\n-       222: invokevirtual #59                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+       222: invokevirtual #164                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n        225: goto          239\n        228: aload_0\n-       229: getfield      #21                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       229: getfield      #64                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n        232: iconst_1\n-       233: invokevirtual #59                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+       233: invokevirtual #164                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n        236: goto          239\n        239: aload_0\n-       240: getfield      #21                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       240: getfield      #64                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n        243: aload_3\n-       244: invokeinterface #3,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-       249: invokevirtual #60                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n+       244: invokeinterface #7,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       249: invokevirtual #167                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n        252: iload         5\n        254: iconst_4\n        255: iand\n        256: ifeq          299\n        259: aload_3\n-       260: invokeinterface #3,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       260: invokeinterface #7,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        265: istore        6\n        267: iload         6\n        269: aload_3\n-       270: invokeinterface #3,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       270: invokeinterface #7,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        275: bipush        8\n        277: ishl\n        278: ior\n        279: istore        6\n        281: iload         6\n        283: iinc          6, -1\n        286: ifle          299\n        289: aload_3\n-       290: invokeinterface #3,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       290: invokeinterface #7,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        295: pop\n        296: goto          281\n        299: iload         5\n        301: bipush        8\n        303: iand\n        304: ifeq          328\n        307: aload_0\n-       308: getfield      #21                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       311: new           #61                 // class java/lang/String\n+       308: getfield      #64                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       311: new           #170                // class java/lang/String\n        314: dup\n        315: aload_3\n-       316: invokestatic  #62                 // Method readToNull:(Ljava/io/DataInput;)[B\n-       319: getstatic     #63                 // Field org/apache/commons/compress/compressors/gzip/GzipUtils.GZIP_ENCODING:Ljava/nio/charset/Charset;\n-       322: invokespecial #64                 // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-       325: invokevirtual #65                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n+       316: invokestatic  #172                // Method readToNull:(Ljava/io/DataInput;)[B\n+       319: getstatic     #176                // Field org/apache/commons/compress/compressors/gzip/GzipUtils.GZIP_ENCODING:Ljava/nio/charset/Charset;\n+       322: invokespecial #182                // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+       325: invokevirtual #185                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n        328: iload         5\n        330: bipush        16\n        332: iand\n        333: ifeq          357\n        336: aload_0\n-       337: getfield      #21                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       340: new           #61                 // class java/lang/String\n+       337: getfield      #64                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       340: new           #170                // class java/lang/String\n        343: dup\n        344: aload_3\n-       345: invokestatic  #62                 // Method readToNull:(Ljava/io/DataInput;)[B\n-       348: getstatic     #63                 // Field org/apache/commons/compress/compressors/gzip/GzipUtils.GZIP_ENCODING:Ljava/nio/charset/Charset;\n-       351: invokespecial #64                 // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-       354: invokevirtual #66                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n+       345: invokestatic  #172                // Method readToNull:(Ljava/io/DataInput;)[B\n+       348: getstatic     #176                // Field org/apache/commons/compress/compressors/gzip/GzipUtils.GZIP_ENCODING:Ljava/nio/charset/Charset;\n+       351: invokespecial #182                // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+       354: invokevirtual #188                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n        357: iload         5\n        359: iconst_2\n        360: iand\n        361: ifeq          371\n        364: aload_3\n-       365: invokeinterface #67,  1           // InterfaceMethod java/io/DataInput.readShort:()S\n+       365: invokeinterface #191,  1          // InterfaceMethod java/io/DataInput.readShort:()S\n        370: pop\n        371: aload_0\n-       372: getfield      #14                 // Field inf:Ljava/util/zip/Inflater;\n-       375: invokevirtual #68                 // Method java/util/zip/Inflater.reset:()V\n+       372: getfield      #47                 // Field inf:Ljava/util/zip/Inflater;\n+       375: invokevirtual #195                // Method java/util/zip/Inflater.reset:()V\n        378: aload_0\n-       379: getfield      #17                 // Field crc:Ljava/util/zip/CRC32;\n-       382: invokevirtual #69                 // Method java/util/zip/CRC32.reset:()V\n+       379: getfield      #54                 // Field crc:Ljava/util/zip/CRC32;\n+       382: invokevirtual #198                // Method java/util/zip/CRC32.reset:()V\n        385: iconst_1\n        386: ireturn\n       LineNumberTable:\n         line 228: 0\n         line 231: 25\n         line 235: 33\n         line 236: 42\n@@ -935,24 +935,24 @@\n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n          1: aload_0\n-         2: getfield      #18                 // Field oneByte:[B\n+         2: getfield      #58                 // Field oneByte:[B\n          5: iconst_0\n          6: iconst_1\n-         7: invokevirtual #70                 // Method read:([BII)I\n+         7: invokevirtual #199                // Method read:([BII)I\n         10: iconst_m1\n         11: if_icmpne     18\n         14: iconst_m1\n         15: goto          28\n         18: aload_0\n-        19: getfield      #18                 // Field oneByte:[B\n+        19: getfield      #58                 // Field oneByte:[B\n         22: iconst_0\n         23: baload\n         24: sipush        255\n         27: iand\n         28: ireturn\n       LineNumberTable:\n         line 314: 0\n@@ -972,183 +972,183 @@\n     Code:\n       stack=6, locals=12, args_size=4\n          0: iload_3\n          1: ifne          6\n          4: iconst_0\n          5: ireturn\n          6: aload_0\n-         7: getfield      #71                 // Field endReached:Z\n+         7: getfield      #202                // Field endReached:Z\n         10: ifeq          15\n         13: iconst_m1\n         14: ireturn\n         15: iconst_0\n         16: istore        4\n         18: iload_3\n-        19: ifle          339\n+        19: ifle          340\n         22: aload_0\n-        23: getfield      #14                 // Field inf:Ljava/util/zip/Inflater;\n-        26: invokevirtual #72                 // Method java/util/zip/Inflater.needsInput:()Z\n+        23: getfield      #47                 // Field inf:Ljava/util/zip/Inflater;\n+        26: invokevirtual #205                // Method java/util/zip/Inflater.needsInput:()Z\n         29: ifeq          91\n         32: aload_0\n-        33: getfield      #26                 // Field in:Ljava/io/InputStream;\n+        33: getfield      #81                 // Field in:Ljava/io/InputStream;\n         36: aload_0\n-        37: getfield      #11                 // Field buf:[B\n+        37: getfield      #38                 // Field buf:[B\n         40: arraylength\n-        41: invokevirtual #73                 // Method java/io/InputStream.mark:(I)V\n+        41: invokevirtual #208                // Method java/io/InputStream.mark:(I)V\n         44: aload_0\n         45: aload_0\n-        46: getfield      #26                 // Field in:Ljava/io/InputStream;\n+        46: getfield      #81                 // Field in:Ljava/io/InputStream;\n         49: aload_0\n-        50: getfield      #11                 // Field buf:[B\n-        53: invokevirtual #74                 // Method java/io/InputStream.read:([B)I\n-        56: putfield      #75                 // Field bufUsed:I\n+        50: getfield      #38                 // Field buf:[B\n+        53: invokevirtual #211                // Method java/io/InputStream.read:([B)I\n+        56: putfield      #214                // Field bufUsed:I\n         59: aload_0\n-        60: getfield      #75                 // Field bufUsed:I\n+        60: getfield      #214                // Field bufUsed:I\n         63: iconst_m1\n         64: if_icmpne     75\n-        67: new           #76                 // class java/io/EOFException\n+        67: new           #218                // class java/io/EOFException\n         70: dup\n-        71: invokespecial #77                 // Method java/io/EOFException.\"<init>\":()V\n+        71: invokespecial #220                // Method java/io/EOFException.\"<init>\":()V\n         74: athrow\n         75: aload_0\n-        76: getfield      #14                 // Field inf:Ljava/util/zip/Inflater;\n+        76: getfield      #47                 // Field inf:Ljava/util/zip/Inflater;\n         79: aload_0\n-        80: getfield      #11                 // Field buf:[B\n+        80: getfield      #38                 // Field buf:[B\n         83: iconst_0\n         84: aload_0\n-        85: getfield      #75                 // Field bufUsed:I\n-        88: invokevirtual #78                 // Method java/util/zip/Inflater.setInput:([BII)V\n+        85: getfield      #214                // Field bufUsed:I\n+        88: invokevirtual #221                // Method java/util/zip/Inflater.setInput:([BII)V\n         91: aload_0\n-        92: getfield      #14                 // Field inf:Ljava/util/zip/Inflater;\n+        92: getfield      #47                 // Field inf:Ljava/util/zip/Inflater;\n         95: aload_1\n         96: iload_2\n         97: iload_3\n-        98: invokevirtual #79                 // Method java/util/zip/Inflater.inflate:([BII)I\n+        98: invokevirtual #225                // Method java/util/zip/Inflater.inflate:([BII)I\n        101: istore        5\n        103: goto          118\n        106: astore        6\n-       108: new           #39                 // class java/io/IOException\n+       108: new           #118                // class java/io/IOException\n        111: dup\n-       112: ldc           #81                 // String Gzip-compressed data is corrupt\n-       114: invokespecial #42                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       112: ldc           #230                // String Gzip-compressed data is corrupt\n+       114: invokespecial #124                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        117: athrow\n        118: aload_0\n-       119: getfield      #17                 // Field crc:Ljava/util/zip/CRC32;\n+       119: getfield      #54                 // Field crc:Ljava/util/zip/CRC32;\n        122: aload_1\n        123: iload_2\n        124: iload         5\n-       126: invokevirtual #82                 // Method java/util/zip/CRC32.update:([BII)V\n+       126: invokevirtual #232                // Method java/util/zip/CRC32.update:([BII)V\n        129: iload_2\n        130: iload         5\n        132: iadd\n        133: istore_2\n        134: iload_3\n        135: iload         5\n        137: isub\n        138: istore_3\n        139: iload         4\n        141: iload         5\n        143: iadd\n        144: istore        4\n        146: aload_0\n        147: iload         5\n-       149: invokevirtual #83                 // Method count:(I)V\n+       149: invokevirtual #235                // Method count:(I)V\n        152: aload_0\n-       153: getfield      #14                 // Field inf:Ljava/util/zip/Inflater;\n-       156: invokevirtual #84                 // Method java/util/zip/Inflater.finished:()Z\n-       159: ifeq          336\n+       153: getfield      #47                 // Field inf:Ljava/util/zip/Inflater;\n+       156: invokevirtual #238                // Method java/util/zip/Inflater.finished:()Z\n+       159: ifeq          337\n        162: aload_0\n-       163: getfield      #26                 // Field in:Ljava/io/InputStream;\n-       166: invokevirtual #85                 // Method java/io/InputStream.reset:()V\n+       163: getfield      #81                 // Field in:Ljava/io/InputStream;\n+       166: invokevirtual #241                // Method java/io/InputStream.reset:()V\n        169: aload_0\n-       170: getfield      #75                 // Field bufUsed:I\n+       170: getfield      #214                // Field bufUsed:I\n        173: aload_0\n-       174: getfield      #14                 // Field inf:Ljava/util/zip/Inflater;\n-       177: invokevirtual #86                 // Method java/util/zip/Inflater.getRemaining:()I\n+       174: getfield      #47                 // Field inf:Ljava/util/zip/Inflater;\n+       177: invokevirtual #242                // Method java/util/zip/Inflater.getRemaining:()I\n        180: isub\n        181: istore        6\n        183: aload_0\n-       184: getfield      #26                 // Field in:Ljava/io/InputStream;\n+       184: getfield      #81                 // Field in:Ljava/io/InputStream;\n        187: iload         6\n        189: i2l\n-       190: invokestatic  #87                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+       190: invokestatic  #245                // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n        193: iload         6\n        195: i2l\n        196: lcmp\n        197: ifeq          208\n-       200: new           #39                 // class java/io/IOException\n+       200: new           #118                // class java/io/IOException\n        203: dup\n-       204: invokespecial #88                 // Method java/io/IOException.\"<init>\":()V\n+       204: invokespecial #251                // Method java/io/IOException.\"<init>\":()V\n        207: athrow\n        208: aload_0\n        209: iconst_0\n-       210: putfield      #75                 // Field bufUsed:I\n-       213: new           #43                 // class java/io/DataInputStream\n+       210: putfield      #214                // Field bufUsed:I\n+       213: new           #127                // class java/io/DataInputStream\n        216: dup\n        217: aload_0\n-       218: getfield      #26                 // Field in:Ljava/io/InputStream;\n-       221: invokespecial #44                 // Method java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+       218: getfield      #81                 // Field in:Ljava/io/InputStream;\n+       221: invokespecial #129                // Method java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n        224: astore        7\n        226: aload         7\n        228: iconst_4\n-       229: invokestatic  #55                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+       229: invokestatic  #152                // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n        232: lstore        8\n        234: lload         8\n        236: aload_0\n-       237: getfield      #17                 // Field crc:Ljava/util/zip/CRC32;\n-       240: invokevirtual #89                 // Method java/util/zip/CRC32.getValue:()J\n+       237: getfield      #54                 // Field crc:Ljava/util/zip/CRC32;\n+       240: invokevirtual #252                // Method java/util/zip/CRC32.getValue:()J\n        243: lcmp\n        244: ifeq          257\n-       247: new           #39                 // class java/io/IOException\n+       247: new           #118                // class java/io/IOException\n        250: dup\n-       251: ldc           #90                 // String Gzip-compressed data is corrupt (CRC32 error)\n-       253: invokespecial #42                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       251: ldc           #255                // String Gzip-compressed data is corrupt (CRC32 error)\n+       253: invokespecial #124                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        256: athrow\n        257: aload         7\n        259: iconst_4\n-       260: invokestatic  #55                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+       260: invokestatic  #152                // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n        263: lstore        10\n        265: lload         10\n        267: aload_0\n-       268: getfield      #14                 // Field inf:Ljava/util/zip/Inflater;\n-       271: invokevirtual #91                 // Method java/util/zip/Inflater.getBytesWritten:()J\n-       274: ldc2_w        #92                 // long 4294967295l\n+       268: getfield      #47                 // Field inf:Ljava/util/zip/Inflater;\n+       271: invokevirtual #257                // Method java/util/zip/Inflater.getBytesWritten:()J\n+       274: ldc2_w        #260                // long 4294967295l\n        277: land\n        278: lcmp\n-       279: ifeq          292\n-       282: new           #39                 // class java/io/IOException\n+       279: ifeq          293\n+       282: new           #118                // class java/io/IOException\n        285: dup\n-       286: ldc           #94                 // String Gzip-compressed data is corrupt(uncompressed size mismatch)\n-       288: invokespecial #42                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       291: athrow\n-       292: aload_0\n-       293: getfield      #29                 // Field decompressConcatenated:Z\n-       296: ifeq          307\n-       299: aload_0\n-       300: iconst_0\n-       301: invokespecial #30                 // Method init:(Z)Z\n-       304: ifne          336\n-       307: aload_0\n-       308: getfield      #14                 // Field inf:Ljava/util/zip/Inflater;\n-       311: invokevirtual #31                 // Method java/util/zip/Inflater.end:()V\n-       314: aload_0\n-       315: aconst_null\n-       316: putfield      #14                 // Field inf:Ljava/util/zip/Inflater;\n-       319: aload_0\n-       320: iconst_1\n-       321: putfield      #71                 // Field endReached:Z\n-       324: iload         4\n-       326: ifne          333\n-       329: iconst_m1\n-       330: goto          335\n-       333: iload         4\n-       335: ireturn\n-       336: goto          18\n-       339: iload         4\n-       341: ireturn\n+       286: ldc_w         #262                // String Gzip-compressed data is corrupt(uncompressed size mismatch)\n+       289: invokespecial #124                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       292: athrow\n+       293: aload_0\n+       294: getfield      #88                 // Field decompressConcatenated:Z\n+       297: ifeq          308\n+       300: aload_0\n+       301: iconst_0\n+       302: invokespecial #92                 // Method init:(Z)Z\n+       305: ifne          337\n+       308: aload_0\n+       309: getfield      #47                 // Field inf:Ljava/util/zip/Inflater;\n+       312: invokevirtual #96                 // Method java/util/zip/Inflater.end:()V\n+       315: aload_0\n+       316: aconst_null\n+       317: putfield      #47                 // Field inf:Ljava/util/zip/Inflater;\n+       320: aload_0\n+       321: iconst_1\n+       322: putfield      #202                // Field endReached:Z\n+       325: iload         4\n+       327: ifne          334\n+       330: iconst_m1\n+       331: goto          336\n+       334: iload         4\n+       336: ireturn\n+       337: goto          18\n+       340: iload         4\n+       342: ireturn\n       Exception table:\n          from    to  target type\n             91   103   106   Class java/util/zip/DataFormatException\n       LineNumberTable:\n         line 324: 0\n         line 325: 4\n         line 327: 6\n@@ -1179,35 +1179,35 @@\n         line 372: 213\n         line 375: 226\n         line 377: 234\n         line 378: 247\n         line 383: 257\n         line 385: 265\n         line 386: 282\n-        line 391: 292\n-        line 392: 307\n-        line 393: 314\n-        line 394: 319\n-        line 395: 324\n-        line 398: 336\n-        line 400: 339\n+        line 391: 293\n+        line 392: 308\n+        line 393: 315\n+        line 394: 320\n+        line 395: 325\n+        line 398: 337\n+        line 400: 340\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n           103       3     5   ret   I\n           108      10     6     e   Ljava/util/zip/DataFormatException;\n-          183     153     6 skipAmount   I\n-          226     110     7 inData   Ljava/io/DataInput;\n-          234     102     8 crcStored   J\n-          265      71    10 isize   J\n-          118     218     5   ret   I\n-            0     342     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n-            0     342     1     b   [B\n-            0     342     2   off   I\n-            0     342     3   len   I\n-           18     324     4  size   I\n+          183     154     6 skipAmount   I\n+          226     111     7 inData   Ljava/io/DataInput;\n+          234     103     8 crcStored   J\n+          265      72    10 isize   J\n+          118     219     5   ret   I\n+            0     343     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n+            0     343     1     b   [B\n+            0     343     2   off   I\n+            0     343     3   len   I\n+           18     325     4  size   I\n       StackMapTable: number_of_entries = 15\n         frame_type = 6 /* same */\n         frame_type = 8 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 2\n           locals = [ int ]\n         frame_type = 56 /* same */\n@@ -1220,15 +1220,15 @@\n         frame_type = 252 /* append */\n           offset_delta = 89\n           locals = [ int ]\n         frame_type = 253 /* append */\n           offset_delta = 48\n           locals = [ class java/io/DataInput, long ]\n         frame_type = 252 /* append */\n-          offset_delta = 34\n+          offset_delta = 35\n           locals = [ long ]\n         frame_type = 14 /* same */\n         frame_type = 25 /* same */\n         frame_type = 65 /* same_locals_1_stack_item */\n           stack = [ int ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 0\n@@ -1239,21 +1239,21 @@\n       throws java.io.IOException\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n-         0: ldc           #53                 // class org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-         2: invokevirtual #95                 // Method java/lang/Class.desiredAssertionStatus:()Z\n+         0: ldc           #31                 // class org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+         2: invokevirtual #264                // Method java/lang/Class.desiredAssertionStatus:()Z\n          5: ifne          12\n          8: iconst_1\n          9: goto          13\n         12: iconst_0\n-        13: putstatic     #35                 // Field $assertionsDisabled:Z\n+        13: putstatic     #109                // Field $assertionsDisabled:Z\n         16: return\n       LineNumberTable:\n         line 75: 0\n       StackMapTable: number_of_entries = 2\n         frame_type = 12 /* same */\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n"}]}
