{"diffoscope-json-version": 1, "source1": "first/ExprLookup.class", "source2": "second/ExprLookup.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,16 +1,14 @@\n \n package org.apache.commons.configuration2.interpol;\n \n import java.util.Objects;\n import java.util.Iterator;\n import org.apache.commons.jexl2.MapContext;\n import org.apache.commons.jexl2.JexlContext;\n-import org.apache.commons.text.lookup.StringLookup;\n-import org.apache.commons.jexl2.Expression;\n import org.apache.commons.jexl2.JexlEngine;\n import org.apache.commons.configuration2.io.ConfigurationLogger;\n import org.apache.commons.text.StringSubstitutor;\n \n public class ExprLookup implements Lookup\n {\n     private static final String CLASS = \"Class:\";\n@@ -26,37 +24,37 @@\n     \n     public ExprLookup() {\n         this.engine = new JexlEngine();\n         this.prefixMatcher = \"$[\";\n         this.suffixMatcher = \"]\";\n     }\n     \n-    public ExprLookup(final ExprLookup.Variables list) {\n+    public ExprLookup(final ExprLookup.Variables variables) {\n         this.engine = new JexlEngine();\n         this.prefixMatcher = \"$[\";\n         this.suffixMatcher = \"]\";\n-        this.setVariables(list);\n+        this.setVariables(variables);\n     }\n     \n-    public ExprLookup(final ExprLookup.Variables list, final String prefix, final String suffix) {\n-        this(list);\n-        this.setVariablePrefixMatcher(prefix);\n-        this.setVariableSuffixMatcher(suffix);\n+    public ExprLookup(final ExprLookup.Variables variables, final String variablePrefixMatcher, final String variableSuffixMatcher) {\n+        this(variables);\n+        this.setVariablePrefixMatcher(variablePrefixMatcher);\n+        this.setVariableSuffixMatcher(variableSuffixMatcher);\n     }\n     \n-    public void setVariablePrefixMatcher(final String prefix) {\n-        this.prefixMatcher = prefix;\n+    public void setVariablePrefixMatcher(final String prefixMatcher) {\n+        this.prefixMatcher = prefixMatcher;\n     }\n     \n-    public void setVariableSuffixMatcher(final String suffix) {\n-        this.suffixMatcher = suffix;\n+    public void setVariableSuffixMatcher(final String suffixMatcher) {\n+        this.suffixMatcher = suffixMatcher;\n     }\n     \n-    public void setVariables(final ExprLookup.Variables list) {\n-        this.variables = new ExprLookup.Variables(list);\n+    public void setVariables(final ExprLookup.Variables variables) {\n+        this.variables = new ExprLookup.Variables(variables);\n     }\n     \n     public ExprLookup.Variables getVariables() {\n         return new ExprLookup.Variables(this.variables);\n     }\n     \n     public ConfigurationLogger getLogger() {\n@@ -71,48 +69,46 @@\n         return this.interpolator;\n     }\n     \n     public void setInterpolator(final ConfigurationInterpolator interpolator) {\n         this.installSubstitutor(this.interpolator = interpolator);\n     }\n     \n-    public String lookup(final String var) {\n+    public String lookup(final String s) {\n         if (this.substitutor == null) {\n-            return var;\n+            return s;\n         }\n-        String result = this.substitutor.replace(var);\n+        String replace = this.substitutor.replace(s);\n         try {\n-            final Expression exp = this.engine.createExpression(result);\n-            final Object exprResult = exp.evaluate(this.createContext());\n-            result = ((exprResult != null) ? String.valueOf(exprResult) : null);\n-        }\n-        catch (final Exception e) {\n-            final ConfigurationLogger l = this.getLogger();\n-            if (l != null) {\n-                l.debug(\"Error encountered evaluating \" + result + \": \" + e);\n+            final Object evaluate = this.engine.createExpression(replace).evaluate(this.createContext());\n+            replace = ((evaluate != null) ? String.valueOf(evaluate) : null);\n+        }\n+        catch (final Exception obj) {\n+            final ConfigurationLogger logger = this.getLogger();\n+            if (logger != null) {\n+                logger.debug(\"Error encountered evaluating \" + replace + \": \" + obj);\n             }\n         }\n-        return result;\n+        return replace;\n     }\n     \n-    private void installSubstitutor(final ConfigurationInterpolator ip) {\n-        if (ip == null) {\n+    private void installSubstitutor(final ConfigurationInterpolator configurationInterpolator) {\n+        if (configurationInterpolator == null) {\n             this.substitutor = null;\n         }\n         else {\n-            final StringLookup variableResolver = key -> Objects.toString(ip.resolve(key), null);\n-            this.substitutor = new StringSubstitutor(variableResolver, this.prefixMatcher, this.suffixMatcher, '$');\n+            this.substitutor = new StringSubstitutor(s -> Objects.toString(configurationInterpolator.resolve(s), null), this.prefixMatcher, this.suffixMatcher, '$');\n         }\n     }\n     \n     private JexlContext createContext() {\n-        final JexlContext ctx = (JexlContext)new MapContext();\n-        this.initializeContext(ctx);\n-        return ctx;\n+        final MapContext mapContext = new MapContext();\n+        this.initializeContext((JexlContext)mapContext);\n+        return (JexlContext)mapContext;\n     }\n     \n-    private void initializeContext(final JexlContext ctx) {\n-        for (final ExprLookup.Variable var : this.variables) {\n-            ctx.set(var.getName(), var.getValue());\n+    private void initializeContext(final JexlContext jexlContext) {\n+        for (final ExprLookup.Variable variable : this.variables) {\n+            jexlContext.set(variable.getName(), variable.getValue());\n         }\n     }\n }\n"}]}
