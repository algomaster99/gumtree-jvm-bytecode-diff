{"diffoscope-json-version": 1, "source1": "first/JSONObject.class", "source2": "second/JSONObject.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,353 +1,353 @@\n-  SHA-256 checksum b6ecf9ae04f39c20f1c9abe54c10c54322ceb7b132b6576307be10455df31252\n+  SHA-256 checksum a61c45d63f1f32c7aafd77d1572a82fa58832f0258bfd87b2c69fc8e86f22882\n   Compiled from \"JSONObject.java\"\n public class org.json.JSONObject\n   minor version: 0\n   major version: 50\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #62                         // org/json/JSONObject\n   super_class: #202                       // java/lang/Object\n   interfaces: 0, fields: 3, methods: 109, attributes: 2\n Constant pool:\n-     #1 = Fieldref           #62.#701     // org/json/JSONObject.map:Ljava/util/Map;\n-     #2 = Methodref          #202.#702    // java/lang/Object.getClass:()Ljava/lang/Class;\n-     #3 = Methodref          #202.#703    // java/lang/Object.\"<init>\":()V\n-     #4 = Class              #704         // java/util/HashMap\n-     #5 = Methodref          #4.#703      // java/util/HashMap.\"<init>\":()V\n-     #6 = Methodref          #62.#705     // org/json/JSONObject.\"<init>\":(I)V\n-     #7 = Methodref          #62.#706     // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n-     #8 = Methodref          #62.#707     // org/json/JSONObject.putOnce:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-     #9 = Class              #708         // java/lang/Exception\n-    #10 = Methodref          #62.#703     // org/json/JSONObject.\"<init>\":()V\n-    #11 = Methodref          #49.#709     // org/json/JSONTokener.nextClean:()C\n-    #12 = String             #710         // A JSONObject text must begin with \\'{\\'\n-    #13 = Methodref          #49.#711     // org/json/JSONTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-    #14 = Methodref          #49.#712     // org/json/JSONTokener.getPrevious:()C\n-    #15 = String             #713         // A JSONObject text must end with \\'}\\'\n-    #16 = String             #714         // A JSON Object can not directly nest another JSON Object or JSON Array.\n-    #17 = Methodref          #49.#715     // org/json/JSONTokener.back:()V\n-    #18 = Methodref          #49.#716     // org/json/JSONTokener.nextValue:()Ljava/lang/Object;\n-    #19 = Methodref          #202.#717    // java/lang/Object.toString:()Ljava/lang/String;\n-    #20 = String             #718         // Expected a \\':\\' after a key\n-    #21 = Class              #719         // java/lang/StringBuilder\n-    #22 = Methodref          #21.#703     // java/lang/StringBuilder.\"<init>\":()V\n-    #23 = String             #720         // Duplicate key \\\"\n-    #24 = Methodref          #21.#721     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #25 = String             #722         // \\\"\n-    #26 = Methodref          #21.#717     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-    #27 = Methodref          #62.#723     // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-    #28 = String             #724         // Expected a \\',\\' or \\'}\\'\n-    #29 = InterfaceMethodref #306.#725    // java/util/Map.size:()I\n-    #30 = Methodref          #4.#705      // java/util/HashMap.\"<init>\":(I)V\n-    #31 = InterfaceMethodref #306.#726    // java/util/Map.entrySet:()Ljava/util/Set;\n-    #32 = InterfaceMethodref #727.#728    // java/util/Set.iterator:()Ljava/util/Iterator;\n-    #33 = InterfaceMethodref #729.#730    // java/util/Iterator.hasNext:()Z\n-    #34 = InterfaceMethodref #729.#731    // java/util/Iterator.next:()Ljava/lang/Object;\n-    #35 = Class              #732         // java/util/Map$Entry\n-    #36 = InterfaceMethodref #35.#733     // java/util/Map$Entry.getKey:()Ljava/lang/Object;\n-    #37 = Class              #734         // java/lang/NullPointerException\n-    #38 = String             #735         // Null key.\n-    #39 = Methodref          #37.#736     // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n-    #40 = InterfaceMethodref #35.#737     // java/util/Map$Entry.getValue:()Ljava/lang/Object;\n-    #41 = Methodref          #58.#738     // java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n-    #42 = Methodref          #62.#739     // org/json/JSONObject.wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n-    #43 = InterfaceMethodref #306.#740    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-    #44 = Methodref          #62.#741     // org/json/JSONObject.populateMap:(Ljava/lang/Object;)V\n-    #45 = Methodref          #62.#742     // org/json/JSONObject.populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n-    #46 = Methodref          #743.#744    // java/lang/Class.getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n-    #47 = Methodref          #745.#746    // java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-    #48 = Methodref          #62.#747     // org/json/JSONObject.putOpt:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-    #49 = Class              #748         // org/json/JSONTokener\n-    #50 = Methodref          #49.#736     // org/json/JSONTokener.\"<init>\":(Ljava/lang/String;)V\n-    #51 = Methodref          #62.#749     // org/json/JSONObject.\"<init>\":(Lorg/json/JSONTokener;)V\n-    #52 = Methodref          #750.#751    // java/lang/Thread.currentThread:()Ljava/lang/Thread;\n-    #53 = Methodref          #750.#752    // java/lang/Thread.getContextClassLoader:()Ljava/lang/ClassLoader;\n-    #54 = Methodref          #753.#754    // java/util/ResourceBundle.getBundle:(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n-    #55 = Methodref          #753.#755    // java/util/ResourceBundle.getKeys:()Ljava/util/Enumeration;\n-    #56 = InterfaceMethodref #756.#757    // java/util/Enumeration.hasMoreElements:()Z\n-    #57 = InterfaceMethodref #756.#758    // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n-    #58 = Class              #759         // java/lang/String\n-    #59 = String             #760         // \\\\.\n-    #60 = Methodref          #58.#761     // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n-    #61 = Methodref          #62.#762     // org/json/JSONObject.optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;\n-    #62 = Class              #763         // org/json/JSONObject\n-    #63 = Methodref          #753.#764    // java/util/ResourceBundle.getString:(Ljava/lang/String;)Ljava/lang/String;\n-    #64 = Methodref          #62.#765     // org/json/JSONObject.testValidity:(Ljava/lang/Object;)V\n-    #65 = Class              #766         // org/json/JSONArray\n-    #66 = Methodref          #65.#703     // org/json/JSONArray.\"<init>\":()V\n-    #67 = Methodref          #65.#767     // org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n-    #68 = String             #768         // JSONArray\n-    #69 = Methodref          #62.#769     // org/json/JSONObject.wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-    #70 = Methodref          #137.#770    // java/lang/Double.isInfinite:(D)Z\n-    #71 = Methodref          #137.#771    // java/lang/Double.isNaN:(D)Z\n-    #72 = String             #772         // null\n-    #73 = Methodref          #137.#773    // java/lang/Double.toString:(D)Ljava/lang/String;\n-    #74 = Methodref          #58.#774     // java/lang/String.indexOf:(I)I\n-    #75 = String             #775         // 0\n-    #76 = Methodref          #58.#776     // java/lang/String.endsWith:(Ljava/lang/String;)Z\n-    #77 = Methodref          #58.#777     // java/lang/String.length:()I\n-    #78 = Methodref          #58.#778     // java/lang/String.substring:(II)Ljava/lang/String;\n-    #79 = String             #779         // .\n-    #80 = Class              #780         // org/json/JSONException\n-    #81 = Methodref          #80.#736     // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n-    #82 = String             #781         // JSONObject[\n-    #83 = Methodref          #62.#782     // org/json/JSONObject.quote:(Ljava/lang/String;)Ljava/lang/String;\n-    #84 = String             #783         // ] not found.\n-    #85 = Methodref          #62.#784     // org/json/JSONObject.optEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-    #86 = String             #785         // enum of type\n-    #87 = Methodref          #743.#786    // java/lang/Class.getSimpleName:()Ljava/lang/String;\n-    #88 = Methodref          #62.#787     // org/json/JSONObject.get:(Ljava/lang/String;)Ljava/lang/Object;\n-    #89 = Fieldref           #158.#788    // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n-    #90 = Methodref          #202.#789    // java/lang/Object.equals:(Ljava/lang/Object;)Z\n-    #91 = String             #790         // false\n-    #92 = Methodref          #58.#791     // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n-    #93 = Fieldref           #158.#792    // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n-    #94 = String             #793         // true\n-    #95 = String             #794         // Boolean\n-    #96 = Methodref          #62.#795     // org/json/JSONObject.objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-    #97 = String             #796         // BigInteger\n-    #98 = Methodref          #62.#797     // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-    #99 = String             #798         // BigDecimal\n-   #100 = Class              #799         // java/lang/Number\n-   #101 = Methodref          #100.#800    // java/lang/Number.doubleValue:()D\n-   #102 = Methodref          #137.#801    // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n-   #103 = String             #802         // double\n-   #104 = Methodref          #100.#803    // java/lang/Number.floatValue:()F\n-   #105 = Methodref          #134.#804    // java/lang/Float.parseFloat:(Ljava/lang/String;)F\n-   #106 = String             #805         // float\n-   #107 = Methodref          #62.#806     // org/json/JSONObject.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-   #108 = String             #499         // number\n-   #109 = Methodref          #100.#807    // java/lang/Number.intValue:()I\n-   #110 = Methodref          #126.#808    // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n-   #111 = String             #809         // int\n-   #112 = String             #810         // JSONObject\n-   #113 = Methodref          #100.#811    // java/lang/Number.longValue:()J\n-   #114 = Methodref          #128.#812    // java/lang/Long.parseLong:(Ljava/lang/String;)J\n-   #115 = String             #813         // long\n-   #116 = Methodref          #62.#814     // org/json/JSONObject.isEmpty:()Z\n-   #117 = Methodref          #62.#815     // org/json/JSONObject.keySet:()Ljava/util/Set;\n-   #118 = Methodref          #62.#777     // org/json/JSONObject.length:()I\n-   #119 = InterfaceMethodref #727.#816    // java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+     #1 = Fieldref           #62.#674     // org/json/JSONObject.map:Ljava/util/Map;\n+     #2 = Methodref          #202.#675    // java/lang/Object.getClass:()Ljava/lang/Class;\n+     #3 = Methodref          #202.#676    // java/lang/Object.\"<init>\":()V\n+     #4 = Class              #677         // java/util/HashMap\n+     #5 = Methodref          #4.#676      // java/util/HashMap.\"<init>\":()V\n+     #6 = Methodref          #62.#678     // org/json/JSONObject.\"<init>\":(I)V\n+     #7 = Methodref          #62.#679     // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n+     #8 = Methodref          #62.#680     // org/json/JSONObject.putOnce:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+     #9 = Class              #681         // java/lang/Exception\n+    #10 = Methodref          #62.#676     // org/json/JSONObject.\"<init>\":()V\n+    #11 = Methodref          #49.#682     // org/json/JSONTokener.nextClean:()C\n+    #12 = String             #683         // A JSONObject text must begin with \\'{\\'\n+    #13 = Methodref          #49.#684     // org/json/JSONTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+    #14 = Methodref          #49.#685     // org/json/JSONTokener.getPrevious:()C\n+    #15 = String             #686         // A JSONObject text must end with \\'}\\'\n+    #16 = String             #687         // A JSON Object can not directly nest another JSON Object or JSON Array.\n+    #17 = Methodref          #49.#688     // org/json/JSONTokener.back:()V\n+    #18 = Methodref          #49.#689     // org/json/JSONTokener.nextValue:()Ljava/lang/Object;\n+    #19 = Methodref          #202.#690    // java/lang/Object.toString:()Ljava/lang/String;\n+    #20 = String             #691         // Expected a \\':\\' after a key\n+    #21 = Class              #692         // java/lang/StringBuilder\n+    #22 = Methodref          #21.#676     // java/lang/StringBuilder.\"<init>\":()V\n+    #23 = String             #693         // Duplicate key \\\"\n+    #24 = Methodref          #21.#694     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+    #25 = String             #695         // \\\"\n+    #26 = Methodref          #21.#690     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+    #27 = Methodref          #62.#696     // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+    #28 = String             #697         // Expected a \\',\\' or \\'}\\'\n+    #29 = InterfaceMethodref #306.#698    // java/util/Map.size:()I\n+    #30 = Methodref          #4.#678      // java/util/HashMap.\"<init>\":(I)V\n+    #31 = InterfaceMethodref #306.#699    // java/util/Map.entrySet:()Ljava/util/Set;\n+    #32 = InterfaceMethodref #541.#700    // java/util/Set.iterator:()Ljava/util/Iterator;\n+    #33 = InterfaceMethodref #384.#701    // java/util/Iterator.hasNext:()Z\n+    #34 = InterfaceMethodref #384.#702    // java/util/Iterator.next:()Ljava/lang/Object;\n+    #35 = Class              #703         // java/util/Map$Entry\n+    #36 = InterfaceMethodref #35.#704     // java/util/Map$Entry.getKey:()Ljava/lang/Object;\n+    #37 = Class              #705         // java/lang/NullPointerException\n+    #38 = String             #706         // Null key.\n+    #39 = Methodref          #37.#707     // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n+    #40 = InterfaceMethodref #35.#708     // java/util/Map$Entry.getValue:()Ljava/lang/Object;\n+    #41 = Methodref          #58.#709     // java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n+    #42 = Methodref          #62.#710     // org/json/JSONObject.wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n+    #43 = InterfaceMethodref #306.#711    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+    #44 = Methodref          #62.#712     // org/json/JSONObject.populateMap:(Ljava/lang/Object;)V\n+    #45 = Methodref          #62.#713     // org/json/JSONObject.populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n+    #46 = Methodref          #398.#714    // java/lang/Class.getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n+    #47 = Methodref          #715.#716    // java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+    #48 = Methodref          #62.#717     // org/json/JSONObject.putOpt:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+    #49 = Class              #718         // org/json/JSONTokener\n+    #50 = Methodref          #49.#707     // org/json/JSONTokener.\"<init>\":(Ljava/lang/String;)V\n+    #51 = Methodref          #62.#719     // org/json/JSONObject.\"<init>\":(Lorg/json/JSONTokener;)V\n+    #52 = Methodref          #720.#721    // java/lang/Thread.currentThread:()Ljava/lang/Thread;\n+    #53 = Methodref          #720.#722    // java/lang/Thread.getContextClassLoader:()Ljava/lang/ClassLoader;\n+    #54 = Methodref          #416.#723    // java/util/ResourceBundle.getBundle:(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n+    #55 = Methodref          #416.#724    // java/util/ResourceBundle.getKeys:()Ljava/util/Enumeration;\n+    #56 = InterfaceMethodref #417.#725    // java/util/Enumeration.hasMoreElements:()Z\n+    #57 = InterfaceMethodref #417.#726    // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n+    #58 = Class              #727         // java/lang/String\n+    #59 = String             #728         // \\\\.\n+    #60 = Methodref          #58.#729     // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n+    #61 = Methodref          #62.#730     // org/json/JSONObject.optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;\n+    #62 = Class              #731         // org/json/JSONObject\n+    #63 = Methodref          #416.#732    // java/util/ResourceBundle.getString:(Ljava/lang/String;)Ljava/lang/String;\n+    #64 = Methodref          #62.#733     // org/json/JSONObject.testValidity:(Ljava/lang/Object;)V\n+    #65 = Class              #734         // org/json/JSONArray\n+    #66 = Methodref          #65.#676     // org/json/JSONArray.\"<init>\":()V\n+    #67 = Methodref          #65.#735     // org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n+    #68 = String             #736         // JSONArray\n+    #69 = Methodref          #62.#737     // org/json/JSONObject.wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+    #70 = Methodref          #137.#738    // java/lang/Double.isInfinite:(D)Z\n+    #71 = Methodref          #137.#739    // java/lang/Double.isNaN:(D)Z\n+    #72 = String             #740         // null\n+    #73 = Methodref          #137.#741    // java/lang/Double.toString:(D)Ljava/lang/String;\n+    #74 = Methodref          #58.#742     // java/lang/String.indexOf:(I)I\n+    #75 = String             #743         // 0\n+    #76 = Methodref          #58.#744     // java/lang/String.endsWith:(Ljava/lang/String;)Z\n+    #77 = Methodref          #58.#745     // java/lang/String.length:()I\n+    #78 = Methodref          #58.#746     // java/lang/String.substring:(II)Ljava/lang/String;\n+    #79 = String             #747         // .\n+    #80 = Class              #748         // org/json/JSONException\n+    #81 = Methodref          #80.#707     // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n+    #82 = String             #749         // JSONObject[\n+    #83 = Methodref          #62.#750     // org/json/JSONObject.quote:(Ljava/lang/String;)Ljava/lang/String;\n+    #84 = String             #751         // ] not found.\n+    #85 = Methodref          #62.#752     // org/json/JSONObject.optEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+    #86 = String             #753         // enum of type\n+    #87 = Methodref          #398.#754    // java/lang/Class.getSimpleName:()Ljava/lang/String;\n+    #88 = Methodref          #62.#755     // org/json/JSONObject.get:(Ljava/lang/String;)Ljava/lang/Object;\n+    #89 = Fieldref           #158.#756    // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n+    #90 = Methodref          #202.#757    // java/lang/Object.equals:(Ljava/lang/Object;)Z\n+    #91 = String             #758         // false\n+    #92 = Methodref          #58.#759     // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n+    #93 = Fieldref           #158.#760    // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n+    #94 = String             #761         // true\n+    #95 = String             #762         // Boolean\n+    #96 = Methodref          #62.#763     // org/json/JSONObject.objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+    #97 = String             #764         // BigInteger\n+    #98 = Methodref          #62.#765     // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+    #99 = String             #766         // BigDecimal\n+   #100 = Class              #767         // java/lang/Number\n+   #101 = Methodref          #100.#768    // java/lang/Number.doubleValue:()D\n+   #102 = Methodref          #137.#769    // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n+   #103 = String             #770         // double\n+   #104 = Methodref          #100.#771    // java/lang/Number.floatValue:()F\n+   #105 = Methodref          #134.#772    // java/lang/Float.parseFloat:(Ljava/lang/String;)F\n+   #106 = String             #773         // float\n+   #107 = Methodref          #62.#774     // org/json/JSONObject.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+   #108 = String             #489         // number\n+   #109 = Methodref          #100.#775    // java/lang/Number.intValue:()I\n+   #110 = Methodref          #126.#776    // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+   #111 = String             #777         // int\n+   #112 = String             #778         // JSONObject\n+   #113 = Methodref          #100.#779    // java/lang/Number.longValue:()J\n+   #114 = Methodref          #128.#780    // java/lang/Long.parseLong:(Ljava/lang/String;)J\n+   #115 = String             #781         // long\n+   #116 = Methodref          #62.#782     // org/json/JSONObject.isEmpty:()Z\n+   #117 = Methodref          #62.#783     // org/json/JSONObject.keySet:()Ljava/util/Set;\n+   #118 = Methodref          #62.#745     // org/json/JSONObject.length:()I\n+   #119 = InterfaceMethodref #541.#784    // java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n    #120 = Class              #364         // \"[Ljava/lang/String;\"\n-   #121 = Methodref          #743.#817    // java/lang/Class.getFields:()[Ljava/lang/reflect/Field;\n-   #122 = Methodref          #745.#818    // java/lang/reflect/Field.getName:()Ljava/lang/String;\n-   #123 = String             #434         // string\n-   #124 = InterfaceMethodref #306.#819    // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-   #125 = Methodref          #62.#820     // org/json/JSONObject.put:(Ljava/lang/String;I)Lorg/json/JSONObject;\n-   #126 = Class              #821         // java/lang/Integer\n-   #127 = Methodref          #126.#807    // java/lang/Integer.intValue:()I\n-   #128 = Class              #822         // java/lang/Long\n-   #129 = Methodref          #128.#811    // java/lang/Long.longValue:()J\n-   #130 = Methodref          #62.#823     // org/json/JSONObject.put:(Ljava/lang/String;J)Lorg/json/JSONObject;\n-   #131 = Class              #824         // java/math/BigInteger\n-   #132 = Fieldref           #131.#825    // java/math/BigInteger.ONE:Ljava/math/BigInteger;\n-   #133 = Methodref          #131.#826    // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #134 = Class              #827         // java/lang/Float\n-   #135 = Methodref          #134.#803    // java/lang/Float.floatValue:()F\n-   #136 = Methodref          #62.#828     // org/json/JSONObject.put:(Ljava/lang/String;F)Lorg/json/JSONObject;\n-   #137 = Class              #829         // java/lang/Double\n-   #138 = Methodref          #137.#800    // java/lang/Double.doubleValue:()D\n-   #139 = Methodref          #62.#830     // org/json/JSONObject.put:(Ljava/lang/String;D)Lorg/json/JSONObject;\n-   #140 = Class              #831         // java/math/BigDecimal\n-   #141 = Fieldref           #140.#832    // java/math/BigDecimal.ONE:Ljava/math/BigDecimal;\n-   #142 = Methodref          #140.#833    // java/math/BigDecimal.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #143 = String             #834         // Unable to increment [\n-   #144 = String             #835         // ].\n-   #145 = Fieldref           #62.#836     // org/json/JSONObject.NULL:Ljava/lang/Object;\n-   #146 = InterfaceMethodref #306.#815    // java/util/Map.keySet:()Ljava/util/Set;\n-   #147 = InterfaceMethodref #306.#837    // java/util/Map.clear:()V\n-   #148 = InterfaceMethodref #306.#814    // java/util/Map.isEmpty:()Z\n-   #149 = Methodref          #65.#838     // org/json/JSONArray.\"<init>\":(Ljava/util/Collection;)V\n-   #150 = String             #839         // Null pointer\n-   #151 = InterfaceMethodref #306.#746    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #152 = Methodref          #62.#840     // org/json/JSONObject.optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n-   #153 = Methodref          #743.#841    // java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z\n-   #154 = Class              #842         // java/lang/Enum\n-   #155 = Methodref          #154.#843    // java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-   #156 = Class              #844         // java/lang/IllegalArgumentException\n-   #157 = Methodref          #62.#845     // org/json/JSONObject.optBoolean:(Ljava/lang/String;Z)Z\n-   #158 = Class              #846         // java/lang/Boolean\n-   #159 = Methodref          #158.#847    // java/lang/Boolean.booleanValue:()Z\n-   #160 = Methodref          #62.#848     // org/json/JSONObject.getBoolean:(Ljava/lang/String;)Z\n-   #161 = Methodref          #62.#849     // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n-   #162 = Methodref          #140.#850    // java/math/BigDecimal.\"<init>\":(Ljava/math/BigInteger;)V\n-   #163 = Methodref          #62.#851     // org/json/JSONObject.numberIsFinite:(Ljava/lang/Number;)Z\n-   #164 = Methodref          #140.#852    // java/math/BigDecimal.\"<init>\":(D)V\n-   #165 = Methodref          #140.#736    // java/math/BigDecimal.\"<init>\":(Ljava/lang/String;)V\n-   #166 = Class              #853         // java/lang/Short\n-   #167 = Class              #854         // java/lang/Byte\n-   #168 = Methodref          #140.#855    // java/math/BigDecimal.\"<init>\":(J)V\n-   #169 = Methodref          #140.#856    // java/math/BigDecimal.toBigInteger:()Ljava/math/BigInteger;\n-   #170 = Methodref          #131.#857    // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #171 = Methodref          #62.#858     // org/json/JSONObject.isDecimalNotation:(Ljava/lang/String;)Z\n-   #172 = Methodref          #131.#736    // java/math/BigInteger.\"<init>\":(Ljava/lang/String;)V\n+   #121 = Methodref          #398.#785    // java/lang/Class.getFields:()[Ljava/lang/reflect/Field;\n+   #122 = Methodref          #715.#786    // java/lang/reflect/Field.getName:()Ljava/lang/String;\n+   #123 = String             #427         // string\n+   #124 = InterfaceMethodref #306.#787    // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+   #125 = Methodref          #62.#788     // org/json/JSONObject.put:(Ljava/lang/String;I)Lorg/json/JSONObject;\n+   #126 = Class              #789         // java/lang/Integer\n+   #127 = Methodref          #126.#775    // java/lang/Integer.intValue:()I\n+   #128 = Class              #790         // java/lang/Long\n+   #129 = Methodref          #128.#779    // java/lang/Long.longValue:()J\n+   #130 = Methodref          #62.#791     // org/json/JSONObject.put:(Ljava/lang/String;J)Lorg/json/JSONObject;\n+   #131 = Class              #792         // java/math/BigInteger\n+   #132 = Fieldref           #131.#793    // java/math/BigInteger.ONE:Ljava/math/BigInteger;\n+   #133 = Methodref          #131.#794    // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #134 = Class              #795         // java/lang/Float\n+   #135 = Methodref          #134.#771    // java/lang/Float.floatValue:()F\n+   #136 = Methodref          #62.#796     // org/json/JSONObject.put:(Ljava/lang/String;F)Lorg/json/JSONObject;\n+   #137 = Class              #797         // java/lang/Double\n+   #138 = Methodref          #137.#768    // java/lang/Double.doubleValue:()D\n+   #139 = Methodref          #62.#798     // org/json/JSONObject.put:(Ljava/lang/String;D)Lorg/json/JSONObject;\n+   #140 = Class              #799         // java/math/BigDecimal\n+   #141 = Fieldref           #140.#800    // java/math/BigDecimal.ONE:Ljava/math/BigDecimal;\n+   #142 = Methodref          #140.#801    // java/math/BigDecimal.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #143 = String             #802         // Unable to increment [\n+   #144 = String             #803         // ].\n+   #145 = Fieldref           #62.#804     // org/json/JSONObject.NULL:Ljava/lang/Object;\n+   #146 = InterfaceMethodref #306.#783    // java/util/Map.keySet:()Ljava/util/Set;\n+   #147 = InterfaceMethodref #306.#805    // java/util/Map.clear:()V\n+   #148 = InterfaceMethodref #306.#782    // java/util/Map.isEmpty:()Z\n+   #149 = Methodref          #65.#806     // org/json/JSONArray.\"<init>\":(Ljava/util/Collection;)V\n+   #150 = String             #807         // Null pointer\n+   #151 = InterfaceMethodref #306.#716    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #152 = Methodref          #62.#808     // org/json/JSONObject.optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n+   #153 = Methodref          #398.#809    // java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z\n+   #154 = Class              #810         // java/lang/Enum\n+   #155 = Methodref          #154.#811    // java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+   #156 = Class              #812         // java/lang/IllegalArgumentException\n+   #157 = Methodref          #62.#813     // org/json/JSONObject.optBoolean:(Ljava/lang/String;Z)Z\n+   #158 = Class              #814         // java/lang/Boolean\n+   #159 = Methodref          #158.#815    // java/lang/Boolean.booleanValue:()Z\n+   #160 = Methodref          #62.#816     // org/json/JSONObject.getBoolean:(Ljava/lang/String;)Z\n+   #161 = Methodref          #62.#817     // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n+   #162 = Methodref          #140.#818    // java/math/BigDecimal.\"<init>\":(Ljava/math/BigInteger;)V\n+   #163 = Methodref          #62.#819     // org/json/JSONObject.numberIsFinite:(Ljava/lang/Number;)Z\n+   #164 = Methodref          #140.#820    // java/math/BigDecimal.\"<init>\":(D)V\n+   #165 = Methodref          #140.#707    // java/math/BigDecimal.\"<init>\":(Ljava/lang/String;)V\n+   #166 = Class              #821         // java/lang/Short\n+   #167 = Class              #822         // java/lang/Byte\n+   #168 = Methodref          #140.#823    // java/math/BigDecimal.\"<init>\":(J)V\n+   #169 = Methodref          #140.#824    // java/math/BigDecimal.toBigInteger:()Ljava/math/BigInteger;\n+   #170 = Methodref          #131.#825    // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+   #171 = Methodref          #62.#826     // org/json/JSONObject.isDecimalNotation:(Ljava/lang/String;)Z\n+   #172 = Methodref          #131.#707    // java/math/BigInteger.\"<init>\":(Ljava/lang/String;)V\n    #173 = Double             NaNd\n-   #175 = Methodref          #62.#859     // org/json/JSONObject.optDouble:(Ljava/lang/String;D)D\n-   #176 = Methodref          #62.#860     // org/json/JSONObject.optNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+   #175 = Methodref          #62.#827     // org/json/JSONObject.optDouble:(Ljava/lang/String;D)D\n+   #176 = Methodref          #62.#828     // org/json/JSONObject.optNumber:(Ljava/lang/String;)Ljava/lang/Number;\n    #177 = Float              NaNf\n-   #178 = Methodref          #62.#861     // org/json/JSONObject.optFloat:(Ljava/lang/String;F)F\n-   #179 = Methodref          #62.#862     // org/json/JSONObject.optInt:(Ljava/lang/String;I)I\n-   #180 = Methodref          #62.#863     // org/json/JSONObject.optNumber:(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n-   #181 = Methodref          #62.#864     // org/json/JSONObject.optJSONObject:(Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n-   #182 = Methodref          #62.#865     // org/json/JSONObject.optLong:(Ljava/lang/String;J)J\n-   #183 = String             #866         //\n-   #184 = Methodref          #62.#867     // org/json/JSONObject.optString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #185 = Class              #868         // java/util/IdentityHashMap\n-   #186 = Methodref          #185.#703    // java/util/IdentityHashMap.\"<init>\":()V\n-   #187 = Methodref          #869.#870    // java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;\n-   #188 = Methodref          #743.#871    // java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;\n-   #189 = Methodref          #743.#872    // java/lang/Class.getMethods:()[Ljava/lang/reflect/Method;\n-   #190 = Methodref          #743.#873    // java/lang/Class.getDeclaredMethods:()[Ljava/lang/reflect/Method;\n-   #191 = Methodref          #874.#875    // java/lang/reflect/Method.getModifiers:()I\n-   #192 = Methodref          #876.#877    // java/lang/reflect/Modifier.isPublic:(I)Z\n-   #193 = Methodref          #876.#878    // java/lang/reflect/Modifier.isStatic:(I)Z\n-   #194 = Methodref          #874.#879    // java/lang/reflect/Method.getParameterTypes:()[Ljava/lang/Class;\n-   #195 = Methodref          #874.#880    // java/lang/reflect/Method.isBridge:()Z\n-   #196 = Methodref          #874.#881    // java/lang/reflect/Method.getReturnType:()Ljava/lang/Class;\n-   #197 = Fieldref           #882.#883    // java/lang/Void.TYPE:Ljava/lang/Class;\n-   #198 = Methodref          #874.#818    // java/lang/reflect/Method.getName:()Ljava/lang/String;\n-   #199 = Methodref          #62.#884     // org/json/JSONObject.isValidMethodName:(Ljava/lang/String;)Z\n-   #200 = Methodref          #62.#885     // org/json/JSONObject.getKeyNameFromMethod:(Ljava/lang/reflect/Method;)Ljava/lang/String;\n-   #201 = Methodref          #58.#814     // java/lang/String.isEmpty:()Z\n-   #202 = Class              #886         // java/lang/Object\n-   #203 = Methodref          #874.#887    // java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n-   #204 = InterfaceMethodref #727.#888    // java/util/Set.contains:(Ljava/lang/Object;)Z\n-   #205 = Methodref          #62.#889     // org/json/JSONObject.recursivelyDefinedObjectException:(Ljava/lang/String;)Lorg/json/JSONException;\n-   #206 = InterfaceMethodref #727.#890    // java/util/Set.add:(Ljava/lang/Object;)Z\n-   #207 = Methodref          #62.#891     // org/json/JSONObject.wrap:(Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n-   #208 = InterfaceMethodref #727.#892    // java/util/Set.remove:(Ljava/lang/Object;)Z\n-   #209 = Class              #893         // java/io/Closeable\n-   #210 = InterfaceMethodref #209.#894    // java/io/Closeable.close:()V\n-   #211 = Class              #895         // java/io/IOException\n-   #212 = Class              #896         // java/lang/IllegalAccessException\n-   #213 = Class              #897         // java/lang/reflect/InvocationTargetException\n-   #214 = String             #898         // getClass\n-   #215 = Methodref          #58.#789     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #216 = String             #899         // getDeclaringClass\n-   #217 = Class              #900         // org/json/JSONPropertyIgnore\n-   #218 = Methodref          #62.#901     // org/json/JSONObject.getAnnotationDepth:(Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n-   #219 = Class              #902         // org/json/JSONPropertyName\n-   #220 = Methodref          #62.#903     // org/json/JSONObject.getAnnotation:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #221 = InterfaceMethodref #219.#904    // org/json/JSONPropertyName.value:()Ljava/lang/String;\n-   #222 = String             #435         // get\n-   #223 = Methodref          #58.#905     // java/lang/String.startsWith:(Ljava/lang/String;)Z\n-   #224 = Methodref          #58.#906     // java/lang/String.substring:(I)Ljava/lang/String;\n-   #225 = String             #907         // is\n-   #226 = Methodref          #58.#908     // java/lang/String.charAt:(I)C\n-   #227 = Methodref          #302.#909    // java/lang/Character.isLowerCase:(C)Z\n-   #228 = Fieldref           #910.#911    // java/util/Locale.ROOT:Ljava/util/Locale;\n-   #229 = Methodref          #58.#912     // java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n-   #230 = Methodref          #302.#913    // java/lang/Character.isUpperCase:(C)Z\n-   #231 = Methodref          #874.#914    // java/lang/reflect/Method.isAnnotationPresent:(Ljava/lang/Class;)Z\n-   #232 = Methodref          #874.#915    // java/lang/reflect/Method.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #233 = Methodref          #874.#916    // java/lang/reflect/Method.getDeclaringClass:()Ljava/lang/Class;\n-   #234 = Methodref          #743.#917    // java/lang/Class.getSuperclass:()Ljava/lang/Class;\n-   #235 = Methodref          #743.#918    // java/lang/Class.getInterfaces:()[Ljava/lang/Class;\n-   #236 = Methodref          #743.#919    // java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n-   #237 = Class              #920         // java/lang/SecurityException\n-   #238 = Class              #921         // java/lang/NoSuchMethodException\n-   #239 = Methodref          #137.#922    // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n-   #240 = Methodref          #134.#923    // java/lang/Float.valueOf:(F)Ljava/lang/Float;\n-   #241 = Methodref          #126.#924    // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #242 = Methodref          #128.#925    // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n-   #243 = Methodref          #62.#926     // org/json/JSONObject.\"<init>\":(Ljava/util/Map;)V\n-   #244 = Methodref          #62.#927     // org/json/JSONObject.remove:(Ljava/lang/String;)Ljava/lang/Object;\n-   #245 = Class              #928         // org/json/JSONPointer\n-   #246 = Methodref          #245.#736    // org/json/JSONPointer.\"<init>\":(Ljava/lang/String;)V\n-   #247 = Methodref          #62.#929     // org/json/JSONObject.query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #248 = Methodref          #245.#930    // org/json/JSONPointer.queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #249 = Methodref          #62.#931     // org/json/JSONObject.optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #250 = Class              #932         // org/json/JSONPointerException\n-   #251 = Class              #933         // java/io/StringWriter\n-   #252 = Methodref          #251.#703    // java/io/StringWriter.\"<init>\":()V\n-   #253 = Methodref          #251.#934    // java/io/StringWriter.getBuffer:()Ljava/lang/StringBuffer;\n-   #254 = Methodref          #62.#935     // org/json/JSONObject.quote:(Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n-   #255 = String             #936         // \\\"\\\"\n-   #256 = Methodref          #937.#938    // java/io/Writer.write:(Ljava/lang/String;)V\n-   #257 = Methodref          #937.#939    // java/io/Writer.write:(I)V\n-   #258 = String             #940         // \\\\b\n-   #259 = String             #941         // \\\\t\n-   #260 = String             #942         // \\\\n\n-   #261 = String             #943         // \\\\f\n-   #262 = String             #944         // \\\\r\n-   #263 = String             #945         // \\\\u\n-   #264 = Methodref          #126.#946    // java/lang/Integer.toHexString:(I)Ljava/lang/String;\n-   #265 = String             #947         // 0000\n-   #266 = Methodref          #937.#948    // java/io/Writer.write:(Ljava/lang/String;II)V\n-   #267 = InterfaceMethodref #306.#949    // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #268 = InterfaceMethodref #727.#789    // java/util/Set.equals:(Ljava/lang/Object;)Z\n-   #269 = Methodref          #62.#726     // org/json/JSONObject.entrySet:()Ljava/util/Set;\n-   #270 = Methodref          #62.#950     // org/json/JSONObject.similar:(Ljava/lang/Object;)Z\n-   #271 = Methodref          #65.#950     // org/json/JSONArray.similar:(Ljava/lang/Object;)Z\n-   #272 = Methodref          #62.#951     // org/json/JSONObject.isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n-   #273 = Class              #952         // org/json/JSONString\n-   #274 = InterfaceMethodref #273.#953    // org/json/JSONString.toJSONString:()Ljava/lang/String;\n-   #275 = Class              #954         // java/lang/Throwable\n-   #276 = Class              #955         // java/lang/Comparable\n-   #277 = InterfaceMethodref #276.#956    // java/lang/Comparable.compareTo:(Ljava/lang/Object;)I\n-   #278 = Methodref          #140.#957    // java/math/BigDecimal.compareTo:(Ljava/math/BigDecimal;)I\n-   #279 = Methodref          #137.#958    // java/lang/Double.isInfinite:()Z\n-   #280 = Methodref          #137.#959    // java/lang/Double.isNaN:()Z\n-   #281 = Methodref          #134.#958    // java/lang/Float.isInfinite:()Z\n-   #282 = Methodref          #134.#959    // java/lang/Float.isNaN:()Z\n-   #283 = String             #960         // -0\n-   #284 = Fieldref           #140.#961    // java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;\n+   #178 = Methodref          #62.#829     // org/json/JSONObject.optFloat:(Ljava/lang/String;F)F\n+   #179 = Methodref          #62.#830     // org/json/JSONObject.optInt:(Ljava/lang/String;I)I\n+   #180 = Methodref          #62.#831     // org/json/JSONObject.optNumber:(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n+   #181 = Methodref          #62.#832     // org/json/JSONObject.optJSONObject:(Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n+   #182 = Methodref          #62.#833     // org/json/JSONObject.optLong:(Ljava/lang/String;J)J\n+   #183 = String             #834         //\n+   #184 = Methodref          #62.#835     // org/json/JSONObject.optString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+   #185 = Class              #836         // java/util/IdentityHashMap\n+   #186 = Methodref          #185.#676    // java/util/IdentityHashMap.\"<init>\":()V\n+   #187 = Methodref          #837.#838    // java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;\n+   #188 = Methodref          #398.#839    // java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;\n+   #189 = Methodref          #398.#840    // java/lang/Class.getMethods:()[Ljava/lang/reflect/Method;\n+   #190 = Methodref          #398.#841    // java/lang/Class.getDeclaredMethods:()[Ljava/lang/reflect/Method;\n+   #191 = Methodref          #542.#842    // java/lang/reflect/Method.getModifiers:()I\n+   #192 = Methodref          #843.#844    // java/lang/reflect/Modifier.isPublic:(I)Z\n+   #193 = Methodref          #843.#845    // java/lang/reflect/Modifier.isStatic:(I)Z\n+   #194 = Methodref          #542.#846    // java/lang/reflect/Method.getParameterTypes:()[Ljava/lang/Class;\n+   #195 = Methodref          #542.#847    // java/lang/reflect/Method.isBridge:()Z\n+   #196 = Methodref          #542.#848    // java/lang/reflect/Method.getReturnType:()Ljava/lang/Class;\n+   #197 = Fieldref           #849.#850    // java/lang/Void.TYPE:Ljava/lang/Class;\n+   #198 = Methodref          #542.#786    // java/lang/reflect/Method.getName:()Ljava/lang/String;\n+   #199 = Methodref          #62.#851     // org/json/JSONObject.isValidMethodName:(Ljava/lang/String;)Z\n+   #200 = Methodref          #62.#852     // org/json/JSONObject.getKeyNameFromMethod:(Ljava/lang/reflect/Method;)Ljava/lang/String;\n+   #201 = Methodref          #58.#782     // java/lang/String.isEmpty:()Z\n+   #202 = Class              #853         // java/lang/Object\n+   #203 = Methodref          #542.#854    // java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+   #204 = InterfaceMethodref #541.#855    // java/util/Set.contains:(Ljava/lang/Object;)Z\n+   #205 = Methodref          #62.#856     // org/json/JSONObject.recursivelyDefinedObjectException:(Ljava/lang/String;)Lorg/json/JSONException;\n+   #206 = InterfaceMethodref #541.#857    // java/util/Set.add:(Ljava/lang/Object;)Z\n+   #207 = Methodref          #62.#858     // org/json/JSONObject.wrap:(Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n+   #208 = InterfaceMethodref #541.#859    // java/util/Set.remove:(Ljava/lang/Object;)Z\n+   #209 = Class              #860         // java/io/Closeable\n+   #210 = InterfaceMethodref #209.#861    // java/io/Closeable.close:()V\n+   #211 = Class              #862         // java/io/IOException\n+   #212 = Class              #863         // java/lang/IllegalAccessException\n+   #213 = Class              #864         // java/lang/reflect/InvocationTargetException\n+   #214 = String             #865         // getClass\n+   #215 = Methodref          #58.#757     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #216 = String             #866         // getDeclaringClass\n+   #217 = Class              #867         // org/json/JSONPropertyIgnore\n+   #218 = Methodref          #62.#868     // org/json/JSONObject.getAnnotationDepth:(Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n+   #219 = Class              #869         // org/json/JSONPropertyName\n+   #220 = Methodref          #62.#870     // org/json/JSONObject.getAnnotation:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+   #221 = InterfaceMethodref #219.#871    // org/json/JSONPropertyName.value:()Ljava/lang/String;\n+   #222 = String             #428         // get\n+   #223 = Methodref          #58.#872     // java/lang/String.startsWith:(Ljava/lang/String;)Z\n+   #224 = Methodref          #58.#873     // java/lang/String.substring:(I)Ljava/lang/String;\n+   #225 = String             #874         // is\n+   #226 = Methodref          #58.#875     // java/lang/String.charAt:(I)C\n+   #227 = Methodref          #302.#876    // java/lang/Character.isLowerCase:(C)Z\n+   #228 = Fieldref           #415.#877    // java/util/Locale.ROOT:Ljava/util/Locale;\n+   #229 = Methodref          #58.#878     // java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n+   #230 = Methodref          #302.#879    // java/lang/Character.isUpperCase:(C)Z\n+   #231 = Methodref          #542.#880    // java/lang/reflect/Method.isAnnotationPresent:(Ljava/lang/Class;)Z\n+   #232 = Methodref          #542.#881    // java/lang/reflect/Method.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+   #233 = Methodref          #542.#882    // java/lang/reflect/Method.getDeclaringClass:()Ljava/lang/Class;\n+   #234 = Methodref          #398.#883    // java/lang/Class.getSuperclass:()Ljava/lang/Class;\n+   #235 = Methodref          #398.#884    // java/lang/Class.getInterfaces:()[Ljava/lang/Class;\n+   #236 = Methodref          #398.#885    // java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+   #237 = Class              #886         // java/lang/SecurityException\n+   #238 = Class              #887         // java/lang/NoSuchMethodException\n+   #239 = Methodref          #137.#888    // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n+   #240 = Methodref          #134.#889    // java/lang/Float.valueOf:(F)Ljava/lang/Float;\n+   #241 = Methodref          #126.#890    // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #242 = Methodref          #128.#891    // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n+   #243 = Methodref          #62.#892     // org/json/JSONObject.\"<init>\":(Ljava/util/Map;)V\n+   #244 = Methodref          #62.#893     // org/json/JSONObject.remove:(Ljava/lang/String;)Ljava/lang/Object;\n+   #245 = Class              #894         // org/json/JSONPointer\n+   #246 = Methodref          #245.#707    // org/json/JSONPointer.\"<init>\":(Ljava/lang/String;)V\n+   #247 = Methodref          #62.#895     // org/json/JSONObject.query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+   #248 = Methodref          #245.#896    // org/json/JSONPointer.queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #249 = Methodref          #62.#897     // org/json/JSONObject.optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+   #250 = Class              #898         // org/json/JSONPointerException\n+   #251 = Class              #899         // java/io/StringWriter\n+   #252 = Methodref          #251.#676    // java/io/StringWriter.\"<init>\":()V\n+   #253 = Methodref          #251.#900    // java/io/StringWriter.getBuffer:()Ljava/lang/StringBuffer;\n+   #254 = Methodref          #62.#901     // org/json/JSONObject.quote:(Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n+   #255 = String             #902         // \\\"\\\"\n+   #256 = Methodref          #595.#903    // java/io/Writer.write:(Ljava/lang/String;)V\n+   #257 = Methodref          #595.#904    // java/io/Writer.write:(I)V\n+   #258 = String             #905         // \\\\b\n+   #259 = String             #906         // \\\\t\n+   #260 = String             #907         // \\\\n\n+   #261 = String             #908         // \\\\f\n+   #262 = String             #909         // \\\\r\n+   #263 = String             #910         // \\\\u\n+   #264 = Methodref          #126.#911    // java/lang/Integer.toHexString:(I)Ljava/lang/String;\n+   #265 = String             #912         // 0000\n+   #266 = Methodref          #595.#913    // java/io/Writer.write:(Ljava/lang/String;II)V\n+   #267 = InterfaceMethodref #306.#914    // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #268 = InterfaceMethodref #541.#757    // java/util/Set.equals:(Ljava/lang/Object;)Z\n+   #269 = Methodref          #62.#699     // org/json/JSONObject.entrySet:()Ljava/util/Set;\n+   #270 = Methodref          #62.#915     // org/json/JSONObject.similar:(Ljava/lang/Object;)Z\n+   #271 = Methodref          #65.#915     // org/json/JSONArray.similar:(Ljava/lang/Object;)Z\n+   #272 = Methodref          #62.#916     // org/json/JSONObject.isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n+   #273 = Class              #917         // org/json/JSONString\n+   #274 = InterfaceMethodref #273.#918    // org/json/JSONString.toJSONString:()Ljava/lang/String;\n+   #275 = Class              #919         // java/lang/Throwable\n+   #276 = Class              #920         // java/lang/Comparable\n+   #277 = InterfaceMethodref #276.#921    // java/lang/Comparable.compareTo:(Ljava/lang/Object;)I\n+   #278 = Methodref          #140.#922    // java/math/BigDecimal.compareTo:(Ljava/math/BigDecimal;)I\n+   #279 = Methodref          #137.#923    // java/lang/Double.isInfinite:()Z\n+   #280 = Methodref          #137.#924    // java/lang/Double.isNaN:()Z\n+   #281 = Methodref          #134.#923    // java/lang/Float.isInfinite:()Z\n+   #282 = Methodref          #134.#924    // java/lang/Float.isNaN:()Z\n+   #283 = String             #925         // -0\n+   #284 = Fieldref           #140.#926    // java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;\n    #285 = Double             -0.0d\n-   #287 = Class              #962         // java/lang/NumberFormatException\n-   #288 = Methodref          #137.#963    // java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n-   #289 = String             #964         // val [\n-   #290 = String             #965         // ] is not a valid number.\n-   #291 = Methodref          #287.#736    // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n-   #292 = Methodref          #131.#966    // java/math/BigInteger.bitLength:()I\n-   #293 = Methodref          #131.#807    // java/math/BigInteger.intValue:()I\n-   #294 = Methodref          #131.#811    // java/math/BigInteger.longValue:()J\n-   #295 = String             #967         // JSON does not allow non-finite numbers.\n-   #296 = Methodref          #65.#814     // org/json/JSONArray.isEmpty:()Z\n-   #297 = Methodref          #65.#777     // org/json/JSONArray.length:()I\n-   #298 = Methodref          #65.#968     // org/json/JSONArray.getString:(I)Ljava/lang/String;\n-   #299 = Methodref          #62.#969     // org/json/JSONObject.toString:(I)Ljava/lang/String;\n-   #300 = Methodref          #62.#970     // org/json/JSONObject.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n-   #301 = Methodref          #971.#972    // org/json/JSONWriter.valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n-   #302 = Class              #973         // java/lang/Character\n-   #303 = Class              #974         // java/util/Collection\n-   #304 = Methodref          #743.#975    // java/lang/Class.isArray:()Z\n-   #305 = Methodref          #65.#976     // org/json/JSONArray.\"<init>\":(Ljava/lang/Object;)V\n-   #306 = Class              #977         // java/util/Map\n-   #307 = Methodref          #743.#978    // java/lang/Class.getPackage:()Ljava/lang/Package;\n-   #308 = Methodref          #979.#818    // java/lang/Package.getName:()Ljava/lang/String;\n-   #309 = String             #980         // java.\n-   #310 = String             #981         // javax.\n-   #311 = Methodref          #62.#982     // org/json/JSONObject.\"<init>\":(Ljava/lang/Object;Ljava/util/Set;)V\n-   #312 = Methodref          #62.#976     // org/json/JSONObject.\"<init>\":(Ljava/lang/Object;)V\n-   #313 = Methodref          #80.#983     // org/json/JSONException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #314 = Methodref          #62.#984     // org/json/JSONObject.numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n-   #315 = Fieldref           #62.#985     // org/json/JSONObject.NUMBER_PATTERN:Ljava/util/regex/Pattern;\n-   #316 = Methodref          #986.#987    // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-   #317 = Methodref          #988.#989    // java/util/regex/Matcher.matches:()Z\n-   #318 = Methodref          #154.#990    // java/lang/Enum.name:()Ljava/lang/String;\n-   #319 = Methodref          #65.#970     // org/json/JSONArray.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n-   #320 = Methodref          #62.#991     // org/json/JSONObject.writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-   #321 = String             #992         // Unable to write JSONObject value for key:\n-   #322 = Methodref          #80.#993     // org/json/JSONException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #323 = Methodref          #62.#994     // org/json/JSONObject.indent:(Ljava/io/Writer;I)V\n-   #324 = Methodref          #62.#995     // org/json/JSONObject.toMap:()Ljava/util/Map;\n-   #325 = Methodref          #65.#996     // org/json/JSONArray.toList:()Ljava/util/List;\n-   #326 = String             #997         // ] is not a\n-   #327 = String             #998         //  (null).\n-   #328 = Class              #999         // java/lang/Iterable\n-   #329 = String             #1000        //  (\n-   #330 = Methodref          #21.#1001    // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #331 = String             #1002        // ).\n-   #332 = String             #1003        //  :\n-   #333 = String             #1004        // JavaBean object contains recursively defined member variable of key\n-   #334 = String             #1005        // -?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\n-   #335 = Methodref          #986.#1006   // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-   #336 = Class              #1007        // org/json/JSONObject$Null\n-   #337 = Methodref          #336.#1008   // org/json/JSONObject$Null.\"<init>\":(Lorg/json/JSONObject$1;)V\n-   #338 = Class              #1009        // org/json/JSONObject$1\n+   #287 = Class              #927         // java/lang/NumberFormatException\n+   #288 = Methodref          #137.#928    // java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n+   #289 = String             #929         // val [\n+   #290 = String             #930         // ] is not a valid number.\n+   #291 = Methodref          #287.#707    // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n+   #292 = Methodref          #131.#931    // java/math/BigInteger.bitLength:()I\n+   #293 = Methodref          #131.#775    // java/math/BigInteger.intValue:()I\n+   #294 = Methodref          #131.#779    // java/math/BigInteger.longValue:()J\n+   #295 = String             #932         // JSON does not allow non-finite numbers.\n+   #296 = Methodref          #65.#782     // org/json/JSONArray.isEmpty:()Z\n+   #297 = Methodref          #65.#745     // org/json/JSONArray.length:()I\n+   #298 = Methodref          #65.#933     // org/json/JSONArray.getString:(I)Ljava/lang/String;\n+   #299 = Methodref          #62.#934     // org/json/JSONObject.toString:(I)Ljava/lang/String;\n+   #300 = Methodref          #62.#935     // org/json/JSONObject.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n+   #301 = Methodref          #936.#937    // org/json/JSONWriter.valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n+   #302 = Class              #938         // java/lang/Character\n+   #303 = Class              #939         // java/util/Collection\n+   #304 = Methodref          #398.#940    // java/lang/Class.isArray:()Z\n+   #305 = Methodref          #65.#941     // org/json/JSONArray.\"<init>\":(Ljava/lang/Object;)V\n+   #306 = Class              #942         // java/util/Map\n+   #307 = Methodref          #398.#943    // java/lang/Class.getPackage:()Ljava/lang/Package;\n+   #308 = Methodref          #647.#786    // java/lang/Package.getName:()Ljava/lang/String;\n+   #309 = String             #944         // java.\n+   #310 = String             #945         // javax.\n+   #311 = Methodref          #62.#946     // org/json/JSONObject.\"<init>\":(Ljava/lang/Object;Ljava/util/Set;)V\n+   #312 = Methodref          #62.#941     // org/json/JSONObject.\"<init>\":(Ljava/lang/Object;)V\n+   #313 = Methodref          #80.#947     // org/json/JSONException.\"<init>\":(Ljava/lang/Throwable;)V\n+   #314 = Methodref          #62.#948     // org/json/JSONObject.numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n+   #315 = Fieldref           #62.#949     // org/json/JSONObject.NUMBER_PATTERN:Ljava/util/regex/Pattern;\n+   #316 = Methodref          #950.#951    // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+   #317 = Methodref          #952.#953    // java/util/regex/Matcher.matches:()Z\n+   #318 = Methodref          #154.#954    // java/lang/Enum.name:()Ljava/lang/String;\n+   #319 = Methodref          #65.#935     // org/json/JSONArray.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n+   #320 = Methodref          #62.#955     // org/json/JSONObject.writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+   #321 = String             #956         // Unable to write JSONObject value for key:\n+   #322 = Methodref          #80.#957     // org/json/JSONException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #323 = Methodref          #62.#958     // org/json/JSONObject.indent:(Ljava/io/Writer;I)V\n+   #324 = Methodref          #62.#959     // org/json/JSONObject.toMap:()Ljava/util/Map;\n+   #325 = Methodref          #65.#960     // org/json/JSONArray.toList:()Ljava/util/List;\n+   #326 = String             #961         // ] is not a\n+   #327 = String             #962         //  (null).\n+   #328 = Class              #963         // java/lang/Iterable\n+   #329 = String             #964         //  (\n+   #330 = Methodref          #21.#965     // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #331 = String             #966         // ).\n+   #332 = String             #967         //  :\n+   #333 = String             #968         // JavaBean object contains recursively defined member variable of key\n+   #334 = String             #969         // -?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\n+   #335 = Methodref          #950.#970    // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+   #336 = Class              #971         // org/json/JSONObject$Null\n+   #337 = Methodref          #336.#972    // org/json/JSONObject$Null.\"<init>\":(Lorg/json/JSONObject$1;)V\n+   #338 = Class              #973         // org/json/JSONObject$1\n    #339 = Utf8               InnerClasses\n    #340 = Utf8               Null\n    #341 = Utf8               NUMBER_PATTERN\n    #342 = Utf8               Ljava/util/regex/Pattern;\n    #343 = Utf8               map\n    #344 = Utf8               Ljava/util/Map;\n    #345 = Utf8               Signature\n@@ -367,814 +367,778 @@\n    #359 = Utf8               (Lorg/json/JSONObject;[Ljava/lang/String;)V\n    #360 = Utf8               i\n    #361 = Utf8               I\n    #362 = Utf8               jo\n    #363 = Utf8               names\n    #364 = Utf8               [Ljava/lang/String;\n    #365 = Utf8               StackMapTable\n-   #366 = Class              #763         // org/json/JSONObject\n-   #367 = Class              #708         // java/lang/Exception\n-   #368 = Utf8               (Lorg/json/JSONTokener;)V\n-   #369 = Utf8               value\n-   #370 = Utf8               prev\n-   #371 = Utf8               C\n-   #372 = Utf8               x\n-   #373 = Utf8               Lorg/json/JSONTokener;\n-   #374 = Utf8               c\n-   #375 = Utf8               key\n-   #376 = Utf8               Ljava/lang/String;\n-   #377 = Class              #748         // org/json/JSONTokener\n-   #378 = Class              #759         // java/lang/String\n-   #379 = Utf8               Exceptions\n-   #380 = Utf8               (Ljava/util/Map;)V\n-   #381 = Utf8               e\n-   #382 = Utf8               Entry\n-   #383 = Utf8               Ljava/util/Map$Entry;\n-   #384 = Utf8               m\n-   #385 = Utf8               LocalVariableTypeTable\n-   #386 = Utf8               Ljava/util/Map$Entry<**>;\n-   #387 = Utf8               Ljava/util/Map<**>;\n-   #388 = Class              #977         // java/util/Map\n-   #389 = Class              #1010        // java/util/Iterator\n-   #390 = Class              #732         // java/util/Map$Entry\n-   #391 = Utf8               (Ljava/util/Map<**>;)V\n-   #392 = Utf8               (Ljava/lang/Object;)V\n-   #393 = Utf8               bean\n-   #394 = Utf8               (Ljava/lang/Object;Ljava/util/Set;)V\n-   #395 = Utf8               objectsRecord\n-   #396 = Utf8               Ljava/util/Set;\n-   #397 = Utf8               Ljava/util/Set<Ljava/lang/Object;>;\n-   #398 = Utf8               (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n-   #399 = Utf8               (Ljava/lang/Object;[Ljava/lang/String;)V\n-   #400 = Utf8               name\n-   #401 = Utf8               object\n-   #402 = Utf8               Ljava/lang/Class;\n-   #403 = Utf8               Ljava/lang/Class<*>;\n-   #404 = Class              #886         // java/lang/Object\n-   #405 = Class              #1011        // java/lang/Class\n-   #406 = Utf8               (Ljava/lang/String;)V\n-   #407 = Utf8               source\n-   #408 = Utf8               (Ljava/lang/String;Ljava/util/Locale;)V\n-   #409 = Utf8               segment\n-   #410 = Utf8               nextTarget\n-   #411 = Utf8               path\n-   #412 = Utf8               last\n-   #413 = Utf8               target\n-   #414 = Utf8               baseName\n-   #415 = Utf8               locale\n-   #416 = Utf8               Ljava/util/Locale;\n-   #417 = Utf8               bundle\n-   #418 = Utf8               Ljava/util/ResourceBundle;\n-   #419 = Utf8               keys\n-   #420 = Utf8               Ljava/util/Enumeration;\n-   #421 = Utf8               Ljava/util/Enumeration<Ljava/lang/String;>;\n-   #422 = Class              #1012        // java/util/Locale\n-   #423 = Class              #1013        // java/util/ResourceBundle\n-   #424 = Class              #1014        // java/util/Enumeration\n-   #425 = Utf8               (I)V\n-   #426 = Utf8               initialCapacity\n-   #427 = Utf8               accumulate\n-   #428 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #429 = Utf8               append\n-   #430 = Utf8               doubleToString\n-   #431 = Utf8               (D)Ljava/lang/String;\n-   #432 = Utf8               d\n-   #433 = Utf8               D\n-   #434 = Utf8               string\n-   #435 = Utf8               get\n-   #436 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n-   #437 = Utf8               getEnum\n-   #438 = Utf8               (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-   #439 = Utf8               clazz\n-   #440 = Utf8               val\n-   #441 = Utf8               Ljava/lang/Enum;\n-   #442 = Utf8               Ljava/lang/Class<TE;>;\n-   #443 = Utf8               TE;\n-   #444 = Class              #842         // java/lang/Enum\n-   #445 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n-   #446 = Utf8               getBoolean\n-   #447 = Utf8               (Ljava/lang/String;)Z\n-   #448 = Utf8               getBigInteger\n-   #449 = Utf8               (Ljava/lang/String;)Ljava/math/BigInteger;\n-   #450 = Utf8               ret\n-   #451 = Utf8               Ljava/math/BigInteger;\n-   #452 = Class              #824         // java/math/BigInteger\n-   #453 = Utf8               getBigDecimal\n-   #454 = Utf8               (Ljava/lang/String;)Ljava/math/BigDecimal;\n-   #455 = Utf8               Ljava/math/BigDecimal;\n-   #456 = Class              #831         // java/math/BigDecimal\n-   #457 = Utf8               getDouble\n-   #458 = Utf8               (Ljava/lang/String;)D\n-   #459 = Utf8               Ljava/lang/Exception;\n-   #460 = Utf8               getFloat\n-   #461 = Utf8               (Ljava/lang/String;)F\n-   #462 = Utf8               getNumber\n-   #463 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n-   #464 = Utf8               getInt\n-   #465 = Utf8               (Ljava/lang/String;)I\n-   #466 = Utf8               getJSONArray\n-   #467 = Utf8               (Ljava/lang/String;)Lorg/json/JSONArray;\n-   #468 = Utf8               getJSONObject\n-   #469 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n-   #470 = Utf8               getLong\n-   #471 = Utf8               (Ljava/lang/String;)J\n-   #472 = Utf8               getNames\n-   #473 = Utf8               (Lorg/json/JSONObject;)[Ljava/lang/String;\n-   #474 = Utf8               (Ljava/lang/Object;)[Ljava/lang/String;\n-   #475 = Utf8               klass\n-   #476 = Utf8               fields\n-   #477 = Utf8               [Ljava/lang/reflect/Field;\n-   #478 = Utf8               length\n-   #479 = Class              #477         // \"[Ljava/lang/reflect/Field;\"\n-   #480 = Utf8               getString\n-   #481 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-   #482 = Utf8               has\n-   #483 = Utf8               increment\n-   #484 = Utf8               isNull\n-   #485 = Utf8               ()Ljava/util/Iterator;\n-   #486 = Utf8               ()Ljava/util/Iterator<Ljava/lang/String;>;\n-   #487 = Utf8               keySet\n-   #488 = Utf8               ()Ljava/util/Set;\n-   #489 = Utf8               ()Ljava/util/Set<Ljava/lang/String;>;\n-   #490 = Utf8               entrySet\n-   #491 = Utf8               ()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;\n-   #492 = Utf8               ()I\n-   #493 = Utf8               clear\n-   #494 = Utf8               isEmpty\n-   #495 = Utf8               ()Z\n-   #496 = Utf8               ()Lorg/json/JSONArray;\n-   #497 = Utf8               numberToString\n-   #498 = Utf8               (Ljava/lang/Number;)Ljava/lang/String;\n-   #499 = Utf8               number\n-   #500 = Utf8               Ljava/lang/Number;\n-   #501 = Utf8               opt\n-   #502 = Utf8               optEnum\n-   #503 = Utf8               (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n-   #504 = Utf8               myE\n-   #505 = Utf8               Ljava/lang/IllegalArgumentException;\n-   #506 = Utf8               Ljava/lang/NullPointerException;\n-   #507 = Utf8               defaultValue\n-   #508 = Class              #844         // java/lang/IllegalArgumentException\n-   #509 = Class              #734         // java/lang/NullPointerException\n-   #510 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;TE;)TE;\n-   #511 = Utf8               optBoolean\n-   #512 = Utf8               (Ljava/lang/String;Z)Z\n-   #513 = Utf8               Z\n-   #514 = Utf8               optBigDecimal\n-   #515 = Utf8               (Ljava/lang/String;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #516 = Utf8               objectToBigDecimal\n-   #517 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #518 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n-   #519 = Utf8               exact\n-   #520 = Utf8               optBigInteger\n-   #521 = Utf8               (Ljava/lang/String;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #522 = Utf8               objectToBigInteger\n-   #523 = Utf8               (Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #524 = Utf8               valStr\n-   #525 = Utf8               optDouble\n-   #526 = Utf8               (Ljava/lang/String;D)D\n-   #527 = Class              #799         // java/lang/Number\n-   #528 = Utf8               optFloat\n-   #529 = Utf8               (Ljava/lang/String;F)F\n-   #530 = Utf8               F\n-   #531 = Utf8               floatValue\n-   #532 = Utf8               optInt\n-   #533 = Utf8               (Ljava/lang/String;I)I\n-   #534 = Utf8               optJSONArray\n-   #535 = Utf8               o\n-   #536 = Class              #766         // org/json/JSONArray\n-   #537 = Utf8               optJSONObject\n-   #538 = Utf8               (Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n-   #539 = Utf8               optLong\n-   #540 = Utf8               (Ljava/lang/String;J)J\n-   #541 = Utf8               J\n-   #542 = Utf8               optNumber\n-   #543 = Utf8               (Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n-   #544 = Utf8               optString\n-   #545 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #546 = Utf8               populateMap\n-   #547 = Utf8               result\n-   #548 = Utf8               modifiers\n-   #549 = Utf8               method\n-   #550 = Utf8               Ljava/lang/reflect/Method;\n-   #551 = Utf8               includeSuperClass\n-   #552 = Utf8               methods\n-   #553 = Utf8               [Ljava/lang/reflect/Method;\n-   #554 = Class              #553         // \"[Ljava/lang/reflect/Method;\"\n-   #555 = Class              #1015        // java/util/Set\n-   #556 = Class              #1016        // java/lang/reflect/Method\n-   #557 = Class              #895         // java/io/IOException\n-   #558 = Class              #896         // java/lang/IllegalAccessException\n-   #559 = Class              #897         // java/lang/reflect/InvocationTargetException\n-   #560 = Utf8               isValidMethodName\n-   #561 = Utf8               getKeyNameFromMethod\n-   #562 = Utf8               (Ljava/lang/reflect/Method;)Ljava/lang/String;\n-   #563 = Utf8               forcedNameDepth\n-   #564 = Utf8               ignoreDepth\n-   #565 = Utf8               annotation\n-   #566 = Utf8               Lorg/json/JSONPropertyName;\n-   #567 = Class              #902         // org/json/JSONPropertyName\n-   #568 = Utf8               getAnnotation\n-   #569 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #570 = Utf8               im\n-   #571 = Utf8               ex\n-   #572 = Utf8               Ljava/lang/SecurityException;\n-   #573 = Utf8               Ljava/lang/NoSuchMethodException;\n-   #574 = Utf8               annotationClass\n-   #575 = Utf8               Ljava/lang/Class<TA;>;\n-   #576 = Class              #1017        // \"[Ljava/lang/Class;\"\n-   #577 = Class              #920         // java/lang/SecurityException\n-   #578 = Class              #921         // java/lang/NoSuchMethodException\n-   #579 = Utf8               <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/reflect/Method;Ljava/lang/Class<TA;>;)TA;\n-   #580 = Utf8               getAnnotationDepth\n-   #581 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n-   #582 = Utf8               Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;\n-   #583 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)I\n-   #584 = Utf8               put\n-   #585 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n-   #586 = Class              #846         // java/lang/Boolean\n-   #587 = Utf8               (Ljava/lang/String;Ljava/util/Collection;)Lorg/json/JSONObject;\n-   #588 = Utf8               Ljava/util/Collection;\n-   #589 = Utf8               Ljava/util/Collection<*>;\n-   #590 = Utf8               (Ljava/lang/String;Ljava/util/Collection<*>;)Lorg/json/JSONObject;\n-   #591 = Utf8               (Ljava/lang/String;D)Lorg/json/JSONObject;\n-   #592 = Utf8               (Ljava/lang/String;F)Lorg/json/JSONObject;\n-   #593 = Utf8               (Ljava/lang/String;I)Lorg/json/JSONObject;\n-   #594 = Utf8               (Ljava/lang/String;J)Lorg/json/JSONObject;\n-   #595 = Utf8               (Ljava/lang/String;Ljava/util/Map;)Lorg/json/JSONObject;\n-   #596 = Utf8               (Ljava/lang/String;Ljava/util/Map<**>;)Lorg/json/JSONObject;\n-   #597 = Utf8               putOnce\n-   #598 = Utf8               putOpt\n-   #599 = Utf8               query\n-   #600 = Utf8               jsonPointer\n-   #601 = Utf8               (Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #602 = Utf8               Lorg/json/JSONPointer;\n-   #603 = Utf8               optQuery\n-   #604 = Utf8               Lorg/json/JSONPointerException;\n-   #605 = Class              #932         // org/json/JSONPointerException\n-   #606 = Utf8               quote\n-   #607 = Utf8               ignored\n-   #608 = Utf8               Ljava/io/IOException;\n-   #609 = Utf8               sw\n-   #610 = Utf8               Ljava/io/StringWriter;\n-   #611 = Class              #933         // java/io/StringWriter\n-   #612 = Class              #954         // java/lang/Throwable\n-   #613 = Utf8               (Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n-   #614 = Utf8               hhhh\n-   #615 = Utf8               b\n-   #616 = Utf8               w\n-   #617 = Utf8               Ljava/io/Writer;\n-   #618 = Utf8               len\n-   #619 = Class              #1018        // java/io/Writer\n-   #620 = Utf8               remove\n-   #621 = Utf8               similar\n-   #622 = Utf8               (Ljava/lang/Object;)Z\n-   #623 = Utf8               valueThis\n-   #624 = Utf8               valueOther\n-   #625 = Utf8               entry\n-   #626 = Utf8               exception\n-   #627 = Utf8               Ljava/lang/Throwable;\n-   #628 = Utf8               other\n-   #629 = Utf8               Ljava/util/Map$Entry<Ljava/lang/String;*>;\n-   #630 = Utf8               isNumberSimilar\n-   #631 = Utf8               (Ljava/lang/Number;Ljava/lang/Number;)Z\n-   #632 = Utf8               compareTo\n-   #633 = Utf8               l\n-   #634 = Utf8               r\n-   #635 = Utf8               lBigDecimal\n-   #636 = Utf8               rBigDecimal\n-   #637 = Utf8               numberIsFinite\n-   #638 = Utf8               (Ljava/lang/Number;)Z\n-   #639 = Utf8               n\n-   #640 = Utf8               isDecimalNotation\n-   #641 = Utf8               stringToNumber\n-   #642 = Utf8               bd\n-   #643 = Utf8               Ljava/lang/Double;\n-   #644 = Utf8               ignore\n-   #645 = Utf8               Ljava/lang/NumberFormatException;\n-   #646 = Utf8               retryAsDouble\n-   #647 = Utf8               at1\n-   #648 = Utf8               at2\n-   #649 = Utf8               bi\n-   #650 = Utf8               initial\n-   #651 = Class              #962         // java/lang/NumberFormatException\n-   #652 = Class              #829         // java/lang/Double\n-   #653 = Utf8               stringToValue\n-   #654 = Utf8               testValidity\n-   #655 = Utf8               toJSONArray\n-   #656 = Utf8               (Lorg/json/JSONArray;)Lorg/json/JSONArray;\n-   #657 = Utf8               Lorg/json/JSONArray;\n-   #658 = Utf8               ja\n-   #659 = Utf8               toString\n-   #660 = Utf8               ()Ljava/lang/String;\n-   #661 = Utf8               (I)Ljava/lang/String;\n-   #662 = Utf8               indentFactor\n-   #663 = Utf8               valueToString\n-   #664 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n-   #665 = Utf8               wrap\n-   #666 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-   #667 = Utf8               (Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n-   #668 = Utf8               coll\n-   #669 = Utf8               objectPackage\n-   #670 = Utf8               Ljava/lang/Package;\n-   #671 = Utf8               objectPackageName\n-   #672 = Utf8               Lorg/json/JSONException;\n-   #673 = Class              #1019        // java/lang/Package\n-   #674 = Class              #780         // org/json/JSONException\n-   #675 = Utf8               (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)Ljava/lang/Object;\n-   #676 = Utf8               write\n-   #677 = Utf8               (Ljava/io/Writer;)Ljava/io/Writer;\n-   #678 = Utf8               writer\n-   #679 = Utf8               writeValue\n-   #680 = Utf8               (Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-   #681 = Utf8               numberAsString\n-   #682 = Utf8               indent\n-   #683 = Utf8               (Ljava/io/Writer;I)V\n-   #684 = Utf8               (Ljava/io/Writer;II)Ljava/io/Writer;\n-   #685 = Utf8               newIndent\n-   #686 = Utf8               needsComma\n-   #687 = Utf8               toMap\n-   #688 = Utf8               ()Ljava/util/Map;\n-   #689 = Utf8               results\n-   #690 = Utf8               Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;\n-   #691 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n-   #692 = Utf8               wrongValueFormatException\n-   #693 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #694 = Utf8               valueType\n-   #695 = Utf8               cause\n-   #696 = Utf8               recursivelyDefinedObjectException\n-   #697 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n-   #698 = Utf8               <clinit>\n-   #699 = Utf8               SourceFile\n-   #700 = Utf8               JSONObject.java\n-   #701 = NameAndType        #343:#344    // map:Ljava/util/Map;\n-   #702 = NameAndType        #898:#350    // getClass:()Ljava/lang/Class;\n-   #703 = NameAndType        #357:#358    // \"<init>\":()V\n-   #704 = Utf8               java/util/HashMap\n-   #705 = NameAndType        #357:#425    // \"<init>\":(I)V\n-   #706 = NameAndType        #501:#436    // opt:(Ljava/lang/String;)Ljava/lang/Object;\n-   #707 = NameAndType        #597:#428    // putOnce:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #708 = Utf8               java/lang/Exception\n-   #709 = NameAndType        #1020:#1021  // nextClean:()C\n-   #710 = Utf8               A JSONObject text must begin with \\'{\\'\n-   #711 = NameAndType        #1022:#697   // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-   #712 = NameAndType        #1023:#1021  // getPrevious:()C\n-   #713 = Utf8               A JSONObject text must end with \\'}\\'\n-   #714 = Utf8               A JSON Object can not directly nest another JSON Object or JSON Array.\n-   #715 = NameAndType        #1024:#358   // back:()V\n-   #716 = NameAndType        #1025:#1026  // nextValue:()Ljava/lang/Object;\n-   #717 = NameAndType        #659:#660    // toString:()Ljava/lang/String;\n-   #718 = Utf8               Expected a \\':\\' after a key\n-   #719 = Utf8               java/lang/StringBuilder\n-   #720 = Utf8               Duplicate key \\\"\n-   #721 = NameAndType        #429:#1027   // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #722 = Utf8               \\\"\n-   #723 = NameAndType        #584:#428    // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #724 = Utf8               Expected a \\',\\' or \\'}\\'\n-   #725 = NameAndType        #1028:#492   // size:()I\n-   #726 = NameAndType        #490:#488    // entrySet:()Ljava/util/Set;\n-   #727 = Class              #1015        // java/util/Set\n-   #728 = NameAndType        #1029:#485   // iterator:()Ljava/util/Iterator;\n-   #729 = Class              #1010        // java/util/Iterator\n-   #730 = NameAndType        #1030:#495   // hasNext:()Z\n-   #731 = NameAndType        #1031:#1026  // next:()Ljava/lang/Object;\n-   #732 = Utf8               java/util/Map$Entry\n-   #733 = NameAndType        #1032:#1026  // getKey:()Ljava/lang/Object;\n-   #734 = Utf8               java/lang/NullPointerException\n-   #735 = Utf8               Null key.\n-   #736 = NameAndType        #357:#406    // \"<init>\":(Ljava/lang/String;)V\n-   #737 = NameAndType        #1033:#1026  // getValue:()Ljava/lang/Object;\n-   #738 = NameAndType        #1034:#664   // valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n-   #739 = NameAndType        #665:#666    // wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #740 = NameAndType        #584:#1035   // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #741 = NameAndType        #546:#392    // populateMap:(Ljava/lang/Object;)V\n-   #742 = NameAndType        #546:#394    // populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n-   #743 = Class              #1011        // java/lang/Class\n-   #744 = NameAndType        #1036:#1037  // getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n-   #745 = Class              #1038        // java/lang/reflect/Field\n-   #746 = NameAndType        #435:#666    // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #747 = NameAndType        #598:#428    // putOpt:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #748 = Utf8               org/json/JSONTokener\n-   #749 = NameAndType        #357:#368    // \"<init>\":(Lorg/json/JSONTokener;)V\n-   #750 = Class              #1039        // java/lang/Thread\n-   #751 = NameAndType        #1040:#1041  // currentThread:()Ljava/lang/Thread;\n-   #752 = NameAndType        #1042:#1043  // getContextClassLoader:()Ljava/lang/ClassLoader;\n-   #753 = Class              #1013        // java/util/ResourceBundle\n-   #754 = NameAndType        #1044:#1045  // getBundle:(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n-   #755 = NameAndType        #1046:#1047  // getKeys:()Ljava/util/Enumeration;\n-   #756 = Class              #1014        // java/util/Enumeration\n-   #757 = NameAndType        #1048:#495   // hasMoreElements:()Z\n-   #758 = NameAndType        #1049:#1026  // nextElement:()Ljava/lang/Object;\n-   #759 = Utf8               java/lang/String\n-   #760 = Utf8               \\\\.\n-   #761 = NameAndType        #1050:#1051  // split:(Ljava/lang/String;)[Ljava/lang/String;\n-   #762 = NameAndType        #537:#469    // optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;\n-   #763 = Utf8               org/json/JSONObject\n-   #764 = NameAndType        #480:#481    // getString:(Ljava/lang/String;)Ljava/lang/String;\n-   #765 = NameAndType        #654:#392    // testValidity:(Ljava/lang/Object;)V\n-   #766 = Utf8               org/json/JSONArray\n-   #767 = NameAndType        #584:#1052   // put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n-   #768 = Utf8               JSONArray\n-   #769 = NameAndType        #692:#693    // wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #770 = NameAndType        #1053:#1054  // isInfinite:(D)Z\n-   #771 = NameAndType        #1055:#1054  // isNaN:(D)Z\n-   #772 = Utf8               null\n-   #773 = NameAndType        #659:#431    // toString:(D)Ljava/lang/String;\n-   #774 = NameAndType        #1056:#1057  // indexOf:(I)I\n-   #775 = Utf8               0\n-   #776 = NameAndType        #1058:#447   // endsWith:(Ljava/lang/String;)Z\n-   #777 = NameAndType        #478:#492    // length:()I\n-   #778 = NameAndType        #1059:#1060  // substring:(II)Ljava/lang/String;\n-   #779 = Utf8               .\n-   #780 = Utf8               org/json/JSONException\n-   #781 = Utf8               JSONObject[\n-   #782 = NameAndType        #606:#481    // quote:(Ljava/lang/String;)Ljava/lang/String;\n-   #783 = Utf8               ] not found.\n-   #784 = NameAndType        #502:#438    // optEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-   #785 = Utf8               enum of type\n-   #786 = NameAndType        #1061:#660   // getSimpleName:()Ljava/lang/String;\n-   #787 = NameAndType        #435:#436    // get:(Ljava/lang/String;)Ljava/lang/Object;\n-   #788 = NameAndType        #1062:#1063  // FALSE:Ljava/lang/Boolean;\n-   #789 = NameAndType        #1064:#622   // equals:(Ljava/lang/Object;)Z\n-   #790 = Utf8               false\n-   #791 = NameAndType        #1065:#447   // equalsIgnoreCase:(Ljava/lang/String;)Z\n-   #792 = NameAndType        #1066:#1063  // TRUE:Ljava/lang/Boolean;\n-   #793 = Utf8               true\n-   #794 = Utf8               Boolean\n-   #795 = NameAndType        #522:#523    // objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #796 = Utf8               BigInteger\n-   #797 = NameAndType        #516:#517    // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #798 = Utf8               BigDecimal\n-   #799 = Utf8               java/lang/Number\n-   #800 = NameAndType        #1067:#1068  // doubleValue:()D\n-   #801 = NameAndType        #1069:#458   // parseDouble:(Ljava/lang/String;)D\n-   #802 = Utf8               double\n-   #803 = NameAndType        #531:#1070   // floatValue:()F\n-   #804 = NameAndType        #1071:#461   // parseFloat:(Ljava/lang/String;)F\n-   #805 = Utf8               float\n-   #806 = NameAndType        #641:#463    // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-   #807 = NameAndType        #1072:#492   // intValue:()I\n-   #808 = NameAndType        #1073:#465   // parseInt:(Ljava/lang/String;)I\n-   #809 = Utf8               int\n-   #810 = Utf8               JSONObject\n-   #811 = NameAndType        #1074:#1075  // longValue:()J\n-   #812 = NameAndType        #1076:#471   // parseLong:(Ljava/lang/String;)J\n-   #813 = Utf8               long\n-   #814 = NameAndType        #494:#495    // isEmpty:()Z\n-   #815 = NameAndType        #487:#488    // keySet:()Ljava/util/Set;\n-   #816 = NameAndType        #1077:#1078  // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #817 = NameAndType        #1079:#1080  // getFields:()[Ljava/lang/reflect/Field;\n-   #818 = NameAndType        #1081:#660   // getName:()Ljava/lang/String;\n-   #819 = NameAndType        #1082:#622   // containsKey:(Ljava/lang/Object;)Z\n-   #820 = NameAndType        #584:#593    // put:(Ljava/lang/String;I)Lorg/json/JSONObject;\n-   #821 = Utf8               java/lang/Integer\n-   #822 = Utf8               java/lang/Long\n-   #823 = NameAndType        #584:#594    // put:(Ljava/lang/String;J)Lorg/json/JSONObject;\n-   #824 = Utf8               java/math/BigInteger\n-   #825 = NameAndType        #1083:#451   // ONE:Ljava/math/BigInteger;\n-   #826 = NameAndType        #1084:#1085  // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #827 = Utf8               java/lang/Float\n-   #828 = NameAndType        #584:#592    // put:(Ljava/lang/String;F)Lorg/json/JSONObject;\n-   #829 = Utf8               java/lang/Double\n-   #830 = NameAndType        #584:#591    // put:(Ljava/lang/String;D)Lorg/json/JSONObject;\n-   #831 = Utf8               java/math/BigDecimal\n-   #832 = NameAndType        #1083:#455   // ONE:Ljava/math/BigDecimal;\n-   #833 = NameAndType        #1084:#1086  // add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #834 = Utf8               Unable to increment [\n-   #835 = Utf8               ].\n-   #836 = NameAndType        #347:#348    // NULL:Ljava/lang/Object;\n-   #837 = NameAndType        #493:#358    // clear:()V\n-   #838 = NameAndType        #357:#1087   // \"<init>\":(Ljava/util/Collection;)V\n-   #839 = Utf8               Null pointer\n-   #840 = NameAndType        #502:#503    // optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n-   #841 = NameAndType        #1088:#1089  // isAssignableFrom:(Ljava/lang/Class;)Z\n-   #842 = Utf8               java/lang/Enum\n-   #843 = NameAndType        #1034:#438   // valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-   #844 = Utf8               java/lang/IllegalArgumentException\n-   #845 = NameAndType        #511:#512    // optBoolean:(Ljava/lang/String;Z)Z\n-   #846 = Utf8               java/lang/Boolean\n-   #847 = NameAndType        #1090:#495   // booleanValue:()Z\n-   #848 = NameAndType        #446:#447    // getBoolean:(Ljava/lang/String;)Z\n-   #849 = NameAndType        #516:#518    // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n-   #850 = NameAndType        #357:#1091   // \"<init>\":(Ljava/math/BigInteger;)V\n-   #851 = NameAndType        #637:#638    // numberIsFinite:(Ljava/lang/Number;)Z\n-   #852 = NameAndType        #357:#1092   // \"<init>\":(D)V\n-   #853 = Utf8               java/lang/Short\n-   #854 = Utf8               java/lang/Byte\n-   #855 = NameAndType        #357:#1093   // \"<init>\":(J)V\n-   #856 = NameAndType        #1094:#1095  // toBigInteger:()Ljava/math/BigInteger;\n-   #857 = NameAndType        #1034:#1096  // valueOf:(J)Ljava/math/BigInteger;\n-   #858 = NameAndType        #640:#447    // isDecimalNotation:(Ljava/lang/String;)Z\n-   #859 = NameAndType        #525:#526    // optDouble:(Ljava/lang/String;D)D\n-   #860 = NameAndType        #542:#463    // optNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-   #861 = NameAndType        #528:#529    // optFloat:(Ljava/lang/String;F)F\n-   #862 = NameAndType        #532:#533    // optInt:(Ljava/lang/String;I)I\n-   #863 = NameAndType        #542:#543    // optNumber:(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n-   #864 = NameAndType        #537:#538    // optJSONObject:(Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n-   #865 = NameAndType        #539:#540    // optLong:(Ljava/lang/String;J)J\n-   #866 = Utf8\n-   #867 = NameAndType        #544:#545    // optString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #868 = Utf8               java/util/IdentityHashMap\n-   #869 = Class              #1097        // java/util/Collections\n-   #870 = NameAndType        #1098:#1099  // newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;\n-   #871 = NameAndType        #1100:#1043  // getClassLoader:()Ljava/lang/ClassLoader;\n-   #872 = NameAndType        #1101:#1102  // getMethods:()[Ljava/lang/reflect/Method;\n-   #873 = NameAndType        #1103:#1102  // getDeclaredMethods:()[Ljava/lang/reflect/Method;\n-   #874 = Class              #1016        // java/lang/reflect/Method\n-   #875 = NameAndType        #1104:#492   // getModifiers:()I\n-   #876 = Class              #1105        // java/lang/reflect/Modifier\n-   #877 = NameAndType        #1106:#1107  // isPublic:(I)Z\n-   #878 = NameAndType        #1108:#1107  // isStatic:(I)Z\n-   #879 = NameAndType        #1109:#1110  // getParameterTypes:()[Ljava/lang/Class;\n-   #880 = NameAndType        #1111:#495   // isBridge:()Z\n-   #881 = NameAndType        #1112:#350   // getReturnType:()Ljava/lang/Class;\n-   #882 = Class              #1113        // java/lang/Void\n-   #883 = NameAndType        #1114:#402   // TYPE:Ljava/lang/Class;\n-   #884 = NameAndType        #560:#447    // isValidMethodName:(Ljava/lang/String;)Z\n-   #885 = NameAndType        #561:#562    // getKeyNameFromMethod:(Ljava/lang/reflect/Method;)Ljava/lang/String;\n-   #886 = Utf8               java/lang/Object\n-   #887 = NameAndType        #1115:#1116  // invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n-   #888 = NameAndType        #1117:#622   // contains:(Ljava/lang/Object;)Z\n-   #889 = NameAndType        #696:#697    // recursivelyDefinedObjectException:(Ljava/lang/String;)Lorg/json/JSONException;\n-   #890 = NameAndType        #1084:#622   // add:(Ljava/lang/Object;)Z\n-   #891 = NameAndType        #665:#667    // wrap:(Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n-   #892 = NameAndType        #620:#622    // remove:(Ljava/lang/Object;)Z\n-   #893 = Utf8               java/io/Closeable\n-   #894 = NameAndType        #1118:#358   // close:()V\n-   #895 = Utf8               java/io/IOException\n-   #896 = Utf8               java/lang/IllegalAccessException\n-   #897 = Utf8               java/lang/reflect/InvocationTargetException\n-   #898 = Utf8               getClass\n-   #899 = Utf8               getDeclaringClass\n-   #900 = Utf8               org/json/JSONPropertyIgnore\n-   #901 = NameAndType        #580:#581    // getAnnotationDepth:(Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n-   #902 = Utf8               org/json/JSONPropertyName\n-   #903 = NameAndType        #568:#569    // getAnnotation:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #904 = NameAndType        #369:#660    // value:()Ljava/lang/String;\n-   #905 = NameAndType        #1119:#447   // startsWith:(Ljava/lang/String;)Z\n-   #906 = NameAndType        #1059:#661   // substring:(I)Ljava/lang/String;\n-   #907 = Utf8               is\n-   #908 = NameAndType        #1120:#1121  // charAt:(I)C\n-   #909 = NameAndType        #1122:#1123  // isLowerCase:(C)Z\n-   #910 = Class              #1012        // java/util/Locale\n-   #911 = NameAndType        #1124:#416   // ROOT:Ljava/util/Locale;\n-   #912 = NameAndType        #1125:#1126  // toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n-   #913 = NameAndType        #1127:#1123  // isUpperCase:(C)Z\n-   #914 = NameAndType        #1128:#1089  // isAnnotationPresent:(Ljava/lang/Class;)Z\n-   #915 = NameAndType        #568:#1129   // getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #916 = NameAndType        #899:#350    // getDeclaringClass:()Ljava/lang/Class;\n-   #917 = NameAndType        #1130:#350   // getSuperclass:()Ljava/lang/Class;\n-   #918 = NameAndType        #1131:#1110  // getInterfaces:()[Ljava/lang/Class;\n-   #919 = NameAndType        #1132:#1133  // getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n-   #920 = Utf8               java/lang/SecurityException\n-   #921 = Utf8               java/lang/NoSuchMethodException\n-   #922 = NameAndType        #1034:#1134  // valueOf:(D)Ljava/lang/Double;\n-   #923 = NameAndType        #1034:#1135  // valueOf:(F)Ljava/lang/Float;\n-   #924 = NameAndType        #1034:#1136  // valueOf:(I)Ljava/lang/Integer;\n-   #925 = NameAndType        #1034:#1137  // valueOf:(J)Ljava/lang/Long;\n-   #926 = NameAndType        #357:#380    // \"<init>\":(Ljava/util/Map;)V\n-   #927 = NameAndType        #620:#436    // remove:(Ljava/lang/String;)Ljava/lang/Object;\n-   #928 = Utf8               org/json/JSONPointer\n-   #929 = NameAndType        #599:#601    // query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #930 = NameAndType        #1138:#666   // queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #931 = NameAndType        #603:#601    // optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #932 = Utf8               org/json/JSONPointerException\n-   #933 = Utf8               java/io/StringWriter\n-   #934 = NameAndType        #1139:#1140  // getBuffer:()Ljava/lang/StringBuffer;\n-   #935 = NameAndType        #606:#613    // quote:(Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n-   #936 = Utf8               \\\"\\\"\n-   #937 = Class              #1018        // java/io/Writer\n-   #938 = NameAndType        #676:#406    // write:(Ljava/lang/String;)V\n-   #939 = NameAndType        #676:#425    // write:(I)V\n-   #940 = Utf8               \\\\b\n-   #941 = Utf8               \\\\t\n-   #942 = Utf8               \\\\n\n-   #943 = Utf8               \\\\f\n-   #944 = Utf8               \\\\r\n-   #945 = Utf8               \\\\u\n-   #946 = NameAndType        #1141:#661   // toHexString:(I)Ljava/lang/String;\n-   #947 = Utf8               0000\n-   #948 = NameAndType        #676:#1142   // write:(Ljava/lang/String;II)V\n-   #949 = NameAndType        #620:#666    // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #950 = NameAndType        #621:#622    // similar:(Ljava/lang/Object;)Z\n-   #951 = NameAndType        #630:#631    // isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n-   #952 = Utf8               org/json/JSONString\n-   #953 = NameAndType        #1143:#660   // toJSONString:()Ljava/lang/String;\n-   #954 = Utf8               java/lang/Throwable\n-   #955 = Utf8               java/lang/Comparable\n-   #956 = NameAndType        #632:#1144   // compareTo:(Ljava/lang/Object;)I\n-   #957 = NameAndType        #632:#1145   // compareTo:(Ljava/math/BigDecimal;)I\n-   #958 = NameAndType        #1053:#495   // isInfinite:()Z\n-   #959 = NameAndType        #1055:#495   // isNaN:()Z\n-   #960 = Utf8               -0\n-   #961 = NameAndType        #1146:#455   // ZERO:Ljava/math/BigDecimal;\n-   #962 = Utf8               java/lang/NumberFormatException\n-   #963 = NameAndType        #1034:#1147  // valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n-   #964 = Utf8               val [\n-   #965 = Utf8               ] is not a valid number.\n-   #966 = NameAndType        #1148:#492   // bitLength:()I\n-   #967 = Utf8               JSON does not allow non-finite numbers.\n-   #968 = NameAndType        #480:#661    // getString:(I)Ljava/lang/String;\n-   #969 = NameAndType        #659:#661    // toString:(I)Ljava/lang/String;\n-   #970 = NameAndType        #676:#684    // write:(Ljava/io/Writer;II)Ljava/io/Writer;\n-   #971 = Class              #1149        // org/json/JSONWriter\n-   #972 = NameAndType        #663:#664    // valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n-   #973 = Utf8               java/lang/Character\n-   #974 = Utf8               java/util/Collection\n-   #975 = NameAndType        #1150:#495   // isArray:()Z\n-   #976 = NameAndType        #357:#392    // \"<init>\":(Ljava/lang/Object;)V\n-   #977 = Utf8               java/util/Map\n-   #978 = NameAndType        #1151:#1152  // getPackage:()Ljava/lang/Package;\n-   #979 = Class              #1019        // java/lang/Package\n-   #980 = Utf8               java.\n-   #981 = Utf8               javax.\n-   #982 = NameAndType        #357:#394    // \"<init>\":(Ljava/lang/Object;Ljava/util/Set;)V\n-   #983 = NameAndType        #357:#1153   // \"<init>\":(Ljava/lang/Throwable;)V\n-   #984 = NameAndType        #497:#498    // numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n-   #985 = NameAndType        #341:#342    // NUMBER_PATTERN:Ljava/util/regex/Pattern;\n-   #986 = Class              #1154        // java/util/regex/Pattern\n-   #987 = NameAndType        #1155:#1156  // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-   #988 = Class              #1157        // java/util/regex/Matcher\n-   #989 = NameAndType        #1158:#495   // matches:()Z\n-   #990 = NameAndType        #400:#660    // name:()Ljava/lang/String;\n-   #991 = NameAndType        #679:#680    // writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-   #992 = Utf8               Unable to write JSONObject value for key:\n-   #993 = NameAndType        #357:#1159   // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #994 = NameAndType        #682:#683    // indent:(Ljava/io/Writer;I)V\n-   #995 = NameAndType        #687:#688    // toMap:()Ljava/util/Map;\n-   #996 = NameAndType        #1160:#1161  // toList:()Ljava/util/List;\n-   #997 = Utf8               ] is not a\n-   #998 = Utf8                (null).\n-   #999 = Utf8               java/lang/Iterable\n-  #1000 = Utf8                (\n-  #1001 = NameAndType        #429:#1162   // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #1002 = Utf8               ).\n-  #1003 = Utf8                :\n-  #1004 = Utf8               JavaBean object contains recursively defined member variable of key\n-  #1005 = Utf8               -?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\n-  #1006 = NameAndType        #1163:#1164  // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-  #1007 = Utf8               org/json/JSONObject$Null\n-  #1008 = NameAndType        #357:#1165   // \"<init>\":(Lorg/json/JSONObject$1;)V\n-  #1009 = Utf8               org/json/JSONObject$1\n-  #1010 = Utf8               java/util/Iterator\n-  #1011 = Utf8               java/lang/Class\n-  #1012 = Utf8               java/util/Locale\n-  #1013 = Utf8               java/util/ResourceBundle\n-  #1014 = Utf8               java/util/Enumeration\n-  #1015 = Utf8               java/util/Set\n-  #1016 = Utf8               java/lang/reflect/Method\n-  #1017 = Utf8               [Ljava/lang/Class;\n-  #1018 = Utf8               java/io/Writer\n-  #1019 = Utf8               java/lang/Package\n-  #1020 = Utf8               nextClean\n-  #1021 = Utf8               ()C\n-  #1022 = Utf8               syntaxError\n-  #1023 = Utf8               getPrevious\n-  #1024 = Utf8               back\n-  #1025 = Utf8               nextValue\n-  #1026 = Utf8               ()Ljava/lang/Object;\n-  #1027 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #1028 = Utf8               size\n-  #1029 = Utf8               iterator\n-  #1030 = Utf8               hasNext\n-  #1031 = Utf8               next\n-  #1032 = Utf8               getKey\n-  #1033 = Utf8               getValue\n-  #1034 = Utf8               valueOf\n-  #1035 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #1036 = Utf8               getField\n-  #1037 = Utf8               (Ljava/lang/String;)Ljava/lang/reflect/Field;\n-  #1038 = Utf8               java/lang/reflect/Field\n-  #1039 = Utf8               java/lang/Thread\n-  #1040 = Utf8               currentThread\n-  #1041 = Utf8               ()Ljava/lang/Thread;\n-  #1042 = Utf8               getContextClassLoader\n-  #1043 = Utf8               ()Ljava/lang/ClassLoader;\n-  #1044 = Utf8               getBundle\n-  #1045 = Utf8               (Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n-  #1046 = Utf8               getKeys\n-  #1047 = Utf8               ()Ljava/util/Enumeration;\n-  #1048 = Utf8               hasMoreElements\n-  #1049 = Utf8               nextElement\n-  #1050 = Utf8               split\n-  #1051 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n-  #1052 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONArray;\n-  #1053 = Utf8               isInfinite\n-  #1054 = Utf8               (D)Z\n-  #1055 = Utf8               isNaN\n-  #1056 = Utf8               indexOf\n-  #1057 = Utf8               (I)I\n-  #1058 = Utf8               endsWith\n-  #1059 = Utf8               substring\n-  #1060 = Utf8               (II)Ljava/lang/String;\n-  #1061 = Utf8               getSimpleName\n-  #1062 = Utf8               FALSE\n-  #1063 = Utf8               Ljava/lang/Boolean;\n-  #1064 = Utf8               equals\n-  #1065 = Utf8               equalsIgnoreCase\n-  #1066 = Utf8               TRUE\n-  #1067 = Utf8               doubleValue\n-  #1068 = Utf8               ()D\n-  #1069 = Utf8               parseDouble\n-  #1070 = Utf8               ()F\n-  #1071 = Utf8               parseFloat\n-  #1072 = Utf8               intValue\n-  #1073 = Utf8               parseInt\n-  #1074 = Utf8               longValue\n-  #1075 = Utf8               ()J\n-  #1076 = Utf8               parseLong\n-  #1077 = Utf8               toArray\n-  #1078 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #1079 = Utf8               getFields\n-  #1080 = Utf8               ()[Ljava/lang/reflect/Field;\n-  #1081 = Utf8               getName\n-  #1082 = Utf8               containsKey\n-  #1083 = Utf8               ONE\n-  #1084 = Utf8               add\n-  #1085 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #1086 = Utf8               (Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-  #1087 = Utf8               (Ljava/util/Collection;)V\n-  #1088 = Utf8               isAssignableFrom\n-  #1089 = Utf8               (Ljava/lang/Class;)Z\n-  #1090 = Utf8               booleanValue\n-  #1091 = Utf8               (Ljava/math/BigInteger;)V\n-  #1092 = Utf8               (D)V\n-  #1093 = Utf8               (J)V\n-  #1094 = Utf8               toBigInteger\n-  #1095 = Utf8               ()Ljava/math/BigInteger;\n-  #1096 = Utf8               (J)Ljava/math/BigInteger;\n-  #1097 = Utf8               java/util/Collections\n-  #1098 = Utf8               newSetFromMap\n-  #1099 = Utf8               (Ljava/util/Map;)Ljava/util/Set;\n-  #1100 = Utf8               getClassLoader\n-  #1101 = Utf8               getMethods\n-  #1102 = Utf8               ()[Ljava/lang/reflect/Method;\n-  #1103 = Utf8               getDeclaredMethods\n-  #1104 = Utf8               getModifiers\n-  #1105 = Utf8               java/lang/reflect/Modifier\n-  #1106 = Utf8               isPublic\n-  #1107 = Utf8               (I)Z\n-  #1108 = Utf8               isStatic\n-  #1109 = Utf8               getParameterTypes\n-  #1110 = Utf8               ()[Ljava/lang/Class;\n-  #1111 = Utf8               isBridge\n-  #1112 = Utf8               getReturnType\n-  #1113 = Utf8               java/lang/Void\n-  #1114 = Utf8               TYPE\n-  #1115 = Utf8               invoke\n-  #1116 = Utf8               (Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n-  #1117 = Utf8               contains\n-  #1118 = Utf8               close\n-  #1119 = Utf8               startsWith\n-  #1120 = Utf8               charAt\n-  #1121 = Utf8               (I)C\n-  #1122 = Utf8               isLowerCase\n-  #1123 = Utf8               (C)Z\n-  #1124 = Utf8               ROOT\n-  #1125 = Utf8               toLowerCase\n-  #1126 = Utf8               (Ljava/util/Locale;)Ljava/lang/String;\n-  #1127 = Utf8               isUpperCase\n-  #1128 = Utf8               isAnnotationPresent\n-  #1129 = Utf8               (Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-  #1130 = Utf8               getSuperclass\n-  #1131 = Utf8               getInterfaces\n-  #1132 = Utf8               getMethod\n-  #1133 = Utf8               (Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n-  #1134 = Utf8               (D)Ljava/lang/Double;\n-  #1135 = Utf8               (F)Ljava/lang/Float;\n-  #1136 = Utf8               (I)Ljava/lang/Integer;\n-  #1137 = Utf8               (J)Ljava/lang/Long;\n-  #1138 = Utf8               queryFrom\n-  #1139 = Utf8               getBuffer\n-  #1140 = Utf8               ()Ljava/lang/StringBuffer;\n-  #1141 = Utf8               toHexString\n-  #1142 = Utf8               (Ljava/lang/String;II)V\n-  #1143 = Utf8               toJSONString\n-  #1144 = Utf8               (Ljava/lang/Object;)I\n-  #1145 = Utf8               (Ljava/math/BigDecimal;)I\n-  #1146 = Utf8               ZERO\n-  #1147 = Utf8               (Ljava/lang/String;)Ljava/lang/Double;\n-  #1148 = Utf8               bitLength\n-  #1149 = Utf8               org/json/JSONWriter\n-  #1150 = Utf8               isArray\n-  #1151 = Utf8               getPackage\n-  #1152 = Utf8               ()Ljava/lang/Package;\n-  #1153 = Utf8               (Ljava/lang/Throwable;)V\n-  #1154 = Utf8               java/util/regex/Pattern\n-  #1155 = Utf8               matcher\n-  #1156 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-  #1157 = Utf8               java/util/regex/Matcher\n-  #1158 = Utf8               matches\n-  #1159 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #1160 = Utf8               toList\n-  #1161 = Utf8               ()Ljava/util/List;\n-  #1162 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #1163 = Utf8               compile\n-  #1164 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;\n-  #1165 = Utf8               (Lorg/json/JSONObject$1;)V\n+   #366 = Utf8               (Lorg/json/JSONTokener;)V\n+   #367 = Utf8               value\n+   #368 = Utf8               prev\n+   #369 = Utf8               C\n+   #370 = Utf8               x\n+   #371 = Utf8               Lorg/json/JSONTokener;\n+   #372 = Utf8               c\n+   #373 = Utf8               key\n+   #374 = Utf8               Ljava/lang/String;\n+   #375 = Utf8               Exceptions\n+   #376 = Utf8               (Ljava/util/Map;)V\n+   #377 = Utf8               e\n+   #378 = Utf8               Entry\n+   #379 = Utf8               Ljava/util/Map$Entry;\n+   #380 = Utf8               m\n+   #381 = Utf8               LocalVariableTypeTable\n+   #382 = Utf8               Ljava/util/Map$Entry<**>;\n+   #383 = Utf8               Ljava/util/Map<**>;\n+   #384 = Class              #974         // java/util/Iterator\n+   #385 = Utf8               (Ljava/util/Map<**>;)V\n+   #386 = Utf8               (Ljava/lang/Object;)V\n+   #387 = Utf8               bean\n+   #388 = Utf8               (Ljava/lang/Object;Ljava/util/Set;)V\n+   #389 = Utf8               objectsRecord\n+   #390 = Utf8               Ljava/util/Set;\n+   #391 = Utf8               Ljava/util/Set<Ljava/lang/Object;>;\n+   #392 = Utf8               (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n+   #393 = Utf8               (Ljava/lang/Object;[Ljava/lang/String;)V\n+   #394 = Utf8               name\n+   #395 = Utf8               object\n+   #396 = Utf8               Ljava/lang/Class;\n+   #397 = Utf8               Ljava/lang/Class<*>;\n+   #398 = Class              #975         // java/lang/Class\n+   #399 = Utf8               (Ljava/lang/String;)V\n+   #400 = Utf8               source\n+   #401 = Utf8               (Ljava/lang/String;Ljava/util/Locale;)V\n+   #402 = Utf8               segment\n+   #403 = Utf8               nextTarget\n+   #404 = Utf8               path\n+   #405 = Utf8               last\n+   #406 = Utf8               target\n+   #407 = Utf8               baseName\n+   #408 = Utf8               locale\n+   #409 = Utf8               Ljava/util/Locale;\n+   #410 = Utf8               bundle\n+   #411 = Utf8               Ljava/util/ResourceBundle;\n+   #412 = Utf8               keys\n+   #413 = Utf8               Ljava/util/Enumeration;\n+   #414 = Utf8               Ljava/util/Enumeration<Ljava/lang/String;>;\n+   #415 = Class              #976         // java/util/Locale\n+   #416 = Class              #977         // java/util/ResourceBundle\n+   #417 = Class              #978         // java/util/Enumeration\n+   #418 = Utf8               (I)V\n+   #419 = Utf8               initialCapacity\n+   #420 = Utf8               accumulate\n+   #421 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #422 = Utf8               append\n+   #423 = Utf8               doubleToString\n+   #424 = Utf8               (D)Ljava/lang/String;\n+   #425 = Utf8               d\n+   #426 = Utf8               D\n+   #427 = Utf8               string\n+   #428 = Utf8               get\n+   #429 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n+   #430 = Utf8               getEnum\n+   #431 = Utf8               (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+   #432 = Utf8               clazz\n+   #433 = Utf8               val\n+   #434 = Utf8               Ljava/lang/Enum;\n+   #435 = Utf8               Ljava/lang/Class<TE;>;\n+   #436 = Utf8               TE;\n+   #437 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n+   #438 = Utf8               getBoolean\n+   #439 = Utf8               (Ljava/lang/String;)Z\n+   #440 = Utf8               getBigInteger\n+   #441 = Utf8               (Ljava/lang/String;)Ljava/math/BigInteger;\n+   #442 = Utf8               ret\n+   #443 = Utf8               Ljava/math/BigInteger;\n+   #444 = Utf8               getBigDecimal\n+   #445 = Utf8               (Ljava/lang/String;)Ljava/math/BigDecimal;\n+   #446 = Utf8               Ljava/math/BigDecimal;\n+   #447 = Utf8               getDouble\n+   #448 = Utf8               (Ljava/lang/String;)D\n+   #449 = Utf8               Ljava/lang/Exception;\n+   #450 = Utf8               getFloat\n+   #451 = Utf8               (Ljava/lang/String;)F\n+   #452 = Utf8               getNumber\n+   #453 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n+   #454 = Utf8               getInt\n+   #455 = Utf8               (Ljava/lang/String;)I\n+   #456 = Utf8               getJSONArray\n+   #457 = Utf8               (Ljava/lang/String;)Lorg/json/JSONArray;\n+   #458 = Utf8               getJSONObject\n+   #459 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n+   #460 = Utf8               getLong\n+   #461 = Utf8               (Ljava/lang/String;)J\n+   #462 = Utf8               getNames\n+   #463 = Utf8               (Lorg/json/JSONObject;)[Ljava/lang/String;\n+   #464 = Utf8               (Ljava/lang/Object;)[Ljava/lang/String;\n+   #465 = Utf8               klass\n+   #466 = Utf8               fields\n+   #467 = Utf8               [Ljava/lang/reflect/Field;\n+   #468 = Utf8               length\n+   #469 = Class              #467         // \"[Ljava/lang/reflect/Field;\"\n+   #470 = Utf8               getString\n+   #471 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+   #472 = Utf8               has\n+   #473 = Utf8               increment\n+   #474 = Utf8               isNull\n+   #475 = Utf8               ()Ljava/util/Iterator;\n+   #476 = Utf8               ()Ljava/util/Iterator<Ljava/lang/String;>;\n+   #477 = Utf8               keySet\n+   #478 = Utf8               ()Ljava/util/Set;\n+   #479 = Utf8               ()Ljava/util/Set<Ljava/lang/String;>;\n+   #480 = Utf8               entrySet\n+   #481 = Utf8               ()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;\n+   #482 = Utf8               ()I\n+   #483 = Utf8               clear\n+   #484 = Utf8               isEmpty\n+   #485 = Utf8               ()Z\n+   #486 = Utf8               ()Lorg/json/JSONArray;\n+   #487 = Utf8               numberToString\n+   #488 = Utf8               (Ljava/lang/Number;)Ljava/lang/String;\n+   #489 = Utf8               number\n+   #490 = Utf8               Ljava/lang/Number;\n+   #491 = Utf8               opt\n+   #492 = Utf8               optEnum\n+   #493 = Utf8               (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n+   #494 = Utf8               myE\n+   #495 = Utf8               Ljava/lang/IllegalArgumentException;\n+   #496 = Utf8               Ljava/lang/NullPointerException;\n+   #497 = Utf8               defaultValue\n+   #498 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;TE;)TE;\n+   #499 = Utf8               optBoolean\n+   #500 = Utf8               (Ljava/lang/String;Z)Z\n+   #501 = Utf8               Z\n+   #502 = Utf8               optBigDecimal\n+   #503 = Utf8               (Ljava/lang/String;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #504 = Utf8               objectToBigDecimal\n+   #505 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #506 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n+   #507 = Utf8               exact\n+   #508 = Utf8               optBigInteger\n+   #509 = Utf8               (Ljava/lang/String;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #510 = Utf8               objectToBigInteger\n+   #511 = Utf8               (Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #512 = Utf8               valStr\n+   #513 = Utf8               optDouble\n+   #514 = Utf8               (Ljava/lang/String;D)D\n+   #515 = Utf8               optFloat\n+   #516 = Utf8               (Ljava/lang/String;F)F\n+   #517 = Utf8               F\n+   #518 = Utf8               floatValue\n+   #519 = Utf8               optInt\n+   #520 = Utf8               (Ljava/lang/String;I)I\n+   #521 = Utf8               optJSONArray\n+   #522 = Utf8               o\n+   #523 = Utf8               optJSONObject\n+   #524 = Utf8               (Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n+   #525 = Utf8               optLong\n+   #526 = Utf8               (Ljava/lang/String;J)J\n+   #527 = Utf8               J\n+   #528 = Utf8               optNumber\n+   #529 = Utf8               (Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n+   #530 = Utf8               optString\n+   #531 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+   #532 = Utf8               populateMap\n+   #533 = Utf8               result\n+   #534 = Utf8               modifiers\n+   #535 = Utf8               method\n+   #536 = Utf8               Ljava/lang/reflect/Method;\n+   #537 = Utf8               includeSuperClass\n+   #538 = Utf8               methods\n+   #539 = Utf8               [Ljava/lang/reflect/Method;\n+   #540 = Class              #539         // \"[Ljava/lang/reflect/Method;\"\n+   #541 = Class              #979         // java/util/Set\n+   #542 = Class              #980         // java/lang/reflect/Method\n+   #543 = Utf8               isValidMethodName\n+   #544 = Utf8               getKeyNameFromMethod\n+   #545 = Utf8               (Ljava/lang/reflect/Method;)Ljava/lang/String;\n+   #546 = Utf8               forcedNameDepth\n+   #547 = Utf8               ignoreDepth\n+   #548 = Utf8               annotation\n+   #549 = Utf8               Lorg/json/JSONPropertyName;\n+   #550 = Utf8               getAnnotation\n+   #551 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+   #552 = Utf8               im\n+   #553 = Utf8               ex\n+   #554 = Utf8               Ljava/lang/SecurityException;\n+   #555 = Utf8               Ljava/lang/NoSuchMethodException;\n+   #556 = Utf8               annotationClass\n+   #557 = Utf8               Ljava/lang/Class<TA;>;\n+   #558 = Class              #981         // \"[Ljava/lang/Class;\"\n+   #559 = Utf8               <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/reflect/Method;Ljava/lang/Class<TA;>;)TA;\n+   #560 = Utf8               getAnnotationDepth\n+   #561 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n+   #562 = Utf8               Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;\n+   #563 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)I\n+   #564 = Utf8               put\n+   #565 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n+   #566 = Utf8               (Ljava/lang/String;Ljava/util/Collection;)Lorg/json/JSONObject;\n+   #567 = Utf8               Ljava/util/Collection;\n+   #568 = Utf8               Ljava/util/Collection<*>;\n+   #569 = Utf8               (Ljava/lang/String;Ljava/util/Collection<*>;)Lorg/json/JSONObject;\n+   #570 = Utf8               (Ljava/lang/String;D)Lorg/json/JSONObject;\n+   #571 = Utf8               (Ljava/lang/String;F)Lorg/json/JSONObject;\n+   #572 = Utf8               (Ljava/lang/String;I)Lorg/json/JSONObject;\n+   #573 = Utf8               (Ljava/lang/String;J)Lorg/json/JSONObject;\n+   #574 = Utf8               (Ljava/lang/String;Ljava/util/Map;)Lorg/json/JSONObject;\n+   #575 = Utf8               (Ljava/lang/String;Ljava/util/Map<**>;)Lorg/json/JSONObject;\n+   #576 = Utf8               putOnce\n+   #577 = Utf8               putOpt\n+   #578 = Utf8               query\n+   #579 = Utf8               jsonPointer\n+   #580 = Utf8               (Lorg/json/JSONPointer;)Ljava/lang/Object;\n+   #581 = Utf8               Lorg/json/JSONPointer;\n+   #582 = Utf8               optQuery\n+   #583 = Utf8               Lorg/json/JSONPointerException;\n+   #584 = Utf8               quote\n+   #585 = Utf8               ignored\n+   #586 = Utf8               Ljava/io/IOException;\n+   #587 = Utf8               sw\n+   #588 = Utf8               Ljava/io/StringWriter;\n+   #589 = Utf8               (Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n+   #590 = Utf8               hhhh\n+   #591 = Utf8               b\n+   #592 = Utf8               w\n+   #593 = Utf8               Ljava/io/Writer;\n+   #594 = Utf8               len\n+   #595 = Class              #982         // java/io/Writer\n+   #596 = Utf8               remove\n+   #597 = Utf8               similar\n+   #598 = Utf8               (Ljava/lang/Object;)Z\n+   #599 = Utf8               valueThis\n+   #600 = Utf8               valueOther\n+   #601 = Utf8               entry\n+   #602 = Utf8               exception\n+   #603 = Utf8               Ljava/lang/Throwable;\n+   #604 = Utf8               other\n+   #605 = Utf8               Ljava/util/Map$Entry<Ljava/lang/String;*>;\n+   #606 = Utf8               isNumberSimilar\n+   #607 = Utf8               (Ljava/lang/Number;Ljava/lang/Number;)Z\n+   #608 = Utf8               compareTo\n+   #609 = Utf8               l\n+   #610 = Utf8               r\n+   #611 = Utf8               lBigDecimal\n+   #612 = Utf8               rBigDecimal\n+   #613 = Utf8               numberIsFinite\n+   #614 = Utf8               (Ljava/lang/Number;)Z\n+   #615 = Utf8               n\n+   #616 = Utf8               isDecimalNotation\n+   #617 = Utf8               stringToNumber\n+   #618 = Utf8               bd\n+   #619 = Utf8               Ljava/lang/Double;\n+   #620 = Utf8               ignore\n+   #621 = Utf8               Ljava/lang/NumberFormatException;\n+   #622 = Utf8               retryAsDouble\n+   #623 = Utf8               at1\n+   #624 = Utf8               at2\n+   #625 = Utf8               bi\n+   #626 = Utf8               initial\n+   #627 = Utf8               stringToValue\n+   #628 = Utf8               testValidity\n+   #629 = Utf8               toJSONArray\n+   #630 = Utf8               (Lorg/json/JSONArray;)Lorg/json/JSONArray;\n+   #631 = Utf8               Lorg/json/JSONArray;\n+   #632 = Utf8               ja\n+   #633 = Utf8               toString\n+   #634 = Utf8               ()Ljava/lang/String;\n+   #635 = Utf8               (I)Ljava/lang/String;\n+   #636 = Utf8               indentFactor\n+   #637 = Utf8               valueToString\n+   #638 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n+   #639 = Utf8               wrap\n+   #640 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+   #641 = Utf8               (Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n+   #642 = Utf8               coll\n+   #643 = Utf8               objectPackage\n+   #644 = Utf8               Ljava/lang/Package;\n+   #645 = Utf8               objectPackageName\n+   #646 = Utf8               Lorg/json/JSONException;\n+   #647 = Class              #983         // java/lang/Package\n+   #648 = Utf8               (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)Ljava/lang/Object;\n+   #649 = Utf8               write\n+   #650 = Utf8               (Ljava/io/Writer;)Ljava/io/Writer;\n+   #651 = Utf8               writer\n+   #652 = Utf8               writeValue\n+   #653 = Utf8               (Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+   #654 = Utf8               numberAsString\n+   #655 = Utf8               indent\n+   #656 = Utf8               (Ljava/io/Writer;I)V\n+   #657 = Utf8               (Ljava/io/Writer;II)Ljava/io/Writer;\n+   #658 = Utf8               newIndent\n+   #659 = Utf8               needsComma\n+   #660 = Utf8               toMap\n+   #661 = Utf8               ()Ljava/util/Map;\n+   #662 = Utf8               results\n+   #663 = Utf8               Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;\n+   #664 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n+   #665 = Utf8               wrongValueFormatException\n+   #666 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+   #667 = Utf8               valueType\n+   #668 = Utf8               cause\n+   #669 = Utf8               recursivelyDefinedObjectException\n+   #670 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n+   #671 = Utf8               <clinit>\n+   #672 = Utf8               SourceFile\n+   #673 = Utf8               JSONObject.java\n+   #674 = NameAndType        #343:#344    // map:Ljava/util/Map;\n+   #675 = NameAndType        #865:#350    // getClass:()Ljava/lang/Class;\n+   #676 = NameAndType        #357:#358    // \"<init>\":()V\n+   #677 = Utf8               java/util/HashMap\n+   #678 = NameAndType        #357:#418    // \"<init>\":(I)V\n+   #679 = NameAndType        #491:#429    // opt:(Ljava/lang/String;)Ljava/lang/Object;\n+   #680 = NameAndType        #576:#421    // putOnce:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #681 = Utf8               java/lang/Exception\n+   #682 = NameAndType        #984:#985    // nextClean:()C\n+   #683 = Utf8               A JSONObject text must begin with \\'{\\'\n+   #684 = NameAndType        #986:#670    // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+   #685 = NameAndType        #987:#985    // getPrevious:()C\n+   #686 = Utf8               A JSONObject text must end with \\'}\\'\n+   #687 = Utf8               A JSON Object can not directly nest another JSON Object or JSON Array.\n+   #688 = NameAndType        #988:#358    // back:()V\n+   #689 = NameAndType        #989:#990    // nextValue:()Ljava/lang/Object;\n+   #690 = NameAndType        #633:#634    // toString:()Ljava/lang/String;\n+   #691 = Utf8               Expected a \\':\\' after a key\n+   #692 = Utf8               java/lang/StringBuilder\n+   #693 = Utf8               Duplicate key \\\"\n+   #694 = NameAndType        #422:#991    // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #695 = Utf8               \\\"\n+   #696 = NameAndType        #564:#421    // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #697 = Utf8               Expected a \\',\\' or \\'}\\'\n+   #698 = NameAndType        #992:#482    // size:()I\n+   #699 = NameAndType        #480:#478    // entrySet:()Ljava/util/Set;\n+   #700 = NameAndType        #993:#475    // iterator:()Ljava/util/Iterator;\n+   #701 = NameAndType        #994:#485    // hasNext:()Z\n+   #702 = NameAndType        #995:#990    // next:()Ljava/lang/Object;\n+   #703 = Utf8               java/util/Map$Entry\n+   #704 = NameAndType        #996:#990    // getKey:()Ljava/lang/Object;\n+   #705 = Utf8               java/lang/NullPointerException\n+   #706 = Utf8               Null key.\n+   #707 = NameAndType        #357:#399    // \"<init>\":(Ljava/lang/String;)V\n+   #708 = NameAndType        #997:#990    // getValue:()Ljava/lang/Object;\n+   #709 = NameAndType        #998:#638    // valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n+   #710 = NameAndType        #639:#640    // wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #711 = NameAndType        #564:#999    // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #712 = NameAndType        #532:#386    // populateMap:(Ljava/lang/Object;)V\n+   #713 = NameAndType        #532:#388    // populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n+   #714 = NameAndType        #1000:#1001  // getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n+   #715 = Class              #1002        // java/lang/reflect/Field\n+   #716 = NameAndType        #428:#640    // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #717 = NameAndType        #577:#421    // putOpt:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #718 = Utf8               org/json/JSONTokener\n+   #719 = NameAndType        #357:#366    // \"<init>\":(Lorg/json/JSONTokener;)V\n+   #720 = Class              #1003        // java/lang/Thread\n+   #721 = NameAndType        #1004:#1005  // currentThread:()Ljava/lang/Thread;\n+   #722 = NameAndType        #1006:#1007  // getContextClassLoader:()Ljava/lang/ClassLoader;\n+   #723 = NameAndType        #1008:#1009  // getBundle:(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n+   #724 = NameAndType        #1010:#1011  // getKeys:()Ljava/util/Enumeration;\n+   #725 = NameAndType        #1012:#485   // hasMoreElements:()Z\n+   #726 = NameAndType        #1013:#990   // nextElement:()Ljava/lang/Object;\n+   #727 = Utf8               java/lang/String\n+   #728 = Utf8               \\\\.\n+   #729 = NameAndType        #1014:#1015  // split:(Ljava/lang/String;)[Ljava/lang/String;\n+   #730 = NameAndType        #523:#459    // optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;\n+   #731 = Utf8               org/json/JSONObject\n+   #732 = NameAndType        #470:#471    // getString:(Ljava/lang/String;)Ljava/lang/String;\n+   #733 = NameAndType        #628:#386    // testValidity:(Ljava/lang/Object;)V\n+   #734 = Utf8               org/json/JSONArray\n+   #735 = NameAndType        #564:#1016   // put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n+   #736 = Utf8               JSONArray\n+   #737 = NameAndType        #665:#666    // wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+   #738 = NameAndType        #1017:#1018  // isInfinite:(D)Z\n+   #739 = NameAndType        #1019:#1018  // isNaN:(D)Z\n+   #740 = Utf8               null\n+   #741 = NameAndType        #633:#424    // toString:(D)Ljava/lang/String;\n+   #742 = NameAndType        #1020:#1021  // indexOf:(I)I\n+   #743 = Utf8               0\n+   #744 = NameAndType        #1022:#439   // endsWith:(Ljava/lang/String;)Z\n+   #745 = NameAndType        #468:#482    // length:()I\n+   #746 = NameAndType        #1023:#1024  // substring:(II)Ljava/lang/String;\n+   #747 = Utf8               .\n+   #748 = Utf8               org/json/JSONException\n+   #749 = Utf8               JSONObject[\n+   #750 = NameAndType        #584:#471    // quote:(Ljava/lang/String;)Ljava/lang/String;\n+   #751 = Utf8               ] not found.\n+   #752 = NameAndType        #492:#431    // optEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+   #753 = Utf8               enum of type\n+   #754 = NameAndType        #1025:#634   // getSimpleName:()Ljava/lang/String;\n+   #755 = NameAndType        #428:#429    // get:(Ljava/lang/String;)Ljava/lang/Object;\n+   #756 = NameAndType        #1026:#1027  // FALSE:Ljava/lang/Boolean;\n+   #757 = NameAndType        #1028:#598   // equals:(Ljava/lang/Object;)Z\n+   #758 = Utf8               false\n+   #759 = NameAndType        #1029:#439   // equalsIgnoreCase:(Ljava/lang/String;)Z\n+   #760 = NameAndType        #1030:#1027  // TRUE:Ljava/lang/Boolean;\n+   #761 = Utf8               true\n+   #762 = Utf8               Boolean\n+   #763 = NameAndType        #510:#511    // objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #764 = Utf8               BigInteger\n+   #765 = NameAndType        #504:#505    // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #766 = Utf8               BigDecimal\n+   #767 = Utf8               java/lang/Number\n+   #768 = NameAndType        #1031:#1032  // doubleValue:()D\n+   #769 = NameAndType        #1033:#448   // parseDouble:(Ljava/lang/String;)D\n+   #770 = Utf8               double\n+   #771 = NameAndType        #518:#1034   // floatValue:()F\n+   #772 = NameAndType        #1035:#451   // parseFloat:(Ljava/lang/String;)F\n+   #773 = Utf8               float\n+   #774 = NameAndType        #617:#453    // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+   #775 = NameAndType        #1036:#482   // intValue:()I\n+   #776 = NameAndType        #1037:#455   // parseInt:(Ljava/lang/String;)I\n+   #777 = Utf8               int\n+   #778 = Utf8               JSONObject\n+   #779 = NameAndType        #1038:#1039  // longValue:()J\n+   #780 = NameAndType        #1040:#461   // parseLong:(Ljava/lang/String;)J\n+   #781 = Utf8               long\n+   #782 = NameAndType        #484:#485    // isEmpty:()Z\n+   #783 = NameAndType        #477:#478    // keySet:()Ljava/util/Set;\n+   #784 = NameAndType        #1041:#1042  // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #785 = NameAndType        #1043:#1044  // getFields:()[Ljava/lang/reflect/Field;\n+   #786 = NameAndType        #1045:#634   // getName:()Ljava/lang/String;\n+   #787 = NameAndType        #1046:#598   // containsKey:(Ljava/lang/Object;)Z\n+   #788 = NameAndType        #564:#572    // put:(Ljava/lang/String;I)Lorg/json/JSONObject;\n+   #789 = Utf8               java/lang/Integer\n+   #790 = Utf8               java/lang/Long\n+   #791 = NameAndType        #564:#573    // put:(Ljava/lang/String;J)Lorg/json/JSONObject;\n+   #792 = Utf8               java/math/BigInteger\n+   #793 = NameAndType        #1047:#443   // ONE:Ljava/math/BigInteger;\n+   #794 = NameAndType        #1048:#1049  // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #795 = Utf8               java/lang/Float\n+   #796 = NameAndType        #564:#571    // put:(Ljava/lang/String;F)Lorg/json/JSONObject;\n+   #797 = Utf8               java/lang/Double\n+   #798 = NameAndType        #564:#570    // put:(Ljava/lang/String;D)Lorg/json/JSONObject;\n+   #799 = Utf8               java/math/BigDecimal\n+   #800 = NameAndType        #1047:#446   // ONE:Ljava/math/BigDecimal;\n+   #801 = NameAndType        #1048:#1050  // add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #802 = Utf8               Unable to increment [\n+   #803 = Utf8               ].\n+   #804 = NameAndType        #347:#348    // NULL:Ljava/lang/Object;\n+   #805 = NameAndType        #483:#358    // clear:()V\n+   #806 = NameAndType        #357:#1051   // \"<init>\":(Ljava/util/Collection;)V\n+   #807 = Utf8               Null pointer\n+   #808 = NameAndType        #492:#493    // optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n+   #809 = NameAndType        #1052:#1053  // isAssignableFrom:(Ljava/lang/Class;)Z\n+   #810 = Utf8               java/lang/Enum\n+   #811 = NameAndType        #998:#431    // valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+   #812 = Utf8               java/lang/IllegalArgumentException\n+   #813 = NameAndType        #499:#500    // optBoolean:(Ljava/lang/String;Z)Z\n+   #814 = Utf8               java/lang/Boolean\n+   #815 = NameAndType        #1054:#485   // booleanValue:()Z\n+   #816 = NameAndType        #438:#439    // getBoolean:(Ljava/lang/String;)Z\n+   #817 = NameAndType        #504:#506    // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n+   #818 = NameAndType        #357:#1055   // \"<init>\":(Ljava/math/BigInteger;)V\n+   #819 = NameAndType        #613:#614    // numberIsFinite:(Ljava/lang/Number;)Z\n+   #820 = NameAndType        #357:#1056   // \"<init>\":(D)V\n+   #821 = Utf8               java/lang/Short\n+   #822 = Utf8               java/lang/Byte\n+   #823 = NameAndType        #357:#1057   // \"<init>\":(J)V\n+   #824 = NameAndType        #1058:#1059  // toBigInteger:()Ljava/math/BigInteger;\n+   #825 = NameAndType        #998:#1060   // valueOf:(J)Ljava/math/BigInteger;\n+   #826 = NameAndType        #616:#439    // isDecimalNotation:(Ljava/lang/String;)Z\n+   #827 = NameAndType        #513:#514    // optDouble:(Ljava/lang/String;D)D\n+   #828 = NameAndType        #528:#453    // optNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+   #829 = NameAndType        #515:#516    // optFloat:(Ljava/lang/String;F)F\n+   #830 = NameAndType        #519:#520    // optInt:(Ljava/lang/String;I)I\n+   #831 = NameAndType        #528:#529    // optNumber:(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n+   #832 = NameAndType        #523:#524    // optJSONObject:(Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n+   #833 = NameAndType        #525:#526    // optLong:(Ljava/lang/String;J)J\n+   #834 = Utf8\n+   #835 = NameAndType        #530:#531    // optString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+   #836 = Utf8               java/util/IdentityHashMap\n+   #837 = Class              #1061        // java/util/Collections\n+   #838 = NameAndType        #1062:#1063  // newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;\n+   #839 = NameAndType        #1064:#1007  // getClassLoader:()Ljava/lang/ClassLoader;\n+   #840 = NameAndType        #1065:#1066  // getMethods:()[Ljava/lang/reflect/Method;\n+   #841 = NameAndType        #1067:#1066  // getDeclaredMethods:()[Ljava/lang/reflect/Method;\n+   #842 = NameAndType        #1068:#482   // getModifiers:()I\n+   #843 = Class              #1069        // java/lang/reflect/Modifier\n+   #844 = NameAndType        #1070:#1071  // isPublic:(I)Z\n+   #845 = NameAndType        #1072:#1071  // isStatic:(I)Z\n+   #846 = NameAndType        #1073:#1074  // getParameterTypes:()[Ljava/lang/Class;\n+   #847 = NameAndType        #1075:#485   // isBridge:()Z\n+   #848 = NameAndType        #1076:#350   // getReturnType:()Ljava/lang/Class;\n+   #849 = Class              #1077        // java/lang/Void\n+   #850 = NameAndType        #1078:#396   // TYPE:Ljava/lang/Class;\n+   #851 = NameAndType        #543:#439    // isValidMethodName:(Ljava/lang/String;)Z\n+   #852 = NameAndType        #544:#545    // getKeyNameFromMethod:(Ljava/lang/reflect/Method;)Ljava/lang/String;\n+   #853 = Utf8               java/lang/Object\n+   #854 = NameAndType        #1079:#1080  // invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+   #855 = NameAndType        #1081:#598   // contains:(Ljava/lang/Object;)Z\n+   #856 = NameAndType        #669:#670    // recursivelyDefinedObjectException:(Ljava/lang/String;)Lorg/json/JSONException;\n+   #857 = NameAndType        #1048:#598   // add:(Ljava/lang/Object;)Z\n+   #858 = NameAndType        #639:#641    // wrap:(Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n+   #859 = NameAndType        #596:#598    // remove:(Ljava/lang/Object;)Z\n+   #860 = Utf8               java/io/Closeable\n+   #861 = NameAndType        #1082:#358   // close:()V\n+   #862 = Utf8               java/io/IOException\n+   #863 = Utf8               java/lang/IllegalAccessException\n+   #864 = Utf8               java/lang/reflect/InvocationTargetException\n+   #865 = Utf8               getClass\n+   #866 = Utf8               getDeclaringClass\n+   #867 = Utf8               org/json/JSONPropertyIgnore\n+   #868 = NameAndType        #560:#561    // getAnnotationDepth:(Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n+   #869 = Utf8               org/json/JSONPropertyName\n+   #870 = NameAndType        #550:#551    // getAnnotation:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+   #871 = NameAndType        #367:#634    // value:()Ljava/lang/String;\n+   #872 = NameAndType        #1083:#439   // startsWith:(Ljava/lang/String;)Z\n+   #873 = NameAndType        #1023:#635   // substring:(I)Ljava/lang/String;\n+   #874 = Utf8               is\n+   #875 = NameAndType        #1084:#1085  // charAt:(I)C\n+   #876 = NameAndType        #1086:#1087  // isLowerCase:(C)Z\n+   #877 = NameAndType        #1088:#409   // ROOT:Ljava/util/Locale;\n+   #878 = NameAndType        #1089:#1090  // toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n+   #879 = NameAndType        #1091:#1087  // isUpperCase:(C)Z\n+   #880 = NameAndType        #1092:#1053  // isAnnotationPresent:(Ljava/lang/Class;)Z\n+   #881 = NameAndType        #550:#1093   // getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+   #882 = NameAndType        #866:#350    // getDeclaringClass:()Ljava/lang/Class;\n+   #883 = NameAndType        #1094:#350   // getSuperclass:()Ljava/lang/Class;\n+   #884 = NameAndType        #1095:#1074  // getInterfaces:()[Ljava/lang/Class;\n+   #885 = NameAndType        #1096:#1097  // getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+   #886 = Utf8               java/lang/SecurityException\n+   #887 = Utf8               java/lang/NoSuchMethodException\n+   #888 = NameAndType        #998:#1098   // valueOf:(D)Ljava/lang/Double;\n+   #889 = NameAndType        #998:#1099   // valueOf:(F)Ljava/lang/Float;\n+   #890 = NameAndType        #998:#1100   // valueOf:(I)Ljava/lang/Integer;\n+   #891 = NameAndType        #998:#1101   // valueOf:(J)Ljava/lang/Long;\n+   #892 = NameAndType        #357:#376    // \"<init>\":(Ljava/util/Map;)V\n+   #893 = NameAndType        #596:#429    // remove:(Ljava/lang/String;)Ljava/lang/Object;\n+   #894 = Utf8               org/json/JSONPointer\n+   #895 = NameAndType        #578:#580    // query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+   #896 = NameAndType        #1102:#640   // queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #897 = NameAndType        #582:#580    // optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+   #898 = Utf8               org/json/JSONPointerException\n+   #899 = Utf8               java/io/StringWriter\n+   #900 = NameAndType        #1103:#1104  // getBuffer:()Ljava/lang/StringBuffer;\n+   #901 = NameAndType        #584:#589    // quote:(Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n+   #902 = Utf8               \\\"\\\"\n+   #903 = NameAndType        #649:#399    // write:(Ljava/lang/String;)V\n+   #904 = NameAndType        #649:#418    // write:(I)V\n+   #905 = Utf8               \\\\b\n+   #906 = Utf8               \\\\t\n+   #907 = Utf8               \\\\n\n+   #908 = Utf8               \\\\f\n+   #909 = Utf8               \\\\r\n+   #910 = Utf8               \\\\u\n+   #911 = NameAndType        #1105:#635   // toHexString:(I)Ljava/lang/String;\n+   #912 = Utf8               0000\n+   #913 = NameAndType        #649:#1106   // write:(Ljava/lang/String;II)V\n+   #914 = NameAndType        #596:#640    // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #915 = NameAndType        #597:#598    // similar:(Ljava/lang/Object;)Z\n+   #916 = NameAndType        #606:#607    // isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n+   #917 = Utf8               org/json/JSONString\n+   #918 = NameAndType        #1107:#634   // toJSONString:()Ljava/lang/String;\n+   #919 = Utf8               java/lang/Throwable\n+   #920 = Utf8               java/lang/Comparable\n+   #921 = NameAndType        #608:#1108   // compareTo:(Ljava/lang/Object;)I\n+   #922 = NameAndType        #608:#1109   // compareTo:(Ljava/math/BigDecimal;)I\n+   #923 = NameAndType        #1017:#485   // isInfinite:()Z\n+   #924 = NameAndType        #1019:#485   // isNaN:()Z\n+   #925 = Utf8               -0\n+   #926 = NameAndType        #1110:#446   // ZERO:Ljava/math/BigDecimal;\n+   #927 = Utf8               java/lang/NumberFormatException\n+   #928 = NameAndType        #998:#1111   // valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n+   #929 = Utf8               val [\n+   #930 = Utf8               ] is not a valid number.\n+   #931 = NameAndType        #1112:#482   // bitLength:()I\n+   #932 = Utf8               JSON does not allow non-finite numbers.\n+   #933 = NameAndType        #470:#635    // getString:(I)Ljava/lang/String;\n+   #934 = NameAndType        #633:#635    // toString:(I)Ljava/lang/String;\n+   #935 = NameAndType        #649:#657    // write:(Ljava/io/Writer;II)Ljava/io/Writer;\n+   #936 = Class              #1113        // org/json/JSONWriter\n+   #937 = NameAndType        #637:#638    // valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n+   #938 = Utf8               java/lang/Character\n+   #939 = Utf8               java/util/Collection\n+   #940 = NameAndType        #1114:#485   // isArray:()Z\n+   #941 = NameAndType        #357:#386    // \"<init>\":(Ljava/lang/Object;)V\n+   #942 = Utf8               java/util/Map\n+   #943 = NameAndType        #1115:#1116  // getPackage:()Ljava/lang/Package;\n+   #944 = Utf8               java.\n+   #945 = Utf8               javax.\n+   #946 = NameAndType        #357:#388    // \"<init>\":(Ljava/lang/Object;Ljava/util/Set;)V\n+   #947 = NameAndType        #357:#1117   // \"<init>\":(Ljava/lang/Throwable;)V\n+   #948 = NameAndType        #487:#488    // numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n+   #949 = NameAndType        #341:#342    // NUMBER_PATTERN:Ljava/util/regex/Pattern;\n+   #950 = Class              #1118        // java/util/regex/Pattern\n+   #951 = NameAndType        #1119:#1120  // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+   #952 = Class              #1121        // java/util/regex/Matcher\n+   #953 = NameAndType        #1122:#485   // matches:()Z\n+   #954 = NameAndType        #394:#634    // name:()Ljava/lang/String;\n+   #955 = NameAndType        #652:#653    // writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+   #956 = Utf8               Unable to write JSONObject value for key:\n+   #957 = NameAndType        #357:#1123   // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #958 = NameAndType        #655:#656    // indent:(Ljava/io/Writer;I)V\n+   #959 = NameAndType        #660:#661    // toMap:()Ljava/util/Map;\n+   #960 = NameAndType        #1124:#1125  // toList:()Ljava/util/List;\n+   #961 = Utf8               ] is not a\n+   #962 = Utf8                (null).\n+   #963 = Utf8               java/lang/Iterable\n+   #964 = Utf8                (\n+   #965 = NameAndType        #422:#1126   // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #966 = Utf8               ).\n+   #967 = Utf8                :\n+   #968 = Utf8               JavaBean object contains recursively defined member variable of key\n+   #969 = Utf8               -?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\n+   #970 = NameAndType        #1127:#1128  // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+   #971 = Utf8               org/json/JSONObject$Null\n+   #972 = NameAndType        #357:#1129   // \"<init>\":(Lorg/json/JSONObject$1;)V\n+   #973 = Utf8               org/json/JSONObject$1\n+   #974 = Utf8               java/util/Iterator\n+   #975 = Utf8               java/lang/Class\n+   #976 = Utf8               java/util/Locale\n+   #977 = Utf8               java/util/ResourceBundle\n+   #978 = Utf8               java/util/Enumeration\n+   #979 = Utf8               java/util/Set\n+   #980 = Utf8               java/lang/reflect/Method\n+   #981 = Utf8               [Ljava/lang/Class;\n+   #982 = Utf8               java/io/Writer\n+   #983 = Utf8               java/lang/Package\n+   #984 = Utf8               nextClean\n+   #985 = Utf8               ()C\n+   #986 = Utf8               syntaxError\n+   #987 = Utf8               getPrevious\n+   #988 = Utf8               back\n+   #989 = Utf8               nextValue\n+   #990 = Utf8               ()Ljava/lang/Object;\n+   #991 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #992 = Utf8               size\n+   #993 = Utf8               iterator\n+   #994 = Utf8               hasNext\n+   #995 = Utf8               next\n+   #996 = Utf8               getKey\n+   #997 = Utf8               getValue\n+   #998 = Utf8               valueOf\n+   #999 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #1000 = Utf8               getField\n+  #1001 = Utf8               (Ljava/lang/String;)Ljava/lang/reflect/Field;\n+  #1002 = Utf8               java/lang/reflect/Field\n+  #1003 = Utf8               java/lang/Thread\n+  #1004 = Utf8               currentThread\n+  #1005 = Utf8               ()Ljava/lang/Thread;\n+  #1006 = Utf8               getContextClassLoader\n+  #1007 = Utf8               ()Ljava/lang/ClassLoader;\n+  #1008 = Utf8               getBundle\n+  #1009 = Utf8               (Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n+  #1010 = Utf8               getKeys\n+  #1011 = Utf8               ()Ljava/util/Enumeration;\n+  #1012 = Utf8               hasMoreElements\n+  #1013 = Utf8               nextElement\n+  #1014 = Utf8               split\n+  #1015 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n+  #1016 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONArray;\n+  #1017 = Utf8               isInfinite\n+  #1018 = Utf8               (D)Z\n+  #1019 = Utf8               isNaN\n+  #1020 = Utf8               indexOf\n+  #1021 = Utf8               (I)I\n+  #1022 = Utf8               endsWith\n+  #1023 = Utf8               substring\n+  #1024 = Utf8               (II)Ljava/lang/String;\n+  #1025 = Utf8               getSimpleName\n+  #1026 = Utf8               FALSE\n+  #1027 = Utf8               Ljava/lang/Boolean;\n+  #1028 = Utf8               equals\n+  #1029 = Utf8               equalsIgnoreCase\n+  #1030 = Utf8               TRUE\n+  #1031 = Utf8               doubleValue\n+  #1032 = Utf8               ()D\n+  #1033 = Utf8               parseDouble\n+  #1034 = Utf8               ()F\n+  #1035 = Utf8               parseFloat\n+  #1036 = Utf8               intValue\n+  #1037 = Utf8               parseInt\n+  #1038 = Utf8               longValue\n+  #1039 = Utf8               ()J\n+  #1040 = Utf8               parseLong\n+  #1041 = Utf8               toArray\n+  #1042 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #1043 = Utf8               getFields\n+  #1044 = Utf8               ()[Ljava/lang/reflect/Field;\n+  #1045 = Utf8               getName\n+  #1046 = Utf8               containsKey\n+  #1047 = Utf8               ONE\n+  #1048 = Utf8               add\n+  #1049 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #1050 = Utf8               (Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #1051 = Utf8               (Ljava/util/Collection;)V\n+  #1052 = Utf8               isAssignableFrom\n+  #1053 = Utf8               (Ljava/lang/Class;)Z\n+  #1054 = Utf8               booleanValue\n+  #1055 = Utf8               (Ljava/math/BigInteger;)V\n+  #1056 = Utf8               (D)V\n+  #1057 = Utf8               (J)V\n+  #1058 = Utf8               toBigInteger\n+  #1059 = Utf8               ()Ljava/math/BigInteger;\n+  #1060 = Utf8               (J)Ljava/math/BigInteger;\n+  #1061 = Utf8               java/util/Collections\n+  #1062 = Utf8               newSetFromMap\n+  #1063 = Utf8               (Ljava/util/Map;)Ljava/util/Set;\n+  #1064 = Utf8               getClassLoader\n+  #1065 = Utf8               getMethods\n+  #1066 = Utf8               ()[Ljava/lang/reflect/Method;\n+  #1067 = Utf8               getDeclaredMethods\n+  #1068 = Utf8               getModifiers\n+  #1069 = Utf8               java/lang/reflect/Modifier\n+  #1070 = Utf8               isPublic\n+  #1071 = Utf8               (I)Z\n+  #1072 = Utf8               isStatic\n+  #1073 = Utf8               getParameterTypes\n+  #1074 = Utf8               ()[Ljava/lang/Class;\n+  #1075 = Utf8               isBridge\n+  #1076 = Utf8               getReturnType\n+  #1077 = Utf8               java/lang/Void\n+  #1078 = Utf8               TYPE\n+  #1079 = Utf8               invoke\n+  #1080 = Utf8               (Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+  #1081 = Utf8               contains\n+  #1082 = Utf8               close\n+  #1083 = Utf8               startsWith\n+  #1084 = Utf8               charAt\n+  #1085 = Utf8               (I)C\n+  #1086 = Utf8               isLowerCase\n+  #1087 = Utf8               (C)Z\n+  #1088 = Utf8               ROOT\n+  #1089 = Utf8               toLowerCase\n+  #1090 = Utf8               (Ljava/util/Locale;)Ljava/lang/String;\n+  #1091 = Utf8               isUpperCase\n+  #1092 = Utf8               isAnnotationPresent\n+  #1093 = Utf8               (Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+  #1094 = Utf8               getSuperclass\n+  #1095 = Utf8               getInterfaces\n+  #1096 = Utf8               getMethod\n+  #1097 = Utf8               (Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+  #1098 = Utf8               (D)Ljava/lang/Double;\n+  #1099 = Utf8               (F)Ljava/lang/Float;\n+  #1100 = Utf8               (I)Ljava/lang/Integer;\n+  #1101 = Utf8               (J)Ljava/lang/Long;\n+  #1102 = Utf8               queryFrom\n+  #1103 = Utf8               getBuffer\n+  #1104 = Utf8               ()Ljava/lang/StringBuffer;\n+  #1105 = Utf8               toHexString\n+  #1106 = Utf8               (Ljava/lang/String;II)V\n+  #1107 = Utf8               toJSONString\n+  #1108 = Utf8               (Ljava/lang/Object;)I\n+  #1109 = Utf8               (Ljava/math/BigDecimal;)I\n+  #1110 = Utf8               ZERO\n+  #1111 = Utf8               (Ljava/lang/String;)Ljava/lang/Double;\n+  #1112 = Utf8               bitLength\n+  #1113 = Utf8               org/json/JSONWriter\n+  #1114 = Utf8               isArray\n+  #1115 = Utf8               getPackage\n+  #1116 = Utf8               ()Ljava/lang/Package;\n+  #1117 = Utf8               (Ljava/lang/Throwable;)V\n+  #1118 = Utf8               java/util/regex/Pattern\n+  #1119 = Utf8               matcher\n+  #1120 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #1121 = Utf8               java/util/regex/Matcher\n+  #1122 = Utf8               matches\n+  #1123 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #1124 = Utf8               toList\n+  #1125 = Utf8               ()Ljava/util/List;\n+  #1126 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #1127 = Utf8               compile\n+  #1128 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;\n+  #1129 = Utf8               (Lorg/json/JSONObject$1;)V\n {\n   static final java.util.regex.Pattern NUMBER_PATTERN;\n     descriptor: Ljava/util/regex/Pattern;\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n \n   private final java.util.Map<java.lang.String, java.lang.Object> map;\n     descriptor: Ljava/util/Map;\n@@ -1544,15 +1508,15 @@\n         frame_type = 252 /* append */\n           offset_delta = 37\n           locals = [ class java/util/Map$Entry ]\n         frame_type = 250 /* chop */\n           offset_delta = 36\n         frame_type = 250 /* chop */\n           offset_delta = 2\n-    Signature: #391                         // (Ljava/util/Map<**>;)V\n+    Signature: #385                         // (Ljava/util/Map<**>;)V\n \n   public org.json.JSONObject(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n@@ -1590,15 +1554,15 @@\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/json/JSONObject;\n             0      11     1  bean   Ljava/lang/Object;\n             0      11     2 objectsRecord   Ljava/util/Set;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      11     2 objectsRecord   Ljava/util/Set<Ljava/lang/Object;>;\n-    Signature: #398                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n+    Signature: #392                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n \n   public org.json.JSONObject(java.lang.Object, java.lang.String...);\n     descriptor: (Ljava/lang/Object;[Ljava/lang/String;)V\n     flags: (0x0081) ACC_PUBLIC, ACC_VARARGS\n     Code:\n       stack=4, locals=7, args_size=3\n          0: aload_0\n@@ -1904,15 +1868,16 @@\n         85: aload_0\n         86: areturn\n       LineNumberTable:\n         line 483: 0\n         line 484: 4\n         line 485: 10\n         line 486: 14\n-        line 487: 31\n+        line 487: 16\n+        line 488: 37\n         line 486: 38\n         line 489: 45\n         line 490: 52\n         line 492: 64\n         line 494: 85\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -2184,15 +2149,15 @@\n             7      42     3   val   TE;\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 47\n           locals = [ class java/lang/Enum ]\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #445                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n+    Signature: #437                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n \n   public boolean getBoolean(java.lang.String) throws org.json.JSONException;\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=2\n          0: aload_0\n@@ -3011,15 +2976,15 @@\n          4: invokeinterface #32,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;\n          9: areturn\n       LineNumberTable:\n         line 934: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/json/JSONObject;\n-    Signature: #486                         // ()Ljava/util/Iterator<Ljava/lang/String;>;\n+    Signature: #476                         // ()Ljava/util/Iterator<Ljava/lang/String;>;\n \n   public java.util.Set<java.lang.String> keySet();\n     descriptor: ()Ljava/util/Set;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -3027,15 +2992,15 @@\n          4: invokeinterface #146,  1          // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;\n          9: areturn\n       LineNumberTable:\n         line 946: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/json/JSONObject;\n-    Signature: #489                         // ()Ljava/util/Set<Ljava/lang/String;>;\n+    Signature: #479                         // ()Ljava/util/Set<Ljava/lang/String;>;\n \n   protected java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>> entrySet();\n     descriptor: ()Ljava/util/Set;\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -3043,15 +3008,15 @@\n          4: invokeinterface #31,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;\n          9: areturn\n       LineNumberTable:\n         line 962: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/json/JSONObject;\n-    Signature: #491                         // ()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;\n+    Signature: #481                         // ()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;\n \n   public int length();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -3247,15 +3212,15 @@\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/json/JSONObject;\n             0       8     1 clazz   Ljava/lang/Class;\n             0       8     2   key   Ljava/lang/String;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0       8     1 clazz   Ljava/lang/Class<TE;>;\n-    Signature: #445                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n+    Signature: #437                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n \n   public <E extends java.lang.Enum<E>> E optEnum(java.lang.Class<E>, java.lang.String, E);\n     descriptor: (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=6, args_size=4\n          0: aload_0\n@@ -3331,15 +3296,15 @@\n         frame_type = 21 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 9\n           locals = [ class org/json/JSONObject, class java/lang/Class, class java/lang/String, class java/lang/Enum ]\n           stack = [ class java/lang/IllegalArgumentException ]\n         frame_type = 67 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NullPointerException ]\n-    Signature: #510                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;TE;)TE;\n+    Signature: #498                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;TE;)TE;\n \n   public boolean optBoolean(java.lang.String);\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n@@ -4350,15 +4315,15 @@\n           stack = [ class java/lang/IllegalArgumentException ]\n         frame_type = 68 /* same_locals_1_stack_item */\n           stack = [ class java/lang/reflect/InvocationTargetException ]\n         frame_type = 248 /* chop */\n           offset_delta = 1\n         frame_type = 248 /* chop */\n           offset_delta = 5\n-    Signature: #398                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n+    Signature: #392                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n \n   private static boolean isValidMethodName(java.lang.String);\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: ldc           #214                // String getClass\n@@ -4689,15 +4654,15 @@\n           offset_delta = 4\n         frame_type = 248 /* chop */\n           offset_delta = 5\n         frame_type = 83 /* same_locals_1_stack_item */\n           stack = [ class java/lang/SecurityException ]\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NoSuchMethodException ]\n-    Signature: #579                         // <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/reflect/Method;Ljava/lang/Class<TA;>;)TA;\n+    Signature: #559                         // <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/reflect/Method;Ljava/lang/Class<TA;>;)TA;\n \n   private static int getAnnotationDepth(java.lang.reflect.Method, java.lang.Class<? extends java.lang.annotation.Annotation>);\n     descriptor: (Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=3, locals=9, args_size=2\n          0: aload_0\n@@ -4864,15 +4829,15 @@\n           locals = [ int ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 1\n           locals = [ class java/lang/reflect/Method, class java/lang/Class, class java/lang/Class ]\n           stack = [ class java/lang/SecurityException ]\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NoSuchMethodException ]\n-    Signature: #583                         // (Ljava/lang/reflect/Method;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)I\n+    Signature: #563                         // (Ljava/lang/reflect/Method;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)I\n \n   public org.json.JSONObject put(java.lang.String, boolean) throws org.json.JSONException;\n     descriptor: (Ljava/lang/String;Z)Lorg/json/JSONObject;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n@@ -4924,15 +4889,15 @@\n             0      14     1   key   Ljava/lang/String;\n             0      14     2 value   Ljava/util/Collection;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      14     2 value   Ljava/util/Collection<*>;\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #590                         // (Ljava/lang/String;Ljava/util/Collection<*>;)Lorg/json/JSONObject;\n+    Signature: #569                         // (Ljava/lang/String;Ljava/util/Collection<*>;)Lorg/json/JSONObject;\n \n   public org.json.JSONObject put(java.lang.String, double) throws org.json.JSONException;\n     descriptor: (Ljava/lang/String;D)Lorg/json/JSONObject;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=3\n          0: aload_0\n@@ -5035,15 +5000,15 @@\n             0      14     1   key   Ljava/lang/String;\n             0      14     2 value   Ljava/util/Map;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      14     2 value   Ljava/util/Map<**>;\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #596                         // (Ljava/lang/String;Ljava/util/Map<**>;)Lorg/json/JSONObject;\n+    Signature: #575                         // (Ljava/lang/String;Ljava/util/Map<**>;)Lorg/json/JSONObject;\n \n   public org.json.JSONObject put(java.lang.String, java.lang.Object) throws org.json.JSONException;\n     descriptor: (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_1\n@@ -6618,15 +6583,15 @@\n         line 2471: 152\n         line 2472: 162\n         line 2474: 171\n         line 2475: 178\n         line 2476: 183\n         line 2478: 192\n         line 2479: 200\n-        line 2480: 205\n+        line 2480: 204\n         line 2481: 214\n         line 2482: 228\n         line 2483: 235\n         line 2484: 244\n         line 2486: 249\n         line 2487: 253\n         line 2489: 263\n@@ -6669,15 +6634,15 @@\n         frame_type = 13 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 8\n           locals = [ class java/lang/Object, class java/util/Set ]\n           stack = [ class org/json/JSONException ]\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/lang/Exception ]\n-    Signature: #675                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)Ljava/lang/Object;\n+    Signature: #648                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)Ljava/lang/Object;\n \n   public java.io.Writer write(java.io.Writer) throws org.json.JSONException;\n     descriptor: (Ljava/io/Writer;)Ljava/io/Writer;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n@@ -7320,15 +7285,15 @@\n         frame_type = 28 /* same */\n         frame_type = 28 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 7\n           locals = [ class java/lang/Object ]\n         frame_type = 248 /* chop */\n           offset_delta = 17\n-    Signature: #691                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n+    Signature: #664                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n \n   private static org.json.JSONException wrongValueFormatException(java.lang.String, java.lang.String, java.lang.Object, java.lang.Throwable);\n     descriptor: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_2\n@@ -7483,8 +7448,8 @@\n         line 141: 0\n         line 158: 9\n }\n SourceFile: \"JSONObject.java\"\n InnerClasses:\n   static #338;                            // class org/json/JSONObject$1\n   private static final #340= #336 of #62; // Null=class org/json/JSONObject$Null of class org/json/JSONObject\n-  public static #382= #35 of #306;        // Entry=class java/util/Map$Entry of class java/util/Map\n+  public static #378= #35 of #306;        // Entry=class java/util/Map$Entry of class java/util/Map\n"}]}
