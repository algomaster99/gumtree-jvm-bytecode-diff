{"diffoscope-json-version": 1, "source1": "first/DeclarationOrderCheck.class", "source2": "second/DeclarationOrderCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -36,145 +36,142 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 8, 9, 5, 6, 10, 203 };\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         this.scopeStates = new ArrayDeque<DeclarationOrderCheck.ScopeState>();\n         this.classFieldNames = new HashSet<String>();\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final int parentType = ast.getParent().getType();\n-        switch (ast.getType()) {\n+    public void visitToken(final DetailAST detailAST) {\n+        final int type = detailAST.getParent().getType();\n+        switch (detailAST.getType()) {\n             case 6: {\n                 this.scopeStates.push(new DeclarationOrderCheck.ScopeState());\n                 break;\n             }\n             case 5: {\n-                if (parentType == 10 && ast.getParent().getParent().getType() == 6) {\n-                    this.processModifiers(ast);\n+                if (type == 10 && detailAST.getParent().getParent().getType() == 6) {\n+                    this.processModifiers(detailAST);\n                     break;\n                 }\n                 break;\n             }\n             case 8:\n             case 203: {\n-                if (parentType == 6) {\n-                    this.processConstructor(ast);\n+                if (type == 6) {\n+                    this.processConstructor(detailAST);\n                     break;\n                 }\n                 break;\n             }\n             case 9: {\n-                if (parentType == 6) {\n-                    final DeclarationOrderCheck.ScopeState state = (DeclarationOrderCheck.ScopeState)this.scopeStates.peek();\n-                    state.currentScopeState = 4;\n+                if (type == 6) {\n+                    ((DeclarationOrderCheck.ScopeState)this.scopeStates.peek()).currentScopeState = 4;\n                     break;\n                 }\n                 break;\n             }\n             case 10: {\n-                if (ScopeUtil.isClassFieldDef(ast)) {\n-                    final DetailAST fieldDef = ast.findFirstToken(58);\n-                    this.classFieldNames.add(fieldDef.getText());\n+                if (ScopeUtil.isClassFieldDef(detailAST)) {\n+                    this.classFieldNames.add(detailAST.findFirstToken(58).getText());\n                     break;\n                 }\n                 break;\n             }\n         }\n     }\n     \n-    private void processConstructor(final DetailAST ast) {\n-        final DeclarationOrderCheck.ScopeState state = (DeclarationOrderCheck.ScopeState)this.scopeStates.peek();\n-        if (state.currentScopeState > 3) {\n+    private void processConstructor(final DetailAST detailAST) {\n+        final DeclarationOrderCheck.ScopeState scopeState = (DeclarationOrderCheck.ScopeState)this.scopeStates.peek();\n+        if (scopeState.currentScopeState > 3) {\n             if (!this.ignoreConstructors) {\n-                this.log(ast, \"declaration.order.constructor\", new Object[0]);\n+                this.log(detailAST, \"declaration.order.constructor\", new Object[0]);\n             }\n         }\n         else {\n-            state.currentScopeState = 3;\n+            scopeState.currentScopeState = 3;\n         }\n     }\n     \n-    private void processModifiers(final DetailAST ast) {\n-        final DeclarationOrderCheck.ScopeState state = (DeclarationOrderCheck.ScopeState)this.scopeStates.peek();\n-        final boolean isStateValid = this.processModifiersState(ast, state);\n-        this.processModifiersSubState(ast, state, isStateValid);\n+    private void processModifiers(final DetailAST detailAST) {\n+        final DeclarationOrderCheck.ScopeState scopeState = (DeclarationOrderCheck.ScopeState)this.scopeStates.peek();\n+        this.processModifiersSubState(detailAST, scopeState, this.processModifiersState(detailAST, scopeState));\n     }\n     \n-    private boolean processModifiersState(final DetailAST modifierAst, final DeclarationOrderCheck.ScopeState state) {\n-        boolean isStateValid = true;\n-        if (modifierAst.findFirstToken(64) == null) {\n-            if (state.currentScopeState > 2) {\n-                isStateValid = false;\n-                this.log(modifierAst, \"declaration.order.instance\", new Object[0]);\n+    private boolean processModifiersState(final DetailAST detailAST, final DeclarationOrderCheck.ScopeState scopeState) {\n+        boolean b = true;\n+        if (detailAST.findFirstToken(64) == null) {\n+            if (scopeState.currentScopeState > 2) {\n+                b = false;\n+                this.log(detailAST, \"declaration.order.instance\", new Object[0]);\n             }\n-            else if (state.currentScopeState == 1) {\n-                state.declarationAccess = Scope.PUBLIC;\n-                state.currentScopeState = 2;\n+            else if (scopeState.currentScopeState == 1) {\n+                scopeState.declarationAccess = Scope.PUBLIC;\n+                scopeState.currentScopeState = 2;\n             }\n         }\n-        else if (state.currentScopeState > 2 || (state.currentScopeState > 1 && !this.ignoreModifiers)) {\n-            isStateValid = false;\n-            this.log(modifierAst, \"declaration.order.static\", new Object[0]);\n+        else if (scopeState.currentScopeState > 2 || (scopeState.currentScopeState > 1 && !this.ignoreModifiers)) {\n+            b = false;\n+            this.log(detailAST, \"declaration.order.static\", new Object[0]);\n         }\n-        return isStateValid;\n+        return b;\n     }\n     \n-    private void processModifiersSubState(final DetailAST modifiersAst, final DeclarationOrderCheck.ScopeState state, final boolean isStateValid) {\n-        final Scope access = ScopeUtil.getScopeFromMods(modifiersAst);\n-        if (state.declarationAccess.compareTo((Enum)access) > 0) {\n-            if (isStateValid && !this.ignoreModifiers && !this.isForwardReference(modifiersAst.getParent())) {\n-                this.log(modifiersAst, \"declaration.order.access\", new Object[0]);\n+    private void processModifiersSubState(final DetailAST detailAST, final DeclarationOrderCheck.ScopeState scopeState, final boolean b) {\n+        final Scope scopeFromMods = ScopeUtil.getScopeFromMods(detailAST);\n+        if (scopeState.declarationAccess.compareTo((Enum)scopeFromMods) > 0) {\n+            if (b && !this.ignoreModifiers && !this.isForwardReference(detailAST.getParent())) {\n+                this.log(detailAST, \"declaration.order.access\", new Object[0]);\n             }\n         }\n         else {\n-            state.declarationAccess = access;\n+            scopeState.declarationAccess = scopeFromMods;\n         }\n     }\n     \n-    private boolean isForwardReference(final DetailAST fieldDef) {\n-        final DetailAST exprStartIdent = fieldDef.findFirstToken(58);\n-        final Set<DetailAST> exprIdents = getAllTokensOfType(exprStartIdent, 58);\n-        boolean forwardReference = false;\n-        for (final DetailAST ident : exprIdents) {\n-            if (this.classFieldNames.contains(ident.getText())) {\n-                forwardReference = true;\n+    private boolean isForwardReference(final DetailAST detailAST) {\n+        final Set<DetailAST> allTokensOfType = getAllTokensOfType(detailAST.findFirstToken(58), 58);\n+        boolean b = false;\n+        final Iterator<DetailAST> iterator = allTokensOfType.iterator();\n+        while (iterator.hasNext()) {\n+            if (this.classFieldNames.contains(((DetailAST)iterator.next()).getText())) {\n+                b = true;\n                 break;\n             }\n         }\n-        return forwardReference;\n+        return b;\n     }\n     \n-    private static Set<DetailAST> getAllTokensOfType(final DetailAST ast, final int tokenType) {\n-        DetailAST vertex = ast;\n-        final Set<DetailAST> result = new HashSet<DetailAST>();\n-        final Deque<DetailAST> stack = new ArrayDeque<DetailAST>();\n-        while (vertex != null || !stack.isEmpty()) {\n-            if (!stack.isEmpty()) {\n-                vertex = stack.pop();\n+    private static Set<DetailAST> getAllTokensOfType(final DetailAST detailAST, final int n) {\n+        DetailAST firstChild = detailAST;\n+        final HashSet set = new HashSet();\n+        final ArrayDeque arrayDeque = new ArrayDeque();\n+        while (firstChild != null || !arrayDeque.isEmpty()) {\n+            if (!arrayDeque.isEmpty()) {\n+                firstChild = (DetailAST)arrayDeque.pop();\n             }\n-            while (vertex != null) {\n-                if (vertex.getType() == tokenType && !vertex.equals((Object)ast)) {\n-                    result.add(vertex);\n+            while (firstChild != null) {\n+                if (firstChild.getType() == n && !firstChild.equals((Object)detailAST)) {\n+                    set.add(firstChild);\n                 }\n-                if (vertex.getNextSibling() != null) {\n-                    stack.push(vertex.getNextSibling());\n+                if (firstChild.getNextSibling() != null) {\n+                    arrayDeque.push(firstChild.getNextSibling());\n                 }\n-                vertex = vertex.getFirstChild();\n+                firstChild = firstChild.getFirstChild();\n             }\n         }\n-        return result;\n+        return set;\n     }\n     \n-    public void leaveToken(final DetailAST ast) {\n-        if (ast.getType() == 6) {\n+    public void leaveToken(final DetailAST detailAST) {\n+        if (detailAST.getType() == 6) {\n             this.scopeStates.pop();\n         }\n     }\n     \n     public void setIgnoreConstructors(final boolean ignoreConstructors) {\n         this.ignoreConstructors = ignoreConstructors;\n     }\n"}]}
