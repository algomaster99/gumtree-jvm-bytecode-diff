{"diffoscope-json-version": 1, "source1": "first/CombinedConfigurationBuilder.class", "source2": "second/CombinedConfigurationBuilder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,23 +20,23 @@\n import java.util.List;\n import org.apache.commons.configuration2.tree.NodeCombiner;\n import org.apache.commons.configuration2.tree.OverrideCombiner;\n import org.apache.commons.configuration2.ImmutableConfiguration;\n import org.apache.commons.configuration2.beanutils.CombinedBeanDeclaration;\n import org.apache.commons.configuration2.beanutils.XMLBeanDeclaration;\n import org.apache.commons.configuration2.beanutils.BeanDeclaration;\n-import java.util.Collection;\n import org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder;\n import org.apache.commons.configuration2.XMLConfiguration;\n import org.apache.commons.configuration2.builder.FileBasedBuilderParametersImpl;\n-import java.util.Collections;\n import java.util.Set;\n import org.apache.commons.configuration2.Configuration;\n import org.apache.commons.configuration2.builder.BuilderParameters;\n import org.apache.commons.configuration2.ex.ConfigurationException;\n+import java.util.Collection;\n+import java.util.Collections;\n import org.apache.commons.configuration2.interpol.ConfigurationInterpolator;\n import org.apache.commons.configuration2.builder.XMLBuilderParametersImpl;\n import org.apache.commons.configuration2.HierarchicalConfiguration;\n import org.apache.commons.configuration2.builder.ConfigurationBuilder;\n import java.util.Map;\n import org.apache.commons.configuration2.CombinedConfiguration;\n import org.apache.commons.configuration2.builder.BasicConfigurationBuilder;\n@@ -90,14 +90,32 @@\n     private HierarchicalConfiguration<?> definitionConfiguration;\n     private CombinedConfigurationBuilder.ConfigurationSourceData sourceData;\n     private CombinedBuilderParametersImpl currentParameters;\n     private XMLBuilderParametersImpl currentXMLParameters;\n     private CombinedConfiguration currentConfiguration;\n     private ConfigurationInterpolator parentInterpolator;\n     \n+    static {\n+        ADDITIONAL_NAME = String.valueOf(CombinedConfigurationBuilder.class.getName()) + \"/ADDITIONAL_CONFIG\";\n+        CONFIG_BEAN_FACTORY_NAME = String.valueOf(CombinedConfigurationBuilder.class.getName()) + \".CONFIG_BEAN_FACTORY_NAME\";\n+        CONFIG_SECTIONS = new String[] { \"additional\", \"override\", \"header\" };\n+        PROPERTIES_PROVIDER = (ConfigurationBuilderProvider)new FileExtensionConfigurationBuilderProvider(\"org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.XMLPropertiesConfiguration\", \"org.apache.commons.configuration2.PropertiesConfiguration\", \"xml\", (Collection)Collections.singletonList(\"org.apache.commons.configuration2.builder.FileBasedBuilderParametersImpl\"));\n+        XML_PROVIDER = (ConfigurationBuilderProvider)new BaseConfigurationBuilderProvider(\"org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.XMLConfiguration\", (Collection)Collections.singletonList(\"org.apache.commons.configuration2.builder.XMLBuilderParametersImpl\"));\n+        JNDI_PROVIDER = new BaseConfigurationBuilderProvider(\"org.apache.commons.configuration2.builder.BasicConfigurationBuilder\", (String)null, \"org.apache.commons.configuration2.JNDIConfiguration\", (Collection)Collections.singletonList(\"org.apache.commons.configuration2.builder.JndiBuilderParametersImpl\"));\n+        SYSTEM_PROVIDER = new BaseConfigurationBuilderProvider(\"org.apache.commons.configuration2.builder.BasicConfigurationBuilder\", (String)null, \"org.apache.commons.configuration2.SystemConfiguration\", (Collection)Collections.singletonList(\"org.apache.commons.configuration2.builder.BasicBuilderParameters\"));\n+        INI_PROVIDER = new BaseConfigurationBuilderProvider(\"org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.INIConfiguration\", (Collection)Collections.singletonList(\"org.apache.commons.configuration2.builder.FileBasedBuilderParametersImpl\"));\n+        ENV_PROVIDER = new BaseConfigurationBuilderProvider(\"org.apache.commons.configuration2.builder.BasicConfigurationBuilder\", (String)null, \"org.apache.commons.configuration2.EnvironmentConfiguration\", (Collection)Collections.singletonList(\"org.apache.commons.configuration2.builder.BasicBuilderParameters\"));\n+        PLIST_PROVIDER = (BaseConfigurationBuilderProvider)new FileExtensionConfigurationBuilderProvider(\"org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.plist.XMLPropertyListConfiguration\", \"org.apache.commons.configuration2.plist.PropertyListConfiguration\", \"xml\", (Collection)Collections.singletonList(\"org.apache.commons.configuration2.builder.FileBasedBuilderParametersImpl\"));\n+        COMBINED_PROVIDER = (BaseConfigurationBuilderProvider)new CombinedConfigurationBuilderProvider();\n+        MULTI_XML_PROVIDER = new MultiFileConfigurationBuilderProvider(\"org.apache.commons.configuration2.XMLConfiguration\", \"org.apache.commons.configuration2.builder.XMLBuilderParametersImpl\");\n+        DEFAULT_TAGS = new String[] { \"properties\", \"xml\", \"hierarchicalXml\", \"plist\", \"ini\", \"system\", \"env\", \"jndi\", \"configuration\", \"multiFile\" };\n+        DEFAULT_PROVIDERS = new ConfigurationBuilderProvider[] { CombinedConfigurationBuilder.PROPERTIES_PROVIDER, CombinedConfigurationBuilder.XML_PROVIDER, CombinedConfigurationBuilder.XML_PROVIDER, (ConfigurationBuilderProvider)CombinedConfigurationBuilder.PLIST_PROVIDER, (ConfigurationBuilderProvider)CombinedConfigurationBuilder.INI_PROVIDER, (ConfigurationBuilderProvider)CombinedConfigurationBuilder.SYSTEM_PROVIDER, (ConfigurationBuilderProvider)CombinedConfigurationBuilder.ENV_PROVIDER, (ConfigurationBuilderProvider)CombinedConfigurationBuilder.JNDI_PROVIDER, (ConfigurationBuilderProvider)CombinedConfigurationBuilder.COMBINED_PROVIDER, (ConfigurationBuilderProvider)CombinedConfigurationBuilder.MULTI_XML_PROVIDER };\n+        DEFAULT_PROVIDERS_MAP = createDefaultProviders();\n+    }\n+    \n     public CombinedConfigurationBuilder() {\n         super((Class)CombinedConfiguration.class);\n     }\n     \n     public CombinedConfigurationBuilder(final Map<String, Object> params) {\n         super((Class)CombinedConfiguration.class, (Map)params);\n     }\n@@ -201,25 +219,25 @@\n         this.currentXMLParameters.setFileSystem(this.initFileSystem(config));\n         this.initSystemProperties(config, this.getBasePath());\n         this.registerConfiguredLookups(config, (Configuration)result);\n         this.configureEntityResolver(config, this.currentXMLParameters);\n         this.setUpParentInterpolator((Configuration)this.currentConfiguration, (Configuration)config);\n         final CombinedConfigurationBuilder.ConfigurationSourceData data = this.getSourceData();\n         final boolean createBuilders = data.getChildBuilders().isEmpty();\n-        final List<ConfigurationBuilder<? extends Configuration>> overrideBuilders = data.createAndAddConfigurations(result, data.getOverrideSources(), CombinedConfigurationBuilder.ConfigurationSourceData.access$000(data));\n+        final List<ConfigurationBuilder<? extends Configuration>> overrideBuilders = data.createAndAddConfigurations(result, data.getOverrideSources(), CombinedConfigurationBuilder.ConfigurationSourceData.access$0(data));\n         if (createBuilders) {\n-            CombinedConfigurationBuilder.ConfigurationSourceData.access$000(data).addAll(overrideBuilders);\n+            CombinedConfigurationBuilder.ConfigurationSourceData.access$0(data).addAll(overrideBuilders);\n         }\n         if (!data.getUnionSources().isEmpty()) {\n             final CombinedConfiguration addConfig = this.createAdditionalsConfiguration(result);\n             result.addConfiguration((Configuration)addConfig, CombinedConfigurationBuilder.ADDITIONAL_NAME);\n             initNodeCombinerListNodes(addConfig, config, \"header.combiner.additional.list-nodes.node\");\n-            final List<ConfigurationBuilder<? extends Configuration>> unionBuilders = data.createAndAddConfigurations(addConfig, CombinedConfigurationBuilder.ConfigurationSourceData.access$100(data), CombinedConfigurationBuilder.ConfigurationSourceData.access$200(data));\n+            final List<ConfigurationBuilder<? extends Configuration>> unionBuilders = data.createAndAddConfigurations(addConfig, CombinedConfigurationBuilder.ConfigurationSourceData.access$1(data), CombinedConfigurationBuilder.ConfigurationSourceData.access$2(data));\n             if (createBuilders) {\n-                CombinedConfigurationBuilder.ConfigurationSourceData.access$200(data).addAll(unionBuilders);\n+                CombinedConfigurationBuilder.ConfigurationSourceData.access$2(data).addAll(unionBuilders);\n             }\n         }\n         result.isEmpty();\n         this.currentConfiguration = null;\n     }\n     \n     protected CombinedConfiguration createAdditionalsConfiguration(final CombinedConfiguration resultConfig) {\n@@ -397,51 +415,33 @@\n         });\n     }\n     \n     private void addDefinitionBuilderChangeListener(final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> defBuilder) {\n         defBuilder.addEventListener(ConfigurationBuilderEvent.RESET, event -> {\n             synchronized (this) {\n                 this.reset();\n-                this.definitionBuilder = defBuilder;\n+                this.defBuilder = defBuilder;\n             }\n         });\n     }\n     \n     private Map<String, ? extends Lookup> fetchPrefixLookups() {\n         final CombinedConfiguration cc = this.getConfigurationUnderConstruction();\n         return (cc != null) ? cc.getInterpolator().getLookups() : null;\n     }\n     \n     private Collection<ConfigurationDeclaration> createDeclarations(final Collection<? extends HierarchicalConfiguration<?>> configs) {\n         return configs.stream().map(c -> new ConfigurationDeclaration(this, c)).collect((Collector<? super Object, ?, Collection<ConfigurationDeclaration>>)Collectors.toList());\n     }\n     \n     private static void initNodeCombinerListNodes(final CombinedConfiguration cc, final HierarchicalConfiguration<?> defConfig, final String key) {\n-        defConfig.getList(key).forEach(listNode -> cc.getNodeCombiner().addListNode((String)listNode));\n+        defConfig.getList(key).forEach(listNode -> combinedConfiguration.getNodeCombiner().addListNode((String)listNode));\n     }\n     \n     private static Map<String, ConfigurationBuilderProvider> createDefaultProviders() {\n         final Map<String, ConfigurationBuilderProvider> providers = new HashMap<String, ConfigurationBuilderProvider>();\n         for (int i = 0; i < CombinedConfigurationBuilder.DEFAULT_TAGS.length; ++i) {\n             providers.put(CombinedConfigurationBuilder.DEFAULT_TAGS[i], CombinedConfigurationBuilder.DEFAULT_PROVIDERS[i]);\n         }\n         return providers;\n     }\n-    \n-    static {\n-        ADDITIONAL_NAME = CombinedConfigurationBuilder.class.getName() + \"/ADDITIONAL_CONFIG\";\n-        CONFIG_BEAN_FACTORY_NAME = CombinedConfigurationBuilder.class.getName() + \".CONFIG_BEAN_FACTORY_NAME\";\n-        CONFIG_SECTIONS = new String[] { \"additional\", \"override\", \"header\" };\n-        PROPERTIES_PROVIDER = (ConfigurationBuilderProvider)new FileExtensionConfigurationBuilderProvider(\"org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.XMLPropertiesConfiguration\", \"org.apache.commons.configuration2.PropertiesConfiguration\", \"xml\", (Collection)Collections.singletonList(\"org.apache.commons.configuration2.builder.FileBasedBuilderParametersImpl\"));\n-        XML_PROVIDER = (ConfigurationBuilderProvider)new BaseConfigurationBuilderProvider(\"org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.XMLConfiguration\", (Collection)Collections.singletonList(\"org.apache.commons.configuration2.builder.XMLBuilderParametersImpl\"));\n-        JNDI_PROVIDER = new BaseConfigurationBuilderProvider(\"org.apache.commons.configuration2.builder.BasicConfigurationBuilder\", (String)null, \"org.apache.commons.configuration2.JNDIConfiguration\", (Collection)Collections.singletonList(\"org.apache.commons.configuration2.builder.JndiBuilderParametersImpl\"));\n-        SYSTEM_PROVIDER = new BaseConfigurationBuilderProvider(\"org.apache.commons.configuration2.builder.BasicConfigurationBuilder\", (String)null, \"org.apache.commons.configuration2.SystemConfiguration\", (Collection)Collections.singletonList(\"org.apache.commons.configuration2.builder.BasicBuilderParameters\"));\n-        INI_PROVIDER = new BaseConfigurationBuilderProvider(\"org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.INIConfiguration\", (Collection)Collections.singletonList(\"org.apache.commons.configuration2.builder.FileBasedBuilderParametersImpl\"));\n-        ENV_PROVIDER = new BaseConfigurationBuilderProvider(\"org.apache.commons.configuration2.builder.BasicConfigurationBuilder\", (String)null, \"org.apache.commons.configuration2.EnvironmentConfiguration\", (Collection)Collections.singletonList(\"org.apache.commons.configuration2.builder.BasicBuilderParameters\"));\n-        PLIST_PROVIDER = (BaseConfigurationBuilderProvider)new FileExtensionConfigurationBuilderProvider(\"org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.plist.XMLPropertyListConfiguration\", \"org.apache.commons.configuration2.plist.PropertyListConfiguration\", \"xml\", (Collection)Collections.singletonList(\"org.apache.commons.configuration2.builder.FileBasedBuilderParametersImpl\"));\n-        COMBINED_PROVIDER = (BaseConfigurationBuilderProvider)new CombinedConfigurationBuilderProvider();\n-        MULTI_XML_PROVIDER = new MultiFileConfigurationBuilderProvider(\"org.apache.commons.configuration2.XMLConfiguration\", \"org.apache.commons.configuration2.builder.XMLBuilderParametersImpl\");\n-        DEFAULT_TAGS = new String[] { \"properties\", \"xml\", \"hierarchicalXml\", \"plist\", \"ini\", \"system\", \"env\", \"jndi\", \"configuration\", \"multiFile\" };\n-        DEFAULT_PROVIDERS = new ConfigurationBuilderProvider[] { CombinedConfigurationBuilder.PROPERTIES_PROVIDER, CombinedConfigurationBuilder.XML_PROVIDER, CombinedConfigurationBuilder.XML_PROVIDER, (ConfigurationBuilderProvider)CombinedConfigurationBuilder.PLIST_PROVIDER, (ConfigurationBuilderProvider)CombinedConfigurationBuilder.INI_PROVIDER, (ConfigurationBuilderProvider)CombinedConfigurationBuilder.SYSTEM_PROVIDER, (ConfigurationBuilderProvider)CombinedConfigurationBuilder.ENV_PROVIDER, (ConfigurationBuilderProvider)CombinedConfigurationBuilder.JNDI_PROVIDER, (ConfigurationBuilderProvider)CombinedConfigurationBuilder.COMBINED_PROVIDER, (ConfigurationBuilderProvider)CombinedConfigurationBuilder.MULTI_XML_PROVIDER };\n-        DEFAULT_PROVIDERS_MAP = createDefaultProviders();\n-    }\n }\n"}]}
