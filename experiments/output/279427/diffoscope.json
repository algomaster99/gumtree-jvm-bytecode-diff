{"diffoscope-json-version": 1, "source1": "first/NewAttributeBands$Union.class", "source2": "second/NewAttributeBands$Union.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,34 +11,35 @@\n \n public class Union extends NewAttributeBands.LayoutElement\n {\n     private final NewAttributeBands.Integral unionTag;\n     private final List<NewAttributeBands.UnionCase> unionCases;\n     private final List<NewAttributeBands.LayoutElement> defaultCaseBody;\n     \n-    public Union(final NewAttributeBands this$0, final String tag, final List<NewAttributeBands.UnionCase> unionCases, final List<NewAttributeBands.LayoutElement> body) {\n+    public Union(final NewAttributeBands this$0, final String s, final List<NewAttributeBands.UnionCase> unionCases, final List<NewAttributeBands.LayoutElement> defaultCaseBody) {\n         super(this.this$0 = this$0);\n-        this.unionTag = new NewAttributeBands.Integral(this$0, tag);\n+        this.unionTag = new NewAttributeBands.Integral(this$0, s);\n         this.unionCases = unionCases;\n-        this.defaultCaseBody = body;\n+        this.defaultCaseBody = defaultCaseBody;\n     }\n     \n-    public void addAttributeToBand(final NewAttribute attribute, final InputStream inputStream) {\n-        this.unionTag.addAttributeToBand(attribute, inputStream);\n-        final long tag = (long)this.unionTag.latestValue();\n-        boolean defaultCase = true;\n+    public void addAttributeToBand(final NewAttribute newAttribute, final InputStream inputStream) {\n+        this.unionTag.addAttributeToBand(newAttribute, inputStream);\n+        final long n = (long)this.unionTag.latestValue();\n+        boolean b = true;\n         for (final NewAttributeBands.UnionCase unionCase : this.unionCases) {\n-            if (unionCase.hasTag(tag)) {\n-                defaultCase = false;\n-                unionCase.addAttributeToBand(attribute, inputStream);\n+            if (unionCase.hasTag(n)) {\n+                b = false;\n+                unionCase.addAttributeToBand(newAttribute, inputStream);\n             }\n         }\n-        if (defaultCase) {\n-            for (final NewAttributeBands.LayoutElement layoutElement : this.defaultCaseBody) {\n-                layoutElement.addAttributeToBand(attribute, inputStream);\n+        if (b) {\n+            final Iterator iterator2 = this.defaultCaseBody.iterator();\n+            while (iterator2.hasNext()) {\n+                ((NewAttributeBands.LayoutElement)iterator2.next()).addAttributeToBand(newAttribute, inputStream);\n             }\n         }\n     }\n     \n     public List<NewAttributeBands.LayoutElement> getDefaultCaseBody() {\n         return this.defaultCaseBody;\n     }\n@@ -49,24 +50,28 @@\n     \n     public NewAttributeBands.Integral getUnionTag() {\n         return this.unionTag;\n     }\n     \n     public void pack(final OutputStream outputStream) throws IOException, Pack200Exception {\n         this.unionTag.pack(outputStream);\n-        for (final NewAttributeBands.UnionCase unionCase : this.unionCases) {\n-            unionCase.pack(outputStream);\n+        final Iterator iterator = this.unionCases.iterator();\n+        while (iterator.hasNext()) {\n+            ((NewAttributeBands.UnionCase)iterator.next()).pack(outputStream);\n         }\n-        for (final NewAttributeBands.LayoutElement element : this.defaultCaseBody) {\n-            element.pack(outputStream);\n+        final Iterator iterator2 = this.defaultCaseBody.iterator();\n+        while (iterator2.hasNext()) {\n+            ((NewAttributeBands.LayoutElement)iterator2.next()).pack(outputStream);\n         }\n     }\n     \n-    public void renumberBci(final IntList bciRenumbering, final Map<Label, Integer> labelsToOffsets) {\n-        for (final NewAttributeBands.UnionCase unionCase : this.unionCases) {\n-            unionCase.renumberBci(bciRenumbering, (Map)labelsToOffsets);\n+    public void renumberBci(final IntList list, final Map<Label, Integer> map) {\n+        final Iterator iterator = this.unionCases.iterator();\n+        while (iterator.hasNext()) {\n+            ((NewAttributeBands.UnionCase)iterator.next()).renumberBci(list, (Map)map);\n         }\n-        for (final NewAttributeBands.LayoutElement element : this.defaultCaseBody) {\n-            element.renumberBci(bciRenumbering, (Map)labelsToOffsets);\n+        final Iterator iterator2 = this.defaultCaseBody.iterator();\n+        while (iterator2.hasNext()) {\n+            ((NewAttributeBands.LayoutElement)iterator2.next()).renumberBci(list, (Map)map);\n         }\n     }\n }\n"}]}
