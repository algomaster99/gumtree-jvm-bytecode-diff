{"diffoscope-json-version": 1, "source1": "first/ConfigurationDynaClass.class", "source2": "second/ConfigurationDynaClass.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,13 +1,12 @@\n \n package org.apache.commons.configuration2.beanutils;\n \n import org.apache.commons.logging.LogFactory;\n import org.apache.commons.beanutils.DynaBean;\n-import java.util.List;\n import java.util.Iterator;\n import java.util.ArrayList;\n import org.apache.commons.beanutils.DynaProperty;\n import org.apache.commons.configuration2.Configuration;\n import org.apache.commons.logging.Log;\n import org.apache.commons.beanutils.DynaClass;\n \n@@ -19,70 +18,68 @@\n     public ConfigurationDynaClass(final Configuration configuration) {\n         if (ConfigurationDynaClass.LOG.isTraceEnabled()) {\n             ConfigurationDynaClass.LOG.trace((Object)(\"ConfigurationDynaClass(\" + configuration + \")\"));\n         }\n         this.configuration = configuration;\n     }\n     \n-    public DynaProperty getDynaProperty(final String name) {\n+    public DynaProperty getDynaProperty(final String str) {\n         if (ConfigurationDynaClass.LOG.isTraceEnabled()) {\n-            ConfigurationDynaClass.LOG.trace((Object)(\"getDynaProperty(\" + name + \")\"));\n+            ConfigurationDynaClass.LOG.trace((Object)(\"getDynaProperty(\" + str + \")\"));\n         }\n-        if (name == null) {\n+        if (str == null) {\n             throw new IllegalArgumentException(\"Property name must not be null!\");\n         }\n-        final Object value = this.configuration.getProperty(name);\n-        if (value == null) {\n+        final Object property = this.configuration.getProperty(str);\n+        if (property == null) {\n             return null;\n         }\n-        Class<?> type = value.getClass();\n-        if (type == Byte.class) {\n-            type = Byte.TYPE;\n+        Class<?> clazz = property.getClass();\n+        if (clazz == Byte.class) {\n+            clazz = Byte.TYPE;\n         }\n-        if (type == Character.class) {\n-            type = Character.TYPE;\n+        if (clazz == Character.class) {\n+            clazz = Character.TYPE;\n         }\n-        else if (type == Boolean.class) {\n-            type = Boolean.TYPE;\n+        else if (clazz == Boolean.class) {\n+            clazz = Boolean.TYPE;\n         }\n-        else if (type == Double.class) {\n-            type = Double.TYPE;\n+        else if (clazz == Double.class) {\n+            clazz = Double.TYPE;\n         }\n-        else if (type == Float.class) {\n-            type = Float.TYPE;\n+        else if (clazz == Float.class) {\n+            clazz = Float.TYPE;\n         }\n-        else if (type == Integer.class) {\n-            type = Integer.TYPE;\n+        else if (clazz == Integer.class) {\n+            clazz = Integer.TYPE;\n         }\n-        else if (type == Long.class) {\n-            type = Long.TYPE;\n+        else if (clazz == Long.class) {\n+            clazz = Long.TYPE;\n         }\n-        else if (type == Short.class) {\n-            type = Short.TYPE;\n+        else if (clazz == Short.class) {\n+            clazz = Short.TYPE;\n         }\n-        return new DynaProperty(name, (Class)type);\n+        return new DynaProperty(str, (Class)clazz);\n     }\n     \n     public DynaProperty[] getDynaProperties() {\n         if (ConfigurationDynaClass.LOG.isTraceEnabled()) {\n             ConfigurationDynaClass.LOG.trace((Object)\"getDynaProperties()\");\n         }\n-        final Iterator<String> keys = this.configuration.getKeys();\n-        final List<DynaProperty> properties = new ArrayList<DynaProperty>();\n+        final Iterator keys = this.configuration.getKeys();\n+        final ArrayList list = new ArrayList();\n         while (keys.hasNext()) {\n-            final String key = (String)keys.next();\n-            final DynaProperty property = this.getDynaProperty(key);\n-            properties.add(property);\n+            list.add(this.getDynaProperty(keys.next()));\n         }\n-        final DynaProperty[] propertyArray = new DynaProperty[properties.size()];\n-        properties.toArray(propertyArray);\n+        final DynaProperty[] array = new DynaProperty[list.size()];\n+        list.toArray(array);\n         if (ConfigurationDynaClass.LOG.isDebugEnabled()) {\n-            ConfigurationDynaClass.LOG.debug((Object)(\"Found \" + properties.size() + \" properties.\"));\n+            ConfigurationDynaClass.LOG.debug((Object)(\"Found \" + list.size() + \" properties.\"));\n         }\n-        return propertyArray;\n+        return array;\n     }\n     \n     public String getName() {\n         return ConfigurationDynaBean.class.getName();\n     }\n     \n     public DynaBean newInstance() throws IllegalAccessException, InstantiationException {\n"}]}
