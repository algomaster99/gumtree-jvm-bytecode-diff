{"diffoscope-json-version": 1, "source1": "first/CatalogResolver.class", "source2": "second/CatalogResolver.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package org.apache.commons.configuration2.resolver;\n \n-import org.apache.commons.configuration2.io.FileLocator;\n import org.apache.xml.resolver.CatalogManager;\n import org.xml.sax.SAXException;\n import java.io.InputStream;\n import java.net.URL;\n import org.apache.commons.configuration2.ex.ConfigurationException;\n import org.xml.sax.InputSource;\n import org.apache.commons.configuration2.interpol.ConfigurationInterpolator;\n@@ -29,85 +28,82 @@\n         this.fs = FileLocatorUtils.DEFAULT_FILE_SYSTEM;\n         this.manager.setIgnoreMissingProperties(true);\n         this.manager.setUseStaticCatalog(false);\n         this.manager.setFileSystem(this.fs);\n         this.initLogger(null);\n     }\n     \n-    public void setCatalogFiles(final String catalogs) {\n-        this.manager.setCatalogFiles(catalogs);\n+    public void setCatalogFiles(final String catalogFiles) {\n+        this.manager.setCatalogFiles(catalogFiles);\n     }\n     \n     public void setFileSystem(final FileSystem fileSystem) {\n         this.fs = fileSystem;\n         this.manager.setFileSystem(fileSystem);\n     }\n     \n     public void setBaseDir(final String baseDir) {\n         this.manager.setBaseDir(baseDir);\n     }\n     \n-    public void setInterpolator(final ConfigurationInterpolator ci) {\n-        this.manager.setInterpolator(ci);\n+    public void setInterpolator(final ConfigurationInterpolator interpolator) {\n+        this.manager.setInterpolator(interpolator);\n     }\n     \n-    public void setDebug(final boolean debug) {\n-        if (debug) {\n+    public void setDebug(final boolean b) {\n+        if (b) {\n             this.manager.setVerbosity(9);\n         }\n         else {\n             this.manager.setVerbosity(0);\n         }\n     }\n     \n     @Override\n-    public InputSource resolveEntity(final String publicId, final String systemId) throws SAXException {\n-        String resolved = this.getResolver().getResolvedEntity(publicId, systemId);\n-        if (resolved != null) {\n-            final String badFilePrefix = \"file://\";\n-            final String correctFilePrefix = \"file:///\";\n-            if (resolved.startsWith(\"file://\") && !resolved.startsWith(\"file:///\")) {\n-                resolved = \"file:///\" + resolved.substring(\"file://\".length());\n+    public InputSource resolveEntity(final String publicId, final String s) throws SAXException {\n+        String str = this.getResolver().getResolvedEntity(publicId, s);\n+        if (str != null) {\n+            if (str.startsWith(\"file://\") && !str.startsWith(\"file:///\")) {\n+                str = \"file:///\" + str.substring(\"file://\".length());\n             }\n             try {\n-                final URL url = locate(this.fs, null, resolved);\n-                if (url == null) {\n-                    throw new ConfigurationException(\"Could not locate \" + resolved);\n+                final URL locate = locate(this.fs, null, str);\n+                if (locate == null) {\n+                    throw new ConfigurationException(\"Could not locate \" + str);\n                 }\n-                final InputStream inputStream = this.fs.getInputStream(url);\n-                final InputSource inputSource = new InputSource(resolved);\n+                final InputStream inputStream = this.fs.getInputStream(locate);\n+                final InputSource inputSource = new InputSource(str);\n                 inputSource.setPublicId(publicId);\n                 inputSource.setByteStream(inputStream);\n                 return inputSource;\n             }\n-            catch (final Exception e) {\n-                this.log.warn(\"Failed to create InputSource for \" + resolved, (Throwable)e);\n+            catch (final Exception ex) {\n+                this.log.warn(\"Failed to create InputSource for \" + str, (Throwable)ex);\n                 return null;\n             }\n         }\n         return null;\n     }\n     \n     public ConfigurationLogger getLogger() {\n         return this.log;\n     }\n     \n-    public void setLogger(final ConfigurationLogger log) {\n-        this.initLogger(log);\n+    public void setLogger(final ConfigurationLogger configurationLogger) {\n+        this.initLogger(configurationLogger);\n     }\n     \n-    private void initLogger(final ConfigurationLogger log) {\n-        this.log = ((log != null) ? log : ConfigurationLogger.newDummyLogger());\n+    private void initLogger(final ConfigurationLogger configurationLogger) {\n+        this.log = ((configurationLogger != null) ? configurationLogger : ConfigurationLogger.newDummyLogger());\n     }\n     \n     private synchronized org.apache.xml.resolver.tools.CatalogResolver getResolver() {\n         if (this.resolver == null) {\n             this.resolver = new org.apache.xml.resolver.tools.CatalogResolver((CatalogManager)this.manager);\n         }\n         return this.resolver;\n     }\n     \n-    private static URL locate(final FileSystem fs, final String basePath, final String name) {\n-        final FileLocator locator = FileLocatorUtils.fileLocator().fileSystem(fs).basePath(basePath).fileName(name).create();\n-        return FileLocatorUtils.locate(locator);\n+    private static URL locate(final FileSystem fileSystem, final String s, final String s2) {\n+        return FileLocatorUtils.locate(FileLocatorUtils.fileLocator().fileSystem(fileSystem).basePath(s).fileName(s2).create());\n     }\n }\n"}]}
