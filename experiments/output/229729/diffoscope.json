{"diffoscope-json-version": 1, "source1": "first/Pack200CompressorOutputStream.class", "source2": "second/Pack200CompressorOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,43 +11,43 @@\n public class Pack200CompressorOutputStream extends CompressorOutputStream\n {\n     private boolean finished;\n     private final OutputStream originalOutput;\n     private final StreamBridge streamBridge;\n     private final Map<String, String> properties;\n     \n-    public Pack200CompressorOutputStream(final OutputStream out) throws IOException {\n-        this(out, Pack200Strategy.IN_MEMORY);\n+    public Pack200CompressorOutputStream(final OutputStream outputStream) throws IOException {\n+        this(outputStream, Pack200Strategy.IN_MEMORY);\n     }\n     \n-    public Pack200CompressorOutputStream(final OutputStream out, final Pack200Strategy mode) throws IOException {\n-        this(out, mode, null);\n+    public Pack200CompressorOutputStream(final OutputStream outputStream, final Pack200Strategy pack200Strategy) throws IOException {\n+        this(outputStream, pack200Strategy, null);\n     }\n     \n-    public Pack200CompressorOutputStream(final OutputStream out, final Map<String, String> props) throws IOException {\n-        this(out, Pack200Strategy.IN_MEMORY, props);\n+    public Pack200CompressorOutputStream(final OutputStream outputStream, final Map<String, String> map) throws IOException {\n+        this(outputStream, Pack200Strategy.IN_MEMORY, map);\n     }\n     \n-    public Pack200CompressorOutputStream(final OutputStream out, final Pack200Strategy mode, final Map<String, String> props) throws IOException {\n+    public Pack200CompressorOutputStream(final OutputStream originalOutput, final Pack200Strategy pack200Strategy, final Map<String, String> properties) throws IOException {\n         this.finished = false;\n-        this.originalOutput = out;\n-        this.streamBridge = mode.newStreamBridge();\n-        this.properties = props;\n+        this.originalOutput = originalOutput;\n+        this.streamBridge = pack200Strategy.newStreamBridge();\n+        this.properties = properties;\n     }\n     \n-    public void write(final int b) throws IOException {\n-        this.streamBridge.write(b);\n+    public void write(final int n) throws IOException {\n+        this.streamBridge.write(n);\n     }\n     \n-    public void write(final byte[] b) throws IOException {\n-        this.streamBridge.write(b);\n+    public void write(final byte[] array) throws IOException {\n+        this.streamBridge.write(array);\n     }\n     \n-    public void write(final byte[] b, final int from, final int length) throws IOException {\n-        this.streamBridge.write(b, from, length);\n+    public void write(final byte[] array, final int n, final int n2) throws IOException {\n+        this.streamBridge.write(array, n, n2);\n     }\n     \n     public void close() throws IOException {\n         try {\n             this.finish();\n         }\n         finally {\n@@ -59,17 +59,17 @@\n             }\n         }\n     }\n     \n     public void finish() throws IOException {\n         if (!this.finished) {\n             this.finished = true;\n-            final Pack200.Packer p = Pack200.newPacker();\n+            final Pack200.Packer packer = Pack200.newPacker();\n             if (this.properties != null) {\n-                p.properties().putAll(this.properties);\n+                packer.properties().putAll(this.properties);\n             }\n-            try (final JarInputStream ji = new JarInputStream(this.streamBridge.getInput())) {\n-                p.pack(ji, this.originalOutput);\n+            try (final JarInputStream jarInputStream = new JarInputStream(this.streamBridge.getInput())) {\n+                packer.pack(jarInputStream, this.originalOutput);\n             }\n         }\n     }\n }\n"}]}
