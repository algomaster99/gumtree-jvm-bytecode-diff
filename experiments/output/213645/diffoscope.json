{"diffoscope-json-version": 1, "source1": "first/FTPListParseEngine.class", "source2": "second/FTPListParseEngine.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,87 +16,87 @@\n public class FTPListParseEngine\n {\n     private List<String> entries;\n     private ListIterator<String> internalIterator;\n     private final FTPFileEntryParser parser;\n     private final boolean saveUnparseableEntries;\n     \n-    public FTPListParseEngine(final FTPFileEntryParser parser) {\n-        this(parser, null);\n+    public FTPListParseEngine(final FTPFileEntryParser ftpFileEntryParser) {\n+        this(ftpFileEntryParser, null);\n     }\n     \n-    FTPListParseEngine(final FTPFileEntryParser parser, final FTPClientConfig configuration) {\n+    FTPListParseEngine(final FTPFileEntryParser parser, final FTPClientConfig ftpClientConfig) {\n         this.entries = new LinkedList<String>();\n         this.internalIterator = this.entries.listIterator();\n         this.parser = parser;\n-        if (configuration != null) {\n-            this.saveUnparseableEntries = configuration.getUnparseableEntries();\n+        if (ftpClientConfig != null) {\n+            this.saveUnparseableEntries = ftpClientConfig.getUnparseableEntries();\n         }\n         else {\n             this.saveUnparseableEntries = false;\n         }\n     }\n     \n-    public void readServerList(final InputStream stream, final String encoding) throws IOException {\n+    public void readServerList(final InputStream inputStream, final String s) throws IOException {\n         this.entries = new LinkedList<String>();\n-        this.readStream(stream, encoding);\n+        this.readStream(inputStream, s);\n         this.parser.preParse((List)this.entries);\n         this.resetIterator();\n     }\n     \n-    private void readStream(final InputStream stream, final String encoding) throws IOException {\n-        try (final BufferedReader reader = new BufferedReader(new InputStreamReader(stream, Charsets.toCharset(encoding)))) {\n-            for (String line = this.parser.readNextEntry(reader); line != null; line = this.parser.readNextEntry(reader)) {\n-                this.entries.add(line);\n+    private void readStream(final InputStream in, final String s) throws IOException {\n+        try (final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(in, Charsets.toCharset(s)))) {\n+            for (String s2 = this.parser.readNextEntry(bufferedReader); s2 != null; s2 = this.parser.readNextEntry(bufferedReader)) {\n+                this.entries.add(s2);\n             }\n         }\n     }\n     \n-    public FTPFile[] getNext(final int quantityRequested) {\n-        final List<FTPFile> tmpResults = new LinkedList<FTPFile>();\n-        for (int count = quantityRequested; count > 0 && this.internalIterator.hasNext(); --count) {\n-            final String entry = (String)this.internalIterator.next();\n-            FTPFile temp = this.parser.parseFTPEntry(entry);\n-            if (temp == null && this.saveUnparseableEntries) {\n-                temp = new FTPFile(entry);\n+    public FTPFile[] getNext(final int n) {\n+        final LinkedList list = new LinkedList();\n+        for (int n2 = n; n2 > 0 && this.internalIterator.hasNext(); --n2) {\n+            final String s = (String)this.internalIterator.next();\n+            FTPFile ftpEntry = this.parser.parseFTPEntry(s);\n+            if (ftpEntry == null && this.saveUnparseableEntries) {\n+                ftpEntry = new FTPFile(s);\n             }\n-            tmpResults.add(temp);\n+            list.add(ftpEntry);\n         }\n-        return tmpResults.toArray(new FTPFile[tmpResults.size()]);\n+        return (FTPFile[])list.toArray(new FTPFile[list.size()]);\n     }\n     \n-    public FTPFile[] getPrevious(final int quantityRequested) {\n-        final List<FTPFile> tmpResults = new LinkedList<FTPFile>();\n-        for (int count = quantityRequested; count > 0 && this.internalIterator.hasPrevious(); --count) {\n-            final String entry = (String)this.internalIterator.previous();\n-            FTPFile temp = this.parser.parseFTPEntry(entry);\n-            if (temp == null && this.saveUnparseableEntries) {\n-                temp = new FTPFile(entry);\n+    public FTPFile[] getPrevious(final int n) {\n+        final LinkedList list = new LinkedList();\n+        for (int n2 = n; n2 > 0 && this.internalIterator.hasPrevious(); --n2) {\n+            final String s = (String)this.internalIterator.previous();\n+            FTPFile ftpEntry = this.parser.parseFTPEntry(s);\n+            if (ftpEntry == null && this.saveUnparseableEntries) {\n+                ftpEntry = new FTPFile(s);\n             }\n-            tmpResults.add(0, temp);\n+            list.add(0, ftpEntry);\n         }\n-        return tmpResults.toArray(new FTPFile[tmpResults.size()]);\n+        return (FTPFile[])list.toArray(new FTPFile[list.size()]);\n     }\n     \n     public FTPFile[] getFiles() throws IOException {\n         return this.getFiles(FTPFileFilters.NON_NULL);\n     }\n     \n-    public FTPFile[] getFiles(final FTPFileFilter filter) throws IOException {\n-        final List<FTPFile> tmpResults = new ArrayList<FTPFile>();\n-        for (final String entry : this.entries) {\n-            FTPFile temp = this.parser.parseFTPEntry(entry);\n-            if (temp == null && this.saveUnparseableEntries) {\n-                temp = new FTPFile(entry);\n+    public FTPFile[] getFiles(final FTPFileFilter ftpFileFilter) throws IOException {\n+        final ArrayList list = new ArrayList();\n+        for (final String s : this.entries) {\n+            FTPFile ftpEntry = this.parser.parseFTPEntry(s);\n+            if (ftpEntry == null && this.saveUnparseableEntries) {\n+                ftpEntry = new FTPFile(s);\n             }\n-            if (filter.accept(temp)) {\n-                tmpResults.add(temp);\n+            if (ftpFileFilter.accept(ftpEntry)) {\n+                list.add(ftpEntry);\n             }\n         }\n-        return tmpResults.toArray(new FTPFile[tmpResults.size()]);\n+        return (FTPFile[])list.toArray(new FTPFile[list.size()]);\n     }\n     \n     public boolean hasNext() {\n         return this.internalIterator.hasNext();\n     }\n     \n     public boolean hasPrevious() {\n@@ -104,11 +104,11 @@\n     }\n     \n     public void resetIterator() {\n         this.internalIterator = this.entries.listIterator();\n     }\n     \n     @Deprecated\n-    public void readServerList(final InputStream stream) throws IOException {\n-        this.readServerList(stream, null);\n+    public void readServerList(final InputStream inputStream) throws IOException {\n+        this.readServerList(inputStream, null);\n     }\n }\n"}]}
