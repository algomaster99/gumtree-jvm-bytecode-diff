{"diffoscope-json-version": 1, "source1": "first/Archive.class", "source2": "second/Archive.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -31,54 +31,54 @@\n     \n     public Archive(final InputStream inputStream, final JarOutputStream outputStream) {\n         this.logLevel = 1;\n         this.inputStream = inputStream;\n         this.outputStream = outputStream;\n     }\n     \n-    public Archive(final String inputFile, final String outputFile) throws FileNotFoundException, IOException {\n+    public Archive(final String s, final String s2) throws FileNotFoundException, IOException {\n         this.logLevel = 1;\n-        this.inputFileName = inputFile;\n-        this.outputFileName = outputFile;\n-        this.inputStream = new FileInputStream(inputFile);\n-        this.outputStream = new JarOutputStream(new BufferedOutputStream(new FileOutputStream(outputFile)));\n+        this.inputFileName = s;\n+        this.outputFileName = s2;\n+        this.inputStream = new FileInputStream(s);\n+        this.outputStream = new JarOutputStream(new BufferedOutputStream(new FileOutputStream(s2)));\n     }\n     \n     private boolean available(final InputStream inputStream) throws IOException {\n         inputStream.mark(1);\n-        final int check = inputStream.read();\n+        final int read = inputStream.read();\n         inputStream.reset();\n-        return check != -1;\n+        return read != -1;\n     }\n     \n     public void setDeflateHint(final boolean deflateHint) {\n         this.overrideDeflateHint = true;\n         this.deflateHint = deflateHint;\n     }\n     \n-    public void setLogFile(final String logFileName) throws FileNotFoundException {\n-        this.logFile = new FileOutputStream(logFileName);\n+    public void setLogFile(final String name) throws FileNotFoundException {\n+        this.logFile = new FileOutputStream(name);\n     }\n     \n-    public void setLogFile(final String logFileName, final boolean append) throws FileNotFoundException {\n-        this.logFile = new FileOutputStream(logFileName, append);\n+    public void setLogFile(final String name, final boolean append) throws FileNotFoundException {\n+        this.logFile = new FileOutputStream(name, append);\n     }\n     \n-    public void setQuiet(final boolean quiet) {\n-        if (quiet || this.logLevel == 0) {\n+    public void setQuiet(final boolean b) {\n+        if (b || this.logLevel == 0) {\n             this.logLevel = 0;\n         }\n     }\n     \n     public void setRemovePackFile(final boolean removePackFile) {\n         this.removePackFile = removePackFile;\n     }\n     \n-    public void setVerbose(final boolean verbose) {\n-        if (verbose) {\n+    public void setVerbose(final boolean b) {\n+        if (b) {\n             this.logLevel = 2;\n         }\n         else if (this.logLevel == 2) {\n             this.logLevel = 1;\n         }\n     }\n     \n@@ -96,50 +96,50 @@\n                 this.inputStream.reset();\n                 this.inputStream = new BufferedInputStream(new GZIPInputStream(this.inputStream));\n             }\n             else {\n                 this.inputStream.reset();\n             }\n             this.inputStream.mark(4);\n-            final int[] magic = { 202, 254, 208, 13 };\n-            final int[] word = new int[4];\n-            for (int i = 0; i < word.length; ++i) {\n-                word[i] = this.inputStream.read();\n-            }\n-            boolean compressedWithE0 = false;\n-            for (int m = 0; m < magic.length; ++m) {\n-                if (word[m] != magic[m]) {\n-                    compressedWithE0 = true;\n+            final int[] array = { 202, 254, 208, 13 };\n+            final int[] array2 = new int[4];\n+            for (int i = 0; i < array2.length; ++i) {\n+                array2[i] = this.inputStream.read();\n+            }\n+            boolean b = false;\n+            for (int j = 0; j < array.length; ++j) {\n+                if (array2[j] != array[j]) {\n+                    b = true;\n                 }\n             }\n             this.inputStream.reset();\n-            if (compressedWithE0) {\n+            if (b) {\n                 final JarInputStream jarInputStream = new JarInputStream(this.inputStream);\n-                JarEntry jarEntry;\n-                while ((jarEntry = jarInputStream.getNextJarEntry()) != null) {\n-                    this.outputStream.putNextEntry(jarEntry);\n-                    final byte[] bytes = new byte[16384];\n-                    for (int bytesRead = jarInputStream.read(bytes); bytesRead != -1; bytesRead = jarInputStream.read(bytes)) {\n-                        this.outputStream.write(bytes, 0, bytesRead);\n+                JarEntry nextJarEntry;\n+                while ((nextJarEntry = jarInputStream.getNextJarEntry()) != null) {\n+                    this.outputStream.putNextEntry(nextJarEntry);\n+                    final byte[] b2 = new byte[16384];\n+                    for (int k = jarInputStream.read(b2); k != -1; k = jarInputStream.read(b2)) {\n+                        this.outputStream.write(b2, 0, k);\n                     }\n                     this.outputStream.closeEntry();\n                 }\n             }\n             else {\n-                int j = 0;\n+                int l = 0;\n                 while (this.available(this.inputStream)) {\n-                    ++j;\n+                    ++l;\n                     final Segment segment = new Segment();\n                     segment.setLogLevel(this.logLevel);\n                     segment.setLogStream((this.logFile != null) ? this.logFile : System.out);\n                     segment.setPreRead(false);\n-                    if (j == 1) {\n+                    if (l == 1) {\n                         segment.log(2, \"Unpacking from \" + this.inputFileName + \" to \" + this.outputFileName);\n                     }\n-                    segment.log(2, \"Reading segment \" + j);\n+                    segment.log(2, \"Reading segment \" + l);\n                     if (this.overrideDeflateHint) {\n                         segment.overrideDeflateHint(this.deflateHint);\n                     }\n                     segment.unpack(this.inputStream, this.outputStream);\n                     this.outputStream.flush();\n                     if (this.inputStream instanceof FileInputStream) {\n                         this.inputFileName = ((FileInputStream)this.inputStream).getFD().toString();\n@@ -160,18 +160,17 @@\n                 try {\n                     this.logFile.close();\n                 }\n                 catch (final Exception ex3) {}\n             }\n         }\n         if (this.removePackFile) {\n-            boolean deleted = false;\n+            boolean delete = false;\n             if (this.inputFileName != null) {\n-                final File file = new File(this.inputFileName);\n-                deleted = file.delete();\n+                delete = new File(this.inputFileName).delete();\n             }\n-            if (!deleted) {\n+            if (!delete) {\n                 throw new Pack200Exception(\"Failed to delete the input file.\");\n             }\n         }\n     }\n }\n"}]}
