{"diffoscope-json-version": 1, "source1": "first/Archiver.class", "source2": "second/Archiver.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -24,102 +24,102 @@\n import java.nio.file.FileVisitOption;\n import java.util.EnumSet;\n \n public class Archiver\n {\n     public static final EnumSet<FileVisitOption> EMPTY_FileVisitOption;\n     \n-    public void create(final ArchiveOutputStream target, final File directory) throws IOException {\n-        this.create(target, directory.toPath(), Archiver.EMPTY_FileVisitOption, new LinkOption[0]);\n+    public void create(final ArchiveOutputStream archiveOutputStream, final File file) throws IOException {\n+        this.create(archiveOutputStream, file.toPath(), Archiver.EMPTY_FileVisitOption, new LinkOption[0]);\n     }\n     \n-    public void create(final ArchiveOutputStream target, final Path directory, final EnumSet<FileVisitOption> fileVisitOptions, final LinkOption... linkOptions) throws IOException {\n-        Files.walkFileTree(directory, fileVisitOptions, Integer.MAX_VALUE, (FileVisitor<? super Path>)new Archiver.ArchiverFileVisitor(target, directory, linkOptions, (Archiver.Archiver$1)null));\n-        target.finish();\n+    public void create(final ArchiveOutputStream archiveOutputStream, final Path start, final EnumSet<FileVisitOption> options, final LinkOption... array) throws IOException {\n+        Files.walkFileTree(start, options, Integer.MAX_VALUE, (FileVisitor<? super Path>)new Archiver.ArchiverFileVisitor(archiveOutputStream, start, array, (Archiver.Archiver$1)null));\n+        archiveOutputStream.finish();\n     }\n     \n-    public void create(final ArchiveOutputStream target, final Path directory) throws IOException {\n-        this.create(target, directory, Archiver.EMPTY_FileVisitOption, new LinkOption[0]);\n+    public void create(final ArchiveOutputStream archiveOutputStream, final Path path) throws IOException {\n+        this.create(archiveOutputStream, path, Archiver.EMPTY_FileVisitOption, new LinkOption[0]);\n     }\n     \n-    public void create(final SevenZOutputFile target, final File directory) throws IOException {\n-        this.create(target, directory.toPath());\n+    public void create(final SevenZOutputFile sevenZOutputFile, final File file) throws IOException {\n+        this.create(sevenZOutputFile, file.toPath());\n     }\n     \n-    public void create(final SevenZOutputFile target, final Path directory) throws IOException {\n-        Files.walkFileTree(directory, (FileVisitor<? super Path>)new Archiver.Archiver$1(this, (ArchiveOutputStream)null, directory, new LinkOption[0], directory, target));\n-        target.finish();\n+    public void create(final SevenZOutputFile sevenZOutputFile, final Path start) throws IOException {\n+        Files.walkFileTree(start, (FileVisitor<? super Path>)new Archiver.Archiver$1(this, (ArchiveOutputStream)null, start, new LinkOption[0], start, sevenZOutputFile));\n+        sevenZOutputFile.finish();\n     }\n     \n-    public void create(final String format, final File target, final File directory) throws IOException, ArchiveException {\n-        this.create(format, target.toPath(), directory.toPath());\n+    public void create(final String s, final File file, final File file2) throws IOException, ArchiveException {\n+        this.create(s, file.toPath(), file2.toPath());\n     }\n     \n     @Deprecated\n-    public void create(final String format, final OutputStream target, final File directory) throws IOException, ArchiveException {\n-        this.create(format, target, directory, CloseableConsumer.NULL_CONSUMER);\n+    public void create(final String s, final OutputStream outputStream, final File file) throws IOException, ArchiveException {\n+        this.create(s, outputStream, file, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n-    public void create(final String format, final OutputStream target, final File directory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n-            this.create((ArchiveOutputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(format, target)), directory);\n+    public void create(final String s, final OutputStream outputStream, final File file, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n+        try (final CloseableConsumerAdapter closeableConsumerAdapter = new CloseableConsumerAdapter(closeableConsumer)) {\n+            this.create((ArchiveOutputStream)closeableConsumerAdapter.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(s, outputStream)), file);\n         }\n     }\n     \n-    public void create(final String format, final Path target, final Path directory) throws IOException, ArchiveException {\n-        if (this.prefersSeekableByteChannel(format)) {\n-            try (final SeekableByteChannel channel = FileChannel.open(target, StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)) {\n-                this.create(format, channel, directory);\n+    public void create(final String s, final Path path, final Path path2) throws IOException, ArchiveException {\n+        if (this.prefersSeekableByteChannel(s)) {\n+            try (final FileChannel open = FileChannel.open(path, StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)) {\n+                this.create(s, open, path2);\n                 return;\n             }\n         }\n-        try (final ArchiveOutputStream outputStream = ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(format, Files.newOutputStream(target, new OpenOption[0]))) {\n-            this.create(outputStream, directory, Archiver.EMPTY_FileVisitOption, new LinkOption[0]);\n+        try (final ArchiveOutputStream archiveOutputStream = ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(s, Files.newOutputStream(path, new OpenOption[0]))) {\n+            this.create(archiveOutputStream, path2, Archiver.EMPTY_FileVisitOption, new LinkOption[0]);\n         }\n     }\n     \n     @Deprecated\n-    public void create(final String format, final SeekableByteChannel target, final File directory) throws IOException, ArchiveException {\n-        this.create(format, target, directory, CloseableConsumer.NULL_CONSUMER);\n+    public void create(final String s, final SeekableByteChannel seekableByteChannel, final File file) throws IOException, ArchiveException {\n+        this.create(s, seekableByteChannel, file, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n-    public void create(final String format, final SeekableByteChannel target, final File directory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n-            if (!this.prefersSeekableByteChannel(format)) {\n-                this.create(format, (OutputStream)c.track((Closeable)Channels.newOutputStream(target)), directory);\n+    public void create(final String str, final SeekableByteChannel ch, final File file, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n+        try (final CloseableConsumerAdapter closeableConsumerAdapter = new CloseableConsumerAdapter(closeableConsumer)) {\n+            if (!this.prefersSeekableByteChannel(str)) {\n+                this.create(str, (OutputStream)closeableConsumerAdapter.track((Closeable)Channels.newOutputStream(ch)), file);\n             }\n-            else if (\"zip\".equalsIgnoreCase(format)) {\n-                this.create((ArchiveOutputStream)c.track((Closeable)new ZipArchiveOutputStream(target)), directory);\n+            else if (\"zip\".equalsIgnoreCase(str)) {\n+                this.create((ArchiveOutputStream)closeableConsumerAdapter.track((Closeable)new ZipArchiveOutputStream(ch)), file);\n             }\n             else {\n-                if (!\"7z\".equalsIgnoreCase(format)) {\n-                    throw new ArchiveException(\"Don't know how to handle format \" + format);\n+                if (!\"7z\".equalsIgnoreCase(str)) {\n+                    throw new ArchiveException(\"Don't know how to handle format \" + str);\n                 }\n-                this.create((SevenZOutputFile)c.track((Closeable)new SevenZOutputFile(target)), directory);\n+                this.create((SevenZOutputFile)closeableConsumerAdapter.track((Closeable)new SevenZOutputFile(ch)), file);\n             }\n         }\n     }\n     \n-    public void create(final String format, final SeekableByteChannel target, final Path directory) throws IOException {\n-        if (\"7z\".equalsIgnoreCase(format)) {\n-            try (final SevenZOutputFile sevenZFile = new SevenZOutputFile(target)) {\n-                this.create(sevenZFile, directory);\n+    public void create(final String s, final SeekableByteChannel seekableByteChannel, final Path path) throws IOException {\n+        if (\"7z\".equalsIgnoreCase(s)) {\n+            try (final SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(seekableByteChannel)) {\n+                this.create(sevenZOutputFile, path);\n             }\n         }\n         else {\n-            if (!\"zip\".equalsIgnoreCase(format)) {\n-                throw new IllegalStateException(format);\n+            if (!\"zip\".equalsIgnoreCase(s)) {\n+                throw new IllegalStateException(s);\n             }\n-            try (final ArchiveOutputStream archiveOutputStream = (ArchiveOutputStream)new ZipArchiveOutputStream(target)) {\n-                this.create(archiveOutputStream, directory, Archiver.EMPTY_FileVisitOption, new LinkOption[0]);\n+            try (final ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(seekableByteChannel)) {\n+                this.create((ArchiveOutputStream)zipArchiveOutputStream, path, Archiver.EMPTY_FileVisitOption, new LinkOption[0]);\n             }\n         }\n     }\n     \n-    private boolean prefersSeekableByteChannel(final String format) {\n-        return \"zip\".equalsIgnoreCase(format) || \"7z\".equalsIgnoreCase(format);\n+    private boolean prefersSeekableByteChannel(final String s) {\n+        return \"zip\".equalsIgnoreCase(s) || \"7z\".equalsIgnoreCase(s);\n     }\n     \n     static {\n         EMPTY_FileVisitOption = EnumSet.noneOf(FileVisitOption.class);\n     }\n }\n"}]}
