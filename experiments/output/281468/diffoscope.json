{"diffoscope-json-version": 1, "source1": "first/PathUtils$RelativeSortedPaths.class", "source2": "second/PathUtils$RelativeSortedPaths.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,46 +11,42 @@\n \n private static class RelativeSortedPaths\n {\n     final boolean equals;\n     final List<Path> relativeFileList1;\n     final List<Path> relativeFileList2;\n     \n-    private RelativeSortedPaths(final Path dir1, final Path dir2, final int maxDepth, final LinkOption[] linkOptions, final FileVisitOption[] fileVisitOptions) throws IOException {\n-        List<Path> tmpRelativeFileList1 = null;\n-        List<Path> tmpRelativeFileList2 = null;\n-        if (dir1 == null && dir2 == null) {\n+    private RelativeSortedPaths(final Path path, final Path path2, final int n, final LinkOption[] array, final FileVisitOption[] array2) throws IOException {\n+        List relativizeFiles = null;\n+        List relativizeFiles2 = null;\n+        if (path == null && path2 == null) {\n             this.equals = true;\n         }\n-        else if (dir1 == null ^ dir2 == null) {\n+        else if (path == null ^ path2 == null) {\n             this.equals = false;\n         }\n         else {\n-            final boolean parentDirNotExists1 = Files.notExists(dir1, linkOptions);\n-            final boolean parentDirNotExists2 = Files.notExists(dir2, linkOptions);\n-            if (parentDirNotExists1 || parentDirNotExists2) {\n-                this.equals = (parentDirNotExists1 && parentDirNotExists2);\n+            final boolean notExists = Files.notExists(path, array);\n+            final boolean notExists2 = Files.notExists(path2, array);\n+            if (notExists || notExists2) {\n+                this.equals = (notExists && notExists2);\n             }\n             else {\n-                final AccumulatorPathVisitor visitor1 = PathUtils.access$000(dir1, maxDepth, fileVisitOptions);\n-                final AccumulatorPathVisitor visitor2 = PathUtils.access$000(dir2, maxDepth, fileVisitOptions);\n-                if (visitor1.getDirList().size() != visitor2.getDirList().size() || visitor1.getFileList().size() != visitor2.getFileList().size()) {\n+                final AccumulatorPathVisitor access$000 = PathUtils.access$000(path, n, array2);\n+                final AccumulatorPathVisitor access$2 = PathUtils.access$000(path2, n, array2);\n+                if (access$000.getDirList().size() != access$2.getDirList().size() || access$000.getFileList().size() != access$2.getFileList().size()) {\n+                    this.equals = false;\n+                }\n+                else if (!access$000.relativizeDirectories(path, true, (Comparator)null).equals(access$2.relativizeDirectories(path2, true, (Comparator)null))) {\n                     this.equals = false;\n                 }\n                 else {\n-                    final List<Path> tmpRelativeDirList1 = visitor1.relativizeDirectories(dir1, true, (Comparator)null);\n-                    final List<Path> tmpRelativeDirList2 = visitor2.relativizeDirectories(dir2, true, (Comparator)null);\n-                    if (!tmpRelativeDirList1.equals(tmpRelativeDirList2)) {\n-                        this.equals = false;\n-                    }\n-                    else {\n-                        tmpRelativeFileList1 = visitor1.relativizeFiles(dir1, true, (Comparator)null);\n-                        tmpRelativeFileList2 = visitor2.relativizeFiles(dir2, true, (Comparator)null);\n-                        this.equals = tmpRelativeFileList1.equals(tmpRelativeFileList2);\n-                    }\n+                    relativizeFiles = access$000.relativizeFiles(path, true, (Comparator)null);\n+                    relativizeFiles2 = access$2.relativizeFiles(path2, true, (Comparator)null);\n+                    this.equals = relativizeFiles.equals(relativizeFiles2);\n                 }\n             }\n         }\n-        this.relativeFileList1 = tmpRelativeFileList1;\n-        this.relativeFileList2 = tmpRelativeFileList2;\n+        this.relativeFileList1 = relativizeFiles;\n+        this.relativeFileList2 = relativizeFiles2;\n     }\n }\n"}]}
