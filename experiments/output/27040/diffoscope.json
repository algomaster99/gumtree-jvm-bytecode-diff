{"diffoscope-json-version": 1, "source1": "first/SeekableInMemoryByteChannel.class", "source2": "second/SeekableInMemoryByteChannel.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,134 +1,134 @@\n-  SHA-256 checksum 0ded26d092413ac5bd819a7ff3d03bec3c057e5aa7f1f396c06403d0ceb6b306\n+  SHA-256 checksum 5b5f84ea5cbe27f8d267f5a8373c86cd43f07a71538e5be229cadd9de7f8acec\n   Compiled from \"SeekableInMemoryByteChannel.java\"\n public class org.apache.commons.compress.utils.SeekableInMemoryByteChannel implements java.nio.channels.SeekableByteChannel\n   minor version: 0\n   major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #24                         // org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n-  super_class: #30                        // java/lang/Object\n+  this_class: #13                         // org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+  super_class: #4                         // java/lang/Object\n   interfaces: 1, fields: 5, methods: 14, attributes: 1\n Constant pool:\n-    #1 = Class              #79           // java/lang/Integer\n-    #2 = Methodref          #30.#80       // java/lang/Object.\"<init>\":()V\n-    #3 = Class              #81           // java/util/concurrent/atomic/AtomicBoolean\n-    #4 = Methodref          #3.#80        // java/util/concurrent/atomic/AtomicBoolean.\"<init>\":()V\n-    #5 = Fieldref           #24.#82       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-    #6 = Fieldref           #24.#83       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.data:[B\n-    #7 = Fieldref           #24.#84       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.size:I\n-    #8 = Methodref          #24.#85       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n-    #9 = Fieldref           #24.#86       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.position:I\n-   #10 = Methodref          #24.#87       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.ensureOpen:()V\n-   #11 = Long               2147483647l\n-   #13 = Class              #88           // java/lang/IllegalArgumentException\n-   #14 = String             #89           // Position has to be in range 0.. 2147483647\n-   #15 = Methodref          #13.#90       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #16 = String             #91           // Size has to be in range 0.. 2147483647\n-   #17 = Methodref          #92.#93       // java/nio/ByteBuffer.remaining:()I\n-   #18 = Methodref          #92.#94       // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n-   #19 = Methodref          #3.#95        // java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n-   #20 = Methodref          #3.#96        // java/util/concurrent/atomic/AtomicBoolean.get:()Z\n-   #21 = Integer            2147483647\n-   #22 = Methodref          #24.#97       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.resize:(I)V\n-   #23 = Methodref          #92.#98       // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n-   #24 = Class              #99           // org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n-   #25 = Integer            1073741823\n-   #26 = Methodref          #100.#101     // java/util/Arrays.copyOf:([BI)[B\n-   #27 = Methodref          #24.#102      // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.isOpen:()Z\n-   #28 = Class              #103          // java/nio/channels/ClosedChannelException\n-   #29 = Methodref          #28.#80       // java/nio/channels/ClosedChannelException.\"<init>\":()V\n-   #30 = Class              #104          // java/lang/Object\n-   #31 = Class              #105          // java/nio/channels/SeekableByteChannel\n-   #32 = Utf8               NAIVE_RESIZE_LIMIT\n-   #33 = Utf8               I\n-   #34 = Utf8               ConstantValue\n-   #35 = Utf8               data\n-   #36 = Utf8               [B\n-   #37 = Utf8               closed\n-   #38 = Utf8               Ljava/util/concurrent/atomic/AtomicBoolean;\n-   #39 = Utf8               position\n-   #40 = Utf8               size\n-   #41 = Utf8               <init>\n-   #42 = Utf8               ([B)V\n-   #43 = Utf8               Code\n-   #44 = Utf8               LineNumberTable\n-   #45 = Utf8               LocalVariableTable\n-   #46 = Utf8               this\n-   #47 = Utf8               Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n-   #48 = Utf8               ()V\n-   #49 = Utf8               (I)V\n-   #50 = Utf8               ()J\n-   #51 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-   #52 = Utf8               newPosition\n-   #53 = Utf8               J\n-   #54 = Utf8               StackMapTable\n-   #55 = Utf8               Exceptions\n-   #56 = Class              #106          // java/io/IOException\n-   #57 = Utf8               truncate\n-   #58 = Utf8               newSize\n-   #59 = Utf8               read\n-   #60 = Utf8               (Ljava/nio/ByteBuffer;)I\n-   #61 = Utf8               buf\n-   #62 = Utf8               Ljava/nio/ByteBuffer;\n-   #63 = Utf8               wanted\n-   #64 = Utf8               possible\n-   #65 = Utf8               close\n-   #66 = Utf8               isOpen\n-   #67 = Utf8               ()Z\n-   #68 = Utf8               write\n-   #69 = Utf8               b\n-   #70 = Utf8               possibleWithoutResize\n-   #71 = Utf8               array\n-   #72 = Utf8               ()[B\n-   #73 = Utf8               resize\n-   #74 = Utf8               newLength\n-   #75 = Utf8               len\n-   #76 = Utf8               ensureOpen\n-   #77 = Utf8               SourceFile\n-   #78 = Utf8               SeekableInMemoryByteChannel.java\n-   #79 = Utf8               java/lang/Integer\n-   #80 = NameAndType        #41:#48       // \"<init>\":()V\n-   #81 = Utf8               java/util/concurrent/atomic/AtomicBoolean\n-   #82 = NameAndType        #37:#38       // closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-   #83 = NameAndType        #35:#36       // data:[B\n-   #84 = NameAndType        #40:#33       // size:I\n-   #85 = NameAndType        #41:#42       // \"<init>\":([B)V\n-   #86 = NameAndType        #39:#33       // position:I\n-   #87 = NameAndType        #76:#48       // ensureOpen:()V\n-   #88 = Utf8               java/lang/IllegalArgumentException\n-   #89 = Utf8               Position has to be in range 0.. 2147483647\n-   #90 = NameAndType        #41:#107      // \"<init>\":(Ljava/lang/String;)V\n-   #91 = Utf8               Size has to be in range 0.. 2147483647\n-   #92 = Class              #108          // java/nio/ByteBuffer\n-   #93 = NameAndType        #109:#110     // remaining:()I\n-   #94 = NameAndType        #111:#112     // put:([BII)Ljava/nio/ByteBuffer;\n-   #95 = NameAndType        #113:#114     // set:(Z)V\n-   #96 = NameAndType        #115:#67      // get:()Z\n-   #97 = NameAndType        #73:#49       // resize:(I)V\n-   #98 = NameAndType        #115:#112     // get:([BII)Ljava/nio/ByteBuffer;\n-   #99 = Utf8               org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n-  #100 = Class              #116          // java/util/Arrays\n-  #101 = NameAndType        #117:#118     // copyOf:([BI)[B\n-  #102 = NameAndType        #66:#67       // isOpen:()Z\n-  #103 = Utf8               java/nio/channels/ClosedChannelException\n-  #104 = Utf8               java/lang/Object\n-  #105 = Utf8               java/nio/channels/SeekableByteChannel\n-  #106 = Utf8               java/io/IOException\n-  #107 = Utf8               (Ljava/lang/String;)V\n-  #108 = Utf8               java/nio/ByteBuffer\n-  #109 = Utf8               remaining\n-  #110 = Utf8               ()I\n-  #111 = Utf8               put\n-  #112 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #113 = Utf8               set\n-  #114 = Utf8               (Z)V\n-  #115 = Utf8               get\n-  #116 = Utf8               java/util/Arrays\n-  #117 = Utf8               copyOf\n-  #118 = Utf8               ([BI)[B\n+    #1 = Class              #2            // java/lang/Integer\n+    #2 = Utf8               java/lang/Integer\n+    #3 = Methodref          #4.#5         // java/lang/Object.\"<init>\":()V\n+    #4 = Class              #6            // java/lang/Object\n+    #5 = NameAndType        #7:#8         // \"<init>\":()V\n+    #6 = Utf8               java/lang/Object\n+    #7 = Utf8               <init>\n+    #8 = Utf8               ()V\n+    #9 = Class              #10           // java/util/concurrent/atomic/AtomicBoolean\n+   #10 = Utf8               java/util/concurrent/atomic/AtomicBoolean\n+   #11 = Methodref          #9.#5         // java/util/concurrent/atomic/AtomicBoolean.\"<init>\":()V\n+   #12 = Fieldref           #13.#14       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #13 = Class              #15           // org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+   #14 = NameAndType        #16:#17       // closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #15 = Utf8               org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+   #16 = Utf8               closed\n+   #17 = Utf8               Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #18 = Fieldref           #13.#19       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.data:[B\n+   #19 = NameAndType        #20:#21       // data:[B\n+   #20 = Utf8               data\n+   #21 = Utf8               [B\n+   #22 = Fieldref           #13.#23       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.size:I\n+   #23 = NameAndType        #24:#25       // size:I\n+   #24 = Utf8               size\n+   #25 = Utf8               I\n+   #26 = Methodref          #13.#27       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n+   #27 = NameAndType        #7:#28        // \"<init>\":([B)V\n+   #28 = Utf8               ([B)V\n+   #29 = Fieldref           #13.#30       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.position:I\n+   #30 = NameAndType        #31:#25       // position:I\n+   #31 = Utf8               position\n+   #32 = Methodref          #13.#33       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.ensureOpen:()V\n+   #33 = NameAndType        #34:#8        // ensureOpen:()V\n+   #34 = Utf8               ensureOpen\n+   #35 = Long               2147483647l\n+   #37 = Class              #38           // java/lang/IllegalArgumentException\n+   #38 = Utf8               java/lang/IllegalArgumentException\n+   #39 = String             #40           // Position has to be in range 0.. 2147483647\n+   #40 = Utf8               Position has to be in range 0.. 2147483647\n+   #41 = Methodref          #37.#42       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #42 = NameAndType        #7:#43        // \"<init>\":(Ljava/lang/String;)V\n+   #43 = Utf8               (Ljava/lang/String;)V\n+   #44 = String             #45           // Size has to be in range 0.. 2147483647\n+   #45 = Utf8               Size has to be in range 0.. 2147483647\n+   #46 = Methodref          #47.#48       // java/nio/ByteBuffer.remaining:()I\n+   #47 = Class              #49           // java/nio/ByteBuffer\n+   #48 = NameAndType        #50:#51       // remaining:()I\n+   #49 = Utf8               java/nio/ByteBuffer\n+   #50 = Utf8               remaining\n+   #51 = Utf8               ()I\n+   #52 = Methodref          #47.#53       // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n+   #53 = NameAndType        #54:#55       // put:([BII)Ljava/nio/ByteBuffer;\n+   #54 = Utf8               put\n+   #55 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+   #56 = Methodref          #9.#57        // java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n+   #57 = NameAndType        #58:#59       // set:(Z)V\n+   #58 = Utf8               set\n+   #59 = Utf8               (Z)V\n+   #60 = Methodref          #9.#61        // java/util/concurrent/atomic/AtomicBoolean.get:()Z\n+   #61 = NameAndType        #62:#63       // get:()Z\n+   #62 = Utf8               get\n+   #63 = Utf8               ()Z\n+   #64 = Integer            2147483647\n+   #65 = Methodref          #13.#66       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.resize:(I)V\n+   #66 = NameAndType        #67:#68       // resize:(I)V\n+   #67 = Utf8               resize\n+   #68 = Utf8               (I)V\n+   #69 = Methodref          #47.#70       // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+   #70 = NameAndType        #62:#55       // get:([BII)Ljava/nio/ByteBuffer;\n+   #71 = Integer            1073741823\n+   #72 = Methodref          #73.#74       // java/util/Arrays.copyOf:([BI)[B\n+   #73 = Class              #75           // java/util/Arrays\n+   #74 = NameAndType        #76:#77       // copyOf:([BI)[B\n+   #75 = Utf8               java/util/Arrays\n+   #76 = Utf8               copyOf\n+   #77 = Utf8               ([BI)[B\n+   #78 = Methodref          #13.#79       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.isOpen:()Z\n+   #79 = NameAndType        #80:#63       // isOpen:()Z\n+   #80 = Utf8               isOpen\n+   #81 = Class              #82           // java/nio/channels/ClosedChannelException\n+   #82 = Utf8               java/nio/channels/ClosedChannelException\n+   #83 = Methodref          #81.#5        // java/nio/channels/ClosedChannelException.\"<init>\":()V\n+   #84 = Class              #85           // java/nio/channels/SeekableByteChannel\n+   #85 = Utf8               java/nio/channels/SeekableByteChannel\n+   #86 = Utf8               NAIVE_RESIZE_LIMIT\n+   #87 = Utf8               ConstantValue\n+   #88 = Utf8               Code\n+   #89 = Utf8               LineNumberTable\n+   #90 = Utf8               LocalVariableTable\n+   #91 = Utf8               this\n+   #92 = Utf8               Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n+   #93 = Utf8               ()J\n+   #94 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+   #95 = Utf8               newPosition\n+   #96 = Utf8               J\n+   #97 = Utf8               StackMapTable\n+   #98 = Utf8               Exceptions\n+   #99 = Class              #100          // java/io/IOException\n+  #100 = Utf8               java/io/IOException\n+  #101 = Utf8               truncate\n+  #102 = Utf8               newSize\n+  #103 = Utf8               read\n+  #104 = Utf8               (Ljava/nio/ByteBuffer;)I\n+  #105 = Utf8               buf\n+  #106 = Utf8               Ljava/nio/ByteBuffer;\n+  #107 = Utf8               wanted\n+  #108 = Utf8               possible\n+  #109 = Utf8               close\n+  #110 = Utf8               write\n+  #111 = Utf8               b\n+  #112 = Utf8               possibleWithoutResize\n+  #113 = Utf8               array\n+  #114 = Utf8               ()[B\n+  #115 = Utf8               newLength\n+  #116 = Utf8               len\n+  #117 = Utf8               SourceFile\n+  #118 = Utf8               SeekableInMemoryByteChannel.java\n {\n   private static final int NAIVE_RESIZE_LIMIT = 1073741823;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 1073741823\n \n   private byte[] data;\n@@ -149,27 +149,27 @@\n \n   public org.apache.commons.compress.utils.SeekableInMemoryByteChannel(byte[]);\n     descriptor: ([B)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #3                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n-         5: new           #3                  // class java/util/concurrent/atomic/AtomicBoolean\n+         5: new           #9                  // class java/util/concurrent/atomic/AtomicBoolean\n          8: dup\n-         9: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicBoolean.\"<init>\":()V\n-        12: putfield      #5                  // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+         9: invokespecial #11                 // Method java/util/concurrent/atomic/AtomicBoolean.\"<init>\":()V\n+        12: putfield      #12                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n         15: aload_0\n         16: aload_1\n-        17: putfield      #6                  // Field data:[B\n+        17: putfield      #18                 // Field data:[B\n         20: aload_0\n         21: aload_1\n         22: arraylength\n-        23: putfield      #7                  // Field size:I\n+        23: putfield      #22                 // Field size:I\n         26: return\n       LineNumberTable:\n         line 55: 0\n         line 44: 4\n         line 56: 15\n         line 57: 20\n         line 58: 26\n@@ -182,15 +182,15 @@\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_0\n          2: newarray       byte\n-         4: invokespecial #8                  // Method \"<init>\":([B)V\n+         4: invokespecial #26                 // Method \"<init>\":([B)V\n          7: return\n       LineNumberTable:\n         line 64: 0\n         line 65: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n@@ -199,15 +199,15 @@\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: newarray       byte\n-         4: invokespecial #8                  // Method \"<init>\":([B)V\n+         4: invokespecial #26                 // Method \"<init>\":([B)V\n          7: return\n       LineNumberTable:\n         line 75: 0\n         line 76: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n@@ -215,47 +215,47 @@\n \n   public long position();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #9                  // Field position:I\n+         1: getfield      #29                 // Field position:I\n          4: i2l\n          5: lreturn\n       LineNumberTable:\n         line 87: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n \n   public java.nio.channels.SeekableByteChannel position(long) throws java.io.IOException;\n     descriptor: (J)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=2\n          0: aload_0\n-         1: invokespecial #10                 // Method ensureOpen:()V\n+         1: invokespecial #32                 // Method ensureOpen:()V\n          4: lload_1\n          5: lconst_0\n          6: lcmp\n          7: iflt          18\n         10: lload_1\n-        11: ldc2_w        #11                 // long 2147483647l\n+        11: ldc2_w        #35                 // long 2147483647l\n         14: lcmp\n         15: ifle          28\n-        18: new           #13                 // class java/lang/IllegalArgumentException\n+        18: new           #37                 // class java/lang/IllegalArgumentException\n         21: dup\n-        22: ldc           #14                 // String Position has to be in range 0.. 2147483647\n-        24: invokespecial #15                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        22: ldc           #39                 // String Position has to be in range 0.. 2147483647\n+        24: invokespecial #41                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         27: athrow\n         28: aload_0\n         29: lload_1\n         30: l2i\n-        31: putfield      #9                  // Field position:I\n+        31: putfield      #29                 // Field position:I\n         34: aload_0\n         35: areturn\n       LineNumberTable:\n         line 92: 0\n         line 93: 4\n         line 94: 18\n         line 96: 28\n@@ -272,15 +272,15 @@\n \n   public long size();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field size:I\n+         1: getfield      #22                 // Field size:I\n          4: i2l\n          5: lreturn\n       LineNumberTable:\n         line 108: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n@@ -291,42 +291,42 @@\n     Code:\n       stack=4, locals=3, args_size=2\n          0: lload_1\n          1: lconst_0\n          2: lcmp\n          3: iflt          14\n          6: lload_1\n-         7: ldc2_w        #11                 // long 2147483647l\n+         7: ldc2_w        #35                 // long 2147483647l\n         10: lcmp\n         11: ifle          24\n-        14: new           #13                 // class java/lang/IllegalArgumentException\n+        14: new           #37                 // class java/lang/IllegalArgumentException\n         17: dup\n-        18: ldc           #16                 // String Size has to be in range 0.. 2147483647\n-        20: invokespecial #15                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        18: ldc           #44                 // String Size has to be in range 0.. 2147483647\n+        20: invokespecial #41                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         23: athrow\n         24: aload_0\n-        25: getfield      #7                  // Field size:I\n+        25: getfield      #22                 // Field size:I\n         28: i2l\n         29: lload_1\n         30: lcmp\n         31: ifle          40\n         34: aload_0\n         35: lload_1\n         36: l2i\n-        37: putfield      #7                  // Field size:I\n+        37: putfield      #22                 // Field size:I\n         40: aload_0\n-        41: getfield      #9                  // Field position:I\n+        41: getfield      #29                 // Field position:I\n         44: i2l\n         45: lload_1\n         46: lcmp\n         47: ifle          56\n         50: aload_0\n         51: lload_1\n         52: l2i\n-        53: putfield      #9                  // Field position:I\n+        53: putfield      #29                 // Field position:I\n         56: aload_0\n         57: areturn\n       LineNumberTable:\n         line 119: 0\n         line 120: 14\n         line 122: 24\n         line 123: 34\n@@ -345,47 +345,47 @@\n \n   public int read(java.nio.ByteBuffer) throws java.io.IOException;\n     descriptor: (Ljava/nio/ByteBuffer;)I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=2\n          0: aload_0\n-         1: invokespecial #10                 // Method ensureOpen:()V\n+         1: invokespecial #32                 // Method ensureOpen:()V\n          4: aload_1\n-         5: invokevirtual #17                 // Method java/nio/ByteBuffer.remaining:()I\n+         5: invokevirtual #46                 // Method java/nio/ByteBuffer.remaining:()I\n          8: istore_2\n          9: aload_0\n-        10: getfield      #7                  // Field size:I\n+        10: getfield      #22                 // Field size:I\n         13: aload_0\n-        14: getfield      #9                  // Field position:I\n+        14: getfield      #29                 // Field position:I\n         17: isub\n         18: istore_3\n         19: iload_3\n         20: ifgt          25\n         23: iconst_m1\n         24: ireturn\n         25: iload_2\n         26: iload_3\n         27: if_icmple     32\n         30: iload_3\n         31: istore_2\n         32: aload_1\n         33: aload_0\n-        34: getfield      #6                  // Field data:[B\n+        34: getfield      #18                 // Field data:[B\n         37: aload_0\n-        38: getfield      #9                  // Field position:I\n+        38: getfield      #29                 // Field position:I\n         41: iload_2\n-        42: invokevirtual #18                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n+        42: invokevirtual #52                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n         45: pop\n         46: aload_0\n         47: dup\n-        48: getfield      #9                  // Field position:I\n+        48: getfield      #29                 // Field position:I\n         51: iload_2\n         52: iadd\n-        53: putfield      #9                  // Field position:I\n+        53: putfield      #29                 // Field position:I\n         56: iload_2\n         57: ireturn\n       LineNumberTable:\n         line 133: 0\n         line 134: 4\n         line 135: 9\n         line 136: 19\n@@ -411,33 +411,33 @@\n \n   public void close();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+         1: getfield      #12                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n          4: iconst_1\n-         5: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n+         5: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n          8: return\n       LineNumberTable:\n         line 149: 0\n         line 150: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n \n   public boolean isOpen();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-         4: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z\n+         1: getfield      #12                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+         4: invokevirtual #60                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z\n          7: ifne          14\n         10: iconst_1\n         11: goto          15\n         14: iconst_0\n         15: ireturn\n       LineNumberTable:\n         line 154: 0\n@@ -451,69 +451,69 @@\n \n   public int write(java.nio.ByteBuffer) throws java.io.IOException;\n     descriptor: (Ljava/nio/ByteBuffer;)I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=5, args_size=2\n          0: aload_0\n-         1: invokespecial #10                 // Method ensureOpen:()V\n+         1: invokespecial #32                 // Method ensureOpen:()V\n          4: aload_1\n-         5: invokevirtual #17                 // Method java/nio/ByteBuffer.remaining:()I\n+         5: invokevirtual #46                 // Method java/nio/ByteBuffer.remaining:()I\n          8: istore_2\n          9: aload_0\n-        10: getfield      #7                  // Field size:I\n+        10: getfield      #22                 // Field size:I\n         13: aload_0\n-        14: getfield      #9                  // Field position:I\n+        14: getfield      #29                 // Field position:I\n         17: isub\n         18: istore_3\n         19: iload_2\n         20: iload_3\n         21: if_icmple     60\n         24: aload_0\n-        25: getfield      #9                  // Field position:I\n+        25: getfield      #29                 // Field position:I\n         28: iload_2\n         29: iadd\n         30: istore        4\n         32: iload         4\n         34: ifge          54\n         37: aload_0\n-        38: ldc           #21                 // int 2147483647\n-        40: invokespecial #22                 // Method resize:(I)V\n-        43: ldc           #21                 // int 2147483647\n+        38: ldc           #64                 // int 2147483647\n+        40: invokespecial #65                 // Method resize:(I)V\n+        43: ldc           #64                 // int 2147483647\n         45: aload_0\n-        46: getfield      #9                  // Field position:I\n+        46: getfield      #29                 // Field position:I\n         49: isub\n         50: istore_2\n         51: goto          60\n         54: aload_0\n         55: iload         4\n-        57: invokespecial #22                 // Method resize:(I)V\n+        57: invokespecial #65                 // Method resize:(I)V\n         60: aload_1\n         61: aload_0\n-        62: getfield      #6                  // Field data:[B\n+        62: getfield      #18                 // Field data:[B\n         65: aload_0\n-        66: getfield      #9                  // Field position:I\n+        66: getfield      #29                 // Field position:I\n         69: iload_2\n-        70: invokevirtual #23                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+        70: invokevirtual #69                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n         73: pop\n         74: aload_0\n         75: dup\n-        76: getfield      #9                  // Field position:I\n+        76: getfield      #29                 // Field position:I\n         79: iload_2\n         80: iadd\n-        81: putfield      #9                  // Field position:I\n+        81: putfield      #29                 // Field position:I\n         84: aload_0\n-        85: getfield      #7                  // Field size:I\n+        85: getfield      #22                 // Field size:I\n         88: aload_0\n-        89: getfield      #9                  // Field position:I\n+        89: getfield      #29                 // Field position:I\n         92: if_icmpge     103\n         95: aload_0\n         96: aload_0\n-        97: getfield      #9                  // Field position:I\n-       100: putfield      #7                  // Field size:I\n+        97: getfield      #29                 // Field position:I\n+       100: putfield      #22                 // Field size:I\n        103: iload_2\n        104: ireturn\n       LineNumberTable:\n         line 159: 0\n         line 160: 4\n         line 161: 9\n         line 162: 19\n@@ -546,54 +546,54 @@\n \n   public byte[] array();\n     descriptor: ()[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field data:[B\n+         1: getfield      #18                 // Field data:[B\n          4: areturn\n       LineNumberTable:\n         line 189: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n \n   private void resize(int);\n     descriptor: (I)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #6                  // Field data:[B\n+         1: getfield      #18                 // Field data:[B\n          4: arraylength\n          5: istore_2\n          6: iload_2\n          7: ifgt          12\n         10: iconst_1\n         11: istore_2\n         12: iload_1\n-        13: ldc           #25                 // int 1073741823\n+        13: ldc           #71                 // int 1073741823\n         15: if_icmpge     30\n         18: iload_2\n         19: iload_1\n         20: if_icmpge     32\n         23: iload_2\n         24: iconst_1\n         25: ishl\n         26: istore_2\n         27: goto          18\n         30: iload_1\n         31: istore_2\n         32: aload_0\n         33: aload_0\n-        34: getfield      #6                  // Field data:[B\n+        34: getfield      #18                 // Field data:[B\n         37: iload_2\n-        38: invokestatic  #26                 // Method java/util/Arrays.copyOf:([BI)[B\n-        41: putfield      #6                  // Field data:[B\n+        38: invokestatic  #72                 // Method java/util/Arrays.copyOf:([BI)[B\n+        41: putfield      #18                 // Field data:[B\n         44: return\n       LineNumberTable:\n         line 193: 0\n         line 194: 6\n         line 195: 10\n         line 197: 12\n         line 198: 18\n@@ -616,19 +616,19 @@\n \n   private void ensureOpen() throws java.nio.channels.ClosedChannelException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #27                 // Method isOpen:()Z\n+         1: invokevirtual #78                 // Method isOpen:()Z\n          4: ifne          15\n-         7: new           #28                 // class java/nio/channels/ClosedChannelException\n+         7: new           #81                 // class java/nio/channels/ClosedChannelException\n         10: dup\n-        11: invokespecial #29                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n+        11: invokespecial #83                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n         14: athrow\n         15: return\n       LineNumberTable:\n         line 208: 0\n         line 209: 7\n         line 211: 15\n       LocalVariableTable:\n"}]}
