{"diffoscope-json-version": 1, "source1": "first/ExtendedBufferedReader.class", "source2": "second/ExtendedBufferedReader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,59 +8,59 @@\n final class ExtendedBufferedReader extends BufferedReader\n {\n     private int lastChar;\n     private long eolCounter;\n     private long position;\n     private boolean closed;\n     \n-    ExtendedBufferedReader(final Reader reader) {\n-        super(reader);\n+    ExtendedBufferedReader(final Reader in) {\n+        super(in);\n         this.lastChar = -2;\n     }\n     \n     @Override\n     public int read() throws IOException {\n-        final int current = super.read();\n-        if (current == 13 || (current == 10 && this.lastChar != 13)) {\n+        final int read = super.read();\n+        if (read == 13 || (read == 10 && this.lastChar != 13)) {\n             ++this.eolCounter;\n         }\n-        this.lastChar = current;\n+        this.lastChar = read;\n         ++this.position;\n         return this.lastChar;\n     }\n     \n     int getLastChar() {\n         return this.lastChar;\n     }\n     \n     @Override\n-    public int read(final char[] buf, final int offset, final int length) throws IOException {\n-        if (length == 0) {\n+    public int read(final char[] cbuf, final int off, final int len) throws IOException {\n+        if (len == 0) {\n             return 0;\n         }\n-        final int len = super.read(buf, offset, length);\n-        if (len > 0) {\n-            for (int i = offset; i < offset + len; ++i) {\n-                final char ch = buf[i];\n-                if (ch == '\\n') {\n-                    if (13 != ((i > 0) ? buf[i - 1] : this.lastChar)) {\n+        final int read = super.read(cbuf, off, len);\n+        if (read > 0) {\n+            for (int i = off; i < off + read; ++i) {\n+                final char c = cbuf[i];\n+                if (c == '\\n') {\n+                    if (13 != ((i > 0) ? cbuf[i - 1] : this.lastChar)) {\n                         ++this.eolCounter;\n                     }\n                 }\n-                else if (ch == '\\r') {\n+                else if (c == '\\r') {\n                     ++this.eolCounter;\n                 }\n             }\n-            this.lastChar = buf[offset + len - 1];\n+            this.lastChar = cbuf[off + read - 1];\n         }\n-        else if (len == -1) {\n+        else if (read == -1) {\n             this.lastChar = -1;\n         }\n-        this.position += len;\n-        return len;\n+        this.position += read;\n+        return read;\n     }\n     \n     @Override\n     public String readLine() throws IOException {\n         final String line = super.readLine();\n         if (line != null) {\n             this.lastChar = 10;\n@@ -70,17 +70,17 @@\n             this.lastChar = -1;\n         }\n         return line;\n     }\n     \n     int lookAhead() throws IOException {\n         super.mark(1);\n-        final int c = super.read();\n+        final int read = super.read();\n         super.reset();\n-        return c;\n+        return read;\n     }\n     \n     long getCurrentLineNumber() {\n         if (this.lastChar == 13 || this.lastChar == 10 || this.lastChar == -2 || this.lastChar == -1) {\n             return this.eolCounter;\n         }\n         return this.eolCounter + 1L;\n"}]}
