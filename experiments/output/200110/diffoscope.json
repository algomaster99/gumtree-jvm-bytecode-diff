{"diffoscope-json-version": 1, "source1": "first/FieldGen.class", "source2": "second/FieldGen.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,14 +1,13 @@\n \n package org.apache.bcel.generic;\n \n import org.apache.bcel.classfile.AnnotationEntry;\n import java.util.Iterator;\n import org.apache.bcel.classfile.Utility;\n-import org.apache.bcel.classfile.Constant;\n import org.apache.bcel.classfile.ConstantPool;\n import org.apache.bcel.classfile.ConstantObject;\n import java.util.ArrayList;\n import java.util.function.Consumer;\n import java.util.stream.Stream;\n import org.apache.bcel.classfile.Attribute;\n import org.apache.bcel.classfile.Annotations;\n@@ -23,45 +22,42 @@\n     private Object value;\n     private List<FieldObserver> observers;\n     \n     public static BCELComparator getComparator() {\n         return FieldGen.bcelComparator;\n     }\n     \n-    public static void setComparator(final BCELComparator comparator) {\n-        FieldGen.bcelComparator = comparator;\n+    public static void setComparator(final BCELComparator bcelComparator) {\n+        FieldGen.bcelComparator = bcelComparator;\n     }\n     \n-    public FieldGen(final Field field, final ConstantPoolGen cp) {\n-        this(field.getAccessFlags(), Type.getType(field.getSignature()), field.getName(), cp);\n-        final Attribute[] attributes;\n-        final Attribute[] attrs = attributes = field.getAttributes();\n-        for (final Attribute attr : attributes) {\n-            if (attr instanceof ConstantValue) {\n-                this.setValue(((ConstantValue)attr).getConstantValueIndex());\n-            }\n-            else if (attr instanceof Annotations) {\n-                final Annotations runtimeAnnotations = (Annotations)attr;\n-                runtimeAnnotations.forEach(element -> this.addAnnotationEntry(new AnnotationEntryGen(element, cp, false)));\n+    public FieldGen(final Field field, final ConstantPoolGen constantPoolGen) {\n+        this(field.getAccessFlags(), Type.getType(field.getSignature()), field.getName(), constantPoolGen);\n+        for (final Attribute attribute : field.getAttributes()) {\n+            if (attribute instanceof ConstantValue) {\n+                this.setValue(((ConstantValue)attribute).getConstantValueIndex());\n+            }\n+            else if (attribute instanceof Annotations) {\n+                ((Annotations)attribute).forEach(annotationEntry -> this.addAnnotationEntry(new AnnotationEntryGen(annotationEntry, constantPoolGen2, (boolean)(0 != 0))));\n             }\n             else {\n-                this.addAttribute(attr);\n+                this.addAttribute(attribute);\n             }\n         }\n     }\n     \n-    public FieldGen(final int accessFlags, final Type type, final String name, final ConstantPoolGen cp) {\n-        super(accessFlags);\n+    public FieldGen(final int n, final Type type, final String name, final ConstantPoolGen constantPool) {\n+        super(n);\n         this.setType(type);\n         this.setName(name);\n-        this.setConstantPool(cp);\n+        this.setConstantPool(constantPool);\n     }\n     \n-    private void addAnnotationsAsAttribute(final ConstantPoolGen cp) {\n-        Stream.of(AnnotationEntryGen.getAnnotationAttributes(cp, super.getAnnotationEntries())).forEach(this::addAttribute);\n+    private void addAnnotationsAsAttribute(final ConstantPoolGen constantPoolGen) {\n+        Stream.of(AnnotationEntryGen.getAnnotationAttributes(constantPoolGen, super.getAnnotationEntries())).forEach(this::addAttribute);\n     }\n     \n     private int addConstant() {\n         switch (super.getType().getType()) {\n             case 4:\n             case 5:\n             case 8:\n@@ -83,59 +79,58 @@\n             }\n             default: {\n                 throw new IllegalStateException(\"Unhandled : \" + super.getType().getType());\n             }\n         }\n     }\n     \n-    public void addObserver(final FieldObserver o) {\n+    public void addObserver(final FieldObserver fieldObserver) {\n         if (this.observers == null) {\n             this.observers = new ArrayList<FieldObserver>();\n         }\n-        this.observers.add(o);\n+        this.observers.add(fieldObserver);\n     }\n     \n     public void cancelInitValue() {\n         this.value = null;\n     }\n     \n-    private void checkType(final Type atype) {\n-        final Type superType = super.getType();\n-        if (superType == null) {\n+    private void checkType(final Type obj) {\n+        final Type type = super.getType();\n+        if (type == null) {\n             throw new ClassGenException(\"You haven't defined the type of the field yet\");\n         }\n         if (!this.isFinal()) {\n             throw new ClassGenException(\"Only final fields may have an initial value!\");\n         }\n-        if (!superType.equals((Object)atype)) {\n-            throw new ClassGenException(\"Types are not compatible: \" + superType + \" vs. \" + atype);\n+        if (!type.equals((Object)obj)) {\n+            throw new ClassGenException(\"Types are not compatible: \" + type + \" vs. \" + obj);\n         }\n     }\n     \n-    public FieldGen copy(final ConstantPoolGen cp) {\n-        final FieldGen fg = (FieldGen)this.clone();\n-        fg.setConstantPool(cp);\n-        return fg;\n+    public FieldGen copy(final ConstantPoolGen constantPool) {\n+        final FieldGen fieldGen = (FieldGen)this.clone();\n+        fieldGen.setConstantPool(constantPool);\n+        return fieldGen;\n     }\n     \n-    public boolean equals(final Object obj) {\n-        return FieldGen.bcelComparator.equals((Object)this, obj);\n+    public boolean equals(final Object o) {\n+        return FieldGen.bcelComparator.equals((Object)this, o);\n     }\n     \n     public Field getField() {\n         final String signature = this.getSignature();\n-        final int nameIndex = super.getConstantPool().addUtf8(super.getName());\n-        final int signatureIndex = super.getConstantPool().addUtf8(signature);\n+        final int addUtf8 = super.getConstantPool().addUtf8(super.getName());\n+        final int addUtf9 = super.getConstantPool().addUtf8(signature);\n         if (this.value != null) {\n             this.checkType(super.getType());\n-            final int index = this.addConstant();\n-            this.addAttribute((Attribute)new ConstantValue(super.getConstantPool().addUtf8(\"ConstantValue\"), 2, index, super.getConstantPool().getConstantPool()));\n+            this.addAttribute((Attribute)new ConstantValue(super.getConstantPool().addUtf8(\"ConstantValue\"), 2, this.addConstant(), super.getConstantPool().getConstantPool()));\n         }\n         this.addAnnotationsAsAttribute(super.getConstantPool());\n-        return new Field(super.getAccessFlags(), nameIndex, signatureIndex, this.getAttributes(), super.getConstantPool().getConstantPool());\n+        return new Field(super.getAccessFlags(), addUtf8, addUtf9, this.getAttributes(), super.getConstantPool().getConstantPool());\n     }\n     \n     public String getInitValue() {\n         if (this.value != null) {\n             return this.value.toString();\n         }\n         return null;\n@@ -145,38 +140,38 @@\n         return super.getType().getSignature();\n     }\n     \n     public int hashCode() {\n         return FieldGen.bcelComparator.hashCode((Object)this);\n     }\n     \n-    public void removeObserver(final FieldObserver o) {\n+    public void removeObserver(final FieldObserver fieldObserver) {\n         if (this.observers != null) {\n-            this.observers.remove(o);\n+            this.observers.remove(fieldObserver);\n         }\n     }\n     \n     public void setInitValue(final boolean b) {\n         this.checkType((Type)Type.BOOLEAN);\n         if (b) {\n             this.value = Integer.valueOf(1);\n         }\n     }\n     \n-    public void setInitValue(final byte b) {\n+    public void setInitValue(final byte i) {\n         this.checkType((Type)Type.BYTE);\n-        if (b != 0) {\n-            this.value = Integer.valueOf(b);\n+        if (i != 0) {\n+            this.value = Integer.valueOf(i);\n         }\n     }\n     \n-    public void setInitValue(final char c) {\n+    public void setInitValue(final char i) {\n         this.checkType((Type)Type.CHAR);\n-        if (c != '\\0') {\n-            this.value = Integer.valueOf(c);\n+        if (i != '\\0') {\n+            this.value = Integer.valueOf(i);\n         }\n     }\n     \n     public void setInitValue(final double d) {\n         this.checkType((Type)Type.DOUBLE);\n         if (d != 0.0) {\n             this.value = Double.valueOf(d);\n@@ -200,52 +195,52 @@\n     public void setInitValue(final long l) {\n         this.checkType((Type)Type.LONG);\n         if (l != 0L) {\n             this.value = Long.valueOf(l);\n         }\n     }\n     \n-    public void setInitValue(final short s) {\n+    public void setInitValue(final short i) {\n         this.checkType((Type)Type.SHORT);\n-        if (s != 0) {\n-            this.value = Integer.valueOf(s);\n+        if (i != 0) {\n+            this.value = Integer.valueOf(i);\n         }\n     }\n     \n-    public void setInitValue(final String str) {\n+    public void setInitValue(final String value) {\n         this.checkType((Type)ObjectType.getInstance(\"java.lang.String\"));\n-        if (str != null) {\n-            this.value = str;\n+        if (value != null) {\n+            this.value = value;\n         }\n     }\n     \n-    private void setValue(final int index) {\n-        final ConstantPool cp = super.getConstantPool().getConstantPool();\n-        final Constant c = cp.getConstant(index);\n-        this.value = ((ConstantObject)c).getConstantValue(cp);\n+    private void setValue(final int n) {\n+        final ConstantPool constantPool = super.getConstantPool().getConstantPool();\n+        this.value = ((ConstantObject)constantPool.getConstant(n)).getConstantValue(constantPool);\n     }\n     \n     public final String toString() {\n-        String access = Utility.accessToString(super.getAccessFlags());\n-        access = (access.isEmpty() ? \"\" : (access + \" \"));\n-        final String signature = super.getType().toString();\n+        final String accessToString = Utility.accessToString(super.getAccessFlags());\n+        final String str = accessToString.isEmpty() ? \"\" : (accessToString + \" \");\n+        final String string = super.getType().toString();\n         final String name = this.getName();\n-        final StringBuilder buf = new StringBuilder(32);\n-        buf.append(access).append(signature).append(\" \").append(name);\n-        final String value = this.getInitValue();\n-        if (value != null) {\n-            buf.append(\" = \").append(value);\n+        final StringBuilder sb = new StringBuilder(32);\n+        sb.append(str).append(string).append(\" \").append(name);\n+        final String initValue = this.getInitValue();\n+        if (initValue != null) {\n+            sb.append(\" = \").append(initValue);\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n     public void update() {\n         if (this.observers != null) {\n-            for (final FieldObserver observer : this.observers) {\n-                observer.notify(this);\n+            final Iterator<FieldObserver> iterator = this.observers.iterator();\n+            while (iterator.hasNext()) {\n+                ((FieldObserver)iterator.next()).notify(this);\n             }\n         }\n     }\n     \n     static {\n         FieldGen.bcelComparator = (BCELComparator)new FieldGen.FieldGen$1();\n     }\n"}]}
