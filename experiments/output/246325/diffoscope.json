{"diffoscope-json-version": 1, "source1": "first/HandlerFactory.class", "source2": "second/HandlerFactory.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -53,59 +53,57 @@\n         this.register(161, MethodDefHandler.class);\n         this.register(208, SwitchRuleHandler.class);\n         this.register(207, YieldHandler.class);\n         this.register(199, ClassDefHandler.class);\n         this.register(203, MethodDefHandler.class);\n     }\n     \n-    private <T> void register(final int type, final Class<T> handlerClass) {\n-        final Constructor<T> ctor = CommonUtil.getConstructor((Class)handlerClass, new Class[] { IndentationCheck.class, DetailAST.class, AbstractExpressionHandler.class });\n-        this.typeHandlers.put(Integer.valueOf(type), ctor);\n+    private <T> void register(final int i, final Class<T> clazz) {\n+        this.typeHandlers.put(Integer.valueOf(i), CommonUtil.getConstructor((Class)clazz, new Class[] { IndentationCheck.class, DetailAST.class, AbstractExpressionHandler.class }));\n     }\n     \n-    public boolean isHandledType(final int type) {\n-        final Set<Integer> typeSet = this.typeHandlers.keySet();\n-        return typeSet.contains(Integer.valueOf(type));\n+    public boolean isHandledType(final int i) {\n+        return this.typeHandlers.keySet().contains(Integer.valueOf(i));\n     }\n     \n     public int[] getHandledTypes() {\n-        final Set<Integer> typeSet = this.typeHandlers.keySet();\n-        final int[] types = new int[typeSet.size()];\n-        int index = 0;\n-        for (final Integer val : typeSet) {\n-            types[index] = val;\n-            ++index;\n+        final Set<Integer> keySet = this.typeHandlers.keySet();\n+        final int[] array = new int[keySet.size()];\n+        int n = 0;\n+        final Iterator iterator = keySet.iterator();\n+        while (iterator.hasNext()) {\n+            array[n] = (int)iterator.next();\n+            ++n;\n         }\n-        return types;\n+        return array;\n     }\n     \n-    public AbstractExpressionHandler getHandler(final IndentationCheck indentCheck, final DetailAST ast, final AbstractExpressionHandler parent) {\n-        final AbstractExpressionHandler handler = (AbstractExpressionHandler)this.createdHandlers.get(ast);\n-        AbstractExpressionHandler resultHandler;\n-        if (handler != null) {\n-            resultHandler = handler;\n+    public AbstractExpressionHandler getHandler(final IndentationCheck indentationCheck, final DetailAST detailAST, final AbstractExpressionHandler abstractExpressionHandler) {\n+        final AbstractExpressionHandler abstractExpressionHandler2 = (AbstractExpressionHandler)this.createdHandlers.get(detailAST);\n+        AbstractExpressionHandler methodCallHandler;\n+        if (abstractExpressionHandler2 != null) {\n+            methodCallHandler = abstractExpressionHandler2;\n         }\n-        else if (ast.getType() == 27) {\n-            resultHandler = this.createMethodCallHandler(indentCheck, ast, parent);\n+        else if (detailAST.getType() == 27) {\n+            methodCallHandler = this.createMethodCallHandler(indentationCheck, detailAST, abstractExpressionHandler);\n         }\n         else {\n-            final Constructor<?> handlerCtor = (Constructor<?>)this.typeHandlers.get(Integer.valueOf(ast.getType()));\n-            resultHandler = (AbstractExpressionHandler)CommonUtil.invokeConstructor((Constructor)handlerCtor, new Object[] { indentCheck, ast, parent });\n+            methodCallHandler = (AbstractExpressionHandler)CommonUtil.invokeConstructor((Constructor)(Constructor)this.typeHandlers.get(Integer.valueOf(detailAST.getType())), new Object[] { indentationCheck, detailAST, abstractExpressionHandler });\n         }\n-        return resultHandler;\n+        return methodCallHandler;\n     }\n     \n-    private AbstractExpressionHandler createMethodCallHandler(final IndentationCheck indentCheck, final DetailAST ast, final AbstractExpressionHandler parent) {\n-        DetailAST astNode;\n-        for (astNode = ast.getFirstChild(); astNode.getType() == 59; astNode = astNode.getFirstChild()) {}\n-        AbstractExpressionHandler theParent = parent;\n-        if (this.isHandledType(astNode.getType())) {\n-            theParent = this.getHandler(indentCheck, astNode, theParent);\n-            this.createdHandlers.put(astNode, theParent);\n+    private AbstractExpressionHandler createMethodCallHandler(final IndentationCheck indentationCheck, final DetailAST detailAST, final AbstractExpressionHandler abstractExpressionHandler) {\n+        DetailAST detailAST2;\n+        for (detailAST2 = detailAST.getFirstChild(); detailAST2.getType() == 59; detailAST2 = detailAST2.getFirstChild()) {}\n+        AbstractExpressionHandler handler = abstractExpressionHandler;\n+        if (this.isHandledType(detailAST2.getType())) {\n+            handler = this.getHandler(indentationCheck, detailAST2, handler);\n+            this.createdHandlers.put(detailAST2, handler);\n         }\n-        return (AbstractExpressionHandler)new MethodCallHandler(indentCheck, ast, theParent);\n+        return (AbstractExpressionHandler)new MethodCallHandler(indentationCheck, detailAST, handler);\n     }\n     \n     public void clearCreatedHandlers() {\n         this.createdHandlers.clear();\n     }\n }\n"}]}
