{"diffoscope-json-version": 1, "source1": "first/LookupSwitchForm.class", "source2": "second/LookupSwitchForm.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,54 +2,52 @@\n package org.apache.commons.compress.harmony.unpack200.bytecode.forms;\n \n import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;\n import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;\n \n public class LookupSwitchForm extends SwitchForm\n {\n-    public LookupSwitchForm(final int opcode, final String name) {\n-        super(opcode, name);\n+    public LookupSwitchForm(final int n, final String s) {\n+        super(n, s);\n     }\n     \n-    public void setByteCodeOperands(final ByteCode byteCode, final OperandManager operandManager, final int codeLength) {\n-        final int case_count = operandManager.nextCaseCount();\n-        final int default_pc = operandManager.nextLabel();\n-        final int[] case_values = new int[case_count];\n-        for (int index = 0; index < case_count; ++index) {\n-            case_values[index] = operandManager.nextCaseValues();\n+    public void setByteCodeOperands(final ByteCode byteCode, final OperandManager operandManager, final int n) {\n+        final int nextCaseCount = operandManager.nextCaseCount();\n+        final int nextLabel = operandManager.nextLabel();\n+        final int[] array = new int[nextCaseCount];\n+        for (int i = 0; i < nextCaseCount; ++i) {\n+            array[i] = operandManager.nextCaseValues();\n         }\n-        final int[] case_pcs = new int[case_count];\n-        for (int index2 = 0; index2 < case_count; ++index2) {\n-            case_pcs[index2] = operandManager.nextLabel();\n+        final int[] array2 = new int[nextCaseCount];\n+        for (int j = 0; j < nextCaseCount; ++j) {\n+            array2[j] = operandManager.nextLabel();\n         }\n-        final int[] labelsArray = new int[case_count + 1];\n-        labelsArray[0] = default_pc;\n-        for (int index3 = 1; index3 < case_count + 1; ++index3) {\n-            labelsArray[index3] = case_pcs[index3 - 1];\n+        final int[] byteCodeTargets = new int[nextCaseCount + 1];\n+        byteCodeTargets[0] = nextLabel;\n+        for (int k = 1; k < nextCaseCount + 1; ++k) {\n+            byteCodeTargets[k] = array2[k - 1];\n         }\n-        byteCode.setByteCodeTargets(labelsArray);\n-        final int padLength = 3 - codeLength % 4;\n-        final int rewriteSize = 1 + padLength + 4 + 4 + 4 * case_values.length + 4 * case_pcs.length;\n-        final int[] newRewrite = new int[rewriteSize];\n-        int rewriteIndex = 0;\n-        newRewrite[rewriteIndex++] = byteCode.getOpcode();\n-        for (int index4 = 0; index4 < padLength; ++index4) {\n-            newRewrite[rewriteIndex++] = 0;\n+        byteCode.setByteCodeTargets(byteCodeTargets);\n+        final int n2 = 3 - n % 4;\n+        final int[] rewrite = new int[1 + n2 + 4 + 4 + 4 * array.length + 4 * array2.length];\n+        int n3 = 0;\n+        rewrite[n3++] = byteCode.getOpcode();\n+        for (int l = 0; l < n2; ++l) {\n+            rewrite[n3++] = 0;\n         }\n-        newRewrite[rewriteIndex++] = -1;\n-        newRewrite[rewriteIndex++] = -1;\n-        newRewrite[rewriteIndex++] = -1;\n-        newRewrite[rewriteIndex++] = -1;\n-        final int npairsIndex = rewriteIndex;\n-        this.setRewrite4Bytes(case_values.length, npairsIndex, newRewrite);\n-        rewriteIndex += 4;\n-        for (int index5 = 0; index5 < case_values.length; ++index5) {\n-            this.setRewrite4Bytes(case_values[index5], rewriteIndex, newRewrite);\n-            rewriteIndex += 4;\n-            newRewrite[rewriteIndex++] = -1;\n-            newRewrite[rewriteIndex++] = -1;\n-            newRewrite[rewriteIndex++] = -1;\n-            newRewrite[rewriteIndex++] = -1;\n+        rewrite[n3++] = -1;\n+        rewrite[n3++] = -1;\n+        rewrite[n3++] = -1;\n+        rewrite[n3++] = -1;\n+        this.setRewrite4Bytes(array.length, n3, rewrite);\n+        n3 += 4;\n+        for (int n4 = 0; n4 < array.length; ++n4) {\n+            this.setRewrite4Bytes(array[n4], n3, rewrite);\n+            n3 += 4;\n+            rewrite[n3++] = -1;\n+            rewrite[n3++] = -1;\n+            rewrite[n3++] = -1;\n+            rewrite[n3++] = -1;\n         }\n-        byteCode.setRewrite(newRewrite);\n+        byteCode.setRewrite(rewrite);\n     }\n }\n"}]}
