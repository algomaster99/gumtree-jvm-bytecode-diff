{"diffoscope-json-version": 1, "source1": "first/XMLPropertyListConfiguration$PListNodeBuilder.class", "source2": "second/XMLPropertyListConfiguration$PListNodeBuilder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,15 +6,14 @@\n import java.util.function.Consumer;\n import org.apache.commons.configuration2.tree.ImmutableNode;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.io.UnsupportedEncodingException;\n import org.apache.commons.codec.binary.Base64;\n import java.text.ParseException;\n-import java.util.List;\n import java.util.ArrayList;\n import java.util.LinkedList;\n import java.util.Collection;\n import java.text.DateFormat;\n \n private static class PListNodeBuilder\n {\n@@ -24,89 +23,88 @@\n     private String name;\n     private Object value;\n     \n     private PListNodeBuilder() {\n         this.childBuilders = new LinkedList();\n     }\n     \n-    public void addValue(final Object v) {\n+    public void addValue(final Object value) {\n         if (this.value == null) {\n-            this.value = v;\n+            this.value = value;\n         }\n         else if (this.value instanceof Collection) {\n-            final Collection<Object> collection = (Collection)this.value;\n-            collection.add(v);\n+            ((Collection)this.value).add(value);\n         }\n         else {\n-            final List<Object> list = new ArrayList<Object>();\n-            list.add(this.value);\n-            list.add(v);\n-            this.value = list;\n+            final ArrayList value2 = new ArrayList();\n+            value2.add(this.value);\n+            value2.add(value);\n+            this.value = value2;\n         }\n     }\n     \n-    public void addDateValue(final String value) {\n+    public void addDateValue(final String s) {\n         try {\n-            if (value.indexOf(32) != -1) {\n+            if (s.indexOf(32) != -1) {\n                 synchronized (PListNodeBuilder.GNUSTEP_FORMAT) {\n-                    this.addValue(PListNodeBuilder.GNUSTEP_FORMAT.parse(value));\n+                    this.addValue(PListNodeBuilder.GNUSTEP_FORMAT.parse(s));\n                 }\n             }\n             else {\n                 synchronized (PListNodeBuilder.FORMAT) {\n-                    this.addValue(PListNodeBuilder.FORMAT.parse(value));\n+                    this.addValue(PListNodeBuilder.FORMAT.parse(s));\n                 }\n             }\n         }\n-        catch (final ParseException e) {\n-            throw new IllegalArgumentException(String.format(\"'%s' cannot be parsed to a date!\", value), e);\n+        catch (final ParseException cause) {\n+            throw new IllegalArgumentException(String.format(\"'%s' cannot be parsed to a date!\", s), cause);\n         }\n     }\n     \n-    public void addDataValue(final String value) {\n+    public void addDataValue(final String s) {\n         try {\n-            this.addValue(Base64.decodeBase64(value.getBytes(\"UTF-8\")));\n+            this.addValue(Base64.decodeBase64(s.getBytes(\"UTF-8\")));\n         }\n-        catch (final UnsupportedEncodingException e) {\n-            throw new AssertionError((Object)e);\n+        catch (final UnsupportedEncodingException detailMessage) {\n+            throw new AssertionError((Object)detailMessage);\n         }\n     }\n     \n-    public void addIntegerValue(final String value) {\n-        this.addValue(new BigInteger(value));\n+    public void addIntegerValue(final String val) {\n+        this.addValue(new BigInteger(val));\n     }\n     \n-    public void addRealValue(final String value) {\n-        this.addValue(new BigDecimal(value));\n+    public void addRealValue(final String val) {\n+        this.addValue(new BigDecimal(val));\n     }\n     \n     public void addTrueValue() {\n         this.addValue(Boolean.TRUE);\n     }\n     \n     public void addFalseValue() {\n         this.addValue(Boolean.FALSE);\n     }\n     \n-    public void addList(final XMLPropertyListConfiguration.ArrayNodeBuilder node) {\n-        this.addValue(node.getNodeValue());\n+    public void addList(final XMLPropertyListConfiguration.ArrayNodeBuilder arrayNodeBuilder) {\n+        this.addValue(arrayNodeBuilder.getNodeValue());\n     }\n     \n-    public void setName(final String nodeName) {\n-        this.name = nodeName;\n+    public void setName(final String name) {\n+        this.name = name;\n     }\n     \n-    public void addChild(final PListNodeBuilder child) {\n-        this.childBuilders.add(child);\n+    public void addChild(final PListNodeBuilder pListNodeBuilder) {\n+        this.childBuilders.add(pListNodeBuilder);\n     }\n     \n     public ImmutableNode createNode() {\n-        final ImmutableNode.Builder nodeBuilder = new ImmutableNode.Builder(this.childBuilders.size());\n+        final ImmutableNode.Builder builder = new ImmutableNode.Builder(this.childBuilders.size());\n         this.childBuilders.forEach(PListNodeBuilder::lambda$createNode$0);\n-        return nodeBuilder.name(this.name).value(this.getNodeValue()).create();\n+        return builder.name(this.name).value(this.getNodeValue()).create();\n     }\n     \n     protected Object getNodeValue() {\n         return this.value;\n     }\n     \n     static {\n"}]}
