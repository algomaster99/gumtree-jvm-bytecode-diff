{"diffoscope-json-version": 1, "source1": "first/ClassParser.class", "source2": "second/ClassParser.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -92,14 +92,28 @@\n             try {\n                 if (zip != null) {\n                     zip.close();\n                 }\n             }\n             catch (final IOException ex2) {}\n         }\n+        if (this.fileOwned) {\n+            try {\n+                if (this.dataInputStream != null) {\n+                    this.dataInputStream.close();\n+                }\n+            }\n+            catch (final IOException ex3) {}\n+        }\n+        try {\n+            if (zip != null) {\n+                zip.close();\n+            }\n+        }\n+        catch (final IOException ex4) {}\n         return new JavaClass(this.classNameIndex, this.superclassNameIndex, this.fileName, this.major, this.minor, this.accessFlags, this.constantPool, this.interfaces, this.fields, this.methods, this.attributes, (byte)(this.isZip ? 3 : 2));\n     }\n     \n     private void readAttributes() throws IOException, ClassFormatException {\n         final int attributes_count = this.dataInputStream.readUnsignedShort();\n         this.attributes = new Attribute[attributes_count];\n         for (int i = 0; i < attributes_count; ++i) {\n@@ -129,15 +143,15 @@\n         for (int i = 0; i < fields_count; ++i) {\n             this.fields[i] = new Field((DataInput)this.dataInputStream, this.constantPool);\n         }\n     }\n     \n     private void readID() throws IOException, ClassFormatException {\n         if (this.dataInputStream.readInt() != -889275714) {\n-            throw new ClassFormatException(this.fileName + \" is not a Java .class file\");\n+            throw new ClassFormatException(String.valueOf(this.fileName) + \" is not a Java .class file\");\n         }\n     }\n     \n     private void readInterfaces() throws IOException, ClassFormatException {\n         final int interfaces_count = this.dataInputStream.readUnsignedShort();\n         this.interfaces = new int[interfaces_count];\n         for (int i = 0; i < interfaces_count; ++i) {\n"}]}
