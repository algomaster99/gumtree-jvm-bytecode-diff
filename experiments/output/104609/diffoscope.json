{"diffoscope-json-version": 1, "source1": "first/DatabaseConfiguration$JdbcOperation.class", "source2": "second/DatabaseConfiguration$JdbcOperation.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -34,46 +34,48 @@\n             result = (T)this.performOperation();\n             if (this.this$0.isAutoCommit()) {\n                 this.conn.commit();\n             }\n         }\n         catch (final SQLException e) {\n             this.this$0.fireError(this.errorEventType, this.operationEventType, this.errorPropertyName, this.errorPropertyValue, (Throwable)e);\n+            return result;\n         }\n         finally {\n             this.this$0.close(this.conn, (Statement)this.pstmt, this.resultSet);\n         }\n+        this.this$0.close(this.conn, (Statement)this.pstmt, this.resultSet);\n         return result;\n     }\n     \n     protected Connection getConnection() {\n         return this.conn;\n     }\n     \n     protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {\n         String statement;\n-        if (nameCol && DatabaseConfiguration.access$300(this.this$0) != null) {\n+        if (nameCol && DatabaseConfiguration.access$0(this.this$0) != null) {\n             final StringBuilder buf = new StringBuilder(sql);\n-            buf.append(\" AND \").append(DatabaseConfiguration.access$300(this.this$0)).append(\"=?\");\n+            buf.append(\" AND \").append(DatabaseConfiguration.access$0(this.this$0)).append(\"=?\");\n             statement = buf.toString();\n         }\n         else {\n             statement = sql;\n         }\n         return this.pstmt = this.getConnection().prepareStatement(statement);\n     }\n     \n     protected PreparedStatement initStatement(final String sql, final boolean nameCol, final Object... params) throws SQLException {\n         final PreparedStatement ps = this.createStatement(sql, nameCol);\n         int idx = 1;\n         for (final Object param : params) {\n             ps.setObject(idx++, param);\n         }\n-        if (nameCol && DatabaseConfiguration.access$300(this.this$0) != null) {\n-            ps.setString(idx, DatabaseConfiguration.access$400(this.this$0));\n+        if (nameCol && DatabaseConfiguration.access$0(this.this$0) != null) {\n+            ps.setString(idx, DatabaseConfiguration.access$1(this.this$0));\n         }\n         return ps;\n     }\n     \n     protected ResultSet openResultSet(final String sql, final boolean nameCol, final Object... params) throws SQLException {\n         return this.resultSet = this.initStatement(sql, nameCol, params).executeQuery();\n     }\n"}]}
