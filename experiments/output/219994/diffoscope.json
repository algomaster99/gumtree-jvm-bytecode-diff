{"diffoscope-json-version": 1, "source1": "first/DescendantTokenCheck.class", "source2": "second/DescendantTokenCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -43,95 +43,96 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n+    public void visitToken(final DetailAST detailAST) {\n         Arrays.fill(this.counts, 0);\n-        this.countTokens(ast, 0);\n+        this.countTokens(detailAST, 0);\n         if (this.sumTokenCounts) {\n-            this.logAsTotal(ast);\n+            this.logAsTotal(detailAST);\n         }\n         else {\n-            this.logAsSeparated(ast);\n+            this.logAsSeparated(detailAST);\n         }\n     }\n     \n-    private void logAsSeparated(final DetailAST ast) {\n-        final String name = TokenUtil.getTokenName(ast.getType());\n-        for (final int element : this.limitedTokens) {\n-            final int tokenCount = this.counts[element - 1];\n-            if (tokenCount < this.minimumNumber) {\n-                final String descendantName = TokenUtil.getTokenName(element);\n+    private void logAsSeparated(final DetailAST detailAST) {\n+        final String tokenName = TokenUtil.getTokenName(detailAST.getType());\n+        for (final int n : this.limitedTokens) {\n+            final int n2 = this.counts[n - 1];\n+            if (n2 < this.minimumNumber) {\n+                final String tokenName2 = TokenUtil.getTokenName(n);\n                 if (this.minimumMessage == null) {\n                     this.minimumMessage = \"descendant.token.min\";\n                 }\n-                this.log(ast, this.minimumMessage, new Object[] { String.valueOf(tokenCount), String.valueOf(this.minimumNumber), name, descendantName });\n+                this.log(detailAST, this.minimumMessage, new Object[] { String.valueOf(n2), String.valueOf(this.minimumNumber), tokenName, tokenName2 });\n             }\n-            if (tokenCount > this.maximumNumber) {\n-                final String descendantName = TokenUtil.getTokenName(element);\n+            if (n2 > this.maximumNumber) {\n+                final String tokenName3 = TokenUtil.getTokenName(n);\n                 if (this.maximumMessage == null) {\n                     this.maximumMessage = \"descendant.token.max\";\n                 }\n-                this.log(ast, this.maximumMessage, new Object[] { String.valueOf(tokenCount), String.valueOf(this.maximumNumber), name, descendantName });\n+                this.log(detailAST, this.maximumMessage, new Object[] { String.valueOf(n2), String.valueOf(this.maximumNumber), tokenName, tokenName3 });\n             }\n         }\n     }\n     \n-    private void logAsTotal(final DetailAST ast) {\n-        final String name = TokenUtil.getTokenName(ast.getType());\n-        int total = 0;\n-        for (final int element : this.limitedTokens) {\n-            total += this.counts[element - 1];\n+    private void logAsTotal(final DetailAST detailAST) {\n+        final String tokenName = TokenUtil.getTokenName(detailAST.getType());\n+        int n = 0;\n+        final int[] limitedTokens = this.limitedTokens;\n+        for (int length = limitedTokens.length, i = 0; i < length; ++i) {\n+            n += this.counts[limitedTokens[i] - 1];\n         }\n-        if (total < this.minimumNumber) {\n+        if (n < this.minimumNumber) {\n             if (this.minimumMessage == null) {\n                 this.minimumMessage = \"descendant.token.sum.min\";\n             }\n-            this.log(ast, this.minimumMessage, new Object[] { String.valueOf(total), String.valueOf(this.minimumNumber), name });\n+            this.log(detailAST, this.minimumMessage, new Object[] { String.valueOf(n), String.valueOf(this.minimumNumber), tokenName });\n         }\n-        if (total > this.maximumNumber) {\n+        if (n > this.maximumNumber) {\n             if (this.maximumMessage == null) {\n                 this.maximumMessage = \"descendant.token.sum.max\";\n             }\n-            this.log(ast, this.maximumMessage, new Object[] { String.valueOf(total), String.valueOf(this.maximumNumber), name });\n+            this.log(detailAST, this.maximumMessage, new Object[] { String.valueOf(n), String.valueOf(this.maximumNumber), tokenName });\n         }\n     }\n     \n-    private void countTokens(final DetailAST ast, final int depth) {\n-        if (depth <= this.maximumDepth) {\n-            if (depth >= this.minimumDepth) {\n-                final int type = ast.getType();\n+    private void countTokens(final DetailAST detailAST, final int n) {\n+        if (n <= this.maximumDepth) {\n+            if (n >= this.minimumDepth) {\n+                final int type = detailAST.getType();\n                 if (type <= this.counts.length) {\n                     final int[] counts = this.counts;\n-                    final int n = type - 1;\n-                    ++counts[n];\n+                    final int n2 = type - 1;\n+                    ++counts[n2];\n                 }\n             }\n-            DetailAST child = ast.getFirstChild();\n-            final int nextDepth = depth + 1;\n-            while (child != null) {\n-                this.countTokens(child, nextDepth);\n-                child = child.getNextSibling();\n+            DetailAST detailAST2 = detailAST.getFirstChild();\n+            final int n3 = n + 1;\n+            while (detailAST2 != null) {\n+                this.countTokens(detailAST2, n3);\n+                detailAST2 = detailAST2.getNextSibling();\n             }\n         }\n     }\n     \n-    public void setLimitedTokens(final String... limitedTokensParam) {\n-        this.limitedTokens = new int[limitedTokensParam.length];\n-        int maxToken = 0;\n-        for (int i = 0; i < limitedTokensParam.length; ++i) {\n-            this.limitedTokens[i] = TokenUtil.getTokenId(limitedTokensParam[i]);\n-            if (this.limitedTokens[i] >= maxToken + 1) {\n-                maxToken = this.limitedTokens[i];\n+    public void setLimitedTokens(final String... array) {\n+        this.limitedTokens = new int[array.length];\n+        int n = 0;\n+        for (int i = 0; i < array.length; ++i) {\n+            this.limitedTokens[i] = TokenUtil.getTokenId(array[i]);\n+            if (this.limitedTokens[i] >= n + 1) {\n+                n = this.limitedTokens[i];\n             }\n         }\n-        this.counts = new int[maxToken];\n+        this.counts = new int[n];\n     }\n     \n     public void setMinimumDepth(final int minimumDepth) {\n         this.minimumDepth = minimumDepth;\n     }\n     \n     public void setMaximumDepth(final int maximumDepth) {\n@@ -142,19 +143,19 @@\n         this.minimumNumber = minimumNumber;\n     }\n     \n     public void setMaximumNumber(final int maximumNumber) {\n         this.maximumNumber = maximumNumber;\n     }\n     \n-    public void setMinimumMessage(final String message) {\n-        this.minimumMessage = message;\n+    public void setMinimumMessage(final String minimumMessage) {\n+        this.minimumMessage = minimumMessage;\n     }\n     \n-    public void setMaximumMessage(final String message) {\n-        this.maximumMessage = message;\n+    public void setMaximumMessage(final String maximumMessage) {\n+        this.maximumMessage = maximumMessage;\n     }\n     \n-    public void setSumTokenCounts(final boolean sum) {\n-        this.sumTokenCounts = sum;\n+    public void setSumTokenCounts(final boolean sumTokenCounts) {\n+        this.sumTokenCounts = sumTokenCounts;\n     }\n }\n"}]}
