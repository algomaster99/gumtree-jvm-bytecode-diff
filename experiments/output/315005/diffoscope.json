{"diffoscope-json-version": 1, "source1": "first/ChunkedWriter.class", "source2": "second/ChunkedWriter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,66 +1,66 @@\n-  SHA-256 checksum 56b09533b7cebee5ce04ec86828aba9e5f05d821bbf3035b12f6200d1c29c619\n+  SHA-256 checksum c7e818fdb50ab4c23bb4f5c30d326b97cec54bdfcf25b6da9919c22d0a2ef81c\n   Compiled from \"ChunkedWriter.java\"\n public class org.apache.commons.io.output.ChunkedWriter extends java.io.FilterWriter\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #2                          // org/apache/commons/io/output/ChunkedWriter\n-  super_class: #11                        // java/io/FilterWriter\n+  this_class: #3                          // org/apache/commons/io/output/ChunkedWriter\n+  super_class: #10                        // java/io/FilterWriter\n   interfaces: 0, fields: 2, methods: 3, attributes: 1\n Constant pool:\n-   #1 = Class              #30            // org/apache/commons/io/IOUtils\n-   #2 = Class              #31            // org/apache/commons/io/output/ChunkedWriter\n-   #3 = Methodref          #2.#32         // org/apache/commons/io/output/ChunkedWriter.\"<init>\":(Ljava/io/Writer;I)V\n-   #4 = Methodref          #11.#33        // java/io/FilterWriter.\"<init>\":(Ljava/io/Writer;)V\n-   #5 = Class              #34            // java/lang/IllegalArgumentException\n-   #6 = Methodref          #5.#35         // java/lang/IllegalArgumentException.\"<init>\":()V\n-   #7 = Fieldref           #2.#36         // org/apache/commons/io/output/ChunkedWriter.chunkSize:I\n-   #8 = Methodref          #37.#38        // java/lang/Math.min:(II)I\n-   #9 = Fieldref           #2.#39         // org/apache/commons/io/output/ChunkedWriter.out:Ljava/io/Writer;\n-  #10 = Methodref          #23.#40        // java/io/Writer.write:([CII)V\n-  #11 = Class              #41            // java/io/FilterWriter\n-  #12 = Utf8               DEFAULT_CHUNK_SIZE\n-  #13 = Utf8               I\n-  #14 = Utf8               ConstantValue\n-  #15 = Integer            8192\n-  #16 = Utf8               chunkSize\n-  #17 = Utf8               <init>\n-  #18 = Utf8               (Ljava/io/Writer;)V\n-  #19 = Utf8               Code\n-  #20 = Utf8               LineNumberTable\n-  #21 = Utf8               (Ljava/io/Writer;I)V\n-  #22 = Utf8               StackMapTable\n-  #23 = Class              #42            // java/io/Writer\n-  #24 = Utf8               write\n-  #25 = Utf8               ([CII)V\n-  #26 = Utf8               Exceptions\n-  #27 = Class              #43            // java/io/IOException\n-  #28 = Utf8               SourceFile\n-  #29 = Utf8               ChunkedWriter.java\n-  #30 = Utf8               org/apache/commons/io/IOUtils\n-  #31 = Utf8               org/apache/commons/io/output/ChunkedWriter\n-  #32 = NameAndType        #17:#21        // \"<init>\":(Ljava/io/Writer;I)V\n-  #33 = NameAndType        #17:#18        // \"<init>\":(Ljava/io/Writer;)V\n-  #34 = Utf8               java/lang/IllegalArgumentException\n-  #35 = NameAndType        #17:#44        // \"<init>\":()V\n-  #36 = NameAndType        #16:#13        // chunkSize:I\n-  #37 = Class              #45            // java/lang/Math\n-  #38 = NameAndType        #46:#47        // min:(II)I\n-  #39 = NameAndType        #48:#49        // out:Ljava/io/Writer;\n-  #40 = NameAndType        #24:#25        // write:([CII)V\n-  #41 = Utf8               java/io/FilterWriter\n-  #42 = Utf8               java/io/Writer\n-  #43 = Utf8               java/io/IOException\n-  #44 = Utf8               ()V\n-  #45 = Utf8               java/lang/Math\n-  #46 = Utf8               min\n-  #47 = Utf8               (II)I\n-  #48 = Utf8               out\n-  #49 = Utf8               Ljava/io/Writer;\n+   #1 = Class              #2             // org/apache/commons/io/IOUtils\n+   #2 = Utf8               org/apache/commons/io/IOUtils\n+   #3 = Class              #4             // org/apache/commons/io/output/ChunkedWriter\n+   #4 = Utf8               org/apache/commons/io/output/ChunkedWriter\n+   #5 = Methodref          #3.#6          // org/apache/commons/io/output/ChunkedWriter.\"<init>\":(Ljava/io/Writer;I)V\n+   #6 = NameAndType        #7:#8          // \"<init>\":(Ljava/io/Writer;I)V\n+   #7 = Utf8               <init>\n+   #8 = Utf8               (Ljava/io/Writer;I)V\n+   #9 = Methodref          #10.#11        // java/io/FilterWriter.\"<init>\":(Ljava/io/Writer;)V\n+  #10 = Class              #12            // java/io/FilterWriter\n+  #11 = NameAndType        #7:#13         // \"<init>\":(Ljava/io/Writer;)V\n+  #12 = Utf8               java/io/FilterWriter\n+  #13 = Utf8               (Ljava/io/Writer;)V\n+  #14 = Class              #15            // java/lang/IllegalArgumentException\n+  #15 = Utf8               java/lang/IllegalArgumentException\n+  #16 = Methodref          #14.#17        // java/lang/IllegalArgumentException.\"<init>\":()V\n+  #17 = NameAndType        #7:#18         // \"<init>\":()V\n+  #18 = Utf8               ()V\n+  #19 = Fieldref           #3.#20         // org/apache/commons/io/output/ChunkedWriter.chunkSize:I\n+  #20 = NameAndType        #21:#22        // chunkSize:I\n+  #21 = Utf8               chunkSize\n+  #22 = Utf8               I\n+  #23 = Methodref          #24.#25        // java/lang/Math.min:(II)I\n+  #24 = Class              #26            // java/lang/Math\n+  #25 = NameAndType        #27:#28        // min:(II)I\n+  #26 = Utf8               java/lang/Math\n+  #27 = Utf8               min\n+  #28 = Utf8               (II)I\n+  #29 = Fieldref           #3.#30         // org/apache/commons/io/output/ChunkedWriter.out:Ljava/io/Writer;\n+  #30 = NameAndType        #31:#32        // out:Ljava/io/Writer;\n+  #31 = Utf8               out\n+  #32 = Utf8               Ljava/io/Writer;\n+  #33 = Methodref          #34.#35        // java/io/Writer.write:([CII)V\n+  #34 = Class              #36            // java/io/Writer\n+  #35 = NameAndType        #37:#38        // write:([CII)V\n+  #36 = Utf8               java/io/Writer\n+  #37 = Utf8               write\n+  #38 = Utf8               ([CII)V\n+  #39 = Utf8               DEFAULT_CHUNK_SIZE\n+  #40 = Utf8               ConstantValue\n+  #41 = Integer            8192\n+  #42 = Utf8               Code\n+  #43 = Utf8               LineNumberTable\n+  #44 = Utf8               StackMapTable\n+  #45 = Utf8               Exceptions\n+  #46 = Class              #47            // java/io/IOException\n+  #47 = Utf8               java/io/IOException\n+  #48 = Utf8               SourceFile\n+  #49 = Utf8               ChunkedWriter.java\n {\n   private static final int DEFAULT_CHUNK_SIZE = 8192;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 8192\n \n   private final int chunkSize;\n@@ -71,37 +71,37 @@\n     descriptor: (Ljava/io/Writer;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: sipush        8192\n-         5: invokespecial #3                  // Method \"<init>\":(Ljava/io/Writer;I)V\n+         5: invokespecial #5                  // Method \"<init>\":(Ljava/io/Writer;I)V\n          8: return\n       LineNumberTable:\n         line 49: 0\n         line 50: 8\n \n   public org.apache.commons.io.output.ChunkedWriter(java.io.Writer, int);\n     descriptor: (Ljava/io/Writer;I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #4                  // Method java/io/FilterWriter.\"<init>\":(Ljava/io/Writer;)V\n+         2: invokespecial #9                  // Method java/io/FilterWriter.\"<init>\":(Ljava/io/Writer;)V\n          5: iload_2\n          6: ifgt          17\n-         9: new           #5                  // class java/lang/IllegalArgumentException\n+         9: new           #14                 // class java/lang/IllegalArgumentException\n         12: dup\n-        13: invokespecial #6                  // Method java/lang/IllegalArgumentException.\"<init>\":()V\n+        13: invokespecial #16                 // Method java/lang/IllegalArgumentException.\"<init>\":()V\n         16: athrow\n         17: aload_0\n         18: iload_2\n-        19: putfield      #7                  // Field chunkSize:I\n+        19: putfield      #19                 // Field chunkSize:I\n         22: return\n       LineNumberTable:\n         line 60: 0\n         line 61: 5\n         line 62: 9\n         line 64: 17\n         line 65: 22\n@@ -120,23 +120,23 @@\n          1: istore        4\n          3: iload_2\n          4: istore        5\n          6: iload         4\n          8: ifle          51\n         11: iload         4\n         13: aload_0\n-        14: getfield      #7                  // Field chunkSize:I\n-        17: invokestatic  #8                  // Method java/lang/Math.min:(II)I\n+        14: getfield      #19                 // Field chunkSize:I\n+        17: invokestatic  #23                 // Method java/lang/Math.min:(II)I\n         20: istore        6\n         22: aload_0\n-        23: getfield      #9                  // Field out:Ljava/io/Writer;\n+        23: getfield      #29                 // Field out:Ljava/io/Writer;\n         26: aload_1\n         27: iload         5\n         29: iload         6\n-        31: invokevirtual #10                 // Method java/io/Writer.write:([CII)V\n+        31: invokevirtual #33                 // Method java/io/Writer.write:([CII)V\n         34: iload         4\n         36: iload         6\n         38: isub\n         39: istore        4\n         41: iload         5\n         43: iload         6\n         45: iadd\n"}]}
