{"diffoscope-json-version": 1, "source1": "first/ExceptionsAttribute.class", "source2": "second/ExceptionsAttribute.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,87 +8,73 @@\n public class ExceptionsAttribute extends Attribute\n {\n     private static CPUTF8 attributeName;\n     private transient int[] exceptionIndexes;\n     private final CPClass[] exceptions;\n     \n     private static int hashCode(final Object[] array) {\n-        final int prime = 31;\n         if (array == null) {\n             return 0;\n         }\n-        int result = 1;\n-        for (int index = 0; index < array.length; ++index) {\n-            result = 31 * result + ((array[index] == null) ? 0 : array[index].hashCode());\n+        int n = 1;\n+        for (int i = 0; i < array.length; ++i) {\n+            n = 31 * n + ((array[i] == null) ? 0 : array[i].hashCode());\n         }\n-        return result;\n+        return n;\n     }\n     \n     public ExceptionsAttribute(final CPClass[] exceptions) {\n         super(ExceptionsAttribute.attributeName);\n         this.exceptions = exceptions;\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-        if (!super.equals(obj)) {\n-            return false;\n-        }\n-        if (this.getClass() != obj.getClass()) {\n-            return false;\n-        }\n-        final ExceptionsAttribute other = (ExceptionsAttribute)obj;\n-        return Arrays.equals(this.exceptions, other.exceptions);\n+    public boolean equals(final Object o) {\n+        return this == o || (super.equals(o) && this.getClass() == o.getClass() && Arrays.equals(this.exceptions, ((ExceptionsAttribute)o).exceptions));\n     }\n     \n     protected int getLength() {\n         return 2 + 2 * this.exceptions.length;\n     }\n     \n     protected ClassFileEntry[] getNestedClassFileEntries() {\n-        final ClassFileEntry[] result = new ClassFileEntry[this.exceptions.length + 1];\n+        final ClassFileEntry[] array = new ClassFileEntry[this.exceptions.length + 1];\n         for (int i = 0; i < this.exceptions.length; ++i) {\n-            result[i] = (ClassFileEntry)this.exceptions[i];\n+            array[i] = (ClassFileEntry)this.exceptions[i];\n         }\n-        result[this.exceptions.length] = (ClassFileEntry)this.getAttributeName();\n-        return result;\n+        array[this.exceptions.length] = (ClassFileEntry)this.getAttributeName();\n+        return array;\n     }\n     \n     public int hashCode() {\n-        final int prime = 31;\n-        int result = super.hashCode();\n-        result = 31 * result + hashCode(this.exceptions);\n-        return result;\n+        return 31 * super.hashCode() + hashCode(this.exceptions);\n     }\n     \n-    protected void resolve(final ClassConstantPool pool) {\n-        super.resolve(pool);\n+    protected void resolve(final ClassConstantPool classConstantPool) {\n+        super.resolve(classConstantPool);\n         this.exceptionIndexes = new int[this.exceptions.length];\n         for (int i = 0; i < this.exceptions.length; ++i) {\n-            this.exceptions[i].resolve(pool);\n-            this.exceptionIndexes[i] = pool.indexOf((ClassFileEntry)this.exceptions[i]);\n+            this.exceptions[i].resolve(classConstantPool);\n+            this.exceptionIndexes[i] = classConstantPool.indexOf((ClassFileEntry)this.exceptions[i]);\n         }\n     }\n     \n     public String toString() {\n         final StringBuffer sb = new StringBuffer();\n         sb.append(\"Exceptions: \");\n         for (int i = 0; i < this.exceptions.length; ++i) {\n             sb.append(this.exceptions[i]);\n             sb.append(' ');\n         }\n         return sb.toString();\n     }\n     \n-    protected void writeBody(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.exceptionIndexes.length);\n+    protected void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.exceptionIndexes.length);\n         for (int i = 0; i < this.exceptionIndexes.length; ++i) {\n-            dos.writeShort(this.exceptionIndexes[i]);\n+            dataOutputStream.writeShort(this.exceptionIndexes[i]);\n         }\n     }\n     \n-    public static void setAttributeName(final CPUTF8 cpUTF8Value) {\n-        ExceptionsAttribute.attributeName = cpUTF8Value;\n+    public static void setAttributeName(final CPUTF8 attributeName) {\n+        ExceptionsAttribute.attributeName = attributeName;\n     }\n }\n"}]}
