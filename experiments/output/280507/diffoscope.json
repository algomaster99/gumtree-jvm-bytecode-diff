{"diffoscope-json-version": 1, "source1": "first/ListDelimiterHandler.class", "source2": "second/ListDelimiterHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,41 +5,41 @@\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.Collection;\n import java.util.List;\n \n public interface ListDelimiterHandler\n {\n-    public static final ValueTransformer NOOP_TRANSFORMER = value -> value;\n+    public static final ValueTransformer NOOP_TRANSFORMER = o -> o;\n     \n     Object escape(final Object p0, final ValueTransformer p1);\n     \n     Object escapeList(final List<?> p0, final ValueTransformer p1);\n     \n     Iterable<?> parse(final Object p0);\n     \n     Collection<String> split(final String p0, final boolean p1);\n     \n-    default Collection<?> flatten(final Object value, final int limit) {\n-        if (value instanceof String) {\n-            return this.split((String)value, true);\n+    default Collection<?> flatten(final Object o, final int n) {\n+        if (o instanceof String) {\n+            return this.split((String)o, true);\n         }\n-        final Collection<Object> result = new LinkedList<Object>();\n-        if (value instanceof Iterable) {\n-            AbstractListDelimiterHandler.flattenIterator(this, (Collection)result, (Iterator)((Iterable)value).iterator(), limit);\n+        final LinkedList list = new LinkedList();\n+        if (o instanceof Iterable) {\n+            AbstractListDelimiterHandler.flattenIterator(this, (Collection)list, (Iterator)((Iterable)o).iterator(), n);\n         }\n-        else if (value instanceof Iterator) {\n-            AbstractListDelimiterHandler.flattenIterator(this, (Collection)result, (Iterator)value, limit);\n+        else if (o instanceof Iterator) {\n+            AbstractListDelimiterHandler.flattenIterator(this, (Collection)list, (Iterator)o, n);\n         }\n-        else if (value != null) {\n-            if (value.getClass().isArray()) {\n-                for (int len = Array.getLength(value), idx = 0, size = 0; idx < len && size < limit; ++idx, size = result.size()) {\n-                    result.addAll(this.flatten(Array.get(value, idx), limit - size));\n+        else if (o != null) {\n+            if (o.getClass().isArray()) {\n+                for (int length = Array.getLength(o), n2 = 0, size = 0; n2 < length && size < n; ++n2, size = list.size()) {\n+                    list.addAll(this.flatten(Array.get(o, n2), n - size));\n                 }\n             }\n             else {\n-                result.add(value);\n+                list.add(o);\n             }\n         }\n-        return result;\n+        return list;\n     }\n }\n"}]}
