{"diffoscope-json-version": 1, "source1": "first/LZMA2Decoder.class", "source2": "second/LZMA2Decoder.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,51 +1,51 @@\n-  SHA-256 checksum e5d81943d49ed5b5193909932f1adab176731d80553f0fff048b7e1bae6974b0\n+  SHA-256 checksum 247ed7001218a0cebe4b79c291c896decdec68a6131a0c12a8b3409a6b398b4b\n   Compiled from \"LZMA2Decoder.java\"\n class org.apache.commons.compress.archivers.sevenz.LZMA2Decoder extends org.apache.commons.compress.archivers.sevenz.CoderBase\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0020) ACC_SUPER\n   this_class: #33                         // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n   super_class: #34                        // org/apache/commons/compress/archivers/sevenz/CoderBase\n   interfaces: 0, fields: 0, methods: 9, attributes: 1\n Constant pool:\n-    #1 = Class              #95           // java/lang/Class\n-    #2 = Class              #96           // org/tukaani/xz/LZMA2Options\n-    #3 = Class              #97           // java/lang/Number\n-    #4 = Methodref          #34.#98       // org/apache/commons/compress/archivers/sevenz/CoderBase.\"<init>\":([Ljava/lang/Class;)V\n-    #5 = Methodref          #33.#99       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-    #6 = Methodref          #9.#100       // org/tukaani/xz/LZMA2InputStream.getMemoryUsage:(I)I\n-    #7 = Class              #101          // org/apache/commons/compress/MemoryLimitException\n-    #8 = Methodref          #7.#102       // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n-    #9 = Class              #103          // org/tukaani/xz/LZMA2InputStream\n-   #10 = Methodref          #9.#104       // org/tukaani/xz/LZMA2InputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-   #11 = Class              #105          // java/lang/IllegalArgumentException\n-   #12 = Class              #106          // java/io/IOException\n-   #13 = Methodref          #11.#107      // java/lang/IllegalArgumentException.getMessage:()Ljava/lang/String;\n-   #14 = Methodref          #12.#108      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #15 = Methodref          #33.#109      // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-   #16 = Class              #110          // org/tukaani/xz/FinishableWrapperOutputStream\n-   #17 = Methodref          #16.#111      // org/tukaani/xz/FinishableWrapperOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n-   #18 = Methodref          #2.#112       // org/tukaani/xz/LZMA2Options.getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n-   #19 = Methodref          #33.#113      // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getDictSize:(Ljava/lang/Object;)I\n-   #20 = Methodref          #114.#115     // java/lang/Integer.numberOfLeadingZeros:(I)I\n-   #21 = Methodref          #114.#116     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #22 = Methodref          #2.#117       // org/tukaani/xz/LZMA2Options.getDictSize:()I\n-   #23 = Methodref          #33.#118      // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.numberOptionOrDefault:(Ljava/lang/Object;)I\n-   #24 = Fieldref           #119.#120     // org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n-   #25 = String             #121          // Missing LZMA2 properties\n-   #26 = String             #122          // LZMA2 properties too short\n-   #27 = String             #123          // Unsupported LZMA2 property bits\n-   #28 = String             #124          // Dictionary larger than 4GiB maximum size\n-   #29 = Methodref          #2.#125       // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n-   #30 = Methodref          #2.#126       // org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n+    #1 = Class              #93           // java/lang/Class\n+    #2 = Class              #94           // org/tukaani/xz/LZMA2Options\n+    #3 = Class              #95           // java/lang/Number\n+    #4 = Methodref          #34.#96       // org/apache/commons/compress/archivers/sevenz/CoderBase.\"<init>\":([Ljava/lang/Class;)V\n+    #5 = Methodref          #33.#97       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+    #6 = Methodref          #9.#98        // org/tukaani/xz/LZMA2InputStream.getMemoryUsage:(I)I\n+    #7 = Class              #99           // org/apache/commons/compress/MemoryLimitException\n+    #8 = Methodref          #7.#100       // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n+    #9 = Class              #101          // org/tukaani/xz/LZMA2InputStream\n+   #10 = Methodref          #9.#102       // org/tukaani/xz/LZMA2InputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+   #11 = Class              #103          // java/lang/IllegalArgumentException\n+   #12 = Class              #104          // java/io/IOException\n+   #13 = Methodref          #11.#105      // java/lang/IllegalArgumentException.getMessage:()Ljava/lang/String;\n+   #14 = Methodref          #12.#106      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #15 = Methodref          #33.#107      // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+   #16 = Class              #108          // org/tukaani/xz/FinishableWrapperOutputStream\n+   #17 = Methodref          #16.#109      // org/tukaani/xz/FinishableWrapperOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+   #18 = Methodref          #2.#110       // org/tukaani/xz/LZMA2Options.getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n+   #19 = Methodref          #33.#111      // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getDictSize:(Ljava/lang/Object;)I\n+   #20 = Methodref          #112.#113     // java/lang/Integer.numberOfLeadingZeros:(I)I\n+   #21 = Methodref          #112.#114     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #22 = Methodref          #2.#115       // org/tukaani/xz/LZMA2Options.getDictSize:()I\n+   #23 = Methodref          #33.#116      // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.numberOptionOrDefault:(Ljava/lang/Object;)I\n+   #24 = Fieldref           #63.#117      // org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+   #25 = String             #118          // Missing LZMA2 properties\n+   #26 = String             #119          // LZMA2 properties too short\n+   #27 = String             #120          // Unsupported LZMA2 property bits\n+   #28 = String             #121          // Dictionary larger than 4GiB maximum size\n+   #29 = Methodref          #2.#122       // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+   #30 = Methodref          #2.#123       // org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n    #31 = Integer            8388608\n-   #32 = Methodref          #33.#127      // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.numberOptionOrDefault:(Ljava/lang/Object;I)I\n-   #33 = Class              #128          // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n-   #34 = Class              #129          // org/apache/commons/compress/archivers/sevenz/CoderBase\n+   #32 = Methodref          #33.#124      // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.numberOptionOrDefault:(Ljava/lang/Object;I)I\n+   #33 = Class              #125          // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n+   #34 = Class              #126          // org/apache/commons/compress/archivers/sevenz/CoderBase\n    #35 = Utf8               <init>\n    #36 = Utf8               ()V\n    #37 = Utf8               Code\n    #38 = Utf8               LineNumberTable\n    #39 = Utf8               LocalVariableTable\n    #40 = Utf8               this\n    #41 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n@@ -64,106 +64,103 @@\n    #54 = Utf8               J\n    #55 = Utf8               coder\n    #56 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/Coder;\n    #57 = Utf8               password\n    #58 = Utf8               [B\n    #59 = Utf8               maxMemoryLimitInKb\n    #60 = Utf8               StackMapTable\n-   #61 = Class              #128          // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n-   #62 = Class              #130          // java/lang/String\n-   #63 = Class              #131          // java/io/InputStream\n-   #64 = Class              #132          // org/apache/commons/compress/archivers/sevenz/Coder\n-   #65 = Class              #58           // \"[B\"\n-   #66 = Class              #105          // java/lang/IllegalArgumentException\n-   #67 = Utf8               Exceptions\n-   #68 = Utf8               encode\n-   #69 = Utf8               (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n-   #70 = Utf8               out\n-   #71 = Utf8               Ljava/io/OutputStream;\n-   #72 = Utf8               opts\n-   #73 = Utf8               Ljava/lang/Object;\n-   #74 = Utf8               options\n-   #75 = Utf8               Lorg/tukaani/xz/LZMA2Options;\n-   #76 = Utf8               wrapped\n-   #77 = Utf8               Lorg/tukaani/xz/FinishableOutputStream;\n-   #78 = Utf8               getOptionsAsProperties\n-   #79 = Utf8               (Ljava/lang/Object;)[B\n-   #80 = Utf8               dictSize\n-   #81 = Utf8               lead\n-   #82 = Utf8               secondBit\n-   #83 = Utf8               getOptionsFromCoder\n-   #84 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n-   #85 = Utf8               getDictSize\n-   #86 = Utf8               (Ljava/lang/Object;)I\n-   #87 = Utf8               getDictionarySize\n-   #88 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-   #89 = Utf8               dictionarySizeBits\n-   #90 = Utf8               getOptions\n-   #91 = Utf8               (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-   #92 = Utf8               numberOptionOrDefault\n-   #93 = Utf8               SourceFile\n-   #94 = Utf8               LZMA2Decoder.java\n-   #95 = Utf8               java/lang/Class\n-   #96 = Utf8               org/tukaani/xz/LZMA2Options\n-   #97 = Utf8               java/lang/Number\n-   #98 = NameAndType        #35:#133      // \"<init>\":([Ljava/lang/Class;)V\n-   #99 = NameAndType        #87:#88       // getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-  #100 = NameAndType        #134:#135     // getMemoryUsage:(I)I\n-  #101 = Utf8               org/apache/commons/compress/MemoryLimitException\n-  #102 = NameAndType        #35:#136      // \"<init>\":(JI)V\n-  #103 = Utf8               org/tukaani/xz/LZMA2InputStream\n-  #104 = NameAndType        #35:#137      // \"<init>\":(Ljava/io/InputStream;I)V\n-  #105 = Utf8               java/lang/IllegalArgumentException\n-  #106 = Utf8               java/io/IOException\n-  #107 = NameAndType        #138:#139     // getMessage:()Ljava/lang/String;\n-  #108 = NameAndType        #35:#140      // \"<init>\":(Ljava/lang/String;)V\n-  #109 = NameAndType        #90:#91       // getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-  #110 = Utf8               org/tukaani/xz/FinishableWrapperOutputStream\n-  #111 = NameAndType        #35:#141      // \"<init>\":(Ljava/io/OutputStream;)V\n-  #112 = NameAndType        #142:#143     // getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n-  #113 = NameAndType        #85:#86       // getDictSize:(Ljava/lang/Object;)I\n-  #114 = Class              #144          // java/lang/Integer\n-  #115 = NameAndType        #145:#135     // numberOfLeadingZeros:(I)I\n-  #116 = NameAndType        #146:#147     // valueOf:(I)Ljava/lang/Integer;\n-  #117 = NameAndType        #85:#148      // getDictSize:()I\n-  #118 = NameAndType        #92:#86       // numberOptionOrDefault:(Ljava/lang/Object;)I\n-  #119 = Class              #132          // org/apache/commons/compress/archivers/sevenz/Coder\n-  #120 = NameAndType        #149:#58      // properties:[B\n-  #121 = Utf8               Missing LZMA2 properties\n-  #122 = Utf8               LZMA2 properties too short\n-  #123 = Utf8               Unsupported LZMA2 property bits\n-  #124 = Utf8               Dictionary larger than 4GiB maximum size\n-  #125 = NameAndType        #35:#36       // \"<init>\":()V\n-  #126 = NameAndType        #150:#151     // setDictSize:(I)V\n-  #127 = NameAndType        #92:#152      // numberOptionOrDefault:(Ljava/lang/Object;I)I\n-  #128 = Utf8               org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n-  #129 = Utf8               org/apache/commons/compress/archivers/sevenz/CoderBase\n-  #130 = Utf8               java/lang/String\n-  #131 = Utf8               java/io/InputStream\n-  #132 = Utf8               org/apache/commons/compress/archivers/sevenz/Coder\n-  #133 = Utf8               ([Ljava/lang/Class;)V\n-  #134 = Utf8               getMemoryUsage\n-  #135 = Utf8               (I)I\n-  #136 = Utf8               (JI)V\n-  #137 = Utf8               (Ljava/io/InputStream;I)V\n-  #138 = Utf8               getMessage\n-  #139 = Utf8               ()Ljava/lang/String;\n-  #140 = Utf8               (Ljava/lang/String;)V\n-  #141 = Utf8               (Ljava/io/OutputStream;)V\n-  #142 = Utf8               getOutputStream\n-  #143 = Utf8               (Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n-  #144 = Utf8               java/lang/Integer\n-  #145 = Utf8               numberOfLeadingZeros\n-  #146 = Utf8               valueOf\n-  #147 = Utf8               (I)Ljava/lang/Integer;\n-  #148 = Utf8               ()I\n-  #149 = Utf8               properties\n-  #150 = Utf8               setDictSize\n-  #151 = Utf8               (I)V\n-  #152 = Utf8               (Ljava/lang/Object;I)I\n+   #61 = Class              #127          // java/lang/String\n+   #62 = Class              #128          // java/io/InputStream\n+   #63 = Class              #129          // org/apache/commons/compress/archivers/sevenz/Coder\n+   #64 = Class              #58           // \"[B\"\n+   #65 = Utf8               Exceptions\n+   #66 = Utf8               encode\n+   #67 = Utf8               (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n+   #68 = Utf8               out\n+   #69 = Utf8               Ljava/io/OutputStream;\n+   #70 = Utf8               opts\n+   #71 = Utf8               Ljava/lang/Object;\n+   #72 = Utf8               options\n+   #73 = Utf8               Lorg/tukaani/xz/LZMA2Options;\n+   #74 = Utf8               wrapped\n+   #75 = Utf8               Lorg/tukaani/xz/FinishableOutputStream;\n+   #76 = Utf8               getOptionsAsProperties\n+   #77 = Utf8               (Ljava/lang/Object;)[B\n+   #78 = Utf8               dictSize\n+   #79 = Utf8               lead\n+   #80 = Utf8               secondBit\n+   #81 = Utf8               getOptionsFromCoder\n+   #82 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n+   #83 = Utf8               getDictSize\n+   #84 = Utf8               (Ljava/lang/Object;)I\n+   #85 = Utf8               getDictionarySize\n+   #86 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #87 = Utf8               dictionarySizeBits\n+   #88 = Utf8               getOptions\n+   #89 = Utf8               (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+   #90 = Utf8               numberOptionOrDefault\n+   #91 = Utf8               SourceFile\n+   #92 = Utf8               LZMA2Decoder.java\n+   #93 = Utf8               java/lang/Class\n+   #94 = Utf8               org/tukaani/xz/LZMA2Options\n+   #95 = Utf8               java/lang/Number\n+   #96 = NameAndType        #35:#130      // \"<init>\":([Ljava/lang/Class;)V\n+   #97 = NameAndType        #85:#86       // getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #98 = NameAndType        #131:#132     // getMemoryUsage:(I)I\n+   #99 = Utf8               org/apache/commons/compress/MemoryLimitException\n+  #100 = NameAndType        #35:#133      // \"<init>\":(JI)V\n+  #101 = Utf8               org/tukaani/xz/LZMA2InputStream\n+  #102 = NameAndType        #35:#134      // \"<init>\":(Ljava/io/InputStream;I)V\n+  #103 = Utf8               java/lang/IllegalArgumentException\n+  #104 = Utf8               java/io/IOException\n+  #105 = NameAndType        #135:#136     // getMessage:()Ljava/lang/String;\n+  #106 = NameAndType        #35:#137      // \"<init>\":(Ljava/lang/String;)V\n+  #107 = NameAndType        #88:#89       // getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+  #108 = Utf8               org/tukaani/xz/FinishableWrapperOutputStream\n+  #109 = NameAndType        #35:#138      // \"<init>\":(Ljava/io/OutputStream;)V\n+  #110 = NameAndType        #139:#140     // getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n+  #111 = NameAndType        #83:#84       // getDictSize:(Ljava/lang/Object;)I\n+  #112 = Class              #141          // java/lang/Integer\n+  #113 = NameAndType        #142:#132     // numberOfLeadingZeros:(I)I\n+  #114 = NameAndType        #143:#144     // valueOf:(I)Ljava/lang/Integer;\n+  #115 = NameAndType        #83:#145      // getDictSize:()I\n+  #116 = NameAndType        #90:#84       // numberOptionOrDefault:(Ljava/lang/Object;)I\n+  #117 = NameAndType        #146:#58      // properties:[B\n+  #118 = Utf8               Missing LZMA2 properties\n+  #119 = Utf8               LZMA2 properties too short\n+  #120 = Utf8               Unsupported LZMA2 property bits\n+  #121 = Utf8               Dictionary larger than 4GiB maximum size\n+  #122 = NameAndType        #35:#36       // \"<init>\":()V\n+  #123 = NameAndType        #147:#148     // setDictSize:(I)V\n+  #124 = NameAndType        #90:#149      // numberOptionOrDefault:(Ljava/lang/Object;I)I\n+  #125 = Utf8               org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n+  #126 = Utf8               org/apache/commons/compress/archivers/sevenz/CoderBase\n+  #127 = Utf8               java/lang/String\n+  #128 = Utf8               java/io/InputStream\n+  #129 = Utf8               org/apache/commons/compress/archivers/sevenz/Coder\n+  #130 = Utf8               ([Ljava/lang/Class;)V\n+  #131 = Utf8               getMemoryUsage\n+  #132 = Utf8               (I)I\n+  #133 = Utf8               (JI)V\n+  #134 = Utf8               (Ljava/io/InputStream;I)V\n+  #135 = Utf8               getMessage\n+  #136 = Utf8               ()Ljava/lang/String;\n+  #137 = Utf8               (Ljava/lang/String;)V\n+  #138 = Utf8               (Ljava/io/OutputStream;)V\n+  #139 = Utf8               getOutputStream\n+  #140 = Utf8               (Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n+  #141 = Utf8               java/lang/Integer\n+  #142 = Utf8               numberOfLeadingZeros\n+  #143 = Utf8               valueOf\n+  #144 = Utf8               (I)Ljava/lang/Integer;\n+  #145 = Utf8               ()I\n+  #146 = Utf8               properties\n+  #147 = Utf8               setDictSize\n+  #148 = Utf8               (I)V\n+  #149 = Utf8               (Ljava/lang/Object;I)I\n {\n   org.apache.commons.compress.archivers.sevenz.LZMA2Decoder();\n     descriptor: ()V\n     flags: (0x0000)\n     Code:\n       stack=5, locals=1, args_size=1\n          0: aload_0\n"}]}
