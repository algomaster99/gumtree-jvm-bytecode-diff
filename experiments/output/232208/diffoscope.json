{"diffoscope-json-version": 1, "source1": "first/LegacyListDelimiterHandler.class", "source2": "second/LegacyListDelimiterHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,110 +11,110 @@\n public class LegacyListDelimiterHandler extends AbstractListDelimiterHandler\n {\n     private static final String ESCAPE = \"\\\\\";\n     private static final String DOUBLE_ESC = \"\\\\\\\\\";\n     private static final String QUAD_ESC = \"\\\\\\\\\\\\\\\\\";\n     private final char delimiter;\n     \n-    public LegacyListDelimiterHandler(final char listDelimiter) {\n-        this.delimiter = listDelimiter;\n+    public LegacyListDelimiterHandler(final char delimiter) {\n+        this.delimiter = delimiter;\n     }\n     \n     public char getDelimiter() {\n         return this.delimiter;\n     }\n     \n-    public Object escape(final Object value, final ValueTransformer transformer) {\n-        return this.escapeValue(value, false, transformer);\n+    public Object escape(final Object o, final ValueTransformer valueTransformer) {\n+        return this.escapeValue(o, false, valueTransformer);\n     }\n     \n-    public Object escapeList(final List<?> values, final ValueTransformer transformer) {\n-        if (!values.isEmpty()) {\n-            final Iterator<?> it = values.iterator();\n-            String lastValue = this.escapeValue(it.next(), true, transformer);\n-            final StringBuilder buf = new StringBuilder(lastValue);\n-            while (it.hasNext()) {\n-                if (lastValue.endsWith(\"\\\\\") && countTrailingBS(lastValue) / 2 % 2 != 0) {\n-                    buf.append(\"\\\\\").append(\"\\\\\");\n+    public Object escapeList(final List<?> list, final ValueTransformer valueTransformer) {\n+        if (!list.isEmpty()) {\n+            final Iterator iterator = list.iterator();\n+            String s = this.escapeValue(iterator.next(), true, valueTransformer);\n+            final StringBuilder sb = new StringBuilder(s);\n+            while (iterator.hasNext()) {\n+                if (s.endsWith(\"\\\\\") && countTrailingBS(s) / 2 % 2 != 0) {\n+                    sb.append(\"\\\\\").append(\"\\\\\");\n                 }\n-                buf.append(this.getDelimiter());\n-                lastValue = this.escapeValue(it.next(), true, transformer);\n-                buf.append(lastValue);\n+                sb.append(this.getDelimiter());\n+                s = this.escapeValue(iterator.next(), true, valueTransformer);\n+                sb.append(s);\n             }\n-            return buf.toString();\n+            return sb.toString();\n         }\n         return null;\n     }\n     \n-    protected Collection<String> splitString(final String s, final boolean trim) {\n-        if (s.indexOf(this.getDelimiter()) < 0) {\n-            return Collections.singleton(s);\n-        }\n-        final List<String> list = new ArrayList<String>();\n-        StringBuilder token = new StringBuilder();\n-        int begin = 0;\n-        boolean inEscape = false;\n-        final char esc = \"\\\\\".charAt(0);\n-        while (begin < s.length()) {\n-            final char c = s.charAt(begin);\n-            if (inEscape) {\n-                if (c != this.getDelimiter() && c != esc) {\n-                    token.append(esc);\n+    protected Collection<String> splitString(final String o, final boolean b) {\n+        if (o.indexOf(this.getDelimiter()) < 0) {\n+            return Collections.singleton(o);\n+        }\n+        final ArrayList list = new ArrayList();\n+        StringBuilder sb = new StringBuilder();\n+        int i = 0;\n+        int n = 0;\n+        final char char1 = \"\\\\\".charAt(0);\n+        while (i < o.length()) {\n+            final char char2 = o.charAt(i);\n+            if (n != 0) {\n+                if (char2 != this.getDelimiter() && char2 != char1) {\n+                    sb.append(char1);\n                 }\n-                token.append(c);\n-                inEscape = false;\n+                sb.append(char2);\n+                n = 0;\n             }\n-            else if (c == this.getDelimiter()) {\n-                String t = token.toString();\n-                if (trim) {\n-                    t = t.trim();\n+            else if (char2 == this.getDelimiter()) {\n+                String s = sb.toString();\n+                if (b) {\n+                    s = s.trim();\n                 }\n-                list.add(t);\n-                token = new StringBuilder();\n+                list.add(s);\n+                sb = new StringBuilder();\n             }\n-            else if (c == esc) {\n-                inEscape = true;\n+            else if (char2 == char1) {\n+                n = 1;\n             }\n             else {\n-                token.append(c);\n+                sb.append(char2);\n             }\n-            ++begin;\n+            ++i;\n         }\n-        if (inEscape) {\n-            token.append(esc);\n+        if (n != 0) {\n+            sb.append(char1);\n         }\n-        String t2 = token.toString();\n-        if (trim) {\n-            t2 = t2.trim();\n+        String s2 = sb.toString();\n+        if (b) {\n+            s2 = s2.trim();\n         }\n-        list.add(t2);\n+        list.add(s2);\n         return list;\n     }\n     \n     protected String escapeString(final String s) {\n         return null;\n     }\n     \n-    protected String escapeBackslashs(final Object value, final boolean inList) {\n-        String strValue = String.valueOf(value);\n-        if (inList && strValue.indexOf(\"\\\\\\\\\") >= 0) {\n-            strValue = StringUtils.replace(strValue, \"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n+    protected String escapeBackslashs(final Object obj, final boolean b) {\n+        String s = String.valueOf(obj);\n+        if (b && s.indexOf(\"\\\\\\\\\") >= 0) {\n+            s = StringUtils.replace(s, \"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n         }\n-        return strValue;\n+        return s;\n     }\n     \n-    protected String escapeValue(final Object value, final boolean inList, final ValueTransformer transformer) {\n-        String escapedValue = String.valueOf(transformer.transformValue((Object)this.escapeBackslashs(value, inList)));\n+    protected String escapeValue(final Object o, final boolean b, final ValueTransformer valueTransformer) {\n+        String s = String.valueOf(valueTransformer.transformValue((Object)this.escapeBackslashs(o, b)));\n         if (this.getDelimiter() != '\\0') {\n-            escapedValue = StringUtils.replace(escapedValue, String.valueOf(this.getDelimiter()), \"\\\\\" + this.getDelimiter());\n+            s = StringUtils.replace(s, String.valueOf(this.getDelimiter()), \"\\\\\" + this.getDelimiter());\n         }\n-        return escapedValue;\n+        return s;\n     }\n     \n-    private static int countTrailingBS(final String line) {\n-        int bsCount = 0;\n-        for (int idx = line.length() - 1; idx >= 0 && line.charAt(idx) == '\\\\'; --idx) {\n-            ++bsCount;\n+    private static int countTrailingBS(final String s) {\n+        int n = 0;\n+        for (int index = s.length() - 1; index >= 0 && s.charAt(index) == '\\\\'; --index) {\n+            ++n;\n         }\n-        return bsCount;\n+        return n;\n     }\n }\n"}]}
