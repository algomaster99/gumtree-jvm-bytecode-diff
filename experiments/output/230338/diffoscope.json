{"diffoscope-json-version": 1, "source1": "first/AnnotationsAttribute$Annotation.class", "source2": "second/AnnotationsAttribute$Annotation.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,45 +20,45 @@\n         this.num_pairs = num_pairs;\n         this.type = type;\n         this.element_names = element_names;\n         this.element_values = element_values;\n     }\n     \n     public int getLength() {\n-        int length = 4;\n+        int n = 4;\n         for (int i = 0; i < this.num_pairs; ++i) {\n-            length += 2;\n-            length += this.element_values[i].getLength();\n+            n += 2;\n+            n += this.element_values[i].getLength();\n         }\n-        return length;\n+        return n;\n     }\n     \n-    public void resolve(final ClassConstantPool pool) {\n-        this.type.resolve(pool);\n-        this.type_index = pool.indexOf((ClassFileEntry)this.type);\n+    public void resolve(final ClassConstantPool classConstantPool) {\n+        this.type.resolve(classConstantPool);\n+        this.type_index = classConstantPool.indexOf((ClassFileEntry)this.type);\n         this.name_indexes = new int[this.num_pairs];\n         for (int i = 0; i < this.element_names.length; ++i) {\n-            this.element_names[i].resolve(pool);\n-            this.name_indexes[i] = pool.indexOf((ClassFileEntry)this.element_names[i]);\n-            this.element_values[i].resolve(pool);\n+            this.element_names[i].resolve(classConstantPool);\n+            this.name_indexes[i] = classConstantPool.indexOf((ClassFileEntry)this.element_names[i]);\n+            this.element_values[i].resolve(classConstantPool);\n         }\n     }\n     \n-    public void writeBody(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.type_index);\n-        dos.writeShort(this.num_pairs);\n+    public void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.type_index);\n+        dataOutputStream.writeShort(this.num_pairs);\n         for (int i = 0; i < this.num_pairs; ++i) {\n-            dos.writeShort(this.name_indexes[i]);\n-            this.element_values[i].writeBody(dos);\n+            dataOutputStream.writeShort(this.name_indexes[i]);\n+            this.element_values[i].writeBody(dataOutputStream);\n         }\n     }\n     \n     public List getClassFileEntries() {\n-        final List entries = new ArrayList();\n+        final ArrayList list = new ArrayList();\n         for (int i = 0; i < this.element_names.length; ++i) {\n-            entries.add(this.element_names[i]);\n-            entries.addAll(this.element_values[i].getClassFileEntries());\n+            list.add(this.element_names[i]);\n+            list.addAll(this.element_values[i].getClassFileEntries());\n         }\n-        entries.add(this.type);\n-        return entries;\n+        list.add(this.type);\n+        return list;\n     }\n }\n"}]}
