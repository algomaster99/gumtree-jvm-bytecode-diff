{"diffoscope-json-version": 1, "source1": "first/UTF8DataInputJsonParser.class", "source2": "second/UTF8DataInputJsonParser.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,25 +1,25 @@\n \n package com.fasterxml.jackson.core.json;\n \n-import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonLocation;\n import java.util.Arrays;\n import java.io.EOFException;\n import com.fasterxml.jackson.core.JsonParseException;\n-import com.fasterxml.jackson.core.io.CharTypes;\n import com.fasterxml.jackson.core.util.ByteArrayBuilder;\n import com.fasterxml.jackson.core.Base64Variant;\n import java.io.Writer;\n import com.fasterxml.jackson.core.JsonToken;\n import java.io.IOException;\n import java.io.OutputStream;\n import com.fasterxml.jackson.core.StreamReadCapability;\n import com.fasterxml.jackson.core.util.JacksonFeatureSet;\n import com.fasterxml.jackson.core.io.IOContext;\n+import com.fasterxml.jackson.core.io.CharTypes;\n+import com.fasterxml.jackson.core.JsonParser;\n import java.io.DataInput;\n import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;\n import com.fasterxml.jackson.core.ObjectCodec;\n import com.fasterxml.jackson.core.base.ParserBase;\n \n public class UTF8DataInputJsonParser extends ParserBase\n {\n@@ -38,14 +38,27 @@\n     protected final ByteQuadsCanonicalizer _symbols;\n     protected int[] _quadBuffer;\n     protected boolean _tokenIncomplete;\n     private int _quad1;\n     protected DataInput _inputData;\n     protected int _nextByte;\n     \n+    static {\n+        FEAT_MASK_TRAILING_COMMA = JsonParser.Feature.ALLOW_TRAILING_COMMA.getMask();\n+        FEAT_MASK_LEADING_ZEROS = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS.getMask();\n+        FEAT_MASK_NON_NUM_NUMBERS = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS.getMask();\n+        FEAT_MASK_ALLOW_MISSING = JsonParser.Feature.ALLOW_MISSING_VALUES.getMask();\n+        FEAT_MASK_ALLOW_SINGLE_QUOTES = JsonParser.Feature.ALLOW_SINGLE_QUOTES.getMask();\n+        FEAT_MASK_ALLOW_UNQUOTED_NAMES = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES.getMask();\n+        FEAT_MASK_ALLOW_JAVA_COMMENTS = JsonParser.Feature.ALLOW_COMMENTS.getMask();\n+        FEAT_MASK_ALLOW_YAML_COMMENTS = JsonParser.Feature.ALLOW_YAML_COMMENTS.getMask();\n+        _icUTF8 = CharTypes.getInputCodeUtf8();\n+        _icLatin1 = CharTypes.getInputCodeLatin1();\n+    }\n+    \n     public UTF8DataInputJsonParser(final IOContext ctxt, final int features, final DataInput inputData, final ObjectCodec codec, final ByteQuadsCanonicalizer sym, final int firstByte) {\n         super(ctxt, features);\n         this._quadBuffer = new int[16];\n         this._nextByte = -1;\n         this._objectCodec = codec;\n         this._symbols = sym;\n         this._inputData = inputData;\n@@ -1564,24 +1577,15 @@\n         return this._textBuffer.contentsAsString();\n     }\n     \n     private final void _finishString2(char[] outBuf, int outPtr, int c) throws IOException {\n         final int[] codes = UTF8DataInputJsonParser._icUTF8;\n         int outEnd = outBuf.length;\n         while (true) {\n-            if (codes[c] == 0) {\n-                if (outPtr >= outEnd) {\n-                    outBuf = this._textBuffer.finishCurrentSegment();\n-                    outPtr = 0;\n-                    outEnd = outBuf.length;\n-                }\n-                outBuf[outPtr++] = (char)c;\n-                c = this._inputData.readUnsignedByte();\n-            }\n-            else {\n+            if (codes[c] != 0) {\n                 if (c == 34) {\n                     break;\n                 }\n                 switch (codes[c]) {\n                     case 1: {\n                         c = this._decodeEscaped();\n                         break;\n@@ -1618,14 +1622,23 @@\n                     outBuf = this._textBuffer.finishCurrentSegment();\n                     outPtr = 0;\n                     outEnd = outBuf.length;\n                 }\n                 outBuf[outPtr++] = (char)c;\n                 c = this._inputData.readUnsignedByte();\n             }\n+            else {\n+                if (outPtr >= outEnd) {\n+                    outBuf = this._textBuffer.finishCurrentSegment();\n+                    outPtr = 0;\n+                    outEnd = outBuf.length;\n+                }\n+                outBuf[outPtr++] = (char)c;\n+                c = this._inputData.readUnsignedByte();\n+            }\n         }\n         this._textBuffer.setCurrentLength(outPtr);\n     }\n     \n     protected void _skipString() throws IOException {\n         this._tokenIncomplete = false;\n         final int[] codes = UTF8DataInputJsonParser._icUTF8;\n@@ -1704,15 +1717,15 @@\n                 break;\n             }\n             case 43: {\n                 return this._handleInvalidNumberStart(this._inputData.readUnsignedByte(), false, true);\n             }\n         }\n         if (Character.isJavaIdentifierStart(c)) {\n-            this._reportInvalidToken(c, \"\" + (char)c, this._validJsonTokenList());\n+            this._reportInvalidToken(c, new StringBuilder().append((char)c).toString(), this._validJsonTokenList());\n         }\n         this._reportUnexpectedChar(c, \"expected a valid value \" + this._validJsonValueList());\n         return null;\n     }\n     \n     protected JsonToken _handleApos() throws IOException {\n         int c = 0;\n@@ -2387,21 +2400,8 @@\n             this._currToken = JsonToken.END_OBJECT;\n         }\n     }\n     \n     private static final int pad(final int q, final int bytes) {\n         return (bytes == 4) ? q : (q | -1 << (bytes << 3));\n     }\n-    \n-    static {\n-        FEAT_MASK_TRAILING_COMMA = JsonParser.Feature.ALLOW_TRAILING_COMMA.getMask();\n-        FEAT_MASK_LEADING_ZEROS = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS.getMask();\n-        FEAT_MASK_NON_NUM_NUMBERS = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS.getMask();\n-        FEAT_MASK_ALLOW_MISSING = JsonParser.Feature.ALLOW_MISSING_VALUES.getMask();\n-        FEAT_MASK_ALLOW_SINGLE_QUOTES = JsonParser.Feature.ALLOW_SINGLE_QUOTES.getMask();\n-        FEAT_MASK_ALLOW_UNQUOTED_NAMES = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES.getMask();\n-        FEAT_MASK_ALLOW_JAVA_COMMENTS = JsonParser.Feature.ALLOW_COMMENTS.getMask();\n-        FEAT_MASK_ALLOW_YAML_COMMENTS = JsonParser.Feature.ALLOW_YAML_COMMENTS.getMask();\n-        _icUTF8 = CharTypes.getInputCodeUtf8();\n-        _icLatin1 = CharTypes.getInputCodeLatin1();\n-    }\n }\n"}]}
