{"diffoscope-json-version": 1, "source1": "first/ByteArrayOutputStream.class", "source2": "second/ByteArrayOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,63 +8,63 @@\n \n public class ByteArrayOutputStream extends AbstractByteArrayOutputStream\n {\n     public ByteArrayOutputStream() {\n         this(1024);\n     }\n     \n-    public ByteArrayOutputStream(final int size) {\n-        if (size < 0) {\n-            throw new IllegalArgumentException(\"Negative initial size: \" + size);\n+    public ByteArrayOutputStream(final int i) {\n+        if (i < 0) {\n+            throw new IllegalArgumentException(\"Negative initial size: \" + i);\n         }\n         synchronized (this) {\n-            this.needNewBuffer(size);\n+            this.needNewBuffer(i);\n         }\n     }\n     \n-    public void write(final byte[] b, final int off, final int len) {\n-        if (off < 0 || off > b.length || len < 0 || off + len > b.length || off + len < 0) {\n+    public void write(final byte[] array, final int n, final int n2) {\n+        if (n < 0 || n > array.length || n2 < 0 || n + n2 > array.length || n + n2 < 0) {\n             throw new IndexOutOfBoundsException();\n         }\n-        if (len == 0) {\n+        if (n2 == 0) {\n             return;\n         }\n         synchronized (this) {\n-            this.writeImpl(b, off, len);\n+            this.writeImpl(array, n, n2);\n         }\n     }\n     \n-    public synchronized void write(final int b) {\n-        this.writeImpl(b);\n+    public synchronized void write(final int n) {\n+        this.writeImpl(n);\n     }\n     \n-    public synchronized int write(final InputStream in) throws IOException {\n-        return this.writeImpl(in);\n+    public synchronized int write(final InputStream inputStream) throws IOException {\n+        return this.writeImpl(inputStream);\n     }\n     \n     public synchronized int size() {\n         return this.count;\n     }\n     \n     public synchronized void reset() {\n         this.resetImpl();\n     }\n     \n-    public synchronized void writeTo(final OutputStream out) throws IOException {\n-        this.writeToImpl(out);\n+    public synchronized void writeTo(final OutputStream outputStream) throws IOException {\n+        this.writeToImpl(outputStream);\n     }\n     \n-    public static InputStream toBufferedInputStream(final InputStream input) throws IOException {\n-        return toBufferedInputStream(input, 1024);\n+    public static InputStream toBufferedInputStream(final InputStream inputStream) throws IOException {\n+        return toBufferedInputStream(inputStream, 1024);\n     }\n     \n-    public static InputStream toBufferedInputStream(final InputStream input, final int size) throws IOException {\n-        try (final ByteArrayOutputStream output = new ByteArrayOutputStream(size)) {\n-            output.write(input);\n-            return output.toInputStream();\n+    public static InputStream toBufferedInputStream(final InputStream inputStream, final int n) throws IOException {\n+        try (final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(n)) {\n+            byteArrayOutputStream.write(inputStream);\n+            return byteArrayOutputStream.toInputStream();\n         }\n     }\n     \n     public synchronized InputStream toInputStream() {\n         return this.toInputStream(ByteArrayInputStream::new);\n     }\n     \n"}]}
