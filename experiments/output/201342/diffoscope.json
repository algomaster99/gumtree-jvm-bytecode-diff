{"diffoscope-json-version": 1, "source1": "first/Digest.class", "source2": "second/Digest.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,16 +13,16 @@\n \n public class Digest\n {\n     private final String algorithm;\n     private final String[] args;\n     private final String[] inputs;\n     \n-    public static void main(final String[] args) throws IOException {\n-        new Digest(args).run();\n+    public static void main(final String[] array) throws IOException {\n+        new Digest(array).run();\n     }\n     \n     private Digest(final String[] args) {\n         if (args == null) {\n             throw new IllegalArgumentException(\"args\");\n         }\n         if (args.length == 0) {\n@@ -34,77 +34,76 @@\n             this.inputs = null;\n         }\n         else {\n             System.arraycopy(args, 1, this.inputs = new String[args.length - 1], 0, this.inputs.length);\n         }\n     }\n     \n-    private void println(final String prefix, final byte[] digest) {\n-        this.println(prefix, digest, null);\n+    private void println(final String s, final byte[] array) {\n+        this.println(s, array, null);\n     }\n     \n-    private void println(final String prefix, final byte[] digest, final String fileName) {\n-        System.out.println(prefix + Hex.encodeHexString(digest) + ((fileName != null) ? (\"  \" + fileName) : \"\"));\n+    private void println(final String str, final byte[] array, final String str2) {\n+        System.out.println(str + Hex.encodeHexString(array) + ((str2 != null) ? (\"  \" + str2) : \"\"));\n     }\n     \n     private void run() throws IOException {\n         if (this.algorithm.equalsIgnoreCase(\"ALL\") || this.algorithm.equals(\"*\")) {\n             this.run(MessageDigestAlgorithms.values());\n             return;\n         }\n-        final MessageDigest messageDigest = DigestUtils.getDigest(this.algorithm, (MessageDigest)null);\n-        if (messageDigest != null) {\n-            this.run(\"\", messageDigest);\n+        final MessageDigest digest = DigestUtils.getDigest(this.algorithm, (MessageDigest)null);\n+        if (digest != null) {\n+            this.run(\"\", digest);\n         }\n         else {\n             this.run(\"\", DigestUtils.getDigest(this.algorithm.toUpperCase(Locale.ROOT)));\n         }\n     }\n     \n-    private void run(final String[] digestAlgorithms) throws IOException {\n-        for (final String messageDigestAlgorithm : digestAlgorithms) {\n-            if (DigestUtils.isAvailable(messageDigestAlgorithm)) {\n-                this.run(messageDigestAlgorithm + \" \", messageDigestAlgorithm);\n+    private void run(final String[] array) throws IOException {\n+        for (final String str : array) {\n+            if (DigestUtils.isAvailable(str)) {\n+                this.run(str + \" \", str);\n             }\n         }\n     }\n     \n-    private void run(final String prefix, final MessageDigest messageDigest) throws IOException {\n+    private void run(final String s, final MessageDigest messageDigest) throws IOException {\n         if (this.inputs == null) {\n-            this.println(prefix, DigestUtils.digest(messageDigest, System.in));\n+            this.println(s, DigestUtils.digest(messageDigest, System.in));\n             return;\n         }\n-        for (final String source : this.inputs) {\n-            final File file = new File(source);\n+        for (final String pathname : this.inputs) {\n+            final File file = new File(pathname);\n             if (file.isFile()) {\n-                this.println(prefix, DigestUtils.digest(messageDigest, file), source);\n+                this.println(s, DigestUtils.digest(messageDigest, file), pathname);\n             }\n             else if (file.isDirectory()) {\n                 final File[] listFiles = file.listFiles();\n                 if (listFiles != null) {\n-                    this.run(prefix, messageDigest, listFiles);\n+                    this.run(s, messageDigest, listFiles);\n                 }\n             }\n             else {\n-                final byte[] bytes = source.getBytes(Charset.defaultCharset());\n-                this.println(prefix, DigestUtils.digest(messageDigest, bytes));\n+                this.println(s, DigestUtils.digest(messageDigest, pathname.getBytes(Charset.defaultCharset())));\n             }\n         }\n     }\n     \n-    private void run(final String prefix, final MessageDigest messageDigest, final File[] files) throws IOException {\n-        for (final File file : files) {\n+    private void run(final String s, final MessageDigest messageDigest, final File[] array) throws IOException {\n+        for (final File file : array) {\n             if (file.isFile()) {\n-                this.println(prefix, DigestUtils.digest(messageDigest, file), file.getName());\n+                this.println(s, DigestUtils.digest(messageDigest, file), file.getName());\n             }\n         }\n     }\n     \n-    private void run(final String prefix, final String messageDigestAlgorithm) throws IOException {\n-        this.run(prefix, DigestUtils.getDigest(messageDigestAlgorithm));\n+    private void run(final String s, final String s2) throws IOException {\n+        this.run(s, DigestUtils.getDigest(s2));\n     }\n     \n     @Override\n     public String toString() {\n         return String.format(\"%s %s\", super.toString(), Arrays.toString(this.args));\n     }\n }\n"}]}
