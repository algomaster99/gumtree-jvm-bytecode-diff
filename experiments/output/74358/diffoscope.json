{"diffoscope-json-version": 1, "source1": "first/CombinedConfigurationBuilder$ConfigurationSourceData.class", "source2": "second/CombinedConfigurationBuilder$ConfigurationSourceData.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -36,17 +36,17 @@\n         this.unionBuilders = new ArrayList();\n         this.namedBuilders = new HashMap();\n         this.allBuilders = new LinkedList();\n         this.changeListener = this.createBuilderChangeListener();\n     }\n     \n     public void initFromDefinitionConfiguration(final HierarchicalConfiguration<?> config) throws ConfigurationException {\n-        this.overrideDeclarations.addAll(CombinedConfigurationBuilder.access$300(this.this$0, (Collection)this.fetchTopLevelOverrideConfigs((HierarchicalConfiguration)config)));\n-        this.overrideDeclarations.addAll(CombinedConfigurationBuilder.access$300(this.this$0, (Collection)config.childConfigurationsAt(\"override\")));\n-        this.unionDeclarations.addAll(CombinedConfigurationBuilder.access$300(this.this$0, (Collection)config.childConfigurationsAt(\"additional\")));\n+        this.overrideDeclarations.addAll(CombinedConfigurationBuilder.access$2(this.this$0, (Collection)this.fetchTopLevelOverrideConfigs((HierarchicalConfiguration)config)));\n+        this.overrideDeclarations.addAll(CombinedConfigurationBuilder.access$2(this.this$0, (Collection)config.childConfigurationsAt(\"override\")));\n+        this.unionDeclarations.addAll(CombinedConfigurationBuilder.access$2(this.this$0, (Collection)config.childConfigurationsAt(\"additional\")));\n     }\n     \n     public List<ConfigurationBuilder<? extends Configuration>> createAndAddConfigurations(final CombinedConfiguration ccResult, final List<ConfigurationDeclaration> srcDecl, final List<ConfigurationBuilder<? extends Configuration>> builders) throws ConfigurationException {\n         final boolean createBuilders = builders.isEmpty();\n         List<ConfigurationBuilder<? extends Configuration>> newBuilders;\n         if (createBuilders) {\n             newBuilders = new ArrayList<ConfigurationBuilder<? extends Configuration>>(srcDecl.size());\n@@ -65,15 +65,15 @@\n             }\n             this.addChildConfiguration(ccResult, (ConfigurationDeclaration)srcDecl.get(i), (ConfigurationBuilder)b);\n         }\n         return newBuilders;\n     }\n     \n     public void cleanUp() {\n-        this.getChildBuilders().forEach(this::lambda$cleanUp$0);\n+        this.getChildBuilders().forEach(this::lambda$0);\n         this.namedBuilders.clear();\n     }\n     \n     public Collection<ConfigurationBuilder<? extends Configuration>> getChildBuilders() {\n         return this.allBuilders;\n     }\n     \n@@ -115,23 +115,25 @@\n             if (!decl.isOptional()) {\n                 throw cex;\n             }\n         }\n     }\n     \n     private EventListener<ConfigurationBuilderEvent> createBuilderChangeListener() {\n-        return (EventListener<ConfigurationBuilderEvent>)this::lambda$createBuilderChangeListener$1;\n+        return (EventListener<ConfigurationBuilderEvent>)this::lambda$1;\n     }\n     \n     private List<? extends HierarchicalConfiguration<?>> fetchTopLevelOverrideConfigs(final HierarchicalConfiguration<?> config) {\n         final List<? extends HierarchicalConfiguration<?>> configs = config.childConfigurationsAt((String)null);\n         final Iterator<? extends HierarchicalConfiguration<?>> it = configs.iterator();\n         while (it.hasNext()) {\n             final String nodeName = ((HierarchicalConfiguration)it.next()).getRootElementName();\n-            for (final String element : CombinedConfigurationBuilder.CONFIG_SECTIONS) {\n+            String[] config_SECTIONS;\n+            for (int length = (config_SECTIONS = CombinedConfigurationBuilder.CONFIG_SECTIONS).length, i = 0; i < length; ++i) {\n+                final String element = config_SECTIONS[i];\n                 if (element.equals(nodeName)) {\n                     it.remove();\n                     break;\n                 }\n             }\n         }\n         return configs;\n"}]}
