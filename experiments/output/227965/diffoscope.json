{"diffoscope-json-version": 1, "source1": "first/SiteUtil$DescriptionExtractor.class", "source2": "second/SiteUtil$DescriptionExtractor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,100 +1,94 @@\n \n package com.puppycrawl.tools.checkstyle.site;\n \n import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n import java.util.ArrayList;\n import org.apache.maven.doxia.macro.MacroExecutionException;\n-import java.util.Deque;\n+import java.util.List;\n import java.util.Arrays;\n import java.util.function.Consumer;\n import java.util.Objects;\n-import java.util.List;\n import com.google.common.collect.Lists;\n import java.util.ArrayDeque;\n import com.puppycrawl.tools.checkstyle.api.DetailNode;\n \n private static final class DescriptionExtractor\n {\n-    private static String getDescriptionFromJavadoc(final DetailNode javadoc, final String moduleName) throws MacroExecutionException {\n-        boolean isInCodeLiteral = false;\n-        boolean isInHtmlElement = false;\n-        boolean isInHrefAttribute = false;\n-        final StringBuilder description = new StringBuilder(128);\n-        final Deque<DetailNode> queue = new ArrayDeque<DetailNode>();\n-        final List<DetailNode> descriptionNodes = getDescriptionNodes(javadoc);\n-        final List reverse = Lists.reverse((List)descriptionNodes);\n-        final Deque<DetailNode> obj = queue;\n-        Objects.requireNonNull((ArrayDeque)obj);\n+    private static String getDescriptionFromJavadoc(final DetailNode detailNode, final String s) throws MacroExecutionException {\n+        int n = 0;\n+        boolean b = false;\n+        int n2 = 0;\n+        final StringBuilder sb = new StringBuilder(128);\n+        final ArrayDeque arrayDeque = new ArrayDeque();\n+        final List reverse = Lists.reverse(getDescriptionNodes(detailNode));\n+        final ArrayDeque obj = arrayDeque;\n+        Objects.requireNonNull(obj);\n         reverse.forEach(obj::push);\n-        while (!queue.isEmpty()) {\n-            final DetailNode node = (DetailNode)queue.pop();\n-            final List reverse2 = Lists.reverse((List)Arrays.asList(node.getChildren()));\n-            final Deque<DetailNode> obj2 = queue;\n-            Objects.requireNonNull((ArrayDeque)obj2);\n+        while (!arrayDeque.isEmpty()) {\n+            final DetailNode detailNode2 = (DetailNode)arrayDeque.pop();\n+            final List reverse2 = Lists.reverse((List)Arrays.asList(detailNode2.getChildren()));\n+            final ArrayDeque obj2 = arrayDeque;\n+            Objects.requireNonNull(obj2);\n             reverse2.forEach(obj2::push);\n-            if (node.getType() == 100 && \"href\".equals(node.getText())) {\n-                isInHrefAttribute = true;\n+            if (detailNode2.getType() == 100 && \"href\".equals(detailNode2.getText())) {\n+                n2 = 1;\n             }\n-            if (isInHrefAttribute && node.getType() == 89) {\n-                final String href = node.getText();\n-                if (href.contains(\"https://checkstyle.org/\")) {\n-                    handleInternalLink(description, moduleName, href);\n+            if (n2 != 0 && detailNode2.getType() == 89) {\n+                final String text = detailNode2.getText();\n+                if (text.contains(\"https://checkstyle.org/\")) {\n+                    handleInternalLink(sb, s, text);\n                 }\n                 else {\n-                    description.append(href);\n+                    sb.append(text);\n                 }\n-                isInHrefAttribute = false;\n+                n2 = 0;\n             }\n             else {\n-                if (node.getType() == 10001) {\n-                    isInHtmlElement = true;\n+                if (detailNode2.getType() == 10001) {\n+                    b = true;\n                 }\n-                if (node.getType() == 55 && node.getParent().getType() == 10003) {\n-                    description.append(node.getText());\n-                    isInHtmlElement = false;\n+                if (detailNode2.getType() == 55 && detailNode2.getParent().getType() == 10003) {\n+                    sb.append(detailNode2.getText());\n+                    b = false;\n                 }\n-                if (node.getType() == 10074 || (isInHtmlElement && node.getChildren().length == 0 && node.getType() != 1)) {\n-                    description.append(node.getText());\n+                if (detailNode2.getType() == 10074 || (b && detailNode2.getChildren().length == 0 && detailNode2.getType() != 1)) {\n+                    sb.append(detailNode2.getText());\n                 }\n-                if (node.getType() == 45) {\n-                    isInCodeLiteral = true;\n-                    description.append(\"<code>\");\n+                if (detailNode2.getType() == 45) {\n+                    n = 1;\n+                    sb.append(\"<code>\");\n                 }\n-                if (!isInCodeLiteral || node.getType() != 20) {\n+                if (n == 0 || detailNode2.getType() != 20) {\n                     continue;\n                 }\n-                isInCodeLiteral = false;\n-                description.append(\"</code>\");\n+                n = 0;\n+                sb.append(\"</code>\");\n             }\n         }\n-        return description.toString().trim();\n+        return sb.toString().trim();\n     }\n     \n-    private static void handleInternalLink(final StringBuilder description, final String moduleName, final String value) throws MacroExecutionException {\n-        String href = value;\n-        href = href.replace(\"https://checkstyle.org/\", \"\");\n-        href = href.substring(1, href.length() - 1);\n-        final String relativeHref = SiteUtil.getLinkToDocument(moduleName, href);\n-        final char doubleQuote = '\\\"';\n-        description.append('\\\"').append(relativeHref).append('\\\"');\n+    private static void handleInternalLink(final StringBuilder sb, final String s, final String s2) throws MacroExecutionException {\n+        final String replace = s2.replace(\"https://checkstyle.org/\", \"\");\n+        sb.append('\\\"').append(SiteUtil.getLinkToDocument(s, replace.substring(1, replace.length() - 1))).append('\\\"');\n     }\n     \n-    private static List<DetailNode> getDescriptionNodes(final DetailNode javadoc) {\n-        final DetailNode[] children = javadoc.getChildren();\n-        final List<DetailNode> descriptionNodes = new ArrayList<DetailNode>();\n-        for (final DetailNode child : children) {\n-            if (isEndOfDescription(child)) {\n+    private static List<DetailNode> getDescriptionNodes(final DetailNode detailNode) {\n+        final DetailNode[] children = detailNode.getChildren();\n+        final ArrayList list = new ArrayList();\n+        for (final DetailNode detailNode2 : children) {\n+            if (isEndOfDescription(detailNode2)) {\n                 break;\n             }\n-            descriptionNodes.add(child);\n+            list.add(detailNode2);\n         }\n-        return descriptionNodes;\n+        return list;\n     }\n     \n-    private static boolean isEndOfDescription(final DetailNode child) {\n-        final DetailNode nextSibling = JavadocUtil.getNextSibling(child);\n-        final DetailNode secondNextSibling = JavadocUtil.getNextSibling(nextSibling);\n-        final DetailNode thirdNextSibling = JavadocUtil.getNextSibling(secondNextSibling);\n-        return child.getType() == 6 && nextSibling.getType() == 1 && secondNextSibling.getType() == 6 && thirdNextSibling.getType() == 1;\n+    private static boolean isEndOfDescription(final DetailNode detailNode) {\n+        final DetailNode nextSibling = JavadocUtil.getNextSibling(detailNode);\n+        final DetailNode nextSibling2 = JavadocUtil.getNextSibling(nextSibling);\n+        final DetailNode nextSibling3 = JavadocUtil.getNextSibling(nextSibling2);\n+        return detailNode.getType() == 6 && nextSibling.getType() == 1 && nextSibling2.getType() == 6 && nextSibling3.getType() == 1;\n     }\n }\n"}]}
