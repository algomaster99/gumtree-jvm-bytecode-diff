{"diffoscope-json-version": 1, "source1": "first/AvoidDoubleBraceInitializationCheck.class", "source2": "second/AvoidDoubleBraceInitializationCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,14 +11,19 @@\n @StatelessCheck\n public class AvoidDoubleBraceInitializationCheck extends AbstractCheck\n {\n     public static final String MSG_KEY = \"avoid.double.brace.init\";\n     private static final BitSet IGNORED_TYPES;\n     private static final Predicate<DetailAST> HAS_MEMBERS;\n     \n+    static {\n+        IGNORED_TYPES = TokenUtil.asBitSet(new int[] { 11, 45, 72, 73 });\n+        HAS_MEMBERS = (token -> !AvoidDoubleBraceInitializationCheck.IGNORED_TYPES.get(token.getType()));\n+    }\n+    \n     public int[] getDefaultTokens() {\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getAcceptableTokens() {\n         return this.getRequiredTokens();\n     }\n@@ -33,13 +38,8 @@\n         }\n     }\n     \n     private static boolean hasOnlyInitialization(final DetailAST objBlock) {\n         final boolean hasInitBlock = objBlock.findFirstToken(11) != null;\n         return hasInitBlock && TokenUtil.findFirstTokenByPredicate(objBlock, (Predicate)AvoidDoubleBraceInitializationCheck.HAS_MEMBERS).isEmpty();\n     }\n-    \n-    static {\n-        IGNORED_TYPES = TokenUtil.asBitSet(new int[] { 11, 45, 72, 73 });\n-        HAS_MEMBERS = (token -> !AvoidDoubleBraceInitializationCheck.IGNORED_TYPES.get(token.getType()));\n-    }\n }\n"}]}
