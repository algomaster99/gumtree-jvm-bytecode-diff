{"diffoscope-json-version": 1, "source1": "first/ZCompressorInputStream.class", "source2": "second/ZCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,88 +12,88 @@\n     private static final int MAGIC_2 = 157;\n     private static final int BLOCK_MODE_MASK = 128;\n     private static final int MAX_CODE_SIZE_MASK = 31;\n     private final boolean blockMode;\n     private final int maxCodeSize;\n     private long totalCodesRead;\n     \n-    public static boolean matches(final byte[] signature, final int length) {\n-        return length > 3 && signature[0] == 31 && signature[1] == -99;\n+    public static boolean matches(final byte[] array, final int n) {\n+        return n > 3 && array[0] == 31 && array[1] == -99;\n     }\n     \n     public ZCompressorInputStream(final InputStream inputStream) throws IOException {\n         this(inputStream, -1);\n     }\n     \n-    public ZCompressorInputStream(final InputStream inputStream, final int memoryLimitInKb) throws IOException {\n+    public ZCompressorInputStream(final InputStream inputStream, final int n) throws IOException {\n         super(inputStream, ByteOrder.LITTLE_ENDIAN);\n-        final int firstByte = (int)this.in.readBits(8);\n-        final int secondByte = (int)this.in.readBits(8);\n-        final int thirdByte = (int)this.in.readBits(8);\n-        if (firstByte != 31 || secondByte != 157 || thirdByte < 0) {\n+        final int n2 = (int)this.in.readBits(8);\n+        final int n3 = (int)this.in.readBits(8);\n+        final int n4 = (int)this.in.readBits(8);\n+        if (n2 != 31 || n3 != 157 || n4 < 0) {\n             throw new IOException(\"Input is not in .Z format\");\n         }\n-        this.blockMode = ((thirdByte & 0x80) != 0x0);\n-        this.maxCodeSize = (thirdByte & 0x1F);\n+        this.blockMode = ((n4 & 0x80) != 0x0);\n+        this.maxCodeSize = (n4 & 0x1F);\n         if (this.blockMode) {\n             this.setClearCode(9);\n         }\n-        this.initializeTables(this.maxCodeSize, memoryLimitInKb);\n+        this.initializeTables(this.maxCodeSize, n);\n         this.clearEntries();\n     }\n     \n-    protected int addEntry(final int previousCode, final byte character) throws IOException {\n-        final int maxTableSize = 1 << this.getCodeSize();\n-        final int r = this.addEntry(previousCode, character, maxTableSize);\n-        if (this.getTableSize() == maxTableSize && this.getCodeSize() < this.maxCodeSize) {\n+    protected int addEntry(final int n, final byte b) throws IOException {\n+        final int n2 = 1 << this.getCodeSize();\n+        final int addEntry = this.addEntry(n, b, n2);\n+        if (this.getTableSize() == n2 && this.getCodeSize() < this.maxCodeSize) {\n             this.reAlignReading();\n             this.incrementCodeSize();\n         }\n-        return r;\n+        return addEntry;\n     }\n     \n     private void clearEntries() {\n         this.setTableSize(256 + (this.blockMode ? 1 : 0));\n     }\n     \n     protected int decompressNextSymbol() throws IOException {\n-        final int code = this.readNextCode();\n-        if (code < 0) {\n+        final int nextCode = this.readNextCode();\n+        if (nextCode < 0) {\n             return -1;\n         }\n-        if (this.blockMode && code == this.getClearCode()) {\n+        if (this.blockMode && nextCode == this.getClearCode()) {\n             this.clearEntries();\n             this.reAlignReading();\n             this.resetCodeSize();\n             this.resetPreviousCode();\n             return 0;\n         }\n-        boolean addedUnfinishedEntry = false;\n-        if (code == this.getTableSize()) {\n+        boolean b = false;\n+        if (nextCode == this.getTableSize()) {\n             this.addRepeatOfPreviousCode();\n-            addedUnfinishedEntry = true;\n+            b = true;\n         }\n-        else if (code > this.getTableSize()) {\n-            throw new IOException(String.format(\"Invalid %d bit code 0x%x\", Integer.valueOf(this.getCodeSize()), Integer.valueOf(code)));\n+        else if (nextCode > this.getTableSize()) {\n+            throw new IOException(String.format(\"Invalid %d bit code 0x%x\", Integer.valueOf(this.getCodeSize()), Integer.valueOf(nextCode)));\n         }\n-        return this.expandCodeToOutputStack(code, addedUnfinishedEntry);\n+        return this.expandCodeToOutputStack(nextCode, b);\n     }\n     \n     protected int readNextCode() throws IOException {\n-        final int code = super.readNextCode();\n-        if (code >= 0) {\n+        final int nextCode = super.readNextCode();\n+        if (nextCode >= 0) {\n             ++this.totalCodesRead;\n         }\n-        return code;\n+        return nextCode;\n     }\n     \n     private void reAlignReading() throws IOException {\n-        long codeReadsToThrowAway = 8L - this.totalCodesRead % 8L;\n-        if (codeReadsToThrowAway == 8L) {\n-            codeReadsToThrowAway = 0L;\n+        long n = 8L - this.totalCodesRead % 8L;\n+        if (n == 8L) {\n+            n = 0L;\n         }\n-        for (long i = 0L; i < codeReadsToThrowAway; ++i) {\n+        for (long n2 = 0L; n2 < n; ++n2) {\n             this.readNextCode();\n         }\n         this.in.clearBitCache();\n     }\n }\n"}]}
