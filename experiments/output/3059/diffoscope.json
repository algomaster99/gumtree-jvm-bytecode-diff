{"diffoscope-json-version": 1, "source1": "first/IcBands.class", "source2": "second/IcBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -47,24 +47,24 @@\n                 ic_outer_class[index2] = ((icTuple.C2 == null) ? 0 : (icTuple.C2.getIndex() + 1));\n                 ic_name[index2] = ((icTuple.N == null) ? 0 : (icTuple.N.getIndex() + 1));\n                 ++index2;\n             }\n         }\n         byte[] encodedBand = this.encodeBandInt(\"ic_this_class\", ic_this_class, Codec.UDELTA5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from ic_this_class[\" + ic_this_class.length + \"]\");\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from ic_this_class[\" + ic_this_class.length);\n         encodedBand = this.encodeBandInt(\"ic_flags\", ic_flags, Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from ic_flags[\" + ic_flags.length + \"]\");\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from ic_flags[\" + ic_flags.length);\n         encodedBand = this.encodeBandInt(\"ic_outer_class\", ic_outer_class, Codec.DELTA5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from ic_outer_class[\" + ic_outer_class.length + \"]\");\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from ic_outer_class[\" + ic_outer_class.length);\n         encodedBand = this.encodeBandInt(\"ic_name\", ic_name, Codec.DELTA5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from ic_name[\" + ic_name.length + \"]\");\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from ic_name[\" + ic_name.length);\n     }\n     \n     public void addInnerClass(final String name, final String outerName, final String innerName, int flags) {\n         if (outerName != null || innerName != null) {\n             if (this.namesArePredictable(name, outerName, innerName)) {\n                 final IcBands.IcTuple innerClass = new IcBands.IcTuple(this, this.cpBands.getCPClass(name), flags, (CPClass)null, (CPUTF8)null);\n                 this.addToMap(outerName, innerClass);\n@@ -109,15 +109,15 @@\n                 }\n             }\n             tuples.add(icTuple);\n         }\n     }\n     \n     private boolean namesArePredictable(final String name, final String outerName, final String innerName) {\n-        return name.equals(outerName + '$' + innerName) && innerName.indexOf(36) == -1;\n+        return name.equals(outerName + \"$\" + innerName) && innerName.indexOf(36) == -1;\n     }\n     \n     public IcBands.IcTuple getIcTuple(final CPClass inner) {\n         for (final IcBands.IcTuple icTuple : this.innerClasses) {\n             if (icTuple.C.equals(inner)) {\n                 return icTuple;\n             }\n"}]}
