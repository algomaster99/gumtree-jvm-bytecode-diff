{"diffoscope-json-version": 1, "source1": "first/ExtendedPOP3Client.class", "source2": "second/ExtendedPOP3Client.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,44 +11,44 @@\n import java.security.NoSuchAlgorithmException;\n \n public class ExtendedPOP3Client extends POP3SClient\n {\n     public ExtendedPOP3Client() throws NoSuchAlgorithmException {\n     }\n     \n-    public boolean auth(final ExtendedPOP3Client.AUTH_METHOD method, final String username, final String password) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {\n-        if (this.sendCommand(13, method.getAuthName()) != 2) {\n+    public boolean auth(final ExtendedPOP3Client.AUTH_METHOD auth_METHOD, final String str, final String str2) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {\n+        if (this.sendCommand(13, auth_METHOD.getAuthName()) != 2) {\n             return false;\n         }\n-        switch (ExtendedPOP3Client.ExtendedPOP3Client$1.$SwitchMap$org$apache$commons$net$pop3$ExtendedPOP3Client$AUTH_METHOD[method.ordinal()]) {\n+        switch (ExtendedPOP3Client.ExtendedPOP3Client$1.$SwitchMap$org$apache$commons$net$pop3$ExtendedPOP3Client$AUTH_METHOD[auth_METHOD.ordinal()]) {\n             case 1: {\n-                return this.sendCommand(new String(Base64.encodeBase64((\"\\u0000\" + username + \"\\u0000\" + password).getBytes(this.getCharset())), this.getCharset())) == 0;\n+                return this.sendCommand(new String(Base64.encodeBase64((\"\\u0000\" + str + \"\\u0000\" + str2).getBytes(this.getCharset())), this.getCharset())) == 0;\n             }\n             case 2: {\n-                final byte[] serverChallenge = Base64.decodeBase64(this.getReplyString().substring(2).trim());\n-                final Mac hmac_md5 = Mac.getInstance(\"HmacMD5\");\n-                hmac_md5.init(new SecretKeySpec(password.getBytes(this.getCharset()), \"HmacMD5\"));\n-                final byte[] hmacResult = this.convertToHexString(hmac_md5.doFinal(serverChallenge)).getBytes(this.getCharset());\n-                final byte[] usernameBytes = username.getBytes(this.getCharset());\n-                final byte[] toEncode = new byte[usernameBytes.length + 1 + hmacResult.length];\n-                System.arraycopy(usernameBytes, 0, toEncode, 0, usernameBytes.length);\n-                toEncode[usernameBytes.length] = 32;\n-                System.arraycopy(hmacResult, 0, toEncode, usernameBytes.length + 1, hmacResult.length);\n-                return this.sendCommand(Base64.encodeBase64StringUnChunked(toEncode)) == 0;\n+                final byte[] decodeBase64 = Base64.decodeBase64(this.getReplyString().substring(2).trim());\n+                final Mac instance = Mac.getInstance(\"HmacMD5\");\n+                instance.init(new SecretKeySpec(str2.getBytes(this.getCharset()), \"HmacMD5\"));\n+                final byte[] bytes = this.convertToHexString(instance.doFinal(decodeBase64)).getBytes(this.getCharset());\n+                final byte[] bytes2 = str.getBytes(this.getCharset());\n+                final byte[] array = new byte[bytes2.length + 1 + bytes.length];\n+                System.arraycopy(bytes2, 0, array, 0, bytes2.length);\n+                array[bytes2.length] = 32;\n+                System.arraycopy(bytes, 0, array, bytes2.length + 1, bytes.length);\n+                return this.sendCommand(Base64.encodeBase64StringUnChunked(array)) == 0;\n             }\n             default: {\n                 return false;\n             }\n         }\n     }\n     \n-    private String convertToHexString(final byte[] a) {\n-        final StringBuilder result = new StringBuilder(a.length * 2);\n-        for (final byte element : a) {\n-            if ((element & 0xFF) <= 15) {\n-                result.append(\"0\");\n+    private String convertToHexString(final byte[] array) {\n+        final StringBuilder sb = new StringBuilder(array.length * 2);\n+        for (final byte b : array) {\n+            if ((b & 0xFF) <= 15) {\n+                sb.append(\"0\");\n             }\n-            result.append(Integer.toHexString(element & 0xFF));\n+            sb.append(Integer.toHexString(b & 0xFF));\n         }\n-        return result.toString();\n+        return sb.toString();\n     }\n }\n"}]}
