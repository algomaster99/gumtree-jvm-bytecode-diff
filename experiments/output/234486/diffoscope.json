{"diffoscope-json-version": 1, "source1": "first/RandomAccessFileInputStream.class", "source2": "second/RandomAccessFileInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,30 +7,30 @@\n import java.io.InputStream;\n \n public class RandomAccessFileInputStream extends InputStream\n {\n     private final boolean closeOnClose;\n     private final RandomAccessFile randomAccessFile;\n     \n-    public RandomAccessFileInputStream(final RandomAccessFile file) {\n-        this(file, false);\n+    public RandomAccessFileInputStream(final RandomAccessFile randomAccessFile) {\n+        this(randomAccessFile, false);\n     }\n     \n-    public RandomAccessFileInputStream(final RandomAccessFile file, final boolean closeOnClose) {\n-        this.randomAccessFile = Objects.requireNonNull(file, \"file\");\n+    public RandomAccessFileInputStream(final RandomAccessFile obj, final boolean closeOnClose) {\n+        this.randomAccessFile = Objects.requireNonNull(obj, \"file\");\n         this.closeOnClose = closeOnClose;\n     }\n     \n     @Override\n     public int available() throws IOException {\n-        final long avail = this.availableLong();\n-        if (avail > 2147483647L) {\n+        final long availableLong = this.availableLong();\n+        if (availableLong > 2147483647L) {\n             return Integer.MAX_VALUE;\n         }\n-        return (int)avail;\n+        return (int)availableLong;\n     }\n     \n     public long availableLong() throws IOException {\n         return this.randomAccessFile.length() - this.randomAccessFile.getFilePointer();\n     }\n     \n     @Override\n@@ -51,38 +51,38 @@\n     \n     @Override\n     public int read() throws IOException {\n         return this.randomAccessFile.read();\n     }\n     \n     @Override\n-    public int read(final byte[] bytes) throws IOException {\n-        return this.randomAccessFile.read(bytes);\n+    public int read(final byte[] b) throws IOException {\n+        return this.randomAccessFile.read(b);\n     }\n     \n     @Override\n-    public int read(final byte[] bytes, final int offset, final int length) throws IOException {\n-        return this.randomAccessFile.read(bytes, offset, length);\n+    public int read(final byte[] b, final int off, final int len) throws IOException {\n+        return this.randomAccessFile.read(b, off, len);\n     }\n     \n-    private void seek(final long position) throws IOException {\n-        this.randomAccessFile.seek(position);\n+    private void seek(final long pos) throws IOException {\n+        this.randomAccessFile.seek(pos);\n     }\n     \n     @Override\n-    public long skip(final long skipCount) throws IOException {\n-        if (skipCount <= 0L) {\n+    public long skip(final long n) throws IOException {\n+        if (n <= 0L) {\n             return 0L;\n         }\n         final long filePointer = this.randomAccessFile.getFilePointer();\n-        final long fileLength = this.randomAccessFile.length();\n-        if (filePointer >= fileLength) {\n+        final long length = this.randomAccessFile.length();\n+        if (filePointer >= length) {\n             return 0L;\n         }\n-        final long targetPos = filePointer + skipCount;\n-        final long newPos = (targetPos > fileLength) ? (fileLength - 1L) : targetPos;\n-        if (newPos > 0L) {\n-            this.seek(newPos);\n+        final long n2 = filePointer + n;\n+        final long n3 = (n2 > length) ? (length - 1L) : n2;\n+        if (n3 > 0L) {\n+            this.seek(n3);\n         }\n         return this.randomAccessFile.getFilePointer() - filePointer;\n     }\n }\n"}]}
