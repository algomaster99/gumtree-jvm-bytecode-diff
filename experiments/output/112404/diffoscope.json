{"diffoscope-json-version": 1, "source1": "first/Code.class", "source2": "second/Code.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -49,44 +49,50 @@\n     public void accept(final Visitor v) {\n         v.visitCode(this);\n     }\n     \n     private int calculateLength() {\n         int len = 0;\n         if (this.attributes != null) {\n-            for (final Attribute attribute : this.attributes) {\n+            Attribute[] attributes;\n+            for (int length = (attributes = this.attributes).length, i = 0; i < length; ++i) {\n+                final Attribute attribute = attributes[i];\n                 len += attribute.getLength() + 6;\n             }\n         }\n         return len + this.getInternalLength();\n     }\n     \n     public Attribute copy(final ConstantPool constantPool) {\n         final Code c = (Code)this.clone();\n         if (this.code != null) {\n             c.code = this.code.clone();\n         }\n         c.setConstantPool(constantPool);\n         Arrays.setAll(c.exceptionTable = new CodeException[this.exceptionTable.length], i -> this.exceptionTable[i].copy());\n-        Arrays.setAll(c.attributes = new Attribute[this.attributes.length], i -> this.attributes[i].copy(constantPool));\n+        Arrays.setAll(c.attributes = new Attribute[this.attributes.length], i -> this.attributes[i].copy(constantPool2));\n         return c;\n     }\n     \n     public void dump(final DataOutputStream file) throws IOException {\n         super.dump(file);\n         file.writeShort(this.maxStack);\n         file.writeShort(this.maxLocals);\n         file.writeInt(this.code.length);\n         file.write(this.code, 0, this.code.length);\n         file.writeShort(this.exceptionTable.length);\n-        for (final CodeException exception : this.exceptionTable) {\n+        CodeException[] exceptionTable;\n+        for (int length = (exceptionTable = this.exceptionTable).length, i = 0; i < length; ++i) {\n+            final CodeException exception = exceptionTable[i];\n             exception.dump(file);\n         }\n         file.writeShort(this.attributes.length);\n-        for (final Attribute attribute : this.attributes) {\n+        Attribute[] attributes;\n+        for (int length2 = (attributes = this.attributes).length, j = 0; j < length2; ++j) {\n+            final Attribute attribute = attributes[j];\n             attribute.dump(file);\n         }\n     }\n     \n     public Attribute[] getAttributes() {\n         return this.attributes;\n     }\n@@ -100,24 +106,28 @@\n     }\n     \n     private int getInternalLength() {\n         return 8 + this.code.length + 2 + 8 * ((this.exceptionTable == null) ? 0 : this.exceptionTable.length) + 2;\n     }\n     \n     public LineNumberTable getLineNumberTable() {\n-        for (final Attribute attribute : this.attributes) {\n+        Attribute[] attributes;\n+        for (int length = (attributes = this.attributes).length, i = 0; i < length; ++i) {\n+            final Attribute attribute = attributes[i];\n             if (attribute instanceof LineNumberTable) {\n                 return (LineNumberTable)attribute;\n             }\n         }\n         return null;\n     }\n     \n     public LocalVariableTable getLocalVariableTable() {\n-        for (final Attribute attribute : this.attributes) {\n+        Attribute[] attributes;\n+        for (int length = (attributes = this.attributes).length, i = 0; i < length; ++i) {\n+            final Attribute attribute = attributes[i];\n             if (attribute instanceof LocalVariableTable) {\n                 return (LocalVariableTable)attribute;\n             }\n         }\n         return null;\n     }\n     \n@@ -157,21 +167,25 @@\n     }\n     \n     public String toString(final boolean verbose) {\n         final StringBuilder buf = new StringBuilder(100);\n         buf.append(\"Code(maxStack = \").append(this.maxStack).append(\", maxLocals = \").append(this.maxLocals).append(\", code_length = \").append(this.code.length).append(\")\\n\").append(Utility.codeToString(this.code, super.getConstantPool(), 0, -1, verbose));\n         if (this.exceptionTable.length > 0) {\n             buf.append(\"\\nException handler(s) = \\n\").append(\"From\\tTo\\tHandler\\tType\\n\");\n-            for (final CodeException exception : this.exceptionTable) {\n+            CodeException[] exceptionTable;\n+            for (int length = (exceptionTable = this.exceptionTable).length, i = 0; i < length; ++i) {\n+                final CodeException exception = exceptionTable[i];\n                 buf.append(exception.toString(super.getConstantPool(), verbose)).append(\"\\n\");\n             }\n         }\n         if (this.attributes.length > 0) {\n             buf.append(\"\\nAttribute(s) = \");\n-            for (final Attribute attribute : this.attributes) {\n+            Attribute[] attributes;\n+            for (int length2 = (attributes = this.attributes).length, j = 0; j < length2; ++j) {\n+                final Attribute attribute = attributes[j];\n                 buf.append(\"\\n\").append(attribute.getName()).append(\":\");\n                 buf.append(\"\\n\").append(attribute);\n             }\n         }\n         return buf.toString();\n     }\n }\n"}]}
