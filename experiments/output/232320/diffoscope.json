{"diffoscope-json-version": 1, "source1": "first/QueryResult.class", "source2": "second/QueryResult.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,68 +7,68 @@\n import org.apache.commons.lang3.StringUtils;\n \n public final class QueryResult<T>\n {\n     private final T node;\n     private final String attributeName;\n     \n-    private QueryResult(final T nd, final String attr) {\n-        this.node = nd;\n-        this.attributeName = attr;\n+    private QueryResult(final T node, final String attributeName) {\n+        this.node = node;\n+        this.attributeName = attributeName;\n     }\n     \n-    public static <T> QueryResult<T> createNodeResult(final T resultNode) {\n-        return new QueryResult<T>(resultNode, null);\n+    public static <T> QueryResult<T> createNodeResult(final T t) {\n+        return new QueryResult<T>(t, null);\n     }\n     \n-    public static <T> QueryResult<T> createAttributeResult(final T parentNode, final String attrName) {\n-        return new QueryResult<T>(parentNode, attrName);\n+    public static <T> QueryResult<T> createAttributeResult(final T t, final String s) {\n+        return new QueryResult<T>(t, s);\n     }\n     \n     public T getNode() {\n         return this.node;\n     }\n     \n     public String getAttributeName() {\n         return this.attributeName;\n     }\n     \n     public boolean isAttributeResult() {\n         return StringUtils.isNotEmpty((CharSequence)this.getAttributeName());\n     }\n     \n-    public Object getAttributeValue(final NodeHandler<T> handler) {\n+    public Object getAttributeValue(final NodeHandler<T> nodeHandler) {\n         if (!this.isAttributeResult()) {\n             throw new IllegalStateException(\"This is not an attribute result! Attribute value cannot be fetched.\");\n         }\n-        return handler.getAttributeValue(this.getNode(), this.getAttributeName());\n+        return nodeHandler.getAttributeValue(this.getNode(), this.getAttributeName());\n     }\n     \n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().append(this.getNode()).append((Object)this.getAttributeName()).toHashCode();\n     }\n     \n     @Override\n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (!(obj instanceof QueryResult)) {\n+        if (!(o instanceof QueryResult)) {\n             return false;\n         }\n-        final QueryResult<?> c = (QueryResult)obj;\n-        return new EqualsBuilder().append(this.getNode(), (Object)c.getNode()).append((Object)this.getAttributeName(), (Object)c.getAttributeName()).isEquals();\n+        final QueryResult queryResult = (QueryResult)o;\n+        return new EqualsBuilder().append(this.getNode(), queryResult.getNode()).append((Object)this.getAttributeName(), (Object)queryResult.getAttributeName()).isEquals();\n     }\n     \n     @Override\n     public String toString() {\n-        final ToStringBuilder sb = new ToStringBuilder((Object)this);\n+        final ToStringBuilder toStringBuilder = new ToStringBuilder((Object)this);\n         if (this.isAttributeResult()) {\n-            sb.append(\"parentNode\", this.getNode()).append(\"attribute\", (Object)this.getAttributeName());\n+            toStringBuilder.append(\"parentNode\", this.getNode()).append(\"attribute\", (Object)this.getAttributeName());\n         }\n         else {\n-            sb.append(\"resultNode\", this.getNode());\n+            toStringBuilder.append(\"resultNode\", this.getNode());\n         }\n-        return sb.toString();\n+        return toStringBuilder.toString();\n     }\n }\n"}]}
