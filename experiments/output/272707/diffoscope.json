{"diffoscope-json-version": 1, "source1": "first/IfHandler.class", "source2": "second/IfHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,60 +2,58 @@\n package com.puppycrawl.tools.checkstyle.checks.indentation;\n \n import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n \n public class IfHandler extends BlockParentHandler\n {\n-    public IfHandler(final IndentationCheck indentCheck, final DetailAST ast, final AbstractExpressionHandler parent) {\n-        super(indentCheck, \"if\", ast, parent);\n+    public IfHandler(final IndentationCheck indentationCheck, final DetailAST detailAST, final AbstractExpressionHandler abstractExpressionHandler) {\n+        super(indentationCheck, \"if\", detailAST, abstractExpressionHandler);\n     }\n     \n-    public IndentLevel getSuggestedChildIndent(final AbstractExpressionHandler child) {\n-        IndentLevel result;\n-        if (child instanceof ElseHandler) {\n-            result = this.getIndent();\n+    public IndentLevel getSuggestedChildIndent(final AbstractExpressionHandler abstractExpressionHandler) {\n+        IndentLevel indentLevel;\n+        if (abstractExpressionHandler instanceof ElseHandler) {\n+            indentLevel = this.getIndent();\n         }\n         else {\n-            result = super.getSuggestedChildIndent(child);\n+            indentLevel = super.getSuggestedChildIndent(abstractExpressionHandler);\n         }\n-        return result;\n+        return indentLevel;\n     }\n     \n     protected IndentLevel getIndentImpl() {\n-        IndentLevel result;\n+        IndentLevel indentLevel;\n         if (this.isIfAfterElse()) {\n-            result = this.getParent().getIndent();\n+            indentLevel = this.getParent().getIndent();\n         }\n         else {\n-            result = super.getIndentImpl();\n+            indentLevel = super.getIndentImpl();\n         }\n-        return result;\n+        return indentLevel;\n     }\n     \n     private boolean isIfAfterElse() {\n         final DetailAST parent = this.getMainAst().getParent();\n         return parent.getType() == 92 && TokenUtil.areOnSameLine(parent, this.getMainAst());\n     }\n     \n     protected void checkTopLevelToken() {\n         if (!this.isIfAfterElse()) {\n             super.checkTopLevelToken();\n         }\n     }\n     \n     private void checkCondExpr() {\n-        final DetailAST condAst = this.getMainAst().findFirstToken(76).getNextSibling();\n-        final IndentLevel expected = new IndentLevel(this.getIndent(), new int[] { this.getBasicOffset() });\n-        this.checkExpressionSubtree(condAst, expected, false, false);\n+        this.checkExpressionSubtree(this.getMainAst().findFirstToken(76).getNextSibling(), new IndentLevel(this.getIndent(), new int[] { this.getBasicOffset() }), false, false);\n     }\n     \n     public void checkIndentation() {\n         super.checkIndentation();\n         this.checkCondExpr();\n         this.checkWrappingIndentation(this.getMainAst(), getIfStatementRightParen(this.getMainAst()));\n     }\n     \n-    private static DetailAST getIfStatementRightParen(final DetailAST literalIfAst) {\n-        return literalIfAst.findFirstToken(77);\n+    private static DetailAST getIfStatementRightParen(final DetailAST detailAST) {\n+        return detailAST.findFirstToken(77);\n     }\n }\n"}]}
