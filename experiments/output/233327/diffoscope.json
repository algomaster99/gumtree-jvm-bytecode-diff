{"diffoscope-json-version": 1, "source1": "first/AbstractImmutableNodeHandler.class", "source2": "second/AbstractImmutableNodeHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,72 +5,72 @@\n import java.util.Iterator;\n import java.util.Collections;\n import java.util.ArrayList;\n import java.util.List;\n \n abstract class AbstractImmutableNodeHandler implements NodeHandler<ImmutableNode>\n {\n-    public String nodeName(final ImmutableNode node) {\n-        return node.getNodeName();\n+    public String nodeName(final ImmutableNode immutableNode) {\n+        return immutableNode.getNodeName();\n     }\n     \n-    public Object getValue(final ImmutableNode node) {\n-        return node.getValue();\n+    public Object getValue(final ImmutableNode immutableNode) {\n+        return immutableNode.getValue();\n     }\n     \n-    public List<ImmutableNode> getChildren(final ImmutableNode node) {\n-        return node.getChildren();\n+    public List<ImmutableNode> getChildren(final ImmutableNode immutableNode) {\n+        return immutableNode.getChildren();\n     }\n     \n-    public <C> int getMatchingChildrenCount(final ImmutableNode node, final NodeMatcher<C> matcher, final C criterion) {\n-        return this.getMatchingChildren(node, matcher, criterion).size();\n+    public <C> int getMatchingChildrenCount(final ImmutableNode immutableNode, final NodeMatcher<C> nodeMatcher, final C c) {\n+        return this.getMatchingChildren(immutableNode, nodeMatcher, c).size();\n     }\n     \n-    public <C> List<ImmutableNode> getMatchingChildren(final ImmutableNode node, final NodeMatcher<C> matcher, final C criterion) {\n-        final List<ImmutableNode> result = new ArrayList<ImmutableNode>(node.getChildren().size());\n-        for (final ImmutableNode c : node) {\n-            if (matcher.matches((Object)c, (NodeHandler)this, (Object)criterion)) {\n-                result.add(c);\n+    public <C> List<ImmutableNode> getMatchingChildren(final ImmutableNode immutableNode, final NodeMatcher<C> nodeMatcher, final C c) {\n+        final ArrayList list = new ArrayList(immutableNode.getChildren().size());\n+        for (final ImmutableNode immutableNode2 : immutableNode) {\n+            if (nodeMatcher.matches((Object)immutableNode2, (NodeHandler)this, (Object)c)) {\n+                list.add(immutableNode2);\n             }\n         }\n-        return Collections.unmodifiableList((List<? extends ImmutableNode>)result);\n+        return (List<ImmutableNode>)Collections.unmodifiableList((List<?>)list);\n     }\n     \n-    public List<ImmutableNode> getChildren(final ImmutableNode node, final String name) {\n-        return this.getMatchingChildren(node, (org.apache.commons.configuration2.tree.NodeMatcher<String>)NodeNameMatchers.EQUALS, name);\n+    public List<ImmutableNode> getChildren(final ImmutableNode immutableNode, final String s) {\n+        return this.getMatchingChildren(immutableNode, (org.apache.commons.configuration2.tree.NodeMatcher<String>)NodeNameMatchers.EQUALS, s);\n     }\n     \n-    public ImmutableNode getChild(final ImmutableNode node, final int index) {\n-        return node.getChildren().get(index);\n+    public ImmutableNode getChild(final ImmutableNode immutableNode, final int n) {\n+        return immutableNode.getChildren().get(n);\n     }\n     \n-    public int indexOfChild(final ImmutableNode parent, final ImmutableNode child) {\n-        return parent.getChildren().indexOf(child);\n+    public int indexOfChild(final ImmutableNode immutableNode, final ImmutableNode immutableNode2) {\n+        return immutableNode.getChildren().indexOf(immutableNode2);\n     }\n     \n-    public int getChildrenCount(final ImmutableNode node, final String name) {\n-        if (name == null) {\n-            return node.getChildren().size();\n+    public int getChildrenCount(final ImmutableNode immutableNode, final String s) {\n+        if (s == null) {\n+            return immutableNode.getChildren().size();\n         }\n-        return this.getMatchingChildrenCount(node, (org.apache.commons.configuration2.tree.NodeMatcher<String>)NodeNameMatchers.EQUALS, name);\n+        return this.getMatchingChildrenCount(immutableNode, (org.apache.commons.configuration2.tree.NodeMatcher<String>)NodeNameMatchers.EQUALS, s);\n     }\n     \n-    public Set<String> getAttributes(final ImmutableNode node) {\n-        return node.getAttributes().keySet();\n+    public Set<String> getAttributes(final ImmutableNode immutableNode) {\n+        return immutableNode.getAttributes().keySet();\n     }\n     \n-    public boolean hasAttributes(final ImmutableNode node) {\n-        return !node.getAttributes().isEmpty();\n+    public boolean hasAttributes(final ImmutableNode immutableNode) {\n+        return !immutableNode.getAttributes().isEmpty();\n     }\n     \n-    public Object getAttributeValue(final ImmutableNode node, final String name) {\n-        return node.getAttributes().get(name);\n+    public Object getAttributeValue(final ImmutableNode immutableNode, final String s) {\n+        return immutableNode.getAttributes().get(s);\n     }\n     \n-    public boolean isDefined(final ImmutableNode node) {\n-        return checkIfNodeDefined(node);\n+    public boolean isDefined(final ImmutableNode immutableNode) {\n+        return checkIfNodeDefined(immutableNode);\n     }\n     \n-    static boolean checkIfNodeDefined(final ImmutableNode node) {\n-        return node.getValue() != null || !node.getChildren().isEmpty() || !node.getAttributes().isEmpty();\n+    static boolean checkIfNodeDefined(final ImmutableNode immutableNode) {\n+        return immutableNode.getValue() != null || !immutableNode.getChildren().isEmpty() || !immutableNode.getAttributes().isEmpty();\n     }\n }\n"}]}
