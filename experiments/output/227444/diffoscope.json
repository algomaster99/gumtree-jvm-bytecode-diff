{"diffoscope-json-version": 1, "source1": "first/IndentationCheck.class", "source2": "second/IndentationCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -40,36 +40,36 @@\n         this.lineWrappingIndentation = 4;\n     }\n     \n     public boolean isForceStrictCondition() {\n         return this.forceStrictCondition;\n     }\n     \n-    public void setForceStrictCondition(final boolean value) {\n-        this.forceStrictCondition = value;\n+    public void setForceStrictCondition(final boolean forceStrictCondition) {\n+        this.forceStrictCondition = forceStrictCondition;\n     }\n     \n     public void setBasicOffset(final int basicOffset) {\n         this.basicOffset = basicOffset;\n     }\n     \n     public int getBasicOffset() {\n         return this.basicOffset;\n     }\n     \n-    public void setBraceAdjustment(final int adjustmentAmount) {\n-        this.braceAdjustment = adjustmentAmount;\n+    public void setBraceAdjustment(final int braceAdjustment) {\n+        this.braceAdjustment = braceAdjustment;\n     }\n     \n     public int getBraceAdjustment() {\n         return this.braceAdjustment;\n     }\n     \n-    public void setCaseIndent(final int amount) {\n-        this.caseIndent = amount;\n+    public void setCaseIndent(final int caseIndent) {\n+        this.caseIndent = caseIndent;\n     }\n     \n     public int getCaseIndent() {\n         return this.caseIndent;\n     }\n     \n     public void setThrowsIndent(final int throwsIndent) {\n@@ -92,18 +92,18 @@\n         return this.lineWrappingIndentation;\n     }\n     \n     public void setLineWrappingIndentation(final int lineWrappingIndentation) {\n         this.lineWrappingIndentation = lineWrappingIndentation;\n     }\n     \n-    public void indentationLog(final DetailAST ast, final String key, final Object... args) {\n-        if (!this.incorrectIndentationLines.contains(Integer.valueOf(ast.getLineNo()))) {\n-            this.incorrectIndentationLines.add(Integer.valueOf(ast.getLineNo()));\n-            this.log(ast, key, args);\n+    public void indentationLog(final DetailAST detailAST, final String s, final Object... array) {\n+        if (!this.incorrectIndentationLines.contains(Integer.valueOf(detailAST.getLineNo()))) {\n+            this.incorrectIndentationLines.add(Integer.valueOf(detailAST.getLineNo()));\n+            this.log(detailAST, s, array);\n         }\n     }\n     \n     public int getIndentationTabWidth() {\n         return this.getTabWidth();\n     }\n     \n@@ -115,30 +115,30 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return this.handlerFactory.getHandledTypes();\n     }\n     \n-    public void beginTree(final DetailAST ast) {\n+    public void beginTree(final DetailAST detailAST) {\n         this.handlerFactory.clearCreatedHandlers();\n         this.handlers.clear();\n         final PrimordialHandler primordialHandler = new PrimordialHandler(this);\n         this.handlers.push((AbstractExpressionHandler)primordialHandler);\n         primordialHandler.checkIndentation();\n         this.incorrectIndentationLines = new HashSet<Integer>();\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final AbstractExpressionHandler handler = this.handlerFactory.getHandler(this, ast, (AbstractExpressionHandler)this.handlers.peek());\n+    public void visitToken(final DetailAST detailAST) {\n+        final AbstractExpressionHandler handler = this.handlerFactory.getHandler(this, detailAST, (AbstractExpressionHandler)this.handlers.peek());\n         this.handlers.push(handler);\n         handler.checkIndentation();\n     }\n     \n-    public void leaveToken(final DetailAST ast) {\n+    public void leaveToken(final DetailAST detailAST) {\n         this.handlers.pop();\n     }\n     \n     public LineWrappingHandler getLineWrappingHandler() {\n         return this.lineWrappingHandler;\n     }\n     \n"}]}
