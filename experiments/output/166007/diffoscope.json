{"diffoscope-json-version": 1, "source1": "first/BaseHierarchicalConfiguration.class", "source2": "second/BaseHierarchicalConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -144,15 +144,15 @@\n         final BaseHierarchicalConfiguration sub = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>)new InMemoryNodeModel(node));\n         this.initSubConfiguration(sub);\n         return sub;\n     }\n     \n     private List<ImmutableNode> fetchFilteredNodeResults(final String key) {\n         final NodeHandler<ImmutableNode> handler = (NodeHandler<ImmutableNode>)this.getModel().getNodeHandler();\n-        return this.resolveNodeKey(handler.getRootNode(), key, (NodeHandler)handler);\n+        return this.resolveNodeKey((Object)handler.getRootNode(), key, (NodeHandler)handler);\n     }\n     \n     public ImmutableHierarchicalConfiguration immutableConfigurationAt(final String key, final boolean supportUpdates) {\n         return ConfigurationUtils.unmodifiableConfiguration((HierarchicalConfiguration)this.configurationAt(key, supportUpdates));\n     }\n     \n     public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key) {\n@@ -247,15 +247,15 @@\n     private EventListener<ConfigurationEvent> createChangeListener() {\n         return (EventListener<ConfigurationEvent>)(event -> this.subnodeConfigurationChanged(event));\n     }\n     \n     public Configuration interpolatedConfiguration() {\n         final BaseHierarchicalConfiguration.InterpolatedVisitor visitor = new BaseHierarchicalConfiguration.InterpolatedVisitor(this);\n         final NodeHandler<ImmutableNode> handler = (NodeHandler<ImmutableNode>)this.getModel().getNodeHandler();\n-        NodeTreeWalker.INSTANCE.walkDFS(handler.getRootNode(), (ConfigurationNodeVisitor)visitor, (NodeHandler)handler);\n+        NodeTreeWalker.INSTANCE.walkDFS((Object)handler.getRootNode(), (ConfigurationNodeVisitor)visitor, (NodeHandler)handler);\n         final BaseHierarchicalConfiguration c = (BaseHierarchicalConfiguration)this.clone();\n         c.getNodeModel().setRootNode(visitor.getInterpolatedRoot());\n         return (Configuration)c;\n     }\n     \n     protected NodeModel<ImmutableNode> cloneNodeModel() {\n         return (NodeModel<ImmutableNode>)new InMemoryNodeModel((ImmutableNode)this.getModel().getNodeHandler().getRootNode());\n"}]}
