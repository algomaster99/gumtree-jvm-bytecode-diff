{"diffoscope-json-version": 1, "source1": "first/HashCodeBuilder.class", "source2": "second/HashCodeBuilder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,14 +15,18 @@\n {\n     private static final int DEFAULT_INITIAL_VALUE = 17;\n     private static final int DEFAULT_MULTIPLIER_VALUE = 37;\n     private static final ThreadLocal<Set<IDKey>> REGISTRY;\n     private final int iConstant;\n     private int iTotal;\n     \n+    static {\n+        REGISTRY = new ThreadLocal<Set<IDKey>>();\n+    }\n+    \n     static Set<IDKey> getRegistry() {\n         return HashCodeBuilder.REGISTRY.get();\n     }\n     \n     static boolean isRegistered(final Object value) {\n         final Set<IDKey> registry = getRegistry();\n         return registry != null && registry.contains(new IDKey(value));\n@@ -32,29 +36,32 @@\n         if (isRegistered(object)) {\n             return;\n         }\n         try {\n             register(object);\n             final Field[] fields = clazz.getDeclaredFields();\n             AccessibleObject.setAccessible(fields, true);\n-            for (final Field field : fields) {\n+            Field[] array;\n+            for (int length = (array = fields).length, i = 0; i < length; ++i) {\n+                final Field field = array[i];\n                 if (!ArrayUtils.contains((Object[])excludeFields, (Object)field.getName()) && !field.getName().contains(\"$\") && (useTransients || !Modifier.isTransient(field.getModifiers())) && !Modifier.isStatic(field.getModifiers()) && !field.isAnnotationPresent((Class<? extends Annotation>)HashCodeExclude.class)) {\n                     try {\n                         final Object fieldValue = field.get(object);\n                         builder.append(fieldValue);\n                     }\n-                    catch (final IllegalAccessException e) {\n+                    catch (final IllegalAccessException ex) {\n                         throw new InternalError(\"Unexpected IllegalAccessException\");\n                     }\n                 }\n             }\n         }\n         finally {\n             unregister(object);\n         }\n+        unregister(object);\n     }\n     \n     public static int reflectionHashCode(final int initialNonZeroOddNumber, final int multiplierNonZeroOddNumber, final Object object) {\n         return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, null, new String[0]);\n     }\n     \n     public static int reflectionHashCode(final int initialNonZeroOddNumber, final int multiplierNonZeroOddNumber, final Object object, final boolean testTransients) {\n@@ -321,12 +328,8 @@\n         return Integer.valueOf(this.toHashCode());\n     }\n     \n     @Override\n     public int hashCode() {\n         return this.toHashCode();\n     }\n-    \n-    static {\n-        REGISTRY = new ThreadLocal<Set<IDKey>>();\n-    }\n }\n"}]}
