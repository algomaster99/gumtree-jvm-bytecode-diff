{"diffoscope-json-version": 1, "source1": "first/SegmentHeader.class", "source2": "second/SegmentHeader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -45,51 +45,51 @@\n         this.segment = segment;\n     }\n     \n     public int getArchiveSizeOffset() {\n         return this.archiveSizeOffset;\n     }\n     \n-    public void read(final InputStream in) throws IOException, Pack200Exception, Error {\n-        final int[] word = this.decodeScalar(\"archive_magic_word\", in, Codec.BYTE1, SegmentHeader.magic.length);\n-        for (int m = 0; m < SegmentHeader.magic.length; ++m) {\n-            if (word[m] != SegmentHeader.magic[m]) {\n+    public void read(final InputStream inputStream) throws IOException, Pack200Exception, Error {\n+        final int[] decodeScalar = this.decodeScalar(\"archive_magic_word\", inputStream, Codec.BYTE1, SegmentHeader.magic.length);\n+        for (int i = 0; i < SegmentHeader.magic.length; ++i) {\n+            if (decodeScalar[i] != SegmentHeader.magic[i]) {\n                 throw new Error(\"Bad header\");\n             }\n         }\n-        this.setArchiveMinorVersion(this.decodeScalar(\"archive_minver\", in, Codec.UNSIGNED5));\n-        this.setArchiveMajorVersion(this.decodeScalar(\"archive_majver\", in, Codec.UNSIGNED5));\n-        this.options = new SegmentOptions(this.decodeScalar(\"archive_options\", in, Codec.UNSIGNED5));\n-        this.parseArchiveFileCounts(in);\n-        this.parseArchiveSpecialCounts(in);\n-        this.parseCpCounts(in);\n-        this.parseClassCounts(in);\n+        this.setArchiveMinorVersion(this.decodeScalar(\"archive_minver\", inputStream, Codec.UNSIGNED5));\n+        this.setArchiveMajorVersion(this.decodeScalar(\"archive_majver\", inputStream, Codec.UNSIGNED5));\n+        this.options = new SegmentOptions(this.decodeScalar(\"archive_options\", inputStream, Codec.UNSIGNED5));\n+        this.parseArchiveFileCounts(inputStream);\n+        this.parseArchiveSpecialCounts(inputStream);\n+        this.parseCpCounts(inputStream);\n+        this.parseClassCounts(inputStream);\n         if (this.getBandHeadersSize() > 0) {\n-            final byte[] bandHeaders = new byte[this.getBandHeadersSize()];\n-            this.readFully(in, bandHeaders);\n-            this.setBandHeadersData(bandHeaders);\n+            final byte[] bandHeadersData = new byte[this.getBandHeadersSize()];\n+            this.readFully(inputStream, bandHeadersData);\n+            this.setBandHeadersData(bandHeadersData);\n         }\n-        this.archiveSizeOffset -= in.available();\n+        this.archiveSizeOffset -= inputStream.available();\n     }\n     \n     public void unpack() {\n     }\n     \n-    private void setArchiveMinorVersion(final int version) throws Pack200Exception {\n-        if (version != 7) {\n+    private void setArchiveMinorVersion(final int archiveMinor) throws Pack200Exception {\n+        if (archiveMinor != 7) {\n             throw new Pack200Exception(\"Invalid segment minor version\");\n         }\n-        this.archiveMinor = version;\n+        this.archiveMinor = archiveMinor;\n     }\n     \n-    private void setArchiveMajorVersion(final int version) throws Pack200Exception {\n-        if (version != 150) {\n-            throw new Pack200Exception(\"Invalid segment major version: \" + version);\n+    private void setArchiveMajorVersion(final int n) throws Pack200Exception {\n+        if (n != 150) {\n+            throw new Pack200Exception(\"Invalid segment major version: \" + n);\n         }\n-        this.archiveMajor = version;\n+        this.archiveMajor = n;\n     }\n     \n     public long getArchiveModtime() {\n         return this.archiveModtime;\n     }\n     \n     public int getAttributeDefinitionCount() {\n@@ -179,97 +179,97 @@\n         return this.segmentsRemaining;\n     }\n     \n     public SegmentOptions getOptions() {\n         return this.options;\n     }\n     \n-    private void parseArchiveFileCounts(final InputStream in) throws IOException, Pack200Exception {\n+    private void parseArchiveFileCounts(final InputStream inputStream) throws IOException, Pack200Exception {\n         if (this.options.hasArchiveFileCounts()) {\n-            this.setArchiveSize((long)this.decodeScalar(\"archive_size_hi\", in, Codec.UNSIGNED5) << 32 | (long)this.decodeScalar(\"archive_size_lo\", in, Codec.UNSIGNED5));\n-            this.archiveSizeOffset = in.available();\n-            this.setSegmentsRemaining(this.decodeScalar(\"archive_next_count\", in, Codec.UNSIGNED5));\n-            this.setArchiveModtime(this.decodeScalar(\"archive_modtime\", in, Codec.UNSIGNED5));\n-            this.numberOfFiles = this.decodeScalar(\"file_count\", in, Codec.UNSIGNED5);\n+            this.setArchiveSize((long)this.decodeScalar(\"archive_size_hi\", inputStream, Codec.UNSIGNED5) << 32 | (long)this.decodeScalar(\"archive_size_lo\", inputStream, Codec.UNSIGNED5));\n+            this.archiveSizeOffset = inputStream.available();\n+            this.setSegmentsRemaining(this.decodeScalar(\"archive_next_count\", inputStream, Codec.UNSIGNED5));\n+            this.setArchiveModtime(this.decodeScalar(\"archive_modtime\", inputStream, Codec.UNSIGNED5));\n+            this.numberOfFiles = this.decodeScalar(\"file_count\", inputStream, Codec.UNSIGNED5);\n         }\n     }\n     \n-    private void parseArchiveSpecialCounts(final InputStream in) throws IOException, Pack200Exception {\n+    private void parseArchiveSpecialCounts(final InputStream inputStream) throws IOException, Pack200Exception {\n         if (this.getOptions().hasSpecialFormats()) {\n-            this.bandHeadersSize = this.decodeScalar(\"band_headers_size\", in, Codec.UNSIGNED5);\n-            this.setAttributeDefinitionCount(this.decodeScalar(\"attr_definition_count\", in, Codec.UNSIGNED5));\n+            this.bandHeadersSize = this.decodeScalar(\"band_headers_size\", inputStream, Codec.UNSIGNED5);\n+            this.setAttributeDefinitionCount(this.decodeScalar(\"attr_definition_count\", inputStream, Codec.UNSIGNED5));\n         }\n     }\n     \n-    private void parseClassCounts(final InputStream in) throws IOException, Pack200Exception {\n-        this.innerClassCount = this.decodeScalar(\"ic_count\", in, Codec.UNSIGNED5);\n-        this.defaultClassMinorVersion = this.decodeScalar(\"default_class_minver\", in, Codec.UNSIGNED5);\n-        this.defaultClassMajorVersion = this.decodeScalar(\"default_class_majver\", in, Codec.UNSIGNED5);\n-        this.classCount = this.decodeScalar(\"class_count\", in, Codec.UNSIGNED5);\n+    private void parseClassCounts(final InputStream inputStream) throws IOException, Pack200Exception {\n+        this.innerClassCount = this.decodeScalar(\"ic_count\", inputStream, Codec.UNSIGNED5);\n+        this.defaultClassMinorVersion = this.decodeScalar(\"default_class_minver\", inputStream, Codec.UNSIGNED5);\n+        this.defaultClassMajorVersion = this.decodeScalar(\"default_class_majver\", inputStream, Codec.UNSIGNED5);\n+        this.classCount = this.decodeScalar(\"class_count\", inputStream, Codec.UNSIGNED5);\n     }\n     \n-    private void parseCpCounts(final InputStream in) throws IOException, Pack200Exception {\n-        this.cpUTF8Count = this.decodeScalar(\"cp_Utf8_count\", in, Codec.UNSIGNED5);\n+    private void parseCpCounts(final InputStream inputStream) throws IOException, Pack200Exception {\n+        this.cpUTF8Count = this.decodeScalar(\"cp_Utf8_count\", inputStream, Codec.UNSIGNED5);\n         if (this.getOptions().hasCPNumberCounts()) {\n-            this.cpIntCount = this.decodeScalar(\"cp_Int_count\", in, Codec.UNSIGNED5);\n-            this.cpFloatCount = this.decodeScalar(\"cp_Float_count\", in, Codec.UNSIGNED5);\n-            this.cpLongCount = this.decodeScalar(\"cp_Long_count\", in, Codec.UNSIGNED5);\n-            this.cpDoubleCount = this.decodeScalar(\"cp_Double_count\", in, Codec.UNSIGNED5);\n-        }\n-        this.cpStringCount = this.decodeScalar(\"cp_String_count\", in, Codec.UNSIGNED5);\n-        this.cpClassCount = this.decodeScalar(\"cp_Class_count\", in, Codec.UNSIGNED5);\n-        this.cpSignatureCount = this.decodeScalar(\"cp_Signature_count\", in, Codec.UNSIGNED5);\n-        this.cpDescriptorCount = this.decodeScalar(\"cp_Descr_count\", in, Codec.UNSIGNED5);\n-        this.cpFieldCount = this.decodeScalar(\"cp_Field_count\", in, Codec.UNSIGNED5);\n-        this.cpMethodCount = this.decodeScalar(\"cp_Method_count\", in, Codec.UNSIGNED5);\n-        this.cpIMethodCount = this.decodeScalar(\"cp_Imethod_count\", in, Codec.UNSIGNED5);\n-    }\n-    \n-    private int[] decodeScalar(final String name, final InputStream in, final BHSDCodec codec, final int n) throws IOException, Pack200Exception {\n-        this.segment.log(2, \"Parsed #\" + name + \" (\" + n + \")\");\n-        return codec.decodeInts(n, in);\n-    }\n-    \n-    private int decodeScalar(final String name, final InputStream in, final BHSDCodec codec) throws IOException, Pack200Exception {\n-        final int ret = codec.decode(in);\n-        this.segment.log(2, \"Parsed #\" + name + \" as \" + ret);\n-        return ret;\n+            this.cpIntCount = this.decodeScalar(\"cp_Int_count\", inputStream, Codec.UNSIGNED5);\n+            this.cpFloatCount = this.decodeScalar(\"cp_Float_count\", inputStream, Codec.UNSIGNED5);\n+            this.cpLongCount = this.decodeScalar(\"cp_Long_count\", inputStream, Codec.UNSIGNED5);\n+            this.cpDoubleCount = this.decodeScalar(\"cp_Double_count\", inputStream, Codec.UNSIGNED5);\n+        }\n+        this.cpStringCount = this.decodeScalar(\"cp_String_count\", inputStream, Codec.UNSIGNED5);\n+        this.cpClassCount = this.decodeScalar(\"cp_Class_count\", inputStream, Codec.UNSIGNED5);\n+        this.cpSignatureCount = this.decodeScalar(\"cp_Signature_count\", inputStream, Codec.UNSIGNED5);\n+        this.cpDescriptorCount = this.decodeScalar(\"cp_Descr_count\", inputStream, Codec.UNSIGNED5);\n+        this.cpFieldCount = this.decodeScalar(\"cp_Field_count\", inputStream, Codec.UNSIGNED5);\n+        this.cpMethodCount = this.decodeScalar(\"cp_Method_count\", inputStream, Codec.UNSIGNED5);\n+        this.cpIMethodCount = this.decodeScalar(\"cp_Imethod_count\", inputStream, Codec.UNSIGNED5);\n+    }\n+    \n+    private int[] decodeScalar(final String str, final InputStream inputStream, final BHSDCodec bhsdCodec, final int i) throws IOException, Pack200Exception {\n+        this.segment.log(2, \"Parsed #\" + str + \" (\" + i + \")\");\n+        return bhsdCodec.decodeInts(i, inputStream);\n+    }\n+    \n+    private int decodeScalar(final String str, final InputStream inputStream, final BHSDCodec bhsdCodec) throws IOException, Pack200Exception {\n+        final int decode = bhsdCodec.decode(inputStream);\n+        this.segment.log(2, \"Parsed #\" + str + \" as \" + decode);\n+        return decode;\n     }\n     \n     public void setArchiveModtime(final long archiveModtime) {\n         this.archiveModtime = archiveModtime;\n     }\n     \n     public void setArchiveSize(final long archiveSize) {\n         this.archiveSize = archiveSize;\n     }\n     \n-    private void setAttributeDefinitionCount(final long valuie) {\n-        this.attributeDefinitionCount = (int)valuie;\n+    private void setAttributeDefinitionCount(final long n) {\n+        this.attributeDefinitionCount = (int)n;\n     }\n     \n-    private void setBandHeadersData(final byte[] bandHeaders) {\n-        this.bandHeadersInputStream = new ByteArrayInputStream(bandHeaders);\n+    private void setBandHeadersData(final byte[] buf) {\n+        this.bandHeadersInputStream = new ByteArrayInputStream(buf);\n     }\n     \n-    public void setSegmentsRemaining(final long value) {\n-        this.segmentsRemaining = (int)value;\n+    public void setSegmentsRemaining(final long n) {\n+        this.segmentsRemaining = (int)n;\n     }\n     \n-    private void readFully(final InputStream in, final byte[] data) throws IOException, Pack200Exception {\n-        int total = in.read(data);\n-        if (total == -1) {\n+    private void readFully(final InputStream inputStream, final byte[] array) throws IOException, Pack200Exception {\n+        int i = inputStream.read(array);\n+        if (i == -1) {\n             throw new EOFException(\"Failed to read any data from input stream\");\n         }\n-        while (total < data.length) {\n-            final int delta = in.read(data, total, data.length - total);\n-            if (delta == -1) {\n+        while (i < array.length) {\n+            final int read = inputStream.read(array, i, array.length - i);\n+            if (read == -1) {\n                 throw new EOFException(\"Failed to read some data from input stream\");\n             }\n-            total += delta;\n+            i += read;\n         }\n     }\n     \n     public int getBandHeadersSize() {\n         return this.bandHeadersSize;\n     }\n     \n"}]}
