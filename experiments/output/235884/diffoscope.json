{"diffoscope-json-version": 1, "source1": "first/LockableFileWriter.class", "source2": "second/LockableFileWriter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,96 +13,96 @@\n \n public class LockableFileWriter extends Writer\n {\n     private static final String LCK = \".lck\";\n     private final Writer out;\n     private final File lockFile;\n     \n-    public LockableFileWriter(final String fileName) throws IOException {\n-        this(fileName, false, null);\n+    public LockableFileWriter(final String s) throws IOException {\n+        this(s, false, null);\n     }\n     \n-    public LockableFileWriter(final String fileName, final boolean append) throws IOException {\n-        this(fileName, append, null);\n+    public LockableFileWriter(final String s, final boolean b) throws IOException {\n+        this(s, b, null);\n     }\n     \n-    public LockableFileWriter(final String fileName, final boolean append, final String lockDir) throws IOException {\n-        this(new File(fileName), append, lockDir);\n+    public LockableFileWriter(final String pathname, final boolean b, final String s) throws IOException {\n+        this(new File(pathname), b, s);\n     }\n     \n     public LockableFileWriter(final File file) throws IOException {\n         this(file, false, null);\n     }\n     \n-    public LockableFileWriter(final File file, final boolean append) throws IOException {\n-        this(file, append, null);\n+    public LockableFileWriter(final File file, final boolean b) throws IOException {\n+        this(file, b, null);\n     }\n     \n     @Deprecated\n-    public LockableFileWriter(final File file, final boolean append, final String lockDir) throws IOException {\n-        this(file, Charset.defaultCharset(), append, lockDir);\n+    public LockableFileWriter(final File file, final boolean b, final String s) throws IOException {\n+        this(file, Charset.defaultCharset(), b, s);\n     }\n     \n     public LockableFileWriter(final File file, final Charset charset) throws IOException {\n         this(file, charset, false, null);\n     }\n     \n-    public LockableFileWriter(final File file, final String charsetName) throws IOException {\n-        this(file, charsetName, false, null);\n+    public LockableFileWriter(final File file, final String s) throws IOException {\n+        this(file, s, false, null);\n     }\n     \n-    public LockableFileWriter(File file, final Charset charset, final boolean append, String lockDir) throws IOException {\n-        file = file.getAbsoluteFile();\n-        if (file.getParentFile() != null) {\n-            FileUtils.forceMkdir(file.getParentFile());\n+    public LockableFileWriter(File absoluteFile, final Charset charset, final boolean b, String property) throws IOException {\n+        absoluteFile = absoluteFile.getAbsoluteFile();\n+        if (absoluteFile.getParentFile() != null) {\n+            FileUtils.forceMkdir(absoluteFile.getParentFile());\n         }\n-        if (file.isDirectory()) {\n+        if (absoluteFile.isDirectory()) {\n             throw new IOException(\"File specified is a directory\");\n         }\n-        if (lockDir == null) {\n-            lockDir = System.getProperty(\"java.io.tmpdir\");\n+        if (property == null) {\n+            property = System.getProperty(\"java.io.tmpdir\");\n         }\n-        final File lockDirFile = new File(lockDir);\n-        FileUtils.forceMkdir(lockDirFile);\n-        this.testLockDir(lockDirFile);\n-        this.lockFile = new File(lockDirFile, file.getName() + \".lck\");\n+        final File parent = new File(property);\n+        FileUtils.forceMkdir(parent);\n+        this.testLockDir(parent);\n+        this.lockFile = new File(parent, absoluteFile.getName() + \".lck\");\n         this.createLock();\n-        this.out = this.initWriter(file, charset, append);\n+        this.out = this.initWriter(absoluteFile, charset, b);\n     }\n     \n-    public LockableFileWriter(final File file, final String charsetName, final boolean append, final String lockDir) throws IOException {\n-        this(file, Charsets.toCharset(charsetName), append, lockDir);\n+    public LockableFileWriter(final File file, final String s, final boolean b, final String s2) throws IOException {\n+        this(file, Charsets.toCharset(s), b, s2);\n     }\n     \n-    private void testLockDir(final File lockDir) throws IOException {\n-        if (!lockDir.exists()) {\n-            throw new IOException(\"Could not find lockDir: \" + lockDir.getAbsolutePath());\n+    private void testLockDir(final File file) throws IOException {\n+        if (!file.exists()) {\n+            throw new IOException(\"Could not find lockDir: \" + file.getAbsolutePath());\n         }\n-        if (!lockDir.canWrite()) {\n-            throw new IOException(\"Could not write to lockDir: \" + lockDir.getAbsolutePath());\n+        if (!file.canWrite()) {\n+            throw new IOException(\"Could not write to lockDir: \" + file.getAbsolutePath());\n         }\n     }\n     \n     private void createLock() throws IOException {\n         synchronized (LockableFileWriter.class) {\n             if (!this.lockFile.createNewFile()) {\n                 throw new IOException(\"Can't write file, lock \" + this.lockFile.getAbsolutePath() + \" exists\");\n             }\n             this.lockFile.deleteOnExit();\n         }\n     }\n     \n     private Writer initWriter(final File file, final Charset charset, final boolean append) throws IOException {\n-        final boolean fileExistedAlready = file.exists();\n+        final boolean exists = file.exists();\n         try {\n             return new OutputStreamWriter(new FileOutputStream(file.getAbsolutePath(), append), Charsets.toCharset(charset));\n         }\n         catch (final IOException | RuntimeException ex) {\n             FileUtils.deleteQuietly(this.lockFile);\n-            if (!fileExistedAlready) {\n+            if (!exists) {\n                 FileUtils.deleteQuietly(file);\n             }\n             throw ex;\n         }\n     }\n     \n     @Override\n@@ -112,36 +112,36 @@\n         }\n         finally {\n             this.lockFile.delete();\n         }\n     }\n     \n     @Override\n-    public void write(final int idx) throws IOException {\n-        this.out.write(idx);\n+    public void write(final int c) throws IOException {\n+        this.out.write(c);\n     }\n     \n     @Override\n-    public void write(final char[] chr) throws IOException {\n-        this.out.write(chr);\n+    public void write(final char[] cbuf) throws IOException {\n+        this.out.write(cbuf);\n     }\n     \n     @Override\n-    public void write(final char[] chr, final int st, final int end) throws IOException {\n-        this.out.write(chr, st, end);\n+    public void write(final char[] array, final int n, final int n2) throws IOException {\n+        this.out.write(array, n, n2);\n     }\n     \n     @Override\n     public void write(final String str) throws IOException {\n         this.out.write(str);\n     }\n     \n     @Override\n-    public void write(final String str, final int st, final int end) throws IOException {\n-        this.out.write(str, st, end);\n+    public void write(final String str, final int off, final int len) throws IOException {\n+        this.out.write(str, off, len);\n     }\n     \n     @Override\n     public void flush() throws IOException {\n         this.out.flush();\n     }\n }\n"}]}
