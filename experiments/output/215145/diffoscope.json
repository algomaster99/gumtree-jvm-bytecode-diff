{"diffoscope-json-version": 1, "source1": "first/LocalVariableGen.class", "source2": "second/LocalVariableGen.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,45 +9,43 @@\n     private String name;\n     private Type type;\n     private InstructionHandle start;\n     private InstructionHandle end;\n     private int orig_index;\n     private boolean live_to_end;\n     \n-    public LocalVariableGen(final int index, final String name, final Type type, final InstructionHandle start, final InstructionHandle end) {\n-        if (index < 0 || index > 65535) {\n-            throw new ClassGenException(\"Invalid index index: \" + index);\n+    public LocalVariableGen(final int orig_index, final String name, final Type type, final InstructionHandle start, final InstructionHandle end) {\n+        if (orig_index < 0 || orig_index > 65535) {\n+            throw new ClassGenException(\"Invalid index index: \" + orig_index);\n         }\n         this.name = name;\n         this.type = type;\n-        this.index = index;\n+        this.index = orig_index;\n         this.setStart(start);\n         this.setEnd(end);\n-        this.orig_index = index;\n+        this.orig_index = orig_index;\n         this.live_to_end = (end == null);\n     }\n     \n-    public LocalVariableGen(final int index, final String name, final Type type, final InstructionHandle start, final InstructionHandle end, final int orig_index) {\n-        this(index, name, type, start, end);\n+    public LocalVariableGen(final int n, final String s, final Type type, final InstructionHandle instructionHandle, final InstructionHandle instructionHandle2, final int orig_index) {\n+        this(n, s, type, instructionHandle, instructionHandle2);\n         this.orig_index = orig_index;\n     }\n     \n-    public LocalVariable getLocalVariable(final ConstantPoolGen cp) {\n-        int start_pc = 0;\n-        int length = 0;\n+    public LocalVariable getLocalVariable(final ConstantPoolGen constantPoolGen) {\n+        int position = 0;\n+        int n = 0;\n         if (this.start != null && this.end != null) {\n-            start_pc = this.start.getPosition();\n-            length = this.end.getPosition() - start_pc;\n+            position = this.start.getPosition();\n+            n = this.end.getPosition() - position;\n             if (this.end.getNext() == null && this.live_to_end) {\n-                length += this.end.getInstruction().getLength();\n+                n += this.end.getInstruction().getLength();\n             }\n         }\n-        final int name_index = cp.addUtf8(this.name);\n-        final int signature_index = cp.addUtf8(this.type.getSignature());\n-        return new LocalVariable(start_pc, length, name_index, signature_index, this.index, cp.getConstantPool(), this.orig_index);\n+        return new LocalVariable(position, n, constantPoolGen.addUtf8(this.name), constantPoolGen.addUtf8(this.type.getSignature()), this.index, constantPoolGen.getConstantPool(), this.orig_index);\n     }\n     \n     public void setIndex(final int index) {\n         this.index = index;\n     }\n     \n     public int getIndex() {\n@@ -96,59 +94,59 @@\n     }\n     \n     public void setEnd(final InstructionHandle end) {\n         BranchInstruction.notifyTarget(this.end, end, (InstructionTargeter)this);\n         this.end = end;\n     }\n     \n-    public void updateTarget(final InstructionHandle old_ih, final InstructionHandle new_ih) {\n-        boolean targeted = false;\n-        if (this.start == old_ih) {\n-            targeted = true;\n-            this.setStart(new_ih);\n-        }\n-        if (this.end == old_ih) {\n-            targeted = true;\n-            this.setEnd(new_ih);\n+    public void updateTarget(final InstructionHandle obj, final InstructionHandle instructionHandle) {\n+        boolean b = false;\n+        if (this.start == obj) {\n+            b = true;\n+            this.setStart(instructionHandle);\n+        }\n+        if (this.end == obj) {\n+            b = true;\n+            this.setEnd(instructionHandle);\n         }\n-        if (!targeted) {\n-            throw new ClassGenException(\"Not targeting \" + old_ih + \", but {\" + this.start + \", \" + this.end + \"}\");\n+        if (!b) {\n+            throw new ClassGenException(\"Not targeting \" + obj + \", but {\" + this.start + \", \" + this.end + \"}\");\n         }\n     }\n     \n     void dispose() {\n         this.setStart(null);\n         this.setEnd(null);\n     }\n     \n-    public boolean containsTarget(final InstructionHandle ih) {\n-        return this.start == ih || this.end == ih;\n+    public boolean containsTarget(final InstructionHandle instructionHandle) {\n+        return this.start == instructionHandle || this.end == instructionHandle;\n     }\n     \n     @Override\n     public int hashCode() {\n         return this.name.hashCode() ^ this.type.hashCode();\n     }\n     \n     @Override\n     public boolean equals(final Object o) {\n         if (!(o instanceof LocalVariableGen)) {\n             return false;\n         }\n-        final LocalVariableGen l = (LocalVariableGen)o;\n-        return l.index == this.index && l.start == this.start && l.end == this.end;\n+        final LocalVariableGen localVariableGen = (LocalVariableGen)o;\n+        return localVariableGen.index == this.index && localVariableGen.start == this.start && localVariableGen.end == this.end;\n     }\n     \n     @Override\n     public String toString() {\n         return \"LocalVariableGen(\" + this.name + \", \" + this.type + \", \" + this.start + \", \" + this.end + \")\";\n     }\n     \n     public Object clone() {\n         try {\n             return super.clone();\n         }\n-        catch (final CloneNotSupportedException e) {\n+        catch (final CloneNotSupportedException ex) {\n             throw new Error(\"Clone Not Supported\");\n         }\n     }\n }\n"}]}
