{"diffoscope-json-version": 1, "source1": "first/DelegateFileFilter.class", "source2": "second/DelegateFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,42 +8,41 @@\n \n public class DelegateFileFilter extends AbstractFileFilter implements Serializable\n {\n     private static final long serialVersionUID = -8723373124984771318L;\n     private final FileFilter fileFilter;\n     private final FilenameFilter filenameFilter;\n     \n-    public DelegateFileFilter(final FileFilter filter) {\n-        if (filter == null) {\n+    public DelegateFileFilter(final FileFilter fileFilter) {\n+        if (fileFilter == null) {\n             throw new IllegalArgumentException(\"The FileFilter must not be null\");\n         }\n-        this.fileFilter = filter;\n+        this.fileFilter = fileFilter;\n         this.filenameFilter = null;\n     }\n     \n-    public DelegateFileFilter(final FilenameFilter filter) {\n-        if (filter == null) {\n+    public DelegateFileFilter(final FilenameFilter filenameFilter) {\n+        if (filenameFilter == null) {\n             throw new IllegalArgumentException(\"The FilenameFilter must not be null\");\n         }\n-        this.filenameFilter = filter;\n+        this.filenameFilter = filenameFilter;\n         this.fileFilter = null;\n     }\n     \n     public boolean accept(final File file) {\n         if (this.fileFilter != null) {\n             return this.fileFilter.accept(file);\n         }\n         return super.accept(file);\n     }\n     \n-    public boolean accept(final File dir, final String name) {\n+    public boolean accept(final File file, final String s) {\n         if (this.filenameFilter != null) {\n-            return this.filenameFilter.accept(dir, name);\n+            return this.filenameFilter.accept(file, s);\n         }\n-        return super.accept(dir, name);\n+        return super.accept(file, s);\n     }\n     \n     public String toString() {\n-        final String delegate = (this.fileFilter != null) ? this.fileFilter.toString() : this.filenameFilter.toString();\n-        return super.toString() + \"(\" + delegate + \")\";\n+        return super.toString() + \"(\" + ((this.fileFilter != null) ? this.fileFilter.toString() : this.filenameFilter.toString()) + \")\";\n     }\n }\n"}]}
