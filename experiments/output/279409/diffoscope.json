{"diffoscope-json-version": 1, "source1": "first/CodecEncoding.class", "source2": "second/CodecEncoding.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,212 +9,205 @@\n import java.util.Map;\n \n public class CodecEncoding\n {\n     private static final BHSDCodec[] canonicalCodec;\n     private static Map<BHSDCodec, Integer> canonicalCodecsToSpecifiers;\n     \n-    public static BHSDCodec getCanonicalCodec(final int i) {\n-        return CodecEncoding.canonicalCodec[i];\n+    public static BHSDCodec getCanonicalCodec(final int n) {\n+        return CodecEncoding.canonicalCodec[n];\n     }\n     \n-    public static Codec getCodec(final int value, final InputStream in, final Codec defaultCodec) throws IOException, Pack200Exception {\n+    public static Codec getCodec(final int i, final InputStream inputStream, final Codec codec) throws IOException, Pack200Exception {\n         if (CodecEncoding.canonicalCodec.length != 116) {\n             throw new Error(\"Canonical encodings have been incorrectly modified\");\n         }\n-        if (value < 0) {\n+        if (i < 0) {\n             throw new IllegalArgumentException(\"Encoding cannot be less than zero\");\n         }\n-        if (value == 0) {\n-            return defaultCodec;\n+        if (i == 0) {\n+            return codec;\n         }\n-        if (value <= 115) {\n-            return (Codec)CodecEncoding.canonicalCodec[value];\n+        if (i <= 115) {\n+            return (Codec)CodecEncoding.canonicalCodec[i];\n         }\n-        if (value == 116) {\n-            int code = in.read();\n-            if (code == -1) {\n+        if (i == 116) {\n+            final int read = inputStream.read();\n+            if (read == -1) {\n                 throw new EOFException(\"End of buffer read whilst trying to decode codec\");\n             }\n-            final int d = code & 0x1;\n-            final int s = code >> 1 & 0x3;\n-            final int b = (code >> 3 & 0x7) + 1;\n-            code = in.read();\n-            if (code == -1) {\n+            final int n = read & 0x1;\n+            final int n2 = read >> 1 & 0x3;\n+            final int n3 = (read >> 3 & 0x7) + 1;\n+            final int read2 = inputStream.read();\n+            if (read2 == -1) {\n                 throw new EOFException(\"End of buffer read whilst trying to decode codec\");\n             }\n-            final int h = code + 1;\n-            return (Codec)new BHSDCodec(b, h, s, d);\n+            return (Codec)new BHSDCodec(n3, read2 + 1, n2, n);\n         }\n-        else if (value >= 117 && value <= 140) {\n-            final int offset = value - 117;\n-            final int kx = offset & 0x3;\n-            final boolean kbflag = (offset >> 2 & 0x1) == 0x1;\n-            final boolean adef = (offset >> 3 & 0x1) == 0x1;\n-            final boolean bdef = (offset >> 4 & 0x1) == 0x1;\n-            if (adef && bdef) {\n+        else if (i >= 117 && i <= 140) {\n+            final int n4 = i - 117;\n+            final int n5 = n4 & 0x3;\n+            final boolean b = (n4 >> 2 & 0x1) == 0x1;\n+            final boolean b2 = (n4 >> 3 & 0x1) == 0x1;\n+            final boolean b3 = (n4 >> 4 & 0x1) == 0x1;\n+            if (b2 && b3) {\n                 throw new Pack200Exception(\"ADef and BDef should never both be true\");\n             }\n-            final int kb = kbflag ? in.read() : 3;\n-            final int k = (kb + 1) * (int)Math.pow(16.0, kx);\n-            Codec aCodec;\n-            if (adef) {\n-                aCodec = defaultCodec;\n+            final int n6 = ((b ? inputStream.read() : 3) + 1) * (int)Math.pow(16.0, n5);\n+            Codec codec2;\n+            if (b2) {\n+                codec2 = codec;\n             }\n             else {\n-                aCodec = getCodec(in.read(), in, defaultCodec);\n+                codec2 = getCodec(inputStream.read(), inputStream, codec);\n             }\n-            Codec bCodec;\n-            if (bdef) {\n-                bCodec = defaultCodec;\n+            Codec codec3;\n+            if (b3) {\n+                codec3 = codec;\n             }\n             else {\n-                bCodec = getCodec(in.read(), in, defaultCodec);\n+                codec3 = getCodec(inputStream.read(), inputStream, codec);\n             }\n-            return (Codec)new RunCodec(k, aCodec, bCodec);\n+            return (Codec)new RunCodec(n6, codec2, codec3);\n         }\n         else {\n-            if (value < 141 || value > 188) {\n-                throw new Pack200Exception(\"Invalid codec encoding byte (\" + value + \") found\");\n+            if (i < 141 || i > 188) {\n+                throw new Pack200Exception(\"Invalid codec encoding byte (\" + i + \") found\");\n             }\n-            final int offset = value - 141;\n-            final boolean fdef = (offset & 0x1) == 0x1;\n-            final boolean udef = (offset >> 1 & 0x1) == 0x1;\n-            final int tdefl = offset >> 2;\n-            final boolean tdef = tdefl != 0;\n-            final int[] tdefToL = { 0, 4, 8, 16, 32, 64, 128, 192, 224, 240, 248, 252 };\n-            final int l = tdefToL[tdefl];\n-            if (tdef) {\n-                final Codec fCodec = fdef ? defaultCodec : getCodec(in.read(), in, defaultCodec);\n-                final Codec uCodec = udef ? defaultCodec : getCodec(in.read(), in, defaultCodec);\n-                return (Codec)new PopulationCodec(fCodec, l, uCodec);\n-            }\n-            final Codec fCodec = fdef ? defaultCodec : getCodec(in.read(), in, defaultCodec);\n-            final Codec tCodec = getCodec(in.read(), in, defaultCodec);\n-            final Codec uCodec2 = udef ? defaultCodec : getCodec(in.read(), in, defaultCodec);\n-            return (Codec)new PopulationCodec(fCodec, tCodec, uCodec2);\n+            final int n7 = i - 141;\n+            final boolean b4 = (n7 & 0x1) == 0x1;\n+            final boolean b5 = (n7 >> 1 & 0x1) == 0x1;\n+            final int n8 = n7 >> 2;\n+            final boolean b6 = n8 != 0;\n+            final int n9 = (new int[] { 0, 4, 8, 16, 32, 64, 128, 192, 224, 240, 248, 252 })[n8];\n+            if (b6) {\n+                return (Codec)new PopulationCodec(b4 ? codec : getCodec(inputStream.read(), inputStream, codec), n9, b5 ? codec : getCodec(inputStream.read(), inputStream, codec));\n+            }\n+            return (Codec)new PopulationCodec(b4 ? codec : getCodec(inputStream.read(), inputStream, codec), getCodec(inputStream.read(), inputStream, codec), b5 ? codec : getCodec(inputStream.read(), inputStream, codec));\n         }\n     }\n     \n-    public static int[] getSpecifier(final Codec codec, final Codec defaultForBand) {\n+    public static int[] getSpecifier(final Codec codec, final Codec codec2) {\n         if (CodecEncoding.canonicalCodecsToSpecifiers == null) {\n-            final HashMap<BHSDCodec, Integer> reverseMap = new HashMap<BHSDCodec, Integer>(CodecEncoding.canonicalCodec.length);\n+            final HashMap canonicalCodecsToSpecifiers = new HashMap(CodecEncoding.canonicalCodec.length);\n             for (int i = 0; i < CodecEncoding.canonicalCodec.length; ++i) {\n-                reverseMap.put(CodecEncoding.canonicalCodec[i], Integer.valueOf(i));\n+                canonicalCodecsToSpecifiers.put(CodecEncoding.canonicalCodec[i], Integer.valueOf(i));\n             }\n-            CodecEncoding.canonicalCodecsToSpecifiers = reverseMap;\n+            CodecEncoding.canonicalCodecsToSpecifiers = canonicalCodecsToSpecifiers;\n         }\n         if (CodecEncoding.canonicalCodecsToSpecifiers.containsKey(codec)) {\n             return new int[] { Integer.valueOf(CodecEncoding.canonicalCodecsToSpecifiers.get((Object)codec)) };\n         }\n         if (codec instanceof BHSDCodec) {\n             final BHSDCodec bhsdCodec = (BHSDCodec)codec;\n-            final int[] specifiers = { 116, (bhsdCodec.isDelta() ? 1 : 0) + 2 * bhsdCodec.getS() + 8 * (bhsdCodec.getB() - 1), bhsdCodec.getH() - 1 };\n-            return specifiers;\n+            return new int[] { 116, (bhsdCodec.isDelta() ? 1 : 0) + 2 * bhsdCodec.getS() + 8 * (bhsdCodec.getB() - 1), bhsdCodec.getH() - 1 };\n         }\n         if (codec instanceof RunCodec) {\n             final RunCodec runCodec = (RunCodec)codec;\n             final int k = runCodec.getK();\n-            int kb;\n-            int kx;\n+            int n;\n+            int n2;\n             if (k <= 256) {\n-                kb = 0;\n-                kx = k - 1;\n+                n = 0;\n+                n2 = k - 1;\n             }\n             else if (k <= 4096) {\n-                kb = 1;\n-                kx = k / 16 - 1;\n+                n = 1;\n+                n2 = k / 16 - 1;\n             }\n             else if (k <= 65536) {\n-                kb = 2;\n-                kx = k / 256 - 1;\n+                n = 2;\n+                n2 = k / 256 - 1;\n             }\n             else {\n-                kb = 3;\n-                kx = k / 4096 - 1;\n+                n = 3;\n+                n2 = k / 4096 - 1;\n             }\n             final Codec aCodec = runCodec.getACodec();\n             final Codec bCodec = runCodec.getBCodec();\n-            int abDef = 0;\n-            if (aCodec.equals(defaultForBand)) {\n-                abDef = 1;\n-            }\n-            else if (bCodec.equals(defaultForBand)) {\n-                abDef = 2;\n-            }\n-            final int first = 117 + kb + ((kx == 3) ? 0 : 4) + 8 * abDef;\n-            final int[] aSpecifier = (abDef == 1) ? new int[0] : getSpecifier(aCodec, defaultForBand);\n-            final int[] bSpecifier = (abDef == 2) ? new int[0] : getSpecifier(bCodec, defaultForBand);\n-            final int[] specifier = new int[1 + ((kx != 3) ? 1 : 0) + aSpecifier.length + bSpecifier.length];\n-            specifier[0] = first;\n-            int index = 1;\n-            if (kx != 3) {\n-                specifier[1] = kx;\n-                ++index;\n-            }\n-            for (final int element : aSpecifier) {\n-                specifier[index] = element;\n-                ++index;\n-            }\n-            for (final int element : bSpecifier) {\n-                specifier[index] = element;\n-                ++index;\n+            int n3 = 0;\n+            if (aCodec.equals(codec2)) {\n+                n3 = 1;\n+            }\n+            else if (bCodec.equals(codec2)) {\n+                n3 = 2;\n+            }\n+            final int n4 = 117 + n + ((n2 == 3) ? 0 : 4) + 8 * n3;\n+            final int[] array = (n3 == 1) ? new int[0] : getSpecifier(aCodec, codec2);\n+            final int[] array2 = (n3 == 2) ? new int[0] : getSpecifier(bCodec, codec2);\n+            final int[] array3 = new int[1 + ((n2 != 3) ? 1 : 0) + array.length + array2.length];\n+            array3[0] = n4;\n+            int n5 = 1;\n+            if (n2 != 3) {\n+                array3[1] = n2;\n+                ++n5;\n+            }\n+            final int[] array4 = array;\n+            for (int length = array4.length, j = 0; j < length; ++j) {\n+                array3[n5] = array4[j];\n+                ++n5;\n+            }\n+            final int[] array5 = array2;\n+            for (int length2 = array5.length, l = 0; l < length2; ++l) {\n+                array3[n5] = array5[l];\n+                ++n5;\n             }\n-            return specifier;\n+            return array3;\n         }\n         if (codec instanceof PopulationCodec) {\n             final PopulationCodec populationCodec = (PopulationCodec)codec;\n             final Codec tokenCodec = populationCodec.getTokenCodec();\n             final Codec favouredCodec = populationCodec.getFavouredCodec();\n             final Codec unfavouredCodec = populationCodec.getUnfavouredCodec();\n-            final int fDef = favouredCodec.equals(defaultForBand) ? 1 : 0;\n-            final int uDef = unfavouredCodec.equals(defaultForBand) ? 1 : 0;\n-            int tDefL = 0;\n-            final int[] favoured = populationCodec.getFavoured();\n-            if (favoured != null) {\n+            final int equals = favouredCodec.equals(codec2) ? 1 : 0;\n+            final int equals2 = unfavouredCodec.equals(codec2) ? 1 : 0;\n+            int n6 = 0;\n+            if (populationCodec.getFavoured() != null) {\n                 if (tokenCodec == Codec.BYTE1) {\n-                    tDefL = 1;\n+                    n6 = 1;\n                 }\n                 else if (tokenCodec instanceof BHSDCodec) {\n-                    final BHSDCodec tokenBHSD = (BHSDCodec)tokenCodec;\n-                    if (tokenBHSD.getS() == 0) {\n-                        final int[] possibleLValues = { 4, 8, 16, 32, 64, 128, 192, 224, 240, 248, 252 };\n-                        final int l = 256 - tokenBHSD.getH();\n-                        int index = Arrays.binarySearch(possibleLValues, l);\n-                        if (index != -1) {\n-                            tDefL = index++;\n+                    final BHSDCodec bhsdCodec2 = (BHSDCodec)tokenCodec;\n+                    if (bhsdCodec2.getS() == 0) {\n+                        int binarySearch = Arrays.binarySearch(new int[] { 4, 8, 16, 32, 64, 128, 192, 224, 240, 248, 252 }, 256 - bhsdCodec2.getH());\n+                        if (binarySearch != -1) {\n+                            n6 = binarySearch++;\n                         }\n                     }\n                 }\n             }\n-            final int first2 = 141 + fDef + 2 * uDef + 4 * tDefL;\n-            final int[] favouredSpecifier = (fDef == 1) ? new int[0] : getSpecifier(favouredCodec, defaultForBand);\n-            final int[] tokenSpecifier = (tDefL != 0) ? new int[0] : getSpecifier(tokenCodec, defaultForBand);\n-            final int[] unfavouredSpecifier = (uDef == 1) ? new int[0] : getSpecifier(unfavouredCodec, defaultForBand);\n-            final int[] specifier2 = new int[1 + favouredSpecifier.length + unfavouredSpecifier.length + tokenSpecifier.length];\n-            specifier2[0] = first2;\n-            int index2 = 1;\n-            for (final int element2 : favouredSpecifier) {\n-                specifier2[index2] = element2;\n-                ++index2;\n-            }\n-            for (final int element2 : tokenSpecifier) {\n-                specifier2[index2] = element2;\n-                ++index2;\n-            }\n-            for (final int element2 : unfavouredSpecifier) {\n-                specifier2[index2] = element2;\n-                ++index2;\n+            final int n7 = 141 + equals + 2 * equals2 + 4 * n6;\n+            final int[] array6 = (equals == 1) ? new int[0] : getSpecifier(favouredCodec, codec2);\n+            final int[] array7 = (n6 != 0) ? new int[0] : getSpecifier(tokenCodec, codec2);\n+            final int[] array8 = (equals2 == 1) ? new int[0] : getSpecifier(unfavouredCodec, codec2);\n+            final int[] array9 = new int[1 + array6.length + array8.length + array7.length];\n+            array9[0] = n7;\n+            int n8 = 1;\n+            final int[] array10 = array6;\n+            for (int length3 = array10.length, n9 = 0; n9 < length3; ++n9) {\n+                array9[n8] = array10[n9];\n+                ++n8;\n+            }\n+            final int[] array11 = array7;\n+            for (int length4 = array11.length, n10 = 0; n10 < length4; ++n10) {\n+                array9[n8] = array11[n10];\n+                ++n8;\n+            }\n+            final int[] array12 = array8;\n+            for (int length5 = array12.length, n11 = 0; n11 < length5; ++n11) {\n+                array9[n8] = array12[n11];\n+                ++n8;\n             }\n-            return specifier2;\n+            return array9;\n         }\n         return null;\n     }\n     \n-    public static int getSpecifierForDefaultCodec(final BHSDCodec defaultCodec) {\n-        return getSpecifier(defaultCodec, (Codec)null)[0];\n+    public static int getSpecifierForDefaultCodec(final BHSDCodec bhsdCodec) {\n+        return getSpecifier(bhsdCodec, (Codec)null)[0];\n     }\n     \n     static {\n         canonicalCodec = new BHSDCodec[] { null, new BHSDCodec(1, 256), new BHSDCodec(1, 256, 1), new BHSDCodec(1, 256, 0, 1), new BHSDCodec(1, 256, 1, 1), new BHSDCodec(2, 256), new BHSDCodec(2, 256, 1), new BHSDCodec(2, 256, 0, 1), new BHSDCodec(2, 256, 1, 1), new BHSDCodec(3, 256), new BHSDCodec(3, 256, 1), new BHSDCodec(3, 256, 0, 1), new BHSDCodec(3, 256, 1, 1), new BHSDCodec(4, 256), new BHSDCodec(4, 256, 1), new BHSDCodec(4, 256, 0, 1), new BHSDCodec(4, 256, 1, 1), new BHSDCodec(5, 4), new BHSDCodec(5, 4, 1), new BHSDCodec(5, 4, 2), new BHSDCodec(5, 16), new BHSDCodec(5, 16, 1), new BHSDCodec(5, 16, 2), new BHSDCodec(5, 32), new BHSDCodec(5, 32, 1), new BHSDCodec(5, 32, 2), new BHSDCodec(5, 64), new BHSDCodec(5, 64, 1), new BHSDCodec(5, 64, 2), new BHSDCodec(5, 128), new BHSDCodec(5, 128, 1), new BHSDCodec(5, 128, 2), new BHSDCodec(5, 4, 0, 1), new BHSDCodec(5, 4, 1, 1), new BHSDCodec(5, 4, 2, 1), new BHSDCodec(5, 16, 0, 1), new BHSDCodec(5, 16, 1, 1), new BHSDCodec(5, 16, 2, 1), new BHSDCodec(5, 32, 0, 1), new BHSDCodec(5, 32, 1, 1), new BHSDCodec(5, 32, 2, 1), new BHSDCodec(5, 64, 0, 1), new BHSDCodec(5, 64, 1, 1), new BHSDCodec(5, 64, 2, 1), new BHSDCodec(5, 128, 0, 1), new BHSDCodec(5, 128, 1, 1), new BHSDCodec(5, 128, 2, 1), new BHSDCodec(2, 192), new BHSDCodec(2, 224), new BHSDCodec(2, 240), new BHSDCodec(2, 248), new BHSDCodec(2, 252), new BHSDCodec(2, 8, 0, 1), new BHSDCodec(2, 8, 1, 1), new BHSDCodec(2, 16, 0, 1), new BHSDCodec(2, 16, 1, 1), new BHSDCodec(2, 32, 0, 1), new BHSDCodec(2, 32, 1, 1), new BHSDCodec(2, 64, 0, 1), new BHSDCodec(2, 64, 1, 1), new BHSDCodec(2, 128, 0, 1), new BHSDCodec(2, 128, 1, 1), new BHSDCodec(2, 192, 0, 1), new BHSDCodec(2, 192, 1, 1), new BHSDCodec(2, 224, 0, 1), new BHSDCodec(2, 224, 1, 1), new BHSDCodec(2, 240, 0, 1), new BHSDCodec(2, 240, 1, 1), new BHSDCodec(2, 248, 0, 1), new BHSDCodec(2, 248, 1, 1), new BHSDCodec(3, 192), new BHSDCodec(3, 224), new BHSDCodec(3, 240), new BHSDCodec(3, 248), new BHSDCodec(3, 252), new BHSDCodec(3, 8, 0, 1), new BHSDCodec(3, 8, 1, 1), new BHSDCodec(3, 16, 0, 1), new BHSDCodec(3, 16, 1, 1), new BHSDCodec(3, 32, 0, 1), new BHSDCodec(3, 32, 1, 1), new BHSDCodec(3, 64, 0, 1), new BHSDCodec(3, 64, 1, 1), new BHSDCodec(3, 128, 0, 1), new BHSDCodec(3, 128, 1, 1), new BHSDCodec(3, 192, 0, 1), new BHSDCodec(3, 192, 1, 1), new BHSDCodec(3, 224, 0, 1), new BHSDCodec(3, 224, 1, 1), new BHSDCodec(3, 240, 0, 1), new BHSDCodec(3, 240, 1, 1), new BHSDCodec(3, 248, 0, 1), new BHSDCodec(3, 248, 1, 1), new BHSDCodec(4, 192), new BHSDCodec(4, 224), new BHSDCodec(4, 240), new BHSDCodec(4, 248), new BHSDCodec(4, 252), new BHSDCodec(4, 8, 0, 1), new BHSDCodec(4, 8, 1, 1), new BHSDCodec(4, 16, 0, 1), new BHSDCodec(4, 16, 1, 1), new BHSDCodec(4, 32, 0, 1), new BHSDCodec(4, 32, 1, 1), new BHSDCodec(4, 64, 0, 1), new BHSDCodec(4, 64, 1, 1), new BHSDCodec(4, 128, 0, 1), new BHSDCodec(4, 128, 1, 1), new BHSDCodec(4, 192, 0, 1), new BHSDCodec(4, 192, 1, 1), new BHSDCodec(4, 224, 0, 1), new BHSDCodec(4, 224, 1, 1), new BHSDCodec(4, 240, 0, 1), new BHSDCodec(4, 240, 1, 1), new BHSDCodec(4, 248, 0, 1), new BHSDCodec(4, 248, 1, 1) };\n     }\n }\n"}]}
