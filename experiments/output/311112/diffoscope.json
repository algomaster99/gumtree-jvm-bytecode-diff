{"diffoscope-json-version": 1, "source1": "first/JarArchiveInputStream.class", "source2": "second/JarArchiveInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,57 +1,57 @@\n-  SHA-256 checksum 44472acffbee9413513f22a55c933192a727791ab94d51f1154ca7b9f88a405f\n+  SHA-256 checksum 0efedbb73161194456b7d087f254f40fcddfcd44cc84835ba6afd8ea3a3db0a3\n   Compiled from \"JarArchiveInputStream.java\"\n public class org.apache.commons.compress.archivers.jar.JarArchiveInputStream extends org.apache.commons.compress.archivers.zip.ZipArchiveInputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #8                          // org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n-  super_class: #9                         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+  this_class: #11                         // org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n+  super_class: #2                         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n   interfaces: 0, fields: 0, methods: 5, attributes: 1\n Constant pool:\n-   #1 = Methodref          #9.#27         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #2 = Methodref          #9.#28         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n-   #3 = Methodref          #8.#29         // org/apache/commons/compress/archivers/jar/JarArchiveInputStream.getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #4 = Class              #30            // org/apache/commons/compress/archivers/jar/JarArchiveEntry\n-   #5 = Methodref          #4.#31         // org/apache/commons/compress/archivers/jar/JarArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #6 = Methodref          #8.#32         // org/apache/commons/compress/archivers/jar/JarArchiveInputStream.getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n-   #7 = Methodref          #9.#33         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.matches:([BI)Z\n-   #8 = Class              #34            // org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n-   #9 = Class              #35            // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n-  #10 = Utf8               <init>\n-  #11 = Utf8               (Ljava/io/InputStream;)V\n-  #12 = Utf8               Code\n-  #13 = Utf8               LineNumberTable\n-  #14 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;)V\n-  #15 = Utf8               getNextJarEntry\n-  #16 = Utf8               ()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n-  #17 = Utf8               StackMapTable\n-  #18 = Class              #36            // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #19 = Utf8               Exceptions\n-  #20 = Class              #37            // java/io/IOException\n-  #21 = Utf8               getNextEntry\n-  #22 = Utf8               ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #23 = Utf8               matches\n-  #24 = Utf8               ([BI)Z\n-  #25 = Utf8               SourceFile\n-  #26 = Utf8               JarArchiveInputStream.java\n-  #27 = NameAndType        #10:#11        // \"<init>\":(Ljava/io/InputStream;)V\n-  #28 = NameAndType        #10:#14        // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n-  #29 = NameAndType        #38:#39        // getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #30 = Utf8               org/apache/commons/compress/archivers/jar/JarArchiveEntry\n-  #31 = NameAndType        #10:#40        // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #32 = NameAndType        #15:#16        // getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n-  #33 = NameAndType        #23:#24        // matches:([BI)Z\n-  #34 = Utf8               org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n-  #35 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n-  #36 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #37 = Utf8               java/io/IOException\n-  #38 = Utf8               getNextZipEntry\n-  #39 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #40 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #1 = Methodref          #2.#3          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #2 = Class              #4             // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+   #3 = NameAndType        #5:#6          // \"<init>\":(Ljava/io/InputStream;)V\n+   #4 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+   #5 = Utf8               <init>\n+   #6 = Utf8               (Ljava/io/InputStream;)V\n+   #7 = Methodref          #2.#8          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n+   #8 = NameAndType        #5:#9          // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n+   #9 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;)V\n+  #10 = Methodref          #11.#12        // org/apache/commons/compress/archivers/jar/JarArchiveInputStream.getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #11 = Class              #13            // org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n+  #12 = NameAndType        #14:#15        // getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #13 = Utf8               org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n+  #14 = Utf8               getNextZipEntry\n+  #15 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #16 = Class              #17            // org/apache/commons/compress/archivers/jar/JarArchiveEntry\n+  #17 = Utf8               org/apache/commons/compress/archivers/jar/JarArchiveEntry\n+  #18 = Methodref          #16.#19        // org/apache/commons/compress/archivers/jar/JarArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #19 = NameAndType        #5:#20         // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #20 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #21 = Methodref          #11.#22        // org/apache/commons/compress/archivers/jar/JarArchiveInputStream.getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n+  #22 = NameAndType        #23:#24        // getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n+  #23 = Utf8               getNextJarEntry\n+  #24 = Utf8               ()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n+  #25 = Methodref          #2.#26         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.matches:([BI)Z\n+  #26 = NameAndType        #27:#28        // matches:([BI)Z\n+  #27 = Utf8               matches\n+  #28 = Utf8               ([BI)Z\n+  #29 = Utf8               Code\n+  #30 = Utf8               LineNumberTable\n+  #31 = Utf8               StackMapTable\n+  #32 = Class              #33            // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #33 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #34 = Utf8               Exceptions\n+  #35 = Class              #36            // java/io/IOException\n+  #36 = Utf8               java/io/IOException\n+  #37 = Utf8               getNextEntry\n+  #38 = Utf8               ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #39 = Utf8               SourceFile\n+  #40 = Utf8               JarArchiveInputStream.java\n {\n   public org.apache.commons.compress.archivers.jar.JarArchiveInputStream(java.io.InputStream);\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n@@ -66,36 +66,36 @@\n     descriptor: (Ljava/io/InputStream;Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n-         3: invokespecial #2                  // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n+         3: invokespecial #7                  // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n          6: return\n       LineNumberTable:\n         line 52: 0\n         line 53: 6\n \n   public org.apache.commons.compress.archivers.jar.JarArchiveEntry getNextJarEntry() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokevirtual #3                  // Method getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+         1: invokevirtual #10                 // Method getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n          4: astore_1\n          5: aload_1\n          6: ifnonnull     13\n          9: aconst_null\n         10: goto          21\n-        13: new           #4                  // class org/apache/commons/compress/archivers/jar/JarArchiveEntry\n+        13: new           #16                 // class org/apache/commons/compress/archivers/jar/JarArchiveEntry\n         16: dup\n         17: aload_1\n-        18: invokespecial #5                  // Method org/apache/commons/compress/archivers/jar/JarArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+        18: invokespecial #18                 // Method org/apache/commons/compress/archivers/jar/JarArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n         21: areturn\n       LineNumberTable:\n         line 56: 0\n         line 57: 5\n       StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n           offset_delta = 13\n@@ -107,27 +107,27 @@\n \n   public org.apache.commons.compress.archivers.ArchiveEntry getNextEntry() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #6                  // Method getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n+         1: invokevirtual #21                 // Method getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n          4: areturn\n       LineNumberTable:\n         line 62: 0\n     Exceptions:\n       throws java.io.IOException\n \n   public static boolean matches(byte[], int);\n     descriptor: ([BI)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: invokestatic  #7                  // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.matches:([BI)Z\n+         2: invokestatic  #25                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.matches:([BI)Z\n          5: ireturn\n       LineNumberTable:\n         line 76: 0\n }\n SourceFile: \"JarArchiveInputStream.java\"\n"}]}
