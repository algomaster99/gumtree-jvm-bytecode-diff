{"diffoscope-json-version": 1, "source1": "first/ConstantPool.class", "source2": "second/ConstantPool.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,238 +10,231 @@\n {\n     private Constant[] constant_pool;\n     \n     public ConstantPool(final Constant[] constant_pool) {\n         this.constant_pool = constant_pool;\n     }\n     \n-    public ConstantPool(final DataInput input) throws IOException, ClassFormatException {\n-        final int constant_pool_count = input.readUnsignedShort();\n-        this.constant_pool = new Constant[constant_pool_count];\n-        for (int i = 1; i < constant_pool_count; ++i) {\n-            this.constant_pool[i] = Constant.readConstant(input);\n+    public ConstantPool(final DataInput dataInput) throws IOException, ClassFormatException {\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        this.constant_pool = new Constant[unsignedShort];\n+        for (int i = 1; i < unsignedShort; ++i) {\n+            this.constant_pool[i] = Constant.readConstant(dataInput);\n             final byte tag = this.constant_pool[i].getTag();\n             if (tag == 6 || tag == 5) {\n                 ++i;\n             }\n         }\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitConstantPool(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitConstantPool(this);\n     }\n     \n-    public String constantToString(Constant c) throws ClassFormatException {\n-        final byte tag = c.getTag();\n-        String str = null;\n+    public String constantToString(Constant constant) throws ClassFormatException {\n+        final byte tag = constant.getTag();\n+        String s = null;\n         switch (tag) {\n             case 7: {\n-                final int i = ((ConstantClass)c).getNameIndex();\n-                c = this.getConstant(i, (byte)1);\n-                str = Utility.compactClassName(((ConstantUtf8)c).getBytes(), false);\n+                constant = this.getConstant(((ConstantClass)constant).getNameIndex(), (byte)1);\n+                s = Utility.compactClassName(((ConstantUtf8)constant).getBytes(), false);\n                 break;\n             }\n             case 8: {\n-                final int i = ((ConstantString)c).getStringIndex();\n-                c = this.getConstant(i, (byte)1);\n-                str = \"\\\"\" + escape(((ConstantUtf8)c).getBytes()) + \"\\\"\";\n+                constant = this.getConstant(((ConstantString)constant).getStringIndex(), (byte)1);\n+                s = \"\\\"\" + escape(((ConstantUtf8)constant).getBytes()) + \"\\\"\";\n                 break;\n             }\n             case 1: {\n-                str = ((ConstantUtf8)c).getBytes();\n+                s = ((ConstantUtf8)constant).getBytes();\n                 break;\n             }\n             case 6: {\n-                str = String.valueOf(((ConstantDouble)c).getBytes());\n+                s = String.valueOf(((ConstantDouble)constant).getBytes());\n                 break;\n             }\n             case 4: {\n-                str = String.valueOf(((ConstantFloat)c).getBytes());\n+                s = String.valueOf(((ConstantFloat)constant).getBytes());\n                 break;\n             }\n             case 5: {\n-                str = String.valueOf(((ConstantLong)c).getBytes());\n+                s = String.valueOf(((ConstantLong)constant).getBytes());\n                 break;\n             }\n             case 3: {\n-                str = String.valueOf(((ConstantInteger)c).getBytes());\n+                s = String.valueOf(((ConstantInteger)constant).getBytes());\n                 break;\n             }\n             case 12: {\n-                str = this.constantToString(((ConstantNameAndType)c).getNameIndex(), (byte)1) + \" \" + this.constantToString(((ConstantNameAndType)c).getSignatureIndex(), (byte)1);\n+                s = this.constantToString(((ConstantNameAndType)constant).getNameIndex(), (byte)1) + \" \" + this.constantToString(((ConstantNameAndType)constant).getSignatureIndex(), (byte)1);\n                 break;\n             }\n             case 9:\n             case 10:\n             case 11: {\n-                str = this.constantToString(((ConstantCP)c).getClassIndex(), (byte)7) + \".\" + this.constantToString(((ConstantCP)c).getNameAndTypeIndex(), (byte)12);\n+                s = this.constantToString(((ConstantCP)constant).getClassIndex(), (byte)7) + \".\" + this.constantToString(((ConstantCP)constant).getNameAndTypeIndex(), (byte)12);\n                 break;\n             }\n             case 15: {\n-                final ConstantMethodHandle cmh = (ConstantMethodHandle)c;\n-                str = Const.getMethodHandleName(cmh.getReferenceKind()) + \" \" + this.constantToString(cmh.getReferenceIndex(), this.getConstant(cmh.getReferenceIndex()).getTag());\n+                final ConstantMethodHandle constantMethodHandle = (ConstantMethodHandle)constant;\n+                s = Const.getMethodHandleName(constantMethodHandle.getReferenceKind()) + \" \" + this.constantToString(constantMethodHandle.getReferenceIndex(), this.getConstant(constantMethodHandle.getReferenceIndex()).getTag());\n                 break;\n             }\n             case 16: {\n-                final ConstantMethodType cmt = (ConstantMethodType)c;\n-                str = this.constantToString(cmt.getDescriptorIndex(), (byte)1);\n+                s = this.constantToString(((ConstantMethodType)constant).getDescriptorIndex(), (byte)1);\n                 break;\n             }\n             case 18: {\n-                final ConstantInvokeDynamic cid = (ConstantInvokeDynamic)c;\n-                str = cid.getBootstrapMethodAttrIndex() + \":\" + this.constantToString(cid.getNameAndTypeIndex(), (byte)12);\n+                final ConstantInvokeDynamic constantInvokeDynamic = (ConstantInvokeDynamic)constant;\n+                s = constantInvokeDynamic.getBootstrapMethodAttrIndex() + \":\" + this.constantToString(constantInvokeDynamic.getNameAndTypeIndex(), (byte)12);\n                 break;\n             }\n             case 19: {\n-                final int i = ((ConstantModule)c).getNameIndex();\n-                c = this.getConstant(i, (byte)1);\n-                str = Utility.compactClassName(((ConstantUtf8)c).getBytes(), false);\n+                constant = this.getConstant(((ConstantModule)constant).getNameIndex(), (byte)1);\n+                s = Utility.compactClassName(((ConstantUtf8)constant).getBytes(), false);\n                 break;\n             }\n             case 20: {\n-                final int i = ((ConstantPackage)c).getNameIndex();\n-                c = this.getConstant(i, (byte)1);\n-                str = Utility.compactClassName(((ConstantUtf8)c).getBytes(), false);\n+                constant = this.getConstant(((ConstantPackage)constant).getNameIndex(), (byte)1);\n+                s = Utility.compactClassName(((ConstantUtf8)constant).getBytes(), false);\n                 break;\n             }\n             default: {\n                 throw new RuntimeException(\"Unknown constant type \" + tag);\n             }\n         }\n-        return str;\n+        return s;\n     }\n     \n-    private static String escape(final String str) {\n-        final int len = str.length();\n-        final StringBuilder buf = new StringBuilder(len + 5);\n-        final char[] ch = str.toCharArray();\n-        for (int i = 0; i < len; ++i) {\n-            switch (ch[i]) {\n+    private static String escape(final String s) {\n+        final int length = s.length();\n+        final StringBuilder sb = new StringBuilder(length + 5);\n+        final char[] charArray = s.toCharArray();\n+        for (int i = 0; i < length; ++i) {\n+            switch (charArray[i]) {\n                 case '\\n': {\n-                    buf.append(\"\\\\n\");\n+                    sb.append(\"\\\\n\");\n                     break;\n                 }\n                 case '\\r': {\n-                    buf.append(\"\\\\r\");\n+                    sb.append(\"\\\\r\");\n                     break;\n                 }\n                 case '\\t': {\n-                    buf.append(\"\\\\t\");\n+                    sb.append(\"\\\\t\");\n                     break;\n                 }\n                 case '\\b': {\n-                    buf.append(\"\\\\b\");\n+                    sb.append(\"\\\\b\");\n                     break;\n                 }\n                 case '\\\"': {\n-                    buf.append(\"\\\\\\\"\");\n+                    sb.append(\"\\\\\\\"\");\n                     break;\n                 }\n                 default: {\n-                    buf.append(ch[i]);\n+                    sb.append(charArray[i]);\n                     break;\n                 }\n             }\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n-    public String constantToString(final int index, final byte tag) throws ClassFormatException {\n-        final Constant c = this.getConstant(index, tag);\n-        return this.constantToString(c);\n+    public String constantToString(final int n, final byte b) throws ClassFormatException {\n+        return this.constantToString(this.getConstant(n, b));\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        file.writeShort(this.constant_pool.length);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.constant_pool.length);\n         for (int i = 1; i < this.constant_pool.length; ++i) {\n             if (this.constant_pool[i] != null) {\n-                this.constant_pool[i].dump(file);\n+                this.constant_pool[i].dump(dataOutputStream);\n             }\n         }\n     }\n     \n-    public Constant getConstant(final int index) {\n-        if (index >= this.constant_pool.length || index < 0) {\n-            throw new ClassFormatException(\"Invalid constant pool reference: \" + index + \". Constant pool size is: \" + this.constant_pool.length);\n+    public Constant getConstant(final int i) {\n+        if (i >= this.constant_pool.length || i < 0) {\n+            throw new ClassFormatException(\"Invalid constant pool reference: \" + i + \". Constant pool size is: \" + this.constant_pool.length);\n         }\n-        return this.constant_pool[index];\n+        return this.constant_pool[i];\n     }\n     \n-    public Constant getConstant(final int index, final byte tag) throws ClassFormatException {\n-        final Constant c = this.getConstant(index);\n-        if (c == null) {\n-            throw new ClassFormatException(\"Constant pool at index \" + index + \" is null.\");\n+    public Constant getConstant(final int n, final byte b) throws ClassFormatException {\n+        final Constant constant = this.getConstant(n);\n+        if (constant == null) {\n+            throw new ClassFormatException(\"Constant pool at index \" + n + \" is null.\");\n         }\n-        if (c.getTag() != tag) {\n-            throw new ClassFormatException(\"Expected class `\" + Const.getConstantName((int)tag) + \"' at index \" + index + \" and got \" + c);\n+        if (constant.getTag() != b) {\n+            throw new ClassFormatException(\"Expected class `\" + Const.getConstantName((int)b) + \"' at index \" + n + \" and got \" + constant);\n         }\n-        return c;\n+        return constant;\n     }\n     \n     public Constant[] getConstantPool() {\n         return this.constant_pool;\n     }\n     \n-    public String getConstantString(final int index, final byte tag) throws ClassFormatException {\n-        Constant c = this.getConstant(index, tag);\n-        int i = 0;\n-        switch (tag) {\n+    public String getConstantString(final int n, final byte i) throws ClassFormatException {\n+        final Constant constant = this.getConstant(n, i);\n+        int n2 = 0;\n+        switch (i) {\n             case 7: {\n-                i = ((ConstantClass)c).getNameIndex();\n+                n2 = ((ConstantClass)constant).getNameIndex();\n                 break;\n             }\n             case 8: {\n-                i = ((ConstantString)c).getStringIndex();\n+                n2 = ((ConstantString)constant).getStringIndex();\n                 break;\n             }\n             case 19: {\n-                i = ((ConstantModule)c).getNameIndex();\n+                n2 = ((ConstantModule)constant).getNameIndex();\n                 break;\n             }\n             case 20: {\n-                i = ((ConstantPackage)c).getNameIndex();\n+                n2 = ((ConstantPackage)constant).getNameIndex();\n                 break;\n             }\n             default: {\n-                throw new RuntimeException(\"getConstantString called with illegal tag \" + tag);\n+                throw new RuntimeException(\"getConstantString called with illegal tag \" + i);\n             }\n         }\n-        c = this.getConstant(i, (byte)1);\n-        return ((ConstantUtf8)c).getBytes();\n+        return ((ConstantUtf8)this.getConstant(n2, (byte)1)).getBytes();\n     }\n     \n     public int getLength() {\n         return (this.constant_pool == null) ? 0 : this.constant_pool.length;\n     }\n     \n-    public void setConstant(final int index, final Constant constant) {\n-        this.constant_pool[index] = constant;\n+    public void setConstant(final int n, final Constant constant) {\n+        this.constant_pool[n] = constant;\n     }\n     \n     public void setConstantPool(final Constant[] constant_pool) {\n         this.constant_pool = constant_pool;\n     }\n     \n     @Override\n     public String toString() {\n-        final StringBuilder buf = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder();\n         for (int i = 1; i < this.constant_pool.length; ++i) {\n-            buf.append(i).append(\")\").append(this.constant_pool[i]).append(\"\\n\");\n+            sb.append(i).append(\")\").append(this.constant_pool[i]).append(\"\\n\");\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n     public ConstantPool copy() {\n-        ConstantPool c = null;\n+        ConstantPool constantPool = null;\n         try {\n-            c = (ConstantPool)this.clone();\n-            c.constant_pool = new Constant[this.constant_pool.length];\n+            constantPool = (ConstantPool)this.clone();\n+            constantPool.constant_pool = new Constant[this.constant_pool.length];\n             for (int i = 1; i < this.constant_pool.length; ++i) {\n                 if (this.constant_pool[i] != null) {\n-                    c.constant_pool[i] = this.constant_pool[i].copy();\n+                    constantPool.constant_pool[i] = this.constant_pool[i].copy();\n                 }\n             }\n         }\n         catch (final CloneNotSupportedException ex) {}\n-        return c;\n+        return constantPool;\n     }\n }\n"}]}
