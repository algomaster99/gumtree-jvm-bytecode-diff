{"diffoscope-json-version": 1, "source1": "first/Base32.class", "source2": "second/Base32.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,70 +1,70 @@\n-  SHA-256 checksum 0b1f83c0cf581cd5835571e40c8ad3680e90459ee993dfda133784c33ed0add9\n+  SHA-256 checksum 1e05a60cc86e4a46cf2d72786a5db1aba2db8189281e5dd0f3e236635b8135a7\n   Compiled from \"Base32.java\"\n public class org.apache.commons.codec.binary.Base32 extends org.apache.commons.codec.binary.BaseNCodec\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #7                          // org/apache/commons/codec/binary/Base32\n   super_class: #3                         // org/apache/commons/codec/binary/BaseNCodec\n   interfaces: 0, fields: 20, methods: 13, attributes: 2\n Constant pool:\n-    #1 = Methodref          #7.#138       // org/apache/commons/codec/binary/Base32.\"<init>\":(Z)V\n-    #2 = Methodref          #7.#139       // org/apache/commons/codec/binary/Base32.\"<init>\":(ZB)V\n-    #3 = Class              #140          // org/apache/commons/codec/binary/BaseNCodec\n-    #4 = Methodref          #7.#141       // org/apache/commons/codec/binary/Base32.\"<init>\":(I[BZB)V\n-    #5 = Fieldref           #7.#142       // org/apache/commons/codec/binary/Base32.CHUNK_SEPARATOR:[B\n-    #6 = Methodref          #7.#143       // org/apache/commons/codec/binary/Base32.\"<init>\":(I[B)V\n-    #7 = Class              #144          // org/apache/commons/codec/binary/Base32\n-    #8 = Methodref          #3.#145       // org/apache/commons/codec/binary/BaseNCodec.\"<init>\":(IIIIB)V\n-    #9 = Fieldref           #7.#146       // org/apache/commons/codec/binary/Base32.HEX_ENCODE_TABLE:[B\n-   #10 = Fieldref           #7.#147       // org/apache/commons/codec/binary/Base32.encodeTable:[B\n-   #11 = Fieldref           #7.#148       // org/apache/commons/codec/binary/Base32.HEX_DECODE_TABLE:[B\n-   #12 = Fieldref           #7.#149       // org/apache/commons/codec/binary/Base32.decodeTable:[B\n-   #13 = Fieldref           #7.#150       // org/apache/commons/codec/binary/Base32.ENCODE_TABLE:[B\n-   #14 = Fieldref           #7.#151       // org/apache/commons/codec/binary/Base32.DECODE_TABLE:[B\n-   #15 = Class              #152          // java/lang/IllegalArgumentException\n-   #16 = Class              #153          // java/lang/StringBuilder\n-   #17 = Methodref          #16.#154      // java/lang/StringBuilder.\"<init>\":()V\n-   #18 = String             #155          // lineLength\n-   #19 = Methodref          #16.#156      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #20 = Methodref          #16.#157      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #21 = String             #158          //  > 0, but lineSeparator is null\n-   #22 = Methodref          #16.#159      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #23 = Methodref          #15.#160      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #24 = Methodref          #7.#161       // org/apache/commons/codec/binary/Base32.containsAlphabetOrPad:([B)Z\n-   #25 = Methodref          #162.#163     // org/apache/commons/codec/binary/StringUtils.newStringUtf8:([B)Ljava/lang/String;\n-   #26 = String             #164          // lineSeparator must not contain Base32 characters: [\n-   #27 = String             #165          // ]\n-   #28 = Fieldref           #7.#166       // org/apache/commons/codec/binary/Base32.encodeSize:I\n-   #29 = Fieldref           #7.#167       // org/apache/commons/codec/binary/Base32.lineSeparator:[B\n-   #30 = Methodref          #168.#169     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #31 = Fieldref           #7.#170       // org/apache/commons/codec/binary/Base32.decodeSize:I\n-   #32 = Methodref          #7.#171       // org/apache/commons/codec/binary/Base32.isInAlphabet:(B)Z\n-   #33 = Methodref          #7.#172       // org/apache/commons/codec/binary/Base32.isWhiteSpace:(B)Z\n-   #34 = String             #173          // pad must not be in alphabet or whitespace\n-   #35 = Fieldref           #114.#174     // org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n-   #36 = Fieldref           #7.#175       // org/apache/commons/codec/binary/Base32.pad:B\n-   #37 = Methodref          #7.#176       // org/apache/commons/codec/binary/Base32.ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-   #38 = Fieldref           #114.#177     // org/apache/commons/codec/binary/BaseNCodec$Context.modulus:I\n-   #39 = Fieldref           #114.#178     // org/apache/commons/codec/binary/BaseNCodec$Context.lbitWorkArea:J\n-   #40 = Fieldref           #114.#179     // org/apache/commons/codec/binary/BaseNCodec$Context.pos:I\n+    #1 = Methodref          #7.#137       // org/apache/commons/codec/binary/Base32.\"<init>\":(Z)V\n+    #2 = Methodref          #7.#138       // org/apache/commons/codec/binary/Base32.\"<init>\":(ZB)V\n+    #3 = Class              #139          // org/apache/commons/codec/binary/BaseNCodec\n+    #4 = Methodref          #7.#140       // org/apache/commons/codec/binary/Base32.\"<init>\":(I[BZB)V\n+    #5 = Fieldref           #7.#141       // org/apache/commons/codec/binary/Base32.CHUNK_SEPARATOR:[B\n+    #6 = Methodref          #7.#142       // org/apache/commons/codec/binary/Base32.\"<init>\":(I[B)V\n+    #7 = Class              #143          // org/apache/commons/codec/binary/Base32\n+    #8 = Methodref          #3.#144       // org/apache/commons/codec/binary/BaseNCodec.\"<init>\":(IIIIB)V\n+    #9 = Fieldref           #7.#145       // org/apache/commons/codec/binary/Base32.HEX_ENCODE_TABLE:[B\n+   #10 = Fieldref           #7.#146       // org/apache/commons/codec/binary/Base32.encodeTable:[B\n+   #11 = Fieldref           #7.#147       // org/apache/commons/codec/binary/Base32.HEX_DECODE_TABLE:[B\n+   #12 = Fieldref           #7.#148       // org/apache/commons/codec/binary/Base32.decodeTable:[B\n+   #13 = Fieldref           #7.#149       // org/apache/commons/codec/binary/Base32.ENCODE_TABLE:[B\n+   #14 = Fieldref           #7.#150       // org/apache/commons/codec/binary/Base32.DECODE_TABLE:[B\n+   #15 = Class              #151          // java/lang/IllegalArgumentException\n+   #16 = Class              #152          // java/lang/StringBuilder\n+   #17 = Methodref          #16.#153      // java/lang/StringBuilder.\"<init>\":()V\n+   #18 = String             #154          // lineLength\n+   #19 = Methodref          #16.#155      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #20 = Methodref          #16.#156      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #21 = String             #157          //  > 0, but lineSeparator is null\n+   #22 = Methodref          #16.#158      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #23 = Methodref          #15.#159      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #24 = Methodref          #7.#160       // org/apache/commons/codec/binary/Base32.containsAlphabetOrPad:([B)Z\n+   #25 = Methodref          #161.#162     // org/apache/commons/codec/binary/StringUtils.newStringUtf8:([B)Ljava/lang/String;\n+   #26 = String             #163          // lineSeparator must not contain Base32 characters: [\n+   #27 = String             #164          // ]\n+   #28 = Fieldref           #7.#165       // org/apache/commons/codec/binary/Base32.encodeSize:I\n+   #29 = Fieldref           #7.#166       // org/apache/commons/codec/binary/Base32.lineSeparator:[B\n+   #30 = Methodref          #167.#168     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #31 = Fieldref           #7.#169       // org/apache/commons/codec/binary/Base32.decodeSize:I\n+   #32 = Methodref          #7.#170       // org/apache/commons/codec/binary/Base32.isInAlphabet:(B)Z\n+   #33 = Methodref          #7.#171       // org/apache/commons/codec/binary/Base32.isWhiteSpace:(B)Z\n+   #34 = String             #172          // pad must not be in alphabet or whitespace\n+   #35 = Fieldref           #113.#173     // org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n+   #36 = Fieldref           #7.#174       // org/apache/commons/codec/binary/Base32.pad:B\n+   #37 = Methodref          #7.#175       // org/apache/commons/codec/binary/Base32.ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+   #38 = Fieldref           #113.#176     // org/apache/commons/codec/binary/BaseNCodec$Context.modulus:I\n+   #39 = Fieldref           #113.#177     // org/apache/commons/codec/binary/BaseNCodec$Context.lbitWorkArea:J\n+   #40 = Fieldref           #113.#178     // org/apache/commons/codec/binary/BaseNCodec$Context.pos:I\n    #41 = Long               255l\n    #43 = Long               3l\n-   #45 = Methodref          #7.#180       // org/apache/commons/codec/binary/Base32.validateCharacter:(JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #45 = Methodref          #7.#179       // org/apache/commons/codec/binary/Base32.validateCharacter:(JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n    #46 = Long               127l\n    #48 = Long               15l\n    #50 = Long               63l\n    #52 = Long               7l\n-   #54 = Class              #181          // java/lang/IllegalStateException\n-   #55 = String             #182          // Impossible modulus\n-   #56 = Methodref          #54.#160      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #57 = Fieldref           #7.#183       // org/apache/commons/codec/binary/Base32.lineLength:I\n-   #58 = Fieldref           #114.#184     // org/apache/commons/codec/binary/BaseNCodec$Context.currentLinePos:I\n-   #59 = String             #185          // Last encoded character (before the paddings if any) is a valid base 32 alphabet but not a possible value. Expected the discarded bits to be zero.\n+   #54 = Class              #180          // java/lang/IllegalStateException\n+   #55 = String             #181          // Impossible modulus\n+   #56 = Methodref          #54.#159      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #57 = Fieldref           #7.#182       // org/apache/commons/codec/binary/Base32.lineLength:I\n+   #58 = Fieldref           #113.#183     // org/apache/commons/codec/binary/BaseNCodec$Context.currentLinePos:I\n+   #59 = String             #184          // Last encoded character (before the paddings if any) is a valid base 32 alphabet but not a possible value. Expected the discarded bits to be zero.\n    #60 = Utf8               BITS_PER_ENCODED_BYTE\n    #61 = Utf8               I\n    #62 = Utf8               ConstantValue\n    #63 = Integer            5\n    #64 = Utf8               BYTES_PER_ENCODED_BLOCK\n    #65 = Integer            8\n    #66 = Utf8               BYTES_PER_UNENCODED_BLOCK\n@@ -108,112 +108,111 @@\n   #105 = Utf8               (I[B)V\n   #106 = Utf8               (I[BZ)V\n   #107 = Utf8               (I[BZB)V\n   #108 = Utf8               sep\n   #109 = Utf8               Ljava/lang/String;\n   #110 = Utf8               StackMapTable\n   #111 = Class              #68           // \"[B\"\n-  #112 = Class              #144          // org/apache/commons/codec/binary/Base32\n-  #113 = Utf8               decode\n-  #114 = Class              #186          // org/apache/commons/codec/binary/BaseNCodec$Context\n-  #115 = Utf8               Context\n-  #116 = Utf8               InnerClasses\n-  #117 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #118 = Utf8               result\n-  #119 = Utf8               b\n-  #120 = Utf8               buffer\n-  #121 = Utf8               i\n-  #122 = Utf8               input\n-  #123 = Utf8               inPos\n-  #124 = Utf8               inAvail\n-  #125 = Utf8               context\n-  #126 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-  #127 = Utf8               encode\n-  #128 = Utf8               savedPos\n-  #129 = Utf8               isInAlphabet\n-  #130 = Utf8               (B)Z\n-  #131 = Utf8               octet\n-  #132 = Utf8               validateCharacter\n-  #133 = Utf8               (JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #134 = Utf8               emptyBitsMask\n-  #135 = Utf8               <clinit>\n-  #136 = Utf8               SourceFile\n-  #137 = Utf8               Base32.java\n-  #138 = NameAndType        #89:#99       // \"<init>\":(Z)V\n-  #139 = NameAndType        #89:#102      // \"<init>\":(ZB)V\n-  #140 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n-  #141 = NameAndType        #89:#107      // \"<init>\":(I[BZB)V\n-  #142 = NameAndType        #67:#68       // CHUNK_SEPARATOR:[B\n-  #143 = NameAndType        #89:#105      // \"<init>\":(I[B)V\n-  #144 = Utf8               org/apache/commons/codec/binary/Base32\n-  #145 = NameAndType        #89:#187      // \"<init>\":(IIIIB)V\n-  #146 = NameAndType        #72:#68       // HEX_ENCODE_TABLE:[B\n-  #147 = NameAndType        #87:#68       // encodeTable:[B\n-  #148 = NameAndType        #71:#68       // HEX_DECODE_TABLE:[B\n-  #149 = NameAndType        #85:#68       // decodeTable:[B\n-  #150 = NameAndType        #70:#68       // ENCODE_TABLE:[B\n-  #151 = NameAndType        #69:#68       // DECODE_TABLE:[B\n-  #152 = Utf8               java/lang/IllegalArgumentException\n-  #153 = Utf8               java/lang/StringBuilder\n-  #154 = NameAndType        #89:#90       // \"<init>\":()V\n-  #155 = Utf8               lineLength\n-  #156 = NameAndType        #188:#189     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #157 = NameAndType        #188:#190     // append:(I)Ljava/lang/StringBuilder;\n-  #158 = Utf8                > 0, but lineSeparator is null\n-  #159 = NameAndType        #191:#192     // toString:()Ljava/lang/String;\n-  #160 = NameAndType        #89:#193      // \"<init>\":(Ljava/lang/String;)V\n-  #161 = NameAndType        #194:#195     // containsAlphabetOrPad:([B)Z\n-  #162 = Class              #196          // org/apache/commons/codec/binary/StringUtils\n-  #163 = NameAndType        #197:#198     // newStringUtf8:([B)Ljava/lang/String;\n-  #164 = Utf8               lineSeparator must not contain Base32 characters: [\n-  #165 = Utf8               ]\n-  #166 = NameAndType        #86:#61       // encodeSize:I\n-  #167 = NameAndType        #88:#68       // lineSeparator:[B\n-  #168 = Class              #199          // java/lang/System\n-  #169 = NameAndType        #200:#201     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #170 = NameAndType        #84:#61       // decodeSize:I\n-  #171 = NameAndType        #129:#130     // isInAlphabet:(B)Z\n-  #172 = NameAndType        #202:#130     // isWhiteSpace:(B)Z\n-  #173 = Utf8               pad must not be in alphabet or whitespace\n-  #174 = NameAndType        #203:#101     // eof:Z\n-  #175 = NameAndType        #97:#98       // pad:B\n-  #176 = NameAndType        #204:#205     // ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-  #177 = NameAndType        #206:#61      // modulus:I\n-  #178 = NameAndType        #207:#74      // lbitWorkArea:J\n-  #179 = NameAndType        #208:#61      // pos:I\n-  #180 = NameAndType        #132:#133     // validateCharacter:(JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #181 = Utf8               java/lang/IllegalStateException\n-  #182 = Utf8               Impossible modulus\n-  #183 = NameAndType        #104:#61      // lineLength:I\n-  #184 = NameAndType        #209:#61      // currentLinePos:I\n-  #185 = Utf8               Last encoded character (before the paddings if any) is a valid base 32 alphabet but not a possible value. Expected the discarded bits to be zero.\n-  #186 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n-  #187 = Utf8               (IIIIB)V\n-  #188 = Utf8               append\n-  #189 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #190 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #191 = Utf8               toString\n-  #192 = Utf8               ()Ljava/lang/String;\n-  #193 = Utf8               (Ljava/lang/String;)V\n-  #194 = Utf8               containsAlphabetOrPad\n-  #195 = Utf8               ([B)Z\n-  #196 = Utf8               org/apache/commons/codec/binary/StringUtils\n-  #197 = Utf8               newStringUtf8\n-  #198 = Utf8               ([B)Ljava/lang/String;\n-  #199 = Utf8               java/lang/System\n-  #200 = Utf8               arraycopy\n-  #201 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #202 = Utf8               isWhiteSpace\n-  #203 = Utf8               eof\n-  #204 = Utf8               ensureBufferSize\n-  #205 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-  #206 = Utf8               modulus\n-  #207 = Utf8               lbitWorkArea\n-  #208 = Utf8               pos\n-  #209 = Utf8               currentLinePos\n+  #112 = Utf8               decode\n+  #113 = Class              #185          // org/apache/commons/codec/binary/BaseNCodec$Context\n+  #114 = Utf8               Context\n+  #115 = Utf8               InnerClasses\n+  #116 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #117 = Utf8               result\n+  #118 = Utf8               b\n+  #119 = Utf8               buffer\n+  #120 = Utf8               i\n+  #121 = Utf8               input\n+  #122 = Utf8               inPos\n+  #123 = Utf8               inAvail\n+  #124 = Utf8               context\n+  #125 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+  #126 = Utf8               encode\n+  #127 = Utf8               savedPos\n+  #128 = Utf8               isInAlphabet\n+  #129 = Utf8               (B)Z\n+  #130 = Utf8               octet\n+  #131 = Utf8               validateCharacter\n+  #132 = Utf8               (JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #133 = Utf8               emptyBitsMask\n+  #134 = Utf8               <clinit>\n+  #135 = Utf8               SourceFile\n+  #136 = Utf8               Base32.java\n+  #137 = NameAndType        #89:#99       // \"<init>\":(Z)V\n+  #138 = NameAndType        #89:#102      // \"<init>\":(ZB)V\n+  #139 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n+  #140 = NameAndType        #89:#107      // \"<init>\":(I[BZB)V\n+  #141 = NameAndType        #67:#68       // CHUNK_SEPARATOR:[B\n+  #142 = NameAndType        #89:#105      // \"<init>\":(I[B)V\n+  #143 = Utf8               org/apache/commons/codec/binary/Base32\n+  #144 = NameAndType        #89:#186      // \"<init>\":(IIIIB)V\n+  #145 = NameAndType        #72:#68       // HEX_ENCODE_TABLE:[B\n+  #146 = NameAndType        #87:#68       // encodeTable:[B\n+  #147 = NameAndType        #71:#68       // HEX_DECODE_TABLE:[B\n+  #148 = NameAndType        #85:#68       // decodeTable:[B\n+  #149 = NameAndType        #70:#68       // ENCODE_TABLE:[B\n+  #150 = NameAndType        #69:#68       // DECODE_TABLE:[B\n+  #151 = Utf8               java/lang/IllegalArgumentException\n+  #152 = Utf8               java/lang/StringBuilder\n+  #153 = NameAndType        #89:#90       // \"<init>\":()V\n+  #154 = Utf8               lineLength\n+  #155 = NameAndType        #187:#188     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #156 = NameAndType        #187:#189     // append:(I)Ljava/lang/StringBuilder;\n+  #157 = Utf8                > 0, but lineSeparator is null\n+  #158 = NameAndType        #190:#191     // toString:()Ljava/lang/String;\n+  #159 = NameAndType        #89:#192      // \"<init>\":(Ljava/lang/String;)V\n+  #160 = NameAndType        #193:#194     // containsAlphabetOrPad:([B)Z\n+  #161 = Class              #195          // org/apache/commons/codec/binary/StringUtils\n+  #162 = NameAndType        #196:#197     // newStringUtf8:([B)Ljava/lang/String;\n+  #163 = Utf8               lineSeparator must not contain Base32 characters: [\n+  #164 = Utf8               ]\n+  #165 = NameAndType        #86:#61       // encodeSize:I\n+  #166 = NameAndType        #88:#68       // lineSeparator:[B\n+  #167 = Class              #198          // java/lang/System\n+  #168 = NameAndType        #199:#200     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #169 = NameAndType        #84:#61       // decodeSize:I\n+  #170 = NameAndType        #128:#129     // isInAlphabet:(B)Z\n+  #171 = NameAndType        #201:#129     // isWhiteSpace:(B)Z\n+  #172 = Utf8               pad must not be in alphabet or whitespace\n+  #173 = NameAndType        #202:#101     // eof:Z\n+  #174 = NameAndType        #97:#98       // pad:B\n+  #175 = NameAndType        #203:#204     // ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+  #176 = NameAndType        #205:#61      // modulus:I\n+  #177 = NameAndType        #206:#74      // lbitWorkArea:J\n+  #178 = NameAndType        #207:#61      // pos:I\n+  #179 = NameAndType        #131:#132     // validateCharacter:(JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #180 = Utf8               java/lang/IllegalStateException\n+  #181 = Utf8               Impossible modulus\n+  #182 = NameAndType        #104:#61      // lineLength:I\n+  #183 = NameAndType        #208:#61      // currentLinePos:I\n+  #184 = Utf8               Last encoded character (before the paddings if any) is a valid base 32 alphabet but not a possible value. Expected the discarded bits to be zero.\n+  #185 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n+  #186 = Utf8               (IIIIB)V\n+  #187 = Utf8               append\n+  #188 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #189 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #190 = Utf8               toString\n+  #191 = Utf8               ()Ljava/lang/String;\n+  #192 = Utf8               (Ljava/lang/String;)V\n+  #193 = Utf8               containsAlphabetOrPad\n+  #194 = Utf8               ([B)Z\n+  #195 = Utf8               org/apache/commons/codec/binary/StringUtils\n+  #196 = Utf8               newStringUtf8\n+  #197 = Utf8               ([B)Ljava/lang/String;\n+  #198 = Utf8               java/lang/System\n+  #199 = Utf8               arraycopy\n+  #200 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #201 = Utf8               isWhiteSpace\n+  #202 = Utf8               eof\n+  #203 = Utf8               ensureBufferSize\n+  #204 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+  #205 = Utf8               modulus\n+  #206 = Utf8               lbitWorkArea\n+  #207 = Utf8               pos\n+  #208 = Utf8               currentLinePos\n {\n   private static final int BITS_PER_ENCODED_BYTE = 5;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 5\n \n   private static final int BYTES_PER_ENCODED_BLOCK = 8;\n@@ -551,14 +550,16 @@\n        215: dup\n        216: ldc           #34                 // String pad must not be in alphabet or whitespace\n        218: invokespecial #23                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n        221: athrow\n        222: return\n       LineNumberTable:\n         line 298: 0\n+        line 299: 5\n+        line 298: 17\n         line 300: 20\n         line 301: 24\n         line 302: 31\n         line 304: 41\n         line 305: 48\n         line 307: 55\n         line 308: 59\n@@ -3431,8 +3432,8 @@\n         line 66: 16\n         line 83: 678\n         line 94: 871\n         line 111: 1515\n }\n SourceFile: \"Base32.java\"\n InnerClasses:\n-  static #115= #114 of #3;                // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n+  static #114= #113 of #3;                // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n"}]}
