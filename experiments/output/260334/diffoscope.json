{"diffoscope-json-version": 1, "source1": "first/ObservableInputStream.class", "source2": "second/ObservableInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,145 +7,146 @@\n import java.io.InputStream;\n import java.util.List;\n \n public class ObservableInputStream extends ProxyInputStream\n {\n     private final List<ObservableInputStream.Observer> observers;\n     \n-    public ObservableInputStream(final InputStream pProxy) {\n-        super(pProxy);\n+    public ObservableInputStream(final InputStream inputStream) {\n+        super(inputStream);\n         this.observers = new ArrayList<ObservableInputStream.Observer>();\n     }\n     \n-    public void add(final ObservableInputStream.Observer pObserver) {\n-        this.observers.add(pObserver);\n+    public void add(final ObservableInputStream.Observer observer) {\n+        this.observers.add(observer);\n     }\n     \n-    public void remove(final ObservableInputStream.Observer pObserver) {\n-        this.observers.remove(pObserver);\n+    public void remove(final ObservableInputStream.Observer observer) {\n+        this.observers.remove(observer);\n     }\n     \n     public void removeAllObservers() {\n         this.observers.clear();\n     }\n     \n     public int read() throws IOException {\n-        int result = 0;\n-        IOException ioe = null;\n+        int read = 0;\n+        IOException ex = null;\n         try {\n-            result = super.read();\n+            read = super.read();\n         }\n-        catch (final IOException pException) {\n-            ioe = pException;\n+        catch (final IOException ex2) {\n+            ex = ex2;\n         }\n-        if (ioe != null) {\n-            this.noteError(ioe);\n+        if (ex != null) {\n+            this.noteError(ex);\n         }\n-        else if (result == -1) {\n+        else if (read == -1) {\n             this.noteFinished();\n         }\n         else {\n-            this.noteDataByte(result);\n+            this.noteDataByte(read);\n         }\n-        return result;\n+        return read;\n     }\n     \n-    public int read(final byte[] pBuffer) throws IOException {\n-        int result = 0;\n-        IOException ioe = null;\n+    public int read(final byte[] array) throws IOException {\n+        int read = 0;\n+        IOException ex = null;\n         try {\n-            result = super.read(pBuffer);\n+            read = super.read(array);\n         }\n-        catch (final IOException pException) {\n-            ioe = pException;\n+        catch (final IOException ex2) {\n+            ex = ex2;\n         }\n-        if (ioe != null) {\n-            this.noteError(ioe);\n+        if (ex != null) {\n+            this.noteError(ex);\n         }\n-        else if (result == -1) {\n+        else if (read == -1) {\n             this.noteFinished();\n         }\n-        else if (result > 0) {\n-            this.noteDataBytes(pBuffer, 0, result);\n+        else if (read > 0) {\n+            this.noteDataBytes(array, 0, read);\n         }\n-        return result;\n+        return read;\n     }\n     \n-    public int read(final byte[] pBuffer, final int pOffset, final int pLength) throws IOException {\n-        int result = 0;\n-        IOException ioe = null;\n+    public int read(final byte[] array, final int n, final int n2) throws IOException {\n+        int read = 0;\n+        IOException ex = null;\n         try {\n-            result = super.read(pBuffer, pOffset, pLength);\n+            read = super.read(array, n, n2);\n         }\n-        catch (final IOException pException) {\n-            ioe = pException;\n+        catch (final IOException ex2) {\n+            ex = ex2;\n         }\n-        if (ioe != null) {\n-            this.noteError(ioe);\n+        if (ex != null) {\n+            this.noteError(ex);\n         }\n-        else if (result == -1) {\n+        else if (read == -1) {\n             this.noteFinished();\n         }\n-        else if (result > 0) {\n-            this.noteDataBytes(pBuffer, pOffset, result);\n+        else if (read > 0) {\n+            this.noteDataBytes(array, n, read);\n         }\n-        return result;\n+        return read;\n     }\n     \n-    protected void noteDataBytes(final byte[] pBuffer, final int pOffset, final int pLength) throws IOException {\n-        for (final ObservableInputStream.Observer observer : this.getObservers()) {\n-            observer.data(pBuffer, pOffset, pLength);\n+    protected void noteDataBytes(final byte[] array, final int n, final int n2) throws IOException {\n+        final Iterator<ObservableInputStream.Observer> iterator = this.getObservers().iterator();\n+        while (iterator.hasNext()) {\n+            ((ObservableInputStream.Observer)iterator.next()).data(array, n, n2);\n         }\n     }\n     \n     protected void noteFinished() throws IOException {\n-        for (final ObservableInputStream.Observer observer : this.getObservers()) {\n-            observer.finished();\n+        final Iterator<ObservableInputStream.Observer> iterator = this.getObservers().iterator();\n+        while (iterator.hasNext()) {\n+            ((ObservableInputStream.Observer)iterator.next()).finished();\n         }\n     }\n     \n-    protected void noteDataByte(final int pDataByte) throws IOException {\n-        for (final ObservableInputStream.Observer observer : this.getObservers()) {\n-            observer.data(pDataByte);\n+    protected void noteDataByte(final int n) throws IOException {\n+        final Iterator<ObservableInputStream.Observer> iterator = this.getObservers().iterator();\n+        while (iterator.hasNext()) {\n+            ((ObservableInputStream.Observer)iterator.next()).data(n);\n         }\n     }\n     \n-    protected void noteError(final IOException pException) throws IOException {\n-        for (final ObservableInputStream.Observer observer : this.getObservers()) {\n-            observer.error(pException);\n+    protected void noteError(final IOException ex) throws IOException {\n+        final Iterator<ObservableInputStream.Observer> iterator = this.getObservers().iterator();\n+        while (iterator.hasNext()) {\n+            ((ObservableInputStream.Observer)iterator.next()).error(ex);\n         }\n     }\n     \n     protected void noteClosed() throws IOException {\n-        for (final ObservableInputStream.Observer observer : this.getObservers()) {\n-            observer.closed();\n+        final Iterator<ObservableInputStream.Observer> iterator = this.getObservers().iterator();\n+        while (iterator.hasNext()) {\n+            ((ObservableInputStream.Observer)iterator.next()).closed();\n         }\n     }\n     \n     protected List<ObservableInputStream.Observer> getObservers() {\n         return this.observers;\n     }\n     \n     public void close() throws IOException {\n-        IOException ioe = null;\n+        IOException ex = null;\n         try {\n             super.close();\n         }\n-        catch (final IOException e) {\n-            ioe = e;\n+        catch (final IOException ex2) {\n+            ex = ex2;\n         }\n-        if (ioe == null) {\n+        if (ex == null) {\n             this.noteClosed();\n         }\n         else {\n-            this.noteError(ioe);\n+            this.noteError(ex);\n         }\n     }\n     \n     public void consume() throws IOException {\n-        final byte[] buffer = new byte[8192];\n-        int res;\n-        do {\n-            res = this.read(buffer);\n-        } while (res != -1);\n+        while (this.read(new byte[8192]) != -1) {}\n     }\n }\n"}]}
