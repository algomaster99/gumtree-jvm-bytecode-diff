{"diffoscope-json-version": 1, "source1": "first/CanReadFileFilter.class", "source2": "second/CanReadFileFilter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,81 +1,81 @@\n-  SHA-256 checksum aecda69d12f70fc06d305c7f2f36c65bad378a09147da5feae61ac4cd9ba84dd\n+  SHA-256 checksum e67c655b9e398487c2a8939edecbe51c219573f43c2323f3327a64d15bfb2785\n   Compiled from \"CanReadFileFilter.java\"\n public class org.apache.commons.io.filefilter.CanReadFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #5                          // org/apache/commons/io/filefilter/CanReadFileFilter\n-  super_class: #13                        // org/apache/commons/io/filefilter/AbstractFileFilter\n+  this_class: #20                         // org/apache/commons/io/filefilter/CanReadFileFilter\n+  super_class: #2                         // org/apache/commons/io/filefilter/AbstractFileFilter\n   interfaces: 1, fields: 4, methods: 4, attributes: 1\n Constant pool:\n-   #1 = Methodref          #13.#34        // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n-   #2 = Methodref          #35.#36        // java/io/File.canRead:()Z\n-   #3 = Methodref          #37.#38        // java/nio/file/Files.isReadable:(Ljava/nio/file/Path;)Z\n-   #4 = Methodref          #5.#39         // org/apache/commons/io/filefilter/CanReadFileFilter.toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-   #5 = Class              #40            // org/apache/commons/io/filefilter/CanReadFileFilter\n-   #6 = Methodref          #5.#34         // org/apache/commons/io/filefilter/CanReadFileFilter.\"<init>\":()V\n-   #7 = Fieldref           #5.#41         // org/apache/commons/io/filefilter/CanReadFileFilter.CAN_READ:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-   #8 = InterfaceMethodref #42.#43        // org/apache/commons/io/filefilter/IOFileFilter.negate:()Lorg/apache/commons/io/filefilter/IOFileFilter;\n-   #9 = Fieldref           #5.#44         // org/apache/commons/io/filefilter/CanReadFileFilter.CANNOT_READ:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-  #10 = Fieldref           #45.#46        // org/apache/commons/io/filefilter/CanWriteFileFilter.CANNOT_WRITE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-  #11 = InterfaceMethodref #42.#47        // org/apache/commons/io/filefilter/IOFileFilter.and:(Lorg/apache/commons/io/filefilter/IOFileFilter;)Lorg/apache/commons/io/filefilter/IOFileFilter;\n-  #12 = Fieldref           #5.#48         // org/apache/commons/io/filefilter/CanReadFileFilter.READ_ONLY:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-  #13 = Class              #49            // org/apache/commons/io/filefilter/AbstractFileFilter\n-  #14 = Class              #50            // java/io/Serializable\n-  #15 = Utf8               CAN_READ\n-  #16 = Utf8               Lorg/apache/commons/io/filefilter/IOFileFilter;\n-  #17 = Utf8               CANNOT_READ\n-  #18 = Utf8               READ_ONLY\n-  #19 = Utf8               serialVersionUID\n-  #20 = Utf8               J\n-  #21 = Utf8               ConstantValue\n-  #22 = Long               3179904805251622989l\n-  #24 = Utf8               <init>\n-  #25 = Utf8               ()V\n-  #26 = Utf8               Code\n-  #27 = Utf8               LineNumberTable\n-  #28 = Utf8               accept\n-  #29 = Utf8               (Ljava/io/File;)Z\n-  #30 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-  #31 = Utf8               <clinit>\n-  #32 = Utf8               SourceFile\n-  #33 = Utf8               CanReadFileFilter.java\n-  #34 = NameAndType        #24:#25        // \"<init>\":()V\n-  #35 = Class              #51            // java/io/File\n-  #36 = NameAndType        #52:#53        // canRead:()Z\n-  #37 = Class              #54            // java/nio/file/Files\n-  #38 = NameAndType        #55:#56        // isReadable:(Ljava/nio/file/Path;)Z\n-  #39 = NameAndType        #57:#58        // toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-  #40 = Utf8               org/apache/commons/io/filefilter/CanReadFileFilter\n-  #41 = NameAndType        #15:#16        // CAN_READ:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-  #42 = Class              #59            // org/apache/commons/io/filefilter/IOFileFilter\n-  #43 = NameAndType        #60:#61        // negate:()Lorg/apache/commons/io/filefilter/IOFileFilter;\n-  #44 = NameAndType        #17:#16        // CANNOT_READ:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-  #45 = Class              #62            // org/apache/commons/io/filefilter/CanWriteFileFilter\n-  #46 = NameAndType        #63:#16        // CANNOT_WRITE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-  #47 = NameAndType        #64:#65        // and:(Lorg/apache/commons/io/filefilter/IOFileFilter;)Lorg/apache/commons/io/filefilter/IOFileFilter;\n-  #48 = NameAndType        #18:#16        // READ_ONLY:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-  #49 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n-  #50 = Utf8               java/io/Serializable\n-  #51 = Utf8               java/io/File\n-  #52 = Utf8               canRead\n-  #53 = Utf8               ()Z\n-  #54 = Utf8               java/nio/file/Files\n-  #55 = Utf8               isReadable\n-  #56 = Utf8               (Ljava/nio/file/Path;)Z\n-  #57 = Utf8               toFileVisitResult\n-  #58 = Utf8               (ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-  #59 = Utf8               org/apache/commons/io/filefilter/IOFileFilter\n-  #60 = Utf8               negate\n-  #61 = Utf8               ()Lorg/apache/commons/io/filefilter/IOFileFilter;\n-  #62 = Utf8               org/apache/commons/io/filefilter/CanWriteFileFilter\n-  #63 = Utf8               CANNOT_WRITE\n-  #64 = Utf8               and\n-  #65 = Utf8               (Lorg/apache/commons/io/filefilter/IOFileFilter;)Lorg/apache/commons/io/filefilter/IOFileFilter;\n+   #1 = Methodref          #2.#3          // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+   #2 = Class              #4             // org/apache/commons/io/filefilter/AbstractFileFilter\n+   #3 = NameAndType        #5:#6          // \"<init>\":()V\n+   #4 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n+   #5 = Utf8               <init>\n+   #6 = Utf8               ()V\n+   #7 = Methodref          #8.#9          // java/io/File.canRead:()Z\n+   #8 = Class              #10            // java/io/File\n+   #9 = NameAndType        #11:#12        // canRead:()Z\n+  #10 = Utf8               java/io/File\n+  #11 = Utf8               canRead\n+  #12 = Utf8               ()Z\n+  #13 = Methodref          #14.#15        // java/nio/file/Files.isReadable:(Ljava/nio/file/Path;)Z\n+  #14 = Class              #16            // java/nio/file/Files\n+  #15 = NameAndType        #17:#18        // isReadable:(Ljava/nio/file/Path;)Z\n+  #16 = Utf8               java/nio/file/Files\n+  #17 = Utf8               isReadable\n+  #18 = Utf8               (Ljava/nio/file/Path;)Z\n+  #19 = Methodref          #20.#21        // org/apache/commons/io/filefilter/CanReadFileFilter.toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+  #20 = Class              #22            // org/apache/commons/io/filefilter/CanReadFileFilter\n+  #21 = NameAndType        #23:#24        // toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+  #22 = Utf8               org/apache/commons/io/filefilter/CanReadFileFilter\n+  #23 = Utf8               toFileVisitResult\n+  #24 = Utf8               (ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+  #25 = Methodref          #20.#3         // org/apache/commons/io/filefilter/CanReadFileFilter.\"<init>\":()V\n+  #26 = Fieldref           #20.#27        // org/apache/commons/io/filefilter/CanReadFileFilter.CAN_READ:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #27 = NameAndType        #28:#29        // CAN_READ:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #28 = Utf8               CAN_READ\n+  #29 = Utf8               Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #30 = InterfaceMethodref #31.#32        // org/apache/commons/io/filefilter/IOFileFilter.negate:()Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #31 = Class              #33            // org/apache/commons/io/filefilter/IOFileFilter\n+  #32 = NameAndType        #34:#35        // negate:()Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #33 = Utf8               org/apache/commons/io/filefilter/IOFileFilter\n+  #34 = Utf8               negate\n+  #35 = Utf8               ()Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #36 = Fieldref           #20.#37        // org/apache/commons/io/filefilter/CanReadFileFilter.CANNOT_READ:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #37 = NameAndType        #38:#29        // CANNOT_READ:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #38 = Utf8               CANNOT_READ\n+  #39 = Fieldref           #40.#41        // org/apache/commons/io/filefilter/CanWriteFileFilter.CANNOT_WRITE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #40 = Class              #42            // org/apache/commons/io/filefilter/CanWriteFileFilter\n+  #41 = NameAndType        #43:#29        // CANNOT_WRITE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #42 = Utf8               org/apache/commons/io/filefilter/CanWriteFileFilter\n+  #43 = Utf8               CANNOT_WRITE\n+  #44 = InterfaceMethodref #31.#45        // org/apache/commons/io/filefilter/IOFileFilter.and:(Lorg/apache/commons/io/filefilter/IOFileFilter;)Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #45 = NameAndType        #46:#47        // and:(Lorg/apache/commons/io/filefilter/IOFileFilter;)Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #46 = Utf8               and\n+  #47 = Utf8               (Lorg/apache/commons/io/filefilter/IOFileFilter;)Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #48 = Fieldref           #20.#49        // org/apache/commons/io/filefilter/CanReadFileFilter.READ_ONLY:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #49 = NameAndType        #50:#29        // READ_ONLY:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #50 = Utf8               READ_ONLY\n+  #51 = Class              #52            // java/io/Serializable\n+  #52 = Utf8               java/io/Serializable\n+  #53 = Utf8               serialVersionUID\n+  #54 = Utf8               J\n+  #55 = Utf8               ConstantValue\n+  #56 = Long               3179904805251622989l\n+  #58 = Utf8               Code\n+  #59 = Utf8               LineNumberTable\n+  #60 = Utf8               accept\n+  #61 = Utf8               (Ljava/io/File;)Z\n+  #62 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #63 = Utf8               <clinit>\n+  #64 = Utf8               SourceFile\n+  #65 = Utf8               CanReadFileFilter.java\n {\n   public static final org.apache.commons.io.filefilter.IOFileFilter CAN_READ;\n     descriptor: Lorg/apache/commons/io/filefilter/IOFileFilter;\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n \n   public static final org.apache.commons.io.filefilter.IOFileFilter CANNOT_READ;\n     descriptor: Lorg/apache/commons/io/filefilter/IOFileFilter;\n@@ -104,48 +104,48 @@\n \n   public boolean accept(java.io.File);\n     descriptor: (Ljava/io/File;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=2, args_size=2\n          0: aload_1\n-         1: invokevirtual #2                  // Method java/io/File.canRead:()Z\n+         1: invokevirtual #7                  // Method java/io/File.canRead:()Z\n          4: ireturn\n       LineNumberTable:\n         line 91: 0\n \n   public java.nio.file.FileVisitResult accept(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes);\n     descriptor: (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_1\n-         1: invokestatic  #3                  // Method java/nio/file/Files.isReadable:(Ljava/nio/file/Path;)Z\n+         1: invokestatic  #13                 // Method java/nio/file/Files.isReadable:(Ljava/nio/file/Path;)Z\n          4: aload_1\n-         5: invokestatic  #4                  // Method toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+         5: invokestatic  #19                 // Method toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n          8: areturn\n       LineNumberTable:\n         line 103: 0\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=2, locals=0, args_size=0\n-         0: new           #5                  // class org/apache/commons/io/filefilter/CanReadFileFilter\n+         0: new           #20                 // class org/apache/commons/io/filefilter/CanReadFileFilter\n          3: dup\n-         4: invokespecial #6                  // Method \"<init>\":()V\n-         7: putstatic     #7                  // Field CAN_READ:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-        10: getstatic     #7                  // Field CAN_READ:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-        13: invokeinterface #8,  1            // InterfaceMethod org/apache/commons/io/filefilter/IOFileFilter.negate:()Lorg/apache/commons/io/filefilter/IOFileFilter;\n-        18: putstatic     #9                  // Field CANNOT_READ:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-        21: getstatic     #7                  // Field CAN_READ:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-        24: getstatic     #10                 // Field org/apache/commons/io/filefilter/CanWriteFileFilter.CANNOT_WRITE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-        27: invokeinterface #11,  2           // InterfaceMethod org/apache/commons/io/filefilter/IOFileFilter.and:(Lorg/apache/commons/io/filefilter/IOFileFilter;)Lorg/apache/commons/io/filefilter/IOFileFilter;\n-        32: putstatic     #12                 // Field READ_ONLY:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+         4: invokespecial #25                 // Method \"<init>\":()V\n+         7: putstatic     #26                 // Field CAN_READ:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+        10: getstatic     #26                 // Field CAN_READ:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+        13: invokeinterface #30,  1           // InterfaceMethod org/apache/commons/io/filefilter/IOFileFilter.negate:()Lorg/apache/commons/io/filefilter/IOFileFilter;\n+        18: putstatic     #36                 // Field CANNOT_READ:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+        21: getstatic     #26                 // Field CAN_READ:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+        24: getstatic     #39                 // Field org/apache/commons/io/filefilter/CanWriteFileFilter.CANNOT_WRITE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+        27: invokeinterface #44,  2           // InterfaceMethod org/apache/commons/io/filefilter/IOFileFilter.and:(Lorg/apache/commons/io/filefilter/IOFileFilter;)Lorg/apache/commons/io/filefilter/IOFileFilter;\n+        32: putstatic     #48                 // Field READ_ONLY:Lorg/apache/commons/io/filefilter/IOFileFilter;\n         35: return\n       LineNumberTable:\n         line 67: 0\n         line 70: 10\n         line 73: 21\n }\n SourceFile: \"CanReadFileFilter.java\"\n"}]}
