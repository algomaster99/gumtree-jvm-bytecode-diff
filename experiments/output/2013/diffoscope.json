{"diffoscope-json-version": 1, "source1": "first/Pack200Utils.class", "source2": "second/Pack200Utils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -31,25 +31,67 @@\n     public static void normalize(final File from, final File to, Map<String, String> props) throws IOException {\n         if (props == null) {\n             props = new HashMap<String, String>();\n         }\n         props.put(\"pack.segment.limit\", \"-1\");\n         final File tempFile = File.createTempFile(\"commons-compress\", \"pack200normalize\");\n         try {\n-            try (final FileOutputStream fos = new FileOutputStream(tempFile);\n-                 final JarFile jarFile = new JarFile(from)) {\n-                final Pack200.Packer packer = Pack200.newPacker();\n-                packer.properties().putAll(props);\n-                packer.pack(jarFile, (OutputStream)fos);\n+            final FileOutputStream fos = new FileOutputStream(tempFile);\n+            Throwable x0 = null;\n+            try {\n+                final JarFile jarFile = new JarFile(from);\n+                Throwable x2 = null;\n+                try {\n+                    final Pack200.Packer packer = Pack200.newPacker();\n+                    packer.properties().putAll(props);\n+                    packer.pack(jarFile, (OutputStream)fos);\n+                }\n+                catch (final Throwable t) {\n+                    x2 = t;\n+                    throw t;\n+                }\n+                finally {\n+                    $closeResource(x2, jarFile);\n+                }\n+            }\n+            catch (final Throwable t2) {\n+                x0 = t2;\n+                throw t2;\n+            }\n+            finally {\n+                $closeResource(x0, fos);\n             }\n             final Pack200.Unpacker unpacker = Pack200.newUnpacker();\n-            try (final JarOutputStream jos = new JarOutputStream(new FileOutputStream(to))) {\n+            final JarOutputStream jos = new JarOutputStream(new FileOutputStream(to));\n+            Throwable x3 = null;\n+            try {\n                 unpacker.unpack(tempFile, jos);\n             }\n+            catch (final Throwable t3) {\n+                x3 = t3;\n+                throw t3;\n+            }\n+            finally {\n+                $closeResource(x3, jos);\n+            }\n         }\n         finally {\n             if (!tempFile.delete()) {\n                 tempFile.deleteOnExit();\n             }\n         }\n     }\n+    \n+    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n+        if (x0 != null) {\n+            try {\n+                x1.close();\n+            }\n+            catch (final Throwable exception) {\n+                x0.addSuppressed(exception);\n+            }\n+        }\n+        else {\n+            x1.close();\n+        }\n+    }\n }\n"}]}
