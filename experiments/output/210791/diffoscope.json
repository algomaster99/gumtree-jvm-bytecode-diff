{"diffoscope-json-version": 1, "source1": "first/FailableBiPredicate.class", "source2": "second/FailableBiPredicate.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,34 +2,34 @@\n package org.apache.commons.lang3.function;\n \n import java.util.Objects;\n \n @FunctionalInterface\n public interface FailableBiPredicate<T, U, E extends Throwable>\n {\n-    public static final FailableBiPredicate FALSE = (t, u) -> false;\n-    public static final FailableBiPredicate TRUE = (t, u) -> true;\n+    public static final FailableBiPredicate FALSE = (p0, p1) -> false;\n+    public static final FailableBiPredicate TRUE = (p0, p1) -> true;\n     \n     default <T, U, E extends Throwable> FailableBiPredicate<T, U, E> falsePredicate() {\n         return FailableBiPredicate.FALSE;\n     }\n     \n     default <T, U, E extends Throwable> FailableBiPredicate<T, U, E> truePredicate() {\n         return FailableBiPredicate.TRUE;\n     }\n     \n-    default FailableBiPredicate<T, U, E> and(final FailableBiPredicate<? super T, ? super U, E> other) {\n-        Objects.requireNonNull(other);\n-        return (t, u) -> this.test(t, u) && other.test(t, u);\n+    default FailableBiPredicate<T, U, E> and(final FailableBiPredicate<? super T, ? super U, E> obj) {\n+        Objects.requireNonNull(obj);\n+        return (o, o2) -> this.test(o, o2) && failableBiPredicate.test(o, o2);\n     }\n     \n     default FailableBiPredicate<T, U, E> negate() {\n-        return (t, u) -> !this.test(t, u);\n+        return (o, o2) -> !this.test(o, o2);\n     }\n     \n-    default FailableBiPredicate<T, U, E> or(final FailableBiPredicate<? super T, ? super U, E> other) {\n-        Objects.requireNonNull(other);\n-        return (t, u) -> this.test(t, u) || other.test(t, u);\n+    default FailableBiPredicate<T, U, E> or(final FailableBiPredicate<? super T, ? super U, E> obj) {\n+        Objects.requireNonNull(obj);\n+        return (o, o2) -> this.test(o, o2) || failableBiPredicate.test(o, o2);\n     }\n     \n     boolean test(final T p0, final U p1) throws E, Throwable;\n }\n"}]}
