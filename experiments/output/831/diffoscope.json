{"diffoscope-json-version": 1, "source1": "first/CodeHTML.class", "source2": "second/CodeHTML.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,24 +29,33 @@\n     private final ConstantPool constantPool;\n     private final ConstantHTML constantHtml;\n     \n     CodeHTML(final String dir, final String className, final Method[] methods, final ConstantPool constantPool, final ConstantHTML constantHtml, final Charset charset) throws IOException {\n         this.className = className;\n         this.constantPool = constantPool;\n         this.constantHtml = constantHtml;\n-        try (final PrintWriter newPrintWriter = new PrintWriter(dir + className + \"_code.html\", charset.name())) {\n+        final PrintWriter newPrintWriter = new PrintWriter(dir + className + \"_code.html\", charset.name());\n+        Throwable x0 = null;\n+        try {\n             (this.printWriter = newPrintWriter).print(\"<HTML><head><meta charset=\\\"\");\n             this.printWriter.print(charset.name());\n             this.printWriter.println(\"\\\"></head>\");\n             this.printWriter.println(\"<BODY BGCOLOR=\\\"#C0C0C0\\\">\");\n             for (int i = 0; i < methods.length; ++i) {\n                 this.writeMethod(methods[i], i);\n             }\n             this.printWriter.println(\"</BODY></HTML>\");\n         }\n+        catch (final Throwable t) {\n+            x0 = t;\n+            throw t;\n+        }\n+        finally {\n+            $closeResource(x0, newPrintWriter);\n+        }\n     }\n     \n     private String codeToHTML(final ByteSequence bytes, final int methodNumber) throws IOException {\n         final short opcode = (short)bytes.readUnsignedByte();\n         int defaultOffset = 0;\n         int noPadBytes = 0;\n         final StringBuilder buf = new StringBuilder(256);\n@@ -427,15 +436,17 @@\n                     }\n                     this.printWriter.print(\"</UL>\");\n                 }\n             }\n             this.printWriter.println(\"</UL>\");\n         }\n         if (code != null) {\n-            try (final ByteSequence stream = new ByteSequence(code)) {\n+            final ByteSequence stream = new ByteSequence(code);\n+            Throwable x0 = null;\n+            try {\n                 stream.mark(stream.available());\n                 this.findGotos(stream, c);\n                 stream.reset();\n                 this.printWriter.println(\"<TABLE BORDER=0><TR><TH ALIGN=LEFT>Byte<BR>offset</TH><TH ALIGN=LEFT>Instruction</TH><TH ALIGN=LEFT>Argument</TH>\");\n                 while (stream.available() > 0) {\n                     final int offset = stream.getIndex();\n                     final String str = this.codeToHTML(stream, methodNumber);\n@@ -449,12 +460,33 @@\n                     }\n                     else {\n                         anchor2 = \"\" + offset;\n                     }\n                     this.printWriter.println(\"<TR VALIGN=TOP><TD>\" + anchor2 + \"</TD><TD>\" + anchor + str + \"</TR>\");\n                 }\n             }\n+            catch (final Throwable t) {\n+                x0 = t;\n+                throw t;\n+            }\n+            finally {\n+                $closeResource(x0, (AutoCloseable)stream);\n+            }\n             this.printWriter.println(\"<TR><TD> </A></TD></TR>\");\n             this.printWriter.println(\"</TABLE>\");\n         }\n     }\n+    \n+    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n+        if (x0 != null) {\n+            try {\n+                x1.close();\n+            }\n+            catch (final Throwable exception) {\n+                x0.addSuppressed(exception);\n+            }\n+        }\n+        else {\n+            x1.close();\n+        }\n+    }\n }\n"}]}
