{"diffoscope-json-version": 1, "source1": "first/FastFloatMath.class", "source2": "second/FastFloatMath.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,64 +1,64 @@\n-  SHA-256 checksum 9169f3b353da1956d7cd8125a1dfc45bb5e2637afaa8940fa78e47d381b50973\n+  SHA-256 checksum 95217b1719cb966ad2ddfcc33a7d8faa2b709e80a7c4d2a8402858f88f0a2b13\n   Compiled from \"FastFloatMath.java\"\n class com.fasterxml.jackson.core.io.doubleparser.FastFloatMath\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n   this_class: #5                          // com/fasterxml/jackson/core/io/doubleparser/FastFloatMath\n   super_class: #61                        // java/lang/Object\n   interfaces: 0, fields: 7, methods: 6, attributes: 2\n Constant pool:\n-    #1 = Class              #128          // java/lang/Float\n-    #2 = Class              #129          // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n-    #3 = Methodref          #61.#130      // java/lang/Object.\"<init>\":()V\n+    #1 = Class              #127          // java/lang/Float\n+    #2 = Class              #128          // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n+    #3 = Methodref          #61.#129      // java/lang/Object.\"<init>\":()V\n     #4 = Float              -0.0f\n-    #5 = Class              #131          // com/fasterxml/jackson/core/io/doubleparser/FastFloatMath\n-    #6 = Methodref          #5.#132       // com/fasterxml/jackson/core/io/doubleparser/FastFloatMath.tryDecToFloatWithFastAlgorithm:(ZJI)F\n-    #7 = Methodref          #1.#133       // java/lang/Float.isNaN:(F)Z\n+    #5 = Class              #130          // com/fasterxml/jackson/core/io/doubleparser/FastFloatMath\n+    #6 = Methodref          #5.#131       // com/fasterxml/jackson/core/io/doubleparser/FastFloatMath.tryDecToFloatWithFastAlgorithm:(ZJI)F\n+    #7 = Methodref          #1.#132       // java/lang/Float.isNaN:(F)Z\n     #8 = Float              NaNf\n-    #9 = Methodref          #5.#134       // com/fasterxml/jackson/core/io/doubleparser/FastFloatMath.tryHexToFloatWithFastAlgorithm:(ZJI)F\n-   #10 = Methodref          #135.#136     // java/lang/Double.isNaN:(D)Z\n+    #9 = Methodref          #5.#133       // com/fasterxml/jackson/core/io/doubleparser/FastFloatMath.tryHexToFloatWithFastAlgorithm:(ZJI)F\n+   #10 = Methodref          #134.#135     // java/lang/Double.isNaN:(D)Z\n    #11 = Long               16777215l\n-   #13 = Methodref          #137.#138     // java/lang/Long.compareUnsigned:(JJ)I\n-   #14 = Fieldref           #5.#139       // com/fasterxml/jackson/core/io/doubleparser/FastFloatMath.FLOAT_POWER_OF_TEN:[F\n-   #15 = Fieldref           #2.#140       // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.MANTISSA_64:[J\n+   #13 = Methodref          #136.#137     // java/lang/Long.compareUnsigned:(JJ)I\n+   #14 = Fieldref           #5.#138       // com/fasterxml/jackson/core/io/doubleparser/FastFloatMath.FLOAT_POWER_OF_TEN:[F\n+   #15 = Fieldref           #2.#139       // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.MANTISSA_64:[J\n    #16 = Long               217706l\n    #18 = Long               127l\n    #20 = Long               64l\n-   #22 = Methodref          #137.#141     // java/lang/Long.numberOfLeadingZeros:(J)I\n-   #23 = Methodref          #2.#142       // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.fullMultiplication:(JJ)Lcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128;\n-   #24 = Fieldref           #113.#143     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128.low:J\n-   #25 = Fieldref           #113.#144     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128.high:J\n+   #22 = Methodref          #136.#140     // java/lang/Long.numberOfLeadingZeros:(J)I\n+   #23 = Methodref          #2.#141       // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.fullMultiplication:(JJ)Lcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128;\n+   #24 = Fieldref           #113.#142     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128.low:J\n+   #25 = Fieldref           #113.#143     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128.high:J\n    #26 = Long               274877906943l\n-   #28 = Fieldref           #2.#145       // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.MANTISSA_128:[J\n+   #28 = Fieldref           #2.#144       // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.MANTISSA_128:[J\n    #29 = Long               549755813887l\n    #31 = Long               38l\n    #33 = Long               3l\n    #35 = Long               16777216l\n    #37 = Long               8388608l\n    #39 = Long               -8388609l\n    #41 = Long               254l\n    #43 = Long               2147483648l\n-   #45 = Methodref          #1.#146       // java/lang/Float.intBitsToFloat:(I)F\n+   #45 = Methodref          #1.#145       // java/lang/Float.intBitsToFloat:(I)F\n    #46 = Float              -Infinityf\n    #47 = Float              Infinityf\n    #48 = Long               9007199254740991l\n-   #50 = Methodref          #147.#148     // java/lang/Math.scalb:(FI)F\n+   #50 = Methodref          #146.#147     // java/lang/Math.scalb:(FI)F\n    #51 = Float              10.0f\n    #52 = Float              100.0f\n    #53 = Float              1000.0f\n    #54 = Float              10000.0f\n    #55 = Float              100000.0f\n    #56 = Float              1000000.0f\n    #57 = Float              1.0E7f\n    #58 = Float              1.0E8f\n    #59 = Float              1.0E9f\n    #60 = Float              1.0E10f\n-   #61 = Class              #149          // java/lang/Object\n+   #61 = Class              #148          // java/lang/Object\n    #62 = Utf8               FLOAT_EXPONENT_BIAS\n    #63 = Utf8               I\n    #64 = Utf8               ConstantValue\n    #65 = Integer            127\n    #66 = Utf8               FLOAT_SIGNIFICAND_WIDTH\n    #67 = Integer            24\n    #68 = Utf8               FLOAT_MIN_EXPONENT_POWER_OF_TEN\n@@ -102,73 +102,72 @@\n   #106 = Utf8               product_high\n   #107 = Utf8               product_middle\n   #108 = Utf8               digits\n   #109 = Utf8               power\n   #110 = Utf8               factorMantissa\n   #111 = Utf8               lz\n   #112 = Utf8               product\n-  #113 = Class              #150          // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128\n+  #113 = Class              #149          // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128\n   #114 = Utf8               UInt128\n   #115 = Utf8               InnerClasses\n   #116 = Utf8               Lcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128;\n   #117 = Utf8               lower\n   #118 = Utf8               upper\n   #119 = Utf8               upperbit\n   #120 = Utf8               mantissa\n   #121 = Utf8               real_exponent\n   #122 = Utf8               bits\n-  #123 = Class              #150          // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128\n-  #124 = Utf8               tryHexToFloatWithFastAlgorithm\n-  #125 = Utf8               <clinit>\n-  #126 = Utf8               SourceFile\n-  #127 = Utf8               FastFloatMath.java\n-  #128 = Utf8               java/lang/Float\n-  #129 = Utf8               com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n-  #130 = NameAndType        #77:#78       // \"<init>\":()V\n-  #131 = Utf8               com/fasterxml/jackson/core/io/doubleparser/FastFloatMath\n-  #132 = NameAndType        #99:#100      // tryDecToFloatWithFastAlgorithm:(ZJI)F\n-  #133 = NameAndType        #151:#152     // isNaN:(F)Z\n-  #134 = NameAndType        #124:#100     // tryHexToFloatWithFastAlgorithm:(ZJI)F\n-  #135 = Class              #153          // java/lang/Double\n-  #136 = NameAndType        #151:#154     // isNaN:(D)Z\n-  #137 = Class              #155          // java/lang/Long\n-  #138 = NameAndType        #156:#157     // compareUnsigned:(JJ)I\n-  #139 = NameAndType        #75:#76       // FLOAT_POWER_OF_TEN:[F\n-  #140 = NameAndType        #158:#159     // MANTISSA_64:[J\n-  #141 = NameAndType        #160:#161     // numberOfLeadingZeros:(J)I\n-  #142 = NameAndType        #162:#163     // fullMultiplication:(JJ)Lcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128;\n-  #143 = NameAndType        #164:#93      // low:J\n-  #144 = NameAndType        #165:#93      // high:J\n-  #145 = NameAndType        #166:#159     // MANTISSA_128:[J\n-  #146 = NameAndType        #167:#168     // intBitsToFloat:(I)F\n-  #147 = Class              #169          // java/lang/Math\n-  #148 = NameAndType        #170:#171     // scalb:(FI)F\n-  #149 = Utf8               java/lang/Object\n-  #150 = Utf8               com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128\n-  #151 = Utf8               isNaN\n-  #152 = Utf8               (F)Z\n-  #153 = Utf8               java/lang/Double\n-  #154 = Utf8               (D)Z\n-  #155 = Utf8               java/lang/Long\n-  #156 = Utf8               compareUnsigned\n-  #157 = Utf8               (JJ)I\n-  #158 = Utf8               MANTISSA_64\n-  #159 = Utf8               [J\n-  #160 = Utf8               numberOfLeadingZeros\n-  #161 = Utf8               (J)I\n-  #162 = Utf8               fullMultiplication\n-  #163 = Utf8               (JJ)Lcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128;\n-  #164 = Utf8               low\n-  #165 = Utf8               high\n-  #166 = Utf8               MANTISSA_128\n-  #167 = Utf8               intBitsToFloat\n-  #168 = Utf8               (I)F\n-  #169 = Utf8               java/lang/Math\n-  #170 = Utf8               scalb\n-  #171 = Utf8               (FI)F\n+  #123 = Utf8               tryHexToFloatWithFastAlgorithm\n+  #124 = Utf8               <clinit>\n+  #125 = Utf8               SourceFile\n+  #126 = Utf8               FastFloatMath.java\n+  #127 = Utf8               java/lang/Float\n+  #128 = Utf8               com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n+  #129 = NameAndType        #77:#78       // \"<init>\":()V\n+  #130 = Utf8               com/fasterxml/jackson/core/io/doubleparser/FastFloatMath\n+  #131 = NameAndType        #99:#100      // tryDecToFloatWithFastAlgorithm:(ZJI)F\n+  #132 = NameAndType        #150:#151     // isNaN:(F)Z\n+  #133 = NameAndType        #123:#100     // tryHexToFloatWithFastAlgorithm:(ZJI)F\n+  #134 = Class              #152          // java/lang/Double\n+  #135 = NameAndType        #150:#153     // isNaN:(D)Z\n+  #136 = Class              #154          // java/lang/Long\n+  #137 = NameAndType        #155:#156     // compareUnsigned:(JJ)I\n+  #138 = NameAndType        #75:#76       // FLOAT_POWER_OF_TEN:[F\n+  #139 = NameAndType        #157:#158     // MANTISSA_64:[J\n+  #140 = NameAndType        #159:#160     // numberOfLeadingZeros:(J)I\n+  #141 = NameAndType        #161:#162     // fullMultiplication:(JJ)Lcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128;\n+  #142 = NameAndType        #163:#93      // low:J\n+  #143 = NameAndType        #164:#93      // high:J\n+  #144 = NameAndType        #165:#158     // MANTISSA_128:[J\n+  #145 = NameAndType        #166:#167     // intBitsToFloat:(I)F\n+  #146 = Class              #168          // java/lang/Math\n+  #147 = NameAndType        #169:#170     // scalb:(FI)F\n+  #148 = Utf8               java/lang/Object\n+  #149 = Utf8               com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128\n+  #150 = Utf8               isNaN\n+  #151 = Utf8               (F)Z\n+  #152 = Utf8               java/lang/Double\n+  #153 = Utf8               (D)Z\n+  #154 = Utf8               java/lang/Long\n+  #155 = Utf8               compareUnsigned\n+  #156 = Utf8               (JJ)I\n+  #157 = Utf8               MANTISSA_64\n+  #158 = Utf8               [J\n+  #159 = Utf8               numberOfLeadingZeros\n+  #160 = Utf8               (J)I\n+  #161 = Utf8               fullMultiplication\n+  #162 = Utf8               (JJ)Lcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128;\n+  #163 = Utf8               low\n+  #164 = Utf8               high\n+  #165 = Utf8               MANTISSA_128\n+  #166 = Utf8               intBitsToFloat\n+  #167 = Utf8               (I)F\n+  #168 = Utf8               java/lang/Math\n+  #169 = Utf8               scalb\n+  #170 = Utf8               (FI)F\n {\n   private static final int FLOAT_EXPONENT_BIAS = 127;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 127\n \n   private static final int FLOAT_SIGNIFICAND_WIDTH = 24;\n@@ -689,14 +688,15 @@\n         line 288: 351\n         line 289: 356\n         line 292: 359\n         line 295: 367\n         line 297: 375\n         line 298: 391\n         line 301: 394\n+        line 302: 402\n         line 303: 417\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n            26      41     4     d   F\n           166      97    14 factor_mantissa_low   J\n           181      82    16 product_low   J\n           188      75    18 product_middle2   J\n"}]}
