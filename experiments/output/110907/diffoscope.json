{"diffoscope-json-version": 1, "source1": "first/BufferRecyclers.class", "source2": "second/BufferRecyclers.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,14 +6,24 @@\n \n public class BufferRecyclers\n {\n     public static final String SYSTEM_PROPERTY_TRACK_REUSABLE_BUFFERS = \"com.fasterxml.jackson.core.util.BufferRecyclers.trackReusableBuffers\";\n     private static final ThreadLocalBufferManager _bufferRecyclerTracker;\n     protected static final ThreadLocal<SoftReference<BufferRecycler>> _recyclerRef;\n     \n+    static {\n+        boolean trackReusableBuffers = false;\n+        try {\n+            trackReusableBuffers = \"true\".equals(System.getProperty(\"com.fasterxml.jackson.core.util.BufferRecyclers.trackReusableBuffers\"));\n+        }\n+        catch (final SecurityException ex) {}\n+        _bufferRecyclerTracker = (trackReusableBuffers ? ThreadLocalBufferManager.instance() : null);\n+        _recyclerRef = new ThreadLocal<SoftReference<BufferRecycler>>();\n+    }\n+    \n     public static BufferRecycler getBufferRecycler() {\n         SoftReference<BufferRecycler> ref = (SoftReference<BufferRecycler>)BufferRecyclers._recyclerRef.get();\n         BufferRecycler br = (ref == null) ? null : ((BufferRecycler)ref.get());\n         if (br == null) {\n             br = new BufferRecycler();\n             if (BufferRecyclers._bufferRecyclerTracker != null) {\n                 ref = BufferRecyclers._bufferRecyclerTracker.wrapAndTrack(br);\n@@ -53,18 +63,8 @@\n         JsonStringEncoder.getInstance().quoteAsString(input, output);\n     }\n     \n     @Deprecated\n     public static byte[] quoteAsJsonUTF8(final String rawText) {\n         return JsonStringEncoder.getInstance().quoteAsUTF8(rawText);\n     }\n-    \n-    static {\n-        boolean trackReusableBuffers = false;\n-        try {\n-            trackReusableBuffers = \"true\".equals(System.getProperty(\"com.fasterxml.jackson.core.util.BufferRecyclers.trackReusableBuffers\"));\n-        }\n-        catch (final SecurityException ex) {}\n-        _bufferRecyclerTracker = (trackReusableBuffers ? ThreadLocalBufferManager.instance() : null);\n-        _recyclerRef = new ThreadLocal<SoftReference<BufferRecycler>>();\n-    }\n }\n"}]}
