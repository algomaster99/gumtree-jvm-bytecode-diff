{"diffoscope-json-version": 1, "source1": "first/AuthenticatingIMAPClient.class", "source2": "second/AuthenticatingIMAPClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,98 +13,98 @@\n \n public class AuthenticatingIMAPClient extends IMAPSClient\n {\n     public AuthenticatingIMAPClient() {\n         this(\"TLS\", false);\n     }\n     \n-    public AuthenticatingIMAPClient(final boolean implicit) {\n-        this(\"TLS\", implicit);\n+    public AuthenticatingIMAPClient(final boolean b) {\n+        this(\"TLS\", b);\n     }\n     \n-    public AuthenticatingIMAPClient(final boolean implicit, final SSLContext ctx) {\n-        this(\"TLS\", implicit, ctx);\n+    public AuthenticatingIMAPClient(final boolean b, final SSLContext sslContext) {\n+        this(\"TLS\", b, sslContext);\n     }\n     \n-    public AuthenticatingIMAPClient(final SSLContext context) {\n-        this(false, context);\n+    public AuthenticatingIMAPClient(final SSLContext sslContext) {\n+        this(false, sslContext);\n     }\n     \n-    public AuthenticatingIMAPClient(final String proto) {\n-        this(proto, false);\n+    public AuthenticatingIMAPClient(final String s) {\n+        this(s, false);\n     }\n     \n-    public AuthenticatingIMAPClient(final String proto, final boolean implicit) {\n-        this(proto, implicit, null);\n+    public AuthenticatingIMAPClient(final String s, final boolean b) {\n+        this(s, b, null);\n     }\n     \n-    public AuthenticatingIMAPClient(final String proto, final boolean implicit, final SSLContext ctx) {\n-        super(proto, implicit, ctx);\n+    public AuthenticatingIMAPClient(final String s, final boolean b, final SSLContext sslContext) {\n+        super(s, b, sslContext);\n     }\n     \n-    public boolean auth(final AuthenticatingIMAPClient.AUTH_METHOD method, final String username, final String password) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {\n-        if (!IMAPReply.isContinuation(this.sendCommand(IMAPCommand.AUTHENTICATE, method.getAuthName()))) {\n+    public boolean auth(final AuthenticatingIMAPClient.AUTH_METHOD auth_METHOD, final String str, final String str2) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {\n+        if (!IMAPReply.isContinuation(this.sendCommand(IMAPCommand.AUTHENTICATE, auth_METHOD.getAuthName()))) {\n             return false;\n         }\n-        switch (AuthenticatingIMAPClient.AuthenticatingIMAPClient$1.$SwitchMap$org$apache$commons$net$imap$AuthenticatingIMAPClient$AUTH_METHOD[method.ordinal()]) {\n+        switch (AuthenticatingIMAPClient.AuthenticatingIMAPClient$1.$SwitchMap$org$apache$commons$net$imap$AuthenticatingIMAPClient$AUTH_METHOD[auth_METHOD.ordinal()]) {\n             case 1: {\n-                final int result = this.sendData(Base64.encodeBase64StringUnChunked((\"\\u0000\" + username + \"\\u0000\" + password).getBytes(this.getCharset())));\n-                if (result == 0) {\n+                final int sendData = this.sendData(Base64.encodeBase64StringUnChunked((\"\\u0000\" + str + \"\\u0000\" + str2).getBytes(this.getCharset())));\n+                if (sendData == 0) {\n                     this.setState(IMAP.IMAPState.AUTH_STATE);\n                 }\n-                return result == 0;\n+                return sendData == 0;\n             }\n             case 2: {\n-                final byte[] serverChallenge = Base64.decodeBase64(this.getReplyString().substring(2).trim());\n-                final Mac hmac_md5 = Mac.getInstance(\"HmacMD5\");\n-                hmac_md5.init(new SecretKeySpec(password.getBytes(this.getCharset()), \"HmacMD5\"));\n-                final byte[] hmacResult = this.convertToHexString(hmac_md5.doFinal(serverChallenge)).getBytes(this.getCharset());\n-                final byte[] usernameBytes = username.getBytes(this.getCharset());\n-                final byte[] toEncode = new byte[usernameBytes.length + 1 + hmacResult.length];\n-                System.arraycopy(usernameBytes, 0, toEncode, 0, usernameBytes.length);\n-                toEncode[usernameBytes.length] = 32;\n-                System.arraycopy(hmacResult, 0, toEncode, usernameBytes.length + 1, hmacResult.length);\n-                final int result2 = this.sendData(Base64.encodeBase64StringUnChunked(toEncode));\n-                if (result2 == 0) {\n+                final byte[] decodeBase64 = Base64.decodeBase64(this.getReplyString().substring(2).trim());\n+                final Mac instance = Mac.getInstance(\"HmacMD5\");\n+                instance.init(new SecretKeySpec(str2.getBytes(this.getCharset()), \"HmacMD5\"));\n+                final byte[] bytes = this.convertToHexString(instance.doFinal(decodeBase64)).getBytes(this.getCharset());\n+                final byte[] bytes2 = str.getBytes(this.getCharset());\n+                final byte[] array = new byte[bytes2.length + 1 + bytes.length];\n+                System.arraycopy(bytes2, 0, array, 0, bytes2.length);\n+                array[bytes2.length] = 32;\n+                System.arraycopy(bytes, 0, array, bytes2.length + 1, bytes.length);\n+                final int sendData2 = this.sendData(Base64.encodeBase64StringUnChunked(array));\n+                if (sendData2 == 0) {\n                     this.setState(IMAP.IMAPState.AUTH_STATE);\n                 }\n-                return result2 == 0;\n+                return sendData2 == 0;\n             }\n             case 3: {\n-                if (this.sendData(Base64.encodeBase64StringUnChunked(username.getBytes(this.getCharset()))) != 3) {\n+                if (this.sendData(Base64.encodeBase64StringUnChunked(str.getBytes(this.getCharset()))) != 3) {\n                     return false;\n                 }\n-                final int result = this.sendData(Base64.encodeBase64StringUnChunked(password.getBytes(this.getCharset())));\n-                if (result == 0) {\n+                final int sendData3 = this.sendData(Base64.encodeBase64StringUnChunked(str2.getBytes(this.getCharset())));\n+                if (sendData3 == 0) {\n                     this.setState(IMAP.IMAPState.AUTH_STATE);\n                 }\n-                return result == 0;\n+                return sendData3 == 0;\n             }\n             case 4:\n             case 5: {\n-                final int result = this.sendData(username);\n-                if (result == 0) {\n+                final int sendData4 = this.sendData(str);\n+                if (sendData4 == 0) {\n                     this.setState(IMAP.IMAPState.AUTH_STATE);\n                 }\n-                return result == 0;\n+                return sendData4 == 0;\n             }\n             default: {\n                 return false;\n             }\n         }\n     }\n     \n-    public boolean authenticate(final AuthenticatingIMAPClient.AUTH_METHOD method, final String username, final String password) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {\n-        return this.auth(method, username, password);\n+    public boolean authenticate(final AuthenticatingIMAPClient.AUTH_METHOD auth_METHOD, final String s, final String s2) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {\n+        return this.auth(auth_METHOD, s, s2);\n     }\n     \n-    private String convertToHexString(final byte[] a) {\n-        final StringBuilder result = new StringBuilder(a.length * 2);\n-        for (final byte element : a) {\n-            if ((element & 0xFF) <= 15) {\n-                result.append(\"0\");\n+    private String convertToHexString(final byte[] array) {\n+        final StringBuilder sb = new StringBuilder(array.length * 2);\n+        for (final byte b : array) {\n+            if ((b & 0xFF) <= 15) {\n+                sb.append(\"0\");\n             }\n-            result.append(Integer.toHexString(element & 0xFF));\n+            sb.append(Integer.toHexString(b & 0xFF));\n         }\n-        return result.toString();\n+        return sb.toString();\n     }\n }\n"}]}
