{"diffoscope-json-version": 1, "source1": "first/Segment.class", "source2": "second/Segment.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,15 +14,14 @@\n import java.io.OutputStream;\n import java.io.DataOutputStream;\n import java.io.ByteArrayOutputStream;\n import org.apache.commons.compress.harmony.pack200.Pack200Exception;\n import java.io.IOException;\n import java.util.Set;\n import java.util.function.Consumer;\n-import java.util.Objects;\n import java.util.HashSet;\n import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;\n import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;\n import java.util.Iterator;\n import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;\n import org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute;\n import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod;\n@@ -88,18 +87,18 @@\n                 for (int index = 0; index < fullName.length(); ++index) {\n                     if (fullName.charAt(index) <= '$') {\n                         firstDollar = index;\n                     }\n                 }\n                 String fileName = null;\n                 if (firstDollar > -1 && i <= firstDollar) {\n-                    fileName = fullName.substring(i, firstDollar) + \".java\";\n+                    fileName = String.valueOf(fullName.substring(i, firstDollar)) + \".java\";\n                 }\n                 else {\n-                    fileName = fullName.substring(i) + \".java\";\n+                    fileName = String.valueOf(fullName.substring(i)) + \".java\";\n                 }\n                 sourceFileAttribute = new SourceFileAttribute(this.cpBands.cpUTF8Value(fileName, false));\n                 classFile.attributes = new Attribute[] { (Attribute)cp.add((ClassFileEntry)sourceFileAttribute) };\n             }\n             else {\n                 classFile.attributes = new Attribute[0];\n             }\n@@ -225,18 +224,15 @@\n             if (isInResult.add(element)) {\n                 result.add(element);\n             }\n             else {\n                 duplicates.add(element);\n             }\n         }\n-        final List<IcTuple> list = duplicates;\n-        final List<IcTuple> obj = result;\n-        Objects.requireNonNull((ArrayList)obj);\n-        list.forEach(obj::remove);\n+        duplicates.forEach(result::remove);\n         return result;\n     }\n     \n     private void readSegment(final InputStream in) throws IOException, Pack200Exception {\n         this.log(2, \"-------\");\n         (this.cpBands = new CpBands(this)).read(in);\n         (this.attrDefinitionBands = new AttrDefinitionBands(this)).read(in);\n@@ -266,15 +262,15 @@\n         final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         final DataOutputStream dos = new DataOutputStream(bos);\n         for (int i = 0; i < numberOfFiles; ++i) {\n             String name = fileName[i];\n             final boolean nameIsEmpty = name == null || name.equals(\"\");\n             final boolean isClass = (fileOptions[i] & 0x2) == 0x2 || nameIsEmpty;\n             if (isClass && nameIsEmpty) {\n-                name = this.cpBands.getCpClass()[this.classBands.getClassThisInts()[classNum]] + \".class\";\n+                name = String.valueOf(this.cpBands.getCpClass()[this.classBands.getClassThisInts()[classNum]]) + \".class\";\n                 fileName[i] = name;\n             }\n             if (!this.overrideDeflateHint) {\n                 this.fileDeflate[i] = ((fileOptions[i] & 0x1) == 0x1 || options.shouldDeflate());\n             }\n             else {\n                 this.fileDeflate[i] = this.deflateHint;\n"}]}
