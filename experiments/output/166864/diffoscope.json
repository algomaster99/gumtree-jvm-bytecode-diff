{"diffoscope-json-version": 1, "source1": "first/CSVRecord.class", "source2": "second/CSVRecord.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,290 +1,284 @@\n-  SHA-256 checksum 6ab1f3f85b072d93d540a8abf2852e26aab4039e3de89e4a9aca47d0e9db1d99\n+  SHA-256 checksum b7b0fd604df5b6bb15ce08e1c0bb14a6f6d933aff8e2903ec601cb86e51fe04a\n   Compiled from \"CSVRecord.java\"\n public final class org.apache.commons.csv.CSVRecord extends java.lang.Object implements java.io.Serializable, java.lang.Iterable<java.lang.String>\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n-  this_class: #53                         // org/apache/commons/csv/CSVRecord\n+  this_class: #54                         // org/apache/commons/csv/CSVRecord\n   super_class: #18                        // java/lang/Object\n   interfaces: 2, fields: 6, methods: 23, attributes: 4\n Constant pool:\n-    #1 = Methodref          #18.#151      // java/lang/Object.\"<init>\":()V\n-    #2 = Fieldref           #53.#152      // org/apache/commons/csv/CSVRecord.recordNumber:J\n-    #3 = Fieldref           #153.#154     // org/apache/commons/csv/Constants.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-    #4 = Fieldref           #53.#155      // org/apache/commons/csv/CSVRecord.values:[Ljava/lang/String;\n-    #5 = Fieldref           #53.#156      // org/apache/commons/csv/CSVRecord.parser:Lorg/apache/commons/csv/CSVParser;\n-    #6 = Fieldref           #53.#157      // org/apache/commons/csv/CSVRecord.comment:Ljava/lang/String;\n-    #7 = Fieldref           #53.#158      // org/apache/commons/csv/CSVRecord.characterPosition:J\n-    #8 = Methodref          #159.#160     // java/util/Objects.toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n-    #9 = Methodref          #53.#161      // org/apache/commons/csv/CSVRecord.get:(Ljava/lang/String;)Ljava/lang/String;\n-   #10 = Methodref          #53.#162      // org/apache/commons/csv/CSVRecord.getHeaderMapRaw:()Ljava/util/Map;\n-   #11 = Class              #163          // java/lang/IllegalStateException\n-   #12 = String             #164          // No header mapping was specified, the record values can\\'t be accessed by name\n-   #13 = Methodref          #11.#165      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #14 = InterfaceMethodref #166.#167     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #15 = Class              #168          // java/lang/Integer\n-   #16 = Class              #169          // java/lang/IllegalArgumentException\n-   #17 = String             #170          // Mapping for %s not found, expected one of %s\n-   #18 = Class              #171          // java/lang/Object\n-   #19 = InterfaceMethodref #166.#172     // java/util/Map.keySet:()Ljava/util/Set;\n-   #20 = Methodref          #173.#174     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-   #21 = Methodref          #16.#165      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #22 = Methodref          #15.#175      // java/lang/Integer.intValue:()I\n-   #23 = Class              #176          // java/lang/ArrayIndexOutOfBoundsException\n-   #24 = String             #177          // Index for header \\'%s\\' is %d but CSVRecord only has %d values!\n-   #25 = Methodref          #15.#178      // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #26 = Methodref          #179.#162     // org/apache/commons/csv/CSVParser.getHeaderMapRaw:()Ljava/util/Map;\n-   #27 = InterfaceMethodref #166.#180     // java/util/Map.size:()I\n-   #28 = InterfaceMethodref #166.#181     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-   #29 = Methodref          #53.#182      // org/apache/commons/csv/CSVRecord.isMapped:(Ljava/lang/String;)Z\n-   #30 = Methodref          #53.#183      // org/apache/commons/csv/CSVRecord.toList:()Ljava/util/List;\n-   #31 = InterfaceMethodref #184.#185     // java/util/List.iterator:()Ljava/util/Iterator;\n-   #32 = InterfaceMethodref #166.#186     // java/util/Map.entrySet:()Ljava/util/Set;\n-   #33 = InvokeDynamic      #0:#192       // #0:accept:(Lorg/apache/commons/csv/CSVRecord;Ljava/util/Map;)Ljava/util/function/Consumer;\n-   #34 = InterfaceMethodref #193.#194     // java/util/Set.forEach:(Ljava/util/function/Consumer;)V\n-   #35 = InterfaceMethodref #195.#196     // java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;\n-   #36 = Methodref          #197.#198     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-   #37 = Class              #199          // java/util/LinkedHashMap\n-   #38 = Methodref          #37.#200      // java/util/LinkedHashMap.\"<init>\":(I)V\n-   #39 = Methodref          #53.#201      // org/apache/commons/csv/CSVRecord.putIn:(Ljava/util/Map;)Ljava/util/Map;\n-   #40 = Class              #202          // java/lang/StringBuilder\n-   #41 = Methodref          #40.#151      // java/lang/StringBuilder.\"<init>\":()V\n-   #42 = String             #203          // CSVRecord [comment=\\'\n-   #43 = Methodref          #40.#204      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #44 = String             #205          // \\', recordNumber=\n-   #45 = Methodref          #40.#206      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #46 = String             #207          // , values=\n-   #47 = Methodref          #197.#208     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n-   #48 = String             #209          // ]\n-   #49 = Methodref          #40.#210      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #50 = InterfaceMethodref #141.#211     // java/util/Map$Entry.getValue:()Ljava/lang/Object;\n-   #51 = InterfaceMethodref #141.#212     // java/util/Map$Entry.getKey:()Ljava/lang/Object;\n-   #52 = InterfaceMethodref #166.#213     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #53 = Class              #214          // org/apache/commons/csv/CSVRecord\n-   #54 = Class              #215          // java/io/Serializable\n-   #55 = Class              #216          // java/lang/Iterable\n-   #56 = Utf8               serialVersionUID\n-   #57 = Utf8               J\n-   #58 = Utf8               ConstantValue\n-   #59 = Long               1l\n-   #61 = Utf8               characterPosition\n-   #62 = Utf8               comment\n-   #63 = Utf8               Ljava/lang/String;\n-   #64 = Utf8               recordNumber\n-   #65 = Utf8               values\n-   #66 = Utf8               [Ljava/lang/String;\n-   #67 = Utf8               parser\n-   #68 = Utf8               Lorg/apache/commons/csv/CSVParser;\n-   #69 = Utf8               <init>\n-   #70 = Utf8               (Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n-   #71 = Utf8               Code\n-   #72 = Utf8               LineNumberTable\n-   #73 = Utf8               LocalVariableTable\n-   #74 = Utf8               this\n-   #75 = Utf8               Lorg/apache/commons/csv/CSVRecord;\n-   #76 = Utf8               StackMapTable\n-   #77 = Class              #214          // org/apache/commons/csv/CSVRecord\n-   #78 = Class              #217          // org/apache/commons/csv/CSVParser\n-   #79 = Class              #66           // \"[Ljava/lang/String;\"\n-   #80 = Class              #218          // java/lang/String\n-   #81 = Utf8               get\n-   #82 = Utf8               (Ljava/lang/Enum;)Ljava/lang/String;\n-   #83 = Utf8               e\n-   #84 = Utf8               Ljava/lang/Enum;\n-   #85 = Utf8               LocalVariableTypeTable\n-   #86 = Utf8               Ljava/lang/Enum<*>;\n-   #87 = Utf8               Signature\n-   #88 = Utf8               (Ljava/lang/Enum<*>;)Ljava/lang/String;\n-   #89 = Utf8               (I)Ljava/lang/String;\n-   #90 = Utf8               i\n-   #91 = Utf8               I\n-   #92 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-   #93 = Utf8               Ljava/lang/ArrayIndexOutOfBoundsException;\n-   #94 = Utf8               name\n-   #95 = Utf8               headerMap\n-   #96 = Utf8               Ljava/util/Map;\n-   #97 = Utf8               index\n-   #98 = Utf8               Ljava/lang/Integer;\n-   #99 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n-  #100 = Class              #219          // java/util/Map\n-  #101 = Class              #168          // java/lang/Integer\n-  #102 = Class              #176          // java/lang/ArrayIndexOutOfBoundsException\n-  #103 = Utf8               getCharacterPosition\n-  #104 = Utf8               ()J\n-  #105 = Utf8               getComment\n-  #106 = Utf8               ()Ljava/lang/String;\n-  #107 = Utf8               getHeaderMapRaw\n-  #108 = Utf8               ()Ljava/util/Map;\n-  #109 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n-  #110 = Utf8               getParser\n-  #111 = Utf8               ()Lorg/apache/commons/csv/CSVParser;\n-  #112 = Utf8               getRecordNumber\n-  #113 = Utf8               hasComment\n-  #114 = Utf8               ()Z\n-  #115 = Utf8               isConsistent\n-  #116 = Utf8               isMapped\n-  #117 = Utf8               (Ljava/lang/String;)Z\n-  #118 = Utf8               isSet\n-  #119 = Utf8               (I)Z\n-  #120 = Utf8               iterator\n-  #121 = Utf8               ()Ljava/util/Iterator;\n-  #122 = Utf8               ()Ljava/util/Iterator<Ljava/lang/String;>;\n-  #123 = Utf8               putIn\n-  #124 = Utf8               (Ljava/util/Map;)Ljava/util/Map;\n-  #125 = Utf8               map\n-  #126 = Utf8               TM;\n-  #127 = Utf8               <M::Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>(TM;)TM;\n-  #128 = Utf8               size\n-  #129 = Utf8               ()I\n-  #130 = Utf8               stream\n-  #131 = Utf8               ()Ljava/util/stream/Stream;\n-  #132 = Utf8               ()Ljava/util/stream/Stream<Ljava/lang/String;>;\n-  #133 = Utf8               toList\n-  #134 = Utf8               ()Ljava/util/List;\n-  #135 = Utf8               ()Ljava/util/List<Ljava/lang/String;>;\n-  #136 = Utf8               toMap\n-  #137 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #138 = Utf8               toString\n-  #139 = Utf8               ()[Ljava/lang/String;\n-  #140 = Utf8               lambda$putIn$0\n-  #141 = Class              #220          // java/util/Map$Entry\n-  #142 = Utf8               Entry\n-  #143 = Utf8               InnerClasses\n-  #144 = Utf8               (Ljava/util/Map;Ljava/util/Map$Entry;)V\n-  #145 = Utf8               entry\n-  #146 = Utf8               Ljava/util/Map$Entry;\n-  #147 = Utf8               col\n-  #148 = Utf8               Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Iterable<Ljava/lang/String;>;\n-  #149 = Utf8               SourceFile\n-  #150 = Utf8               CSVRecord.java\n-  #151 = NameAndType        #69:#221      // \"<init>\":()V\n-  #152 = NameAndType        #64:#57       // recordNumber:J\n-  #153 = Class              #222          // org/apache/commons/csv/Constants\n-  #154 = NameAndType        #223:#66      // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-  #155 = NameAndType        #65:#66       // values:[Ljava/lang/String;\n-  #156 = NameAndType        #67:#68       // parser:Lorg/apache/commons/csv/CSVParser;\n-  #157 = NameAndType        #62:#63       // comment:Ljava/lang/String;\n-  #158 = NameAndType        #61:#57       // characterPosition:J\n-  #159 = Class              #224          // java/util/Objects\n-  #160 = NameAndType        #138:#225     // toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n-  #161 = NameAndType        #81:#92       // get:(Ljava/lang/String;)Ljava/lang/String;\n-  #162 = NameAndType        #107:#108     // getHeaderMapRaw:()Ljava/util/Map;\n-  #163 = Utf8               java/lang/IllegalStateException\n-  #164 = Utf8               No header mapping was specified, the record values can\\'t be accessed by name\n-  #165 = NameAndType        #69:#226      // \"<init>\":(Ljava/lang/String;)V\n-  #166 = Class              #219          // java/util/Map\n-  #167 = NameAndType        #81:#227      // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #168 = Utf8               java/lang/Integer\n-  #169 = Utf8               java/lang/IllegalArgumentException\n-  #170 = Utf8               Mapping for %s not found, expected one of %s\n-  #171 = Utf8               java/lang/Object\n-  #172 = NameAndType        #228:#229     // keySet:()Ljava/util/Set;\n-  #173 = Class              #218          // java/lang/String\n-  #174 = NameAndType        #230:#231     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #175 = NameAndType        #232:#129     // intValue:()I\n-  #176 = Utf8               java/lang/ArrayIndexOutOfBoundsException\n-  #177 = Utf8               Index for header \\'%s\\' is %d but CSVRecord only has %d values!\n-  #178 = NameAndType        #233:#234     // valueOf:(I)Ljava/lang/Integer;\n-  #179 = Class              #217          // org/apache/commons/csv/CSVParser\n-  #180 = NameAndType        #128:#129     // size:()I\n-  #181 = NameAndType        #235:#236     // containsKey:(Ljava/lang/Object;)Z\n-  #182 = NameAndType        #116:#117     // isMapped:(Ljava/lang/String;)Z\n-  #183 = NameAndType        #133:#134     // toList:()Ljava/util/List;\n-  #184 = Class              #237          // java/util/List\n-  #185 = NameAndType        #120:#121     // iterator:()Ljava/util/Iterator;\n-  #186 = NameAndType        #238:#229     // entrySet:()Ljava/util/Set;\n-  #187 = Utf8               BootstrapMethods\n-  #188 = MethodHandle       6:#239        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #189 = MethodType         #240          //  (Ljava/lang/Object;)V\n-  #190 = MethodHandle       7:#241        // REF_invokeSpecial org/apache/commons/csv/CSVRecord.lambda$putIn$0:(Ljava/util/Map;Ljava/util/Map$Entry;)V\n-  #191 = MethodType         #242          //  (Ljava/util/Map$Entry;)V\n-  #192 = NameAndType        #243:#244     // accept:(Lorg/apache/commons/csv/CSVRecord;Ljava/util/Map;)Ljava/util/function/Consumer;\n-  #193 = Class              #245          // java/util/Set\n-  #194 = NameAndType        #246:#247     // forEach:(Ljava/util/function/Consumer;)V\n-  #195 = Class              #248          // java/util/stream/Stream\n-  #196 = NameAndType        #249:#250     // of:([Ljava/lang/Object;)Ljava/util/stream/Stream;\n-  #197 = Class              #251          // java/util/Arrays\n-  #198 = NameAndType        #252:#253     // asList:([Ljava/lang/Object;)Ljava/util/List;\n-  #199 = Utf8               java/util/LinkedHashMap\n-  #200 = NameAndType        #69:#254      // \"<init>\":(I)V\n-  #201 = NameAndType        #123:#124     // putIn:(Ljava/util/Map;)Ljava/util/Map;\n-  #202 = Utf8               java/lang/StringBuilder\n-  #203 = Utf8               CSVRecord [comment=\\'\n-  #204 = NameAndType        #255:#256     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #205 = Utf8               \\', recordNumber=\n-  #206 = NameAndType        #255:#257     // append:(J)Ljava/lang/StringBuilder;\n-  #207 = Utf8               , values=\n-  #208 = NameAndType        #138:#258     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n-  #209 = Utf8               ]\n-  #210 = NameAndType        #138:#106     // toString:()Ljava/lang/String;\n-  #211 = NameAndType        #259:#260     // getValue:()Ljava/lang/Object;\n-  #212 = NameAndType        #261:#260     // getKey:()Ljava/lang/Object;\n-  #213 = NameAndType        #262:#263     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #214 = Utf8               org/apache/commons/csv/CSVRecord\n-  #215 = Utf8               java/io/Serializable\n-  #216 = Utf8               java/lang/Iterable\n-  #217 = Utf8               org/apache/commons/csv/CSVParser\n-  #218 = Utf8               java/lang/String\n-  #219 = Utf8               java/util/Map\n-  #220 = Utf8               java/util/Map$Entry\n-  #221 = Utf8               ()V\n-  #222 = Utf8               org/apache/commons/csv/Constants\n-  #223 = Utf8               EMPTY_STRING_ARRAY\n-  #224 = Utf8               java/util/Objects\n-  #225 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n-  #226 = Utf8               (Ljava/lang/String;)V\n-  #227 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #228 = Utf8               keySet\n-  #229 = Utf8               ()Ljava/util/Set;\n-  #230 = Utf8               format\n-  #231 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #232 = Utf8               intValue\n-  #233 = Utf8               valueOf\n-  #234 = Utf8               (I)Ljava/lang/Integer;\n-  #235 = Utf8               containsKey\n-  #236 = Utf8               (Ljava/lang/Object;)Z\n-  #237 = Utf8               java/util/List\n-  #238 = Utf8               entrySet\n-  #239 = Methodref          #264.#265     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #240 = Utf8               (Ljava/lang/Object;)V\n-  #241 = Methodref          #53.#266      // org/apache/commons/csv/CSVRecord.lambda$putIn$0:(Ljava/util/Map;Ljava/util/Map$Entry;)V\n-  #242 = Utf8               (Ljava/util/Map$Entry;)V\n-  #243 = Utf8               accept\n-  #244 = Utf8               (Lorg/apache/commons/csv/CSVRecord;Ljava/util/Map;)Ljava/util/function/Consumer;\n-  #245 = Utf8               java/util/Set\n-  #246 = Utf8               forEach\n-  #247 = Utf8               (Ljava/util/function/Consumer;)V\n-  #248 = Utf8               java/util/stream/Stream\n-  #249 = Utf8               of\n-  #250 = Utf8               ([Ljava/lang/Object;)Ljava/util/stream/Stream;\n-  #251 = Utf8               java/util/Arrays\n-  #252 = Utf8               asList\n-  #253 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n-  #254 = Utf8               (I)V\n-  #255 = Utf8               append\n-  #256 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #257 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #258 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n-  #259 = Utf8               getValue\n-  #260 = Utf8               ()Ljava/lang/Object;\n-  #261 = Utf8               getKey\n-  #262 = Utf8               put\n-  #263 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #264 = Class              #267          // java/lang/invoke/LambdaMetafactory\n-  #265 = NameAndType        #268:#271     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #266 = NameAndType        #140:#144     // lambda$putIn$0:(Ljava/util/Map;Ljava/util/Map$Entry;)V\n-  #267 = Utf8               java/lang/invoke/LambdaMetafactory\n-  #268 = Utf8               metafactory\n-  #269 = Class              #273          // java/lang/invoke/MethodHandles$Lookup\n-  #270 = Utf8               Lookup\n-  #271 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #272 = Class              #274          // java/lang/invoke/MethodHandles\n-  #273 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #274 = Utf8               java/lang/invoke/MethodHandles\n+    #1 = Methodref          #18.#148      // java/lang/Object.\"<init>\":()V\n+    #2 = Fieldref           #54.#149      // org/apache/commons/csv/CSVRecord.recordNumber:J\n+    #3 = Fieldref           #150.#151     // org/apache/commons/csv/Constants.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+    #4 = Fieldref           #54.#152      // org/apache/commons/csv/CSVRecord.values:[Ljava/lang/String;\n+    #5 = Fieldref           #54.#153      // org/apache/commons/csv/CSVRecord.parser:Lorg/apache/commons/csv/CSVParser;\n+    #6 = Fieldref           #54.#154      // org/apache/commons/csv/CSVRecord.comment:Ljava/lang/String;\n+    #7 = Fieldref           #54.#155      // org/apache/commons/csv/CSVRecord.characterPosition:J\n+    #8 = Methodref          #156.#157     // java/util/Objects.toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n+    #9 = Methodref          #54.#158      // org/apache/commons/csv/CSVRecord.get:(Ljava/lang/String;)Ljava/lang/String;\n+   #10 = Methodref          #54.#159      // org/apache/commons/csv/CSVRecord.getHeaderMapRaw:()Ljava/util/Map;\n+   #11 = Class              #160          // java/lang/IllegalStateException\n+   #12 = String             #161          // No header mapping was specified, the record values can\\'t be accessed by name\n+   #13 = Methodref          #11.#162      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #14 = InterfaceMethodref #99.#163      // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #15 = Class              #164          // java/lang/Integer\n+   #16 = Class              #165          // java/lang/IllegalArgumentException\n+   #17 = String             #166          // Mapping for %s not found, expected one of %s\n+   #18 = Class              #167          // java/lang/Object\n+   #19 = InterfaceMethodref #99.#168      // java/util/Map.keySet:()Ljava/util/Set;\n+   #20 = Methodref          #52.#169      // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+   #21 = Methodref          #16.#162      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #22 = Methodref          #15.#170      // java/lang/Integer.intValue:()I\n+   #23 = Class              #171          // java/lang/ArrayIndexOutOfBoundsException\n+   #24 = String             #172          // Index for header \\'%s\\' is %d but CSVRecord only has %d values!\n+   #25 = Methodref          #15.#173      // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #26 = Methodref          #78.#159      // org/apache/commons/csv/CSVParser.getHeaderMapRaw:()Ljava/util/Map;\n+   #27 = InterfaceMethodref #99.#174      // java/util/Map.size:()I\n+   #28 = InterfaceMethodref #99.#175      // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+   #29 = Methodref          #54.#176      // org/apache/commons/csv/CSVRecord.isMapped:(Ljava/lang/String;)Z\n+   #30 = Methodref          #54.#177      // org/apache/commons/csv/CSVRecord.toList:()Ljava/util/List;\n+   #31 = InterfaceMethodref #178.#179     // java/util/List.iterator:()Ljava/util/Iterator;\n+   #32 = InterfaceMethodref #99.#180      // java/util/Map.entrySet:()Ljava/util/Set;\n+   #33 = InvokeDynamic      #0:#186       // #0:accept:(Lorg/apache/commons/csv/CSVRecord;Ljava/util/Map;)Ljava/util/function/Consumer;\n+   #34 = InterfaceMethodref #187.#188     // java/util/Set.forEach:(Ljava/util/function/Consumer;)V\n+   #35 = InterfaceMethodref #189.#190     // java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;\n+   #36 = Methodref          #191.#192     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+   #37 = Class              #193          // java/util/LinkedHashMap\n+   #38 = Methodref          #37.#194      // java/util/LinkedHashMap.\"<init>\":(I)V\n+   #39 = Methodref          #54.#195      // org/apache/commons/csv/CSVRecord.putIn:(Ljava/util/Map;)Ljava/util/Map;\n+   #40 = Class              #196          // java/lang/StringBuilder\n+   #41 = Methodref          #40.#148      // java/lang/StringBuilder.\"<init>\":()V\n+   #42 = String             #197          // CSVRecord [comment=\\'\n+   #43 = Methodref          #40.#198      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #44 = String             #199          // \\', recordNumber=\n+   #45 = Methodref          #40.#200      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #46 = String             #201          // , values=\n+   #47 = Methodref          #191.#202     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n+   #48 = String             #203          // ]\n+   #49 = Methodref          #40.#204      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #50 = InterfaceMethodref #138.#205     // java/util/Map$Entry.getValue:()Ljava/lang/Object;\n+   #51 = InterfaceMethodref #138.#206     // java/util/Map$Entry.getKey:()Ljava/lang/Object;\n+   #52 = Class              #207          // java/lang/String\n+   #53 = InterfaceMethodref #99.#208      // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #54 = Class              #209          // org/apache/commons/csv/CSVRecord\n+   #55 = Class              #210          // java/io/Serializable\n+   #56 = Class              #211          // java/lang/Iterable\n+   #57 = Utf8               serialVersionUID\n+   #58 = Utf8               J\n+   #59 = Utf8               ConstantValue\n+   #60 = Long               1l\n+   #62 = Utf8               characterPosition\n+   #63 = Utf8               comment\n+   #64 = Utf8               Ljava/lang/String;\n+   #65 = Utf8               recordNumber\n+   #66 = Utf8               values\n+   #67 = Utf8               [Ljava/lang/String;\n+   #68 = Utf8               parser\n+   #69 = Utf8               Lorg/apache/commons/csv/CSVParser;\n+   #70 = Utf8               <init>\n+   #71 = Utf8               (Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n+   #72 = Utf8               Code\n+   #73 = Utf8               LineNumberTable\n+   #74 = Utf8               LocalVariableTable\n+   #75 = Utf8               this\n+   #76 = Utf8               Lorg/apache/commons/csv/CSVRecord;\n+   #77 = Utf8               StackMapTable\n+   #78 = Class              #212          // org/apache/commons/csv/CSVParser\n+   #79 = Class              #67           // \"[Ljava/lang/String;\"\n+   #80 = Utf8               get\n+   #81 = Utf8               (Ljava/lang/Enum;)Ljava/lang/String;\n+   #82 = Utf8               e\n+   #83 = Utf8               Ljava/lang/Enum;\n+   #84 = Utf8               LocalVariableTypeTable\n+   #85 = Utf8               Ljava/lang/Enum<*>;\n+   #86 = Utf8               Signature\n+   #87 = Utf8               (Ljava/lang/Enum<*>;)Ljava/lang/String;\n+   #88 = Utf8               (I)Ljava/lang/String;\n+   #89 = Utf8               i\n+   #90 = Utf8               I\n+   #91 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+   #92 = Utf8               Ljava/lang/ArrayIndexOutOfBoundsException;\n+   #93 = Utf8               name\n+   #94 = Utf8               headerMap\n+   #95 = Utf8               Ljava/util/Map;\n+   #96 = Utf8               index\n+   #97 = Utf8               Ljava/lang/Integer;\n+   #98 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n+   #99 = Class              #213          // java/util/Map\n+  #100 = Utf8               getCharacterPosition\n+  #101 = Utf8               ()J\n+  #102 = Utf8               getComment\n+  #103 = Utf8               ()Ljava/lang/String;\n+  #104 = Utf8               getHeaderMapRaw\n+  #105 = Utf8               ()Ljava/util/Map;\n+  #106 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n+  #107 = Utf8               getParser\n+  #108 = Utf8               ()Lorg/apache/commons/csv/CSVParser;\n+  #109 = Utf8               getRecordNumber\n+  #110 = Utf8               hasComment\n+  #111 = Utf8               ()Z\n+  #112 = Utf8               isConsistent\n+  #113 = Utf8               isMapped\n+  #114 = Utf8               (Ljava/lang/String;)Z\n+  #115 = Utf8               isSet\n+  #116 = Utf8               (I)Z\n+  #117 = Utf8               iterator\n+  #118 = Utf8               ()Ljava/util/Iterator;\n+  #119 = Utf8               ()Ljava/util/Iterator<Ljava/lang/String;>;\n+  #120 = Utf8               putIn\n+  #121 = Utf8               (Ljava/util/Map;)Ljava/util/Map;\n+  #122 = Utf8               map\n+  #123 = Utf8               TM;\n+  #124 = Utf8               <M::Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>(TM;)TM;\n+  #125 = Utf8               size\n+  #126 = Utf8               ()I\n+  #127 = Utf8               stream\n+  #128 = Utf8               ()Ljava/util/stream/Stream;\n+  #129 = Utf8               ()Ljava/util/stream/Stream<Ljava/lang/String;>;\n+  #130 = Utf8               toList\n+  #131 = Utf8               ()Ljava/util/List;\n+  #132 = Utf8               ()Ljava/util/List<Ljava/lang/String;>;\n+  #133 = Utf8               toMap\n+  #134 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #135 = Utf8               toString\n+  #136 = Utf8               ()[Ljava/lang/String;\n+  #137 = Utf8               lambda$putIn$0\n+  #138 = Class              #214          // java/util/Map$Entry\n+  #139 = Utf8               Entry\n+  #140 = Utf8               InnerClasses\n+  #141 = Utf8               (Ljava/util/Map;Ljava/util/Map$Entry;)V\n+  #142 = Utf8               entry\n+  #143 = Utf8               Ljava/util/Map$Entry;\n+  #144 = Utf8               col\n+  #145 = Utf8               Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Iterable<Ljava/lang/String;>;\n+  #146 = Utf8               SourceFile\n+  #147 = Utf8               CSVRecord.java\n+  #148 = NameAndType        #70:#215      // \"<init>\":()V\n+  #149 = NameAndType        #65:#58       // recordNumber:J\n+  #150 = Class              #216          // org/apache/commons/csv/Constants\n+  #151 = NameAndType        #217:#67      // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+  #152 = NameAndType        #66:#67       // values:[Ljava/lang/String;\n+  #153 = NameAndType        #68:#69       // parser:Lorg/apache/commons/csv/CSVParser;\n+  #154 = NameAndType        #63:#64       // comment:Ljava/lang/String;\n+  #155 = NameAndType        #62:#58       // characterPosition:J\n+  #156 = Class              #218          // java/util/Objects\n+  #157 = NameAndType        #135:#219     // toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n+  #158 = NameAndType        #80:#91       // get:(Ljava/lang/String;)Ljava/lang/String;\n+  #159 = NameAndType        #104:#105     // getHeaderMapRaw:()Ljava/util/Map;\n+  #160 = Utf8               java/lang/IllegalStateException\n+  #161 = Utf8               No header mapping was specified, the record values can\\'t be accessed by name\n+  #162 = NameAndType        #70:#220      // \"<init>\":(Ljava/lang/String;)V\n+  #163 = NameAndType        #80:#221      // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #164 = Utf8               java/lang/Integer\n+  #165 = Utf8               java/lang/IllegalArgumentException\n+  #166 = Utf8               Mapping for %s not found, expected one of %s\n+  #167 = Utf8               java/lang/Object\n+  #168 = NameAndType        #222:#223     // keySet:()Ljava/util/Set;\n+  #169 = NameAndType        #224:#225     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #170 = NameAndType        #226:#126     // intValue:()I\n+  #171 = Utf8               java/lang/ArrayIndexOutOfBoundsException\n+  #172 = Utf8               Index for header \\'%s\\' is %d but CSVRecord only has %d values!\n+  #173 = NameAndType        #227:#228     // valueOf:(I)Ljava/lang/Integer;\n+  #174 = NameAndType        #125:#126     // size:()I\n+  #175 = NameAndType        #229:#230     // containsKey:(Ljava/lang/Object;)Z\n+  #176 = NameAndType        #113:#114     // isMapped:(Ljava/lang/String;)Z\n+  #177 = NameAndType        #130:#131     // toList:()Ljava/util/List;\n+  #178 = Class              #231          // java/util/List\n+  #179 = NameAndType        #117:#118     // iterator:()Ljava/util/Iterator;\n+  #180 = NameAndType        #232:#223     // entrySet:()Ljava/util/Set;\n+  #181 = Utf8               BootstrapMethods\n+  #182 = MethodHandle       6:#233        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #183 = MethodType         #234          //  (Ljava/lang/Object;)V\n+  #184 = MethodHandle       7:#235        // REF_invokeSpecial org/apache/commons/csv/CSVRecord.lambda$putIn$0:(Ljava/util/Map;Ljava/util/Map$Entry;)V\n+  #185 = MethodType         #236          //  (Ljava/util/Map$Entry;)V\n+  #186 = NameAndType        #237:#238     // accept:(Lorg/apache/commons/csv/CSVRecord;Ljava/util/Map;)Ljava/util/function/Consumer;\n+  #187 = Class              #239          // java/util/Set\n+  #188 = NameAndType        #240:#241     // forEach:(Ljava/util/function/Consumer;)V\n+  #189 = Class              #242          // java/util/stream/Stream\n+  #190 = NameAndType        #243:#244     // of:([Ljava/lang/Object;)Ljava/util/stream/Stream;\n+  #191 = Class              #245          // java/util/Arrays\n+  #192 = NameAndType        #246:#247     // asList:([Ljava/lang/Object;)Ljava/util/List;\n+  #193 = Utf8               java/util/LinkedHashMap\n+  #194 = NameAndType        #70:#248      // \"<init>\":(I)V\n+  #195 = NameAndType        #120:#121     // putIn:(Ljava/util/Map;)Ljava/util/Map;\n+  #196 = Utf8               java/lang/StringBuilder\n+  #197 = Utf8               CSVRecord [comment=\\'\n+  #198 = NameAndType        #249:#250     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #199 = Utf8               \\', recordNumber=\n+  #200 = NameAndType        #249:#251     // append:(J)Ljava/lang/StringBuilder;\n+  #201 = Utf8               , values=\n+  #202 = NameAndType        #135:#252     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n+  #203 = Utf8               ]\n+  #204 = NameAndType        #135:#103     // toString:()Ljava/lang/String;\n+  #205 = NameAndType        #253:#254     // getValue:()Ljava/lang/Object;\n+  #206 = NameAndType        #255:#254     // getKey:()Ljava/lang/Object;\n+  #207 = Utf8               java/lang/String\n+  #208 = NameAndType        #256:#257     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #209 = Utf8               org/apache/commons/csv/CSVRecord\n+  #210 = Utf8               java/io/Serializable\n+  #211 = Utf8               java/lang/Iterable\n+  #212 = Utf8               org/apache/commons/csv/CSVParser\n+  #213 = Utf8               java/util/Map\n+  #214 = Utf8               java/util/Map$Entry\n+  #215 = Utf8               ()V\n+  #216 = Utf8               org/apache/commons/csv/Constants\n+  #217 = Utf8               EMPTY_STRING_ARRAY\n+  #218 = Utf8               java/util/Objects\n+  #219 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n+  #220 = Utf8               (Ljava/lang/String;)V\n+  #221 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #222 = Utf8               keySet\n+  #223 = Utf8               ()Ljava/util/Set;\n+  #224 = Utf8               format\n+  #225 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #226 = Utf8               intValue\n+  #227 = Utf8               valueOf\n+  #228 = Utf8               (I)Ljava/lang/Integer;\n+  #229 = Utf8               containsKey\n+  #230 = Utf8               (Ljava/lang/Object;)Z\n+  #231 = Utf8               java/util/List\n+  #232 = Utf8               entrySet\n+  #233 = Methodref          #258.#259     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #234 = Utf8               (Ljava/lang/Object;)V\n+  #235 = Methodref          #54.#260      // org/apache/commons/csv/CSVRecord.lambda$putIn$0:(Ljava/util/Map;Ljava/util/Map$Entry;)V\n+  #236 = Utf8               (Ljava/util/Map$Entry;)V\n+  #237 = Utf8               accept\n+  #238 = Utf8               (Lorg/apache/commons/csv/CSVRecord;Ljava/util/Map;)Ljava/util/function/Consumer;\n+  #239 = Utf8               java/util/Set\n+  #240 = Utf8               forEach\n+  #241 = Utf8               (Ljava/util/function/Consumer;)V\n+  #242 = Utf8               java/util/stream/Stream\n+  #243 = Utf8               of\n+  #244 = Utf8               ([Ljava/lang/Object;)Ljava/util/stream/Stream;\n+  #245 = Utf8               java/util/Arrays\n+  #246 = Utf8               asList\n+  #247 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n+  #248 = Utf8               (I)V\n+  #249 = Utf8               append\n+  #250 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #251 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #252 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n+  #253 = Utf8               getValue\n+  #254 = Utf8               ()Ljava/lang/Object;\n+  #255 = Utf8               getKey\n+  #256 = Utf8               put\n+  #257 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #258 = Class              #261          // java/lang/invoke/LambdaMetafactory\n+  #259 = NameAndType        #262:#265     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #260 = NameAndType        #137:#141     // lambda$putIn$0:(Ljava/util/Map;Ljava/util/Map$Entry;)V\n+  #261 = Utf8               java/lang/invoke/LambdaMetafactory\n+  #262 = Utf8               metafactory\n+  #263 = Class              #267          // java/lang/invoke/MethodHandles$Lookup\n+  #264 = Utf8               Lookup\n+  #265 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #266 = Class              #268          // java/lang/invoke/MethodHandles\n+  #267 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #268 = Utf8               java/lang/invoke/MethodHandles\n {\n   private static final long serialVersionUID = 1l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 1l\n \n   private final long characterPosition;\n@@ -376,15 +370,15 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/csv/CSVRecord;\n             0      10     1     e   Ljava/lang/Enum;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      10     1     e   Ljava/lang/Enum<*>;\n-    Signature: #88                          // (Ljava/lang/Enum<*>;)Ljava/lang/String;\n+    Signature: #87                          // (Ljava/lang/Enum<*>;)Ljava/lang/String;\n \n   public java.lang.String get(int);\n     descriptor: (I)Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n@@ -552,15 +546,15 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      19     0  this   Lorg/apache/commons/csv/CSVRecord;\n       StackMapTable: number_of_entries = 2\n         frame_type = 11 /* same */\n         frame_type = 70 /* same_locals_1_stack_item */\n           stack = [ class java/util/Map ]\n-    Signature: #109                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n+    Signature: #106                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n \n   public org.apache.commons.csv.CSVParser getParser();\n     descriptor: ()Lorg/apache/commons/csv/CSVParser;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -754,15 +748,15 @@\n          4: invokeinterface #31,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n          9: areturn\n       LineNumberTable:\n         line 258: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/csv/CSVRecord;\n-    Signature: #122                         // ()Ljava/util/Iterator<Ljava/lang/String;>;\n+    Signature: #119                         // ()Ljava/util/Iterator<Ljava/lang/String;>;\n \n   public <M extends java.util.Map<java.lang.String, java.lang.String>> M putIn(M);\n     descriptor: (Ljava/util/Map;)Ljava/util/Map;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n@@ -789,15 +783,15 @@\n             0      32     0  this   Lorg/apache/commons/csv/CSVRecord;\n             0      32     1   map   Ljava/util/Map;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      32     1   map   TM;\n       StackMapTable: number_of_entries = 1\n         frame_type = 9 /* same */\n-    Signature: #127                         // <M::Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>(TM;)TM;\n+    Signature: #124                         // <M::Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>(TM;)TM;\n \n   public int size();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -820,15 +814,15 @@\n          4: invokestatic  #35                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;\n          7: areturn\n       LineNumberTable:\n         line 298: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/csv/CSVRecord;\n-    Signature: #132                         // ()Ljava/util/stream/Stream<Ljava/lang/String;>;\n+    Signature: #129                         // ()Ljava/util/stream/Stream<Ljava/lang/String;>;\n \n   public java.util.List<java.lang.String> toList();\n     descriptor: ()Ljava/util/List;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -836,15 +830,15 @@\n          4: invokestatic  #36                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n          7: areturn\n       LineNumberTable:\n         line 308: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/csv/CSVRecord;\n-    Signature: #135                         // ()Ljava/util/List<Ljava/lang/String;>;\n+    Signature: #132                         // ()Ljava/util/List<Ljava/lang/String;>;\n \n   public java.util.Map<java.lang.String, java.lang.String> toMap();\n     descriptor: ()Ljava/util/Map;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n@@ -857,15 +851,15 @@\n         13: invokevirtual #39                 // Method putIn:(Ljava/util/Map;)Ljava/util/Map;\n         16: areturn\n       LineNumberTable:\n         line 317: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      17     0  this   Lorg/apache/commons/csv/CSVRecord;\n-    Signature: #137                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #134                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: new           #40                 // class java/lang/StringBuilder\n@@ -923,45 +917,46 @@\n          6: checkcast     #15                 // class java/lang/Integer\n          9: invokevirtual #22                 // Method java/lang/Integer.intValue:()I\n         12: istore_3\n         13: iload_3\n         14: aload_0\n         15: getfield      #4                  // Field values:[Ljava/lang/String;\n         18: arraylength\n-        19: if_icmpge     41\n+        19: if_icmpge     44\n         22: aload_1\n         23: aload_2\n         24: invokeinterface #51,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;\n-        29: aload_0\n-        30: getfield      #4                  // Field values:[Ljava/lang/String;\n-        33: iload_3\n-        34: aaload\n-        35: invokeinterface #52,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-        40: pop\n-        41: return\n+        29: checkcast     #52                 // class java/lang/String\n+        32: aload_0\n+        33: getfield      #4                  // Field values:[Ljava/lang/String;\n+        36: iload_3\n+        37: aaload\n+        38: invokeinterface #53,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+        43: pop\n+        44: return\n       LineNumberTable:\n         line 274: 0\n         line 275: 13\n         line 276: 22\n-        line 278: 41\n+        line 278: 44\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      42     0  this   Lorg/apache/commons/csv/CSVRecord;\n-            0      42     1   map   Ljava/util/Map;\n-            0      42     2 entry   Ljava/util/Map$Entry;\n-           13      29     3   col   I\n+            0      45     0  this   Lorg/apache/commons/csv/CSVRecord;\n+            0      45     1   map   Ljava/util/Map;\n+            0      45     2 entry   Ljava/util/Map$Entry;\n+           13      32     3   col   I\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n-          offset_delta = 41\n+          offset_delta = 44\n           locals = [ int ]\n }\n-Signature: #148                         // Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Iterable<Ljava/lang/String;>;\n+Signature: #145                         // Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Iterable<Ljava/lang/String;>;\n SourceFile: \"CSVRecord.java\"\n InnerClasses:\n-  public static #142= #141 of #166;       // Entry=class java/util/Map$Entry of class java/util/Map\n-  public static final #270= #269 of #272; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+  public static #139= #138 of #99;        // Entry=class java/util/Map$Entry of class java/util/Map\n+  public static final #264= #263 of #266; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #188 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  0: #182 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #189 (Ljava/lang/Object;)V\n-      #190 REF_invokeSpecial org/apache/commons/csv/CSVRecord.lambda$putIn$0:(Ljava/util/Map;Ljava/util/Map$Entry;)V\n-      #191 (Ljava/util/Map$Entry;)V\n+      #183 (Ljava/lang/Object;)V\n+      #184 REF_invokeSpecial org/apache/commons/csv/CSVRecord.lambda$putIn$0:(Ljava/util/Map;Ljava/util/Map$Entry;)V\n+      #185 (Ljava/util/Map$Entry;)V\n"}]}
