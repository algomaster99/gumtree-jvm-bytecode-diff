{"diffoscope-json-version": 1, "source1": "first/CountingOutputStream.class", "source2": "second/CountingOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,42 +3,42 @@\n \n import java.io.OutputStream;\n \n public class CountingOutputStream extends ProxyOutputStream\n {\n     private long count;\n     \n-    public CountingOutputStream(final OutputStream out) {\n-        super(out);\n+    public CountingOutputStream(final OutputStream outputStream) {\n+        super(outputStream);\n         this.count = 0L;\n     }\n     \n     protected synchronized void beforeWrite(final int n) {\n         this.count += n;\n     }\n     \n     public int getCount() {\n-        final long result = this.getByteCount();\n-        if (result > 2147483647L) {\n-            throw new ArithmeticException(\"The byte count \" + result + \" is too large to be converted to an int\");\n+        final long byteCount = this.getByteCount();\n+        if (byteCount > 2147483647L) {\n+            throw new ArithmeticException(\"The byte count \" + byteCount + \" is too large to be converted to an int\");\n         }\n-        return (int)result;\n+        return (int)byteCount;\n     }\n     \n     public int resetCount() {\n-        final long result = this.resetByteCount();\n-        if (result > 2147483647L) {\n-            throw new ArithmeticException(\"The byte count \" + result + \" is too large to be converted to an int\");\n+        final long resetByteCount = this.resetByteCount();\n+        if (resetByteCount > 2147483647L) {\n+            throw new ArithmeticException(\"The byte count \" + resetByteCount + \" is too large to be converted to an int\");\n         }\n-        return (int)result;\n+        return (int)resetByteCount;\n     }\n     \n     public synchronized long getByteCount() {\n         return this.count;\n     }\n     \n     public synchronized long resetByteCount() {\n-        final long tmp = this.count;\n+        final long count = this.count;\n         this.count = 0L;\n-        return tmp;\n+        return count;\n     }\n }\n"}]}
