{"diffoscope-json-version": 1, "source1": "first/ParseException.class", "source2": "second/ParseException.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,122 +5,118 @@\n {\n     private static final long serialVersionUID = 1L;\n     public Token currentToken;\n     public int[][] expectedTokenSequences;\n     public String[] tokenImage;\n     protected String eol;\n     \n-    public ParseException(final Token currentTokenVal, final int[][] expectedTokenSequencesVal, final String[] tokenImageVal) {\n-        super(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal));\n+    public ParseException(final Token currentToken, final int[][] expectedTokenSequences, final String[] tokenImage) {\n+        super(initialise(currentToken, expectedTokenSequences, tokenImage));\n         this.eol = System.getProperty(\"line.separator\", \"\\n\");\n-        this.currentToken = currentTokenVal;\n-        this.expectedTokenSequences = expectedTokenSequencesVal;\n-        this.tokenImage = tokenImageVal;\n+        this.currentToken = currentToken;\n+        this.expectedTokenSequences = expectedTokenSequences;\n+        this.tokenImage = tokenImage;\n     }\n     \n     public ParseException() {\n         this.eol = System.getProperty(\"line.separator\", \"\\n\");\n     }\n     \n     public ParseException(final String message) {\n         super(message);\n         this.eol = System.getProperty(\"line.separator\", \"\\n\");\n     }\n     \n-    private static String initialise(final Token currentToken, final int[][] expectedTokenSequences, final String[] tokenImage) {\n-        final String eol = System.getProperty(\"line.separator\", \"\\n\");\n-        final StringBuffer expected = new StringBuffer();\n-        int maxSize = 0;\n-        for (int i = 0; i < expectedTokenSequences.length; ++i) {\n-            if (maxSize < expectedTokenSequences[i].length) {\n-                maxSize = expectedTokenSequences[i].length;\n+    private static String initialise(final Token token, final int[][] array, final String[] array2) {\n+        final String property = System.getProperty(\"line.separator\", \"\\n\");\n+        final StringBuffer sb = new StringBuffer();\n+        int length = 0;\n+        for (int i = 0; i < array.length; ++i) {\n+            if (length < array[i].length) {\n+                length = array[i].length;\n             }\n-            for (int j = 0; j < expectedTokenSequences[i].length; ++j) {\n-                expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\n+            for (int j = 0; j < array[i].length; ++j) {\n+                sb.append(array2[array[i][j]]).append(' ');\n             }\n-            if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n-                expected.append(\"...\");\n+            if (array[i][array[i].length - 1] != 0) {\n+                sb.append(\"...\");\n             }\n-            expected.append(eol).append(\"    \");\n+            sb.append(property).append(\"    \");\n         }\n-        String retval = \"Encountered \\\"\";\n-        Token tok = currentToken.next;\n-        for (int k = 0; k < maxSize; ++k) {\n+        String s = \"Encountered \\\"\";\n+        Token token2 = token.next;\n+        for (int k = 0; k < length; ++k) {\n             if (k != 0) {\n-                retval += \" \";\n+                s += \" \";\n             }\n-            if (tok.kind == 0) {\n-                retval += tokenImage[0];\n+            if (token2.kind == 0) {\n+                s += array2[0];\n                 break;\n             }\n-            retval = retval + \" \" + tokenImage[tok.kind];\n-            retval += \" \\\"\";\n-            retval += add_escapes(tok.image);\n-            retval += \" \\\"\";\n-            tok = tok.next;\n+            s = s + \" \" + array2[token2.kind] + \" \\\"\" + add_escapes(token2.image) + \" \\\"\";\n+            token2 = token2.next;\n         }\n-        retval = retval + \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn;\n-        retval = retval + \".\" + eol;\n-        if (expectedTokenSequences.length == 1) {\n-            retval = retval + \"Was expecting:\" + eol + \"    \";\n+        final String string = s + \"\\\" at line \" + token.next.beginLine + \", column \" + token.next.beginColumn + \".\" + property;\n+        String str;\n+        if (array.length == 1) {\n+            str = string + \"Was expecting:\" + property + \"    \";\n         }\n         else {\n-            retval = retval + \"Was expecting one of:\" + eol + \"    \";\n+            str = string + \"Was expecting one of:\" + property + \"    \";\n         }\n-        retval += expected.toString();\n-        return retval;\n+        return str + sb.toString();\n     }\n     \n-    static String add_escapes(final String str) {\n-        final StringBuffer retval = new StringBuffer();\n-        for (int i = 0; i < str.length(); ++i) {\n-            switch (str.charAt(i)) {\n+    static String add_escapes(final String s) {\n+        final StringBuffer sb = new StringBuffer();\n+        for (int i = 0; i < s.length(); ++i) {\n+            switch (s.charAt(i)) {\n                 case '\\0': {\n                     break;\n                 }\n                 case '\\b': {\n-                    retval.append(\"\\\\b\");\n+                    sb.append(\"\\\\b\");\n                     break;\n                 }\n                 case '\\t': {\n-                    retval.append(\"\\\\t\");\n+                    sb.append(\"\\\\t\");\n                     break;\n                 }\n                 case '\\n': {\n-                    retval.append(\"\\\\n\");\n+                    sb.append(\"\\\\n\");\n                     break;\n                 }\n                 case '\\f': {\n-                    retval.append(\"\\\\f\");\n+                    sb.append(\"\\\\f\");\n                     break;\n                 }\n                 case '\\r': {\n-                    retval.append(\"\\\\r\");\n+                    sb.append(\"\\\\r\");\n                     break;\n                 }\n                 case '\\\"': {\n-                    retval.append(\"\\\\\\\"\");\n+                    sb.append(\"\\\\\\\"\");\n                     break;\n                 }\n                 case '\\'': {\n-                    retval.append(\"\\\\'\");\n+                    sb.append(\"\\\\'\");\n                     break;\n                 }\n                 case '\\\\': {\n-                    retval.append(\"\\\\\\\\\");\n+                    sb.append(\"\\\\\\\\\");\n                     break;\n                 }\n                 default: {\n-                    final char ch;\n-                    if ((ch = str.charAt(i)) < ' ' || ch > '~') {\n-                        final String s = \"0000\" + Integer.toString((int)ch, 16);\n-                        retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n+                    final char char1;\n+                    if ((char1 = s.charAt(i)) < ' ' || char1 > '~') {\n+                        final String string = \"0000\" + Integer.toString((int)char1, 16);\n+                        sb.append(\"\\\\u\" + string.substring(string.length() - 4, string.length()));\n                         break;\n                     }\n-                    retval.append(ch);\n+                    sb.append(char1);\n                     break;\n                 }\n             }\n         }\n-        return retval.toString();\n+        return sb.toString();\n     }\n }\n"}]}
