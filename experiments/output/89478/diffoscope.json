{"diffoscope-json-version": 1, "source1": "first/SubnetUtils.class", "source2": "second/SubnetUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,14 +14,19 @@\n     private static final String PARSE_FAIL = \"Could not parse [%s]\";\n     private final int netmask;\n     private final int address;\n     private final int network;\n     private final int broadcast;\n     private boolean inclusiveHostCount;\n     \n+    static {\n+        ADDRESS_PATTERN = Pattern.compile(\"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\");\n+        CIDR_PATTERN = Pattern.compile(\"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\");\n+    }\n+    \n     private static int matchAddress(final Matcher matcher) {\n         int addr = 0;\n         for (int i = 1; i <= 4; ++i) {\n             final int n = rangeCheck(Integer.parseInt(matcher.group(i)), 0, 255);\n             addr |= (n & 0xFF) << 8 * (4 - i);\n         }\n         return addr;\n@@ -61,15 +66,15 @@\n             throw new IllegalArgumentException(String.format(\"Could not parse [%s]\", mask));\n         }\n         this.network = (this.address & this.netmask);\n         this.broadcast = (this.network | ~this.netmask);\n     }\n     \n     public final SubnetUtils.SubnetInfo getInfo() {\n-        return new SubnetUtils.SubnetInfo(this, (SubnetUtils.SubnetUtils$1)null);\n+        return new SubnetUtils.SubnetInfo(this, (SubnetUtils.SubnetInfo)null);\n     }\n     \n     public SubnetUtils getNext() {\n         return new SubnetUtils(this.getInfo().getNextAddress(), this.getInfo().getNetmask());\n     }\n     \n     public SubnetUtils getPrevious() {\n@@ -79,13 +84,8 @@\n     public boolean isInclusiveHostCount() {\n         return this.inclusiveHostCount;\n     }\n     \n     public void setInclusiveHostCount(final boolean inclusiveHostCount) {\n         this.inclusiveHostCount = inclusiveHostCount;\n     }\n-    \n-    static {\n-        ADDRESS_PATTERN = Pattern.compile(\"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\");\n-        CIDR_PATTERN = Pattern.compile(\"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\");\n-    }\n }\n"}]}
