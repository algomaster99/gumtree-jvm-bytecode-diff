{"diffoscope-json-version": 1, "source1": "first/DynamicCombinedConfiguration.class", "source2": "second/DynamicCombinedConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -31,14 +31,18 @@\n     private final List<DynamicCombinedConfiguration.ConfigData> configurations;\n     private final Map<String, Configuration> namedConfigurations;\n     private String keyPattern;\n     private NodeCombiner nodeCombiner;\n     private String loggerName;\n     private final ConfigurationInterpolator localSubst;\n     \n+    static {\n+        CURRENT_CONFIG = new ThreadLocal<DynamicCombinedConfiguration.CurrentConfigHolder>();\n+    }\n+    \n     public DynamicCombinedConfiguration(final NodeCombiner comb) {\n         this.configs = new ConcurrentHashMap<String, CombinedConfiguration>();\n         this.configurations = new ArrayList<DynamicCombinedConfiguration.ConfigData>();\n         this.namedConfigurations = new HashMap<String, Configuration>();\n         this.loggerName = DynamicCombinedConfiguration.class.getName();\n         this.setNodeCombiner(comb);\n         this.initLogger(new ConfigurationLogger((Class)DynamicCombinedConfiguration.class));\n@@ -87,14 +91,15 @@\n                 this.namedConfigurations.put(name, config);\n             }\n             this.configs.clear();\n         }\n         finally {\n             this.endWrite();\n         }\n+        this.endWrite();\n     }\n     \n     public int getNumberOfConfigurations() {\n         this.beginRead(false);\n         try {\n             return this.configurations.size();\n         }\n@@ -476,14 +481,15 @@\n         try {\n             config = ((DynamicCombinedConfiguration.CurrentConfigHolder)DynamicCombinedConfiguration.CURRENT_CONFIG.get()).getCurrentConfiguration();\n             key = ((DynamicCombinedConfiguration.CurrentConfigHolder)DynamicCombinedConfiguration.CURRENT_CONFIG.get()).getKey();\n         }\n         finally {\n             this.endRead();\n         }\n+        this.endRead();\n         if (this.getLogger().isDebugEnabled()) {\n             this.getLogger().debug(\"Returning config for \" + key + \": \" + config);\n         }\n         return config;\n     }\n     \n     private CombinedConfiguration createChildConfiguration() {\n@@ -514,12 +520,8 @@\n             final String key = String.valueOf(this.localSubst.interpolate((Object)this.keyPattern));\n             cch = new DynamicCombinedConfiguration.CurrentConfigHolder(key);\n             cch.setCurrentConfiguration((CombinedConfiguration)this.configs.get(key));\n             DynamicCombinedConfiguration.CURRENT_CONFIG.set(cch);\n         }\n         return cch;\n     }\n-    \n-    static {\n-        CURRENT_CONFIG = new ThreadLocal<DynamicCombinedConfiguration.CurrentConfigHolder>();\n-    }\n }\n"}]}
