{"diffoscope-json-version": 1, "source1": "first/Pack200Utils.class", "source2": "second/Pack200Utils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,42 +13,42 @@\n import java.io.File;\n \n public class Pack200Utils\n {\n     private Pack200Utils() {\n     }\n     \n-    public static void normalize(final File jar) throws IOException {\n-        normalize(jar, jar, null);\n+    public static void normalize(final File file) throws IOException {\n+        normalize(file, file, null);\n     }\n     \n-    public static void normalize(final File jar, final Map<String, String> props) throws IOException {\n-        normalize(jar, jar, props);\n+    public static void normalize(final File file, final Map<String, String> map) throws IOException {\n+        normalize(file, file, map);\n     }\n     \n-    public static void normalize(final File from, final File to) throws IOException {\n-        normalize(from, to, null);\n+    public static void normalize(final File file, final File file2) throws IOException {\n+        normalize(file, file2, null);\n     }\n     \n-    public static void normalize(final File from, final File to, Map<String, String> props) throws IOException {\n-        if (props == null) {\n-            props = new HashMap<String, String>();\n+    public static void normalize(final File file, final File file2, Map<String, String> hashMap) throws IOException {\n+        if (hashMap == null) {\n+            hashMap = new HashMap<String, String>();\n         }\n-        props.put(\"pack.segment.limit\", \"-1\");\n+        hashMap.put(\"pack.segment.limit\", \"-1\");\n         final File tempFile = File.createTempFile(\"commons-compress\", \"pack200normalize\");\n         try {\n-            try (final OutputStream fos = Files.newOutputStream(tempFile.toPath(), new OpenOption[0]);\n-                 final JarFile jarFile = new JarFile(from)) {\n+            try (final OutputStream outputStream = Files.newOutputStream(tempFile.toPath(), new OpenOption[0]);\n+                 final JarFile jarFile = new JarFile(file)) {\n                 final Pack200.Packer packer = Pack200.newPacker();\n-                packer.properties().putAll(props);\n-                packer.pack(jarFile, fos);\n+                packer.properties().putAll(hashMap);\n+                packer.pack(jarFile, outputStream);\n             }\n             final Pack200.Unpacker unpacker = Pack200.newUnpacker();\n-            try (final JarOutputStream jos = new JarOutputStream(Files.newOutputStream(to.toPath(), new OpenOption[0]))) {\n-                unpacker.unpack(tempFile, jos);\n+            try (final JarOutputStream jarOutputStream = new JarOutputStream(Files.newOutputStream(file2.toPath(), new OpenOption[0]))) {\n+                unpacker.unpack(tempFile, jarOutputStream);\n             }\n         }\n         finally {\n             if (!tempFile.delete()) {\n                 tempFile.deleteOnExit();\n             }\n         }\n"}]}
