{"diffoscope-json-version": 1, "source1": "first/UnshrinkingInputStream.class", "source2": "second/UnshrinkingInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,67 +19,67 @@\n         this.isUsed = new boolean[this.getPrefixesLength()];\n         for (int i = 0; i < 256; ++i) {\n             this.isUsed[i] = true;\n         }\n         this.setTableSize(this.getClearCode() + 1);\n     }\n     \n-    protected int addEntry(final int previousCode, final byte character) throws IOException {\n+    protected int addEntry(final int n, final byte b) throws IOException {\n         int tableSize;\n         for (tableSize = this.getTableSize(); tableSize < 8192 && this.isUsed[tableSize]; ++tableSize) {}\n         this.setTableSize(tableSize);\n-        final int idx = this.addEntry(previousCode, character, 8192);\n-        if (idx >= 0) {\n-            this.isUsed[idx] = true;\n+        final int addEntry = this.addEntry(n, b, 8192);\n+        if (addEntry >= 0) {\n+            this.isUsed[addEntry] = true;\n         }\n-        return idx;\n+        return addEntry;\n     }\n     \n     protected int decompressNextSymbol() throws IOException {\n-        final int code = this.readNextCode();\n-        if (code < 0) {\n+        final int nextCode = this.readNextCode();\n+        if (nextCode < 0) {\n             return -1;\n         }\n-        if (code != this.getClearCode()) {\n-            boolean addedUnfinishedEntry = false;\n-            int effectiveCode = code;\n-            if (!this.isUsed[code]) {\n-                effectiveCode = this.addRepeatOfPreviousCode();\n-                addedUnfinishedEntry = true;\n+        if (nextCode != this.getClearCode()) {\n+            boolean b = false;\n+            int addRepeatOfPreviousCode = nextCode;\n+            if (!this.isUsed[nextCode]) {\n+                addRepeatOfPreviousCode = this.addRepeatOfPreviousCode();\n+                b = true;\n             }\n-            return this.expandCodeToOutputStack(effectiveCode, addedUnfinishedEntry);\n+            return this.expandCodeToOutputStack(addRepeatOfPreviousCode, b);\n         }\n-        final int subCode = this.readNextCode();\n-        if (subCode < 0) {\n+        final int nextCode2 = this.readNextCode();\n+        if (nextCode2 < 0) {\n             throw new IOException(\"Unexpected EOF;\");\n         }\n-        if (subCode == 1) {\n+        if (nextCode2 == 1) {\n             if (this.getCodeSize() >= 13) {\n                 throw new IOException(\"Attempt to increase code size beyond maximum\");\n             }\n             this.incrementCodeSize();\n         }\n         else {\n-            if (subCode != 2) {\n-                throw new IOException(\"Invalid clear code subcode \" + subCode);\n+            if (nextCode2 != 2) {\n+                throw new IOException(\"Invalid clear code subcode \" + nextCode2);\n             }\n             this.partialClear();\n             this.setTableSize(this.getClearCode() + 1);\n         }\n         return 0;\n     }\n     \n     private void partialClear() {\n-        final boolean[] isParent = new boolean[8192];\n+        final boolean[] array = new boolean[8192];\n         for (int i = 0; i < this.isUsed.length; ++i) {\n             if (this.isUsed[i] && this.getPrefix(i) != -1) {\n-                isParent[this.getPrefix(i)] = true;\n+                array[this.getPrefix(i)] = true;\n             }\n         }\n-        for (int i = this.getClearCode() + 1; i < isParent.length; ++i) {\n-            if (!isParent[i]) {\n-                this.isUsed[i] = false;\n-                this.setPrefix(i, -1);\n+        for (int j = this.getClearCode() + 1; j < array.length; ++j) {\n+            if (!array[j]) {\n+                this.isUsed[j] = false;\n+                this.setPrefix(j, -1);\n             }\n         }\n     }\n }\n"}]}
