{"diffoscope-json-version": 1, "source1": "first/CodeException.class", "source2": "second/CodeException.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,38 +9,38 @@\n public final class CodeException implements Cloneable, Node, Constants\n {\n     private int startPc;\n     private int endPc;\n     private int handlerPc;\n     private int catchType;\n     \n-    public CodeException(final CodeException c) {\n-        this(c.getStartPC(), c.getEndPC(), c.getHandlerPC(), c.getCatchType());\n+    public CodeException(final CodeException ex) {\n+        this(ex.getStartPC(), ex.getEndPC(), ex.getHandlerPC(), ex.getCatchType());\n     }\n     \n-    CodeException(final DataInput file) throws IOException {\n-        this(file.readUnsignedShort(), file.readUnsignedShort(), file.readUnsignedShort(), file.readUnsignedShort());\n+    CodeException(final DataInput dataInput) throws IOException {\n+        this(dataInput.readUnsignedShort(), dataInput.readUnsignedShort(), dataInput.readUnsignedShort(), dataInput.readUnsignedShort());\n     }\n     \n     public CodeException(final int startPc, final int endPc, final int handlerPc, final int catchType) {\n         this.startPc = startPc;\n         this.endPc = endPc;\n         this.handlerPc = handlerPc;\n         this.catchType = catchType;\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitCodeException(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitCodeException(this);\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        file.writeShort(this.startPc);\n-        file.writeShort(this.endPc);\n-        file.writeShort(this.handlerPc);\n-        file.writeShort(this.catchType);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.startPc);\n+        dataOutputStream.writeShort(this.endPc);\n+        dataOutputStream.writeShort(this.handlerPc);\n+        dataOutputStream.writeShort(this.catchType);\n     }\n     \n     public int getCatchType() {\n         return this.catchType;\n     }\n     \n     public int getEndPC() {\n@@ -72,27 +72,27 @@\n     }\n     \n     @Override\n     public String toString() {\n         return \"CodeException(startPc = \" + this.startPc + \", endPc = \" + this.endPc + \", handlerPc = \" + this.handlerPc + \", catchType = \" + this.catchType + \")\";\n     }\n     \n-    public String toString(final ConstantPool cp, final boolean verbose) {\n-        String str;\n+    public String toString(final ConstantPool constantPool, final boolean b) {\n+        String string;\n         if (this.catchType == 0) {\n-            str = \"<Any exception>(0)\";\n+            string = \"<Any exception>(0)\";\n         }\n         else {\n-            str = Utility.compactClassName(cp.getConstantString(this.catchType, (byte)7), false) + (verbose ? (\"(\" + this.catchType + \")\") : \"\");\n+            string = Utility.compactClassName(constantPool.getConstantString(this.catchType, (byte)7), false) + (b ? (\"(\" + this.catchType + \")\") : \"\");\n         }\n-        return this.startPc + \"\\t\" + this.endPc + \"\\t\" + this.handlerPc + \"\\t\" + str;\n+        return this.startPc + \"\\t\" + this.endPc + \"\\t\" + this.handlerPc + \"\\t\" + string;\n     }\n     \n-    public String toString(final ConstantPool cp) {\n-        return this.toString(cp, true);\n+    public String toString(final ConstantPool constantPool) {\n+        return this.toString(constantPool, true);\n     }\n     \n     public CodeException copy() {\n         try {\n             return (CodeException)this.clone();\n         }\n         catch (final CloneNotSupportedException ex) {\n"}]}
