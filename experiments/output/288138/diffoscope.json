{"diffoscope-json-version": 1, "source1": "first/GzipCompressorInputStream.class", "source2": "second/GzipCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,112 +1,112 @@\n-  SHA-256 checksum 103ef4f1e991d4232b7e9e25b326e5649462bc24461dfa2d98e57d573d824d67\n+  SHA-256 checksum 3d02c31767720d41929bd255313975bd068096113969611befe7f9f814f3765a\n   Compiled from \"GzipCompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #53                         // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n   super_class: #96                        // org/apache/commons/compress/compressors/CompressorInputStream\n   interfaces: 1, fields: 16, methods: 11, attributes: 1\n Constant pool:\n-    #1 = Class              #161          // java/io/ByteArrayOutputStream\n-    #2 = Methodref          #1.#162       // java/io/ByteArrayOutputStream.\"<init>\":()V\n-    #3 = InterfaceMethodref #163.#164     // java/io/DataInput.readUnsignedByte:()I\n-    #4 = Methodref          #1.#165       // java/io/ByteArrayOutputStream.write:(I)V\n-    #5 = Methodref          #1.#166       // java/io/ByteArrayOutputStream.toByteArray:()[B\n-    #6 = Methodref          #1.#167       // java/io/ByteArrayOutputStream.close:()V\n-    #7 = Class              #168          // java/lang/Throwable\n-    #8 = Methodref          #7.#169       // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-    #9 = Methodref          #53.#170      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n-   #10 = Methodref          #96.#162      // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-   #11 = Fieldref           #53.#171      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.buf:[B\n-   #12 = Class              #172          // java/util/zip/Inflater\n-   #13 = Methodref          #12.#173      // java/util/zip/Inflater.\"<init>\":(Z)V\n-   #14 = Fieldref           #53.#174      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.inf:Ljava/util/zip/Inflater;\n-   #15 = Class              #175          // java/util/zip/CRC32\n-   #16 = Methodref          #15.#162      // java/util/zip/CRC32.\"<init>\":()V\n-   #17 = Fieldref           #53.#176      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.crc:Ljava/util/zip/CRC32;\n-   #18 = Fieldref           #53.#177      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.oneByte:[B\n-   #19 = Class              #178          // org/apache/commons/compress/compressors/gzip/GzipParameters\n-   #20 = Methodref          #19.#162      // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n-   #21 = Fieldref           #53.#179      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-   #22 = Class              #180          // org/apache/commons/compress/utils/CountingInputStream\n-   #23 = Methodref          #22.#181      // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #24 = Fieldref           #53.#182      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #25 = Methodref          #22.#183      // org/apache/commons/compress/utils/CountingInputStream.markSupported:()Z\n-   #26 = Fieldref           #53.#184      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.in:Ljava/io/InputStream;\n-   #27 = Class              #185          // java/io/BufferedInputStream\n-   #28 = Methodref          #27.#181      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #29 = Fieldref           #53.#186      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.decompressConcatenated:Z\n-   #30 = Methodref          #53.#187      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.init:(Z)Z\n-   #31 = Methodref          #12.#188      // java/util/zip/Inflater.end:()V\n-   #32 = Fieldref           #189.#184     // java/lang/System.in:Ljava/io/InputStream;\n-   #33 = Methodref          #190.#167     // java/io/InputStream.close:()V\n-   #34 = Methodref          #22.#191      // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n-   #35 = Fieldref           #53.#192      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.$assertionsDisabled:Z\n-   #36 = Class              #193          // java/lang/AssertionError\n-   #37 = Methodref          #36.#162      // java/lang/AssertionError.\"<init>\":()V\n-   #38 = Methodref          #190.#194     // java/io/InputStream.read:()I\n-   #39 = Class              #195          // java/io/IOException\n-   #40 = String             #196          // Input is not in the .gz format\n-   #41 = String             #197          // Garbage after a valid .gz stream\n-   #42 = Methodref          #39.#198      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #43 = Class              #199          // java/io/DataInputStream\n-   #44 = Methodref          #43.#181      // java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #45 = Class              #200          // java/util/zip/Deflater\n-   #46 = Class              #201          // java/lang/StringBuilder\n-   #47 = Methodref          #46.#162      // java/lang/StringBuilder.\"<init>\":()V\n-   #48 = String             #202          // Unsupported compression method\n-   #49 = Methodref          #46.#203      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #50 = Methodref          #46.#204      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #51 = String             #205          //  in the .gz header\n-   #52 = Methodref          #46.#206      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #53 = Class              #207          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-   #54 = String             #208          // Reserved flags are set in the .gz header\n-   #55 = Methodref          #209.#210     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+    #1 = Class              #156          // java/io/ByteArrayOutputStream\n+    #2 = Methodref          #1.#157       // java/io/ByteArrayOutputStream.\"<init>\":()V\n+    #3 = InterfaceMethodref #135.#158     // java/io/DataInput.readUnsignedByte:()I\n+    #4 = Methodref          #1.#159       // java/io/ByteArrayOutputStream.write:(I)V\n+    #5 = Methodref          #1.#160       // java/io/ByteArrayOutputStream.toByteArray:()[B\n+    #6 = Methodref          #1.#161       // java/io/ByteArrayOutputStream.close:()V\n+    #7 = Class              #162          // java/lang/Throwable\n+    #8 = Methodref          #7.#163       // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+    #9 = Methodref          #53.#164      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n+   #10 = Methodref          #96.#157      // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+   #11 = Fieldref           #53.#165      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.buf:[B\n+   #12 = Class              #166          // java/util/zip/Inflater\n+   #13 = Methodref          #12.#167      // java/util/zip/Inflater.\"<init>\":(Z)V\n+   #14 = Fieldref           #53.#168      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.inf:Ljava/util/zip/Inflater;\n+   #15 = Class              #169          // java/util/zip/CRC32\n+   #16 = Methodref          #15.#157      // java/util/zip/CRC32.\"<init>\":()V\n+   #17 = Fieldref           #53.#170      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.crc:Ljava/util/zip/CRC32;\n+   #18 = Fieldref           #53.#171      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.oneByte:[B\n+   #19 = Class              #172          // org/apache/commons/compress/compressors/gzip/GzipParameters\n+   #20 = Methodref          #19.#157      // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n+   #21 = Fieldref           #53.#173      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+   #22 = Class              #174          // org/apache/commons/compress/utils/CountingInputStream\n+   #23 = Methodref          #22.#175      // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #24 = Fieldref           #53.#176      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #25 = Methodref          #22.#177      // org/apache/commons/compress/utils/CountingInputStream.markSupported:()Z\n+   #26 = Fieldref           #53.#178      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.in:Ljava/io/InputStream;\n+   #27 = Class              #179          // java/io/BufferedInputStream\n+   #28 = Methodref          #27.#175      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #29 = Fieldref           #53.#180      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.decompressConcatenated:Z\n+   #30 = Methodref          #53.#181      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.init:(Z)Z\n+   #31 = Methodref          #12.#182      // java/util/zip/Inflater.end:()V\n+   #32 = Fieldref           #183.#178     // java/lang/System.in:Ljava/io/InputStream;\n+   #33 = Methodref          #140.#161     // java/io/InputStream.close:()V\n+   #34 = Methodref          #22.#184      // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+   #35 = Fieldref           #53.#185      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.$assertionsDisabled:Z\n+   #36 = Class              #186          // java/lang/AssertionError\n+   #37 = Methodref          #36.#157      // java/lang/AssertionError.\"<init>\":()V\n+   #38 = Methodref          #140.#187     // java/io/InputStream.read:()I\n+   #39 = Class              #188          // java/io/IOException\n+   #40 = String             #189          // Input is not in the .gz format\n+   #41 = String             #190          // Garbage after a valid .gz stream\n+   #42 = Methodref          #39.#191      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #43 = Class              #192          // java/io/DataInputStream\n+   #44 = Methodref          #43.#175      // java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #45 = Class              #193          // java/util/zip/Deflater\n+   #46 = Class              #194          // java/lang/StringBuilder\n+   #47 = Methodref          #46.#157      // java/lang/StringBuilder.\"<init>\":()V\n+   #48 = String             #195          // Unsupported compression method\n+   #49 = Methodref          #46.#196      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #50 = Methodref          #46.#197      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #51 = String             #198          //  in the .gz header\n+   #52 = Methodref          #46.#199      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #53 = Class              #200          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+   #54 = String             #201          // Reserved flags are set in the .gz header\n+   #55 = Methodref          #202.#203     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n    #56 = Long               1000l\n-   #58 = Methodref          #19.#211      // org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n-   #59 = Methodref          #19.#212      // org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n-   #60 = Methodref          #19.#213      // org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n-   #61 = Class              #214          // java/lang/String\n-   #62 = Methodref          #53.#215      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.readToNull:(Ljava/io/DataInput;)[B\n-   #63 = Fieldref           #216.#217     // org/apache/commons/compress/compressors/gzip/GzipUtils.GZIP_ENCODING:Ljava/nio/charset/Charset;\n-   #64 = Methodref          #61.#218      // java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-   #65 = Methodref          #19.#219      // org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n-   #66 = Methodref          #19.#220      // org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n-   #67 = InterfaceMethodref #163.#221     // java/io/DataInput.readShort:()S\n-   #68 = Methodref          #12.#222      // java/util/zip/Inflater.reset:()V\n-   #69 = Methodref          #15.#222      // java/util/zip/CRC32.reset:()V\n-   #70 = Methodref          #53.#223      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.read:([BII)I\n-   #71 = Fieldref           #53.#224      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.endReached:Z\n-   #72 = Methodref          #12.#225      // java/util/zip/Inflater.needsInput:()Z\n-   #73 = Methodref          #190.#226     // java/io/InputStream.mark:(I)V\n-   #74 = Methodref          #190.#227     // java/io/InputStream.read:([B)I\n-   #75 = Fieldref           #53.#228      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.bufUsed:I\n-   #76 = Class              #229          // java/io/EOFException\n-   #77 = Methodref          #76.#162      // java/io/EOFException.\"<init>\":()V\n-   #78 = Methodref          #12.#230      // java/util/zip/Inflater.setInput:([BII)V\n-   #79 = Methodref          #12.#231      // java/util/zip/Inflater.inflate:([BII)I\n-   #80 = Class              #232          // java/util/zip/DataFormatException\n-   #81 = String             #233          // Gzip-compressed data is corrupt\n-   #82 = Methodref          #15.#234      // java/util/zip/CRC32.update:([BII)V\n-   #83 = Methodref          #53.#235      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.count:(I)V\n-   #84 = Methodref          #12.#236      // java/util/zip/Inflater.finished:()Z\n-   #85 = Methodref          #190.#222     // java/io/InputStream.reset:()V\n-   #86 = Methodref          #12.#237      // java/util/zip/Inflater.getRemaining:()I\n-   #87 = Methodref          #238.#239     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-   #88 = Methodref          #39.#162      // java/io/IOException.\"<init>\":()V\n-   #89 = Methodref          #15.#240      // java/util/zip/CRC32.getValue:()J\n-   #90 = String             #241          // Gzip-compressed data is corrupt (CRC32 error)\n-   #91 = Methodref          #12.#242      // java/util/zip/Inflater.getBytesWritten:()J\n+   #58 = Methodref          #19.#204      // org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n+   #59 = Methodref          #19.#205      // org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+   #60 = Methodref          #19.#206      // org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n+   #61 = Class              #207          // java/lang/String\n+   #62 = Methodref          #53.#208      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.readToNull:(Ljava/io/DataInput;)[B\n+   #63 = Fieldref           #209.#210     // org/apache/commons/compress/compressors/gzip/GzipUtils.GZIP_ENCODING:Ljava/nio/charset/Charset;\n+   #64 = Methodref          #61.#211      // java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+   #65 = Methodref          #19.#212      // org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n+   #66 = Methodref          #19.#213      // org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n+   #67 = InterfaceMethodref #135.#214     // java/io/DataInput.readShort:()S\n+   #68 = Methodref          #12.#215      // java/util/zip/Inflater.reset:()V\n+   #69 = Methodref          #15.#215      // java/util/zip/CRC32.reset:()V\n+   #70 = Methodref          #53.#216      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.read:([BII)I\n+   #71 = Fieldref           #53.#217      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.endReached:Z\n+   #72 = Methodref          #12.#218      // java/util/zip/Inflater.needsInput:()Z\n+   #73 = Methodref          #140.#219     // java/io/InputStream.mark:(I)V\n+   #74 = Methodref          #140.#220     // java/io/InputStream.read:([B)I\n+   #75 = Fieldref           #53.#221      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.bufUsed:I\n+   #76 = Class              #222          // java/io/EOFException\n+   #77 = Methodref          #76.#157      // java/io/EOFException.\"<init>\":()V\n+   #78 = Methodref          #12.#223      // java/util/zip/Inflater.setInput:([BII)V\n+   #79 = Methodref          #12.#224      // java/util/zip/Inflater.inflate:([BII)I\n+   #80 = Class              #225          // java/util/zip/DataFormatException\n+   #81 = String             #226          // Gzip-compressed data is corrupt\n+   #82 = Methodref          #15.#227      // java/util/zip/CRC32.update:([BII)V\n+   #83 = Methodref          #53.#228      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.count:(I)V\n+   #84 = Methodref          #12.#229      // java/util/zip/Inflater.finished:()Z\n+   #85 = Methodref          #140.#215     // java/io/InputStream.reset:()V\n+   #86 = Methodref          #12.#230      // java/util/zip/Inflater.getRemaining:()I\n+   #87 = Methodref          #231.#232     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+   #88 = Methodref          #39.#157      // java/io/IOException.\"<init>\":()V\n+   #89 = Methodref          #15.#233      // java/util/zip/CRC32.getValue:()J\n+   #90 = String             #234          // Gzip-compressed data is corrupt (CRC32 error)\n+   #91 = Methodref          #12.#235      // java/util/zip/Inflater.getBytesWritten:()J\n    #92 = Long               4294967295l\n-   #94 = String             #243          // Gzip-compressed data is corrupt(uncompressed size mismatch)\n-   #95 = Methodref          #244.#245     // java/lang/Class.desiredAssertionStatus:()Z\n-   #96 = Class              #246          // org/apache/commons/compress/compressors/CompressorInputStream\n-   #97 = Class              #247          // org/apache/commons/compress/utils/InputStreamStatistics\n+   #94 = String             #236          // Gzip-compressed data is corrupt(uncompressed size mismatch)\n+   #95 = Methodref          #237.#238     // java/lang/Class.desiredAssertionStatus:()Z\n+   #96 = Class              #239          // org/apache/commons/compress/compressors/CompressorInputStream\n+   #97 = Class              #240          // org/apache/commons/compress/utils/InputStreamStatistics\n    #98 = Utf8               FHCRC\n    #99 = Utf8               I\n   #100 = Utf8               ConstantValue\n   #101 = Integer            2\n   #102 = Utf8               FEXTRA\n   #103 = Integer            4\n   #104 = Utf8               FNAME\n@@ -136,181 +136,174 @@\n   #128 = Utf8               matches\n   #129 = Utf8               ([BI)Z\n   #130 = Utf8               Code\n   #131 = Utf8               LineNumberTable\n   #132 = Utf8               StackMapTable\n   #133 = Utf8               readToNull\n   #134 = Utf8               (Ljava/io/DataInput;)[B\n-  #135 = Class              #161          // java/io/ByteArrayOutputStream\n-  #136 = Class              #168          // java/lang/Throwable\n-  #137 = Class              #248          // java/io/DataInput\n-  #138 = Class              #117          // \"[B\"\n-  #139 = Utf8               Exceptions\n-  #140 = Utf8               <init>\n-  #141 = Utf8               (Ljava/io/InputStream;)V\n-  #142 = Utf8               (Ljava/io/InputStream;Z)V\n-  #143 = Class              #207          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-  #144 = Class              #249          // java/io/InputStream\n-  #145 = Utf8               close\n-  #146 = Utf8               ()V\n-  #147 = Utf8               getCompressedCount\n-  #148 = Utf8               ()J\n-  #149 = Utf8               getMetaData\n-  #150 = Utf8               ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #151 = Utf8               init\n-  #152 = Utf8               (Z)Z\n-  #153 = Class              #214          // java/lang/String\n-  #154 = Utf8               read\n-  #155 = Utf8               ()I\n-  #156 = Utf8               ([BII)I\n-  #157 = Class              #232          // java/util/zip/DataFormatException\n-  #158 = Utf8               <clinit>\n-  #159 = Utf8               SourceFile\n-  #160 = Utf8               GzipCompressorInputStream.java\n-  #161 = Utf8               java/io/ByteArrayOutputStream\n-  #162 = NameAndType        #140:#146     // \"<init>\":()V\n-  #163 = Class              #248          // java/io/DataInput\n-  #164 = NameAndType        #250:#155     // readUnsignedByte:()I\n-  #165 = NameAndType        #251:#252     // write:(I)V\n-  #166 = NameAndType        #253:#254     // toByteArray:()[B\n-  #167 = NameAndType        #145:#146     // close:()V\n-  #168 = Utf8               java/lang/Throwable\n-  #169 = NameAndType        #255:#256     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #170 = NameAndType        #140:#142     // \"<init>\":(Ljava/io/InputStream;Z)V\n-  #171 = NameAndType        #116:#117     // buf:[B\n-  #172 = Utf8               java/util/zip/Inflater\n-  #173 = NameAndType        #140:#257     // \"<init>\":(Z)V\n-  #174 = NameAndType        #119:#120     // inf:Ljava/util/zip/Inflater;\n-  #175 = Utf8               java/util/zip/CRC32\n-  #176 = NameAndType        #121:#122     // crc:Ljava/util/zip/CRC32;\n-  #177 = NameAndType        #124:#117     // oneByte:[B\n-  #178 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n-  #179 = NameAndType        #125:#126     // parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #180 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n-  #181 = NameAndType        #140:#141     // \"<init>\":(Ljava/io/InputStream;)V\n-  #182 = NameAndType        #110:#111     // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-  #183 = NameAndType        #258:#259     // markSupported:()Z\n-  #184 = NameAndType        #112:#113     // in:Ljava/io/InputStream;\n-  #185 = Utf8               java/io/BufferedInputStream\n-  #186 = NameAndType        #114:#115     // decompressConcatenated:Z\n-  #187 = NameAndType        #151:#152     // init:(Z)Z\n-  #188 = NameAndType        #260:#146     // end:()V\n-  #189 = Class              #261          // java/lang/System\n-  #190 = Class              #249          // java/io/InputStream\n-  #191 = NameAndType        #262:#148     // getBytesRead:()J\n-  #192 = NameAndType        #127:#115     // $assertionsDisabled:Z\n-  #193 = Utf8               java/lang/AssertionError\n-  #194 = NameAndType        #154:#155     // read:()I\n-  #195 = Utf8               java/io/IOException\n-  #196 = Utf8               Input is not in the .gz format\n-  #197 = Utf8               Garbage after a valid .gz stream\n-  #198 = NameAndType        #140:#263     // \"<init>\":(Ljava/lang/String;)V\n-  #199 = Utf8               java/io/DataInputStream\n-  #200 = Utf8               java/util/zip/Deflater\n-  #201 = Utf8               java/lang/StringBuilder\n-  #202 = Utf8               Unsupported compression method\n-  #203 = NameAndType        #264:#265     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #204 = NameAndType        #264:#266     // append:(I)Ljava/lang/StringBuilder;\n-  #205 = Utf8                in the .gz header\n-  #206 = NameAndType        #267:#268     // toString:()Ljava/lang/String;\n-  #207 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-  #208 = Utf8               Reserved flags are set in the .gz header\n-  #209 = Class              #269          // org/apache/commons/compress/utils/ByteUtils\n-  #210 = NameAndType        #270:#271     // fromLittleEndian:(Ljava/io/DataInput;I)J\n-  #211 = NameAndType        #272:#273     // setModificationTime:(J)V\n-  #212 = NameAndType        #274:#252     // setCompressionLevel:(I)V\n-  #213 = NameAndType        #275:#252     // setOperatingSystem:(I)V\n-  #214 = Utf8               java/lang/String\n-  #215 = NameAndType        #133:#134     // readToNull:(Ljava/io/DataInput;)[B\n-  #216 = Class              #276          // org/apache/commons/compress/compressors/gzip/GzipUtils\n-  #217 = NameAndType        #277:#278     // GZIP_ENCODING:Ljava/nio/charset/Charset;\n-  #218 = NameAndType        #140:#279     // \"<init>\":([BLjava/nio/charset/Charset;)V\n-  #219 = NameAndType        #280:#263     // setFilename:(Ljava/lang/String;)V\n-  #220 = NameAndType        #281:#263     // setComment:(Ljava/lang/String;)V\n-  #221 = NameAndType        #282:#283     // readShort:()S\n-  #222 = NameAndType        #284:#146     // reset:()V\n-  #223 = NameAndType        #154:#156     // read:([BII)I\n-  #224 = NameAndType        #123:#115     // endReached:Z\n-  #225 = NameAndType        #285:#259     // needsInput:()Z\n-  #226 = NameAndType        #286:#252     // mark:(I)V\n-  #227 = NameAndType        #154:#287     // read:([B)I\n-  #228 = NameAndType        #118:#99      // bufUsed:I\n-  #229 = Utf8               java/io/EOFException\n-  #230 = NameAndType        #288:#289     // setInput:([BII)V\n-  #231 = NameAndType        #290:#156     // inflate:([BII)I\n-  #232 = Utf8               java/util/zip/DataFormatException\n-  #233 = Utf8               Gzip-compressed data is corrupt\n-  #234 = NameAndType        #291:#289     // update:([BII)V\n-  #235 = NameAndType        #292:#252     // count:(I)V\n-  #236 = NameAndType        #293:#259     // finished:()Z\n-  #237 = NameAndType        #294:#155     // getRemaining:()I\n-  #238 = Class              #295          // org/apache/commons/compress/utils/IOUtils\n-  #239 = NameAndType        #296:#297     // skip:(Ljava/io/InputStream;J)J\n-  #240 = NameAndType        #298:#148     // getValue:()J\n-  #241 = Utf8               Gzip-compressed data is corrupt (CRC32 error)\n-  #242 = NameAndType        #299:#148     // getBytesWritten:()J\n-  #243 = Utf8               Gzip-compressed data is corrupt(uncompressed size mismatch)\n-  #244 = Class              #300          // java/lang/Class\n-  #245 = NameAndType        #301:#259     // desiredAssertionStatus:()Z\n-  #246 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-  #247 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #248 = Utf8               java/io/DataInput\n-  #249 = Utf8               java/io/InputStream\n-  #250 = Utf8               readUnsignedByte\n-  #251 = Utf8               write\n-  #252 = Utf8               (I)V\n-  #253 = Utf8               toByteArray\n-  #254 = Utf8               ()[B\n-  #255 = Utf8               addSuppressed\n-  #256 = Utf8               (Ljava/lang/Throwable;)V\n-  #257 = Utf8               (Z)V\n-  #258 = Utf8               markSupported\n-  #259 = Utf8               ()Z\n-  #260 = Utf8               end\n-  #261 = Utf8               java/lang/System\n-  #262 = Utf8               getBytesRead\n-  #263 = Utf8               (Ljava/lang/String;)V\n-  #264 = Utf8               append\n-  #265 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #266 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #267 = Utf8               toString\n-  #268 = Utf8               ()Ljava/lang/String;\n-  #269 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #270 = Utf8               fromLittleEndian\n-  #271 = Utf8               (Ljava/io/DataInput;I)J\n-  #272 = Utf8               setModificationTime\n-  #273 = Utf8               (J)V\n-  #274 = Utf8               setCompressionLevel\n-  #275 = Utf8               setOperatingSystem\n-  #276 = Utf8               org/apache/commons/compress/compressors/gzip/GzipUtils\n-  #277 = Utf8               GZIP_ENCODING\n-  #278 = Utf8               Ljava/nio/charset/Charset;\n-  #279 = Utf8               ([BLjava/nio/charset/Charset;)V\n-  #280 = Utf8               setFilename\n-  #281 = Utf8               setComment\n-  #282 = Utf8               readShort\n-  #283 = Utf8               ()S\n-  #284 = Utf8               reset\n-  #285 = Utf8               needsInput\n-  #286 = Utf8               mark\n-  #287 = Utf8               ([B)I\n-  #288 = Utf8               setInput\n-  #289 = Utf8               ([BII)V\n-  #290 = Utf8               inflate\n-  #291 = Utf8               update\n-  #292 = Utf8               count\n-  #293 = Utf8               finished\n-  #294 = Utf8               getRemaining\n-  #295 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #296 = Utf8               skip\n-  #297 = Utf8               (Ljava/io/InputStream;J)J\n-  #298 = Utf8               getValue\n-  #299 = Utf8               getBytesWritten\n-  #300 = Utf8               java/lang/Class\n-  #301 = Utf8               desiredAssertionStatus\n+  #135 = Class              #241          // java/io/DataInput\n+  #136 = Utf8               Exceptions\n+  #137 = Utf8               <init>\n+  #138 = Utf8               (Ljava/io/InputStream;)V\n+  #139 = Utf8               (Ljava/io/InputStream;Z)V\n+  #140 = Class              #242          // java/io/InputStream\n+  #141 = Utf8               close\n+  #142 = Utf8               ()V\n+  #143 = Utf8               getCompressedCount\n+  #144 = Utf8               ()J\n+  #145 = Utf8               getMetaData\n+  #146 = Utf8               ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+  #147 = Utf8               init\n+  #148 = Utf8               (Z)Z\n+  #149 = Utf8               read\n+  #150 = Utf8               ()I\n+  #151 = Utf8               ([BII)I\n+  #152 = Class              #117          // \"[B\"\n+  #153 = Utf8               <clinit>\n+  #154 = Utf8               SourceFile\n+  #155 = Utf8               GzipCompressorInputStream.java\n+  #156 = Utf8               java/io/ByteArrayOutputStream\n+  #157 = NameAndType        #137:#142     // \"<init>\":()V\n+  #158 = NameAndType        #243:#150     // readUnsignedByte:()I\n+  #159 = NameAndType        #244:#245     // write:(I)V\n+  #160 = NameAndType        #246:#247     // toByteArray:()[B\n+  #161 = NameAndType        #141:#142     // close:()V\n+  #162 = Utf8               java/lang/Throwable\n+  #163 = NameAndType        #248:#249     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #164 = NameAndType        #137:#139     // \"<init>\":(Ljava/io/InputStream;Z)V\n+  #165 = NameAndType        #116:#117     // buf:[B\n+  #166 = Utf8               java/util/zip/Inflater\n+  #167 = NameAndType        #137:#250     // \"<init>\":(Z)V\n+  #168 = NameAndType        #119:#120     // inf:Ljava/util/zip/Inflater;\n+  #169 = Utf8               java/util/zip/CRC32\n+  #170 = NameAndType        #121:#122     // crc:Ljava/util/zip/CRC32;\n+  #171 = NameAndType        #124:#117     // oneByte:[B\n+  #172 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n+  #173 = NameAndType        #125:#126     // parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+  #174 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n+  #175 = NameAndType        #137:#138     // \"<init>\":(Ljava/io/InputStream;)V\n+  #176 = NameAndType        #110:#111     // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+  #177 = NameAndType        #251:#252     // markSupported:()Z\n+  #178 = NameAndType        #112:#113     // in:Ljava/io/InputStream;\n+  #179 = Utf8               java/io/BufferedInputStream\n+  #180 = NameAndType        #114:#115     // decompressConcatenated:Z\n+  #181 = NameAndType        #147:#148     // init:(Z)Z\n+  #182 = NameAndType        #253:#142     // end:()V\n+  #183 = Class              #254          // java/lang/System\n+  #184 = NameAndType        #255:#144     // getBytesRead:()J\n+  #185 = NameAndType        #127:#115     // $assertionsDisabled:Z\n+  #186 = Utf8               java/lang/AssertionError\n+  #187 = NameAndType        #149:#150     // read:()I\n+  #188 = Utf8               java/io/IOException\n+  #189 = Utf8               Input is not in the .gz format\n+  #190 = Utf8               Garbage after a valid .gz stream\n+  #191 = NameAndType        #137:#256     // \"<init>\":(Ljava/lang/String;)V\n+  #192 = Utf8               java/io/DataInputStream\n+  #193 = Utf8               java/util/zip/Deflater\n+  #194 = Utf8               java/lang/StringBuilder\n+  #195 = Utf8               Unsupported compression method\n+  #196 = NameAndType        #257:#258     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #197 = NameAndType        #257:#259     // append:(I)Ljava/lang/StringBuilder;\n+  #198 = Utf8                in the .gz header\n+  #199 = NameAndType        #260:#261     // toString:()Ljava/lang/String;\n+  #200 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+  #201 = Utf8               Reserved flags are set in the .gz header\n+  #202 = Class              #262          // org/apache/commons/compress/utils/ByteUtils\n+  #203 = NameAndType        #263:#264     // fromLittleEndian:(Ljava/io/DataInput;I)J\n+  #204 = NameAndType        #265:#266     // setModificationTime:(J)V\n+  #205 = NameAndType        #267:#245     // setCompressionLevel:(I)V\n+  #206 = NameAndType        #268:#245     // setOperatingSystem:(I)V\n+  #207 = Utf8               java/lang/String\n+  #208 = NameAndType        #133:#134     // readToNull:(Ljava/io/DataInput;)[B\n+  #209 = Class              #269          // org/apache/commons/compress/compressors/gzip/GzipUtils\n+  #210 = NameAndType        #270:#271     // GZIP_ENCODING:Ljava/nio/charset/Charset;\n+  #211 = NameAndType        #137:#272     // \"<init>\":([BLjava/nio/charset/Charset;)V\n+  #212 = NameAndType        #273:#256     // setFilename:(Ljava/lang/String;)V\n+  #213 = NameAndType        #274:#256     // setComment:(Ljava/lang/String;)V\n+  #214 = NameAndType        #275:#276     // readShort:()S\n+  #215 = NameAndType        #277:#142     // reset:()V\n+  #216 = NameAndType        #149:#151     // read:([BII)I\n+  #217 = NameAndType        #123:#115     // endReached:Z\n+  #218 = NameAndType        #278:#252     // needsInput:()Z\n+  #219 = NameAndType        #279:#245     // mark:(I)V\n+  #220 = NameAndType        #149:#280     // read:([B)I\n+  #221 = NameAndType        #118:#99      // bufUsed:I\n+  #222 = Utf8               java/io/EOFException\n+  #223 = NameAndType        #281:#282     // setInput:([BII)V\n+  #224 = NameAndType        #283:#151     // inflate:([BII)I\n+  #225 = Utf8               java/util/zip/DataFormatException\n+  #226 = Utf8               Gzip-compressed data is corrupt\n+  #227 = NameAndType        #284:#282     // update:([BII)V\n+  #228 = NameAndType        #285:#245     // count:(I)V\n+  #229 = NameAndType        #286:#252     // finished:()Z\n+  #230 = NameAndType        #287:#150     // getRemaining:()I\n+  #231 = Class              #288          // org/apache/commons/compress/utils/IOUtils\n+  #232 = NameAndType        #289:#290     // skip:(Ljava/io/InputStream;J)J\n+  #233 = NameAndType        #291:#144     // getValue:()J\n+  #234 = Utf8               Gzip-compressed data is corrupt (CRC32 error)\n+  #235 = NameAndType        #292:#144     // getBytesWritten:()J\n+  #236 = Utf8               Gzip-compressed data is corrupt(uncompressed size mismatch)\n+  #237 = Class              #293          // java/lang/Class\n+  #238 = NameAndType        #294:#252     // desiredAssertionStatus:()Z\n+  #239 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+  #240 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+  #241 = Utf8               java/io/DataInput\n+  #242 = Utf8               java/io/InputStream\n+  #243 = Utf8               readUnsignedByte\n+  #244 = Utf8               write\n+  #245 = Utf8               (I)V\n+  #246 = Utf8               toByteArray\n+  #247 = Utf8               ()[B\n+  #248 = Utf8               addSuppressed\n+  #249 = Utf8               (Ljava/lang/Throwable;)V\n+  #250 = Utf8               (Z)V\n+  #251 = Utf8               markSupported\n+  #252 = Utf8               ()Z\n+  #253 = Utf8               end\n+  #254 = Utf8               java/lang/System\n+  #255 = Utf8               getBytesRead\n+  #256 = Utf8               (Ljava/lang/String;)V\n+  #257 = Utf8               append\n+  #258 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #259 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #260 = Utf8               toString\n+  #261 = Utf8               ()Ljava/lang/String;\n+  #262 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+  #263 = Utf8               fromLittleEndian\n+  #264 = Utf8               (Ljava/io/DataInput;I)J\n+  #265 = Utf8               setModificationTime\n+  #266 = Utf8               (J)V\n+  #267 = Utf8               setCompressionLevel\n+  #268 = Utf8               setOperatingSystem\n+  #269 = Utf8               org/apache/commons/compress/compressors/gzip/GzipUtils\n+  #270 = Utf8               GZIP_ENCODING\n+  #271 = Utf8               Ljava/nio/charset/Charset;\n+  #272 = Utf8               ([BLjava/nio/charset/Charset;)V\n+  #273 = Utf8               setFilename\n+  #274 = Utf8               setComment\n+  #275 = Utf8               readShort\n+  #276 = Utf8               ()S\n+  #277 = Utf8               reset\n+  #278 = Utf8               needsInput\n+  #279 = Utf8               mark\n+  #280 = Utf8               ([B)I\n+  #281 = Utf8               setInput\n+  #282 = Utf8               ([BII)V\n+  #283 = Utf8               inflate\n+  #284 = Utf8               update\n+  #285 = Utf8               count\n+  #286 = Utf8               finished\n+  #287 = Utf8               getRemaining\n+  #288 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #289 = Utf8               skip\n+  #290 = Utf8               (Ljava/io/InputStream;J)J\n+  #291 = Utf8               getValue\n+  #292 = Utf8               getBytesWritten\n+  #293 = Utf8               java/lang/Class\n+  #294 = Utf8               desiredAssertionStatus\n {\n   private static final int FHCRC = 2;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 2\n \n   private static final int FEXTRA = 4;\n@@ -406,113 +399,74 @@\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n \n   private static byte[] readToNull(java.io.DataInput) throws java.io.IOException;\n     descriptor: (Ljava/io/DataInput;)[B\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n-      stack=2, locals=8, args_size=1\n+      stack=2, locals=4, args_size=1\n          0: new           #1                  // class java/io/ByteArrayOutputStream\n          3: dup\n          4: invokespecial #2                  // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n          7: astore_1\n-         8: aconst_null\n-         9: astore_2\n-        10: iconst_0\n-        11: istore_3\n-        12: aload_0\n-        13: invokeinterface #3,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-        18: dup\n-        19: istore_3\n-        20: ifeq          31\n-        23: aload_1\n-        24: iload_3\n-        25: invokevirtual #4                  // Method java/io/ByteArrayOutputStream.write:(I)V\n-        28: goto          12\n-        31: aload_1\n-        32: invokevirtual #5                  // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n-        35: astore        4\n-        37: aload_1\n-        38: ifnull        67\n-        41: aload_2\n-        42: ifnull        63\n-        45: aload_1\n-        46: invokevirtual #6                  // Method java/io/ByteArrayOutputStream.close:()V\n-        49: goto          67\n-        52: astore        5\n+         8: iconst_0\n+         9: istore_2\n+        10: aload_0\n+        11: invokeinterface #3,  1            // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+        16: dup\n+        17: istore_2\n+        18: ifeq          29\n+        21: aload_1\n+        22: iload_2\n+        23: invokevirtual #4                  // Method java/io/ByteArrayOutputStream.write:(I)V\n+        26: goto          10\n+        29: aload_1\n+        30: invokevirtual #5                  // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n+        33: astore_3\n+        34: aload_1\n+        35: invokevirtual #6                  // Method java/io/ByteArrayOutputStream.close:()V\n+        38: aload_3\n+        39: areturn\n+        40: astore_2\n+        41: aload_1\n+        42: invokevirtual #6                  // Method java/io/ByteArrayOutputStream.close:()V\n+        45: goto          54\n+        48: astore_3\n+        49: aload_2\n+        50: aload_3\n+        51: invokevirtual #8                  // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n         54: aload_2\n-        55: aload         5\n-        57: invokevirtual #8                  // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-        60: goto          67\n-        63: aload_1\n-        64: invokevirtual #6                  // Method java/io/ByteArrayOutputStream.close:()V\n-        67: aload         4\n-        69: areturn\n-        70: astore_3\n-        71: aload_3\n-        72: astore_2\n-        73: aload_3\n-        74: athrow\n-        75: astore        6\n-        77: aload_1\n-        78: ifnull        107\n-        81: aload_2\n-        82: ifnull        103\n-        85: aload_1\n-        86: invokevirtual #6                  // Method java/io/ByteArrayOutputStream.close:()V\n-        89: goto          107\n-        92: astore        7\n-        94: aload_2\n-        95: aload         7\n-        97: invokevirtual #8                  // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-       100: goto          107\n-       103: aload_1\n-       104: invokevirtual #6                  // Method java/io/ByteArrayOutputStream.close:()V\n-       107: aload         6\n-       109: athrow\n+        55: athrow\n       Exception table:\n          from    to  target type\n-            45    49    52   Class java/lang/Throwable\n-            10    37    70   Class java/lang/Throwable\n-            10    37    75   any\n-            85    89    92   Class java/lang/Throwable\n-            70    77    75   any\n+             8    34    40   Class java/lang/Throwable\n+            41    45    48   Class java/lang/Throwable\n       LineNumberTable:\n         line 100: 0\n-        line 101: 10\n-        line 102: 12\n-        line 103: 23\n-        line 105: 31\n-        line 106: 37\n-        line 105: 67\n-        line 100: 70\n-        line 106: 75\n-      StackMapTable: number_of_entries = 10\n-        frame_type = 254 /* append */\n-          offset_delta = 12\n-          locals = [ class java/io/ByteArrayOutputStream, class java/lang/Throwable, int ]\n+        line 101: 8\n+        line 102: 10\n+        line 103: 21\n+        line 105: 29\n+        line 106: 34\n+        line 105: 38\n+        line 100: 40\n+      StackMapTable: number_of_entries = 5\n+        frame_type = 253 /* append */\n+          offset_delta = 10\n+          locals = [ class java/io/ByteArrayOutputStream, int ]\n         frame_type = 18 /* same */\n         frame_type = 255 /* full_frame */\n-          offset_delta = 20\n-          locals = [ class java/io/DataInput, class java/io/ByteArrayOutputStream, class java/lang/Throwable, int, class \"[B\" ]\n+          offset_delta = 10\n+          locals = [ class java/io/DataInput, class java/io/ByteArrayOutputStream ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 10 /* same */\n-        frame_type = 3 /* same */\n         frame_type = 255 /* full_frame */\n-          offset_delta = 2\n+          offset_delta = 7\n           locals = [ class java/io/DataInput, class java/io/ByteArrayOutputStream, class java/lang/Throwable ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 68 /* same_locals_1_stack_item */\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 255 /* full_frame */\n-          offset_delta = 16\n-          locals = [ class java/io/DataInput, class java/io/ByteArrayOutputStream, class java/lang/Throwable, top, top, top, class java/lang/Throwable ]\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 10 /* same */\n-        frame_type = 3 /* same */\n+        frame_type = 5 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   public org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream(java.io.InputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n@@ -847,14 +801,16 @@\n       LineNumberTable:\n         line 228: 0\n         line 231: 25\n         line 235: 33\n         line 236: 42\n         line 239: 44\n         line 240: 63\n+        line 241: 71\n+        line 242: 76\n         line 246: 82\n         line 247: 94\n         line 248: 102\n         line 249: 109\n         line 253: 142\n         line 254: 150\n         line 255: 159\n"}]}
