{"diffoscope-json-version": 1, "source1": "first/Base64.class", "source2": "second/Base64.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,96 +1,96 @@\n-  SHA-256 checksum ce68de86e501edc8f235ff7cdcb0cea7b154dfaccb97f2b5556f81809867b30b\n+  SHA-256 checksum 16faeace1241137e367095def88731576c44f1b170ba7a1bfeedfc051625338e\n   Compiled from \"Base64.java\"\n public class org.apache.commons.net.util.Base64\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #2                          // org/apache/commons/net/util/Base64\n   super_class: #80                        // java/lang/Object\n   interfaces: 0, fields: 23, methods: 43, attributes: 1\n Constant pool:\n-    #1 = Methodref          #2.#176       // org/apache/commons/net/util/Base64.\"<init>\":(Z)V\n-    #2 = Class              #177          // org/apache/commons/net/util/Base64\n-    #3 = Fieldref           #2.#178       // org/apache/commons/net/util/Base64.CHUNK_SEPARATOR:[B\n-    #4 = Methodref          #2.#179       // org/apache/commons/net/util/Base64.\"<init>\":(I[BZ)V\n-    #5 = Methodref          #2.#180       // org/apache/commons/net/util/Base64.\"<init>\":(I[B)V\n-    #6 = Methodref          #80.#181      // java/lang/Object.\"<init>\":()V\n-    #7 = Fieldref           #2.#182       // org/apache/commons/net/util/Base64.EMPTY_BYTE_ARRAY:[B\n-    #8 = Fieldref           #2.#183       // org/apache/commons/net/util/Base64.lineLength:I\n-    #9 = Fieldref           #2.#184       // org/apache/commons/net/util/Base64.lineSeparator:[B\n-   #10 = Methodref          #185.#186     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #11 = Fieldref           #2.#187       // org/apache/commons/net/util/Base64.encodeSize:I\n-   #12 = Fieldref           #2.#188       // org/apache/commons/net/util/Base64.decodeSize:I\n-   #13 = Methodref          #2.#189       // org/apache/commons/net/util/Base64.containsBase64Byte:([B)Z\n-   #14 = Methodref          #2.#190       // org/apache/commons/net/util/Base64.newStringUtf8:([B)Ljava/lang/String;\n-   #15 = Class              #191          // java/lang/IllegalArgumentException\n-   #16 = Class              #192          // java/lang/StringBuilder\n-   #17 = Methodref          #16.#181      // java/lang/StringBuilder.\"<init>\":()V\n-   #18 = String             #193          // lineSeperator must not contain base64 characters: [\n-   #19 = Methodref          #16.#194      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #20 = String             #195          // ]\n-   #21 = Methodref          #16.#196      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #22 = Methodref          #15.#197      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #23 = Fieldref           #2.#198       // org/apache/commons/net/util/Base64.URL_SAFE_ENCODE_TABLE:[B\n-   #24 = Fieldref           #2.#199       // org/apache/commons/net/util/Base64.STANDARD_ENCODE_TABLE:[B\n-   #25 = Fieldref           #2.#200       // org/apache/commons/net/util/Base64.encodeTable:[B\n-   #26 = Fieldref           #2.#201       // org/apache/commons/net/util/Base64.buffer:[B\n-   #27 = Fieldref           #2.#202       // org/apache/commons/net/util/Base64.pos:I\n-   #28 = Fieldref           #2.#203       // org/apache/commons/net/util/Base64.readPos:I\n-   #29 = Methodref          #2.#204       // org/apache/commons/net/util/Base64.avail:()I\n-   #30 = Methodref          #205.#206     // java/lang/Math.min:(II)I\n-   #31 = Fieldref           #2.#207       // org/apache/commons/net/util/Base64.eof:Z\n-   #32 = Methodref          #2.#208       // org/apache/commons/net/util/Base64.resizeBuffer:()V\n-   #33 = Fieldref           #2.#209       // org/apache/commons/net/util/Base64.modulus:I\n-   #34 = Fieldref           #2.#210       // org/apache/commons/net/util/Base64.x:I\n-   #35 = Fieldref           #2.#211       // org/apache/commons/net/util/Base64.currentLinePos:I\n-   #36 = Fieldref           #2.#212       // org/apache/commons/net/util/Base64.DECODE_TABLE:[B\n-   #37 = Methodref          #2.#213       // org/apache/commons/net/util/Base64.isBase64:(B)Z\n-   #38 = Methodref          #2.#214       // org/apache/commons/net/util/Base64.isWhiteSpace:(B)Z\n-   #39 = Methodref          #2.#215       // org/apache/commons/net/util/Base64.encodeBase64:([BZ)[B\n-   #40 = Methodref          #2.#216       // org/apache/commons/net/util/Base64.encodeBase64:([BZZ)[B\n-   #41 = Methodref          #2.#217       // org/apache/commons/net/util/Base64.getBytesUtf8:(Ljava/lang/String;)[B\n-   #42 = Methodref          #2.#218       // org/apache/commons/net/util/Base64.decode:([B)[B\n-   #43 = String             #219          // UTF8\n-   #44 = Methodref          #63.#220      // java/lang/String.getBytes:(Ljava/lang/String;)[B\n-   #45 = Class              #221          // java/io/UnsupportedEncodingException\n-   #46 = Class              #222          // java/lang/RuntimeException\n-   #47 = Methodref          #46.#223      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #48 = Methodref          #2.#224       // org/apache/commons/net/util/Base64.reset:()V\n-   #49 = Methodref          #2.#225       // org/apache/commons/net/util/Base64.setInitialBuffer:([BII)V\n-   #50 = Methodref          #2.#226       // org/apache/commons/net/util/Base64.decode:([BII)V\n-   #51 = Methodref          #2.#227       // org/apache/commons/net/util/Base64.readResults:([BII)I\n-   #52 = Class              #228          // java/lang/Integer\n+    #1 = Methodref          #2.#173       // org/apache/commons/net/util/Base64.\"<init>\":(Z)V\n+    #2 = Class              #174          // org/apache/commons/net/util/Base64\n+    #3 = Fieldref           #2.#175       // org/apache/commons/net/util/Base64.CHUNK_SEPARATOR:[B\n+    #4 = Methodref          #2.#176       // org/apache/commons/net/util/Base64.\"<init>\":(I[BZ)V\n+    #5 = Methodref          #2.#177       // org/apache/commons/net/util/Base64.\"<init>\":(I[B)V\n+    #6 = Methodref          #80.#178      // java/lang/Object.\"<init>\":()V\n+    #7 = Fieldref           #2.#179       // org/apache/commons/net/util/Base64.EMPTY_BYTE_ARRAY:[B\n+    #8 = Fieldref           #2.#180       // org/apache/commons/net/util/Base64.lineLength:I\n+    #9 = Fieldref           #2.#181       // org/apache/commons/net/util/Base64.lineSeparator:[B\n+   #10 = Methodref          #182.#183     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #11 = Fieldref           #2.#184       // org/apache/commons/net/util/Base64.encodeSize:I\n+   #12 = Fieldref           #2.#185       // org/apache/commons/net/util/Base64.decodeSize:I\n+   #13 = Methodref          #2.#186       // org/apache/commons/net/util/Base64.containsBase64Byte:([B)Z\n+   #14 = Methodref          #2.#187       // org/apache/commons/net/util/Base64.newStringUtf8:([B)Ljava/lang/String;\n+   #15 = Class              #188          // java/lang/IllegalArgumentException\n+   #16 = Class              #189          // java/lang/StringBuilder\n+   #17 = Methodref          #16.#178      // java/lang/StringBuilder.\"<init>\":()V\n+   #18 = String             #190          // lineSeperator must not contain base64 characters: [\n+   #19 = Methodref          #16.#191      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #20 = String             #192          // ]\n+   #21 = Methodref          #16.#193      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #22 = Methodref          #15.#194      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #23 = Fieldref           #2.#195       // org/apache/commons/net/util/Base64.URL_SAFE_ENCODE_TABLE:[B\n+   #24 = Fieldref           #2.#196       // org/apache/commons/net/util/Base64.STANDARD_ENCODE_TABLE:[B\n+   #25 = Fieldref           #2.#197       // org/apache/commons/net/util/Base64.encodeTable:[B\n+   #26 = Fieldref           #2.#198       // org/apache/commons/net/util/Base64.buffer:[B\n+   #27 = Fieldref           #2.#199       // org/apache/commons/net/util/Base64.pos:I\n+   #28 = Fieldref           #2.#200       // org/apache/commons/net/util/Base64.readPos:I\n+   #29 = Methodref          #2.#201       // org/apache/commons/net/util/Base64.avail:()I\n+   #30 = Methodref          #202.#203     // java/lang/Math.min:(II)I\n+   #31 = Fieldref           #2.#204       // org/apache/commons/net/util/Base64.eof:Z\n+   #32 = Methodref          #2.#205       // org/apache/commons/net/util/Base64.resizeBuffer:()V\n+   #33 = Fieldref           #2.#206       // org/apache/commons/net/util/Base64.modulus:I\n+   #34 = Fieldref           #2.#207       // org/apache/commons/net/util/Base64.x:I\n+   #35 = Fieldref           #2.#208       // org/apache/commons/net/util/Base64.currentLinePos:I\n+   #36 = Fieldref           #2.#209       // org/apache/commons/net/util/Base64.DECODE_TABLE:[B\n+   #37 = Methodref          #2.#210       // org/apache/commons/net/util/Base64.isBase64:(B)Z\n+   #38 = Methodref          #2.#211       // org/apache/commons/net/util/Base64.isWhiteSpace:(B)Z\n+   #39 = Methodref          #2.#212       // org/apache/commons/net/util/Base64.encodeBase64:([BZ)[B\n+   #40 = Methodref          #2.#213       // org/apache/commons/net/util/Base64.encodeBase64:([BZZ)[B\n+   #41 = Methodref          #2.#214       // org/apache/commons/net/util/Base64.getBytesUtf8:(Ljava/lang/String;)[B\n+   #42 = Methodref          #2.#215       // org/apache/commons/net/util/Base64.decode:([B)[B\n+   #43 = String             #216          // UTF8\n+   #44 = Methodref          #63.#217      // java/lang/String.getBytes:(Ljava/lang/String;)[B\n+   #45 = Class              #218          // java/io/UnsupportedEncodingException\n+   #46 = Class              #219          // java/lang/RuntimeException\n+   #47 = Methodref          #46.#220      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n+   #48 = Methodref          #2.#221       // org/apache/commons/net/util/Base64.reset:()V\n+   #49 = Methodref          #2.#222       // org/apache/commons/net/util/Base64.setInitialBuffer:([BII)V\n+   #50 = Methodref          #2.#223       // org/apache/commons/net/util/Base64.decode:([BII)V\n+   #51 = Methodref          #2.#224       // org/apache/commons/net/util/Base64.readResults:([BII)I\n+   #52 = Class              #225          // java/lang/Integer\n    #53 = Integer            2147483647\n-   #54 = Methodref          #2.#229       // org/apache/commons/net/util/Base64.encodeBase64:([BZZI)[B\n-   #55 = Methodref          #2.#230       // org/apache/commons/net/util/Base64.getEncodeLength:([BI[B)J\n-   #56 = String             #231          // Input array too big, the output array would be bigger (\n-   #57 = Methodref          #16.#232      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #58 = String             #233          // ) than the specified maxium size of\n-   #59 = Methodref          #16.#234      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #60 = Methodref          #2.#235       // org/apache/commons/net/util/Base64.encode:([B)[B\n-   #61 = Methodref          #2.#181       // org/apache/commons/net/util/Base64.\"<init>\":()V\n-   #62 = Methodref          #2.#236       // org/apache/commons/net/util/Base64.decode:(Ljava/lang/String;)[B\n-   #63 = Class              #237          // java/lang/String\n-   #64 = Methodref          #63.#238      // java/lang/String.\"<init>\":([BLjava/lang/String;)V\n-   #65 = Methodref          #2.#239       // org/apache/commons/net/util/Base64.encode:([BII)V\n-   #66 = Methodref          #2.#240       // org/apache/commons/net/util/Base64.isUrlSafe:()Z\n+   #54 = Methodref          #2.#226       // org/apache/commons/net/util/Base64.encodeBase64:([BZZI)[B\n+   #55 = Methodref          #2.#227       // org/apache/commons/net/util/Base64.getEncodeLength:([BI[B)J\n+   #56 = String             #228          // Input array too big, the output array would be bigger (\n+   #57 = Methodref          #16.#229      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #58 = String             #230          // ) than the specified maxium size of\n+   #59 = Methodref          #16.#231      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #60 = Methodref          #2.#232       // org/apache/commons/net/util/Base64.encode:([B)[B\n+   #61 = Methodref          #2.#178       // org/apache/commons/net/util/Base64.\"<init>\":()V\n+   #62 = Methodref          #2.#233       // org/apache/commons/net/util/Base64.decode:(Ljava/lang/String;)[B\n+   #63 = Class              #234          // java/lang/String\n+   #64 = Methodref          #63.#235      // java/lang/String.\"<init>\":([BLjava/lang/String;)V\n+   #65 = Methodref          #2.#236       // org/apache/commons/net/util/Base64.encode:([BII)V\n+   #66 = Methodref          #2.#237       // org/apache/commons/net/util/Base64.isUrlSafe:()Z\n    #67 = Long               4l\n-   #69 = Class              #241          // java/math/BigInteger\n-   #70 = Methodref          #2.#242       // org/apache/commons/net/util/Base64.decodeBase64:([B)[B\n-   #71 = Methodref          #69.#180      // java/math/BigInteger.\"<init>\":(I[B)V\n-   #72 = Class              #243          // java/lang/NullPointerException\n-   #73 = String             #244          // encodeInteger called with null parameter\n-   #74 = Methodref          #72.#197      // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n-   #75 = Methodref          #2.#245       // org/apache/commons/net/util/Base64.toIntegerBytes:(Ljava/math/BigInteger;)[B\n-   #76 = Methodref          #69.#246      // java/math/BigInteger.bitLength:()I\n-   #77 = Methodref          #69.#247      // java/math/BigInteger.toByteArray:()[B\n-   #78 = Methodref          #248.#249     // \"[B\".clone:()Ljava/lang/Object;\n+   #69 = Class              #238          // java/math/BigInteger\n+   #70 = Methodref          #2.#239       // org/apache/commons/net/util/Base64.decodeBase64:([B)[B\n+   #71 = Methodref          #69.#177      // java/math/BigInteger.\"<init>\":(I[B)V\n+   #72 = Class              #240          // java/lang/NullPointerException\n+   #73 = String             #241          // encodeInteger called with null parameter\n+   #74 = Methodref          #72.#194      // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n+   #75 = Methodref          #2.#242       // org/apache/commons/net/util/Base64.toIntegerBytes:(Ljava/math/BigInteger;)[B\n+   #76 = Methodref          #69.#243      // java/math/BigInteger.bitLength:()I\n+   #77 = Methodref          #69.#244      // java/math/BigInteger.toByteArray:()[B\n+   #78 = Methodref          #245.#246     // \"[B\".clone:()Ljava/lang/Object;\n    #79 = Class              #90           // \"[B\"\n-   #80 = Class              #250          // java/lang/Object\n+   #80 = Class              #247          // java/lang/Object\n    #81 = Utf8               DEFAULT_BUFFER_RESIZE_FACTOR\n    #82 = Utf8               I\n    #83 = Utf8               ConstantValue\n    #84 = Integer            2\n    #85 = Utf8               DEFAULT_BUFFER_SIZE\n    #86 = Integer            8192\n    #87 = Utf8               CHUNK_SIZE\n@@ -126,161 +126,158 @@\n   #117 = Utf8               Code\n   #118 = Utf8               LineNumberTable\n   #119 = Utf8               (Z)V\n   #120 = Utf8               (I)V\n   #121 = Utf8               (I[B)V\n   #122 = Utf8               (I[BZ)V\n   #123 = Utf8               StackMapTable\n-  #124 = Class              #177          // org/apache/commons/net/util/Base64\n-  #125 = Utf8               isUrlSafe\n-  #126 = Utf8               ()Z\n-  #127 = Utf8               hasData\n-  #128 = Utf8               avail\n-  #129 = Utf8               ()I\n-  #130 = Utf8               resizeBuffer\n-  #131 = Utf8               readResults\n-  #132 = Utf8               ([BII)I\n-  #133 = Utf8               setInitialBuffer\n-  #134 = Utf8               ([BII)V\n-  #135 = Utf8               encode\n-  #136 = Utf8               decode\n-  #137 = Utf8               isBase64\n-  #138 = Utf8               (B)Z\n-  #139 = Utf8               isArrayByteBase64\n-  #140 = Utf8               ([B)Z\n-  #141 = Utf8               containsBase64Byte\n-  #142 = Utf8               encodeBase64\n-  #143 = Utf8               ([B)[B\n-  #144 = Utf8               encodeBase64String\n-  #145 = Utf8               ([B)Ljava/lang/String;\n-  #146 = Utf8               encodeBase64StringUnChunked\n-  #147 = Utf8               ([BZ)Ljava/lang/String;\n-  #148 = Utf8               encodeBase64URLSafe\n-  #149 = Utf8               encodeBase64URLSafeString\n-  #150 = Utf8               encodeBase64Chunked\n-  #151 = Utf8               (Ljava/lang/String;)[B\n-  #152 = Utf8               getBytesUtf8\n-  #153 = Class              #221          // java/io/UnsupportedEncodingException\n-  #154 = Utf8               ([BZ)[B\n-  #155 = Utf8               ([BZZ)[B\n-  #156 = Utf8               ([BZZI)[B\n-  #157 = Utf8               decodeBase64\n-  #158 = Utf8               isWhiteSpace\n-  #159 = Utf8               encodeToString\n-  #160 = Utf8               newStringUtf8\n-  #161 = Class              #237          // java/lang/String\n-  #162 = Utf8               getEncodeLength\n-  #163 = Utf8               ([BI[B)J\n-  #164 = Utf8               decodeInteger\n-  #165 = Utf8               ([B)Ljava/math/BigInteger;\n-  #166 = Utf8               encodeInteger\n-  #167 = Utf8               (Ljava/math/BigInteger;)[B\n-  #168 = Utf8               toIntegerBytes\n-  #169 = Utf8               reset\n-  #170 = Utf8               getLineLength\n-  #171 = Utf8               getLineSeparator\n-  #172 = Utf8               ()[B\n-  #173 = Utf8               <clinit>\n-  #174 = Utf8               SourceFile\n-  #175 = Utf8               Base64.java\n-  #176 = NameAndType        #115:#119     // \"<init>\":(Z)V\n-  #177 = Utf8               org/apache/commons/net/util/Base64\n-  #178 = NameAndType        #89:#90       // CHUNK_SEPARATOR:[B\n-  #179 = NameAndType        #115:#122     // \"<init>\":(I[BZ)V\n-  #180 = NameAndType        #115:#121     // \"<init>\":(I[B)V\n-  #181 = NameAndType        #115:#116     // \"<init>\":()V\n-  #182 = NameAndType        #91:#90       // EMPTY_BYTE_ARRAY:[B\n-  #183 = NameAndType        #103:#82      // lineLength:I\n-  #184 = NameAndType        #104:#90      // lineSeparator:[B\n-  #185 = Class              #251          // java/lang/System\n-  #186 = NameAndType        #252:#253     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #187 = NameAndType        #106:#82      // encodeSize:I\n-  #188 = NameAndType        #105:#82      // decodeSize:I\n-  #189 = NameAndType        #141:#140     // containsBase64Byte:([B)Z\n-  #190 = NameAndType        #160:#145     // newStringUtf8:([B)Ljava/lang/String;\n-  #191 = Utf8               java/lang/IllegalArgumentException\n-  #192 = Utf8               java/lang/StringBuilder\n-  #193 = Utf8               lineSeperator must not contain base64 characters: [\n-  #194 = NameAndType        #254:#255     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #195 = Utf8               ]\n-  #196 = NameAndType        #256:#257     // toString:()Ljava/lang/String;\n-  #197 = NameAndType        #115:#258     // \"<init>\":(Ljava/lang/String;)V\n-  #198 = NameAndType        #93:#90       // URL_SAFE_ENCODE_TABLE:[B\n-  #199 = NameAndType        #92:#90       // STANDARD_ENCODE_TABLE:[B\n-  #200 = NameAndType        #102:#90      // encodeTable:[B\n-  #201 = NameAndType        #107:#90      // buffer:[B\n-  #202 = NameAndType        #108:#82      // pos:I\n-  #203 = NameAndType        #109:#82      // readPos:I\n-  #204 = NameAndType        #128:#129     // avail:()I\n-  #205 = Class              #259          // java/lang/Math\n-  #206 = NameAndType        #260:#261     // min:(II)I\n-  #207 = NameAndType        #112:#113     // eof:Z\n-  #208 = NameAndType        #130:#116     // resizeBuffer:()V\n-  #209 = NameAndType        #111:#82      // modulus:I\n-  #210 = NameAndType        #114:#82      // x:I\n-  #211 = NameAndType        #110:#82      // currentLinePos:I\n-  #212 = NameAndType        #97:#90       // DECODE_TABLE:[B\n-  #213 = NameAndType        #137:#138     // isBase64:(B)Z\n-  #214 = NameAndType        #158:#138     // isWhiteSpace:(B)Z\n-  #215 = NameAndType        #142:#154     // encodeBase64:([BZ)[B\n-  #216 = NameAndType        #142:#155     // encodeBase64:([BZZ)[B\n-  #217 = NameAndType        #152:#151     // getBytesUtf8:(Ljava/lang/String;)[B\n-  #218 = NameAndType        #136:#143     // decode:([B)[B\n-  #219 = Utf8               UTF8\n-  #220 = NameAndType        #262:#151     // getBytes:(Ljava/lang/String;)[B\n-  #221 = Utf8               java/io/UnsupportedEncodingException\n-  #222 = Utf8               java/lang/RuntimeException\n-  #223 = NameAndType        #115:#263     // \"<init>\":(Ljava/lang/Throwable;)V\n-  #224 = NameAndType        #169:#116     // reset:()V\n-  #225 = NameAndType        #133:#134     // setInitialBuffer:([BII)V\n-  #226 = NameAndType        #136:#134     // decode:([BII)V\n-  #227 = NameAndType        #131:#132     // readResults:([BII)I\n-  #228 = Utf8               java/lang/Integer\n-  #229 = NameAndType        #142:#156     // encodeBase64:([BZZI)[B\n-  #230 = NameAndType        #162:#163     // getEncodeLength:([BI[B)J\n-  #231 = Utf8               Input array too big, the output array would be bigger (\n-  #232 = NameAndType        #254:#264     // append:(J)Ljava/lang/StringBuilder;\n-  #233 = Utf8               ) than the specified maxium size of\n-  #234 = NameAndType        #254:#265     // append:(I)Ljava/lang/StringBuilder;\n-  #235 = NameAndType        #135:#143     // encode:([B)[B\n-  #236 = NameAndType        #136:#151     // decode:(Ljava/lang/String;)[B\n-  #237 = Utf8               java/lang/String\n-  #238 = NameAndType        #115:#266     // \"<init>\":([BLjava/lang/String;)V\n-  #239 = NameAndType        #135:#134     // encode:([BII)V\n-  #240 = NameAndType        #125:#126     // isUrlSafe:()Z\n-  #241 = Utf8               java/math/BigInteger\n-  #242 = NameAndType        #157:#143     // decodeBase64:([B)[B\n-  #243 = Utf8               java/lang/NullPointerException\n-  #244 = Utf8               encodeInteger called with null parameter\n-  #245 = NameAndType        #168:#167     // toIntegerBytes:(Ljava/math/BigInteger;)[B\n-  #246 = NameAndType        #267:#129     // bitLength:()I\n-  #247 = NameAndType        #268:#172     // toByteArray:()[B\n-  #248 = Class              #90           // \"[B\"\n-  #249 = NameAndType        #269:#270     // clone:()Ljava/lang/Object;\n-  #250 = Utf8               java/lang/Object\n-  #251 = Utf8               java/lang/System\n-  #252 = Utf8               arraycopy\n-  #253 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #254 = Utf8               append\n-  #255 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #256 = Utf8               toString\n-  #257 = Utf8               ()Ljava/lang/String;\n-  #258 = Utf8               (Ljava/lang/String;)V\n-  #259 = Utf8               java/lang/Math\n-  #260 = Utf8               min\n-  #261 = Utf8               (II)I\n-  #262 = Utf8               getBytes\n-  #263 = Utf8               (Ljava/lang/Throwable;)V\n-  #264 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #265 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #266 = Utf8               ([BLjava/lang/String;)V\n-  #267 = Utf8               bitLength\n-  #268 = Utf8               toByteArray\n-  #269 = Utf8               clone\n-  #270 = Utf8               ()Ljava/lang/Object;\n+  #124 = Utf8               isUrlSafe\n+  #125 = Utf8               ()Z\n+  #126 = Utf8               hasData\n+  #127 = Utf8               avail\n+  #128 = Utf8               ()I\n+  #129 = Utf8               resizeBuffer\n+  #130 = Utf8               readResults\n+  #131 = Utf8               ([BII)I\n+  #132 = Utf8               setInitialBuffer\n+  #133 = Utf8               ([BII)V\n+  #134 = Utf8               encode\n+  #135 = Utf8               decode\n+  #136 = Utf8               isBase64\n+  #137 = Utf8               (B)Z\n+  #138 = Utf8               isArrayByteBase64\n+  #139 = Utf8               ([B)Z\n+  #140 = Utf8               containsBase64Byte\n+  #141 = Utf8               encodeBase64\n+  #142 = Utf8               ([B)[B\n+  #143 = Utf8               encodeBase64String\n+  #144 = Utf8               ([B)Ljava/lang/String;\n+  #145 = Utf8               encodeBase64StringUnChunked\n+  #146 = Utf8               ([BZ)Ljava/lang/String;\n+  #147 = Utf8               encodeBase64URLSafe\n+  #148 = Utf8               encodeBase64URLSafeString\n+  #149 = Utf8               encodeBase64Chunked\n+  #150 = Utf8               (Ljava/lang/String;)[B\n+  #151 = Utf8               getBytesUtf8\n+  #152 = Utf8               ([BZ)[B\n+  #153 = Utf8               ([BZZ)[B\n+  #154 = Utf8               ([BZZI)[B\n+  #155 = Utf8               decodeBase64\n+  #156 = Utf8               isWhiteSpace\n+  #157 = Utf8               encodeToString\n+  #158 = Utf8               newStringUtf8\n+  #159 = Utf8               getEncodeLength\n+  #160 = Utf8               ([BI[B)J\n+  #161 = Utf8               decodeInteger\n+  #162 = Utf8               ([B)Ljava/math/BigInteger;\n+  #163 = Utf8               encodeInteger\n+  #164 = Utf8               (Ljava/math/BigInteger;)[B\n+  #165 = Utf8               toIntegerBytes\n+  #166 = Utf8               reset\n+  #167 = Utf8               getLineLength\n+  #168 = Utf8               getLineSeparator\n+  #169 = Utf8               ()[B\n+  #170 = Utf8               <clinit>\n+  #171 = Utf8               SourceFile\n+  #172 = Utf8               Base64.java\n+  #173 = NameAndType        #115:#119     // \"<init>\":(Z)V\n+  #174 = Utf8               org/apache/commons/net/util/Base64\n+  #175 = NameAndType        #89:#90       // CHUNK_SEPARATOR:[B\n+  #176 = NameAndType        #115:#122     // \"<init>\":(I[BZ)V\n+  #177 = NameAndType        #115:#121     // \"<init>\":(I[B)V\n+  #178 = NameAndType        #115:#116     // \"<init>\":()V\n+  #179 = NameAndType        #91:#90       // EMPTY_BYTE_ARRAY:[B\n+  #180 = NameAndType        #103:#82      // lineLength:I\n+  #181 = NameAndType        #104:#90      // lineSeparator:[B\n+  #182 = Class              #248          // java/lang/System\n+  #183 = NameAndType        #249:#250     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #184 = NameAndType        #106:#82      // encodeSize:I\n+  #185 = NameAndType        #105:#82      // decodeSize:I\n+  #186 = NameAndType        #140:#139     // containsBase64Byte:([B)Z\n+  #187 = NameAndType        #158:#144     // newStringUtf8:([B)Ljava/lang/String;\n+  #188 = Utf8               java/lang/IllegalArgumentException\n+  #189 = Utf8               java/lang/StringBuilder\n+  #190 = Utf8               lineSeperator must not contain base64 characters: [\n+  #191 = NameAndType        #251:#252     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #192 = Utf8               ]\n+  #193 = NameAndType        #253:#254     // toString:()Ljava/lang/String;\n+  #194 = NameAndType        #115:#255     // \"<init>\":(Ljava/lang/String;)V\n+  #195 = NameAndType        #93:#90       // URL_SAFE_ENCODE_TABLE:[B\n+  #196 = NameAndType        #92:#90       // STANDARD_ENCODE_TABLE:[B\n+  #197 = NameAndType        #102:#90      // encodeTable:[B\n+  #198 = NameAndType        #107:#90      // buffer:[B\n+  #199 = NameAndType        #108:#82      // pos:I\n+  #200 = NameAndType        #109:#82      // readPos:I\n+  #201 = NameAndType        #127:#128     // avail:()I\n+  #202 = Class              #256          // java/lang/Math\n+  #203 = NameAndType        #257:#258     // min:(II)I\n+  #204 = NameAndType        #112:#113     // eof:Z\n+  #205 = NameAndType        #129:#116     // resizeBuffer:()V\n+  #206 = NameAndType        #111:#82      // modulus:I\n+  #207 = NameAndType        #114:#82      // x:I\n+  #208 = NameAndType        #110:#82      // currentLinePos:I\n+  #209 = NameAndType        #97:#90       // DECODE_TABLE:[B\n+  #210 = NameAndType        #136:#137     // isBase64:(B)Z\n+  #211 = NameAndType        #156:#137     // isWhiteSpace:(B)Z\n+  #212 = NameAndType        #141:#152     // encodeBase64:([BZ)[B\n+  #213 = NameAndType        #141:#153     // encodeBase64:([BZZ)[B\n+  #214 = NameAndType        #151:#150     // getBytesUtf8:(Ljava/lang/String;)[B\n+  #215 = NameAndType        #135:#142     // decode:([B)[B\n+  #216 = Utf8               UTF8\n+  #217 = NameAndType        #259:#150     // getBytes:(Ljava/lang/String;)[B\n+  #218 = Utf8               java/io/UnsupportedEncodingException\n+  #219 = Utf8               java/lang/RuntimeException\n+  #220 = NameAndType        #115:#260     // \"<init>\":(Ljava/lang/Throwable;)V\n+  #221 = NameAndType        #166:#116     // reset:()V\n+  #222 = NameAndType        #132:#133     // setInitialBuffer:([BII)V\n+  #223 = NameAndType        #135:#133     // decode:([BII)V\n+  #224 = NameAndType        #130:#131     // readResults:([BII)I\n+  #225 = Utf8               java/lang/Integer\n+  #226 = NameAndType        #141:#154     // encodeBase64:([BZZI)[B\n+  #227 = NameAndType        #159:#160     // getEncodeLength:([BI[B)J\n+  #228 = Utf8               Input array too big, the output array would be bigger (\n+  #229 = NameAndType        #251:#261     // append:(J)Ljava/lang/StringBuilder;\n+  #230 = Utf8               ) than the specified maxium size of\n+  #231 = NameAndType        #251:#262     // append:(I)Ljava/lang/StringBuilder;\n+  #232 = NameAndType        #134:#142     // encode:([B)[B\n+  #233 = NameAndType        #135:#150     // decode:(Ljava/lang/String;)[B\n+  #234 = Utf8               java/lang/String\n+  #235 = NameAndType        #115:#263     // \"<init>\":([BLjava/lang/String;)V\n+  #236 = NameAndType        #134:#133     // encode:([BII)V\n+  #237 = NameAndType        #124:#125     // isUrlSafe:()Z\n+  #238 = Utf8               java/math/BigInteger\n+  #239 = NameAndType        #155:#142     // decodeBase64:([B)[B\n+  #240 = Utf8               java/lang/NullPointerException\n+  #241 = Utf8               encodeInteger called with null parameter\n+  #242 = NameAndType        #165:#164     // toIntegerBytes:(Ljava/math/BigInteger;)[B\n+  #243 = NameAndType        #264:#128     // bitLength:()I\n+  #244 = NameAndType        #265:#169     // toByteArray:()[B\n+  #245 = Class              #90           // \"[B\"\n+  #246 = NameAndType        #266:#267     // clone:()Ljava/lang/Object;\n+  #247 = Utf8               java/lang/Object\n+  #248 = Utf8               java/lang/System\n+  #249 = Utf8               arraycopy\n+  #250 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #251 = Utf8               append\n+  #252 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #253 = Utf8               toString\n+  #254 = Utf8               ()Ljava/lang/String;\n+  #255 = Utf8               (Ljava/lang/String;)V\n+  #256 = Utf8               java/lang/Math\n+  #257 = Utf8               min\n+  #258 = Utf8               (II)I\n+  #259 = Utf8               getBytes\n+  #260 = Utf8               (Ljava/lang/Throwable;)V\n+  #261 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #262 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #263 = Utf8               ([BLjava/lang/String;)V\n+  #264 = Utf8               bitLength\n+  #265 = Utf8               toByteArray\n+  #266 = Utf8               clone\n+  #267 = Utf8               ()Ljava/lang/Object;\n {\n   private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 2\n \n   private static final int DEFAULT_BUFFER_SIZE = 8192;\n@@ -1869,14 +1866,16 @@\n        116: aload_0\n        117: invokevirtual #60                 // Method encode:([B)[B\n        120: areturn\n       LineNumberTable:\n         line 820: 0\n         line 821: 9\n         line 824: 11\n+        line 825: 22\n+        line 824: 35\n         line 826: 40\n         line 827: 48\n         line 831: 85\n         line 832: 114\n       StackMapTable: number_of_entries = 9\n         frame_type = 9 /* same */\n         frame_type = 1 /* same */\n"}]}
