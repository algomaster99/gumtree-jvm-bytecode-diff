{"diffoscope-json-version": 1, "source1": "first/XMLDocumentHelper.class", "source2": "second/XMLDocumentHelper.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,52 +12,50 @@\n import javax.xml.transform.TransformerConfigurationException;\n import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.TransformerException;\n import javax.xml.transform.Result;\n import javax.xml.transform.Source;\n import javax.xml.transform.Transformer;\n import org.apache.commons.configuration2.ex.ConfigurationException;\n-import org.w3c.dom.Element;\n import org.w3c.dom.Node;\n import java.util.Map;\n import org.w3c.dom.Document;\n \n class XMLDocumentHelper\n {\n     private final Document document;\n     private final Map<Node, Node> elementMapping;\n     private final String sourcePublicID;\n     private final String sourceSystemID;\n     \n-    XMLDocumentHelper(final Document doc, final Map<Node, Node> elemMap, final String pubID, final String sysID) {\n-        this.document = doc;\n-        this.elementMapping = elemMap;\n-        this.sourcePublicID = pubID;\n-        this.sourceSystemID = sysID;\n-    }\n-    \n-    public static XMLDocumentHelper forNewDocument(final String rootElementName) throws ConfigurationException {\n-        final Document doc = createDocumentBuilder(createDocumentBuilderFactory()).newDocument();\n-        final Element rootElem = doc.createElement(rootElementName);\n-        doc.appendChild(rootElem);\n-        return new XMLDocumentHelper(doc, emptyElementMapping(), null, null);\n-    }\n-    \n-    public static XMLDocumentHelper forSourceDocument(final Document srcDoc) throws ConfigurationException {\n-        String pubID;\n-        String sysID;\n-        if (srcDoc.getDoctype() != null) {\n-            pubID = srcDoc.getDoctype().getPublicId();\n-            sysID = srcDoc.getDoctype().getSystemId();\n+    XMLDocumentHelper(final Document document, final Map<Node, Node> elementMapping, final String sourcePublicID, final String sourceSystemID) {\n+        this.document = document;\n+        this.elementMapping = elementMapping;\n+        this.sourcePublicID = sourcePublicID;\n+        this.sourceSystemID = sourceSystemID;\n+    }\n+    \n+    public static XMLDocumentHelper forNewDocument(final String s) throws ConfigurationException {\n+        final Document document = createDocumentBuilder(createDocumentBuilderFactory()).newDocument();\n+        document.appendChild(document.createElement(s));\n+        return new XMLDocumentHelper(document, emptyElementMapping(), null, null);\n+    }\n+    \n+    public static XMLDocumentHelper forSourceDocument(final Document document) throws ConfigurationException {\n+        String publicId;\n+        String systemId;\n+        if (document.getDoctype() != null) {\n+            publicId = document.getDoctype().getPublicId();\n+            systemId = document.getDoctype().getSystemId();\n         }\n         else {\n-            pubID = null;\n-            sysID = null;\n+            publicId = null;\n+            systemId = null;\n         }\n-        return new XMLDocumentHelper(copyDocument(srcDoc), emptyElementMapping(), pubID, sysID);\n+        return new XMLDocumentHelper(copyDocument(document), emptyElementMapping(), publicId, systemId);\n     }\n     \n     public Document getDocument() {\n         return this.document;\n     }\n     \n     public Map<Node, Node> getElementMapping() {\n@@ -76,70 +74,70 @@\n         return createTransformer(createTransformerFactory());\n     }\n     \n     public static void transform(final Transformer transformer, final Source source, final Result result) throws ConfigurationException {\n         try {\n             transformer.transform(source, result);\n         }\n-        catch (final TransformerException tex) {\n-            throw new ConfigurationException((Throwable)tex);\n+        catch (final TransformerException ex) {\n+            throw new ConfigurationException((Throwable)ex);\n         }\n     }\n     \n     public XMLDocumentHelper createCopy() throws ConfigurationException {\n-        final Document docCopy = copyDocument(this.getDocument());\n-        return new XMLDocumentHelper(docCopy, createElementMapping(this.getDocument(), docCopy), this.getSourcePublicID(), this.getSourceSystemID());\n+        final Document copyDocument = copyDocument(this.getDocument());\n+        return new XMLDocumentHelper(copyDocument, createElementMapping(this.getDocument(), copyDocument), this.getSourcePublicID(), this.getSourceSystemID());\n     }\n     \n     static TransformerFactory createTransformerFactory() {\n         return TransformerFactory.newInstance();\n     }\n     \n-    static Transformer createTransformer(final TransformerFactory factory) throws ConfigurationException {\n+    static Transformer createTransformer(final TransformerFactory transformerFactory) throws ConfigurationException {\n         try {\n-            return factory.newTransformer();\n+            return transformerFactory.newTransformer();\n         }\n-        catch (final TransformerConfigurationException tex) {\n-            throw new ConfigurationException((Throwable)tex);\n+        catch (final TransformerConfigurationException ex) {\n+            throw new ConfigurationException((Throwable)ex);\n         }\n     }\n     \n-    static DocumentBuilder createDocumentBuilder(final DocumentBuilderFactory factory) throws ConfigurationException {\n+    static DocumentBuilder createDocumentBuilder(final DocumentBuilderFactory documentBuilderFactory) throws ConfigurationException {\n         try {\n-            return factory.newDocumentBuilder();\n+            return documentBuilderFactory.newDocumentBuilder();\n         }\n-        catch (final ParserConfigurationException pcex) {\n-            throw new ConfigurationException((Throwable)pcex);\n+        catch (final ParserConfigurationException ex) {\n+            throw new ConfigurationException((Throwable)ex);\n         }\n     }\n     \n-    private static Document copyDocument(final Document doc) throws ConfigurationException {\n+    private static Document copyDocument(final Document n) throws ConfigurationException {\n         final Transformer transformer = createTransformer();\n-        final DOMSource source = new DOMSource(doc);\n-        final DOMResult result = new DOMResult();\n-        transform(transformer, source, result);\n-        return (Document)result.getNode();\n+        final DOMSource domSource = new DOMSource(n);\n+        final DOMResult domResult = new DOMResult();\n+        transform(transformer, domSource, domResult);\n+        return (Document)domResult.getNode();\n     }\n     \n     private static DocumentBuilderFactory createDocumentBuilderFactory() {\n         return DocumentBuilderFactory.newInstance();\n     }\n     \n     private static Map<Node, Node> emptyElementMapping() {\n         return Collections.emptyMap();\n     }\n     \n-    private static Map<Node, Node> createElementMapping(final Document doc1, final Document doc2) {\n-        final Map<Node, Node> mapping = new HashMap<Node, Node>();\n-        createElementMappingForNodes(doc1.getDocumentElement(), doc2.getDocumentElement(), mapping);\n-        return mapping;\n+    private static Map<Node, Node> createElementMapping(final Document document, final Document document2) {\n+        final HashMap hashMap = new HashMap();\n+        createElementMappingForNodes(document.getDocumentElement(), document2.getDocumentElement(), hashMap);\n+        return hashMap;\n     }\n     \n-    private static void createElementMappingForNodes(final Node n1, final Node n2, final Map<Node, Node> mapping) {\n-        mapping.put(n1, n2);\n-        final NodeList childNodes1 = n1.getChildNodes();\n-        final NodeList childNodes2 = n2.getChildNodes();\n-        for (int count = Math.min(childNodes1.getLength(), childNodes2.getLength()), i = 0; i < count; ++i) {\n-            createElementMappingForNodes(childNodes1.item(i), childNodes2.item(i), mapping);\n+    private static void createElementMappingForNodes(final Node node, final Node node2, final Map<Node, Node> map) {\n+        map.put(node, node2);\n+        final NodeList childNodes = node.getChildNodes();\n+        final NodeList childNodes2 = node2.getChildNodes();\n+        for (int min = Math.min(childNodes.getLength(), childNodes2.getLength()), i = 0; i < min; ++i) {\n+            createElementMappingForNodes(childNodes.item(i), childNodes2.item(i), map);\n         }\n     }\n }\n"}]}
