{"diffoscope-json-version": 1, "source1": "first/HexDump.class", "source2": "second/HexDump.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,66 +7,66 @@\n \n public class HexDump\n {\n     public static final String EOL;\n     private static final char[] _hexcodes;\n     private static final int[] _shifts;\n     \n-    public static void dump(final byte[] data, final long offset, final OutputStream stream, final int index) throws IOException, ArrayIndexOutOfBoundsException, IllegalArgumentException {\n-        if (index < 0 || index >= data.length) {\n-            throw new ArrayIndexOutOfBoundsException(\"illegal index: \" + index + \" into array of length \" + data.length);\n+    public static void dump(final byte[] array, final long n, final OutputStream outputStream, final int i) throws IOException, ArrayIndexOutOfBoundsException, IllegalArgumentException {\n+        if (i < 0 || i >= array.length) {\n+            throw new ArrayIndexOutOfBoundsException(\"illegal index: \" + i + \" into array of length \" + array.length);\n         }\n-        if (stream == null) {\n+        if (outputStream == null) {\n             throw new IllegalArgumentException(\"cannot write to nullstream\");\n         }\n-        long display_offset = offset + index;\n-        final StringBuilder buffer = new StringBuilder(74);\n-        for (int j = index; j < data.length; j += 16) {\n-            int chars_read = data.length - j;\n-            if (chars_read > 16) {\n-                chars_read = 16;\n+        long n2 = n + i;\n+        final StringBuilder sb = new StringBuilder(74);\n+        for (int j = i; j < array.length; j += 16) {\n+            int n3 = array.length - j;\n+            if (n3 > 16) {\n+                n3 = 16;\n             }\n-            dump(buffer, display_offset).append(' ');\n+            dump(sb, n2).append(' ');\n             for (int k = 0; k < 16; ++k) {\n-                if (k < chars_read) {\n-                    dump(buffer, data[k + j]);\n+                if (k < n3) {\n+                    dump(sb, array[k + j]);\n                 }\n                 else {\n-                    buffer.append(\"  \");\n+                    sb.append(\"  \");\n                 }\n-                buffer.append(' ');\n+                sb.append(' ');\n             }\n-            for (int k = 0; k < chars_read; ++k) {\n-                if (data[k + j] >= 32 && data[k + j] < 127) {\n-                    buffer.append((char)data[k + j]);\n+            for (int l = 0; l < n3; ++l) {\n+                if (array[l + j] >= 32 && array[l + j] < 127) {\n+                    sb.append((char)array[l + j]);\n                 }\n                 else {\n-                    buffer.append('.');\n+                    sb.append('.');\n                 }\n             }\n-            buffer.append(HexDump.EOL);\n-            stream.write(buffer.toString().getBytes(Charset.defaultCharset()));\n-            stream.flush();\n-            buffer.setLength();\n-            display_offset += chars_read;\n+            sb.append(HexDump.EOL);\n+            outputStream.write(sb.toString().getBytes(Charset.defaultCharset()));\n+            outputStream.flush();\n+            sb.setLength();\n+            n2 += n3;\n         }\n     }\n     \n-    private static StringBuilder dump(final StringBuilder _lbuffer, final long value) {\n-        for (int j = 0; j < 8; ++j) {\n-            _lbuffer.append(HexDump._hexcodes[(int)(value >> HexDump._shifts[j]) & 0xF]);\n+    private static StringBuilder dump(final StringBuilder sb, final long n) {\n+        for (int i = 0; i < 8; ++i) {\n+            sb.append(HexDump._hexcodes[(int)(n >> HexDump._shifts[i]) & 0xF]);\n         }\n-        return _lbuffer;\n+        return sb;\n     }\n     \n-    private static StringBuilder dump(final StringBuilder _cbuffer, final byte value) {\n-        for (int j = 0; j < 2; ++j) {\n-            _cbuffer.append(HexDump._hexcodes[value >> HexDump._shifts[j + 6] & 0xF]);\n+    private static StringBuilder dump(final StringBuilder sb, final byte b) {\n+        for (int i = 0; i < 2; ++i) {\n+            sb.append(HexDump._hexcodes[b >> HexDump._shifts[i + 6] & 0xF]);\n         }\n-        return _cbuffer;\n+        return sb;\n     }\n     \n     static {\n         EOL = System.getProperty(\"line.separator\");\n         _hexcodes = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n         _shifts = new int[] { 28, 24, 20, 16, 12, 8, 4, 0 };\n     }\n"}]}
