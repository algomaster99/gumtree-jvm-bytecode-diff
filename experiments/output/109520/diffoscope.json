{"diffoscope-json-version": 1, "source1": "first/StringUtils.class", "source2": "second/StringUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -167,15 +167,18 @@\n     public static String stripStart(final String str, final String stripChars) {\n         final int strLen;\n         if (str == null || (strLen = str.length()) == 0) {\n             return str;\n         }\n         int start = 0;\n         if (stripChars == null) {\n-            while (start != strLen && Character.isWhitespace(str.charAt(start))) {\n+            while (start != strLen) {\n+                if (!Character.isWhitespace(str.charAt(start))) {\n+                    break;\n+                }\n                 ++start;\n             }\n         }\n         else {\n             if (stripChars.isEmpty()) {\n                 return str;\n             }\n@@ -188,15 +191,18 @@\n     \n     public static String stripEnd(final String str, final String stripChars) {\n         int end;\n         if (str == null || (end = str.length()) == 0) {\n             return str;\n         }\n         if (stripChars == null) {\n-            while (end != 0 && Character.isWhitespace(str.charAt(end - 1))) {\n+            while (end != 0) {\n+                if (!Character.isWhitespace(str.charAt(end - 1))) {\n+                    break;\n+                }\n                 --end;\n             }\n         }\n         else {\n             if (stripChars.isEmpty()) {\n                 return str;\n             }\n@@ -578,21 +584,21 @@\n             return -1;\n         }\n         final int csLen = cs.length();\n         final int csLast = csLen - 1;\n         final int searchLen = searchChars.length;\n         final int searchLast = searchLen - 1;\n         int i = 0;\n-    Label_0040:\n+    Label_0127:\n         while (i < csLen) {\n             final char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; ++j) {\n                 if (searchChars[j] == ch && (i >= csLast || j >= searchLast || !Character.isHighSurrogate(ch) || searchChars[j + 1] == cs.charAt(i + 1))) {\n                     ++i;\n-                    continue Label_0040;\n+                    continue Label_0127;\n                 }\n             }\n             return i;\n         }\n         return -1;\n     }\n     \n@@ -1798,15 +1804,15 @@\n             end = len;\n         }\n         if (start > end) {\n             final int temp = start;\n             start = end;\n             end = temp;\n         }\n-        return str.substring(0, start) + overlay + str.substring(end);\n+        return String.valueOf(str.substring(0, start)) + overlay + str.substring(end);\n     }\n     \n     public static String chomp(final String str) {\n         if (isEmpty(str)) {\n             return str;\n         }\n         if (str.length() != 1) {\n@@ -1890,15 +1896,15 @@\n         }\n     }\n     \n     public static String repeat(final String str, final String separator, final int repeat) {\n         if (str == null || separator == null) {\n             return repeat(str, repeat);\n         }\n-        final String result = repeat(str + separator, repeat);\n+        final String result = repeat(String.valueOf(str) + separator, repeat);\n         return removeEnd(result, separator);\n     }\n     \n     public static String repeat(final char ch, final int repeat) {\n         if (repeat <= 0) {\n             return \"\";\n         }\n@@ -2421,36 +2427,36 @@\n         if (offset > str.length()) {\n             offset = str.length();\n         }\n         if (str.length() - offset < maxWidth - abbrevMarkerLength) {\n             offset = str.length() - (maxWidth - abbrevMarkerLength);\n         }\n         if (offset <= abbrevMarkerLength + 1) {\n-            return str.substring(0, maxWidth - abbrevMarkerLength) + abbrevMarker;\n+            return String.valueOf(str.substring(0, maxWidth - abbrevMarkerLength)) + abbrevMarker;\n         }\n         if (maxWidth < minAbbrevWidthOffset) {\n             throw new IllegalArgumentException(String.format(\"Minimum abbreviation width with offset is %d\", Integer.valueOf(minAbbrevWidthOffset)));\n         }\n         if (offset + maxWidth - abbrevMarkerLength < str.length()) {\n-            return abbrevMarker + abbreviate(str.substring(offset), abbrevMarker, maxWidth - abbrevMarkerLength);\n+            return String.valueOf(abbrevMarker) + abbreviate(str.substring(offset), abbrevMarker, maxWidth - abbrevMarkerLength);\n         }\n-        return abbrevMarker + str.substring(str.length() - (maxWidth - abbrevMarkerLength));\n+        return String.valueOf(abbrevMarker) + str.substring(str.length() - (maxWidth - abbrevMarkerLength));\n     }\n     \n     public static String abbreviateMiddle(final String str, final String middle, final int length) {\n         if (isEmpty(str) || isEmpty(middle)) {\n             return str;\n         }\n         if (length >= str.length() || length < middle.length() + 2) {\n             return str;\n         }\n         final int targetSting = length - middle.length();\n         final int startOffset = targetSting / 2 + targetSting % 2;\n         final int endOffset = str.length() - targetSting / 2;\n-        return str.substring(0, startOffset) + middle + str.substring(endOffset);\n+        return String.valueOf(str.substring(0, startOffset)) + middle + str.substring(endOffset);\n     }\n     \n     public static String difference(final String str1, final String str2) {\n         if (str1 == null) {\n             return str2;\n         }\n         if (str2 == null) {\n@@ -2843,15 +2849,15 @@\n         if (suffixes != null && suffixes.length > 0) {\n             for (final CharSequence s : suffixes) {\n                 if (endsWith(str, s, ignoreCase)) {\n                     return str;\n                 }\n             }\n         }\n-        return str + suffix.toString();\n+        return String.valueOf(str) + suffix.toString();\n     }\n     \n     public static String appendIfMissing(final String str, final CharSequence suffix, final CharSequence... suffixes) {\n         return appendIfMissing(str, suffix, false, suffixes);\n     }\n     \n     public static String appendIfMissingIgnoreCase(final String str, final CharSequence suffix, final CharSequence... suffixes) {\n@@ -2865,15 +2871,15 @@\n         if (prefixes != null && prefixes.length > 0) {\n             for (final CharSequence p : prefixes) {\n                 if (startsWith(str, p, ignoreCase)) {\n                     return str;\n                 }\n             }\n         }\n-        return prefix.toString() + str;\n+        return String.valueOf(prefix.toString()) + str;\n     }\n     \n     public static String prependIfMissing(final String str, final CharSequence prefix, final CharSequence... prefixes) {\n         return prependIfMissing(str, prefix, false, prefixes);\n     }\n     \n     public static String prependIfMissingIgnoreCase(final String str, final CharSequence prefix, final CharSequence... prefixes) {\n@@ -2889,15 +2895,15 @@\n         return new String(bytes, (charset != null) ? charset : Charset.defaultCharset());\n     }\n     \n     public static String wrap(final String str, final char wrapWith) {\n         if (isEmpty(str) || wrapWith == '\\0') {\n             return str;\n         }\n-        return wrapWith + str + wrapWith;\n+        return String.valueOf(wrapWith) + str + wrapWith;\n     }\n     \n     public static String wrap(final String str, final String wrapWith) {\n         if (isEmpty(str) || isEmpty(wrapWith)) {\n             return str;\n         }\n         return wrapWith.concat(str).concat(wrapWith);\n"}]}
