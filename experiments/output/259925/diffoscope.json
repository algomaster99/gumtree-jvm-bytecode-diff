{"diffoscope-json-version": 1, "source1": "first/MemoryMappedFileInputStream.class", "source2": "second/MemoryMappedFileInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,18 +19,18 @@\n     private boolean closed;\n     private long nextBufferPosition;\n     \n     public static MemoryMappedFileInputStream.Builder builder() {\n         return new MemoryMappedFileInputStream.Builder();\n     }\n     \n-    private MemoryMappedFileInputStream(final Path file, final int bufferSize) throws IOException {\n+    private MemoryMappedFileInputStream(final Path path, final int bufferSize) throws IOException {\n         this.buffer = MemoryMappedFileInputStream.EMPTY_BUFFER;\n         this.bufferSize = bufferSize;\n-        this.channel = FileChannel.open(file, StandardOpenOption.READ);\n+        this.channel = FileChannel.open(path, StandardOpenOption.READ);\n     }\n     \n     @Override\n     public int available() throws IOException {\n         return this.buffer.remaining();\n     }\n     \n@@ -57,20 +57,20 @@\n     }\n     \n     int getBufferSize() {\n         return this.bufferSize;\n     }\n     \n     private void nextBuffer() throws IOException {\n-        final long remainingInFile = this.channel.size() - this.nextBufferPosition;\n-        if (remainingInFile > 0L) {\n-            final long amountToMap = Math.min(remainingInFile, this.bufferSize);\n+        final long a = this.channel.size() - this.nextBufferPosition;\n+        if (a > 0L) {\n+            final long min = Math.min(a, this.bufferSize);\n             this.cleanBuffer();\n-            this.buffer = this.channel.map(FileChannel.MapMode.READ_ONLY, this.nextBufferPosition, amountToMap);\n-            this.nextBufferPosition += amountToMap;\n+            this.buffer = this.channel.map(FileChannel.MapMode.READ_ONLY, this.nextBufferPosition, min);\n+            this.nextBufferPosition += min;\n         }\n         else {\n             this.buffer = MemoryMappedFileInputStream.EMPTY_BUFFER;\n         }\n     }\n     \n     @Override\n@@ -82,41 +82,40 @@\n                 return -1;\n             }\n         }\n         return Short.toUnsignedInt(this.buffer.get());\n     }\n     \n     @Override\n-    public int read(final byte[] b, final int off, final int len) throws IOException {\n+    public int read(final byte[] dst, final int offset, final int b) throws IOException {\n         this.ensureOpen();\n         if (!this.buffer.hasRemaining()) {\n             this.nextBuffer();\n             if (!this.buffer.hasRemaining()) {\n                 return -1;\n             }\n         }\n-        final int numBytes = Math.min(this.buffer.remaining(), len);\n-        this.buffer.get(b, off, numBytes);\n-        return numBytes;\n+        final int min = Math.min(this.buffer.remaining(), b);\n+        this.buffer.get(dst, offset, min);\n+        return min;\n     }\n     \n     @Override\n     public long skip(final long n) throws IOException {\n         this.ensureOpen();\n         if (n <= 0L) {\n             return 0L;\n         }\n         if (n <= this.buffer.remaining()) {\n             this.buffer.position();\n             return n;\n         }\n-        final long remainingInFile = this.channel.size() - this.nextBufferPosition;\n-        final long skipped = this.buffer.remaining() + Math.min(remainingInFile, n - (long)this.buffer.remaining());\n-        this.nextBufferPosition += skipped - this.buffer.remaining();\n+        final long n2 = this.buffer.remaining() + Math.min(this.channel.size() - this.nextBufferPosition, n - (long)this.buffer.remaining());\n+        this.nextBufferPosition += n2 - this.buffer.remaining();\n         this.nextBuffer();\n-        return skipped;\n+        return n2;\n     }\n     \n     static {\n         EMPTY_BUFFER = ByteBuffer.wrap(new byte[0]).asReadOnlyBuffer();\n     }\n }\n"}]}
