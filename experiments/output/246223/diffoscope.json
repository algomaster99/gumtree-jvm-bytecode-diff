{"diffoscope-json-version": 1, "source1": "first/HiddenFieldCheck.class", "source2": "second/HiddenFieldCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -30,198 +30,188 @@\n         return new int[] { 10, 21, 14, 154, 155, 198, 181, 199, 202 };\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 14, 154, 155, 199 };\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         this.frame = new HiddenFieldCheck.FieldFrame((HiddenFieldCheck.FieldFrame)null, true, (String)null);\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final int type = ast.getType();\n+    public void visitToken(final DetailAST detailAST) {\n+        final int type = detailAST.getType();\n         switch (type) {\n             case 10:\n             case 21:\n             case 198:\n             case 202: {\n-                this.processVariable(ast);\n+                this.processVariable(detailAST);\n                 break;\n             }\n             case 181: {\n-                this.processLambda(ast);\n+                this.processLambda(detailAST);\n                 break;\n             }\n             default: {\n-                this.visitOtherTokens(ast, type);\n+                this.visitOtherTokens(detailAST, type);\n                 break;\n             }\n         }\n     }\n     \n-    private void processLambda(final DetailAST ast) {\n-        final DetailAST firstChild = ast.getFirstChild();\n+    private void processLambda(final DetailAST detailAST) {\n+        final DetailAST firstChild = detailAST.getFirstChild();\n         if (TokenUtil.isOfType(firstChild, new int[] { 58 })) {\n-            final String untypedLambdaParameterName = firstChild.getText();\n-            if (this.frame.containsStaticField(untypedLambdaParameterName) || this.isInstanceField(firstChild, untypedLambdaParameterName)) {\n-                this.log(firstChild, \"hidden.field\", new Object[] { untypedLambdaParameterName });\n+            final String text = firstChild.getText();\n+            if (this.frame.containsStaticField(text) || this.isInstanceField(firstChild, text)) {\n+                this.log(firstChild, \"hidden.field\", new Object[] { text });\n             }\n         }\n     }\n     \n-    private void visitOtherTokens(final DetailAST ast, final int type) {\n-        final DetailAST typeMods = ast.findFirstToken(5);\n-        final boolean isStaticInnerType = typeMods != null && typeMods.findFirstToken(64) != null;\n-        String frameName;\n-        if (type == 14 || type == 154) {\n-            frameName = ast.findFirstToken(58).getText();\n+    private void visitOtherTokens(final DetailAST detailAST, final int n) {\n+        final DetailAST firstToken = detailAST.findFirstToken(5);\n+        final boolean b = firstToken != null && firstToken.findFirstToken(64) != null;\n+        String text;\n+        if (n == 14 || n == 154) {\n+            text = detailAST.findFirstToken(58).getText();\n         }\n         else {\n-            frameName = null;\n+            text = null;\n         }\n-        final HiddenFieldCheck.FieldFrame newFrame = new HiddenFieldCheck.FieldFrame(this.frame, isStaticInnerType, frameName);\n-        final DetailAST objBlock = ast.findFirstToken(6);\n-        if (objBlock != null) {\n-            for (DetailAST child = objBlock.getFirstChild(); child != null; child = child.getNextSibling()) {\n-                if (child.getType() == 10) {\n-                    final String name = child.findFirstToken(58).getText();\n-                    final DetailAST mods = child.findFirstToken(5);\n-                    if (mods.findFirstToken(64) == null) {\n-                        newFrame.addInstanceField(name);\n+        final HiddenFieldCheck.FieldFrame frame = new HiddenFieldCheck.FieldFrame(this.frame, b, text);\n+        final DetailAST firstToken2 = detailAST.findFirstToken(6);\n+        if (firstToken2 != null) {\n+            for (DetailAST detailAST2 = firstToken2.getFirstChild(); detailAST2 != null; detailAST2 = detailAST2.getNextSibling()) {\n+                if (detailAST2.getType() == 10) {\n+                    final String text2 = detailAST2.findFirstToken(58).getText();\n+                    if (detailAST2.findFirstToken(5).findFirstToken(64) == null) {\n+                        frame.addInstanceField(text2);\n                     }\n                     else {\n-                        newFrame.addStaticField(name);\n+                        frame.addStaticField(text2);\n                     }\n                 }\n             }\n         }\n-        if (ast.getType() == 199) {\n-            final DetailAST recordComponents = ast.findFirstToken(201);\n-            TokenUtil.forEachChild(recordComponents, 202, node -> {\n-                final String name2 = node.findFirstToken(58).getText();\n-                newFrame.addInstanceField(name2);\n-                return;\n-            });\n+        if (detailAST.getType() == 199) {\n+            TokenUtil.forEachChild(detailAST.findFirstToken(201), 202, detailAST3 -> fieldFrame.addInstanceField(detailAST3.findFirstToken(58).getText()));\n         }\n-        this.frame = newFrame;\n+        this.frame = frame;\n     }\n     \n-    public void leaveToken(final DetailAST ast) {\n-        if (ast.getType() == 14 || ast.getType() == 154 || ast.getType() == 155 || ast.getType() == 199) {\n+    public void leaveToken(final DetailAST detailAST) {\n+        if (detailAST.getType() == 14 || detailAST.getType() == 154 || detailAST.getType() == 155 || detailAST.getType() == 199) {\n             this.frame = this.frame.getParent();\n         }\n     }\n     \n-    private void processVariable(final DetailAST ast) {\n-        if (!ScopeUtil.isInInterfaceOrAnnotationBlock(ast) && !CheckUtil.isReceiverParameter(ast) && (ScopeUtil.isLocalVariableDef(ast) || ast.getType() == 21 || ast.getType() == 198)) {\n-            final DetailAST nameAST = ast.findFirstToken(58);\n-            final String name = nameAST.getText();\n-            if ((this.frame.containsStaticField(name) || this.isInstanceField(ast, name)) && !this.isMatchingRegexp(name) && !this.isIgnoredParam(ast, name)) {\n-                this.log(nameAST, \"hidden.field\", new Object[] { name });\n+    private void processVariable(final DetailAST detailAST) {\n+        if (!ScopeUtil.isInInterfaceOrAnnotationBlock(detailAST) && !CheckUtil.isReceiverParameter(detailAST) && (ScopeUtil.isLocalVariableDef(detailAST) || detailAST.getType() == 21 || detailAST.getType() == 198)) {\n+            final DetailAST firstToken = detailAST.findFirstToken(58);\n+            final String text = firstToken.getText();\n+            if ((this.frame.containsStaticField(text) || this.isInstanceField(detailAST, text)) && !this.isMatchingRegexp(text) && !this.isIgnoredParam(detailAST, text)) {\n+                this.log(firstToken, \"hidden.field\", new Object[] { text });\n             }\n         }\n     }\n     \n-    private boolean isIgnoredParam(final DetailAST ast, final String name) {\n-        return this.isIgnoredSetterParam(ast, name) || this.isIgnoredConstructorParam(ast) || this.isIgnoredParamOfAbstractMethod(ast);\n+    private boolean isIgnoredParam(final DetailAST detailAST, final String s) {\n+        return this.isIgnoredSetterParam(detailAST, s) || this.isIgnoredConstructorParam(detailAST) || this.isIgnoredParamOfAbstractMethod(detailAST);\n     }\n     \n-    private boolean isInstanceField(final DetailAST ast, final String name) {\n-        return !isInStatic(ast) && this.frame.containsInstanceField(name);\n+    private boolean isInstanceField(final DetailAST detailAST, final String s) {\n+        return !isInStatic(detailAST) && this.frame.containsInstanceField(s);\n     }\n     \n-    private boolean isMatchingRegexp(final String name) {\n-        return this.ignoreFormat != null && this.ignoreFormat.matcher(name).find();\n+    private boolean isMatchingRegexp(final String input) {\n+        return this.ignoreFormat != null && this.ignoreFormat.matcher(input).find();\n     }\n     \n-    private static boolean isInStatic(final DetailAST ast) {\n-        DetailAST parent = ast.getParent();\n-        boolean inStatic = false;\n-        while (parent != null && !inStatic) {\n-            if (parent.getType() == 12) {\n-                inStatic = true;\n+    private static boolean isInStatic(final DetailAST detailAST) {\n+        DetailAST detailAST2 = detailAST.getParent();\n+        boolean b = false;\n+        while (detailAST2 != null && !b) {\n+            if (detailAST2.getType() == 12) {\n+                b = true;\n             }\n             else {\n-                if ((parent.getType() == 9 && !ScopeUtil.isInScope(parent, Scope.ANONINNER)) || parent.getType() == 10) {\n-                    final DetailAST mods = parent.findFirstToken(5);\n-                    inStatic = (mods.findFirstToken(64) != null);\n+                if ((detailAST2.getType() == 9 && !ScopeUtil.isInScope(detailAST2, Scope.ANONINNER)) || detailAST2.getType() == 10) {\n+                    b = (detailAST2.findFirstToken(5).findFirstToken(64) != null);\n                     break;\n                 }\n-                parent = parent.getParent();\n+                detailAST2 = detailAST2.getParent();\n             }\n         }\n-        return inStatic;\n+        return b;\n     }\n     \n-    private boolean isIgnoredSetterParam(final DetailAST ast, final String name) {\n-        boolean isIgnoredSetterParam = false;\n+    private boolean isIgnoredSetterParam(final DetailAST detailAST, final String s) {\n+        boolean b = false;\n         if (this.ignoreSetter) {\n-            final DetailAST parametersAST = ast.getParent();\n-            final DetailAST methodAST = parametersAST.getParent();\n-            if (parametersAST.getChildCount() == 1 && methodAST.getType() == 9 && this.isSetterMethod(methodAST, name)) {\n-                isIgnoredSetterParam = true;\n+            final DetailAST parent = detailAST.getParent();\n+            final DetailAST parent2 = parent.getParent();\n+            if (parent.getChildCount() == 1 && parent2.getType() == 9 && this.isSetterMethod(parent2, s)) {\n+                b = true;\n             }\n         }\n-        return isIgnoredSetterParam;\n+        return b;\n     }\n     \n-    private boolean isSetterMethod(final DetailAST aMethodAST, final String aName) {\n-        final String methodName = aMethodAST.findFirstToken(58).getText();\n-        boolean isSetterMethod = false;\n-        if ((\"set\" + capitalize(aName)).equals(methodName)) {\n-            final DetailAST typeAST = aMethodAST.findFirstToken(13);\n-            final String returnType = typeAST.getFirstChild().getText();\n-            if (typeAST.findFirstToken(49) != null || (this.setterCanReturnItsClass && this.frame.isEmbeddedIn(returnType))) {\n-                isSetterMethod = true;\n+    private boolean isSetterMethod(final DetailAST detailAST, final String s) {\n+        final String text = detailAST.findFirstToken(58).getText();\n+        boolean b = false;\n+        if ((\"set\" + capitalize(s)).equals(text)) {\n+            final DetailAST firstToken = detailAST.findFirstToken(13);\n+            final String text2 = firstToken.getFirstChild().getText();\n+            if (firstToken.findFirstToken(49) != null || (this.setterCanReturnItsClass && this.frame.isEmbeddedIn(text2))) {\n+                b = true;\n             }\n         }\n-        return isSetterMethod;\n+        return b;\n     }\n     \n-    private static String capitalize(final String name) {\n-        String setterName = name;\n-        if (name.length() == 1 || !Character.isUpperCase(name.charAt(1))) {\n-            setterName = name.substring(0, 1).toUpperCase(Locale.ENGLISH) + name.substring(1);\n+    private static String capitalize(final String s) {\n+        String s2 = s;\n+        if (s.length() == 1 || !Character.isUpperCase(s.charAt(1))) {\n+            s2 = s.substring(0, 1).toUpperCase(Locale.ENGLISH) + s.substring(1);\n         }\n-        return setterName;\n+        return s2;\n     }\n     \n-    private boolean isIgnoredConstructorParam(final DetailAST ast) {\n-        boolean result = false;\n-        if (this.ignoreConstructorParameter && ast.getType() == 21) {\n-            final DetailAST parametersAST = ast.getParent();\n-            final DetailAST constructorAST = parametersAST.getParent();\n-            result = (constructorAST.getType() == 8);\n+    private boolean isIgnoredConstructorParam(final DetailAST detailAST) {\n+        boolean b = false;\n+        if (this.ignoreConstructorParameter && detailAST.getType() == 21) {\n+            b = (detailAST.getParent().getParent().getType() == 8);\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private boolean isIgnoredParamOfAbstractMethod(final DetailAST ast) {\n-        boolean result = false;\n+    private boolean isIgnoredParamOfAbstractMethod(final DetailAST detailAST) {\n+        boolean b = false;\n         if (this.ignoreAbstractMethods) {\n-            final DetailAST method = ast.getParent().getParent();\n-            if (method.getType() == 9) {\n-                final DetailAST mods = method.findFirstToken(5);\n-                result = (mods.findFirstToken(40) != null);\n+            final DetailAST parent = detailAST.getParent().getParent();\n+            if (parent.getType() == 9) {\n+                b = (parent.findFirstToken(5).findFirstToken(40) != null);\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n-    public void setIgnoreFormat(final Pattern pattern) {\n-        this.ignoreFormat = pattern;\n+    public void setIgnoreFormat(final Pattern ignoreFormat) {\n+        this.ignoreFormat = ignoreFormat;\n     }\n     \n     public void setIgnoreSetter(final boolean ignoreSetter) {\n         this.ignoreSetter = ignoreSetter;\n     }\n     \n-    public void setSetterCanReturnItsClass(final boolean aSetterCanReturnItsClass) {\n-        this.setterCanReturnItsClass = aSetterCanReturnItsClass;\n+    public void setSetterCanReturnItsClass(final boolean setterCanReturnItsClass) {\n+        this.setterCanReturnItsClass = setterCanReturnItsClass;\n     }\n     \n     public void setIgnoreConstructorParameter(final boolean ignoreConstructorParameter) {\n         this.ignoreConstructorParameter = ignoreConstructorParameter;\n     }\n     \n     public void setIgnoreAbstractMethods(final boolean ignoreAbstractMethods) {\n"}]}
