{"diffoscope-json-version": 1, "source1": "first/CharSequenceInputStream.class", "source2": "second/CharSequenceInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,245 +1,245 @@\n-  SHA-256 checksum fff4786c05f54ff4833d9828a425994ffb5dbfb2aa7bfe2e15923364644a6533\n+  SHA-256 checksum 5f0a46d7fe8948903f759b35a8cab471dd8609b81169e79594dc3dd1857192f1\n   Compiled from \"CharSequenceInputStream.java\"\n public class org.apache.commons.io.input.CharSequenceInputStream extends java.io.InputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #24                         // org/apache/commons/io/input/CharSequenceInputStream\n-  super_class: #65                        // java/io/InputStream\n+  this_class: #31                         // org/apache/commons/io/input/CharSequenceInputStream\n+  super_class: #4                         // java/io/InputStream\n   interfaces: 0, fields: 7, methods: 14, attributes: 1\n Constant pool:\n-    #1 = Class              #111          // org/apache/commons/io/IOUtils\n-    #2 = Methodref          #65.#112      // java/io/InputStream.\"<init>\":()V\n-    #3 = Methodref          #86.#113      // java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n-    #4 = Fieldref           #114.#115     // java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n-    #5 = Methodref          #116.#117     // java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-    #6 = Methodref          #116.#118     // java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-    #7 = Fieldref           #24.#119      // org/apache/commons/io/input/CharSequenceInputStream.encoder:Ljava/nio/charset/CharsetEncoder;\n-    #8 = Methodref          #116.#120     // java/nio/charset/CharsetEncoder.maxBytesPerChar:()F\n-    #9 = Class              #121          // java/lang/IllegalArgumentException\n-   #10 = Class              #122          // java/lang/StringBuilder\n-   #11 = Methodref          #10.#112      // java/lang/StringBuilder.\"<init>\":()V\n-   #12 = String             #123          // Buffer size\n-   #13 = Methodref          #10.#124      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #14 = Methodref          #10.#125      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #15 = String             #126          //  is less than maxBytesPerChar\n-   #16 = Methodref          #10.#127      // java/lang/StringBuilder.append:(F)Ljava/lang/StringBuilder;\n-   #17 = Methodref          #10.#128      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #18 = Methodref          #9.#129       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #19 = Methodref          #130.#131     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #20 = Fieldref           #24.#132      // org/apache/commons/io/input/CharSequenceInputStream.bbuf:Ljava/nio/ByteBuffer;\n-   #21 = Methodref          #130.#133     // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n-   #22 = Methodref          #134.#135     // java/nio/CharBuffer.wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n-   #23 = Fieldref           #24.#136      // org/apache/commons/io/input/CharSequenceInputStream.cbuf:Ljava/nio/CharBuffer;\n-   #24 = Class              #137          // org/apache/commons/io/input/CharSequenceInputStream\n-   #25 = Fieldref           #24.#138      // org/apache/commons/io/input/CharSequenceInputStream.mark_cbuf:I\n-   #26 = Fieldref           #24.#139      // org/apache/commons/io/input/CharSequenceInputStream.mark_bbuf:I\n-   #27 = Methodref          #86.#140      // java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n-   #28 = Methodref          #24.#141      // org/apache/commons/io/input/CharSequenceInputStream.\"<init>\":(Ljava/lang/CharSequence;Ljava/nio/charset/Charset;I)V\n-   #29 = Methodref          #24.#142      // org/apache/commons/io/input/CharSequenceInputStream.\"<init>\":(Ljava/lang/CharSequence;Ljava/lang/String;I)V\n-   #30 = Methodref          #130.#143     // java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;\n-   #31 = Methodref          #116.#144     // java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n-   #32 = Methodref          #92.#145      // java/nio/charset/CoderResult.isError:()Z\n-   #33 = Methodref          #92.#146      // java/nio/charset/CoderResult.throwException:()V\n-   #34 = String             #147          // array\n-   #35 = Methodref          #148.#149     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #36 = Class              #150          // java/lang/IndexOutOfBoundsException\n-   #37 = String             #151          // Array Size=\n-   #38 = String             #152          // , offset=\n-   #39 = String             #153          // , length=\n-   #40 = Methodref          #36.#129      // java/lang/IndexOutOfBoundsException.\"<init>\":(Ljava/lang/String;)V\n-   #41 = Methodref          #130.#154     // java/nio/ByteBuffer.hasRemaining:()Z\n-   #42 = Methodref          #134.#154     // java/nio/CharBuffer.hasRemaining:()Z\n-   #43 = Methodref          #130.#155     // java/nio/ByteBuffer.remaining:()I\n-   #44 = Methodref          #156.#157     // java/lang/Math.min:(II)I\n-   #45 = Methodref          #130.#158     // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n-   #46 = Methodref          #24.#159      // org/apache/commons/io/input/CharSequenceInputStream.fillBuffer:()V\n-   #47 = Methodref          #130.#160     // java/nio/ByteBuffer.get:()B\n-   #48 = Methodref          #24.#161      // org/apache/commons/io/input/CharSequenceInputStream.read:([BII)I\n-   #49 = Methodref          #24.#162      // org/apache/commons/io/input/CharSequenceInputStream.available:()I\n-   #50 = Methodref          #24.#163      // org/apache/commons/io/input/CharSequenceInputStream.read:()I\n-   #51 = Methodref          #134.#155     // java/nio/CharBuffer.remaining:()I\n-   #52 = Methodref          #134.#164     // java/nio/CharBuffer.position:()I\n-   #53 = Methodref          #130.#164     // java/nio/ByteBuffer.position:()I\n-   #54 = Methodref          #134.#165     // java/nio/CharBuffer.mark:()Ljava/nio/CharBuffer;\n-   #55 = Methodref          #130.#166     // java/nio/ByteBuffer.mark:()Ljava/nio/ByteBuffer;\n-   #56 = Methodref          #116.#167     // java/nio/charset/CharsetEncoder.reset:()Ljava/nio/charset/CharsetEncoder;\n-   #57 = Methodref          #134.#168     // java/nio/CharBuffer.rewind:()Ljava/nio/CharBuffer;\n-   #58 = Methodref          #130.#169     // java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n-   #59 = Methodref          #130.#170     // java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n-   #60 = Class              #171          // java/lang/IllegalStateException\n-   #61 = String             #172          // Unexpected CharBuffer position: actual=\n-   #62 = String             #173          //  expected=\n-   #63 = Methodref          #60.#129      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #64 = Methodref          #130.#174     // java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n-   #65 = Class              #175          // java/io/InputStream\n-   #66 = Utf8               BUFFER_SIZE\n-   #67 = Utf8               I\n-   #68 = Utf8               ConstantValue\n-   #69 = Integer            2048\n-   #70 = Utf8               NO_MARK\n-   #71 = Integer            -1\n-   #72 = Utf8               encoder\n-   #73 = Utf8               Ljava/nio/charset/CharsetEncoder;\n-   #74 = Utf8               cbuf\n-   #75 = Utf8               Ljava/nio/CharBuffer;\n-   #76 = Utf8               bbuf\n-   #77 = Utf8               Ljava/nio/ByteBuffer;\n-   #78 = Utf8               mark_cbuf\n-   #79 = Utf8               mark_bbuf\n-   #80 = Utf8               <init>\n-   #81 = Utf8               (Ljava/lang/CharSequence;Ljava/nio/charset/Charset;I)V\n-   #82 = Utf8               Code\n-   #83 = Utf8               LineNumberTable\n-   #84 = Utf8               StackMapTable\n-   #85 = Class              #176          // java/lang/CharSequence\n-   #86 = Class              #177          // java/nio/charset/Charset\n-   #87 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/String;I)V\n-   #88 = Utf8               (Ljava/lang/CharSequence;Ljava/nio/charset/Charset;)V\n-   #89 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/String;)V\n-   #90 = Utf8               fillBuffer\n-   #91 = Utf8               ()V\n-   #92 = Class              #178          // java/nio/charset/CoderResult\n-   #93 = Utf8               Exceptions\n-   #94 = Class              #179          // java/nio/charset/CharacterCodingException\n-   #95 = Utf8               read\n-   #96 = Utf8               ([BII)I\n-   #97 = Class              #180          // java/io/IOException\n-   #98 = Utf8               ()I\n-   #99 = Utf8               ([B)I\n-  #100 = Utf8               skip\n-  #101 = Utf8               (J)J\n-  #102 = Utf8               available\n-  #103 = Utf8               close\n-  #104 = Utf8               mark\n-  #105 = Utf8               (I)V\n-  #106 = Utf8               reset\n-  #107 = Utf8               markSupported\n-  #108 = Utf8               ()Z\n-  #109 = Utf8               SourceFile\n-  #110 = Utf8               CharSequenceInputStream.java\n-  #111 = Utf8               org/apache/commons/io/IOUtils\n-  #112 = NameAndType        #80:#91       // \"<init>\":()V\n-  #113 = NameAndType        #181:#182     // newEncoder:()Ljava/nio/charset/CharsetEncoder;\n-  #114 = Class              #183          // java/nio/charset/CodingErrorAction\n-  #115 = NameAndType        #184:#185     // REPLACE:Ljava/nio/charset/CodingErrorAction;\n-  #116 = Class              #186          // java/nio/charset/CharsetEncoder\n-  #117 = NameAndType        #187:#188     // onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-  #118 = NameAndType        #189:#188     // onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-  #119 = NameAndType        #72:#73       // encoder:Ljava/nio/charset/CharsetEncoder;\n-  #120 = NameAndType        #190:#191     // maxBytesPerChar:()F\n-  #121 = Utf8               java/lang/IllegalArgumentException\n-  #122 = Utf8               java/lang/StringBuilder\n-  #123 = Utf8               Buffer size\n-  #124 = NameAndType        #192:#193     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #125 = NameAndType        #192:#194     // append:(I)Ljava/lang/StringBuilder;\n-  #126 = Utf8                is less than maxBytesPerChar\n-  #127 = NameAndType        #192:#195     // append:(F)Ljava/lang/StringBuilder;\n-  #128 = NameAndType        #196:#197     // toString:()Ljava/lang/String;\n-  #129 = NameAndType        #80:#198      // \"<init>\":(Ljava/lang/String;)V\n-  #130 = Class              #199          // java/nio/ByteBuffer\n-  #131 = NameAndType        #200:#201     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #132 = NameAndType        #76:#77       // bbuf:Ljava/nio/ByteBuffer;\n-  #133 = NameAndType        #202:#203     // flip:()Ljava/nio/ByteBuffer;\n-  #134 = Class              #204          // java/nio/CharBuffer\n-  #135 = NameAndType        #205:#206     // wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n-  #136 = NameAndType        #74:#75       // cbuf:Ljava/nio/CharBuffer;\n-  #137 = Utf8               org/apache/commons/io/input/CharSequenceInputStream\n-  #138 = NameAndType        #78:#67       // mark_cbuf:I\n-  #139 = NameAndType        #79:#67       // mark_bbuf:I\n-  #140 = NameAndType        #207:#208     // forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n-  #141 = NameAndType        #80:#81       // \"<init>\":(Ljava/lang/CharSequence;Ljava/nio/charset/Charset;I)V\n-  #142 = NameAndType        #80:#87       // \"<init>\":(Ljava/lang/CharSequence;Ljava/lang/String;I)V\n-  #143 = NameAndType        #209:#203     // compact:()Ljava/nio/ByteBuffer;\n-  #144 = NameAndType        #210:#211     // encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n-  #145 = NameAndType        #212:#108     // isError:()Z\n-  #146 = NameAndType        #213:#91      // throwException:()V\n-  #147 = Utf8               array\n-  #148 = Class              #214          // java/util/Objects\n-  #149 = NameAndType        #215:#216     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #150 = Utf8               java/lang/IndexOutOfBoundsException\n-  #151 = Utf8               Array Size=\n-  #152 = Utf8               , offset=\n-  #153 = Utf8               , length=\n-  #154 = NameAndType        #217:#108     // hasRemaining:()Z\n-  #155 = NameAndType        #218:#98      // remaining:()I\n-  #156 = Class              #219          // java/lang/Math\n-  #157 = NameAndType        #220:#221     // min:(II)I\n-  #158 = NameAndType        #222:#223     // get:([BII)Ljava/nio/ByteBuffer;\n-  #159 = NameAndType        #90:#91       // fillBuffer:()V\n-  #160 = NameAndType        #222:#224     // get:()B\n-  #161 = NameAndType        #95:#96       // read:([BII)I\n-  #162 = NameAndType        #102:#98      // available:()I\n-  #163 = NameAndType        #95:#98       // read:()I\n-  #164 = NameAndType        #225:#98      // position:()I\n-  #165 = NameAndType        #104:#226     // mark:()Ljava/nio/CharBuffer;\n-  #166 = NameAndType        #104:#203     // mark:()Ljava/nio/ByteBuffer;\n-  #167 = NameAndType        #106:#182     // reset:()Ljava/nio/charset/CharsetEncoder;\n-  #168 = NameAndType        #227:#226     // rewind:()Ljava/nio/CharBuffer;\n-  #169 = NameAndType        #227:#203     // rewind:()Ljava/nio/ByteBuffer;\n-  #170 = NameAndType        #228:#201     // limit:(I)Ljava/nio/ByteBuffer;\n-  #171 = Utf8               java/lang/IllegalStateException\n-  #172 = Utf8               Unexpected CharBuffer position: actual=\n-  #173 = Utf8                expected=\n-  #174 = NameAndType        #225:#201     // position:(I)Ljava/nio/ByteBuffer;\n-  #175 = Utf8               java/io/InputStream\n-  #176 = Utf8               java/lang/CharSequence\n-  #177 = Utf8               java/nio/charset/Charset\n-  #178 = Utf8               java/nio/charset/CoderResult\n-  #179 = Utf8               java/nio/charset/CharacterCodingException\n-  #180 = Utf8               java/io/IOException\n-  #181 = Utf8               newEncoder\n-  #182 = Utf8               ()Ljava/nio/charset/CharsetEncoder;\n-  #183 = Utf8               java/nio/charset/CodingErrorAction\n-  #184 = Utf8               REPLACE\n-  #185 = Utf8               Ljava/nio/charset/CodingErrorAction;\n-  #186 = Utf8               java/nio/charset/CharsetEncoder\n-  #187 = Utf8               onMalformedInput\n-  #188 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-  #189 = Utf8               onUnmappableCharacter\n-  #190 = Utf8               maxBytesPerChar\n-  #191 = Utf8               ()F\n-  #192 = Utf8               append\n-  #193 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #194 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #195 = Utf8               (F)Ljava/lang/StringBuilder;\n-  #196 = Utf8               toString\n-  #197 = Utf8               ()Ljava/lang/String;\n-  #198 = Utf8               (Ljava/lang/String;)V\n-  #199 = Utf8               java/nio/ByteBuffer\n-  #200 = Utf8               allocate\n-  #201 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #202 = Utf8               flip\n-  #203 = Utf8               ()Ljava/nio/ByteBuffer;\n-  #204 = Utf8               java/nio/CharBuffer\n-  #205 = Utf8               wrap\n-  #206 = Utf8               (Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n-  #207 = Utf8               forName\n-  #208 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/Charset;\n-  #209 = Utf8               compact\n-  #210 = Utf8               encode\n-  #211 = Utf8               (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n-  #212 = Utf8               isError\n-  #213 = Utf8               throwException\n-  #214 = Utf8               java/util/Objects\n-  #215 = Utf8               requireNonNull\n-  #216 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #217 = Utf8               hasRemaining\n-  #218 = Utf8               remaining\n-  #219 = Utf8               java/lang/Math\n-  #220 = Utf8               min\n-  #221 = Utf8               (II)I\n-  #222 = Utf8               get\n-  #223 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #224 = Utf8               ()B\n-  #225 = Utf8               position\n-  #226 = Utf8               ()Ljava/nio/CharBuffer;\n-  #227 = Utf8               rewind\n-  #228 = Utf8               limit\n+    #1 = Class              #2            // org/apache/commons/io/IOUtils\n+    #2 = Utf8               org/apache/commons/io/IOUtils\n+    #3 = Methodref          #4.#5         // java/io/InputStream.\"<init>\":()V\n+    #4 = Class              #6            // java/io/InputStream\n+    #5 = NameAndType        #7:#8         // \"<init>\":()V\n+    #6 = Utf8               java/io/InputStream\n+    #7 = Utf8               <init>\n+    #8 = Utf8               ()V\n+    #9 = Methodref          #10.#11       // java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n+   #10 = Class              #12           // java/nio/charset/Charset\n+   #11 = NameAndType        #13:#14       // newEncoder:()Ljava/nio/charset/CharsetEncoder;\n+   #12 = Utf8               java/nio/charset/Charset\n+   #13 = Utf8               newEncoder\n+   #14 = Utf8               ()Ljava/nio/charset/CharsetEncoder;\n+   #15 = Fieldref           #16.#17       // java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n+   #16 = Class              #18           // java/nio/charset/CodingErrorAction\n+   #17 = NameAndType        #19:#20       // REPLACE:Ljava/nio/charset/CodingErrorAction;\n+   #18 = Utf8               java/nio/charset/CodingErrorAction\n+   #19 = Utf8               REPLACE\n+   #20 = Utf8               Ljava/nio/charset/CodingErrorAction;\n+   #21 = Methodref          #22.#23       // java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+   #22 = Class              #24           // java/nio/charset/CharsetEncoder\n+   #23 = NameAndType        #25:#26       // onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+   #24 = Utf8               java/nio/charset/CharsetEncoder\n+   #25 = Utf8               onMalformedInput\n+   #26 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+   #27 = Methodref          #22.#28       // java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+   #28 = NameAndType        #29:#26       // onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+   #29 = Utf8               onUnmappableCharacter\n+   #30 = Fieldref           #31.#32       // org/apache/commons/io/input/CharSequenceInputStream.encoder:Ljava/nio/charset/CharsetEncoder;\n+   #31 = Class              #33           // org/apache/commons/io/input/CharSequenceInputStream\n+   #32 = NameAndType        #34:#35       // encoder:Ljava/nio/charset/CharsetEncoder;\n+   #33 = Utf8               org/apache/commons/io/input/CharSequenceInputStream\n+   #34 = Utf8               encoder\n+   #35 = Utf8               Ljava/nio/charset/CharsetEncoder;\n+   #36 = Methodref          #22.#37       // java/nio/charset/CharsetEncoder.maxBytesPerChar:()F\n+   #37 = NameAndType        #38:#39       // maxBytesPerChar:()F\n+   #38 = Utf8               maxBytesPerChar\n+   #39 = Utf8               ()F\n+   #40 = Class              #41           // java/lang/IllegalArgumentException\n+   #41 = Utf8               java/lang/IllegalArgumentException\n+   #42 = Class              #43           // java/lang/StringBuilder\n+   #43 = Utf8               java/lang/StringBuilder\n+   #44 = Methodref          #42.#5        // java/lang/StringBuilder.\"<init>\":()V\n+   #45 = String             #46           // Buffer size\n+   #46 = Utf8               Buffer size\n+   #47 = Methodref          #42.#48       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #48 = NameAndType        #49:#50       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #49 = Utf8               append\n+   #50 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #51 = Methodref          #42.#52       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #52 = NameAndType        #49:#53       // append:(I)Ljava/lang/StringBuilder;\n+   #53 = Utf8               (I)Ljava/lang/StringBuilder;\n+   #54 = String             #55           //  is less than maxBytesPerChar\n+   #55 = Utf8                is less than maxBytesPerChar\n+   #56 = Methodref          #42.#57       // java/lang/StringBuilder.append:(F)Ljava/lang/StringBuilder;\n+   #57 = NameAndType        #49:#58       // append:(F)Ljava/lang/StringBuilder;\n+   #58 = Utf8               (F)Ljava/lang/StringBuilder;\n+   #59 = Methodref          #42.#60       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #60 = NameAndType        #61:#62       // toString:()Ljava/lang/String;\n+   #61 = Utf8               toString\n+   #62 = Utf8               ()Ljava/lang/String;\n+   #63 = Methodref          #40.#64       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #64 = NameAndType        #7:#65        // \"<init>\":(Ljava/lang/String;)V\n+   #65 = Utf8               (Ljava/lang/String;)V\n+   #66 = Methodref          #67.#68       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #67 = Class              #69           // java/nio/ByteBuffer\n+   #68 = NameAndType        #70:#71       // allocate:(I)Ljava/nio/ByteBuffer;\n+   #69 = Utf8               java/nio/ByteBuffer\n+   #70 = Utf8               allocate\n+   #71 = Utf8               (I)Ljava/nio/ByteBuffer;\n+   #72 = Fieldref           #31.#73       // org/apache/commons/io/input/CharSequenceInputStream.bbuf:Ljava/nio/ByteBuffer;\n+   #73 = NameAndType        #74:#75       // bbuf:Ljava/nio/ByteBuffer;\n+   #74 = Utf8               bbuf\n+   #75 = Utf8               Ljava/nio/ByteBuffer;\n+   #76 = Methodref          #67.#77       // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+   #77 = NameAndType        #78:#79       // flip:()Ljava/nio/ByteBuffer;\n+   #78 = Utf8               flip\n+   #79 = Utf8               ()Ljava/nio/ByteBuffer;\n+   #80 = Methodref          #81.#82       // java/nio/CharBuffer.wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n+   #81 = Class              #83           // java/nio/CharBuffer\n+   #82 = NameAndType        #84:#85       // wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n+   #83 = Utf8               java/nio/CharBuffer\n+   #84 = Utf8               wrap\n+   #85 = Utf8               (Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n+   #86 = Fieldref           #31.#87       // org/apache/commons/io/input/CharSequenceInputStream.cbuf:Ljava/nio/CharBuffer;\n+   #87 = NameAndType        #88:#89       // cbuf:Ljava/nio/CharBuffer;\n+   #88 = Utf8               cbuf\n+   #89 = Utf8               Ljava/nio/CharBuffer;\n+   #90 = Fieldref           #31.#91       // org/apache/commons/io/input/CharSequenceInputStream.mark_cbuf:I\n+   #91 = NameAndType        #92:#93       // mark_cbuf:I\n+   #92 = Utf8               mark_cbuf\n+   #93 = Utf8               I\n+   #94 = Fieldref           #31.#95       // org/apache/commons/io/input/CharSequenceInputStream.mark_bbuf:I\n+   #95 = NameAndType        #96:#93       // mark_bbuf:I\n+   #96 = Utf8               mark_bbuf\n+   #97 = Methodref          #10.#98       // java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n+   #98 = NameAndType        #99:#100      // forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n+   #99 = Utf8               forName\n+  #100 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/Charset;\n+  #101 = Methodref          #31.#102      // org/apache/commons/io/input/CharSequenceInputStream.\"<init>\":(Ljava/lang/CharSequence;Ljava/nio/charset/Charset;I)V\n+  #102 = NameAndType        #7:#103       // \"<init>\":(Ljava/lang/CharSequence;Ljava/nio/charset/Charset;I)V\n+  #103 = Utf8               (Ljava/lang/CharSequence;Ljava/nio/charset/Charset;I)V\n+  #104 = Methodref          #31.#105      // org/apache/commons/io/input/CharSequenceInputStream.\"<init>\":(Ljava/lang/CharSequence;Ljava/lang/String;I)V\n+  #105 = NameAndType        #7:#106       // \"<init>\":(Ljava/lang/CharSequence;Ljava/lang/String;I)V\n+  #106 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/String;I)V\n+  #107 = Methodref          #67.#108      // java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;\n+  #108 = NameAndType        #109:#79      // compact:()Ljava/nio/ByteBuffer;\n+  #109 = Utf8               compact\n+  #110 = Methodref          #22.#111      // java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n+  #111 = NameAndType        #112:#113     // encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n+  #112 = Utf8               encode\n+  #113 = Utf8               (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n+  #114 = Methodref          #115.#116     // java/nio/charset/CoderResult.isError:()Z\n+  #115 = Class              #117          // java/nio/charset/CoderResult\n+  #116 = NameAndType        #118:#119     // isError:()Z\n+  #117 = Utf8               java/nio/charset/CoderResult\n+  #118 = Utf8               isError\n+  #119 = Utf8               ()Z\n+  #120 = Methodref          #115.#121     // java/nio/charset/CoderResult.throwException:()V\n+  #121 = NameAndType        #122:#8       // throwException:()V\n+  #122 = Utf8               throwException\n+  #123 = String             #124          // array\n+  #124 = Utf8               array\n+  #125 = Methodref          #126.#127     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #126 = Class              #128          // java/util/Objects\n+  #127 = NameAndType        #129:#130     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #128 = Utf8               java/util/Objects\n+  #129 = Utf8               requireNonNull\n+  #130 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #131 = Class              #132          // java/lang/IndexOutOfBoundsException\n+  #132 = Utf8               java/lang/IndexOutOfBoundsException\n+  #133 = String             #134          // Array Size=\n+  #134 = Utf8               Array Size=\n+  #135 = String             #136          // , offset=\n+  #136 = Utf8               , offset=\n+  #137 = String             #138          // , length=\n+  #138 = Utf8               , length=\n+  #139 = Methodref          #131.#64      // java/lang/IndexOutOfBoundsException.\"<init>\":(Ljava/lang/String;)V\n+  #140 = Methodref          #67.#141      // java/nio/ByteBuffer.hasRemaining:()Z\n+  #141 = NameAndType        #142:#119     // hasRemaining:()Z\n+  #142 = Utf8               hasRemaining\n+  #143 = Methodref          #81.#141      // java/nio/CharBuffer.hasRemaining:()Z\n+  #144 = Methodref          #67.#145      // java/nio/ByteBuffer.remaining:()I\n+  #145 = NameAndType        #146:#147     // remaining:()I\n+  #146 = Utf8               remaining\n+  #147 = Utf8               ()I\n+  #148 = Methodref          #149.#150     // java/lang/Math.min:(II)I\n+  #149 = Class              #151          // java/lang/Math\n+  #150 = NameAndType        #152:#153     // min:(II)I\n+  #151 = Utf8               java/lang/Math\n+  #152 = Utf8               min\n+  #153 = Utf8               (II)I\n+  #154 = Methodref          #67.#155      // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+  #155 = NameAndType        #156:#157     // get:([BII)Ljava/nio/ByteBuffer;\n+  #156 = Utf8               get\n+  #157 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #158 = Methodref          #31.#159      // org/apache/commons/io/input/CharSequenceInputStream.fillBuffer:()V\n+  #159 = NameAndType        #160:#8       // fillBuffer:()V\n+  #160 = Utf8               fillBuffer\n+  #161 = Methodref          #67.#162      // java/nio/ByteBuffer.get:()B\n+  #162 = NameAndType        #156:#163     // get:()B\n+  #163 = Utf8               ()B\n+  #164 = Methodref          #31.#165      // org/apache/commons/io/input/CharSequenceInputStream.read:([BII)I\n+  #165 = NameAndType        #166:#167     // read:([BII)I\n+  #166 = Utf8               read\n+  #167 = Utf8               ([BII)I\n+  #168 = Methodref          #31.#169      // org/apache/commons/io/input/CharSequenceInputStream.available:()I\n+  #169 = NameAndType        #170:#147     // available:()I\n+  #170 = Utf8               available\n+  #171 = Methodref          #31.#172      // org/apache/commons/io/input/CharSequenceInputStream.read:()I\n+  #172 = NameAndType        #166:#147     // read:()I\n+  #173 = Methodref          #81.#145      // java/nio/CharBuffer.remaining:()I\n+  #174 = Methodref          #81.#175      // java/nio/CharBuffer.position:()I\n+  #175 = NameAndType        #176:#147     // position:()I\n+  #176 = Utf8               position\n+  #177 = Methodref          #67.#175      // java/nio/ByteBuffer.position:()I\n+  #178 = Methodref          #81.#179      // java/nio/CharBuffer.mark:()Ljava/nio/CharBuffer;\n+  #179 = NameAndType        #180:#181     // mark:()Ljava/nio/CharBuffer;\n+  #180 = Utf8               mark\n+  #181 = Utf8               ()Ljava/nio/CharBuffer;\n+  #182 = Methodref          #67.#183      // java/nio/ByteBuffer.mark:()Ljava/nio/ByteBuffer;\n+  #183 = NameAndType        #180:#79      // mark:()Ljava/nio/ByteBuffer;\n+  #184 = Methodref          #22.#185      // java/nio/charset/CharsetEncoder.reset:()Ljava/nio/charset/CharsetEncoder;\n+  #185 = NameAndType        #186:#14      // reset:()Ljava/nio/charset/CharsetEncoder;\n+  #186 = Utf8               reset\n+  #187 = Methodref          #81.#188      // java/nio/CharBuffer.rewind:()Ljava/nio/CharBuffer;\n+  #188 = NameAndType        #189:#181     // rewind:()Ljava/nio/CharBuffer;\n+  #189 = Utf8               rewind\n+  #190 = Methodref          #67.#191      // java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+  #191 = NameAndType        #189:#79      // rewind:()Ljava/nio/ByteBuffer;\n+  #192 = Methodref          #67.#193      // java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+  #193 = NameAndType        #194:#71      // limit:(I)Ljava/nio/ByteBuffer;\n+  #194 = Utf8               limit\n+  #195 = Class              #196          // java/lang/IllegalStateException\n+  #196 = Utf8               java/lang/IllegalStateException\n+  #197 = String             #198          // Unexpected CharBuffer position: actual=\n+  #198 = Utf8               Unexpected CharBuffer position: actual=\n+  #199 = String             #200          //  expected=\n+  #200 = Utf8                expected=\n+  #201 = Methodref          #195.#64      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+  #202 = Methodref          #67.#203      // java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n+  #203 = NameAndType        #176:#71      // position:(I)Ljava/nio/ByteBuffer;\n+  #204 = Utf8               BUFFER_SIZE\n+  #205 = Utf8               ConstantValue\n+  #206 = Integer            2048\n+  #207 = Utf8               NO_MARK\n+  #208 = Integer            -1\n+  #209 = Utf8               Code\n+  #210 = Utf8               LineNumberTable\n+  #211 = Utf8               StackMapTable\n+  #212 = Class              #213          // java/lang/CharSequence\n+  #213 = Utf8               java/lang/CharSequence\n+  #214 = Utf8               (Ljava/lang/CharSequence;Ljava/nio/charset/Charset;)V\n+  #215 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/String;)V\n+  #216 = Utf8               Exceptions\n+  #217 = Class              #218          // java/nio/charset/CharacterCodingException\n+  #218 = Utf8               java/nio/charset/CharacterCodingException\n+  #219 = Class              #220          // java/io/IOException\n+  #220 = Utf8               java/io/IOException\n+  #221 = Utf8               ([B)I\n+  #222 = Utf8               skip\n+  #223 = Utf8               (J)J\n+  #224 = Utf8               close\n+  #225 = Utf8               (I)V\n+  #226 = Utf8               markSupported\n+  #227 = Utf8               SourceFile\n+  #228 = Utf8               CharSequenceInputStream.java\n {\n   private static final int BUFFER_SIZE = 2048;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 2048\n \n   private static final int NO_MARK = -1;\n@@ -269,66 +269,66 @@\n \n   public org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence, java.nio.charset.Charset, int);\n     descriptor: (Ljava/lang/CharSequence;Ljava/nio/charset/Charset;I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=5, args_size=4\n          0: aload_0\n-         1: invokespecial #2                  // Method java/io/InputStream.\"<init>\":()V\n+         1: invokespecial #3                  // Method java/io/InputStream.\"<init>\":()V\n          4: aload_0\n          5: aload_2\n-         6: invokevirtual #3                  // Method java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n-         9: getstatic     #4                  // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n-        12: invokevirtual #5                  // Method java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-        15: getstatic     #4                  // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n-        18: invokevirtual #6                  // Method java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-        21: putfield      #7                  // Field encoder:Ljava/nio/charset/CharsetEncoder;\n+         6: invokevirtual #9                  // Method java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n+         9: getstatic     #15                 // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n+        12: invokevirtual #21                 // Method java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+        15: getstatic     #15                 // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n+        18: invokevirtual #27                 // Method java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+        21: putfield      #30                 // Field encoder:Ljava/nio/charset/CharsetEncoder;\n         24: aload_0\n-        25: getfield      #7                  // Field encoder:Ljava/nio/charset/CharsetEncoder;\n-        28: invokevirtual #8                  // Method java/nio/charset/CharsetEncoder.maxBytesPerChar:()F\n+        25: getfield      #30                 // Field encoder:Ljava/nio/charset/CharsetEncoder;\n+        28: invokevirtual #36                 // Method java/nio/charset/CharsetEncoder.maxBytesPerChar:()F\n         31: fstore        4\n         33: iload_3\n         34: i2f\n         35: fload         4\n         37: fcmpg\n         38: ifge          78\n-        41: new           #9                  // class java/lang/IllegalArgumentException\n+        41: new           #40                 // class java/lang/IllegalArgumentException\n         44: dup\n-        45: new           #10                 // class java/lang/StringBuilder\n+        45: new           #42                 // class java/lang/StringBuilder\n         48: dup\n-        49: invokespecial #11                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        52: ldc           #12                 // String Buffer size\n-        54: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        49: invokespecial #44                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        52: ldc           #45                 // String Buffer size\n+        54: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         57: iload_3\n-        58: invokevirtual #14                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        61: ldc           #15                 // String  is less than maxBytesPerChar\n-        63: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        58: invokevirtual #51                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        61: ldc           #54                 // String  is less than maxBytesPerChar\n+        63: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         66: fload         4\n-        68: invokevirtual #16                 // Method java/lang/StringBuilder.append:(F)Ljava/lang/StringBuilder;\n-        71: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        74: invokespecial #18                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        68: invokevirtual #56                 // Method java/lang/StringBuilder.append:(F)Ljava/lang/StringBuilder;\n+        71: invokevirtual #59                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        74: invokespecial #63                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         77: athrow\n         78: aload_0\n         79: iload_3\n-        80: invokestatic  #19                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-        83: putfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n+        80: invokestatic  #66                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        83: putfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n         86: aload_0\n-        87: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n-        90: invokevirtual #21                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+        87: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n+        90: invokevirtual #76                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         93: pop\n         94: aload_0\n         95: aload_1\n-        96: invokestatic  #22                 // Method java/nio/CharBuffer.wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n-        99: putfield      #23                 // Field cbuf:Ljava/nio/CharBuffer;\n+        96: invokestatic  #80                 // Method java/nio/CharBuffer.wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n+        99: putfield      #86                 // Field cbuf:Ljava/nio/CharBuffer;\n        102: aload_0\n        103: iconst_m1\n-       104: putfield      #25                 // Field mark_cbuf:I\n+       104: putfield      #90                 // Field mark_cbuf:I\n        107: aload_0\n        108: iconst_m1\n-       109: putfield      #26                 // Field mark_bbuf:I\n+       109: putfield      #94                 // Field mark_bbuf:I\n        112: return\n       LineNumberTable:\n         line 63: 0\n         line 64: 4\n         line 65: 12\n         line 66: 18\n         line 68: 24\n@@ -350,78 +350,78 @@\n     descriptor: (Ljava/lang/CharSequence;Ljava/lang/String;I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: aload_2\n-         3: invokestatic  #27                 // Method java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n+         3: invokestatic  #97                 // Method java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n          6: iload_3\n-         7: invokespecial #28                 // Method \"<init>\":(Ljava/lang/CharSequence;Ljava/nio/charset/Charset;I)V\n+         7: invokespecial #101                // Method \"<init>\":(Ljava/lang/CharSequence;Ljava/nio/charset/Charset;I)V\n         10: return\n       LineNumberTable:\n         line 89: 0\n         line 90: 10\n \n   public org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence, java.nio.charset.Charset);\n     descriptor: (Ljava/lang/CharSequence;Ljava/nio/charset/Charset;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: sipush        2048\n-         6: invokespecial #28                 // Method \"<init>\":(Ljava/lang/CharSequence;Ljava/nio/charset/Charset;I)V\n+         6: invokespecial #101                // Method \"<init>\":(Ljava/lang/CharSequence;Ljava/nio/charset/Charset;I)V\n          9: return\n       LineNumberTable:\n         line 101: 0\n         line 102: 9\n \n   public org.apache.commons.io.input.CharSequenceInputStream(java.lang.CharSequence, java.lang.String);\n     descriptor: (Ljava/lang/CharSequence;Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: sipush        2048\n-         6: invokespecial #29                 // Method \"<init>\":(Ljava/lang/CharSequence;Ljava/lang/String;I)V\n+         6: invokespecial #104                // Method \"<init>\":(Ljava/lang/CharSequence;Ljava/lang/String;I)V\n          9: return\n       LineNumberTable:\n         line 113: 0\n         line 114: 9\n \n   private void fillBuffer() throws java.nio.charset.CharacterCodingException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #30                 // Method java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;\n+         1: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n+         4: invokevirtual #107                // Method java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;\n          7: pop\n          8: aload_0\n-         9: getfield      #7                  // Field encoder:Ljava/nio/charset/CharsetEncoder;\n+         9: getfield      #30                 // Field encoder:Ljava/nio/charset/CharsetEncoder;\n         12: aload_0\n-        13: getfield      #23                 // Field cbuf:Ljava/nio/CharBuffer;\n+        13: getfield      #86                 // Field cbuf:Ljava/nio/CharBuffer;\n         16: aload_0\n-        17: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n+        17: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n         20: iconst_1\n-        21: invokevirtual #31                 // Method java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n+        21: invokevirtual #110                // Method java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n         24: astore_1\n         25: aload_1\n-        26: invokevirtual #32                 // Method java/nio/charset/CoderResult.isError:()Z\n+        26: invokevirtual #114                // Method java/nio/charset/CoderResult.isError:()Z\n         29: ifeq          36\n         32: aload_1\n-        33: invokevirtual #33                 // Method java/nio/charset/CoderResult.throwException:()V\n+        33: invokevirtual #120                // Method java/nio/charset/CoderResult.throwException:()V\n         36: aload_0\n-        37: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n-        40: invokevirtual #21                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+        37: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n+        40: invokevirtual #76                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         43: pop\n         44: return\n       LineNumberTable:\n         line 123: 0\n         line 124: 8\n         line 125: 25\n         line 126: 32\n@@ -436,80 +436,80 @@\n \n   public int read(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=6, args_size=4\n          0: aload_1\n-         1: ldc           #34                 // String array\n-         3: invokestatic  #35                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+         1: ldc           #123                // String array\n+         3: invokestatic  #125                // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n          6: pop\n          7: iload_3\n          8: iflt          19\n         11: iload_2\n         12: iload_3\n         13: iadd\n         14: aload_1\n         15: arraylength\n         16: if_icmple     65\n-        19: new           #36                 // class java/lang/IndexOutOfBoundsException\n+        19: new           #131                // class java/lang/IndexOutOfBoundsException\n         22: dup\n-        23: new           #10                 // class java/lang/StringBuilder\n+        23: new           #42                 // class java/lang/StringBuilder\n         26: dup\n-        27: invokespecial #11                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        30: ldc           #37                 // String Array Size=\n-        32: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        27: invokespecial #44                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        30: ldc           #133                // String Array Size=\n+        32: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         35: aload_1\n         36: arraylength\n-        37: invokevirtual #14                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        40: ldc           #38                 // String , offset=\n-        42: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        37: invokevirtual #51                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        40: ldc           #135                // String , offset=\n+        42: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         45: iload_2\n-        46: invokevirtual #14                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        49: ldc           #39                 // String , length=\n-        51: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        46: invokevirtual #51                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        49: ldc           #137                // String , length=\n+        51: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         54: iload_3\n-        55: invokevirtual #14                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        58: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        61: invokespecial #40                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":(Ljava/lang/String;)V\n+        55: invokevirtual #51                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        58: invokevirtual #59                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        61: invokespecial #139                // Method java/lang/IndexOutOfBoundsException.\"<init>\":(Ljava/lang/String;)V\n         64: athrow\n         65: iload_3\n         66: ifne          71\n         69: iconst_0\n         70: ireturn\n         71: aload_0\n-        72: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n-        75: invokevirtual #41                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n+        72: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n+        75: invokevirtual #140                // Method java/nio/ByteBuffer.hasRemaining:()Z\n         78: ifne          93\n         81: aload_0\n-        82: getfield      #23                 // Field cbuf:Ljava/nio/CharBuffer;\n-        85: invokevirtual #42                 // Method java/nio/CharBuffer.hasRemaining:()Z\n+        82: getfield      #86                 // Field cbuf:Ljava/nio/CharBuffer;\n+        85: invokevirtual #143                // Method java/nio/CharBuffer.hasRemaining:()Z\n         88: ifne          93\n         91: iconst_m1\n         92: ireturn\n         93: iconst_0\n         94: istore        4\n         96: iload_3\n         97: ifle          182\n        100: aload_0\n-       101: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n-       104: invokevirtual #41                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n+       101: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n+       104: invokevirtual #140                // Method java/nio/ByteBuffer.hasRemaining:()Z\n        107: ifeq          155\n        110: aload_0\n-       111: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n-       114: invokevirtual #43                 // Method java/nio/ByteBuffer.remaining:()I\n+       111: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n+       114: invokevirtual #144                // Method java/nio/ByteBuffer.remaining:()I\n        117: iload_3\n-       118: invokestatic  #44                 // Method java/lang/Math.min:(II)I\n+       118: invokestatic  #148                // Method java/lang/Math.min:(II)I\n        121: istore        5\n        123: aload_0\n-       124: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n+       124: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n        127: aload_1\n        128: iload_2\n        129: iload         5\n-       131: invokevirtual #45                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+       131: invokevirtual #154                // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n        134: pop\n        135: iload_2\n        136: iload         5\n        138: iadd\n        139: istore_2\n        140: iload_3\n        141: iload         5\n@@ -517,29 +517,29 @@\n        144: istore_3\n        145: iload         4\n        147: iload         5\n        149: iadd\n        150: istore        4\n        152: goto          96\n        155: aload_0\n-       156: invokespecial #46                 // Method fillBuffer:()V\n+       156: invokespecial #158                // Method fillBuffer:()V\n        159: aload_0\n-       160: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n-       163: invokevirtual #41                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n+       160: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n+       163: invokevirtual #140                // Method java/nio/ByteBuffer.hasRemaining:()Z\n        166: ifne          96\n        169: aload_0\n-       170: getfield      #23                 // Field cbuf:Ljava/nio/CharBuffer;\n-       173: invokevirtual #42                 // Method java/nio/CharBuffer.hasRemaining:()Z\n+       170: getfield      #86                 // Field cbuf:Ljava/nio/CharBuffer;\n+       173: invokevirtual #143                // Method java/nio/CharBuffer.hasRemaining:()Z\n        176: ifne          96\n        179: goto          182\n        182: iload         4\n        184: ifne          201\n        187: aload_0\n-       188: getfield      #23                 // Field cbuf:Ljava/nio/CharBuffer;\n-       191: invokevirtual #42                 // Method java/nio/CharBuffer.hasRemaining:()Z\n+       188: getfield      #86                 // Field cbuf:Ljava/nio/CharBuffer;\n+       191: invokevirtual #143                // Method java/nio/CharBuffer.hasRemaining:()Z\n        194: ifne          201\n        197: iconst_m1\n        198: goto          203\n        201: iload         4\n        203: ireturn\n       LineNumberTable:\n         line 133: 0\n@@ -580,32 +580,32 @@\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #41                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n+         1: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n+         4: invokevirtual #140                // Method java/nio/ByteBuffer.hasRemaining:()Z\n          7: ifeq          22\n         10: aload_0\n-        11: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n-        14: invokevirtual #47                 // Method java/nio/ByteBuffer.get:()B\n+        11: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n+        14: invokevirtual #161                // Method java/nio/ByteBuffer.get:()B\n         17: sipush        255\n         20: iand\n         21: ireturn\n         22: aload_0\n-        23: invokespecial #46                 // Method fillBuffer:()V\n+        23: invokespecial #158                // Method fillBuffer:()V\n         26: aload_0\n-        27: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n-        30: invokevirtual #41                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n+        27: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n+        30: invokevirtual #140                // Method java/nio/ByteBuffer.hasRemaining:()Z\n         33: ifne          0\n         36: aload_0\n-        37: getfield      #23                 // Field cbuf:Ljava/nio/CharBuffer;\n-        40: invokevirtual #42                 // Method java/nio/CharBuffer.hasRemaining:()Z\n+        37: getfield      #86                 // Field cbuf:Ljava/nio/CharBuffer;\n+        40: invokevirtual #143                // Method java/nio/CharBuffer.hasRemaining:()Z\n         43: ifne          0\n         46: iconst_m1\n         47: ireturn\n       LineNumberTable:\n         line 165: 0\n         line 166: 10\n         line 168: 22\n@@ -623,15 +623,15 @@\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n          3: aload_1\n          4: arraylength\n-         5: invokevirtual #48                 // Method read:([BII)I\n+         5: invokevirtual #164                // Method read:([BII)I\n          8: ireturn\n       LineNumberTable:\n         line 177: 0\n     Exceptions:\n       throws java.io.IOException\n \n   public long skip(long) throws java.io.IOException;\n@@ -642,18 +642,18 @@\n          0: lconst_0\n          1: lstore_3\n          2: lload_1\n          3: lconst_0\n          4: lcmp\n          5: ifle          31\n          8: aload_0\n-         9: invokevirtual #49                 // Method available:()I\n+         9: invokevirtual #168                // Method available:()I\n         12: ifle          31\n         15: aload_0\n-        16: invokevirtual #50                 // Method read:()I\n+        16: invokevirtual #171                // Method read:()I\n         19: pop\n         20: lload_1\n         21: lconst_1\n         22: lsub\n         23: lstore_1\n         24: lload_3\n         25: lconst_1\n@@ -679,19 +679,19 @@\n \n   public int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #43                 // Method java/nio/ByteBuffer.remaining:()I\n+         1: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n+         4: invokevirtual #144                // Method java/nio/ByteBuffer.remaining:()I\n          7: aload_0\n-         8: getfield      #23                 // Field cbuf:Ljava/nio/CharBuffer;\n-        11: invokevirtual #51                 // Method java/nio/CharBuffer.remaining:()I\n+         8: getfield      #86                 // Field cbuf:Ljava/nio/CharBuffer;\n+        11: invokevirtual #173                // Method java/nio/CharBuffer.remaining:()I\n         14: iadd\n         15: ireturn\n       LineNumberTable:\n         line 206: 0\n     Exceptions:\n       throws java.io.IOException\n \n@@ -709,29 +709,29 @@\n   public synchronized void mark(int);\n     descriptor: (I)V\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_0\n-         2: getfield      #23                 // Field cbuf:Ljava/nio/CharBuffer;\n-         5: invokevirtual #52                 // Method java/nio/CharBuffer.position:()I\n-         8: putfield      #25                 // Field mark_cbuf:I\n+         2: getfield      #86                 // Field cbuf:Ljava/nio/CharBuffer;\n+         5: invokevirtual #174                // Method java/nio/CharBuffer.position:()I\n+         8: putfield      #90                 // Field mark_cbuf:I\n         11: aload_0\n         12: aload_0\n-        13: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n-        16: invokevirtual #53                 // Method java/nio/ByteBuffer.position:()I\n-        19: putfield      #26                 // Field mark_bbuf:I\n+        13: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n+        16: invokevirtual #177                // Method java/nio/ByteBuffer.position:()I\n+        19: putfield      #94                 // Field mark_bbuf:I\n         22: aload_0\n-        23: getfield      #23                 // Field cbuf:Ljava/nio/CharBuffer;\n-        26: invokevirtual #54                 // Method java/nio/CharBuffer.mark:()Ljava/nio/CharBuffer;\n+        23: getfield      #86                 // Field cbuf:Ljava/nio/CharBuffer;\n+        26: invokevirtual #178                // Method java/nio/CharBuffer.mark:()Ljava/nio/CharBuffer;\n         29: pop\n         30: aload_0\n-        31: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n-        34: invokevirtual #55                 // Method java/nio/ByteBuffer.mark:()Ljava/nio/ByteBuffer;\n+        31: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n+        34: invokevirtual #182                // Method java/nio/ByteBuffer.mark:()Ljava/nio/ByteBuffer;\n         37: pop\n         38: return\n       LineNumberTable:\n         line 220: 0\n         line 221: 11\n         line 222: 22\n         line 223: 30\n@@ -739,93 +739,93 @@\n \n   public synchronized void reset() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #25                 // Field mark_cbuf:I\n+         1: getfield      #90                 // Field mark_cbuf:I\n          4: iconst_m1\n          5: if_icmpeq     170\n          8: aload_0\n-         9: getfield      #23                 // Field cbuf:Ljava/nio/CharBuffer;\n-        12: invokevirtual #52                 // Method java/nio/CharBuffer.position:()I\n+         9: getfield      #86                 // Field cbuf:Ljava/nio/CharBuffer;\n+        12: invokevirtual #174                // Method java/nio/CharBuffer.position:()I\n         15: ifeq          89\n         18: aload_0\n-        19: getfield      #7                  // Field encoder:Ljava/nio/charset/CharsetEncoder;\n-        22: invokevirtual #56                 // Method java/nio/charset/CharsetEncoder.reset:()Ljava/nio/charset/CharsetEncoder;\n+        19: getfield      #30                 // Field encoder:Ljava/nio/charset/CharsetEncoder;\n+        22: invokevirtual #184                // Method java/nio/charset/CharsetEncoder.reset:()Ljava/nio/charset/CharsetEncoder;\n         25: pop\n         26: aload_0\n-        27: getfield      #23                 // Field cbuf:Ljava/nio/CharBuffer;\n-        30: invokevirtual #57                 // Method java/nio/CharBuffer.rewind:()Ljava/nio/CharBuffer;\n+        27: getfield      #86                 // Field cbuf:Ljava/nio/CharBuffer;\n+        30: invokevirtual #187                // Method java/nio/CharBuffer.rewind:()Ljava/nio/CharBuffer;\n         33: pop\n         34: aload_0\n-        35: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n-        38: invokevirtual #58                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+        35: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n+        38: invokevirtual #190                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         41: pop\n         42: aload_0\n-        43: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n+        43: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n         46: iconst_0\n-        47: invokevirtual #59                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+        47: invokevirtual #192                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n         50: pop\n         51: aload_0\n-        52: getfield      #23                 // Field cbuf:Ljava/nio/CharBuffer;\n-        55: invokevirtual #52                 // Method java/nio/CharBuffer.position:()I\n+        52: getfield      #86                 // Field cbuf:Ljava/nio/CharBuffer;\n+        55: invokevirtual #174                // Method java/nio/CharBuffer.position:()I\n         58: aload_0\n-        59: getfield      #25                 // Field mark_cbuf:I\n+        59: getfield      #90                 // Field mark_cbuf:I\n         62: if_icmpge     89\n         65: aload_0\n-        66: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n-        69: invokevirtual #58                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+        66: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n+        69: invokevirtual #190                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         72: pop\n         73: aload_0\n-        74: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n+        74: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n         77: iconst_0\n-        78: invokevirtual #59                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+        78: invokevirtual #192                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n         81: pop\n         82: aload_0\n-        83: invokespecial #46                 // Method fillBuffer:()V\n+        83: invokespecial #158                // Method fillBuffer:()V\n         86: goto          51\n         89: aload_0\n-        90: getfield      #23                 // Field cbuf:Ljava/nio/CharBuffer;\n-        93: invokevirtual #52                 // Method java/nio/CharBuffer.position:()I\n+        90: getfield      #86                 // Field cbuf:Ljava/nio/CharBuffer;\n+        93: invokevirtual #174                // Method java/nio/CharBuffer.position:()I\n         96: aload_0\n-        97: getfield      #25                 // Field mark_cbuf:I\n+        97: getfield      #90                 // Field mark_cbuf:I\n        100: if_icmpeq     148\n-       103: new           #60                 // class java/lang/IllegalStateException\n+       103: new           #195                // class java/lang/IllegalStateException\n        106: dup\n-       107: new           #10                 // class java/lang/StringBuilder\n+       107: new           #42                 // class java/lang/StringBuilder\n        110: dup\n-       111: invokespecial #11                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       114: ldc           #61                 // String Unexpected CharBuffer position: actual=\n-       116: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       111: invokespecial #44                 // Method java/lang/StringBuilder.\"<init>\":()V\n+       114: ldc           #197                // String Unexpected CharBuffer position: actual=\n+       116: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        119: aload_0\n-       120: getfield      #23                 // Field cbuf:Ljava/nio/CharBuffer;\n-       123: invokevirtual #52                 // Method java/nio/CharBuffer.position:()I\n-       126: invokevirtual #14                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       129: ldc           #62                 // String  expected=\n-       131: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       120: getfield      #86                 // Field cbuf:Ljava/nio/CharBuffer;\n+       123: invokevirtual #174                // Method java/nio/CharBuffer.position:()I\n+       126: invokevirtual #51                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       129: ldc           #199                // String  expected=\n+       131: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        134: aload_0\n-       135: getfield      #25                 // Field mark_cbuf:I\n-       138: invokevirtual #14                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       141: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       144: invokespecial #63                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+       135: getfield      #90                 // Field mark_cbuf:I\n+       138: invokevirtual #51                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       141: invokevirtual #59                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       144: invokespecial #201                // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n        147: athrow\n        148: aload_0\n-       149: getfield      #20                 // Field bbuf:Ljava/nio/ByteBuffer;\n+       149: getfield      #72                 // Field bbuf:Ljava/nio/ByteBuffer;\n        152: aload_0\n-       153: getfield      #26                 // Field mark_bbuf:I\n-       156: invokevirtual #64                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n+       153: getfield      #94                 // Field mark_bbuf:I\n+       156: invokevirtual #202                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n        159: pop\n        160: aload_0\n        161: iconst_m1\n-       162: putfield      #25                 // Field mark_cbuf:I\n+       162: putfield      #90                 // Field mark_cbuf:I\n        165: aload_0\n        166: iconst_m1\n-       167: putfield      #26                 // Field mark_bbuf:I\n+       167: putfield      #94                 // Field mark_bbuf:I\n        170: return\n       LineNumberTable:\n         line 241: 0\n         line 243: 8\n         line 244: 18\n         line 245: 26\n         line 246: 34\n"}]}
