{"diffoscope-json-version": 1, "source1": "first/ScatterZipOutputStream.class", "source2": "second/ScatterZipOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,235 +1,235 @@\n-  SHA-256 checksum 86a2d8125f20537f31635bf72425d5362dcd293d8ee11bd2b362935bc1d26eae\n+  SHA-256 checksum 285c5a8c0f9507e2f1b35646a344d53d6e3ce4668c9d08a249dc3f769234a49f\n   Compiled from \"ScatterZipOutputStream.java\"\n public class org.apache.commons.compress.archivers.zip.ScatterZipOutputStream implements java.io.Closeable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #9                          // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream\n-  super_class: #48                        // java/lang/Object\n+  this_class: #2                          // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream\n+  super_class: #39                        // java/lang/Object\n   interfaces: 1, fields: 5, methods: 11, attributes: 2\n Constant pool:\n-    #1 = Fieldref           #9.#119       // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.items:Ljava/util/Queue;\n-    #2 = Fieldref           #9.#120       // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.backingStore:Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n-    #3 = Methodref          #121.#122     // java/io/File.toPath:()Ljava/nio/file/Path;\n-    #4 = Class              #123          // java/util/zip/Deflater\n-    #5 = Methodref          #9.#124       // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.pathBased:(Ljava/nio/file/Path;I)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n-    #6 = Class              #125          // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore\n-    #7 = Methodref          #6.#126       // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.\"<init>\":(Ljava/nio/file/Path;)V\n-    #8 = Methodref          #127.#128     // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-    #9 = Class              #129          // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream\n-   #10 = Methodref          #9.#130       // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.\"<init>\":(Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;Lorg/apache/commons/compress/archivers/zip/StreamCompressor;)V\n-   #11 = Methodref          #48.#131      // java/lang/Object.\"<init>\":()V\n-   #12 = Class              #132          // java/util/concurrent/ConcurrentLinkedQueue\n-   #13 = Methodref          #12.#131      // java/util/concurrent/ConcurrentLinkedQueue.\"<init>\":()V\n-   #14 = Class              #133          // java/util/concurrent/atomic/AtomicBoolean\n-   #15 = Methodref          #14.#131      // java/util/concurrent/atomic/AtomicBoolean.\"<init>\":()V\n-   #16 = Fieldref           #9.#134       // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.isClosed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-   #17 = Fieldref           #9.#135       // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #18 = Methodref          #95.#136      // org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.getPayloadStream:()Ljava/io/InputStream;\n-   #19 = Methodref          #95.#137      // org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.getMethod:()I\n-   #20 = Methodref          #127.#138     // org/apache/commons/compress/archivers/zip/StreamCompressor.deflate:(Ljava/io/InputStream;I)V\n-   #21 = Methodref          #96.#139      // java/io/InputStream.close:()V\n-   #22 = Class              #140          // java/lang/Throwable\n-   #23 = Methodref          #22.#141      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #24 = Class              #142          // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry\n-   #25 = Methodref          #127.#143     // org/apache/commons/compress/archivers/zip/StreamCompressor.getCrc32:()J\n-   #26 = Methodref          #127.#144     // org/apache/commons/compress/archivers/zip/StreamCompressor.getBytesWrittenForLastEntry:()J\n-   #27 = Methodref          #127.#145     // org/apache/commons/compress/archivers/zip/StreamCompressor.getBytesRead:()J\n-   #28 = Methodref          #24.#146      // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest;JJJ)V\n-   #29 = InterfaceMethodref #147.#148     // java/util/Queue.add:(Ljava/lang/Object;)Z\n-   #30 = Methodref          #14.#149      // java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z\n-   #31 = Fieldref           #9.#150       // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.zipEntryWriter:Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n-   #32 = Methodref          #46.#139      // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter.close:()V\n-   #33 = InterfaceMethodref #151.#139     // org/apache/commons/compress/parallel/ScatterGatherBackingStore.close:()V\n-   #34 = Methodref          #127.#139     // org/apache/commons/compress/archivers/zip/StreamCompressor.close:()V\n-   #35 = InterfaceMethodref #151.#152     // org/apache/commons/compress/parallel/ScatterGatherBackingStore.closeForWriting:()V\n-   #36 = InterfaceMethodref #151.#153     // org/apache/commons/compress/parallel/ScatterGatherBackingStore.getInputStream:()Ljava/io/InputStream;\n-   #37 = InterfaceMethodref #147.#154     // java/util/Queue.iterator:()Ljava/util/Iterator;\n-   #38 = InterfaceMethodref #109.#155     // java/util/Iterator.hasNext:()Z\n-   #39 = InterfaceMethodref #109.#156     // java/util/Iterator.next:()Ljava/lang/Object;\n-   #40 = Class              #157          // org/apache/commons/compress/utils/BoundedInputStream\n-   #41 = Fieldref           #24.#158      // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry.compressedSize:J\n-   #42 = Methodref          #40.#159      // org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n-   #43 = Methodref          #24.#160      // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry.transferToArchiveEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #44 = Methodref          #110.#161     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-   #45 = Methodref          #40.#139      // org/apache/commons/compress/utils/BoundedInputStream.close:()V\n-   #46 = Class              #162          // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter\n-   #47 = Methodref          #46.#163      // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;)V\n-   #48 = Class              #164          // java/lang/Object\n-   #49 = Class              #165          // java/io/Closeable\n-   #50 = Utf8               ZipEntryWriter\n-   #51 = Utf8               InnerClasses\n-   #52 = Utf8               CompressedEntry\n-   #53 = Utf8               items\n-   #54 = Utf8               Ljava/util/Queue;\n-   #55 = Utf8               Signature\n-   #56 = Utf8               Ljava/util/Queue<Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry;>;\n-   #57 = Utf8               backingStore\n-   #58 = Utf8               Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n-   #59 = Utf8               streamCompressor\n-   #60 = Utf8               Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #61 = Utf8               isClosed\n-   #62 = Utf8               Ljava/util/concurrent/atomic/AtomicBoolean;\n-   #63 = Utf8               zipEntryWriter\n-   #64 = Utf8               Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n-   #65 = Utf8               fileBased\n-   #66 = Utf8               (Ljava/io/File;)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n-   #67 = Utf8               Code\n-   #68 = Utf8               LineNumberTable\n-   #69 = Utf8               LocalVariableTable\n-   #70 = Utf8               file\n-   #71 = Utf8               Ljava/io/File;\n-   #72 = Utf8               Exceptions\n-   #73 = Class              #166          // java/io/FileNotFoundException\n-   #74 = Utf8               (Ljava/io/File;I)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n-   #75 = Utf8               compressionLevel\n-   #76 = Utf8               I\n-   #77 = Utf8               pathBased\n-   #78 = Utf8               (Ljava/nio/file/Path;)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n-   #79 = Utf8               path\n-   #80 = Utf8               Ljava/nio/file/Path;\n-   #81 = Utf8               (Ljava/nio/file/Path;I)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n-   #82 = Utf8               bs\n-   #83 = Utf8               sc\n-   #84 = Utf8               <init>\n-   #85 = Utf8               (Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;Lorg/apache/commons/compress/archivers/zip/StreamCompressor;)V\n-   #86 = Utf8               this\n-   #87 = Utf8               Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n-   #88 = Utf8               addArchiveEntry\n-   #89 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest;)V\n-   #90 = Utf8               payloadStream\n-   #91 = Utf8               Ljava/io/InputStream;\n-   #92 = Utf8               zipArchiveEntryRequest\n-   #93 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest;\n-   #94 = Utf8               StackMapTable\n-   #95 = Class              #167          // org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest\n-   #96 = Class              #168          // java/io/InputStream\n-   #97 = Class              #169          // java/io/IOException\n-   #98 = Utf8               close\n-   #99 = Utf8               ()V\n-  #100 = Utf8               writeTo\n-  #101 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;)V\n-  #102 = Utf8               rawStream\n-  #103 = Utf8               Lorg/apache/commons/compress/utils/BoundedInputStream;\n-  #104 = Utf8               compressedEntry\n-  #105 = Utf8               Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry;\n-  #106 = Utf8               data\n-  #107 = Utf8               target\n-  #108 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;\n-  #109 = Class              #170          // java/util/Iterator\n-  #110 = Class              #171          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-  #111 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n-  #112 = Utf8               access$000\n-  #113 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;)Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n-  #114 = Utf8               x0\n-  #115 = Utf8               access$100\n-  #116 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;)Ljava/util/Queue;\n-  #117 = Utf8               SourceFile\n-  #118 = Utf8               ScatterZipOutputStream.java\n-  #119 = NameAndType        #53:#54       // items:Ljava/util/Queue;\n-  #120 = NameAndType        #57:#58       // backingStore:Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n-  #121 = Class              #172          // java/io/File\n-  #122 = NameAndType        #173:#174     // toPath:()Ljava/nio/file/Path;\n-  #123 = Utf8               java/util/zip/Deflater\n-  #124 = NameAndType        #77:#81       // pathBased:(Ljava/nio/file/Path;I)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n-  #125 = Utf8               org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore\n-  #126 = NameAndType        #84:#175      // \"<init>\":(Ljava/nio/file/Path;)V\n-  #127 = Class              #176          // org/apache/commons/compress/archivers/zip/StreamCompressor\n-  #128 = NameAndType        #177:#178     // create:(ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-  #129 = Utf8               org/apache/commons/compress/archivers/zip/ScatterZipOutputStream\n-  #130 = NameAndType        #84:#85       // \"<init>\":(Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;Lorg/apache/commons/compress/archivers/zip/StreamCompressor;)V\n-  #131 = NameAndType        #84:#99       // \"<init>\":()V\n-  #132 = Utf8               java/util/concurrent/ConcurrentLinkedQueue\n-  #133 = Utf8               java/util/concurrent/atomic/AtomicBoolean\n-  #134 = NameAndType        #61:#62       // isClosed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-  #135 = NameAndType        #59:#60       // streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-  #136 = NameAndType        #179:#180     // getPayloadStream:()Ljava/io/InputStream;\n-  #137 = NameAndType        #181:#182     // getMethod:()I\n-  #138 = NameAndType        #183:#184     // deflate:(Ljava/io/InputStream;I)V\n-  #139 = NameAndType        #98:#99       // close:()V\n-  #140 = Utf8               java/lang/Throwable\n-  #141 = NameAndType        #185:#186     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #142 = Utf8               org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry\n-  #143 = NameAndType        #187:#188     // getCrc32:()J\n-  #144 = NameAndType        #189:#188     // getBytesWrittenForLastEntry:()J\n-  #145 = NameAndType        #190:#188     // getBytesRead:()J\n-  #146 = NameAndType        #84:#191      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest;JJJ)V\n-  #147 = Class              #192          // java/util/Queue\n-  #148 = NameAndType        #193:#194     // add:(Ljava/lang/Object;)Z\n-  #149 = NameAndType        #195:#196     // compareAndSet:(ZZ)Z\n-  #150 = NameAndType        #63:#64       // zipEntryWriter:Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n-  #151 = Class              #197          // org/apache/commons/compress/parallel/ScatterGatherBackingStore\n-  #152 = NameAndType        #198:#99      // closeForWriting:()V\n-  #153 = NameAndType        #199:#180     // getInputStream:()Ljava/io/InputStream;\n-  #154 = NameAndType        #200:#201     // iterator:()Ljava/util/Iterator;\n-  #155 = NameAndType        #202:#203     // hasNext:()Z\n-  #156 = NameAndType        #204:#205     // next:()Ljava/lang/Object;\n-  #157 = Utf8               org/apache/commons/compress/utils/BoundedInputStream\n-  #158 = NameAndType        #206:#207     // compressedSize:J\n-  #159 = NameAndType        #84:#208      // \"<init>\":(Ljava/io/InputStream;J)V\n-  #160 = NameAndType        #209:#210     // transferToArchiveEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #161 = NameAndType        #211:#212     // addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-  #162 = Utf8               org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter\n-  #163 = NameAndType        #84:#213      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;)V\n-  #164 = Utf8               java/lang/Object\n-  #165 = Utf8               java/io/Closeable\n-  #166 = Utf8               java/io/FileNotFoundException\n-  #167 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest\n-  #168 = Utf8               java/io/InputStream\n-  #169 = Utf8               java/io/IOException\n-  #170 = Utf8               java/util/Iterator\n-  #171 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-  #172 = Utf8               java/io/File\n-  #173 = Utf8               toPath\n-  #174 = Utf8               ()Ljava/nio/file/Path;\n-  #175 = Utf8               (Ljava/nio/file/Path;)V\n-  #176 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor\n-  #177 = Utf8               create\n-  #178 = Utf8               (ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-  #179 = Utf8               getPayloadStream\n-  #180 = Utf8               ()Ljava/io/InputStream;\n-  #181 = Utf8               getMethod\n-  #182 = Utf8               ()I\n-  #183 = Utf8               deflate\n-  #184 = Utf8               (Ljava/io/InputStream;I)V\n-  #185 = Utf8               addSuppressed\n-  #186 = Utf8               (Ljava/lang/Throwable;)V\n-  #187 = Utf8               getCrc32\n-  #188 = Utf8               ()J\n-  #189 = Utf8               getBytesWrittenForLastEntry\n-  #190 = Utf8               getBytesRead\n-  #191 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest;JJJ)V\n-  #192 = Utf8               java/util/Queue\n-  #193 = Utf8               add\n-  #194 = Utf8               (Ljava/lang/Object;)Z\n-  #195 = Utf8               compareAndSet\n-  #196 = Utf8               (ZZ)Z\n-  #197 = Utf8               org/apache/commons/compress/parallel/ScatterGatherBackingStore\n-  #198 = Utf8               closeForWriting\n-  #199 = Utf8               getInputStream\n-  #200 = Utf8               iterator\n-  #201 = Utf8               ()Ljava/util/Iterator;\n-  #202 = Utf8               hasNext\n-  #203 = Utf8               ()Z\n-  #204 = Utf8               next\n-  #205 = Utf8               ()Ljava/lang/Object;\n-  #206 = Utf8               compressedSize\n-  #207 = Utf8               J\n-  #208 = Utf8               (Ljava/io/InputStream;J)V\n-  #209 = Utf8               transferToArchiveEntry\n-  #210 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #211 = Utf8               addRawArchiveEntry\n-  #212 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-  #213 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;)V\n+    #1 = Fieldref           #2.#3         // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.items:Ljava/util/Queue;\n+    #2 = Class              #4            // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream\n+    #3 = NameAndType        #5:#6         // items:Ljava/util/Queue;\n+    #4 = Utf8               org/apache/commons/compress/archivers/zip/ScatterZipOutputStream\n+    #5 = Utf8               items\n+    #6 = Utf8               Ljava/util/Queue;\n+    #7 = Fieldref           #2.#8         // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.backingStore:Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n+    #8 = NameAndType        #9:#10        // backingStore:Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n+    #9 = Utf8               backingStore\n+   #10 = Utf8               Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n+   #11 = Methodref          #12.#13       // java/io/File.toPath:()Ljava/nio/file/Path;\n+   #12 = Class              #14           // java/io/File\n+   #13 = NameAndType        #15:#16       // toPath:()Ljava/nio/file/Path;\n+   #14 = Utf8               java/io/File\n+   #15 = Utf8               toPath\n+   #16 = Utf8               ()Ljava/nio/file/Path;\n+   #17 = Class              #18           // java/util/zip/Deflater\n+   #18 = Utf8               java/util/zip/Deflater\n+   #19 = Methodref          #2.#20        // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.pathBased:(Ljava/nio/file/Path;I)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n+   #20 = NameAndType        #21:#22       // pathBased:(Ljava/nio/file/Path;I)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n+   #21 = Utf8               pathBased\n+   #22 = Utf8               (Ljava/nio/file/Path;I)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n+   #23 = Class              #24           // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore\n+   #24 = Utf8               org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore\n+   #25 = Methodref          #23.#26       // org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.\"<init>\":(Ljava/nio/file/Path;)V\n+   #26 = NameAndType        #27:#28       // \"<init>\":(Ljava/nio/file/Path;)V\n+   #27 = Utf8               <init>\n+   #28 = Utf8               (Ljava/nio/file/Path;)V\n+   #29 = Methodref          #30.#31       // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #30 = Class              #32           // org/apache/commons/compress/archivers/zip/StreamCompressor\n+   #31 = NameAndType        #33:#34       // create:(ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #32 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor\n+   #33 = Utf8               create\n+   #34 = Utf8               (ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #35 = Methodref          #2.#36        // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.\"<init>\":(Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;Lorg/apache/commons/compress/archivers/zip/StreamCompressor;)V\n+   #36 = NameAndType        #27:#37       // \"<init>\":(Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;Lorg/apache/commons/compress/archivers/zip/StreamCompressor;)V\n+   #37 = Utf8               (Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;Lorg/apache/commons/compress/archivers/zip/StreamCompressor;)V\n+   #38 = Methodref          #39.#40       // java/lang/Object.\"<init>\":()V\n+   #39 = Class              #41           // java/lang/Object\n+   #40 = NameAndType        #27:#42       // \"<init>\":()V\n+   #41 = Utf8               java/lang/Object\n+   #42 = Utf8               ()V\n+   #43 = Class              #44           // java/util/concurrent/ConcurrentLinkedQueue\n+   #44 = Utf8               java/util/concurrent/ConcurrentLinkedQueue\n+   #45 = Methodref          #43.#40       // java/util/concurrent/ConcurrentLinkedQueue.\"<init>\":()V\n+   #46 = Class              #47           // java/util/concurrent/atomic/AtomicBoolean\n+   #47 = Utf8               java/util/concurrent/atomic/AtomicBoolean\n+   #48 = Methodref          #46.#40       // java/util/concurrent/atomic/AtomicBoolean.\"<init>\":()V\n+   #49 = Fieldref           #2.#50        // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.isClosed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #50 = NameAndType        #51:#52       // isClosed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #51 = Utf8               isClosed\n+   #52 = Utf8               Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #53 = Fieldref           #2.#54        // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #54 = NameAndType        #55:#56       // streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #55 = Utf8               streamCompressor\n+   #56 = Utf8               Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #57 = Methodref          #58.#59       // org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.getPayloadStream:()Ljava/io/InputStream;\n+   #58 = Class              #60           // org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest\n+   #59 = NameAndType        #61:#62       // getPayloadStream:()Ljava/io/InputStream;\n+   #60 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest\n+   #61 = Utf8               getPayloadStream\n+   #62 = Utf8               ()Ljava/io/InputStream;\n+   #63 = Methodref          #58.#64       // org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.getMethod:()I\n+   #64 = NameAndType        #65:#66       // getMethod:()I\n+   #65 = Utf8               getMethod\n+   #66 = Utf8               ()I\n+   #67 = Methodref          #30.#68       // org/apache/commons/compress/archivers/zip/StreamCompressor.deflate:(Ljava/io/InputStream;I)V\n+   #68 = NameAndType        #69:#70       // deflate:(Ljava/io/InputStream;I)V\n+   #69 = Utf8               deflate\n+   #70 = Utf8               (Ljava/io/InputStream;I)V\n+   #71 = Methodref          #72.#73       // java/io/InputStream.close:()V\n+   #72 = Class              #74           // java/io/InputStream\n+   #73 = NameAndType        #75:#42       // close:()V\n+   #74 = Utf8               java/io/InputStream\n+   #75 = Utf8               close\n+   #76 = Class              #77           // java/lang/Throwable\n+   #77 = Utf8               java/lang/Throwable\n+   #78 = Methodref          #76.#79       // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+   #79 = NameAndType        #80:#81       // addSuppressed:(Ljava/lang/Throwable;)V\n+   #80 = Utf8               addSuppressed\n+   #81 = Utf8               (Ljava/lang/Throwable;)V\n+   #82 = Class              #83           // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry\n+   #83 = Utf8               org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry\n+   #84 = Methodref          #30.#85       // org/apache/commons/compress/archivers/zip/StreamCompressor.getCrc32:()J\n+   #85 = NameAndType        #86:#87       // getCrc32:()J\n+   #86 = Utf8               getCrc32\n+   #87 = Utf8               ()J\n+   #88 = Methodref          #30.#89       // org/apache/commons/compress/archivers/zip/StreamCompressor.getBytesWrittenForLastEntry:()J\n+   #89 = NameAndType        #90:#87       // getBytesWrittenForLastEntry:()J\n+   #90 = Utf8               getBytesWrittenForLastEntry\n+   #91 = Methodref          #30.#92       // org/apache/commons/compress/archivers/zip/StreamCompressor.getBytesRead:()J\n+   #92 = NameAndType        #93:#87       // getBytesRead:()J\n+   #93 = Utf8               getBytesRead\n+   #94 = Methodref          #82.#95       // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest;JJJ)V\n+   #95 = NameAndType        #27:#96       // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest;JJJ)V\n+   #96 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest;JJJ)V\n+   #97 = InterfaceMethodref #98.#99       // java/util/Queue.add:(Ljava/lang/Object;)Z\n+   #98 = Class              #100          // java/util/Queue\n+   #99 = NameAndType        #101:#102     // add:(Ljava/lang/Object;)Z\n+  #100 = Utf8               java/util/Queue\n+  #101 = Utf8               add\n+  #102 = Utf8               (Ljava/lang/Object;)Z\n+  #103 = Methodref          #46.#104      // java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z\n+  #104 = NameAndType        #105:#106     // compareAndSet:(ZZ)Z\n+  #105 = Utf8               compareAndSet\n+  #106 = Utf8               (ZZ)Z\n+  #107 = Fieldref           #2.#108       // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.zipEntryWriter:Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n+  #108 = NameAndType        #109:#110     // zipEntryWriter:Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n+  #109 = Utf8               zipEntryWriter\n+  #110 = Utf8               Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n+  #111 = Methodref          #112.#73      // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter.close:()V\n+  #112 = Class              #113          // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter\n+  #113 = Utf8               org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter\n+  #114 = InterfaceMethodref #115.#73      // org/apache/commons/compress/parallel/ScatterGatherBackingStore.close:()V\n+  #115 = Class              #116          // org/apache/commons/compress/parallel/ScatterGatherBackingStore\n+  #116 = Utf8               org/apache/commons/compress/parallel/ScatterGatherBackingStore\n+  #117 = Methodref          #30.#73       // org/apache/commons/compress/archivers/zip/StreamCompressor.close:()V\n+  #118 = InterfaceMethodref #115.#119     // org/apache/commons/compress/parallel/ScatterGatherBackingStore.closeForWriting:()V\n+  #119 = NameAndType        #120:#42      // closeForWriting:()V\n+  #120 = Utf8               closeForWriting\n+  #121 = InterfaceMethodref #115.#122     // org/apache/commons/compress/parallel/ScatterGatherBackingStore.getInputStream:()Ljava/io/InputStream;\n+  #122 = NameAndType        #123:#62      // getInputStream:()Ljava/io/InputStream;\n+  #123 = Utf8               getInputStream\n+  #124 = InterfaceMethodref #98.#125      // java/util/Queue.iterator:()Ljava/util/Iterator;\n+  #125 = NameAndType        #126:#127     // iterator:()Ljava/util/Iterator;\n+  #126 = Utf8               iterator\n+  #127 = Utf8               ()Ljava/util/Iterator;\n+  #128 = InterfaceMethodref #129.#130     // java/util/Iterator.hasNext:()Z\n+  #129 = Class              #131          // java/util/Iterator\n+  #130 = NameAndType        #132:#133     // hasNext:()Z\n+  #131 = Utf8               java/util/Iterator\n+  #132 = Utf8               hasNext\n+  #133 = Utf8               ()Z\n+  #134 = InterfaceMethodref #129.#135     // java/util/Iterator.next:()Ljava/lang/Object;\n+  #135 = NameAndType        #136:#137     // next:()Ljava/lang/Object;\n+  #136 = Utf8               next\n+  #137 = Utf8               ()Ljava/lang/Object;\n+  #138 = Class              #139          // org/apache/commons/compress/utils/BoundedInputStream\n+  #139 = Utf8               org/apache/commons/compress/utils/BoundedInputStream\n+  #140 = Fieldref           #82.#141      // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry.compressedSize:J\n+  #141 = NameAndType        #142:#143     // compressedSize:J\n+  #142 = Utf8               compressedSize\n+  #143 = Utf8               J\n+  #144 = Methodref          #138.#145     // org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n+  #145 = NameAndType        #27:#146      // \"<init>\":(Ljava/io/InputStream;J)V\n+  #146 = Utf8               (Ljava/io/InputStream;J)V\n+  #147 = Methodref          #82.#148      // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry.transferToArchiveEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #148 = NameAndType        #149:#150     // transferToArchiveEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #149 = Utf8               transferToArchiveEntry\n+  #150 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #151 = Methodref          #152.#153     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+  #152 = Class              #154          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+  #153 = NameAndType        #155:#156     // addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+  #154 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+  #155 = Utf8               addRawArchiveEntry\n+  #156 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+  #157 = Methodref          #138.#73      // org/apache/commons/compress/utils/BoundedInputStream.close:()V\n+  #158 = Methodref          #112.#159     // org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;)V\n+  #159 = NameAndType        #27:#160      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;)V\n+  #160 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;)V\n+  #161 = Class              #162          // java/io/Closeable\n+  #162 = Utf8               java/io/Closeable\n+  #163 = Utf8               Signature\n+  #164 = Utf8               Ljava/util/Queue<Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry;>;\n+  #165 = Utf8               fileBased\n+  #166 = Utf8               (Ljava/io/File;)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n+  #167 = Utf8               Code\n+  #168 = Utf8               LineNumberTable\n+  #169 = Utf8               LocalVariableTable\n+  #170 = Utf8               file\n+  #171 = Utf8               Ljava/io/File;\n+  #172 = Utf8               Exceptions\n+  #173 = Class              #174          // java/io/FileNotFoundException\n+  #174 = Utf8               java/io/FileNotFoundException\n+  #175 = Utf8               (Ljava/io/File;I)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n+  #176 = Utf8               compressionLevel\n+  #177 = Utf8               I\n+  #178 = Utf8               (Ljava/nio/file/Path;)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n+  #179 = Utf8               path\n+  #180 = Utf8               Ljava/nio/file/Path;\n+  #181 = Utf8               bs\n+  #182 = Utf8               sc\n+  #183 = Utf8               this\n+  #184 = Utf8               Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n+  #185 = Utf8               addArchiveEntry\n+  #186 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest;)V\n+  #187 = Utf8               payloadStream\n+  #188 = Utf8               Ljava/io/InputStream;\n+  #189 = Utf8               zipArchiveEntryRequest\n+  #190 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest;\n+  #191 = Utf8               StackMapTable\n+  #192 = Class              #193          // java/io/IOException\n+  #193 = Utf8               java/io/IOException\n+  #194 = Utf8               writeTo\n+  #195 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;)V\n+  #196 = Utf8               rawStream\n+  #197 = Utf8               Lorg/apache/commons/compress/utils/BoundedInputStream;\n+  #198 = Utf8               compressedEntry\n+  #199 = Utf8               Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry;\n+  #200 = Utf8               data\n+  #201 = Utf8               target\n+  #202 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;\n+  #203 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n+  #204 = Utf8               access$000\n+  #205 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;)Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n+  #206 = Utf8               x0\n+  #207 = Utf8               access$100\n+  #208 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;)Ljava/util/Queue;\n+  #209 = Utf8               SourceFile\n+  #210 = Utf8               ScatterZipOutputStream.java\n+  #211 = Utf8               InnerClasses\n+  #212 = Utf8               CompressedEntry\n+  #213 = Utf8               ZipEntryWriter\n {\n   private final java.util.Queue<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry> items;\n     descriptor: Ljava/util/Queue;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #56                          // Ljava/util/Queue<Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry;>;\n+    Signature: #164                         // Ljava/util/Queue<Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry;>;\n \n   private final org.apache.commons.compress.parallel.ScatterGatherBackingStore backingStore;\n     descriptor: Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n@@ -245,17 +245,17 @@\n \n   public static org.apache.commons.compress.archivers.zip.ScatterZipOutputStream fileBased(java.io.File) throws java.io.FileNotFoundException;\n     descriptor: (Ljava/io/File;)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #3                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         1: invokevirtual #11                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n          4: iconst_m1\n-         5: invokestatic  #5                  // Method pathBased:(Ljava/nio/file/Path;I)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n+         5: invokestatic  #19                 // Method pathBased:(Ljava/nio/file/Path;I)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n          8: areturn\n       LineNumberTable:\n         line 116: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  file   Ljava/io/File;\n     Exceptions:\n@@ -263,17 +263,17 @@\n \n   public static org.apache.commons.compress.archivers.zip.ScatterZipOutputStream fileBased(java.io.File, int) throws java.io.FileNotFoundException;\n     descriptor: (Ljava/io/File;I)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: invokevirtual #3                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         1: invokevirtual #11                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n          4: iload_1\n-         5: invokestatic  #5                  // Method pathBased:(Ljava/nio/file/Path;I)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n+         5: invokestatic  #19                 // Method pathBased:(Ljava/nio/file/Path;I)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n          8: areturn\n       LineNumberTable:\n         line 128: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  file   Ljava/io/File;\n             0       9     1 compressionLevel   I\n@@ -283,43 +283,43 @@\n   public static org.apache.commons.compress.archivers.zip.ScatterZipOutputStream pathBased(java.nio.file.Path) throws java.io.FileNotFoundException;\n     descriptor: (Ljava/nio/file/Path;)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_m1\n-         2: invokestatic  #5                  // Method pathBased:(Ljava/nio/file/Path;I)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n+         2: invokestatic  #19                 // Method pathBased:(Ljava/nio/file/Path;I)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n          5: areturn\n       LineNumberTable:\n         line 139: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  path   Ljava/nio/file/Path;\n     Exceptions:\n       throws java.io.FileNotFoundException\n \n   public static org.apache.commons.compress.archivers.zip.ScatterZipOutputStream pathBased(java.nio.file.Path, int) throws java.io.FileNotFoundException;\n     descriptor: (Ljava/nio/file/Path;I)Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=4, args_size=2\n-         0: new           #6                  // class org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore\n+         0: new           #23                 // class org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore\n          3: dup\n          4: aload_0\n-         5: invokespecial #7                  // Method org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.\"<init>\":(Ljava/nio/file/Path;)V\n+         5: invokespecial #25                 // Method org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.\"<init>\":(Ljava/nio/file/Path;)V\n          8: astore_2\n          9: iload_1\n         10: aload_2\n-        11: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/StreamCompressor.create:(ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+        11: invokestatic  #29                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor.create:(ILorg/apache/commons/compress/parallel/ScatterGatherBackingStore;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n         14: astore_3\n-        15: new           #9                  // class org/apache/commons/compress/archivers/zip/ScatterZipOutputStream\n+        15: new           #2                  // class org/apache/commons/compress/archivers/zip/ScatterZipOutputStream\n         18: dup\n         19: aload_2\n         20: aload_3\n-        21: invokespecial #10                 // Method \"<init>\":(Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;Lorg/apache/commons/compress/archivers/zip/StreamCompressor;)V\n+        21: invokespecial #35                 // Method \"<init>\":(Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;Lorg/apache/commons/compress/archivers/zip/StreamCompressor;)V\n         24: areturn\n       LineNumberTable:\n         line 151: 0\n         line 153: 9\n         line 154: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -332,31 +332,31 @@\n \n   public org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(org.apache.commons.compress.parallel.ScatterGatherBackingStore, org.apache.commons.compress.archivers.zip.StreamCompressor);\n     descriptor: (Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;Lorg/apache/commons/compress/archivers/zip/StreamCompressor;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #11                 // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #38                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n-         5: new           #12                 // class java/util/concurrent/ConcurrentLinkedQueue\n+         5: new           #43                 // class java/util/concurrent/ConcurrentLinkedQueue\n          8: dup\n-         9: invokespecial #13                 // Method java/util/concurrent/ConcurrentLinkedQueue.\"<init>\":()V\n+         9: invokespecial #45                 // Method java/util/concurrent/ConcurrentLinkedQueue.\"<init>\":()V\n         12: putfield      #1                  // Field items:Ljava/util/Queue;\n         15: aload_0\n-        16: new           #14                 // class java/util/concurrent/atomic/AtomicBoolean\n+        16: new           #46                 // class java/util/concurrent/atomic/AtomicBoolean\n         19: dup\n-        20: invokespecial #15                 // Method java/util/concurrent/atomic/AtomicBoolean.\"<init>\":()V\n-        23: putfield      #16                 // Field isClosed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+        20: invokespecial #48                 // Method java/util/concurrent/atomic/AtomicBoolean.\"<init>\":()V\n+        23: putfield      #49                 // Field isClosed:Ljava/util/concurrent/atomic/AtomicBoolean;\n         26: aload_0\n         27: aload_1\n-        28: putfield      #2                  // Field backingStore:Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n+        28: putfield      #7                  // Field backingStore:Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n         31: aload_0\n         32: aload_2\n-        33: putfield      #17                 // Field streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+        33: putfield      #53                 // Field streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n         36: return\n       LineNumberTable:\n         line 168: 0\n         line 157: 4\n         line 163: 15\n         line 169: 26\n         line 170: 31\n@@ -369,55 +369,55 @@\n \n   public void addArchiveEntry(org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=10, locals=5, args_size=2\n          0: aload_1\n-         1: invokevirtual #18                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.getPayloadStream:()Ljava/io/InputStream;\n+         1: invokevirtual #57                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.getPayloadStream:()Ljava/io/InputStream;\n          4: astore_2\n          5: aload_0\n-         6: getfield      #17                 // Field streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+         6: getfield      #53                 // Field streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n          9: aload_2\n         10: aload_1\n-        11: invokevirtual #19                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.getMethod:()I\n-        14: invokevirtual #20                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor.deflate:(Ljava/io/InputStream;I)V\n+        11: invokevirtual #63                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.getMethod:()I\n+        14: invokevirtual #67                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor.deflate:(Ljava/io/InputStream;I)V\n         17: aload_2\n         18: ifnull        50\n         21: aload_2\n-        22: invokevirtual #21                 // Method java/io/InputStream.close:()V\n+        22: invokevirtual #71                 // Method java/io/InputStream.close:()V\n         25: goto          50\n         28: astore_3\n         29: aload_2\n         30: ifnull        48\n         33: aload_2\n-        34: invokevirtual #21                 // Method java/io/InputStream.close:()V\n+        34: invokevirtual #71                 // Method java/io/InputStream.close:()V\n         37: goto          48\n         40: astore        4\n         42: aload_3\n         43: aload         4\n-        45: invokevirtual #23                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        45: invokevirtual #78                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n         48: aload_3\n         49: athrow\n         50: aload_0\n         51: getfield      #1                  // Field items:Ljava/util/Queue;\n-        54: new           #24                 // class org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry\n+        54: new           #82                 // class org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry\n         57: dup\n         58: aload_1\n         59: aload_0\n-        60: getfield      #17                 // Field streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-        63: invokevirtual #25                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor.getCrc32:()J\n+        60: getfield      #53                 // Field streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+        63: invokevirtual #84                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor.getCrc32:()J\n         66: aload_0\n-        67: getfield      #17                 // Field streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-        70: invokevirtual #26                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor.getBytesWrittenForLastEntry:()J\n+        67: getfield      #53                 // Field streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+        70: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor.getBytesWrittenForLastEntry:()J\n         73: aload_0\n-        74: getfield      #17                 // Field streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-        77: invokevirtual #27                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor.getBytesRead:()J\n-        80: invokespecial #28                 // Method org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest;JJJ)V\n-        83: invokeinterface #29,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z\n+        74: getfield      #53                 // Field streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+        77: invokevirtual #91                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor.getBytesRead:()J\n+        80: invokespecial #94                 // Method org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest;JJJ)V\n+        83: invokeinterface #97,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z\n         88: pop\n         89: return\n       Exception table:\n          from    to  target type\n              5    17    28   Class java/lang/Throwable\n             33    37    40   Class java/lang/Throwable\n       LineNumberTable:\n@@ -451,37 +451,37 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #16                 // Field isClosed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+         1: getfield      #49                 // Field isClosed:Ljava/util/concurrent/atomic/AtomicBoolean;\n          4: iconst_0\n          5: iconst_1\n-         6: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z\n+         6: invokevirtual #103                // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z\n          9: ifne          13\n         12: return\n         13: aload_0\n-        14: getfield      #31                 // Field zipEntryWriter:Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n+        14: getfield      #107                // Field zipEntryWriter:Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n         17: ifnull        27\n         20: aload_0\n-        21: getfield      #31                 // Field zipEntryWriter:Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n-        24: invokevirtual #32                 // Method org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter.close:()V\n+        21: getfield      #107                // Field zipEntryWriter:Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n+        24: invokevirtual #111                // Method org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter.close:()V\n         27: aload_0\n-        28: getfield      #2                  // Field backingStore:Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n-        31: invokeinterface #33,  1           // InterfaceMethod org/apache/commons/compress/parallel/ScatterGatherBackingStore.close:()V\n+        28: getfield      #7                  // Field backingStore:Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n+        31: invokeinterface #114,  1          // InterfaceMethod org/apache/commons/compress/parallel/ScatterGatherBackingStore.close:()V\n         36: aload_0\n-        37: getfield      #17                 // Field streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-        40: invokevirtual #34                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor.close:()V\n+        37: getfield      #53                 // Field streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+        40: invokevirtual #117                // Method org/apache/commons/compress/archivers/zip/StreamCompressor.close:()V\n         43: goto          56\n         46: astore_1\n         47: aload_0\n-        48: getfield      #17                 // Field streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-        51: invokevirtual #34                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor.close:()V\n+        48: getfield      #53                 // Field streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+        51: invokevirtual #117                // Method org/apache/commons/compress/archivers/zip/StreamCompressor.close:()V\n         54: aload_1\n         55: athrow\n         56: return\n       Exception table:\n          from    to  target type\n             13    36    46   any\n       LineNumberTable:\n@@ -509,72 +509,72 @@\n \n   public void writeTo(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=8, args_size=2\n          0: aload_0\n-         1: getfield      #2                  // Field backingStore:Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n-         4: invokeinterface #35,  1           // InterfaceMethod org/apache/commons/compress/parallel/ScatterGatherBackingStore.closeForWriting:()V\n+         1: getfield      #7                  // Field backingStore:Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n+         4: invokeinterface #118,  1          // InterfaceMethod org/apache/commons/compress/parallel/ScatterGatherBackingStore.closeForWriting:()V\n          9: aload_0\n-        10: getfield      #2                  // Field backingStore:Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n-        13: invokeinterface #36,  1           // InterfaceMethod org/apache/commons/compress/parallel/ScatterGatherBackingStore.getInputStream:()Ljava/io/InputStream;\n+        10: getfield      #7                  // Field backingStore:Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n+        13: invokeinterface #121,  1          // InterfaceMethod org/apache/commons/compress/parallel/ScatterGatherBackingStore.getInputStream:()Ljava/io/InputStream;\n         18: astore_2\n         19: aload_0\n         20: getfield      #1                  // Field items:Ljava/util/Queue;\n-        23: invokeinterface #37,  1           // InterfaceMethod java/util/Queue.iterator:()Ljava/util/Iterator;\n+        23: invokeinterface #124,  1          // InterfaceMethod java/util/Queue.iterator:()Ljava/util/Iterator;\n         28: astore_3\n         29: aload_3\n-        30: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n+        30: invokeinterface #128,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n         35: ifeq          108\n         38: aload_3\n-        39: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n-        44: checkcast     #24                 // class org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry\n+        39: invokeinterface #134,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        44: checkcast     #82                 // class org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry\n         47: astore        4\n-        49: new           #40                 // class org/apache/commons/compress/utils/BoundedInputStream\n+        49: new           #138                // class org/apache/commons/compress/utils/BoundedInputStream\n         52: dup\n         53: aload_2\n         54: aload         4\n-        56: getfield      #41                 // Field org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry.compressedSize:J\n-        59: invokespecial #42                 // Method org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n+        56: getfield      #140                // Field org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry.compressedSize:J\n+        59: invokespecial #144                // Method org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n         62: astore        5\n         64: aload_1\n         65: aload         4\n-        67: invokevirtual #43                 // Method org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry.transferToArchiveEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        67: invokevirtual #147                // Method org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry.transferToArchiveEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n         70: aload         5\n-        72: invokevirtual #44                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+        72: invokevirtual #151                // Method org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n         75: aload         5\n-        77: invokevirtual #45                 // Method org/apache/commons/compress/utils/BoundedInputStream.close:()V\n+        77: invokevirtual #157                // Method org/apache/commons/compress/utils/BoundedInputStream.close:()V\n         80: goto          105\n         83: astore        6\n         85: aload         5\n-        87: invokevirtual #45                 // Method org/apache/commons/compress/utils/BoundedInputStream.close:()V\n+        87: invokevirtual #157                // Method org/apache/commons/compress/utils/BoundedInputStream.close:()V\n         90: goto          102\n         93: astore        7\n         95: aload         6\n         97: aload         7\n-        99: invokevirtual #23                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        99: invokevirtual #78                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n        102: aload         6\n        104: athrow\n        105: goto          29\n        108: aload_2\n        109: ifnull        141\n        112: aload_2\n-       113: invokevirtual #21                 // Method java/io/InputStream.close:()V\n+       113: invokevirtual #71                 // Method java/io/InputStream.close:()V\n        116: goto          141\n        119: astore_3\n        120: aload_2\n        121: ifnull        139\n        124: aload_2\n-       125: invokevirtual #21                 // Method java/io/InputStream.close:()V\n+       125: invokevirtual #71                 // Method java/io/InputStream.close:()V\n        128: goto          139\n        131: astore        4\n        133: aload_3\n        134: aload         4\n-       136: invokevirtual #23                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+       136: invokevirtual #78                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n        139: aload_3\n        140: athrow\n        141: return\n       Exception table:\n          from    to  target type\n             64    75    83   Class java/lang/Throwable\n             85    90    93   Class java/lang/Throwable\n@@ -630,24 +630,24 @@\n \n   public org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter zipEntryWriter() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #31                 // Field zipEntryWriter:Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n+         1: getfield      #107                // Field zipEntryWriter:Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n          4: ifnonnull     19\n          7: aload_0\n-         8: new           #46                 // class org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter\n+         8: new           #112                // class org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter\n         11: dup\n         12: aload_0\n-        13: invokespecial #47                 // Method org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;)V\n-        16: putfield      #31                 // Field zipEntryWriter:Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n+        13: invokespecial #158                // Method org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;)V\n+        16: putfield      #107                // Field zipEntryWriter:Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n         19: aload_0\n-        20: getfield      #31                 // Field zipEntryWriter:Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n+        20: getfield      #107                // Field zipEntryWriter:Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter;\n         23: areturn\n       LineNumberTable:\n         line 231: 0\n         line 232: 7\n         line 234: 19\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -659,15 +659,15 @@\n \n   static org.apache.commons.compress.parallel.ScatterGatherBackingStore access$000(org.apache.commons.compress.archivers.zip.ScatterZipOutputStream);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;)Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n     flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #2                  // Field backingStore:Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n+         1: getfield      #7                  // Field backingStore:Lorg/apache/commons/compress/parallel/ScatterGatherBackingStore;\n          4: areturn\n       LineNumberTable:\n         line 52: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0    x0   Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n \n@@ -683,9 +683,9 @@\n         line 52: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0    x0   Lorg/apache/commons/compress/archivers/zip/ScatterZipOutputStream;\n }\n SourceFile: \"ScatterZipOutputStream.java\"\n InnerClasses:\n-  public static #50= #46 of #9;           // ZipEntryWriter=class org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter of class org/apache/commons/compress/archivers/zip/ScatterZipOutputStream\n-  private static #52= #24 of #9;          // CompressedEntry=class org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry of class org/apache/commons/compress/archivers/zip/ScatterZipOutputStream\n+  private static #212= #82 of #2;         // CompressedEntry=class org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry of class org/apache/commons/compress/archivers/zip/ScatterZipOutputStream\n+  public static #213= #112 of #2;         // ZipEntryWriter=class org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter of class org/apache/commons/compress/archivers/zip/ScatterZipOutputStream\n"}]}
