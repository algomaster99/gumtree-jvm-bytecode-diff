{"diffoscope-json-version": 1, "source1": "first/MultiFileConfigurationBuilder.class", "source2": "second/MultiFileConfigurationBuilder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,15 +2,14 @@\n package org.apache.commons.configuration2.builder.combined;\n \n import org.apache.commons.configuration2.ImmutableConfiguration;\n import org.apache.commons.configuration2.ConfigurationUtils;\n import java.util.HashMap;\n import org.apache.commons.configuration2.builder.ConfigurationBuilder;\n import org.apache.commons.configuration2.builder.ConfigurationBuilderResultCreatedEvent;\n-import org.apache.commons.configuration2.interpol.InterpolatorSpecification;\n import org.apache.commons.configuration2.builder.BasicBuilderParameters;\n import java.util.Iterator;\n import org.apache.commons.configuration2.event.Event;\n import org.apache.commons.configuration2.event.EventType;\n import org.apache.commons.lang3.concurrent.ConcurrentUtils;\n import org.apache.commons.configuration2.ex.ConfigurationException;\n import org.apache.commons.configuration2.builder.BuilderParameters;\n@@ -31,189 +30,188 @@\n     private static final String KEY_INTERPOLATOR = \"interpolator\";\n     private final ConcurrentMap<String, FileBasedConfigurationBuilder<T>> managedBuilders;\n     private final AtomicReference<ConfigurationInterpolator> interpolator;\n     private final ThreadLocal<Boolean> inInterpolation;\n     private final EventListenerList configurationListeners;\n     private final EventListener<ConfigurationBuilderEvent> managedBuilderDelegationListener;\n     \n-    public MultiFileConfigurationBuilder(final Class<? extends T> resCls, final Map<String, Object> params, final boolean allowFailOnInit) {\n-        super((Class)resCls, (Map)params, allowFailOnInit);\n+    public MultiFileConfigurationBuilder(final Class<? extends T> clazz, final Map<String, Object> map, final boolean b) {\n+        super((Class)clazz, (Map)map, b);\n         this.managedBuilders = new ConcurrentHashMap<String, FileBasedConfigurationBuilder<T>>();\n         this.interpolator = new AtomicReference<ConfigurationInterpolator>();\n         this.inInterpolation = new ThreadLocal<Boolean>();\n         this.configurationListeners = new EventListenerList();\n         this.managedBuilderDelegationListener = (EventListener<ConfigurationBuilderEvent>)this::handleManagedBuilderEvent;\n     }\n     \n-    public MultiFileConfigurationBuilder(final Class<? extends T> resCls, final Map<String, Object> params) {\n-        super((Class)resCls, (Map)params);\n+    public MultiFileConfigurationBuilder(final Class<? extends T> clazz, final Map<String, Object> map) {\n+        super((Class)clazz, (Map)map);\n         this.managedBuilders = new ConcurrentHashMap<String, FileBasedConfigurationBuilder<T>>();\n         this.interpolator = new AtomicReference<ConfigurationInterpolator>();\n         this.inInterpolation = new ThreadLocal<Boolean>();\n         this.configurationListeners = new EventListenerList();\n         this.managedBuilderDelegationListener = (EventListener<ConfigurationBuilderEvent>)this::handleManagedBuilderEvent;\n     }\n     \n-    public MultiFileConfigurationBuilder(final Class<? extends T> resCls) {\n-        super((Class)resCls);\n+    public MultiFileConfigurationBuilder(final Class<? extends T> clazz) {\n+        super((Class)clazz);\n         this.managedBuilders = new ConcurrentHashMap<String, FileBasedConfigurationBuilder<T>>();\n         this.interpolator = new AtomicReference<ConfigurationInterpolator>();\n         this.inInterpolation = new ThreadLocal<Boolean>();\n         this.configurationListeners = new EventListenerList();\n         this.managedBuilderDelegationListener = (EventListener<ConfigurationBuilderEvent>)this::handleManagedBuilderEvent;\n     }\n     \n-    public MultiFileConfigurationBuilder<T> configure(final BuilderParameters... params) {\n-        super.configure(params);\n+    public MultiFileConfigurationBuilder<T> configure(final BuilderParameters... array) {\n+        super.configure(array);\n         return this;\n     }\n     \n     public T getConfiguration() throws ConfigurationException {\n         return (T)this.getManagedBuilder().getConfiguration();\n     }\n     \n     public FileBasedConfigurationBuilder<T> getManagedBuilder() throws ConfigurationException {\n-        final Map<String, Object> params = this.getParameters();\n-        final MultiFileBuilderParametersImpl multiParams = MultiFileBuilderParametersImpl.fromParameters((Map)params, true);\n-        if (multiParams.getFilePattern() == null) {\n+        final Map parameters = this.getParameters();\n+        final MultiFileBuilderParametersImpl fromParameters = MultiFileBuilderParametersImpl.fromParameters(parameters, true);\n+        if (fromParameters.getFilePattern() == null) {\n             throw new ConfigurationException(\"No file name pattern is set!\");\n         }\n-        final String fileName = this.fetchFileName(multiParams);\n-        FileBasedConfigurationBuilder<T> builder = (FileBasedConfigurationBuilder<T>)this.getManagedBuilders().get(fileName);\n-        if (builder == null) {\n-            builder = this.createInitializedManagedBuilder(fileName, createManagedBuilderParameters(params, multiParams));\n-            final FileBasedConfigurationBuilder<T> newBuilder = (FileBasedConfigurationBuilder<T>)ConcurrentUtils.putIfAbsent((ConcurrentMap)this.getManagedBuilders(), (Object)fileName, (Object)builder);\n-            if (newBuilder == builder) {\n-                this.initListeners(newBuilder);\n+        final String fetchFileName = this.fetchFileName(fromParameters);\n+        FileBasedConfigurationBuilder initializedManagedBuilder = (FileBasedConfigurationBuilder)this.getManagedBuilders().get(fetchFileName);\n+        if (initializedManagedBuilder == null) {\n+            initializedManagedBuilder = this.createInitializedManagedBuilder(fetchFileName, createManagedBuilderParameters((Map<String, Object>)parameters, fromParameters));\n+            final FileBasedConfigurationBuilder fileBasedConfigurationBuilder = (FileBasedConfigurationBuilder)ConcurrentUtils.putIfAbsent((ConcurrentMap)this.getManagedBuilders(), (Object)fetchFileName, (Object)initializedManagedBuilder);\n+            if (fileBasedConfigurationBuilder == initializedManagedBuilder) {\n+                this.initListeners((org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder<T>)fileBasedConfigurationBuilder);\n             }\n             else {\n-                builder = newBuilder;\n+                initializedManagedBuilder = fileBasedConfigurationBuilder;\n             }\n         }\n-        return builder;\n+        return (FileBasedConfigurationBuilder<T>)initializedManagedBuilder;\n     }\n     \n-    public synchronized <E extends Event> void addEventListener(final EventType<E> eventType, final EventListener<? super E> l) {\n-        super.addEventListener((EventType)eventType, (EventListener)l);\n+    public synchronized <E extends Event> void addEventListener(final EventType<E> eventType, final EventListener<? super E> eventListener) {\n+        super.addEventListener((EventType)eventType, (EventListener)eventListener);\n         if (isEventTypeForManagedBuilders(eventType)) {\n-            for (final FileBasedConfigurationBuilder<T> b : this.getManagedBuilders().values()) {\n-                b.addEventListener((EventType)eventType, (EventListener)l);\n+            final Iterator<Object> iterator = (Iterator<Object>)this.getManagedBuilders().values().iterator();\n+            while (iterator.hasNext()) {\n+                ((FileBasedConfigurationBuilder)iterator.next()).addEventListener((EventType)eventType, (EventListener)eventListener);\n             }\n-            this.configurationListeners.addEventListener((EventType)eventType, (EventListener)l);\n+            this.configurationListeners.addEventListener((EventType)eventType, (EventListener)eventListener);\n         }\n     }\n     \n-    public synchronized <E extends Event> boolean removeEventListener(final EventType<E> eventType, final EventListener<? super E> l) {\n-        final boolean result = super.removeEventListener((EventType)eventType, (EventListener)l);\n+    public synchronized <E extends Event> boolean removeEventListener(final EventType<E> eventType, final EventListener<? super E> eventListener) {\n+        final boolean removeEventListener = super.removeEventListener((EventType)eventType, (EventListener)eventListener);\n         if (isEventTypeForManagedBuilders(eventType)) {\n-            for (final FileBasedConfigurationBuilder<T> b : this.getManagedBuilders().values()) {\n-                b.removeEventListener((EventType)eventType, (EventListener)l);\n+            final Iterator<FileBasedConfigurationBuilder> iterator = this.getManagedBuilders().values().iterator();\n+            while (iterator.hasNext()) {\n+                ((FileBasedConfigurationBuilder)iterator.next()).removeEventListener((EventType)eventType, (EventListener)eventListener);\n             }\n-            this.configurationListeners.removeEventListener((EventType)eventType, (EventListener)l);\n+            this.configurationListeners.removeEventListener((EventType)eventType, (EventListener)eventListener);\n         }\n-        return result;\n+        return removeEventListener;\n     }\n     \n     public synchronized void resetParameters() {\n-        for (final FileBasedConfigurationBuilder<T> b : this.getManagedBuilders().values()) {\n-            b.removeEventListener(ConfigurationBuilderEvent.ANY, (EventListener)this.managedBuilderDelegationListener);\n+        final Iterator<Object> iterator = (Iterator<Object>)this.getManagedBuilders().values().iterator();\n+        while (iterator.hasNext()) {\n+            ((FileBasedConfigurationBuilder)iterator.next()).removeEventListener(ConfigurationBuilderEvent.ANY, (EventListener)this.managedBuilderDelegationListener);\n         }\n         this.getManagedBuilders().clear();\n         this.interpolator.set(null);\n         super.resetParameters();\n     }\n     \n     protected ConfigurationInterpolator getInterpolator() {\n-        boolean done;\n-        ConfigurationInterpolator result;\n+        boolean compareAndSet;\n+        ConfigurationInterpolator interpolator;\n         do {\n-            result = this.interpolator.get();\n-            if (result != null) {\n-                done = true;\n+            interpolator = this.interpolator.get();\n+            if (interpolator != null) {\n+                compareAndSet = true;\n             }\n             else {\n-                result = this.createInterpolator();\n-                done = this.interpolator.compareAndSet(null, result);\n+                interpolator = this.createInterpolator();\n+                compareAndSet = this.interpolator.compareAndSet(null, interpolator);\n             }\n-        } while (!done);\n-        return result;\n+        } while (!compareAndSet);\n+        return interpolator;\n     }\n     \n     protected ConfigurationInterpolator createInterpolator() {\n-        final InterpolatorSpecification spec = BasicBuilderParameters.fetchInterpolatorSpecification(this.getParameters());\n-        return ConfigurationInterpolator.fromSpecification(spec);\n+        return ConfigurationInterpolator.fromSpecification(BasicBuilderParameters.fetchInterpolatorSpecification(this.getParameters()));\n     }\n     \n-    protected String constructFileName(final MultiFileBuilderParametersImpl multiParams) {\n-        final ConfigurationInterpolator ci = this.getInterpolator();\n-        return String.valueOf(ci.interpolate((Object)multiParams.getFilePattern()));\n+    protected String constructFileName(final MultiFileBuilderParametersImpl multiFileBuilderParametersImpl) {\n+        return String.valueOf(this.getInterpolator().interpolate((Object)multiFileBuilderParametersImpl.getFilePattern()));\n     }\n     \n-    protected FileBasedConfigurationBuilder<T> createManagedBuilder(final String fileName, final Map<String, Object> params) throws ConfigurationException {\n-        return (FileBasedConfigurationBuilder<T>)new FileBasedConfigurationBuilder(this.getResultClass(), (Map)params, this.isAllowFailOnInit());\n+    protected FileBasedConfigurationBuilder<T> createManagedBuilder(final String s, final Map<String, Object> map) throws ConfigurationException {\n+        return (FileBasedConfigurationBuilder<T>)new FileBasedConfigurationBuilder(this.getResultClass(), (Map)map, this.isAllowFailOnInit());\n     }\n     \n-    protected FileBasedConfigurationBuilder<T> createInitializedManagedBuilder(final String fileName, final Map<String, Object> params) throws ConfigurationException {\n-        final FileBasedConfigurationBuilder<T> managedBuilder = this.createManagedBuilder(fileName, params);\n+    protected FileBasedConfigurationBuilder<T> createInitializedManagedBuilder(final String fileName, final Map<String, Object> map) throws ConfigurationException {\n+        final org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder<T> managedBuilder = this.createManagedBuilder(fileName, map);\n         managedBuilder.getFileHandler().setFileName(fileName);\n         return managedBuilder;\n     }\n     \n     protected ConcurrentMap<String, FileBasedConfigurationBuilder<T>> getManagedBuilders() {\n         return this.managedBuilders;\n     }\n     \n-    private void initListeners(final FileBasedConfigurationBuilder<T> newBuilder) {\n-        this.copyEventListeners((BasicConfigurationBuilder)newBuilder, this.configurationListeners);\n-        newBuilder.addEventListener(ConfigurationBuilderEvent.ANY, (EventListener)this.managedBuilderDelegationListener);\n+    private void initListeners(final FileBasedConfigurationBuilder<T> fileBasedConfigurationBuilder) {\n+        this.copyEventListeners((BasicConfigurationBuilder)fileBasedConfigurationBuilder, this.configurationListeners);\n+        fileBasedConfigurationBuilder.addEventListener(ConfigurationBuilderEvent.ANY, (EventListener)this.managedBuilderDelegationListener);\n     }\n     \n-    private String fetchFileName(final MultiFileBuilderParametersImpl multiParams) {\n-        final Boolean reentrant = Boolean.valueOf(this.inInterpolation.get());\n-        String fileName;\n-        if (reentrant != null && reentrant) {\n-            fileName = multiParams.getFilePattern();\n+    private String fetchFileName(final MultiFileBuilderParametersImpl multiFileBuilderParametersImpl) {\n+        final Boolean b = Boolean.valueOf(this.inInterpolation.get());\n+        String s;\n+        if (b != null && b) {\n+            s = multiFileBuilderParametersImpl.getFilePattern();\n         }\n         else {\n             this.inInterpolation.set(Boolean.TRUE);\n             try {\n-                fileName = this.constructFileName(multiParams);\n+                s = this.constructFileName(multiFileBuilderParametersImpl);\n             }\n             finally {\n                 this.inInterpolation.set(Boolean.FALSE);\n             }\n         }\n-        return fileName;\n+        return s;\n     }\n     \n-    private void handleManagedBuilderEvent(final ConfigurationBuilderEvent event) {\n-        if (ConfigurationBuilderEvent.RESET.equals(event.getEventType())) {\n+    private void handleManagedBuilderEvent(final ConfigurationBuilderEvent configurationBuilderEvent) {\n+        if (ConfigurationBuilderEvent.RESET.equals(configurationBuilderEvent.getEventType())) {\n             this.resetResult();\n         }\n         else {\n-            this.fireBuilderEvent(this.createEventWithChangedSource(event));\n+            this.fireBuilderEvent(this.createEventWithChangedSource(configurationBuilderEvent));\n         }\n     }\n     \n-    private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent event) {\n-        if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {\n-            return (ConfigurationBuilderEvent)new ConfigurationBuilderResultCreatedEvent((ConfigurationBuilder)this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent)event).getConfiguration());\n+    private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent configurationBuilderEvent) {\n+        if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(configurationBuilderEvent.getEventType())) {\n+            return (ConfigurationBuilderEvent)new ConfigurationBuilderResultCreatedEvent((ConfigurationBuilder)this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent)configurationBuilderEvent).getConfiguration());\n         }\n-        final EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>)event.getEventType();\n-        return new ConfigurationBuilderEvent((ConfigurationBuilder)this, (EventType)type);\n+        return new ConfigurationBuilderEvent((ConfigurationBuilder)this, configurationBuilderEvent.getEventType());\n     }\n     \n-    private static Map<String, Object> createManagedBuilderParameters(final Map<String, Object> params, final MultiFileBuilderParametersImpl multiParams) {\n-        final Map<String, Object> newParams = new HashMap<String, Object>(params);\n-        newParams.remove(\"interpolator\");\n-        final BuilderParameters managedBuilderParameters = multiParams.getManagedBuilderParameters();\n+    private static Map<String, Object> createManagedBuilderParameters(final Map<String, Object> m, final MultiFileBuilderParametersImpl multiFileBuilderParametersImpl) {\n+        final HashMap hashMap = new HashMap((Map<? extends K, ? extends V>)m);\n+        hashMap.remove(\"interpolator\");\n+        final BuilderParameters managedBuilderParameters = multiFileBuilderParametersImpl.getManagedBuilderParameters();\n         if (managedBuilderParameters != null) {\n-            final BuilderParameters copy = (BuilderParameters)ConfigurationUtils.cloneIfPossible((Object)managedBuilderParameters);\n-            newParams.putAll(copy.getParameters());\n+            hashMap.putAll(((BuilderParameters)ConfigurationUtils.cloneIfPossible((Object)managedBuilderParameters)).getParameters());\n         }\n-        return newParams;\n+        return hashMap;\n     }\n     \n     private static boolean isEventTypeForManagedBuilders(final EventType<?> eventType) {\n         return !EventType.isInstanceOf((EventType)eventType, ConfigurationBuilderEvent.ANY);\n     }\n }\n"}]}
