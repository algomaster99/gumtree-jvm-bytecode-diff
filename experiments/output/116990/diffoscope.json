{"diffoscope-json-version": 1, "source1": "first/AnnotationUtil.class", "source2": "second/AnnotationUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,14 +9,18 @@\n public final class AnnotationUtil\n {\n     private static final String THE_AST_IS_NULL = \"the ast is null\";\n     private static final String OVERRIDE = \"Override\";\n     private static final String FQ_OVERRIDE = \"java.lang.Override\";\n     private static final Set<String> OVERRIDE_ANNOTATIONS;\n     \n+    static {\n+        OVERRIDE_ANNOTATIONS = Set.of(\"Override\", \"java.lang.Override\");\n+    }\n+    \n     private AnnotationUtil() {\n         throw new UnsupportedOperationException(\"do not instantiate.\");\n     }\n     \n     public static boolean containsAnnotation(final DetailAST ast, final String annotation) {\n         return getAnnotation(ast, annotation) != null;\n     }\n@@ -36,15 +40,15 @@\n         if (annotations == null) {\n             throw new IllegalArgumentException(\"annotations cannot be null\");\n         }\n         boolean result = false;\n         if (!annotations.isEmpty()) {\n             final DetailAST firstMatchingAnnotation = findFirstAnnotation(ast, annotationNode -> {\n                 final String annotationFullIdent = getAnnotationFullIdent(annotationNode);\n-                return annotations.contains(annotationFullIdent);\n+                return set.contains(annotationFullIdent);\n             });\n             result = (firstMatchingAnnotation != null);\n         }\n         return result;\n     }\n     \n     private static String getAnnotationFullIdent(final DetailAST annotationNode) {\n@@ -87,27 +91,23 @@\n         }\n         if (CommonUtil.isBlank(annotation)) {\n             throw new IllegalArgumentException(\"the annotation is empty or spaces\");\n         }\n         return findFirstAnnotation(ast, annotationNode -> {\n             final DetailAST firstChild = annotationNode.findFirstToken(170);\n             final String name = FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n-            return annotation.equals(name);\n+            return s.equals(name);\n         });\n     }\n     \n     private static DetailAST findFirstAnnotation(final DetailAST ast, final Predicate<DetailAST> predicate) {\n         final DetailAST holder = getAnnotationHolder(ast);\n         DetailAST result = null;\n         for (DetailAST child = holder.getFirstChild(); child != null; child = child.getNextSibling()) {\n             if (child.getType() == 159 && predicate.test(child)) {\n                 result = child;\n                 break;\n             }\n         }\n         return result;\n     }\n-    \n-    static {\n-        OVERRIDE_ANNOTATIONS = Set.of(\"Override\", \"java.lang.Override\");\n-    }\n }\n"}]}
