{"diffoscope-json-version": 1, "source1": "first/X0017_StrongEncryptionHeader.class", "source2": "second/X0017_StrongEncryptionHeader.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,191 +1,190 @@\n-  SHA-256 checksum 20b48a72d1c5fbf5391345b0560ca4639e42a6e39ac553664cc2c37fdf66293b\n+  SHA-256 checksum 350dc15d15738ff258054df2ed0eee90fc76ce774e48ff8c96cbad61e1c48da5\n   Compiled from \"X0017_StrongEncryptionHeader.java\"\n public class org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader extends org.apache.commons.compress.archivers.zip.PKWareExtraHeader\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #42                         // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n-  super_class: #8                         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  this_class: #1                          // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n+  super_class: #3                         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n   interfaces: 0, fields: 13, methods: 9, attributes: 2\n Constant pool:\n-    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/ZipShort\n-    #2 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-    #3 = Methodref          #1.#4         // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-    #4 = NameAndType        #5:#6         // \"<init>\":(I)V\n-    #5 = Utf8               <init>\n-    #6 = Utf8               (I)V\n-    #7 = Methodref          #8.#9         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-    #8 = Class              #10           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-    #9 = NameAndType        #5:#11        // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-   #10 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-   #11 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-   #12 = Class              #13           // java/util/zip/ZipException\n-   #13 = Utf8               java/util/zip/ZipException\n-   #14 = Class              #15           // java/lang/StringBuilder\n-   #15 = Utf8               java/lang/StringBuilder\n-   #16 = Methodref          #14.#17       // java/lang/StringBuilder.\"<init>\":()V\n-   #17 = NameAndType        #5:#18        // \"<init>\":()V\n-   #18 = Utf8               ()V\n-   #19 = String             #20           // Invalid X0017_StrongEncryptionHeader:\n-   #20 = Utf8               Invalid X0017_StrongEncryptionHeader:\n-   #21 = Methodref          #14.#22       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #22 = NameAndType        #23:#24       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #23 = Utf8               append\n-   #24 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #25 = String             #26           //\n-   #26 = Utf8\n-   #27 = Methodref          #14.#28       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #28 = NameAndType        #23:#29       // append:(I)Ljava/lang/StringBuilder;\n-   #29 = Utf8               (I)Ljava/lang/StringBuilder;\n-   #30 = String             #31           //  doesn\\'t fit into\n-   #31 = Utf8                doesn\\'t fit into\n-   #32 = String             #33           //  bytes of data at position\n-   #33 = Utf8                bytes of data at position\n-   #34 = Methodref          #14.#35       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #35 = NameAndType        #36:#37       // toString:()Ljava/lang/String;\n-   #36 = Utf8               toString\n-   #37 = Utf8               ()Ljava/lang/String;\n-   #38 = Methodref          #12.#39       // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #39 = NameAndType        #5:#40        // \"<init>\":(Ljava/lang/String;)V\n-   #40 = Utf8               (Ljava/lang/String;)V\n-   #41 = Fieldref           #42.#43       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-   #42 = Class              #44           // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n-   #43 = NameAndType        #45:#46       // algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-   #44 = Utf8               org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n-   #45 = Utf8               algId\n-   #46 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-   #47 = Fieldref           #42.#48       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #48 = NameAndType        #49:#50       // hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #49 = Utf8               hashAlg\n-   #50 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #51 = Fieldref           #42.#52       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.rcount:J\n-   #52 = NameAndType        #53:#54       // rcount:J\n-   #53 = Utf8               rcount\n-   #54 = Utf8               J\n-   #55 = Methodref          #42.#56       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.assertMinimalLength:(II)V\n-   #56 = NameAndType        #57:#58       // assertMinimalLength:(II)V\n-   #57 = Utf8               assertMinimalLength\n-   #58 = Utf8               (II)V\n-   #59 = Methodref          #1.#60        // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-   #60 = NameAndType        #61:#62       // getValue:([BI)I\n-   #61 = Utf8               getValue\n-   #62 = Utf8               ([BI)I\n-   #63 = Fieldref           #42.#64       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.format:I\n-   #64 = NameAndType        #65:#66       // format:I\n-   #65 = Utf8               format\n-   #66 = Utf8               I\n-   #67 = Methodref          #68.#69       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-   #68 = Class              #70           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n-   #69 = NameAndType        #71:#72       // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-   #70 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n-   #71 = Utf8               getAlgorithmByCode\n-   #72 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-   #73 = Fieldref           #42.#74       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.bitlen:I\n-   #74 = NameAndType        #75:#66       // bitlen:I\n-   #75 = Utf8               bitlen\n-   #76 = Fieldref           #42.#77       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.flags:I\n-   #77 = NameAndType        #78:#66       // flags:I\n-   #78 = Utf8               flags\n-   #79 = Methodref          #80.#81       // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-   #80 = Class              #82           // org/apache/commons/compress/archivers/zip/ZipLong\n-   #81 = NameAndType        #61:#83       // getValue:([BI)J\n-   #82 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-   #83 = Utf8               ([BI)J\n-   #84 = Methodref          #85.#86       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #85 = Class              #87           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n-   #86 = NameAndType        #71:#88       // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #87 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n-   #88 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #89 = Fieldref           #42.#90       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.hashSize:I\n-   #90 = NameAndType        #91:#66       // hashSize:I\n-   #91 = Utf8               hashSize\n-   #92 = String             #93           // ivSize\n-   #93 = Utf8               ivSize\n-   #94 = Methodref          #42.#95       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.assertDynamicLengthFits:(Ljava/lang/String;III)V\n-   #95 = NameAndType        #96:#97       // assertDynamicLengthFits:(Ljava/lang/String;III)V\n-   #96 = Utf8               assertDynamicLengthFits\n-   #97 = Utf8               (Ljava/lang/String;III)V\n-   #98 = Methodref          #99.#100      // java/util/Arrays.copyOfRange:([BII)[B\n-   #99 = Class              #101          // java/util/Arrays\n-  #100 = NameAndType        #102:#103     // copyOfRange:([BII)[B\n-  #101 = Utf8               java/util/Arrays\n-  #102 = Utf8               copyOfRange\n-  #103 = Utf8               ([BII)[B\n-  #104 = Fieldref           #42.#105      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.ivData:[B\n-  #105 = NameAndType        #106:#107     // ivData:[B\n-  #106 = Utf8               ivData\n-  #107 = Utf8               [B\n-  #108 = String             #109          // erdSize\n-  #109 = Utf8               erdSize\n-  #110 = Fieldref           #42.#111      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.erdData:[B\n-  #111 = NameAndType        #112:#107     // erdData:[B\n-  #112 = Utf8               erdData\n-  #113 = String             #114          // vSize\n-  #114 = Utf8               vSize\n-  #115 = String             #116          // Invalid X0017_StrongEncryptionHeader: vSize\n-  #116 = Utf8               Invalid X0017_StrongEncryptionHeader: vSize\n-  #117 = String             #118          //  is too small to hold CRC\n-  #118 = Utf8                is too small to hold CRC\n-  #119 = Fieldref           #42.#120      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.vData:[B\n-  #120 = NameAndType        #121:#107     // vData:[B\n-  #121 = Utf8               vData\n-  #122 = Fieldref           #42.#123      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.vCRC32:[B\n-  #123 = NameAndType        #124:#107     // vCRC32:[B\n-  #124 = Utf8               vCRC32\n-  #125 = String             #126          // Invalid X0017_StrongEncryptionHeader: resize\n-  #126 = Utf8               Invalid X0017_StrongEncryptionHeader: resize\n-  #127 = String             #128          //  is too small to hold hashSize\n-  #128 = Utf8                is too small to hold hashSize\n-  #129 = String             #130          // resize\n-  #130 = Utf8               resize\n-  #131 = Fieldref           #42.#132      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.recipientKeyHash:[B\n-  #132 = NameAndType        #133:#107     // recipientKeyHash:[B\n-  #133 = Utf8               recipientKeyHash\n-  #134 = Fieldref           #42.#135      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.keyBlob:[B\n-  #135 = NameAndType        #136:#107     // keyBlob:[B\n-  #136 = Utf8               keyBlob\n-  #137 = Methodref          #8.#138       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n-  #138 = NameAndType        #139:#140     // parseFromCentralDirectoryData:([BII)V\n-  #139 = Utf8               parseFromCentralDirectoryData\n-  #140 = Utf8               ([BII)V\n-  #141 = Methodref          #42.#142      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.parseCentralDirectoryFormat:([BII)V\n-  #142 = NameAndType        #143:#140     // parseCentralDirectoryFormat:([BII)V\n-  #143 = Utf8               parseCentralDirectoryFormat\n-  #144 = Methodref          #8.#145       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromLocalFileData:([BII)V\n-  #145 = NameAndType        #146:#140     // parseFromLocalFileData:([BII)V\n-  #146 = Utf8               parseFromLocalFileData\n-  #147 = Methodref          #42.#148      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.parseFileFormat:([BII)V\n-  #148 = NameAndType        #149:#140     // parseFileFormat:([BII)V\n-  #149 = Utf8               parseFileFormat\n-  #150 = Utf8               Code\n-  #151 = Utf8               LineNumberTable\n-  #152 = Utf8               LocalVariableTable\n-  #153 = Utf8               this\n-  #154 = Utf8               Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n-  #155 = Utf8               what\n-  #156 = Utf8               Ljava/lang/String;\n-  #157 = Utf8               dynamicLength\n-  #158 = Utf8               prefixLength\n-  #159 = Utf8               length\n-  #160 = Utf8               StackMapTable\n-  #161 = Utf8               Exceptions\n-  #162 = Utf8               getEncryptionAlgorithm\n-  #163 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-  #164 = Utf8               getHashAlgorithm\n-  #165 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-  #166 = Utf8               getRecordCount\n-  #167 = Utf8               ()J\n-  #168 = Utf8               data\n-  #169 = Utf8               offset\n-  #170 = Utf8               SourceFile\n-  #171 = Utf8               X0017_StrongEncryptionHeader.java\n-  #172 = Utf8               InnerClasses\n-  #173 = Utf8               EncryptionAlgorithm\n-  #174 = Utf8               HashAlgorithm\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n+    #3 = Class              #4            // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+    #4 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+    #5 = Utf8               format\n+    #6 = Utf8               I\n+    #7 = Utf8               algId\n+    #8 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+    #9 = Utf8               bitlen\n+   #10 = Utf8               flags\n+   #11 = Utf8               rcount\n+   #12 = Utf8               J\n+   #13 = Utf8               hashAlg\n+   #14 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #15 = Utf8               hashSize\n+   #16 = Utf8               ivData\n+   #17 = Utf8               [B\n+   #18 = Utf8               erdData\n+   #19 = Utf8               recipientKeyHash\n+   #20 = Utf8               keyBlob\n+   #21 = Utf8               vData\n+   #22 = Utf8               vCRC32\n+   #23 = Utf8               <init>\n+   #24 = Utf8               ()V\n+   #25 = Utf8               Code\n+   #26 = Class              #27           // org/apache/commons/compress/archivers/zip/ZipShort\n+   #27 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+   #28 = Methodref          #26.#29       // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+   #29 = NameAndType        #23:#30       // \"<init>\":(I)V\n+   #30 = Utf8               (I)V\n+   #31 = Methodref          #3.#32        // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #32 = NameAndType        #23:#33       // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #33 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #34 = Utf8               LineNumberTable\n+   #35 = Utf8               LocalVariableTable\n+   #36 = Utf8               this\n+   #37 = Utf8               Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n+   #38 = Utf8               assertDynamicLengthFits\n+   #39 = Utf8               (Ljava/lang/String;III)V\n+   #40 = Utf8               Exceptions\n+   #41 = Class              #42           // java/util/zip/ZipException\n+   #42 = Utf8               java/util/zip/ZipException\n+   #43 = Class              #44           // java/lang/StringBuilder\n+   #44 = Utf8               java/lang/StringBuilder\n+   #45 = String             #46           // Invalid X0017_StrongEncryptionHeader:\n+   #46 = Utf8               Invalid X0017_StrongEncryptionHeader:\n+   #47 = Methodref          #43.#48       // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+   #48 = NameAndType        #23:#49       // \"<init>\":(Ljava/lang/String;)V\n+   #49 = Utf8               (Ljava/lang/String;)V\n+   #50 = Methodref          #43.#51       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #51 = NameAndType        #52:#53       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #52 = Utf8               append\n+   #53 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #54 = String             #55           //\n+   #55 = Utf8\n+   #56 = Methodref          #43.#57       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #57 = NameAndType        #52:#58       // append:(I)Ljava/lang/StringBuilder;\n+   #58 = Utf8               (I)Ljava/lang/StringBuilder;\n+   #59 = String             #60           //  doesn\\'t fit into\n+   #60 = Utf8                doesn\\'t fit into\n+   #61 = String             #62           //  bytes of data at position\n+   #62 = Utf8                bytes of data at position\n+   #63 = Methodref          #43.#64       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #64 = NameAndType        #65:#66       // toString:()Ljava/lang/String;\n+   #65 = Utf8               toString\n+   #66 = Utf8               ()Ljava/lang/String;\n+   #67 = Methodref          #41.#48       // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+   #68 = Utf8               what\n+   #69 = Utf8               Ljava/lang/String;\n+   #70 = Utf8               dynamicLength\n+   #71 = Utf8               prefixLength\n+   #72 = Utf8               length\n+   #73 = Utf8               StackMapTable\n+   #74 = Utf8               getEncryptionAlgorithm\n+   #75 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #76 = Fieldref           #1.#77        // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #77 = NameAndType        #7:#8         // algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #78 = Utf8               getHashAlgorithm\n+   #79 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #80 = Fieldref           #1.#81        // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #81 = NameAndType        #13:#14       // hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #82 = Utf8               getRecordCount\n+   #83 = Utf8               ()J\n+   #84 = Fieldref           #1.#85        // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.rcount:J\n+   #85 = NameAndType        #11:#12       // rcount:J\n+   #86 = Utf8               parseCentralDirectoryFormat\n+   #87 = Utf8               ([BII)V\n+   #88 = Methodref          #1.#89        // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.assertMinimalLength:(II)V\n+   #89 = NameAndType        #90:#91       // assertMinimalLength:(II)V\n+   #90 = Utf8               assertMinimalLength\n+   #91 = Utf8               (II)V\n+   #92 = Methodref          #26.#93       // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+   #93 = NameAndType        #94:#95       // getValue:([BI)I\n+   #94 = Utf8               getValue\n+   #95 = Utf8               ([BI)I\n+   #96 = Fieldref           #1.#97        // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.format:I\n+   #97 = NameAndType        #5:#6         // format:I\n+   #98 = Methodref          #99.#101      // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #99 = Class              #100          // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n+  #100 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n+  #101 = NameAndType        #102:#103     // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+  #102 = Utf8               getAlgorithmByCode\n+  #103 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+  #104 = Fieldref           #1.#105       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.bitlen:I\n+  #105 = NameAndType        #9:#6         // bitlen:I\n+  #106 = Fieldref           #1.#107       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.flags:I\n+  #107 = NameAndType        #10:#6        // flags:I\n+  #108 = Methodref          #109.#111     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+  #109 = Class              #110          // org/apache/commons/compress/archivers/zip/ZipLong\n+  #110 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+  #111 = NameAndType        #94:#112      // getValue:([BI)J\n+  #112 = Utf8               ([BI)J\n+  #113 = Methodref          #114.#116     // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+  #114 = Class              #115          // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n+  #115 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n+  #116 = NameAndType        #102:#117     // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+  #117 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+  #118 = Fieldref           #1.#119       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.hashSize:I\n+  #119 = NameAndType        #15:#6        // hashSize:I\n+  #120 = Utf8               data\n+  #121 = Utf8               offset\n+  #122 = Utf8               parseFileFormat\n+  #123 = String             #124          // ivSize\n+  #124 = Utf8               ivSize\n+  #125 = Methodref          #1.#126       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.assertDynamicLengthFits:(Ljava/lang/String;III)V\n+  #126 = NameAndType        #38:#39       // assertDynamicLengthFits:(Ljava/lang/String;III)V\n+  #127 = Methodref          #128.#130     // java/util/Arrays.copyOfRange:([BII)[B\n+  #128 = Class              #129          // java/util/Arrays\n+  #129 = Utf8               java/util/Arrays\n+  #130 = NameAndType        #131:#132     // copyOfRange:([BII)[B\n+  #131 = Utf8               copyOfRange\n+  #132 = Utf8               ([BII)[B\n+  #133 = Fieldref           #1.#134       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.ivData:[B\n+  #134 = NameAndType        #16:#17       // ivData:[B\n+  #135 = String             #136          // erdSize\n+  #136 = Utf8               erdSize\n+  #137 = Fieldref           #1.#138       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.erdData:[B\n+  #138 = NameAndType        #18:#17       // erdData:[B\n+  #139 = String             #140          // vSize\n+  #140 = Utf8               vSize\n+  #141 = String             #142          // Invalid X0017_StrongEncryptionHeader: vSize\n+  #142 = Utf8               Invalid X0017_StrongEncryptionHeader: vSize\n+  #143 = String             #144          //  is too small to hold CRC\n+  #144 = Utf8                is too small to hold CRC\n+  #145 = Fieldref           #1.#146       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.vData:[B\n+  #146 = NameAndType        #21:#17       // vData:[B\n+  #147 = Fieldref           #1.#148       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.vCRC32:[B\n+  #148 = NameAndType        #22:#17       // vCRC32:[B\n+  #149 = String             #150          // Invalid X0017_StrongEncryptionHeader: resize\n+  #150 = Utf8               Invalid X0017_StrongEncryptionHeader: resize\n+  #151 = String             #152          //  is too small to hold hashSize\n+  #152 = Utf8                is too small to hold hashSize\n+  #153 = String             #154          // resize\n+  #154 = Utf8               resize\n+  #155 = Fieldref           #1.#156       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.recipientKeyHash:[B\n+  #156 = NameAndType        #19:#17       // recipientKeyHash:[B\n+  #157 = Fieldref           #1.#158       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.keyBlob:[B\n+  #158 = NameAndType        #20:#17       // keyBlob:[B\n+  #159 = Utf8               parseFromCentralDirectoryData\n+  #160 = Methodref          #3.#161       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n+  #161 = NameAndType        #159:#87      // parseFromCentralDirectoryData:([BII)V\n+  #162 = Methodref          #1.#163       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.parseCentralDirectoryFormat:([BII)V\n+  #163 = NameAndType        #86:#87       // parseCentralDirectoryFormat:([BII)V\n+  #164 = Utf8               parseFromLocalFileData\n+  #165 = Methodref          #3.#166       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromLocalFileData:([BII)V\n+  #166 = NameAndType        #164:#87      // parseFromLocalFileData:([BII)V\n+  #167 = Methodref          #1.#168       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.parseFileFormat:([BII)V\n+  #168 = NameAndType        #122:#87      // parseFileFormat:([BII)V\n+  #169 = Utf8               SourceFile\n+  #170 = Utf8               X0017_StrongEncryptionHeader.java\n+  #171 = Utf8               InnerClasses\n+  #172 = Utf8               EncryptionAlgorithm\n+  #173 = Utf8               HashAlgorithm\n {\n   private int format;\n     descriptor: I\n     flags: (0x0002) ACC_PRIVATE\n \n   private org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm algId;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n@@ -237,187 +236,191 @@\n \n   public org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n-         1: new           #1                  // class org/apache/commons/compress/archivers/zip/ZipShort\n+         1: new           #26                 // class org/apache/commons/compress/archivers/zip/ZipShort\n          4: dup\n          5: bipush        23\n-         7: invokespecial #3                  // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-        10: invokespecial #7                  // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+         7: invokespecial #28                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+        10: invokespecial #31                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n         13: return\n       LineNumberTable:\n         line 272: 0\n         line 273: 13\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      14     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n \n   private void assertDynamicLengthFits(java.lang.String, int, int, int) throws java.util.zip.ZipException;\n     descriptor: (Ljava/lang/String;III)V\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.util.zip.ZipException\n     Code:\n-      stack=4, locals=5, args_size=5\n+      stack=5, locals=5, args_size=5\n          0: iload_3\n          1: iload_2\n          2: iadd\n          3: iload         4\n-         5: if_icmple     63\n-         8: new           #12                 // class java/util/zip/ZipException\n+         5: if_icmple     60\n+         8: new           #41                 // class java/util/zip/ZipException\n         11: dup\n-        12: new           #14                 // class java/lang/StringBuilder\n+        12: new           #43                 // class java/lang/StringBuilder\n         15: dup\n-        16: invokespecial #16                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        19: ldc           #19                 // String Invalid X0017_StrongEncryptionHeader:\n-        21: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        24: aload_1\n-        25: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        28: ldc           #25                 // String\n-        30: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        33: iload_2\n-        34: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        37: ldc           #30                 // String  doesn\\'t fit into\n-        39: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        42: iload         4\n-        44: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        47: ldc           #32                 // String  bytes of data at position\n-        49: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        52: iload_3\n-        53: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        56: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        59: invokespecial #38                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-        62: athrow\n-        63: return\n+        16: ldc           #45                 // String Invalid X0017_StrongEncryptionHeader:\n+        18: invokespecial #47                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+        21: aload_1\n+        22: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        25: ldc           #54                 // String\n+        27: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        30: iload_2\n+        31: invokevirtual #56                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        34: ldc           #59                 // String  doesn\\'t fit into\n+        36: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        39: iload         4\n+        41: invokevirtual #56                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        44: ldc           #61                 // String  bytes of data at position\n+        46: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        49: iload_3\n+        50: invokevirtual #56                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        53: invokevirtual #63                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        56: invokespecial #67                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        59: athrow\n+        60: return\n       LineNumberTable:\n         line 277: 0\n         line 278: 8\n-        line 282: 63\n+        line 279: 30\n+        line 280: 49\n+        line 278: 56\n+        line 282: 60\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      64     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n-            0      64     1  what   Ljava/lang/String;\n-            0      64     2 dynamicLength   I\n-            0      64     3 prefixLength   I\n-            0      64     4 length   I\n+            0      61     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n+            0      61     1  what   Ljava/lang/String;\n+            0      61     2 dynamicLength   I\n+            0      61     3 prefixLength   I\n+            0      61     4 length   I\n       StackMapTable: number_of_entries = 1\n-        frame_type = 63 /* same */\n-    Exceptions:\n-      throws java.util.zip.ZipException\n+        frame_type = 60 /* same */\n \n   public org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm getEncryptionAlgorithm();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #41                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+         1: getfield      #76                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n          4: areturn\n       LineNumberTable:\n         line 289: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n \n   public org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm getHashAlgorithm();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #47                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+         1: getfield      #80                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n          4: areturn\n       LineNumberTable:\n         line 297: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n \n   public long getRecordCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #51                 // Field rcount:J\n+         1: getfield      #84                 // Field rcount:J\n          4: lreturn\n       LineNumberTable:\n         line 305: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n \n   public void parseCentralDirectoryFormat(byte[], int, int) throws java.util.zip.ZipException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.util.zip.ZipException\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: bipush        12\n          3: iload_3\n-         4: invokevirtual #55                 // Method assertMinimalLength:(II)V\n+         4: invokevirtual #88                 // Method assertMinimalLength:(II)V\n          7: aload_0\n          8: aload_1\n          9: iload_2\n-        10: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        13: putfield      #63                 // Field format:I\n+        10: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        13: putfield      #96                 // Field format:I\n         16: aload_0\n         17: aload_1\n         18: iload_2\n         19: iconst_2\n         20: iadd\n-        21: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        24: invokestatic  #67                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-        27: putfield      #41                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+        21: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        24: invokestatic  #98                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+        27: putfield      #76                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n         30: aload_0\n         31: aload_1\n         32: iload_2\n         33: iconst_4\n         34: iadd\n-        35: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        38: putfield      #73                 // Field bitlen:I\n+        35: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        38: putfield      #104                // Field bitlen:I\n         41: aload_0\n         42: aload_1\n         43: iload_2\n         44: bipush        6\n         46: iadd\n-        47: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        50: putfield      #76                 // Field flags:I\n+        47: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        50: putfield      #106                // Field flags:I\n         53: aload_0\n         54: aload_1\n         55: iload_2\n         56: bipush        8\n         58: iadd\n-        59: invokestatic  #79                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-        62: putfield      #51                 // Field rcount:J\n+        59: invokestatic  #108                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+        62: putfield      #84                 // Field rcount:J\n         65: aload_0\n-        66: getfield      #51                 // Field rcount:J\n+        66: getfield      #84                 // Field rcount:J\n         69: lconst_0\n         70: lcmp\n         71: ifle          108\n         74: aload_0\n         75: bipush        16\n         77: iload_3\n-        78: invokevirtual #55                 // Method assertMinimalLength:(II)V\n+        78: invokevirtual #88                 // Method assertMinimalLength:(II)V\n         81: aload_0\n         82: aload_1\n         83: iload_2\n         84: bipush        12\n         86: iadd\n-        87: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        90: invokestatic  #84                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-        93: putfield      #47                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+        87: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        90: invokestatic  #113                // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+        93: putfield      #80                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n         96: aload_0\n         97: aload_1\n         98: iload_2\n         99: bipush        14\n        101: iadd\n-       102: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       105: putfield      #89                 // Field hashSize:I\n+       102: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       105: putfield      #118                // Field hashSize:I\n        108: return\n       LineNumberTable:\n         line 318: 0\n         line 320: 7\n         line 321: 16\n         line 322: 30\n         line 323: 41\n@@ -432,448 +435,445 @@\n             0     109     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n             0     109     1  data   [B\n             0     109     2 offset   I\n             0     109     3 length   I\n       StackMapTable: number_of_entries = 1\n         frame_type = 251 /* same_frame_extended */\n           offset_delta = 108\n-    Exceptions:\n-      throws java.util.zip.ZipException\n \n   public void parseFileFormat(byte[], int, int) throws java.util.zip.ZipException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.util.zip.ZipException\n     Code:\n       stack=5, locals=8, args_size=4\n          0: aload_0\n          1: iconst_4\n          2: iload_3\n-         3: invokevirtual #55                 // Method assertMinimalLength:(II)V\n+         3: invokevirtual #88                 // Method assertMinimalLength:(II)V\n          6: aload_1\n          7: iload_2\n-         8: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+         8: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n         11: istore        4\n         13: aload_0\n-        14: ldc           #92                 // String ivSize\n+        14: ldc           #123                // String ivSize\n         16: iload         4\n         18: iconst_4\n         19: iload_3\n-        20: invokespecial #94                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+        20: invokespecial #125                // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n         23: aload_0\n         24: iload_2\n         25: iconst_4\n         26: iadd\n         27: iload         4\n-        29: invokevirtual #55                 // Method assertMinimalLength:(II)V\n+        29: invokevirtual #88                 // Method assertMinimalLength:(II)V\n         32: aload_0\n         33: aload_1\n         34: iload_2\n         35: iconst_4\n         36: iadd\n         37: iload         4\n-        39: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-        42: putfield      #104                // Field ivData:[B\n+        39: invokestatic  #127                // Method java/util/Arrays.copyOfRange:([BII)[B\n+        42: putfield      #133                // Field ivData:[B\n         45: aload_0\n         46: bipush        16\n         48: iload         4\n         50: iadd\n         51: iload_3\n-        52: invokevirtual #55                 // Method assertMinimalLength:(II)V\n+        52: invokevirtual #88                 // Method assertMinimalLength:(II)V\n         55: aload_0\n         56: aload_1\n         57: iload_2\n         58: iload         4\n         60: iadd\n         61: bipush        6\n         63: iadd\n-        64: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        67: putfield      #63                 // Field format:I\n+        64: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        67: putfield      #96                 // Field format:I\n         70: aload_0\n         71: aload_1\n         72: iload_2\n         73: iload         4\n         75: iadd\n         76: bipush        8\n         78: iadd\n-        79: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        82: invokestatic  #67                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-        85: putfield      #41                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+        79: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        82: invokestatic  #98                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+        85: putfield      #76                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n         88: aload_0\n         89: aload_1\n         90: iload_2\n         91: iload         4\n         93: iadd\n         94: bipush        10\n         96: iadd\n-        97: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       100: putfield      #73                 // Field bitlen:I\n+        97: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       100: putfield      #104                // Field bitlen:I\n        103: aload_0\n        104: aload_1\n        105: iload_2\n        106: iload         4\n        108: iadd\n        109: bipush        12\n        111: iadd\n-       112: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       115: putfield      #76                 // Field flags:I\n+       112: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       115: putfield      #106                // Field flags:I\n        118: aload_1\n        119: iload_2\n        120: iload         4\n        122: iadd\n        123: bipush        14\n        125: iadd\n-       126: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       126: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        129: istore        5\n        131: aload_0\n-       132: ldc           #108                // String erdSize\n+       132: ldc           #135                // String erdSize\n        134: iload         5\n        136: iload         4\n        138: bipush        16\n        140: iadd\n        141: iload_3\n-       142: invokespecial #94                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+       142: invokespecial #125                // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n        145: aload_0\n        146: iload_2\n        147: iload         4\n        149: iadd\n        150: bipush        16\n        152: iadd\n        153: iload         5\n-       155: invokevirtual #55                 // Method assertMinimalLength:(II)V\n+       155: invokevirtual #88                 // Method assertMinimalLength:(II)V\n        158: aload_0\n        159: aload_1\n        160: iload_2\n        161: iload         4\n        163: iadd\n        164: bipush        16\n        166: iadd\n        167: iload         5\n-       169: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       172: putfield      #110                // Field erdData:[B\n+       169: invokestatic  #127                // Method java/util/Arrays.copyOfRange:([BII)[B\n+       172: putfield      #137                // Field erdData:[B\n        175: aload_0\n        176: bipush        20\n        178: iload         4\n        180: iadd\n        181: iload         5\n        183: iadd\n        184: iload_3\n-       185: invokevirtual #55                 // Method assertMinimalLength:(II)V\n+       185: invokevirtual #88                 // Method assertMinimalLength:(II)V\n        188: aload_0\n        189: aload_1\n        190: iload_2\n        191: iload         4\n        193: iadd\n        194: bipush        16\n        196: iadd\n        197: iload         5\n        199: iadd\n-       200: invokestatic  #79                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       203: putfield      #51                 // Field rcount:J\n+       200: invokestatic  #108                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       203: putfield      #84                 // Field rcount:J\n        206: aload_0\n-       207: getfield      #51                 // Field rcount:J\n+       207: getfield      #84                 // Field rcount:J\n        210: lconst_0\n        211: lcmp\n-       212: ifne          389\n+       212: ifne          386\n        215: aload_0\n        216: iload         4\n        218: bipush        20\n        220: iadd\n        221: iload         5\n        223: iadd\n        224: iconst_2\n        225: iadd\n        226: iload_3\n-       227: invokevirtual #55                 // Method assertMinimalLength:(II)V\n+       227: invokevirtual #88                 // Method assertMinimalLength:(II)V\n        230: aload_1\n        231: iload_2\n        232: iload         4\n        234: iadd\n        235: bipush        20\n        237: iadd\n        238: iload         5\n        240: iadd\n-       241: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       241: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        244: istore        6\n        246: aload_0\n-       247: ldc           #113                // String vSize\n+       247: ldc           #139                // String vSize\n        249: iload         6\n        251: iload         4\n        253: bipush        22\n        255: iadd\n        256: iload         5\n        258: iadd\n        259: iload_3\n-       260: invokespecial #94                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+       260: invokespecial #125                // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n        263: iload         6\n        265: iconst_4\n-       266: if_icmpge     302\n-       269: new           #12                 // class java/util/zip/ZipException\n+       266: if_icmpge     299\n+       269: new           #41                 // class java/util/zip/ZipException\n        272: dup\n-       273: new           #14                 // class java/lang/StringBuilder\n+       273: new           #43                 // class java/lang/StringBuilder\n        276: dup\n-       277: invokespecial #16                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       280: ldc           #115                // String Invalid X0017_StrongEncryptionHeader: vSize\n-       282: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       285: iload         6\n-       287: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       290: ldc           #117                // String  is too small to hold CRC\n-       292: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       295: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       298: invokespecial #38                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       301: athrow\n-       302: aload_0\n-       303: iload_2\n-       304: iload         4\n+       277: ldc           #141                // String Invalid X0017_StrongEncryptionHeader: vSize\n+       279: invokespecial #47                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+       282: iload         6\n+       284: invokevirtual #56                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       287: ldc           #143                // String  is too small to hold CRC\n+       289: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       292: invokevirtual #63                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       295: invokespecial #67                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       298: athrow\n+       299: aload_0\n+       300: iload_2\n+       301: iload         4\n+       303: iadd\n+       304: bipush        22\n        306: iadd\n-       307: bipush        22\n+       307: iload         5\n        309: iadd\n-       310: iload         5\n-       312: iadd\n-       313: iload         6\n-       315: iconst_4\n-       316: isub\n-       317: invokevirtual #55                 // Method assertMinimalLength:(II)V\n-       320: aload_0\n-       321: aload_1\n-       322: iload_2\n-       323: iload         4\n+       310: iload         6\n+       312: iconst_4\n+       313: isub\n+       314: invokevirtual #88                 // Method assertMinimalLength:(II)V\n+       317: aload_0\n+       318: aload_1\n+       319: iload_2\n+       320: iload         4\n+       322: iadd\n+       323: bipush        22\n        325: iadd\n-       326: bipush        22\n+       326: iload         5\n        328: iadd\n-       329: iload         5\n-       331: iadd\n-       332: iload         6\n-       334: iconst_4\n-       335: isub\n-       336: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       339: putfield      #119                // Field vData:[B\n-       342: aload_0\n-       343: iload_2\n-       344: iload         4\n+       329: iload         6\n+       331: iconst_4\n+       332: isub\n+       333: invokestatic  #127                // Method java/util/Arrays.copyOfRange:([BII)[B\n+       336: putfield      #145                // Field vData:[B\n+       339: aload_0\n+       340: iload_2\n+       341: iload         4\n+       343: iadd\n+       344: bipush        22\n        346: iadd\n-       347: bipush        22\n+       347: iload         5\n        349: iadd\n-       350: iload         5\n+       350: iload         6\n        352: iadd\n-       353: iload         6\n-       355: iadd\n-       356: iconst_4\n-       357: isub\n-       358: iconst_4\n-       359: invokevirtual #55                 // Method assertMinimalLength:(II)V\n-       362: aload_0\n-       363: aload_1\n-       364: iload_2\n-       365: iload         4\n+       353: iconst_4\n+       354: isub\n+       355: iconst_4\n+       356: invokevirtual #88                 // Method assertMinimalLength:(II)V\n+       359: aload_0\n+       360: aload_1\n+       361: iload_2\n+       362: iload         4\n+       364: iadd\n+       365: bipush        22\n        367: iadd\n-       368: bipush        22\n+       368: iload         5\n        370: iadd\n-       371: iload         5\n+       371: iload         6\n        373: iadd\n-       374: iload         6\n-       376: iadd\n-       377: iconst_4\n-       378: isub\n-       379: iconst_4\n-       380: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       383: putfield      #122                // Field vCRC32:[B\n-       386: goto          726\n-       389: aload_0\n-       390: iload         4\n-       392: bipush        20\n+       374: iconst_4\n+       375: isub\n+       376: iconst_4\n+       377: invokestatic  #127                // Method java/util/Arrays.copyOfRange:([BII)[B\n+       380: putfield      #147                // Field vCRC32:[B\n+       383: goto          717\n+       386: aload_0\n+       387: iload         4\n+       389: bipush        20\n+       391: iadd\n+       392: iload         5\n        394: iadd\n-       395: iload         5\n+       395: bipush        6\n        397: iadd\n-       398: bipush        6\n-       400: iadd\n-       401: iload_3\n-       402: invokevirtual #55                 // Method assertMinimalLength:(II)V\n-       405: aload_0\n-       406: aload_1\n-       407: iload_2\n-       408: iload         4\n+       398: iload_3\n+       399: invokevirtual #88                 // Method assertMinimalLength:(II)V\n+       402: aload_0\n+       403: aload_1\n+       404: iload_2\n+       405: iload         4\n+       407: iadd\n+       408: bipush        20\n        410: iadd\n-       411: bipush        20\n+       411: iload         5\n        413: iadd\n-       414: iload         5\n-       416: iadd\n-       417: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       420: invokestatic  #84                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-       423: putfield      #47                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-       426: aload_0\n-       427: aload_1\n-       428: iload_2\n-       429: iload         4\n+       414: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       417: invokestatic  #113                // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+       420: putfield      #80                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+       423: aload_0\n+       424: aload_1\n+       425: iload_2\n+       426: iload         4\n+       428: iadd\n+       429: bipush        22\n        431: iadd\n-       432: bipush        22\n+       432: iload         5\n        434: iadd\n-       435: iload         5\n-       437: iadd\n-       438: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       441: putfield      #89                 // Field hashSize:I\n-       444: aload_1\n-       445: iload_2\n-       446: iload         4\n+       435: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       438: putfield      #118                // Field hashSize:I\n+       441: aload_1\n+       442: iload_2\n+       443: iload         4\n+       445: iadd\n+       446: bipush        24\n        448: iadd\n-       449: bipush        24\n+       449: iload         5\n        451: iadd\n-       452: iload         5\n-       454: iadd\n-       455: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       458: istore        6\n-       460: iload         6\n-       462: aload_0\n-       463: getfield      #89                 // Field hashSize:I\n-       466: if_icmpge     509\n-       469: new           #12                 // class java/util/zip/ZipException\n-       472: dup\n-       473: new           #14                 // class java/lang/StringBuilder\n-       476: dup\n-       477: invokespecial #16                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       480: ldc           #125                // String Invalid X0017_StrongEncryptionHeader: resize\n-       482: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       485: iload         6\n-       487: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       490: ldc           #127                // String  is too small to hold hashSize\n-       492: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       495: aload_0\n-       496: getfield      #89                 // Field hashSize:I\n-       499: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       502: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       505: invokespecial #38                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       508: athrow\n-       509: aload_0\n-       510: ldc           #129                // String resize\n-       512: iload         6\n-       514: iload         4\n-       516: bipush        24\n-       518: iadd\n-       519: iload         5\n-       521: iadd\n-       522: iload_3\n-       523: invokespecial #94                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n-       526: aload_0\n-       527: aload_1\n-       528: iload_2\n-       529: iload         4\n+       452: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       455: istore        6\n+       457: iload         6\n+       459: aload_0\n+       460: getfield      #118                // Field hashSize:I\n+       463: if_icmpge     503\n+       466: new           #41                 // class java/util/zip/ZipException\n+       469: dup\n+       470: new           #43                 // class java/lang/StringBuilder\n+       473: dup\n+       474: ldc           #149                // String Invalid X0017_StrongEncryptionHeader: resize\n+       476: invokespecial #47                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+       479: iload         6\n+       481: invokevirtual #56                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       484: ldc           #151                // String  is too small to hold hashSize\n+       486: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       489: aload_0\n+       490: getfield      #118                // Field hashSize:I\n+       493: invokevirtual #56                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       496: invokevirtual #63                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       499: invokespecial #67                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       502: athrow\n+       503: aload_0\n+       504: ldc           #153                // String resize\n+       506: iload         6\n+       508: iload         4\n+       510: bipush        24\n+       512: iadd\n+       513: iload         5\n+       515: iadd\n+       516: iload_3\n+       517: invokespecial #125                // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+       520: aload_0\n+       521: aload_1\n+       522: iload_2\n+       523: iload         4\n+       525: iadd\n+       526: bipush        24\n+       528: iadd\n+       529: iload         5\n        531: iadd\n-       532: bipush        24\n-       534: iadd\n-       535: iload         5\n-       537: iadd\n-       538: aload_0\n-       539: getfield      #89                 // Field hashSize:I\n-       542: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       545: putfield      #131                // Field recipientKeyHash:[B\n-       548: aload_0\n-       549: aload_1\n-       550: iload_2\n-       551: iload         4\n+       532: aload_0\n+       533: getfield      #118                // Field hashSize:I\n+       536: invokestatic  #127                // Method java/util/Arrays.copyOfRange:([BII)[B\n+       539: putfield      #155                // Field recipientKeyHash:[B\n+       542: aload_0\n+       543: aload_1\n+       544: iload_2\n+       545: iload         4\n+       547: iadd\n+       548: bipush        24\n+       550: iadd\n+       551: iload         5\n        553: iadd\n-       554: bipush        24\n-       556: iadd\n-       557: iload         5\n-       559: iadd\n-       560: aload_0\n-       561: getfield      #89                 // Field hashSize:I\n-       564: iadd\n-       565: iload         6\n-       567: aload_0\n-       568: getfield      #89                 // Field hashSize:I\n-       571: isub\n-       572: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       575: putfield      #134                // Field keyBlob:[B\n-       578: aload_0\n-       579: iload         4\n-       581: bipush        26\n+       554: aload_0\n+       555: getfield      #118                // Field hashSize:I\n+       558: iadd\n+       559: iload         6\n+       561: aload_0\n+       562: getfield      #118                // Field hashSize:I\n+       565: isub\n+       566: invokestatic  #127                // Method java/util/Arrays.copyOfRange:([BII)[B\n+       569: putfield      #157                // Field keyBlob:[B\n+       572: aload_0\n+       573: iload         4\n+       575: bipush        26\n+       577: iadd\n+       578: iload         5\n+       580: iadd\n+       581: iload         6\n        583: iadd\n-       584: iload         5\n-       586: iadd\n-       587: iload         6\n-       589: iadd\n-       590: iconst_2\n-       591: iadd\n-       592: iload_3\n-       593: invokevirtual #55                 // Method assertMinimalLength:(II)V\n-       596: aload_1\n-       597: iload_2\n-       598: iload         4\n+       584: iconst_2\n+       585: iadd\n+       586: iload_3\n+       587: invokevirtual #88                 // Method assertMinimalLength:(II)V\n+       590: aload_1\n+       591: iload_2\n+       592: iload         4\n+       594: iadd\n+       595: bipush        26\n+       597: iadd\n+       598: iload         5\n        600: iadd\n-       601: bipush        26\n+       601: iload         6\n        603: iadd\n-       604: iload         5\n-       606: iadd\n-       607: iload         6\n-       609: iadd\n-       610: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       613: istore        7\n-       615: iload         7\n-       617: iconst_4\n-       618: if_icmpge     654\n-       621: new           #12                 // class java/util/zip/ZipException\n-       624: dup\n-       625: new           #14                 // class java/lang/StringBuilder\n-       628: dup\n-       629: invokespecial #16                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       632: ldc           #115                // String Invalid X0017_StrongEncryptionHeader: vSize\n-       634: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       637: iload         7\n-       639: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       642: ldc           #117                // String  is too small to hold CRC\n-       644: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       647: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       650: invokespecial #38                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       653: athrow\n-       654: aload_0\n-       655: ldc           #113                // String vSize\n-       657: iload         7\n-       659: iload         4\n-       661: bipush        22\n-       663: iadd\n-       664: iload         5\n-       666: iadd\n-       667: iload         6\n-       669: iadd\n-       670: iload_3\n-       671: invokespecial #94                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n-       674: aload_0\n-       675: aload_1\n-       676: iload_2\n-       677: iload         4\n+       604: invokestatic  #92                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       607: istore        7\n+       609: iload         7\n+       611: iconst_4\n+       612: if_icmpge     645\n+       615: new           #41                 // class java/util/zip/ZipException\n+       618: dup\n+       619: new           #43                 // class java/lang/StringBuilder\n+       622: dup\n+       623: ldc           #141                // String Invalid X0017_StrongEncryptionHeader: vSize\n+       625: invokespecial #47                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+       628: iload         7\n+       630: invokevirtual #56                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       633: ldc           #143                // String  is too small to hold CRC\n+       635: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       638: invokevirtual #63                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       641: invokespecial #67                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       644: athrow\n+       645: aload_0\n+       646: ldc           #139                // String vSize\n+       648: iload         7\n+       650: iload         4\n+       652: bipush        22\n+       654: iadd\n+       655: iload         5\n+       657: iadd\n+       658: iload         6\n+       660: iadd\n+       661: iload_3\n+       662: invokespecial #125                // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+       665: aload_0\n+       666: aload_1\n+       667: iload_2\n+       668: iload         4\n+       670: iadd\n+       671: bipush        22\n+       673: iadd\n+       674: iload         5\n+       676: iadd\n+       677: iload         6\n        679: iadd\n-       680: bipush        22\n-       682: iadd\n-       683: iload         5\n-       685: iadd\n-       686: iload         6\n-       688: iadd\n-       689: iload         7\n-       691: iconst_4\n-       692: isub\n-       693: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       696: putfield      #119                // Field vData:[B\n-       699: aload_0\n-       700: aload_1\n-       701: iload_2\n-       702: iload         4\n+       680: iload         7\n+       682: iconst_4\n+       683: isub\n+       684: invokestatic  #127                // Method java/util/Arrays.copyOfRange:([BII)[B\n+       687: putfield      #145                // Field vData:[B\n+       690: aload_0\n+       691: aload_1\n+       692: iload_2\n+       693: iload         4\n+       695: iadd\n+       696: bipush        22\n+       698: iadd\n+       699: iload         5\n+       701: iadd\n+       702: iload         6\n        704: iadd\n-       705: bipush        22\n+       705: iload         7\n        707: iadd\n-       708: iload         5\n-       710: iadd\n-       711: iload         6\n-       713: iadd\n-       714: iload         7\n-       716: iadd\n-       717: iconst_4\n-       718: isub\n-       719: iconst_4\n-       720: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       723: putfield      #122                // Field vCRC32:[B\n-       726: return\n+       708: iconst_4\n+       709: isub\n+       710: iconst_4\n+       711: invokestatic  #127                // Method java/util/Arrays.copyOfRange:([BII)[B\n+       714: putfield      #147                // Field vCRC32:[B\n+       717: return\n       LineNumberTable:\n         line 345: 0\n         line 346: 6\n         line 347: 13\n         line 348: 23\n         line 350: 32\n         line 352: 45\n@@ -889,119 +889,123 @@\n         line 365: 188\n         line 366: 206\n         line 367: 215\n         line 368: 230\n         line 369: 246\n         line 370: 263\n         line 371: 269\n-        line 374: 302\n-        line 375: 320\n-        line 376: 342\n-        line 377: 362\n-        line 378: 386\n-        line 379: 389\n-        line 380: 405\n-        line 381: 426\n-        line 382: 444\n-        line 384: 460\n-        line 385: 469\n-        line 389: 509\n-        line 391: 526\n-        line 392: 548\n-        line 394: 578\n-        line 395: 596\n-        line 396: 615\n-        line 397: 621\n-        line 401: 654\n-        line 403: 674\n-        line 404: 699\n-        line 408: 726\n+        line 372: 287\n+        line 371: 295\n+        line 374: 299\n+        line 375: 317\n+        line 376: 339\n+        line 377: 359\n+        line 378: 383\n+        line 379: 386\n+        line 380: 402\n+        line 381: 423\n+        line 382: 441\n+        line 384: 457\n+        line 385: 466\n+        line 386: 484\n+        line 385: 499\n+        line 389: 503\n+        line 391: 520\n+        line 392: 542\n+        line 394: 572\n+        line 395: 590\n+        line 396: 609\n+        line 397: 615\n+        line 398: 633\n+        line 397: 641\n+        line 401: 645\n+        line 403: 665\n+        line 404: 690\n+        line 408: 717\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-          246     140     6 vSize   I\n-          460     266     6 resize   I\n-          615     111     7 vSize   I\n-            0     727     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n-            0     727     1  data   [B\n-            0     727     2 offset   I\n-            0     727     3 length   I\n-           13     714     4 ivSize   I\n-          131     596     5 erdSize   I\n+            0     718     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n+            0     718     1  data   [B\n+            0     718     2 offset   I\n+            0     718     3 length   I\n+           13     705     4 ivSize   I\n+          131     587     5 erdSize   I\n+          246     137     6 vSize   I\n+          457     260     6 resize   I\n+          609     108     7 vSize   I\n       StackMapTable: number_of_entries = 5\n         frame_type = 254 /* append */\n-          offset_delta = 302\n+          offset_delta = 299\n           locals = [ int, int, int ]\n         frame_type = 250 /* chop */\n           offset_delta = 86\n         frame_type = 252 /* append */\n-          offset_delta = 119\n+          offset_delta = 116\n           locals = [ int ]\n         frame_type = 252 /* append */\n-          offset_delta = 144\n+          offset_delta = 141\n           locals = [ int ]\n         frame_type = 249 /* chop */\n           offset_delta = 71\n-    Exceptions:\n-      throws java.util.zip.ZipException\n \n   public void parseFromCentralDirectoryData(byte[], int, int) throws java.util.zip.ZipException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.util.zip.ZipException\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: invokespecial #137                // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n+         4: invokespecial #160                // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n          7: aload_0\n          8: aload_1\n          9: iload_2\n         10: iload_3\n-        11: invokevirtual #141                // Method parseCentralDirectoryFormat:([BII)V\n+        11: invokevirtual #162                // Method parseCentralDirectoryFormat:([BII)V\n         14: return\n       LineNumberTable:\n         line 413: 0\n         line 414: 7\n         line 415: 14\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      15     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n             0      15     1  data   [B\n             0      15     2 offset   I\n             0      15     3 length   I\n-    Exceptions:\n-      throws java.util.zip.ZipException\n \n   public void parseFromLocalFileData(byte[], int, int) throws java.util.zip.ZipException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.util.zip.ZipException\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: invokespecial #144                // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromLocalFileData:([BII)V\n+         4: invokespecial #165                // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromLocalFileData:([BII)V\n          7: aload_0\n          8: aload_1\n          9: iload_2\n         10: iload_3\n-        11: invokevirtual #147                // Method parseFileFormat:([BII)V\n+        11: invokevirtual #167                // Method parseFileFormat:([BII)V\n         14: return\n       LineNumberTable:\n         line 420: 0\n         line 421: 7\n         line 422: 14\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      15     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n             0      15     1  data   [B\n             0      15     2 offset   I\n             0      15     3 length   I\n-    Exceptions:\n-      throws java.util.zip.ZipException\n }\n SourceFile: \"X0017_StrongEncryptionHeader.java\"\n InnerClasses:\n-  public static final #173= #68 of #8;    // EncryptionAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-  public static final #174= #85 of #8;    // HashAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  public static final #172= #99 of #3;    // EncryptionAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  public static final #173= #114 of #3;   // HashAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n"}]}
