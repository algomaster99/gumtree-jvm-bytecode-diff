{"diffoscope-json-version": 1, "source1": "first/IOUtils.class", "source2": "second/IOUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package org.apache.commons.io;\n \n-import java.util.function.Supplier;\n import org.apache.commons.io.output.AppendableWriter;\n import java.util.Collection;\n import java.nio.channels.Channels;\n import org.apache.commons.io.function.IOSupplier;\n import org.apache.commons.io.output.StringBuilderWriter;\n import java.io.ByteArrayInputStream;\n import java.io.CharArrayWriter;\n@@ -16,15 +15,14 @@\n import java.util.stream.Collectors;\n import java.util.List;\n import java.io.EOFException;\n import java.nio.ByteBuffer;\n import java.nio.channels.ReadableByteChannel;\n import java.nio.file.Files;\n import java.nio.file.OpenOption;\n-import java.io.File;\n import java.net.URL;\n import java.io.OutputStreamWriter;\n import java.nio.CharBuffer;\n import org.apache.commons.io.input.QueueInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.InputStreamReader;\n import java.nio.charset.Charset;\n@@ -48,14 +46,16 @@\n import java.io.BufferedReader;\n import java.io.Reader;\n import java.io.BufferedOutputStream;\n import java.io.OutputStream;\n import java.util.Objects;\n import java.io.BufferedInputStream;\n import java.io.InputStream;\n+import java.util.function.Supplier;\n+import java.io.File;\n \n public class IOUtils\n {\n     public static final int CR = 13;\n     public static final int DEFAULT_BUFFER_SIZE = 8192;\n     public static final char DIR_SEPARATOR;\n     public static final char DIR_SEPARATOR_UNIX = '/';\n@@ -68,14 +68,26 @@\n     public static final String LINE_SEPARATOR_UNIX;\n     public static final String LINE_SEPARATOR_WINDOWS;\n     private static final ThreadLocal<byte[]> SCRATCH_BYTE_BUFFER_RW;\n     private static final byte[] SCRATCH_BYTE_BUFFER_WO;\n     private static final ThreadLocal<char[]> SCRATCH_CHAR_BUFFER_RW;\n     private static final char[] SCRATCH_CHAR_BUFFER_WO;\n     \n+    static {\n+        DIR_SEPARATOR = File.separatorChar;\n+        EMPTY_BYTE_ARRAY = new byte[0];\n+        LINE_SEPARATOR = System.lineSeparator();\n+        LINE_SEPARATOR_UNIX = StandardLineSeparator.LF.getString();\n+        LINE_SEPARATOR_WINDOWS = StandardLineSeparator.CRLF.getString();\n+        SCRATCH_BYTE_BUFFER_RW = ThreadLocal.withInitial((Supplier<? extends byte[]>)IOUtils::byteArray);\n+        SCRATCH_BYTE_BUFFER_WO = byteArray();\n+        SCRATCH_CHAR_BUFFER_RW = ThreadLocal.withInitial((Supplier<? extends char[]>)IOUtils::charArray);\n+        SCRATCH_CHAR_BUFFER_WO = charArray();\n+    }\n+    \n     public static BufferedInputStream buffer(final InputStream inputStream) {\n         Objects.requireNonNull(inputStream, \"inputStream\");\n         return (inputStream instanceof BufferedInputStream) ? ((BufferedInputStream)inputStream) : new BufferedInputStream(inputStream);\n     }\n     \n     public static BufferedInputStream buffer(final InputStream inputStream, final int size) {\n         Objects.requireNonNull(inputStream, \"inputStream\");\n@@ -404,22 +416,64 @@\n         if (count > 2147483647L) {\n             return -1;\n         }\n         return (int)count;\n     }\n     \n     public static long copy(final URL url, final File file) throws IOException {\n-        try (final OutputStream outputStream = Files.newOutputStream(((File)Objects.requireNonNull(file, \"file\")).toPath(), new OpenOption[0])) {\n-            return copy(url, outputStream);\n+        Throwable t = null;\n+        try {\n+            final OutputStream outputStream = Files.newOutputStream(((File)Objects.requireNonNull(file, \"file\")).toPath(), new OpenOption[0]);\n+            try {\n+                return copy(url, outputStream);\n+            }\n+            finally {\n+                if (outputStream != null) {\n+                    outputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static long copy(final URL url, final OutputStream outputStream) throws IOException {\n-        try (final InputStream inputStream = ((URL)Objects.requireNonNull(url, \"url\")).openStream()) {\n-            return copyLarge(inputStream, outputStream);\n+        Throwable t = null;\n+        try {\n+            final InputStream inputStream = ((URL)Objects.requireNonNull(url, \"url\")).openStream();\n+            try {\n+                return copyLarge(inputStream, outputStream);\n+            }\n+            finally {\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static long copyLarge(final InputStream inputStream, final OutputStream outputStream) throws IOException {\n         return copy(inputStream, outputStream, 8192);\n     }\n     \n@@ -776,20 +830,65 @@\n     }\n     \n     public static BufferedReader toBufferedReader(final Reader reader, final int size) {\n         return (reader instanceof BufferedReader) ? ((BufferedReader)reader) : new BufferedReader(reader, size);\n     }\n     \n     public static byte[] toByteArray(final InputStream inputStream) throws IOException {\n-        try (final UnsynchronizedByteArrayOutputStream ubaOutput = UnsynchronizedByteArrayOutputStream.builder().get();\n-             final ThresholdingOutputStream thresholdOutput = new ThresholdingOutputStream(Integer.MAX_VALUE, os -> {\n-            throw new IllegalArgumentException(String.format(\"Cannot read more than %,d into a byte array\", Integer.valueOf(Integer.MAX_VALUE)));\n-        }, os -> ubaOutput)) {\n-            copy(inputStream, (OutputStream)thresholdOutput);\n-            return ubaOutput.toByteArray();\n+        Throwable t = null;\n+        try {\n+            final UnsynchronizedByteArrayOutputStream ubaOutput = UnsynchronizedByteArrayOutputStream.builder().get();\n+            try {\n+                final ThresholdingOutputStream thresholdOutput = new ThresholdingOutputStream(Integer.MAX_VALUE, os -> {\n+                    throw new IllegalArgumentException(String.format(\"Cannot read more than %,d into a byte array\", Integer.valueOf(Integer.MAX_VALUE)));\n+                }, os -> ubaOutput);\n+                try {\n+                    copy(inputStream, (OutputStream)thresholdOutput);\n+                    final byte[] byteArray = ubaOutput.toByteArray();\n+                    if (thresholdOutput != null) {\n+                        thresholdOutput.close();\n+                    }\n+                    if (ubaOutput != null) {\n+                        ubaOutput.close();\n+                    }\n+                    return byteArray;\n+                }\n+                finally {\n+                    if (thresholdOutput != null) {\n+                        thresholdOutput.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n+                if (ubaOutput != null) {\n+                    ubaOutput.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception2;\n+                t = exception2;\n+            }\n+            else {\n+                final Throwable exception2;\n+                if (t != exception2) {\n+                    t.addSuppressed(exception2);\n+                }\n+            }\n         }\n     }\n     \n     public static byte[] toByteArray(final InputStream input, final int size) throws IOException {\n         if (size < 0) {\n             throw new IllegalArgumentException(\"Size must be equal or greater than zero: \" + size);\n         }\n@@ -815,17 +914,38 @@\n     \n     @Deprecated\n     public static byte[] toByteArray(final Reader reader) throws IOException {\n         return toByteArray(reader, Charset.defaultCharset());\n     }\n     \n     public static byte[] toByteArray(final Reader reader, final Charset charset) throws IOException {\n-        try (final org.apache.commons.io.output.ByteArrayOutputStream output = new org.apache.commons.io.output.ByteArrayOutputStream()) {\n-            copy(reader, (OutputStream)output, charset);\n-            return output.toByteArray();\n+        Throwable t = null;\n+        try {\n+            final org.apache.commons.io.output.ByteArrayOutputStream output = new org.apache.commons.io.output.ByteArrayOutputStream();\n+            try {\n+                copy(reader, (OutputStream)output, charset);\n+                return output.toByteArray();\n+            }\n+            finally {\n+                if (output != null) {\n+                    output.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static byte[] toByteArray(final Reader reader, final String charsetName) throws IOException {\n         return toByteArray(reader, Charsets.toCharset(charsetName));\n     }\n     \n@@ -835,22 +955,64 @@\n     }\n     \n     public static byte[] toByteArray(final URI uri) throws IOException {\n         return toByteArray(uri.toURL());\n     }\n     \n     public static byte[] toByteArray(final URL url) throws IOException {\n-        try (final CloseableURLConnection urlConnection = CloseableURLConnection.open(url)) {\n-            return toByteArray((URLConnection)urlConnection);\n+        Throwable t = null;\n+        try {\n+            final CloseableURLConnection urlConnection = CloseableURLConnection.open(url);\n+            try {\n+                return toByteArray((URLConnection)urlConnection);\n+            }\n+            finally {\n+                if (urlConnection != null) {\n+                    urlConnection.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static byte[] toByteArray(final URLConnection urlConnection) throws IOException {\n-        try (final InputStream inputStream = urlConnection.getInputStream()) {\n-            return toByteArray(inputStream);\n+        Throwable t = null;\n+        try {\n+            final InputStream inputStream = urlConnection.getInputStream();\n+            try {\n+                return toByteArray(inputStream);\n+            }\n+            finally {\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     @Deprecated\n     public static char[] toCharArray(final InputStream inputStream) throws IOException {\n         return toCharArray(inputStream, Charset.defaultCharset());\n     }\n@@ -908,17 +1070,38 @@\n     \n     @Deprecated\n     public static String toString(final InputStream input) throws IOException {\n         return toString(input, Charset.defaultCharset());\n     }\n     \n     public static String toString(final InputStream input, final Charset charset) throws IOException {\n-        try (final StringBuilderWriter sw = new StringBuilderWriter()) {\n-            copy(input, (Writer)sw, charset);\n-            return sw.toString();\n+        Throwable t = null;\n+        try {\n+            final StringBuilderWriter sw = new StringBuilderWriter();\n+            try {\n+                copy(input, (Writer)sw, charset);\n+                return sw.toString();\n+            }\n+            finally {\n+                if (sw != null) {\n+                    sw.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static String toString(final InputStream input, final String charsetName) throws IOException {\n         return toString(input, Charsets.toCharset(charsetName));\n     }\n     \n@@ -928,23 +1111,65 @@\n         }));\n     }\n     \n     public static String toString(final IOSupplier<InputStream> input, final Charset charset, final IOSupplier<String> defaultString) throws IOException {\n         if (input == null) {\n             return (String)defaultString.get();\n         }\n-        try (final InputStream inputStream = (InputStream)input.get()) {\n-            return (inputStream != null) ? toString(inputStream, charset) : ((String)defaultString.get());\n+        Throwable t = null;\n+        try {\n+            final InputStream inputStream = (InputStream)input.get();\n+            try {\n+                return (inputStream != null) ? toString(inputStream, charset) : ((String)defaultString.get());\n+            }\n+            finally {\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static String toString(final Reader reader) throws IOException {\n-        try (final StringBuilderWriter sw = new StringBuilderWriter()) {\n-            copy(reader, (Writer)sw);\n-            return sw.toString();\n+        Throwable t = null;\n+        try {\n+            final StringBuilderWriter sw = new StringBuilderWriter();\n+            try {\n+                copy(reader, (Writer)sw);\n+                return sw.toString();\n+            }\n+            finally {\n+                if (sw != null) {\n+                    sw.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     @Deprecated\n     public static String toString(final URI uri) throws IOException {\n         return toString(uri, Charset.defaultCharset());\n     }\n@@ -959,15 +1184,14 @@\n     \n     @Deprecated\n     public static String toString(final URL url) throws IOException {\n         return toString(url, Charset.defaultCharset());\n     }\n     \n     public static String toString(final URL url, final Charset encoding) throws IOException {\n-        Objects.requireNonNull(url);\n         return toString((IOSupplier<InputStream>)url::openStream, encoding);\n     }\n     \n     public static String toString(final URL url, final String charsetName) throws IOException {\n         return toString(url, Charsets.toCharset(charsetName));\n     }\n     \n@@ -1145,20 +1369,8 @@\n         }\n         return (Writer)new AppendableWriter(appendable);\n     }\n     \n     @Deprecated\n     public IOUtils() {\n     }\n-    \n-    static {\n-        DIR_SEPARATOR = File.separatorChar;\n-        EMPTY_BYTE_ARRAY = new byte[0];\n-        LINE_SEPARATOR = System.lineSeparator();\n-        LINE_SEPARATOR_UNIX = StandardLineSeparator.LF.getString();\n-        LINE_SEPARATOR_WINDOWS = StandardLineSeparator.CRLF.getString();\n-        SCRATCH_BYTE_BUFFER_RW = ThreadLocal.withInitial((Supplier<? extends byte[]>)IOUtils::byteArray);\n-        SCRATCH_BYTE_BUFFER_WO = byteArray();\n-        SCRATCH_CHAR_BUFFER_RW = ThreadLocal.withInitial((Supplier<? extends char[]>)IOUtils::charArray);\n-        SCRATCH_CHAR_BUFFER_WO = charArray();\n-    }\n }\n"}]}
