{"diffoscope-json-version": 1, "source1": "first/DescendingVisitor.class", "source2": "second/DescendingVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,20 +9,20 @@\n     private final Visitor visitor;\n     private final Stack<Object> stack;\n     \n     public Object predecessor() {\n         return this.predecessor(0);\n     }\n     \n-    public Object predecessor(final int level) {\n+    public Object predecessor(final int n) {\n         final int size = this.stack.size();\n-        if (size < 2 || level < 0) {\n+        if (size < 2 || n < 0) {\n             return null;\n         }\n-        return this.stack.elementAt(size - (level + 2));\n+        return this.stack.elementAt(size - (n + 2));\n     }\n     \n     public Object current() {\n         return this.stack.peek();\n     }\n     \n     public DescendingVisitor(final JavaClass clazz, final Visitor visitor) {\n@@ -31,443 +31,426 @@\n         this.visitor = visitor;\n     }\n     \n     public void visit() {\n         this.clazz.accept((Visitor)this);\n     }\n     \n-    public void visitJavaClass(final JavaClass _clazz) {\n-        this.stack.push(_clazz);\n-        _clazz.accept(this.visitor);\n-        final Field[] fields2;\n-        final Field[] fields = fields2 = _clazz.getFields();\n-        for (final Field field : fields2) {\n-            field.accept((Visitor)this);\n+    public void visitJavaClass(final JavaClass item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n+        final Field[] fields = item.getFields();\n+        for (int length = fields.length, i = 0; i < length; ++i) {\n+            fields[i].accept((Visitor)this);\n         }\n-        final Method[] methods2;\n-        final Method[] methods = methods2 = _clazz.getMethods();\n-        for (final Method method : methods2) {\n-            method.accept((Visitor)this);\n+        final Method[] methods = item.getMethods();\n+        for (int length2 = methods.length, j = 0; j < length2; ++j) {\n+            methods[j].accept((Visitor)this);\n         }\n-        final Attribute[] attributes2;\n-        final Attribute[] attributes = attributes2 = _clazz.getAttributes();\n-        for (final Attribute attribute : attributes2) {\n-            attribute.accept((Visitor)this);\n+        final Attribute[] attributes = item.getAttributes();\n+        for (int length3 = attributes.length, k = 0; k < length3; ++k) {\n+            attributes[k].accept((Visitor)this);\n         }\n-        _clazz.getConstantPool().accept((Visitor)this);\n+        item.getConstantPool().accept((Visitor)this);\n         this.stack.pop();\n     }\n     \n-    public void visitAnnotation(final Annotations annotation) {\n-        this.stack.push(annotation);\n-        annotation.accept(this.visitor);\n-        final AnnotationEntry[] annotationEntries;\n-        final AnnotationEntry[] entries = annotationEntries = annotation.getAnnotationEntries();\n-        for (final AnnotationEntry entrie : annotationEntries) {\n-            entrie.accept((Visitor)this);\n+    public void visitAnnotation(final Annotations item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n+        final AnnotationEntry[] annotationEntries = item.getAnnotationEntries();\n+        for (int length = annotationEntries.length, i = 0; i < length; ++i) {\n+            annotationEntries[i].accept((Visitor)this);\n         }\n         this.stack.pop();\n     }\n     \n-    public void visitAnnotationEntry(final AnnotationEntry annotationEntry) {\n-        this.stack.push(annotationEntry);\n-        annotationEntry.accept(this.visitor);\n+    public void visitAnnotationEntry(final AnnotationEntry item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitField(final Field field) {\n-        this.stack.push(field);\n-        field.accept(this.visitor);\n-        final Attribute[] attributes2;\n-        final Attribute[] attributes = attributes2 = field.getAttributes();\n-        for (final Attribute attribute : attributes2) {\n-            attribute.accept((Visitor)this);\n+    public void visitField(final Field item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n+        final Attribute[] attributes = item.getAttributes();\n+        for (int length = attributes.length, i = 0; i < length; ++i) {\n+            attributes[i].accept((Visitor)this);\n         }\n         this.stack.pop();\n     }\n     \n-    public void visitConstantValue(final ConstantValue cv) {\n-        this.stack.push(cv);\n-        cv.accept(this.visitor);\n+    public void visitConstantValue(final ConstantValue item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitMethod(final Method method) {\n-        this.stack.push(method);\n-        method.accept(this.visitor);\n-        final Attribute[] attributes2;\n-        final Attribute[] attributes = attributes2 = method.getAttributes();\n-        for (final Attribute attribute : attributes2) {\n-            attribute.accept((Visitor)this);\n+    public void visitMethod(final Method item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n+        final Attribute[] attributes = item.getAttributes();\n+        for (int length = attributes.length, i = 0; i < length; ++i) {\n+            attributes[i].accept((Visitor)this);\n         }\n         this.stack.pop();\n     }\n     \n-    public void visitExceptionTable(final ExceptionTable table) {\n-        this.stack.push(table);\n-        table.accept(this.visitor);\n+    public void visitExceptionTable(final ExceptionTable item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitCode(final Code code) {\n-        this.stack.push(code);\n-        code.accept(this.visitor);\n-        final CodeException[] exceptionTable;\n-        final CodeException[] table = exceptionTable = code.getExceptionTable();\n-        for (final CodeException element : exceptionTable) {\n-            element.accept((Visitor)this);\n+    public void visitCode(final Code item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n+        final CodeException[] exceptionTable = item.getExceptionTable();\n+        for (int length = exceptionTable.length, i = 0; i < length; ++i) {\n+            exceptionTable[i].accept((Visitor)this);\n         }\n-        final Attribute[] attributes2;\n-        final Attribute[] attributes = attributes2 = code.getAttributes();\n-        for (final Attribute attribute : attributes2) {\n-            attribute.accept((Visitor)this);\n+        final Attribute[] attributes = item.getAttributes();\n+        for (int length2 = attributes.length, j = 0; j < length2; ++j) {\n+            attributes[j].accept((Visitor)this);\n         }\n         this.stack.pop();\n     }\n     \n-    public void visitCodeException(final CodeException ce) {\n-        this.stack.push(ce);\n-        ce.accept(this.visitor);\n+    public void visitCodeException(final CodeException item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitLineNumberTable(final LineNumberTable table) {\n-        this.stack.push(table);\n-        table.accept(this.visitor);\n-        final LineNumber[] lineNumberTable;\n-        final LineNumber[] numbers = lineNumberTable = table.getLineNumberTable();\n-        for (final LineNumber number : lineNumberTable) {\n-            number.accept((Visitor)this);\n+    public void visitLineNumberTable(final LineNumberTable item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n+        final LineNumber[] lineNumberTable = item.getLineNumberTable();\n+        for (int length = lineNumberTable.length, i = 0; i < length; ++i) {\n+            lineNumberTable[i].accept((Visitor)this);\n         }\n         this.stack.pop();\n     }\n     \n-    public void visitLineNumber(final LineNumber number) {\n-        this.stack.push(number);\n-        number.accept(this.visitor);\n+    public void visitLineNumber(final LineNumber item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitLocalVariableTable(final LocalVariableTable table) {\n-        this.stack.push(table);\n-        table.accept(this.visitor);\n-        final LocalVariable[] localVariableTable;\n-        final LocalVariable[] vars = localVariableTable = table.getLocalVariableTable();\n-        for (final LocalVariable var : localVariableTable) {\n-            var.accept((Visitor)this);\n+    public void visitLocalVariableTable(final LocalVariableTable item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n+        final LocalVariable[] localVariableTable = item.getLocalVariableTable();\n+        for (int length = localVariableTable.length, i = 0; i < length; ++i) {\n+            localVariableTable[i].accept((Visitor)this);\n         }\n         this.stack.pop();\n     }\n     \n-    public void visitStackMap(final StackMap table) {\n-        this.stack.push(table);\n-        table.accept(this.visitor);\n-        final StackMapEntry[] stackMap;\n-        final StackMapEntry[] vars = stackMap = table.getStackMap();\n-        for (final StackMapEntry var : stackMap) {\n-            var.accept((Visitor)this);\n+    public void visitStackMap(final StackMap item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n+        final StackMapEntry[] stackMap = item.getStackMap();\n+        for (int length = stackMap.length, i = 0; i < length; ++i) {\n+            stackMap[i].accept((Visitor)this);\n         }\n         this.stack.pop();\n     }\n     \n-    public void visitStackMapEntry(final StackMapEntry var) {\n-        this.stack.push(var);\n-        var.accept(this.visitor);\n+    public void visitStackMapEntry(final StackMapEntry item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitLocalVariable(final LocalVariable var) {\n-        this.stack.push(var);\n-        var.accept(this.visitor);\n+    public void visitLocalVariable(final LocalVariable item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantPool(final ConstantPool cp) {\n-        this.stack.push(cp);\n-        cp.accept(this.visitor);\n-        final Constant[] constants = cp.getConstantPool();\n-        for (int i = 1; i < constants.length; ++i) {\n-            if (constants[i] != null) {\n-                constants[i].accept((Visitor)this);\n+    public void visitConstantPool(final ConstantPool item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n+        final Constant[] constantPool = item.getConstantPool();\n+        for (int i = 1; i < constantPool.length; ++i) {\n+            if (constantPool[i] != null) {\n+                constantPool[i].accept((Visitor)this);\n             }\n         }\n         this.stack.pop();\n     }\n     \n-    public void visitConstantClass(final ConstantClass constant) {\n-        this.stack.push(constant);\n-        constant.accept(this.visitor);\n+    public void visitConstantClass(final ConstantClass item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantDouble(final ConstantDouble constant) {\n-        this.stack.push(constant);\n-        constant.accept(this.visitor);\n+    public void visitConstantDouble(final ConstantDouble item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantFieldref(final ConstantFieldref constant) {\n-        this.stack.push(constant);\n-        constant.accept(this.visitor);\n+    public void visitConstantFieldref(final ConstantFieldref item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantFloat(final ConstantFloat constant) {\n-        this.stack.push(constant);\n-        constant.accept(this.visitor);\n+    public void visitConstantFloat(final ConstantFloat item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantInteger(final ConstantInteger constant) {\n-        this.stack.push(constant);\n-        constant.accept(this.visitor);\n+    public void visitConstantInteger(final ConstantInteger item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantInterfaceMethodref(final ConstantInterfaceMethodref constant) {\n-        this.stack.push(constant);\n-        constant.accept(this.visitor);\n+    public void visitConstantInterfaceMethodref(final ConstantInterfaceMethodref item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantInvokeDynamic(final ConstantInvokeDynamic constant) {\n-        this.stack.push(constant);\n-        constant.accept(this.visitor);\n+    public void visitConstantInvokeDynamic(final ConstantInvokeDynamic item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantLong(final ConstantLong constant) {\n-        this.stack.push(constant);\n-        constant.accept(this.visitor);\n+    public void visitConstantLong(final ConstantLong item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantMethodref(final ConstantMethodref constant) {\n-        this.stack.push(constant);\n-        constant.accept(this.visitor);\n+    public void visitConstantMethodref(final ConstantMethodref item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantNameAndType(final ConstantNameAndType constant) {\n-        this.stack.push(constant);\n-        constant.accept(this.visitor);\n+    public void visitConstantNameAndType(final ConstantNameAndType item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantString(final ConstantString constant) {\n-        this.stack.push(constant);\n-        constant.accept(this.visitor);\n+    public void visitConstantString(final ConstantString item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantUtf8(final ConstantUtf8 constant) {\n-        this.stack.push(constant);\n-        constant.accept(this.visitor);\n+    public void visitConstantUtf8(final ConstantUtf8 item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitInnerClasses(final InnerClasses ic) {\n-        this.stack.push(ic);\n-        ic.accept(this.visitor);\n-        final InnerClass[] innerClasses;\n-        final InnerClass[] ics = innerClasses = ic.getInnerClasses();\n-        for (final InnerClass ic2 : innerClasses) {\n-            ic2.accept((Visitor)this);\n+    public void visitInnerClasses(final InnerClasses item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n+        final InnerClass[] innerClasses = item.getInnerClasses();\n+        for (int length = innerClasses.length, i = 0; i < length; ++i) {\n+            innerClasses[i].accept((Visitor)this);\n         }\n         this.stack.pop();\n     }\n     \n-    public void visitInnerClass(final InnerClass inner) {\n-        this.stack.push(inner);\n-        inner.accept(this.visitor);\n+    public void visitInnerClass(final InnerClass item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitBootstrapMethods(final BootstrapMethods bm) {\n-        this.stack.push(bm);\n-        bm.accept(this.visitor);\n+    public void visitBootstrapMethods(final BootstrapMethods item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitDeprecated(final Deprecated attribute) {\n-        this.stack.push(attribute);\n-        attribute.accept(this.visitor);\n+    public void visitDeprecated(final Deprecated item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitSignature(final Signature attribute) {\n-        this.stack.push(attribute);\n-        attribute.accept(this.visitor);\n+    public void visitSignature(final Signature item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitSourceFile(final SourceFile attribute) {\n-        this.stack.push(attribute);\n-        attribute.accept(this.visitor);\n+    public void visitSourceFile(final SourceFile item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitSynthetic(final Synthetic attribute) {\n-        this.stack.push(attribute);\n-        attribute.accept(this.visitor);\n+    public void visitSynthetic(final Synthetic item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitUnknown(final Unknown attribute) {\n-        this.stack.push(attribute);\n-        attribute.accept(this.visitor);\n+    public void visitUnknown(final Unknown item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitAnnotationDefault(final AnnotationDefault obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitAnnotationDefault(final AnnotationDefault item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitEnclosingMethod(final EnclosingMethod obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitEnclosingMethod(final EnclosingMethod item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitLocalVariableTypeTable(final LocalVariableTypeTable obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitLocalVariableTypeTable(final LocalVariableTypeTable item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitParameterAnnotation(final ParameterAnnotations obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitParameterAnnotation(final ParameterAnnotations item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitMethodParameters(final MethodParameters obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n-        final MethodParameter[] parameters;\n-        final MethodParameter[] table = parameters = obj.getParameters();\n-        for (final MethodParameter element : parameters) {\n-            element.accept((Visitor)this);\n+    public void visitMethodParameters(final MethodParameters item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n+        final MethodParameter[] parameters = item.getParameters();\n+        for (int length = parameters.length, i = 0; i < length; ++i) {\n+            parameters[i].accept((Visitor)this);\n         }\n         this.stack.pop();\n     }\n     \n-    public void visitMethodParameter(final MethodParameter obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitMethodParameter(final MethodParameter item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantMethodType(final ConstantMethodType obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitConstantMethodType(final ConstantMethodType item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantMethodHandle(final ConstantMethodHandle obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitConstantMethodHandle(final ConstantMethodHandle item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitParameterAnnotationEntry(final ParameterAnnotationEntry obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitParameterAnnotationEntry(final ParameterAnnotationEntry item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantPackage(final ConstantPackage obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitConstantPackage(final ConstantPackage item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantModule(final ConstantModule obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitConstantModule(final ConstantModule item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitConstantDynamic(final ConstantDynamic obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitConstantDynamic(final ConstantDynamic item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitModule(final Module obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n-        final ModuleRequires[] requiresTable;\n-        final ModuleRequires[] rtable = requiresTable = obj.getRequiresTable();\n-        for (final ModuleRequires element : requiresTable) {\n-            element.accept((Visitor)this);\n+    public void visitModule(final Module item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n+        final ModuleRequires[] requiresTable = item.getRequiresTable();\n+        for (int length = requiresTable.length, i = 0; i < length; ++i) {\n+            requiresTable[i].accept((Visitor)this);\n         }\n-        final ModuleExports[] exportsTable;\n-        final ModuleExports[] etable = exportsTable = obj.getExportsTable();\n-        for (final ModuleExports element2 : exportsTable) {\n-            element2.accept((Visitor)this);\n+        final ModuleExports[] exportsTable = item.getExportsTable();\n+        for (int length2 = exportsTable.length, j = 0; j < length2; ++j) {\n+            exportsTable[j].accept((Visitor)this);\n         }\n         this.stack.pop();\n-        final ModuleOpens[] opensTable;\n-        final ModuleOpens[] otable = opensTable = obj.getOpensTable();\n-        for (final ModuleOpens element3 : opensTable) {\n-            element3.accept((Visitor)this);\n+        final ModuleOpens[] opensTable = item.getOpensTable();\n+        for (int length3 = opensTable.length, k = 0; k < length3; ++k) {\n+            opensTable[k].accept((Visitor)this);\n         }\n         this.stack.pop();\n-        final ModuleProvides[] providesTable;\n-        final ModuleProvides[] ptable = providesTable = obj.getProvidesTable();\n-        for (final ModuleProvides element4 : providesTable) {\n-            element4.accept((Visitor)this);\n+        final ModuleProvides[] providesTable = item.getProvidesTable();\n+        for (int length4 = providesTable.length, l = 0; l < length4; ++l) {\n+            providesTable[l].accept((Visitor)this);\n         }\n         this.stack.pop();\n     }\n     \n-    public void visitModuleRequires(final ModuleRequires obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitModuleRequires(final ModuleRequires item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitModuleExports(final ModuleExports obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitModuleExports(final ModuleExports item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitModuleOpens(final ModuleOpens obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitModuleOpens(final ModuleOpens item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitModuleProvides(final ModuleProvides obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitModuleProvides(final ModuleProvides item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitModulePackages(final ModulePackages obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitModulePackages(final ModulePackages item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitModuleMainClass(final ModuleMainClass obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitModuleMainClass(final ModuleMainClass item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitNestHost(final NestHost obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitNestHost(final NestHost item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n     \n-    public void visitNestMembers(final NestMembers obj) {\n-        this.stack.push(obj);\n-        obj.accept(this.visitor);\n+    public void visitNestMembers(final NestMembers item) {\n+        this.stack.push(item);\n+        item.accept(this.visitor);\n         this.stack.pop();\n     }\n }\n"}]}
