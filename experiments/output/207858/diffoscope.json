{"diffoscope-json-version": 1, "source1": "first/ProxyOutputStream.class", "source2": "second/ProxyOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,73 +5,73 @@\n import org.apache.commons.io.IOUtils;\n import java.io.IOException;\n import java.io.OutputStream;\n import java.io.FilterOutputStream;\n \n public class ProxyOutputStream extends FilterOutputStream\n {\n-    public ProxyOutputStream(final OutputStream proxy) {\n-        super(proxy);\n+    public ProxyOutputStream(final OutputStream out) {\n+        super(out);\n     }\n     \n     @Override\n-    public void write(final int idx) throws IOException {\n+    public void write(final int n) throws IOException {\n         try {\n             this.beforeWrite(1);\n-            this.out.write(idx);\n+            this.out.write(n);\n             this.afterWrite(1);\n         }\n-        catch (final IOException e) {\n-            this.handleIOException(e);\n+        catch (final IOException ex) {\n+            this.handleIOException(ex);\n         }\n     }\n     \n     @Override\n-    public void write(final byte[] bts) throws IOException {\n+    public void write(final byte[] b) throws IOException {\n         try {\n-            final int len = IOUtils.length(bts);\n-            this.beforeWrite(len);\n-            this.out.write(bts);\n-            this.afterWrite(len);\n+            final int length = IOUtils.length(b);\n+            this.beforeWrite(length);\n+            this.out.write(b);\n+            this.afterWrite(length);\n         }\n-        catch (final IOException e) {\n-            this.handleIOException(e);\n+        catch (final IOException ex) {\n+            this.handleIOException(ex);\n         }\n     }\n     \n     @Override\n-    public void write(final byte[] bts, final int st, final int end) throws IOException {\n+    public void write(final byte[] b, final int off, final int len) throws IOException {\n         try {\n-            this.beforeWrite(end);\n-            this.out.write(bts, st, end);\n-            this.afterWrite(end);\n+            this.beforeWrite(len);\n+            this.out.write(b, off, len);\n+            this.afterWrite(len);\n         }\n-        catch (final IOException e) {\n-            this.handleIOException(e);\n+        catch (final IOException ex) {\n+            this.handleIOException(ex);\n         }\n     }\n     \n     @Override\n     public void flush() throws IOException {\n         try {\n             this.out.flush();\n         }\n-        catch (final IOException e) {\n-            this.handleIOException(e);\n+        catch (final IOException ex) {\n+            this.handleIOException(ex);\n         }\n     }\n     \n     @Override\n     public void close() throws IOException {\n         IOUtils.close((Closeable)this.out, this::handleIOException);\n     }\n     \n     protected void beforeWrite(final int n) throws IOException {\n     }\n     \n     protected void afterWrite(final int n) throws IOException {\n     }\n     \n-    protected void handleIOException(final IOException e) throws IOException {\n-        throw e;\n+    protected void handleIOException(final IOException ex) throws IOException {\n+        throw ex;\n     }\n }\n"}]}
