{"diffoscope-json-version": 1, "source1": "first/Coders$BCJDecoder.class", "source2": "second/Coders$BCJDecoder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,20 +14,20 @@\n     private final FilterOptions opts;\n     \n     BCJDecoder(final FilterOptions opts) {\n         super(new Class[0]);\n         this.opts = opts;\n     }\n     \n-    InputStream decode(final String archiveName, final InputStream in, final long uncompressedLength, final Coder coder, final byte[] password) throws IOException {\n+    InputStream decode(final String str, final InputStream inputStream, final long n, final Coder coder, final byte[] array) throws IOException {\n         try {\n-            return this.opts.getInputStream(in);\n+            return this.opts.getInputStream(inputStream);\n         }\n-        catch (final AssertionError e) {\n-            throw new IOException(\"BCJ filter used in \" + archiveName + \" needs XZ for Java > 1.4 - see http://commons.apache.org/proper/commons-compress/limitations.html#7Z\", e);\n+        catch (final AssertionError cause) {\n+            throw new IOException(\"BCJ filter used in \" + str + \" needs XZ for Java > 1.4 - see http://commons.apache.org/proper/commons-compress/limitations.html#7Z\", cause);\n         }\n     }\n     \n-    OutputStream encode(final OutputStream out, final Object options) {\n-        return (OutputStream)new FlushShieldFilterOutputStream((OutputStream)this.opts.getOutputStream((FinishableOutputStream)new FinishableWrapperOutputStream(out)));\n+    OutputStream encode(final OutputStream outputStream, final Object o) {\n+        return (OutputStream)new FlushShieldFilterOutputStream((OutputStream)this.opts.getOutputStream((FinishableOutputStream)new FinishableWrapperOutputStream(outputStream)));\n     }\n }\n"}]}
