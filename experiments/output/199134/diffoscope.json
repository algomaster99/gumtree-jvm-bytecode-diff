{"diffoscope-json-version": 1, "source1": "first/EnumElementValueGen.class", "source2": "second/EnumElementValueGen.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,55 +8,54 @@\n import org.apache.bcel.classfile.ElementValue;\n \n public class EnumElementValueGen extends ElementValueGen\n {\n     private int typeIdx;\n     private int valueIdx;\n     \n-    protected EnumElementValueGen(final int typeIdx, final int valueIdx, final ConstantPoolGen cpool) {\n-        super(101, cpool);\n+    protected EnumElementValueGen(final int typeIdx, final int valueIdx, final ConstantPoolGen constantPoolGen) {\n+        super(101, constantPoolGen);\n         if (super.getElementValueType() != 101) {\n             throw new IllegalArgumentException(\"Only element values of type enum can be built with this ctor - type specified: \" + super.getElementValueType());\n         }\n         this.typeIdx = typeIdx;\n         this.valueIdx = valueIdx;\n     }\n     \n     public ElementValue getElementValue() {\n         System.err.println(\"Duplicating value: \" + this.getEnumTypeString() + \":\" + this.getEnumValueString());\n         return (ElementValue)new EnumElementValue(super.getElementValueType(), this.typeIdx, this.valueIdx, this.getConstantPool().getConstantPool());\n     }\n     \n-    public EnumElementValueGen(final ObjectType t, final String value, final ConstantPoolGen cpool) {\n-        super(101, cpool);\n-        this.typeIdx = cpool.addUtf8(t.getSignature());\n-        this.valueIdx = cpool.addUtf8(value);\n+    public EnumElementValueGen(final ObjectType objectType, final String s, final ConstantPoolGen constantPoolGen) {\n+        super(101, constantPoolGen);\n+        this.typeIdx = constantPoolGen.addUtf8(objectType.getSignature());\n+        this.valueIdx = constantPoolGen.addUtf8(s);\n     }\n     \n-    public EnumElementValueGen(final EnumElementValue value, final ConstantPoolGen cpool, final boolean copyPoolEntries) {\n-        super(101, cpool);\n-        if (copyPoolEntries) {\n-            this.typeIdx = cpool.addUtf8(value.getEnumTypeString());\n-            this.valueIdx = cpool.addUtf8(value.getEnumValueString());\n+    public EnumElementValueGen(final EnumElementValue enumElementValue, final ConstantPoolGen constantPoolGen, final boolean b) {\n+        super(101, constantPoolGen);\n+        if (b) {\n+            this.typeIdx = constantPoolGen.addUtf8(enumElementValue.getEnumTypeString());\n+            this.valueIdx = constantPoolGen.addUtf8(enumElementValue.getEnumValueString());\n         }\n         else {\n-            this.typeIdx = value.getTypeIndex();\n-            this.valueIdx = value.getValueIndex();\n+            this.typeIdx = enumElementValue.getTypeIndex();\n+            this.valueIdx = enumElementValue.getValueIndex();\n         }\n     }\n     \n-    public void dump(final DataOutputStream dos) throws IOException {\n-        dos.writeByte(super.getElementValueType());\n-        dos.writeShort(this.typeIdx);\n-        dos.writeShort(this.valueIdx);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeByte(super.getElementValueType());\n+        dataOutputStream.writeShort(this.typeIdx);\n+        dataOutputStream.writeShort(this.valueIdx);\n     }\n     \n     public String stringifyValue() {\n-        final ConstantUtf8 cu8 = (ConstantUtf8)this.getConstantPool().getConstant(this.valueIdx);\n-        return cu8.getBytes();\n+        return ((ConstantUtf8)this.getConstantPool().getConstant(this.valueIdx)).getBytes();\n     }\n     \n     public String getEnumTypeString() {\n         return ((ConstantUtf8)this.getConstantPool().getConstant(this.typeIdx)).getBytes();\n     }\n     \n     public String getEnumValueString() {\n"}]}
