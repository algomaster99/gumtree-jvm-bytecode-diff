{"diffoscope-json-version": 1, "source1": "first/LineNumberTable.class", "source2": "second/LineNumberTable.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,110 +6,111 @@\n import java.io.DataInput;\n \n public final class LineNumberTable extends Attribute\n {\n     private static final int MAX_LINE_LENGTH = 72;\n     private LineNumber[] lineNumberTable;\n     \n-    public LineNumberTable(final LineNumberTable c) {\n-        this(c.getNameIndex(), c.getLength(), c.getLineNumberTable(), c.getConstantPool());\n+    public LineNumberTable(final LineNumberTable lineNumberTable) {\n+        this(lineNumberTable.getNameIndex(), lineNumberTable.getLength(), lineNumberTable.getLineNumberTable(), lineNumberTable.getConstantPool());\n     }\n     \n-    public LineNumberTable(final int name_index, final int length, final LineNumber[] line_number_table, final ConstantPool constant_pool) {\n-        super((byte)4, name_index, length, constant_pool);\n-        this.lineNumberTable = line_number_table;\n+    public LineNumberTable(final int n, final int n2, final LineNumber[] lineNumberTable, final ConstantPool constantPool) {\n+        super((byte)4, n, n2, constantPool);\n+        this.lineNumberTable = lineNumberTable;\n     }\n     \n-    LineNumberTable(final int name_index, final int length, final DataInput input, final ConstantPool constant_pool) throws IOException {\n-        this(name_index, length, (LineNumber[])null, constant_pool);\n-        final int line_number_table_length = input.readUnsignedShort();\n-        this.lineNumberTable = new LineNumber[line_number_table_length];\n-        for (int i = 0; i < line_number_table_length; ++i) {\n-            this.lineNumberTable[i] = new LineNumber(input);\n+    LineNumberTable(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, n2, (LineNumber[])null, constantPool);\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        this.lineNumberTable = new LineNumber[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n+            this.lineNumberTable[i] = new LineNumber(dataInput);\n         }\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitLineNumberTable(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitLineNumberTable(this);\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n-        file.writeShort(this.lineNumberTable.length);\n-        for (final LineNumber lineNumber : this.lineNumberTable) {\n-            lineNumber.dump(file);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeShort(this.lineNumberTable.length);\n+        final LineNumber[] lineNumberTable = this.lineNumberTable;\n+        for (int length = lineNumberTable.length, i = 0; i < length; ++i) {\n+            lineNumberTable[i].dump(dataOutputStream);\n         }\n     }\n     \n     public LineNumber[] getLineNumberTable() {\n         return this.lineNumberTable;\n     }\n     \n     public void setLineNumberTable(final LineNumber[] lineNumberTable) {\n         this.lineNumberTable = lineNumberTable;\n     }\n     \n     public String toString() {\n-        final StringBuilder buf = new StringBuilder();\n-        final StringBuilder line = new StringBuilder();\n-        final String newLine = System.getProperty(\"line.separator\", \"\\n\");\n+        final StringBuilder sb = new StringBuilder();\n+        final StringBuilder sb2 = new StringBuilder();\n+        final String property = System.getProperty(\"line.separator\", \"\\n\");\n         for (int i = 0; i < this.lineNumberTable.length; ++i) {\n-            line.append(this.lineNumberTable[i].toString());\n+            sb2.append(this.lineNumberTable[i].toString());\n             if (i < this.lineNumberTable.length - 1) {\n-                line.append(\", \");\n+                sb2.append(\", \");\n             }\n-            if (line.length() > 72 && i < this.lineNumberTable.length - 1) {\n-                line.append(newLine);\n-                buf.append((CharSequence)line);\n-                line.setLength();\n+            if (sb2.length() > 72 && i < this.lineNumberTable.length - 1) {\n+                sb2.append(property);\n+                sb.append((CharSequence)sb2);\n+                sb2.setLength();\n             }\n         }\n-        buf.append((CharSequence)line);\n-        return buf.toString();\n+        sb.append((CharSequence)sb2);\n+        return sb.toString();\n     }\n     \n-    public int getSourceLine(final int pos) {\n-        int l = 0;\n-        int r = this.lineNumberTable.length - 1;\n-        if (r < 0) {\n+    public int getSourceLine(final int n) {\n+        int i = 0;\n+        int n2 = this.lineNumberTable.length - 1;\n+        if (n2 < 0) {\n             return -1;\n         }\n-        int min_index = -1;\n-        int min = -1;\n+        int n3 = -1;\n+        int n4 = -1;\n         do {\n-            final int i = l + r >>> 1;\n-            final int j = this.lineNumberTable[i].getStartPC();\n-            if (j == pos) {\n-                return this.lineNumberTable[i].getLineNumber();\n+            final int n5 = i + n2 >>> 1;\n+            final int startPC = this.lineNumberTable[n5].getStartPC();\n+            if (startPC == n) {\n+                return this.lineNumberTable[n5].getLineNumber();\n             }\n-            if (pos < j) {\n-                r = i - 1;\n+            if (n < startPC) {\n+                n2 = n5 - 1;\n             }\n             else {\n-                l = i + 1;\n+                i = n5 + 1;\n             }\n-            if (j >= pos || j <= min) {\n+            if (startPC >= n || startPC <= n4) {\n                 continue;\n             }\n-            min = j;\n-            min_index = i;\n-        } while (l <= r);\n-        if (min_index < 0) {\n+            n4 = startPC;\n+            n3 = n5;\n+        } while (i <= n2);\n+        if (n3 < 0) {\n             return -1;\n         }\n-        return this.lineNumberTable[min_index].getLineNumber();\n+        return this.lineNumberTable[n3].getLineNumber();\n     }\n     \n-    public Attribute copy(final ConstantPool _constant_pool) {\n-        final LineNumberTable c = (LineNumberTable)this.clone();\n-        c.lineNumberTable = new LineNumber[this.lineNumberTable.length];\n+    public Attribute copy(final ConstantPool constantPool) {\n+        final LineNumberTable lineNumberTable = (LineNumberTable)this.clone();\n+        lineNumberTable.lineNumberTable = new LineNumber[this.lineNumberTable.length];\n         for (int i = 0; i < this.lineNumberTable.length; ++i) {\n-            c.lineNumberTable[i] = this.lineNumberTable[i].copy();\n+            lineNumberTable.lineNumberTable[i] = this.lineNumberTable[i].copy();\n         }\n-        c.setConstantPool(_constant_pool);\n-        return c;\n+        lineNumberTable.setConstantPool(constantPool);\n+        return lineNumberTable;\n     }\n     \n     public int getTableLength() {\n         return (this.lineNumberTable == null) ? 0 : this.lineNumberTable.length;\n     }\n }\n"}]}
