{"diffoscope-json-version": 1, "source1": "first/ReversedLinesFileReader$FilePart.class", "source2": "second/ReversedLinesFileReader$FilePart.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,96 +8,94 @@\n private class FilePart\n {\n     private final long no;\n     private final byte[] data;\n     private byte[] leftOver;\n     private int currentLastBytePos;\n     \n-    private FilePart(final ReversedLinesFileReader this$0, final long no, final int length, final byte[] leftOverOfLastFilePart) throws IOException {\n+    private FilePart(final ReversedLinesFileReader this$0, final long no, final int length, final byte[] array) throws IOException {\n         this.this$0 = this$0;\n         this.no = no;\n-        final int dataLength = length + ((leftOverOfLastFilePart != null) ? leftOverOfLastFilePart.length : 0);\n-        this.data = new byte[dataLength];\n-        final long off = (no - 1L) * ReversedLinesFileReader.access$000(this$0);\n+        this.data = new byte[length + ((array != null) ? array.length : 0)];\n+        final long n = (no - 1L) * ReversedLinesFileReader.access$000(this$0);\n         if (no > 0L) {\n-            ReversedLinesFileReader.access$100(this$0).position(off);\n-            final int countRead = ReversedLinesFileReader.access$100(this$0).read(ByteBuffer.wrap(this.data, 0, length));\n-            if (countRead != length) {\n+            ReversedLinesFileReader.access$100(this$0).position(n);\n+            if (ReversedLinesFileReader.access$100(this$0).read(ByteBuffer.wrap(this.data, 0, length)) != length) {\n                 throw new IllegalStateException(\"Count of requested bytes and actually read bytes don't match\");\n             }\n         }\n-        if (leftOverOfLastFilePart != null) {\n-            System.arraycopy(leftOverOfLastFilePart, 0, this.data, length, leftOverOfLastFilePart.length);\n+        if (array != null) {\n+            System.arraycopy(array, 0, this.data, length, array.length);\n         }\n         this.currentLastBytePos = this.data.length - 1;\n         this.leftOver = null;\n     }\n     \n     private void createLeftOver() {\n-        final int lineLengthBytes = this.currentLastBytePos + 1;\n-        if (lineLengthBytes > 0) {\n-            this.leftOver = IOUtils.byteArray(lineLengthBytes);\n-            System.arraycopy(this.data, 0, this.leftOver, 0, lineLengthBytes);\n+        final int n = this.currentLastBytePos + 1;\n+        if (n > 0) {\n+            this.leftOver = IOUtils.byteArray(n);\n+            System.arraycopy(this.data, 0, this.leftOver, 0, n);\n         }\n         else {\n             this.leftOver = null;\n         }\n         this.currentLastBytePos = -1;\n     }\n     \n-    private int getNewLineMatchByteCount(final byte[] data, final int i) {\n-        for (final byte[] newLineSequence : ReversedLinesFileReader.access$200(this.this$0)) {\n-            boolean match = true;\n-            for (int j = newLineSequence.length - 1; j >= 0; --j) {\n-                final int k = i + j - (newLineSequence.length - 1);\n-                match &= (k >= 0 && data[k] == newLineSequence[j]);\n+    private int getNewLineMatchByteCount(final byte[] array, final int n) {\n+        for (final byte[] array2 : ReversedLinesFileReader.access$200(this.this$0)) {\n+            boolean b = true;\n+            for (int j = array2.length - 1; j >= 0; --j) {\n+                final int n2 = n + j - (array2.length - 1);\n+                b &= (n2 >= 0 && array[n2] == array2[j]);\n             }\n-            if (match) {\n-                return newLineSequence.length;\n+            if (b) {\n+                return array2.length;\n             }\n         }\n         return 0;\n     }\n     \n     private String readLine() {\n-        String line = null;\n-        final boolean isLastFilePart = this.no == 1L;\n+        String s = null;\n+        final boolean b = this.no == 1L;\n         int i = this.currentLastBytePos;\n         while (i > -1) {\n-            if (!isLastFilePart && i < ReversedLinesFileReader.access$300(this.this$0)) {\n+            if (!b && i < ReversedLinesFileReader.access$300(this.this$0)) {\n                 this.createLeftOver();\n                 break;\n             }\n             final int newLineMatchByteCount;\n             if ((newLineMatchByteCount = this.getNewLineMatchByteCount(this.data, i)) > 0) {\n-                final int lineStart = i + 1;\n-                final int lineLengthBytes = this.currentLastBytePos - lineStart + 1;\n-                if (lineLengthBytes < 0) {\n-                    throw new IllegalStateException(\"Unexpected negative line length=\" + lineLengthBytes);\n+                final int n = i + 1;\n+                final int j = this.currentLastBytePos - n + 1;\n+                if (j < 0) {\n+                    throw new IllegalStateException(\"Unexpected negative line length=\" + j);\n                 }\n-                final byte[] lineData = IOUtils.byteArray(lineLengthBytes);\n-                System.arraycopy(this.data, lineStart, lineData, 0, lineLengthBytes);\n-                line = new String(lineData, ReversedLinesFileReader.access$400(this.this$0));\n+                final byte[] byteArray = IOUtils.byteArray(j);\n+                System.arraycopy(this.data, n, byteArray, 0, j);\n+                s = new String(byteArray, ReversedLinesFileReader.access$400(this.this$0));\n                 this.currentLastBytePos = i - newLineMatchByteCount;\n                 break;\n             }\n             else {\n                 i -= ReversedLinesFileReader.access$500(this.this$0);\n                 if (i < 0) {\n                     this.createLeftOver();\n                     break;\n                 }\n                 continue;\n             }\n         }\n-        if (isLastFilePart && this.leftOver != null) {\n-            line = new String(this.leftOver, ReversedLinesFileReader.access$400(this.this$0));\n+        if (b && this.leftOver != null) {\n+            s = new String(this.leftOver, ReversedLinesFileReader.access$400(this.this$0));\n             this.leftOver = null;\n         }\n-        return line;\n+        return s;\n     }\n     \n     private FilePart rollOver() throws IOException {\n         if (this.currentLastBytePos > -1) {\n             throw new IllegalStateException(\"Current currentLastCharPos unexpectedly positive... last readLine() should have returned something! currentLastCharPos=\" + this.currentLastBytePos);\n         }\n         if (this.no > 1L) {\n"}]}
