{"diffoscope-json-version": 1, "source1": "first/BootstrapMethods.class", "source2": "second/BootstrapMethods.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,74 +5,75 @@\n import java.io.IOException;\n import java.io.DataInput;\n \n public class BootstrapMethods extends Attribute\n {\n     private BootstrapMethod[] bootstrap_methods;\n     \n-    public BootstrapMethods(final BootstrapMethods c) {\n-        this(c.getNameIndex(), c.getLength(), c.getBootstrapMethods(), c.getConstantPool());\n+    public BootstrapMethods(final BootstrapMethods bootstrapMethods) {\n+        this(bootstrapMethods.getNameIndex(), bootstrapMethods.getLength(), bootstrapMethods.getBootstrapMethods(), bootstrapMethods.getConstantPool());\n     }\n     \n-    public BootstrapMethods(final int name_index, final int length, final BootstrapMethod[] bootstrap_methods, final ConstantPool constant_pool) {\n-        super((byte)20, name_index, length, constant_pool);\n+    public BootstrapMethods(final int n, final int n2, final BootstrapMethod[] bootstrap_methods, final ConstantPool constantPool) {\n+        super((byte)20, n, n2, constantPool);\n         this.bootstrap_methods = bootstrap_methods;\n     }\n     \n-    BootstrapMethods(final int name_index, final int length, final DataInput input, final ConstantPool constant_pool) throws IOException {\n-        this(name_index, length, (BootstrapMethod[])null, constant_pool);\n-        final int num_bootstrap_methods = input.readUnsignedShort();\n-        this.bootstrap_methods = new BootstrapMethod[num_bootstrap_methods];\n-        for (int i = 0; i < num_bootstrap_methods; ++i) {\n-            this.bootstrap_methods[i] = new BootstrapMethod(input);\n+    BootstrapMethods(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, n2, (BootstrapMethod[])null, constantPool);\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        this.bootstrap_methods = new BootstrapMethod[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n+            this.bootstrap_methods[i] = new BootstrapMethod(dataInput);\n         }\n     }\n     \n     public final BootstrapMethod[] getBootstrapMethods() {\n         return this.bootstrap_methods;\n     }\n     \n     public final void setBootstrapMethods(final BootstrapMethod[] bootstrap_methods) {\n         this.bootstrap_methods = bootstrap_methods;\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitBootstrapMethods(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitBootstrapMethods(this);\n     }\n     \n-    public BootstrapMethods copy(final ConstantPool _constant_pool) {\n-        final BootstrapMethods c = (BootstrapMethods)this.clone();\n-        c.bootstrap_methods = new BootstrapMethod[this.bootstrap_methods.length];\n+    public BootstrapMethods copy(final ConstantPool constantPool) {\n+        final BootstrapMethods bootstrapMethods = (BootstrapMethods)this.clone();\n+        bootstrapMethods.bootstrap_methods = new BootstrapMethod[this.bootstrap_methods.length];\n         for (int i = 0; i < this.bootstrap_methods.length; ++i) {\n-            c.bootstrap_methods[i] = this.bootstrap_methods[i].copy();\n+            bootstrapMethods.bootstrap_methods[i] = this.bootstrap_methods[i].copy();\n         }\n-        c.setConstantPool(_constant_pool);\n-        return c;\n+        bootstrapMethods.setConstantPool(constantPool);\n+        return bootstrapMethods;\n     }\n     \n-    public final void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n-        file.writeShort(this.bootstrap_methods.length);\n-        for (final BootstrapMethod bootstrap_method : this.bootstrap_methods) {\n-            bootstrap_method.dump(file);\n+    public final void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeShort(this.bootstrap_methods.length);\n+        final BootstrapMethod[] bootstrap_methods = this.bootstrap_methods;\n+        for (int length = bootstrap_methods.length, i = 0; i < length; ++i) {\n+            bootstrap_methods[i].dump(dataOutputStream);\n         }\n     }\n     \n     public final String toString() {\n-        final StringBuilder buf = new StringBuilder();\n-        buf.append(\"BootstrapMethods(\");\n-        buf.append(this.bootstrap_methods.length);\n-        buf.append(\"):\");\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"BootstrapMethods(\");\n+        sb.append(this.bootstrap_methods.length);\n+        sb.append(\"):\");\n         for (int i = 0; i < this.bootstrap_methods.length; ++i) {\n-            buf.append(\"\\n\");\n-            final int start = buf.length();\n-            buf.append(\"  \").append(i).append(\": \");\n-            final int indent_count = buf.length() - start;\n-            final String[] lines = this.bootstrap_methods[i].toString(super.getConstantPool()).split(\"\\\\r?\\\\n\");\n-            buf.append(lines[0]);\n-            for (int j = 1; j < lines.length; ++j) {\n-                buf.append(\"\\n\").append(\"          \".substring(0, indent_count)).append(lines[j]);\n+            sb.append(\"\\n\");\n+            final int length = sb.length();\n+            sb.append(\"  \").append(i).append(\": \");\n+            final int endIndex = sb.length() - length;\n+            final String[] split = this.bootstrap_methods[i].toString(super.getConstantPool()).split(\"\\\\r?\\\\n\");\n+            sb.append(split[0]);\n+            for (int j = 1; j < split.length; ++j) {\n+                sb.append(\"\\n\").append(\"          \".substring(0, endIndex)).append(split[j]);\n             }\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n }\n"}]}
