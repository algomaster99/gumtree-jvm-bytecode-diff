{"diffoscope-json-version": 1, "source1": "first/XmlLoader.class", "source2": "second/XmlLoader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,67 +2,64 @@\n package com.puppycrawl.tools.checkstyle;\n \n import org.xml.sax.ErrorHandler;\n import org.xml.sax.EntityResolver;\n import org.xml.sax.ContentHandler;\n import javax.xml.parsers.SAXParserFactory;\n import org.xml.sax.SAXParseException;\n-import java.io.InputStream;\n import java.io.IOException;\n import org.xml.sax.InputSource;\n import javax.xml.parsers.ParserConfigurationException;\n import org.xml.sax.SAXException;\n import org.xml.sax.XMLReader;\n import java.util.Map;\n import org.xml.sax.helpers.DefaultHandler;\n \n public class XmlLoader extends DefaultHandler\n {\n     private final Map<String, String> publicIdToResourceNameMap;\n     private final XMLReader parser;\n     \n-    protected XmlLoader(final Map<String, String> publicIdToResourceNameMap) throws SAXException, ParserConfigurationException {\n-        this.publicIdToResourceNameMap = Map.copyOf((Map<? extends String, ? extends String>)publicIdToResourceNameMap);\n+    protected XmlLoader(final Map<String, String> map) throws SAXException, ParserConfigurationException {\n+        this.publicIdToResourceNameMap = Map.copyOf((Map<? extends String, ? extends String>)map);\n         this.parser = createXmlReader(this);\n     }\n     \n     public void parseInputSource(final InputSource inputSource) throws IOException, SAXException {\n         this.parser.parse(inputSource);\n     }\n     \n     @Override\n     public InputSource resolveEntity(final String publicId, final String systemId) throws SAXException, IOException {\n-        String dtdResourceName;\n+        String name;\n         if (publicId == null) {\n-            dtdResourceName = null;\n+            name = null;\n         }\n         else {\n-            dtdResourceName = this.publicIdToResourceNameMap.get(publicId);\n+            name = this.publicIdToResourceNameMap.get(publicId);\n         }\n-        InputSource inputSource;\n-        if (dtdResourceName == null) {\n-            inputSource = super.resolveEntity(publicId, systemId);\n+        InputSource resolveEntity;\n+        if (name == null) {\n+            resolveEntity = super.resolveEntity(publicId, systemId);\n         }\n         else {\n-            final ClassLoader loader = this.getClass().getClassLoader();\n-            final InputStream dtdIs = loader.getResourceAsStream(dtdResourceName);\n-            inputSource = new InputSource(dtdIs);\n+            resolveEntity = new InputSource(this.getClass().getClassLoader().getResourceAsStream(name));\n         }\n-        return inputSource;\n+        return resolveEntity;\n     }\n     \n     @Override\n-    public void error(final SAXParseException exception) throws SAXException {\n-        throw exception;\n+    public void error(final SAXParseException ex) throws SAXException {\n+        throw ex;\n     }\n     \n-    private static XMLReader createXmlReader(final DefaultHandler handler) throws SAXException, ParserConfigurationException {\n-        final SAXParserFactory factory = SAXParserFactory.newInstance();\n-        XmlLoader.LoadExternalDtdFeatureProvider.setFeaturesBySystemProperty(factory);\n-        factory.setValidating(true);\n-        final XMLReader xmlReader = factory.newSAXParser().getXMLReader();\n-        xmlReader.setContentHandler(handler);\n-        xmlReader.setEntityResolver(handler);\n-        xmlReader.setErrorHandler(handler);\n+    private static XMLReader createXmlReader(final DefaultHandler errorHandler) throws SAXException, ParserConfigurationException {\n+        final SAXParserFactory instance = SAXParserFactory.newInstance();\n+        XmlLoader.LoadExternalDtdFeatureProvider.setFeaturesBySystemProperty(instance);\n+        instance.setValidating(true);\n+        final XMLReader xmlReader = instance.newSAXParser().getXMLReader();\n+        xmlReader.setContentHandler(errorHandler);\n+        xmlReader.setEntityResolver(errorHandler);\n+        xmlReader.setErrorHandler(errorHandler);\n         return xmlReader;\n     }\n }\n"}]}
