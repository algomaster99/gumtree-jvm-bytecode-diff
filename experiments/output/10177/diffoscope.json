{"diffoscope-json-version": 1, "source1": "first/TFTPServerPathTest.class", "source2": "second/TFTPServerPathTest.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -27,42 +27,22 @@\n         tftp.open();\n         tftp.setSoTimeout(2000);\n         final File file = new File(this.serverDirectory, this.filePrefix + \"source.txt\");\n         file.createNewFile();\n         final File out = new File(this.serverDirectory, this.filePrefix + \"out\");\n         out.delete();\n         assertTrue(\"Couldn't clear output location\", !out.exists());\n-        final FileOutputStream output = new FileOutputStream(out);\n-        Throwable x0 = null;\n-        try {\n+        try (final FileOutputStream output = new FileOutputStream(out)) {\n             tftp.receiveFile(file.getName(), 1, (OutputStream)output, \"localhost\", 6901);\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, output);\n-        }\n         assertTrue(\"file not created\", out.exists());\n         out.delete();\n-        try {\n-            final FileInputStream fis = new FileInputStream(file);\n-            Throwable x2 = null;\n-            try {\n-                tftp.sendFile(out.getName(), 1, (InputStream)fis, \"localhost\", 6901);\n-                fail(\"Server allowed write\");\n-            }\n-            catch (final Throwable t2) {\n-                x2 = t2;\n-                throw t2;\n-            }\n-            finally {\n-                $closeResource(x2, fis);\n-            }\n+        try (final FileInputStream fis = new FileInputStream(file)) {\n+            tftp.sendFile(out.getName(), 1, (InputStream)fis, \"localhost\", 6901);\n+            fail(\"Server allowed write\");\n         }\n         catch (final IOException ex) {}\n         file.delete();\n         tftpS.shutdown();\n     }\n     \n     public void testWriteOnly() throws IOException {\n@@ -71,84 +51,39 @@\n         tftp.open();\n         tftp.setSoTimeout(2000);\n         final File file = new File(this.serverDirectory, this.filePrefix + \"source.txt\");\n         file.createNewFile();\n         final File out = new File(this.serverDirectory, this.filePrefix + \"out\");\n         out.delete();\n         assertTrue(\"Couldn't clear output location\", !out.exists());\n-        try {\n-            final FileOutputStream output = new FileOutputStream(out);\n-            Throwable x0 = null;\n-            try {\n-                tftp.receiveFile(file.getName(), 1, (OutputStream)output, \"localhost\", 6901);\n-                fail(\"Server allowed read\");\n-            }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n-            }\n-            finally {\n-                $closeResource(x0, output);\n-            }\n+        try (final FileOutputStream output = new FileOutputStream(out)) {\n+            tftp.receiveFile(file.getName(), 1, (OutputStream)output, \"localhost\", 6901);\n+            fail(\"Server allowed read\");\n         }\n         catch (final IOException ex) {}\n         out.delete();\n-        final FileInputStream fis = new FileInputStream(file);\n-        Throwable x2 = null;\n-        try {\n+        try (final FileInputStream fis = new FileInputStream(file)) {\n             tftp.sendFile(out.getName(), 1, (InputStream)fis, \"localhost\", 6901);\n         }\n-        catch (final Throwable t2) {\n-            x2 = t2;\n-            throw t2;\n-        }\n-        finally {\n-            $closeResource(x2, fis);\n-        }\n         assertTrue(\"file not created\", out.exists());\n         file.delete();\n         out.delete();\n         tftpS.shutdown();\n     }\n     \n     public void testWriteOutsideHome() throws IOException {\n         final TFTPServer tftpS = new TFTPServer(this.serverDirectory, this.serverDirectory, 6901, TFTPServer.ServerMode.GET_AND_PUT, (PrintStream)null, (PrintStream)null);\n         final TFTPClient tftp = new TFTPClient();\n         tftp.open();\n         final File file = new File(this.serverDirectory, this.filePrefix + \"source.txt\");\n         file.createNewFile();\n         assertFalse(\"test construction error\", new File(this.serverDirectory, \"../foo\").exists());\n-        try {\n-            final FileInputStream fis = new FileInputStream(file);\n-            Throwable x0 = null;\n-            try {\n-                tftp.sendFile(\"../foo\", 1, (InputStream)fis, \"localhost\", 6901);\n-                fail(\"Server allowed write!\");\n-            }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n-            }\n-            finally {\n-                $closeResource(x0, fis);\n-            }\n+        try (final FileInputStream fis = new FileInputStream(file)) {\n+            tftp.sendFile(\"../foo\", 1, (InputStream)fis, \"localhost\", 6901);\n+            fail(\"Server allowed write!\");\n         }\n         catch (final IOException ex) {}\n         assertFalse(\"file created when it should not have been\", new File(this.serverDirectory, \"../foo\").exists());\n         file.delete();\n         tftpS.shutdown();\n     }\n-    \n-    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n-        if (x0 != null) {\n-            try {\n-                x1.close();\n-            }\n-            catch (final Throwable exception) {\n-                x0.addSuppressed(exception);\n-            }\n-        }\n-        else {\n-            x1.close();\n-        }\n-    }\n }\n"}]}
