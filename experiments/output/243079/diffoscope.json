{"diffoscope-json-version": 1, "source1": "first/ConstantPool.class", "source2": "second/ConstantPool.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,176 +9,167 @@\n import java.io.DataInput;\n \n public class ConstantPool implements Cloneable, Node, Iterable<Constant>\n {\n     private Constant[] constantPool;\n     \n     private static String escape(final String str) {\n-        final int len = str.length();\n-        final StringBuilder buf = new StringBuilder(len + 5);\n-        final char[] ch = str.toCharArray();\n-        for (int i = 0; i < len; ++i) {\n-            switch (ch[i]) {\n+        final int length = str.length();\n+        final StringBuilder sb = new StringBuilder(length + 5);\n+        final char[] charArray = str.toCharArray();\n+        for (int i = 0; i < length; ++i) {\n+            switch (charArray[i]) {\n                 case '\\n': {\n-                    buf.append(\"\\\\n\");\n+                    sb.append(\"\\\\n\");\n                     break;\n                 }\n                 case '\\r': {\n-                    buf.append(\"\\\\r\");\n+                    sb.append(\"\\\\r\");\n                     break;\n                 }\n                 case '\\t': {\n-                    buf.append(\"\\\\t\");\n+                    sb.append(\"\\\\t\");\n                     break;\n                 }\n                 case '\\b': {\n-                    buf.append(\"\\\\b\");\n+                    sb.append(\"\\\\b\");\n                     break;\n                 }\n                 case '\\\"': {\n-                    buf.append(\"\\\\\\\"\");\n+                    sb.append(\"\\\\\\\"\");\n                     break;\n                 }\n                 default: {\n-                    buf.append(ch[i]);\n+                    sb.append(charArray[i]);\n                     break;\n                 }\n             }\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n     public ConstantPool(final Constant[] constantPool) {\n         this.constantPool = constantPool;\n     }\n     \n     public ConstantPool(final DataInput input) throws IOException {\n-        final int constantPoolCount = input.readUnsignedShort();\n-        this.constantPool = new Constant[constantPoolCount];\n-        for (int i = 1; i < constantPoolCount; ++i) {\n+        final int unsignedShort = input.readUnsignedShort();\n+        this.constantPool = new Constant[unsignedShort];\n+        for (int i = 1; i < unsignedShort; ++i) {\n             this.constantPool[i] = Constant.readConstant(input);\n             final byte tag = this.constantPool[i].getTag();\n             if (tag == 6 || tag == 5) {\n                 ++i;\n             }\n         }\n     }\n     \n     public void accept(final Visitor v) {\n         v.visitConstantPool(this);\n     }\n     \n-    public String constantToString(Constant c) throws IllegalArgumentException {\n+    public String constantToString(final Constant c) throws IllegalArgumentException {\n         final byte tag = c.getTag();\n-        String str = null;\n+        String s = null;\n         switch (tag) {\n             case 7: {\n-                final int i = ((ConstantClass)c).getNameIndex();\n-                c = (Constant)this.getConstantUtf8(i);\n-                str = Utility.compactClassName(((ConstantUtf8)c).getBytes(), false);\n+                s = Utility.compactClassName(((ConstantUtf8)this.getConstantUtf8(((ConstantClass)c).getNameIndex())).getBytes(), false);\n                 break;\n             }\n             case 8: {\n-                final int i = ((ConstantString)c).getStringIndex();\n-                c = (Constant)this.getConstantUtf8(i);\n-                str = \"\\\"\" + escape(((ConstantUtf8)c).getBytes()) + \"\\\"\";\n+                s = \"\\\"\" + escape(((ConstantUtf8)this.getConstantUtf8(((ConstantString)c).getStringIndex())).getBytes()) + \"\\\"\";\n                 break;\n             }\n             case 1: {\n-                str = ((ConstantUtf8)c).getBytes();\n+                s = ((ConstantUtf8)c).getBytes();\n                 break;\n             }\n             case 6: {\n-                str = String.valueOf(((ConstantDouble)c).getBytes());\n+                s = String.valueOf(((ConstantDouble)c).getBytes());\n                 break;\n             }\n             case 4: {\n-                str = String.valueOf(((ConstantFloat)c).getBytes());\n+                s = String.valueOf(((ConstantFloat)c).getBytes());\n                 break;\n             }\n             case 5: {\n-                str = String.valueOf(((ConstantLong)c).getBytes());\n+                s = String.valueOf(((ConstantLong)c).getBytes());\n                 break;\n             }\n             case 3: {\n-                str = String.valueOf(((ConstantInteger)c).getBytes());\n+                s = String.valueOf(((ConstantInteger)c).getBytes());\n                 break;\n             }\n             case 12: {\n-                str = this.constantToString(((ConstantNameAndType)c).getNameIndex(), (byte)1) + \" \" + this.constantToString(((ConstantNameAndType)c).getSignatureIndex(), (byte)1);\n+                s = this.constantToString(((ConstantNameAndType)c).getNameIndex(), (byte)1) + \" \" + this.constantToString(((ConstantNameAndType)c).getSignatureIndex(), (byte)1);\n                 break;\n             }\n             case 9:\n             case 10:\n             case 11: {\n-                str = this.constantToString(((ConstantCP)c).getClassIndex(), (byte)7) + \".\" + this.constantToString(((ConstantCP)c).getNameAndTypeIndex(), (byte)12);\n+                s = this.constantToString(((ConstantCP)c).getClassIndex(), (byte)7) + \".\" + this.constantToString(((ConstantCP)c).getNameAndTypeIndex(), (byte)12);\n                 break;\n             }\n             case 15: {\n-                final ConstantMethodHandle cmh = (ConstantMethodHandle)c;\n-                str = Const.getMethodHandleName(cmh.getReferenceKind()) + \" \" + this.constantToString(cmh.getReferenceIndex(), this.getConstant(cmh.getReferenceIndex()).getTag());\n+                final ConstantMethodHandle constantMethodHandle = (ConstantMethodHandle)c;\n+                s = Const.getMethodHandleName(constantMethodHandle.getReferenceKind()) + \" \" + this.constantToString(constantMethodHandle.getReferenceIndex(), this.getConstant(constantMethodHandle.getReferenceIndex()).getTag());\n                 break;\n             }\n             case 16: {\n-                final ConstantMethodType cmt = (ConstantMethodType)c;\n-                str = this.constantToString(cmt.getDescriptorIndex(), (byte)1);\n+                s = this.constantToString(((ConstantMethodType)c).getDescriptorIndex(), (byte)1);\n                 break;\n             }\n             case 18: {\n-                final ConstantInvokeDynamic cid = (ConstantInvokeDynamic)c;\n-                str = cid.getBootstrapMethodAttrIndex() + \":\" + this.constantToString(cid.getNameAndTypeIndex(), (byte)12);\n+                final ConstantInvokeDynamic constantInvokeDynamic = (ConstantInvokeDynamic)c;\n+                s = constantInvokeDynamic.getBootstrapMethodAttrIndex() + \":\" + this.constantToString(constantInvokeDynamic.getNameAndTypeIndex(), (byte)12);\n                 break;\n             }\n             case 17: {\n-                final ConstantDynamic cd = (ConstantDynamic)c;\n-                str = cd.getBootstrapMethodAttrIndex() + \":\" + this.constantToString(cd.getNameAndTypeIndex(), (byte)12);\n+                final ConstantDynamic constantDynamic = (ConstantDynamic)c;\n+                s = constantDynamic.getBootstrapMethodAttrIndex() + \":\" + this.constantToString(constantDynamic.getNameAndTypeIndex(), (byte)12);\n                 break;\n             }\n             case 19: {\n-                final int i = ((ConstantModule)c).getNameIndex();\n-                c = (Constant)this.getConstantUtf8(i);\n-                str = Utility.compactClassName(((ConstantUtf8)c).getBytes(), false);\n+                s = Utility.compactClassName(((ConstantUtf8)this.getConstantUtf8(((ConstantModule)c).getNameIndex())).getBytes(), false);\n                 break;\n             }\n             case 20: {\n-                final int i = ((ConstantPackage)c).getNameIndex();\n-                c = (Constant)this.getConstantUtf8(i);\n-                str = Utility.compactClassName(((ConstantUtf8)c).getBytes(), false);\n+                s = Utility.compactClassName(((ConstantUtf8)this.getConstantUtf8(((ConstantPackage)c).getNameIndex())).getBytes(), false);\n                 break;\n             }\n             default: {\n                 throw new IllegalArgumentException(\"Unknown constant type \" + tag);\n             }\n         }\n-        return str;\n+        return s;\n     }\n     \n     public String constantToString(final int index, final byte tag) {\n         return this.constantToString(this.getConstant(index, tag));\n     }\n     \n     public ConstantPool copy() {\n-        ConstantPool c = null;\n+        ConstantPool constantPool = null;\n         try {\n-            c = (ConstantPool)this.clone();\n-            c.constantPool = new Constant[this.constantPool.length];\n+            constantPool = (ConstantPool)this.clone();\n+            constantPool.constantPool = new Constant[this.constantPool.length];\n             for (int i = 1; i < this.constantPool.length; ++i) {\n                 if (this.constantPool[i] != null) {\n-                    c.constantPool[i] = this.constantPool[i].copy();\n+                    constantPool.constantPool[i] = this.constantPool[i].copy();\n                 }\n             }\n         }\n         catch (final CloneNotSupportedException ex) {}\n-        return c;\n+        return constantPool;\n     }\n     \n     public void dump(final DataOutputStream file) throws IOException {\n-        final int size = Math.min(this.constantPool.length, 65535);\n-        file.writeShort(size);\n-        for (int i = 1; i < size; ++i) {\n+        final int min = Math.min(this.constantPool.length, 65535);\n+        file.writeShort(min);\n+        for (int i = 1; i < min; ++i) {\n             if (this.constantPool[i] != null) {\n                 this.constantPool[i].dump(file);\n             }\n         }\n     }\n     \n     public <T extends Constant> T getConstant(final int index) throws ClassFormatException {\n@@ -186,73 +177,73 @@\n     }\n     \n     public <T extends Constant> T getConstant(final int index, final byte tag) throws ClassFormatException {\n         return this.getConstant(index, tag, (Class<T>)Constant.class);\n     }\n     \n     public <T extends Constant> T getConstant(final int index, final byte tag, final Class<T> castTo) throws ClassFormatException {\n-        final T c = this.getConstant(index);\n-        if (c.getTag() != tag) {\n-            throw new ClassFormatException(\"Expected class '\" + Const.getConstantName((int)tag) + \"' at index \" + index + \" and got \" + c);\n+        final Constant constant = this.getConstant(index);\n+        if (constant.getTag() != tag) {\n+            throw new ClassFormatException(\"Expected class '\" + Const.getConstantName((int)tag) + \"' at index \" + index + \" and got \" + constant);\n         }\n-        return c;\n+        return (T)constant;\n     }\n     \n     public <T extends Constant> T getConstant(final int index, final Class<T> castTo) throws ClassFormatException {\n         if (index >= this.constantPool.length || index < 0) {\n             throw new ClassFormatException(\"Invalid constant pool reference using index: \" + index + \". Constant pool size is: \" + this.constantPool.length);\n         }\n         if (this.constantPool[index] != null && !castTo.isAssignableFrom(this.constantPool[index].getClass())) {\n             throw new ClassFormatException(\"Invalid constant pool reference at index: \" + index + \". Expected \" + castTo + \" but was \" + this.constantPool[index].getClass());\n         }\n-        final T c = (T)castTo.cast(this.constantPool[index]);\n-        if (c == null && index != 0) {\n-            final Constant prev = this.constantPool[index - 1];\n-            if (prev == null || (prev.getTag() != 6 && prev.getTag() != 5)) {\n+        final Constant constant = (T)castTo.cast(this.constantPool[index]);\n+        if (constant == null && index != 0) {\n+            final Constant constant2 = this.constantPool[index - 1];\n+            if (constant2 == null || (constant2.getTag() != 6 && constant2.getTag() != 5)) {\n                 throw new ClassFormatException(\"Constant pool at index \" + index + \" is null.\");\n             }\n         }\n-        return c;\n+        return (T)constant;\n     }\n     \n     public ConstantInteger getConstantInteger(final int index) {\n         return this.getConstant(index, (byte)3, ConstantInteger.class);\n     }\n     \n     public Constant[] getConstantPool() {\n         return this.constantPool;\n     }\n     \n     public String getConstantString(final int index, final byte tag) throws IllegalArgumentException {\n-        int i = 0;\n+        int index2 = 0;\n         switch (tag) {\n             case 7: {\n-                i = ((ConstantClass)this.getConstant(index, ConstantClass.class)).getNameIndex();\n+                index2 = ((ConstantClass)this.getConstant(index, ConstantClass.class)).getNameIndex();\n                 break;\n             }\n             case 8: {\n-                i = ((ConstantString)this.getConstant(index, ConstantString.class)).getStringIndex();\n+                index2 = ((ConstantString)this.getConstant(index, ConstantString.class)).getStringIndex();\n                 break;\n             }\n             case 19: {\n-                i = ((ConstantModule)this.getConstant(index, ConstantModule.class)).getNameIndex();\n+                index2 = ((ConstantModule)this.getConstant(index, ConstantModule.class)).getNameIndex();\n                 break;\n             }\n             case 20: {\n-                i = ((ConstantPackage)this.getConstant(index, ConstantPackage.class)).getNameIndex();\n+                index2 = ((ConstantPackage)this.getConstant(index, ConstantPackage.class)).getNameIndex();\n                 break;\n             }\n             case 1: {\n                 return this.getConstantUtf8(index).getBytes();\n             }\n             default: {\n                 throw new IllegalArgumentException(\"getConstantString called with illegal tag \" + tag);\n             }\n         }\n-        return this.getConstantUtf8(i).getBytes();\n+        return this.getConstantUtf8(index2).getBytes();\n     }\n     \n     public ConstantUtf8 getConstantUtf8(final int index) throws ClassFormatException {\n         return this.getConstant(index, (byte)1, ConstantUtf8.class);\n     }\n     \n     public int getLength() {\n@@ -269,14 +260,14 @@\n     \n     public void setConstantPool(final Constant[] constantPool) {\n         this.constantPool = constantPool;\n     }\n     \n     @Override\n     public String toString() {\n-        final StringBuilder buf = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder();\n         for (int i = 1; i < this.constantPool.length; ++i) {\n-            buf.append(i).append(\")\").append(this.constantPool[i]).append(\"\\n\");\n+            sb.append(i).append(\")\").append(this.constantPool[i]).append(\"\\n\");\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n }\n"}]}
