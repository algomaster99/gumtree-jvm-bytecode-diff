{"diffoscope-json-version": 1, "source1": "first/InvokeInstruction.class", "source2": "second/InvokeInstruction.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package org.apache.bcel.generic;\n \n-import org.apache.bcel.classfile.Constant;\n import org.apache.bcel.Const;\n import java.util.StringTokenizer;\n import org.apache.bcel.classfile.ConstantPool;\n import org.apache.bcel.classfile.Utility;\n import org.apache.bcel.classfile.ConstantCP;\n \n public abstract class InvokeInstruction extends FieldOrMethod implements ExceptionThrower, StackConsumer, StackProducer\n@@ -14,35 +13,31 @@\n     }\n     \n     protected InvokeInstruction(final short opcode, final int index) {\n         super(opcode, index);\n     }\n     \n     public int consumeStack(final ConstantPoolGen cpg) {\n-        int sum;\n+        int n;\n         if (super.getOpcode() == 184 || super.getOpcode() == 186) {\n-            sum = 0;\n+            n = 0;\n         }\n         else {\n-            sum = 1;\n+            n = 1;\n         }\n-        final String signature = this.getSignature(cpg);\n-        sum += Type.getArgumentTypesSize(signature);\n-        return sum;\n+        return n + Type.getArgumentTypesSize(this.getSignature(cpg));\n     }\n     \n     public Type[] getArgumentTypes(final ConstantPoolGen cpg) {\n         return Type.getArgumentTypes(this.getSignature(cpg));\n     }\n     \n     public String getClassName(final ConstantPoolGen cpg) {\n-        final ConstantPool cp = cpg.getConstantPool();\n-        final ConstantCP cmr = (ConstantCP)cp.getConstant(super.getIndex());\n-        final String className = cp.getConstantString(cmr.getClassIndex(), (byte)7);\n-        return Utility.pathToPackage(className);\n+        final ConstantPool constantPool = cpg.getConstantPool();\n+        return Utility.pathToPackage(constantPool.getConstantString(((ConstantCP)constantPool.getConstant(super.getIndex())).getClassIndex(), (byte)7));\n     }\n     \n     public String getMethodName(final ConstantPoolGen cpg) {\n         return this.getName(cpg);\n     }\n     \n     public Type getReturnType(final ConstantPoolGen cpg) {\n@@ -50,26 +45,23 @@\n     }\n     \n     public Type getType(final ConstantPoolGen cpg) {\n         return this.getReturnType(cpg);\n     }\n     \n     public int produceStack(final ConstantPoolGen cpg) {\n-        final String signature = this.getSignature(cpg);\n-        return Type.getReturnTypeSize(signature);\n+        return Type.getReturnTypeSize(this.getSignature(cpg));\n     }\n     \n     public String toString(final ConstantPool cp) {\n-        final Constant c = cp.getConstant(super.getIndex());\n-        final StringTokenizer tok = new StringTokenizer(cp.constantToString(c));\n-        final String opcodeName = Const.getOpcodeName((int)super.getOpcode());\n-        final StringBuilder sb = new StringBuilder(opcodeName);\n-        if (tok.hasMoreTokens()) {\n+        final StringTokenizer stringTokenizer = new StringTokenizer(cp.constantToString(cp.getConstant(super.getIndex())));\n+        final StringBuilder sb = new StringBuilder(Const.getOpcodeName((int)super.getOpcode()));\n+        if (stringTokenizer.hasMoreTokens()) {\n             sb.append(\" \");\n-            sb.append(Utility.packageToPath(tok.nextToken()));\n-            if (tok.hasMoreTokens()) {\n-                sb.append(tok.nextToken());\n+            sb.append(Utility.packageToPath(stringTokenizer.nextToken()));\n+            if (stringTokenizer.hasMoreTokens()) {\n+                sb.append(stringTokenizer.nextToken());\n             }\n         }\n         return sb.toString();\n     }\n }\n"}]}
