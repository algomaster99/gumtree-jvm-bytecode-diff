{"diffoscope-json-version": 1, "source1": "first/DotTerminatedMessageWriter.class", "source2": "second/DotTerminatedMessageWriter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,24 +8,24 @@\n {\n     private static final int NOTHING_SPECIAL_STATE = 0;\n     private static final int LAST_WAS_CR_STATE = 1;\n     private static final int LAST_WAS_NL_STATE = 2;\n     private int state;\n     private Writer output;\n     \n-    public DotTerminatedMessageWriter(final Writer output) {\n-        super((Object)output);\n-        this.output = output;\n+    public DotTerminatedMessageWriter(final Writer writer) {\n+        super((Object)writer);\n+        this.output = writer;\n         this.state = 0;\n     }\n     \n     @Override\n-    public void write(final int ch) throws IOException {\n+    public void write(final int c) throws IOException {\n         synchronized (this.lock) {\n-            switch (ch) {\n+            switch (c) {\n                 case 13: {\n                     this.state = 1;\n                     this.output.write(13);\n                     return;\n                 }\n                 case 10: {\n                     if (this.state != 1) {\n@@ -40,40 +40,40 @@\n                         this.output.write(46);\n                         break;\n                     }\n                     break;\n                 }\n             }\n             this.state = 0;\n-            this.output.write(ch);\n+            this.output.write(c);\n         }\n     }\n     \n     @Override\n-    public void write(final char[] buffer, int offset, int length) throws IOException {\n+    public void write(final char[] array, int n, int n2) throws IOException {\n         synchronized (this.lock) {\n-            while (length-- > 0) {\n-                this.write(buffer[offset++]);\n+            while (n2-- > 0) {\n+                this.write(array[n++]);\n             }\n         }\n     }\n     \n     @Override\n-    public void write(final char[] buffer) throws IOException {\n-        this.write(buffer, 0, buffer.length);\n+    public void write(final char[] array) throws IOException {\n+        this.write(array, 0, array.length);\n     }\n     \n     @Override\n-    public void write(final String string) throws IOException {\n-        this.write(string.toCharArray());\n+    public void write(final String s) throws IOException {\n+        this.write(s.toCharArray());\n     }\n     \n     @Override\n-    public void write(final String string, final int offset, final int length) throws IOException {\n-        this.write(string.toCharArray(), offset, length);\n+    public void write(final String s, final int n, final int n2) throws IOException {\n+        this.write(s.toCharArray(), n, n2);\n     }\n     \n     @Override\n     public void flush() throws IOException {\n         synchronized (this.lock) {\n             this.output.flush();\n         }\n"}]}
