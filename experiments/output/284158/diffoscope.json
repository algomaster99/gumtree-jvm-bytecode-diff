{"diffoscope-json-version": 1, "source1": "first/ThreadUtils.class", "source2": "second/ThreadUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,115 +1,115 @@\n \n package org.apache.commons.lang3;\n \n import org.apache.commons.lang3.time.DurationUtils;\n import java.util.Objects;\n import java.time.Duration;\n import java.util.Iterator;\n-import java.util.List;\n import java.util.Collections;\n import java.util.ArrayList;\n import java.util.Collection;\n \n public class ThreadUtils\n {\n     public static final ThreadUtils.AlwaysTruePredicate ALWAYS_TRUE_PREDICATE;\n     \n-    public static Thread findThreadById(final long threadId) {\n-        final Collection<Thread> result = findThreads((ThreadUtils.ThreadPredicate)new ThreadUtils.ThreadIdPredicate(threadId));\n-        return result.isEmpty() ? null : ((Thread)result.iterator().next());\n+    public static Thread findThreadById(final long n) {\n+        final Collection<Thread> threads = findThreads((ThreadUtils.ThreadPredicate)new ThreadUtils.ThreadIdPredicate(n));\n+        return threads.isEmpty() ? null : ((Thread)threads.iterator().next());\n     }\n     \n-    public static Thread findThreadById(final long threadId, final String threadGroupName) {\n-        Validate.notNull((Object)threadGroupName, \"threadGroupName\", new Object[0]);\n-        final Thread thread = findThreadById(threadId);\n-        if (thread != null && thread.getThreadGroup() != null && thread.getThreadGroup().getName().equals(threadGroupName)) {\n-            return thread;\n+    public static Thread findThreadById(final long n, final String anObject) {\n+        Validate.notNull((Object)anObject, \"threadGroupName\", new Object[0]);\n+        final Thread threadById = findThreadById(n);\n+        if (threadById != null && threadById.getThreadGroup() != null && threadById.getThreadGroup().getName().equals(anObject)) {\n+            return threadById;\n         }\n         return null;\n     }\n     \n-    public static Thread findThreadById(final long threadId, final ThreadGroup threadGroup) {\n+    public static Thread findThreadById(final long n, final ThreadGroup threadGroup) {\n         Validate.notNull((Object)threadGroup, \"threadGroup\", new Object[0]);\n-        final Thread thread = findThreadById(threadId);\n-        if (thread != null && threadGroup.equals(thread.getThreadGroup())) {\n-            return thread;\n+        final Thread threadById = findThreadById(n);\n+        if (threadById != null && threadGroup.equals(threadById.getThreadGroup())) {\n+            return threadById;\n         }\n         return null;\n     }\n     \n-    public static Collection<ThreadGroup> findThreadGroups(final ThreadGroup group, final boolean recurse, final ThreadUtils.ThreadGroupPredicate predicate) {\n-        Validate.notNull((Object)group, \"group\", new Object[0]);\n-        Validate.notNull((Object)predicate, \"predicate\", new Object[0]);\n-        int count = group.activeGroupCount();\n-        ThreadGroup[] threadGroups;\n+    public static Collection<ThreadGroup> findThreadGroups(final ThreadGroup threadGroup, final boolean recurse, final ThreadUtils.ThreadGroupPredicate threadGroupPredicate) {\n+        Validate.notNull((Object)threadGroup, \"group\", new Object[0]);\n+        Validate.notNull((Object)threadGroupPredicate, \"predicate\", new Object[0]);\n+        int i = threadGroup.activeGroupCount();\n+        ThreadGroup[] list;\n         do {\n-            threadGroups = new ThreadGroup[count + count / 2 + 1];\n-            count = group.enumerate(threadGroups, recurse);\n-        } while (count >= threadGroups.length);\n-        final List<ThreadGroup> result = new ArrayList<ThreadGroup>(count);\n-        for (int i = 0; i < count; ++i) {\n-            if (predicate.test(threadGroups[i])) {\n-                result.add(threadGroups[i]);\n+            list = new ThreadGroup[i + i / 2 + 1];\n+            i = threadGroup.enumerate(list, recurse);\n+        } while (i >= list.length);\n+        final ArrayList c = new ArrayList(i);\n+        for (int j = 0; j < i; ++j) {\n+            if (threadGroupPredicate.test(list[j])) {\n+                c.add((Object)list[j]);\n             }\n         }\n-        return Collections.unmodifiableCollection((Collection<? extends ThreadGroup>)result);\n+        return Collections.unmodifiableCollection((Collection<? extends ThreadGroup>)c);\n     }\n     \n-    public static Collection<ThreadGroup> findThreadGroups(final ThreadUtils.ThreadGroupPredicate predicate) {\n-        return findThreadGroups(getSystemThreadGroup(), true, predicate);\n+    public static Collection<ThreadGroup> findThreadGroups(final ThreadUtils.ThreadGroupPredicate threadGroupPredicate) {\n+        return findThreadGroups(getSystemThreadGroup(), true, threadGroupPredicate);\n     }\n     \n-    public static Collection<ThreadGroup> findThreadGroupsByName(final String threadGroupName) {\n-        return findThreadGroups((ThreadUtils.ThreadGroupPredicate)new ThreadUtils.NamePredicate(threadGroupName));\n+    public static Collection<ThreadGroup> findThreadGroupsByName(final String s) {\n+        return findThreadGroups((ThreadUtils.ThreadGroupPredicate)new ThreadUtils.NamePredicate(s));\n     }\n     \n-    public static Collection<Thread> findThreads(final ThreadGroup group, final boolean recurse, final ThreadUtils.ThreadPredicate predicate) {\n-        Validate.notNull((Object)group, \"The group must not be null\", new Object[0]);\n-        Validate.notNull((Object)predicate, \"The predicate must not be null\", new Object[0]);\n-        int count = group.activeCount();\n-        Thread[] threads;\n+    public static Collection<Thread> findThreads(final ThreadGroup threadGroup, final boolean recurse, final ThreadUtils.ThreadPredicate threadPredicate) {\n+        Validate.notNull((Object)threadGroup, \"The group must not be null\", new Object[0]);\n+        Validate.notNull((Object)threadPredicate, \"The predicate must not be null\", new Object[0]);\n+        int i = threadGroup.activeCount();\n+        Thread[] list;\n         do {\n-            threads = new Thread[count + count / 2 + 1];\n-            count = group.enumerate(threads, recurse);\n-        } while (count >= threads.length);\n-        final List<Thread> result = new ArrayList<Thread>(count);\n-        for (int i = 0; i < count; ++i) {\n-            if (predicate.test(threads[i])) {\n-                result.add(threads[i]);\n+            list = new Thread[i + i / 2 + 1];\n+            i = threadGroup.enumerate(list, recurse);\n+        } while (i >= list.length);\n+        final ArrayList c = new ArrayList(i);\n+        for (int j = 0; j < i; ++j) {\n+            if (threadPredicate.test(list[j])) {\n+                c.add((Object)list[j]);\n             }\n         }\n-        return Collections.unmodifiableCollection((Collection<? extends Thread>)result);\n+        return Collections.unmodifiableCollection((Collection<? extends Thread>)c);\n     }\n     \n-    public static Collection<Thread> findThreads(final ThreadUtils.ThreadPredicate predicate) {\n-        return findThreads(getSystemThreadGroup(), true, predicate);\n+    public static Collection<Thread> findThreads(final ThreadUtils.ThreadPredicate threadPredicate) {\n+        return findThreads(getSystemThreadGroup(), true, threadPredicate);\n     }\n     \n-    public static Collection<Thread> findThreadsByName(final String threadName) {\n-        return findThreads((ThreadUtils.ThreadPredicate)new ThreadUtils.NamePredicate(threadName));\n+    public static Collection<Thread> findThreadsByName(final String s) {\n+        return findThreads((ThreadUtils.ThreadPredicate)new ThreadUtils.NamePredicate(s));\n     }\n     \n-    public static Collection<Thread> findThreadsByName(final String threadName, final String threadGroupName) {\n-        Validate.notNull((Object)threadName, \"threadName\", new Object[0]);\n-        Validate.notNull((Object)threadGroupName, \"threadGroupName\", new Object[0]);\n-        final Collection<ThreadGroup> threadGroups = findThreadGroups((ThreadUtils.ThreadGroupPredicate)new ThreadUtils.NamePredicate(threadGroupName));\n+    public static Collection<Thread> findThreadsByName(final String s, final String s2) {\n+        Validate.notNull((Object)s, \"threadName\", new Object[0]);\n+        Validate.notNull((Object)s2, \"threadGroupName\", new Object[0]);\n+        final Collection<ThreadGroup> threadGroups = findThreadGroups((ThreadUtils.ThreadGroupPredicate)new ThreadUtils.NamePredicate(s2));\n         if (threadGroups.isEmpty()) {\n             return (Collection<Thread>)Collections.emptyList();\n         }\n-        final Collection<Thread> result = new ArrayList<Thread>();\n-        final ThreadUtils.NamePredicate threadNamePredicate = new ThreadUtils.NamePredicate(threadName);\n-        for (final ThreadGroup group : threadGroups) {\n-            result.addAll(findThreads(group, false, (ThreadUtils.ThreadPredicate)threadNamePredicate));\n+        final ArrayList c = new ArrayList();\n+        final ThreadUtils.NamePredicate namePredicate = new ThreadUtils.NamePredicate(s);\n+        final Iterator<ThreadGroup> iterator = threadGroups.iterator();\n+        while (iterator.hasNext()) {\n+            c.addAll(findThreads(iterator.next(), false, (ThreadUtils.ThreadPredicate)namePredicate));\n         }\n-        return Collections.unmodifiableCollection((Collection<? extends Thread>)result);\n+        return (Collection<Thread>)Collections.unmodifiableCollection((Collection<?>)c);\n     }\n     \n-    public static Collection<Thread> findThreadsByName(final String threadName, final ThreadGroup threadGroup) {\n-        return findThreads(threadGroup, false, (ThreadUtils.ThreadPredicate)new ThreadUtils.NamePredicate(threadName));\n+    public static Collection<Thread> findThreadsByName(final String s, final ThreadGroup threadGroup) {\n+        return findThreads(threadGroup, false, (ThreadUtils.ThreadPredicate)new ThreadUtils.NamePredicate(s));\n     }\n     \n     public static Collection<ThreadGroup> getAllThreadGroups() {\n         return findThreadGroups((ThreadUtils.ThreadGroupPredicate)ThreadUtils.ALWAYS_TRUE_PREDICATE);\n     }\n     \n     public static Collection<Thread> getAllThreads() {\n@@ -118,17 +118,17 @@\n     \n     public static ThreadGroup getSystemThreadGroup() {\n         ThreadGroup threadGroup;\n         for (threadGroup = Thread.currentThread().getThreadGroup(); threadGroup.getParent() != null; threadGroup = threadGroup.getParent()) {}\n         return threadGroup;\n     }\n     \n-    public static void join(final Thread thread, final Duration duration) throws InterruptedException {\n-        Objects.requireNonNull(thread);\n-        DurationUtils.accept(thread::join, duration);\n+    public static void join(final Thread obj, final Duration duration) throws InterruptedException {\n+        Objects.requireNonNull(obj);\n+        DurationUtils.accept(obj::join, duration);\n     }\n     \n     public static void sleep(final Duration duration) throws InterruptedException {\n         DurationUtils.accept(Thread::sleep, duration);\n     }\n     \n     static {\n"}]}
