{"diffoscope-json-version": 1, "source1": "first/BasicType.class", "source2": "second/BasicType.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,16 +1,16 @@\n \n package org.apache.bcel.generic;\n \n import org.apache.bcel.Const;\n \n public final class BasicType extends Type\n {\n-    public static BasicType getType(final byte type) {\n-        switch (type) {\n+    public static BasicType getType(final byte i) {\n+        switch (i) {\n             case 12: {\n                 return BasicType.VOID;\n             }\n             case 4: {\n                 return BasicType.BOOLEAN;\n             }\n             case 8: {\n@@ -31,27 +31,27 @@\n             case 7: {\n                 return BasicType.DOUBLE;\n             }\n             case 6: {\n                 return BasicType.FLOAT;\n             }\n             default: {\n-                throw new ClassGenException(\"Invalid type: \" + type);\n+                throw new ClassGenException(\"Invalid type: \" + i);\n             }\n         }\n     }\n     \n-    BasicType(final byte type) {\n-        super(type, Const.getShortTypeName((int)type));\n-        if (type < 4 || type > 12) {\n-            throw new ClassGenException(\"Invalid type: \" + type);\n+    BasicType(final byte i) {\n+        super(i, Const.getShortTypeName((int)i));\n+        if (i < 4 || i > 12) {\n+            throw new ClassGenException(\"Invalid type: \" + i);\n         }\n     }\n     \n-    public boolean equals(final Object type) {\n-        return type instanceof BasicType && ((BasicType)type).getType() == this.getType();\n+    public boolean equals(final Object o) {\n+        return o instanceof BasicType && ((BasicType)o).getType() == this.getType();\n     }\n     \n     public int hashCode() {\n         return super.getType();\n     }\n }\n"}]}
