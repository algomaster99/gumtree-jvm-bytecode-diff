{"diffoscope-json-version": 1, "source1": "first/XZCompressorOutputStream.class", "source2": "second/XZCompressorOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,231 +1,231 @@\n-  SHA-256 checksum ca649b58ffd479a87f6668a0cf6f3c685d93b1a6e79eceac842a85268f892cbf\n+  SHA-256 checksum 97d196878d3dbe3034377541a7f92940e73d350d30f4701bd1d8bbc0edae875b\n   Compiled from \"XZCompressorOutputStream.java\"\n public class org.apache.commons.compress.compressors.xz.XZCompressorOutputStream extends org.apache.commons.compress.compressors.CompressorOutputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #13                         // org/apache/commons/compress/compressors/xz/XZCompressorOutputStream\n-  super_class: #14                        // org/apache/commons/compress/compressors/CompressorOutputStream\n+  this_class: #1                          // org/apache/commons/compress/compressors/xz/XZCompressorOutputStream\n+  super_class: #3                         // org/apache/commons/compress/compressors/CompressorOutputStream\n   interfaces: 0, fields: 1, methods: 7, attributes: 1\n Constant pool:\n-   #1 = Methodref          #14.#45        // org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n-   #2 = Class              #46            // org/tukaani/xz/XZOutputStream\n-   #3 = Class              #47            // org/tukaani/xz/LZMA2Options\n-   #4 = Methodref          #3.#45         // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n-   #5 = Methodref          #2.#48         // org/tukaani/xz/XZOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n-   #6 = Fieldref           #13.#49        // org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.out:Lorg/tukaani/xz/XZOutputStream;\n-   #7 = Methodref          #3.#50         // org/tukaani/xz/LZMA2Options.\"<init>\":(I)V\n-   #8 = Methodref          #2.#51         // org/tukaani/xz/XZOutputStream.close:()V\n-   #9 = Methodref          #2.#52         // org/tukaani/xz/XZOutputStream.finish:()V\n-  #10 = Methodref          #2.#53         // org/tukaani/xz/XZOutputStream.flush:()V\n-  #11 = Methodref          #2.#54         // org/tukaani/xz/XZOutputStream.write:([BII)V\n-  #12 = Methodref          #2.#55         // org/tukaani/xz/XZOutputStream.write:(I)V\n-  #13 = Class              #56            // org/apache/commons/compress/compressors/xz/XZCompressorOutputStream\n-  #14 = Class              #57            // org/apache/commons/compress/compressors/CompressorOutputStream\n-  #15 = Utf8               out\n-  #16 = Utf8               Lorg/tukaani/xz/XZOutputStream;\n-  #17 = Utf8               <init>\n-  #18 = Utf8               (Ljava/io/OutputStream;)V\n-  #19 = Utf8               Code\n-  #20 = Utf8               LineNumberTable\n-  #21 = Utf8               LocalVariableTable\n-  #22 = Utf8               this\n-  #23 = Utf8               Lorg/apache/commons/compress/compressors/xz/XZCompressorOutputStream;\n-  #24 = Utf8               outputStream\n-  #25 = Utf8               Ljava/io/OutputStream;\n-  #26 = Utf8               Exceptions\n-  #27 = Class              #58            // java/io/IOException\n-  #28 = Utf8               (Ljava/io/OutputStream;I)V\n-  #29 = Utf8               preset\n-  #30 = Utf8               I\n-  #31 = Utf8               close\n-  #32 = Utf8               ()V\n-  #33 = Utf8               finish\n-  #34 = Utf8               flush\n-  #35 = Utf8               write\n-  #36 = Utf8               ([BII)V\n-  #37 = Utf8               buf\n-  #38 = Utf8               [B\n-  #39 = Utf8               off\n-  #40 = Utf8               len\n-  #41 = Utf8               (I)V\n-  #42 = Utf8               b\n-  #43 = Utf8               SourceFile\n-  #44 = Utf8               XZCompressorOutputStream.java\n-  #45 = NameAndType        #17:#32        // \"<init>\":()V\n-  #46 = Utf8               org/tukaani/xz/XZOutputStream\n-  #47 = Utf8               org/tukaani/xz/LZMA2Options\n-  #48 = NameAndType        #17:#59        // \"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n-  #49 = NameAndType        #15:#16        // out:Lorg/tukaani/xz/XZOutputStream;\n-  #50 = NameAndType        #17:#41        // \"<init>\":(I)V\n-  #51 = NameAndType        #31:#32        // close:()V\n-  #52 = NameAndType        #33:#32        // finish:()V\n-  #53 = NameAndType        #34:#32        // flush:()V\n-  #54 = NameAndType        #35:#36        // write:([BII)V\n-  #55 = NameAndType        #35:#41        // write:(I)V\n-  #56 = Utf8               org/apache/commons/compress/compressors/xz/XZCompressorOutputStream\n-  #57 = Utf8               org/apache/commons/compress/compressors/CompressorOutputStream\n-  #58 = Utf8               java/io/IOException\n-  #59 = Utf8               (Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n+   #1 = Class              #2             // org/apache/commons/compress/compressors/xz/XZCompressorOutputStream\n+   #2 = Utf8               org/apache/commons/compress/compressors/xz/XZCompressorOutputStream\n+   #3 = Class              #4             // org/apache/commons/compress/compressors/CompressorOutputStream\n+   #4 = Utf8               org/apache/commons/compress/compressors/CompressorOutputStream\n+   #5 = Utf8               out\n+   #6 = Utf8               Lorg/tukaani/xz/XZOutputStream;\n+   #7 = Utf8               <init>\n+   #8 = Utf8               (Ljava/io/OutputStream;)V\n+   #9 = Utf8               Exceptions\n+  #10 = Class              #11            // java/io/IOException\n+  #11 = Utf8               java/io/IOException\n+  #12 = Utf8               Code\n+  #13 = Methodref          #3.#14         // org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n+  #14 = NameAndType        #7:#15         // \"<init>\":()V\n+  #15 = Utf8               ()V\n+  #16 = Class              #17            // org/tukaani/xz/XZOutputStream\n+  #17 = Utf8               org/tukaani/xz/XZOutputStream\n+  #18 = Class              #19            // org/tukaani/xz/LZMA2Options\n+  #19 = Utf8               org/tukaani/xz/LZMA2Options\n+  #20 = Methodref          #18.#14        // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+  #21 = Methodref          #16.#22        // org/tukaani/xz/XZOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n+  #22 = NameAndType        #7:#23         // \"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n+  #23 = Utf8               (Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n+  #24 = Fieldref           #1.#25         // org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.out:Lorg/tukaani/xz/XZOutputStream;\n+  #25 = NameAndType        #5:#6          // out:Lorg/tukaani/xz/XZOutputStream;\n+  #26 = Utf8               LineNumberTable\n+  #27 = Utf8               LocalVariableTable\n+  #28 = Utf8               this\n+  #29 = Utf8               Lorg/apache/commons/compress/compressors/xz/XZCompressorOutputStream;\n+  #30 = Utf8               outputStream\n+  #31 = Utf8               Ljava/io/OutputStream;\n+  #32 = Utf8               (Ljava/io/OutputStream;I)V\n+  #33 = Methodref          #18.#34        // org/tukaani/xz/LZMA2Options.\"<init>\":(I)V\n+  #34 = NameAndType        #7:#35         // \"<init>\":(I)V\n+  #35 = Utf8               (I)V\n+  #36 = Utf8               preset\n+  #37 = Utf8               I\n+  #38 = Utf8               close\n+  #39 = Methodref          #16.#40        // org/tukaani/xz/XZOutputStream.close:()V\n+  #40 = NameAndType        #38:#15        // close:()V\n+  #41 = Utf8               finish\n+  #42 = Methodref          #16.#43        // org/tukaani/xz/XZOutputStream.finish:()V\n+  #43 = NameAndType        #41:#15        // finish:()V\n+  #44 = Utf8               flush\n+  #45 = Methodref          #16.#46        // org/tukaani/xz/XZOutputStream.flush:()V\n+  #46 = NameAndType        #44:#15        // flush:()V\n+  #47 = Utf8               write\n+  #48 = Utf8               ([BII)V\n+  #49 = Methodref          #16.#50        // org/tukaani/xz/XZOutputStream.write:([BII)V\n+  #50 = NameAndType        #47:#48        // write:([BII)V\n+  #51 = Utf8               buf\n+  #52 = Utf8               [B\n+  #53 = Utf8               off\n+  #54 = Utf8               len\n+  #55 = Methodref          #16.#56        // org/tukaani/xz/XZOutputStream.write:(I)V\n+  #56 = NameAndType        #47:#35        // write:(I)V\n+  #57 = Utf8               b\n+  #58 = Utf8               SourceFile\n+  #59 = Utf8               XZCompressorOutputStream.java\n {\n   private final org.tukaani.xz.XZOutputStream out;\n     descriptor: Lorg/tukaani/xz/XZOutputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.commons.compress.compressors.xz.XZCompressorOutputStream(java.io.OutputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/OutputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=6, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #1                  // Method org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n+         1: invokespecial #13                 // Method org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class org/tukaani/xz/XZOutputStream\n+         5: new           #16                 // class org/tukaani/xz/XZOutputStream\n          8: dup\n          9: aload_1\n-        10: new           #3                  // class org/tukaani/xz/LZMA2Options\n+        10: new           #18                 // class org/tukaani/xz/LZMA2Options\n         13: dup\n-        14: invokespecial #4                  // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n-        17: invokespecial #5                  // Method org/tukaani/xz/XZOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n-        20: putfield      #6                  // Field out:Lorg/tukaani/xz/XZOutputStream;\n+        14: invokespecial #20                 // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+        17: invokespecial #21                 // Method org/tukaani/xz/XZOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n+        20: putfield      #24                 // Field out:Lorg/tukaani/xz/XZOutputStream;\n         23: return\n       LineNumberTable:\n-        line 42: 0\n+        line 41: 0\n         line 43: 4\n         line 44: 23\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      24     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorOutputStream;\n             0      24     1 outputStream   Ljava/io/OutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public org.apache.commons.compress.compressors.xz.XZCompressorOutputStream(java.io.OutputStream, int) throws java.io.IOException;\n     descriptor: (Ljava/io/OutputStream;I)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=7, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #1                  // Method org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n+         1: invokespecial #13                 // Method org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class org/tukaani/xz/XZOutputStream\n+         5: new           #16                 // class org/tukaani/xz/XZOutputStream\n          8: dup\n          9: aload_1\n-        10: new           #3                  // class org/tukaani/xz/LZMA2Options\n+        10: new           #18                 // class org/tukaani/xz/LZMA2Options\n         13: dup\n         14: iload_2\n-        15: invokespecial #7                  // Method org/tukaani/xz/LZMA2Options.\"<init>\":(I)V\n-        18: invokespecial #5                  // Method org/tukaani/xz/XZOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n-        21: putfield      #6                  // Field out:Lorg/tukaani/xz/XZOutputStream;\n+        15: invokespecial #33                 // Method org/tukaani/xz/LZMA2Options.\"<init>\":(I)V\n+        18: invokespecial #21                 // Method org/tukaani/xz/XZOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/FilterOptions;)V\n+        21: putfield      #24                 // Field out:Lorg/tukaani/xz/XZOutputStream;\n         24: return\n       LineNumberTable:\n-        line 63: 0\n+        line 62: 0\n         line 64: 4\n         line 65: 24\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      25     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorOutputStream;\n             0      25     1 outputStream   Ljava/io/OutputStream;\n             0      25     2 preset   I\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field out:Lorg/tukaani/xz/XZOutputStream;\n-         4: invokevirtual #8                  // Method org/tukaani/xz/XZOutputStream.close:()V\n+         1: getfield      #24                 // Field out:Lorg/tukaani/xz/XZOutputStream;\n+         4: invokevirtual #39                 // Method org/tukaani/xz/XZOutputStream.close:()V\n          7: return\n       LineNumberTable:\n         line 69: 0\n         line 70: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorOutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void finish() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field out:Lorg/tukaani/xz/XZOutputStream;\n-         4: invokevirtual #9                  // Method org/tukaani/xz/XZOutputStream.finish:()V\n+         1: getfield      #24                 // Field out:Lorg/tukaani/xz/XZOutputStream;\n+         4: invokevirtual #42                 // Method org/tukaani/xz/XZOutputStream.finish:()V\n          7: return\n       LineNumberTable:\n         line 78: 0\n         line 79: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorOutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void flush() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field out:Lorg/tukaani/xz/XZOutputStream;\n-         4: invokevirtual #10                 // Method org/tukaani/xz/XZOutputStream.flush:()V\n+         1: getfield      #24                 // Field out:Lorg/tukaani/xz/XZOutputStream;\n+         4: invokevirtual #45                 // Method org/tukaani/xz/XZOutputStream.flush:()V\n          7: return\n       LineNumberTable:\n         line 89: 0\n         line 90: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorOutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void write(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n-         1: getfield      #6                  // Field out:Lorg/tukaani/xz/XZOutputStream;\n+         1: getfield      #24                 // Field out:Lorg/tukaani/xz/XZOutputStream;\n          4: aload_1\n          5: iload_2\n          6: iload_3\n-         7: invokevirtual #11                 // Method org/tukaani/xz/XZOutputStream.write:([BII)V\n+         7: invokevirtual #49                 // Method org/tukaani/xz/XZOutputStream.write:([BII)V\n         10: return\n       LineNumberTable:\n         line 94: 0\n         line 95: 10\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorOutputStream;\n             0      11     1   buf   [B\n             0      11     2   off   I\n             0      11     3   len   I\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void write(int) throws java.io.IOException;\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #6                  // Field out:Lorg/tukaani/xz/XZOutputStream;\n+         1: getfield      #24                 // Field out:Lorg/tukaani/xz/XZOutputStream;\n          4: iload_1\n-         5: invokevirtual #12                 // Method org/tukaani/xz/XZOutputStream.write:(I)V\n+         5: invokevirtual #55                 // Method org/tukaani/xz/XZOutputStream.write:(I)V\n          8: return\n       LineNumberTable:\n         line 99: 0\n         line 100: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorOutputStream;\n             0       9     1     b   I\n-    Exceptions:\n-      throws java.io.IOException\n }\n SourceFile: \"XZCompressorOutputStream.java\"\n"}]}
