{"diffoscope-json-version": 1, "source1": "first/ParameterNameCheck.class", "source2": "second/ParameterNameCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,49 +16,48 @@\n         this.accessModifiers = new AccessModifierOption[] { AccessModifierOption.PUBLIC, AccessModifierOption.PROTECTED, AccessModifierOption.PACKAGE, AccessModifierOption.PRIVATE };\n     }\n     \n     public void setIgnoreOverridden(final boolean ignoreOverridden) {\n         this.ignoreOverridden = ignoreOverridden;\n     }\n     \n-    public void setAccessModifiers(final AccessModifierOption... accessModifiers) {\n-        this.accessModifiers = Arrays.copyOf(accessModifiers, accessModifiers.length);\n+    public void setAccessModifiers(final AccessModifierOption... original) {\n+        this.accessModifiers = Arrays.copyOf(original, original.length);\n     }\n     \n     public int[] getDefaultTokens() {\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getAcceptableTokens() {\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 21 };\n     }\n     \n-    protected boolean mustCheckName(final DetailAST ast) {\n-        boolean checkName = true;\n-        final DetailAST parent = ast.getParent();\n-        if ((this.ignoreOverridden && isOverriddenMethod(ast)) || parent.getType() == 96 || parent.getParent().getType() == 181 || CheckUtil.isReceiverParameter(ast) || !this.matchAccessModifiers(CheckUtil.getAccessModifierFromModifiersToken(parent.getParent()))) {\n-            checkName = false;\n+    protected boolean mustCheckName(final DetailAST detailAST) {\n+        boolean b = true;\n+        final DetailAST parent = detailAST.getParent();\n+        if ((this.ignoreOverridden && isOverriddenMethod(detailAST)) || parent.getType() == 96 || parent.getParent().getType() == 181 || CheckUtil.isReceiverParameter(detailAST) || !this.matchAccessModifiers(CheckUtil.getAccessModifierFromModifiersToken(parent.getParent()))) {\n+            b = false;\n         }\n-        return checkName;\n+        return b;\n     }\n     \n-    private boolean matchAccessModifiers(final AccessModifierOption accessModifier) {\n-        return Arrays.stream(this.accessModifiers).anyMatch(modifier -> modifier == accessModifier);\n+    private boolean matchAccessModifiers(final AccessModifierOption accessModifierOption) {\n+        return Arrays.stream(this.accessModifiers).anyMatch(accessModifierOption3 -> accessModifierOption3 == accessModifierOption2);\n     }\n     \n-    private static boolean isOverriddenMethod(final DetailAST ast) {\n-        boolean overridden = false;\n-        final DetailAST parent = ast.getParent().getParent();\n-        final Optional<DetailAST> annotation = Optional.ofNullable(parent.getFirstChild().getFirstChild());\n-        if (annotation.isPresent()) {\n-            final Optional<DetailAST> overrideToken = Optional.ofNullable(((DetailAST)annotation.get()).findFirstToken(58));\n-            if (overrideToken.isPresent() && \"Override\".equals(((DetailAST)overrideToken.get()).getText())) {\n-                overridden = true;\n+    private static boolean isOverriddenMethod(final DetailAST detailAST) {\n+        boolean b = false;\n+        final Optional<DetailAST> ofNullable = Optional.ofNullable(detailAST.getParent().getParent().getFirstChild().getFirstChild());\n+        if (ofNullable.isPresent()) {\n+            final Optional<DetailAST> ofNullable2 = Optional.ofNullable(((DetailAST)ofNullable.get()).findFirstToken(58));\n+            if (ofNullable2.isPresent() && \"Override\".equals(((DetailAST)ofNullable2.get()).getText())) {\n+                b = true;\n             }\n         }\n-        return overridden;\n+        return b;\n     }\n }\n"}]}
