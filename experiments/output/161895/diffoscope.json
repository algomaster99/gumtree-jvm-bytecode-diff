{"diffoscope-json-version": 1, "source1": "first/HexTest.class", "source2": "second/HexTest.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -157,16 +157,16 @@\n         this.checkDecodeHexByteBufferOddCharacters(bb);\n     }\n     \n     @Test\n     public void testDecodeByteBufferWithLimitOddCharacters() {\n         final ByteBuffer bb = this.allocate(10);\n         bb.put(1, (byte)65);\n-        bb.position(1);\n-        bb.limit(2);\n+        bb.position();\n+        bb.limit();\n         this.checkDecodeHexByteBufferOddCharacters(bb);\n     }\n     \n     @Test\n     public void testDecodeHexCharArrayEmpty() throws DecoderException {\n         Assertions.assertArrayEquals(new byte[0], Hex.decodeHex(new char[0]));\n     }\n@@ -224,16 +224,16 @@\n     }\n     \n     @Test\n     public void testDecodeByteBufferWithLimit() throws DecoderException {\n         final ByteBuffer bb = this.getByteBufferUtf8(\"000102030405060708090a0b0c0d0e0f\");\n         final byte[] expected = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n         for (int i = 0; i < 15; ++i) {\n-            bb.position(i * 2);\n-            bb.limit(i * 2 + 4);\n+            bb.position();\n+            bb.limit();\n             Assertions.assertEquals((Object)new String(Arrays.copyOfRange(expected, i, i + 2)), (Object)new String(new Hex().decode(bb)));\n             Assertions.assertEquals(0, bb.remaining());\n         }\n     }\n     \n     @Test\n     public void testEncodeByteArrayEmpty() {\n@@ -394,16 +394,16 @@\n         final ByteBuffer bb = this.allocate(16);\n         for (int i = 0; i < 16; ++i) {\n             bb.put((byte)i);\n         }\n         bb.flip();\n         final String expected = \"000102030405060708090a0b0c0d0e0f\";\n         for (int j = 0; j < 15; ++j) {\n-            bb.position(j);\n-            bb.limit(j + 2);\n+            bb.position();\n+            bb.limit();\n             Assertions.assertEquals((Object)\"000102030405060708090a0b0c0d0e0f\".substring(j * 2, j * 2 + 4), (Object)new String(Hex.encodeHex(bb)));\n             Assertions.assertEquals(0, bb.remaining());\n         }\n     }\n     \n     @Test\n     public void testEncodeHexPartialInput() {\n@@ -441,19 +441,19 @@\n         final String c = Hex.encodeHexString(this.allocate(36));\n         Assertions.assertEquals((Object)\"000000000000000000000000000000000000000000000000000000000000000000000000\", (Object)c);\n     }\n     \n     @Test\n     public void testEncodeHexByteString_ByteBufferOfZeroesWithLimit() {\n         final ByteBuffer bb = this.allocate(36);\n-        bb.limit(3);\n+        bb.limit();\n         Assertions.assertEquals((Object)\"000000\", (Object)Hex.encodeHexString(bb));\n         Assertions.assertEquals(0, bb.remaining());\n-        bb.position(1);\n-        bb.limit(3);\n+        bb.position();\n+        bb.limit();\n         Assertions.assertEquals((Object)\"0000\", (Object)Hex.encodeHexString(bb));\n         Assertions.assertEquals(0, bb.remaining());\n     }\n     \n     @Test\n     public void testEncodeHexByteString_ByteArrayOfZeroes() {\n         final String c = Hex.encodeHexString(new byte[36]);\n@@ -486,26 +486,26 @@\n         Assertions.assertEquals((Object)\"0A\", (Object)Hex.encodeHexString(bb, false));\n     }\n     \n     @Test\n     public void testEncodeHexByteString_ByteBufferWithLimitBoolean_ToLowerCase() {\n         final ByteBuffer bb = this.allocate(4);\n         bb.put(1, (byte)10);\n-        bb.position(1);\n-        bb.limit(2);\n+        bb.position();\n+        bb.limit();\n         Assertions.assertEquals((Object)\"0a\", (Object)Hex.encodeHexString(bb, true));\n         Assertions.assertEquals(0, bb.remaining());\n     }\n     \n     @Test\n     public void testEncodeHexByteString_ByteBufferWithLimitBoolean_ToUpperCase() {\n         final ByteBuffer bb = this.allocate(4);\n         bb.put(1, (byte)10);\n-        bb.position(1);\n-        bb.limit(2);\n+        bb.position();\n+        bb.limit();\n         Assertions.assertEquals((Object)\"0A\", (Object)Hex.encodeHexString(bb, false));\n         Assertions.assertEquals(0, bb.remaining());\n     }\n     \n     @Test\n     public void testEncodeHexReadOnlyByteBuffer() {\n         final char[] chars = Hex.encodeHex(ByteBuffer.wrap(new byte[] { 10 }).asReadOnlyBuffer());\n"}]}
