{"diffoscope-json-version": 1, "source1": "first/HuffmanDecoder$UncompressedState.class", "source2": "second/HuffmanDecoder$UncompressedState.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,44 +7,44 @@\n private class UncompressedState extends HuffmanDecoder.DecoderState\n {\n     private final long blockLength;\n     private long read;\n     \n     private UncompressedState(final HuffmanDecoder this$0, final long blockLength) {\n         this.this$0 = this$0;\n-        super((HuffmanDecoder.HuffmanDecoder$1)null);\n+        super((HuffmanDecoder.DecoderState)null);\n         this.blockLength = blockLength;\n     }\n     \n     int available() throws IOException {\n-        return (int)Math.min(this.blockLength - this.read, HuffmanDecoder.access$200(this.this$0).bitsAvailable() / 8L);\n+        return (int)Math.min(this.blockLength - this.read, HuffmanDecoder.access$1(this.this$0).bitsAvailable() / 8L);\n     }\n     \n     boolean hasData() {\n         return this.read < this.blockLength;\n     }\n     \n     int read(final byte[] b, final int off, final int len) throws IOException {\n         if (len == 0) {\n             return 0;\n         }\n         final int max = (int)Math.min(this.blockLength - this.read, len);\n         int readNow;\n         for (int readSoFar = 0; readSoFar < max; readSoFar += readNow) {\n-            if (HuffmanDecoder.access$200(this.this$0).bitsCached() > 0) {\n-                final byte next = (byte)HuffmanDecoder.access$600(this.this$0, 8);\n-                b[off + readSoFar] = HuffmanDecoder.access$400(this.this$0).add(next);\n+            if (HuffmanDecoder.access$1(this.this$0).bitsCached() > 0) {\n+                final byte next = (byte)HuffmanDecoder.access$5(this.this$0, 8);\n+                b[off + readSoFar] = HuffmanDecoder.access$3(this.this$0).add(next);\n                 readNow = 1;\n             }\n             else {\n-                readNow = HuffmanDecoder.access$800(this.this$0).read(b, off + readSoFar, max - readSoFar);\n+                readNow = HuffmanDecoder.access$7(this.this$0).read(b, off + readSoFar, max - readSoFar);\n                 if (readNow == -1) {\n                     throw new EOFException(\"Truncated Deflate64 Stream\");\n                 }\n-                HuffmanDecoder.access$400(this.this$0).add(b, off + readSoFar, readNow);\n+                HuffmanDecoder.access$3(this.this$0).add(b, off + readSoFar, readNow);\n             }\n             this.read += readNow;\n         }\n         return max;\n     }\n     \n     HuffmanState state() {\n"}]}
