{"diffoscope-json-version": 1, "source1": "first/ArchiveStreamFactory.class", "source2": "second/ArchiveStreamFactory.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -48,14 +48,18 @@\n     public static final String ZIP = \"zip\";\n     public static final String SEVEN_Z = \"7z\";\n     private final String encoding;\n     private volatile String entryEncoding;\n     private SortedMap<String, ArchiveStreamProvider> archiveInputStreamProviders;\n     private SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders;\n     \n+    static {\n+        DEFAULT = new ArchiveStreamFactory();\n+    }\n+    \n     private static Iterable<ArchiveStreamProvider> archiveStreamProviderIterable() {\n         return ServiceLoader.load(ArchiveStreamProvider.class, ClassLoader.getSystemClassLoader());\n     }\n     \n     public static String detect(final InputStream in) throws ArchiveException {\n         if (in == null) {\n             throw new IllegalArgumentException(\"Stream must not be null.\");\n@@ -119,44 +123,45 @@\n             TarArchiveInputStream tais = null;\n             try {\n                 tais = new TarArchiveInputStream((InputStream)new ByteArrayInputStream(tarHeader));\n                 if (tais.getNextTarEntry().isCheckSumOK()) {\n                     return \"tar\";\n                 }\n             }\n-            catch (final Exception ex) {}\n+            catch (final Exception ex) {\n+                throw new ArchiveException(\"No Archiver found for the stream signature\");\n+            }\n             finally {\n                 IOUtils.closeQuietly((Closeable)tais);\n             }\n+            IOUtils.closeQuietly((Closeable)tais);\n         }\n         throw new ArchiveException(\"No Archiver found for the stream signature\");\n     }\n     \n     public static SortedMap<String, ArchiveStreamProvider> findAvailableArchiveInputStreamProviders() {\n         return AccessController.doPrivileged(() -> {\n             final TreeMap<String, ArchiveStreamProvider> map = new TreeMap<String, ArchiveStreamProvider>();\n             putAll(ArchiveStreamFactory.DEFAULT.getInputStreamArchiveNames(), (ArchiveStreamProvider)ArchiveStreamFactory.DEFAULT, map);\n-            archiveStreamProviderIterable().forEach(provider -> putAll(provider.getInputStreamArchiveNames(), provider, map));\n+            archiveStreamProviderIterable().forEach(provider -> putAll(provider.getInputStreamArchiveNames(), provider, map2));\n             return map;\n         });\n     }\n     \n     public static SortedMap<String, ArchiveStreamProvider> findAvailableArchiveOutputStreamProviders() {\n         return AccessController.doPrivileged(() -> {\n             final TreeMap<String, ArchiveStreamProvider> map = new TreeMap<String, ArchiveStreamProvider>();\n             putAll(ArchiveStreamFactory.DEFAULT.getOutputStreamArchiveNames(), (ArchiveStreamProvider)ArchiveStreamFactory.DEFAULT, map);\n-            archiveStreamProviderIterable().forEach(provider -> putAll(provider.getOutputStreamArchiveNames(), provider, map));\n+            archiveStreamProviderIterable().forEach(provider -> putAll(provider.getOutputStreamArchiveNames(), provider, map2));\n             return map;\n         });\n     }\n     \n     static void putAll(final Set<String> names, final ArchiveStreamProvider provider, final TreeMap<String, ArchiveStreamProvider> map) {\n-        names.forEach(name -> {\n-            final ArchiveStreamProvider archiveStreamProvider = (ArchiveStreamProvider)map.put(toKey(name), provider);\n-        });\n+        names.forEach(name -> treeMap.put(toKey(name), value));\n     }\n     \n     private static String toKey(final String name) {\n         return name.toUpperCase(Locale.ROOT);\n     }\n     \n     public ArchiveStreamFactory() {\n@@ -314,12 +319,8 @@\n     @Deprecated\n     public void setEntryEncoding(final String entryEncoding) {\n         if (this.encoding != null) {\n             throw new IllegalStateException(\"Cannot overide encoding set by the constructor\");\n         }\n         this.entryEncoding = entryEncoding;\n     }\n-    \n-    static {\n-        DEFAULT = new ArchiveStreamFactory();\n-    }\n }\n"}]}
