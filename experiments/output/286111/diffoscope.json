{"diffoscope-json-version": 1, "source1": "first/RFC1522Codec.class", "source2": "second/RFC1522Codec.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,54 +1,54 @@\n-  SHA-256 checksum b5ff7a2adfd8df0b7024bb7eea1674f7fe8091d3a524d3931b8f3df888ce4e26\n+  SHA-256 checksum 8c7de2a6ecece1c0bd07d9cbe1a3d42330170bcc4e5207fb3c3b89bf178f910d\n   Compiled from \"RFC1522Codec.java\"\n abstract class org.apache.commons.codec.net.RFC1522Codec\n   minor version: 0\n   major version: 52\n   flags: (0x0420) ACC_SUPER, ACC_ABSTRACT\n   this_class: #4                          // org/apache/commons/codec/net/RFC1522Codec\n   super_class: #37                        // java/lang/Object\n   interfaces: 0, fields: 3, methods: 7, attributes: 1\n Constant pool:\n-    #1 = Methodref          #37.#66       // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #67           // java/lang/StringBuilder\n-    #3 = Methodref          #2.#66        // java/lang/StringBuilder.\"<init>\":()V\n-    #4 = Class              #68           // org/apache/commons/codec/net/RFC1522Codec\n-    #5 = String             #69           // =?\n-    #6 = Methodref          #2.#70        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #7 = Methodref          #2.#71        // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-    #8 = Methodref          #2.#72        // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-    #9 = Methodref          #4.#73        // org/apache/commons/codec/net/RFC1522Codec.getEncoding:()Ljava/lang/String;\n-   #10 = Methodref          #35.#74       // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-   #11 = Methodref          #4.#75        // org/apache/commons/codec/net/RFC1522Codec.doEncoding:([B)[B\n-   #12 = Methodref          #76.#77       // org/apache/commons/codec/binary/StringUtils.newStringUsAscii:([B)Ljava/lang/String;\n-   #13 = String             #78           // ?=\n-   #14 = Methodref          #2.#79        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #15 = Methodref          #80.#81       // java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n-   #16 = Methodref          #4.#82        // org/apache/commons/codec/net/RFC1522Codec.encodeText:(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;\n-   #17 = Methodref          #35.#83       // java/lang/String.startsWith:(Ljava/lang/String;)Z\n-   #18 = Methodref          #35.#84       // java/lang/String.endsWith:(Ljava/lang/String;)Z\n-   #19 = Class              #85           // org/apache/commons/codec/DecoderException\n-   #20 = String             #86           // RFC 1522 violation: malformed encoded content\n-   #21 = Methodref          #19.#87       // org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n-   #22 = Methodref          #35.#88       // java/lang/String.length:()I\n-   #23 = Methodref          #35.#89       // java/lang/String.indexOf:(II)I\n-   #24 = String             #90           // RFC 1522 violation: charset token not found\n-   #25 = Methodref          #35.#91       // java/lang/String.substring:(II)Ljava/lang/String;\n-   #26 = String             #92           //\n-   #27 = Methodref          #35.#93       // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #28 = String             #94           // RFC 1522 violation: charset not specified\n-   #29 = String             #95           // RFC 1522 violation: encoding token not found\n-   #30 = Methodref          #35.#96       // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n-   #31 = String             #97           // This codec cannot decode\n-   #32 = String             #98           //  encoded content\n-   #33 = Methodref          #76.#99       // org/apache/commons/codec/binary/StringUtils.getBytesUsAscii:(Ljava/lang/String;)[B\n-   #34 = Methodref          #4.#100       // org/apache/commons/codec/net/RFC1522Codec.doDecoding:([B)[B\n-   #35 = Class              #101          // java/lang/String\n-   #36 = Methodref          #35.#102      // java/lang/String.\"<init>\":([BLjava/lang/String;)V\n-   #37 = Class              #103          // java/lang/Object\n+    #1 = Methodref          #37.#65       // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #66           // java/lang/StringBuilder\n+    #3 = Methodref          #2.#65        // java/lang/StringBuilder.\"<init>\":()V\n+    #4 = Class              #67           // org/apache/commons/codec/net/RFC1522Codec\n+    #5 = String             #68           // =?\n+    #6 = Methodref          #2.#69        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+    #7 = Methodref          #2.#70        // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+    #8 = Methodref          #2.#71        // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+    #9 = Methodref          #4.#72        // org/apache/commons/codec/net/RFC1522Codec.getEncoding:()Ljava/lang/String;\n+   #10 = Methodref          #35.#73       // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+   #11 = Methodref          #4.#74        // org/apache/commons/codec/net/RFC1522Codec.doEncoding:([B)[B\n+   #12 = Methodref          #75.#76       // org/apache/commons/codec/binary/StringUtils.newStringUsAscii:([B)Ljava/lang/String;\n+   #13 = String             #77           // ?=\n+   #14 = Methodref          #2.#78        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #15 = Methodref          #79.#80       // java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n+   #16 = Methodref          #4.#81        // org/apache/commons/codec/net/RFC1522Codec.encodeText:(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;\n+   #17 = Methodref          #35.#82       // java/lang/String.startsWith:(Ljava/lang/String;)Z\n+   #18 = Methodref          #35.#83       // java/lang/String.endsWith:(Ljava/lang/String;)Z\n+   #19 = Class              #84           // org/apache/commons/codec/DecoderException\n+   #20 = String             #85           // RFC 1522 violation: malformed encoded content\n+   #21 = Methodref          #19.#86       // org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n+   #22 = Methodref          #35.#87       // java/lang/String.length:()I\n+   #23 = Methodref          #35.#88       // java/lang/String.indexOf:(II)I\n+   #24 = String             #89           // RFC 1522 violation: charset token not found\n+   #25 = Methodref          #35.#90       // java/lang/String.substring:(II)Ljava/lang/String;\n+   #26 = String             #91           //\n+   #27 = Methodref          #35.#92       // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #28 = String             #93           // RFC 1522 violation: charset not specified\n+   #29 = String             #94           // RFC 1522 violation: encoding token not found\n+   #30 = Methodref          #35.#95       // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n+   #31 = String             #96           // This codec cannot decode\n+   #32 = String             #97           //  encoded content\n+   #33 = Methodref          #75.#98       // org/apache/commons/codec/binary/StringUtils.getBytesUsAscii:(Ljava/lang/String;)[B\n+   #34 = Methodref          #4.#99        // org/apache/commons/codec/net/RFC1522Codec.doDecoding:([B)[B\n+   #35 = Class              #100          // java/lang/String\n+   #36 = Methodref          #35.#101      // java/lang/String.\"<init>\":([BLjava/lang/String;)V\n+   #37 = Class              #102          // java/lang/Object\n    #38 = Utf8               SEP\n    #39 = Utf8               C\n    #40 = Utf8               ConstantValue\n    #41 = Integer            63\n    #42 = Utf8               POSTFIX\n    #43 = Utf8               Ljava/lang/String;\n    #44 = Utf8               PREFIX\n@@ -56,96 +56,95 @@\n    #46 = Utf8               ()V\n    #47 = Utf8               Code\n    #48 = Utf8               LineNumberTable\n    #49 = Utf8               encodeText\n    #50 = Utf8               (Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;\n    #51 = Utf8               StackMapTable\n    #52 = Utf8               Exceptions\n-   #53 = Class              #104          // org/apache/commons/codec/EncoderException\n+   #53 = Class              #103          // org/apache/commons/codec/EncoderException\n    #54 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #55 = Class              #105          // java/io/UnsupportedEncodingException\n+   #55 = Class              #104          // java/io/UnsupportedEncodingException\n    #56 = Utf8               decodeText\n    #57 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-   #58 = Class              #101          // java/lang/String\n-   #59 = Utf8               getEncoding\n-   #60 = Utf8               ()Ljava/lang/String;\n-   #61 = Utf8               doEncoding\n-   #62 = Utf8               ([B)[B\n-   #63 = Utf8               doDecoding\n-   #64 = Utf8               SourceFile\n-   #65 = Utf8               RFC1522Codec.java\n-   #66 = NameAndType        #45:#46       // \"<init>\":()V\n-   #67 = Utf8               java/lang/StringBuilder\n-   #68 = Utf8               org/apache/commons/codec/net/RFC1522Codec\n-   #69 = Utf8               =?\n-   #70 = NameAndType        #106:#107     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #71 = NameAndType        #106:#108     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #72 = NameAndType        #106:#109     // append:(C)Ljava/lang/StringBuilder;\n-   #73 = NameAndType        #59:#60       // getEncoding:()Ljava/lang/String;\n-   #74 = NameAndType        #110:#111     // getBytes:(Ljava/nio/charset/Charset;)[B\n-   #75 = NameAndType        #61:#62       // doEncoding:([B)[B\n-   #76 = Class              #112          // org/apache/commons/codec/binary/StringUtils\n-   #77 = NameAndType        #113:#114     // newStringUsAscii:([B)Ljava/lang/String;\n-   #78 = Utf8               ?=\n-   #79 = NameAndType        #115:#60      // toString:()Ljava/lang/String;\n-   #80 = Class              #116          // java/nio/charset/Charset\n-   #81 = NameAndType        #117:#118     // forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n-   #82 = NameAndType        #49:#50       // encodeText:(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;\n-   #83 = NameAndType        #119:#120     // startsWith:(Ljava/lang/String;)Z\n-   #84 = NameAndType        #121:#120     // endsWith:(Ljava/lang/String;)Z\n-   #85 = Utf8               org/apache/commons/codec/DecoderException\n-   #86 = Utf8               RFC 1522 violation: malformed encoded content\n-   #87 = NameAndType        #45:#122      // \"<init>\":(Ljava/lang/String;)V\n-   #88 = NameAndType        #123:#124     // length:()I\n-   #89 = NameAndType        #125:#126     // indexOf:(II)I\n-   #90 = Utf8               RFC 1522 violation: charset token not found\n-   #91 = NameAndType        #127:#128     // substring:(II)Ljava/lang/String;\n-   #92 = Utf8\n-   #93 = NameAndType        #129:#130     // equals:(Ljava/lang/Object;)Z\n-   #94 = Utf8               RFC 1522 violation: charset not specified\n-   #95 = Utf8               RFC 1522 violation: encoding token not found\n-   #96 = NameAndType        #131:#120     // equalsIgnoreCase:(Ljava/lang/String;)Z\n-   #97 = Utf8               This codec cannot decode\n-   #98 = Utf8                encoded content\n-   #99 = NameAndType        #132:#133     // getBytesUsAscii:(Ljava/lang/String;)[B\n-  #100 = NameAndType        #63:#62       // doDecoding:([B)[B\n-  #101 = Utf8               java/lang/String\n-  #102 = NameAndType        #45:#134      // \"<init>\":([BLjava/lang/String;)V\n-  #103 = Utf8               java/lang/Object\n-  #104 = Utf8               org/apache/commons/codec/EncoderException\n-  #105 = Utf8               java/io/UnsupportedEncodingException\n-  #106 = Utf8               append\n-  #107 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #108 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #109 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #110 = Utf8               getBytes\n-  #111 = Utf8               (Ljava/nio/charset/Charset;)[B\n-  #112 = Utf8               org/apache/commons/codec/binary/StringUtils\n-  #113 = Utf8               newStringUsAscii\n-  #114 = Utf8               ([B)Ljava/lang/String;\n-  #115 = Utf8               toString\n-  #116 = Utf8               java/nio/charset/Charset\n-  #117 = Utf8               forName\n-  #118 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/Charset;\n-  #119 = Utf8               startsWith\n-  #120 = Utf8               (Ljava/lang/String;)Z\n-  #121 = Utf8               endsWith\n-  #122 = Utf8               (Ljava/lang/String;)V\n-  #123 = Utf8               length\n-  #124 = Utf8               ()I\n-  #125 = Utf8               indexOf\n-  #126 = Utf8               (II)I\n-  #127 = Utf8               substring\n-  #128 = Utf8               (II)Ljava/lang/String;\n-  #129 = Utf8               equals\n-  #130 = Utf8               (Ljava/lang/Object;)Z\n-  #131 = Utf8               equalsIgnoreCase\n-  #132 = Utf8               getBytesUsAscii\n-  #133 = Utf8               (Ljava/lang/String;)[B\n-  #134 = Utf8               ([BLjava/lang/String;)V\n+   #58 = Utf8               getEncoding\n+   #59 = Utf8               ()Ljava/lang/String;\n+   #60 = Utf8               doEncoding\n+   #61 = Utf8               ([B)[B\n+   #62 = Utf8               doDecoding\n+   #63 = Utf8               SourceFile\n+   #64 = Utf8               RFC1522Codec.java\n+   #65 = NameAndType        #45:#46       // \"<init>\":()V\n+   #66 = Utf8               java/lang/StringBuilder\n+   #67 = Utf8               org/apache/commons/codec/net/RFC1522Codec\n+   #68 = Utf8               =?\n+   #69 = NameAndType        #105:#106     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #70 = NameAndType        #105:#107     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #71 = NameAndType        #105:#108     // append:(C)Ljava/lang/StringBuilder;\n+   #72 = NameAndType        #58:#59       // getEncoding:()Ljava/lang/String;\n+   #73 = NameAndType        #109:#110     // getBytes:(Ljava/nio/charset/Charset;)[B\n+   #74 = NameAndType        #60:#61       // doEncoding:([B)[B\n+   #75 = Class              #111          // org/apache/commons/codec/binary/StringUtils\n+   #76 = NameAndType        #112:#113     // newStringUsAscii:([B)Ljava/lang/String;\n+   #77 = Utf8               ?=\n+   #78 = NameAndType        #114:#59      // toString:()Ljava/lang/String;\n+   #79 = Class              #115          // java/nio/charset/Charset\n+   #80 = NameAndType        #116:#117     // forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n+   #81 = NameAndType        #49:#50       // encodeText:(Ljava/lang/String;Ljava/nio/charset/Charset;)Ljava/lang/String;\n+   #82 = NameAndType        #118:#119     // startsWith:(Ljava/lang/String;)Z\n+   #83 = NameAndType        #120:#119     // endsWith:(Ljava/lang/String;)Z\n+   #84 = Utf8               org/apache/commons/codec/DecoderException\n+   #85 = Utf8               RFC 1522 violation: malformed encoded content\n+   #86 = NameAndType        #45:#121      // \"<init>\":(Ljava/lang/String;)V\n+   #87 = NameAndType        #122:#123     // length:()I\n+   #88 = NameAndType        #124:#125     // indexOf:(II)I\n+   #89 = Utf8               RFC 1522 violation: charset token not found\n+   #90 = NameAndType        #126:#127     // substring:(II)Ljava/lang/String;\n+   #91 = Utf8\n+   #92 = NameAndType        #128:#129     // equals:(Ljava/lang/Object;)Z\n+   #93 = Utf8               RFC 1522 violation: charset not specified\n+   #94 = Utf8               RFC 1522 violation: encoding token not found\n+   #95 = NameAndType        #130:#119     // equalsIgnoreCase:(Ljava/lang/String;)Z\n+   #96 = Utf8               This codec cannot decode\n+   #97 = Utf8                encoded content\n+   #98 = NameAndType        #131:#132     // getBytesUsAscii:(Ljava/lang/String;)[B\n+   #99 = NameAndType        #62:#61       // doDecoding:([B)[B\n+  #100 = Utf8               java/lang/String\n+  #101 = NameAndType        #45:#133      // \"<init>\":([BLjava/lang/String;)V\n+  #102 = Utf8               java/lang/Object\n+  #103 = Utf8               org/apache/commons/codec/EncoderException\n+  #104 = Utf8               java/io/UnsupportedEncodingException\n+  #105 = Utf8               append\n+  #106 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #107 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #108 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #109 = Utf8               getBytes\n+  #110 = Utf8               (Ljava/nio/charset/Charset;)[B\n+  #111 = Utf8               org/apache/commons/codec/binary/StringUtils\n+  #112 = Utf8               newStringUsAscii\n+  #113 = Utf8               ([B)Ljava/lang/String;\n+  #114 = Utf8               toString\n+  #115 = Utf8               java/nio/charset/Charset\n+  #116 = Utf8               forName\n+  #117 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/Charset;\n+  #118 = Utf8               startsWith\n+  #119 = Utf8               (Ljava/lang/String;)Z\n+  #120 = Utf8               endsWith\n+  #121 = Utf8               (Ljava/lang/String;)V\n+  #122 = Utf8               length\n+  #123 = Utf8               ()I\n+  #124 = Utf8               indexOf\n+  #125 = Utf8               (II)I\n+  #126 = Utf8               substring\n+  #127 = Utf8               (II)Ljava/lang/String;\n+  #128 = Utf8               equals\n+  #129 = Utf8               (Ljava/lang/Object;)Z\n+  #130 = Utf8               equalsIgnoreCase\n+  #131 = Utf8               getBytesUsAscii\n+  #132 = Utf8               (Ljava/lang/String;)[B\n+  #133 = Utf8               ([BLjava/lang/String;)V\n {\n   protected static final char SEP = '?';\n     descriptor: C\n     flags: (0x001c) ACC_PROTECTED, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 63\n \n   protected static final java.lang.String POSTFIX = \"?=\";\n"}]}
