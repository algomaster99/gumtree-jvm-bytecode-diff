{"diffoscope-json-version": 1, "source1": "first/ScatterZipOutputStream$ZipEntryWriter.class", "source2": "second/ScatterZipOutputStream$ZipEntryWriter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,26 +9,47 @@\n \n public static class ZipEntryWriter implements Closeable\n {\n     private final Iterator<ScatterZipOutputStream.CompressedEntry> itemsIterator;\n     private final InputStream itemsIteratorData;\n     \n     public ZipEntryWriter(final ScatterZipOutputStream scatter) throws IOException {\n-        ScatterZipOutputStream.access$000(scatter).closeForWriting();\n-        this.itemsIterator = ScatterZipOutputStream.access$100(scatter).iterator();\n-        this.itemsIteratorData = ScatterZipOutputStream.access$000(scatter).getInputStream();\n+        ScatterZipOutputStream.access$0(scatter).closeForWriting();\n+        this.itemsIterator = ScatterZipOutputStream.access$1(scatter).iterator();\n+        this.itemsIteratorData = ScatterZipOutputStream.access$0(scatter).getInputStream();\n     }\n     \n     @Override\n     public void close() throws IOException {\n         if (this.itemsIteratorData != null) {\n             this.itemsIteratorData.close();\n         }\n     }\n     \n     public void writeNextZipEntry(final ZipArchiveOutputStream target) throws IOException {\n         final ScatterZipOutputStream.CompressedEntry compressedEntry = (ScatterZipOutputStream.CompressedEntry)this.itemsIterator.next();\n-        try (final BoundedInputStream rawStream = new BoundedInputStream(this.itemsIteratorData, compressedEntry.compressedSize)) {\n-            target.addRawArchiveEntry(compressedEntry.transferToArchiveEntry(), (InputStream)rawStream);\n+        Throwable t = null;\n+        try {\n+            final BoundedInputStream rawStream = new BoundedInputStream(this.itemsIteratorData, compressedEntry.compressedSize);\n+            try {\n+                target.addRawArchiveEntry(compressedEntry.transferToArchiveEntry(), (InputStream)rawStream);\n+            }\n+            finally {\n+                if (rawStream != null) {\n+                    rawStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n }\n"}]}
