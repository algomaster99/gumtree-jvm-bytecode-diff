{"diffoscope-json-version": 1, "source1": "first/IcBands$IcTuple.class", "source2": "second/IcBands$IcTuple.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,40 +6,39 @@\n class IcTuple implements Comparable<IcTuple>\n {\n     protected CPClass C;\n     protected int F;\n     protected CPClass C2;\n     protected CPUTF8 N;\n     \n-    public IcTuple(final IcBands this$0, final CPClass C, final int F, final CPClass C2, final CPUTF8 N) {\n+    public IcTuple(final IcBands this$0, final CPClass c, final int f, final CPClass c2, final CPUTF8 n) {\n         this.this$0 = this$0;\n-        this.C = C;\n-        this.F = F;\n-        this.C2 = C2;\n-        this.N = N;\n+        this.C = c;\n+        this.F = f;\n+        this.C2 = c2;\n+        this.N = n;\n     }\n     \n     @Override\n     public boolean equals(final Object o) {\n         if (o instanceof IcTuple) {\n-            final IcTuple icT = (IcTuple)o;\n-            return this.C.equals(icT.C) && this.F == icT.F && Objects.equals(this.C2, icT.C2) && Objects.equals(this.N, icT.N);\n+            final IcTuple icTuple = (IcTuple)o;\n+            return this.C.equals(icTuple.C) && this.F == icTuple.F && Objects.equals(this.C2, icTuple.C2) && Objects.equals(this.N, icTuple.N);\n         }\n         return false;\n     }\n     \n     @Override\n     public String toString() {\n         return this.C.toString();\n     }\n     \n     @Override\n-    public int compareTo(final IcTuple arg0) {\n-        return this.C.compareTo(arg0.C);\n+    public int compareTo(final IcTuple icTuple) {\n+        return this.C.compareTo(icTuple.C);\n     }\n     \n     public boolean isAnonymous() {\n-        final String className = this.C.toString();\n-        final String innerName = className.substring(className.lastIndexOf(36) + 1);\n-        return Character.isDigit(innerName.charAt(0));\n+        final String string = this.C.toString();\n+        return Character.isDigit(string.substring(string.lastIndexOf(36) + 1).charAt(0));\n     }\n }\n"}]}
