{"diffoscope-json-version": 1, "source1": "first/SystemUtils.class", "source2": "second/SystemUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -124,42 +124,42 @@\n         return SystemUtils.IS_OS_WINDOWS ? System.getenv(\"COMPUTERNAME\") : System.getenv(\"HOSTNAME\");\n     }\n     \n     public static File getJavaIoTmpDir() {\n         return new File(System.getProperty(\"java.io.tmpdir\"));\n     }\n     \n-    private static boolean getJavaVersionMatches(final String versionPrefix) {\n-        return isJavaVersionMatch(SystemUtils.JAVA_SPECIFICATION_VERSION, versionPrefix);\n+    private static boolean getJavaVersionMatches(final String s) {\n+        return isJavaVersionMatch(SystemUtils.JAVA_SPECIFICATION_VERSION, s);\n     }\n     \n-    private static boolean getOsMatches(final String osNamePrefix, final String osVersionPrefix) {\n-        return isOSMatch(SystemUtils.OS_NAME, SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);\n+    private static boolean getOsMatches(final String s, final String s2) {\n+        return isOSMatch(SystemUtils.OS_NAME, SystemUtils.OS_VERSION, s, s2);\n     }\n     \n-    private static boolean getOsMatchesName(final String osNamePrefix) {\n-        return isOSNameMatch(SystemUtils.OS_NAME, osNamePrefix);\n+    private static boolean getOsMatchesName(final String s) {\n+        return isOSNameMatch(SystemUtils.OS_NAME, s);\n     }\n     \n-    private static String getSystemProperty(final String property) {\n+    private static String getSystemProperty(final String key) {\n         try {\n-            return System.getProperty(property);\n+            return System.getProperty(key);\n         }\n         catch (final SecurityException ex) {\n             return null;\n         }\n     }\n     \n-    public static String getEnvironmentVariable(final String name, final String defaultValue) {\n+    public static String getEnvironmentVariable(final String name, final String s) {\n         try {\n-            final String value = System.getenv(name);\n-            return (value == null) ? defaultValue : value;\n+            final String getenv = System.getenv(name);\n+            return (getenv == null) ? s : getenv;\n         }\n         catch (final SecurityException ex) {\n-            return defaultValue;\n+            return s;\n         }\n     }\n     \n     public static File getUserDir() {\n         return new File(System.getProperty(\"user.dir\"));\n     }\n     \n@@ -167,50 +167,50 @@\n         return new File(System.getProperty(\"user.home\"));\n     }\n     \n     public static String getUserName() {\n         return System.getProperty(\"user.name\");\n     }\n     \n-    public static String getUserName(final String defaultValue) {\n-        return System.getProperty(\"user.name\", defaultValue);\n+    public static String getUserName(final String def) {\n+        return System.getProperty(\"user.name\", def);\n     }\n     \n     public static boolean isJavaAwtHeadless() {\n         return Boolean.TRUE.toString().equals(SystemUtils.JAVA_AWT_HEADLESS);\n     }\n     \n-    public static boolean isJavaVersionAtLeast(final JavaVersion requiredVersion) {\n-        return SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);\n+    public static boolean isJavaVersionAtLeast(final JavaVersion javaVersion) {\n+        return SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(javaVersion);\n     }\n     \n-    public static boolean isJavaVersionAtMost(final JavaVersion requiredVersion) {\n-        return SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.atMost(requiredVersion);\n+    public static boolean isJavaVersionAtMost(final JavaVersion javaVersion) {\n+        return SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.atMost(javaVersion);\n     }\n     \n-    static boolean isJavaVersionMatch(final String version, final String versionPrefix) {\n-        return version != null && version.startsWith(versionPrefix);\n+    static boolean isJavaVersionMatch(final String s, final String prefix) {\n+        return s != null && s.startsWith(prefix);\n     }\n     \n-    static boolean isOSMatch(final String osName, final String osVersion, final String osNamePrefix, final String osVersionPrefix) {\n-        return osName != null && osVersion != null && isOSNameMatch(osName, osNamePrefix) && isOSVersionMatch(osVersion, osVersionPrefix);\n+    static boolean isOSMatch(final String s, final String s2, final String s3, final String s4) {\n+        return s != null && s2 != null && isOSNameMatch(s, s3) && isOSVersionMatch(s2, s4);\n     }\n     \n-    static boolean isOSNameMatch(final String osName, final String osNamePrefix) {\n-        return osName != null && osName.startsWith(osNamePrefix);\n+    static boolean isOSNameMatch(final String s, final String prefix) {\n+        return s != null && s.startsWith(prefix);\n     }\n     \n-    static boolean isOSVersionMatch(final String osVersion, final String osVersionPrefix) {\n-        if (StringUtils.isEmpty((CharSequence)osVersion)) {\n+    static boolean isOSVersionMatch(final String s, final String s2) {\n+        if (StringUtils.isEmpty((CharSequence)s)) {\n             return false;\n         }\n-        final String[] versionPrefixParts = osVersionPrefix.split(\"\\\\.\");\n-        final String[] versionParts = osVersion.split(\"\\\\.\");\n-        for (int i = 0; i < Math.min(versionPrefixParts.length, versionParts.length); ++i) {\n-            if (!versionPrefixParts[i].equals(versionParts[i])) {\n+        final String[] split = s2.split(\"\\\\.\");\n+        final String[] split2 = s.split(\"\\\\.\");\n+        for (int i = 0; i < Math.min(split.length, split2.length); ++i) {\n+            if (!split[i].equals(split2[i])) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n     static {\n"}]}
