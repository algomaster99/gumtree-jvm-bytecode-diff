{"diffoscope-json-version": 1, "source1": "first/ConstantUtf8.class", "source2": "second/ConstantUtf8.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,42 +21,41 @@\n         ConstantUtf8.Cache.access$200().clear();\n     }\n     \n     static synchronized void clearStats() {\n         ConstantUtf8.hits = (ConstantUtf8.considered = (ConstantUtf8.skipped = (ConstantUtf8.created = 0)));\n     }\n     \n-    public static ConstantUtf8 getCachedInstance(final String value) {\n-        if (value.length() > ConstantUtf8.Cache.access$300()) {\n+    public static ConstantUtf8 getCachedInstance(final String s) {\n+        if (s.length() > ConstantUtf8.Cache.access$300()) {\n             ++ConstantUtf8.skipped;\n-            return new ConstantUtf8(value);\n+            return new ConstantUtf8(s);\n         }\n         ++ConstantUtf8.considered;\n         synchronized (ConstantUtf8.class) {\n-            ConstantUtf8 result = (ConstantUtf8)ConstantUtf8.Cache.access$200().get(value);\n-            if (result != null) {\n+            final ConstantUtf8 constantUtf8 = (ConstantUtf8)ConstantUtf8.Cache.access$200().get(s);\n+            if (constantUtf8 != null) {\n                 ++ConstantUtf8.hits;\n-                return result;\n+                return constantUtf8;\n             }\n-            result = new ConstantUtf8(value);\n-            ConstantUtf8.Cache.access$200().put(value, result);\n-            return result;\n+            final ConstantUtf8 value = new ConstantUtf8(s);\n+            ConstantUtf8.Cache.access$200().put(s, value);\n+            return value;\n         }\n     }\n     \n     public static ConstantUtf8 getInstance(final DataInput dataInput) throws IOException {\n         return getInstance(dataInput.readUTF());\n     }\n     \n-    public static ConstantUtf8 getInstance(final String value) {\n-        return ConstantUtf8.Cache.isEnabled() ? getCachedInstance(value) : new ConstantUtf8(value);\n+    public static ConstantUtf8 getInstance(final String s) {\n+        return ConstantUtf8.Cache.isEnabled() ? getCachedInstance(s) : new ConstantUtf8(s);\n     }\n     \n     static void printStats() {\n-        final String prefix = \"[Apache Commons BCEL]\";\n         System.err.printf(\"%s Cache hit %,d/%,d, %d skipped.%n\", \"[Apache Commons BCEL]\", Integer.valueOf(ConstantUtf8.hits), Integer.valueOf(ConstantUtf8.considered), Integer.valueOf(ConstantUtf8.skipped));\n         System.err.printf(\"%s Total of %,d ConstantUtf8 objects created.%n\", \"[Apache Commons BCEL]\", Integer.valueOf(ConstantUtf8.created));\n         System.err.printf(\"%s Configuration: %s=%,d, %s=%,d.%n\", \"[Apache Commons BCEL]\", \"bcel.maxcached\", Integer.valueOf(ConstantUtf8.Cache.access$000()), \"bcel.maxcached.size\", Integer.valueOf(ConstantUtf8.Cache.access$300()));\n     }\n     \n     public ConstantUtf8(final ConstantUtf8 constantUtf8) {\n         this(constantUtf8.getBytes());\n@@ -64,35 +63,35 @@\n     \n     ConstantUtf8(final DataInput dataInput) throws IOException {\n         super((byte)1);\n         this.value = dataInput.readUTF();\n         ++ConstantUtf8.created;\n     }\n     \n-    public ConstantUtf8(final String value) {\n+    public ConstantUtf8(final String obj) {\n         super((byte)1);\n-        this.value = Objects.requireNonNull(value, \"value\");\n+        this.value = Objects.requireNonNull(obj, \"value\");\n         ++ConstantUtf8.created;\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitConstantUtf8(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitConstantUtf8(this);\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        file.writeByte(super.getTag());\n-        file.writeUTF(this.value);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeByte(super.getTag());\n+        dataOutputStream.writeUTF(this.value);\n     }\n     \n     public String getBytes() {\n         return this.value;\n     }\n     \n     @Deprecated\n-    public void setBytes(final String bytes) {\n+    public void setBytes(final String s) {\n         throw new UnsupportedOperationException();\n     }\n     \n     public String toString() {\n         return super.toString() + \"(\\\"\" + Utility.replace(this.value, \"\\n\", \"\\\\n\") + \"\\\")\";\n     }\n     \n"}]}
