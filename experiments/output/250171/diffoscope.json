{"diffoscope-json-version": 1, "source1": "first/JavaLanguageParser$EnhancedForControlContext.class", "source2": "second/JavaLanguageParser$EnhancedForControlContext.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -30,27 +30,27 @@\n         return (JavaLanguageParser.TypeTypeContext)this.getRuleContext((Class)JavaLanguageParser.TypeTypeContext.class, 0);\n     }\n     \n     public List<JavaLanguageParser.VariableModifierContext> variableModifier() {\n         return this.getRuleContexts((Class)JavaLanguageParser.VariableModifierContext.class);\n     }\n     \n-    public JavaLanguageParser.VariableModifierContext variableModifier(final int i) {\n-        return (JavaLanguageParser.VariableModifierContext)this.getRuleContext((Class)JavaLanguageParser.VariableModifierContext.class, i);\n+    public JavaLanguageParser.VariableModifierContext variableModifier(final int n) {\n+        return (JavaLanguageParser.VariableModifierContext)this.getRuleContext((Class)JavaLanguageParser.VariableModifierContext.class, n);\n     }\n     \n-    public EnhancedForControlContext(final ParserRuleContext parent, final int invokingState) {\n-        super(parent, invokingState);\n+    public EnhancedForControlContext(final ParserRuleContext parserRuleContext, final int n) {\n+        super(parserRuleContext, n);\n         this.mods = new ArrayList();\n     }\n     \n     public int getRuleIndex() {\n         return 104;\n     }\n     \n-    public <T> T accept(final ParseTreeVisitor<? extends T> visitor) {\n-        if (visitor instanceof JavaLanguageParserVisitor) {\n-            return (T)((JavaLanguageParserVisitor)visitor).visitEnhancedForControl(this);\n+    public <T> T accept(final ParseTreeVisitor<? extends T> parseTreeVisitor) {\n+        if (parseTreeVisitor instanceof JavaLanguageParserVisitor) {\n+            return (T)((JavaLanguageParserVisitor)parseTreeVisitor).visitEnhancedForControl(this);\n         }\n-        return (T)visitor.visitChildren((RuleNode)this);\n+        return (T)parseTreeVisitor.visitChildren((RuleNode)this);\n     }\n }\n"}]}
