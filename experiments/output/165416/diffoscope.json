{"diffoscope-json-version": 1, "source1": "first/BinaryTree.class", "source2": "second/BinaryTree.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,50 +1,50 @@\n-  SHA-256 checksum 4f5d207f33c77c2726ce351b5159846b130f7599bbd599270d6972a56d92a9da\n+  SHA-256 checksum 5eb0966ae6e8be08b1f7fe08feaf761467eba1650aeae3a8dbdca31464867514\n   Compiled from \"BinaryTree.java\"\n class org.apache.commons.compress.archivers.zip.BinaryTree\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n   this_class: #18                         // org/apache/commons/compress/archivers/zip/BinaryTree\n   super_class: #33                        // java/lang/Object\n   interfaces: 0, fields: 3, methods: 4, attributes: 1\n Constant pool:\n-    #1 = Class              #98           // java/lang/IllegalArgumentException\n-    #2 = Class              #99           // java/lang/StringBuilder\n-    #3 = Methodref          #2.#100       // java/lang/StringBuilder.\"<init>\":()V\n-    #4 = String             #101          // totalNumberOfValues must be bigger than 0, is\n-    #5 = Methodref          #2.#102       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #6 = Methodref          #2.#103       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-    #7 = Methodref          #2.#104       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-    #8 = Methodref          #1.#105       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #9 = Methodref          #106.#107     // java/io/InputStream.read:()I\n-   #10 = Class              #108          // java/io/IOException\n-   #11 = String             #109          // Cannot read the size of the encoded tree, unexpected end of stream\n-   #12 = Methodref          #10.#105      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #13 = Methodref          #110.#111     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n-   #14 = Class              #112          // java/io/EOFException\n-   #15 = Methodref          #14.#100      // java/io/EOFException.\"<init>\":()V\n-   #16 = String             #113          // Number of values exceeds given total number of values\n-   #17 = Methodref          #114.#115     // java/lang/Math.max:(II)I\n-   #18 = Class              #116          // org/apache/commons/compress/archivers/zip/BinaryTree\n-   #19 = Methodref          #18.#117      // org/apache/commons/compress/archivers/zip/BinaryTree.\"<init>\":(I)V\n-   #20 = Methodref          #118.#119     // java/lang/Integer.reverse:(I)I\n-   #21 = Methodref          #18.#120      // org/apache/commons/compress/archivers/zip/BinaryTree.addLeaf:(IIII)V\n-   #22 = Methodref          #33.#100      // java/lang/Object.\"<init>\":()V\n-   #23 = String             #121          // depth must be bigger than 0 and not bigger than 30 but is\n-   #24 = Fieldref           #18.#122      // org/apache/commons/compress/archivers/zip/BinaryTree.tree:[I\n-   #25 = Methodref          #123.#124     // java/util/Arrays.fill:([II)V\n-   #26 = String             #125          // Tree value at index\n-   #27 = String             #126          //  has already been assigned (\n-   #28 = String             #127          // )\n-   #29 = Methodref          #128.#129     // org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n-   #30 = String             #130          // The child\n-   #31 = String             #131          //  of node at index\n-   #32 = String             #132          //  is not defined\n-   #33 = Class              #133          // java/lang/Object\n+    #1 = Class              #97           // java/lang/IllegalArgumentException\n+    #2 = Class              #98           // java/lang/StringBuilder\n+    #3 = Methodref          #2.#99        // java/lang/StringBuilder.\"<init>\":()V\n+    #4 = String             #100          // totalNumberOfValues must be bigger than 0, is\n+    #5 = Methodref          #2.#101       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+    #6 = Methodref          #2.#102       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+    #7 = Methodref          #2.#103       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+    #8 = Methodref          #1.#104       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+    #9 = Methodref          #75.#105      // java/io/InputStream.read:()I\n+   #10 = Class              #106          // java/io/IOException\n+   #11 = String             #107          // Cannot read the size of the encoded tree, unexpected end of stream\n+   #12 = Methodref          #10.#104      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #13 = Methodref          #108.#109     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+   #14 = Class              #110          // java/io/EOFException\n+   #15 = Methodref          #14.#99       // java/io/EOFException.\"<init>\":()V\n+   #16 = String             #111          // Number of values exceeds given total number of values\n+   #17 = Methodref          #112.#113     // java/lang/Math.max:(II)I\n+   #18 = Class              #114          // org/apache/commons/compress/archivers/zip/BinaryTree\n+   #19 = Methodref          #18.#115      // org/apache/commons/compress/archivers/zip/BinaryTree.\"<init>\":(I)V\n+   #20 = Methodref          #116.#117     // java/lang/Integer.reverse:(I)I\n+   #21 = Methodref          #18.#118      // org/apache/commons/compress/archivers/zip/BinaryTree.addLeaf:(IIII)V\n+   #22 = Methodref          #33.#99       // java/lang/Object.\"<init>\":()V\n+   #23 = String             #119          // depth must be bigger than 0 and not bigger than 30 but is\n+   #24 = Fieldref           #18.#120      // org/apache/commons/compress/archivers/zip/BinaryTree.tree:[I\n+   #25 = Methodref          #121.#122     // java/util/Arrays.fill:([II)V\n+   #26 = String             #123          // Tree value at index\n+   #27 = String             #124          //  has already been assigned (\n+   #28 = String             #125          // )\n+   #29 = Methodref          #126.#127     // org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n+   #30 = String             #128          // The child\n+   #31 = String             #129          //  of node at index\n+   #32 = String             #130          //  is not defined\n+   #33 = Class              #131          // java/lang/Object\n    #34 = Utf8               UNDEFINED\n    #35 = Utf8               I\n    #36 = Utf8               ConstantValue\n    #37 = Integer            -1\n    #38 = Utf8               NODE\n    #39 = Integer            -2\n    #40 = Utf8               tree\n@@ -78,96 +78,94 @@\n    #68 = Utf8               code\n    #69 = Utf8               codeIncrement\n    #70 = Utf8               lastBitLength\n    #71 = Utf8               codes\n    #72 = Utf8               Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n    #73 = Utf8               StackMapTable\n    #74 = Class              #60           // \"[B\"\n-   #75 = Class              #134          // java/io/InputStream\n+   #75 = Class              #132          // java/io/InputStream\n    #76 = Class              #41           // \"[I\"\n-   #77 = Class              #116          // org/apache/commons/compress/archivers/zip/BinaryTree\n-   #78 = Utf8               Exceptions\n-   #79 = Utf8               <init>\n-   #80 = Utf8               (I)V\n-   #81 = Utf8               this\n-   #82 = Utf8               depth\n-   #83 = Utf8               addLeaf\n-   #84 = Utf8               (IIII)V\n-   #85 = Utf8               nextChild\n-   #86 = Utf8               node\n-   #87 = Utf8               path\n-   #88 = Utf8               value\n-   #89 = Utf8               read\n-   #90 = Utf8               (Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n-   #91 = Utf8               bit\n-   #92 = Utf8               childIndex\n-   #93 = Utf8               stream\n-   #94 = Utf8               Lorg/apache/commons/compress/archivers/zip/BitStream;\n-   #95 = Utf8               currentIndex\n-   #96 = Utf8               SourceFile\n-   #97 = Utf8               BinaryTree.java\n-   #98 = Utf8               java/lang/IllegalArgumentException\n-   #99 = Utf8               java/lang/StringBuilder\n-  #100 = NameAndType        #79:#135      // \"<init>\":()V\n-  #101 = Utf8               totalNumberOfValues must be bigger than 0, is\n-  #102 = NameAndType        #136:#137     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #103 = NameAndType        #136:#138     // append:(I)Ljava/lang/StringBuilder;\n-  #104 = NameAndType        #139:#140     // toString:()Ljava/lang/String;\n-  #105 = NameAndType        #79:#141      // \"<init>\":(Ljava/lang/String;)V\n-  #106 = Class              #134          // java/io/InputStream\n-  #107 = NameAndType        #89:#142      // read:()I\n-  #108 = Utf8               java/io/IOException\n-  #109 = Utf8               Cannot read the size of the encoded tree, unexpected end of stream\n-  #110 = Class              #143          // org/apache/commons/compress/utils/IOUtils\n-  #111 = NameAndType        #144:#145     // readRange:(Ljava/io/InputStream;I)[B\n-  #112 = Utf8               java/io/EOFException\n-  #113 = Utf8               Number of values exceeds given total number of values\n-  #114 = Class              #146          // java/lang/Math\n-  #115 = NameAndType        #147:#148     // max:(II)I\n-  #116 = Utf8               org/apache/commons/compress/archivers/zip/BinaryTree\n-  #117 = NameAndType        #79:#80       // \"<init>\":(I)V\n-  #118 = Class              #149          // java/lang/Integer\n-  #119 = NameAndType        #150:#151     // reverse:(I)I\n-  #120 = NameAndType        #83:#84       // addLeaf:(IIII)V\n-  #121 = Utf8               depth must be bigger than 0 and not bigger than 30 but is\n-  #122 = NameAndType        #40:#41       // tree:[I\n-  #123 = Class              #152          // java/util/Arrays\n-  #124 = NameAndType        #153:#154     // fill:([II)V\n-  #125 = Utf8               Tree value at index\n-  #126 = Utf8                has already been assigned (\n-  #127 = Utf8               )\n-  #128 = Class              #155          // org/apache/commons/compress/archivers/zip/BitStream\n-  #129 = NameAndType        #156:#142     // nextBit:()I\n-  #130 = Utf8               The child\n-  #131 = Utf8                of node at index\n-  #132 = Utf8                is not defined\n-  #133 = Utf8               java/lang/Object\n-  #134 = Utf8               java/io/InputStream\n-  #135 = Utf8               ()V\n-  #136 = Utf8               append\n-  #137 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #138 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #139 = Utf8               toString\n-  #140 = Utf8               ()Ljava/lang/String;\n-  #141 = Utf8               (Ljava/lang/String;)V\n-  #142 = Utf8               ()I\n-  #143 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #144 = Utf8               readRange\n-  #145 = Utf8               (Ljava/io/InputStream;I)[B\n-  #146 = Utf8               java/lang/Math\n-  #147 = Utf8               max\n-  #148 = Utf8               (II)I\n-  #149 = Utf8               java/lang/Integer\n-  #150 = Utf8               reverse\n-  #151 = Utf8               (I)I\n-  #152 = Utf8               java/util/Arrays\n-  #153 = Utf8               fill\n-  #154 = Utf8               ([II)V\n-  #155 = Utf8               org/apache/commons/compress/archivers/zip/BitStream\n-  #156 = Utf8               nextBit\n+   #77 = Utf8               Exceptions\n+   #78 = Utf8               <init>\n+   #79 = Utf8               (I)V\n+   #80 = Utf8               this\n+   #81 = Utf8               depth\n+   #82 = Utf8               addLeaf\n+   #83 = Utf8               (IIII)V\n+   #84 = Utf8               nextChild\n+   #85 = Utf8               node\n+   #86 = Utf8               path\n+   #87 = Utf8               value\n+   #88 = Utf8               read\n+   #89 = Utf8               (Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+   #90 = Utf8               bit\n+   #91 = Utf8               childIndex\n+   #92 = Utf8               stream\n+   #93 = Utf8               Lorg/apache/commons/compress/archivers/zip/BitStream;\n+   #94 = Utf8               currentIndex\n+   #95 = Utf8               SourceFile\n+   #96 = Utf8               BinaryTree.java\n+   #97 = Utf8               java/lang/IllegalArgumentException\n+   #98 = Utf8               java/lang/StringBuilder\n+   #99 = NameAndType        #78:#133      // \"<init>\":()V\n+  #100 = Utf8               totalNumberOfValues must be bigger than 0, is\n+  #101 = NameAndType        #134:#135     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #102 = NameAndType        #134:#136     // append:(I)Ljava/lang/StringBuilder;\n+  #103 = NameAndType        #137:#138     // toString:()Ljava/lang/String;\n+  #104 = NameAndType        #78:#139      // \"<init>\":(Ljava/lang/String;)V\n+  #105 = NameAndType        #88:#140      // read:()I\n+  #106 = Utf8               java/io/IOException\n+  #107 = Utf8               Cannot read the size of the encoded tree, unexpected end of stream\n+  #108 = Class              #141          // org/apache/commons/compress/utils/IOUtils\n+  #109 = NameAndType        #142:#143     // readRange:(Ljava/io/InputStream;I)[B\n+  #110 = Utf8               java/io/EOFException\n+  #111 = Utf8               Number of values exceeds given total number of values\n+  #112 = Class              #144          // java/lang/Math\n+  #113 = NameAndType        #145:#146     // max:(II)I\n+  #114 = Utf8               org/apache/commons/compress/archivers/zip/BinaryTree\n+  #115 = NameAndType        #78:#79       // \"<init>\":(I)V\n+  #116 = Class              #147          // java/lang/Integer\n+  #117 = NameAndType        #148:#149     // reverse:(I)I\n+  #118 = NameAndType        #82:#83       // addLeaf:(IIII)V\n+  #119 = Utf8               depth must be bigger than 0 and not bigger than 30 but is\n+  #120 = NameAndType        #40:#41       // tree:[I\n+  #121 = Class              #150          // java/util/Arrays\n+  #122 = NameAndType        #151:#152     // fill:([II)V\n+  #123 = Utf8               Tree value at index\n+  #124 = Utf8                has already been assigned (\n+  #125 = Utf8               )\n+  #126 = Class              #153          // org/apache/commons/compress/archivers/zip/BitStream\n+  #127 = NameAndType        #154:#140     // nextBit:()I\n+  #128 = Utf8               The child\n+  #129 = Utf8                of node at index\n+  #130 = Utf8                is not defined\n+  #131 = Utf8               java/lang/Object\n+  #132 = Utf8               java/io/InputStream\n+  #133 = Utf8               ()V\n+  #134 = Utf8               append\n+  #135 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #136 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #137 = Utf8               toString\n+  #138 = Utf8               ()Ljava/lang/String;\n+  #139 = Utf8               (Ljava/lang/String;)V\n+  #140 = Utf8               ()I\n+  #141 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #142 = Utf8               readRange\n+  #143 = Utf8               (Ljava/io/InputStream;I)[B\n+  #144 = Utf8               java/lang/Math\n+  #145 = Utf8               max\n+  #146 = Utf8               (II)I\n+  #147 = Utf8               java/lang/Integer\n+  #148 = Utf8               reverse\n+  #149 = Utf8               (I)I\n+  #150 = Utf8               java/util/Arrays\n+  #151 = Utf8               fill\n+  #152 = Utf8               ([II)V\n+  #153 = Utf8               org/apache/commons/compress/archivers/zip/BitStream\n+  #154 = Utf8               nextBit\n {\n   private static final int UNDEFINED = -1;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int -1\n \n   private static final int NODE = -2;\n"}]}
