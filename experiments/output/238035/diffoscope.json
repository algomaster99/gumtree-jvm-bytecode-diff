{"diffoscope-json-version": 1, "source1": "first/Pair.class", "source2": "second/Pair.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,35 +11,35 @@\n     private static final long serialVersionUID = 4954918890077093841L;\n     public static final Pair<?, ?>[] EMPTY_ARRAY;\n     \n     public static <L, R> Pair<L, R>[] emptyArray() {\n         return (Pair<L, R>[])Pair.EMPTY_ARRAY;\n     }\n     \n-    public static <L, R> Pair<L, R> of(final L left, final R right) {\n-        return (Pair<L, R>)ImmutablePair.of((Object)left, (Object)right);\n+    public static <L, R> Pair<L, R> of(final L l, final R r) {\n+        return (Pair<L, R>)ImmutablePair.of((Object)l, (Object)r);\n     }\n     \n-    public static <L, R> Pair<L, R> of(final Map.Entry<L, R> pair) {\n-        return (Pair<L, R>)ImmutablePair.of((Map.Entry)pair);\n+    public static <L, R> Pair<L, R> of(final Map.Entry<L, R> entry) {\n+        return (Pair<L, R>)ImmutablePair.of((Map.Entry)entry);\n     }\n     \n     @Override\n-    public int compareTo(final Pair<L, R> other) {\n-        return new CompareToBuilder().append(this.getLeft(), (Object)other.getLeft()).append(this.getRight(), (Object)other.getRight()).toComparison();\n+    public int compareTo(final Pair<L, R> pair) {\n+        return new CompareToBuilder().append(this.getLeft(), (Object)pair.getLeft()).append(this.getRight(), (Object)pair.getRight()).toComparison();\n     }\n     \n     @Override\n-    public boolean equals(final Object obj) {\n-        if (obj == this) {\n+    public boolean equals(final Object o) {\n+        if (o == this) {\n             return true;\n         }\n-        if (obj instanceof Map.Entry) {\n-            final Map.Entry<?, ?> other = (Map.Entry)obj;\n-            return Objects.equals(this.getKey(), other.getKey()) && Objects.equals(this.getValue(), other.getValue());\n+        if (o instanceof Map.Entry) {\n+            final Map.Entry entry = (Map.Entry)o;\n+            return Objects.equals(this.getKey(), entry.getKey()) && Objects.equals(this.getValue(), entry.getValue());\n         }\n         return false;\n     }\n     \n     @Override\n     public final L getKey() {\n         return this.getLeft();\n"}]}
