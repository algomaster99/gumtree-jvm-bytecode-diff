{"diffoscope-json-version": 1, "source1": "first/AbstractParenPadCheck.class", "source2": "second/AbstractParenPadCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,39 +19,39 @@\n     private static final char CLOSE_PARENTHESIS = ')';\n     private PadOption option;\n     \n     public AbstractParenPadCheck() {\n         this.option = PadOption.NOSPACE;\n     }\n     \n-    public void setOption(final String optionStr) {\n-        this.option = PadOption.valueOf(optionStr.trim().toUpperCase(Locale.ENGLISH));\n+    public void setOption(final String s) {\n+        this.option = PadOption.valueOf(s.trim().toUpperCase(Locale.ENGLISH));\n     }\n     \n-    protected void processLeft(final DetailAST ast) {\n-        final int[] line = this.getLineCodePoints(ast.getLineNo() - 1);\n-        final int after = ast.getColumnNo() + 1;\n-        if (after < line.length) {\n-            final boolean hasWhitespaceAfter = CommonUtil.isCodePointWhitespace(line, after);\n-            if (this.option == PadOption.NOSPACE && hasWhitespaceAfter) {\n-                this.log(ast, \"ws.followed\", new Object[] { Character.valueOf('(') });\n+    protected void processLeft(final DetailAST detailAST) {\n+        final int[] lineCodePoints = this.getLineCodePoints(detailAST.getLineNo() - 1);\n+        final int n = detailAST.getColumnNo() + 1;\n+        if (n < lineCodePoints.length) {\n+            final boolean codePointWhitespace = CommonUtil.isCodePointWhitespace(lineCodePoints, n);\n+            if (this.option == PadOption.NOSPACE && codePointWhitespace) {\n+                this.log(detailAST, \"ws.followed\", new Object[] { Character.valueOf('(') });\n             }\n-            else if (this.option == PadOption.SPACE && !hasWhitespaceAfter && line[after] != 41) {\n-                this.log(ast, \"ws.notFollowed\", new Object[] { Character.valueOf('(') });\n+            else if (this.option == PadOption.SPACE && !codePointWhitespace && lineCodePoints[n] != 41) {\n+                this.log(detailAST, \"ws.notFollowed\", new Object[] { Character.valueOf('(') });\n             }\n         }\n     }\n     \n-    protected void processRight(final DetailAST ast) {\n-        final int before = ast.getColumnNo() - 1;\n-        if (before >= 0) {\n-            final int[] line = this.getLineCodePoints(ast.getLineNo() - 1);\n-            final boolean hasPrecedingWhitespace = CommonUtil.isCodePointWhitespace(line, before);\n-            if (this.option == PadOption.NOSPACE && hasPrecedingWhitespace && !CodePointUtil.hasWhitespaceBefore(before, line)) {\n-                this.log(ast, \"ws.preceded\", new Object[] { Character.valueOf(')') });\n+    protected void processRight(final DetailAST detailAST) {\n+        final int n = detailAST.getColumnNo() - 1;\n+        if (n >= 0) {\n+            final int[] lineCodePoints = this.getLineCodePoints(detailAST.getLineNo() - 1);\n+            final boolean codePointWhitespace = CommonUtil.isCodePointWhitespace(lineCodePoints, n);\n+            if (this.option == PadOption.NOSPACE && codePointWhitespace && !CodePointUtil.hasWhitespaceBefore(n, lineCodePoints)) {\n+                this.log(detailAST, \"ws.preceded\", new Object[] { Character.valueOf(')') });\n             }\n-            else if (this.option == PadOption.SPACE && !hasPrecedingWhitespace && line[before] != 40) {\n-                this.log(ast, \"ws.notPreceded\", new Object[] { Character.valueOf(')') });\n+            else if (this.option == PadOption.SPACE && !codePointWhitespace && lineCodePoints[n] != 40) {\n+                this.log(detailAST, \"ws.notPreceded\", new Object[] { Character.valueOf(')') });\n             }\n         }\n     }\n }\n"}]}
