{"diffoscope-json-version": 1, "source1": "first/PathUtils.class", "source2": "second/PathUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -36,23 +36,23 @@\n import java.util.stream.Collector;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.apache.commons.io.IOUtils;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Collections;\n-import java.util.Objects;\n import java.io.File;\n import java.nio.file.AccessDeniedException;\n import java.nio.file.NoSuchFileException;\n import java.nio.file.attribute.PosixFileAttributes;\n import org.apache.commons.io.function.IOFunction;\n import java.nio.file.Paths;\n import java.nio.file.attribute.FileAttribute;\n import org.apache.commons.io.FilenameUtils;\n+import java.util.Objects;\n import java.net.URL;\n import java.nio.file.Files;\n import java.io.InputStream;\n import org.apache.commons.io.function.IOSupplier;\n import java.nio.file.attribute.FileTime;\n import java.io.IOException;\n import java.nio.file.Path;\n@@ -99,24 +99,26 @@\n     \n     public static Counters.PathCounters copyDirectory(final Path sourceDirectory, final Path targetDirectory, final CopyOption... copyOptions) throws IOException {\n         final Path absoluteSource = sourceDirectory.toAbsolutePath();\n         return ((CopyDirectoryVisitor)visitFileTree(new CopyDirectoryVisitor(Counters.longPathCounters(), absoluteSource, targetDirectory, copyOptions), absoluteSource)).getPathCounters();\n     }\n     \n     public static Path copyFile(final URL sourceFile, final Path targetFile, final CopyOption... copyOptions) throws IOException {\n+        Objects.requireNonNull(sourceFile);\n         copy((IOSupplier<InputStream>)sourceFile::openStream, targetFile, copyOptions);\n         return targetFile;\n     }\n     \n     public static Path copyFileToDirectory(final Path sourceFile, final Path targetDirectory, final CopyOption... copyOptions) throws IOException {\n         return Files.copy(sourceFile, targetDirectory.resolve(sourceFile.getFileName()), copyOptions);\n     }\n     \n     public static Path copyFileToDirectory(final URL sourceFile, final Path targetDirectory, final CopyOption... copyOptions) throws IOException {\n         final Path resolve = targetDirectory.resolve(FilenameUtils.getName(sourceFile.getFile()));\n+        Objects.requireNonNull(sourceFile);\n         copy((IOSupplier<InputStream>)sourceFile::openStream, resolve, copyOptions);\n         return resolve;\n     }\n     \n     public static Counters.PathCounters countDirectory(final Path directory) throws IOException {\n         return ((CountingPathVisitor)visitFileTree(CountingPathVisitor.withLongCounters(), directory)).getPathCounters();\n     }\n@@ -502,15 +504,17 @@\n     }\n     \n     public static String readString(final Path path, final Charset charset) throws IOException {\n         return new String(Files.readAllBytes(path), Charsets.toCharset(charset));\n     }\n     \n     static List<Path> relativize(final Collection<Path> collection, final Path parent, final boolean sort, final Comparator<? super Path> comparator) {\n-        Stream<Path> stream = collection.stream().map((Function<? super Path, ? extends Path>)parent::relativize);\n+        final Stream<Path> stream2 = collection.stream();\n+        Objects.requireNonNull(parent);\n+        Stream<Path> stream = (Stream<Path>)stream2.map((Function<? super Path, ?>)parent::relativize);\n         if (sort) {\n             stream = ((comparator == null) ? stream.sorted() : stream.sorted(comparator));\n         }\n         return stream.collect((Collector<? super Path, ?, List<Path>>)Collectors.toList());\n     }\n     \n     private static Path requireExists(final Path file, final String fileParamName, final LinkOption... options) {\n"}]}
