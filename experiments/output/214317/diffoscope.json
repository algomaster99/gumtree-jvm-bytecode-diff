{"diffoscope-json-version": 1, "source1": "first/JSONML.class", "source2": "second/JSONML.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,344 +1,338 @@\n \n package org.json;\n \n import java.util.Iterator;\n \n public class JSONML\n {\n-    private static Object parse(final XMLTokener x, final boolean arrayForm, final JSONArray ja, final boolean keepStrings, final int currentNestingDepth) throws JSONException {\n-        return parse(x, arrayForm, ja, keepStrings ? JSONMLParserConfiguration.KEEP_STRINGS : JSONMLParserConfiguration.ORIGINAL, currentNestingDepth);\n+    private static Object parse(final XMLTokener xmlTokener, final boolean b, final JSONArray jsonArray, final boolean b2, final int n) throws JSONException {\n+        return parse(xmlTokener, b, jsonArray, b2 ? JSONMLParserConfiguration.KEEP_STRINGS : JSONMLParserConfiguration.ORIGINAL, n);\n     }\n     \n-    private static Object parse(final XMLTokener x, final boolean arrayForm, final JSONArray ja, final JSONMLParserConfiguration config, final int currentNestingDepth) throws JSONException {\n-        String closeTag = null;\n-        JSONArray newja = null;\n-        JSONObject newjo = null;\n-        String tagName = null;\n-        while (x.more()) {\n-            Object token = x.nextContent();\n-            if (token == XML.LT) {\n-                token = x.nextToken();\n-                if (token instanceof Character) {\n-                    if (token == XML.SLASH) {\n-                        token = x.nextToken();\n-                        if (!(token instanceof String)) {\n-                            throw new JSONException(\"Expected a closing name instead of '\" + token + \"'.\");\n-                        }\n-                        if (x.nextToken() != XML.GT) {\n-                            throw x.syntaxError(\"Misshaped close tag\");\n-                        }\n-                        return token;\n-                    }\n-                    else if (token == XML.BANG) {\n-                        final char c = x.next();\n-                        if (c == '-') {\n-                            if (x.next() == '-') {\n-                                x.skipPast(\"-->\");\n+    private static Object parse(final XMLTokener xmlTokener, final boolean b, final JSONArray jsonArray, final JSONMLParserConfiguration jsonmlParserConfiguration, final int n) throws JSONException {\n+        while (xmlTokener.more()) {\n+            final Object nextContent = xmlTokener.nextContent();\n+            if (nextContent == XML.LT) {\n+                final Object nextToken = xmlTokener.nextToken();\n+                if (nextToken instanceof Character) {\n+                    if (nextToken == XML.SLASH) {\n+                        final Object nextToken2 = xmlTokener.nextToken();\n+                        if (!(nextToken2 instanceof String)) {\n+                            throw new JSONException(\"Expected a closing name instead of '\" + nextToken2 + \"'.\");\n+                        }\n+                        if (xmlTokener.nextToken() != XML.GT) {\n+                            throw xmlTokener.syntaxError(\"Misshaped close tag\");\n+                        }\n+                        return nextToken2;\n+                    }\n+                    else if (nextToken == XML.BANG) {\n+                        final char next = xmlTokener.next();\n+                        if (next == '-') {\n+                            if (xmlTokener.next() == '-') {\n+                                xmlTokener.skipPast(\"-->\");\n                             }\n                             else {\n-                                x.back();\n+                                xmlTokener.back();\n                             }\n                         }\n-                        else if (c == '[') {\n-                            token = x.nextToken();\n-                            if (!token.equals(\"CDATA\") || x.next() != '[') {\n-                                throw x.syntaxError(\"Expected 'CDATA['\");\n+                        else if (next == '[') {\n+                            if (!xmlTokener.nextToken().equals(\"CDATA\") || xmlTokener.next() != '[') {\n+                                throw xmlTokener.syntaxError(\"Expected 'CDATA['\");\n                             }\n-                            if (ja == null) {\n+                            if (jsonArray == null) {\n                                 continue;\n                             }\n-                            ja.put((Object)x.nextCDATA());\n+                            jsonArray.put((Object)xmlTokener.nextCDATA());\n                         }\n                         else {\n                             int i = 1;\n                             do {\n-                                token = x.nextMeta();\n-                                if (token == null) {\n-                                    throw x.syntaxError(\"Missing '>' after '<!'.\");\n+                                final Object nextMeta = xmlTokener.nextMeta();\n+                                if (nextMeta == null) {\n+                                    throw xmlTokener.syntaxError(\"Missing '>' after '<!'.\");\n                                 }\n-                                if (token == XML.LT) {\n+                                if (nextMeta == XML.LT) {\n                                     ++i;\n                                 }\n                                 else {\n-                                    if (token != XML.GT) {\n+                                    if (nextMeta != XML.GT) {\n                                         continue;\n                                     }\n                                     --i;\n                                 }\n                             } while (i > 0);\n                         }\n                     }\n                     else {\n-                        if (token != XML.QUEST) {\n-                            throw x.syntaxError(\"Misshaped tag\");\n+                        if (nextToken != XML.QUEST) {\n+                            throw xmlTokener.syntaxError(\"Misshaped tag\");\n                         }\n-                        x.skipPast(\"?>\");\n+                        xmlTokener.skipPast(\"?>\");\n                     }\n                 }\n                 else {\n-                    if (!(token instanceof String)) {\n-                        throw x.syntaxError(\"Bad tagName '\" + token + \"'.\");\n+                    if (!(nextToken instanceof String)) {\n+                        throw xmlTokener.syntaxError(\"Bad tagName '\" + nextToken + \"'.\");\n                     }\n-                    tagName = (String)token;\n-                    newja = new JSONArray();\n-                    newjo = new JSONObject();\n-                    if (arrayForm) {\n-                        newja.put((Object)tagName);\n-                        if (ja != null) {\n-                            ja.put((Object)newja);\n+                    final String s = (String)nextToken;\n+                    final JSONArray jsonArray2 = new JSONArray();\n+                    final JSONObject jsonObject = new JSONObject();\n+                    if (b) {\n+                        jsonArray2.put((Object)s);\n+                        if (jsonArray != null) {\n+                            jsonArray.put((Object)jsonArray2);\n                         }\n                     }\n                     else {\n-                        newjo.put(\"tagName\", (Object)tagName);\n-                        if (ja != null) {\n-                            ja.put((Object)newjo);\n+                        jsonObject.put(\"tagName\", (Object)s);\n+                        if (jsonArray != null) {\n+                            jsonArray.put((Object)jsonObject);\n                         }\n                     }\n-                    token = null;\n+                    Object o = null;\n                     while (true) {\n-                        if (token == null) {\n-                            token = x.nextToken();\n+                        if (o == null) {\n+                            o = xmlTokener.nextToken();\n                         }\n-                        if (token == null) {\n-                            throw x.syntaxError(\"Misshaped tag\");\n+                        if (o == null) {\n+                            throw xmlTokener.syntaxError(\"Misshaped tag\");\n                         }\n-                        if (!(token instanceof String)) {\n-                            if (arrayForm && newjo.length() > 0) {\n-                                newja.put((Object)newjo);\n+                        if (!(o instanceof String)) {\n+                            if (b && jsonObject.length() > 0) {\n+                                jsonArray2.put((Object)jsonObject);\n                             }\n-                            if (token == XML.SLASH) {\n-                                if (x.nextToken() != XML.GT) {\n-                                    throw x.syntaxError(\"Misshaped tag\");\n+                            if (o == XML.SLASH) {\n+                                if (xmlTokener.nextToken() != XML.GT) {\n+                                    throw xmlTokener.syntaxError(\"Misshaped tag\");\n                                 }\n-                                if (ja != null) {\n+                                if (jsonArray != null) {\n                                     break;\n                                 }\n-                                if (arrayForm) {\n-                                    return newja;\n+                                if (b) {\n+                                    return jsonArray2;\n                                 }\n-                                return newjo;\n+                                return jsonObject;\n                             }\n                             else {\n-                                if (token != XML.GT) {\n-                                    throw x.syntaxError(\"Misshaped tag\");\n+                                if (o != XML.GT) {\n+                                    throw xmlTokener.syntaxError(\"Misshaped tag\");\n                                 }\n-                                if (currentNestingDepth == config.getMaxNestingDepth()) {\n-                                    throw x.syntaxError(\"Maximum nesting depth of \" + config.getMaxNestingDepth() + \" reached\");\n+                                if (n == jsonmlParserConfiguration.getMaxNestingDepth()) {\n+                                    throw xmlTokener.syntaxError(\"Maximum nesting depth of \" + jsonmlParserConfiguration.getMaxNestingDepth() + \" reached\");\n                                 }\n-                                closeTag = (String)parse(x, arrayForm, newja, config, currentNestingDepth + 1);\n-                                if (closeTag == null) {\n+                                final String str = (String)parse(xmlTokener, b, jsonArray2, jsonmlParserConfiguration, n + 1);\n+                                if (str == null) {\n                                     break;\n                                 }\n-                                if (!closeTag.equals(tagName)) {\n-                                    throw x.syntaxError(\"Mismatched '\" + tagName + \"' and '\" + closeTag + \"'\");\n+                                if (!str.equals(s)) {\n+                                    throw xmlTokener.syntaxError(\"Mismatched '\" + s + \"' and '\" + str + \"'\");\n                                 }\n-                                tagName = null;\n-                                if (!arrayForm && newja.length() > 0) {\n-                                    newjo.put(\"childNodes\", (Object)newja);\n+                                if (!b && jsonArray2.length() > 0) {\n+                                    jsonObject.put(\"childNodes\", (Object)jsonArray2);\n                                 }\n-                                if (ja != null) {\n+                                if (jsonArray != null) {\n                                     break;\n                                 }\n-                                if (arrayForm) {\n-                                    return newja;\n+                                if (b) {\n+                                    return jsonArray2;\n                                 }\n-                                return newjo;\n+                                return jsonObject;\n                             }\n                         }\n                         else {\n-                            final String attribute = (String)token;\n-                            if (!arrayForm && (\"tagName\".equals(attribute) || \"childNode\".equals(attribute))) {\n-                                throw x.syntaxError(\"Reserved attribute.\");\n+                            final String s2 = (String)o;\n+                            if (!b && (\"tagName\".equals(s2) || \"childNode\".equals(s2))) {\n+                                throw xmlTokener.syntaxError(\"Reserved attribute.\");\n                             }\n-                            token = x.nextToken();\n-                            if (token == XML.EQ) {\n-                                token = x.nextToken();\n-                                if (!(token instanceof String)) {\n-                                    throw x.syntaxError(\"Missing value\");\n+                            o = xmlTokener.nextToken();\n+                            if (o == XML.EQ) {\n+                                final Object nextToken3 = xmlTokener.nextToken();\n+                                if (!(nextToken3 instanceof String)) {\n+                                    throw xmlTokener.syntaxError(\"Missing value\");\n                                 }\n-                                newjo.accumulate(attribute, config.isKeepStrings() ? ((Object)token) : XML.stringToValue((String)token));\n-                                token = null;\n+                                jsonObject.accumulate(s2, jsonmlParserConfiguration.isKeepStrings() ? ((String)nextToken3) : XML.stringToValue((String)nextToken3));\n+                                o = null;\n                             }\n                             else {\n-                                newjo.accumulate(attribute, (Object)\"\");\n+                                jsonObject.accumulate(s2, (Object)\"\");\n                             }\n                         }\n                     }\n                 }\n             }\n             else {\n-                if (ja == null) {\n+                if (jsonArray == null) {\n                     continue;\n                 }\n-                ja.put((token instanceof String) ? (config.isKeepStrings() ? XML.unescape((String)token) : XML.stringToValue((String)token)) : token);\n+                jsonArray.put((nextContent instanceof String) ? (jsonmlParserConfiguration.isKeepStrings() ? XML.unescape((String)nextContent) : XML.stringToValue((String)nextContent)) : nextContent);\n             }\n         }\n-        throw x.syntaxError(\"Bad XML\");\n+        throw xmlTokener.syntaxError(\"Bad XML\");\n     }\n     \n-    public static JSONArray toJSONArray(final String string) throws JSONException {\n-        return (JSONArray)parse(new XMLTokener(string), true, null, JSONMLParserConfiguration.ORIGINAL, 0);\n+    public static JSONArray toJSONArray(final String s) throws JSONException {\n+        return (JSONArray)parse(new XMLTokener(s), true, null, JSONMLParserConfiguration.ORIGINAL, 0);\n     }\n     \n-    public static JSONArray toJSONArray(final String string, final boolean keepStrings) throws JSONException {\n-        return (JSONArray)parse(new XMLTokener(string), true, null, keepStrings, 0);\n+    public static JSONArray toJSONArray(final String s, final boolean b) throws JSONException {\n+        return (JSONArray)parse(new XMLTokener(s), true, null, b, 0);\n     }\n     \n-    public static JSONArray toJSONArray(final String string, final JSONMLParserConfiguration config) throws JSONException {\n-        return (JSONArray)parse(new XMLTokener(string), true, null, config, 0);\n+    public static JSONArray toJSONArray(final String s, final JSONMLParserConfiguration jsonmlParserConfiguration) throws JSONException {\n+        return (JSONArray)parse(new XMLTokener(s), true, null, jsonmlParserConfiguration, 0);\n     }\n     \n-    public static JSONArray toJSONArray(final XMLTokener x, final JSONMLParserConfiguration config) throws JSONException {\n-        return (JSONArray)parse(x, true, null, config, 0);\n+    public static JSONArray toJSONArray(final XMLTokener xmlTokener, final JSONMLParserConfiguration jsonmlParserConfiguration) throws JSONException {\n+        return (JSONArray)parse(xmlTokener, true, null, jsonmlParserConfiguration, 0);\n     }\n     \n-    public static JSONArray toJSONArray(final XMLTokener x, final boolean keepStrings) throws JSONException {\n-        return (JSONArray)parse(x, true, null, keepStrings, 0);\n+    public static JSONArray toJSONArray(final XMLTokener xmlTokener, final boolean b) throws JSONException {\n+        return (JSONArray)parse(xmlTokener, true, null, b, 0);\n     }\n     \n-    public static JSONArray toJSONArray(final XMLTokener x) throws JSONException {\n-        return (JSONArray)parse(x, true, null, false, 0);\n+    public static JSONArray toJSONArray(final XMLTokener xmlTokener) throws JSONException {\n+        return (JSONArray)parse(xmlTokener, true, null, false, 0);\n     }\n     \n-    public static JSONObject toJSONObject(final String string) throws JSONException {\n-        return (JSONObject)parse(new XMLTokener(string), false, null, false, 0);\n+    public static JSONObject toJSONObject(final String s) throws JSONException {\n+        return (JSONObject)parse(new XMLTokener(s), false, null, false, 0);\n     }\n     \n-    public static JSONObject toJSONObject(final String string, final boolean keepStrings) throws JSONException {\n-        return (JSONObject)parse(new XMLTokener(string), false, null, keepStrings, 0);\n+    public static JSONObject toJSONObject(final String s, final boolean b) throws JSONException {\n+        return (JSONObject)parse(new XMLTokener(s), false, null, b, 0);\n     }\n     \n-    public static JSONObject toJSONObject(final String string, final JSONMLParserConfiguration config) throws JSONException {\n-        return (JSONObject)parse(new XMLTokener(string), false, null, config, 0);\n+    public static JSONObject toJSONObject(final String s, final JSONMLParserConfiguration jsonmlParserConfiguration) throws JSONException {\n+        return (JSONObject)parse(new XMLTokener(s), false, null, jsonmlParserConfiguration, 0);\n     }\n     \n-    public static JSONObject toJSONObject(final XMLTokener x) throws JSONException {\n-        return (JSONObject)parse(x, false, null, false, 0);\n+    public static JSONObject toJSONObject(final XMLTokener xmlTokener) throws JSONException {\n+        return (JSONObject)parse(xmlTokener, false, null, false, 0);\n     }\n     \n-    public static JSONObject toJSONObject(final XMLTokener x, final boolean keepStrings) throws JSONException {\n-        return (JSONObject)parse(x, false, null, keepStrings, 0);\n+    public static JSONObject toJSONObject(final XMLTokener xmlTokener, final boolean b) throws JSONException {\n+        return (JSONObject)parse(xmlTokener, false, null, b, 0);\n     }\n     \n-    public static JSONObject toJSONObject(final XMLTokener x, final JSONMLParserConfiguration config) throws JSONException {\n-        return (JSONObject)parse(x, false, null, config, 0);\n+    public static JSONObject toJSONObject(final XMLTokener xmlTokener, final JSONMLParserConfiguration jsonmlParserConfiguration) throws JSONException {\n+        return (JSONObject)parse(xmlTokener, false, null, jsonmlParserConfiguration, 0);\n     }\n     \n-    public static String toString(final JSONArray ja) throws JSONException {\n+    public static String toString(final JSONArray jsonArray) throws JSONException {\n         final StringBuilder sb = new StringBuilder();\n-        String tagName = ja.getString(0);\n-        XML.noSpace(tagName);\n-        tagName = XML.escape(tagName);\n+        final String string = jsonArray.getString(0);\n+        XML.noSpace(string);\n+        final String escape = XML.escape(string);\n         sb.append('<');\n-        sb.append(tagName);\n-        Object object = ja.opt(1);\n+        sb.append(escape);\n+        final Object opt = jsonArray.opt(1);\n         int i;\n-        if (object instanceof JSONObject) {\n+        if (opt instanceof JSONObject) {\n             i = 2;\n-            final JSONObject jo = (JSONObject)object;\n-            for (final String key : jo.keySet()) {\n-                final Object value = jo.opt(key);\n-                XML.noSpace(key);\n-                if (value != null) {\n+            final JSONObject jsonObject = (JSONObject)opt;\n+            for (final String s : jsonObject.keySet()) {\n+                final Object opt2 = jsonObject.opt(s);\n+                XML.noSpace(s);\n+                if (opt2 != null) {\n                     sb.append(' ');\n-                    sb.append(XML.escape(key));\n+                    sb.append(XML.escape(s));\n                     sb.append('=');\n                     sb.append('\\\"');\n-                    sb.append(XML.escape(value.toString()));\n+                    sb.append(XML.escape(opt2.toString()));\n                     sb.append('\\\"');\n                 }\n             }\n         }\n         else {\n             i = 1;\n         }\n-        final int length = ja.length();\n+        final int length = jsonArray.length();\n         if (i >= length) {\n             sb.append('/');\n             sb.append('>');\n         }\n         else {\n             sb.append('>');\n             do {\n-                object = ja.get(i);\n+                final Object value = jsonArray.get(i);\n                 ++i;\n-                if (object != null) {\n-                    if (object instanceof String) {\n-                        sb.append(XML.escape(object.toString()));\n+                if (value != null) {\n+                    if (value instanceof String) {\n+                        sb.append(XML.escape(value.toString()));\n                     }\n-                    else if (object instanceof JSONObject) {\n-                        sb.append(toString((JSONObject)object));\n+                    else if (value instanceof JSONObject) {\n+                        sb.append(toString((JSONObject)value));\n                     }\n-                    else if (object instanceof JSONArray) {\n-                        sb.append(toString((JSONArray)object));\n+                    else if (value instanceof JSONArray) {\n+                        sb.append(toString((JSONArray)value));\n                     }\n                     else {\n-                        sb.append(object.toString());\n+                        sb.append(value.toString());\n                     }\n                 }\n             } while (i < length);\n             sb.append('<');\n             sb.append('/');\n-            sb.append(tagName);\n+            sb.append(escape);\n             sb.append('>');\n         }\n         return sb.toString();\n     }\n     \n-    public static String toString(final JSONObject jo) throws JSONException {\n+    public static String toString(final JSONObject jsonObject) throws JSONException {\n         final StringBuilder sb = new StringBuilder();\n-        String tagName = jo.optString(\"tagName\");\n-        if (tagName == null) {\n-            return XML.escape(jo.toString());\n+        final String optString = jsonObject.optString(\"tagName\");\n+        if (optString == null) {\n+            return XML.escape(jsonObject.toString());\n         }\n-        XML.noSpace(tagName);\n-        tagName = XML.escape(tagName);\n+        XML.noSpace(optString);\n+        final String escape = XML.escape(optString);\n         sb.append('<');\n-        sb.append(tagName);\n-        for (final String key : jo.keySet()) {\n-            if (!\"tagName\".equals(key) && !\"childNodes\".equals(key)) {\n-                XML.noSpace(key);\n-                final Object value = jo.opt(key);\n-                if (value == null) {\n+        sb.append(escape);\n+        for (final String s : jsonObject.keySet()) {\n+            if (!\"tagName\".equals(s) && !\"childNodes\".equals(s)) {\n+                XML.noSpace(s);\n+                final Object opt = jsonObject.opt(s);\n+                if (opt == null) {\n                     continue;\n                 }\n                 sb.append(' ');\n-                sb.append(XML.escape(key));\n+                sb.append(XML.escape(s));\n                 sb.append('=');\n                 sb.append('\\\"');\n-                sb.append(XML.escape(value.toString()));\n+                sb.append(XML.escape(opt.toString()));\n                 sb.append('\\\"');\n             }\n         }\n-        final JSONArray ja = jo.optJSONArray(\"childNodes\");\n-        if (ja == null) {\n+        final JSONArray optJSONArray = jsonObject.optJSONArray(\"childNodes\");\n+        if (optJSONArray == null) {\n             sb.append('/');\n             sb.append('>');\n         }\n         else {\n             sb.append('>');\n-            for (int length = ja.length(), i = 0; i < length; ++i) {\n-                final Object object = ja.get(i);\n-                if (object != null) {\n-                    if (object instanceof String) {\n-                        sb.append(XML.escape(object.toString()));\n+            for (int length = optJSONArray.length(), i = 0; i < length; ++i) {\n+                final Object value = optJSONArray.get(i);\n+                if (value != null) {\n+                    if (value instanceof String) {\n+                        sb.append(XML.escape(value.toString()));\n                     }\n-                    else if (object instanceof JSONObject) {\n-                        sb.append(toString((JSONObject)object));\n+                    else if (value instanceof JSONObject) {\n+                        sb.append(toString((JSONObject)value));\n                     }\n-                    else if (object instanceof JSONArray) {\n-                        sb.append(toString((JSONArray)object));\n+                    else if (value instanceof JSONArray) {\n+                        sb.append(toString((JSONArray)value));\n                     }\n                     else {\n-                        sb.append(object.toString());\n+                        sb.append(value.toString());\n                     }\n                 }\n             }\n             sb.append('<');\n             sb.append('/');\n-            sb.append(tagName);\n+            sb.append(escape);\n             sb.append('>');\n         }\n         return sb.toString();\n     }\n }\n"}]}
