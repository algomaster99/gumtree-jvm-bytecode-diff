{"diffoscope-json-version": 1, "source1": "first/ConstantHTML.class", "source2": "second/ConstantHTML.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -23,21 +23,21 @@\n     private final String class_package;\n     private final ConstantPool constant_pool;\n     private final PrintWriter file;\n     private final String[] constant_ref;\n     private final Constant[] constants;\n     private final Method[] methods;\n     \n-    ConstantHTML(final String dir, final String class_name, final String class_package, final Method[] methods, final ConstantPool constant_pool) throws IOException {\n-        this.class_name = class_name;\n+    ConstantHTML(final String str, final String s, final String class_package, final Method[] methods, final ConstantPool constant_pool) throws IOException {\n+        this.class_name = s;\n         this.class_package = class_package;\n         this.constant_pool = constant_pool;\n         this.methods = methods;\n         this.constants = constant_pool.getConstantPool();\n-        this.file = new PrintWriter(new FileOutputStream(dir + class_name + \"_cp.html\"));\n+        this.file = new PrintWriter(new FileOutputStream(str + s + \"_cp.html\"));\n         (this.constant_ref = new String[this.constants.length])[0] = \"&lt;unknown&gt;\";\n         this.file.println(\"<HTML><BODY BGCOLOR=\\\"#C0C0C0\\\"><TABLE BORDER=0>\");\n         for (int i = 1; i < this.constants.length; ++i) {\n             if (i % 2 == 0) {\n                 this.file.print(\"<TR BGCOLOR=\\\"#C0C0C0\\\"><TD>\");\n             }\n             else {\n@@ -48,120 +48,111 @@\n             }\n             this.file.print(\"</TD></TR>\\n\");\n         }\n         this.file.println(\"</TABLE></BODY></HTML>\");\n         this.file.close();\n     }\n     \n-    String referenceConstant(final int index) {\n-        return this.constant_ref[index];\n+    String referenceConstant(final int n) {\n+        return this.constant_ref[n];\n     }\n     \n-    private void writeConstant(final int index) {\n-        final byte tag = this.constants[index].getTag();\n-        this.file.println(\"<H4> <A NAME=cp\" + index + \">\" + index + \"</A> \" + Const.getConstantName((int)tag) + \"</H4>\");\n+    private void writeConstant(final int i) {\n+        final byte tag = this.constants[i].getTag();\n+        this.file.println(\"<H4> <A NAME=cp\" + i + \">\" + i + \"</A> \" + Const.getConstantName((int)tag) + \"</H4>\");\n         switch (tag) {\n             case 10:\n             case 11: {\n-                int class_index;\n-                int name_index;\n+                int j;\n+                int n;\n                 if (tag == 10) {\n-                    final ConstantMethodref c = (ConstantMethodref)this.constant_pool.getConstant(index, (byte)10);\n-                    class_index = c.getClassIndex();\n-                    name_index = c.getNameAndTypeIndex();\n+                    final ConstantMethodref constantMethodref = (ConstantMethodref)this.constant_pool.getConstant(i, (byte)10);\n+                    j = constantMethodref.getClassIndex();\n+                    n = constantMethodref.getNameAndTypeIndex();\n                 }\n                 else {\n-                    final ConstantInterfaceMethodref c2 = (ConstantInterfaceMethodref)this.constant_pool.getConstant(index, (byte)11);\n-                    class_index = c2.getClassIndex();\n-                    name_index = c2.getNameAndTypeIndex();\n-                }\n-                final String method_name = this.constant_pool.constantToString(name_index, (byte)12);\n-                final String html_method_name = Class2HTML.toHTML(method_name);\n-                final String method_class = this.constant_pool.constantToString(class_index, (byte)7);\n-                String short_method_class = Utility.compactClassName(method_class);\n-                short_method_class = Utility.compactClassName(short_method_class, this.class_package + \".\", true);\n-                final ConstantNameAndType c3 = (ConstantNameAndType)this.constant_pool.getConstant(name_index, (byte)12);\n-                final String signature = this.constant_pool.constantToString(c3.getSignatureIndex(), (byte)1);\n-                final String[] args = Utility.methodSignatureArgumentTypes(signature, false);\n-                final String type = Utility.methodSignatureReturnType(signature, false);\n-                final String ret_type = Class2HTML.referenceType(type);\n-                final StringBuilder buf = new StringBuilder(\"(\");\n-                for (int i = 0; i < args.length; ++i) {\n-                    buf.append(Class2HTML.referenceType(args[i]));\n-                    if (i < args.length - 1) {\n-                        buf.append(\",&nbsp;\");\n+                    final ConstantInterfaceMethodref constantInterfaceMethodref = (ConstantInterfaceMethodref)this.constant_pool.getConstant(i, (byte)11);\n+                    j = constantInterfaceMethodref.getClassIndex();\n+                    n = constantInterfaceMethodref.getNameAndTypeIndex();\n+                }\n+                final String constantToString = this.constant_pool.constantToString(n, (byte)12);\n+                final String html = Class2HTML.toHTML(constantToString);\n+                final String constantToString2 = this.constant_pool.constantToString(j, (byte)7);\n+                final String compactClassName = Utility.compactClassName(Utility.compactClassName(constantToString2), this.class_package + \".\", true);\n+                final String constantToString3 = this.constant_pool.constantToString(((ConstantNameAndType)this.constant_pool.getConstant(n, (byte)12)).getSignatureIndex(), (byte)1);\n+                final String[] methodSignatureArgumentTypes = Utility.methodSignatureArgumentTypes(constantToString3, false);\n+                final String referenceType = Class2HTML.referenceType(Utility.methodSignatureReturnType(constantToString3, false));\n+                final StringBuilder sb = new StringBuilder(\"(\");\n+                for (int k = 0; k < methodSignatureArgumentTypes.length; ++k) {\n+                    sb.append(Class2HTML.referenceType(methodSignatureArgumentTypes[k]));\n+                    if (k < methodSignatureArgumentTypes.length - 1) {\n+                        sb.append(\",&nbsp;\");\n                     }\n                 }\n-                buf.append(\")\");\n-                final String arg_types = buf.toString();\n-                String ref;\n-                if (method_class.equals(this.class_name)) {\n-                    ref = \"<A HREF=\\\"\" + this.class_name + \"_code.html#method\" + this.getMethodNumber(method_name + signature) + \"\\\" TARGET=Code>\" + html_method_name + \"</A>\";\n+                sb.append(\")\");\n+                final String string = sb.toString();\n+                String str;\n+                if (constantToString2.equals(this.class_name)) {\n+                    str = \"<A HREF=\\\"\" + this.class_name + \"_code.html#method\" + this.getMethodNumber(constantToString + constantToString3) + \"\\\" TARGET=Code>\" + html + \"</A>\";\n                 }\n                 else {\n-                    ref = \"<A HREF=\\\"\" + method_class + \".html\\\" TARGET=_top>\" + short_method_class + \"</A>.\" + html_method_name;\n+                    str = \"<A HREF=\\\"\" + constantToString2 + \".html\\\" TARGET=_top>\" + compactClassName + \"</A>.\" + html;\n                 }\n-                this.constant_ref[index] = ret_type + \"&nbsp;<A HREF=\\\"\" + this.class_name + \"_cp.html#cp\" + class_index + \"\\\" TARGET=Constants>\" + short_method_class + \"</A>.<A HREF=\\\"\" + this.class_name + \"_cp.html#cp\" + index + \"\\\" TARGET=ConstantPool>\" + html_method_name + \"</A>&nbsp;\" + arg_types;\n-                this.file.println(\"<P><TT>\" + ret_type + \"&nbsp;\" + ref + arg_types + \"&nbsp;</TT>\\n<UL><LI><A HREF=\\\"#cp\" + class_index + \"\\\">Class index(\" + class_index + \")</A>\\n<LI><A HREF=\\\"#cp\" + name_index + \"\\\">NameAndType index(\" + name_index + \")</A></UL>\");\n+                this.constant_ref[i] = referenceType + \"&nbsp;<A HREF=\\\"\" + this.class_name + \"_cp.html#cp\" + j + \"\\\" TARGET=Constants>\" + compactClassName + \"</A>.<A HREF=\\\"\" + this.class_name + \"_cp.html#cp\" + i + \"\\\" TARGET=ConstantPool>\" + html + \"</A>&nbsp;\" + string;\n+                this.file.println(\"<P><TT>\" + referenceType + \"&nbsp;\" + str + string + \"&nbsp;</TT>\\n<UL><LI><A HREF=\\\"#cp\" + j + \"\\\">Class index(\" + j + \")</A>\\n<LI><A HREF=\\\"#cp\" + n + \"\\\">NameAndType index(\" + n + \")</A></UL>\");\n                 break;\n             }\n             case 9: {\n-                final ConstantFieldref c4 = (ConstantFieldref)this.constant_pool.getConstant(index, (byte)9);\n-                final int class_index = c4.getClassIndex();\n-                final int name_index = c4.getNameAndTypeIndex();\n-                final String field_class = this.constant_pool.constantToString(class_index, (byte)7);\n-                String short_field_class = Utility.compactClassName(field_class);\n-                short_field_class = Utility.compactClassName(short_field_class, this.class_package + \".\", true);\n-                final String field_name = this.constant_pool.constantToString(name_index, (byte)12);\n-                String ref;\n-                if (field_class.equals(this.class_name)) {\n-                    ref = \"<A HREF=\\\"\" + field_class + \"_methods.html#field\" + field_name + \"\\\" TARGET=Methods>\" + field_name + \"</A>\";\n+                final ConstantFieldref constantFieldref = (ConstantFieldref)this.constant_pool.getConstant(i, (byte)9);\n+                final int classIndex = constantFieldref.getClassIndex();\n+                final int nameAndTypeIndex = constantFieldref.getNameAndTypeIndex();\n+                final String constantToString4 = this.constant_pool.constantToString(classIndex, (byte)7);\n+                final String compactClassName2 = Utility.compactClassName(Utility.compactClassName(constantToString4), this.class_package + \".\", true);\n+                final String constantToString5 = this.constant_pool.constantToString(nameAndTypeIndex, (byte)12);\n+                String str2;\n+                if (constantToString4.equals(this.class_name)) {\n+                    str2 = \"<A HREF=\\\"\" + constantToString4 + \"_methods.html#field\" + constantToString5 + \"\\\" TARGET=Methods>\" + constantToString5 + \"</A>\";\n                 }\n                 else {\n-                    ref = \"<A HREF=\\\"\" + field_class + \".html\\\" TARGET=_top>\" + short_field_class + \"</A>.\" + field_name + \"\\n\";\n+                    str2 = \"<A HREF=\\\"\" + constantToString4 + \".html\\\" TARGET=_top>\" + compactClassName2 + \"</A>.\" + constantToString5 + \"\\n\";\n                 }\n-                this.constant_ref[index] = \"<A HREF=\\\"\" + this.class_name + \"_cp.html#cp\" + class_index + \"\\\" TARGET=Constants>\" + short_field_class + \"</A>.<A HREF=\\\"\" + this.class_name + \"_cp.html#cp\" + index + \"\\\" TARGET=ConstantPool>\" + field_name + \"</A>\";\n-                this.file.println(\"<P><TT>\" + ref + \"</TT><BR>\\n<UL><LI><A HREF=\\\"#cp\" + class_index + \"\\\">Class(\" + class_index + \")</A><BR>\\n<LI><A HREF=\\\"#cp\" + name_index + \"\\\">NameAndType(\" + name_index + \")</A></UL>\");\n+                this.constant_ref[i] = \"<A HREF=\\\"\" + this.class_name + \"_cp.html#cp\" + classIndex + \"\\\" TARGET=Constants>\" + compactClassName2 + \"</A>.<A HREF=\\\"\" + this.class_name + \"_cp.html#cp\" + i + \"\\\" TARGET=ConstantPool>\" + constantToString5 + \"</A>\";\n+                this.file.println(\"<P><TT>\" + str2 + \"</TT><BR>\\n<UL><LI><A HREF=\\\"#cp\" + classIndex + \"\\\">Class(\" + classIndex + \")</A><BR>\\n<LI><A HREF=\\\"#cp\" + nameAndTypeIndex + \"\\\">NameAndType(\" + nameAndTypeIndex + \")</A></UL>\");\n                 break;\n             }\n             case 7: {\n-                final ConstantClass c5 = (ConstantClass)this.constant_pool.getConstant(index, (byte)7);\n-                final int name_index = c5.getNameIndex();\n-                final String class_name2 = this.constant_pool.constantToString(index, tag);\n-                String short_class_name = Utility.compactClassName(class_name2);\n-                short_class_name = Utility.compactClassName(short_class_name, this.class_package + \".\", true);\n-                final String ref = \"<A HREF=\\\"\" + class_name2 + \".html\\\" TARGET=_top>\" + short_class_name + \"</A>\";\n-                this.constant_ref[index] = \"<A HREF=\\\"\" + this.class_name + \"_cp.html#cp\" + index + \"\\\" TARGET=ConstantPool>\" + short_class_name + \"</A>\";\n-                this.file.println(\"<P><TT>\" + ref + \"</TT><UL><LI><A HREF=\\\"#cp\" + name_index + \"\\\">Name index(\" + name_index + \")</A></UL>\\n\");\n+                final int nameIndex = ((ConstantClass)this.constant_pool.getConstant(i, (byte)7)).getNameIndex();\n+                final String constantToString6 = this.constant_pool.constantToString(i, tag);\n+                final String compactClassName3 = Utility.compactClassName(Utility.compactClassName(constantToString6), this.class_package + \".\", true);\n+                final String string2 = \"<A HREF=\\\"\" + constantToString6 + \".html\\\" TARGET=_top>\" + compactClassName3 + \"</A>\";\n+                this.constant_ref[i] = \"<A HREF=\\\"\" + this.class_name + \"_cp.html#cp\" + i + \"\\\" TARGET=ConstantPool>\" + compactClassName3 + \"</A>\";\n+                this.file.println(\"<P><TT>\" + string2 + \"</TT><UL><LI><A HREF=\\\"#cp\" + nameIndex + \"\\\">Name index(\" + nameIndex + \")</A></UL>\\n\");\n                 break;\n             }\n             case 8: {\n-                final ConstantString c6 = (ConstantString)this.constant_pool.getConstant(index, (byte)8);\n-                final int name_index = c6.getStringIndex();\n-                final String str = Class2HTML.toHTML(this.constant_pool.constantToString(index, tag));\n-                this.file.println(\"<P><TT>\" + str + \"</TT><UL><LI><A HREF=\\\"#cp\" + name_index + \"\\\">Name index(\" + name_index + \")</A></UL>\\n\");\n+                final int stringIndex = ((ConstantString)this.constant_pool.getConstant(i, (byte)8)).getStringIndex();\n+                this.file.println(\"<P><TT>\" + Class2HTML.toHTML(this.constant_pool.constantToString(i, tag)) + \"</TT><UL><LI><A HREF=\\\"#cp\" + stringIndex + \"\\\">Name index(\" + stringIndex + \")</A></UL>\\n\");\n                 break;\n             }\n             case 12: {\n-                final ConstantNameAndType c7 = (ConstantNameAndType)this.constant_pool.getConstant(index, (byte)12);\n-                final int name_index = c7.getNameIndex();\n-                final int signature_index = c7.getSignatureIndex();\n-                this.file.println(\"<P><TT>\" + Class2HTML.toHTML(this.constant_pool.constantToString(index, tag)) + \"</TT><UL><LI><A HREF=\\\"#cp\" + name_index + \"\\\">Name index(\" + name_index + \")</A>\\n<LI><A HREF=\\\"#cp\" + signature_index + \"\\\">Signature index(\" + signature_index + \")</A></UL>\\n\");\n+                final ConstantNameAndType constantNameAndType = (ConstantNameAndType)this.constant_pool.getConstant(i, (byte)12);\n+                final int nameIndex2 = constantNameAndType.getNameIndex();\n+                final int signatureIndex = constantNameAndType.getSignatureIndex();\n+                this.file.println(\"<P><TT>\" + Class2HTML.toHTML(this.constant_pool.constantToString(i, tag)) + \"</TT><UL><LI><A HREF=\\\"#cp\" + nameIndex2 + \"\\\">Name index(\" + nameIndex2 + \")</A>\\n<LI><A HREF=\\\"#cp\" + signatureIndex + \"\\\">Signature index(\" + signatureIndex + \")</A></UL>\\n\");\n                 break;\n             }\n             default: {\n-                this.file.println(\"<P><TT>\" + Class2HTML.toHTML(this.constant_pool.constantToString(index, tag)) + \"</TT>\\n\");\n+                this.file.println(\"<P><TT>\" + Class2HTML.toHTML(this.constant_pool.constantToString(i, tag)) + \"</TT>\\n\");\n                 break;\n             }\n         }\n     }\n     \n-    private int getMethodNumber(final String str) {\n+    private int getMethodNumber(final String anObject) {\n         for (int i = 0; i < this.methods.length; ++i) {\n-            final String cmp = this.methods[i].getName() + this.methods[i].getSignature();\n-            if (cmp.equals(str)) {\n+            if ((this.methods[i].getName() + this.methods[i].getSignature()).equals(anObject)) {\n                 return i;\n             }\n         }\n         return -1;\n     }\n }\n"}]}
