{"diffoscope-json-version": 1, "source1": "first/TelnetClient.class", "source2": "second/TelnetClient.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,192 +1,192 @@\n-  SHA-256 checksum 79c996dfce81806edab607f35bc7b714c6b7cef52401d3fd61e37636a5d553fd\n+  SHA-256 checksum e129c21cf7d7b45ba6798b42073150b4466166a74184311feee3950b88078d6e\n   Compiled from \"TelnetClient.java\"\n public class org.apache.commons.net.telnet.TelnetClient extends org.apache.commons.net.telnet.Telnet\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #2                          // org/apache/commons/net/telnet/TelnetClient\n-  super_class: #44                        // org/apache/commons/net/telnet/Telnet\n+  this_class: #3                          // org/apache/commons/net/telnet/TelnetClient\n+  super_class: #10                        // org/apache/commons/net/telnet/Telnet\n   interfaces: 0, fields: 6, methods: 26, attributes: 1\n Constant pool:\n-    #1 = String             #108          // VT100\n-    #2 = Class              #109          // org/apache/commons/net/telnet/TelnetClient\n-    #3 = Methodref          #2.#110       // org/apache/commons/net/telnet/TelnetClient.\"<init>\":(Ljava/lang/String;I)V\n-    #4 = Methodref          #44.#111      // org/apache/commons/net/telnet/Telnet.\"<init>\":(Ljava/lang/String;)V\n-    #5 = Fieldref           #2.#112       // org/apache/commons/net/telnet/TelnetClient.readerThread:Z\n-    #6 = Fieldref           #2.#113       // org/apache/commons/net/telnet/TelnetClient.input:Ljava/io/InputStream;\n-    #7 = Fieldref           #2.#114       // org/apache/commons/net/telnet/TelnetClient.output:Ljava/io/OutputStream;\n-    #8 = Fieldref           #2.#115       // org/apache/commons/net/telnet/TelnetClient.maxSubnegotiationLength:I\n-    #9 = Fieldref           #2.#116       // org/apache/commons/net/telnet/TelnetClient._output_:Ljava/io/OutputStream;\n-   #10 = Class              #117          // java/io/IOException\n-   #11 = String             #118          // Stream closed\n-   #12 = Methodref          #10.#111      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #13 = Methodref          #119.#120     // java/io/OutputStream.flush:()V\n-   #14 = Methodref          #119.#121     // java/io/OutputStream.close:()V\n-   #15 = Methodref          #44.#122      // org/apache/commons/net/telnet/Telnet._connectAction_:()V\n-   #16 = Class              #123          // org/apache/commons/net/telnet/TelnetInputStream\n-   #17 = Fieldref           #2.#124       // org/apache/commons/net/telnet/TelnetClient._input_:Ljava/io/InputStream;\n-   #18 = Methodref          #16.#125      // org/apache/commons/net/telnet/TelnetInputStream.\"<init>\":(Ljava/io/InputStream;Lorg/apache/commons/net/telnet/TelnetClient;Z)V\n-   #19 = Methodref          #16.#126      // org/apache/commons/net/telnet/TelnetInputStream._start:()V\n-   #20 = Class              #127          // java/io/BufferedInputStream\n-   #21 = Methodref          #20.#128      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #22 = Class              #129          // org/apache/commons/net/telnet/TelnetOutputStream\n-   #23 = Methodref          #22.#130      // org/apache/commons/net/telnet/TelnetOutputStream.\"<init>\":(Lorg/apache/commons/net/telnet/TelnetClient;)V\n-   #24 = Methodref          #131.#121     // java/io/InputStream.close:()V\n-   #25 = Methodref          #44.#132      // org/apache/commons/net/telnet/Telnet.disconnect:()V\n-   #26 = Methodref          #2.#133       // org/apache/commons/net/telnet/TelnetClient.stateIsWill:(I)Z\n-   #27 = Methodref          #2.#134       // org/apache/commons/net/telnet/TelnetClient.requestedWill:(I)Z\n-   #28 = Methodref          #2.#135       // org/apache/commons/net/telnet/TelnetClient.stateIsDo:(I)Z\n-   #29 = Methodref          #2.#136       // org/apache/commons/net/telnet/TelnetClient.requestedDo:(I)Z\n-   #30 = Methodref          #2.#137       // org/apache/commons/net/telnet/TelnetClient._sendAYT:(J)Z\n-   #31 = Class              #138          // java/lang/IllegalArgumentException\n-   #32 = String             #139          // zero length message\n-   #33 = Methodref          #31.#111      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #34 = Methodref          #2.#140       // org/apache/commons/net/telnet/TelnetClient._sendSubnegotiation:([I)V\n-   #35 = Methodref          #2.#141       // org/apache/commons/net/telnet/TelnetClient._sendCommand:(B)V\n-   #36 = Methodref          #44.#142      // org/apache/commons/net/telnet/Telnet.addOptionHandler:(Lorg/apache/commons/net/telnet/TelnetOptionHandler;)V\n-   #37 = Methodref          #44.#143      // org/apache/commons/net/telnet/Telnet.deleteOptionHandler:(I)V\n-   #38 = Methodref          #44.#144      // org/apache/commons/net/telnet/Telnet._registerSpyStream:(Ljava/io/OutputStream;)V\n-   #39 = Methodref          #44.#145      // org/apache/commons/net/telnet/Telnet._stopSpyStream:()V\n-   #40 = Methodref          #44.#146      // org/apache/commons/net/telnet/Telnet.registerNotifHandler:(Lorg/apache/commons/net/telnet/TelnetNotificationHandler;)V\n-   #41 = Methodref          #44.#147      // org/apache/commons/net/telnet/Telnet.unregisterNotifHandler:()V\n-   #42 = Fieldref           #2.#148       // org/apache/commons/net/telnet/TelnetClient.inputListener:Lorg/apache/commons/net/telnet/TelnetInputListener;\n-   #43 = InterfaceMethodref #105.#149     // org/apache/commons/net/telnet/TelnetInputListener.telnetInputAvailable:()V\n-   #44 = Class              #150          // org/apache/commons/net/telnet/Telnet\n-   #45 = Utf8               DEFAULT_MAX_SUBNEGOTIATION_LENGTH\n-   #46 = Utf8               I\n-   #47 = Utf8               ConstantValue\n-   #48 = Integer            512\n-   #49 = Utf8               maxSubnegotiationLength\n-   #50 = Utf8               input\n-   #51 = Utf8               Ljava/io/InputStream;\n-   #52 = Utf8               output\n-   #53 = Utf8               Ljava/io/OutputStream;\n-   #54 = Utf8               readerThread\n-   #55 = Utf8               Z\n-   #56 = Utf8               inputListener\n-   #57 = Utf8               Lorg/apache/commons/net/telnet/TelnetInputListener;\n-   #58 = Utf8               <init>\n-   #59 = Utf8               ()V\n-   #60 = Utf8               Code\n-   #61 = Utf8               LineNumberTable\n-   #62 = Utf8               (Ljava/lang/String;)V\n-   #63 = Utf8               (I)V\n-   #64 = Utf8               (Ljava/lang/String;I)V\n-   #65 = Utf8               flushOutputStream\n-   #66 = Utf8               StackMapTable\n-   #67 = Utf8               Exceptions\n-   #68 = Utf8               closeOutputStream\n-   #69 = Class              #151          // java/lang/Throwable\n-   #70 = Utf8               _connectAction_\n-   #71 = Utf8               disconnect\n-   #72 = Utf8               getOutputStream\n-   #73 = Utf8               ()Ljava/io/OutputStream;\n-   #74 = Utf8               getInputStream\n-   #75 = Utf8               ()Ljava/io/InputStream;\n-   #76 = Utf8               getLocalOptionState\n-   #77 = Utf8               (I)Z\n-   #78 = Utf8               getRemoteOptionState\n-   #79 = Utf8               sendAYT\n-   #80 = Utf8               (J)Z\n-   #81 = Class              #152          // java/lang/InterruptedException\n-   #82 = Utf8               sendSubnegotiation\n-   #83 = Utf8               ([I)V\n-   #84 = Utf8               sendCommand\n-   #85 = Utf8               (B)V\n-   #86 = Utf8               addOptionHandler\n-   #87 = Utf8               (Lorg/apache/commons/net/telnet/TelnetOptionHandler;)V\n-   #88 = Class              #153          // org/apache/commons/net/telnet/InvalidTelnetOptionException\n-   #89 = Utf8               deleteOptionHandler\n-   #90 = Utf8               registerSpyStream\n-   #91 = Utf8               (Ljava/io/OutputStream;)V\n-   #92 = Utf8               stopSpyStream\n-   #93 = Utf8               registerNotifHandler\n-   #94 = Utf8               (Lorg/apache/commons/net/telnet/TelnetNotificationHandler;)V\n-   #95 = Utf8               unregisterNotifHandler\n-   #96 = Utf8               setReaderThread\n-   #97 = Utf8               (Z)V\n-   #98 = Utf8               getReaderThread\n-   #99 = Utf8               ()Z\n-  #100 = Utf8               registerInputListener\n-  #101 = Utf8               (Lorg/apache/commons/net/telnet/TelnetInputListener;)V\n-  #102 = Utf8               unregisterInputListener\n-  #103 = Utf8               notifyInputListener\n-  #104 = Class              #154          // java/lang/Object\n-  #105 = Class              #155          // org/apache/commons/net/telnet/TelnetInputListener\n-  #106 = Utf8               SourceFile\n-  #107 = Utf8               TelnetClient.java\n-  #108 = Utf8               VT100\n-  #109 = Utf8               org/apache/commons/net/telnet/TelnetClient\n-  #110 = NameAndType        #58:#64       // \"<init>\":(Ljava/lang/String;I)V\n-  #111 = NameAndType        #58:#62       // \"<init>\":(Ljava/lang/String;)V\n-  #112 = NameAndType        #54:#55       // readerThread:Z\n-  #113 = NameAndType        #50:#51       // input:Ljava/io/InputStream;\n-  #114 = NameAndType        #52:#53       // output:Ljava/io/OutputStream;\n-  #115 = NameAndType        #49:#46       // maxSubnegotiationLength:I\n-  #116 = NameAndType        #156:#53      // _output_:Ljava/io/OutputStream;\n-  #117 = Utf8               java/io/IOException\n-  #118 = Utf8               Stream closed\n-  #119 = Class              #157          // java/io/OutputStream\n-  #120 = NameAndType        #158:#59      // flush:()V\n-  #121 = NameAndType        #159:#59      // close:()V\n-  #122 = NameAndType        #70:#59       // _connectAction_:()V\n-  #123 = Utf8               org/apache/commons/net/telnet/TelnetInputStream\n-  #124 = NameAndType        #160:#51      // _input_:Ljava/io/InputStream;\n-  #125 = NameAndType        #58:#161      // \"<init>\":(Ljava/io/InputStream;Lorg/apache/commons/net/telnet/TelnetClient;Z)V\n-  #126 = NameAndType        #162:#59      // _start:()V\n-  #127 = Utf8               java/io/BufferedInputStream\n-  #128 = NameAndType        #58:#163      // \"<init>\":(Ljava/io/InputStream;)V\n-  #129 = Utf8               org/apache/commons/net/telnet/TelnetOutputStream\n-  #130 = NameAndType        #58:#164      // \"<init>\":(Lorg/apache/commons/net/telnet/TelnetClient;)V\n-  #131 = Class              #165          // java/io/InputStream\n-  #132 = NameAndType        #71:#59       // disconnect:()V\n-  #133 = NameAndType        #166:#77      // stateIsWill:(I)Z\n-  #134 = NameAndType        #167:#77      // requestedWill:(I)Z\n-  #135 = NameAndType        #168:#77      // stateIsDo:(I)Z\n-  #136 = NameAndType        #169:#77      // requestedDo:(I)Z\n-  #137 = NameAndType        #170:#80      // _sendAYT:(J)Z\n-  #138 = Utf8               java/lang/IllegalArgumentException\n-  #139 = Utf8               zero length message\n-  #140 = NameAndType        #171:#83      // _sendSubnegotiation:([I)V\n-  #141 = NameAndType        #172:#85      // _sendCommand:(B)V\n-  #142 = NameAndType        #86:#87       // addOptionHandler:(Lorg/apache/commons/net/telnet/TelnetOptionHandler;)V\n-  #143 = NameAndType        #89:#63       // deleteOptionHandler:(I)V\n-  #144 = NameAndType        #173:#91      // _registerSpyStream:(Ljava/io/OutputStream;)V\n-  #145 = NameAndType        #174:#59      // _stopSpyStream:()V\n-  #146 = NameAndType        #93:#94       // registerNotifHandler:(Lorg/apache/commons/net/telnet/TelnetNotificationHandler;)V\n-  #147 = NameAndType        #95:#59       // unregisterNotifHandler:()V\n-  #148 = NameAndType        #56:#57       // inputListener:Lorg/apache/commons/net/telnet/TelnetInputListener;\n-  #149 = NameAndType        #175:#59      // telnetInputAvailable:()V\n-  #150 = Utf8               org/apache/commons/net/telnet/Telnet\n-  #151 = Utf8               java/lang/Throwable\n-  #152 = Utf8               java/lang/InterruptedException\n-  #153 = Utf8               org/apache/commons/net/telnet/InvalidTelnetOptionException\n-  #154 = Utf8               java/lang/Object\n-  #155 = Utf8               org/apache/commons/net/telnet/TelnetInputListener\n-  #156 = Utf8               _output_\n-  #157 = Utf8               java/io/OutputStream\n-  #158 = Utf8               flush\n-  #159 = Utf8               close\n-  #160 = Utf8               _input_\n-  #161 = Utf8               (Ljava/io/InputStream;Lorg/apache/commons/net/telnet/TelnetClient;Z)V\n-  #162 = Utf8               _start\n-  #163 = Utf8               (Ljava/io/InputStream;)V\n-  #164 = Utf8               (Lorg/apache/commons/net/telnet/TelnetClient;)V\n-  #165 = Utf8               java/io/InputStream\n-  #166 = Utf8               stateIsWill\n-  #167 = Utf8               requestedWill\n-  #168 = Utf8               stateIsDo\n-  #169 = Utf8               requestedDo\n-  #170 = Utf8               _sendAYT\n-  #171 = Utf8               _sendSubnegotiation\n-  #172 = Utf8               _sendCommand\n-  #173 = Utf8               _registerSpyStream\n-  #174 = Utf8               _stopSpyStream\n-  #175 = Utf8               telnetInputAvailable\n+    #1 = String             #2            // VT100\n+    #2 = Utf8               VT100\n+    #3 = Class              #4            // org/apache/commons/net/telnet/TelnetClient\n+    #4 = Utf8               org/apache/commons/net/telnet/TelnetClient\n+    #5 = Methodref          #3.#6         // org/apache/commons/net/telnet/TelnetClient.\"<init>\":(Ljava/lang/String;I)V\n+    #6 = NameAndType        #7:#8         // \"<init>\":(Ljava/lang/String;I)V\n+    #7 = Utf8               <init>\n+    #8 = Utf8               (Ljava/lang/String;I)V\n+    #9 = Methodref          #10.#11       // org/apache/commons/net/telnet/Telnet.\"<init>\":(Ljava/lang/String;)V\n+   #10 = Class              #12           // org/apache/commons/net/telnet/Telnet\n+   #11 = NameAndType        #7:#13        // \"<init>\":(Ljava/lang/String;)V\n+   #12 = Utf8               org/apache/commons/net/telnet/Telnet\n+   #13 = Utf8               (Ljava/lang/String;)V\n+   #14 = Fieldref           #3.#15        // org/apache/commons/net/telnet/TelnetClient.readerThread:Z\n+   #15 = NameAndType        #16:#17       // readerThread:Z\n+   #16 = Utf8               readerThread\n+   #17 = Utf8               Z\n+   #18 = Fieldref           #3.#19        // org/apache/commons/net/telnet/TelnetClient.input:Ljava/io/InputStream;\n+   #19 = NameAndType        #20:#21       // input:Ljava/io/InputStream;\n+   #20 = Utf8               input\n+   #21 = Utf8               Ljava/io/InputStream;\n+   #22 = Fieldref           #3.#23        // org/apache/commons/net/telnet/TelnetClient.output:Ljava/io/OutputStream;\n+   #23 = NameAndType        #24:#25       // output:Ljava/io/OutputStream;\n+   #24 = Utf8               output\n+   #25 = Utf8               Ljava/io/OutputStream;\n+   #26 = Fieldref           #3.#27        // org/apache/commons/net/telnet/TelnetClient.maxSubnegotiationLength:I\n+   #27 = NameAndType        #28:#29       // maxSubnegotiationLength:I\n+   #28 = Utf8               maxSubnegotiationLength\n+   #29 = Utf8               I\n+   #30 = Fieldref           #3.#31        // org/apache/commons/net/telnet/TelnetClient._output_:Ljava/io/OutputStream;\n+   #31 = NameAndType        #32:#25       // _output_:Ljava/io/OutputStream;\n+   #32 = Utf8               _output_\n+   #33 = Class              #34           // java/io/IOException\n+   #34 = Utf8               java/io/IOException\n+   #35 = String             #36           // Stream closed\n+   #36 = Utf8               Stream closed\n+   #37 = Methodref          #33.#11       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #38 = Methodref          #39.#40       // java/io/OutputStream.flush:()V\n+   #39 = Class              #41           // java/io/OutputStream\n+   #40 = NameAndType        #42:#43       // flush:()V\n+   #41 = Utf8               java/io/OutputStream\n+   #42 = Utf8               flush\n+   #43 = Utf8               ()V\n+   #44 = Methodref          #39.#45       // java/io/OutputStream.close:()V\n+   #45 = NameAndType        #46:#43       // close:()V\n+   #46 = Utf8               close\n+   #47 = Methodref          #10.#48       // org/apache/commons/net/telnet/Telnet._connectAction_:()V\n+   #48 = NameAndType        #49:#43       // _connectAction_:()V\n+   #49 = Utf8               _connectAction_\n+   #50 = Class              #51           // org/apache/commons/net/telnet/TelnetInputStream\n+   #51 = Utf8               org/apache/commons/net/telnet/TelnetInputStream\n+   #52 = Fieldref           #3.#53        // org/apache/commons/net/telnet/TelnetClient._input_:Ljava/io/InputStream;\n+   #53 = NameAndType        #54:#21       // _input_:Ljava/io/InputStream;\n+   #54 = Utf8               _input_\n+   #55 = Methodref          #50.#56       // org/apache/commons/net/telnet/TelnetInputStream.\"<init>\":(Ljava/io/InputStream;Lorg/apache/commons/net/telnet/TelnetClient;Z)V\n+   #56 = NameAndType        #7:#57        // \"<init>\":(Ljava/io/InputStream;Lorg/apache/commons/net/telnet/TelnetClient;Z)V\n+   #57 = Utf8               (Ljava/io/InputStream;Lorg/apache/commons/net/telnet/TelnetClient;Z)V\n+   #58 = Methodref          #50.#59       // org/apache/commons/net/telnet/TelnetInputStream._start:()V\n+   #59 = NameAndType        #60:#43       // _start:()V\n+   #60 = Utf8               _start\n+   #61 = Class              #62           // java/io/BufferedInputStream\n+   #62 = Utf8               java/io/BufferedInputStream\n+   #63 = Methodref          #61.#64       // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #64 = NameAndType        #7:#65        // \"<init>\":(Ljava/io/InputStream;)V\n+   #65 = Utf8               (Ljava/io/InputStream;)V\n+   #66 = Class              #67           // org/apache/commons/net/telnet/TelnetOutputStream\n+   #67 = Utf8               org/apache/commons/net/telnet/TelnetOutputStream\n+   #68 = Methodref          #66.#69       // org/apache/commons/net/telnet/TelnetOutputStream.\"<init>\":(Lorg/apache/commons/net/telnet/TelnetClient;)V\n+   #69 = NameAndType        #7:#70        // \"<init>\":(Lorg/apache/commons/net/telnet/TelnetClient;)V\n+   #70 = Utf8               (Lorg/apache/commons/net/telnet/TelnetClient;)V\n+   #71 = Methodref          #72.#45       // java/io/InputStream.close:()V\n+   #72 = Class              #73           // java/io/InputStream\n+   #73 = Utf8               java/io/InputStream\n+   #74 = Methodref          #10.#75       // org/apache/commons/net/telnet/Telnet.disconnect:()V\n+   #75 = NameAndType        #76:#43       // disconnect:()V\n+   #76 = Utf8               disconnect\n+   #77 = Methodref          #3.#78        // org/apache/commons/net/telnet/TelnetClient.stateIsWill:(I)Z\n+   #78 = NameAndType        #79:#80       // stateIsWill:(I)Z\n+   #79 = Utf8               stateIsWill\n+   #80 = Utf8               (I)Z\n+   #81 = Methodref          #3.#82        // org/apache/commons/net/telnet/TelnetClient.requestedWill:(I)Z\n+   #82 = NameAndType        #83:#80       // requestedWill:(I)Z\n+   #83 = Utf8               requestedWill\n+   #84 = Methodref          #3.#85        // org/apache/commons/net/telnet/TelnetClient.stateIsDo:(I)Z\n+   #85 = NameAndType        #86:#80       // stateIsDo:(I)Z\n+   #86 = Utf8               stateIsDo\n+   #87 = Methodref          #3.#88        // org/apache/commons/net/telnet/TelnetClient.requestedDo:(I)Z\n+   #88 = NameAndType        #89:#80       // requestedDo:(I)Z\n+   #89 = Utf8               requestedDo\n+   #90 = Methodref          #3.#91        // org/apache/commons/net/telnet/TelnetClient._sendAYT:(J)Z\n+   #91 = NameAndType        #92:#93       // _sendAYT:(J)Z\n+   #92 = Utf8               _sendAYT\n+   #93 = Utf8               (J)Z\n+   #94 = Class              #95           // java/lang/IllegalArgumentException\n+   #95 = Utf8               java/lang/IllegalArgumentException\n+   #96 = String             #97           // zero length message\n+   #97 = Utf8               zero length message\n+   #98 = Methodref          #94.#11       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #99 = Methodref          #3.#100       // org/apache/commons/net/telnet/TelnetClient._sendSubnegotiation:([I)V\n+  #100 = NameAndType        #101:#102     // _sendSubnegotiation:([I)V\n+  #101 = Utf8               _sendSubnegotiation\n+  #102 = Utf8               ([I)V\n+  #103 = Methodref          #3.#104       // org/apache/commons/net/telnet/TelnetClient._sendCommand:(B)V\n+  #104 = NameAndType        #105:#106     // _sendCommand:(B)V\n+  #105 = Utf8               _sendCommand\n+  #106 = Utf8               (B)V\n+  #107 = Methodref          #10.#108      // org/apache/commons/net/telnet/Telnet.addOptionHandler:(Lorg/apache/commons/net/telnet/TelnetOptionHandler;)V\n+  #108 = NameAndType        #109:#110     // addOptionHandler:(Lorg/apache/commons/net/telnet/TelnetOptionHandler;)V\n+  #109 = Utf8               addOptionHandler\n+  #110 = Utf8               (Lorg/apache/commons/net/telnet/TelnetOptionHandler;)V\n+  #111 = Methodref          #10.#112      // org/apache/commons/net/telnet/Telnet.deleteOptionHandler:(I)V\n+  #112 = NameAndType        #113:#114     // deleteOptionHandler:(I)V\n+  #113 = Utf8               deleteOptionHandler\n+  #114 = Utf8               (I)V\n+  #115 = Methodref          #10.#116      // org/apache/commons/net/telnet/Telnet._registerSpyStream:(Ljava/io/OutputStream;)V\n+  #116 = NameAndType        #117:#118     // _registerSpyStream:(Ljava/io/OutputStream;)V\n+  #117 = Utf8               _registerSpyStream\n+  #118 = Utf8               (Ljava/io/OutputStream;)V\n+  #119 = Methodref          #10.#120      // org/apache/commons/net/telnet/Telnet._stopSpyStream:()V\n+  #120 = NameAndType        #121:#43      // _stopSpyStream:()V\n+  #121 = Utf8               _stopSpyStream\n+  #122 = Methodref          #10.#123      // org/apache/commons/net/telnet/Telnet.registerNotifHandler:(Lorg/apache/commons/net/telnet/TelnetNotificationHandler;)V\n+  #123 = NameAndType        #124:#125     // registerNotifHandler:(Lorg/apache/commons/net/telnet/TelnetNotificationHandler;)V\n+  #124 = Utf8               registerNotifHandler\n+  #125 = Utf8               (Lorg/apache/commons/net/telnet/TelnetNotificationHandler;)V\n+  #126 = Methodref          #10.#127      // org/apache/commons/net/telnet/Telnet.unregisterNotifHandler:()V\n+  #127 = NameAndType        #128:#43      // unregisterNotifHandler:()V\n+  #128 = Utf8               unregisterNotifHandler\n+  #129 = Fieldref           #3.#130       // org/apache/commons/net/telnet/TelnetClient.inputListener:Lorg/apache/commons/net/telnet/TelnetInputListener;\n+  #130 = NameAndType        #131:#132     // inputListener:Lorg/apache/commons/net/telnet/TelnetInputListener;\n+  #131 = Utf8               inputListener\n+  #132 = Utf8               Lorg/apache/commons/net/telnet/TelnetInputListener;\n+  #133 = InterfaceMethodref #134.#135     // org/apache/commons/net/telnet/TelnetInputListener.telnetInputAvailable:()V\n+  #134 = Class              #136          // org/apache/commons/net/telnet/TelnetInputListener\n+  #135 = NameAndType        #137:#43      // telnetInputAvailable:()V\n+  #136 = Utf8               org/apache/commons/net/telnet/TelnetInputListener\n+  #137 = Utf8               telnetInputAvailable\n+  #138 = Utf8               DEFAULT_MAX_SUBNEGOTIATION_LENGTH\n+  #139 = Utf8               ConstantValue\n+  #140 = Integer            512\n+  #141 = Utf8               Code\n+  #142 = Utf8               LineNumberTable\n+  #143 = Utf8               flushOutputStream\n+  #144 = Utf8               StackMapTable\n+  #145 = Utf8               Exceptions\n+  #146 = Utf8               closeOutputStream\n+  #147 = Class              #148          // java/lang/Throwable\n+  #148 = Utf8               java/lang/Throwable\n+  #149 = Utf8               getOutputStream\n+  #150 = Utf8               ()Ljava/io/OutputStream;\n+  #151 = Utf8               getInputStream\n+  #152 = Utf8               ()Ljava/io/InputStream;\n+  #153 = Utf8               getLocalOptionState\n+  #154 = Utf8               getRemoteOptionState\n+  #155 = Utf8               sendAYT\n+  #156 = Class              #157          // java/lang/InterruptedException\n+  #157 = Utf8               java/lang/InterruptedException\n+  #158 = Utf8               sendSubnegotiation\n+  #159 = Utf8               sendCommand\n+  #160 = Class              #161          // org/apache/commons/net/telnet/InvalidTelnetOptionException\n+  #161 = Utf8               org/apache/commons/net/telnet/InvalidTelnetOptionException\n+  #162 = Utf8               registerSpyStream\n+  #163 = Utf8               stopSpyStream\n+  #164 = Utf8               setReaderThread\n+  #165 = Utf8               (Z)V\n+  #166 = Utf8               getReaderThread\n+  #167 = Utf8               ()Z\n+  #168 = Utf8               registerInputListener\n+  #169 = Utf8               (Lorg/apache/commons/net/telnet/TelnetInputListener;)V\n+  #170 = Utf8               unregisterInputListener\n+  #171 = Utf8               notifyInputListener\n+  #172 = Class              #173          // java/lang/Object\n+  #173 = Utf8               java/lang/Object\n+  #174 = Utf8               SourceFile\n+  #175 = Utf8               TelnetClient.java\n {\n   private static final int DEFAULT_MAX_SUBNEGOTIATION_LENGTH = 512;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 512\n \n   final int maxSubnegotiationLength;\n@@ -213,68 +213,68 @@\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: ldc           #1                  // String VT100\n          3: sipush        512\n-         6: invokespecial #3                  // Method \"<init>\":(Ljava/lang/String;I)V\n+         6: invokespecial #5                  // Method \"<init>\":(Ljava/lang/String;I)V\n          9: return\n       LineNumberTable:\n         line 59: 0\n         line 60: 9\n \n   public org.apache.commons.net.telnet.TelnetClient(java.lang.String);\n     descriptor: (Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: sipush        512\n-         5: invokespecial #3                  // Method \"<init>\":(Ljava/lang/String;I)V\n+         5: invokespecial #5                  // Method \"<init>\":(Ljava/lang/String;I)V\n          8: return\n       LineNumberTable:\n         line 69: 0\n         line 70: 8\n \n   public org.apache.commons.net.telnet.TelnetClient(int);\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: ldc           #1                  // String VT100\n          3: iload_1\n-         4: invokespecial #3                  // Method \"<init>\":(Ljava/lang/String;I)V\n+         4: invokespecial #5                  // Method \"<init>\":(Ljava/lang/String;I)V\n          7: return\n       LineNumberTable:\n         line 80: 0\n         line 81: 7\n \n   public org.apache.commons.net.telnet.TelnetClient(java.lang.String, int);\n     descriptor: (Ljava/lang/String;I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #4                  // Method org/apache/commons/net/telnet/Telnet.\"<init>\":(Ljava/lang/String;)V\n+         2: invokespecial #9                  // Method org/apache/commons/net/telnet/Telnet.\"<init>\":(Ljava/lang/String;)V\n          5: aload_0\n          6: iconst_1\n-         7: putfield      #5                  // Field readerThread:Z\n+         7: putfield      #14                 // Field readerThread:Z\n         10: aload_0\n         11: aconst_null\n-        12: putfield      #6                  // Field input:Ljava/io/InputStream;\n+        12: putfield      #18                 // Field input:Ljava/io/InputStream;\n         15: aload_0\n         16: aconst_null\n-        17: putfield      #7                  // Field output:Ljava/io/OutputStream;\n+        17: putfield      #22                 // Field output:Ljava/io/OutputStream;\n         20: aload_0\n         21: iload_2\n-        22: putfield      #8                  // Field maxSubnegotiationLength:I\n+        22: putfield      #26                 // Field maxSubnegotiationLength:I\n         25: return\n       LineNumberTable:\n         line 94: 0\n         line 51: 5\n         line 96: 10\n         line 97: 15\n         line 98: 20\n@@ -282,24 +282,24 @@\n \n   void flushOutputStream() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0000)\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #9                  // Field _output_:Ljava/io/OutputStream;\n+         1: getfield      #30                 // Field _output_:Ljava/io/OutputStream;\n          4: ifnonnull     17\n-         7: new           #10                 // class java/io/IOException\n+         7: new           #33                 // class java/io/IOException\n         10: dup\n-        11: ldc           #11                 // String Stream closed\n-        13: invokespecial #12                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #35                 // String Stream closed\n+        13: invokespecial #37                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_0\n-        18: getfield      #9                  // Field _output_:Ljava/io/OutputStream;\n-        21: invokevirtual #13                 // Method java/io/OutputStream.flush:()V\n+        18: getfield      #30                 // Field _output_:Ljava/io/OutputStream;\n+        21: invokevirtual #38                 // Method java/io/OutputStream.flush:()V\n         24: return\n       LineNumberTable:\n         line 103: 0\n         line 104: 7\n         line 106: 17\n         line 107: 24\n       StackMapTable: number_of_entries = 1\n@@ -309,28 +309,28 @@\n \n   void closeOutputStream() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0000)\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #9                  // Field _output_:Ljava/io/OutputStream;\n+         1: getfield      #30                 // Field _output_:Ljava/io/OutputStream;\n          4: ifnonnull     8\n          7: return\n          8: aload_0\n-         9: getfield      #9                  // Field _output_:Ljava/io/OutputStream;\n-        12: invokevirtual #14                 // Method java/io/OutputStream.close:()V\n+         9: getfield      #30                 // Field _output_:Ljava/io/OutputStream;\n+        12: invokevirtual #44                 // Method java/io/OutputStream.close:()V\n         15: aload_0\n         16: aconst_null\n-        17: putfield      #9                  // Field _output_:Ljava/io/OutputStream;\n+        17: putfield      #30                 // Field _output_:Ljava/io/OutputStream;\n         20: goto          31\n         23: astore_1\n         24: aload_0\n         25: aconst_null\n-        26: putfield      #9                  // Field _output_:Ljava/io/OutputStream;\n+        26: putfield      #30                 // Field _output_:Ljava/io/OutputStream;\n         29: aload_1\n         30: athrow\n         31: return\n       Exception table:\n          from    to  target type\n              8    15    23   any\n       LineNumberTable:\n@@ -352,41 +352,41 @@\n \n   protected void _connectAction_() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=5, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #15                 // Method org/apache/commons/net/telnet/Telnet._connectAction_:()V\n-         4: new           #16                 // class org/apache/commons/net/telnet/TelnetInputStream\n+         1: invokespecial #47                 // Method org/apache/commons/net/telnet/Telnet._connectAction_:()V\n+         4: new           #50                 // class org/apache/commons/net/telnet/TelnetInputStream\n          7: dup\n          8: aload_0\n-         9: getfield      #17                 // Field _input_:Ljava/io/InputStream;\n+         9: getfield      #52                 // Field _input_:Ljava/io/InputStream;\n         12: aload_0\n         13: aload_0\n-        14: getfield      #5                  // Field readerThread:Z\n-        17: invokespecial #18                 // Method org/apache/commons/net/telnet/TelnetInputStream.\"<init>\":(Ljava/io/InputStream;Lorg/apache/commons/net/telnet/TelnetClient;Z)V\n+        14: getfield      #14                 // Field readerThread:Z\n+        17: invokespecial #55                 // Method org/apache/commons/net/telnet/TelnetInputStream.\"<init>\":(Ljava/io/InputStream;Lorg/apache/commons/net/telnet/TelnetClient;Z)V\n         20: astore_1\n         21: aload_0\n-        22: getfield      #5                  // Field readerThread:Z\n+        22: getfield      #14                 // Field readerThread:Z\n         25: ifeq          32\n         28: aload_1\n-        29: invokevirtual #19                 // Method org/apache/commons/net/telnet/TelnetInputStream._start:()V\n+        29: invokevirtual #58                 // Method org/apache/commons/net/telnet/TelnetInputStream._start:()V\n         32: aload_0\n-        33: new           #20                 // class java/io/BufferedInputStream\n+        33: new           #61                 // class java/io/BufferedInputStream\n         36: dup\n         37: aload_1\n-        38: invokespecial #21                 // Method java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-        41: putfield      #6                  // Field input:Ljava/io/InputStream;\n+        38: invokespecial #63                 // Method java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        41: putfield      #18                 // Field input:Ljava/io/InputStream;\n         44: aload_0\n-        45: new           #22                 // class org/apache/commons/net/telnet/TelnetOutputStream\n+        45: new           #66                 // class org/apache/commons/net/telnet/TelnetOutputStream\n         48: dup\n         49: aload_0\n-        50: invokespecial #23                 // Method org/apache/commons/net/telnet/TelnetOutputStream.\"<init>\":(Lorg/apache/commons/net/telnet/TelnetClient;)V\n-        53: putfield      #7                  // Field output:Ljava/io/OutputStream;\n+        50: invokespecial #68                 // Method org/apache/commons/net/telnet/TelnetOutputStream.\"<init>\":(Lorg/apache/commons/net/telnet/TelnetClient;)V\n+        53: putfield      #22                 // Field output:Ljava/io/OutputStream;\n         56: return\n       LineNumberTable:\n         line 128: 0\n         line 129: 4\n         line 130: 21\n         line 132: 28\n         line 140: 32\n@@ -401,43 +401,43 @@\n \n   public void disconnect() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field input:Ljava/io/InputStream;\n+         1: getfield      #18                 // Field input:Ljava/io/InputStream;\n          4: ifnull        14\n          7: aload_0\n-         8: getfield      #6                  // Field input:Ljava/io/InputStream;\n-        11: invokevirtual #24                 // Method java/io/InputStream.close:()V\n+         8: getfield      #18                 // Field input:Ljava/io/InputStream;\n+        11: invokevirtual #71                 // Method java/io/InputStream.close:()V\n         14: aload_0\n-        15: getfield      #7                  // Field output:Ljava/io/OutputStream;\n+        15: getfield      #22                 // Field output:Ljava/io/OutputStream;\n         18: ifnull        28\n         21: aload_0\n-        22: getfield      #7                  // Field output:Ljava/io/OutputStream;\n-        25: invokevirtual #14                 // Method java/io/OutputStream.close:()V\n+        22: getfield      #22                 // Field output:Ljava/io/OutputStream;\n+        25: invokevirtual #44                 // Method java/io/OutputStream.close:()V\n         28: aload_0\n         29: aconst_null\n-        30: putfield      #7                  // Field output:Ljava/io/OutputStream;\n+        30: putfield      #22                 // Field output:Ljava/io/OutputStream;\n         33: aload_0\n         34: aconst_null\n-        35: putfield      #6                  // Field input:Ljava/io/InputStream;\n+        35: putfield      #18                 // Field input:Ljava/io/InputStream;\n         38: aload_0\n-        39: invokespecial #25                 // Method org/apache/commons/net/telnet/Telnet.disconnect:()V\n+        39: invokespecial #74                 // Method org/apache/commons/net/telnet/Telnet.disconnect:()V\n         42: goto          62\n         45: astore_1\n         46: aload_0\n         47: aconst_null\n-        48: putfield      #7                  // Field output:Ljava/io/OutputStream;\n+        48: putfield      #22                 // Field output:Ljava/io/OutputStream;\n         51: aload_0\n         52: aconst_null\n-        53: putfield      #6                  // Field input:Ljava/io/InputStream;\n+        53: putfield      #18                 // Field input:Ljava/io/InputStream;\n         56: aload_0\n-        57: invokespecial #25                 // Method org/apache/commons/net/telnet/Telnet.disconnect:()V\n+        57: invokespecial #74                 // Method org/apache/commons/net/telnet/Telnet.disconnect:()V\n         60: aload_1\n         61: athrow\n         62: return\n       Exception table:\n          from    to  target type\n              0    28    45   any\n       LineNumberTable:\n@@ -465,42 +465,42 @@\n \n   public java.io.OutputStream getOutputStream();\n     descriptor: ()Ljava/io/OutputStream;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field output:Ljava/io/OutputStream;\n+         1: getfield      #22                 // Field output:Ljava/io/OutputStream;\n          4: areturn\n       LineNumberTable:\n         line 177: 0\n \n   public java.io.InputStream getInputStream();\n     descriptor: ()Ljava/io/InputStream;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field input:Ljava/io/InputStream;\n+         1: getfield      #18                 // Field input:Ljava/io/InputStream;\n          4: areturn\n       LineNumberTable:\n         line 189: 0\n \n   public boolean getLocalOptionState(int);\n     descriptor: (I)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: invokevirtual #26                 // Method stateIsWill:(I)Z\n+         2: invokevirtual #77                 // Method stateIsWill:(I)Z\n          5: ifeq          20\n          8: aload_0\n          9: iload_1\n-        10: invokevirtual #27                 // Method requestedWill:(I)Z\n+        10: invokevirtual #81                 // Method requestedWill:(I)Z\n         13: ifeq          20\n         16: iconst_1\n         17: goto          21\n         20: iconst_0\n         21: ireturn\n       LineNumberTable:\n         line 202: 0\n@@ -512,19 +512,19 @@\n   public boolean getRemoteOptionState(int);\n     descriptor: (I)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: invokevirtual #28                 // Method stateIsDo:(I)Z\n+         2: invokevirtual #84                 // Method stateIsDo:(I)Z\n          5: ifeq          20\n          8: aload_0\n          9: iload_1\n-        10: invokevirtual #29                 // Method requestedDo:(I)Z\n+        10: invokevirtual #87                 // Method requestedDo:(I)Z\n         13: ifeq          20\n         16: iconst_1\n         17: goto          21\n         20: iconst_0\n         21: ireturn\n       LineNumberTable:\n         line 216: 0\n@@ -536,15 +536,15 @@\n   public boolean sendAYT(long) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.InterruptedException;\n     descriptor: (J)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n          1: lload_1\n-         2: invokevirtual #30                 // Method _sendAYT:(J)Z\n+         2: invokevirtual #90                 // Method _sendAYT:(J)Z\n          5: ireturn\n       LineNumberTable:\n         line 237: 0\n     Exceptions:\n       throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.InterruptedException\n \n   public void sendSubnegotiation(int[]) throws java.io.IOException, java.lang.IllegalArgumentException;\n@@ -552,22 +552,22 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_1\n          1: arraylength\n          2: iconst_1\n          3: if_icmpge     16\n-         6: new           #31                 // class java/lang/IllegalArgumentException\n+         6: new           #94                 // class java/lang/IllegalArgumentException\n          9: dup\n-        10: ldc           #32                 // String zero length message\n-        12: invokespecial #33                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        10: ldc           #96                 // String zero length message\n+        12: invokespecial #98                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         15: athrow\n         16: aload_0\n         17: aload_1\n-        18: invokevirtual #34                 // Method _sendSubnegotiation:([I)V\n+        18: invokevirtual #99                 // Method _sendSubnegotiation:([I)V\n         21: return\n       LineNumberTable:\n         line 261: 0\n         line 262: 6\n         line 264: 16\n         line 265: 21\n       StackMapTable: number_of_entries = 1\n@@ -578,147 +578,147 @@\n   public void sendCommand(byte) throws java.io.IOException, java.lang.IllegalArgumentException;\n     descriptor: (B)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: invokevirtual #35                 // Method _sendCommand:(B)V\n+         2: invokevirtual #103                // Method _sendCommand:(B)V\n          5: return\n       LineNumberTable:\n         line 284: 0\n         line 285: 5\n     Exceptions:\n       throws java.io.IOException, java.lang.IllegalArgumentException\n \n   public void addOptionHandler(org.apache.commons.net.telnet.TelnetOptionHandler) throws org.apache.commons.net.telnet.InvalidTelnetOptionException, java.io.IOException;\n     descriptor: (Lorg/apache/commons/net/telnet/TelnetOptionHandler;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #36                 // Method org/apache/commons/net/telnet/Telnet.addOptionHandler:(Lorg/apache/commons/net/telnet/TelnetOptionHandler;)V\n+         2: invokespecial #107                // Method org/apache/commons/net/telnet/Telnet.addOptionHandler:(Lorg/apache/commons/net/telnet/TelnetOptionHandler;)V\n          5: return\n       LineNumberTable:\n         line 301: 0\n         line 302: 5\n     Exceptions:\n       throws org.apache.commons.net.telnet.InvalidTelnetOptionException, java.io.IOException\n \n   public void deleteOptionHandler(int) throws org.apache.commons.net.telnet.InvalidTelnetOptionException, java.io.IOException;\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: invokespecial #37                 // Method org/apache/commons/net/telnet/Telnet.deleteOptionHandler:(I)V\n+         2: invokespecial #111                // Method org/apache/commons/net/telnet/Telnet.deleteOptionHandler:(I)V\n          5: return\n       LineNumberTable:\n         line 317: 0\n         line 318: 5\n     Exceptions:\n       throws org.apache.commons.net.telnet.InvalidTelnetOptionException, java.io.IOException\n \n   public void registerSpyStream(java.io.OutputStream);\n     descriptor: (Ljava/io/OutputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #38                 // Method org/apache/commons/net/telnet/Telnet._registerSpyStream:(Ljava/io/OutputStream;)V\n+         2: invokespecial #115                // Method org/apache/commons/net/telnet/Telnet._registerSpyStream:(Ljava/io/OutputStream;)V\n          5: return\n       LineNumberTable:\n         line 330: 0\n         line 331: 5\n \n   public void stopSpyStream();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #39                 // Method org/apache/commons/net/telnet/Telnet._stopSpyStream:()V\n+         1: invokespecial #119                // Method org/apache/commons/net/telnet/Telnet._stopSpyStream:()V\n          4: return\n       LineNumberTable:\n         line 339: 0\n         line 340: 4\n \n   public void registerNotifHandler(org.apache.commons.net.telnet.TelnetNotificationHandler);\n     descriptor: (Lorg/apache/commons/net/telnet/TelnetNotificationHandler;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #40                 // Method org/apache/commons/net/telnet/Telnet.registerNotifHandler:(Lorg/apache/commons/net/telnet/TelnetNotificationHandler;)V\n+         2: invokespecial #122                // Method org/apache/commons/net/telnet/Telnet.registerNotifHandler:(Lorg/apache/commons/net/telnet/TelnetNotificationHandler;)V\n          5: return\n       LineNumberTable:\n         line 352: 0\n         line 353: 5\n \n   public void unregisterNotifHandler();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #41                 // Method org/apache/commons/net/telnet/Telnet.unregisterNotifHandler:()V\n+         1: invokespecial #126                // Method org/apache/commons/net/telnet/Telnet.unregisterNotifHandler:()V\n          4: return\n       LineNumberTable:\n         line 362: 0\n         line 363: 4\n \n   public void setReaderThread(boolean);\n     descriptor: (Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: putfield      #5                  // Field readerThread:Z\n+         2: putfield      #14                 // Field readerThread:Z\n          5: return\n       LineNumberTable:\n         line 393: 0\n         line 394: 5\n \n   public boolean getReaderThread();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field readerThread:Z\n+         1: getfield      #14                 // Field readerThread:Z\n          4: ireturn\n       LineNumberTable:\n         line 403: 0\n \n   public synchronized void registerInputListener(org.apache.commons.net.telnet.TelnetInputListener);\n     descriptor: (Lorg/apache/commons/net/telnet/TelnetInputListener;)V\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: putfield      #42                 // Field inputListener:Lorg/apache/commons/net/telnet/TelnetInputListener;\n+         2: putfield      #129                // Field inputListener:Lorg/apache/commons/net/telnet/TelnetInputListener;\n          5: return\n       LineNumberTable:\n         line 430: 0\n         line 431: 5\n \n   public synchronized void unregisterInputListener();\n     descriptor: ()V\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: aconst_null\n-         2: putfield      #42                 // Field inputListener:Lorg/apache/commons/net/telnet/TelnetInputListener;\n+         2: putfield      #129                // Field inputListener:Lorg/apache/commons/net/telnet/TelnetInputListener;\n          5: return\n       LineNumberTable:\n         line 440: 0\n         line 441: 5\n \n   void notifyInputListener();\n     descriptor: ()V\n@@ -726,28 +726,28 @@\n     Code:\n       stack=2, locals=4, args_size=1\n          0: aload_0\n          1: dup\n          2: astore_2\n          3: monitorenter\n          4: aload_0\n-         5: getfield      #42                 // Field inputListener:Lorg/apache/commons/net/telnet/TelnetInputListener;\n+         5: getfield      #129                // Field inputListener:Lorg/apache/commons/net/telnet/TelnetInputListener;\n          8: astore_1\n          9: aload_2\n         10: monitorexit\n         11: goto          19\n         14: astore_3\n         15: aload_2\n         16: monitorexit\n         17: aload_3\n         18: athrow\n         19: aload_1\n         20: ifnull        29\n         23: aload_1\n-        24: invokeinterface #43,  1           // InterfaceMethod org/apache/commons/net/telnet/TelnetInputListener.telnetInputAvailable:()V\n+        24: invokeinterface #133,  1          // InterfaceMethod org/apache/commons/net/telnet/TelnetInputListener.telnetInputAvailable:()V\n         29: return\n       Exception table:\n          from    to  target type\n              4    11    14   any\n             14    17    14   any\n       LineNumberTable:\n         line 446: 0\n"}]}
