{"diffoscope-json-version": 1, "source1": "first/Method.class", "source2": "second/Method.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,14 +9,20 @@\n public final class Method extends FieldOrMethod\n {\n     public static final Method[] EMPTY_ARRAY;\n     private static BCELComparator bcelComparator;\n     static final Method[] EMPTY_METHOD_ARRAY;\n     private ParameterAnnotationEntry[] parameterAnnotationEntries;\n     \n+    static {\n+        EMPTY_ARRAY = new Method[0];\n+        Method.bcelComparator = (BCELComparator)new Method.Method$1();\n+        EMPTY_METHOD_ARRAY = new Method[0];\n+    }\n+    \n     public static BCELComparator getComparator() {\n         return Method.bcelComparator;\n     }\n     \n     public static void setComparator(final BCELComparator comparator) {\n         Method.bcelComparator = comparator;\n     }\n@@ -49,24 +55,28 @@\n     }\n     \n     public Type[] getArgumentTypes() {\n         return Type.getArgumentTypes(this.getSignature());\n     }\n     \n     public Code getCode() {\n-        for (final Attribute attribute : super.getAttributes()) {\n+        Attribute[] attributes;\n+        for (int length = (attributes = super.getAttributes()).length, i = 0; i < length; ++i) {\n+            final Attribute attribute = attributes[i];\n             if (attribute instanceof Code) {\n                 return (Code)attribute;\n             }\n         }\n         return null;\n     }\n     \n     public ExceptionTable getExceptionTable() {\n-        for (final Attribute attribute : super.getAttributes()) {\n+        Attribute[] attributes;\n+        for (int length = (attributes = super.getAttributes()).length, i = 0; i < length; ++i) {\n+            final Attribute attribute = attributes[i];\n             if (attribute instanceof ExceptionTable) {\n                 return (ExceptionTable)attribute;\n             }\n         }\n         return null;\n     }\n     \n@@ -105,28 +115,24 @@\n         final String access = Utility.accessToString(super.getAccessFlags());\n         ConstantUtf8 c = super.getConstantPool().getConstantUtf8(super.getSignatureIndex());\n         String signature = c.getBytes();\n         c = super.getConstantPool().getConstantUtf8(super.getNameIndex());\n         final String name = c.getBytes();\n         signature = Utility.methodSignatureToString(signature, name, access, true, this.getLocalVariableTable());\n         final StringBuilder buf = new StringBuilder(signature);\n-        for (final Attribute attribute : super.getAttributes()) {\n+        Attribute[] attributes;\n+        for (int length = (attributes = super.getAttributes()).length, i = 0; i < length; ++i) {\n+            final Attribute attribute = attributes[i];\n             if (!(attribute instanceof Code) && !(attribute instanceof ExceptionTable)) {\n                 buf.append(\" [\").append(attribute).append(\"]\");\n             }\n         }\n         final ExceptionTable e = this.getExceptionTable();\n         if (e != null) {\n             final String str = e.toString();\n             if (!str.isEmpty()) {\n                 buf.append(\"\\n\\t\\tthrows \").append(str);\n             }\n         }\n         return buf.toString();\n     }\n-    \n-    static {\n-        EMPTY_ARRAY = new Method[0];\n-        Method.bcelComparator = (BCELComparator)new Method.Method$1();\n-        EMPTY_METHOD_ARRAY = new Method[0];\n-    }\n }\n"}]}
