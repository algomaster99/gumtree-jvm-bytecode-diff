{"diffoscope-json-version": 1, "source1": "first/XMLPropertyListConfiguration$PListNodeBuilder.class", "source2": "second/XMLPropertyListConfiguration$PListNodeBuilder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,33 +1,38 @@\n \n package org.apache.commons.configuration2.plist;\n \n-import java.util.TimeZone;\n-import java.text.SimpleDateFormat;\n import java.util.Iterator;\n import org.apache.commons.configuration2.tree.ImmutableNode;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.io.UnsupportedEncodingException;\n import org.apache.commons.codec.binary.Base64;\n import java.text.ParseException;\n import java.util.List;\n import java.util.ArrayList;\n import java.util.LinkedList;\n+import java.util.TimeZone;\n+import java.text.SimpleDateFormat;\n import java.util.Collection;\n import java.text.DateFormat;\n \n private static class PListNodeBuilder\n {\n     private static final DateFormat FORMAT;\n     private static final DateFormat GNUSTEP_FORMAT;\n     private final Collection<PListNodeBuilder> childBuilders;\n     private String name;\n     private Object value;\n     \n+    static {\n+        (PListNodeBuilder.FORMAT = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\")).setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+        PListNodeBuilder.GNUSTEP_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss Z\");\n+    }\n+    \n     private PListNodeBuilder() {\n         this.childBuilders = new LinkedList();\n     }\n     \n     public void addValue(final Object v) {\n         if (this.value == null) {\n             this.value = v;\n@@ -45,20 +50,21 @@\n     }\n     \n     public void addDateValue(final String value) {\n         try {\n             if (value.indexOf(32) != -1) {\n                 synchronized (PListNodeBuilder.GNUSTEP_FORMAT) {\n                     this.addValue(PListNodeBuilder.GNUSTEP_FORMAT.parse(value));\n+                    monitorexit(PListNodeBuilder.GNUSTEP_FORMAT);\n+                    return;\n                 }\n             }\n-            else {\n-                synchronized (PListNodeBuilder.FORMAT) {\n-                    this.addValue(PListNodeBuilder.FORMAT.parse(value));\n-                }\n+            synchronized (PListNodeBuilder.FORMAT) {\n+                this.addValue(PListNodeBuilder.FORMAT.parse(value));\n+                monitorexit(PListNodeBuilder.FORMAT);\n             }\n         }\n         catch (final ParseException e) {\n             throw new IllegalArgumentException(String.format(\"'%s' cannot be parsed to a date!\", value), e);\n         }\n     }\n     \n@@ -106,13 +112,8 @@\n         }\n         return nodeBuilder.name(this.name).value(this.getNodeValue()).create();\n     }\n     \n     protected Object getNodeValue() {\n         return this.value;\n     }\n-    \n-    static {\n-        (PListNodeBuilder.FORMAT = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\")).setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-        PListNodeBuilder.GNUSTEP_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss Z\");\n-    }\n }\n"}]}
