{"diffoscope-json-version": 1, "source1": "first/Base64.class", "source2": "second/Base64.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,331 +1,330 @@\n-  SHA-256 checksum 794823d6cd563ee415bb383003910f362094c911482897baf9a2aa856e035c32\n+  SHA-256 checksum f5bf0b160ae6d625c05673cb739ef80205cebfb1f5743b41af2fb0f2f4e24792\n   Compiled from \"Base64.java\"\n public class org.apache.commons.net.util.Base64\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #2                          // org/apache/commons/net/util/Base64\n-  super_class: #80                        // java/lang/Object\n+  super_class: #18                        // java/lang/Object\n   interfaces: 0, fields: 23, methods: 43, attributes: 1\n Constant pool:\n-    #1 = Methodref          #2.#221       // org/apache/commons/net/util/Base64.\"<init>\":(Z)V\n-    #2 = Class              #222          // org/apache/commons/net/util/Base64\n-    #3 = Fieldref           #2.#223       // org/apache/commons/net/util/Base64.CHUNK_SEPARATOR:[B\n-    #4 = Methodref          #2.#224       // org/apache/commons/net/util/Base64.\"<init>\":(I[BZ)V\n-    #5 = Methodref          #2.#225       // org/apache/commons/net/util/Base64.\"<init>\":(I[B)V\n-    #6 = Methodref          #80.#226      // java/lang/Object.\"<init>\":()V\n-    #7 = Fieldref           #2.#227       // org/apache/commons/net/util/Base64.EMPTY_BYTE_ARRAY:[B\n-    #8 = Fieldref           #2.#228       // org/apache/commons/net/util/Base64.lineLength:I\n-    #9 = Fieldref           #2.#229       // org/apache/commons/net/util/Base64.lineSeparator:[B\n-   #10 = Methodref          #230.#231     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #11 = Fieldref           #2.#232       // org/apache/commons/net/util/Base64.encodeSize:I\n-   #12 = Fieldref           #2.#233       // org/apache/commons/net/util/Base64.decodeSize:I\n-   #13 = Methodref          #2.#234       // org/apache/commons/net/util/Base64.containsBase64Byte:([B)Z\n-   #14 = Methodref          #2.#235       // org/apache/commons/net/util/Base64.newStringUtf8:([B)Ljava/lang/String;\n-   #15 = Class              #236          // java/lang/IllegalArgumentException\n-   #16 = Class              #237          // java/lang/StringBuilder\n-   #17 = Methodref          #16.#226      // java/lang/StringBuilder.\"<init>\":()V\n-   #18 = String             #238          // lineSeperator must not contain base64 characters: [\n-   #19 = Methodref          #16.#239      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #20 = String             #240          // ]\n-   #21 = Methodref          #16.#241      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #22 = Methodref          #15.#242      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #23 = Fieldref           #2.#243       // org/apache/commons/net/util/Base64.URL_SAFE_ENCODE_TABLE:[B\n-   #24 = Fieldref           #2.#244       // org/apache/commons/net/util/Base64.STANDARD_ENCODE_TABLE:[B\n-   #25 = Fieldref           #2.#245       // org/apache/commons/net/util/Base64.encodeTable:[B\n-   #26 = Fieldref           #2.#246       // org/apache/commons/net/util/Base64.buffer:[B\n-   #27 = Fieldref           #2.#247       // org/apache/commons/net/util/Base64.pos:I\n-   #28 = Fieldref           #2.#248       // org/apache/commons/net/util/Base64.readPos:I\n-   #29 = Methodref          #2.#249       // org/apache/commons/net/util/Base64.avail:()I\n-   #30 = Methodref          #250.#251     // java/lang/Math.min:(II)I\n-   #31 = Fieldref           #2.#252       // org/apache/commons/net/util/Base64.eof:Z\n-   #32 = Methodref          #2.#253       // org/apache/commons/net/util/Base64.resizeBuffer:()V\n-   #33 = Fieldref           #2.#254       // org/apache/commons/net/util/Base64.modulus:I\n-   #34 = Fieldref           #2.#255       // org/apache/commons/net/util/Base64.x:I\n-   #35 = Fieldref           #2.#256       // org/apache/commons/net/util/Base64.currentLinePos:I\n-   #36 = Fieldref           #2.#257       // org/apache/commons/net/util/Base64.DECODE_TABLE:[B\n-   #37 = Methodref          #2.#258       // org/apache/commons/net/util/Base64.isBase64:(B)Z\n-   #38 = Methodref          #2.#259       // org/apache/commons/net/util/Base64.isWhiteSpace:(B)Z\n-   #39 = Methodref          #2.#260       // org/apache/commons/net/util/Base64.encodeBase64:([BZ)[B\n-   #40 = Methodref          #2.#261       // org/apache/commons/net/util/Base64.encodeBase64:([BZZ)[B\n-   #41 = Methodref          #2.#262       // org/apache/commons/net/util/Base64.getBytesUtf8:(Ljava/lang/String;)[B\n-   #42 = Methodref          #2.#263       // org/apache/commons/net/util/Base64.decode:([B)[B\n-   #43 = String             #264          // UTF8\n-   #44 = Methodref          #63.#265      // java/lang/String.getBytes:(Ljava/lang/String;)[B\n-   #45 = Class              #266          // java/io/UnsupportedEncodingException\n-   #46 = Class              #267          // java/lang/RuntimeException\n-   #47 = Methodref          #46.#268      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #48 = Methodref          #2.#269       // org/apache/commons/net/util/Base64.reset:()V\n-   #49 = Methodref          #2.#270       // org/apache/commons/net/util/Base64.setInitialBuffer:([BII)V\n-   #50 = Methodref          #2.#271       // org/apache/commons/net/util/Base64.decode:([BII)V\n-   #51 = Methodref          #2.#272       // org/apache/commons/net/util/Base64.readResults:([BII)I\n-   #52 = Class              #273          // java/lang/Integer\n-   #53 = Integer            2147483647\n-   #54 = Methodref          #2.#274       // org/apache/commons/net/util/Base64.encodeBase64:([BZZI)[B\n-   #55 = Methodref          #2.#275       // org/apache/commons/net/util/Base64.getEncodeLength:([BI[B)J\n-   #56 = String             #276          // Input array too big, the output array would be bigger (\n-   #57 = Methodref          #16.#277      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #58 = String             #278          // ) than the specified maxium size of\n-   #59 = Methodref          #16.#279      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #60 = Methodref          #2.#280       // org/apache/commons/net/util/Base64.encode:([B)[B\n-   #61 = Methodref          #2.#226       // org/apache/commons/net/util/Base64.\"<init>\":()V\n-   #62 = Methodref          #2.#281       // org/apache/commons/net/util/Base64.decode:(Ljava/lang/String;)[B\n-   #63 = Class              #282          // java/lang/String\n-   #64 = Methodref          #63.#283      // java/lang/String.\"<init>\":([BLjava/lang/String;)V\n-   #65 = Methodref          #2.#284       // org/apache/commons/net/util/Base64.encode:([BII)V\n-   #66 = Methodref          #2.#285       // org/apache/commons/net/util/Base64.isUrlSafe:()Z\n-   #67 = Long               4l\n-   #69 = Class              #286          // java/math/BigInteger\n-   #70 = Methodref          #2.#287       // org/apache/commons/net/util/Base64.decodeBase64:([B)[B\n-   #71 = Methodref          #69.#225      // java/math/BigInteger.\"<init>\":(I[B)V\n-   #72 = Class              #288          // java/lang/NullPointerException\n-   #73 = String             #289          // encodeInteger called with null parameter\n-   #74 = Methodref          #72.#242      // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n-   #75 = Methodref          #2.#290       // org/apache/commons/net/util/Base64.toIntegerBytes:(Ljava/math/BigInteger;)[B\n-   #76 = Methodref          #69.#291      // java/math/BigInteger.bitLength:()I\n-   #77 = Methodref          #69.#292      // java/math/BigInteger.toByteArray:()[B\n-   #78 = Methodref          #293.#294     // \"[B\".clone:()Ljava/lang/Object;\n-   #79 = Class              #90           // \"[B\"\n-   #80 = Class              #295          // java/lang/Object\n-   #81 = Utf8               DEFAULT_BUFFER_RESIZE_FACTOR\n-   #82 = Utf8               I\n-   #83 = Utf8               ConstantValue\n-   #84 = Integer            2\n-   #85 = Utf8               DEFAULT_BUFFER_SIZE\n-   #86 = Integer            8192\n-   #87 = Utf8               CHUNK_SIZE\n-   #88 = Integer            76\n-   #89 = Utf8               CHUNK_SEPARATOR\n-   #90 = Utf8               [B\n-   #91 = Utf8               EMPTY_BYTE_ARRAY\n-   #92 = Utf8               STANDARD_ENCODE_TABLE\n-   #93 = Utf8               URL_SAFE_ENCODE_TABLE\n-   #94 = Utf8               PAD\n-   #95 = Utf8               B\n-   #96 = Integer            61\n-   #97 = Utf8               DECODE_TABLE\n-   #98 = Utf8               MASK_6BITS\n-   #99 = Integer            63\n-  #100 = Utf8               MASK_8BITS\n-  #101 = Integer            255\n-  #102 = Utf8               encodeTable\n-  #103 = Utf8               lineLength\n-  #104 = Utf8               lineSeparator\n-  #105 = Utf8               decodeSize\n-  #106 = Utf8               encodeSize\n-  #107 = Utf8               buffer\n-  #108 = Utf8               pos\n-  #109 = Utf8               readPos\n-  #110 = Utf8               currentLinePos\n-  #111 = Utf8               modulus\n-  #112 = Utf8               eof\n-  #113 = Utf8               Z\n-  #114 = Utf8               x\n-  #115 = Utf8               <init>\n-  #116 = Utf8               ()V\n-  #117 = Utf8               Code\n-  #118 = Utf8               LineNumberTable\n-  #119 = Utf8               LocalVariableTable\n-  #120 = Utf8               this\n-  #121 = Utf8               Lorg/apache/commons/net/util/Base64;\n-  #122 = Utf8               (Z)V\n-  #123 = Utf8               urlSafe\n-  #124 = Utf8               (I)V\n-  #125 = Utf8               (I[B)V\n-  #126 = Utf8               (I[BZ)V\n-  #127 = Utf8               sep\n-  #128 = Utf8               Ljava/lang/String;\n-  #129 = Utf8               StackMapTable\n-  #130 = Utf8               isUrlSafe\n-  #131 = Utf8               ()Z\n-  #132 = Utf8               hasData\n-  #133 = Utf8               avail\n-  #134 = Utf8               ()I\n-  #135 = Utf8               resizeBuffer\n-  #136 = Utf8               b\n-  #137 = Utf8               readResults\n-  #138 = Utf8               ([BII)I\n-  #139 = Utf8               len\n-  #140 = Utf8               bPos\n-  #141 = Utf8               bAvail\n-  #142 = Utf8               setInitialBuffer\n-  #143 = Utf8               ([BII)V\n-  #144 = Utf8               out\n-  #145 = Utf8               outPos\n-  #146 = Utf8               outAvail\n-  #147 = Utf8               encode\n-  #148 = Utf8               i\n-  #149 = Utf8               in\n-  #150 = Utf8               inPos\n-  #151 = Utf8               inAvail\n-  #152 = Utf8               decode\n-  #153 = Utf8               result\n-  #154 = Utf8               isBase64\n-  #155 = Utf8               (B)Z\n-  #156 = Utf8               octet\n-  #157 = Utf8               isArrayByteBase64\n-  #158 = Utf8               ([B)Z\n-  #159 = Utf8               element\n-  #160 = Utf8               arrayOctet\n-  #161 = Utf8               containsBase64Byte\n-  #162 = Utf8               encodeBase64\n-  #163 = Utf8               ([B)[B\n-  #164 = Utf8               binaryData\n-  #165 = Utf8               encodeBase64String\n-  #166 = Utf8               ([B)Ljava/lang/String;\n-  #167 = Utf8               encodeBase64StringUnChunked\n-  #168 = Utf8               ([BZ)Ljava/lang/String;\n-  #169 = Utf8               useChunking\n-  #170 = Utf8               encodeBase64URLSafe\n-  #171 = Utf8               encodeBase64URLSafeString\n-  #172 = Utf8               encodeBase64Chunked\n-  #173 = Utf8               (Ljava/lang/String;)[B\n-  #174 = Utf8               pArray\n-  #175 = Utf8               getBytesUtf8\n-  #176 = Utf8               e\n-  #177 = Utf8               Ljava/io/UnsupportedEncodingException;\n-  #178 = Utf8               J\n-  #179 = Utf8               buf\n-  #180 = Utf8               ([BZ)[B\n-  #181 = Utf8               isChunked\n-  #182 = Utf8               ([BZZ)[B\n-  #183 = Utf8               ([BZZI)[B\n-  #184 = Utf8               maxResultSize\n-  #185 = Utf8               b64\n-  #186 = Utf8               decodeBase64\n-  #187 = Utf8               base64String\n-  #188 = Utf8               base64Data\n-  #189 = Utf8               isWhiteSpace\n-  #190 = Utf8               byteToCheck\n-  #191 = Utf8               encodeToString\n-  #192 = Utf8               newStringUtf8\n-  #193 = Utf8               ue\n-  #194 = Utf8               str\n-  #195 = Utf8               smallerBuf\n-  #196 = Utf8               getEncodeLength\n-  #197 = Utf8               ([BI[B)J\n-  #198 = Utf8               lenChunksPerfectly\n-  #199 = Utf8               chunkSize\n-  #200 = Utf8               chunkSeparator\n-  #201 = Utf8               mod\n-  #202 = Utf8               decodeInteger\n-  #203 = Utf8               ([B)Ljava/math/BigInteger;\n-  #204 = Utf8               encodeInteger\n-  #205 = Utf8               (Ljava/math/BigInteger;)[B\n-  #206 = Utf8               bigInt\n-  #207 = Utf8               Ljava/math/BigInteger;\n-  #208 = Utf8               toIntegerBytes\n-  #209 = Utf8               bitlen\n-  #210 = Utf8               bigBytes\n-  #211 = Utf8               startSrc\n-  #212 = Utf8               startDst\n-  #213 = Utf8               resizedBytes\n-  #214 = Utf8               reset\n-  #215 = Utf8               getLineLength\n-  #216 = Utf8               getLineSeparator\n-  #217 = Utf8               ()[B\n-  #218 = Utf8               <clinit>\n-  #219 = Utf8               SourceFile\n-  #220 = Utf8               Base64.java\n-  #221 = NameAndType        #115:#122     // \"<init>\":(Z)V\n-  #222 = Utf8               org/apache/commons/net/util/Base64\n-  #223 = NameAndType        #89:#90       // CHUNK_SEPARATOR:[B\n-  #224 = NameAndType        #115:#126     // \"<init>\":(I[BZ)V\n-  #225 = NameAndType        #115:#125     // \"<init>\":(I[B)V\n-  #226 = NameAndType        #115:#116     // \"<init>\":()V\n-  #227 = NameAndType        #91:#90       // EMPTY_BYTE_ARRAY:[B\n-  #228 = NameAndType        #103:#82      // lineLength:I\n-  #229 = NameAndType        #104:#90      // lineSeparator:[B\n-  #230 = Class              #296          // java/lang/System\n-  #231 = NameAndType        #297:#298     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #232 = NameAndType        #106:#82      // encodeSize:I\n-  #233 = NameAndType        #105:#82      // decodeSize:I\n-  #234 = NameAndType        #161:#158     // containsBase64Byte:([B)Z\n-  #235 = NameAndType        #192:#166     // newStringUtf8:([B)Ljava/lang/String;\n-  #236 = Utf8               java/lang/IllegalArgumentException\n-  #237 = Utf8               java/lang/StringBuilder\n-  #238 = Utf8               lineSeperator must not contain base64 characters: [\n-  #239 = NameAndType        #299:#300     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #240 = Utf8               ]\n-  #241 = NameAndType        #301:#302     // toString:()Ljava/lang/String;\n-  #242 = NameAndType        #115:#303     // \"<init>\":(Ljava/lang/String;)V\n-  #243 = NameAndType        #93:#90       // URL_SAFE_ENCODE_TABLE:[B\n-  #244 = NameAndType        #92:#90       // STANDARD_ENCODE_TABLE:[B\n-  #245 = NameAndType        #102:#90      // encodeTable:[B\n-  #246 = NameAndType        #107:#90      // buffer:[B\n-  #247 = NameAndType        #108:#82      // pos:I\n-  #248 = NameAndType        #109:#82      // readPos:I\n-  #249 = NameAndType        #133:#134     // avail:()I\n-  #250 = Class              #304          // java/lang/Math\n-  #251 = NameAndType        #305:#306     // min:(II)I\n-  #252 = NameAndType        #112:#113     // eof:Z\n-  #253 = NameAndType        #135:#116     // resizeBuffer:()V\n-  #254 = NameAndType        #111:#82      // modulus:I\n-  #255 = NameAndType        #114:#82      // x:I\n-  #256 = NameAndType        #110:#82      // currentLinePos:I\n-  #257 = NameAndType        #97:#90       // DECODE_TABLE:[B\n-  #258 = NameAndType        #154:#155     // isBase64:(B)Z\n-  #259 = NameAndType        #189:#155     // isWhiteSpace:(B)Z\n-  #260 = NameAndType        #162:#180     // encodeBase64:([BZ)[B\n-  #261 = NameAndType        #162:#182     // encodeBase64:([BZZ)[B\n-  #262 = NameAndType        #175:#173     // getBytesUtf8:(Ljava/lang/String;)[B\n-  #263 = NameAndType        #152:#163     // decode:([B)[B\n-  #264 = Utf8               UTF8\n-  #265 = NameAndType        #307:#173     // getBytes:(Ljava/lang/String;)[B\n-  #266 = Utf8               java/io/UnsupportedEncodingException\n-  #267 = Utf8               java/lang/RuntimeException\n-  #268 = NameAndType        #115:#308     // \"<init>\":(Ljava/lang/Throwable;)V\n-  #269 = NameAndType        #214:#116     // reset:()V\n-  #270 = NameAndType        #142:#143     // setInitialBuffer:([BII)V\n-  #271 = NameAndType        #152:#143     // decode:([BII)V\n-  #272 = NameAndType        #137:#138     // readResults:([BII)I\n-  #273 = Utf8               java/lang/Integer\n-  #274 = NameAndType        #162:#183     // encodeBase64:([BZZI)[B\n-  #275 = NameAndType        #196:#197     // getEncodeLength:([BI[B)J\n-  #276 = Utf8               Input array too big, the output array would be bigger (\n-  #277 = NameAndType        #299:#309     // append:(J)Ljava/lang/StringBuilder;\n-  #278 = Utf8               ) than the specified maxium size of\n-  #279 = NameAndType        #299:#310     // append:(I)Ljava/lang/StringBuilder;\n-  #280 = NameAndType        #147:#163     // encode:([B)[B\n-  #281 = NameAndType        #152:#173     // decode:(Ljava/lang/String;)[B\n-  #282 = Utf8               java/lang/String\n-  #283 = NameAndType        #115:#311     // \"<init>\":([BLjava/lang/String;)V\n-  #284 = NameAndType        #147:#143     // encode:([BII)V\n-  #285 = NameAndType        #130:#131     // isUrlSafe:()Z\n-  #286 = Utf8               java/math/BigInteger\n-  #287 = NameAndType        #186:#163     // decodeBase64:([B)[B\n-  #288 = Utf8               java/lang/NullPointerException\n-  #289 = Utf8               encodeInteger called with null parameter\n-  #290 = NameAndType        #208:#205     // toIntegerBytes:(Ljava/math/BigInteger;)[B\n-  #291 = NameAndType        #312:#134     // bitLength:()I\n-  #292 = NameAndType        #313:#217     // toByteArray:()[B\n-  #293 = Class              #90           // \"[B\"\n-  #294 = NameAndType        #314:#315     // clone:()Ljava/lang/Object;\n-  #295 = Utf8               java/lang/Object\n-  #296 = Utf8               java/lang/System\n-  #297 = Utf8               arraycopy\n-  #298 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #299 = Utf8               append\n-  #300 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #301 = Utf8               toString\n-  #302 = Utf8               ()Ljava/lang/String;\n-  #303 = Utf8               (Ljava/lang/String;)V\n-  #304 = Utf8               java/lang/Math\n-  #305 = Utf8               min\n-  #306 = Utf8               (II)I\n-  #307 = Utf8               getBytes\n-  #308 = Utf8               (Ljava/lang/Throwable;)V\n-  #309 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #310 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #311 = Utf8               ([BLjava/lang/String;)V\n-  #312 = Utf8               bitLength\n-  #313 = Utf8               toByteArray\n-  #314 = Utf8               clone\n-  #315 = Utf8               ()Ljava/lang/Object;\n+    #1 = Methodref          #2.#3         // org/apache/commons/net/util/Base64.\"<init>\":(Z)V\n+    #2 = Class              #4            // org/apache/commons/net/util/Base64\n+    #3 = NameAndType        #5:#6         // \"<init>\":(Z)V\n+    #4 = Utf8               org/apache/commons/net/util/Base64\n+    #5 = Utf8               <init>\n+    #6 = Utf8               (Z)V\n+    #7 = Fieldref           #2.#8         // org/apache/commons/net/util/Base64.CHUNK_SEPARATOR:[B\n+    #8 = NameAndType        #9:#10        // CHUNK_SEPARATOR:[B\n+    #9 = Utf8               CHUNK_SEPARATOR\n+   #10 = Utf8               [B\n+   #11 = Methodref          #2.#12        // org/apache/commons/net/util/Base64.\"<init>\":(I[BZ)V\n+   #12 = NameAndType        #5:#13        // \"<init>\":(I[BZ)V\n+   #13 = Utf8               (I[BZ)V\n+   #14 = Methodref          #2.#15        // org/apache/commons/net/util/Base64.\"<init>\":(I[B)V\n+   #15 = NameAndType        #5:#16        // \"<init>\":(I[B)V\n+   #16 = Utf8               (I[B)V\n+   #17 = Methodref          #18.#19       // java/lang/Object.\"<init>\":()V\n+   #18 = Class              #20           // java/lang/Object\n+   #19 = NameAndType        #5:#21        // \"<init>\":()V\n+   #20 = Utf8               java/lang/Object\n+   #21 = Utf8               ()V\n+   #22 = Fieldref           #2.#23        // org/apache/commons/net/util/Base64.EMPTY_BYTE_ARRAY:[B\n+   #23 = NameAndType        #24:#10       // EMPTY_BYTE_ARRAY:[B\n+   #24 = Utf8               EMPTY_BYTE_ARRAY\n+   #25 = Fieldref           #2.#26        // org/apache/commons/net/util/Base64.lineLength:I\n+   #26 = NameAndType        #27:#28       // lineLength:I\n+   #27 = Utf8               lineLength\n+   #28 = Utf8               I\n+   #29 = Fieldref           #2.#30        // org/apache/commons/net/util/Base64.lineSeparator:[B\n+   #30 = NameAndType        #31:#10       // lineSeparator:[B\n+   #31 = Utf8               lineSeparator\n+   #32 = Methodref          #33.#34       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #33 = Class              #35           // java/lang/System\n+   #34 = NameAndType        #36:#37       // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #35 = Utf8               java/lang/System\n+   #36 = Utf8               arraycopy\n+   #37 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #38 = Fieldref           #2.#39        // org/apache/commons/net/util/Base64.encodeSize:I\n+   #39 = NameAndType        #40:#28       // encodeSize:I\n+   #40 = Utf8               encodeSize\n+   #41 = Fieldref           #2.#42        // org/apache/commons/net/util/Base64.decodeSize:I\n+   #42 = NameAndType        #43:#28       // decodeSize:I\n+   #43 = Utf8               decodeSize\n+   #44 = Methodref          #2.#45        // org/apache/commons/net/util/Base64.containsBase64Byte:([B)Z\n+   #45 = NameAndType        #46:#47       // containsBase64Byte:([B)Z\n+   #46 = Utf8               containsBase64Byte\n+   #47 = Utf8               ([B)Z\n+   #48 = Methodref          #2.#49        // org/apache/commons/net/util/Base64.newStringUtf8:([B)Ljava/lang/String;\n+   #49 = NameAndType        #50:#51       // newStringUtf8:([B)Ljava/lang/String;\n+   #50 = Utf8               newStringUtf8\n+   #51 = Utf8               ([B)Ljava/lang/String;\n+   #52 = Class              #53           // java/lang/IllegalArgumentException\n+   #53 = Utf8               java/lang/IllegalArgumentException\n+   #54 = Class              #55           // java/lang/StringBuilder\n+   #55 = Utf8               java/lang/StringBuilder\n+   #56 = Methodref          #54.#19       // java/lang/StringBuilder.\"<init>\":()V\n+   #57 = String             #58           // lineSeperator must not contain base64 characters: [\n+   #58 = Utf8               lineSeperator must not contain base64 characters: [\n+   #59 = Methodref          #54.#60       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #60 = NameAndType        #61:#62       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #61 = Utf8               append\n+   #62 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #63 = String             #64           // ]\n+   #64 = Utf8               ]\n+   #65 = Methodref          #54.#66       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #66 = NameAndType        #67:#68       // toString:()Ljava/lang/String;\n+   #67 = Utf8               toString\n+   #68 = Utf8               ()Ljava/lang/String;\n+   #69 = Methodref          #52.#70       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #70 = NameAndType        #5:#71        // \"<init>\":(Ljava/lang/String;)V\n+   #71 = Utf8               (Ljava/lang/String;)V\n+   #72 = Fieldref           #2.#73        // org/apache/commons/net/util/Base64.URL_SAFE_ENCODE_TABLE:[B\n+   #73 = NameAndType        #74:#10       // URL_SAFE_ENCODE_TABLE:[B\n+   #74 = Utf8               URL_SAFE_ENCODE_TABLE\n+   #75 = Fieldref           #2.#76        // org/apache/commons/net/util/Base64.STANDARD_ENCODE_TABLE:[B\n+   #76 = NameAndType        #77:#10       // STANDARD_ENCODE_TABLE:[B\n+   #77 = Utf8               STANDARD_ENCODE_TABLE\n+   #78 = Fieldref           #2.#79        // org/apache/commons/net/util/Base64.encodeTable:[B\n+   #79 = NameAndType        #80:#10       // encodeTable:[B\n+   #80 = Utf8               encodeTable\n+   #81 = Fieldref           #2.#82        // org/apache/commons/net/util/Base64.buffer:[B\n+   #82 = NameAndType        #83:#10       // buffer:[B\n+   #83 = Utf8               buffer\n+   #84 = Fieldref           #2.#85        // org/apache/commons/net/util/Base64.pos:I\n+   #85 = NameAndType        #86:#28       // pos:I\n+   #86 = Utf8               pos\n+   #87 = Fieldref           #2.#88        // org/apache/commons/net/util/Base64.readPos:I\n+   #88 = NameAndType        #89:#28       // readPos:I\n+   #89 = Utf8               readPos\n+   #90 = Methodref          #2.#91        // org/apache/commons/net/util/Base64.avail:()I\n+   #91 = NameAndType        #92:#93       // avail:()I\n+   #92 = Utf8               avail\n+   #93 = Utf8               ()I\n+   #94 = Methodref          #95.#96       // java/lang/Math.min:(II)I\n+   #95 = Class              #97           // java/lang/Math\n+   #96 = NameAndType        #98:#99       // min:(II)I\n+   #97 = Utf8               java/lang/Math\n+   #98 = Utf8               min\n+   #99 = Utf8               (II)I\n+  #100 = Fieldref           #2.#101       // org/apache/commons/net/util/Base64.eof:Z\n+  #101 = NameAndType        #102:#103     // eof:Z\n+  #102 = Utf8               eof\n+  #103 = Utf8               Z\n+  #104 = Methodref          #2.#105       // org/apache/commons/net/util/Base64.resizeBuffer:()V\n+  #105 = NameAndType        #106:#21      // resizeBuffer:()V\n+  #106 = Utf8               resizeBuffer\n+  #107 = Fieldref           #2.#108       // org/apache/commons/net/util/Base64.modulus:I\n+  #108 = NameAndType        #109:#28      // modulus:I\n+  #109 = Utf8               modulus\n+  #110 = Fieldref           #2.#111       // org/apache/commons/net/util/Base64.x:I\n+  #111 = NameAndType        #112:#28      // x:I\n+  #112 = Utf8               x\n+  #113 = Fieldref           #2.#114       // org/apache/commons/net/util/Base64.currentLinePos:I\n+  #114 = NameAndType        #115:#28      // currentLinePos:I\n+  #115 = Utf8               currentLinePos\n+  #116 = Fieldref           #2.#117       // org/apache/commons/net/util/Base64.DECODE_TABLE:[B\n+  #117 = NameAndType        #118:#10      // DECODE_TABLE:[B\n+  #118 = Utf8               DECODE_TABLE\n+  #119 = Methodref          #2.#120       // org/apache/commons/net/util/Base64.isBase64:(B)Z\n+  #120 = NameAndType        #121:#122     // isBase64:(B)Z\n+  #121 = Utf8               isBase64\n+  #122 = Utf8               (B)Z\n+  #123 = Methodref          #2.#124       // org/apache/commons/net/util/Base64.isWhiteSpace:(B)Z\n+  #124 = NameAndType        #125:#122     // isWhiteSpace:(B)Z\n+  #125 = Utf8               isWhiteSpace\n+  #126 = Methodref          #2.#127       // org/apache/commons/net/util/Base64.encodeBase64:([BZ)[B\n+  #127 = NameAndType        #128:#129     // encodeBase64:([BZ)[B\n+  #128 = Utf8               encodeBase64\n+  #129 = Utf8               ([BZ)[B\n+  #130 = Methodref          #2.#131       // org/apache/commons/net/util/Base64.encodeBase64:([BZZ)[B\n+  #131 = NameAndType        #128:#132     // encodeBase64:([BZZ)[B\n+  #132 = Utf8               ([BZZ)[B\n+  #133 = Methodref          #2.#134       // org/apache/commons/net/util/Base64.getBytesUtf8:(Ljava/lang/String;)[B\n+  #134 = NameAndType        #135:#136     // getBytesUtf8:(Ljava/lang/String;)[B\n+  #135 = Utf8               getBytesUtf8\n+  #136 = Utf8               (Ljava/lang/String;)[B\n+  #137 = Methodref          #2.#138       // org/apache/commons/net/util/Base64.decode:([B)[B\n+  #138 = NameAndType        #139:#140     // decode:([B)[B\n+  #139 = Utf8               decode\n+  #140 = Utf8               ([B)[B\n+  #141 = String             #142          // UTF8\n+  #142 = Utf8               UTF8\n+  #143 = Methodref          #144.#145     // java/lang/String.getBytes:(Ljava/lang/String;)[B\n+  #144 = Class              #146          // java/lang/String\n+  #145 = NameAndType        #147:#136     // getBytes:(Ljava/lang/String;)[B\n+  #146 = Utf8               java/lang/String\n+  #147 = Utf8               getBytes\n+  #148 = Class              #149          // java/io/UnsupportedEncodingException\n+  #149 = Utf8               java/io/UnsupportedEncodingException\n+  #150 = Class              #151          // java/lang/RuntimeException\n+  #151 = Utf8               java/lang/RuntimeException\n+  #152 = Methodref          #150.#153     // java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n+  #153 = NameAndType        #5:#154       // \"<init>\":(Ljava/lang/Throwable;)V\n+  #154 = Utf8               (Ljava/lang/Throwable;)V\n+  #155 = Methodref          #2.#156       // org/apache/commons/net/util/Base64.reset:()V\n+  #156 = NameAndType        #157:#21      // reset:()V\n+  #157 = Utf8               reset\n+  #158 = Methodref          #2.#159       // org/apache/commons/net/util/Base64.setInitialBuffer:([BII)V\n+  #159 = NameAndType        #160:#161     // setInitialBuffer:([BII)V\n+  #160 = Utf8               setInitialBuffer\n+  #161 = Utf8               ([BII)V\n+  #162 = Methodref          #2.#163       // org/apache/commons/net/util/Base64.decode:([BII)V\n+  #163 = NameAndType        #139:#161     // decode:([BII)V\n+  #164 = Methodref          #2.#165       // org/apache/commons/net/util/Base64.readResults:([BII)I\n+  #165 = NameAndType        #166:#167     // readResults:([BII)I\n+  #166 = Utf8               readResults\n+  #167 = Utf8               ([BII)I\n+  #168 = Class              #169          // java/lang/Integer\n+  #169 = Utf8               java/lang/Integer\n+  #170 = Integer            2147483647\n+  #171 = Methodref          #2.#172       // org/apache/commons/net/util/Base64.encodeBase64:([BZZI)[B\n+  #172 = NameAndType        #128:#173     // encodeBase64:([BZZI)[B\n+  #173 = Utf8               ([BZZI)[B\n+  #174 = Methodref          #2.#175       // org/apache/commons/net/util/Base64.getEncodeLength:([BI[B)J\n+  #175 = NameAndType        #176:#177     // getEncodeLength:([BI[B)J\n+  #176 = Utf8               getEncodeLength\n+  #177 = Utf8               ([BI[B)J\n+  #178 = String             #179          // Input array too big, the output array would be bigger (\n+  #179 = Utf8               Input array too big, the output array would be bigger (\n+  #180 = Methodref          #54.#181      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+  #181 = NameAndType        #61:#182      // append:(J)Ljava/lang/StringBuilder;\n+  #182 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #183 = String             #184          // ) than the specified maxium size of\n+  #184 = Utf8               ) than the specified maxium size of\n+  #185 = Methodref          #54.#186      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #186 = NameAndType        #61:#187      // append:(I)Ljava/lang/StringBuilder;\n+  #187 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #188 = Methodref          #2.#189       // org/apache/commons/net/util/Base64.encode:([B)[B\n+  #189 = NameAndType        #190:#140     // encode:([B)[B\n+  #190 = Utf8               encode\n+  #191 = Methodref          #2.#19        // org/apache/commons/net/util/Base64.\"<init>\":()V\n+  #192 = Methodref          #2.#193       // org/apache/commons/net/util/Base64.decode:(Ljava/lang/String;)[B\n+  #193 = NameAndType        #139:#136     // decode:(Ljava/lang/String;)[B\n+  #194 = Methodref          #144.#195     // java/lang/String.\"<init>\":([BLjava/lang/String;)V\n+  #195 = NameAndType        #5:#196       // \"<init>\":([BLjava/lang/String;)V\n+  #196 = Utf8               ([BLjava/lang/String;)V\n+  #197 = Methodref          #2.#198       // org/apache/commons/net/util/Base64.encode:([BII)V\n+  #198 = NameAndType        #190:#161     // encode:([BII)V\n+  #199 = Methodref          #2.#200       // org/apache/commons/net/util/Base64.isUrlSafe:()Z\n+  #200 = NameAndType        #201:#202     // isUrlSafe:()Z\n+  #201 = Utf8               isUrlSafe\n+  #202 = Utf8               ()Z\n+  #203 = Long               4l\n+  #205 = Class              #206          // java/math/BigInteger\n+  #206 = Utf8               java/math/BigInteger\n+  #207 = Methodref          #2.#208       // org/apache/commons/net/util/Base64.decodeBase64:([B)[B\n+  #208 = NameAndType        #209:#140     // decodeBase64:([B)[B\n+  #209 = Utf8               decodeBase64\n+  #210 = Methodref          #205.#15      // java/math/BigInteger.\"<init>\":(I[B)V\n+  #211 = Class              #212          // java/lang/NullPointerException\n+  #212 = Utf8               java/lang/NullPointerException\n+  #213 = String             #214          // encodeInteger called with null parameter\n+  #214 = Utf8               encodeInteger called with null parameter\n+  #215 = Methodref          #211.#70      // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n+  #216 = Methodref          #2.#217       // org/apache/commons/net/util/Base64.toIntegerBytes:(Ljava/math/BigInteger;)[B\n+  #217 = NameAndType        #218:#219     // toIntegerBytes:(Ljava/math/BigInteger;)[B\n+  #218 = Utf8               toIntegerBytes\n+  #219 = Utf8               (Ljava/math/BigInteger;)[B\n+  #220 = Methodref          #205.#221     // java/math/BigInteger.bitLength:()I\n+  #221 = NameAndType        #222:#93      // bitLength:()I\n+  #222 = Utf8               bitLength\n+  #223 = Methodref          #205.#224     // java/math/BigInteger.toByteArray:()[B\n+  #224 = NameAndType        #225:#226     // toByteArray:()[B\n+  #225 = Utf8               toByteArray\n+  #226 = Utf8               ()[B\n+  #227 = Methodref          #228.#229     // \"[B\".clone:()Ljava/lang/Object;\n+  #228 = Class              #10           // \"[B\"\n+  #229 = NameAndType        #230:#231     // clone:()Ljava/lang/Object;\n+  #230 = Utf8               clone\n+  #231 = Utf8               ()Ljava/lang/Object;\n+  #232 = Utf8               DEFAULT_BUFFER_RESIZE_FACTOR\n+  #233 = Utf8               ConstantValue\n+  #234 = Integer            2\n+  #235 = Utf8               DEFAULT_BUFFER_SIZE\n+  #236 = Integer            8192\n+  #237 = Utf8               CHUNK_SIZE\n+  #238 = Integer            76\n+  #239 = Utf8               PAD\n+  #240 = Utf8               B\n+  #241 = Integer            61\n+  #242 = Utf8               MASK_6BITS\n+  #243 = Integer            63\n+  #244 = Utf8               MASK_8BITS\n+  #245 = Integer            255\n+  #246 = Utf8               Code\n+  #247 = Utf8               LineNumberTable\n+  #248 = Utf8               LocalVariableTable\n+  #249 = Utf8               this\n+  #250 = Utf8               Lorg/apache/commons/net/util/Base64;\n+  #251 = Utf8               urlSafe\n+  #252 = Utf8               (I)V\n+  #253 = Utf8               sep\n+  #254 = Utf8               Ljava/lang/String;\n+  #255 = Utf8               StackMapTable\n+  #256 = Utf8               hasData\n+  #257 = Utf8               b\n+  #258 = Utf8               len\n+  #259 = Utf8               bPos\n+  #260 = Utf8               bAvail\n+  #261 = Utf8               out\n+  #262 = Utf8               outPos\n+  #263 = Utf8               outAvail\n+  #264 = Utf8               i\n+  #265 = Utf8               in\n+  #266 = Utf8               inPos\n+  #267 = Utf8               inAvail\n+  #268 = Utf8               result\n+  #269 = Utf8               octet\n+  #270 = Utf8               isArrayByteBase64\n+  #271 = Utf8               element\n+  #272 = Utf8               arrayOctet\n+  #273 = Utf8               binaryData\n+  #274 = Utf8               encodeBase64String\n+  #275 = Utf8               encodeBase64StringUnChunked\n+  #276 = Utf8               ([BZ)Ljava/lang/String;\n+  #277 = Utf8               useChunking\n+  #278 = Utf8               encodeBase64URLSafe\n+  #279 = Utf8               encodeBase64URLSafeString\n+  #280 = Utf8               encodeBase64Chunked\n+  #281 = Utf8               pArray\n+  #282 = Utf8               e\n+  #283 = Utf8               Ljava/io/UnsupportedEncodingException;\n+  #284 = Utf8               J\n+  #285 = Utf8               buf\n+  #286 = Utf8               isChunked\n+  #287 = Utf8               maxResultSize\n+  #288 = Utf8               b64\n+  #289 = Utf8               base64String\n+  #290 = Utf8               base64Data\n+  #291 = Utf8               byteToCheck\n+  #292 = Utf8               encodeToString\n+  #293 = Utf8               ue\n+  #294 = Utf8               str\n+  #295 = Utf8               smallerBuf\n+  #296 = Utf8               lenChunksPerfectly\n+  #297 = Utf8               chunkSize\n+  #298 = Utf8               chunkSeparator\n+  #299 = Utf8               mod\n+  #300 = Utf8               decodeInteger\n+  #301 = Utf8               ([B)Ljava/math/BigInteger;\n+  #302 = Utf8               encodeInteger\n+  #303 = Utf8               bigInt\n+  #304 = Utf8               Ljava/math/BigInteger;\n+  #305 = Utf8               bitlen\n+  #306 = Utf8               bigBytes\n+  #307 = Utf8               startSrc\n+  #308 = Utf8               startDst\n+  #309 = Utf8               resizedBytes\n+  #310 = Utf8               getLineLength\n+  #311 = Utf8               getLineSeparator\n+  #312 = Utf8               <clinit>\n+  #313 = Utf8               SourceFile\n+  #314 = Utf8               Base64.java\n {\n   private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 2\n \n   private static final int DEFAULT_BUFFER_SIZE = 8192;\n@@ -440,17 +439,17 @@\n   public org.apache.commons.net.util.Base64(boolean);\n     descriptor: (Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: bipush        76\n-         3: getstatic     #3                  // Field CHUNK_SEPARATOR:[B\n+         3: getstatic     #7                  // Field CHUNK_SEPARATOR:[B\n          6: iload_1\n-         7: invokespecial #4                  // Method \"<init>\":(I[BZ)V\n+         7: invokespecial #11                 // Method \"<init>\":(I[BZ)V\n         10: return\n       LineNumberTable:\n         line 237: 0\n         line 238: 10\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/apache/commons/net/util/Base64;\n@@ -459,16 +458,16 @@\n   public org.apache.commons.net.util.Base64(int);\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: getstatic     #3                  // Field CHUNK_SEPARATOR:[B\n-         5: invokespecial #5                  // Method \"<init>\":(I[B)V\n+         2: getstatic     #7                  // Field CHUNK_SEPARATOR:[B\n+         5: invokespecial #14                 // Method \"<init>\":(I[B)V\n          8: return\n       LineNumberTable:\n         line 259: 0\n         line 260: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/net/util/Base64;\n@@ -479,15 +478,15 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: iload_1\n          2: aload_2\n          3: iconst_0\n-         4: invokespecial #4                  // Method \"<init>\":(I[BZ)V\n+         4: invokespecial #11                 // Method \"<init>\":(I[BZ)V\n          7: return\n       LineNumberTable:\n         line 285: 0\n         line 286: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/net/util/Base64;\n@@ -496,90 +495,90 @@\n \n   public org.apache.commons.net.util.Base64(int, byte[], boolean);\n     descriptor: (I[BZ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=5, args_size=4\n          0: aload_0\n-         1: invokespecial #6                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #17                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_2\n          5: ifnonnull     14\n          8: iconst_0\n          9: istore_1\n-        10: getstatic     #7                  // Field EMPTY_BYTE_ARRAY:[B\n+        10: getstatic     #22                 // Field EMPTY_BYTE_ARRAY:[B\n         13: astore_2\n         14: aload_0\n         15: iload_1\n         16: ifle          27\n         19: iload_1\n         20: iconst_4\n         21: idiv\n         22: iconst_4\n         23: imul\n         24: goto          28\n         27: iconst_0\n-        28: putfield      #8                  // Field lineLength:I\n+        28: putfield      #25                 // Field lineLength:I\n         31: aload_0\n         32: aload_2\n         33: arraylength\n         34: newarray       byte\n-        36: putfield      #9                  // Field lineSeparator:[B\n+        36: putfield      #29                 // Field lineSeparator:[B\n         39: aload_2\n         40: iconst_0\n         41: aload_0\n-        42: getfield      #9                  // Field lineSeparator:[B\n+        42: getfield      #29                 // Field lineSeparator:[B\n         45: iconst_0\n         46: aload_2\n         47: arraylength\n-        48: invokestatic  #10                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        48: invokestatic  #32                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         51: iload_1\n         52: ifle          66\n         55: aload_0\n         56: iconst_4\n         57: aload_2\n         58: arraylength\n         59: iadd\n-        60: putfield      #11                 // Field encodeSize:I\n+        60: putfield      #38                 // Field encodeSize:I\n         63: goto          71\n         66: aload_0\n         67: iconst_4\n-        68: putfield      #11                 // Field encodeSize:I\n+        68: putfield      #38                 // Field encodeSize:I\n         71: aload_0\n         72: aload_0\n-        73: getfield      #11                 // Field encodeSize:I\n+        73: getfield      #38                 // Field encodeSize:I\n         76: iconst_1\n         77: isub\n-        78: putfield      #12                 // Field decodeSize:I\n+        78: putfield      #41                 // Field decodeSize:I\n         81: aload_2\n-        82: invokestatic  #13                 // Method containsBase64Byte:([B)Z\n+        82: invokestatic  #44                 // Method containsBase64Byte:([B)Z\n         85: ifeq          127\n         88: aload_2\n-        89: invokestatic  #14                 // Method newStringUtf8:([B)Ljava/lang/String;\n+        89: invokestatic  #48                 // Method newStringUtf8:([B)Ljava/lang/String;\n         92: astore        4\n-        94: new           #15                 // class java/lang/IllegalArgumentException\n+        94: new           #52                 // class java/lang/IllegalArgumentException\n         97: dup\n-        98: new           #16                 // class java/lang/StringBuilder\n+        98: new           #54                 // class java/lang/StringBuilder\n        101: dup\n-       102: invokespecial #17                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       105: ldc           #18                 // String lineSeperator must not contain base64 characters: [\n-       107: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       102: invokespecial #56                 // Method java/lang/StringBuilder.\"<init>\":()V\n+       105: ldc           #57                 // String lineSeperator must not contain base64 characters: [\n+       107: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        110: aload         4\n-       112: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       115: ldc           #20                 // String ]\n-       117: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       120: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       123: invokespecial #22                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+       112: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       115: ldc           #63                 // String ]\n+       117: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       120: invokevirtual #65                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       123: invokespecial #69                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n        126: athrow\n        127: aload_0\n        128: iload_3\n        129: ifeq          138\n-       132: getstatic     #23                 // Field URL_SAFE_ENCODE_TABLE:[B\n+       132: getstatic     #72                 // Field URL_SAFE_ENCODE_TABLE:[B\n        135: goto          141\n-       138: getstatic     #24                 // Field STANDARD_ENCODE_TABLE:[B\n-       141: putfield      #25                 // Field encodeTable:[B\n+       138: getstatic     #75                 // Field STANDARD_ENCODE_TABLE:[B\n+       141: putfield      #78                 // Field encodeTable:[B\n        144: return\n       LineNumberTable:\n         line 313: 0\n         line 314: 4\n         line 315: 8\n         line 316: 10\n         line 318: 14\n@@ -624,16 +623,16 @@\n \n   public boolean isUrlSafe();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #25                 // Field encodeTable:[B\n-         4: getstatic     #23                 // Field URL_SAFE_ENCODE_TABLE:[B\n+         1: getfield      #78                 // Field encodeTable:[B\n+         4: getstatic     #72                 // Field URL_SAFE_ENCODE_TABLE:[B\n          7: if_acmpne     14\n         10: iconst_1\n         11: goto          15\n         14: iconst_0\n         15: ireturn\n       LineNumberTable:\n         line 341: 0\n@@ -647,15 +646,15 @@\n \n   boolean hasData();\n     descriptor: ()Z\n     flags: (0x0000)\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #26                 // Field buffer:[B\n+         1: getfield      #81                 // Field buffer:[B\n          4: ifnull        11\n          7: iconst_1\n          8: goto          12\n         11: iconst_0\n         12: ireturn\n       LineNumberTable:\n         line 350: 0\n@@ -669,20 +668,20 @@\n \n   int avail();\n     descriptor: ()I\n     flags: (0x0000)\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #26                 // Field buffer:[B\n+         1: getfield      #81                 // Field buffer:[B\n          4: ifnull        19\n          7: aload_0\n-         8: getfield      #27                 // Field pos:I\n+         8: getfield      #84                 // Field pos:I\n         11: aload_0\n-        12: getfield      #28                 // Field readPos:I\n+        12: getfield      #87                 // Field readPos:I\n         15: isub\n         16: goto          20\n         19: iconst_0\n         20: ireturn\n       LineNumberTable:\n         line 359: 0\n       LocalVariableTable:\n@@ -695,46 +694,46 @@\n \n   private void resizeBuffer();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #26                 // Field buffer:[B\n+         1: getfield      #81                 // Field buffer:[B\n          4: ifnonnull     29\n          7: aload_0\n          8: sipush        8192\n         11: newarray       byte\n-        13: putfield      #26                 // Field buffer:[B\n+        13: putfield      #81                 // Field buffer:[B\n         16: aload_0\n         17: iconst_0\n-        18: putfield      #27                 // Field pos:I\n+        18: putfield      #84                 // Field pos:I\n         21: aload_0\n         22: iconst_0\n-        23: putfield      #28                 // Field readPos:I\n+        23: putfield      #87                 // Field readPos:I\n         26: goto          59\n         29: aload_0\n-        30: getfield      #26                 // Field buffer:[B\n+        30: getfield      #81                 // Field buffer:[B\n         33: arraylength\n         34: iconst_2\n         35: imul\n         36: newarray       byte\n         38: astore_1\n         39: aload_0\n-        40: getfield      #26                 // Field buffer:[B\n+        40: getfield      #81                 // Field buffer:[B\n         43: iconst_0\n         44: aload_1\n         45: iconst_0\n         46: aload_0\n-        47: getfield      #26                 // Field buffer:[B\n+        47: getfield      #81                 // Field buffer:[B\n         50: arraylength\n-        51: invokestatic  #10                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        51: invokestatic  #32                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         54: aload_0\n         55: aload_1\n-        56: putfield      #26                 // Field buffer:[B\n+        56: putfield      #81                 // Field buffer:[B\n         59: return\n       LineNumberTable:\n         line 364: 0\n         line 365: 7\n         line 366: 16\n         line 367: 21\n         line 369: 29\n@@ -751,55 +750,55 @@\n \n   int readResults(byte[], int, int);\n     descriptor: ([BII)I\n     flags: (0x0000)\n     Code:\n       stack=5, locals=5, args_size=4\n          0: aload_0\n-         1: getfield      #26                 // Field buffer:[B\n+         1: getfield      #81                 // Field buffer:[B\n          4: ifnull        78\n          7: aload_0\n-         8: invokevirtual #29                 // Method avail:()I\n+         8: invokevirtual #90                 // Method avail:()I\n         11: iload_3\n-        12: invokestatic  #30                 // Method java/lang/Math.min:(II)I\n+        12: invokestatic  #94                 // Method java/lang/Math.min:(II)I\n         15: istore        4\n         17: aload_0\n-        18: getfield      #26                 // Field buffer:[B\n+        18: getfield      #81                 // Field buffer:[B\n         21: aload_1\n         22: if_acmpeq     70\n         25: aload_0\n-        26: getfield      #26                 // Field buffer:[B\n+        26: getfield      #81                 // Field buffer:[B\n         29: aload_0\n-        30: getfield      #28                 // Field readPos:I\n+        30: getfield      #87                 // Field readPos:I\n         33: aload_1\n         34: iload_2\n         35: iload         4\n-        37: invokestatic  #10                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        37: invokestatic  #32                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         40: aload_0\n         41: dup\n-        42: getfield      #28                 // Field readPos:I\n+        42: getfield      #87                 // Field readPos:I\n         45: iload         4\n         47: iadd\n-        48: putfield      #28                 // Field readPos:I\n+        48: putfield      #87                 // Field readPos:I\n         51: aload_0\n-        52: getfield      #28                 // Field readPos:I\n+        52: getfield      #87                 // Field readPos:I\n         55: aload_0\n-        56: getfield      #27                 // Field pos:I\n+        56: getfield      #84                 // Field pos:I\n         59: if_icmplt     75\n         62: aload_0\n         63: aconst_null\n-        64: putfield      #26                 // Field buffer:[B\n+        64: putfield      #81                 // Field buffer:[B\n         67: goto          75\n         70: aload_0\n         71: aconst_null\n-        72: putfield      #26                 // Field buffer:[B\n+        72: putfield      #81                 // Field buffer:[B\n         75: iload         4\n         77: ireturn\n         78: aload_0\n-        79: getfield      #31                 // Field eof:Z\n+        79: getfield      #100                // Field eof:Z\n         82: ifeq          89\n         85: iconst_m1\n         86: goto          90\n         89: iconst_0\n         90: ireturn\n       LineNumberTable:\n         line 388: 0\n@@ -839,21 +838,21 @@\n          1: ifnull        25\n          4: aload_1\n          5: arraylength\n          6: iload_3\n          7: if_icmpne     25\n         10: aload_0\n         11: aload_1\n-        12: putfield      #26                 // Field buffer:[B\n+        12: putfield      #81                 // Field buffer:[B\n         15: aload_0\n         16: iload_2\n-        17: putfield      #27                 // Field pos:I\n+        17: putfield      #84                 // Field pos:I\n         20: aload_0\n         21: iload_2\n-        22: putfield      #28                 // Field readPos:I\n+        22: putfield      #87                 // Field readPos:I\n         25: return\n       LineNumberTable:\n         line 420: 0\n         line 421: 10\n         line 422: 15\n         line 423: 20\n         line 425: 25\n@@ -868,367 +867,367 @@\n \n   void encode(byte[], int, int);\n     descriptor: ([BII)V\n     flags: (0x0000)\n     Code:\n       stack=5, locals=6, args_size=4\n          0: aload_0\n-         1: getfield      #31                 // Field eof:Z\n+         1: getfield      #100                // Field eof:Z\n          4: ifeq          8\n          7: return\n          8: iload_3\n          9: ifge          359\n         12: aload_0\n         13: iconst_1\n-        14: putfield      #31                 // Field eof:Z\n+        14: putfield      #100                // Field eof:Z\n         17: aload_0\n-        18: getfield      #26                 // Field buffer:[B\n+        18: getfield      #81                 // Field buffer:[B\n         21: ifnull        41\n         24: aload_0\n-        25: getfield      #26                 // Field buffer:[B\n+        25: getfield      #81                 // Field buffer:[B\n         28: arraylength\n         29: aload_0\n-        30: getfield      #27                 // Field pos:I\n+        30: getfield      #84                 // Field pos:I\n         33: isub\n         34: aload_0\n-        35: getfield      #11                 // Field encodeSize:I\n+        35: getfield      #38                 // Field encodeSize:I\n         38: if_icmpge     45\n         41: aload_0\n-        42: invokespecial #32                 // Method resizeBuffer:()V\n+        42: invokespecial #104                // Method resizeBuffer:()V\n         45: aload_0\n-        46: getfield      #33                 // Field modulus:I\n+        46: getfield      #107                // Field modulus:I\n         49: lookupswitch  { // 2\n                        1: 76\n                        2: 185\n                  default: 307\n             }\n         76: aload_0\n-        77: getfield      #26                 // Field buffer:[B\n+        77: getfield      #81                 // Field buffer:[B\n         80: aload_0\n         81: dup\n-        82: getfield      #27                 // Field pos:I\n+        82: getfield      #84                 // Field pos:I\n         85: dup_x1\n         86: iconst_1\n         87: iadd\n-        88: putfield      #27                 // Field pos:I\n+        88: putfield      #84                 // Field pos:I\n         91: aload_0\n-        92: getfield      #25                 // Field encodeTable:[B\n+        92: getfield      #78                 // Field encodeTable:[B\n         95: aload_0\n-        96: getfield      #34                 // Field x:I\n+        96: getfield      #110                // Field x:I\n         99: iconst_2\n        100: ishr\n        101: bipush        63\n        103: iand\n        104: baload\n        105: bastore\n        106: aload_0\n-       107: getfield      #26                 // Field buffer:[B\n+       107: getfield      #81                 // Field buffer:[B\n        110: aload_0\n        111: dup\n-       112: getfield      #27                 // Field pos:I\n+       112: getfield      #84                 // Field pos:I\n        115: dup_x1\n        116: iconst_1\n        117: iadd\n-       118: putfield      #27                 // Field pos:I\n+       118: putfield      #84                 // Field pos:I\n        121: aload_0\n-       122: getfield      #25                 // Field encodeTable:[B\n+       122: getfield      #78                 // Field encodeTable:[B\n        125: aload_0\n-       126: getfield      #34                 // Field x:I\n+       126: getfield      #110                // Field x:I\n        129: iconst_4\n        130: ishl\n        131: bipush        63\n        133: iand\n        134: baload\n        135: bastore\n        136: aload_0\n-       137: getfield      #25                 // Field encodeTable:[B\n-       140: getstatic     #24                 // Field STANDARD_ENCODE_TABLE:[B\n+       137: getfield      #78                 // Field encodeTable:[B\n+       140: getstatic     #75                 // Field STANDARD_ENCODE_TABLE:[B\n        143: if_acmpne     307\n        146: aload_0\n-       147: getfield      #26                 // Field buffer:[B\n+       147: getfield      #81                 // Field buffer:[B\n        150: aload_0\n        151: dup\n-       152: getfield      #27                 // Field pos:I\n+       152: getfield      #84                 // Field pos:I\n        155: dup_x1\n        156: iconst_1\n        157: iadd\n-       158: putfield      #27                 // Field pos:I\n+       158: putfield      #84                 // Field pos:I\n        161: bipush        61\n        163: bastore\n        164: aload_0\n-       165: getfield      #26                 // Field buffer:[B\n+       165: getfield      #81                 // Field buffer:[B\n        168: aload_0\n        169: dup\n-       170: getfield      #27                 // Field pos:I\n+       170: getfield      #84                 // Field pos:I\n        173: dup_x1\n        174: iconst_1\n        175: iadd\n-       176: putfield      #27                 // Field pos:I\n+       176: putfield      #84                 // Field pos:I\n        179: bipush        61\n        181: bastore\n        182: goto          307\n        185: aload_0\n-       186: getfield      #26                 // Field buffer:[B\n+       186: getfield      #81                 // Field buffer:[B\n        189: aload_0\n        190: dup\n-       191: getfield      #27                 // Field pos:I\n+       191: getfield      #84                 // Field pos:I\n        194: dup_x1\n        195: iconst_1\n        196: iadd\n-       197: putfield      #27                 // Field pos:I\n+       197: putfield      #84                 // Field pos:I\n        200: aload_0\n-       201: getfield      #25                 // Field encodeTable:[B\n+       201: getfield      #78                 // Field encodeTable:[B\n        204: aload_0\n-       205: getfield      #34                 // Field x:I\n+       205: getfield      #110                // Field x:I\n        208: bipush        10\n        210: ishr\n        211: bipush        63\n        213: iand\n        214: baload\n        215: bastore\n        216: aload_0\n-       217: getfield      #26                 // Field buffer:[B\n+       217: getfield      #81                 // Field buffer:[B\n        220: aload_0\n        221: dup\n-       222: getfield      #27                 // Field pos:I\n+       222: getfield      #84                 // Field pos:I\n        225: dup_x1\n        226: iconst_1\n        227: iadd\n-       228: putfield      #27                 // Field pos:I\n+       228: putfield      #84                 // Field pos:I\n        231: aload_0\n-       232: getfield      #25                 // Field encodeTable:[B\n+       232: getfield      #78                 // Field encodeTable:[B\n        235: aload_0\n-       236: getfield      #34                 // Field x:I\n+       236: getfield      #110                // Field x:I\n        239: iconst_4\n        240: ishr\n        241: bipush        63\n        243: iand\n        244: baload\n        245: bastore\n        246: aload_0\n-       247: getfield      #26                 // Field buffer:[B\n+       247: getfield      #81                 // Field buffer:[B\n        250: aload_0\n        251: dup\n-       252: getfield      #27                 // Field pos:I\n+       252: getfield      #84                 // Field pos:I\n        255: dup_x1\n        256: iconst_1\n        257: iadd\n-       258: putfield      #27                 // Field pos:I\n+       258: putfield      #84                 // Field pos:I\n        261: aload_0\n-       262: getfield      #25                 // Field encodeTable:[B\n+       262: getfield      #78                 // Field encodeTable:[B\n        265: aload_0\n-       266: getfield      #34                 // Field x:I\n+       266: getfield      #110                // Field x:I\n        269: iconst_2\n        270: ishl\n        271: bipush        63\n        273: iand\n        274: baload\n        275: bastore\n        276: aload_0\n-       277: getfield      #25                 // Field encodeTable:[B\n-       280: getstatic     #24                 // Field STANDARD_ENCODE_TABLE:[B\n+       277: getfield      #78                 // Field encodeTable:[B\n+       280: getstatic     #75                 // Field STANDARD_ENCODE_TABLE:[B\n        283: if_acmpne     307\n        286: aload_0\n-       287: getfield      #26                 // Field buffer:[B\n+       287: getfield      #81                 // Field buffer:[B\n        290: aload_0\n        291: dup\n-       292: getfield      #27                 // Field pos:I\n+       292: getfield      #84                 // Field pos:I\n        295: dup_x1\n        296: iconst_1\n        297: iadd\n-       298: putfield      #27                 // Field pos:I\n+       298: putfield      #84                 // Field pos:I\n        301: bipush        61\n        303: bastore\n        304: goto          307\n        307: aload_0\n-       308: getfield      #8                  // Field lineLength:I\n+       308: getfield      #25                 // Field lineLength:I\n        311: ifle          649\n        314: aload_0\n-       315: getfield      #27                 // Field pos:I\n+       315: getfield      #84                 // Field pos:I\n        318: ifle          649\n        321: aload_0\n-       322: getfield      #9                  // Field lineSeparator:[B\n+       322: getfield      #29                 // Field lineSeparator:[B\n        325: iconst_0\n        326: aload_0\n-       327: getfield      #26                 // Field buffer:[B\n+       327: getfield      #81                 // Field buffer:[B\n        330: aload_0\n-       331: getfield      #27                 // Field pos:I\n+       331: getfield      #84                 // Field pos:I\n        334: aload_0\n-       335: getfield      #9                  // Field lineSeparator:[B\n+       335: getfield      #29                 // Field lineSeparator:[B\n        338: arraylength\n-       339: invokestatic  #10                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       339: invokestatic  #32                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        342: aload_0\n        343: dup\n-       344: getfield      #27                 // Field pos:I\n+       344: getfield      #84                 // Field pos:I\n        347: aload_0\n-       348: getfield      #9                  // Field lineSeparator:[B\n+       348: getfield      #29                 // Field lineSeparator:[B\n        351: arraylength\n        352: iadd\n-       353: putfield      #27                 // Field pos:I\n+       353: putfield      #84                 // Field pos:I\n        356: goto          649\n        359: iconst_0\n        360: istore        4\n        362: iload         4\n        364: iload_3\n        365: if_icmpge     649\n        368: aload_0\n-       369: getfield      #26                 // Field buffer:[B\n+       369: getfield      #81                 // Field buffer:[B\n        372: ifnull        392\n        375: aload_0\n-       376: getfield      #26                 // Field buffer:[B\n+       376: getfield      #81                 // Field buffer:[B\n        379: arraylength\n        380: aload_0\n-       381: getfield      #27                 // Field pos:I\n+       381: getfield      #84                 // Field pos:I\n        384: isub\n        385: aload_0\n-       386: getfield      #11                 // Field encodeSize:I\n+       386: getfield      #38                 // Field encodeSize:I\n        389: if_icmpge     396\n        392: aload_0\n-       393: invokespecial #32                 // Method resizeBuffer:()V\n+       393: invokespecial #104                // Method resizeBuffer:()V\n        396: aload_0\n        397: aload_0\n        398: dup\n-       399: getfield      #33                 // Field modulus:I\n+       399: getfield      #107                // Field modulus:I\n        402: iconst_1\n        403: iadd\n        404: dup_x1\n-       405: putfield      #33                 // Field modulus:I\n+       405: putfield      #107                // Field modulus:I\n        408: iconst_3\n        409: irem\n-       410: putfield      #33                 // Field modulus:I\n+       410: putfield      #107                // Field modulus:I\n        413: aload_1\n        414: iload_2\n        415: iinc          2, 1\n        418: baload\n        419: istore        5\n        421: iload         5\n        423: ifge          432\n        426: iinc_w        5, 256\n        432: aload_0\n        433: aload_0\n-       434: getfield      #34                 // Field x:I\n+       434: getfield      #110                // Field x:I\n        437: bipush        8\n        439: ishl\n        440: iload         5\n        442: iadd\n-       443: putfield      #34                 // Field x:I\n+       443: putfield      #110                // Field x:I\n        446: iconst_0\n        447: aload_0\n-       448: getfield      #33                 // Field modulus:I\n+       448: getfield      #107                // Field modulus:I\n        451: if_icmpne     643\n        454: aload_0\n-       455: getfield      #26                 // Field buffer:[B\n+       455: getfield      #81                 // Field buffer:[B\n        458: aload_0\n        459: dup\n-       460: getfield      #27                 // Field pos:I\n+       460: getfield      #84                 // Field pos:I\n        463: dup_x1\n        464: iconst_1\n        465: iadd\n-       466: putfield      #27                 // Field pos:I\n+       466: putfield      #84                 // Field pos:I\n        469: aload_0\n-       470: getfield      #25                 // Field encodeTable:[B\n+       470: getfield      #78                 // Field encodeTable:[B\n        473: aload_0\n-       474: getfield      #34                 // Field x:I\n+       474: getfield      #110                // Field x:I\n        477: bipush        18\n        479: ishr\n        480: bipush        63\n        482: iand\n        483: baload\n        484: bastore\n        485: aload_0\n-       486: getfield      #26                 // Field buffer:[B\n+       486: getfield      #81                 // Field buffer:[B\n        489: aload_0\n        490: dup\n-       491: getfield      #27                 // Field pos:I\n+       491: getfield      #84                 // Field pos:I\n        494: dup_x1\n        495: iconst_1\n        496: iadd\n-       497: putfield      #27                 // Field pos:I\n+       497: putfield      #84                 // Field pos:I\n        500: aload_0\n-       501: getfield      #25                 // Field encodeTable:[B\n+       501: getfield      #78                 // Field encodeTable:[B\n        504: aload_0\n-       505: getfield      #34                 // Field x:I\n+       505: getfield      #110                // Field x:I\n        508: bipush        12\n        510: ishr\n        511: bipush        63\n        513: iand\n        514: baload\n        515: bastore\n        516: aload_0\n-       517: getfield      #26                 // Field buffer:[B\n+       517: getfield      #81                 // Field buffer:[B\n        520: aload_0\n        521: dup\n-       522: getfield      #27                 // Field pos:I\n+       522: getfield      #84                 // Field pos:I\n        525: dup_x1\n        526: iconst_1\n        527: iadd\n-       528: putfield      #27                 // Field pos:I\n+       528: putfield      #84                 // Field pos:I\n        531: aload_0\n-       532: getfield      #25                 // Field encodeTable:[B\n+       532: getfield      #78                 // Field encodeTable:[B\n        535: aload_0\n-       536: getfield      #34                 // Field x:I\n+       536: getfield      #110                // Field x:I\n        539: bipush        6\n        541: ishr\n        542: bipush        63\n        544: iand\n        545: baload\n        546: bastore\n        547: aload_0\n-       548: getfield      #26                 // Field buffer:[B\n+       548: getfield      #81                 // Field buffer:[B\n        551: aload_0\n        552: dup\n-       553: getfield      #27                 // Field pos:I\n+       553: getfield      #84                 // Field pos:I\n        556: dup_x1\n        557: iconst_1\n        558: iadd\n-       559: putfield      #27                 // Field pos:I\n+       559: putfield      #84                 // Field pos:I\n        562: aload_0\n-       563: getfield      #25                 // Field encodeTable:[B\n+       563: getfield      #78                 // Field encodeTable:[B\n        566: aload_0\n-       567: getfield      #34                 // Field x:I\n+       567: getfield      #110                // Field x:I\n        570: bipush        63\n        572: iand\n        573: baload\n        574: bastore\n        575: aload_0\n        576: dup\n-       577: getfield      #35                 // Field currentLinePos:I\n+       577: getfield      #113                // Field currentLinePos:I\n        580: iconst_4\n        581: iadd\n-       582: putfield      #35                 // Field currentLinePos:I\n+       582: putfield      #113                // Field currentLinePos:I\n        585: aload_0\n-       586: getfield      #8                  // Field lineLength:I\n+       586: getfield      #25                 // Field lineLength:I\n        589: ifle          643\n        592: aload_0\n-       593: getfield      #8                  // Field lineLength:I\n+       593: getfield      #25                 // Field lineLength:I\n        596: aload_0\n-       597: getfield      #35                 // Field currentLinePos:I\n+       597: getfield      #113                // Field currentLinePos:I\n        600: if_icmpgt     643\n        603: aload_0\n-       604: getfield      #9                  // Field lineSeparator:[B\n+       604: getfield      #29                 // Field lineSeparator:[B\n        607: iconst_0\n        608: aload_0\n-       609: getfield      #26                 // Field buffer:[B\n+       609: getfield      #81                 // Field buffer:[B\n        612: aload_0\n-       613: getfield      #27                 // Field pos:I\n+       613: getfield      #84                 // Field pos:I\n        616: aload_0\n-       617: getfield      #9                  // Field lineSeparator:[B\n+       617: getfield      #29                 // Field lineSeparator:[B\n        620: arraylength\n-       621: invokestatic  #10                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       621: invokestatic  #32                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        624: aload_0\n        625: dup\n-       626: getfield      #27                 // Field pos:I\n+       626: getfield      #84                 // Field pos:I\n        629: aload_0\n-       630: getfield      #9                  // Field lineSeparator:[B\n+       630: getfield      #29                 // Field lineSeparator:[B\n        633: arraylength\n        634: iadd\n-       635: putfield      #27                 // Field pos:I\n+       635: putfield      #84                 // Field pos:I\n        638: aload_0\n        639: iconst_0\n-       640: putfield      #35                 // Field currentLinePos:I\n+       640: putfield      #113                // Field currentLinePos:I\n        643: iinc          4, 1\n        646: goto          362\n        649: return\n       LineNumberTable:\n         line 446: 0\n         line 447: 7\n         line 451: 8\n@@ -1302,209 +1301,209 @@\n \n   void decode(byte[], int, int);\n     descriptor: ([BII)V\n     flags: (0x0000)\n     Code:\n       stack=5, locals=7, args_size=4\n          0: aload_0\n-         1: getfield      #31                 // Field eof:Z\n+         1: getfield      #100                // Field eof:Z\n          4: ifeq          8\n          7: return\n          8: iload_3\n          9: ifge          17\n         12: aload_0\n         13: iconst_1\n-        14: putfield      #31                 // Field eof:Z\n+        14: putfield      #100                // Field eof:Z\n         17: iconst_0\n         18: istore        4\n         20: iload         4\n         22: iload_3\n         23: if_icmpge     229\n         26: aload_0\n-        27: getfield      #26                 // Field buffer:[B\n+        27: getfield      #81                 // Field buffer:[B\n         30: ifnull        50\n         33: aload_0\n-        34: getfield      #26                 // Field buffer:[B\n+        34: getfield      #81                 // Field buffer:[B\n         37: arraylength\n         38: aload_0\n-        39: getfield      #27                 // Field pos:I\n+        39: getfield      #84                 // Field pos:I\n         42: isub\n         43: aload_0\n-        44: getfield      #12                 // Field decodeSize:I\n+        44: getfield      #41                 // Field decodeSize:I\n         47: if_icmpge     54\n         50: aload_0\n-        51: invokespecial #32                 // Method resizeBuffer:()V\n+        51: invokespecial #104                // Method resizeBuffer:()V\n         54: aload_1\n         55: iload_2\n         56: iinc          2, 1\n         59: baload\n         60: istore        5\n         62: iload         5\n         64: bipush        61\n         66: if_icmpne     77\n         69: aload_0\n         70: iconst_1\n-        71: putfield      #31                 // Field eof:Z\n+        71: putfield      #100                // Field eof:Z\n         74: goto          229\n         77: iload         5\n         79: iflt          223\n         82: iload         5\n-        84: getstatic     #36                 // Field DECODE_TABLE:[B\n+        84: getstatic     #116                // Field DECODE_TABLE:[B\n         87: arraylength\n         88: if_icmpge     223\n-        91: getstatic     #36                 // Field DECODE_TABLE:[B\n+        91: getstatic     #116                // Field DECODE_TABLE:[B\n         94: iload         5\n         96: baload\n         97: istore        6\n         99: iload         6\n        101: iflt          223\n        104: aload_0\n        105: aload_0\n        106: dup\n-       107: getfield      #33                 // Field modulus:I\n+       107: getfield      #107                // Field modulus:I\n        110: iconst_1\n        111: iadd\n        112: dup_x1\n-       113: putfield      #33                 // Field modulus:I\n+       113: putfield      #107                // Field modulus:I\n        116: iconst_4\n        117: irem\n-       118: putfield      #33                 // Field modulus:I\n+       118: putfield      #107                // Field modulus:I\n        121: aload_0\n        122: aload_0\n-       123: getfield      #34                 // Field x:I\n+       123: getfield      #110                // Field x:I\n        126: bipush        6\n        128: ishl\n        129: iload         6\n        131: iadd\n-       132: putfield      #34                 // Field x:I\n+       132: putfield      #110                // Field x:I\n        135: aload_0\n-       136: getfield      #33                 // Field modulus:I\n+       136: getfield      #107                // Field modulus:I\n        139: ifne          223\n        142: aload_0\n-       143: getfield      #26                 // Field buffer:[B\n+       143: getfield      #81                 // Field buffer:[B\n        146: aload_0\n        147: dup\n-       148: getfield      #27                 // Field pos:I\n+       148: getfield      #84                 // Field pos:I\n        151: dup_x1\n        152: iconst_1\n        153: iadd\n-       154: putfield      #27                 // Field pos:I\n+       154: putfield      #84                 // Field pos:I\n        157: aload_0\n-       158: getfield      #34                 // Field x:I\n+       158: getfield      #110                // Field x:I\n        161: bipush        16\n        163: ishr\n        164: sipush        255\n        167: iand\n        168: i2b\n        169: bastore\n        170: aload_0\n-       171: getfield      #26                 // Field buffer:[B\n+       171: getfield      #81                 // Field buffer:[B\n        174: aload_0\n        175: dup\n-       176: getfield      #27                 // Field pos:I\n+       176: getfield      #84                 // Field pos:I\n        179: dup_x1\n        180: iconst_1\n        181: iadd\n-       182: putfield      #27                 // Field pos:I\n+       182: putfield      #84                 // Field pos:I\n        185: aload_0\n-       186: getfield      #34                 // Field x:I\n+       186: getfield      #110                // Field x:I\n        189: bipush        8\n        191: ishr\n        192: sipush        255\n        195: iand\n        196: i2b\n        197: bastore\n        198: aload_0\n-       199: getfield      #26                 // Field buffer:[B\n+       199: getfield      #81                 // Field buffer:[B\n        202: aload_0\n        203: dup\n-       204: getfield      #27                 // Field pos:I\n+       204: getfield      #84                 // Field pos:I\n        207: dup_x1\n        208: iconst_1\n        209: iadd\n-       210: putfield      #27                 // Field pos:I\n+       210: putfield      #84                 // Field pos:I\n        213: aload_0\n-       214: getfield      #34                 // Field x:I\n+       214: getfield      #110                // Field x:I\n        217: sipush        255\n        220: iand\n        221: i2b\n        222: bastore\n        223: iinc          4, 1\n        226: goto          20\n        229: aload_0\n-       230: getfield      #31                 // Field eof:Z\n+       230: getfield      #100                // Field eof:Z\n        233: ifeq          385\n        236: aload_0\n-       237: getfield      #33                 // Field modulus:I\n+       237: getfield      #107                // Field modulus:I\n        240: ifeq          385\n        243: aload_0\n        244: aload_0\n-       245: getfield      #34                 // Field x:I\n+       245: getfield      #110                // Field x:I\n        248: bipush        6\n        250: ishl\n-       251: putfield      #34                 // Field x:I\n+       251: putfield      #110                // Field x:I\n        254: aload_0\n-       255: getfield      #33                 // Field modulus:I\n+       255: getfield      #107                // Field modulus:I\n        258: lookupswitch  { // 2\n                        2: 284\n                        3: 326\n                  default: 385\n             }\n        284: aload_0\n        285: aload_0\n-       286: getfield      #34                 // Field x:I\n+       286: getfield      #110                // Field x:I\n        289: bipush        6\n        291: ishl\n-       292: putfield      #34                 // Field x:I\n+       292: putfield      #110                // Field x:I\n        295: aload_0\n-       296: getfield      #26                 // Field buffer:[B\n+       296: getfield      #81                 // Field buffer:[B\n        299: aload_0\n        300: dup\n-       301: getfield      #27                 // Field pos:I\n+       301: getfield      #84                 // Field pos:I\n        304: dup_x1\n        305: iconst_1\n        306: iadd\n-       307: putfield      #27                 // Field pos:I\n+       307: putfield      #84                 // Field pos:I\n        310: aload_0\n-       311: getfield      #34                 // Field x:I\n+       311: getfield      #110                // Field x:I\n        314: bipush        16\n        316: ishr\n        317: sipush        255\n        320: iand\n        321: i2b\n        322: bastore\n        323: goto          385\n        326: aload_0\n-       327: getfield      #26                 // Field buffer:[B\n+       327: getfield      #81                 // Field buffer:[B\n        330: aload_0\n        331: dup\n-       332: getfield      #27                 // Field pos:I\n+       332: getfield      #84                 // Field pos:I\n        335: dup_x1\n        336: iconst_1\n        337: iadd\n-       338: putfield      #27                 // Field pos:I\n+       338: putfield      #84                 // Field pos:I\n        341: aload_0\n-       342: getfield      #34                 // Field x:I\n+       342: getfield      #110                // Field x:I\n        345: bipush        16\n        347: ishr\n        348: sipush        255\n        351: iand\n        352: i2b\n        353: bastore\n        354: aload_0\n-       355: getfield      #26                 // Field buffer:[B\n+       355: getfield      #81                 // Field buffer:[B\n        358: aload_0\n        359: dup\n-       360: getfield      #27                 // Field pos:I\n+       360: getfield      #84                 // Field pos:I\n        363: dup_x1\n        364: iconst_1\n        365: iadd\n-       366: putfield      #27                 // Field pos:I\n+       366: putfield      #84                 // Field pos:I\n        369: aload_0\n-       370: getfield      #34                 // Field x:I\n+       370: getfield      #110                // Field x:I\n        373: bipush        8\n        375: ishr\n        376: sipush        255\n        379: iand\n        380: i2b\n        381: bastore\n        382: goto          385\n@@ -1576,18 +1575,18 @@\n       stack=2, locals=1, args_size=1\n          0: iload_0\n          1: bipush        61\n          3: if_icmpeq     27\n          6: iload_0\n          7: iflt          31\n         10: iload_0\n-        11: getstatic     #36                 // Field DECODE_TABLE:[B\n+        11: getstatic     #116                // Field DECODE_TABLE:[B\n         14: arraylength\n         15: if_icmpge     31\n-        18: getstatic     #36                 // Field DECODE_TABLE:[B\n+        18: getstatic     #116                // Field DECODE_TABLE:[B\n         21: iload_0\n         22: baload\n         23: iconst_m1\n         24: if_icmpeq     31\n         27: iconst_1\n         28: goto          32\n         31: iconst_0\n@@ -1619,18 +1618,18 @@\n          8: iload_2\n          9: if_icmpge     41\n         12: aload_1\n         13: iload_3\n         14: baload\n         15: istore        4\n         17: iload         4\n-        19: invokestatic  #37                 // Method isBase64:(B)Z\n+        19: invokestatic  #119                // Method isBase64:(B)Z\n         22: ifne          35\n         25: iload         4\n-        27: invokestatic  #38                 // Method isWhiteSpace:(B)Z\n+        27: invokestatic  #123                // Method isWhiteSpace:(B)Z\n         30: ifne          35\n         33: iconst_0\n         34: ireturn\n         35: iinc          3, 1\n         38: goto          7\n         41: iconst_1\n         42: ireturn\n@@ -1668,15 +1667,15 @@\n          8: iload_2\n          9: if_icmpge     33\n         12: aload_1\n         13: iload_3\n         14: baload\n         15: istore        4\n         17: iload         4\n-        19: invokestatic  #37                 // Method isBase64:(B)Z\n+        19: invokestatic  #119                // Method isBase64:(B)Z\n         22: ifeq          27\n         25: iconst_1\n         26: ireturn\n         27: iinc          3, 1\n         30: goto          7\n         33: iconst_0\n         34: ireturn\n@@ -1701,63 +1700,63 @@\n   public static byte[] encodeBase64(byte[]);\n     descriptor: ([B)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_0\n-         2: invokestatic  #39                 // Method encodeBase64:([BZ)[B\n+         2: invokestatic  #126                // Method encodeBase64:([BZ)[B\n          5: areturn\n       LineNumberTable:\n         line 639: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0 binaryData   [B\n \n   public static java.lang.String encodeBase64String(byte[]);\n     descriptor: ([B)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_1\n-         2: invokestatic  #39                 // Method encodeBase64:([BZ)[B\n-         5: invokestatic  #14                 // Method newStringUtf8:([B)Ljava/lang/String;\n+         2: invokestatic  #126                // Method encodeBase64:([BZ)[B\n+         5: invokestatic  #48                 // Method newStringUtf8:([B)Ljava/lang/String;\n          8: areturn\n       LineNumberTable:\n         line 653: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0 binaryData   [B\n \n   public static java.lang.String encodeBase64StringUnChunked(byte[]);\n     descriptor: ([B)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_0\n-         2: invokestatic  #39                 // Method encodeBase64:([BZ)[B\n-         5: invokestatic  #14                 // Method newStringUtf8:([B)Ljava/lang/String;\n+         2: invokestatic  #126                // Method encodeBase64:([BZ)[B\n+         5: invokestatic  #48                 // Method newStringUtf8:([B)Ljava/lang/String;\n          8: areturn\n       LineNumberTable:\n         line 667: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0 binaryData   [B\n \n   public static java.lang.String encodeBase64String(byte[], boolean);\n     descriptor: ([BZ)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: invokestatic  #39                 // Method encodeBase64:([BZ)[B\n-         5: invokestatic  #14                 // Method newStringUtf8:([B)Ljava/lang/String;\n+         2: invokestatic  #126                // Method encodeBase64:([BZ)[B\n+         5: invokestatic  #48                 // Method newStringUtf8:([B)Ljava/lang/String;\n          8: areturn\n       LineNumberTable:\n         line 680: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0 binaryData   [B\n             0       9     1 useChunking   Z\n@@ -1766,15 +1765,15 @@\n     descriptor: ([B)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: iconst_0\n          2: iconst_1\n-         3: invokestatic  #40                 // Method encodeBase64:([BZZ)[B\n+         3: invokestatic  #130                // Method encodeBase64:([BZZ)[B\n          6: areturn\n       LineNumberTable:\n         line 693: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0 binaryData   [B\n \n@@ -1782,31 +1781,31 @@\n     descriptor: ([B)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: iconst_0\n          2: iconst_1\n-         3: invokestatic  #40                 // Method encodeBase64:([BZZ)[B\n-         6: invokestatic  #14                 // Method newStringUtf8:([B)Ljava/lang/String;\n+         3: invokestatic  #130                // Method encodeBase64:([BZZ)[B\n+         6: invokestatic  #48                 // Method newStringUtf8:([B)Ljava/lang/String;\n          9: areturn\n       LineNumberTable:\n         line 706: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0 binaryData   [B\n \n   public static byte[] encodeBase64Chunked(byte[]);\n     descriptor: ([B)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_1\n-         2: invokestatic  #39                 // Method encodeBase64:([BZ)[B\n+         2: invokestatic  #126                // Method encodeBase64:([BZ)[B\n          5: areturn\n       LineNumberTable:\n         line 717: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0 binaryData   [B\n \n@@ -1814,38 +1813,38 @@\n     descriptor: (Ljava/lang/String;)[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_0\n          2: aload_1\n-         3: invokespecial #41                 // Method getBytesUtf8:(Ljava/lang/String;)[B\n-         6: invokevirtual #42                 // Method decode:([B)[B\n+         3: invokespecial #133                // Method getBytesUtf8:(Ljava/lang/String;)[B\n+         6: invokevirtual #137                // Method decode:([B)[B\n          9: areturn\n       LineNumberTable:\n         line 729: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/net/util/Base64;\n             0      10     1 pArray   Ljava/lang/String;\n \n   private byte[] getBytesUtf8(java.lang.String);\n     descriptor: (Ljava/lang/String;)[B\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_1\n-         1: ldc           #43                 // String UTF8\n-         3: invokevirtual #44                 // Method java/lang/String.getBytes:(Ljava/lang/String;)[B\n+         1: ldc           #141                // String UTF8\n+         3: invokevirtual #143                // Method java/lang/String.getBytes:(Ljava/lang/String;)[B\n          6: areturn\n          7: astore_2\n-         8: new           #46                 // class java/lang/RuntimeException\n+         8: new           #150                // class java/lang/RuntimeException\n         11: dup\n         12: aload_2\n-        13: invokespecial #47                 // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n+        13: invokespecial #152                // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n         16: athrow\n       Exception table:\n          from    to  target type\n              0     6     7   Class java/io/UnsupportedEncodingException\n       LineNumberTable:\n         line 734: 0\n         line 735: 7\n@@ -1861,15 +1860,15 @@\n \n   public byte[] decode(byte[]);\n     descriptor: ([B)[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=6, args_size=2\n          0: aload_0\n-         1: invokespecial #48                 // Method reset:()V\n+         1: invokespecial #155                // Method reset:()V\n          4: aload_1\n          5: ifnull        13\n          8: aload_1\n          9: arraylength\n         10: ifne          15\n         13: aload_1\n         14: areturn\n@@ -1886,36 +1885,36 @@\n         25: newarray       byte\n         27: astore        4\n         29: aload_0\n         30: aload         4\n         32: iconst_0\n         33: aload         4\n         35: arraylength\n-        36: invokevirtual #49                 // Method setInitialBuffer:([BII)V\n+        36: invokevirtual #158                // Method setInitialBuffer:([BII)V\n         39: aload_0\n         40: aload_1\n         41: iconst_0\n         42: aload_1\n         43: arraylength\n-        44: invokevirtual #50                 // Method decode:([BII)V\n+        44: invokevirtual #162                // Method decode:([BII)V\n         47: aload_0\n         48: aload_1\n         49: iconst_0\n         50: iconst_m1\n-        51: invokevirtual #50                 // Method decode:([BII)V\n+        51: invokevirtual #162                // Method decode:([BII)V\n         54: aload_0\n-        55: getfield      #27                 // Field pos:I\n+        55: getfield      #84                 // Field pos:I\n         58: newarray       byte\n         60: astore        5\n         62: aload_0\n         63: aload         5\n         65: iconst_0\n         66: aload         5\n         68: arraylength\n-        69: invokevirtual #51                 // Method readResults:([BII)I\n+        69: invokevirtual #164                // Method readResults:([BII)I\n         72: pop\n         73: aload         5\n         75: areturn\n       LineNumberTable:\n         line 748: 0\n         line 749: 4\n         line 750: 13\n@@ -1942,15 +1941,15 @@\n     descriptor: ([BZ)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: iconst_0\n-         3: invokestatic  #40                 // Method encodeBase64:([BZZ)[B\n+         3: invokestatic  #130                // Method encodeBase64:([BZZ)[B\n          6: areturn\n       LineNumberTable:\n         line 781: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0 binaryData   [B\n             0       7     1 isChunked   Z\n@@ -1959,16 +1958,16 @@\n     descriptor: ([BZZ)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: iload_1\n          2: iload_2\n-         3: ldc           #53                 // int 2147483647\n-         5: invokestatic  #54                 // Method encodeBase64:([BZZI)[B\n+         3: ldc           #170                // int 2147483647\n+         5: invokestatic  #171                // Method encodeBase64:([BZZI)[B\n          8: areturn\n       LineNumberTable:\n         line 799: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0 binaryData   [B\n             0       9     1 isChunked   Z\n@@ -1990,57 +1989,57 @@\n         12: iload_1\n         13: ifeq          21\n         16: bipush        76\n         18: goto          22\n         21: iconst_0\n         22: iload_1\n         23: ifeq          32\n-        26: getstatic     #3                  // Field CHUNK_SEPARATOR:[B\n+        26: getstatic     #7                  // Field CHUNK_SEPARATOR:[B\n         29: goto          35\n-        32: getstatic     #7                  // Field EMPTY_BYTE_ARRAY:[B\n-        35: invokestatic  #55                 // Method getEncodeLength:([BI[B)J\n+        32: getstatic     #22                 // Field EMPTY_BYTE_ARRAY:[B\n+        35: invokestatic  #174                // Method getEncodeLength:([BI[B)J\n         38: lstore        4\n         40: lload         4\n         42: iload_3\n         43: i2l\n         44: lcmp\n         45: ifle          85\n-        48: new           #15                 // class java/lang/IllegalArgumentException\n+        48: new           #52                 // class java/lang/IllegalArgumentException\n         51: dup\n-        52: new           #16                 // class java/lang/StringBuilder\n+        52: new           #54                 // class java/lang/StringBuilder\n         55: dup\n-        56: invokespecial #17                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        59: ldc           #56                 // String Input array too big, the output array would be bigger (\n-        61: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        56: invokespecial #56                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        59: ldc           #178                // String Input array too big, the output array would be bigger (\n+        61: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         64: lload         4\n-        66: invokevirtual #57                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        69: ldc           #58                 // String ) than the specified maxium size of\n-        71: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        66: invokevirtual #180                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        69: ldc           #183                // String ) than the specified maxium size of\n+        71: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         74: iload_3\n-        75: invokevirtual #59                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        78: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        81: invokespecial #22                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        75: invokevirtual #185                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        78: invokevirtual #65                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        81: invokespecial #69                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         84: athrow\n         85: iload_1\n         86: ifeq          100\n         89: new           #2                  // class org/apache/commons/net/util/Base64\n         92: dup\n         93: iload_2\n         94: invokespecial #1                  // Method \"<init>\":(Z)V\n         97: goto          112\n        100: new           #2                  // class org/apache/commons/net/util/Base64\n        103: dup\n        104: iconst_0\n-       105: getstatic     #3                  // Field CHUNK_SEPARATOR:[B\n+       105: getstatic     #7                  // Field CHUNK_SEPARATOR:[B\n        108: iload_2\n-       109: invokespecial #4                  // Method \"<init>\":(I[BZ)V\n+       109: invokespecial #11                 // Method \"<init>\":(I[BZ)V\n        112: astore        6\n        114: aload         6\n        116: aload_0\n-       117: invokevirtual #60                 // Method encode:([B)[B\n+       117: invokevirtual #188                // Method encode:([B)[B\n        120: areturn\n       LineNumberTable:\n         line 820: 0\n         line 821: 9\n         line 824: 11\n         line 825: 22\n         line 824: 35\n@@ -2083,34 +2082,34 @@\n   public static byte[] decodeBase64(java.lang.String);\n     descriptor: (Ljava/lang/String;)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: new           #2                  // class org/apache/commons/net/util/Base64\n          3: dup\n-         4: invokespecial #61                 // Method \"<init>\":()V\n+         4: invokespecial #191                // Method \"<init>\":()V\n          7: aload_0\n-         8: invokevirtual #62                 // Method decode:(Ljava/lang/String;)[B\n+         8: invokevirtual #192                // Method decode:(Ljava/lang/String;)[B\n         11: areturn\n       LineNumberTable:\n         line 844: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      12     0 base64String   Ljava/lang/String;\n \n   public static byte[] decodeBase64(byte[]);\n     descriptor: ([B)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: new           #2                  // class org/apache/commons/net/util/Base64\n          3: dup\n-         4: invokespecial #61                 // Method \"<init>\":()V\n+         4: invokespecial #191                // Method \"<init>\":()V\n          7: aload_0\n-         8: invokevirtual #42                 // Method decode:([B)[B\n+         8: invokevirtual #137                // Method decode:([B)[B\n         11: areturn\n       LineNumberTable:\n         line 855: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      12     0 base64Data   [B\n \n@@ -2145,16 +2144,16 @@\n   public java.lang.String encodeToString(byte[]);\n     descriptor: ([B)Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #60                 // Method encode:([B)[B\n-         5: invokestatic  #14                 // Method newStringUtf8:([B)Ljava/lang/String;\n+         2: invokevirtual #188                // Method encode:([B)[B\n+         5: invokestatic  #48                 // Method newStringUtf8:([B)Ljava/lang/String;\n          8: areturn\n       LineNumberTable:\n         line 888: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/net/util/Base64;\n             0       9     1 pArray   [B\n@@ -2162,26 +2161,26 @@\n   private static java.lang.String newStringUtf8(byte[]);\n     descriptor: ([B)Ljava/lang/String;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=3, args_size=1\n          0: aconst_null\n          1: astore_1\n-         2: new           #63                 // class java/lang/String\n+         2: new           #144                // class java/lang/String\n          5: dup\n          6: aload_0\n-         7: ldc           #43                 // String UTF8\n-         9: invokespecial #64                 // Method java/lang/String.\"<init>\":([BLjava/lang/String;)V\n+         7: ldc           #141                // String UTF8\n+         9: invokespecial #194                // Method java/lang/String.\"<init>\":([BLjava/lang/String;)V\n         12: astore_1\n         13: goto          26\n         16: astore_2\n-        17: new           #46                 // class java/lang/RuntimeException\n+        17: new           #150                // class java/lang/RuntimeException\n         20: dup\n         21: aload_2\n-        22: invokespecial #47                 // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n+        22: invokespecial #152                // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n         25: athrow\n         26: aload_1\n         27: areturn\n       Exception table:\n          from    to  target type\n              2    13    16   Class java/io/UnsupportedEncodingException\n       LineNumberTable:\n@@ -2205,80 +2204,80 @@\n \n   public byte[] encode(byte[]);\n     descriptor: ([B)[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=6, args_size=2\n          0: aload_0\n-         1: invokespecial #48                 // Method reset:()V\n+         1: invokespecial #155                // Method reset:()V\n          4: aload_1\n          5: ifnull        13\n          8: aload_1\n          9: arraylength\n         10: ifne          15\n         13: aload_1\n         14: areturn\n         15: aload_1\n         16: aload_0\n-        17: getfield      #8                  // Field lineLength:I\n+        17: getfield      #25                 // Field lineLength:I\n         20: aload_0\n-        21: getfield      #9                  // Field lineSeparator:[B\n-        24: invokestatic  #55                 // Method getEncodeLength:([BI[B)J\n+        21: getfield      #29                 // Field lineSeparator:[B\n+        24: invokestatic  #174                // Method getEncodeLength:([BI[B)J\n         27: lstore_2\n         28: lload_2\n         29: l2i\n         30: newarray       byte\n         32: astore        4\n         34: aload_0\n         35: aload         4\n         37: iconst_0\n         38: aload         4\n         40: arraylength\n-        41: invokevirtual #49                 // Method setInitialBuffer:([BII)V\n+        41: invokevirtual #158                // Method setInitialBuffer:([BII)V\n         44: aload_0\n         45: aload_1\n         46: iconst_0\n         47: aload_1\n         48: arraylength\n-        49: invokevirtual #65                 // Method encode:([BII)V\n+        49: invokevirtual #197                // Method encode:([BII)V\n         52: aload_0\n         53: aload_1\n         54: iconst_0\n         55: iconst_m1\n-        56: invokevirtual #65                 // Method encode:([BII)V\n+        56: invokevirtual #197                // Method encode:([BII)V\n         59: aload_0\n-        60: getfield      #26                 // Field buffer:[B\n+        60: getfield      #81                 // Field buffer:[B\n         63: aload         4\n         65: if_acmpeq     79\n         68: aload_0\n         69: aload         4\n         71: iconst_0\n         72: aload         4\n         74: arraylength\n-        75: invokevirtual #51                 // Method readResults:([BII)I\n+        75: invokevirtual #164                // Method readResults:([BII)I\n         78: pop\n         79: aload_0\n-        80: invokevirtual #66                 // Method isUrlSafe:()Z\n+        80: invokevirtual #199                // Method isUrlSafe:()Z\n         83: ifeq          121\n         86: aload_0\n-        87: getfield      #27                 // Field pos:I\n+        87: getfield      #84                 // Field pos:I\n         90: aload         4\n         92: arraylength\n         93: if_icmpge     121\n         96: aload_0\n-        97: getfield      #27                 // Field pos:I\n+        97: getfield      #84                 // Field pos:I\n        100: newarray       byte\n        102: astore        5\n        104: aload         4\n        106: iconst_0\n        107: aload         5\n        109: iconst_0\n        110: aload_0\n-       111: getfield      #27                 // Field pos:I\n-       114: invokestatic  #10                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       111: getfield      #84                 // Field pos:I\n+       114: invokestatic  #32                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        117: aload         5\n        119: astore        4\n        121: aload         4\n        123: areturn\n       LineNumberTable:\n         line 909: 0\n         line 910: 4\n@@ -2326,23 +2325,23 @@\n          8: iconst_4\n          9: imul\n         10: iconst_3\n         11: idiv\n         12: i2l\n         13: lstore_3\n         14: lload_3\n-        15: ldc2_w        #67                 // long 4l\n+        15: ldc2_w        #203                // long 4l\n         18: lrem\n         19: lstore        5\n         21: lload         5\n         23: lconst_0\n         24: lcmp\n         25: ifeq          37\n         28: lload_3\n-        29: ldc2_w        #67                 // long 4l\n+        29: ldc2_w        #203                // long 4l\n         32: lload         5\n         34: lsub\n         35: ladd\n         36: lstore_3\n         37: iload_1\n         38: ifle          79\n         41: lload_3\n@@ -2407,43 +2406,43 @@\n         frame_type = 23 /* same */\n \n   public static java.math.BigInteger decodeInteger(byte[]);\n     descriptor: ([B)Ljava/math/BigInteger;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=1, args_size=1\n-         0: new           #69                 // class java/math/BigInteger\n+         0: new           #205                // class java/math/BigInteger\n          3: dup\n          4: iconst_1\n          5: aload_0\n-         6: invokestatic  #70                 // Method decodeBase64:([B)[B\n-         9: invokespecial #71                 // Method java/math/BigInteger.\"<init>\":(I[B)V\n+         6: invokestatic  #207                // Method decodeBase64:([B)[B\n+         9: invokespecial #210                // Method java/math/BigInteger.\"<init>\":(I[B)V\n         12: areturn\n       LineNumberTable:\n         line 972: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0 pArray   [B\n \n   public static byte[] encodeInteger(java.math.BigInteger);\n     descriptor: (Ljava/math/BigInteger;)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: ifnonnull     14\n-         4: new           #72                 // class java/lang/NullPointerException\n+         4: new           #211                // class java/lang/NullPointerException\n          7: dup\n-         8: ldc           #73                 // String encodeInteger called with null parameter\n-        10: invokespecial #74                 // Method java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n+         8: ldc           #213                // String encodeInteger called with null parameter\n+        10: invokespecial #215                // Method java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n         13: athrow\n         14: aload_0\n-        15: invokestatic  #75                 // Method toIntegerBytes:(Ljava/math/BigInteger;)[B\n+        15: invokestatic  #216                // Method toIntegerBytes:(Ljava/math/BigInteger;)[B\n         18: iconst_0\n-        19: invokestatic  #39                 // Method encodeBase64:([BZ)[B\n+        19: invokestatic  #126                // Method encodeBase64:([BZ)[B\n         22: areturn\n       LineNumberTable:\n         line 986: 0\n         line 987: 4\n         line 989: 14\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -2453,34 +2452,34 @@\n \n   static byte[] toIntegerBytes(java.math.BigInteger);\n     descriptor: (Ljava/math/BigInteger;)[B\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=5, locals=7, args_size=1\n          0: aload_0\n-         1: invokevirtual #76                 // Method java/math/BigInteger.bitLength:()I\n+         1: invokevirtual #220                // Method java/math/BigInteger.bitLength:()I\n          4: istore_1\n          5: iload_1\n          6: bipush        7\n          8: iadd\n          9: iconst_3\n         10: ishr\n         11: iconst_3\n         12: ishl\n         13: istore_1\n         14: aload_0\n-        15: invokevirtual #77                 // Method java/math/BigInteger.toByteArray:()[B\n+        15: invokevirtual #223                // Method java/math/BigInteger.toByteArray:()[B\n         18: astore_2\n         19: aload_0\n-        20: invokevirtual #76                 // Method java/math/BigInteger.bitLength:()I\n+        20: invokevirtual #220                // Method java/math/BigInteger.bitLength:()I\n         23: bipush        8\n         25: irem\n         26: ifeq          47\n         29: aload_0\n-        30: invokevirtual #76                 // Method java/math/BigInteger.bitLength:()I\n+        30: invokevirtual #220                // Method java/math/BigInteger.bitLength:()I\n         33: bipush        8\n         35: idiv\n         36: iconst_1\n         37: iadd\n         38: iload_1\n         39: bipush        8\n         41: idiv\n@@ -2489,15 +2488,15 @@\n         46: areturn\n         47: iconst_0\n         48: istore_3\n         49: aload_2\n         50: arraylength\n         51: istore        4\n         53: aload_0\n-        54: invokevirtual #76                 // Method java/math/BigInteger.bitLength:()I\n+        54: invokevirtual #220                // Method java/math/BigInteger.bitLength:()I\n         57: bipush        8\n         59: irem\n         60: ifne          68\n         63: iconst_1\n         64: istore_3\n         65: iinc          4, -1\n         68: iload_1\n@@ -2512,15 +2511,15 @@\n         81: newarray       byte\n         83: astore        6\n         85: aload_2\n         86: iload_3\n         87: aload         6\n         89: iload         5\n         91: iload         4\n-        93: invokestatic  #10                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        93: invokestatic  #32                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         96: aload         6\n         98: areturn\n       LineNumberTable:\n         line 1000: 0\n         line 1002: 5\n         line 1003: 14\n         line 1005: 19\n@@ -2554,30 +2553,30 @@\n   private void reset();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: aconst_null\n-         2: putfield      #26                 // Field buffer:[B\n+         2: putfield      #81                 // Field buffer:[B\n          5: aload_0\n          6: iconst_0\n-         7: putfield      #27                 // Field pos:I\n+         7: putfield      #84                 // Field pos:I\n         10: aload_0\n         11: iconst_0\n-        12: putfield      #28                 // Field readPos:I\n+        12: putfield      #87                 // Field readPos:I\n         15: aload_0\n         16: iconst_0\n-        17: putfield      #35                 // Field currentLinePos:I\n+        17: putfield      #113                // Field currentLinePos:I\n         20: aload_0\n         21: iconst_0\n-        22: putfield      #33                 // Field modulus:I\n+        22: putfield      #107                // Field modulus:I\n         25: aload_0\n         26: iconst_0\n-        27: putfield      #31                 // Field eof:Z\n+        27: putfield      #100                // Field eof:Z\n         30: return\n       LineNumberTable:\n         line 1027: 0\n         line 1028: 5\n         line 1029: 10\n         line 1030: 15\n         line 1031: 20\n@@ -2589,31 +2588,31 @@\n \n   int getLineLength();\n     descriptor: ()I\n     flags: (0x0000)\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #8                  // Field lineLength:I\n+         1: getfield      #25                 // Field lineLength:I\n          4: ireturn\n       LineNumberTable:\n         line 1038: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/net/util/Base64;\n \n   byte[] getLineSeparator();\n     descriptor: ()[B\n     flags: (0x0000)\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #9                  // Field lineSeparator:[B\n-         4: invokevirtual #78                 // Method \"[B\".clone:()Ljava/lang/Object;\n-         7: checkcast     #79                 // class \"[B\"\n+         1: getfield      #29                 // Field lineSeparator:[B\n+         4: invokevirtual #227                // Method \"[B\".clone:()Ljava/lang/Object;\n+         7: checkcast     #228                // class \"[B\"\n         10: areturn\n       LineNumberTable:\n         line 1042: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/apache/commons/net/util/Base64;\n \n@@ -2628,18 +2627,18 @@\n          4: iconst_0\n          5: bipush        13\n          7: bastore\n          8: dup\n          9: iconst_1\n         10: bipush        10\n         12: bastore\n-        13: putstatic     #3                  // Field CHUNK_SEPARATOR:[B\n+        13: putstatic     #7                  // Field CHUNK_SEPARATOR:[B\n         16: iconst_0\n         17: newarray       byte\n-        19: putstatic     #7                  // Field EMPTY_BYTE_ARRAY:[B\n+        19: putstatic     #22                 // Field EMPTY_BYTE_ARRAY:[B\n         22: bipush        64\n         24: newarray       byte\n         26: dup\n         27: iconst_0\n         28: bipush        65\n         30: bastore\n         31: dup\n@@ -2890,15 +2889,15 @@\n        393: bipush        62\n        395: bipush        43\n        397: bastore\n        398: dup\n        399: bipush        63\n        401: bipush        47\n        403: bastore\n-       404: putstatic     #24                 // Field STANDARD_ENCODE_TABLE:[B\n+       404: putstatic     #75                 // Field STANDARD_ENCODE_TABLE:[B\n        407: bipush        64\n        409: newarray       byte\n        411: dup\n        412: iconst_0\n        413: bipush        65\n        415: bastore\n        416: dup\n@@ -3149,15 +3148,15 @@\n        778: bipush        62\n        780: bipush        45\n        782: bastore\n        783: dup\n        784: bipush        63\n        786: bipush        95\n        788: bastore\n-       789: putstatic     #23                 // Field URL_SAFE_ENCODE_TABLE:[B\n+       789: putstatic     #72                 // Field URL_SAFE_ENCODE_TABLE:[B\n        792: bipush        123\n        794: newarray       byte\n        796: dup\n        797: iconst_0\n        798: iconst_m1\n        799: bastore\n        800: dup\n@@ -3644,15 +3643,15 @@\n       1454: bipush        121\n       1456: bipush        50\n       1458: bastore\n       1459: dup\n       1460: bipush        122\n       1462: bipush        51\n       1464: bastore\n-      1465: putstatic     #36                 // Field DECODE_TABLE:[B\n+      1465: putstatic     #116                // Field DECODE_TABLE:[B\n       1468: return\n       LineNumberTable:\n         line 70: 0\n         line 72: 16\n         line 81: 22\n         line 94: 407\n         line 118: 792\n"}]}
