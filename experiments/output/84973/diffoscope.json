{"diffoscope-json-version": 1, "source1": "first/FilesUncheck.class", "source2": "second/FilesUncheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,10 +1,11 @@\n \n package org.apache.commons.io.file;\n \n+import java.io.IOException;\n import java.nio.file.FileVisitor;\n import java.nio.file.FileVisitOption;\n import java.util.Map;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.util.List;\n import java.nio.file.DirectoryStream;\n import java.nio.channels.SeekableByteChannel;\n@@ -16,97 +17,97 @@\n import java.nio.file.attribute.PosixFilePermission;\n import java.util.Set;\n import java.nio.file.attribute.UserPrincipal;\n import java.nio.file.attribute.FileTime;\n import java.nio.file.FileStore;\n import java.nio.file.LinkOption;\n import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.Files;\n import java.io.OutputStream;\n import org.apache.commons.io.function.Uncheck;\n-import java.nio.file.Files;\n import java.nio.file.CopyOption;\n import java.nio.file.Path;\n import java.io.InputStream;\n \n public final class FilesUncheck\n {\n     public static long copy(final InputStream in, final Path target, final CopyOption... options) {\n-        return (long)Uncheck.apply(Files::copy, (Object)in, (Object)target, (Object)options);\n+        return (long)Uncheck.apply(( arg0,  arg1,  arg2) -> Long.valueOf(Files.copy( arg0,  arg1,  arg2)), (Object)in, (Object)target, (Object)options);\n     }\n     \n     public static long copy(final Path source, final OutputStream out) {\n         return (long)Uncheck.apply(Files::copy, (Object)source, (Object)out);\n     }\n     \n     public static Path copy(final Path source, final Path target, final CopyOption... options) {\n-        return (Path)Uncheck.apply(Files::copy, (Object)source, (Object)target, (Object)options);\n+        return (Path)Uncheck.apply(( arg0,  arg1,  arg2) -> Files.copy( arg0,  arg1,  arg2), (Object)source, (Object)target, (Object)options);\n     }\n     \n     public static Path createDirectories(final Path dir, final FileAttribute<?>... attrs) {\n-        return (Path)Uncheck.apply(Files::createDirectories, (Object)dir, (Object)attrs);\n+        return (Path)Uncheck.apply(( arg0,  arg1) -> Files.createDirectories( arg0,  arg1), (Object)dir, (Object)attrs);\n     }\n     \n     public static Path createDirectory(final Path dir, final FileAttribute<?>... attrs) {\n-        return (Path)Uncheck.apply(Files::createDirectory, (Object)dir, (Object)attrs);\n+        return (Path)Uncheck.apply(( arg0,  arg1) -> Files.createDirectory( arg0,  arg1), (Object)dir, (Object)attrs);\n     }\n     \n     public static Path createFile(final Path path, final FileAttribute<?>... attrs) {\n-        return (Path)Uncheck.apply(Files::createFile, (Object)path, (Object)attrs);\n+        return (Path)Uncheck.apply(( arg0,  arg1) -> Files.createFile( arg0,  arg1), (Object)path, (Object)attrs);\n     }\n     \n     public static Path createLink(final Path link, final Path existing) {\n         return (Path)Uncheck.apply(Files::createLink, (Object)link, (Object)existing);\n     }\n     \n     public static Path createSymbolicLink(final Path link, final Path target, final FileAttribute<?>... attrs) {\n-        return (Path)Uncheck.apply(Files::createSymbolicLink, (Object)link, (Object)target, (Object)attrs);\n+        return (Path)Uncheck.apply(( arg0,  arg1,  arg2) -> Files.createSymbolicLink( arg0,  arg1,  arg2), (Object)link, (Object)target, (Object)attrs);\n     }\n     \n     public static Path createTempDirectory(final Path dir, final String prefix, final FileAttribute<?>... attrs) {\n-        return (Path)Uncheck.apply(Files::createTempDirectory, (Object)dir, (Object)prefix, (Object)attrs);\n+        return (Path)Uncheck.apply(( arg0,  arg1,  arg2) -> Files.createTempDirectory( arg0,  arg1,  arg2), (Object)dir, (Object)prefix, (Object)attrs);\n     }\n     \n     public static Path createTempDirectory(final String prefix, final FileAttribute<?>... attrs) {\n-        return (Path)Uncheck.apply(Files::createTempDirectory, (Object)prefix, (Object)attrs);\n+        return (Path)Uncheck.apply(( arg0,  arg1) -> Files.createTempDirectory( arg0,  arg1), (Object)prefix, (Object)attrs);\n     }\n     \n     public static Path createTempFile(final Path dir, final String prefix, final String suffix, final FileAttribute<?>... attrs) {\n-        return (Path)Uncheck.apply(Files::createTempFile, (Object)dir, (Object)prefix, (Object)suffix, (Object)attrs);\n+        return (Path)Uncheck.apply(( arg0,  arg1,  arg2,  arg3) -> Files.createTempFile( arg0,  arg1,  arg2,  arg3), (Object)dir, (Object)prefix, (Object)suffix, (Object)attrs);\n     }\n     \n     public static Path createTempFile(final String prefix, final String suffix, final FileAttribute<?>... attrs) {\n-        return (Path)Uncheck.apply(Files::createTempFile, (Object)prefix, (Object)suffix, (Object)attrs);\n+        return (Path)Uncheck.apply(( arg0,  arg1,  arg2) -> Files.createTempFile( arg0,  arg1,  arg2), (Object)prefix, (Object)suffix, (Object)attrs);\n     }\n     \n     public static void delete(final Path path) {\n         Uncheck.accept(Files::delete, (Object)path);\n     }\n     \n     public static boolean deleteIfExists(final Path path) {\n         return (boolean)Uncheck.apply(Files::deleteIfExists, (Object)path);\n     }\n     \n     public static Object getAttribute(final Path path, final String attribute, final LinkOption... options) {\n-        return Uncheck.apply(Files::getAttribute, (Object)path, (Object)attribute, (Object)options);\n+        return Uncheck.apply(( arg0,  arg1,  arg2) -> Files.getAttribute( arg0,  arg1,  arg2), (Object)path, (Object)attribute, (Object)options);\n     }\n     \n     public static FileStore getFileStore(final Path path) {\n         return (FileStore)Uncheck.apply(Files::getFileStore, (Object)path);\n     }\n     \n     public static FileTime getLastModifiedTime(final Path path, final LinkOption... options) {\n-        return (FileTime)Uncheck.apply(Files::getLastModifiedTime, (Object)path, (Object)options);\n+        return (FileTime)Uncheck.apply(( arg0,  arg1) -> Files.getLastModifiedTime( arg0,  arg1), (Object)path, (Object)options);\n     }\n     \n     public static UserPrincipal getOwner(final Path path, final LinkOption... options) {\n-        return (UserPrincipal)Uncheck.apply(Files::getOwner, (Object)path, (Object)options);\n+        return (UserPrincipal)Uncheck.apply(( arg0,  arg1) -> Files.getOwner( arg0,  arg1), (Object)path, (Object)options);\n     }\n     \n     public static Set<PosixFilePermission> getPosixFilePermissions(final Path path, final LinkOption... options) {\n-        return (Set)Uncheck.apply(Files::getPosixFilePermissions, (Object)path, (Object)options);\n+        return (Set)Uncheck.apply(( arg0,  arg1) -> Files.getPosixFilePermissions( arg0,  arg1), (Object)path, (Object)options);\n     }\n     \n     public static boolean isHidden(final Path path) {\n         return (boolean)Uncheck.apply(Files::isHidden, (Object)path);\n     }\n     \n     public static boolean isSameFile(final Path path, final Path path2) {\n@@ -122,39 +123,39 @@\n     }\n     \n     public static Stream<Path> list(final Path dir) {\n         return (Stream)Uncheck.apply(Files::list, (Object)dir);\n     }\n     \n     public static Path move(final Path source, final Path target, final CopyOption... options) {\n-        return (Path)Uncheck.apply(Files::move, (Object)source, (Object)target, (Object)options);\n+        return (Path)Uncheck.apply(( arg0,  arg1,  arg2) -> Files.move( arg0,  arg1,  arg2), (Object)source, (Object)target, (Object)options);\n     }\n     \n     public static BufferedReader newBufferedReader(final Path path) {\n         return (BufferedReader)Uncheck.apply(Files::newBufferedReader, (Object)path);\n     }\n     \n     public static BufferedReader newBufferedReader(final Path path, final Charset cs) {\n         return (BufferedReader)Uncheck.apply(Files::newBufferedReader, (Object)path, (Object)cs);\n     }\n     \n     public static BufferedWriter newBufferedWriter(final Path path, final Charset cs, final OpenOption... options) {\n-        return (BufferedWriter)Uncheck.apply(Files::newBufferedWriter, (Object)path, (Object)cs, (Object)options);\n+        return (BufferedWriter)Uncheck.apply(( arg0,  arg1,  arg2) -> Files.newBufferedWriter( arg0,  arg1,  arg2), (Object)path, (Object)cs, (Object)options);\n     }\n     \n     public static BufferedWriter newBufferedWriter(final Path path, final OpenOption... options) {\n-        return (BufferedWriter)Uncheck.apply(Files::newBufferedWriter, (Object)path, (Object)options);\n+        return (BufferedWriter)Uncheck.apply(( arg0,  arg1) -> Files.newBufferedWriter( arg0,  arg1), (Object)path, (Object)options);\n     }\n     \n     public static SeekableByteChannel newByteChannel(final Path path, final OpenOption... options) {\n-        return (SeekableByteChannel)Uncheck.apply(Files::newByteChannel, (Object)path, (Object)options);\n+        return (SeekableByteChannel)Uncheck.apply(( arg0,  arg1) -> Files.newByteChannel( arg0,  arg1), (Object)path, (Object)options);\n     }\n     \n     public static SeekableByteChannel newByteChannel(final Path path, final Set<? extends OpenOption> options, final FileAttribute<?>... attrs) {\n-        return (SeekableByteChannel)Uncheck.apply(Files::newByteChannel, (Object)path, (Object)options, (Object)attrs);\n+        return (SeekableByteChannel)Uncheck.apply(( arg0,  arg1,  arg2) -> Files.newByteChannel( arg0,  arg1,  arg2), (Object)path, (Object)options, (Object)attrs);\n     }\n     \n     public static DirectoryStream<Path> newDirectoryStream(final Path dir) {\n         return (DirectoryStream)Uncheck.apply(Files::newDirectoryStream, (Object)dir);\n     }\n     \n     public static DirectoryStream<Path> newDirectoryStream(final Path dir, final DirectoryStream.Filter<? super Path> filter) {\n@@ -162,19 +163,19 @@\n     }\n     \n     public static DirectoryStream<Path> newDirectoryStream(final Path dir, final String glob) {\n         return (DirectoryStream)Uncheck.apply(Files::newDirectoryStream, (Object)dir, (Object)glob);\n     }\n     \n     public static InputStream newInputStream(final Path path, final OpenOption... options) {\n-        return (InputStream)Uncheck.apply(Files::newInputStream, (Object)path, (Object)options);\n+        return (InputStream)Uncheck.apply(( arg0,  arg1) -> Files.newInputStream( arg0,  arg1), (Object)path, (Object)options);\n     }\n     \n     public static OutputStream newOutputStream(final Path path, final OpenOption... options) {\n-        return (OutputStream)Uncheck.apply(Files::newOutputStream, (Object)path, (Object)options);\n+        return (OutputStream)Uncheck.apply(( arg0,  arg1) -> Files.newOutputStream( arg0,  arg1), (Object)path, (Object)options);\n     }\n     \n     public static String probeContentType(final Path path) {\n         return (String)Uncheck.apply(Files::probeContentType, (Object)path);\n     }\n     \n     public static byte[] readAllBytes(final Path path) {\n@@ -186,27 +187,27 @@\n     }\n     \n     public static List<String> readAllLines(final Path path, final Charset cs) {\n         return (List)Uncheck.apply(Files::readAllLines, (Object)path, (Object)cs);\n     }\n     \n     public static <A extends BasicFileAttributes> A readAttributes(final Path path, final Class<A> type, final LinkOption... options) {\n-        return (A)Uncheck.apply(Files::readAttributes, (Object)path, (Object)type, (Object)options);\n+        return (A)Uncheck.apply(( arg0,  arg1,  arg2) -> Files.readAttributes( arg0, (Class<BasicFileAttributes>) arg1,  arg2), (Object)path, (Object)type, (Object)options);\n     }\n     \n     public static Map<String, Object> readAttributes(final Path path, final String attributes, final LinkOption... options) {\n-        return (Map)Uncheck.apply(Files::readAttributes, (Object)path, (Object)attributes, (Object)options);\n+        return (Map)Uncheck.apply(( arg0,  arg1,  arg2) -> Files.readAttributes( arg0,  arg1,  arg2), (Object)path, (Object)attributes, (Object)options);\n     }\n     \n     public static Path readSymbolicLink(final Path link) {\n         return (Path)Uncheck.apply(Files::readSymbolicLink, (Object)link);\n     }\n     \n     public static Path setAttribute(final Path path, final String attribute, final Object value, final LinkOption... options) {\n-        return (Path)Uncheck.apply(Files::setAttribute, (Object)path, (Object)attribute, value, (Object)options);\n+        return (Path)Uncheck.apply(( arg0,  arg1,  arg2,  arg3) -> Files.setAttribute( arg0,  arg1,  arg2,  arg3), (Object)path, (Object)attribute, value, (Object)options);\n     }\n     \n     public static Path setLastModifiedTime(final Path path, final FileTime time) {\n         return (Path)Uncheck.apply(Files::setLastModifiedTime, (Object)path, (Object)time);\n     }\n     \n     public static Path setOwner(final Path path, final UserPrincipal owner) {\n@@ -218,37 +219,37 @@\n     }\n     \n     public static long size(final Path path) {\n         return (long)Uncheck.apply(Files::size, (Object)path);\n     }\n     \n     public static Stream<Path> walk(final Path start, final FileVisitOption... options) {\n-        return (Stream)Uncheck.apply(Files::walk, (Object)start, (Object)options);\n+        return (Stream)Uncheck.apply(( arg0,  arg1) -> Files.walk( arg0,  arg1), (Object)start, (Object)options);\n     }\n     \n     public static Stream<Path> walk(final Path start, final int maxDepth, final FileVisitOption... options) {\n-        return (Stream)Uncheck.apply(Files::walk, (Object)start, (Object)Integer.valueOf(maxDepth), (Object)options);\n+        return (Stream)Uncheck.apply(( arg0,  arg1,  arg2) -> Files.walk( arg0, (int) arg1,  arg2), (Object)start, (Object)Integer.valueOf(maxDepth), (Object)options);\n     }\n     \n     public static Path walkFileTree(final Path start, final FileVisitor<? super Path> visitor) {\n         return (Path)Uncheck.apply(Files::walkFileTree, (Object)start, (Object)visitor);\n     }\n     \n     public static Path walkFileTree(final Path start, final Set<FileVisitOption> options, final int maxDepth, final FileVisitor<? super Path> visitor) {\n         return (Path)Uncheck.apply(Files::walkFileTree, (Object)start, (Object)options, (Object)Integer.valueOf(maxDepth), (Object)visitor);\n     }\n     \n     public static Path write(final Path path, final byte[] bytes, final OpenOption... options) {\n-        return (Path)Uncheck.apply(Files::write, (Object)path, (Object)bytes, (Object)options);\n+        return (Path)Uncheck.apply(( arg0,  arg1,  arg2) -> Files.write( arg0,  arg1,  arg2), (Object)path, (Object)bytes, (Object)options);\n     }\n     \n     public static Path write(final Path path, final Iterable<? extends CharSequence> lines, final Charset cs, final OpenOption... options) {\n-        return (Path)Uncheck.apply(Files::write, (Object)path, (Object)lines, (Object)cs, (Object)options);\n+        return (Path)Uncheck.apply(( arg0,  arg1,  arg2,  arg3) -> Files.write( arg0,  arg1,  arg2,  arg3), (Object)path, (Object)lines, (Object)cs, (Object)options);\n     }\n     \n     public static Path write(final Path path, final Iterable<? extends CharSequence> lines, final OpenOption... options) {\n-        return (Path)Uncheck.apply(Files::write, (Object)path, (Object)lines, (Object)options);\n+        return (Path)Uncheck.apply(( arg0,  arg1,  arg2) -> Files.write( arg0,  arg1,  arg2), (Object)path, (Object)lines, (Object)options);\n     }\n     \n     private FilesUncheck() {\n     }\n }\n"}]}
