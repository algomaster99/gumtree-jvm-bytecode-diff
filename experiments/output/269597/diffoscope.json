{"diffoscope-json-version": 1, "source1": "first/MainFrameModel.class", "source2": "second/MainFrameModel.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,16 +26,16 @@\n     public MainFrameModel() {\n         this.linesToPosition = new ArrayList<Integer>();\n         this.parseMode = MainFrameModel.ParseMode.PLAIN_JAVA;\n         this.title = \"Checkstyle GUI\";\n         this.parseTreeTableModel = new ParseTreeTableModel((DetailAST)null);\n     }\n     \n-    public void setParseMode(final MainFrameModel.ParseMode mode) {\n-        this.parseMode = mode;\n+    public void setParseMode(final MainFrameModel.ParseMode parseMode) {\n+        this.parseMode = parseMode;\n     }\n     \n     public ParseTreeTableModel getParseTreeTableModel() {\n         return this.parseTreeTableModel;\n     }\n     \n     public String getText() {\n@@ -51,61 +51,60 @@\n     }\n     \n     public static boolean shouldAcceptFile(final File file) {\n         return file.isDirectory() || file.getName().endsWith(\".java\");\n     }\n     \n     public File getLastDirectory() {\n-        File lastDirectory = null;\n+        File parentFile = null;\n         if (this.currentFile != null) {\n-            lastDirectory = this.currentFile.getParentFile();\n+            parentFile = this.currentFile.getParentFile();\n         }\n-        return lastDirectory;\n+        return parentFile;\n     }\n     \n     public File getCurrentFile() {\n         return this.currentFile;\n     }\n     \n     public List<Integer> getLinesToPosition() {\n         return new ArrayList<Integer>(this.linesToPosition);\n     }\n     \n-    public void openFile(final File file) throws CheckstyleException {\n-        if (file != null) {\n+    public void openFile(final File currentFile) throws CheckstyleException {\n+        if (currentFile != null) {\n             try {\n-                this.currentFile = file;\n-                this.title = \"Checkstyle GUI : \" + file.getName();\n+                this.currentFile = currentFile;\n+                this.title = \"Checkstyle GUI : \" + currentFile.getName();\n                 this.reloadActionEnabled = true;\n                 DetailAST parseTree;\n                 if (this.parseMode == MainFrameModel.ParseMode.PLAIN_JAVA) {\n-                    parseTree = JavaParser.parseFile(file, JavaParser.Options.WITHOUT_COMMENTS);\n+                    parseTree = JavaParser.parseFile(currentFile, JavaParser.Options.WITHOUT_COMMENTS);\n                 }\n                 else {\n                     if (this.parseMode != MainFrameModel.ParseMode.JAVA_WITH_COMMENTS && this.parseMode != MainFrameModel.ParseMode.JAVA_WITH_JAVADOC_AND_COMMENTS) {\n                         throw new IllegalArgumentException(\"Unknown mode: \" + String.valueOf((Object)this.parseMode));\n                     }\n-                    parseTree = JavaParser.parseFile(file, JavaParser.Options.WITH_COMMENTS);\n+                    parseTree = JavaParser.parseFile(currentFile, JavaParser.Options.WITH_COMMENTS);\n                 }\n                 this.parseTreeTableModel.setParseTree(parseTree);\n                 this.parseTreeTableModel.setParseMode(this.parseMode);\n-                final String[] sourceLines = getFileText(file).toLinesArray();\n-                final List<Integer> linesToPositionTemp = new ArrayList<Integer>(sourceLines.length + 1);\n-                linesToPositionTemp.add(Integer.valueOf(0));\n+                final String[] linesArray = getFileText(currentFile).toLinesArray();\n+                final ArrayList linesToPosition = new ArrayList(linesArray.length + 1);\n+                linesToPosition.add((Object)Integer.valueOf(0));\n                 final StringBuilder sb = new StringBuilder(1024);\n-                for (final String element : sourceLines) {\n-                    linesToPositionTemp.add(Integer.valueOf(sb.length()));\n-                    sb.append(element).append(System.lineSeparator());\n+                for (final String str : linesArray) {\n+                    linesToPosition.add((Object)Integer.valueOf(sb.length()));\n+                    sb.append(str).append(System.lineSeparator());\n                 }\n-                this.linesToPosition = linesToPositionTemp;\n+                this.linesToPosition = (List<Integer>)linesToPosition;\n                 this.text = sb.toString();\n             }\n             catch (final IOException ex) {\n-                final String exceptionMsg = String.format(Locale.ROOT, \"%s occurred while opening file %s.\", ex.getClass().getSimpleName(), file.getPath());\n-                throw new CheckstyleException(exceptionMsg, (Throwable)ex);\n+                throw new CheckstyleException(String.format(Locale.ROOT, \"%s occurred while opening file %s.\", ex.getClass().getSimpleName(), currentFile.getPath()), (Throwable)ex);\n             }\n         }\n     }\n     \n     private static FileText getFileText(final File file) throws IOException {\n         return new FileText(file.getAbsoluteFile(), System.getProperty(\"file.encoding\", StandardCharsets.UTF_8.name()));\n     }\n"}]}
