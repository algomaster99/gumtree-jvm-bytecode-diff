{"diffoscope-json-version": 1, "source1": "first/Lexer.class", "source2": "second/Lexer.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,296 +1,296 @@\n-  SHA-256 checksum f9cafca1d17bc939ddae9484b19e3949f0d35ffccd3d85a1856dd2cefa8ccef0\n+  SHA-256 checksum f63b03353c68be7e84c0b85c867023c5042e665f866bb8582106d562f27d8bd6\n   Compiled from \"Lexer.java\"\n final class org.apache.commons.csv.Lexer implements java.io.Closeable\n   minor version: 0\n   major version: 52\n   flags: (0x0030) ACC_FINAL, ACC_SUPER\n-  this_class: #28                         // org/apache/commons/csv/Lexer\n-  super_class: #81                        // java/lang/Object\n+  this_class: #10                         // org/apache/commons/csv/Lexer\n+  super_class: #4                         // java/lang/Object\n   interfaces: 1, fields: 14, methods: 22, attributes: 2\n Constant pool:\n-    #1 = Class              #143          // org/apache/commons/csv/Constants\n-    #2 = Methodref          #81.#144      // java/lang/Object.\"<init>\":()V\n-    #3 = Fieldref           #28.#145      // org/apache/commons/csv/Lexer.reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-    #4 = Methodref          #146.#147     // org/apache/commons/csv/CSVFormat.getDelimiterString:()Ljava/lang/String;\n-    #5 = Methodref          #131.#148     // java/lang/String.toCharArray:()[C\n-    #6 = Fieldref           #28.#149      // org/apache/commons/csv/Lexer.delimiter:[C\n-    #7 = Methodref          #146.#150     // org/apache/commons/csv/CSVFormat.getEscapeCharacter:()Ljava/lang/Character;\n-    #8 = Methodref          #28.#151      // org/apache/commons/csv/Lexer.mapNullToDisabled:(Ljava/lang/Character;)C\n-    #9 = Fieldref           #28.#152      // org/apache/commons/csv/Lexer.escape:C\n-   #10 = Methodref          #146.#153     // org/apache/commons/csv/CSVFormat.getQuoteCharacter:()Ljava/lang/Character;\n-   #11 = Fieldref           #28.#154      // org/apache/commons/csv/Lexer.quoteChar:C\n-   #12 = Methodref          #146.#155     // org/apache/commons/csv/CSVFormat.getCommentMarker:()Ljava/lang/Character;\n-   #13 = Fieldref           #28.#156      // org/apache/commons/csv/Lexer.commentStart:C\n-   #14 = Methodref          #146.#157     // org/apache/commons/csv/CSVFormat.getIgnoreSurroundingSpaces:()Z\n-   #15 = Fieldref           #28.#158      // org/apache/commons/csv/Lexer.ignoreSurroundingSpaces:Z\n-   #16 = Methodref          #146.#159     // org/apache/commons/csv/CSVFormat.getIgnoreEmptyLines:()Z\n-   #17 = Fieldref           #28.#160      // org/apache/commons/csv/Lexer.ignoreEmptyLines:Z\n-   #18 = Fieldref           #28.#161      // org/apache/commons/csv/Lexer.delimiterBuf:[C\n-   #19 = Fieldref           #28.#162      // org/apache/commons/csv/Lexer.escapeDelimiterBuf:[C\n-   #20 = Methodref          #163.#164     // org/apache/commons/csv/ExtendedBufferedReader.close:()V\n-   #21 = Methodref          #163.#165     // org/apache/commons/csv/ExtendedBufferedReader.getPosition:()J\n-   #22 = Methodref          #163.#166     // org/apache/commons/csv/ExtendedBufferedReader.getCurrentLineNumber:()J\n-   #23 = Fieldref           #28.#167      // org/apache/commons/csv/Lexer.firstEol:Ljava/lang/String;\n-   #24 = Methodref          #163.#168     // org/apache/commons/csv/ExtendedBufferedReader.isClosed:()Z\n-   #25 = Fieldref           #28.#169      // org/apache/commons/csv/Lexer.isLastTokenDelimiter:Z\n-   #26 = Methodref          #163.#170     // org/apache/commons/csv/ExtendedBufferedReader.lookAhead:([C)[C\n-   #27 = Methodref          #163.#171     // org/apache/commons/csv/ExtendedBufferedReader.read:([CII)I\n-   #28 = Class              #172          // org/apache/commons/csv/Lexer\n-   #29 = Integer            65534\n-   #30 = Methodref          #173.#174     // java/lang/Character.charValue:()C\n-   #31 = Methodref          #163.#175     // org/apache/commons/csv/ExtendedBufferedReader.getLastChar:()I\n-   #32 = Methodref          #163.#176     // org/apache/commons/csv/ExtendedBufferedReader.read:()I\n-   #33 = Methodref          #28.#177      // org/apache/commons/csv/Lexer.readEndOfLine:(I)Z\n-   #34 = Methodref          #28.#178      // org/apache/commons/csv/Lexer.isStartOfLine:(I)Z\n-   #35 = Methodref          #28.#179      // org/apache/commons/csv/Lexer.isEndOfFile:(I)Z\n-   #36 = Fieldref           #180.#181     // org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n-   #37 = Fieldref           #182.#183     // org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n-   #38 = Methodref          #28.#184      // org/apache/commons/csv/Lexer.isCommentStart:(I)Z\n-   #39 = Methodref          #163.#185     // org/apache/commons/csv/ExtendedBufferedReader.readLine:()Ljava/lang/String;\n-   #40 = Methodref          #131.#186     // java/lang/String.trim:()Ljava/lang/String;\n-   #41 = Fieldref           #182.#187     // org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n-   #42 = Methodref          #62.#188      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #43 = Fieldref           #180.#189     // org/apache/commons/csv/Token$Type.COMMENT:Lorg/apache/commons/csv/Token$Type;\n-   #44 = Fieldref           #180.#190     // org/apache/commons/csv/Token$Type.INVALID:Lorg/apache/commons/csv/Token$Type;\n-   #45 = Methodref          #173.#191     // java/lang/Character.isWhitespace:(C)Z\n-   #46 = Methodref          #28.#192      // org/apache/commons/csv/Lexer.isDelimiter:(I)Z\n-   #47 = Fieldref           #180.#193     // org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n-   #48 = Fieldref           #180.#194     // org/apache/commons/csv/Token$Type.EORECORD:Lorg/apache/commons/csv/Token$Type;\n-   #49 = Methodref          #28.#195      // org/apache/commons/csv/Lexer.isQuoteChar:(I)Z\n-   #50 = Methodref          #28.#196      // org/apache/commons/csv/Lexer.parseEncapsulatedToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-   #51 = Fieldref           #182.#197     // org/apache/commons/csv/Token.isReady:Z\n-   #52 = Methodref          #28.#198      // org/apache/commons/csv/Lexer.parseSimpleToken:(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n-   #53 = Fieldref           #182.#199     // org/apache/commons/csv/Token.isQuoted:Z\n-   #54 = Methodref          #28.#166      // org/apache/commons/csv/Lexer.getCurrentLineNumber:()J\n-   #55 = Methodref          #28.#200      // org/apache/commons/csv/Lexer.isEscape:(I)Z\n-   #56 = Methodref          #28.#201      // org/apache/commons/csv/Lexer.isEscapeDelimiter:()Z\n-   #57 = Methodref          #62.#202      // java/lang/StringBuilder.append:([C)Ljava/lang/StringBuilder;\n-   #58 = Methodref          #28.#203      // org/apache/commons/csv/Lexer.readEscape:()I\n-   #59 = Methodref          #62.#204      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-   #60 = Methodref          #163.#205     // org/apache/commons/csv/ExtendedBufferedReader.lookAhead:()I\n-   #61 = Class              #206          // java/io/IOException\n-   #62 = Class              #207          // java/lang/StringBuilder\n-   #63 = Methodref          #62.#144      // java/lang/StringBuilder.\"<init>\":()V\n-   #64 = String             #208          // (line\n-   #65 = Methodref          #62.#209      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #66 = String             #210          // ) invalid char between encapsulated token and delimiter\n-   #67 = Methodref          #62.#211      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #68 = Methodref          #61.#212      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #69 = String             #213          // (startline\n-   #70 = String             #214          // ) EOF reached before encapsulated token finished\n-   #71 = Methodref          #28.#215      // org/apache/commons/csv/Lexer.trimTrailingSpaces:(Ljava/lang/StringBuilder;)V\n-   #72 = String             #216          // \\r\\n\n-   #73 = Fieldref           #28.#217      // org/apache/commons/csv/Lexer.LF_STRING:Ljava/lang/String;\n-   #74 = Fieldref           #28.#218      // org/apache/commons/csv/Lexer.CR_STRING:Ljava/lang/String;\n-   #75 = String             #219          // EOF whilst processing escape sequence\n-   #76 = Methodref          #28.#220      // org/apache/commons/csv/Lexer.isMetaChar:(I)Z\n-   #77 = Methodref          #62.#221      // java/lang/StringBuilder.length:()I\n-   #78 = Methodref          #62.#222      // java/lang/StringBuilder.charAt:(I)C\n-   #79 = Methodref          #62.#223      // java/lang/StringBuilder.setLength:(I)V\n-   #80 = Methodref          #173.#224     // java/lang/Character.toString:(C)Ljava/lang/String;\n-   #81 = Class              #225          // java/lang/Object\n-   #82 = Class              #226          // java/io/Closeable\n-   #83 = Utf8               CR_STRING\n-   #84 = Utf8               Ljava/lang/String;\n-   #85 = Utf8               LF_STRING\n-   #86 = Utf8               DISABLED\n-   #87 = Utf8               C\n-   #88 = Utf8               ConstantValue\n-   #89 = Utf8               delimiter\n-   #90 = Utf8               [C\n-   #91 = Utf8               delimiterBuf\n-   #92 = Utf8               escapeDelimiterBuf\n-   #93 = Utf8               escape\n-   #94 = Utf8               quoteChar\n-   #95 = Utf8               commentStart\n-   #96 = Utf8               ignoreSurroundingSpaces\n-   #97 = Utf8               Z\n-   #98 = Utf8               ignoreEmptyLines\n-   #99 = Utf8               reader\n-  #100 = Utf8               Lorg/apache/commons/csv/ExtendedBufferedReader;\n-  #101 = Utf8               firstEol\n-  #102 = Utf8               isLastTokenDelimiter\n-  #103 = Utf8               <init>\n-  #104 = Utf8               (Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-  #105 = Utf8               Code\n-  #106 = Utf8               LineNumberTable\n-  #107 = Utf8               close\n-  #108 = Utf8               ()V\n-  #109 = Utf8               Exceptions\n-  #110 = Utf8               getCharacterPosition\n-  #111 = Utf8               ()J\n-  #112 = Utf8               getCurrentLineNumber\n-  #113 = Utf8               getFirstEol\n-  #114 = Utf8               ()Ljava/lang/String;\n-  #115 = Utf8               isClosed\n-  #116 = Utf8               ()Z\n-  #117 = Utf8               isCommentStart\n-  #118 = Utf8               (I)Z\n-  #119 = Utf8               StackMapTable\n-  #120 = Utf8               isDelimiter\n-  #121 = Utf8               isEndOfFile\n-  #122 = Utf8               isEscape\n-  #123 = Utf8               isEscapeDelimiter\n-  #124 = Utf8               isMetaChar\n-  #125 = Utf8               isQuoteChar\n-  #126 = Utf8               isStartOfLine\n-  #127 = Utf8               mapNullToDisabled\n-  #128 = Utf8               (Ljava/lang/Character;)C\n-  #129 = Utf8               nextToken\n-  #130 = Utf8               (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #131 = Class              #227          // java/lang/String\n-  #132 = Utf8               parseEncapsulatedToken\n-  #133 = Utf8               parseSimpleToken\n-  #134 = Utf8               (Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n-  #135 = Utf8               readEndOfLine\n-  #136 = Utf8               readEscape\n-  #137 = Utf8               ()I\n-  #138 = Utf8               trimTrailingSpaces\n-  #139 = Utf8               (Ljava/lang/StringBuilder;)V\n-  #140 = Utf8               <clinit>\n-  #141 = Utf8               SourceFile\n-  #142 = Utf8               Lexer.java\n-  #143 = Utf8               org/apache/commons/csv/Constants\n-  #144 = NameAndType        #103:#108     // \"<init>\":()V\n-  #145 = NameAndType        #99:#100      // reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-  #146 = Class              #228          // org/apache/commons/csv/CSVFormat\n-  #147 = NameAndType        #229:#114     // getDelimiterString:()Ljava/lang/String;\n-  #148 = NameAndType        #230:#231     // toCharArray:()[C\n-  #149 = NameAndType        #89:#90       // delimiter:[C\n-  #150 = NameAndType        #232:#233     // getEscapeCharacter:()Ljava/lang/Character;\n-  #151 = NameAndType        #127:#128     // mapNullToDisabled:(Ljava/lang/Character;)C\n-  #152 = NameAndType        #93:#87       // escape:C\n-  #153 = NameAndType        #234:#233     // getQuoteCharacter:()Ljava/lang/Character;\n-  #154 = NameAndType        #94:#87       // quoteChar:C\n-  #155 = NameAndType        #235:#233     // getCommentMarker:()Ljava/lang/Character;\n-  #156 = NameAndType        #95:#87       // commentStart:C\n-  #157 = NameAndType        #236:#116     // getIgnoreSurroundingSpaces:()Z\n-  #158 = NameAndType        #96:#97       // ignoreSurroundingSpaces:Z\n-  #159 = NameAndType        #237:#116     // getIgnoreEmptyLines:()Z\n-  #160 = NameAndType        #98:#97       // ignoreEmptyLines:Z\n-  #161 = NameAndType        #91:#90       // delimiterBuf:[C\n-  #162 = NameAndType        #92:#90       // escapeDelimiterBuf:[C\n-  #163 = Class              #238          // org/apache/commons/csv/ExtendedBufferedReader\n-  #164 = NameAndType        #107:#108     // close:()V\n-  #165 = NameAndType        #239:#111     // getPosition:()J\n-  #166 = NameAndType        #112:#111     // getCurrentLineNumber:()J\n-  #167 = NameAndType        #101:#84      // firstEol:Ljava/lang/String;\n-  #168 = NameAndType        #115:#116     // isClosed:()Z\n-  #169 = NameAndType        #102:#97      // isLastTokenDelimiter:Z\n-  #170 = NameAndType        #240:#241     // lookAhead:([C)[C\n-  #171 = NameAndType        #242:#243     // read:([CII)I\n-  #172 = Utf8               org/apache/commons/csv/Lexer\n-  #173 = Class              #244          // java/lang/Character\n-  #174 = NameAndType        #245:#246     // charValue:()C\n-  #175 = NameAndType        #247:#137     // getLastChar:()I\n-  #176 = NameAndType        #242:#137     // read:()I\n-  #177 = NameAndType        #135:#118     // readEndOfLine:(I)Z\n-  #178 = NameAndType        #126:#118     // isStartOfLine:(I)Z\n-  #179 = NameAndType        #121:#118     // isEndOfFile:(I)Z\n-  #180 = Class              #248          // org/apache/commons/csv/Token$Type\n-  #181 = NameAndType        #251:#252     // EOF:Lorg/apache/commons/csv/Token$Type;\n-  #182 = Class              #253          // org/apache/commons/csv/Token\n-  #183 = NameAndType        #254:#252     // type:Lorg/apache/commons/csv/Token$Type;\n-  #184 = NameAndType        #117:#118     // isCommentStart:(I)Z\n-  #185 = NameAndType        #255:#114     // readLine:()Ljava/lang/String;\n-  #186 = NameAndType        #256:#114     // trim:()Ljava/lang/String;\n-  #187 = NameAndType        #257:#258     // content:Ljava/lang/StringBuilder;\n-  #188 = NameAndType        #259:#260     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #189 = NameAndType        #261:#252     // COMMENT:Lorg/apache/commons/csv/Token$Type;\n-  #190 = NameAndType        #262:#252     // INVALID:Lorg/apache/commons/csv/Token$Type;\n-  #191 = NameAndType        #263:#264     // isWhitespace:(C)Z\n-  #192 = NameAndType        #120:#118     // isDelimiter:(I)Z\n-  #193 = NameAndType        #265:#252     // TOKEN:Lorg/apache/commons/csv/Token$Type;\n-  #194 = NameAndType        #266:#252     // EORECORD:Lorg/apache/commons/csv/Token$Type;\n-  #195 = NameAndType        #125:#118     // isQuoteChar:(I)Z\n-  #196 = NameAndType        #132:#130     // parseEncapsulatedToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #197 = NameAndType        #267:#97      // isReady:Z\n-  #198 = NameAndType        #133:#134     // parseSimpleToken:(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n-  #199 = NameAndType        #268:#97      // isQuoted:Z\n-  #200 = NameAndType        #122:#118     // isEscape:(I)Z\n-  #201 = NameAndType        #123:#116     // isEscapeDelimiter:()Z\n-  #202 = NameAndType        #259:#269     // append:([C)Ljava/lang/StringBuilder;\n-  #203 = NameAndType        #136:#137     // readEscape:()I\n-  #204 = NameAndType        #259:#270     // append:(C)Ljava/lang/StringBuilder;\n-  #205 = NameAndType        #240:#137     // lookAhead:()I\n-  #206 = Utf8               java/io/IOException\n-  #207 = Utf8               java/lang/StringBuilder\n-  #208 = Utf8               (line\n-  #209 = NameAndType        #259:#271     // append:(J)Ljava/lang/StringBuilder;\n-  #210 = Utf8               ) invalid char between encapsulated token and delimiter\n-  #211 = NameAndType        #272:#114     // toString:()Ljava/lang/String;\n-  #212 = NameAndType        #103:#273     // \"<init>\":(Ljava/lang/String;)V\n-  #213 = Utf8               (startline\n-  #214 = Utf8               ) EOF reached before encapsulated token finished\n-  #215 = NameAndType        #138:#139     // trimTrailingSpaces:(Ljava/lang/StringBuilder;)V\n-  #216 = Utf8               \\r\\n\n-  #217 = NameAndType        #85:#84       // LF_STRING:Ljava/lang/String;\n-  #218 = NameAndType        #83:#84       // CR_STRING:Ljava/lang/String;\n-  #219 = Utf8               EOF whilst processing escape sequence\n-  #220 = NameAndType        #124:#118     // isMetaChar:(I)Z\n-  #221 = NameAndType        #274:#137     // length:()I\n-  #222 = NameAndType        #275:#276     // charAt:(I)C\n-  #223 = NameAndType        #277:#278     // setLength:(I)V\n-  #224 = NameAndType        #272:#279     // toString:(C)Ljava/lang/String;\n-  #225 = Utf8               java/lang/Object\n-  #226 = Utf8               java/io/Closeable\n-  #227 = Utf8               java/lang/String\n-  #228 = Utf8               org/apache/commons/csv/CSVFormat\n-  #229 = Utf8               getDelimiterString\n-  #230 = Utf8               toCharArray\n-  #231 = Utf8               ()[C\n-  #232 = Utf8               getEscapeCharacter\n-  #233 = Utf8               ()Ljava/lang/Character;\n-  #234 = Utf8               getQuoteCharacter\n-  #235 = Utf8               getCommentMarker\n-  #236 = Utf8               getIgnoreSurroundingSpaces\n-  #237 = Utf8               getIgnoreEmptyLines\n-  #238 = Utf8               org/apache/commons/csv/ExtendedBufferedReader\n-  #239 = Utf8               getPosition\n-  #240 = Utf8               lookAhead\n-  #241 = Utf8               ([C)[C\n-  #242 = Utf8               read\n-  #243 = Utf8               ([CII)I\n-  #244 = Utf8               java/lang/Character\n-  #245 = Utf8               charValue\n-  #246 = Utf8               ()C\n-  #247 = Utf8               getLastChar\n-  #248 = Utf8               org/apache/commons/csv/Token$Type\n-  #249 = Utf8               Type\n-  #250 = Utf8               InnerClasses\n-  #251 = Utf8               EOF\n-  #252 = Utf8               Lorg/apache/commons/csv/Token$Type;\n-  #253 = Utf8               org/apache/commons/csv/Token\n-  #254 = Utf8               type\n-  #255 = Utf8               readLine\n-  #256 = Utf8               trim\n-  #257 = Utf8               content\n-  #258 = Utf8               Ljava/lang/StringBuilder;\n-  #259 = Utf8               append\n-  #260 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #261 = Utf8               COMMENT\n-  #262 = Utf8               INVALID\n-  #263 = Utf8               isWhitespace\n-  #264 = Utf8               (C)Z\n-  #265 = Utf8               TOKEN\n-  #266 = Utf8               EORECORD\n-  #267 = Utf8               isReady\n-  #268 = Utf8               isQuoted\n-  #269 = Utf8               ([C)Ljava/lang/StringBuilder;\n-  #270 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #271 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #272 = Utf8               toString\n-  #273 = Utf8               (Ljava/lang/String;)V\n-  #274 = Utf8               length\n-  #275 = Utf8               charAt\n-  #276 = Utf8               (I)C\n-  #277 = Utf8               setLength\n-  #278 = Utf8               (I)V\n-  #279 = Utf8               (C)Ljava/lang/String;\n+    #1 = Class              #2            // org/apache/commons/csv/Constants\n+    #2 = Utf8               org/apache/commons/csv/Constants\n+    #3 = Methodref          #4.#5         // java/lang/Object.\"<init>\":()V\n+    #4 = Class              #6            // java/lang/Object\n+    #5 = NameAndType        #7:#8         // \"<init>\":()V\n+    #6 = Utf8               java/lang/Object\n+    #7 = Utf8               <init>\n+    #8 = Utf8               ()V\n+    #9 = Fieldref           #10.#11       // org/apache/commons/csv/Lexer.reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+   #10 = Class              #12           // org/apache/commons/csv/Lexer\n+   #11 = NameAndType        #13:#14       // reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+   #12 = Utf8               org/apache/commons/csv/Lexer\n+   #13 = Utf8               reader\n+   #14 = Utf8               Lorg/apache/commons/csv/ExtendedBufferedReader;\n+   #15 = Methodref          #16.#17       // org/apache/commons/csv/CSVFormat.getDelimiterString:()Ljava/lang/String;\n+   #16 = Class              #18           // org/apache/commons/csv/CSVFormat\n+   #17 = NameAndType        #19:#20       // getDelimiterString:()Ljava/lang/String;\n+   #18 = Utf8               org/apache/commons/csv/CSVFormat\n+   #19 = Utf8               getDelimiterString\n+   #20 = Utf8               ()Ljava/lang/String;\n+   #21 = Methodref          #22.#23       // java/lang/String.toCharArray:()[C\n+   #22 = Class              #24           // java/lang/String\n+   #23 = NameAndType        #25:#26       // toCharArray:()[C\n+   #24 = Utf8               java/lang/String\n+   #25 = Utf8               toCharArray\n+   #26 = Utf8               ()[C\n+   #27 = Fieldref           #10.#28       // org/apache/commons/csv/Lexer.delimiter:[C\n+   #28 = NameAndType        #29:#30       // delimiter:[C\n+   #29 = Utf8               delimiter\n+   #30 = Utf8               [C\n+   #31 = Methodref          #16.#32       // org/apache/commons/csv/CSVFormat.getEscapeCharacter:()Ljava/lang/Character;\n+   #32 = NameAndType        #33:#34       // getEscapeCharacter:()Ljava/lang/Character;\n+   #33 = Utf8               getEscapeCharacter\n+   #34 = Utf8               ()Ljava/lang/Character;\n+   #35 = Methodref          #10.#36       // org/apache/commons/csv/Lexer.mapNullToDisabled:(Ljava/lang/Character;)C\n+   #36 = NameAndType        #37:#38       // mapNullToDisabled:(Ljava/lang/Character;)C\n+   #37 = Utf8               mapNullToDisabled\n+   #38 = Utf8               (Ljava/lang/Character;)C\n+   #39 = Fieldref           #10.#40       // org/apache/commons/csv/Lexer.escape:C\n+   #40 = NameAndType        #41:#42       // escape:C\n+   #41 = Utf8               escape\n+   #42 = Utf8               C\n+   #43 = Methodref          #16.#44       // org/apache/commons/csv/CSVFormat.getQuoteCharacter:()Ljava/lang/Character;\n+   #44 = NameAndType        #45:#34       // getQuoteCharacter:()Ljava/lang/Character;\n+   #45 = Utf8               getQuoteCharacter\n+   #46 = Fieldref           #10.#47       // org/apache/commons/csv/Lexer.quoteChar:C\n+   #47 = NameAndType        #48:#42       // quoteChar:C\n+   #48 = Utf8               quoteChar\n+   #49 = Methodref          #16.#50       // org/apache/commons/csv/CSVFormat.getCommentMarker:()Ljava/lang/Character;\n+   #50 = NameAndType        #51:#34       // getCommentMarker:()Ljava/lang/Character;\n+   #51 = Utf8               getCommentMarker\n+   #52 = Fieldref           #10.#53       // org/apache/commons/csv/Lexer.commentStart:C\n+   #53 = NameAndType        #54:#42       // commentStart:C\n+   #54 = Utf8               commentStart\n+   #55 = Methodref          #16.#56       // org/apache/commons/csv/CSVFormat.getIgnoreSurroundingSpaces:()Z\n+   #56 = NameAndType        #57:#58       // getIgnoreSurroundingSpaces:()Z\n+   #57 = Utf8               getIgnoreSurroundingSpaces\n+   #58 = Utf8               ()Z\n+   #59 = Fieldref           #10.#60       // org/apache/commons/csv/Lexer.ignoreSurroundingSpaces:Z\n+   #60 = NameAndType        #61:#62       // ignoreSurroundingSpaces:Z\n+   #61 = Utf8               ignoreSurroundingSpaces\n+   #62 = Utf8               Z\n+   #63 = Methodref          #16.#64       // org/apache/commons/csv/CSVFormat.getIgnoreEmptyLines:()Z\n+   #64 = NameAndType        #65:#58       // getIgnoreEmptyLines:()Z\n+   #65 = Utf8               getIgnoreEmptyLines\n+   #66 = Fieldref           #10.#67       // org/apache/commons/csv/Lexer.ignoreEmptyLines:Z\n+   #67 = NameAndType        #68:#62       // ignoreEmptyLines:Z\n+   #68 = Utf8               ignoreEmptyLines\n+   #69 = Fieldref           #10.#70       // org/apache/commons/csv/Lexer.delimiterBuf:[C\n+   #70 = NameAndType        #71:#30       // delimiterBuf:[C\n+   #71 = Utf8               delimiterBuf\n+   #72 = Fieldref           #10.#73       // org/apache/commons/csv/Lexer.escapeDelimiterBuf:[C\n+   #73 = NameAndType        #74:#30       // escapeDelimiterBuf:[C\n+   #74 = Utf8               escapeDelimiterBuf\n+   #75 = Methodref          #76.#77       // org/apache/commons/csv/ExtendedBufferedReader.close:()V\n+   #76 = Class              #78           // org/apache/commons/csv/ExtendedBufferedReader\n+   #77 = NameAndType        #79:#8        // close:()V\n+   #78 = Utf8               org/apache/commons/csv/ExtendedBufferedReader\n+   #79 = Utf8               close\n+   #80 = Methodref          #76.#81       // org/apache/commons/csv/ExtendedBufferedReader.getPosition:()J\n+   #81 = NameAndType        #82:#83       // getPosition:()J\n+   #82 = Utf8               getPosition\n+   #83 = Utf8               ()J\n+   #84 = Methodref          #76.#85       // org/apache/commons/csv/ExtendedBufferedReader.getCurrentLineNumber:()J\n+   #85 = NameAndType        #86:#83       // getCurrentLineNumber:()J\n+   #86 = Utf8               getCurrentLineNumber\n+   #87 = Fieldref           #10.#88       // org/apache/commons/csv/Lexer.firstEol:Ljava/lang/String;\n+   #88 = NameAndType        #89:#90       // firstEol:Ljava/lang/String;\n+   #89 = Utf8               firstEol\n+   #90 = Utf8               Ljava/lang/String;\n+   #91 = Methodref          #76.#92       // org/apache/commons/csv/ExtendedBufferedReader.isClosed:()Z\n+   #92 = NameAndType        #93:#58       // isClosed:()Z\n+   #93 = Utf8               isClosed\n+   #94 = Fieldref           #10.#95       // org/apache/commons/csv/Lexer.isLastTokenDelimiter:Z\n+   #95 = NameAndType        #96:#62       // isLastTokenDelimiter:Z\n+   #96 = Utf8               isLastTokenDelimiter\n+   #97 = Methodref          #76.#98       // org/apache/commons/csv/ExtendedBufferedReader.lookAhead:([C)[C\n+   #98 = NameAndType        #99:#100      // lookAhead:([C)[C\n+   #99 = Utf8               lookAhead\n+  #100 = Utf8               ([C)[C\n+  #101 = Methodref          #76.#102      // org/apache/commons/csv/ExtendedBufferedReader.read:([CII)I\n+  #102 = NameAndType        #103:#104     // read:([CII)I\n+  #103 = Utf8               read\n+  #104 = Utf8               ([CII)I\n+  #105 = Integer            65534\n+  #106 = Methodref          #107.#108     // java/lang/Character.charValue:()C\n+  #107 = Class              #109          // java/lang/Character\n+  #108 = NameAndType        #110:#111     // charValue:()C\n+  #109 = Utf8               java/lang/Character\n+  #110 = Utf8               charValue\n+  #111 = Utf8               ()C\n+  #112 = Methodref          #76.#113      // org/apache/commons/csv/ExtendedBufferedReader.getLastChar:()I\n+  #113 = NameAndType        #114:#115     // getLastChar:()I\n+  #114 = Utf8               getLastChar\n+  #115 = Utf8               ()I\n+  #116 = Methodref          #76.#117      // org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+  #117 = NameAndType        #103:#115     // read:()I\n+  #118 = Methodref          #10.#119      // org/apache/commons/csv/Lexer.readEndOfLine:(I)Z\n+  #119 = NameAndType        #120:#121     // readEndOfLine:(I)Z\n+  #120 = Utf8               readEndOfLine\n+  #121 = Utf8               (I)Z\n+  #122 = Methodref          #10.#123      // org/apache/commons/csv/Lexer.isStartOfLine:(I)Z\n+  #123 = NameAndType        #124:#121     // isStartOfLine:(I)Z\n+  #124 = Utf8               isStartOfLine\n+  #125 = Methodref          #10.#126      // org/apache/commons/csv/Lexer.isEndOfFile:(I)Z\n+  #126 = NameAndType        #127:#121     // isEndOfFile:(I)Z\n+  #127 = Utf8               isEndOfFile\n+  #128 = Fieldref           #129.#130     // org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n+  #129 = Class              #131          // org/apache/commons/csv/Token$Type\n+  #130 = NameAndType        #132:#133     // EOF:Lorg/apache/commons/csv/Token$Type;\n+  #131 = Utf8               org/apache/commons/csv/Token$Type\n+  #132 = Utf8               EOF\n+  #133 = Utf8               Lorg/apache/commons/csv/Token$Type;\n+  #134 = Fieldref           #135.#136     // org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+  #135 = Class              #137          // org/apache/commons/csv/Token\n+  #136 = NameAndType        #138:#133     // type:Lorg/apache/commons/csv/Token$Type;\n+  #137 = Utf8               org/apache/commons/csv/Token\n+  #138 = Utf8               type\n+  #139 = Methodref          #10.#140      // org/apache/commons/csv/Lexer.isCommentStart:(I)Z\n+  #140 = NameAndType        #141:#121     // isCommentStart:(I)Z\n+  #141 = Utf8               isCommentStart\n+  #142 = Methodref          #76.#143      // org/apache/commons/csv/ExtendedBufferedReader.readLine:()Ljava/lang/String;\n+  #143 = NameAndType        #144:#20      // readLine:()Ljava/lang/String;\n+  #144 = Utf8               readLine\n+  #145 = Methodref          #22.#146      // java/lang/String.trim:()Ljava/lang/String;\n+  #146 = NameAndType        #147:#20      // trim:()Ljava/lang/String;\n+  #147 = Utf8               trim\n+  #148 = Fieldref           #135.#149     // org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+  #149 = NameAndType        #150:#151     // content:Ljava/lang/StringBuilder;\n+  #150 = Utf8               content\n+  #151 = Utf8               Ljava/lang/StringBuilder;\n+  #152 = Methodref          #153.#154     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #153 = Class              #155          // java/lang/StringBuilder\n+  #154 = NameAndType        #156:#157     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #155 = Utf8               java/lang/StringBuilder\n+  #156 = Utf8               append\n+  #157 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #158 = Fieldref           #129.#159     // org/apache/commons/csv/Token$Type.COMMENT:Lorg/apache/commons/csv/Token$Type;\n+  #159 = NameAndType        #160:#133     // COMMENT:Lorg/apache/commons/csv/Token$Type;\n+  #160 = Utf8               COMMENT\n+  #161 = Fieldref           #129.#162     // org/apache/commons/csv/Token$Type.INVALID:Lorg/apache/commons/csv/Token$Type;\n+  #162 = NameAndType        #163:#133     // INVALID:Lorg/apache/commons/csv/Token$Type;\n+  #163 = Utf8               INVALID\n+  #164 = Methodref          #107.#165     // java/lang/Character.isWhitespace:(C)Z\n+  #165 = NameAndType        #166:#167     // isWhitespace:(C)Z\n+  #166 = Utf8               isWhitespace\n+  #167 = Utf8               (C)Z\n+  #168 = Methodref          #10.#169      // org/apache/commons/csv/Lexer.isDelimiter:(I)Z\n+  #169 = NameAndType        #170:#121     // isDelimiter:(I)Z\n+  #170 = Utf8               isDelimiter\n+  #171 = Fieldref           #129.#172     // org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n+  #172 = NameAndType        #173:#133     // TOKEN:Lorg/apache/commons/csv/Token$Type;\n+  #173 = Utf8               TOKEN\n+  #174 = Fieldref           #129.#175     // org/apache/commons/csv/Token$Type.EORECORD:Lorg/apache/commons/csv/Token$Type;\n+  #175 = NameAndType        #176:#133     // EORECORD:Lorg/apache/commons/csv/Token$Type;\n+  #176 = Utf8               EORECORD\n+  #177 = Methodref          #10.#178      // org/apache/commons/csv/Lexer.isQuoteChar:(I)Z\n+  #178 = NameAndType        #179:#121     // isQuoteChar:(I)Z\n+  #179 = Utf8               isQuoteChar\n+  #180 = Methodref          #10.#181      // org/apache/commons/csv/Lexer.parseEncapsulatedToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #181 = NameAndType        #182:#183     // parseEncapsulatedToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #182 = Utf8               parseEncapsulatedToken\n+  #183 = Utf8               (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #184 = Fieldref           #135.#185     // org/apache/commons/csv/Token.isReady:Z\n+  #185 = NameAndType        #186:#62      // isReady:Z\n+  #186 = Utf8               isReady\n+  #187 = Methodref          #10.#188      // org/apache/commons/csv/Lexer.parseSimpleToken:(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n+  #188 = NameAndType        #189:#190     // parseSimpleToken:(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n+  #189 = Utf8               parseSimpleToken\n+  #190 = Utf8               (Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n+  #191 = Fieldref           #135.#192     // org/apache/commons/csv/Token.isQuoted:Z\n+  #192 = NameAndType        #193:#62      // isQuoted:Z\n+  #193 = Utf8               isQuoted\n+  #194 = Methodref          #10.#85       // org/apache/commons/csv/Lexer.getCurrentLineNumber:()J\n+  #195 = Methodref          #10.#196      // org/apache/commons/csv/Lexer.isEscape:(I)Z\n+  #196 = NameAndType        #197:#121     // isEscape:(I)Z\n+  #197 = Utf8               isEscape\n+  #198 = Methodref          #10.#199      // org/apache/commons/csv/Lexer.isEscapeDelimiter:()Z\n+  #199 = NameAndType        #200:#58      // isEscapeDelimiter:()Z\n+  #200 = Utf8               isEscapeDelimiter\n+  #201 = Methodref          #153.#202     // java/lang/StringBuilder.append:([C)Ljava/lang/StringBuilder;\n+  #202 = NameAndType        #156:#203     // append:([C)Ljava/lang/StringBuilder;\n+  #203 = Utf8               ([C)Ljava/lang/StringBuilder;\n+  #204 = Methodref          #10.#205      // org/apache/commons/csv/Lexer.readEscape:()I\n+  #205 = NameAndType        #206:#115     // readEscape:()I\n+  #206 = Utf8               readEscape\n+  #207 = Methodref          #153.#208     // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+  #208 = NameAndType        #156:#209     // append:(C)Ljava/lang/StringBuilder;\n+  #209 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #210 = Methodref          #76.#211      // org/apache/commons/csv/ExtendedBufferedReader.lookAhead:()I\n+  #211 = NameAndType        #99:#115      // lookAhead:()I\n+  #212 = Class              #213          // java/io/IOException\n+  #213 = Utf8               java/io/IOException\n+  #214 = Methodref          #153.#5       // java/lang/StringBuilder.\"<init>\":()V\n+  #215 = String             #216          // (line\n+  #216 = Utf8               (line\n+  #217 = Methodref          #153.#218     // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+  #218 = NameAndType        #156:#219     // append:(J)Ljava/lang/StringBuilder;\n+  #219 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #220 = String             #221          // ) invalid char between encapsulated token and delimiter\n+  #221 = Utf8               ) invalid char between encapsulated token and delimiter\n+  #222 = Methodref          #153.#223     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #223 = NameAndType        #224:#20      // toString:()Ljava/lang/String;\n+  #224 = Utf8               toString\n+  #225 = Methodref          #212.#226     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #226 = NameAndType        #7:#227       // \"<init>\":(Ljava/lang/String;)V\n+  #227 = Utf8               (Ljava/lang/String;)V\n+  #228 = String             #229          // (startline\n+  #229 = Utf8               (startline\n+  #230 = String             #231          // ) EOF reached before encapsulated token finished\n+  #231 = Utf8               ) EOF reached before encapsulated token finished\n+  #232 = Methodref          #10.#233      // org/apache/commons/csv/Lexer.trimTrailingSpaces:(Ljava/lang/StringBuilder;)V\n+  #233 = NameAndType        #234:#235     // trimTrailingSpaces:(Ljava/lang/StringBuilder;)V\n+  #234 = Utf8               trimTrailingSpaces\n+  #235 = Utf8               (Ljava/lang/StringBuilder;)V\n+  #236 = String             #237          // \\r\\n\n+  #237 = Utf8               \\r\\n\n+  #238 = Fieldref           #10.#239      // org/apache/commons/csv/Lexer.LF_STRING:Ljava/lang/String;\n+  #239 = NameAndType        #240:#90      // LF_STRING:Ljava/lang/String;\n+  #240 = Utf8               LF_STRING\n+  #241 = Fieldref           #10.#242      // org/apache/commons/csv/Lexer.CR_STRING:Ljava/lang/String;\n+  #242 = NameAndType        #243:#90      // CR_STRING:Ljava/lang/String;\n+  #243 = Utf8               CR_STRING\n+  #244 = String             #245          // EOF whilst processing escape sequence\n+  #245 = Utf8               EOF whilst processing escape sequence\n+  #246 = Methodref          #10.#247      // org/apache/commons/csv/Lexer.isMetaChar:(I)Z\n+  #247 = NameAndType        #248:#121     // isMetaChar:(I)Z\n+  #248 = Utf8               isMetaChar\n+  #249 = Methodref          #153.#250     // java/lang/StringBuilder.length:()I\n+  #250 = NameAndType        #251:#115     // length:()I\n+  #251 = Utf8               length\n+  #252 = Methodref          #153.#253     // java/lang/StringBuilder.charAt:(I)C\n+  #253 = NameAndType        #254:#255     // charAt:(I)C\n+  #254 = Utf8               charAt\n+  #255 = Utf8               (I)C\n+  #256 = Methodref          #153.#257     // java/lang/StringBuilder.setLength:(I)V\n+  #257 = NameAndType        #258:#259     // setLength:(I)V\n+  #258 = Utf8               setLength\n+  #259 = Utf8               (I)V\n+  #260 = Methodref          #107.#261     // java/lang/Character.toString:(C)Ljava/lang/String;\n+  #261 = NameAndType        #224:#262     // toString:(C)Ljava/lang/String;\n+  #262 = Utf8               (C)Ljava/lang/String;\n+  #263 = Class              #264          // java/io/Closeable\n+  #264 = Utf8               java/io/Closeable\n+  #265 = Utf8               DISABLED\n+  #266 = Utf8               ConstantValue\n+  #267 = Utf8               (Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+  #268 = Utf8               Code\n+  #269 = Utf8               LineNumberTable\n+  #270 = Utf8               Exceptions\n+  #271 = Utf8               getCharacterPosition\n+  #272 = Utf8               getFirstEol\n+  #273 = Utf8               StackMapTable\n+  #274 = Utf8               nextToken\n+  #275 = Utf8               <clinit>\n+  #276 = Utf8               SourceFile\n+  #277 = Utf8               Lexer.java\n+  #278 = Utf8               InnerClasses\n+  #279 = Utf8               Type\n {\n   private static final java.lang.String CR_STRING;\n     descriptor: Ljava/lang/String;\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   private static final java.lang.String LF_STRING;\n     descriptor: Ljava/lang/String;\n@@ -347,67 +347,67 @@\n \n   org.apache.commons.csv.Lexer(org.apache.commons.csv.CSVFormat, org.apache.commons.csv.ExtendedBufferedReader);\n     descriptor: (Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n     flags: (0x0000)\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #3                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: aload_2\n-         6: putfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+         6: putfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n          9: aload_0\n         10: aload_1\n-        11: invokevirtual #4                  // Method org/apache/commons/csv/CSVFormat.getDelimiterString:()Ljava/lang/String;\n-        14: invokevirtual #5                  // Method java/lang/String.toCharArray:()[C\n-        17: putfield      #6                  // Field delimiter:[C\n+        11: invokevirtual #15                 // Method org/apache/commons/csv/CSVFormat.getDelimiterString:()Ljava/lang/String;\n+        14: invokevirtual #21                 // Method java/lang/String.toCharArray:()[C\n+        17: putfield      #27                 // Field delimiter:[C\n         20: aload_0\n         21: aload_0\n         22: aload_1\n-        23: invokevirtual #7                  // Method org/apache/commons/csv/CSVFormat.getEscapeCharacter:()Ljava/lang/Character;\n-        26: invokespecial #8                  // Method mapNullToDisabled:(Ljava/lang/Character;)C\n-        29: putfield      #9                  // Field escape:C\n+        23: invokevirtual #31                 // Method org/apache/commons/csv/CSVFormat.getEscapeCharacter:()Ljava/lang/Character;\n+        26: invokespecial #35                 // Method mapNullToDisabled:(Ljava/lang/Character;)C\n+        29: putfield      #39                 // Field escape:C\n         32: aload_0\n         33: aload_0\n         34: aload_1\n-        35: invokevirtual #10                 // Method org/apache/commons/csv/CSVFormat.getQuoteCharacter:()Ljava/lang/Character;\n-        38: invokespecial #8                  // Method mapNullToDisabled:(Ljava/lang/Character;)C\n-        41: putfield      #11                 // Field quoteChar:C\n+        35: invokevirtual #43                 // Method org/apache/commons/csv/CSVFormat.getQuoteCharacter:()Ljava/lang/Character;\n+        38: invokespecial #35                 // Method mapNullToDisabled:(Ljava/lang/Character;)C\n+        41: putfield      #46                 // Field quoteChar:C\n         44: aload_0\n         45: aload_0\n         46: aload_1\n-        47: invokevirtual #12                 // Method org/apache/commons/csv/CSVFormat.getCommentMarker:()Ljava/lang/Character;\n-        50: invokespecial #8                  // Method mapNullToDisabled:(Ljava/lang/Character;)C\n-        53: putfield      #13                 // Field commentStart:C\n+        47: invokevirtual #49                 // Method org/apache/commons/csv/CSVFormat.getCommentMarker:()Ljava/lang/Character;\n+        50: invokespecial #35                 // Method mapNullToDisabled:(Ljava/lang/Character;)C\n+        53: putfield      #52                 // Field commentStart:C\n         56: aload_0\n         57: aload_1\n-        58: invokevirtual #14                 // Method org/apache/commons/csv/CSVFormat.getIgnoreSurroundingSpaces:()Z\n-        61: putfield      #15                 // Field ignoreSurroundingSpaces:Z\n+        58: invokevirtual #55                 // Method org/apache/commons/csv/CSVFormat.getIgnoreSurroundingSpaces:()Z\n+        61: putfield      #59                 // Field ignoreSurroundingSpaces:Z\n         64: aload_0\n         65: aload_1\n-        66: invokevirtual #16                 // Method org/apache/commons/csv/CSVFormat.getIgnoreEmptyLines:()Z\n-        69: putfield      #17                 // Field ignoreEmptyLines:Z\n+        66: invokevirtual #63                 // Method org/apache/commons/csv/CSVFormat.getIgnoreEmptyLines:()Z\n+        69: putfield      #66                 // Field ignoreEmptyLines:Z\n         72: aload_0\n         73: aload_0\n-        74: getfield      #6                  // Field delimiter:[C\n+        74: getfield      #27                 // Field delimiter:[C\n         77: arraylength\n         78: iconst_1\n         79: isub\n         80: newarray       char\n-        82: putfield      #18                 // Field delimiterBuf:[C\n+        82: putfield      #69                 // Field delimiterBuf:[C\n         85: aload_0\n         86: iconst_2\n         87: aload_0\n-        88: getfield      #6                  // Field delimiter:[C\n+        88: getfield      #27                 // Field delimiter:[C\n         91: arraylength\n         92: imul\n         93: iconst_1\n         94: isub\n         95: newarray       char\n-        97: putfield      #19                 // Field escapeDelimiterBuf:[C\n+        97: putfield      #72                 // Field escapeDelimiterBuf:[C\n        100: return\n       LineNumberTable:\n         line 67: 0\n         line 68: 4\n         line 69: 9\n         line 70: 20\n         line 71: 32\n@@ -420,78 +420,78 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-         4: invokevirtual #20                 // Method org/apache/commons/csv/ExtendedBufferedReader.close:()V\n+         1: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+         4: invokevirtual #75                 // Method org/apache/commons/csv/ExtendedBufferedReader.close:()V\n          7: return\n       LineNumberTable:\n         line 87: 0\n         line 88: 7\n     Exceptions:\n       throws java.io.IOException\n \n   long getCharacterPosition();\n     descriptor: ()J\n     flags: (0x0000)\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-         4: invokevirtual #21                 // Method org/apache/commons/csv/ExtendedBufferedReader.getPosition:()J\n+         1: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+         4: invokevirtual #80                 // Method org/apache/commons/csv/ExtendedBufferedReader.getPosition:()J\n          7: lreturn\n       LineNumberTable:\n         line 96: 0\n \n   long getCurrentLineNumber();\n     descriptor: ()J\n     flags: (0x0000)\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-         4: invokevirtual #22                 // Method org/apache/commons/csv/ExtendedBufferedReader.getCurrentLineNumber:()J\n+         1: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+         4: invokevirtual #84                 // Method org/apache/commons/csv/ExtendedBufferedReader.getCurrentLineNumber:()J\n          7: lreturn\n       LineNumberTable:\n         line 105: 0\n \n   java.lang.String getFirstEol();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0000)\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #23                 // Field firstEol:Ljava/lang/String;\n+         1: getfield      #87                 // Field firstEol:Ljava/lang/String;\n          4: areturn\n       LineNumberTable:\n         line 109: 0\n \n   boolean isClosed();\n     descriptor: ()Z\n     flags: (0x0000)\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-         4: invokevirtual #24                 // Method org/apache/commons/csv/ExtendedBufferedReader.isClosed:()Z\n+         1: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+         4: invokevirtual #91                 // Method org/apache/commons/csv/ExtendedBufferedReader.isClosed:()Z\n          7: ireturn\n       LineNumberTable:\n         line 113: 0\n \n   boolean isCommentStart(int);\n     descriptor: (I)Z\n     flags: (0x0000)\n     Code:\n       stack=2, locals=2, args_size=2\n          0: iload_1\n          1: aload_0\n-         2: getfield      #13                 // Field commentStart:C\n+         2: getfield      #52                 // Field commentStart:C\n          5: if_icmpne     12\n          8: iconst_1\n          9: goto          13\n         12: iconst_0\n         13: ireturn\n       LineNumberTable:\n         line 117: 0\n@@ -503,81 +503,81 @@\n   boolean isDelimiter(int) throws java.io.IOException;\n     descriptor: (I)Z\n     flags: (0x0000)\n     Code:\n       stack=4, locals=3, args_size=2\n          0: aload_0\n          1: iconst_0\n-         2: putfield      #25                 // Field isLastTokenDelimiter:Z\n+         2: putfield      #94                 // Field isLastTokenDelimiter:Z\n          5: iload_1\n          6: aload_0\n-         7: getfield      #6                  // Field delimiter:[C\n+         7: getfield      #27                 // Field delimiter:[C\n         10: iconst_0\n         11: caload\n         12: if_icmpeq     17\n         15: iconst_0\n         16: ireturn\n         17: aload_0\n-        18: getfield      #6                  // Field delimiter:[C\n+        18: getfield      #27                 // Field delimiter:[C\n         21: arraylength\n         22: iconst_1\n         23: if_icmpne     33\n         26: aload_0\n         27: iconst_1\n-        28: putfield      #25                 // Field isLastTokenDelimiter:Z\n+        28: putfield      #94                 // Field isLastTokenDelimiter:Z\n         31: iconst_1\n         32: ireturn\n         33: aload_0\n-        34: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        34: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n         37: aload_0\n-        38: getfield      #18                 // Field delimiterBuf:[C\n-        41: invokevirtual #26                 // Method org/apache/commons/csv/ExtendedBufferedReader.lookAhead:([C)[C\n+        38: getfield      #69                 // Field delimiterBuf:[C\n+        41: invokevirtual #97                 // Method org/apache/commons/csv/ExtendedBufferedReader.lookAhead:([C)[C\n         44: pop\n         45: iconst_0\n         46: istore_2\n         47: iload_2\n         48: aload_0\n-        49: getfield      #18                 // Field delimiterBuf:[C\n+        49: getfield      #69                 // Field delimiterBuf:[C\n         52: arraylength\n         53: if_icmpge     81\n         56: aload_0\n-        57: getfield      #18                 // Field delimiterBuf:[C\n+        57: getfield      #69                 // Field delimiterBuf:[C\n         60: iload_2\n         61: caload\n         62: aload_0\n-        63: getfield      #6                  // Field delimiter:[C\n+        63: getfield      #27                 // Field delimiter:[C\n         66: iload_2\n         67: iconst_1\n         68: iadd\n         69: caload\n         70: if_icmpeq     75\n         73: iconst_0\n         74: ireturn\n         75: iinc          2, 1\n         78: goto          47\n         81: aload_0\n-        82: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        82: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n         85: aload_0\n-        86: getfield      #18                 // Field delimiterBuf:[C\n+        86: getfield      #69                 // Field delimiterBuf:[C\n         89: iconst_0\n         90: aload_0\n-        91: getfield      #18                 // Field delimiterBuf:[C\n+        91: getfield      #69                 // Field delimiterBuf:[C\n         94: arraylength\n-        95: invokevirtual #27                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:([CII)I\n+        95: invokevirtual #101                // Method org/apache/commons/csv/ExtendedBufferedReader.read:([CII)I\n         98: istore_2\n         99: aload_0\n        100: iload_2\n        101: iconst_m1\n        102: if_icmpeq     109\n        105: iconst_1\n        106: goto          110\n        109: iconst_0\n-       110: putfield      #25                 // Field isLastTokenDelimiter:Z\n+       110: putfield      #94                 // Field isLastTokenDelimiter:Z\n        113: aload_0\n-       114: getfield      #25                 // Field isLastTokenDelimiter:Z\n+       114: getfield      #94                 // Field isLastTokenDelimiter:Z\n        117: ireturn\n       LineNumberTable:\n         line 129: 0\n         line 130: 5\n         line 131: 15\n         line 133: 17\n         line 134: 26\n@@ -632,15 +632,15 @@\n   boolean isEscape(int);\n     descriptor: (I)Z\n     flags: (0x0000)\n     Code:\n       stack=2, locals=2, args_size=2\n          0: iload_1\n          1: aload_0\n-         2: getfield      #9                  // Field escape:C\n+         2: getfield      #39                 // Field escape:C\n          5: if_icmpne     12\n          8: iconst_1\n          9: goto          13\n         12: iconst_0\n         13: ireturn\n       LineNumberTable:\n         line 163: 0\n@@ -651,72 +651,72 @@\n \n   boolean isEscapeDelimiter() throws java.io.IOException;\n     descriptor: ()Z\n     flags: (0x0000)\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+         1: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n          4: aload_0\n-         5: getfield      #19                 // Field escapeDelimiterBuf:[C\n-         8: invokevirtual #26                 // Method org/apache/commons/csv/ExtendedBufferedReader.lookAhead:([C)[C\n+         5: getfield      #72                 // Field escapeDelimiterBuf:[C\n+         8: invokevirtual #97                 // Method org/apache/commons/csv/ExtendedBufferedReader.lookAhead:([C)[C\n         11: pop\n         12: aload_0\n-        13: getfield      #19                 // Field escapeDelimiterBuf:[C\n+        13: getfield      #72                 // Field escapeDelimiterBuf:[C\n         16: iconst_0\n         17: caload\n         18: aload_0\n-        19: getfield      #6                  // Field delimiter:[C\n+        19: getfield      #27                 // Field delimiter:[C\n         22: iconst_0\n         23: caload\n         24: if_icmpeq     29\n         27: iconst_0\n         28: ireturn\n         29: iconst_1\n         30: istore_1\n         31: iload_1\n         32: aload_0\n-        33: getfield      #6                  // Field delimiter:[C\n+        33: getfield      #27                 // Field delimiter:[C\n         36: arraylength\n         37: if_icmpge     82\n         40: aload_0\n-        41: getfield      #19                 // Field escapeDelimiterBuf:[C\n+        41: getfield      #72                 // Field escapeDelimiterBuf:[C\n         44: iconst_2\n         45: iload_1\n         46: imul\n         47: caload\n         48: aload_0\n-        49: getfield      #6                  // Field delimiter:[C\n+        49: getfield      #27                 // Field delimiter:[C\n         52: iload_1\n         53: caload\n         54: if_icmpne     74\n         57: aload_0\n-        58: getfield      #19                 // Field escapeDelimiterBuf:[C\n+        58: getfield      #72                 // Field escapeDelimiterBuf:[C\n         61: iconst_2\n         62: iload_1\n         63: imul\n         64: iconst_1\n         65: isub\n         66: caload\n         67: aload_0\n-        68: getfield      #9                  // Field escape:C\n+        68: getfield      #39                 // Field escape:C\n         71: if_icmpeq     76\n         74: iconst_0\n         75: ireturn\n         76: iinc          1, 1\n         79: goto          31\n         82: aload_0\n-        83: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        83: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n         86: aload_0\n-        87: getfield      #19                 // Field escapeDelimiterBuf:[C\n+        87: getfield      #72                 // Field escapeDelimiterBuf:[C\n         90: iconst_0\n         91: aload_0\n-        92: getfield      #19                 // Field escapeDelimiterBuf:[C\n+        92: getfield      #72                 // Field escapeDelimiterBuf:[C\n         95: arraylength\n-        96: invokevirtual #27                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:([CII)I\n+        96: invokevirtual #101                // Method org/apache/commons/csv/ExtendedBufferedReader.read:([CII)I\n         99: istore_1\n        100: iload_1\n        101: iconst_m1\n        102: if_icmpeq     109\n        105: iconst_1\n        106: goto          110\n        109: iconst_0\n@@ -751,23 +751,23 @@\n   private boolean isMetaChar(int);\n     descriptor: (I)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: iload_1\n          1: aload_0\n-         2: getfield      #9                  // Field escape:C\n+         2: getfield      #39                 // Field escape:C\n          5: if_icmpeq     24\n          8: iload_1\n          9: aload_0\n-        10: getfield      #11                 // Field quoteChar:C\n+        10: getfield      #46                 // Field quoteChar:C\n         13: if_icmpeq     24\n         16: iload_1\n         17: aload_0\n-        18: getfield      #13                 // Field commentStart:C\n+        18: getfield      #52                 // Field commentStart:C\n         21: if_icmpne     28\n         24: iconst_1\n         25: goto          29\n         28: iconst_0\n         29: ireturn\n       LineNumberTable:\n         line 189: 0\n@@ -780,15 +780,15 @@\n   boolean isQuoteChar(int);\n     descriptor: (I)Z\n     flags: (0x0000)\n     Code:\n       stack=2, locals=2, args_size=2\n          0: iload_1\n          1: aload_0\n-         2: getfield      #11                 // Field quoteChar:C\n+         2: getfield      #46                 // Field quoteChar:C\n          5: if_icmpne     12\n          8: iconst_1\n          9: goto          13\n         12: iconst_0\n         13: ireturn\n       LineNumberTable:\n         line 193: 0\n@@ -826,183 +826,183 @@\n   private char mapNullToDisabled(java.lang.Character);\n     descriptor: (Ljava/lang/Character;)C\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=2, args_size=2\n          0: aload_1\n          1: ifnonnull     9\n-         4: ldc           #29                 // int 65534\n+         4: ldc           #105                // int 65534\n          6: goto          13\n          9: aload_1\n-        10: invokevirtual #30                 // Method java/lang/Character.charValue:()C\n+        10: invokevirtual #106                // Method java/lang/Character.charValue:()C\n         13: ireturn\n       LineNumberTable:\n         line 207: 0\n       StackMapTable: number_of_entries = 2\n         frame_type = 9 /* same */\n         frame_type = 67 /* same_locals_1_stack_item */\n           stack = [ int ]\n \n   org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n     flags: (0x0000)\n     Code:\n       stack=3, locals=7, args_size=2\n          0: aload_0\n-         1: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-         4: invokevirtual #31                 // Method org/apache/commons/csv/ExtendedBufferedReader.getLastChar:()I\n+         1: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+         4: invokevirtual #112                // Method org/apache/commons/csv/ExtendedBufferedReader.getLastChar:()I\n          7: istore_2\n          8: aload_0\n-         9: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-        12: invokevirtual #32                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+         9: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        12: invokevirtual #116                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n         15: istore_3\n         16: aload_0\n         17: iload_3\n-        18: invokevirtual #33                 // Method readEndOfLine:(I)Z\n+        18: invokevirtual #118                // Method readEndOfLine:(I)Z\n         21: istore        4\n         23: aload_0\n-        24: getfield      #17                 // Field ignoreEmptyLines:Z\n+        24: getfield      #66                 // Field ignoreEmptyLines:Z\n         27: ifeq          77\n         30: iload         4\n         32: ifeq          77\n         35: aload_0\n         36: iload_2\n-        37: invokevirtual #34                 // Method isStartOfLine:(I)Z\n+        37: invokevirtual #122                // Method isStartOfLine:(I)Z\n         40: ifeq          77\n         43: iload_3\n         44: istore_2\n         45: aload_0\n-        46: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-        49: invokevirtual #32                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+        46: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        49: invokevirtual #116                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n         52: istore_3\n         53: aload_0\n         54: iload_3\n-        55: invokevirtual #33                 // Method readEndOfLine:(I)Z\n+        55: invokevirtual #118                // Method readEndOfLine:(I)Z\n         58: istore        4\n         60: aload_0\n         61: iload_3\n-        62: invokevirtual #35                 // Method isEndOfFile:(I)Z\n+        62: invokevirtual #125                // Method isEndOfFile:(I)Z\n         65: ifeq          30\n         68: aload_1\n-        69: getstatic     #36                 // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n-        72: putfield      #37                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+        69: getstatic     #128                // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n+        72: putfield      #134                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n         75: aload_1\n         76: areturn\n         77: aload_0\n         78: iload_2\n-        79: invokevirtual #35                 // Method isEndOfFile:(I)Z\n+        79: invokevirtual #125                // Method isEndOfFile:(I)Z\n         82: ifne          100\n         85: aload_0\n-        86: getfield      #25                 // Field isLastTokenDelimiter:Z\n+        86: getfield      #94                 // Field isLastTokenDelimiter:Z\n         89: ifne          109\n         92: aload_0\n         93: iload_3\n-        94: invokevirtual #35                 // Method isEndOfFile:(I)Z\n+        94: invokevirtual #125                // Method isEndOfFile:(I)Z\n         97: ifeq          109\n        100: aload_1\n-       101: getstatic     #36                 // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n-       104: putfield      #37                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       101: getstatic     #128                // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n+       104: putfield      #134                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        107: aload_1\n        108: areturn\n        109: aload_0\n        110: iload_2\n-       111: invokevirtual #34                 // Method isStartOfLine:(I)Z\n+       111: invokevirtual #122                // Method isStartOfLine:(I)Z\n        114: ifeq          174\n        117: aload_0\n        118: iload_3\n-       119: invokevirtual #38                 // Method isCommentStart:(I)Z\n+       119: invokevirtual #139                // Method isCommentStart:(I)Z\n        122: ifeq          174\n        125: aload_0\n-       126: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-       129: invokevirtual #39                 // Method org/apache/commons/csv/ExtendedBufferedReader.readLine:()Ljava/lang/String;\n+       126: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+       129: invokevirtual #142                // Method org/apache/commons/csv/ExtendedBufferedReader.readLine:()Ljava/lang/String;\n        132: astore        5\n        134: aload         5\n        136: ifnonnull     148\n        139: aload_1\n-       140: getstatic     #36                 // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n-       143: putfield      #37                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       140: getstatic     #128                // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n+       143: putfield      #134                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        146: aload_1\n        147: areturn\n        148: aload         5\n-       150: invokevirtual #40                 // Method java/lang/String.trim:()Ljava/lang/String;\n+       150: invokevirtual #145                // Method java/lang/String.trim:()Ljava/lang/String;\n        153: astore        6\n        155: aload_1\n-       156: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+       156: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n        159: aload         6\n-       161: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       161: invokevirtual #152                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        164: pop\n        165: aload_1\n-       166: getstatic     #43                 // Field org/apache/commons/csv/Token$Type.COMMENT:Lorg/apache/commons/csv/Token$Type;\n-       169: putfield      #37                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       166: getstatic     #158                // Field org/apache/commons/csv/Token$Type.COMMENT:Lorg/apache/commons/csv/Token$Type;\n+       169: putfield      #134                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        172: aload_1\n        173: areturn\n        174: aload_1\n-       175: getfield      #37                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n-       178: getstatic     #44                 // Field org/apache/commons/csv/Token$Type.INVALID:Lorg/apache/commons/csv/Token$Type;\n+       175: getfield      #134                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       178: getstatic     #161                // Field org/apache/commons/csv/Token$Type.INVALID:Lorg/apache/commons/csv/Token$Type;\n        181: if_acmpne     313\n        184: aload_0\n-       185: getfield      #15                 // Field ignoreSurroundingSpaces:Z\n+       185: getfield      #59                 // Field ignoreSurroundingSpaces:Z\n        188: ifeq          230\n        191: iload_3\n        192: i2c\n-       193: invokestatic  #45                 // Method java/lang/Character.isWhitespace:(C)Z\n+       193: invokestatic  #164                // Method java/lang/Character.isWhitespace:(C)Z\n        196: ifeq          230\n        199: aload_0\n        200: iload_3\n-       201: invokevirtual #46                 // Method isDelimiter:(I)Z\n+       201: invokevirtual #168                // Method isDelimiter:(I)Z\n        204: ifne          230\n        207: iload         4\n        209: ifne          230\n        212: aload_0\n-       213: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-       216: invokevirtual #32                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+       213: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+       216: invokevirtual #116                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n        219: istore_3\n        220: aload_0\n        221: iload_3\n-       222: invokevirtual #33                 // Method readEndOfLine:(I)Z\n+       222: invokevirtual #118                // Method readEndOfLine:(I)Z\n        225: istore        4\n        227: goto          191\n        230: aload_0\n        231: iload_3\n-       232: invokevirtual #46                 // Method isDelimiter:(I)Z\n+       232: invokevirtual #168                // Method isDelimiter:(I)Z\n        235: ifeq          248\n        238: aload_1\n-       239: getstatic     #47                 // Field org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n-       242: putfield      #37                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       239: getstatic     #171                // Field org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n+       242: putfield      #134                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        245: goto          174\n        248: iload         4\n        250: ifeq          263\n        253: aload_1\n-       254: getstatic     #48                 // Field org/apache/commons/csv/Token$Type.EORECORD:Lorg/apache/commons/csv/Token$Type;\n-       257: putfield      #37                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       254: getstatic     #174                // Field org/apache/commons/csv/Token$Type.EORECORD:Lorg/apache/commons/csv/Token$Type;\n+       257: putfield      #134                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        260: goto          174\n        263: aload_0\n        264: iload_3\n-       265: invokevirtual #49                 // Method isQuoteChar:(I)Z\n+       265: invokevirtual #177                // Method isQuoteChar:(I)Z\n        268: ifeq          280\n        271: aload_0\n        272: aload_1\n-       273: invokespecial #50                 // Method parseEncapsulatedToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+       273: invokespecial #180                // Method parseEncapsulatedToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n        276: pop\n        277: goto          174\n        280: aload_0\n        281: iload_3\n-       282: invokevirtual #35                 // Method isEndOfFile:(I)Z\n+       282: invokevirtual #125                // Method isEndOfFile:(I)Z\n        285: ifeq          303\n        288: aload_1\n-       289: getstatic     #36                 // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n-       292: putfield      #37                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       289: getstatic     #128                // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n+       292: putfield      #134                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        295: aload_1\n        296: iconst_1\n-       297: putfield      #51                 // Field org/apache/commons/csv/Token.isReady:Z\n+       297: putfield      #184                // Field org/apache/commons/csv/Token.isReady:Z\n        300: goto          174\n        303: aload_0\n        304: aload_1\n        305: iload_3\n-       306: invokespecial #52                 // Method parseSimpleToken:(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n+       306: invokespecial #187                // Method parseSimpleToken:(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n        309: pop\n        310: goto          174\n        313: aload_1\n        314: areturn\n       LineNumberTable:\n         line 224: 0\n         line 227: 8\n@@ -1068,158 +1068,158 @@\n   private org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=6, args_size=2\n          0: aload_1\n          1: iconst_1\n-         2: putfield      #53                 // Field org/apache/commons/csv/Token.isQuoted:Z\n+         2: putfield      #191                // Field org/apache/commons/csv/Token.isQuoted:Z\n          5: aload_0\n-         6: invokevirtual #54                 // Method getCurrentLineNumber:()J\n+         6: invokevirtual #194                // Method getCurrentLineNumber:()J\n          9: lstore_2\n         10: aload_0\n-        11: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-        14: invokevirtual #32                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+        11: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        14: invokevirtual #116                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n         17: istore        4\n         19: aload_0\n         20: iload         4\n-        22: invokevirtual #55                 // Method isEscape:(I)Z\n+        22: invokevirtual #195                // Method isEscape:(I)Z\n         25: ifeq          101\n         28: aload_0\n-        29: invokevirtual #56                 // Method isEscapeDelimiter:()Z\n+        29: invokevirtual #198                // Method isEscapeDelimiter:()Z\n         32: ifeq          50\n         35: aload_1\n-        36: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+        36: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n         39: aload_0\n-        40: getfield      #6                  // Field delimiter:[C\n-        43: invokevirtual #57                 // Method java/lang/StringBuilder.append:([C)Ljava/lang/StringBuilder;\n+        40: getfield      #27                 // Field delimiter:[C\n+        43: invokevirtual #201                // Method java/lang/StringBuilder.append:([C)Ljava/lang/StringBuilder;\n         46: pop\n         47: goto          10\n         50: aload_0\n-        51: invokevirtual #58                 // Method readEscape:()I\n+        51: invokevirtual #204                // Method readEscape:()I\n         54: istore        5\n         56: iload         5\n         58: iconst_m1\n         59: if_icmpne     87\n         62: aload_1\n-        63: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+        63: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n         66: iload         4\n         68: i2c\n-        69: invokevirtual #59                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+        69: invokevirtual #207                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n         72: aload_0\n-        73: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-        76: invokevirtual #31                 // Method org/apache/commons/csv/ExtendedBufferedReader.getLastChar:()I\n+        73: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        76: invokevirtual #112                // Method org/apache/commons/csv/ExtendedBufferedReader.getLastChar:()I\n         79: i2c\n-        80: invokevirtual #59                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+        80: invokevirtual #207                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n         83: pop\n         84: goto          98\n         87: aload_1\n-        88: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+        88: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n         91: iload         5\n         93: i2c\n-        94: invokevirtual #59                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+        94: invokevirtual #207                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n         97: pop\n         98: goto          10\n        101: aload_0\n        102: iload         4\n-       104: invokevirtual #49                 // Method isQuoteChar:(I)Z\n+       104: invokevirtual #177                // Method isQuoteChar:(I)Z\n        107: ifeq          259\n        110: aload_0\n        111: aload_0\n-       112: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-       115: invokevirtual #60                 // Method org/apache/commons/csv/ExtendedBufferedReader.lookAhead:()I\n-       118: invokevirtual #49                 // Method isQuoteChar:(I)Z\n+       112: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+       115: invokevirtual #210                // Method org/apache/commons/csv/ExtendedBufferedReader.lookAhead:()I\n+       118: invokevirtual #177                // Method isQuoteChar:(I)Z\n        121: ifeq          147\n        124: aload_0\n-       125: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-       128: invokevirtual #32                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+       125: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+       128: invokevirtual #116                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n        131: istore        4\n        133: aload_1\n-       134: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+       134: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n        137: iload         4\n        139: i2c\n-       140: invokevirtual #59                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+       140: invokevirtual #207                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n        143: pop\n        144: goto          10\n        147: aload_0\n-       148: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-       151: invokevirtual #32                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+       148: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+       151: invokevirtual #116                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n        154: istore        4\n        156: aload_0\n        157: iload         4\n-       159: invokevirtual #46                 // Method isDelimiter:(I)Z\n+       159: invokevirtual #168                // Method isDelimiter:(I)Z\n        162: ifeq          174\n        165: aload_1\n-       166: getstatic     #47                 // Field org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n-       169: putfield      #37                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       166: getstatic     #171                // Field org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n+       169: putfield      #134                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        172: aload_1\n        173: areturn\n        174: aload_0\n        175: iload         4\n-       177: invokevirtual #35                 // Method isEndOfFile:(I)Z\n+       177: invokevirtual #125                // Method isEndOfFile:(I)Z\n        180: ifeq          197\n        183: aload_1\n-       184: getstatic     #36                 // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n-       187: putfield      #37                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       184: getstatic     #128                // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n+       187: putfield      #134                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        190: aload_1\n        191: iconst_1\n-       192: putfield      #51                 // Field org/apache/commons/csv/Token.isReady:Z\n+       192: putfield      #184                // Field org/apache/commons/csv/Token.isReady:Z\n        195: aload_1\n        196: areturn\n        197: aload_0\n        198: iload         4\n-       200: invokevirtual #33                 // Method readEndOfLine:(I)Z\n+       200: invokevirtual #118                // Method readEndOfLine:(I)Z\n        203: ifeq          215\n        206: aload_1\n-       207: getstatic     #48                 // Field org/apache/commons/csv/Token$Type.EORECORD:Lorg/apache/commons/csv/Token$Type;\n-       210: putfield      #37                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       207: getstatic     #174                // Field org/apache/commons/csv/Token$Type.EORECORD:Lorg/apache/commons/csv/Token$Type;\n+       210: putfield      #134                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        213: aload_1\n        214: areturn\n        215: iload         4\n        217: i2c\n-       218: invokestatic  #45                 // Method java/lang/Character.isWhitespace:(C)Z\n+       218: invokestatic  #164                // Method java/lang/Character.isWhitespace:(C)Z\n        221: ifne          147\n-       224: new           #61                 // class java/io/IOException\n+       224: new           #212                // class java/io/IOException\n        227: dup\n-       228: new           #62                 // class java/lang/StringBuilder\n+       228: new           #153                // class java/lang/StringBuilder\n        231: dup\n-       232: invokespecial #63                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       235: ldc           #64                 // String (line\n-       237: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       232: invokespecial #214                // Method java/lang/StringBuilder.\"<init>\":()V\n+       235: ldc           #215                // String (line\n+       237: invokevirtual #152                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        240: aload_0\n-       241: invokevirtual #54                 // Method getCurrentLineNumber:()J\n-       244: invokevirtual #65                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-       247: ldc           #66                 // String ) invalid char between encapsulated token and delimiter\n-       249: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       252: invokevirtual #67                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       255: invokespecial #68                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       241: invokevirtual #194                // Method getCurrentLineNumber:()J\n+       244: invokevirtual #217                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+       247: ldc           #220                // String ) invalid char between encapsulated token and delimiter\n+       249: invokevirtual #152                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       252: invokevirtual #222                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       255: invokespecial #225                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        258: athrow\n        259: aload_0\n        260: iload         4\n-       262: invokevirtual #35                 // Method isEndOfFile:(I)Z\n+       262: invokevirtual #125                // Method isEndOfFile:(I)Z\n        265: ifeq          300\n-       268: new           #61                 // class java/io/IOException\n+       268: new           #212                // class java/io/IOException\n        271: dup\n-       272: new           #62                 // class java/lang/StringBuilder\n+       272: new           #153                // class java/lang/StringBuilder\n        275: dup\n-       276: invokespecial #63                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       279: ldc           #69                 // String (startline\n-       281: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       276: invokespecial #214                // Method java/lang/StringBuilder.\"<init>\":()V\n+       279: ldc           #228                // String (startline\n+       281: invokevirtual #152                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        284: lload_2\n-       285: invokevirtual #65                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-       288: ldc           #70                 // String ) EOF reached before encapsulated token finished\n-       290: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       293: invokevirtual #67                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       296: invokespecial #68                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       285: invokevirtual #217                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+       288: ldc           #230                // String ) EOF reached before encapsulated token finished\n+       290: invokevirtual #152                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       293: invokevirtual #222                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       296: invokespecial #225                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        299: athrow\n        300: aload_1\n-       301: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+       301: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n        304: iload         4\n        306: i2c\n-       307: invokevirtual #59                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+       307: invokevirtual #207                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n        310: pop\n        311: goto          10\n       LineNumberTable:\n         line 327: 0\n         line 329: 5\n         line 332: 10\n         line 334: 19\n@@ -1275,96 +1275,96 @@\n   private org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token, int) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=4, args_size=3\n          0: aload_0\n          1: iload_2\n-         2: invokevirtual #33                 // Method readEndOfLine:(I)Z\n+         2: invokevirtual #118                // Method readEndOfLine:(I)Z\n          5: ifeq          18\n          8: aload_1\n-         9: getstatic     #48                 // Field org/apache/commons/csv/Token$Type.EORECORD:Lorg/apache/commons/csv/Token$Type;\n-        12: putfield      #37                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+         9: getstatic     #174                // Field org/apache/commons/csv/Token$Type.EORECORD:Lorg/apache/commons/csv/Token$Type;\n+        12: putfield      #134                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n         15: goto          157\n         18: aload_0\n         19: iload_2\n-        20: invokevirtual #35                 // Method isEndOfFile:(I)Z\n+        20: invokevirtual #125                // Method isEndOfFile:(I)Z\n         23: ifeq          41\n         26: aload_1\n-        27: getstatic     #36                 // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n-        30: putfield      #37                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+        27: getstatic     #128                // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n+        30: putfield      #134                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n         33: aload_1\n         34: iconst_1\n-        35: putfield      #51                 // Field org/apache/commons/csv/Token.isReady:Z\n+        35: putfield      #184                // Field org/apache/commons/csv/Token.isReady:Z\n         38: goto          157\n         41: aload_0\n         42: iload_2\n-        43: invokevirtual #46                 // Method isDelimiter:(I)Z\n+        43: invokevirtual #168                // Method isDelimiter:(I)Z\n         46: ifeq          59\n         49: aload_1\n-        50: getstatic     #47                 // Field org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n-        53: putfield      #37                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+        50: getstatic     #171                // Field org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n+        53: putfield      #134                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n         56: goto          157\n         59: aload_0\n         60: iload_2\n-        61: invokevirtual #55                 // Method isEscape:(I)Z\n+        61: invokevirtual #195                // Method isEscape:(I)Z\n         64: ifeq          136\n         67: aload_0\n-        68: invokevirtual #56                 // Method isEscapeDelimiter:()Z\n+        68: invokevirtual #198                // Method isEscapeDelimiter:()Z\n         71: ifeq          89\n         74: aload_1\n-        75: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+        75: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n         78: aload_0\n-        79: getfield      #6                  // Field delimiter:[C\n-        82: invokevirtual #57                 // Method java/lang/StringBuilder.append:([C)Ljava/lang/StringBuilder;\n+        79: getfield      #27                 // Field delimiter:[C\n+        82: invokevirtual #201                // Method java/lang/StringBuilder.append:([C)Ljava/lang/StringBuilder;\n         85: pop\n         86: goto          146\n         89: aload_0\n-        90: invokevirtual #58                 // Method readEscape:()I\n+        90: invokevirtual #204                // Method readEscape:()I\n         93: istore_3\n         94: iload_3\n         95: iconst_m1\n         96: if_icmpne     123\n         99: aload_1\n-       100: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+       100: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n        103: iload_2\n        104: i2c\n-       105: invokevirtual #59                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+       105: invokevirtual #207                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n        108: aload_0\n-       109: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-       112: invokevirtual #31                 // Method org/apache/commons/csv/ExtendedBufferedReader.getLastChar:()I\n+       109: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+       112: invokevirtual #112                // Method org/apache/commons/csv/ExtendedBufferedReader.getLastChar:()I\n        115: i2c\n-       116: invokevirtual #59                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+       116: invokevirtual #207                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n        119: pop\n        120: goto          133\n        123: aload_1\n-       124: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+       124: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n        127: iload_3\n        128: i2c\n-       129: invokevirtual #59                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+       129: invokevirtual #207                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n        132: pop\n        133: goto          146\n        136: aload_1\n-       137: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+       137: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n        140: iload_2\n        141: i2c\n-       142: invokevirtual #59                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+       142: invokevirtual #207                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n        145: pop\n        146: aload_0\n-       147: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-       150: invokevirtual #32                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+       147: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+       150: invokevirtual #116                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n        153: istore_2\n        154: goto          0\n        157: aload_0\n-       158: getfield      #15                 // Field ignoreSurroundingSpaces:Z\n+       158: getfield      #59                 // Field ignoreSurroundingSpaces:Z\n        161: ifeq          172\n        164: aload_0\n        165: aload_1\n-       166: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n-       169: invokevirtual #71                 // Method trimTrailingSpaces:(Ljava/lang/StringBuilder;)V\n+       166: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+       169: invokevirtual #232                // Method trimTrailingSpaces:(Ljava/lang/StringBuilder;)V\n        172: aload_1\n        173: areturn\n       LineNumberTable:\n         line 408: 0\n         line 409: 8\n         line 410: 15\n         line 412: 18\n@@ -1410,44 +1410,44 @@\n     flags: (0x0000)\n     Code:\n       stack=2, locals=2, args_size=2\n          0: iload_1\n          1: bipush        13\n          3: if_icmpne     39\n          6: aload_0\n-         7: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-        10: invokevirtual #60                 // Method org/apache/commons/csv/ExtendedBufferedReader.lookAhead:()I\n+         7: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        10: invokevirtual #210                // Method org/apache/commons/csv/ExtendedBufferedReader.lookAhead:()I\n         13: bipush        10\n         15: if_icmpne     39\n         18: aload_0\n-        19: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-        22: invokevirtual #32                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+        19: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        22: invokevirtual #116                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n         25: istore_1\n         26: aload_0\n-        27: getfield      #23                 // Field firstEol:Ljava/lang/String;\n+        27: getfield      #87                 // Field firstEol:Ljava/lang/String;\n         30: ifnonnull     39\n         33: aload_0\n-        34: ldc           #72                 // String \\r\\n\n-        36: putfield      #23                 // Field firstEol:Ljava/lang/String;\n+        34: ldc           #236                // String \\r\\n\n+        36: putfield      #87                 // Field firstEol:Ljava/lang/String;\n         39: aload_0\n-        40: getfield      #23                 // Field firstEol:Ljava/lang/String;\n+        40: getfield      #87                 // Field firstEol:Ljava/lang/String;\n         43: ifnonnull     75\n         46: iload_1\n         47: bipush        10\n         49: if_icmpne     62\n         52: aload_0\n-        53: getstatic     #73                 // Field LF_STRING:Ljava/lang/String;\n-        56: putfield      #23                 // Field firstEol:Ljava/lang/String;\n+        53: getstatic     #238                // Field LF_STRING:Ljava/lang/String;\n+        56: putfield      #87                 // Field firstEol:Ljava/lang/String;\n         59: goto          75\n         62: iload_1\n         63: bipush        13\n         65: if_icmpne     75\n         68: aload_0\n-        69: getstatic     #74                 // Field CR_STRING:Ljava/lang/String;\n-        72: putfield      #23                 // Field firstEol:Ljava/lang/String;\n+        69: getstatic     #241                // Field CR_STRING:Ljava/lang/String;\n+        72: putfield      #87                 // Field firstEol:Ljava/lang/String;\n         75: iload_1\n         76: bipush        10\n         78: if_icmpeq     87\n         81: iload_1\n         82: bipush        13\n         84: if_icmpne     91\n         87: iconst_1\n@@ -1478,16 +1478,16 @@\n \n   int readEscape() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0000)\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-         4: invokevirtual #32                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+         1: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+         4: invokevirtual #116                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n          7: istore_1\n          8: iload_1\n          9: lookupswitch  { // 11\n                       -1: 125\n                        8: 123\n                        9: 123\n                       10: 123\n@@ -1508,22 +1508,22 @@\n        116: ireturn\n        117: bipush        8\n        119: ireturn\n        120: bipush        12\n        122: ireturn\n        123: iload_1\n        124: ireturn\n-       125: new           #61                 // class java/io/IOException\n+       125: new           #212                // class java/io/IOException\n        128: dup\n-       129: ldc           #75                 // String EOF whilst processing escape sequence\n-       131: invokespecial #68                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       129: ldc           #244                // String EOF whilst processing escape sequence\n+       131: invokespecial #225                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        134: athrow\n        135: aload_0\n        136: iload_1\n-       137: invokespecial #76                 // Method isMetaChar:(I)Z\n+       137: invokespecial #246                // Method isMetaChar:(I)Z\n        140: ifeq          145\n        143: iload_1\n        144: ireturn\n        145: iconst_m1\n        146: ireturn\n       LineNumberTable:\n         line 487: 0\n@@ -1555,37 +1555,37 @@\n \n   void trimTrailingSpaces(java.lang.StringBuilder);\n     descriptor: (Ljava/lang/StringBuilder;)V\n     flags: (0x0000)\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_1\n-         1: invokevirtual #77                 // Method java/lang/StringBuilder.length:()I\n+         1: invokevirtual #249                // Method java/lang/StringBuilder.length:()I\n          4: istore_2\n          5: iload_2\n          6: ifle          29\n          9: aload_1\n         10: iload_2\n         11: iconst_1\n         12: isub\n-        13: invokevirtual #78                 // Method java/lang/StringBuilder.charAt:(I)C\n-        16: invokestatic  #45                 // Method java/lang/Character.isWhitespace:(C)Z\n+        13: invokevirtual #252                // Method java/lang/StringBuilder.charAt:(I)C\n+        16: invokestatic  #164                // Method java/lang/Character.isWhitespace:(C)Z\n         19: ifeq          29\n         22: iload_2\n         23: iconst_1\n         24: isub\n         25: istore_2\n         26: goto          5\n         29: iload_2\n         30: aload_1\n-        31: invokevirtual #77                 // Method java/lang/StringBuilder.length:()I\n+        31: invokevirtual #249                // Method java/lang/StringBuilder.length:()I\n         34: if_icmpeq     42\n         37: aload_1\n         38: iload_2\n-        39: invokevirtual #79                 // Method java/lang/StringBuilder.setLength:(I)V\n+        39: invokevirtual #256                // Method java/lang/StringBuilder.setLength:(I)V\n         42: return\n       LineNumberTable:\n         line 518: 0\n         line 519: 5\n         line 520: 22\n         line 522: 29\n         line 523: 37\n@@ -1599,20 +1599,20 @@\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n          0: bipush        13\n-         2: invokestatic  #80                 // Method java/lang/Character.toString:(C)Ljava/lang/String;\n-         5: putstatic     #74                 // Field CR_STRING:Ljava/lang/String;\n+         2: invokestatic  #260                // Method java/lang/Character.toString:(C)Ljava/lang/String;\n+         5: putstatic     #241                // Field CR_STRING:Ljava/lang/String;\n          8: bipush        10\n-        10: invokestatic  #80                 // Method java/lang/Character.toString:(C)Ljava/lang/String;\n-        13: putstatic     #73                 // Field LF_STRING:Ljava/lang/String;\n+        10: invokestatic  #260                // Method java/lang/Character.toString:(C)Ljava/lang/String;\n+        13: putstatic     #238                // Field LF_STRING:Ljava/lang/String;\n         16: return\n       LineNumberTable:\n         line 41: 0\n         line 42: 8\n }\n SourceFile: \"Lexer.java\"\n InnerClasses:\n-  static final #249= #180 of #182;        // Type=class org/apache/commons/csv/Token$Type of class org/apache/commons/csv/Token\n+  static final #279= #129 of #135;        // Type=class org/apache/commons/csv/Token$Type of class org/apache/commons/csv/Token\n"}]}
