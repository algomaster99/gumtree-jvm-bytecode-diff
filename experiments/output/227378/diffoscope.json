{"diffoscope-json-version": 1, "source1": "first/SimplifyBooleanReturnCheck.class", "source2": "second/SimplifyBooleanReturnCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,40 +19,36 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 83 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final DetailAST elseLiteral = ast.findFirstToken(92);\n-        if (elseLiteral != null) {\n-            final DetailAST elseStatement = elseLiteral.getFirstChild();\n-            final DetailAST condition = ast.getFirstChild().getNextSibling();\n-            final DetailAST thenStatement = condition.getNextSibling().getNextSibling();\n-            if (canReturnOnlyBooleanLiteral(thenStatement) && canReturnOnlyBooleanLiteral(elseStatement)) {\n-                this.log(ast, \"simplify.boolReturn\", new Object[0]);\n+    public void visitToken(final DetailAST detailAST) {\n+        final DetailAST firstToken = detailAST.findFirstToken(92);\n+        if (firstToken != null) {\n+            final DetailAST firstChild = firstToken.getFirstChild();\n+            if (canReturnOnlyBooleanLiteral(detailAST.getFirstChild().getNextSibling().getNextSibling().getNextSibling()) && canReturnOnlyBooleanLiteral(firstChild)) {\n+                this.log(detailAST, \"simplify.boolReturn\", new Object[0]);\n             }\n         }\n     }\n     \n-    private static boolean canReturnOnlyBooleanLiteral(final DetailAST ast) {\n-        boolean result = true;\n-        if (!isBooleanLiteralReturnStatement(ast)) {\n-            final DetailAST firstStatement = ast.getFirstChild();\n-            result = isBooleanLiteralReturnStatement(firstStatement);\n+    private static boolean canReturnOnlyBooleanLiteral(final DetailAST detailAST) {\n+        boolean booleanLiteralReturnStatement = true;\n+        if (!isBooleanLiteralReturnStatement(detailAST)) {\n+            booleanLiteralReturnStatement = isBooleanLiteralReturnStatement(detailAST.getFirstChild());\n         }\n-        return result;\n+        return booleanLiteralReturnStatement;\n     }\n     \n-    private static boolean isBooleanLiteralReturnStatement(final DetailAST ast) {\n-        boolean booleanReturnStatement = false;\n-        if (ast != null && ast.getType() == 88) {\n-            final DetailAST expr = ast.getFirstChild();\n-            if (expr.getType() != 45) {\n-                final DetailAST value = expr.getFirstChild();\n-                booleanReturnStatement = TokenUtil.isBooleanLiteralType(value.getType());\n+    private static boolean isBooleanLiteralReturnStatement(final DetailAST detailAST) {\n+        boolean booleanLiteralType = false;\n+        if (detailAST != null && detailAST.getType() == 88) {\n+            final DetailAST firstChild = detailAST.getFirstChild();\n+            if (firstChild.getType() != 45) {\n+                booleanLiteralType = TokenUtil.isBooleanLiteralType(firstChild.getFirstChild().getType());\n             }\n         }\n-        return booleanReturnStatement;\n+        return booleanLiteralType;\n     }\n }\n"}]}
