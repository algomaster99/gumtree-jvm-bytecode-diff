{"diffoscope-json-version": 1, "source1": "first/Verifier.class", "source2": "second/Verifier.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,13 +1,12 @@\n \n package org.apache.bcel.verifier;\n \n import org.apache.bcel.classfile.JavaClass;\n import java.util.Iterator;\n-import java.util.List;\n import org.apache.bcel.Repository;\n import java.util.ArrayList;\n import java.util.HashMap;\n import org.apache.bcel.verifier.structurals.Pass3bVerifier;\n import org.apache.bcel.verifier.statics.Pass3aVerifier;\n import java.util.Map;\n import org.apache.bcel.verifier.statics.Pass2Verifier;\n@@ -31,38 +30,38 @@\n     public VerificationResult doPass2() {\n         if (this.p2v == null) {\n             this.p2v = new Pass2Verifier(this);\n         }\n         return this.p2v.verify();\n     }\n     \n-    public VerificationResult doPass3a(final int method_no) {\n-        final String key = Integer.toString(method_no);\n-        Pass3aVerifier p3av = (Pass3aVerifier)this.p3avs.get(key);\n-        if (this.p3avs.get(key) == null) {\n-            p3av = new Pass3aVerifier(this, method_no);\n-            this.p3avs.put(key, p3av);\n+    public VerificationResult doPass3a(final int i) {\n+        final String string = Integer.toString(i);\n+        Pass3aVerifier pass3aVerifier = (Pass3aVerifier)this.p3avs.get(string);\n+        if (this.p3avs.get(string) == null) {\n+            pass3aVerifier = new Pass3aVerifier(this, i);\n+            this.p3avs.put(string, pass3aVerifier);\n         }\n-        return p3av.verify();\n+        return pass3aVerifier.verify();\n     }\n     \n-    public VerificationResult doPass3b(final int method_no) {\n-        final String key = Integer.toString(method_no);\n-        Pass3bVerifier p3bv = (Pass3bVerifier)this.p3bvs.get(key);\n-        if (this.p3bvs.get(key) == null) {\n-            p3bv = new Pass3bVerifier(this, method_no);\n-            this.p3bvs.put(key, p3bv);\n+    public VerificationResult doPass3b(final int i) {\n+        final String string = Integer.toString(i);\n+        Pass3bVerifier pass3bVerifier = (Pass3bVerifier)this.p3bvs.get(string);\n+        if (this.p3bvs.get(string) == null) {\n+            pass3bVerifier = new Pass3bVerifier(this, i);\n+            this.p3bvs.put(string, pass3bVerifier);\n         }\n-        return p3bv.verify();\n+        return pass3bVerifier.verify();\n     }\n     \n-    Verifier(final String fully_qualified_classname) {\n+    Verifier(final String classname) {\n         this.p3avs = new HashMap<String, Pass3aVerifier>();\n         this.p3bvs = new HashMap<String, Pass3bVerifier>();\n-        this.classname = fully_qualified_classname;\n+        this.classname = classname;\n         this.flush();\n     }\n     \n     public final String getClassName() {\n         return this.classname;\n     }\n     \n@@ -70,88 +69,86 @@\n         this.p1v = null;\n         this.p2v = null;\n         this.p3avs.clear();\n         this.p3bvs.clear();\n     }\n     \n     public String[] getMessages() throws ClassNotFoundException {\n-        final List<String> messages = new ArrayList<String>();\n+        final ArrayList list = new ArrayList();\n         if (this.p1v != null) {\n-            final String[] messages2;\n-            final String[] p1m = messages2 = this.p1v.getMessages();\n-            for (final String element : messages2) {\n-                messages.add(\"Pass 1: \" + element);\n+            final String[] messages = this.p1v.getMessages();\n+            for (int length = messages.length, i = 0; i < length; ++i) {\n+                list.add(\"Pass 1: \" + messages[i]);\n             }\n         }\n         if (this.p2v != null) {\n-            final String[] messages3;\n-            final String[] p2m = messages3 = this.p2v.getMessages();\n-            for (final String element : messages3) {\n-                messages.add(\"Pass 2: \" + element);\n+            final String[] messages2 = this.p2v.getMessages();\n+            for (int length2 = messages2.length, j = 0; j < length2; ++j) {\n+                list.add(\"Pass 2: \" + messages2[j]);\n             }\n         }\n-        for (final Pass3aVerifier pv : this.p3avs.values()) {\n-            final String[] p3am = pv.getMessages();\n-            final int meth = pv.getMethodNo();\n-            for (final String element2 : p3am) {\n-                messages.add(\"Pass 3a, method \" + meth + \" ('\" + Repository.lookupClass(this.classname).getMethods()[meth] + \"'): \" + element2);\n+        for (final Pass3aVerifier pass3aVerifier : this.p3avs.values()) {\n+            final String[] messages3 = pass3aVerifier.getMessages();\n+            final int methodNo = pass3aVerifier.getMethodNo();\n+            final String[] array = messages3;\n+            for (int length3 = array.length, k = 0; k < length3; ++k) {\n+                list.add(\"Pass 3a, method \" + methodNo + \" ('\" + Repository.lookupClass(this.classname).getMethods()[methodNo] + \"'): \" + array[k]);\n             }\n         }\n-        for (final Pass3bVerifier pv2 : this.p3bvs.values()) {\n-            final String[] p3bm = pv2.getMessages();\n-            final int meth = pv2.getMethodNo();\n-            for (final String element2 : p3bm) {\n-                messages.add(\"Pass 3b, method \" + meth + \" ('\" + Repository.lookupClass(this.classname).getMethods()[meth] + \"'): \" + element2);\n+        for (final Pass3bVerifier pass3bVerifier : this.p3bvs.values()) {\n+            final String[] messages4 = pass3bVerifier.getMessages();\n+            final int methodNo2 = pass3bVerifier.getMethodNo();\n+            final String[] array2 = messages4;\n+            for (int length4 = array2.length, l = 0; l < length4; ++l) {\n+                list.add(\"Pass 3b, method \" + methodNo2 + \" ('\" + Repository.lookupClass(this.classname).getMethods()[methodNo2] + \"'): \" + array2[l]);\n             }\n         }\n-        return messages.toArray(new String[messages.size()]);\n+        return (String[])list.toArray(new String[list.size()]);\n     }\n     \n-    public static void main(final String[] args) {\n+    public static void main(final String[] array) {\n         System.out.println(\"JustIce by Enver Haase, (C) 2001-2002.\\n<http://bcel.sourceforge.net>\\n<https://commons.apache.org/bcel>\\n\");\n-        for (int index = 0; index < args.length; ++index) {\n+        for (int i = 0; i < array.length; ++i) {\n             try {\n-                if (args[index].endsWith(\".class\")) {\n-                    final int dotclasspos = args[index].lastIndexOf(\".class\");\n-                    if (dotclasspos != -1) {\n-                        args[index] = args[index].substring(0, dotclasspos);\n+                if (array[i].endsWith(\".class\")) {\n+                    final int lastIndex = array[i].lastIndexOf(\".class\");\n+                    if (lastIndex != -1) {\n+                        array[i] = array[i].substring(0, lastIndex);\n                     }\n                 }\n-                args[index] = args[index].replace('/', '.');\n-                System.out.println(\"Now verifying: \" + args[index] + \"\\n\");\n-                verifyType(args[index]);\n+                array[i] = array[i].replace('/', '.');\n+                System.out.println(\"Now verifying: \" + array[i] + \"\\n\");\n+                verifyType(array[i]);\n                 Repository.clearCache();\n                 System.gc();\n             }\n-            catch (final ClassNotFoundException e) {\n-                e.printStackTrace();\n+            catch (final ClassNotFoundException ex) {\n+                ex.printStackTrace();\n             }\n         }\n     }\n     \n-    static void verifyType(final String fullyQualifiedClassName) throws ClassNotFoundException {\n-        final Verifier verifier = VerifierFactory.getVerifier(fullyQualifiedClassName);\n-        VerificationResult verificationResult = verifier.doPass1();\n-        System.out.println(\"Pass 1:\\n\" + verificationResult);\n-        verificationResult = verifier.doPass2();\n-        System.out.println(\"Pass 2:\\n\" + verificationResult);\n-        if (verificationResult == VerificationResult.VR_OK) {\n-            final JavaClass jc = Repository.lookupClass(fullyQualifiedClassName);\n-            for (int i = 0; i < jc.getMethods().length; ++i) {\n-                verificationResult = verifier.doPass3a(i);\n-                System.out.println(\"Pass 3a, method number \" + i + \" ['\" + jc.getMethods()[i] + \"']:\\n\" + verificationResult);\n-                verificationResult = verifier.doPass3b(i);\n-                System.out.println(\"Pass 3b, method number \" + i + \" ['\" + jc.getMethods()[i] + \"']:\\n\" + verificationResult);\n+    static void verifyType(final String s) throws ClassNotFoundException {\n+        final Verifier verifier = VerifierFactory.getVerifier(s);\n+        System.out.println(\"Pass 1:\\n\" + verifier.doPass1());\n+        final VerificationResult doPass2 = verifier.doPass2();\n+        System.out.println(\"Pass 2:\\n\" + doPass2);\n+        if (doPass2 == VerificationResult.VR_OK) {\n+            final JavaClass lookupClass = Repository.lookupClass(s);\n+            for (int i = 0; i < lookupClass.getMethods().length; ++i) {\n+                System.out.println(\"Pass 3a, method number \" + i + \" ['\" + lookupClass.getMethods()[i] + \"']:\\n\" + verifier.doPass3a(i));\n+                System.out.println(\"Pass 3b, method number \" + i + \" ['\" + lookupClass.getMethods()[i] + \"']:\\n\" + verifier.doPass3b(i));\n             }\n         }\n         System.out.println(\"Warnings:\");\n-        final String[] warnings = verifier.getMessages();\n-        if (warnings.length == 0) {\n+        final String[] messages = verifier.getMessages();\n+        if (messages.length == 0) {\n             System.out.println(\"<none>\");\n         }\n-        for (final String warning : warnings) {\n-            System.out.println(warning);\n+        final String[] array = messages;\n+        for (int length = array.length, j = 0; j < length; ++j) {\n+            System.out.println(array[j]);\n         }\n         System.out.println(\"\\n\");\n         verifier.flush();\n     }\n }\n"}]}
