{"diffoscope-json-version": 1, "source1": "first/Subroutines$SubroutineImpl.class", "source2": "second/Subroutines$SubroutineImpl.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -105,34 +105,36 @@\n             throw new AssertionViolatedException(\"getLeavingRET() called on top level pseudo-subroutine.\");\n         }\n         return this.theRET;\n     }\n     \n     public int[] getRecursivelyAccessedLocalsIndices() {\n         final Set<Integer> s = new HashSet<Integer>();\n-        final int[] accessedLocalsIndices;\n-        final int[] lvs = accessedLocalsIndices = this.getAccessedLocalsIndices();\n-        for (final int lv : accessedLocalsIndices) {\n+        final int[] lvs = this.getAccessedLocalsIndices();\n+        int[] array;\n+        for (int length = (array = lvs).length, i = 0; i < length; ++i) {\n+            final int lv = array[i];\n             s.add(Integer.valueOf(lv));\n         }\n         this.getRecursivelyAccessedLocalsIndicesHelper(s, this.subSubs());\n         final int[] ret = new int[s.size()];\n         int j = -1;\n         for (final Integer index : s) {\n             ++j;\n             ret[j] = index;\n         }\n         return ret;\n     }\n     \n     private void getRecursivelyAccessedLocalsIndicesHelper(final Set<Integer> set, final Subroutine[] subs) {\n         for (final Subroutine sub : subs) {\n-            final int[] accessedLocalsIndices;\n-            final int[] lvs = accessedLocalsIndices = sub.getAccessedLocalsIndices();\n-            for (final int lv : accessedLocalsIndices) {\n+            final int[] lvs = sub.getAccessedLocalsIndices();\n+            int[] array;\n+            for (int length2 = (array = lvs).length, j = 0; j < length2; ++j) {\n+                final int lv = array[j];\n                 set.add(Integer.valueOf(lv));\n             }\n             if (sub.subSubs().length != 0) {\n                 this.getRecursivelyAccessedLocalsIndicesHelper(set, sub.subSubs());\n             }\n         }\n     }\n@@ -182,25 +184,27 @@\n     public String toString() {\n         final StringBuilder ret = new StringBuilder();\n         ret.append(\"Subroutine: Local variable is '\").append(this.localVariable);\n         ret.append(\"', JSRs are '\").append(this.theJSRs);\n         ret.append(\"', RET is '\").append(this.theRET);\n         ret.append(\"', Instructions: '\").append(this.instructions).append(\"'.\");\n         ret.append(\" Accessed local variable slots: '\");\n-        final int[] accessedLocalsIndices;\n-        int[] alv = accessedLocalsIndices = this.getAccessedLocalsIndices();\n-        for (final int element : accessedLocalsIndices) {\n+        int[] alv = this.getAccessedLocalsIndices();\n+        int[] array;\n+        for (int length = (array = alv).length, i = 0; i < length; ++i) {\n+            final int element = array[i];\n             ret.append(element);\n             ret.append(\" \");\n         }\n         ret.append(\"'.\");\n         ret.append(\" Recursively (via subsub...routines) accessed local variable slots: '\");\n-        final int[] recursivelyAccessedLocalsIndices;\n-        alv = (recursivelyAccessedLocalsIndices = this.getRecursivelyAccessedLocalsIndices());\n-        for (final int element : recursivelyAccessedLocalsIndices) {\n+        alv = this.getRecursivelyAccessedLocalsIndices();\n+        int[] array2;\n+        for (int length2 = (array2 = alv).length, j = 0; j < length2; ++j) {\n+            final int element = array2[j];\n             ret.append(element);\n             ret.append(\" \");\n         }\n         ret.append(\"'.\");\n         return ret.toString();\n     }\n }\n"}]}
