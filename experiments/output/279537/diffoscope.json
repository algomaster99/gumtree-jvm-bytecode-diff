{"diffoscope-json-version": 1, "source1": "first/LabelForm.class", "source2": "second/LabelForm.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,35 +5,32 @@\n import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;\n import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;\n \n public class LabelForm extends ByteCodeForm\n {\n     protected boolean widened;\n     \n-    public LabelForm(final int opcode, final String name, final int[] rewrite) {\n-        super(opcode, name, rewrite);\n+    public LabelForm(final int n, final String s, final int[] array) {\n+        super(n, s, array);\n     }\n     \n-    public LabelForm(final int opcode, final String name, final int[] rewrite, final boolean widened) {\n-        this(opcode, name, rewrite);\n+    public LabelForm(final int n, final String s, final int[] array, final boolean widened) {\n+        this(n, s, array);\n         this.widened = widened;\n     }\n     \n     public void fixUpByteCodeTargets(final ByteCode byteCode, final CodeAttribute codeAttribute) {\n-        final int originalTarget = byteCode.getByteCodeTargets()[0];\n-        final int sourceIndex = byteCode.getByteCodeIndex();\n-        final int absoluteInstructionTargetIndex = sourceIndex + originalTarget;\n-        final int targetValue = (int)Integer.valueOf(codeAttribute.byteCodeOffsets.get(absoluteInstructionTargetIndex));\n-        final int sourceValue = (int)Integer.valueOf(codeAttribute.byteCodeOffsets.get(sourceIndex));\n-        byteCode.setOperandSigned2Bytes(targetValue - sourceValue, 0);\n+        final int n = byteCode.getByteCodeTargets()[0];\n+        final int byteCodeIndex = byteCode.getByteCodeIndex();\n+        byteCode.setOperandSigned2Bytes((int)codeAttribute.byteCodeOffsets.get(byteCodeIndex + n) - (int)codeAttribute.byteCodeOffsets.get(byteCodeIndex), 0);\n         if (this.widened) {\n             byteCode.setNestedPositions(new int[][] { { 0, 4 } });\n         }\n         else {\n             byteCode.setNestedPositions(new int[][] { { 0, 2 } });\n         }\n     }\n     \n-    public void setByteCodeOperands(final ByteCode byteCode, final OperandManager operandManager, final int codeLength) {\n+    public void setByteCodeOperands(final ByteCode byteCode, final OperandManager operandManager, final int n) {\n         byteCode.setByteCodeTargets(new int[] { operandManager.nextLabel() });\n     }\n }\n"}]}
