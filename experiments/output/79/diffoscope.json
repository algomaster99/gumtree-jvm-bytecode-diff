{"diffoscope-json-version": 1, "source1": "first/Utility.class", "source2": "second/Utility.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -67,25 +67,36 @@\n     \n     public static String classOrInterface(final int access_flags) {\n         return ((access_flags & 0x200) != 0x0) ? \"interface\" : \"class\";\n     }\n     \n     public static String codeToString(final byte[] code, final ConstantPool constant_pool, final int index, final int length, final boolean verbose) {\n         final StringBuilder buf = new StringBuilder(code.length * 20);\n-        try (final ByteSequence stream = new ByteSequence(code)) {\n-            for (int i = 0; i < index; ++i) {\n-                codeToString(stream, constant_pool, verbose);\n-            }\n-            int i = 0;\n-            while (stream.available() > 0) {\n-                if (length < 0 || i < length) {\n-                    final String indices = fillup(stream.getIndex() + \":\", 6, true, ' ');\n-                    buf.append(indices).append(codeToString(stream, constant_pool, verbose)).append('\\n');\n-                }\n-                ++i;\n+        try {\n+            final ByteSequence stream = new ByteSequence(code);\n+            Throwable x0 = null;\n+            try {\n+                for (int i = 0; i < index; ++i) {\n+                    codeToString(stream, constant_pool, verbose);\n+                }\n+                int i = 0;\n+                while (stream.available() > 0) {\n+                    if (length < 0 || i < length) {\n+                        final String indices = fillup(stream.getIndex() + \":\", 6, true, ' ');\n+                        buf.append(indices).append(codeToString(stream, constant_pool, verbose)).append('\\n');\n+                    }\n+                    ++i;\n+                }\n+            }\n+            catch (final Throwable t) {\n+                x0 = t;\n+                throw t;\n+            }\n+            finally {\n+                $closeResource(x0, (AutoCloseable)stream);\n             }\n         }\n         catch (final IOException e) {\n             throw new ClassFormatException(\"Byte code error: \" + buf.toString(), (Throwable)e);\n         }\n         return buf.toString();\n     }\n@@ -963,39 +974,86 @@\n     \n     public static boolean isJavaIdentifierPart(final char ch) {\n         return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9') || ch == '_';\n     }\n     \n     public static String encode(byte[] bytes, final boolean compress) throws IOException {\n         if (compress) {\n-            try (final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-                 final GZIPOutputStream gos = new GZIPOutputStream(baos)) {\n-                gos.write(bytes, 0, bytes.length);\n-                bytes = baos.toByteArray();\n+            final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            Throwable x0 = null;\n+            try {\n+                final GZIPOutputStream gos = new GZIPOutputStream(baos);\n+                Throwable x2 = null;\n+                try {\n+                    gos.write(bytes, 0, bytes.length);\n+                    bytes = baos.toByteArray();\n+                }\n+                catch (final Throwable t) {\n+                    x2 = t;\n+                    throw t;\n+                }\n+                finally {\n+                    $closeResource(x2, gos);\n+                }\n+            }\n+            catch (final Throwable t2) {\n+                x0 = t2;\n+                throw t2;\n+            }\n+            finally {\n+                $closeResource(x0, baos);\n             }\n         }\n         final CharArrayWriter caw = new CharArrayWriter();\n-        try (final Utility.JavaWriter jw = new Utility.JavaWriter((Writer)caw)) {\n+        final Utility.JavaWriter jw = new Utility.JavaWriter((Writer)caw);\n+        Throwable x3 = null;\n+        try {\n             for (final byte b : bytes) {\n                 final int in = b & 0xFF;\n                 jw.write(in);\n             }\n         }\n+        catch (final Throwable t3) {\n+            x3 = t3;\n+            throw t3;\n+        }\n+        finally {\n+            $closeResource(x3, (AutoCloseable)jw);\n+        }\n         return caw.toString();\n     }\n     \n     public static byte[] decode(final String s, final boolean uncompress) throws IOException {\n+        final Utility.JavaReader jr = new Utility.JavaReader((Reader)new CharArrayReader(s.toCharArray()));\n+        Throwable x0 = null;\n         byte[] bytes;\n-        try (final Utility.JavaReader jr = new Utility.JavaReader((Reader)new CharArrayReader(s.toCharArray()));\n-             final ByteArrayOutputStream bos = new ByteArrayOutputStream()) {\n-            int ch;\n-            while ((ch = jr.read()) >= 0) {\n-                bos.write(ch);\n+        try {\n+            final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+            Throwable x2 = null;\n+            try {\n+                int ch;\n+                while ((ch = jr.read()) >= 0) {\n+                    bos.write(ch);\n+                }\n+                bytes = bos.toByteArray();\n+            }\n+            catch (final Throwable t) {\n+                x2 = t;\n+                throw t;\n             }\n-            bytes = bos.toByteArray();\n+            finally {\n+                $closeResource(x2, bos);\n+            }\n+        }\n+        catch (final Throwable t2) {\n+            x0 = t2;\n+            throw t2;\n+        }\n+        finally {\n+            $closeResource(x0, (AutoCloseable)jr);\n         }\n         if (uncompress) {\n             final GZIPInputStream gis = new GZIPInputStream(new ByteArrayInputStream(bytes));\n             final byte[] tmp = new byte[bytes.length * 3];\n             int count = 0;\n             int b;\n             while ((b = gis.read()) >= 0) {\n@@ -1037,14 +1095,28 @@\n                     break;\n                 }\n             }\n         }\n         return buf.toString();\n     }\n     \n+    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n+        if (x0 != null) {\n+            try {\n+                x1.close();\n+            }\n+            catch (final Throwable exception) {\n+                x0.addSuppressed(exception);\n+            }\n+        }\n+        else {\n+            x1.close();\n+        }\n+    }\n+    \n     static {\n         Utility.consumed_chars = (ThreadLocal<Integer>)new Utility.Utility$1();\n         Utility.wide = false;\n         Utility.CHAR_MAP = new int[48];\n         Utility.MAP_CHAR = new int[256];\n         int j = 0;\n         for (int i = 65; i <= 90; ++i) {\n"}]}
