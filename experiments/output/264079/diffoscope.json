{"diffoscope-json-version": 1, "source1": "first/FTPHTTPClient.class", "source2": "second/FTPHTTPClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,20 +1,19 @@\n \n package org.apache.commons.net.ftp;\n \n import java.io.UnsupportedEncodingException;\n import java.util.Iterator;\n-import java.util.List;\n import java.io.InputStreamReader;\n import java.util.ArrayList;\n-import java.io.BufferedReader;\n-import java.net.SocketException;\n-import java.io.Reader;\n import java.io.OutputStream;\n import java.io.InputStream;\n+import java.net.SocketException;\n+import java.io.BufferedReader;\n+import java.io.Reader;\n import java.net.Inet6Address;\n import java.io.IOException;\n import java.net.Socket;\n import java.nio.charset.StandardCharsets;\n import org.apache.commons.net.util.Base64;\n import java.nio.charset.Charset;\n \n@@ -25,132 +24,125 @@\n     private final int proxyPort;\n     private final String proxyUsername;\n     private final String proxyPassword;\n     private final Charset charset;\n     private final Base64 base64;\n     private String tunnelHost;\n     \n-    public FTPHTTPClient(final String proxyHost, final int proxyPort) {\n-        this(proxyHost, proxyPort, null, null);\n+    public FTPHTTPClient(final String s, final int n) {\n+        this(s, n, null, null);\n     }\n     \n-    public FTPHTTPClient(final String proxyHost, final int proxyPort, final Charset encoding) {\n-        this(proxyHost, proxyPort, null, null, encoding);\n+    public FTPHTTPClient(final String s, final int n, final Charset charset) {\n+        this(s, n, null, null, charset);\n     }\n     \n-    public FTPHTTPClient(final String proxyHost, final int proxyPort, final String proxyUser, final String proxyPass) {\n-        this(proxyHost, proxyPort, proxyUser, proxyPass, StandardCharsets.UTF_8);\n+    public FTPHTTPClient(final String s, final int n, final String s2, final String s3) {\n+        this(s, n, s2, s3, StandardCharsets.UTF_8);\n     }\n     \n-    public FTPHTTPClient(final String proxyHost, final int proxyPort, final String proxyUser, final String proxyPass, final Charset encoding) {\n+    public FTPHTTPClient(final String proxyHost, final int proxyPort, final String proxyUsername, final String proxyPassword, final Charset charset) {\n         this.base64 = new Base64();\n         this.proxyHost = proxyHost;\n         this.proxyPort = proxyPort;\n-        this.proxyUsername = proxyUser;\n-        this.proxyPassword = proxyPass;\n+        this.proxyUsername = proxyUsername;\n+        this.proxyPassword = proxyPassword;\n         this.tunnelHost = null;\n-        this.charset = encoding;\n+        this.charset = charset;\n     }\n     \n     @Deprecated\n-    protected Socket _openDataConnection_(final int command, final String arg) throws IOException {\n-        return super._openDataConnection_(command, arg);\n+    protected Socket _openDataConnection_(final int n, final String s) throws IOException {\n+        return super._openDataConnection_(n, s);\n     }\n     \n-    protected Socket _openDataConnection_(final String command, final String arg) throws IOException {\n+    protected Socket _openDataConnection_(final String s, final String s2) throws IOException {\n         if (this.getDataConnectionMode() != 2) {\n             throw new IllegalStateException(\"Only passive connection mode supported\");\n         }\n-        final boolean isInet6Address = this.getRemoteAddress() instanceof Inet6Address;\n-        String passiveHost = null;\n-        final boolean attemptEPSV = this.isUseEPSVwithIPv4() || isInet6Address;\n-        if (attemptEPSV && this.epsv() == 229) {\n+        final boolean b = this.getRemoteAddress() instanceof Inet6Address;\n+        String s3;\n+        if ((this.isUseEPSVwithIPv4() || b) && this.epsv() == 229) {\n             this._parseExtendedPassiveModeReply((String)this._replyLines.get(0));\n-            passiveHost = this.tunnelHost;\n+            s3 = this.tunnelHost;\n         }\n         else {\n-            if (isInet6Address) {\n+            if (b) {\n                 return null;\n             }\n             if (this.pasv() != 227) {\n                 return null;\n             }\n             this._parsePassiveModeReply((String)this._replyLines.get(0));\n-            passiveHost = this.getPassiveHost();\n+            s3 = this.getPassiveHost();\n         }\n         final Socket socket = this._socketFactory_.createSocket(this.proxyHost, this.proxyPort);\n-        final InputStream is = socket.getInputStream();\n-        final OutputStream os = socket.getOutputStream();\n-        this.tunnelHandshake(passiveHost, this.getPassivePort(), is, os);\n+        this.tunnelHandshake(s3, this.getPassivePort(), socket.getInputStream(), socket.getOutputStream());\n         if (this.getRestartOffset() > 0L && !this.restart(this.getRestartOffset())) {\n             socket.close();\n             return null;\n         }\n-        if (!FTPReply.isPositivePreliminary(this.sendCommand(command, arg))) {\n+        if (!FTPReply.isPositivePreliminary(this.sendCommand(s, s2))) {\n             socket.close();\n             return null;\n         }\n         return socket;\n     }\n     \n-    public void connect(final String host, final int port) throws SocketException, IOException {\n+    public void connect(final String str, final int i) throws SocketException, IOException {\n         this._socket_ = this._socketFactory_.createSocket(this.proxyHost, this.proxyPort);\n         this._input_ = this._socket_.getInputStream();\n         this._output_ = this._socket_.getOutputStream();\n-        Reader socketIsReader;\n+        BufferedReader tunnelHandshake;\n         try {\n-            socketIsReader = this.tunnelHandshake(host, port, this._input_, this._output_);\n+            tunnelHandshake = this.tunnelHandshake(str, i, this._input_, this._output_);\n         }\n-        catch (final Exception e) {\n-            final IOException ioe = new IOException(\"Could not connect to \" + host + \" using port \" + port);\n-            ioe.initCause(e);\n-            throw ioe;\n-        }\n-        super._connectAction_(socketIsReader);\n-    }\n-    \n-    private BufferedReader tunnelHandshake(final String host, final int port, final InputStream input, final OutputStream output) throws IOException, UnsupportedEncodingException {\n-        final String connectString = \"CONNECT \" + host + \":\" + port + \" HTTP/1.1\";\n-        final String hostString = \"Host: \" + host + \":\" + port;\n-        this.tunnelHost = host;\n-        output.write(connectString.getBytes(this.charset));\n-        output.write(FTPHTTPClient.CRLF);\n-        output.write(hostString.getBytes(this.charset));\n-        output.write(FTPHTTPClient.CRLF);\n+        catch (final Exception cause) {\n+            final IOException ex = new IOException(\"Could not connect to \" + str + \" using port \" + i);\n+            ex.initCause(cause);\n+            throw ex;\n+        }\n+        super._connectAction_((Reader)tunnelHandshake);\n+    }\n+    \n+    private BufferedReader tunnelHandshake(final String tunnelHost, final int n, final InputStream in, final OutputStream outputStream) throws IOException, UnsupportedEncodingException {\n+        final String string = \"CONNECT \" + tunnelHost + \":\" + n + \" HTTP/1.1\";\n+        final String string2 = \"Host: \" + tunnelHost + \":\" + n;\n+        this.tunnelHost = tunnelHost;\n+        outputStream.write(string.getBytes(this.charset));\n+        outputStream.write(FTPHTTPClient.CRLF);\n+        outputStream.write(string2.getBytes(this.charset));\n+        outputStream.write(FTPHTTPClient.CRLF);\n         if (this.proxyUsername != null && this.proxyPassword != null) {\n-            final String auth = this.proxyUsername + \":\" + this.proxyPassword;\n-            final String header = \"Proxy-Authorization: Basic \" + this.base64.encodeToString(auth.getBytes(this.charset));\n-            output.write(header.getBytes(this.charset));\n-        }\n-        output.write(FTPHTTPClient.CRLF);\n-        final List<String> response = new ArrayList<String>();\n-        final BufferedReader reader = new BufferedReader(new InputStreamReader(input, this.getCharset()));\n-        for (String line = reader.readLine(); line != null && !line.isEmpty(); line = reader.readLine()) {\n-            response.add(line);\n+            outputStream.write((\"Proxy-Authorization: Basic \" + this.base64.encodeToString((this.proxyUsername + \":\" + this.proxyPassword).getBytes(this.charset))).getBytes(this.charset));\n+        }\n+        outputStream.write(FTPHTTPClient.CRLF);\n+        final ArrayList list = new ArrayList();\n+        final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(in, this.getCharset()));\n+        for (String s = bufferedReader.readLine(); s != null && !s.isEmpty(); s = bufferedReader.readLine()) {\n+            list.add(s);\n         }\n-        final int size = response.size();\n-        if (size == 0) {\n+        if (list.size() == 0) {\n             throw new IOException(\"No response from proxy\");\n         }\n-        String code = null;\n-        final String resp = (String)response.get(0);\n-        if (!resp.startsWith(\"HTTP/\") || resp.length() < 12) {\n-            throw new IOException(\"Invalid response from proxy: \" + resp);\n-        }\n-        code = resp.substring(9, 12);\n-        if (!\"200\".equals(code)) {\n-            final StringBuilder msg = new StringBuilder();\n-            msg.append(\"HTTPTunnelConnector: connection failed\\r\\n\");\n-            msg.append(\"Response received from the proxy:\\r\\n\");\n-            for (final String line2 : response) {\n-                msg.append(line2);\n-                msg.append(\"\\r\\n\");\n+        final String str = (String)list.get(0);\n+        if (!str.startsWith(\"HTTP/\") || str.length() < 12) {\n+            throw new IOException(\"Invalid response from proxy: \" + str);\n+        }\n+        if (!\"200\".equals(str.substring(9, 12))) {\n+            final StringBuilder sb = new StringBuilder();\n+            sb.append(\"HTTPTunnelConnector: connection failed\\r\\n\");\n+            sb.append(\"Response received from the proxy:\\r\\n\");\n+            final Iterator iterator = list.iterator();\n+            while (iterator.hasNext()) {\n+                sb.append((String)iterator.next());\n+                sb.append(\"\\r\\n\");\n             }\n-            throw new IOException(msg.toString());\n+            throw new IOException(sb.toString());\n         }\n-        return reader;\n+        return bufferedReader;\n     }\n     \n     static {\n         CRLF = new byte[] { 13, 10 };\n     }\n }\n"}]}
