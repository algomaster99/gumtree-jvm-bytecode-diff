{"diffoscope-json-version": 1, "source1": "first/FastDateParser$TimeZoneStrategy.class", "source2": "second/FastDateParser$TimeZoneStrategy.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,23 +17,24 @@\n     private static final String RFC_822_TIME_ZONE = \"[+-]\\\\d{4}\";\n     private static final String GMT_OPTION = \"GMT[+-]\\\\d{1,2}:\\\\d{2}\";\n     private final Locale locale;\n     private final Map<String, TimeZoneStrategy.TzInfo> tzNames;\n     private static final int ID = 0;\n     \n     TimeZoneStrategy(final Locale locale) {\n-        super((FastDateParser.FastDateParser$1)null);\n+        super((FastDateParser.PatternStrategy)null);\n         this.tzNames = new HashMap();\n         this.locale = locale;\n         final StringBuilder sb = new StringBuilder();\n         sb.append(\"((?iu)[+-]\\\\d{4}|GMT[+-]\\\\d{1,2}:\\\\d{2}\");\n-        final Set<String> sorted = new TreeSet<String>(FastDateParser.access$800());\n-        final String[][] zoneStrings;\n-        final String[][] zones = zoneStrings = DateFormatSymbols.getInstance(locale).getZoneStrings();\n-        for (final String[] zoneNames : zoneStrings) {\n+        final Set<String> sorted = new TreeSet<String>(FastDateParser.access$5());\n+        final String[][] zones = DateFormatSymbols.getInstance(locale).getZoneStrings();\n+        String[][] array;\n+        for (int length = (array = zones).length, j = 0; j < length; ++j) {\n+            final String[] zoneNames = array[j];\n             final String tzId = zoneNames[0];\n             if (!tzId.equalsIgnoreCase(\"GMT\")) {\n                 final TimeZone tz = TimeZone.getTimeZone(tzId);\n                 TimeZoneStrategy.TzInfo tzInfo;\n                 final TimeZoneStrategy.TzInfo standard = tzInfo = new TimeZoneStrategy.TzInfo(tz, false);\n                 for (int i = 1; i < zoneNames.length; ++i) {\n                     switch (i) {\n@@ -52,29 +53,29 @@\n                             this.tzNames.put(key, tzInfo);\n                         }\n                     }\n                 }\n             }\n         }\n         for (final String zoneName : sorted) {\n-            FastDateParser.access$900(sb.append('|'), zoneName);\n+            FastDateParser.access$6(sb.append('|'), zoneName);\n         }\n         sb.append(\")\");\n         this.createPattern(sb);\n     }\n     \n     void setCalendar(final FastDateParser parser, final Calendar cal, final String timeZone) {\n         final TimeZone tz = FastTimeZone.getGmtTimeZone(timeZone);\n         if (tz != null) {\n             cal.setTimeZone(tz);\n         }\n         else {\n             final String lowerCase = timeZone.toLowerCase(this.locale);\n             TimeZoneStrategy.TzInfo tzInfo = (TimeZoneStrategy.TzInfo)this.tzNames.get(lowerCase);\n             if (tzInfo == null) {\n-                tzInfo = this.tzNames.get(lowerCase + '.');\n+                tzInfo = this.tzNames.get(String.valueOf(lowerCase) + '.');\n             }\n             cal.set(16, tzInfo.dstOffset);\n             cal.set(15, tzInfo.zone.getRawOffset());\n         }\n     }\n }\n"}]}
