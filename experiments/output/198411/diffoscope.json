{"diffoscope-json-version": 1, "source1": "first/Pass2Verifier$FAMRAV_Visitor.class", "source2": "second/Pass2Verifier$FAMRAV_Visitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,93 +15,84 @@\n import org.apache.bcel.classfile.ConstantPool;\n import org.apache.bcel.classfile.EmptyVisitor;\n \n private final class FAMRAV_Visitor extends EmptyVisitor\n {\n     private final ConstantPool cp;\n     \n-    private FAMRAV_Visitor(final Pass2Verifier this$0, final JavaClass _jc) {\n+    private FAMRAV_Visitor(final Pass2Verifier this$0, final JavaClass javaClass) {\n         this.this$0 = this$0;\n-        this.cp = _jc.getConstantPool();\n+        this.cp = javaClass.getConstantPool();\n     }\n     \n-    public void visitConstantFieldref(final ConstantFieldref obj) {\n-        if (obj.getTag() != 9) {\n-            throw new ClassConstraintException(\"ConstantFieldref '\" + Pass2Verifier.access$100((Node)obj) + \"' has wrong tag!\");\n-        }\n-        final int name_and_type_index = obj.getNameAndTypeIndex();\n-        final ConstantNameAndType cnat = (ConstantNameAndType)this.cp.getConstant(name_and_type_index);\n-        final String name = ((ConstantUtf8)this.cp.getConstant(cnat.getNameIndex())).getBytes();\n-        if (!Pass2Verifier.access$200(name)) {\n-            throw new ClassConstraintException(\"Invalid field name '\" + name + \"' referenced by '\" + Pass2Verifier.access$100((Node)obj) + \"'.\");\n-        }\n-        final int class_index = obj.getClassIndex();\n-        final ConstantClass cc = (ConstantClass)this.cp.getConstant(class_index);\n-        final String className = ((ConstantUtf8)this.cp.getConstant(cc.getNameIndex())).getBytes();\n-        if (!Pass2Verifier.access$800(className)) {\n-            throw new ClassConstraintException(\"Illegal class name '\" + className + \"' used by '\" + Pass2Verifier.access$100((Node)obj) + \"'.\");\n+    public void visitConstantFieldref(final ConstantFieldref constantFieldref) {\n+        if (constantFieldref.getTag() != 9) {\n+            throw new ClassConstraintException(\"ConstantFieldref '\" + Pass2Verifier.access$100((Node)constantFieldref) + \"' has wrong tag!\");\n+        }\n+        final ConstantNameAndType constantNameAndType = (ConstantNameAndType)this.cp.getConstant(constantFieldref.getNameAndTypeIndex());\n+        final String bytes = ((ConstantUtf8)this.cp.getConstant(constantNameAndType.getNameIndex())).getBytes();\n+        if (!Pass2Verifier.access$200(bytes)) {\n+            throw new ClassConstraintException(\"Invalid field name '\" + bytes + \"' referenced by '\" + Pass2Verifier.access$100((Node)constantFieldref) + \"'.\");\n+        }\n+        final String bytes2 = ((ConstantUtf8)this.cp.getConstant(((ConstantClass)this.cp.getConstant(constantFieldref.getClassIndex())).getNameIndex())).getBytes();\n+        if (!Pass2Verifier.access$800(bytes2)) {\n+            throw new ClassConstraintException(\"Illegal class name '\" + bytes2 + \"' used by '\" + Pass2Verifier.access$100((Node)constantFieldref) + \"'.\");\n         }\n-        final String sig = ((ConstantUtf8)this.cp.getConstant(cnat.getSignatureIndex())).getBytes();\n+        final String bytes3 = ((ConstantUtf8)this.cp.getConstant(constantNameAndType.getSignatureIndex())).getBytes();\n         try {\n-            Type.getType(sig);\n+            Type.getType(bytes3);\n         }\n-        catch (final ClassFormatException cfe) {\n-            throw new ClassConstraintException(\"Illegal descriptor (==signature) '\" + sig + \"' used by '\" + Pass2Verifier.access$100((Node)obj) + \"'.\", (Throwable)cfe);\n+        catch (final ClassFormatException ex) {\n+            throw new ClassConstraintException(\"Illegal descriptor (==signature) '\" + bytes3 + \"' used by '\" + Pass2Verifier.access$100((Node)constantFieldref) + \"'.\", (Throwable)ex);\n         }\n     }\n     \n-    public void visitConstantMethodref(final ConstantMethodref obj) {\n-        if (obj.getTag() != 10) {\n-            throw new ClassConstraintException(\"ConstantMethodref '\" + Pass2Verifier.access$100((Node)obj) + \"' has wrong tag!\");\n-        }\n-        final int name_and_type_index = obj.getNameAndTypeIndex();\n-        final ConstantNameAndType cnat = (ConstantNameAndType)this.cp.getConstant(name_and_type_index);\n-        final String name = ((ConstantUtf8)this.cp.getConstant(cnat.getNameIndex())).getBytes();\n-        if (!Pass2Verifier.access$900(name)) {\n-            throw new ClassConstraintException(\"Invalid (non-interface) method name '\" + name + \"' referenced by '\" + Pass2Verifier.access$100((Node)obj) + \"'.\");\n-        }\n-        final int class_index = obj.getClassIndex();\n-        final ConstantClass cc = (ConstantClass)this.cp.getConstant(class_index);\n-        final String className = ((ConstantUtf8)this.cp.getConstant(cc.getNameIndex())).getBytes();\n-        if (!Pass2Verifier.access$800(className)) {\n-            throw new ClassConstraintException(\"Illegal class name '\" + className + \"' used by '\" + Pass2Verifier.access$100((Node)obj) + \"'.\");\n+    public void visitConstantMethodref(final ConstantMethodref constantMethodref) {\n+        if (constantMethodref.getTag() != 10) {\n+            throw new ClassConstraintException(\"ConstantMethodref '\" + Pass2Verifier.access$100((Node)constantMethodref) + \"' has wrong tag!\");\n+        }\n+        final ConstantNameAndType constantNameAndType = (ConstantNameAndType)this.cp.getConstant(constantMethodref.getNameAndTypeIndex());\n+        final String bytes = ((ConstantUtf8)this.cp.getConstant(constantNameAndType.getNameIndex())).getBytes();\n+        if (!Pass2Verifier.access$900(bytes)) {\n+            throw new ClassConstraintException(\"Invalid (non-interface) method name '\" + bytes + \"' referenced by '\" + Pass2Verifier.access$100((Node)constantMethodref) + \"'.\");\n+        }\n+        final String bytes2 = ((ConstantUtf8)this.cp.getConstant(((ConstantClass)this.cp.getConstant(constantMethodref.getClassIndex())).getNameIndex())).getBytes();\n+        if (!Pass2Verifier.access$800(bytes2)) {\n+            throw new ClassConstraintException(\"Illegal class name '\" + bytes2 + \"' used by '\" + Pass2Verifier.access$100((Node)constantMethodref) + \"'.\");\n         }\n-        final String sig = ((ConstantUtf8)this.cp.getConstant(cnat.getSignatureIndex())).getBytes();\n+        final String bytes3 = ((ConstantUtf8)this.cp.getConstant(constantNameAndType.getSignatureIndex())).getBytes();\n         try {\n-            final Type t = Type.getReturnType(sig);\n-            if (name.equals(\"<init>\") && t != Type.VOID) {\n+            final Type returnType = Type.getReturnType(bytes3);\n+            if (bytes.equals(\"<init>\") && returnType != Type.VOID) {\n                 throw new ClassConstraintException(\"Instance initialization method must have VOID return type.\");\n             }\n         }\n-        catch (final ClassFormatException cfe) {\n-            throw new ClassConstraintException(\"Illegal descriptor (==signature) '\" + sig + \"' used by '\" + Pass2Verifier.access$100((Node)obj) + \"'.\", (Throwable)cfe);\n+        catch (final ClassFormatException ex) {\n+            throw new ClassConstraintException(\"Illegal descriptor (==signature) '\" + bytes3 + \"' used by '\" + Pass2Verifier.access$100((Node)constantMethodref) + \"'.\", (Throwable)ex);\n         }\n     }\n     \n-    public void visitConstantInterfaceMethodref(final ConstantInterfaceMethodref obj) {\n-        if (obj.getTag() != 11) {\n-            throw new ClassConstraintException(\"ConstantInterfaceMethodref '\" + Pass2Verifier.access$100((Node)obj) + \"' has wrong tag!\");\n-        }\n-        final int name_and_type_index = obj.getNameAndTypeIndex();\n-        final ConstantNameAndType cnat = (ConstantNameAndType)this.cp.getConstant(name_and_type_index);\n-        final String name = ((ConstantUtf8)this.cp.getConstant(cnat.getNameIndex())).getBytes();\n-        if (!Pass2Verifier.access$1000(name)) {\n-            throw new ClassConstraintException(\"Invalid (interface) method name '\" + name + \"' referenced by '\" + Pass2Verifier.access$100((Node)obj) + \"'.\");\n-        }\n-        final int class_index = obj.getClassIndex();\n-        final ConstantClass cc = (ConstantClass)this.cp.getConstant(class_index);\n-        final String className = ((ConstantUtf8)this.cp.getConstant(cc.getNameIndex())).getBytes();\n-        if (!Pass2Verifier.access$800(className)) {\n-            throw new ClassConstraintException(\"Illegal class name '\" + className + \"' used by '\" + Pass2Verifier.access$100((Node)obj) + \"'.\");\n+    public void visitConstantInterfaceMethodref(final ConstantInterfaceMethodref constantInterfaceMethodref) {\n+        if (constantInterfaceMethodref.getTag() != 11) {\n+            throw new ClassConstraintException(\"ConstantInterfaceMethodref '\" + Pass2Verifier.access$100((Node)constantInterfaceMethodref) + \"' has wrong tag!\");\n+        }\n+        final ConstantNameAndType constantNameAndType = (ConstantNameAndType)this.cp.getConstant(constantInterfaceMethodref.getNameAndTypeIndex());\n+        final String bytes = ((ConstantUtf8)this.cp.getConstant(constantNameAndType.getNameIndex())).getBytes();\n+        if (!Pass2Verifier.access$1000(bytes)) {\n+            throw new ClassConstraintException(\"Invalid (interface) method name '\" + bytes + \"' referenced by '\" + Pass2Verifier.access$100((Node)constantInterfaceMethodref) + \"'.\");\n+        }\n+        final String bytes2 = ((ConstantUtf8)this.cp.getConstant(((ConstantClass)this.cp.getConstant(constantInterfaceMethodref.getClassIndex())).getNameIndex())).getBytes();\n+        if (!Pass2Verifier.access$800(bytes2)) {\n+            throw new ClassConstraintException(\"Illegal class name '\" + bytes2 + \"' used by '\" + Pass2Verifier.access$100((Node)constantInterfaceMethodref) + \"'.\");\n         }\n-        final String sig = ((ConstantUtf8)this.cp.getConstant(cnat.getSignatureIndex())).getBytes();\n+        final String bytes3 = ((ConstantUtf8)this.cp.getConstant(constantNameAndType.getSignatureIndex())).getBytes();\n         try {\n-            final Type t = Type.getReturnType(sig);\n-            if (name.equals(\"<clinit>\") && t != Type.VOID) {\n-                this.this$0.addMessage(\"Class or interface initialization method '<clinit>' usually has VOID return type instead of '\" + t + \"'. Note this is really not a requirement of The Java Virtual Machine Specification, Second Edition.\");\n+            final Type returnType = Type.getReturnType(bytes3);\n+            if (bytes.equals(\"<clinit>\") && returnType != Type.VOID) {\n+                this.this$0.addMessage(\"Class or interface initialization method '<clinit>' usually has VOID return type instead of '\" + returnType + \"'. Note this is really not a requirement of The Java Virtual Machine Specification, Second Edition.\");\n             }\n         }\n-        catch (final ClassFormatException cfe) {\n-            throw new ClassConstraintException(\"Illegal descriptor (==signature) '\" + sig + \"' used by '\" + Pass2Verifier.access$100((Node)obj) + \"'.\", (Throwable)cfe);\n+        catch (final ClassFormatException ex) {\n+            throw new ClassConstraintException(\"Illegal descriptor (==signature) '\" + bytes3 + \"' used by '\" + Pass2Verifier.access$100((Node)constantInterfaceMethodref) + \"'.\", (Throwable)ex);\n         }\n     }\n }\n"}]}
