{"diffoscope-json-version": 1, "source1": "first/TarUtils.class", "source2": "second/TarUtils.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,548 +1,548 @@\n-  SHA-256 checksum 443ad2775f8cbaa95b226dee6935cd2ba4f49c9e3071b6424ec1cf69fe4f6d3b\n+  SHA-256 checksum 974e092d1752c71a801cf61514016fbdf8d6edb8ac25efce8015bed60a572da7\n   Compiled from \"TarUtils.java\"\n public class org.apache.commons.compress.archivers.tar.TarUtils\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #96                         // org/apache/commons/compress/archivers/tar/TarUtils\n-  super_class: #151                       // java/lang/Object\n+  this_class: #33                         // org/apache/commons/compress/archivers/tar/TarUtils\n+  super_class: #4                         // java/lang/Object\n   interfaces: 0, fields: 3, methods: 29, attributes: 2\n Constant pool:\n-    #1 = Class              #316          // org/apache/commons/compress/archivers/tar/TarConstants\n-    #2 = Methodref          #151.#317     // java/lang/Object.\"<init>\":()V\n-    #3 = Class              #318          // java/lang/IllegalArgumentException\n-    #4 = Class              #319          // java/lang/StringBuilder\n-    #5 = Methodref          #4.#317       // java/lang/StringBuilder.\"<init>\":()V\n-    #6 = String             #320          // Length\n-    #7 = Methodref          #4.#321       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #8 = Methodref          #4.#322       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-    #9 = String             #323          //  must be at least 2\n-   #10 = Methodref          #4.#324       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #11 = Methodref          #3.#325       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #12 = Methodref          #96.#326      // org/apache/commons/compress/archivers/tar/TarUtils.exceptionMessage:([BIIIB)Ljava/lang/String;\n-   #13 = Methodref          #96.#327      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctal:([BII)J\n-   #14 = Methodref          #96.#328      // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryLong:([BIIZ)J\n-   #15 = Methodref          #96.#329      // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryBigInteger:([BIIZ)J\n-   #16 = String             #330          // At offset\n-   #17 = String             #331          // ,\n-   #18 = String             #332          //  byte binary number exceeds maximum signed long value\n-   #19 = Double             2.0d\n-   #21 = Double             8.0d\n-   #23 = Methodref          #333.#334     // java/lang/Math.pow:(DD)D\n-   #24 = Methodref          #335.#336     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #25 = Class              #337          // java/math/BigInteger\n-   #26 = Methodref          #25.#338      // java/math/BigInteger.\"<init>\":([B)V\n-   #27 = Long               -1l\n-   #29 = Methodref          #25.#339      // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #30 = Methodref          #25.#340      // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #31 = Methodref          #25.#341      // java/math/BigInteger.not:()Ljava/math/BigInteger;\n-   #32 = Methodref          #25.#342      // java/math/BigInteger.bitLength:()I\n-   #33 = Methodref          #25.#343      // java/math/BigInteger.longValue:()J\n-   #34 = Class              #344          // java/lang/String\n-   #35 = Methodref          #345.#346     // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n-   #36 = Methodref          #34.#347      // java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n-   #37 = String             #348          // \\u0000\n-   #38 = String             #349          // {NUL}\n-   #39 = Methodref          #34.#350      // java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-   #40 = String             #351          // Invalid byte\n-   #41 = String             #352          //  at offset\n-   #42 = String             #353          //  in \\'\n-   #43 = String             #354          // \\' len=\n-   #44 = Fieldref           #96.#355      // org/apache/commons/compress/archivers/tar/TarUtils.DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #45 = Methodref          #96.#356      // org/apache/commons/compress/archivers/tar/TarUtils.parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-   #46 = Class              #357          // java/io/IOException\n-   #47 = Fieldref           #96.#358      // org/apache/commons/compress/archivers/tar/TarUtils.FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #48 = Class              #359          // java/io/UncheckedIOException\n-   #49 = Methodref          #48.#360      // java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n-   #50 = InterfaceMethodref #361.#362     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #51 = String             #363          //\n-   #52 = Methodref          #96.#364      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctalOrBinary:([BII)J\n-   #53 = Class              #365          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-   #54 = Methodref          #53.#366      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-   #55 = Class              #367          // java/util/ArrayList\n-   #56 = Methodref          #55.#317      // java/util/ArrayList.\"<init>\":()V\n-   #57 = Methodref          #96.#368      // org/apache/commons/compress/archivers/tar/TarUtils.parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-   #58 = Methodref          #53.#369      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n-   #59 = String             #370          // Corrupted TAR archive, sparse entry with negative offset\n-   #60 = Methodref          #46.#325      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #61 = Methodref          #53.#371      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-   #62 = String             #372          // Corrupted TAR archive, sparse entry with negative numbytes\n-   #63 = InterfaceMethodref #223.#373     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #64 = String             #374          // Corrupted TAR archive, sparse entry is invalid\n-   #65 = Methodref          #46.#375      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #66 = Methodref          #376.#377     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-   #67 = Methodref          #96.#378      // org/apache/commons/compress/archivers/tar/TarUtils.formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-   #68 = Methodref          #34.#379      // java/lang/String.length:()I\n-   #69 = InterfaceMethodref #361.#380     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-   #70 = Methodref          #233.#381     // java/nio/ByteBuffer.limit:()I\n-   #71 = Methodref          #34.#382      // java/lang/String.substring:(II)Ljava/lang/String;\n-   #72 = Methodref          #233.#383     // java/nio/ByteBuffer.position:()I\n-   #73 = Methodref          #233.#384     // java/nio/ByteBuffer.array:()[B\n-   #74 = Methodref          #233.#385     // java/nio/ByteBuffer.arrayOffset:()I\n-   #75 = Long               7l\n-   #77 = Methodref          #4.#386       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #78 = String             #387          // =\n-   #79 = Methodref          #289.#388     // java/lang/Long.toOctalString:(J)Ljava/lang/String;\n-   #80 = String             #389          //  will not fit in octal number buffer of length\n-   #81 = Methodref          #96.#390      // org/apache/commons/compress/archivers/tar/TarUtils.formatUnsignedOctalString:(J[BII)V\n-   #82 = Long               2097151l\n-   #84 = Long               8589934591l\n-   #86 = Methodref          #96.#391      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongOctalBytes:(J[BII)I\n-   #87 = Methodref          #96.#392      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongBinary:(J[BIIZ)V\n-   #88 = Methodref          #96.#393      // org/apache/commons/compress/archivers/tar/TarUtils.formatBigIntegerBinary:(J[BIIZ)V\n-   #89 = Methodref          #333.#394     // java/lang/Math.abs:(J)J\n-   #90 = String             #395          // Value\n-   #91 = String             #396          //  is too large for\n-   #92 = String             #397          //  byte field.\n-   #93 = Long               255l\n-   #95 = Methodref          #25.#398      // java/math/BigInteger.toByteArray:()[B\n-   #96 = Class              #399          // org/apache/commons/compress/archivers/tar/TarUtils\n-   #97 = Methodref          #96.#400      // org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-   #98 = Class              #401          // java/util/HashMap\n-   #99 = Methodref          #98.#402      // java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n-  #100 = Methodref          #290.#403     // java/io/InputStream.read:()I\n-  #101 = Class              #404          // java/io/ByteArrayOutputStream\n-  #102 = Methodref          #101.#317     // java/io/ByteArrayOutputStream.\"<init>\":()V\n-  #103 = Class              #405          // org/apache/commons/compress/utils/CharsetNames\n-  #104 = String             #406          // UTF-8\n-  #105 = Methodref          #101.#407     // java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n-  #106 = InterfaceMethodref #288.#408     // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #107 = String             #409          // Paxheader value size\n-  #108 = String             #410          //  exceeds size of header record\n-  #109 = Methodref          #411.#412     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n-  #110 = String             #413          // Failed to read Paxheader. Expected\n-  #111 = String             #414          //  bytes, read\n-  #112 = String             #415          // Failed to read Paxheader.Value should end with a newline\n-  #113 = Fieldref           #416.#417     // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n-  #114 = InterfaceMethodref #288.#418     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #115 = String             #419          // GNU.sparse.offset\n-  #116 = Methodref          #34.#420      // java/lang/String.equals:(Ljava/lang/Object;)Z\n-  #117 = Methodref          #289.#343     // java/lang/Long.longValue:()J\n-  #118 = Methodref          #289.#421     // java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-  #119 = Class              #422          // java/lang/NumberFormatException\n-  #120 = String             #423          // Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n-  #121 = String             #424          // Failed to read Paxheader.GNU.sparse.offset contains negative value\n-  #122 = String             #425          // GNU.sparse.numbytes\n-  #123 = String             #426          // Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-  #124 = Methodref          #289.#427     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n-  #125 = String             #428          // Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n-  #126 = String             #429          // Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n-  #127 = Methodref          #101.#430     // java/io/ByteArrayOutputStream.write:(I)V\n-  #128 = String             #431          // Failed to read Paxheader. Encountered a non-number while reading length\n-  #129 = Methodref          #96.#432      // org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-  #130 = Methodref          #46.#433      // java/io/IOException.getMessage:()Ljava/lang/String;\n-  #131 = Methodref          #48.#434      // java/io/UncheckedIOException.\"<init>\":(Ljava/lang/String;Ljava/io/IOException;)V\n-  #132 = String             #435          // ,\n-  #133 = Methodref          #34.#436      // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n-  #134 = String             #437          // Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n-  #135 = String             #438          // Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n-  #136 = String             #439          // Corrupted TAR archive. Sparse struct offset contains negative value\n-  #137 = String             #440          // Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n-  #138 = String             #441          // Corrupted TAR archive. Sparse struct numbytes contains negative value\n-  #139 = Methodref          #96.#442      // org/apache/commons/compress/archivers/tar/TarUtils.readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-  #140 = String             #443          // Corrupted TAR archive. Negative value in sparse headers block\n-  #141 = String             #444          // Corrupted TAR archive. Sparse header block offset contains negative value\n-  #142 = String             #445          // Corrupted TAR archive. Sparse header block numbytes contains negative value\n-  #143 = Methodref          #411.#446     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-  #144 = String             #447          // Unexpected EOF when reading parse information of 1.X PAX format\n-  #145 = String             #448          // Corrupted TAR archive. Non-numeric value in sparse headers block\n-  #146 = Long               10l\n-  #148 = Methodref          #449.#450     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #149 = Class              #451          // org/apache/commons/compress/archivers/tar/TarUtils$1\n-  #150 = Methodref          #149.#317     // org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n-  #151 = Class              #452          // java/lang/Object\n-  #152 = Utf8               InnerClasses\n-  #153 = Utf8               BYTE_MASK\n-  #154 = Utf8               I\n-  #155 = Utf8               ConstantValue\n-  #156 = Integer            255\n-  #157 = Utf8               DEFAULT_ENCODING\n-  #158 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #159 = Utf8               FALLBACK_ENCODING\n-  #160 = Utf8               <init>\n-  #161 = Utf8               ()V\n-  #162 = Utf8               Code\n-  #163 = Utf8               LineNumberTable\n-  #164 = Utf8               LocalVariableTable\n-  #165 = Utf8               this\n-  #166 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarUtils;\n-  #167 = Utf8               parseOctal\n-  #168 = Utf8               ([BII)J\n-  #169 = Utf8               currentByte\n-  #170 = Utf8               B\n-  #171 = Utf8               buffer\n-  #172 = Utf8               [B\n-  #173 = Utf8               offset\n-  #174 = Utf8               length\n-  #175 = Utf8               result\n-  #176 = Utf8               J\n-  #177 = Utf8               end\n-  #178 = Utf8               start\n-  #179 = Utf8               trailer\n-  #180 = Utf8               StackMapTable\n-  #181 = Utf8               parseOctalOrBinary\n-  #182 = Utf8               negative\n-  #183 = Utf8               Z\n-  #184 = Utf8               parseBinaryLong\n-  #185 = Utf8               ([BIIZ)J\n-  #186 = Utf8               i\n-  #187 = Utf8               val\n-  #188 = Utf8               parseBinaryBigInteger\n-  #189 = Utf8               remainder\n-  #190 = Utf8               Ljava/math/BigInteger;\n-  #191 = Class              #172          // \"[B\"\n-  #192 = Utf8               parseBoolean\n-  #193 = Utf8               ([BI)Z\n-  #194 = Utf8               exceptionMessage\n-  #195 = Utf8               ([BIIIB)Ljava/lang/String;\n-  #196 = Utf8               current\n-  #197 = Utf8               string\n-  #198 = Utf8               Ljava/lang/String;\n-  #199 = Utf8               parseName\n-  #200 = Utf8               ([BII)Ljava/lang/String;\n-  #201 = Utf8               ex2\n-  #202 = Utf8               Ljava/io/IOException;\n-  #203 = Utf8               ex\n-  #204 = Utf8               ([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-  #205 = Utf8               b\n-  #206 = Utf8               encoding\n-  #207 = Utf8               len\n-  #208 = Utf8               Exceptions\n-  #209 = Utf8               parseSparse\n-  #210 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-  #211 = Utf8               sparseOffset\n-  #212 = Utf8               sparseNumbytes\n-  #213 = Utf8               readSparseStructs\n-  #214 = Utf8               ([BII)Ljava/util/List;\n-  #215 = Utf8               sparseHeader\n-  #216 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-  #217 = Utf8               Ljava/lang/IllegalArgumentException;\n-  #218 = Utf8               entries\n-  #219 = Utf8               sparseHeaders\n-  #220 = Utf8               Ljava/util/List;\n-  #221 = Utf8               LocalVariableTypeTable\n-  #222 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #223 = Class              #453          // java/util/List\n-  #224 = Utf8               Signature\n-  #225 = Utf8               ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #226 = Utf8               formatNameBytes\n-  #227 = Utf8               (Ljava/lang/String;[BII)I\n-  #228 = Utf8               name\n-  #229 = Utf8               buf\n-  #230 = Utf8               (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-  #231 = Utf8               Ljava/nio/ByteBuffer;\n-  #232 = Utf8               limit\n-  #233 = Class              #454          // java/nio/ByteBuffer\n-  #234 = Utf8               formatUnsignedOctalString\n-  #235 = Utf8               (J[BII)V\n-  #236 = Utf8               value\n-  #237 = Utf8               remaining\n-  #238 = Utf8               formatOctalBytes\n-  #239 = Utf8               (J[BII)I\n-  #240 = Utf8               idx\n-  #241 = Utf8               formatLongOctalBytes\n-  #242 = Utf8               formatLongOctalOrBinaryBytes\n-  #243 = Utf8               maxAsOctalChar\n-  #244 = Utf8               formatLongBinary\n-  #245 = Utf8               (J[BIIZ)V\n-  #246 = Utf8               bits\n-  #247 = Utf8               max\n-  #248 = Utf8               formatBigIntegerBinary\n-  #249 = Utf8               off\n-  #250 = Utf8               fill\n-  #251 = Utf8               formatCheckSumOctalBytes\n-  #252 = Utf8               computeCheckSum\n-  #253 = Utf8               ([B)J\n-  #254 = Utf8               element\n-  #255 = Utf8               sum\n-  #256 = Utf8               verifyCheckSum\n-  #257 = Utf8               ([B)Z\n-  #258 = Utf8               header\n-  #259 = Utf8               storedSum\n-  #260 = Utf8               unsignedSum\n-  #261 = Utf8               signedSum\n-  #262 = Utf8               parsePaxHeaders\n-  #263 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;)Ljava/util/Map;\n-  #264 = Utf8               inputStream\n-  #265 = Utf8               Ljava/io/InputStream;\n-  #266 = Utf8               globalPaxHeaders\n-  #267 = Utf8               Ljava/util/Map;\n-  #268 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #269 = Utf8               Deprecated\n-  #270 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #271 = Utf8               RuntimeVisibleAnnotations\n-  #272 = Utf8               Ljava/lang/Deprecated;\n-  #273 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #274 = Utf8               Ljava/lang/NumberFormatException;\n-  #275 = Utf8               numbytes\n-  #276 = Utf8               rest\n-  #277 = Utf8               got\n-  #278 = Utf8               keyword\n-  #279 = Utf8               restLen\n-  #280 = Utf8               coll\n-  #281 = Utf8               Ljava/io/ByteArrayOutputStream;\n-  #282 = Utf8               ch\n-  #283 = Utf8               read\n-  #284 = Utf8               headerSize\n-  #285 = Utf8               headers\n-  #286 = Utf8               Ljava/lang/Long;\n-  #287 = Utf8               totalRead\n-  #288 = Class              #455          // java/util/Map\n-  #289 = Class              #456          // java/lang/Long\n-  #290 = Class              #457          // java/io/InputStream\n-  #291 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #292 = Utf8               parsePAX01SparseHeaders\n-  #293 = Utf8               (Ljava/lang/String;)Ljava/util/List;\n-  #294 = Utf8               sparseMap\n-  #295 = Utf8               (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #296 = Utf8               parseFromPAX01SparseHeaders\n-  #297 = Utf8               sparseHeaderStrings\n-  #298 = Utf8               [Ljava/lang/String;\n-  #299 = Class              #298          // \"[Ljava/lang/String;\"\n-  #300 = Utf8               parsePAX1XSparseHeaders\n-  #301 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List;\n-  #302 = Utf8               recordSize\n-  #303 = Utf8               bytesRead\n-  #304 = Utf8               readResult\n-  #305 = Utf8               [J\n-  #306 = Utf8               sparseHeadersCount\n-  #307 = Utf8               bytesToSkip\n-  #308 = Class              #305          // \"[J\"\n-  #309 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #310 = Utf8               readLineOfNumberForPax1X\n-  #311 = Utf8               (Ljava/io/InputStream;)[J\n-  #312 = Utf8               number\n-  #313 = Utf8               <clinit>\n-  #314 = Utf8               SourceFile\n-  #315 = Utf8               TarUtils.java\n-  #316 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n-  #317 = NameAndType        #160:#161     // \"<init>\":()V\n-  #318 = Utf8               java/lang/IllegalArgumentException\n-  #319 = Utf8               java/lang/StringBuilder\n-  #320 = Utf8               Length\n-  #321 = NameAndType        #458:#459     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #322 = NameAndType        #458:#460     // append:(I)Ljava/lang/StringBuilder;\n-  #323 = Utf8                must be at least 2\n-  #324 = NameAndType        #461:#462     // toString:()Ljava/lang/String;\n-  #325 = NameAndType        #160:#463     // \"<init>\":(Ljava/lang/String;)V\n-  #326 = NameAndType        #194:#195     // exceptionMessage:([BIIIB)Ljava/lang/String;\n-  #327 = NameAndType        #167:#168     // parseOctal:([BII)J\n-  #328 = NameAndType        #184:#185     // parseBinaryLong:([BIIZ)J\n-  #329 = NameAndType        #188:#185     // parseBinaryBigInteger:([BIIZ)J\n-  #330 = Utf8               At offset\n-  #331 = Utf8               ,\n-  #332 = Utf8                byte binary number exceeds maximum signed long value\n-  #333 = Class              #464          // java/lang/Math\n-  #334 = NameAndType        #465:#466     // pow:(DD)D\n-  #335 = Class              #467          // java/lang/System\n-  #336 = NameAndType        #468:#469     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #337 = Utf8               java/math/BigInteger\n-  #338 = NameAndType        #160:#470     // \"<init>\":([B)V\n-  #339 = NameAndType        #471:#472     // valueOf:(J)Ljava/math/BigInteger;\n-  #340 = NameAndType        #473:#474     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #341 = NameAndType        #475:#476     // not:()Ljava/math/BigInteger;\n-  #342 = NameAndType        #477:#478     // bitLength:()I\n-  #343 = NameAndType        #479:#480     // longValue:()J\n-  #344 = Utf8               java/lang/String\n-  #345 = Class              #481          // java/nio/charset/Charset\n-  #346 = NameAndType        #482:#483     // defaultCharset:()Ljava/nio/charset/Charset;\n-  #347 = NameAndType        #160:#484     // \"<init>\":([BIILjava/nio/charset/Charset;)V\n-  #348 = Utf8               \\u0000\n-  #349 = Utf8               {NUL}\n-  #350 = NameAndType        #485:#486     // replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-  #351 = Utf8               Invalid byte\n-  #352 = Utf8                at offset\n-  #353 = Utf8                in \\'\n-  #354 = Utf8               \\' len=\n-  #355 = NameAndType        #157:#158     // DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #356 = NameAndType        #199:#204     // parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-  #357 = Utf8               java/io/IOException\n-  #358 = NameAndType        #159:#158     // FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #359 = Utf8               java/io/UncheckedIOException\n-  #360 = NameAndType        #160:#487     // \"<init>\":(Ljava/io/IOException;)V\n-  #361 = Class              #488          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #362 = NameAndType        #489:#490     // decode:([B)Ljava/lang/String;\n-  #363 = Utf8\n-  #364 = NameAndType        #181:#168     // parseOctalOrBinary:([BII)J\n-  #365 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-  #366 = NameAndType        #160:#491     // \"<init>\":(JJ)V\n-  #367 = Utf8               java/util/ArrayList\n-  #368 = NameAndType        #209:#210     // parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-  #369 = NameAndType        #492:#480     // getOffset:()J\n-  #370 = Utf8               Corrupted TAR archive, sparse entry with negative offset\n-  #371 = NameAndType        #493:#480     // getNumbytes:()J\n-  #372 = Utf8               Corrupted TAR archive, sparse entry with negative numbytes\n-  #373 = NameAndType        #473:#494     // add:(Ljava/lang/Object;)Z\n-  #374 = Utf8               Corrupted TAR archive, sparse entry is invalid\n-  #375 = NameAndType        #160:#495     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #376 = Class              #496          // java/util/Collections\n-  #377 = NameAndType        #497:#498     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-  #378 = NameAndType        #226:#230     // formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-  #379 = NameAndType        #174:#478     // length:()I\n-  #380 = NameAndType        #499:#500     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #381 = NameAndType        #232:#478     // limit:()I\n-  #382 = NameAndType        #501:#502     // substring:(II)Ljava/lang/String;\n-  #383 = NameAndType        #503:#478     // position:()I\n-  #384 = NameAndType        #504:#505     // array:()[B\n-  #385 = NameAndType        #506:#478     // arrayOffset:()I\n-  #386 = NameAndType        #458:#507     // append:(J)Ljava/lang/StringBuilder;\n-  #387 = Utf8               =\n-  #388 = NameAndType        #508:#509     // toOctalString:(J)Ljava/lang/String;\n-  #389 = Utf8                will not fit in octal number buffer of length\n-  #390 = NameAndType        #234:#235     // formatUnsignedOctalString:(J[BII)V\n-  #391 = NameAndType        #241:#239     // formatLongOctalBytes:(J[BII)I\n-  #392 = NameAndType        #244:#245     // formatLongBinary:(J[BIIZ)V\n-  #393 = NameAndType        #248:#245     // formatBigIntegerBinary:(J[BIIZ)V\n-  #394 = NameAndType        #510:#511     // abs:(J)J\n-  #395 = Utf8               Value\n-  #396 = Utf8                is too large for\n-  #397 = Utf8                byte field.\n-  #398 = NameAndType        #512:#505     // toByteArray:()[B\n-  #399 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n-  #400 = NameAndType        #262:#273     // parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #401 = Utf8               java/util/HashMap\n-  #402 = NameAndType        #160:#513     // \"<init>\":(Ljava/util/Map;)V\n-  #403 = NameAndType        #283:#478     // read:()I\n-  #404 = Utf8               java/io/ByteArrayOutputStream\n-  #405 = Utf8               org/apache/commons/compress/utils/CharsetNames\n-  #406 = Utf8               UTF-8\n-  #407 = NameAndType        #461:#514     // toString:(Ljava/lang/String;)Ljava/lang/String;\n-  #408 = NameAndType        #515:#516     // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #409 = Utf8               Paxheader value size\n-  #410 = Utf8                exceeds size of header record\n-  #411 = Class              #517          // org/apache/commons/compress/utils/IOUtils\n-  #412 = NameAndType        #518:#519     // readRange:(Ljava/io/InputStream;I)[B\n-  #413 = Utf8               Failed to read Paxheader. Expected\n-  #414 = Utf8                bytes, read\n-  #415 = Utf8               Failed to read Paxheader.Value should end with a newline\n-  #416 = Class              #520          // java/nio/charset/StandardCharsets\n-  #417 = NameAndType        #521:#522     // UTF_8:Ljava/nio/charset/Charset;\n-  #418 = NameAndType        #523:#524     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #419 = Utf8               GNU.sparse.offset\n-  #420 = NameAndType        #525:#494     // equals:(Ljava/lang/Object;)Z\n-  #421 = NameAndType        #471:#526     // valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-  #422 = Utf8               java/lang/NumberFormatException\n-  #423 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n-  #424 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains negative value\n-  #425 = Utf8               GNU.sparse.numbytes\n-  #426 = Utf8               Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-  #427 = NameAndType        #527:#528     // parseLong:(Ljava/lang/String;)J\n-  #428 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n-  #429 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n-  #430 = NameAndType        #529:#530     // write:(I)V\n-  #431 = Utf8               Failed to read Paxheader. Encountered a non-number while reading length\n-  #432 = NameAndType        #296:#293     // parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-  #433 = NameAndType        #531:#462     // getMessage:()Ljava/lang/String;\n-  #434 = NameAndType        #160:#532     // \"<init>\":(Ljava/lang/String;Ljava/io/IOException;)V\n-  #435 = Utf8               ,\n-  #436 = NameAndType        #533:#534     // split:(Ljava/lang/String;)[Ljava/lang/String;\n-  #437 = Utf8               Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n-  #438 = Utf8               Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n-  #439 = Utf8               Corrupted TAR archive. Sparse struct offset contains negative value\n-  #440 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n-  #441 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains negative value\n-  #442 = NameAndType        #310:#311     // readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-  #443 = Utf8               Corrupted TAR archive. Negative value in sparse headers block\n-  #444 = Utf8               Corrupted TAR archive. Sparse header block offset contains negative value\n-  #445 = Utf8               Corrupted TAR archive. Sparse header block numbytes contains negative value\n-  #446 = NameAndType        #535:#536     // skip:(Ljava/io/InputStream;J)J\n-  #447 = Utf8               Unexpected EOF when reading parse information of 1.X PAX format\n-  #448 = Utf8               Corrupted TAR archive. Non-numeric value in sparse headers block\n-  #449 = Class              #537          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #450 = NameAndType        #538:#539     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #451 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils$1\n-  #452 = Utf8               java/lang/Object\n-  #453 = Utf8               java/util/List\n-  #454 = Utf8               java/nio/ByteBuffer\n-  #455 = Utf8               java/util/Map\n-  #456 = Utf8               java/lang/Long\n-  #457 = Utf8               java/io/InputStream\n-  #458 = Utf8               append\n-  #459 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #460 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #461 = Utf8               toString\n-  #462 = Utf8               ()Ljava/lang/String;\n-  #463 = Utf8               (Ljava/lang/String;)V\n-  #464 = Utf8               java/lang/Math\n-  #465 = Utf8               pow\n-  #466 = Utf8               (DD)D\n-  #467 = Utf8               java/lang/System\n-  #468 = Utf8               arraycopy\n-  #469 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #470 = Utf8               ([B)V\n-  #471 = Utf8               valueOf\n-  #472 = Utf8               (J)Ljava/math/BigInteger;\n-  #473 = Utf8               add\n-  #474 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #475 = Utf8               not\n-  #476 = Utf8               ()Ljava/math/BigInteger;\n-  #477 = Utf8               bitLength\n-  #478 = Utf8               ()I\n-  #479 = Utf8               longValue\n-  #480 = Utf8               ()J\n-  #481 = Utf8               java/nio/charset/Charset\n-  #482 = Utf8               defaultCharset\n-  #483 = Utf8               ()Ljava/nio/charset/Charset;\n-  #484 = Utf8               ([BIILjava/nio/charset/Charset;)V\n-  #485 = Utf8               replace\n-  #486 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-  #487 = Utf8               (Ljava/io/IOException;)V\n-  #488 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #489 = Utf8               decode\n-  #490 = Utf8               ([B)Ljava/lang/String;\n-  #491 = Utf8               (JJ)V\n-  #492 = Utf8               getOffset\n-  #493 = Utf8               getNumbytes\n-  #494 = Utf8               (Ljava/lang/Object;)Z\n-  #495 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #496 = Utf8               java/util/Collections\n-  #497 = Utf8               unmodifiableList\n-  #498 = Utf8               (Ljava/util/List;)Ljava/util/List;\n-  #499 = Utf8               encode\n-  #500 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #501 = Utf8               substring\n-  #502 = Utf8               (II)Ljava/lang/String;\n-  #503 = Utf8               position\n-  #504 = Utf8               array\n-  #505 = Utf8               ()[B\n-  #506 = Utf8               arrayOffset\n-  #507 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #508 = Utf8               toOctalString\n-  #509 = Utf8               (J)Ljava/lang/String;\n-  #510 = Utf8               abs\n-  #511 = Utf8               (J)J\n-  #512 = Utf8               toByteArray\n-  #513 = Utf8               (Ljava/util/Map;)V\n-  #514 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #515 = Utf8               remove\n-  #516 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #517 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #518 = Utf8               readRange\n-  #519 = Utf8               (Ljava/io/InputStream;I)[B\n-  #520 = Utf8               java/nio/charset/StandardCharsets\n-  #521 = Utf8               UTF_8\n-  #522 = Utf8               Ljava/nio/charset/Charset;\n-  #523 = Utf8               put\n-  #524 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #525 = Utf8               equals\n-  #526 = Utf8               (Ljava/lang/String;)Ljava/lang/Long;\n-  #527 = Utf8               parseLong\n-  #528 = Utf8               (Ljava/lang/String;)J\n-  #529 = Utf8               write\n-  #530 = Utf8               (I)V\n-  #531 = Utf8               getMessage\n-  #532 = Utf8               (Ljava/lang/String;Ljava/io/IOException;)V\n-  #533 = Utf8               split\n-  #534 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n-  #535 = Utf8               skip\n-  #536 = Utf8               (Ljava/io/InputStream;J)J\n-  #537 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #538 = Utf8               getZipEncoding\n-  #539 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/tar/TarConstants\n+    #2 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n+    #3 = Methodref          #4.#5         // java/lang/Object.\"<init>\":()V\n+    #4 = Class              #6            // java/lang/Object\n+    #5 = NameAndType        #7:#8         // \"<init>\":()V\n+    #6 = Utf8               java/lang/Object\n+    #7 = Utf8               <init>\n+    #8 = Utf8               ()V\n+    #9 = Class              #10           // java/lang/IllegalArgumentException\n+   #10 = Utf8               java/lang/IllegalArgumentException\n+   #11 = Class              #12           // java/lang/StringBuilder\n+   #12 = Utf8               java/lang/StringBuilder\n+   #13 = Methodref          #11.#5        // java/lang/StringBuilder.\"<init>\":()V\n+   #14 = String             #15           // Length\n+   #15 = Utf8               Length\n+   #16 = Methodref          #11.#17       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #17 = NameAndType        #18:#19       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #18 = Utf8               append\n+   #19 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #20 = Methodref          #11.#21       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #21 = NameAndType        #18:#22       // append:(I)Ljava/lang/StringBuilder;\n+   #22 = Utf8               (I)Ljava/lang/StringBuilder;\n+   #23 = String             #24           //  must be at least 2\n+   #24 = Utf8                must be at least 2\n+   #25 = Methodref          #11.#26       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #26 = NameAndType        #27:#28       // toString:()Ljava/lang/String;\n+   #27 = Utf8               toString\n+   #28 = Utf8               ()Ljava/lang/String;\n+   #29 = Methodref          #9.#30        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #30 = NameAndType        #7:#31        // \"<init>\":(Ljava/lang/String;)V\n+   #31 = Utf8               (Ljava/lang/String;)V\n+   #32 = Methodref          #33.#34       // org/apache/commons/compress/archivers/tar/TarUtils.exceptionMessage:([BIIIB)Ljava/lang/String;\n+   #33 = Class              #35           // org/apache/commons/compress/archivers/tar/TarUtils\n+   #34 = NameAndType        #36:#37       // exceptionMessage:([BIIIB)Ljava/lang/String;\n+   #35 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n+   #36 = Utf8               exceptionMessage\n+   #37 = Utf8               ([BIIIB)Ljava/lang/String;\n+   #38 = Methodref          #33.#39       // org/apache/commons/compress/archivers/tar/TarUtils.parseOctal:([BII)J\n+   #39 = NameAndType        #40:#41       // parseOctal:([BII)J\n+   #40 = Utf8               parseOctal\n+   #41 = Utf8               ([BII)J\n+   #42 = Methodref          #33.#43       // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryLong:([BIIZ)J\n+   #43 = NameAndType        #44:#45       // parseBinaryLong:([BIIZ)J\n+   #44 = Utf8               parseBinaryLong\n+   #45 = Utf8               ([BIIZ)J\n+   #46 = Methodref          #33.#47       // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryBigInteger:([BIIZ)J\n+   #47 = NameAndType        #48:#45       // parseBinaryBigInteger:([BIIZ)J\n+   #48 = Utf8               parseBinaryBigInteger\n+   #49 = String             #50           // At offset\n+   #50 = Utf8               At offset\n+   #51 = String             #52           // ,\n+   #52 = Utf8               ,\n+   #53 = String             #54           //  byte binary number exceeds maximum signed long value\n+   #54 = Utf8                byte binary number exceeds maximum signed long value\n+   #55 = Double             2.0d\n+   #57 = Double             8.0d\n+   #59 = Methodref          #60.#61       // java/lang/Math.pow:(DD)D\n+   #60 = Class              #62           // java/lang/Math\n+   #61 = NameAndType        #63:#64       // pow:(DD)D\n+   #62 = Utf8               java/lang/Math\n+   #63 = Utf8               pow\n+   #64 = Utf8               (DD)D\n+   #65 = Methodref          #66.#67       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #66 = Class              #68           // java/lang/System\n+   #67 = NameAndType        #69:#70       // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #68 = Utf8               java/lang/System\n+   #69 = Utf8               arraycopy\n+   #70 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #71 = Class              #72           // java/math/BigInteger\n+   #72 = Utf8               java/math/BigInteger\n+   #73 = Methodref          #71.#74       // java/math/BigInteger.\"<init>\":([B)V\n+   #74 = NameAndType        #7:#75        // \"<init>\":([B)V\n+   #75 = Utf8               ([B)V\n+   #76 = Long               -1l\n+   #78 = Methodref          #71.#79       // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+   #79 = NameAndType        #80:#81       // valueOf:(J)Ljava/math/BigInteger;\n+   #80 = Utf8               valueOf\n+   #81 = Utf8               (J)Ljava/math/BigInteger;\n+   #82 = Methodref          #71.#83       // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #83 = NameAndType        #84:#85       // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #84 = Utf8               add\n+   #85 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #86 = Methodref          #71.#87       // java/math/BigInteger.not:()Ljava/math/BigInteger;\n+   #87 = NameAndType        #88:#89       // not:()Ljava/math/BigInteger;\n+   #88 = Utf8               not\n+   #89 = Utf8               ()Ljava/math/BigInteger;\n+   #90 = Methodref          #71.#91       // java/math/BigInteger.bitLength:()I\n+   #91 = NameAndType        #92:#93       // bitLength:()I\n+   #92 = Utf8               bitLength\n+   #93 = Utf8               ()I\n+   #94 = Methodref          #71.#95       // java/math/BigInteger.longValue:()J\n+   #95 = NameAndType        #96:#97       // longValue:()J\n+   #96 = Utf8               longValue\n+   #97 = Utf8               ()J\n+   #98 = Class              #99           // java/lang/String\n+   #99 = Utf8               java/lang/String\n+  #100 = Methodref          #101.#102     // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+  #101 = Class              #103          // java/nio/charset/Charset\n+  #102 = NameAndType        #104:#105     // defaultCharset:()Ljava/nio/charset/Charset;\n+  #103 = Utf8               java/nio/charset/Charset\n+  #104 = Utf8               defaultCharset\n+  #105 = Utf8               ()Ljava/nio/charset/Charset;\n+  #106 = Methodref          #98.#107      // java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n+  #107 = NameAndType        #7:#108       // \"<init>\":([BIILjava/nio/charset/Charset;)V\n+  #108 = Utf8               ([BIILjava/nio/charset/Charset;)V\n+  #109 = String             #110          // \\u0000\n+  #110 = Utf8               \\u0000\n+  #111 = String             #112          // {NUL}\n+  #112 = Utf8               {NUL}\n+  #113 = Methodref          #98.#114      // java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+  #114 = NameAndType        #115:#116     // replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+  #115 = Utf8               replace\n+  #116 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+  #117 = String             #118          // Invalid byte\n+  #118 = Utf8               Invalid byte\n+  #119 = String             #120          //  at offset\n+  #120 = Utf8                at offset\n+  #121 = String             #122          //  in \\'\n+  #122 = Utf8                in \\'\n+  #123 = String             #124          // \\' len=\n+  #124 = Utf8               \\' len=\n+  #125 = Fieldref           #33.#126      // org/apache/commons/compress/archivers/tar/TarUtils.DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #126 = NameAndType        #127:#128     // DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #127 = Utf8               DEFAULT_ENCODING\n+  #128 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #129 = Methodref          #33.#130      // org/apache/commons/compress/archivers/tar/TarUtils.parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+  #130 = NameAndType        #131:#132     // parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+  #131 = Utf8               parseName\n+  #132 = Utf8               ([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+  #133 = Class              #134          // java/io/IOException\n+  #134 = Utf8               java/io/IOException\n+  #135 = Fieldref           #33.#136      // org/apache/commons/compress/archivers/tar/TarUtils.FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #136 = NameAndType        #137:#128     // FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #137 = Utf8               FALLBACK_ENCODING\n+  #138 = Class              #139          // java/io/UncheckedIOException\n+  #139 = Utf8               java/io/UncheckedIOException\n+  #140 = Methodref          #138.#141     // java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n+  #141 = NameAndType        #7:#142       // \"<init>\":(Ljava/io/IOException;)V\n+  #142 = Utf8               (Ljava/io/IOException;)V\n+  #143 = InterfaceMethodref #144.#145     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+  #144 = Class              #146          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #145 = NameAndType        #147:#148     // decode:([B)Ljava/lang/String;\n+  #146 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #147 = Utf8               decode\n+  #148 = Utf8               ([B)Ljava/lang/String;\n+  #149 = String             #150          //\n+  #150 = Utf8\n+  #151 = Methodref          #33.#152      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctalOrBinary:([BII)J\n+  #152 = NameAndType        #153:#41      // parseOctalOrBinary:([BII)J\n+  #153 = Utf8               parseOctalOrBinary\n+  #154 = Class              #155          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+  #155 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+  #156 = Methodref          #154.#157     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+  #157 = NameAndType        #7:#158       // \"<init>\":(JJ)V\n+  #158 = Utf8               (JJ)V\n+  #159 = Class              #160          // java/util/ArrayList\n+  #160 = Utf8               java/util/ArrayList\n+  #161 = Methodref          #159.#5       // java/util/ArrayList.\"<init>\":()V\n+  #162 = Methodref          #33.#163      // org/apache/commons/compress/archivers/tar/TarUtils.parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #163 = NameAndType        #164:#165     // parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #164 = Utf8               parseSparse\n+  #165 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #166 = Methodref          #154.#167     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+  #167 = NameAndType        #168:#97      // getOffset:()J\n+  #168 = Utf8               getOffset\n+  #169 = String             #170          // Corrupted TAR archive, sparse entry with negative offset\n+  #170 = Utf8               Corrupted TAR archive, sparse entry with negative offset\n+  #171 = Methodref          #133.#30      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #172 = Methodref          #154.#173     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+  #173 = NameAndType        #174:#97      // getNumbytes:()J\n+  #174 = Utf8               getNumbytes\n+  #175 = String             #176          // Corrupted TAR archive, sparse entry with negative numbytes\n+  #176 = Utf8               Corrupted TAR archive, sparse entry with negative numbytes\n+  #177 = InterfaceMethodref #178.#179     // java/util/List.add:(Ljava/lang/Object;)Z\n+  #178 = Class              #180          // java/util/List\n+  #179 = NameAndType        #84:#181      // add:(Ljava/lang/Object;)Z\n+  #180 = Utf8               java/util/List\n+  #181 = Utf8               (Ljava/lang/Object;)Z\n+  #182 = String             #183          // Corrupted TAR archive, sparse entry is invalid\n+  #183 = Utf8               Corrupted TAR archive, sparse entry is invalid\n+  #184 = Methodref          #133.#185     // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #185 = NameAndType        #7:#186       // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #186 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #187 = Methodref          #188.#189     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+  #188 = Class              #190          // java/util/Collections\n+  #189 = NameAndType        #191:#192     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+  #190 = Utf8               java/util/Collections\n+  #191 = Utf8               unmodifiableList\n+  #192 = Utf8               (Ljava/util/List;)Ljava/util/List;\n+  #193 = Methodref          #33.#194      // org/apache/commons/compress/archivers/tar/TarUtils.formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+  #194 = NameAndType        #195:#196     // formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+  #195 = Utf8               formatNameBytes\n+  #196 = Utf8               (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+  #197 = Methodref          #98.#198      // java/lang/String.length:()I\n+  #198 = NameAndType        #199:#93      // length:()I\n+  #199 = Utf8               length\n+  #200 = InterfaceMethodref #144.#201     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #201 = NameAndType        #202:#203     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #202 = Utf8               encode\n+  #203 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #204 = Methodref          #205.#206     // java/nio/ByteBuffer.limit:()I\n+  #205 = Class              #207          // java/nio/ByteBuffer\n+  #206 = NameAndType        #208:#93      // limit:()I\n+  #207 = Utf8               java/nio/ByteBuffer\n+  #208 = Utf8               limit\n+  #209 = Methodref          #98.#210      // java/lang/String.substring:(II)Ljava/lang/String;\n+  #210 = NameAndType        #211:#212     // substring:(II)Ljava/lang/String;\n+  #211 = Utf8               substring\n+  #212 = Utf8               (II)Ljava/lang/String;\n+  #213 = Methodref          #205.#214     // java/nio/ByteBuffer.position:()I\n+  #214 = NameAndType        #215:#93      // position:()I\n+  #215 = Utf8               position\n+  #216 = Methodref          #205.#217     // java/nio/ByteBuffer.array:()[B\n+  #217 = NameAndType        #218:#219     // array:()[B\n+  #218 = Utf8               array\n+  #219 = Utf8               ()[B\n+  #220 = Methodref          #205.#221     // java/nio/ByteBuffer.arrayOffset:()I\n+  #221 = NameAndType        #222:#93      // arrayOffset:()I\n+  #222 = Utf8               arrayOffset\n+  #223 = Long               7l\n+  #225 = Methodref          #11.#226      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+  #226 = NameAndType        #18:#227      // append:(J)Ljava/lang/StringBuilder;\n+  #227 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #228 = String             #229          // =\n+  #229 = Utf8               =\n+  #230 = Methodref          #231.#232     // java/lang/Long.toOctalString:(J)Ljava/lang/String;\n+  #231 = Class              #233          // java/lang/Long\n+  #232 = NameAndType        #234:#235     // toOctalString:(J)Ljava/lang/String;\n+  #233 = Utf8               java/lang/Long\n+  #234 = Utf8               toOctalString\n+  #235 = Utf8               (J)Ljava/lang/String;\n+  #236 = String             #237          //  will not fit in octal number buffer of length\n+  #237 = Utf8                will not fit in octal number buffer of length\n+  #238 = Methodref          #33.#239      // org/apache/commons/compress/archivers/tar/TarUtils.formatUnsignedOctalString:(J[BII)V\n+  #239 = NameAndType        #240:#241     // formatUnsignedOctalString:(J[BII)V\n+  #240 = Utf8               formatUnsignedOctalString\n+  #241 = Utf8               (J[BII)V\n+  #242 = Long               2097151l\n+  #244 = Long               8589934591l\n+  #246 = Methodref          #33.#247      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongOctalBytes:(J[BII)I\n+  #247 = NameAndType        #248:#249     // formatLongOctalBytes:(J[BII)I\n+  #248 = Utf8               formatLongOctalBytes\n+  #249 = Utf8               (J[BII)I\n+  #250 = Methodref          #33.#251      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongBinary:(J[BIIZ)V\n+  #251 = NameAndType        #252:#253     // formatLongBinary:(J[BIIZ)V\n+  #252 = Utf8               formatLongBinary\n+  #253 = Utf8               (J[BIIZ)V\n+  #254 = Methodref          #33.#255      // org/apache/commons/compress/archivers/tar/TarUtils.formatBigIntegerBinary:(J[BIIZ)V\n+  #255 = NameAndType        #256:#253     // formatBigIntegerBinary:(J[BIIZ)V\n+  #256 = Utf8               formatBigIntegerBinary\n+  #257 = Methodref          #60.#258      // java/lang/Math.abs:(J)J\n+  #258 = NameAndType        #259:#260     // abs:(J)J\n+  #259 = Utf8               abs\n+  #260 = Utf8               (J)J\n+  #261 = String             #262          // Value\n+  #262 = Utf8               Value\n+  #263 = String             #264          //  is too large for\n+  #264 = Utf8                is too large for\n+  #265 = String             #266          //  byte field.\n+  #266 = Utf8                byte field.\n+  #267 = Long               255l\n+  #269 = Methodref          #71.#270      // java/math/BigInteger.toByteArray:()[B\n+  #270 = NameAndType        #271:#219     // toByteArray:()[B\n+  #271 = Utf8               toByteArray\n+  #272 = Methodref          #33.#273      // org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #273 = NameAndType        #274:#275     // parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #274 = Utf8               parsePaxHeaders\n+  #275 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #276 = Class              #277          // java/util/HashMap\n+  #277 = Utf8               java/util/HashMap\n+  #278 = Methodref          #276.#279     // java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n+  #279 = NameAndType        #7:#280       // \"<init>\":(Ljava/util/Map;)V\n+  #280 = Utf8               (Ljava/util/Map;)V\n+  #281 = Methodref          #282.#283     // java/io/InputStream.read:()I\n+  #282 = Class              #284          // java/io/InputStream\n+  #283 = NameAndType        #285:#93      // read:()I\n+  #284 = Utf8               java/io/InputStream\n+  #285 = Utf8               read\n+  #286 = Class              #287          // java/io/ByteArrayOutputStream\n+  #287 = Utf8               java/io/ByteArrayOutputStream\n+  #288 = Methodref          #286.#5       // java/io/ByteArrayOutputStream.\"<init>\":()V\n+  #289 = Class              #290          // org/apache/commons/compress/utils/CharsetNames\n+  #290 = Utf8               org/apache/commons/compress/utils/CharsetNames\n+  #291 = String             #292          // UTF-8\n+  #292 = Utf8               UTF-8\n+  #293 = Methodref          #286.#294     // java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n+  #294 = NameAndType        #27:#295      // toString:(Ljava/lang/String;)Ljava/lang/String;\n+  #295 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #296 = InterfaceMethodref #297.#298     // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #297 = Class              #299          // java/util/Map\n+  #298 = NameAndType        #300:#301     // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #299 = Utf8               java/util/Map\n+  #300 = Utf8               remove\n+  #301 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #302 = String             #303          // Paxheader value size\n+  #303 = Utf8               Paxheader value size\n+  #304 = String             #305          //  exceeds size of header record\n+  #305 = Utf8                exceeds size of header record\n+  #306 = Methodref          #307.#308     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+  #307 = Class              #309          // org/apache/commons/compress/utils/IOUtils\n+  #308 = NameAndType        #310:#311     // readRange:(Ljava/io/InputStream;I)[B\n+  #309 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #310 = Utf8               readRange\n+  #311 = Utf8               (Ljava/io/InputStream;I)[B\n+  #312 = String             #313          // Failed to read Paxheader. Expected\n+  #313 = Utf8               Failed to read Paxheader. Expected\n+  #314 = String             #315          //  bytes, read\n+  #315 = Utf8                bytes, read\n+  #316 = String             #317          // Failed to read Paxheader.Value should end with a newline\n+  #317 = Utf8               Failed to read Paxheader.Value should end with a newline\n+  #318 = Fieldref           #319.#320     // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n+  #319 = Class              #321          // java/nio/charset/StandardCharsets\n+  #320 = NameAndType        #322:#323     // UTF_8:Ljava/nio/charset/Charset;\n+  #321 = Utf8               java/nio/charset/StandardCharsets\n+  #322 = Utf8               UTF_8\n+  #323 = Utf8               Ljava/nio/charset/Charset;\n+  #324 = InterfaceMethodref #297.#325     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #325 = NameAndType        #326:#327     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #326 = Utf8               put\n+  #327 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #328 = String             #329          // GNU.sparse.offset\n+  #329 = Utf8               GNU.sparse.offset\n+  #330 = Methodref          #98.#331      // java/lang/String.equals:(Ljava/lang/Object;)Z\n+  #331 = NameAndType        #332:#181     // equals:(Ljava/lang/Object;)Z\n+  #332 = Utf8               equals\n+  #333 = Methodref          #231.#95      // java/lang/Long.longValue:()J\n+  #334 = Methodref          #231.#335     // java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+  #335 = NameAndType        #80:#336      // valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+  #336 = Utf8               (Ljava/lang/String;)Ljava/lang/Long;\n+  #337 = Class              #338          // java/lang/NumberFormatException\n+  #338 = Utf8               java/lang/NumberFormatException\n+  #339 = String             #340          // Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n+  #340 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n+  #341 = String             #342          // Failed to read Paxheader.GNU.sparse.offset contains negative value\n+  #342 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains negative value\n+  #343 = String             #344          // GNU.sparse.numbytes\n+  #344 = Utf8               GNU.sparse.numbytes\n+  #345 = String             #346          // Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+  #346 = Utf8               Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+  #347 = Methodref          #231.#348     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n+  #348 = NameAndType        #349:#350     // parseLong:(Ljava/lang/String;)J\n+  #349 = Utf8               parseLong\n+  #350 = Utf8               (Ljava/lang/String;)J\n+  #351 = String             #352          // Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n+  #352 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n+  #353 = String             #354          // Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n+  #354 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n+  #355 = Methodref          #286.#356     // java/io/ByteArrayOutputStream.write:(I)V\n+  #356 = NameAndType        #357:#358     // write:(I)V\n+  #357 = Utf8               write\n+  #358 = Utf8               (I)V\n+  #359 = String             #360          // Failed to read Paxheader. Encountered a non-number while reading length\n+  #360 = Utf8               Failed to read Paxheader. Encountered a non-number while reading length\n+  #361 = Methodref          #33.#362      // org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+  #362 = NameAndType        #363:#364     // parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+  #363 = Utf8               parseFromPAX01SparseHeaders\n+  #364 = Utf8               (Ljava/lang/String;)Ljava/util/List;\n+  #365 = Methodref          #133.#366     // java/io/IOException.getMessage:()Ljava/lang/String;\n+  #366 = NameAndType        #367:#28      // getMessage:()Ljava/lang/String;\n+  #367 = Utf8               getMessage\n+  #368 = Methodref          #138.#369     // java/io/UncheckedIOException.\"<init>\":(Ljava/lang/String;Ljava/io/IOException;)V\n+  #369 = NameAndType        #7:#370       // \"<init>\":(Ljava/lang/String;Ljava/io/IOException;)V\n+  #370 = Utf8               (Ljava/lang/String;Ljava/io/IOException;)V\n+  #371 = String             #372          // ,\n+  #372 = Utf8               ,\n+  #373 = Methodref          #98.#374      // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n+  #374 = NameAndType        #375:#376     // split:(Ljava/lang/String;)[Ljava/lang/String;\n+  #375 = Utf8               split\n+  #376 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n+  #377 = String             #378          // Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n+  #378 = Utf8               Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n+  #379 = String             #380          // Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n+  #380 = Utf8               Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n+  #381 = String             #382          // Corrupted TAR archive. Sparse struct offset contains negative value\n+  #382 = Utf8               Corrupted TAR archive. Sparse struct offset contains negative value\n+  #383 = String             #384          // Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n+  #384 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n+  #385 = String             #386          // Corrupted TAR archive. Sparse struct numbytes contains negative value\n+  #386 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains negative value\n+  #387 = Methodref          #33.#388      // org/apache/commons/compress/archivers/tar/TarUtils.readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+  #388 = NameAndType        #389:#390     // readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+  #389 = Utf8               readLineOfNumberForPax1X\n+  #390 = Utf8               (Ljava/io/InputStream;)[J\n+  #391 = String             #392          // Corrupted TAR archive. Negative value in sparse headers block\n+  #392 = Utf8               Corrupted TAR archive. Negative value in sparse headers block\n+  #393 = String             #394          // Corrupted TAR archive. Sparse header block offset contains negative value\n+  #394 = Utf8               Corrupted TAR archive. Sparse header block offset contains negative value\n+  #395 = String             #396          // Corrupted TAR archive. Sparse header block numbytes contains negative value\n+  #396 = Utf8               Corrupted TAR archive. Sparse header block numbytes contains negative value\n+  #397 = Methodref          #307.#398     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+  #398 = NameAndType        #399:#400     // skip:(Ljava/io/InputStream;J)J\n+  #399 = Utf8               skip\n+  #400 = Utf8               (Ljava/io/InputStream;J)J\n+  #401 = String             #402          // Unexpected EOF when reading parse information of 1.X PAX format\n+  #402 = Utf8               Unexpected EOF when reading parse information of 1.X PAX format\n+  #403 = String             #404          // Corrupted TAR archive. Non-numeric value in sparse headers block\n+  #404 = Utf8               Corrupted TAR archive. Non-numeric value in sparse headers block\n+  #405 = Long               10l\n+  #407 = Methodref          #408.#409     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #408 = Class              #410          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #409 = NameAndType        #411:#412     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #410 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #411 = Utf8               getZipEncoding\n+  #412 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #413 = Class              #414          // org/apache/commons/compress/archivers/tar/TarUtils$1\n+  #414 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils$1\n+  #415 = Methodref          #413.#5       // org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n+  #416 = Utf8               BYTE_MASK\n+  #417 = Utf8               I\n+  #418 = Utf8               ConstantValue\n+  #419 = Integer            255\n+  #420 = Utf8               Code\n+  #421 = Utf8               LineNumberTable\n+  #422 = Utf8               LocalVariableTable\n+  #423 = Utf8               this\n+  #424 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarUtils;\n+  #425 = Utf8               currentByte\n+  #426 = Utf8               B\n+  #427 = Utf8               buffer\n+  #428 = Utf8               [B\n+  #429 = Utf8               offset\n+  #430 = Utf8               result\n+  #431 = Utf8               J\n+  #432 = Utf8               end\n+  #433 = Utf8               start\n+  #434 = Utf8               trailer\n+  #435 = Utf8               StackMapTable\n+  #436 = Utf8               negative\n+  #437 = Utf8               Z\n+  #438 = Utf8               i\n+  #439 = Utf8               val\n+  #440 = Utf8               remainder\n+  #441 = Utf8               Ljava/math/BigInteger;\n+  #442 = Class              #428          // \"[B\"\n+  #443 = Utf8               parseBoolean\n+  #444 = Utf8               ([BI)Z\n+  #445 = Utf8               current\n+  #446 = Utf8               string\n+  #447 = Utf8               Ljava/lang/String;\n+  #448 = Utf8               ([BII)Ljava/lang/String;\n+  #449 = Utf8               ex2\n+  #450 = Utf8               Ljava/io/IOException;\n+  #451 = Utf8               ex\n+  #452 = Utf8               b\n+  #453 = Utf8               encoding\n+  #454 = Utf8               len\n+  #455 = Utf8               Exceptions\n+  #456 = Utf8               sparseOffset\n+  #457 = Utf8               sparseNumbytes\n+  #458 = Utf8               readSparseStructs\n+  #459 = Utf8               ([BII)Ljava/util/List;\n+  #460 = Utf8               sparseHeader\n+  #461 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #462 = Utf8               Ljava/lang/IllegalArgumentException;\n+  #463 = Utf8               entries\n+  #464 = Utf8               sparseHeaders\n+  #465 = Utf8               Ljava/util/List;\n+  #466 = Utf8               LocalVariableTypeTable\n+  #467 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #468 = Utf8               Signature\n+  #469 = Utf8               ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #470 = Utf8               (Ljava/lang/String;[BII)I\n+  #471 = Utf8               name\n+  #472 = Utf8               buf\n+  #473 = Utf8               Ljava/nio/ByteBuffer;\n+  #474 = Utf8               value\n+  #475 = Utf8               remaining\n+  #476 = Utf8               formatOctalBytes\n+  #477 = Utf8               idx\n+  #478 = Utf8               formatLongOctalOrBinaryBytes\n+  #479 = Utf8               maxAsOctalChar\n+  #480 = Utf8               bits\n+  #481 = Utf8               max\n+  #482 = Utf8               off\n+  #483 = Utf8               fill\n+  #484 = Utf8               formatCheckSumOctalBytes\n+  #485 = Utf8               computeCheckSum\n+  #486 = Utf8               ([B)J\n+  #487 = Utf8               element\n+  #488 = Utf8               sum\n+  #489 = Utf8               verifyCheckSum\n+  #490 = Utf8               ([B)Z\n+  #491 = Utf8               header\n+  #492 = Utf8               storedSum\n+  #493 = Utf8               unsignedSum\n+  #494 = Utf8               signedSum\n+  #495 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;)Ljava/util/Map;\n+  #496 = Utf8               inputStream\n+  #497 = Utf8               Ljava/io/InputStream;\n+  #498 = Utf8               globalPaxHeaders\n+  #499 = Utf8               Ljava/util/Map;\n+  #500 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #501 = Utf8               Deprecated\n+  #502 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #503 = Utf8               RuntimeVisibleAnnotations\n+  #504 = Utf8               Ljava/lang/Deprecated;\n+  #505 = Utf8               Ljava/lang/NumberFormatException;\n+  #506 = Utf8               numbytes\n+  #507 = Utf8               rest\n+  #508 = Utf8               got\n+  #509 = Utf8               keyword\n+  #510 = Utf8               restLen\n+  #511 = Utf8               coll\n+  #512 = Utf8               Ljava/io/ByteArrayOutputStream;\n+  #513 = Utf8               ch\n+  #514 = Utf8               headerSize\n+  #515 = Utf8               headers\n+  #516 = Utf8               Ljava/lang/Long;\n+  #517 = Utf8               totalRead\n+  #518 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #519 = Utf8               parsePAX01SparseHeaders\n+  #520 = Utf8               sparseMap\n+  #521 = Utf8               (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #522 = Utf8               sparseHeaderStrings\n+  #523 = Utf8               [Ljava/lang/String;\n+  #524 = Class              #523          // \"[Ljava/lang/String;\"\n+  #525 = Utf8               parsePAX1XSparseHeaders\n+  #526 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List;\n+  #527 = Utf8               recordSize\n+  #528 = Utf8               bytesRead\n+  #529 = Utf8               readResult\n+  #530 = Utf8               [J\n+  #531 = Utf8               sparseHeadersCount\n+  #532 = Utf8               bytesToSkip\n+  #533 = Class              #530          // \"[J\"\n+  #534 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #535 = Utf8               number\n+  #536 = Utf8               <clinit>\n+  #537 = Utf8               SourceFile\n+  #538 = Utf8               TarUtils.java\n+  #539 = Utf8               InnerClasses\n {\n   private static final int BYTE_MASK = 255;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 255\n \n   static final org.apache.commons.compress.archivers.zip.ZipEncoding DEFAULT_ENCODING;\n@@ -555,15 +555,15 @@\n \n   private org.apache.commons.compress.archivers.tar.TarUtils();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #3                  // Method java/lang/Object.\"<init>\":()V\n          4: return\n       LineNumberTable:\n         line 95: 0\n         line 96: 4\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/tar/TarUtils;\n@@ -580,27 +580,27 @@\n          4: iadd\n          5: istore        5\n          7: iload_1\n          8: istore        6\n         10: iload_2\n         11: iconst_2\n         12: if_icmpge     47\n-        15: new           #3                  // class java/lang/IllegalArgumentException\n+        15: new           #9                  // class java/lang/IllegalArgumentException\n         18: dup\n-        19: new           #4                  // class java/lang/StringBuilder\n+        19: new           #11                 // class java/lang/StringBuilder\n         22: dup\n-        23: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        26: ldc           #6                  // String Length\n-        28: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        23: invokespecial #13                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        26: ldc           #14                 // String Length\n+        28: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         31: iload_2\n-        32: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        35: ldc           #9                  // String  must be at least 2\n-        37: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        40: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        43: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        32: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        35: ldc           #23                 // String  must be at least 2\n+        37: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        40: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        43: invokespecial #29                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         46: athrow\n         47: aload_0\n         48: iload         6\n         50: baload\n         51: ifne          56\n         54: lconst_0\n         55: lreturn\n@@ -646,23 +646,23 @@\n        133: istore        8\n        135: iload         8\n        137: bipush        48\n        139: if_icmplt     149\n        142: iload         8\n        144: bipush        55\n        146: if_icmple     167\n-       149: new           #3                  // class java/lang/IllegalArgumentException\n+       149: new           #9                  // class java/lang/IllegalArgumentException\n        152: dup\n        153: aload_0\n        154: iload_1\n        155: iload_2\n        156: iload         6\n        158: iload         8\n-       160: invokestatic  #12                 // Method exceptionMessage:([BIIIB)Ljava/lang/String;\n-       163: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+       160: invokestatic  #32                 // Method exceptionMessage:([BIIIB)Ljava/lang/String;\n+       163: invokespecial #29                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n        166: athrow\n        167: lload_3\n        168: iconst_3\n        169: lshl\n        170: iload         8\n        172: bipush        48\n        174: isub\n@@ -735,15 +735,15 @@\n          2: baload\n          3: sipush        128\n          6: iand\n          7: ifne          17\n         10: aload_0\n         11: iload_1\n         12: iload_2\n-        13: invokestatic  #13                 // Method parseOctal:([BII)J\n+        13: invokestatic  #38                 // Method parseOctal:([BII)J\n         16: lreturn\n         17: aload_0\n         18: iload_1\n         19: baload\n         20: iconst_m1\n         21: if_icmpne     28\n         24: iconst_1\n@@ -753,21 +753,21 @@\n         30: iload_2\n         31: bipush        9\n         33: if_icmpge     44\n         36: aload_0\n         37: iload_1\n         38: iload_2\n         39: iload_3\n-        40: invokestatic  #14                 // Method parseBinaryLong:([BIIZ)J\n+        40: invokestatic  #42                 // Method parseBinaryLong:([BIIZ)J\n         43: lreturn\n         44: aload_0\n         45: iload_1\n         46: iload_2\n         47: iload_3\n-        48: invokestatic  #15                 // Method parseBinaryBigInteger:([BIIZ)J\n+        48: invokestatic  #46                 // Method parseBinaryBigInteger:([BIIZ)J\n         51: lreturn\n       LineNumberTable:\n         line 183: 0\n         line 184: 10\n         line 186: 17\n         line 187: 30\n         line 188: 36\n@@ -791,31 +791,31 @@\n     descriptor: ([BIIZ)J\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=8, locals=7, args_size=4\n          0: iload_2\n          1: bipush        9\n          3: if_icmplt     47\n-         6: new           #3                  // class java/lang/IllegalArgumentException\n+         6: new           #9                  // class java/lang/IllegalArgumentException\n          9: dup\n-        10: new           #4                  // class java/lang/StringBuilder\n+        10: new           #11                 // class java/lang/StringBuilder\n         13: dup\n-        14: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        17: ldc           #16                 // String At offset\n-        19: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        14: invokespecial #13                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        17: ldc           #49                 // String At offset\n+        19: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         22: iload_1\n-        23: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        26: ldc           #17                 // String ,\n-        28: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        23: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        26: ldc           #51                 // String ,\n+        28: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         31: iload_2\n-        32: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        35: ldc           #18                 // String  byte binary number exceeds maximum signed long value\n-        37: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        40: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        43: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        32: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        35: ldc           #53                 // String  byte binary number exceeds maximum signed long value\n+        37: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        40: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        43: invokespecial #29                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         46: athrow\n         47: lconst_0\n         48: lstore        4\n         50: iconst_1\n         51: istore        6\n         53: iload         6\n         55: iload_2\n@@ -838,22 +838,22 @@\n         84: iload_3\n         85: ifeq          116\n         88: lload         4\n         90: lconst_1\n         91: lsub\n         92: lstore        4\n         94: lload         4\n-        96: ldc2_w        #19                 // double 2.0d\n+        96: ldc2_w        #55                 // double 2.0d\n         99: iload_2\n        100: iconst_1\n        101: isub\n        102: i2d\n-       103: ldc2_w        #21                 // double 8.0d\n+       103: ldc2_w        #57                 // double 8.0d\n        106: dmul\n-       107: invokestatic  #23                 // Method java/lang/Math.pow:(DD)D\n+       107: invokestatic  #59                 // Method java/lang/Math.pow:(DD)D\n        110: d2l\n        111: lconst_1\n        112: lsub\n        113: lxor\n        114: lstore        4\n        116: iload_3\n        117: ifeq          126\n@@ -908,58 +908,58 @@\n          9: iconst_1\n         10: iadd\n         11: aload         4\n         13: iconst_0\n         14: iload_2\n         15: iconst_1\n         16: isub\n-        17: invokestatic  #24                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-        20: new           #25                 // class java/math/BigInteger\n+        17: invokestatic  #65                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        20: new           #71                 // class java/math/BigInteger\n         23: dup\n         24: aload         4\n-        26: invokespecial #26                 // Method java/math/BigInteger.\"<init>\":([B)V\n+        26: invokespecial #73                 // Method java/math/BigInteger.\"<init>\":([B)V\n         29: astore        5\n         31: iload_3\n         32: ifeq          51\n         35: aload         5\n-        37: ldc2_w        #27                 // long -1l\n-        40: invokestatic  #29                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-        43: invokevirtual #30                 // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-        46: invokevirtual #31                 // Method java/math/BigInteger.not:()Ljava/math/BigInteger;\n+        37: ldc2_w        #76                 // long -1l\n+        40: invokestatic  #78                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+        43: invokevirtual #82                 // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+        46: invokevirtual #86                 // Method java/math/BigInteger.not:()Ljava/math/BigInteger;\n         49: astore        5\n         51: aload         5\n-        53: invokevirtual #32                 // Method java/math/BigInteger.bitLength:()I\n+        53: invokevirtual #90                 // Method java/math/BigInteger.bitLength:()I\n         56: bipush        63\n         58: if_icmple     102\n-        61: new           #3                  // class java/lang/IllegalArgumentException\n+        61: new           #9                  // class java/lang/IllegalArgumentException\n         64: dup\n-        65: new           #4                  // class java/lang/StringBuilder\n+        65: new           #11                 // class java/lang/StringBuilder\n         68: dup\n-        69: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        72: ldc           #16                 // String At offset\n-        74: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        69: invokespecial #13                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        72: ldc           #49                 // String At offset\n+        74: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         77: iload_1\n-        78: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        81: ldc           #17                 // String ,\n-        83: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        78: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        81: ldc           #51                 // String ,\n+        83: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         86: iload_2\n-        87: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        90: ldc           #18                 // String  byte binary number exceeds maximum signed long value\n-        92: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        95: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        98: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        87: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        90: ldc           #53                 // String  byte binary number exceeds maximum signed long value\n+        92: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        95: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        98: invokespecial #29                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n        101: athrow\n        102: iload_3\n        103: ifeq          115\n        106: aload         5\n-       108: invokevirtual #33                 // Method java/math/BigInteger.longValue:()J\n+       108: invokevirtual #94                 // Method java/math/BigInteger.longValue:()J\n        111: lneg\n        112: goto          120\n        115: aload         5\n-       117: invokevirtual #33                 // Method java/math/BigInteger.longValue:()J\n+       117: invokevirtual #94                 // Method java/math/BigInteger.longValue:()J\n        120: lreturn\n       LineNumberTable:\n         line 218: 0\n         line 219: 7\n         line 220: 20\n         line 221: 31\n         line 223: 35\n@@ -1009,49 +1009,49 @@\n           stack = [ int ]\n \n   private static java.lang.String exceptionMessage(byte[], int, int, int, byte);\n     descriptor: ([BIIIB)Ljava/lang/String;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=6, locals=6, args_size=5\n-         0: new           #34                 // class java/lang/String\n+         0: new           #98                 // class java/lang/String\n          3: dup\n          4: aload_0\n          5: iload_1\n          6: iload_2\n-         7: invokestatic  #35                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n-        10: invokespecial #36                 // Method java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n+         7: invokestatic  #100                // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+        10: invokespecial #106                // Method java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n         13: astore        5\n         15: aload         5\n-        17: ldc           #37                 // String \\u0000\n-        19: ldc           #38                 // String {NUL}\n-        21: invokevirtual #39                 // Method java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+        17: ldc           #109                // String \\u0000\n+        19: ldc           #111                // String {NUL}\n+        21: invokevirtual #113                // Method java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n         24: astore        5\n-        26: new           #4                  // class java/lang/StringBuilder\n+        26: new           #11                 // class java/lang/StringBuilder\n         29: dup\n-        30: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        33: ldc           #40                 // String Invalid byte\n-        35: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        30: invokespecial #13                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        33: ldc           #117                // String Invalid byte\n+        35: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         38: iload         4\n-        40: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        43: ldc           #41                 // String  at offset\n-        45: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        40: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        43: ldc           #119                // String  at offset\n+        45: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         48: iload_3\n         49: iload_1\n         50: isub\n-        51: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        54: ldc           #42                 // String  in \\'\n-        56: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        51: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        54: ldc           #121                // String  in \\'\n+        56: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         59: aload         5\n-        61: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        64: ldc           #43                 // String \\' len=\n-        66: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        61: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        64: ldc           #123                // String \\' len=\n+        66: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         69: iload_2\n-        70: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        73: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        70: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        73: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n         76: areturn\n       LineNumberTable:\n         line 258: 0\n         line 260: 15\n         line 261: 26\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -1066,29 +1066,29 @@\n     descriptor: ([BII)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=5, args_size=3\n          0: aload_0\n          1: iload_1\n          2: iload_2\n-         3: getstatic     #44                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         6: invokestatic  #45                 // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+         3: getstatic     #125                // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         6: invokestatic  #129                // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n          9: areturn\n         10: astore_3\n         11: aload_0\n         12: iload_1\n         13: iload_2\n-        14: getstatic     #47                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-        17: invokestatic  #45                 // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+        14: getstatic     #135                // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        17: invokestatic  #129                // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n         20: areturn\n         21: astore        4\n-        23: new           #48                 // class java/io/UncheckedIOException\n+        23: new           #138                // class java/io/UncheckedIOException\n         26: dup\n         27: aload         4\n-        29: invokespecial #49                 // Method java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n+        29: invokespecial #140                // Method java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n         32: athrow\n       Exception table:\n          from    to  target type\n              0     9    10   Class java/io/IOException\n             11    20    21   Class java/io/IOException\n       LineNumberTable:\n         line 276: 0\n@@ -1136,20 +1136,20 @@\n         35: newarray       byte\n         37: astore        5\n         39: aload_0\n         40: iload_1\n         41: aload         5\n         43: iconst_0\n         44: iload         4\n-        46: invokestatic  #24                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        46: invokestatic  #65                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         49: aload_3\n         50: aload         5\n-        52: invokeinterface #50,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+        52: invokeinterface #143,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n         57: areturn\n-        58: ldc           #51                 // String\n+        58: ldc           #149                // String\n         60: areturn\n       LineNumberTable:\n         line 305: 0\n         line 306: 3\n         line 307: 19\n         line 306: 22\n         line 309: 28\n@@ -1180,28 +1180,28 @@\n     descriptor: ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=6, locals=6, args_size=2\n          0: aload_0\n          1: iload_1\n          2: bipush        12\n-         4: invokestatic  #52                 // Method parseOctalOrBinary:([BII)J\n+         4: invokestatic  #151                // Method parseOctalOrBinary:([BII)J\n          7: lstore_2\n          8: aload_0\n          9: iload_1\n         10: bipush        12\n         12: iadd\n         13: bipush        12\n-        15: invokestatic  #52                 // Method parseOctalOrBinary:([BII)J\n+        15: invokestatic  #151                // Method parseOctalOrBinary:([BII)J\n         18: lstore        4\n-        20: new           #53                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+        20: new           #154                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n         23: dup\n         24: lload_2\n         25: lload         4\n-        27: invokespecial #54                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+        27: invokespecial #156                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n         30: areturn\n       LineNumberTable:\n         line 325: 0\n         line 326: 8\n         line 328: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -1211,67 +1211,67 @@\n            20      11     4 sparseNumbytes   J\n \n   static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> readSparseStructs(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)Ljava/util/List;\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=6, args_size=3\n-         0: new           #55                 // class java/util/ArrayList\n+         0: new           #159                // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #56                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #161                // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_3\n          8: iconst_0\n          9: istore        4\n         11: iload         4\n         13: iload_2\n         14: if_icmpge     102\n         17: aload_0\n         18: iload_1\n         19: iload         4\n         21: bipush        24\n         23: imul\n         24: iadd\n-        25: invokestatic  #57                 // Method parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+        25: invokestatic  #162                // Method parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n         28: astore        5\n         30: aload         5\n-        32: invokevirtual #58                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+        32: invokevirtual #166                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n         35: lconst_0\n         36: lcmp\n         37: ifge          50\n-        40: new           #46                 // class java/io/IOException\n+        40: new           #133                // class java/io/IOException\n         43: dup\n-        44: ldc           #59                 // String Corrupted TAR archive, sparse entry with negative offset\n-        46: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        44: ldc           #169                // String Corrupted TAR archive, sparse entry with negative offset\n+        46: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         49: athrow\n         50: aload         5\n-        52: invokevirtual #61                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+        52: invokevirtual #172                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n         55: lconst_0\n         56: lcmp\n         57: ifge          70\n-        60: new           #46                 // class java/io/IOException\n+        60: new           #133                // class java/io/IOException\n         63: dup\n-        64: ldc           #62                 // String Corrupted TAR archive, sparse entry with negative numbytes\n-        66: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        64: ldc           #175                // String Corrupted TAR archive, sparse entry with negative numbytes\n+        66: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         69: athrow\n         70: aload_3\n         71: aload         5\n-        73: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        73: invokeinterface #177,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n         78: pop\n         79: goto          96\n         82: astore        5\n-        84: new           #46                 // class java/io/IOException\n+        84: new           #133                // class java/io/IOException\n         87: dup\n-        88: ldc           #64                 // String Corrupted TAR archive, sparse entry is invalid\n+        88: ldc           #182                // String Corrupted TAR archive, sparse entry is invalid\n         90: aload         5\n-        92: invokespecial #65                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        92: invokespecial #184                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n         95: athrow\n         96: iinc          4, 1\n         99: goto          11\n        102: aload_3\n-       103: invokestatic  #66                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+       103: invokestatic  #187                // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n        106: areturn\n       Exception table:\n          from    to  target type\n             17    79    82   Class java/lang/IllegalArgumentException\n       LineNumberTable:\n         line 336: 0\n         line 337: 8\n@@ -1312,41 +1312,41 @@\n           locals = [ class \"[B\", int, int, class java/util/List, int ]\n           stack = [ class java/lang/IllegalArgumentException ]\n         frame_type = 13 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 5\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #225                         // ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #469                         // ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   public static int formatNameBytes(java.lang.String, byte[], int, int);\n     descriptor: (Ljava/lang/String;[BII)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=6, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: getstatic     #44                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         7: invokestatic  #67                 // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+         4: getstatic     #125                // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         7: invokestatic  #193                // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n         10: ireturn\n         11: astore        4\n         13: aload_0\n         14: aload_1\n         15: iload_2\n         16: iload_3\n-        17: getstatic     #47                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-        20: invokestatic  #67                 // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+        17: getstatic     #135                // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        20: invokestatic  #193                // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n         23: ireturn\n         24: astore        5\n-        26: new           #48                 // class java/io/UncheckedIOException\n+        26: new           #138                // class java/io/UncheckedIOException\n         29: dup\n         30: aload         5\n-        32: invokespecial #49                 // Method java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n+        32: invokespecial #140                // Method java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n         35: athrow\n       Exception table:\n          from    to  target type\n              0    10    11   Class java/io/IOException\n             13    23    24   Class java/io/IOException\n       LineNumberTable:\n         line 374: 0\n@@ -1372,49 +1372,49 @@\n \n   public static int formatNameBytes(java.lang.String, byte[], int, int, org.apache.commons.compress.archivers.zip.ZipEncoding) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=9, args_size=5\n          0: aload_0\n-         1: invokevirtual #68                 // Method java/lang/String.length:()I\n+         1: invokevirtual #197                // Method java/lang/String.length:()I\n          4: istore        5\n          6: aload         4\n          8: aload_0\n-         9: invokeinterface #69,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+         9: invokeinterface #200,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n         14: astore        6\n         16: aload         6\n-        18: invokevirtual #70                 // Method java/nio/ByteBuffer.limit:()I\n+        18: invokevirtual #204                // Method java/nio/ByteBuffer.limit:()I\n         21: iload_3\n         22: if_icmple     52\n         25: iload         5\n         27: ifle          52\n         30: aload         4\n         32: aload_0\n         33: iconst_0\n         34: iinc          5, -1\n         37: iload         5\n-        39: invokevirtual #71                 // Method java/lang/String.substring:(II)Ljava/lang/String;\n-        42: invokeinterface #69,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+        39: invokevirtual #209                // Method java/lang/String.substring:(II)Ljava/lang/String;\n+        42: invokeinterface #200,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n         47: astore        6\n         49: goto          16\n         52: aload         6\n-        54: invokevirtual #70                 // Method java/nio/ByteBuffer.limit:()I\n+        54: invokevirtual #204                // Method java/nio/ByteBuffer.limit:()I\n         57: aload         6\n-        59: invokevirtual #72                 // Method java/nio/ByteBuffer.position:()I\n+        59: invokevirtual #213                // Method java/nio/ByteBuffer.position:()I\n         62: isub\n         63: istore        7\n         65: aload         6\n-        67: invokevirtual #73                 // Method java/nio/ByteBuffer.array:()[B\n+        67: invokevirtual #216                // Method java/nio/ByteBuffer.array:()[B\n         70: aload         6\n-        72: invokevirtual #74                 // Method java/nio/ByteBuffer.arrayOffset:()I\n+        72: invokevirtual #220                // Method java/nio/ByteBuffer.arrayOffset:()I\n         75: aload_1\n         76: iload_2\n         77: iload         7\n-        79: invokestatic  #24                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        79: invokestatic  #65                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         82: iload         7\n         84: istore        8\n         86: iload         8\n         88: iload_3\n         89: if_icmpge     105\n         92: aload_1\n         93: iload_2\n@@ -1493,15 +1493,15 @@\n         39: ifeq          72\n         42: aload_2\n         43: iload_3\n         44: iload         5\n         46: iadd\n         47: bipush        48\n         49: lload         6\n-        51: ldc2_w        #75                 // long 7l\n+        51: ldc2_w        #223                // long 7l\n         54: land\n         55: l2i\n         56: i2b\n         57: iadd\n         58: i2b\n         59: bastore\n         60: lload         6\n@@ -1510,32 +1510,32 @@\n         64: lstore        6\n         66: iinc          5, -1\n         69: goto          30\n         72: lload         6\n         74: lconst_0\n         75: lcmp\n         76: ifeq          123\n-        79: new           #3                  // class java/lang/IllegalArgumentException\n+        79: new           #9                  // class java/lang/IllegalArgumentException\n         82: dup\n-        83: new           #4                  // class java/lang/StringBuilder\n+        83: new           #11                 // class java/lang/StringBuilder\n         86: dup\n-        87: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n+        87: invokespecial #13                 // Method java/lang/StringBuilder.\"<init>\":()V\n         90: lload_0\n-        91: invokevirtual #77                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        94: ldc           #78                 // String =\n-        96: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        91: invokevirtual #225                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        94: ldc           #228                // String =\n+        96: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         99: lload_0\n-       100: invokestatic  #79                 // Method java/lang/Long.toOctalString:(J)Ljava/lang/String;\n-       103: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       106: ldc           #80                 // String  will not fit in octal number buffer of length\n-       108: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       100: invokestatic  #230                // Method java/lang/Long.toOctalString:(J)Ljava/lang/String;\n+       103: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       106: ldc           #236                // String  will not fit in octal number buffer of length\n+       108: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        111: iload         4\n-       113: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       116: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       119: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+       113: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       116: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       119: invokespecial #29                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n        122: athrow\n        123: iload         5\n        125: iflt          142\n        128: aload_2\n        129: iload_3\n        130: iload         5\n        132: iadd\n@@ -1590,15 +1590,15 @@\n          2: iconst_2\n          3: isub\n          4: istore        5\n          6: lload_0\n          7: aload_2\n          8: iload_3\n          9: iload         5\n-        11: invokestatic  #81                 // Method formatUnsignedOctalString:(J[BII)V\n+        11: invokestatic  #238                // Method formatUnsignedOctalString:(J[BII)V\n         14: aload_2\n         15: iload_3\n         16: iload         5\n         18: iinc          5, 1\n         21: iadd\n         22: bipush        32\n         24: bastore\n@@ -1635,15 +1635,15 @@\n          2: iconst_1\n          3: isub\n          4: istore        5\n          6: lload_0\n          7: aload_2\n          8: iload_3\n          9: iload         5\n-        11: invokestatic  #81                 // Method formatUnsignedOctalString:(J[BII)V\n+        11: invokestatic  #238                // Method formatUnsignedOctalString:(J[BII)V\n         14: aload_2\n         15: iload_3\n         16: iload         5\n         18: iadd\n         19: bipush        32\n         21: bastore\n         22: iload_3\n@@ -1667,17 +1667,17 @@\n     descriptor: (J[BII)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=6, locals=8, args_size=4\n          0: iload         4\n          2: bipush        8\n          4: if_icmpne     13\n-         7: ldc2_w        #82                 // long 2097151l\n+         7: ldc2_w        #242                // long 2097151l\n         10: goto          16\n-        13: ldc2_w        #84                 // long 8589934591l\n+        13: ldc2_w        #244                // long 8589934591l\n         16: lstore        5\n         18: lload_0\n         19: lconst_0\n         20: lcmp\n         21: ifge          28\n         24: iconst_1\n         25: goto          29\n@@ -1689,32 +1689,32 @@\n         37: lload         5\n         39: lcmp\n         40: ifgt          52\n         43: lload_0\n         44: aload_2\n         45: iload_3\n         46: iload         4\n-        48: invokestatic  #86                 // Method formatLongOctalBytes:(J[BII)I\n+        48: invokestatic  #246                // Method formatLongOctalBytes:(J[BII)I\n         51: ireturn\n         52: iload         4\n         54: bipush        9\n         56: if_icmpge     72\n         59: lload_0\n         60: aload_2\n         61: iload_3\n         62: iload         4\n         64: iload         7\n-        66: invokestatic  #87                 // Method formatLongBinary:(J[BIIZ)V\n+        66: invokestatic  #250                // Method formatLongBinary:(J[BIIZ)V\n         69: goto          82\n         72: lload_0\n         73: aload_2\n         74: iload_3\n         75: iload         4\n         77: iload         7\n-        79: invokestatic  #88                 // Method formatBigIntegerBinary:(J[BIIZ)V\n+        79: invokestatic  #254                // Method formatBigIntegerBinary:(J[BIIZ)V\n         82: aload_2\n         83: iload_3\n         84: iload         7\n         86: ifeq          95\n         89: sipush        255\n         92: goto          98\n         95: sipush        128\n@@ -1777,219 +1777,219 @@\n          6: imul\n          7: istore        6\n          9: lconst_1\n         10: iload         6\n         12: lshl\n         13: lstore        7\n         15: lload_0\n-        16: invokestatic  #89                 // Method java/lang/Math.abs:(J)J\n+        16: invokestatic  #257                // Method java/lang/Math.abs:(J)J\n         19: lstore        9\n         21: lload         9\n         23: lconst_0\n         24: lcmp\n         25: iflt          36\n         28: lload         9\n         30: lload         7\n         32: lcmp\n-        33: iflt          78\n-        36: new           #3                  // class java/lang/IllegalArgumentException\n+        33: iflt          81\n+        36: new           #9                  // class java/lang/IllegalArgumentException\n         39: dup\n-        40: new           #4                  // class java/lang/StringBuilder\n+        40: new           #11                 // class java/lang/StringBuilder\n         43: dup\n-        44: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        47: ldc           #90                 // String Value\n-        49: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        52: lload_0\n-        53: invokevirtual #77                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        56: ldc           #91                 // String  is too large for\n-        58: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        61: iload         4\n-        63: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        66: ldc           #92                 // String  byte field.\n-        68: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        71: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        74: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-        77: athrow\n-        78: iload         5\n-        80: ifeq          109\n-        83: lload         9\n-        85: lload         7\n-        87: lconst_1\n-        88: lsub\n-        89: lxor\n-        90: lstore        9\n-        92: lload         9\n-        94: lconst_1\n-        95: ladd\n-        96: lstore        9\n-        98: lload         9\n-       100: ldc2_w        #93                 // long 255l\n-       103: iload         6\n-       105: lshl\n-       106: lor\n-       107: lstore        9\n-       109: iload_3\n-       110: iload         4\n-       112: iadd\n-       113: iconst_1\n-       114: isub\n-       115: istore        11\n-       117: iload         11\n-       119: iload_3\n-       120: if_icmplt     144\n-       123: aload_2\n-       124: iload         11\n-       126: lload         9\n-       128: l2i\n-       129: i2b\n-       130: bastore\n-       131: lload         9\n-       133: bipush        8\n-       135: lshr\n-       136: lstore        9\n-       138: iinc          11, -1\n-       141: goto          117\n-       144: return\n+        44: invokespecial #13                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        47: ldc_w         #261                // String Value\n+        50: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        53: lload_0\n+        54: invokevirtual #225                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        57: ldc_w         #263                // String  is too large for\n+        60: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        63: iload         4\n+        65: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        68: ldc_w         #265                // String  byte field.\n+        71: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        74: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        77: invokespecial #29                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        80: athrow\n+        81: iload         5\n+        83: ifeq          112\n+        86: lload         9\n+        88: lload         7\n+        90: lconst_1\n+        91: lsub\n+        92: lxor\n+        93: lstore        9\n+        95: lload         9\n+        97: lconst_1\n+        98: ladd\n+        99: lstore        9\n+       101: lload         9\n+       103: ldc2_w        #267                // long 255l\n+       106: iload         6\n+       108: lshl\n+       109: lor\n+       110: lstore        9\n+       112: iload_3\n+       113: iload         4\n+       115: iadd\n+       116: iconst_1\n+       117: isub\n+       118: istore        11\n+       120: iload         11\n+       122: iload_3\n+       123: if_icmplt     147\n+       126: aload_2\n+       127: iload         11\n+       129: lload         9\n+       131: l2i\n+       132: i2b\n+       133: bastore\n+       134: lload         9\n+       136: bipush        8\n+       138: lshr\n+       139: lstore        9\n+       141: iinc          11, -1\n+       144: goto          120\n+       147: return\n       LineNumberTable:\n         line 548: 0\n         line 549: 9\n         line 550: 15\n         line 551: 21\n         line 552: 36\n-        line 555: 78\n-        line 556: 83\n-        line 557: 92\n-        line 558: 98\n-        line 560: 109\n-        line 561: 123\n-        line 562: 131\n-        line 560: 138\n-        line 564: 144\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-          117      27    11     i   I\n-            0     145     0 value   J\n-            0     145     2   buf   [B\n-            0     145     3 offset   I\n-            0     145     4 length   I\n-            0     145     5 negative   Z\n-            9     136     6  bits   I\n-           15     130     7   max   J\n-           21     124     9   val   J\n+        line 555: 81\n+        line 556: 86\n+        line 557: 95\n+        line 558: 101\n+        line 560: 112\n+        line 561: 126\n+        line 562: 134\n+        line 560: 141\n+        line 564: 147\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+          120      27    11     i   I\n+            0     148     0 value   J\n+            0     148     2   buf   [B\n+            0     148     3 offset   I\n+            0     148     4 length   I\n+            0     148     5 negative   Z\n+            9     139     6  bits   I\n+           15     133     7   max   J\n+           21     127     9   val   J\n       StackMapTable: number_of_entries = 5\n         frame_type = 254 /* append */\n           offset_delta = 36\n           locals = [ int, long, long ]\n-        frame_type = 41 /* same */\n+        frame_type = 44 /* same */\n         frame_type = 30 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 7\n           locals = [ int ]\n         frame_type = 250 /* chop */\n           offset_delta = 26\n \n   private static void formatBigIntegerBinary(long, byte[], int, int, boolean);\n     descriptor: (J[BIIZ)V\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=12, args_size=5\n          0: lload_0\n-         1: invokestatic  #29                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+         1: invokestatic  #78                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n          4: astore        6\n          6: aload         6\n-         8: invokevirtual #95                 // Method java/math/BigInteger.toByteArray:()[B\n+         8: invokevirtual #269                // Method java/math/BigInteger.toByteArray:()[B\n         11: astore        7\n         13: aload         7\n         15: arraylength\n         16: istore        8\n         18: iload         8\n         20: iload         4\n         22: iconst_1\n         23: isub\n-        24: if_icmple     69\n-        27: new           #3                  // class java/lang/IllegalArgumentException\n+        24: if_icmple     72\n+        27: new           #9                  // class java/lang/IllegalArgumentException\n         30: dup\n-        31: new           #4                  // class java/lang/StringBuilder\n+        31: new           #11                 // class java/lang/StringBuilder\n         34: dup\n-        35: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        38: ldc           #90                 // String Value\n-        40: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        43: lload_0\n-        44: invokevirtual #77                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        47: ldc           #91                 // String  is too large for\n-        49: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        52: iload         4\n-        54: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        57: ldc           #92                 // String  byte field.\n-        59: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        62: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        65: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-        68: athrow\n-        69: iload_3\n-        70: iload         4\n-        72: iadd\n-        73: iload         8\n-        75: isub\n-        76: istore        9\n-        78: aload         7\n-        80: iconst_0\n-        81: aload_2\n-        82: iload         9\n-        84: iload         8\n-        86: invokestatic  #24                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-        89: iload         5\n-        91: ifeq          100\n-        94: sipush        255\n-        97: goto          101\n-       100: iconst_0\n-       101: i2b\n-       102: istore        10\n-       104: iload_3\n-       105: iconst_1\n-       106: iadd\n-       107: istore        11\n-       109: iload         11\n-       111: iload         9\n-       113: if_icmpge     128\n-       116: aload_2\n-       117: iload         11\n-       119: iload         10\n-       121: bastore\n-       122: iinc          11, 1\n-       125: goto          109\n-       128: return\n+        35: invokespecial #13                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        38: ldc_w         #261                // String Value\n+        41: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        44: lload_0\n+        45: invokevirtual #225                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        48: ldc_w         #263                // String  is too large for\n+        51: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        54: iload         4\n+        56: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        59: ldc_w         #265                // String  byte field.\n+        62: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        65: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        68: invokespecial #29                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        71: athrow\n+        72: iload_3\n+        73: iload         4\n+        75: iadd\n+        76: iload         8\n+        78: isub\n+        79: istore        9\n+        81: aload         7\n+        83: iconst_0\n+        84: aload_2\n+        85: iload         9\n+        87: iload         8\n+        89: invokestatic  #65                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        92: iload         5\n+        94: ifeq          103\n+        97: sipush        255\n+       100: goto          104\n+       103: iconst_0\n+       104: i2b\n+       105: istore        10\n+       107: iload_3\n+       108: iconst_1\n+       109: iadd\n+       110: istore        11\n+       112: iload         11\n+       114: iload         9\n+       116: if_icmpge     131\n+       119: aload_2\n+       120: iload         11\n+       122: iload         10\n+       124: bastore\n+       125: iinc          11, 1\n+       128: goto          112\n+       131: return\n       LineNumberTable:\n         line 570: 0\n         line 571: 6\n         line 572: 13\n         line 573: 18\n         line 574: 27\n-        line 577: 69\n-        line 578: 78\n-        line 579: 89\n-        line 580: 104\n-        line 581: 116\n-        line 580: 122\n-        line 583: 128\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-          109      19    11     i   I\n-            0     129     0 value   J\n-            0     129     2   buf   [B\n-            0     129     3 offset   I\n-            0     129     4 length   I\n-            0     129     5 negative   Z\n-            6     123     6   val   Ljava/math/BigInteger;\n-           13     116     7     b   [B\n-           18     111     8   len   I\n-           78      51     9   off   I\n-          104      25    10  fill   B\n+        line 577: 72\n+        line 578: 81\n+        line 579: 92\n+        line 580: 107\n+        line 581: 119\n+        line 580: 125\n+        line 583: 131\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+          112      19    11     i   I\n+            0     132     0 value   J\n+            0     132     2   buf   [B\n+            0     132     3 offset   I\n+            0     132     4 length   I\n+            0     132     5 negative   Z\n+            6     126     6   val   Ljava/math/BigInteger;\n+           13     119     7     b   [B\n+           18     114     8   len   I\n+           81      51     9   off   I\n+          107      25    10  fill   B\n       StackMapTable: number_of_entries = 5\n         frame_type = 254 /* append */\n-          offset_delta = 69\n+          offset_delta = 72\n           locals = [ class java/math/BigInteger, class \"[B\", int ]\n         frame_type = 252 /* append */\n           offset_delta = 30\n           locals = [ int ]\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n         frame_type = 253 /* append */\n@@ -2007,15 +2007,15 @@\n          2: iconst_2\n          3: isub\n          4: istore        5\n          6: lload_0\n          7: aload_2\n          8: iload_3\n          9: iload         5\n-        11: invokestatic  #81                 // Method formatUnsignedOctalString:(J[BII)V\n+        11: invokestatic  #238                // Method formatUnsignedOctalString:(J[BII)V\n         14: aload_2\n         15: iload_3\n         16: iload         5\n         18: iinc          5, 1\n         21: iadd\n         22: iconst_0\n         23: bastore\n@@ -2098,15 +2098,15 @@\n     descriptor: ([B)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=9, args_size=1\n          0: aload_0\n          1: sipush        148\n          4: bipush        8\n-         6: invokestatic  #13                 // Method parseOctal:([BII)J\n+         6: invokestatic  #38                 // Method parseOctal:([BII)J\n          9: lstore_1\n         10: lconst_0\n         11: lstore_3\n         12: lconst_0\n         13: lstore        5\n         15: iconst_0\n         16: istore        7\n@@ -2191,16 +2191,16 @@\n     descriptor: (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;)Ljava/util/Map;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n-         3: ldc2_w        #27                 // long -1l\n-         6: invokestatic  #97                 // Method parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+         3: ldc2_w        #76                 // long -1l\n+         6: invokestatic  #272                // Method parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n          9: areturn\n       LineNumberTable:\n         line 694: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0 inputStream   Ljava/io/InputStream;\n             0      10     1 sparseHeaders   Ljava/util/List;\n@@ -2208,304 +2208,304 @@\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      10     1 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n             0      10     2 globalPaxHeaders   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n     Exceptions:\n       throws java.io.IOException\n     Deprecated: true\n-    Signature: #270                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #502                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n     RuntimeVisibleAnnotations:\n-      0: #272()\n+      0: #504()\n         java.lang.Deprecated\n \n   protected static java.util.Map<java.lang.String, java.lang.String> parsePaxHeaders(java.io.InputStream, java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>, java.util.Map<java.lang.String, java.lang.String>, long) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=7, locals=20, args_size=4\n-         0: new           #98                 // class java/util/HashMap\n+         0: new           #276                // class java/util/HashMap\n          3: dup\n          4: aload_2\n-         5: invokespecial #99                 // Method java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n+         5: invokespecial #278                // Method java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n          8: astore        5\n         10: aconst_null\n         11: astore        6\n         13: iconst_0\n         14: istore        7\n         16: iconst_0\n         17: istore        9\n         19: iconst_0\n         20: istore        10\n         22: aload_0\n-        23: invokevirtual #100                // Method java/io/InputStream.read:()I\n+        23: invokevirtual #281                // Method java/io/InputStream.read:()I\n         26: dup\n         27: istore        8\n         29: iconst_m1\n-        30: if_icmpeq     538\n+        30: if_icmpeq     552\n         33: iinc          10, 1\n         36: iinc          7, 1\n         39: iload         8\n         41: bipush        10\n         43: if_icmpne     49\n-        46: goto          538\n+        46: goto          552\n         49: iload         8\n         51: bipush        32\n-        53: if_icmpne     494\n-        56: new           #101                // class java/io/ByteArrayOutputStream\n+        53: if_icmpne     507\n+        56: new           #286                // class java/io/ByteArrayOutputStream\n         59: dup\n-        60: invokespecial #102                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+        60: invokespecial #288                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n         63: astore        11\n         65: aload_0\n-        66: invokevirtual #100                // Method java/io/InputStream.read:()I\n+        66: invokevirtual #281                // Method java/io/InputStream.read:()I\n         69: dup\n         70: istore        8\n         72: iconst_m1\n-        73: if_icmpeq     538\n+        73: if_icmpeq     552\n         76: iinc          10, 1\n         79: iinc          7, 1\n         82: iload         7\n-        84: iflt          538\n+        84: iflt          552\n         87: lload_3\n         88: lconst_0\n         89: lcmp\n         90: iflt          104\n         93: iload         7\n         95: i2l\n         96: lload_3\n         97: lcmp\n         98: iflt          104\n-       101: goto          538\n+       101: goto          552\n        104: iload         8\n        106: bipush        61\n-       108: if_icmpne     483\n+       108: if_icmpne     496\n        111: aload         11\n-       113: ldc           #104                // String UTF-8\n-       115: invokevirtual #105                // Method java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n-       118: astore        12\n-       120: iload         9\n-       122: iload         10\n-       124: isub\n-       125: istore        13\n-       127: iload         13\n-       129: iconst_1\n-       130: if_icmpgt     146\n-       133: aload         5\n-       135: aload         12\n-       137: invokeinterface #106,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-       142: pop\n-       143: goto          538\n-       146: lload_3\n-       147: lconst_0\n-       148: lcmp\n-       149: iflt          197\n-       152: iload         13\n-       154: i2l\n-       155: lload_3\n-       156: iload         7\n-       158: i2l\n-       159: lsub\n-       160: lcmp\n-       161: ifle          197\n-       164: new           #46                 // class java/io/IOException\n-       167: dup\n-       168: new           #4                  // class java/lang/StringBuilder\n-       171: dup\n-       172: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-       175: ldc           #107                // String Paxheader value size\n-       177: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       180: iload         13\n-       182: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       185: ldc           #108                // String  exceeds size of header record\n-       187: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       190: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       193: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       196: athrow\n-       197: aload_0\n-       198: iload         13\n-       200: invokestatic  #109                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n-       203: astore        14\n-       205: aload         14\n-       207: arraylength\n-       208: istore        15\n-       210: iload         15\n-       212: iload         13\n-       214: if_icmpeq     255\n-       217: new           #46                 // class java/io/IOException\n-       220: dup\n-       221: new           #4                  // class java/lang/StringBuilder\n-       224: dup\n-       225: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-       228: ldc           #110                // String Failed to read Paxheader. Expected\n-       230: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       233: iload         13\n-       235: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       238: ldc           #111                // String  bytes, read\n-       240: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       243: iload         15\n-       245: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       248: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       251: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       254: athrow\n-       255: iload         7\n-       257: iload         13\n-       259: iadd\n-       260: istore        7\n-       262: aload         14\n-       264: iload         13\n-       266: iconst_1\n-       267: isub\n-       268: baload\n-       269: bipush        10\n-       271: if_icmpeq     284\n-       274: new           #46                 // class java/io/IOException\n-       277: dup\n-       278: ldc           #112                // String Failed to read Paxheader.Value should end with a newline\n-       280: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       283: athrow\n-       284: new           #34                 // class java/lang/String\n-       287: dup\n-       288: aload         14\n-       290: iconst_0\n-       291: iload         13\n-       293: iconst_1\n-       294: isub\n-       295: getstatic     #113                // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n-       298: invokespecial #36                 // Method java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n-       301: astore        16\n-       303: aload         5\n-       305: aload         12\n-       307: aload         16\n-       309: invokeinterface #114,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-       314: pop\n-       315: aload         12\n-       317: ldc           #115                // String GNU.sparse.offset\n-       319: invokevirtual #116                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n-       322: ifeq          392\n-       325: aload         6\n-       327: ifnull        350\n-       330: aload_1\n-       331: new           #53                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       334: dup\n-       335: aload         6\n-       337: invokevirtual #117                // Method java/lang/Long.longValue:()J\n-       340: lconst_0\n-       341: invokespecial #54                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       344: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       349: pop\n-       350: aload         16\n-       352: invokestatic  #118                // Method java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-       355: astore        6\n-       357: goto          372\n-       360: astore        17\n-       362: new           #46                 // class java/io/IOException\n-       365: dup\n-       366: ldc           #120                // String Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n-       368: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       371: athrow\n-       372: aload         6\n-       374: invokevirtual #117                // Method java/lang/Long.longValue:()J\n-       377: lconst_0\n-       378: lcmp\n-       379: ifge          392\n-       382: new           #46                 // class java/io/IOException\n-       385: dup\n-       386: ldc           #121                // String Failed to read Paxheader.GNU.sparse.offset contains negative value\n-       388: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       391: athrow\n-       392: aload         12\n-       394: ldc           #122                // String GNU.sparse.numbytes\n-       396: invokevirtual #116                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n-       399: ifeq          480\n-       402: aload         6\n-       404: ifnonnull     417\n-       407: new           #46                 // class java/io/IOException\n-       410: dup\n-       411: ldc           #123                // String Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-       413: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       416: athrow\n-       417: aload         16\n-       419: invokestatic  #124                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n-       422: lstore        17\n-       424: goto          439\n-       427: astore        19\n-       429: new           #46                 // class java/io/IOException\n-       432: dup\n-       433: ldc           #125                // String Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n-       435: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       438: athrow\n-       439: lload         17\n-       441: lconst_0\n-       442: lcmp\n-       443: ifge          456\n-       446: new           #46                 // class java/io/IOException\n-       449: dup\n-       450: ldc           #126                // String Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n-       452: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       455: athrow\n-       456: aload_1\n-       457: new           #53                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       460: dup\n-       461: aload         6\n-       463: invokevirtual #117                // Method java/lang/Long.longValue:()J\n-       466: lload         17\n-       468: invokespecial #54                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       471: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       476: pop\n-       477: aconst_null\n-       478: astore        6\n-       480: goto          538\n-       483: aload         11\n-       485: iload         8\n-       487: i2b\n-       488: invokevirtual #127                // Method java/io/ByteArrayOutputStream.write:(I)V\n-       491: goto          65\n-       494: iload         8\n-       496: bipush        48\n-       498: if_icmplt     508\n-       501: iload         8\n-       503: bipush        57\n-       505: if_icmple     518\n-       508: new           #46                 // class java/io/IOException\n-       511: dup\n-       512: ldc           #128                // String Failed to read Paxheader. Encountered a non-number while reading length\n-       514: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       517: athrow\n-       518: iload         9\n-       520: bipush        10\n-       522: imul\n-       523: istore        9\n-       525: iload         9\n-       527: iload         8\n-       529: bipush        48\n-       531: isub\n-       532: iadd\n-       533: istore        9\n-       535: goto          22\n-       538: iload         8\n-       540: iconst_m1\n-       541: if_icmpne     547\n-       544: goto          550\n-       547: goto          16\n-       550: aload         6\n-       552: ifnull        575\n-       555: aload_1\n-       556: new           #53                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       559: dup\n-       560: aload         6\n-       562: invokevirtual #117                // Method java/lang/Long.longValue:()J\n-       565: lconst_0\n-       566: invokespecial #54                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       569: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       574: pop\n-       575: aload         5\n-       577: areturn\n+       113: ldc_w         #291                // String UTF-8\n+       116: invokevirtual #293                // Method java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n+       119: astore        12\n+       121: iload         9\n+       123: iload         10\n+       125: isub\n+       126: istore        13\n+       128: iload         13\n+       130: iconst_1\n+       131: if_icmpgt     147\n+       134: aload         5\n+       136: aload         12\n+       138: invokeinterface #296,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+       143: pop\n+       144: goto          552\n+       147: lload_3\n+       148: lconst_0\n+       149: lcmp\n+       150: iflt          200\n+       153: iload         13\n+       155: i2l\n+       156: lload_3\n+       157: iload         7\n+       159: i2l\n+       160: lsub\n+       161: lcmp\n+       162: ifle          200\n+       165: new           #133                // class java/io/IOException\n+       168: dup\n+       169: new           #11                 // class java/lang/StringBuilder\n+       172: dup\n+       173: invokespecial #13                 // Method java/lang/StringBuilder.\"<init>\":()V\n+       176: ldc_w         #302                // String Paxheader value size\n+       179: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       182: iload         13\n+       184: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       187: ldc_w         #304                // String  exceeds size of header record\n+       190: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       193: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       196: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       199: athrow\n+       200: aload_0\n+       201: iload         13\n+       203: invokestatic  #306                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+       206: astore        14\n+       208: aload         14\n+       210: arraylength\n+       211: istore        15\n+       213: iload         15\n+       215: iload         13\n+       217: if_icmpeq     260\n+       220: new           #133                // class java/io/IOException\n+       223: dup\n+       224: new           #11                 // class java/lang/StringBuilder\n+       227: dup\n+       228: invokespecial #13                 // Method java/lang/StringBuilder.\"<init>\":()V\n+       231: ldc_w         #312                // String Failed to read Paxheader. Expected\n+       234: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       237: iload         13\n+       239: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       242: ldc_w         #314                // String  bytes, read\n+       245: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       248: iload         15\n+       250: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       253: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       256: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       259: athrow\n+       260: iload         7\n+       262: iload         13\n+       264: iadd\n+       265: istore        7\n+       267: aload         14\n+       269: iload         13\n+       271: iconst_1\n+       272: isub\n+       273: baload\n+       274: bipush        10\n+       276: if_icmpeq     290\n+       279: new           #133                // class java/io/IOException\n+       282: dup\n+       283: ldc_w         #316                // String Failed to read Paxheader.Value should end with a newline\n+       286: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       289: athrow\n+       290: new           #98                 // class java/lang/String\n+       293: dup\n+       294: aload         14\n+       296: iconst_0\n+       297: iload         13\n+       299: iconst_1\n+       300: isub\n+       301: getstatic     #318                // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n+       304: invokespecial #106                // Method java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n+       307: astore        16\n+       309: aload         5\n+       311: aload         12\n+       313: aload         16\n+       315: invokeinterface #324,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+       320: pop\n+       321: aload         12\n+       323: ldc_w         #328                // String GNU.sparse.offset\n+       326: invokevirtual #330                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+       329: ifeq          401\n+       332: aload         6\n+       334: ifnull        357\n+       337: aload_1\n+       338: new           #154                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       341: dup\n+       342: aload         6\n+       344: invokevirtual #333                // Method java/lang/Long.longValue:()J\n+       347: lconst_0\n+       348: invokespecial #156                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       351: invokeinterface #177,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       356: pop\n+       357: aload         16\n+       359: invokestatic  #334                // Method java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+       362: astore        6\n+       364: goto          380\n+       367: astore        17\n+       369: new           #133                // class java/io/IOException\n+       372: dup\n+       373: ldc_w         #339                // String Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n+       376: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       379: athrow\n+       380: aload         6\n+       382: invokevirtual #333                // Method java/lang/Long.longValue:()J\n+       385: lconst_0\n+       386: lcmp\n+       387: ifge          401\n+       390: new           #133                // class java/io/IOException\n+       393: dup\n+       394: ldc_w         #341                // String Failed to read Paxheader.GNU.sparse.offset contains negative value\n+       397: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       400: athrow\n+       401: aload         12\n+       403: ldc_w         #343                // String GNU.sparse.numbytes\n+       406: invokevirtual #330                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+       409: ifeq          493\n+       412: aload         6\n+       414: ifnonnull     428\n+       417: new           #133                // class java/io/IOException\n+       420: dup\n+       421: ldc_w         #345                // String Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+       424: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       427: athrow\n+       428: aload         16\n+       430: invokestatic  #347                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n+       433: lstore        17\n+       435: goto          451\n+       438: astore        19\n+       440: new           #133                // class java/io/IOException\n+       443: dup\n+       444: ldc_w         #351                // String Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n+       447: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       450: athrow\n+       451: lload         17\n+       453: lconst_0\n+       454: lcmp\n+       455: ifge          469\n+       458: new           #133                // class java/io/IOException\n+       461: dup\n+       462: ldc_w         #353                // String Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n+       465: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       468: athrow\n+       469: aload_1\n+       470: new           #154                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       473: dup\n+       474: aload         6\n+       476: invokevirtual #333                // Method java/lang/Long.longValue:()J\n+       479: lload         17\n+       481: invokespecial #156                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       484: invokeinterface #177,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       489: pop\n+       490: aconst_null\n+       491: astore        6\n+       493: goto          552\n+       496: aload         11\n+       498: iload         8\n+       500: i2b\n+       501: invokevirtual #355                // Method java/io/ByteArrayOutputStream.write:(I)V\n+       504: goto          65\n+       507: iload         8\n+       509: bipush        48\n+       511: if_icmplt     521\n+       514: iload         8\n+       516: bipush        57\n+       518: if_icmple     532\n+       521: new           #133                // class java/io/IOException\n+       524: dup\n+       525: ldc_w         #359                // String Failed to read Paxheader. Encountered a non-number while reading length\n+       528: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       531: athrow\n+       532: iload         9\n+       534: bipush        10\n+       536: imul\n+       537: istore        9\n+       539: iload         9\n+       541: iload         8\n+       543: bipush        48\n+       545: isub\n+       546: iadd\n+       547: istore        9\n+       549: goto          22\n+       552: iload         8\n+       554: iconst_m1\n+       555: if_icmpne     561\n+       558: goto          564\n+       561: goto          16\n+       564: aload         6\n+       566: ifnull        589\n+       569: aload_1\n+       570: new           #154                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       573: dup\n+       574: aload         6\n+       576: invokevirtual #333                // Method java/lang/Long.longValue:()J\n+       579: lconst_0\n+       580: invokespecial #156                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       583: invokeinterface #177,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       588: pop\n+       589: aload         5\n+       591: areturn\n       Exception table:\n          from    to  target type\n-           350   357   360   Class java/lang/NumberFormatException\n-           417   424   427   Class java/lang/NumberFormatException\n+           357   364   367   Class java/lang/NumberFormatException\n+           428   435   438   Class java/lang/NumberFormatException\n       LineNumberTable:\n         line 725: 0\n         line 726: 10\n         line 728: 13\n         line 731: 16\n         line 732: 19\n         line 733: 22\n@@ -2518,87 +2518,87 @@\n         line 742: 65\n         line 743: 76\n         line 744: 79\n         line 745: 82\n         line 746: 101\n         line 748: 104\n         line 749: 111\n-        line 751: 120\n-        line 752: 127\n-        line 753: 133\n-        line 754: 146\n-        line 755: 164\n-        line 758: 197\n-        line 759: 205\n-        line 760: 210\n-        line 761: 217\n-        line 767: 255\n-        line 769: 262\n-        line 770: 274\n-        line 773: 284\n-        line 774: 303\n-        line 777: 315\n-        line 778: 325\n-        line 780: 330\n-        line 783: 350\n-        line 787: 357\n-        line 784: 360\n-        line 785: 362\n-        line 788: 372\n-        line 789: 382\n-        line 795: 392\n-        line 796: 402\n-        line 797: 407\n-        line 802: 417\n-        line 806: 424\n-        line 803: 427\n-        line 804: 429\n-        line 807: 439\n-        line 808: 446\n-        line 811: 456\n-        line 812: 477\n-        line 815: 480\n-        line 817: 483\n-        line 823: 494\n-        line 824: 508\n-        line 827: 518\n-        line 828: 525\n-        line 830: 538\n-        line 831: 544\n-        line 833: 547\n-        line 834: 550\n-        line 836: 555\n-        line 838: 575\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-          362      10    17    ex   Ljava/lang/NumberFormatException;\n-          424       3    17 numbytes   J\n-          429      10    19    ex   Ljava/lang/NumberFormatException;\n-          439      41    17 numbytes   J\n-          205     275    14  rest   [B\n-          210     270    15   got   I\n-          303     177    16 value   Ljava/lang/String;\n-          120     363    12 keyword   Ljava/lang/String;\n-          127     356    13 restLen   I\n-           65     429    11  coll   Ljava/io/ByteArrayOutputStream;\n-           29     518     8    ch   I\n-           19     528     9   len   I\n-           22     525    10  read   I\n-            0     578     0 inputStream   Ljava/io/InputStream;\n-            0     578     1 sparseHeaders   Ljava/util/List;\n-            0     578     2 globalPaxHeaders   Ljava/util/Map;\n-            0     578     3 headerSize   J\n-           10     568     5 headers   Ljava/util/Map;\n-           13     565     6 offset   Ljava/lang/Long;\n-           16     562     7 totalRead   I\n+        line 751: 121\n+        line 752: 128\n+        line 753: 134\n+        line 754: 147\n+        line 755: 165\n+        line 758: 200\n+        line 759: 208\n+        line 760: 213\n+        line 761: 220\n+        line 767: 260\n+        line 769: 267\n+        line 770: 279\n+        line 773: 290\n+        line 774: 309\n+        line 777: 321\n+        line 778: 332\n+        line 780: 337\n+        line 783: 357\n+        line 787: 364\n+        line 784: 367\n+        line 785: 369\n+        line 788: 380\n+        line 789: 390\n+        line 795: 401\n+        line 796: 412\n+        line 797: 417\n+        line 802: 428\n+        line 806: 435\n+        line 803: 438\n+        line 804: 440\n+        line 807: 451\n+        line 808: 458\n+        line 811: 469\n+        line 812: 490\n+        line 815: 493\n+        line 817: 496\n+        line 823: 507\n+        line 824: 521\n+        line 827: 532\n+        line 828: 539\n+        line 830: 552\n+        line 831: 558\n+        line 833: 561\n+        line 834: 564\n+        line 836: 569\n+        line 838: 589\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+          369      11    17    ex   Ljava/lang/NumberFormatException;\n+          435       3    17 numbytes   J\n+          440      11    19    ex   Ljava/lang/NumberFormatException;\n+          451      42    17 numbytes   J\n+          208     285    14  rest   [B\n+          213     280    15   got   I\n+          309     184    16 value   Ljava/lang/String;\n+          121     375    12 keyword   Ljava/lang/String;\n+          128     368    13 restLen   I\n+           65     442    11  coll   Ljava/io/ByteArrayOutputStream;\n+           29     532     8    ch   I\n+           19     542     9   len   I\n+           22     539    10  read   I\n+            0     592     0 inputStream   Ljava/io/InputStream;\n+            0     592     1 sparseHeaders   Ljava/util/List;\n+            0     592     2 globalPaxHeaders   Ljava/util/Map;\n+            0     592     3 headerSize   J\n+           10     582     5 headers   Ljava/util/Map;\n+           13     579     6 offset   Ljava/lang/Long;\n+           16     576     7 totalRead   I\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n-            0     578     1 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-            0     578     2 globalPaxHeaders   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-           10     568     5 headers   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+            0     592     1 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+            0     592     2 globalPaxHeaders   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+           10     582     5 headers   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n       StackMapTable: number_of_entries = 26\n         frame_type = 254 /* append */\n           offset_delta = 16\n           locals = [ class java/util/Map, class java/lang/Long, int ]\n         frame_type = 254 /* append */\n           offset_delta = 5\n           locals = [ top, int, int ]\n@@ -2607,69 +2607,69 @@\n           locals = [ class java/io/InputStream, class java/util/List, class java/util/Map, long, class java/util/Map, class java/lang/Long, int, int, int, int ]\n           stack = []\n         frame_type = 252 /* append */\n           offset_delta = 15\n           locals = [ class java/io/ByteArrayOutputStream ]\n         frame_type = 38 /* same */\n         frame_type = 253 /* append */\n-          offset_delta = 41\n+          offset_delta = 42\n           locals = [ class java/lang/String, int ]\n-        frame_type = 50 /* same */\n+        frame_type = 52 /* same */\n         frame_type = 253 /* append */\n-          offset_delta = 57\n+          offset_delta = 59\n           locals = [ class \"[B\", int ]\n-        frame_type = 28 /* same */\n+        frame_type = 29 /* same */\n         frame_type = 252 /* append */\n-          offset_delta = 65\n+          offset_delta = 66\n           locals = [ class java/lang/String ]\n         frame_type = 73 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NumberFormatException ]\n-        frame_type = 11 /* same */\n-        frame_type = 19 /* same */\n-        frame_type = 24 /* same */\n+        frame_type = 12 /* same */\n+        frame_type = 20 /* same */\n+        frame_type = 26 /* same */\n         frame_type = 73 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NumberFormatException ]\n         frame_type = 252 /* append */\n-          offset_delta = 11\n+          offset_delta = 12\n           locals = [ long ]\n-        frame_type = 16 /* same */\n+        frame_type = 17 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 23\n           locals = [ class java/io/InputStream, class java/util/List, class java/util/Map, long, class java/util/Map, class java/lang/Long, int, int, int, int, class java/io/ByteArrayOutputStream, class java/lang/String, int ]\n           stack = []\n         frame_type = 249 /* chop */\n           offset_delta = 2\n         frame_type = 250 /* chop */\n           offset_delta = 10\n         frame_type = 13 /* same */\n-        frame_type = 9 /* same */\n+        frame_type = 10 /* same */\n         frame_type = 19 /* same */\n         frame_type = 248 /* chop */\n           offset_delta = 8\n         frame_type = 2 /* same */\n         frame_type = 24 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #291                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #518                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n \n   protected static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parsePAX01SparseHeaders(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/util/List;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n-         1: invokestatic  #129                // Method parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+         1: invokestatic  #361                // Method parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n          4: areturn\n          5: astore_1\n-         6: new           #48                 // class java/io/UncheckedIOException\n+         6: new           #138                // class java/io/UncheckedIOException\n          9: dup\n         10: aload_1\n-        11: invokevirtual #130                // Method java/io/IOException.getMessage:()Ljava/lang/String;\n+        11: invokevirtual #365                // Method java/io/IOException.getMessage:()Ljava/lang/String;\n         14: aload_1\n-        15: invokespecial #131                // Method java/io/UncheckedIOException.\"<init>\":(Ljava/lang/String;Ljava/io/IOException;)V\n+        15: invokespecial #368                // Method java/io/UncheckedIOException.\"<init>\":(Ljava/lang/String;Ljava/io/IOException;)V\n         18: athrow\n       Exception table:\n          from    to  target type\n              0     4     5   Class java/io/IOException\n       LineNumberTable:\n         line 856: 0\n         line 857: 5\n@@ -2678,444 +2678,444 @@\n         Start  Length  Slot  Name   Signature\n             6      13     1    ex   Ljava/io/IOException;\n             0      19     0 sparseMap   Ljava/lang/String;\n       StackMapTable: number_of_entries = 1\n         frame_type = 69 /* same_locals_1_stack_item */\n           stack = [ class java/io/IOException ]\n     Deprecated: true\n-    Signature: #295                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #521                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n     RuntimeVisibleAnnotations:\n-      0: #272()\n+      0: #504()\n         java.lang.Deprecated\n \n   protected static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parseFromPAX01SparseHeaders(java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;)Ljava/util/List;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=7, locals=9, args_size=1\n-         0: new           #55                 // class java/util/ArrayList\n+         0: new           #159                // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #56                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #161                // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n-         9: ldc           #132                // String ,\n-        11: invokevirtual #133                // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n-        14: astore_2\n-        15: aload_2\n-        16: arraylength\n-        17: iconst_2\n-        18: irem\n-        19: iconst_1\n-        20: if_icmpne     33\n-        23: new           #46                 // class java/io/IOException\n-        26: dup\n-        27: ldc           #134                // String Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n-        29: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        32: athrow\n-        33: iconst_0\n-        34: istore_3\n-        35: iload_3\n-        36: aload_2\n-        37: arraylength\n-        38: if_icmpge     147\n-        41: aload_2\n-        42: iload_3\n-        43: aaload\n-        44: invokestatic  #124                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n-        47: lstore        4\n-        49: goto          64\n-        52: astore        6\n-        54: new           #46                 // class java/io/IOException\n-        57: dup\n-        58: ldc           #135                // String Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n-        60: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        63: athrow\n-        64: lload         4\n-        66: lconst_0\n-        67: lcmp\n-        68: ifge          81\n-        71: new           #46                 // class java/io/IOException\n-        74: dup\n-        75: ldc           #136                // String Corrupted TAR archive. Sparse struct offset contains negative value\n-        77: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        80: athrow\n-        81: aload_2\n-        82: iload_3\n-        83: iconst_1\n-        84: iadd\n-        85: aaload\n-        86: invokestatic  #124                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n-        89: lstore        6\n-        91: goto          106\n-        94: astore        8\n-        96: new           #46                 // class java/io/IOException\n-        99: dup\n-       100: ldc           #137                // String Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n-       102: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       105: athrow\n-       106: lload         6\n-       108: lconst_0\n-       109: lcmp\n-       110: ifge          123\n-       113: new           #46                 // class java/io/IOException\n-       116: dup\n-       117: ldc           #138                // String Corrupted TAR archive. Sparse struct numbytes contains negative value\n-       119: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       122: athrow\n-       123: aload_1\n-       124: new           #53                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       127: dup\n-       128: lload         4\n-       130: lload         6\n-       132: invokespecial #54                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       135: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       140: pop\n-       141: iinc          3, 2\n-       144: goto          35\n-       147: aload_1\n-       148: invokestatic  #66                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-       151: areturn\n+         9: ldc_w         #371                // String ,\n+        12: invokevirtual #373                // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n+        15: astore_2\n+        16: aload_2\n+        17: arraylength\n+        18: iconst_2\n+        19: irem\n+        20: iconst_1\n+        21: if_icmpne     35\n+        24: new           #133                // class java/io/IOException\n+        27: dup\n+        28: ldc_w         #377                // String Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n+        31: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        34: athrow\n+        35: iconst_0\n+        36: istore_3\n+        37: iload_3\n+        38: aload_2\n+        39: arraylength\n+        40: if_icmpge     153\n+        43: aload_2\n+        44: iload_3\n+        45: aaload\n+        46: invokestatic  #347                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n+        49: lstore        4\n+        51: goto          67\n+        54: astore        6\n+        56: new           #133                // class java/io/IOException\n+        59: dup\n+        60: ldc_w         #379                // String Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n+        63: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        66: athrow\n+        67: lload         4\n+        69: lconst_0\n+        70: lcmp\n+        71: ifge          85\n+        74: new           #133                // class java/io/IOException\n+        77: dup\n+        78: ldc_w         #381                // String Corrupted TAR archive. Sparse struct offset contains negative value\n+        81: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        84: athrow\n+        85: aload_2\n+        86: iload_3\n+        87: iconst_1\n+        88: iadd\n+        89: aaload\n+        90: invokestatic  #347                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n+        93: lstore        6\n+        95: goto          111\n+        98: astore        8\n+       100: new           #133                // class java/io/IOException\n+       103: dup\n+       104: ldc_w         #383                // String Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n+       107: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       110: athrow\n+       111: lload         6\n+       113: lconst_0\n+       114: lcmp\n+       115: ifge          129\n+       118: new           #133                // class java/io/IOException\n+       121: dup\n+       122: ldc_w         #385                // String Corrupted TAR archive. Sparse struct numbytes contains negative value\n+       125: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       128: athrow\n+       129: aload_1\n+       130: new           #154                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       133: dup\n+       134: lload         4\n+       136: lload         6\n+       138: invokespecial #156                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       141: invokeinterface #177,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       146: pop\n+       147: iinc          3, 2\n+       150: goto          37\n+       153: aload_1\n+       154: invokestatic  #187                // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+       157: areturn\n       Exception table:\n          from    to  target type\n-            41    49    52   Class java/lang/NumberFormatException\n-            81    91    94   Class java/lang/NumberFormatException\n+            43    51    54   Class java/lang/NumberFormatException\n+            85    95    98   Class java/lang/NumberFormatException\n       LineNumberTable:\n         line 874: 0\n         line 875: 8\n-        line 876: 15\n-        line 877: 23\n-        line 880: 33\n-        line 883: 41\n-        line 887: 49\n-        line 884: 52\n-        line 885: 54\n-        line 888: 64\n-        line 889: 71\n-        line 894: 81\n-        line 898: 91\n-        line 895: 94\n-        line 896: 96\n-        line 899: 106\n-        line 900: 113\n-        line 903: 123\n-        line 880: 141\n-        line 906: 147\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-           49       3     4 sparseOffset   J\n-           54      10     6    ex   Ljava/lang/NumberFormatException;\n-           91       3     6 sparseNumbytes   J\n-           96      10     8    ex   Ljava/lang/NumberFormatException;\n-           64      77     4 sparseOffset   J\n-          106      35     6 sparseNumbytes   J\n-           35     112     3     i   I\n-            0     152     0 sparseMap   Ljava/lang/String;\n-            8     144     1 sparseHeaders   Ljava/util/List;\n-           15     137     2 sparseHeaderStrings   [Ljava/lang/String;\n+        line 876: 16\n+        line 877: 24\n+        line 880: 35\n+        line 883: 43\n+        line 887: 51\n+        line 884: 54\n+        line 885: 56\n+        line 888: 67\n+        line 889: 74\n+        line 894: 85\n+        line 898: 95\n+        line 895: 98\n+        line 896: 100\n+        line 899: 111\n+        line 900: 118\n+        line 903: 129\n+        line 880: 147\n+        line 906: 153\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+           51       3     4 sparseOffset   J\n+           56      11     6    ex   Ljava/lang/NumberFormatException;\n+           95       3     6 sparseNumbytes   J\n+          100      11     8    ex   Ljava/lang/NumberFormatException;\n+           67      80     4 sparseOffset   J\n+          111      36     6 sparseNumbytes   J\n+           37     116     3     i   I\n+            0     158     0 sparseMap   Ljava/lang/String;\n+            8     150     1 sparseHeaders   Ljava/util/List;\n+           16     142     2 sparseHeaderStrings   [Ljava/lang/String;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n-            8     144     1 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+            8     150     1 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n       StackMapTable: number_of_entries = 9\n         frame_type = 253 /* append */\n-          offset_delta = 33\n+          offset_delta = 35\n           locals = [ class java/util/List, class \"[Ljava/lang/String;\" ]\n         frame_type = 252 /* append */\n           offset_delta = 1\n           locals = [ int ]\n         frame_type = 80 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NumberFormatException ]\n         frame_type = 252 /* append */\n-          offset_delta = 11\n+          offset_delta = 12\n           locals = [ long ]\n-        frame_type = 16 /* same */\n+        frame_type = 17 /* same */\n         frame_type = 76 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NumberFormatException ]\n         frame_type = 252 /* append */\n-          offset_delta = 11\n+          offset_delta = 12\n           locals = [ long ]\n-        frame_type = 16 /* same */\n+        frame_type = 17 /* same */\n         frame_type = 248 /* chop */\n           offset_delta = 23\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #295                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #521                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   protected static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parsePAX1XSparseHeaders(java.io.InputStream, int) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;I)Ljava/util/List;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=7, locals=12, args_size=2\n-         0: new           #55                 // class java/util/ArrayList\n+         0: new           #159                // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #56                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #161                // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_2\n          8: lconst_0\n          9: lstore_3\n         10: aload_0\n-        11: invokestatic  #139                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+        11: invokestatic  #387                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n         14: astore        5\n         16: aload         5\n         18: iconst_0\n         19: laload\n         20: lstore        6\n         22: lload         6\n         24: lconst_0\n         25: lcmp\n-        26: ifge          39\n-        29: new           #46                 // class java/io/IOException\n+        26: ifge          40\n+        29: new           #133                // class java/io/IOException\n         32: dup\n-        33: ldc           #140                // String Corrupted TAR archive. Negative value in sparse headers block\n-        35: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        38: athrow\n-        39: lload_3\n-        40: aload         5\n-        42: iconst_1\n-        43: laload\n-        44: ladd\n-        45: lstore_3\n-        46: lload         6\n-        48: dup2\n-        49: lconst_1\n-        50: lsub\n-        51: lstore        6\n-        53: lconst_0\n-        54: lcmp\n-        55: ifle          151\n-        58: aload_0\n-        59: invokestatic  #139                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-        62: astore        5\n-        64: aload         5\n-        66: iconst_0\n-        67: laload\n-        68: lstore        8\n-        70: lload         8\n-        72: lconst_0\n-        73: lcmp\n-        74: ifge          87\n-        77: new           #46                 // class java/io/IOException\n-        80: dup\n-        81: ldc           #141                // String Corrupted TAR archive. Sparse header block offset contains negative value\n-        83: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        86: athrow\n-        87: lload_3\n-        88: aload         5\n-        90: iconst_1\n-        91: laload\n-        92: ladd\n-        93: lstore_3\n-        94: aload_0\n-        95: invokestatic  #139                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-        98: astore        5\n-       100: aload         5\n-       102: iconst_0\n-       103: laload\n-       104: lstore        10\n-       106: lload         10\n-       108: lconst_0\n-       109: lcmp\n-       110: ifge          123\n-       113: new           #46                 // class java/io/IOException\n-       116: dup\n-       117: ldc           #142                // String Corrupted TAR archive. Sparse header block numbytes contains negative value\n-       119: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       122: athrow\n-       123: lload_3\n-       124: aload         5\n-       126: iconst_1\n-       127: laload\n-       128: ladd\n-       129: lstore_3\n-       130: aload_2\n-       131: new           #53                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       134: dup\n-       135: lload         8\n-       137: lload         10\n-       139: invokespecial #54                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       142: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       147: pop\n-       148: goto          46\n-       151: iload_1\n-       152: i2l\n-       153: lload_3\n+        33: ldc_w         #391                // String Corrupted TAR archive. Negative value in sparse headers block\n+        36: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        39: athrow\n+        40: lload_3\n+        41: aload         5\n+        43: iconst_1\n+        44: laload\n+        45: ladd\n+        46: lstore_3\n+        47: lload         6\n+        49: dup2\n+        50: lconst_1\n+        51: lsub\n+        52: lstore        6\n+        54: lconst_0\n+        55: lcmp\n+        56: ifle          154\n+        59: aload_0\n+        60: invokestatic  #387                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+        63: astore        5\n+        65: aload         5\n+        67: iconst_0\n+        68: laload\n+        69: lstore        8\n+        71: lload         8\n+        73: lconst_0\n+        74: lcmp\n+        75: ifge          89\n+        78: new           #133                // class java/io/IOException\n+        81: dup\n+        82: ldc_w         #393                // String Corrupted TAR archive. Sparse header block offset contains negative value\n+        85: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        88: athrow\n+        89: lload_3\n+        90: aload         5\n+        92: iconst_1\n+        93: laload\n+        94: ladd\n+        95: lstore_3\n+        96: aload_0\n+        97: invokestatic  #387                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+       100: astore        5\n+       102: aload         5\n+       104: iconst_0\n+       105: laload\n+       106: lstore        10\n+       108: lload         10\n+       110: lconst_0\n+       111: lcmp\n+       112: ifge          126\n+       115: new           #133                // class java/io/IOException\n+       118: dup\n+       119: ldc_w         #395                // String Corrupted TAR archive. Sparse header block numbytes contains negative value\n+       122: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       125: athrow\n+       126: lload_3\n+       127: aload         5\n+       129: iconst_1\n+       130: laload\n+       131: ladd\n+       132: lstore_3\n+       133: aload_2\n+       134: new           #154                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       137: dup\n+       138: lload         8\n+       140: lload         10\n+       142: invokespecial #156                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       145: invokeinterface #177,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       150: pop\n+       151: goto          47\n        154: iload_1\n        155: i2l\n-       156: lrem\n-       157: lsub\n-       158: lstore        8\n-       160: aload_0\n-       161: lload         8\n-       163: invokestatic  #143                // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-       166: pop2\n-       167: aload_2\n-       168: areturn\n+       156: lload_3\n+       157: iload_1\n+       158: i2l\n+       159: lrem\n+       160: lsub\n+       161: lstore        8\n+       163: aload_0\n+       164: lload         8\n+       166: invokestatic  #397                // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+       169: pop2\n+       170: aload_2\n+       171: areturn\n       LineNumberTable:\n         line 922: 0\n         line 923: 8\n         line 925: 10\n         line 926: 16\n         line 927: 22\n         line 929: 29\n-        line 931: 39\n-        line 932: 46\n-        line 933: 58\n-        line 934: 64\n-        line 935: 70\n-        line 936: 77\n-        line 939: 87\n-        line 941: 94\n-        line 942: 100\n-        line 943: 106\n-        line 944: 113\n-        line 947: 123\n-        line 948: 130\n-        line 949: 148\n-        line 952: 151\n-        line 953: 160\n-        line 954: 167\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-           70      78     8 sparseOffset   J\n-          106      42    10 sparseNumbytes   J\n-            0     169     0 inputStream   Ljava/io/InputStream;\n-            0     169     1 recordSize   I\n-            8     161     2 sparseHeaders   Ljava/util/List;\n-           10     159     3 bytesRead   J\n-           16     153     5 readResult   [J\n-           22     147     6 sparseHeadersCount   J\n-          160       9     8 bytesToSkip   J\n+        line 931: 40\n+        line 932: 47\n+        line 933: 59\n+        line 934: 65\n+        line 935: 71\n+        line 936: 78\n+        line 939: 89\n+        line 941: 96\n+        line 942: 102\n+        line 943: 108\n+        line 944: 115\n+        line 947: 126\n+        line 948: 133\n+        line 949: 151\n+        line 952: 154\n+        line 953: 163\n+        line 954: 170\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+           71      80     8 sparseOffset   J\n+          108      43    10 sparseNumbytes   J\n+            0     172     0 inputStream   Ljava/io/InputStream;\n+            0     172     1 recordSize   I\n+            8     164     2 sparseHeaders   Ljava/util/List;\n+           10     162     3 bytesRead   J\n+           16     156     5 readResult   [J\n+           22     150     6 sparseHeadersCount   J\n+          163       9     8 bytesToSkip   J\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n-            8     161     2 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+            8     164     2 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n       StackMapTable: number_of_entries = 5\n         frame_type = 255 /* full_frame */\n-          offset_delta = 39\n+          offset_delta = 40\n           locals = [ class java/io/InputStream, int, class java/util/List, long, class \"[J\", long ]\n           stack = []\n         frame_type = 6 /* same */\n         frame_type = 252 /* append */\n-          offset_delta = 40\n+          offset_delta = 41\n           locals = [ long ]\n         frame_type = 252 /* append */\n-          offset_delta = 35\n+          offset_delta = 36\n           locals = [ long ]\n         frame_type = 249 /* chop */\n           offset_delta = 27\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #309                         // (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #534                         // (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   private static long[] readLineOfNumberForPax1X(java.io.InputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;)[J\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=6, args_size=1\n          0: lconst_0\n          1: lstore_2\n          2: lconst_0\n          3: lstore        4\n          5: aload_0\n-         6: invokevirtual #100                // Method java/io/InputStream.read:()I\n+         6: invokevirtual #281                // Method java/io/InputStream.read:()I\n          9: dup\n         10: istore_1\n         11: bipush        10\n-        13: if_icmpeq     74\n+        13: if_icmpeq     76\n         16: lload         4\n         18: lconst_1\n         19: ladd\n         20: lstore        4\n         22: iload_1\n         23: iconst_m1\n-        24: if_icmpne     37\n-        27: new           #46                 // class java/io/IOException\n+        24: if_icmpne     38\n+        27: new           #133                // class java/io/IOException\n         30: dup\n-        31: ldc           #144                // String Unexpected EOF when reading parse information of 1.X PAX format\n-        33: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        36: athrow\n-        37: iload_1\n-        38: bipush        48\n-        40: if_icmplt     49\n-        43: iload_1\n-        44: bipush        57\n-        46: if_icmple     59\n-        49: new           #46                 // class java/io/IOException\n-        52: dup\n-        53: ldc           #145                // String Corrupted TAR archive. Non-numeric value in sparse headers block\n-        55: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        58: athrow\n-        59: lload_2\n-        60: ldc2_w        #146                // long 10l\n-        63: lmul\n-        64: iload_1\n-        65: bipush        48\n-        67: isub\n-        68: i2l\n-        69: ladd\n-        70: lstore_2\n-        71: goto          5\n-        74: lload         4\n-        76: lconst_1\n-        77: ladd\n-        78: lstore        4\n-        80: iconst_2\n-        81: newarray       long\n-        83: dup\n-        84: iconst_0\n-        85: lload_2\n-        86: lastore\n-        87: dup\n-        88: iconst_1\n-        89: lload         4\n-        91: lastore\n-        92: areturn\n+        31: ldc_w         #401                // String Unexpected EOF when reading parse information of 1.X PAX format\n+        34: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        37: athrow\n+        38: iload_1\n+        39: bipush        48\n+        41: if_icmplt     50\n+        44: iload_1\n+        45: bipush        57\n+        47: if_icmple     61\n+        50: new           #133                // class java/io/IOException\n+        53: dup\n+        54: ldc_w         #403                // String Corrupted TAR archive. Non-numeric value in sparse headers block\n+        57: invokespecial #171                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        60: athrow\n+        61: lload_2\n+        62: ldc2_w        #405                // long 10l\n+        65: lmul\n+        66: iload_1\n+        67: bipush        48\n+        69: isub\n+        70: i2l\n+        71: ladd\n+        72: lstore_2\n+        73: goto          5\n+        76: lload         4\n+        78: lconst_1\n+        79: ladd\n+        80: lstore        4\n+        82: iconst_2\n+        83: newarray       long\n+        85: dup\n+        86: iconst_0\n+        87: lload_2\n+        88: lastore\n+        89: dup\n+        90: iconst_1\n+        91: lload         4\n+        93: lastore\n+        94: areturn\n       LineNumberTable:\n         line 967: 0\n         line 968: 2\n         line 970: 5\n         line 971: 16\n         line 972: 22\n         line 973: 27\n-        line 975: 37\n-        line 976: 49\n-        line 978: 59\n-        line 980: 74\n-        line 982: 80\n+        line 975: 38\n+        line 976: 50\n+        line 978: 61\n+        line 980: 76\n+        line 982: 82\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      93     0 inputStream   Ljava/io/InputStream;\n-           11      82     1 number   I\n-            2      91     2 result   J\n-            5      88     4 bytesRead   J\n+            0      95     0 inputStream   Ljava/io/InputStream;\n+           11      84     1 number   I\n+            2      93     2 result   J\n+            5      90     4 bytesRead   J\n       StackMapTable: number_of_entries = 5\n         frame_type = 254 /* append */\n           offset_delta = 5\n           locals = [ top, long, long ]\n         frame_type = 255 /* full_frame */\n-          offset_delta = 31\n+          offset_delta = 32\n           locals = [ class java/io/InputStream, int, long, long ]\n           stack = []\n         frame_type = 11 /* same */\n-        frame_type = 9 /* same */\n+        frame_type = 10 /* same */\n         frame_type = 14 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=2, locals=0, args_size=0\n          0: aconst_null\n-         1: invokestatic  #148                // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         4: putstatic     #44                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         7: new           #149                // class org/apache/commons/compress/archivers/tar/TarUtils$1\n+         1: invokestatic  #407                // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         4: putstatic     #125                // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         7: new           #413                // class org/apache/commons/compress/archivers/tar/TarUtils$1\n         10: dup\n-        11: invokespecial #150                // Method org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n-        14: putstatic     #47                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        11: invokespecial #415                // Method org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n+        14: putstatic     #135                // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         17: return\n       LineNumberTable:\n         line 55: 0\n         line 56: 1\n         line 62: 7\n }\n SourceFile: \"TarUtils.java\"\n InnerClasses:\n-  #149;                                   // class org/apache/commons/compress/archivers/tar/TarUtils$1\n+  #413;                                   // class org/apache/commons/compress/archivers/tar/TarUtils$1\n"}]}
