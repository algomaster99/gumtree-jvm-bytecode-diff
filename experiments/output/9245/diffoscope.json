{"diffoscope-json-version": 1, "source1": "first/Expander.class", "source2": "second/Expander.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -51,28 +51,17 @@\n                 if (!nullTarget && !Files.isDirectory(parent, new LinkOption[0]) && Files.createDirectories(parent, (FileAttribute<?>[])new FileAttribute[0]) == null) {\n                     throw new IOException(\"Failed to create directory \" + parent);\n                 }\n                 if (nullTarget) {\n                     writer.writeEntryDataTo(nextEntry, (OutputStream)null);\n                 }\n                 else {\n-                    final OutputStream outputStream = Files.newOutputStream(targetPath, new OpenOption[0]);\n-                    Throwable x0 = null;\n-                    try {\n+                    try (final OutputStream outputStream = Files.newOutputStream(targetPath, new OpenOption[0])) {\n                         writer.writeEntryDataTo(nextEntry, outputStream);\n                     }\n-                    catch (final Throwable t) {\n-                        x0 = t;\n-                        throw t;\n-                    }\n-                    finally {\n-                        if (outputStream != null) {\n-                            $closeResource(x0, outputStream);\n-                        }\n-                    }\n                 }\n             }\n         }\n     }\n     \n     public void expand(final ArchiveInputStream archive, final File targetDirectory) throws IOException {\n         this.expand(archive, this.toPath(targetDirectory));\n@@ -92,42 +81,24 @@\n     \n     @Deprecated\n     public void expand(final InputStream archive, final File targetDirectory) throws IOException, ArchiveException {\n         this.expand(archive, targetDirectory, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n     public void expand(final InputStream archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n-        Throwable x0 = null;\n-        try {\n+        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n             this.expand((ArchiveInputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveInputStream(archive)), targetDirectory);\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, (AutoCloseable)c);\n-        }\n     }\n     \n     public void expand(final Path archive, final Path targetDirectory) throws IOException, ArchiveException {\n         String format = null;\n-        final InputStream inputStream = new BufferedInputStream(Files.newInputStream(archive, new OpenOption[0]));\n-        Throwable x0 = null;\n-        try {\n+        try (final InputStream inputStream = new BufferedInputStream(Files.newInputStream(archive, new OpenOption[0]))) {\n             format = ArchiveStreamFactory.detect(inputStream);\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, inputStream);\n-        }\n         this.expand(format, archive, targetDirectory);\n     }\n     \n     public void expand(final SevenZFile archive, final File targetDirectory) throws IOException {\n         this.expand(archive, this.toPath(targetDirectory));\n     }\n     \n@@ -154,73 +125,42 @@\n     }\n     \n     public void expand(final String format, final InputStream archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n         this.expand(format, archive, this.toPath(targetDirectory), closeableConsumer);\n     }\n     \n     public void expand(final String format, final InputStream archive, final Path targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n-        Throwable x0 = null;\n-        try {\n+        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n             this.expand((ArchiveInputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveInputStream(format, archive)), targetDirectory);\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, (AutoCloseable)c);\n-        }\n     }\n     \n     public void expand(final String format, final Path archive, final Path targetDirectory) throws IOException, ArchiveException {\n         if (this.prefersSeekableByteChannel(format)) {\n-            final SeekableByteChannel channel = FileChannel.open(archive, StandardOpenOption.READ);\n-            Throwable x0 = null;\n-            try {\n+            try (final SeekableByteChannel channel = FileChannel.open(archive, StandardOpenOption.READ)) {\n                 this.expand(format, channel, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);\n             }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n-            }\n-            finally {\n-                if (channel != null) {\n-                    $closeResource(x0, channel);\n-                }\n-            }\n             return;\n         }\n-        final InputStream inputStream = new BufferedInputStream(Files.newInputStream(archive, new OpenOption[0]));\n-        Throwable x2 = null;\n-        try {\n+        try (final InputStream inputStream = new BufferedInputStream(Files.newInputStream(archive, new OpenOption[0]))) {\n             this.expand(format, inputStream, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);\n         }\n-        catch (final Throwable t2) {\n-            x2 = t2;\n-            throw t2;\n-        }\n-        finally {\n-            $closeResource(x2, inputStream);\n-        }\n     }\n     \n     @Deprecated\n     public void expand(final String format, final SeekableByteChannel archive, final File targetDirectory) throws IOException, ArchiveException {\n         this.expand(format, archive, targetDirectory, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n     public void expand(final String format, final SeekableByteChannel archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n         this.expand(format, archive, this.toPath(targetDirectory), closeableConsumer);\n     }\n     \n     public void expand(final String format, final SeekableByteChannel archive, final Path targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n-        Throwable x0 = null;\n-        try {\n+        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n             if (!this.prefersSeekableByteChannel(format)) {\n                 this.expand(format, (InputStream)c.track((Closeable)Channels.newInputStream(archive)), targetDirectory, CloseableConsumer.NULL_CONSUMER);\n             }\n             else if (\"tar\".equalsIgnoreCase(format)) {\n                 this.expand((TarFile)c.track((Closeable)new TarFile(archive)), targetDirectory);\n             }\n             else if (\"zip\".equalsIgnoreCase(format)) {\n@@ -229,90 +169,47 @@\n             else {\n                 if (!\"7z\".equalsIgnoreCase(format)) {\n                     throw new ArchiveException(\"Don't know how to handle format \" + format);\n                 }\n                 this.expand((SevenZFile)c.track((Closeable)new SevenZFile(archive)), targetDirectory);\n             }\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, (AutoCloseable)c);\n-        }\n     }\n     \n     public void expand(final TarFile archive, final File targetDirectory) throws IOException {\n         this.expand(archive, this.toPath(targetDirectory));\n     }\n     \n     public void expand(final TarFile archive, final Path targetDirectory) throws IOException {\n         final Iterator<TarArchiveEntry> entryIterator = archive.getEntries().iterator();\n         this.expand(() -> entryIterator.hasNext() ? ((ArchiveEntry)entryIterator.next()) : null, (entry, out) -> {\n-            final InputStream in = archive.getInputStream((TarArchiveEntry)entry);\n-            Throwable x0 = null;\n-            try {\n+            try (final InputStream in = archive.getInputStream((TarArchiveEntry)entry)) {\n                 IOUtils.copy(in, out);\n             }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n-            }\n-            finally {\n-                if (in != null) {\n-                    $closeResource(x0, in);\n-                }\n-            }\n         }, targetDirectory);\n     }\n     \n     public void expand(final ZipFile archive, final File targetDirectory) throws IOException {\n         this.expand(archive, this.toPath(targetDirectory));\n     }\n     \n     public void expand(final ZipFile archive, final Path targetDirectory) throws IOException {\n         final Enumeration<ZipArchiveEntry> entries = archive.getEntries();\n         this.expand(() -> {\n             ZipArchiveEntry next;\n             for (next = (entries.hasMoreElements() ? ((ZipArchiveEntry)entries.nextElement()) : null); next != null && !archive.canReadEntryData(next); next = (entries.hasMoreElements() ? ((ZipArchiveEntry)entries.nextElement()) : null)) {}\n             return (ArchiveEntry)next;\n         }, (entry, out) -> {\n-            final InputStream in = archive.getInputStream((ZipArchiveEntry)entry);\n-            Throwable x0 = null;\n-            try {\n+            try (final InputStream in = archive.getInputStream((ZipArchiveEntry)entry)) {\n                 IOUtils.copy(in, out);\n             }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n-            }\n-            finally {\n-                if (in != null) {\n-                    $closeResource(x0, in);\n-                }\n-            }\n         }, targetDirectory);\n     }\n     \n     private boolean prefersSeekableByteChannel(final String format) {\n         return \"tar\".equalsIgnoreCase(format) || \"zip\".equalsIgnoreCase(format) || \"7z\".equalsIgnoreCase(format);\n     }\n     \n     private Path toPath(final File targetDirectory) {\n         return (targetDirectory != null) ? targetDirectory.toPath() : null;\n     }\n-    \n-    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n-        if (x0 != null) {\n-            try {\n-                x1.close();\n-            }\n-            catch (final Throwable exception) {\n-                x0.addSuppressed(exception);\n-            }\n-        }\n-        else {\n-            x1.close();\n-        }\n-    }\n }\n"}]}
