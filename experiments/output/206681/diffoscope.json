{"diffoscope-json-version": 1, "source1": "first/ConstantLookup.class", "source2": "second/ConstantLookup.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,41 +13,42 @@\n     private static final Map<String, Object> CACHE;\n     private final Log log;\n     \n     public ConstantLookup() {\n         this.log = LogFactory.getLog((Class)this.getClass());\n     }\n     \n-    public Object lookup(final String var) {\n-        if (var == null) {\n+    public Object lookup(final String key) {\n+        if (key == null) {\n             return null;\n         }\n-        return ConstantLookup.CACHE.computeIfAbsent(var, k -> {\n-            final int fieldPos = var.lastIndexOf(46);\n-            if (fieldPos >= 0) {\n+        return ConstantLookup.CACHE.computeIfAbsent(key, p1 -> {\n+            str.lastIndexOf(46);\n+            final int endIndex;\n+            if (endIndex >= 0) {\n                 try {\n-                    return this.resolveField(var.substring(0, fieldPos), var.substring(fieldPos + 1));\n+                    return this.resolveField(str.substring(0, endIndex), str.substring(endIndex + 1));\n                 }\n                 catch (final Exception ex) {\n-                    this.log.warn((Object)(\"Could not obtain value for variable \" + var), (Throwable)ex);\n+                    this.log.warn((Object)(\"Could not obtain value for variable \" + str), (Throwable)ex);\n                 }\n             }\n             return null;\n         });\n     }\n     \n     public static void clear() {\n         ConstantLookup.CACHE.clear();\n     }\n     \n-    protected Object resolveField(final String className, final String fieldName) throws Exception {\n-        return this.fetchClass(className).getField(fieldName).get(null);\n+    protected Object resolveField(final String s, final String name) throws Exception {\n+        return this.fetchClass(s).getField(name).get(null);\n     }\n     \n-    protected Class<?> fetchClass(final String className) throws ClassNotFoundException {\n-        return ClassUtils.getClass(className);\n+    protected Class<?> fetchClass(final String s) throws ClassNotFoundException {\n+        return ClassUtils.getClass(s);\n     }\n     \n     static {\n         CACHE = new ConcurrentHashMap<String, Object>();\n     }\n }\n"}]}
