{"diffoscope-json-version": 1, "source1": "first/LZWInputStream.class", "source2": "second/LZWInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -34,169 +34,166 @@\n     }\n     \n     public void close() throws IOException {\n         this.in.close();\n     }\n     \n     public int read() throws IOException {\n-        final int ret = this.read(this.oneByte);\n-        if (ret < 0) {\n-            return ret;\n+        final int read = this.read(this.oneByte);\n+        if (read < 0) {\n+            return read;\n         }\n         return 0xFF & this.oneByte[0];\n     }\n     \n-    public int read(final byte[] b, final int off, final int len) throws IOException {\n-        if (len == 0) {\n+    public int read(final byte[] array, final int n, final int n2) throws IOException {\n+        if (n2 == 0) {\n             return 0;\n         }\n-        int bytesRead = this.readFromStack(b, off, len);\n-        while (len - bytesRead > 0) {\n-            final int result = this.decompressNextSymbol();\n-            if (result < 0) {\n-                if (bytesRead > 0) {\n-                    this.count(bytesRead);\n-                    return bytesRead;\n+        int fromStack = this.readFromStack(array, n, n2);\n+        while (n2 - fromStack > 0) {\n+            final int decompressNextSymbol = this.decompressNextSymbol();\n+            if (decompressNextSymbol < 0) {\n+                if (fromStack > 0) {\n+                    this.count(fromStack);\n+                    return fromStack;\n                 }\n-                return result;\n+                return decompressNextSymbol;\n             }\n             else {\n-                bytesRead += this.readFromStack(b, off + bytesRead, len - bytesRead);\n+                fromStack += this.readFromStack(array, n + fromStack, n2 - fromStack);\n             }\n         }\n-        this.count(bytesRead);\n-        return bytesRead;\n+        this.count(fromStack);\n+        return fromStack;\n     }\n     \n     public long getCompressedCount() {\n         return this.in.getBytesRead();\n     }\n     \n     protected abstract int decompressNextSymbol() throws IOException;\n     \n     protected abstract int addEntry(final int p0, final byte p1) throws IOException;\n     \n-    protected void setClearCode(final int codeSize) {\n-        this.clearCode = 1 << codeSize - 1;\n+    protected void setClearCode(final int n) {\n+        this.clearCode = 1 << n - 1;\n     }\n     \n-    protected void initializeTables(final int maxCodeSize, final int memoryLimitInKb) throws MemoryLimitException {\n-        if (maxCodeSize <= 0) {\n-            throw new IllegalArgumentException(\"maxCodeSize is \" + maxCodeSize + \", must be bigger than 0\");\n-        }\n-        if (memoryLimitInKb > -1) {\n-            final int maxTableSize = 1 << maxCodeSize;\n-            final long memoryUsageInBytes = maxTableSize * 6L;\n-            final long memoryUsageInKb = memoryUsageInBytes >> 10;\n-            if (memoryUsageInKb > memoryLimitInKb) {\n-                throw new MemoryLimitException(memoryUsageInKb, memoryLimitInKb);\n+    protected void initializeTables(final int i, final int n) throws MemoryLimitException {\n+        if (i <= 0) {\n+            throw new IllegalArgumentException(\"maxCodeSize is \" + i + \", must be bigger than 0\");\n+        }\n+        if (n > -1) {\n+            final long n2 = (1 << i) * 6L >> 10;\n+            if (n2 > n) {\n+                throw new MemoryLimitException(n2, n);\n             }\n         }\n-        this.initializeTables(maxCodeSize);\n+        this.initializeTables(i);\n     }\n     \n-    protected void initializeTables(final int maxCodeSize) {\n-        if (maxCodeSize <= 0) {\n-            throw new IllegalArgumentException(\"maxCodeSize is \" + maxCodeSize + \", must be bigger than 0\");\n-        }\n-        final int maxTableSize = 1 << maxCodeSize;\n-        this.prefixes = new int[maxTableSize];\n-        this.characters = new byte[maxTableSize];\n-        this.outputStack = new byte[maxTableSize];\n-        this.outputStackLocation = maxTableSize;\n-        final int max = 256;\n-        for (int i = 0; i < 256; ++i) {\n-            this.prefixes[i] = -1;\n-            this.characters[i] = (byte)i;\n+    protected void initializeTables(final int i) {\n+        if (i <= 0) {\n+            throw new IllegalArgumentException(\"maxCodeSize is \" + i + \", must be bigger than 0\");\n+        }\n+        final int outputStackLocation = 1 << i;\n+        this.prefixes = new int[outputStackLocation];\n+        this.characters = new byte[outputStackLocation];\n+        this.outputStack = new byte[outputStackLocation];\n+        this.outputStackLocation = outputStackLocation;\n+        for (int j = 0; j < 256; ++j) {\n+            this.prefixes[j] = -1;\n+            this.characters[j] = (byte)j;\n         }\n     }\n     \n     protected int readNextCode() throws IOException {\n         if (this.codeSize > 31) {\n             throw new IllegalArgumentException(\"Code size must not be bigger than 31\");\n         }\n         return (int)this.in.readBits(this.codeSize);\n     }\n     \n-    protected int addEntry(final int previousCode, final byte character, final int maxTableSize) {\n-        if (this.tableSize < maxTableSize) {\n-            this.prefixes[this.tableSize] = previousCode;\n-            this.characters[this.tableSize] = character;\n+    protected int addEntry(final int n, final byte b, final int n2) {\n+        if (this.tableSize < n2) {\n+            this.prefixes[this.tableSize] = n;\n+            this.characters[this.tableSize] = b;\n             return this.tableSize++;\n         }\n         return -1;\n     }\n     \n     protected int addRepeatOfPreviousCode() throws IOException {\n         if (this.previousCode == -1) {\n             throw new IOException(\"The first code can't be a reference to its preceding code\");\n         }\n         return this.addEntry(this.previousCode, this.previousCodeFirstChar);\n     }\n     \n-    protected int expandCodeToOutputStack(final int code, final boolean addedUnfinishedEntry) throws IOException {\n-        for (int entry = code; entry >= 0; entry = this.prefixes[entry]) {\n-            this.outputStack[--this.outputStackLocation] = this.characters[entry];\n+    protected int expandCodeToOutputStack(final int previousCode, final boolean b) throws IOException {\n+        for (int i = previousCode; i >= 0; i = this.prefixes[i]) {\n+            this.outputStack[--this.outputStackLocation] = this.characters[i];\n         }\n-        if (this.previousCode != -1 && !addedUnfinishedEntry) {\n+        if (this.previousCode != -1 && !b) {\n             this.addEntry(this.previousCode, this.outputStack[this.outputStackLocation]);\n         }\n-        this.previousCode = code;\n+        this.previousCode = previousCode;\n         this.previousCodeFirstChar = this.outputStack[this.outputStackLocation];\n         return this.outputStackLocation;\n     }\n     \n-    private int readFromStack(final byte[] b, final int off, final int len) {\n-        final int remainingInStack = this.outputStack.length - this.outputStackLocation;\n-        if (remainingInStack > 0) {\n-            final int maxLength = Math.min(remainingInStack, len);\n-            System.arraycopy(this.outputStack, this.outputStackLocation, b, off, maxLength);\n-            this.outputStackLocation += maxLength;\n-            return maxLength;\n+    private int readFromStack(final byte[] array, final int n, final int b) {\n+        final int a = this.outputStack.length - this.outputStackLocation;\n+        if (a > 0) {\n+            final int min = Math.min(a, b);\n+            System.arraycopy(this.outputStack, this.outputStackLocation, array, n, min);\n+            this.outputStackLocation += min;\n+            return min;\n         }\n         return 0;\n     }\n     \n     protected int getCodeSize() {\n         return this.codeSize;\n     }\n     \n     protected void resetCodeSize() {\n         this.setCodeSize(9);\n     }\n     \n-    protected void setCodeSize(final int cs) {\n-        this.codeSize = cs;\n+    protected void setCodeSize(final int codeSize) {\n+        this.codeSize = codeSize;\n     }\n     \n     protected void incrementCodeSize() {\n         ++this.codeSize;\n     }\n     \n     protected void resetPreviousCode() {\n         this.previousCode = -1;\n     }\n     \n-    protected int getPrefix(final int offset) {\n-        return this.prefixes[offset];\n+    protected int getPrefix(final int n) {\n+        return this.prefixes[n];\n     }\n     \n-    protected void setPrefix(final int offset, final int value) {\n-        this.prefixes[offset] = value;\n+    protected void setPrefix(final int n, final int n2) {\n+        this.prefixes[n] = n2;\n     }\n     \n     protected int getPrefixesLength() {\n         return this.prefixes.length;\n     }\n     \n     protected int getClearCode() {\n         return this.clearCode;\n     }\n     \n     protected int getTableSize() {\n         return this.tableSize;\n     }\n     \n-    protected void setTableSize(final int newSize) {\n-        this.tableSize = newSize;\n+    protected void setTableSize(final int tableSize) {\n+        this.tableSize = tableSize;\n     }\n }\n"}]}
