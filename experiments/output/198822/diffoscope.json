{"diffoscope-json-version": 1, "source1": "first/ClassLoader.class", "source2": "second/ClassLoader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,13 +1,13 @@\n \n package org.apache.bcel.util;\n \n import org.apache.bcel.classfile.ConstantPool;\n-import org.apache.bcel.classfile.ConstantUtf8;\n import org.apache.bcel.classfile.ConstantClass;\n+import org.apache.bcel.classfile.ConstantUtf8;\n import java.io.IOException;\n import java.io.InputStream;\n import org.apache.bcel.classfile.ClassParser;\n import java.io.ByteArrayInputStream;\n import org.apache.bcel.classfile.Utility;\n import org.apache.bcel.classfile.JavaClass;\n import java.util.Hashtable;\n@@ -21,91 +21,88 @@\n     private final String[] ignored_packages;\n     private Repository repository;\n     \n     public ClassLoader() {\n         this(ClassLoader.DEFAULT_IGNORED_PACKAGES);\n     }\n     \n-    public ClassLoader(final java.lang.ClassLoader deferTo) {\n-        super(deferTo);\n+    public ClassLoader(final java.lang.ClassLoader parent) {\n+        super(parent);\n         this.classes = new Hashtable<String, Class<?>>();\n         this.repository = (Repository)SyntheticRepository.getInstance();\n         this.ignored_packages = ClassLoader.DEFAULT_IGNORED_PACKAGES;\n-        this.repository = (Repository)new ClassLoaderRepository(deferTo);\n+        this.repository = (Repository)new ClassLoaderRepository(parent);\n     }\n     \n     public ClassLoader(final String[] ignored_packages) {\n         this.classes = new Hashtable<String, Class<?>>();\n         this.repository = (Repository)SyntheticRepository.getInstance();\n         this.ignored_packages = ignored_packages;\n     }\n     \n-    public ClassLoader(final java.lang.ClassLoader deferTo, final String[] ignored_packages) {\n-        this(ignored_packages);\n-        this.repository = (Repository)new ClassLoaderRepository(deferTo);\n+    public ClassLoader(final java.lang.ClassLoader classLoader, final String[] array) {\n+        this(array);\n+        this.repository = (Repository)new ClassLoaderRepository(classLoader);\n     }\n     \n     @Override\n-    protected Class<?> loadClass(final String class_name, final boolean resolve) throws ClassNotFoundException {\n-        Class<?> cl = null;\n-        if ((cl = this.classes.get(class_name)) == null) {\n-            for (final String ignored_package : this.ignored_packages) {\n-                if (class_name.startsWith(ignored_package)) {\n-                    cl = this.getParent().loadClass(class_name);\n+    protected Class<?> loadClass(final String s, final boolean b) throws ClassNotFoundException {\n+        Class<?> clazz;\n+        if ((clazz = this.classes.get(s)) == null) {\n+            final String[] ignored_packages = this.ignored_packages;\n+            for (int length = ignored_packages.length, i = 0; i < length; ++i) {\n+                if (s.startsWith(ignored_packages[i])) {\n+                    clazz = this.getParent().loadClass(s);\n                     break;\n                 }\n             }\n-            if (cl == null) {\n-                JavaClass clazz = null;\n-                if (class_name.contains(\"$$BCEL$$\")) {\n-                    clazz = this.createClass(class_name);\n+            if (clazz == null) {\n+                JavaClass javaClass;\n+                if (s.contains(\"$$BCEL$$\")) {\n+                    javaClass = this.createClass(s);\n                 }\n                 else {\n-                    if ((clazz = this.repository.loadClass(class_name)) == null) {\n-                        throw new ClassNotFoundException(class_name);\n+                    final JavaClass loadClass;\n+                    if ((loadClass = this.repository.loadClass(s)) == null) {\n+                        throw new ClassNotFoundException(s);\n                     }\n-                    clazz = this.modifyClass(clazz);\n+                    javaClass = this.modifyClass(loadClass);\n                 }\n-                if (clazz != null) {\n-                    final byte[] bytes = clazz.getBytes();\n-                    cl = this.defineClass(class_name, bytes, 0, bytes.length);\n+                if (javaClass != null) {\n+                    final byte[] bytes = javaClass.getBytes();\n+                    clazz = this.defineClass(s, bytes, 0, bytes.length);\n                 }\n                 else {\n-                    cl = Class.forName(class_name);\n+                    clazz = Class.forName(s);\n                 }\n             }\n-            if (resolve) {\n-                this.resolveClass(cl);\n+            if (b) {\n+                this.resolveClass(clazz);\n             }\n         }\n-        this.classes.put(class_name, cl);\n-        return cl;\n+        this.classes.put(s, clazz);\n+        return clazz;\n     }\n     \n-    protected JavaClass modifyClass(final JavaClass clazz) {\n-        return clazz;\n+    protected JavaClass modifyClass(final JavaClass javaClass) {\n+        return javaClass;\n     }\n     \n-    protected JavaClass createClass(final String class_name) {\n-        final int index = class_name.indexOf(\"$$BCEL$$\");\n-        final String real_name = class_name.substring(index + \"$$BCEL$$\".length());\n-        JavaClass clazz = null;\n+    protected JavaClass createClass(final String s) {\n+        final String substring = s.substring(s.indexOf(\"$$BCEL$$\") + \"$$BCEL$$\".length());\n+        JavaClass parse;\n         try {\n-            final byte[] bytes = Utility.decode(real_name, true);\n-            final ClassParser parser = new ClassParser((InputStream)new ByteArrayInputStream(bytes), \"foo\");\n-            clazz = parser.parse();\n+            parse = new ClassParser((InputStream)new ByteArrayInputStream(Utility.decode(substring, true)), \"foo\").parse();\n         }\n-        catch (final IOException e) {\n-            e.printStackTrace();\n+        catch (final IOException ex) {\n+            ex.printStackTrace();\n             return null;\n         }\n-        final ConstantPool cp = clazz.getConstantPool();\n-        final ConstantClass cl = (ConstantClass)cp.getConstant(clazz.getClassNameIndex(), (byte)7);\n-        final ConstantUtf8 name = (ConstantUtf8)cp.getConstant(cl.getNameIndex(), (byte)1);\n-        name.setBytes(class_name.replace('.', '/'));\n-        return clazz;\n+        final ConstantPool constantPool = parse.getConstantPool();\n+        ((ConstantUtf8)constantPool.getConstant(((ConstantClass)constantPool.getConstant(parse.getClassNameIndex(), (byte)7)).getNameIndex(), (byte)1)).setBytes(s.replace('.', '/'));\n+        return parse;\n     }\n     \n     static {\n         DEFAULT_IGNORED_PACKAGES = new String[] { \"java.\", \"javax.\", \"sun.\" };\n     }\n }\n"}]}
