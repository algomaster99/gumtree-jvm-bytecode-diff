{"diffoscope-json-version": 1, "source1": "first/UnsupportedZipFeatureException.class", "source2": "second/UnsupportedZipFeatureException.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,105 +1,103 @@\n-  SHA-256 checksum ed5d1029659c88c5516894514eeec20575fe01c5af50ab917a253916654cf9a0\n+  SHA-256 checksum 803ea44420729663a33b7f76a57c68f6a57e1b17b20647a4077aff4d3c01cd27\n   Compiled from \"UnsupportedZipFeatureException.java\"\n public class org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException extends java.util.zip.ZipException\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #33                         // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  super_class: #28                        // java/util/zip/ZipException\n+  this_class: #1                          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  super_class: #3                         // java/util/zip/ZipException\n   interfaces: 0, fields: 3, methods: 5, attributes: 2\n Constant pool:\n-   #1 = Class              #2             // java/lang/StringBuilder\n-   #2 = Utf8               java/lang/StringBuilder\n-   #3 = Methodref          #1.#4          // java/lang/StringBuilder.\"<init>\":()V\n-   #4 = NameAndType        #5:#6          // \"<init>\":()V\n-   #5 = Utf8               <init>\n-   #6 = Utf8               ()V\n-   #7 = String             #8             // Unsupported feature\n-   #8 = Utf8               Unsupported feature\n-   #9 = Methodref          #1.#10         // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #10 = NameAndType        #11:#12        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #11 = Utf8               append\n-  #12 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #13 = Methodref          #1.#14         // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #14 = NameAndType        #11:#15        // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #15 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #16 = String             #17            //  used in entry\n-  #17 = Utf8                used in entry\n-  #18 = Methodref          #19.#20        // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-  #19 = Class              #21            // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #20 = NameAndType        #22:#23        // getName:()Ljava/lang/String;\n-  #21 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #22 = Utf8               getName\n-  #23 = Utf8               ()Ljava/lang/String;\n-  #24 = Methodref          #1.#25         // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-  #25 = NameAndType        #26:#23        // toString:()Ljava/lang/String;\n-  #26 = Utf8               toString\n-  #27 = Methodref          #28.#29        // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-  #28 = Class              #30            // java/util/zip/ZipException\n-  #29 = NameAndType        #5:#31         // \"<init>\":(Ljava/lang/String;)V\n-  #30 = Utf8               java/util/zip/ZipException\n-  #31 = Utf8               (Ljava/lang/String;)V\n-  #32 = Fieldref           #33.#34        // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.reason:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #33 = Class              #35            // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  #34 = NameAndType        #36:#37        // reason:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #35 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  #36 = Utf8               reason\n-  #37 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #38 = Fieldref           #33.#39        // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #39 = NameAndType        #40:#41        // entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #40 = Utf8               entry\n-  #41 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #42 = String             #43            // Unsupported compression method\n-  #43 = Utf8               Unsupported compression method\n-  #44 = Methodref          #19.#45        // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-  #45 = NameAndType        #46:#47        // getMethod:()I\n-  #46 = Utf8               getMethod\n-  #47 = Utf8               ()I\n-  #48 = Methodref          #1.#49         // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-  #49 = NameAndType        #11:#50        // append:(I)Ljava/lang/StringBuilder;\n-  #50 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #51 = String             #52            //  (\n-  #52 = Utf8                (\n-  #53 = Methodref          #54.#55        // org/apache/commons/compress/archivers/zip/ZipMethod.name:()Ljava/lang/String;\n-  #54 = Class              #56            // org/apache/commons/compress/archivers/zip/ZipMethod\n-  #55 = NameAndType        #57:#23        // name:()Ljava/lang/String;\n-  #56 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n-  #57 = Utf8               name\n-  #58 = String             #59            // ) used in entry\n-  #59 = Utf8               ) used in entry\n-  #60 = Fieldref           #61.#62        // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #61 = Class              #63            // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n-  #62 = NameAndType        #64:#37        // METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #63 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n-  #64 = Utf8               METHOD\n-  #65 = String             #66            //  used in archive.\n-  #66 = Utf8                used in archive.\n-  #67 = Utf8               serialVersionUID\n-  #68 = Utf8               J\n-  #69 = Utf8               ConstantValue\n-  #70 = Long               20161219l\n-  #72 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #73 = Utf8               Code\n-  #74 = Utf8               LineNumberTable\n-  #75 = Utf8               LocalVariableTable\n-  #76 = Utf8               this\n-  #77 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException;\n-  #78 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #79 = Utf8               method\n-  #80 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #81 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n-  #82 = Utf8               getFeature\n-  #83 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #84 = Utf8               getEntry\n-  #85 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #86 = Utf8               SourceFile\n-  #87 = Utf8               UnsupportedZipFeatureException.java\n-  #88 = Utf8               InnerClasses\n-  #89 = Utf8               Feature\n+   #1 = Class              #2             // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+   #2 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+   #3 = Class              #4             // java/util/zip/ZipException\n+   #4 = Utf8               java/util/zip/ZipException\n+   #5 = Utf8               reason\n+   #6 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+   #7 = Utf8               entry\n+   #8 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #9 = Utf8               serialVersionUID\n+  #10 = Utf8               J\n+  #11 = Utf8               ConstantValue\n+  #12 = Long               20161219l\n+  #14 = Utf8               <init>\n+  #15 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #16 = Utf8               Code\n+  #17 = Class              #18            // java/lang/StringBuilder\n+  #18 = Utf8               java/lang/StringBuilder\n+  #19 = String             #20            // Unsupported feature\n+  #20 = Utf8               Unsupported feature\n+  #21 = Methodref          #17.#22        // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+  #22 = NameAndType        #14:#23        // \"<init>\":(Ljava/lang/String;)V\n+  #23 = Utf8               (Ljava/lang/String;)V\n+  #24 = Methodref          #17.#25        // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #25 = NameAndType        #26:#27        // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #26 = Utf8               append\n+  #27 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #28 = String             #29            //  used in entry\n+  #29 = Utf8                used in entry\n+  #30 = Methodref          #17.#31        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #31 = NameAndType        #26:#32        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #32 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #33 = Methodref          #34.#36        // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+  #34 = Class              #35            // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #35 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #36 = NameAndType        #37:#38        // getName:()Ljava/lang/String;\n+  #37 = Utf8               getName\n+  #38 = Utf8               ()Ljava/lang/String;\n+  #39 = Methodref          #17.#40        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #40 = NameAndType        #41:#38        // toString:()Ljava/lang/String;\n+  #41 = Utf8               toString\n+  #42 = Methodref          #3.#22         // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+  #43 = Fieldref           #1.#44         // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.reason:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #44 = NameAndType        #5:#6          // reason:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #45 = Fieldref           #1.#46         // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #46 = NameAndType        #7:#8          // entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #47 = Utf8               LineNumberTable\n+  #48 = Utf8               LocalVariableTable\n+  #49 = Utf8               this\n+  #50 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException;\n+  #51 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #52 = String             #53            // Unsupported compression method\n+  #53 = Utf8               Unsupported compression method\n+  #54 = Methodref          #34.#55        // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+  #55 = NameAndType        #56:#57        // getMethod:()I\n+  #56 = Utf8               getMethod\n+  #57 = Utf8               ()I\n+  #58 = Methodref          #17.#59        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #59 = NameAndType        #26:#60        // append:(I)Ljava/lang/StringBuilder;\n+  #60 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #61 = String             #62            //  (\n+  #62 = Utf8                (\n+  #63 = Methodref          #64.#66        // org/apache/commons/compress/archivers/zip/ZipMethod.name:()Ljava/lang/String;\n+  #64 = Class              #65            // org/apache/commons/compress/archivers/zip/ZipMethod\n+  #65 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n+  #66 = NameAndType        #67:#38        // name:()Ljava/lang/String;\n+  #67 = Utf8               name\n+  #68 = String             #69            // ) used in entry\n+  #69 = Utf8               ) used in entry\n+  #70 = Fieldref           #71.#73        // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #71 = Class              #72            // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n+  #72 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n+  #73 = NameAndType        #74:#6         // METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #74 = Utf8               METHOD\n+  #75 = Utf8               method\n+  #76 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #77 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n+  #78 = String             #79            //  used in archive.\n+  #79 = Utf8                used in archive.\n+  #80 = Utf8               getFeature\n+  #81 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #82 = Utf8               getEntry\n+  #83 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #84 = Utf8               SourceFile\n+  #85 = Utf8               UnsupportedZipFeatureException.java\n+  #86 = Utf8               InnerClasses\n+  #87 = Utf8               Feature\n {\n   private final org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature reason;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final transient org.apache.commons.compress.archivers.zip.ZipArchiveEntry entry;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n@@ -110,154 +108,151 @@\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 20161219l\n \n   public org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature, org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n-      stack=3, locals=3, args_size=3\n+      stack=4, locals=3, args_size=3\n          0: aload_0\n-         1: new           #1                  // class java/lang/StringBuilder\n+         1: new           #17                 // class java/lang/StringBuilder\n          4: dup\n-         5: invokespecial #3                  // Method java/lang/StringBuilder.\"<init>\":()V\n-         8: ldc           #7                  // String Unsupported feature\n-        10: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        13: aload_1\n-        14: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-        17: ldc           #16                 // String  used in entry\n-        19: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        22: aload_2\n-        23: invokevirtual #18                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-        26: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        29: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        32: invokespecial #27                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-        35: aload_0\n-        36: aload_1\n-        37: putfield      #32                 // Field reason:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-        40: aload_0\n-        41: aload_2\n-        42: putfield      #38                 // Field entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        45: return\n+         5: ldc           #19                 // String Unsupported feature\n+         7: invokespecial #21                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+        10: aload_1\n+        11: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+        14: ldc           #28                 // String  used in entry\n+        16: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        19: aload_2\n+        20: invokevirtual #33                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+        23: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        26: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        29: invokespecial #42                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        32: aload_0\n+        33: aload_1\n+        34: putfield      #43                 // Field reason:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+        37: aload_0\n+        38: aload_2\n+        39: putfield      #45                 // Field entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        42: return\n       LineNumberTable:\n         line 42: 0\n-        line 43: 23\n-        line 42: 32\n-        line 44: 35\n-        line 45: 40\n-        line 46: 45\n+        line 43: 19\n+        line 42: 26\n+        line 44: 32\n+        line 45: 37\n+        line 46: 42\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      46     0  this   Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException;\n-            0      46     1 reason   Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-            0      46     2 entry   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+            0      43     0  this   Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException;\n+            0      43     1 reason   Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+            0      43     2 entry   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n \n   public org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(org.apache.commons.compress.archivers.zip.ZipMethod, org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n-      stack=3, locals=3, args_size=3\n+      stack=4, locals=3, args_size=3\n          0: aload_0\n-         1: new           #1                  // class java/lang/StringBuilder\n+         1: new           #17                 // class java/lang/StringBuilder\n          4: dup\n-         5: invokespecial #3                  // Method java/lang/StringBuilder.\"<init>\":()V\n-         8: ldc           #42                 // String Unsupported compression method\n-        10: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        13: aload_2\n-        14: invokevirtual #44                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        17: invokevirtual #48                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        20: ldc           #51                 // String  (\n-        22: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        25: aload_1\n-        26: invokevirtual #53                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.name:()Ljava/lang/String;\n-        29: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        32: ldc           #58                 // String ) used in entry\n-        34: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        37: aload_2\n-        38: invokevirtual #18                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-        41: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        44: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        47: invokespecial #27                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-        50: aload_0\n-        51: getstatic     #60                 // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-        54: putfield      #32                 // Field reason:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-        57: aload_0\n-        58: aload_2\n-        59: putfield      #38                 // Field entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        62: return\n+         5: ldc           #52                 // String Unsupported compression method\n+         7: invokespecial #21                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+        10: aload_2\n+        11: invokevirtual #54                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        14: invokevirtual #58                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        17: ldc           #61                 // String  (\n+        19: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        22: aload_1\n+        23: invokevirtual #63                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.name:()Ljava/lang/String;\n+        26: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        29: ldc           #68                 // String ) used in entry\n+        31: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        34: aload_2\n+        35: invokevirtual #33                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+        38: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        41: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        44: invokespecial #42                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        47: aload_0\n+        48: getstatic     #70                 // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+        51: putfield      #43                 // Field reason:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+        54: aload_0\n+        55: aload_2\n+        56: putfield      #45                 // Field entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        59: return\n       LineNumberTable:\n         line 57: 0\n-        line 58: 26\n-        line 57: 47\n-        line 59: 50\n-        line 60: 57\n-        line 61: 62\n+        line 58: 17\n+        line 57: 41\n+        line 59: 47\n+        line 60: 54\n+        line 61: 59\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      63     0  this   Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException;\n-            0      63     1 method   Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-            0      63     2 entry   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+            0      60     0  this   Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException;\n+            0      60     1 method   Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+            0      60     2 entry   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n \n   public org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n-      stack=3, locals=2, args_size=2\n+      stack=4, locals=2, args_size=2\n          0: aload_0\n-         1: new           #1                  // class java/lang/StringBuilder\n+         1: new           #17                 // class java/lang/StringBuilder\n          4: dup\n-         5: invokespecial #3                  // Method java/lang/StringBuilder.\"<init>\":()V\n-         8: ldc           #7                  // String Unsupported feature\n-        10: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        13: aload_1\n-        14: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-        17: ldc           #65                 // String  used in archive.\n-        19: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        22: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        25: invokespecial #27                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-        28: aload_0\n-        29: aload_1\n-        30: putfield      #32                 // Field reason:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-        33: aload_0\n-        34: aconst_null\n-        35: putfield      #38                 // Field entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        38: return\n+         5: ldc           #19                 // String Unsupported feature\n+         7: invokespecial #21                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+        10: aload_1\n+        11: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+        14: ldc           #78                 // String  used in archive.\n+        16: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        19: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        22: invokespecial #42                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        25: aload_0\n+        26: aload_1\n+        27: putfield      #43                 // Field reason:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+        30: aload_0\n+        31: aconst_null\n+        32: putfield      #45                 // Field entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        35: return\n       LineNumberTable:\n         line 71: 0\n-        line 72: 28\n-        line 73: 33\n-        line 74: 38\n+        line 72: 25\n+        line 73: 30\n+        line 74: 35\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      39     0  this   Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException;\n-            0      39     1 reason   Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+            0      36     0  this   Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException;\n+            0      36     1 reason   Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n \n   public org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature getFeature();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #32                 // Field reason:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+         1: getfield      #43                 // Field reason:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n          4: areturn\n       LineNumberTable:\n         line 81: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException;\n \n   public org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #38                 // Field entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+         1: getfield      #45                 // Field entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n          4: areturn\n       LineNumberTable:\n         line 89: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException;\n }\n SourceFile: \"UnsupportedZipFeatureException.java\"\n InnerClasses:\n-  public static #89= #61 of #33;          // Feature=class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature of class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  public static #87= #71 of #1;           // Feature=class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature of class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n"}]}
