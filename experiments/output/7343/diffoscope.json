{"diffoscope-json-version": 1, "source1": "first/JSONWriter.class", "source2": "second/JSONWriter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,89 +1,89 @@\n-  SHA-256 checksum 221bda0818aace58ed72337b2e4a6b0899554811a4813cb4088e4ac564fb8e38\n+  SHA-256 checksum 75348a60058a61f32383079cbadb416d08876f7ebb2980f2c61b13ace72dea6d\n   Compiled from \"JSONWriter.java\"\n public class org.json.JSONWriter\n   minor version: 0\n   major version: 50\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #4                          // org/json/JSONWriter\n   super_class: #72                        // java/lang/Object\n   interfaces: 0, fields: 6, methods: 15, attributes: 1\n Constant pool:\n-    #1 = Methodref          #72.#148      // java/lang/Object.\"<init>\":()V\n-    #2 = Fieldref           #4.#149       // org/json/JSONWriter.comma:Z\n-    #3 = Fieldref           #4.#150       // org/json/JSONWriter.mode:C\n-    #4 = Class              #151          // org/json/JSONWriter\n-    #5 = Class              #152          // org/json/JSONObject\n-    #6 = Fieldref           #4.#153       // org/json/JSONWriter.stack:[Lorg/json/JSONObject;\n-    #7 = Fieldref           #4.#154       // org/json/JSONWriter.top:I\n-    #8 = Fieldref           #4.#155       // org/json/JSONWriter.writer:Ljava/lang/Appendable;\n-    #9 = Class              #156          // org/json/JSONException\n-   #10 = String             #157          // Null pointer\n-   #11 = Methodref          #9.#158       // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n-   #12 = InterfaceMethodref #159.#160     // java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n-   #13 = InterfaceMethodref #159.#161     // java/lang/Appendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n-   #14 = Class              #162          // java/io/IOException\n-   #15 = Methodref          #9.#163       // org/json/JSONException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #16 = String             #164          // Value out of sequence.\n-   #17 = Methodref          #4.#165       // org/json/JSONWriter.push:(Lorg/json/JSONObject;)V\n-   #18 = String             #166          // [\n-   #19 = Methodref          #4.#167       // org/json/JSONWriter.append:(Ljava/lang/String;)Lorg/json/JSONWriter;\n-   #20 = String             #168          // Misplaced array.\n-   #21 = String             #169          // Misplaced endArray.\n-   #22 = String             #170          // Misplaced endObject.\n-   #23 = Methodref          #4.#171       // org/json/JSONWriter.pop:(C)V\n-   #24 = Methodref          #4.#172       // org/json/JSONWriter.end:(CC)Lorg/json/JSONWriter;\n-   #25 = String             #173          // Null key.\n-   #26 = Methodref          #5.#174       // org/json/JSONObject.has:(Ljava/lang/String;)Z\n-   #27 = Class              #175          // java/lang/StringBuilder\n-   #28 = Methodref          #27.#148      // java/lang/StringBuilder.\"<init>\":()V\n-   #29 = String             #176          // Duplicate key \\\"\n-   #30 = Methodref          #27.#177      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #31 = String             #178          // \\\"\n-   #32 = Methodref          #27.#179      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #33 = Methodref          #5.#180       // org/json/JSONObject.put:(Ljava/lang/String;Z)Lorg/json/JSONObject;\n-   #34 = Methodref          #5.#181       // org/json/JSONObject.quote:(Ljava/lang/String;)Ljava/lang/String;\n-   #35 = String             #182          // Misplaced key.\n-   #36 = String             #183          // {\n-   #37 = Methodref          #5.#148       // org/json/JSONObject.\"<init>\":()V\n-   #38 = String             #184          // Misplaced object.\n-   #39 = String             #185          // Nesting error.\n-   #40 = String             #186          // Nesting too deep.\n-   #41 = Methodref          #72.#187      // java/lang/Object.equals:(Ljava/lang/Object;)Z\n-   #42 = String             #188          // null\n-   #43 = Class              #189          // org/json/JSONString\n-   #44 = InterfaceMethodref #43.#190      // org/json/JSONString.toJSONString:()Ljava/lang/String;\n-   #45 = Class              #191          // java/lang/Exception\n-   #46 = String             #192          // Bad value from toJSONString:\n-   #47 = Class              #193          // java/lang/Number\n-   #48 = Methodref          #5.#194       // org/json/JSONObject.numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n-   #49 = Fieldref           #5.#195       // org/json/JSONObject.NUMBER_PATTERN:Ljava/util/regex/Pattern;\n-   #50 = Methodref          #196.#197     // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-   #51 = Methodref          #198.#199     // java/util/regex/Matcher.matches:()Z\n-   #52 = Class              #200          // java/lang/Boolean\n-   #53 = Class              #201          // org/json/JSONArray\n-   #54 = Methodref          #72.#179      // java/lang/Object.toString:()Ljava/lang/String;\n-   #55 = Class              #202          // java/util/Map\n-   #56 = Methodref          #5.#203       // org/json/JSONObject.\"<init>\":(Ljava/util/Map;)V\n-   #57 = Methodref          #5.#179       // org/json/JSONObject.toString:()Ljava/lang/String;\n-   #58 = Class              #204          // java/util/Collection\n-   #59 = Methodref          #53.#205      // org/json/JSONArray.\"<init>\":(Ljava/util/Collection;)V\n-   #60 = Methodref          #53.#179      // org/json/JSONArray.toString:()Ljava/lang/String;\n-   #61 = Methodref          #72.#206      // java/lang/Object.getClass:()Ljava/lang/Class;\n-   #62 = Methodref          #207.#208     // java/lang/Class.isArray:()Z\n-   #63 = Methodref          #53.#209      // org/json/JSONArray.\"<init>\":(Ljava/lang/Object;)V\n-   #64 = Class              #210          // java/lang/Enum\n-   #65 = Methodref          #64.#211      // java/lang/Enum.name:()Ljava/lang/String;\n-   #66 = String             #212          // true\n-   #67 = String             #213          // false\n-   #68 = Methodref          #214.#215     // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n-   #69 = Methodref          #4.#216       // org/json/JSONWriter.value:(Ljava/lang/Object;)Lorg/json/JSONWriter;\n-   #70 = Methodref          #217.#218     // java/lang/Long.toString:(J)Ljava/lang/String;\n-   #71 = Methodref          #4.#219       // org/json/JSONWriter.valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n-   #72 = Class              #220          // java/lang/Object\n+    #1 = Methodref          #72.#144      // java/lang/Object.\"<init>\":()V\n+    #2 = Fieldref           #4.#145       // org/json/JSONWriter.comma:Z\n+    #3 = Fieldref           #4.#146       // org/json/JSONWriter.mode:C\n+    #4 = Class              #147          // org/json/JSONWriter\n+    #5 = Class              #148          // org/json/JSONObject\n+    #6 = Fieldref           #4.#149       // org/json/JSONWriter.stack:[Lorg/json/JSONObject;\n+    #7 = Fieldref           #4.#150       // org/json/JSONWriter.top:I\n+    #8 = Fieldref           #4.#151       // org/json/JSONWriter.writer:Ljava/lang/Appendable;\n+    #9 = Class              #152          // org/json/JSONException\n+   #10 = String             #153          // Null pointer\n+   #11 = Methodref          #9.#154       // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n+   #12 = InterfaceMethodref #155.#156     // java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n+   #13 = InterfaceMethodref #155.#157     // java/lang/Appendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n+   #14 = Class              #158          // java/io/IOException\n+   #15 = Methodref          #9.#159       // org/json/JSONException.\"<init>\":(Ljava/lang/Throwable;)V\n+   #16 = String             #160          // Value out of sequence.\n+   #17 = Methodref          #4.#161       // org/json/JSONWriter.push:(Lorg/json/JSONObject;)V\n+   #18 = String             #162          // [\n+   #19 = Methodref          #4.#163       // org/json/JSONWriter.append:(Ljava/lang/String;)Lorg/json/JSONWriter;\n+   #20 = String             #164          // Misplaced array.\n+   #21 = String             #165          // Misplaced endArray.\n+   #22 = String             #166          // Misplaced endObject.\n+   #23 = Methodref          #4.#167       // org/json/JSONWriter.pop:(C)V\n+   #24 = Methodref          #4.#168       // org/json/JSONWriter.end:(CC)Lorg/json/JSONWriter;\n+   #25 = String             #169          // Null key.\n+   #26 = Methodref          #5.#170       // org/json/JSONObject.has:(Ljava/lang/String;)Z\n+   #27 = Class              #171          // java/lang/StringBuilder\n+   #28 = Methodref          #27.#144      // java/lang/StringBuilder.\"<init>\":()V\n+   #29 = String             #172          // Duplicate key \\\"\n+   #30 = Methodref          #27.#173      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #31 = String             #174          // \\\"\n+   #32 = Methodref          #27.#175      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #33 = Methodref          #5.#176       // org/json/JSONObject.put:(Ljava/lang/String;Z)Lorg/json/JSONObject;\n+   #34 = Methodref          #5.#177       // org/json/JSONObject.quote:(Ljava/lang/String;)Ljava/lang/String;\n+   #35 = String             #178          // Misplaced key.\n+   #36 = String             #179          // {\n+   #37 = Methodref          #5.#144       // org/json/JSONObject.\"<init>\":()V\n+   #38 = String             #180          // Misplaced object.\n+   #39 = String             #181          // Nesting error.\n+   #40 = String             #182          // Nesting too deep.\n+   #41 = Methodref          #72.#183      // java/lang/Object.equals:(Ljava/lang/Object;)Z\n+   #42 = String             #184          // null\n+   #43 = Class              #185          // org/json/JSONString\n+   #44 = InterfaceMethodref #43.#186      // org/json/JSONString.toJSONString:()Ljava/lang/String;\n+   #45 = Class              #187          // java/lang/Exception\n+   #46 = String             #188          // Bad value from toJSONString:\n+   #47 = Class              #189          // java/lang/Number\n+   #48 = Methodref          #5.#190       // org/json/JSONObject.numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n+   #49 = Fieldref           #5.#191       // org/json/JSONObject.NUMBER_PATTERN:Ljava/util/regex/Pattern;\n+   #50 = Methodref          #192.#193     // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+   #51 = Methodref          #194.#195     // java/util/regex/Matcher.matches:()Z\n+   #52 = Class              #196          // java/lang/Boolean\n+   #53 = Class              #197          // org/json/JSONArray\n+   #54 = Methodref          #72.#175      // java/lang/Object.toString:()Ljava/lang/String;\n+   #55 = Class              #198          // java/util/Map\n+   #56 = Methodref          #5.#199       // org/json/JSONObject.\"<init>\":(Ljava/util/Map;)V\n+   #57 = Methodref          #5.#175       // org/json/JSONObject.toString:()Ljava/lang/String;\n+   #58 = Class              #200          // java/util/Collection\n+   #59 = Methodref          #53.#201      // org/json/JSONArray.\"<init>\":(Ljava/util/Collection;)V\n+   #60 = Methodref          #53.#175      // org/json/JSONArray.toString:()Ljava/lang/String;\n+   #61 = Methodref          #72.#202      // java/lang/Object.getClass:()Ljava/lang/Class;\n+   #62 = Methodref          #203.#204     // java/lang/Class.isArray:()Z\n+   #63 = Methodref          #53.#205      // org/json/JSONArray.\"<init>\":(Ljava/lang/Object;)V\n+   #64 = Class              #206          // java/lang/Enum\n+   #65 = Methodref          #64.#207      // java/lang/Enum.name:()Ljava/lang/String;\n+   #66 = String             #208          // true\n+   #67 = String             #209          // false\n+   #68 = Methodref          #210.#211     // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n+   #69 = Methodref          #4.#212       // org/json/JSONWriter.value:(Ljava/lang/Object;)Lorg/json/JSONWriter;\n+   #70 = Methodref          #213.#214     // java/lang/Long.toString:(J)Ljava/lang/String;\n+   #71 = Methodref          #4.#215       // org/json/JSONWriter.valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n+   #72 = Class              #216          // java/lang/Object\n    #73 = Utf8               maxdepth\n    #74 = Utf8               I\n    #75 = Utf8               ConstantValue\n    #76 = Integer            200\n    #77 = Utf8               comma\n    #78 = Utf8               Z\n    #79 = Utf8               mode\n@@ -104,176 +104,172 @@\n    #94 = Utf8               append\n    #95 = Utf8               (Ljava/lang/String;)Lorg/json/JSONWriter;\n    #96 = Utf8               e\n    #97 = Utf8               Ljava/io/IOException;\n    #98 = Utf8               string\n    #99 = Utf8               Ljava/lang/String;\n   #100 = Utf8               StackMapTable\n-  #101 = Class              #162          // java/io/IOException\n-  #102 = Utf8               Exceptions\n-  #103 = Utf8               array\n-  #104 = Utf8               ()Lorg/json/JSONWriter;\n-  #105 = Utf8               end\n-  #106 = Utf8               (CC)Lorg/json/JSONWriter;\n-  #107 = Utf8               m\n-  #108 = Utf8               c\n-  #109 = Class              #151          // org/json/JSONWriter\n-  #110 = Class              #221          // java/lang/String\n-  #111 = Utf8               endArray\n-  #112 = Utf8               endObject\n-  #113 = Utf8               key\n-  #114 = Utf8               topObject\n-  #115 = Utf8               Lorg/json/JSONObject;\n-  #116 = Class              #152          // org/json/JSONObject\n-  #117 = Utf8               object\n-  #118 = Utf8               pop\n-  #119 = Utf8               (C)V\n-  #120 = Utf8               push\n-  #121 = Utf8               (Lorg/json/JSONObject;)V\n-  #122 = Utf8               jo\n-  #123 = Utf8               valueToString\n-  #124 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n-  #125 = Utf8               Ljava/lang/Exception;\n-  #126 = Utf8               numberAsString\n-  #127 = Utf8               map\n-  #128 = Utf8               Ljava/util/Map;\n-  #129 = Utf8               coll\n-  #130 = Utf8               Ljava/util/Collection;\n-  #131 = Utf8               value\n-  #132 = Utf8               Ljava/lang/Object;\n-  #133 = Utf8               LocalVariableTypeTable\n-  #134 = Utf8               Ljava/util/Map<**>;\n-  #135 = Utf8               Ljava/util/Collection<*>;\n-  #136 = Class              #191          // java/lang/Exception\n-  #137 = Utf8               (Z)Lorg/json/JSONWriter;\n-  #138 = Utf8               b\n-  #139 = Utf8               (D)Lorg/json/JSONWriter;\n-  #140 = Utf8               d\n-  #141 = Utf8               D\n-  #142 = Utf8               (J)Lorg/json/JSONWriter;\n-  #143 = Utf8               l\n-  #144 = Utf8               J\n-  #145 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONWriter;\n-  #146 = Utf8               SourceFile\n-  #147 = Utf8               JSONWriter.java\n-  #148 = NameAndType        #86:#222      // \"<init>\":()V\n-  #149 = NameAndType        #77:#78       // comma:Z\n-  #150 = NameAndType        #79:#80       // mode:C\n-  #151 = Utf8               org/json/JSONWriter\n-  #152 = Utf8               org/json/JSONObject\n-  #153 = NameAndType        #81:#82       // stack:[Lorg/json/JSONObject;\n-  #154 = NameAndType        #83:#74       // top:I\n-  #155 = NameAndType        #84:#85       // writer:Ljava/lang/Appendable;\n-  #156 = Utf8               org/json/JSONException\n-  #157 = Utf8               Null pointer\n-  #158 = NameAndType        #86:#223      // \"<init>\":(Ljava/lang/String;)V\n-  #159 = Class              #224          // java/lang/Appendable\n-  #160 = NameAndType        #94:#225      // append:(C)Ljava/lang/Appendable;\n-  #161 = NameAndType        #94:#226      // append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n-  #162 = Utf8               java/io/IOException\n-  #163 = NameAndType        #86:#227      // \"<init>\":(Ljava/lang/Throwable;)V\n-  #164 = Utf8               Value out of sequence.\n-  #165 = NameAndType        #120:#121     // push:(Lorg/json/JSONObject;)V\n-  #166 = Utf8               [\n-  #167 = NameAndType        #94:#95       // append:(Ljava/lang/String;)Lorg/json/JSONWriter;\n-  #168 = Utf8               Misplaced array.\n-  #169 = Utf8               Misplaced endArray.\n-  #170 = Utf8               Misplaced endObject.\n-  #171 = NameAndType        #118:#119     // pop:(C)V\n-  #172 = NameAndType        #105:#106     // end:(CC)Lorg/json/JSONWriter;\n-  #173 = Utf8               Null key.\n-  #174 = NameAndType        #228:#229     // has:(Ljava/lang/String;)Z\n-  #175 = Utf8               java/lang/StringBuilder\n-  #176 = Utf8               Duplicate key \\\"\n-  #177 = NameAndType        #94:#230      // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #178 = Utf8               \\\"\n-  #179 = NameAndType        #231:#232     // toString:()Ljava/lang/String;\n-  #180 = NameAndType        #233:#234     // put:(Ljava/lang/String;Z)Lorg/json/JSONObject;\n-  #181 = NameAndType        #235:#236     // quote:(Ljava/lang/String;)Ljava/lang/String;\n-  #182 = Utf8               Misplaced key.\n-  #183 = Utf8               {\n-  #184 = Utf8               Misplaced object.\n-  #185 = Utf8               Nesting error.\n-  #186 = Utf8               Nesting too deep.\n-  #187 = NameAndType        #237:#238     // equals:(Ljava/lang/Object;)Z\n-  #188 = Utf8               null\n-  #189 = Utf8               org/json/JSONString\n-  #190 = NameAndType        #239:#232     // toJSONString:()Ljava/lang/String;\n-  #191 = Utf8               java/lang/Exception\n-  #192 = Utf8               Bad value from toJSONString:\n-  #193 = Utf8               java/lang/Number\n-  #194 = NameAndType        #240:#241     // numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n-  #195 = NameAndType        #242:#243     // NUMBER_PATTERN:Ljava/util/regex/Pattern;\n-  #196 = Class              #244          // java/util/regex/Pattern\n-  #197 = NameAndType        #245:#246     // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-  #198 = Class              #247          // java/util/regex/Matcher\n-  #199 = NameAndType        #248:#249     // matches:()Z\n-  #200 = Utf8               java/lang/Boolean\n-  #201 = Utf8               org/json/JSONArray\n-  #202 = Utf8               java/util/Map\n-  #203 = NameAndType        #86:#250      // \"<init>\":(Ljava/util/Map;)V\n-  #204 = Utf8               java/util/Collection\n-  #205 = NameAndType        #86:#251      // \"<init>\":(Ljava/util/Collection;)V\n-  #206 = NameAndType        #252:#253     // getClass:()Ljava/lang/Class;\n-  #207 = Class              #254          // java/lang/Class\n-  #208 = NameAndType        #255:#249     // isArray:()Z\n-  #209 = NameAndType        #86:#256      // \"<init>\":(Ljava/lang/Object;)V\n-  #210 = Utf8               java/lang/Enum\n-  #211 = NameAndType        #257:#232     // name:()Ljava/lang/String;\n-  #212 = Utf8               true\n-  #213 = Utf8               false\n-  #214 = Class              #258          // java/lang/Double\n-  #215 = NameAndType        #259:#260     // valueOf:(D)Ljava/lang/Double;\n-  #216 = NameAndType        #131:#145     // value:(Ljava/lang/Object;)Lorg/json/JSONWriter;\n-  #217 = Class              #261          // java/lang/Long\n-  #218 = NameAndType        #231:#262     // toString:(J)Ljava/lang/String;\n-  #219 = NameAndType        #123:#124     // valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n-  #220 = Utf8               java/lang/Object\n-  #221 = Utf8               java/lang/String\n-  #222 = Utf8               ()V\n-  #223 = Utf8               (Ljava/lang/String;)V\n-  #224 = Utf8               java/lang/Appendable\n-  #225 = Utf8               (C)Ljava/lang/Appendable;\n-  #226 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n-  #227 = Utf8               (Ljava/lang/Throwable;)V\n-  #228 = Utf8               has\n-  #229 = Utf8               (Ljava/lang/String;)Z\n-  #230 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #231 = Utf8               toString\n-  #232 = Utf8               ()Ljava/lang/String;\n-  #233 = Utf8               put\n-  #234 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n-  #235 = Utf8               quote\n-  #236 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #237 = Utf8               equals\n-  #238 = Utf8               (Ljava/lang/Object;)Z\n-  #239 = Utf8               toJSONString\n-  #240 = Utf8               numberToString\n-  #241 = Utf8               (Ljava/lang/Number;)Ljava/lang/String;\n-  #242 = Utf8               NUMBER_PATTERN\n-  #243 = Utf8               Ljava/util/regex/Pattern;\n-  #244 = Utf8               java/util/regex/Pattern\n-  #245 = Utf8               matcher\n-  #246 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-  #247 = Utf8               java/util/regex/Matcher\n-  #248 = Utf8               matches\n-  #249 = Utf8               ()Z\n-  #250 = Utf8               (Ljava/util/Map;)V\n-  #251 = Utf8               (Ljava/util/Collection;)V\n-  #252 = Utf8               getClass\n-  #253 = Utf8               ()Ljava/lang/Class;\n-  #254 = Utf8               java/lang/Class\n-  #255 = Utf8               isArray\n-  #256 = Utf8               (Ljava/lang/Object;)V\n-  #257 = Utf8               name\n-  #258 = Utf8               java/lang/Double\n-  #259 = Utf8               valueOf\n-  #260 = Utf8               (D)Ljava/lang/Double;\n-  #261 = Utf8               java/lang/Long\n-  #262 = Utf8               (J)Ljava/lang/String;\n+  #101 = Utf8               Exceptions\n+  #102 = Utf8               array\n+  #103 = Utf8               ()Lorg/json/JSONWriter;\n+  #104 = Utf8               end\n+  #105 = Utf8               (CC)Lorg/json/JSONWriter;\n+  #106 = Utf8               m\n+  #107 = Utf8               c\n+  #108 = Class              #217          // java/lang/String\n+  #109 = Utf8               endArray\n+  #110 = Utf8               endObject\n+  #111 = Utf8               key\n+  #112 = Utf8               topObject\n+  #113 = Utf8               Lorg/json/JSONObject;\n+  #114 = Utf8               object\n+  #115 = Utf8               pop\n+  #116 = Utf8               (C)V\n+  #117 = Utf8               push\n+  #118 = Utf8               (Lorg/json/JSONObject;)V\n+  #119 = Utf8               jo\n+  #120 = Utf8               valueToString\n+  #121 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n+  #122 = Utf8               Ljava/lang/Exception;\n+  #123 = Utf8               numberAsString\n+  #124 = Utf8               map\n+  #125 = Utf8               Ljava/util/Map;\n+  #126 = Utf8               coll\n+  #127 = Utf8               Ljava/util/Collection;\n+  #128 = Utf8               value\n+  #129 = Utf8               Ljava/lang/Object;\n+  #130 = Utf8               LocalVariableTypeTable\n+  #131 = Utf8               Ljava/util/Map<**>;\n+  #132 = Utf8               Ljava/util/Collection<*>;\n+  #133 = Utf8               (Z)Lorg/json/JSONWriter;\n+  #134 = Utf8               b\n+  #135 = Utf8               (D)Lorg/json/JSONWriter;\n+  #136 = Utf8               d\n+  #137 = Utf8               D\n+  #138 = Utf8               (J)Lorg/json/JSONWriter;\n+  #139 = Utf8               l\n+  #140 = Utf8               J\n+  #141 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONWriter;\n+  #142 = Utf8               SourceFile\n+  #143 = Utf8               JSONWriter.java\n+  #144 = NameAndType        #86:#218      // \"<init>\":()V\n+  #145 = NameAndType        #77:#78       // comma:Z\n+  #146 = NameAndType        #79:#80       // mode:C\n+  #147 = Utf8               org/json/JSONWriter\n+  #148 = Utf8               org/json/JSONObject\n+  #149 = NameAndType        #81:#82       // stack:[Lorg/json/JSONObject;\n+  #150 = NameAndType        #83:#74       // top:I\n+  #151 = NameAndType        #84:#85       // writer:Ljava/lang/Appendable;\n+  #152 = Utf8               org/json/JSONException\n+  #153 = Utf8               Null pointer\n+  #154 = NameAndType        #86:#219      // \"<init>\":(Ljava/lang/String;)V\n+  #155 = Class              #220          // java/lang/Appendable\n+  #156 = NameAndType        #94:#221      // append:(C)Ljava/lang/Appendable;\n+  #157 = NameAndType        #94:#222      // append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n+  #158 = Utf8               java/io/IOException\n+  #159 = NameAndType        #86:#223      // \"<init>\":(Ljava/lang/Throwable;)V\n+  #160 = Utf8               Value out of sequence.\n+  #161 = NameAndType        #117:#118     // push:(Lorg/json/JSONObject;)V\n+  #162 = Utf8               [\n+  #163 = NameAndType        #94:#95       // append:(Ljava/lang/String;)Lorg/json/JSONWriter;\n+  #164 = Utf8               Misplaced array.\n+  #165 = Utf8               Misplaced endArray.\n+  #166 = Utf8               Misplaced endObject.\n+  #167 = NameAndType        #115:#116     // pop:(C)V\n+  #168 = NameAndType        #104:#105     // end:(CC)Lorg/json/JSONWriter;\n+  #169 = Utf8               Null key.\n+  #170 = NameAndType        #224:#225     // has:(Ljava/lang/String;)Z\n+  #171 = Utf8               java/lang/StringBuilder\n+  #172 = Utf8               Duplicate key \\\"\n+  #173 = NameAndType        #94:#226      // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #174 = Utf8               \\\"\n+  #175 = NameAndType        #227:#228     // toString:()Ljava/lang/String;\n+  #176 = NameAndType        #229:#230     // put:(Ljava/lang/String;Z)Lorg/json/JSONObject;\n+  #177 = NameAndType        #231:#232     // quote:(Ljava/lang/String;)Ljava/lang/String;\n+  #178 = Utf8               Misplaced key.\n+  #179 = Utf8               {\n+  #180 = Utf8               Misplaced object.\n+  #181 = Utf8               Nesting error.\n+  #182 = Utf8               Nesting too deep.\n+  #183 = NameAndType        #233:#234     // equals:(Ljava/lang/Object;)Z\n+  #184 = Utf8               null\n+  #185 = Utf8               org/json/JSONString\n+  #186 = NameAndType        #235:#228     // toJSONString:()Ljava/lang/String;\n+  #187 = Utf8               java/lang/Exception\n+  #188 = Utf8               Bad value from toJSONString:\n+  #189 = Utf8               java/lang/Number\n+  #190 = NameAndType        #236:#237     // numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n+  #191 = NameAndType        #238:#239     // NUMBER_PATTERN:Ljava/util/regex/Pattern;\n+  #192 = Class              #240          // java/util/regex/Pattern\n+  #193 = NameAndType        #241:#242     // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #194 = Class              #243          // java/util/regex/Matcher\n+  #195 = NameAndType        #244:#245     // matches:()Z\n+  #196 = Utf8               java/lang/Boolean\n+  #197 = Utf8               org/json/JSONArray\n+  #198 = Utf8               java/util/Map\n+  #199 = NameAndType        #86:#246      // \"<init>\":(Ljava/util/Map;)V\n+  #200 = Utf8               java/util/Collection\n+  #201 = NameAndType        #86:#247      // \"<init>\":(Ljava/util/Collection;)V\n+  #202 = NameAndType        #248:#249     // getClass:()Ljava/lang/Class;\n+  #203 = Class              #250          // java/lang/Class\n+  #204 = NameAndType        #251:#245     // isArray:()Z\n+  #205 = NameAndType        #86:#252      // \"<init>\":(Ljava/lang/Object;)V\n+  #206 = Utf8               java/lang/Enum\n+  #207 = NameAndType        #253:#228     // name:()Ljava/lang/String;\n+  #208 = Utf8               true\n+  #209 = Utf8               false\n+  #210 = Class              #254          // java/lang/Double\n+  #211 = NameAndType        #255:#256     // valueOf:(D)Ljava/lang/Double;\n+  #212 = NameAndType        #128:#141     // value:(Ljava/lang/Object;)Lorg/json/JSONWriter;\n+  #213 = Class              #257          // java/lang/Long\n+  #214 = NameAndType        #227:#258     // toString:(J)Ljava/lang/String;\n+  #215 = NameAndType        #120:#121     // valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n+  #216 = Utf8               java/lang/Object\n+  #217 = Utf8               java/lang/String\n+  #218 = Utf8               ()V\n+  #219 = Utf8               (Ljava/lang/String;)V\n+  #220 = Utf8               java/lang/Appendable\n+  #221 = Utf8               (C)Ljava/lang/Appendable;\n+  #222 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n+  #223 = Utf8               (Ljava/lang/Throwable;)V\n+  #224 = Utf8               has\n+  #225 = Utf8               (Ljava/lang/String;)Z\n+  #226 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #227 = Utf8               toString\n+  #228 = Utf8               ()Ljava/lang/String;\n+  #229 = Utf8               put\n+  #230 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n+  #231 = Utf8               quote\n+  #232 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #233 = Utf8               equals\n+  #234 = Utf8               (Ljava/lang/Object;)Z\n+  #235 = Utf8               toJSONString\n+  #236 = Utf8               numberToString\n+  #237 = Utf8               (Ljava/lang/Number;)Ljava/lang/String;\n+  #238 = Utf8               NUMBER_PATTERN\n+  #239 = Utf8               Ljava/util/regex/Pattern;\n+  #240 = Utf8               java/util/regex/Pattern\n+  #241 = Utf8               matcher\n+  #242 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #243 = Utf8               java/util/regex/Matcher\n+  #244 = Utf8               matches\n+  #245 = Utf8               ()Z\n+  #246 = Utf8               (Ljava/util/Map;)V\n+  #247 = Utf8               (Ljava/util/Collection;)V\n+  #248 = Utf8               getClass\n+  #249 = Utf8               ()Ljava/lang/Class;\n+  #250 = Utf8               java/lang/Class\n+  #251 = Utf8               isArray\n+  #252 = Utf8               (Ljava/lang/Object;)V\n+  #253 = Utf8               name\n+  #254 = Utf8               java/lang/Double\n+  #255 = Utf8               valueOf\n+  #256 = Utf8               (D)Ljava/lang/Double;\n+  #257 = Utf8               java/lang/Long\n+  #258 = Utf8               (J)Ljava/lang/String;\n {\n   private static final int maxdepth = 200;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 200\n \n   private boolean comma;\n@@ -520,14 +516,16 @@\n         64: areturn\n       Exception table:\n          from    to  target type\n             34    45    48   Class java/io/IOException\n       LineNumberTable:\n         line 144: 0\n         line 145: 8\n+        line 146: 18\n+        line 147: 23\n         line 149: 29\n         line 151: 34\n         line 157: 45\n         line 152: 48\n         line 156: 49\n         line 158: 58\n         line 159: 63\n@@ -835,14 +833,18 @@\n         line 251: 0\n         line 252: 7\n         line 254: 17\n         line 255: 39\n         line 256: 44\n         line 258: 54\n         line 259: 64\n+        line 260: 72\n+        line 261: 77\n+        line 262: 91\n+        line 263: 96\n         line 264: 101\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0     102     0  this   Lorg/json/JSONWriter;\n             0     102     1     c   C\n            39      63     2     m   C\n       StackMapTable: number_of_entries = 7\n"}]}
