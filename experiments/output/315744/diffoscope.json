{"diffoscope-json-version": 1, "source1": "first/NameFileFilter.class", "source2": "second/NameFileFilter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,146 +1,146 @@\n-  SHA-256 checksum 7b09659612b2b30dbc26e3e85807538610703cc9a0caaf90b30fce78befa3722\n+  SHA-256 checksum bde87fe043a0b37fc22463b655a5d7f5dc0450a099befd92e3a11644fcfc7d97\n   Compiled from \"NameFileFilter.java\"\n public class org.apache.commons.io.filefilter.NameFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #33                         // org/apache/commons/io/filefilter/NameFileFilter\n-  super_class: #34                        // org/apache/commons/io/filefilter/AbstractFileFilter\n+  this_class: #2                          // org/apache/commons/io/filefilter/NameFileFilter\n+  super_class: #8                         // org/apache/commons/io/filefilter/AbstractFileFilter\n   interfaces: 1, fields: 3, methods: 12, attributes: 1\n Constant pool:\n-    #1 = Methodref          #33.#72       // org/apache/commons/io/filefilter/NameFileFilter.\"<init>\":(Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n-    #2 = Methodref          #34.#73       // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n-    #3 = Class              #74           // java/lang/IllegalArgumentException\n-    #4 = String             #75           // The list of names must not be null\n-    #5 = Methodref          #3.#76        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #6 = Fieldref           #33.#77       // org/apache/commons/io/filefilter/NameFileFilter.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-    #7 = InterfaceMethodref #53.#78       // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-    #8 = Class              #42           // \"[Ljava/lang/String;\"\n-    #9 = Fieldref           #33.#79       // org/apache/commons/io/filefilter/NameFileFilter.names:[Ljava/lang/String;\n-   #10 = Methodref          #33.#80       // org/apache/commons/io/filefilter/NameFileFilter.toIOCase:(Lorg/apache/commons/io/IOCase;)Lorg/apache/commons/io/IOCase;\n-   #11 = Fieldref           #33.#81       // org/apache/commons/io/filefilter/NameFileFilter.caseSensitivity:Lorg/apache/commons/io/IOCase;\n-   #12 = Fieldref           #54.#82       // org/apache/commons/io/IOCase.SENSITIVE:Lorg/apache/commons/io/IOCase;\n-   #13 = Methodref          #33.#83       // org/apache/commons/io/filefilter/NameFileFilter.\"<init>\":(Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-   #14 = Methodref          #33.#84       // org/apache/commons/io/filefilter/NameFileFilter.\"<init>\":([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-   #15 = String             #85           // The wildcard must not be null\n-   #16 = Class              #86           // java/lang/String\n-   #17 = String             #87           // The array of names must not be null\n-   #18 = Methodref          #88.#89       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #19 = Methodref          #90.#91       // java/io/File.getName:()Ljava/lang/String;\n-   #20 = Methodref          #33.#92       // org/apache/commons/io/filefilter/NameFileFilter.acceptBaseName:(Ljava/lang/String;)Z\n-   #21 = InterfaceMethodref #93.#94       // java/nio/file/Path.getFileName:()Ljava/nio/file/Path;\n-   #22 = Methodref          #95.#96       // java/util/Objects.toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n-   #23 = Methodref          #33.#97       // org/apache/commons/io/filefilter/NameFileFilter.toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-   #24 = Methodref          #54.#98       // org/apache/commons/io/IOCase.checkEquals:(Ljava/lang/String;Ljava/lang/String;)Z\n-   #25 = Class              #99           // java/lang/StringBuilder\n-   #26 = Methodref          #25.#73       // java/lang/StringBuilder.\"<init>\":()V\n-   #27 = Methodref          #34.#100      // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n-   #28 = Methodref          #25.#101      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #29 = String             #102          // (\n-   #30 = String             #103          // ,\n-   #31 = String             #104          // )\n-   #32 = Methodref          #25.#100      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #33 = Class              #105          // org/apache/commons/io/filefilter/NameFileFilter\n-   #34 = Class              #106          // org/apache/commons/io/filefilter/AbstractFileFilter\n-   #35 = Class              #107          // java/io/Serializable\n-   #36 = Utf8               serialVersionUID\n-   #37 = Utf8               J\n-   #38 = Utf8               ConstantValue\n-   #39 = Long               176844364689077340l\n-   #41 = Utf8               names\n-   #42 = Utf8               [Ljava/lang/String;\n-   #43 = Utf8               caseSensitivity\n-   #44 = Utf8               Lorg/apache/commons/io/IOCase;\n-   #45 = Utf8               <init>\n-   #46 = Utf8               (Ljava/util/List;)V\n-   #47 = Utf8               Code\n-   #48 = Utf8               LineNumberTable\n-   #49 = Utf8               Signature\n-   #50 = Utf8               (Ljava/util/List<Ljava/lang/String;>;)V\n-   #51 = Utf8               (Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n-   #52 = Utf8               StackMapTable\n-   #53 = Class              #108          // java/util/List\n-   #54 = Class              #109          // org/apache/commons/io/IOCase\n-   #55 = Utf8               (Ljava/util/List<Ljava/lang/String;>;Lorg/apache/commons/io/IOCase;)V\n-   #56 = Utf8               (Ljava/lang/String;)V\n-   #57 = Utf8               ([Ljava/lang/String;)V\n-   #58 = Utf8               (Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-   #59 = Utf8               ([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-   #60 = Utf8               accept\n-   #61 = Utf8               (Ljava/io/File;)Z\n-   #62 = Utf8               (Ljava/io/File;Ljava/lang/String;)Z\n-   #63 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #64 = Utf8               acceptBaseName\n-   #65 = Utf8               (Ljava/lang/String;)Z\n-   #66 = Utf8               toIOCase\n-   #67 = Utf8               (Lorg/apache/commons/io/IOCase;)Lorg/apache/commons/io/IOCase;\n-   #68 = Utf8               toString\n+    #1 = Methodref          #2.#3         // org/apache/commons/io/filefilter/NameFileFilter.\"<init>\":(Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n+    #2 = Class              #4            // org/apache/commons/io/filefilter/NameFileFilter\n+    #3 = NameAndType        #5:#6         // \"<init>\":(Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n+    #4 = Utf8               org/apache/commons/io/filefilter/NameFileFilter\n+    #5 = Utf8               <init>\n+    #6 = Utf8               (Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n+    #7 = Methodref          #8.#9         // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+    #8 = Class              #10           // org/apache/commons/io/filefilter/AbstractFileFilter\n+    #9 = NameAndType        #5:#11        // \"<init>\":()V\n+   #10 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n+   #11 = Utf8               ()V\n+   #12 = Class              #13           // java/lang/IllegalArgumentException\n+   #13 = Utf8               java/lang/IllegalArgumentException\n+   #14 = String             #15           // The list of names must not be null\n+   #15 = Utf8               The list of names must not be null\n+   #16 = Methodref          #12.#17       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #17 = NameAndType        #5:#18        // \"<init>\":(Ljava/lang/String;)V\n+   #18 = Utf8               (Ljava/lang/String;)V\n+   #19 = Fieldref           #2.#20        // org/apache/commons/io/filefilter/NameFileFilter.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+   #20 = NameAndType        #21:#22       // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+   #21 = Utf8               EMPTY_STRING_ARRAY\n+   #22 = Utf8               [Ljava/lang/String;\n+   #23 = InterfaceMethodref #24.#25       // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #24 = Class              #26           // java/util/List\n+   #25 = NameAndType        #27:#28       // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #26 = Utf8               java/util/List\n+   #27 = Utf8               toArray\n+   #28 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #29 = Class              #22           // \"[Ljava/lang/String;\"\n+   #30 = Fieldref           #2.#31        // org/apache/commons/io/filefilter/NameFileFilter.names:[Ljava/lang/String;\n+   #31 = NameAndType        #32:#22       // names:[Ljava/lang/String;\n+   #32 = Utf8               names\n+   #33 = Methodref          #2.#34        // org/apache/commons/io/filefilter/NameFileFilter.toIOCase:(Lorg/apache/commons/io/IOCase;)Lorg/apache/commons/io/IOCase;\n+   #34 = NameAndType        #35:#36       // toIOCase:(Lorg/apache/commons/io/IOCase;)Lorg/apache/commons/io/IOCase;\n+   #35 = Utf8               toIOCase\n+   #36 = Utf8               (Lorg/apache/commons/io/IOCase;)Lorg/apache/commons/io/IOCase;\n+   #37 = Fieldref           #2.#38        // org/apache/commons/io/filefilter/NameFileFilter.caseSensitivity:Lorg/apache/commons/io/IOCase;\n+   #38 = NameAndType        #39:#40       // caseSensitivity:Lorg/apache/commons/io/IOCase;\n+   #39 = Utf8               caseSensitivity\n+   #40 = Utf8               Lorg/apache/commons/io/IOCase;\n+   #41 = Fieldref           #42.#43       // org/apache/commons/io/IOCase.SENSITIVE:Lorg/apache/commons/io/IOCase;\n+   #42 = Class              #44           // org/apache/commons/io/IOCase\n+   #43 = NameAndType        #45:#40       // SENSITIVE:Lorg/apache/commons/io/IOCase;\n+   #44 = Utf8               org/apache/commons/io/IOCase\n+   #45 = Utf8               SENSITIVE\n+   #46 = Methodref          #2.#47        // org/apache/commons/io/filefilter/NameFileFilter.\"<init>\":(Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+   #47 = NameAndType        #5:#48        // \"<init>\":(Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+   #48 = Utf8               (Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+   #49 = Methodref          #2.#50        // org/apache/commons/io/filefilter/NameFileFilter.\"<init>\":([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+   #50 = NameAndType        #5:#51        // \"<init>\":([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+   #51 = Utf8               ([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+   #52 = String             #53           // The wildcard must not be null\n+   #53 = Utf8               The wildcard must not be null\n+   #54 = Class              #55           // java/lang/String\n+   #55 = Utf8               java/lang/String\n+   #56 = String             #57           // The array of names must not be null\n+   #57 = Utf8               The array of names must not be null\n+   #58 = Methodref          #59.#60       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #59 = Class              #61           // java/lang/System\n+   #60 = NameAndType        #62:#63       // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #61 = Utf8               java/lang/System\n+   #62 = Utf8               arraycopy\n+   #63 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #64 = Methodref          #65.#66       // java/io/File.getName:()Ljava/lang/String;\n+   #65 = Class              #67           // java/io/File\n+   #66 = NameAndType        #68:#69       // getName:()Ljava/lang/String;\n+   #67 = Utf8               java/io/File\n+   #68 = Utf8               getName\n    #69 = Utf8               ()Ljava/lang/String;\n-   #70 = Utf8               SourceFile\n-   #71 = Utf8               NameFileFilter.java\n-   #72 = NameAndType        #45:#51       // \"<init>\":(Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n-   #73 = NameAndType        #45:#110      // \"<init>\":()V\n-   #74 = Utf8               java/lang/IllegalArgumentException\n-   #75 = Utf8               The list of names must not be null\n-   #76 = NameAndType        #45:#56       // \"<init>\":(Ljava/lang/String;)V\n-   #77 = NameAndType        #111:#42      // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-   #78 = NameAndType        #112:#113     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #79 = NameAndType        #41:#42       // names:[Ljava/lang/String;\n-   #80 = NameAndType        #66:#67       // toIOCase:(Lorg/apache/commons/io/IOCase;)Lorg/apache/commons/io/IOCase;\n-   #81 = NameAndType        #43:#44       // caseSensitivity:Lorg/apache/commons/io/IOCase;\n-   #82 = NameAndType        #114:#44      // SENSITIVE:Lorg/apache/commons/io/IOCase;\n-   #83 = NameAndType        #45:#58       // \"<init>\":(Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-   #84 = NameAndType        #45:#59       // \"<init>\":([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-   #85 = Utf8               The wildcard must not be null\n-   #86 = Utf8               java/lang/String\n-   #87 = Utf8               The array of names must not be null\n-   #88 = Class              #115          // java/lang/System\n-   #89 = NameAndType        #116:#117     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #90 = Class              #118          // java/io/File\n-   #91 = NameAndType        #119:#69      // getName:()Ljava/lang/String;\n-   #92 = NameAndType        #64:#65       // acceptBaseName:(Ljava/lang/String;)Z\n-   #93 = Class              #120          // java/nio/file/Path\n-   #94 = NameAndType        #121:#122     // getFileName:()Ljava/nio/file/Path;\n-   #95 = Class              #123          // java/util/Objects\n-   #96 = NameAndType        #68:#124      // toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n-   #97 = NameAndType        #125:#126     // toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-   #98 = NameAndType        #127:#128     // checkEquals:(Ljava/lang/String;Ljava/lang/String;)Z\n-   #99 = Utf8               java/lang/StringBuilder\n-  #100 = NameAndType        #68:#69       // toString:()Ljava/lang/String;\n-  #101 = NameAndType        #129:#130     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #102 = Utf8               (\n-  #103 = Utf8               ,\n-  #104 = Utf8               )\n-  #105 = Utf8               org/apache/commons/io/filefilter/NameFileFilter\n-  #106 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n-  #107 = Utf8               java/io/Serializable\n-  #108 = Utf8               java/util/List\n-  #109 = Utf8               org/apache/commons/io/IOCase\n-  #110 = Utf8               ()V\n-  #111 = Utf8               EMPTY_STRING_ARRAY\n-  #112 = Utf8               toArray\n-  #113 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #114 = Utf8               SENSITIVE\n-  #115 = Utf8               java/lang/System\n-  #116 = Utf8               arraycopy\n-  #117 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #118 = Utf8               java/io/File\n-  #119 = Utf8               getName\n-  #120 = Utf8               java/nio/file/Path\n-  #121 = Utf8               getFileName\n-  #122 = Utf8               ()Ljava/nio/file/Path;\n-  #123 = Utf8               java/util/Objects\n-  #124 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n-  #125 = Utf8               toFileVisitResult\n-  #126 = Utf8               (ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-  #127 = Utf8               checkEquals\n-  #128 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Z\n-  #129 = Utf8               append\n-  #130 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #70 = Methodref          #2.#71        // org/apache/commons/io/filefilter/NameFileFilter.acceptBaseName:(Ljava/lang/String;)Z\n+   #71 = NameAndType        #72:#73       // acceptBaseName:(Ljava/lang/String;)Z\n+   #72 = Utf8               acceptBaseName\n+   #73 = Utf8               (Ljava/lang/String;)Z\n+   #74 = InterfaceMethodref #75.#76       // java/nio/file/Path.getFileName:()Ljava/nio/file/Path;\n+   #75 = Class              #77           // java/nio/file/Path\n+   #76 = NameAndType        #78:#79       // getFileName:()Ljava/nio/file/Path;\n+   #77 = Utf8               java/nio/file/Path\n+   #78 = Utf8               getFileName\n+   #79 = Utf8               ()Ljava/nio/file/Path;\n+   #80 = Methodref          #81.#82       // java/util/Objects.toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n+   #81 = Class              #83           // java/util/Objects\n+   #82 = NameAndType        #84:#85       // toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n+   #83 = Utf8               java/util/Objects\n+   #84 = Utf8               toString\n+   #85 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n+   #86 = Methodref          #2.#87        // org/apache/commons/io/filefilter/NameFileFilter.toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+   #87 = NameAndType        #88:#89       // toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+   #88 = Utf8               toFileVisitResult\n+   #89 = Utf8               (ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+   #90 = Methodref          #42.#91       // org/apache/commons/io/IOCase.checkEquals:(Ljava/lang/String;Ljava/lang/String;)Z\n+   #91 = NameAndType        #92:#93       // checkEquals:(Ljava/lang/String;Ljava/lang/String;)Z\n+   #92 = Utf8               checkEquals\n+   #93 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Z\n+   #94 = Class              #95           // java/lang/StringBuilder\n+   #95 = Utf8               java/lang/StringBuilder\n+   #96 = Methodref          #94.#9        // java/lang/StringBuilder.\"<init>\":()V\n+   #97 = Methodref          #8.#98        // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n+   #98 = NameAndType        #84:#69       // toString:()Ljava/lang/String;\n+   #99 = Methodref          #94.#100      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #100 = NameAndType        #101:#102     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #101 = Utf8               append\n+  #102 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #103 = String             #104          // (\n+  #104 = Utf8               (\n+  #105 = String             #106          // ,\n+  #106 = Utf8               ,\n+  #107 = String             #108          // )\n+  #108 = Utf8               )\n+  #109 = Methodref          #94.#98       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #110 = Class              #111          // java/io/Serializable\n+  #111 = Utf8               java/io/Serializable\n+  #112 = Utf8               serialVersionUID\n+  #113 = Utf8               J\n+  #114 = Utf8               ConstantValue\n+  #115 = Long               176844364689077340l\n+  #117 = Utf8               (Ljava/util/List;)V\n+  #118 = Utf8               Code\n+  #119 = Utf8               LineNumberTable\n+  #120 = Utf8               Signature\n+  #121 = Utf8               (Ljava/util/List<Ljava/lang/String;>;)V\n+  #122 = Utf8               StackMapTable\n+  #123 = Utf8               (Ljava/util/List<Ljava/lang/String;>;Lorg/apache/commons/io/IOCase;)V\n+  #124 = Utf8               ([Ljava/lang/String;)V\n+  #125 = Utf8               accept\n+  #126 = Utf8               (Ljava/io/File;)Z\n+  #127 = Utf8               (Ljava/io/File;Ljava/lang/String;)Z\n+  #128 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #129 = Utf8               SourceFile\n+  #130 = Utf8               NameFileFilter.java\n {\n   private static final long serialVersionUID = 176844364689077340l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 176844364689077340l\n \n   private final java.lang.String[] names;\n@@ -160,111 +160,111 @@\n          1: aload_1\n          2: aconst_null\n          3: invokespecial #1                  // Method \"<init>\":(Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n          6: return\n       LineNumberTable:\n         line 85: 0\n         line 86: 6\n-    Signature: #50                          // (Ljava/util/List<Ljava/lang/String;>;)V\n+    Signature: #121                         // (Ljava/util/List<Ljava/lang/String;>;)V\n \n   public org.apache.commons.io.filefilter.NameFileFilter(java.util.List<java.lang.String>, org.apache.commons.io.IOCase);\n     descriptor: (Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #2                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+         1: invokespecial #7                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n          4: aload_1\n          5: ifnonnull     18\n-         8: new           #3                  // class java/lang/IllegalArgumentException\n+         8: new           #12                 // class java/lang/IllegalArgumentException\n         11: dup\n-        12: ldc           #4                  // String The list of names must not be null\n-        14: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        12: ldc           #14                 // String The list of names must not be null\n+        14: invokespecial #16                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         17: athrow\n         18: aload_0\n         19: aload_1\n-        20: getstatic     #6                  // Field EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-        23: invokeinterface #7,  2            // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-        28: checkcast     #8                  // class \"[Ljava/lang/String;\"\n-        31: putfield      #9                  // Field names:[Ljava/lang/String;\n+        20: getstatic     #19                 // Field EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+        23: invokeinterface #23,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+        28: checkcast     #29                 // class \"[Ljava/lang/String;\"\n+        31: putfield      #30                 // Field names:[Ljava/lang/String;\n         34: aload_0\n         35: aload_0\n         36: aload_2\n-        37: invokespecial #10                 // Method toIOCase:(Lorg/apache/commons/io/IOCase;)Lorg/apache/commons/io/IOCase;\n-        40: putfield      #11                 // Field caseSensitivity:Lorg/apache/commons/io/IOCase;\n+        37: invokespecial #33                 // Method toIOCase:(Lorg/apache/commons/io/IOCase;)Lorg/apache/commons/io/IOCase;\n+        40: putfield      #37                 // Field caseSensitivity:Lorg/apache/commons/io/IOCase;\n         43: return\n       LineNumberTable:\n         line 96: 0\n         line 97: 4\n         line 98: 8\n         line 100: 18\n         line 101: 34\n         line 102: 43\n       StackMapTable: number_of_entries = 1\n         frame_type = 255 /* full_frame */\n           offset_delta = 18\n           locals = [ class org/apache/commons/io/filefilter/NameFileFilter, class java/util/List, class org/apache/commons/io/IOCase ]\n           stack = []\n-    Signature: #55                          // (Ljava/util/List<Ljava/lang/String;>;Lorg/apache/commons/io/IOCase;)V\n+    Signature: #123                         // (Ljava/util/List<Ljava/lang/String;>;Lorg/apache/commons/io/IOCase;)V\n \n   public org.apache.commons.io.filefilter.NameFileFilter(java.lang.String);\n     descriptor: (Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: getstatic     #12                 // Field org/apache/commons/io/IOCase.SENSITIVE:Lorg/apache/commons/io/IOCase;\n-         5: invokespecial #13                 // Method \"<init>\":(Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+         2: getstatic     #41                 // Field org/apache/commons/io/IOCase.SENSITIVE:Lorg/apache/commons/io/IOCase;\n+         5: invokespecial #46                 // Method \"<init>\":(Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n          8: return\n       LineNumberTable:\n         line 111: 0\n         line 112: 8\n \n   public org.apache.commons.io.filefilter.NameFileFilter(java.lang.String...);\n     descriptor: ([Ljava/lang/String;)V\n     flags: (0x0081) ACC_PUBLIC, ACC_VARARGS\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: getstatic     #12                 // Field org/apache/commons/io/IOCase.SENSITIVE:Lorg/apache/commons/io/IOCase;\n-         5: invokespecial #14                 // Method \"<init>\":([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+         2: getstatic     #41                 // Field org/apache/commons/io/IOCase.SENSITIVE:Lorg/apache/commons/io/IOCase;\n+         5: invokespecial #49                 // Method \"<init>\":([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n          8: return\n       LineNumberTable:\n         line 125: 0\n         line 126: 8\n \n   public org.apache.commons.io.filefilter.NameFileFilter(java.lang.String, org.apache.commons.io.IOCase);\n     descriptor: (Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #2                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+         1: invokespecial #7                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n          4: aload_1\n          5: ifnonnull     18\n-         8: new           #3                  // class java/lang/IllegalArgumentException\n+         8: new           #12                 // class java/lang/IllegalArgumentException\n         11: dup\n-        12: ldc           #15                 // String The wildcard must not be null\n-        14: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        12: ldc           #52                 // String The wildcard must not be null\n+        14: invokespecial #16                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         17: athrow\n         18: aload_0\n         19: iconst_1\n-        20: anewarray     #16                 // class java/lang/String\n+        20: anewarray     #54                 // class java/lang/String\n         23: dup\n         24: iconst_0\n         25: aload_1\n         26: aastore\n-        27: putfield      #9                  // Field names:[Ljava/lang/String;\n+        27: putfield      #30                 // Field names:[Ljava/lang/String;\n         30: aload_0\n         31: aload_0\n         32: aload_2\n-        33: invokespecial #10                 // Method toIOCase:(Lorg/apache/commons/io/IOCase;)Lorg/apache/commons/io/IOCase;\n-        36: putfield      #11                 // Field caseSensitivity:Lorg/apache/commons/io/IOCase;\n+        33: invokespecial #33                 // Method toIOCase:(Lorg/apache/commons/io/IOCase;)Lorg/apache/commons/io/IOCase;\n+        36: putfield      #37                 // Field caseSensitivity:Lorg/apache/commons/io/IOCase;\n         39: return\n       LineNumberTable:\n         line 135: 0\n         line 136: 4\n         line 137: 8\n         line 139: 18\n         line 140: 30\n@@ -277,40 +277,40 @@\n \n   public org.apache.commons.io.filefilter.NameFileFilter(java.lang.String[], org.apache.commons.io.IOCase);\n     descriptor: ([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #2                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+         1: invokespecial #7                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n          4: aload_1\n          5: ifnonnull     18\n-         8: new           #3                  // class java/lang/IllegalArgumentException\n+         8: new           #12                 // class java/lang/IllegalArgumentException\n         11: dup\n-        12: ldc           #17                 // String The array of names must not be null\n-        14: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        12: ldc           #56                 // String The array of names must not be null\n+        14: invokespecial #16                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         17: athrow\n         18: aload_0\n         19: aload_1\n         20: arraylength\n-        21: anewarray     #16                 // class java/lang/String\n-        24: putfield      #9                  // Field names:[Ljava/lang/String;\n+        21: anewarray     #54                 // class java/lang/String\n+        24: putfield      #30                 // Field names:[Ljava/lang/String;\n         27: aload_1\n         28: iconst_0\n         29: aload_0\n-        30: getfield      #9                  // Field names:[Ljava/lang/String;\n+        30: getfield      #30                 // Field names:[Ljava/lang/String;\n         33: iconst_0\n         34: aload_1\n         35: arraylength\n-        36: invokestatic  #18                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        36: invokestatic  #58                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         39: aload_0\n         40: aload_0\n         41: aload_2\n-        42: invokespecial #10                 // Method toIOCase:(Lorg/apache/commons/io/IOCase;)Lorg/apache/commons/io/IOCase;\n-        45: putfield      #11                 // Field caseSensitivity:Lorg/apache/commons/io/IOCase;\n+        42: invokespecial #33                 // Method toIOCase:(Lorg/apache/commons/io/IOCase;)Lorg/apache/commons/io/IOCase;\n+        45: putfield      #37                 // Field caseSensitivity:Lorg/apache/commons/io/IOCase;\n         48: return\n       LineNumberTable:\n         line 150: 0\n         line 151: 4\n         line 152: 8\n         line 154: 18\n         line 155: 27\n@@ -325,74 +325,74 @@\n   public boolean accept(java.io.File);\n     descriptor: (Ljava/io/File;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #19                 // Method java/io/File.getName:()Ljava/lang/String;\n-         5: invokespecial #20                 // Method acceptBaseName:(Ljava/lang/String;)Z\n+         2: invokevirtual #64                 // Method java/io/File.getName:()Ljava/lang/String;\n+         5: invokespecial #70                 // Method acceptBaseName:(Ljava/lang/String;)Z\n          8: ireturn\n       LineNumberTable:\n         line 167: 0\n \n   public boolean accept(java.io.File, java.lang.String);\n     descriptor: (Ljava/io/File;Ljava/lang/String;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_0\n          1: aload_2\n-         2: invokespecial #20                 // Method acceptBaseName:(Ljava/lang/String;)Z\n+         2: invokespecial #70                 // Method acceptBaseName:(Ljava/lang/String;)Z\n          5: ireturn\n       LineNumberTable:\n         line 179: 0\n \n   public java.nio.file.FileVisitResult accept(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes);\n     descriptor: (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokeinterface #21,  1           // InterfaceMethod java/nio/file/Path.getFileName:()Ljava/nio/file/Path;\n+         2: invokeinterface #74,  1           // InterfaceMethod java/nio/file/Path.getFileName:()Ljava/nio/file/Path;\n          7: aconst_null\n-         8: invokestatic  #22                 // Method java/util/Objects.toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n-        11: invokespecial #20                 // Method acceptBaseName:(Ljava/lang/String;)Z\n+         8: invokestatic  #80                 // Method java/util/Objects.toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n+        11: invokespecial #70                 // Method acceptBaseName:(Ljava/lang/String;)Z\n         14: aload_1\n-        15: invokestatic  #23                 // Method toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+        15: invokestatic  #86                 // Method toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n         18: areturn\n       LineNumberTable:\n         line 191: 0\n \n   private boolean acceptBaseName(java.lang.String);\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=6, args_size=2\n          0: aload_0\n-         1: getfield      #9                  // Field names:[Ljava/lang/String;\n+         1: getfield      #30                 // Field names:[Ljava/lang/String;\n          4: astore_2\n          5: aload_2\n          6: arraylength\n          7: istore_3\n          8: iconst_0\n          9: istore        4\n         11: iload         4\n         13: iload_3\n         14: if_icmpge     44\n         17: aload_2\n         18: iload         4\n         20: aaload\n         21: astore        5\n         23: aload_0\n-        24: getfield      #11                 // Field caseSensitivity:Lorg/apache/commons/io/IOCase;\n+        24: getfield      #37                 // Field caseSensitivity:Lorg/apache/commons/io/IOCase;\n         27: aload_1\n         28: aload         5\n-        30: invokevirtual #24                 // Method org/apache/commons/io/IOCase.checkEquals:(Ljava/lang/String;Ljava/lang/String;)Z\n+        30: invokevirtual #90                 // Method org/apache/commons/io/IOCase.checkEquals:(Ljava/lang/String;Ljava/lang/String;)Z\n         33: ifeq          38\n         36: iconst_1\n         37: ireturn\n         38: iinc          4, 1\n         41: goto          11\n         44: iconst_0\n         45: ireturn\n@@ -413,15 +413,15 @@\n   private org.apache.commons.io.IOCase toIOCase(org.apache.commons.io.IOCase);\n     descriptor: (Lorg/apache/commons/io/IOCase;)Lorg/apache/commons/io/IOCase;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=2, args_size=2\n          0: aload_1\n          1: ifnonnull     10\n-         4: getstatic     #12                 // Field org/apache/commons/io/IOCase.SENSITIVE:Lorg/apache/commons/io/IOCase;\n+         4: getstatic     #41                 // Field org/apache/commons/io/IOCase.SENSITIVE:Lorg/apache/commons/io/IOCase;\n          7: goto          11\n         10: aload_1\n         11: areturn\n       LineNumberTable:\n         line 204: 0\n       StackMapTable: number_of_entries = 2\n         frame_type = 10 /* same */\n@@ -429,58 +429,58 @@\n           stack = [ class org/apache/commons/io/IOCase ]\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=1\n-         0: new           #25                 // class java/lang/StringBuilder\n+         0: new           #94                 // class java/lang/StringBuilder\n          3: dup\n-         4: invokespecial #26                 // Method java/lang/StringBuilder.\"<init>\":()V\n+         4: invokespecial #96                 // Method java/lang/StringBuilder.\"<init>\":()V\n          7: astore_1\n          8: aload_1\n          9: aload_0\n-        10: invokespecial #27                 // Method org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n-        13: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        10: invokespecial #97                 // Method org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n+        13: invokevirtual #99                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         16: pop\n         17: aload_1\n-        18: ldc           #29                 // String (\n-        20: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        18: ldc           #103                // String (\n+        20: invokevirtual #99                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         23: pop\n         24: aload_0\n-        25: getfield      #9                  // Field names:[Ljava/lang/String;\n+        25: getfield      #30                 // Field names:[Ljava/lang/String;\n         28: ifnull        70\n         31: iconst_0\n         32: istore_2\n         33: iload_2\n         34: aload_0\n-        35: getfield      #9                  // Field names:[Ljava/lang/String;\n+        35: getfield      #30                 // Field names:[Ljava/lang/String;\n         38: arraylength\n         39: if_icmpge     70\n         42: iload_2\n         43: ifle          53\n         46: aload_1\n-        47: ldc           #30                 // String ,\n-        49: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        47: ldc           #105                // String ,\n+        49: invokevirtual #99                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         52: pop\n         53: aload_1\n         54: aload_0\n-        55: getfield      #9                  // Field names:[Ljava/lang/String;\n+        55: getfield      #30                 // Field names:[Ljava/lang/String;\n         58: iload_2\n         59: aaload\n-        60: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        60: invokevirtual #99                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         63: pop\n         64: iinc          2, 1\n         67: goto          33\n         70: aload_1\n-        71: ldc           #31                 // String )\n-        73: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        71: ldc           #107                // String )\n+        73: invokevirtual #99                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         76: pop\n         77: aload_1\n-        78: invokevirtual #32                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        78: invokevirtual #109                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n         81: areturn\n       LineNumberTable:\n         line 214: 0\n         line 215: 8\n         line 216: 17\n         line 217: 24\n         line 218: 31\n"}]}
