{"diffoscope-json-version": 1, "source1": "first/ScopeUtil.class", "source2": "second/ScopeUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,176 +7,170 @@\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n \n public final class ScopeUtil\n {\n     private ScopeUtil() {\n     }\n     \n-    public static Scope getDeclaredScopeFromMods(final DetailAST aMods) {\n-        Scope result = null;\n-        for (DetailAST token = aMods.getFirstChild(); token != null && result == null; token = token.getNextSibling()) {\n-            switch (token.getType()) {\n+    public static Scope getDeclaredScopeFromMods(final DetailAST detailAST) {\n+        Scope scope = null;\n+        for (DetailAST detailAST2 = detailAST.getFirstChild(); detailAST2 != null && scope == null; detailAST2 = detailAST2.getNextSibling()) {\n+            switch (detailAST2.getType()) {\n                 case 62: {\n-                    result = Scope.PUBLIC;\n+                    scope = Scope.PUBLIC;\n                     break;\n                 }\n                 case 63: {\n-                    result = Scope.PROTECTED;\n+                    scope = Scope.PROTECTED;\n                     break;\n                 }\n                 case 61: {\n-                    result = Scope.PRIVATE;\n+                    scope = Scope.PRIVATE;\n                     break;\n                 }\n             }\n         }\n-        return result;\n+        return scope;\n     }\n     \n-    public static Scope getScope(final DetailAST ast) {\n-        return Optional.ofNullable(ast.findFirstToken(5)).map((Function<? super DetailAST, ? extends Scope>)ScopeUtil::getDeclaredScopeFromMods).orElseGet(() -> getDefaultScope(ast));\n+    public static Scope getScope(final DetailAST detailAST) {\n+        return Optional.ofNullable(detailAST.findFirstToken(5)).map((Function<? super DetailAST, ? extends Scope>)ScopeUtil::getDeclaredScopeFromMods).orElseGet(() -> getDefaultScope(detailAST2));\n     }\n     \n-    public static Scope getScopeFromMods(final DetailAST aMods) {\n-        return Optional.ofNullable(getDeclaredScopeFromMods(aMods)).orElseGet(() -> getDefaultScope(aMods.getParent()));\n+    public static Scope getScopeFromMods(final DetailAST detailAST) {\n+        return Optional.ofNullable(getDeclaredScopeFromMods(detailAST)).orElseGet(() -> getDefaultScope(detailAST2.getParent()));\n     }\n     \n-    private static Scope getDefaultScope(final DetailAST ast) {\n-        Scope result;\n-        if (isInEnumBlock(ast)) {\n-            if (ast.getType() == 155) {\n-                result = Scope.PUBLIC;\n+    private static Scope getDefaultScope(final DetailAST detailAST) {\n+        Scope scope;\n+        if (isInEnumBlock(detailAST)) {\n+            if (detailAST.getType() == 155) {\n+                scope = Scope.PUBLIC;\n             }\n-            else if (ast.getType() == 8) {\n-                result = Scope.PRIVATE;\n+            else if (detailAST.getType() == 8) {\n+                scope = Scope.PRIVATE;\n             }\n             else {\n-                result = Scope.PACKAGE;\n+                scope = Scope.PACKAGE;\n             }\n         }\n-        else if (isInInterfaceOrAnnotationBlock(ast)) {\n-            result = Scope.PUBLIC;\n+        else if (isInInterfaceOrAnnotationBlock(detailAST)) {\n+            scope = Scope.PUBLIC;\n         }\n         else {\n-            result = Scope.PACKAGE;\n+            scope = Scope.PACKAGE;\n         }\n-        return result;\n+        return scope;\n     }\n     \n-    public static Scope getSurroundingScope(final DetailAST node) {\n-        Scope returnValue = null;\n-        for (DetailAST token = node.getParent(); token != null; token = token.getParent()) {\n-            final int type = token.getType();\n+    public static Scope getSurroundingScope(final DetailAST detailAST) {\n+        Scope anoninner = null;\n+        for (DetailAST detailAST2 = detailAST.getParent(); detailAST2 != null; detailAST2 = detailAST2.getParent()) {\n+            final int type = detailAST2.getType();\n             if (TokenUtil.isTypeDeclaration(type)) {\n-                final Scope tokenScope = getScope(token);\n-                if (returnValue == null || returnValue.isIn(tokenScope)) {\n-                    returnValue = tokenScope;\n+                final Scope scope = getScope(detailAST2);\n+                if (anoninner == null || anoninner.isIn(scope)) {\n+                    anoninner = scope;\n                 }\n             }\n             else if (type == 136) {\n-                returnValue = Scope.ANONINNER;\n+                anoninner = Scope.ANONINNER;\n                 break;\n             }\n         }\n-        return returnValue;\n+        return anoninner;\n     }\n     \n-    public static boolean isInClassBlock(final DetailAST node) {\n-        return isInBlockOf(node, 14);\n+    public static boolean isInClassBlock(final DetailAST detailAST) {\n+        return isInBlockOf(detailAST, 14);\n     }\n     \n-    public static boolean isInRecordBlock(final DetailAST node) {\n-        return isInBlockOf(node, 199);\n+    public static boolean isInRecordBlock(final DetailAST detailAST) {\n+        return isInBlockOf(detailAST, 199);\n     }\n     \n-    public static boolean isInInterfaceBlock(final DetailAST node) {\n-        return isInBlockOf(node, 15);\n+    public static boolean isInInterfaceBlock(final DetailAST detailAST) {\n+        return isInBlockOf(detailAST, 15);\n     }\n     \n-    public static boolean isInAnnotationBlock(final DetailAST node) {\n-        return isInBlockOf(node, 157);\n+    public static boolean isInAnnotationBlock(final DetailAST detailAST) {\n+        return isInBlockOf(detailAST, 157);\n     }\n     \n-    private static boolean isInBlockOf(final DetailAST node, final int tokenType) {\n-        boolean returnValue = false;\n-        for (DetailAST token = node.getParent(); token != null && !returnValue; token = token.getParent()) {\n-            if (token.getType() == tokenType) {\n-                returnValue = true;\n+    private static boolean isInBlockOf(final DetailAST detailAST, final int n) {\n+        boolean b = false;\n+        for (DetailAST detailAST2 = detailAST.getParent(); detailAST2 != null && !b; detailAST2 = detailAST2.getParent()) {\n+            if (detailAST2.getType() == n) {\n+                b = true;\n             }\n             else {\n-                if (token.getType() == 136) {\n+                if (detailAST2.getType() == 136) {\n                     break;\n                 }\n-                if (TokenUtil.isTypeDeclaration(token.getType())) {\n+                if (TokenUtil.isTypeDeclaration(detailAST2.getType())) {\n                     break;\n                 }\n             }\n         }\n-        return returnValue;\n+        return b;\n     }\n     \n-    public static boolean isInInterfaceOrAnnotationBlock(final DetailAST node) {\n-        return isInInterfaceBlock(node) || isInAnnotationBlock(node);\n+    public static boolean isInInterfaceOrAnnotationBlock(final DetailAST detailAST) {\n+        return isInInterfaceBlock(detailAST) || isInAnnotationBlock(detailAST);\n     }\n     \n-    public static boolean isInEnumBlock(final DetailAST node) {\n-        boolean returnValue = false;\n-        for (DetailAST token = node.getParent(); token != null; token = token.getParent()) {\n-            if (TokenUtil.isOfType(token, new int[] { 15, 157, 14, 136, 154 })) {\n-                returnValue = (token.getType() == 154);\n+    public static boolean isInEnumBlock(final DetailAST detailAST) {\n+        boolean b = false;\n+        for (DetailAST detailAST2 = detailAST.getParent(); detailAST2 != null; detailAST2 = detailAST2.getParent()) {\n+            if (TokenUtil.isOfType(detailAST2, new int[] { 15, 157, 14, 136, 154 })) {\n+                b = (detailAST2.getType() == 154);\n                 break;\n             }\n         }\n-        return returnValue;\n+        return b;\n     }\n     \n-    public static boolean isInCodeBlock(final DetailAST node) {\n-        boolean returnValue = false;\n-        final int[] tokenTypes = { 9, 8, 11, 12, 181, 203 };\n-        for (DetailAST token = node.getParent(); token != null; token = token.getParent()) {\n-            if (TokenUtil.isOfType(token, tokenTypes)) {\n-                returnValue = true;\n+    public static boolean isInCodeBlock(final DetailAST detailAST) {\n+        boolean b = false;\n+        final int[] array = { 9, 8, 11, 12, 181, 203 };\n+        for (DetailAST detailAST2 = detailAST.getParent(); detailAST2 != null; detailAST2 = detailAST2.getParent()) {\n+            if (TokenUtil.isOfType(detailAST2, array)) {\n+                b = true;\n                 break;\n             }\n         }\n-        return returnValue;\n+        return b;\n     }\n     \n-    public static boolean isOuterMostType(final DetailAST node) {\n-        boolean returnValue = true;\n-        for (DetailAST parent = node.getParent(); parent != null; parent = parent.getParent()) {\n-            if (TokenUtil.isTypeDeclaration(parent.getType())) {\n-                returnValue = false;\n+    public static boolean isOuterMostType(final DetailAST detailAST) {\n+        boolean b = true;\n+        for (DetailAST detailAST2 = detailAST.getParent(); detailAST2 != null; detailAST2 = detailAST2.getParent()) {\n+            if (TokenUtil.isTypeDeclaration(detailAST2.getType())) {\n+                b = false;\n                 break;\n             }\n         }\n-        return returnValue;\n+        return b;\n     }\n     \n-    public static boolean isLocalVariableDef(final DetailAST node) {\n-        boolean localVariableDef;\n-        if (node.getType() == 10) {\n-            final DetailAST parent = node.getParent();\n-            localVariableDef = TokenUtil.isOfType(parent, new int[] { 7, 35, 156 });\n+    public static boolean isLocalVariableDef(final DetailAST detailAST) {\n+        boolean ofType;\n+        if (detailAST.getType() == 10) {\n+            ofType = TokenUtil.isOfType(detailAST.getParent(), new int[] { 7, 35, 156 });\n         }\n-        else if (node.getType() == 178) {\n-            localVariableDef = (node.getChildCount() > 1);\n-        }\n-        else if (node.getType() == 21) {\n-            final DetailAST parent = node.getParent();\n-            localVariableDef = (parent.getType() == 96);\n+        else if (detailAST.getType() == 178) {\n+            ofType = (detailAST.getChildCount() > 1);\n         }\n         else {\n-            localVariableDef = false;\n+            ofType = (detailAST.getType() == 21 && detailAST.getParent().getType() == 96);\n         }\n-        return localVariableDef;\n+        return ofType;\n     }\n     \n-    public static boolean isClassFieldDef(final DetailAST node) {\n-        return node.getType() == 10 && !isLocalVariableDef(node);\n+    public static boolean isClassFieldDef(final DetailAST detailAST) {\n+        return detailAST.getType() == 10 && !isLocalVariableDef(detailAST);\n     }\n     \n-    public static boolean isInScope(final DetailAST ast, final Scope scope) {\n-        final Scope surroundingScopeOfAstToken = getSurroundingScope(ast);\n-        return surroundingScopeOfAstToken == scope;\n+    public static boolean isInScope(final DetailAST detailAST, final Scope scope) {\n+        return getSurroundingScope(detailAST) == scope;\n     }\n }\n"}]}
