{"diffoscope-json-version": 1, "source1": "first/CombinedConfigurationBuilder.class", "source2": "second/CombinedConfigurationBuilder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,24 +1,24 @@\n \n package org.apache.commons.configuration2.builder.combined;\n \n import java.util.ArrayList;\n import org.apache.commons.configuration2.builder.ConfigurationBuilderEvent;\n import java.net.URL;\n+import org.apache.commons.configuration2.interpol.Lookup;\n import org.apache.commons.configuration2.ConfigurationLookup;\n import org.apache.commons.configuration2.builder.FileBasedBuilderProperties;\n import org.apache.commons.configuration2.builder.XMLBuilderProperties;\n import org.apache.commons.configuration2.builder.BasicBuilderParameters;\n import org.apache.commons.configuration2.beanutils.BeanHelper;\n import org.apache.commons.configuration2.resolver.CatalogResolver;\n import org.xml.sax.EntityResolver;\n import org.apache.commons.configuration2.SystemConfiguration;\n import org.apache.commons.configuration2.io.FileSystem;\n import java.util.Iterator;\n-import org.apache.commons.configuration2.interpol.Lookup;\n import java.util.HashMap;\n import org.apache.commons.configuration2.tree.UnionCombiner;\n import java.util.List;\n import org.apache.commons.configuration2.tree.NodeCombiner;\n import org.apache.commons.configuration2.tree.OverrideCombiner;\n import org.apache.commons.configuration2.ImmutableConfiguration;\n import org.apache.commons.configuration2.beanutils.CombinedBeanDeclaration;\n@@ -94,43 +94,43 @@\n     private CombinedConfiguration currentConfiguration;\n     private ConfigurationInterpolator parentInterpolator;\n     \n     public CombinedConfigurationBuilder() {\n         super((Class)CombinedConfiguration.class);\n     }\n     \n-    public CombinedConfigurationBuilder(final Map<String, Object> params) {\n-        super((Class)CombinedConfiguration.class, (Map)params);\n+    public CombinedConfigurationBuilder(final Map<String, Object> map) {\n+        super((Class)CombinedConfiguration.class, (Map)map);\n     }\n     \n-    public CombinedConfigurationBuilder(final Map<String, Object> params, final boolean allowFailOnInit) {\n-        super((Class)CombinedConfiguration.class, (Map)params, allowFailOnInit);\n+    public CombinedConfigurationBuilder(final Map<String, Object> map, final boolean b) {\n+        super((Class)CombinedConfiguration.class, (Map)map, b);\n     }\n     \n     public synchronized ConfigurationBuilder<? extends HierarchicalConfiguration<?>> getDefinitionBuilder() throws ConfigurationException {\n         if (this.definitionBuilder == null) {\n             this.addDefinitionBuilderChangeListener(this.definitionBuilder = this.setupDefinitionBuilder(this.getParameters()));\n         }\n         return this.definitionBuilder;\n     }\n     \n-    public CombinedConfigurationBuilder configure(final BuilderParameters... params) {\n-        super.configure(params);\n+    public CombinedConfigurationBuilder configure(final BuilderParameters... array) {\n+        super.configure(array);\n         return this;\n     }\n     \n-    public synchronized ConfigurationBuilder<? extends Configuration> getNamedBuilder(final String name) throws ConfigurationException {\n+    public synchronized ConfigurationBuilder<? extends Configuration> getNamedBuilder(final String str) throws ConfigurationException {\n         if (this.sourceData == null) {\n             throw new ConfigurationException(\"Information about child builders has not been setup yet! Call getConfiguration() first.\");\n         }\n-        final ConfigurationBuilder<? extends Configuration> builder = (ConfigurationBuilder<? extends Configuration>)this.sourceData.getNamedBuilder(name);\n-        if (builder == null) {\n-            throw new ConfigurationException(\"Builder cannot be resolved: \" + name);\n+        final ConfigurationBuilder namedBuilder = this.sourceData.getNamedBuilder(str);\n+        if (namedBuilder == null) {\n+            throw new ConfigurationException(\"Builder cannot be resolved: \" + str);\n         }\n-        return builder;\n+        return (ConfigurationBuilder<? extends Configuration>)namedBuilder;\n     }\n     \n     public synchronized Set<String> builderNames() {\n         if (this.sourceData == null) {\n             return Collections.emptySet();\n         }\n         return Collections.unmodifiableSet((Set<? extends String>)this.sourceData.builderNames());\n@@ -144,306 +144,296 @@\n         this.currentXMLParameters = null;\n         if (this.sourceData != null) {\n             this.sourceData.cleanUp();\n             this.sourceData = null;\n         }\n     }\n     \n-    protected ConfigurationBuilder<? extends HierarchicalConfiguration<?>> setupDefinitionBuilder(final Map<String, Object> params) throws ConfigurationException {\n-        final CombinedBuilderParametersImpl cbParams = CombinedBuilderParametersImpl.fromParameters((Map)params);\n-        if (cbParams != null) {\n-            final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> defBuilder = (ConfigurationBuilder<? extends HierarchicalConfiguration<?>>)cbParams.getDefinitionBuilder();\n-            if (defBuilder != null) {\n-                return defBuilder;\n-            }\n-            if (cbParams.getDefinitionBuilderParameters() != null) {\n-                return this.createXMLDefinitionBuilder(cbParams.getDefinitionBuilderParameters());\n+    protected ConfigurationBuilder<? extends HierarchicalConfiguration<?>> setupDefinitionBuilder(final Map<String, Object> map) throws ConfigurationException {\n+        final CombinedBuilderParametersImpl fromParameters = CombinedBuilderParametersImpl.fromParameters((Map)map);\n+        if (fromParameters != null) {\n+            final ConfigurationBuilder definitionBuilder = fromParameters.getDefinitionBuilder();\n+            if (definitionBuilder != null) {\n+                return (ConfigurationBuilder<? extends HierarchicalConfiguration<?>>)definitionBuilder;\n+            }\n+            if (fromParameters.getDefinitionBuilderParameters() != null) {\n+                return this.createXMLDefinitionBuilder(fromParameters.getDefinitionBuilderParameters());\n             }\n         }\n-        final BuilderParameters fileParams = (BuilderParameters)FileBasedBuilderParametersImpl.fromParameters((Map)params);\n-        if (fileParams != null) {\n-            return this.createXMLDefinitionBuilder(fileParams);\n+        final FileBasedBuilderParametersImpl fromParameters2 = FileBasedBuilderParametersImpl.fromParameters((Map)map);\n+        if (fromParameters2 != null) {\n+            return this.createXMLDefinitionBuilder((BuilderParameters)fromParameters2);\n         }\n         throw new ConfigurationException(\"No builder for configuration definition specified!\");\n     }\n     \n-    protected ConfigurationBuilder<? extends HierarchicalConfiguration<?>> createXMLDefinitionBuilder(final BuilderParameters builderParams) {\n-        return (ConfigurationBuilder<? extends HierarchicalConfiguration<?>>)new FileBasedConfigurationBuilder((Class)XMLConfiguration.class).configure(new BuilderParameters[] { builderParams });\n+    protected ConfigurationBuilder<? extends HierarchicalConfiguration<?>> createXMLDefinitionBuilder(final BuilderParameters builderParameters) {\n+        return (ConfigurationBuilder<? extends HierarchicalConfiguration<?>>)new FileBasedConfigurationBuilder((Class)XMLConfiguration.class).configure(new BuilderParameters[] { builderParameters });\n     }\n     \n     protected HierarchicalConfiguration<?> getDefinitionConfiguration() throws ConfigurationException {\n         if (this.definitionConfiguration == null) {\n             this.definitionConfiguration = (HierarchicalConfiguration<?>)this.getDefinitionBuilder().getConfiguration();\n         }\n         return this.definitionConfiguration;\n     }\n     \n     protected synchronized Collection<ConfigurationBuilder<? extends Configuration>> getChildBuilders() {\n         return this.sourceData.getChildBuilders();\n     }\n     \n-    protected BeanDeclaration createResultDeclaration(final Map<String, Object> params) throws ConfigurationException {\n-        final BeanDeclaration paramsDecl = super.createResultDeclaration((Map)params);\n-        final XMLBeanDeclaration resultDecl = new XMLBeanDeclaration((HierarchicalConfiguration)this.getDefinitionConfiguration(), \"header.result\", true, CombinedConfiguration.class.getName());\n-        return (BeanDeclaration)new CombinedBeanDeclaration(new BeanDeclaration[] { (BeanDeclaration)resultDecl, paramsDecl });\n+    protected BeanDeclaration createResultDeclaration(final Map<String, Object> map) throws ConfigurationException {\n+        return (BeanDeclaration)new CombinedBeanDeclaration(new BeanDeclaration[] { (BeanDeclaration)new XMLBeanDeclaration((HierarchicalConfiguration)this.getDefinitionConfiguration(), \"header.result\", true, CombinedConfiguration.class.getName()), super.createResultDeclaration((Map)map) });\n     }\n     \n-    protected void initResultInstance(final CombinedConfiguration result) throws ConfigurationException {\n-        super.initResultInstance((ImmutableConfiguration)result);\n-        this.currentConfiguration = result;\n-        final HierarchicalConfiguration<?> config = this.getDefinitionConfiguration();\n-        if (config.getMaxIndex(\"header.result.nodeCombiner\") < 0) {\n-            result.setNodeCombiner((NodeCombiner)new OverrideCombiner());\n+    protected void initResultInstance(final CombinedConfiguration currentConfiguration) throws ConfigurationException {\n+        super.initResultInstance((ImmutableConfiguration)currentConfiguration);\n+        this.currentConfiguration = currentConfiguration;\n+        final HierarchicalConfiguration<?> definitionConfiguration = this.getDefinitionConfiguration();\n+        if (definitionConfiguration.getMaxIndex(\"header.result.nodeCombiner\") < 0) {\n+            currentConfiguration.setNodeCombiner((NodeCombiner)new OverrideCombiner());\n         }\n         this.setUpCurrentParameters();\n-        initNodeCombinerListNodes(result, config, \"header.combiner.override.list-nodes.node\");\n-        this.registerConfiguredProviders(config);\n+        initNodeCombinerListNodes(currentConfiguration, definitionConfiguration, \"header.combiner.override.list-nodes.node\");\n+        this.registerConfiguredProviders(definitionConfiguration);\n         this.setUpCurrentXMLParameters();\n-        this.currentXMLParameters.setFileSystem(this.initFileSystem(config));\n-        this.initSystemProperties(config, this.getBasePath());\n-        this.registerConfiguredLookups(config, (Configuration)result);\n-        this.configureEntityResolver(config, this.currentXMLParameters);\n-        this.setUpParentInterpolator((Configuration)this.currentConfiguration, (Configuration)config);\n-        final CombinedConfigurationBuilder.ConfigurationSourceData data = this.getSourceData();\n-        final boolean createBuilders = data.getChildBuilders().isEmpty();\n-        final List<ConfigurationBuilder<? extends Configuration>> overrideBuilders = data.createAndAddConfigurations(result, data.getOverrideSources(), CombinedConfigurationBuilder.ConfigurationSourceData.access$000(data));\n-        if (createBuilders) {\n-            CombinedConfigurationBuilder.ConfigurationSourceData.access$000(data).addAll(overrideBuilders);\n-        }\n-        if (!data.getUnionSources().isEmpty()) {\n-            final CombinedConfiguration addConfig = this.createAdditionalsConfiguration(result);\n-            result.addConfiguration((Configuration)addConfig, CombinedConfigurationBuilder.ADDITIONAL_NAME);\n-            initNodeCombinerListNodes(addConfig, config, \"header.combiner.additional.list-nodes.node\");\n-            final List<ConfigurationBuilder<? extends Configuration>> unionBuilders = data.createAndAddConfigurations(addConfig, CombinedConfigurationBuilder.ConfigurationSourceData.access$100(data), CombinedConfigurationBuilder.ConfigurationSourceData.access$200(data));\n-            if (createBuilders) {\n-                CombinedConfigurationBuilder.ConfigurationSourceData.access$200(data).addAll(unionBuilders);\n+        this.currentXMLParameters.setFileSystem(this.initFileSystem(definitionConfiguration));\n+        this.initSystemProperties(definitionConfiguration, this.getBasePath());\n+        this.registerConfiguredLookups(definitionConfiguration, (Configuration)currentConfiguration);\n+        this.configureEntityResolver(definitionConfiguration, this.currentXMLParameters);\n+        this.setUpParentInterpolator((Configuration)this.currentConfiguration, (Configuration)definitionConfiguration);\n+        final CombinedConfigurationBuilder.ConfigurationSourceData sourceData = this.getSourceData();\n+        final boolean empty = sourceData.getChildBuilders().isEmpty();\n+        final List andAddConfigurations = sourceData.createAndAddConfigurations(currentConfiguration, sourceData.getOverrideSources(), CombinedConfigurationBuilder.ConfigurationSourceData.access$000(sourceData));\n+        if (empty) {\n+            CombinedConfigurationBuilder.ConfigurationSourceData.access$000(sourceData).addAll(andAddConfigurations);\n+        }\n+        if (!sourceData.getUnionSources().isEmpty()) {\n+            final CombinedConfiguration additionalsConfiguration = this.createAdditionalsConfiguration(currentConfiguration);\n+            currentConfiguration.addConfiguration((Configuration)additionalsConfiguration, CombinedConfigurationBuilder.ADDITIONAL_NAME);\n+            initNodeCombinerListNodes(additionalsConfiguration, definitionConfiguration, \"header.combiner.additional.list-nodes.node\");\n+            final List andAddConfigurations2 = sourceData.createAndAddConfigurations(additionalsConfiguration, CombinedConfigurationBuilder.ConfigurationSourceData.access$100(sourceData), CombinedConfigurationBuilder.ConfigurationSourceData.access$200(sourceData));\n+            if (empty) {\n+                CombinedConfigurationBuilder.ConfigurationSourceData.access$200(sourceData).addAll(andAddConfigurations2);\n             }\n         }\n-        result.isEmpty();\n+        currentConfiguration.isEmpty();\n         this.currentConfiguration = null;\n     }\n     \n-    protected CombinedConfiguration createAdditionalsConfiguration(final CombinedConfiguration resultConfig) {\n-        final CombinedConfiguration addConfig = new CombinedConfiguration((NodeCombiner)new UnionCombiner());\n-        addConfig.setListDelimiterHandler(resultConfig.getListDelimiterHandler());\n-        return addConfig;\n-    }\n-    \n-    protected void registerConfiguredLookups(final HierarchicalConfiguration<?> defConfig, final Configuration resultConfig) throws ConfigurationException {\n-        final Map<String, Lookup> lookups = new HashMap<String, Lookup>();\n-        final List<? extends HierarchicalConfiguration<?>> nodes = defConfig.configurationsAt(\"header.lookups.lookup\");\n-        for (final HierarchicalConfiguration<?> config : nodes) {\n-            final XMLBeanDeclaration decl = new XMLBeanDeclaration((HierarchicalConfiguration)config);\n-            final String key = config.getString(\"[@config-prefix]\");\n-            final Lookup lookup = (Lookup)this.fetchBeanHelper().createBean((BeanDeclaration)decl);\n-            lookups.put(key, lookup);\n-        }\n-        if (!lookups.isEmpty()) {\n-            final ConfigurationInterpolator defCI = defConfig.getInterpolator();\n-            if (defCI != null) {\n-                defCI.registerLookups((Map)lookups);\n-            }\n-            resultConfig.getInterpolator().registerLookups((Map)lookups);\n+    protected CombinedConfiguration createAdditionalsConfiguration(final CombinedConfiguration combinedConfiguration) {\n+        final CombinedConfiguration combinedConfiguration2 = new CombinedConfiguration((NodeCombiner)new UnionCombiner());\n+        combinedConfiguration2.setListDelimiterHandler(combinedConfiguration.getListDelimiterHandler());\n+        return combinedConfiguration2;\n+    }\n+    \n+    protected void registerConfiguredLookups(final HierarchicalConfiguration<?> hierarchicalConfiguration, final Configuration configuration) throws ConfigurationException {\n+        final HashMap hashMap = new HashMap();\n+        for (final HierarchicalConfiguration hierarchicalConfiguration2 : hierarchicalConfiguration.configurationsAt(\"header.lookups.lookup\")) {\n+            hashMap.put(hierarchicalConfiguration2.getString(\"[@config-prefix]\"), this.fetchBeanHelper().createBean((BeanDeclaration)new XMLBeanDeclaration(hierarchicalConfiguration2)));\n+        }\n+        if (!hashMap.isEmpty()) {\n+            final ConfigurationInterpolator interpolator = hierarchicalConfiguration.getInterpolator();\n+            if (interpolator != null) {\n+                interpolator.registerLookups((Map)hashMap);\n+            }\n+            configuration.getInterpolator().registerLookups((Map)hashMap);\n         }\n     }\n     \n-    protected FileSystem initFileSystem(final HierarchicalConfiguration<?> config) throws ConfigurationException {\n-        if (config.getMaxIndex(\"header.fileSystem\") == 0) {\n-            final XMLBeanDeclaration decl = new XMLBeanDeclaration((HierarchicalConfiguration)config, \"header.fileSystem\");\n-            return (FileSystem)this.fetchBeanHelper().createBean((BeanDeclaration)decl);\n+    protected FileSystem initFileSystem(final HierarchicalConfiguration<?> hierarchicalConfiguration) throws ConfigurationException {\n+        if (hierarchicalConfiguration.getMaxIndex(\"header.fileSystem\") == 0) {\n+            return (FileSystem)this.fetchBeanHelper().createBean((BeanDeclaration)new XMLBeanDeclaration((HierarchicalConfiguration)hierarchicalConfiguration, \"header.fileSystem\"));\n         }\n         return null;\n     }\n     \n-    protected void initSystemProperties(final HierarchicalConfiguration<?> config, final String basePath) throws ConfigurationException {\n-        final String fileName = config.getString(\"[@systemProperties]\");\n-        if (fileName != null) {\n+    protected void initSystemProperties(final HierarchicalConfiguration<?> hierarchicalConfiguration, final String s) throws ConfigurationException {\n+        final String string = hierarchicalConfiguration.getString(\"[@systemProperties]\");\n+        if (string != null) {\n             try {\n-                SystemConfiguration.setSystemProperties(basePath, fileName);\n+                SystemConfiguration.setSystemProperties(s, string);\n             }\n             catch (final Exception ex) {\n-                throw new ConfigurationException(\"Error setting system properties from \" + fileName, (Throwable)ex);\n+                throw new ConfigurationException(\"Error setting system properties from \" + string, (Throwable)ex);\n             }\n         }\n     }\n     \n-    protected void configureEntityResolver(final HierarchicalConfiguration<?> config, final XMLBuilderParametersImpl xmlParams) throws ConfigurationException {\n-        if (config.getMaxIndex(\"header.entity-resolver\") == 0) {\n-            final XMLBeanDeclaration decl = new XMLBeanDeclaration((HierarchicalConfiguration)config, \"header.entity-resolver\", true);\n-            final EntityResolver resolver = (EntityResolver)this.fetchBeanHelper().createBean((BeanDeclaration)decl, (Class)CatalogResolver.class);\n-            final FileSystem fileSystem = xmlParams.getFileHandler().getFileSystem();\n+    protected void configureEntityResolver(final HierarchicalConfiguration<?> hierarchicalConfiguration, final XMLBuilderParametersImpl xmlBuilderParametersImpl) throws ConfigurationException {\n+        if (hierarchicalConfiguration.getMaxIndex(\"header.entity-resolver\") == 0) {\n+            final EntityResolver entityResolver = (EntityResolver)this.fetchBeanHelper().createBean((BeanDeclaration)new XMLBeanDeclaration((HierarchicalConfiguration)hierarchicalConfiguration, \"header.entity-resolver\", true), (Class)CatalogResolver.class);\n+            final FileSystem fileSystem = xmlBuilderParametersImpl.getFileHandler().getFileSystem();\n             if (fileSystem != null) {\n-                BeanHelper.setProperty((Object)resolver, \"fileSystem\", (Object)fileSystem);\n+                BeanHelper.setProperty((Object)entityResolver, \"fileSystem\", (Object)fileSystem);\n             }\n-            final String basePath = xmlParams.getFileHandler().getBasePath();\n+            final String basePath = xmlBuilderParametersImpl.getFileHandler().getBasePath();\n             if (basePath != null) {\n-                BeanHelper.setProperty((Object)resolver, \"baseDir\", (Object)basePath);\n+                BeanHelper.setProperty((Object)entityResolver, \"baseDir\", (Object)basePath);\n             }\n-            final ConfigurationInterpolator ci = new ConfigurationInterpolator();\n-            ci.registerLookups((Map)this.fetchPrefixLookups());\n-            BeanHelper.setProperty((Object)resolver, \"interpolator\", (Object)ci);\n-            xmlParams.setEntityResolver(resolver);\n+            final ConfigurationInterpolator configurationInterpolator = new ConfigurationInterpolator();\n+            configurationInterpolator.registerLookups((Map)this.fetchPrefixLookups());\n+            BeanHelper.setProperty((Object)entityResolver, \"interpolator\", (Object)configurationInterpolator);\n+            xmlBuilderParametersImpl.setEntityResolver(entityResolver);\n         }\n     }\n     \n-    protected ConfigurationBuilderProvider providerForTag(final String tagName) {\n-        return this.currentParameters.providerForTag(tagName);\n+    protected ConfigurationBuilderProvider providerForTag(final String s) {\n+        return this.currentParameters.providerForTag(s);\n     }\n     \n-    protected void initChildBuilderParameters(final BuilderParameters params) {\n-        this.initDefaultChildParameters(params);\n-        if (params instanceof BasicBuilderParameters) {\n-            this.initChildBasicParameters((BasicBuilderParameters)params);\n+    protected void initChildBuilderParameters(final BuilderParameters builderParameters) {\n+        this.initDefaultChildParameters(builderParameters);\n+        if (builderParameters instanceof BasicBuilderParameters) {\n+            this.initChildBasicParameters((BasicBuilderParameters)builderParameters);\n         }\n-        if (params instanceof XMLBuilderProperties) {\n-            this.initChildXMLParameters((XMLBuilderProperties<?>)(XMLBuilderProperties)params);\n+        if (builderParameters instanceof XMLBuilderProperties) {\n+            this.initChildXMLParameters((XMLBuilderProperties<?>)(XMLBuilderProperties)builderParameters);\n         }\n-        if (params instanceof FileBasedBuilderProperties) {\n-            this.initChildFileBasedParameters((FileBasedBuilderProperties<?>)(FileBasedBuilderProperties)params);\n+        if (builderParameters instanceof FileBasedBuilderProperties) {\n+            this.initChildFileBasedParameters((FileBasedBuilderProperties<?>)(FileBasedBuilderProperties)builderParameters);\n         }\n-        if (params instanceof CombinedBuilderParametersImpl) {\n-            this.initChildCombinedParameters((CombinedBuilderParametersImpl)params);\n+        if (builderParameters instanceof CombinedBuilderParametersImpl) {\n+            this.initChildCombinedParameters((CombinedBuilderParametersImpl)builderParameters);\n         }\n     }\n     \n-    void initChildEventListeners(final BasicConfigurationBuilder<? extends Configuration> dest) {\n-        this.copyEventListeners((BasicConfigurationBuilder)dest);\n+    void initChildEventListeners(final BasicConfigurationBuilder<? extends Configuration> basicConfigurationBuilder) {\n+        this.copyEventListeners((BasicConfigurationBuilder)basicConfigurationBuilder);\n     }\n     \n     CombinedConfiguration getConfigurationUnderConstruction() {\n         return this.currentConfiguration;\n     }\n     \n-    void initBean(final Object bean, final BeanDeclaration decl) {\n-        this.fetchBeanHelper().initBean(bean, decl);\n+    void initBean(final Object o, final BeanDeclaration beanDeclaration) {\n+        this.fetchBeanHelper().initBean(o, beanDeclaration);\n     }\n     \n     private void setUpCurrentParameters() {\n         (this.currentParameters = CombinedBuilderParametersImpl.fromParameters(this.getParameters(), true)).registerMissingProviders((Map)CombinedConfigurationBuilder.DEFAULT_PROVIDERS_MAP);\n     }\n     \n     private void setUpCurrentXMLParameters() throws ConfigurationException {\n         this.currentXMLParameters = new XMLBuilderParametersImpl();\n         this.initDefaultBasePath();\n     }\n     \n-    private void setUpParentInterpolator(final Configuration resultConfig, final Configuration defConfig) {\n-        (this.parentInterpolator = new ConfigurationInterpolator()).addDefaultLookup((Lookup)new ConfigurationLookup((ImmutableConfiguration)resultConfig));\n-        final ConfigurationInterpolator defInterpolator = defConfig.getInterpolator();\n-        if (defInterpolator != null) {\n-            defInterpolator.setParentInterpolator(this.parentInterpolator);\n+    private void setUpParentInterpolator(final Configuration configuration, final Configuration configuration2) {\n+        (this.parentInterpolator = new ConfigurationInterpolator()).addDefaultLookup((Lookup)new ConfigurationLookup((ImmutableConfiguration)configuration));\n+        final ConfigurationInterpolator interpolator = configuration2.getInterpolator();\n+        if (interpolator != null) {\n+            interpolator.setParentInterpolator(this.parentInterpolator);\n         }\n     }\n     \n     private void initDefaultBasePath() throws ConfigurationException {\n         assert this.currentParameters != null : \"Current parameters undefined!\";\n         if (this.currentParameters.getBasePath() != null) {\n             this.currentXMLParameters.setBasePath(this.currentParameters.getBasePath());\n         }\n         else {\n-            final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> defBuilder = this.getDefinitionBuilder();\n-            if (defBuilder instanceof FileBasedConfigurationBuilder) {\n-                final FileBasedConfigurationBuilder fileBuilder = (FileBasedConfigurationBuilder)defBuilder;\n-                final URL url = fileBuilder.getFileHandler().getURL();\n-                this.currentXMLParameters.setBasePath((url != null) ? url.toExternalForm() : fileBuilder.getFileHandler().getBasePath());\n+            final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> definitionBuilder = this.getDefinitionBuilder();\n+            if (definitionBuilder instanceof FileBasedConfigurationBuilder) {\n+                final FileBasedConfigurationBuilder fileBasedConfigurationBuilder = (FileBasedConfigurationBuilder)definitionBuilder;\n+                final URL url = fileBasedConfigurationBuilder.getFileHandler().getURL();\n+                this.currentXMLParameters.setBasePath((url != null) ? url.toExternalForm() : fileBasedConfigurationBuilder.getFileHandler().getBasePath());\n             }\n         }\n     }\n     \n-    private void initDefaultChildParameters(final BuilderParameters params) {\n-        this.currentParameters.getChildDefaultParametersManager().initializeParameters(params);\n+    private void initDefaultChildParameters(final BuilderParameters builderParameters) {\n+        this.currentParameters.getChildDefaultParametersManager().initializeParameters(builderParameters);\n     }\n     \n-    private void initChildBasicParameters(final BasicBuilderParameters params) {\n-        params.setPrefixLookups((Map)this.fetchPrefixLookups());\n-        params.setParentInterpolator(this.parentInterpolator);\n+    private void initChildBasicParameters(final BasicBuilderParameters basicBuilderParameters) {\n+        basicBuilderParameters.setPrefixLookups((Map)this.fetchPrefixLookups());\n+        basicBuilderParameters.setParentInterpolator(this.parentInterpolator);\n         if (this.currentParameters.isInheritSettings()) {\n-            params.inheritFrom(this.getParameters());\n+            basicBuilderParameters.inheritFrom(this.getParameters());\n         }\n     }\n     \n-    private void initChildFileBasedParameters(final FileBasedBuilderProperties<?> params) {\n-        params.setBasePath(this.getBasePath());\n-        params.setFileSystem(this.currentXMLParameters.getFileHandler().getFileSystem());\n+    private void initChildFileBasedParameters(final FileBasedBuilderProperties<?> fileBasedBuilderProperties) {\n+        fileBasedBuilderProperties.setBasePath(this.getBasePath());\n+        fileBasedBuilderProperties.setFileSystem(this.currentXMLParameters.getFileHandler().getFileSystem());\n     }\n     \n-    private void initChildXMLParameters(final XMLBuilderProperties<?> params) {\n-        params.setEntityResolver(this.currentXMLParameters.getEntityResolver());\n+    private void initChildXMLParameters(final XMLBuilderProperties<?> xmlBuilderProperties) {\n+        xmlBuilderProperties.setEntityResolver(this.currentXMLParameters.getEntityResolver());\n     }\n     \n-    private void initChildCombinedParameters(final CombinedBuilderParametersImpl params) {\n-        params.registerMissingProviders(this.currentParameters);\n-        params.setBasePath(this.getBasePath());\n+    private void initChildCombinedParameters(final CombinedBuilderParametersImpl combinedBuilderParametersImpl) {\n+        combinedBuilderParametersImpl.registerMissingProviders(this.currentParameters);\n+        combinedBuilderParametersImpl.setBasePath(this.getBasePath());\n     }\n     \n     private CombinedConfigurationBuilder.ConfigurationSourceData getSourceData() throws ConfigurationException {\n         if (this.sourceData == null) {\n             if (this.currentParameters == null) {\n                 this.setUpCurrentParameters();\n                 this.setUpCurrentXMLParameters();\n             }\n             this.sourceData = this.createSourceData();\n         }\n         return this.sourceData;\n     }\n     \n     private CombinedConfigurationBuilder.ConfigurationSourceData createSourceData() throws ConfigurationException {\n-        final CombinedConfigurationBuilder.ConfigurationSourceData result = new CombinedConfigurationBuilder.ConfigurationSourceData(this);\n-        result.initFromDefinitionConfiguration((HierarchicalConfiguration)this.getDefinitionConfiguration());\n-        return result;\n+        final CombinedConfigurationBuilder.ConfigurationSourceData configurationSourceData = new CombinedConfigurationBuilder.ConfigurationSourceData(this);\n+        configurationSourceData.initFromDefinitionConfiguration((HierarchicalConfiguration)this.getDefinitionConfiguration());\n+        return configurationSourceData;\n     }\n     \n     private String getBasePath() {\n         return this.currentXMLParameters.getFileHandler().getBasePath();\n     }\n     \n-    private void registerConfiguredProviders(final HierarchicalConfiguration<?> defConfig) {\n-        final List<? extends HierarchicalConfiguration<?>> nodes = defConfig.configurationsAt(\"header.providers.provider\");\n-        for (final HierarchicalConfiguration<?> config : nodes) {\n-            final XMLBeanDeclaration decl = new XMLBeanDeclaration((HierarchicalConfiguration)config);\n-            final String key = config.getString(\"[@config-tag]\");\n-            this.currentParameters.registerProvider(key, (ConfigurationBuilderProvider)this.fetchBeanHelper().createBean((BeanDeclaration)decl));\n+    private void registerConfiguredProviders(final HierarchicalConfiguration<?> hierarchicalConfiguration) {\n+        for (final HierarchicalConfiguration hierarchicalConfiguration2 : hierarchicalConfiguration.configurationsAt(\"header.providers.provider\")) {\n+            this.currentParameters.registerProvider(hierarchicalConfiguration2.getString(\"[@config-tag]\"), (ConfigurationBuilderProvider)this.fetchBeanHelper().createBean((BeanDeclaration)new XMLBeanDeclaration(hierarchicalConfiguration2)));\n         }\n     }\n     \n-    private void addDefinitionBuilderChangeListener(final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> defBuilder) {\n-        defBuilder.addEventListener(ConfigurationBuilderEvent.RESET, event -> {\n+    private void addDefinitionBuilderChangeListener(final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> configurationBuilder) {\n+        configurationBuilder.addEventListener(ConfigurationBuilderEvent.RESET, configurationBuilderEvent -> {\n             synchronized (this) {\n                 this.reset();\n-                this.definitionBuilder = defBuilder;\n+                this.configurationBuilder = configurationBuilder;\n             }\n         });\n     }\n     \n     private Map<String, ? extends Lookup> fetchPrefixLookups() {\n-        final CombinedConfiguration cc = this.getConfigurationUnderConstruction();\n-        return (cc != null) ? cc.getInterpolator().getLookups() : null;\n+        final CombinedConfiguration configurationUnderConstruction = this.getConfigurationUnderConstruction();\n+        return (configurationUnderConstruction != null) ? configurationUnderConstruction.getInterpolator().getLookups() : null;\n     }\n     \n-    private Collection<ConfigurationDeclaration> createDeclarations(final Collection<? extends HierarchicalConfiguration<?>> configs) {\n-        final Collection<ConfigurationDeclaration> declarations = new ArrayList<ConfigurationDeclaration>(configs.size());\n-        for (final HierarchicalConfiguration<?> c : configs) {\n-            declarations.add(new ConfigurationDeclaration(this, (HierarchicalConfiguration)c));\n+    private Collection<ConfigurationDeclaration> createDeclarations(final Collection<? extends HierarchicalConfiguration<?>> collection) {\n+        final ArrayList list = new ArrayList(collection.size());\n+        final Iterator iterator = collection.iterator();\n+        while (iterator.hasNext()) {\n+            list.add(new ConfigurationDeclaration(this, (HierarchicalConfiguration)iterator.next()));\n         }\n-        return declarations;\n+        return list;\n     }\n     \n-    private static void initNodeCombinerListNodes(final CombinedConfiguration cc, final HierarchicalConfiguration<?> defConfig, final String key) {\n-        final List<Object> listNodes = defConfig.getList(key);\n-        for (final Object listNode : listNodes) {\n-            cc.getNodeCombiner().addListNode((String)listNode);\n+    private static void initNodeCombinerListNodes(final CombinedConfiguration combinedConfiguration, final HierarchicalConfiguration<?> hierarchicalConfiguration, final String s) {\n+        final Iterator iterator = hierarchicalConfiguration.getList(s).iterator();\n+        while (iterator.hasNext()) {\n+            combinedConfiguration.getNodeCombiner().addListNode((String)iterator.next());\n         }\n     }\n     \n     private static Map<String, ConfigurationBuilderProvider> createDefaultProviders() {\n-        final Map<String, ConfigurationBuilderProvider> providers = new HashMap<String, ConfigurationBuilderProvider>();\n+        final HashMap hashMap = new HashMap();\n         for (int i = 0; i < CombinedConfigurationBuilder.DEFAULT_TAGS.length; ++i) {\n-            providers.put(CombinedConfigurationBuilder.DEFAULT_TAGS[i], CombinedConfigurationBuilder.DEFAULT_PROVIDERS[i]);\n+            hashMap.put(CombinedConfigurationBuilder.DEFAULT_TAGS[i], CombinedConfigurationBuilder.DEFAULT_PROVIDERS[i]);\n         }\n-        return providers;\n+        return hashMap;\n     }\n     \n     static {\n         ADDITIONAL_NAME = CombinedConfigurationBuilder.class.getName() + \"/ADDITIONAL_CONFIG\";\n         CONFIG_BEAN_FACTORY_NAME = CombinedConfigurationBuilder.class.getName() + \".CONFIG_BEAN_FACTORY_NAME\";\n         CONFIG_SECTIONS = new String[] { \"additional\", \"override\", \"header\" };\n         PROPERTIES_PROVIDER = (ConfigurationBuilderProvider)new FileExtensionConfigurationBuilderProvider(\"org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder\", \"org.apache.commons.configuration2.XMLPropertiesConfiguration\", \"org.apache.commons.configuration2.PropertiesConfiguration\", \"xml\", (Collection)Collections.singletonList(\"org.apache.commons.configuration2.builder.FileBasedBuilderParametersImpl\"));\n"}]}
