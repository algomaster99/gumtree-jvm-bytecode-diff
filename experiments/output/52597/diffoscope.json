{"diffoscope-json-version": 1, "source1": "first/ZipSplitReadOnlySeekableByteChannelTest.class", "source2": "second/ZipSplitReadOnlySeekableByteChannelTest.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -130,16 +130,16 @@\n         final int lastFileSize = (int)lastFile.length();\n         final Random random = new Random();\n         final int randomDiskNumber = random.nextInt(3);\n         final int randomOffset = (randomDiskNumber < 2) ? random.nextInt(firstFileSize) : random.nextInt(lastFileSize);\n         final ZipSplitReadOnlySeekableByteChannel channel = (ZipSplitReadOnlySeekableByteChannel)ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastFile);\n         channel.position((long)randomDiskNumber, (long)randomOffset);\n         long expectedPosition = (long)randomOffset;\n-        expectedPosition += ((randomDiskNumber > 0) ? ((long)firstFileSize) : 0L);\n-        expectedPosition += ((randomDiskNumber > 1) ? ((long)secondFileSize) : 0L);\n+        expectedPosition += ((randomDiskNumber > 0) ? firstFileSize : 0);\n+        expectedPosition += ((randomDiskNumber > 1) ? secondFileSize : 0);\n         Assert.assertEquals(expectedPosition, channel.position());\n     }\n     \n     private List<SeekableByteChannel> getSplitZipChannels() throws IOException {\n         final List<SeekableByteChannel> channels = new ArrayList<SeekableByteChannel>();\n         final File file1 = AbstractTestCase.getFile(\"COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\");\n         channels.add(Files.newByteChannel(file1.toPath(), StandardOpenOption.READ));\n"}]}
