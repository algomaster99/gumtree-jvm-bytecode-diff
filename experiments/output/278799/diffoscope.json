{"diffoscope-json-version": 1, "source1": "first/CPFieldRef.class", "source2": "second/CPFieldRef.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,78 +9,74 @@\n     CPClass className;\n     transient int classNameIndex;\n     private final CPNameAndType nameAndType;\n     transient int nameAndTypeIndex;\n     private boolean hashcodeComputed;\n     private int cachedHashCode;\n     \n-    public CPFieldRef(final CPClass className, final CPNameAndType descriptor, final int globalIndex) {\n-        super((byte)9, globalIndex);\n+    public CPFieldRef(final CPClass className, final CPNameAndType nameAndType, final int n) {\n+        super((byte)9, n);\n         this.className = className;\n-        this.nameAndType = descriptor;\n+        this.nameAndType = nameAndType;\n     }\n     \n     protected ClassFileEntry[] getNestedClassFileEntries() {\n         return new ClassFileEntry[] { (ClassFileEntry)this.className, (ClassFileEntry)this.nameAndType };\n     }\n     \n-    protected void resolve(final ClassConstantPool pool) {\n-        super.resolve(pool);\n-        this.nameAndTypeIndex = pool.indexOf((ClassFileEntry)this.nameAndType);\n-        this.classNameIndex = pool.indexOf((ClassFileEntry)this.className);\n+    protected void resolve(final ClassConstantPool classConstantPool) {\n+        super.resolve(classConstantPool);\n+        this.nameAndTypeIndex = classConstantPool.indexOf((ClassFileEntry)this.nameAndType);\n+        this.classNameIndex = classConstantPool.indexOf((ClassFileEntry)this.className);\n     }\n     \n-    protected void writeBody(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.classNameIndex);\n-        dos.writeShort(this.nameAndTypeIndex);\n+    protected void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.classNameIndex);\n+        dataOutputStream.writeShort(this.nameAndTypeIndex);\n     }\n     \n     public String toString() {\n         return \"FieldRef: \" + this.className + \"#\" + this.nameAndType;\n     }\n     \n     private void generateHashCode() {\n         this.hashcodeComputed = true;\n-        final int PRIME = 31;\n-        int result = 1;\n-        result = 31 * result + ((this.className == null) ? 0 : this.className.hashCode());\n-        result = 31 * result + ((this.nameAndType == null) ? 0 : this.nameAndType.hashCode());\n-        this.cachedHashCode = result;\n+        this.cachedHashCode = 31 * (31 * 1 + ((this.className == null) ? 0 : this.className.hashCode())) + ((this.nameAndType == null) ? 0 : this.nameAndType.hashCode());\n     }\n     \n     public int hashCode() {\n         if (!this.hashcodeComputed) {\n             this.generateHashCode();\n         }\n         return this.cachedHashCode;\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (obj == null) {\n+        if (o == null) {\n             return false;\n         }\n-        if (this.getClass() != obj.getClass()) {\n+        if (this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final CPFieldRef other = (CPFieldRef)obj;\n+        final CPFieldRef cpFieldRef = (CPFieldRef)o;\n         if (this.className == null) {\n-            if (other.className != null) {\n+            if (cpFieldRef.className != null) {\n                 return false;\n             }\n         }\n-        else if (!this.className.equals((Object)other.className)) {\n+        else if (!this.className.equals((Object)cpFieldRef.className)) {\n             return false;\n         }\n         if (this.nameAndType == null) {\n-            if (other.nameAndType != null) {\n+            if (cpFieldRef.nameAndType != null) {\n                 return false;\n             }\n         }\n-        else if (!this.nameAndType.equals((Object)other.nameAndType)) {\n+        else if (!this.nameAndType.equals((Object)cpFieldRef.nameAndType)) {\n             return false;\n         }\n         return true;\n     }\n }\n"}]}
