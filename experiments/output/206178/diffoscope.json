{"diffoscope-json-version": 1, "source1": "first/FileLocatorUtils.class", "source2": "second/FileLocatorUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,94 +26,94 @@\n     private static final String PROP_FILE_SYSTEM = \"fileSystem\";\n     private static final String PROP_STRATEGY = \"locationStrategy\";\n     private static final String PROP_SOURCE_URL = \"sourceURL\";\n     \n     private FileLocatorUtils() {\n     }\n     \n-    static String appendPath(final String path, final String ext) {\n-        final StringBuilder fName = new StringBuilder();\n-        fName.append(path);\n-        if (!path.endsWith(File.separator)) {\n-            fName.append(File.separator);\n+    static String appendPath(final String str, final String str2) {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(str);\n+        if (!str.endsWith(File.separator)) {\n+            sb.append(File.separator);\n         }\n-        if (ext.startsWith(\".\" + File.separator)) {\n-            fName.append(ext.substring(2));\n+        if (str2.startsWith(\".\" + File.separator)) {\n+            sb.append(str2.substring(2));\n         }\n         else {\n-            fName.append(ext);\n+            sb.append(str2);\n         }\n-        return fName.toString();\n+        return sb.toString();\n     }\n     \n-    static File constructFile(final String basePath, final String fileName) {\n-        final File absolute = new File(fileName);\n-        File file;\n-        if (StringUtils.isEmpty((CharSequence)basePath) || absolute.isAbsolute()) {\n-            file = absolute;\n+    static File constructFile(final String s, final String pathname) {\n+        final File file = new File(pathname);\n+        File file2;\n+        if (StringUtils.isEmpty((CharSequence)s) || file.isAbsolute()) {\n+            file2 = file;\n         }\n         else {\n-            file = new File(appendPath(basePath, fileName));\n+            file2 = new File(appendPath(s, pathname));\n         }\n-        return file;\n+        return file2;\n     }\n     \n     static URL convertFileToURL(final File file) {\n         return convertURIToURL(file.toURI());\n     }\n     \n     static URL convertURIToURL(final URI uri) {\n         try {\n             return uri.toURL();\n         }\n-        catch (final MalformedURLException e) {\n+        catch (final MalformedURLException ex) {\n             return null;\n         }\n     }\n     \n-    private static FileLocator createFullyInitializedLocatorFromURL(final FileLocator src, final URL url) {\n-        final FileLocator.FileLocatorBuilder fileLocatorBuilder = fileLocator(src);\n-        if (src.getSourceURL() == null) {\n-            fileLocatorBuilder.sourceURL(url);\n+    private static FileLocator createFullyInitializedLocatorFromURL(final FileLocator fileLocator, final URL url) {\n+        final FileLocator.FileLocatorBuilder fileLocator2 = fileLocator(fileLocator);\n+        if (fileLocator.getSourceURL() == null) {\n+            fileLocator2.sourceURL(url);\n         }\n-        if (StringUtils.isBlank((CharSequence)src.getFileName())) {\n-            fileLocatorBuilder.fileName(getFileName(url));\n+        if (StringUtils.isBlank((CharSequence)fileLocator.getFileName())) {\n+            fileLocator2.fileName(getFileName(url));\n         }\n-        if (StringUtils.isBlank((CharSequence)src.getBasePath())) {\n-            fileLocatorBuilder.basePath(getBasePath(url));\n+        if (StringUtils.isBlank((CharSequence)fileLocator.getBasePath())) {\n+            fileLocator2.basePath(getBasePath(url));\n         }\n-        return fileLocatorBuilder.create();\n+        return fileLocator2.create();\n     }\n     \n     public static File fileFromURL(final URL url) {\n         return FileUtils.toFile(url);\n     }\n     \n     public static FileLocator.FileLocatorBuilder fileLocator() {\n         return fileLocator(null);\n     }\n     \n-    public static FileLocator.FileLocatorBuilder fileLocator(final FileLocator src) {\n-        return new FileLocator.FileLocatorBuilder(src);\n+    public static FileLocator.FileLocatorBuilder fileLocator(final FileLocator fileLocator) {\n+        return new FileLocator.FileLocatorBuilder(fileLocator);\n     }\n     \n     public static FileLocator fromMap(final Map<String, ?> map) {\n-        final FileLocator.FileLocatorBuilder builder = fileLocator();\n+        final FileLocator.FileLocatorBuilder fileLocator = fileLocator();\n         if (map != null) {\n-            builder.basePath((String)map.get(\"basePath\")).encoding((String)map.get(\"encoding\")).fileName((String)map.get(\"fileName\")).fileSystem((FileSystem)map.get(\"fileSystem\")).locationStrategy((FileLocationStrategy)map.get(\"locationStrategy\")).sourceURL((URL)map.get(\"sourceURL\"));\n+            fileLocator.basePath((String)map.get(\"basePath\")).encoding((String)map.get(\"encoding\")).fileName((String)map.get(\"fileName\")).fileSystem((FileSystem)map.get(\"fileSystem\")).locationStrategy((FileLocationStrategy)map.get(\"locationStrategy\")).sourceURL((URL)map.get(\"sourceURL\"));\n         }\n-        return builder.create();\n+        return fileLocator.create();\n     }\n     \n-    public static FileLocator fullyInitializedLocator(final FileLocator locator) {\n-        if (isFullyInitialized(locator)) {\n-            return locator;\n+    public static FileLocator fullyInitializedLocator(final FileLocator fileLocator) {\n+        if (isFullyInitialized(fileLocator)) {\n+            return fileLocator;\n         }\n-        final URL url = locate(locator);\n-        return (url != null) ? createFullyInitializedLocatorFromURL(locator, url) : null;\n+        final URL locate = locate(fileLocator);\n+        return (locate != null) ? createFullyInitializedLocatorFromURL(fileLocator, locate) : null;\n     }\n     \n     static String getBasePath(final URL url) {\n         if (url == null) {\n             return null;\n         }\n         String s = url.toString();\n@@ -122,113 +122,112 @@\n         }\n         if (s.endsWith(\"/\") || StringUtils.isEmpty((CharSequence)url.getPath())) {\n             return s;\n         }\n         return s.substring(0, s.lastIndexOf(\"/\") + 1);\n     }\n     \n-    static File getFile(final String basePath, final String fileName) {\n-        final File f = new File(fileName);\n-        if (f.isAbsolute()) {\n-            return f;\n+    static File getFile(final String spec, final String spec2) {\n+        final File file = new File(spec2);\n+        if (file.isAbsolute()) {\n+            return file;\n         }\n         URL url;\n         try {\n-            url = new URL(new URL(basePath), fileName);\n+            url = new URL(new URL(spec), spec2);\n         }\n-        catch (final MalformedURLException mex1) {\n+        catch (final MalformedURLException ex) {\n             try {\n-                url = new URL(fileName);\n+                url = new URL(spec2);\n             }\n-            catch (final MalformedURLException mex2) {\n+            catch (final MalformedURLException ex2) {\n                 url = null;\n             }\n         }\n         if (url != null) {\n             return fileFromURL(url);\n         }\n-        return constructFile(basePath, fileName);\n+        return constructFile(spec, spec2);\n     }\n     \n     static String getFileName(final URL url) {\n         if (url == null) {\n             return null;\n         }\n         final String path = url.getPath();\n         if (path.endsWith(\"/\") || StringUtils.isEmpty((CharSequence)path)) {\n             return null;\n         }\n         return path.substring(path.lastIndexOf(\"/\") + 1);\n     }\n     \n     private static FileLocationStrategy initDefaultLocationStrategy() {\n-        final FileLocationStrategy[] subStrategies = { (FileLocationStrategy)new ProvidedURLLocationStrategy(), (FileLocationStrategy)new FileSystemLocationStrategy(), (FileLocationStrategy)new AbsoluteNameLocationStrategy(), (FileLocationStrategy)new BasePathLocationStrategy(), (FileLocationStrategy)new HomeDirectoryLocationStrategy(true), (FileLocationStrategy)new HomeDirectoryLocationStrategy(false), (FileLocationStrategy)new ClasspathLocationStrategy() };\n-        return (FileLocationStrategy)new CombinedLocationStrategy((Collection)Arrays.asList(subStrategies));\n+        return (FileLocationStrategy)new CombinedLocationStrategy((Collection)Arrays.asList((FileLocationStrategy)new ProvidedURLLocationStrategy(), (FileLocationStrategy)new FileSystemLocationStrategy(), (FileLocationStrategy)new AbsoluteNameLocationStrategy(), (FileLocationStrategy)new BasePathLocationStrategy(), (FileLocationStrategy)new HomeDirectoryLocationStrategy(true), (FileLocationStrategy)new HomeDirectoryLocationStrategy(false), (FileLocationStrategy)new ClasspathLocationStrategy()));\n     }\n     \n-    public static boolean isFullyInitialized(final FileLocator locator) {\n-        return locator != null && locator.getBasePath() != null && locator.getFileName() != null && locator.getSourceURL() != null;\n+    public static boolean isFullyInitialized(final FileLocator fileLocator) {\n+        return fileLocator != null && fileLocator.getBasePath() != null && fileLocator.getFileName() != null && fileLocator.getSourceURL() != null;\n     }\n     \n-    public static boolean isLocationDefined(final FileLocator locator) {\n-        return locator != null && (locator.getFileName() != null || locator.getSourceURL() != null);\n+    public static boolean isLocationDefined(final FileLocator fileLocator) {\n+        return fileLocator != null && (fileLocator.getFileName() != null || fileLocator.getSourceURL() != null);\n     }\n     \n-    public static URL locate(final FileLocator locator) {\n-        if (locator == null) {\n+    public static URL locate(final FileLocator fileLocator) {\n+        if (fileLocator == null) {\n             return null;\n         }\n-        return obtainLocationStrategy(locator).locate(obtainFileSystem(locator), locator);\n+        return obtainLocationStrategy(fileLocator).locate(obtainFileSystem(fileLocator), fileLocator);\n     }\n     \n-    static URL locateFromClasspath(final String resourceName) {\n+    static URL locateFromClasspath(final String s) {\n         URL url = null;\n-        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n-        if (loader != null) {\n-            url = loader.getResource(resourceName);\n+        final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n+        if (contextClassLoader != null) {\n+            url = contextClassLoader.getResource(s);\n             if (url != null) {\n-                FileLocatorUtils.LOG.debug((Object)(\"Loading configuration from the context classpath (\" + resourceName + \")\"));\n+                FileLocatorUtils.LOG.debug((Object)(\"Loading configuration from the context classpath (\" + s + \")\"));\n             }\n         }\n         if (url == null) {\n-            url = ClassLoader.getSystemResource(resourceName);\n+            url = ClassLoader.getSystemResource(s);\n             if (url != null) {\n-                FileLocatorUtils.LOG.debug((Object)(\"Loading configuration from the system classpath (\" + resourceName + \")\"));\n+                FileLocatorUtils.LOG.debug((Object)(\"Loading configuration from the system classpath (\" + s + \")\"));\n             }\n         }\n         return url;\n     }\n     \n-    public static URL locateOrThrow(final FileLocator locator) throws ConfigurationException {\n-        final URL url = locate(locator);\n-        if (url == null) {\n-            throw new ConfigurationException(\"Could not locate: \" + locator);\n+    public static URL locateOrThrow(final FileLocator obj) throws ConfigurationException {\n+        final URL locate = locate(obj);\n+        if (locate == null) {\n+            throw new ConfigurationException(\"Could not locate: \" + obj);\n         }\n-        return url;\n+        return locate;\n     }\n     \n-    static FileSystem obtainFileSystem(final FileLocator locator) {\n-        return (locator != null) ? ((FileSystem)ObjectUtils.defaultIfNull((Object)locator.getFileSystem(), (Object)FileLocatorUtils.DEFAULT_FILE_SYSTEM)) : FileLocatorUtils.DEFAULT_FILE_SYSTEM;\n+    static FileSystem obtainFileSystem(final FileLocator fileLocator) {\n+        return (fileLocator != null) ? ((FileSystem)ObjectUtils.defaultIfNull((Object)fileLocator.getFileSystem(), (Object)FileLocatorUtils.DEFAULT_FILE_SYSTEM)) : FileLocatorUtils.DEFAULT_FILE_SYSTEM;\n     }\n     \n-    static FileLocationStrategy obtainLocationStrategy(final FileLocator locator) {\n-        return (locator != null) ? ((FileLocationStrategy)ObjectUtils.defaultIfNull((Object)locator.getLocationStrategy(), (Object)FileLocatorUtils.DEFAULT_LOCATION_STRATEGY)) : FileLocatorUtils.DEFAULT_LOCATION_STRATEGY;\n+    static FileLocationStrategy obtainLocationStrategy(final FileLocator fileLocator) {\n+        return (fileLocator != null) ? ((FileLocationStrategy)ObjectUtils.defaultIfNull((Object)fileLocator.getLocationStrategy(), (Object)FileLocatorUtils.DEFAULT_LOCATION_STRATEGY)) : FileLocatorUtils.DEFAULT_LOCATION_STRATEGY;\n     }\n     \n-    public static void put(final FileLocator locator, final Map<String, Object> map) {\n+    public static void put(final FileLocator fileLocator, final Map<String, Object> map) {\n         if (map == null) {\n             throw new IllegalArgumentException(\"Map must not be null!\");\n         }\n-        if (locator != null) {\n-            map.put(\"basePath\", locator.getBasePath());\n-            map.put(\"encoding\", locator.getEncoding());\n-            map.put(\"fileName\", locator.getFileName());\n-            map.put(\"fileSystem\", locator.getFileSystem());\n-            map.put(\"sourceURL\", locator.getSourceURL());\n-            map.put(\"locationStrategy\", locator.getLocationStrategy());\n+        if (fileLocator != null) {\n+            map.put(\"basePath\", fileLocator.getBasePath());\n+            map.put(\"encoding\", fileLocator.getEncoding());\n+            map.put(\"fileName\", fileLocator.getFileName());\n+            map.put(\"fileSystem\", fileLocator.getFileSystem());\n+            map.put(\"sourceURL\", fileLocator.getSourceURL());\n+            map.put(\"locationStrategy\", fileLocator.getLocationStrategy());\n         }\n     }\n     \n     static URL toURL(final File file) throws MalformedURLException {\n         return file.toURI().toURL();\n     }\n     \n"}]}
