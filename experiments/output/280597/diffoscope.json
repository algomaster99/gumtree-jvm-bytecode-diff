{"diffoscope-json-version": 1, "source1": "first/ImmutableNode$Builder.class", "source2": "second/ImmutableNode$Builder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,10 +1,11 @@\n \n package org.apache.commons.configuration2.tree;\n \n+import java.util.function.Consumer;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.LinkedList;\n import java.util.Collections;\n import java.util.Collection;\n import java.util.Map;\n import java.util.List;\n@@ -18,74 +19,74 @@\n     private String name;\n     private Object value;\n     \n     public Builder() {\n         this(null, null);\n     }\n     \n-    public Builder(final int childCount) {\n+    public Builder(final int n) {\n         this();\n-        this.initChildrenCollection(childCount);\n+        this.initChildrenCollection(n);\n     }\n     \n-    private Builder(final List<ImmutableNode> dirChildren, final Map<String, Object> dirAttrs) {\n-        this.directChildren = dirChildren;\n-        this.directAttributes = dirAttrs;\n+    private Builder(final List<ImmutableNode> directChildren, final Map<String, Object> directAttributes) {\n+        this.directChildren = directChildren;\n+        this.directAttributes = directAttributes;\n     }\n     \n-    private Builder(final int childCount, final Map<String, Object> dirAttrs) {\n-        this(null, dirAttrs);\n-        this.initChildrenCollection(childCount);\n+    private Builder(final int n, final Map<String, Object> map) {\n+        this(null, map);\n+        this.initChildrenCollection(n);\n     }\n     \n-    public Builder name(final String n) {\n-        this.name = n;\n+    public Builder name(final String name) {\n+        this.name = name;\n         return this;\n     }\n     \n-    public Builder value(final Object v) {\n-        this.value = v;\n+    public Builder value(final Object value) {\n+        this.value = value;\n         return this;\n     }\n     \n-    public Builder addChild(final ImmutableNode c) {\n-        if (c != null) {\n+    public Builder addChild(final ImmutableNode immutableNode) {\n+        if (immutableNode != null) {\n             this.ensureChildrenExist();\n-            this.children.add(c);\n+            this.children.add(immutableNode);\n         }\n         return this;\n     }\n     \n-    public Builder addChildren(final Collection<? extends ImmutableNode> children) {\n-        if (children != null) {\n+    public Builder addChildren(final Collection<? extends ImmutableNode> collection) {\n+        if (collection != null) {\n             this.ensureChildrenExist();\n-            this.children.addAll(filterNull((Collection)children));\n+            this.children.addAll(filterNull((Collection)collection));\n         }\n         return this;\n     }\n     \n-    public Builder addAttribute(final String name, final Object value) {\n+    public Builder addAttribute(final String s, final Object o) {\n         this.ensureAttributesExist();\n-        this.attributes.put(name, value);\n+        this.attributes.put(s, o);\n         return this;\n     }\n     \n-    public Builder addAttributes(final Map<String, ?> attrs) {\n-        if (attrs != null) {\n+    public Builder addAttributes(final Map<String, ?> map) {\n+        if (map != null) {\n             this.ensureAttributesExist();\n-            this.attributes.putAll(attrs);\n+            this.attributes.putAll(map);\n         }\n         return this;\n     }\n     \n     public ImmutableNode create() {\n-        final ImmutableNode newNode = new ImmutableNode(this, (ImmutableNode.ImmutableNode$1)null);\n+        final ImmutableNode immutableNode = new ImmutableNode(this, (ImmutableNode.ImmutableNode$1)null);\n         this.children = null;\n         this.attributes = null;\n-        return newNode;\n+        return immutableNode;\n     }\n     \n     List<ImmutableNode> createChildren() {\n         if (this.directChildren != null) {\n             return this.directChildren;\n         }\n         if (this.children != null) {\n@@ -112,19 +113,19 @@\n     \n     private void ensureAttributesExist() {\n         if (this.attributes == null) {\n             this.attributes = new HashMap();\n         }\n     }\n     \n-    private void initChildrenCollection(final int childCount) {\n-        if (childCount > 0) {\n-            this.children = new ArrayList(childCount);\n+    private void initChildrenCollection(final int initialCapacity) {\n+        if (initialCapacity > 0) {\n+            this.children = new ArrayList(initialCapacity);\n         }\n     }\n     \n-    private static Collection<? extends ImmutableNode> filterNull(final Collection<? extends ImmutableNode> children) {\n-        final List<ImmutableNode> result = new ArrayList<ImmutableNode>(children.size());\n-        children.forEach(Builder::lambda$filterNull$0);\n-        return result;\n+    private static Collection<? extends ImmutableNode> filterNull(final Collection<? extends ImmutableNode> collection) {\n+        final ArrayList list = new ArrayList<ImmutableNode>(collection.size());\n+        collection.forEach((Consumer)Builder::lambda$filterNull$0);\n+        return (Collection<? extends ImmutableNode>)list;\n     }\n }\n"}]}
