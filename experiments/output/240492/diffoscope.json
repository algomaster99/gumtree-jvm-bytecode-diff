{"diffoscope-json-version": 1, "source1": "first/DefaultSocketFactory.class", "source2": "second/DefaultSocketFactory.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,66 +15,66 @@\n {\n     private final Proxy connProxy;\n     \n     public DefaultSocketFactory() {\n         this(null);\n     }\n     \n-    public DefaultSocketFactory(final Proxy proxy) {\n-        this.connProxy = proxy;\n+    public DefaultSocketFactory(final Proxy connProxy) {\n+        this.connProxy = connProxy;\n     }\n     \n     @Override\n     public Socket createSocket() throws IOException {\n         if (this.connProxy != null) {\n             return new Socket(this.connProxy);\n         }\n         return new Socket();\n     }\n     \n     @Override\n-    public Socket createSocket(final String host, final int port) throws UnknownHostException, IOException {\n+    public Socket createSocket(final String s, final int n) throws UnknownHostException, IOException {\n         if (this.connProxy != null) {\n-            final Socket s = new Socket(this.connProxy);\n-            s.connect(new InetSocketAddress(host, port));\n-            return s;\n+            final Socket socket = new Socket(this.connProxy);\n+            socket.connect(new InetSocketAddress(s, n));\n+            return socket;\n         }\n-        return new Socket(host, port);\n+        return new Socket(s, n);\n     }\n     \n     @Override\n-    public Socket createSocket(final InetAddress address, final int port) throws IOException {\n+    public Socket createSocket(final InetAddress inetAddress, final int n) throws IOException {\n         if (this.connProxy != null) {\n-            final Socket s = new Socket(this.connProxy);\n-            s.connect(new InetSocketAddress(address, port));\n-            return s;\n+            final Socket socket = new Socket(this.connProxy);\n+            socket.connect(new InetSocketAddress(inetAddress, n));\n+            return socket;\n         }\n-        return new Socket(address, port);\n+        return new Socket(inetAddress, n);\n     }\n     \n     @Override\n-    public Socket createSocket(final String host, final int port, final InetAddress localAddr, final int localPort) throws UnknownHostException, IOException {\n+    public Socket createSocket(final String s, final int n, final InetAddress inetAddress, final int n2) throws UnknownHostException, IOException {\n         if (this.connProxy != null) {\n-            final Socket s = new Socket(this.connProxy);\n-            s.bind(new InetSocketAddress(localAddr, localPort));\n-            s.connect(new InetSocketAddress(host, port));\n-            return s;\n+            final Socket socket = new Socket(this.connProxy);\n+            socket.bind(new InetSocketAddress(inetAddress, n2));\n+            socket.connect(new InetSocketAddress(s, n));\n+            return socket;\n         }\n-        return new Socket(host, port, localAddr, localPort);\n+        return new Socket(s, n, inetAddress, n2);\n     }\n     \n     @Override\n-    public Socket createSocket(final InetAddress address, final int port, final InetAddress localAddr, final int localPort) throws IOException {\n+    public Socket createSocket(final InetAddress inetAddress, final int n, final InetAddress inetAddress2, final int n2) throws IOException {\n         if (this.connProxy != null) {\n-            final Socket s = new Socket(this.connProxy);\n-            s.bind(new InetSocketAddress(localAddr, localPort));\n-            s.connect(new InetSocketAddress(address, port));\n-            return s;\n+            final Socket socket = new Socket(this.connProxy);\n+            socket.bind(new InetSocketAddress(inetAddress2, n2));\n+            socket.connect(new InetSocketAddress(inetAddress, n));\n+            return socket;\n         }\n-        return new Socket(address, port, localAddr, localPort);\n+        return new Socket(inetAddress, n, inetAddress2, n2);\n     }\n     \n     public ServerSocket createServerSocket(final int port) throws IOException {\n         return new ServerSocket(port);\n     }\n     \n     public ServerSocket createServerSocket(final int port, final int backlog) throws IOException {\n"}]}
