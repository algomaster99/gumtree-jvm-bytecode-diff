{"diffoscope-json-version": 1, "source1": "first/JavadocMissingLeadingAsteriskCheck.class", "source2": "second/JavadocMissingLeadingAsteriskCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,44 +21,44 @@\n     }\n     \n     public int[] getDefaultJavadocTokens() {\n         return this.getRequiredJavadocTokens();\n     }\n     \n     public void visitJavadocToken(final DetailNode detailNode) {\n-        DetailNode nextSibling;\n-        for (nextSibling = getNextNode(detailNode); TokenUtil.isOfType(nextSibling.getType(), new int[] { 10068, 4 }); nextSibling = getNextNode(nextSibling)) {}\n-        if (!isLeadingAsterisk(nextSibling) && !isLastLine(nextSibling)) {\n-            this.log(nextSibling.getLineNumber(), \"javadoc.missing.asterisk\", new Object[0]);\n+        DetailNode detailNode2;\n+        for (detailNode2 = getNextNode(detailNode); TokenUtil.isOfType(detailNode2.getType(), new int[] { 10068, 4 }); detailNode2 = getNextNode(detailNode2)) {}\n+        if (!isLeadingAsterisk(detailNode2) && !isLastLine(detailNode2)) {\n+            this.log(detailNode2.getLineNumber(), \"javadoc.missing.asterisk\", new Object[0]);\n         }\n     }\n     \n     private static DetailNode getNextNode(final DetailNode detailNode) {\n-        DetailNode node = JavadocUtil.getFirstChild(detailNode);\n-        if (node == null) {\n-            node = JavadocUtil.getNextSibling(detailNode);\n-            if (node == null) {\n+        DetailNode detailNode2 = JavadocUtil.getFirstChild(detailNode);\n+        if (detailNode2 == null) {\n+            detailNode2 = JavadocUtil.getNextSibling(detailNode);\n+            if (detailNode2 == null) {\n                 DetailNode parent = detailNode;\n                 do {\n                     parent = parent.getParent();\n-                    node = JavadocUtil.getNextSibling(parent);\n-                } while (node == null);\n+                    detailNode2 = JavadocUtil.getNextSibling(parent);\n+                } while (detailNode2 == null);\n             }\n         }\n-        return node;\n+        return detailNode2;\n     }\n     \n     private static boolean isLeadingAsterisk(final DetailNode detailNode) {\n         return detailNode.getType() == 1;\n     }\n     \n     private static boolean isLastLine(final DetailNode detailNode) {\n-        DetailNode node;\n+        DetailNode nextNode;\n         if (CommonUtil.isBlank(detailNode.getText())) {\n-            node = getNextNode(detailNode);\n+            nextNode = getNextNode(detailNode);\n         }\n         else {\n-            node = detailNode;\n+            nextNode = detailNode;\n         }\n-        return node.getType() == -1;\n+        return nextNode.getType() == -1;\n     }\n }\n"}]}
