{"diffoscope-json-version": 1, "source1": "first/SerializationUtils$ClassLoaderAwareObjectInputStream.class", "source2": "second/SerializationUtils$ClassLoaderAwareObjectInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,29 +15,29 @@\n     \n     ClassLoaderAwareObjectInputStream(final InputStream in, final ClassLoader classLoader) throws IOException {\n         super(in);\n         this.classLoader = classLoader;\n     }\n     \n     @Override\n-    protected Class<?> resolveClass(final ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n-        final String name = desc.getName();\n+    protected Class<?> resolveClass(final ObjectStreamClass objectStreamClass) throws IOException, ClassNotFoundException {\n+        final String name = objectStreamClass.getName();\n         try {\n             return Class.forName(name, false, this.classLoader);\n         }\n         catch (final ClassNotFoundException ex) {\n             try {\n                 return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n             }\n-            catch (final ClassNotFoundException cnfe) {\n-                final Class<?> cls = (Class<?>)ClassLoaderAwareObjectInputStream.primitiveTypes.get(name);\n-                if (cls != null) {\n-                    return cls;\n+            catch (final ClassNotFoundException ex2) {\n+                final Class clazz = (Class)ClassLoaderAwareObjectInputStream.primitiveTypes.get(name);\n+                if (clazz != null) {\n+                    return clazz;\n                 }\n-                throw cnfe;\n+                throw ex2;\n             }\n         }\n     }\n     \n     static {\n         (ClassLoaderAwareObjectInputStream.primitiveTypes = new HashMap()).put(\"byte\", Byte.TYPE);\n         ClassLoaderAwareObjectInputStream.primitiveTypes.put(\"short\", Short.TYPE);\n"}]}
