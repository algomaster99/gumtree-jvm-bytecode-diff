{"diffoscope-json-version": 1, "source1": "first/SuppressWarningsHolder.class", "source2": "second/SuppressWarningsHolder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,19 +1,19 @@\n \n package com.puppycrawl.tools.checkstyle.checks;\n \n-import java.util.function.Supplier;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n import java.util.Optional;\n import java.util.Collections;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import java.util.Iterator;\n import com.puppycrawl.tools.checkstyle.api.AuditEvent;\n import java.util.Locale;\n+import java.util.function.Supplier;\n+import java.util.LinkedList;\n+import java.util.HashMap;\n import java.util.regex.Pattern;\n import java.util.List;\n import java.util.Map;\n import com.puppycrawl.tools.checkstyle.StatelessCheck;\n import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n \n @StatelessCheck\n@@ -24,14 +24,21 @@\n     private static final String CHECK_SUFFIX = \"check\";\n     private static final String ALL_WARNING_MATCHING_ID = \"all\";\n     private static final Map<String, String> CHECK_ALIAS_MAP;\n     private static final ThreadLocal<List<SuppressWarningsHolder.Entry>> ENTRIES;\n     private static final Pattern WHITESPACE;\n     private static final Pattern NEWLINE;\n     \n+    static {\n+        CHECK_ALIAS_MAP = new HashMap<String, String>();\n+        ENTRIES = ThreadLocal.withInitial((Supplier<? extends List<SuppressWarningsHolder.Entry>>)LinkedList::new);\n+        WHITESPACE = Pattern.compile(\"\\\\s+\");\n+        NEWLINE = Pattern.compile(\"\\\\n\");\n+    }\n+    \n     public static String getDefaultAlias(final String sourceName) {\n         int endIndex = sourceName.length();\n         final String sourceNameLower = sourceName.toLowerCase(Locale.ENGLISH);\n         if (sourceNameLower.endsWith(\"check\")) {\n             endIndex -= \"check\".length();\n         }\n         final int startIndex = sourceNameLower.lastIndexOf(46) + 1;\n@@ -108,15 +115,15 @@\n     \n     public void visitToken(final DetailAST ast) {\n         String identifier = getIdentifier(getNthChild(ast, 1));\n         if (identifier.startsWith(\"java.lang.\")) {\n             identifier = identifier.substring(\"java.lang.\".length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n-            getAnnotationTarget(ast).ifPresent(targetAST -> addSuppressions(getAllAnnotationValues(ast), targetAST));\n+            getAnnotationTarget(ast).ifPresent(targetAST -> addSuppressions(getAllAnnotationValues(ast2), targetAST));\n         }\n     }\n     \n     private static void addSuppressions(final List<String> values, final DetailAST targetAST) {\n         final int firstLine = targetAST.getLineNo();\n         final int firstColumn = targetAST.getColumnNo();\n         final DetailAST nextAST = targetAST.getNextSibling();\n@@ -209,15 +216,15 @@\n             throw new IllegalArgumentException(\"Identifier AST expected, but get null.\");\n         }\n         String identifier;\n         if (ast.getType() == 58) {\n             identifier = ast.getText();\n         }\n         else {\n-            identifier = getIdentifier(ast.getFirstChild()) + \".\" + getIdentifier(ast.getLastChild());\n+            identifier = String.valueOf(getIdentifier(ast.getFirstChild())) + \".\" + getIdentifier(ast.getLastChild());\n         }\n         return identifier;\n     }\n     \n     private static String getStringExpr(final DetailAST ast) {\n         final DetailAST firstChild = ast.getFirstChild();\n         String expr = \"\";\n@@ -277,15 +284,8 @@\n         return SuppressWarningsHolder.WHITESPACE.matcher(contentWithNoPrecedingNewline).replaceAll(\"\");\n     }\n     \n     public void destroy() {\n         super.destroy();\n         SuppressWarningsHolder.ENTRIES.remove();\n     }\n-    \n-    static {\n-        CHECK_ALIAS_MAP = new HashMap<String, String>();\n-        ENTRIES = ThreadLocal.withInitial((Supplier<? extends List<SuppressWarningsHolder.Entry>>)LinkedList::new);\n-        WHITESPACE = Pattern.compile(\"\\\\s+\");\n-        NEWLINE = Pattern.compile(\"\\\\n\");\n-    }\n }\n"}]}
