{"diffoscope-json-version": 1, "source1": "first/XXHash32.class", "source2": "second/XXHash32.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -37,94 +37,92 @@\n         this.initializeState();\n         this.totalLen = 0;\n         this.pos = 0;\n         this.stateUpdated = false;\n     }\n     \n     @Override\n-    public void update(final int b) {\n-        this.oneByte[0] = (byte)(b & 0xFF);\n+    public void update(final int n) {\n+        this.oneByte[0] = (byte)(n & 0xFF);\n         this.update(this.oneByte, 0, 1);\n     }\n     \n     @Override\n-    public void update(final byte[] b, int off, final int len) {\n-        if (len <= 0) {\n+    public void update(final byte[] array, int i, final int n) {\n+        if (n <= 0) {\n             return;\n         }\n-        this.totalLen += len;\n-        final int end = off + len;\n-        if (this.pos + len - 16 < 0) {\n-            System.arraycopy(b, off, this.buffer, this.pos, len);\n-            this.pos += len;\n+        this.totalLen += n;\n+        final int n2 = i + n;\n+        if (this.pos + n - 16 < 0) {\n+            System.arraycopy(array, i, this.buffer, this.pos, n);\n+            this.pos += n;\n             return;\n         }\n         if (this.pos > 0) {\n-            final int size = 16 - this.pos;\n-            System.arraycopy(b, off, this.buffer, this.pos, size);\n+            final int n3 = 16 - this.pos;\n+            System.arraycopy(array, i, this.buffer, this.pos, n3);\n             this.process(this.buffer, 0);\n-            off += size;\n+            i += n3;\n         }\n-        for (int limit = end - 16; off <= limit; off += 16) {\n-            this.process(b, off);\n-        }\n-        if (off < end) {\n-            this.pos = end - off;\n-            System.arraycopy(b, off, this.buffer, 0, this.pos);\n+        while (i <= n2 - 16) {\n+            this.process(array, i);\n+            i += 16;\n+        }\n+        if (i < n2) {\n+            this.pos = n2 - i;\n+            System.arraycopy(array, i, this.buffer, 0, this.pos);\n         }\n         else {\n             this.pos = 0;\n         }\n     }\n     \n     @Override\n     public long getValue() {\n-        int hash;\n+        int n;\n         if (this.stateUpdated) {\n-            hash = Integer.rotateLeft(this.state[0], 1) + Integer.rotateLeft(this.state[1], 7) + Integer.rotateLeft(this.state[2], 12) + Integer.rotateLeft(this.state[3], 18);\n+            n = Integer.rotateLeft(this.state[0], 1) + Integer.rotateLeft(this.state[1], 7) + Integer.rotateLeft(this.state[2], 12) + Integer.rotateLeft(this.state[3], 18);\n         }\n         else {\n-            hash = this.state[2] + 374761393;\n+            n = this.state[2] + 374761393;\n+        }\n+        int n2 = n + this.totalLen;\n+        int i;\n+        for (i = 0; i <= this.pos - 4; i += 4) {\n+            n2 = Integer.rotateLeft(n2 + getInt(this.buffer, i) * -1028477379, 17) * 668265263;\n+        }\n+        while (i < this.pos) {\n+            n2 = Integer.rotateLeft(n2 + (this.buffer[i++] & 0xFF) * 374761393, 11) * -1640531535;\n         }\n-        hash += this.totalLen;\n-        int idx = 0;\n-        for (int limit = this.pos - 4; idx <= limit; idx += 4) {\n-            hash = Integer.rotateLeft(hash + getInt(this.buffer, idx) * -1028477379, 17) * 668265263;\n-        }\n-        while (idx < this.pos) {\n-            hash = Integer.rotateLeft(hash + (this.buffer[idx++] & 0xFF) * 374761393, 11) * -1640531535;\n-        }\n-        hash ^= hash >>> 15;\n-        hash *= -2048144777;\n-        hash ^= hash >>> 13;\n-        hash *= -1028477379;\n-        hash ^= hash >>> 16;\n-        return (long)hash & 0xFFFFFFFFL;\n+        final int n3 = (n2 ^ n2 >>> 15) * -2048144777;\n+        final int n4 = (n3 ^ n3 >>> 13) * -1028477379;\n+        return (long)(n4 ^ n4 >>> 16) & 0xFFFFFFFFL;\n     }\n     \n-    private static int getInt(final byte[] buffer, final int idx) {\n-        return (buffer[idx] & 0xFF) | (buffer[idx + 1] & 0xFF) << 8 | (buffer[idx + 2] & 0xFF) << 16 | (buffer[idx + 3] & 0xFF) << 24;\n+    private static int getInt(final byte[] array, final int n) {\n+        return (array[n] & 0xFF) | (array[n + 1] & 0xFF) << 8 | (array[n + 2] & 0xFF) << 16 | (array[n + 3] & 0xFF) << 24;\n     }\n     \n     private void initializeState() {\n         this.state[0] = this.seed - 1640531535 - 2048144777;\n         this.state[1] = this.seed - 2048144777;\n         this.state[2] = this.seed;\n         this.state[3] = this.seed + 1640531535;\n     }\n     \n-    private void process(final byte[] b, final int offset) {\n-        int s0 = this.state[0];\n-        int s2 = this.state[1];\n-        int s3 = this.state[2];\n-        int s4 = this.state[3];\n-        s0 = Integer.rotateLeft(s0 + getInt(b, offset) * -2048144777, 13) * -1640531535;\n-        s2 = Integer.rotateLeft(s2 + getInt(b, offset + 4) * -2048144777, 13) * -1640531535;\n-        s3 = Integer.rotateLeft(s3 + getInt(b, offset + 8) * -2048144777, 13) * -1640531535;\n-        s4 = Integer.rotateLeft(s4 + getInt(b, offset + 12) * -2048144777, 13) * -1640531535;\n-        this.state[0] = s0;\n-        this.state[1] = s2;\n-        this.state[2] = s3;\n-        this.state[3] = s4;\n+    private void process(final byte[] array, final int n) {\n+        final int n2 = this.state[0];\n+        final int n3 = this.state[1];\n+        final int n4 = this.state[2];\n+        final int n5 = this.state[3];\n+        final int n6 = Integer.rotateLeft(n2 + getInt(array, n) * -2048144777, 13) * -1640531535;\n+        final int n7 = Integer.rotateLeft(n3 + getInt(array, n + 4) * -2048144777, 13) * -1640531535;\n+        final int n8 = Integer.rotateLeft(n4 + getInt(array, n + 8) * -2048144777, 13) * -1640531535;\n+        final int n9 = Integer.rotateLeft(n5 + getInt(array, n + 12) * -2048144777, 13) * -1640531535;\n+        this.state[0] = n6;\n+        this.state[1] = n7;\n+        this.state[2] = n8;\n+        this.state[3] = n9;\n         this.stateUpdated = true;\n     }\n }\n"}]}
