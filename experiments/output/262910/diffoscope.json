{"diffoscope-json-version": 1, "source1": "first/RegExUtils.class", "source2": "second/RegExUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,62 +1,62 @@\n \n package org.apache.commons.lang3;\n \n import java.util.regex.Pattern;\n \n public class RegExUtils\n {\n-    public static String removeAll(final String text, final Pattern regex) {\n-        return replaceAll(text, regex, \"\");\n+    public static String removeAll(final String s, final Pattern pattern) {\n+        return replaceAll(s, pattern, \"\");\n     }\n     \n-    public static String removeAll(final String text, final String regex) {\n-        return replaceAll(text, regex, \"\");\n+    public static String removeAll(final String s, final String s2) {\n+        return replaceAll(s, s2, \"\");\n     }\n     \n-    public static String removeFirst(final String text, final Pattern regex) {\n-        return replaceFirst(text, regex, \"\");\n+    public static String removeFirst(final String s, final Pattern pattern) {\n+        return replaceFirst(s, pattern, \"\");\n     }\n     \n-    public static String removeFirst(final String text, final String regex) {\n-        return replaceFirst(text, regex, \"\");\n+    public static String removeFirst(final String s, final String s2) {\n+        return replaceFirst(s, s2, \"\");\n     }\n     \n-    public static String removePattern(final String text, final String regex) {\n-        return replacePattern(text, regex, \"\");\n+    public static String removePattern(final String s, final String s2) {\n+        return replacePattern(s, s2, \"\");\n     }\n     \n-    public static String replaceAll(final String text, final Pattern regex, final String replacement) {\n-        if (text == null || regex == null || replacement == null) {\n-            return text;\n+    public static String replaceAll(final String input, final Pattern pattern, final String replacement) {\n+        if (input == null || pattern == null || replacement == null) {\n+            return input;\n         }\n-        return regex.matcher(text).replaceAll(replacement);\n+        return pattern.matcher(input).replaceAll(replacement);\n     }\n     \n-    public static String replaceAll(final String text, final String regex, final String replacement) {\n-        if (text == null || regex == null || replacement == null) {\n-            return text;\n+    public static String replaceAll(final String s, final String regex, final String replacement) {\n+        if (s == null || regex == null || replacement == null) {\n+            return s;\n         }\n-        return text.replaceAll(regex, replacement);\n+        return s.replaceAll(regex, replacement);\n     }\n     \n-    public static String replaceFirst(final String text, final Pattern regex, final String replacement) {\n-        if (text == null || regex == null || replacement == null) {\n-            return text;\n+    public static String replaceFirst(final String input, final Pattern pattern, final String replacement) {\n+        if (input == null || pattern == null || replacement == null) {\n+            return input;\n         }\n-        return regex.matcher(text).replaceFirst(replacement);\n+        return pattern.matcher(input).replaceFirst(replacement);\n     }\n     \n-    public static String replaceFirst(final String text, final String regex, final String replacement) {\n-        if (text == null || regex == null || replacement == null) {\n-            return text;\n+    public static String replaceFirst(final String s, final String regex, final String replacement) {\n+        if (s == null || regex == null || replacement == null) {\n+            return s;\n         }\n-        return text.replaceFirst(regex, replacement);\n+        return s.replaceFirst(regex, replacement);\n     }\n     \n-    public static String replacePattern(final String text, final String regex, final String replacement) {\n-        if (text == null || regex == null || replacement == null) {\n-            return text;\n+    public static String replacePattern(final String input, final String regex, final String replacement) {\n+        if (input == null || regex == null || replacement == null) {\n+            return input;\n         }\n-        return Pattern.compile(regex, 32).matcher(text).replaceAll(replacement);\n+        return Pattern.compile(regex, 32).matcher(input).replaceAll(replacement);\n     }\n }\n"}]}
