{"diffoscope-json-version": 1, "source1": "first/CustomImportOrderCheck.class", "source2": "second/CustomImportOrderCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -36,14 +36,18 @@\n     private Pattern standardPackageRegExp;\n     private Pattern thirdPartyPackageRegExp;\n     private Pattern specialImportsRegExp;\n     private boolean separateLineBetweenGroups;\n     private boolean sortImportsInGroupAlphabetically;\n     private int samePackageMatchingDepth;\n     \n+    static {\n+        GROUP_SEPARATOR_PATTERN = Pattern.compile(\"\\\\s*###\\\\s*\");\n+    }\n+    \n     public CustomImportOrderCheck() {\n         this.customOrderRules = new ArrayList<String>();\n         this.importToGroupList = new ArrayList<CustomImportOrderCheck.ImportDetails>();\n         this.samePackageDomainsRegExp = \"\";\n         this.standardPackageRegExp = Pattern.compile(\"^(java|javax)\\\\.\");\n         this.thirdPartyPackageRegExp = Pattern.compile(\".*\");\n         this.specialImportsRegExp = Pattern.compile(\"^$\");\n@@ -68,15 +72,17 @@\n     \n     public final void setSortImportsInGroupAlphabetically(final boolean value) {\n         this.sortImportsInGroupAlphabetically = value;\n     }\n     \n     public final void setCustomImportOrderRules(final String inputCustomImportOrder) {\n         if (!\"\".equals(inputCustomImportOrder)) {\n-            for (final String currentState : CustomImportOrderCheck.GROUP_SEPARATOR_PATTERN.split(inputCustomImportOrder)) {\n+            String[] split;\n+            for (int length = (split = CustomImportOrderCheck.GROUP_SEPARATOR_PATTERN.split(inputCustomImportOrder)).length, i = 0; i < length; ++i) {\n+                final String currentState = split[i];\n                 this.addRulesToList(currentState);\n             }\n             this.customOrderRules.add(\"NOT_ASSIGNED_TO_ANY_GROUP\");\n         }\n     }\n     \n     public int[] getDefaultTokens() {\n@@ -311,12 +317,8 @@\n         final StringBuilder builder = new StringBuilder(256);\n         final StringTokenizer tokens = new StringTokenizer(packageFullPath, \".\");\n         for (int count = firstPackageDomainsCount; count > 0 && tokens.hasMoreTokens(); --count) {\n             builder.append(tokens.nextToken());\n         }\n         return builder.toString();\n     }\n-    \n-    static {\n-        GROUP_SEPARATOR_PATTERN = Pattern.compile(\"\\\\s*###\\\\s*\");\n-    }\n }\n"}]}
