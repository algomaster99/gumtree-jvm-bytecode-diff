{"diffoscope-json-version": 1, "source1": "first/GzipCompressorOutputStream.class", "source2": "second/GzipCompressorOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,245 +1,245 @@\n-  SHA-256 checksum 450f2adab91d1da404d4f57960c754829c7327d1d70102790a6d15d98bb0b5d8\n+  SHA-256 checksum c166480e40488ed55d28ea2a2d7f7deaa4fdb272eb9dd35805e3319ccf54f139\n   Compiled from \"GzipCompressorOutputStream.java\"\n public class org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream extends org.apache.commons.compress.compressors.CompressorOutputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #54                         // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n-  super_class: #66                        // org/apache/commons/compress/compressors/CompressorOutputStream\n+  this_class: #8                          // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n+  super_class: #13                        // org/apache/commons/compress/compressors/CompressorOutputStream\n   interfaces: 0, fields: 7, methods: 12, attributes: 1\n Constant pool:\n-    #1 = Class              #109          // org/apache/commons/compress/compressors/gzip/GzipParameters\n-    #2 = Methodref          #1.#110       // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n-    #3 = Methodref          #54.#111      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-    #4 = Methodref          #66.#110      // org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n-    #5 = Class              #112          // java/util/zip/CRC32\n-    #6 = Methodref          #5.#110       // java/util/zip/CRC32.\"<init>\":()V\n-    #7 = Fieldref           #54.#113      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.crc:Ljava/util/zip/CRC32;\n-    #8 = Fieldref           #54.#114      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.out:Ljava/io/OutputStream;\n-    #9 = Class              #115          // java/util/zip/Deflater\n-   #10 = Methodref          #1.#116       // org/apache/commons/compress/compressors/gzip/GzipParameters.getCompressionLevel:()I\n-   #11 = Methodref          #9.#117       // java/util/zip/Deflater.\"<init>\":(IZ)V\n-   #12 = Fieldref           #54.#118      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflater:Ljava/util/zip/Deflater;\n-   #13 = Methodref          #1.#119       // org/apache/commons/compress/compressors/gzip/GzipParameters.getDeflateStrategy:()I\n-   #14 = Methodref          #9.#120       // java/util/zip/Deflater.setStrategy:(I)V\n-   #15 = Methodref          #1.#121       // org/apache/commons/compress/compressors/gzip/GzipParameters.getBufferSize:()I\n-   #16 = Fieldref           #54.#122      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflateBuffer:[B\n-   #17 = Methodref          #54.#123      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-   #18 = Fieldref           #54.#124      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.closed:Z\n-   #19 = Methodref          #54.#125      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.finish:()V\n-   #20 = Methodref          #9.#126       // java/util/zip/Deflater.end:()V\n-   #21 = Methodref          #127.#128     // java/io/OutputStream.close:()V\n-   #22 = Methodref          #9.#129       // java/util/zip/Deflater.deflate:([BII)I\n-   #23 = Methodref          #127.#130     // java/io/OutputStream.write:([BII)V\n-   #24 = Methodref          #9.#131       // java/util/zip/Deflater.finished:()Z\n-   #25 = Methodref          #9.#125       // java/util/zip/Deflater.finish:()V\n-   #26 = Methodref          #54.#132      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflate:()V\n-   #27 = Methodref          #54.#133      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.writeTrailer:()V\n-   #28 = Methodref          #127.#134     // java/io/OutputStream.flush:()V\n-   #29 = Fieldref           #135.#136     // org/apache/commons/compress/compressors/gzip/GzipUtils.GZIP_ENCODING:Ljava/nio/charset/Charset;\n-   #30 = Methodref          #137.#138     // java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n-   #31 = Methodref          #139.#140     // java/nio/charset/CharsetEncoder.canEncode:(Ljava/lang/CharSequence;)Z\n-   #32 = Methodref          #104.#141     // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-   #33 = Class              #142          // java/net/URI\n-   #34 = Methodref          #33.#143      // java/net/URI.\"<init>\":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\n-   #35 = Methodref          #33.#144      // java/net/URI.toASCIIString:()Ljava/lang/String;\n-   #36 = Fieldref           #145.#146     // java/nio/charset/StandardCharsets.US_ASCII:Ljava/nio/charset/Charset;\n-   #37 = Class              #147          // java/net/URISyntaxException\n-   #38 = Class              #148          // java/io/IOException\n-   #39 = Methodref          #38.#149      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #40 = Methodref          #54.#130      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.write:([BII)V\n-   #41 = String             #150          // Cannot write more data, the end of the compressed data stream has been reached\n-   #42 = Methodref          #38.#151      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #43 = Methodref          #9.#152       // java/util/zip/Deflater.setInput:([BII)V\n-   #44 = Methodref          #9.#153       // java/util/zip/Deflater.needsInput:()Z\n-   #45 = Methodref          #5.#154       // java/util/zip/CRC32.update:([BII)V\n-   #46 = Methodref          #1.#155       // org/apache/commons/compress/compressors/gzip/GzipParameters.getFilename:()Ljava/lang/String;\n-   #47 = Methodref          #1.#156       // org/apache/commons/compress/compressors/gzip/GzipParameters.getComment:()Ljava/lang/String;\n-   #48 = Methodref          #105.#157     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #49 = Fieldref           #158.#159     // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #50 = Methodref          #105.#160     // java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-   #51 = Class              #161          // java/util/zip/GZIPInputStream\n-   #52 = Methodref          #105.#162     // java/nio/ByteBuffer.putShort:(S)Ljava/nio/ByteBuffer;\n-   #53 = Methodref          #105.#163     // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n-   #54 = Class              #164          // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n-   #55 = Methodref          #1.#165       // org/apache/commons/compress/compressors/gzip/GzipParameters.getModificationTime:()J\n-   #56 = Long               1000l\n-   #58 = Methodref          #105.#166     // java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n-   #59 = Methodref          #1.#167       // org/apache/commons/compress/compressors/gzip/GzipParameters.getOperatingSystem:()I\n-   #60 = Methodref          #105.#168     // java/nio/ByteBuffer.array:()[B\n-   #61 = Methodref          #127.#169     // java/io/OutputStream.write:([B)V\n-   #62 = Methodref          #54.#170      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.getBytes:(Ljava/lang/String;)[B\n-   #63 = Methodref          #127.#171     // java/io/OutputStream.write:(I)V\n-   #64 = Methodref          #5.#172       // java/util/zip/CRC32.getValue:()J\n-   #65 = Methodref          #9.#173       // java/util/zip/Deflater.getTotalIn:()I\n-   #66 = Class              #174          // org/apache/commons/compress/compressors/CompressorOutputStream\n-   #67 = Utf8               FNAME\n-   #68 = Utf8               I\n-   #69 = Utf8               ConstantValue\n-   #70 = Integer            8\n-   #71 = Utf8               FCOMMENT\n-   #72 = Integer            16\n-   #73 = Utf8               out\n-   #74 = Utf8               Ljava/io/OutputStream;\n-   #75 = Utf8               deflater\n-   #76 = Utf8               Ljava/util/zip/Deflater;\n-   #77 = Utf8               deflateBuffer\n-   #78 = Utf8               [B\n-   #79 = Utf8               closed\n-   #80 = Utf8               Z\n-   #81 = Utf8               crc\n-   #82 = Utf8               Ljava/util/zip/CRC32;\n-   #83 = Utf8               <init>\n-   #84 = Utf8               (Ljava/io/OutputStream;)V\n-   #85 = Utf8               Code\n-   #86 = Utf8               LineNumberTable\n-   #87 = Utf8               Exceptions\n-   #88 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-   #89 = Utf8               close\n-   #90 = Utf8               ()V\n-   #91 = Utf8               StackMapTable\n-   #92 = Class              #175          // java/lang/Throwable\n-   #93 = Utf8               deflate\n-   #94 = Utf8               finish\n-   #95 = Utf8               flush\n-   #96 = Utf8               getBytes\n-   #97 = Utf8               (Ljava/lang/String;)[B\n-   #98 = Utf8               write\n-   #99 = Utf8               ([B)V\n-  #100 = Utf8               ([BII)V\n-  #101 = Utf8               (I)V\n-  #102 = Utf8               writeHeader\n-  #103 = Utf8               (Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-  #104 = Class              #176          // java/lang/String\n-  #105 = Class              #177          // java/nio/ByteBuffer\n-  #106 = Utf8               writeTrailer\n-  #107 = Utf8               SourceFile\n-  #108 = Utf8               GzipCompressorOutputStream.java\n-  #109 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n-  #110 = NameAndType        #83:#90       // \"<init>\":()V\n-  #111 = NameAndType        #83:#88       // \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-  #112 = Utf8               java/util/zip/CRC32\n-  #113 = NameAndType        #81:#82       // crc:Ljava/util/zip/CRC32;\n-  #114 = NameAndType        #73:#74       // out:Ljava/io/OutputStream;\n-  #115 = Utf8               java/util/zip/Deflater\n-  #116 = NameAndType        #178:#179     // getCompressionLevel:()I\n-  #117 = NameAndType        #83:#180      // \"<init>\":(IZ)V\n-  #118 = NameAndType        #75:#76       // deflater:Ljava/util/zip/Deflater;\n-  #119 = NameAndType        #181:#179     // getDeflateStrategy:()I\n-  #120 = NameAndType        #182:#101     // setStrategy:(I)V\n-  #121 = NameAndType        #183:#179     // getBufferSize:()I\n-  #122 = NameAndType        #77:#78       // deflateBuffer:[B\n-  #123 = NameAndType        #102:#103     // writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-  #124 = NameAndType        #79:#80       // closed:Z\n-  #125 = NameAndType        #94:#90       // finish:()V\n-  #126 = NameAndType        #184:#90      // end:()V\n-  #127 = Class              #185          // java/io/OutputStream\n-  #128 = NameAndType        #89:#90       // close:()V\n-  #129 = NameAndType        #93:#186      // deflate:([BII)I\n-  #130 = NameAndType        #98:#100      // write:([BII)V\n-  #131 = NameAndType        #187:#188     // finished:()Z\n-  #132 = NameAndType        #93:#90       // deflate:()V\n-  #133 = NameAndType        #106:#90      // writeTrailer:()V\n-  #134 = NameAndType        #95:#90       // flush:()V\n-  #135 = Class              #189          // org/apache/commons/compress/compressors/gzip/GzipUtils\n-  #136 = NameAndType        #190:#191     // GZIP_ENCODING:Ljava/nio/charset/Charset;\n-  #137 = Class              #192          // java/nio/charset/Charset\n-  #138 = NameAndType        #193:#194     // newEncoder:()Ljava/nio/charset/CharsetEncoder;\n-  #139 = Class              #195          // java/nio/charset/CharsetEncoder\n-  #140 = NameAndType        #196:#197     // canEncode:(Ljava/lang/CharSequence;)Z\n-  #141 = NameAndType        #96:#198      // getBytes:(Ljava/nio/charset/Charset;)[B\n-  #142 = Utf8               java/net/URI\n-  #143 = NameAndType        #83:#199      // \"<init>\":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\n-  #144 = NameAndType        #200:#201     // toASCIIString:()Ljava/lang/String;\n-  #145 = Class              #202          // java/nio/charset/StandardCharsets\n-  #146 = NameAndType        #203:#191     // US_ASCII:Ljava/nio/charset/Charset;\n-  #147 = Utf8               java/net/URISyntaxException\n-  #148 = Utf8               java/io/IOException\n-  #149 = NameAndType        #83:#204      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #150 = Utf8               Cannot write more data, the end of the compressed data stream has been reached\n-  #151 = NameAndType        #83:#205      // \"<init>\":(Ljava/lang/String;)V\n-  #152 = NameAndType        #206:#100     // setInput:([BII)V\n-  #153 = NameAndType        #207:#188     // needsInput:()Z\n-  #154 = NameAndType        #208:#100     // update:([BII)V\n-  #155 = NameAndType        #209:#201     // getFilename:()Ljava/lang/String;\n-  #156 = NameAndType        #210:#201     // getComment:()Ljava/lang/String;\n-  #157 = NameAndType        #211:#212     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #158 = Class              #213          // java/nio/ByteOrder\n-  #159 = NameAndType        #214:#215     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-  #160 = NameAndType        #216:#217     // order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-  #161 = Utf8               java/util/zip/GZIPInputStream\n-  #162 = NameAndType        #218:#219     // putShort:(S)Ljava/nio/ByteBuffer;\n-  #163 = NameAndType        #220:#221     // put:(B)Ljava/nio/ByteBuffer;\n-  #164 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n-  #165 = NameAndType        #222:#223     // getModificationTime:()J\n-  #166 = NameAndType        #224:#212     // putInt:(I)Ljava/nio/ByteBuffer;\n-  #167 = NameAndType        #225:#179     // getOperatingSystem:()I\n-  #168 = NameAndType        #226:#227     // array:()[B\n-  #169 = NameAndType        #98:#99       // write:([B)V\n-  #170 = NameAndType        #96:#97       // getBytes:(Ljava/lang/String;)[B\n-  #171 = NameAndType        #98:#101      // write:(I)V\n-  #172 = NameAndType        #228:#223     // getValue:()J\n-  #173 = NameAndType        #229:#179     // getTotalIn:()I\n-  #174 = Utf8               org/apache/commons/compress/compressors/CompressorOutputStream\n-  #175 = Utf8               java/lang/Throwable\n-  #176 = Utf8               java/lang/String\n-  #177 = Utf8               java/nio/ByteBuffer\n-  #178 = Utf8               getCompressionLevel\n-  #179 = Utf8               ()I\n-  #180 = Utf8               (IZ)V\n-  #181 = Utf8               getDeflateStrategy\n-  #182 = Utf8               setStrategy\n-  #183 = Utf8               getBufferSize\n-  #184 = Utf8               end\n-  #185 = Utf8               java/io/OutputStream\n-  #186 = Utf8               ([BII)I\n-  #187 = Utf8               finished\n-  #188 = Utf8               ()Z\n-  #189 = Utf8               org/apache/commons/compress/compressors/gzip/GzipUtils\n-  #190 = Utf8               GZIP_ENCODING\n-  #191 = Utf8               Ljava/nio/charset/Charset;\n-  #192 = Utf8               java/nio/charset/Charset\n-  #193 = Utf8               newEncoder\n-  #194 = Utf8               ()Ljava/nio/charset/CharsetEncoder;\n-  #195 = Utf8               java/nio/charset/CharsetEncoder\n-  #196 = Utf8               canEncode\n-  #197 = Utf8               (Ljava/lang/CharSequence;)Z\n-  #198 = Utf8               (Ljava/nio/charset/Charset;)[B\n-  #199 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\n-  #200 = Utf8               toASCIIString\n-  #201 = Utf8               ()Ljava/lang/String;\n-  #202 = Utf8               java/nio/charset/StandardCharsets\n-  #203 = Utf8               US_ASCII\n-  #204 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #205 = Utf8               (Ljava/lang/String;)V\n-  #206 = Utf8               setInput\n-  #207 = Utf8               needsInput\n-  #208 = Utf8               update\n-  #209 = Utf8               getFilename\n-  #210 = Utf8               getComment\n-  #211 = Utf8               allocate\n-  #212 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #213 = Utf8               java/nio/ByteOrder\n-  #214 = Utf8               LITTLE_ENDIAN\n-  #215 = Utf8               Ljava/nio/ByteOrder;\n-  #216 = Utf8               order\n-  #217 = Utf8               (Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-  #218 = Utf8               putShort\n-  #219 = Utf8               (S)Ljava/nio/ByteBuffer;\n-  #220 = Utf8               put\n-  #221 = Utf8               (B)Ljava/nio/ByteBuffer;\n-  #222 = Utf8               getModificationTime\n-  #223 = Utf8               ()J\n-  #224 = Utf8               putInt\n-  #225 = Utf8               getOperatingSystem\n-  #226 = Utf8               array\n-  #227 = Utf8               ()[B\n-  #228 = Utf8               getValue\n-  #229 = Utf8               getTotalIn\n+    #1 = Class              #2            // org/apache/commons/compress/compressors/gzip/GzipParameters\n+    #2 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n+    #3 = Methodref          #1.#4         // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n+    #4 = NameAndType        #5:#6         // \"<init>\":()V\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Methodref          #8.#9         // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+    #8 = Class              #10           // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n+    #9 = NameAndType        #5:#11        // \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+   #10 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n+   #11 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+   #12 = Methodref          #13.#4        // org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n+   #13 = Class              #14           // org/apache/commons/compress/compressors/CompressorOutputStream\n+   #14 = Utf8               org/apache/commons/compress/compressors/CompressorOutputStream\n+   #15 = Class              #16           // java/util/zip/CRC32\n+   #16 = Utf8               java/util/zip/CRC32\n+   #17 = Methodref          #15.#4        // java/util/zip/CRC32.\"<init>\":()V\n+   #18 = Fieldref           #8.#19        // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.crc:Ljava/util/zip/CRC32;\n+   #19 = NameAndType        #20:#21       // crc:Ljava/util/zip/CRC32;\n+   #20 = Utf8               crc\n+   #21 = Utf8               Ljava/util/zip/CRC32;\n+   #22 = Fieldref           #8.#23        // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.out:Ljava/io/OutputStream;\n+   #23 = NameAndType        #24:#25       // out:Ljava/io/OutputStream;\n+   #24 = Utf8               out\n+   #25 = Utf8               Ljava/io/OutputStream;\n+   #26 = Class              #27           // java/util/zip/Deflater\n+   #27 = Utf8               java/util/zip/Deflater\n+   #28 = Methodref          #1.#29        // org/apache/commons/compress/compressors/gzip/GzipParameters.getCompressionLevel:()I\n+   #29 = NameAndType        #30:#31       // getCompressionLevel:()I\n+   #30 = Utf8               getCompressionLevel\n+   #31 = Utf8               ()I\n+   #32 = Methodref          #26.#33       // java/util/zip/Deflater.\"<init>\":(IZ)V\n+   #33 = NameAndType        #5:#34        // \"<init>\":(IZ)V\n+   #34 = Utf8               (IZ)V\n+   #35 = Fieldref           #8.#36        // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflater:Ljava/util/zip/Deflater;\n+   #36 = NameAndType        #37:#38       // deflater:Ljava/util/zip/Deflater;\n+   #37 = Utf8               deflater\n+   #38 = Utf8               Ljava/util/zip/Deflater;\n+   #39 = Methodref          #1.#40        // org/apache/commons/compress/compressors/gzip/GzipParameters.getDeflateStrategy:()I\n+   #40 = NameAndType        #41:#31       // getDeflateStrategy:()I\n+   #41 = Utf8               getDeflateStrategy\n+   #42 = Methodref          #26.#43       // java/util/zip/Deflater.setStrategy:(I)V\n+   #43 = NameAndType        #44:#45       // setStrategy:(I)V\n+   #44 = Utf8               setStrategy\n+   #45 = Utf8               (I)V\n+   #46 = Methodref          #1.#47        // org/apache/commons/compress/compressors/gzip/GzipParameters.getBufferSize:()I\n+   #47 = NameAndType        #48:#31       // getBufferSize:()I\n+   #48 = Utf8               getBufferSize\n+   #49 = Fieldref           #8.#50        // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflateBuffer:[B\n+   #50 = NameAndType        #51:#52       // deflateBuffer:[B\n+   #51 = Utf8               deflateBuffer\n+   #52 = Utf8               [B\n+   #53 = Methodref          #8.#54        // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+   #54 = NameAndType        #55:#56       // writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+   #55 = Utf8               writeHeader\n+   #56 = Utf8               (Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+   #57 = Fieldref           #8.#58        // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.closed:Z\n+   #58 = NameAndType        #59:#60       // closed:Z\n+   #59 = Utf8               closed\n+   #60 = Utf8               Z\n+   #61 = Methodref          #8.#62        // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.finish:()V\n+   #62 = NameAndType        #63:#6        // finish:()V\n+   #63 = Utf8               finish\n+   #64 = Methodref          #26.#65       // java/util/zip/Deflater.end:()V\n+   #65 = NameAndType        #66:#6        // end:()V\n+   #66 = Utf8               end\n+   #67 = Methodref          #68.#69       // java/io/OutputStream.close:()V\n+   #68 = Class              #70           // java/io/OutputStream\n+   #69 = NameAndType        #71:#6        // close:()V\n+   #70 = Utf8               java/io/OutputStream\n+   #71 = Utf8               close\n+   #72 = Methodref          #26.#73       // java/util/zip/Deflater.deflate:([BII)I\n+   #73 = NameAndType        #74:#75       // deflate:([BII)I\n+   #74 = Utf8               deflate\n+   #75 = Utf8               ([BII)I\n+   #76 = Methodref          #68.#77       // java/io/OutputStream.write:([BII)V\n+   #77 = NameAndType        #78:#79       // write:([BII)V\n+   #78 = Utf8               write\n+   #79 = Utf8               ([BII)V\n+   #80 = Methodref          #26.#81       // java/util/zip/Deflater.finished:()Z\n+   #81 = NameAndType        #82:#83       // finished:()Z\n+   #82 = Utf8               finished\n+   #83 = Utf8               ()Z\n+   #84 = Methodref          #26.#62       // java/util/zip/Deflater.finish:()V\n+   #85 = Methodref          #8.#86        // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflate:()V\n+   #86 = NameAndType        #74:#6        // deflate:()V\n+   #87 = Methodref          #8.#88        // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.writeTrailer:()V\n+   #88 = NameAndType        #89:#6        // writeTrailer:()V\n+   #89 = Utf8               writeTrailer\n+   #90 = Methodref          #68.#91       // java/io/OutputStream.flush:()V\n+   #91 = NameAndType        #92:#6        // flush:()V\n+   #92 = Utf8               flush\n+   #93 = Fieldref           #94.#95       // org/apache/commons/compress/compressors/gzip/GzipUtils.GZIP_ENCODING:Ljava/nio/charset/Charset;\n+   #94 = Class              #96           // org/apache/commons/compress/compressors/gzip/GzipUtils\n+   #95 = NameAndType        #97:#98       // GZIP_ENCODING:Ljava/nio/charset/Charset;\n+   #96 = Utf8               org/apache/commons/compress/compressors/gzip/GzipUtils\n+   #97 = Utf8               GZIP_ENCODING\n+   #98 = Utf8               Ljava/nio/charset/Charset;\n+   #99 = Methodref          #100.#101     // java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n+  #100 = Class              #102          // java/nio/charset/Charset\n+  #101 = NameAndType        #103:#104     // newEncoder:()Ljava/nio/charset/CharsetEncoder;\n+  #102 = Utf8               java/nio/charset/Charset\n+  #103 = Utf8               newEncoder\n+  #104 = Utf8               ()Ljava/nio/charset/CharsetEncoder;\n+  #105 = Methodref          #106.#107     // java/nio/charset/CharsetEncoder.canEncode:(Ljava/lang/CharSequence;)Z\n+  #106 = Class              #108          // java/nio/charset/CharsetEncoder\n+  #107 = NameAndType        #109:#110     // canEncode:(Ljava/lang/CharSequence;)Z\n+  #108 = Utf8               java/nio/charset/CharsetEncoder\n+  #109 = Utf8               canEncode\n+  #110 = Utf8               (Ljava/lang/CharSequence;)Z\n+  #111 = Methodref          #112.#113     // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+  #112 = Class              #114          // java/lang/String\n+  #113 = NameAndType        #115:#116     // getBytes:(Ljava/nio/charset/Charset;)[B\n+  #114 = Utf8               java/lang/String\n+  #115 = Utf8               getBytes\n+  #116 = Utf8               (Ljava/nio/charset/Charset;)[B\n+  #117 = Class              #118          // java/net/URI\n+  #118 = Utf8               java/net/URI\n+  #119 = Methodref          #117.#120     // java/net/URI.\"<init>\":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\n+  #120 = NameAndType        #5:#121       // \"<init>\":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\n+  #121 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\n+  #122 = Methodref          #117.#123     // java/net/URI.toASCIIString:()Ljava/lang/String;\n+  #123 = NameAndType        #124:#125     // toASCIIString:()Ljava/lang/String;\n+  #124 = Utf8               toASCIIString\n+  #125 = Utf8               ()Ljava/lang/String;\n+  #126 = Fieldref           #127.#128     // java/nio/charset/StandardCharsets.US_ASCII:Ljava/nio/charset/Charset;\n+  #127 = Class              #129          // java/nio/charset/StandardCharsets\n+  #128 = NameAndType        #130:#98      // US_ASCII:Ljava/nio/charset/Charset;\n+  #129 = Utf8               java/nio/charset/StandardCharsets\n+  #130 = Utf8               US_ASCII\n+  #131 = Class              #132          // java/net/URISyntaxException\n+  #132 = Utf8               java/net/URISyntaxException\n+  #133 = Class              #134          // java/io/IOException\n+  #134 = Utf8               java/io/IOException\n+  #135 = Methodref          #133.#136     // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #136 = NameAndType        #5:#137       // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #137 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #138 = Methodref          #8.#77        // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.write:([BII)V\n+  #139 = String             #140          // Cannot write more data, the end of the compressed data stream has been reached\n+  #140 = Utf8               Cannot write more data, the end of the compressed data stream has been reached\n+  #141 = Methodref          #133.#142     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #142 = NameAndType        #5:#143       // \"<init>\":(Ljava/lang/String;)V\n+  #143 = Utf8               (Ljava/lang/String;)V\n+  #144 = Methodref          #26.#145      // java/util/zip/Deflater.setInput:([BII)V\n+  #145 = NameAndType        #146:#79      // setInput:([BII)V\n+  #146 = Utf8               setInput\n+  #147 = Methodref          #26.#148      // java/util/zip/Deflater.needsInput:()Z\n+  #148 = NameAndType        #149:#83      // needsInput:()Z\n+  #149 = Utf8               needsInput\n+  #150 = Methodref          #15.#151      // java/util/zip/CRC32.update:([BII)V\n+  #151 = NameAndType        #152:#79      // update:([BII)V\n+  #152 = Utf8               update\n+  #153 = Methodref          #1.#154       // org/apache/commons/compress/compressors/gzip/GzipParameters.getFilename:()Ljava/lang/String;\n+  #154 = NameAndType        #155:#125     // getFilename:()Ljava/lang/String;\n+  #155 = Utf8               getFilename\n+  #156 = Methodref          #1.#157       // org/apache/commons/compress/compressors/gzip/GzipParameters.getComment:()Ljava/lang/String;\n+  #157 = NameAndType        #158:#125     // getComment:()Ljava/lang/String;\n+  #158 = Utf8               getComment\n+  #159 = Methodref          #160.#161     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+  #160 = Class              #162          // java/nio/ByteBuffer\n+  #161 = NameAndType        #163:#164     // allocate:(I)Ljava/nio/ByteBuffer;\n+  #162 = Utf8               java/nio/ByteBuffer\n+  #163 = Utf8               allocate\n+  #164 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #165 = Fieldref           #166.#167     // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+  #166 = Class              #168          // java/nio/ByteOrder\n+  #167 = NameAndType        #169:#170     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+  #168 = Utf8               java/nio/ByteOrder\n+  #169 = Utf8               LITTLE_ENDIAN\n+  #170 = Utf8               Ljava/nio/ByteOrder;\n+  #171 = Methodref          #160.#172     // java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+  #172 = NameAndType        #173:#174     // order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+  #173 = Utf8               order\n+  #174 = Utf8               (Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+  #175 = Class              #176          // java/util/zip/GZIPInputStream\n+  #176 = Utf8               java/util/zip/GZIPInputStream\n+  #177 = Methodref          #160.#178     // java/nio/ByteBuffer.putShort:(S)Ljava/nio/ByteBuffer;\n+  #178 = NameAndType        #179:#180     // putShort:(S)Ljava/nio/ByteBuffer;\n+  #179 = Utf8               putShort\n+  #180 = Utf8               (S)Ljava/nio/ByteBuffer;\n+  #181 = Methodref          #160.#182     // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+  #182 = NameAndType        #183:#184     // put:(B)Ljava/nio/ByteBuffer;\n+  #183 = Utf8               put\n+  #184 = Utf8               (B)Ljava/nio/ByteBuffer;\n+  #185 = Methodref          #1.#186       // org/apache/commons/compress/compressors/gzip/GzipParameters.getModificationTime:()J\n+  #186 = NameAndType        #187:#188     // getModificationTime:()J\n+  #187 = Utf8               getModificationTime\n+  #188 = Utf8               ()J\n+  #189 = Long               1000l\n+  #191 = Methodref          #160.#192     // java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n+  #192 = NameAndType        #193:#164     // putInt:(I)Ljava/nio/ByteBuffer;\n+  #193 = Utf8               putInt\n+  #194 = Methodref          #1.#195       // org/apache/commons/compress/compressors/gzip/GzipParameters.getOperatingSystem:()I\n+  #195 = NameAndType        #196:#31      // getOperatingSystem:()I\n+  #196 = Utf8               getOperatingSystem\n+  #197 = Methodref          #160.#198     // java/nio/ByteBuffer.array:()[B\n+  #198 = NameAndType        #199:#200     // array:()[B\n+  #199 = Utf8               array\n+  #200 = Utf8               ()[B\n+  #201 = Methodref          #68.#202      // java/io/OutputStream.write:([B)V\n+  #202 = NameAndType        #78:#203      // write:([B)V\n+  #203 = Utf8               ([B)V\n+  #204 = Methodref          #8.#205       // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.getBytes:(Ljava/lang/String;)[B\n+  #205 = NameAndType        #115:#206     // getBytes:(Ljava/lang/String;)[B\n+  #206 = Utf8               (Ljava/lang/String;)[B\n+  #207 = Methodref          #68.#208      // java/io/OutputStream.write:(I)V\n+  #208 = NameAndType        #78:#45       // write:(I)V\n+  #209 = Methodref          #15.#210      // java/util/zip/CRC32.getValue:()J\n+  #210 = NameAndType        #211:#188     // getValue:()J\n+  #211 = Utf8               getValue\n+  #212 = Methodref          #26.#213      // java/util/zip/Deflater.getTotalIn:()I\n+  #213 = NameAndType        #214:#31      // getTotalIn:()I\n+  #214 = Utf8               getTotalIn\n+  #215 = Utf8               FNAME\n+  #216 = Utf8               I\n+  #217 = Utf8               ConstantValue\n+  #218 = Integer            8\n+  #219 = Utf8               FCOMMENT\n+  #220 = Integer            16\n+  #221 = Utf8               (Ljava/io/OutputStream;)V\n+  #222 = Utf8               Code\n+  #223 = Utf8               LineNumberTable\n+  #224 = Utf8               Exceptions\n+  #225 = Utf8               StackMapTable\n+  #226 = Class              #227          // java/lang/Throwable\n+  #227 = Utf8               java/lang/Throwable\n+  #228 = Utf8               SourceFile\n+  #229 = Utf8               GzipCompressorOutputStream.java\n {\n   private static final int FNAME = 8;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 8\n \n   private static final int FCOMMENT = 16;\n@@ -272,59 +272,59 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: new           #1                  // class org/apache/commons/compress/compressors/gzip/GzipParameters\n          5: dup\n-         6: invokespecial #2                  // Method org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n-         9: invokespecial #3                  // Method \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+         6: invokespecial #3                  // Method org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n+         9: invokespecial #7                  // Method \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n         12: return\n       LineNumberTable:\n         line 72: 0\n         line 73: 12\n     Exceptions:\n       throws java.io.IOException\n \n   public org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream(java.io.OutputStream, org.apache.commons.compress.compressors.gzip.GzipParameters) throws java.io.IOException;\n     descriptor: (Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #4                  // Method org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n+         1: invokespecial #12                 // Method org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #5                  // class java/util/zip/CRC32\n+         5: new           #15                 // class java/util/zip/CRC32\n          8: dup\n-         9: invokespecial #6                  // Method java/util/zip/CRC32.\"<init>\":()V\n-        12: putfield      #7                  // Field crc:Ljava/util/zip/CRC32;\n+         9: invokespecial #17                 // Method java/util/zip/CRC32.\"<init>\":()V\n+        12: putfield      #18                 // Field crc:Ljava/util/zip/CRC32;\n         15: aload_0\n         16: aload_1\n-        17: putfield      #8                  // Field out:Ljava/io/OutputStream;\n+        17: putfield      #22                 // Field out:Ljava/io/OutputStream;\n         20: aload_0\n-        21: new           #9                  // class java/util/zip/Deflater\n+        21: new           #26                 // class java/util/zip/Deflater\n         24: dup\n         25: aload_2\n-        26: invokevirtual #10                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getCompressionLevel:()I\n+        26: invokevirtual #28                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getCompressionLevel:()I\n         29: iconst_1\n-        30: invokespecial #11                 // Method java/util/zip/Deflater.\"<init>\":(IZ)V\n-        33: putfield      #12                 // Field deflater:Ljava/util/zip/Deflater;\n+        30: invokespecial #32                 // Method java/util/zip/Deflater.\"<init>\":(IZ)V\n+        33: putfield      #35                 // Field deflater:Ljava/util/zip/Deflater;\n         36: aload_0\n-        37: getfield      #12                 // Field deflater:Ljava/util/zip/Deflater;\n+        37: getfield      #35                 // Field deflater:Ljava/util/zip/Deflater;\n         40: aload_2\n-        41: invokevirtual #13                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getDeflateStrategy:()I\n-        44: invokevirtual #14                 // Method java/util/zip/Deflater.setStrategy:(I)V\n+        41: invokevirtual #39                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getDeflateStrategy:()I\n+        44: invokevirtual #42                 // Method java/util/zip/Deflater.setStrategy:(I)V\n         47: aload_0\n         48: aload_2\n-        49: invokevirtual #15                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getBufferSize:()I\n+        49: invokevirtual #46                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getBufferSize:()I\n         52: newarray       byte\n-        54: putfield      #16                 // Field deflateBuffer:[B\n+        54: putfield      #49                 // Field deflateBuffer:[B\n         57: aload_0\n         58: aload_2\n-        59: invokespecial #17                 // Method writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+        59: invokespecial #53                 // Method writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n         62: return\n       LineNumberTable:\n         line 83: 0\n         line 64: 4\n         line 84: 15\n         line 85: 20\n         line 86: 36\n@@ -336,38 +336,38 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #18                 // Field closed:Z\n+         1: getfield      #57                 // Field closed:Z\n          4: ifne          55\n          7: aload_0\n-         8: invokevirtual #19                 // Method finish:()V\n+         8: invokevirtual #61                 // Method finish:()V\n         11: aload_0\n-        12: getfield      #12                 // Field deflater:Ljava/util/zip/Deflater;\n-        15: invokevirtual #20                 // Method java/util/zip/Deflater.end:()V\n+        12: getfield      #35                 // Field deflater:Ljava/util/zip/Deflater;\n+        15: invokevirtual #64                 // Method java/util/zip/Deflater.end:()V\n         18: aload_0\n-        19: getfield      #8                  // Field out:Ljava/io/OutputStream;\n-        22: invokevirtual #21                 // Method java/io/OutputStream.close:()V\n+        19: getfield      #22                 // Field out:Ljava/io/OutputStream;\n+        22: invokevirtual #67                 // Method java/io/OutputStream.close:()V\n         25: aload_0\n         26: iconst_1\n-        27: putfield      #18                 // Field closed:Z\n+        27: putfield      #57                 // Field closed:Z\n         30: goto          55\n         33: astore_1\n         34: aload_0\n-        35: getfield      #12                 // Field deflater:Ljava/util/zip/Deflater;\n-        38: invokevirtual #20                 // Method java/util/zip/Deflater.end:()V\n+        35: getfield      #35                 // Field deflater:Ljava/util/zip/Deflater;\n+        38: invokevirtual #64                 // Method java/util/zip/Deflater.end:()V\n         41: aload_0\n-        42: getfield      #8                  // Field out:Ljava/io/OutputStream;\n-        45: invokevirtual #21                 // Method java/io/OutputStream.close:()V\n+        42: getfield      #22                 // Field out:Ljava/io/OutputStream;\n+        45: invokevirtual #67                 // Method java/io/OutputStream.close:()V\n         48: aload_0\n         49: iconst_1\n-        50: putfield      #18                 // Field closed:Z\n+        50: putfield      #57                 // Field closed:Z\n         53: aload_1\n         54: athrow\n         55: return\n       Exception table:\n          from    to  target type\n              7    11    33   any\n       LineNumberTable:\n@@ -391,32 +391,32 @@\n \n   private void deflate() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #12                 // Field deflater:Ljava/util/zip/Deflater;\n+         1: getfield      #35                 // Field deflater:Ljava/util/zip/Deflater;\n          4: aload_0\n-         5: getfield      #16                 // Field deflateBuffer:[B\n+         5: getfield      #49                 // Field deflateBuffer:[B\n          8: iconst_0\n          9: aload_0\n-        10: getfield      #16                 // Field deflateBuffer:[B\n+        10: getfield      #49                 // Field deflateBuffer:[B\n         13: arraylength\n-        14: invokevirtual #22                 // Method java/util/zip/Deflater.deflate:([BII)I\n+        14: invokevirtual #72                 // Method java/util/zip/Deflater.deflate:([BII)I\n         17: istore_1\n         18: iload_1\n         19: ifle          35\n         22: aload_0\n-        23: getfield      #8                  // Field out:Ljava/io/OutputStream;\n+        23: getfield      #22                 // Field out:Ljava/io/OutputStream;\n         26: aload_0\n-        27: getfield      #16                 // Field deflateBuffer:[B\n+        27: getfield      #49                 // Field deflateBuffer:[B\n         30: iconst_0\n         31: iload_1\n-        32: invokevirtual #23                 // Method java/io/OutputStream.write:([BII)V\n+        32: invokevirtual #76                 // Method java/io/OutputStream.write:([BII)V\n         35: return\n       LineNumberTable:\n         line 105: 0\n         line 106: 18\n         line 107: 22\n         line 109: 35\n       StackMapTable: number_of_entries = 1\n@@ -428,29 +428,29 @@\n \n   public void finish() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #12                 // Field deflater:Ljava/util/zip/Deflater;\n-         4: invokevirtual #24                 // Method java/util/zip/Deflater.finished:()Z\n+         1: getfield      #35                 // Field deflater:Ljava/util/zip/Deflater;\n+         4: invokevirtual #80                 // Method java/util/zip/Deflater.finished:()Z\n          7: ifne          38\n         10: aload_0\n-        11: getfield      #12                 // Field deflater:Ljava/util/zip/Deflater;\n-        14: invokevirtual #25                 // Method java/util/zip/Deflater.finish:()V\n+        11: getfield      #35                 // Field deflater:Ljava/util/zip/Deflater;\n+        14: invokevirtual #84                 // Method java/util/zip/Deflater.finish:()V\n         17: aload_0\n-        18: getfield      #12                 // Field deflater:Ljava/util/zip/Deflater;\n-        21: invokevirtual #24                 // Method java/util/zip/Deflater.finished:()Z\n+        18: getfield      #35                 // Field deflater:Ljava/util/zip/Deflater;\n+        21: invokevirtual #80                 // Method java/util/zip/Deflater.finished:()Z\n         24: ifne          34\n         27: aload_0\n-        28: invokespecial #26                 // Method deflate:()V\n+        28: invokespecial #85                 // Method deflate:()V\n         31: goto          17\n         34: aload_0\n-        35: invokespecial #27                 // Method writeTrailer:()V\n+        35: invokespecial #87                 // Method writeTrailer:()V\n         38: return\n       LineNumberTable:\n         line 118: 0\n         line 119: 10\n         line 121: 17\n         line 122: 27\n         line 125: 34\n@@ -464,54 +464,54 @@\n \n   public void flush() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #8                  // Field out:Ljava/io/OutputStream;\n-         4: invokevirtual #28                 // Method java/io/OutputStream.flush:()V\n+         1: getfield      #22                 // Field out:Ljava/io/OutputStream;\n+         4: invokevirtual #90                 // Method java/io/OutputStream.flush:()V\n          7: return\n       LineNumberTable:\n         line 136: 0\n         line 137: 7\n     Exceptions:\n       throws java.io.IOException\n \n   private byte[] getBytes(java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;)[B\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=3, args_size=2\n-         0: getstatic     #29                 // Field org/apache/commons/compress/compressors/gzip/GzipUtils.GZIP_ENCODING:Ljava/nio/charset/Charset;\n-         3: invokevirtual #30                 // Method java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n+         0: getstatic     #93                 // Field org/apache/commons/compress/compressors/gzip/GzipUtils.GZIP_ENCODING:Ljava/nio/charset/Charset;\n+         3: invokevirtual #99                 // Method java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n          6: aload_1\n-         7: invokevirtual #31                 // Method java/nio/charset/CharsetEncoder.canEncode:(Ljava/lang/CharSequence;)Z\n+         7: invokevirtual #105                // Method java/nio/charset/CharsetEncoder.canEncode:(Ljava/lang/CharSequence;)Z\n         10: ifeq          21\n         13: aload_1\n-        14: getstatic     #29                 // Field org/apache/commons/compress/compressors/gzip/GzipUtils.GZIP_ENCODING:Ljava/nio/charset/Charset;\n-        17: invokevirtual #32                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+        14: getstatic     #93                 // Field org/apache/commons/compress/compressors/gzip/GzipUtils.GZIP_ENCODING:Ljava/nio/charset/Charset;\n+        17: invokevirtual #111                // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n         20: areturn\n-        21: new           #33                 // class java/net/URI\n+        21: new           #117                // class java/net/URI\n         24: dup\n         25: aconst_null\n         26: aconst_null\n         27: aload_1\n         28: aconst_null\n-        29: invokespecial #34                 // Method java/net/URI.\"<init>\":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\n-        32: invokevirtual #35                 // Method java/net/URI.toASCIIString:()Ljava/lang/String;\n-        35: getstatic     #36                 // Field java/nio/charset/StandardCharsets.US_ASCII:Ljava/nio/charset/Charset;\n-        38: invokevirtual #32                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+        29: invokespecial #119                // Method java/net/URI.\"<init>\":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\n+        32: invokevirtual #122                // Method java/net/URI.toASCIIString:()Ljava/lang/String;\n+        35: getstatic     #126                // Field java/nio/charset/StandardCharsets.US_ASCII:Ljava/nio/charset/Charset;\n+        38: invokevirtual #111                // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n         41: areturn\n         42: astore_2\n-        43: new           #38                 // class java/io/IOException\n+        43: new           #133                // class java/io/IOException\n         46: dup\n         47: aload_1\n         48: aload_2\n-        49: invokespecial #39                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        49: invokespecial #135                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n         52: athrow\n       Exception table:\n          from    to  target type\n             21    41    42   Class java/net/URISyntaxException\n       LineNumberTable:\n         line 150: 0\n         line 151: 13\n@@ -531,57 +531,57 @@\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n          3: aload_1\n          4: arraylength\n-         5: invokevirtual #40                 // Method write:([BII)V\n+         5: invokevirtual #138                // Method write:([BII)V\n          8: return\n       LineNumberTable:\n         line 167: 0\n         line 168: 8\n     Exceptions:\n       throws java.io.IOException\n \n   public void write(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n-         1: getfield      #12                 // Field deflater:Ljava/util/zip/Deflater;\n-         4: invokevirtual #24                 // Method java/util/zip/Deflater.finished:()Z\n+         1: getfield      #35                 // Field deflater:Ljava/util/zip/Deflater;\n+         4: invokevirtual #80                 // Method java/util/zip/Deflater.finished:()Z\n          7: ifeq          20\n-        10: new           #38                 // class java/io/IOException\n+        10: new           #133                // class java/io/IOException\n         13: dup\n-        14: ldc           #41                 // String Cannot write more data, the end of the compressed data stream has been reached\n-        16: invokespecial #42                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        14: ldc           #139                // String Cannot write more data, the end of the compressed data stream has been reached\n+        16: invokespecial #141                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         19: athrow\n         20: iload_3\n         21: ifle          61\n         24: aload_0\n-        25: getfield      #12                 // Field deflater:Ljava/util/zip/Deflater;\n+        25: getfield      #35                 // Field deflater:Ljava/util/zip/Deflater;\n         28: aload_1\n         29: iload_2\n         30: iload_3\n-        31: invokevirtual #43                 // Method java/util/zip/Deflater.setInput:([BII)V\n+        31: invokevirtual #144                // Method java/util/zip/Deflater.setInput:([BII)V\n         34: aload_0\n-        35: getfield      #12                 // Field deflater:Ljava/util/zip/Deflater;\n-        38: invokevirtual #44                 // Method java/util/zip/Deflater.needsInput:()Z\n+        35: getfield      #35                 // Field deflater:Ljava/util/zip/Deflater;\n+        38: invokevirtual #147                // Method java/util/zip/Deflater.needsInput:()Z\n         41: ifne          51\n         44: aload_0\n-        45: invokespecial #26                 // Method deflate:()V\n+        45: invokespecial #85                 // Method deflate:()V\n         48: goto          34\n         51: aload_0\n-        52: getfield      #7                  // Field crc:Ljava/util/zip/CRC32;\n+        52: getfield      #18                 // Field crc:Ljava/util/zip/CRC32;\n         55: aload_1\n         56: iload_2\n         57: iload_3\n-        58: invokevirtual #45                 // Method java/util/zip/CRC32.update:([BII)V\n+        58: invokevirtual #150                // Method java/util/zip/CRC32.update:([BII)V\n         61: return\n       LineNumberTable:\n         line 177: 0\n         line 178: 10\n         line 180: 20\n         line 181: 24\n         line 183: 34\n@@ -609,129 +609,129 @@\n          6: iload_1\n          7: sipush        255\n         10: iand\n         11: i2b\n         12: bastore\n         13: iconst_0\n         14: iconst_1\n-        15: invokevirtual #40                 // Method write:([BII)V\n+        15: invokevirtual #138                // Method write:([BII)V\n         18: return\n       LineNumberTable:\n         line 193: 0\n         line 194: 18\n     Exceptions:\n       throws java.io.IOException\n \n   private void writeHeader(org.apache.commons.compress.compressors.gzip.GzipParameters) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=6, args_size=2\n          0: aload_1\n-         1: invokevirtual #46                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getFilename:()Ljava/lang/String;\n+         1: invokevirtual #153                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getFilename:()Ljava/lang/String;\n          4: astore_2\n          5: aload_1\n-         6: invokevirtual #47                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getComment:()Ljava/lang/String;\n+         6: invokevirtual #156                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getComment:()Ljava/lang/String;\n          9: astore_3\n         10: bipush        10\n-        12: invokestatic  #48                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        12: invokestatic  #159                // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n         15: astore        4\n         17: aload         4\n-        19: getstatic     #49                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-        22: invokevirtual #50                 // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+        19: getstatic     #165                // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+        22: invokevirtual #171                // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n         25: pop\n         26: aload         4\n         28: sipush        -29921\n-        31: invokevirtual #52                 // Method java/nio/ByteBuffer.putShort:(S)Ljava/nio/ByteBuffer;\n+        31: invokevirtual #177                // Method java/nio/ByteBuffer.putShort:(S)Ljava/nio/ByteBuffer;\n         34: pop\n         35: aload         4\n         37: bipush        8\n-        39: invokevirtual #53                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+        39: invokevirtual #181                // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n         42: pop\n         43: aload         4\n         45: aload_2\n         46: ifnull        54\n         49: bipush        8\n         51: goto          55\n         54: iconst_0\n         55: aload_3\n         56: ifnull        64\n         59: bipush        16\n         61: goto          65\n         64: iconst_0\n         65: ior\n         66: i2b\n-        67: invokevirtual #53                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+        67: invokevirtual #181                // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n         70: pop\n         71: aload         4\n         73: aload_1\n-        74: invokevirtual #55                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getModificationTime:()J\n-        77: ldc2_w        #56                 // long 1000l\n+        74: invokevirtual #185                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getModificationTime:()J\n+        77: ldc2_w        #189                // long 1000l\n         80: ldiv\n         81: l2i\n-        82: invokevirtual #58                 // Method java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n+        82: invokevirtual #191                // Method java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n         85: pop\n         86: aload_1\n-        87: invokevirtual #10                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getCompressionLevel:()I\n+        87: invokevirtual #28                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getCompressionLevel:()I\n         90: istore        5\n         92: iload         5\n         94: bipush        9\n         96: if_icmpne     109\n         99: aload         4\n        101: iconst_2\n-       102: invokevirtual #53                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+       102: invokevirtual #181                // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n        105: pop\n        106: goto          132\n        109: iload         5\n        111: iconst_1\n        112: if_icmpne     125\n        115: aload         4\n        117: iconst_4\n-       118: invokevirtual #53                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+       118: invokevirtual #181                // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n        121: pop\n        122: goto          132\n        125: aload         4\n        127: iconst_0\n-       128: invokevirtual #53                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+       128: invokevirtual #181                // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n        131: pop\n        132: aload         4\n        134: aload_1\n-       135: invokevirtual #59                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getOperatingSystem:()I\n+       135: invokevirtual #194                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getOperatingSystem:()I\n        138: i2b\n-       139: invokevirtual #53                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+       139: invokevirtual #181                // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n        142: pop\n        143: aload_0\n-       144: getfield      #8                  // Field out:Ljava/io/OutputStream;\n+       144: getfield      #22                 // Field out:Ljava/io/OutputStream;\n        147: aload         4\n-       149: invokevirtual #60                 // Method java/nio/ByteBuffer.array:()[B\n-       152: invokevirtual #61                 // Method java/io/OutputStream.write:([B)V\n+       149: invokevirtual #197                // Method java/nio/ByteBuffer.array:()[B\n+       152: invokevirtual #201                // Method java/io/OutputStream.write:([B)V\n        155: aload_2\n        156: ifnull        179\n        159: aload_0\n-       160: getfield      #8                  // Field out:Ljava/io/OutputStream;\n+       160: getfield      #22                 // Field out:Ljava/io/OutputStream;\n        163: aload_0\n        164: aload_2\n-       165: invokespecial #62                 // Method getBytes:(Ljava/lang/String;)[B\n-       168: invokevirtual #61                 // Method java/io/OutputStream.write:([B)V\n+       165: invokespecial #204                // Method getBytes:(Ljava/lang/String;)[B\n+       168: invokevirtual #201                // Method java/io/OutputStream.write:([B)V\n        171: aload_0\n-       172: getfield      #8                  // Field out:Ljava/io/OutputStream;\n+       172: getfield      #22                 // Field out:Ljava/io/OutputStream;\n        175: iconst_0\n-       176: invokevirtual #63                 // Method java/io/OutputStream.write:(I)V\n+       176: invokevirtual #207                // Method java/io/OutputStream.write:(I)V\n        179: aload_3\n        180: ifnull        203\n        183: aload_0\n-       184: getfield      #8                  // Field out:Ljava/io/OutputStream;\n+       184: getfield      #22                 // Field out:Ljava/io/OutputStream;\n        187: aload_0\n        188: aload_3\n-       189: invokespecial #62                 // Method getBytes:(Ljava/lang/String;)[B\n-       192: invokevirtual #61                 // Method java/io/OutputStream.write:([B)V\n+       189: invokespecial #204                // Method getBytes:(Ljava/lang/String;)[B\n+       192: invokevirtual #201                // Method java/io/OutputStream.write:([B)V\n        195: aload_0\n-       196: getfield      #8                  // Field out:Ljava/io/OutputStream;\n+       196: getfield      #22                 // Field out:Ljava/io/OutputStream;\n        199: iconst_0\n-       200: invokevirtual #63                 // Method java/io/OutputStream.write:(I)V\n+       200: invokevirtual #207                // Method java/io/OutputStream.write:(I)V\n        203: return\n       LineNumberTable:\n         line 197: 0\n         line 198: 5\n         line 200: 10\n         line 201: 17\n         line 202: 26\n@@ -782,38 +782,38 @@\n \n   private void writeTrailer() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=2, args_size=1\n          0: bipush        8\n-         2: invokestatic  #48                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+         2: invokestatic  #159                // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n          5: astore_1\n          6: aload_1\n-         7: getstatic     #49                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-        10: invokevirtual #50                 // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+         7: getstatic     #165                // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+        10: invokevirtual #171                // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n         13: pop\n         14: aload_1\n         15: aload_0\n-        16: getfield      #7                  // Field crc:Ljava/util/zip/CRC32;\n-        19: invokevirtual #64                 // Method java/util/zip/CRC32.getValue:()J\n+        16: getfield      #18                 // Field crc:Ljava/util/zip/CRC32;\n+        19: invokevirtual #209                // Method java/util/zip/CRC32.getValue:()J\n         22: l2i\n-        23: invokevirtual #58                 // Method java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n+        23: invokevirtual #191                // Method java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n         26: pop\n         27: aload_1\n         28: aload_0\n-        29: getfield      #12                 // Field deflater:Ljava/util/zip/Deflater;\n-        32: invokevirtual #65                 // Method java/util/zip/Deflater.getTotalIn:()I\n-        35: invokevirtual #58                 // Method java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n+        29: getfield      #35                 // Field deflater:Ljava/util/zip/Deflater;\n+        32: invokevirtual #212                // Method java/util/zip/Deflater.getTotalIn:()I\n+        35: invokevirtual #191                // Method java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n         38: pop\n         39: aload_0\n-        40: getfield      #8                  // Field out:Ljava/io/OutputStream;\n+        40: getfield      #22                 // Field out:Ljava/io/OutputStream;\n         43: aload_1\n-        44: invokevirtual #60                 // Method java/nio/ByteBuffer.array:()[B\n-        47: invokevirtual #61                 // Method java/io/OutputStream.write:([B)V\n+        44: invokevirtual #197                // Method java/nio/ByteBuffer.array:()[B\n+        47: invokevirtual #201                // Method java/io/OutputStream.write:([B)V\n         50: return\n       LineNumberTable:\n         line 233: 0\n         line 234: 6\n         line 235: 14\n         line 236: 27\n         line 238: 39\n"}]}
