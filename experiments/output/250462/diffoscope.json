{"diffoscope-json-version": 1, "source1": "first/XdocsTemplateParser.class", "source2": "second/XdocsTemplateParser.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -31,92 +31,89 @@\n     private String sourceContent;\n     private String macroName;\n     \n     public XdocsTemplateParser() {\n         this.macroParameters = new HashMap<String, Object>();\n     }\n     \n-    public void parse(final Reader source, final Sink sink, final String reference) throws ParseException {\n-        try (final StringWriter contentWriter = new StringWriter()) {\n-            IOUtil.copy(source, (Writer)contentWriter);\n-            this.sourceContent = contentWriter.toString();\n-            super.parse((Reader)new StringReader(this.sourceContent), sink, reference);\n+    public void parse(final Reader reader, final Sink sink, final String s) throws ParseException {\n+        try (final StringWriter stringWriter = new StringWriter()) {\n+            IOUtil.copy(reader, (Writer)stringWriter);\n+            this.sourceContent = stringWriter.toString();\n+            super.parse((Reader)new StringReader(this.sourceContent), sink, s);\n         }\n-        catch (final IOException ioException) {\n-            throw new ParseException(\"Error reading the input source\", (Exception)ioException);\n+        catch (final IOException ex) {\n+            throw new ParseException(\"Error reading the input source\", (Exception)ex);\n         }\n         finally {\n             this.sourceContent = null;\n         }\n     }\n     \n-    protected void handleStartTag(final XmlPullParser parser, final Sink sink) throws MacroExecutionException {\n-        final String tagName = parser.getName();\n-        if (tagName.equals(XdocsTemplateParser.DOCUMENT_TAG.toString())) {\n+    protected void handleStartTag(final XmlPullParser xmlPullParser, final Sink sink) throws MacroExecutionException {\n+        final String name = xmlPullParser.getName();\n+        if (name.equals(XdocsTemplateParser.DOCUMENT_TAG.toString())) {\n             sink.body();\n-            sink.rawText(parser.getText());\n+            sink.rawText(xmlPullParser.getText());\n         }\n-        else if (tagName.equals(XdocsTemplateParser.MACRO_TAG.toString()) && !this.isSecondParsing()) {\n-            this.processMacroStart(parser);\n+        else if (name.equals(XdocsTemplateParser.MACRO_TAG.toString()) && !this.isSecondParsing()) {\n+            this.processMacroStart(xmlPullParser);\n             this.setIgnorableWhitespace(true);\n         }\n-        else if (tagName.equals(XdocsTemplateParser.PARAM.toString()) && !this.isSecondParsing()) {\n-            this.processParamStart(parser, sink);\n+        else if (name.equals(XdocsTemplateParser.PARAM.toString()) && !this.isSecondParsing()) {\n+            this.processParamStart(xmlPullParser, sink);\n         }\n         else {\n-            sink.rawText(parser.getText());\n+            sink.rawText(xmlPullParser.getText());\n         }\n     }\n     \n-    protected void handleEndTag(final XmlPullParser parser, final Sink sink) throws MacroExecutionException {\n-        final String tagName = parser.getName();\n-        if (tagName.equals(XdocsTemplateParser.DOCUMENT_TAG.toString())) {\n-            sink.rawText(parser.getText());\n+    protected void handleEndTag(final XmlPullParser xmlPullParser, final Sink sink) throws MacroExecutionException {\n+        final String name = xmlPullParser.getName();\n+        if (name.equals(XdocsTemplateParser.DOCUMENT_TAG.toString())) {\n+            sink.rawText(xmlPullParser.getText());\n             sink.body_();\n         }\n-        else if (this.macroName != null && tagName.equals(XdocsTemplateParser.MACRO_TAG.toString()) && !this.macroName.isEmpty() && !this.isSecondParsing()) {\n+        else if (this.macroName != null && name.equals(XdocsTemplateParser.MACRO_TAG.toString()) && !this.macroName.isEmpty() && !this.isSecondParsing()) {\n             this.processMacroEnd(sink);\n             this.setIgnorableWhitespace(false);\n         }\n-        else if (!tagName.equals(XdocsTemplateParser.PARAM.toString())) {\n-            sink.rawText(parser.getText());\n+        else if (!name.equals(XdocsTemplateParser.PARAM.toString())) {\n+            sink.rawText(xmlPullParser.getText());\n         }\n     }\n     \n-    private void processMacroStart(final XmlPullParser parser) throws MacroExecutionException {\n-        this.macroName = parser.getAttributeValue((String)null, HTML.Attribute.NAME.toString());\n+    private void processMacroStart(final XmlPullParser xmlPullParser) throws MacroExecutionException {\n+        this.macroName = xmlPullParser.getAttributeValue((String)null, HTML.Attribute.NAME.toString());\n         if (this.macroName == null || this.macroName.isEmpty()) {\n-            final String message = String.format(Locale.ROOT, \"The '%s' attribute for the '%s' tag is required.\", HTML.Attribute.NAME, XdocsTemplateParser.MACRO_TAG);\n-            throw new MacroExecutionException(message);\n+            throw new MacroExecutionException(String.format(Locale.ROOT, \"The '%s' attribute for the '%s' tag is required.\", HTML.Attribute.NAME, XdocsTemplateParser.MACRO_TAG));\n         }\n     }\n     \n-    private void processParamStart(final XmlPullParser parser, final Sink sink) throws MacroExecutionException {\n+    private void processParamStart(final XmlPullParser xmlPullParser, final Sink sink) throws MacroExecutionException {\n         if (this.macroName != null && !this.macroName.isEmpty()) {\n-            final String paramName = parser.getAttributeValue((String)null, HTML.Attribute.NAME.toString());\n-            final String paramValue = parser.getAttributeValue((String)null, HTML.Attribute.VALUE.toString());\n-            if (paramName == null || paramValue == null || paramName.isEmpty() || paramValue.isEmpty()) {\n-                final String message = String.format(Locale.ROOT, \"'%s' and '%s' attributes for the '%s' tag are required inside the '%s' tag.\", HTML.Attribute.NAME, HTML.Attribute.VALUE, XdocsTemplateParser.PARAM, XdocsTemplateParser.MACRO_TAG);\n-                throw new MacroExecutionException(message);\n+            final String attributeValue = xmlPullParser.getAttributeValue((String)null, HTML.Attribute.NAME.toString());\n+            final String attributeValue2 = xmlPullParser.getAttributeValue((String)null, HTML.Attribute.VALUE.toString());\n+            if (attributeValue == null || attributeValue2 == null || attributeValue.isEmpty() || attributeValue2.isEmpty()) {\n+                throw new MacroExecutionException(String.format(Locale.ROOT, \"'%s' and '%s' attributes for the '%s' tag are required inside the '%s' tag.\", HTML.Attribute.NAME, HTML.Attribute.VALUE, XdocsTemplateParser.PARAM, XdocsTemplateParser.MACRO_TAG));\n             }\n-            this.macroParameters.put(paramName, paramValue);\n+            this.macroParameters.put(attributeValue, attributeValue2);\n         }\n         else {\n-            sink.rawText(parser.getText());\n+            sink.rawText(xmlPullParser.getText());\n         }\n     }\n     \n     private void processMacroEnd(final Sink sink) throws MacroExecutionException {\n-        final MacroRequest request = new MacroRequest(this.sourceContent, (AbstractParser)new XdocsTemplateParser(), (Map)this.macroParameters, new File(XdocsTemplateParser.TEMP_DIR));\n+        final MacroRequest macroRequest = new MacroRequest(this.sourceContent, (AbstractParser)new XdocsTemplateParser(), (Map)this.macroParameters, new File(XdocsTemplateParser.TEMP_DIR));\n         try {\n-            this.executeMacro(this.macroName, request, sink);\n+            this.executeMacro(this.macroName, macroRequest, sink);\n         }\n-        catch (final MacroNotFoundException exception) {\n-            final String message = String.format(Locale.ROOT, \"Macro '%s' not found.\", this.macroName);\n-            throw new MacroExecutionException(message, (Throwable)exception);\n+        catch (final MacroNotFoundException ex) {\n+            throw new MacroExecutionException(String.format(Locale.ROOT, \"Macro '%s' not found.\", this.macroName), (Throwable)ex);\n         }\n         this.reinitializeMacroFields();\n     }\n     \n     private void reinitializeMacroFields() {\n         this.macroName = \"\";\n         this.macroParameters.clear();\n"}]}
