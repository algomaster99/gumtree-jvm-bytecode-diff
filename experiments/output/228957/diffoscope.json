{"diffoscope-json-version": 1, "source1": "first/ZipArchiveEntry.class", "source2": "second/ZipArchiveEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,14 +1,13 @@\n \n package org.apache.commons.compress.archivers.zip;\n \n import java.util.Arrays;\n import java.util.Date;\n import java.util.NoSuchElementException;\n-import java.util.List;\n import java.util.ArrayList;\n import java.io.File;\n import java.util.zip.ZipException;\n import org.apache.commons.compress.archivers.EntryStreamOffsets;\n import org.apache.commons.compress.archivers.ArchiveEntry;\n import java.util.zip.ZipEntry;\n \n@@ -37,16 +36,16 @@\n     private static final ZipExtraField[] noExtraFields;\n     private long localHeaderOffset;\n     private long dataOffset;\n     private boolean isStreamContiguous;\n     private ZipArchiveEntry.NameSource nameSource;\n     private ZipArchiveEntry.CommentSource commentSource;\n     \n-    public ZipArchiveEntry(final String name) {\n-        super(name);\n+    public ZipArchiveEntry(final String s) {\n+        super(s);\n         this.method = -1;\n         this.size = -1L;\n         this.internalAttributes = 0;\n         this.platform = 0;\n         this.externalAttributes = 0L;\n         this.alignment = 0;\n         this.unparseableExtra = null;\n@@ -54,19 +53,19 @@\n         this.rawName = null;\n         this.gpb = new GeneralPurposeBit();\n         this.localHeaderOffset = -1L;\n         this.dataOffset = -1L;\n         this.isStreamContiguous = false;\n         this.nameSource = ZipArchiveEntry.NameSource.NAME;\n         this.commentSource = ZipArchiveEntry.CommentSource.COMMENT;\n-        this.setName(name);\n+        this.setName(s);\n     }\n     \n-    public ZipArchiveEntry(final ZipEntry entry) throws ZipException {\n-        super(entry);\n+    public ZipArchiveEntry(final ZipEntry e) throws ZipException {\n+        super(e);\n         this.method = -1;\n         this.size = -1L;\n         this.internalAttributes = 0;\n         this.platform = 0;\n         this.externalAttributes = 0L;\n         this.alignment = 0;\n         this.unparseableExtra = null;\n@@ -74,88 +73,88 @@\n         this.rawName = null;\n         this.gpb = new GeneralPurposeBit();\n         this.localHeaderOffset = -1L;\n         this.dataOffset = -1L;\n         this.isStreamContiguous = false;\n         this.nameSource = ZipArchiveEntry.NameSource.NAME;\n         this.commentSource = ZipArchiveEntry.CommentSource.COMMENT;\n-        this.setName(entry.getName());\n-        final byte[] extra = entry.getExtra();\n+        this.setName(e.getName());\n+        final byte[] extra = e.getExtra();\n         if (extra != null) {\n             this.setExtraFields(ExtraFieldUtils.parse(extra, true, ExtraFieldUtils.UnparseableExtraField.READ));\n         }\n         else {\n             this.setExtra();\n         }\n-        this.setMethod(entry.getMethod());\n-        this.size = entry.getSize();\n+        this.setMethod(e.getMethod());\n+        this.size = e.getSize();\n     }\n     \n-    public ZipArchiveEntry(final ZipArchiveEntry entry) throws ZipException {\n-        this((ZipEntry)entry);\n-        this.setInternalAttributes(entry.getInternalAttributes());\n-        this.setExternalAttributes(entry.getExternalAttributes());\n+    public ZipArchiveEntry(final ZipArchiveEntry zipArchiveEntry) throws ZipException {\n+        this((ZipEntry)zipArchiveEntry);\n+        this.setInternalAttributes(zipArchiveEntry.getInternalAttributes());\n+        this.setExternalAttributes(zipArchiveEntry.getExternalAttributes());\n         this.setExtraFields(this.getAllExtraFieldsNoCopy());\n-        this.setPlatform(entry.getPlatform());\n-        final GeneralPurposeBit other = entry.getGeneralPurposeBit();\n-        this.setGeneralPurposeBit((other == null) ? null : ((GeneralPurposeBit)other.clone()));\n+        this.setPlatform(zipArchiveEntry.getPlatform());\n+        final GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();\n+        this.setGeneralPurposeBit((generalPurposeBit == null) ? null : ((GeneralPurposeBit)generalPurposeBit.clone()));\n     }\n     \n     protected ZipArchiveEntry() {\n         this(\"\");\n     }\n     \n-    public ZipArchiveEntry(final File inputFile, final String entryName) {\n-        this((inputFile.isDirectory() && !entryName.endsWith(\"/\")) ? (entryName + \"/\") : entryName);\n-        if (inputFile.isFile()) {\n-            this.setSize(inputFile.length());\n+    public ZipArchiveEntry(final File file, final String str) {\n+        this((file.isDirectory() && !str.endsWith(\"/\")) ? (str + \"/\") : str);\n+        if (file.isFile()) {\n+            this.setSize(file.length());\n         }\n-        this.setTime(inputFile.lastModified());\n+        this.setTime(file.lastModified());\n     }\n     \n     @Override\n     public Object clone() {\n-        final ZipArchiveEntry e = (ZipArchiveEntry)super.clone();\n-        e.setInternalAttributes(this.getInternalAttributes());\n-        e.setExternalAttributes(this.getExternalAttributes());\n-        e.setExtraFields(this.getAllExtraFieldsNoCopy());\n-        return e;\n+        final ZipArchiveEntry zipArchiveEntry = (ZipArchiveEntry)super.clone();\n+        zipArchiveEntry.setInternalAttributes(this.getInternalAttributes());\n+        zipArchiveEntry.setExternalAttributes(this.getExternalAttributes());\n+        zipArchiveEntry.setExtraFields(this.getAllExtraFieldsNoCopy());\n+        return zipArchiveEntry;\n     }\n     \n     @Override\n     public int getMethod() {\n         return this.method;\n     }\n     \n     @Override\n-    public void setMethod(final int method) {\n-        if (method < 0) {\n-            throw new IllegalArgumentException(\"ZIP compression method can not be negative: \" + method);\n+    public void setMethod(final int n) {\n+        if (n < 0) {\n+            throw new IllegalArgumentException(\"ZIP compression method can not be negative: \" + n);\n         }\n-        this.method = method;\n+        this.method = n;\n     }\n     \n     public int getInternalAttributes() {\n         return this.internalAttributes;\n     }\n     \n-    public void setInternalAttributes(final int value) {\n-        this.internalAttributes = value;\n+    public void setInternalAttributes(final int internalAttributes) {\n+        this.internalAttributes = internalAttributes;\n     }\n     \n     public long getExternalAttributes() {\n         return this.externalAttributes;\n     }\n     \n-    public void setExternalAttributes(final long value) {\n-        this.externalAttributes = value;\n+    public void setExternalAttributes(final long externalAttributes) {\n+        this.externalAttributes = externalAttributes;\n     }\n     \n-    public void setUnixMode(final int mode) {\n-        this.setExternalAttributes(mode << 16 | (((mode & 0x80) == 0x0) ? 1 : 0) | (this.isDirectory() ? 16 : 0));\n+    public void setUnixMode(final int n) {\n+        this.setExternalAttributes(n << 16 | (((n & 0x80) == 0x0) ? 1 : 0) | (this.isDirectory() ? 16 : 0));\n         this.platform = 3;\n     }\n     \n     public int getUnixMode() {\n         return (this.platform != 3) ? 0 : ((int)(this.getExternalAttributes() >> 16 & 0xFFFFL));\n     }\n     \n@@ -171,185 +170,182 @@\n         this.platform = platform;\n     }\n     \n     protected int getAlignment() {\n         return this.alignment;\n     }\n     \n-    public void setAlignment(final int alignment) {\n-        if ((alignment & alignment - 1) != 0x0 || alignment > 65535) {\n-            throw new IllegalArgumentException(\"Invalid value for alignment, must be power of two and no bigger than 65535 but is \" + alignment);\n-        }\n-        this.alignment = alignment;\n+    public void setAlignment(final int n) {\n+        if ((n & n - 1) != 0x0 || n > 65535) {\n+            throw new IllegalArgumentException(\"Invalid value for alignment, must be power of two and no bigger than 65535 but is \" + n);\n+        }\n+        this.alignment = n;\n     }\n     \n-    public void setExtraFields(final ZipExtraField[] fields) {\n-        final List<ZipExtraField> newFields = new ArrayList<ZipExtraField>();\n-        for (final ZipExtraField field : fields) {\n-            if (field instanceof UnparseableExtraFieldData) {\n-                this.unparseableExtra = (UnparseableExtraFieldData)field;\n+    public void setExtraFields(final ZipExtraField[] array) {\n+        final ArrayList list = new ArrayList();\n+        for (final ZipExtraField zipExtraField : array) {\n+            if (zipExtraField instanceof UnparseableExtraFieldData) {\n+                this.unparseableExtra = (UnparseableExtraFieldData)zipExtraField;\n             }\n             else {\n-                newFields.add(field);\n+                list.add(zipExtraField);\n             }\n         }\n-        this.extraFields = newFields.toArray(new ZipExtraField[newFields.size()]);\n+        this.extraFields = (ZipExtraField[])list.toArray(new ZipExtraField[list.size()]);\n         this.setExtra();\n     }\n     \n     public ZipExtraField[] getExtraFields() {\n         return this.getParseableExtraFields();\n     }\n     \n-    public ZipExtraField[] getExtraFields(final boolean includeUnparseable) {\n-        return includeUnparseable ? this.getAllExtraFields() : this.getParseableExtraFields();\n+    public ZipExtraField[] getExtraFields(final boolean b) {\n+        return b ? this.getAllExtraFields() : this.getParseableExtraFields();\n     }\n     \n     private ZipExtraField[] getParseableExtraFieldsNoCopy() {\n         if (this.extraFields == null) {\n             return ZipArchiveEntry.noExtraFields;\n         }\n         return this.extraFields;\n     }\n     \n     private ZipExtraField[] getParseableExtraFields() {\n-        final ZipExtraField[] parseableExtraFields = this.getParseableExtraFieldsNoCopy();\n-        return (parseableExtraFields == this.extraFields) ? this.copyOf(parseableExtraFields) : parseableExtraFields;\n+        final ZipExtraField[] parseableExtraFieldsNoCopy = this.getParseableExtraFieldsNoCopy();\n+        return (parseableExtraFieldsNoCopy == this.extraFields) ? this.copyOf(parseableExtraFieldsNoCopy) : parseableExtraFieldsNoCopy;\n     }\n     \n     private ZipExtraField[] getAllExtraFieldsNoCopy() {\n         if (this.extraFields == null) {\n             return this.getUnparseableOnly();\n         }\n         return (this.unparseableExtra != null) ? this.getMergedFields() : this.extraFields;\n     }\n     \n-    private ZipExtraField[] copyOf(final ZipExtraField[] src) {\n-        return this.copyOf(src, src.length);\n+    private ZipExtraField[] copyOf(final ZipExtraField[] array) {\n+        return this.copyOf(array, array.length);\n     }\n     \n-    private ZipExtraField[] copyOf(final ZipExtraField[] src, final int length) {\n-        final ZipExtraField[] cpy = new ZipExtraField[length];\n-        System.arraycopy(src, 0, cpy, 0, Math.min(src.length, length));\n-        return cpy;\n+    private ZipExtraField[] copyOf(final ZipExtraField[] array, final int b) {\n+        final ZipExtraField[] array2 = new ZipExtraField[b];\n+        System.arraycopy(array, 0, array2, 0, Math.min(array.length, b));\n+        return array2;\n     }\n     \n     private ZipExtraField[] getMergedFields() {\n-        final ZipExtraField[] zipExtraFields = this.copyOf(this.extraFields, this.extraFields.length + 1);\n-        zipExtraFields[this.extraFields.length] = (ZipExtraField)this.unparseableExtra;\n-        return zipExtraFields;\n+        final ZipExtraField[] copy = this.copyOf(this.extraFields, this.extraFields.length + 1);\n+        copy[this.extraFields.length] = (ZipExtraField)this.unparseableExtra;\n+        return copy;\n     }\n     \n     private ZipExtraField[] getUnparseableOnly() {\n         return (this.unparseableExtra == null) ? ZipArchiveEntry.noExtraFields : new ZipExtraField[] { (ZipExtraField)this.unparseableExtra };\n     }\n     \n     private ZipExtraField[] getAllExtraFields() {\n         final ZipExtraField[] allExtraFieldsNoCopy = this.getAllExtraFieldsNoCopy();\n         return (allExtraFieldsNoCopy == this.extraFields) ? this.copyOf(allExtraFieldsNoCopy) : allExtraFieldsNoCopy;\n     }\n     \n-    public void addExtraField(final ZipExtraField ze) {\n-        if (ze instanceof UnparseableExtraFieldData) {\n-            this.unparseableExtra = (UnparseableExtraFieldData)ze;\n+    public void addExtraField(final ZipExtraField zipExtraField) {\n+        if (zipExtraField instanceof UnparseableExtraFieldData) {\n+            this.unparseableExtra = (UnparseableExtraFieldData)zipExtraField;\n         }\n         else if (this.extraFields == null) {\n-            this.extraFields = new ZipExtraField[] { ze };\n+            this.extraFields = new ZipExtraField[] { zipExtraField };\n         }\n         else {\n-            if (this.getExtraField(ze.getHeaderId()) != null) {\n-                this.removeExtraField(ze.getHeaderId());\n+            if (this.getExtraField(zipExtraField.getHeaderId()) != null) {\n+                this.removeExtraField(zipExtraField.getHeaderId());\n             }\n-            final ZipExtraField[] zipExtraFields = this.copyOf(this.extraFields, this.extraFields.length + 1);\n-            zipExtraFields[zipExtraFields.length - 1] = ze;\n-            this.extraFields = zipExtraFields;\n+            final ZipExtraField[] copy = this.copyOf(this.extraFields, this.extraFields.length + 1);\n+            copy[copy.length - 1] = zipExtraField;\n+            this.extraFields = copy;\n         }\n         this.setExtra();\n     }\n     \n-    public void addAsFirstExtraField(final ZipExtraField ze) {\n-        if (ze instanceof UnparseableExtraFieldData) {\n-            this.unparseableExtra = (UnparseableExtraFieldData)ze;\n+    public void addAsFirstExtraField(final ZipExtraField zipExtraField) {\n+        if (zipExtraField instanceof UnparseableExtraFieldData) {\n+            this.unparseableExtra = (UnparseableExtraFieldData)zipExtraField;\n         }\n         else {\n-            if (this.getExtraField(ze.getHeaderId()) != null) {\n-                this.removeExtraField(ze.getHeaderId());\n+            if (this.getExtraField(zipExtraField.getHeaderId()) != null) {\n+                this.removeExtraField(zipExtraField.getHeaderId());\n             }\n-            final ZipExtraField[] copy = this.extraFields;\n-            final int newLen = (this.extraFields != null) ? (this.extraFields.length + 1) : 1;\n-            (this.extraFields = new ZipExtraField[newLen])[0] = ze;\n-            if (copy != null) {\n-                System.arraycopy(copy, 0, this.extraFields, 1, this.extraFields.length - 1);\n+            final ZipExtraField[] extraFields = this.extraFields;\n+            (this.extraFields = new ZipExtraField[(this.extraFields != null) ? (this.extraFields.length + 1) : 1])[0] = zipExtraField;\n+            if (extraFields != null) {\n+                System.arraycopy(extraFields, 0, this.extraFields, 1, this.extraFields.length - 1);\n             }\n         }\n         this.setExtra();\n     }\n     \n-    public void removeExtraField(final ZipShort type) {\n+    public void removeExtraField(final ZipShort zipShort) {\n         if (this.extraFields == null) {\n             throw new NoSuchElementException();\n         }\n-        final List<ZipExtraField> newResult = new ArrayList<ZipExtraField>();\n-        for (final ZipExtraField extraField : this.extraFields) {\n-            if (!type.equals((Object)extraField.getHeaderId())) {\n-                newResult.add(extraField);\n+        final ArrayList list = new ArrayList();\n+        for (final ZipExtraField zipExtraField : this.extraFields) {\n+            if (!zipShort.equals((Object)zipExtraField.getHeaderId())) {\n+                list.add(zipExtraField);\n             }\n         }\n-        if (this.extraFields.length == newResult.size()) {\n+        if (this.extraFields.length == list.size()) {\n             throw new NoSuchElementException();\n         }\n-        this.extraFields = newResult.toArray(new ZipExtraField[newResult.size()]);\n+        this.extraFields = (ZipExtraField[])list.toArray(new ZipExtraField[list.size()]);\n         this.setExtra();\n     }\n     \n     public void removeUnparseableExtraFieldData() {\n         if (this.unparseableExtra == null) {\n             throw new NoSuchElementException();\n         }\n         this.unparseableExtra = null;\n         this.setExtra();\n     }\n     \n-    public ZipExtraField getExtraField(final ZipShort type) {\n+    public ZipExtraField getExtraField(final ZipShort zipShort) {\n         if (this.extraFields != null) {\n-            for (final ZipExtraField extraField : this.extraFields) {\n-                if (type.equals((Object)extraField.getHeaderId())) {\n-                    return extraField;\n+            for (final ZipExtraField zipExtraField : this.extraFields) {\n+                if (zipShort.equals((Object)zipExtraField.getHeaderId())) {\n+                    return zipExtraField;\n                 }\n             }\n         }\n         return null;\n     }\n     \n     public UnparseableExtraFieldData getUnparseableExtraFieldData() {\n         return this.unparseableExtra;\n     }\n     \n     @Override\n-    public void setExtra(final byte[] extra) throws RuntimeException {\n+    public void setExtra(final byte[] array) throws RuntimeException {\n         try {\n-            final ZipExtraField[] local = ExtraFieldUtils.parse(extra, true, ExtraFieldUtils.UnparseableExtraField.READ);\n-            this.mergeExtraFields(local, true);\n+            this.mergeExtraFields(ExtraFieldUtils.parse(array, true, ExtraFieldUtils.UnparseableExtraField.READ), true);\n         }\n-        catch (final ZipException e) {\n-            throw new RuntimeException(\"Error parsing extra fields for entry: \" + this.getName() + \" - \" + e.getMessage(), e);\n+        catch (final ZipException cause) {\n+            throw new RuntimeException(\"Error parsing extra fields for entry: \" + this.getName() + \" - \" + cause.getMessage(), cause);\n         }\n     }\n     \n     protected void setExtra() {\n         super.setExtra(ExtraFieldUtils.mergeLocalFileDataData(this.getAllExtraFieldsNoCopy()));\n     }\n     \n-    public void setCentralDirectoryExtra(final byte[] b) {\n+    public void setCentralDirectoryExtra(final byte[] array) {\n         try {\n-            final ZipExtraField[] central = ExtraFieldUtils.parse(b, false, ExtraFieldUtils.UnparseableExtraField.READ);\n-            this.mergeExtraFields(central, false);\n+            this.mergeExtraFields(ExtraFieldUtils.parse(array, false, ExtraFieldUtils.UnparseableExtraField.READ), false);\n         }\n-        catch (final ZipException e) {\n-            throw new RuntimeException(e.getMessage(), e);\n+        catch (final ZipException cause) {\n+            throw new RuntimeException(cause.getMessage(), cause);\n         }\n     }\n     \n     public byte[] getLocalFileDataExtra() {\n         final byte[] extra = this.getExtra();\n         return (extra != null) ? extra : ZipArchiveEntry.EMPTY;\n     }\n@@ -364,19 +360,19 @@\n     }\n     \n     @Override\n     public boolean isDirectory() {\n         return this.getName().endsWith(\"/\");\n     }\n     \n-    protected void setName(String name) {\n-        if (name != null && this.getPlatform() == 0 && !name.contains(\"/\")) {\n-            name = name.replace('\\\\', '/');\n+    protected void setName(String replace) {\n+        if (replace != null && this.getPlatform() == 0 && !replace.contains(\"/\")) {\n+            replace = replace.replace('\\\\', '/');\n         }\n-        this.name = name;\n+        this.name = replace;\n     }\n     \n     @Override\n     public long getSize() {\n         return this.size;\n     }\n     \n@@ -391,17 +387,17 @@\n     protected void setName(final String name, final byte[] rawName) {\n         this.setName(name);\n         this.rawName = rawName;\n     }\n     \n     public byte[] getRawName() {\n         if (this.rawName != null) {\n-            final byte[] b = new byte[this.rawName.length];\n-            System.arraycopy(this.rawName, 0, b, 0, this.rawName.length);\n-            return b;\n+            final byte[] array = new byte[this.rawName.length];\n+            System.arraycopy(this.rawName, 0, array, 0, this.rawName.length);\n+            return array;\n         }\n         return null;\n     }\n     \n     protected long getLocalHeaderOffset() {\n         return this.localHeaderOffset;\n     }\n@@ -431,78 +427,78 @@\n         return this.getName().hashCode();\n     }\n     \n     public GeneralPurposeBit getGeneralPurposeBit() {\n         return this.gpb;\n     }\n     \n-    public void setGeneralPurposeBit(final GeneralPurposeBit b) {\n-        this.gpb = b;\n+    public void setGeneralPurposeBit(final GeneralPurposeBit gpb) {\n+        this.gpb = gpb;\n     }\n     \n-    private void mergeExtraFields(final ZipExtraField[] f, final boolean local) throws ZipException {\n+    private void mergeExtraFields(final ZipExtraField[] extraFields, final boolean b) throws ZipException {\n         if (this.extraFields == null) {\n-            this.setExtraFields(f);\n+            this.setExtraFields(extraFields);\n         }\n         else {\n-            for (final ZipExtraField element : f) {\n-                ZipExtraField existing;\n-                if (element instanceof UnparseableExtraFieldData) {\n-                    existing = (ZipExtraField)this.unparseableExtra;\n+            for (final ZipExtraField zipExtraField : extraFields) {\n+                Object o;\n+                if (zipExtraField instanceof UnparseableExtraFieldData) {\n+                    o = this.unparseableExtra;\n                 }\n                 else {\n-                    existing = this.getExtraField(element.getHeaderId());\n+                    o = this.getExtraField(zipExtraField.getHeaderId());\n                 }\n-                if (existing == null) {\n-                    this.addExtraField(element);\n+                if (o == null) {\n+                    this.addExtraField(zipExtraField);\n                 }\n-                else if (local) {\n-                    final byte[] b = element.getLocalFileDataData();\n-                    existing.parseFromLocalFileData(b, 0, b.length);\n+                else if (b) {\n+                    final byte[] localFileDataData = zipExtraField.getLocalFileDataData();\n+                    ((ZipExtraField)o).parseFromLocalFileData(localFileDataData, 0, localFileDataData.length);\n                 }\n                 else {\n-                    final byte[] b = element.getCentralDirectoryData();\n-                    existing.parseFromCentralDirectoryData(b, 0, b.length);\n+                    final byte[] centralDirectoryData = zipExtraField.getCentralDirectoryData();\n+                    ((ZipExtraField)o).parseFromCentralDirectoryData(centralDirectoryData, 0, centralDirectoryData.length);\n                 }\n             }\n             this.setExtra();\n         }\n     }\n     \n     public Date getLastModifiedDate() {\n         return new Date(this.getTime());\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (obj == null || this.getClass() != obj.getClass()) {\n+        if (o == null || this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final ZipArchiveEntry other = (ZipArchiveEntry)obj;\n-        final String myName = this.getName();\n-        final String otherName = other.getName();\n-        if (myName == null) {\n-            if (otherName != null) {\n+        final ZipArchiveEntry zipArchiveEntry = (ZipArchiveEntry)o;\n+        final String name = this.getName();\n+        final String name2 = zipArchiveEntry.getName();\n+        if (name == null) {\n+            if (name2 != null) {\n                 return false;\n             }\n         }\n-        else if (!myName.equals(otherName)) {\n+        else if (!name.equals(name2)) {\n             return false;\n         }\n-        String myComment = this.getComment();\n-        String otherComment = other.getComment();\n-        if (myComment == null) {\n-            myComment = \"\";\n+        String comment = this.getComment();\n+        String comment2 = zipArchiveEntry.getComment();\n+        if (comment == null) {\n+            comment = \"\";\n         }\n-        if (otherComment == null) {\n-            otherComment = \"\";\n+        if (comment2 == null) {\n+            comment2 = \"\";\n         }\n-        return this.getTime() == other.getTime() && myComment.equals(otherComment) && this.getInternalAttributes() == other.getInternalAttributes() && this.getPlatform() == other.getPlatform() && this.getExternalAttributes() == other.getExternalAttributes() && this.getMethod() == other.getMethod() && this.getSize() == other.getSize() && this.getCrc() == other.getCrc() && this.getCompressedSize() == other.getCompressedSize() && Arrays.equals(this.getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(this.getLocalFileDataExtra(), other.getLocalFileDataExtra()) && this.localHeaderOffset == other.localHeaderOffset && this.dataOffset == other.dataOffset && this.gpb.equals((Object)other.gpb);\n+        return this.getTime() == zipArchiveEntry.getTime() && comment.equals(comment2) && this.getInternalAttributes() == zipArchiveEntry.getInternalAttributes() && this.getPlatform() == zipArchiveEntry.getPlatform() && this.getExternalAttributes() == zipArchiveEntry.getExternalAttributes() && this.getMethod() == zipArchiveEntry.getMethod() && this.getSize() == zipArchiveEntry.getSize() && this.getCrc() == zipArchiveEntry.getCrc() && this.getCompressedSize() == zipArchiveEntry.getCompressedSize() && Arrays.equals(this.getCentralDirectoryExtra(), zipArchiveEntry.getCentralDirectoryExtra()) && Arrays.equals(this.getLocalFileDataExtra(), zipArchiveEntry.getLocalFileDataExtra()) && this.localHeaderOffset == zipArchiveEntry.localHeaderOffset && this.dataOffset == zipArchiveEntry.dataOffset && this.gpb.equals((Object)zipArchiveEntry.gpb);\n     }\n     \n     public void setVersionMadeBy(final int versionMadeBy) {\n         this.versionMadeBy = versionMadeBy;\n     }\n     \n     public void setVersionRequired(final int versionRequired) {\n"}]}
