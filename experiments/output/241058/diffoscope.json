{"diffoscope-json-version": 1, "source1": "first/SMTPClient.class", "source2": "second/SMTPClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,114 +1,112 @@\n \n package org.apache.commons.net.smtp;\n \n import org.apache.commons.net.io.DotTerminatedMessageWriter;\n import java.io.Writer;\n-import java.net.InetAddress;\n import java.io.IOException;\n \n public class SMTPClient extends SMTP\n {\n     public SMTPClient() {\n     }\n     \n-    public SMTPClient(final String encoding) {\n-        super(encoding);\n+    public SMTPClient(final String s) {\n+        super(s);\n     }\n     \n     public boolean completePendingCommand() throws IOException {\n         return SMTPReply.isPositiveCompletion(this.getReply());\n     }\n     \n-    public boolean login(final String hostname) throws IOException {\n-        return SMTPReply.isPositiveCompletion(this.helo(hostname));\n+    public boolean login(final String s) throws IOException {\n+        return SMTPReply.isPositiveCompletion(this.helo(s));\n     }\n     \n     public boolean login() throws IOException {\n-        final InetAddress host = this.getLocalAddress();\n-        final String name = host.getHostName();\n-        return name != null && SMTPReply.isPositiveCompletion(this.helo(name));\n+        final String hostName = this.getLocalAddress().getHostName();\n+        return hostName != null && SMTPReply.isPositiveCompletion(this.helo(hostName));\n     }\n     \n-    public boolean setSender(final RelayPath path) throws IOException {\n-        return SMTPReply.isPositiveCompletion(this.mail(path.toString()));\n+    public boolean setSender(final RelayPath relayPath) throws IOException {\n+        return SMTPReply.isPositiveCompletion(this.mail(relayPath.toString()));\n     }\n     \n-    public boolean setSender(final String address) throws IOException {\n-        return SMTPReply.isPositiveCompletion(this.mail(\"<\" + address + \">\"));\n+    public boolean setSender(final String str) throws IOException {\n+        return SMTPReply.isPositiveCompletion(this.mail(\"<\" + str + \">\"));\n     }\n     \n-    public boolean addRecipient(final RelayPath path) throws IOException {\n-        return SMTPReply.isPositiveCompletion(this.rcpt(path.toString()));\n+    public boolean addRecipient(final RelayPath relayPath) throws IOException {\n+        return SMTPReply.isPositiveCompletion(this.rcpt(relayPath.toString()));\n     }\n     \n-    public boolean addRecipient(final String address) throws IOException {\n-        return SMTPReply.isPositiveCompletion(this.rcpt(\"<\" + address + \">\"));\n+    public boolean addRecipient(final String str) throws IOException {\n+        return SMTPReply.isPositiveCompletion(this.rcpt(\"<\" + str + \">\"));\n     }\n     \n     public Writer sendMessageData() throws IOException {\n         if (!SMTPReply.isPositiveIntermediate(this.data())) {\n             return null;\n         }\n         return (Writer)new DotTerminatedMessageWriter((Writer)this.writer);\n     }\n     \n-    public boolean sendShortMessageData(final String message) throws IOException {\n-        try (final Writer writer = this.sendMessageData()) {\n-            if (writer == null) {\n+    public boolean sendShortMessageData(final String str) throws IOException {\n+        try (final Writer sendMessageData = this.sendMessageData()) {\n+            if (sendMessageData == null) {\n                 final boolean b = false;\n-                if (writer != null) {\n-                    writer.close();\n+                if (sendMessageData != null) {\n+                    sendMessageData.close();\n                 }\n                 return b;\n             }\n-            writer.write(message);\n+            sendMessageData.write(str);\n         }\n         return this.completePendingCommand();\n     }\n     \n-    public boolean sendSimpleMessage(final String sender, final String recipient, final String message) throws IOException {\n-        return this.setSender(sender) && this.addRecipient(recipient) && this.sendShortMessageData(message);\n+    public boolean sendSimpleMessage(final String sender, final String s, final String s2) throws IOException {\n+        return this.setSender(sender) && this.addRecipient(s) && this.sendShortMessageData(s2);\n     }\n     \n-    public boolean sendSimpleMessage(final String sender, final String[] recipients, final String message) throws IOException {\n-        boolean oneSuccess = false;\n+    public boolean sendSimpleMessage(final String sender, final String[] array, final String s) throws IOException {\n+        boolean b = false;\n         if (!this.setSender(sender)) {\n             return false;\n         }\n-        for (int count = 0; count < recipients.length; ++count) {\n-            if (this.addRecipient(recipients[count])) {\n-                oneSuccess = true;\n+        for (int i = 0; i < array.length; ++i) {\n+            if (this.addRecipient(array[i])) {\n+                b = true;\n             }\n         }\n-        return oneSuccess && this.sendShortMessageData(message);\n+        return b && this.sendShortMessageData(s);\n     }\n     \n     public boolean logout() throws IOException {\n         return SMTPReply.isPositiveCompletion(this.quit());\n     }\n     \n     public boolean reset() throws IOException {\n         return SMTPReply.isPositiveCompletion(this.rset());\n     }\n     \n-    public boolean verify(final String username) throws IOException {\n-        final int result = this.vrfy(username);\n-        return result == 250 || result == 251;\n+    public boolean verify(final String s) throws IOException {\n+        final int vrfy = this.vrfy(s);\n+        return vrfy == 250 || vrfy == 251;\n     }\n     \n     public String listHelp() throws IOException {\n         if (SMTPReply.isPositiveCompletion(this.help())) {\n             return this.getReplyString();\n         }\n         return null;\n     }\n     \n-    public String listHelp(final String command) throws IOException {\n-        if (SMTPReply.isPositiveCompletion(this.help(command))) {\n+    public String listHelp(final String s) throws IOException {\n+        if (SMTPReply.isPositiveCompletion(this.help(s))) {\n             return this.getReplyString();\n         }\n         return null;\n     }\n     \n     public boolean sendNoOp() throws IOException {\n         return SMTPReply.isPositiveCompletion(this.noop());\n"}]}
