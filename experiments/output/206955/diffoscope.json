{"diffoscope-json-version": 1, "source1": "first/JiraCsv249Test.class", "source2": "second/JiraCsv249Test.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,35 +1,33 @@\n \n package org.apache.commons.csv.issues;\n \n+import org.apache.commons.csv.CSVRecord;\n import org.junit.jupiter.api.Test;\n import java.io.IOException;\n-import org.apache.commons.csv.CSVRecord;\n-import java.util.List;\n import org.junit.jupiter.api.Assertions;\n import java.io.Reader;\n import org.apache.commons.csv.CSVParser;\n import java.io.StringReader;\n import org.apache.commons.csv.CSVPrinter;\n import java.io.StringWriter;\n import org.apache.commons.csv.CSVFormat;\n \n public class JiraCsv249Test\n {\n     @Test\n     public void testJiraCsv249() throws IOException {\n-        final CSVFormat csvFormat = CSVFormat.DEFAULT.withEscape('\\\\');\n+        final CSVFormat withEscape = CSVFormat.DEFAULT.withEscape('\\\\');\n         final StringWriter stringWriter = new StringWriter();\n-        try (final CSVPrinter printer = new CSVPrinter((Appendable)stringWriter, csvFormat)) {\n-            printer.printRecord(new Object[] { \"foo \\\\\", \"bar\" });\n+        try (final CSVPrinter csvPrinter = new CSVPrinter((Appendable)stringWriter, withEscape)) {\n+            csvPrinter.printRecord(new Object[] { \"foo \\\\\", \"bar\" });\n         }\n-        final StringReader stringReader = new StringReader(stringWriter.toString());\n-        List<CSVRecord> records;\n-        try (final CSVParser parser = new CSVParser((Reader)stringReader, csvFormat)) {\n-            records = parser.getRecords();\n+        Iterable records;\n+        try (final CSVParser csvParser = new CSVParser((Reader)new StringReader(stringWriter.toString()), withEscape)) {\n+            records = csvParser.getRecords();\n         }\n-        records.forEach(record -> {\n-            Assertions.assertEquals((Object)\"foo \\\\\", (Object)record.get(0));\n-            Assertions.assertEquals((Object)\"bar\", (Object)record.get(1));\n+        records.forEach(csvRecord -> {\n+            Assertions.assertEquals((Object)\"foo \\\\\", (Object)csvRecord.get(0));\n+            Assertions.assertEquals((Object)\"bar\", (Object)csvRecord.get(1));\n         });\n     }\n }\n"}]}
