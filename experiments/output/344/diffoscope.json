{"diffoscope-json-version": 1, "source1": "first/InstConstraintVisitor.class", "source2": "second/InstConstraintVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -375,15 +375,15 @@\n             }\n             if (this.stack().peek() == Type.NULL) {\n                 return;\n             }\n             if (!(this.stack().peek() instanceof ReferenceType)) {\n                 this.constraintViolated((Instruction)o, \"Reference type expected on top of stack, but is: '\" + this.stack().peek() + \"'.\");\n             }\n-            this.referenceTypeIsInitialized(o, (ReferenceType)(ReferenceType)this.stack().peek());\n+            this.referenceTypeIsInitialized((Instruction)o, (ReferenceType)this.stack().peek());\n         }\n         else if (!method_type.equals((Object)this.stack().peek())) {\n             this.constraintViolated((Instruction)o, \"Current method has return type of '\" + this.mg.getType() + \"' expecting a '\" + method_type + \"' on top of the stack. But stack top is a '\" + this.stack().peek() + \"'.\");\n         }\n     }\n     \n     public void visitAALOAD(final AALOAD o) {\n@@ -1147,22 +1147,22 @@\n         }\n     }\n     \n     public void visitIFNONNULL(final IFNONNULL o) {\n         if (!(this.stack().peek() instanceof ReferenceType)) {\n             this.constraintViolated((Instruction)o, \"The value at the stack top is not of a ReferenceType, but of type '\" + this.stack().peek() + \"'.\");\n         }\n-        this.referenceTypeIsInitialized(o, (ReferenceType)(ReferenceType)this.stack().peek());\n+        this.referenceTypeIsInitialized((Instruction)o, (ReferenceType)this.stack().peek());\n     }\n     \n     public void visitIFNULL(final IFNULL o) {\n         if (!(this.stack().peek() instanceof ReferenceType)) {\n             this.constraintViolated((Instruction)o, \"The value at the stack top is not of a ReferenceType, but of type '\" + this.stack().peek() + \"'.\");\n         }\n-        this.referenceTypeIsInitialized(o, (ReferenceType)(ReferenceType)this.stack().peek());\n+        this.referenceTypeIsInitialized((Instruction)o, (ReferenceType)this.stack().peek());\n     }\n     \n     public void visitIINC(final IINC o) {\n         if (this.locals().maxLocals() <= ((o.getType(this.cpg).getSize() == 1) ? o.getIndex() : (o.getIndex() + 1))) {\n             this.constraintViolated((Instruction)o, \"The 'index' is not a valid index into the local variable array.\");\n         }\n         this.indexOfInt((Instruction)o, this.locals().get(o.getIndex()));\n"}]}
