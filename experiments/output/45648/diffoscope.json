{"diffoscope-json-version": 1, "source1": "first/IOFunction.class", "source2": "second/IOFunction.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,40 +10,40 @@\n @FunctionalInterface\n public interface IOFunction<T, R>\n {\n     R apply(final T p0) throws IOException;\n     \n     default <V> IOFunction<V, R> compose(final IOFunction<? super V, ? extends T> before) {\n         Objects.requireNonNull(before);\n-        return v -> this.apply(before.apply(v));\n+        return v -> this.apply(ioFunction.apply(v));\n     }\n     \n     default <V> IOFunction<V, R> compose(final Function<? super V, ? extends T> before) {\n         Objects.requireNonNull(before);\n-        return v -> this.apply(before.apply(v));\n+        return v -> this.apply(function.apply(v));\n     }\n     \n     default IOSupplier<R> compose(final IOSupplier<? extends T> before) {\n         Objects.requireNonNull(before);\n         return (IOSupplier<R>)(() -> this.apply(before.get()));\n     }\n     \n     default IOSupplier<R> compose(final Supplier<? extends T> before) {\n         Objects.requireNonNull(before);\n         return (IOSupplier<R>)(() -> this.apply(before.get()));\n     }\n     \n     default <V> IOFunction<T, V> andThen(final IOFunction<? super R, ? extends V> after) {\n         Objects.requireNonNull(after);\n-        return t -> after.apply(this.apply(t));\n+        return t -> ioFunction.apply(this.apply(t));\n     }\n     \n     default <V> IOFunction<T, V> andThen(final Function<? super R, ? extends V> after) {\n         Objects.requireNonNull(after);\n-        return t -> after.apply(this.apply(t));\n+        return t -> function.apply(this.apply(t));\n     }\n     \n     default IOConsumer<T> andThen(final IOConsumer<? super R> after) {\n         Objects.requireNonNull(after);\n         return (IOConsumer<T>)(t -> after.accept(this.apply(t)));\n     }\n     \n"}]}
