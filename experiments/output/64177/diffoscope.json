{"diffoscope-json-version": 1, "source1": "first/Folder.class", "source2": "second/Folder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,16 +1,10 @@\n \n package org.apache.commons.compress.archivers.sevenz;\n \n-import java.lang.invoke.CallSite;\n-import java.lang.reflect.UndeclaredThrowableException;\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.StringConcatFactory;\n-import java.lang.invoke.MethodType;\n-import java.lang.invoke.MethodHandles;\n import java.util.LinkedList;\n \n class Folder\n {\n     Coder[] coders;\n     long totalInputStreams;\n     long totalOutputStreams;\n@@ -70,53 +64,10 @@\n             }\n         }\n         return 0L;\n     }\n     \n     @Override\n     public String toString() {\n-        return \"Folder with \" + this.coders.length + \" coders, \" + this.totalInputStreams + \" input streams, \" + this.totalOutputStreams + \" output streams, \" + this.bindPairs.length + \" bind pairs, \" + this.packedStreams.length + \" packed streams, \" + this.unpackSizes.length + \" unpack sizes, \" + (this.hasCrc ? /* invokedynamic(!) */ProcyonInvokeDynamicHelper_1.invoke(this.crc) : \"without CRC\") + \" and \" + this.numUnpackSubStreams + \" unpack streams\";\n-    }\n-    \n-    // This helper class was generated by Procyon to approximate the behavior of an\n-    // 'invokedynamic' instruction that it doesn't know how to interpret.\n-    private static final class ProcyonInvokeDynamicHelper_1\n-    {\n-        private static final MethodHandles.Lookup LOOKUP = MethodHandles.lookup();\n-        private static MethodHandle handle;\n-        private static volatile int fence;\n-        \n-        private static MethodHandle handle() {\n-            final MethodHandle handle = ProcyonInvokeDynamicHelper_1.handle;\n-            if (handle != null)\n-                return handle;\n-            return ProcyonInvokeDynamicHelper_1.ensureHandle();\n-        }\n-        \n-        private static MethodHandle ensureHandle() {\n-            ProcyonInvokeDynamicHelper_1.fence = 0;\n-            MethodHandle handle = ProcyonInvokeDynamicHelper_1.handle;\n-            if (handle == null) {\n-                MethodHandles.Lookup lookup = ProcyonInvokeDynamicHelper_1.LOOKUP;\n-                try {\n-                    handle = ((CallSite)StringConcatFactory.makeConcatWithConstants(lookup, \"makeConcatWithConstants\", MethodType.methodType(String.class, long.class), \"with CRC \\u0001\")).dynamicInvoker();\n-                }\n-                catch (Throwable t) {\n-                    throw new UndeclaredThrowableException(t);\n-                }\n-                ProcyonInvokeDynamicHelper_1.fence = 1;\n-                ProcyonInvokeDynamicHelper_1.handle = handle;\n-                ProcyonInvokeDynamicHelper_1.fence = 0;\n-            }\n-            return handle;\n-        }\n-        \n-        private static String invoke(long p0) {\n-            try {\n-                return ProcyonInvokeDynamicHelper_1.handle().invokeExact(p0);\n-            }\n-            catch (Throwable t) {\n-                throw new UndeclaredThrowableException(t);\n-            }\n-        }\n+        return \"Folder with \" + this.coders.length + \" coders, \" + this.totalInputStreams + \" input streams, \" + this.totalOutputStreams + \" output streams, \" + this.bindPairs.length + \" bind pairs, \" + this.packedStreams.length + \" packed streams, \" + this.unpackSizes.length + \" unpack sizes, \" + (this.hasCrc ? (\"with CRC \" + this.crc) : \"without CRC\") + \" and \" + this.numUnpackSubStreams + \" unpack streams\";\n     }\n }\n"}]}
