{"diffoscope-json-version": 1, "source1": "first/TimedSemaphore.class", "source2": "second/TimedSemaphore.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,31 +19,31 @@\n     private long totalAcquireCount;\n     private long periodCount;\n     private int limit;\n     private int acquireCount;\n     private int lastCallsPerPeriod;\n     private boolean shutdown;\n     \n-    public TimedSemaphore(final long timePeriod, final TimeUnit timeUnit, final int limit) {\n-        this(null, timePeriod, timeUnit, limit);\n+    public TimedSemaphore(final long n, final TimeUnit timeUnit, final int n2) {\n+        this(null, n, timeUnit, n2);\n     }\n     \n-    public TimedSemaphore(final ScheduledExecutorService service, final long timePeriod, final TimeUnit timeUnit, final int limit) {\n-        Validate.inclusiveBetween(1L, Long.MAX_VALUE, timePeriod, \"Time period must be greater than 0!\");\n-        this.period = timePeriod;\n-        this.unit = timeUnit;\n-        if (service != null) {\n-            this.executorService = service;\n+    public TimedSemaphore(final ScheduledExecutorService executorService, final long period, final TimeUnit unit, final int limit) {\n+        Validate.inclusiveBetween(1L, Long.MAX_VALUE, period, \"Time period must be greater than 0!\");\n+        this.period = period;\n+        this.unit = unit;\n+        if (executorService != null) {\n+            this.executorService = executorService;\n             this.ownExecutor = false;\n         }\n         else {\n-            final ScheduledThreadPoolExecutor s = new ScheduledThreadPoolExecutor(1);\n-            s.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n-            s.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n-            this.executorService = s;\n+            final ScheduledThreadPoolExecutor executorService2 = new ScheduledThreadPoolExecutor(1);\n+            executorService2.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\n+            executorService2.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+            this.executorService = executorService2;\n             this.ownExecutor = true;\n         }\n         this.setLimit(limit);\n     }\n     \n     public final synchronized int getLimit() {\n         return this.limit;\n@@ -67,21 +67,21 @@\n     \n     public synchronized boolean isShutdown() {\n         return this.shutdown;\n     }\n     \n     public synchronized void acquire() throws InterruptedException {\n         this.prepareAcquire();\n-        boolean canPass;\n+        boolean acquirePermit;\n         do {\n-            canPass = this.acquirePermit();\n-            if (!canPass) {\n+            acquirePermit = this.acquirePermit();\n+            if (!acquirePermit) {\n                 this.wait();\n             }\n-        } while (!canPass);\n+        } while (!acquirePermit);\n     }\n     \n     public synchronized boolean tryAcquire() {\n         this.prepareAcquire();\n         return this.acquirePermit();\n     }\n     \n"}]}
