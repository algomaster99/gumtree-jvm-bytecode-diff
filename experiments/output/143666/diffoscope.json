{"diffoscope-json-version": 1, "source1": "first/InlineTagUtil.class", "source2": "second/InlineTagUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,14 +12,21 @@\n     private static final Pattern INLINE_TAG_PATTERN;\n     private static final Pattern JAVADOC_PREFIX_PATTERN;\n     private static final Pattern WHITESPACE_PATTERN;\n     private static final Pattern NEWLINE_PATTERN;\n     private static final char LINE_FEED = '\\n';\n     private static final char CARRIAGE_RETURN = '\\r';\n     \n+    static {\n+        INLINE_TAG_PATTERN = Pattern.compile(\"\\\\{@(\\\\p{Alpha}+)\\\\b(.*?)}\", 32);\n+        JAVADOC_PREFIX_PATTERN = Pattern.compile(\"^\\\\s*\\\\*\", 8);\n+        WHITESPACE_PATTERN = Pattern.compile(\"\\\\s+\");\n+        NEWLINE_PATTERN = Pattern.compile(\"\\\\n\");\n+    }\n+    \n     private InlineTagUtil() {\n     }\n     \n     public static List<TagInfo> extractInlineTags(final String... lines) {\n         for (final String line : lines) {\n             if (line.indexOf(10) != -1 || line.indexOf(13) != -1) {\n                 throw new IllegalArgumentException(\"comment lines cannot contain newlines\");\n@@ -62,15 +69,8 @@\n         return matcher.replaceAll(\" \").trim();\n     }\n     \n     private static String removeLeadingJavaDoc(final String source) {\n         final Matcher matcher = InlineTagUtil.JAVADOC_PREFIX_PATTERN.matcher(source);\n         return matcher.replaceAll(\"\");\n     }\n-    \n-    static {\n-        INLINE_TAG_PATTERN = Pattern.compile(\"\\\\{@(\\\\p{Alpha}+)\\\\b(.*?)}\", 32);\n-        JAVADOC_PREFIX_PATTERN = Pattern.compile(\"^\\\\s*\\\\*\", 8);\n-        WHITESPACE_PATTERN = Pattern.compile(\"\\\\s+\");\n-        NEWLINE_PATTERN = Pattern.compile(\"\\\\n\");\n-    }\n }\n"}]}
