{"diffoscope-json-version": 1, "source1": "first/Hex.class", "source2": "second/Hex.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,84 +13,85 @@\n {\n     public static final Charset DEFAULT_CHARSET;\n     public static final String DEFAULT_CHARSET_NAME = \"UTF-8\";\n     private static final char[] DIGITS_LOWER;\n     private static final char[] DIGITS_UPPER;\n     private final Charset charset;\n     \n-    public static byte[] decodeHex(final String data) throws DecoderException {\n-        return decodeHex(data.toCharArray());\n+    public static byte[] decodeHex(final String s) throws DecoderException {\n+        return decodeHex(s.toCharArray());\n     }\n     \n-    public static byte[] decodeHex(final char[] data) throws DecoderException {\n-        final int len = data.length;\n-        if ((len & 0x1) != 0x0) {\n+    public static byte[] decodeHex(final char[] array) throws DecoderException {\n+        final int length = array.length;\n+        if ((length & 0x1) != 0x0) {\n             throw new DecoderException(\"Odd number of characters.\");\n         }\n-        final byte[] out = new byte[len >> 1];\n-        int f;\n-        for (int i = 0, j = 0; j < len; ++j, f |= toDigit(data[j], j), ++j, out[i] = (byte)(f & 0xFF), ++i) {\n-            f = toDigit(data[j], j) << 4;\n+        final byte[] array2 = new byte[length >> 1];\n+        int n2;\n+        int n3;\n+        for (int n = 0, i = 0; i < length; ++i, n3 = (n2 | toDigit(array[i], i)), ++i, array2[n] = (byte)(n3 & 0xFF), ++n) {\n+            n2 = toDigit(array[i], i) << 4;\n         }\n-        return out;\n+        return array2;\n     }\n     \n-    public static char[] encodeHex(final byte[] data) {\n-        return encodeHex(data, true);\n+    public static char[] encodeHex(final byte[] array) {\n+        return encodeHex(array, true);\n     }\n     \n-    public static char[] encodeHex(final ByteBuffer data) {\n-        return encodeHex(data, true);\n+    public static char[] encodeHex(final ByteBuffer byteBuffer) {\n+        return encodeHex(byteBuffer, true);\n     }\n     \n-    public static char[] encodeHex(final byte[] data, final boolean toLowerCase) {\n-        return encodeHex(data, toLowerCase ? Hex.DIGITS_LOWER : Hex.DIGITS_UPPER);\n+    public static char[] encodeHex(final byte[] array, final boolean b) {\n+        return encodeHex(array, b ? Hex.DIGITS_LOWER : Hex.DIGITS_UPPER);\n     }\n     \n-    public static char[] encodeHex(final ByteBuffer data, final boolean toLowerCase) {\n-        return encodeHex(data, toLowerCase ? Hex.DIGITS_LOWER : Hex.DIGITS_UPPER);\n+    public static char[] encodeHex(final ByteBuffer byteBuffer, final boolean b) {\n+        return encodeHex(byteBuffer, b ? Hex.DIGITS_LOWER : Hex.DIGITS_UPPER);\n     }\n     \n-    protected static char[] encodeHex(final byte[] data, final char[] toDigits) {\n-        final int l = data.length;\n-        final char[] out = new char[l << 1];\n+    protected static char[] encodeHex(final byte[] array, final char[] array2) {\n+        final int length = array.length;\n+        final char[] array3 = new char[length << 1];\n         int i = 0;\n-        int j = 0;\n-        while (i < l) {\n-            out[j++] = toDigits[(0xF0 & data[i]) >>> 4];\n-            out[j++] = toDigits[0xF & data[i]];\n+        int n = 0;\n+        while (i < length) {\n+            array3[n++] = array2[(0xF0 & array[i]) >>> 4];\n+            array3[n++] = array2[0xF & array[i]];\n             ++i;\n         }\n-        return out;\n+        return array3;\n     }\n     \n-    protected static char[] encodeHex(final ByteBuffer data, final char[] toDigits) {\n-        return encodeHex(data.array(), toDigits);\n+    protected static char[] encodeHex(final ByteBuffer byteBuffer, final char[] array) {\n+        return encodeHex(byteBuffer.array(), array);\n     }\n     \n-    public static String encodeHexString(final byte[] data) {\n-        return new String(encodeHex(data));\n+    public static String encodeHexString(final byte[] array) {\n+        return new String(encodeHex(array));\n     }\n     \n-    public static String encodeHexString(final byte[] data, final boolean toLowerCase) {\n-        return new String(encodeHex(data, toLowerCase));\n+    public static String encodeHexString(final byte[] array, final boolean b) {\n+        return new String(encodeHex(array, b));\n     }\n     \n-    public static String encodeHexString(final ByteBuffer data) {\n-        return new String(encodeHex(data));\n+    public static String encodeHexString(final ByteBuffer byteBuffer) {\n+        return new String(encodeHex(byteBuffer));\n     }\n     \n-    public static String encodeHexString(final ByteBuffer data, final boolean toLowerCase) {\n-        return new String(encodeHex(data, toLowerCase));\n+    public static String encodeHexString(final ByteBuffer byteBuffer, final boolean b) {\n+        return new String(encodeHex(byteBuffer, b));\n     }\n     \n-    protected static int toDigit(final char ch, final int index) throws DecoderException {\n-        final int digit = Character.digit(ch, 16);\n+    protected static int toDigit(final char c, final int i) throws DecoderException {\n+        final int digit = Character.digit(c, 16);\n         if (digit == -1) {\n-            throw new DecoderException(\"Illegal hexadecimal character \" + ch + \" at index \" + index);\n+            throw new DecoderException(\"Illegal hexadecimal character \" + c + \" at index \" + i);\n         }\n         return digit;\n     }\n     \n     public Hex() {\n         this.charset = Hex.DEFAULT_CHARSET;\n     }\n@@ -99,65 +100,65 @@\n         this.charset = charset;\n     }\n     \n     public Hex(final String charsetName) {\n         this(Charset.forName(charsetName));\n     }\n     \n-    public byte[] decode(final byte[] array) throws DecoderException {\n-        return decodeHex(new String(array, this.getCharset()).toCharArray());\n+    public byte[] decode(final byte[] bytes) throws DecoderException {\n+        return decodeHex(new String(bytes, this.getCharset()).toCharArray());\n     }\n     \n-    public byte[] decode(final ByteBuffer buffer) throws DecoderException {\n-        return decodeHex(new String(buffer.array(), this.getCharset()).toCharArray());\n+    public byte[] decode(final ByteBuffer byteBuffer) throws DecoderException {\n+        return decodeHex(new String(byteBuffer.array(), this.getCharset()).toCharArray());\n     }\n     \n-    public Object decode(final Object object) throws DecoderException {\n-        if (object instanceof String) {\n-            return this.decode(((String)object).toCharArray());\n+    public Object decode(final Object o) throws DecoderException {\n+        if (o instanceof String) {\n+            return this.decode(((String)o).toCharArray());\n         }\n-        if (object instanceof byte[]) {\n-            return this.decode((byte[])object);\n+        if (o instanceof byte[]) {\n+            return this.decode((byte[])o);\n         }\n-        if (object instanceof ByteBuffer) {\n-            return this.decode((ByteBuffer)object);\n+        if (o instanceof ByteBuffer) {\n+            return this.decode((ByteBuffer)o);\n         }\n         try {\n-            return decodeHex((char[])object);\n+            return decodeHex((char[])o);\n         }\n-        catch (final ClassCastException e) {\n-            throw new DecoderException(e.getMessage(), (Throwable)e);\n+        catch (final ClassCastException ex) {\n+            throw new DecoderException(ex.getMessage(), (Throwable)ex);\n         }\n     }\n     \n     public byte[] encode(final byte[] array) {\n         return encodeHexString(array).getBytes(this.getCharset());\n     }\n     \n-    public byte[] encode(final ByteBuffer array) {\n-        return encodeHexString(array).getBytes(this.getCharset());\n+    public byte[] encode(final ByteBuffer byteBuffer) {\n+        return encodeHexString(byteBuffer).getBytes(this.getCharset());\n     }\n     \n-    public Object encode(final Object object) throws EncoderException {\n-        byte[] byteArray;\n-        if (object instanceof String) {\n-            byteArray = ((String)object).getBytes(this.getCharset());\n+    public Object encode(final Object o) throws EncoderException {\n+        byte[] array;\n+        if (o instanceof String) {\n+            array = ((String)o).getBytes(this.getCharset());\n         }\n-        else if (object instanceof ByteBuffer) {\n-            byteArray = ((ByteBuffer)object).array();\n+        else if (o instanceof ByteBuffer) {\n+            array = ((ByteBuffer)o).array();\n         }\n         else {\n             try {\n-                byteArray = (byte[])object;\n+                array = (byte[])o;\n             }\n-            catch (final ClassCastException e) {\n-                throw new EncoderException(e.getMessage(), (Throwable)e);\n+            catch (final ClassCastException ex) {\n+                throw new EncoderException(ex.getMessage(), (Throwable)ex);\n             }\n         }\n-        return encodeHex(byteArray);\n+        return encodeHex(array);\n     }\n     \n     public Charset getCharset() {\n         return this.charset;\n     }\n     \n     public String getCharsetName() {\n"}]}
