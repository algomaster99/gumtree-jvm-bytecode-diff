{"diffoscope-json-version": 1, "source1": "first/ImportControlCheck.class", "source2": "second/ImportControlCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -39,77 +39,75 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 16, 30, 152 };\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         this.currentImportControl = null;\n         this.processCurrentFile = this.path.matcher(this.getFilePath()).find();\n         this.fileName = this.getFileContents().getText().getFile().getName();\n-        final int period = this.fileName.lastIndexOf(46);\n-        if (period != -1) {\n-            this.fileName = this.fileName.substring(0, period);\n+        final int lastIndex = this.fileName.lastIndexOf(46);\n+        if (lastIndex != -1) {\n+            this.fileName = this.fileName.substring(0, lastIndex);\n         }\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n+    public void visitToken(final DetailAST detailAST) {\n         if (this.processCurrentFile) {\n-            if (ast.getType() == 16) {\n+            if (detailAST.getType() == 16) {\n                 if (this.root == null) {\n-                    this.log(ast, \"import.control.missing.file\", new Object[0]);\n+                    this.log(detailAST, \"import.control.missing.file\", new Object[0]);\n                 }\n                 else {\n-                    this.packageName = getPackageText(ast);\n+                    this.packageName = getPackageText(detailAST);\n                     this.currentImportControl = this.root.locateFinest(this.packageName, this.fileName);\n                     if (this.currentImportControl == null) {\n-                        this.log(ast, \"import.control.unknown.pkg\", new Object[0]);\n+                        this.log(detailAST, \"import.control.unknown.pkg\", new Object[0]);\n                     }\n                 }\n             }\n             else if (this.currentImportControl != null) {\n-                final String importText = getImportText(ast);\n-                final AccessResult access = this.currentImportControl.checkAccess(this.packageName, this.fileName, importText);\n-                if (access != AccessResult.ALLOWED) {\n-                    this.log(ast, \"import.control.disallowed\", new Object[] { importText });\n+                final String importText = getImportText(detailAST);\n+                if (this.currentImportControl.checkAccess(this.packageName, this.fileName, importText) != AccessResult.ALLOWED) {\n+                    this.log(detailAST, \"import.control.disallowed\", new Object[] { importText });\n                 }\n             }\n         }\n     }\n     \n     public Set<String> getExternalResourceLocations() {\n         return Collections.singleton(this.file.toString());\n     }\n     \n-    private static String getPackageText(final DetailAST ast) {\n-        final DetailAST nameAST = ast.getLastChild().getPreviousSibling();\n-        return FullIdent.createFullIdent(nameAST).getText();\n+    private static String getPackageText(final DetailAST detailAST) {\n+        return FullIdent.createFullIdent(detailAST.getLastChild().getPreviousSibling()).getText();\n     }\n     \n-    private static String getImportText(final DetailAST ast) {\n-        FullIdent imp;\n-        if (ast.getType() == 30) {\n-            imp = FullIdent.createFullIdentBelow(ast);\n+    private static String getImportText(final DetailAST detailAST) {\n+        FullIdent fullIdent;\n+        if (detailAST.getType() == 30) {\n+            fullIdent = FullIdent.createFullIdentBelow(detailAST);\n         }\n         else {\n-            imp = FullIdent.createFullIdent(ast.getFirstChild().getNextSibling());\n+            fullIdent = FullIdent.createFullIdent(detailAST.getFirstChild().getNextSibling());\n         }\n-        return imp.getText();\n+        return fullIdent.getText();\n     }\n     \n-    public void setFile(final URI uri) {\n-        if (uri != null) {\n+    public void setFile(final URI file) {\n+        if (file != null) {\n             try {\n-                this.root = ImportControlLoader.load(uri);\n-                this.file = uri;\n+                this.root = ImportControlLoader.load(file);\n+                this.file = file;\n             }\n-            catch (final CheckstyleException ex) {\n-                throw new IllegalArgumentException(\"Unable to load \" + uri, (Throwable)ex);\n+            catch (final CheckstyleException cause) {\n+                throw new IllegalArgumentException(\"Unable to load \" + file, (Throwable)cause);\n             }\n         }\n     }\n     \n-    public void setPath(final Pattern pattern) {\n-        this.path = pattern;\n+    public void setPath(final Pattern path) {\n+        this.path = path;\n     }\n }\n"}]}
