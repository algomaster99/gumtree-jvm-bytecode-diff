{"diffoscope-json-version": 1, "source1": "first/JSONArray.class", "source2": "second/JSONArray.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,178 +1,178 @@\n-  SHA-256 checksum 6e3a9b2b96d226ec7aabe8078dc75bd1036e9233abe4583c7d8419b745ee7a6a\n+  SHA-256 checksum 6b5b51edc455e3dd8bc0c4e43ff3040255b826cc75bbb8a2d987e2aa7aa825db\n   Compiled from \"JSONArray.java\"\n public class org.json.JSONArray extends java.lang.Object implements java.lang.Iterable<java.lang.Object>\n   minor version: 0\n   major version: 50\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #71                         // org/json/JSONArray\n   super_class: #162                       // java/lang/Object\n   interfaces: 1, fields: 1, methods: 85, attributes: 2\n Constant pool:\n-    #1 = Methodref          #162.#400     // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #401          // java/util/ArrayList\n-    #3 = Methodref          #2.#400       // java/util/ArrayList.\"<init>\":()V\n-    #4 = Fieldref           #71.#402      // org/json/JSONArray.myArrayList:Ljava/util/ArrayList;\n-    #5 = Methodref          #71.#400      // org/json/JSONArray.\"<init>\":()V\n-    #6 = Methodref          #14.#403      // org/json/JSONTokener.nextClean:()C\n-    #7 = String             #404          // A JSONArray text must start with \\'[\\'\n-    #8 = Methodref          #14.#405      // org/json/JSONTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-    #9 = String             #406          // Expected a \\',\\' or \\']\\'\n-   #10 = Methodref          #14.#407      // org/json/JSONTokener.back:()V\n-   #11 = Fieldref           #73.#408      // org/json/JSONObject.NULL:Ljava/lang/Object;\n-   #12 = Methodref          #2.#409       // java/util/ArrayList.add:(Ljava/lang/Object;)Z\n-   #13 = Methodref          #14.#410      // org/json/JSONTokener.nextValue:()Ljava/lang/Object;\n-   #14 = Class              #411          // org/json/JSONTokener\n-   #15 = Methodref          #14.#412      // org/json/JSONTokener.\"<init>\":(Ljava/lang/String;)V\n-   #16 = Methodref          #71.#413      // org/json/JSONArray.\"<init>\":(Lorg/json/JSONTokener;)V\n-   #17 = InterfaceMethodref #155.#414     // java/util/Collection.size:()I\n-   #18 = Methodref          #2.#415       // java/util/ArrayList.\"<init>\":(I)V\n-   #19 = Methodref          #71.#416      // org/json/JSONArray.addAll:(Ljava/util/Collection;Z)V\n-   #20 = Methodref          #71.#417      // org/json/JSONArray.addAll:(Ljava/lang/Iterable;Z)V\n-   #21 = Methodref          #2.#418       // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n-   #22 = Methodref          #162.#419     // java/lang/Object.getClass:()Ljava/lang/Class;\n-   #23 = Methodref          #420.#421     // java/lang/Class.isArray:()Z\n-   #24 = Class              #422          // org/json/JSONException\n-   #25 = String             #423          // JSONArray initial value should be a string or collection or array.\n-   #26 = Methodref          #24.#412      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n-   #27 = Methodref          #71.#424      // org/json/JSONArray.addAll:(Ljava/lang/Object;Z)V\n-   #28 = String             #425          // JSONArray initial capacity cannot be negative.\n-   #29 = Methodref          #2.#426       // java/util/ArrayList.iterator:()Ljava/util/Iterator;\n-   #30 = Methodref          #71.#427      // org/json/JSONArray.opt:(I)Ljava/lang/Object;\n-   #31 = Class              #428          // java/lang/StringBuilder\n-   #32 = Methodref          #31.#400      // java/lang/StringBuilder.\"<init>\":()V\n-   #33 = String             #429          // JSONArray[\n-   #34 = Methodref          #31.#430      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #35 = Methodref          #31.#431      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #36 = String             #432          // ] not found.\n-   #37 = Methodref          #31.#433      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #38 = Methodref          #71.#434      // org/json/JSONArray.get:(I)Ljava/lang/Object;\n-   #39 = Fieldref           #435.#436     // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n-   #40 = Methodref          #162.#437     // java/lang/Object.equals:(Ljava/lang/Object;)Z\n-   #41 = Class              #438          // java/lang/String\n-   #42 = String             #439          // false\n-   #43 = Methodref          #41.#440      // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n-   #44 = Fieldref           #435.#441     // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n-   #45 = String             #442          // true\n-   #46 = String             #443          // boolean\n-   #47 = Methodref          #71.#444      // org/json/JSONArray.wrongValueFormatException:(ILjava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #48 = Class              #445          // java/lang/Number\n-   #49 = Methodref          #48.#446      // java/lang/Number.doubleValue:()D\n-   #50 = Methodref          #162.#433     // java/lang/Object.toString:()Ljava/lang/String;\n-   #51 = Methodref          #88.#447      // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n-   #52 = Class              #448          // java/lang/Exception\n-   #53 = String             #449          // double\n-   #54 = Methodref          #48.#450      // java/lang/Number.floatValue:()F\n-   #55 = Methodref          #93.#451      // java/lang/Float.parseFloat:(Ljava/lang/String;)F\n-   #56 = String             #452          // float\n-   #57 = Methodref          #73.#453      // org/json/JSONObject.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-   #58 = String             #454          // number\n-   #59 = Methodref          #71.#455      // org/json/JSONArray.optEnum:(Ljava/lang/Class;I)Ljava/lang/Enum;\n-   #60 = String             #456          // enum of type\n-   #61 = Methodref          #420.#457     // java/lang/Class.getSimpleName:()Ljava/lang/String;\n-   #62 = Methodref          #73.#458      // org/json/JSONObject.quote:(Ljava/lang/String;)Ljava/lang/String;\n-   #63 = Methodref          #73.#459      // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #64 = String             #460          // BigDecimal\n-   #65 = Methodref          #71.#461      // org/json/JSONArray.wrongValueFormatException:(ILjava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #66 = Methodref          #73.#462      // org/json/JSONObject.objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #67 = String             #463          // BigInteger\n-   #68 = Methodref          #48.#464      // java/lang/Number.intValue:()I\n-   #69 = Methodref          #465.#466     // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n-   #70 = String             #467          // int\n-   #71 = Class              #468          // org/json/JSONArray\n-   #72 = String             #469          // JSONArray\n-   #73 = Class              #470          // org/json/JSONObject\n-   #74 = String             #471          // JSONObject\n-   #75 = Methodref          #48.#472      // java/lang/Number.longValue:()J\n-   #76 = Methodref          #473.#474     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n-   #77 = String             #475          // long\n-   #78 = String             #476          // String\n-   #79 = Methodref          #71.#477      // org/json/JSONArray.length:()I\n-   #80 = String             #478          //\n-   #81 = Methodref          #2.#434       // java/util/ArrayList.get:(I)Ljava/lang/Object;\n-   #82 = Methodref          #73.#479      // org/json/JSONObject.valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n-   #83 = Methodref          #31.#412      // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n-   #84 = Methodref          #2.#414       // java/util/ArrayList.size:()I\n-   #85 = Methodref          #2.#480       // java/util/ArrayList.clear:()V\n-   #86 = Methodref          #71.#481      // org/json/JSONArray.optBoolean:(IZ)Z\n-   #87 = Methodref          #71.#482      // org/json/JSONArray.getBoolean:(I)Z\n-   #88 = Class              #483          // java/lang/Double\n+    #1 = Methodref          #162.#384     // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #385          // java/util/ArrayList\n+    #3 = Methodref          #2.#384       // java/util/ArrayList.\"<init>\":()V\n+    #4 = Fieldref           #71.#386      // org/json/JSONArray.myArrayList:Ljava/util/ArrayList;\n+    #5 = Methodref          #71.#384      // org/json/JSONArray.\"<init>\":()V\n+    #6 = Methodref          #14.#387      // org/json/JSONTokener.nextClean:()C\n+    #7 = String             #388          // A JSONArray text must start with \\'[\\'\n+    #8 = Methodref          #14.#389      // org/json/JSONTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+    #9 = String             #390          // Expected a \\',\\' or \\']\\'\n+   #10 = Methodref          #14.#391      // org/json/JSONTokener.back:()V\n+   #11 = Fieldref           #73.#392      // org/json/JSONObject.NULL:Ljava/lang/Object;\n+   #12 = Methodref          #2.#393       // java/util/ArrayList.add:(Ljava/lang/Object;)Z\n+   #13 = Methodref          #14.#394      // org/json/JSONTokener.nextValue:()Ljava/lang/Object;\n+   #14 = Class              #395          // org/json/JSONTokener\n+   #15 = Methodref          #14.#396      // org/json/JSONTokener.\"<init>\":(Ljava/lang/String;)V\n+   #16 = Methodref          #71.#397      // org/json/JSONArray.\"<init>\":(Lorg/json/JSONTokener;)V\n+   #17 = InterfaceMethodref #155.#398     // java/util/Collection.size:()I\n+   #18 = Methodref          #2.#399       // java/util/ArrayList.\"<init>\":(I)V\n+   #19 = Methodref          #71.#400      // org/json/JSONArray.addAll:(Ljava/util/Collection;Z)V\n+   #20 = Methodref          #71.#401      // org/json/JSONArray.addAll:(Ljava/lang/Iterable;Z)V\n+   #21 = Methodref          #2.#402       // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n+   #22 = Methodref          #162.#403     // java/lang/Object.getClass:()Ljava/lang/Class;\n+   #23 = Methodref          #278.#404     // java/lang/Class.isArray:()Z\n+   #24 = Class              #405          // org/json/JSONException\n+   #25 = String             #406          // JSONArray initial value should be a string or collection or array.\n+   #26 = Methodref          #24.#396      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n+   #27 = Methodref          #71.#407      // org/json/JSONArray.addAll:(Ljava/lang/Object;Z)V\n+   #28 = String             #408          // JSONArray initial capacity cannot be negative.\n+   #29 = Methodref          #2.#409       // java/util/ArrayList.iterator:()Ljava/util/Iterator;\n+   #30 = Methodref          #71.#410      // org/json/JSONArray.opt:(I)Ljava/lang/Object;\n+   #31 = Class              #411          // java/lang/StringBuilder\n+   #32 = Methodref          #31.#384      // java/lang/StringBuilder.\"<init>\":()V\n+   #33 = String             #412          // JSONArray[\n+   #34 = Methodref          #31.#413      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #35 = Methodref          #31.#414      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #36 = String             #415          // ] not found.\n+   #37 = Methodref          #31.#416      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #38 = Methodref          #71.#417      // org/json/JSONArray.get:(I)Ljava/lang/Object;\n+   #39 = Fieldref           #297.#418     // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n+   #40 = Methodref          #162.#419     // java/lang/Object.equals:(Ljava/lang/Object;)Z\n+   #41 = Class              #420          // java/lang/String\n+   #42 = String             #421          // false\n+   #43 = Methodref          #41.#422      // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n+   #44 = Fieldref           #297.#423     // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n+   #45 = String             #424          // true\n+   #46 = String             #425          // boolean\n+   #47 = Methodref          #71.#426      // org/json/JSONArray.wrongValueFormatException:(ILjava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+   #48 = Class              #427          // java/lang/Number\n+   #49 = Methodref          #48.#428      // java/lang/Number.doubleValue:()D\n+   #50 = Methodref          #162.#416     // java/lang/Object.toString:()Ljava/lang/String;\n+   #51 = Methodref          #88.#429      // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n+   #52 = Class              #430          // java/lang/Exception\n+   #53 = String             #431          // double\n+   #54 = Methodref          #48.#432      // java/lang/Number.floatValue:()F\n+   #55 = Methodref          #93.#433      // java/lang/Float.parseFloat:(Ljava/lang/String;)F\n+   #56 = String             #434          // float\n+   #57 = Methodref          #73.#435      // org/json/JSONObject.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+   #58 = String             #436          // number\n+   #59 = Methodref          #71.#437      // org/json/JSONArray.optEnum:(Ljava/lang/Class;I)Ljava/lang/Enum;\n+   #60 = String             #438          // enum of type\n+   #61 = Methodref          #278.#439     // java/lang/Class.getSimpleName:()Ljava/lang/String;\n+   #62 = Methodref          #73.#440      // org/json/JSONObject.quote:(Ljava/lang/String;)Ljava/lang/String;\n+   #63 = Methodref          #73.#441      // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #64 = String             #442          // BigDecimal\n+   #65 = Methodref          #71.#443      // org/json/JSONArray.wrongValueFormatException:(ILjava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+   #66 = Methodref          #73.#444      // org/json/JSONObject.objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #67 = String             #445          // BigInteger\n+   #68 = Methodref          #48.#446      // java/lang/Number.intValue:()I\n+   #69 = Methodref          #447.#448     // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+   #70 = String             #449          // int\n+   #71 = Class              #450          // org/json/JSONArray\n+   #72 = String             #451          // JSONArray\n+   #73 = Class              #452          // org/json/JSONObject\n+   #74 = String             #453          // JSONObject\n+   #75 = Methodref          #48.#454      // java/lang/Number.longValue:()J\n+   #76 = Methodref          #455.#456     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n+   #77 = String             #457          // long\n+   #78 = String             #458          // String\n+   #79 = Methodref          #71.#459      // org/json/JSONArray.length:()I\n+   #80 = String             #460          //\n+   #81 = Methodref          #2.#417       // java/util/ArrayList.get:(I)Ljava/lang/Object;\n+   #82 = Methodref          #73.#461      // org/json/JSONObject.valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n+   #83 = Methodref          #31.#396      // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+   #84 = Methodref          #2.#398       // java/util/ArrayList.size:()I\n+   #85 = Methodref          #2.#462       // java/util/ArrayList.clear:()V\n+   #86 = Methodref          #71.#463      // org/json/JSONArray.optBoolean:(IZ)Z\n+   #87 = Methodref          #71.#464      // org/json/JSONArray.getBoolean:(I)Z\n+   #88 = Class              #465          // java/lang/Double\n    #89 = Double             NaNd\n-   #91 = Methodref          #71.#484      // org/json/JSONArray.optDouble:(ID)D\n-   #92 = Methodref          #71.#485      // org/json/JSONArray.optNumber:(ILjava/lang/Number;)Ljava/lang/Number;\n-   #93 = Class              #486          // java/lang/Float\n+   #91 = Methodref          #71.#466      // org/json/JSONArray.optDouble:(ID)D\n+   #92 = Methodref          #71.#467      // org/json/JSONArray.optNumber:(ILjava/lang/Number;)Ljava/lang/Number;\n+   #93 = Class              #468          // java/lang/Float\n    #94 = Float              NaNf\n-   #95 = Methodref          #71.#487      // org/json/JSONArray.optFloat:(IF)F\n-   #96 = Methodref          #71.#488      // org/json/JSONArray.optInt:(II)I\n-   #97 = Methodref          #71.#489      // org/json/JSONArray.optEnum:(Ljava/lang/Class;ILjava/lang/Enum;)Ljava/lang/Enum;\n-   #98 = Methodref          #420.#490     // java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z\n-   #99 = Class              #491          // java/lang/Enum\n-  #100 = Methodref          #99.#492      // java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-  #101 = Class              #493          // java/lang/IllegalArgumentException\n-  #102 = Class              #494          // java/lang/NullPointerException\n-  #103 = Methodref          #71.#495      // org/json/JSONArray.optLong:(IJ)J\n-  #104 = Methodref          #71.#496      // org/json/JSONArray.optString:(ILjava/lang/String;)Ljava/lang/String;\n-  #105 = Methodref          #71.#497      // org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n-  #106 = Methodref          #71.#418      // org/json/JSONArray.\"<init>\":(Ljava/util/Collection;)V\n-  #107 = Methodref          #88.#498      // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n-  #108 = Methodref          #93.#499      // java/lang/Float.valueOf:(F)Ljava/lang/Float;\n-  #109 = Methodref          #465.#500     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-  #110 = Methodref          #473.#501     // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n-  #111 = Methodref          #73.#502      // org/json/JSONObject.\"<init>\":(Ljava/util/Map;)V\n-  #112 = Methodref          #73.#503      // org/json/JSONObject.testValidity:(Ljava/lang/Object;)V\n-  #113 = Methodref          #71.#504      // org/json/JSONArray.put:(ILjava/lang/Object;)Lorg/json/JSONArray;\n-  #114 = Methodref          #2.#505       // java/util/ArrayList.set:(ILjava/lang/Object;)Ljava/lang/Object;\n-  #115 = Methodref          #2.#506       // java/util/ArrayList.ensureCapacity:(I)V\n-  #116 = Methodref          #2.#507       // java/util/ArrayList.addAll:(Ljava/util/Collection;)Z\n-  #117 = Class              #508          // org/json/JSONPointer\n-  #118 = Methodref          #117.#412     // org/json/JSONPointer.\"<init>\":(Ljava/lang/String;)V\n-  #119 = Methodref          #71.#509      // org/json/JSONArray.query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-  #120 = Methodref          #117.#510     // org/json/JSONPointer.queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #121 = Methodref          #71.#511      // org/json/JSONArray.optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-  #122 = Class              #512          // org/json/JSONPointerException\n-  #123 = Methodref          #2.#513       // java/util/ArrayList.remove:(I)Ljava/lang/Object;\n-  #124 = Methodref          #73.#514      // org/json/JSONObject.similar:(Ljava/lang/Object;)Z\n-  #125 = Methodref          #71.#514      // org/json/JSONArray.similar:(Ljava/lang/Object;)Z\n-  #126 = Methodref          #73.#515      // org/json/JSONObject.isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n-  #127 = Methodref          #71.#516      // org/json/JSONArray.isEmpty:()Z\n-  #128 = Methodref          #73.#415      // org/json/JSONObject.\"<init>\":(I)V\n-  #129 = Methodref          #71.#517      // org/json/JSONArray.getString:(I)Ljava/lang/String;\n-  #130 = Methodref          #73.#518      // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #131 = Methodref          #71.#519      // org/json/JSONArray.toString:(I)Ljava/lang/String;\n-  #132 = Class              #520          // java/io/StringWriter\n-  #133 = Methodref          #132.#400     // java/io/StringWriter.\"<init>\":()V\n-  #134 = Methodref          #132.#521     // java/io/StringWriter.getBuffer:()Ljava/lang/StringBuffer;\n-  #135 = Methodref          #71.#522      // org/json/JSONArray.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n-  #136 = Methodref          #523.#524     // java/io/Writer.write:(I)V\n-  #137 = Methodref          #73.#525      // org/json/JSONObject.writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-  #138 = String             #526          // Unable to write JSONArray value at index: 0\n-  #139 = Methodref          #24.#527      // org/json/JSONException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #140 = Methodref          #73.#528      // org/json/JSONObject.indent:(Ljava/io/Writer;I)V\n-  #141 = String             #529          // Unable to write JSONArray value at index:\n-  #142 = Class              #530          // java/io/IOException\n-  #143 = Methodref          #24.#531      // org/json/JSONException.\"<init>\":(Ljava/lang/Throwable;)V\n-  #144 = InterfaceMethodref #532.#533     // java/util/Iterator.hasNext:()Z\n-  #145 = InterfaceMethodref #532.#534     // java/util/Iterator.next:()Ljava/lang/Object;\n-  #146 = InterfaceMethodref #535.#409     // java/util/List.add:(Ljava/lang/Object;)Z\n-  #147 = Methodref          #71.#536      // org/json/JSONArray.toList:()Ljava/util/List;\n-  #148 = Methodref          #73.#537      // org/json/JSONObject.toMap:()Ljava/util/Map;\n-  #149 = Methodref          #2.#516       // java/util/ArrayList.isEmpty:()Z\n-  #150 = InterfaceMethodref #155.#426     // java/util/Collection.iterator:()Ljava/util/Iterator;\n-  #151 = Methodref          #73.#538      // org/json/JSONObject.wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #152 = InterfaceMethodref #156.#426     // java/lang/Iterable.iterator:()Ljava/util/Iterator;\n-  #153 = Methodref          #539.#540     // java/lang/reflect/Array.getLength:(Ljava/lang/Object;)I\n-  #154 = Methodref          #539.#541     // java/lang/reflect/Array.get:(Ljava/lang/Object;I)Ljava/lang/Object;\n-  #155 = Class              #542          // java/util/Collection\n-  #156 = Class              #543          // java/lang/Iterable\n-  #157 = String             #544          // ] is not a\n-  #158 = String             #545          // .\n-  #159 = String             #546          //  (\n-  #160 = Methodref          #31.#547      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #161 = String             #548          // ).\n-  #162 = Class              #549          // java/lang/Object\n+   #95 = Methodref          #71.#469      // org/json/JSONArray.optFloat:(IF)F\n+   #96 = Methodref          #71.#470      // org/json/JSONArray.optInt:(II)I\n+   #97 = Methodref          #71.#471      // org/json/JSONArray.optEnum:(Ljava/lang/Class;ILjava/lang/Enum;)Ljava/lang/Enum;\n+   #98 = Methodref          #278.#472     // java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z\n+   #99 = Class              #473          // java/lang/Enum\n+  #100 = Methodref          #99.#474      // java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+  #101 = Class              #475          // java/lang/IllegalArgumentException\n+  #102 = Class              #476          // java/lang/NullPointerException\n+  #103 = Methodref          #71.#477      // org/json/JSONArray.optLong:(IJ)J\n+  #104 = Methodref          #71.#478      // org/json/JSONArray.optString:(ILjava/lang/String;)Ljava/lang/String;\n+  #105 = Methodref          #71.#479      // org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n+  #106 = Methodref          #71.#402      // org/json/JSONArray.\"<init>\":(Ljava/util/Collection;)V\n+  #107 = Methodref          #88.#480      // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n+  #108 = Methodref          #93.#481      // java/lang/Float.valueOf:(F)Ljava/lang/Float;\n+  #109 = Methodref          #447.#482     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+  #110 = Methodref          #455.#483     // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n+  #111 = Methodref          #73.#484      // org/json/JSONObject.\"<init>\":(Ljava/util/Map;)V\n+  #112 = Methodref          #73.#485      // org/json/JSONObject.testValidity:(Ljava/lang/Object;)V\n+  #113 = Methodref          #71.#486      // org/json/JSONArray.put:(ILjava/lang/Object;)Lorg/json/JSONArray;\n+  #114 = Methodref          #2.#487       // java/util/ArrayList.set:(ILjava/lang/Object;)Ljava/lang/Object;\n+  #115 = Methodref          #2.#488       // java/util/ArrayList.ensureCapacity:(I)V\n+  #116 = Methodref          #2.#489       // java/util/ArrayList.addAll:(Ljava/util/Collection;)Z\n+  #117 = Class              #490          // org/json/JSONPointer\n+  #118 = Methodref          #117.#396     // org/json/JSONPointer.\"<init>\":(Ljava/lang/String;)V\n+  #119 = Methodref          #71.#491      // org/json/JSONArray.query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+  #120 = Methodref          #117.#492     // org/json/JSONPointer.queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #121 = Methodref          #71.#493      // org/json/JSONArray.optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+  #122 = Class              #494          // org/json/JSONPointerException\n+  #123 = Methodref          #2.#495       // java/util/ArrayList.remove:(I)Ljava/lang/Object;\n+  #124 = Methodref          #73.#496      // org/json/JSONObject.similar:(Ljava/lang/Object;)Z\n+  #125 = Methodref          #71.#496      // org/json/JSONArray.similar:(Ljava/lang/Object;)Z\n+  #126 = Methodref          #73.#497      // org/json/JSONObject.isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n+  #127 = Methodref          #71.#498      // org/json/JSONArray.isEmpty:()Z\n+  #128 = Methodref          #73.#399      // org/json/JSONObject.\"<init>\":(I)V\n+  #129 = Methodref          #71.#499      // org/json/JSONArray.getString:(I)Ljava/lang/String;\n+  #130 = Methodref          #73.#500      // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #131 = Methodref          #71.#501      // org/json/JSONArray.toString:(I)Ljava/lang/String;\n+  #132 = Class              #502          // java/io/StringWriter\n+  #133 = Methodref          #132.#384     // java/io/StringWriter.\"<init>\":()V\n+  #134 = Methodref          #132.#503     // java/io/StringWriter.getBuffer:()Ljava/lang/StringBuffer;\n+  #135 = Methodref          #71.#504      // org/json/JSONArray.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n+  #136 = Methodref          #355.#505     // java/io/Writer.write:(I)V\n+  #137 = Methodref          #73.#506      // org/json/JSONObject.writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+  #138 = String             #507          // Unable to write JSONArray value at index: 0\n+  #139 = Methodref          #24.#508      // org/json/JSONException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #140 = Methodref          #73.#509      // org/json/JSONObject.indent:(Ljava/io/Writer;I)V\n+  #141 = String             #510          // Unable to write JSONArray value at index:\n+  #142 = Class              #511          // java/io/IOException\n+  #143 = Methodref          #24.#512      // org/json/JSONException.\"<init>\":(Ljava/lang/Throwable;)V\n+  #144 = InterfaceMethodref #363.#513     // java/util/Iterator.hasNext:()Z\n+  #145 = InterfaceMethodref #363.#514     // java/util/Iterator.next:()Ljava/lang/Object;\n+  #146 = InterfaceMethodref #362.#393     // java/util/List.add:(Ljava/lang/Object;)Z\n+  #147 = Methodref          #71.#515      // org/json/JSONArray.toList:()Ljava/util/List;\n+  #148 = Methodref          #73.#516      // org/json/JSONObject.toMap:()Ljava/util/Map;\n+  #149 = Methodref          #2.#498       // java/util/ArrayList.isEmpty:()Z\n+  #150 = InterfaceMethodref #155.#409     // java/util/Collection.iterator:()Ljava/util/Iterator;\n+  #151 = Methodref          #73.#517      // org/json/JSONObject.wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #152 = InterfaceMethodref #156.#409     // java/lang/Iterable.iterator:()Ljava/util/Iterator;\n+  #153 = Methodref          #518.#519     // java/lang/reflect/Array.getLength:(Ljava/lang/Object;)I\n+  #154 = Methodref          #518.#520     // java/lang/reflect/Array.get:(Ljava/lang/Object;I)Ljava/lang/Object;\n+  #155 = Class              #521          // java/util/Collection\n+  #156 = Class              #522          // java/lang/Iterable\n+  #157 = String             #523          // ] is not a\n+  #158 = String             #524          // .\n+  #159 = String             #525          //  (\n+  #160 = Methodref          #31.#526      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #161 = String             #527          // ).\n+  #162 = Class              #528          // java/lang/Object\n   #163 = Utf8               myArrayList\n   #164 = Utf8               Ljava/util/ArrayList;\n   #165 = Utf8               Signature\n   #166 = Utf8               Ljava/util/ArrayList<Ljava/lang/Object;>;\n   #167 = Utf8               <init>\n   #168 = Utf8               ()V\n   #169 = Utf8               Code\n@@ -182,474 +182,453 @@\n   #173 = Utf8               Lorg/json/JSONArray;\n   #174 = Utf8               (Lorg/json/JSONTokener;)V\n   #175 = Utf8               x\n   #176 = Utf8               Lorg/json/JSONTokener;\n   #177 = Utf8               nextChar\n   #178 = Utf8               C\n   #179 = Utf8               StackMapTable\n-  #180 = Class              #468          // org/json/JSONArray\n-  #181 = Class              #411          // org/json/JSONTokener\n-  #182 = Utf8               Exceptions\n-  #183 = Utf8               (Ljava/lang/String;)V\n-  #184 = Utf8               source\n-  #185 = Utf8               Ljava/lang/String;\n-  #186 = Utf8               (Ljava/util/Collection;)V\n-  #187 = Utf8               collection\n-  #188 = Utf8               Ljava/util/Collection;\n-  #189 = Utf8               LocalVariableTypeTable\n-  #190 = Utf8               Ljava/util/Collection<*>;\n-  #191 = Class              #542          // java/util/Collection\n-  #192 = Utf8               (Ljava/util/Collection<*>;)V\n-  #193 = Utf8               (Ljava/lang/Iterable;)V\n-  #194 = Utf8               iter\n-  #195 = Utf8               Ljava/lang/Iterable;\n-  #196 = Utf8               Ljava/lang/Iterable<*>;\n-  #197 = Class              #543          // java/lang/Iterable\n-  #198 = Utf8               (Ljava/lang/Iterable<*>;)V\n-  #199 = Utf8               (Lorg/json/JSONArray;)V\n-  #200 = Utf8               array\n-  #201 = Utf8               (Ljava/lang/Object;)V\n-  #202 = Utf8               Ljava/lang/Object;\n-  #203 = Class              #549          // java/lang/Object\n-  #204 = Utf8               (I)V\n-  #205 = Utf8               initialCapacity\n-  #206 = Utf8               I\n-  #207 = Utf8               iterator\n-  #208 = Utf8               ()Ljava/util/Iterator;\n-  #209 = Utf8               ()Ljava/util/Iterator<Ljava/lang/Object;>;\n-  #210 = Utf8               get\n-  #211 = Utf8               (I)Ljava/lang/Object;\n-  #212 = Utf8               index\n-  #213 = Utf8               object\n-  #214 = Utf8               getBoolean\n-  #215 = Utf8               (I)Z\n-  #216 = Utf8               getDouble\n-  #217 = Utf8               (I)D\n-  #218 = Utf8               e\n-  #219 = Utf8               Ljava/lang/Exception;\n-  #220 = Class              #448          // java/lang/Exception\n-  #221 = Utf8               getFloat\n-  #222 = Utf8               (I)F\n-  #223 = Utf8               getNumber\n-  #224 = Utf8               (I)Ljava/lang/Number;\n-  #225 = Utf8               getEnum\n-  #226 = Utf8               (Ljava/lang/Class;I)Ljava/lang/Enum;\n-  #227 = Utf8               clazz\n-  #228 = Utf8               Ljava/lang/Class;\n-  #229 = Utf8               val\n-  #230 = Utf8               Ljava/lang/Enum;\n-  #231 = Utf8               Ljava/lang/Class<TE;>;\n-  #232 = Utf8               TE;\n-  #233 = Class              #491          // java/lang/Enum\n-  #234 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;I)TE;\n-  #235 = Utf8               getBigDecimal\n-  #236 = Utf8               (I)Ljava/math/BigDecimal;\n-  #237 = Utf8               Ljava/math/BigDecimal;\n-  #238 = Class              #550          // java/math/BigDecimal\n-  #239 = Utf8               getBigInteger\n-  #240 = Utf8               (I)Ljava/math/BigInteger;\n-  #241 = Utf8               Ljava/math/BigInteger;\n-  #242 = Class              #551          // java/math/BigInteger\n-  #243 = Utf8               getInt\n-  #244 = Utf8               (I)I\n-  #245 = Utf8               getJSONArray\n-  #246 = Utf8               (I)Lorg/json/JSONArray;\n-  #247 = Utf8               getJSONObject\n-  #248 = Utf8               (I)Lorg/json/JSONObject;\n-  #249 = Utf8               getLong\n-  #250 = Utf8               (I)J\n-  #251 = Utf8               getString\n-  #252 = Utf8               (I)Ljava/lang/String;\n-  #253 = Utf8               isNull\n-  #254 = Utf8               join\n-  #255 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #256 = Utf8               i\n-  #257 = Utf8               separator\n-  #258 = Utf8               len\n-  #259 = Utf8               sb\n-  #260 = Utf8               Ljava/lang/StringBuilder;\n-  #261 = Class              #428          // java/lang/StringBuilder\n-  #262 = Utf8               length\n-  #263 = Utf8               ()I\n-  #264 = Utf8               clear\n-  #265 = Utf8               opt\n-  #266 = Utf8               optBoolean\n-  #267 = Utf8               (IZ)Z\n-  #268 = Utf8               defaultValue\n-  #269 = Utf8               Z\n-  #270 = Utf8               optDouble\n-  #271 = Utf8               (ID)D\n-  #272 = Utf8               D\n-  #273 = Utf8               Ljava/lang/Number;\n-  #274 = Utf8               doubleValue\n-  #275 = Class              #445          // java/lang/Number\n-  #276 = Utf8               optFloat\n-  #277 = Utf8               (IF)F\n-  #278 = Utf8               F\n-  #279 = Utf8               floatValue\n-  #280 = Utf8               optInt\n-  #281 = Utf8               (II)I\n-  #282 = Utf8               optEnum\n-  #283 = Utf8               (Ljava/lang/Class;ILjava/lang/Enum;)Ljava/lang/Enum;\n-  #284 = Utf8               myE\n-  #285 = Utf8               Ljava/lang/IllegalArgumentException;\n-  #286 = Utf8               Ljava/lang/NullPointerException;\n-  #287 = Class              #552          // java/lang/Class\n-  #288 = Class              #493          // java/lang/IllegalArgumentException\n-  #289 = Class              #494          // java/lang/NullPointerException\n-  #290 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;ITE;)TE;\n-  #291 = Utf8               optBigInteger\n-  #292 = Utf8               (ILjava/math/BigInteger;)Ljava/math/BigInteger;\n-  #293 = Utf8               optBigDecimal\n-  #294 = Utf8               (ILjava/math/BigDecimal;)Ljava/math/BigDecimal;\n-  #295 = Utf8               optJSONArray\n-  #296 = Utf8               o\n-  #297 = Utf8               optJSONObject\n-  #298 = Class              #470          // org/json/JSONObject\n-  #299 = Utf8               optLong\n-  #300 = Utf8               (IJ)J\n-  #301 = Utf8               J\n-  #302 = Utf8               optNumber\n-  #303 = Utf8               (ILjava/lang/Number;)Ljava/lang/Number;\n-  #304 = Utf8               optString\n-  #305 = Utf8               (ILjava/lang/String;)Ljava/lang/String;\n-  #306 = Class              #438          // java/lang/String\n-  #307 = Utf8               put\n-  #308 = Utf8               (Z)Lorg/json/JSONArray;\n-  #309 = Utf8               value\n-  #310 = Class              #553          // java/lang/Boolean\n-  #311 = Utf8               (Ljava/util/Collection;)Lorg/json/JSONArray;\n-  #312 = Utf8               (Ljava/util/Collection<*>;)Lorg/json/JSONArray;\n-  #313 = Utf8               (D)Lorg/json/JSONArray;\n-  #314 = Utf8               (F)Lorg/json/JSONArray;\n-  #315 = Utf8               (J)Lorg/json/JSONArray;\n-  #316 = Utf8               (Ljava/util/Map;)Lorg/json/JSONArray;\n-  #317 = Utf8               Ljava/util/Map;\n-  #318 = Utf8               Ljava/util/Map<**>;\n-  #319 = Utf8               (Ljava/util/Map<**>;)Lorg/json/JSONArray;\n-  #320 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONArray;\n-  #321 = Utf8               (IZ)Lorg/json/JSONArray;\n-  #322 = Utf8               (ILjava/util/Collection;)Lorg/json/JSONArray;\n-  #323 = Utf8               (ILjava/util/Collection<*>;)Lorg/json/JSONArray;\n-  #324 = Utf8               (ID)Lorg/json/JSONArray;\n-  #325 = Utf8               (IF)Lorg/json/JSONArray;\n-  #326 = Utf8               (II)Lorg/json/JSONArray;\n-  #327 = Utf8               (IJ)Lorg/json/JSONArray;\n-  #328 = Utf8               (ILjava/util/Map;)Lorg/json/JSONArray;\n-  #329 = Utf8               (ILjava/util/Map<**>;)Lorg/json/JSONArray;\n-  #330 = Utf8               (ILjava/lang/Object;)Lorg/json/JSONArray;\n-  #331 = Utf8               putAll\n-  #332 = Utf8               (Ljava/lang/Iterable;)Lorg/json/JSONArray;\n-  #333 = Utf8               (Ljava/lang/Iterable<*>;)Lorg/json/JSONArray;\n-  #334 = Utf8               (Lorg/json/JSONArray;)Lorg/json/JSONArray;\n-  #335 = Utf8               query\n-  #336 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n-  #337 = Utf8               jsonPointer\n-  #338 = Utf8               (Lorg/json/JSONPointer;)Ljava/lang/Object;\n-  #339 = Utf8               Lorg/json/JSONPointer;\n-  #340 = Utf8               optQuery\n-  #341 = Utf8               Lorg/json/JSONPointerException;\n-  #342 = Class              #512          // org/json/JSONPointerException\n-  #343 = Utf8               remove\n-  #344 = Utf8               similar\n-  #345 = Utf8               (Ljava/lang/Object;)Z\n-  #346 = Utf8               valueThis\n-  #347 = Utf8               valueOther\n-  #348 = Utf8               other\n-  #349 = Utf8               toJSONObject\n-  #350 = Utf8               (Lorg/json/JSONArray;)Lorg/json/JSONObject;\n-  #351 = Utf8               names\n-  #352 = Utf8               jo\n-  #353 = Utf8               Lorg/json/JSONObject;\n-  #354 = Utf8               toString\n-  #355 = Utf8               ()Ljava/lang/String;\n-  #356 = Utf8               indentFactor\n-  #357 = Utf8               sw\n-  #358 = Utf8               Ljava/io/StringWriter;\n-  #359 = Class              #520          // java/io/StringWriter\n-  #360 = Class              #554          // java/lang/Throwable\n-  #361 = Utf8               write\n-  #362 = Utf8               (Ljava/io/Writer;)Ljava/io/Writer;\n-  #363 = Utf8               writer\n-  #364 = Utf8               Ljava/io/Writer;\n-  #365 = Utf8               (Ljava/io/Writer;II)Ljava/io/Writer;\n-  #366 = Utf8               newIndent\n-  #367 = Utf8               needsComma\n-  #368 = Utf8               Ljava/io/IOException;\n-  #369 = Utf8               indent\n-  #370 = Class              #555          // java/io/Writer\n-  #371 = Class              #530          // java/io/IOException\n-  #372 = Utf8               toList\n-  #373 = Utf8               ()Ljava/util/List;\n-  #374 = Utf8               element\n-  #375 = Utf8               results\n-  #376 = Utf8               Ljava/util/List;\n-  #377 = Utf8               Ljava/util/List<Ljava/lang/Object;>;\n-  #378 = Class              #556          // java/util/List\n-  #379 = Class              #557          // java/util/Iterator\n-  #380 = Utf8               ()Ljava/util/List<Ljava/lang/Object;>;\n-  #381 = Utf8               isEmpty\n-  #382 = Utf8               ()Z\n-  #383 = Utf8               addAll\n-  #384 = Utf8               (Ljava/util/Collection;Z)V\n-  #385 = Utf8               wrap\n-  #386 = Utf8               (Ljava/util/Collection<*>;Z)V\n-  #387 = Utf8               (Ljava/lang/Iterable;Z)V\n-  #388 = Utf8               (Ljava/lang/Iterable<*>;Z)V\n-  #389 = Utf8               (Ljava/lang/Object;Z)V\n-  #390 = Utf8               wrongValueFormatException\n-  #391 = Utf8               (ILjava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-  #392 = Utf8               idx\n-  #393 = Utf8               valueType\n-  #394 = Utf8               cause\n-  #395 = Utf8               Ljava/lang/Throwable;\n-  #396 = Utf8               (ILjava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-  #397 = Utf8               Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Object;>;\n-  #398 = Utf8               SourceFile\n-  #399 = Utf8               JSONArray.java\n-  #400 = NameAndType        #167:#168     // \"<init>\":()V\n-  #401 = Utf8               java/util/ArrayList\n-  #402 = NameAndType        #163:#164     // myArrayList:Ljava/util/ArrayList;\n-  #403 = NameAndType        #558:#559     // nextClean:()C\n-  #404 = Utf8               A JSONArray text must start with \\'[\\'\n-  #405 = NameAndType        #560:#561     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-  #406 = Utf8               Expected a \\',\\' or \\']\\'\n-  #407 = NameAndType        #562:#168     // back:()V\n-  #408 = NameAndType        #563:#202     // NULL:Ljava/lang/Object;\n-  #409 = NameAndType        #564:#345     // add:(Ljava/lang/Object;)Z\n-  #410 = NameAndType        #565:#566     // nextValue:()Ljava/lang/Object;\n-  #411 = Utf8               org/json/JSONTokener\n-  #412 = NameAndType        #167:#183     // \"<init>\":(Ljava/lang/String;)V\n-  #413 = NameAndType        #167:#174     // \"<init>\":(Lorg/json/JSONTokener;)V\n-  #414 = NameAndType        #567:#263     // size:()I\n-  #415 = NameAndType        #167:#204     // \"<init>\":(I)V\n-  #416 = NameAndType        #383:#384     // addAll:(Ljava/util/Collection;Z)V\n-  #417 = NameAndType        #383:#387     // addAll:(Ljava/lang/Iterable;Z)V\n-  #418 = NameAndType        #167:#186     // \"<init>\":(Ljava/util/Collection;)V\n-  #419 = NameAndType        #568:#569     // getClass:()Ljava/lang/Class;\n-  #420 = Class              #552          // java/lang/Class\n-  #421 = NameAndType        #570:#382     // isArray:()Z\n-  #422 = Utf8               org/json/JSONException\n-  #423 = Utf8               JSONArray initial value should be a string or collection or array.\n-  #424 = NameAndType        #383:#389     // addAll:(Ljava/lang/Object;Z)V\n-  #425 = Utf8               JSONArray initial capacity cannot be negative.\n-  #426 = NameAndType        #207:#208     // iterator:()Ljava/util/Iterator;\n-  #427 = NameAndType        #265:#211     // opt:(I)Ljava/lang/Object;\n-  #428 = Utf8               java/lang/StringBuilder\n-  #429 = Utf8               JSONArray[\n-  #430 = NameAndType        #571:#572     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #431 = NameAndType        #571:#573     // append:(I)Ljava/lang/StringBuilder;\n-  #432 = Utf8               ] not found.\n-  #433 = NameAndType        #354:#355     // toString:()Ljava/lang/String;\n-  #434 = NameAndType        #210:#211     // get:(I)Ljava/lang/Object;\n-  #435 = Class              #553          // java/lang/Boolean\n-  #436 = NameAndType        #574:#575     // FALSE:Ljava/lang/Boolean;\n-  #437 = NameAndType        #576:#345     // equals:(Ljava/lang/Object;)Z\n-  #438 = Utf8               java/lang/String\n-  #439 = Utf8               false\n-  #440 = NameAndType        #577:#578     // equalsIgnoreCase:(Ljava/lang/String;)Z\n-  #441 = NameAndType        #579:#575     // TRUE:Ljava/lang/Boolean;\n-  #442 = Utf8               true\n-  #443 = Utf8               boolean\n-  #444 = NameAndType        #390:#391     // wrongValueFormatException:(ILjava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-  #445 = Utf8               java/lang/Number\n-  #446 = NameAndType        #274:#580     // doubleValue:()D\n-  #447 = NameAndType        #581:#582     // parseDouble:(Ljava/lang/String;)D\n-  #448 = Utf8               java/lang/Exception\n-  #449 = Utf8               double\n-  #450 = NameAndType        #279:#583     // floatValue:()F\n-  #451 = NameAndType        #584:#585     // parseFloat:(Ljava/lang/String;)F\n-  #452 = Utf8               float\n-  #453 = NameAndType        #586:#587     // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-  #454 = Utf8               number\n-  #455 = NameAndType        #282:#226     // optEnum:(Ljava/lang/Class;I)Ljava/lang/Enum;\n-  #456 = Utf8               enum of type\n-  #457 = NameAndType        #588:#355     // getSimpleName:()Ljava/lang/String;\n-  #458 = NameAndType        #589:#255     // quote:(Ljava/lang/String;)Ljava/lang/String;\n-  #459 = NameAndType        #590:#591     // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-  #460 = Utf8               BigDecimal\n-  #461 = NameAndType        #390:#396     // wrongValueFormatException:(ILjava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-  #462 = NameAndType        #592:#593     // objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #463 = Utf8               BigInteger\n-  #464 = NameAndType        #594:#263     // intValue:()I\n-  #465 = Class              #595          // java/lang/Integer\n-  #466 = NameAndType        #596:#597     // parseInt:(Ljava/lang/String;)I\n-  #467 = Utf8               int\n-  #468 = Utf8               org/json/JSONArray\n-  #469 = Utf8               JSONArray\n-  #470 = Utf8               org/json/JSONObject\n-  #471 = Utf8               JSONObject\n-  #472 = NameAndType        #598:#599     // longValue:()J\n-  #473 = Class              #600          // java/lang/Long\n-  #474 = NameAndType        #601:#602     // parseLong:(Ljava/lang/String;)J\n-  #475 = Utf8               long\n-  #476 = Utf8               String\n-  #477 = NameAndType        #262:#263     // length:()I\n-  #478 = Utf8\n-  #479 = NameAndType        #603:#604     // valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n-  #480 = NameAndType        #264:#168     // clear:()V\n-  #481 = NameAndType        #266:#267     // optBoolean:(IZ)Z\n-  #482 = NameAndType        #214:#215     // getBoolean:(I)Z\n-  #483 = Utf8               java/lang/Double\n-  #484 = NameAndType        #270:#271     // optDouble:(ID)D\n-  #485 = NameAndType        #302:#303     // optNumber:(ILjava/lang/Number;)Ljava/lang/Number;\n-  #486 = Utf8               java/lang/Float\n-  #487 = NameAndType        #276:#277     // optFloat:(IF)F\n-  #488 = NameAndType        #280:#281     // optInt:(II)I\n-  #489 = NameAndType        #282:#283     // optEnum:(Ljava/lang/Class;ILjava/lang/Enum;)Ljava/lang/Enum;\n-  #490 = NameAndType        #605:#606     // isAssignableFrom:(Ljava/lang/Class;)Z\n-  #491 = Utf8               java/lang/Enum\n-  #492 = NameAndType        #607:#608     // valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-  #493 = Utf8               java/lang/IllegalArgumentException\n-  #494 = Utf8               java/lang/NullPointerException\n-  #495 = NameAndType        #299:#300     // optLong:(IJ)J\n-  #496 = NameAndType        #304:#305     // optString:(ILjava/lang/String;)Ljava/lang/String;\n-  #497 = NameAndType        #307:#320     // put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n-  #498 = NameAndType        #607:#609     // valueOf:(D)Ljava/lang/Double;\n-  #499 = NameAndType        #607:#610     // valueOf:(F)Ljava/lang/Float;\n-  #500 = NameAndType        #607:#611     // valueOf:(I)Ljava/lang/Integer;\n-  #501 = NameAndType        #607:#612     // valueOf:(J)Ljava/lang/Long;\n-  #502 = NameAndType        #167:#613     // \"<init>\":(Ljava/util/Map;)V\n-  #503 = NameAndType        #614:#201     // testValidity:(Ljava/lang/Object;)V\n-  #504 = NameAndType        #307:#330     // put:(ILjava/lang/Object;)Lorg/json/JSONArray;\n-  #505 = NameAndType        #615:#616     // set:(ILjava/lang/Object;)Ljava/lang/Object;\n-  #506 = NameAndType        #617:#204     // ensureCapacity:(I)V\n-  #507 = NameAndType        #383:#618     // addAll:(Ljava/util/Collection;)Z\n-  #508 = Utf8               org/json/JSONPointer\n-  #509 = NameAndType        #335:#338     // query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-  #510 = NameAndType        #619:#620     // queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #511 = NameAndType        #340:#338     // optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-  #512 = Utf8               org/json/JSONPointerException\n-  #513 = NameAndType        #343:#211     // remove:(I)Ljava/lang/Object;\n-  #514 = NameAndType        #344:#345     // similar:(Ljava/lang/Object;)Z\n-  #515 = NameAndType        #621:#622     // isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n-  #516 = NameAndType        #381:#382     // isEmpty:()Z\n-  #517 = NameAndType        #251:#252     // getString:(I)Ljava/lang/String;\n-  #518 = NameAndType        #307:#623     // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #519 = NameAndType        #354:#252     // toString:(I)Ljava/lang/String;\n-  #520 = Utf8               java/io/StringWriter\n-  #521 = NameAndType        #624:#625     // getBuffer:()Ljava/lang/StringBuffer;\n-  #522 = NameAndType        #361:#365     // write:(Ljava/io/Writer;II)Ljava/io/Writer;\n-  #523 = Class              #555          // java/io/Writer\n-  #524 = NameAndType        #361:#204     // write:(I)V\n-  #525 = NameAndType        #626:#627     // writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-  #526 = Utf8               Unable to write JSONArray value at index: 0\n-  #527 = NameAndType        #167:#628     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #528 = NameAndType        #369:#629     // indent:(Ljava/io/Writer;I)V\n-  #529 = Utf8               Unable to write JSONArray value at index:\n-  #530 = Utf8               java/io/IOException\n-  #531 = NameAndType        #167:#630     // \"<init>\":(Ljava/lang/Throwable;)V\n-  #532 = Class              #557          // java/util/Iterator\n-  #533 = NameAndType        #631:#382     // hasNext:()Z\n-  #534 = NameAndType        #632:#566     // next:()Ljava/lang/Object;\n-  #535 = Class              #556          // java/util/List\n-  #536 = NameAndType        #372:#373     // toList:()Ljava/util/List;\n-  #537 = NameAndType        #633:#634     // toMap:()Ljava/util/Map;\n-  #538 = NameAndType        #385:#620     // wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #539 = Class              #635          // java/lang/reflect/Array\n-  #540 = NameAndType        #636:#637     // getLength:(Ljava/lang/Object;)I\n-  #541 = NameAndType        #210:#638     // get:(Ljava/lang/Object;I)Ljava/lang/Object;\n-  #542 = Utf8               java/util/Collection\n-  #543 = Utf8               java/lang/Iterable\n-  #544 = Utf8               ] is not a\n-  #545 = Utf8               .\n-  #546 = Utf8                (\n-  #547 = NameAndType        #571:#639     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #548 = Utf8               ).\n-  #549 = Utf8               java/lang/Object\n-  #550 = Utf8               java/math/BigDecimal\n-  #551 = Utf8               java/math/BigInteger\n-  #552 = Utf8               java/lang/Class\n-  #553 = Utf8               java/lang/Boolean\n-  #554 = Utf8               java/lang/Throwable\n-  #555 = Utf8               java/io/Writer\n-  #556 = Utf8               java/util/List\n-  #557 = Utf8               java/util/Iterator\n-  #558 = Utf8               nextClean\n-  #559 = Utf8               ()C\n-  #560 = Utf8               syntaxError\n-  #561 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n-  #562 = Utf8               back\n-  #563 = Utf8               NULL\n-  #564 = Utf8               add\n-  #565 = Utf8               nextValue\n-  #566 = Utf8               ()Ljava/lang/Object;\n-  #567 = Utf8               size\n-  #568 = Utf8               getClass\n-  #569 = Utf8               ()Ljava/lang/Class;\n-  #570 = Utf8               isArray\n-  #571 = Utf8               append\n-  #572 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #573 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #574 = Utf8               FALSE\n-  #575 = Utf8               Ljava/lang/Boolean;\n-  #576 = Utf8               equals\n-  #577 = Utf8               equalsIgnoreCase\n-  #578 = Utf8               (Ljava/lang/String;)Z\n-  #579 = Utf8               TRUE\n-  #580 = Utf8               ()D\n-  #581 = Utf8               parseDouble\n-  #582 = Utf8               (Ljava/lang/String;)D\n-  #583 = Utf8               ()F\n-  #584 = Utf8               parseFloat\n-  #585 = Utf8               (Ljava/lang/String;)F\n-  #586 = Utf8               stringToNumber\n-  #587 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n-  #588 = Utf8               getSimpleName\n-  #589 = Utf8               quote\n-  #590 = Utf8               objectToBigDecimal\n-  #591 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-  #592 = Utf8               objectToBigInteger\n-  #593 = Utf8               (Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #594 = Utf8               intValue\n-  #595 = Utf8               java/lang/Integer\n-  #596 = Utf8               parseInt\n-  #597 = Utf8               (Ljava/lang/String;)I\n-  #598 = Utf8               longValue\n-  #599 = Utf8               ()J\n-  #600 = Utf8               java/lang/Long\n-  #601 = Utf8               parseLong\n-  #602 = Utf8               (Ljava/lang/String;)J\n-  #603 = Utf8               valueToString\n-  #604 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n-  #605 = Utf8               isAssignableFrom\n-  #606 = Utf8               (Ljava/lang/Class;)Z\n-  #607 = Utf8               valueOf\n-  #608 = Utf8               (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-  #609 = Utf8               (D)Ljava/lang/Double;\n-  #610 = Utf8               (F)Ljava/lang/Float;\n-  #611 = Utf8               (I)Ljava/lang/Integer;\n-  #612 = Utf8               (J)Ljava/lang/Long;\n-  #613 = Utf8               (Ljava/util/Map;)V\n-  #614 = Utf8               testValidity\n-  #615 = Utf8               set\n-  #616 = Utf8               (ILjava/lang/Object;)Ljava/lang/Object;\n-  #617 = Utf8               ensureCapacity\n-  #618 = Utf8               (Ljava/util/Collection;)Z\n-  #619 = Utf8               queryFrom\n-  #620 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #621 = Utf8               isNumberSimilar\n-  #622 = Utf8               (Ljava/lang/Number;Ljava/lang/Number;)Z\n-  #623 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #624 = Utf8               getBuffer\n-  #625 = Utf8               ()Ljava/lang/StringBuffer;\n-  #626 = Utf8               writeValue\n-  #627 = Utf8               (Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-  #628 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #629 = Utf8               (Ljava/io/Writer;I)V\n-  #630 = Utf8               (Ljava/lang/Throwable;)V\n-  #631 = Utf8               hasNext\n-  #632 = Utf8               next\n-  #633 = Utf8               toMap\n-  #634 = Utf8               ()Ljava/util/Map;\n-  #635 = Utf8               java/lang/reflect/Array\n-  #636 = Utf8               getLength\n-  #637 = Utf8               (Ljava/lang/Object;)I\n-  #638 = Utf8               (Ljava/lang/Object;I)Ljava/lang/Object;\n-  #639 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #180 = Utf8               Exceptions\n+  #181 = Utf8               (Ljava/lang/String;)V\n+  #182 = Utf8               source\n+  #183 = Utf8               Ljava/lang/String;\n+  #184 = Utf8               (Ljava/util/Collection;)V\n+  #185 = Utf8               collection\n+  #186 = Utf8               Ljava/util/Collection;\n+  #187 = Utf8               LocalVariableTypeTable\n+  #188 = Utf8               Ljava/util/Collection<*>;\n+  #189 = Utf8               (Ljava/util/Collection<*>;)V\n+  #190 = Utf8               (Ljava/lang/Iterable;)V\n+  #191 = Utf8               iter\n+  #192 = Utf8               Ljava/lang/Iterable;\n+  #193 = Utf8               Ljava/lang/Iterable<*>;\n+  #194 = Utf8               (Ljava/lang/Iterable<*>;)V\n+  #195 = Utf8               (Lorg/json/JSONArray;)V\n+  #196 = Utf8               array\n+  #197 = Utf8               (Ljava/lang/Object;)V\n+  #198 = Utf8               Ljava/lang/Object;\n+  #199 = Utf8               (I)V\n+  #200 = Utf8               initialCapacity\n+  #201 = Utf8               I\n+  #202 = Utf8               iterator\n+  #203 = Utf8               ()Ljava/util/Iterator;\n+  #204 = Utf8               ()Ljava/util/Iterator<Ljava/lang/Object;>;\n+  #205 = Utf8               get\n+  #206 = Utf8               (I)Ljava/lang/Object;\n+  #207 = Utf8               index\n+  #208 = Utf8               object\n+  #209 = Utf8               getBoolean\n+  #210 = Utf8               (I)Z\n+  #211 = Utf8               getDouble\n+  #212 = Utf8               (I)D\n+  #213 = Utf8               e\n+  #214 = Utf8               Ljava/lang/Exception;\n+  #215 = Utf8               getFloat\n+  #216 = Utf8               (I)F\n+  #217 = Utf8               getNumber\n+  #218 = Utf8               (I)Ljava/lang/Number;\n+  #219 = Utf8               getEnum\n+  #220 = Utf8               (Ljava/lang/Class;I)Ljava/lang/Enum;\n+  #221 = Utf8               clazz\n+  #222 = Utf8               Ljava/lang/Class;\n+  #223 = Utf8               val\n+  #224 = Utf8               Ljava/lang/Enum;\n+  #225 = Utf8               Ljava/lang/Class<TE;>;\n+  #226 = Utf8               TE;\n+  #227 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;I)TE;\n+  #228 = Utf8               getBigDecimal\n+  #229 = Utf8               (I)Ljava/math/BigDecimal;\n+  #230 = Utf8               Ljava/math/BigDecimal;\n+  #231 = Class              #529          // java/math/BigDecimal\n+  #232 = Utf8               getBigInteger\n+  #233 = Utf8               (I)Ljava/math/BigInteger;\n+  #234 = Utf8               Ljava/math/BigInteger;\n+  #235 = Class              #530          // java/math/BigInteger\n+  #236 = Utf8               getInt\n+  #237 = Utf8               (I)I\n+  #238 = Utf8               getJSONArray\n+  #239 = Utf8               (I)Lorg/json/JSONArray;\n+  #240 = Utf8               getJSONObject\n+  #241 = Utf8               (I)Lorg/json/JSONObject;\n+  #242 = Utf8               getLong\n+  #243 = Utf8               (I)J\n+  #244 = Utf8               getString\n+  #245 = Utf8               (I)Ljava/lang/String;\n+  #246 = Utf8               isNull\n+  #247 = Utf8               join\n+  #248 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #249 = Utf8               i\n+  #250 = Utf8               separator\n+  #251 = Utf8               len\n+  #252 = Utf8               sb\n+  #253 = Utf8               Ljava/lang/StringBuilder;\n+  #254 = Utf8               length\n+  #255 = Utf8               ()I\n+  #256 = Utf8               clear\n+  #257 = Utf8               opt\n+  #258 = Utf8               optBoolean\n+  #259 = Utf8               (IZ)Z\n+  #260 = Utf8               defaultValue\n+  #261 = Utf8               Z\n+  #262 = Utf8               optDouble\n+  #263 = Utf8               (ID)D\n+  #264 = Utf8               D\n+  #265 = Utf8               Ljava/lang/Number;\n+  #266 = Utf8               doubleValue\n+  #267 = Utf8               optFloat\n+  #268 = Utf8               (IF)F\n+  #269 = Utf8               F\n+  #270 = Utf8               floatValue\n+  #271 = Utf8               optInt\n+  #272 = Utf8               (II)I\n+  #273 = Utf8               optEnum\n+  #274 = Utf8               (Ljava/lang/Class;ILjava/lang/Enum;)Ljava/lang/Enum;\n+  #275 = Utf8               myE\n+  #276 = Utf8               Ljava/lang/IllegalArgumentException;\n+  #277 = Utf8               Ljava/lang/NullPointerException;\n+  #278 = Class              #531          // java/lang/Class\n+  #279 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;ITE;)TE;\n+  #280 = Utf8               optBigInteger\n+  #281 = Utf8               (ILjava/math/BigInteger;)Ljava/math/BigInteger;\n+  #282 = Utf8               optBigDecimal\n+  #283 = Utf8               (ILjava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #284 = Utf8               optJSONArray\n+  #285 = Utf8               o\n+  #286 = Utf8               optJSONObject\n+  #287 = Utf8               optLong\n+  #288 = Utf8               (IJ)J\n+  #289 = Utf8               J\n+  #290 = Utf8               optNumber\n+  #291 = Utf8               (ILjava/lang/Number;)Ljava/lang/Number;\n+  #292 = Utf8               optString\n+  #293 = Utf8               (ILjava/lang/String;)Ljava/lang/String;\n+  #294 = Utf8               put\n+  #295 = Utf8               (Z)Lorg/json/JSONArray;\n+  #296 = Utf8               value\n+  #297 = Class              #532          // java/lang/Boolean\n+  #298 = Utf8               (Ljava/util/Collection;)Lorg/json/JSONArray;\n+  #299 = Utf8               (Ljava/util/Collection<*>;)Lorg/json/JSONArray;\n+  #300 = Utf8               (D)Lorg/json/JSONArray;\n+  #301 = Utf8               (F)Lorg/json/JSONArray;\n+  #302 = Utf8               (J)Lorg/json/JSONArray;\n+  #303 = Utf8               (Ljava/util/Map;)Lorg/json/JSONArray;\n+  #304 = Utf8               Ljava/util/Map;\n+  #305 = Utf8               Ljava/util/Map<**>;\n+  #306 = Utf8               (Ljava/util/Map<**>;)Lorg/json/JSONArray;\n+  #307 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONArray;\n+  #308 = Utf8               (IZ)Lorg/json/JSONArray;\n+  #309 = Utf8               (ILjava/util/Collection;)Lorg/json/JSONArray;\n+  #310 = Utf8               (ILjava/util/Collection<*>;)Lorg/json/JSONArray;\n+  #311 = Utf8               (ID)Lorg/json/JSONArray;\n+  #312 = Utf8               (IF)Lorg/json/JSONArray;\n+  #313 = Utf8               (II)Lorg/json/JSONArray;\n+  #314 = Utf8               (IJ)Lorg/json/JSONArray;\n+  #315 = Utf8               (ILjava/util/Map;)Lorg/json/JSONArray;\n+  #316 = Utf8               (ILjava/util/Map<**>;)Lorg/json/JSONArray;\n+  #317 = Utf8               (ILjava/lang/Object;)Lorg/json/JSONArray;\n+  #318 = Utf8               putAll\n+  #319 = Utf8               (Ljava/lang/Iterable;)Lorg/json/JSONArray;\n+  #320 = Utf8               (Ljava/lang/Iterable<*>;)Lorg/json/JSONArray;\n+  #321 = Utf8               (Lorg/json/JSONArray;)Lorg/json/JSONArray;\n+  #322 = Utf8               query\n+  #323 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n+  #324 = Utf8               jsonPointer\n+  #325 = Utf8               (Lorg/json/JSONPointer;)Ljava/lang/Object;\n+  #326 = Utf8               Lorg/json/JSONPointer;\n+  #327 = Utf8               optQuery\n+  #328 = Utf8               Lorg/json/JSONPointerException;\n+  #329 = Utf8               remove\n+  #330 = Utf8               similar\n+  #331 = Utf8               (Ljava/lang/Object;)Z\n+  #332 = Utf8               valueThis\n+  #333 = Utf8               valueOther\n+  #334 = Utf8               other\n+  #335 = Utf8               toJSONObject\n+  #336 = Utf8               (Lorg/json/JSONArray;)Lorg/json/JSONObject;\n+  #337 = Utf8               names\n+  #338 = Utf8               jo\n+  #339 = Utf8               Lorg/json/JSONObject;\n+  #340 = Utf8               toString\n+  #341 = Utf8               ()Ljava/lang/String;\n+  #342 = Utf8               indentFactor\n+  #343 = Utf8               sw\n+  #344 = Utf8               Ljava/io/StringWriter;\n+  #345 = Class              #533          // java/lang/Throwable\n+  #346 = Utf8               write\n+  #347 = Utf8               (Ljava/io/Writer;)Ljava/io/Writer;\n+  #348 = Utf8               writer\n+  #349 = Utf8               Ljava/io/Writer;\n+  #350 = Utf8               (Ljava/io/Writer;II)Ljava/io/Writer;\n+  #351 = Utf8               newIndent\n+  #352 = Utf8               needsComma\n+  #353 = Utf8               Ljava/io/IOException;\n+  #354 = Utf8               indent\n+  #355 = Class              #534          // java/io/Writer\n+  #356 = Utf8               toList\n+  #357 = Utf8               ()Ljava/util/List;\n+  #358 = Utf8               element\n+  #359 = Utf8               results\n+  #360 = Utf8               Ljava/util/List;\n+  #361 = Utf8               Ljava/util/List<Ljava/lang/Object;>;\n+  #362 = Class              #535          // java/util/List\n+  #363 = Class              #536          // java/util/Iterator\n+  #364 = Utf8               ()Ljava/util/List<Ljava/lang/Object;>;\n+  #365 = Utf8               isEmpty\n+  #366 = Utf8               ()Z\n+  #367 = Utf8               addAll\n+  #368 = Utf8               (Ljava/util/Collection;Z)V\n+  #369 = Utf8               wrap\n+  #370 = Utf8               (Ljava/util/Collection<*>;Z)V\n+  #371 = Utf8               (Ljava/lang/Iterable;Z)V\n+  #372 = Utf8               (Ljava/lang/Iterable<*>;Z)V\n+  #373 = Utf8               (Ljava/lang/Object;Z)V\n+  #374 = Utf8               wrongValueFormatException\n+  #375 = Utf8               (ILjava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+  #376 = Utf8               idx\n+  #377 = Utf8               valueType\n+  #378 = Utf8               cause\n+  #379 = Utf8               Ljava/lang/Throwable;\n+  #380 = Utf8               (ILjava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+  #381 = Utf8               Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Object;>;\n+  #382 = Utf8               SourceFile\n+  #383 = Utf8               JSONArray.java\n+  #384 = NameAndType        #167:#168     // \"<init>\":()V\n+  #385 = Utf8               java/util/ArrayList\n+  #386 = NameAndType        #163:#164     // myArrayList:Ljava/util/ArrayList;\n+  #387 = NameAndType        #537:#538     // nextClean:()C\n+  #388 = Utf8               A JSONArray text must start with \\'[\\'\n+  #389 = NameAndType        #539:#540     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+  #390 = Utf8               Expected a \\',\\' or \\']\\'\n+  #391 = NameAndType        #541:#168     // back:()V\n+  #392 = NameAndType        #542:#198     // NULL:Ljava/lang/Object;\n+  #393 = NameAndType        #543:#331     // add:(Ljava/lang/Object;)Z\n+  #394 = NameAndType        #544:#545     // nextValue:()Ljava/lang/Object;\n+  #395 = Utf8               org/json/JSONTokener\n+  #396 = NameAndType        #167:#181     // \"<init>\":(Ljava/lang/String;)V\n+  #397 = NameAndType        #167:#174     // \"<init>\":(Lorg/json/JSONTokener;)V\n+  #398 = NameAndType        #546:#255     // size:()I\n+  #399 = NameAndType        #167:#199     // \"<init>\":(I)V\n+  #400 = NameAndType        #367:#368     // addAll:(Ljava/util/Collection;Z)V\n+  #401 = NameAndType        #367:#371     // addAll:(Ljava/lang/Iterable;Z)V\n+  #402 = NameAndType        #167:#184     // \"<init>\":(Ljava/util/Collection;)V\n+  #403 = NameAndType        #547:#548     // getClass:()Ljava/lang/Class;\n+  #404 = NameAndType        #549:#366     // isArray:()Z\n+  #405 = Utf8               org/json/JSONException\n+  #406 = Utf8               JSONArray initial value should be a string or collection or array.\n+  #407 = NameAndType        #367:#373     // addAll:(Ljava/lang/Object;Z)V\n+  #408 = Utf8               JSONArray initial capacity cannot be negative.\n+  #409 = NameAndType        #202:#203     // iterator:()Ljava/util/Iterator;\n+  #410 = NameAndType        #257:#206     // opt:(I)Ljava/lang/Object;\n+  #411 = Utf8               java/lang/StringBuilder\n+  #412 = Utf8               JSONArray[\n+  #413 = NameAndType        #550:#551     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #414 = NameAndType        #550:#552     // append:(I)Ljava/lang/StringBuilder;\n+  #415 = Utf8               ] not found.\n+  #416 = NameAndType        #340:#341     // toString:()Ljava/lang/String;\n+  #417 = NameAndType        #205:#206     // get:(I)Ljava/lang/Object;\n+  #418 = NameAndType        #553:#554     // FALSE:Ljava/lang/Boolean;\n+  #419 = NameAndType        #555:#331     // equals:(Ljava/lang/Object;)Z\n+  #420 = Utf8               java/lang/String\n+  #421 = Utf8               false\n+  #422 = NameAndType        #556:#557     // equalsIgnoreCase:(Ljava/lang/String;)Z\n+  #423 = NameAndType        #558:#554     // TRUE:Ljava/lang/Boolean;\n+  #424 = Utf8               true\n+  #425 = Utf8               boolean\n+  #426 = NameAndType        #374:#375     // wrongValueFormatException:(ILjava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+  #427 = Utf8               java/lang/Number\n+  #428 = NameAndType        #266:#559     // doubleValue:()D\n+  #429 = NameAndType        #560:#561     // parseDouble:(Ljava/lang/String;)D\n+  #430 = Utf8               java/lang/Exception\n+  #431 = Utf8               double\n+  #432 = NameAndType        #270:#562     // floatValue:()F\n+  #433 = NameAndType        #563:#564     // parseFloat:(Ljava/lang/String;)F\n+  #434 = Utf8               float\n+  #435 = NameAndType        #565:#566     // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+  #436 = Utf8               number\n+  #437 = NameAndType        #273:#220     // optEnum:(Ljava/lang/Class;I)Ljava/lang/Enum;\n+  #438 = Utf8               enum of type\n+  #439 = NameAndType        #567:#341     // getSimpleName:()Ljava/lang/String;\n+  #440 = NameAndType        #568:#248     // quote:(Ljava/lang/String;)Ljava/lang/String;\n+  #441 = NameAndType        #569:#570     // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #442 = Utf8               BigDecimal\n+  #443 = NameAndType        #374:#380     // wrongValueFormatException:(ILjava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+  #444 = NameAndType        #571:#572     // objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #445 = Utf8               BigInteger\n+  #446 = NameAndType        #573:#255     // intValue:()I\n+  #447 = Class              #574          // java/lang/Integer\n+  #448 = NameAndType        #575:#576     // parseInt:(Ljava/lang/String;)I\n+  #449 = Utf8               int\n+  #450 = Utf8               org/json/JSONArray\n+  #451 = Utf8               JSONArray\n+  #452 = Utf8               org/json/JSONObject\n+  #453 = Utf8               JSONObject\n+  #454 = NameAndType        #577:#578     // longValue:()J\n+  #455 = Class              #579          // java/lang/Long\n+  #456 = NameAndType        #580:#581     // parseLong:(Ljava/lang/String;)J\n+  #457 = Utf8               long\n+  #458 = Utf8               String\n+  #459 = NameAndType        #254:#255     // length:()I\n+  #460 = Utf8\n+  #461 = NameAndType        #582:#583     // valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n+  #462 = NameAndType        #256:#168     // clear:()V\n+  #463 = NameAndType        #258:#259     // optBoolean:(IZ)Z\n+  #464 = NameAndType        #209:#210     // getBoolean:(I)Z\n+  #465 = Utf8               java/lang/Double\n+  #466 = NameAndType        #262:#263     // optDouble:(ID)D\n+  #467 = NameAndType        #290:#291     // optNumber:(ILjava/lang/Number;)Ljava/lang/Number;\n+  #468 = Utf8               java/lang/Float\n+  #469 = NameAndType        #267:#268     // optFloat:(IF)F\n+  #470 = NameAndType        #271:#272     // optInt:(II)I\n+  #471 = NameAndType        #273:#274     // optEnum:(Ljava/lang/Class;ILjava/lang/Enum;)Ljava/lang/Enum;\n+  #472 = NameAndType        #584:#585     // isAssignableFrom:(Ljava/lang/Class;)Z\n+  #473 = Utf8               java/lang/Enum\n+  #474 = NameAndType        #586:#587     // valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+  #475 = Utf8               java/lang/IllegalArgumentException\n+  #476 = Utf8               java/lang/NullPointerException\n+  #477 = NameAndType        #287:#288     // optLong:(IJ)J\n+  #478 = NameAndType        #292:#293     // optString:(ILjava/lang/String;)Ljava/lang/String;\n+  #479 = NameAndType        #294:#307     // put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n+  #480 = NameAndType        #586:#588     // valueOf:(D)Ljava/lang/Double;\n+  #481 = NameAndType        #586:#589     // valueOf:(F)Ljava/lang/Float;\n+  #482 = NameAndType        #586:#590     // valueOf:(I)Ljava/lang/Integer;\n+  #483 = NameAndType        #586:#591     // valueOf:(J)Ljava/lang/Long;\n+  #484 = NameAndType        #167:#592     // \"<init>\":(Ljava/util/Map;)V\n+  #485 = NameAndType        #593:#197     // testValidity:(Ljava/lang/Object;)V\n+  #486 = NameAndType        #294:#317     // put:(ILjava/lang/Object;)Lorg/json/JSONArray;\n+  #487 = NameAndType        #594:#595     // set:(ILjava/lang/Object;)Ljava/lang/Object;\n+  #488 = NameAndType        #596:#199     // ensureCapacity:(I)V\n+  #489 = NameAndType        #367:#597     // addAll:(Ljava/util/Collection;)Z\n+  #490 = Utf8               org/json/JSONPointer\n+  #491 = NameAndType        #322:#325     // query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+  #492 = NameAndType        #598:#599     // queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #493 = NameAndType        #327:#325     // optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+  #494 = Utf8               org/json/JSONPointerException\n+  #495 = NameAndType        #329:#206     // remove:(I)Ljava/lang/Object;\n+  #496 = NameAndType        #330:#331     // similar:(Ljava/lang/Object;)Z\n+  #497 = NameAndType        #600:#601     // isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n+  #498 = NameAndType        #365:#366     // isEmpty:()Z\n+  #499 = NameAndType        #244:#245     // getString:(I)Ljava/lang/String;\n+  #500 = NameAndType        #294:#602     // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #501 = NameAndType        #340:#245     // toString:(I)Ljava/lang/String;\n+  #502 = Utf8               java/io/StringWriter\n+  #503 = NameAndType        #603:#604     // getBuffer:()Ljava/lang/StringBuffer;\n+  #504 = NameAndType        #346:#350     // write:(Ljava/io/Writer;II)Ljava/io/Writer;\n+  #505 = NameAndType        #346:#199     // write:(I)V\n+  #506 = NameAndType        #605:#606     // writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+  #507 = Utf8               Unable to write JSONArray value at index: 0\n+  #508 = NameAndType        #167:#607     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #509 = NameAndType        #354:#608     // indent:(Ljava/io/Writer;I)V\n+  #510 = Utf8               Unable to write JSONArray value at index:\n+  #511 = Utf8               java/io/IOException\n+  #512 = NameAndType        #167:#609     // \"<init>\":(Ljava/lang/Throwable;)V\n+  #513 = NameAndType        #610:#366     // hasNext:()Z\n+  #514 = NameAndType        #611:#545     // next:()Ljava/lang/Object;\n+  #515 = NameAndType        #356:#357     // toList:()Ljava/util/List;\n+  #516 = NameAndType        #612:#613     // toMap:()Ljava/util/Map;\n+  #517 = NameAndType        #369:#599     // wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #518 = Class              #614          // java/lang/reflect/Array\n+  #519 = NameAndType        #615:#616     // getLength:(Ljava/lang/Object;)I\n+  #520 = NameAndType        #205:#617     // get:(Ljava/lang/Object;I)Ljava/lang/Object;\n+  #521 = Utf8               java/util/Collection\n+  #522 = Utf8               java/lang/Iterable\n+  #523 = Utf8               ] is not a\n+  #524 = Utf8               .\n+  #525 = Utf8                (\n+  #526 = NameAndType        #550:#618     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #527 = Utf8               ).\n+  #528 = Utf8               java/lang/Object\n+  #529 = Utf8               java/math/BigDecimal\n+  #530 = Utf8               java/math/BigInteger\n+  #531 = Utf8               java/lang/Class\n+  #532 = Utf8               java/lang/Boolean\n+  #533 = Utf8               java/lang/Throwable\n+  #534 = Utf8               java/io/Writer\n+  #535 = Utf8               java/util/List\n+  #536 = Utf8               java/util/Iterator\n+  #537 = Utf8               nextClean\n+  #538 = Utf8               ()C\n+  #539 = Utf8               syntaxError\n+  #540 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n+  #541 = Utf8               back\n+  #542 = Utf8               NULL\n+  #543 = Utf8               add\n+  #544 = Utf8               nextValue\n+  #545 = Utf8               ()Ljava/lang/Object;\n+  #546 = Utf8               size\n+  #547 = Utf8               getClass\n+  #548 = Utf8               ()Ljava/lang/Class;\n+  #549 = Utf8               isArray\n+  #550 = Utf8               append\n+  #551 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #552 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #553 = Utf8               FALSE\n+  #554 = Utf8               Ljava/lang/Boolean;\n+  #555 = Utf8               equals\n+  #556 = Utf8               equalsIgnoreCase\n+  #557 = Utf8               (Ljava/lang/String;)Z\n+  #558 = Utf8               TRUE\n+  #559 = Utf8               ()D\n+  #560 = Utf8               parseDouble\n+  #561 = Utf8               (Ljava/lang/String;)D\n+  #562 = Utf8               ()F\n+  #563 = Utf8               parseFloat\n+  #564 = Utf8               (Ljava/lang/String;)F\n+  #565 = Utf8               stringToNumber\n+  #566 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n+  #567 = Utf8               getSimpleName\n+  #568 = Utf8               quote\n+  #569 = Utf8               objectToBigDecimal\n+  #570 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #571 = Utf8               objectToBigInteger\n+  #572 = Utf8               (Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #573 = Utf8               intValue\n+  #574 = Utf8               java/lang/Integer\n+  #575 = Utf8               parseInt\n+  #576 = Utf8               (Ljava/lang/String;)I\n+  #577 = Utf8               longValue\n+  #578 = Utf8               ()J\n+  #579 = Utf8               java/lang/Long\n+  #580 = Utf8               parseLong\n+  #581 = Utf8               (Ljava/lang/String;)J\n+  #582 = Utf8               valueToString\n+  #583 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n+  #584 = Utf8               isAssignableFrom\n+  #585 = Utf8               (Ljava/lang/Class;)Z\n+  #586 = Utf8               valueOf\n+  #587 = Utf8               (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+  #588 = Utf8               (D)Ljava/lang/Double;\n+  #589 = Utf8               (F)Ljava/lang/Float;\n+  #590 = Utf8               (I)Ljava/lang/Integer;\n+  #591 = Utf8               (J)Ljava/lang/Long;\n+  #592 = Utf8               (Ljava/util/Map;)V\n+  #593 = Utf8               testValidity\n+  #594 = Utf8               set\n+  #595 = Utf8               (ILjava/lang/Object;)Ljava/lang/Object;\n+  #596 = Utf8               ensureCapacity\n+  #597 = Utf8               (Ljava/util/Collection;)Z\n+  #598 = Utf8               queryFrom\n+  #599 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #600 = Utf8               isNumberSimilar\n+  #601 = Utf8               (Ljava/lang/Number;Ljava/lang/Number;)Z\n+  #602 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #603 = Utf8               getBuffer\n+  #604 = Utf8               ()Ljava/lang/StringBuffer;\n+  #605 = Utf8               writeValue\n+  #606 = Utf8               (Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+  #607 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #608 = Utf8               (Ljava/io/Writer;I)V\n+  #609 = Utf8               (Ljava/lang/Throwable;)V\n+  #610 = Utf8               hasNext\n+  #611 = Utf8               next\n+  #612 = Utf8               toMap\n+  #613 = Utf8               ()Ljava/util/Map;\n+  #614 = Utf8               java/lang/reflect/Array\n+  #615 = Utf8               getLength\n+  #616 = Utf8               (Ljava/lang/Object;)I\n+  #617 = Utf8               (Ljava/lang/Object;I)Ljava/lang/Object;\n+  #618 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n {\n   private final java.util.ArrayList<java.lang.Object> myArrayList;\n     descriptor: Ljava/util/ArrayList;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n     Signature: #166                         // Ljava/util/ArrayList<Ljava/lang/Object;>;\n \n   public org.json.JSONArray();\n@@ -873,15 +852,15 @@\n             0      46     1 collection   Ljava/util/Collection<*>;\n       StackMapTable: number_of_entries = 2\n         frame_type = 255 /* full_frame */\n           offset_delta = 22\n           locals = [ class org/json/JSONArray, class java/util/Collection ]\n           stack = []\n         frame_type = 22 /* same */\n-    Signature: #192                         // (Ljava/util/Collection<*>;)V\n+    Signature: #189                         // (Ljava/util/Collection<*>;)V\n \n   public org.json.JSONArray(java.lang.Iterable<?>);\n     descriptor: (Ljava/lang/Iterable;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n@@ -908,15 +887,15 @@\n         Start  Length  Slot  Name   Signature\n             0      16     1  iter   Ljava/lang/Iterable<*>;\n       StackMapTable: number_of_entries = 1\n         frame_type = 255 /* full_frame */\n           offset_delta = 9\n           locals = [ class org/json/JSONArray, class java/lang/Iterable ]\n           stack = []\n-    Signature: #198                         // (Ljava/lang/Iterable<*>;)V\n+    Signature: #194                         // (Ljava/lang/Iterable<*>;)V\n \n   public org.json.JSONArray(org.json.JSONArray);\n     descriptor: (Lorg/json/JSONArray;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n@@ -1042,15 +1021,15 @@\n          4: invokevirtual #29                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;\n          7: areturn\n       LineNumberTable:\n         line 249: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/json/JSONArray;\n-    Signature: #209                         // ()Ljava/util/Iterator<Ljava/lang/Object;>;\n+    Signature: #204                         // ()Ljava/util/Iterator<Ljava/lang/Object;>;\n \n   public java.lang.Object get(int) throws org.json.JSONException;\n     descriptor: (I)Ljava/lang/Object;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=2\n          0: aload_0\n@@ -1358,15 +1337,15 @@\n             7      37     3   val   TE;\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 42\n           locals = [ class java/lang/Enum ]\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #234                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;I)TE;\n+    Signature: #227                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;I)TE;\n \n   public java.math.BigDecimal getBigDecimal(int) throws org.json.JSONException;\n     descriptor: (I)Ljava/math/BigDecimal;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=2\n          0: aload_0\n@@ -1797,15 +1776,15 @@\n         16: aload_0\n         17: getfield      #4                  // Field myArrayList:Ljava/util/ArrayList;\n         20: iload_1\n         21: invokevirtual #81                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;\n         24: areturn\n       LineNumberTable:\n         line 586: 0\n-        line 587: 21\n+        line 587: 16\n         line 586: 24\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      25     0  this   Lorg/json/JSONArray;\n             0      25     1 index   I\n       StackMapTable: number_of_entries = 3\n         frame_type = 12 /* same */\n@@ -2034,15 +2013,15 @@\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/json/JSONArray;\n             0       8     1 clazz   Ljava/lang/Class;\n             0       8     2 index   I\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0       8     1 clazz   Ljava/lang/Class<TE;>;\n-    Signature: #234                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;I)TE;\n+    Signature: #227                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;I)TE;\n \n   public <E extends java.lang.Enum<E>> E optEnum(java.lang.Class<E>, int, E);\n     descriptor: (Ljava/lang/Class;ILjava/lang/Enum;)Ljava/lang/Enum;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=6, args_size=4\n          0: aload_0\n@@ -2118,15 +2097,15 @@\n         frame_type = 21 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 9\n           locals = [ class org/json/JSONArray, class java/lang/Class, int, class java/lang/Enum ]\n           stack = [ class java/lang/IllegalArgumentException ]\n         frame_type = 67 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NullPointerException ]\n-    Signature: #290                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;ITE;)TE;\n+    Signature: #279                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;ITE;)TE;\n \n   public java.math.BigInteger optBigInteger(int, java.math.BigInteger);\n     descriptor: (ILjava/math/BigInteger;)Ljava/math/BigInteger;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=4, args_size=3\n          0: aload_0\n@@ -2398,15 +2377,15 @@\n         17: goto          24\n         20: aload_3\n         21: invokevirtual #50                 // Method java/lang/Object.toString:()Ljava/lang/String;\n         24: areturn\n       LineNumberTable:\n         line 938: 0\n         line 939: 6\n-        line 940: 21\n+        line 940: 20\n         line 939: 24\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      25     0  this   Lorg/json/JSONArray;\n             0      25     1 index   I\n             0      25     2 defaultValue   Ljava/lang/String;\n             6      19     3 object   Ljava/lang/Object;\n@@ -2461,15 +2440,15 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0  this   Lorg/json/JSONArray;\n             0      13     1 value   Ljava/util/Collection;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      13     1 value   Ljava/util/Collection<*>;\n-    Signature: #312                         // (Ljava/util/Collection<*>;)Lorg/json/JSONArray;\n+    Signature: #299                         // (Ljava/util/Collection<*>;)Lorg/json/JSONArray;\n \n   public org.json.JSONArray put(double) throws org.json.JSONException;\n     descriptor: (D)Lorg/json/JSONArray;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n@@ -2556,15 +2535,15 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0  this   Lorg/json/JSONArray;\n             0      13     1 value   Ljava/util/Map;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      13     1 value   Ljava/util/Map<**>;\n-    Signature: #319                         // (Ljava/util/Map<**>;)Lorg/json/JSONArray;\n+    Signature: #306                         // (Ljava/util/Map<**>;)Lorg/json/JSONArray;\n \n   public org.json.JSONArray put(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)Lorg/json/JSONArray;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n@@ -2639,15 +2618,15 @@\n             0      14     1 index   I\n             0      14     2 value   Ljava/util/Collection;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      14     2 value   Ljava/util/Collection<*>;\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #323                         // (ILjava/util/Collection<*>;)Lorg/json/JSONArray;\n+    Signature: #310                         // (ILjava/util/Collection<*>;)Lorg/json/JSONArray;\n \n   public org.json.JSONArray put(int, double) throws org.json.JSONException;\n     descriptor: (ID)Lorg/json/JSONArray;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=3\n          0: aload_0\n@@ -2753,15 +2732,15 @@\n             0      16     1 index   I\n             0      16     2 value   Ljava/util/Map;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      16     2 value   Ljava/util/Map<**>;\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #329                         // (ILjava/util/Map<**>;)Lorg/json/JSONArray;\n+    Signature: #316                         // (ILjava/util/Map<**>;)Lorg/json/JSONArray;\n \n   public org.json.JSONArray put(int, java.lang.Object) throws org.json.JSONException;\n     descriptor: (ILjava/lang/Object;)Lorg/json/JSONArray;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: iload_1\n@@ -2866,15 +2845,15 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/json/JSONArray;\n             0       8     1 collection   Ljava/util/Collection;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0       8     1 collection   Ljava/util/Collection<*>;\n-    Signature: #312                         // (Ljava/util/Collection<*>;)Lorg/json/JSONArray;\n+    Signature: #299                         // (Ljava/util/Collection<*>;)Lorg/json/JSONArray;\n \n   public org.json.JSONArray putAll(java.lang.Iterable<?>);\n     descriptor: (Ljava/lang/Iterable;)Lorg/json/JSONArray;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n@@ -2889,15 +2868,15 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/json/JSONArray;\n             0       8     1  iter   Ljava/lang/Iterable;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0       8     1  iter   Ljava/lang/Iterable<*>;\n-    Signature: #333                         // (Ljava/lang/Iterable<*>;)Lorg/json/JSONArray;\n+    Signature: #320                         // (Ljava/lang/Iterable<*>;)Lorg/json/JSONArray;\n \n   public org.json.JSONArray putAll(org.json.JSONArray);\n     descriptor: (Lorg/json/JSONArray;)Lorg/json/JSONArray;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n@@ -3035,15 +3014,16 @@\n         16: iload_1\n         17: invokevirtual #123                // Method java/util/ArrayList.remove:(I)Ljava/lang/Object;\n         20: goto          24\n         23: aconst_null\n         24: areturn\n       LineNumberTable:\n         line 1348: 0\n-        line 1349: 17\n+        line 1349: 12\n+        line 1350: 23\n         line 1348: 24\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      25     0  this   Lorg/json/JSONArray;\n             0      25     1 index   I\n       StackMapTable: number_of_entries = 2\n         frame_type = 23 /* same */\n@@ -3622,15 +3602,15 @@\n         frame_type = 10 /* same */\n         frame_type = 23 /* same */\n         frame_type = 23 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 7\n         frame_type = 250 /* chop */\n           offset_delta = 2\n-    Signature: #380                         // ()Ljava/util/List<Ljava/lang/Object;>;\n+    Signature: #364                         // ()Ljava/util/List<Ljava/lang/Object;>;\n \n   public boolean isEmpty();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -3718,15 +3698,15 @@\n           offset_delta = 29\n         frame_type = 2 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 6\n           locals = [ class java/util/Iterator ]\n         frame_type = 250 /* chop */\n           offset_delta = 26\n-    Signature: #386                         // (Ljava/util/Collection<*>;Z)V\n+    Signature: #370                         // (Ljava/util/Collection<*>;Z)V\n \n   private void addAll(java.lang.Iterable<?>, boolean);\n     descriptor: (Ljava/lang/Iterable;Z)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=5, args_size=3\n          0: iload_2\n@@ -3789,15 +3769,15 @@\n           offset_delta = 29\n         frame_type = 2 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 6\n           locals = [ class java/util/Iterator ]\n         frame_type = 250 /* chop */\n           offset_delta = 26\n-    Signature: #388                         // (Ljava/lang/Iterable<*>;Z)V\n+    Signature: #372                         // (Ljava/lang/Iterable<*>;Z)V\n \n   private void addAll(java.lang.Object, boolean) throws org.json.JSONException;\n     descriptor: (Ljava/lang/Object;Z)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=5, args_size=3\n          0: aload_1\n@@ -3993,9 +3973,9 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      51     0   idx   I\n             0      51     1 valueType   Ljava/lang/String;\n             0      51     2 value   Ljava/lang/Object;\n             0      51     3 cause   Ljava/lang/Throwable;\n }\n-Signature: #397                         // Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Object;>;\n+Signature: #381                         // Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Object;>;\n SourceFile: \"JSONArray.java\"\n"}]}
