{"diffoscope-json-version": 1, "source1": "first/XMLBeanDeclaration.class", "source2": "second/XMLBeanDeclaration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -97,29 +97,29 @@\n         return this.getAttributeNames().stream().filter(e -> !this.isReservedAttributeName(e)).collect(Collectors.toMap((Function<? super Object, ? extends String>)Function.identity(), e -> this.interpolate(this.getNode().getAttribute(e))));\n     }\n     \n     public Map<String, Object> getNestedBeanDeclarations() {\n         final Map<String, Object> nested = new HashMap<String, Object>();\n         this.getNode().getChildren().forEach(child -> {\n             if (!this.isReservedChildName(child.nodeName())) {\n-                final Object obj = nested.get(child.nodeName());\n+                final Object obj = map.get(child.nodeName());\n                 if (obj != null) {\n                     List<BeanDeclaration> list;\n                     if (obj instanceof List) {\n                         final List<BeanDeclaration> tmpList = list = (List)obj;\n                     }\n                     else {\n                         list = new ArrayList<BeanDeclaration>();\n                         list.add((BeanDeclaration)obj);\n-                        nested.put(child.nodeName(), list);\n+                        map.put(child.nodeName(), list);\n                     }\n                     list.add(this.createBeanDeclaration((XMLBeanDeclaration.NodeData<?>)child));\n                 }\n                 else {\n-                    nested.put(child.nodeName(), this.createBeanDeclaration((XMLBeanDeclaration.NodeData<?>)child));\n+                    map.put(child.nodeName(), this.createBeanDeclaration((XMLBeanDeclaration.NodeData<?>)child));\n                 }\n             }\n             return;\n         });\n         return nested;\n     }\n     \n"}]}
