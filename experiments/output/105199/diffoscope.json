{"diffoscope-json-version": 1, "source1": "first/EmptyFileFilter.class", "source2": "second/EmptyFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,37 +14,58 @@\n \n public class EmptyFileFilter extends AbstractFileFilter implements Serializable\n {\n     public static final IOFileFilter EMPTY;\n     public static final IOFileFilter NOT_EMPTY;\n     private static final long serialVersionUID = 3631422087512832211L;\n     \n+    static {\n+        EMPTY = (IOFileFilter)new EmptyFileFilter();\n+        NOT_EMPTY = EmptyFileFilter.EMPTY.negate();\n+    }\n+    \n     protected EmptyFileFilter() {\n     }\n     \n     public boolean accept(final File file) {\n         if (file.isDirectory()) {\n             final File[] files = file.listFiles();\n             return IOUtils.length((Object[])files) == 0;\n         }\n         return file.length() == 0L;\n     }\n     \n     public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {\n         try {\n             if (Files.isDirectory(file, new LinkOption[0])) {\n-                try (final Stream<Path> stream = Files.list(file)) {\n-                    return toFileVisitResult(!stream.findFirst().isPresent(), file);\n+                Throwable t = null;\n+                try {\n+                    final Stream<Path> stream = Files.list(file);\n+                    try {\n+                        return toFileVisitResult(!stream.findFirst().isPresent(), file);\n+                    }\n+                    finally {\n+                        if (stream != null) {\n+                            stream.close();\n+                        }\n+                    }\n+                }\n+                finally {\n+                    if (t == null) {\n+                        final Throwable exception;\n+                        t = exception;\n+                    }\n+                    else {\n+                        final Throwable exception;\n+                        if (t != exception) {\n+                            t.addSuppressed(exception);\n+                        }\n+                    }\n                 }\n             }\n             return toFileVisitResult(Files.size(file) == 0L, file);\n         }\n         catch (final IOException e) {\n             return this.handle((Throwable)e);\n         }\n     }\n-    \n-    static {\n-        EMPTY = (IOFileFilter)new EmptyFileFilter();\n-        NOT_EMPTY = EmptyFileFilter.EMPTY.negate();\n-    }\n }\n"}]}
