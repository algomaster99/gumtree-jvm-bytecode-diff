{"diffoscope-json-version": 1, "source1": "first/CodeAttribute.class", "source2": "second/CodeAttribute.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -50,18 +50,16 @@\n             if (i < codePacked.length - 1) {\n                 this.byteCodeOffsets.add(Integer.valueOf(lastBytecodePosition + byteCode.getLength()));\n             }\n             if (byteCode.getOpcode() == 196) {\n                 ++i;\n             }\n         }\n-        final Iterator<ByteCode> iterator = this.byteCodes.iterator();\n-        while (iterator.hasNext()) {\n-            final ByteCode byteCode = (ByteCode)iterator.next();\n-            byteCode.applyByteCodeTargetFixup(this);\n+        for (final ByteCode byteCode2 : this.byteCodes) {\n+            byteCode2.applyByteCodeTargetFixup(this);\n         }\n     }\n     \n     public void addAttribute(final Attribute attribute) {\n         this.attributes.add(attribute);\n         if (attribute instanceof LocalVariableTableAttribute) {\n             ((LocalVariableTableAttribute)attribute).setCodeLength(this.codeLength);\n@@ -94,22 +92,22 @@\n     }\n     \n     protected int[] getStartPCs() {\n         return null;\n     }\n     \n     public void renumber(final List<Integer> byteCodeOffsets) {\n-        this.exceptionTable.forEach(entry -> entry.renumber(byteCodeOffsets));\n+        this.exceptionTable.forEach(entry -> entry.renumber(list));\n     }\n     \n     protected void resolve(final ClassConstantPool pool) {\n         super.resolve(pool);\n-        this.attributes.forEach(attribute -> attribute.resolve(pool));\n-        this.byteCodes.forEach(byteCode -> byteCode.resolve(pool));\n-        this.exceptionTable.forEach(byteCode -> byteCode.resolve(pool));\n+        this.attributes.forEach(attribute -> attribute.resolve(classConstantPool));\n+        this.byteCodes.forEach(byteCode -> byteCode.resolve(classConstantPool2));\n+        this.exceptionTable.forEach(byteCode -> byteCode.resolve(classConstantPool3));\n     }\n     \n     public String toString() {\n         return \"Code: \" + this.getLength() + \" bytes\";\n     }\n     \n     protected void writeBody(final DataOutputStream dos) throws IOException {\n"}]}
