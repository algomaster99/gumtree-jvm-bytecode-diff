{"diffoscope-json-version": 1, "source1": "first/OctalUnescaper.class", "source2": "second/OctalUnescaper.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,35 +3,35 @@\n \n import java.io.IOException;\n import java.io.Writer;\n \n @Deprecated\n public class OctalUnescaper extends CharSequenceTranslator\n {\n-    public int translate(final CharSequence input, final int index, final Writer out) throws IOException {\n-        final int remaining = input.length() - index - 1;\n-        final StringBuilder builder = new StringBuilder();\n-        if (input.charAt(index) == '\\\\' && remaining > 0 && this.isOctalDigit(input.charAt(index + 1))) {\n-            final int next = index + 1;\n-            final int next2 = index + 2;\n-            final int next3 = index + 3;\n-            builder.append(input.charAt(next));\n-            if (remaining > 1 && this.isOctalDigit(input.charAt(next2))) {\n-                builder.append(input.charAt(next2));\n-                if (remaining > 2 && this.isZeroToThree(input.charAt(next)) && this.isOctalDigit(input.charAt(next3))) {\n-                    builder.append(input.charAt(next3));\n+    public int translate(final CharSequence charSequence, final int n, final Writer writer) throws IOException {\n+        final int n2 = charSequence.length() - n - 1;\n+        final StringBuilder sb = new StringBuilder();\n+        if (charSequence.charAt(n) == '\\\\' && n2 > 0 && this.isOctalDigit(charSequence.charAt(n + 1))) {\n+            final int n3 = n + 1;\n+            final int n4 = n + 2;\n+            final int n5 = n + 3;\n+            sb.append(charSequence.charAt(n3));\n+            if (n2 > 1 && this.isOctalDigit(charSequence.charAt(n4))) {\n+                sb.append(charSequence.charAt(n4));\n+                if (n2 > 2 && this.isZeroToThree(charSequence.charAt(n3)) && this.isOctalDigit(charSequence.charAt(n5))) {\n+                    sb.append(charSequence.charAt(n5));\n                 }\n             }\n-            out.write(Integer.parseInt(builder.toString(), 8));\n-            return 1 + builder.length();\n+            writer.write(Integer.parseInt(sb.toString(), 8));\n+            return 1 + sb.length();\n         }\n         return 0;\n     }\n     \n-    private boolean isOctalDigit(final char ch) {\n-        return ch >= '0' && ch <= '7';\n+    private boolean isOctalDigit(final char c) {\n+        return c >= '0' && c <= '7';\n     }\n     \n-    private boolean isZeroToThree(final char ch) {\n-        return ch >= '0' && ch <= '3';\n+    private boolean isZeroToThree(final char c) {\n+        return c >= '0' && c <= '3';\n     }\n }\n"}]}
