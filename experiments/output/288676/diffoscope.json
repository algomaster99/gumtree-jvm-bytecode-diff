{"diffoscope-json-version": 1, "source1": "first/BaseHierarchicalConfiguration.class", "source2": "second/BaseHierarchicalConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -144,15 +144,15 @@\n         final BaseHierarchicalConfiguration baseHierarchicalConfiguration = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>)new InMemoryNodeModel(immutableNode));\n         this.initSubConfiguration(baseHierarchicalConfiguration);\n         return baseHierarchicalConfiguration;\n     }\n     \n     private List<ImmutableNode> fetchFilteredNodeResults(final String s) {\n         final NodeHandler nodeHandler = this.getModel().getNodeHandler();\n-        return this.resolveNodeKey(nodeHandler.getRootNode(), s, nodeHandler);\n+        return this.resolveNodeKey((Object)nodeHandler.getRootNode(), s, nodeHandler);\n     }\n     \n     public ImmutableHierarchicalConfiguration immutableConfigurationAt(final String s, final boolean b) {\n         return ConfigurationUtils.unmodifiableConfiguration((HierarchicalConfiguration)this.configurationAt(s, b));\n     }\n     \n     public HierarchicalConfiguration<ImmutableNode> configurationAt(final String s) {\n@@ -246,15 +246,15 @@\n     private EventListener<ConfigurationEvent> createChangeListener() {\n         return (EventListener<ConfigurationEvent>)(configurationEvent -> this.subnodeConfigurationChanged(configurationEvent));\n     }\n     \n     public Configuration interpolatedConfiguration() {\n         final BaseHierarchicalConfiguration.InterpolatedVisitor interpolatedVisitor = new BaseHierarchicalConfiguration.InterpolatedVisitor(this);\n         final NodeHandler nodeHandler = this.getModel().getNodeHandler();\n-        NodeTreeWalker.INSTANCE.walkDFS(nodeHandler.getRootNode(), (ConfigurationNodeVisitor)interpolatedVisitor, nodeHandler);\n+        NodeTreeWalker.INSTANCE.walkDFS((Object)nodeHandler.getRootNode(), (ConfigurationNodeVisitor)interpolatedVisitor, nodeHandler);\n         final BaseHierarchicalConfiguration baseHierarchicalConfiguration = (BaseHierarchicalConfiguration)this.clone();\n         baseHierarchicalConfiguration.getNodeModel().setRootNode(interpolatedVisitor.getInterpolatedRoot());\n         return (Configuration)baseHierarchicalConfiguration;\n     }\n     \n     protected NodeModel<ImmutableNode> cloneNodeModel() {\n         return (NodeModel<ImmutableNode>)new InMemoryNodeModel((ImmutableNode)this.getModel().getNodeHandler().getRootNode());\n"}]}
