{"diffoscope-json-version": 1, "source1": "first/TrailingCommentCheck.class", "source2": "second/TrailingCommentCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,16 +21,16 @@\n         this.format = Pattern.compile(\"^[\\\\s});]*$\");\n     }\n     \n     public void setLegalComment(final Pattern legalComment) {\n         this.legalComment = legalComment;\n     }\n     \n-    public final void setFormat(final Pattern pattern) {\n-        this.format = pattern;\n+    public final void setFormat(final Pattern format) {\n+        this.format = format;\n     }\n     \n     public boolean isCommentNodesRequired() {\n         return true;\n     }\n     \n     public int[] getDefaultTokens() {\n@@ -41,54 +41,52 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 144, 145 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (ast.getType() == 144) {\n-            this.checkSingleLineComment(ast);\n+    public void visitToken(final DetailAST detailAST) {\n+        if (detailAST.getType() == 144) {\n+            this.checkSingleLineComment(detailAST);\n         }\n         else {\n-            this.checkBlockComment(ast);\n+            this.checkBlockComment(detailAST);\n         }\n     }\n     \n-    private void checkSingleLineComment(final DetailAST ast) {\n-        final int lineNo = ast.getLineNo();\n-        final String comment = ast.getFirstChild().getText();\n-        final int[] lineBeforeCodePoints = Arrays.copyOfRange(this.getLineCodePoints(lineNo - 1), 0, ast.getColumnNo());\n-        final String lineBefore = new String(lineBeforeCodePoints, 0, lineBeforeCodePoints.length);\n-        if (!this.format.matcher(lineBefore).find() && !this.isLegalCommentContent(comment)) {\n-            this.log(ast, \"trailing.comments\", new Object[0]);\n+    private void checkSingleLineComment(final DetailAST detailAST) {\n+        final int lineNo = detailAST.getLineNo();\n+        final String text = detailAST.getFirstChild().getText();\n+        final int[] copyOfRange = Arrays.copyOfRange(this.getLineCodePoints(lineNo - 1), 0, detailAST.getColumnNo());\n+        if (!this.format.matcher(new String(copyOfRange, 0, copyOfRange.length)).find() && !this.isLegalCommentContent(text)) {\n+            this.log(detailAST, \"trailing.comments\", new Object[0]);\n         }\n     }\n     \n-    private void checkBlockComment(final DetailAST ast) {\n-        final int lineNo = ast.getLineNo();\n-        final DetailAST firstChild = ast.getFirstChild();\n-        final DetailAST lastChild = ast.getLastChild();\n-        final String comment = firstChild.getText();\n-        int[] lineCodePoints = this.getLineCodePoints(lineNo - 1);\n-        if (lineCodePoints.length > lastChild.getColumnNo() + 1) {\n-            lineCodePoints = Arrays.copyOfRange(lineCodePoints, lastChild.getColumnNo() + 2, lineCodePoints.length);\n+    private void checkBlockComment(final DetailAST detailAST) {\n+        final int lineNo = detailAST.getLineNo();\n+        final DetailAST firstChild = detailAST.getFirstChild();\n+        final DetailAST lastChild = detailAST.getLastChild();\n+        final String text = firstChild.getText();\n+        int[] array = this.getLineCodePoints(lineNo - 1);\n+        if (array.length > lastChild.getColumnNo() + 1) {\n+            array = Arrays.copyOfRange(array, lastChild.getColumnNo() + 2, array.length);\n         }\n-        String line = new String(lineCodePoints, 0, lineCodePoints.length);\n-        line = TrailingCommentCheck.FORMAT_LINE.matcher(line).replaceAll(\"\");\n-        final int[] lineBeforeCodePoints = Arrays.copyOfRange(this.getLineCodePoints(lineNo - 1), 0, ast.getColumnNo());\n-        final String lineBefore = new String(lineBeforeCodePoints, 0, lineBeforeCodePoints.length);\n-        final boolean isCommentAtEndOfLine = ast.getLineNo() != lastChild.getLineNo() || CommonUtil.isBlank(line);\n-        final boolean isLegalBlockComment = (this.isLegalCommentContent(comment) && TokenUtil.areOnSameLine(firstChild, lastChild)) || this.format.matcher(lineBefore).find();\n-        if (isCommentAtEndOfLine && !isLegalBlockComment) {\n-            this.log(ast, \"trailing.comments\", new Object[0]);\n+        final String replaceAll = TrailingCommentCheck.FORMAT_LINE.matcher(new String(array, 0, array.length)).replaceAll(\"\");\n+        final int[] copyOfRange = Arrays.copyOfRange(this.getLineCodePoints(lineNo - 1), 0, detailAST.getColumnNo());\n+        final String input = new String(copyOfRange, 0, copyOfRange.length);\n+        final boolean b = detailAST.getLineNo() != lastChild.getLineNo() || CommonUtil.isBlank(replaceAll);\n+        final boolean b2 = (this.isLegalCommentContent(text) && TokenUtil.areOnSameLine(firstChild, lastChild)) || this.format.matcher(input).find();\n+        if (b && !b2) {\n+            this.log(detailAST, \"trailing.comments\", new Object[0]);\n         }\n     }\n     \n-    private boolean isLegalCommentContent(final String commentContent) {\n-        return this.legalComment != null && this.legalComment.matcher(commentContent).find();\n+    private boolean isLegalCommentContent(final String input) {\n+        return this.legalComment != null && this.legalComment.matcher(input).find();\n     }\n     \n     static {\n         FORMAT_LINE = Pattern.compile(\"/\");\n     }\n }\n"}]}
