{"diffoscope-json-version": 1, "source1": "first/DurationFormatUtils$Token.class", "source2": "second/DurationFormatUtils$Token.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,17 +4,17 @@\n import org.apache.commons.lang3.StringUtils;\n \n static class Token\n {\n     private final Object value;\n     private int count;\n     \n-    static boolean containsTokenWithValue(final Token[] tokens, final Object value) {\n-        for (final Token token : tokens) {\n-            if (token.getValue() == value) {\n+    static boolean containsTokenWithValue(final Token[] array, final Object o) {\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            if (array[i].getValue() == o) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n     Token(final Object value) {\n@@ -36,32 +36,32 @@\n     }\n     \n     Object getValue() {\n         return this.value;\n     }\n     \n     @Override\n-    public boolean equals(final Object obj2) {\n-        if (!(obj2 instanceof Token)) {\n+    public boolean equals(final Object o) {\n+        if (!(o instanceof Token)) {\n             return false;\n         }\n-        final Token tok2 = (Token)obj2;\n-        if (this.value.getClass() != tok2.value.getClass()) {\n+        final Token token = (Token)o;\n+        if (this.value.getClass() != token.value.getClass()) {\n             return false;\n         }\n-        if (this.count != tok2.count) {\n+        if (this.count != token.count) {\n             return false;\n         }\n         if (this.value instanceof StringBuilder) {\n-            return this.value.toString().equals(tok2.value.toString());\n+            return this.value.toString().equals(token.value.toString());\n         }\n         if (this.value instanceof Number) {\n-            return this.value.equals(tok2.value);\n+            return this.value.equals(token.value);\n         }\n-        return this.value == tok2.value;\n+        return this.value == token.value;\n     }\n     \n     @Override\n     public int hashCode() {\n         return this.value.hashCode();\n     }\n     \n"}]}
