{"diffoscope-json-version": 1, "source1": "first/FilenameUtils.class", "source2": "second/FilenameUtils.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,138 +1,138 @@\n-  SHA-256 checksum 321e667d438264a9de6e16b43c76964b2cf9600be1f66de63ef415cb576200d2\n+  SHA-256 checksum f371e00247d090ebf3a55a783ed704424c952d0b5e8b25912e21083cbafbfcbd\n   Compiled from \"FilenameUtils.java\"\n public class org.apache.commons.io.FilenameUtils\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #3                          // org/apache/commons/io/FilenameUtils\n   super_class: #121                       // java/lang/Object\n   interfaces: 0, fields: 16, methods: 46, attributes: 1\n Constant pool:\n-    #1 = Methodref          #121.#315     // java/lang/Object.\"<init>\":()V\n-    #2 = Fieldref           #3.#316       // org/apache/commons/io/FilenameUtils.SYSTEM_SEPARATOR:C\n-    #3 = Class              #317          // org/apache/commons/io/FilenameUtils\n-    #4 = Methodref          #3.#318       // org/apache/commons/io/FilenameUtils.doNormalize:(Ljava/lang/String;CZ)Ljava/lang/String;\n-    #5 = Methodref          #3.#319       // org/apache/commons/io/FilenameUtils.requireNonNullChars:(Ljava/lang/String;)V\n-    #6 = Methodref          #12.#320      // java/lang/String.length:()I\n-    #7 = Methodref          #3.#321       // org/apache/commons/io/FilenameUtils.getPrefixLength:(Ljava/lang/String;)I\n-    #8 = Methodref          #12.#322      // java/lang/String.getChars:(II[CI)V\n-    #9 = Fieldref           #3.#323       // org/apache/commons/io/FilenameUtils.OTHER_SEPARATOR:C\n-   #10 = Methodref          #324.#325     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #11 = String             #326          //\n-   #12 = Class              #327          // java/lang/String\n-   #13 = Methodref          #12.#328      // java/lang/String.\"<init>\":([CII)V\n-   #14 = Methodref          #3.#329       // org/apache/commons/io/FilenameUtils.normalize:(Ljava/lang/String;)Ljava/lang/String;\n-   #15 = Methodref          #12.#330      // java/lang/String.charAt:(I)C\n-   #16 = Methodref          #3.#331       // org/apache/commons/io/FilenameUtils.isSeparator:(C)Z\n-   #17 = Class              #332          // java/lang/StringBuilder\n-   #18 = Methodref          #17.#315      // java/lang/StringBuilder.\"<init>\":()V\n-   #19 = Methodref          #17.#333      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #20 = Methodref          #17.#334      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #21 = Methodref          #17.#335      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+    #1 = Methodref          #121.#311     // java/lang/Object.\"<init>\":()V\n+    #2 = Fieldref           #3.#312       // org/apache/commons/io/FilenameUtils.SYSTEM_SEPARATOR:C\n+    #3 = Class              #313          // org/apache/commons/io/FilenameUtils\n+    #4 = Methodref          #3.#314       // org/apache/commons/io/FilenameUtils.doNormalize:(Ljava/lang/String;CZ)Ljava/lang/String;\n+    #5 = Methodref          #3.#315       // org/apache/commons/io/FilenameUtils.requireNonNullChars:(Ljava/lang/String;)V\n+    #6 = Methodref          #12.#316      // java/lang/String.length:()I\n+    #7 = Methodref          #3.#317       // org/apache/commons/io/FilenameUtils.getPrefixLength:(Ljava/lang/String;)I\n+    #8 = Methodref          #12.#318      // java/lang/String.getChars:(II[CI)V\n+    #9 = Fieldref           #3.#319       // org/apache/commons/io/FilenameUtils.OTHER_SEPARATOR:C\n+   #10 = Methodref          #320.#321     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #11 = String             #322          //\n+   #12 = Class              #323          // java/lang/String\n+   #13 = Methodref          #12.#324      // java/lang/String.\"<init>\":([CII)V\n+   #14 = Methodref          #3.#325       // org/apache/commons/io/FilenameUtils.normalize:(Ljava/lang/String;)Ljava/lang/String;\n+   #15 = Methodref          #12.#326      // java/lang/String.charAt:(I)C\n+   #16 = Methodref          #3.#327       // org/apache/commons/io/FilenameUtils.isSeparator:(C)Z\n+   #17 = Class              #328          // java/lang/StringBuilder\n+   #18 = Methodref          #17.#311      // java/lang/StringBuilder.\"<init>\":()V\n+   #19 = Methodref          #17.#329      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #20 = Methodref          #17.#330      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #21 = Methodref          #17.#331      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n    #22 = String             #192          // canonicalParent\n-   #23 = Methodref          #336.#337     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #24 = Fieldref           #338.#339     // org/apache/commons/io/IOCase.SYSTEM:Lorg/apache/commons/io/IOCase;\n-   #25 = Methodref          #338.#340     // org/apache/commons/io/IOCase.checkEquals:(Ljava/lang/String;Ljava/lang/String;)Z\n-   #26 = Methodref          #338.#341     // org/apache/commons/io/IOCase.checkStartsWith:(Ljava/lang/String;Ljava/lang/String;)Z\n-   #27 = Methodref          #12.#342      // java/lang/String.indexOf:(I)I\n-   #28 = Methodref          #12.#343      // java/lang/String.replace:(CC)Ljava/lang/String;\n-   #29 = Methodref          #3.#344       // org/apache/commons/io/FilenameUtils.isSystemWindows:()Z\n-   #30 = Methodref          #3.#345       // org/apache/commons/io/FilenameUtils.separatorsToWindows:(Ljava/lang/String;)Ljava/lang/String;\n-   #31 = Methodref          #3.#346       // org/apache/commons/io/FilenameUtils.separatorsToUnix:(Ljava/lang/String;)Ljava/lang/String;\n-   #32 = Methodref          #12.#347      // java/lang/String.indexOf:(II)I\n-   #33 = Methodref          #348.#349     // java/lang/Math.min:(II)I\n-   #34 = Methodref          #350.#351     // java/lang/Character.toUpperCase:(C)C\n-   #35 = Methodref          #352.#353     // org/apache/commons/io/FileSystem.getCurrent:()Lorg/apache/commons/io/FileSystem;\n-   #36 = Methodref          #352.#354     // org/apache/commons/io/FileSystem.supportsDriveLetter:()Z\n-   #37 = Methodref          #12.#355      // java/lang/String.substring:(II)Ljava/lang/String;\n-   #38 = Methodref          #3.#356       // org/apache/commons/io/FilenameUtils.isValidHostName:(Ljava/lang/String;)Z\n-   #39 = Methodref          #12.#357      // java/lang/String.lastIndexOf:(I)I\n-   #40 = Methodref          #348.#358     // java/lang/Math.max:(II)I\n-   #41 = Methodref          #3.#359       // org/apache/commons/io/FilenameUtils.getAdsCriticalOffset:(Ljava/lang/String;)I\n-   #42 = Class              #360          // java/lang/IllegalArgumentException\n-   #43 = String             #361          // NTFS ADS separator (\\':\\') in file name is forbidden.\n-   #44 = Methodref          #42.#362      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #45 = Methodref          #3.#363       // org/apache/commons/io/FilenameUtils.indexOfLastSeparator:(Ljava/lang/String;)I\n-   #46 = Methodref          #3.#364       // org/apache/commons/io/FilenameUtils.doGetPath:(Ljava/lang/String;I)Ljava/lang/String;\n-   #47 = Methodref          #3.#365       // org/apache/commons/io/FilenameUtils.doGetFullPath:(Ljava/lang/String;Z)Ljava/lang/String;\n-   #48 = Methodref          #3.#366       // org/apache/commons/io/FilenameUtils.getPrefix:(Ljava/lang/String;)Ljava/lang/String;\n-   #49 = Methodref          #12.#367      // java/lang/String.substring:(I)Ljava/lang/String;\n-   #50 = String             #368          // Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\n-   #51 = Methodref          #3.#369       // org/apache/commons/io/FilenameUtils.getName:(Ljava/lang/String;)Ljava/lang/String;\n-   #52 = Methodref          #3.#370       // org/apache/commons/io/FilenameUtils.removeExtension:(Ljava/lang/String;)Ljava/lang/String;\n-   #53 = Methodref          #3.#371       // org/apache/commons/io/FilenameUtils.indexOfExtension:(Ljava/lang/String;)I\n-   #54 = Fieldref           #338.#372     // org/apache/commons/io/IOCase.SENSITIVE:Lorg/apache/commons/io/IOCase;\n-   #55 = Methodref          #3.#373       // org/apache/commons/io/FilenameUtils.equals:(Ljava/lang/String;Ljava/lang/String;ZLorg/apache/commons/io/IOCase;)Z\n-   #56 = Methodref          #12.#374      // java/lang/String.isEmpty:()Z\n-   #57 = Methodref          #3.#375       // org/apache/commons/io/FilenameUtils.getExtension:(Ljava/lang/String;)Ljava/lang/String;\n-   #58 = Methodref          #12.#376      // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #59 = InterfaceMethodref #377.#374     // java/util/Collection.isEmpty:()Z\n-   #60 = InterfaceMethodref #377.#378     // java/util/Collection.iterator:()Ljava/util/Iterator;\n-   #61 = InterfaceMethodref #379.#380     // java/util/Iterator.hasNext:()Z\n-   #62 = InterfaceMethodref #379.#381     // java/util/Iterator.next:()Ljava/lang/Object;\n-   #63 = Methodref          #3.#382       // org/apache/commons/io/FilenameUtils.wildcardMatch:(Ljava/lang/String;Ljava/lang/String;Lorg/apache/commons/io/IOCase;)Z\n-   #64 = Methodref          #3.#383       // org/apache/commons/io/FilenameUtils.splitOnTokens:(Ljava/lang/String;)[Ljava/lang/String;\n-   #65 = Class              #384          // java/util/ArrayDeque\n-   #66 = Methodref          #65.#385      // java/util/ArrayDeque.\"<init>\":(I)V\n-   #67 = InterfaceMethodref #386.#374     // java/util/Deque.isEmpty:()Z\n-   #68 = InterfaceMethodref #386.#387     // java/util/Deque.pop:()Ljava/lang/Object;\n-   #69 = Class              #264          // \"[I\"\n-   #70 = String             #388          // ?\n-   #71 = String             #389          // *\n-   #72 = Methodref          #338.#390     // org/apache/commons/io/IOCase.checkIndexOf:(Ljava/lang/String;ILjava/lang/String;)I\n-   #73 = InterfaceMethodref #386.#391     // java/util/Deque.push:(Ljava/lang/Object;)V\n-   #74 = Methodref          #338.#392     // org/apache/commons/io/IOCase.checkRegionMatches:(Ljava/lang/String;ILjava/lang/String;)Z\n-   #75 = Methodref          #12.#393      // java/lang/String.toCharArray:()[C\n-   #76 = Class              #394          // java/util/ArrayList\n-   #77 = Methodref          #76.#315      // java/util/ArrayList.\"<init>\":()V\n-   #78 = Methodref          #17.#320      // java/lang/StringBuilder.length:()I\n-   #79 = Methodref          #76.#395      // java/util/ArrayList.add:(Ljava/lang/Object;)Z\n-   #80 = Methodref          #17.#396      // java/lang/StringBuilder.setLength:(I)V\n-   #81 = Fieldref           #3.#397       // org/apache/commons/io/FilenameUtils.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-   #82 = Methodref          #76.#398      // java/util/ArrayList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #23 = Methodref          #332.#333     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #24 = Fieldref           #272.#334     // org/apache/commons/io/IOCase.SYSTEM:Lorg/apache/commons/io/IOCase;\n+   #25 = Methodref          #272.#335     // org/apache/commons/io/IOCase.checkEquals:(Ljava/lang/String;Ljava/lang/String;)Z\n+   #26 = Methodref          #272.#336     // org/apache/commons/io/IOCase.checkStartsWith:(Ljava/lang/String;Ljava/lang/String;)Z\n+   #27 = Methodref          #12.#337      // java/lang/String.indexOf:(I)I\n+   #28 = Methodref          #12.#338      // java/lang/String.replace:(CC)Ljava/lang/String;\n+   #29 = Methodref          #3.#339       // org/apache/commons/io/FilenameUtils.isSystemWindows:()Z\n+   #30 = Methodref          #3.#340       // org/apache/commons/io/FilenameUtils.separatorsToWindows:(Ljava/lang/String;)Ljava/lang/String;\n+   #31 = Methodref          #3.#341       // org/apache/commons/io/FilenameUtils.separatorsToUnix:(Ljava/lang/String;)Ljava/lang/String;\n+   #32 = Methodref          #12.#342      // java/lang/String.indexOf:(II)I\n+   #33 = Methodref          #343.#344     // java/lang/Math.min:(II)I\n+   #34 = Methodref          #345.#346     // java/lang/Character.toUpperCase:(C)C\n+   #35 = Methodref          #347.#348     // org/apache/commons/io/FileSystem.getCurrent:()Lorg/apache/commons/io/FileSystem;\n+   #36 = Methodref          #347.#349     // org/apache/commons/io/FileSystem.supportsDriveLetter:()Z\n+   #37 = Methodref          #12.#350      // java/lang/String.substring:(II)Ljava/lang/String;\n+   #38 = Methodref          #3.#351       // org/apache/commons/io/FilenameUtils.isValidHostName:(Ljava/lang/String;)Z\n+   #39 = Methodref          #12.#352      // java/lang/String.lastIndexOf:(I)I\n+   #40 = Methodref          #343.#353     // java/lang/Math.max:(II)I\n+   #41 = Methodref          #3.#354       // org/apache/commons/io/FilenameUtils.getAdsCriticalOffset:(Ljava/lang/String;)I\n+   #42 = Class              #355          // java/lang/IllegalArgumentException\n+   #43 = String             #356          // NTFS ADS separator (\\':\\') in file name is forbidden.\n+   #44 = Methodref          #42.#357      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #45 = Methodref          #3.#358       // org/apache/commons/io/FilenameUtils.indexOfLastSeparator:(Ljava/lang/String;)I\n+   #46 = Methodref          #3.#359       // org/apache/commons/io/FilenameUtils.doGetPath:(Ljava/lang/String;I)Ljava/lang/String;\n+   #47 = Methodref          #3.#360       // org/apache/commons/io/FilenameUtils.doGetFullPath:(Ljava/lang/String;Z)Ljava/lang/String;\n+   #48 = Methodref          #3.#361       // org/apache/commons/io/FilenameUtils.getPrefix:(Ljava/lang/String;)Ljava/lang/String;\n+   #49 = Methodref          #12.#362      // java/lang/String.substring:(I)Ljava/lang/String;\n+   #50 = String             #363          // Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\n+   #51 = Methodref          #3.#364       // org/apache/commons/io/FilenameUtils.getName:(Ljava/lang/String;)Ljava/lang/String;\n+   #52 = Methodref          #3.#365       // org/apache/commons/io/FilenameUtils.removeExtension:(Ljava/lang/String;)Ljava/lang/String;\n+   #53 = Methodref          #3.#366       // org/apache/commons/io/FilenameUtils.indexOfExtension:(Ljava/lang/String;)I\n+   #54 = Fieldref           #272.#367     // org/apache/commons/io/IOCase.SENSITIVE:Lorg/apache/commons/io/IOCase;\n+   #55 = Methodref          #3.#368       // org/apache/commons/io/FilenameUtils.equals:(Ljava/lang/String;Ljava/lang/String;ZLorg/apache/commons/io/IOCase;)Z\n+   #56 = Methodref          #12.#369      // java/lang/String.isEmpty:()Z\n+   #57 = Methodref          #3.#370       // org/apache/commons/io/FilenameUtils.getExtension:(Ljava/lang/String;)Ljava/lang/String;\n+   #58 = Methodref          #12.#371      // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #59 = InterfaceMethodref #372.#369     // java/util/Collection.isEmpty:()Z\n+   #60 = InterfaceMethodref #372.#373     // java/util/Collection.iterator:()Ljava/util/Iterator;\n+   #61 = InterfaceMethodref #256.#374     // java/util/Iterator.hasNext:()Z\n+   #62 = InterfaceMethodref #256.#375     // java/util/Iterator.next:()Ljava/lang/Object;\n+   #63 = Methodref          #3.#376       // org/apache/commons/io/FilenameUtils.wildcardMatch:(Ljava/lang/String;Ljava/lang/String;Lorg/apache/commons/io/IOCase;)Z\n+   #64 = Methodref          #3.#377       // org/apache/commons/io/FilenameUtils.splitOnTokens:(Ljava/lang/String;)[Ljava/lang/String;\n+   #65 = Class              #378          // java/util/ArrayDeque\n+   #66 = Methodref          #65.#379      // java/util/ArrayDeque.\"<init>\":(I)V\n+   #67 = InterfaceMethodref #273.#369     // java/util/Deque.isEmpty:()Z\n+   #68 = InterfaceMethodref #273.#380     // java/util/Deque.pop:()Ljava/lang/Object;\n+   #69 = Class              #263          // \"[I\"\n+   #70 = String             #381          // ?\n+   #71 = String             #382          // *\n+   #72 = Methodref          #272.#383     // org/apache/commons/io/IOCase.checkIndexOf:(Ljava/lang/String;ILjava/lang/String;)I\n+   #73 = InterfaceMethodref #273.#384     // java/util/Deque.push:(Ljava/lang/Object;)V\n+   #74 = Methodref          #272.#385     // org/apache/commons/io/IOCase.checkRegionMatches:(Ljava/lang/String;ILjava/lang/String;)Z\n+   #75 = Methodref          #12.#386      // java/lang/String.toCharArray:()[C\n+   #76 = Class              #387          // java/util/ArrayList\n+   #77 = Methodref          #76.#311      // java/util/ArrayList.\"<init>\":()V\n+   #78 = Methodref          #17.#316      // java/lang/StringBuilder.length:()I\n+   #79 = Methodref          #76.#388      // java/util/ArrayList.add:(Ljava/lang/Object;)Z\n+   #80 = Methodref          #17.#389      // java/lang/StringBuilder.setLength:(I)V\n+   #81 = Fieldref           #3.#390       // org/apache/commons/io/FilenameUtils.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+   #82 = Methodref          #76.#391      // java/util/ArrayList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n    #83 = Class              #123          // \"[Ljava/lang/String;\"\n-   #84 = Methodref          #3.#399       // org/apache/commons/io/FilenameUtils.isIPv6Address:(Ljava/lang/String;)Z\n-   #85 = Methodref          #3.#400       // org/apache/commons/io/FilenameUtils.isRFC3986HostName:(Ljava/lang/String;)Z\n-   #86 = Fieldref           #3.#401       // org/apache/commons/io/FilenameUtils.IPV4_PATTERN:Ljava/util/regex/Pattern;\n-   #87 = Methodref          #402.#403     // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-   #88 = Methodref          #404.#405     // java/util/regex/Matcher.matches:()Z\n-   #89 = Methodref          #404.#406     // java/util/regex/Matcher.groupCount:()I\n-   #90 = Methodref          #404.#407     // java/util/regex/Matcher.group:(I)Ljava/lang/String;\n-   #91 = Methodref          #408.#409     // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n-   #92 = String             #410          // 0\n-   #93 = Methodref          #12.#411      // java/lang/String.startsWith:(Ljava/lang/String;)Z\n-   #94 = String             #412          // ::\n-   #95 = Methodref          #12.#413      // java/lang/String.contains:(Ljava/lang/CharSequence;)Z\n-   #96 = Methodref          #12.#414      // java/lang/String.indexOf:(Ljava/lang/String;)I\n-   #97 = Methodref          #12.#415      // java/lang/String.lastIndexOf:(Ljava/lang/String;)I\n-   #98 = String             #416          // :\n-   #99 = Methodref          #12.#417      // java/lang/String.endsWith:(Ljava/lang/String;)Z\n-  #100 = Methodref          #12.#418      // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n-  #101 = Methodref          #419.#420     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-  #102 = Methodref          #76.#421      // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n-  #103 = InterfaceMethodref #422.#395     // java/util/List.add:(Ljava/lang/Object;)Z\n-  #104 = InterfaceMethodref #422.#374     // java/util/List.isEmpty:()Z\n-  #105 = InterfaceMethodref #422.#423     // java/util/List.remove:(I)Ljava/lang/Object;\n-  #106 = InterfaceMethodref #422.#398     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #107 = String             #424          // .\n-  #108 = Methodref          #3.#425       // org/apache/commons/io/FilenameUtils.isIPv4Address:(Ljava/lang/String;)Z\n-  #109 = Methodref          #408.#426     // java/lang/Integer.parseInt:(Ljava/lang/String;I)I\n-  #110 = Class              #427          // java/lang/NumberFormatException\n+   #84 = Methodref          #3.#392       // org/apache/commons/io/FilenameUtils.isIPv6Address:(Ljava/lang/String;)Z\n+   #85 = Methodref          #3.#393       // org/apache/commons/io/FilenameUtils.isRFC3986HostName:(Ljava/lang/String;)Z\n+   #86 = Fieldref           #3.#394       // org/apache/commons/io/FilenameUtils.IPV4_PATTERN:Ljava/util/regex/Pattern;\n+   #87 = Methodref          #395.#396     // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+   #88 = Methodref          #291.#397     // java/util/regex/Matcher.matches:()Z\n+   #89 = Methodref          #291.#398     // java/util/regex/Matcher.groupCount:()I\n+   #90 = Methodref          #291.#399     // java/util/regex/Matcher.group:(I)Ljava/lang/String;\n+   #91 = Methodref          #400.#401     // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+   #92 = String             #402          // 0\n+   #93 = Methodref          #12.#403      // java/lang/String.startsWith:(Ljava/lang/String;)Z\n+   #94 = String             #404          // ::\n+   #95 = Methodref          #12.#405      // java/lang/String.contains:(Ljava/lang/CharSequence;)Z\n+   #96 = Methodref          #12.#406      // java/lang/String.indexOf:(Ljava/lang/String;)I\n+   #97 = Methodref          #12.#407      // java/lang/String.lastIndexOf:(Ljava/lang/String;)I\n+   #98 = String             #408          // :\n+   #99 = Methodref          #12.#409      // java/lang/String.endsWith:(Ljava/lang/String;)Z\n+  #100 = Methodref          #12.#410      // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n+  #101 = Methodref          #411.#412     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+  #102 = Methodref          #76.#413      // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n+  #103 = InterfaceMethodref #305.#388     // java/util/List.add:(Ljava/lang/Object;)Z\n+  #104 = InterfaceMethodref #305.#369     // java/util/List.isEmpty:()Z\n+  #105 = InterfaceMethodref #305.#414     // java/util/List.remove:(I)Ljava/lang/Object;\n+  #106 = InterfaceMethodref #305.#391     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #107 = String             #415          // .\n+  #108 = Methodref          #3.#416       // org/apache/commons/io/FilenameUtils.isIPv4Address:(Ljava/lang/String;)Z\n+  #109 = Methodref          #400.#417     // java/lang/Integer.parseInt:(Ljava/lang/String;I)I\n+  #110 = Class              #418          // java/lang/NumberFormatException\n   #111 = Integer            65535\n-  #112 = String             #428          // \\\\.\n-  #113 = Methodref          #12.#429      // java/lang/String.split:(Ljava/lang/String;I)[Ljava/lang/String;\n-  #114 = Fieldref           #3.#430       // org/apache/commons/io/FilenameUtils.REG_NAME_PART_PATTERN:Ljava/util/regex/Pattern;\n-  #115 = Methodref          #350.#431     // java/lang/Character.toString:(C)Ljava/lang/String;\n-  #116 = Fieldref           #3.#432       // org/apache/commons/io/FilenameUtils.EXTENSION_SEPARATOR_STR:Ljava/lang/String;\n-  #117 = Fieldref           #433.#434     // java/io/File.separatorChar:C\n-  #118 = String             #435          // ^(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})$\n-  #119 = Methodref          #402.#436     // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-  #120 = String             #437          // ^[a-zA-Z0-9][a-zA-Z0-9-]*$\n-  #121 = Class              #438          // java/lang/Object\n+  #112 = String             #419          // \\\\.\n+  #113 = Methodref          #12.#420      // java/lang/String.split:(Ljava/lang/String;I)[Ljava/lang/String;\n+  #114 = Fieldref           #3.#421       // org/apache/commons/io/FilenameUtils.REG_NAME_PART_PATTERN:Ljava/util/regex/Pattern;\n+  #115 = Methodref          #345.#422     // java/lang/Character.toString:(C)Ljava/lang/String;\n+  #116 = Fieldref           #3.#423       // org/apache/commons/io/FilenameUtils.EXTENSION_SEPARATOR_STR:Ljava/lang/String;\n+  #117 = Fieldref           #424.#425     // java/io/File.separatorChar:C\n+  #118 = String             #426          // ^(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})$\n+  #119 = Methodref          #395.#427     // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+  #120 = String             #428          // ^[a-zA-Z0-9][a-zA-Z0-9-]*$\n+  #121 = Class              #429          // java/lang/Object\n   #122 = Utf8               EMPTY_STRING_ARRAY\n   #123 = Utf8               [Ljava/lang/String;\n   #124 = Utf8               EMPTY_STRING\n   #125 = Utf8               Ljava/lang/String;\n   #126 = Utf8               ConstantValue\n   #127 = Utf8               NOT_FOUND\n   #128 = Utf8               I\n@@ -198,353 +198,344 @@\n   #188 = Utf8               fullFileNameToAdd\n   #189 = Utf8               len\n   #190 = Utf8               directoryContains\n   #191 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Z\n   #192 = Utf8               canonicalParent\n   #193 = Utf8               canonicalChild\n   #194 = Utf8               Exceptions\n-  #195 = Class              #439          // java/io/IOException\n+  #195 = Class              #430          // java/io/IOException\n   #196 = Utf8               separatorsToUnix\n   #197 = Utf8               path\n   #198 = Utf8               separatorsToWindows\n   #199 = Utf8               separatorsToSystem\n-  #200 = Class              #327          // java/lang/String\n-  #201 = Utf8               getPrefixLength\n-  #202 = Utf8               (Ljava/lang/String;)I\n-  #203 = Utf8               posUnix\n-  #204 = Utf8               posWin\n-  #205 = Utf8               ch0\n-  #206 = Utf8               ch1\n-  #207 = Utf8               pos\n-  #208 = Utf8               hostnamePart\n-  #209 = Utf8               indexOfLastSeparator\n-  #210 = Utf8               lastUnixPos\n-  #211 = Utf8               lastWindowsPos\n-  #212 = Utf8               indexOfExtension\n-  #213 = Utf8               offset\n-  #214 = Utf8               extensionPos\n-  #215 = Utf8               lastSeparator\n-  #216 = Utf8               getPrefix\n-  #217 = Utf8               getPath\n-  #218 = Utf8               getPathNoEndSeparator\n-  #219 = Utf8               doGetPath\n-  #220 = Utf8               (Ljava/lang/String;I)Ljava/lang/String;\n-  #221 = Utf8               separatorAdd\n-  #222 = Utf8               index\n-  #223 = Utf8               endIndex\n-  #224 = Utf8               getFullPath\n-  #225 = Utf8               getFullPathNoEndSeparator\n-  #226 = Utf8               doGetFullPath\n-  #227 = Utf8               includeSeparator\n-  #228 = Utf8               end\n-  #229 = Utf8               getName\n-  #230 = Utf8               requireNonNullChars\n-  #231 = Utf8               (Ljava/lang/String;)V\n-  #232 = Utf8               getBaseName\n-  #233 = Utf8               getExtension\n-  #234 = Utf8               getAdsCriticalOffset\n-  #235 = Utf8               offset1\n-  #236 = Utf8               offset2\n-  #237 = Utf8               removeExtension\n-  #238 = Utf8               equals\n-  #239 = Utf8               fileName1\n-  #240 = Utf8               fileName2\n-  #241 = Utf8               equalsOnSystem\n-  #242 = Utf8               equalsNormalized\n-  #243 = Utf8               equalsNormalizedOnSystem\n-  #244 = Utf8               (Ljava/lang/String;Ljava/lang/String;ZLorg/apache/commons/io/IOCase;)Z\n-  #245 = Utf8               normalized\n-  #246 = Utf8               caseSensitivity\n-  #247 = Utf8               Lorg/apache/commons/io/IOCase;\n-  #248 = Utf8               isExtension\n-  #249 = Utf8               extension\n-  #250 = Utf8               fileExt\n-  #251 = Utf8               (Ljava/lang/String;[Ljava/lang/String;)Z\n-  #252 = Utf8               extensions\n-  #253 = Utf8               (Ljava/lang/String;Ljava/util/Collection;)Z\n-  #254 = Utf8               Ljava/util/Collection;\n-  #255 = Utf8               LocalVariableTypeTable\n-  #256 = Utf8               Ljava/util/Collection<Ljava/lang/String;>;\n-  #257 = Class              #440          // java/util/Iterator\n-  #258 = Utf8               Signature\n-  #259 = Utf8               (Ljava/lang/String;Ljava/util/Collection<Ljava/lang/String;>;)Z\n-  #260 = Utf8               wildcardMatch\n-  #261 = Utf8               wildcardMatcher\n-  #262 = Utf8               wildcardMatchOnSystem\n-  #263 = Utf8               (Ljava/lang/String;Ljava/lang/String;Lorg/apache/commons/io/IOCase;)Z\n-  #264 = Utf8               [I\n-  #265 = Utf8               repeat\n-  #266 = Utf8               wcs\n-  #267 = Utf8               anyChars\n-  #268 = Utf8               textIdx\n-  #269 = Utf8               wcsIdx\n-  #270 = Utf8               backtrack\n-  #271 = Utf8               Ljava/util/Deque;\n-  #272 = Utf8               Ljava/util/Deque<[I>;\n-  #273 = Class              #441          // org/apache/commons/io/IOCase\n-  #274 = Class              #442          // java/util/Deque\n-  #275 = Utf8               splitOnTokens\n-  #276 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n-  #277 = Utf8               text\n-  #278 = Utf8               list\n-  #279 = Utf8               Ljava/util/ArrayList;\n-  #280 = Utf8               buffer\n-  #281 = Utf8               Ljava/lang/StringBuilder;\n-  #282 = Utf8               prevChar\n-  #283 = Utf8               Ljava/util/ArrayList<Ljava/lang/String;>;\n-  #284 = Class              #394          // java/util/ArrayList\n-  #285 = Class              #332          // java/lang/StringBuilder\n-  #286 = Utf8               isValidHostName\n-  #287 = Utf8               (Ljava/lang/String;)Z\n-  #288 = Utf8               name\n-  #289 = Utf8               isIPv4Address\n-  #290 = Utf8               ipSegment\n-  #291 = Utf8               iIpSegment\n-  #292 = Utf8               m\n-  #293 = Utf8               Ljava/util/regex/Matcher;\n-  #294 = Class              #443          // java/util/regex/Matcher\n-  #295 = Utf8               isIPv6Address\n-  #296 = Utf8               octetList\n-  #297 = Utf8               Ljava/util/List;\n-  #298 = Utf8               e\n-  #299 = Utf8               Ljava/lang/NumberFormatException;\n-  #300 = Utf8               octetInt\n-  #301 = Utf8               octet\n-  #302 = Utf8               inet6Address\n-  #303 = Utf8               containsCompressedZeroes\n-  #304 = Utf8               octets\n-  #305 = Utf8               validOctets\n-  #306 = Utf8               emptyOctets\n-  #307 = Utf8               Ljava/util/List<Ljava/lang/String;>;\n-  #308 = Class              #444          // java/util/List\n-  #309 = Class              #427          // java/lang/NumberFormatException\n-  #310 = Utf8               isRFC3986HostName\n-  #311 = Utf8               parts\n-  #312 = Utf8               <clinit>\n-  #313 = Utf8               SourceFile\n-  #314 = Utf8               FilenameUtils.java\n-  #315 = NameAndType        #152:#153     // \"<init>\":()V\n-  #316 = NameAndType        #138:#131     // SYSTEM_SEPARATOR:C\n-  #317 = Utf8               org/apache/commons/io/FilenameUtils\n-  #318 = NameAndType        #173:#174     // doNormalize:(Ljava/lang/String;CZ)Ljava/lang/String;\n-  #319 = NameAndType        #230:#231     // requireNonNullChars:(Ljava/lang/String;)V\n-  #320 = NameAndType        #445:#446     // length:()I\n-  #321 = NameAndType        #201:#202     // getPrefixLength:(Ljava/lang/String;)I\n-  #322 = NameAndType        #447:#448     // getChars:(II[CI)V\n-  #323 = NameAndType        #139:#131     // OTHER_SEPARATOR:C\n-  #324 = Class              #449          // java/lang/System\n-  #325 = NameAndType        #450:#451     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #326 = Utf8\n-  #327 = Utf8               java/lang/String\n-  #328 = NameAndType        #152:#452     // \"<init>\":([CII)V\n-  #329 = NameAndType        #165:#166     // normalize:(Ljava/lang/String;)Ljava/lang/String;\n-  #330 = NameAndType        #453:#454     // charAt:(I)C\n-  #331 = NameAndType        #162:#163     // isSeparator:(C)Z\n-  #332 = Utf8               java/lang/StringBuilder\n-  #333 = NameAndType        #455:#456     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #334 = NameAndType        #457:#458     // toString:()Ljava/lang/String;\n-  #335 = NameAndType        #455:#459     // append:(C)Ljava/lang/StringBuilder;\n-  #336 = Class              #460          // java/util/Objects\n-  #337 = NameAndType        #461:#462     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #338 = Class              #441          // org/apache/commons/io/IOCase\n-  #339 = NameAndType        #463:#247     // SYSTEM:Lorg/apache/commons/io/IOCase;\n-  #340 = NameAndType        #464:#191     // checkEquals:(Ljava/lang/String;Ljava/lang/String;)Z\n-  #341 = NameAndType        #465:#191     // checkStartsWith:(Ljava/lang/String;Ljava/lang/String;)Z\n-  #342 = NameAndType        #466:#467     // indexOf:(I)I\n-  #343 = NameAndType        #468:#469     // replace:(CC)Ljava/lang/String;\n-  #344 = NameAndType        #159:#160     // isSystemWindows:()Z\n-  #345 = NameAndType        #198:#166     // separatorsToWindows:(Ljava/lang/String;)Ljava/lang/String;\n-  #346 = NameAndType        #196:#166     // separatorsToUnix:(Ljava/lang/String;)Ljava/lang/String;\n-  #347 = NameAndType        #466:#470     // indexOf:(II)I\n-  #348 = Class              #471          // java/lang/Math\n-  #349 = NameAndType        #472:#470     // min:(II)I\n-  #350 = Class              #473          // java/lang/Character\n-  #351 = NameAndType        #474:#475     // toUpperCase:(C)C\n-  #352 = Class              #476          // org/apache/commons/io/FileSystem\n-  #353 = NameAndType        #477:#478     // getCurrent:()Lorg/apache/commons/io/FileSystem;\n-  #354 = NameAndType        #479:#160     // supportsDriveLetter:()Z\n-  #355 = NameAndType        #480:#481     // substring:(II)Ljava/lang/String;\n-  #356 = NameAndType        #286:#287     // isValidHostName:(Ljava/lang/String;)Z\n-  #357 = NameAndType        #482:#467     // lastIndexOf:(I)I\n-  #358 = NameAndType        #483:#470     // max:(II)I\n-  #359 = NameAndType        #234:#202     // getAdsCriticalOffset:(Ljava/lang/String;)I\n-  #360 = Utf8               java/lang/IllegalArgumentException\n-  #361 = Utf8               NTFS ADS separator (\\':\\') in file name is forbidden.\n-  #362 = NameAndType        #152:#231     // \"<init>\":(Ljava/lang/String;)V\n-  #363 = NameAndType        #209:#202     // indexOfLastSeparator:(Ljava/lang/String;)I\n-  #364 = NameAndType        #219:#220     // doGetPath:(Ljava/lang/String;I)Ljava/lang/String;\n-  #365 = NameAndType        #226:#168     // doGetFullPath:(Ljava/lang/String;Z)Ljava/lang/String;\n-  #366 = NameAndType        #216:#166     // getPrefix:(Ljava/lang/String;)Ljava/lang/String;\n-  #367 = NameAndType        #480:#484     // substring:(I)Ljava/lang/String;\n-  #368 = Utf8               Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\n-  #369 = NameAndType        #229:#166     // getName:(Ljava/lang/String;)Ljava/lang/String;\n-  #370 = NameAndType        #237:#166     // removeExtension:(Ljava/lang/String;)Ljava/lang/String;\n-  #371 = NameAndType        #212:#202     // indexOfExtension:(Ljava/lang/String;)I\n-  #372 = NameAndType        #485:#247     // SENSITIVE:Lorg/apache/commons/io/IOCase;\n-  #373 = NameAndType        #238:#244     // equals:(Ljava/lang/String;Ljava/lang/String;ZLorg/apache/commons/io/IOCase;)Z\n-  #374 = NameAndType        #486:#160     // isEmpty:()Z\n-  #375 = NameAndType        #233:#166     // getExtension:(Ljava/lang/String;)Ljava/lang/String;\n-  #376 = NameAndType        #238:#487     // equals:(Ljava/lang/Object;)Z\n-  #377 = Class              #488          // java/util/Collection\n-  #378 = NameAndType        #489:#490     // iterator:()Ljava/util/Iterator;\n-  #379 = Class              #440          // java/util/Iterator\n-  #380 = NameAndType        #491:#160     // hasNext:()Z\n-  #381 = NameAndType        #492:#493     // next:()Ljava/lang/Object;\n-  #382 = NameAndType        #260:#263     // wildcardMatch:(Ljava/lang/String;Ljava/lang/String;Lorg/apache/commons/io/IOCase;)Z\n-  #383 = NameAndType        #275:#276     // splitOnTokens:(Ljava/lang/String;)[Ljava/lang/String;\n-  #384 = Utf8               java/util/ArrayDeque\n-  #385 = NameAndType        #152:#494     // \"<init>\":(I)V\n-  #386 = Class              #442          // java/util/Deque\n-  #387 = NameAndType        #495:#493     // pop:()Ljava/lang/Object;\n-  #388 = Utf8               ?\n-  #389 = Utf8               *\n-  #390 = NameAndType        #496:#497     // checkIndexOf:(Ljava/lang/String;ILjava/lang/String;)I\n-  #391 = NameAndType        #498:#499     // push:(Ljava/lang/Object;)V\n-  #392 = NameAndType        #500:#501     // checkRegionMatches:(Ljava/lang/String;ILjava/lang/String;)Z\n-  #393 = NameAndType        #502:#503     // toCharArray:()[C\n-  #394 = Utf8               java/util/ArrayList\n-  #395 = NameAndType        #504:#487     // add:(Ljava/lang/Object;)Z\n-  #396 = NameAndType        #505:#494     // setLength:(I)V\n-  #397 = NameAndType        #122:#123     // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-  #398 = NameAndType        #506:#507     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #399 = NameAndType        #295:#287     // isIPv6Address:(Ljava/lang/String;)Z\n-  #400 = NameAndType        #310:#287     // isRFC3986HostName:(Ljava/lang/String;)Z\n-  #401 = NameAndType        #140:#141     // IPV4_PATTERN:Ljava/util/regex/Pattern;\n-  #402 = Class              #508          // java/util/regex/Pattern\n-  #403 = NameAndType        #509:#510     // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-  #404 = Class              #443          // java/util/regex/Matcher\n-  #405 = NameAndType        #511:#160     // matches:()Z\n-  #406 = NameAndType        #512:#446     // groupCount:()I\n-  #407 = NameAndType        #513:#484     // group:(I)Ljava/lang/String;\n-  #408 = Class              #514          // java/lang/Integer\n-  #409 = NameAndType        #515:#202     // parseInt:(Ljava/lang/String;)I\n-  #410 = Utf8               0\n-  #411 = NameAndType        #516:#287     // startsWith:(Ljava/lang/String;)Z\n-  #412 = Utf8               ::\n-  #413 = NameAndType        #517:#518     // contains:(Ljava/lang/CharSequence;)Z\n-  #414 = NameAndType        #466:#202     // indexOf:(Ljava/lang/String;)I\n-  #415 = NameAndType        #482:#202     // lastIndexOf:(Ljava/lang/String;)I\n-  #416 = Utf8               :\n-  #417 = NameAndType        #519:#287     // endsWith:(Ljava/lang/String;)Z\n-  #418 = NameAndType        #520:#276     // split:(Ljava/lang/String;)[Ljava/lang/String;\n-  #419 = Class              #521          // java/util/Arrays\n-  #420 = NameAndType        #522:#523     // asList:([Ljava/lang/Object;)Ljava/util/List;\n-  #421 = NameAndType        #152:#524     // \"<init>\":(Ljava/util/Collection;)V\n-  #422 = Class              #444          // java/util/List\n-  #423 = NameAndType        #525:#526     // remove:(I)Ljava/lang/Object;\n-  #424 = Utf8               .\n-  #425 = NameAndType        #289:#287     // isIPv4Address:(Ljava/lang/String;)Z\n-  #426 = NameAndType        #515:#527     // parseInt:(Ljava/lang/String;I)I\n-  #427 = Utf8               java/lang/NumberFormatException\n-  #428 = Utf8               \\\\.\n-  #429 = NameAndType        #520:#528     // split:(Ljava/lang/String;I)[Ljava/lang/String;\n-  #430 = NameAndType        #151:#141     // REG_NAME_PART_PATTERN:Ljava/util/regex/Pattern;\n-  #431 = NameAndType        #457:#529     // toString:(C)Ljava/lang/String;\n-  #432 = NameAndType        #133:#125     // EXTENSION_SEPARATOR_STR:Ljava/lang/String;\n-  #433 = Class              #530          // java/io/File\n-  #434 = NameAndType        #531:#131     // separatorChar:C\n-  #435 = Utf8               ^(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})$\n-  #436 = NameAndType        #532:#533     // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-  #437 = Utf8               ^[a-zA-Z0-9][a-zA-Z0-9-]*$\n-  #438 = Utf8               java/lang/Object\n-  #439 = Utf8               java/io/IOException\n-  #440 = Utf8               java/util/Iterator\n-  #441 = Utf8               org/apache/commons/io/IOCase\n-  #442 = Utf8               java/util/Deque\n-  #443 = Utf8               java/util/regex/Matcher\n-  #444 = Utf8               java/util/List\n-  #445 = Utf8               length\n-  #446 = Utf8               ()I\n-  #447 = Utf8               getChars\n-  #448 = Utf8               (II[CI)V\n-  #449 = Utf8               java/lang/System\n-  #450 = Utf8               arraycopy\n-  #451 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #452 = Utf8               ([CII)V\n-  #453 = Utf8               charAt\n-  #454 = Utf8               (I)C\n-  #455 = Utf8               append\n-  #456 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #457 = Utf8               toString\n-  #458 = Utf8               ()Ljava/lang/String;\n-  #459 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #460 = Utf8               java/util/Objects\n-  #461 = Utf8               requireNonNull\n-  #462 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #463 = Utf8               SYSTEM\n-  #464 = Utf8               checkEquals\n-  #465 = Utf8               checkStartsWith\n-  #466 = Utf8               indexOf\n-  #467 = Utf8               (I)I\n-  #468 = Utf8               replace\n-  #469 = Utf8               (CC)Ljava/lang/String;\n-  #470 = Utf8               (II)I\n-  #471 = Utf8               java/lang/Math\n-  #472 = Utf8               min\n-  #473 = Utf8               java/lang/Character\n-  #474 = Utf8               toUpperCase\n-  #475 = Utf8               (C)C\n-  #476 = Utf8               org/apache/commons/io/FileSystem\n-  #477 = Utf8               getCurrent\n-  #478 = Utf8               ()Lorg/apache/commons/io/FileSystem;\n-  #479 = Utf8               supportsDriveLetter\n-  #480 = Utf8               substring\n-  #481 = Utf8               (II)Ljava/lang/String;\n-  #482 = Utf8               lastIndexOf\n-  #483 = Utf8               max\n-  #484 = Utf8               (I)Ljava/lang/String;\n-  #485 = Utf8               SENSITIVE\n-  #486 = Utf8               isEmpty\n-  #487 = Utf8               (Ljava/lang/Object;)Z\n-  #488 = Utf8               java/util/Collection\n-  #489 = Utf8               iterator\n-  #490 = Utf8               ()Ljava/util/Iterator;\n-  #491 = Utf8               hasNext\n-  #492 = Utf8               next\n-  #493 = Utf8               ()Ljava/lang/Object;\n-  #494 = Utf8               (I)V\n-  #495 = Utf8               pop\n-  #496 = Utf8               checkIndexOf\n-  #497 = Utf8               (Ljava/lang/String;ILjava/lang/String;)I\n-  #498 = Utf8               push\n-  #499 = Utf8               (Ljava/lang/Object;)V\n-  #500 = Utf8               checkRegionMatches\n-  #501 = Utf8               (Ljava/lang/String;ILjava/lang/String;)Z\n-  #502 = Utf8               toCharArray\n-  #503 = Utf8               ()[C\n-  #504 = Utf8               add\n-  #505 = Utf8               setLength\n-  #506 = Utf8               toArray\n-  #507 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #508 = Utf8               java/util/regex/Pattern\n-  #509 = Utf8               matcher\n-  #510 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-  #511 = Utf8               matches\n-  #512 = Utf8               groupCount\n-  #513 = Utf8               group\n-  #514 = Utf8               java/lang/Integer\n-  #515 = Utf8               parseInt\n-  #516 = Utf8               startsWith\n-  #517 = Utf8               contains\n-  #518 = Utf8               (Ljava/lang/CharSequence;)Z\n-  #519 = Utf8               endsWith\n-  #520 = Utf8               split\n-  #521 = Utf8               java/util/Arrays\n-  #522 = Utf8               asList\n-  #523 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n-  #524 = Utf8               (Ljava/util/Collection;)V\n-  #525 = Utf8               remove\n-  #526 = Utf8               (I)Ljava/lang/Object;\n-  #527 = Utf8               (Ljava/lang/String;I)I\n-  #528 = Utf8               (Ljava/lang/String;I)[Ljava/lang/String;\n-  #529 = Utf8               (C)Ljava/lang/String;\n-  #530 = Utf8               java/io/File\n-  #531 = Utf8               separatorChar\n-  #532 = Utf8               compile\n-  #533 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;\n+  #200 = Utf8               getPrefixLength\n+  #201 = Utf8               (Ljava/lang/String;)I\n+  #202 = Utf8               posUnix\n+  #203 = Utf8               posWin\n+  #204 = Utf8               ch0\n+  #205 = Utf8               ch1\n+  #206 = Utf8               pos\n+  #207 = Utf8               hostnamePart\n+  #208 = Utf8               indexOfLastSeparator\n+  #209 = Utf8               lastUnixPos\n+  #210 = Utf8               lastWindowsPos\n+  #211 = Utf8               indexOfExtension\n+  #212 = Utf8               offset\n+  #213 = Utf8               extensionPos\n+  #214 = Utf8               lastSeparator\n+  #215 = Utf8               getPrefix\n+  #216 = Utf8               getPath\n+  #217 = Utf8               getPathNoEndSeparator\n+  #218 = Utf8               doGetPath\n+  #219 = Utf8               (Ljava/lang/String;I)Ljava/lang/String;\n+  #220 = Utf8               separatorAdd\n+  #221 = Utf8               index\n+  #222 = Utf8               endIndex\n+  #223 = Utf8               getFullPath\n+  #224 = Utf8               getFullPathNoEndSeparator\n+  #225 = Utf8               doGetFullPath\n+  #226 = Utf8               includeSeparator\n+  #227 = Utf8               end\n+  #228 = Utf8               getName\n+  #229 = Utf8               requireNonNullChars\n+  #230 = Utf8               (Ljava/lang/String;)V\n+  #231 = Utf8               getBaseName\n+  #232 = Utf8               getExtension\n+  #233 = Utf8               getAdsCriticalOffset\n+  #234 = Utf8               offset1\n+  #235 = Utf8               offset2\n+  #236 = Utf8               removeExtension\n+  #237 = Utf8               equals\n+  #238 = Utf8               fileName1\n+  #239 = Utf8               fileName2\n+  #240 = Utf8               equalsOnSystem\n+  #241 = Utf8               equalsNormalized\n+  #242 = Utf8               equalsNormalizedOnSystem\n+  #243 = Utf8               (Ljava/lang/String;Ljava/lang/String;ZLorg/apache/commons/io/IOCase;)Z\n+  #244 = Utf8               normalized\n+  #245 = Utf8               caseSensitivity\n+  #246 = Utf8               Lorg/apache/commons/io/IOCase;\n+  #247 = Utf8               isExtension\n+  #248 = Utf8               extension\n+  #249 = Utf8               fileExt\n+  #250 = Utf8               (Ljava/lang/String;[Ljava/lang/String;)Z\n+  #251 = Utf8               extensions\n+  #252 = Utf8               (Ljava/lang/String;Ljava/util/Collection;)Z\n+  #253 = Utf8               Ljava/util/Collection;\n+  #254 = Utf8               LocalVariableTypeTable\n+  #255 = Utf8               Ljava/util/Collection<Ljava/lang/String;>;\n+  #256 = Class              #431          // java/util/Iterator\n+  #257 = Utf8               Signature\n+  #258 = Utf8               (Ljava/lang/String;Ljava/util/Collection<Ljava/lang/String;>;)Z\n+  #259 = Utf8               wildcardMatch\n+  #260 = Utf8               wildcardMatcher\n+  #261 = Utf8               wildcardMatchOnSystem\n+  #262 = Utf8               (Ljava/lang/String;Ljava/lang/String;Lorg/apache/commons/io/IOCase;)Z\n+  #263 = Utf8               [I\n+  #264 = Utf8               repeat\n+  #265 = Utf8               wcs\n+  #266 = Utf8               anyChars\n+  #267 = Utf8               textIdx\n+  #268 = Utf8               wcsIdx\n+  #269 = Utf8               backtrack\n+  #270 = Utf8               Ljava/util/Deque;\n+  #271 = Utf8               Ljava/util/Deque<[I>;\n+  #272 = Class              #432          // org/apache/commons/io/IOCase\n+  #273 = Class              #433          // java/util/Deque\n+  #274 = Utf8               splitOnTokens\n+  #275 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n+  #276 = Utf8               text\n+  #277 = Utf8               list\n+  #278 = Utf8               Ljava/util/ArrayList;\n+  #279 = Utf8               buffer\n+  #280 = Utf8               Ljava/lang/StringBuilder;\n+  #281 = Utf8               prevChar\n+  #282 = Utf8               Ljava/util/ArrayList<Ljava/lang/String;>;\n+  #283 = Utf8               isValidHostName\n+  #284 = Utf8               (Ljava/lang/String;)Z\n+  #285 = Utf8               name\n+  #286 = Utf8               isIPv4Address\n+  #287 = Utf8               ipSegment\n+  #288 = Utf8               iIpSegment\n+  #289 = Utf8               m\n+  #290 = Utf8               Ljava/util/regex/Matcher;\n+  #291 = Class              #434          // java/util/regex/Matcher\n+  #292 = Utf8               isIPv6Address\n+  #293 = Utf8               octetList\n+  #294 = Utf8               Ljava/util/List;\n+  #295 = Utf8               e\n+  #296 = Utf8               Ljava/lang/NumberFormatException;\n+  #297 = Utf8               octetInt\n+  #298 = Utf8               octet\n+  #299 = Utf8               inet6Address\n+  #300 = Utf8               containsCompressedZeroes\n+  #301 = Utf8               octets\n+  #302 = Utf8               validOctets\n+  #303 = Utf8               emptyOctets\n+  #304 = Utf8               Ljava/util/List<Ljava/lang/String;>;\n+  #305 = Class              #435          // java/util/List\n+  #306 = Utf8               isRFC3986HostName\n+  #307 = Utf8               parts\n+  #308 = Utf8               <clinit>\n+  #309 = Utf8               SourceFile\n+  #310 = Utf8               FilenameUtils.java\n+  #311 = NameAndType        #152:#153     // \"<init>\":()V\n+  #312 = NameAndType        #138:#131     // SYSTEM_SEPARATOR:C\n+  #313 = Utf8               org/apache/commons/io/FilenameUtils\n+  #314 = NameAndType        #173:#174     // doNormalize:(Ljava/lang/String;CZ)Ljava/lang/String;\n+  #315 = NameAndType        #229:#230     // requireNonNullChars:(Ljava/lang/String;)V\n+  #316 = NameAndType        #436:#437     // length:()I\n+  #317 = NameAndType        #200:#201     // getPrefixLength:(Ljava/lang/String;)I\n+  #318 = NameAndType        #438:#439     // getChars:(II[CI)V\n+  #319 = NameAndType        #139:#131     // OTHER_SEPARATOR:C\n+  #320 = Class              #440          // java/lang/System\n+  #321 = NameAndType        #441:#442     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #322 = Utf8\n+  #323 = Utf8               java/lang/String\n+  #324 = NameAndType        #152:#443     // \"<init>\":([CII)V\n+  #325 = NameAndType        #165:#166     // normalize:(Ljava/lang/String;)Ljava/lang/String;\n+  #326 = NameAndType        #444:#445     // charAt:(I)C\n+  #327 = NameAndType        #162:#163     // isSeparator:(C)Z\n+  #328 = Utf8               java/lang/StringBuilder\n+  #329 = NameAndType        #446:#447     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #330 = NameAndType        #448:#449     // toString:()Ljava/lang/String;\n+  #331 = NameAndType        #446:#450     // append:(C)Ljava/lang/StringBuilder;\n+  #332 = Class              #451          // java/util/Objects\n+  #333 = NameAndType        #452:#453     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #334 = NameAndType        #454:#246     // SYSTEM:Lorg/apache/commons/io/IOCase;\n+  #335 = NameAndType        #455:#191     // checkEquals:(Ljava/lang/String;Ljava/lang/String;)Z\n+  #336 = NameAndType        #456:#191     // checkStartsWith:(Ljava/lang/String;Ljava/lang/String;)Z\n+  #337 = NameAndType        #457:#458     // indexOf:(I)I\n+  #338 = NameAndType        #459:#460     // replace:(CC)Ljava/lang/String;\n+  #339 = NameAndType        #159:#160     // isSystemWindows:()Z\n+  #340 = NameAndType        #198:#166     // separatorsToWindows:(Ljava/lang/String;)Ljava/lang/String;\n+  #341 = NameAndType        #196:#166     // separatorsToUnix:(Ljava/lang/String;)Ljava/lang/String;\n+  #342 = NameAndType        #457:#461     // indexOf:(II)I\n+  #343 = Class              #462          // java/lang/Math\n+  #344 = NameAndType        #463:#461     // min:(II)I\n+  #345 = Class              #464          // java/lang/Character\n+  #346 = NameAndType        #465:#466     // toUpperCase:(C)C\n+  #347 = Class              #467          // org/apache/commons/io/FileSystem\n+  #348 = NameAndType        #468:#469     // getCurrent:()Lorg/apache/commons/io/FileSystem;\n+  #349 = NameAndType        #470:#160     // supportsDriveLetter:()Z\n+  #350 = NameAndType        #471:#472     // substring:(II)Ljava/lang/String;\n+  #351 = NameAndType        #283:#284     // isValidHostName:(Ljava/lang/String;)Z\n+  #352 = NameAndType        #473:#458     // lastIndexOf:(I)I\n+  #353 = NameAndType        #474:#461     // max:(II)I\n+  #354 = NameAndType        #233:#201     // getAdsCriticalOffset:(Ljava/lang/String;)I\n+  #355 = Utf8               java/lang/IllegalArgumentException\n+  #356 = Utf8               NTFS ADS separator (\\':\\') in file name is forbidden.\n+  #357 = NameAndType        #152:#230     // \"<init>\":(Ljava/lang/String;)V\n+  #358 = NameAndType        #208:#201     // indexOfLastSeparator:(Ljava/lang/String;)I\n+  #359 = NameAndType        #218:#219     // doGetPath:(Ljava/lang/String;I)Ljava/lang/String;\n+  #360 = NameAndType        #225:#168     // doGetFullPath:(Ljava/lang/String;Z)Ljava/lang/String;\n+  #361 = NameAndType        #215:#166     // getPrefix:(Ljava/lang/String;)Ljava/lang/String;\n+  #362 = NameAndType        #471:#475     // substring:(I)Ljava/lang/String;\n+  #363 = Utf8               Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\n+  #364 = NameAndType        #228:#166     // getName:(Ljava/lang/String;)Ljava/lang/String;\n+  #365 = NameAndType        #236:#166     // removeExtension:(Ljava/lang/String;)Ljava/lang/String;\n+  #366 = NameAndType        #211:#201     // indexOfExtension:(Ljava/lang/String;)I\n+  #367 = NameAndType        #476:#246     // SENSITIVE:Lorg/apache/commons/io/IOCase;\n+  #368 = NameAndType        #237:#243     // equals:(Ljava/lang/String;Ljava/lang/String;ZLorg/apache/commons/io/IOCase;)Z\n+  #369 = NameAndType        #477:#160     // isEmpty:()Z\n+  #370 = NameAndType        #232:#166     // getExtension:(Ljava/lang/String;)Ljava/lang/String;\n+  #371 = NameAndType        #237:#478     // equals:(Ljava/lang/Object;)Z\n+  #372 = Class              #479          // java/util/Collection\n+  #373 = NameAndType        #480:#481     // iterator:()Ljava/util/Iterator;\n+  #374 = NameAndType        #482:#160     // hasNext:()Z\n+  #375 = NameAndType        #483:#484     // next:()Ljava/lang/Object;\n+  #376 = NameAndType        #259:#262     // wildcardMatch:(Ljava/lang/String;Ljava/lang/String;Lorg/apache/commons/io/IOCase;)Z\n+  #377 = NameAndType        #274:#275     // splitOnTokens:(Ljava/lang/String;)[Ljava/lang/String;\n+  #378 = Utf8               java/util/ArrayDeque\n+  #379 = NameAndType        #152:#485     // \"<init>\":(I)V\n+  #380 = NameAndType        #486:#484     // pop:()Ljava/lang/Object;\n+  #381 = Utf8               ?\n+  #382 = Utf8               *\n+  #383 = NameAndType        #487:#488     // checkIndexOf:(Ljava/lang/String;ILjava/lang/String;)I\n+  #384 = NameAndType        #489:#490     // push:(Ljava/lang/Object;)V\n+  #385 = NameAndType        #491:#492     // checkRegionMatches:(Ljava/lang/String;ILjava/lang/String;)Z\n+  #386 = NameAndType        #493:#494     // toCharArray:()[C\n+  #387 = Utf8               java/util/ArrayList\n+  #388 = NameAndType        #495:#478     // add:(Ljava/lang/Object;)Z\n+  #389 = NameAndType        #496:#485     // setLength:(I)V\n+  #390 = NameAndType        #122:#123     // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+  #391 = NameAndType        #497:#498     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #392 = NameAndType        #292:#284     // isIPv6Address:(Ljava/lang/String;)Z\n+  #393 = NameAndType        #306:#284     // isRFC3986HostName:(Ljava/lang/String;)Z\n+  #394 = NameAndType        #140:#141     // IPV4_PATTERN:Ljava/util/regex/Pattern;\n+  #395 = Class              #499          // java/util/regex/Pattern\n+  #396 = NameAndType        #500:#501     // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #397 = NameAndType        #502:#160     // matches:()Z\n+  #398 = NameAndType        #503:#437     // groupCount:()I\n+  #399 = NameAndType        #504:#475     // group:(I)Ljava/lang/String;\n+  #400 = Class              #505          // java/lang/Integer\n+  #401 = NameAndType        #506:#201     // parseInt:(Ljava/lang/String;)I\n+  #402 = Utf8               0\n+  #403 = NameAndType        #507:#284     // startsWith:(Ljava/lang/String;)Z\n+  #404 = Utf8               ::\n+  #405 = NameAndType        #508:#509     // contains:(Ljava/lang/CharSequence;)Z\n+  #406 = NameAndType        #457:#201     // indexOf:(Ljava/lang/String;)I\n+  #407 = NameAndType        #473:#201     // lastIndexOf:(Ljava/lang/String;)I\n+  #408 = Utf8               :\n+  #409 = NameAndType        #510:#284     // endsWith:(Ljava/lang/String;)Z\n+  #410 = NameAndType        #511:#275     // split:(Ljava/lang/String;)[Ljava/lang/String;\n+  #411 = Class              #512          // java/util/Arrays\n+  #412 = NameAndType        #513:#514     // asList:([Ljava/lang/Object;)Ljava/util/List;\n+  #413 = NameAndType        #152:#515     // \"<init>\":(Ljava/util/Collection;)V\n+  #414 = NameAndType        #516:#517     // remove:(I)Ljava/lang/Object;\n+  #415 = Utf8               .\n+  #416 = NameAndType        #286:#284     // isIPv4Address:(Ljava/lang/String;)Z\n+  #417 = NameAndType        #506:#518     // parseInt:(Ljava/lang/String;I)I\n+  #418 = Utf8               java/lang/NumberFormatException\n+  #419 = Utf8               \\\\.\n+  #420 = NameAndType        #511:#519     // split:(Ljava/lang/String;I)[Ljava/lang/String;\n+  #421 = NameAndType        #151:#141     // REG_NAME_PART_PATTERN:Ljava/util/regex/Pattern;\n+  #422 = NameAndType        #448:#520     // toString:(C)Ljava/lang/String;\n+  #423 = NameAndType        #133:#125     // EXTENSION_SEPARATOR_STR:Ljava/lang/String;\n+  #424 = Class              #521          // java/io/File\n+  #425 = NameAndType        #522:#131     // separatorChar:C\n+  #426 = Utf8               ^(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})$\n+  #427 = NameAndType        #523:#524     // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+  #428 = Utf8               ^[a-zA-Z0-9][a-zA-Z0-9-]*$\n+  #429 = Utf8               java/lang/Object\n+  #430 = Utf8               java/io/IOException\n+  #431 = Utf8               java/util/Iterator\n+  #432 = Utf8               org/apache/commons/io/IOCase\n+  #433 = Utf8               java/util/Deque\n+  #434 = Utf8               java/util/regex/Matcher\n+  #435 = Utf8               java/util/List\n+  #436 = Utf8               length\n+  #437 = Utf8               ()I\n+  #438 = Utf8               getChars\n+  #439 = Utf8               (II[CI)V\n+  #440 = Utf8               java/lang/System\n+  #441 = Utf8               arraycopy\n+  #442 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #443 = Utf8               ([CII)V\n+  #444 = Utf8               charAt\n+  #445 = Utf8               (I)C\n+  #446 = Utf8               append\n+  #447 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #448 = Utf8               toString\n+  #449 = Utf8               ()Ljava/lang/String;\n+  #450 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #451 = Utf8               java/util/Objects\n+  #452 = Utf8               requireNonNull\n+  #453 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #454 = Utf8               SYSTEM\n+  #455 = Utf8               checkEquals\n+  #456 = Utf8               checkStartsWith\n+  #457 = Utf8               indexOf\n+  #458 = Utf8               (I)I\n+  #459 = Utf8               replace\n+  #460 = Utf8               (CC)Ljava/lang/String;\n+  #461 = Utf8               (II)I\n+  #462 = Utf8               java/lang/Math\n+  #463 = Utf8               min\n+  #464 = Utf8               java/lang/Character\n+  #465 = Utf8               toUpperCase\n+  #466 = Utf8               (C)C\n+  #467 = Utf8               org/apache/commons/io/FileSystem\n+  #468 = Utf8               getCurrent\n+  #469 = Utf8               ()Lorg/apache/commons/io/FileSystem;\n+  #470 = Utf8               supportsDriveLetter\n+  #471 = Utf8               substring\n+  #472 = Utf8               (II)Ljava/lang/String;\n+  #473 = Utf8               lastIndexOf\n+  #474 = Utf8               max\n+  #475 = Utf8               (I)Ljava/lang/String;\n+  #476 = Utf8               SENSITIVE\n+  #477 = Utf8               isEmpty\n+  #478 = Utf8               (Ljava/lang/Object;)Z\n+  #479 = Utf8               java/util/Collection\n+  #480 = Utf8               iterator\n+  #481 = Utf8               ()Ljava/util/Iterator;\n+  #482 = Utf8               hasNext\n+  #483 = Utf8               next\n+  #484 = Utf8               ()Ljava/lang/Object;\n+  #485 = Utf8               (I)V\n+  #486 = Utf8               pop\n+  #487 = Utf8               checkIndexOf\n+  #488 = Utf8               (Ljava/lang/String;ILjava/lang/String;)I\n+  #489 = Utf8               push\n+  #490 = Utf8               (Ljava/lang/Object;)V\n+  #491 = Utf8               checkRegionMatches\n+  #492 = Utf8               (Ljava/lang/String;ILjava/lang/String;)Z\n+  #493 = Utf8               toCharArray\n+  #494 = Utf8               ()[C\n+  #495 = Utf8               add\n+  #496 = Utf8               setLength\n+  #497 = Utf8               toArray\n+  #498 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #499 = Utf8               java/util/regex/Pattern\n+  #500 = Utf8               matcher\n+  #501 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #502 = Utf8               matches\n+  #503 = Utf8               groupCount\n+  #504 = Utf8               group\n+  #505 = Utf8               java/lang/Integer\n+  #506 = Utf8               parseInt\n+  #507 = Utf8               startsWith\n+  #508 = Utf8               contains\n+  #509 = Utf8               (Ljava/lang/CharSequence;)Z\n+  #510 = Utf8               endsWith\n+  #511 = Utf8               split\n+  #512 = Utf8               java/util/Arrays\n+  #513 = Utf8               asList\n+  #514 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n+  #515 = Utf8               (Ljava/util/Collection;)V\n+  #516 = Utf8               remove\n+  #517 = Utf8               (I)Ljava/lang/Object;\n+  #518 = Utf8               (Ljava/lang/String;I)I\n+  #519 = Utf8               (Ljava/lang/String;I)[Ljava/lang/String;\n+  #520 = Utf8               (C)Ljava/lang/String;\n+  #521 = Utf8               java/io/File\n+  #522 = Utf8               separatorChar\n+  #523 = Utf8               compile\n+  #524 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;\n {\n   private static final java.lang.String[] EMPTY_STRING_ARRAY;\n     descriptor: [Ljava/lang/String;\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   private static final java.lang.String EMPTY_STRING = \"\";\n     descriptor: Ljava/lang/String;\n@@ -2715,15 +2706,15 @@\n         frame_type = 0 /* same */\n         frame_type = 253 /* append */\n           offset_delta = 11\n           locals = [ class java/lang/String, class java/util/Iterator ]\n         frame_type = 30 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 2\n-    Signature: #259                         // (Ljava/lang/String;Ljava/util/Collection<Ljava/lang/String;>;)Z\n+    Signature: #258                         // (Ljava/lang/String;Ljava/util/Collection<Ljava/lang/String;>;)Z\n \n   public static boolean wildcardMatch(java.lang.String, java.lang.String);\n     descriptor: (Ljava/lang/String;Ljava/lang/String;)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n"}]}
