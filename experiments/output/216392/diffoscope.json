{"diffoscope-json-version": 1, "source1": "first/StackMapEntry.class", "source2": "second/StackMapEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,128 +11,131 @@\n     private static final StackMapType[] EMPTY_STACK_MAP_TYPE_ARRAY;\n     private int frameType;\n     private int byteCodeOffset;\n     private StackMapType[] typesOfLocals;\n     private StackMapType[] typesOfStackItems;\n     private ConstantPool constantPool;\n     \n-    StackMapEntry(final DataInput input, final ConstantPool constantPool) throws IOException {\n-        this(input.readByte() & 0xFF, -1, null, null, constantPool);\n+    StackMapEntry(final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(dataInput.readByte() & 0xFF, -1, null, null, constantPool);\n         if (this.frameType >= 0 && this.frameType <= 63) {\n             this.byteCodeOffset = this.frameType - 0;\n         }\n         else if (this.frameType >= 64 && this.frameType <= 127) {\n             this.byteCodeOffset = this.frameType - 64;\n-            (this.typesOfStackItems = new StackMapType[1])[0] = new StackMapType(input, constantPool);\n+            (this.typesOfStackItems = new StackMapType[1])[0] = new StackMapType(dataInput, constantPool);\n         }\n         else if (this.frameType == 247) {\n-            this.byteCodeOffset = input.readShort();\n-            (this.typesOfStackItems = new StackMapType[1])[0] = new StackMapType(input, constantPool);\n+            this.byteCodeOffset = dataInput.readShort();\n+            (this.typesOfStackItems = new StackMapType[1])[0] = new StackMapType(dataInput, constantPool);\n         }\n         else if (this.frameType >= 248 && this.frameType <= 250) {\n-            this.byteCodeOffset = input.readShort();\n+            this.byteCodeOffset = dataInput.readShort();\n         }\n         else if (this.frameType == 251) {\n-            this.byteCodeOffset = input.readShort();\n+            this.byteCodeOffset = dataInput.readShort();\n         }\n         else if (this.frameType >= 252 && this.frameType <= 254) {\n-            this.byteCodeOffset = input.readShort();\n-            final int numberOfLocals = this.frameType - 251;\n-            this.typesOfLocals = new StackMapType[numberOfLocals];\n-            for (int i = 0; i < numberOfLocals; ++i) {\n-                this.typesOfLocals[i] = new StackMapType(input, constantPool);\n+            this.byteCodeOffset = dataInput.readShort();\n+            final int n = this.frameType - 251;\n+            this.typesOfLocals = new StackMapType[n];\n+            for (int i = 0; i < n; ++i) {\n+                this.typesOfLocals[i] = new StackMapType(dataInput, constantPool);\n             }\n         }\n         else {\n             if (this.frameType != 255) {\n                 throw new ClassFormatException(\"Invalid frame type found while parsing stack map table: \" + this.frameType);\n             }\n-            this.byteCodeOffset = input.readShort();\n-            final int numberOfLocals = input.readShort();\n-            this.typesOfLocals = new StackMapType[numberOfLocals];\n-            for (int i = 0; i < numberOfLocals; ++i) {\n-                this.typesOfLocals[i] = new StackMapType(input, constantPool);\n-            }\n-            final int numberOfStackItems = input.readShort();\n-            this.typesOfStackItems = new StackMapType[numberOfStackItems];\n-            for (int j = 0; j < numberOfStackItems; ++j) {\n-                this.typesOfStackItems[j] = new StackMapType(input, constantPool);\n+            this.byteCodeOffset = dataInput.readShort();\n+            final short short1 = dataInput.readShort();\n+            this.typesOfLocals = new StackMapType[short1];\n+            for (short n2 = 0; n2 < short1; ++n2) {\n+                this.typesOfLocals[n2] = new StackMapType(dataInput, constantPool);\n+            }\n+            final short short2 = dataInput.readShort();\n+            this.typesOfStackItems = new StackMapType[short2];\n+            for (short n3 = 0; n3 < short2; ++n3) {\n+                this.typesOfStackItems[n3] = new StackMapType(dataInput, constantPool);\n             }\n         }\n     }\n     \n     @Deprecated\n-    public StackMapEntry(final int byteCodeOffset, final int numberOfLocals, final StackMapType[] typesOfLocals, final int numberOfStackItems, final StackMapType[] typesOfStackItems, final ConstantPool constantPool) {\n+    public StackMapEntry(final int byteCodeOffset, final int n, final StackMapType[] array, final int n2, final StackMapType[] array2, final ConstantPool constantPool) {\n         this.byteCodeOffset = byteCodeOffset;\n-        this.typesOfLocals = ((typesOfLocals != null) ? typesOfLocals : StackMapEntry.EMPTY_STACK_MAP_TYPE_ARRAY);\n-        this.typesOfStackItems = ((typesOfStackItems != null) ? typesOfStackItems : StackMapEntry.EMPTY_STACK_MAP_TYPE_ARRAY);\n+        this.typesOfLocals = ((array != null) ? array : StackMapEntry.EMPTY_STACK_MAP_TYPE_ARRAY);\n+        this.typesOfStackItems = ((array2 != null) ? array2 : StackMapEntry.EMPTY_STACK_MAP_TYPE_ARRAY);\n         this.constantPool = constantPool;\n-        if (numberOfLocals < 0) {\n+        if (n < 0) {\n             throw new IllegalArgumentException(\"numberOfLocals < 0\");\n         }\n-        if (numberOfStackItems < 0) {\n+        if (n2 < 0) {\n             throw new IllegalArgumentException(\"numberOfStackItems < 0\");\n         }\n     }\n     \n-    public StackMapEntry(final int tag, final int byteCodeOffset, final StackMapType[] typesOfLocals, final StackMapType[] typesOfStackItems, final ConstantPool constantPool) {\n-        this.frameType = tag;\n+    public StackMapEntry(final int frameType, final int byteCodeOffset, final StackMapType[] array, final StackMapType[] array2, final ConstantPool constantPool) {\n+        this.frameType = frameType;\n         this.byteCodeOffset = byteCodeOffset;\n-        this.typesOfLocals = ((typesOfLocals != null) ? typesOfLocals : StackMapEntry.EMPTY_STACK_MAP_TYPE_ARRAY);\n-        this.typesOfStackItems = ((typesOfStackItems != null) ? typesOfStackItems : StackMapEntry.EMPTY_STACK_MAP_TYPE_ARRAY);\n+        this.typesOfLocals = ((array != null) ? array : StackMapEntry.EMPTY_STACK_MAP_TYPE_ARRAY);\n+        this.typesOfStackItems = ((array2 != null) ? array2 : StackMapEntry.EMPTY_STACK_MAP_TYPE_ARRAY);\n         this.constantPool = constantPool;\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitStackMapEntry(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitStackMapEntry(this);\n     }\n     \n     public StackMapEntry copy() {\n-        StackMapEntry e;\n+        StackMapEntry stackMapEntry;\n         try {\n-            e = (StackMapEntry)this.clone();\n+            stackMapEntry = (StackMapEntry)this.clone();\n         }\n         catch (final CloneNotSupportedException ex) {\n             throw new Error(\"Clone Not Supported\");\n         }\n-        Arrays.setAll(e.typesOfLocals = new StackMapType[this.typesOfLocals.length], i -> this.typesOfLocals[i].copy());\n-        Arrays.setAll(e.typesOfStackItems = new StackMapType[this.typesOfStackItems.length], i -> this.typesOfStackItems[i].copy());\n-        return e;\n+        Arrays.setAll(stackMapEntry.typesOfLocals = new StackMapType[this.typesOfLocals.length], n2 -> this.typesOfLocals[n2].copy());\n+        Arrays.setAll(stackMapEntry.typesOfStackItems = new StackMapType[this.typesOfStackItems.length], n4 -> this.typesOfStackItems[n4].copy());\n+        return stackMapEntry;\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        file.write(this.frameType);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.write(this.frameType);\n         if (this.frameType >= 64 && this.frameType <= 127) {\n-            this.typesOfStackItems[0].dump(file);\n+            this.typesOfStackItems[0].dump(dataOutputStream);\n         }\n         else if (this.frameType == 247) {\n-            file.writeShort(this.byteCodeOffset);\n-            this.typesOfStackItems[0].dump(file);\n+            dataOutputStream.writeShort(this.byteCodeOffset);\n+            this.typesOfStackItems[0].dump(dataOutputStream);\n         }\n         else if (this.frameType >= 248 && this.frameType <= 250) {\n-            file.writeShort(this.byteCodeOffset);\n+            dataOutputStream.writeShort(this.byteCodeOffset);\n         }\n         else if (this.frameType == 251) {\n-            file.writeShort(this.byteCodeOffset);\n+            dataOutputStream.writeShort(this.byteCodeOffset);\n         }\n         else if (this.frameType >= 252 && this.frameType <= 254) {\n-            file.writeShort(this.byteCodeOffset);\n-            for (final StackMapType type : this.typesOfLocals) {\n-                type.dump(file);\n+            dataOutputStream.writeShort(this.byteCodeOffset);\n+            final StackMapType[] typesOfLocals = this.typesOfLocals;\n+            for (int length = typesOfLocals.length, i = 0; i < length; ++i) {\n+                typesOfLocals[i].dump(dataOutputStream);\n             }\n         }\n         else if (this.frameType == 255) {\n-            file.writeShort(this.byteCodeOffset);\n-            file.writeShort(this.typesOfLocals.length);\n-            for (final StackMapType type : this.typesOfLocals) {\n-                type.dump(file);\n-            }\n-            file.writeShort(this.typesOfStackItems.length);\n-            for (final StackMapType type : this.typesOfStackItems) {\n-                type.dump(file);\n+            dataOutputStream.writeShort(this.byteCodeOffset);\n+            dataOutputStream.writeShort(this.typesOfLocals.length);\n+            final StackMapType[] typesOfLocals2 = this.typesOfLocals;\n+            for (int length2 = typesOfLocals2.length, j = 0; j < length2; ++j) {\n+                typesOfLocals2[j].dump(dataOutputStream);\n+            }\n+            dataOutputStream.writeShort(this.typesOfStackItems.length);\n+            final StackMapType[] typesOfStackItems = this.typesOfStackItems;\n+            for (int length3 = typesOfStackItems.length, k = 0; k < length3; ++k) {\n+                typesOfStackItems[k].dump(dataOutputStream);\n             }\n         }\n         else if (this.frameType < 0 || this.frameType > 63) {\n             throw new ClassFormatException(\"Invalid Stack map table tag: \" + this.frameType);\n         }\n     }\n     \n@@ -158,31 +161,34 @@\n         if (this.frameType == 247) {\n             return 3 + (this.typesOfStackItems[0].hasIndex() ? 3 : 1);\n         }\n         if ((this.frameType >= 248 && this.frameType <= 250) || this.frameType == 251) {\n             return 3;\n         }\n         if (this.frameType >= 252 && this.frameType <= 254) {\n-            int len = 3;\n-            for (final StackMapType typesOfLocal : this.typesOfLocals) {\n-                len += (typesOfLocal.hasIndex() ? 3 : 1);\n+            int n = 3;\n+            final StackMapType[] typesOfLocals = this.typesOfLocals;\n+            for (int length = typesOfLocals.length, i = 0; i < length; ++i) {\n+                n += (typesOfLocals[i].hasIndex() ? 3 : 1);\n             }\n-            return len;\n+            return n;\n         }\n         if (this.frameType != 255) {\n             throw new IllegalStateException(\"Invalid StackMap frameType: \" + this.frameType);\n         }\n-        int len = 7;\n-        for (final StackMapType typesOfLocal : this.typesOfLocals) {\n-            len += (typesOfLocal.hasIndex() ? 3 : 1);\n+        int n2 = 7;\n+        final StackMapType[] typesOfLocals2 = this.typesOfLocals;\n+        for (int length2 = typesOfLocals2.length, j = 0; j < length2; ++j) {\n+            n2 += (typesOfLocals2[j].hasIndex() ? 3 : 1);\n+        }\n+        final StackMapType[] typesOfStackItems = this.typesOfStackItems;\n+        for (int length3 = typesOfStackItems.length, k = 0; k < length3; ++k) {\n+            n2 += (typesOfStackItems[k].hasIndex() ? 3 : 1);\n         }\n-        for (final StackMapType typesOfStackItem : this.typesOfStackItems) {\n-            len += (typesOfStackItem.hasIndex() ? 3 : 1);\n-        }\n-        return len;\n+        return n2;\n     }\n     \n     public int getNumberOfLocals() {\n         return this.typesOfLocals.length;\n     }\n     \n     public int getNumberOfStackItems() {\n@@ -193,131 +199,131 @@\n         return this.typesOfLocals;\n     }\n     \n     public StackMapType[] getTypesOfStackItems() {\n         return this.typesOfStackItems;\n     }\n     \n-    private boolean invalidFrameType(final int f) {\n-        return f != 247 && (f < 248 || f > 250) && f != 251 && (f < 252 || f > 254) && f != 255;\n+    private boolean invalidFrameType(final int n) {\n+        return n != 247 && (n < 248 || n > 250) && n != 251 && (n < 252 || n > 254) && n != 255;\n     }\n     \n-    public void setByteCodeOffset(final int newOffset) {\n-        if (newOffset < 0 || newOffset > 32767) {\n-            throw new IllegalArgumentException(\"Invalid StackMap offset: \" + newOffset);\n+    public void setByteCodeOffset(final int byteCodeOffset) {\n+        if (byteCodeOffset < 0 || byteCodeOffset > 32767) {\n+            throw new IllegalArgumentException(\"Invalid StackMap offset: \" + byteCodeOffset);\n         }\n         if (this.frameType >= 0 && this.frameType <= 63) {\n-            if (newOffset > 63) {\n+            if (byteCodeOffset > 63) {\n                 this.frameType = 251;\n             }\n             else {\n-                this.frameType = newOffset;\n+                this.frameType = byteCodeOffset;\n             }\n         }\n         else if (this.frameType >= 64 && this.frameType <= 127) {\n-            if (newOffset > 63) {\n+            if (byteCodeOffset > 63) {\n                 this.frameType = 247;\n             }\n             else {\n-                this.frameType = 64 + newOffset;\n+                this.frameType = 64 + byteCodeOffset;\n             }\n         }\n         else if (this.invalidFrameType(this.frameType)) {\n             throw new IllegalStateException(\"Invalid StackMap frameType: \" + this.frameType);\n         }\n-        this.byteCodeOffset = newOffset;\n+        this.byteCodeOffset = byteCodeOffset;\n     }\n     \n     public void setConstantPool(final ConstantPool constantPool) {\n         this.constantPool = constantPool;\n     }\n     \n-    public void setFrameType(final int ft) {\n-        if (ft >= 0 && ft <= 63) {\n-            this.byteCodeOffset = ft - 0;\n+    public void setFrameType(final int frameType) {\n+        if (frameType >= 0 && frameType <= 63) {\n+            this.byteCodeOffset = frameType - 0;\n         }\n-        else if (ft >= 64 && ft <= 127) {\n-            this.byteCodeOffset = ft - 64;\n+        else if (frameType >= 64 && frameType <= 127) {\n+            this.byteCodeOffset = frameType - 64;\n         }\n-        else if (this.invalidFrameType(ft)) {\n+        else if (this.invalidFrameType(frameType)) {\n             throw new IllegalArgumentException(\"Invalid StackMap frameType\");\n         }\n-        this.frameType = ft;\n+        this.frameType = frameType;\n     }\n     \n     @Deprecated\n     public void setNumberOfLocals(final int n) {\n     }\n     \n     @Deprecated\n     public void setNumberOfStackItems(final int n) {\n     }\n     \n-    public void setTypesOfLocals(final StackMapType[] types) {\n-        this.typesOfLocals = ((types != null) ? types : StackMapEntry.EMPTY_STACK_MAP_TYPE_ARRAY);\n+    public void setTypesOfLocals(final StackMapType[] array) {\n+        this.typesOfLocals = ((array != null) ? array : StackMapEntry.EMPTY_STACK_MAP_TYPE_ARRAY);\n     }\n     \n-    public void setTypesOfStackItems(final StackMapType[] types) {\n-        this.typesOfStackItems = ((types != null) ? types : StackMapEntry.EMPTY_STACK_MAP_TYPE_ARRAY);\n+    public void setTypesOfStackItems(final StackMapType[] array) {\n+        this.typesOfStackItems = ((array != null) ? array : StackMapEntry.EMPTY_STACK_MAP_TYPE_ARRAY);\n     }\n     \n     @Override\n     public String toString() {\n-        final StringBuilder buf = new StringBuilder(64);\n-        buf.append(\"(\");\n+        final StringBuilder sb = new StringBuilder(64);\n+        sb.append(\"(\");\n         if (this.frameType >= 0 && this.frameType <= 63) {\n-            buf.append(\"SAME\");\n+            sb.append(\"SAME\");\n         }\n         else if (this.frameType >= 64 && this.frameType <= 127) {\n-            buf.append(\"SAME_LOCALS_1_STACK\");\n+            sb.append(\"SAME_LOCALS_1_STACK\");\n         }\n         else if (this.frameType == 247) {\n-            buf.append(\"SAME_LOCALS_1_STACK_EXTENDED\");\n+            sb.append(\"SAME_LOCALS_1_STACK_EXTENDED\");\n         }\n         else if (this.frameType >= 248 && this.frameType <= 250) {\n-            buf.append(\"CHOP \").append(String.valueOf(251 - this.frameType));\n+            sb.append(\"CHOP \").append(String.valueOf(251 - this.frameType));\n         }\n         else if (this.frameType == 251) {\n-            buf.append(\"SAME_EXTENDED\");\n+            sb.append(\"SAME_EXTENDED\");\n         }\n         else if (this.frameType >= 252 && this.frameType <= 254) {\n-            buf.append(\"APPEND \").append(String.valueOf(this.frameType - 251));\n+            sb.append(\"APPEND \").append(String.valueOf(this.frameType - 251));\n         }\n         else if (this.frameType == 255) {\n-            buf.append(\"FULL\");\n+            sb.append(\"FULL\");\n         }\n         else {\n-            buf.append(\"UNKNOWN (\").append(this.frameType).append(\")\");\n+            sb.append(\"UNKNOWN (\").append(this.frameType).append(\")\");\n         }\n-        buf.append(\", offset delta=\").append(this.byteCodeOffset);\n+        sb.append(\", offset delta=\").append(this.byteCodeOffset);\n         if (this.typesOfLocals.length > 0) {\n-            buf.append(\", locals={\");\n+            sb.append(\", locals={\");\n             for (int i = 0; i < this.typesOfLocals.length; ++i) {\n-                buf.append(this.typesOfLocals[i]);\n+                sb.append(this.typesOfLocals[i]);\n                 if (i < this.typesOfLocals.length - 1) {\n-                    buf.append(\", \");\n+                    sb.append(\", \");\n                 }\n             }\n-            buf.append(\"}\");\n+            sb.append(\"}\");\n         }\n         if (this.typesOfStackItems.length > 0) {\n-            buf.append(\", stack items={\");\n-            for (int i = 0; i < this.typesOfStackItems.length; ++i) {\n-                buf.append(this.typesOfStackItems[i]);\n-                if (i < this.typesOfStackItems.length - 1) {\n-                    buf.append(\", \");\n+            sb.append(\", stack items={\");\n+            for (int j = 0; j < this.typesOfStackItems.length; ++j) {\n+                sb.append(this.typesOfStackItems[j]);\n+                if (j < this.typesOfStackItems.length - 1) {\n+                    sb.append(\", \");\n                 }\n             }\n-            buf.append(\"}\");\n+            sb.append(\"}\");\n         }\n-        buf.append(\")\");\n-        return buf.toString();\n+        sb.append(\")\");\n+        return sb.toString();\n     }\n     \n-    public void updateByteCodeOffset(final int delta) {\n-        this.setByteCodeOffset(this.byteCodeOffset + delta);\n+    public void updateByteCodeOffset(final int n) {\n+        this.setByteCodeOffset(this.byteCodeOffset + n);\n     }\n     \n     static {\n         EMPTY_STACK_MAP_TYPE_ARRAY = new StackMapType[0];\n     }\n }\n"}]}
