{"diffoscope-json-version": 1, "source1": "first/UnionCombiner.class", "source2": "second/UnionCombiner.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,42 +1,42 @@\n \n package org.apache.commons.configuration2.tree;\n \n import java.util.Iterator;\n-import java.util.List;\n import java.util.Collection;\n import java.util.LinkedList;\n \n public class UnionCombiner extends NodeCombiner\n {\n-    public ImmutableNode combine(final ImmutableNode node1, final ImmutableNode node2) {\n-        final ImmutableNode.Builder result = new ImmutableNode.Builder();\n-        result.name(node1.getNodeName());\n-        result.addAttributes(node2.getAttributes());\n-        result.addAttributes(node1.getAttributes());\n-        final List<ImmutableNode> children2 = new LinkedList<ImmutableNode>(node2.getChildren());\n-        for (final ImmutableNode child1 : node1) {\n-            final ImmutableNode child2 = this.findCombineNode(node1, node2, child1);\n-            if (child2 != null) {\n-                result.addChild(this.combine(child1, child2));\n-                children2.remove(child2);\n+    public ImmutableNode combine(final ImmutableNode immutableNode, final ImmutableNode immutableNode2) {\n+        final ImmutableNode.Builder builder = new ImmutableNode.Builder();\n+        builder.name(immutableNode.getNodeName());\n+        builder.addAttributes(immutableNode2.getAttributes());\n+        builder.addAttributes(immutableNode.getAttributes());\n+        final LinkedList list = new LinkedList(immutableNode2.getChildren());\n+        for (final ImmutableNode immutableNode3 : immutableNode) {\n+            final ImmutableNode combineNode = this.findCombineNode(immutableNode, immutableNode2, immutableNode3);\n+            if (combineNode != null) {\n+                builder.addChild(this.combine(immutableNode3, combineNode));\n+                list.remove(combineNode);\n             }\n             else {\n-                result.addChild(child1);\n+                builder.addChild(immutableNode3);\n             }\n         }\n-        for (final ImmutableNode c : children2) {\n-            result.addChild(c);\n+        final Iterator iterator2 = list.iterator();\n+        while (iterator2.hasNext()) {\n+            builder.addChild((ImmutableNode)iterator2.next());\n         }\n-        return result.create();\n+        return builder.create();\n     }\n     \n-    protected ImmutableNode findCombineNode(final ImmutableNode node1, final ImmutableNode node2, final ImmutableNode child) {\n-        if (child.getValue() == null && !this.isListNode(child) && UnionCombiner.HANDLER.getChildrenCount((Object)node1, child.getNodeName()) == 1 && UnionCombiner.HANDLER.getChildrenCount((Object)node2, child.getNodeName()) == 1) {\n-            final ImmutableNode child2 = (ImmutableNode)UnionCombiner.HANDLER.getChildren((Object)node2, child.getNodeName()).get(0);\n-            if (child2.getValue() == null) {\n-                return child2;\n+    protected ImmutableNode findCombineNode(final ImmutableNode immutableNode, final ImmutableNode immutableNode2, final ImmutableNode immutableNode3) {\n+        if (immutableNode3.getValue() == null && !this.isListNode(immutableNode3) && UnionCombiner.HANDLER.getChildrenCount((Object)immutableNode, immutableNode3.getNodeName()) == 1 && UnionCombiner.HANDLER.getChildrenCount((Object)immutableNode2, immutableNode3.getNodeName()) == 1) {\n+            final ImmutableNode immutableNode4 = (ImmutableNode)UnionCombiner.HANDLER.getChildren((Object)immutableNode2, immutableNode3.getNodeName()).get(0);\n+            if (immutableNode4.getValue() == null) {\n+                return immutableNode4;\n             }\n         }\n         return null;\n     }\n }\n"}]}
