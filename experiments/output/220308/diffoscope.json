{"diffoscope-json-version": 1, "source1": "first/SuppressWithNearbyCommentFilter.class", "source2": "second/SuppressWithNearbyCommentFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,14 +1,14 @@\n \n package com.puppycrawl.tools.checkstyle.filters;\n \n import java.util.regex.Matcher;\n+import java.util.function.Consumer;\n import com.puppycrawl.tools.checkstyle.api.TextBlock;\n import java.util.Collection;\n-import java.util.function.Consumer;\n import java.util.Iterator;\n import com.puppycrawl.tools.checkstyle.TreeWalkerAuditEvent;\n import java.util.ArrayList;\n import com.puppycrawl.tools.checkstyle.api.FileContents;\n import java.lang.ref.WeakReference;\n import com.puppycrawl.tools.checkstyle.PropertyType;\n import com.puppycrawl.tools.checkstyle.XdocsPropertyType;\n@@ -41,107 +41,106 @@\n         this.checkCPP = true;\n         this.commentFormat = Pattern.compile(\"SUPPRESS CHECKSTYLE (\\\\w+)\");\n         this.checkFormat = \".*\";\n         this.influenceFormat = \"0\";\n         this.fileContentsReference = new WeakReference<FileContents>(null);\n     }\n     \n-    public final void setCommentFormat(final Pattern pattern) {\n-        this.commentFormat = pattern;\n+    public final void setCommentFormat(final Pattern commentFormat) {\n+        this.commentFormat = commentFormat;\n     }\n     \n     private FileContents getFileContents() {\n         return this.fileContentsReference.get();\n     }\n     \n-    public void setFileContents(final FileContents fileContents) {\n-        this.fileContentsReference = new WeakReference<FileContents>(fileContents);\n+    public void setFileContents(final FileContents referent) {\n+        this.fileContentsReference = new WeakReference<FileContents>(referent);\n     }\n     \n-    public final void setCheckFormat(final String format) {\n-        this.checkFormat = format;\n+    public final void setCheckFormat(final String checkFormat) {\n+        this.checkFormat = checkFormat;\n     }\n     \n-    public void setMessageFormat(final String format) {\n-        this.messageFormat = format;\n+    public void setMessageFormat(final String messageFormat) {\n+        this.messageFormat = messageFormat;\n     }\n     \n-    public void setIdFormat(final String format) {\n-        this.idFormat = format;\n+    public void setIdFormat(final String idFormat) {\n+        this.idFormat = idFormat;\n     }\n     \n-    public final void setInfluenceFormat(final String format) {\n-        this.influenceFormat = format;\n+    public final void setInfluenceFormat(final String influenceFormat) {\n+        this.influenceFormat = influenceFormat;\n     }\n     \n-    public void setCheckCPP(final boolean checkCpp) {\n-        this.checkCPP = checkCpp;\n+    public void setCheckCPP(final boolean checkCPP) {\n+        this.checkCPP = checkCPP;\n     }\n     \n     public void setCheckC(final boolean checkC) {\n         this.checkC = checkC;\n     }\n     \n     protected void finishLocalSetup() {\n     }\n     \n-    public boolean accept(final TreeWalkerAuditEvent event) {\n-        boolean accepted = true;\n-        if (event.getViolation() != null) {\n-            final FileContents currentContents = event.getFileContents();\n-            if (this.getFileContents() != currentContents) {\n-                this.setFileContents(currentContents);\n+    public boolean accept(final TreeWalkerAuditEvent treeWalkerAuditEvent) {\n+        boolean b = true;\n+        if (treeWalkerAuditEvent.getViolation() != null) {\n+            final FileContents fileContents = treeWalkerAuditEvent.getFileContents();\n+            if (this.getFileContents() != fileContents) {\n+                this.setFileContents(fileContents);\n                 this.tagSuppressions();\n             }\n-            if (this.matchesTag(event)) {\n-                accepted = false;\n+            if (this.matchesTag(treeWalkerAuditEvent)) {\n+                b = false;\n             }\n         }\n-        return accepted;\n+        return b;\n     }\n     \n-    private boolean matchesTag(final TreeWalkerAuditEvent event) {\n-        boolean result = false;\n-        for (final SuppressWithNearbyCommentFilter.Tag tag : this.tags) {\n-            if (tag.isMatch(event)) {\n-                result = true;\n+    private boolean matchesTag(final TreeWalkerAuditEvent treeWalkerAuditEvent) {\n+        boolean b = false;\n+        final Iterator<SuppressWithNearbyCommentFilter.Tag> iterator = this.tags.iterator();\n+        while (iterator.hasNext()) {\n+            if (((SuppressWithNearbyCommentFilter.Tag)iterator.next()).isMatch(treeWalkerAuditEvent)) {\n+                b = true;\n                 break;\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n     private void tagSuppressions() {\n         this.tags.clear();\n-        final FileContents contents = this.getFileContents();\n+        final FileContents fileContents = this.getFileContents();\n         if (this.checkCPP) {\n-            this.tagSuppressions(contents.getSingleLineComments().values());\n+            this.tagSuppressions(fileContents.getSingleLineComments().values());\n         }\n         if (this.checkC) {\n-            final Collection<List<TextBlock>> cComments = contents.getBlockComments().values();\n-            cComments.forEach(this::tagSuppressions);\n+            fileContents.getBlockComments().values().forEach(this::tagSuppressions);\n         }\n     }\n     \n-    private void tagSuppressions(final Collection<TextBlock> comments) {\n-        for (final TextBlock comment : comments) {\n-            final int startLineNo = comment.getStartLineNo();\n-            final String[] text = comment.getText();\n+    private void tagSuppressions(final Collection<TextBlock> collection) {\n+        for (final TextBlock textBlock : collection) {\n+            final int startLineNo = textBlock.getStartLineNo();\n+            final String[] text = textBlock.getText();\n             this.tagCommentLine(text[0], startLineNo);\n             for (int i = 1; i < text.length; ++i) {\n                 this.tagCommentLine(text[i], startLineNo + i);\n             }\n         }\n     }\n     \n-    private void tagCommentLine(final String text, final int line) {\n-        final Matcher matcher = this.commentFormat.matcher(text);\n+    private void tagCommentLine(final String input, final int n) {\n+        final Matcher matcher = this.commentFormat.matcher(input);\n         if (matcher.find()) {\n-            this.addTag(matcher.group(0), line);\n+            this.addTag(matcher.group(0), n);\n         }\n     }\n     \n-    private void addTag(final String text, final int line) {\n-        final SuppressWithNearbyCommentFilter.Tag tag = new SuppressWithNearbyCommentFilter.Tag(text, line, this);\n-        this.tags.add(tag);\n+    private void addTag(final String s, final int n) {\n+        this.tags.add(new SuppressWithNearbyCommentFilter.Tag(s, n, this));\n     }\n }\n"}]}
