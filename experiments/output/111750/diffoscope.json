{"diffoscope-json-version": 1, "source1": "first/ConstantHTML.class", "source2": "second/ConstantHTML.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,15 +29,15 @@\n     \n     ConstantHTML(final String dir, final String class_name, final String class_package, final Method[] methods, final ConstantPool constant_pool) throws IOException {\n         this.className = class_name;\n         this.classPackage = class_package;\n         this.constantPool = constant_pool;\n         this.methods = methods;\n         this.constants = constant_pool.getConstantPool();\n-        this.file = new PrintWriter(new FileOutputStream(dir + class_name + \"_cp.html\"));\n+        this.file = new PrintWriter(new FileOutputStream(String.valueOf(dir) + class_name + \"_cp.html\"));\n         (this.constantRef = new String[this.constants.length])[0] = \"&lt;unknown&gt;\";\n         this.file.println(\"<HTML><BODY BGCOLOR=\\\"#C0C0C0\\\"><TABLE BORDER=0>\");\n         for (int i = 1; i < this.constants.length; ++i) {\n             if (i % 2 == 0) {\n                 this.file.print(\"<TR BGCOLOR=\\\"#C0C0C0\\\"><TD>\");\n             }\n             else {\n@@ -74,15 +74,15 @@\n                     class_index = c2.getClassIndex();\n                     name_index = c2.getNameAndTypeIndex();\n                 }\n                 final String method_name = this.constantPool.constantToString(name_index, (byte)12);\n                 final String html_method_name = Class2HTML.toHTML(method_name);\n                 final String method_class = this.constantPool.constantToString(class_index, (byte)7);\n                 String short_method_class = Utility.compactClassName(method_class);\n-                short_method_class = Utility.compactClassName(short_method_class, this.classPackage + \".\", true);\n+                short_method_class = Utility.compactClassName(short_method_class, String.valueOf(this.classPackage) + \".\", true);\n                 final ConstantNameAndType c3 = (ConstantNameAndType)this.constantPool.getConstant(name_index, (byte)12);\n                 final String signature = this.constantPool.constantToString(c3.getSignatureIndex(), (byte)1);\n                 final String[] args = Utility.methodSignatureArgumentTypes(signature, false);\n                 final String type = Utility.methodSignatureReturnType(signature, false);\n                 final String ret_type = Class2HTML.referenceType(type);\n                 final StringBuilder buf = new StringBuilder(\"(\");\n                 for (int i = 0; i < args.length; ++i) {\n@@ -91,77 +91,77 @@\n                         buf.append(\",&nbsp;\");\n                     }\n                 }\n                 buf.append(\")\");\n                 final String arg_types = buf.toString();\n                 String ref;\n                 if (method_class.equals(this.className)) {\n-                    ref = \"<A HREF=\\\"\" + this.className + \"_code.html#method\" + this.getMethodNumber(method_name + signature) + \"\\\" TARGET=Code>\" + html_method_name + \"</A>\";\n+                    ref = \"<A HREF=\\\"\" + this.className + \"_code.html#method\" + this.getMethodNumber(String.valueOf(method_name) + signature) + \"\\\" TARGET=Code>\" + html_method_name + \"</A>\";\n                 }\n                 else {\n-                    ref = \"<A HREF=\\\"\" + method_class + \".html\\\" TARGET=_top>\" + short_method_class + \"</A>.\" + html_method_name;\n+                    ref = \"<A HREF=\\\"\" + method_class + \".html\" + \"\\\" TARGET=_top>\" + short_method_class + \"</A>.\" + html_method_name;\n                 }\n-                this.constantRef[index] = ret_type + \"&nbsp;<A HREF=\\\"\" + this.className + \"_cp.html#cp\" + class_index + \"\\\" TARGET=Constants>\" + short_method_class + \"</A>.<A HREF=\\\"\" + this.className + \"_cp.html#cp\" + index + \"\\\" TARGET=ConstantPool>\" + html_method_name + \"</A>&nbsp;\" + arg_types;\n-                this.file.println(\"<P><TT>\" + ret_type + \"&nbsp;\" + ref + arg_types + \"&nbsp;</TT>\\n<UL><LI><A HREF=\\\"#cp\" + class_index + \"\\\">Class index(\" + class_index + \")</A>\\n<LI><A HREF=\\\"#cp\" + name_index + \"\\\">NameAndType index(\" + name_index + \")</A></UL>\");\n+                this.constantRef[index] = String.valueOf(ret_type) + \"&nbsp;<A HREF=\\\"\" + this.className + \"_cp.html#cp\" + class_index + \"\\\" TARGET=Constants>\" + short_method_class + \"</A>.<A HREF=\\\"\" + this.className + \"_cp.html#cp\" + index + \"\\\" TARGET=ConstantPool>\" + html_method_name + \"</A>&nbsp;\" + arg_types;\n+                this.file.println(\"<P><TT>\" + ret_type + \"&nbsp;\" + ref + arg_types + \"&nbsp;</TT>\\n<UL>\" + \"<LI><A HREF=\\\"#cp\" + class_index + \"\\\">Class index(\" + class_index + \")</A>\\n\" + \"<LI><A HREF=\\\"#cp\" + name_index + \"\\\">NameAndType index(\" + name_index + \")</A></UL>\");\n                 break;\n             }\n             case 9: {\n                 final ConstantFieldref c4 = (ConstantFieldref)this.constantPool.getConstant(index, (byte)9);\n                 final int class_index = c4.getClassIndex();\n                 final int name_index = c4.getNameAndTypeIndex();\n                 final String field_class = this.constantPool.constantToString(class_index, (byte)7);\n                 String short_field_class = Utility.compactClassName(field_class);\n-                short_field_class = Utility.compactClassName(short_field_class, this.classPackage + \".\", true);\n+                short_field_class = Utility.compactClassName(short_field_class, String.valueOf(this.classPackage) + \".\", true);\n                 final String field_name = this.constantPool.constantToString(name_index, (byte)12);\n                 String ref;\n                 if (field_class.equals(this.className)) {\n                     ref = \"<A HREF=\\\"\" + field_class + \"_methods.html#field\" + field_name + \"\\\" TARGET=Methods>\" + field_name + \"</A>\";\n                 }\n                 else {\n                     ref = \"<A HREF=\\\"\" + field_class + \".html\\\" TARGET=_top>\" + short_field_class + \"</A>.\" + field_name + \"\\n\";\n                 }\n                 this.constantRef[index] = \"<A HREF=\\\"\" + this.className + \"_cp.html#cp\" + class_index + \"\\\" TARGET=Constants>\" + short_field_class + \"</A>.<A HREF=\\\"\" + this.className + \"_cp.html#cp\" + index + \"\\\" TARGET=ConstantPool>\" + field_name + \"</A>\";\n-                this.file.println(\"<P><TT>\" + ref + \"</TT><BR>\\n<UL><LI><A HREF=\\\"#cp\" + class_index + \"\\\">Class(\" + class_index + \")</A><BR>\\n<LI><A HREF=\\\"#cp\" + name_index + \"\\\">NameAndType(\" + name_index + \")</A></UL>\");\n+                this.file.println(\"<P><TT>\" + ref + \"</TT><BR>\\n\" + \"<UL>\" + \"<LI><A HREF=\\\"#cp\" + class_index + \"\\\">Class(\" + class_index + \")</A><BR>\\n\" + \"<LI><A HREF=\\\"#cp\" + name_index + \"\\\">NameAndType(\" + name_index + \")</A></UL>\");\n                 break;\n             }\n             case 7: {\n                 final ConstantClass c5 = (ConstantClass)this.constantPool.getConstant(index, (byte)7);\n                 final int name_index = c5.getNameIndex();\n                 final String class_name2 = this.constantPool.constantToString(index, tag);\n                 String short_class_name = Utility.compactClassName(class_name2);\n-                short_class_name = Utility.compactClassName(short_class_name, this.classPackage + \".\", true);\n+                short_class_name = Utility.compactClassName(short_class_name, String.valueOf(this.classPackage) + \".\", true);\n                 final String ref = \"<A HREF=\\\"\" + class_name2 + \".html\\\" TARGET=_top>\" + short_class_name + \"</A>\";\n                 this.constantRef[index] = \"<A HREF=\\\"\" + this.className + \"_cp.html#cp\" + index + \"\\\" TARGET=ConstantPool>\" + short_class_name + \"</A>\";\n-                this.file.println(\"<P><TT>\" + ref + \"</TT><UL><LI><A HREF=\\\"#cp\" + name_index + \"\\\">Name index(\" + name_index + \")</A></UL>\\n\");\n+                this.file.println(\"<P><TT>\" + ref + \"</TT><UL>\" + \"<LI><A HREF=\\\"#cp\" + name_index + \"\\\">Name index(\" + name_index + \")</A></UL>\\n\");\n                 break;\n             }\n             case 8: {\n                 final ConstantString c6 = (ConstantString)this.constantPool.getConstant(index, (byte)8);\n                 final int name_index = c6.getStringIndex();\n                 final String str = Class2HTML.toHTML(this.constantPool.constantToString(index, tag));\n-                this.file.println(\"<P><TT>\" + str + \"</TT><UL><LI><A HREF=\\\"#cp\" + name_index + \"\\\">Name index(\" + name_index + \")</A></UL>\\n\");\n+                this.file.println(\"<P><TT>\" + str + \"</TT><UL>\" + \"<LI><A HREF=\\\"#cp\" + name_index + \"\\\">Name index(\" + name_index + \")</A></UL>\\n\");\n                 break;\n             }\n             case 12: {\n                 final ConstantNameAndType c7 = (ConstantNameAndType)this.constantPool.getConstant(index, (byte)12);\n                 final int name_index = c7.getNameIndex();\n                 final int signature_index = c7.getSignatureIndex();\n-                this.file.println(\"<P><TT>\" + Class2HTML.toHTML(this.constantPool.constantToString(index, tag)) + \"</TT><UL><LI><A HREF=\\\"#cp\" + name_index + \"\\\">Name index(\" + name_index + \")</A>\\n<LI><A HREF=\\\"#cp\" + signature_index + \"\\\">Signature index(\" + signature_index + \")</A></UL>\\n\");\n+                this.file.println(\"<P><TT>\" + Class2HTML.toHTML(this.constantPool.constantToString(index, tag)) + \"</TT><UL>\" + \"<LI><A HREF=\\\"#cp\" + name_index + \"\\\">Name index(\" + name_index + \")</A>\\n\" + \"<LI><A HREF=\\\"#cp\" + signature_index + \"\\\">Signature index(\" + signature_index + \")</A></UL>\\n\");\n                 break;\n             }\n             default: {\n                 this.file.println(\"<P><TT>\" + Class2HTML.toHTML(this.constantPool.constantToString(index, tag)) + \"</TT>\\n\");\n                 break;\n             }\n         }\n     }\n     \n     private int getMethodNumber(final String str) {\n         for (int i = 0; i < this.methods.length; ++i) {\n-            final String cmp = this.methods[i].getName() + this.methods[i].getSignature();\n+            final String cmp = String.valueOf(this.methods[i].getName()) + this.methods[i].getSignature();\n             if (cmp.equals(str)) {\n                 return i;\n             }\n         }\n         return -1;\n     }\n }\n"}]}
