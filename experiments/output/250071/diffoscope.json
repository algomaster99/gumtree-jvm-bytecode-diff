{"diffoscope-json-version": 1, "source1": "first/NoWhitespaceAfterCheck.class", "source2": "second/NoWhitespaceAfterCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,227 +29,216 @@\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n     public void setAllowLineBreaks(final boolean allowLineBreaks) {\n         this.allowLineBreaks = allowLineBreaks;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (shouldCheckWhitespaceAfter(ast)) {\n-            final DetailAST whitespaceFollowedAst = getWhitespaceFollowedNode(ast);\n-            final int whitespaceColumnNo = getPositionAfter(whitespaceFollowedAst);\n-            final int whitespaceLineNo = whitespaceFollowedAst.getLineNo();\n-            if (this.hasTrailingWhitespace(ast, whitespaceColumnNo, whitespaceLineNo)) {\n-                this.log(ast, \"ws.followed\", new Object[] { whitespaceFollowedAst.getText() });\n+    public void visitToken(final DetailAST detailAST) {\n+        if (shouldCheckWhitespaceAfter(detailAST)) {\n+            final DetailAST whitespaceFollowedNode = getWhitespaceFollowedNode(detailAST);\n+            if (this.hasTrailingWhitespace(detailAST, getPositionAfter(whitespaceFollowedNode), whitespaceFollowedNode.getLineNo())) {\n+                this.log(detailAST, \"ws.followed\", new Object[] { whitespaceFollowedNode.getText() });\n             }\n         }\n     }\n     \n-    private static DetailAST getWhitespaceFollowedNode(final DetailAST ast) {\n-        DetailAST whitespaceFollowedAst = null;\n-        switch (ast.getType()) {\n+    private static DetailAST getWhitespaceFollowedNode(final DetailAST detailAST) {\n+        DetailAST detailAST2 = null;\n+        switch (detailAST.getType()) {\n             case 23: {\n-                whitespaceFollowedAst = ast.findFirstToken(77);\n+                detailAST2 = detailAST.findFirstToken(77);\n                 break;\n             }\n             case 17: {\n-                whitespaceFollowedAst = getArrayDeclaratorPreviousElement(ast);\n+                detailAST2 = getArrayDeclaratorPreviousElement(detailAST);\n                 break;\n             }\n             case 24: {\n-                whitespaceFollowedAst = getIndexOpPreviousElement(ast);\n+                detailAST2 = getIndexOpPreviousElement(detailAST);\n                 break;\n             }\n             default: {\n-                whitespaceFollowedAst = ast;\n+                detailAST2 = detailAST;\n                 break;\n             }\n         }\n-        return whitespaceFollowedAst;\n+        return detailAST2;\n     }\n     \n-    private static boolean shouldCheckWhitespaceAfter(final DetailAST ast) {\n-        final DetailAST previousSibling = ast.getPreviousSibling();\n-        final boolean isSynchronizedMethod = ast.getType() == 67 && ast.getFirstChild() == null;\n-        return !isSynchronizedMethod && (previousSibling == null || previousSibling.getType() != 158);\n+    private static boolean shouldCheckWhitespaceAfter(final DetailAST detailAST) {\n+        final DetailAST previousSibling = detailAST.getPreviousSibling();\n+        return (detailAST.getType() != 67 || detailAST.getFirstChild() != null) && (previousSibling == null || previousSibling.getType() != 158);\n     }\n     \n-    private static int getPositionAfter(final DetailAST ast) {\n-        int after;\n-        if (ast.getType() == 58 && ast.getNextSibling() != null && ast.getNextSibling().getType() == 76) {\n-            final DetailAST methodDef = ast.getParent();\n-            final DetailAST endOfParams = methodDef.findFirstToken(77);\n-            after = endOfParams.getColumnNo() + 1;\n+    private static int getPositionAfter(final DetailAST detailAST) {\n+        int n;\n+        if (detailAST.getType() == 58 && detailAST.getNextSibling() != null && detailAST.getNextSibling().getType() == 76) {\n+            n = detailAST.getParent().findFirstToken(77).getColumnNo() + 1;\n         }\n         else {\n-            after = ast.getColumnNo() + ast.getText().length();\n+            n = detailAST.getColumnNo() + detailAST.getText().length();\n         }\n-        return after;\n+        return n;\n     }\n     \n-    private boolean hasTrailingWhitespace(final DetailAST ast, final int whitespaceColumnNo, final int whitespaceLineNo) {\n-        final int astLineNo = ast.getLineNo();\n-        final int[] line = this.getLineCodePoints(astLineNo - 1);\n-        boolean result;\n-        if (astLineNo == whitespaceLineNo && whitespaceColumnNo < line.length) {\n-            result = CommonUtil.isCodePointWhitespace(line, whitespaceColumnNo);\n+    private boolean hasTrailingWhitespace(final DetailAST detailAST, final int n, final int n2) {\n+        final int lineNo = detailAST.getLineNo();\n+        final int[] lineCodePoints = this.getLineCodePoints(lineNo - 1);\n+        boolean codePointWhitespace;\n+        if (lineNo == n2 && n < lineCodePoints.length) {\n+            codePointWhitespace = CommonUtil.isCodePointWhitespace(lineCodePoints, n);\n         }\n         else {\n-            result = !this.allowLineBreaks;\n+            codePointWhitespace = !this.allowLineBreaks;\n         }\n-        return result;\n+        return codePointWhitespace;\n     }\n     \n-    private static DetailAST getArrayDeclaratorPreviousElement(final DetailAST ast) {\n-        DetailAST previousElement = null;\n-        if (ast.getPreviousSibling() != null && ast.getPreviousSibling().getType() == 17) {\n-            previousElement = getPreviousElementOfMultiDimArray(ast);\n+    private static DetailAST getArrayDeclaratorPreviousElement(final DetailAST detailAST) {\n+        DetailAST detailAST2 = null;\n+        if (detailAST.getPreviousSibling() != null && detailAST.getPreviousSibling().getType() == 17) {\n+            detailAST2 = getPreviousElementOfMultiDimArray(detailAST);\n         }\n         else {\n-            final DetailAST parent = ast.getParent();\n+            final DetailAST parent = detailAST.getParent();\n             switch (parent.getType()) {\n                 case 168:\n                 case 169: {\n-                    previousElement = ast.getPreviousSibling();\n+                    detailAST2 = detailAST.getPreviousSibling();\n                     break;\n                 }\n                 case 59:\n                 case 136:\n                 case 164: {\n-                    previousElement = getTypeLastNode(ast);\n+                    detailAST2 = getTypeLastNode(detailAST);\n                     break;\n                 }\n                 case 13: {\n-                    previousElement = getPreviousNodeWithParentOfTypeAst(ast, parent);\n+                    detailAST2 = getPreviousNodeWithParentOfTypeAst(detailAST, parent);\n                     break;\n                 }\n                 case 180: {\n-                    final DetailAST ident = getIdentLastToken(ast);\n-                    if (ident == null) {\n-                        previousElement = ast.getParent().getFirstChild();\n+                    final DetailAST identLastToken = getIdentLastToken(detailAST);\n+                    if (identLastToken == null) {\n+                        detailAST2 = detailAST.getParent().getFirstChild();\n                         break;\n                     }\n-                    previousElement = ident;\n+                    detailAST2 = identLastToken;\n                     break;\n                 }\n                 default: {\n                     throw new IllegalStateException(\"unexpected ast syntax \" + parent);\n                 }\n             }\n         }\n-        return previousElement;\n+        return detailAST2;\n     }\n     \n-    private static DetailAST getPreviousElementOfMultiDimArray(final DetailAST leftBracket) {\n-        final DetailAST previousRightBracket = leftBracket.getPreviousSibling().getLastChild();\n-        DetailAST ident = null;\n-        for (DetailAST parent = leftBracket.getParent().getParent(); ident == null; ident = parent.findFirstToken(58), parent = parent.getParent()) {}\n-        DetailAST previousElement;\n-        if (ident.getColumnNo() > previousRightBracket.getColumnNo() && ident.getColumnNo() < leftBracket.getColumnNo()) {\n-            previousElement = ident;\n+    private static DetailAST getPreviousElementOfMultiDimArray(final DetailAST detailAST) {\n+        final DetailAST lastChild = detailAST.getPreviousSibling().getLastChild();\n+        DetailAST firstToken = null;\n+        for (DetailAST detailAST2 = detailAST.getParent().getParent(); firstToken == null; firstToken = detailAST2.findFirstToken(58), detailAST2 = detailAST2.getParent()) {}\n+        DetailAST detailAST3;\n+        if (firstToken.getColumnNo() > lastChild.getColumnNo() && firstToken.getColumnNo() < detailAST.getColumnNo()) {\n+            detailAST3 = firstToken;\n         }\n         else {\n-            previousElement = previousRightBracket;\n+            detailAST3 = lastChild;\n         }\n-        return previousElement;\n+        return detailAST3;\n     }\n     \n-    private static DetailAST getIndexOpPreviousElement(final DetailAST ast) {\n-        final DetailAST firstChild = ast.getFirstChild();\n-        DetailAST result;\n+    private static DetailAST getIndexOpPreviousElement(final DetailAST detailAST) {\n+        final DetailAST firstChild = detailAST.getFirstChild();\n+        DetailAST detailAST2;\n         if (firstChild.getType() == 24) {\n-            result = firstChild.findFirstToken(48);\n+            detailAST2 = firstChild.findFirstToken(48);\n         }\n         else if (firstChild.getType() == 58) {\n-            result = firstChild;\n+            detailAST2 = firstChild;\n         }\n         else {\n-            final DetailAST ident = getIdentLastToken(ast);\n-            if (ident == null) {\n-                final DetailAST rparen = ast.findFirstToken(77);\n-                if (rparen == null) {\n-                    final DetailAST lastChild = firstChild.getLastChild();\n-                    result = lastChild.findFirstToken(73);\n+            final DetailAST identLastToken = getIdentLastToken(detailAST);\n+            if (identLastToken == null) {\n+                final DetailAST firstToken = detailAST.findFirstToken(77);\n+                if (firstToken == null) {\n+                    detailAST2 = firstChild.getLastChild().findFirstToken(73);\n                 }\n                 else {\n-                    result = rparen;\n+                    detailAST2 = firstToken;\n                 }\n             }\n             else {\n-                result = ident;\n+                detailAST2 = identLastToken;\n             }\n         }\n-        return result;\n+        return detailAST2;\n     }\n     \n-    private static DetailAST getTypeLastNode(final DetailAST ast) {\n-        final DetailAST parent = ast.getParent();\n-        final boolean isPrecededByTypeArgs = parent.findFirstToken(163) != null;\n-        final Optional<DetailAST> objectArrayType = Optional.ofNullable(getIdentLastToken(ast));\n-        DetailAST typeLastNode;\n-        if (isPrecededByTypeArgs) {\n-            typeLastNode = parent.findFirstToken(163).findFirstToken(173);\n+    private static DetailAST getTypeLastNode(final DetailAST detailAST) {\n+        final DetailAST parent = detailAST.getParent();\n+        final boolean b = parent.findFirstToken(163) != null;\n+        final Optional<DetailAST> ofNullable = Optional.ofNullable(getIdentLastToken(detailAST));\n+        DetailAST detailAST2;\n+        if (b) {\n+            detailAST2 = parent.findFirstToken(163).findFirstToken(173);\n         }\n-        else if (objectArrayType.isPresent()) {\n-            typeLastNode = objectArrayType.get();\n+        else if (ofNullable.isPresent()) {\n+            detailAST2 = ofNullable.get();\n         }\n         else {\n-            typeLastNode = parent.getFirstChild();\n+            detailAST2 = parent.getFirstChild();\n         }\n-        return typeLastNode;\n+        return detailAST2;\n     }\n     \n-    private static DetailAST getPreviousNodeWithParentOfTypeAst(final DetailAST ast, final DetailAST parent) {\n-        final DetailAST ident = getIdentLastToken(parent.getParent());\n-        final DetailAST lastTypeNode = getTypeLastNode(ast);\n-        DetailAST previousElement;\n-        if (ident == null || ident.getLineNo() > ast.getLineNo()) {\n-            previousElement = lastTypeNode;\n+    private static DetailAST getPreviousNodeWithParentOfTypeAst(final DetailAST detailAST, final DetailAST detailAST2) {\n+        final DetailAST identLastToken = getIdentLastToken(detailAST2.getParent());\n+        final DetailAST typeLastNode = getTypeLastNode(detailAST);\n+        DetailAST detailAST3;\n+        if (identLastToken == null || identLastToken.getLineNo() > detailAST.getLineNo()) {\n+            detailAST3 = typeLastNode;\n         }\n-        else if (ident.getLineNo() < ast.getLineNo()) {\n-            previousElement = ident;\n+        else if (identLastToken.getLineNo() < detailAST.getLineNo()) {\n+            detailAST3 = identLastToken;\n+        }\n+        else if (identLastToken.getColumnNo() >= detailAST.getColumnNo() + 2 || typeLastNode.getColumnNo() >= identLastToken.getColumnNo() + 13) {\n+            detailAST3 = typeLastNode;\n         }\n         else {\n-            final int instanceOfSize = 13;\n-            if (ident.getColumnNo() >= ast.getColumnNo() + 2 || lastTypeNode.getColumnNo() >= ident.getColumnNo() + 13) {\n-                previousElement = lastTypeNode;\n-            }\n-            else {\n-                previousElement = ident;\n-            }\n+            detailAST3 = identLastToken;\n         }\n-        return previousElement;\n+        return detailAST3;\n     }\n     \n-    private static DetailAST getIdentLastToken(final DetailAST ast) {\n-        final Optional<DetailAST> dot = getPrecedingDot(ast);\n-        DetailAST result;\n-        if (dot.isEmpty() || ast.getFirstChild().getType() == 27) {\n-            final DetailAST methodCall = ast.findFirstToken(27);\n-            if (methodCall == null) {\n-                result = ast.findFirstToken(58);\n+    private static DetailAST getIdentLastToken(final DetailAST detailAST) {\n+        final Optional<DetailAST> precedingDot = getPrecedingDot(detailAST);\n+        DetailAST detailAST2;\n+        if (precedingDot.isEmpty() || detailAST.getFirstChild().getType() == 27) {\n+            final DetailAST firstToken = detailAST.findFirstToken(27);\n+            if (firstToken == null) {\n+                detailAST2 = detailAST.findFirstToken(58);\n             }\n             else {\n-                result = methodCall.findFirstToken(77);\n+                detailAST2 = firstToken.findFirstToken(77);\n             }\n         }\n         else {\n-            result = ((DetailAST)dot.get()).getFirstChild().getNextSibling();\n+            detailAST2 = ((DetailAST)precedingDot.get()).getFirstChild().getNextSibling();\n         }\n-        return result;\n+        return detailAST2;\n     }\n     \n-    private static Optional<DetailAST> getPrecedingDot(final DetailAST leftBracket) {\n-        final DetailAST referencedMemberDot = leftBracket.findFirstToken(59);\n-        final Optional<DetailAST> result = Optional.ofNullable(referencedMemberDot);\n-        return result.or(() -> getReferencedClassDot(leftBracket));\n+    private static Optional<DetailAST> getPrecedingDot(final DetailAST detailAST) {\n+        return Optional.ofNullable(detailAST.findFirstToken(59)).or(() -> getReferencedClassDot(detailAST2));\n     }\n     \n-    private static Optional<DetailAST> getReferencedClassDot(final DetailAST leftBracket) {\n-        final DetailAST parent = leftBracket.getParent();\n-        Optional<DetailAST> classDot = Optional.empty();\n+    private static Optional<DetailAST> getReferencedClassDot(final DetailAST detailAST) {\n+        final DetailAST parent = detailAST.getParent();\n+        Object o = Optional.empty();\n         if (parent.getType() != 80) {\n-            classDot = Optional.ofNullable(parent.findFirstToken(59));\n+            o = Optional.ofNullable(parent.findFirstToken(59));\n         }\n-        return classDot;\n+        return (Optional<DetailAST>)o;\n     }\n }\n"}]}
