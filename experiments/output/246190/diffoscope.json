{"diffoscope-json-version": 1, "source1": "first/MissingOverrideCheck.class", "source2": "second/MissingOverrideCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,16 +19,16 @@\n public final class MissingOverrideCheck extends AbstractCheck\n {\n     public static final String MSG_KEY_TAG_NOT_VALID_ON = \"tag.not.valid.on\";\n     public static final String MSG_KEY_ANNOTATION_MISSING_OVERRIDE = \"annotation.missing.override\";\n     private static final Pattern MATCH_INHERIT_DOC;\n     private boolean javaFiveCompatibility;\n     \n-    public void setJavaFiveCompatibility(final boolean compatibility) {\n-        this.javaFiveCompatibility = compatibility;\n+    public void setJavaFiveCompatibility(final boolean javaFiveCompatibility) {\n+        this.javaFiveCompatibility = javaFiveCompatibility;\n     }\n     \n     public int[] getDefaultTokens() {\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getAcceptableTokens() {\n@@ -39,43 +39,43 @@\n         return true;\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 9 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final boolean containsTag = containsInheritDocTag(ast);\n-        if (containsTag && !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n-            this.log(ast, \"tag.not.valid.on\", new Object[] { JavadocTagInfo.INHERIT_DOC.getText() });\n+    public void visitToken(final DetailAST detailAST) {\n+        final boolean containsInheritDocTag = containsInheritDocTag(detailAST);\n+        if (containsInheritDocTag && !JavadocTagInfo.INHERIT_DOC.isValidOn(detailAST)) {\n+            this.log(detailAST, \"tag.not.valid.on\", new Object[] { JavadocTagInfo.INHERIT_DOC.getText() });\n         }\n         else {\n-            boolean check = true;\n+            boolean b = true;\n             if (this.javaFiveCompatibility) {\n-                final DetailAST defOrNew = ast.getParent().getParent();\n-                if (defOrNew.findFirstToken(18) != null || defOrNew.findFirstToken(19) != null || defOrNew.getType() == 136) {\n-                    check = false;\n+                final DetailAST parent = detailAST.getParent().getParent();\n+                if (parent.findFirstToken(18) != null || parent.findFirstToken(19) != null || parent.getType() == 136) {\n+                    b = false;\n                 }\n             }\n-            if (check && containsTag && !AnnotationUtil.hasOverrideAnnotation(ast)) {\n-                this.log(ast, \"annotation.missing.override\", new Object[0]);\n+            if (b && containsInheritDocTag && !AnnotationUtil.hasOverrideAnnotation(detailAST)) {\n+                this.log(detailAST, \"annotation.missing.override\", new Object[0]);\n             }\n         }\n     }\n     \n-    private static boolean containsInheritDocTag(final DetailAST ast) {\n-        final DetailAST modifiers = ast.getFirstChild();\n-        DetailAST startNode;\n-        if (modifiers.hasChildren()) {\n-            startNode = Optional.ofNullable(ast.getFirstChild().findFirstToken(159)).orElse(modifiers);\n+    private static boolean containsInheritDocTag(final DetailAST detailAST) {\n+        final DetailAST firstChild = detailAST.getFirstChild();\n+        DetailAST firstToken;\n+        if (firstChild.hasChildren()) {\n+            firstToken = Optional.ofNullable(detailAST.getFirstChild().findFirstToken(159)).orElse(firstChild);\n         }\n         else {\n-            startNode = ast.findFirstToken(13);\n+            firstToken = detailAST.findFirstToken(13);\n         }\n-        final Optional<String> javadoc = Stream.iterate(startNode.getLastChild(), Objects::nonNull, DetailAST::getPreviousSibling).filter(node -> node.getType() == 145).map((Function<? super DetailAST, ?>)DetailAST::getFirstChild).map((Function<? super Object, ? extends String>)DetailAST::getText).filter(JavadocUtil::isJavadocComment).findFirst();\n-        return javadoc.isPresent() && MissingOverrideCheck.MATCH_INHERIT_DOC.matcher(javadoc.get()).find();\n+        final Optional<Object> first = (Optional<Object>)Stream.iterate(firstToken.getLastChild(), Objects::nonNull, DetailAST::getPreviousSibling).filter(detailAST2 -> detailAST2.getType() == 145).map((Function<? super DetailAST, ?>)DetailAST::getFirstChild).map((Function<? super Object, ? extends CharSequence>)DetailAST::getText).filter((Predicate<? super CharSequence>)JavadocUtil::isJavadocComment).findFirst();\n+        return first.isPresent() && MissingOverrideCheck.MATCH_INHERIT_DOC.matcher(first.get()).find();\n     }\n     \n     static {\n         MATCH_INHERIT_DOC = CommonUtil.createPattern(\"\\\\{\\\\s*@(inheritDoc)\\\\s*\\\\}\");\n     }\n }\n"}]}
