{"diffoscope-json-version": 1, "source1": "first/Code.class", "source2": "second/Code.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,24 +18,23 @@\n     \n     public Code(final Code code) {\n         this(code.getNameIndex(), code.getLength(), code.getMaxStack(), code.getMaxLocals(), code.getCode(), code.getExceptionTable(), code.getAttributes(), code.getConstantPool());\n     }\n     \n     Code(final int nameIndex, final int length, final DataInput file, final ConstantPool constantPool) throws IOException {\n         this(nameIndex, length, file.readUnsignedShort(), file.readUnsignedShort(), null, null, null, constantPool);\n-        final int codeLength = Args.requireU4(file.readInt(), 1, \"Code length attribute\");\n-        file.readFully(this.code = new byte[codeLength]);\n-        final int exceptionTableLength = file.readUnsignedShort();\n-        this.exceptionTable = new CodeException[exceptionTableLength];\n-        for (int i = 0; i < exceptionTableLength; ++i) {\n+        file.readFully(this.code = new byte[Args.requireU4(file.readInt(), 1, \"Code length attribute\")]);\n+        final int unsignedShort = file.readUnsignedShort();\n+        this.exceptionTable = new CodeException[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n             this.exceptionTable[i] = new CodeException(file);\n         }\n-        final int attributesCount = file.readUnsignedShort();\n-        this.attributes = new Attribute[attributesCount];\n-        for (int j = 0; j < attributesCount; ++j) {\n+        final int unsignedShort2 = file.readUnsignedShort();\n+        this.attributes = new Attribute[unsignedShort2];\n+        for (int j = 0; j < unsignedShort2; ++j) {\n             this.attributes[j] = Attribute.readAttribute(file, constantPool);\n         }\n         super.setLength(length);\n     }\n     \n     public Code(final int nameIndex, final int length, final int maxStack, final int maxLocals, final byte[] code, final CodeException[] exceptionTable, final Attribute[] attributes, final ConstantPool constantPool) {\n         super((byte)2, nameIndex, length, constantPool);\n@@ -49,47 +48,50 @@\n     }\n     \n     public void accept(final Visitor v) {\n         v.visitCode(this);\n     }\n     \n     private int calculateLength() {\n-        int len = 0;\n+        int n = 0;\n         if (this.attributes != null) {\n-            for (final Attribute attribute : this.attributes) {\n-                len += attribute.getLength() + 6;\n+            final Attribute[] attributes = this.attributes;\n+            for (int length = attributes.length, i = 0; i < length; ++i) {\n+                n += attributes[i].getLength() + 6;\n             }\n         }\n-        return len + this.getInternalLength();\n+        return n + this.getInternalLength();\n     }\n     \n     public Attribute copy(final ConstantPool constantPool) {\n-        final Code c = (Code)this.clone();\n+        final Code code = (Code)this.clone();\n         if (this.code != null) {\n-            c.code = this.code.clone();\n+            code.code = this.code.clone();\n         }\n-        c.setConstantPool(constantPool);\n-        Arrays.setAll(c.exceptionTable = new CodeException[this.exceptionTable.length], i -> this.exceptionTable[i].copy());\n-        Arrays.setAll(c.attributes = new Attribute[this.attributes.length], i -> this.attributes[i].copy(constantPool));\n-        return c;\n+        code.setConstantPool(constantPool);\n+        Arrays.setAll(code.exceptionTable = new CodeException[this.exceptionTable.length], n2 -> this.exceptionTable[n2].copy());\n+        Arrays.setAll(code.attributes = new Attribute[this.attributes.length], n4 -> this.attributes[n4].copy(constantPool2));\n+        return code;\n     }\n     \n     public void dump(final DataOutputStream file) throws IOException {\n         super.dump(file);\n         file.writeShort(this.maxStack);\n         file.writeShort(this.maxLocals);\n         file.writeInt(this.code.length);\n         file.write(this.code, 0, this.code.length);\n         file.writeShort(this.exceptionTable.length);\n-        for (final CodeException exception : this.exceptionTable) {\n-            exception.dump(file);\n+        final CodeException[] exceptionTable = this.exceptionTable;\n+        for (int length = exceptionTable.length, i = 0; i < length; ++i) {\n+            exceptionTable[i].dump(file);\n         }\n         file.writeShort(this.attributes.length);\n-        for (final Attribute attribute : this.attributes) {\n-            attribute.dump(file);\n+        final Attribute[] attributes = this.attributes;\n+        for (int length2 = attributes.length, j = 0; j < length2; ++j) {\n+            attributes[j].dump(file);\n         }\n     }\n     \n     public Attribute[] getAttributes() {\n         return this.attributes;\n     }\n     \n@@ -155,25 +157,26 @@\n     }\n     \n     public String toString() {\n         return this.toString(true);\n     }\n     \n     public String toString(final boolean verbose) {\n-        final StringBuilder buf = new StringBuilder(100);\n-        buf.append(\"Code(maxStack = \").append(this.maxStack).append(\", maxLocals = \").append(this.maxLocals).append(\", code_length = \").append(this.code.length).append(\")\\n\").append(Utility.codeToString(this.code, super.getConstantPool(), 0, -1, verbose));\n+        final StringBuilder sb = new StringBuilder(100);\n+        sb.append(\"Code(maxStack = \").append(this.maxStack).append(\", maxLocals = \").append(this.maxLocals).append(\", code_length = \").append(this.code.length).append(\")\\n\").append(Utility.codeToString(this.code, super.getConstantPool(), 0, -1, verbose));\n         if (this.exceptionTable.length > 0) {\n-            buf.append(\"\\nException handler(s) = \\n\").append(\"From\\tTo\\tHandler\\tType\\n\");\n-            for (final CodeException exception : this.exceptionTable) {\n-                buf.append(exception.toString(super.getConstantPool(), verbose)).append(\"\\n\");\n+            sb.append(\"\\nException handler(s) = \\n\").append(\"From\\tTo\\tHandler\\tType\\n\");\n+            final CodeException[] exceptionTable = this.exceptionTable;\n+            for (int length = exceptionTable.length, i = 0; i < length; ++i) {\n+                sb.append(exceptionTable[i].toString(super.getConstantPool(), verbose)).append(\"\\n\");\n             }\n         }\n         if (this.attributes.length > 0) {\n-            buf.append(\"\\nAttribute(s) = \");\n-            for (final Attribute attribute : this.attributes) {\n-                buf.append(\"\\n\").append(attribute.getName()).append(\":\");\n-                buf.append(\"\\n\").append(attribute);\n+            sb.append(\"\\nAttribute(s) = \");\n+            for (final Attribute obj : this.attributes) {\n+                sb.append(\"\\n\").append(obj.getName()).append(\":\");\n+                sb.append(\"\\n\").append(obj);\n             }\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n }\n"}]}
