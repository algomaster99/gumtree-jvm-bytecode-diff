{"diffoscope-json-version": 1, "source1": "first/JavadocBlockTagLocationCheck.class", "source2": "second/JavadocBlockTagLocationCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,44 +18,44 @@\n     private static final String[] DEFAULT_TAGS;\n     private Set<String> tags;\n     \n     public JavadocBlockTagLocationCheck() {\n         this.setTags(JavadocBlockTagLocationCheck.DEFAULT_TAGS);\n     }\n     \n-    public final void setTags(final String... values) {\n-        this.tags = Arrays.stream(values).collect((Collector<? super String, ?, Set<String>>)Collectors.toSet());\n+    public final void setTags(final String... array) {\n+        this.tags = Arrays.stream(array).collect((Collector<? super String, ?, Set<String>>)Collectors.toSet());\n     }\n     \n     public int[] getRequiredJavadocTokens() {\n         return new int[] { 10074 };\n     }\n     \n     public int[] getAcceptableJavadocTokens() {\n         return this.getRequiredJavadocTokens();\n     }\n     \n     public int[] getDefaultJavadocTokens() {\n         return this.getRequiredJavadocTokens();\n     }\n     \n-    public void visitJavadocToken(final DetailNode ast) {\n-        if (!isCommentOrInlineTag(ast.getParent())) {\n-            final Matcher tagMatcher = JavadocBlockTagLocationCheck.JAVADOC_BLOCK_TAG_PATTERN.matcher(ast.getText());\n-            while (tagMatcher.find()) {\n-                final String tagName = tagMatcher.group(1);\n-                if (this.tags.contains(tagName)) {\n-                    this.log(ast.getLineNumber(), \"javadoc.blockTagLocation\", new Object[] { tagName });\n+    public void visitJavadocToken(final DetailNode detailNode) {\n+        if (!isCommentOrInlineTag(detailNode.getParent())) {\n+            final Matcher matcher = JavadocBlockTagLocationCheck.JAVADOC_BLOCK_TAG_PATTERN.matcher(detailNode.getText());\n+            while (matcher.find()) {\n+                final String group = matcher.group(1);\n+                if (this.tags.contains(group)) {\n+                    this.log(detailNode.getLineNumber(), \"javadoc.blockTagLocation\", new Object[] { group });\n                 }\n             }\n         }\n     }\n     \n-    private static boolean isCommentOrInlineTag(final DetailNode node) {\n-        return node.getType() == 10072 || node.getType() == 10073;\n+    private static boolean isCommentOrInlineTag(final DetailNode detailNode) {\n+        return detailNode.getType() == 10072 || detailNode.getType() == 10073;\n     }\n     \n     static {\n         JAVADOC_BLOCK_TAG_PATTERN = Pattern.compile(\"\\\\s@(\\\\w+)\");\n         DEFAULT_TAGS = new String[] { \"author\", \"deprecated\", \"exception\", \"hidden\", \"param\", \"provides\", \"return\", \"see\", \"serial\", \"serialData\", \"serialField\", \"since\", \"throws\", \"uses\", \"version\" };\n     }\n }\n"}]}
