{"diffoscope-json-version": 1, "source1": "first/ExecutableStatementCountCheck.class", "source2": "second/ExecutableStatementCountCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -34,59 +34,59 @@\n         return new int[] { 8, 9, 11, 12, 7, 203, 181 };\n     }\n     \n     public void setMax(final int max) {\n         this.max = max;\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         this.context = new ExecutableStatementCountCheck.Context((DetailAST)null);\n         this.contextStack.clear();\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (isContainerNode(ast)) {\n-            this.visitContainerNode(ast);\n+    public void visitToken(final DetailAST detailAST) {\n+        if (isContainerNode(detailAST)) {\n+            this.visitContainerNode(detailAST);\n         }\n         else {\n-            if (!TokenUtil.isOfType(ast, new int[] { 7 })) {\n-                throw new IllegalStateException(ast.toString());\n+            if (!TokenUtil.isOfType(detailAST, new int[] { 7 })) {\n+                throw new IllegalStateException(detailAST.toString());\n             }\n-            this.visitSlist(ast);\n+            this.visitSlist(detailAST);\n         }\n     }\n     \n-    public void leaveToken(final DetailAST ast) {\n-        if (isContainerNode(ast)) {\n-            this.leaveContainerNode(ast);\n+    public void leaveToken(final DetailAST detailAST) {\n+        if (isContainerNode(detailAST)) {\n+            this.leaveContainerNode(detailAST);\n         }\n-        else if (!TokenUtil.isOfType(ast, new int[] { 7 })) {\n-            throw new IllegalStateException(ast.toString());\n+        else if (!TokenUtil.isOfType(detailAST, new int[] { 7 })) {\n+            throw new IllegalStateException(detailAST.toString());\n         }\n     }\n     \n-    private void visitContainerNode(final DetailAST ast) {\n+    private void visitContainerNode(final DetailAST detailAST) {\n         this.contextStack.push(this.context);\n-        this.context = new ExecutableStatementCountCheck.Context(ast);\n+        this.context = new ExecutableStatementCountCheck.Context(detailAST);\n     }\n     \n-    private void leaveContainerNode(final DetailAST ast) {\n+    private void leaveContainerNode(final DetailAST detailAST) {\n         final int count = this.context.getCount();\n         if (count > this.max) {\n-            this.log(ast, \"executableStatementCount\", new Object[] { Integer.valueOf(count), Integer.valueOf(this.max) });\n+            this.log(detailAST, \"executableStatementCount\", new Object[] { Integer.valueOf(count), Integer.valueOf(this.max) });\n         }\n         this.context = this.contextStack.pop();\n     }\n     \n-    private void visitSlist(final DetailAST ast) {\n-        final DetailAST contextAST = this.context.getAST();\n+    private void visitSlist(final DetailAST detailAST) {\n+        final DetailAST ast = this.context.getAST();\n         DetailAST parent;\n-        for (parent = ast; parent != null && !isContainerNode(parent); parent = parent.getParent()) {}\n-        if (parent == contextAST) {\n-            this.context.addCount(ast.getChildCount() / 2);\n+        for (parent = detailAST; parent != null && !isContainerNode(parent); parent = parent.getParent()) {}\n+        if (parent == ast) {\n+            this.context.addCount(detailAST.getChildCount() / 2);\n         }\n     }\n     \n-    private static boolean isContainerNode(final DetailAST node) {\n-        return TokenUtil.isOfType(node, new int[] { 9, 181, 8, 11, 12, 203 });\n+    private static boolean isContainerNode(final DetailAST detailAST) {\n+        return TokenUtil.isOfType(detailAST, new int[] { 9, 181, 8, 11, 12, 203 });\n     }\n }\n"}]}
