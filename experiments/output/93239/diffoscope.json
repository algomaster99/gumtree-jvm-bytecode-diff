{"diffoscope-json-version": 1, "source1": "first/DesignForExtensionCheck.class", "source2": "second/DesignForExtensionCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -98,30 +98,30 @@\n         return mods.findFirstToken(66) != null;\n     }\n     \n     private static boolean hasEmptyImplementation(final DetailAST ast) {\n         boolean hasEmptyBody = true;\n         final DetailAST methodImplOpenBrace = ast.findFirstToken(7);\n         final DetailAST methodImplCloseBrace = methodImplOpenBrace.getLastChild();\n-        final Predicate<DetailAST> predicate = currentNode -> currentNode != methodImplCloseBrace && !TokenUtil.isCommentType(currentNode.getType());\n+        final Predicate<DetailAST> predicate = currentNode -> currentNode != detailAST && !TokenUtil.isCommentType(currentNode.getType());\n         final Optional<DetailAST> methodBody = TokenUtil.findFirstTokenByPredicate(methodImplOpenBrace, (Predicate)predicate);\n         if (methodBody.isPresent()) {\n             hasEmptyBody = false;\n         }\n         return hasEmptyBody;\n     }\n     \n     private static boolean canBeOverridden(final DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(5);\n         return ScopeUtil.getSurroundingScope(methodDef).isIn(Scope.PROTECTED) && !ScopeUtil.isInInterfaceOrAnnotationBlock(methodDef) && modifiers.findFirstToken(61) == null && modifiers.findFirstToken(40) == null && modifiers.findFirstToken(39) == null && modifiers.findFirstToken(64) == null;\n     }\n     \n     private static boolean hasIgnoredAnnotation(final DetailAST methodDef, final Set<String> annotations) {\n         final DetailAST modifiers = methodDef.findFirstToken(5);\n-        final Optional<DetailAST> annotation = TokenUtil.findFirstTokenByPredicate(modifiers, currentToken -> currentToken.getType() == 159 && annotations.contains(getAnnotationName(currentToken)));\n+        final Optional<DetailAST> annotation = TokenUtil.findFirstTokenByPredicate(modifiers, currentToken -> currentToken.getType() == 159 && set.contains(getAnnotationName(currentToken)));\n         return annotation.isPresent();\n     }\n     \n     private static String getAnnotationName(final DetailAST annotation) {\n         final DetailAST dotAst = annotation.findFirstToken(59);\n         final DetailAST parent = (DetailAST)Objects.requireNonNullElse(dotAst, annotation);\n         return parent.findFirstToken(58).getText();\n"}]}
