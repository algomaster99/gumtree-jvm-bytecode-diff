{"diffoscope-json-version": 1, "source1": "first/InflaterInputStreamWithStatistics.class", "source2": "second/InflaterInputStreamWithStatistics.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,77 +1,77 @@\n-  SHA-256 checksum 2f79ab886e62e065c1f4fdab11dcf9e3167de642339fe26b5b0c2194f1a19837\n+  SHA-256 checksum b9247c8041310b1f4c938c0ef266b9af65f0c8760c86c3736911b141ca129b3e\n   Compiled from \"InflaterInputStreamWithStatistics.java\"\n class org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics extends java.util.zip.InflaterInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n-  this_class: #18                         // org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics\n-  super_class: #2                         // java/util/zip/InflaterInputStream\n+  this_class: #1                          // org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics\n+  super_class: #3                         // java/util/zip/InflaterInputStream\n   interfaces: 1, fields: 2, methods: 8, attributes: 1\n Constant pool:\n-   #1 = Methodref          #2.#3          // java/util/zip/InflaterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #2 = Class              #4             // java/util/zip/InflaterInputStream\n-   #3 = NameAndType        #5:#6          // \"<init>\":(Ljava/io/InputStream;)V\n+   #1 = Class              #2             // org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics\n+   #2 = Utf8               org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics\n+   #3 = Class              #4             // java/util/zip/InflaterInputStream\n    #4 = Utf8               java/util/zip/InflaterInputStream\n-   #5 = Utf8               <init>\n-   #6 = Utf8               (Ljava/io/InputStream;)V\n-   #7 = Methodref          #2.#8          // java/util/zip/InflaterInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/util/zip/Inflater;)V\n-   #8 = NameAndType        #5:#9          // \"<init>\":(Ljava/io/InputStream;Ljava/util/zip/Inflater;)V\n-   #9 = Utf8               (Ljava/io/InputStream;Ljava/util/zip/Inflater;)V\n-  #10 = Methodref          #2.#11         // java/util/zip/InflaterInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/util/zip/Inflater;I)V\n-  #11 = NameAndType        #5:#12         // \"<init>\":(Ljava/io/InputStream;Ljava/util/zip/Inflater;I)V\n-  #12 = Utf8               (Ljava/io/InputStream;Ljava/util/zip/Inflater;I)V\n-  #13 = Methodref          #2.#14         // java/util/zip/InflaterInputStream.fill:()V\n-  #14 = NameAndType        #15:#16        // fill:()V\n-  #15 = Utf8               fill\n-  #16 = Utf8               ()V\n-  #17 = Fieldref           #18.#19        // org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics.compressedCount:J\n-  #18 = Class              #20            // org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics\n-  #19 = NameAndType        #21:#22        // compressedCount:J\n-  #20 = Utf8               org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics\n-  #21 = Utf8               compressedCount\n-  #22 = Utf8               J\n-  #23 = Fieldref           #18.#24        // org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics.inf:Ljava/util/zip/Inflater;\n-  #24 = NameAndType        #25:#26        // inf:Ljava/util/zip/Inflater;\n-  #25 = Utf8               inf\n-  #26 = Utf8               Ljava/util/zip/Inflater;\n-  #27 = Methodref          #28.#29        // java/util/zip/Inflater.getRemaining:()I\n-  #28 = Class              #30            // java/util/zip/Inflater\n-  #29 = NameAndType        #31:#32        // getRemaining:()I\n-  #30 = Utf8               java/util/zip/Inflater\n-  #31 = Utf8               getRemaining\n-  #32 = Utf8               ()I\n-  #33 = Fieldref           #18.#34        // org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics.uncompressedCount:J\n-  #34 = NameAndType        #35:#22        // uncompressedCount:J\n-  #35 = Utf8               uncompressedCount\n-  #36 = Methodref          #2.#37         // java/util/zip/InflaterInputStream.read:()I\n-  #37 = NameAndType        #38:#32        // read:()I\n-  #38 = Utf8               read\n-  #39 = Methodref          #2.#40         // java/util/zip/InflaterInputStream.read:([BII)I\n-  #40 = NameAndType        #38:#41        // read:([BII)I\n-  #41 = Utf8               ([BII)I\n-  #42 = Class              #43            // org/apache/commons/compress/utils/InputStreamStatistics\n-  #43 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #44 = Utf8               Code\n-  #45 = Utf8               LineNumberTable\n-  #46 = Utf8               LocalVariableTable\n-  #47 = Utf8               this\n-  #48 = Utf8               Lorg/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics;\n-  #49 = Utf8               in\n-  #50 = Utf8               Ljava/io/InputStream;\n-  #51 = Utf8               size\n-  #52 = Utf8               I\n-  #53 = Utf8               Exceptions\n-  #54 = Class              #55            // java/io/IOException\n-  #55 = Utf8               java/io/IOException\n-  #56 = Utf8               getCompressedCount\n-  #57 = Utf8               ()J\n-  #58 = Utf8               getUncompressedCount\n-  #59 = Utf8               b\n-  #60 = Utf8               StackMapTable\n+   #5 = Class              #6             // org/apache/commons/compress/utils/InputStreamStatistics\n+   #6 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+   #7 = Utf8               compressedCount\n+   #8 = Utf8               J\n+   #9 = Utf8               uncompressedCount\n+  #10 = Utf8               <init>\n+  #11 = Utf8               (Ljava/io/InputStream;)V\n+  #12 = Utf8               Code\n+  #13 = Methodref          #3.#14         // java/util/zip/InflaterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #14 = NameAndType        #10:#11        // \"<init>\":(Ljava/io/InputStream;)V\n+  #15 = Utf8               LineNumberTable\n+  #16 = Utf8               LocalVariableTable\n+  #17 = Utf8               this\n+  #18 = Utf8               Lorg/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics;\n+  #19 = Utf8               in\n+  #20 = Utf8               Ljava/io/InputStream;\n+  #21 = Utf8               (Ljava/io/InputStream;Ljava/util/zip/Inflater;)V\n+  #22 = Methodref          #3.#23         // java/util/zip/InflaterInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/util/zip/Inflater;)V\n+  #23 = NameAndType        #10:#21        // \"<init>\":(Ljava/io/InputStream;Ljava/util/zip/Inflater;)V\n+  #24 = Utf8               inf\n+  #25 = Utf8               Ljava/util/zip/Inflater;\n+  #26 = Utf8               (Ljava/io/InputStream;Ljava/util/zip/Inflater;I)V\n+  #27 = Methodref          #3.#28         // java/util/zip/InflaterInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/util/zip/Inflater;I)V\n+  #28 = NameAndType        #10:#26        // \"<init>\":(Ljava/io/InputStream;Ljava/util/zip/Inflater;I)V\n+  #29 = Utf8               size\n+  #30 = Utf8               I\n+  #31 = Utf8               fill\n+  #32 = Utf8               ()V\n+  #33 = Utf8               Exceptions\n+  #34 = Class              #35            // java/io/IOException\n+  #35 = Utf8               java/io/IOException\n+  #36 = Methodref          #3.#37         // java/util/zip/InflaterInputStream.fill:()V\n+  #37 = NameAndType        #31:#32        // fill:()V\n+  #38 = Fieldref           #1.#39         // org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics.compressedCount:J\n+  #39 = NameAndType        #7:#8          // compressedCount:J\n+  #40 = Fieldref           #1.#41         // org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics.inf:Ljava/util/zip/Inflater;\n+  #41 = NameAndType        #24:#25        // inf:Ljava/util/zip/Inflater;\n+  #42 = Methodref          #43.#45        // java/util/zip/Inflater.getRemaining:()I\n+  #43 = Class              #44            // java/util/zip/Inflater\n+  #44 = Utf8               java/util/zip/Inflater\n+  #45 = NameAndType        #46:#47        // getRemaining:()I\n+  #46 = Utf8               getRemaining\n+  #47 = Utf8               ()I\n+  #48 = Utf8               getCompressedCount\n+  #49 = Utf8               ()J\n+  #50 = Utf8               getUncompressedCount\n+  #51 = Fieldref           #1.#52         // org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics.uncompressedCount:J\n+  #52 = NameAndType        #9:#8          // uncompressedCount:J\n+  #53 = Utf8               read\n+  #54 = Methodref          #3.#55         // java/util/zip/InflaterInputStream.read:()I\n+  #55 = NameAndType        #53:#47        // read:()I\n+  #56 = Utf8               b\n+  #57 = Utf8               StackMapTable\n+  #58 = Utf8               ([BII)I\n+  #59 = Methodref          #3.#60         // java/util/zip/InflaterInputStream.read:([BII)I\n+  #60 = NameAndType        #53:#58        // read:([BII)I\n   #61 = Utf8               [B\n   #62 = Utf8               off\n   #63 = Utf8               len\n   #64 = Utf8               bytes\n   #65 = Utf8               SourceFile\n   #66 = Utf8               InflaterInputStreamWithStatistics.java\n {\n@@ -86,15 +86,15 @@\n   public org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics(java.io.InputStream);\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #1                  // Method java/util/zip/InflaterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+         2: invokespecial #13                 // Method java/util/zip/InflaterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n          5: return\n       LineNumberTable:\n         line 39: 0\n         line 40: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics;\n@@ -104,15 +104,15 @@\n     descriptor: (Ljava/io/InputStream;Ljava/util/zip/Inflater;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n-         3: invokespecial #7                  // Method java/util/zip/InflaterInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/util/zip/Inflater;)V\n+         3: invokespecial #22                 // Method java/util/zip/InflaterInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/util/zip/Inflater;)V\n          6: return\n       LineNumberTable:\n         line 43: 0\n         line 44: 6\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lorg/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics;\n@@ -124,98 +124,100 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: iload_3\n-         4: invokespecial #10                 // Method java/util/zip/InflaterInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/util/zip/Inflater;I)V\n+         4: invokespecial #27                 // Method java/util/zip/InflaterInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/util/zip/Inflater;I)V\n          7: return\n       LineNumberTable:\n         line 47: 0\n         line 48: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics;\n             0       8     1    in   Ljava/io/InputStream;\n             0       8     2   inf   Ljava/util/zip/Inflater;\n             0       8     3  size   I\n \n   protected void fill() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0004) ACC_PROTECTED\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #13                 // Method java/util/zip/InflaterInputStream.fill:()V\n+         1: invokespecial #36                 // Method java/util/zip/InflaterInputStream.fill:()V\n          4: aload_0\n          5: dup\n-         6: getfield      #17                 // Field compressedCount:J\n+         6: getfield      #38                 // Field compressedCount:J\n          9: aload_0\n-        10: getfield      #23                 // Field inf:Ljava/util/zip/Inflater;\n-        13: invokevirtual #27                 // Method java/util/zip/Inflater.getRemaining:()I\n+        10: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+        13: invokevirtual #42                 // Method java/util/zip/Inflater.getRemaining:()I\n         16: i2l\n         17: ladd\n-        18: putfield      #17                 // Field compressedCount:J\n+        18: putfield      #38                 // Field compressedCount:J\n         21: return\n       LineNumberTable:\n         line 52: 0\n         line 53: 4\n         line 54: 21\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      22     0  this   Lorg/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #17                 // Field compressedCount:J\n+         1: getfield      #38                 // Field compressedCount:J\n          4: lreturn\n       LineNumberTable:\n         line 58: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics;\n \n   public long getUncompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #33                 // Field uncompressedCount:J\n+         1: getfield      #51                 // Field uncompressedCount:J\n          4: lreturn\n       LineNumberTable:\n         line 63: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics;\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #36                 // Method java/util/zip/InflaterInputStream.read:()I\n+         1: invokespecial #54                 // Method java/util/zip/InflaterInputStream.read:()I\n          4: istore_1\n          5: iload_1\n          6: iconst_m1\n          7: if_icmple     20\n         10: aload_0\n         11: dup\n-        12: getfield      #33                 // Field uncompressedCount:J\n+        12: getfield      #51                 // Field uncompressedCount:J\n         15: lconst_1\n         16: ladd\n-        17: putfield      #33                 // Field uncompressedCount:J\n+        17: putfield      #51                 // Field uncompressedCount:J\n         20: iload_1\n         21: ireturn\n       LineNumberTable:\n         line 68: 0\n         line 69: 5\n         line 70: 10\n         line 72: 20\n@@ -223,38 +225,38 @@\n         Start  Length  Slot  Name   Signature\n             0      22     0  this   Lorg/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics;\n             5      17     1     b   I\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 20\n           locals = [ int ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int read(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=5, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: invokespecial #39                 // Method java/util/zip/InflaterInputStream.read:([BII)I\n+         4: invokespecial #59                 // Method java/util/zip/InflaterInputStream.read:([BII)I\n          7: istore        4\n          9: iload         4\n         11: iconst_m1\n         12: if_icmple     27\n         15: aload_0\n         16: dup\n-        17: getfield      #33                 // Field uncompressedCount:J\n+        17: getfield      #51                 // Field uncompressedCount:J\n         20: iload         4\n         22: i2l\n         23: ladd\n-        24: putfield      #33                 // Field uncompressedCount:J\n+        24: putfield      #51                 // Field uncompressedCount:J\n         27: iload         4\n         29: ireturn\n       LineNumberTable:\n         line 77: 0\n         line 78: 9\n         line 79: 15\n         line 81: 27\n@@ -265,11 +267,9 @@\n             0      30     2   off   I\n             0      30     3   len   I\n             9      21     4 bytes   I\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 27\n           locals = [ int ]\n-    Exceptions:\n-      throws java.io.IOException\n }\n SourceFile: \"InflaterInputStreamWithStatistics.java\"\n"}]}
