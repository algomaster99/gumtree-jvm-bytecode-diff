{"diffoscope-json-version": 1, "source1": "first/JavaUnicodeEscaper.class", "source2": "second/JavaUnicodeEscaper.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,31 +1,31 @@\n \n package org.apache.commons.lang3.text.translate;\n \n @Deprecated\n public class JavaUnicodeEscaper extends UnicodeEscaper\n {\n-    public static JavaUnicodeEscaper above(final int codepoint) {\n-        return outsideOf(0, codepoint);\n+    public static JavaUnicodeEscaper above(final int n) {\n+        return outsideOf(0, n);\n     }\n     \n-    public static JavaUnicodeEscaper below(final int codepoint) {\n-        return outsideOf(codepoint, Integer.MAX_VALUE);\n+    public static JavaUnicodeEscaper below(final int n) {\n+        return outsideOf(n, Integer.MAX_VALUE);\n     }\n     \n-    public static JavaUnicodeEscaper between(final int codepointLow, final int codepointHigh) {\n-        return new JavaUnicodeEscaper(codepointLow, codepointHigh, true);\n+    public static JavaUnicodeEscaper between(final int n, final int n2) {\n+        return new JavaUnicodeEscaper(n, n2, true);\n     }\n     \n-    public static JavaUnicodeEscaper outsideOf(final int codepointLow, final int codepointHigh) {\n-        return new JavaUnicodeEscaper(codepointLow, codepointHigh, false);\n+    public static JavaUnicodeEscaper outsideOf(final int n, final int n2) {\n+        return new JavaUnicodeEscaper(n, n2, false);\n     }\n     \n-    public JavaUnicodeEscaper(final int below, final int above, final boolean between) {\n-        super(below, above, between);\n+    public JavaUnicodeEscaper(final int n, final int n2, final boolean b) {\n+        super(n, n2, b);\n     }\n     \n-    protected String toUtf16Escape(final int codepoint) {\n-        final char[] surrogatePair = Character.toChars(codepoint);\n-        return \"\\\\u\" + hex((int)surrogatePair[0]) + \"\\\\u\" + hex((int)surrogatePair[1]);\n+    protected String toUtf16Escape(final int codePoint) {\n+        final char[] chars = Character.toChars(codePoint);\n+        return \"\\\\u\" + hex((int)chars[0]) + \"\\\\u\" + hex((int)chars[1]);\n     }\n }\n"}]}
