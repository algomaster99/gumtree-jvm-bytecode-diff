{"diffoscope-json-version": 1, "source1": "first/WriterOutputStream.class", "source2": "second/WriterOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,72 +1,72 @@\n-  SHA-256 checksum a3421b865358a017cdbf9dadc4e1f8fa5d09bb42a4233997ef94e7ef761cbed2\n+  SHA-256 checksum 68fa5103a29bbdfaa5aebe39d470c40ccfc9a2ee44668eb99659dcc6f1a134bd\n   Compiled from \"WriterOutputStream.java\"\n public class org.apache.commons.io.output.WriterOutputStream extends java.io.OutputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #1                          // org/apache/commons/io/output/WriterOutputStream\n   super_class: #55                        // java/io/OutputStream\n   interfaces: 0, fields: 6, methods: 15, attributes: 1\n Constant pool:\n-    #1 = Class              #131          // org/apache/commons/io/output/WriterOutputStream\n-    #2 = Methodref          #1.#132       // org/apache/commons/io/output/WriterOutputStream.\"<init>\":(Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;IZ)V\n-    #3 = Methodref          #55.#133      // java/io/OutputStream.\"<init>\":()V\n-    #4 = Methodref          #134.#135     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-    #5 = Fieldref           #1.#136       // org/apache/commons/io/output/WriterOutputStream.decoderIn:Ljava/nio/ByteBuffer;\n-    #6 = Methodref          #137.#138     // java/nio/charset/CharsetDecoder.charset:()Ljava/nio/charset/Charset;\n-    #7 = Methodref          #1.#139       // org/apache/commons/io/output/WriterOutputStream.checkIbmJdkWithBrokenUTF16:(Ljava/nio/charset/Charset;)V\n-    #8 = Fieldref           #1.#140       // org/apache/commons/io/output/WriterOutputStream.writer:Ljava/io/Writer;\n-    #9 = Fieldref           #1.#141       // org/apache/commons/io/output/WriterOutputStream.decoder:Ljava/nio/charset/CharsetDecoder;\n-   #10 = Fieldref           #1.#142       // org/apache/commons/io/output/WriterOutputStream.writeImmediately:Z\n-   #11 = Methodref          #143.#144     // java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;\n-   #12 = Fieldref           #1.#145       // org/apache/commons/io/output/WriterOutputStream.decoderOut:Ljava/nio/CharBuffer;\n-   #13 = Methodref          #146.#147     // java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n-   #14 = Fieldref           #148.#149     // java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n-   #15 = Methodref          #137.#150     // java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-   #16 = Methodref          #137.#151     // java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-   #17 = String             #152          // ?\n-   #18 = Methodref          #137.#153     // java/nio/charset/CharsetDecoder.replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n-   #19 = Methodref          #1.#154       // org/apache/commons/io/output/WriterOutputStream.\"<init>\":(Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n-   #20 = Methodref          #146.#155     // java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n-   #21 = Methodref          #1.#156       // org/apache/commons/io/output/WriterOutputStream.\"<init>\":(Ljava/io/Writer;Ljava/lang/String;IZ)V\n-   #22 = Methodref          #146.#157     // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n-   #23 = Methodref          #134.#158     // java/nio/ByteBuffer.remaining:()I\n-   #24 = Methodref          #159.#160     // java/lang/Math.min:(II)I\n-   #25 = Methodref          #134.#161     // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n-   #26 = Methodref          #1.#162       // org/apache/commons/io/output/WriterOutputStream.processInput:(Z)V\n-   #27 = Methodref          #1.#163       // org/apache/commons/io/output/WriterOutputStream.flushOutput:()V\n-   #28 = Methodref          #1.#164       // org/apache/commons/io/output/WriterOutputStream.write:([BII)V\n-   #29 = Methodref          #165.#166     // java/io/Writer.flush:()V\n-   #30 = Methodref          #165.#167     // java/io/Writer.close:()V\n-   #31 = Methodref          #134.#168     // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n-   #32 = Methodref          #137.#169     // java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;\n-   #33 = Methodref          #170.#171     // java/nio/charset/CoderResult.isOverflow:()Z\n-   #34 = Methodref          #170.#172     // java/nio/charset/CoderResult.isUnderflow:()Z\n-   #35 = Class              #173          // java/io/IOException\n-   #36 = String             #174          // Unexpected coder result\n-   #37 = Methodref          #35.#175      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #38 = Methodref          #134.#176     // java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;\n-   #39 = Methodref          #143.#177     // java/nio/CharBuffer.position:()I\n-   #40 = Methodref          #143.#178     // java/nio/CharBuffer.array:()[C\n-   #41 = Methodref          #165.#179     // java/io/Writer.write:([CII)V\n-   #42 = Methodref          #143.#180     // java/nio/CharBuffer.rewind:()Ljava/nio/Buffer;\n-   #43 = String             #181          // UTF-16\n-   #44 = Methodref          #146.#182     // java/nio/charset/Charset.name:()Ljava/lang/String;\n-   #45 = Methodref          #183.#184     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #46 = String             #185          // v\u00e9s\n-   #47 = Methodref          #183.#186     // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-   #48 = Methodref          #183.#187     // java/lang/String.length:()I\n-   #49 = Methodref          #134.#188     // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n-   #50 = Class              #189          // java/lang/IllegalArgumentException\n-   #51 = Class              #190          // java/lang/UnsupportedOperationException\n-   #52 = String             #191          // UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream\n-   #53 = Methodref          #51.#175      // java/lang/UnsupportedOperationException.\"<init>\":(Ljava/lang/String;)V\n-   #54 = Methodref          #143.#192     // java/nio/CharBuffer.toString:()Ljava/lang/String;\n-   #55 = Class              #193          // java/io/OutputStream\n+    #1 = Class              #130          // org/apache/commons/io/output/WriterOutputStream\n+    #2 = Methodref          #1.#131       // org/apache/commons/io/output/WriterOutputStream.\"<init>\":(Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;IZ)V\n+    #3 = Methodref          #55.#132      // java/io/OutputStream.\"<init>\":()V\n+    #4 = Methodref          #126.#133     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+    #5 = Fieldref           #1.#134       // org/apache/commons/io/output/WriterOutputStream.decoderIn:Ljava/nio/ByteBuffer;\n+    #6 = Methodref          #125.#135     // java/nio/charset/CharsetDecoder.charset:()Ljava/nio/charset/Charset;\n+    #7 = Methodref          #1.#136       // org/apache/commons/io/output/WriterOutputStream.checkIbmJdkWithBrokenUTF16:(Ljava/nio/charset/Charset;)V\n+    #8 = Fieldref           #1.#137       // org/apache/commons/io/output/WriterOutputStream.writer:Ljava/io/Writer;\n+    #9 = Fieldref           #1.#138       // org/apache/commons/io/output/WriterOutputStream.decoder:Ljava/nio/charset/CharsetDecoder;\n+   #10 = Fieldref           #1.#139       // org/apache/commons/io/output/WriterOutputStream.writeImmediately:Z\n+   #11 = Methodref          #127.#140     // java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;\n+   #12 = Fieldref           #1.#141       // org/apache/commons/io/output/WriterOutputStream.decoderOut:Ljava/nio/CharBuffer;\n+   #13 = Methodref          #122.#142     // java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n+   #14 = Fieldref           #143.#144     // java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n+   #15 = Methodref          #125.#145     // java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+   #16 = Methodref          #125.#146     // java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+   #17 = String             #147          // ?\n+   #18 = Methodref          #125.#148     // java/nio/charset/CharsetDecoder.replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n+   #19 = Methodref          #1.#149       // org/apache/commons/io/output/WriterOutputStream.\"<init>\":(Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n+   #20 = Methodref          #122.#150     // java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n+   #21 = Methodref          #1.#151       // org/apache/commons/io/output/WriterOutputStream.\"<init>\":(Ljava/io/Writer;Ljava/lang/String;IZ)V\n+   #22 = Methodref          #122.#152     // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+   #23 = Methodref          #126.#153     // java/nio/ByteBuffer.remaining:()I\n+   #24 = Methodref          #154.#155     // java/lang/Math.min:(II)I\n+   #25 = Methodref          #126.#156     // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n+   #26 = Methodref          #1.#157       // org/apache/commons/io/output/WriterOutputStream.processInput:(Z)V\n+   #27 = Methodref          #1.#158       // org/apache/commons/io/output/WriterOutputStream.flushOutput:()V\n+   #28 = Methodref          #1.#159       // org/apache/commons/io/output/WriterOutputStream.write:([BII)V\n+   #29 = Methodref          #160.#161     // java/io/Writer.flush:()V\n+   #30 = Methodref          #160.#162     // java/io/Writer.close:()V\n+   #31 = Methodref          #126.#163     // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+   #32 = Methodref          #125.#164     // java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;\n+   #33 = Methodref          #110.#165     // java/nio/charset/CoderResult.isOverflow:()Z\n+   #34 = Methodref          #110.#166     // java/nio/charset/CoderResult.isUnderflow:()Z\n+   #35 = Class              #167          // java/io/IOException\n+   #36 = String             #168          // Unexpected coder result\n+   #37 = Methodref          #35.#169      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #38 = Methodref          #126.#170     // java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;\n+   #39 = Methodref          #127.#171     // java/nio/CharBuffer.position:()I\n+   #40 = Methodref          #127.#172     // java/nio/CharBuffer.array:()[C\n+   #41 = Methodref          #160.#173     // java/io/Writer.write:([CII)V\n+   #42 = Methodref          #127.#174     // java/nio/CharBuffer.rewind:()Ljava/nio/CharBuffer;\n+   #43 = String             #175          // UTF-16\n+   #44 = Methodref          #122.#176     // java/nio/charset/Charset.name:()Ljava/lang/String;\n+   #45 = Methodref          #123.#177     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #46 = String             #178          // v\u00e9s\n+   #47 = Methodref          #123.#179     // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+   #48 = Methodref          #123.#180     // java/lang/String.length:()I\n+   #49 = Methodref          #126.#181     // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+   #50 = Class              #182          // java/lang/IllegalArgumentException\n+   #51 = Class              #183          // java/lang/UnsupportedOperationException\n+   #52 = String             #184          // UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream\n+   #53 = Methodref          #51.#169      // java/lang/UnsupportedOperationException.\"<init>\":(Ljava/lang/String;)V\n+   #54 = Methodref          #127.#185     // java/nio/CharBuffer.toString:()Ljava/lang/String;\n+   #55 = Class              #186          // java/io/OutputStream\n    #56 = Utf8               BUFFER_SIZE\n    #57 = Utf8               I\n    #58 = Utf8               ConstantValue\n    #59 = Integer            1024\n    #60 = Utf8               writer\n    #61 = Utf8               Ljava/io/Writer;\n    #62 = Utf8               decoder\n@@ -113,153 +113,146 @@\n   #103 = Utf8               ()V\n   #104 = Utf8               close\n   #105 = Utf8               processInput\n   #106 = Utf8               (Z)V\n   #107 = Utf8               endOfInput\n   #108 = Utf8               coderResult\n   #109 = Utf8               Ljava/nio/charset/CoderResult;\n-  #110 = Class              #194          // java/nio/charset/CoderResult\n+  #110 = Class              #187          // java/nio/charset/CoderResult\n   #111 = Utf8               flushOutput\n   #112 = Utf8               checkIbmJdkWithBrokenUTF16\n   #113 = Utf8               (Ljava/nio/charset/Charset;)V\n   #114 = Utf8               e\n   #115 = Utf8               Ljava/lang/IllegalArgumentException;\n   #116 = Utf8               i\n   #117 = Utf8               TEST_STRING_2\n   #118 = Utf8               bytes\n   #119 = Utf8               charsetDecoder2\n   #120 = Utf8               bb2\n   #121 = Utf8               cb2\n-  #122 = Class              #195          // java/nio/charset/Charset\n-  #123 = Class              #196          // java/lang/String\n+  #122 = Class              #188          // java/nio/charset/Charset\n+  #123 = Class              #189          // java/lang/String\n   #124 = Class              #95           // \"[B\"\n-  #125 = Class              #197          // java/nio/charset/CharsetDecoder\n-  #126 = Class              #198          // java/nio/ByteBuffer\n-  #127 = Class              #199          // java/nio/CharBuffer\n-  #128 = Class              #189          // java/lang/IllegalArgumentException\n-  #129 = Utf8               SourceFile\n-  #130 = Utf8               WriterOutputStream.java\n-  #131 = Utf8               org/apache/commons/io/output/WriterOutputStream\n-  #132 = NameAndType        #70:#77       // \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;IZ)V\n-  #133 = NameAndType        #70:#103      // \"<init>\":()V\n-  #134 = Class              #198          // java/nio/ByteBuffer\n-  #135 = NameAndType        #200:#201     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #136 = NameAndType        #66:#67       // decoderIn:Ljava/nio/ByteBuffer;\n-  #137 = Class              #197          // java/nio/charset/CharsetDecoder\n-  #138 = NameAndType        #80:#202      // charset:()Ljava/nio/charset/Charset;\n-  #139 = NameAndType        #112:#113     // checkIbmJdkWithBrokenUTF16:(Ljava/nio/charset/Charset;)V\n-  #140 = NameAndType        #60:#61       // writer:Ljava/io/Writer;\n-  #141 = NameAndType        #62:#63       // decoder:Ljava/nio/charset/CharsetDecoder;\n-  #142 = NameAndType        #64:#65       // writeImmediately:Z\n-  #143 = Class              #199          // java/nio/CharBuffer\n-  #144 = NameAndType        #200:#203     // allocate:(I)Ljava/nio/CharBuffer;\n-  #145 = NameAndType        #68:#69       // decoderOut:Ljava/nio/CharBuffer;\n-  #146 = Class              #195          // java/nio/charset/Charset\n-  #147 = NameAndType        #204:#205     // newDecoder:()Ljava/nio/charset/CharsetDecoder;\n-  #148 = Class              #206          // java/nio/charset/CodingErrorAction\n-  #149 = NameAndType        #207:#208     // REPLACE:Ljava/nio/charset/CodingErrorAction;\n-  #150 = NameAndType        #209:#210     // onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-  #151 = NameAndType        #211:#210     // onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-  #152 = Utf8               ?\n-  #153 = NameAndType        #212:#213     // replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n-  #154 = NameAndType        #70:#79       // \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n-  #155 = NameAndType        #214:#215     // forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n-  #156 = NameAndType        #70:#83       // \"<init>\":(Ljava/io/Writer;Ljava/lang/String;IZ)V\n-  #157 = NameAndType        #216:#202     // defaultCharset:()Ljava/nio/charset/Charset;\n-  #158 = NameAndType        #217:#218     // remaining:()I\n-  #159 = Class              #219          // java/lang/Math\n-  #160 = NameAndType        #220:#221     // min:(II)I\n-  #161 = NameAndType        #222:#223     // put:([BII)Ljava/nio/ByteBuffer;\n-  #162 = NameAndType        #105:#106     // processInput:(Z)V\n-  #163 = NameAndType        #111:#103     // flushOutput:()V\n-  #164 = NameAndType        #91:#92       // write:([BII)V\n-  #165 = Class              #224          // java/io/Writer\n-  #166 = NameAndType        #102:#103     // flush:()V\n-  #167 = NameAndType        #104:#103     // close:()V\n-  #168 = NameAndType        #225:#226     // flip:()Ljava/nio/Buffer;\n-  #169 = NameAndType        #227:#228     // decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;\n-  #170 = Class              #194          // java/nio/charset/CoderResult\n-  #171 = NameAndType        #229:#230     // isOverflow:()Z\n-  #172 = NameAndType        #231:#230     // isUnderflow:()Z\n-  #173 = Utf8               java/io/IOException\n-  #174 = Utf8               Unexpected coder result\n-  #175 = NameAndType        #70:#232      // \"<init>\":(Ljava/lang/String;)V\n-  #176 = NameAndType        #233:#234     // compact:()Ljava/nio/ByteBuffer;\n-  #177 = NameAndType        #235:#218     // position:()I\n-  #178 = NameAndType        #236:#237     // array:()[C\n-  #179 = NameAndType        #91:#238      // write:([CII)V\n-  #180 = NameAndType        #239:#226     // rewind:()Ljava/nio/Buffer;\n-  #181 = Utf8               UTF-16\n-  #182 = NameAndType        #240:#241     // name:()Ljava/lang/String;\n-  #183 = Class              #196          // java/lang/String\n-  #184 = NameAndType        #242:#243     // equals:(Ljava/lang/Object;)Z\n-  #185 = Utf8               v\u00e9s\n-  #186 = NameAndType        #244:#245     // getBytes:(Ljava/nio/charset/Charset;)[B\n-  #187 = NameAndType        #246:#218     // length:()I\n-  #188 = NameAndType        #222:#247     // put:(B)Ljava/nio/ByteBuffer;\n-  #189 = Utf8               java/lang/IllegalArgumentException\n-  #190 = Utf8               java/lang/UnsupportedOperationException\n-  #191 = Utf8               UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream\n-  #192 = NameAndType        #248:#241     // toString:()Ljava/lang/String;\n-  #193 = Utf8               java/io/OutputStream\n-  #194 = Utf8               java/nio/charset/CoderResult\n-  #195 = Utf8               java/nio/charset/Charset\n-  #196 = Utf8               java/lang/String\n-  #197 = Utf8               java/nio/charset/CharsetDecoder\n-  #198 = Utf8               java/nio/ByteBuffer\n-  #199 = Utf8               java/nio/CharBuffer\n-  #200 = Utf8               allocate\n-  #201 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #202 = Utf8               ()Ljava/nio/charset/Charset;\n-  #203 = Utf8               (I)Ljava/nio/CharBuffer;\n-  #204 = Utf8               newDecoder\n-  #205 = Utf8               ()Ljava/nio/charset/CharsetDecoder;\n-  #206 = Utf8               java/nio/charset/CodingErrorAction\n-  #207 = Utf8               REPLACE\n-  #208 = Utf8               Ljava/nio/charset/CodingErrorAction;\n-  #209 = Utf8               onMalformedInput\n-  #210 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-  #211 = Utf8               onUnmappableCharacter\n-  #212 = Utf8               replaceWith\n-  #213 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n-  #214 = Utf8               forName\n-  #215 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/Charset;\n-  #216 = Utf8               defaultCharset\n-  #217 = Utf8               remaining\n-  #218 = Utf8               ()I\n-  #219 = Utf8               java/lang/Math\n-  #220 = Utf8               min\n-  #221 = Utf8               (II)I\n-  #222 = Utf8               put\n-  #223 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #224 = Utf8               java/io/Writer\n-  #225 = Utf8               flip\n-  #226 = Utf8               ()Ljava/nio/Buffer;\n-  #227 = Utf8               decode\n-  #228 = Utf8               (Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;\n-  #229 = Utf8               isOverflow\n-  #230 = Utf8               ()Z\n-  #231 = Utf8               isUnderflow\n-  #232 = Utf8               (Ljava/lang/String;)V\n-  #233 = Utf8               compact\n-  #234 = Utf8               ()Ljava/nio/ByteBuffer;\n-  #235 = Utf8               position\n-  #236 = Utf8               array\n-  #237 = Utf8               ()[C\n-  #238 = Utf8               ([CII)V\n-  #239 = Utf8               rewind\n-  #240 = Utf8               name\n-  #241 = Utf8               ()Ljava/lang/String;\n-  #242 = Utf8               equals\n-  #243 = Utf8               (Ljava/lang/Object;)Z\n-  #244 = Utf8               getBytes\n-  #245 = Utf8               (Ljava/nio/charset/Charset;)[B\n-  #246 = Utf8               length\n-  #247 = Utf8               (B)Ljava/nio/ByteBuffer;\n-  #248 = Utf8               toString\n+  #125 = Class              #190          // java/nio/charset/CharsetDecoder\n+  #126 = Class              #191          // java/nio/ByteBuffer\n+  #127 = Class              #192          // java/nio/CharBuffer\n+  #128 = Utf8               SourceFile\n+  #129 = Utf8               WriterOutputStream.java\n+  #130 = Utf8               org/apache/commons/io/output/WriterOutputStream\n+  #131 = NameAndType        #70:#77       // \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/CharsetDecoder;IZ)V\n+  #132 = NameAndType        #70:#103      // \"<init>\":()V\n+  #133 = NameAndType        #193:#194     // allocate:(I)Ljava/nio/ByteBuffer;\n+  #134 = NameAndType        #66:#67       // decoderIn:Ljava/nio/ByteBuffer;\n+  #135 = NameAndType        #80:#195      // charset:()Ljava/nio/charset/Charset;\n+  #136 = NameAndType        #112:#113     // checkIbmJdkWithBrokenUTF16:(Ljava/nio/charset/Charset;)V\n+  #137 = NameAndType        #60:#61       // writer:Ljava/io/Writer;\n+  #138 = NameAndType        #62:#63       // decoder:Ljava/nio/charset/CharsetDecoder;\n+  #139 = NameAndType        #64:#65       // writeImmediately:Z\n+  #140 = NameAndType        #193:#196     // allocate:(I)Ljava/nio/CharBuffer;\n+  #141 = NameAndType        #68:#69       // decoderOut:Ljava/nio/CharBuffer;\n+  #142 = NameAndType        #197:#198     // newDecoder:()Ljava/nio/charset/CharsetDecoder;\n+  #143 = Class              #199          // java/nio/charset/CodingErrorAction\n+  #144 = NameAndType        #200:#201     // REPLACE:Ljava/nio/charset/CodingErrorAction;\n+  #145 = NameAndType        #202:#203     // onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+  #146 = NameAndType        #204:#203     // onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+  #147 = Utf8               ?\n+  #148 = NameAndType        #205:#206     // replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n+  #149 = NameAndType        #70:#79       // \"<init>\":(Ljava/io/Writer;Ljava/nio/charset/Charset;IZ)V\n+  #150 = NameAndType        #207:#208     // forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n+  #151 = NameAndType        #70:#83       // \"<init>\":(Ljava/io/Writer;Ljava/lang/String;IZ)V\n+  #152 = NameAndType        #209:#195     // defaultCharset:()Ljava/nio/charset/Charset;\n+  #153 = NameAndType        #210:#211     // remaining:()I\n+  #154 = Class              #212          // java/lang/Math\n+  #155 = NameAndType        #213:#214     // min:(II)I\n+  #156 = NameAndType        #215:#216     // put:([BII)Ljava/nio/ByteBuffer;\n+  #157 = NameAndType        #105:#106     // processInput:(Z)V\n+  #158 = NameAndType        #111:#103     // flushOutput:()V\n+  #159 = NameAndType        #91:#92       // write:([BII)V\n+  #160 = Class              #217          // java/io/Writer\n+  #161 = NameAndType        #102:#103     // flush:()V\n+  #162 = NameAndType        #104:#103     // close:()V\n+  #163 = NameAndType        #218:#219     // flip:()Ljava/nio/ByteBuffer;\n+  #164 = NameAndType        #220:#221     // decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;\n+  #165 = NameAndType        #222:#223     // isOverflow:()Z\n+  #166 = NameAndType        #224:#223     // isUnderflow:()Z\n+  #167 = Utf8               java/io/IOException\n+  #168 = Utf8               Unexpected coder result\n+  #169 = NameAndType        #70:#225      // \"<init>\":(Ljava/lang/String;)V\n+  #170 = NameAndType        #226:#219     // compact:()Ljava/nio/ByteBuffer;\n+  #171 = NameAndType        #227:#211     // position:()I\n+  #172 = NameAndType        #228:#229     // array:()[C\n+  #173 = NameAndType        #91:#230      // write:([CII)V\n+  #174 = NameAndType        #231:#232     // rewind:()Ljava/nio/CharBuffer;\n+  #175 = Utf8               UTF-16\n+  #176 = NameAndType        #233:#234     // name:()Ljava/lang/String;\n+  #177 = NameAndType        #235:#236     // equals:(Ljava/lang/Object;)Z\n+  #178 = Utf8               v\u00e9s\n+  #179 = NameAndType        #237:#238     // getBytes:(Ljava/nio/charset/Charset;)[B\n+  #180 = NameAndType        #239:#211     // length:()I\n+  #181 = NameAndType        #215:#240     // put:(B)Ljava/nio/ByteBuffer;\n+  #182 = Utf8               java/lang/IllegalArgumentException\n+  #183 = Utf8               java/lang/UnsupportedOperationException\n+  #184 = Utf8               UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream\n+  #185 = NameAndType        #241:#234     // toString:()Ljava/lang/String;\n+  #186 = Utf8               java/io/OutputStream\n+  #187 = Utf8               java/nio/charset/CoderResult\n+  #188 = Utf8               java/nio/charset/Charset\n+  #189 = Utf8               java/lang/String\n+  #190 = Utf8               java/nio/charset/CharsetDecoder\n+  #191 = Utf8               java/nio/ByteBuffer\n+  #192 = Utf8               java/nio/CharBuffer\n+  #193 = Utf8               allocate\n+  #194 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #195 = Utf8               ()Ljava/nio/charset/Charset;\n+  #196 = Utf8               (I)Ljava/nio/CharBuffer;\n+  #197 = Utf8               newDecoder\n+  #198 = Utf8               ()Ljava/nio/charset/CharsetDecoder;\n+  #199 = Utf8               java/nio/charset/CodingErrorAction\n+  #200 = Utf8               REPLACE\n+  #201 = Utf8               Ljava/nio/charset/CodingErrorAction;\n+  #202 = Utf8               onMalformedInput\n+  #203 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+  #204 = Utf8               onUnmappableCharacter\n+  #205 = Utf8               replaceWith\n+  #206 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n+  #207 = Utf8               forName\n+  #208 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/Charset;\n+  #209 = Utf8               defaultCharset\n+  #210 = Utf8               remaining\n+  #211 = Utf8               ()I\n+  #212 = Utf8               java/lang/Math\n+  #213 = Utf8               min\n+  #214 = Utf8               (II)I\n+  #215 = Utf8               put\n+  #216 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #217 = Utf8               java/io/Writer\n+  #218 = Utf8               flip\n+  #219 = Utf8               ()Ljava/nio/ByteBuffer;\n+  #220 = Utf8               decode\n+  #221 = Utf8               (Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;\n+  #222 = Utf8               isOverflow\n+  #223 = Utf8               ()Z\n+  #224 = Utf8               isUnderflow\n+  #225 = Utf8               (Ljava/lang/String;)V\n+  #226 = Utf8               compact\n+  #227 = Utf8               position\n+  #228 = Utf8               array\n+  #229 = Utf8               ()[C\n+  #230 = Utf8               ([CII)V\n+  #231 = Utf8               rewind\n+  #232 = Utf8               ()Ljava/nio/CharBuffer;\n+  #233 = Utf8               name\n+  #234 = Utf8               ()Ljava/lang/String;\n+  #235 = Utf8               equals\n+  #236 = Utf8               (Ljava/lang/Object;)Z\n+  #237 = Utf8               getBytes\n+  #238 = Utf8               (Ljava/nio/charset/Charset;)[B\n+  #239 = Utf8               length\n+  #240 = Utf8               (B)Ljava/nio/ByteBuffer;\n+  #241 = Utf8               toString\n {\n   private static final int BUFFER_SIZE = 1024;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 1024\n \n   private final java.io.Writer writer;\n@@ -634,15 +627,15 @@\n   private void processInput(boolean) throws java.io.IOException;\n     descriptor: (Z)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=3, args_size=2\n          0: aload_0\n          1: getfield      #5                  // Field decoderIn:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #31                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+         4: invokevirtual #31                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n          7: pop\n          8: aload_0\n          9: getfield      #9                  // Field decoder:Ljava/nio/charset/CharsetDecoder;\n         12: aload_0\n         13: getfield      #5                  // Field decoderIn:Ljava/nio/ByteBuffer;\n         16: aload_0\n         17: getfield      #12                 // Field decoderOut:Ljava/nio/CharBuffer;\n@@ -711,15 +704,15 @@\n         21: iconst_0\n         22: aload_0\n         23: getfield      #12                 // Field decoderOut:Ljava/nio/CharBuffer;\n         26: invokevirtual #39                 // Method java/nio/CharBuffer.position:()I\n         29: invokevirtual #41                 // Method java/io/Writer.write:([CII)V\n         32: aload_0\n         33: getfield      #12                 // Field decoderOut:Ljava/nio/CharBuffer;\n-        36: invokevirtual #42                 // Method java/nio/CharBuffer.rewind:()Ljava/nio/Buffer;\n+        36: invokevirtual #42                 // Method java/nio/CharBuffer.rewind:()Ljava/nio/CharBuffer;\n         39: pop\n         40: return\n       LineNumberTable:\n         line 307: 0\n         line 308: 10\n         line 309: 32\n         line 311: 40\n@@ -769,15 +762,15 @@\n         59: aload         4\n         61: aload_2\n         62: iload         7\n         64: baload\n         65: invokevirtual #49                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n         68: pop\n         69: aload         4\n-        71: invokevirtual #31                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+        71: invokevirtual #31                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         74: pop\n         75: aload_3\n         76: aload         4\n         78: aload         5\n         80: iload         7\n         82: iload         6\n         84: iconst_1\n@@ -797,15 +790,15 @@\n        112: athrow\n        113: aload         4\n        115: invokevirtual #38                 // Method java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;\n        118: pop\n        119: iinc          7, 1\n        122: goto          52\n        125: aload         5\n-       127: invokevirtual #42                 // Method java/nio/CharBuffer.rewind:()Ljava/nio/Buffer;\n+       127: invokevirtual #42                 // Method java/nio/CharBuffer.rewind:()Ljava/nio/CharBuffer;\n        130: pop\n        131: ldc           #46                 // String v\u00e9s\n        133: aload         5\n        135: invokevirtual #54                 // Method java/nio/CharBuffer.toString:()Ljava/lang/String;\n        138: invokevirtual #45                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n        141: ifne          154\n        144: new           #51                 // class java/lang/UnsupportedOperationException\n"}]}
