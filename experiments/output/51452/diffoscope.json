{"diffoscope-json-version": 1, "source1": "first/ParallelScatterZipCreator.class", "source2": "second/ParallelScatterZipCreator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -34,15 +34,15 @@\n     }\n     \n     public ParallelScatterZipCreator() {\n         this(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()));\n     }\n     \n     public ParallelScatterZipCreator(final ExecutorService executorService) {\n-        this(executorService, (ScatterGatherBackingStoreSupplier)new ParallelScatterZipCreator.DefaultBackingStoreSupplier((ParallelScatterZipCreator.ParallelScatterZipCreator$1)null));\n+        this(executorService, (ScatterGatherBackingStoreSupplier)new ParallelScatterZipCreator.DefaultBackingStoreSupplier((ParallelScatterZipCreator.DefaultBackingStoreSupplier)null));\n     }\n     \n     public ParallelScatterZipCreator(final ExecutorService executorService, final ScatterGatherBackingStoreSupplier backingStoreSupplier) {\n         this.streams = Collections.synchronizedList(new ArrayList<ScatterZipOutputStream>());\n         this.futures = new ArrayList<Future<Object>>();\n         this.startedAt = System.currentTimeMillis();\n         this.compressionDoneAt = 0L;\n@@ -84,14 +84,15 @@\n         this.es.awaitTermination(60000L, TimeUnit.SECONDS);\n         this.compressionDoneAt = System.currentTimeMillis();\n         synchronized (this.streams) {\n             for (final ScatterZipOutputStream scatterStream : this.streams) {\n                 scatterStream.writeTo(targetStream);\n                 scatterStream.close();\n             }\n+            monitorexit(this.streams);\n         }\n         this.scatterDoneAt = System.currentTimeMillis();\n     }\n     \n     public ScatterStatistics getStatisticsMessage() {\n         return new ScatterStatistics(this.compressionDoneAt - this.startedAt, this.scatterDoneAt - this.compressionDoneAt);\n     }\n"}]}
