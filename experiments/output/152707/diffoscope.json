{"diffoscope-json-version": 1, "source1": "first/IOCase.class", "source2": "second/IOCase.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,38 +2,38 @@\n package org.apache.commons.io;\n \n import java.util.Objects;\n import java.util.stream.Stream;\n \n public enum IOCase\n {\n-    SENSITIVE(\"Sensitive\", true), \n-    INSENSITIVE(\"Insensitive\", false), \n-    SYSTEM(\"System\", FileSystem.getCurrent().isCaseSensitive());\n+    SENSITIVE(\"SENSITIVE\", 0, \"Sensitive\", true), \n+    INSENSITIVE(\"INSENSITIVE\", 1, \"Insensitive\", false), \n+    SYSTEM(\"SYSTEM\", 2, \"System\", FileSystem.getCurrent().isCaseSensitive());\n     \n     private static final long serialVersionUID = -6343169151696340687L;\n     private final String name;\n     private final transient boolean sensitive;\n     \n     public static IOCase forName(final String name) {\n-        return Stream.of(values()).filter(ioCase -> ioCase.getName().equals(name)).findFirst().orElseThrow(() -> {\n-            new IllegalArgumentException(\"Illegal IOCase name: \" + name);\n+        return Stream.of(values()).filter(ioCase -> ioCase.getName().equals(anObject)).findFirst().orElseThrow(() -> {\n+            new IllegalArgumentException(\"Illegal IOCase name: \" + str);\n             return;\n         });\n     }\n     \n     public static boolean isCaseSensitive(final IOCase ioCase) {\n         return ioCase != null && ioCase.isCaseSensitive();\n     }\n     \n     public static IOCase value(final IOCase value, final IOCase defaultValue) {\n         return (value != null) ? value : defaultValue;\n     }\n     \n-    private IOCase(final String name, final boolean sensitive) {\n+    private IOCase(final String name2, final int ordinal, final String name, final boolean sensitive) {\n         this.name = name;\n         this.sensitive = sensitive;\n     }\n     \n     public int checkCompareTo(final String str1, final String str2) {\n         Objects.requireNonNull(str1, \"str1\");\n         Objects.requireNonNull(str2, \"str2\");\n"}]}
