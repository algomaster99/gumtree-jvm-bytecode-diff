{"diffoscope-json-version": 1, "source1": "first/POP3.class", "source2": "second/POP3.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -76,86 +76,87 @@\n         super._connectAction_();\n         this.reader = (BufferedReader)new CRLFLineReader((Reader)new InputStreamReader(this._input_, POP3.DEFAULT_ENCODING));\n         this.writer = new BufferedWriter(new OutputStreamWriter(this._output_, POP3.DEFAULT_ENCODING));\n         this.getReply();\n         this.setState(0);\n     }\n     \n-    public void setState(final int state) {\n-        this.popState = state;\n+    public void setState(final int popState) {\n+        this.popState = popState;\n     }\n     \n     public int getState() {\n         return this.popState;\n     }\n     \n     public void getAdditionalReply() throws IOException {\n-        for (String line = this.reader.readLine(); line != null; line = this.reader.readLine()) {\n-            this.replyLines.add(line);\n-            if (line.equals(\".\")) {\n+        for (String s = this.reader.readLine(); s != null; s = this.reader.readLine()) {\n+            this.replyLines.add(s);\n+            if (s.equals(\".\")) {\n                 break;\n             }\n         }\n     }\n     \n     public void disconnect() throws IOException {\n         super.disconnect();\n         this.reader = null;\n         this.writer = null;\n         this.lastReplyLine = null;\n         this.replyLines.clear();\n         this.setState(-1);\n     }\n     \n-    public int sendCommand(final String command, final String args) throws IOException {\n+    public int sendCommand(final String str, final String str2) throws IOException {\n         if (this.writer == null) {\n             throw new IllegalStateException(\"Socket is not connected\");\n         }\n-        final StringBuilder __commandBuffer = new StringBuilder();\n-        __commandBuffer.append(command);\n-        if (args != null) {\n-            __commandBuffer.append(' ');\n-            __commandBuffer.append(args);\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(str);\n+        if (str2 != null) {\n+            sb.append(' ');\n+            sb.append(str2);\n         }\n-        __commandBuffer.append(\"\\r\\n\");\n-        final String message = __commandBuffer.toString();\n-        this.writer.write(message);\n+        sb.append(\"\\r\\n\");\n+        final String string = sb.toString();\n+        this.writer.write(string);\n         this.writer.flush();\n-        this.fireCommandSent(command, message);\n+        this.fireCommandSent(str, string);\n         this.getReply();\n         return this.replyCode;\n     }\n     \n-    public int sendCommand(final String command) throws IOException {\n-        return this.sendCommand(command, null);\n+    public int sendCommand(final String s) throws IOException {\n+        return this.sendCommand(s, null);\n     }\n     \n-    public int sendCommand(final int command, final String args) throws IOException {\n-        return this.sendCommand(POP3Command.commands[command], args);\n+    public int sendCommand(final int n, final String s) throws IOException {\n+        return this.sendCommand(POP3Command.commands[n], s);\n     }\n     \n-    public int sendCommand(final int command) throws IOException {\n-        return this.sendCommand(POP3Command.commands[command], null);\n+    public int sendCommand(final int n) throws IOException {\n+        return this.sendCommand(POP3Command.commands[n], null);\n     }\n     \n     public String[] getReplyStrings() {\n         return this.replyLines.toArray(NetConstants.EMPTY_STRING_ARRAY);\n     }\n     \n     public String getReplyString() {\n-        final StringBuilder buffer = new StringBuilder(256);\n-        for (final String entry : this.replyLines) {\n-            buffer.append(entry);\n-            buffer.append(\"\\r\\n\");\n+        final StringBuilder sb = new StringBuilder(256);\n+        final Iterator<String> iterator = this.replyLines.iterator();\n+        while (iterator.hasNext()) {\n+            sb.append(iterator.next());\n+            sb.append(\"\\r\\n\");\n         }\n-        return buffer.toString();\n+        return sb.toString();\n     }\n     \n-    public void removeProtocolCommandistener(final ProtocolCommandListener listener) {\n-        this.removeProtocolCommandListener(listener);\n+    public void removeProtocolCommandistener(final ProtocolCommandListener protocolCommandListener) {\n+        this.removeProtocolCommandListener(protocolCommandListener);\n     }\n     \n     protected ProtocolCommandSupport getCommandSupport() {\n         return this._commandSupport_;\n     }\n     \n     static {\n"}]}
