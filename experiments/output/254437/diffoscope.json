{"diffoscope-json-version": 1, "source1": "first/Languages$SomeLanguages.class", "source2": "second/Languages$SomeLanguages.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,20 +7,20 @@\n import java.util.Collections;\n import java.util.Set;\n \n public static final class SomeLanguages extends Languages.LanguageSet\n {\n     private final Set<String> languages;\n     \n-    private SomeLanguages(final Set<String> languages) {\n-        this.languages = Collections.unmodifiableSet((Set<?>)languages);\n+    private SomeLanguages(final Set<String> s) {\n+        this.languages = Collections.unmodifiableSet((Set<?>)s);\n     }\n     \n-    public boolean contains(final String language) {\n-        return this.languages.contains(language);\n+    public boolean contains(final String s) {\n+        return this.languages.contains(s);\n     }\n     \n     public String getAny() {\n         return this.languages.iterator().next();\n     }\n     \n     public Set<String> getLanguages() {\n@@ -31,43 +31,44 @@\n         return this.languages.isEmpty();\n     }\n     \n     public boolean isSingleton() {\n         return this.languages.size() == 1;\n     }\n     \n-    public Languages.LanguageSet restrictTo(final Languages.LanguageSet other) {\n-        if (other == Languages.NO_LANGUAGES) {\n-            return other;\n+    public Languages.LanguageSet restrictTo(final Languages.LanguageSet set) {\n+        if (set == Languages.NO_LANGUAGES) {\n+            return set;\n         }\n-        if (other == Languages.ANY_LANGUAGE) {\n+        if (set == Languages.ANY_LANGUAGE) {\n             return this;\n         }\n-        final SomeLanguages sl = (SomeLanguages)other;\n-        final Set<String> ls = new HashSet<String>(Math.min(this.languages.size(), sl.languages.size()));\n-        for (final String lang : this.languages) {\n-            if (sl.languages.contains(lang)) {\n-                ls.add(lang);\n+        final SomeLanguages someLanguages = (SomeLanguages)set;\n+        final HashSet set2 = new HashSet(Math.min(this.languages.size(), someLanguages.languages.size()));\n+        for (final String s : this.languages) {\n+            if (someLanguages.languages.contains(s)) {\n+                set2.add((Object)s);\n             }\n         }\n-        return from((Set)ls);\n+        return from((Set)set2);\n     }\n     \n-    public Languages.LanguageSet merge(final Languages.LanguageSet other) {\n-        if (other == Languages.NO_LANGUAGES) {\n+    public Languages.LanguageSet merge(final Languages.LanguageSet set) {\n+        if (set == Languages.NO_LANGUAGES) {\n             return this;\n         }\n-        if (other == Languages.ANY_LANGUAGE) {\n-            return other;\n+        if (set == Languages.ANY_LANGUAGE) {\n+            return set;\n         }\n-        final SomeLanguages sl = (SomeLanguages)other;\n-        final Set<String> ls = new HashSet<String>(this.languages);\n-        for (final String lang : sl.languages) {\n-            ls.add(lang);\n+        final SomeLanguages someLanguages = (SomeLanguages)set;\n+        final HashSet set2 = new HashSet(this.languages);\n+        final Iterator iterator = someLanguages.languages.iterator();\n+        while (iterator.hasNext()) {\n+            set2.add(iterator.next());\n         }\n-        return from((Set)ls);\n+        return from((Set)set2);\n     }\n     \n     public String toString() {\n         return \"Languages(\" + this.languages.toString() + \")\";\n     }\n }\n"}]}
