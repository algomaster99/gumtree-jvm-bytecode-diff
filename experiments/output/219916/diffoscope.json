{"diffoscope-json-version": 1, "source1": "first/AstTreeStringPrinter.class", "source2": "second/AstTreeStringPrinter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -22,99 +22,91 @@\n     }\n     \n     public static String printFileAst(final File file, final JavaParser.Options options) throws IOException, CheckstyleException {\n         return printTree(JavaParser.parseFile(file, options));\n     }\n     \n     public static String printJavaAndJavadocTree(final File file) throws IOException, CheckstyleException {\n-        final DetailAST tree = JavaParser.parseFile(file, JavaParser.Options.WITH_COMMENTS);\n-        return printJavaAndJavadocTree(tree);\n+        return printJavaAndJavadocTree(JavaParser.parseFile(file, JavaParser.Options.WITH_COMMENTS));\n     }\n     \n-    private static String printJavaAndJavadocTree(final DetailAST ast) {\n-        final StringBuilder messageBuilder = new StringBuilder(1024);\n-        for (DetailAST node = ast; node != null; node = node.getNextSibling()) {\n-            messageBuilder.append(getIndentation(node)).append(getNodeInfo(node)).append(AstTreeStringPrinter.LINE_SEPARATOR);\n-            if (node.getType() == 183 && JavadocUtil.isJavadocComment(node.getParent())) {\n-                final String javadocTree = parseAndPrintJavadocTree(node);\n-                messageBuilder.append(javadocTree);\n+    private static String printJavaAndJavadocTree(final DetailAST detailAST) {\n+        final StringBuilder sb = new StringBuilder(1024);\n+        for (DetailAST nextSibling = detailAST; nextSibling != null; nextSibling = nextSibling.getNextSibling()) {\n+            sb.append(getIndentation(nextSibling)).append(getNodeInfo(nextSibling)).append(AstTreeStringPrinter.LINE_SEPARATOR);\n+            if (nextSibling.getType() == 183 && JavadocUtil.isJavadocComment(nextSibling.getParent())) {\n+                sb.append(parseAndPrintJavadocTree(nextSibling));\n             }\n             else {\n-                messageBuilder.append(printJavaAndJavadocTree(node.getFirstChild()));\n+                sb.append(printJavaAndJavadocTree(nextSibling.getFirstChild()));\n             }\n         }\n-        return messageBuilder.toString();\n+        return sb.toString();\n     }\n     \n-    private static String parseAndPrintJavadocTree(final DetailAST node) {\n-        final DetailAST javadocBlock = node.getParent();\n-        final DetailNode tree = DetailNodeTreeStringPrinter.parseJavadocAsDetailNode(javadocBlock);\n-        String baseIndentation = getIndentation(node);\n-        baseIndentation = baseIndentation.substring(0, baseIndentation.length() - 2);\n-        final String rootPrefix = baseIndentation + \"   `--\";\n-        final String prefix = baseIndentation + \"       \";\n-        return DetailNodeTreeStringPrinter.printTree(tree, rootPrefix, prefix);\n+    private static String parseAndPrintJavadocTree(final DetailAST detailAST) {\n+        final DetailNode javadocAsDetailNode = DetailNodeTreeStringPrinter.parseJavadocAsDetailNode(detailAST.getParent());\n+        final String indentation = getIndentation(detailAST);\n+        final String substring = indentation.substring(0, indentation.length() - 2);\n+        return DetailNodeTreeStringPrinter.printTree(javadocAsDetailNode, substring + \"   `--\", substring + \"       \");\n     }\n     \n-    public static String printAst(final FileText text, final JavaParser.Options options) throws CheckstyleException {\n-        final DetailAST ast = JavaParser.parseFileText(text, options);\n-        return printTree(ast);\n+    public static String printAst(final FileText fileText, final JavaParser.Options options) throws CheckstyleException {\n+        return printTree(JavaParser.parseFileText(fileText, options));\n     }\n     \n-    public static String printBranch(final DetailAST node) {\n-        String result;\n-        if (node == null) {\n-            result = \"\";\n+    public static String printBranch(final DetailAST detailAST) {\n+        String s;\n+        if (detailAST == null) {\n+            s = \"\";\n         }\n         else {\n-            result = printBranch(node.getParent()) + getIndentation(node) + getNodeInfo(node) + AstTreeStringPrinter.LINE_SEPARATOR;\n+            s = printBranch(detailAST.getParent()) + getIndentation(detailAST) + getNodeInfo(detailAST) + AstTreeStringPrinter.LINE_SEPARATOR;\n         }\n-        return result;\n+        return s;\n     }\n     \n-    private static String printTree(final DetailAST ast) {\n-        final StringBuilder messageBuilder = new StringBuilder(1024);\n-        for (DetailAST node = ast; node != null; node = node.getNextSibling()) {\n-            messageBuilder.append(getIndentation(node)).append(getNodeInfo(node)).append(AstTreeStringPrinter.LINE_SEPARATOR).append(printTree(node.getFirstChild()));\n+    private static String printTree(final DetailAST detailAST) {\n+        final StringBuilder sb = new StringBuilder(1024);\n+        for (DetailAST nextSibling = detailAST; nextSibling != null; nextSibling = nextSibling.getNextSibling()) {\n+            sb.append(getIndentation(nextSibling)).append(getNodeInfo(nextSibling)).append(AstTreeStringPrinter.LINE_SEPARATOR).append(printTree(nextSibling.getFirstChild()));\n         }\n-        return messageBuilder.toString();\n+        return sb.toString();\n     }\n     \n-    private static String getNodeInfo(final DetailAST node) {\n-        return TokenUtil.getTokenName(node.getType()) + \" -> \" + escapeAllControlChars(node.getText()) + \" [\" + node.getLineNo() + \":\" + node.getColumnNo();\n+    private static String getNodeInfo(final DetailAST detailAST) {\n+        return TokenUtil.getTokenName(detailAST.getType()) + \" -> \" + escapeAllControlChars(detailAST.getText()) + \" [\" + detailAST.getLineNo() + \":\" + detailAST.getColumnNo();\n     }\n     \n-    private static String getIndentation(final DetailAST ast) {\n-        final boolean isLastChild = ast.getNextSibling() == null;\n-        DetailAST node = ast;\n-        final StringBuilder indentation = new StringBuilder(1024);\n-        while (node.getParent() != null) {\n-            node = node.getParent();\n-            if (node.getParent() == null) {\n-                if (isLastChild) {\n-                    indentation.append(\"`--\");\n+    private static String getIndentation(final DetailAST detailAST) {\n+        final boolean b = detailAST.getNextSibling() == null;\n+        DetailAST parent = detailAST;\n+        final StringBuilder sb = new StringBuilder(1024);\n+        while (parent.getParent() != null) {\n+            parent = parent.getParent();\n+            if (parent.getParent() == null) {\n+                if (b) {\n+                    sb.append(\"`--\");\n                 }\n                 else {\n-                    indentation.append(\"|--\");\n+                    sb.append(\"|--\");\n                 }\n             }\n-            else if (node.getNextSibling() == null) {\n-                indentation.insert(0, \"    \");\n+            else if (parent.getNextSibling() == null) {\n+                sb.insert(0, \"    \");\n             }\n             else {\n-                indentation.insert(0, \"|   \");\n+                sb.insert(0, \"|   \");\n             }\n         }\n-        return indentation.toString();\n+        return sb.toString();\n     }\n     \n-    private static String escapeAllControlChars(final String text) {\n-        final String textWithoutNewlines = AstTreeStringPrinter.NEWLINE.matcher(text).replaceAll(\"\\\\\\\\n\");\n-        final String textWithoutReturns = AstTreeStringPrinter.RETURN.matcher(textWithoutNewlines).replaceAll(\"\\\\\\\\r\");\n-        return AstTreeStringPrinter.TAB.matcher(textWithoutReturns).replaceAll(\"\\\\\\\\t\");\n+    private static String escapeAllControlChars(final String input) {\n+        return AstTreeStringPrinter.TAB.matcher(AstTreeStringPrinter.RETURN.matcher(AstTreeStringPrinter.NEWLINE.matcher(input).replaceAll(\"\\\\\\\\n\")).replaceAll(\"\\\\\\\\r\")).replaceAll(\"\\\\\\\\t\");\n     }\n     \n     static {\n         NEWLINE = Pattern.compile(\"\\n\");\n         RETURN = Pattern.compile(\"\\r\");\n         TAB = Pattern.compile(\"\\t\");\n         LINE_SEPARATOR = System.lineSeparator();\n"}]}
