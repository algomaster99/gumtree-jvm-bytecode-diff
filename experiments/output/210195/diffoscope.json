{"diffoscope-json-version": 1, "source1": "first/FastDateParser$StrategyParser.class", "source2": "second/FastDateParser$StrategyParser.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,44 +13,44 @@\n         this.definingCalendar = definingCalendar;\n     }\n     \n     FastDateParser.StrategyAndWidth getNextStrategy() {\n         if (this.currentIdx >= FastDateParser.access$000(this.this$0).length()) {\n             return null;\n         }\n-        final char c = FastDateParser.access$000(this.this$0).charAt(this.currentIdx);\n-        if (FastDateParser.access$100(c)) {\n-            return this.letterPattern(c);\n+        final char char1 = FastDateParser.access$000(this.this$0).charAt(this.currentIdx);\n+        if (FastDateParser.access$100(char1)) {\n+            return this.letterPattern(char1);\n         }\n         return this.literal();\n     }\n     \n     private FastDateParser.StrategyAndWidth letterPattern(final char c) {\n-        final int begin = this.currentIdx;\n+        final int currentIdx = this.currentIdx;\n         while (++this.currentIdx < FastDateParser.access$000(this.this$0).length() && FastDateParser.access$000(this.this$0).charAt(this.currentIdx) == c) {}\n-        final int width = this.currentIdx - begin;\n-        return new FastDateParser.StrategyAndWidth(FastDateParser.access$200(this.this$0, c, width, this.definingCalendar), width);\n+        final int n = this.currentIdx - currentIdx;\n+        return new FastDateParser.StrategyAndWidth(FastDateParser.access$200(this.this$0, c, n, this.definingCalendar), n);\n     }\n     \n     private FastDateParser.StrategyAndWidth literal() {\n-        boolean activeQuote = false;\n+        boolean b = false;\n         final StringBuilder sb = new StringBuilder();\n         while (this.currentIdx < FastDateParser.access$000(this.this$0).length()) {\n-            final char c = FastDateParser.access$000(this.this$0).charAt(this.currentIdx);\n-            if (!activeQuote && FastDateParser.access$100(c)) {\n+            final char char1 = FastDateParser.access$000(this.this$0).charAt(this.currentIdx);\n+            if (!b && FastDateParser.access$100(char1)) {\n                 break;\n             }\n-            if (c == '\\'' && (++this.currentIdx == FastDateParser.access$000(this.this$0).length() || FastDateParser.access$000(this.this$0).charAt(this.currentIdx) != '\\'')) {\n-                activeQuote = !activeQuote;\n+            if (char1 == '\\'' && (++this.currentIdx == FastDateParser.access$000(this.this$0).length() || FastDateParser.access$000(this.this$0).charAt(this.currentIdx) != '\\'')) {\n+                b = !b;\n             }\n             else {\n                 ++this.currentIdx;\n-                sb.append(c);\n+                sb.append(char1);\n             }\n         }\n-        if (activeQuote) {\n+        if (b) {\n             throw new IllegalArgumentException(\"Unterminated quote\");\n         }\n-        final String formatField = sb.toString();\n-        return new FastDateParser.StrategyAndWidth((FastDateParser.Strategy)new FastDateParser.CopyQuotedStrategy(formatField), formatField.length());\n+        final String string = sb.toString();\n+        return new FastDateParser.StrategyAndWidth((FastDateParser.Strategy)new FastDateParser.CopyQuotedStrategy(string), string.length());\n     }\n }\n"}]}
