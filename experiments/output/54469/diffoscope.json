{"diffoscope-json-version": 1, "source1": "first/ExceptionsAttribute.class", "source2": "second/ExceptionsAttribute.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,15 +8,14 @@\n public class ExceptionsAttribute extends Attribute\n {\n     private static CPUTF8 attributeName;\n     private transient int[] exceptionIndexes;\n     private final CPClass[] exceptions;\n     \n     private static int hashCode(final Object[] array) {\n-        final int prime = 31;\n         if (array == null) {\n             return 0;\n         }\n         int result = 1;\n         for (final Object element : array) {\n             result = 31 * result + ((element == null) ? 0 : element.hashCode());\n         }\n@@ -54,15 +53,14 @@\n         final ClassFileEntry[] result = new ClassFileEntry[this.exceptions.length + 1];\n         System.arraycopy(this.exceptions, 0, result, 0, this.exceptions.length);\n         result[this.exceptions.length] = (ClassFileEntry)this.getAttributeName();\n         return result;\n     }\n     \n     public int hashCode() {\n-        final int prime = 31;\n         int result = super.hashCode();\n         result = 31 * result + hashCode(this.exceptions);\n         return result;\n     }\n     \n     protected void resolve(final ClassConstantPool pool) {\n         super.resolve(pool);\n@@ -72,21 +70,25 @@\n             this.exceptionIndexes[i] = pool.indexOf((ClassFileEntry)this.exceptions[i]);\n         }\n     }\n     \n     public String toString() {\n         final StringBuilder sb = new StringBuilder();\n         sb.append(\"Exceptions: \");\n-        for (final CPClass exception : this.exceptions) {\n+        CPClass[] exceptions;\n+        for (int length = (exceptions = this.exceptions).length, i = 0; i < length; ++i) {\n+            final CPClass exception = exceptions[i];\n             sb.append(exception);\n             sb.append(' ');\n         }\n         return sb.toString();\n     }\n     \n     protected void writeBody(final DataOutputStream dos) throws IOException {\n         dos.writeShort(this.exceptionIndexes.length);\n-        for (final int element : this.exceptionIndexes) {\n+        int[] exceptionIndexes;\n+        for (int length = (exceptionIndexes = this.exceptionIndexes).length, i = 0; i < length; ++i) {\n+            final int element = exceptionIndexes[i];\n             dos.writeShort(element);\n         }\n     }\n }\n"}]}
