{"diffoscope-json-version": 1, "source1": "first/TarFile$BoundedTarEntryInputStream.class", "source2": "second/TarFile$BoundedTarEntryInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,172 +1,172 @@\n-  SHA-256 checksum 6cd85d9fe39b10178b34ab7afa140aa33e5418b58511f0f6cd5be57661c203a6\n+  SHA-256 checksum 3252d5b4fce90dc58f829edf3227253efa146469f8a190f4ea1a609389ea9542\n   Compiled from \"TarFile.java\"\n final class org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream extends org.apache.commons.compress.utils.BoundedArchiveInputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0030) ACC_FINAL, ACC_SUPER\n-  this_class: #34                         // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n-  super_class: #35                        // org/apache/commons/compress/utils/BoundedArchiveInputStream\n+  this_class: #2                          // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n+  super_class: #17                        // org/apache/commons/compress/utils/BoundedArchiveInputStream\n   interfaces: 0, fields: 5, methods: 4, attributes: 2\n Constant pool:\n-    #1 = Fieldref           #34.#83       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;\n-    #2 = Methodref          #57.#84       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n-    #3 = Methodref          #57.#85       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n-    #4 = Methodref          #35.#86       // org/apache/commons/compress/utils/BoundedArchiveInputStream.\"<init>\":(JJ)V\n-    #5 = InterfaceMethodref #58.#87       // java/nio/channels/SeekableByteChannel.size:()J\n-    #6 = Methodref          #57.#88       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-    #7 = Class              #89           // java/io/IOException\n-    #8 = String             #90           // entry size exceeds archive size\n-    #9 = Methodref          #7.#91        // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #10 = Fieldref           #34.#92       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #11 = Fieldref           #34.#93       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n-   #12 = Fieldref           #34.#94       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.entryOffset:J\n-   #13 = Methodref          #57.#95       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n-   #14 = Methodref          #96.#97       // java/nio/ByteBuffer.limit:()I\n-   #15 = Methodref          #34.#98       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.readSparse:(JLjava/nio/ByteBuffer;I)I\n-   #16 = Methodref          #34.#99       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.readArchive:(JLjava/nio/ByteBuffer;)I\n-   #17 = Methodref          #96.#100      // java/nio/ByteBuffer.array:()[B\n-   #18 = String             #101          // Truncated TAR archive\n-   #19 = Methodref          #56.#102      // org/apache/commons/compress/archivers/tar/TarFile.setAtEOF:(Z)V\n-   #20 = Methodref          #96.#103      // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n-   #21 = Methodref          #56.#104      // org/apache/commons/compress/archivers/tar/TarFile.access$000:(Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n-   #22 = Methodref          #57.#105      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n-   #23 = InterfaceMethodref #106.#107     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #24 = Class              #108          // java/util/List\n-   #25 = InterfaceMethodref #24.#109      // java/util/List.isEmpty:()Z\n-   #26 = Fieldref           #34.#110      // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.currentSparseInputStreamIndex:I\n-   #27 = InterfaceMethodref #24.#111      // java/util/List.size:()I\n-   #28 = InterfaceMethodref #24.#112      // java/util/List.get:(I)Ljava/lang/Object;\n-   #29 = Class              #113          // java/io/InputStream\n-   #30 = Methodref          #29.#114      // java/io/InputStream.read:([B)I\n-   #31 = Methodref          #96.#115      // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n-   #32 = InterfaceMethodref #58.#116      // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #33 = InterfaceMethodref #58.#117      // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n-   #34 = Class              #118          // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n-   #35 = Class              #119          // org/apache/commons/compress/utils/BoundedArchiveInputStream\n-   #36 = Utf8               channel\n-   #37 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n-   #38 = Utf8               entry\n-   #39 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #40 = Utf8               entryOffset\n-   #41 = Utf8               J\n-   #42 = Utf8               currentSparseInputStreamIndex\n-   #43 = Utf8               I\n-   #44 = Utf8               this$0\n-   #45 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarFile;\n-   #46 = Utf8               <init>\n-   #47 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n-   #48 = Utf8               Code\n-   #49 = Utf8               LineNumberTable\n-   #50 = Utf8               LocalVariableTable\n-   #51 = Utf8               this\n-   #52 = Utf8               BoundedTarEntryInputStream\n-   #53 = Utf8               InnerClasses\n-   #54 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream;\n-   #55 = Utf8               StackMapTable\n-   #56 = Class              #120          // org/apache/commons/compress/archivers/tar/TarFile\n-   #57 = Class              #121          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-   #58 = Class              #122          // java/nio/channels/SeekableByteChannel\n-   #59 = Utf8               Exceptions\n-   #60 = Utf8               read\n-   #61 = Utf8               (JLjava/nio/ByteBuffer;)I\n-   #62 = Utf8               totalRead\n-   #63 = Utf8               pos\n-   #64 = Utf8               buf\n-   #65 = Utf8               Ljava/nio/ByteBuffer;\n-   #66 = Utf8               readSparse\n-   #67 = Utf8               (JLjava/nio/ByteBuffer;I)I\n-   #68 = Utf8               readLenOfNext\n-   #69 = Utf8               numToRead\n-   #70 = Utf8               entrySparseInputStreams\n-   #71 = Utf8               Ljava/util/List;\n-   #72 = Utf8               currentInputStream\n-   #73 = Utf8               Ljava/io/InputStream;\n-   #74 = Utf8               bufArray\n-   #75 = Utf8               [B\n-   #76 = Utf8               readLen\n-   #77 = Utf8               LocalVariableTypeTable\n-   #78 = Utf8               Ljava/util/List<Ljava/io/InputStream;>;\n-   #79 = Class              #75           // \"[B\"\n-   #80 = Utf8               readArchive\n-   #81 = Utf8               SourceFile\n-   #82 = Utf8               TarFile.java\n-   #83 = NameAndType        #44:#45       // this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;\n-   #84 = NameAndType        #123:#124     // getDataOffset:()J\n-   #85 = NameAndType        #125:#124     // getRealSize:()J\n-   #86 = NameAndType        #46:#126      // \"<init>\":(JJ)V\n-   #87 = NameAndType        #127:#124     // size:()J\n-   #88 = NameAndType        #128:#124     // getSize:()J\n-   #89 = Utf8               java/io/IOException\n-   #90 = Utf8               entry size exceeds archive size\n-   #91 = NameAndType        #46:#129      // \"<init>\":(Ljava/lang/String;)V\n-   #92 = NameAndType        #38:#39       // entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #93 = NameAndType        #36:#37       // channel:Ljava/nio/channels/SeekableByteChannel;\n-   #94 = NameAndType        #40:#41       // entryOffset:J\n-   #95 = NameAndType        #130:#131     // isSparse:()Z\n-   #96 = Class              #132          // java/nio/ByteBuffer\n-   #97 = NameAndType        #133:#134     // limit:()I\n-   #98 = NameAndType        #66:#67       // readSparse:(JLjava/nio/ByteBuffer;I)I\n-   #99 = NameAndType        #80:#61       // readArchive:(JLjava/nio/ByteBuffer;)I\n-  #100 = NameAndType        #135:#136     // array:()[B\n-  #101 = Utf8               Truncated TAR archive\n-  #102 = NameAndType        #137:#138     // setAtEOF:(Z)V\n-  #103 = NameAndType        #139:#140     // flip:()Ljava/nio/Buffer;\n-  #104 = NameAndType        #141:#142     // access$000:(Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n-  #105 = NameAndType        #143:#144     // getName:()Ljava/lang/String;\n-  #106 = Class              #145          // java/util/Map\n-  #107 = NameAndType        #146:#147     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #108 = Utf8               java/util/List\n-  #109 = NameAndType        #148:#131     // isEmpty:()Z\n-  #110 = NameAndType        #42:#43       // currentSparseInputStreamIndex:I\n-  #111 = NameAndType        #127:#134     // size:()I\n-  #112 = NameAndType        #146:#149     // get:(I)Ljava/lang/Object;\n-  #113 = Utf8               java/io/InputStream\n-  #114 = NameAndType        #60:#150      // read:([B)I\n-  #115 = NameAndType        #151:#152     // put:([BII)Ljava/nio/ByteBuffer;\n-  #116 = NameAndType        #153:#154     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #117 = NameAndType        #60:#155      // read:(Ljava/nio/ByteBuffer;)I\n-  #118 = Utf8               org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n-  #119 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n-  #120 = Utf8               org/apache/commons/compress/archivers/tar/TarFile\n-  #121 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-  #122 = Utf8               java/nio/channels/SeekableByteChannel\n-  #123 = Utf8               getDataOffset\n-  #124 = Utf8               ()J\n-  #125 = Utf8               getRealSize\n-  #126 = Utf8               (JJ)V\n-  #127 = Utf8               size\n-  #128 = Utf8               getSize\n-  #129 = Utf8               (Ljava/lang/String;)V\n-  #130 = Utf8               isSparse\n-  #131 = Utf8               ()Z\n-  #132 = Utf8               java/nio/ByteBuffer\n-  #133 = Utf8               limit\n-  #134 = Utf8               ()I\n-  #135 = Utf8               array\n-  #136 = Utf8               ()[B\n-  #137 = Utf8               setAtEOF\n-  #138 = Utf8               (Z)V\n-  #139 = Utf8               flip\n-  #140 = Utf8               ()Ljava/nio/Buffer;\n-  #141 = Utf8               access$000\n-  #142 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n-  #143 = Utf8               getName\n-  #144 = Utf8               ()Ljava/lang/String;\n-  #145 = Utf8               java/util/Map\n-  #146 = Utf8               get\n-  #147 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #148 = Utf8               isEmpty\n-  #149 = Utf8               (I)Ljava/lang/Object;\n-  #150 = Utf8               ([B)I\n-  #151 = Utf8               put\n-  #152 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #153 = Utf8               position\n-  #154 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-  #155 = Utf8               (Ljava/nio/ByteBuffer;)I\n+    #1 = Fieldref           #2.#3         // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;\n+    #2 = Class              #4            // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n+    #3 = NameAndType        #5:#6         // this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;\n+    #4 = Utf8               org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n+    #5 = Utf8               this$0\n+    #6 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarFile;\n+    #7 = Methodref          #8.#9         // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n+    #8 = Class              #10           // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+    #9 = NameAndType        #11:#12       // getDataOffset:()J\n+   #10 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+   #11 = Utf8               getDataOffset\n+   #12 = Utf8               ()J\n+   #13 = Methodref          #8.#14        // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n+   #14 = NameAndType        #15:#12       // getRealSize:()J\n+   #15 = Utf8               getRealSize\n+   #16 = Methodref          #17.#18       // org/apache/commons/compress/utils/BoundedArchiveInputStream.\"<init>\":(JJ)V\n+   #17 = Class              #19           // org/apache/commons/compress/utils/BoundedArchiveInputStream\n+   #18 = NameAndType        #20:#21       // \"<init>\":(JJ)V\n+   #19 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n+   #20 = Utf8               <init>\n+   #21 = Utf8               (JJ)V\n+   #22 = InterfaceMethodref #23.#24       // java/nio/channels/SeekableByteChannel.size:()J\n+   #23 = Class              #25           // java/nio/channels/SeekableByteChannel\n+   #24 = NameAndType        #26:#12       // size:()J\n+   #25 = Utf8               java/nio/channels/SeekableByteChannel\n+   #26 = Utf8               size\n+   #27 = Methodref          #8.#28        // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+   #28 = NameAndType        #29:#12       // getSize:()J\n+   #29 = Utf8               getSize\n+   #30 = Class              #31           // java/io/IOException\n+   #31 = Utf8               java/io/IOException\n+   #32 = String             #33           // entry size exceeds archive size\n+   #33 = Utf8               entry size exceeds archive size\n+   #34 = Methodref          #30.#35       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #35 = NameAndType        #20:#36       // \"<init>\":(Ljava/lang/String;)V\n+   #36 = Utf8               (Ljava/lang/String;)V\n+   #37 = Fieldref           #2.#38        // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+   #38 = NameAndType        #39:#40       // entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+   #39 = Utf8               entry\n+   #40 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+   #41 = Fieldref           #2.#42        // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n+   #42 = NameAndType        #43:#44       // channel:Ljava/nio/channels/SeekableByteChannel;\n+   #43 = Utf8               channel\n+   #44 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n+   #45 = Fieldref           #2.#46        // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.entryOffset:J\n+   #46 = NameAndType        #47:#48       // entryOffset:J\n+   #47 = Utf8               entryOffset\n+   #48 = Utf8               J\n+   #49 = Methodref          #8.#50        // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n+   #50 = NameAndType        #51:#52       // isSparse:()Z\n+   #51 = Utf8               isSparse\n+   #52 = Utf8               ()Z\n+   #53 = Methodref          #54.#55       // java/nio/ByteBuffer.limit:()I\n+   #54 = Class              #56           // java/nio/ByteBuffer\n+   #55 = NameAndType        #57:#58       // limit:()I\n+   #56 = Utf8               java/nio/ByteBuffer\n+   #57 = Utf8               limit\n+   #58 = Utf8               ()I\n+   #59 = Methodref          #2.#60        // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.readSparse:(JLjava/nio/ByteBuffer;I)I\n+   #60 = NameAndType        #61:#62       // readSparse:(JLjava/nio/ByteBuffer;I)I\n+   #61 = Utf8               readSparse\n+   #62 = Utf8               (JLjava/nio/ByteBuffer;I)I\n+   #63 = Methodref          #2.#64        // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.readArchive:(JLjava/nio/ByteBuffer;)I\n+   #64 = NameAndType        #65:#66       // readArchive:(JLjava/nio/ByteBuffer;)I\n+   #65 = Utf8               readArchive\n+   #66 = Utf8               (JLjava/nio/ByteBuffer;)I\n+   #67 = Methodref          #54.#68       // java/nio/ByteBuffer.array:()[B\n+   #68 = NameAndType        #69:#70       // array:()[B\n+   #69 = Utf8               array\n+   #70 = Utf8               ()[B\n+   #71 = String             #72           // Truncated TAR archive\n+   #72 = Utf8               Truncated TAR archive\n+   #73 = Methodref          #74.#75       // org/apache/commons/compress/archivers/tar/TarFile.setAtEOF:(Z)V\n+   #74 = Class              #76           // org/apache/commons/compress/archivers/tar/TarFile\n+   #75 = NameAndType        #77:#78       // setAtEOF:(Z)V\n+   #76 = Utf8               org/apache/commons/compress/archivers/tar/TarFile\n+   #77 = Utf8               setAtEOF\n+   #78 = Utf8               (Z)V\n+   #79 = Methodref          #54.#80       // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+   #80 = NameAndType        #81:#82       // flip:()Ljava/nio/Buffer;\n+   #81 = Utf8               flip\n+   #82 = Utf8               ()Ljava/nio/Buffer;\n+   #83 = Methodref          #74.#84       // org/apache/commons/compress/archivers/tar/TarFile.access$000:(Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n+   #84 = NameAndType        #85:#86       // access$000:(Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n+   #85 = Utf8               access$000\n+   #86 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n+   #87 = Methodref          #8.#88        // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n+   #88 = NameAndType        #89:#90       // getName:()Ljava/lang/String;\n+   #89 = Utf8               getName\n+   #90 = Utf8               ()Ljava/lang/String;\n+   #91 = InterfaceMethodref #92.#93       // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #92 = Class              #94           // java/util/Map\n+   #93 = NameAndType        #95:#96       // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #94 = Utf8               java/util/Map\n+   #95 = Utf8               get\n+   #96 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+   #97 = Class              #98           // java/util/List\n+   #98 = Utf8               java/util/List\n+   #99 = InterfaceMethodref #97.#100      // java/util/List.isEmpty:()Z\n+  #100 = NameAndType        #101:#52      // isEmpty:()Z\n+  #101 = Utf8               isEmpty\n+  #102 = Fieldref           #2.#103       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.currentSparseInputStreamIndex:I\n+  #103 = NameAndType        #104:#105     // currentSparseInputStreamIndex:I\n+  #104 = Utf8               currentSparseInputStreamIndex\n+  #105 = Utf8               I\n+  #106 = InterfaceMethodref #97.#107      // java/util/List.size:()I\n+  #107 = NameAndType        #26:#58       // size:()I\n+  #108 = InterfaceMethodref #97.#109      // java/util/List.get:(I)Ljava/lang/Object;\n+  #109 = NameAndType        #95:#110      // get:(I)Ljava/lang/Object;\n+  #110 = Utf8               (I)Ljava/lang/Object;\n+  #111 = Class              #112          // java/io/InputStream\n+  #112 = Utf8               java/io/InputStream\n+  #113 = Methodref          #111.#114     // java/io/InputStream.read:([B)I\n+  #114 = NameAndType        #115:#116     // read:([B)I\n+  #115 = Utf8               read\n+  #116 = Utf8               ([B)I\n+  #117 = Methodref          #54.#118      // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n+  #118 = NameAndType        #119:#120     // put:([BII)Ljava/nio/ByteBuffer;\n+  #119 = Utf8               put\n+  #120 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #121 = InterfaceMethodref #23.#122      // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #122 = NameAndType        #123:#124     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #123 = Utf8               position\n+  #124 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+  #125 = InterfaceMethodref #23.#126      // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+  #126 = NameAndType        #115:#127     // read:(Ljava/nio/ByteBuffer;)I\n+  #127 = Utf8               (Ljava/nio/ByteBuffer;)I\n+  #128 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n+  #129 = Utf8               Code\n+  #130 = Utf8               LineNumberTable\n+  #131 = Utf8               LocalVariableTable\n+  #132 = Utf8               this\n+  #133 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream;\n+  #134 = Utf8               StackMapTable\n+  #135 = Utf8               Exceptions\n+  #136 = Utf8               totalRead\n+  #137 = Utf8               pos\n+  #138 = Utf8               buf\n+  #139 = Utf8               Ljava/nio/ByteBuffer;\n+  #140 = Utf8               readLenOfNext\n+  #141 = Utf8               numToRead\n+  #142 = Utf8               entrySparseInputStreams\n+  #143 = Utf8               Ljava/util/List;\n+  #144 = Utf8               currentInputStream\n+  #145 = Utf8               Ljava/io/InputStream;\n+  #146 = Utf8               bufArray\n+  #147 = Utf8               [B\n+  #148 = Utf8               readLen\n+  #149 = Utf8               LocalVariableTypeTable\n+  #150 = Utf8               Ljava/util/List<Ljava/io/InputStream;>;\n+  #151 = Class              #147          // \"[B\"\n+  #152 = Utf8               SourceFile\n+  #153 = Utf8               TarFile.java\n+  #154 = Utf8               InnerClasses\n+  #155 = Utf8               BoundedTarEntryInputStream\n {\n   private final java.nio.channels.SeekableByteChannel channel;\n     descriptor: Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final org.apache.commons.compress.archivers.tar.TarArchiveEntry entry;\n     descriptor: Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n@@ -190,38 +190,38 @@\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: putfield      #1                  // Field this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;\n          5: aload_0\n          6: aload_2\n-         7: invokevirtual #2                  // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n+         7: invokevirtual #7                  // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n         10: aload_2\n-        11: invokevirtual #3                  // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n-        14: invokespecial #4                  // Method org/apache/commons/compress/utils/BoundedArchiveInputStream.\"<init>\":(JJ)V\n+        11: invokevirtual #13                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n+        14: invokespecial #16                 // Method org/apache/commons/compress/utils/BoundedArchiveInputStream.\"<init>\":(JJ)V\n         17: aload_3\n-        18: invokeinterface #5,  1            // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+        18: invokeinterface #22,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n         23: aload_2\n-        24: invokevirtual #6                  // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+        24: invokevirtual #27                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n         27: lsub\n         28: aload_2\n-        29: invokevirtual #2                  // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n+        29: invokevirtual #7                  // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n         32: lcmp\n         33: ifge          46\n-        36: new           #7                  // class java/io/IOException\n+        36: new           #30                 // class java/io/IOException\n         39: dup\n-        40: ldc           #8                  // String entry size exceeds archive size\n-        42: invokespecial #9                  // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        40: ldc           #32                 // String entry size exceeds archive size\n+        42: invokespecial #34                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         45: athrow\n         46: aload_0\n         47: aload_2\n-        48: putfield      #10                 // Field entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        48: putfield      #37                 // Field entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         51: aload_0\n         52: aload_3\n-        53: putfield      #11                 // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+        53: putfield      #41                 // Field channel:Ljava/nio/channels/SeekableByteChannel;\n         56: return\n       LineNumberTable:\n         line 671: 0\n         line 672: 5\n         line 673: 17\n         line 674: 36\n         line 676: 46\n@@ -242,66 +242,66 @@\n \n   protected int read(long, java.nio.ByteBuffer) throws java.io.IOException;\n     descriptor: (JLjava/nio/ByteBuffer;)I\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=5, locals=5, args_size=3\n          0: aload_0\n-         1: getfield      #12                 // Field entryOffset:J\n+         1: getfield      #45                 // Field entryOffset:J\n          4: aload_0\n-         5: getfield      #10                 // Field entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-         8: invokevirtual #3                  // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n+         5: getfield      #37                 // Field entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         8: invokevirtual #13                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n         11: lcmp\n         12: iflt          17\n         15: iconst_m1\n         16: ireturn\n         17: aload_0\n-        18: getfield      #10                 // Field entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        21: invokevirtual #13                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n+        18: getfield      #37                 // Field entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        21: invokevirtual #49                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n         24: ifeq          45\n         27: aload_0\n         28: aload_0\n-        29: getfield      #12                 // Field entryOffset:J\n+        29: getfield      #45                 // Field entryOffset:J\n         32: aload_3\n         33: aload_3\n-        34: invokevirtual #14                 // Method java/nio/ByteBuffer.limit:()I\n-        37: invokespecial #15                 // Method readSparse:(JLjava/nio/ByteBuffer;I)I\n+        34: invokevirtual #53                 // Method java/nio/ByteBuffer.limit:()I\n+        37: invokespecial #59                 // Method readSparse:(JLjava/nio/ByteBuffer;I)I\n         40: istore        4\n         42: goto          53\n         45: aload_0\n         46: lload_1\n         47: aload_3\n-        48: invokespecial #16                 // Method readArchive:(JLjava/nio/ByteBuffer;)I\n+        48: invokespecial #63                 // Method readArchive:(JLjava/nio/ByteBuffer;)I\n         51: istore        4\n         53: iload         4\n         55: iconst_m1\n         56: if_icmpne     88\n         59: aload_3\n-        60: invokevirtual #17                 // Method java/nio/ByteBuffer.array:()[B\n+        60: invokevirtual #67                 // Method java/nio/ByteBuffer.array:()[B\n         63: arraylength\n         64: ifle          77\n-        67: new           #7                  // class java/io/IOException\n+        67: new           #30                 // class java/io/IOException\n         70: dup\n-        71: ldc           #18                 // String Truncated TAR archive\n-        73: invokespecial #9                  // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        71: ldc           #71                 // String Truncated TAR archive\n+        73: invokespecial #34                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         76: athrow\n         77: aload_0\n         78: getfield      #1                  // Field this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;\n         81: iconst_1\n-        82: invokevirtual #19                 // Method org/apache/commons/compress/archivers/tar/TarFile.setAtEOF:(Z)V\n+        82: invokevirtual #73                 // Method org/apache/commons/compress/archivers/tar/TarFile.setAtEOF:(Z)V\n         85: goto          105\n         88: aload_0\n         89: dup\n-        90: getfield      #12                 // Field entryOffset:J\n+        90: getfield      #45                 // Field entryOffset:J\n         93: iload         4\n         95: i2l\n         96: ladd\n-        97: putfield      #12                 // Field entryOffset:J\n+        97: putfield      #45                 // Field entryOffset:J\n        100: aload_3\n-       101: invokevirtual #20                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+       101: invokevirtual #79                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n        104: pop\n        105: iload         4\n        107: ireturn\n       LineNumberTable:\n         line 682: 0\n         line 683: 15\n         line 687: 17\n@@ -336,107 +336,107 @@\n   private int readSparse(long, java.nio.ByteBuffer, int) throws java.io.IOException;\n     descriptor: (JLjava/nio/ByteBuffer;I)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=10, args_size=4\n          0: aload_0\n          1: getfield      #1                  // Field this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;\n-         4: invokestatic  #21                 // Method org/apache/commons/compress/archivers/tar/TarFile.access$000:(Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n+         4: invokestatic  #83                 // Method org/apache/commons/compress/archivers/tar/TarFile.access$000:(Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n          7: aload_0\n-         8: getfield      #10                 // Field entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        11: invokevirtual #22                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n-        14: invokeinterface #23,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-        19: checkcast     #24                 // class java/util/List\n+         8: getfield      #37                 // Field entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        11: invokevirtual #87                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n+        14: invokeinterface #91,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+        19: checkcast     #97                 // class java/util/List\n         22: astore        5\n         24: aload         5\n         26: ifnull        39\n         29: aload         5\n-        31: invokeinterface #25,  1           // InterfaceMethod java/util/List.isEmpty:()Z\n+        31: invokeinterface #99,  1           // InterfaceMethod java/util/List.isEmpty:()Z\n         36: ifeq          54\n         39: aload_0\n         40: aload_0\n-        41: getfield      #10                 // Field entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        44: invokevirtual #2                  // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n+        41: getfield      #37                 // Field entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        44: invokevirtual #7                  // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n         47: lload_1\n         48: ladd\n         49: aload_3\n-        50: invokespecial #16                 // Method readArchive:(JLjava/nio/ByteBuffer;)I\n+        50: invokespecial #63                 // Method readArchive:(JLjava/nio/ByteBuffer;)I\n         53: ireturn\n         54: aload_0\n-        55: getfield      #26                 // Field currentSparseInputStreamIndex:I\n+        55: getfield      #102                // Field currentSparseInputStreamIndex:I\n         58: aload         5\n-        60: invokeinterface #27,  1           // InterfaceMethod java/util/List.size:()I\n+        60: invokeinterface #106,  1          // InterfaceMethod java/util/List.size:()I\n         65: if_icmplt     70\n         68: iconst_m1\n         69: ireturn\n         70: aload         5\n         72: aload_0\n-        73: getfield      #26                 // Field currentSparseInputStreamIndex:I\n-        76: invokeinterface #28,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n-        81: checkcast     #29                 // class java/io/InputStream\n+        73: getfield      #102                // Field currentSparseInputStreamIndex:I\n+        76: invokeinterface #108,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n+        81: checkcast     #111                // class java/io/InputStream\n         84: astore        6\n         86: iload         4\n         88: newarray       byte\n         90: astore        7\n         92: aload         6\n         94: aload         7\n-        96: invokevirtual #30                 // Method java/io/InputStream.read:([B)I\n+        96: invokevirtual #113                // Method java/io/InputStream.read:([B)I\n         99: istore        8\n        101: iload         8\n        103: iconst_m1\n        104: if_icmpeq     117\n        107: aload_3\n        108: aload         7\n        110: iconst_0\n        111: iload         8\n-       113: invokevirtual #31                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n+       113: invokevirtual #117                // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n        116: pop\n        117: aload_0\n-       118: getfield      #26                 // Field currentSparseInputStreamIndex:I\n+       118: getfield      #102                // Field currentSparseInputStreamIndex:I\n        121: aload         5\n-       123: invokeinterface #27,  1           // InterfaceMethod java/util/List.size:()I\n+       123: invokeinterface #106,  1          // InterfaceMethod java/util/List.size:()I\n        128: iconst_1\n        129: isub\n        130: if_icmpne     136\n        133: iload         8\n        135: ireturn\n        136: iload         8\n        138: iconst_m1\n        139: if_icmpne     161\n        142: aload_0\n        143: dup\n-       144: getfield      #26                 // Field currentSparseInputStreamIndex:I\n+       144: getfield      #102                // Field currentSparseInputStreamIndex:I\n        147: iconst_1\n        148: iadd\n-       149: putfield      #26                 // Field currentSparseInputStreamIndex:I\n+       149: putfield      #102                // Field currentSparseInputStreamIndex:I\n        152: aload_0\n        153: lload_1\n        154: aload_3\n        155: iload         4\n-       157: invokespecial #15                 // Method readSparse:(JLjava/nio/ByteBuffer;I)I\n+       157: invokespecial #59                 // Method readSparse:(JLjava/nio/ByteBuffer;I)I\n        160: ireturn\n        161: iload         8\n        163: iload         4\n        165: if_icmpge     210\n        168: aload_0\n        169: dup\n-       170: getfield      #26                 // Field currentSparseInputStreamIndex:I\n+       170: getfield      #102                // Field currentSparseInputStreamIndex:I\n        173: iconst_1\n        174: iadd\n-       175: putfield      #26                 // Field currentSparseInputStreamIndex:I\n+       175: putfield      #102                // Field currentSparseInputStreamIndex:I\n        178: aload_0\n        179: lload_1\n        180: iload         8\n        182: i2l\n        183: ladd\n        184: aload_3\n        185: iload         4\n        187: iload         8\n        189: isub\n-       190: invokespecial #15                 // Method readSparse:(JLjava/nio/ByteBuffer;I)I\n+       190: invokespecial #59                 // Method readSparse:(JLjava/nio/ByteBuffer;I)I\n        193: istore        9\n        195: iload         9\n        197: iconst_m1\n        198: if_icmpne     204\n        201: iload         8\n        203: ireturn\n        204: iload         8\n@@ -503,30 +503,30 @@\n \n   private int readArchive(long, java.nio.ByteBuffer) throws java.io.IOException;\n     descriptor: (JLjava/nio/ByteBuffer;)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=4, args_size=3\n          0: aload_0\n-         1: getfield      #11                 // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+         1: getfield      #41                 // Field channel:Ljava/nio/channels/SeekableByteChannel;\n          4: lload_1\n-         5: invokeinterface #32,  3           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+         5: invokeinterface #121,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         10: pop\n         11: aload_0\n-        12: getfield      #11                 // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+        12: getfield      #41                 // Field channel:Ljava/nio/channels/SeekableByteChannel;\n         15: aload_3\n-        16: invokeinterface #33,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+        16: invokeinterface #125,  2          // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         21: ireturn\n       LineNumberTable:\n         line 752: 0\n         line 753: 11\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      22     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream;\n             0      22     1   pos   J\n             0      22     3   buf   Ljava/nio/ByteBuffer;\n     Exceptions:\n       throws java.io.IOException\n }\n SourceFile: \"TarFile.java\"\n InnerClasses:\n-  private final #52= #34 of #56;          // BoundedTarEntryInputStream=class org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream of class org/apache/commons/compress/archivers/tar/TarFile\n+  private final #155= #2 of #74;          // BoundedTarEntryInputStream=class org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream of class org/apache/commons/compress/archivers/tar/TarFile\n"}]}
