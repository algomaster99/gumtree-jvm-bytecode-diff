{"diffoscope-json-version": 1, "source1": "first/PairTest.class", "source2": "second/PairTest.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,112 +8,106 @@\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.Assertions;\n \n public class PairTest\n {\n     @Test\n     public void testComparable1() {\n-        final Pair<String, String> pair1 = (Pair<String, String>)Pair.of((Object)\"A\", (Object)\"D\");\n-        final Pair<String, String> pair2 = (Pair<String, String>)Pair.of((Object)\"B\", (Object)\"C\");\n-        Assertions.assertEquals(0, pair1.compareTo((Pair)pair1));\n-        Assertions.assertTrue(pair1.compareTo((Pair)pair2) < 0);\n-        Assertions.assertEquals(0, pair2.compareTo((Pair)pair2));\n-        Assertions.assertTrue(pair2.compareTo((Pair)pair1) > 0);\n+        final Pair of = Pair.of((Object)\"A\", (Object)\"D\");\n+        final Pair of2 = Pair.of((Object)\"B\", (Object)\"C\");\n+        Assertions.assertEquals(0, of.compareTo(of));\n+        Assertions.assertTrue(of.compareTo(of2) < 0);\n+        Assertions.assertEquals(0, of2.compareTo(of2));\n+        Assertions.assertTrue(of2.compareTo(of) > 0);\n     }\n     \n     @Test\n     public void testComparable2() {\n-        final Pair<String, String> pair1 = (Pair<String, String>)Pair.of((Object)\"A\", (Object)\"C\");\n-        final Pair<String, String> pair2 = (Pair<String, String>)Pair.of((Object)\"A\", (Object)\"D\");\n-        Assertions.assertEquals(0, pair1.compareTo((Pair)pair1));\n-        Assertions.assertTrue(pair1.compareTo((Pair)pair2) < 0);\n-        Assertions.assertEquals(0, pair2.compareTo((Pair)pair2));\n-        Assertions.assertTrue(pair2.compareTo((Pair)pair1) > 0);\n+        final Pair of = Pair.of((Object)\"A\", (Object)\"C\");\n+        final Pair of2 = Pair.of((Object)\"A\", (Object)\"D\");\n+        Assertions.assertEquals(0, of.compareTo(of));\n+        Assertions.assertTrue(of.compareTo(of2) < 0);\n+        Assertions.assertEquals(0, of2.compareTo(of2));\n+        Assertions.assertTrue(of2.compareTo(of) > 0);\n     }\n     \n     @Test\n     public void testCompatibilityBetweenPairs() {\n-        final Pair<Integer, String> pair = (Pair<Integer, String>)ImmutablePair.of((Object)Integer.valueOf(0), (Object)\"foo\");\n-        final Pair<Integer, String> pair2 = (Pair<Integer, String>)MutablePair.of((Object)Integer.valueOf(0), (Object)\"foo\");\n-        Assertions.assertEquals((Object)pair, (Object)pair2);\n-        Assertions.assertEquals(pair.hashCode(), pair2.hashCode());\n-        final HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>();\n-        set.add(pair);\n-        Assertions.assertTrue(set.contains((Object)pair2));\n-        pair2.setValue((Object)\"bar\");\n-        Assertions.assertNotEquals((Object)pair, (Object)pair2);\n-        Assertions.assertNotEquals(pair.hashCode(), pair2.hashCode());\n+        final ImmutablePair of = ImmutablePair.of((Object)Integer.valueOf(0), (Object)\"foo\");\n+        final MutablePair of2 = MutablePair.of((Object)Integer.valueOf(0), (Object)\"foo\");\n+        Assertions.assertEquals((Object)of, (Object)of2);\n+        Assertions.assertEquals(((Pair)of).hashCode(), ((Pair)of2).hashCode());\n+        final HashSet set = new HashSet();\n+        set.add(of);\n+        Assertions.assertTrue(set.contains((Object)of2));\n+        ((Pair)of2).setValue((Object)\"bar\");\n+        Assertions.assertNotEquals((Object)of, (Object)of2);\n+        Assertions.assertNotEquals(((Pair)of).hashCode(), ((Pair)of2).hashCode());\n     }\n     \n     @Test\n     public void testEmptyArrayGenerics() {\n-        final Pair<Integer, String>[] empty = (Pair<Integer, String>[])Pair.emptyArray();\n-        Assertions.assertEquals(0, empty.length);\n+        Assertions.assertEquals(0, Pair.emptyArray().length);\n     }\n     \n     @Test\n     public void testEmptyArrayLength() {\n-        final Pair<Integer, String>[] empty = (Pair<Integer, String>[])Pair.EMPTY_ARRAY;\n-        Assertions.assertEquals(0, empty.length);\n+        Assertions.assertEquals(0, Pair.EMPTY_ARRAY.length);\n     }\n     \n     @Test\n     public void testFormattable_padded() {\n-        final Pair<String, String> pair = (Pair<String, String>)Pair.of((Object)\"Key\", (Object)\"Value\");\n-        Assertions.assertEquals((Object)\"         (Key,Value)\", (Object)String.format(\"%1$20s\", pair));\n+        Assertions.assertEquals((Object)\"         (Key,Value)\", (Object)String.format(\"%1$20s\", Pair.of((Object)\"Key\", (Object)\"Value\")));\n     }\n     \n     @Test\n     public void testFormattable_simple() {\n-        final Pair<String, String> pair = (Pair<String, String>)Pair.of((Object)\"Key\", (Object)\"Value\");\n-        Assertions.assertEquals((Object)\"(Key,Value)\", (Object)String.format(\"%1$s\", pair));\n+        Assertions.assertEquals((Object)\"(Key,Value)\", (Object)String.format(\"%1$s\", Pair.of((Object)\"Key\", (Object)\"Value\")));\n     }\n     \n     @Test\n     public void testMapEntry() {\n-        final Pair<Integer, String> pair = (Pair<Integer, String>)ImmutablePair.of((Object)Integer.valueOf(0), (Object)\"foo\");\n-        final HashMap<Integer, String> map = new HashMap<Integer, String>();\n-        map.put(Integer.valueOf(0), \"foo\");\n-        final Map.Entry<Integer, String> entry = (Map.Entry<Integer, String>)map.entrySet().iterator().next();\n-        Assertions.assertEquals((Object)pair, (Object)entry);\n-        Assertions.assertEquals(pair.hashCode(), entry.hashCode());\n+        final ImmutablePair of = ImmutablePair.of((Object)Integer.valueOf(0), (Object)\"foo\");\n+        final HashMap hashMap = new HashMap();\n+        hashMap.put(Integer.valueOf(0), \"foo\");\n+        final Map.Entry entry = (Map.Entry)hashMap.entrySet().iterator().next();\n+        Assertions.assertEquals((Object)of, (Object)entry);\n+        Assertions.assertEquals(((Pair)of).hashCode(), entry.hashCode());\n     }\n     \n     @Test\n     public void testPairOfMapEntry() {\n-        final HashMap<Integer, String> map = new HashMap<Integer, String>();\n-        map.put(Integer.valueOf(0), \"foo\");\n-        final Map.Entry<Integer, String> entry = (Map.Entry<Integer, String>)map.entrySet().iterator().next();\n-        final Pair<Integer, String> pair = (Pair<Integer, String>)Pair.of((Map.Entry)entry);\n-        Assertions.assertEquals(Integer.valueOf(entry.getKey()), (Integer)pair.getLeft());\n-        Assertions.assertEquals((Object)entry.getValue(), pair.getRight());\n+        final HashMap hashMap = new HashMap();\n+        hashMap.put(Integer.valueOf(0), \"foo\");\n+        final Map.Entry entry = (Map.Entry)hashMap.entrySet().iterator().next();\n+        final Pair of = Pair.of(entry);\n+        Assertions.assertEquals(Integer.valueOf(entry.getKey()), (Integer)of.getLeft());\n+        Assertions.assertEquals(entry.getValue(), of.getRight());\n     }\n     \n     @Test\n     public void testPairOfObjects() {\n-        final Pair<Integer, String> pair = (Pair<Integer, String>)Pair.of((Object)Integer.valueOf(0), (Object)\"foo\");\n-        Assertions.assertTrue(pair instanceof ImmutablePair);\n-        Assertions.assertEquals(0, (int)(Integer)((ImmutablePair)pair).left);\n-        Assertions.assertEquals((Object)\"foo\", ((ImmutablePair)pair).right);\n-        final Pair<Object, String> pair2 = (Pair<Object, String>)Pair.of((Object)null, (Object)\"bar\");\n-        Assertions.assertTrue(pair2 instanceof ImmutablePair);\n-        Assertions.assertNull(((ImmutablePair)pair2).left);\n-        Assertions.assertEquals((Object)\"bar\", ((ImmutablePair)pair2).right);\n-        final Pair pair3 = Pair.of((Object)null, (Object)null);\n-        Assertions.assertNull(pair3.getLeft());\n-        Assertions.assertNull(pair3.getRight());\n+        final Pair of = Pair.of((Object)Integer.valueOf(0), (Object)\"foo\");\n+        Assertions.assertTrue(of instanceof ImmutablePair);\n+        Assertions.assertEquals(0, (int)(Integer)((ImmutablePair)of).left);\n+        Assertions.assertEquals((Object)\"foo\", ((ImmutablePair)of).right);\n+        final Pair of2 = Pair.of((Object)null, (Object)\"bar\");\n+        Assertions.assertTrue(of2 instanceof ImmutablePair);\n+        Assertions.assertNull(((ImmutablePair)of2).left);\n+        Assertions.assertEquals((Object)\"bar\", ((ImmutablePair)of2).right);\n+        final Pair of3 = Pair.of((Object)null, (Object)null);\n+        Assertions.assertNull(of3.getLeft());\n+        Assertions.assertNull(of3.getRight());\n     }\n     \n     @Test\n     public void testToString() {\n-        final Pair<String, String> pair = (Pair<String, String>)Pair.of((Object)\"Key\", (Object)\"Value\");\n-        Assertions.assertEquals((Object)\"(Key,Value)\", (Object)pair.toString());\n+        Assertions.assertEquals((Object)\"(Key,Value)\", (Object)Pair.of((Object)\"Key\", (Object)\"Value\").toString());\n     }\n     \n     @Test\n     public void testToStringCustom() {\n-        final Calendar date = Calendar.getInstance();\n-        date.set(2011, 3, 25);\n-        final Pair<String, Calendar> pair = (Pair<String, Calendar>)Pair.of((Object)\"DOB\", (Object)date);\n-        Assertions.assertEquals((Object)\"Test created on 04-25-2011\", (Object)pair.toString(\"Test created on %2$tm-%2$td-%2$tY\"));\n+        final Calendar instance = Calendar.getInstance();\n+        instance.set(2011, 3, 25);\n+        Assertions.assertEquals((Object)\"Test created on 04-25-2011\", (Object)Pair.of((Object)\"DOB\", (Object)instance).toString(\"Test created on %2$tm-%2$td-%2$tY\"));\n     }\n }\n"}]}
