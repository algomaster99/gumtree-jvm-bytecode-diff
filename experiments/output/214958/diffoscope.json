{"diffoscope-json-version": 1, "source1": "first/SimpleElementValue.class", "source2": "second/SimpleElementValue.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,16 +4,16 @@\n import java.io.IOException;\n import java.io.DataOutputStream;\n \n public class SimpleElementValue extends ElementValue\n {\n     private int index;\n     \n-    public SimpleElementValue(final int type, final int index, final ConstantPool cpool) {\n-        super(type, cpool);\n+    public SimpleElementValue(final int n, final int index, final ConstantPool constantPool) {\n+        super(n, constantPool);\n         this.index = index;\n     }\n     \n     public int getIndex() {\n         return this.index;\n     }\n     \n@@ -21,150 +21,132 @@\n         this.index = index;\n     }\n     \n     public String getValueString() {\n         if (super.getType() != 115) {\n             throw new RuntimeException(\"Dont call getValueString() on a non STRING ElementValue\");\n         }\n-        final ConstantUtf8 c = (ConstantUtf8)super.getConstantPool().getConstant(this.getIndex(), (byte)1);\n-        return c.getBytes();\n+        return ((ConstantUtf8)super.getConstantPool().getConstant(this.getIndex(), (byte)1)).getBytes();\n     }\n     \n     public int getValueInt() {\n         if (super.getType() != 73) {\n             throw new RuntimeException(\"Dont call getValueString() on a non STRING ElementValue\");\n         }\n-        final ConstantInteger c = (ConstantInteger)super.getConstantPool().getConstant(this.getIndex(), (byte)3);\n-        return c.getBytes();\n+        return ((ConstantInteger)super.getConstantPool().getConstant(this.getIndex(), (byte)3)).getBytes();\n     }\n     \n     public byte getValueByte() {\n         if (super.getType() != 66) {\n             throw new RuntimeException(\"Dont call getValueByte() on a non BYTE ElementValue\");\n         }\n-        final ConstantInteger c = (ConstantInteger)super.getConstantPool().getConstant(this.getIndex(), (byte)3);\n-        return (byte)c.getBytes();\n+        return (byte)((ConstantInteger)super.getConstantPool().getConstant(this.getIndex(), (byte)3)).getBytes();\n     }\n     \n     public char getValueChar() {\n         if (super.getType() != 67) {\n             throw new RuntimeException(\"Dont call getValueChar() on a non CHAR ElementValue\");\n         }\n-        final ConstantInteger c = (ConstantInteger)super.getConstantPool().getConstant(this.getIndex(), (byte)3);\n-        return (char)c.getBytes();\n+        return (char)((ConstantInteger)super.getConstantPool().getConstant(this.getIndex(), (byte)3)).getBytes();\n     }\n     \n     public long getValueLong() {\n         if (super.getType() != 74) {\n             throw new RuntimeException(\"Dont call getValueLong() on a non LONG ElementValue\");\n         }\n-        final ConstantLong j = (ConstantLong)super.getConstantPool().getConstant(this.getIndex());\n-        return j.getBytes();\n+        return ((ConstantLong)super.getConstantPool().getConstant(this.getIndex())).getBytes();\n     }\n     \n     public float getValueFloat() {\n         if (super.getType() != 70) {\n             throw new RuntimeException(\"Dont call getValueFloat() on a non FLOAT ElementValue\");\n         }\n-        final ConstantFloat f = (ConstantFloat)super.getConstantPool().getConstant(this.getIndex());\n-        return f.getBytes();\n+        return ((ConstantFloat)super.getConstantPool().getConstant(this.getIndex())).getBytes();\n     }\n     \n     public double getValueDouble() {\n         if (super.getType() != 68) {\n             throw new RuntimeException(\"Dont call getValueDouble() on a non DOUBLE ElementValue\");\n         }\n-        final ConstantDouble d = (ConstantDouble)super.getConstantPool().getConstant(this.getIndex());\n-        return d.getBytes();\n+        return ((ConstantDouble)super.getConstantPool().getConstant(this.getIndex())).getBytes();\n     }\n     \n     public boolean getValueBoolean() {\n         if (super.getType() != 90) {\n             throw new RuntimeException(\"Dont call getValueBoolean() on a non BOOLEAN ElementValue\");\n         }\n-        final ConstantInteger bo = (ConstantInteger)super.getConstantPool().getConstant(this.getIndex());\n-        return bo.getBytes() != 0;\n+        return ((ConstantInteger)super.getConstantPool().getConstant(this.getIndex())).getBytes() != 0;\n     }\n     \n     public short getValueShort() {\n         if (super.getType() != 83) {\n             throw new RuntimeException(\"Dont call getValueShort() on a non SHORT ElementValue\");\n         }\n-        final ConstantInteger s = (ConstantInteger)super.getConstantPool().getConstant(this.getIndex());\n-        return (short)s.getBytes();\n+        return (short)((ConstantInteger)super.getConstantPool().getConstant(this.getIndex())).getBytes();\n     }\n     \n     public String toString() {\n         return this.stringifyValue();\n     }\n     \n     public String stringifyValue() {\n-        final ConstantPool cpool = super.getConstantPool();\n-        final int _type = super.getType();\n-        switch (_type) {\n+        final ConstantPool constantPool = super.getConstantPool();\n+        final int type = super.getType();\n+        switch (type) {\n             case 73: {\n-                final ConstantInteger c = (ConstantInteger)cpool.getConstant(this.getIndex(), (byte)3);\n-                return Integer.toString(c.getBytes());\n+                return Integer.toString(((ConstantInteger)constantPool.getConstant(this.getIndex(), (byte)3)).getBytes());\n             }\n             case 74: {\n-                final ConstantLong j = (ConstantLong)cpool.getConstant(this.getIndex(), (byte)5);\n-                return Long.toString(j.getBytes());\n+                return Long.toString(((ConstantLong)constantPool.getConstant(this.getIndex(), (byte)5)).getBytes());\n             }\n             case 68: {\n-                final ConstantDouble d = (ConstantDouble)cpool.getConstant(this.getIndex(), (byte)6);\n-                return Double.toString(d.getBytes());\n+                return Double.toString(((ConstantDouble)constantPool.getConstant(this.getIndex(), (byte)6)).getBytes());\n             }\n             case 70: {\n-                final ConstantFloat f = (ConstantFloat)cpool.getConstant(this.getIndex(), (byte)4);\n-                return Float.toString(f.getBytes());\n+                return Float.toString(((ConstantFloat)constantPool.getConstant(this.getIndex(), (byte)4)).getBytes());\n             }\n             case 83: {\n-                final ConstantInteger s = (ConstantInteger)cpool.getConstant(this.getIndex(), (byte)3);\n-                return Integer.toString(s.getBytes());\n+                return Integer.toString(((ConstantInteger)constantPool.getConstant(this.getIndex(), (byte)3)).getBytes());\n             }\n             case 66: {\n-                final ConstantInteger b = (ConstantInteger)cpool.getConstant(this.getIndex(), (byte)3);\n-                return Integer.toString(b.getBytes());\n+                return Integer.toString(((ConstantInteger)constantPool.getConstant(this.getIndex(), (byte)3)).getBytes());\n             }\n             case 67: {\n-                final ConstantInteger ch = (ConstantInteger)cpool.getConstant(this.getIndex(), (byte)3);\n-                return String.valueOf((char)ch.getBytes());\n+                return String.valueOf((char)((ConstantInteger)constantPool.getConstant(this.getIndex(), (byte)3)).getBytes());\n             }\n             case 90: {\n-                final ConstantInteger bo = (ConstantInteger)cpool.getConstant(this.getIndex(), (byte)3);\n-                if (bo.getBytes() == 0) {\n+                if (((ConstantInteger)constantPool.getConstant(this.getIndex(), (byte)3)).getBytes() == 0) {\n                     return \"false\";\n                 }\n                 return \"true\";\n             }\n             case 115: {\n-                final ConstantUtf8 cu8 = (ConstantUtf8)cpool.getConstant(this.getIndex(), (byte)1);\n-                return cu8.getBytes();\n+                return ((ConstantUtf8)constantPool.getConstant(this.getIndex(), (byte)1)).getBytes();\n             }\n             default: {\n-                throw new RuntimeException(\"SimpleElementValue class does not know how to stringify type \" + _type);\n+                throw new RuntimeException(\"SimpleElementValue class does not know how to stringify type \" + type);\n             }\n         }\n     }\n     \n-    public void dump(final DataOutputStream dos) throws IOException {\n-        final int _type = super.getType();\n-        dos.writeByte(_type);\n-        switch (_type) {\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        final int type = super.getType();\n+        dataOutputStream.writeByte(type);\n+        switch (type) {\n             case 66:\n             case 67:\n             case 68:\n             case 70:\n             case 73:\n             case 74:\n             case 83:\n             case 90:\n             case 115: {\n-                dos.writeShort(this.getIndex());\n+                dataOutputStream.writeShort(this.getIndex());\n                 return;\n             }\n             default: {\n-                throw new RuntimeException(\"SimpleElementValue doesnt know how to write out type \" + _type);\n+                throw new RuntimeException(\"SimpleElementValue doesnt know how to write out type \" + type);\n             }\n         }\n     }\n }\n"}]}
