{"diffoscope-json-version": 1, "source1": "first/ZipFile.class", "source2": "second/ZipFile.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,295 +1,295 @@\n-  SHA-256 checksum 43f03ea2e790c8638aed894be0e9d6e7d39a69fd3b47bf3670864cc352feaac7\n+  SHA-256 checksum 0557dfbfccabefef8e0c0a96c4b94a46f336a65ece805e9bfd52ff956ab91b7b\n   Compiled from \"ZipFile.java\"\n public class org.apache.commons.compress.archivers.zip.ZipFile implements java.io.Closeable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #2                          // org/apache/commons/compress/archivers/zip/ZipFile\n   super_class: #284                       // java/lang/Object\n   interfaces: 1, fields: 43, methods: 51, attributes: 3\n Constant pool:\n-     #1 = Class              #573         // org/apache/commons/compress/archivers/zip/ZipConstants\n-     #2 = Class              #574         // org/apache/commons/compress/archivers/zip/ZipFile\n-     #3 = Fieldref           #2.#575      // org/apache/commons/compress/archivers/zip/ZipFile.archive:Ljava/nio/channels/SeekableByteChannel;\n-     #4 = Methodref          #576.#577    // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n-     #5 = Class              #578         // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-     #6 = String             #579         // UTF8\n-     #7 = Methodref          #2.#580      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-     #8 = Methodref          #56.#581     // java/io/File.toPath:()Ljava/nio/file/Path;\n-     #9 = Methodref          #2.#582      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n-    #10 = Methodref          #2.#583      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n-    #11 = Fieldref           #584.#585    // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-    #12 = Methodref          #586.#587    // java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n-    #13 = Class              #588         // java/nio/file/attribute/FileAttribute\n-    #14 = Methodref          #589.#590    // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-    #15 = Methodref          #56.#591     // java/io/File.getAbsolutePath:()Ljava/lang/String;\n-    #16 = Methodref          #2.#592      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n-    #17 = Methodref          #2.#593      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n-    #18 = InterfaceMethodref #594.#595    // java/nio/file/Path.toAbsolutePath:()Ljava/nio/file/Path;\n-    #19 = InterfaceMethodref #594.#596    // java/nio/file/Path.toString:()Ljava/lang/String;\n-    #20 = String             #597         // unknown archive\n-    #21 = Methodref          #2.#598      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n-    #22 = Methodref          #284.#599    // java/lang/Object.\"<init>\":()V\n-    #23 = Class              #600         // java/util/LinkedList\n-    #24 = Methodref          #23.#599     // java/util/LinkedList.\"<init>\":()V\n-    #25 = Fieldref           #2.#601      // org/apache/commons/compress/archivers/zip/ZipFile.entries:Ljava/util/List;\n-    #26 = Class              #602         // java/util/HashMap\n-    #27 = Methodref          #26.#603     // java/util/HashMap.\"<init>\":(I)V\n-    #28 = Fieldref           #2.#604      // org/apache/commons/compress/archivers/zip/ZipFile.nameMap:Ljava/util/Map;\n-    #29 = Fieldref           #2.#605      // org/apache/commons/compress/archivers/zip/ZipFile.closed:Z\n-    #30 = Fieldref           #2.#606      // org/apache/commons/compress/archivers/zip/ZipFile.dwordBuf:[B\n-    #31 = Fieldref           #2.#607      // org/apache/commons/compress/archivers/zip/ZipFile.wordBuf:[B\n-    #32 = Fieldref           #2.#608      // org/apache/commons/compress/archivers/zip/ZipFile.cfhBuf:[B\n-    #33 = Fieldref           #2.#609      // org/apache/commons/compress/archivers/zip/ZipFile.shortBuf:[B\n-    #34 = Methodref          #610.#611    // java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-    #35 = Fieldref           #2.#612      // org/apache/commons/compress/archivers/zip/ZipFile.dwordBbuf:Ljava/nio/ByteBuffer;\n-    #36 = Fieldref           #2.#613      // org/apache/commons/compress/archivers/zip/ZipFile.wordBbuf:Ljava/nio/ByteBuffer;\n-    #37 = Fieldref           #2.#614      // org/apache/commons/compress/archivers/zip/ZipFile.cfhBbuf:Ljava/nio/ByteBuffer;\n-    #38 = Fieldref           #2.#615      // org/apache/commons/compress/archivers/zip/ZipFile.shortBbuf:Ljava/nio/ByteBuffer;\n-    #39 = Class              #616         // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-    #40 = Fieldref           #2.#617      // org/apache/commons/compress/archivers/zip/ZipFile.isSplitZipArchive:Z\n-    #41 = Fieldref           #2.#618      // org/apache/commons/compress/archivers/zip/ZipFile.archiveName:Ljava/lang/String;\n-    #42 = Fieldref           #2.#619      // org/apache/commons/compress/archivers/zip/ZipFile.encoding:Ljava/lang/String;\n-    #43 = Methodref          #5.#620      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-    #44 = Fieldref           #2.#621      // org/apache/commons/compress/archivers/zip/ZipFile.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-    #45 = Fieldref           #2.#622      // org/apache/commons/compress/archivers/zip/ZipFile.useUnicodeExtraFields:Z\n-    #46 = Methodref          #2.#623      // org/apache/commons/compress/archivers/zip/ZipFile.populateFromCentralDirectory:()Ljava/util/Map;\n-    #47 = Methodref          #2.#624      // org/apache/commons/compress/archivers/zip/ZipFile.resolveLocalFileHeaderData:(Ljava/util/Map;)V\n-    #48 = Methodref          #2.#625      // org/apache/commons/compress/archivers/zip/ZipFile.fillNameMap:()V\n-    #49 = Class              #626         // java/io/IOException\n-    #50 = Class              #627         // java/lang/StringBuilder\n-    #51 = Methodref          #50.#599     // java/lang/StringBuilder.\"<init>\":()V\n-    #52 = String             #628         // Error on ZipFile\n-    #53 = Methodref          #50.#629     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #54 = Methodref          #50.#596     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-    #55 = Methodref          #49.#630     // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-    #56 = Class              #631         // java/io/File\n-    #57 = Methodref          #56.#632     // java/io/File.\"<init>\":(Ljava/lang/String;)V\n-    #58 = Methodref          #633.#634    // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-    #59 = InterfaceMethodref #635.#636    // java/nio/channels/SeekableByteChannel.close:()V\n-    #60 = Methodref          #2.#637      // org/apache/commons/compress/archivers/zip/ZipFile.getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n-    #61 = InterfaceMethodref #638.#639    // java/util/Enumeration.hasMoreElements:()Z\n-    #62 = InterfaceMethodref #638.#640    // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n-    #63 = Class              #641         // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-    #64 = InterfaceMethodref #642.#643    // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate.test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-    #65 = Methodref          #2.#644      // org/apache/commons/compress/archivers/zip/ZipFile.getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-    #66 = Methodref          #645.#646    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-    #67 = Class              #647         // java/lang/IllegalArgumentException\n-    #68 = String             #648         // Corrupted archive, stream boundaries are out of range\n-    #69 = Methodref          #67.#632     // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #70 = Class              #649         // java/nio/channels/FileChannel\n-    #71 = Class              #650         // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n-    #72 = Methodref          #71.#651     // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-    #73 = Class              #652         // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n-    #74 = Methodref          #73.#653     // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n-    #75 = InvokeDynamic      #0:#659      // #0:accept:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n-    #76 = InterfaceMethodref #88.#660     // java/util/List.forEach:(Ljava/util/function/Consumer;)V\n-    #77 = Methodref          #2.#636      // org/apache/commons/compress/archivers/zip/ZipFile.close:()V\n-    #78 = Methodref          #284.#661    // java/lang/Object.finalize:()V\n-    #79 = Fieldref           #2.#662      // org/apache/commons/compress/archivers/zip/ZipFile.firstLocalFileHeaderOffset:J\n-    #80 = Methodref          #2.#663      // org/apache/commons/compress/archivers/zip/ZipFile.createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n-    #81 = Methodref          #63.#664     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n-    #82 = Class              #665         // org/apache/commons/compress/archivers/EntryStreamOffsets\n+     #1 = Class              #561         // org/apache/commons/compress/archivers/zip/ZipConstants\n+     #2 = Class              #562         // org/apache/commons/compress/archivers/zip/ZipFile\n+     #3 = Fieldref           #2.#563      // org/apache/commons/compress/archivers/zip/ZipFile.archive:Ljava/nio/channels/SeekableByteChannel;\n+     #4 = Methodref          #564.#565    // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n+     #5 = Class              #566         // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+     #6 = String             #567         // UTF8\n+     #7 = Methodref          #2.#568      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+     #8 = Methodref          #56.#569     // java/io/File.toPath:()Ljava/nio/file/Path;\n+     #9 = Methodref          #2.#570      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n+    #10 = Methodref          #2.#571      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n+    #11 = Fieldref           #572.#573    // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+    #12 = Methodref          #574.#575    // java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n+    #13 = Class              #576         // java/nio/file/attribute/FileAttribute\n+    #14 = Methodref          #577.#578    // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+    #15 = Methodref          #56.#579     // java/io/File.getAbsolutePath:()Ljava/lang/String;\n+    #16 = Methodref          #2.#580      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n+    #17 = Methodref          #2.#581      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n+    #18 = InterfaceMethodref #582.#583    // java/nio/file/Path.toAbsolutePath:()Ljava/nio/file/Path;\n+    #19 = InterfaceMethodref #582.#584    // java/nio/file/Path.toString:()Ljava/lang/String;\n+    #20 = String             #585         // unknown archive\n+    #21 = Methodref          #2.#586      // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n+    #22 = Methodref          #284.#587    // java/lang/Object.\"<init>\":()V\n+    #23 = Class              #588         // java/util/LinkedList\n+    #24 = Methodref          #23.#587     // java/util/LinkedList.\"<init>\":()V\n+    #25 = Fieldref           #2.#589      // org/apache/commons/compress/archivers/zip/ZipFile.entries:Ljava/util/List;\n+    #26 = Class              #590         // java/util/HashMap\n+    #27 = Methodref          #26.#591     // java/util/HashMap.\"<init>\":(I)V\n+    #28 = Fieldref           #2.#592      // org/apache/commons/compress/archivers/zip/ZipFile.nameMap:Ljava/util/Map;\n+    #29 = Fieldref           #2.#593      // org/apache/commons/compress/archivers/zip/ZipFile.closed:Z\n+    #30 = Fieldref           #2.#594      // org/apache/commons/compress/archivers/zip/ZipFile.dwordBuf:[B\n+    #31 = Fieldref           #2.#595      // org/apache/commons/compress/archivers/zip/ZipFile.wordBuf:[B\n+    #32 = Fieldref           #2.#596      // org/apache/commons/compress/archivers/zip/ZipFile.cfhBuf:[B\n+    #33 = Fieldref           #2.#597      // org/apache/commons/compress/archivers/zip/ZipFile.shortBuf:[B\n+    #34 = Methodref          #598.#599    // java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n+    #35 = Fieldref           #2.#600      // org/apache/commons/compress/archivers/zip/ZipFile.dwordBbuf:Ljava/nio/ByteBuffer;\n+    #36 = Fieldref           #2.#601      // org/apache/commons/compress/archivers/zip/ZipFile.wordBbuf:Ljava/nio/ByteBuffer;\n+    #37 = Fieldref           #2.#602      // org/apache/commons/compress/archivers/zip/ZipFile.cfhBbuf:Ljava/nio/ByteBuffer;\n+    #38 = Fieldref           #2.#603      // org/apache/commons/compress/archivers/zip/ZipFile.shortBbuf:Ljava/nio/ByteBuffer;\n+    #39 = Class              #604         // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+    #40 = Fieldref           #2.#605      // org/apache/commons/compress/archivers/zip/ZipFile.isSplitZipArchive:Z\n+    #41 = Fieldref           #2.#606      // org/apache/commons/compress/archivers/zip/ZipFile.archiveName:Ljava/lang/String;\n+    #42 = Fieldref           #2.#607      // org/apache/commons/compress/archivers/zip/ZipFile.encoding:Ljava/lang/String;\n+    #43 = Methodref          #5.#608      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+    #44 = Fieldref           #2.#609      // org/apache/commons/compress/archivers/zip/ZipFile.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+    #45 = Fieldref           #2.#610      // org/apache/commons/compress/archivers/zip/ZipFile.useUnicodeExtraFields:Z\n+    #46 = Methodref          #2.#611      // org/apache/commons/compress/archivers/zip/ZipFile.populateFromCentralDirectory:()Ljava/util/Map;\n+    #47 = Methodref          #2.#612      // org/apache/commons/compress/archivers/zip/ZipFile.resolveLocalFileHeaderData:(Ljava/util/Map;)V\n+    #48 = Methodref          #2.#613      // org/apache/commons/compress/archivers/zip/ZipFile.fillNameMap:()V\n+    #49 = Class              #614         // java/io/IOException\n+    #50 = Class              #615         // java/lang/StringBuilder\n+    #51 = Methodref          #50.#587     // java/lang/StringBuilder.\"<init>\":()V\n+    #52 = String             #616         // Error on ZipFile\n+    #53 = Methodref          #50.#617     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+    #54 = Methodref          #50.#584     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+    #55 = Methodref          #49.#618     // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+    #56 = Class              #619         // java/io/File\n+    #57 = Methodref          #56.#620     // java/io/File.\"<init>\":(Ljava/lang/String;)V\n+    #58 = Methodref          #621.#622    // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+    #59 = InterfaceMethodref #403.#623    // java/nio/channels/SeekableByteChannel.close:()V\n+    #60 = Methodref          #2.#624      // org/apache/commons/compress/archivers/zip/ZipFile.getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n+    #61 = InterfaceMethodref #425.#625    // java/util/Enumeration.hasMoreElements:()Z\n+    #62 = InterfaceMethodref #425.#626    // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n+    #63 = Class              #627         // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+    #64 = InterfaceMethodref #628.#629    // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate.test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+    #65 = Methodref          #2.#630      // org/apache/commons/compress/archivers/zip/ZipFile.getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+    #66 = Methodref          #631.#632    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+    #67 = Class              #633         // java/lang/IllegalArgumentException\n+    #68 = String             #634         // Corrupted archive, stream boundaries are out of range\n+    #69 = Methodref          #67.#620     // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+    #70 = Class              #635         // java/nio/channels/FileChannel\n+    #71 = Class              #636         // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n+    #72 = Methodref          #71.#637     // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+    #73 = Class              #638         // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n+    #74 = Methodref          #73.#639     // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n+    #75 = InvokeDynamic      #0:#645      // #0:accept:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n+    #76 = InterfaceMethodref #88.#646     // java/util/List.forEach:(Ljava/util/function/Consumer;)V\n+    #77 = Methodref          #2.#623      // org/apache/commons/compress/archivers/zip/ZipFile.close:()V\n+    #78 = Methodref          #284.#647    // java/lang/Object.finalize:()V\n+    #79 = Fieldref           #2.#648      // org/apache/commons/compress/archivers/zip/ZipFile.firstLocalFileHeaderOffset:J\n+    #80 = Methodref          #2.#649      // org/apache/commons/compress/archivers/zip/ZipFile.createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n+    #81 = Methodref          #63.#650     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n+    #82 = Class              #651         // org/apache/commons/compress/archivers/EntryStreamOffsets\n     #83 = Long               -1l\n-    #85 = Methodref          #2.#666      // org/apache/commons/compress/archivers/zip/ZipFile.setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n-    #86 = Methodref          #667.#668    // java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n-    #87 = InterfaceMethodref #669.#670    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-    #88 = Class              #671         // java/util/List\n-    #89 = Methodref          #667.#672    // java/util/Collections.emptyList:()Ljava/util/List;\n-    #90 = Fieldref           #63.#673     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.EMPTY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-    #91 = InterfaceMethodref #88.#674     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-    #92 = Class              #454         // \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\"\n-    #93 = Fieldref           #2.#675      // org/apache/commons/compress/archivers/zip/ZipFile.offsetComparator:Ljava/util/Comparator;\n-    #94 = Methodref          #676.#677    // java/util/Arrays.sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n-    #95 = Methodref          #676.#678    // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-    #96 = Methodref          #23.#674     // java/util/LinkedList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-    #97 = Methodref          #23.#679     // java/util/LinkedList.getFirst:()Ljava/lang/Object;\n-    #98 = Class              #680         // org/apache/commons/compress/archivers/zip/ZipFile$Entry\n-    #99 = Methodref          #633.#681    // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #100 = Class              #682         // java/io/BufferedInputStream\n-   #101 = Methodref          #100.#683    // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #102 = Fieldref           #286.#684    // org/apache/commons/compress/archivers/zip/ZipFile$2.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n-   #103 = Methodref          #63.#685     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-   #104 = Methodref          #686.#687    // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #105 = Methodref          #686.#688    // org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n-   #106 = Class              #689         // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n-   #107 = Methodref          #106.#683    // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #108 = Class              #690         // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-   #109 = Methodref          #108.#683    // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #110 = Class              #691         // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-   #111 = Methodref          #63.#692     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #112 = Methodref          #693.#694    // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n-   #113 = Methodref          #693.#695    // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n-   #114 = Methodref          #110.#696    // org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n-   #115 = String             #697         // bad IMPLODE data\n-   #116 = Class              #698         // java/util/zip/Inflater\n-   #117 = Methodref          #116.#699    // java/util/zip/Inflater.\"<init>\":(Z)V\n-   #118 = Class              #700         // org/apache/commons/compress/archivers/zip/ZipFile$1\n-   #119 = Class              #701         // java/io/SequenceInputStream\n-   #120 = Class              #702         // java/io/ByteArrayInputStream\n-   #121 = Fieldref           #2.#703      // org/apache/commons/compress/archivers/zip/ZipFile.ONE_ZERO_BYTE:[B\n-   #122 = Methodref          #120.#704    // java/io/ByteArrayInputStream.\"<init>\":([B)V\n-   #123 = Methodref          #119.#705    // java/io/SequenceInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n-   #124 = Methodref          #118.#706    // org/apache/commons/compress/archivers/zip/ZipFile$1.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n-   #125 = Class              #707         // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-   #126 = Methodref          #125.#683    // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #127 = Class              #708         // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-   #128 = Methodref          #127.#683    // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #129 = Class              #709         // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-   #130 = Methodref          #129.#710    // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #131 = Methodref          #2.#711      // org/apache/commons/compress/archivers/zip/ZipFile.getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-   #132 = Methodref          #63.#712     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-   #133 = Methodref          #63.#713     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z\n-   #134 = Methodref          #2.#714      // org/apache/commons/compress/archivers/zip/ZipFile.getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-   #135 = Methodref          #576.#715    // org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n-   #136 = InterfaceMethodref #716.#717    // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #137 = Methodref          #718.#636    // java/io/InputStream.close:()V\n-   #138 = Class              #719         // java/lang/Throwable\n-   #139 = Methodref          #138.#720    // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #140 = Methodref          #26.#599     // java/util/HashMap.\"<init>\":()V\n-   #141 = Methodref          #2.#721      // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory:()V\n-   #142 = InterfaceMethodref #635.#722    // java/nio/channels/SeekableByteChannel.position:()J\n-   #143 = Fieldref           #2.#723      // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartOffset:J\n-   #144 = Methodref          #610.#724    // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-   #145 = Methodref          #576.#725    // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-   #146 = Methodref          #726.#727    // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-   #147 = Fieldref           #2.#728      // org/apache/commons/compress/archivers/zip/ZipFile.CFH_SIG:J\n-   #148 = Methodref          #2.#729      // org/apache/commons/compress/archivers/zip/ZipFile.startsWithLocalFileHeader:()Z\n-   #149 = String             #730         // Central directory is empty, can\\'t expand corrupt archive.\n-   #150 = Methodref          #49.#632     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #151 = Methodref          #2.#731      // org/apache/commons/compress/archivers/zip/ZipFile.readCentralDirectoryEntry:(Ljava/util/Map;)V\n-   #152 = Methodref          #2.#732      // org/apache/commons/compress/archivers/zip/ZipFile.positionAtEndOfCentralDirectoryRecord:()V\n+    #85 = Methodref          #2.#652      // org/apache/commons/compress/archivers/zip/ZipFile.setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n+    #86 = Methodref          #653.#654    // java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n+    #87 = InterfaceMethodref #405.#655    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+    #88 = Class              #656         // java/util/List\n+    #89 = Methodref          #653.#657    // java/util/Collections.emptyList:()Ljava/util/List;\n+    #90 = Fieldref           #63.#658     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.EMPTY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+    #91 = InterfaceMethodref #88.#659     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+    #92 = Class              #450         // \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\"\n+    #93 = Fieldref           #2.#660      // org/apache/commons/compress/archivers/zip/ZipFile.offsetComparator:Ljava/util/Comparator;\n+    #94 = Methodref          #661.#662    // java/util/Arrays.sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n+    #95 = Methodref          #661.#663    // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+    #96 = Methodref          #23.#659     // java/util/LinkedList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+    #97 = Methodref          #23.#664     // java/util/LinkedList.getFirst:()Ljava/lang/Object;\n+    #98 = Class              #665         // org/apache/commons/compress/archivers/zip/ZipFile$Entry\n+    #99 = Methodref          #621.#666    // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #100 = Class              #667         // java/io/BufferedInputStream\n+   #101 = Methodref          #100.#668    // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #102 = Fieldref           #286.#669    // org/apache/commons/compress/archivers/zip/ZipFile$2.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+   #103 = Methodref          #63.#670     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+   #104 = Methodref          #671.#672    // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #105 = Methodref          #671.#673    // org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n+   #106 = Class              #674         // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n+   #107 = Methodref          #106.#668    // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #108 = Class              #675         // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+   #109 = Methodref          #108.#668    // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #110 = Class              #676         // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+   #111 = Methodref          #63.#677     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #112 = Methodref          #508.#678    // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n+   #113 = Methodref          #508.#679    // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n+   #114 = Methodref          #110.#680    // org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n+   #115 = String             #681         // bad IMPLODE data\n+   #116 = Class              #682         // java/util/zip/Inflater\n+   #117 = Methodref          #116.#683    // java/util/zip/Inflater.\"<init>\":(Z)V\n+   #118 = Class              #684         // org/apache/commons/compress/archivers/zip/ZipFile$1\n+   #119 = Class              #685         // java/io/SequenceInputStream\n+   #120 = Class              #686         // java/io/ByteArrayInputStream\n+   #121 = Fieldref           #2.#687      // org/apache/commons/compress/archivers/zip/ZipFile.ONE_ZERO_BYTE:[B\n+   #122 = Methodref          #120.#688    // java/io/ByteArrayInputStream.\"<init>\":([B)V\n+   #123 = Methodref          #119.#689    // java/io/SequenceInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n+   #124 = Methodref          #118.#690    // org/apache/commons/compress/archivers/zip/ZipFile$1.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n+   #125 = Class              #691         // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+   #126 = Methodref          #125.#668    // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #127 = Class              #692         // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+   #128 = Methodref          #127.#668    // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #129 = Class              #693         // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+   #130 = Methodref          #129.#694    // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #131 = Methodref          #2.#695      // org/apache/commons/compress/archivers/zip/ZipFile.getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+   #132 = Methodref          #63.#696     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+   #133 = Methodref          #63.#697     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z\n+   #134 = Methodref          #2.#698      // org/apache/commons/compress/archivers/zip/ZipFile.getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+   #135 = Methodref          #564.#699    // org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n+   #136 = InterfaceMethodref #509.#700    // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+   #137 = Methodref          #435.#623    // java/io/InputStream.close:()V\n+   #138 = Class              #701         // java/lang/Throwable\n+   #139 = Methodref          #138.#702    // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+   #140 = Methodref          #26.#587     // java/util/HashMap.\"<init>\":()V\n+   #141 = Methodref          #2.#703      // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory:()V\n+   #142 = InterfaceMethodref #403.#704    // java/nio/channels/SeekableByteChannel.position:()J\n+   #143 = Fieldref           #2.#705      // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartOffset:J\n+   #144 = Methodref          #598.#706    // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+   #145 = Methodref          #564.#707    // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+   #146 = Methodref          #708.#709    // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+   #147 = Fieldref           #2.#710      // org/apache/commons/compress/archivers/zip/ZipFile.CFH_SIG:J\n+   #148 = Methodref          #2.#711      // org/apache/commons/compress/archivers/zip/ZipFile.startsWithLocalFileHeader:()Z\n+   #149 = String             #712         // Central directory is empty, can\\'t expand corrupt archive.\n+   #150 = Methodref          #49.#620     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #151 = Methodref          #2.#713      // org/apache/commons/compress/archivers/zip/ZipFile.readCentralDirectoryEntry:(Ljava/util/Map;)V\n+   #152 = Methodref          #2.#714      // org/apache/commons/compress/archivers/zip/ZipFile.positionAtEndOfCentralDirectoryRecord:()V\n    #153 = Long               20l\n-   #155 = InterfaceMethodref #635.#733    // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #156 = Fieldref           #645.#734    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n-   #157 = Methodref          #676.#735    // java/util/Arrays.equals:([B[B)Z\n-   #158 = Methodref          #2.#736      // org/apache/commons/compress/archivers/zip/ZipFile.skipBytes:(I)V\n-   #159 = Methodref          #2.#737      // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory32:()V\n-   #160 = Methodref          #2.#738      // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory64:()V\n-   #161 = Methodref          #739.#740    // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n-   #162 = Fieldref           #2.#741      // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartDiskNumber:J\n-   #163 = Fieldref           #2.#742      // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartRelativeOffset:J\n-   #164 = Methodref          #39.#743     // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n-   #165 = Methodref          #744.#745    // java/lang/Long.max:(JJ)J\n-   #166 = Methodref          #261.#746    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n-   #167 = Fieldref           #645.#747    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n-   #168 = Class              #748         // java/util/zip/ZipException\n-   #169 = String             #749         // Archive\\'s ZIP64 end of central directory locator is corrupt.\n-   #170 = Methodref          #168.#632    // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+   #155 = InterfaceMethodref #403.#715    // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #156 = Fieldref           #631.#716    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n+   #157 = Methodref          #661.#717    // java/util/Arrays.equals:([B[B)Z\n+   #158 = Methodref          #2.#718      // org/apache/commons/compress/archivers/zip/ZipFile.skipBytes:(I)V\n+   #159 = Methodref          #2.#719      // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory32:()V\n+   #160 = Methodref          #2.#720      // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory64:()V\n+   #161 = Methodref          #721.#722    // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+   #162 = Fieldref           #2.#723      // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartDiskNumber:J\n+   #163 = Fieldref           #2.#724      // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartRelativeOffset:J\n+   #164 = Methodref          #39.#725     // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+   #165 = Methodref          #726.#727    // java/lang/Long.max:(JJ)J\n+   #166 = Methodref          #261.#728    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+   #167 = Fieldref           #631.#729    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n+   #168 = Class              #730         // java/util/zip/ZipException\n+   #169 = String             #731         // Archive\\'s ZIP64 end of central directory locator is corrupt.\n+   #170 = Methodref          #168.#620    // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n    #171 = Long               22l\n    #173 = Long               65557l\n-   #175 = Fieldref           #645.#750    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n-   #176 = Methodref          #2.#751      // org/apache/commons/compress/archivers/zip/ZipFile.tryToLocateSignature:(JJ[B)Z\n-   #177 = String             #752         // Archive is not a ZIP archive\n-   #178 = Methodref          #98.#599     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.\"<init>\":()V\n-   #179 = Methodref          #739.#753    // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-   #180 = Methodref          #98.#754     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V\n-   #181 = Methodref          #98.#755     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V\n-   #182 = Methodref          #98.#756     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V\n-   #183 = Methodref          #693.#757    // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #184 = Methodref          #693.#758    // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n-   #185 = Fieldref           #5.#759      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #186 = Fieldref           #760.#761    // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-   #187 = Methodref          #98.#762     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-   #188 = Methodref          #98.#763     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-   #189 = Methodref          #98.#764     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V\n-   #190 = Methodref          #98.#765     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V\n-   #191 = Methodref          #726.#766    // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-   #192 = Methodref          #633.#767    // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n-   #193 = Methodref          #98.#768     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V\n-   #194 = Methodref          #98.#769     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V\n-   #195 = String             #770         // broken archive, entry with negative compressed size\n-   #196 = Methodref          #98.#771     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V\n-   #197 = String             #772         // broken archive, entry with negative size\n-   #198 = Methodref          #98.#773     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V\n-   #199 = String             #774         // broken archive, entry with negative fileNameLen\n-   #200 = String             #775         // broken archive, entry with negative extraLen\n-   #201 = String             #776         // broken archive, entry with negative commentLen\n-   #202 = Methodref          #98.#777     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDiskNumberStart:(J)V\n-   #203 = Methodref          #98.#778     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V\n-   #204 = Methodref          #98.#779     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V\n-   #205 = Methodref          #576.#780    // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n-   #206 = Class              #781         // java/io/EOFException\n-   #207 = Methodref          #206.#599    // java/io/EOFException.\"<init>\":()V\n-   #208 = Methodref          #98.#782     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V\n-   #209 = Methodref          #98.#783     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V\n-   #210 = InterfaceMethodref #88.#784     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #211 = Methodref          #98.#785     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V\n-   #212 = Class              #786         // java/lang/RuntimeException\n-   #213 = String             #787         // Invalid extra data in entry\n-   #214 = Methodref          #98.#788     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.getName:()Ljava/lang/String;\n-   #215 = Methodref          #168.#789    // java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-   #216 = Methodref          #2.#790      // org/apache/commons/compress/archivers/zip/ZipFile.setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #217 = Methodref          #2.#791      // org/apache/commons/compress/archivers/zip/ZipFile.sanityCheckLFHOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #218 = Methodref          #98.#792     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V\n-   #219 = Class              #793         // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n-   #220 = Methodref          #219.#794    // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.\"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-   #221 = InterfaceMethodref #669.#795    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #222 = Methodref          #98.#796     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V\n-   #223 = InterfaceMethodref #88.#797     // java/util/List.iterator:()Ljava/util/Iterator;\n-   #224 = InterfaceMethodref #798.#799    // java/util/Iterator.hasNext:()Z\n-   #225 = InterfaceMethodref #798.#800    // java/util/Iterator.next:()Ljava/lang/Object;\n-   #226 = Methodref          #98.#801     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V\n-   #227 = InterfaceMethodref #669.#802    // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-   #228 = Methodref          #219.#803    // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-   #229 = Methodref          #219.#804    // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-   #230 = Methodref          #633.#805    // org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-   #231 = Methodref          #63.#806     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n-   #232 = String             #807         // broken archive, entry with negative disk number\n-   #233 = Methodref          #63.#808     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-   #234 = String             #809         // broken archive, entry with negative local file header offset\n-   #235 = String             #810         // local file header for\n-   #236 = Methodref          #63.#788     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-   #237 = String             #811         //  starts on a later disk than central directory\n-   #238 = String             #812         //  starts after central directory\n+   #175 = Fieldref           #631.#732    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+   #176 = Methodref          #2.#733      // org/apache/commons/compress/archivers/zip/ZipFile.tryToLocateSignature:(JJ[B)Z\n+   #177 = String             #734         // Archive is not a ZIP archive\n+   #178 = Methodref          #98.#587     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.\"<init>\":()V\n+   #179 = Methodref          #721.#735    // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+   #180 = Methodref          #98.#736     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V\n+   #181 = Methodref          #98.#737     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V\n+   #182 = Methodref          #98.#738     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V\n+   #183 = Methodref          #508.#739    // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #184 = Methodref          #508.#740    // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n+   #185 = Fieldref           #5.#741      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #186 = Fieldref           #742.#743    // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+   #187 = Methodref          #98.#744     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+   #188 = Methodref          #98.#745     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+   #189 = Methodref          #98.#746     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V\n+   #190 = Methodref          #98.#747     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V\n+   #191 = Methodref          #708.#748    // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+   #192 = Methodref          #621.#749    // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n+   #193 = Methodref          #98.#750     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V\n+   #194 = Methodref          #98.#751     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V\n+   #195 = String             #752         // broken archive, entry with negative compressed size\n+   #196 = Methodref          #98.#753     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V\n+   #197 = String             #754         // broken archive, entry with negative size\n+   #198 = Methodref          #98.#755     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V\n+   #199 = String             #756         // broken archive, entry with negative fileNameLen\n+   #200 = String             #757         // broken archive, entry with negative extraLen\n+   #201 = String             #758         // broken archive, entry with negative commentLen\n+   #202 = Methodref          #98.#759     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDiskNumberStart:(J)V\n+   #203 = Methodref          #98.#760     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V\n+   #204 = Methodref          #98.#761     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V\n+   #205 = Methodref          #564.#762    // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n+   #206 = Class              #763         // java/io/EOFException\n+   #207 = Methodref          #206.#587    // java/io/EOFException.\"<init>\":()V\n+   #208 = Methodref          #98.#764     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V\n+   #209 = Methodref          #98.#765     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V\n+   #210 = InterfaceMethodref #88.#766     // java/util/List.add:(Ljava/lang/Object;)Z\n+   #211 = Methodref          #98.#767     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V\n+   #212 = Class              #768         // java/lang/RuntimeException\n+   #213 = String             #769         // Invalid extra data in entry\n+   #214 = Methodref          #98.#770     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.getName:()Ljava/lang/String;\n+   #215 = Methodref          #168.#771    // java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+   #216 = Methodref          #2.#772      // org/apache/commons/compress/archivers/zip/ZipFile.setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #217 = Methodref          #2.#773      // org/apache/commons/compress/archivers/zip/ZipFile.sanityCheckLFHOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #218 = Methodref          #98.#774     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V\n+   #219 = Class              #775         // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n+   #220 = Methodref          #219.#776    // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.\"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+   #221 = InterfaceMethodref #405.#777    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #222 = Methodref          #98.#778     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V\n+   #223 = InterfaceMethodref #88.#779     // java/util/List.iterator:()Ljava/util/Iterator;\n+   #224 = InterfaceMethodref #520.#780    // java/util/Iterator.hasNext:()Z\n+   #225 = InterfaceMethodref #520.#781    // java/util/Iterator.next:()Ljava/lang/Object;\n+   #226 = Methodref          #98.#782     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V\n+   #227 = InterfaceMethodref #405.#783    // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+   #228 = Methodref          #219.#784    // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+   #229 = Methodref          #219.#785    // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+   #230 = Methodref          #621.#786    // org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+   #231 = Methodref          #63.#787     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+   #232 = String             #788         // broken archive, entry with negative disk number\n+   #233 = Methodref          #63.#789     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+   #234 = String             #790         // broken archive, entry with negative local file header offset\n+   #235 = String             #791         // local file header for\n+   #236 = Methodref          #63.#770     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+   #237 = String             #792         //  starts on a later disk than central directory\n+   #238 = String             #793         //  starts after central directory\n    #239 = Long               26l\n-   #241 = Methodref          #610.#813    // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n-   #242 = Methodref          #610.#814    // java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n+   #241 = Methodref          #598.#794    // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+   #242 = Methodref          #598.#795    // java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n    #243 = Long               2l\n-   #245 = Methodref          #63.#815     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n-   #246 = String             #816         // data for\n-   #247 = String             #817         //  overlaps with central directory.\n-   #248 = Fieldref           #250.#818    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #249 = Methodref          #63.#819     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-   #250 = Class              #820         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #251 = String             #821         // archive contains unparseable zip64 extra field\n-   #252 = Methodref          #63.#822     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+   #245 = Methodref          #63.#796     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n+   #246 = String             #797         // data for\n+   #247 = String             #798         //  overlaps with central directory.\n+   #248 = Fieldref           #250.#799    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #249 = Methodref          #63.#800     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+   #250 = Class              #801         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+   #251 = String             #802         // archive contains unparseable zip64 extra field\n+   #252 = Methodref          #63.#803     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n    #253 = Long               4294967295l\n    #255 = Long               65535l\n-   #257 = Methodref          #250.#823    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V\n-   #258 = Methodref          #250.#824    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #259 = Methodref          #261.#825    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-   #260 = Methodref          #63.#773     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n-   #261 = Class              #826         // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-   #262 = Methodref          #261.#827    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-   #263 = Methodref          #250.#828    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #264 = Methodref          #250.#829    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #265 = Methodref          #63.#771     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n-   #266 = Methodref          #250.#830    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #267 = Methodref          #250.#831    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #268 = Methodref          #63.#783     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n-   #269 = Methodref          #250.#832    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #270 = Methodref          #726.#833    // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-   #271 = Methodref          #63.#777     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDiskNumberStart:(J)V\n-   #272 = InterfaceMethodref #635.#834    // java/nio/channels/SeekableByteChannel.size:()J\n-   #273 = Fieldref           #645.#835    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n-   #274 = Methodref          #836.#745    // java/lang/Math.max:(JJ)J\n-   #275 = Methodref          #610.#837    // java/nio/ByteBuffer.get:()B\n-   #276 = InvokeDynamic      #1:#841      // #1:apply:()Ljava/util/function/Function;\n-   #277 = InterfaceMethodref #669.#842    // java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n-   #278 = Methodref          #23.#843     // java/util/LinkedList.addLast:(Ljava/lang/Object;)V\n-   #279 = Fieldref           #645.#844    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n-   #280 = InvokeDynamic      #2:#848      // #2:applyAsLong:()Ljava/util/function/ToLongFunction;\n-   #281 = InterfaceMethodref #849.#850    // java/util/Comparator.comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-   #282 = InvokeDynamic      #3:#848      // #3:applyAsLong:()Ljava/util/function/ToLongFunction;\n-   #283 = InterfaceMethodref #849.#852    // java/util/Comparator.thenComparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-   #284 = Class              #853         // java/lang/Object\n-   #285 = Class              #854         // java/io/Closeable\n-   #286 = Class              #855         // org/apache/commons/compress/archivers/zip/ZipFile$2\n+   #257 = Methodref          #250.#804    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V\n+   #258 = Methodref          #250.#805    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #259 = Methodref          #261.#806    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+   #260 = Methodref          #63.#755     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+   #261 = Class              #807         // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #262 = Methodref          #261.#808    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+   #263 = Methodref          #250.#809    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #264 = Methodref          #250.#810    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #265 = Methodref          #63.#753     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+   #266 = Methodref          #250.#811    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #267 = Methodref          #250.#812    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #268 = Methodref          #63.#765     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n+   #269 = Methodref          #250.#813    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #270 = Methodref          #708.#814    // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+   #271 = Methodref          #63.#759     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDiskNumberStart:(J)V\n+   #272 = InterfaceMethodref #403.#815    // java/nio/channels/SeekableByteChannel.size:()J\n+   #273 = Fieldref           #631.#816    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+   #274 = Methodref          #817.#727    // java/lang/Math.max:(JJ)J\n+   #275 = Methodref          #598.#818    // java/nio/ByteBuffer.get:()B\n+   #276 = InvokeDynamic      #1:#822      // #1:apply:()Ljava/util/function/Function;\n+   #277 = InterfaceMethodref #405.#823    // java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n+   #278 = Methodref          #23.#824     // java/util/LinkedList.addLast:(Ljava/lang/Object;)V\n+   #279 = Fieldref           #631.#825    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n+   #280 = InvokeDynamic      #2:#829      // #2:applyAsLong:()Ljava/util/function/ToLongFunction;\n+   #281 = InterfaceMethodref #830.#831    // java/util/Comparator.comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+   #282 = InvokeDynamic      #3:#829      // #3:applyAsLong:()Ljava/util/function/ToLongFunction;\n+   #283 = InterfaceMethodref #830.#833    // java/util/Comparator.thenComparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+   #284 = Class              #834         // java/lang/Object\n+   #285 = Class              #835         // java/io/Closeable\n+   #286 = Class              #836         // org/apache/commons/compress/archivers/zip/ZipFile$2\n    #287 = Utf8               InnerClasses\n    #288 = Utf8               StoredStatisticsStream\n    #289 = Utf8               NameAndComment\n    #290 = Utf8               Entry\n    #291 = Utf8               BoundedFileChannelInputStream\n    #292 = Utf8               HASH_SIZE\n    #293 = Utf8               I\n@@ -398,685 +398,666 @@\n    #396 = Utf8               e\n    #397 = Utf8               Ljava/io/IOException;\n    #398 = Utf8               closeOnError\n    #399 = Utf8               success\n    #400 = Utf8               LocalVariableTypeTable\n    #401 = Utf8               Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n    #402 = Utf8               StackMapTable\n-   #403 = Class              #574         // org/apache/commons/compress/archivers/zip/ZipFile\n-   #404 = Class              #856         // java/nio/channels/SeekableByteChannel\n-   #405 = Class              #857         // java/lang/String\n-   #406 = Class              #858         // java/util/Map\n-   #407 = Class              #626         // java/io/IOException\n-   #408 = Class              #719         // java/lang/Throwable\n-   #409 = Utf8               (Ljava/lang/String;)V\n-   #410 = Utf8               name\n-   #411 = Utf8               (Ljava/lang/String;Ljava/lang/String;)V\n-   #412 = Utf8               canReadEntryData\n-   #413 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #414 = Utf8               ze\n-   #415 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #416 = Utf8               close\n-   #417 = Utf8               ()V\n-   #418 = Utf8               copyRawEntries\n-   #419 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;)V\n-   #420 = Utf8               entry\n-   #421 = Utf8               target\n-   #422 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;\n-   #423 = Utf8               predicate\n-   #424 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;\n-   #425 = Utf8               src\n-   #426 = Utf8               Ljava/util/Enumeration;\n-   #427 = Utf8               Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-   #428 = Class              #859         // java/util/Enumeration\n-   #429 = Utf8               createBoundedInputStream\n-   #430 = Utf8               (JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n-   #431 = Utf8               start\n-   #432 = Utf8               remaining\n-   #433 = Class              #860         // org/apache/commons/compress/utils/BoundedArchiveInputStream\n-   #434 = Utf8               fillNameMap\n-   #435 = Utf8               finalize\n-   #436 = Utf8               getContentBeforeFirstLocalFileHeader\n-   #437 = Utf8               ()Ljava/io/InputStream;\n-   #438 = Class              #861         // java/io/InputStream\n-   #439 = Utf8               getDataOffset\n-   #440 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-   #441 = Utf8               s\n-   #442 = Utf8               getEncoding\n-   #443 = Utf8               ()Ljava/lang/String;\n-   #444 = Utf8               getEntries\n-   #445 = Utf8               ()Ljava/util/Enumeration;\n-   #446 = Utf8               ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-   #447 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable;\n-   #448 = Utf8               entriesOfThatName\n-   #449 = Class              #671         // java/util/List\n-   #450 = Class              #862         // java/lang/Iterable\n-   #451 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-   #452 = Utf8               getEntriesInPhysicalOrder\n-   #453 = Utf8               allEntries\n-   #454 = Utf8               [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #455 = Utf8               linkedList\n-   #456 = Utf8               Ljava/util/LinkedList;\n-   #457 = Utf8               Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-   #458 = Class              #600         // java/util/LinkedList\n-   #459 = Utf8               getEntry\n-   #460 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #461 = Class              #641         // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-   #462 = Utf8               getFirstLocalFileHeaderOffset\n-   #463 = Utf8               ()J\n-   #464 = Utf8               getInputStream\n-   #465 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-   #466 = Utf8               ex\n-   #467 = Utf8               Ljava/lang/IllegalArgumentException;\n-   #468 = Utf8               inflater\n-   #469 = Utf8               Ljava/util/zip/Inflater;\n-   #470 = Utf8               zipEntry\n-   #471 = Utf8               is\n-   #472 = Utf8               Ljava/io/InputStream;\n-   #473 = Class              #647         // java/lang/IllegalArgumentException\n-   #474 = Utf8               getRawInputStream\n-   #475 = Utf8               getUnixSymlink\n-   #476 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n-   #477 = Utf8               in\n-   #478 = Utf8               populateFromCentralDirectory\n-   #479 = Utf8               ()Ljava/util/Map;\n-   #480 = Utf8               noUTF8Flag\n-   #481 = Utf8               Ljava/util/HashMap;\n-   #482 = Utf8               sig\n-   #483 = Utf8               Ljava/util/HashMap<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n-   #484 = Class              #602         // java/util/HashMap\n-   #485 = Utf8               ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n-   #486 = Utf8               positionAtCentralDirectory\n-   #487 = Utf8               found\n-   #488 = Utf8               searchedForZip64EOCD\n-   #489 = Utf8               positionAtCentralDirectory32\n-   #490 = Utf8               centralDirectoryLength\n-   #491 = Utf8               endOfCentralDirectoryRecordOffset\n-   #492 = Utf8               positionAtCentralDirectory64\n-   #493 = Utf8               diskNumberOfEOCD\n-   #494 = Utf8               relativeOffsetOfEOCD\n-   #495 = Utf8               positionAtEndOfCentralDirectoryRecord\n-   #496 = Utf8               readCentralDirectoryEntry\n-   #497 = Utf8               (Ljava/util/Map;)V\n-   #498 = Utf8               z\n-   #499 = Utf8               Ljava/util/zip/ZipException;\n-   #500 = Utf8               Ljava/lang/RuntimeException;\n-   #501 = Utf8               off\n-   #502 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$Entry;\n-   #503 = Utf8               versionMadeBy\n-   #504 = Utf8               gpFlag\n-   #505 = Utf8               Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #506 = Utf8               hasUTF8Flag\n-   #507 = Utf8               entryEncoding\n-   #508 = Utf8               time\n-   #509 = Utf8               size\n-   #510 = Utf8               fileNameLen\n-   #511 = Utf8               extraLen\n-   #512 = Utf8               commentLen\n-   #513 = Utf8               fileName\n-   #514 = Utf8               cdExtraData\n-   #515 = Utf8               comment\n-   #516 = Class              #680         // org/apache/commons/compress/archivers/zip/ZipFile$Entry\n-   #517 = Class              #863         // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-   #518 = Class              #864         // org/apache/commons/compress/archivers/zip/ZipEncoding\n-   #519 = Class              #309         // \"[B\"\n-   #520 = Class              #786         // java/lang/RuntimeException\n-   #521 = Utf8               (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n-   #522 = Utf8               resolveLocalFileHeaderData\n-   #523 = Utf8               nc\n-   #524 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;\n-   #525 = Utf8               lens\n-   #526 = Utf8               [I\n-   #527 = Utf8               extraFieldLen\n-   #528 = Utf8               localExtraData\n-   #529 = Utf8               zipArchiveEntry\n-   #530 = Class              #865         // java/util/Iterator\n-   #531 = Class              #526         // \"[I\"\n-   #532 = Utf8               sanityCheckLFHOffset\n-   #533 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #534 = Utf8               setDataOffset\n-   #535 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n-   #536 = Utf8               offset\n-   #537 = Utf8               setSizesAndOffsetFromZip64Extra\n-   #538 = Utf8               hasUncompressedSize\n-   #539 = Utf8               hasCompressedSize\n-   #540 = Utf8               hasRelativeHeaderOffset\n-   #541 = Utf8               hasDiskStart\n-   #542 = Utf8               extra\n-   #543 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-   #544 = Utf8               z64\n-   #545 = Utf8               Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-   #546 = Class              #866         // org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #547 = Class              #820         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #548 = Utf8               skipBytes\n-   #549 = Utf8               (I)V\n-   #550 = Utf8               count\n-   #551 = Utf8               currentPosition\n-   #552 = Utf8               newPosition\n-   #553 = Utf8               startsWithLocalFileHeader\n-   #554 = Utf8               ()Z\n-   #555 = Utf8               tryToLocateSignature\n-   #556 = Utf8               (JJ[B)Z\n-   #557 = Utf8               Ljava/io/EOFException;\n-   #558 = Utf8               curr\n-   #559 = Utf8               minDistanceFromEnd\n-   #560 = Utf8               maxDistanceFromEnd\n-   #561 = Utf8               stopSearching\n-   #562 = Class              #781         // java/io/EOFException\n-   #563 = Utf8               lambda$fillNameMap$1\n-   #564 = Utf8               lambda$null$0\n-   #565 = Utf8               (Ljava/lang/String;)Ljava/util/LinkedList;\n-   #566 = Utf8               k\n-   #567 = Utf8               access$000\n-   #568 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n-   #569 = Utf8               x0\n-   #570 = Utf8               <clinit>\n-   #571 = Utf8               SourceFile\n-   #572 = Utf8               ZipFile.java\n-   #573 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-   #574 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n-   #575 = NameAndType        #347:#348    // archive:Ljava/nio/channels/SeekableByteChannel;\n-   #576 = Class              #867         // org/apache/commons/compress/utils/IOUtils\n-   #577 = NameAndType        #366:#868    // closeQuietly:(Ljava/io/Closeable;)V\n-   #578 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-   #579 = Utf8               UTF8\n-   #580 = NameAndType        #373:#379    // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-   #581 = NameAndType        #869:#870    // toPath:()Ljava/nio/file/Path;\n-   #582 = NameAndType        #373:#387    // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n-   #583 = NameAndType        #373:#388    // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n-   #584 = Class              #871         // java/nio/file/StandardOpenOption\n-   #585 = NameAndType        #872:#873    // READ:Ljava/nio/file/StandardOpenOption;\n-   #586 = Class              #874         // java/util/EnumSet\n-   #587 = NameAndType        #875:#876    // of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n-   #588 = Utf8               java/nio/file/attribute/FileAttribute\n-   #589 = Class              #877         // java/nio/file/Files\n-   #590 = NameAndType        #878:#879    // newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-   #591 = NameAndType        #880:#443    // getAbsolutePath:()Ljava/lang/String;\n-   #592 = NameAndType        #373:#394    // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n-   #593 = NameAndType        #373:#386    // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n-   #594 = Class              #881         // java/nio/file/Path\n-   #595 = NameAndType        #882:#870    // toAbsolutePath:()Ljava/nio/file/Path;\n-   #596 = NameAndType        #883:#443    // toString:()Ljava/lang/String;\n-   #597 = Utf8               unknown archive\n-   #598 = NameAndType        #373:#392    // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n-   #599 = NameAndType        #373:#417    // \"<init>\":()V\n-   #600 = Utf8               java/util/LinkedList\n-   #601 = NameAndType        #336:#337    // entries:Ljava/util/List;\n-   #602 = Utf8               java/util/HashMap\n-   #603 = NameAndType        #373:#549    // \"<init>\":(I)V\n-   #604 = NameAndType        #339:#340    // nameMap:Ljava/util/Map;\n-   #605 = NameAndType        #351:#350    // closed:Z\n-   #606 = NameAndType        #353:#309    // dwordBuf:[B\n-   #607 = NameAndType        #354:#309    // wordBuf:[B\n-   #608 = NameAndType        #355:#309    // cfhBuf:[B\n-   #609 = NameAndType        #356:#309    // shortBuf:[B\n-   #610 = Class              #884         // java/nio/ByteBuffer\n-   #611 = NameAndType        #885:#886    // wrap:([B)Ljava/nio/ByteBuffer;\n-   #612 = NameAndType        #357:#358    // dwordBbuf:Ljava/nio/ByteBuffer;\n-   #613 = NameAndType        #359:#358    // wordBbuf:Ljava/nio/ByteBuffer;\n-   #614 = NameAndType        #360:#358    // cfhBbuf:Ljava/nio/ByteBuffer;\n-   #615 = NameAndType        #361:#358    // shortBbuf:Ljava/nio/ByteBuffer;\n-   #616 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-   #617 = NameAndType        #352:#350    // isSplitZipArchive:Z\n-   #618 = NameAndType        #346:#343    // archiveName:Ljava/lang/String;\n-   #619 = NameAndType        #342:#343    // encoding:Ljava/lang/String;\n-   #620 = NameAndType        #887:#888    // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #621 = NameAndType        #344:#345    // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #622 = NameAndType        #349:#350    // useUnicodeExtraFields:Z\n-   #623 = NameAndType        #478:#479    // populateFromCentralDirectory:()Ljava/util/Map;\n-   #624 = NameAndType        #522:#497    // resolveLocalFileHeaderData:(Ljava/util/Map;)V\n-   #625 = NameAndType        #434:#417    // fillNameMap:()V\n-   #626 = Utf8               java/io/IOException\n-   #627 = Utf8               java/lang/StringBuilder\n-   #628 = Utf8               Error on ZipFile\n-   #629 = NameAndType        #889:#890    // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #630 = NameAndType        #373:#891    // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #631 = Utf8               java/io/File\n-   #632 = NameAndType        #373:#409    // \"<init>\":(Ljava/lang/String;)V\n-   #633 = Class              #892         // org/apache/commons/compress/archivers/zip/ZipUtil\n-   #634 = NameAndType        #893:#413    // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #635 = Class              #856         // java/nio/channels/SeekableByteChannel\n-   #636 = NameAndType        #416:#417    // close:()V\n-   #637 = NameAndType        #452:#445    // getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n-   #638 = Class              #859         // java/util/Enumeration\n-   #639 = NameAndType        #894:#554    // hasMoreElements:()Z\n-   #640 = NameAndType        #895:#896    // nextElement:()Ljava/lang/Object;\n-   #641 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-   #642 = Class              #897         // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n-   #643 = NameAndType        #898:#413    // test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #644 = NameAndType        #474:#465    // getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-   #645 = Class              #899         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-   #646 = NameAndType        #900:#901    // addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-   #647 = Utf8               java/lang/IllegalArgumentException\n-   #648 = Utf8               Corrupted archive, stream boundaries are out of range\n-   #649 = Utf8               java/nio/channels/FileChannel\n-   #650 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n-   #651 = NameAndType        #373:#902    // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-   #652 = Utf8               org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n-   #653 = NameAndType        #373:#903    // \"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n-   #654 = Utf8               BootstrapMethods\n-   #655 = MethodHandle       6:#904       // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-   #656 = MethodType         #905         //  (Ljava/lang/Object;)V\n-   #657 = MethodHandle       7:#906       // REF_invokeSpecial org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #658 = MethodType         #533         //  (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #659 = NameAndType        #907:#908    // accept:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n-   #660 = NameAndType        #909:#910    // forEach:(Ljava/util/function/Consumer;)V\n-   #661 = NameAndType        #435:#417    // finalize:()V\n-   #662 = NameAndType        #365:#313    // firstLocalFileHeaderOffset:J\n-   #663 = NameAndType        #429:#430    // createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n-   #664 = NameAndType        #439:#463    // getDataOffset:()J\n-   #665 = Utf8               org/apache/commons/compress/archivers/EntryStreamOffsets\n-   #666 = NameAndType        #534:#535    // setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n-   #667 = Class              #911         // java/util/Collections\n-   #668 = NameAndType        #912:#913    // enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n-   #669 = Class              #858         // java/util/Map\n-   #670 = NameAndType        #914:#915    // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #671 = Utf8               java/util/List\n-   #672 = NameAndType        #916:#917    // emptyList:()Ljava/util/List;\n-   #673 = NameAndType        #918:#454    // EMPTY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #674 = NameAndType        #919:#920    // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #675 = NameAndType        #332:#333    // offsetComparator:Ljava/util/Comparator;\n-   #676 = Class              #921         // java/util/Arrays\n-   #677 = NameAndType        #922:#923    // sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n-   #678 = NameAndType        #924:#925    // asList:([Ljava/lang/Object;)Ljava/util/List;\n-   #679 = NameAndType        #926:#896    // getFirst:()Ljava/lang/Object;\n-   #680 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$Entry\n-   #681 = NameAndType        #927:#533    // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #682 = Utf8               java/io/BufferedInputStream\n-   #683 = NameAndType        #373:#928    // \"<init>\":(Ljava/io/InputStream;)V\n-   #684 = NameAndType        #929:#526    // $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n-   #685 = NameAndType        #930:#931    // getMethod:()I\n-   #686 = Class              #932         // org/apache/commons/compress/archivers/zip/ZipMethod\n-   #687 = NameAndType        #933:#934    // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #688 = NameAndType        #935:#931    // ordinal:()I\n-   #689 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n-   #690 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-   #691 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-   #692 = NameAndType        #936:#937    // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #693 = Class              #863         // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-   #694 = NameAndType        #938:#931    // getSlidingDictionarySize:()I\n-   #695 = NameAndType        #939:#931    // getNumberOfShannonFanoTrees:()I\n-   #696 = NameAndType        #373:#940    // \"<init>\":(IILjava/io/InputStream;)V\n-   #697 = Utf8               bad IMPLODE data\n-   #698 = Utf8               java/util/zip/Inflater\n-   #699 = NameAndType        #373:#941    // \"<init>\":(Z)V\n-   #700 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$1\n-   #701 = Utf8               java/io/SequenceInputStream\n-   #702 = Utf8               java/io/ByteArrayInputStream\n-   #703 = NameAndType        #308:#309    // ONE_ZERO_BYTE:[B\n-   #704 = NameAndType        #373:#942    // \"<init>\":([B)V\n-   #705 = NameAndType        #373:#943    // \"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n-   #706 = NameAndType        #373:#944    // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n-   #707 = Utf8               org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-   #708 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-   #709 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-   #710 = NameAndType        #373:#945    // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #711 = NameAndType        #439:#440    // getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-   #712 = NameAndType        #946:#463    // getCompressedSize:()J\n-   #713 = NameAndType        #947:#554    // isUnixSymlink:()Z\n-   #714 = NameAndType        #464:#465    // getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-   #715 = NameAndType        #948:#949    // toByteArray:(Ljava/io/InputStream;)[B\n-   #716 = Class              #864         // org/apache/commons/compress/archivers/zip/ZipEncoding\n-   #717 = NameAndType        #950:#951    // decode:([B)Ljava/lang/String;\n-   #718 = Class              #861         // java/io/InputStream\n-   #719 = Utf8               java/lang/Throwable\n-   #720 = NameAndType        #952:#953    // addSuppressed:(Ljava/lang/Throwable;)V\n-   #721 = NameAndType        #486:#417    // positionAtCentralDirectory:()V\n-   #722 = NameAndType        #954:#463    // position:()J\n-   #723 = NameAndType        #364:#313    // centralDirectoryStartOffset:J\n-   #724 = NameAndType        #955:#956    // rewind:()Ljava/nio/Buffer;\n-   #725 = NameAndType        #957:#958    // readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-   #726 = Class              #959         // org/apache/commons/compress/archivers/zip/ZipLong\n-   #727 = NameAndType        #960:#961    // getValue:([B)J\n-   #728 = NameAndType        #312:#313    // CFH_SIG:J\n-   #729 = NameAndType        #553:#554    // startsWithLocalFileHeader:()Z\n-   #730 = Utf8               Central directory is empty, can\\'t expand corrupt archive.\n-   #731 = NameAndType        #496:#497    // readCentralDirectoryEntry:(Ljava/util/Map;)V\n-   #732 = NameAndType        #495:#417    // positionAtEndOfCentralDirectoryRecord:()V\n-   #733 = NameAndType        #954:#962    // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #734 = NameAndType        #963:#309    // ZIP64_EOCD_LOC_SIG:[B\n-   #735 = NameAndType        #964:#965    // equals:([B[B)Z\n-   #736 = NameAndType        #548:#549    // skipBytes:(I)V\n-   #737 = NameAndType        #489:#417    // positionAtCentralDirectory32:()V\n-   #738 = NameAndType        #492:#417    // positionAtCentralDirectory64:()V\n-   #739 = Class              #966         // org/apache/commons/compress/archivers/zip/ZipShort\n-   #740 = NameAndType        #960:#967    // getValue:([B)I\n-   #741 = NameAndType        #362:#313    // centralDirectoryStartDiskNumber:J\n-   #742 = NameAndType        #363:#313    // centralDirectoryStartRelativeOffset:J\n-   #743 = NameAndType        #954:#968    // position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n-   #744 = Class              #969         // java/lang/Long\n-   #745 = NameAndType        #970:#971    // max:(JJ)J\n-   #746 = NameAndType        #972:#961    // getLongValue:([B)J\n-   #747 = NameAndType        #973:#309    // ZIP64_EOCD_SIG:[B\n-   #748 = Utf8               java/util/zip/ZipException\n-   #749 = Utf8               Archive\\'s ZIP64 end of central directory locator is corrupt.\n-   #750 = NameAndType        #974:#309    // EOCD_SIG:[B\n-   #751 = NameAndType        #555:#556    // tryToLocateSignature:(JJ[B)Z\n-   #752 = Utf8               Archive is not a ZIP archive\n-   #753 = NameAndType        #960:#975    // getValue:([BI)I\n-   #754 = NameAndType        #976:#549    // setVersionMadeBy:(I)V\n-   #755 = NameAndType        #977:#549    // setPlatform:(I)V\n-   #756 = NameAndType        #978:#549    // setVersionRequired:(I)V\n-   #757 = NameAndType        #979:#980    // parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #758 = NameAndType        #981:#554    // usesUTF8ForNames:()Z\n-   #759 = NameAndType        #982:#345    // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #760 = Class              #983         // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-   #761 = NameAndType        #985:#986    // NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-   #762 = NameAndType        #987:#988    // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-   #763 = NameAndType        #989:#990    // setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-   #764 = NameAndType        #991:#549    // setRawFlag:(I)V\n-   #765 = NameAndType        #992:#549    // setMethod:(I)V\n-   #766 = NameAndType        #960:#993    // getValue:([BI)J\n-   #767 = NameAndType        #994:#995    // dosToJavaTime:(J)J\n-   #768 = NameAndType        #996:#997    // setTime:(J)V\n-   #769 = NameAndType        #998:#997    // setCrc:(J)V\n-   #770 = Utf8               broken archive, entry with negative compressed size\n-   #771 = NameAndType        #999:#997    // setCompressedSize:(J)V\n-   #772 = Utf8               broken archive, entry with negative size\n-   #773 = NameAndType        #1000:#997   // setSize:(J)V\n-   #774 = Utf8               broken archive, entry with negative fileNameLen\n-   #775 = Utf8               broken archive, entry with negative extraLen\n-   #776 = Utf8               broken archive, entry with negative commentLen\n-   #777 = NameAndType        #1001:#997   // setDiskNumberStart:(J)V\n-   #778 = NameAndType        #1002:#549   // setInternalAttributes:(I)V\n-   #779 = NameAndType        #1003:#997   // setExternalAttributes:(J)V\n-   #780 = NameAndType        #1004:#1005  // readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n-   #781 = Utf8               java/io/EOFException\n-   #782 = NameAndType        #1006:#1007  // setName:(Ljava/lang/String;[B)V\n-   #783 = NameAndType        #1008:#997   // setLocalHeaderOffset:(J)V\n-   #784 = NameAndType        #1009:#1010  // add:(Ljava/lang/Object;)Z\n-   #785 = NameAndType        #1011:#942   // setCentralDirectoryExtra:([B)V\n-   #786 = Utf8               java/lang/RuntimeException\n-   #787 = Utf8               Invalid extra data in entry\n-   #788 = NameAndType        #1012:#443   // getName:()Ljava/lang/String;\n-   #789 = NameAndType        #1013:#1014  // initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-   #790 = NameAndType        #537:#533    // setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #791 = NameAndType        #532:#533    // sanityCheckLFHOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #792 = NameAndType        #1015:#409   // setComment:(Ljava/lang/String;)V\n-   #793 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n-   #794 = NameAndType        #373:#1016   // \"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-   #795 = NameAndType        #1017:#1018  // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #796 = NameAndType        #1019:#941   // setStreamContiguous:(Z)V\n-   #797 = NameAndType        #1020:#1021  // iterator:()Ljava/util/Iterator;\n-   #798 = Class              #865         // java/util/Iterator\n-   #799 = NameAndType        #1022:#554   // hasNext:()Z\n-   #800 = NameAndType        #1023:#896   // next:()Ljava/lang/Object;\n-   #801 = NameAndType        #1024:#942   // setExtra:([B)V\n-   #802 = NameAndType        #1025:#1010  // containsKey:(Ljava/lang/Object;)Z\n-   #803 = NameAndType        #1026:#1027  // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-   #804 = NameAndType        #1028:#1027  // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-   #805 = NameAndType        #1029:#1030  // setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-   #806 = NameAndType        #1031:#463   // getDiskNumberStart:()J\n-   #807 = Utf8               broken archive, entry with negative disk number\n-   #808 = NameAndType        #1032:#463   // getLocalHeaderOffset:()J\n-   #809 = Utf8               broken archive, entry with negative local file header offset\n-   #810 = Utf8               local file header for\n-   #811 = Utf8                starts on a later disk than central directory\n-   #812 = Utf8                starts after central directory\n-   #813 = NameAndType        #1033:#956   // flip:()Ljava/nio/Buffer;\n-   #814 = NameAndType        #914:#886    // get:([B)Ljava/nio/ByteBuffer;\n-   #815 = NameAndType        #534:#997    // setDataOffset:(J)V\n-   #816 = Utf8               data for\n-   #817 = Utf8                overlaps with central directory.\n-   #818 = NameAndType        #1034:#1035  // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #819 = NameAndType        #1036:#1037  // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-   #820 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #821 = Utf8               archive contains unparseable zip64 extra field\n-   #822 = NameAndType        #1038:#463   // getSize:()J\n-   #823 = NameAndType        #1039:#1040  // reparseCentralDirectoryData:(ZZZZ)V\n-   #824 = NameAndType        #1038:#1041  // getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #825 = NameAndType        #972:#463    // getLongValue:()J\n-   #826 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-   #827 = NameAndType        #373:#997    // \"<init>\":(J)V\n-   #828 = NameAndType        #1000:#1042  // setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #829 = NameAndType        #946:#1041   // getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #830 = NameAndType        #999:#1042   // setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #831 = NameAndType        #1043:#1041  // getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #832 = NameAndType        #1044:#1045  // getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #833 = NameAndType        #960:#463    // getValue:()J\n-   #834 = NameAndType        #509:#463    // size:()J\n-   #835 = NameAndType        #1046:#309   // LFH_SIG:[B\n-   #836 = Class              #1047        // java/lang/Math\n-   #837 = NameAndType        #914:#1048   // get:()B\n-   #838 = MethodType         #915         //  (Ljava/lang/Object;)Ljava/lang/Object;\n-   #839 = MethodHandle       6:#1049      // REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipFile.lambda$null$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n-   #840 = MethodType         #565         //  (Ljava/lang/String;)Ljava/util/LinkedList;\n-   #841 = NameAndType        #1050:#1051  // apply:()Ljava/util/function/Function;\n-   #842 = NameAndType        #1052:#1053  // computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n-   #843 = NameAndType        #1054:#905   // addLast:(Ljava/lang/Object;)V\n-   #844 = NameAndType        #312:#309    // CFH_SIG:[B\n-   #845 = MethodType         #1055        //  (Ljava/lang/Object;)J\n-   #846 = MethodHandle       5:#231       // REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n-   #847 = MethodType         #440         //  (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-   #848 = NameAndType        #1056:#1057  // applyAsLong:()Ljava/util/function/ToLongFunction;\n-   #849 = Class              #1058        // java/util/Comparator\n-   #850 = NameAndType        #1059:#1060  // comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-   #851 = MethodHandle       5:#233       // REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-   #852 = NameAndType        #1061:#1060  // thenComparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-   #853 = Utf8               java/lang/Object\n-   #854 = Utf8               java/io/Closeable\n-   #855 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$2\n-   #856 = Utf8               java/nio/channels/SeekableByteChannel\n-   #857 = Utf8               java/lang/String\n-   #858 = Utf8               java/util/Map\n-   #859 = Utf8               java/util/Enumeration\n-   #860 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n-   #861 = Utf8               java/io/InputStream\n-   #862 = Utf8               java/lang/Iterable\n-   #863 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-   #864 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-   #865 = Utf8               java/util/Iterator\n-   #866 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #867 = Utf8               org/apache/commons/compress/utils/IOUtils\n-   #868 = Utf8               (Ljava/io/Closeable;)V\n-   #869 = Utf8               toPath\n-   #870 = Utf8               ()Ljava/nio/file/Path;\n-   #871 = Utf8               java/nio/file/StandardOpenOption\n-   #872 = Utf8               READ\n-   #873 = Utf8               Ljava/nio/file/StandardOpenOption;\n-   #874 = Utf8               java/util/EnumSet\n-   #875 = Utf8               of\n-   #876 = Utf8               (Ljava/lang/Enum;)Ljava/util/EnumSet;\n-   #877 = Utf8               java/nio/file/Files\n-   #878 = Utf8               newByteChannel\n-   #879 = Utf8               (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-   #880 = Utf8               getAbsolutePath\n-   #881 = Utf8               java/nio/file/Path\n-   #882 = Utf8               toAbsolutePath\n-   #883 = Utf8               toString\n-   #884 = Utf8               java/nio/ByteBuffer\n-   #885 = Utf8               wrap\n-   #886 = Utf8               ([B)Ljava/nio/ByteBuffer;\n-   #887 = Utf8               getZipEncoding\n-   #888 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #889 = Utf8               append\n-   #890 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #891 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #892 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-   #893 = Utf8               canHandleEntryData\n-   #894 = Utf8               hasMoreElements\n-   #895 = Utf8               nextElement\n-   #896 = Utf8               ()Ljava/lang/Object;\n-   #897 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n-   #898 = Utf8               test\n-   #899 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-   #900 = Utf8               addRawArchiveEntry\n-   #901 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-   #902 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-   #903 = Utf8               (JJLjava/nio/channels/SeekableByteChannel;)V\n-   #904 = Methodref          #1062.#1063  // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-   #905 = Utf8               (Ljava/lang/Object;)V\n-   #906 = Methodref          #2.#1064     // org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #907 = Utf8               accept\n-   #908 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n-   #909 = Utf8               forEach\n-   #910 = Utf8               (Ljava/util/function/Consumer;)V\n-   #911 = Utf8               java/util/Collections\n-   #912 = Utf8               enumeration\n-   #913 = Utf8               (Ljava/util/Collection;)Ljava/util/Enumeration;\n-   #914 = Utf8               get\n-   #915 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-   #916 = Utf8               emptyList\n-   #917 = Utf8               ()Ljava/util/List;\n-   #918 = Utf8               EMPTY_ARRAY\n-   #919 = Utf8               toArray\n-   #920 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #921 = Utf8               java/util/Arrays\n-   #922 = Utf8               sort\n-   #923 = Utf8               ([Ljava/lang/Object;Ljava/util/Comparator;)V\n-   #924 = Utf8               asList\n-   #925 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n-   #926 = Utf8               getFirst\n-   #927 = Utf8               checkRequestedFeatures\n-   #928 = Utf8               (Ljava/io/InputStream;)V\n-   #929 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod\n-   #930 = Utf8               getMethod\n-   #931 = Utf8               ()I\n-   #932 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n-   #933 = Utf8               getMethodByCode\n-   #934 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #935 = Utf8               ordinal\n-   #936 = Utf8               getGeneralPurposeBit\n-   #937 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #938 = Utf8               getSlidingDictionarySize\n-   #939 = Utf8               getNumberOfShannonFanoTrees\n-   #940 = Utf8               (IILjava/io/InputStream;)V\n-   #941 = Utf8               (Z)V\n-   #942 = Utf8               ([B)V\n-   #943 = Utf8               (Ljava/io/InputStream;Ljava/io/InputStream;)V\n-   #944 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n-   #945 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #946 = Utf8               getCompressedSize\n-   #947 = Utf8               isUnixSymlink\n-   #948 = Utf8               toByteArray\n-   #949 = Utf8               (Ljava/io/InputStream;)[B\n-   #950 = Utf8               decode\n-   #951 = Utf8               ([B)Ljava/lang/String;\n-   #952 = Utf8               addSuppressed\n-   #953 = Utf8               (Ljava/lang/Throwable;)V\n-   #954 = Utf8               position\n-   #955 = Utf8               rewind\n-   #956 = Utf8               ()Ljava/nio/Buffer;\n-   #957 = Utf8               readFully\n-   #958 = Utf8               (Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-   #959 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-   #960 = Utf8               getValue\n-   #961 = Utf8               ([B)J\n-   #962 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-   #963 = Utf8               ZIP64_EOCD_LOC_SIG\n-   #964 = Utf8               equals\n-   #965 = Utf8               ([B[B)Z\n-   #966 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-   #967 = Utf8               ([B)I\n-   #968 = Utf8               (JJ)Ljava/nio/channels/SeekableByteChannel;\n-   #969 = Utf8               java/lang/Long\n-   #970 = Utf8               max\n-   #971 = Utf8               (JJ)J\n-   #972 = Utf8               getLongValue\n-   #973 = Utf8               ZIP64_EOCD_SIG\n-   #974 = Utf8               EOCD_SIG\n-   #975 = Utf8               ([BI)I\n-   #976 = Utf8               setVersionMadeBy\n-   #977 = Utf8               setPlatform\n-   #978 = Utf8               setVersionRequired\n-   #979 = Utf8               parse\n-   #980 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #981 = Utf8               usesUTF8ForNames\n-   #982 = Utf8               UTF8_ZIP_ENCODING\n-   #983 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-   #984 = Utf8               NameSource\n-   #985 = Utf8               NAME_WITH_EFS_FLAG\n-   #986 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-   #987 = Utf8               setNameSource\n-   #988 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-   #989 = Utf8               setGeneralPurposeBit\n-   #990 = Utf8               (Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-   #991 = Utf8               setRawFlag\n-   #992 = Utf8               setMethod\n-   #993 = Utf8               ([BI)J\n-   #994 = Utf8               dosToJavaTime\n-   #995 = Utf8               (J)J\n-   #996 = Utf8               setTime\n-   #997 = Utf8               (J)V\n-   #998 = Utf8               setCrc\n-   #999 = Utf8               setCompressedSize\n-  #1000 = Utf8               setSize\n-  #1001 = Utf8               setDiskNumberStart\n-  #1002 = Utf8               setInternalAttributes\n-  #1003 = Utf8               setExternalAttributes\n-  #1004 = Utf8               readRange\n-  #1005 = Utf8               (Ljava/nio/channels/ReadableByteChannel;I)[B\n-  #1006 = Utf8               setName\n-  #1007 = Utf8               (Ljava/lang/String;[B)V\n-  #1008 = Utf8               setLocalHeaderOffset\n-  #1009 = Utf8               add\n-  #1010 = Utf8               (Ljava/lang/Object;)Z\n-  #1011 = Utf8               setCentralDirectoryExtra\n-  #1012 = Utf8               getName\n-  #1013 = Utf8               initCause\n-  #1014 = Utf8               (Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-  #1015 = Utf8               setComment\n-  #1016 = Utf8               ([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-  #1017 = Utf8               put\n-  #1018 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #1019 = Utf8               setStreamContiguous\n-  #1020 = Utf8               iterator\n-  #1021 = Utf8               ()Ljava/util/Iterator;\n-  #1022 = Utf8               hasNext\n-  #1023 = Utf8               next\n-  #1024 = Utf8               setExtra\n-  #1025 = Utf8               containsKey\n-  #1026 = Utf8               access$200\n-  #1027 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #1028 = Utf8               access$300\n-  #1029 = Utf8               setNameAndCommentFromExtraFields\n-  #1030 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #1031 = Utf8               getDiskNumberStart\n-  #1032 = Utf8               getLocalHeaderOffset\n-  #1033 = Utf8               flip\n-  #1034 = Utf8               HEADER_ID\n-  #1035 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #1036 = Utf8               getExtraField\n-  #1037 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #1038 = Utf8               getSize\n-  #1039 = Utf8               reparseCentralDirectoryData\n-  #1040 = Utf8               (ZZZZ)V\n-  #1041 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #1042 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #1043 = Utf8               getRelativeHeaderOffset\n-  #1044 = Utf8               getDiskStartNumber\n-  #1045 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #1046 = Utf8               LFH_SIG\n-  #1047 = Utf8               java/lang/Math\n-  #1048 = Utf8               ()B\n-  #1049 = Methodref          #2.#1065     // org/apache/commons/compress/archivers/zip/ZipFile.lambda$null$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n-  #1050 = Utf8               apply\n-  #1051 = Utf8               ()Ljava/util/function/Function;\n-  #1052 = Utf8               computeIfAbsent\n-  #1053 = Utf8               (Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n-  #1054 = Utf8               addLast\n-  #1055 = Utf8               (Ljava/lang/Object;)J\n-  #1056 = Utf8               applyAsLong\n-  #1057 = Utf8               ()Ljava/util/function/ToLongFunction;\n-  #1058 = Utf8               java/util/Comparator\n-  #1059 = Utf8               comparingLong\n-  #1060 = Utf8               (Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-  #1061 = Utf8               thenComparingLong\n-  #1062 = Class              #1066        // java/lang/invoke/LambdaMetafactory\n-  #1063 = NameAndType        #1067:#1070  // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #1064 = NameAndType        #563:#533    // lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #1065 = NameAndType        #564:#565    // lambda$null$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n-  #1066 = Utf8               java/lang/invoke/LambdaMetafactory\n-  #1067 = Utf8               metafactory\n-  #1068 = Class              #1072        // java/lang/invoke/MethodHandles$Lookup\n-  #1069 = Utf8               Lookup\n-  #1070 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #1071 = Class              #1073        // java/lang/invoke/MethodHandles\n-  #1072 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #1073 = Utf8               java/lang/invoke/MethodHandles\n+   #403 = Class              #837         // java/nio/channels/SeekableByteChannel\n+   #404 = Class              #838         // java/lang/String\n+   #405 = Class              #839         // java/util/Map\n+   #406 = Utf8               (Ljava/lang/String;)V\n+   #407 = Utf8               name\n+   #408 = Utf8               (Ljava/lang/String;Ljava/lang/String;)V\n+   #409 = Utf8               canReadEntryData\n+   #410 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #411 = Utf8               ze\n+   #412 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #413 = Utf8               close\n+   #414 = Utf8               ()V\n+   #415 = Utf8               copyRawEntries\n+   #416 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;)V\n+   #417 = Utf8               entry\n+   #418 = Utf8               target\n+   #419 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;\n+   #420 = Utf8               predicate\n+   #421 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;\n+   #422 = Utf8               src\n+   #423 = Utf8               Ljava/util/Enumeration;\n+   #424 = Utf8               Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+   #425 = Class              #840         // java/util/Enumeration\n+   #426 = Utf8               createBoundedInputStream\n+   #427 = Utf8               (JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n+   #428 = Utf8               start\n+   #429 = Utf8               remaining\n+   #430 = Class              #841         // org/apache/commons/compress/utils/BoundedArchiveInputStream\n+   #431 = Utf8               fillNameMap\n+   #432 = Utf8               finalize\n+   #433 = Utf8               getContentBeforeFirstLocalFileHeader\n+   #434 = Utf8               ()Ljava/io/InputStream;\n+   #435 = Class              #842         // java/io/InputStream\n+   #436 = Utf8               getDataOffset\n+   #437 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+   #438 = Utf8               s\n+   #439 = Utf8               getEncoding\n+   #440 = Utf8               ()Ljava/lang/String;\n+   #441 = Utf8               getEntries\n+   #442 = Utf8               ()Ljava/util/Enumeration;\n+   #443 = Utf8               ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+   #444 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable;\n+   #445 = Utf8               entriesOfThatName\n+   #446 = Class              #843         // java/lang/Iterable\n+   #447 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+   #448 = Utf8               getEntriesInPhysicalOrder\n+   #449 = Utf8               allEntries\n+   #450 = Utf8               [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #451 = Utf8               linkedList\n+   #452 = Utf8               Ljava/util/LinkedList;\n+   #453 = Utf8               Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+   #454 = Utf8               getEntry\n+   #455 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #456 = Utf8               getFirstLocalFileHeaderOffset\n+   #457 = Utf8               ()J\n+   #458 = Utf8               getInputStream\n+   #459 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+   #460 = Utf8               ex\n+   #461 = Utf8               Ljava/lang/IllegalArgumentException;\n+   #462 = Utf8               inflater\n+   #463 = Utf8               Ljava/util/zip/Inflater;\n+   #464 = Utf8               zipEntry\n+   #465 = Utf8               is\n+   #466 = Utf8               Ljava/io/InputStream;\n+   #467 = Utf8               getRawInputStream\n+   #468 = Utf8               getUnixSymlink\n+   #469 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n+   #470 = Utf8               in\n+   #471 = Utf8               populateFromCentralDirectory\n+   #472 = Utf8               ()Ljava/util/Map;\n+   #473 = Utf8               noUTF8Flag\n+   #474 = Utf8               Ljava/util/HashMap;\n+   #475 = Utf8               sig\n+   #476 = Utf8               Ljava/util/HashMap<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n+   #477 = Utf8               ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n+   #478 = Utf8               positionAtCentralDirectory\n+   #479 = Utf8               found\n+   #480 = Utf8               searchedForZip64EOCD\n+   #481 = Utf8               positionAtCentralDirectory32\n+   #482 = Utf8               centralDirectoryLength\n+   #483 = Utf8               endOfCentralDirectoryRecordOffset\n+   #484 = Utf8               positionAtCentralDirectory64\n+   #485 = Utf8               diskNumberOfEOCD\n+   #486 = Utf8               relativeOffsetOfEOCD\n+   #487 = Utf8               positionAtEndOfCentralDirectoryRecord\n+   #488 = Utf8               readCentralDirectoryEntry\n+   #489 = Utf8               (Ljava/util/Map;)V\n+   #490 = Utf8               z\n+   #491 = Utf8               Ljava/util/zip/ZipException;\n+   #492 = Utf8               Ljava/lang/RuntimeException;\n+   #493 = Utf8               off\n+   #494 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$Entry;\n+   #495 = Utf8               versionMadeBy\n+   #496 = Utf8               gpFlag\n+   #497 = Utf8               Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #498 = Utf8               hasUTF8Flag\n+   #499 = Utf8               entryEncoding\n+   #500 = Utf8               time\n+   #501 = Utf8               size\n+   #502 = Utf8               fileNameLen\n+   #503 = Utf8               extraLen\n+   #504 = Utf8               commentLen\n+   #505 = Utf8               fileName\n+   #506 = Utf8               cdExtraData\n+   #507 = Utf8               comment\n+   #508 = Class              #844         // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+   #509 = Class              #845         // org/apache/commons/compress/archivers/zip/ZipEncoding\n+   #510 = Class              #309         // \"[B\"\n+   #511 = Utf8               (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n+   #512 = Utf8               resolveLocalFileHeaderData\n+   #513 = Utf8               nc\n+   #514 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;\n+   #515 = Utf8               lens\n+   #516 = Utf8               [I\n+   #517 = Utf8               extraFieldLen\n+   #518 = Utf8               localExtraData\n+   #519 = Utf8               zipArchiveEntry\n+   #520 = Class              #846         // java/util/Iterator\n+   #521 = Class              #516         // \"[I\"\n+   #522 = Utf8               sanityCheckLFHOffset\n+   #523 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #524 = Utf8               setDataOffset\n+   #525 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n+   #526 = Utf8               offset\n+   #527 = Utf8               setSizesAndOffsetFromZip64Extra\n+   #528 = Utf8               hasUncompressedSize\n+   #529 = Utf8               hasCompressedSize\n+   #530 = Utf8               hasRelativeHeaderOffset\n+   #531 = Utf8               hasDiskStart\n+   #532 = Utf8               extra\n+   #533 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+   #534 = Utf8               z64\n+   #535 = Utf8               Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+   #536 = Class              #847         // org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #537 = Utf8               skipBytes\n+   #538 = Utf8               (I)V\n+   #539 = Utf8               count\n+   #540 = Utf8               currentPosition\n+   #541 = Utf8               newPosition\n+   #542 = Utf8               startsWithLocalFileHeader\n+   #543 = Utf8               ()Z\n+   #544 = Utf8               tryToLocateSignature\n+   #545 = Utf8               (JJ[B)Z\n+   #546 = Utf8               Ljava/io/EOFException;\n+   #547 = Utf8               curr\n+   #548 = Utf8               minDistanceFromEnd\n+   #549 = Utf8               maxDistanceFromEnd\n+   #550 = Utf8               stopSearching\n+   #551 = Utf8               lambda$fillNameMap$1\n+   #552 = Utf8               lambda$fillNameMap$0\n+   #553 = Utf8               (Ljava/lang/String;)Ljava/util/LinkedList;\n+   #554 = Utf8               k\n+   #555 = Utf8               access$000\n+   #556 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n+   #557 = Utf8               x0\n+   #558 = Utf8               <clinit>\n+   #559 = Utf8               SourceFile\n+   #560 = Utf8               ZipFile.java\n+   #561 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+   #562 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n+   #563 = NameAndType        #347:#348    // archive:Ljava/nio/channels/SeekableByteChannel;\n+   #564 = Class              #848         // org/apache/commons/compress/utils/IOUtils\n+   #565 = NameAndType        #366:#849    // closeQuietly:(Ljava/io/Closeable;)V\n+   #566 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #567 = Utf8               UTF8\n+   #568 = NameAndType        #373:#379    // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+   #569 = NameAndType        #850:#851    // toPath:()Ljava/nio/file/Path;\n+   #570 = NameAndType        #373:#387    // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n+   #571 = NameAndType        #373:#388    // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n+   #572 = Class              #852         // java/nio/file/StandardOpenOption\n+   #573 = NameAndType        #853:#854    // READ:Ljava/nio/file/StandardOpenOption;\n+   #574 = Class              #855         // java/util/EnumSet\n+   #575 = NameAndType        #856:#857    // of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n+   #576 = Utf8               java/nio/file/attribute/FileAttribute\n+   #577 = Class              #858         // java/nio/file/Files\n+   #578 = NameAndType        #859:#860    // newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+   #579 = NameAndType        #861:#440    // getAbsolutePath:()Ljava/lang/String;\n+   #580 = NameAndType        #373:#394    // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n+   #581 = NameAndType        #373:#386    // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n+   #582 = Class              #862         // java/nio/file/Path\n+   #583 = NameAndType        #863:#851    // toAbsolutePath:()Ljava/nio/file/Path;\n+   #584 = NameAndType        #864:#440    // toString:()Ljava/lang/String;\n+   #585 = Utf8               unknown archive\n+   #586 = NameAndType        #373:#392    // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n+   #587 = NameAndType        #373:#414    // \"<init>\":()V\n+   #588 = Utf8               java/util/LinkedList\n+   #589 = NameAndType        #336:#337    // entries:Ljava/util/List;\n+   #590 = Utf8               java/util/HashMap\n+   #591 = NameAndType        #373:#538    // \"<init>\":(I)V\n+   #592 = NameAndType        #339:#340    // nameMap:Ljava/util/Map;\n+   #593 = NameAndType        #351:#350    // closed:Z\n+   #594 = NameAndType        #353:#309    // dwordBuf:[B\n+   #595 = NameAndType        #354:#309    // wordBuf:[B\n+   #596 = NameAndType        #355:#309    // cfhBuf:[B\n+   #597 = NameAndType        #356:#309    // shortBuf:[B\n+   #598 = Class              #865         // java/nio/ByteBuffer\n+   #599 = NameAndType        #866:#867    // wrap:([B)Ljava/nio/ByteBuffer;\n+   #600 = NameAndType        #357:#358    // dwordBbuf:Ljava/nio/ByteBuffer;\n+   #601 = NameAndType        #359:#358    // wordBbuf:Ljava/nio/ByteBuffer;\n+   #602 = NameAndType        #360:#358    // cfhBbuf:Ljava/nio/ByteBuffer;\n+   #603 = NameAndType        #361:#358    // shortBbuf:Ljava/nio/ByteBuffer;\n+   #604 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+   #605 = NameAndType        #352:#350    // isSplitZipArchive:Z\n+   #606 = NameAndType        #346:#343    // archiveName:Ljava/lang/String;\n+   #607 = NameAndType        #342:#343    // encoding:Ljava/lang/String;\n+   #608 = NameAndType        #868:#869    // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #609 = NameAndType        #344:#345    // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #610 = NameAndType        #349:#350    // useUnicodeExtraFields:Z\n+   #611 = NameAndType        #471:#472    // populateFromCentralDirectory:()Ljava/util/Map;\n+   #612 = NameAndType        #512:#489    // resolveLocalFileHeaderData:(Ljava/util/Map;)V\n+   #613 = NameAndType        #431:#414    // fillNameMap:()V\n+   #614 = Utf8               java/io/IOException\n+   #615 = Utf8               java/lang/StringBuilder\n+   #616 = Utf8               Error on ZipFile\n+   #617 = NameAndType        #870:#871    // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #618 = NameAndType        #373:#872    // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #619 = Utf8               java/io/File\n+   #620 = NameAndType        #373:#406    // \"<init>\":(Ljava/lang/String;)V\n+   #621 = Class              #873         // org/apache/commons/compress/archivers/zip/ZipUtil\n+   #622 = NameAndType        #874:#410    // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #623 = NameAndType        #413:#414    // close:()V\n+   #624 = NameAndType        #448:#442    // getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n+   #625 = NameAndType        #875:#543    // hasMoreElements:()Z\n+   #626 = NameAndType        #876:#877    // nextElement:()Ljava/lang/Object;\n+   #627 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+   #628 = Class              #878         // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n+   #629 = NameAndType        #879:#410    // test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #630 = NameAndType        #467:#459    // getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+   #631 = Class              #880         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+   #632 = NameAndType        #881:#882    // addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+   #633 = Utf8               java/lang/IllegalArgumentException\n+   #634 = Utf8               Corrupted archive, stream boundaries are out of range\n+   #635 = Utf8               java/nio/channels/FileChannel\n+   #636 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n+   #637 = NameAndType        #373:#883    // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+   #638 = Utf8               org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n+   #639 = NameAndType        #373:#884    // \"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n+   #640 = Utf8               BootstrapMethods\n+   #641 = MethodHandle       6:#885       // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+   #642 = MethodType         #886         //  (Ljava/lang/Object;)V\n+   #643 = MethodHandle       7:#887       // REF_invokeSpecial org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #644 = MethodType         #523         //  (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #645 = NameAndType        #888:#889    // accept:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n+   #646 = NameAndType        #890:#891    // forEach:(Ljava/util/function/Consumer;)V\n+   #647 = NameAndType        #432:#414    // finalize:()V\n+   #648 = NameAndType        #365:#313    // firstLocalFileHeaderOffset:J\n+   #649 = NameAndType        #426:#427    // createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n+   #650 = NameAndType        #436:#457    // getDataOffset:()J\n+   #651 = Utf8               org/apache/commons/compress/archivers/EntryStreamOffsets\n+   #652 = NameAndType        #524:#525    // setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n+   #653 = Class              #892         // java/util/Collections\n+   #654 = NameAndType        #893:#894    // enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n+   #655 = NameAndType        #895:#896    // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #656 = Utf8               java/util/List\n+   #657 = NameAndType        #897:#898    // emptyList:()Ljava/util/List;\n+   #658 = NameAndType        #899:#450    // EMPTY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #659 = NameAndType        #900:#901    // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #660 = NameAndType        #332:#333    // offsetComparator:Ljava/util/Comparator;\n+   #661 = Class              #902         // java/util/Arrays\n+   #662 = NameAndType        #903:#904    // sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n+   #663 = NameAndType        #905:#906    // asList:([Ljava/lang/Object;)Ljava/util/List;\n+   #664 = NameAndType        #907:#877    // getFirst:()Ljava/lang/Object;\n+   #665 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$Entry\n+   #666 = NameAndType        #908:#523    // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #667 = Utf8               java/io/BufferedInputStream\n+   #668 = NameAndType        #373:#909    // \"<init>\":(Ljava/io/InputStream;)V\n+   #669 = NameAndType        #910:#516    // $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+   #670 = NameAndType        #911:#912    // getMethod:()I\n+   #671 = Class              #913         // org/apache/commons/compress/archivers/zip/ZipMethod\n+   #672 = NameAndType        #914:#915    // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #673 = NameAndType        #916:#912    // ordinal:()I\n+   #674 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n+   #675 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+   #676 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+   #677 = NameAndType        #917:#918    // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #678 = NameAndType        #919:#912    // getSlidingDictionarySize:()I\n+   #679 = NameAndType        #920:#912    // getNumberOfShannonFanoTrees:()I\n+   #680 = NameAndType        #373:#921    // \"<init>\":(IILjava/io/InputStream;)V\n+   #681 = Utf8               bad IMPLODE data\n+   #682 = Utf8               java/util/zip/Inflater\n+   #683 = NameAndType        #373:#922    // \"<init>\":(Z)V\n+   #684 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$1\n+   #685 = Utf8               java/io/SequenceInputStream\n+   #686 = Utf8               java/io/ByteArrayInputStream\n+   #687 = NameAndType        #308:#309    // ONE_ZERO_BYTE:[B\n+   #688 = NameAndType        #373:#923    // \"<init>\":([B)V\n+   #689 = NameAndType        #373:#924    // \"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n+   #690 = NameAndType        #373:#925    // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n+   #691 = Utf8               org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+   #692 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+   #693 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+   #694 = NameAndType        #373:#926    // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #695 = NameAndType        #436:#437    // getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+   #696 = NameAndType        #927:#457    // getCompressedSize:()J\n+   #697 = NameAndType        #928:#543    // isUnixSymlink:()Z\n+   #698 = NameAndType        #458:#459    // getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+   #699 = NameAndType        #929:#930    // toByteArray:(Ljava/io/InputStream;)[B\n+   #700 = NameAndType        #931:#932    // decode:([B)Ljava/lang/String;\n+   #701 = Utf8               java/lang/Throwable\n+   #702 = NameAndType        #933:#934    // addSuppressed:(Ljava/lang/Throwable;)V\n+   #703 = NameAndType        #478:#414    // positionAtCentralDirectory:()V\n+   #704 = NameAndType        #935:#457    // position:()J\n+   #705 = NameAndType        #364:#313    // centralDirectoryStartOffset:J\n+   #706 = NameAndType        #936:#937    // rewind:()Ljava/nio/Buffer;\n+   #707 = NameAndType        #938:#939    // readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+   #708 = Class              #940         // org/apache/commons/compress/archivers/zip/ZipLong\n+   #709 = NameAndType        #941:#942    // getValue:([B)J\n+   #710 = NameAndType        #312:#313    // CFH_SIG:J\n+   #711 = NameAndType        #542:#543    // startsWithLocalFileHeader:()Z\n+   #712 = Utf8               Central directory is empty, can\\'t expand corrupt archive.\n+   #713 = NameAndType        #488:#489    // readCentralDirectoryEntry:(Ljava/util/Map;)V\n+   #714 = NameAndType        #487:#414    // positionAtEndOfCentralDirectoryRecord:()V\n+   #715 = NameAndType        #935:#943    // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #716 = NameAndType        #944:#309    // ZIP64_EOCD_LOC_SIG:[B\n+   #717 = NameAndType        #945:#946    // equals:([B[B)Z\n+   #718 = NameAndType        #537:#538    // skipBytes:(I)V\n+   #719 = NameAndType        #481:#414    // positionAtCentralDirectory32:()V\n+   #720 = NameAndType        #484:#414    // positionAtCentralDirectory64:()V\n+   #721 = Class              #947         // org/apache/commons/compress/archivers/zip/ZipShort\n+   #722 = NameAndType        #941:#948    // getValue:([B)I\n+   #723 = NameAndType        #362:#313    // centralDirectoryStartDiskNumber:J\n+   #724 = NameAndType        #363:#313    // centralDirectoryStartRelativeOffset:J\n+   #725 = NameAndType        #935:#949    // position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+   #726 = Class              #950         // java/lang/Long\n+   #727 = NameAndType        #951:#952    // max:(JJ)J\n+   #728 = NameAndType        #953:#942    // getLongValue:([B)J\n+   #729 = NameAndType        #954:#309    // ZIP64_EOCD_SIG:[B\n+   #730 = Utf8               java/util/zip/ZipException\n+   #731 = Utf8               Archive\\'s ZIP64 end of central directory locator is corrupt.\n+   #732 = NameAndType        #955:#309    // EOCD_SIG:[B\n+   #733 = NameAndType        #544:#545    // tryToLocateSignature:(JJ[B)Z\n+   #734 = Utf8               Archive is not a ZIP archive\n+   #735 = NameAndType        #941:#956    // getValue:([BI)I\n+   #736 = NameAndType        #957:#538    // setVersionMadeBy:(I)V\n+   #737 = NameAndType        #958:#538    // setPlatform:(I)V\n+   #738 = NameAndType        #959:#538    // setVersionRequired:(I)V\n+   #739 = NameAndType        #960:#961    // parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #740 = NameAndType        #962:#543    // usesUTF8ForNames:()Z\n+   #741 = NameAndType        #963:#345    // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #742 = Class              #964         // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+   #743 = NameAndType        #966:#967    // NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+   #744 = NameAndType        #968:#969    // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+   #745 = NameAndType        #970:#971    // setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+   #746 = NameAndType        #972:#538    // setRawFlag:(I)V\n+   #747 = NameAndType        #973:#538    // setMethod:(I)V\n+   #748 = NameAndType        #941:#974    // getValue:([BI)J\n+   #749 = NameAndType        #975:#976    // dosToJavaTime:(J)J\n+   #750 = NameAndType        #977:#978    // setTime:(J)V\n+   #751 = NameAndType        #979:#978    // setCrc:(J)V\n+   #752 = Utf8               broken archive, entry with negative compressed size\n+   #753 = NameAndType        #980:#978    // setCompressedSize:(J)V\n+   #754 = Utf8               broken archive, entry with negative size\n+   #755 = NameAndType        #981:#978    // setSize:(J)V\n+   #756 = Utf8               broken archive, entry with negative fileNameLen\n+   #757 = Utf8               broken archive, entry with negative extraLen\n+   #758 = Utf8               broken archive, entry with negative commentLen\n+   #759 = NameAndType        #982:#978    // setDiskNumberStart:(J)V\n+   #760 = NameAndType        #983:#538    // setInternalAttributes:(I)V\n+   #761 = NameAndType        #984:#978    // setExternalAttributes:(J)V\n+   #762 = NameAndType        #985:#986    // readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n+   #763 = Utf8               java/io/EOFException\n+   #764 = NameAndType        #987:#988    // setName:(Ljava/lang/String;[B)V\n+   #765 = NameAndType        #989:#978    // setLocalHeaderOffset:(J)V\n+   #766 = NameAndType        #990:#991    // add:(Ljava/lang/Object;)Z\n+   #767 = NameAndType        #992:#923    // setCentralDirectoryExtra:([B)V\n+   #768 = Utf8               java/lang/RuntimeException\n+   #769 = Utf8               Invalid extra data in entry\n+   #770 = NameAndType        #993:#440    // getName:()Ljava/lang/String;\n+   #771 = NameAndType        #994:#995    // initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+   #772 = NameAndType        #527:#523    // setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #773 = NameAndType        #522:#523    // sanityCheckLFHOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #774 = NameAndType        #996:#406    // setComment:(Ljava/lang/String;)V\n+   #775 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n+   #776 = NameAndType        #373:#997    // \"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+   #777 = NameAndType        #998:#999    // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #778 = NameAndType        #1000:#922   // setStreamContiguous:(Z)V\n+   #779 = NameAndType        #1001:#1002  // iterator:()Ljava/util/Iterator;\n+   #780 = NameAndType        #1003:#543   // hasNext:()Z\n+   #781 = NameAndType        #1004:#877   // next:()Ljava/lang/Object;\n+   #782 = NameAndType        #1005:#923   // setExtra:([B)V\n+   #783 = NameAndType        #1006:#991   // containsKey:(Ljava/lang/Object;)Z\n+   #784 = NameAndType        #1007:#1008  // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+   #785 = NameAndType        #1009:#1008  // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+   #786 = NameAndType        #1010:#1011  // setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+   #787 = NameAndType        #1012:#457   // getDiskNumberStart:()J\n+   #788 = Utf8               broken archive, entry with negative disk number\n+   #789 = NameAndType        #1013:#457   // getLocalHeaderOffset:()J\n+   #790 = Utf8               broken archive, entry with negative local file header offset\n+   #791 = Utf8               local file header for\n+   #792 = Utf8                starts on a later disk than central directory\n+   #793 = Utf8                starts after central directory\n+   #794 = NameAndType        #1014:#937   // flip:()Ljava/nio/Buffer;\n+   #795 = NameAndType        #895:#867    // get:([B)Ljava/nio/ByteBuffer;\n+   #796 = NameAndType        #524:#978    // setDataOffset:(J)V\n+   #797 = Utf8               data for\n+   #798 = Utf8                overlaps with central directory.\n+   #799 = NameAndType        #1015:#1016  // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #800 = NameAndType        #1017:#1018  // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+   #801 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+   #802 = Utf8               archive contains unparseable zip64 extra field\n+   #803 = NameAndType        #1019:#457   // getSize:()J\n+   #804 = NameAndType        #1020:#1021  // reparseCentralDirectoryData:(ZZZZ)V\n+   #805 = NameAndType        #1019:#1022  // getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #806 = NameAndType        #953:#457    // getLongValue:()J\n+   #807 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #808 = NameAndType        #373:#978    // \"<init>\":(J)V\n+   #809 = NameAndType        #981:#1023   // setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #810 = NameAndType        #927:#1022   // getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #811 = NameAndType        #980:#1023   // setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #812 = NameAndType        #1024:#1022  // getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #813 = NameAndType        #1025:#1026  // getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #814 = NameAndType        #941:#457    // getValue:()J\n+   #815 = NameAndType        #501:#457    // size:()J\n+   #816 = NameAndType        #1027:#309   // LFH_SIG:[B\n+   #817 = Class              #1028        // java/lang/Math\n+   #818 = NameAndType        #895:#1029   // get:()B\n+   #819 = MethodType         #896         //  (Ljava/lang/Object;)Ljava/lang/Object;\n+   #820 = MethodHandle       6:#1030      // REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n+   #821 = MethodType         #553         //  (Ljava/lang/String;)Ljava/util/LinkedList;\n+   #822 = NameAndType        #1031:#1032  // apply:()Ljava/util/function/Function;\n+   #823 = NameAndType        #1033:#1034  // computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n+   #824 = NameAndType        #1035:#886   // addLast:(Ljava/lang/Object;)V\n+   #825 = NameAndType        #312:#309    // CFH_SIG:[B\n+   #826 = MethodType         #1036        //  (Ljava/lang/Object;)J\n+   #827 = MethodHandle       5:#231       // REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+   #828 = MethodType         #437         //  (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+   #829 = NameAndType        #1037:#1038  // applyAsLong:()Ljava/util/function/ToLongFunction;\n+   #830 = Class              #1039        // java/util/Comparator\n+   #831 = NameAndType        #1040:#1041  // comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+   #832 = MethodHandle       5:#233       // REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+   #833 = NameAndType        #1042:#1041  // thenComparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+   #834 = Utf8               java/lang/Object\n+   #835 = Utf8               java/io/Closeable\n+   #836 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$2\n+   #837 = Utf8               java/nio/channels/SeekableByteChannel\n+   #838 = Utf8               java/lang/String\n+   #839 = Utf8               java/util/Map\n+   #840 = Utf8               java/util/Enumeration\n+   #841 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n+   #842 = Utf8               java/io/InputStream\n+   #843 = Utf8               java/lang/Iterable\n+   #844 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+   #845 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+   #846 = Utf8               java/util/Iterator\n+   #847 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #848 = Utf8               org/apache/commons/compress/utils/IOUtils\n+   #849 = Utf8               (Ljava/io/Closeable;)V\n+   #850 = Utf8               toPath\n+   #851 = Utf8               ()Ljava/nio/file/Path;\n+   #852 = Utf8               java/nio/file/StandardOpenOption\n+   #853 = Utf8               READ\n+   #854 = Utf8               Ljava/nio/file/StandardOpenOption;\n+   #855 = Utf8               java/util/EnumSet\n+   #856 = Utf8               of\n+   #857 = Utf8               (Ljava/lang/Enum;)Ljava/util/EnumSet;\n+   #858 = Utf8               java/nio/file/Files\n+   #859 = Utf8               newByteChannel\n+   #860 = Utf8               (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+   #861 = Utf8               getAbsolutePath\n+   #862 = Utf8               java/nio/file/Path\n+   #863 = Utf8               toAbsolutePath\n+   #864 = Utf8               toString\n+   #865 = Utf8               java/nio/ByteBuffer\n+   #866 = Utf8               wrap\n+   #867 = Utf8               ([B)Ljava/nio/ByteBuffer;\n+   #868 = Utf8               getZipEncoding\n+   #869 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #870 = Utf8               append\n+   #871 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #872 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #873 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+   #874 = Utf8               canHandleEntryData\n+   #875 = Utf8               hasMoreElements\n+   #876 = Utf8               nextElement\n+   #877 = Utf8               ()Ljava/lang/Object;\n+   #878 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n+   #879 = Utf8               test\n+   #880 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+   #881 = Utf8               addRawArchiveEntry\n+   #882 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+   #883 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+   #884 = Utf8               (JJLjava/nio/channels/SeekableByteChannel;)V\n+   #885 = Methodref          #1043.#1044  // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+   #886 = Utf8               (Ljava/lang/Object;)V\n+   #887 = Methodref          #2.#1045     // org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #888 = Utf8               accept\n+   #889 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n+   #890 = Utf8               forEach\n+   #891 = Utf8               (Ljava/util/function/Consumer;)V\n+   #892 = Utf8               java/util/Collections\n+   #893 = Utf8               enumeration\n+   #894 = Utf8               (Ljava/util/Collection;)Ljava/util/Enumeration;\n+   #895 = Utf8               get\n+   #896 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+   #897 = Utf8               emptyList\n+   #898 = Utf8               ()Ljava/util/List;\n+   #899 = Utf8               EMPTY_ARRAY\n+   #900 = Utf8               toArray\n+   #901 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #902 = Utf8               java/util/Arrays\n+   #903 = Utf8               sort\n+   #904 = Utf8               ([Ljava/lang/Object;Ljava/util/Comparator;)V\n+   #905 = Utf8               asList\n+   #906 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n+   #907 = Utf8               getFirst\n+   #908 = Utf8               checkRequestedFeatures\n+   #909 = Utf8               (Ljava/io/InputStream;)V\n+   #910 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod\n+   #911 = Utf8               getMethod\n+   #912 = Utf8               ()I\n+   #913 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n+   #914 = Utf8               getMethodByCode\n+   #915 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #916 = Utf8               ordinal\n+   #917 = Utf8               getGeneralPurposeBit\n+   #918 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #919 = Utf8               getSlidingDictionarySize\n+   #920 = Utf8               getNumberOfShannonFanoTrees\n+   #921 = Utf8               (IILjava/io/InputStream;)V\n+   #922 = Utf8               (Z)V\n+   #923 = Utf8               ([B)V\n+   #924 = Utf8               (Ljava/io/InputStream;Ljava/io/InputStream;)V\n+   #925 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n+   #926 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #927 = Utf8               getCompressedSize\n+   #928 = Utf8               isUnixSymlink\n+   #929 = Utf8               toByteArray\n+   #930 = Utf8               (Ljava/io/InputStream;)[B\n+   #931 = Utf8               decode\n+   #932 = Utf8               ([B)Ljava/lang/String;\n+   #933 = Utf8               addSuppressed\n+   #934 = Utf8               (Ljava/lang/Throwable;)V\n+   #935 = Utf8               position\n+   #936 = Utf8               rewind\n+   #937 = Utf8               ()Ljava/nio/Buffer;\n+   #938 = Utf8               readFully\n+   #939 = Utf8               (Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+   #940 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+   #941 = Utf8               getValue\n+   #942 = Utf8               ([B)J\n+   #943 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+   #944 = Utf8               ZIP64_EOCD_LOC_SIG\n+   #945 = Utf8               equals\n+   #946 = Utf8               ([B[B)Z\n+   #947 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+   #948 = Utf8               ([B)I\n+   #949 = Utf8               (JJ)Ljava/nio/channels/SeekableByteChannel;\n+   #950 = Utf8               java/lang/Long\n+   #951 = Utf8               max\n+   #952 = Utf8               (JJ)J\n+   #953 = Utf8               getLongValue\n+   #954 = Utf8               ZIP64_EOCD_SIG\n+   #955 = Utf8               EOCD_SIG\n+   #956 = Utf8               ([BI)I\n+   #957 = Utf8               setVersionMadeBy\n+   #958 = Utf8               setPlatform\n+   #959 = Utf8               setVersionRequired\n+   #960 = Utf8               parse\n+   #961 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #962 = Utf8               usesUTF8ForNames\n+   #963 = Utf8               UTF8_ZIP_ENCODING\n+   #964 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+   #965 = Utf8               NameSource\n+   #966 = Utf8               NAME_WITH_EFS_FLAG\n+   #967 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+   #968 = Utf8               setNameSource\n+   #969 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+   #970 = Utf8               setGeneralPurposeBit\n+   #971 = Utf8               (Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+   #972 = Utf8               setRawFlag\n+   #973 = Utf8               setMethod\n+   #974 = Utf8               ([BI)J\n+   #975 = Utf8               dosToJavaTime\n+   #976 = Utf8               (J)J\n+   #977 = Utf8               setTime\n+   #978 = Utf8               (J)V\n+   #979 = Utf8               setCrc\n+   #980 = Utf8               setCompressedSize\n+   #981 = Utf8               setSize\n+   #982 = Utf8               setDiskNumberStart\n+   #983 = Utf8               setInternalAttributes\n+   #984 = Utf8               setExternalAttributes\n+   #985 = Utf8               readRange\n+   #986 = Utf8               (Ljava/nio/channels/ReadableByteChannel;I)[B\n+   #987 = Utf8               setName\n+   #988 = Utf8               (Ljava/lang/String;[B)V\n+   #989 = Utf8               setLocalHeaderOffset\n+   #990 = Utf8               add\n+   #991 = Utf8               (Ljava/lang/Object;)Z\n+   #992 = Utf8               setCentralDirectoryExtra\n+   #993 = Utf8               getName\n+   #994 = Utf8               initCause\n+   #995 = Utf8               (Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+   #996 = Utf8               setComment\n+   #997 = Utf8               ([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+   #998 = Utf8               put\n+   #999 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #1000 = Utf8               setStreamContiguous\n+  #1001 = Utf8               iterator\n+  #1002 = Utf8               ()Ljava/util/Iterator;\n+  #1003 = Utf8               hasNext\n+  #1004 = Utf8               next\n+  #1005 = Utf8               setExtra\n+  #1006 = Utf8               containsKey\n+  #1007 = Utf8               access$200\n+  #1008 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #1009 = Utf8               access$300\n+  #1010 = Utf8               setNameAndCommentFromExtraFields\n+  #1011 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #1012 = Utf8               getDiskNumberStart\n+  #1013 = Utf8               getLocalHeaderOffset\n+  #1014 = Utf8               flip\n+  #1015 = Utf8               HEADER_ID\n+  #1016 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #1017 = Utf8               getExtraField\n+  #1018 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #1019 = Utf8               getSize\n+  #1020 = Utf8               reparseCentralDirectoryData\n+  #1021 = Utf8               (ZZZZ)V\n+  #1022 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #1023 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #1024 = Utf8               getRelativeHeaderOffset\n+  #1025 = Utf8               getDiskStartNumber\n+  #1026 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #1027 = Utf8               LFH_SIG\n+  #1028 = Utf8               java/lang/Math\n+  #1029 = Utf8               ()B\n+  #1030 = Methodref          #2.#1046     // org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n+  #1031 = Utf8               apply\n+  #1032 = Utf8               ()Ljava/util/function/Function;\n+  #1033 = Utf8               computeIfAbsent\n+  #1034 = Utf8               (Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n+  #1035 = Utf8               addLast\n+  #1036 = Utf8               (Ljava/lang/Object;)J\n+  #1037 = Utf8               applyAsLong\n+  #1038 = Utf8               ()Ljava/util/function/ToLongFunction;\n+  #1039 = Utf8               java/util/Comparator\n+  #1040 = Utf8               comparingLong\n+  #1041 = Utf8               (Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+  #1042 = Utf8               thenComparingLong\n+  #1043 = Class              #1047        // java/lang/invoke/LambdaMetafactory\n+  #1044 = NameAndType        #1048:#1051  // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #1045 = NameAndType        #551:#523    // lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #1046 = NameAndType        #552:#553    // lambda$fillNameMap$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n+  #1047 = Utf8               java/lang/invoke/LambdaMetafactory\n+  #1048 = Utf8               metafactory\n+  #1049 = Class              #1053        // java/lang/invoke/MethodHandles$Lookup\n+  #1050 = Utf8               Lookup\n+  #1051 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #1052 = Class              #1054        // java/lang/invoke/MethodHandles\n+  #1053 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #1054 = Utf8               java/lang/invoke/MethodHandles\n {\n   private static final int HASH_SIZE = 509;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 509\n \n   static final int NIBLET_MASK = 15;\n@@ -1998,14 +1979,17 @@\n         60: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         63: invokespecial #74                 // Method org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n         66: areturn\n       LineNumberTable:\n         line 785: 0\n         line 786: 20\n         line 789: 30\n+        line 790: 40\n+        line 791: 53\n+        line 789: 66\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      67     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n             0      67     1 start   J\n             0      67     3 remaining   J\n       StackMapTable: number_of_entries = 4\n         frame_type = 20 /* same */\n@@ -2089,15 +2073,15 @@\n         14: lconst_0\n         15: aload_0\n         16: getfield      #79                 // Field firstLocalFileHeaderOffset:J\n         19: invokespecial #80                 // Method createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n         22: areturn\n       LineNumberTable:\n         line 828: 0\n-        line 829: 19\n+        line 829: 9\n         line 828: 22\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      23     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n       StackMapTable: number_of_entries = 2\n         frame_type = 13 /* same */\n         frame_type = 72 /* same_locals_1_stack_item */\n@@ -2166,15 +2150,15 @@\n          4: invokestatic  #86                 // Method java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n          7: areturn\n       LineNumberTable:\n         line 859: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n-    Signature: #446                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #443                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public java.lang.Iterable<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntries(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/lang/Iterable;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_0\n@@ -2204,15 +2188,15 @@\n            14      12     2 entriesOfThatName   Ljava/util/List<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n       StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n           offset_delta = 22\n           locals = [ class java/util/List ]\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/lang/Iterable ]\n-    Signature: #451                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #447                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public java.util.Enumeration<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntriesInPhysicalOrder();\n     descriptor: ()Ljava/util/Enumeration;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n@@ -2232,15 +2216,15 @@\n         line 888: 0\n         line 889: 16\n         line 890: 23\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      31     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n            16      15     1 allEntries   [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-    Signature: #446                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #443                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public java.lang.Iterable<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntriesInPhysicalOrder(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/lang/Iterable;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=4, args_size=2\n          0: getstatic     #90                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry.EMPTY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n@@ -2280,15 +2264,15 @@\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n            18      25     3 linkedList   Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n       StackMapTable: number_of_entries = 1\n         frame_type = 253 /* append */\n           offset_delta = 38\n           locals = [ class \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\", class java/util/LinkedList ]\n-    Signature: #451                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #447                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry(java.lang.String);\n     descriptor: (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_0\n@@ -2540,116 +2524,82 @@\n     Exceptions:\n       throws java.io.IOException\n \n   public java.lang.String getUnixSymlink(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n-      stack=2, locals=8, args_size=2\n+      stack=2, locals=5, args_size=2\n          0: aload_1\n-         1: ifnull        110\n+         1: ifnull        63\n          4: aload_1\n          5: invokevirtual #133                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z\n-         8: ifeq          110\n+         8: ifeq          63\n         11: aload_0\n         12: aload_1\n         13: invokevirtual #134                // Method getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n         16: astore_2\n-        17: aconst_null\n-        18: astore_3\n-        19: aload_0\n-        20: getfield      #44                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-        23: aload_2\n-        24: invokestatic  #135                // Method org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n-        27: invokeinterface #136,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-        32: astore        4\n-        34: aload_2\n-        35: ifnull        64\n-        38: aload_3\n-        39: ifnull        60\n+        17: aload_0\n+        18: getfield      #44                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        21: aload_2\n+        22: invokestatic  #135                // Method org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n+        25: invokeinterface #136,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+        30: astore_3\n+        31: aload_2\n+        32: ifnull        39\n+        35: aload_2\n+        36: invokevirtual #137                // Method java/io/InputStream.close:()V\n+        39: aload_3\n+        40: areturn\n+        41: astore_3\n         42: aload_2\n-        43: invokevirtual #137                // Method java/io/InputStream.close:()V\n-        46: goto          64\n-        49: astore        5\n-        51: aload_3\n-        52: aload         5\n-        54: invokevirtual #139                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-        57: goto          64\n-        60: aload_2\n-        61: invokevirtual #137                // Method java/io/InputStream.close:()V\n-        64: aload         4\n-        66: areturn\n-        67: astore        4\n-        69: aload         4\n-        71: astore_3\n-        72: aload         4\n-        74: athrow\n-        75: astore        6\n-        77: aload_2\n-        78: ifnull        107\n-        81: aload_3\n-        82: ifnull        103\n-        85: aload_2\n-        86: invokevirtual #137                // Method java/io/InputStream.close:()V\n-        89: goto          107\n-        92: astore        7\n-        94: aload_3\n-        95: aload         7\n-        97: invokevirtual #139                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-       100: goto          107\n-       103: aload_2\n-       104: invokevirtual #137                // Method java/io/InputStream.close:()V\n-       107: aload         6\n-       109: athrow\n-       110: aconst_null\n-       111: areturn\n+        43: ifnull        61\n+        46: aload_2\n+        47: invokevirtual #137                // Method java/io/InputStream.close:()V\n+        50: goto          61\n+        53: astore        4\n+        55: aload_3\n+        56: aload         4\n+        58: invokevirtual #139                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        61: aload_3\n+        62: athrow\n+        63: aconst_null\n+        64: areturn\n       Exception table:\n          from    to  target type\n-            42    46    49   Class java/lang/Throwable\n-            19    34    67   Class java/lang/Throwable\n-            19    34    75   any\n-            85    89    92   Class java/lang/Throwable\n-            67    77    75   any\n+            17    31    41   Class java/lang/Throwable\n+            46    50    53   Class java/lang/Throwable\n       LineNumberTable:\n         line 1051: 0\n         line 1052: 11\n-        line 1053: 19\n-        line 1054: 34\n-        line 1053: 64\n-        line 1052: 67\n-        line 1054: 75\n-        line 1056: 110\n+        line 1053: 17\n+        line 1054: 31\n+        line 1053: 39\n+        line 1052: 41\n+        line 1056: 63\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           17      93     2    in   Ljava/io/InputStream;\n-            0     112     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n-            0     112     1 entry   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-      StackMapTable: number_of_entries = 9\n+           17      46     2    in   Ljava/io/InputStream;\n+            0      65     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n+            0      65     1 entry   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+      StackMapTable: number_of_entries = 5\n+        frame_type = 253 /* append */\n+          offset_delta = 39\n+          locals = [ class java/io/InputStream, class java/lang/String ]\n         frame_type = 255 /* full_frame */\n-          offset_delta = 49\n-          locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class org/apache/commons/compress/archivers/zip/ZipArchiveEntry, class java/io/InputStream, class java/lang/Throwable, class java/lang/String ]\n+          offset_delta = 1\n+          locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class org/apache/commons/compress/archivers/zip/ZipArchiveEntry, class java/io/InputStream ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 10 /* same */\n-        frame_type = 3 /* same */\n         frame_type = 255 /* full_frame */\n-          offset_delta = 2\n+          offset_delta = 11\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class org/apache/commons/compress/archivers/zip/ZipArchiveEntry, class java/io/InputStream, class java/lang/Throwable ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 71 /* same_locals_1_stack_item */\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 255 /* full_frame */\n-          offset_delta = 16\n-          locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class org/apache/commons/compress/archivers/zip/ZipArchiveEntry, class java/io/InputStream, class java/lang/Throwable, top, top, class java/lang/Throwable ]\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 10 /* same */\n-        frame_type = 3 /* same */\n-        frame_type = 255 /* full_frame */\n-          offset_delta = 2\n-          locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class org/apache/commons/compress/archivers/zip/ZipArchiveEntry ]\n-          stack = []\n+        frame_type = 7 /* same */\n+        frame_type = 249 /* chop */\n+          offset_delta = 1\n     Exceptions:\n       throws java.io.IOException\n \n   private java.util.Map<org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment> populateFromCentralDirectory() throws java.io.IOException;\n     descriptor: ()Ljava/util/Map;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n@@ -2739,15 +2689,15 @@\n       StackMapTable: number_of_entries = 2\n         frame_type = 253 /* append */\n           offset_delta = 77\n           locals = [ class java/util/HashMap, long ]\n         frame_type = 42 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #485                         // ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n+    Signature: #477                         // ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n \n   private void positionAtCentralDirectory() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=1\n          0: aload_0\n@@ -3547,15 +3497,15 @@\n         line 1259: 39\n         line 1260: 42\n         line 1261: 48\n         line 1263: 60\n         line 1264: 72\n         line 1266: 75\n         line 1267: 85\n-        line 1268: 92\n+        line 1269: 92\n         line 1270: 109\n         line 1271: 114\n         line 1273: 121\n         line 1274: 127\n         line 1276: 139\n         line 1279: 142\n         line 1280: 154\n@@ -3674,15 +3624,15 @@\n         frame_type = 43 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 36\n           locals = [ class \"[B\" ]\n         frame_type = 44 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #521                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n+    Signature: #511                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n \n   private void resolveLocalFileHeaderData(java.util.Map<org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment>) throws java.io.IOException;\n     descriptor: (Ljava/util/Map;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=11, args_size=2\n          0: aload_0\n@@ -3825,15 +3775,15 @@\n           offset_delta = 38\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class java/util/Map, class java/util/Iterator ]\n           stack = []\n         frame_type = 250 /* chop */\n           offset_delta = 2\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #521                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n+    Signature: #511                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n \n   private void sanityCheckLFHOffset(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_1\n@@ -4610,15 +4560,15 @@\n             0      30     1    ze   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n             5      25     2  name   Ljava/lang/String;\n            24       6     3 entriesOfThatName   Ljava/util/LinkedList;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n            24       6     3 entriesOfThatName   Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n-  private static java.util.LinkedList lambda$null$0(java.lang.String);\n+  private static java.util.LinkedList lambda$fillNameMap$0(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/util/LinkedList;\n     flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: new           #23                 // class java/util/LinkedList\n          3: dup\n          4: invokespecial #24                 // Method java/util/LinkedList.\"<init>\":()V\n@@ -4673,30 +4623,30 @@\n InnerClasses:\n   static #286;                            // class org/apache/commons/compress/archivers/zip/ZipFile$2\n   private static #288= #106 of #2;        // StoredStatisticsStream=class org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream of class org/apache/commons/compress/archivers/zip/ZipFile\n   private static final #289= #219 of #2;  // NameAndComment=class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment of class org/apache/commons/compress/archivers/zip/ZipFile\n   private static #290= #98 of #2;         // Entry=class org/apache/commons/compress/archivers/zip/ZipFile$Entry of class org/apache/commons/compress/archivers/zip/ZipFile\n   private #291= #71 of #2;                // BoundedFileChannelInputStream=class org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream of class org/apache/commons/compress/archivers/zip/ZipFile\n   #118;                                   // class org/apache/commons/compress/archivers/zip/ZipFile$1\n-  public static final #984= #760 of #63;  // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  public static final #1069= #1068 of #1071; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+  public static final #965= #742 of #63;  // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  public static final #1050= #1049 of #1052; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #655 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  0: #641 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #656 (Ljava/lang/Object;)V\n-      #657 REF_invokeSpecial org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-      #658 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  1: #655 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #642 (Ljava/lang/Object;)V\n+      #643 REF_invokeSpecial org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+      #644 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  1: #641 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #838 (Ljava/lang/Object;)Ljava/lang/Object;\n-      #839 REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipFile.lambda$null$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n-      #840 (Ljava/lang/String;)Ljava/util/LinkedList;\n-  2: #655 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #819 (Ljava/lang/Object;)Ljava/lang/Object;\n+      #820 REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n+      #821 (Ljava/lang/String;)Ljava/util/LinkedList;\n+  2: #641 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #845 (Ljava/lang/Object;)J\n-      #846 REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n-      #847 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-  3: #655 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #826 (Ljava/lang/Object;)J\n+      #827 REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+      #828 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+  3: #641 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #845 (Ljava/lang/Object;)J\n-      #851 REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-      #847 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+      #826 (Ljava/lang/Object;)J\n+      #832 REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+      #828 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n"}]}
