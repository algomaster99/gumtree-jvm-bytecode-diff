{"diffoscope-json-version": 1, "source1": "first/GzipCompressorInputStream.class", "source2": "second/GzipCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,335 +1,335 @@\n-  SHA-256 checksum 37d320c3230e794f943fb168cb3e106870b4120c7c579eb63bad7e5dcc03ba91\n+  SHA-256 checksum 9a8d104ce53964676d610c3af28e3f334af4256363c473d47534cf3c93ab923b\n   Compiled from \"GzipCompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #42                         // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-  super_class: #96                        // org/apache/commons/compress/compressors/CompressorInputStream\n+  this_class: #2                          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+  super_class: #8                         // org/apache/commons/compress/compressors/CompressorInputStream\n   interfaces: 1, fields: 16, methods: 11, attributes: 1\n Constant pool:\n-    #1 = Methodref          #42.#182      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n-    #2 = Methodref          #96.#183      // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-    #3 = Fieldref           #42.#184      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.buf:[B\n-    #4 = Class              #185          // java/util/zip/Inflater\n-    #5 = Methodref          #4.#186       // java/util/zip/Inflater.\"<init>\":(Z)V\n-    #6 = Fieldref           #42.#187      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.inf:Ljava/util/zip/Inflater;\n-    #7 = Class              #188          // java/util/zip/CRC32\n-    #8 = Methodref          #7.#183       // java/util/zip/CRC32.\"<init>\":()V\n-    #9 = Fieldref           #42.#189      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.crc:Ljava/util/zip/CRC32;\n-   #10 = Fieldref           #42.#190      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.oneByte:[B\n-   #11 = Class              #191          // org/apache/commons/compress/compressors/gzip/GzipParameters\n-   #12 = Methodref          #11.#183      // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n-   #13 = Fieldref           #42.#192      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-   #14 = Class              #193          // org/apache/commons/compress/utils/CountingInputStream\n-   #15 = Methodref          #14.#194      // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #16 = Fieldref           #42.#195      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #17 = Methodref          #14.#196      // org/apache/commons/compress/utils/CountingInputStream.markSupported:()Z\n-   #18 = Fieldref           #42.#197      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.in:Ljava/io/InputStream;\n-   #19 = Class              #198          // java/io/BufferedInputStream\n-   #20 = Methodref          #19.#194      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #21 = Fieldref           #42.#199      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.decompressConcatenated:Z\n-   #22 = Methodref          #42.#200      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.init:(Z)Z\n-   #23 = Fieldref           #42.#201      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.$assertionsDisabled:Z\n-   #24 = Class              #202          // java/lang/AssertionError\n-   #25 = Methodref          #24.#183      // java/lang/AssertionError.\"<init>\":()V\n-   #26 = Methodref          #139.#203     // java/io/InputStream.read:()I\n-   #27 = Class              #204          // java/io/IOException\n-   #28 = String             #205          // Input is not in the .gz format\n-   #29 = String             #206          // Garbage after a valid .gz stream\n-   #30 = Methodref          #27.#207      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #31 = Class              #208          // java/io/DataInputStream\n-   #32 = Methodref          #31.#194      // java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #33 = InterfaceMethodref #151.#209     // java/io/DataInput.readUnsignedByte:()I\n-   #34 = Class              #210          // java/util/zip/Deflater\n-   #35 = Class              #211          // java/lang/StringBuilder\n-   #36 = Methodref          #35.#183      // java/lang/StringBuilder.\"<init>\":()V\n-   #37 = String             #212          // Unsupported compression method\n-   #38 = Methodref          #35.#213      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #39 = Methodref          #35.#214      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #40 = String             #215          //  in the .gz header\n-   #41 = Methodref          #35.#216      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #42 = Class              #217          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-   #43 = String             #218          // Reserved flags are set in the .gz header\n-   #44 = Methodref          #219.#220     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n-   #45 = Long               1000l\n-   #47 = Methodref          #11.#221      // org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n-   #48 = Methodref          #11.#222      // org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n-   #49 = Methodref          #11.#223      // org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n-   #50 = Class              #224          // java/lang/String\n-   #51 = Methodref          #42.#225      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.readToNull:(Ljava/io/DataInput;)[B\n-   #52 = Fieldref           #226.#227     // java/nio/charset/StandardCharsets.ISO_8859_1:Ljava/nio/charset/Charset;\n-   #53 = Methodref          #50.#228      // java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-   #54 = Methodref          #11.#229      // org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n-   #55 = Methodref          #11.#230      // org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n-   #56 = InterfaceMethodref #151.#231     // java/io/DataInput.readShort:()S\n-   #57 = Methodref          #4.#232       // java/util/zip/Inflater.reset:()V\n-   #58 = Methodref          #7.#232       // java/util/zip/CRC32.reset:()V\n-   #59 = Class              #233          // java/io/ByteArrayOutputStream\n-   #60 = Methodref          #59.#183      // java/io/ByteArrayOutputStream.\"<init>\":()V\n-   #61 = Methodref          #59.#234      // java/io/ByteArrayOutputStream.write:(I)V\n-   #62 = Methodref          #59.#235      // java/io/ByteArrayOutputStream.toByteArray:()[B\n-   #63 = Methodref          #59.#236      // java/io/ByteArrayOutputStream.close:()V\n-   #64 = Class              #237          // java/lang/Throwable\n-   #65 = Methodref          #64.#238      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #66 = Methodref          #42.#239      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.read:([BII)I\n-   #67 = Fieldref           #42.#240      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.endReached:Z\n-   #68 = Methodref          #4.#241       // java/util/zip/Inflater.needsInput:()Z\n-   #69 = Methodref          #139.#242     // java/io/InputStream.mark:(I)V\n-   #70 = Methodref          #139.#243     // java/io/InputStream.read:([B)I\n-   #71 = Fieldref           #42.#244      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.bufUsed:I\n-   #72 = Class              #245          // java/io/EOFException\n-   #73 = Methodref          #72.#183      // java/io/EOFException.\"<init>\":()V\n-   #74 = Methodref          #4.#246       // java/util/zip/Inflater.setInput:([BII)V\n-   #75 = Methodref          #4.#247       // java/util/zip/Inflater.inflate:([BII)I\n-   #76 = Class              #248          // java/util/zip/DataFormatException\n-   #77 = String             #249          // Gzip-compressed data is corrupt\n-   #78 = Methodref          #7.#250       // java/util/zip/CRC32.update:([BII)V\n-   #79 = Methodref          #42.#251      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.count:(I)V\n-   #80 = Methodref          #4.#252       // java/util/zip/Inflater.finished:()Z\n-   #81 = Methodref          #139.#232     // java/io/InputStream.reset:()V\n-   #82 = Methodref          #4.#253       // java/util/zip/Inflater.getRemaining:()I\n-   #83 = Methodref          #254.#255     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-   #84 = Methodref          #27.#183      // java/io/IOException.\"<init>\":()V\n-   #85 = Methodref          #7.#256       // java/util/zip/CRC32.getValue:()J\n-   #86 = String             #257          // Gzip-compressed data is corrupt (CRC32 error)\n-   #87 = Methodref          #4.#258       // java/util/zip/Inflater.getBytesWritten:()J\n-   #88 = Long               4294967295l\n-   #90 = String             #259          // Gzip-compressed data is corrupt(uncompressed size mismatch)\n-   #91 = Methodref          #4.#260       // java/util/zip/Inflater.end:()V\n-   #92 = Fieldref           #261.#197     // java/lang/System.in:Ljava/io/InputStream;\n-   #93 = Methodref          #139.#236     // java/io/InputStream.close:()V\n-   #94 = Methodref          #14.#262      // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n-   #95 = Methodref          #263.#264     // java/lang/Class.desiredAssertionStatus:()Z\n-   #96 = Class              #265          // org/apache/commons/compress/compressors/CompressorInputStream\n-   #97 = Class              #266          // org/apache/commons/compress/utils/InputStreamStatistics\n-   #98 = Utf8               FHCRC\n-   #99 = Utf8               I\n-  #100 = Utf8               ConstantValue\n-  #101 = Integer            2\n-  #102 = Utf8               FEXTRA\n-  #103 = Integer            4\n-  #104 = Utf8               FNAME\n-  #105 = Integer            8\n-  #106 = Utf8               FCOMMENT\n-  #107 = Integer            16\n-  #108 = Utf8               FRESERVED\n-  #109 = Integer            224\n-  #110 = Utf8               countingStream\n-  #111 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n-  #112 = Utf8               in\n-  #113 = Utf8               Ljava/io/InputStream;\n-  #114 = Utf8               decompressConcatenated\n-  #115 = Utf8               Z\n-  #116 = Utf8               buf\n-  #117 = Utf8               [B\n-  #118 = Utf8               bufUsed\n-  #119 = Utf8               inf\n-  #120 = Utf8               Ljava/util/zip/Inflater;\n-  #121 = Utf8               crc\n-  #122 = Utf8               Ljava/util/zip/CRC32;\n-  #123 = Utf8               endReached\n-  #124 = Utf8               oneByte\n-  #125 = Utf8               parameters\n-  #126 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #127 = Utf8               $assertionsDisabled\n-  #128 = Utf8               <init>\n-  #129 = Utf8               (Ljava/io/InputStream;)V\n-  #130 = Utf8               Code\n-  #131 = Utf8               LineNumberTable\n-  #132 = Utf8               LocalVariableTable\n-  #133 = Utf8               this\n-  #134 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n-  #135 = Utf8               inputStream\n-  #136 = Utf8               Exceptions\n-  #137 = Utf8               (Ljava/io/InputStream;Z)V\n-  #138 = Utf8               StackMapTable\n-  #139 = Class              #267          // java/io/InputStream\n-  #140 = Utf8               getMetaData\n-  #141 = Utf8               ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #142 = Utf8               init\n-  #143 = Utf8               (Z)Z\n-  #144 = Utf8               xlen\n-  #145 = Utf8               isFirstMember\n-  #146 = Utf8               magic0\n-  #147 = Utf8               inData\n-  #148 = Utf8               Ljava/io/DataInput;\n-  #149 = Utf8               method\n-  #150 = Utf8               flg\n-  #151 = Class              #268          // java/io/DataInput\n-  #152 = Utf8               readToNull\n-  #153 = Utf8               (Ljava/io/DataInput;)[B\n-  #154 = Utf8               b\n-  #155 = Utf8               bos\n-  #156 = Utf8               Ljava/io/ByteArrayOutputStream;\n-  #157 = Utf8               read\n-  #158 = Utf8               ()I\n-  #159 = Utf8               ([BII)I\n-  #160 = Utf8               ret\n-  #161 = Utf8               e\n-  #162 = Utf8               Ljava/util/zip/DataFormatException;\n-  #163 = Utf8               skipAmount\n-  #164 = Utf8               crcStored\n-  #165 = Utf8               J\n-  #166 = Utf8               isize\n-  #167 = Utf8               off\n-  #168 = Utf8               len\n-  #169 = Utf8               size\n-  #170 = Class              #117          // \"[B\"\n-  #171 = Utf8               matches\n-  #172 = Utf8               ([BI)Z\n-  #173 = Utf8               signature\n-  #174 = Utf8               length\n-  #175 = Utf8               close\n-  #176 = Utf8               ()V\n-  #177 = Utf8               getCompressedCount\n-  #178 = Utf8               ()J\n-  #179 = Utf8               <clinit>\n-  #180 = Utf8               SourceFile\n-  #181 = Utf8               GzipCompressorInputStream.java\n-  #182 = NameAndType        #128:#137     // \"<init>\":(Ljava/io/InputStream;Z)V\n-  #183 = NameAndType        #128:#176     // \"<init>\":()V\n-  #184 = NameAndType        #116:#117     // buf:[B\n-  #185 = Utf8               java/util/zip/Inflater\n-  #186 = NameAndType        #128:#269     // \"<init>\":(Z)V\n-  #187 = NameAndType        #119:#120     // inf:Ljava/util/zip/Inflater;\n-  #188 = Utf8               java/util/zip/CRC32\n-  #189 = NameAndType        #121:#122     // crc:Ljava/util/zip/CRC32;\n-  #190 = NameAndType        #124:#117     // oneByte:[B\n-  #191 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n-  #192 = NameAndType        #125:#126     // parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #193 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n-  #194 = NameAndType        #128:#129     // \"<init>\":(Ljava/io/InputStream;)V\n-  #195 = NameAndType        #110:#111     // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-  #196 = NameAndType        #270:#271     // markSupported:()Z\n-  #197 = NameAndType        #112:#113     // in:Ljava/io/InputStream;\n-  #198 = Utf8               java/io/BufferedInputStream\n-  #199 = NameAndType        #114:#115     // decompressConcatenated:Z\n-  #200 = NameAndType        #142:#143     // init:(Z)Z\n-  #201 = NameAndType        #127:#115     // $assertionsDisabled:Z\n-  #202 = Utf8               java/lang/AssertionError\n-  #203 = NameAndType        #157:#158     // read:()I\n-  #204 = Utf8               java/io/IOException\n-  #205 = Utf8               Input is not in the .gz format\n-  #206 = Utf8               Garbage after a valid .gz stream\n-  #207 = NameAndType        #128:#272     // \"<init>\":(Ljava/lang/String;)V\n-  #208 = Utf8               java/io/DataInputStream\n-  #209 = NameAndType        #273:#158     // readUnsignedByte:()I\n-  #210 = Utf8               java/util/zip/Deflater\n-  #211 = Utf8               java/lang/StringBuilder\n-  #212 = Utf8               Unsupported compression method\n-  #213 = NameAndType        #274:#275     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #214 = NameAndType        #274:#276     // append:(I)Ljava/lang/StringBuilder;\n-  #215 = Utf8                in the .gz header\n-  #216 = NameAndType        #277:#278     // toString:()Ljava/lang/String;\n-  #217 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-  #218 = Utf8               Reserved flags are set in the .gz header\n-  #219 = Class              #279          // org/apache/commons/compress/utils/ByteUtils\n-  #220 = NameAndType        #280:#281     // fromLittleEndian:(Ljava/io/DataInput;I)J\n-  #221 = NameAndType        #282:#283     // setModificationTime:(J)V\n-  #222 = NameAndType        #284:#285     // setCompressionLevel:(I)V\n-  #223 = NameAndType        #286:#285     // setOperatingSystem:(I)V\n-  #224 = Utf8               java/lang/String\n-  #225 = NameAndType        #152:#153     // readToNull:(Ljava/io/DataInput;)[B\n-  #226 = Class              #287          // java/nio/charset/StandardCharsets\n-  #227 = NameAndType        #288:#289     // ISO_8859_1:Ljava/nio/charset/Charset;\n-  #228 = NameAndType        #128:#290     // \"<init>\":([BLjava/nio/charset/Charset;)V\n-  #229 = NameAndType        #291:#272     // setFilename:(Ljava/lang/String;)V\n-  #230 = NameAndType        #292:#272     // setComment:(Ljava/lang/String;)V\n-  #231 = NameAndType        #293:#294     // readShort:()S\n-  #232 = NameAndType        #295:#176     // reset:()V\n-  #233 = Utf8               java/io/ByteArrayOutputStream\n-  #234 = NameAndType        #296:#285     // write:(I)V\n-  #235 = NameAndType        #297:#298     // toByteArray:()[B\n-  #236 = NameAndType        #175:#176     // close:()V\n-  #237 = Utf8               java/lang/Throwable\n-  #238 = NameAndType        #299:#300     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #239 = NameAndType        #157:#159     // read:([BII)I\n-  #240 = NameAndType        #123:#115     // endReached:Z\n-  #241 = NameAndType        #301:#271     // needsInput:()Z\n-  #242 = NameAndType        #302:#285     // mark:(I)V\n-  #243 = NameAndType        #157:#303     // read:([B)I\n-  #244 = NameAndType        #118:#99      // bufUsed:I\n-  #245 = Utf8               java/io/EOFException\n-  #246 = NameAndType        #304:#305     // setInput:([BII)V\n-  #247 = NameAndType        #306:#159     // inflate:([BII)I\n-  #248 = Utf8               java/util/zip/DataFormatException\n-  #249 = Utf8               Gzip-compressed data is corrupt\n-  #250 = NameAndType        #307:#305     // update:([BII)V\n-  #251 = NameAndType        #308:#285     // count:(I)V\n-  #252 = NameAndType        #309:#271     // finished:()Z\n-  #253 = NameAndType        #310:#158     // getRemaining:()I\n-  #254 = Class              #311          // org/apache/commons/compress/utils/IOUtils\n-  #255 = NameAndType        #312:#313     // skip:(Ljava/io/InputStream;J)J\n-  #256 = NameAndType        #314:#178     // getValue:()J\n-  #257 = Utf8               Gzip-compressed data is corrupt (CRC32 error)\n-  #258 = NameAndType        #315:#178     // getBytesWritten:()J\n-  #259 = Utf8               Gzip-compressed data is corrupt(uncompressed size mismatch)\n-  #260 = NameAndType        #316:#176     // end:()V\n-  #261 = Class              #317          // java/lang/System\n-  #262 = NameAndType        #318:#178     // getBytesRead:()J\n-  #263 = Class              #319          // java/lang/Class\n-  #264 = NameAndType        #320:#271     // desiredAssertionStatus:()Z\n-  #265 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-  #266 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #267 = Utf8               java/io/InputStream\n-  #268 = Utf8               java/io/DataInput\n-  #269 = Utf8               (Z)V\n-  #270 = Utf8               markSupported\n-  #271 = Utf8               ()Z\n-  #272 = Utf8               (Ljava/lang/String;)V\n-  #273 = Utf8               readUnsignedByte\n-  #274 = Utf8               append\n-  #275 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #276 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #277 = Utf8               toString\n-  #278 = Utf8               ()Ljava/lang/String;\n-  #279 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #280 = Utf8               fromLittleEndian\n-  #281 = Utf8               (Ljava/io/DataInput;I)J\n-  #282 = Utf8               setModificationTime\n-  #283 = Utf8               (J)V\n-  #284 = Utf8               setCompressionLevel\n-  #285 = Utf8               (I)V\n-  #286 = Utf8               setOperatingSystem\n-  #287 = Utf8               java/nio/charset/StandardCharsets\n-  #288 = Utf8               ISO_8859_1\n-  #289 = Utf8               Ljava/nio/charset/Charset;\n-  #290 = Utf8               ([BLjava/nio/charset/Charset;)V\n-  #291 = Utf8               setFilename\n-  #292 = Utf8               setComment\n-  #293 = Utf8               readShort\n-  #294 = Utf8               ()S\n-  #295 = Utf8               reset\n-  #296 = Utf8               write\n-  #297 = Utf8               toByteArray\n-  #298 = Utf8               ()[B\n-  #299 = Utf8               addSuppressed\n-  #300 = Utf8               (Ljava/lang/Throwable;)V\n-  #301 = Utf8               needsInput\n-  #302 = Utf8               mark\n-  #303 = Utf8               ([B)I\n-  #304 = Utf8               setInput\n-  #305 = Utf8               ([BII)V\n-  #306 = Utf8               inflate\n-  #307 = Utf8               update\n-  #308 = Utf8               count\n-  #309 = Utf8               finished\n-  #310 = Utf8               getRemaining\n-  #311 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #312 = Utf8               skip\n-  #313 = Utf8               (Ljava/io/InputStream;J)J\n-  #314 = Utf8               getValue\n-  #315 = Utf8               getBytesWritten\n-  #316 = Utf8               end\n-  #317 = Utf8               java/lang/System\n-  #318 = Utf8               getBytesRead\n-  #319 = Utf8               java/lang/Class\n-  #320 = Utf8               desiredAssertionStatus\n+    #1 = Methodref          #2.#3         // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n+    #2 = Class              #4            // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+    #3 = NameAndType        #5:#6         // \"<init>\":(Ljava/io/InputStream;Z)V\n+    #4 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+    #5 = Utf8               <init>\n+    #6 = Utf8               (Ljava/io/InputStream;Z)V\n+    #7 = Methodref          #8.#9         // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+    #8 = Class              #10           // org/apache/commons/compress/compressors/CompressorInputStream\n+    #9 = NameAndType        #5:#11        // \"<init>\":()V\n+   #10 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+   #11 = Utf8               ()V\n+   #12 = Fieldref           #2.#13        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.buf:[B\n+   #13 = NameAndType        #14:#15       // buf:[B\n+   #14 = Utf8               buf\n+   #15 = Utf8               [B\n+   #16 = Class              #17           // java/util/zip/Inflater\n+   #17 = Utf8               java/util/zip/Inflater\n+   #18 = Methodref          #16.#19       // java/util/zip/Inflater.\"<init>\":(Z)V\n+   #19 = NameAndType        #5:#20        // \"<init>\":(Z)V\n+   #20 = Utf8               (Z)V\n+   #21 = Fieldref           #2.#22        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.inf:Ljava/util/zip/Inflater;\n+   #22 = NameAndType        #23:#24       // inf:Ljava/util/zip/Inflater;\n+   #23 = Utf8               inf\n+   #24 = Utf8               Ljava/util/zip/Inflater;\n+   #25 = Class              #26           // java/util/zip/CRC32\n+   #26 = Utf8               java/util/zip/CRC32\n+   #27 = Methodref          #25.#9        // java/util/zip/CRC32.\"<init>\":()V\n+   #28 = Fieldref           #2.#29        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.crc:Ljava/util/zip/CRC32;\n+   #29 = NameAndType        #30:#31       // crc:Ljava/util/zip/CRC32;\n+   #30 = Utf8               crc\n+   #31 = Utf8               Ljava/util/zip/CRC32;\n+   #32 = Fieldref           #2.#33        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.oneByte:[B\n+   #33 = NameAndType        #34:#15       // oneByte:[B\n+   #34 = Utf8               oneByte\n+   #35 = Class              #36           // org/apache/commons/compress/compressors/gzip/GzipParameters\n+   #36 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n+   #37 = Methodref          #35.#9        // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n+   #38 = Fieldref           #2.#39        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+   #39 = NameAndType        #40:#41       // parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+   #40 = Utf8               parameters\n+   #41 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+   #42 = Class              #43           // org/apache/commons/compress/utils/CountingInputStream\n+   #43 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n+   #44 = Methodref          #42.#45       // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #45 = NameAndType        #5:#46        // \"<init>\":(Ljava/io/InputStream;)V\n+   #46 = Utf8               (Ljava/io/InputStream;)V\n+   #47 = Fieldref           #2.#48        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #48 = NameAndType        #49:#50       // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #49 = Utf8               countingStream\n+   #50 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #51 = Methodref          #42.#52       // org/apache/commons/compress/utils/CountingInputStream.markSupported:()Z\n+   #52 = NameAndType        #53:#54       // markSupported:()Z\n+   #53 = Utf8               markSupported\n+   #54 = Utf8               ()Z\n+   #55 = Fieldref           #2.#56        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.in:Ljava/io/InputStream;\n+   #56 = NameAndType        #57:#58       // in:Ljava/io/InputStream;\n+   #57 = Utf8               in\n+   #58 = Utf8               Ljava/io/InputStream;\n+   #59 = Class              #60           // java/io/BufferedInputStream\n+   #60 = Utf8               java/io/BufferedInputStream\n+   #61 = Methodref          #59.#45       // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #62 = Fieldref           #2.#63        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.decompressConcatenated:Z\n+   #63 = NameAndType        #64:#65       // decompressConcatenated:Z\n+   #64 = Utf8               decompressConcatenated\n+   #65 = Utf8               Z\n+   #66 = Methodref          #2.#67        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.init:(Z)Z\n+   #67 = NameAndType        #68:#69       // init:(Z)Z\n+   #68 = Utf8               init\n+   #69 = Utf8               (Z)Z\n+   #70 = Fieldref           #2.#71        // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.$assertionsDisabled:Z\n+   #71 = NameAndType        #72:#65       // $assertionsDisabled:Z\n+   #72 = Utf8               $assertionsDisabled\n+   #73 = Class              #74           // java/lang/AssertionError\n+   #74 = Utf8               java/lang/AssertionError\n+   #75 = Methodref          #73.#9        // java/lang/AssertionError.\"<init>\":()V\n+   #76 = Methodref          #77.#78       // java/io/InputStream.read:()I\n+   #77 = Class              #79           // java/io/InputStream\n+   #78 = NameAndType        #80:#81       // read:()I\n+   #79 = Utf8               java/io/InputStream\n+   #80 = Utf8               read\n+   #81 = Utf8               ()I\n+   #82 = Class              #83           // java/io/IOException\n+   #83 = Utf8               java/io/IOException\n+   #84 = String             #85           // Input is not in the .gz format\n+   #85 = Utf8               Input is not in the .gz format\n+   #86 = String             #87           // Garbage after a valid .gz stream\n+   #87 = Utf8               Garbage after a valid .gz stream\n+   #88 = Methodref          #82.#89       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #89 = NameAndType        #5:#90        // \"<init>\":(Ljava/lang/String;)V\n+   #90 = Utf8               (Ljava/lang/String;)V\n+   #91 = Class              #92           // java/io/DataInputStream\n+   #92 = Utf8               java/io/DataInputStream\n+   #93 = Methodref          #91.#45       // java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #94 = InterfaceMethodref #95.#96       // java/io/DataInput.readUnsignedByte:()I\n+   #95 = Class              #97           // java/io/DataInput\n+   #96 = NameAndType        #98:#81       // readUnsignedByte:()I\n+   #97 = Utf8               java/io/DataInput\n+   #98 = Utf8               readUnsignedByte\n+   #99 = Class              #100          // java/util/zip/Deflater\n+  #100 = Utf8               java/util/zip/Deflater\n+  #101 = Class              #102          // java/lang/StringBuilder\n+  #102 = Utf8               java/lang/StringBuilder\n+  #103 = Methodref          #101.#9       // java/lang/StringBuilder.\"<init>\":()V\n+  #104 = String             #105          // Unsupported compression method\n+  #105 = Utf8               Unsupported compression method\n+  #106 = Methodref          #101.#107     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #107 = NameAndType        #108:#109     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #108 = Utf8               append\n+  #109 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #110 = Methodref          #101.#111     // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #111 = NameAndType        #108:#112     // append:(I)Ljava/lang/StringBuilder;\n+  #112 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #113 = String             #114          //  in the .gz header\n+  #114 = Utf8                in the .gz header\n+  #115 = Methodref          #101.#116     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #116 = NameAndType        #117:#118     // toString:()Ljava/lang/String;\n+  #117 = Utf8               toString\n+  #118 = Utf8               ()Ljava/lang/String;\n+  #119 = String             #120          // Reserved flags are set in the .gz header\n+  #120 = Utf8               Reserved flags are set in the .gz header\n+  #121 = Methodref          #122.#123     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+  #122 = Class              #124          // org/apache/commons/compress/utils/ByteUtils\n+  #123 = NameAndType        #125:#126     // fromLittleEndian:(Ljava/io/DataInput;I)J\n+  #124 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+  #125 = Utf8               fromLittleEndian\n+  #126 = Utf8               (Ljava/io/DataInput;I)J\n+  #127 = Long               1000l\n+  #129 = Methodref          #35.#130      // org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n+  #130 = NameAndType        #131:#132     // setModificationTime:(J)V\n+  #131 = Utf8               setModificationTime\n+  #132 = Utf8               (J)V\n+  #133 = Methodref          #35.#134      // org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+  #134 = NameAndType        #135:#136     // setCompressionLevel:(I)V\n+  #135 = Utf8               setCompressionLevel\n+  #136 = Utf8               (I)V\n+  #137 = Methodref          #35.#138      // org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n+  #138 = NameAndType        #139:#136     // setOperatingSystem:(I)V\n+  #139 = Utf8               setOperatingSystem\n+  #140 = Class              #141          // java/lang/String\n+  #141 = Utf8               java/lang/String\n+  #142 = Methodref          #2.#143       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.readToNull:(Ljava/io/DataInput;)[B\n+  #143 = NameAndType        #144:#145     // readToNull:(Ljava/io/DataInput;)[B\n+  #144 = Utf8               readToNull\n+  #145 = Utf8               (Ljava/io/DataInput;)[B\n+  #146 = Fieldref           #147.#148     // java/nio/charset/StandardCharsets.ISO_8859_1:Ljava/nio/charset/Charset;\n+  #147 = Class              #149          // java/nio/charset/StandardCharsets\n+  #148 = NameAndType        #150:#151     // ISO_8859_1:Ljava/nio/charset/Charset;\n+  #149 = Utf8               java/nio/charset/StandardCharsets\n+  #150 = Utf8               ISO_8859_1\n+  #151 = Utf8               Ljava/nio/charset/Charset;\n+  #152 = Methodref          #140.#153     // java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+  #153 = NameAndType        #5:#154       // \"<init>\":([BLjava/nio/charset/Charset;)V\n+  #154 = Utf8               ([BLjava/nio/charset/Charset;)V\n+  #155 = Methodref          #35.#156      // org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n+  #156 = NameAndType        #157:#90      // setFilename:(Ljava/lang/String;)V\n+  #157 = Utf8               setFilename\n+  #158 = Methodref          #35.#159      // org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n+  #159 = NameAndType        #160:#90      // setComment:(Ljava/lang/String;)V\n+  #160 = Utf8               setComment\n+  #161 = InterfaceMethodref #95.#162      // java/io/DataInput.readShort:()S\n+  #162 = NameAndType        #163:#164     // readShort:()S\n+  #163 = Utf8               readShort\n+  #164 = Utf8               ()S\n+  #165 = Methodref          #16.#166      // java/util/zip/Inflater.reset:()V\n+  #166 = NameAndType        #167:#11      // reset:()V\n+  #167 = Utf8               reset\n+  #168 = Methodref          #25.#166      // java/util/zip/CRC32.reset:()V\n+  #169 = Class              #170          // java/io/ByteArrayOutputStream\n+  #170 = Utf8               java/io/ByteArrayOutputStream\n+  #171 = Methodref          #169.#9       // java/io/ByteArrayOutputStream.\"<init>\":()V\n+  #172 = Methodref          #169.#173     // java/io/ByteArrayOutputStream.write:(I)V\n+  #173 = NameAndType        #174:#136     // write:(I)V\n+  #174 = Utf8               write\n+  #175 = Methodref          #169.#176     // java/io/ByteArrayOutputStream.toByteArray:()[B\n+  #176 = NameAndType        #177:#178     // toByteArray:()[B\n+  #177 = Utf8               toByteArray\n+  #178 = Utf8               ()[B\n+  #179 = Methodref          #169.#180     // java/io/ByteArrayOutputStream.close:()V\n+  #180 = NameAndType        #181:#11      // close:()V\n+  #181 = Utf8               close\n+  #182 = Class              #183          // java/lang/Throwable\n+  #183 = Utf8               java/lang/Throwable\n+  #184 = Methodref          #182.#185     // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+  #185 = NameAndType        #186:#187     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #186 = Utf8               addSuppressed\n+  #187 = Utf8               (Ljava/lang/Throwable;)V\n+  #188 = Methodref          #2.#189       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.read:([BII)I\n+  #189 = NameAndType        #80:#190      // read:([BII)I\n+  #190 = Utf8               ([BII)I\n+  #191 = Fieldref           #2.#192       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.endReached:Z\n+  #192 = NameAndType        #193:#65      // endReached:Z\n+  #193 = Utf8               endReached\n+  #194 = Methodref          #16.#195      // java/util/zip/Inflater.needsInput:()Z\n+  #195 = NameAndType        #196:#54      // needsInput:()Z\n+  #196 = Utf8               needsInput\n+  #197 = Methodref          #77.#198      // java/io/InputStream.mark:(I)V\n+  #198 = NameAndType        #199:#136     // mark:(I)V\n+  #199 = Utf8               mark\n+  #200 = Methodref          #77.#201      // java/io/InputStream.read:([B)I\n+  #201 = NameAndType        #80:#202      // read:([B)I\n+  #202 = Utf8               ([B)I\n+  #203 = Fieldref           #2.#204       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.bufUsed:I\n+  #204 = NameAndType        #205:#206     // bufUsed:I\n+  #205 = Utf8               bufUsed\n+  #206 = Utf8               I\n+  #207 = Class              #208          // java/io/EOFException\n+  #208 = Utf8               java/io/EOFException\n+  #209 = Methodref          #207.#9       // java/io/EOFException.\"<init>\":()V\n+  #210 = Methodref          #16.#211      // java/util/zip/Inflater.setInput:([BII)V\n+  #211 = NameAndType        #212:#213     // setInput:([BII)V\n+  #212 = Utf8               setInput\n+  #213 = Utf8               ([BII)V\n+  #214 = Methodref          #16.#215      // java/util/zip/Inflater.inflate:([BII)I\n+  #215 = NameAndType        #216:#190     // inflate:([BII)I\n+  #216 = Utf8               inflate\n+  #217 = Class              #218          // java/util/zip/DataFormatException\n+  #218 = Utf8               java/util/zip/DataFormatException\n+  #219 = String             #220          // Gzip-compressed data is corrupt\n+  #220 = Utf8               Gzip-compressed data is corrupt\n+  #221 = Methodref          #25.#222      // java/util/zip/CRC32.update:([BII)V\n+  #222 = NameAndType        #223:#213     // update:([BII)V\n+  #223 = Utf8               update\n+  #224 = Methodref          #2.#225       // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.count:(I)V\n+  #225 = NameAndType        #226:#136     // count:(I)V\n+  #226 = Utf8               count\n+  #227 = Methodref          #16.#228      // java/util/zip/Inflater.finished:()Z\n+  #228 = NameAndType        #229:#54      // finished:()Z\n+  #229 = Utf8               finished\n+  #230 = Methodref          #77.#166      // java/io/InputStream.reset:()V\n+  #231 = Methodref          #16.#232      // java/util/zip/Inflater.getRemaining:()I\n+  #232 = NameAndType        #233:#81      // getRemaining:()I\n+  #233 = Utf8               getRemaining\n+  #234 = Methodref          #235.#236     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+  #235 = Class              #237          // org/apache/commons/compress/utils/IOUtils\n+  #236 = NameAndType        #238:#239     // skip:(Ljava/io/InputStream;J)J\n+  #237 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #238 = Utf8               skip\n+  #239 = Utf8               (Ljava/io/InputStream;J)J\n+  #240 = Methodref          #82.#9        // java/io/IOException.\"<init>\":()V\n+  #241 = Methodref          #25.#242      // java/util/zip/CRC32.getValue:()J\n+  #242 = NameAndType        #243:#244     // getValue:()J\n+  #243 = Utf8               getValue\n+  #244 = Utf8               ()J\n+  #245 = String             #246          // Gzip-compressed data is corrupt (CRC32 error)\n+  #246 = Utf8               Gzip-compressed data is corrupt (CRC32 error)\n+  #247 = Methodref          #16.#248      // java/util/zip/Inflater.getBytesWritten:()J\n+  #248 = NameAndType        #249:#244     // getBytesWritten:()J\n+  #249 = Utf8               getBytesWritten\n+  #250 = Long               4294967295l\n+  #252 = String             #253          // Gzip-compressed data is corrupt(uncompressed size mismatch)\n+  #253 = Utf8               Gzip-compressed data is corrupt(uncompressed size mismatch)\n+  #254 = Methodref          #16.#255      // java/util/zip/Inflater.end:()V\n+  #255 = NameAndType        #256:#11      // end:()V\n+  #256 = Utf8               end\n+  #257 = Fieldref           #258.#56      // java/lang/System.in:Ljava/io/InputStream;\n+  #258 = Class              #259          // java/lang/System\n+  #259 = Utf8               java/lang/System\n+  #260 = Methodref          #77.#180      // java/io/InputStream.close:()V\n+  #261 = Methodref          #42.#262      // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+  #262 = NameAndType        #263:#244     // getBytesRead:()J\n+  #263 = Utf8               getBytesRead\n+  #264 = Methodref          #265.#266     // java/lang/Class.desiredAssertionStatus:()Z\n+  #265 = Class              #267          // java/lang/Class\n+  #266 = NameAndType        #268:#54      // desiredAssertionStatus:()Z\n+  #267 = Utf8               java/lang/Class\n+  #268 = Utf8               desiredAssertionStatus\n+  #269 = Class              #270          // org/apache/commons/compress/utils/InputStreamStatistics\n+  #270 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+  #271 = Utf8               FHCRC\n+  #272 = Utf8               ConstantValue\n+  #273 = Integer            2\n+  #274 = Utf8               FEXTRA\n+  #275 = Integer            4\n+  #276 = Utf8               FNAME\n+  #277 = Integer            8\n+  #278 = Utf8               FCOMMENT\n+  #279 = Integer            16\n+  #280 = Utf8               FRESERVED\n+  #281 = Integer            224\n+  #282 = Utf8               Code\n+  #283 = Utf8               LineNumberTable\n+  #284 = Utf8               LocalVariableTable\n+  #285 = Utf8               this\n+  #286 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n+  #287 = Utf8               inputStream\n+  #288 = Utf8               Exceptions\n+  #289 = Utf8               StackMapTable\n+  #290 = Utf8               getMetaData\n+  #291 = Utf8               ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+  #292 = Utf8               xlen\n+  #293 = Utf8               isFirstMember\n+  #294 = Utf8               magic0\n+  #295 = Utf8               inData\n+  #296 = Utf8               Ljava/io/DataInput;\n+  #297 = Utf8               method\n+  #298 = Utf8               flg\n+  #299 = Utf8               b\n+  #300 = Utf8               bos\n+  #301 = Utf8               Ljava/io/ByteArrayOutputStream;\n+  #302 = Utf8               ret\n+  #303 = Utf8               e\n+  #304 = Utf8               Ljava/util/zip/DataFormatException;\n+  #305 = Utf8               skipAmount\n+  #306 = Utf8               crcStored\n+  #307 = Utf8               J\n+  #308 = Utf8               isize\n+  #309 = Utf8               off\n+  #310 = Utf8               len\n+  #311 = Utf8               size\n+  #312 = Class              #15           // \"[B\"\n+  #313 = Utf8               matches\n+  #314 = Utf8               ([BI)Z\n+  #315 = Utf8               signature\n+  #316 = Utf8               length\n+  #317 = Utf8               getCompressedCount\n+  #318 = Utf8               <clinit>\n+  #319 = Utf8               SourceFile\n+  #320 = Utf8               GzipCompressorInputStream.java\n {\n   private static final int FHCRC = 2;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 2\n \n   private static final int FEXTRA = 4;\n@@ -418,67 +418,67 @@\n \n   public org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream(java.io.InputStream, boolean) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #2                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+         1: invokespecial #7                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n          5: sipush        8192\n          8: newarray       byte\n-        10: putfield      #3                  // Field buf:[B\n+        10: putfield      #12                 // Field buf:[B\n         13: aload_0\n-        14: new           #4                  // class java/util/zip/Inflater\n+        14: new           #16                 // class java/util/zip/Inflater\n         17: dup\n         18: iconst_1\n-        19: invokespecial #5                  // Method java/util/zip/Inflater.\"<init>\":(Z)V\n-        22: putfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n+        19: invokespecial #18                 // Method java/util/zip/Inflater.\"<init>\":(Z)V\n+        22: putfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n         25: aload_0\n-        26: new           #7                  // class java/util/zip/CRC32\n+        26: new           #25                 // class java/util/zip/CRC32\n         29: dup\n-        30: invokespecial #8                  // Method java/util/zip/CRC32.\"<init>\":()V\n-        33: putfield      #9                  // Field crc:Ljava/util/zip/CRC32;\n+        30: invokespecial #27                 // Method java/util/zip/CRC32.\"<init>\":()V\n+        33: putfield      #28                 // Field crc:Ljava/util/zip/CRC32;\n         36: aload_0\n         37: iconst_1\n         38: newarray       byte\n-        40: putfield      #10                 // Field oneByte:[B\n+        40: putfield      #32                 // Field oneByte:[B\n         43: aload_0\n-        44: new           #11                 // class org/apache/commons/compress/compressors/gzip/GzipParameters\n+        44: new           #35                 // class org/apache/commons/compress/compressors/gzip/GzipParameters\n         47: dup\n-        48: invokespecial #12                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n-        51: putfield      #13                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+        48: invokespecial #37                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n+        51: putfield      #38                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n         54: aload_0\n-        55: new           #14                 // class org/apache/commons/compress/utils/CountingInputStream\n+        55: new           #42                 // class org/apache/commons/compress/utils/CountingInputStream\n         58: dup\n         59: aload_1\n-        60: invokespecial #15                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-        63: putfield      #16                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        60: invokespecial #44                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        63: putfield      #47                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         66: aload_0\n-        67: getfield      #16                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-        70: invokevirtual #17                 // Method org/apache/commons/compress/utils/CountingInputStream.markSupported:()Z\n+        67: getfield      #47                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        70: invokevirtual #51                 // Method org/apache/commons/compress/utils/CountingInputStream.markSupported:()Z\n         73: ifeq          87\n         76: aload_0\n         77: aload_0\n-        78: getfield      #16                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-        81: putfield      #18                 // Field in:Ljava/io/InputStream;\n+        78: getfield      #47                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        81: putfield      #55                 // Field in:Ljava/io/InputStream;\n         84: goto          102\n         87: aload_0\n-        88: new           #19                 // class java/io/BufferedInputStream\n+        88: new           #59                 // class java/io/BufferedInputStream\n         91: dup\n         92: aload_0\n-        93: getfield      #16                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-        96: invokespecial #20                 // Method java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-        99: putfield      #18                 // Field in:Ljava/io/InputStream;\n+        93: getfield      #47                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        96: invokespecial #61                 // Method java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        99: putfield      #55                 // Field in:Ljava/io/InputStream;\n        102: aload_0\n        103: iload_2\n-       104: putfield      #21                 // Field decompressConcatenated:Z\n+       104: putfield      #62                 // Field decompressConcatenated:Z\n        107: aload_0\n        108: iconst_1\n-       109: invokespecial #22                 // Method init:(Z)Z\n+       109: invokespecial #66                 // Method init:(Z)Z\n        112: pop\n        113: return\n       LineNumberTable:\n         line 157: 0\n         line 98: 4\n         line 104: 13\n         line 107: 25\n@@ -507,194 +507,194 @@\n \n   public org.apache.commons.compress.compressors.gzip.GzipParameters getMetaData();\n     descriptor: ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #13                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+         1: getfield      #38                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n          4: areturn\n       LineNumberTable:\n         line 178: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n \n   private boolean init(boolean) throws java.io.IOException;\n     descriptor: (Z)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=7, args_size=2\n-         0: getstatic     #23                 // Field $assertionsDisabled:Z\n+         0: getstatic     #70                 // Field $assertionsDisabled:Z\n          3: ifne          25\n          6: iload_1\n          7: ifne          25\n         10: aload_0\n-        11: getfield      #21                 // Field decompressConcatenated:Z\n+        11: getfield      #62                 // Field decompressConcatenated:Z\n         14: ifne          25\n-        17: new           #24                 // class java/lang/AssertionError\n+        17: new           #73                 // class java/lang/AssertionError\n         20: dup\n-        21: invokespecial #25                 // Method java/lang/AssertionError.\"<init>\":()V\n+        21: invokespecial #75                 // Method java/lang/AssertionError.\"<init>\":()V\n         24: athrow\n         25: aload_0\n-        26: getfield      #18                 // Field in:Ljava/io/InputStream;\n-        29: invokevirtual #26                 // Method java/io/InputStream.read:()I\n+        26: getfield      #55                 // Field in:Ljava/io/InputStream;\n+        29: invokevirtual #76                 // Method java/io/InputStream.read:()I\n         32: istore_2\n         33: iload_2\n         34: iconst_m1\n         35: if_icmpne     44\n         38: iload_1\n         39: ifne          44\n         42: iconst_0\n         43: ireturn\n         44: iload_2\n         45: bipush        31\n         47: if_icmpne     63\n         50: aload_0\n-        51: getfield      #18                 // Field in:Ljava/io/InputStream;\n-        54: invokevirtual #26                 // Method java/io/InputStream.read:()I\n+        51: getfield      #55                 // Field in:Ljava/io/InputStream;\n+        54: invokevirtual #76                 // Method java/io/InputStream.read:()I\n         57: sipush        139\n         60: if_icmpeq     82\n-        63: new           #27                 // class java/io/IOException\n+        63: new           #82                 // class java/io/IOException\n         66: dup\n         67: iload_1\n         68: ifeq          76\n-        71: ldc           #28                 // String Input is not in the .gz format\n+        71: ldc           #84                 // String Input is not in the .gz format\n         73: goto          78\n-        76: ldc           #29                 // String Garbage after a valid .gz stream\n-        78: invokespecial #30                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        76: ldc           #86                 // String Garbage after a valid .gz stream\n+        78: invokespecial #88                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         81: athrow\n-        82: new           #31                 // class java/io/DataInputStream\n+        82: new           #91                 // class java/io/DataInputStream\n         85: dup\n         86: aload_0\n-        87: getfield      #18                 // Field in:Ljava/io/InputStream;\n-        90: invokespecial #32                 // Method java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        87: getfield      #55                 // Field in:Ljava/io/InputStream;\n+        90: invokespecial #93                 // Method java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n         93: astore_3\n         94: aload_3\n-        95: invokeinterface #33,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+        95: invokeinterface #94,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        100: istore        4\n        102: iload         4\n        104: bipush        8\n        106: if_icmpeq     142\n-       109: new           #27                 // class java/io/IOException\n+       109: new           #82                 // class java/io/IOException\n        112: dup\n-       113: new           #35                 // class java/lang/StringBuilder\n+       113: new           #101                // class java/lang/StringBuilder\n        116: dup\n-       117: invokespecial #36                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       120: ldc           #37                 // String Unsupported compression method\n-       122: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       117: invokespecial #103                // Method java/lang/StringBuilder.\"<init>\":()V\n+       120: ldc           #104                // String Unsupported compression method\n+       122: invokevirtual #106                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        125: iload         4\n-       127: invokevirtual #39                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       130: ldc           #40                 // String  in the .gz header\n-       132: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       135: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       138: invokespecial #30                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       127: invokevirtual #110                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       130: ldc           #113                // String  in the .gz header\n+       132: invokevirtual #106                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       135: invokevirtual #115                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       138: invokespecial #88                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        141: athrow\n        142: aload_3\n-       143: invokeinterface #33,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       143: invokeinterface #94,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        148: istore        5\n        150: iload         5\n        152: sipush        224\n        155: iand\n        156: ifeq          169\n-       159: new           #27                 // class java/io/IOException\n+       159: new           #82                 // class java/io/IOException\n        162: dup\n-       163: ldc           #43                 // String Reserved flags are set in the .gz header\n-       165: invokespecial #30                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       163: ldc           #119                // String Reserved flags are set in the .gz header\n+       165: invokespecial #88                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        168: athrow\n        169: aload_0\n-       170: getfield      #13                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       170: getfield      #38                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n        173: aload_3\n        174: iconst_4\n-       175: invokestatic  #44                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n-       178: ldc2_w        #45                 // long 1000l\n+       175: invokestatic  #121                // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+       178: ldc2_w        #127                // long 1000l\n        181: lmul\n-       182: invokevirtual #47                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n+       182: invokevirtual #129                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n        185: aload_3\n-       186: invokeinterface #33,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       186: invokeinterface #94,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        191: lookupswitch  { // 2\n                        2: 216\n                        4: 228\n                  default: 239\n             }\n        216: aload_0\n-       217: getfield      #13                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       217: getfield      #38                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n        220: bipush        9\n-       222: invokevirtual #48                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+       222: invokevirtual #133                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n        225: goto          239\n        228: aload_0\n-       229: getfield      #13                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       229: getfield      #38                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n        232: iconst_1\n-       233: invokevirtual #48                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+       233: invokevirtual #133                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n        236: goto          239\n        239: aload_0\n-       240: getfield      #13                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       240: getfield      #38                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n        243: aload_3\n-       244: invokeinterface #33,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n-       249: invokevirtual #49                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n+       244: invokeinterface #94,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       249: invokevirtual #137                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n        252: iload         5\n        254: iconst_4\n        255: iand\n        256: ifeq          299\n        259: aload_3\n-       260: invokeinterface #33,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       260: invokeinterface #94,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        265: istore        6\n        267: iload         6\n        269: aload_3\n-       270: invokeinterface #33,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       270: invokeinterface #94,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        275: bipush        8\n        277: ishl\n        278: ior\n        279: istore        6\n        281: iload         6\n        283: iinc          6, -1\n        286: ifle          299\n        289: aload_3\n-       290: invokeinterface #33,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+       290: invokeinterface #94,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n        295: pop\n        296: goto          281\n        299: iload         5\n        301: bipush        8\n        303: iand\n        304: ifeq          328\n        307: aload_0\n-       308: getfield      #13                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       311: new           #50                 // class java/lang/String\n+       308: getfield      #38                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       311: new           #140                // class java/lang/String\n        314: dup\n        315: aload_3\n-       316: invokestatic  #51                 // Method readToNull:(Ljava/io/DataInput;)[B\n-       319: getstatic     #52                 // Field java/nio/charset/StandardCharsets.ISO_8859_1:Ljava/nio/charset/Charset;\n-       322: invokespecial #53                 // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-       325: invokevirtual #54                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n+       316: invokestatic  #142                // Method readToNull:(Ljava/io/DataInput;)[B\n+       319: getstatic     #146                // Field java/nio/charset/StandardCharsets.ISO_8859_1:Ljava/nio/charset/Charset;\n+       322: invokespecial #152                // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+       325: invokevirtual #155                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n        328: iload         5\n        330: bipush        16\n        332: iand\n        333: ifeq          357\n        336: aload_0\n-       337: getfield      #13                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-       340: new           #50                 // class java/lang/String\n+       337: getfield      #38                 // Field parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+       340: new           #140                // class java/lang/String\n        343: dup\n        344: aload_3\n-       345: invokestatic  #51                 // Method readToNull:(Ljava/io/DataInput;)[B\n-       348: getstatic     #52                 // Field java/nio/charset/StandardCharsets.ISO_8859_1:Ljava/nio/charset/Charset;\n-       351: invokespecial #53                 // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-       354: invokevirtual #55                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n+       345: invokestatic  #142                // Method readToNull:(Ljava/io/DataInput;)[B\n+       348: getstatic     #146                // Field java/nio/charset/StandardCharsets.ISO_8859_1:Ljava/nio/charset/Charset;\n+       351: invokespecial #152                // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+       354: invokevirtual #158                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n        357: iload         5\n        359: iconst_2\n        360: iand\n        361: ifeq          371\n        364: aload_3\n-       365: invokeinterface #56,  1           // InterfaceMethod java/io/DataInput.readShort:()S\n+       365: invokeinterface #161,  1          // InterfaceMethod java/io/DataInput.readShort:()S\n        370: pop\n        371: aload_0\n-       372: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       375: invokevirtual #57                 // Method java/util/zip/Inflater.reset:()V\n+       372: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n+       375: invokevirtual #165                // Method java/util/zip/Inflater.reset:()V\n        378: aload_0\n-       379: getfield      #9                  // Field crc:Ljava/util/zip/CRC32;\n-       382: invokevirtual #58                 // Method java/util/zip/CRC32.reset:()V\n+       379: getfield      #28                 // Field crc:Ljava/util/zip/CRC32;\n+       382: invokevirtual #168                // Method java/util/zip/CRC32.reset:()V\n        385: iconst_1\n        386: ireturn\n       LineNumberTable:\n         line 182: 0\n         line 185: 25\n         line 189: 33\n         line 190: 42\n@@ -775,44 +775,44 @@\n       throws java.io.IOException\n \n   private static byte[] readToNull(java.io.DataInput) throws java.io.IOException;\n     descriptor: (Ljava/io/DataInput;)[B\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=2, locals=4, args_size=1\n-         0: new           #59                 // class java/io/ByteArrayOutputStream\n+         0: new           #169                // class java/io/ByteArrayOutputStream\n          3: dup\n-         4: invokespecial #60                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+         4: invokespecial #171                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n          7: astore_1\n          8: iconst_0\n          9: istore_2\n         10: aload_0\n-        11: invokeinterface #33,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n+        11: invokeinterface #94,  1           // InterfaceMethod java/io/DataInput.readUnsignedByte:()I\n         16: dup\n         17: istore_2\n         18: ifeq          29\n         21: aload_1\n         22: iload_2\n-        23: invokevirtual #61                 // Method java/io/ByteArrayOutputStream.write:(I)V\n+        23: invokevirtual #172                // Method java/io/ByteArrayOutputStream.write:(I)V\n         26: goto          10\n         29: aload_1\n-        30: invokevirtual #62                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n+        30: invokevirtual #175                // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n         33: astore_3\n         34: aload_1\n-        35: invokevirtual #63                 // Method java/io/ByteArrayOutputStream.close:()V\n+        35: invokevirtual #179                // Method java/io/ByteArrayOutputStream.close:()V\n         38: aload_3\n         39: areturn\n         40: astore_2\n         41: aload_1\n-        42: invokevirtual #63                 // Method java/io/ByteArrayOutputStream.close:()V\n+        42: invokevirtual #179                // Method java/io/ByteArrayOutputStream.close:()V\n         45: goto          54\n         48: astore_3\n         49: aload_2\n         50: aload_3\n-        51: invokevirtual #65                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        51: invokevirtual #184                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n         54: aload_2\n         55: athrow\n       Exception table:\n          from    to  target type\n              8    34    40   Class java/lang/Throwable\n             41    45    48   Class java/lang/Throwable\n       LineNumberTable:\n@@ -849,24 +849,24 @@\n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n          1: aload_0\n-         2: getfield      #10                 // Field oneByte:[B\n+         2: getfield      #32                 // Field oneByte:[B\n          5: iconst_0\n          6: iconst_1\n-         7: invokevirtual #66                 // Method read:([BII)I\n+         7: invokevirtual #188                // Method read:([BII)I\n         10: iconst_m1\n         11: if_icmpne     18\n         14: iconst_m1\n         15: goto          28\n         18: aload_0\n-        19: getfield      #10                 // Field oneByte:[B\n+        19: getfield      #32                 // Field oneByte:[B\n         22: iconst_0\n         23: baload\n         24: sipush        255\n         27: iand\n         28: ireturn\n       LineNumberTable:\n         line 278: 0\n@@ -886,174 +886,174 @@\n     Code:\n       stack=6, locals=12, args_size=4\n          0: iload_3\n          1: ifne          6\n          4: iconst_0\n          5: ireturn\n          6: aload_0\n-         7: getfield      #67                 // Field endReached:Z\n+         7: getfield      #191                // Field endReached:Z\n         10: ifeq          15\n         13: iconst_m1\n         14: ireturn\n         15: iconst_0\n         16: istore        4\n         18: iload_3\n         19: ifle          339\n         22: aload_0\n-        23: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-        26: invokevirtual #68                 // Method java/util/zip/Inflater.needsInput:()Z\n+        23: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n+        26: invokevirtual #194                // Method java/util/zip/Inflater.needsInput:()Z\n         29: ifeq          91\n         32: aload_0\n-        33: getfield      #18                 // Field in:Ljava/io/InputStream;\n+        33: getfield      #55                 // Field in:Ljava/io/InputStream;\n         36: aload_0\n-        37: getfield      #3                  // Field buf:[B\n+        37: getfield      #12                 // Field buf:[B\n         40: arraylength\n-        41: invokevirtual #69                 // Method java/io/InputStream.mark:(I)V\n+        41: invokevirtual #197                // Method java/io/InputStream.mark:(I)V\n         44: aload_0\n         45: aload_0\n-        46: getfield      #18                 // Field in:Ljava/io/InputStream;\n+        46: getfield      #55                 // Field in:Ljava/io/InputStream;\n         49: aload_0\n-        50: getfield      #3                  // Field buf:[B\n-        53: invokevirtual #70                 // Method java/io/InputStream.read:([B)I\n-        56: putfield      #71                 // Field bufUsed:I\n+        50: getfield      #12                 // Field buf:[B\n+        53: invokevirtual #200                // Method java/io/InputStream.read:([B)I\n+        56: putfield      #203                // Field bufUsed:I\n         59: aload_0\n-        60: getfield      #71                 // Field bufUsed:I\n+        60: getfield      #203                // Field bufUsed:I\n         63: iconst_m1\n         64: if_icmpne     75\n-        67: new           #72                 // class java/io/EOFException\n+        67: new           #207                // class java/io/EOFException\n         70: dup\n-        71: invokespecial #73                 // Method java/io/EOFException.\"<init>\":()V\n+        71: invokespecial #209                // Method java/io/EOFException.\"<init>\":()V\n         74: athrow\n         75: aload_0\n-        76: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n+        76: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n         79: aload_0\n-        80: getfield      #3                  // Field buf:[B\n+        80: getfield      #12                 // Field buf:[B\n         83: iconst_0\n         84: aload_0\n-        85: getfield      #71                 // Field bufUsed:I\n-        88: invokevirtual #74                 // Method java/util/zip/Inflater.setInput:([BII)V\n+        85: getfield      #203                // Field bufUsed:I\n+        88: invokevirtual #210                // Method java/util/zip/Inflater.setInput:([BII)V\n         91: aload_0\n-        92: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n+        92: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n         95: aload_1\n         96: iload_2\n         97: iload_3\n-        98: invokevirtual #75                 // Method java/util/zip/Inflater.inflate:([BII)I\n+        98: invokevirtual #214                // Method java/util/zip/Inflater.inflate:([BII)I\n        101: istore        5\n        103: goto          118\n        106: astore        6\n-       108: new           #27                 // class java/io/IOException\n+       108: new           #82                 // class java/io/IOException\n        111: dup\n-       112: ldc           #77                 // String Gzip-compressed data is corrupt\n-       114: invokespecial #30                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       112: ldc           #219                // String Gzip-compressed data is corrupt\n+       114: invokespecial #88                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        117: athrow\n        118: aload_0\n-       119: getfield      #9                  // Field crc:Ljava/util/zip/CRC32;\n+       119: getfield      #28                 // Field crc:Ljava/util/zip/CRC32;\n        122: aload_1\n        123: iload_2\n        124: iload         5\n-       126: invokevirtual #78                 // Method java/util/zip/CRC32.update:([BII)V\n+       126: invokevirtual #221                // Method java/util/zip/CRC32.update:([BII)V\n        129: iload_2\n        130: iload         5\n        132: iadd\n        133: istore_2\n        134: iload_3\n        135: iload         5\n        137: isub\n        138: istore_3\n        139: iload         4\n        141: iload         5\n        143: iadd\n        144: istore        4\n        146: aload_0\n        147: iload         5\n-       149: invokevirtual #79                 // Method count:(I)V\n+       149: invokevirtual #224                // Method count:(I)V\n        152: aload_0\n-       153: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       156: invokevirtual #80                 // Method java/util/zip/Inflater.finished:()Z\n+       153: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n+       156: invokevirtual #227                // Method java/util/zip/Inflater.finished:()Z\n        159: ifeq          336\n        162: aload_0\n-       163: getfield      #18                 // Field in:Ljava/io/InputStream;\n-       166: invokevirtual #81                 // Method java/io/InputStream.reset:()V\n+       163: getfield      #55                 // Field in:Ljava/io/InputStream;\n+       166: invokevirtual #230                // Method java/io/InputStream.reset:()V\n        169: aload_0\n-       170: getfield      #71                 // Field bufUsed:I\n+       170: getfield      #203                // Field bufUsed:I\n        173: aload_0\n-       174: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       177: invokevirtual #82                 // Method java/util/zip/Inflater.getRemaining:()I\n+       174: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n+       177: invokevirtual #231                // Method java/util/zip/Inflater.getRemaining:()I\n        180: isub\n        181: istore        6\n        183: aload_0\n-       184: getfield      #18                 // Field in:Ljava/io/InputStream;\n+       184: getfield      #55                 // Field in:Ljava/io/InputStream;\n        187: iload         6\n        189: i2l\n-       190: invokestatic  #83                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+       190: invokestatic  #234                // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n        193: iload         6\n        195: i2l\n        196: lcmp\n        197: ifeq          208\n-       200: new           #27                 // class java/io/IOException\n+       200: new           #82                 // class java/io/IOException\n        203: dup\n-       204: invokespecial #84                 // Method java/io/IOException.\"<init>\":()V\n+       204: invokespecial #240                // Method java/io/IOException.\"<init>\":()V\n        207: athrow\n        208: aload_0\n        209: iconst_0\n-       210: putfield      #71                 // Field bufUsed:I\n-       213: new           #31                 // class java/io/DataInputStream\n+       210: putfield      #203                // Field bufUsed:I\n+       213: new           #91                 // class java/io/DataInputStream\n        216: dup\n        217: aload_0\n-       218: getfield      #18                 // Field in:Ljava/io/InputStream;\n-       221: invokespecial #32                 // Method java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+       218: getfield      #55                 // Field in:Ljava/io/InputStream;\n+       221: invokespecial #93                 // Method java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n        224: astore        7\n        226: aload         7\n        228: iconst_4\n-       229: invokestatic  #44                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+       229: invokestatic  #121                // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n        232: lstore        8\n        234: lload         8\n        236: aload_0\n-       237: getfield      #9                  // Field crc:Ljava/util/zip/CRC32;\n-       240: invokevirtual #85                 // Method java/util/zip/CRC32.getValue:()J\n+       237: getfield      #28                 // Field crc:Ljava/util/zip/CRC32;\n+       240: invokevirtual #241                // Method java/util/zip/CRC32.getValue:()J\n        243: lcmp\n        244: ifeq          257\n-       247: new           #27                 // class java/io/IOException\n+       247: new           #82                 // class java/io/IOException\n        250: dup\n-       251: ldc           #86                 // String Gzip-compressed data is corrupt (CRC32 error)\n-       253: invokespecial #30                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       251: ldc           #245                // String Gzip-compressed data is corrupt (CRC32 error)\n+       253: invokespecial #88                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        256: athrow\n        257: aload         7\n        259: iconst_4\n-       260: invokestatic  #44                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+       260: invokestatic  #121                // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n        263: lstore        10\n        265: lload         10\n        267: aload_0\n-       268: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       271: invokevirtual #87                 // Method java/util/zip/Inflater.getBytesWritten:()J\n-       274: ldc2_w        #88                 // long 4294967295l\n+       268: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n+       271: invokevirtual #247                // Method java/util/zip/Inflater.getBytesWritten:()J\n+       274: ldc2_w        #250                // long 4294967295l\n        277: land\n        278: lcmp\n        279: ifeq          292\n-       282: new           #27                 // class java/io/IOException\n+       282: new           #82                 // class java/io/IOException\n        285: dup\n-       286: ldc           #90                 // String Gzip-compressed data is corrupt(uncompressed size mismatch)\n-       288: invokespecial #30                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       286: ldc           #252                // String Gzip-compressed data is corrupt(uncompressed size mismatch)\n+       288: invokespecial #88                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        291: athrow\n        292: aload_0\n-       293: getfield      #21                 // Field decompressConcatenated:Z\n+       293: getfield      #62                 // Field decompressConcatenated:Z\n        296: ifeq          307\n        299: aload_0\n        300: iconst_0\n-       301: invokespecial #22                 // Method init:(Z)Z\n+       301: invokespecial #66                 // Method init:(Z)Z\n        304: ifne          336\n        307: aload_0\n-       308: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-       311: invokevirtual #91                 // Method java/util/zip/Inflater.end:()V\n+       308: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n+       311: invokevirtual #254                // Method java/util/zip/Inflater.end:()V\n        314: aload_0\n        315: aconst_null\n-       316: putfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n+       316: putfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n        319: aload_0\n        320: iconst_1\n-       321: putfield      #67                 // Field endReached:Z\n+       321: putfield      #191                // Field endReached:Z\n        324: iload         4\n        326: ifne          333\n        329: iconst_m1\n        330: goto          335\n        333: iload         4\n        335: ireturn\n        336: goto          18\n@@ -1187,29 +1187,29 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n+         1: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n          4: ifnull        19\n          7: aload_0\n-         8: getfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n-        11: invokevirtual #91                 // Method java/util/zip/Inflater.end:()V\n+         8: getfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n+        11: invokevirtual #254                // Method java/util/zip/Inflater.end:()V\n         14: aload_0\n         15: aconst_null\n-        16: putfield      #6                  // Field inf:Ljava/util/zip/Inflater;\n+        16: putfield      #21                 // Field inf:Ljava/util/zip/Inflater;\n         19: aload_0\n-        20: getfield      #18                 // Field in:Ljava/io/InputStream;\n-        23: getstatic     #92                 // Field java/lang/System.in:Ljava/io/InputStream;\n+        20: getfield      #55                 // Field in:Ljava/io/InputStream;\n+        23: getstatic     #257                // Field java/lang/System.in:Ljava/io/InputStream;\n         26: if_acmpeq     36\n         29: aload_0\n-        30: getfield      #18                 // Field in:Ljava/io/InputStream;\n-        33: invokevirtual #93                 // Method java/io/InputStream.close:()V\n+        30: getfield      #55                 // Field in:Ljava/io/InputStream;\n+        33: invokevirtual #260                // Method java/io/InputStream.close:()V\n         36: return\n       LineNumberTable:\n         line 387: 0\n         line 388: 7\n         line 389: 14\n         line 392: 19\n         line 393: 29\n@@ -1225,35 +1225,35 @@\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #16                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-         4: invokevirtual #94                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+         1: getfield      #47                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+         4: invokevirtual #261                // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n          7: lreturn\n       LineNumberTable:\n         line 402: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n-         0: ldc           #42                 // class org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-         2: invokevirtual #95                 // Method java/lang/Class.desiredAssertionStatus:()Z\n+         0: ldc           #2                  // class org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+         2: invokevirtual #264                // Method java/lang/Class.desiredAssertionStatus:()Z\n          5: ifne          12\n          8: iconst_1\n          9: goto          13\n         12: iconst_0\n-        13: putstatic     #23                 // Field $assertionsDisabled:Z\n+        13: putstatic     #70                 // Field $assertionsDisabled:Z\n         16: return\n       LineNumberTable:\n         line 77: 0\n       StackMapTable: number_of_entries = 2\n         frame_type = 12 /* same */\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n"}]}
