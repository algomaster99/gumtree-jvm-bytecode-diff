{"diffoscope-json-version": 1, "source1": "first/AccumulatorPathVisitor.class", "source2": "second/AccumulatorPathVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,88 +15,85 @@\n     private final List<Path> dirList;\n     private final List<Path> fileList;\n     \n     public static AccumulatorPathVisitor withBigIntegerCounters() {\n         return new AccumulatorPathVisitor(Counters.bigIntegerPathCounters());\n     }\n     \n-    public static AccumulatorPathVisitor withBigIntegerCounters(final PathFilter fileFilter, final PathFilter dirFilter) {\n-        return new AccumulatorPathVisitor(Counters.bigIntegerPathCounters(), fileFilter, dirFilter);\n+    public static AccumulatorPathVisitor withBigIntegerCounters(final PathFilter pathFilter, final PathFilter pathFilter2) {\n+        return new AccumulatorPathVisitor(Counters.bigIntegerPathCounters(), pathFilter, pathFilter2);\n     }\n     \n     public static AccumulatorPathVisitor withLongCounters() {\n         return new AccumulatorPathVisitor(Counters.longPathCounters());\n     }\n     \n-    public static AccumulatorPathVisitor withLongCounters(final PathFilter fileFilter, final PathFilter dirFilter) {\n-        return new AccumulatorPathVisitor(Counters.longPathCounters(), fileFilter, dirFilter);\n+    public static AccumulatorPathVisitor withLongCounters(final PathFilter pathFilter, final PathFilter pathFilter2) {\n+        return new AccumulatorPathVisitor(Counters.longPathCounters(), pathFilter, pathFilter2);\n     }\n     \n     public AccumulatorPathVisitor() {\n         super(Counters.noopPathCounters());\n         this.dirList = new ArrayList<Path>();\n         this.fileList = new ArrayList<Path>();\n     }\n     \n-    public AccumulatorPathVisitor(final Counters.PathCounters pathCounter) {\n-        super(pathCounter);\n+    public AccumulatorPathVisitor(final Counters.PathCounters pathCounters) {\n+        super(pathCounters);\n         this.dirList = new ArrayList<Path>();\n         this.fileList = new ArrayList<Path>();\n     }\n     \n-    public AccumulatorPathVisitor(final Counters.PathCounters pathCounter, final PathFilter fileFilter, final PathFilter dirFilter) {\n-        super(pathCounter, fileFilter, dirFilter);\n+    public AccumulatorPathVisitor(final Counters.PathCounters pathCounters, final PathFilter pathFilter, final PathFilter pathFilter2) {\n+        super(pathCounters, pathFilter, pathFilter2);\n         this.dirList = new ArrayList<Path>();\n         this.fileList = new ArrayList<Path>();\n     }\n     \n-    private void add(final List<Path> list, final Path dir) {\n-        list.add(dir.normalize());\n+    private void add(final List<Path> list, final Path path) {\n+        list.add(path.normalize());\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (!super.equals(obj)) {\n+        if (!super.equals(o)) {\n             return false;\n         }\n-        if (!(obj instanceof AccumulatorPathVisitor)) {\n+        if (!(o instanceof AccumulatorPathVisitor)) {\n             return false;\n         }\n-        final AccumulatorPathVisitor other = (AccumulatorPathVisitor)obj;\n-        return Objects.equals(this.dirList, other.dirList) && Objects.equals(this.fileList, other.fileList);\n+        final AccumulatorPathVisitor accumulatorPathVisitor = (AccumulatorPathVisitor)o;\n+        return Objects.equals(this.dirList, accumulatorPathVisitor.dirList) && Objects.equals(this.fileList, accumulatorPathVisitor.fileList);\n     }\n     \n     public List<Path> getDirList() {\n         return this.dirList;\n     }\n     \n     public List<Path> getFileList() {\n         return this.fileList;\n     }\n     \n     public int hashCode() {\n-        final int prime = 31;\n-        int result = super.hashCode();\n-        result = 31 * result + Objects.hash(this.dirList, this.fileList);\n-        return result;\n+        return 31 * super.hashCode() + Objects.hash(this.dirList, this.fileList);\n     }\n     \n-    public List<Path> relativizeDirectories(final Path parent, final boolean sort, final Comparator<? super Path> comparator) {\n-        return PathUtils.relativize((Collection)this.getDirList(), parent, sort, (Comparator)comparator);\n+    public List<Path> relativizeDirectories(final Path path, final boolean b, final Comparator<? super Path> comparator) {\n+        return PathUtils.relativize((Collection)this.getDirList(), path, b, (Comparator)comparator);\n     }\n     \n-    public List<Path> relativizeFiles(final Path parent, final boolean sort, final Comparator<? super Path> comparator) {\n-        return PathUtils.relativize((Collection)this.getFileList(), parent, sort, (Comparator)comparator);\n+    public List<Path> relativizeFiles(final Path path, final boolean b, final Comparator<? super Path> comparator) {\n+        return PathUtils.relativize((Collection)this.getFileList(), path, b, (Comparator)comparator);\n     }\n     \n-    protected void updateDirCounter(final Path dir, final IOException exc) {\n-        super.updateDirCounter(dir, exc);\n-        this.add(this.dirList, dir);\n+    protected void updateDirCounter(final Path path, final IOException ex) {\n+        super.updateDirCounter(path, ex);\n+        this.add(this.dirList, path);\n     }\n     \n-    protected void updateFileCounters(final Path file, final BasicFileAttributes attributes) {\n-        super.updateFileCounters(file, attributes);\n-        this.add(this.fileList, file);\n+    protected void updateFileCounters(final Path path, final BasicFileAttributes basicFileAttributes) {\n+        super.updateFileCounters(path, basicFileAttributes);\n+        this.add(this.fileList, path);\n     }\n }\n"}]}
