{"diffoscope-json-version": 1, "source1": "first/NestMembers.class", "source2": "second/NestMembers.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,76 +7,77 @@\n import java.io.IOException;\n import java.io.DataInput;\n \n public final class NestMembers extends Attribute\n {\n     private int[] classes;\n     \n-    NestMembers(final int nameIndex, final int length, final DataInput input, final ConstantPool constantPool) throws IOException {\n-        this(nameIndex, length, (int[])null, constantPool);\n-        final int classCount = input.readUnsignedShort();\n-        this.classes = new int[classCount];\n-        for (int i = 0; i < classCount; ++i) {\n-            this.classes[i] = input.readUnsignedShort();\n+    NestMembers(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, n2, (int[])null, constantPool);\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        this.classes = new int[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n+            this.classes[i] = dataInput.readUnsignedShort();\n         }\n     }\n     \n-    public NestMembers(final int nameIndex, final int length, final int[] classes, final ConstantPool constantPool) {\n-        super((byte)26, nameIndex, length, constantPool);\n-        this.classes = ((classes != null) ? classes : ArrayUtils.EMPTY_INT_ARRAY);\n+    public NestMembers(final int n, final int n2, final int[] array, final ConstantPool constantPool) {\n+        super((byte)26, n, n2, constantPool);\n+        this.classes = ((array != null) ? array : ArrayUtils.EMPTY_INT_ARRAY);\n     }\n     \n-    public NestMembers(final NestMembers c) {\n-        this(c.getNameIndex(), c.getLength(), c.getClasses(), c.getConstantPool());\n+    public NestMembers(final NestMembers nestMembers) {\n+        this(nestMembers.getNameIndex(), nestMembers.getLength(), nestMembers.getClasses(), nestMembers.getConstantPool());\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitNestMembers(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitNestMembers(this);\n     }\n     \n     public Attribute copy(final ConstantPool constantPool) {\n-        final NestMembers c = (NestMembers)this.clone();\n+        final NestMembers nestMembers = (NestMembers)this.clone();\n         if (this.classes != null) {\n-            c.classes = this.classes.clone();\n+            nestMembers.classes = this.classes.clone();\n         }\n-        c.setConstantPool(constantPool);\n-        return c;\n+        nestMembers.setConstantPool(constantPool);\n+        return nestMembers;\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n-        file.writeShort(this.classes.length);\n-        for (final int index : this.classes) {\n-            file.writeShort(index);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeShort(this.classes.length);\n+        final int[] classes = this.classes;\n+        for (int length = classes.length, i = 0; i < length; ++i) {\n+            dataOutputStream.writeShort(classes[i]);\n         }\n     }\n     \n     public int[] getClasses() {\n         return this.classes;\n     }\n     \n     public String[] getClassNames() {\n-        final String[] names = new String[this.classes.length];\n-        Arrays.setAll(names, i -> Utility.pathToPackage(super.getConstantPool().getConstantString(this.classes[i], (byte)7)));\n-        return names;\n+        final String[] array = new String[this.classes.length];\n+        Arrays.setAll(array, n2 -> Utility.pathToPackage(super.getConstantPool().getConstantString(this.classes[n2], (byte)7)));\n+        return array;\n     }\n     \n     public int getNumberClasses() {\n         return (this.classes == null) ? 0 : this.classes.length;\n     }\n     \n-    public void setClasses(final int[] classes) {\n-        this.classes = ((classes != null) ? classes : ArrayUtils.EMPTY_INT_ARRAY);\n+    public void setClasses(final int[] array) {\n+        this.classes = ((array != null) ? array : ArrayUtils.EMPTY_INT_ARRAY);\n     }\n     \n     public String toString() {\n-        final StringBuilder buf = new StringBuilder();\n-        buf.append(\"NestMembers(\");\n-        buf.append(this.classes.length);\n-        buf.append(\"):\\n\");\n-        for (final int index : this.classes) {\n-            final String className = super.getConstantPool().getConstantString(index, (byte)7);\n-            buf.append(\"  \").append(Utility.compactClassName(className, false)).append(\"\\n\");\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"NestMembers(\");\n+        sb.append(this.classes.length);\n+        sb.append(\"):\\n\");\n+        final int[] classes = this.classes;\n+        for (int length = classes.length, i = 0; i < length; ++i) {\n+            sb.append(\"  \").append(Utility.compactClassName(super.getConstantPool().getConstantString(classes[i], (byte)7), false)).append(\"\\n\");\n         }\n-        return buf.substring();\n+        return sb.substring();\n     }\n }\n"}]}
