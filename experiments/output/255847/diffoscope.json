{"diffoscope-json-version": 1, "source1": "first/BcBands.class", "source2": "second/BcBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -47,16 +47,16 @@\n     private static final int endMarker = 255;\n     private final IntList bciRenumbering;\n     private final Map labelsToOffsets;\n     private int byteCodeOffset;\n     private int renumberedOffset;\n     private final IntList bcLabelRelativeOffsets;\n     \n-    public BcBands(final CpBands cpBands, final Segment segment, final int effort) {\n-        super(effort, segment.getSegmentHeader());\n+    public BcBands(final CpBands cpBands, final Segment segment, final int n) {\n+        super(n, segment.getSegmentHeader());\n         this.bcCodes = new IntList();\n         this.bcCaseCount = new IntList();\n         this.bcCaseValue = new IntList();\n         this.bcByte = new IntList();\n         this.bcShort = new IntList();\n         this.bcLocal = new IntList();\n         this.bcLabel = new ArrayList();\n@@ -77,132 +77,128 @@\n         this.bciRenumbering = new IntList();\n         this.labelsToOffsets = new HashMap();\n         this.bcLabelRelativeOffsets = new IntList();\n         this.cpBands = cpBands;\n         this.segment = segment;\n     }\n     \n-    public void setCurrentClass(final String name, final String superName) {\n-        this.currentClass = name;\n-        this.superClass = superName;\n+    public void setCurrentClass(final String currentClass, final String superClass) {\n+        this.currentClass = currentClass;\n+        this.superClass = superClass;\n     }\n     \n     public void finaliseBands() {\n         this.bcThisField = this.getIndexInClass(this.bcThisField);\n         this.bcThisMethod = this.getIndexInClass(this.bcThisMethod);\n         this.bcSuperMethod = this.getIndexInClass(this.bcSuperMethod);\n         this.bcInitRef = this.getIndexInClassForConstructor(this.bcInitRef);\n     }\n     \n-    public void pack(final OutputStream out) throws IOException, Pack200Exception {\n+    public void pack(final OutputStream outputStream) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing byte code bands...\");\n-        byte[] encodedBand = this.encodeBandInt(\"bcCodes\", this.bcCodes.toArray(), Codec.BYTE1);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcCodes[\" + this.bcCodes.size());\n-        encodedBand = this.encodeBandInt(\"bcCaseCount\", this.bcCaseCount.toArray(), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcCaseCount[\" + this.bcCaseCount.size());\n-        encodedBand = this.encodeBandInt(\"bcCaseValue\", this.bcCaseValue.toArray(), Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcCaseValue[\" + this.bcCaseValue.size());\n-        encodedBand = this.encodeBandInt(\"bcByte\", this.bcByte.toArray(), Codec.BYTE1);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcByte[\" + this.bcByte.size());\n-        encodedBand = this.encodeBandInt(\"bcShort\", this.bcShort.toArray(), Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcShort[\" + this.bcShort.size());\n-        encodedBand = this.encodeBandInt(\"bcLocal\", this.bcLocal.toArray(), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcLocal[\" + this.bcLocal.size());\n-        encodedBand = this.encodeBandInt(\"bcLabel\", this.integerListToArray(this.bcLabel), Codec.BRANCH5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcLabel[\" + this.bcLabel.size());\n-        encodedBand = this.encodeBandInt(\"bcIntref\", this.cpEntryListToArray(this.bcIntref), Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcIntref[\" + this.bcIntref.size());\n-        encodedBand = this.encodeBandInt(\"bcFloatRef\", this.cpEntryListToArray(this.bcFloatRef), Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcFloatRef[\" + this.bcFloatRef.size());\n-        encodedBand = this.encodeBandInt(\"bcLongRef\", this.cpEntryListToArray(this.bcLongRef), Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcLongRef[\" + this.bcLongRef.size());\n-        encodedBand = this.encodeBandInt(\"bcDoubleRef\", this.cpEntryListToArray(this.bcDoubleRef), Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcDoubleRef[\" + this.bcDoubleRef.size());\n-        encodedBand = this.encodeBandInt(\"bcStringRef\", this.cpEntryListToArray(this.bcStringRef), Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcStringRef[\" + this.bcStringRef.size());\n-        encodedBand = this.encodeBandInt(\"bcClassRef\", this.cpEntryOrNullListToArray(this.bcClassRef), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcClassRef[\" + this.bcClassRef.size());\n-        encodedBand = this.encodeBandInt(\"bcFieldRef\", this.cpEntryListToArray(this.bcFieldRef), Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcFieldRef[\" + this.bcFieldRef.size());\n-        encodedBand = this.encodeBandInt(\"bcMethodRef\", this.cpEntryListToArray(this.bcMethodRef), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcMethodRef[\" + this.bcMethodRef.size());\n-        encodedBand = this.encodeBandInt(\"bcIMethodRef\", this.cpEntryListToArray(this.bcIMethodRef), Codec.DELTA5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcIMethodRef[\" + this.bcIMethodRef.size());\n-        encodedBand = this.encodeBandInt(\"bcThisField\", this.integerListToArray(this.bcThisField), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcThisField[\" + this.bcThisField.size());\n-        encodedBand = this.encodeBandInt(\"bcSuperField\", this.integerListToArray(this.bcSuperField), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcSuperField[\" + this.bcSuperField.size());\n-        encodedBand = this.encodeBandInt(\"bcThisMethod\", this.integerListToArray(this.bcThisMethod), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcThisMethod[\" + this.bcThisMethod.size());\n-        encodedBand = this.encodeBandInt(\"bcSuperMethod\", this.integerListToArray(this.bcSuperMethod), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcSuperMethod[\" + this.bcSuperMethod.size());\n-        encodedBand = this.encodeBandInt(\"bcInitRef\", this.integerListToArray(this.bcInitRef), Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from bcInitRef[\" + this.bcInitRef.size());\n-    }\n-    \n-    private List getIndexInClass(final List cPMethodOrFieldList) {\n-        final List indices = new ArrayList(cPMethodOrFieldList.size());\n-        for (int i = 0; i < cPMethodOrFieldList.size(); ++i) {\n-            final CPMethodOrField cpMF = (CPMethodOrField)cPMethodOrFieldList.get(i);\n-            indices.add(Integer.valueOf(cpMF.getIndexInClass()));\n-        }\n-        return indices;\n-    }\n-    \n-    private List getIndexInClassForConstructor(final List cPMethodList) {\n-        final List indices = new ArrayList(cPMethodList.size());\n-        for (int i = 0; i < cPMethodList.size(); ++i) {\n-            final CPMethodOrField cpMF = (CPMethodOrField)cPMethodList.get(i);\n-            indices.add(Integer.valueOf(cpMF.getIndexInClassForConstructor()));\n+        final byte[] encodeBandInt = this.encodeBandInt(\"bcCodes\", this.bcCodes.toArray(), Codec.BYTE1);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from bcCodes[\" + this.bcCodes.size());\n+        final byte[] encodeBandInt2 = this.encodeBandInt(\"bcCaseCount\", this.bcCaseCount.toArray(), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt2);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt2.length + \" bytes from bcCaseCount[\" + this.bcCaseCount.size());\n+        final byte[] encodeBandInt3 = this.encodeBandInt(\"bcCaseValue\", this.bcCaseValue.toArray(), Codec.DELTA5);\n+        outputStream.write(encodeBandInt3);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt3.length + \" bytes from bcCaseValue[\" + this.bcCaseValue.size());\n+        final byte[] encodeBandInt4 = this.encodeBandInt(\"bcByte\", this.bcByte.toArray(), Codec.BYTE1);\n+        outputStream.write(encodeBandInt4);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt4.length + \" bytes from bcByte[\" + this.bcByte.size());\n+        final byte[] encodeBandInt5 = this.encodeBandInt(\"bcShort\", this.bcShort.toArray(), Codec.DELTA5);\n+        outputStream.write(encodeBandInt5);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt5.length + \" bytes from bcShort[\" + this.bcShort.size());\n+        final byte[] encodeBandInt6 = this.encodeBandInt(\"bcLocal\", this.bcLocal.toArray(), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt6);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt6.length + \" bytes from bcLocal[\" + this.bcLocal.size());\n+        final byte[] encodeBandInt7 = this.encodeBandInt(\"bcLabel\", this.integerListToArray(this.bcLabel), Codec.BRANCH5);\n+        outputStream.write(encodeBandInt7);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt7.length + \" bytes from bcLabel[\" + this.bcLabel.size());\n+        final byte[] encodeBandInt8 = this.encodeBandInt(\"bcIntref\", this.cpEntryListToArray(this.bcIntref), Codec.DELTA5);\n+        outputStream.write(encodeBandInt8);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt8.length + \" bytes from bcIntref[\" + this.bcIntref.size());\n+        final byte[] encodeBandInt9 = this.encodeBandInt(\"bcFloatRef\", this.cpEntryListToArray(this.bcFloatRef), Codec.DELTA5);\n+        outputStream.write(encodeBandInt9);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt9.length + \" bytes from bcFloatRef[\" + this.bcFloatRef.size());\n+        final byte[] encodeBandInt10 = this.encodeBandInt(\"bcLongRef\", this.cpEntryListToArray(this.bcLongRef), Codec.DELTA5);\n+        outputStream.write(encodeBandInt10);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt10.length + \" bytes from bcLongRef[\" + this.bcLongRef.size());\n+        final byte[] encodeBandInt11 = this.encodeBandInt(\"bcDoubleRef\", this.cpEntryListToArray(this.bcDoubleRef), Codec.DELTA5);\n+        outputStream.write(encodeBandInt11);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt11.length + \" bytes from bcDoubleRef[\" + this.bcDoubleRef.size());\n+        final byte[] encodeBandInt12 = this.encodeBandInt(\"bcStringRef\", this.cpEntryListToArray(this.bcStringRef), Codec.DELTA5);\n+        outputStream.write(encodeBandInt12);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt12.length + \" bytes from bcStringRef[\" + this.bcStringRef.size());\n+        final byte[] encodeBandInt13 = this.encodeBandInt(\"bcClassRef\", this.cpEntryOrNullListToArray(this.bcClassRef), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt13);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt13.length + \" bytes from bcClassRef[\" + this.bcClassRef.size());\n+        final byte[] encodeBandInt14 = this.encodeBandInt(\"bcFieldRef\", this.cpEntryListToArray(this.bcFieldRef), Codec.DELTA5);\n+        outputStream.write(encodeBandInt14);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt14.length + \" bytes from bcFieldRef[\" + this.bcFieldRef.size());\n+        final byte[] encodeBandInt15 = this.encodeBandInt(\"bcMethodRef\", this.cpEntryListToArray(this.bcMethodRef), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt15);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt15.length + \" bytes from bcMethodRef[\" + this.bcMethodRef.size());\n+        final byte[] encodeBandInt16 = this.encodeBandInt(\"bcIMethodRef\", this.cpEntryListToArray(this.bcIMethodRef), Codec.DELTA5);\n+        outputStream.write(encodeBandInt16);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt16.length + \" bytes from bcIMethodRef[\" + this.bcIMethodRef.size());\n+        final byte[] encodeBandInt17 = this.encodeBandInt(\"bcThisField\", this.integerListToArray(this.bcThisField), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt17);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt17.length + \" bytes from bcThisField[\" + this.bcThisField.size());\n+        final byte[] encodeBandInt18 = this.encodeBandInt(\"bcSuperField\", this.integerListToArray(this.bcSuperField), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt18);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt18.length + \" bytes from bcSuperField[\" + this.bcSuperField.size());\n+        final byte[] encodeBandInt19 = this.encodeBandInt(\"bcThisMethod\", this.integerListToArray(this.bcThisMethod), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt19);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt19.length + \" bytes from bcThisMethod[\" + this.bcThisMethod.size());\n+        final byte[] encodeBandInt20 = this.encodeBandInt(\"bcSuperMethod\", this.integerListToArray(this.bcSuperMethod), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt20);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt20.length + \" bytes from bcSuperMethod[\" + this.bcSuperMethod.size());\n+        final byte[] encodeBandInt21 = this.encodeBandInt(\"bcInitRef\", this.integerListToArray(this.bcInitRef), Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt21);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt21.length + \" bytes from bcInitRef[\" + this.bcInitRef.size());\n+    }\n+    \n+    private List getIndexInClass(final List list) {\n+        final ArrayList list2 = new ArrayList(list.size());\n+        for (int i = 0; i < list.size(); ++i) {\n+            list2.add(Integer.valueOf(((CPMethodOrField)list.get(i)).getIndexInClass()));\n+        }\n+        return list2;\n+    }\n+    \n+    private List getIndexInClassForConstructor(final List list) {\n+        final ArrayList list2 = new ArrayList(list.size());\n+        for (int i = 0; i < list.size(); ++i) {\n+            list2.add(Integer.valueOf(((CPMethodOrField)list.get(i)).getIndexInClassForConstructor()));\n         }\n-        return indices;\n+        return list2;\n     }\n     \n     public void visitEnd() {\n         for (int i = 0; i < this.bciRenumbering.size(); ++i) {\n             if (this.bciRenumbering.get(i) == -1) {\n                 this.bciRenumbering.remove(i);\n                 this.bciRenumbering.add(i, ++this.renumberedOffset);\n             }\n         }\n         if (this.renumberedOffset != 0) {\n             if (this.renumberedOffset + 1 != this.bciRenumbering.size()) {\n                 throw new RuntimeException(\"Mistake made with renumbering\");\n             }\n-            for (int i = this.bcLabel.size() - 1; i >= 0; --i) {\n-                final Object label = this.bcLabel.get(i);\n-                if (label instanceof Integer) {\n+            for (int j = this.bcLabel.size() - 1; j >= 0; --j) {\n+                final Object value = this.bcLabel.get(j);\n+                if (value instanceof Integer) {\n                     break;\n                 }\n-                if (label instanceof Label) {\n-                    this.bcLabel.remove(i);\n-                    final Integer offset = Integer.valueOf(this.labelsToOffsets.get(label));\n-                    final int relativeOffset = this.bcLabelRelativeOffsets.get(i);\n-                    this.bcLabel.add(i, Integer.valueOf(this.bciRenumbering.get((int)offset) - this.bciRenumbering.get(relativeOffset)));\n+                if (value instanceof Label) {\n+                    this.bcLabel.remove(j);\n+                    this.bcLabel.add(j, Integer.valueOf(this.bciRenumbering.get((int)(Integer)this.labelsToOffsets.get(value)) - this.bciRenumbering.get(this.bcLabelRelativeOffsets.get(j))));\n                 }\n             }\n             this.bcCodes.add(255);\n             this.segment.getClassBands().doBciRenumbering(this.bciRenumbering, this.labelsToOffsets);\n             this.bciRenumbering.clear();\n             this.labelsToOffsets.clear();\n             this.byteCodeOffset = 0;\n@@ -210,107 +206,106 @@\n         }\n     }\n     \n     public void visitLabel(final Label label) {\n         this.labelsToOffsets.put(label, Integer.valueOf(this.byteCodeOffset));\n     }\n     \n-    public void visitFieldInsn(int opcode, final String owner, final String name, final String desc) {\n+    public void visitFieldInsn(int n, final String s, final String s2, final String s3) {\n         this.byteCodeOffset += 3;\n         this.updateRenumbering();\n-        boolean aload_0 = false;\n+        boolean b = false;\n         if (this.bcCodes.size() > 0 && this.bcCodes.get(this.bcCodes.size() - 1) == 42) {\n             this.bcCodes.remove(this.bcCodes.size() - 1);\n-            aload_0 = true;\n+            b = true;\n         }\n-        final CPMethodOrField cpField = this.cpBands.getCPField(owner, name, desc);\n-        if (aload_0) {\n-            opcode += 7;\n+        final CPMethodOrField cpField = this.cpBands.getCPField(s, s2, s3);\n+        if (b) {\n+            n += 7;\n         }\n-        if (owner.equals(this.currentClass)) {\n-            opcode += 24;\n+        if (s.equals(this.currentClass)) {\n+            n += 24;\n             this.bcThisField.add(cpField);\n         }\n         else {\n-            if (aload_0) {\n-                opcode -= 7;\n+            if (b) {\n+                n -= 7;\n                 this.bcCodes.add(42);\n             }\n             this.bcFieldRef.add(cpField);\n         }\n-        aload_0 = false;\n-        this.bcCodes.add(opcode);\n+        this.bcCodes.add(n);\n     }\n     \n     private void updateRenumbering() {\n         if (this.bciRenumbering.isEmpty()) {\n             this.bciRenumbering.add(0);\n         }\n         ++this.renumberedOffset;\n         for (int i = this.bciRenumbering.size(); i < this.byteCodeOffset; ++i) {\n             this.bciRenumbering.add(-1);\n         }\n         this.bciRenumbering.add(this.renumberedOffset);\n     }\n     \n-    public void visitIincInsn(final int var, final int increment) {\n-        if (var > 255 || increment > 255) {\n+    public void visitIincInsn(final int n, final int n2) {\n+        if (n > 255 || n2 > 255) {\n             this.byteCodeOffset += 6;\n             this.bcCodes.add(196);\n             this.bcCodes.add(132);\n-            this.bcLocal.add(var);\n-            this.bcShort.add(increment);\n+            this.bcLocal.add(n);\n+            this.bcShort.add(n2);\n         }\n         else {\n             this.byteCodeOffset += 3;\n             this.bcCodes.add(132);\n-            this.bcLocal.add(var);\n-            this.bcByte.add(increment & 0xFF);\n+            this.bcLocal.add(n);\n+            this.bcByte.add(n2 & 0xFF);\n         }\n         this.updateRenumbering();\n     }\n     \n-    public void visitInsn(final int opcode) {\n-        if (opcode >= 202) {\n+    public void visitInsn(final int n) {\n+        if (n >= 202) {\n             throw new RuntimeException(\"Non-standard bytecode instructions not supported\");\n         }\n-        this.bcCodes.add(opcode);\n+        this.bcCodes.add(n);\n         ++this.byteCodeOffset;\n         this.updateRenumbering();\n     }\n     \n-    public void visitIntInsn(final int opcode, final int operand) {\n-        switch (opcode) {\n+    public void visitIntInsn(final int n, final int n2) {\n+        switch (n) {\n             case 17: {\n-                this.bcCodes.add(opcode);\n-                this.bcShort.add(operand);\n+                this.bcCodes.add(n);\n+                this.bcShort.add(n2);\n                 this.byteCodeOffset += 3;\n                 break;\n             }\n             case 16:\n             case 188: {\n-                this.bcCodes.add(opcode);\n-                this.bcByte.add(operand & 0xFF);\n+                this.bcCodes.add(n);\n+                this.bcByte.add(n2 & 0xFF);\n                 this.byteCodeOffset += 2;\n                 break;\n             }\n         }\n         this.updateRenumbering();\n     }\n     \n-    public void visitJumpInsn(final int opcode, final Label label) {\n-        this.bcCodes.add(opcode);\n+    public void visitJumpInsn(final int n, final Label label) {\n+        this.bcCodes.add(n);\n         this.bcLabel.add(label);\n         this.bcLabelRelativeOffsets.add(this.byteCodeOffset);\n         this.byteCodeOffset += 3;\n         this.updateRenumbering();\n     }\n     \n-    public void visitLdcInsn(final Object cst) {\n-        final CPConstant constant = this.cpBands.getConstant(cst);\n+    public void visitLdcInsn(final Object o) {\n+        final CPConstant constant = this.cpBands.getConstant(o);\n         if (this.segment.lastConstantHadWideIndex() || constant instanceof CPLong || constant instanceof CPDouble) {\n             this.byteCodeOffset += 3;\n             if (constant instanceof CPInt) {\n                 this.bcCodes.add(237);\n                 this.bcIntref.add(constant);\n             }\n             else if (constant instanceof CPFloat) {\n@@ -355,160 +350,157 @@\n                 this.bcCodes.add(233);\n                 this.bcClassRef.add(constant);\n             }\n         }\n         this.updateRenumbering();\n     }\n     \n-    public void visitLookupSwitchInsn(final Label dflt, final int[] keys, final Label[] labels) {\n+    public void visitLookupSwitchInsn(final Label label, final int[] array, final Label[] array2) {\n         this.bcCodes.add(171);\n-        this.bcLabel.add(dflt);\n+        this.bcLabel.add(label);\n         this.bcLabelRelativeOffsets.add(this.byteCodeOffset);\n-        this.bcCaseCount.add(keys.length);\n-        for (int i = 0; i < labels.length; ++i) {\n-            this.bcCaseValue.add(keys[i]);\n-            this.bcLabel.add(labels[i]);\n+        this.bcCaseCount.add(array.length);\n+        for (int i = 0; i < array2.length; ++i) {\n+            this.bcCaseValue.add(array[i]);\n+            this.bcLabel.add(array2[i]);\n             this.bcLabelRelativeOffsets.add(this.byteCodeOffset);\n         }\n-        final int padding = ((this.byteCodeOffset + 1) % 4 == 0) ? 0 : (4 - (this.byteCodeOffset + 1) % 4);\n-        this.byteCodeOffset += 1 + padding + 8 + 8 * keys.length;\n+        this.byteCodeOffset += 1 + (((this.byteCodeOffset + 1) % 4 == 0) ? 0 : (4 - (this.byteCodeOffset + 1) % 4)) + 8 + 8 * array.length;\n         this.updateRenumbering();\n     }\n     \n-    public void visitMethodInsn(int opcode, final String owner, final String name, final String desc) {\n+    public void visitMethodInsn(int n, final String s, final String s2, final String s3) {\n         this.byteCodeOffset += 3;\n-        switch (opcode) {\n+        switch (n) {\n             case 182:\n             case 183:\n             case 184: {\n-                boolean aload_0 = false;\n+                boolean b = false;\n                 if (this.bcCodes.size() > 0 && this.bcCodes.get(this.bcCodes.size() - 1) == 42) {\n                     this.bcCodes.remove(this.bcCodes.size() - 1);\n-                    aload_0 = true;\n-                    opcode += 7;\n+                    b = true;\n+                    n += 7;\n                 }\n-                if (owner.equals(this.currentClass)) {\n-                    opcode += 24;\n-                    if (name.equals(\"<init>\") && opcode == 207) {\n-                        opcode = 230;\n-                        this.bcInitRef.add(this.cpBands.getCPMethod(owner, name, desc));\n+                if (s.equals(this.currentClass)) {\n+                    n += 24;\n+                    if (s2.equals(\"<init>\") && n == 207) {\n+                        n = 230;\n+                        this.bcInitRef.add(this.cpBands.getCPMethod(s, s2, s3));\n                     }\n                     else {\n-                        this.bcThisMethod.add(this.cpBands.getCPMethod(owner, name, desc));\n+                        this.bcThisMethod.add(this.cpBands.getCPMethod(s, s2, s3));\n                     }\n                 }\n-                else if (owner.equals(this.superClass)) {\n-                    opcode += 38;\n-                    if (name.equals(\"<init>\") && opcode == 221) {\n-                        opcode = 231;\n-                        this.bcInitRef.add(this.cpBands.getCPMethod(owner, name, desc));\n+                else if (s.equals(this.superClass)) {\n+                    n += 38;\n+                    if (s2.equals(\"<init>\") && n == 221) {\n+                        n = 231;\n+                        this.bcInitRef.add(this.cpBands.getCPMethod(s, s2, s3));\n                     }\n                     else {\n-                        this.bcSuperMethod.add(this.cpBands.getCPMethod(owner, name, desc));\n+                        this.bcSuperMethod.add(this.cpBands.getCPMethod(s, s2, s3));\n                     }\n                 }\n                 else {\n-                    if (aload_0) {\n-                        opcode -= 7;\n+                    if (b) {\n+                        n -= 7;\n                         this.bcCodes.add(42);\n                     }\n-                    if (name.equals(\"<init>\") && opcode == 183 && owner.equals(this.currentNewClass)) {\n-                        opcode = 232;\n-                        this.bcInitRef.add(this.cpBands.getCPMethod(owner, name, desc));\n+                    if (s2.equals(\"<init>\") && n == 183 && s.equals(this.currentNewClass)) {\n+                        n = 232;\n+                        this.bcInitRef.add(this.cpBands.getCPMethod(s, s2, s3));\n                     }\n                     else {\n-                        this.bcMethodRef.add(this.cpBands.getCPMethod(owner, name, desc));\n+                        this.bcMethodRef.add(this.cpBands.getCPMethod(s, s2, s3));\n                     }\n                 }\n-                this.bcCodes.add(opcode);\n+                this.bcCodes.add(n);\n                 break;\n             }\n             case 185: {\n                 this.byteCodeOffset += 2;\n-                final CPMethodOrField cpIMethod = this.cpBands.getCPIMethod(owner, name, desc);\n-                this.bcIMethodRef.add(cpIMethod);\n+                this.bcIMethodRef.add(this.cpBands.getCPIMethod(s, s2, s3));\n                 this.bcCodes.add(185);\n                 break;\n             }\n         }\n         this.updateRenumbering();\n     }\n     \n-    public void visitMultiANewArrayInsn(final String desc, final int dimensions) {\n+    public void visitMultiANewArrayInsn(final String s, final int n) {\n         this.byteCodeOffset += 4;\n         this.updateRenumbering();\n         this.bcCodes.add(197);\n-        this.bcClassRef.add(this.cpBands.getCPClass(desc));\n-        this.bcByte.add(dimensions & 0xFF);\n+        this.bcClassRef.add(this.cpBands.getCPClass(s));\n+        this.bcByte.add(n & 0xFF);\n     }\n     \n-    public void visitTableSwitchInsn(final int min, final int max, final Label dflt, final Label[] labels) {\n+    public void visitTableSwitchInsn(final int n, final int n2, final Label label, final Label[] array) {\n         this.bcCodes.add(170);\n-        this.bcLabel.add(dflt);\n+        this.bcLabel.add(label);\n         this.bcLabelRelativeOffsets.add(this.byteCodeOffset);\n-        this.bcCaseValue.add(min);\n-        final int count = labels.length;\n-        this.bcCaseCount.add(count);\n-        for (int i = 0; i < count; ++i) {\n-            this.bcLabel.add(labels[i]);\n+        this.bcCaseValue.add(n);\n+        final int length = array.length;\n+        this.bcCaseCount.add(length);\n+        for (int i = 0; i < length; ++i) {\n+            this.bcLabel.add(array[i]);\n             this.bcLabelRelativeOffsets.add(this.byteCodeOffset);\n         }\n-        final int padding = (this.byteCodeOffset % 4 == 0) ? 0 : (4 - this.byteCodeOffset % 4);\n-        this.byteCodeOffset += padding + 12 + 4 * labels.length;\n+        this.byteCodeOffset += ((this.byteCodeOffset % 4 == 0) ? 0 : (4 - this.byteCodeOffset % 4)) + 12 + 4 * array.length;\n         this.updateRenumbering();\n     }\n     \n-    public void visitTypeInsn(final int opcode, final String type) {\n+    public void visitTypeInsn(final int n, final String currentNewClass) {\n         this.byteCodeOffset += 3;\n         this.updateRenumbering();\n-        this.bcCodes.add(opcode);\n-        this.bcClassRef.add(this.cpBands.getCPClass(type));\n-        if (opcode == 187) {\n-            this.currentNewClass = type;\n+        this.bcCodes.add(n);\n+        this.bcClassRef.add(this.cpBands.getCPClass(currentNewClass));\n+        if (n == 187) {\n+            this.currentNewClass = currentNewClass;\n         }\n     }\n     \n-    public void visitVarInsn(final int opcode, final int var) {\n-        if (var > 255) {\n+    public void visitVarInsn(final int n, final int n2) {\n+        if (n2 > 255) {\n             this.byteCodeOffset += 4;\n             this.bcCodes.add(196);\n-            this.bcCodes.add(opcode);\n-            this.bcLocal.add(var);\n+            this.bcCodes.add(n);\n+            this.bcLocal.add(n2);\n         }\n-        else if (var > 3 || opcode == 169) {\n+        else if (n2 > 3 || n == 169) {\n             this.byteCodeOffset += 2;\n-            this.bcCodes.add(opcode);\n-            this.bcLocal.add(var);\n+            this.bcCodes.add(n);\n+            this.bcLocal.add(n2);\n         }\n         else {\n             ++this.byteCodeOffset;\n-            switch (opcode) {\n+            switch (n) {\n                 case 21:\n                 case 54: {\n-                    this.bcCodes.add(opcode + 5 + var);\n+                    this.bcCodes.add(n + 5 + n2);\n                     break;\n                 }\n                 case 22:\n                 case 55: {\n-                    this.bcCodes.add(opcode + 8 + var);\n+                    this.bcCodes.add(n + 8 + n2);\n                     break;\n                 }\n                 case 23:\n                 case 56: {\n-                    this.bcCodes.add(opcode + 11 + var);\n+                    this.bcCodes.add(n + 11 + n2);\n                     break;\n                 }\n                 case 24:\n                 case 57: {\n-                    this.bcCodes.add(opcode + 14 + var);\n+                    this.bcCodes.add(n + 14 + n2);\n                     break;\n                 }\n                 case 25:\n                 case 58: {\n-                    this.bcCodes.add(opcode + 17 + var);\n+                    this.bcCodes.add(n + 17 + n2);\n                     break;\n                 }\n             }\n         }\n         this.updateRenumbering();\n     }\n }\n"}]}
