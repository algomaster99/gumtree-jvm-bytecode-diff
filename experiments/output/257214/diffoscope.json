{"diffoscope-json-version": 1, "source1": "first/AttributeDefinitionBands.class", "source2": "second/AttributeDefinitionBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,130 +20,128 @@\n     private final List<AttributeDefinitionBands.AttributeDefinition> methodAttributeLayouts;\n     private final List<AttributeDefinitionBands.AttributeDefinition> fieldAttributeLayouts;\n     private final List<AttributeDefinitionBands.AttributeDefinition> codeAttributeLayouts;\n     private final List<AttributeDefinitionBands.AttributeDefinition> attributeDefinitions;\n     private final CpBands cpBands;\n     private final Segment segment;\n     \n-    public AttributeDefinitionBands(final Segment segment, final int effort, final Attribute[] attributePrototypes) {\n-        super(effort, segment.getSegmentHeader());\n+    public AttributeDefinitionBands(final Segment segment, final int n, final Attribute[] array) {\n+        super(n, segment.getSegmentHeader());\n         this.classAttributeLayouts = new ArrayList<AttributeDefinitionBands.AttributeDefinition>();\n         this.methodAttributeLayouts = new ArrayList<AttributeDefinitionBands.AttributeDefinition>();\n         this.fieldAttributeLayouts = new ArrayList<AttributeDefinitionBands.AttributeDefinition>();\n         this.codeAttributeLayouts = new ArrayList<AttributeDefinitionBands.AttributeDefinition>();\n         this.attributeDefinitions = new ArrayList<AttributeDefinitionBands.AttributeDefinition>();\n         this.cpBands = segment.getCpBands();\n         this.segment = segment;\n-        final Map<String, String> classLayouts = new HashMap<String, String>();\n-        final Map<String, String> methodLayouts = new HashMap<String, String>();\n-        final Map<String, String> fieldLayouts = new HashMap<String, String>();\n-        final Map<String, String> codeLayouts = new HashMap<String, String>();\n-        for (final Attribute attributePrototype : attributePrototypes) {\n-            final NewAttribute newAttribute = (NewAttribute)attributePrototype;\n+        final HashMap hashMap = new HashMap();\n+        final HashMap hashMap2 = new HashMap();\n+        final HashMap hashMap3 = new HashMap();\n+        final HashMap hashMap4 = new HashMap();\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            final NewAttribute newAttribute = (NewAttribute)array[i];\n             if (!(newAttribute instanceof NewAttribute.ErrorAttribute) && !(newAttribute instanceof NewAttribute.PassAttribute) && !(newAttribute instanceof NewAttribute.StripAttribute)) {\n                 if (newAttribute.isContextClass()) {\n-                    classLayouts.put(newAttribute.type, newAttribute.getLayout());\n+                    hashMap.put(newAttribute.type, newAttribute.getLayout());\n                 }\n                 if (newAttribute.isContextMethod()) {\n-                    methodLayouts.put(newAttribute.type, newAttribute.getLayout());\n+                    hashMap2.put(newAttribute.type, newAttribute.getLayout());\n                 }\n                 if (newAttribute.isContextField()) {\n-                    fieldLayouts.put(newAttribute.type, newAttribute.getLayout());\n+                    hashMap3.put(newAttribute.type, newAttribute.getLayout());\n                 }\n                 if (newAttribute.isContextCode()) {\n-                    codeLayouts.put(newAttribute.type, newAttribute.getLayout());\n+                    hashMap4.put(newAttribute.type, newAttribute.getLayout());\n                 }\n             }\n         }\n-        if (classLayouts.size() > 7) {\n+        if (hashMap.size() > 7) {\n             this.segmentHeader.setHave_class_flags_hi(true);\n         }\n-        if (methodLayouts.size() > 6) {\n+        if (hashMap2.size() > 6) {\n             this.segmentHeader.setHave_method_flags_hi(true);\n         }\n-        if (fieldLayouts.size() > 10) {\n+        if (hashMap3.size() > 10) {\n             this.segmentHeader.setHave_field_flags_hi(true);\n         }\n-        if (codeLayouts.size() > 15) {\n+        if (hashMap4.size() > 15) {\n             this.segmentHeader.setHave_code_flags_hi(true);\n         }\n-        int[] availableClassIndices = { 25, 26, 27, 28, 29, 30, 31 };\n-        if (classLayouts.size() > 7) {\n-            availableClassIndices = this.addHighIndices(availableClassIndices);\n+        int[] addHighIndices = { 25, 26, 27, 28, 29, 30, 31 };\n+        if (hashMap.size() > 7) {\n+            addHighIndices = this.addHighIndices(addHighIndices);\n         }\n-        this.addAttributeDefinitions(classLayouts, availableClassIndices, 0);\n-        int[] availableMethodIndices = { 26, 27, 28, 29, 30, 31 };\n+        this.addAttributeDefinitions(hashMap, addHighIndices, 0);\n+        int[] addHighIndices2 = { 26, 27, 28, 29, 30, 31 };\n         if (this.methodAttributeLayouts.size() > 6) {\n-            availableMethodIndices = this.addHighIndices(availableMethodIndices);\n+            addHighIndices2 = this.addHighIndices(addHighIndices2);\n         }\n-        this.addAttributeDefinitions(methodLayouts, availableMethodIndices, 2);\n-        int[] availableFieldIndices = { 18, 23, 24, 25, 26, 27, 28, 29, 30, 31 };\n+        this.addAttributeDefinitions(hashMap2, addHighIndices2, 2);\n+        int[] addHighIndices3 = { 18, 23, 24, 25, 26, 27, 28, 29, 30, 31 };\n         if (this.fieldAttributeLayouts.size() > 10) {\n-            availableFieldIndices = this.addHighIndices(availableFieldIndices);\n+            addHighIndices3 = this.addHighIndices(addHighIndices3);\n         }\n-        this.addAttributeDefinitions(fieldLayouts, availableFieldIndices, 1);\n-        int[] availableCodeIndices = { 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };\n+        this.addAttributeDefinitions(hashMap3, addHighIndices3, 1);\n+        int[] addHighIndices4 = { 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };\n         if (this.codeAttributeLayouts.size() > 15) {\n-            availableCodeIndices = this.addHighIndices(availableCodeIndices);\n+            addHighIndices4 = this.addHighIndices(addHighIndices4);\n         }\n-        this.addAttributeDefinitions(codeLayouts, availableCodeIndices, 3);\n+        this.addAttributeDefinitions(hashMap4, addHighIndices4, 3);\n     }\n     \n-    private void addAttributeDefinitions(final Map<String, String> layoutMap, final int[] availableIndices, final int contextType) {\n-        final int i = 0;\n-        layoutMap.forEach((name, layout) -> {\n-            final int index = availableIndices[0];\n-            final AttributeDefinitionBands.AttributeDefinition definition = new AttributeDefinitionBands.AttributeDefinition(index, contextType, this.cpBands.getCPUtf8(name), this.cpBands.getCPUtf8(layout));\n-            this.attributeDefinitions.add(definition);\n-            switch (contextType) {\n+    private void addAttributeDefinitions(final Map<String, String> map, final int[] array, final int n) {\n+        map.forEach((s, s2) -> {\n+            final AttributeDefinitionBands.AttributeDefinition attributeDefinition = new AttributeDefinitionBands.AttributeDefinition(array2[0], n2, this.cpBands.getCPUtf8(s), this.cpBands.getCPUtf8(s2));\n+            this.attributeDefinitions.add(attributeDefinition);\n+            switch (n2) {\n                 case 0: {\n-                    this.classAttributeLayouts.add(definition);\n+                    this.classAttributeLayouts.add(attributeDefinition);\n                     break;\n                 }\n                 case 2: {\n-                    this.methodAttributeLayouts.add(definition);\n+                    this.methodAttributeLayouts.add(attributeDefinition);\n                     break;\n                 }\n                 case 1: {\n-                    this.fieldAttributeLayouts.add(definition);\n+                    this.fieldAttributeLayouts.add(attributeDefinition);\n                     break;\n                 }\n                 case 3: {\n-                    this.codeAttributeLayouts.add(definition);\n+                    this.codeAttributeLayouts.add(attributeDefinition);\n                     break;\n                 }\n             }\n         });\n     }\n     \n-    private int[] addHighIndices(final int[] availableIndices) {\n-        final int[] temp = Arrays.copyOf(availableIndices, availableIndices.length + 32);\n-        int j = 32;\n-        for (int i = availableIndices.length; i < temp.length; ++i) {\n-            temp[i] = j;\n-            ++j;\n+    private int[] addHighIndices(final int[] original) {\n+        final int[] copy = Arrays.copyOf(original, original.length + 32);\n+        int n = 32;\n+        for (int i = original.length; i < copy.length; ++i) {\n+            copy[i] = n;\n+            ++n;\n         }\n-        return temp;\n+        return copy;\n     }\n     \n     private void addSyntheticDefinitions() {\n-        final boolean anySytheticClasses = this.segment.getClassBands().isAnySyntheticClasses();\n+        final boolean anySyntheticClasses = this.segment.getClassBands().isAnySyntheticClasses();\n         final boolean anySyntheticMethods = this.segment.getClassBands().isAnySyntheticMethods();\n         final boolean anySyntheticFields = this.segment.getClassBands().isAnySyntheticFields();\n-        if (anySytheticClasses || anySyntheticMethods || anySyntheticFields) {\n-            final CPUTF8 syntheticUTF = this.cpBands.getCPUtf8(\"Synthetic\");\n-            final CPUTF8 emptyUTF = this.cpBands.getCPUtf8(\"\");\n-            if (anySytheticClasses) {\n-                this.attributeDefinitions.add(new AttributeDefinitionBands.AttributeDefinition(12, 0, syntheticUTF, emptyUTF));\n+        if (anySyntheticClasses || anySyntheticMethods || anySyntheticFields) {\n+            final CPUTF8 cpUtf8 = this.cpBands.getCPUtf8(\"Synthetic\");\n+            final CPUTF8 cpUtf9 = this.cpBands.getCPUtf8(\"\");\n+            if (anySyntheticClasses) {\n+                this.attributeDefinitions.add(new AttributeDefinitionBands.AttributeDefinition(12, 0, cpUtf8, cpUtf9));\n             }\n             if (anySyntheticMethods) {\n-                this.attributeDefinitions.add(new AttributeDefinitionBands.AttributeDefinition(12, 2, syntheticUTF, emptyUTF));\n+                this.attributeDefinitions.add(new AttributeDefinitionBands.AttributeDefinition(12, 2, cpUtf8, cpUtf9));\n             }\n             if (anySyntheticFields) {\n-                this.attributeDefinitions.add(new AttributeDefinitionBands.AttributeDefinition(12, 1, syntheticUTF, emptyUTF));\n+                this.attributeDefinitions.add(new AttributeDefinitionBands.AttributeDefinition(12, 1, cpUtf8, cpUtf9));\n             }\n         }\n     }\n     \n     public void finaliseBands() {\n         this.addSyntheticDefinitions();\n         this.segmentHeader.setAttribute_definition_count(this.attributeDefinitions.size());\n@@ -161,29 +159,29 @@\n         return this.fieldAttributeLayouts;\n     }\n     \n     public List<AttributeDefinitionBands.AttributeDefinition> getMethodAttributeLayouts() {\n         return this.methodAttributeLayouts;\n     }\n     \n-    public void pack(final OutputStream out) throws IOException, Pack200Exception {\n+    public void pack(final OutputStream outputStream) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing attribute definition bands...\");\n-        final int[] attributeDefinitionHeader = new int[this.attributeDefinitions.size()];\n-        final int[] attributeDefinitionName = new int[this.attributeDefinitions.size()];\n-        final int[] attributeDefinitionLayout = new int[this.attributeDefinitions.size()];\n-        for (int i = 0; i < attributeDefinitionLayout.length; ++i) {\n-            final AttributeDefinitionBands.AttributeDefinition def = (AttributeDefinitionBands.AttributeDefinition)this.attributeDefinitions.get(i);\n-            attributeDefinitionHeader[i] = (def.contextType | def.index + 1 << 2);\n-            attributeDefinitionName[i] = def.name.getIndex();\n-            attributeDefinitionLayout[i] = def.layout.getIndex();\n-        }\n-        byte[] encodedBand = this.encodeBandInt(\"attributeDefinitionHeader\", attributeDefinitionHeader, Codec.BYTE1);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from attributeDefinitionHeader[\" + attributeDefinitionHeader.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"attributeDefinitionName\", attributeDefinitionName, Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from attributeDefinitionName[\" + attributeDefinitionName.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"attributeDefinitionLayout\", attributeDefinitionLayout, Codec.UNSIGNED5);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from attributeDefinitionLayout[\" + attributeDefinitionLayout.length + \"]\");\n+        final int[] array = new int[this.attributeDefinitions.size()];\n+        final int[] array2 = new int[this.attributeDefinitions.size()];\n+        final int[] array3 = new int[this.attributeDefinitions.size()];\n+        for (int i = 0; i < array3.length; ++i) {\n+            final AttributeDefinitionBands.AttributeDefinition attributeDefinition = (AttributeDefinitionBands.AttributeDefinition)this.attributeDefinitions.get(i);\n+            array[i] = (attributeDefinition.contextType | attributeDefinition.index + 1 << 2);\n+            array2[i] = attributeDefinition.name.getIndex();\n+            array3[i] = attributeDefinition.layout.getIndex();\n+        }\n+        final byte[] encodeBandInt = this.encodeBandInt(\"attributeDefinitionHeader\", array, Codec.BYTE1);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from attributeDefinitionHeader[\" + array.length + \"]\");\n+        final byte[] encodeBandInt2 = this.encodeBandInt(\"attributeDefinitionName\", array2, Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt2);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt2.length + \" bytes from attributeDefinitionName[\" + array2.length + \"]\");\n+        final byte[] encodeBandInt3 = this.encodeBandInt(\"attributeDefinitionLayout\", array3, Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt3);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt3.length + \" bytes from attributeDefinitionLayout[\" + array3.length + \"]\");\n     }\n }\n"}]}
