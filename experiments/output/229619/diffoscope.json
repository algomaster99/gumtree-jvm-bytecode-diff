{"diffoscope-json-version": 1, "source1": "first/StreamCompressor.class", "source2": "second/StreamCompressor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,47 +19,46 @@\n     private long writtenToOutputStreamForLastEntry;\n     private long sourcePayloadLength;\n     private long totalWrittenToOutputStream;\n     private static final int BUFFER_SIZE = 4096;\n     private final byte[] outputBuffer;\n     private final byte[] readerBuf;\n     \n-    StreamCompressor(final Deflater deflater) {\n+    StreamCompressor(final Deflater def) {\n         this.crc = new CRC32();\n         this.writtenToOutputStreamForLastEntry = 0L;\n         this.sourcePayloadLength = 0L;\n         this.totalWrittenToOutputStream = 0L;\n         this.outputBuffer = new byte[4096];\n         this.readerBuf = new byte[4096];\n-        this.def = deflater;\n+        this.def = def;\n     }\n     \n-    static StreamCompressor create(final OutputStream os, final Deflater deflater) {\n-        return (StreamCompressor)new StreamCompressor.OutputStreamCompressor(deflater, os);\n+    static StreamCompressor create(final OutputStream outputStream, final Deflater deflater) {\n+        return (StreamCompressor)new StreamCompressor.OutputStreamCompressor(deflater, outputStream);\n     }\n     \n-    static StreamCompressor create(final OutputStream os) {\n-        return create(os, new Deflater(-1, true));\n+    static StreamCompressor create(final OutputStream outputStream) {\n+        return create(outputStream, new Deflater(-1, true));\n     }\n     \n-    static StreamCompressor create(final DataOutput os, final Deflater deflater) {\n-        return (StreamCompressor)new StreamCompressor.DataOutputCompressor(deflater, os);\n+    static StreamCompressor create(final DataOutput dataOutput, final Deflater deflater) {\n+        return (StreamCompressor)new StreamCompressor.DataOutputCompressor(deflater, dataOutput);\n     }\n     \n-    static StreamCompressor create(final SeekableByteChannel os, final Deflater deflater) {\n-        return (StreamCompressor)new StreamCompressor.SeekableByteChannelCompressor(deflater, os);\n+    static StreamCompressor create(final SeekableByteChannel seekableByteChannel, final Deflater deflater) {\n+        return (StreamCompressor)new StreamCompressor.SeekableByteChannelCompressor(deflater, seekableByteChannel);\n     }\n     \n-    public static StreamCompressor create(final int compressionLevel, final ScatterGatherBackingStore bs) {\n-        final Deflater deflater = new Deflater(compressionLevel, true);\n-        return (StreamCompressor)new StreamCompressor.ScatterGatherBackingStoreCompressor(deflater, bs);\n+    public static StreamCompressor create(final int level, final ScatterGatherBackingStore scatterGatherBackingStore) {\n+        return (StreamCompressor)new StreamCompressor.ScatterGatherBackingStoreCompressor(new Deflater(level, true), scatterGatherBackingStore);\n     }\n     \n-    public static StreamCompressor create(final ScatterGatherBackingStore bs) {\n-        return create(-1, bs);\n+    public static StreamCompressor create(final ScatterGatherBackingStore scatterGatherBackingStore) {\n+        return create(-1, scatterGatherBackingStore);\n     }\n     \n     public long getCrc32() {\n         return this.crc.getValue();\n     }\n     \n     public long getBytesRead() {\n@@ -70,36 +69,36 @@\n         return this.writtenToOutputStreamForLastEntry;\n     }\n     \n     public long getTotalBytesWritten() {\n         return this.totalWrittenToOutputStream;\n     }\n     \n-    public void deflate(final InputStream source, final int method) throws IOException {\n+    public void deflate(final InputStream inputStream, final int n) throws IOException {\n         this.reset();\n-        int length;\n-        while ((length = source.read(this.readerBuf, 0, this.readerBuf.length)) >= 0) {\n-            this.write(this.readerBuf, 0, length, method);\n+        int read;\n+        while ((read = inputStream.read(this.readerBuf, 0, this.readerBuf.length)) >= 0) {\n+            this.write(this.readerBuf, 0, read, n);\n         }\n-        if (method == 8) {\n+        if (n == 8) {\n             this.flushDeflater();\n         }\n     }\n     \n-    long write(final byte[] b, final int offset, final int length, final int method) throws IOException {\n-        final long current = this.writtenToOutputStreamForLastEntry;\n-        this.crc.update(b, offset, length);\n-        if (method == 8) {\n-            this.writeDeflated(b, offset, length);\n+    long write(final byte[] b, final int off, final int len, final int n) throws IOException {\n+        final long writtenToOutputStreamForLastEntry = this.writtenToOutputStreamForLastEntry;\n+        this.crc.update(b, off, len);\n+        if (n == 8) {\n+            this.writeDeflated(b, off, len);\n         }\n         else {\n-            this.writeCounted(b, offset, length);\n+            this.writeCounted(b, off, len);\n         }\n-        this.sourcePayloadLength += length;\n-        return this.writtenToOutputStreamForLastEntry - current;\n+        this.sourcePayloadLength += len;\n+        return this.writtenToOutputStreamForLastEntry - writtenToOutputStreamForLastEntry;\n     }\n     \n     void reset() {\n         this.crc.reset();\n         this.def.reset();\n         this.sourcePayloadLength = 0L;\n         this.writtenToOutputStreamForLastEntry = 0L;\n@@ -113,53 +112,53 @@\n     void flushDeflater() throws IOException {\n         this.def.finish();\n         while (!this.def.finished()) {\n             this.deflate();\n         }\n     }\n     \n-    private void writeDeflated(final byte[] b, final int offset, final int length) throws IOException {\n-        if (length > 0 && !this.def.finished()) {\n-            if (length <= 8192) {\n-                this.def.setInput(b, offset, length);\n+    private void writeDeflated(final byte[] input, final int off, final int len) throws IOException {\n+        if (len > 0 && !this.def.finished()) {\n+            if (len <= 8192) {\n+                this.def.setInput(input, off, len);\n                 this.deflateUntilInputIsNeeded();\n             }\n             else {\n-                final int fullblocks = length / 8192;\n-                for (int i = 0; i < fullblocks; ++i) {\n-                    this.def.setInput(b, offset + i * 8192, 8192);\n+                final int n = len / 8192;\n+                for (int i = 0; i < n; ++i) {\n+                    this.def.setInput(input, off + i * 8192, 8192);\n                     this.deflateUntilInputIsNeeded();\n                 }\n-                final int done = fullblocks * 8192;\n-                if (done < length) {\n-                    this.def.setInput(b, offset + done, length - done);\n+                final int n2 = n * 8192;\n+                if (n2 < len) {\n+                    this.def.setInput(input, off + n2, len - n2);\n                     this.deflateUntilInputIsNeeded();\n                 }\n             }\n         }\n     }\n     \n     private void deflateUntilInputIsNeeded() throws IOException {\n         while (!this.def.needsInput()) {\n             this.deflate();\n         }\n     }\n     \n     void deflate() throws IOException {\n-        final int len = this.def.deflate(this.outputBuffer, 0, this.outputBuffer.length);\n-        if (len > 0) {\n-            this.writeCounted(this.outputBuffer, 0, len);\n+        final int deflate = this.def.deflate(this.outputBuffer, 0, this.outputBuffer.length);\n+        if (deflate > 0) {\n+            this.writeCounted(this.outputBuffer, 0, deflate);\n         }\n     }\n     \n-    public void writeCounted(final byte[] data) throws IOException {\n-        this.writeCounted(data, 0, data.length);\n+    public void writeCounted(final byte[] array) throws IOException {\n+        this.writeCounted(array, 0, array.length);\n     }\n     \n-    public void writeCounted(final byte[] data, final int offset, final int length) throws IOException {\n-        this.writeOut(data, offset, length);\n-        this.writtenToOutputStreamForLastEntry += length;\n-        this.totalWrittenToOutputStream += length;\n+    public void writeCounted(final byte[] array, final int n, final int n2) throws IOException {\n+        this.writeOut(array, n, n2);\n+        this.writtenToOutputStreamForLastEntry += n2;\n+        this.totalWrittenToOutputStream += n2;\n     }\n     \n     protected abstract void writeOut(final byte[] p0, final int p1, final int p2) throws IOException;\n }\n"}]}
