{"diffoscope-json-version": 1, "source1": "first/Base32.class", "source2": "second/Base32.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,73 +1,73 @@\n-  SHA-256 checksum 68d0ff1f4ca763a88a6ad553e344b0f8ded32442bf3d5edb063d8f4517dab75a\n+  SHA-256 checksum 822c5f491ad4b19d7dac4eb753ce71b97d8fc63d1277a559571f0e5248e7d15e\n   Compiled from \"Base32.java\"\n public class org.apache.commons.codec.binary.Base32 extends org.apache.commons.codec.binary.BaseNCodec\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #9                          // org/apache/commons/codec/binary/Base32\n   super_class: #2                         // org/apache/commons/codec/binary/BaseNCodec\n   interfaces: 0, fields: 17, methods: 15, attributes: 2\n Constant pool:\n-    #1 = Methodref          #9.#142       // org/apache/commons/codec/binary/Base32.\"<init>\":(Z)V\n-    #2 = Class              #143          // org/apache/commons/codec/binary/BaseNCodec\n-    #3 = Methodref          #9.#144       // org/apache/commons/codec/binary/Base32.\"<init>\":(I[BZB)V\n-    #4 = Methodref          #9.#145       // org/apache/commons/codec/binary/Base32.\"<init>\":(ZB)V\n-    #5 = Fieldref           #9.#146       // org/apache/commons/codec/binary/Base32.CHUNK_SEPARATOR:[B\n-    #6 = Methodref          #9.#147       // org/apache/commons/codec/binary/Base32.\"<init>\":(I[B)V\n-    #7 = Fieldref           #9.#148       // org/apache/commons/codec/binary/Base32.DECODING_POLICY_DEFAULT:Lorg/apache/commons/codec/CodecPolicy;\n-    #8 = Methodref          #9.#149       // org/apache/commons/codec/binary/Base32.\"<init>\":(I[BZBLorg/apache/commons/codec/CodecPolicy;)V\n-    #9 = Class              #150          // org/apache/commons/codec/binary/Base32\n-   #10 = Methodref          #2.#151       // org/apache/commons/codec/binary/BaseNCodec.\"<init>\":(IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n-   #11 = Fieldref           #9.#152       // org/apache/commons/codec/binary/Base32.HEX_ENCODE_TABLE:[B\n-   #12 = Fieldref           #9.#153       // org/apache/commons/codec/binary/Base32.encodeTable:[B\n-   #13 = Fieldref           #9.#154       // org/apache/commons/codec/binary/Base32.HEX_DECODE_TABLE:[B\n-   #14 = Fieldref           #9.#155       // org/apache/commons/codec/binary/Base32.decodeTable:[B\n-   #15 = Fieldref           #9.#156       // org/apache/commons/codec/binary/Base32.ENCODE_TABLE:[B\n-   #16 = Fieldref           #9.#157       // org/apache/commons/codec/binary/Base32.DECODE_TABLE:[B\n-   #17 = Class              #158          // java/lang/IllegalArgumentException\n-   #18 = Class              #159          // java/lang/StringBuilder\n-   #19 = Methodref          #18.#160      // java/lang/StringBuilder.\"<init>\":()V\n-   #20 = String             #161          // lineLength\n-   #21 = Methodref          #18.#162      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #22 = Methodref          #18.#163      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #23 = String             #164          //  > 0, but lineSeparator is null\n-   #24 = Methodref          #18.#165      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #25 = Methodref          #17.#166      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #26 = Methodref          #9.#167       // org/apache/commons/codec/binary/Base32.containsAlphabetOrPad:([B)Z\n-   #27 = Methodref          #168.#169     // org/apache/commons/codec/binary/StringUtils.newStringUtf8:([B)Ljava/lang/String;\n-   #28 = String             #170          // lineSeparator must not contain Base32 characters: [\n-   #29 = String             #171          // ]\n-   #30 = Fieldref           #9.#172       // org/apache/commons/codec/binary/Base32.encodeSize:I\n-   #31 = Fieldref           #9.#173       // org/apache/commons/codec/binary/Base32.lineSeparator:[B\n-   #32 = Methodref          #174.#175     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #33 = Fieldref           #9.#176       // org/apache/commons/codec/binary/Base32.decodeSize:I\n-   #34 = Methodref          #9.#177       // org/apache/commons/codec/binary/Base32.isInAlphabet:(B)Z\n-   #35 = Methodref          #9.#178       // org/apache/commons/codec/binary/Base32.isWhiteSpace:(B)Z\n-   #36 = String             #179          // pad must not be in alphabet or whitespace\n-   #37 = Fieldref           #117.#180     // org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n-   #38 = Fieldref           #9.#181       // org/apache/commons/codec/binary/Base32.pad:B\n-   #39 = Methodref          #9.#182       // org/apache/commons/codec/binary/Base32.ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-   #40 = Fieldref           #117.#183     // org/apache/commons/codec/binary/BaseNCodec$Context.modulus:I\n-   #41 = Fieldref           #117.#184     // org/apache/commons/codec/binary/BaseNCodec$Context.lbitWorkArea:J\n-   #42 = Fieldref           #117.#185     // org/apache/commons/codec/binary/BaseNCodec$Context.pos:I\n+    #1 = Methodref          #9.#141       // org/apache/commons/codec/binary/Base32.\"<init>\":(Z)V\n+    #2 = Class              #142          // org/apache/commons/codec/binary/BaseNCodec\n+    #3 = Methodref          #9.#143       // org/apache/commons/codec/binary/Base32.\"<init>\":(I[BZB)V\n+    #4 = Methodref          #9.#144       // org/apache/commons/codec/binary/Base32.\"<init>\":(ZB)V\n+    #5 = Fieldref           #9.#145       // org/apache/commons/codec/binary/Base32.CHUNK_SEPARATOR:[B\n+    #6 = Methodref          #9.#146       // org/apache/commons/codec/binary/Base32.\"<init>\":(I[B)V\n+    #7 = Fieldref           #9.#147       // org/apache/commons/codec/binary/Base32.DECODING_POLICY_DEFAULT:Lorg/apache/commons/codec/CodecPolicy;\n+    #8 = Methodref          #9.#148       // org/apache/commons/codec/binary/Base32.\"<init>\":(I[BZBLorg/apache/commons/codec/CodecPolicy;)V\n+    #9 = Class              #149          // org/apache/commons/codec/binary/Base32\n+   #10 = Methodref          #2.#150       // org/apache/commons/codec/binary/BaseNCodec.\"<init>\":(IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n+   #11 = Fieldref           #9.#151       // org/apache/commons/codec/binary/Base32.HEX_ENCODE_TABLE:[B\n+   #12 = Fieldref           #9.#152       // org/apache/commons/codec/binary/Base32.encodeTable:[B\n+   #13 = Fieldref           #9.#153       // org/apache/commons/codec/binary/Base32.HEX_DECODE_TABLE:[B\n+   #14 = Fieldref           #9.#154       // org/apache/commons/codec/binary/Base32.decodeTable:[B\n+   #15 = Fieldref           #9.#155       // org/apache/commons/codec/binary/Base32.ENCODE_TABLE:[B\n+   #16 = Fieldref           #9.#156       // org/apache/commons/codec/binary/Base32.DECODE_TABLE:[B\n+   #17 = Class              #157          // java/lang/IllegalArgumentException\n+   #18 = Class              #158          // java/lang/StringBuilder\n+   #19 = Methodref          #18.#159      // java/lang/StringBuilder.\"<init>\":()V\n+   #20 = String             #160          // lineLength\n+   #21 = Methodref          #18.#161      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #22 = Methodref          #18.#162      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #23 = String             #163          //  > 0, but lineSeparator is null\n+   #24 = Methodref          #18.#164      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #25 = Methodref          #17.#165      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #26 = Methodref          #9.#166       // org/apache/commons/codec/binary/Base32.containsAlphabetOrPad:([B)Z\n+   #27 = Methodref          #167.#168     // org/apache/commons/codec/binary/StringUtils.newStringUtf8:([B)Ljava/lang/String;\n+   #28 = String             #169          // lineSeparator must not contain Base32 characters: [\n+   #29 = String             #170          // ]\n+   #30 = Fieldref           #9.#171       // org/apache/commons/codec/binary/Base32.encodeSize:I\n+   #31 = Fieldref           #9.#172       // org/apache/commons/codec/binary/Base32.lineSeparator:[B\n+   #32 = Methodref          #173.#174     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #33 = Fieldref           #9.#175       // org/apache/commons/codec/binary/Base32.decodeSize:I\n+   #34 = Methodref          #9.#176       // org/apache/commons/codec/binary/Base32.isInAlphabet:(B)Z\n+   #35 = Methodref          #9.#177       // org/apache/commons/codec/binary/Base32.isWhiteSpace:(B)Z\n+   #36 = String             #178          // pad must not be in alphabet or whitespace\n+   #37 = Fieldref           #116.#179     // org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n+   #38 = Fieldref           #9.#180       // org/apache/commons/codec/binary/Base32.pad:B\n+   #39 = Methodref          #9.#181       // org/apache/commons/codec/binary/Base32.ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+   #40 = Fieldref           #116.#182     // org/apache/commons/codec/binary/BaseNCodec$Context.modulus:I\n+   #41 = Fieldref           #116.#183     // org/apache/commons/codec/binary/BaseNCodec$Context.lbitWorkArea:J\n+   #42 = Fieldref           #116.#184     // org/apache/commons/codec/binary/BaseNCodec$Context.pos:I\n    #43 = Long               255l\n-   #45 = Methodref          #9.#186       // org/apache/commons/codec/binary/Base32.validateTrailingCharacters:()V\n+   #45 = Methodref          #9.#185       // org/apache/commons/codec/binary/Base32.validateTrailingCharacters:()V\n    #46 = Long               3l\n-   #48 = Methodref          #9.#187       // org/apache/commons/codec/binary/Base32.validateCharacter:(JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #48 = Methodref          #9.#186       // org/apache/commons/codec/binary/Base32.validateCharacter:(JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n    #49 = Long               15l\n    #51 = Long               7l\n-   #53 = Class              #188          // java/lang/IllegalStateException\n-   #54 = String             #189          // Impossible modulus\n-   #55 = Methodref          #53.#166      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #56 = Fieldref           #9.#190       // org/apache/commons/codec/binary/Base32.lineLength:I\n-   #57 = Fieldref           #117.#191     // org/apache/commons/codec/binary/BaseNCodec$Context.currentLinePos:I\n-   #58 = Methodref          #9.#192       // org/apache/commons/codec/binary/Base32.isStrictDecoding:()Z\n-   #59 = String             #193          // Strict decoding: Last encoded character (before the paddings if any) is a valid base 32 alphabet but not a possible encoding. Expected the discarded bits from the character to be zero.\n-   #60 = String             #194          // Strict decoding: Last encoded character(s) (before the paddings if any) are valid base 32 alphabet but not a possible encoding. Decoding requires either 2, 4, 5, or 7 trailing 5-bit characters to create bytes.\n+   #53 = Class              #187          // java/lang/IllegalStateException\n+   #54 = String             #188          // Impossible modulus\n+   #55 = Methodref          #53.#165      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #56 = Fieldref           #9.#189       // org/apache/commons/codec/binary/Base32.lineLength:I\n+   #57 = Fieldref           #116.#190     // org/apache/commons/codec/binary/BaseNCodec$Context.currentLinePos:I\n+   #58 = Methodref          #9.#191       // org/apache/commons/codec/binary/Base32.isStrictDecoding:()Z\n+   #59 = String             #192          // Strict decoding: Last encoded character (before the paddings if any) is a valid base 32 alphabet but not a possible encoding. Expected the discarded bits from the character to be zero.\n+   #60 = String             #193          // Strict decoding: Last encoded character(s) (before the paddings if any) are valid base 32 alphabet but not a possible encoding. Decoding requires either 2, 4, 5, or 7 trailing 5-bit characters to create bytes.\n    #61 = Utf8               BITS_PER_ENCODED_BYTE\n    #62 = Utf8               I\n    #63 = Utf8               ConstantValue\n    #64 = Integer            5\n    #65 = Utf8               BYTES_PER_ENCODED_BLOCK\n    #66 = Integer            8\n    #67 = Utf8               BYTES_PER_UNENCODED_BLOCK\n@@ -112,124 +112,123 @@\n   #107 = Utf8               (I[BZBLorg/apache/commons/codec/CodecPolicy;)V\n   #108 = Utf8               sep\n   #109 = Utf8               Ljava/lang/String;\n   #110 = Utf8               decodingPolicy\n   #111 = Utf8               Lorg/apache/commons/codec/CodecPolicy;\n   #112 = Utf8               StackMapTable\n   #113 = Class              #69           // \"[B\"\n-  #114 = Class              #195          // org/apache/commons/codec/CodecPolicy\n-  #115 = Class              #150          // org/apache/commons/codec/binary/Base32\n-  #116 = Utf8               decode\n-  #117 = Class              #196          // org/apache/commons/codec/binary/BaseNCodec$Context\n-  #118 = Utf8               Context\n-  #119 = Utf8               InnerClasses\n-  #120 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #121 = Utf8               result\n-  #122 = Utf8               b\n-  #123 = Utf8               buffer\n-  #124 = Utf8               i\n-  #125 = Utf8               input\n-  #126 = Utf8               inPos\n-  #127 = Utf8               inAvail\n-  #128 = Utf8               context\n-  #129 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-  #130 = Utf8               encode\n-  #131 = Utf8               savedPos\n-  #132 = Utf8               isInAlphabet\n-  #133 = Utf8               (B)Z\n-  #134 = Utf8               octet\n-  #135 = Utf8               validateCharacter\n-  #136 = Utf8               (JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #137 = Utf8               emptyBitsMask\n-  #138 = Utf8               validateTrailingCharacters\n-  #139 = Utf8               <clinit>\n-  #140 = Utf8               SourceFile\n-  #141 = Utf8               Base32.java\n-  #142 = NameAndType        #87:#94       // \"<init>\":(Z)V\n-  #143 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n-  #144 = NameAndType        #87:#106      // \"<init>\":(I[BZB)V\n-  #145 = NameAndType        #87:#97       // \"<init>\":(ZB)V\n-  #146 = NameAndType        #197:#69      // CHUNK_SEPARATOR:[B\n-  #147 = NameAndType        #87:#104      // \"<init>\":(I[B)V\n-  #148 = NameAndType        #198:#111     // DECODING_POLICY_DEFAULT:Lorg/apache/commons/codec/CodecPolicy;\n-  #149 = NameAndType        #87:#107      // \"<init>\":(I[BZBLorg/apache/commons/codec/CodecPolicy;)V\n-  #150 = Utf8               org/apache/commons/codec/binary/Base32\n-  #151 = NameAndType        #87:#199      // \"<init>\":(IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n-  #152 = NameAndType        #72:#69       // HEX_ENCODE_TABLE:[B\n-  #153 = NameAndType        #85:#69       // encodeTable:[B\n-  #154 = NameAndType        #71:#69       // HEX_DECODE_TABLE:[B\n-  #155 = NameAndType        #83:#69       // decodeTable:[B\n-  #156 = NameAndType        #70:#69       // ENCODE_TABLE:[B\n-  #157 = NameAndType        #68:#69       // DECODE_TABLE:[B\n-  #158 = Utf8               java/lang/IllegalArgumentException\n-  #159 = Utf8               java/lang/StringBuilder\n-  #160 = NameAndType        #87:#88       // \"<init>\":()V\n-  #161 = Utf8               lineLength\n-  #162 = NameAndType        #200:#201     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #163 = NameAndType        #200:#202     // append:(I)Ljava/lang/StringBuilder;\n-  #164 = Utf8                > 0, but lineSeparator is null\n-  #165 = NameAndType        #203:#204     // toString:()Ljava/lang/String;\n-  #166 = NameAndType        #87:#205      // \"<init>\":(Ljava/lang/String;)V\n-  #167 = NameAndType        #206:#207     // containsAlphabetOrPad:([B)Z\n-  #168 = Class              #208          // org/apache/commons/codec/binary/StringUtils\n-  #169 = NameAndType        #209:#210     // newStringUtf8:([B)Ljava/lang/String;\n-  #170 = Utf8               lineSeparator must not contain Base32 characters: [\n-  #171 = Utf8               ]\n-  #172 = NameAndType        #84:#62       // encodeSize:I\n-  #173 = NameAndType        #86:#69       // lineSeparator:[B\n-  #174 = Class              #211          // java/lang/System\n-  #175 = NameAndType        #212:#213     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #176 = NameAndType        #82:#62       // decodeSize:I\n-  #177 = NameAndType        #132:#133     // isInAlphabet:(B)Z\n-  #178 = NameAndType        #214:#133     // isWhiteSpace:(B)Z\n-  #179 = Utf8               pad must not be in alphabet or whitespace\n-  #180 = NameAndType        #215:#96      // eof:Z\n-  #181 = NameAndType        #101:#99      // pad:B\n-  #182 = NameAndType        #216:#217     // ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-  #183 = NameAndType        #218:#62      // modulus:I\n-  #184 = NameAndType        #219:#76      // lbitWorkArea:J\n-  #185 = NameAndType        #220:#62      // pos:I\n-  #186 = NameAndType        #138:#88      // validateTrailingCharacters:()V\n-  #187 = NameAndType        #135:#136     // validateCharacter:(JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #188 = Utf8               java/lang/IllegalStateException\n-  #189 = Utf8               Impossible modulus\n-  #190 = NameAndType        #103:#62      // lineLength:I\n-  #191 = NameAndType        #221:#62      // currentLinePos:I\n-  #192 = NameAndType        #222:#223     // isStrictDecoding:()Z\n-  #193 = Utf8               Strict decoding: Last encoded character (before the paddings if any) is a valid base 32 alphabet but not a possible encoding. Expected the discarded bits from the character to be zero.\n-  #194 = Utf8               Strict decoding: Last encoded character(s) (before the paddings if any) are valid base 32 alphabet but not a possible encoding. Decoding requires either 2, 4, 5, or 7 trailing 5-bit characters to create bytes.\n-  #195 = Utf8               org/apache/commons/codec/CodecPolicy\n-  #196 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n-  #197 = Utf8               CHUNK_SEPARATOR\n-  #198 = Utf8               DECODING_POLICY_DEFAULT\n-  #199 = Utf8               (IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n-  #200 = Utf8               append\n-  #201 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #202 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #203 = Utf8               toString\n-  #204 = Utf8               ()Ljava/lang/String;\n-  #205 = Utf8               (Ljava/lang/String;)V\n-  #206 = Utf8               containsAlphabetOrPad\n-  #207 = Utf8               ([B)Z\n-  #208 = Utf8               org/apache/commons/codec/binary/StringUtils\n-  #209 = Utf8               newStringUtf8\n-  #210 = Utf8               ([B)Ljava/lang/String;\n-  #211 = Utf8               java/lang/System\n-  #212 = Utf8               arraycopy\n-  #213 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #214 = Utf8               isWhiteSpace\n-  #215 = Utf8               eof\n-  #216 = Utf8               ensureBufferSize\n-  #217 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-  #218 = Utf8               modulus\n-  #219 = Utf8               lbitWorkArea\n-  #220 = Utf8               pos\n-  #221 = Utf8               currentLinePos\n-  #222 = Utf8               isStrictDecoding\n-  #223 = Utf8               ()Z\n+  #114 = Class              #194          // org/apache/commons/codec/CodecPolicy\n+  #115 = Utf8               decode\n+  #116 = Class              #195          // org/apache/commons/codec/binary/BaseNCodec$Context\n+  #117 = Utf8               Context\n+  #118 = Utf8               InnerClasses\n+  #119 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #120 = Utf8               result\n+  #121 = Utf8               b\n+  #122 = Utf8               buffer\n+  #123 = Utf8               i\n+  #124 = Utf8               input\n+  #125 = Utf8               inPos\n+  #126 = Utf8               inAvail\n+  #127 = Utf8               context\n+  #128 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+  #129 = Utf8               encode\n+  #130 = Utf8               savedPos\n+  #131 = Utf8               isInAlphabet\n+  #132 = Utf8               (B)Z\n+  #133 = Utf8               octet\n+  #134 = Utf8               validateCharacter\n+  #135 = Utf8               (JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #136 = Utf8               emptyBitsMask\n+  #137 = Utf8               validateTrailingCharacters\n+  #138 = Utf8               <clinit>\n+  #139 = Utf8               SourceFile\n+  #140 = Utf8               Base32.java\n+  #141 = NameAndType        #87:#94       // \"<init>\":(Z)V\n+  #142 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n+  #143 = NameAndType        #87:#106      // \"<init>\":(I[BZB)V\n+  #144 = NameAndType        #87:#97       // \"<init>\":(ZB)V\n+  #145 = NameAndType        #196:#69      // CHUNK_SEPARATOR:[B\n+  #146 = NameAndType        #87:#104      // \"<init>\":(I[B)V\n+  #147 = NameAndType        #197:#111     // DECODING_POLICY_DEFAULT:Lorg/apache/commons/codec/CodecPolicy;\n+  #148 = NameAndType        #87:#107      // \"<init>\":(I[BZBLorg/apache/commons/codec/CodecPolicy;)V\n+  #149 = Utf8               org/apache/commons/codec/binary/Base32\n+  #150 = NameAndType        #87:#198      // \"<init>\":(IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n+  #151 = NameAndType        #72:#69       // HEX_ENCODE_TABLE:[B\n+  #152 = NameAndType        #85:#69       // encodeTable:[B\n+  #153 = NameAndType        #71:#69       // HEX_DECODE_TABLE:[B\n+  #154 = NameAndType        #83:#69       // decodeTable:[B\n+  #155 = NameAndType        #70:#69       // ENCODE_TABLE:[B\n+  #156 = NameAndType        #68:#69       // DECODE_TABLE:[B\n+  #157 = Utf8               java/lang/IllegalArgumentException\n+  #158 = Utf8               java/lang/StringBuilder\n+  #159 = NameAndType        #87:#88       // \"<init>\":()V\n+  #160 = Utf8               lineLength\n+  #161 = NameAndType        #199:#200     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #162 = NameAndType        #199:#201     // append:(I)Ljava/lang/StringBuilder;\n+  #163 = Utf8                > 0, but lineSeparator is null\n+  #164 = NameAndType        #202:#203     // toString:()Ljava/lang/String;\n+  #165 = NameAndType        #87:#204      // \"<init>\":(Ljava/lang/String;)V\n+  #166 = NameAndType        #205:#206     // containsAlphabetOrPad:([B)Z\n+  #167 = Class              #207          // org/apache/commons/codec/binary/StringUtils\n+  #168 = NameAndType        #208:#209     // newStringUtf8:([B)Ljava/lang/String;\n+  #169 = Utf8               lineSeparator must not contain Base32 characters: [\n+  #170 = Utf8               ]\n+  #171 = NameAndType        #84:#62       // encodeSize:I\n+  #172 = NameAndType        #86:#69       // lineSeparator:[B\n+  #173 = Class              #210          // java/lang/System\n+  #174 = NameAndType        #211:#212     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #175 = NameAndType        #82:#62       // decodeSize:I\n+  #176 = NameAndType        #131:#132     // isInAlphabet:(B)Z\n+  #177 = NameAndType        #213:#132     // isWhiteSpace:(B)Z\n+  #178 = Utf8               pad must not be in alphabet or whitespace\n+  #179 = NameAndType        #214:#96      // eof:Z\n+  #180 = NameAndType        #101:#99      // pad:B\n+  #181 = NameAndType        #215:#216     // ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+  #182 = NameAndType        #217:#62      // modulus:I\n+  #183 = NameAndType        #218:#76      // lbitWorkArea:J\n+  #184 = NameAndType        #219:#62      // pos:I\n+  #185 = NameAndType        #137:#88      // validateTrailingCharacters:()V\n+  #186 = NameAndType        #134:#135     // validateCharacter:(JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #187 = Utf8               java/lang/IllegalStateException\n+  #188 = Utf8               Impossible modulus\n+  #189 = NameAndType        #103:#62      // lineLength:I\n+  #190 = NameAndType        #220:#62      // currentLinePos:I\n+  #191 = NameAndType        #221:#222     // isStrictDecoding:()Z\n+  #192 = Utf8               Strict decoding: Last encoded character (before the paddings if any) is a valid base 32 alphabet but not a possible encoding. Expected the discarded bits from the character to be zero.\n+  #193 = Utf8               Strict decoding: Last encoded character(s) (before the paddings if any) are valid base 32 alphabet but not a possible encoding. Decoding requires either 2, 4, 5, or 7 trailing 5-bit characters to create bytes.\n+  #194 = Utf8               org/apache/commons/codec/CodecPolicy\n+  #195 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n+  #196 = Utf8               CHUNK_SEPARATOR\n+  #197 = Utf8               DECODING_POLICY_DEFAULT\n+  #198 = Utf8               (IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n+  #199 = Utf8               append\n+  #200 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #201 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #202 = Utf8               toString\n+  #203 = Utf8               ()Ljava/lang/String;\n+  #204 = Utf8               (Ljava/lang/String;)V\n+  #205 = Utf8               containsAlphabetOrPad\n+  #206 = Utf8               ([B)Z\n+  #207 = Utf8               org/apache/commons/codec/binary/StringUtils\n+  #208 = Utf8               newStringUtf8\n+  #209 = Utf8               ([B)Ljava/lang/String;\n+  #210 = Utf8               java/lang/System\n+  #211 = Utf8               arraycopy\n+  #212 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #213 = Utf8               isWhiteSpace\n+  #214 = Utf8               eof\n+  #215 = Utf8               ensureBufferSize\n+  #216 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+  #217 = Utf8               modulus\n+  #218 = Utf8               lbitWorkArea\n+  #219 = Utf8               pos\n+  #220 = Utf8               currentLinePos\n+  #221 = Utf8               isStrictDecoding\n+  #222 = Utf8               ()Z\n {\n   private static final int BITS_PER_ENCODED_BYTE = 5;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 5\n \n   private static final int BYTES_PER_ENCODED_BLOCK = 8;\n@@ -578,14 +577,16 @@\n        217: dup\n        218: ldc           #36                 // String pad must not be in alphabet or whitespace\n        220: invokespecial #25                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n        223: athrow\n        224: return\n       LineNumberTable:\n         line 317: 0\n+        line 318: 5\n+        line 317: 19\n         line 319: 22\n         line 320: 26\n         line 321: 33\n         line 323: 43\n         line 324: 50\n         line 326: 57\n         line 327: 61\n@@ -3481,8 +3482,8 @@\n         line 61: 0\n         line 78: 662\n         line 89: 855\n         line 106: 1499\n }\n SourceFile: \"Base32.java\"\n InnerClasses:\n-  static #118= #117 of #2;                // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n+  static #117= #116 of #2;                // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n"}]}
