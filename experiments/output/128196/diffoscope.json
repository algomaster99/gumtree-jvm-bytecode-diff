{"diffoscope-json-version": 1, "source1": "first/CSVFormat$Builder.class", "source2": "second/CSVFormat$Builder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -32,37 +32,37 @@\n     }\n     \n     public static Builder create(final CSVFormat csvFormat) {\n         return new Builder(csvFormat);\n     }\n     \n     private Builder(final CSVFormat csvFormat) {\n-        this.delimiter = CSVFormat.access$000(csvFormat);\n-        this.quoteCharacter = CSVFormat.access$100(csvFormat);\n-        this.quoteMode = CSVFormat.access$200(csvFormat);\n-        this.commentMarker = CSVFormat.access$300(csvFormat);\n-        this.escapeCharacter = CSVFormat.access$400(csvFormat);\n-        this.ignoreSurroundingSpaces = CSVFormat.access$500(csvFormat);\n-        this.allowMissingColumnNames = CSVFormat.access$600(csvFormat);\n-        this.ignoreEmptyLines = CSVFormat.access$700(csvFormat);\n-        this.recordSeparator = CSVFormat.access$800(csvFormat);\n-        this.nullString = CSVFormat.access$900(csvFormat);\n-        this.headerComments = CSVFormat.access$1000(csvFormat);\n-        this.headers = CSVFormat.access$1100(csvFormat);\n-        this.skipHeaderRecord = CSVFormat.access$1200(csvFormat);\n-        this.ignoreHeaderCase = CSVFormat.access$1300(csvFormat);\n-        this.trailingDelimiter = CSVFormat.access$1400(csvFormat);\n-        this.trim = CSVFormat.access$1500(csvFormat);\n-        this.autoFlush = CSVFormat.access$1600(csvFormat);\n-        this.quotedNullString = CSVFormat.access$1700(csvFormat);\n-        this.allowDuplicateHeaderNames = CSVFormat.access$1800(csvFormat);\n+        this.delimiter = CSVFormat.access$0(csvFormat);\n+        this.quoteCharacter = CSVFormat.access$1(csvFormat);\n+        this.quoteMode = CSVFormat.access$2(csvFormat);\n+        this.commentMarker = CSVFormat.access$3(csvFormat);\n+        this.escapeCharacter = CSVFormat.access$4(csvFormat);\n+        this.ignoreSurroundingSpaces = CSVFormat.access$5(csvFormat);\n+        this.allowMissingColumnNames = CSVFormat.access$6(csvFormat);\n+        this.ignoreEmptyLines = CSVFormat.access$7(csvFormat);\n+        this.recordSeparator = CSVFormat.access$8(csvFormat);\n+        this.nullString = CSVFormat.access$9(csvFormat);\n+        this.headerComments = CSVFormat.access$10(csvFormat);\n+        this.headers = CSVFormat.access$11(csvFormat);\n+        this.skipHeaderRecord = CSVFormat.access$12(csvFormat);\n+        this.ignoreHeaderCase = CSVFormat.access$13(csvFormat);\n+        this.trailingDelimiter = CSVFormat.access$14(csvFormat);\n+        this.trim = CSVFormat.access$15(csvFormat);\n+        this.autoFlush = CSVFormat.access$16(csvFormat);\n+        this.quotedNullString = CSVFormat.access$17(csvFormat);\n+        this.allowDuplicateHeaderNames = CSVFormat.access$18(csvFormat);\n     }\n     \n     public CSVFormat build() {\n-        return new CSVFormat(this, (CSVFormat.CSVFormat$1)null);\n+        return new CSVFormat(this, (CSVFormat)null);\n     }\n     \n     public Builder setAllowDuplicateHeaderNames(final boolean allowDuplicateHeaderNames) {\n         this.allowDuplicateHeaderNames = allowDuplicateHeaderNames;\n         return this;\n     }\n     \n@@ -78,50 +78,50 @@\n     \n     public Builder setCommentMarker(final char commentMarker) {\n         this.setCommentMarker(Character.valueOf(commentMarker));\n         return this;\n     }\n     \n     public Builder setCommentMarker(final Character commentMarker) {\n-        if (CSVFormat.access$2000(commentMarker)) {\n+        if (CSVFormat.access$20(commentMarker)) {\n             throw new IllegalArgumentException(\"The comment start marker character cannot be a line break\");\n         }\n         this.commentMarker = commentMarker;\n         return this;\n     }\n     \n     public Builder setDelimiter(final char delimiter) {\n         return this.setDelimiter(String.valueOf(delimiter));\n     }\n     \n     public Builder setDelimiter(final String delimiter) {\n-        if (CSVFormat.access$2100(delimiter)) {\n+        if (CSVFormat.access$21(delimiter)) {\n             throw new IllegalArgumentException(\"The delimiter cannot be a line break\");\n         }\n         this.delimiter = delimiter;\n         return this;\n     }\n     \n     public Builder setEscape(final char escapeCharacter) {\n         this.setEscape(Character.valueOf(escapeCharacter));\n         return this;\n     }\n     \n     public Builder setEscape(final Character escapeCharacter) {\n-        if (CSVFormat.access$2000(escapeCharacter)) {\n+        if (CSVFormat.access$20(escapeCharacter)) {\n             throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n         }\n         this.escapeCharacter = escapeCharacter;\n         return this;\n     }\n     \n     public Builder setHeader(final Class<? extends Enum<?>> headerEnum) {\n         String[] header = null;\n         if (headerEnum != null) {\n-            final Enum<?>[] enumValues = (Enum[])headerEnum.getEnumConstants();\n+            final Enum[] enumValues = (Enum[])headerEnum.getEnumConstants();\n             header = new String[enumValues.length];\n             for (int i = 0; i < enumValues.length; ++i) {\n                 header[i] = enumValues[i].name();\n             }\n         }\n         return this.setHeader(header);\n     }\n@@ -180,15 +180,15 @@\n     \n     public Builder setQuote(final char quoteCharacter) {\n         this.setQuote(Character.valueOf(quoteCharacter));\n         return this;\n     }\n     \n     public Builder setQuote(final Character quoteCharacter) {\n-        if (CSVFormat.access$2000(quoteCharacter)) {\n+        if (CSVFormat.access$20(quoteCharacter)) {\n             throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n         }\n         this.quoteCharacter = quoteCharacter;\n         return this;\n     }\n     \n     public Builder setQuoteMode(final QuoteMode quoteMode) {\n"}]}
