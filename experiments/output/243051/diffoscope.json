{"diffoscope-json-version": 1, "source1": "first/AnnotationEntry.class", "source2": "second/AnnotationEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,22 +19,22 @@\n     private final boolean isRuntimeVisible;\n     private List<ElementValuePair> elementValuePairs;\n     \n     public static AnnotationEntry[] createAnnotationEntries(final Attribute[] attrs) {\n         final Stream<Attribute> of = Stream.of(attrs);\n         final Class<Annotations> obj = Annotations.class;\n         Objects.requireNonNull(obj);\n-        return of.filter(obj::isInstance).flatMap(e -> Stream.of(((Annotations)e).getAnnotationEntries())).toArray(AnnotationEntry[]::new);\n+        return of.filter(obj::isInstance).flatMap(attribute -> Stream.of(((Annotations)attribute).getAnnotationEntries())).toArray(AnnotationEntry[]::new);\n     }\n     \n     public static AnnotationEntry read(final DataInput input, final ConstantPool constantPool, final boolean isRuntimeVisible) throws IOException {\n         final AnnotationEntry annotationEntry = new AnnotationEntry(input.readUnsignedShort(), constantPool, isRuntimeVisible);\n-        final int numElementValuePairs = input.readUnsignedShort();\n+        final int unsignedShort = input.readUnsignedShort();\n         annotationEntry.elementValuePairs = new ArrayList<ElementValuePair>();\n-        for (int i = 0; i < numElementValuePairs; ++i) {\n+        for (int i = 0; i < unsignedShort; ++i) {\n             annotationEntry.elementValuePairs.add(new ElementValuePair(input.readUnsignedShort(), ElementValue.readElementValue(input, constantPool), constantPool));\n         }\n         return annotationEntry;\n     }\n     \n     public AnnotationEntry(final int typeIndex, final ConstantPool constantPool, final boolean isRuntimeVisible) {\n         this.typeIndex = typeIndex;\n@@ -49,16 +49,17 @@\n     public void addElementNameValuePair(final ElementValuePair elementNameValuePair) {\n         this.elementValuePairs.add(elementNameValuePair);\n     }\n     \n     public void dump(final DataOutputStream dos) throws IOException {\n         dos.writeShort(this.typeIndex);\n         dos.writeShort(this.elementValuePairs.size());\n-        for (final ElementValuePair envp : this.elementValuePairs) {\n-            envp.dump(dos);\n+        final Iterator<ElementValuePair> iterator = this.elementValuePairs.iterator();\n+        while (iterator.hasNext()) {\n+            ((ElementValuePair)iterator.next()).dump(dos);\n         }\n     }\n     \n     public String getAnnotationType() {\n         return this.constantPool.getConstantUtf8(this.typeIndex).getBytes();\n     }\n     \n@@ -83,28 +84,29 @@\n     }\n     \n     public boolean isRuntimeVisible() {\n         return this.isRuntimeVisible;\n     }\n     \n     public String toShortString() {\n-        final StringBuilder result = new StringBuilder();\n-        result.append(\"@\");\n-        result.append(this.getAnnotationType());\n-        final ElementValuePair[] evPairs = this.getElementValuePairs();\n-        if (evPairs.length > 0) {\n-            result.append(\"(\");\n-            for (final ElementValuePair element : evPairs) {\n-                result.append(element.toShortString());\n-                result.append(\", \");\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"@\");\n+        sb.append(this.getAnnotationType());\n+        final ElementValuePair[] elementValuePairs = this.getElementValuePairs();\n+        if (elementValuePairs.length > 0) {\n+            sb.append(\"(\");\n+            final ElementValuePair[] array = elementValuePairs;\n+            for (int length = array.length, i = 0; i < length; ++i) {\n+                sb.append(array[i].toShortString());\n+                sb.append(\", \");\n             }\n-            result.setLength();\n-            result.append(\")\");\n+            sb.setLength();\n+            sb.append(\")\");\n         }\n-        return result.toString();\n+        return sb.toString();\n     }\n     \n     @Override\n     public String toString() {\n         return this.toShortString();\n     }\n     \n"}]}
