{"diffoscope-json-version": 1, "source1": "first/MethodDefHandler.class", "source2": "second/MethodDefHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,83 +1,83 @@\n \n package com.puppycrawl.tools.checkstyle.checks.indentation;\n \n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n \n public class MethodDefHandler extends BlockParentHandler\n {\n-    public MethodDefHandler(final IndentationCheck indentCheck, final DetailAST ast, final AbstractExpressionHandler parent) {\n-        super(indentCheck, getHandlerName(ast), ast, parent);\n+    public MethodDefHandler(final IndentationCheck indentationCheck, final DetailAST detailAST, final AbstractExpressionHandler abstractExpressionHandler) {\n+        super(indentationCheck, getHandlerName(detailAST), detailAST, abstractExpressionHandler);\n     }\n     \n     protected DetailAST getTopLevelAst() {\n         return null;\n     }\n     \n     protected void checkModifiers() {\n-        final DetailAST modifier = this.getMainAst().findFirstToken(5);\n-        if (this.isOnStartOfLine(modifier) && !this.getIndent().isAcceptable(this.expandedTabsColumnNo(modifier))) {\n-            this.logError(modifier, \"modifier\", this.expandedTabsColumnNo(modifier));\n+        final DetailAST firstToken = this.getMainAst().findFirstToken(5);\n+        if (this.isOnStartOfLine(firstToken) && !this.getIndent().isAcceptable(this.expandedTabsColumnNo(firstToken))) {\n+            this.logError(firstToken, \"modifier\", this.expandedTabsColumnNo(firstToken));\n         }\n     }\n     \n     private void checkThrows() {\n-        final DetailAST throwsAst = this.getMainAst().findFirstToken(81);\n-        if (throwsAst != null) {\n-            this.checkWrappingIndentation(throwsAst, throwsAst.getNextSibling(), this.getIndentCheck().getThrowsIndent(), this.getLineStart(getMethodDefLineStart(this.getMainAst())), !this.isOnStartOfLine(throwsAst));\n+        final DetailAST firstToken = this.getMainAst().findFirstToken(81);\n+        if (firstToken != null) {\n+            this.checkWrappingIndentation(firstToken, firstToken.getNextSibling(), this.getIndentCheck().getThrowsIndent(), this.getLineStart(getMethodDefLineStart(this.getMainAst())), !this.isOnStartOfLine(firstToken));\n         }\n     }\n     \n-    private static int getMethodDefLineStart(final DetailAST mainAst) {\n-        int lineStart = mainAst.findFirstToken(58).getLineNo();\n-        final DetailAST typeNode = mainAst.findFirstToken(13);\n-        if (typeNode != null) {\n-            lineStart = getFirstLine(typeNode);\n-        }\n-        for (DetailAST node = mainAst.findFirstToken(5).getFirstChild(); node != null; node = node.getNextSibling()) {\n-            if (node.getType() != 159) {\n-                if (node.getLineNo() < lineStart) {\n-                    lineStart = node.getLineNo();\n+    private static int getMethodDefLineStart(final DetailAST detailAST) {\n+        int n = detailAST.findFirstToken(58).getLineNo();\n+        final DetailAST firstToken = detailAST.findFirstToken(13);\n+        if (firstToken != null) {\n+            n = getFirstLine(firstToken);\n+        }\n+        for (DetailAST detailAST2 = detailAST.findFirstToken(5).getFirstChild(); detailAST2 != null; detailAST2 = detailAST2.getNextSibling()) {\n+            if (detailAST2.getType() != 159) {\n+                if (detailAST2.getLineNo() < n) {\n+                    n = detailAST2.getLineNo();\n                 }\n             }\n         }\n-        return lineStart;\n+        return n;\n     }\n     \n     public void checkIndentation() {\n         this.checkModifiers();\n         this.checkThrows();\n         if (getMethodDefParamRightParen(this.getMainAst()) != null) {\n             this.checkWrappingIndentation(this.getMainAst(), getMethodDefParamRightParen(this.getMainAst()));\n         }\n         if (this.getLeftCurly() != null) {\n             super.checkIndentation();\n         }\n     }\n     \n-    private static DetailAST getMethodDefParamRightParen(final DetailAST methodDefAst) {\n-        return methodDefAst.findFirstToken(77);\n+    private static DetailAST getMethodDefParamRightParen(final DetailAST detailAST) {\n+        return detailAST.findFirstToken(77);\n     }\n     \n-    private static String getHandlerName(final DetailAST ast) {\n-        String name = null;\n-        switch (ast.getType()) {\n+    private static String getHandlerName(final DetailAST detailAST) {\n+        String s = null;\n+        switch (detailAST.getType()) {\n             case 8: {\n-                name = \"ctor def\";\n+                s = \"ctor def\";\n                 break;\n             }\n             case 161: {\n-                name = \"annotation field def\";\n+                s = \"annotation field def\";\n                 break;\n             }\n             case 203: {\n-                name = \"compact ctor def\";\n+                s = \"compact ctor def\";\n                 break;\n             }\n             default: {\n-                name = \"method def\";\n+                s = \"method def\";\n                 break;\n             }\n         }\n-        return name;\n+        return s;\n     }\n }\n"}]}
