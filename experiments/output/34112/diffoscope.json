{"diffoscope-json-version": 1, "source1": "first/AtomicInitializer.class", "source2": "second/AtomicInitializer.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,83 +1,83 @@\n-  SHA-256 checksum 045f130abfb7d5503ca3206fe2b1d21bd07e55274b32b3abc3e64785a53deb46\n+  SHA-256 checksum 25be27e33e024f865c538a77268ee918b5f933c67ab11a5ab050a051adac1003\n   Compiled from \"AtomicInitializer.java\"\n public abstract class org.apache.commons.lang3.concurrent.AtomicInitializer<T extends java.lang.Object> extends java.lang.Object implements org.apache.commons.lang3.concurrent.ConcurrentInitializer<T>\n   minor version: 0\n   major version: 52\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n-  this_class: #8                          // org/apache/commons/lang3/concurrent/AtomicInitializer\n-  super_class: #9                         // java/lang/Object\n+  this_class: #11                         // org/apache/commons/lang3/concurrent/AtomicInitializer\n+  super_class: #2                         // java/lang/Object\n   interfaces: 1, fields: 1, methods: 3, attributes: 2\n Constant pool:\n-   #1 = Methodref          #9.#37         // java/lang/Object.\"<init>\":()V\n-   #2 = Class              #38            // java/util/concurrent/atomic/AtomicReference\n-   #3 = Methodref          #2.#37         // java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n-   #4 = Fieldref           #8.#39         // org/apache/commons/lang3/concurrent/AtomicInitializer.reference:Ljava/util/concurrent/atomic/AtomicReference;\n-   #5 = Methodref          #2.#40         // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n-   #6 = Methodref          #8.#41         // org/apache/commons/lang3/concurrent/AtomicInitializer.initialize:()Ljava/lang/Object;\n-   #7 = Methodref          #2.#42         // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-   #8 = Class              #43            // org/apache/commons/lang3/concurrent/AtomicInitializer\n-   #9 = Class              #44            // java/lang/Object\n-  #10 = Class              #45            // org/apache/commons/lang3/concurrent/ConcurrentInitializer\n-  #11 = Utf8               reference\n-  #12 = Utf8               Ljava/util/concurrent/atomic/AtomicReference;\n-  #13 = Utf8               Signature\n-  #14 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<TT;>;\n-  #15 = Utf8               <init>\n-  #16 = Utf8               ()V\n-  #17 = Utf8               Code\n-  #18 = Utf8               LineNumberTable\n-  #19 = Utf8               LocalVariableTable\n-  #20 = Utf8               this\n-  #21 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicInitializer;\n-  #22 = Utf8               LocalVariableTypeTable\n-  #23 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicInitializer<TT;>;\n-  #24 = Utf8               get\n-  #25 = Utf8               ()Ljava/lang/Object;\n-  #26 = Utf8               result\n-  #27 = Utf8               Ljava/lang/Object;\n-  #28 = Utf8               TT;\n-  #29 = Utf8               StackMapTable\n-  #30 = Utf8               Exceptions\n-  #31 = Class              #46            // org/apache/commons/lang3/concurrent/ConcurrentException\n-  #32 = Utf8               ()TT;\n-  #33 = Utf8               initialize\n-  #34 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n-  #35 = Utf8               SourceFile\n-  #36 = Utf8               AtomicInitializer.java\n-  #37 = NameAndType        #15:#16        // \"<init>\":()V\n-  #38 = Utf8               java/util/concurrent/atomic/AtomicReference\n-  #39 = NameAndType        #11:#12        // reference:Ljava/util/concurrent/atomic/AtomicReference;\n-  #40 = NameAndType        #24:#25        // get:()Ljava/lang/Object;\n-  #41 = NameAndType        #33:#25        // initialize:()Ljava/lang/Object;\n-  #42 = NameAndType        #47:#48        // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #43 = Utf8               org/apache/commons/lang3/concurrent/AtomicInitializer\n-  #44 = Utf8               java/lang/Object\n-  #45 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentInitializer\n-  #46 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentException\n-  #47 = Utf8               compareAndSet\n-  #48 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n+   #1 = Methodref          #2.#3          // java/lang/Object.\"<init>\":()V\n+   #2 = Class              #4             // java/lang/Object\n+   #3 = NameAndType        #5:#6          // \"<init>\":()V\n+   #4 = Utf8               java/lang/Object\n+   #5 = Utf8               <init>\n+   #6 = Utf8               ()V\n+   #7 = Class              #8             // java/util/concurrent/atomic/AtomicReference\n+   #8 = Utf8               java/util/concurrent/atomic/AtomicReference\n+   #9 = Methodref          #7.#3          // java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n+  #10 = Fieldref           #11.#12        // org/apache/commons/lang3/concurrent/AtomicInitializer.reference:Ljava/util/concurrent/atomic/AtomicReference;\n+  #11 = Class              #13            // org/apache/commons/lang3/concurrent/AtomicInitializer\n+  #12 = NameAndType        #14:#15        // reference:Ljava/util/concurrent/atomic/AtomicReference;\n+  #13 = Utf8               org/apache/commons/lang3/concurrent/AtomicInitializer\n+  #14 = Utf8               reference\n+  #15 = Utf8               Ljava/util/concurrent/atomic/AtomicReference;\n+  #16 = Methodref          #7.#17         // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n+  #17 = NameAndType        #18:#19        // get:()Ljava/lang/Object;\n+  #18 = Utf8               get\n+  #19 = Utf8               ()Ljava/lang/Object;\n+  #20 = Methodref          #11.#21        // org/apache/commons/lang3/concurrent/AtomicInitializer.initialize:()Ljava/lang/Object;\n+  #21 = NameAndType        #22:#19        // initialize:()Ljava/lang/Object;\n+  #22 = Utf8               initialize\n+  #23 = Methodref          #7.#24         // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #24 = NameAndType        #25:#26        // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #25 = Utf8               compareAndSet\n+  #26 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #27 = Class              #28            // org/apache/commons/lang3/concurrent/ConcurrentInitializer\n+  #28 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentInitializer\n+  #29 = Utf8               Signature\n+  #30 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<TT;>;\n+  #31 = Utf8               Code\n+  #32 = Utf8               LineNumberTable\n+  #33 = Utf8               LocalVariableTable\n+  #34 = Utf8               this\n+  #35 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicInitializer;\n+  #36 = Utf8               LocalVariableTypeTable\n+  #37 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicInitializer<TT;>;\n+  #38 = Utf8               result\n+  #39 = Utf8               Ljava/lang/Object;\n+  #40 = Utf8               TT;\n+  #41 = Utf8               StackMapTable\n+  #42 = Utf8               Exceptions\n+  #43 = Class              #44            // org/apache/commons/lang3/concurrent/ConcurrentException\n+  #44 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentException\n+  #45 = Utf8               ()TT;\n+  #46 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n+  #47 = Utf8               SourceFile\n+  #48 = Utf8               AtomicInitializer.java\n {\n   private final java.util.concurrent.atomic.AtomicReference<T> reference;\n     descriptor: Ljava/util/concurrent/atomic/AtomicReference;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #14                          // Ljava/util/concurrent/atomic/AtomicReference<TT;>;\n+    Signature: #30                          // Ljava/util/concurrent/atomic/AtomicReference<TT;>;\n \n   public org.apache.commons.lang3.concurrent.AtomicInitializer();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class java/util/concurrent/atomic/AtomicReference\n+         5: new           #7                  // class java/util/concurrent/atomic/AtomicReference\n          8: dup\n-         9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n-        12: putfield      #4                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n+         9: invokespecial #9                  // Method java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n+        12: putfield      #10                 // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n         15: return\n       LineNumberTable:\n         line 66: 0\n         line 68: 4\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      16     0  this   Lorg/apache/commons/lang3/concurrent/AtomicInitializer;\n@@ -87,31 +87,31 @@\n \n   public T get() throws org.apache.commons.lang3.concurrent.ConcurrentException;\n     descriptor: ()Ljava/lang/Object;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n-         4: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n+         1: getfield      #10                 // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n+         4: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n          7: astore_1\n          8: aload_1\n          9: ifnonnull     37\n         12: aload_0\n-        13: invokevirtual #6                  // Method initialize:()Ljava/lang/Object;\n+        13: invokevirtual #20                 // Method initialize:()Ljava/lang/Object;\n         16: astore_1\n         17: aload_0\n-        18: getfield      #4                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n+        18: getfield      #10                 // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n         21: aconst_null\n         22: aload_1\n-        23: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+        23: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n         26: ifne          37\n         29: aload_0\n-        30: getfield      #4                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n-        33: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n+        30: getfield      #10                 // Field reference:Ljava/util/concurrent/atomic/AtomicReference;\n+        33: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n         36: astore_1\n         37: aload_1\n         38: areturn\n       LineNumberTable:\n         line 81: 0\n         line 83: 8\n         line 84: 12\n@@ -128,18 +128,18 @@\n             8      31     1 result   TT;\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 37\n           locals = [ class java/lang/Object ]\n     Exceptions:\n       throws org.apache.commons.lang3.concurrent.ConcurrentException\n-    Signature: #32                          // ()TT;\n+    Signature: #45                          // ()TT;\n \n   protected abstract T initialize() throws org.apache.commons.lang3.concurrent.ConcurrentException;\n     descriptor: ()Ljava/lang/Object;\n     flags: (0x0404) ACC_PROTECTED, ACC_ABSTRACT\n     Exceptions:\n       throws org.apache.commons.lang3.concurrent.ConcurrentException\n-    Signature: #32                          // ()TT;\n+    Signature: #45                          // ()TT;\n }\n-Signature: #34                          // <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n+Signature: #46                          // <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n SourceFile: \"AtomicInitializer.java\"\n"}]}
