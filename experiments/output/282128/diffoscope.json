{"diffoscope-json-version": 1, "source1": "first/ChunkedOutputStream.class", "source2": "second/ChunkedOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,28 +5,28 @@\n import java.io.OutputStream;\n import java.io.FilterOutputStream;\n \n public class ChunkedOutputStream extends FilterOutputStream\n {\n     private final int chunkSize;\n     \n-    public ChunkedOutputStream(final OutputStream stream) {\n-        this(stream, 8192);\n+    public ChunkedOutputStream(final OutputStream outputStream) {\n+        this(outputStream, 8192);\n     }\n     \n-    public ChunkedOutputStream(final OutputStream stream, final int chunkSize) {\n-        super(stream);\n+    public ChunkedOutputStream(final OutputStream out, final int chunkSize) {\n+        super(out);\n         if (chunkSize <= 0) {\n             throw new IllegalArgumentException();\n         }\n         this.chunkSize = chunkSize;\n     }\n     \n     @Override\n-    public void write(final byte[] data, final int srcOffset, final int length) throws IOException {\n-        int chunk;\n-        for (int bytes = length, dstOffset = srcOffset; bytes > 0; bytes -= chunk, dstOffset += chunk) {\n-            chunk = Math.min(bytes, this.chunkSize);\n-            this.out.write(data, dstOffset, chunk);\n+    public void write(final byte[] b, final int n, final int n2) throws IOException {\n+        int min;\n+        for (int i = n2, off = n; i > 0; i -= min, off += min) {\n+            min = Math.min(i, this.chunkSize);\n+            this.out.write(b, off, min);\n         }\n     }\n }\n"}]}
