{"diffoscope-json-version": 1, "source1": "first/ChunkedOutputStream.class", "source2": "second/ChunkedOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,88 +1,86 @@\n-  SHA-256 checksum 3226d8319485c8cfbff0279bf27ef7fb312ac25afe40e07e3ab5136bc3fb6bf2\n+  SHA-256 checksum 1d97af988547a49eb10cd4819d0654c9a40bcb6b19ff5df916421c1ede8bf4e2\n   Compiled from \"ChunkedOutputStream.java\"\n public class org.apache.commons.io.output.ChunkedOutputStream extends java.io.FilterOutputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #4                          // org/apache/commons/io/output/ChunkedOutputStream\n-  super_class: #10                        // java/io/FilterOutputStream\n+  this_class: #1                          // org/apache/commons/io/output/ChunkedOutputStream\n+  super_class: #3                         // java/io/FilterOutputStream\n   interfaces: 0, fields: 1, methods: 3, attributes: 1\n Constant pool:\n-   #1 = Class              #2             // org/apache/commons/io/IOUtils\n-   #2 = Utf8               org/apache/commons/io/IOUtils\n-   #3 = Methodref          #4.#5          // org/apache/commons/io/output/ChunkedOutputStream.\"<init>\":(Ljava/io/OutputStream;I)V\n-   #4 = Class              #6             // org/apache/commons/io/output/ChunkedOutputStream\n-   #5 = NameAndType        #7:#8          // \"<init>\":(Ljava/io/OutputStream;I)V\n-   #6 = Utf8               org/apache/commons/io/output/ChunkedOutputStream\n+   #1 = Class              #2             // org/apache/commons/io/output/ChunkedOutputStream\n+   #2 = Utf8               org/apache/commons/io/output/ChunkedOutputStream\n+   #3 = Class              #4             // java/io/FilterOutputStream\n+   #4 = Utf8               java/io/FilterOutputStream\n+   #5 = Utf8               chunkSize\n+   #6 = Utf8               I\n    #7 = Utf8               <init>\n-   #8 = Utf8               (Ljava/io/OutputStream;I)V\n-   #9 = Methodref          #10.#11        // java/io/FilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n-  #10 = Class              #12            // java/io/FilterOutputStream\n-  #11 = NameAndType        #7:#13         // \"<init>\":(Ljava/io/OutputStream;)V\n-  #12 = Utf8               java/io/FilterOutputStream\n-  #13 = Utf8               (Ljava/io/OutputStream;)V\n-  #14 = Class              #15            // java/lang/IllegalArgumentException\n-  #15 = Utf8               java/lang/IllegalArgumentException\n-  #16 = Methodref          #14.#17        // java/lang/IllegalArgumentException.\"<init>\":()V\n-  #17 = NameAndType        #7:#18         // \"<init>\":()V\n-  #18 = Utf8               ()V\n-  #19 = Fieldref           #4.#20         // org/apache/commons/io/output/ChunkedOutputStream.chunkSize:I\n-  #20 = NameAndType        #21:#22        // chunkSize:I\n-  #21 = Utf8               chunkSize\n-  #22 = Utf8               I\n-  #23 = Methodref          #24.#25        // java/lang/Math.min:(II)I\n-  #24 = Class              #26            // java/lang/Math\n-  #25 = NameAndType        #27:#28        // min:(II)I\n-  #26 = Utf8               java/lang/Math\n-  #27 = Utf8               min\n-  #28 = Utf8               (II)I\n-  #29 = Fieldref           #4.#30         // org/apache/commons/io/output/ChunkedOutputStream.out:Ljava/io/OutputStream;\n-  #30 = NameAndType        #31:#32        // out:Ljava/io/OutputStream;\n-  #31 = Utf8               out\n-  #32 = Utf8               Ljava/io/OutputStream;\n-  #33 = Methodref          #34.#35        // java/io/OutputStream.write:([BII)V\n-  #34 = Class              #36            // java/io/OutputStream\n-  #35 = NameAndType        #37:#38        // write:([BII)V\n-  #36 = Utf8               java/io/OutputStream\n-  #37 = Utf8               write\n-  #38 = Utf8               ([BII)V\n-  #39 = Utf8               Code\n-  #40 = Utf8               LineNumberTable\n-  #41 = Utf8               LocalVariableTable\n-  #42 = Utf8               this\n-  #43 = Utf8               Lorg/apache/commons/io/output/ChunkedOutputStream;\n-  #44 = Utf8               stream\n-  #45 = Utf8               StackMapTable\n-  #46 = Utf8               chunk\n+   #8 = Utf8               (Ljava/io/OutputStream;)V\n+   #9 = Utf8               Code\n+  #10 = Methodref          #1.#11         // org/apache/commons/io/output/ChunkedOutputStream.\"<init>\":(Ljava/io/OutputStream;I)V\n+  #11 = NameAndType        #7:#12         // \"<init>\":(Ljava/io/OutputStream;I)V\n+  #12 = Utf8               (Ljava/io/OutputStream;I)V\n+  #13 = Utf8               LineNumberTable\n+  #14 = Utf8               LocalVariableTable\n+  #15 = Utf8               this\n+  #16 = Utf8               Lorg/apache/commons/io/output/ChunkedOutputStream;\n+  #17 = Utf8               stream\n+  #18 = Utf8               Ljava/io/OutputStream;\n+  #19 = Methodref          #3.#20         // java/io/FilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+  #20 = NameAndType        #7:#8          // \"<init>\":(Ljava/io/OutputStream;)V\n+  #21 = Class              #22            // java/lang/IllegalArgumentException\n+  #22 = Utf8               java/lang/IllegalArgumentException\n+  #23 = Methodref          #21.#24        // java/lang/IllegalArgumentException.\"<init>\":()V\n+  #24 = NameAndType        #7:#25         // \"<init>\":()V\n+  #25 = Utf8               ()V\n+  #26 = Fieldref           #1.#27         // org/apache/commons/io/output/ChunkedOutputStream.chunkSize:I\n+  #27 = NameAndType        #5:#6          // chunkSize:I\n+  #28 = Utf8               StackMapTable\n+  #29 = Class              #30            // java/io/OutputStream\n+  #30 = Utf8               java/io/OutputStream\n+  #31 = Utf8               write\n+  #32 = Utf8               ([BII)V\n+  #33 = Utf8               Exceptions\n+  #34 = Class              #35            // java/io/IOException\n+  #35 = Utf8               java/io/IOException\n+  #36 = Methodref          #37.#39        // java/lang/Math.min:(II)I\n+  #37 = Class              #38            // java/lang/Math\n+  #38 = Utf8               java/lang/Math\n+  #39 = NameAndType        #40:#41        // min:(II)I\n+  #40 = Utf8               min\n+  #41 = Utf8               (II)I\n+  #42 = Fieldref           #1.#43         // org/apache/commons/io/output/ChunkedOutputStream.out:Ljava/io/OutputStream;\n+  #43 = NameAndType        #44:#18        // out:Ljava/io/OutputStream;\n+  #44 = Utf8               out\n+  #45 = Methodref          #29.#46        // java/io/OutputStream.write:([BII)V\n+  #46 = NameAndType        #31:#32        // write:([BII)V\n   #47 = Utf8               data\n   #48 = Utf8               [B\n   #49 = Utf8               srcOffset\n   #50 = Utf8               length\n   #51 = Utf8               bytes\n   #52 = Utf8               dstOffset\n-  #53 = Utf8               Exceptions\n-  #54 = Class              #55            // java/io/IOException\n-  #55 = Utf8               java/io/IOException\n-  #56 = Utf8               SourceFile\n-  #57 = Utf8               ChunkedOutputStream.java\n+  #53 = Utf8               chunk\n+  #54 = Utf8               SourceFile\n+  #55 = Utf8               ChunkedOutputStream.java\n {\n   private final int chunkSize;\n     descriptor: I\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.commons.io.output.ChunkedOutputStream(java.io.OutputStream);\n     descriptor: (Ljava/io/OutputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: sipush        8192\n-         5: invokespecial #3                  // Method \"<init>\":(Ljava/io/OutputStream;I)V\n+         5: invokespecial #10                 // Method \"<init>\":(Ljava/io/OutputStream;I)V\n          8: return\n       LineNumberTable:\n         line 45: 0\n         line 46: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/io/output/ChunkedOutputStream;\n@@ -91,24 +89,24 @@\n   public org.apache.commons.io.output.ChunkedOutputStream(java.io.OutputStream, int);\n     descriptor: (Ljava/io/OutputStream;I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #9                  // Method java/io/FilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+         2: invokespecial #19                 // Method java/io/FilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n          5: iload_2\n          6: ifgt          17\n-         9: new           #14                 // class java/lang/IllegalArgumentException\n+         9: new           #21                 // class java/lang/IllegalArgumentException\n         12: dup\n-        13: invokespecial #16                 // Method java/lang/IllegalArgumentException.\"<init>\":()V\n+        13: invokespecial #23                 // Method java/lang/IllegalArgumentException.\"<init>\":()V\n         16: athrow\n         17: aload_0\n         18: iload_2\n-        19: putfield      #19                 // Field chunkSize:I\n+        19: putfield      #26                 // Field chunkSize:I\n         22: return\n       LineNumberTable:\n         line 56: 0\n         line 57: 5\n         line 58: 9\n         line 60: 17\n         line 61: 22\n@@ -122,64 +120,64 @@\n           offset_delta = 17\n           locals = [ class org/apache/commons/io/output/ChunkedOutputStream, class java/io/OutputStream, int ]\n           stack = []\n \n   public void write(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=7, args_size=4\n          0: iload_3\n          1: istore        4\n          3: iload_2\n          4: istore        5\n-         6: iload         4\n-         8: ifle          51\n-        11: iload         4\n-        13: aload_0\n-        14: getfield      #19                 // Field chunkSize:I\n-        17: invokestatic  #23                 // Method java/lang/Math.min:(II)I\n-        20: istore        6\n-        22: aload_0\n-        23: getfield      #29                 // Field out:Ljava/io/OutputStream;\n-        26: aload_1\n-        27: iload         5\n-        29: iload         6\n-        31: invokevirtual #33                 // Method java/io/OutputStream.write:([BII)V\n-        34: iload         4\n-        36: iload         6\n-        38: isub\n-        39: istore        4\n-        41: iload         5\n-        43: iload         6\n-        45: iadd\n-        46: istore        5\n-        48: goto          6\n+         6: goto          46\n+         9: iload         4\n+        11: aload_0\n+        12: getfield      #26                 // Field chunkSize:I\n+        15: invokestatic  #36                 // Method java/lang/Math.min:(II)I\n+        18: istore        6\n+        20: aload_0\n+        21: getfield      #42                 // Field out:Ljava/io/OutputStream;\n+        24: aload_1\n+        25: iload         5\n+        27: iload         6\n+        29: invokevirtual #45                 // Method java/io/OutputStream.write:([BII)V\n+        32: iload         4\n+        34: iload         6\n+        36: isub\n+        37: istore        4\n+        39: iload         5\n+        41: iload         6\n+        43: iadd\n+        44: istore        5\n+        46: iload         4\n+        48: ifgt          9\n         51: return\n       LineNumberTable:\n         line 74: 0\n         line 75: 3\n         line 76: 6\n-        line 77: 11\n-        line 78: 22\n-        line 79: 34\n-        line 80: 41\n-        line 81: 48\n+        line 77: 9\n+        line 78: 20\n+        line 79: 32\n+        line 80: 39\n+        line 76: 46\n         line 82: 51\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           22      26     6 chunk   I\n             0      52     0  this   Lorg/apache/commons/io/output/ChunkedOutputStream;\n             0      52     1  data   [B\n             0      52     2 srcOffset   I\n             0      52     3 length   I\n             3      49     4 bytes   I\n             6      46     5 dstOffset   I\n+           20      26     6 chunk   I\n       StackMapTable: number_of_entries = 2\n         frame_type = 253 /* append */\n-          offset_delta = 6\n+          offset_delta = 9\n           locals = [ int, int ]\n-        frame_type = 44 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n+        frame_type = 36 /* same */\n }\n SourceFile: \"ChunkedOutputStream.java\"\n"}]}
