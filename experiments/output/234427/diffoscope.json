{"diffoscope-json-version": 1, "source1": "first/AndFileFilter.class", "source2": "second/AndFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,80 +18,84 @@\n     private static final long serialVersionUID = 7215974688563965257L;\n     private final List<IOFileFilter> fileFilters;\n     \n     public AndFileFilter() {\n         this(0);\n     }\n     \n-    private AndFileFilter(final ArrayList<IOFileFilter> initialList) {\n-        this.fileFilters = Objects.requireNonNull(initialList, \"initialList\");\n+    private AndFileFilter(final ArrayList<IOFileFilter> obj) {\n+        this.fileFilters = Objects.requireNonNull(obj, \"initialList\");\n     }\n     \n     private AndFileFilter(final int initialCapacity) {\n         this(new ArrayList<IOFileFilter>(initialCapacity));\n     }\n     \n-    public AndFileFilter(final IOFileFilter filter1, final IOFileFilter filter2) {\n+    public AndFileFilter(final IOFileFilter ioFileFilter, final IOFileFilter ioFileFilter2) {\n         this(2);\n-        this.addFileFilter(filter1);\n-        this.addFileFilter(filter2);\n+        this.addFileFilter(ioFileFilter);\n+        this.addFileFilter(ioFileFilter2);\n     }\n     \n-    public AndFileFilter(final IOFileFilter... fileFilters) {\n-        this(((IOFileFilter[])Objects.requireNonNull(fileFilters, \"fileFilters\")).length);\n-        this.addFileFilter(fileFilters);\n+    public AndFileFilter(final IOFileFilter... obj) {\n+        this(((IOFileFilter[])Objects.requireNonNull(obj, \"fileFilters\")).length);\n+        this.addFileFilter(obj);\n     }\n     \n-    public AndFileFilter(final List<IOFileFilter> fileFilters) {\n-        this(new ArrayList<IOFileFilter>((Collection<? extends IOFileFilter>)Objects.requireNonNull(fileFilters, \"fileFilters\")));\n+    public AndFileFilter(final List<IOFileFilter> obj) {\n+        this(new ArrayList<IOFileFilter>((Collection<? extends IOFileFilter>)Objects.requireNonNull(obj, \"fileFilters\")));\n     }\n     \n     public boolean accept(final File file) {\n         if (this.isEmpty()) {\n             return false;\n         }\n-        for (final IOFileFilter fileFilter : this.fileFilters) {\n-            if (!fileFilter.accept(file)) {\n+        final Iterator<IOFileFilter> iterator = this.fileFilters.iterator();\n+        while (iterator.hasNext()) {\n+            if (!((IOFileFilter)iterator.next()).accept(file)) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n-    public boolean accept(final File file, final String name) {\n+    public boolean accept(final File file, final String s) {\n         if (this.isEmpty()) {\n             return false;\n         }\n-        for (final IOFileFilter fileFilter : this.fileFilters) {\n-            if (!fileFilter.accept(file, name)) {\n+        final Iterator<IOFileFilter> iterator = this.fileFilters.iterator();\n+        while (iterator.hasNext()) {\n+            if (!((IOFileFilter)iterator.next()).accept(file, s)) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n-    public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {\n+    public FileVisitResult accept(final Path path, final BasicFileAttributes basicFileAttributes) {\n         if (this.isEmpty()) {\n             return FileVisitResult.TERMINATE;\n         }\n-        for (final IOFileFilter fileFilter : this.fileFilters) {\n-            if (fileFilter.accept(file, attributes) != FileVisitResult.CONTINUE) {\n+        final Iterator<IOFileFilter> iterator = this.fileFilters.iterator();\n+        while (iterator.hasNext()) {\n+            if (((IOFileFilter)iterator.next()).accept(path, basicFileAttributes) != FileVisitResult.CONTINUE) {\n                 return FileVisitResult.TERMINATE;\n             }\n         }\n         return FileVisitResult.CONTINUE;\n     }\n     \n-    public void addFileFilter(final IOFileFilter fileFilter) {\n-        this.fileFilters.add(Objects.requireNonNull(fileFilter, \"fileFilter\"));\n+    public void addFileFilter(final IOFileFilter obj) {\n+        this.fileFilters.add(Objects.requireNonNull(obj, \"fileFilter\"));\n     }\n     \n-    public void addFileFilter(final IOFileFilter... fileFilters) {\n-        for (final IOFileFilter fileFilter : (IOFileFilter[])Objects.requireNonNull(fileFilters, \"fileFilters\")) {\n-            this.addFileFilter(fileFilter);\n+    public void addFileFilter(final IOFileFilter... obj) {\n+        final IOFileFilter[] array = (IOFileFilter[])Objects.requireNonNull(obj, \"fileFilters\");\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            this.addFileFilter(array[i]);\n         }\n     }\n     \n     public List<IOFileFilter> getFileFilters() {\n         return Collections.unmodifiableList((List<? extends IOFileFilter>)this.fileFilters);\n     }\n     \n@@ -99,26 +103,26 @@\n         return this.fileFilters.isEmpty();\n     }\n     \n     public boolean removeFileFilter(final IOFileFilter ioFileFilter) {\n         return this.fileFilters.remove(ioFileFilter);\n     }\n     \n-    public void setFileFilters(final List<IOFileFilter> fileFilters) {\n+    public void setFileFilters(final List<IOFileFilter> list) {\n         this.fileFilters.clear();\n-        this.fileFilters.addAll(fileFilters);\n+        this.fileFilters.addAll(list);\n     }\n     \n     public String toString() {\n-        final StringBuilder buffer = new StringBuilder();\n-        buffer.append(super.toString());\n-        buffer.append(\"(\");\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(super.toString());\n+        sb.append(\"(\");\n         for (int i = 0; i < this.fileFilters.size(); ++i) {\n             if (i > 0) {\n-                buffer.append(\",\");\n+                sb.append(\",\");\n             }\n-            buffer.append(this.fileFilters.get(i));\n+            sb.append(this.fileFilters.get(i));\n         }\n-        buffer.append(\")\");\n-        return buffer.toString();\n+        sb.append(\")\");\n+        return sb.toString();\n     }\n }\n"}]}
