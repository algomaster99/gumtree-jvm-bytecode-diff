{"diffoscope-json-version": 1, "source1": "first/ControlFlowGraph.class", "source2": "second/ControlFlowGraph.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,41 +14,38 @@\n     private final ExceptionHandlers exceptionhandlers;\n     private final Map<InstructionHandle, InstructionContext> instructionContexts;\n     \n     public ControlFlowGraph(final MethodGen methodGen) {\n         this(methodGen, true);\n     }\n     \n-    public ControlFlowGraph(final MethodGen methodGen, final boolean enableJustIceCheck) {\n+    public ControlFlowGraph(final MethodGen methodGen, final boolean b) {\n         this.instructionContexts = new HashMap<InstructionHandle, InstructionContext>();\n-        this.subroutines = new Subroutines(methodGen, enableJustIceCheck);\n+        this.subroutines = new Subroutines(methodGen, b);\n         this.exceptionhandlers = new ExceptionHandlers(methodGen);\n-        final InstructionHandle[] instructionHandles;\n-        final InstructionHandle[] instructionhandles = instructionHandles = methodGen.getInstructionList().getInstructionHandles();\n-        for (final InstructionHandle instructionhandle : instructionHandles) {\n-            this.instructionContexts.put(instructionhandle, (InstructionContext)new ControlFlowGraph.InstructionContextImpl(this, instructionhandle));\n+        for (final InstructionHandle instructionHandle : methodGen.getInstructionList().getInstructionHandles()) {\n+            this.instructionContexts.put(instructionHandle, (InstructionContext)new ControlFlowGraph.InstructionContextImpl(this, instructionHandle));\n         }\n     }\n     \n-    public InstructionContext contextOf(final InstructionHandle inst) {\n-        final InstructionContext ic = (InstructionContext)this.instructionContexts.get(inst);\n-        if (ic == null) {\n+    public InstructionContext contextOf(final InstructionHandle instructionHandle) {\n+        final InstructionContext instructionContext = (InstructionContext)this.instructionContexts.get(instructionHandle);\n+        if (instructionContext == null) {\n             throw new AssertionViolatedException(\"InstructionContext requested for an InstructionHandle that's not known!\");\n         }\n-        return ic;\n+        return instructionContext;\n     }\n     \n-    public InstructionContext[] contextsOf(final InstructionHandle[] insts) {\n-        final InstructionContext[] ret = new InstructionContext[insts.length];\n-        Arrays.setAll(ret, i -> this.contextOf(insts[i]));\n-        return ret;\n+    public InstructionContext[] contextsOf(final InstructionHandle[] array) {\n+        final InstructionContext[] array2 = new InstructionContext[array.length];\n+        Arrays.setAll(array2, n2 -> this.contextOf(array3[n2]));\n+        return array2;\n     }\n     \n     public InstructionContext[] getInstructionContexts() {\n-        final InstructionContext[] ret = new InstructionContext[this.instructionContexts.size()];\n-        return this.instructionContexts.values().toArray(ret);\n+        return this.instructionContexts.values().toArray(new InstructionContext[this.instructionContexts.size()]);\n     }\n     \n-    public boolean isDead(final InstructionHandle i) {\n-        return this.subroutines.subroutineOf(i) == null;\n+    public boolean isDead(final InstructionHandle instructionHandle) {\n+        return this.subroutines.subroutineOf(instructionHandle) == null;\n     }\n }\n"}]}
