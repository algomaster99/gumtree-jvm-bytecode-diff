{"diffoscope-json-version": 1, "source1": "first/NumberOutput.class", "source2": "second/NumberOutput.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,253 +1,253 @@\n-  SHA-256 checksum 8002b158b248a45b7bb6c29efd111947fd19a83b4f4b0f45a164cefc62b549e0\n+  SHA-256 checksum db8c97f503b9fa9155ee56407892c9540454e036e85f5e31ef5d81f34b0458d3\n   Compiled from \"NumberOutput.java\"\n public final class com.fasterxml.jackson.core.io.NumberOutput\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n-  this_class: #79                         // com/fasterxml/jackson/core/io/NumberOutput\n-  super_class: #80                        // java/lang/Object\n+  this_class: #11                         // com/fasterxml/jackson/core/io/NumberOutput\n+  super_class: #2                         // java/lang/Object\n   interfaces: 0, fields: 10, methods: 28, attributes: 1\n Constant pool:\n-    #1 = Methodref          #80.#159      // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #160          // java/lang/Integer\n-    #3 = Integer            -2147483648\n-    #4 = Methodref          #79.#161      // com/fasterxml/jackson/core/io/NumberOutput._outputSmallestI:([CI)I\n-    #5 = Fieldref           #79.#162      // com/fasterxml/jackson/core/io/NumberOutput.MILLION:I\n-    #6 = Methodref          #79.#163      // com/fasterxml/jackson/core/io/NumberOutput._leading3:(I[CI)I\n-    #7 = Methodref          #79.#164      // com/fasterxml/jackson/core/io/NumberOutput._full3:(I[CI)I\n-    #8 = Fieldref           #79.#165      // com/fasterxml/jackson/core/io/NumberOutput.BILLION:I\n-    #9 = Methodref          #79.#166      // com/fasterxml/jackson/core/io/NumberOutput._outputFullBillion:(I[CI)I\n-   #10 = Methodref          #79.#167      // com/fasterxml/jackson/core/io/NumberOutput._outputSmallestI:([BI)I\n-   #11 = Methodref          #79.#168      // com/fasterxml/jackson/core/io/NumberOutput._leading3:(I[BI)I\n-   #12 = Methodref          #79.#169      // com/fasterxml/jackson/core/io/NumberOutput._full3:(I[BI)I\n-   #13 = Methodref          #79.#170      // com/fasterxml/jackson/core/io/NumberOutput._outputFullBillion:(I[BI)I\n-   #14 = Fieldref           #79.#171      // com/fasterxml/jackson/core/io/NumberOutput.MIN_INT_AS_LONG:J\n-   #15 = Methodref          #79.#172      // com/fasterxml/jackson/core/io/NumberOutput.outputInt:(I[CI)I\n-   #16 = Class              #173          // java/lang/Long\n-   #17 = Long               -9223372036854775808l\n-   #19 = Methodref          #79.#174      // com/fasterxml/jackson/core/io/NumberOutput._outputSmallestL:([CI)I\n-   #20 = Fieldref           #79.#175      // com/fasterxml/jackson/core/io/NumberOutput.MAX_INT_AS_LONG:J\n-   #21 = Fieldref           #79.#176      // com/fasterxml/jackson/core/io/NumberOutput.BILLION_L:J\n-   #22 = Methodref          #79.#177      // com/fasterxml/jackson/core/io/NumberOutput._outputUptoBillion:(I[CI)I\n-   #23 = Methodref          #79.#178      // com/fasterxml/jackson/core/io/NumberOutput.outputInt:(I[BI)I\n-   #24 = Methodref          #79.#179      // com/fasterxml/jackson/core/io/NumberOutput._outputSmallestL:([BI)I\n-   #25 = Methodref          #79.#180      // com/fasterxml/jackson/core/io/NumberOutput._outputUptoBillion:(I[BI)I\n-   #26 = Fieldref           #79.#181      // com/fasterxml/jackson/core/io/NumberOutput.sSmallIntStrs:[Ljava/lang/String;\n-   #27 = Fieldref           #79.#182      // com/fasterxml/jackson/core/io/NumberOutput.sSmallIntStrs2:[Ljava/lang/String;\n-   #28 = Methodref          #2.#183       // java/lang/Integer.toString:(I)Ljava/lang/String;\n-   #29 = Long               2147483647l\n-   #31 = Long               -2147483648l\n-   #33 = Methodref          #79.#183      // com/fasterxml/jackson/core/io/NumberOutput.toString:(I)Ljava/lang/String;\n-   #34 = Methodref          #16.#184      // java/lang/Long.toString:(J)Ljava/lang/String;\n-   #35 = Methodref          #79.#185      // com/fasterxml/jackson/core/io/NumberOutput.toString:(DZ)Ljava/lang/String;\n-   #36 = Methodref          #186.#187     // com/fasterxml/jackson/core/io/schubfach/DoubleToDecimal.toString:(D)Ljava/lang/String;\n-   #37 = Methodref          #188.#187     // java/lang/Double.toString:(D)Ljava/lang/String;\n-   #38 = Methodref          #79.#189      // com/fasterxml/jackson/core/io/NumberOutput.toString:(FZ)Ljava/lang/String;\n-   #39 = Methodref          #190.#191     // com/fasterxml/jackson/core/io/schubfach/FloatToDecimal.toString:(F)Ljava/lang/String;\n-   #40 = Methodref          #192.#191     // java/lang/Float.toString:(F)Ljava/lang/String;\n-   #41 = Methodref          #188.#193     // java/lang/Double.isFinite:(D)Z\n-   #42 = Methodref          #192.#194     // java/lang/Float.isFinite:(F)Z\n-   #43 = Methodref          #79.#195      // com/fasterxml/jackson/core/io/NumberOutput._outputUptoMillion:([CIII)I\n-   #44 = Fieldref           #79.#196      // com/fasterxml/jackson/core/io/NumberOutput.TRIPLET_TO_CHARS:[I\n-   #45 = Methodref          #79.#197      // com/fasterxml/jackson/core/io/NumberOutput._outputUptoMillion:([BIII)I\n-   #46 = Fieldref           #79.#198      // com/fasterxml/jackson/core/io/NumberOutput.SMALLEST_LONG:Ljava/lang/String;\n-   #47 = Methodref          #57.#199      // java/lang/String.length:()I\n-   #48 = Methodref          #57.#200      // java/lang/String.getChars:(II[CI)V\n-   #49 = Methodref          #57.#201      // java/lang/String.charAt:(I)C\n-   #50 = Fieldref           #79.#202      // com/fasterxml/jackson/core/io/NumberOutput.SMALLEST_INT:Ljava/lang/String;\n-   #51 = Integer            1000000\n-   #52 = Integer            1000000000\n-   #53 = Long               1000000000l\n-   #55 = Methodref          #57.#203      // java/lang/String.valueOf:(I)Ljava/lang/String;\n-   #56 = Methodref          #57.#204      // java/lang/String.valueOf:(J)Ljava/lang/String;\n-   #57 = Class              #205          // java/lang/String\n-   #58 = String             #206          // 0\n-   #59 = String             #207          // 1\n-   #60 = String             #208          // 2\n-   #61 = String             #209          // 3\n-   #62 = String             #210          // 4\n-   #63 = String             #211          // 5\n-   #64 = String             #212          // 6\n-   #65 = String             #213          // 7\n-   #66 = String             #214          // 8\n-   #67 = String             #215          // 9\n-   #68 = String             #216          // 10\n-   #69 = String             #217          // -1\n-   #70 = String             #218          // -2\n-   #71 = String             #219          // -3\n-   #72 = String             #220          // -4\n-   #73 = String             #221          // -5\n-   #74 = String             #222          // -6\n-   #75 = String             #223          // -7\n-   #76 = String             #224          // -8\n-   #77 = String             #225          // -9\n-   #78 = String             #226          // -10\n-   #79 = Class              #227          // com/fasterxml/jackson/core/io/NumberOutput\n-   #80 = Class              #228          // java/lang/Object\n-   #81 = Utf8               MILLION\n-   #82 = Utf8               I\n-   #83 = Utf8               BILLION\n-   #84 = Utf8               BILLION_L\n-   #85 = Utf8               J\n-   #86 = Utf8               MIN_INT_AS_LONG\n-   #87 = Utf8               MAX_INT_AS_LONG\n-   #88 = Utf8               SMALLEST_INT\n-   #89 = Utf8               Ljava/lang/String;\n-   #90 = Utf8               SMALLEST_LONG\n-   #91 = Utf8               TRIPLET_TO_CHARS\n-   #92 = Utf8               [I\n-   #93 = Utf8               sSmallIntStrs\n-   #94 = Utf8               [Ljava/lang/String;\n-   #95 = Utf8               sSmallIntStrs2\n-   #96 = Utf8               <init>\n-   #97 = Utf8               ()V\n-   #98 = Utf8               Code\n-   #99 = Utf8               LineNumberTable\n-  #100 = Utf8               LocalVariableTable\n-  #101 = Utf8               this\n-  #102 = Utf8               Lcom/fasterxml/jackson/core/io/NumberOutput;\n-  #103 = Utf8               outputInt\n-  #104 = Utf8               (I[CI)I\n-  #105 = Utf8               thousands\n-  #106 = Utf8               v\n-  #107 = Utf8               b\n-  #108 = Utf8               [C\n-  #109 = Utf8               off\n-  #110 = Utf8               newValue\n-  #111 = Utf8               ones\n-  #112 = Utf8               StackMapTable\n-  #113 = Utf8               (I[BI)I\n-  #114 = Utf8               [B\n-  #115 = Utf8               outputLong\n-  #116 = Utf8               (J[CI)I\n-  #117 = Utf8               hi\n-  #118 = Utf8               upper\n-  #119 = Utf8               (J[BI)I\n-  #120 = Utf8               toString\n-  #121 = Utf8               (I)Ljava/lang/String;\n-  #122 = Utf8               v2\n-  #123 = Utf8               (J)Ljava/lang/String;\n-  #124 = Utf8               (D)Ljava/lang/String;\n-  #125 = Utf8               D\n-  #126 = Utf8               (DZ)Ljava/lang/String;\n-  #127 = Utf8               useFastWriter\n-  #128 = Utf8               Z\n-  #129 = Utf8               (F)Ljava/lang/String;\n-  #130 = Utf8               F\n-  #131 = Utf8               (FZ)Ljava/lang/String;\n-  #132 = Utf8               notFinite\n-  #133 = Utf8               (D)Z\n-  #134 = Utf8               value\n-  #135 = Utf8               (F)Z\n-  #136 = Utf8               _outputUptoBillion\n-  #137 = Utf8               millions\n-  #138 = Utf8               enc\n-  #139 = Utf8               _outputFullBillion\n-  #140 = Utf8               _outputUptoMillion\n-  #141 = Utf8               ([CIII)I\n-  #142 = Utf8               ([BIII)I\n-  #143 = Utf8               _leading3\n-  #144 = Utf8               t\n-  #145 = Utf8               _full3\n-  #146 = Utf8               _outputSmallestL\n-  #147 = Utf8               ([CI)I\n-  #148 = Utf8               len\n-  #149 = Utf8               ([BI)I\n-  #150 = Utf8               i\n-  #151 = Utf8               _outputSmallestI\n-  #152 = Utf8               <clinit>\n-  #153 = Utf8               i3\n-  #154 = Utf8               i2\n-  #155 = Utf8               i1\n-  #156 = Utf8               fullIx\n-  #157 = Utf8               SourceFile\n-  #158 = Utf8               NumberOutput.java\n-  #159 = NameAndType        #96:#97       // \"<init>\":()V\n-  #160 = Utf8               java/lang/Integer\n-  #161 = NameAndType        #151:#147     // _outputSmallestI:([CI)I\n-  #162 = NameAndType        #81:#82       // MILLION:I\n-  #163 = NameAndType        #143:#104     // _leading3:(I[CI)I\n-  #164 = NameAndType        #145:#104     // _full3:(I[CI)I\n-  #165 = NameAndType        #83:#82       // BILLION:I\n-  #166 = NameAndType        #139:#104     // _outputFullBillion:(I[CI)I\n-  #167 = NameAndType        #151:#149     // _outputSmallestI:([BI)I\n-  #168 = NameAndType        #143:#113     // _leading3:(I[BI)I\n-  #169 = NameAndType        #145:#113     // _full3:(I[BI)I\n-  #170 = NameAndType        #139:#113     // _outputFullBillion:(I[BI)I\n-  #171 = NameAndType        #86:#85       // MIN_INT_AS_LONG:J\n-  #172 = NameAndType        #103:#104     // outputInt:(I[CI)I\n-  #173 = Utf8               java/lang/Long\n-  #174 = NameAndType        #146:#147     // _outputSmallestL:([CI)I\n-  #175 = NameAndType        #87:#85       // MAX_INT_AS_LONG:J\n-  #176 = NameAndType        #84:#85       // BILLION_L:J\n-  #177 = NameAndType        #136:#104     // _outputUptoBillion:(I[CI)I\n-  #178 = NameAndType        #103:#113     // outputInt:(I[BI)I\n-  #179 = NameAndType        #146:#149     // _outputSmallestL:([BI)I\n-  #180 = NameAndType        #136:#113     // _outputUptoBillion:(I[BI)I\n-  #181 = NameAndType        #93:#94       // sSmallIntStrs:[Ljava/lang/String;\n-  #182 = NameAndType        #95:#94       // sSmallIntStrs2:[Ljava/lang/String;\n-  #183 = NameAndType        #120:#121     // toString:(I)Ljava/lang/String;\n-  #184 = NameAndType        #120:#123     // toString:(J)Ljava/lang/String;\n-  #185 = NameAndType        #120:#126     // toString:(DZ)Ljava/lang/String;\n-  #186 = Class              #229          // com/fasterxml/jackson/core/io/schubfach/DoubleToDecimal\n-  #187 = NameAndType        #120:#124     // toString:(D)Ljava/lang/String;\n-  #188 = Class              #230          // java/lang/Double\n-  #189 = NameAndType        #120:#131     // toString:(FZ)Ljava/lang/String;\n-  #190 = Class              #231          // com/fasterxml/jackson/core/io/schubfach/FloatToDecimal\n-  #191 = NameAndType        #120:#129     // toString:(F)Ljava/lang/String;\n-  #192 = Class              #232          // java/lang/Float\n-  #193 = NameAndType        #233:#133     // isFinite:(D)Z\n-  #194 = NameAndType        #233:#135     // isFinite:(F)Z\n-  #195 = NameAndType        #140:#141     // _outputUptoMillion:([CIII)I\n-  #196 = NameAndType        #91:#92       // TRIPLET_TO_CHARS:[I\n-  #197 = NameAndType        #140:#142     // _outputUptoMillion:([BIII)I\n-  #198 = NameAndType        #90:#89       // SMALLEST_LONG:Ljava/lang/String;\n-  #199 = NameAndType        #234:#235     // length:()I\n-  #200 = NameAndType        #236:#237     // getChars:(II[CI)V\n-  #201 = NameAndType        #238:#239     // charAt:(I)C\n-  #202 = NameAndType        #88:#89       // SMALLEST_INT:Ljava/lang/String;\n-  #203 = NameAndType        #240:#121     // valueOf:(I)Ljava/lang/String;\n-  #204 = NameAndType        #240:#123     // valueOf:(J)Ljava/lang/String;\n-  #205 = Utf8               java/lang/String\n-  #206 = Utf8               0\n-  #207 = Utf8               1\n-  #208 = Utf8               2\n-  #209 = Utf8               3\n-  #210 = Utf8               4\n-  #211 = Utf8               5\n-  #212 = Utf8               6\n-  #213 = Utf8               7\n-  #214 = Utf8               8\n-  #215 = Utf8               9\n-  #216 = Utf8               10\n-  #217 = Utf8               -1\n-  #218 = Utf8               -2\n-  #219 = Utf8               -3\n-  #220 = Utf8               -4\n-  #221 = Utf8               -5\n-  #222 = Utf8               -6\n-  #223 = Utf8               -7\n-  #224 = Utf8               -8\n-  #225 = Utf8               -9\n-  #226 = Utf8               -10\n-  #227 = Utf8               com/fasterxml/jackson/core/io/NumberOutput\n-  #228 = Utf8               java/lang/Object\n-  #229 = Utf8               com/fasterxml/jackson/core/io/schubfach/DoubleToDecimal\n-  #230 = Utf8               java/lang/Double\n-  #231 = Utf8               com/fasterxml/jackson/core/io/schubfach/FloatToDecimal\n-  #232 = Utf8               java/lang/Float\n-  #233 = Utf8               isFinite\n-  #234 = Utf8               length\n-  #235 = Utf8               ()I\n-  #236 = Utf8               getChars\n-  #237 = Utf8               (II[CI)V\n-  #238 = Utf8               charAt\n-  #239 = Utf8               (I)C\n-  #240 = Utf8               valueOf\n+    #1 = Methodref          #2.#3         // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #4            // java/lang/Object\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               java/lang/Object\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Class              #8            // java/lang/Integer\n+    #8 = Utf8               java/lang/Integer\n+    #9 = Integer            -2147483648\n+   #10 = Methodref          #11.#12       // com/fasterxml/jackson/core/io/NumberOutput._outputSmallestI:([CI)I\n+   #11 = Class              #13           // com/fasterxml/jackson/core/io/NumberOutput\n+   #12 = NameAndType        #14:#15       // _outputSmallestI:([CI)I\n+   #13 = Utf8               com/fasterxml/jackson/core/io/NumberOutput\n+   #14 = Utf8               _outputSmallestI\n+   #15 = Utf8               ([CI)I\n+   #16 = Fieldref           #11.#17       // com/fasterxml/jackson/core/io/NumberOutput.MILLION:I\n+   #17 = NameAndType        #18:#19       // MILLION:I\n+   #18 = Utf8               MILLION\n+   #19 = Utf8               I\n+   #20 = Methodref          #11.#21       // com/fasterxml/jackson/core/io/NumberOutput._leading3:(I[CI)I\n+   #21 = NameAndType        #22:#23       // _leading3:(I[CI)I\n+   #22 = Utf8               _leading3\n+   #23 = Utf8               (I[CI)I\n+   #24 = Methodref          #11.#25       // com/fasterxml/jackson/core/io/NumberOutput._full3:(I[CI)I\n+   #25 = NameAndType        #26:#23       // _full3:(I[CI)I\n+   #26 = Utf8               _full3\n+   #27 = Fieldref           #11.#28       // com/fasterxml/jackson/core/io/NumberOutput.BILLION:I\n+   #28 = NameAndType        #29:#19       // BILLION:I\n+   #29 = Utf8               BILLION\n+   #30 = Methodref          #11.#31       // com/fasterxml/jackson/core/io/NumberOutput._outputFullBillion:(I[CI)I\n+   #31 = NameAndType        #32:#23       // _outputFullBillion:(I[CI)I\n+   #32 = Utf8               _outputFullBillion\n+   #33 = Methodref          #11.#34       // com/fasterxml/jackson/core/io/NumberOutput._outputSmallestI:([BI)I\n+   #34 = NameAndType        #14:#35       // _outputSmallestI:([BI)I\n+   #35 = Utf8               ([BI)I\n+   #36 = Methodref          #11.#37       // com/fasterxml/jackson/core/io/NumberOutput._leading3:(I[BI)I\n+   #37 = NameAndType        #22:#38       // _leading3:(I[BI)I\n+   #38 = Utf8               (I[BI)I\n+   #39 = Methodref          #11.#40       // com/fasterxml/jackson/core/io/NumberOutput._full3:(I[BI)I\n+   #40 = NameAndType        #26:#38       // _full3:(I[BI)I\n+   #41 = Methodref          #11.#42       // com/fasterxml/jackson/core/io/NumberOutput._outputFullBillion:(I[BI)I\n+   #42 = NameAndType        #32:#38       // _outputFullBillion:(I[BI)I\n+   #43 = Fieldref           #11.#44       // com/fasterxml/jackson/core/io/NumberOutput.MIN_INT_AS_LONG:J\n+   #44 = NameAndType        #45:#46       // MIN_INT_AS_LONG:J\n+   #45 = Utf8               MIN_INT_AS_LONG\n+   #46 = Utf8               J\n+   #47 = Methodref          #11.#48       // com/fasterxml/jackson/core/io/NumberOutput.outputInt:(I[CI)I\n+   #48 = NameAndType        #49:#23       // outputInt:(I[CI)I\n+   #49 = Utf8               outputInt\n+   #50 = Class              #51           // java/lang/Long\n+   #51 = Utf8               java/lang/Long\n+   #52 = Long               -9223372036854775808l\n+   #54 = Methodref          #11.#55       // com/fasterxml/jackson/core/io/NumberOutput._outputSmallestL:([CI)I\n+   #55 = NameAndType        #56:#15       // _outputSmallestL:([CI)I\n+   #56 = Utf8               _outputSmallestL\n+   #57 = Fieldref           #11.#58       // com/fasterxml/jackson/core/io/NumberOutput.MAX_INT_AS_LONG:J\n+   #58 = NameAndType        #59:#46       // MAX_INT_AS_LONG:J\n+   #59 = Utf8               MAX_INT_AS_LONG\n+   #60 = Fieldref           #11.#61       // com/fasterxml/jackson/core/io/NumberOutput.BILLION_L:J\n+   #61 = NameAndType        #62:#46       // BILLION_L:J\n+   #62 = Utf8               BILLION_L\n+   #63 = Methodref          #11.#64       // com/fasterxml/jackson/core/io/NumberOutput._outputUptoBillion:(I[CI)I\n+   #64 = NameAndType        #65:#23       // _outputUptoBillion:(I[CI)I\n+   #65 = Utf8               _outputUptoBillion\n+   #66 = Methodref          #11.#67       // com/fasterxml/jackson/core/io/NumberOutput.outputInt:(I[BI)I\n+   #67 = NameAndType        #49:#38       // outputInt:(I[BI)I\n+   #68 = Methodref          #11.#69       // com/fasterxml/jackson/core/io/NumberOutput._outputSmallestL:([BI)I\n+   #69 = NameAndType        #56:#35       // _outputSmallestL:([BI)I\n+   #70 = Methodref          #11.#71       // com/fasterxml/jackson/core/io/NumberOutput._outputUptoBillion:(I[BI)I\n+   #71 = NameAndType        #65:#38       // _outputUptoBillion:(I[BI)I\n+   #72 = Fieldref           #11.#73       // com/fasterxml/jackson/core/io/NumberOutput.sSmallIntStrs:[Ljava/lang/String;\n+   #73 = NameAndType        #74:#75       // sSmallIntStrs:[Ljava/lang/String;\n+   #74 = Utf8               sSmallIntStrs\n+   #75 = Utf8               [Ljava/lang/String;\n+   #76 = Fieldref           #11.#77       // com/fasterxml/jackson/core/io/NumberOutput.sSmallIntStrs2:[Ljava/lang/String;\n+   #77 = NameAndType        #78:#75       // sSmallIntStrs2:[Ljava/lang/String;\n+   #78 = Utf8               sSmallIntStrs2\n+   #79 = Methodref          #7.#80        // java/lang/Integer.toString:(I)Ljava/lang/String;\n+   #80 = NameAndType        #81:#82       // toString:(I)Ljava/lang/String;\n+   #81 = Utf8               toString\n+   #82 = Utf8               (I)Ljava/lang/String;\n+   #83 = Long               2147483647l\n+   #85 = Long               -2147483648l\n+   #87 = Methodref          #11.#80       // com/fasterxml/jackson/core/io/NumberOutput.toString:(I)Ljava/lang/String;\n+   #88 = Methodref          #50.#89       // java/lang/Long.toString:(J)Ljava/lang/String;\n+   #89 = NameAndType        #81:#90       // toString:(J)Ljava/lang/String;\n+   #90 = Utf8               (J)Ljava/lang/String;\n+   #91 = Methodref          #11.#92       // com/fasterxml/jackson/core/io/NumberOutput.toString:(DZ)Ljava/lang/String;\n+   #92 = NameAndType        #81:#93       // toString:(DZ)Ljava/lang/String;\n+   #93 = Utf8               (DZ)Ljava/lang/String;\n+   #94 = Methodref          #95.#96       // com/fasterxml/jackson/core/io/schubfach/DoubleToDecimal.toString:(D)Ljava/lang/String;\n+   #95 = Class              #97           // com/fasterxml/jackson/core/io/schubfach/DoubleToDecimal\n+   #96 = NameAndType        #81:#98       // toString:(D)Ljava/lang/String;\n+   #97 = Utf8               com/fasterxml/jackson/core/io/schubfach/DoubleToDecimal\n+   #98 = Utf8               (D)Ljava/lang/String;\n+   #99 = Methodref          #100.#96      // java/lang/Double.toString:(D)Ljava/lang/String;\n+  #100 = Class              #101          // java/lang/Double\n+  #101 = Utf8               java/lang/Double\n+  #102 = Methodref          #11.#103      // com/fasterxml/jackson/core/io/NumberOutput.toString:(FZ)Ljava/lang/String;\n+  #103 = NameAndType        #81:#104      // toString:(FZ)Ljava/lang/String;\n+  #104 = Utf8               (FZ)Ljava/lang/String;\n+  #105 = Methodref          #106.#107     // com/fasterxml/jackson/core/io/schubfach/FloatToDecimal.toString:(F)Ljava/lang/String;\n+  #106 = Class              #108          // com/fasterxml/jackson/core/io/schubfach/FloatToDecimal\n+  #107 = NameAndType        #81:#109      // toString:(F)Ljava/lang/String;\n+  #108 = Utf8               com/fasterxml/jackson/core/io/schubfach/FloatToDecimal\n+  #109 = Utf8               (F)Ljava/lang/String;\n+  #110 = Methodref          #111.#107     // java/lang/Float.toString:(F)Ljava/lang/String;\n+  #111 = Class              #112          // java/lang/Float\n+  #112 = Utf8               java/lang/Float\n+  #113 = Methodref          #100.#114     // java/lang/Double.isFinite:(D)Z\n+  #114 = NameAndType        #115:#116     // isFinite:(D)Z\n+  #115 = Utf8               isFinite\n+  #116 = Utf8               (D)Z\n+  #117 = Methodref          #111.#118     // java/lang/Float.isFinite:(F)Z\n+  #118 = NameAndType        #115:#119     // isFinite:(F)Z\n+  #119 = Utf8               (F)Z\n+  #120 = Methodref          #11.#121      // com/fasterxml/jackson/core/io/NumberOutput._outputUptoMillion:([CIII)I\n+  #121 = NameAndType        #122:#123     // _outputUptoMillion:([CIII)I\n+  #122 = Utf8               _outputUptoMillion\n+  #123 = Utf8               ([CIII)I\n+  #124 = Fieldref           #11.#125      // com/fasterxml/jackson/core/io/NumberOutput.TRIPLET_TO_CHARS:[I\n+  #125 = NameAndType        #126:#127     // TRIPLET_TO_CHARS:[I\n+  #126 = Utf8               TRIPLET_TO_CHARS\n+  #127 = Utf8               [I\n+  #128 = Methodref          #11.#129      // com/fasterxml/jackson/core/io/NumberOutput._outputUptoMillion:([BIII)I\n+  #129 = NameAndType        #122:#130     // _outputUptoMillion:([BIII)I\n+  #130 = Utf8               ([BIII)I\n+  #131 = Fieldref           #11.#132      // com/fasterxml/jackson/core/io/NumberOutput.SMALLEST_LONG:Ljava/lang/String;\n+  #132 = NameAndType        #133:#134     // SMALLEST_LONG:Ljava/lang/String;\n+  #133 = Utf8               SMALLEST_LONG\n+  #134 = Utf8               Ljava/lang/String;\n+  #135 = Methodref          #136.#137     // java/lang/String.length:()I\n+  #136 = Class              #138          // java/lang/String\n+  #137 = NameAndType        #139:#140     // length:()I\n+  #138 = Utf8               java/lang/String\n+  #139 = Utf8               length\n+  #140 = Utf8               ()I\n+  #141 = Methodref          #136.#142     // java/lang/String.getChars:(II[CI)V\n+  #142 = NameAndType        #143:#144     // getChars:(II[CI)V\n+  #143 = Utf8               getChars\n+  #144 = Utf8               (II[CI)V\n+  #145 = Methodref          #136.#146     // java/lang/String.charAt:(I)C\n+  #146 = NameAndType        #147:#148     // charAt:(I)C\n+  #147 = Utf8               charAt\n+  #148 = Utf8               (I)C\n+  #149 = Fieldref           #11.#150      // com/fasterxml/jackson/core/io/NumberOutput.SMALLEST_INT:Ljava/lang/String;\n+  #150 = NameAndType        #151:#134     // SMALLEST_INT:Ljava/lang/String;\n+  #151 = Utf8               SMALLEST_INT\n+  #152 = Integer            1000000\n+  #153 = Integer            1000000000\n+  #154 = Long               1000000000l\n+  #156 = Methodref          #136.#157     // java/lang/String.valueOf:(I)Ljava/lang/String;\n+  #157 = NameAndType        #158:#82      // valueOf:(I)Ljava/lang/String;\n+  #158 = Utf8               valueOf\n+  #159 = Methodref          #136.#160     // java/lang/String.valueOf:(J)Ljava/lang/String;\n+  #160 = NameAndType        #158:#90      // valueOf:(J)Ljava/lang/String;\n+  #161 = String             #162          // 0\n+  #162 = Utf8               0\n+  #163 = String             #164          // 1\n+  #164 = Utf8               1\n+  #165 = String             #166          // 2\n+  #166 = Utf8               2\n+  #167 = String             #168          // 3\n+  #168 = Utf8               3\n+  #169 = String             #170          // 4\n+  #170 = Utf8               4\n+  #171 = String             #172          // 5\n+  #172 = Utf8               5\n+  #173 = String             #174          // 6\n+  #174 = Utf8               6\n+  #175 = String             #176          // 7\n+  #176 = Utf8               7\n+  #177 = String             #178          // 8\n+  #178 = Utf8               8\n+  #179 = String             #180          // 9\n+  #180 = Utf8               9\n+  #181 = String             #182          // 10\n+  #182 = Utf8               10\n+  #183 = String             #184          // -1\n+  #184 = Utf8               -1\n+  #185 = String             #186          // -2\n+  #186 = Utf8               -2\n+  #187 = String             #188          // -3\n+  #188 = Utf8               -3\n+  #189 = String             #190          // -4\n+  #190 = Utf8               -4\n+  #191 = String             #192          // -5\n+  #192 = Utf8               -5\n+  #193 = String             #194          // -6\n+  #194 = Utf8               -6\n+  #195 = String             #196          // -7\n+  #196 = Utf8               -7\n+  #197 = String             #198          // -8\n+  #198 = Utf8               -8\n+  #199 = String             #200          // -9\n+  #200 = Utf8               -9\n+  #201 = String             #202          // -10\n+  #202 = Utf8               -10\n+  #203 = Utf8               Code\n+  #204 = Utf8               LineNumberTable\n+  #205 = Utf8               LocalVariableTable\n+  #206 = Utf8               this\n+  #207 = Utf8               Lcom/fasterxml/jackson/core/io/NumberOutput;\n+  #208 = Utf8               thousands\n+  #209 = Utf8               v\n+  #210 = Utf8               b\n+  #211 = Utf8               [C\n+  #212 = Utf8               off\n+  #213 = Utf8               newValue\n+  #214 = Utf8               ones\n+  #215 = Utf8               StackMapTable\n+  #216 = Utf8               [B\n+  #217 = Utf8               outputLong\n+  #218 = Utf8               (J[CI)I\n+  #219 = Utf8               hi\n+  #220 = Utf8               upper\n+  #221 = Utf8               (J[BI)I\n+  #222 = Utf8               v2\n+  #223 = Utf8               D\n+  #224 = Utf8               useFastWriter\n+  #225 = Utf8               Z\n+  #226 = Utf8               F\n+  #227 = Utf8               notFinite\n+  #228 = Utf8               value\n+  #229 = Utf8               millions\n+  #230 = Utf8               enc\n+  #231 = Utf8               t\n+  #232 = Utf8               len\n+  #233 = Utf8               i\n+  #234 = Utf8               <clinit>\n+  #235 = Utf8               i3\n+  #236 = Utf8               i2\n+  #237 = Utf8               i1\n+  #238 = Utf8               fullIx\n+  #239 = Utf8               SourceFile\n+  #240 = Utf8               NumberOutput.java\n {\n   private static int MILLION;\n     descriptor: I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n \n   private static int BILLION;\n     descriptor: I\n@@ -303,30 +303,30 @@\n     descriptor: (I[CI)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=6, args_size=3\n          0: iload_0\n          1: ifge          27\n          4: iload_0\n-         5: ldc           #3                  // int -2147483648\n+         5: ldc           #9                  // int -2147483648\n          7: if_icmpne     16\n         10: aload_1\n         11: iload_2\n-        12: invokestatic  #4                  // Method _outputSmallestI:([CI)I\n+        12: invokestatic  #10                 // Method _outputSmallestI:([CI)I\n         15: ireturn\n         16: aload_1\n         17: iload_2\n         18: iinc          2, 1\n         21: bipush        45\n         23: castore\n         24: iload_0\n         25: ineg\n         26: istore_0\n         27: iload_0\n-        28: getstatic     #5                  // Field MILLION:I\n+        28: getstatic     #16                 // Field MILLION:I\n         31: if_icmpge     96\n         34: iload_0\n         35: sipush        1000\n         38: if_icmpge     66\n         41: iload_0\n         42: bipush        10\n         44: if_icmpge     59\n@@ -340,50 +340,50 @@\n         55: iload_2\n         56: iconst_1\n         57: iadd\n         58: ireturn\n         59: iload_0\n         60: aload_1\n         61: iload_2\n-        62: invokestatic  #6                  // Method _leading3:(I[CI)I\n+        62: invokestatic  #20                 // Method _leading3:(I[CI)I\n         65: ireturn\n         66: iload_0\n         67: sipush        1000\n         70: idiv\n         71: istore_3\n         72: iload_0\n         73: iload_3\n         74: sipush        1000\n         77: imul\n         78: isub\n         79: istore_0\n         80: iload_3\n         81: aload_1\n         82: iload_2\n-        83: invokestatic  #6                  // Method _leading3:(I[CI)I\n+        83: invokestatic  #20                 // Method _leading3:(I[CI)I\n         86: istore_2\n         87: iload_0\n         88: aload_1\n         89: iload_2\n-        90: invokestatic  #7                  // Method _full3:(I[CI)I\n+        90: invokestatic  #24                 // Method _full3:(I[CI)I\n         93: istore_2\n         94: iload_2\n         95: ireturn\n         96: iload_0\n-        97: getstatic     #8                  // Field BILLION:I\n+        97: getstatic     #27                 // Field BILLION:I\n        100: if_icmplt     148\n        103: iload_0\n-       104: getstatic     #8                  // Field BILLION:I\n+       104: getstatic     #27                 // Field BILLION:I\n        107: isub\n        108: istore_0\n        109: iload_0\n-       110: getstatic     #8                  // Field BILLION:I\n+       110: getstatic     #27                 // Field BILLION:I\n        113: if_icmplt     133\n        116: iload_0\n-       117: getstatic     #8                  // Field BILLION:I\n+       117: getstatic     #27                 // Field BILLION:I\n        120: isub\n        121: istore_0\n        122: aload_1\n        123: iload_2\n        124: iinc          2, 1\n        127: bipush        50\n        129: castore\n@@ -392,15 +392,15 @@\n        134: iload_2\n        135: iinc          2, 1\n        138: bipush        49\n        140: castore\n        141: iload_0\n        142: aload_1\n        143: iload_2\n-       144: invokestatic  #9                  // Method _outputFullBillion:(I[CI)I\n+       144: invokestatic  #30                 // Method _outputFullBillion:(I[CI)I\n        147: ireturn\n        148: iload_0\n        149: sipush        1000\n        152: idiv\n        153: istore_3\n        154: iload_0\n        155: iload_3\n@@ -419,25 +419,25 @@\n        173: sipush        1000\n        176: imul\n        177: isub\n        178: istore        5\n        180: iload_3\n        181: aload_1\n        182: iload_2\n-       183: invokestatic  #6                  // Method _leading3:(I[CI)I\n+       183: invokestatic  #20                 // Method _leading3:(I[CI)I\n        186: istore_2\n        187: iload         5\n        189: aload_1\n        190: iload_2\n-       191: invokestatic  #7                  // Method _full3:(I[CI)I\n+       191: invokestatic  #24                 // Method _full3:(I[CI)I\n        194: istore_2\n        195: iload         4\n        197: aload_1\n        198: iload_2\n-       199: invokestatic  #7                  // Method _full3:(I[CI)I\n+       199: invokestatic  #24                 // Method _full3:(I[CI)I\n        202: ireturn\n       LineNumberTable:\n         line 70: 0\n         line 71: 4\n         line 74: 10\n         line 76: 16\n         line 77: 24\n@@ -490,30 +490,30 @@\n     descriptor: (I[BI)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=6, args_size=3\n          0: iload_0\n          1: ifge          27\n          4: iload_0\n-         5: ldc           #3                  // int -2147483648\n+         5: ldc           #9                  // int -2147483648\n          7: if_icmpne     16\n         10: aload_1\n         11: iload_2\n-        12: invokestatic  #10                 // Method _outputSmallestI:([BI)I\n+        12: invokestatic  #33                 // Method _outputSmallestI:([BI)I\n         15: ireturn\n         16: aload_1\n         17: iload_2\n         18: iinc          2, 1\n         21: bipush        45\n         23: bastore\n         24: iload_0\n         25: ineg\n         26: istore_0\n         27: iload_0\n-        28: getstatic     #5                  // Field MILLION:I\n+        28: getstatic     #16                 // Field MILLION:I\n         31: if_icmpge     101\n         34: iload_0\n         35: sipush        1000\n         38: if_icmpge     71\n         41: iload_0\n         42: bipush        10\n         44: if_icmpge     61\n@@ -525,15 +525,15 @@\n         55: iadd\n         56: i2b\n         57: bastore\n         58: goto          99\n         61: iload_0\n         62: aload_1\n         63: iload_2\n-        64: invokestatic  #11                 // Method _leading3:(I[BI)I\n+        64: invokestatic  #36                 // Method _leading3:(I[BI)I\n         67: istore_2\n         68: goto          99\n         71: iload_0\n         72: sipush        1000\n         75: idiv\n         76: istore_3\n         77: iload_0\n@@ -541,35 +541,35 @@\n         79: sipush        1000\n         82: imul\n         83: isub\n         84: istore_0\n         85: iload_3\n         86: aload_1\n         87: iload_2\n-        88: invokestatic  #11                 // Method _leading3:(I[BI)I\n+        88: invokestatic  #36                 // Method _leading3:(I[BI)I\n         91: istore_2\n         92: iload_0\n         93: aload_1\n         94: iload_2\n-        95: invokestatic  #12                 // Method _full3:(I[BI)I\n+        95: invokestatic  #39                 // Method _full3:(I[BI)I\n         98: istore_2\n         99: iload_2\n        100: ireturn\n        101: iload_0\n-       102: getstatic     #8                  // Field BILLION:I\n+       102: getstatic     #27                 // Field BILLION:I\n        105: if_icmplt     153\n        108: iload_0\n-       109: getstatic     #8                  // Field BILLION:I\n+       109: getstatic     #27                 // Field BILLION:I\n        112: isub\n        113: istore_0\n        114: iload_0\n-       115: getstatic     #8                  // Field BILLION:I\n+       115: getstatic     #27                 // Field BILLION:I\n        118: if_icmplt     138\n        121: iload_0\n-       122: getstatic     #8                  // Field BILLION:I\n+       122: getstatic     #27                 // Field BILLION:I\n        125: isub\n        126: istore_0\n        127: aload_1\n        128: iload_2\n        129: iinc          2, 1\n        132: bipush        50\n        134: bastore\n@@ -578,15 +578,15 @@\n        139: iload_2\n        140: iinc          2, 1\n        143: bipush        49\n        145: bastore\n        146: iload_0\n        147: aload_1\n        148: iload_2\n-       149: invokestatic  #13                 // Method _outputFullBillion:(I[BI)I\n+       149: invokestatic  #41                 // Method _outputFullBillion:(I[BI)I\n        152: ireturn\n        153: iload_0\n        154: sipush        1000\n        157: idiv\n        158: istore_3\n        159: iload_0\n        160: iload_3\n@@ -605,25 +605,25 @@\n        178: sipush        1000\n        181: imul\n        182: isub\n        183: istore        5\n        185: iload_3\n        186: aload_1\n        187: iload_2\n-       188: invokestatic  #11                 // Method _leading3:(I[BI)I\n+       188: invokestatic  #36                 // Method _leading3:(I[BI)I\n        191: istore_2\n        192: iload         5\n        194: aload_1\n        195: iload_2\n-       196: invokestatic  #12                 // Method _full3:(I[BI)I\n+       196: invokestatic  #39                 // Method _full3:(I[BI)I\n        199: istore_2\n        200: iload         4\n        202: aload_1\n        203: iload_2\n-       204: invokestatic  #12                 // Method _full3:(I[BI)I\n+       204: invokestatic  #39                 // Method _full3:(I[BI)I\n        207: ireturn\n       LineNumberTable:\n         line 123: 0\n         line 124: 4\n         line 125: 10\n         line 127: 16\n         line 128: 24\n@@ -678,98 +678,98 @@\n     Code:\n       stack=6, locals=8, args_size=3\n          0: lload_0\n          1: lconst_0\n          2: lcmp\n          3: ifge          50\n          6: lload_0\n-         7: getstatic     #14                 // Field MIN_INT_AS_LONG:J\n+         7: getstatic     #43                 // Field MIN_INT_AS_LONG:J\n         10: lcmp\n         11: ifle          22\n         14: lload_0\n         15: l2i\n         16: aload_2\n         17: iload_3\n-        18: invokestatic  #15                 // Method outputInt:(I[CI)I\n+        18: invokestatic  #47                 // Method outputInt:(I[CI)I\n         21: ireturn\n         22: lload_0\n-        23: ldc2_w        #17                 // long -9223372036854775808l\n+        23: ldc2_w        #52                 // long -9223372036854775808l\n         26: lcmp\n         27: ifne          36\n         30: aload_2\n         31: iload_3\n-        32: invokestatic  #19                 // Method _outputSmallestL:([CI)I\n+        32: invokestatic  #54                 // Method _outputSmallestL:([CI)I\n         35: ireturn\n         36: aload_2\n         37: iload_3\n         38: iinc          3, 1\n         41: bipush        45\n         43: castore\n         44: lload_0\n         45: lneg\n         46: lstore_0\n         47: goto          66\n         50: lload_0\n-        51: getstatic     #20                 // Field MAX_INT_AS_LONG:J\n+        51: getstatic     #57                 // Field MAX_INT_AS_LONG:J\n         54: lcmp\n         55: ifgt          66\n         58: lload_0\n         59: l2i\n         60: aload_2\n         61: iload_3\n-        62: invokestatic  #15                 // Method outputInt:(I[CI)I\n+        62: invokestatic  #47                 // Method outputInt:(I[CI)I\n         65: ireturn\n         66: lload_0\n-        67: getstatic     #21                 // Field BILLION_L:J\n+        67: getstatic     #60                 // Field BILLION_L:J\n         70: ldiv\n         71: lstore        4\n         73: lload_0\n         74: lload         4\n-        76: getstatic     #21                 // Field BILLION_L:J\n+        76: getstatic     #60                 // Field BILLION_L:J\n         79: lmul\n         80: lsub\n         81: lstore_0\n         82: lload         4\n-        84: getstatic     #21                 // Field BILLION_L:J\n+        84: getstatic     #60                 // Field BILLION_L:J\n         87: lcmp\n         88: ifge          103\n         91: lload         4\n         93: l2i\n         94: aload_2\n         95: iload_3\n-        96: invokestatic  #22                 // Method _outputUptoBillion:(I[CI)I\n+        96: invokestatic  #63                 // Method _outputUptoBillion:(I[CI)I\n         99: istore_3\n        100: goto          140\n        103: lload         4\n-       105: getstatic     #21                 // Field BILLION_L:J\n+       105: getstatic     #60                 // Field BILLION_L:J\n        108: ldiv\n        109: lstore        6\n        111: lload         4\n        113: lload         6\n-       115: getstatic     #21                 // Field BILLION_L:J\n+       115: getstatic     #60                 // Field BILLION_L:J\n        118: lmul\n        119: lsub\n        120: lstore        4\n        122: lload         6\n        124: l2i\n        125: aload_2\n        126: iload_3\n-       127: invokestatic  #6                  // Method _leading3:(I[CI)I\n+       127: invokestatic  #20                 // Method _leading3:(I[CI)I\n        130: istore_3\n        131: lload         4\n        133: l2i\n        134: aload_2\n        135: iload_3\n-       136: invokestatic  #9                  // Method _outputFullBillion:(I[CI)I\n+       136: invokestatic  #30                 // Method _outputFullBillion:(I[CI)I\n        139: istore_3\n        140: lload_0\n        141: l2i\n        142: aload_2\n        143: iload_3\n-       144: invokestatic  #9                  // Method _outputFullBillion:(I[CI)I\n+       144: invokestatic  #30                 // Method _outputFullBillion:(I[CI)I\n        147: ireturn\n       LineNumberTable:\n         line 182: 0\n         line 183: 6\n         line 184: 14\n         line 186: 22\n         line 187: 30\n@@ -809,98 +809,98 @@\n     Code:\n       stack=6, locals=8, args_size=3\n          0: lload_0\n          1: lconst_0\n          2: lcmp\n          3: ifge          50\n          6: lload_0\n-         7: getstatic     #14                 // Field MIN_INT_AS_LONG:J\n+         7: getstatic     #43                 // Field MIN_INT_AS_LONG:J\n         10: lcmp\n         11: ifle          22\n         14: lload_0\n         15: l2i\n         16: aload_2\n         17: iload_3\n-        18: invokestatic  #23                 // Method outputInt:(I[BI)I\n+        18: invokestatic  #66                 // Method outputInt:(I[BI)I\n         21: ireturn\n         22: lload_0\n-        23: ldc2_w        #17                 // long -9223372036854775808l\n+        23: ldc2_w        #52                 // long -9223372036854775808l\n         26: lcmp\n         27: ifne          36\n         30: aload_2\n         31: iload_3\n-        32: invokestatic  #24                 // Method _outputSmallestL:([BI)I\n+        32: invokestatic  #68                 // Method _outputSmallestL:([BI)I\n         35: ireturn\n         36: aload_2\n         37: iload_3\n         38: iinc          3, 1\n         41: bipush        45\n         43: bastore\n         44: lload_0\n         45: lneg\n         46: lstore_0\n         47: goto          66\n         50: lload_0\n-        51: getstatic     #20                 // Field MAX_INT_AS_LONG:J\n+        51: getstatic     #57                 // Field MAX_INT_AS_LONG:J\n         54: lcmp\n         55: ifgt          66\n         58: lload_0\n         59: l2i\n         60: aload_2\n         61: iload_3\n-        62: invokestatic  #23                 // Method outputInt:(I[BI)I\n+        62: invokestatic  #66                 // Method outputInt:(I[BI)I\n         65: ireturn\n         66: lload_0\n-        67: getstatic     #21                 // Field BILLION_L:J\n+        67: getstatic     #60                 // Field BILLION_L:J\n         70: ldiv\n         71: lstore        4\n         73: lload_0\n         74: lload         4\n-        76: getstatic     #21                 // Field BILLION_L:J\n+        76: getstatic     #60                 // Field BILLION_L:J\n         79: lmul\n         80: lsub\n         81: lstore_0\n         82: lload         4\n-        84: getstatic     #21                 // Field BILLION_L:J\n+        84: getstatic     #60                 // Field BILLION_L:J\n         87: lcmp\n         88: ifge          103\n         91: lload         4\n         93: l2i\n         94: aload_2\n         95: iload_3\n-        96: invokestatic  #25                 // Method _outputUptoBillion:(I[BI)I\n+        96: invokestatic  #70                 // Method _outputUptoBillion:(I[BI)I\n         99: istore_3\n        100: goto          140\n        103: lload         4\n-       105: getstatic     #21                 // Field BILLION_L:J\n+       105: getstatic     #60                 // Field BILLION_L:J\n        108: ldiv\n        109: lstore        6\n        111: lload         4\n        113: lload         6\n-       115: getstatic     #21                 // Field BILLION_L:J\n+       115: getstatic     #60                 // Field BILLION_L:J\n        118: lmul\n        119: lsub\n        120: lstore        4\n        122: lload         6\n        124: l2i\n        125: aload_2\n        126: iload_3\n-       127: invokestatic  #11                 // Method _leading3:(I[BI)I\n+       127: invokestatic  #36                 // Method _leading3:(I[BI)I\n        130: istore_3\n        131: lload         4\n        133: l2i\n        134: aload_2\n        135: iload_3\n-       136: invokestatic  #13                 // Method _outputFullBillion:(I[BI)I\n+       136: invokestatic  #41                 // Method _outputFullBillion:(I[BI)I\n        139: istore_3\n        140: lload_0\n        141: l2i\n        142: aload_2\n        143: iload_3\n-       144: invokestatic  #13                 // Method _outputFullBillion:(I[BI)I\n+       144: invokestatic  #41                 // Method _outputFullBillion:(I[BI)I\n        147: ireturn\n       LineNumberTable:\n         line 216: 0\n         line 217: 6\n         line 218: 14\n         line 220: 22\n         line 221: 30\n@@ -936,38 +936,38 @@\n \n   public static java.lang.String toString(int);\n     descriptor: (I)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: iload_0\n-         1: getstatic     #26                 // Field sSmallIntStrs:[Ljava/lang/String;\n+         1: getstatic     #72                 // Field sSmallIntStrs:[Ljava/lang/String;\n          4: arraylength\n          5: if_icmpge     37\n          8: iload_0\n          9: iflt          18\n-        12: getstatic     #26                 // Field sSmallIntStrs:[Ljava/lang/String;\n+        12: getstatic     #72                 // Field sSmallIntStrs:[Ljava/lang/String;\n         15: iload_0\n         16: aaload\n         17: areturn\n         18: iload_0\n         19: ineg\n         20: iconst_1\n         21: isub\n         22: istore_1\n         23: iload_1\n-        24: getstatic     #27                 // Field sSmallIntStrs2:[Ljava/lang/String;\n+        24: getstatic     #76                 // Field sSmallIntStrs2:[Ljava/lang/String;\n         27: arraylength\n         28: if_icmpge     37\n-        31: getstatic     #27                 // Field sSmallIntStrs2:[Ljava/lang/String;\n+        31: getstatic     #76                 // Field sSmallIntStrs2:[Ljava/lang/String;\n         34: iload_1\n         35: aaload\n         36: areturn\n         37: iload_0\n-        38: invokestatic  #28                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;\n+        38: invokestatic  #79                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;\n         41: areturn\n       LineNumberTable:\n         line 260: 0\n         line 261: 8\n         line 262: 12\n         line 264: 18\n         line 265: 23\n@@ -983,27 +983,27 @@\n \n   public static java.lang.String toString(long);\n     descriptor: (J)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=2, args_size=1\n          0: lload_0\n-         1: ldc2_w        #29                 // long 2147483647l\n+         1: ldc2_w        #83                 // long 2147483647l\n          4: lcmp\n          5: ifgt          22\n          8: lload_0\n-         9: ldc2_w        #31                 // long -2147483648l\n+         9: ldc2_w        #85                 // long -2147483648l\n         12: lcmp\n         13: iflt          22\n         16: lload_0\n         17: l2i\n-        18: invokestatic  #33                 // Method toString:(I)Ljava/lang/String;\n+        18: invokestatic  #87                 // Method toString:(I)Ljava/lang/String;\n         21: areturn\n         22: lload_0\n-        23: invokestatic  #34                 // Method java/lang/Long.toString:(J)Ljava/lang/String;\n+        23: invokestatic  #88                 // Method java/lang/Long.toString:(J)Ljava/lang/String;\n         26: areturn\n       LineNumberTable:\n         line 273: 0\n         line 274: 16\n         line 276: 22\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -1014,15 +1014,15 @@\n   public static java.lang.String toString(double);\n     descriptor: (D)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: dload_0\n          1: iconst_0\n-         2: invokestatic  #35                 // Method toString:(DZ)Ljava/lang/String;\n+         2: invokestatic  #91                 // Method toString:(DZ)Ljava/lang/String;\n          5: areturn\n       LineNumberTable:\n         line 284: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0     v   D\n \n@@ -1030,18 +1030,18 @@\n     descriptor: (DZ)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=3, args_size=2\n          0: iload_2\n          1: ifeq          11\n          4: dload_0\n-         5: invokestatic  #36                 // Method com/fasterxml/jackson/core/io/schubfach/DoubleToDecimal.toString:(D)Ljava/lang/String;\n+         5: invokestatic  #94                 // Method com/fasterxml/jackson/core/io/schubfach/DoubleToDecimal.toString:(D)Ljava/lang/String;\n          8: goto          15\n         11: dload_0\n-        12: invokestatic  #37                 // Method java/lang/Double.toString:(D)Ljava/lang/String;\n+        12: invokestatic  #99                 // Method java/lang/Double.toString:(D)Ljava/lang/String;\n         15: areturn\n       LineNumberTable:\n         line 294: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      16     0     v   D\n             0      16     2 useFastWriter   Z\n@@ -1053,15 +1053,15 @@\n   public static java.lang.String toString(float);\n     descriptor: (F)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: fload_0\n          1: iconst_0\n-         2: invokestatic  #38                 // Method toString:(FZ)Ljava/lang/String;\n+         2: invokestatic  #102                // Method toString:(FZ)Ljava/lang/String;\n          5: areturn\n       LineNumberTable:\n         line 303: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0     v   F\n \n@@ -1069,18 +1069,18 @@\n     descriptor: (FZ)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=1, locals=2, args_size=2\n          0: iload_1\n          1: ifeq          11\n          4: fload_0\n-         5: invokestatic  #39                 // Method com/fasterxml/jackson/core/io/schubfach/FloatToDecimal.toString:(F)Ljava/lang/String;\n+         5: invokestatic  #105                // Method com/fasterxml/jackson/core/io/schubfach/FloatToDecimal.toString:(F)Ljava/lang/String;\n          8: goto          15\n         11: fload_0\n-        12: invokestatic  #40                 // Method java/lang/Float.toString:(F)Ljava/lang/String;\n+        12: invokestatic  #110                // Method java/lang/Float.toString:(F)Ljava/lang/String;\n         15: areturn\n       LineNumberTable:\n         line 313: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      16     0     v   F\n             0      16     1 useFastWriter   Z\n@@ -1091,15 +1091,15 @@\n \n   public static boolean notFinite(double);\n     descriptor: (D)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: dload_0\n-         1: invokestatic  #41                 // Method java/lang/Double.isFinite:(D)Z\n+         1: invokestatic  #113                // Method java/lang/Double.isFinite:(D)Z\n          4: ifne          11\n          7: iconst_1\n          8: goto          12\n         11: iconst_0\n         12: ireturn\n       LineNumberTable:\n         line 333: 0\n@@ -1113,15 +1113,15 @@\n \n   public static boolean notFinite(float);\n     descriptor: (F)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: fload_0\n-         1: invokestatic  #42                 // Method java/lang/Float.isFinite:(F)Z\n+         1: invokestatic  #117                // Method java/lang/Float.isFinite:(F)Z\n          4: ifne          11\n          7: iconst_1\n          8: goto          12\n         11: iconst_0\n         12: ireturn\n       LineNumberTable:\n         line 347: 0\n@@ -1135,23 +1135,23 @@\n \n   private static int _outputUptoBillion(int, char[], int);\n     descriptor: (I[CI)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=7, args_size=3\n          0: iload_0\n-         1: getstatic     #5                  // Field MILLION:I\n+         1: getstatic     #16                 // Field MILLION:I\n          4: if_icmpge     45\n          7: iload_0\n          8: sipush        1000\n         11: if_icmpge     21\n         14: iload_0\n         15: aload_1\n         16: iload_2\n-        17: invokestatic  #6                  // Method _leading3:(I[CI)I\n+        17: invokestatic  #20                 // Method _leading3:(I[CI)I\n         20: ireturn\n         21: iload_0\n         22: sipush        1000\n         25: idiv\n         26: istore_3\n         27: iload_0\n         28: iload_3\n@@ -1159,15 +1159,15 @@\n         32: imul\n         33: isub\n         34: istore        4\n         36: aload_1\n         37: iload_2\n         38: iload_3\n         39: iload         4\n-        41: invokestatic  #43                 // Method _outputUptoMillion:([CIII)I\n+        41: invokestatic  #120                // Method _outputUptoMillion:([CIII)I\n         44: ireturn\n         45: iload_0\n         46: sipush        1000\n         49: idiv\n         50: istore_3\n         51: iload_0\n         52: iload_3\n@@ -1184,17 +1184,17 @@\n         70: sipush        1000\n         73: imul\n         74: isub\n         75: istore_3\n         76: iload         5\n         78: aload_1\n         79: iload_2\n-        80: invokestatic  #6                  // Method _leading3:(I[CI)I\n+        80: invokestatic  #20                 // Method _leading3:(I[CI)I\n         83: istore_2\n-        84: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+        84: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n         87: iload_3\n         88: iaload\n         89: istore        6\n         91: aload_1\n         92: iload_2\n         93: iinc          2, 1\n         96: iload         6\n@@ -1216,15 +1216,15 @@\n        119: iload_2\n        120: iinc          2, 1\n        123: iload         6\n        125: bipush        127\n        127: iand\n        128: i2c\n        129: castore\n-       130: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+       130: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n        133: iload         4\n        135: iaload\n        136: istore        6\n        138: aload_1\n        139: iload_2\n        140: iinc          2, 1\n        143: iload         6\n@@ -1303,15 +1303,15 @@\n         11: imul\n         12: isub\n         13: istore        4\n         15: iload_3\n         16: sipush        1000\n         19: idiv\n         20: istore        5\n-        22: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+        22: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n         25: iload         5\n         27: iaload\n         28: istore        6\n         30: aload_1\n         31: iload_2\n         32: iinc          2, 1\n         35: iload         6\n@@ -1339,15 +1339,15 @@\n         68: castore\n         69: iload_3\n         70: iload         5\n         72: sipush        1000\n         75: imul\n         76: isub\n         77: istore_3\n-        78: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+        78: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n         81: iload_3\n         82: iaload\n         83: istore        6\n         85: aload_1\n         86: iload_2\n         87: iinc          2, 1\n         90: iload         6\n@@ -1369,15 +1369,15 @@\n        113: iload_2\n        114: iinc          2, 1\n        117: iload         6\n        119: bipush        127\n        121: iand\n        122: i2c\n        123: castore\n-       124: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+       124: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n        127: iload         4\n        129: iaload\n        130: istore        6\n        132: aload_1\n        133: iload_2\n        134: iinc          2, 1\n        137: iload         6\n@@ -1435,23 +1435,23 @@\n \n   private static int _outputUptoBillion(int, byte[], int);\n     descriptor: (I[BI)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=7, args_size=3\n          0: iload_0\n-         1: getstatic     #5                  // Field MILLION:I\n+         1: getstatic     #16                 // Field MILLION:I\n          4: if_icmpge     45\n          7: iload_0\n          8: sipush        1000\n         11: if_icmpge     21\n         14: iload_0\n         15: aload_1\n         16: iload_2\n-        17: invokestatic  #11                 // Method _leading3:(I[BI)I\n+        17: invokestatic  #36                 // Method _leading3:(I[BI)I\n         20: ireturn\n         21: iload_0\n         22: sipush        1000\n         25: idiv\n         26: istore_3\n         27: iload_0\n         28: iload_3\n@@ -1459,15 +1459,15 @@\n         32: imul\n         33: isub\n         34: istore        4\n         36: aload_1\n         37: iload_2\n         38: iload_3\n         39: iload         4\n-        41: invokestatic  #45                 // Method _outputUptoMillion:([BIII)I\n+        41: invokestatic  #128                // Method _outputUptoMillion:([BIII)I\n         44: ireturn\n         45: iload_0\n         46: sipush        1000\n         49: idiv\n         50: istore_3\n         51: iload_0\n         52: iload_3\n@@ -1484,17 +1484,17 @@\n         70: sipush        1000\n         73: imul\n         74: isub\n         75: istore_3\n         76: iload         5\n         78: aload_1\n         79: iload_2\n-        80: invokestatic  #11                 // Method _leading3:(I[BI)I\n+        80: invokestatic  #36                 // Method _leading3:(I[BI)I\n         83: istore_2\n-        84: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+        84: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n         87: iload_3\n         88: iaload\n         89: istore        6\n         91: aload_1\n         92: iload_2\n         93: iinc          2, 1\n         96: iload         6\n@@ -1512,15 +1512,15 @@\n        114: bastore\n        115: aload_1\n        116: iload_2\n        117: iinc          2, 1\n        120: iload         6\n        122: i2b\n        123: bastore\n-       124: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+       124: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n        127: iload         4\n        129: iaload\n        130: istore        6\n        132: aload_1\n        133: iload_2\n        134: iinc          2, 1\n        137: iload         6\n@@ -1601,15 +1601,15 @@\n         20: istore        5\n         22: iload_3\n         23: iload         5\n         25: sipush        1000\n         28: imul\n         29: isub\n         30: istore_3\n-        31: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+        31: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n         34: iload         5\n         36: iaload\n         37: istore        6\n         39: aload_1\n         40: iload_2\n         41: iinc          2, 1\n         44: iload         6\n@@ -1627,15 +1627,15 @@\n         62: bastore\n         63: aload_1\n         64: iload_2\n         65: iinc          2, 1\n         68: iload         6\n         70: i2b\n         71: bastore\n-        72: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+        72: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n         75: iload_3\n         76: iaload\n         77: istore        6\n         79: aload_1\n         80: iload_2\n         81: iinc          2, 1\n         84: iload         6\n@@ -1653,15 +1653,15 @@\n        102: bastore\n        103: aload_1\n        104: iload_2\n        105: iinc          2, 1\n        108: iload         6\n        110: i2b\n        111: bastore\n-       112: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+       112: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n        115: iload         4\n        117: iaload\n        118: istore        6\n        120: aload_1\n        121: iload_2\n        122: iinc          2, 1\n        125: iload         6\n@@ -1714,15 +1714,15 @@\n            39     116     6   enc   I\n \n   private static int _outputUptoMillion(char[], int, int, int);\n     descriptor: ([CIII)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=5, args_size=4\n-         0: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+         0: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n          3: iload_2\n          4: iaload\n          5: istore        4\n          7: iload_2\n          8: bipush        9\n         10: if_icmple     46\n         13: iload_2\n@@ -1750,15 +1750,15 @@\n         47: iload_1\n         48: iinc          1, 1\n         51: iload         4\n         53: bipush        127\n         55: iand\n         56: i2c\n         57: castore\n-        58: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+        58: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n         61: iload_3\n         62: iaload\n         63: istore        4\n         65: aload_0\n         66: iload_1\n         67: iinc          1, 1\n         70: iload         4\n@@ -1812,15 +1812,15 @@\n         frame_type = 14 /* same */\n \n   private static int _outputUptoMillion(byte[], int, int, int);\n     descriptor: ([BIII)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=5, args_size=4\n-         0: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+         0: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n          3: iload_2\n          4: iaload\n          5: istore        4\n          7: iload_2\n          8: bipush        9\n         10: if_icmple     43\n         13: iload_2\n@@ -1844,15 +1844,15 @@\n         42: bastore\n         43: aload_0\n         44: iload_1\n         45: iinc          1, 1\n         48: iload         4\n         50: i2b\n         51: bastore\n-        52: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+        52: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n         55: iload_3\n         56: iaload\n         57: istore        4\n         59: aload_0\n         60: iload_1\n         61: iinc          1, 1\n         64: iload         4\n@@ -1902,15 +1902,15 @@\n         frame_type = 11 /* same */\n \n   private static int _leading3(int, char[], int);\n     descriptor: (I[CI)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=4, args_size=3\n-         0: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+         0: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n          3: iload_0\n          4: iaload\n          5: istore_3\n          6: iload_0\n          7: bipush        9\n          9: if_icmple     43\n         12: iload_0\n@@ -1965,15 +1965,15 @@\n         frame_type = 13 /* same */\n \n   private static int _leading3(int, byte[], int);\n     descriptor: (I[BI)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=4, args_size=3\n-         0: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+         0: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n          3: iload_0\n          4: iaload\n          5: istore_3\n          6: iload_0\n          7: bipush        9\n          9: if_icmple     40\n         12: iload_0\n@@ -2024,15 +2024,15 @@\n         frame_type = 10 /* same */\n \n   private static int _full3(int, char[], int);\n     descriptor: (I[CI)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=4, args_size=3\n-         0: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+         0: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n          3: iload_0\n          4: iaload\n          5: istore_3\n          6: aload_1\n          7: iload_2\n          8: iinc          2, 1\n         11: iload_3\n@@ -2074,15 +2074,15 @@\n             6      38     3   enc   I\n \n   private static int _full3(int, byte[], int);\n     descriptor: (I[BI)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=4, args_size=3\n-         0: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+         0: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n          3: iload_0\n          4: iaload\n          5: istore_3\n          6: aload_1\n          7: iload_2\n          8: iinc          2, 1\n         11: iload_3\n@@ -2120,23 +2120,23 @@\n             6      32     3   enc   I\n \n   private static int _outputSmallestL(char[], int);\n     descriptor: ([CI)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=3, args_size=2\n-         0: getstatic     #46                 // Field SMALLEST_LONG:Ljava/lang/String;\n-         3: invokevirtual #47                 // Method java/lang/String.length:()I\n+         0: getstatic     #131                // Field SMALLEST_LONG:Ljava/lang/String;\n+         3: invokevirtual #135                // Method java/lang/String.length:()I\n          6: istore_2\n-         7: getstatic     #46                 // Field SMALLEST_LONG:Ljava/lang/String;\n+         7: getstatic     #131                // Field SMALLEST_LONG:Ljava/lang/String;\n         10: iconst_0\n         11: iload_2\n         12: aload_0\n         13: iload_1\n-        14: invokevirtual #48                 // Method java/lang/String.getChars:(II[CI)V\n+        14: invokevirtual #141                // Method java/lang/String.getChars:(II[CI)V\n         17: iload_1\n         18: iload_2\n         19: iadd\n         20: ireturn\n       LineNumberTable:\n         line 550: 0\n         line 551: 7\n@@ -2148,28 +2148,28 @@\n             7      14     2   len   I\n \n   private static int _outputSmallestL(byte[], int);\n     descriptor: ([BI)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=4, args_size=2\n-         0: getstatic     #46                 // Field SMALLEST_LONG:Ljava/lang/String;\n-         3: invokevirtual #47                 // Method java/lang/String.length:()I\n+         0: getstatic     #131                // Field SMALLEST_LONG:Ljava/lang/String;\n+         3: invokevirtual #135                // Method java/lang/String.length:()I\n          6: istore_2\n          7: iconst_0\n          8: istore_3\n          9: iload_3\n         10: iload_2\n         11: if_icmpge     34\n         14: aload_0\n         15: iload_1\n         16: iinc          1, 1\n-        19: getstatic     #46                 // Field SMALLEST_LONG:Ljava/lang/String;\n+        19: getstatic     #131                // Field SMALLEST_LONG:Ljava/lang/String;\n         22: iload_3\n-        23: invokevirtual #49                 // Method java/lang/String.charAt:(I)C\n+        23: invokevirtual #145                // Method java/lang/String.charAt:(I)C\n         26: i2b\n         27: bastore\n         28: iinc          3, 1\n         31: goto          9\n         34: iload_1\n         35: ireturn\n       LineNumberTable:\n@@ -2192,23 +2192,23 @@\n           offset_delta = 24\n \n   private static int _outputSmallestI(char[], int);\n     descriptor: ([CI)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=3, args_size=2\n-         0: getstatic     #50                 // Field SMALLEST_INT:Ljava/lang/String;\n-         3: invokevirtual #47                 // Method java/lang/String.length:()I\n+         0: getstatic     #149                // Field SMALLEST_INT:Ljava/lang/String;\n+         3: invokevirtual #135                // Method java/lang/String.length:()I\n          6: istore_2\n-         7: getstatic     #50                 // Field SMALLEST_INT:Ljava/lang/String;\n+         7: getstatic     #149                // Field SMALLEST_INT:Ljava/lang/String;\n         10: iconst_0\n         11: iload_2\n         12: aload_0\n         13: iload_1\n-        14: invokevirtual #48                 // Method java/lang/String.getChars:(II[CI)V\n+        14: invokevirtual #141                // Method java/lang/String.getChars:(II[CI)V\n         17: iload_1\n         18: iload_2\n         19: iadd\n         20: ireturn\n       LineNumberTable:\n         line 566: 0\n         line 567: 7\n@@ -2220,28 +2220,28 @@\n             7      14     2   len   I\n \n   private static int _outputSmallestI(byte[], int);\n     descriptor: ([BI)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=4, args_size=2\n-         0: getstatic     #50                 // Field SMALLEST_INT:Ljava/lang/String;\n-         3: invokevirtual #47                 // Method java/lang/String.length:()I\n+         0: getstatic     #149                // Field SMALLEST_INT:Ljava/lang/String;\n+         3: invokevirtual #135                // Method java/lang/String.length:()I\n          6: istore_2\n          7: iconst_0\n          8: istore_3\n          9: iload_3\n         10: iload_2\n         11: if_icmpge     34\n         14: aload_0\n         15: iload_1\n         16: iinc          1, 1\n-        19: getstatic     #50                 // Field SMALLEST_INT:Ljava/lang/String;\n+        19: getstatic     #149                // Field SMALLEST_INT:Ljava/lang/String;\n         22: iload_3\n-        23: invokevirtual #49                 // Method java/lang/String.charAt:(I)C\n+        23: invokevirtual #145                // Method java/lang/String.charAt:(I)C\n         26: i2b\n         27: bastore\n         28: iinc          3, 1\n         31: goto          9\n         34: iload_1\n         35: ireturn\n       LineNumberTable:\n@@ -2264,33 +2264,33 @@\n           offset_delta = 24\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=5, args_size=0\n-         0: ldc           #51                 // int 1000000\n-         2: putstatic     #5                  // Field MILLION:I\n-         5: ldc           #52                 // int 1000000000\n-         7: putstatic     #8                  // Field BILLION:I\n-        10: ldc2_w        #53                 // long 1000000000l\n-        13: putstatic     #21                 // Field BILLION_L:J\n-        16: ldc2_w        #31                 // long -2147483648l\n-        19: putstatic     #14                 // Field MIN_INT_AS_LONG:J\n-        22: ldc2_w        #29                 // long 2147483647l\n-        25: putstatic     #20                 // Field MAX_INT_AS_LONG:J\n-        28: ldc           #3                  // int -2147483648\n-        30: invokestatic  #55                 // Method java/lang/String.valueOf:(I)Ljava/lang/String;\n-        33: putstatic     #50                 // Field SMALLEST_INT:Ljava/lang/String;\n-        36: ldc2_w        #17                 // long -9223372036854775808l\n-        39: invokestatic  #56                 // Method java/lang/String.valueOf:(J)Ljava/lang/String;\n-        42: putstatic     #46                 // Field SMALLEST_LONG:Ljava/lang/String;\n+         0: ldc           #152                // int 1000000\n+         2: putstatic     #16                 // Field MILLION:I\n+         5: ldc           #153                // int 1000000000\n+         7: putstatic     #27                 // Field BILLION:I\n+        10: ldc2_w        #154                // long 1000000000l\n+        13: putstatic     #60                 // Field BILLION_L:J\n+        16: ldc2_w        #85                 // long -2147483648l\n+        19: putstatic     #43                 // Field MIN_INT_AS_LONG:J\n+        22: ldc2_w        #83                 // long 2147483647l\n+        25: putstatic     #57                 // Field MAX_INT_AS_LONG:J\n+        28: ldc           #9                  // int -2147483648\n+        30: invokestatic  #156                // Method java/lang/String.valueOf:(I)Ljava/lang/String;\n+        33: putstatic     #149                // Field SMALLEST_INT:Ljava/lang/String;\n+        36: ldc2_w        #52                 // long -9223372036854775808l\n+        39: invokestatic  #159                // Method java/lang/String.valueOf:(J)Ljava/lang/String;\n+        42: putstatic     #131                // Field SMALLEST_LONG:Ljava/lang/String;\n         45: sipush        1000\n         48: newarray       int\n-        50: putstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+        50: putstatic     #124                // Field TRIPLET_TO_CHARS:[I\n         53: iconst_0\n         54: istore_0\n         55: iconst_0\n         56: istore_1\n         57: iload_1\n         58: bipush        10\n         60: if_icmpge     129\n@@ -2316,115 +2316,115 @@\n         92: ishl\n         93: ior\n         94: iload_3\n         95: bipush        48\n         97: iadd\n         98: ior\n         99: istore        4\n-       101: getstatic     #44                 // Field TRIPLET_TO_CHARS:[I\n+       101: getstatic     #124                // Field TRIPLET_TO_CHARS:[I\n        104: iload_0\n        105: iinc          0, 1\n        108: iload         4\n        110: iastore\n        111: iinc          3, 1\n        114: goto          73\n        117: iinc          2, 1\n        120: goto          65\n        123: iinc          1, 1\n        126: goto          57\n        129: bipush        11\n-       131: anewarray     #57                 // class java/lang/String\n+       131: anewarray     #136                // class java/lang/String\n        134: dup\n        135: iconst_0\n-       136: ldc           #58                 // String 0\n+       136: ldc           #161                // String 0\n        138: aastore\n        139: dup\n        140: iconst_1\n-       141: ldc           #59                 // String 1\n+       141: ldc           #163                // String 1\n        143: aastore\n        144: dup\n        145: iconst_2\n-       146: ldc           #60                 // String 2\n+       146: ldc           #165                // String 2\n        148: aastore\n        149: dup\n        150: iconst_3\n-       151: ldc           #61                 // String 3\n+       151: ldc           #167                // String 3\n        153: aastore\n        154: dup\n        155: iconst_4\n-       156: ldc           #62                 // String 4\n+       156: ldc           #169                // String 4\n        158: aastore\n        159: dup\n        160: iconst_5\n-       161: ldc           #63                 // String 5\n+       161: ldc           #171                // String 5\n        163: aastore\n        164: dup\n        165: bipush        6\n-       167: ldc           #64                 // String 6\n+       167: ldc           #173                // String 6\n        169: aastore\n        170: dup\n        171: bipush        7\n-       173: ldc           #65                 // String 7\n+       173: ldc           #175                // String 7\n        175: aastore\n        176: dup\n        177: bipush        8\n-       179: ldc           #66                 // String 8\n+       179: ldc           #177                // String 8\n        181: aastore\n        182: dup\n        183: bipush        9\n-       185: ldc           #67                 // String 9\n+       185: ldc           #179                // String 9\n        187: aastore\n        188: dup\n        189: bipush        10\n-       191: ldc           #68                 // String 10\n+       191: ldc           #181                // String 10\n        193: aastore\n-       194: putstatic     #26                 // Field sSmallIntStrs:[Ljava/lang/String;\n+       194: putstatic     #72                 // Field sSmallIntStrs:[Ljava/lang/String;\n        197: bipush        10\n-       199: anewarray     #57                 // class java/lang/String\n+       199: anewarray     #136                // class java/lang/String\n        202: dup\n        203: iconst_0\n-       204: ldc           #69                 // String -1\n+       204: ldc           #183                // String -1\n        206: aastore\n        207: dup\n        208: iconst_1\n-       209: ldc           #70                 // String -2\n+       209: ldc           #185                // String -2\n        211: aastore\n        212: dup\n        213: iconst_2\n-       214: ldc           #71                 // String -3\n+       214: ldc           #187                // String -3\n        216: aastore\n        217: dup\n        218: iconst_3\n-       219: ldc           #72                 // String -4\n+       219: ldc           #189                // String -4\n        221: aastore\n        222: dup\n        223: iconst_4\n-       224: ldc           #73                 // String -5\n+       224: ldc           #191                // String -5\n        226: aastore\n        227: dup\n        228: iconst_5\n-       229: ldc           #74                 // String -6\n+       229: ldc           #193                // String -6\n        231: aastore\n        232: dup\n        233: bipush        6\n-       235: ldc           #75                 // String -7\n+       235: ldc           #195                // String -7\n        237: aastore\n        238: dup\n        239: bipush        7\n-       241: ldc           #76                 // String -8\n+       241: ldc           #197                // String -8\n        243: aastore\n        244: dup\n        245: bipush        8\n-       247: ldc           #77                 // String -9\n+       247: ldc           #199                // String -9\n        249: aastore\n        250: dup\n        251: bipush        9\n-       253: ldc           #78                 // String -10\n+       253: ldc           #201                // String -10\n        255: aastore\n-       256: putstatic     #27                 // Field sSmallIntStrs2:[Ljava/lang/String;\n+       256: putstatic     #76                 // Field sSmallIntStrs2:[Ljava/lang/String;\n        259: return\n       LineNumberTable:\n         line 8: 0\n         line 9: 5\n         line 10: 10\n         line 12: 16\n         line 13: 22\n"}]}
