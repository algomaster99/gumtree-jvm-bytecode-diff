{"diffoscope-json-version": 1, "source1": "first/KeyManagerUtils.class", "source2": "second/KeyManagerUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,66 +1,64 @@\n \n package org.apache.commons.net.util;\n \n import java.util.Enumeration;\n import java.security.KeyStoreException;\n+import java.io.InputStream;\n import java.io.Closeable;\n import org.apache.commons.net.io.Util;\n-import java.io.InputStream;\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.File;\n import java.security.GeneralSecurityException;\n import javax.net.ssl.KeyManager;\n import java.security.KeyStore;\n \n public final class KeyManagerUtils\n {\n     private static final String DEFAULT_STORE_TYPE;\n     \n     private KeyManagerUtils() {\n     }\n     \n-    public static KeyManager createClientKeyManager(final KeyStore ks, final String keyAlias, final String keyPass) throws GeneralSecurityException {\n-        final KeyManagerUtils.ClientKeyStore cks = new KeyManagerUtils.ClientKeyStore(ks, (keyAlias != null) ? keyAlias : findAlias(ks), keyPass);\n-        return (KeyManager)new KeyManagerUtils.X509KeyManager(cks);\n+    public static KeyManager createClientKeyManager(final KeyStore keyStore, final String s, final String s2) throws GeneralSecurityException {\n+        return (KeyManager)new KeyManagerUtils.X509KeyManager(new KeyManagerUtils.ClientKeyStore(keyStore, (s != null) ? s : findAlias(keyStore), s2));\n     }\n     \n-    public static KeyManager createClientKeyManager(final String storeType, final File storePath, final String storePass, final String keyAlias, final String keyPass) throws IOException, GeneralSecurityException {\n-        final KeyStore ks = loadStore(storeType, storePath, storePass);\n-        return createClientKeyManager(ks, keyAlias, keyPass);\n+    public static KeyManager createClientKeyManager(final String s, final File file, final String s2, final String s3, final String s4) throws IOException, GeneralSecurityException {\n+        return createClientKeyManager(loadStore(s, file, s2), s3, s4);\n     }\n     \n-    public static KeyManager createClientKeyManager(final File storePath, final String storePass, final String keyAlias) throws IOException, GeneralSecurityException {\n-        return createClientKeyManager(KeyManagerUtils.DEFAULT_STORE_TYPE, storePath, storePass, keyAlias, storePass);\n+    public static KeyManager createClientKeyManager(final File file, final String s, final String s2) throws IOException, GeneralSecurityException {\n+        return createClientKeyManager(KeyManagerUtils.DEFAULT_STORE_TYPE, file, s, s2, s);\n     }\n     \n-    public static KeyManager createClientKeyManager(final File storePath, final String storePass) throws IOException, GeneralSecurityException {\n-        return createClientKeyManager(KeyManagerUtils.DEFAULT_STORE_TYPE, storePath, storePass, null, storePass);\n+    public static KeyManager createClientKeyManager(final File file, final String s) throws IOException, GeneralSecurityException {\n+        return createClientKeyManager(KeyManagerUtils.DEFAULT_STORE_TYPE, file, s, null, s);\n     }\n     \n-    private static KeyStore loadStore(final String storeType, final File storePath, final String storePass) throws KeyStoreException, IOException, GeneralSecurityException {\n-        final KeyStore ks = KeyStore.getInstance(storeType);\n-        FileInputStream stream = null;\n+    private static KeyStore loadStore(final String type, final File file, final String s) throws KeyStoreException, IOException, GeneralSecurityException {\n+        final KeyStore instance = KeyStore.getInstance(type);\n+        InputStream stream = null;\n         try {\n-            stream = new FileInputStream(storePath);\n-            ks.load(stream, storePass.toCharArray());\n+            stream = new FileInputStream(file);\n+            instance.load(stream, s.toCharArray());\n         }\n         finally {\n             Util.closeQuietly((Closeable)stream);\n         }\n-        return ks;\n+        return instance;\n     }\n     \n-    private static String findAlias(final KeyStore ks) throws KeyStoreException {\n-        final Enumeration<String> e = ks.aliases();\n-        while (e.hasMoreElements()) {\n-            final String entry = (String)e.nextElement();\n-            if (ks.isKeyEntry(entry)) {\n-                return entry;\n+    private static String findAlias(final KeyStore keyStore) throws KeyStoreException {\n+        final Enumeration<String> aliases = keyStore.aliases();\n+        while (aliases.hasMoreElements()) {\n+            final String alias = (String)aliases.nextElement();\n+            if (keyStore.isKeyEntry(alias)) {\n+                return alias;\n             }\n         }\n         throw new KeyStoreException(\"Cannot find a private key entry\");\n     }\n     \n     static {\n         DEFAULT_STORE_TYPE = KeyStore.getDefaultType();\n"}]}
