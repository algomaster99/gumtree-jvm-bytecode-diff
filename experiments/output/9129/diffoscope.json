{"diffoscope-json-version": 1, "source1": "first/Expander.class", "source2": "second/Expander.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -28,110 +28,61 @@\n import java.nio.file.OpenOption;\n import java.io.File;\n \n public class Expander\n {\n     public void expand(final File archive, final File targetDirectory) throws IOException, ArchiveException {\n         String format = null;\n-        final InputStream i = new BufferedInputStream(Files.newInputStream(archive.toPath(), new OpenOption[0]));\n-        Throwable x0 = null;\n-        try {\n+        try (final InputStream i = new BufferedInputStream(Files.newInputStream(archive.toPath(), new OpenOption[0]))) {\n             format = ArchiveStreamFactory.detect(i);\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, i);\n-        }\n         this.expand(format, archive, targetDirectory);\n     }\n     \n     public void expand(final String format, final File archive, final File targetDirectory) throws IOException, ArchiveException {\n         if (this.prefersSeekableByteChannel(format)) {\n-            final SeekableByteChannel c = FileChannel.open(archive.toPath(), StandardOpenOption.READ);\n-            Throwable x0 = null;\n-            try {\n+            try (final SeekableByteChannel c = FileChannel.open(archive.toPath(), StandardOpenOption.READ)) {\n                 this.expand(format, c, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);\n             }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n-            }\n-            finally {\n-                if (c != null) {\n-                    $closeResource(x0, c);\n-                }\n-            }\n             return;\n         }\n-        final InputStream i = new BufferedInputStream(Files.newInputStream(archive.toPath(), new OpenOption[0]));\n-        Throwable x2 = null;\n-        try {\n+        try (final InputStream i = new BufferedInputStream(Files.newInputStream(archive.toPath(), new OpenOption[0]))) {\n             this.expand(format, i, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);\n         }\n-        catch (final Throwable t2) {\n-            x2 = t2;\n-            throw t2;\n-        }\n-        finally {\n-            $closeResource(x2, i);\n-        }\n     }\n     \n     @Deprecated\n     public void expand(final InputStream archive, final File targetDirectory) throws IOException, ArchiveException {\n         this.expand(archive, targetDirectory, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n     public void expand(final InputStream archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n-        Throwable x0 = null;\n-        try {\n+        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n             this.expand((ArchiveInputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveInputStream(archive)), targetDirectory);\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, (AutoCloseable)c);\n-        }\n     }\n     \n     @Deprecated\n     public void expand(final String format, final InputStream archive, final File targetDirectory) throws IOException, ArchiveException {\n         this.expand(format, archive, targetDirectory, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n     public void expand(final String format, final InputStream archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n-        Throwable x0 = null;\n-        try {\n+        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n             this.expand((ArchiveInputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveInputStream(format, archive)), targetDirectory);\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, (AutoCloseable)c);\n-        }\n     }\n     \n     @Deprecated\n     public void expand(final String format, final SeekableByteChannel archive, final File targetDirectory) throws IOException, ArchiveException {\n         this.expand(format, archive, targetDirectory, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n     public void expand(final String format, final SeekableByteChannel archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n-        Throwable x0 = null;\n-        try {\n+        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n             if (!this.prefersSeekableByteChannel(format)) {\n                 this.expand(format, (InputStream)c.track((Closeable)Channels.newInputStream(archive)), targetDirectory);\n             }\n             else if (\"tar\".equalsIgnoreCase(format)) {\n                 this.expand((TarFile)c.track((Closeable)new TarFile(archive)), targetDirectory);\n             }\n             else if (\"zip\".equalsIgnoreCase(format)) {\n@@ -140,72 +91,43 @@\n             else {\n                 if (!\"7z\".equalsIgnoreCase(format)) {\n                     throw new ArchiveException(\"Don't know how to handle format \" + format);\n                 }\n                 this.expand((SevenZFile)c.track((Closeable)new SevenZFile(archive)), targetDirectory);\n             }\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, (AutoCloseable)c);\n-        }\n     }\n     \n     public void expand(final ArchiveInputStream archive, final File targetDirectory) throws IOException, ArchiveException {\n         this.expand(() -> {\n             ArchiveEntry next;\n             for (next = archive.getNextEntry(); next != null && !archive.canReadEntryData(next); next = archive.getNextEntry()) {}\n             return next;\n         }, (entry, out) -> IOUtils.copy((InputStream)archive, out), targetDirectory);\n     }\n     \n     public void expand(final TarFile archive, final File targetDirectory) throws IOException, ArchiveException {\n         final Iterator<TarArchiveEntry> entryIterator = archive.getEntries().iterator();\n         this.expand(() -> entryIterator.hasNext() ? ((ArchiveEntry)entryIterator.next()) : null, (entry, out) -> {\n-            final InputStream in = archive.getInputStream((TarArchiveEntry)entry);\n-            Throwable x0 = null;\n-            try {\n+            try (final InputStream in = archive.getInputStream((TarArchiveEntry)entry)) {\n                 IOUtils.copy(in, out);\n             }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n-            }\n-            finally {\n-                if (in != null) {\n-                    $closeResource(x0, in);\n-                }\n-            }\n         }, targetDirectory);\n     }\n     \n     public void expand(final ZipFile archive, final File targetDirectory) throws IOException, ArchiveException {\n         final Enumeration<ZipArchiveEntry> entries = archive.getEntries();\n         this.expand(() -> {\n             ZipArchiveEntry next;\n             for (next = (entries.hasMoreElements() ? ((ZipArchiveEntry)entries.nextElement()) : null); next != null && !archive.canReadEntryData(next); next = (entries.hasMoreElements() ? ((ZipArchiveEntry)entries.nextElement()) : null)) {}\n             return (ArchiveEntry)next;\n         }, (entry, out) -> {\n-            final InputStream in = archive.getInputStream((ZipArchiveEntry)entry);\n-            Throwable x0 = null;\n-            try {\n+            try (final InputStream in = archive.getInputStream((ZipArchiveEntry)entry)) {\n                 IOUtils.copy(in, out);\n             }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n-            }\n-            finally {\n-                if (in != null) {\n-                    $closeResource(x0, in);\n-                }\n-            }\n         }, targetDirectory);\n     }\n     \n     public void expand(final SevenZFile archive, final File targetDirectory) throws IOException, ArchiveException {\n         Objects.requireNonNull(archive);\n         this.expand(archive::getNextEntry, (entry, out) -> {\n             final byte[] buffer = new byte[8192];\n@@ -236,39 +158,14 @@\n                 }\n             }\n             else {\n                 final File parent = f.getParentFile();\n                 if (!parent.isDirectory() && !parent.mkdirs()) {\n                     throw new IOException(\"Failed to create directory \" + parent);\n                 }\n-                final OutputStream o = Files.newOutputStream(f.toPath(), new OpenOption[0]);\n-                Throwable x0 = null;\n-                try {\n+                try (final OutputStream o = Files.newOutputStream(f.toPath(), new OpenOption[0])) {\n                     writer.writeEntryDataTo(nextEntry, o);\n                 }\n-                catch (final Throwable t) {\n-                    x0 = t;\n-                    throw t;\n-                }\n-                finally {\n-                    if (o != null) {\n-                        $closeResource(x0, o);\n-                    }\n-                }\n             }\n         }\n     }\n-    \n-    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n-        if (x0 != null) {\n-            try {\n-                x1.close();\n-            }\n-            catch (final Throwable exception) {\n-                x0.addSuppressed(exception);\n-            }\n-        }\n-        else {\n-            x1.close();\n-        }\n-    }\n }\n"}]}
