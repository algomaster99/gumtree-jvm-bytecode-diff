{"diffoscope-json-version": 1, "source1": "first/EventCountCircuitBreaker.class", "source2": "second/EventCountCircuitBreaker.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,247 +1,247 @@\n-  SHA-256 checksum 64cecdba151ce0b1aaf9472b1108a95c6f00946e708a853b207722aba7bdc7c3\n+  SHA-256 checksum 1392f04201cad3a91b7aeb0fe00d6eebd016a511f0eb63953df4d03ddbe16e99\n   Compiled from \"EventCountCircuitBreaker.java\"\n public class org.apache.commons.lang3.concurrent.EventCountCircuitBreaker extends org.apache.commons.lang3.concurrent.AbstractCircuitBreaker<java.lang.Integer>\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #51                         // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n-  super_class: #52                        // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker\n+  this_class: #18                         // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+  super_class: #2                         // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker\n   interfaces: 0, fields: 6, methods: 21, attributes: 3\n Constant pool:\n-    #1 = Methodref          #52.#133      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.\"<init>\":()V\n-    #2 = Class              #134          // java/util/concurrent/atomic/AtomicReference\n-    #3 = Class              #135          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n-    #4 = Methodref          #3.#136       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.\"<init>\":(IJ)V\n-    #5 = Methodref          #2.#137       // java/util/concurrent/atomic/AtomicReference.\"<init>\":(Ljava/lang/Object;)V\n-    #6 = Fieldref           #51.#138      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n-    #7 = Fieldref           #51.#139      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.openingThreshold:I\n-    #8 = Methodref          #140.#141     // java/util/concurrent/TimeUnit.toNanos:(J)J\n-    #9 = Fieldref           #51.#142      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.openingInterval:J\n-   #10 = Fieldref           #51.#143      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.closingThreshold:I\n-   #11 = Fieldref           #51.#144      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.closingInterval:J\n-   #12 = Methodref          #51.#145      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.\"<init>\":(IJLjava/util/concurrent/TimeUnit;IJLjava/util/concurrent/TimeUnit;)V\n-   #13 = Methodref          #51.#146      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.\"<init>\":(IJLjava/util/concurrent/TimeUnit;I)V\n-   #14 = Methodref          #51.#147      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.performStateCheck:(I)Z\n-   #15 = Methodref          #49.#148      // java/lang/Integer.intValue:()I\n-   #16 = Methodref          #49.#149      // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #17 = Methodref          #51.#150      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.incrementAndCheckState:(Ljava/lang/Integer;)Z\n-   #18 = Methodref          #52.#151      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.open:()V\n-   #19 = Methodref          #51.#152      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.now:()J\n-   #20 = Methodref          #2.#153       // java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n-   #21 = Methodref          #52.#154      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.close:()V\n-   #22 = Fieldref           #51.#155      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.state:Ljava/util/concurrent/atomic/AtomicReference;\n-   #23 = Methodref          #2.#156       // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n-   #24 = Class              #157          // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State\n-   #25 = Methodref          #51.#158      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.nextCheckIntervalData:(ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n-   #26 = Methodref          #51.#159      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.updateCheckIntervalData:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n-   #27 = Methodref          #51.#160      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.stateStrategy:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n-   #28 = Methodref          #39.#161      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.isStateTransition:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n-   #29 = Methodref          #24.#162      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.oppositeState:()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-   #30 = Methodref          #51.#163      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.changeStateAndStartNewCheckInterval:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n-   #31 = Methodref          #51.#164      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.isOpen:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z\n-   #32 = Methodref          #2.#165       // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-   #33 = Methodref          #51.#166      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.changeState:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n-   #34 = Methodref          #39.#167      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.isCheckIntervalFinished:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n-   #35 = Methodref          #3.#168       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.increment:(I)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n-   #36 = Methodref          #169.#170     // java/lang/System.nanoTime:()J\n-   #37 = Fieldref           #51.#171      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.STRATEGY_MAP:Ljava/util/Map;\n-   #38 = InterfaceMethodref #172.#173     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #39 = Class              #174          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n-   #40 = Class              #175          // java/util/EnumMap\n-   #41 = Methodref          #40.#176      // java/util/EnumMap.\"<init>\":(Ljava/lang/Class;)V\n-   #42 = Fieldref           #24.#177      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.CLOSED:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-   #43 = Class              #178          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed\n-   #44 = Methodref          #43.#179      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed.\"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n-   #45 = InterfaceMethodref #172.#180     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #46 = Fieldref           #24.#181      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.OPEN:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-   #47 = Class              #182          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen\n-   #48 = Methodref          #47.#179      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen.\"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n-   #49 = Class              #183          // java/lang/Integer\n-   #50 = Methodref          #51.#184      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.createStrategyMap:()Ljava/util/Map;\n-   #51 = Class              #185          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n-   #52 = Class              #186          // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker\n-   #53 = Class              #187          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n-   #54 = Utf8               InnerClasses\n-   #55 = Utf8               StateStrategyOpen\n-   #56 = Utf8               StateStrategyClosed\n-   #57 = Utf8               StateStrategy\n-   #58 = Utf8               CheckIntervalData\n-   #59 = Utf8               STRATEGY_MAP\n-   #60 = Utf8               Ljava/util/Map;\n-   #61 = Utf8               Signature\n-   #62 = Utf8               State\n-   #63 = Utf8               Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;\n-   #64 = Utf8               checkIntervalData\n-   #65 = Utf8               Ljava/util/concurrent/atomic/AtomicReference;\n-   #66 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;>;\n-   #67 = Utf8               openingThreshold\n-   #68 = Utf8               I\n-   #69 = Utf8               openingInterval\n-   #70 = Utf8               J\n-   #71 = Utf8               closingThreshold\n-   #72 = Utf8               closingInterval\n-   #73 = Utf8               <init>\n-   #74 = Utf8               (IJLjava/util/concurrent/TimeUnit;IJLjava/util/concurrent/TimeUnit;)V\n-   #75 = Utf8               Code\n-   #76 = Utf8               LineNumberTable\n-   #77 = Utf8               LocalVariableTable\n-   #78 = Utf8               this\n-   #79 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n-   #80 = Utf8               openingUnit\n-   #81 = Utf8               Ljava/util/concurrent/TimeUnit;\n-   #82 = Utf8               closingUnit\n-   #83 = Utf8               (IJLjava/util/concurrent/TimeUnit;I)V\n-   #84 = Utf8               checkInterval\n-   #85 = Utf8               checkUnit\n-   #86 = Utf8               (IJLjava/util/concurrent/TimeUnit;)V\n-   #87 = Utf8               threshold\n-   #88 = Utf8               getOpeningThreshold\n-   #89 = Utf8               ()I\n-   #90 = Utf8               getOpeningInterval\n-   #91 = Utf8               ()J\n-   #92 = Utf8               getClosingThreshold\n-   #93 = Utf8               getClosingInterval\n-   #94 = Utf8               checkState\n-   #95 = Utf8               ()Z\n-   #96 = Utf8               incrementAndCheckState\n-   #97 = Utf8               (Ljava/lang/Integer;)Z\n-   #98 = Utf8               increment\n-   #99 = Utf8               Ljava/lang/Integer;\n-  #100 = Utf8               open\n-  #101 = Utf8               ()V\n-  #102 = Utf8               close\n-  #103 = Utf8               performStateCheck\n-  #104 = Utf8               (I)Z\n-  #105 = Utf8               time\n-  #106 = Utf8               currentData\n-  #107 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n-  #108 = Utf8               nextData\n-  #109 = Utf8               currentState\n-  #110 = Utf8               Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-  #111 = Utf8               StackMapTable\n-  #112 = Utf8               updateCheckIntervalData\n-  #113 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n-  #114 = Utf8               changeStateAndStartNewCheckInterval\n-  #115 = Utf8               (Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n-  #116 = Utf8               newState\n-  #117 = Utf8               nextCheckIntervalData\n-  #118 = Utf8               (ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n-  #119 = Utf8               now\n-  #120 = Utf8               stateStrategy\n-  #121 = Utf8               (Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n-  #122 = Utf8               state\n-  #123 = Utf8               createStrategyMap\n-  #124 = Utf8               ()Ljava/util/Map;\n-  #125 = Utf8               map\n-  #126 = Utf8               LocalVariableTypeTable\n-  #127 = Utf8               ()Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;\n-  #128 = Utf8               (Ljava/lang/Object;)Z\n-  #129 = Utf8               <clinit>\n-  #130 = Utf8               Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker<Ljava/lang/Integer;>;\n-  #131 = Utf8               SourceFile\n-  #132 = Utf8               EventCountCircuitBreaker.java\n-  #133 = NameAndType        #73:#101      // \"<init>\":()V\n-  #134 = Utf8               java/util/concurrent/atomic/AtomicReference\n-  #135 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n-  #136 = NameAndType        #73:#188      // \"<init>\":(IJ)V\n-  #137 = NameAndType        #73:#189      // \"<init>\":(Ljava/lang/Object;)V\n-  #138 = NameAndType        #64:#65       // checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n-  #139 = NameAndType        #67:#68       // openingThreshold:I\n-  #140 = Class              #190          // java/util/concurrent/TimeUnit\n-  #141 = NameAndType        #191:#192     // toNanos:(J)J\n-  #142 = NameAndType        #69:#70       // openingInterval:J\n-  #143 = NameAndType        #71:#68       // closingThreshold:I\n-  #144 = NameAndType        #72:#70       // closingInterval:J\n-  #145 = NameAndType        #73:#74       // \"<init>\":(IJLjava/util/concurrent/TimeUnit;IJLjava/util/concurrent/TimeUnit;)V\n-  #146 = NameAndType        #73:#83       // \"<init>\":(IJLjava/util/concurrent/TimeUnit;I)V\n-  #147 = NameAndType        #103:#104     // performStateCheck:(I)Z\n-  #148 = NameAndType        #193:#89      // intValue:()I\n-  #149 = NameAndType        #194:#195     // valueOf:(I)Ljava/lang/Integer;\n-  #150 = NameAndType        #96:#97       // incrementAndCheckState:(Ljava/lang/Integer;)Z\n-  #151 = NameAndType        #100:#101     // open:()V\n-  #152 = NameAndType        #119:#91      // now:()J\n-  #153 = NameAndType        #196:#189     // set:(Ljava/lang/Object;)V\n-  #154 = NameAndType        #102:#101     // close:()V\n-  #155 = NameAndType        #122:#65      // state:Ljava/util/concurrent/atomic/AtomicReference;\n-  #156 = NameAndType        #197:#198     // get:()Ljava/lang/Object;\n-  #157 = Utf8               org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State\n-  #158 = NameAndType        #117:#118     // nextCheckIntervalData:(ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n-  #159 = NameAndType        #112:#113     // updateCheckIntervalData:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n-  #160 = NameAndType        #120:#121     // stateStrategy:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n-  #161 = NameAndType        #199:#200     // isStateTransition:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n-  #162 = NameAndType        #201:#202     // oppositeState:()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-  #163 = NameAndType        #114:#115     // changeStateAndStartNewCheckInterval:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n-  #164 = NameAndType        #203:#204     // isOpen:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z\n-  #165 = NameAndType        #205:#206     // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #166 = NameAndType        #207:#115     // changeState:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n-  #167 = NameAndType        #208:#209     // isCheckIntervalFinished:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n-  #168 = NameAndType        #98:#210      // increment:(I)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n-  #169 = Class              #211          // java/lang/System\n-  #170 = NameAndType        #212:#91      // nanoTime:()J\n-  #171 = NameAndType        #59:#60       // STRATEGY_MAP:Ljava/util/Map;\n-  #172 = Class              #213          // java/util/Map\n-  #173 = NameAndType        #197:#214     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #174 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n-  #175 = Utf8               java/util/EnumMap\n-  #176 = NameAndType        #73:#215      // \"<init>\":(Ljava/lang/Class;)V\n-  #177 = NameAndType        #216:#110     // CLOSED:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-  #178 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed\n-  #179 = NameAndType        #73:#217      // \"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n-  #180 = NameAndType        #218:#219     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #181 = NameAndType        #220:#110     // OPEN:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-  #182 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen\n-  #183 = Utf8               java/lang/Integer\n-  #184 = NameAndType        #123:#124     // createStrategyMap:()Ljava/util/Map;\n-  #185 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n-  #186 = Utf8               org/apache/commons/lang3/concurrent/AbstractCircuitBreaker\n-  #187 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n-  #188 = Utf8               (IJ)V\n-  #189 = Utf8               (Ljava/lang/Object;)V\n-  #190 = Utf8               java/util/concurrent/TimeUnit\n-  #191 = Utf8               toNanos\n-  #192 = Utf8               (J)J\n-  #193 = Utf8               intValue\n-  #194 = Utf8               valueOf\n-  #195 = Utf8               (I)Ljava/lang/Integer;\n-  #196 = Utf8               set\n-  #197 = Utf8               get\n-  #198 = Utf8               ()Ljava/lang/Object;\n-  #199 = Utf8               isStateTransition\n-  #200 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n-  #201 = Utf8               oppositeState\n-  #202 = Utf8               ()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-  #203 = Utf8               isOpen\n-  #204 = Utf8               (Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z\n-  #205 = Utf8               compareAndSet\n-  #206 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #207 = Utf8               changeState\n-  #208 = Utf8               isCheckIntervalFinished\n-  #209 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n-  #210 = Utf8               (I)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n-  #211 = Utf8               java/lang/System\n-  #212 = Utf8               nanoTime\n-  #213 = Utf8               java/util/Map\n-  #214 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #215 = Utf8               (Ljava/lang/Class;)V\n-  #216 = Utf8               CLOSED\n-  #217 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n-  #218 = Utf8               put\n-  #219 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #220 = Utf8               OPEN\n+    #1 = Methodref          #2.#3         // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.\"<init>\":()V\n+    #2 = Class              #4            // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               org/apache/commons/lang3/concurrent/AbstractCircuitBreaker\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Class              #8            // java/util/concurrent/atomic/AtomicReference\n+    #8 = Utf8               java/util/concurrent/atomic/AtomicReference\n+    #9 = Class              #10           // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n+   #10 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n+   #11 = Methodref          #9.#12        // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.\"<init>\":(IJ)V\n+   #12 = NameAndType        #5:#13        // \"<init>\":(IJ)V\n+   #13 = Utf8               (IJ)V\n+   #14 = Methodref          #7.#15        // java/util/concurrent/atomic/AtomicReference.\"<init>\":(Ljava/lang/Object;)V\n+   #15 = NameAndType        #5:#16        // \"<init>\":(Ljava/lang/Object;)V\n+   #16 = Utf8               (Ljava/lang/Object;)V\n+   #17 = Fieldref           #18.#19       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n+   #18 = Class              #20           // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+   #19 = NameAndType        #21:#22       // checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n+   #20 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+   #21 = Utf8               checkIntervalData\n+   #22 = Utf8               Ljava/util/concurrent/atomic/AtomicReference;\n+   #23 = Fieldref           #18.#24       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.openingThreshold:I\n+   #24 = NameAndType        #25:#26       // openingThreshold:I\n+   #25 = Utf8               openingThreshold\n+   #26 = Utf8               I\n+   #27 = Methodref          #28.#29       // java/util/concurrent/TimeUnit.toNanos:(J)J\n+   #28 = Class              #30           // java/util/concurrent/TimeUnit\n+   #29 = NameAndType        #31:#32       // toNanos:(J)J\n+   #30 = Utf8               java/util/concurrent/TimeUnit\n+   #31 = Utf8               toNanos\n+   #32 = Utf8               (J)J\n+   #33 = Fieldref           #18.#34       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.openingInterval:J\n+   #34 = NameAndType        #35:#36       // openingInterval:J\n+   #35 = Utf8               openingInterval\n+   #36 = Utf8               J\n+   #37 = Fieldref           #18.#38       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.closingThreshold:I\n+   #38 = NameAndType        #39:#26       // closingThreshold:I\n+   #39 = Utf8               closingThreshold\n+   #40 = Fieldref           #18.#41       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.closingInterval:J\n+   #41 = NameAndType        #42:#36       // closingInterval:J\n+   #42 = Utf8               closingInterval\n+   #43 = Methodref          #18.#44       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.\"<init>\":(IJLjava/util/concurrent/TimeUnit;IJLjava/util/concurrent/TimeUnit;)V\n+   #44 = NameAndType        #5:#45        // \"<init>\":(IJLjava/util/concurrent/TimeUnit;IJLjava/util/concurrent/TimeUnit;)V\n+   #45 = Utf8               (IJLjava/util/concurrent/TimeUnit;IJLjava/util/concurrent/TimeUnit;)V\n+   #46 = Methodref          #18.#47       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.\"<init>\":(IJLjava/util/concurrent/TimeUnit;I)V\n+   #47 = NameAndType        #5:#48        // \"<init>\":(IJLjava/util/concurrent/TimeUnit;I)V\n+   #48 = Utf8               (IJLjava/util/concurrent/TimeUnit;I)V\n+   #49 = Methodref          #18.#50       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.performStateCheck:(I)Z\n+   #50 = NameAndType        #51:#52       // performStateCheck:(I)Z\n+   #51 = Utf8               performStateCheck\n+   #52 = Utf8               (I)Z\n+   #53 = Methodref          #54.#55       // java/lang/Integer.intValue:()I\n+   #54 = Class              #56           // java/lang/Integer\n+   #55 = NameAndType        #57:#58       // intValue:()I\n+   #56 = Utf8               java/lang/Integer\n+   #57 = Utf8               intValue\n+   #58 = Utf8               ()I\n+   #59 = Methodref          #54.#60       // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #60 = NameAndType        #61:#62       // valueOf:(I)Ljava/lang/Integer;\n+   #61 = Utf8               valueOf\n+   #62 = Utf8               (I)Ljava/lang/Integer;\n+   #63 = Methodref          #18.#64       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.incrementAndCheckState:(Ljava/lang/Integer;)Z\n+   #64 = NameAndType        #65:#66       // incrementAndCheckState:(Ljava/lang/Integer;)Z\n+   #65 = Utf8               incrementAndCheckState\n+   #66 = Utf8               (Ljava/lang/Integer;)Z\n+   #67 = Methodref          #2.#68        // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.open:()V\n+   #68 = NameAndType        #69:#6        // open:()V\n+   #69 = Utf8               open\n+   #70 = Methodref          #18.#71       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.now:()J\n+   #71 = NameAndType        #72:#73       // now:()J\n+   #72 = Utf8               now\n+   #73 = Utf8               ()J\n+   #74 = Methodref          #7.#75        // java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n+   #75 = NameAndType        #76:#16       // set:(Ljava/lang/Object;)V\n+   #76 = Utf8               set\n+   #77 = Methodref          #2.#78        // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.close:()V\n+   #78 = NameAndType        #79:#6        // close:()V\n+   #79 = Utf8               close\n+   #80 = Fieldref           #18.#81       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.state:Ljava/util/concurrent/atomic/AtomicReference;\n+   #81 = NameAndType        #82:#22       // state:Ljava/util/concurrent/atomic/AtomicReference;\n+   #82 = Utf8               state\n+   #83 = Methodref          #7.#84        // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n+   #84 = NameAndType        #85:#86       // get:()Ljava/lang/Object;\n+   #85 = Utf8               get\n+   #86 = Utf8               ()Ljava/lang/Object;\n+   #87 = Class              #88           // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State\n+   #88 = Utf8               org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State\n+   #89 = Methodref          #18.#90       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.nextCheckIntervalData:(ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+   #90 = NameAndType        #91:#92       // nextCheckIntervalData:(ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+   #91 = Utf8               nextCheckIntervalData\n+   #92 = Utf8               (ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+   #93 = Methodref          #18.#94       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.updateCheckIntervalData:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n+   #94 = NameAndType        #95:#96       // updateCheckIntervalData:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n+   #95 = Utf8               updateCheckIntervalData\n+   #96 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n+   #97 = Methodref          #18.#98       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.stateStrategy:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n+   #98 = NameAndType        #99:#100      // stateStrategy:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n+   #99 = Utf8               stateStrategy\n+  #100 = Utf8               (Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n+  #101 = Methodref          #102.#103     // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.isStateTransition:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n+  #102 = Class              #104          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n+  #103 = NameAndType        #105:#106     // isStateTransition:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n+  #104 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n+  #105 = Utf8               isStateTransition\n+  #106 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n+  #107 = Methodref          #87.#108      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.oppositeState:()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+  #108 = NameAndType        #109:#110     // oppositeState:()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+  #109 = Utf8               oppositeState\n+  #110 = Utf8               ()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+  #111 = Methodref          #18.#112      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.changeStateAndStartNewCheckInterval:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n+  #112 = NameAndType        #113:#114     // changeStateAndStartNewCheckInterval:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n+  #113 = Utf8               changeStateAndStartNewCheckInterval\n+  #114 = Utf8               (Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n+  #115 = Methodref          #18.#116      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.isOpen:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z\n+  #116 = NameAndType        #117:#118     // isOpen:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z\n+  #117 = Utf8               isOpen\n+  #118 = Utf8               (Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z\n+  #119 = Methodref          #7.#120       // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #120 = NameAndType        #121:#122     // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #121 = Utf8               compareAndSet\n+  #122 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #123 = Methodref          #18.#124      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.changeState:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n+  #124 = NameAndType        #125:#114     // changeState:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n+  #125 = Utf8               changeState\n+  #126 = Methodref          #102.#127     // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.isCheckIntervalFinished:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n+  #127 = NameAndType        #128:#129     // isCheckIntervalFinished:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n+  #128 = Utf8               isCheckIntervalFinished\n+  #129 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n+  #130 = Methodref          #9.#131       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.increment:(I)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+  #131 = NameAndType        #132:#133     // increment:(I)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+  #132 = Utf8               increment\n+  #133 = Utf8               (I)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+  #134 = Methodref          #135.#136     // java/lang/System.nanoTime:()J\n+  #135 = Class              #137          // java/lang/System\n+  #136 = NameAndType        #138:#73      // nanoTime:()J\n+  #137 = Utf8               java/lang/System\n+  #138 = Utf8               nanoTime\n+  #139 = Fieldref           #18.#140      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.STRATEGY_MAP:Ljava/util/Map;\n+  #140 = NameAndType        #141:#142     // STRATEGY_MAP:Ljava/util/Map;\n+  #141 = Utf8               STRATEGY_MAP\n+  #142 = Utf8               Ljava/util/Map;\n+  #143 = InterfaceMethodref #144.#145     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #144 = Class              #146          // java/util/Map\n+  #145 = NameAndType        #85:#147      // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #146 = Utf8               java/util/Map\n+  #147 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #148 = Class              #149          // java/util/EnumMap\n+  #149 = Utf8               java/util/EnumMap\n+  #150 = Methodref          #148.#151     // java/util/EnumMap.\"<init>\":(Ljava/lang/Class;)V\n+  #151 = NameAndType        #5:#152       // \"<init>\":(Ljava/lang/Class;)V\n+  #152 = Utf8               (Ljava/lang/Class;)V\n+  #153 = Fieldref           #87.#154      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.CLOSED:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+  #154 = NameAndType        #155:#156     // CLOSED:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+  #155 = Utf8               CLOSED\n+  #156 = Utf8               Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+  #157 = Class              #158          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed\n+  #158 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed\n+  #159 = Methodref          #157.#160     // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed.\"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n+  #160 = NameAndType        #5:#161       // \"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n+  #161 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n+  #162 = InterfaceMethodref #144.#163     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #163 = NameAndType        #164:#165     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #164 = Utf8               put\n+  #165 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #166 = Fieldref           #87.#167      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.OPEN:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+  #167 = NameAndType        #168:#156     // OPEN:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+  #168 = Utf8               OPEN\n+  #169 = Class              #170          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen\n+  #170 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen\n+  #171 = Methodref          #169.#160     // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen.\"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n+  #172 = Methodref          #18.#173      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.createStrategyMap:()Ljava/util/Map;\n+  #173 = NameAndType        #174:#175     // createStrategyMap:()Ljava/util/Map;\n+  #174 = Utf8               createStrategyMap\n+  #175 = Utf8               ()Ljava/util/Map;\n+  #176 = Utf8               Signature\n+  #177 = Utf8               Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;\n+  #178 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;>;\n+  #179 = Utf8               Code\n+  #180 = Utf8               LineNumberTable\n+  #181 = Utf8               LocalVariableTable\n+  #182 = Utf8               this\n+  #183 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n+  #184 = Utf8               openingUnit\n+  #185 = Utf8               Ljava/util/concurrent/TimeUnit;\n+  #186 = Utf8               closingUnit\n+  #187 = Utf8               checkInterval\n+  #188 = Utf8               checkUnit\n+  #189 = Utf8               (IJLjava/util/concurrent/TimeUnit;)V\n+  #190 = Utf8               threshold\n+  #191 = Utf8               getOpeningThreshold\n+  #192 = Utf8               getOpeningInterval\n+  #193 = Utf8               getClosingThreshold\n+  #194 = Utf8               getClosingInterval\n+  #195 = Utf8               checkState\n+  #196 = Utf8               ()Z\n+  #197 = Utf8               Ljava/lang/Integer;\n+  #198 = Utf8               time\n+  #199 = Utf8               currentData\n+  #200 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+  #201 = Utf8               nextData\n+  #202 = Utf8               currentState\n+  #203 = Utf8               StackMapTable\n+  #204 = Utf8               newState\n+  #205 = Utf8               map\n+  #206 = Utf8               LocalVariableTypeTable\n+  #207 = Utf8               ()Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;\n+  #208 = Utf8               (Ljava/lang/Object;)Z\n+  #209 = Utf8               <clinit>\n+  #210 = Utf8               Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker<Ljava/lang/Integer;>;\n+  #211 = Utf8               SourceFile\n+  #212 = Utf8               EventCountCircuitBreaker.java\n+  #213 = Utf8               InnerClasses\n+  #214 = Utf8               CheckIntervalData\n+  #215 = Utf8               State\n+  #216 = Utf8               StateStrategy\n+  #217 = Utf8               StateStrategyClosed\n+  #218 = Class              #219          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n+  #219 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n+  #220 = Utf8               StateStrategyOpen\n {\n   private static final java.util.Map<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy> STRATEGY_MAP;\n     descriptor: Ljava/util/Map;\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n-    Signature: #63                          // Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;\n+    Signature: #177                         // Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;\n \n   private final java.util.concurrent.atomic.AtomicReference<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData> checkIntervalData;\n     descriptor: Ljava/util/concurrent/atomic/AtomicReference;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #66                          // Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;>;\n+    Signature: #178                         // Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;>;\n \n   private final int openingThreshold;\n     descriptor: I\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final long openingInterval;\n     descriptor: J\n@@ -259,39 +259,39 @@\n     descriptor: (IJLjava/util/concurrent/TimeUnit;IJLjava/util/concurrent/TimeUnit;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=8, locals=9, args_size=7\n          0: aload_0\n          1: invokespecial #1                  // Method org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class java/util/concurrent/atomic/AtomicReference\n+         5: new           #7                  // class java/util/concurrent/atomic/AtomicReference\n          8: dup\n-         9: new           #3                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n+         9: new           #9                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n         12: dup\n         13: iconst_0\n         14: lconst_0\n-        15: invokespecial #4                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.\"<init>\":(IJ)V\n-        18: invokespecial #5                  // Method java/util/concurrent/atomic/AtomicReference.\"<init>\":(Ljava/lang/Object;)V\n-        21: putfield      #6                  // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n+        15: invokespecial #11                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.\"<init>\":(IJ)V\n+        18: invokespecial #14                 // Method java/util/concurrent/atomic/AtomicReference.\"<init>\":(Ljava/lang/Object;)V\n+        21: putfield      #17                 // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n         24: aload_0\n         25: iload_1\n-        26: putfield      #7                  // Field openingThreshold:I\n+        26: putfield      #23                 // Field openingThreshold:I\n         29: aload_0\n         30: aload         4\n         32: lload_2\n-        33: invokevirtual #8                  // Method java/util/concurrent/TimeUnit.toNanos:(J)J\n-        36: putfield      #9                  // Field openingInterval:J\n+        33: invokevirtual #27                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J\n+        36: putfield      #33                 // Field openingInterval:J\n         39: aload_0\n         40: iload         5\n-        42: putfield      #10                 // Field closingThreshold:I\n+        42: putfield      #37                 // Field closingThreshold:I\n         45: aload_0\n         46: aload         8\n         48: lload         6\n-        50: invokevirtual #8                  // Method java/util/concurrent/TimeUnit.toNanos:(J)J\n-        53: putfield      #11                 // Field closingInterval:J\n+        50: invokevirtual #27                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J\n+        53: putfield      #40                 // Field closingInterval:J\n         56: return\n       LineNumberTable:\n         line 177: 0\n         line 178: 4\n         line 179: 24\n         line 180: 29\n         line 181: 39\n@@ -315,15 +315,15 @@\n          0: aload_0\n          1: iload_1\n          2: lload_2\n          3: aload         4\n          5: iload         5\n          7: lload_2\n          8: aload         4\n-        10: invokespecial #12                 // Method \"<init>\":(IJLjava/util/concurrent/TimeUnit;IJLjava/util/concurrent/TimeUnit;)V\n+        10: invokespecial #43                 // Method \"<init>\":(IJLjava/util/concurrent/TimeUnit;IJLjava/util/concurrent/TimeUnit;)V\n         13: return\n       LineNumberTable:\n         line 200: 0\n         line 202: 13\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      14     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n@@ -338,15 +338,15 @@\n     Code:\n       stack=6, locals=5, args_size=4\n          0: aload_0\n          1: iload_1\n          2: lload_2\n          3: aload         4\n          5: iload_1\n-         6: invokespecial #13                 // Method \"<init>\":(IJLjava/util/concurrent/TimeUnit;I)V\n+         6: invokespecial #46                 // Method \"<init>\":(IJLjava/util/concurrent/TimeUnit;I)V\n          9: return\n       LineNumberTable:\n         line 215: 0\n         line 216: 9\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n@@ -356,88 +356,88 @@\n \n   public int getOpeningThreshold();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field openingThreshold:I\n+         1: getfield      #23                 // Field openingThreshold:I\n          4: ireturn\n       LineNumberTable:\n         line 226: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n \n   public long getOpeningInterval();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #9                  // Field openingInterval:J\n+         1: getfield      #33                 // Field openingInterval:J\n          4: lreturn\n       LineNumberTable:\n         line 235: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n \n   public int getClosingThreshold();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #10                 // Field closingThreshold:I\n+         1: getfield      #37                 // Field closingThreshold:I\n          4: ireturn\n       LineNumberTable:\n         line 246: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n \n   public long getClosingInterval();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #11                 // Field closingInterval:J\n+         1: getfield      #40                 // Field closingInterval:J\n          4: lreturn\n       LineNumberTable:\n         line 255: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n \n   public boolean checkState();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_0\n-         2: invokespecial #14                 // Method performStateCheck:(I)Z\n+         2: invokespecial #49                 // Method performStateCheck:(I)Z\n          5: ireturn\n       LineNumberTable:\n         line 265: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n \n   public boolean incrementAndCheckState(java.lang.Integer);\n     descriptor: (Ljava/lang/Integer;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #15                 // Method java/lang/Integer.intValue:()I\n-         5: invokespecial #14                 // Method performStateCheck:(I)Z\n+         2: invokevirtual #53                 // Method java/lang/Integer.intValue:()I\n+         5: invokespecial #49                 // Method performStateCheck:(I)Z\n          8: ireturn\n       LineNumberTable:\n         line 273: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n             0       9     1 increment   Ljava/lang/Integer;\n@@ -445,39 +445,39 @@\n   public boolean incrementAndCheckState();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_1\n-         2: invokestatic  #16                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-         5: invokevirtual #17                 // Method incrementAndCheckState:(Ljava/lang/Integer;)Z\n+         2: invokestatic  #59                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+         5: invokevirtual #63                 // Method incrementAndCheckState:(Ljava/lang/Integer;)Z\n          8: ireturn\n       LineNumberTable:\n         line 285: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n \n   public void open();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #18                 // Method org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.open:()V\n+         1: invokespecial #67                 // Method org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.open:()V\n          4: aload_0\n-         5: getfield      #6                  // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n-         8: new           #3                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n+         5: getfield      #17                 // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n+         8: new           #9                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n         11: dup\n         12: iconst_0\n         13: aload_0\n-        14: invokevirtual #19                 // Method now:()J\n-        17: invokespecial #4                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.\"<init>\":(IJ)V\n-        20: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n+        14: invokevirtual #70                 // Method now:()J\n+        17: invokespecial #11                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.\"<init>\":(IJ)V\n+        20: invokevirtual #74                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n         23: return\n       LineNumberTable:\n         line 296: 0\n         line 297: 4\n         line 298: 23\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -485,24 +485,24 @@\n \n   public void close();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #21                 // Method org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.close:()V\n+         1: invokespecial #77                 // Method org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.close:()V\n          4: aload_0\n-         5: getfield      #6                  // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n-         8: new           #3                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n+         5: getfield      #17                 // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n+         8: new           #9                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n         11: dup\n         12: iconst_0\n         13: aload_0\n-        14: invokevirtual #19                 // Method now:()J\n-        17: invokespecial #4                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.\"<init>\":(IJ)V\n-        20: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n+        14: invokevirtual #70                 // Method now:()J\n+        17: invokespecial #11                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.\"<init>\":(IJ)V\n+        20: invokevirtual #74                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n         23: return\n       LineNumberTable:\n         line 308: 0\n         line 309: 4\n         line 310: 23\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -510,53 +510,53 @@\n \n   private boolean performStateCheck(int);\n     descriptor: (I)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=7, args_size=2\n          0: aload_0\n-         1: invokevirtual #19                 // Method now:()J\n+         1: invokevirtual #70                 // Method now:()J\n          4: lstore        5\n          6: aload_0\n-         7: getfield      #22                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;\n-        10: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n-        13: checkcast     #24                 // class org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State\n+         7: getfield      #80                 // Field state:Ljava/util/concurrent/atomic/AtomicReference;\n+        10: invokevirtual #83                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n+        13: checkcast     #87                 // class org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State\n         16: astore        4\n         18: aload_0\n-        19: getfield      #6                  // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n-        22: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n-        25: checkcast     #3                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n+        19: getfield      #17                 // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n+        22: invokevirtual #83                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n+        25: checkcast     #9                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n         28: astore_2\n         29: aload_0\n         30: iload_1\n         31: aload_2\n         32: aload         4\n         34: lload         5\n-        36: invokespecial #25                 // Method nextCheckIntervalData:(ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+        36: invokespecial #89                 // Method nextCheckIntervalData:(ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n         39: astore_3\n         40: aload_0\n         41: aload_2\n         42: aload_3\n-        43: invokespecial #26                 // Method updateCheckIntervalData:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n+        43: invokespecial #93                 // Method updateCheckIntervalData:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n         46: ifeq          0\n         49: aload         4\n-        51: invokestatic  #27                 // Method stateStrategy:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n+        51: invokestatic  #97                 // Method stateStrategy:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n         54: aload_0\n         55: aload_2\n         56: aload_3\n-        57: invokevirtual #28                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.isStateTransition:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n+        57: invokevirtual #101                // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.isStateTransition:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n         60: ifeq          76\n         63: aload         4\n-        65: invokevirtual #29                 // Method org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.oppositeState:()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+        65: invokevirtual #107                // Method org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.oppositeState:()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n         68: astore        4\n         70: aload_0\n         71: aload         4\n-        73: invokespecial #30                 // Method changeStateAndStartNewCheckInterval:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n+        73: invokespecial #111                // Method changeStateAndStartNewCheckInterval:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n         76: aload         4\n-        78: invokestatic  #31                 // Method isOpen:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z\n+        78: invokestatic  #115                // Method isOpen:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z\n         81: ifne          88\n         84: iconst_1\n         85: goto          89\n         88: iconst_0\n         89: ireturn\n       LineNumberTable:\n         line 325: 0\n@@ -590,18 +590,18 @@\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_1\n          1: aload_2\n          2: if_acmpeq     17\n          5: aload_0\n-         6: getfield      #6                  // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n+         6: getfield      #17                 // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n          9: aload_1\n         10: aload_2\n-        11: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+        11: invokevirtual #119                // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n         14: ifeq          21\n         17: iconst_1\n         18: goto          22\n         21: iconst_0\n         22: ireturn\n       LineNumberTable:\n         line 352: 0\n@@ -621,24 +621,24 @@\n   private void changeStateAndStartNewCheckInterval(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State);\n     descriptor: (Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #33                 // Method changeState:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n+         2: invokevirtual #123                // Method changeState:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n          5: aload_0\n-         6: getfield      #6                  // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n-         9: new           #3                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n+         6: getfield      #17                 // Field checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n+         9: new           #9                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n         12: dup\n         13: iconst_0\n         14: aload_0\n-        15: invokevirtual #19                 // Method now:()J\n-        18: invokespecial #4                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.\"<init>\":(IJ)V\n-        21: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n+        15: invokevirtual #70                 // Method now:()J\n+        18: invokespecial #11                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.\"<init>\":(IJ)V\n+        21: invokevirtual #74                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n         24: return\n       LineNumberTable:\n         line 363: 0\n         line 364: 5\n         line 365: 24\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -647,30 +647,30 @@\n \n   private org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData nextCheckIntervalData(int, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData, org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State, long);\n     descriptor: (ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=7, args_size=5\n          0: aload_3\n-         1: invokestatic  #27                 // Method stateStrategy:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n+         1: invokestatic  #97                 // Method stateStrategy:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n          4: aload_0\n          5: aload_2\n          6: lload         4\n-         8: invokevirtual #34                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.isCheckIntervalFinished:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n+         8: invokevirtual #126                // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.isCheckIntervalFinished:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n         11: ifeq          29\n-        14: new           #3                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n+        14: new           #9                  // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n         17: dup\n         18: iload_1\n         19: lload         4\n-        21: invokespecial #4                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.\"<init>\":(IJ)V\n+        21: invokespecial #11                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.\"<init>\":(IJ)V\n         24: astore        6\n         26: goto          36\n         29: aload_2\n         30: iload_1\n-        31: invokevirtual #35                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.increment:(I)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+        31: invokevirtual #130                // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.increment:(I)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n         34: astore        6\n         36: aload         6\n         38: areturn\n       LineNumberTable:\n         line 381: 0\n         line 382: 14\n         line 384: 29\n@@ -691,108 +691,108 @@\n           locals = [ class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData ]\n \n   long now();\n     descriptor: ()J\n     flags: (0x0000)\n     Code:\n       stack=2, locals=1, args_size=1\n-         0: invokestatic  #36                 // Method java/lang/System.nanoTime:()J\n+         0: invokestatic  #134                // Method java/lang/System.nanoTime:()J\n          3: lreturn\n       LineNumberTable:\n         line 396: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       4     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n \n   private static org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy stateStrategy(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State);\n     descriptor: (Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n-         0: getstatic     #37                 // Field STRATEGY_MAP:Ljava/util/Map;\n+         0: getstatic     #139                // Field STRATEGY_MAP:Ljava/util/Map;\n          3: aload_0\n-         4: invokeinterface #38,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-         9: checkcast     #39                 // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n+         4: invokeinterface #143,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+         9: checkcast     #102                // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n         12: areturn\n       LineNumberTable:\n         line 407: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0 state   Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n \n   private static java.util.Map<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy> createStrategyMap();\n     descriptor: ()Ljava/util/Map;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=1, args_size=0\n-         0: new           #40                 // class java/util/EnumMap\n+         0: new           #148                // class java/util/EnumMap\n          3: dup\n-         4: ldc           #24                 // class org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State\n-         6: invokespecial #41                 // Method java/util/EnumMap.\"<init>\":(Ljava/lang/Class;)V\n+         4: ldc           #87                 // class org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State\n+         6: invokespecial #150                // Method java/util/EnumMap.\"<init>\":(Ljava/lang/Class;)V\n          9: astore_0\n         10: aload_0\n-        11: getstatic     #42                 // Field org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.CLOSED:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-        14: new           #43                 // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed\n+        11: getstatic     #153                // Field org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.CLOSED:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+        14: new           #157                // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed\n         17: dup\n         18: aconst_null\n-        19: invokespecial #44                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed.\"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n-        22: invokeinterface #45,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+        19: invokespecial #159                // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed.\"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n+        22: invokeinterface #162,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n         27: pop\n         28: aload_0\n-        29: getstatic     #46                 // Field org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.OPEN:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-        32: new           #47                 // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen\n+        29: getstatic     #166                // Field org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.OPEN:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+        32: new           #169                // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen\n         35: dup\n         36: aconst_null\n-        37: invokespecial #48                 // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen.\"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n-        40: invokeinterface #45,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+        37: invokespecial #171                // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen.\"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n+        40: invokeinterface #162,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n         45: pop\n         46: aload_0\n         47: areturn\n       LineNumberTable:\n         line 417: 0\n         line 418: 10\n         line 419: 28\n         line 420: 46\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n            10      38     0   map   Ljava/util/Map;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n            10      38     0   map   Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;\n-    Signature: #127                         // ()Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;\n+    Signature: #207                         // ()Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;\n \n   public boolean incrementAndCheckState(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)Z\n     flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: checkcast     #49                 // class java/lang/Integer\n-         5: invokevirtual #17                 // Method incrementAndCheckState:(Ljava/lang/Integer;)Z\n+         2: checkcast     #54                 // class java/lang/Integer\n+         5: invokevirtual #63                 // Method incrementAndCheckState:(Ljava/lang/Integer;)Z\n          8: ireturn\n       LineNumberTable:\n         line 138: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n-         0: invokestatic  #50                 // Method createStrategyMap:()Ljava/util/Map;\n-         3: putstatic     #37                 // Field STRATEGY_MAP:Ljava/util/Map;\n+         0: invokestatic  #172                // Method createStrategyMap:()Ljava/util/Map;\n+         3: putstatic     #139                // Field STRATEGY_MAP:Ljava/util/Map;\n          6: return\n       LineNumberTable:\n         line 141: 0\n }\n-Signature: #130                         // Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker<Ljava/lang/Integer;>;\n+Signature: #210                         // Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker<Ljava/lang/Integer;>;\n SourceFile: \"EventCountCircuitBreaker.java\"\n InnerClasses:\n-  static #53;                             // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n-  private static #55= #47 of #51;         // StateStrategyOpen=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n-  private static #56= #43 of #51;         // StateStrategyClosed=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n-  private static abstract #57= #39 of #51; // StateStrategy=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n-  private static #58= #3 of #51;          // CheckIntervalData=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n-  protected static abstract #62= #24 of #52; // State=class org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State of class org/apache/commons/lang3/concurrent/AbstractCircuitBreaker\n+  private static #214= #9 of #18;         // CheckIntervalData=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+  protected static abstract #215= #87 of #2; // State=class org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State of class org/apache/commons/lang3/concurrent/AbstractCircuitBreaker\n+  private static abstract #216= #102 of #18; // StateStrategy=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+  private static #217= #157 of #18;       // StateStrategyClosed=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+  static #218;                            // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n+  private static #220= #169 of #18;       // StateStrategyOpen=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n"}]}
