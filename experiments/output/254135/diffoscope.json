{"diffoscope-json-version": 1, "source1": "first/PropertiesMacro.class", "source2": "second/PropertiesMacro.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,16 +10,16 @@\n import java.util.List;\n import java.util.Arrays;\n import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n import java.lang.reflect.Field;\n import java.util.Iterator;\n import java.util.Map;\n-import com.puppycrawl.tools.checkstyle.api.DetailNode;\n import java.util.Set;\n+import com.puppycrawl.tools.checkstyle.api.DetailNode;\n import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import org.apache.maven.doxia.macro.MacroExecutionException;\n import org.apache.maven.doxia.module.xdoc.XdocSink;\n import org.apache.maven.doxia.macro.MacroRequest;\n import org.apache.maven.doxia.sink.Sink;\n import java.io.File;\n import org.apache.maven.doxia.macro.Macro;\n@@ -34,185 +34,172 @@\n     private static final String INDENT_LEVEL_14;\n     private static final String INDENT_LEVEL_16;\n     private static final String INDENT_LEVEL_18;\n     private static final String INDENT_LEVEL_20;\n     private static String currentModuleName;\n     private static File currentModuleFile;\n     \n-    public void execute(final Sink sink, final MacroRequest request) throws MacroExecutionException {\n+    public void execute(final Sink sink, final MacroRequest macroRequest) throws MacroExecutionException {\n         if (!(sink instanceof XdocSink)) {\n             throw new MacroExecutionException(\"Expected Sink to be an XdocSink.\");\n         }\n-        final String modulePath = (String)request.getParameter(\"modulePath\");\n-        configureGlobalProperties(modulePath);\n+        configureGlobalProperties((String)macroRequest.getParameter(\"modulePath\"));\n         writePropertiesTable((XdocSink)sink);\n     }\n     \n-    private static void configureGlobalProperties(final String modulePath) {\n-        final File moduleFile = PropertiesMacro.currentModuleFile = new File(modulePath);\n-        PropertiesMacro.currentModuleName = CommonUtil.getFileNameWithoutExtension(moduleFile.getName());\n+    private static void configureGlobalProperties(final String pathname) {\n+        PropertiesMacro.currentModuleName = CommonUtil.getFileNameWithoutExtension((PropertiesMacro.currentModuleFile = new File(pathname)).getName());\n     }\n     \n-    private static void writePropertiesTable(final XdocSink sink) throws MacroExecutionException {\n-        sink.table();\n-        sink.setInsertNewline(false);\n-        sink.tableRows((int[])null, false);\n-        sink.rawText(PropertiesMacro.INDENT_LEVEL_12);\n-        writeTableHeaderRow((Sink)sink);\n-        writeTablePropertiesRows((Sink)sink);\n-        sink.rawText(PropertiesMacro.INDENT_LEVEL_10);\n-        sink.tableRows_();\n-        sink.table_();\n-        sink.setInsertNewline(true);\n+    private static void writePropertiesTable(final XdocSink xdocSink) throws MacroExecutionException {\n+        xdocSink.table();\n+        xdocSink.setInsertNewline(false);\n+        xdocSink.tableRows((int[])null, false);\n+        xdocSink.rawText(PropertiesMacro.INDENT_LEVEL_12);\n+        writeTableHeaderRow((Sink)xdocSink);\n+        writeTablePropertiesRows((Sink)xdocSink);\n+        xdocSink.rawText(PropertiesMacro.INDENT_LEVEL_10);\n+        xdocSink.tableRows_();\n+        xdocSink.table_();\n+        xdocSink.setInsertNewline(true);\n     }\n     \n     private static void writeTableHeaderRow(final Sink sink) {\n         sink.tableRow();\n         writeTableHeaderCell(sink, \"name\");\n         writeTableHeaderCell(sink, \"description\");\n         writeTableHeaderCell(sink, \"type\");\n         writeTableHeaderCell(sink, \"default value\");\n         writeTableHeaderCell(sink, \"since\");\n         sink.rawText(PropertiesMacro.INDENT_LEVEL_12);\n         sink.tableRow_();\n     }\n     \n-    private static void writeTableHeaderCell(final Sink sink, final String text) {\n+    private static void writeTableHeaderCell(final Sink sink, final String s) {\n         sink.rawText(PropertiesMacro.INDENT_LEVEL_14);\n         sink.tableHeaderCell();\n-        sink.text(text);\n+        sink.text(s);\n         sink.tableHeaderCell_();\n     }\n     \n     private static void writeTablePropertiesRows(final Sink sink) throws MacroExecutionException {\n-        final Object instance = SiteUtil.getModuleInstance(PropertiesMacro.currentModuleName);\n-        final Class<?> clss = instance.getClass();\n-        final Set<String> properties = SiteUtil.getPropertiesForDocumentation((Class)clss, instance);\n-        final Map<String, DetailNode> propertiesJavadocs = SiteUtil.getPropertiesJavadocs((Set)properties, PropertiesMacro.currentModuleName, PropertiesMacro.currentModuleFile);\n-        for (final String property : properties) {\n-            final DetailNode propertyJavadoc = (DetailNode)propertiesJavadocs.get(property);\n-            final DetailNode currentModuleJavadoc = (DetailNode)propertiesJavadocs.get(PropertiesMacro.currentModuleName);\n-            writePropertyRow(sink, property, propertyJavadoc, instance, currentModuleJavadoc);\n+        final Object moduleInstance = SiteUtil.getModuleInstance(PropertiesMacro.currentModuleName);\n+        final Set propertiesForDocumentation = SiteUtil.getPropertiesForDocumentation((Class)moduleInstance.getClass(), moduleInstance);\n+        final Map propertiesJavadocs = SiteUtil.getPropertiesJavadocs(propertiesForDocumentation, PropertiesMacro.currentModuleName, PropertiesMacro.currentModuleFile);\n+        for (final String s : propertiesForDocumentation) {\n+            writePropertyRow(sink, s, propertiesJavadocs.get(s), moduleInstance, (DetailNode)propertiesJavadocs.get(PropertiesMacro.currentModuleName));\n         }\n     }\n     \n-    private static void writePropertyRow(final Sink sink, final String propertyName, final DetailNode propertyJavadoc, final Object instance, final DetailNode moduleJavadoc) throws MacroExecutionException {\n-        final Field field = SiteUtil.getField((Class)instance.getClass(), propertyName);\n+    private static void writePropertyRow(final Sink sink, final String s, final DetailNode detailNode, final Object o, final DetailNode detailNode2) throws MacroExecutionException {\n+        final Field field = SiteUtil.getField((Class)o.getClass(), s);\n         sink.rawText(PropertiesMacro.INDENT_LEVEL_12);\n         sink.tableRow();\n-        writePropertyNameCell(sink, propertyName);\n-        writePropertyDescriptionCell(sink, propertyName, propertyJavadoc);\n-        writePropertyTypeCell(sink, propertyName, field, instance);\n-        writePropertyDefaultValueCell(sink, propertyName, field, instance);\n-        writePropertySinceVersionCell(sink, propertyName, moduleJavadoc, propertyJavadoc);\n+        writePropertyNameCell(sink, s);\n+        writePropertyDescriptionCell(sink, s, detailNode);\n+        writePropertyTypeCell(sink, s, field, o);\n+        writePropertyDefaultValueCell(sink, s, field, o);\n+        writePropertySinceVersionCell(sink, s, detailNode2, detailNode);\n         sink.rawText(PropertiesMacro.INDENT_LEVEL_12);\n         sink.tableRow_();\n     }\n     \n-    private static void writePropertyNameCell(final Sink sink, final String propertyName) {\n+    private static void writePropertyNameCell(final Sink sink, final String s) {\n         sink.rawText(PropertiesMacro.INDENT_LEVEL_14);\n         sink.tableCell();\n-        sink.text(propertyName);\n+        sink.text(s);\n         sink.tableCell_();\n     }\n     \n-    private static void writePropertyDescriptionCell(final Sink sink, final String propertyName, final DetailNode propertyJavadoc) throws MacroExecutionException {\n+    private static void writePropertyDescriptionCell(final Sink sink, final String s, final DetailNode detailNode) throws MacroExecutionException {\n         sink.rawText(PropertiesMacro.INDENT_LEVEL_14);\n         sink.tableCell();\n-        final String description = SiteUtil.getPropertyDescription(propertyName, propertyJavadoc, PropertiesMacro.currentModuleName);\n-        sink.rawText(description);\n+        sink.rawText(SiteUtil.getPropertyDescription(s, detailNode, PropertiesMacro.currentModuleName));\n         sink.tableCell_();\n     }\n     \n-    private static void writePropertyTypeCell(final Sink sink, final String propertyName, final Field field, final Object instance) throws MacroExecutionException {\n+    private static void writePropertyTypeCell(final Sink sink, final String s, final Field field, final Object o) throws MacroExecutionException {\n         sink.rawText(PropertiesMacro.INDENT_LEVEL_14);\n         sink.tableCell();\n-        if (\"tokens\".equals(propertyName)) {\n-            final AbstractCheck check = (AbstractCheck)instance;\n-            if (check.getRequiredTokens().length == 0 && Arrays.equals(check.getAcceptableTokens(), TokenUtil.getAllTokenIds())) {\n+        if (\"tokens\".equals(s)) {\n+            final AbstractCheck abstractCheck = (AbstractCheck)o;\n+            if (abstractCheck.getRequiredTokens().length == 0 && Arrays.equals(abstractCheck.getAcceptableTokens(), TokenUtil.getAllTokenIds())) {\n                 sink.text(\"TokenTypes\");\n             }\n             else {\n-                final List<String> configurableTokens = (List)SiteUtil.getDifference(check.getAcceptableTokens(), check.getRequiredTokens()).stream().map(TokenUtil::getTokenName).collect(Collectors.toList());\n+                final List list = (List)SiteUtil.getDifference(abstractCheck.getAcceptableTokens(), abstractCheck.getRequiredTokens()).stream().map(TokenUtil::getTokenName).collect(Collectors.toList());\n                 sink.text(\"subset of tokens\");\n-                writeTokensList(sink, configurableTokens, \"apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html\");\n+                writeTokensList(sink, list, \"apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html\");\n             }\n         }\n-        else if (\"javadocTokens\".equals(propertyName)) {\n-            final AbstractJavadocCheck check2 = (AbstractJavadocCheck)instance;\n-            final List<String> configurableTokens = (List)SiteUtil.getDifference(check2.getAcceptableJavadocTokens(), check2.getRequiredJavadocTokens()).stream().map(JavadocUtil::getTokenName).collect(Collectors.toList());\n+        else if (\"javadocTokens\".equals(s)) {\n+            final AbstractJavadocCheck abstractJavadocCheck = (AbstractJavadocCheck)o;\n+            final List list2 = (List)SiteUtil.getDifference(abstractJavadocCheck.getAcceptableJavadocTokens(), abstractJavadocCheck.getRequiredJavadocTokens()).stream().map(JavadocUtil::getTokenName).collect(Collectors.toList());\n             sink.text(\"subset of javadoc tokens\");\n-            writeTokensList(sink, configurableTokens, \"apidocs/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.html\");\n+            writeTokensList(sink, list2, \"apidocs/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.html\");\n         }\n         else {\n-            final String type = SiteUtil.getType(field, propertyName, PropertiesMacro.currentModuleName, instance);\n-            final String relativePathToPropertyTypes = SiteUtil.getLinkToDocument(PropertiesMacro.currentModuleName, \"property_types.xml\");\n-            final String escapedType = type.replace(\"[\", \".5B\").replace(\"]\", \".5D\");\n-            final String url = String.format(Locale.ROOT, \"%s#%s\", relativePathToPropertyTypes, escapedType);\n-            sink.link(url);\n+            final String type = SiteUtil.getType(field, s, PropertiesMacro.currentModuleName, o);\n+            sink.link(String.format(Locale.ROOT, \"%s#%s\", SiteUtil.getLinkToDocument(PropertiesMacro.currentModuleName, \"property_types.xml\"), type.replace(\"[\", \".5B\").replace(\"]\", \".5D\")));\n             sink.text(type);\n             sink.link_();\n         }\n         sink.tableCell_();\n     }\n     \n-    private static void writeTokensList(final Sink sink, final List<String> tokens, final String tokenTypesLink) throws MacroExecutionException {\n-        for (int index = 0; index < tokens.size(); ++index) {\n-            final String token = (String)tokens.get(index);\n+    private static void writeTokensList(final Sink sink, final List<String> list, final String s) throws MacroExecutionException {\n+        for (int i = 0; i < list.size(); ++i) {\n+            final String s2 = (String)list.get(i);\n             sink.rawText(PropertiesMacro.INDENT_LEVEL_16);\n-            if (index != 0) {\n+            if (i != 0) {\n                 sink.text(\", \");\n             }\n-            writeLinkToToken(sink, tokenTypesLink, token);\n+            writeLinkToToken(sink, s, s2);\n         }\n         sink.rawText(PropertiesMacro.INDENT_LEVEL_18);\n         sink.text(\".\");\n         sink.rawText(PropertiesMacro.INDENT_LEVEL_14);\n     }\n     \n-    private static void writeLinkToToken(final Sink sink, final String document, final String tokenName) throws MacroExecutionException {\n-        final String link = SiteUtil.getLinkToDocument(PropertiesMacro.currentModuleName, document) + \"#\" + tokenName;\n-        sink.link(link);\n+    private static void writeLinkToToken(final Sink sink, final String s, final String s2) throws MacroExecutionException {\n+        sink.link(SiteUtil.getLinkToDocument(PropertiesMacro.currentModuleName, s) + \"#\" + s2);\n         sink.rawText(PropertiesMacro.INDENT_LEVEL_20);\n-        sink.text(tokenName);\n+        sink.text(s2);\n         sink.link_();\n     }\n     \n-    private static void writePropertyDefaultValueCell(final Sink sink, final String propertyName, final Field field, final Object instance) throws MacroExecutionException {\n+    private static void writePropertyDefaultValueCell(final Sink sink, final String s, final Field field, final Object o) throws MacroExecutionException {\n         sink.rawText(PropertiesMacro.INDENT_LEVEL_14);\n         sink.tableCell();\n-        if (\"tokens\".equals(propertyName)) {\n-            final AbstractCheck check = (AbstractCheck)instance;\n-            if (check.getRequiredTokens().length == 0 && Arrays.equals(check.getDefaultTokens(), TokenUtil.getAllTokenIds())) {\n+        if (\"tokens\".equals(s)) {\n+            final AbstractCheck abstractCheck = (AbstractCheck)o;\n+            if (abstractCheck.getRequiredTokens().length == 0 && Arrays.equals(abstractCheck.getDefaultTokens(), TokenUtil.getAllTokenIds())) {\n                 sink.text(\"TokenTypes\");\n             }\n             else {\n-                final List<String> configurableTokens = (List)SiteUtil.getDifference(check.getDefaultTokens(), check.getRequiredTokens()).stream().map(TokenUtil::getTokenName).collect(Collectors.toList());\n-                writeTokensList(sink, configurableTokens, \"apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html\");\n+                writeTokensList(sink, (List<String>)SiteUtil.getDifference(abstractCheck.getDefaultTokens(), abstractCheck.getRequiredTokens()).stream().map(TokenUtil::getTokenName).collect(Collectors.toList()), \"apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html\");\n             }\n         }\n-        else if (\"javadocTokens\".equals(propertyName)) {\n-            final AbstractJavadocCheck check2 = (AbstractJavadocCheck)instance;\n-            final List<String> configurableTokens = (List)SiteUtil.getDifference(check2.getDefaultJavadocTokens(), check2.getRequiredJavadocTokens()).stream().map(JavadocUtil::getTokenName).collect(Collectors.toList());\n-            writeTokensList(sink, configurableTokens, \"apidocs/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.html\");\n+        else if (\"javadocTokens\".equals(s)) {\n+            final AbstractJavadocCheck abstractJavadocCheck = (AbstractJavadocCheck)o;\n+            writeTokensList(sink, (List<String>)SiteUtil.getDifference(abstractJavadocCheck.getDefaultJavadocTokens(), abstractJavadocCheck.getRequiredJavadocTokens()).stream().map(JavadocUtil::getTokenName).collect(Collectors.toList()), \"apidocs/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.html\");\n         }\n         else {\n-            final String defaultValue = SiteUtil.getDefaultValue(propertyName, field, instance, PropertiesMacro.currentModuleName);\n+            final String defaultValue = SiteUtil.getDefaultValue(s, field, o, PropertiesMacro.currentModuleName);\n             sink.rawText(\"<code>\");\n             sink.text(defaultValue);\n             sink.rawText(\"</code>\");\n         }\n         sink.tableCell_();\n     }\n     \n-    private static void writePropertySinceVersionCell(final Sink sink, final String propertyName, final DetailNode moduleJavadoc, final DetailNode propertyJavadoc) throws MacroExecutionException {\n+    private static void writePropertySinceVersionCell(final Sink sink, final String s, final DetailNode detailNode, final DetailNode detailNode2) throws MacroExecutionException {\n         sink.rawText(PropertiesMacro.INDENT_LEVEL_14);\n         sink.tableCell();\n-        final String sinceVersion = SiteUtil.getSinceVersion(PropertiesMacro.currentModuleName, moduleJavadoc, propertyName, propertyJavadoc);\n-        sink.text(sinceVersion);\n+        sink.text(SiteUtil.getSinceVersion(PropertiesMacro.currentModuleName, detailNode, s, detailNode2));\n         sink.tableCell_();\n     }\n     \n     static {\n         INDENT_LEVEL_10 = SiteUtil.getNewlineAndIndentSpaces(10);\n         INDENT_LEVEL_12 = SiteUtil.getNewlineAndIndentSpaces(12);\n         INDENT_LEVEL_14 = SiteUtil.getNewlineAndIndentSpaces(14);\n"}]}
