{"diffoscope-json-version": 1, "source1": "first/SuppressWithNearbyCommentFilter$Tag.class", "source2": "second/SuppressWithNearbyCommentFilter$Tag.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package com.puppycrawl.tools.checkstyle.filters;\n \n-import java.util.regex.Matcher;\n import com.puppycrawl.tools.checkstyle.TreeWalkerAuditEvent;\n import java.util.Objects;\n import java.util.regex.PatternSyntaxException;\n import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import java.util.regex.Pattern;\n \n private static final class Tag\n@@ -13,111 +12,103 @@\n     private final String text;\n     private final int firstLine;\n     private final int lastLine;\n     private final Pattern tagCheckRegexp;\n     private final Pattern tagMessageRegexp;\n     private final Pattern tagIdRegexp;\n     \n-    private Tag(final String text, final int line, final SuppressWithNearbyCommentFilter filter) {\n+    private Tag(final String text, final int n, final SuppressWithNearbyCommentFilter suppressWithNearbyCommentFilter) {\n         this.text = text;\n-        String format = \"\";\n+        String regex = \"\";\n         try {\n-            format = CommonUtil.fillTemplateWithStringsByRegexp(filter.checkFormat, text, filter.commentFormat);\n-            this.tagCheckRegexp = Pattern.compile(format);\n-            if (filter.messageFormat == null) {\n+            regex = CommonUtil.fillTemplateWithStringsByRegexp(suppressWithNearbyCommentFilter.checkFormat, text, suppressWithNearbyCommentFilter.commentFormat);\n+            this.tagCheckRegexp = Pattern.compile(regex);\n+            if (suppressWithNearbyCommentFilter.messageFormat == null) {\n                 this.tagMessageRegexp = null;\n             }\n             else {\n-                format = CommonUtil.fillTemplateWithStringsByRegexp(filter.messageFormat, text, filter.commentFormat);\n-                this.tagMessageRegexp = Pattern.compile(format);\n+                regex = CommonUtil.fillTemplateWithStringsByRegexp(suppressWithNearbyCommentFilter.messageFormat, text, suppressWithNearbyCommentFilter.commentFormat);\n+                this.tagMessageRegexp = Pattern.compile(regex);\n             }\n-            if (filter.idFormat == null) {\n+            if (suppressWithNearbyCommentFilter.idFormat == null) {\n                 this.tagIdRegexp = null;\n             }\n             else {\n-                format = CommonUtil.fillTemplateWithStringsByRegexp(filter.idFormat, text, filter.commentFormat);\n-                this.tagIdRegexp = Pattern.compile(format);\n+                regex = CommonUtil.fillTemplateWithStringsByRegexp(suppressWithNearbyCommentFilter.idFormat, text, suppressWithNearbyCommentFilter.commentFormat);\n+                this.tagIdRegexp = Pattern.compile(regex);\n             }\n-            format = CommonUtil.fillTemplateWithStringsByRegexp(filter.influenceFormat, text, filter.commentFormat);\n-            final int influence = parseInfluence(format, filter.influenceFormat, text);\n+            regex = CommonUtil.fillTemplateWithStringsByRegexp(suppressWithNearbyCommentFilter.influenceFormat, text, suppressWithNearbyCommentFilter.commentFormat);\n+            final int influence = parseInfluence(regex, suppressWithNearbyCommentFilter.influenceFormat, text);\n             if (influence >= 1) {\n-                this.firstLine = line;\n-                this.lastLine = line + influence;\n+                this.firstLine = n;\n+                this.lastLine = n + influence;\n             }\n             else {\n-                this.firstLine = line + influence;\n-                this.lastLine = line;\n+                this.firstLine = n + influence;\n+                this.lastLine = n;\n             }\n         }\n-        catch (final PatternSyntaxException ex) {\n-            throw new IllegalArgumentException(\"unable to parse expanded comment \" + format, (Throwable)ex);\n+        catch (final PatternSyntaxException cause) {\n+            throw new IllegalArgumentException(\"unable to parse expanded comment \" + regex, (Throwable)cause);\n         }\n     }\n     \n-    private static int parseInfluence(final String format, final String influenceFormat, final String text) {\n+    private static int parseInfluence(final String s, final String s2, final String s3) {\n         try {\n-            return Integer.parseInt(format);\n+            return Integer.parseInt(s);\n         }\n-        catch (final NumberFormatException ex) {\n-            throw new IllegalArgumentException(\"unable to parse influence from '\" + text + \"' using \" + influenceFormat, (Throwable)ex);\n+        catch (final NumberFormatException cause) {\n+            throw new IllegalArgumentException(\"unable to parse influence from '\" + s3 + \"' using \" + s2, (Throwable)cause);\n         }\n     }\n     \n     @Override\n-    public boolean equals(final Object other) {\n-        if (this == other) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (other == null || this.getClass() != other.getClass()) {\n+        if (o == null || this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final Tag tag = (Tag)other;\n+        final Tag tag = (Tag)o;\n         return Objects.equals(Integer.valueOf(this.firstLine), Integer.valueOf(tag.firstLine)) && Objects.equals(Integer.valueOf(this.lastLine), Integer.valueOf(tag.lastLine)) && Objects.equals(this.text, tag.text) && Objects.equals(this.tagCheckRegexp, tag.tagCheckRegexp) && Objects.equals(this.tagMessageRegexp, tag.tagMessageRegexp) && Objects.equals(this.tagIdRegexp, tag.tagIdRegexp);\n     }\n     \n     @Override\n     public int hashCode() {\n         return Objects.hash(this.text, Integer.valueOf(this.firstLine), Integer.valueOf(this.lastLine), this.tagCheckRegexp, this.tagMessageRegexp, this.tagIdRegexp);\n     }\n     \n-    public boolean isMatch(final TreeWalkerAuditEvent event) {\n-        return this.isInScopeOfSuppression(event) && this.isCheckMatch(event) && this.isIdMatch(event) && this.isMessageMatch(event);\n+    public boolean isMatch(final TreeWalkerAuditEvent treeWalkerAuditEvent) {\n+        return this.isInScopeOfSuppression(treeWalkerAuditEvent) && this.isCheckMatch(treeWalkerAuditEvent) && this.isIdMatch(treeWalkerAuditEvent) && this.isMessageMatch(treeWalkerAuditEvent);\n     }\n     \n-    private boolean isInScopeOfSuppression(final TreeWalkerAuditEvent event) {\n-        final int line = event.getLine();\n+    private boolean isInScopeOfSuppression(final TreeWalkerAuditEvent treeWalkerAuditEvent) {\n+        final int line = treeWalkerAuditEvent.getLine();\n         return line >= this.firstLine && line <= this.lastLine;\n     }\n     \n-    private boolean isCheckMatch(final TreeWalkerAuditEvent event) {\n-        final Matcher checkMatcher = this.tagCheckRegexp.matcher(event.getSourceName());\n-        return checkMatcher.find();\n+    private boolean isCheckMatch(final TreeWalkerAuditEvent treeWalkerAuditEvent) {\n+        return this.tagCheckRegexp.matcher(treeWalkerAuditEvent.getSourceName()).find();\n     }\n     \n-    private boolean isIdMatch(final TreeWalkerAuditEvent event) {\n-        boolean match = true;\n+    private boolean isIdMatch(final TreeWalkerAuditEvent treeWalkerAuditEvent) {\n+        boolean b = true;\n         if (this.tagIdRegexp != null) {\n-            if (event.getModuleId() == null) {\n-                match = false;\n-            }\n-            else {\n-                final Matcher idMatcher = this.tagIdRegexp.matcher(event.getModuleId());\n-                match = idMatcher.find();\n-            }\n+            b = (treeWalkerAuditEvent.getModuleId() != null && this.tagIdRegexp.matcher(treeWalkerAuditEvent.getModuleId()).find());\n         }\n-        return match;\n+        return b;\n     }\n     \n-    private boolean isMessageMatch(final TreeWalkerAuditEvent event) {\n-        boolean match = true;\n+    private boolean isMessageMatch(final TreeWalkerAuditEvent treeWalkerAuditEvent) {\n+        boolean find = true;\n         if (this.tagMessageRegexp != null) {\n-            final Matcher messageMatcher = this.tagMessageRegexp.matcher(event.getMessage());\n-            match = messageMatcher.find();\n+            find = this.tagMessageRegexp.matcher(treeWalkerAuditEvent.getMessage()).find();\n         }\n-        return match;\n+        return find;\n     }\n     \n     @Override\n     public String toString() {\n         return \"Tag[text='\" + this.text + \"', firstLine=\" + this.firstLine + \", lastLine=\" + this.lastLine + \", tagCheckRegexp=\" + String.valueOf((Object)this.tagCheckRegexp) + \", tagMessageRegexp=\" + String.valueOf((Object)this.tagMessageRegexp) + \", tagIdRegexp=\" + String.valueOf((Object)this.tagIdRegexp);\n     }\n }\n"}]}
