{"diffoscope-json-version": 1, "source1": "first/ImmutableNode.class", "source2": "second/ImmutableNode.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,134 +11,134 @@\n public final class ImmutableNode implements Iterable<ImmutableNode>\n {\n     private final String nodeName;\n     private final Object value;\n     private final List<ImmutableNode> children;\n     private final Map<String, Object> attributes;\n     \n-    private ImmutableNode(final ImmutableNode.Builder b) {\n-        this.children = b.createChildren();\n-        this.attributes = ImmutableNode.Builder.access$000(b);\n-        this.nodeName = ImmutableNode.Builder.access$100(b);\n-        this.value = ImmutableNode.Builder.access$200(b);\n+    private ImmutableNode(final ImmutableNode.Builder builder) {\n+        this.children = builder.createChildren();\n+        this.attributes = ImmutableNode.Builder.access$000(builder);\n+        this.nodeName = ImmutableNode.Builder.access$100(builder);\n+        this.value = ImmutableNode.Builder.access$200(builder);\n     }\n     \n     public String getNodeName() {\n         return this.nodeName;\n     }\n     \n     public Object getValue() {\n         return this.value;\n     }\n     \n     public List<ImmutableNode> getChildren() {\n         return this.children;\n     }\n     \n-    public List<ImmutableNode> getChildren(final String name) {\n-        final List<ImmutableNode> list = new ArrayList<ImmutableNode>();\n-        if (name == null) {\n+    public List<ImmutableNode> getChildren(final String s) {\n+        final ArrayList list = new ArrayList();\n+        if (s == null) {\n             return list;\n         }\n-        for (final ImmutableNode node : this.children) {\n-            if (name.equals(node.getNodeName())) {\n-                list.add(node);\n+        for (final ImmutableNode immutableNode : this.children) {\n+            if (s.equals(immutableNode.getNodeName())) {\n+                list.add(immutableNode);\n             }\n         }\n         return list;\n     }\n     \n     public Map<String, Object> getAttributes() {\n         return this.attributes;\n     }\n     \n-    public ImmutableNode setName(final String name) {\n-        return new ImmutableNode.Builder((List)this.children, (Map)this.attributes, (ImmutableNode.ImmutableNode$1)null).name(name).value(this.value).create();\n+    public ImmutableNode setName(final String s) {\n+        return new ImmutableNode.Builder((List)this.children, (Map)this.attributes, (ImmutableNode.ImmutableNode$1)null).name(s).value(this.value).create();\n     }\n     \n-    public ImmutableNode setValue(final Object newValue) {\n-        return new ImmutableNode.Builder((List)this.children, (Map)this.attributes, (ImmutableNode.ImmutableNode$1)null).name(this.nodeName).value(newValue).create();\n+    public ImmutableNode setValue(final Object o) {\n+        return new ImmutableNode.Builder((List)this.children, (Map)this.attributes, (ImmutableNode.ImmutableNode$1)null).name(this.nodeName).value(o).create();\n     }\n     \n-    public ImmutableNode addChild(final ImmutableNode child) {\n-        checkChildNode(child);\n+    public ImmutableNode addChild(final ImmutableNode immutableNode) {\n+        checkChildNode(immutableNode);\n         final ImmutableNode.Builder builder = new ImmutableNode.Builder(this.children.size() + 1, (Map)this.attributes, (ImmutableNode.ImmutableNode$1)null);\n-        builder.addChildren((Collection)this.children).addChild(child);\n+        builder.addChildren((Collection)this.children).addChild(immutableNode);\n         return this.createWithBasicProperties(builder);\n     }\n     \n-    public ImmutableNode removeChild(final ImmutableNode child) {\n+    public ImmutableNode removeChild(final ImmutableNode immutableNode) {\n         final ImmutableNode.Builder builder = new ImmutableNode.Builder(this.children.size(), (Map)this.attributes, (ImmutableNode.ImmutableNode$1)null);\n-        boolean foundChild = false;\n-        for (final ImmutableNode c : this.children) {\n-            if (c == child) {\n-                foundChild = true;\n+        boolean b = false;\n+        for (final ImmutableNode immutableNode2 : this.children) {\n+            if (immutableNode2 == immutableNode) {\n+                b = true;\n             }\n             else {\n-                builder.addChild(c);\n+                builder.addChild(immutableNode2);\n             }\n         }\n-        return foundChild ? this.createWithBasicProperties(builder) : this;\n+        return b ? this.createWithBasicProperties(builder) : this;\n     }\n     \n-    public ImmutableNode replaceChild(final ImmutableNode oldChild, final ImmutableNode newChild) {\n-        checkChildNode(newChild);\n+    public ImmutableNode replaceChild(final ImmutableNode immutableNode, final ImmutableNode immutableNode2) {\n+        checkChildNode(immutableNode2);\n         final ImmutableNode.Builder builder = new ImmutableNode.Builder(this.children.size(), (Map)this.attributes, (ImmutableNode.ImmutableNode$1)null);\n-        boolean foundChild = false;\n-        for (final ImmutableNode c : this.children) {\n-            if (c == oldChild) {\n-                builder.addChild(newChild);\n-                foundChild = true;\n+        boolean b = false;\n+        for (final ImmutableNode immutableNode3 : this.children) {\n+            if (immutableNode3 == immutableNode) {\n+                builder.addChild(immutableNode2);\n+                b = true;\n             }\n             else {\n-                builder.addChild(c);\n+                builder.addChild(immutableNode3);\n             }\n         }\n-        return foundChild ? this.createWithBasicProperties(builder) : this;\n+        return b ? this.createWithBasicProperties(builder) : this;\n     }\n     \n-    public ImmutableNode replaceChildren(final Collection<ImmutableNode> newChildren) {\n+    public ImmutableNode replaceChildren(final Collection<ImmutableNode> collection) {\n         final ImmutableNode.Builder builder = new ImmutableNode.Builder((List)null, (Map)this.attributes, (ImmutableNode.ImmutableNode$1)null);\n-        builder.addChildren((Collection)newChildren);\n+        builder.addChildren((Collection)collection);\n         return this.createWithBasicProperties(builder);\n     }\n     \n-    public ImmutableNode setAttribute(final String name, final Object value) {\n-        final Map<String, Object> newAttrs = new HashMap<String, Object>(this.attributes);\n-        newAttrs.put(name, value);\n-        return this.createWithNewAttributes(newAttrs);\n+    public ImmutableNode setAttribute(final String s, final Object o) {\n+        final HashMap hashMap = new HashMap((Map<? extends K, ? extends V>)this.attributes);\n+        hashMap.put(s, o);\n+        return this.createWithNewAttributes(hashMap);\n     }\n     \n-    public ImmutableNode setAttributes(final Map<String, ?> newAttributes) {\n-        if (newAttributes == null || newAttributes.isEmpty()) {\n+    public ImmutableNode setAttributes(final Map<String, ?> map) {\n+        if (map == null || map.isEmpty()) {\n             return this;\n         }\n-        final Map<String, Object> newAttrs = new HashMap<String, Object>(this.attributes);\n-        newAttrs.putAll(newAttributes);\n-        return this.createWithNewAttributes(newAttrs);\n+        final HashMap hashMap = new HashMap((Map<? extends K, ? extends V>)this.attributes);\n+        hashMap.putAll(map);\n+        return this.createWithNewAttributes(hashMap);\n     }\n     \n-    public ImmutableNode removeAttribute(final String name) {\n-        final Map<String, Object> newAttrs = new HashMap<String, Object>(this.attributes);\n-        if (newAttrs.remove(name) != null) {\n-            return this.createWithNewAttributes(newAttrs);\n+    public ImmutableNode removeAttribute(final String s) {\n+        final HashMap hashMap = new HashMap((Map<? extends K, ? extends V>)this.attributes);\n+        if (hashMap.remove(s) != null) {\n+            return this.createWithNewAttributes(hashMap);\n         }\n         return this;\n     }\n     \n     private ImmutableNode createWithBasicProperties(final ImmutableNode.Builder builder) {\n         return builder.name(this.nodeName).value(this.value).create();\n     }\n     \n-    private ImmutableNode createWithNewAttributes(final Map<String, Object> newAttrs) {\n-        return this.createWithBasicProperties(new ImmutableNode.Builder((List)this.children, (Map)null, (ImmutableNode.ImmutableNode$1)null).addAttributes((Map)newAttrs));\n+    private ImmutableNode createWithNewAttributes(final Map<String, Object> map) {\n+        return this.createWithBasicProperties(new ImmutableNode.Builder((List)this.children, (Map)null, (ImmutableNode.ImmutableNode$1)null).addAttributes((Map)map));\n     }\n     \n-    private static void checkChildNode(final ImmutableNode child) {\n-        if (child == null) {\n+    private static void checkChildNode(final ImmutableNode immutableNode) {\n+        if (immutableNode == null) {\n             throw new IllegalArgumentException(\"Child node must not be null!\");\n         }\n     }\n     \n     @Override\n     public Iterator<ImmutableNode> iterator() {\n         return this.children.iterator();\n"}]}
