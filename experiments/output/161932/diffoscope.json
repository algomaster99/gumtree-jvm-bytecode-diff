{"diffoscope-json-version": 1, "source1": "first/ZipSplitReadOnlySeekableByteChannel.class", "source2": "second/ZipSplitReadOnlySeekableByteChannel.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,8 +1,8 @@\n-  SHA-256 checksum ddd79fe58c7bb1c55b5f40782f083e172737530b6c165c7a2519542a35bc9f34\n+  SHA-256 checksum 171ecd50d64f4607ad25184ae09599eab1395bf00d31cb41be172b286ead2a21\n   Compiled from \"ZipSplitReadOnlySeekableByteChannel.java\"\n public class org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel extends org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #1                          // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n   super_class: #3                         // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n@@ -318,18 +318,18 @@\n   #308 = Utf8               assertSplitSignature\n   #309 = Utf8               this\n   #310 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel;\n   #311 = InterfaceMethodref #261.#312     // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n   #312 = NameAndType        #313:#314     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n   #313 = Utf8               position\n   #314 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-  #315 = Methodref          #299.#316     // java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n-  #316 = NameAndType        #317:#318     // rewind:()Ljava/nio/ByteBuffer;\n+  #315 = Methodref          #299.#316     // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+  #316 = NameAndType        #317:#318     // rewind:()Ljava/nio/Buffer;\n   #317 = Utf8               rewind\n-  #318 = Utf8               ()Ljava/nio/ByteBuffer;\n+  #318 = Utf8               ()Ljava/nio/Buffer;\n   #319 = InterfaceMethodref #261.#320     // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n   #320 = NameAndType        #321:#322     // read:(Ljava/nio/ByteBuffer;)I\n   #321 = Utf8               read\n   #322 = Utf8               (Ljava/nio/ByteBuffer;)I\n   #323 = Class              #324          // org/apache/commons/compress/archivers/zip/ZipLong\n   #324 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n   #325 = Methodref          #299.#326     // java/nio/ByteBuffer.array:()[B\n@@ -1013,15 +1013,15 @@\n         10: astore_2\n         11: aload_2\n         12: lconst_0\n         13: invokeinterface #311,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         18: pop\n         19: aload_0\n         20: getfield      #304                // Field zipSplitSignatureByteBuffer:Ljava/nio/ByteBuffer;\n-        23: invokevirtual #315                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+        23: invokevirtual #315                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n         26: pop\n         27: aload_2\n         28: aload_0\n         29: getfield      #304                // Field zipSplitSignatureByteBuffer:Ljava/nio/ByteBuffer;\n         32: invokeinterface #319,  2          // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         37: pop\n         38: new           #323                // class org/apache/commons/compress/archivers/zip/ZipLong\n"}]}
