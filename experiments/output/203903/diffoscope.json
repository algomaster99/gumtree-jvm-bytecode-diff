{"diffoscope-json-version": 1, "source1": "first/NewAttributeBands$Replication.class", "source2": "second/NewAttributeBands$Replication.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,46 +11,47 @@\n import java.util.List;\n \n public class Replication extends NewAttributeBands.LayoutElement\n {\n     private final NewAttributeBands.Integral countElement;\n     private final List<NewAttributeBands.LayoutElement> layoutElements;\n     \n-    public Replication(final NewAttributeBands this$0, final String tag, final String contents) throws IOException {\n+    public Replication(final NewAttributeBands this$0, final String s, final String s2) throws IOException {\n         super(this.this$0 = this$0, (NewAttributeBands.NewAttributeBands$1)null);\n         this.layoutElements = new ArrayList();\n-        this.countElement = new NewAttributeBands.Integral(this$0, tag);\n-        final StringReader stream = new StringReader(contents);\n-        NewAttributeBands.LayoutElement e;\n-        while ((e = NewAttributeBands.access$500(this$0, stream)) != null) {\n-            this.layoutElements.add(e);\n+        this.countElement = new NewAttributeBands.Integral(this$0, s);\n+        NewAttributeBands.LayoutElement access$500;\n+        while ((access$500 = NewAttributeBands.access$500(this$0, new StringReader(s2))) != null) {\n+            this.layoutElements.add(access$500);\n         }\n     }\n     \n-    public void readBands(final InputStream in, final int count) throws IOException, Pack200Exception {\n-        this.countElement.readBands(in, count);\n-        int arrayCount = 0;\n-        for (int i = 0; i < count; ++i) {\n-            arrayCount += this.countElement.getValue(i);\n+    public void readBands(final InputStream inputStream, final int n) throws IOException, Pack200Exception {\n+        this.countElement.readBands(inputStream, n);\n+        int n2 = 0;\n+        for (int i = 0; i < n; ++i) {\n+            n2 += this.countElement.getValue(i);\n         }\n-        for (final NewAttributeBands.LayoutElement layoutElement : this.layoutElements) {\n-            layoutElement.readBands(in, arrayCount);\n+        final Iterator iterator = this.layoutElements.iterator();\n+        while (iterator.hasNext()) {\n+            ((NewAttributeBands.LayoutElement)iterator.next()).readBands(inputStream, n2);\n         }\n     }\n     \n-    public void addToAttribute(final int index, final NewAttribute attribute) {\n-        this.countElement.addToAttribute(index, attribute);\n-        int offset = 0;\n-        for (int i = 0; i < index; ++i) {\n-            offset += this.countElement.getValue(i);\n+    public void addToAttribute(final int n, final NewAttribute newAttribute) {\n+        this.countElement.addToAttribute(n, newAttribute);\n+        int n2 = 0;\n+        for (int i = 0; i < n; ++i) {\n+            n2 += this.countElement.getValue(i);\n         }\n-        final long numElements = (long)this.countElement.getValue(index);\n-        for (int j = offset; j < offset + numElements; ++j) {\n-            for (final NewAttributeBands.LayoutElement layoutElement : this.layoutElements) {\n-                layoutElement.addToAttribute(j, attribute);\n+        final long n3 = (long)this.countElement.getValue(n);\n+        for (int n4 = n2; n4 < n2 + n3; ++n4) {\n+            final Iterator iterator = this.layoutElements.iterator();\n+            while (iterator.hasNext()) {\n+                ((NewAttributeBands.LayoutElement)iterator.next()).addToAttribute(n4, newAttribute);\n             }\n         }\n     }\n     \n     public NewAttributeBands.Integral getCountElement() {\n         return this.countElement;\n     }\n"}]}
