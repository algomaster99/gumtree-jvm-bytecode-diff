{"diffoscope-json-version": 1, "source1": "first/AsiExtraField.class", "source2": "second/AsiExtraField.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -33,28 +33,28 @@\n     }\n     \n     public ZipShort getCentralDirectoryLength() {\n         return this.getLocalFileDataLength();\n     }\n     \n     public byte[] getLocalFileDataData() {\n-        final byte[] data = new byte[this.getLocalFileDataLength().getValue() - 4];\n-        System.arraycopy(ZipShort.getBytes(this.getMode()), 0, data, 0, 2);\n-        final byte[] linkArray = this.getLinkedFile().getBytes();\n-        System.arraycopy(ZipLong.getBytes((long)linkArray.length), 0, data, 2, 4);\n-        System.arraycopy(ZipShort.getBytes(this.getUserId()), 0, data, 6, 2);\n-        System.arraycopy(ZipShort.getBytes(this.getGroupId()), 0, data, 8, 2);\n-        System.arraycopy(linkArray, 0, data, 10, linkArray.length);\n+        final byte[] b = new byte[this.getLocalFileDataLength().getValue() - 4];\n+        System.arraycopy(ZipShort.getBytes(this.getMode()), 0, b, 0, 2);\n+        final byte[] bytes = this.getLinkedFile().getBytes();\n+        System.arraycopy(ZipLong.getBytes((long)bytes.length), 0, b, 2, 4);\n+        System.arraycopy(ZipShort.getBytes(this.getUserId()), 0, b, 6, 2);\n+        System.arraycopy(ZipShort.getBytes(this.getGroupId()), 0, b, 8, 2);\n+        System.arraycopy(bytes, 0, b, 10, bytes.length);\n         this.crc.reset();\n-        this.crc.update(data);\n-        final long checksum = this.crc.getValue();\n-        final byte[] result = new byte[data.length + 4];\n-        System.arraycopy(ZipLong.getBytes(checksum), 0, result, 0, 4);\n-        System.arraycopy(data, 0, result, 4, data.length);\n-        return result;\n+        this.crc.update(b);\n+        final long value = this.crc.getValue();\n+        final byte[] array = new byte[b.length + 4];\n+        System.arraycopy(ZipLong.getBytes(value), 0, array, 0, 4);\n+        System.arraycopy(b, 0, array, 4, b.length);\n+        return array;\n     }\n     \n     public byte[] getCentralDirectoryData() {\n         return this.getLocalFileDataData();\n     }\n     \n     public void setUserId(final int uid) {\n@@ -69,29 +69,29 @@\n         this.gid = gid;\n     }\n     \n     public int getGroupId() {\n         return this.gid;\n     }\n     \n-    public void setLinkedFile(final String name) {\n-        this.link = name;\n+    public void setLinkedFile(final String link) {\n+        this.link = link;\n         this.mode = this.getMode(this.mode);\n     }\n     \n     public String getLinkedFile() {\n         return this.link;\n     }\n     \n     public boolean isLink() {\n         return this.getLinkedFile().length() != 0;\n     }\n     \n-    public void setMode(final int mode) {\n-        this.mode = this.getMode(mode);\n+    public void setMode(final int n) {\n+        this.mode = this.getMode(n);\n     }\n     \n     public int getMode() {\n         return this.mode;\n     }\n     \n     public void setDirectory(final boolean dirFlag) {\n@@ -99,65 +99,65 @@\n         this.mode = this.getMode(this.mode);\n     }\n     \n     public boolean isDirectory() {\n         return this.dirFlag && !this.isLink();\n     }\n     \n-    public void parseFromLocalFileData(final byte[] data, final int offset, final int length) throws ZipException {\n-        final long givenChecksum = ZipLong.getValue(data, offset);\n-        final byte[] tmp = new byte[length - 4];\n-        System.arraycopy(data, offset + 4, tmp, 0, length - 4);\n+    public void parseFromLocalFileData(final byte[] array, final int n, final int n2) throws ZipException {\n+        final long value = ZipLong.getValue(array, n);\n+        final byte[] b = new byte[n2 - 4];\n+        System.arraycopy(array, n + 4, b, 0, n2 - 4);\n         this.crc.reset();\n-        this.crc.update(tmp);\n-        final long realChecksum = this.crc.getValue();\n-        if (givenChecksum != realChecksum) {\n-            throw new ZipException(\"Bad CRC checksum, expected \" + Long.toHexString(givenChecksum) + \" instead of \" + Long.toHexString(realChecksum));\n-        }\n-        final int newMode = ZipShort.getValue(tmp, 0);\n-        final byte[] linkArray = new byte[(int)ZipLong.getValue(tmp, 2)];\n-        this.uid = ZipShort.getValue(tmp, 6);\n-        this.gid = ZipShort.getValue(tmp, 8);\n-        if (linkArray.length == 0) {\n+        this.crc.update(b);\n+        final long value2 = this.crc.getValue();\n+        if (value != value2) {\n+            throw new ZipException(\"Bad CRC checksum, expected \" + Long.toHexString(value) + \" instead of \" + Long.toHexString(value2));\n+        }\n+        final int value3 = ZipShort.getValue(b, 0);\n+        final byte[] bytes = new byte[(int)ZipLong.getValue(b, 2)];\n+        this.uid = ZipShort.getValue(b, 6);\n+        this.gid = ZipShort.getValue(b, 8);\n+        if (bytes.length == 0) {\n             this.link = \"\";\n         }\n         else {\n-            if (linkArray.length > tmp.length - 10) {\n-                throw new ZipException(\"Bad symbolic link name length \" + linkArray.length + \" in ASI extra field\");\n+            if (bytes.length > b.length - 10) {\n+                throw new ZipException(\"Bad symbolic link name length \" + bytes.length + \" in ASI extra field\");\n             }\n-            System.arraycopy(tmp, 10, linkArray, 0, linkArray.length);\n-            this.link = new String(linkArray);\n+            System.arraycopy(b, 10, bytes, 0, bytes.length);\n+            this.link = new String(bytes);\n         }\n-        this.setDirectory((newMode & 0x4000) != 0x0);\n-        this.setMode(newMode);\n+        this.setDirectory((value3 & 0x4000) != 0x0);\n+        this.setMode(value3);\n     }\n     \n-    public void parseFromCentralDirectoryData(final byte[] buffer, final int offset, final int length) throws ZipException {\n-        this.parseFromLocalFileData(buffer, offset, length);\n+    public void parseFromCentralDirectoryData(final byte[] array, final int n, final int n2) throws ZipException {\n+        this.parseFromLocalFileData(array, n, n2);\n     }\n     \n-    protected int getMode(final int mode) {\n-        int type = 32768;\n+    protected int getMode(final int n) {\n+        int n2 = 32768;\n         if (this.isLink()) {\n-            type = 40960;\n+            n2 = 40960;\n         }\n         else if (this.isDirectory()) {\n-            type = 16384;\n+            n2 = 16384;\n         }\n-        return type | (mode & 0xFFF);\n+        return n2 | (n & 0xFFF);\n     }\n     \n     public Object clone() {\n         try {\n-            final AsiExtraField cloned = (AsiExtraField)super.clone();\n-            cloned.crc = new CRC32();\n-            return cloned;\n+            final AsiExtraField asiExtraField = (AsiExtraField)super.clone();\n+            asiExtraField.crc = new CRC32();\n+            return asiExtraField;\n         }\n-        catch (final CloneNotSupportedException cnfe) {\n-            throw new RuntimeException(cnfe);\n+        catch (final CloneNotSupportedException cause) {\n+            throw new RuntimeException(cause);\n         }\n     }\n     \n     static {\n         HEADER_ID = new ZipShort(30062);\n     }\n }\n"}]}
