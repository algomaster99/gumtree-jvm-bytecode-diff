{"diffoscope-json-version": 1, "source1": "first/MultiReadOnlySeekableByteChannel.class", "source2": "second/MultiReadOnlySeekableByteChannel.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -161,15 +161,17 @@\n             return channels[0];\n         }\n         return new MultiReadOnlySeekableByteChannel(Arrays.asList(channels));\n     }\n     \n     public static SeekableByteChannel forFiles(final File... files) throws IOException {\n         final List<SeekableByteChannel> channels = new ArrayList<SeekableByteChannel>();\n-        for (final File f : (File[])Objects.requireNonNull(files, \"files must not be null\")) {\n+        File[] array;\n+        for (int length = (array = Objects.requireNonNull(files, \"files must not be null\")).length, i = 0; i < length; ++i) {\n+            final File f = array[i];\n             channels.add(Files.newByteChannel(f.toPath(), StandardOpenOption.READ));\n         }\n         if (channels.size() == 1) {\n             return channels.get(0);\n         }\n         return new MultiReadOnlySeekableByteChannel(channels);\n     }\n"}]}
