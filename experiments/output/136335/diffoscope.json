{"diffoscope-json-version": 1, "source1": "first/Module.class", "source2": "second/Module.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -67,31 +67,41 @@\n     \n     public void dump(final DataOutputStream file) throws IOException {\n         super.dump(file);\n         file.writeShort(this.moduleNameIndex);\n         file.writeShort(this.moduleFlags);\n         file.writeShort(this.moduleVersionIndex);\n         file.writeShort(this.requiresTable.length);\n-        for (final ModuleRequires entry : this.requiresTable) {\n+        ModuleRequires[] requiresTable;\n+        for (int length = (requiresTable = this.requiresTable).length, i = 0; i < length; ++i) {\n+            final ModuleRequires entry = requiresTable[i];\n             entry.dump(file);\n         }\n         file.writeShort(this.exportsTable.length);\n-        for (final ModuleExports entry2 : this.exportsTable) {\n+        ModuleExports[] exportsTable;\n+        for (int length2 = (exportsTable = this.exportsTable).length, j = 0; j < length2; ++j) {\n+            final ModuleExports entry2 = exportsTable[j];\n             entry2.dump(file);\n         }\n         file.writeShort(this.opensTable.length);\n-        for (final ModuleOpens entry3 : this.opensTable) {\n+        ModuleOpens[] opensTable;\n+        for (int length3 = (opensTable = this.opensTable).length, k = 0; k < length3; ++k) {\n+            final ModuleOpens entry3 = opensTable[k];\n             entry3.dump(file);\n         }\n         file.writeShort(this.usesIndex.length);\n-        for (final int entry4 : this.usesIndex) {\n+        int[] usesIndex;\n+        for (int length4 = (usesIndex = this.usesIndex).length, l = 0; l < length4; ++l) {\n+            final int entry4 = usesIndex[l];\n             file.writeShort(entry4);\n         }\n         file.writeShort(this.providesTable.length);\n-        for (final ModuleProvides entry5 : this.providesTable) {\n+        ModuleProvides[] providesTable;\n+        for (int length5 = (providesTable = this.providesTable).length, n = 0; n < length5; ++n) {\n+            final ModuleProvides entry5 = providesTable[n];\n             entry5.dump(file);\n         }\n     }\n     \n     public ModuleExports[] getExportsTable() {\n         return this.exportsTable;\n     }\n@@ -113,30 +123,40 @@\n         final StringBuilder buf = new StringBuilder();\n         buf.append(\"Module:\\n\");\n         buf.append(\"  name:    \").append(Utility.pathToPackage(cp.getConstantString(this.moduleNameIndex, (byte)19))).append(\"\\n\");\n         buf.append(\"  flags:   \").append(String.format(\"%04x\", Integer.valueOf(this.moduleFlags))).append(\"\\n\");\n         final String version = (this.moduleVersionIndex == 0) ? \"0\" : cp.getConstantString(this.moduleVersionIndex, (byte)1);\n         buf.append(\"  version: \").append(version).append(\"\\n\");\n         buf.append(\"  requires(\").append(this.requiresTable.length).append(\"):\\n\");\n-        for (final ModuleRequires module : this.requiresTable) {\n+        ModuleRequires[] requiresTable;\n+        for (int length = (requiresTable = this.requiresTable).length, i = 0; i < length; ++i) {\n+            final ModuleRequires module = requiresTable[i];\n             buf.append(\"    \").append(module.toString(cp)).append(\"\\n\");\n         }\n         buf.append(\"  exports(\").append(this.exportsTable.length).append(\"):\\n\");\n-        for (final ModuleExports module2 : this.exportsTable) {\n+        ModuleExports[] exportsTable;\n+        for (int length2 = (exportsTable = this.exportsTable).length, j = 0; j < length2; ++j) {\n+            final ModuleExports module2 = exportsTable[j];\n             buf.append(\"    \").append(module2.toString(cp)).append(\"\\n\");\n         }\n         buf.append(\"  opens(\").append(this.opensTable.length).append(\"):\\n\");\n-        for (final ModuleOpens module3 : this.opensTable) {\n+        ModuleOpens[] opensTable;\n+        for (int length3 = (opensTable = this.opensTable).length, k = 0; k < length3; ++k) {\n+            final ModuleOpens module3 = opensTable[k];\n             buf.append(\"    \").append(module3.toString(cp)).append(\"\\n\");\n         }\n         buf.append(\"  uses(\").append(this.usesIndex.length).append(\"):\\n\");\n-        for (final int index : this.usesIndex) {\n+        int[] usesIndex;\n+        for (int length4 = (usesIndex = this.usesIndex).length, l = 0; l < length4; ++l) {\n+            final int index = usesIndex[l];\n             final String className = cp.getConstantString(index, (byte)7);\n             buf.append(\"    \").append(Utility.compactClassName(className, false)).append(\"\\n\");\n         }\n         buf.append(\"  provides(\").append(this.providesTable.length).append(\"):\\n\");\n-        for (final ModuleProvides module4 : this.providesTable) {\n+        ModuleProvides[] providesTable;\n+        for (int length5 = (providesTable = this.providesTable).length, n = 0; n < length5; ++n) {\n+            final ModuleProvides module4 = providesTable[n];\n             buf.append(\"    \").append(module4.toString(cp)).append(\"\\n\");\n         }\n         return buf.substring();\n     }\n }\n"}]}
