{"diffoscope-json-version": 1, "source1": "first/Util.class", "source2": "second/Util.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,108 +12,108 @@\n public final class Util\n {\n     public static final int DEFAULT_COPY_BUFFER_SIZE = 1024;\n     \n     private Util() {\n     }\n     \n-    public static long copyStream(final InputStream source, final OutputStream dest, final int bufferSize, final long streamSize, final CopyStreamListener listener, final boolean flush) throws CopyStreamException {\n-        long total = 0L;\n-        final byte[] buffer = new byte[(bufferSize > 0) ? bufferSize : 1024];\n+    public static long copyStream(final InputStream inputStream, final OutputStream outputStream, final int n, final long n2, final CopyStreamListener copyStreamListener, final boolean b) throws CopyStreamException {\n+        long n3 = 0L;\n+        final byte[] array = new byte[(n > 0) ? n : 1024];\n         try {\n-            int numBytes;\n-            while ((numBytes = source.read(buffer)) != -1) {\n-                if (numBytes == 0) {\n-                    final int singleByte = source.read();\n-                    if (singleByte < 0) {\n+            int read;\n+            while ((read = inputStream.read(array)) != -1) {\n+                if (read == 0) {\n+                    final int read2 = inputStream.read();\n+                    if (read2 < 0) {\n                         break;\n                     }\n-                    dest.write(singleByte);\n-                    if (flush) {\n-                        dest.flush();\n+                    outputStream.write(read2);\n+                    if (b) {\n+                        outputStream.flush();\n                     }\n-                    ++total;\n-                    if (listener == null) {\n+                    ++n3;\n+                    if (copyStreamListener == null) {\n                         continue;\n                     }\n-                    listener.bytesTransferred(total, 1, streamSize);\n+                    copyStreamListener.bytesTransferred(n3, 1, n2);\n                 }\n                 else {\n-                    dest.write(buffer, 0, numBytes);\n-                    if (flush) {\n-                        dest.flush();\n+                    outputStream.write(array, 0, read);\n+                    if (b) {\n+                        outputStream.flush();\n                     }\n-                    total += numBytes;\n-                    if (listener == null) {\n+                    n3 += read;\n+                    if (copyStreamListener == null) {\n                         continue;\n                     }\n-                    listener.bytesTransferred(total, numBytes, streamSize);\n+                    copyStreamListener.bytesTransferred(n3, read, n2);\n                 }\n             }\n         }\n-        catch (final IOException e) {\n-            throw new CopyStreamException(\"IOException caught while copying.\", total, e);\n+        catch (final IOException ex) {\n+            throw new CopyStreamException(\"IOException caught while copying.\", n3, ex);\n         }\n-        return total;\n+        return n3;\n     }\n     \n-    public static long copyStream(final InputStream source, final OutputStream dest, final int bufferSize, final long streamSize, final CopyStreamListener listener) throws CopyStreamException {\n-        return copyStream(source, dest, bufferSize, streamSize, listener, true);\n+    public static long copyStream(final InputStream inputStream, final OutputStream outputStream, final int n, final long n2, final CopyStreamListener copyStreamListener) throws CopyStreamException {\n+        return copyStream(inputStream, outputStream, n, n2, copyStreamListener, true);\n     }\n     \n-    public static long copyStream(final InputStream source, final OutputStream dest, final int bufferSize) throws CopyStreamException {\n-        return copyStream(source, dest, bufferSize, -1L, null);\n+    public static long copyStream(final InputStream inputStream, final OutputStream outputStream, final int n) throws CopyStreamException {\n+        return copyStream(inputStream, outputStream, n, -1L, null);\n     }\n     \n-    public static long copyStream(final InputStream source, final OutputStream dest) throws CopyStreamException {\n-        return copyStream(source, dest, 1024);\n+    public static long copyStream(final InputStream inputStream, final OutputStream outputStream) throws CopyStreamException {\n+        return copyStream(inputStream, outputStream, 1024);\n     }\n     \n-    public static long copyReader(final Reader source, final Writer dest, final int bufferSize, final long streamSize, final CopyStreamListener listener) throws CopyStreamException {\n-        long total = 0L;\n-        final char[] buffer = new char[(bufferSize > 0) ? bufferSize : 1024];\n+    public static long copyReader(final Reader reader, final Writer writer, final int n, final long n2, final CopyStreamListener copyStreamListener) throws CopyStreamException {\n+        long n3 = 0L;\n+        final char[] cbuf = new char[(n > 0) ? n : 1024];\n         try {\n-            int numChars;\n-            while ((numChars = source.read(buffer)) != -1) {\n-                if (numChars == 0) {\n-                    final int singleChar = source.read();\n-                    if (singleChar < 0) {\n+            int read;\n+            while ((read = reader.read(cbuf)) != -1) {\n+                if (read == 0) {\n+                    final int read2 = reader.read();\n+                    if (read2 < 0) {\n                         break;\n                     }\n-                    dest.write(singleChar);\n-                    dest.flush();\n-                    ++total;\n-                    if (listener == null) {\n+                    writer.write(read2);\n+                    writer.flush();\n+                    ++n3;\n+                    if (copyStreamListener == null) {\n                         continue;\n                     }\n-                    listener.bytesTransferred(total, 1, streamSize);\n+                    copyStreamListener.bytesTransferred(n3, 1, n2);\n                 }\n                 else {\n-                    dest.write(buffer, 0, numChars);\n-                    dest.flush();\n-                    total += numChars;\n-                    if (listener == null) {\n+                    writer.write(cbuf, 0, read);\n+                    writer.flush();\n+                    n3 += read;\n+                    if (copyStreamListener == null) {\n                         continue;\n                     }\n-                    listener.bytesTransferred(total, numChars, streamSize);\n+                    copyStreamListener.bytesTransferred(n3, read, n2);\n                 }\n             }\n         }\n-        catch (final IOException e) {\n-            throw new CopyStreamException(\"IOException caught while copying.\", total, e);\n+        catch (final IOException ex) {\n+            throw new CopyStreamException(\"IOException caught while copying.\", n3, ex);\n         }\n-        return total;\n+        return n3;\n     }\n     \n-    public static long copyReader(final Reader source, final Writer dest, final int bufferSize) throws CopyStreamException {\n-        return copyReader(source, dest, bufferSize, -1L, null);\n+    public static long copyReader(final Reader reader, final Writer writer, final int n) throws CopyStreamException {\n+        return copyReader(reader, writer, n, -1L, null);\n     }\n     \n-    public static long copyReader(final Reader source, final Writer dest) throws CopyStreamException {\n-        return copyReader(source, dest, 1024);\n+    public static long copyReader(final Reader reader, final Writer writer) throws CopyStreamException {\n+        return copyReader(reader, writer, 1024);\n     }\n     \n     public static void closeQuietly(final Closeable closeable) {\n         if (closeable != null) {\n             try {\n                 closeable.close();\n             }\n"}]}
