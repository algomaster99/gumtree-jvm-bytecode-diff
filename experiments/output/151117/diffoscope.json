{"diffoscope-json-version": 1, "source1": "first/INIConfiguration.class", "source2": "second/INIConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -30,14 +30,18 @@\n     private static final String QUOTE_CHARACTERS = \"\\\"'\";\n     private static final String LINE_CONT = \"\\\\\";\n     private String separatorUsedInOutput;\n     private String separatorUsedInInput;\n     private String commentCharsUsedInInput;\n     private boolean sectionInLineCommentsAllowed;\n     \n+    static {\n+        LINE_SEPARATOR = System.lineSeparator();\n+    }\n+    \n     public INIConfiguration() {\n         this.separatorUsedInOutput = \" = \";\n         this.separatorUsedInInput = \"=:\";\n         this.commentCharsUsedInInput = \"#;\";\n     }\n     \n     public INIConfiguration(final HierarchicalConfiguration<ImmutableNode> c) {\n@@ -72,14 +76,15 @@\n         this.beginWrite(false);\n         try {\n             this.separatorUsedInOutput = separator;\n         }\n         finally {\n             this.endWrite();\n         }\n+        this.endWrite();\n     }\n     \n     public String getSeparatorUsedInInput() {\n         this.beginRead(false);\n         try {\n             return this.separatorUsedInInput;\n         }\n@@ -92,14 +97,15 @@\n         this.beginRead(false);\n         try {\n             this.separatorUsedInInput = separator;\n         }\n         finally {\n             this.endRead();\n         }\n+        this.endRead();\n     }\n     \n     public String getCommentLeadingCharsUsedInInput() {\n         this.beginRead(false);\n         try {\n             return this.commentCharsUsedInInput;\n         }\n@@ -112,14 +118,15 @@\n         this.beginRead(false);\n         try {\n             this.commentCharsUsedInInput = separator;\n         }\n         finally {\n             this.endRead();\n         }\n+        this.endRead();\n     }\n     \n     public void write(final Writer writer) throws ConfigurationException, IOException {\n         final PrintWriter out = new PrintWriter(writer);\n         boolean first = true;\n         final String separator = this.getSeparatorUsedInOutput();\n         this.beginRead(false);\n@@ -129,40 +136,41 @@\n                     if (!first) {\n                         out.println();\n                     }\n                     out.print(\"[\");\n                     out.print(node.getNodeName());\n                     out.print(\"]\");\n                     out.println();\n-                    node.forEach(child -> this.writeProperty(out, child.getNodeName(), child.getValue(), separator));\n+                    node.forEach(child -> this.writeProperty(out2, child.getNodeName(), child.getValue(), separator2));\n                 }\n                 else {\n                     this.writeProperty(out, node.getNodeName(), node.getValue(), separator);\n                 }\n                 first = false;\n             }\n             out.println();\n             out.flush();\n         }\n         finally {\n             this.endRead();\n         }\n+        this.endRead();\n     }\n     \n     public void read(final Reader in) throws ConfigurationException, IOException {\n         final BufferedReader bufferedReader = new BufferedReader(in);\n         final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<String, ImmutableNode.Builder>();\n         final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();\n         this.createNodeBuilders(bufferedReader, rootBuilder, sectionBuilders);\n         final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);\n         this.addNodes((String)null, (Collection)rootNode.getChildren());\n     }\n     \n     private static ImmutableNode createNewRootNode(final ImmutableNode.Builder rootBuilder, final Map<String, ImmutableNode.Builder> sectionBuilders) {\n-        sectionBuilders.forEach((k, v) -> rootBuilder.addChild(v.name(k).create()));\n+        sectionBuilders.forEach((k, v) -> builder.addChild(v.name(k).create()));\n         return rootBuilder.create();\n     }\n     \n     private void createNodeBuilders(final BufferedReader in, final ImmutableNode.Builder rootBuilder, final Map<String, ImmutableNode.Builder> sectionBuilders) throws IOException {\n         ImmutableNode.Builder sectionBuilder = rootBuilder;\n         for (String line = in.readLine(); line != null; line = in.readLine()) {\n             line = line.trim();\n@@ -194,15 +202,15 @@\n                     this.createValueNodes(sectionBuilder, key, value);\n                 }\n             }\n         }\n     }\n     \n     private void createValueNodes(final ImmutableNode.Builder sectionBuilder, final String key, final String value) {\n-        this.getListDelimiterHandler().split(value, false).forEach(v -> sectionBuilder.addChild(new ImmutableNode.Builder().name(key).value((Object)v).create()));\n+        this.getListDelimiterHandler().split(value, false).forEach(v -> builder.addChild(new ImmutableNode.Builder().name(s).value((Object)v).create()));\n     }\n     \n     private void writeProperty(final PrintWriter out, final String key, final Object value, final String separator) {\n         out.print(key);\n         out.print(separator);\n         out.print(this.escapeValue(value.toString()));\n         out.println();\n@@ -331,15 +339,15 @@\n             final char c = commentChars.charAt(i);\n             if (value.indexOf(c) != -1) {\n                 quoted = true;\n                 break;\n             }\n         }\n         if (quoted) {\n-            return '\\\"' + value.replace((CharSequence)\"\\\"\", (CharSequence)\"\\\\\\\"\") + '\\\"';\n+            return String.valueOf('\\\"') + value.replace((CharSequence)\"\\\"\", (CharSequence)\"\\\\\\\"\") + '\\\"';\n         }\n         return value;\n     }\n     \n     protected boolean isCommentLine(final String line) {\n         return line != null && (line.isEmpty() || this.getCommentLeadingCharsUsedInInput().indexOf(line.charAt(0)) >= 0);\n     }\n@@ -375,14 +383,15 @@\n                     sections.add(null);\n                 }\n             }\n         }\n         finally {\n             this.endRead();\n         }\n+        this.endRead();\n         return sections;\n     }\n     \n     public SubnodeConfiguration getSection(final String name) {\n         if (name == null) {\n             return this.getGlobalSection();\n         }\n@@ -405,12 +414,8 @@\n         this.initSubConfigurationForThisParent(sub);\n         return sub;\n     }\n     \n     private static boolean isSectionNode(final ImmutableNode node) {\n         return node.getValue() == null;\n     }\n-    \n-    static {\n-        LINE_SEPARATOR = System.lineSeparator();\n-    }\n }\n"}]}
