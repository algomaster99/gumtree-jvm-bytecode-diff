{"diffoscope-json-version": 1, "source1": "first/ScatterZipOutputStream.class", "source2": "second/ScatterZipOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -27,58 +27,78 @@\n         this.isClosed = new AtomicBoolean();\n         this.zipEntryWriter = null;\n         this.backingStore = backingStore;\n         this.streamCompressor = streamCompressor;\n     }\n     \n     public void addArchiveEntry(final ZipArchiveEntryRequest zipArchiveEntryRequest) throws IOException {\n-        final InputStream payloadStream = zipArchiveEntryRequest.getPayloadStream();\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            this.streamCompressor.deflate(payloadStream, zipArchiveEntryRequest.getMethod());\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final InputStream payloadStream = zipArchiveEntryRequest.getPayloadStream();\n+            try {\n+                this.streamCompressor.deflate(payloadStream, zipArchiveEntryRequest.getMethod());\n+            }\n+            finally {\n+                if (payloadStream != null) {\n+                    payloadStream.close();\n+                }\n+            }\n         }\n         finally {\n-            if (payloadStream != null) {\n-                $closeResource(x0, payloadStream);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n         this.items.add(new ScatterZipOutputStream.CompressedEntry(zipArchiveEntryRequest, this.streamCompressor.getCrc32(), this.streamCompressor.getBytesWrittenForLastEntry(), this.streamCompressor.getBytesRead()));\n     }\n     \n     public void writeTo(final ZipArchiveOutputStream target) throws IOException {\n         this.backingStore.closeForWriting();\n-        final InputStream data = this.backingStore.getInputStream();\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            for (final ScatterZipOutputStream.CompressedEntry compressedEntry : this.items) {\n-                final BoundedInputStream rawStream = new BoundedInputStream(data, compressedEntry.compressedSize);\n-                Throwable x2 = null;\n-                try {\n-                    target.addRawArchiveEntry(compressedEntry.transferToArchiveEntry(), (InputStream)rawStream);\n-                }\n-                catch (final Throwable t) {\n-                    x2 = t;\n-                    throw t;\n+            final InputStream data = this.backingStore.getInputStream();\n+            try {\n+                for (final ScatterZipOutputStream.CompressedEntry compressedEntry : this.items) {\n+                    try {\n+                        final BoundedInputStream rawStream = new BoundedInputStream(data, compressedEntry.compressedSize);\n+                        try {\n+                            target.addRawArchiveEntry(compressedEntry.transferToArchiveEntry(), (InputStream)rawStream);\n+                        }\n+                        finally {\n+                            if (rawStream != null) {\n+                                rawStream.close();\n+                            }\n+                        }\n+                    }\n+                    finally {}\n                 }\n-                finally {\n-                    $closeResource(x2, (AutoCloseable)rawStream);\n+            }\n+            finally {\n+                if (data != null) {\n+                    data.close();\n                 }\n             }\n         }\n-        catch (final Throwable t2) {\n-            x0 = t2;\n-            throw t2;\n-        }\n         finally {\n-            if (data != null) {\n-                $closeResource(x0, data);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n     }\n     \n     public ScatterZipOutputStream.ZipEntryWriter zipEntryWriter() throws IOException {\n         if (this.zipEntryWriter == null) {\n             this.zipEntryWriter = new ScatterZipOutputStream.ZipEntryWriter(this);\n@@ -96,33 +116,20 @@\n                 this.zipEntryWriter.close();\n             }\n             this.backingStore.close();\n         }\n         finally {\n             this.streamCompressor.close();\n         }\n+        this.streamCompressor.close();\n     }\n     \n     public static ScatterZipOutputStream fileBased(final File file) throws FileNotFoundException {\n         return fileBased(file, -1);\n     }\n     \n     public static ScatterZipOutputStream fileBased(final File file, final int compressionLevel) throws FileNotFoundException {\n         final ScatterGatherBackingStore bs = (ScatterGatherBackingStore)new FileBasedScatterGatherBackingStore(file);\n         final StreamCompressor sc = StreamCompressor.create(compressionLevel, bs);\n         return new ScatterZipOutputStream(bs, sc);\n     }\n-    \n-    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n-        if (x0 != null) {\n-            try {\n-                x1.close();\n-            }\n-            catch (final Throwable exception) {\n-                x0.addSuppressed(exception);\n-            }\n-        }\n-        else {\n-            x1.close();\n-        }\n-    }\n }\n"}]}
