{"diffoscope-json-version": 1, "source1": "first/ConfigurationPropertiesFactoryBean.class", "source2": "second/ConfigurationPropertiesFactoryBean.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package org.apache.commons.configuration2.spring;\n \n-import java.net.URL;\n import org.apache.commons.configuration2.builder.fluent.Configurations;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.configuration2.ConfigurationConverter;\n import org.springframework.util.Assert;\n import org.springframework.core.io.Resource;\n import org.apache.commons.configuration2.Configuration;\n import org.apache.commons.configuration2.CompositeConfiguration;\n@@ -47,52 +46,52 @@\n             throw new IllegalArgumentException(\"no configuration object or location specified\");\n         }\n         if (this.compositeConfiguration == null) {\n             this.compositeConfiguration = new CompositeConfiguration();\n         }\n         this.compositeConfiguration.setThrowExceptionOnMissing(this.throwExceptionOnMissing);\n         if (this.configurations != null) {\n-            for (final Configuration configuration : this.configurations) {\n-                this.compositeConfiguration.addConfiguration(configuration);\n+            final Configuration[] configurations = this.configurations;\n+            for (int length = configurations.length, i = 0; i < length; ++i) {\n+                this.compositeConfiguration.addConfiguration(configurations[i]);\n             }\n         }\n         if (this.locations != null) {\n-            for (final Resource location : this.locations) {\n-                final URL url = location.getURL();\n-                final Configuration props = (Configuration)new Configurations().properties(url);\n-                this.compositeConfiguration.addConfiguration(props);\n+            final Resource[] locations = this.locations;\n+            for (int length2 = locations.length, j = 0; j < length2; ++j) {\n+                this.compositeConfiguration.addConfiguration((Configuration)new Configurations().properties(locations[j].getURL()));\n             }\n         }\n     }\n     \n     public Configuration[] getConfigurations() {\n         return defensiveCopy(this.configurations);\n     }\n     \n-    public void setConfigurations(final Configuration... configurations) {\n-        this.configurations = defensiveCopy(configurations);\n+    public void setConfigurations(final Configuration... array) {\n+        this.configurations = defensiveCopy(array);\n     }\n     \n     public Resource[] getLocations() {\n         return defensiveCopy(this.locations);\n     }\n     \n-    public void setLocations(final Resource... locations) {\n-        this.locations = defensiveCopy(locations);\n+    public void setLocations(final Resource... array) {\n+        this.locations = defensiveCopy(array);\n     }\n     \n     public boolean isThrowExceptionOnMissing() {\n         return this.throwExceptionOnMissing;\n     }\n     \n     public void setThrowExceptionOnMissing(final boolean throwExceptionOnMissing) {\n         this.throwExceptionOnMissing = throwExceptionOnMissing;\n     }\n     \n     public CompositeConfiguration getConfiguration() {\n         return this.compositeConfiguration;\n     }\n     \n-    private static <T> T[] defensiveCopy(final T[] src) {\n-        return (T[])((src != null) ? ((T[])src.clone()) : null);\n+    private static <T> T[] defensiveCopy(final T[] array) {\n+        return (T[])((array != null) ? ((T[])array.clone()) : null);\n     }\n }\n"}]}
