{"diffoscope-json-version": 1, "source1": "first/ExceptionConst.class", "source2": "second/ExceptionConst.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,47 +26,14 @@\n     public static final Class<IllegalMonitorStateException> ILLEGAL_MONITOR_STATE;\n     private static final Class<?>[] EXCS_CLASS_AND_INTERFACE_RESOLUTION;\n     private static final Class<?>[] EXCS_FIELD_AND_METHOD_RESOLUTION;\n     private static final Class<?>[] EXCS_INTERFACE_METHOD_RESOLUTION;\n     private static final Class<?>[] EXCS_STRING_RESOLUTION;\n     private static final Class<?>[] EXCS_ARRAY_EXCEPTION;\n     \n-    public static Class<?>[] createExceptions(final ExceptionConst.EXCS type, final Class<?>... extraClasses) {\n-        switch (ExceptionConst.ExceptionConst$1.$SwitchMap$org$apache$bcel$ExceptionConst$EXCS[type.ordinal()]) {\n-            case 1: {\n-                return mergeExceptions(ExceptionConst.EXCS_CLASS_AND_INTERFACE_RESOLUTION, extraClasses);\n-            }\n-            case 2: {\n-                return mergeExceptions(ExceptionConst.EXCS_ARRAY_EXCEPTION, extraClasses);\n-            }\n-            case 3: {\n-                return mergeExceptions(ExceptionConst.EXCS_FIELD_AND_METHOD_RESOLUTION, extraClasses);\n-            }\n-            case 4: {\n-                return mergeExceptions(ExceptionConst.EXCS_INTERFACE_METHOD_RESOLUTION, extraClasses);\n-            }\n-            case 5: {\n-                return mergeExceptions(ExceptionConst.EXCS_STRING_RESOLUTION, extraClasses);\n-            }\n-            default: {\n-                throw new AssertionError((Object)(\"Cannot happen; unexpected enum value: \" + type));\n-            }\n-        }\n-    }\n-    \n-    private static Class<?>[] mergeExceptions(final Class<?>[] input, final Class<?>... extraClasses) {\n-        final int extraLen = (extraClasses == null) ? 0 : extraClasses.length;\n-        final Class<?>[] excs = new Class[input.length + extraLen];\n-        System.arraycopy(input, 0, excs, 0, input.length);\n-        if (extraLen > 0) {\n-            System.arraycopy(extraClasses, 0, excs, input.length, extraLen);\n-        }\n-        return excs;\n-    }\n-    \n     static {\n         THROWABLE = Throwable.class;\n         RUNTIME_EXCEPTION = RuntimeException.class;\n         LINKING_EXCEPTION = LinkageError.class;\n         CLASS_CIRCULARITY_ERROR = ClassCircularityError.class;\n         CLASS_FORMAT_ERROR = ClassFormatError.class;\n         EXCEPTION_IN_INITIALIZER_ERROR = ExceptionInInitializerError.class;\n@@ -87,8 +54,41 @@\n         ILLEGAL_MONITOR_STATE = IllegalMonitorStateException.class;\n         EXCS_CLASS_AND_INTERFACE_RESOLUTION = new Class[] { ExceptionConst.NO_CLASS_DEF_FOUND_ERROR, ExceptionConst.CLASS_FORMAT_ERROR, ExceptionConst.VERIFY_ERROR, ExceptionConst.ABSTRACT_METHOD_ERROR, ExceptionConst.EXCEPTION_IN_INITIALIZER_ERROR, ExceptionConst.ILLEGAL_ACCESS_ERROR };\n         EXCS_FIELD_AND_METHOD_RESOLUTION = new Class[] { ExceptionConst.NO_SUCH_FIELD_ERROR, ExceptionConst.ILLEGAL_ACCESS_ERROR, ExceptionConst.NO_SUCH_METHOD_ERROR };\n         EXCS_INTERFACE_METHOD_RESOLUTION = new Class[0];\n         EXCS_STRING_RESOLUTION = new Class[0];\n         EXCS_ARRAY_EXCEPTION = new Class[] { ExceptionConst.NULL_POINTER_EXCEPTION, ExceptionConst.ARRAY_INDEX_OUT_OF_BOUNDS_EXCEPTION };\n     }\n+    \n+    public static Class<?>[] createExceptions(final ExceptionConst.EXCS type, final Class<?>... extraClasses) {\n+        switch (type) {\n+            case EXCS_CLASS_AND_INTERFACE_RESOLUTION: {\n+                return mergeExceptions(ExceptionConst.EXCS_CLASS_AND_INTERFACE_RESOLUTION, extraClasses);\n+            }\n+            case EXCS_ARRAY_EXCEPTION: {\n+                return mergeExceptions(ExceptionConst.EXCS_ARRAY_EXCEPTION, extraClasses);\n+            }\n+            case EXCS_FIELD_AND_METHOD_RESOLUTION: {\n+                return mergeExceptions(ExceptionConst.EXCS_FIELD_AND_METHOD_RESOLUTION, extraClasses);\n+            }\n+            case EXCS_INTERFACE_METHOD_RESOLUTION: {\n+                return mergeExceptions(ExceptionConst.EXCS_INTERFACE_METHOD_RESOLUTION, extraClasses);\n+            }\n+            case EXCS_STRING_RESOLUTION: {\n+                return mergeExceptions(ExceptionConst.EXCS_STRING_RESOLUTION, extraClasses);\n+            }\n+            default: {\n+                throw new AssertionError((Object)(\"Cannot happen; unexpected enum value: \" + type));\n+            }\n+        }\n+    }\n+    \n+    private static Class<?>[] mergeExceptions(final Class<?>[] input, final Class<?>... extraClasses) {\n+        final int extraLen = (extraClasses == null) ? 0 : extraClasses.length;\n+        final Class[] excs = new Class[input.length + extraLen];\n+        System.arraycopy(input, 0, excs, 0, input.length);\n+        if (extraLen > 0) {\n+            System.arraycopy(extraClasses, 0, excs, input.length, extraLen);\n+        }\n+        return excs;\n+    }\n }\n"}]}
