{"diffoscope-json-version": 1, "source1": "first/ExplicitInitializationCheck.class", "source2": "second/ExplicitInitializationCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -25,78 +25,69 @@\n         return this.getRequiredTokens();\n     }\n     \n     public void setOnlyObjectReferences(final boolean onlyObjectReferences) {\n         this.onlyObjectReferences = onlyObjectReferences;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (!isSkipCase(ast)) {\n-            final DetailAST assign = ast.findFirstToken(80);\n-            final DetailAST exprStart = assign.getFirstChild().getFirstChild();\n-            if (exprStart.getType() == 135) {\n-                final DetailAST ident = ast.findFirstToken(58);\n-                this.log(ident, \"explicit.init\", new Object[] { ident.getText(), \"null\" });\n+    public void visitToken(final DetailAST detailAST) {\n+        if (!isSkipCase(detailAST)) {\n+            if (detailAST.findFirstToken(80).getFirstChild().getFirstChild().getType() == 135) {\n+                final DetailAST firstToken = detailAST.findFirstToken(58);\n+                this.log(firstToken, \"explicit.init\", new Object[] { firstToken.getText(), \"null\" });\n             }\n             if (!this.onlyObjectReferences) {\n-                this.validateNonObjects(ast);\n+                this.validateNonObjects(detailAST);\n             }\n         }\n     }\n     \n-    private void validateNonObjects(final DetailAST ast) {\n-        final DetailAST ident = ast.findFirstToken(58);\n-        final DetailAST assign = ast.findFirstToken(80);\n-        final DetailAST exprStart = assign.getFirstChild().getFirstChild();\n-        final DetailAST type = ast.findFirstToken(13);\n-        final int primitiveType = type.getFirstChild().getType();\n-        if (primitiveType == 50 && exprStart.getType() == 134) {\n-            this.log(ident, \"explicit.init\", new Object[] { ident.getText(), \"false\" });\n-        }\n-        if (isNumericType(primitiveType) && isZero(exprStart)) {\n-            this.log(ident, \"explicit.init\", new Object[] { ident.getText(), \"0\" });\n-        }\n-        if (primitiveType == 52 && isZeroChar(exprStart)) {\n-            this.log(ident, \"explicit.init\", new Object[] { ident.getText(), \"\\\\0\" });\n+    private void validateNonObjects(final DetailAST detailAST) {\n+        final DetailAST firstToken = detailAST.findFirstToken(58);\n+        final DetailAST firstChild = detailAST.findFirstToken(80).getFirstChild().getFirstChild();\n+        final int type = detailAST.findFirstToken(13).getFirstChild().getType();\n+        if (type == 50 && firstChild.getType() == 134) {\n+            this.log(firstToken, \"explicit.init\", new Object[] { firstToken.getText(), \"false\" });\n+        }\n+        if (isNumericType(type) && isZero(firstChild)) {\n+            this.log(firstToken, \"explicit.init\", new Object[] { firstToken.getText(), \"0\" });\n+        }\n+        if (type == 52 && isZeroChar(firstChild)) {\n+            this.log(firstToken, \"explicit.init\", new Object[] { firstToken.getText(), \"\\\\0\" });\n         }\n     }\n     \n-    private static boolean isZeroChar(final DetailAST exprStart) {\n-        return isZero(exprStart) || \"'\\\\0'\".equals(exprStart.getText());\n-    }\n-    \n-    private static boolean isSkipCase(final DetailAST ast) {\n-        boolean skipCase = true;\n-        if (!ScopeUtil.isLocalVariableDef(ast) && !ScopeUtil.isInInterfaceOrAnnotationBlock(ast)) {\n-            final DetailAST assign = ast.findFirstToken(80);\n-            if (assign != null) {\n-                final DetailAST modifiers = ast.findFirstToken(5);\n-                skipCase = (modifiers.findFirstToken(39) != null);\n-            }\n+    private static boolean isZeroChar(final DetailAST detailAST) {\n+        return isZero(detailAST) || \"'\\\\0'\".equals(detailAST.getText());\n+    }\n+    \n+    private static boolean isSkipCase(final DetailAST detailAST) {\n+        boolean b = true;\n+        if (!ScopeUtil.isLocalVariableDef(detailAST) && !ScopeUtil.isInInterfaceOrAnnotationBlock(detailAST) && detailAST.findFirstToken(80) != null) {\n+            b = (detailAST.findFirstToken(5).findFirstToken(39) != null);\n         }\n-        return skipCase;\n+        return b;\n     }\n     \n-    private static boolean isNumericType(final int type) {\n-        return type == 51 || type == 53 || type == 54 || type == 55 || type == 56 || type == 57;\n+    private static boolean isNumericType(final int n) {\n+        return n == 51 || n == 53 || n == 54 || n == 55 || n == 56 || n == 57;\n     }\n     \n-    private static boolean isZero(final DetailAST expr) {\n-        final int type = expr.getType();\n-        boolean isZero = false;\n+    private static boolean isZero(final DetailAST detailAST) {\n+        final int type = detailAST.getType();\n+        boolean b = false;\n         switch (type) {\n             case 137:\n             case 140:\n             case 141:\n             case 142: {\n-                final String text = expr.getText();\n-                isZero = (Double.compare(CheckUtil.parseDouble(text, type), 0.0) == 0);\n+                b = (Double.compare(CheckUtil.parseDouble(detailAST.getText(), type), 0.0) == 0);\n                 break;\n             }\n             default: {\n-                isZero = false;\n+                b = false;\n                 break;\n             }\n         }\n-        return isZero;\n+        return b;\n     }\n }\n"}]}
