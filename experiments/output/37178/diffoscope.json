{"diffoscope-json-version": 1, "source1": "first/FTPSClient.class", "source2": "second/FTPSClient.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,8 +1,8 @@\n-  SHA-256 checksum f93789dea9195c3746a58f054d56456abca35d1082a308fe6929477f869998d7\n+  SHA-256 checksum f2c9fe3b2a285a0b01978d6077e5ec9c4bc21040aead8e3dc4c2e99106f0dac0\n   Compiled from \"FTPSClient.java\"\n public class org.apache.commons.net.ftp.FTPSClient extends org.apache.commons.net.ftp.FTPClient\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #1                          // org/apache/commons/net/ftp/FTPSClient\n   super_class: #17                        // org/apache/commons/net/ftp/FTPClient\n@@ -560,139 +560,138 @@\n   #551 = Utf8               _controlOutput_\n   #552 = Utf8               Ljava/io/BufferedWriter;\n   #553 = Methodref          #554.#555     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n   #554 = Class              #105          // \"[Ljava/lang/String;\"\n   #555 = NameAndType        #556:#557     // clone:()Ljava/lang/Object;\n   #556 = Utf8               clone\n   #557 = Utf8               ()Ljava/lang/Object;\n-  #558 = Methodref          #554.#555     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n-  #559 = Methodref          #1.#560       // org/apache/commons/net/ftp/FTPSClient.createSSLSocket:(Ljava/net/Socket;)Ljavax/net/ssl/SSLSocket;\n-  #560 = NameAndType        #561:#562     // createSSLSocket:(Ljava/net/Socket;)Ljavax/net/ssl/SSLSocket;\n-  #561 = Utf8               createSSLSocket\n-  #562 = Utf8               (Ljava/net/Socket;)Ljavax/net/ssl/SSLSocket;\n-  #563 = Methodref          #564.#565     // org/apache/commons/net/util/SSLSocketUtils.enableEndpointNameVerification:(Ljavax/net/ssl/SSLSocket;)Z\n-  #564 = Class              #566          // org/apache/commons/net/util/SSLSocketUtils\n-  #565 = NameAndType        #567:#568     // enableEndpointNameVerification:(Ljavax/net/ssl/SSLSocket;)Z\n-  #566 = Utf8               org/apache/commons/net/util/SSLSocketUtils\n-  #567 = Utf8               enableEndpointNameVerification\n-  #568 = Utf8               (Ljavax/net/ssl/SSLSocket;)Z\n-  #569 = Methodref          #81.#519      // javax/net/ssl/SSLSocket.getInputStream:()Ljava/io/InputStream;\n-  #570 = Methodref          #81.#540      // javax/net/ssl/SSLSocket.getOutputStream:()Ljava/io/OutputStream;\n-  #571 = Methodref          #81.#572      // javax/net/ssl/SSLSocket.getSession:()Ljavax/net/ssl/SSLSession;\n-  #572 = NameAndType        #573:#574     // getSession:()Ljavax/net/ssl/SSLSession;\n-  #573 = Utf8               getSession\n-  #574 = Utf8               ()Ljavax/net/ssl/SSLSession;\n-  #575 = InterfaceMethodref #576.#577     // javax/net/ssl/HostnameVerifier.verify:(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z\n-  #576 = Class              #578          // javax/net/ssl/HostnameVerifier\n-  #577 = NameAndType        #579:#580     // verify:(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z\n-  #578 = Utf8               javax/net/ssl/HostnameVerifier\n-  #579 = Utf8               verify\n-  #580 = Utf8               (Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z\n-  #581 = Class              #582          // javax/net/ssl/SSLHandshakeException\n-  #582 = Utf8               javax/net/ssl/SSLHandshakeException\n-  #583 = String             #584          // Hostname doesn\\'t match certificate\n-  #584 = Utf8               Hostname doesn\\'t match certificate\n-  #585 = Methodref          #581.#193     // javax/net/ssl/SSLHandshakeException.\"<init>\":(Ljava/lang/String;)V\n-  #586 = String             #587          // E\n-  #587 = Utf8               E\n-  #588 = String             #589          // S\n-  #589 = Utf8               S\n-  #590 = String             #591          // P\n-  #591 = Utf8               P\n-  #592 = Utf8               DEFAULT_FTPS_DATA_PORT\n-  #593 = Utf8               ConstantValue\n-  #594 = Integer            989\n-  #595 = Utf8               DEFAULT_FTPS_PORT\n-  #596 = Integer            990\n-  #597 = Utf8               DEFAULT_PROT\n-  #598 = Utf8               DEFAULT_PROTOCOL\n-  #599 = Utf8               CMD_AUTH\n-  #600 = Utf8               CMD_ADAT\n-  #601 = Utf8               CMD_PROT\n-  #602 = Utf8               CMD_PBSZ\n-  #603 = Utf8               CMD_MIC\n-  #604 = Utf8               CMD_CONF\n-  #605 = Utf8               CMD_ENC\n-  #606 = Utf8               CMD_CCC\n-  #607 = Utf8               KEYSTORE_ALGORITHM\n-  #608 = Utf8               Deprecated\n-  #609 = Utf8               RuntimeVisibleAnnotations\n-  #610 = Utf8               Ljava/lang/Deprecated;\n-  #611 = Utf8               TRUSTSTORE_ALGORITHM\n-  #612 = Utf8               PROVIDER\n-  #613 = Utf8               STORE_TYPE\n-  #614 = Utf8               Code\n-  #615 = Utf8               LineNumberTable\n-  #616 = Utf8               LocalVariableTable\n-  #617 = Utf8               this\n-  #618 = Utf8               Lorg/apache/commons/net/ftp/FTPSClient;\n-  #619 = Utf8               StackMapTable\n-  #620 = Utf8               Exceptions\n-  #621 = Utf8               (ILjava/lang/String;)Ljava/net/Socket;\n-  #622 = Utf8               command\n-  #623 = Utf8               arg\n-  #624 = Utf8               sslSocket\n-  #625 = Utf8               Ljavax/net/ssl/SSLSocket;\n-  #626 = Utf8               socket\n-  #627 = Utf8               element\n-  #628 = Utf8               prot\n-  #629 = Utf8               f\n-  #630 = Utf8               Ljavax/net/ssl/SSLSocketFactory;\n-  #631 = Utf8               execADAT\n-  #632 = Utf8               ([B)I\n-  #633 = Utf8               data\n-  #634 = Utf8               [B\n-  #635 = Utf8               replyCode\n-  #636 = Utf8               mechanism\n-  #637 = Utf8               execCCC\n-  #638 = Utf8               repCode\n-  #639 = Utf8               execCONF\n-  #640 = Utf8               execENC\n-  #641 = Utf8               execMIC\n-  #642 = Utf8               pbsz\n-  #643 = Utf8               J\n-  #644 = Utf8               status\n-  #645 = Utf8               execPROT\n-  #646 = Utf8               prefix\n-  #647 = Utf8               reply\n-  #648 = Utf8               idx\n-  #649 = Utf8               getAuthValue\n-  #650 = Utf8               getHostnameVerifier\n-  #651 = Utf8               ()Ljavax/net/ssl/HostnameVerifier;\n-  #652 = Utf8               isEndpointCheckingEnabled\n-  #653 = Utf8               server\n-  #654 = Utf8               Ljava/net/ServerSocket;\n-  #655 = Utf8               attemptEPSV\n-  #656 = Utf8               socketHost\n-  #657 = Utf8               Ljava/net/InetAddress;\n-  #658 = Utf8               isInet6Address\n-  #659 = Utf8               soTimeoutMillis\n-  #660 = Utf8               parseADATReply\n-  #661 = Utf8               parsePBSZ\n-  #662 = Utf8               (J)J\n-  #663 = Utf8               replysz\n-  #664 = Utf8               minvalue\n-  #665 = Utf8               remainder\n-  #666 = Utf8               args\n-  #667 = Utf8               setAuthValue\n-  #668 = Utf8               cipherSuites\n-  #669 = Utf8               protocolVersions\n-  #670 = Utf8               setEnabledSessionCreation\n-  #671 = Utf8               setEndpointCheckingEnabled\n-  #672 = Utf8               enable\n-  #673 = Utf8               setHostnameVerifier\n-  #674 = Utf8               (Ljavax/net/ssl/HostnameVerifier;)V\n-  #675 = Utf8               newHostnameVerifier\n-  #676 = Utf8               setKeyManager\n-  #677 = Utf8               (Ljavax/net/ssl/KeyManager;)V\n-  #678 = Utf8               setTrustManager\n-  #679 = Utf8               (Ljavax/net/ssl/TrustManager;)V\n-  #680 = Utf8               <clinit>\n-  #681 = Utf8               SourceFile\n-  #682 = Utf8               FTPSClient.java\n+  #558 = Methodref          #1.#559       // org/apache/commons/net/ftp/FTPSClient.createSSLSocket:(Ljava/net/Socket;)Ljavax/net/ssl/SSLSocket;\n+  #559 = NameAndType        #560:#561     // createSSLSocket:(Ljava/net/Socket;)Ljavax/net/ssl/SSLSocket;\n+  #560 = Utf8               createSSLSocket\n+  #561 = Utf8               (Ljava/net/Socket;)Ljavax/net/ssl/SSLSocket;\n+  #562 = Methodref          #563.#564     // org/apache/commons/net/util/SSLSocketUtils.enableEndpointNameVerification:(Ljavax/net/ssl/SSLSocket;)Z\n+  #563 = Class              #565          // org/apache/commons/net/util/SSLSocketUtils\n+  #564 = NameAndType        #566:#567     // enableEndpointNameVerification:(Ljavax/net/ssl/SSLSocket;)Z\n+  #565 = Utf8               org/apache/commons/net/util/SSLSocketUtils\n+  #566 = Utf8               enableEndpointNameVerification\n+  #567 = Utf8               (Ljavax/net/ssl/SSLSocket;)Z\n+  #568 = Methodref          #81.#519      // javax/net/ssl/SSLSocket.getInputStream:()Ljava/io/InputStream;\n+  #569 = Methodref          #81.#540      // javax/net/ssl/SSLSocket.getOutputStream:()Ljava/io/OutputStream;\n+  #570 = Methodref          #81.#571      // javax/net/ssl/SSLSocket.getSession:()Ljavax/net/ssl/SSLSession;\n+  #571 = NameAndType        #572:#573     // getSession:()Ljavax/net/ssl/SSLSession;\n+  #572 = Utf8               getSession\n+  #573 = Utf8               ()Ljavax/net/ssl/SSLSession;\n+  #574 = InterfaceMethodref #575.#576     // javax/net/ssl/HostnameVerifier.verify:(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z\n+  #575 = Class              #577          // javax/net/ssl/HostnameVerifier\n+  #576 = NameAndType        #578:#579     // verify:(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z\n+  #577 = Utf8               javax/net/ssl/HostnameVerifier\n+  #578 = Utf8               verify\n+  #579 = Utf8               (Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z\n+  #580 = Class              #581          // javax/net/ssl/SSLHandshakeException\n+  #581 = Utf8               javax/net/ssl/SSLHandshakeException\n+  #582 = String             #583          // Hostname doesn\\'t match certificate\n+  #583 = Utf8               Hostname doesn\\'t match certificate\n+  #584 = Methodref          #580.#193     // javax/net/ssl/SSLHandshakeException.\"<init>\":(Ljava/lang/String;)V\n+  #585 = String             #586          // E\n+  #586 = Utf8               E\n+  #587 = String             #588          // S\n+  #588 = Utf8               S\n+  #589 = String             #590          // P\n+  #590 = Utf8               P\n+  #591 = Utf8               DEFAULT_FTPS_DATA_PORT\n+  #592 = Utf8               ConstantValue\n+  #593 = Integer            989\n+  #594 = Utf8               DEFAULT_FTPS_PORT\n+  #595 = Integer            990\n+  #596 = Utf8               DEFAULT_PROT\n+  #597 = Utf8               DEFAULT_PROTOCOL\n+  #598 = Utf8               CMD_AUTH\n+  #599 = Utf8               CMD_ADAT\n+  #600 = Utf8               CMD_PROT\n+  #601 = Utf8               CMD_PBSZ\n+  #602 = Utf8               CMD_MIC\n+  #603 = Utf8               CMD_CONF\n+  #604 = Utf8               CMD_ENC\n+  #605 = Utf8               CMD_CCC\n+  #606 = Utf8               KEYSTORE_ALGORITHM\n+  #607 = Utf8               Deprecated\n+  #608 = Utf8               RuntimeVisibleAnnotations\n+  #609 = Utf8               Ljava/lang/Deprecated;\n+  #610 = Utf8               TRUSTSTORE_ALGORITHM\n+  #611 = Utf8               PROVIDER\n+  #612 = Utf8               STORE_TYPE\n+  #613 = Utf8               Code\n+  #614 = Utf8               LineNumberTable\n+  #615 = Utf8               LocalVariableTable\n+  #616 = Utf8               this\n+  #617 = Utf8               Lorg/apache/commons/net/ftp/FTPSClient;\n+  #618 = Utf8               StackMapTable\n+  #619 = Utf8               Exceptions\n+  #620 = Utf8               (ILjava/lang/String;)Ljava/net/Socket;\n+  #621 = Utf8               command\n+  #622 = Utf8               arg\n+  #623 = Utf8               sslSocket\n+  #624 = Utf8               Ljavax/net/ssl/SSLSocket;\n+  #625 = Utf8               socket\n+  #626 = Utf8               element\n+  #627 = Utf8               prot\n+  #628 = Utf8               f\n+  #629 = Utf8               Ljavax/net/ssl/SSLSocketFactory;\n+  #630 = Utf8               execADAT\n+  #631 = Utf8               ([B)I\n+  #632 = Utf8               data\n+  #633 = Utf8               [B\n+  #634 = Utf8               replyCode\n+  #635 = Utf8               mechanism\n+  #636 = Utf8               execCCC\n+  #637 = Utf8               repCode\n+  #638 = Utf8               execCONF\n+  #639 = Utf8               execENC\n+  #640 = Utf8               execMIC\n+  #641 = Utf8               pbsz\n+  #642 = Utf8               J\n+  #643 = Utf8               status\n+  #644 = Utf8               execPROT\n+  #645 = Utf8               prefix\n+  #646 = Utf8               reply\n+  #647 = Utf8               idx\n+  #648 = Utf8               getAuthValue\n+  #649 = Utf8               getHostnameVerifier\n+  #650 = Utf8               ()Ljavax/net/ssl/HostnameVerifier;\n+  #651 = Utf8               isEndpointCheckingEnabled\n+  #652 = Utf8               server\n+  #653 = Utf8               Ljava/net/ServerSocket;\n+  #654 = Utf8               attemptEPSV\n+  #655 = Utf8               socketHost\n+  #656 = Utf8               Ljava/net/InetAddress;\n+  #657 = Utf8               isInet6Address\n+  #658 = Utf8               soTimeoutMillis\n+  #659 = Utf8               parseADATReply\n+  #660 = Utf8               parsePBSZ\n+  #661 = Utf8               (J)J\n+  #662 = Utf8               replysz\n+  #663 = Utf8               minvalue\n+  #664 = Utf8               remainder\n+  #665 = Utf8               args\n+  #666 = Utf8               setAuthValue\n+  #667 = Utf8               cipherSuites\n+  #668 = Utf8               protocolVersions\n+  #669 = Utf8               setEnabledSessionCreation\n+  #670 = Utf8               setEndpointCheckingEnabled\n+  #671 = Utf8               enable\n+  #672 = Utf8               setHostnameVerifier\n+  #673 = Utf8               (Ljavax/net/ssl/HostnameVerifier;)V\n+  #674 = Utf8               newHostnameVerifier\n+  #675 = Utf8               setKeyManager\n+  #676 = Utf8               (Ljavax/net/ssl/KeyManager;)V\n+  #677 = Utf8               setTrustManager\n+  #678 = Utf8               (Ljavax/net/ssl/TrustManager;)V\n+  #679 = Utf8               <clinit>\n+  #680 = Utf8               SourceFile\n+  #681 = Utf8               FTPSClient.java\n {\n   public static final int DEFAULT_FTPS_DATA_PORT = 989;\n     descriptor: I\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 989\n \n   public static final int DEFAULT_FTPS_PORT = 990;\n@@ -755,39 +754,39 @@\n     ConstantValue: String CCC\n \n   public static java.lang.String KEYSTORE_ALGORITHM;\n     descriptor: Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #610()\n+      0: #609()\n         java.lang.Deprecated\n \n   public static java.lang.String TRUSTSTORE_ALGORITHM;\n     descriptor: Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #610()\n+      0: #609()\n         java.lang.Deprecated\n \n   public static java.lang.String PROVIDER;\n     descriptor: Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #610()\n+      0: #609()\n         java.lang.Deprecated\n \n   public static java.lang.String STORE_TYPE;\n     descriptor: Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #610()\n+      0: #609()\n         java.lang.Deprecated\n \n   private final boolean isImplicit;\n     descriptor: Z\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final java.lang.String protocol;\n@@ -1051,15 +1050,15 @@\n             0      10     0  this   Lorg/apache/commons/net/ftp/FTPSClient;\n             0      10     1 command   I\n             0      10     2   arg   Ljava/lang/String;\n     Exceptions:\n       throws java.io.IOException\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #610()\n+      0: #609()\n         java.lang.Deprecated\n \n   protected java.net.Socket _openDataConnection_(java.lang.String, java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;Ljava/lang/String;)Ljava/net/Socket;\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=3, locals=5, args_size=3\n@@ -2648,15 +2647,15 @@\n   public void setEnabledProtocols(java.lang.String[]);\n     descriptor: ([Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #558                // Method \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n+         2: invokevirtual #553                // Method \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n          5: checkcast     #554                // class \"[Ljava/lang/String;\"\n          8: putfield      #110                // Field protocols:[Ljava/lang/String;\n         11: return\n       LineNumberTable:\n         line 910: 0\n         line 911: 11\n       LocalVariableTable:\n@@ -2810,15 +2809,15 @@\n          2: getfield      #247                // Field _socket_:Ljava/net/Socket;\n          5: putfield      #155                // Field plainSocket:Ljava/net/Socket;\n          8: aload_0\n          9: invokespecial #232                // Method initSslContext:()V\n         12: aload_0\n         13: aload_0\n         14: getfield      #247                // Field _socket_:Ljava/net/Socket;\n-        17: invokespecial #559                // Method createSSLSocket:(Ljava/net/Socket;)Ljavax/net/ssl/SSLSocket;\n+        17: invokespecial #558                // Method createSSLSocket:(Ljava/net/Socket;)Ljavax/net/ssl/SSLSocket;\n         20: astore_1\n         21: aload_1\n         22: aload_0\n         23: getfield      #25                 // Field isCreation:Z\n         26: invokevirtual #87                 // Method javax/net/ssl/SSLSocket.setEnableSessionCreation:(Z)V\n         29: aload_1\n         30: aload_0\n@@ -2827,15 +2826,15 @@\n         37: aload_0\n         38: getfield      #29                 // Field isClientMode:Z\n         41: ifeq          59\n         44: aload_0\n         45: getfield      #292                // Field tlsEndpointChecking:Z\n         48: ifeq          75\n         51: aload_1\n-        52: invokestatic  #563                // Method org/apache/commons/net/util/SSLSocketUtils.enableEndpointNameVerification:(Ljavax/net/ssl/SSLSocket;)Z\n+        52: invokestatic  #562                // Method org/apache/commons/net/util/SSLSocketUtils.enableEndpointNameVerification:(Ljavax/net/ssl/SSLSocket;)Z\n         55: pop\n         56: goto          75\n         59: aload_1\n         60: aload_0\n         61: getfield      #90                 // Field isNeedClientAuth:Z\n         64: invokevirtual #93                 // Method javax/net/ssl/SSLSocket.setNeedClientAuth:(Z)V\n         67: aload_1\n@@ -2863,27 +2862,27 @@\n        111: putfield      #247                // Field _socket_:Ljava/net/Socket;\n        114: aload_0\n        115: new           #514                // class java/io/BufferedReader\n        118: dup\n        119: new           #516                // class java/io/InputStreamReader\n        122: dup\n        123: aload_1\n-       124: invokevirtual #569                // Method javax/net/ssl/SSLSocket.getInputStream:()Ljava/io/InputStream;\n+       124: invokevirtual #568                // Method javax/net/ssl/SSLSocket.getInputStream:()Ljava/io/InputStream;\n        127: aload_0\n        128: invokevirtual #522                // Method getControlEncoding:()Ljava/lang/String;\n        131: invokespecial #525                // Method java/io/InputStreamReader.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n        134: invokespecial #528                // Method java/io/BufferedReader.\"<init>\":(Ljava/io/Reader;)V\n        137: putfield      #531                // Field _controlInput_:Ljava/io/BufferedReader;\n        140: aload_0\n        141: new           #535                // class java/io/BufferedWriter\n        144: dup\n        145: new           #537                // class java/io/OutputStreamWriter\n        148: dup\n        149: aload_1\n-       150: invokevirtual #570                // Method javax/net/ssl/SSLSocket.getOutputStream:()Ljava/io/OutputStream;\n+       150: invokevirtual #569                // Method javax/net/ssl/SSLSocket.getOutputStream:()Ljava/io/OutputStream;\n        153: aload_0\n        154: invokevirtual #522                // Method getControlEncoding:()Ljava/lang/String;\n        157: invokespecial #543                // Method java/io/OutputStreamWriter.\"<init>\":(Ljava/io/OutputStream;Ljava/lang/String;)V\n        160: invokespecial #546                // Method java/io/BufferedWriter.\"<init>\":(Ljava/io/Writer;)V\n        163: putfield      #549                // Field _controlOutput_:Ljava/io/BufferedWriter;\n        166: aload_0\n        167: getfield      #29                 // Field isClientMode:Z\n@@ -2892,21 +2891,21 @@\n        174: getfield      #261                // Field hostnameVerifier:Ljavax/net/ssl/HostnameVerifier;\n        177: ifnull        211\n        180: aload_0\n        181: getfield      #261                // Field hostnameVerifier:Ljavax/net/ssl/HostnameVerifier;\n        184: aload_0\n        185: getfield      #139                // Field _hostname_:Ljava/lang/String;\n        188: aload_1\n-       189: invokevirtual #571                // Method javax/net/ssl/SSLSocket.getSession:()Ljavax/net/ssl/SSLSession;\n-       192: invokeinterface #575,  3          // InterfaceMethod javax/net/ssl/HostnameVerifier.verify:(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z\n+       189: invokevirtual #570                // Method javax/net/ssl/SSLSocket.getSession:()Ljavax/net/ssl/SSLSession;\n+       192: invokeinterface #574,  3          // InterfaceMethod javax/net/ssl/HostnameVerifier.verify:(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z\n        197: ifne          211\n-       200: new           #581                // class javax/net/ssl/SSLHandshakeException\n+       200: new           #580                // class javax/net/ssl/SSLHandshakeException\n        203: dup\n-       204: ldc_w         #583                // String Hostname doesn\\'t match certificate\n-       207: invokespecial #585                // Method javax/net/ssl/SSLHandshakeException.\"<init>\":(Ljava/lang/String;)V\n+       204: ldc_w         #582                // String Hostname doesn\\'t match certificate\n+       207: invokespecial #584                // Method javax/net/ssl/SSLHandshakeException.\"<init>\":(Ljava/lang/String;)V\n        210: athrow\n        211: return\n       LineNumberTable:\n         line 999: 0\n         line 1000: 8\n         line 1001: 12\n         line 1002: 21\n@@ -2952,23 +2951,23 @@\n          1: anewarray     #123                // class java/lang/String\n          4: dup\n          5: iconst_0\n          6: ldc           #216                // String C\n          8: aastore\n          9: dup\n         10: iconst_1\n-        11: ldc_w         #586                // String E\n+        11: ldc_w         #585                // String E\n         14: aastore\n         15: dup\n         16: iconst_2\n-        17: ldc_w         #588                // String S\n+        17: ldc_w         #587                // String S\n         20: aastore\n         21: dup\n         22: iconst_3\n-        23: ldc_w         #590                // String P\n+        23: ldc_w         #589                // String P\n         26: aastore\n         27: putstatic     #119                // Field PROT_COMMAND_VALUE:[Ljava/lang/String;\n         30: return\n       LineNumberTable:\n         line 66: 0\n }\n SourceFile: \"FTPSClient.java\"\n"}]}
