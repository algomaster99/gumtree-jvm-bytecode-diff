{"diffoscope-json-version": 1, "source1": "first/BootstrapMethod.class", "source2": "second/BootstrapMethod.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,27 +7,27 @@\n import java.io.DataInput;\n \n public class BootstrapMethod implements Cloneable\n {\n     private int bootstrapMethodRef;\n     private int[] bootstrapArguments;\n     \n-    public BootstrapMethod(final BootstrapMethod c) {\n-        this(c.getBootstrapMethodRef(), c.getBootstrapArguments());\n+    public BootstrapMethod(final BootstrapMethod bootstrapMethod) {\n+        this(bootstrapMethod.getBootstrapMethodRef(), bootstrapMethod.getBootstrapArguments());\n     }\n     \n-    BootstrapMethod(final DataInput input) throws IOException {\n-        this(input.readUnsignedShort(), input.readUnsignedShort());\n+    BootstrapMethod(final DataInput dataInput) throws IOException {\n+        this(dataInput.readUnsignedShort(), dataInput.readUnsignedShort());\n         for (int i = 0; i < this.bootstrapArguments.length; ++i) {\n-            this.bootstrapArguments[i] = input.readUnsignedShort();\n+            this.bootstrapArguments[i] = dataInput.readUnsignedShort();\n         }\n     }\n     \n-    private BootstrapMethod(final int bootstrap_method_ref, final int num_bootstrap_arguments) {\n-        this(bootstrap_method_ref, new int[num_bootstrap_arguments]);\n+    private BootstrapMethod(final int n, final int n2) {\n+        this(n, new int[n2]);\n     }\n     \n     public BootstrapMethod(final int bootstrapMethodRef, final int[] bootstrapArguments) {\n         this.bootstrapMethodRef = bootstrapMethodRef;\n         this.bootstrapArguments = bootstrapArguments;\n     }\n     \n@@ -53,33 +53,33 @@\n     \n     @Override\n     public final String toString() {\n         return \"BootstrapMethod(\" + this.bootstrapMethodRef + \", \" + this.bootstrapArguments.length + \", \" + Arrays.toString(this.bootstrapArguments) + \")\";\n     }\n     \n     public final String toString(final ConstantPool constantPool) {\n-        final StringBuilder buf = new StringBuilder();\n-        final String bootstrap_method_name = constantPool.constantToString(this.bootstrapMethodRef, (byte)15);\n-        buf.append(Utility.compactClassName(bootstrap_method_name, false));\n-        final int num_bootstrap_arguments = this.bootstrapArguments.length;\n-        if (num_bootstrap_arguments > 0) {\n-            buf.append(\"\\nMethod Arguments:\");\n-            for (int i = 0; i < num_bootstrap_arguments; ++i) {\n-                buf.append(\"\\n  \").append(i).append(\": \");\n-                buf.append(constantPool.constantToString(constantPool.getConstant(this.bootstrapArguments[i])));\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(Utility.compactClassName(constantPool.constantToString(this.bootstrapMethodRef, (byte)15), false));\n+        final int length = this.bootstrapArguments.length;\n+        if (length > 0) {\n+            sb.append(\"\\nMethod Arguments:\");\n+            for (int i = 0; i < length; ++i) {\n+                sb.append(\"\\n  \").append(i).append(\": \");\n+                sb.append(constantPool.constantToString(constantPool.getConstant(this.bootstrapArguments[i])));\n             }\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n-    public final void dump(final DataOutputStream file) throws IOException {\n-        file.writeShort(this.bootstrapMethodRef);\n-        file.writeShort(this.bootstrapArguments.length);\n-        for (final int bootstrap_argument : this.bootstrapArguments) {\n-            file.writeShort(bootstrap_argument);\n+    public final void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.bootstrapMethodRef);\n+        dataOutputStream.writeShort(this.bootstrapArguments.length);\n+        final int[] bootstrapArguments = this.bootstrapArguments;\n+        for (int length = bootstrapArguments.length, i = 0; i < length; ++i) {\n+            dataOutputStream.writeShort(bootstrapArguments[i]);\n         }\n     }\n     \n     public BootstrapMethod copy() {\n         try {\n             return (BootstrapMethod)this.clone();\n         }\n"}]}
