{"diffoscope-json-version": 1, "source1": "first/Parameters$ParametersIfcInvocationHandler.class", "source2": "second/Parameters$ParametersIfcInvocationHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,22 +5,22 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.InvocationHandler;\n \n private static class ParametersIfcInvocationHandler implements InvocationHandler\n {\n     private final Object target;\n     \n-    public ParametersIfcInvocationHandler(final Object targetObj) {\n-        this.target = targetObj;\n+    public ParametersIfcInvocationHandler(final Object target) {\n+        this.target = target;\n     }\n     \n     @Override\n-    public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {\n-        final Object result = method.invoke(this.target, args);\n-        return isFluentResult(method) ? proxy : result;\n+    public Object invoke(final Object o, final Method method, final Object[] args) throws Throwable {\n+        final Object invoke = method.invoke(this.target, args);\n+        return isFluentResult(method) ? o : invoke;\n     }\n     \n     private static boolean isFluentResult(final Method method) {\n         final Class<?> declaringClass = method.getDeclaringClass();\n         return declaringClass.isInterface() && !declaringClass.equals(BuilderParameters.class);\n     }\n }\n"}]}
