{"diffoscope-json-version": 1, "source1": "first/CombinedConfigurationBuilderProvider.class", "source2": "second/CombinedConfigurationBuilderProvider.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,29 +17,28 @@\n     private static final String COMBINED_PARAMS = \"org.apache.commons.configuration2.builder.combined.CombinedBuilderParametersImpl\";\n     private static final String FILE_PARAMS = \"org.apache.commons.configuration2.builder.FileBasedBuilderParametersImpl\";\n     \n     public CombinedConfigurationBuilderProvider() {\n         super(\"org.apache.commons.configuration2.builder.combined.CombinedConfigurationBuilder\", \"org.apache.commons.configuration2.builder.combined.ReloadingCombinedConfigurationBuilder\", \"org.apache.commons.configuration2.CombinedConfiguration\", (Collection)Arrays.asList(\"org.apache.commons.configuration2.builder.combined.CombinedBuilderParametersImpl\", \"org.apache.commons.configuration2.builder.FileBasedBuilderParametersImpl\"));\n     }\n     \n-    protected BasicConfigurationBuilder<? extends Configuration> createBuilder(final ConfigurationDeclaration decl, final Collection<BuilderParameters> params) throws Exception {\n-        CombinedConfigurationBuilder builder;\n-        if (decl.isReload()) {\n-            builder = (CombinedConfigurationBuilder)new ReloadingCombinedConfigurationBuilder();\n+    protected BasicConfigurationBuilder<? extends Configuration> createBuilder(final ConfigurationDeclaration configurationDeclaration, final Collection<BuilderParameters> collection) throws Exception {\n+        Object o;\n+        if (configurationDeclaration.isReload()) {\n+            o = new ReloadingCombinedConfigurationBuilder();\n         }\n         else {\n-            builder = new CombinedConfigurationBuilder();\n+            o = new CombinedConfigurationBuilder();\n         }\n-        decl.getConfigurationBuilder().initChildEventListeners((BasicConfigurationBuilder)builder);\n-        return (BasicConfigurationBuilder<? extends Configuration>)builder;\n+        configurationDeclaration.getConfigurationBuilder().initChildEventListeners((BasicConfigurationBuilder)o);\n+        return (BasicConfigurationBuilder<? extends Configuration>)o;\n     }\n     \n-    protected void initializeParameterObjects(final ConfigurationDeclaration decl, final Collection<BuilderParameters> params) throws Exception {\n-        final BasicBuilderParameters basicParams = (BasicBuilderParameters)params.iterator().next();\n-        setUpBasicParameters(decl.getConfigurationBuilder().getConfigurationUnderConstruction(), basicParams);\n-        super.initializeParameterObjects(decl, (Collection)params);\n+    protected void initializeParameterObjects(final ConfigurationDeclaration configurationDeclaration, final Collection<BuilderParameters> collection) throws Exception {\n+        setUpBasicParameters(configurationDeclaration.getConfigurationBuilder().getConfigurationUnderConstruction(), (BasicBuilderParameters)collection.iterator().next());\n+        super.initializeParameterObjects(configurationDeclaration, (Collection)collection);\n     }\n     \n-    private static void setUpBasicParameters(final CombinedConfiguration config, final BasicBuilderParameters params) {\n-        params.setListDelimiterHandler(config.getListDelimiterHandler()).setLogger(config.getLogger()).setThrowExceptionOnMissing(config.isThrowExceptionOnMissing()).setConfigurationDecoder(config.getConfigurationDecoder());\n+    private static void setUpBasicParameters(final CombinedConfiguration combinedConfiguration, final BasicBuilderParameters basicBuilderParameters) {\n+        basicBuilderParameters.setListDelimiterHandler(combinedConfiguration.getListDelimiterHandler()).setLogger(combinedConfiguration.getLogger()).setThrowExceptionOnMissing(combinedConfiguration.isThrowExceptionOnMissing()).setConfigurationDecoder(combinedConfiguration.getConfigurationDecoder());\n     }\n }\n"}]}
