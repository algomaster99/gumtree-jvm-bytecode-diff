{"diffoscope-json-version": 1, "source1": "first/AbstractClassNameCheck.class", "source2": "second/AbstractClassNameCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,56 +15,55 @@\n     private boolean ignoreName;\n     private Pattern format;\n     \n     public AbstractClassNameCheck() {\n         this.format = Pattern.compile(\"^Abstract.+$\");\n     }\n     \n-    public void setIgnoreModifier(final boolean value) {\n-        this.ignoreModifier = value;\n+    public void setIgnoreModifier(final boolean ignoreModifier) {\n+        this.ignoreModifier = ignoreModifier;\n     }\n     \n-    public void setIgnoreName(final boolean value) {\n-        this.ignoreName = value;\n+    public void setIgnoreName(final boolean ignoreName) {\n+        this.ignoreName = ignoreName;\n     }\n     \n-    public void setFormat(final Pattern pattern) {\n-        this.format = pattern;\n+    public void setFormat(final Pattern format) {\n+        this.format = format;\n     }\n     \n     public int[] getDefaultTokens() {\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 14 };\n     }\n     \n     public int[] getAcceptableTokens() {\n         return this.getRequiredTokens();\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        this.visitClassDef(ast);\n+    public void visitToken(final DetailAST detailAST) {\n+        this.visitClassDef(detailAST);\n     }\n     \n-    private void visitClassDef(final DetailAST ast) {\n-        final String className = ast.findFirstToken(58).getText();\n-        if (isAbstract(ast)) {\n-            if (!this.ignoreName && !this.isMatchingClassName(className)) {\n-                this.log(ast, \"illegal.abstract.class.name\", new Object[] { className, this.format.pattern() });\n+    private void visitClassDef(final DetailAST detailAST) {\n+        final String text = detailAST.findFirstToken(58).getText();\n+        if (isAbstract(detailAST)) {\n+            if (!this.ignoreName && !this.isMatchingClassName(text)) {\n+                this.log(detailAST, \"illegal.abstract.class.name\", new Object[] { text, this.format.pattern() });\n             }\n         }\n-        else if (!this.ignoreModifier && this.isMatchingClassName(className)) {\n-            this.log(ast, \"no.abstract.class.modifier\", new Object[] { className });\n+        else if (!this.ignoreModifier && this.isMatchingClassName(text)) {\n+            this.log(detailAST, \"no.abstract.class.modifier\", new Object[] { text });\n         }\n     }\n     \n-    private static boolean isAbstract(final DetailAST ast) {\n-        final DetailAST abstractAST = ast.findFirstToken(5).findFirstToken(40);\n-        return abstractAST != null;\n+    private static boolean isAbstract(final DetailAST detailAST) {\n+        return detailAST.findFirstToken(5).findFirstToken(40) != null;\n     }\n     \n-    private boolean isMatchingClassName(final String className) {\n-        return this.format.matcher(className).find();\n+    private boolean isMatchingClassName(final String input) {\n+        return this.format.matcher(input).find();\n     }\n }\n"}]}
