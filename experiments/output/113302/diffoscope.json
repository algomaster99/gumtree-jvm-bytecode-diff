{"diffoscope-json-version": 1, "source1": "first/MethodHTML.class", "source2": "second/MethodHTML.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,41 +19,62 @@\n     private final ConstantHTML constantHtml;\n     private final AttributeHTML attributeHtml;\n     \n     MethodHTML(final String dir, final String className, final Method[] methods, final Field[] fields, final ConstantHTML constantHtml, final AttributeHTML attributeHtml, final Charset charset) throws FileNotFoundException, UnsupportedEncodingException {\n         this.className = className;\n         this.attributeHtml = attributeHtml;\n         this.constantHtml = constantHtml;\n-        try (final PrintWriter newPrintWriter = new PrintWriter(dir + className + \"_methods.html\", charset.name())) {\n-            (this.printWriter = newPrintWriter).print(\"<HTML><head><meta charset=\\\"\");\n-            this.printWriter.print(charset.name());\n-            this.printWriter.println(\"\\\"></head>\");\n-            this.printWriter.println(\"<BODY BGCOLOR=\\\"#C0C0C0\\\"><TABLE BORDER=0>\");\n-            this.printWriter.println(\"<TR><TH ALIGN=LEFT>Access&nbsp;flags</TH><TH ALIGN=LEFT>Type</TH><TH ALIGN=LEFT>Field&nbsp;name</TH></TR>\");\n-            for (final Field field : fields) {\n-                this.writeField(field);\n-            }\n-            this.printWriter.println(\"</TABLE>\");\n-            this.printWriter.println(\"<TABLE BORDER=0><TR><TH ALIGN=LEFT>Access&nbsp;flags</TH><TH ALIGN=LEFT>Return&nbsp;type</TH><TH ALIGN=LEFT>Method&nbsp;name</TH><TH ALIGN=LEFT>Arguments</TH></TR>\");\n-            for (int i = 0; i < methods.length; ++i) {\n-                this.writeMethod(methods[i], i);\n+        Throwable t = null;\n+        try {\n+            final PrintWriter newPrintWriter = new PrintWriter(String.valueOf(dir) + className + \"_methods.html\", charset.name());\n+            try {\n+                (this.printWriter = newPrintWriter).print(\"<HTML><head><meta charset=\\\"\");\n+                this.printWriter.print(charset.name());\n+                this.printWriter.println(\"\\\"></head>\");\n+                this.printWriter.println(\"<BODY BGCOLOR=\\\"#C0C0C0\\\"><TABLE BORDER=0>\");\n+                this.printWriter.println(\"<TR><TH ALIGN=LEFT>Access&nbsp;flags</TH><TH ALIGN=LEFT>Type</TH><TH ALIGN=LEFT>Field&nbsp;name</TH></TR>\");\n+                for (final Field field : fields) {\n+                    this.writeField(field);\n+                }\n+                this.printWriter.println(\"</TABLE>\");\n+                this.printWriter.println(\"<TABLE BORDER=0><TR><TH ALIGN=LEFT>Access&nbsp;flags</TH><TH ALIGN=LEFT>Return&nbsp;type</TH><TH ALIGN=LEFT>Method&nbsp;name</TH><TH ALIGN=LEFT>Arguments</TH></TR>\");\n+                for (int i = 0; i < methods.length; ++i) {\n+                    this.writeMethod(methods[i], i);\n+                }\n+                this.printWriter.println(\"</TABLE></BODY></HTML>\");\n+            }\n+            finally {\n+                if (newPrintWriter != null) {\n+                    newPrintWriter.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n-            this.printWriter.println(\"</TABLE></BODY></HTML>\");\n         }\n     }\n     \n     private void writeField(final Field field) {\n         final String type = Utility.signatureToString(field.getSignature());\n         final String name = field.getName();\n         String access = Utility.accessToString(field.getAccessFlags());\n         access = Utility.replace(access, \" \", \"&nbsp;\");\n         this.printWriter.print(\"<TR><TD><FONT COLOR=\\\"#FF0000\\\">\" + access + \"</FONT></TD>\\n<TD>\" + Class2HTML.referenceType(type) + \"</TD><TD><A NAME=\\\"field\" + name + \"\\\">\" + name + \"</A></TD>\");\n         final Attribute[] attributes = field.getAttributes();\n         for (int i = 0; i < attributes.length; ++i) {\n-            this.attributeHtml.writeAttribute(attributes[i], name + \"@\" + i);\n+            this.attributeHtml.writeAttribute(attributes[i], String.valueOf(name) + \"@\" + i);\n         }\n         for (int i = 0; i < attributes.length; ++i) {\n             if (attributes[i].getTag() == 1) {\n                 final String str = attributes[i].toString();\n                 this.printWriter.print(\"<TD>= <A HREF=\\\"\" + this.className + \"_attributes.html#\" + name + \"@\" + i + \"\\\" TARGET=\\\"Attributes\\\">\" + str + \"</TD>\\n\");\n                 break;\n             }\n@@ -67,15 +88,15 @@\n         final String type = Utility.methodSignatureReturnType(signature, false);\n         final String name = method.getName();\n         String access = Utility.accessToString(method.getAccessFlags());\n         final Attribute[] attributes = method.getAttributes();\n         access = Utility.replace(access, \" \", \"&nbsp;\");\n         final String htmlName = Class2HTML.toHTML(name);\n         this.printWriter.print(\"<TR VALIGN=TOP><TD><FONT COLOR=\\\"#FF0000\\\"><A NAME=method\" + methodNumber + \">\" + access + \"</A></FONT></TD>\");\n-        this.printWriter.print(\"<TD>\" + Class2HTML.referenceType(type) + \"</TD><TD><A HREF=\" + this.className + \"_code.html#method\" + methodNumber + \" TARGET=Code>\" + htmlName + \"</A></TD>\\n<TD>(\");\n+        this.printWriter.print(\"<TD>\" + Class2HTML.referenceType(type) + \"</TD><TD>\" + \"<A HREF=\" + this.className + \"_code.html#method\" + methodNumber + \" TARGET=Code>\" + htmlName + \"</A></TD>\\n<TD>(\");\n         for (int i = 0; i < args.length; ++i) {\n             this.printWriter.print(Class2HTML.referenceType(args[i]));\n             if (i < args.length - 1) {\n                 this.printWriter.print(\", \");\n             }\n         }\n         this.printWriter.print(\")</TD></TR>\");\n"}]}
