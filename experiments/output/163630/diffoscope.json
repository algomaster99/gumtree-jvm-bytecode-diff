{"diffoscope-json-version": 1, "source1": "first/ZipFile$BoundedFileChannelInputStream.class", "source2": "second/ZipFile$BoundedFileChannelInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,8 +1,8 @@\n-  SHA-256 checksum fb28d36b52e9d6685a73ab7d75325b1bfb3a47e3acdc233a7731309eb1838cb1\n+  SHA-256 checksum 161d127cc2d118a2dc27bd1f1b9566137511734909665f62a181380d9d1e7072\n   Compiled from \"ZipFile.java\"\n class org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream extends org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream\n   minor version: 0\n   major version: 51\n   flags: (0x0020) ACC_SUPER\n   this_class: #8                          // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n   super_class: #9                         // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n@@ -10,15 +10,15 @@\n Constant pool:\n    #1 = Fieldref           #8.#36         // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.this$0:Lorg/apache/commons/compress/archivers/zip/ZipFile;\n    #2 = Methodref          #9.#37         // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n    #3 = Methodref          #38.#39        // org/apache/commons/compress/archivers/zip/ZipFile.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n    #4 = Class              #40            // java/nio/channels/FileChannel\n    #5 = Fieldref           #8.#41         // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.archive:Ljava/nio/channels/FileChannel;\n    #6 = Methodref          #4.#42         // java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;J)I\n-   #7 = Methodref          #43.#44        // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+   #7 = Methodref          #43.#44        // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n    #8 = Class              #45            // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n    #9 = Class              #46            // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n   #10 = Utf8               archive\n   #11 = Utf8               Ljava/nio/channels/FileChannel;\n   #12 = Utf8               this$0\n   #13 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile;\n   #14 = Utf8               <init>\n@@ -47,26 +47,26 @@\n   #37 = NameAndType        #14:#15        // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n   #38 = Class              #49            // org/apache/commons/compress/archivers/zip/ZipFile\n   #39 = NameAndType        #50:#51        // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n   #40 = Utf8               java/nio/channels/FileChannel\n   #41 = NameAndType        #10:#11        // archive:Ljava/nio/channels/FileChannel;\n   #42 = NameAndType        #26:#52        // read:(Ljava/nio/ByteBuffer;J)I\n   #43 = Class              #53            // java/nio/ByteBuffer\n-  #44 = NameAndType        #54:#55        // flip:()Ljava/nio/Buffer;\n+  #44 = NameAndType        #54:#55        // flip:()Ljava/nio/ByteBuffer;\n   #45 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n   #46 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n   #47 = Utf8               BoundedInputStream\n   #48 = Utf8               java/io/IOException\n   #49 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n   #50 = Utf8               access$300\n   #51 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n   #52 = Utf8               (Ljava/nio/ByteBuffer;J)I\n   #53 = Utf8               java/nio/ByteBuffer\n   #54 = Utf8               flip\n-  #55 = Utf8               ()Ljava/nio/Buffer;\n+  #55 = Utf8               ()Ljava/nio/ByteBuffer;\n {\n   private final java.nio.channels.FileChannel archive;\n     descriptor: Ljava/nio/channels/FileChannel;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   final org.apache.commons.compress.archivers.zip.ZipFile this$0;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipFile;\n@@ -110,15 +110,15 @@\n          0: aload_0\n          1: getfield      #5                  // Field archive:Ljava/nio/channels/FileChannel;\n          4: aload_3\n          5: lload_1\n          6: invokevirtual #6                  // Method java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;J)I\n          9: istore        4\n         11: aload_3\n-        12: invokevirtual #7                  // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+        12: invokevirtual #7                  // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         15: pop\n         16: iload         4\n         18: ireturn\n       LineNumberTable:\n         line 1188: 0\n         line 1189: 11\n         line 1190: 16\n"}]}
