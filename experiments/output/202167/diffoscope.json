{"diffoscope-json-version": 1, "source1": "first/BlockLZ4CompressorOutputStream.class", "source2": "second/BlockLZ4CompressorOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,254 +18,245 @@\n     private final LZ77Compressor compressor;\n     private final OutputStream os;\n     private final byte[] oneByte;\n     private boolean finished;\n     private Deque<BlockLZ4CompressorOutputStream.Pair> pairs;\n     private Deque<byte[]> expandedBlocks;\n     \n-    public BlockLZ4CompressorOutputStream(final OutputStream os) throws IOException {\n-        this(os, createParameterBuilder().build());\n+    public BlockLZ4CompressorOutputStream(final OutputStream outputStream) throws IOException {\n+        this(outputStream, createParameterBuilder().build());\n     }\n     \n-    public BlockLZ4CompressorOutputStream(final OutputStream os, final Parameters params) throws IOException {\n+    public BlockLZ4CompressorOutputStream(final OutputStream os, final Parameters parameters) throws IOException {\n         this.oneByte = new byte[1];\n         this.finished = false;\n         this.pairs = new LinkedList<BlockLZ4CompressorOutputStream.Pair>();\n         this.expandedBlocks = new LinkedList<byte[]>();\n         this.os = os;\n-        this.compressor = new LZ77Compressor(params, (LZ77Compressor.Callback)new BlockLZ4CompressorOutputStream.BlockLZ4CompressorOutputStream$1(this));\n+        this.compressor = new LZ77Compressor(parameters, (LZ77Compressor.Callback)new BlockLZ4CompressorOutputStream.BlockLZ4CompressorOutputStream$1(this));\n     }\n     \n-    public void write(final int b) throws IOException {\n-        this.oneByte[0] = (byte)(b & 0xFF);\n+    public void write(final int n) throws IOException {\n+        this.oneByte[0] = (byte)(n & 0xFF);\n         this.write(this.oneByte);\n     }\n     \n-    public void write(final byte[] data, final int off, final int len) throws IOException {\n-        this.compressor.compress(data, off, len);\n+    public void write(final byte[] array, final int n, final int n2) throws IOException {\n+        this.compressor.compress(array, n, n2);\n     }\n     \n     public void close() throws IOException {\n         this.finish();\n         this.os.close();\n     }\n     \n     public void finish() throws IOException {\n         if (!this.finished) {\n             this.compressor.finish();\n             this.finished = true;\n         }\n     }\n     \n-    public void prefill(final byte[] data, final int off, final int len) {\n-        if (len > 0) {\n-            final byte[] b = Arrays.copyOfRange(data, off, off + len);\n-            this.compressor.prefill(b);\n-            this.recordLiteral(b);\n+    public void prefill(final byte[] original, final int from, final int n) {\n+        if (n > 0) {\n+            final byte[] copyOfRange = Arrays.copyOfRange(original, from, from + n);\n+            this.compressor.prefill(copyOfRange);\n+            this.recordLiteral(copyOfRange);\n         }\n     }\n     \n-    private void addLiteralBlock(final LZ77Compressor.LiteralBlock block) throws IOException {\n-        final BlockLZ4CompressorOutputStream.Pair last = this.writeBlocksAndReturnUnfinishedPair(block.getLength());\n-        this.recordLiteral(last.addLiteral(block));\n+    private void addLiteralBlock(final LZ77Compressor.LiteralBlock literalBlock) throws IOException {\n+        this.recordLiteral(this.writeBlocksAndReturnUnfinishedPair(literalBlock.getLength()).addLiteral(literalBlock));\n         this.clearUnusedBlocksAndPairs();\n     }\n     \n-    private void addBackReference(final LZ77Compressor.BackReference block) throws IOException {\n-        final BlockLZ4CompressorOutputStream.Pair last = this.writeBlocksAndReturnUnfinishedPair(block.getLength());\n-        last.setBackReference(block);\n-        this.recordBackReference(block);\n+    private void addBackReference(final LZ77Compressor.BackReference backReference) throws IOException {\n+        this.writeBlocksAndReturnUnfinishedPair(backReference.getLength()).setBackReference(backReference);\n+        this.recordBackReference(backReference);\n         this.clearUnusedBlocksAndPairs();\n     }\n     \n-    private BlockLZ4CompressorOutputStream.Pair writeBlocksAndReturnUnfinishedPair(final int length) throws IOException {\n-        this.writeWritablePairs(length);\n-        BlockLZ4CompressorOutputStream.Pair last = (BlockLZ4CompressorOutputStream.Pair)this.pairs.peekLast();\n-        if (last == null || last.hasBackReference()) {\n-            last = new BlockLZ4CompressorOutputStream.Pair();\n-            this.pairs.addLast(last);\n+    private BlockLZ4CompressorOutputStream.Pair writeBlocksAndReturnUnfinishedPair(final int n) throws IOException {\n+        this.writeWritablePairs(n);\n+        BlockLZ4CompressorOutputStream.Pair pair = (BlockLZ4CompressorOutputStream.Pair)this.pairs.peekLast();\n+        if (pair == null || pair.hasBackReference()) {\n+            pair = new BlockLZ4CompressorOutputStream.Pair();\n+            this.pairs.addLast(pair);\n         }\n-        return last;\n+        return pair;\n     }\n     \n-    private void recordLiteral(final byte[] b) {\n-        this.expandedBlocks.addFirst(b);\n+    private void recordLiteral(final byte[] array) {\n+        this.expandedBlocks.addFirst(array);\n     }\n     \n     private void clearUnusedBlocksAndPairs() {\n         this.clearUnusedBlocks();\n         this.clearUnusedPairs();\n     }\n     \n     private void clearUnusedBlocks() {\n-        int blockLengths = 0;\n-        int blocksToKeep = 0;\n-        for (final byte[] b : this.expandedBlocks) {\n-            ++blocksToKeep;\n-            blockLengths += b.length;\n-            if (blockLengths >= 65536) {\n+        int n = 0;\n+        int n2 = 0;\n+        for (final byte[] array : this.expandedBlocks) {\n+            ++n2;\n+            n += array.length;\n+            if (n >= 65536) {\n                 break;\n             }\n         }\n-        for (int size = this.expandedBlocks.size(), i = blocksToKeep; i < size; ++i) {\n+        for (int size = this.expandedBlocks.size(), i = n2; i < size; ++i) {\n             this.expandedBlocks.removeLast();\n         }\n     }\n     \n-    private void recordBackReference(final LZ77Compressor.BackReference block) {\n-        this.expandedBlocks.addFirst(this.expand(block.getOffset(), block.getLength()));\n+    private void recordBackReference(final LZ77Compressor.BackReference backReference) {\n+        this.expandedBlocks.addFirst(this.expand(backReference.getOffset(), backReference.getLength()));\n     }\n     \n-    private byte[] expand(final int offset, final int length) {\n-        final byte[] expanded = new byte[length];\n-        if (offset == 1) {\n-            final byte[] block = (byte[])this.expandedBlocks.peekFirst();\n-            final byte b = block[block.length - 1];\n-            if (b != 0) {\n-                Arrays.fill(expanded, b);\n+    private byte[] expand(final int n, final int n2) {\n+        final byte[] a = new byte[n2];\n+        if (n == 1) {\n+            final byte[] array = (byte[])this.expandedBlocks.peekFirst();\n+            final byte val = array[array.length - 1];\n+            if (val != 0) {\n+                Arrays.fill(a, val);\n             }\n         }\n         else {\n-            this.expandFromList(expanded, offset, length);\n+            this.expandFromList(a, n, n2);\n         }\n-        return expanded;\n+        return a;\n     }\n     \n-    private void expandFromList(final byte[] expanded, final int offset, final int length) {\n-        int offsetRemaining = offset;\n-        int copyLen;\n-        for (int lengthRemaining = length, writeOffset = 0; lengthRemaining > 0; lengthRemaining -= copyLen, writeOffset += copyLen) {\n-            byte[] block = null;\n-            int copyOffset;\n-            if (offsetRemaining > 0) {\n-                int blockOffset = 0;\n-                for (final byte[] b : this.expandedBlocks) {\n-                    if (b.length + blockOffset >= offsetRemaining) {\n-                        block = b;\n+    private void expandFromList(final byte[] array, final int i, final int n) {\n+        int n2 = i;\n+        int n6;\n+        for (int j = n, n3 = 0; j > 0; j -= n6, n3 += n6) {\n+            byte[] array2 = null;\n+            int n5;\n+            if (n2 > 0) {\n+                int n4 = 0;\n+                for (final byte[] array3 : this.expandedBlocks) {\n+                    if (array3.length + n4 >= n2) {\n+                        array2 = array3;\n                         break;\n                     }\n-                    blockOffset += b.length;\n+                    n4 += array3.length;\n                 }\n-                if (block == null) {\n-                    throw new IllegalStateException(\"failed to find a block containing offset \" + offset);\n+                if (array2 == null) {\n+                    throw new IllegalStateException(\"failed to find a block containing offset \" + i);\n                 }\n-                copyOffset = blockOffset + block.length - offsetRemaining;\n-                copyLen = Math.min(lengthRemaining, block.length - copyOffset);\n+                n5 = n4 + array2.length - n2;\n+                n6 = Math.min(j, array2.length - n5);\n             }\n             else {\n-                block = expanded;\n-                copyOffset = -offsetRemaining;\n-                copyLen = Math.min(lengthRemaining, writeOffset + offsetRemaining);\n+                array2 = array;\n+                n5 = -n2;\n+                n6 = Math.min(j, n3 + n2);\n             }\n-            System.arraycopy(block, copyOffset, expanded, writeOffset, copyLen);\n-            offsetRemaining -= copyLen;\n+            System.arraycopy(array2, n5, array, n3, n6);\n+            n2 -= n6;\n         }\n     }\n     \n     private void clearUnusedPairs() {\n-        int pairLengths = 0;\n-        int pairsToKeep = 0;\n-        final Iterator<BlockLZ4CompressorOutputStream.Pair> it = this.pairs.descendingIterator();\n-        while (it.hasNext()) {\n-            final BlockLZ4CompressorOutputStream.Pair p = (BlockLZ4CompressorOutputStream.Pair)it.next();\n-            ++pairsToKeep;\n-            pairLengths += p.length();\n-            if (pairLengths >= 65536) {\n+        int n = 0;\n+        int n2 = 0;\n+        final Iterator<BlockLZ4CompressorOutputStream.Pair> descendingIterator = this.pairs.descendingIterator();\n+        while (descendingIterator.hasNext()) {\n+            final BlockLZ4CompressorOutputStream.Pair pair = (BlockLZ4CompressorOutputStream.Pair)descendingIterator.next();\n+            ++n2;\n+            n += pair.length();\n+            if (n >= 65536) {\n                 break;\n             }\n         }\n-        for (int size = this.pairs.size(), i = pairsToKeep; i < size; ++i) {\n-            final BlockLZ4CompressorOutputStream.Pair p2 = (BlockLZ4CompressorOutputStream.Pair)this.pairs.peekFirst();\n-            if (!BlockLZ4CompressorOutputStream.Pair.access$300(p2)) {\n-                break;\n-            }\n+        for (int size = this.pairs.size(), n3 = n2; n3 < size && BlockLZ4CompressorOutputStream.Pair.access$300((BlockLZ4CompressorOutputStream.Pair)this.pairs.peekFirst()); ++n3) {\n             this.pairs.removeFirst();\n         }\n     }\n     \n     private void writeFinalLiteralBlock() throws IOException {\n         this.rewriteLastPairs();\n-        for (final BlockLZ4CompressorOutputStream.Pair p : this.pairs) {\n-            if (!BlockLZ4CompressorOutputStream.Pair.access$300(p)) {\n-                p.writeTo(this.os);\n+        for (final BlockLZ4CompressorOutputStream.Pair pair : this.pairs) {\n+            if (!BlockLZ4CompressorOutputStream.Pair.access$300(pair)) {\n+                pair.writeTo(this.os);\n             }\n         }\n         this.pairs.clear();\n     }\n     \n-    private void writeWritablePairs(final int lengthOfBlocksAfterLastPair) throws IOException {\n-        int unwrittenLength = lengthOfBlocksAfterLastPair;\n-        final Iterator<BlockLZ4CompressorOutputStream.Pair> it = this.pairs.descendingIterator();\n-        while (it.hasNext()) {\n-            final BlockLZ4CompressorOutputStream.Pair p = (BlockLZ4CompressorOutputStream.Pair)it.next();\n-            if (BlockLZ4CompressorOutputStream.Pair.access$300(p)) {\n+    private void writeWritablePairs(final int n) throws IOException {\n+        int n2 = n;\n+        final Iterator<BlockLZ4CompressorOutputStream.Pair> descendingIterator = this.pairs.descendingIterator();\n+        while (descendingIterator.hasNext()) {\n+            final BlockLZ4CompressorOutputStream.Pair pair = (BlockLZ4CompressorOutputStream.Pair)descendingIterator.next();\n+            if (BlockLZ4CompressorOutputStream.Pair.access$300(pair)) {\n                 break;\n             }\n-            unwrittenLength += p.length();\n+            n2 += pair.length();\n         }\n-        final Iterator<BlockLZ4CompressorOutputStream.Pair> iterator = this.pairs.iterator();\n-        while (iterator.hasNext()) {\n-            final BlockLZ4CompressorOutputStream.Pair p = (BlockLZ4CompressorOutputStream.Pair)iterator.next();\n-            if (BlockLZ4CompressorOutputStream.Pair.access$300(p)) {\n+        for (final BlockLZ4CompressorOutputStream.Pair pair2 : this.pairs) {\n+            if (BlockLZ4CompressorOutputStream.Pair.access$300(pair2)) {\n                 continue;\n             }\n-            unwrittenLength -= p.length();\n-            if (!p.canBeWritten(unwrittenLength)) {\n+            n2 -= pair2.length();\n+            if (!pair2.canBeWritten(n2)) {\n                 break;\n             }\n-            p.writeTo(this.os);\n+            pair2.writeTo(this.os);\n         }\n     }\n     \n     private void rewriteLastPairs() {\n-        final LinkedList<BlockLZ4CompressorOutputStream.Pair> lastPairs = new LinkedList<BlockLZ4CompressorOutputStream.Pair>();\n-        final LinkedList<Integer> pairLength = new LinkedList<Integer>();\n-        int offset = 0;\n-        final Iterator<BlockLZ4CompressorOutputStream.Pair> it = this.pairs.descendingIterator();\n-        while (it.hasNext()) {\n-            final BlockLZ4CompressorOutputStream.Pair p = (BlockLZ4CompressorOutputStream.Pair)it.next();\n-            if (BlockLZ4CompressorOutputStream.Pair.access$300(p)) {\n+        final LinkedList list = new LinkedList();\n+        final LinkedList list2 = new LinkedList();\n+        int n = 0;\n+        final Iterator<BlockLZ4CompressorOutputStream.Pair> descendingIterator = this.pairs.descendingIterator();\n+        while (descendingIterator.hasNext()) {\n+            final BlockLZ4CompressorOutputStream.Pair e = (BlockLZ4CompressorOutputStream.Pair)descendingIterator.next();\n+            if (BlockLZ4CompressorOutputStream.Pair.access$300(e)) {\n                 break;\n             }\n-            final int len = p.length();\n-            pairLength.addFirst(Integer.valueOf(len));\n-            lastPairs.addFirst(p);\n-            offset += len;\n-            if (offset >= 12) {\n+            final int length = e.length();\n+            list2.addFirst(Integer.valueOf(length));\n+            list.addFirst(e);\n+            n += length;\n+            if (n >= 12) {\n                 break;\n             }\n         }\n-        final Iterator<Object> iterator = lastPairs.iterator();\n+        final Iterator iterator = list.iterator();\n         while (iterator.hasNext()) {\n-            final BlockLZ4CompressorOutputStream.Pair p = (BlockLZ4CompressorOutputStream.Pair)iterator.next();\n-            this.pairs.remove(p);\n+            this.pairs.remove(iterator.next());\n         }\n-        final int lastPairsSize = lastPairs.size();\n-        int toExpand = 0;\n-        for (int i = 1; i < lastPairsSize; ++i) {\n-            toExpand += Integer.valueOf(pairLength.get(i));\n-        }\n-        final BlockLZ4CompressorOutputStream.Pair replacement = new BlockLZ4CompressorOutputStream.Pair();\n-        if (toExpand > 0) {\n-            BlockLZ4CompressorOutputStream.Pair.access$400(replacement, this.expand(toExpand, toExpand));\n-        }\n-        final BlockLZ4CompressorOutputStream.Pair splitCandidate = (BlockLZ4CompressorOutputStream.Pair)lastPairs.get(0);\n-        final int stillNeeded = 12 - toExpand;\n-        final int brLen = splitCandidate.hasBackReference() ? BlockLZ4CompressorOutputStream.Pair.access$500(splitCandidate) : 0;\n-        if (splitCandidate.hasBackReference() && brLen >= 4 + stillNeeded) {\n-            BlockLZ4CompressorOutputStream.Pair.access$400(replacement, this.expand(toExpand + stillNeeded, stillNeeded));\n-            this.pairs.add(BlockLZ4CompressorOutputStream.Pair.access$600(splitCandidate, brLen - stillNeeded));\n+        final int size = list.size();\n+        int n2 = 0;\n+        for (int i = 1; i < size; ++i) {\n+            n2 += (int)list2.get(i);\n+        }\n+        final BlockLZ4CompressorOutputStream.Pair pair = new BlockLZ4CompressorOutputStream.Pair();\n+        if (n2 > 0) {\n+            BlockLZ4CompressorOutputStream.Pair.access$400(pair, this.expand(n2, n2));\n+        }\n+        final BlockLZ4CompressorOutputStream.Pair pair2 = (BlockLZ4CompressorOutputStream.Pair)list.get(0);\n+        final int n3 = 12 - n2;\n+        final int n4 = pair2.hasBackReference() ? BlockLZ4CompressorOutputStream.Pair.access$500(pair2) : 0;\n+        if (pair2.hasBackReference() && n4 >= 4 + n3) {\n+            BlockLZ4CompressorOutputStream.Pair.access$400(pair, this.expand(n2 + n3, n3));\n+            this.pairs.add(BlockLZ4CompressorOutputStream.Pair.access$600(pair2, n4 - n3));\n         }\n         else {\n-            if (splitCandidate.hasBackReference()) {\n-                BlockLZ4CompressorOutputStream.Pair.access$400(replacement, this.expand(toExpand + brLen, brLen));\n+            if (pair2.hasBackReference()) {\n+                BlockLZ4CompressorOutputStream.Pair.access$400(pair, this.expand(n2 + n4, n4));\n             }\n-            BlockLZ4CompressorOutputStream.Pair.access$700(splitCandidate, replacement);\n+            BlockLZ4CompressorOutputStream.Pair.access$700(pair2, pair);\n         }\n-        this.pairs.add(replacement);\n+        this.pairs.add(pair);\n     }\n     \n     public static Parameters.Builder createParameterBuilder() {\n-        final int maxLen = 65535;\n-        return Parameters.builder(65536).withMinBackReferenceLength(4).withMaxBackReferenceLength(maxLen).withMaxOffset(maxLen).withMaxLiteralLength(maxLen);\n+        final int n = 65535;\n+        return Parameters.builder(65536).withMinBackReferenceLength(4).withMaxBackReferenceLength(n).withMaxOffset(n).withMaxLiteralLength(n);\n     }\n }\n"}]}
