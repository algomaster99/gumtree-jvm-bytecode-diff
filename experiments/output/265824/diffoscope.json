{"diffoscope-json-version": 1, "source1": "first/BootstrapMethod.class", "source2": "second/BootstrapMethod.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -39,16 +39,17 @@\n             return null;\n         }\n     }\n     \n     public final void dump(final DataOutputStream file) throws IOException {\n         file.writeShort(this.bootstrapMethodRef);\n         file.writeShort(this.bootstrapArguments.length);\n-        for (final int bootstrapArgument : this.bootstrapArguments) {\n-            file.writeShort(bootstrapArgument);\n+        final int[] bootstrapArguments = this.bootstrapArguments;\n+        for (int length = bootstrapArguments.length, i = 0; i < length; ++i) {\n+            file.writeShort(bootstrapArguments[i]);\n         }\n     }\n     \n     public int[] getBootstrapArguments() {\n         return this.bootstrapArguments;\n     }\n     \n@@ -70,21 +71,20 @@\n     \n     @Override\n     public final String toString() {\n         return \"BootstrapMethod(\" + this.bootstrapMethodRef + \", \" + this.bootstrapArguments.length + \", \" + Arrays.toString(this.bootstrapArguments) + \")\";\n     }\n     \n     public final String toString(final ConstantPool constantPool) {\n-        final StringBuilder buf = new StringBuilder();\n-        final String bootstrapMethodName = constantPool.constantToString(this.bootstrapMethodRef, (byte)15);\n-        buf.append(Utility.compactClassName(bootstrapMethodName, false));\n-        final int bootstrapArgumentsLen = this.bootstrapArguments.length;\n-        if (bootstrapArgumentsLen > 0) {\n-            buf.append(\"\\nMethod Arguments:\");\n-            for (int i = 0; i < bootstrapArgumentsLen; ++i) {\n-                buf.append(\"\\n  \").append(i).append(\": \");\n-                buf.append(constantPool.constantToString(constantPool.getConstant(this.bootstrapArguments[i])));\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(Utility.compactClassName(constantPool.constantToString(this.bootstrapMethodRef, (byte)15), false));\n+        final int length = this.bootstrapArguments.length;\n+        if (length > 0) {\n+            sb.append(\"\\nMethod Arguments:\");\n+            for (int i = 0; i < length; ++i) {\n+                sb.append(\"\\n  \").append(i).append(\": \");\n+                sb.append(constantPool.constantToString(constantPool.getConstant(this.bootstrapArguments[i])));\n             }\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n }\n"}]}
