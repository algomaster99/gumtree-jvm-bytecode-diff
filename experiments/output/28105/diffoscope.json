{"diffoscope-json-version": 1, "source1": "first/PKWareExtraHeader.class", "source2": "second/PKWareExtraHeader.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,134 +1,134 @@\n-  SHA-256 checksum de5736e106c44965f31be222bed9bf6476babab1c07217437350717dc1ba161f\n+  SHA-256 checksum ea282dc39731a6d512d37f02d8eaa7bbc3752d6cb4d8bbe671e3e6d5bad34f81\n   Compiled from \"PKWareExtraHeader.java\"\n public abstract class org.apache.commons.compress.archivers.zip.PKWareExtraHeader implements org.apache.commons.compress.archivers.zip.ZipExtraField\n   minor version: 0\n   major version: 52\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n-  this_class: #24                         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-  super_class: #25                        // java/lang/Object\n+  this_class: #8                          // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  super_class: #2                         // java/lang/Object\n   interfaces: 1, fields: 3, methods: 11, attributes: 2\n Constant pool:\n-    #1 = Methodref          #25.#70       // java/lang/Object.\"<init>\":()V\n-    #2 = Fieldref           #24.#71       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.headerId:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-    #3 = Methodref          #72.#73       // org/apache/commons/compress/archivers/zip/ZipUtil.copy:([B)[B\n-    #4 = Fieldref           #24.#74       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.localData:[B\n-    #5 = Class              #75           // org/apache/commons/compress/archivers/zip/ZipShort\n-    #6 = Methodref          #5.#76        // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-    #7 = Fieldref           #24.#77       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.centralData:[B\n-    #8 = Methodref          #24.#78       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.getLocalFileDataLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-    #9 = Methodref          #24.#79       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.getLocalFileDataData:()[B\n-   #10 = Methodref          #80.#81       // java/util/Arrays.copyOfRange:([BII)[B\n-   #11 = Methodref          #24.#82       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.setLocalFileDataData:([B)V\n-   #12 = Methodref          #24.#83       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.setCentralDirectoryData:([B)V\n-   #13 = Class              #84           // java/util/zip/ZipException\n-   #14 = Class              #85           // java/lang/StringBuilder\n-   #15 = Methodref          #14.#70       // java/lang/StringBuilder.\"<init>\":()V\n-   #16 = Methodref          #25.#86       // java/lang/Object.getClass:()Ljava/lang/Class;\n-   #17 = Methodref          #87.#88       // java/lang/Class.getName:()Ljava/lang/String;\n-   #18 = Methodref          #14.#89       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #19 = String             #90           //  is too short, only\n-   #20 = Methodref          #14.#91       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #21 = String             #92           //  bytes, expected at least\n-   #22 = Methodref          #14.#93       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #23 = Methodref          #13.#94       // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #24 = Class              #95           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-   #25 = Class              #96           // java/lang/Object\n-   #26 = Class              #97           // org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #27 = Class              #98           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n-   #28 = Utf8               HashAlgorithm\n-   #29 = Utf8               InnerClasses\n-   #30 = Class              #99           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n-   #31 = Utf8               EncryptionAlgorithm\n-   #32 = Utf8               headerId\n-   #33 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #34 = Utf8               localData\n-   #35 = Utf8               [B\n-   #36 = Utf8               centralData\n-   #37 = Utf8               <init>\n-   #38 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-   #39 = Utf8               Code\n-   #40 = Utf8               LineNumberTable\n-   #41 = Utf8               LocalVariableTable\n-   #42 = Utf8               this\n-   #43 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader;\n-   #44 = Utf8               getHeaderId\n-   #45 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #46 = Utf8               setLocalFileDataData\n-   #47 = Utf8               ([B)V\n-   #48 = Utf8               data\n-   #49 = Utf8               getLocalFileDataLength\n-   #50 = Utf8               StackMapTable\n-   #51 = Utf8               getLocalFileDataData\n-   #52 = Utf8               ()[B\n-   #53 = Utf8               setCentralDirectoryData\n-   #54 = Utf8               getCentralDirectoryLength\n-   #55 = Utf8               getCentralDirectoryData\n-   #56 = Utf8               parseFromLocalFileData\n-   #57 = Utf8               ([BII)V\n-   #58 = Utf8               offset\n-   #59 = Utf8               I\n-   #60 = Utf8               length\n-   #61 = Utf8               Exceptions\n-   #62 = Utf8               parseFromCentralDirectoryData\n-   #63 = Utf8               tmp\n-   #64 = Class              #35           // \"[B\"\n-   #65 = Utf8               assertMinimalLength\n-   #66 = Utf8               (II)V\n-   #67 = Utf8               minimum\n-   #68 = Utf8               SourceFile\n-   #69 = Utf8               PKWareExtraHeader.java\n-   #70 = NameAndType        #37:#100      // \"<init>\":()V\n-   #71 = NameAndType        #32:#33       // headerId:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #72 = Class              #101          // org/apache/commons/compress/archivers/zip/ZipUtil\n-   #73 = NameAndType        #102:#103     // copy:([B)[B\n-   #74 = NameAndType        #34:#35       // localData:[B\n-   #75 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-   #76 = NameAndType        #37:#104      // \"<init>\":(I)V\n-   #77 = NameAndType        #36:#35       // centralData:[B\n-   #78 = NameAndType        #49:#45       // getLocalFileDataLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #79 = NameAndType        #51:#52       // getLocalFileDataData:()[B\n-   #80 = Class              #105          // java/util/Arrays\n-   #81 = NameAndType        #106:#107     // copyOfRange:([BII)[B\n-   #82 = NameAndType        #46:#47       // setLocalFileDataData:([B)V\n-   #83 = NameAndType        #53:#47       // setCentralDirectoryData:([B)V\n-   #84 = Utf8               java/util/zip/ZipException\n-   #85 = Utf8               java/lang/StringBuilder\n-   #86 = NameAndType        #108:#109     // getClass:()Ljava/lang/Class;\n-   #87 = Class              #110          // java/lang/Class\n-   #88 = NameAndType        #111:#112     // getName:()Ljava/lang/String;\n-   #89 = NameAndType        #113:#114     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #90 = Utf8                is too short, only\n-   #91 = NameAndType        #113:#115     // append:(I)Ljava/lang/StringBuilder;\n-   #92 = Utf8                bytes, expected at least\n-   #93 = NameAndType        #116:#112     // toString:()Ljava/lang/String;\n-   #94 = NameAndType        #37:#117      // \"<init>\":(Ljava/lang/String;)V\n-   #95 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-   #96 = Utf8               java/lang/Object\n-   #97 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #98 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n-   #99 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n-  #100 = Utf8               ()V\n-  #101 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-  #102 = Utf8               copy\n-  #103 = Utf8               ([B)[B\n-  #104 = Utf8               (I)V\n-  #105 = Utf8               java/util/Arrays\n-  #106 = Utf8               copyOfRange\n-  #107 = Utf8               ([BII)[B\n-  #108 = Utf8               getClass\n-  #109 = Utf8               ()Ljava/lang/Class;\n-  #110 = Utf8               java/lang/Class\n-  #111 = Utf8               getName\n-  #112 = Utf8               ()Ljava/lang/String;\n-  #113 = Utf8               append\n-  #114 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #115 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #116 = Utf8               toString\n-  #117 = Utf8               (Ljava/lang/String;)V\n+    #1 = Methodref          #2.#3         // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #4            // java/lang/Object\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               java/lang/Object\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Fieldref           #8.#9         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.headerId:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+    #8 = Class              #10           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+    #9 = NameAndType        #11:#12       // headerId:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #10 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+   #11 = Utf8               headerId\n+   #12 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #13 = Methodref          #14.#15       // org/apache/commons/compress/archivers/zip/ZipUtil.copy:([B)[B\n+   #14 = Class              #16           // org/apache/commons/compress/archivers/zip/ZipUtil\n+   #15 = NameAndType        #17:#18       // copy:([B)[B\n+   #16 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+   #17 = Utf8               copy\n+   #18 = Utf8               ([B)[B\n+   #19 = Fieldref           #8.#20        // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.localData:[B\n+   #20 = NameAndType        #21:#22       // localData:[B\n+   #21 = Utf8               localData\n+   #22 = Utf8               [B\n+   #23 = Class              #24           // org/apache/commons/compress/archivers/zip/ZipShort\n+   #24 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+   #25 = Methodref          #23.#26       // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+   #26 = NameAndType        #5:#27        // \"<init>\":(I)V\n+   #27 = Utf8               (I)V\n+   #28 = Fieldref           #8.#29        // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.centralData:[B\n+   #29 = NameAndType        #30:#22       // centralData:[B\n+   #30 = Utf8               centralData\n+   #31 = Methodref          #8.#32        // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.getLocalFileDataLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #32 = NameAndType        #33:#34       // getLocalFileDataLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #33 = Utf8               getLocalFileDataLength\n+   #34 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #35 = Methodref          #8.#36        // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.getLocalFileDataData:()[B\n+   #36 = NameAndType        #37:#38       // getLocalFileDataData:()[B\n+   #37 = Utf8               getLocalFileDataData\n+   #38 = Utf8               ()[B\n+   #39 = Methodref          #40.#41       // java/util/Arrays.copyOfRange:([BII)[B\n+   #40 = Class              #42           // java/util/Arrays\n+   #41 = NameAndType        #43:#44       // copyOfRange:([BII)[B\n+   #42 = Utf8               java/util/Arrays\n+   #43 = Utf8               copyOfRange\n+   #44 = Utf8               ([BII)[B\n+   #45 = Methodref          #8.#46        // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.setLocalFileDataData:([B)V\n+   #46 = NameAndType        #47:#48       // setLocalFileDataData:([B)V\n+   #47 = Utf8               setLocalFileDataData\n+   #48 = Utf8               ([B)V\n+   #49 = Methodref          #8.#50        // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.setCentralDirectoryData:([B)V\n+   #50 = NameAndType        #51:#48       // setCentralDirectoryData:([B)V\n+   #51 = Utf8               setCentralDirectoryData\n+   #52 = Class              #53           // java/util/zip/ZipException\n+   #53 = Utf8               java/util/zip/ZipException\n+   #54 = Class              #55           // java/lang/StringBuilder\n+   #55 = Utf8               java/lang/StringBuilder\n+   #56 = Methodref          #54.#3        // java/lang/StringBuilder.\"<init>\":()V\n+   #57 = Methodref          #2.#58        // java/lang/Object.getClass:()Ljava/lang/Class;\n+   #58 = NameAndType        #59:#60       // getClass:()Ljava/lang/Class;\n+   #59 = Utf8               getClass\n+   #60 = Utf8               ()Ljava/lang/Class;\n+   #61 = Methodref          #62.#63       // java/lang/Class.getName:()Ljava/lang/String;\n+   #62 = Class              #64           // java/lang/Class\n+   #63 = NameAndType        #65:#66       // getName:()Ljava/lang/String;\n+   #64 = Utf8               java/lang/Class\n+   #65 = Utf8               getName\n+   #66 = Utf8               ()Ljava/lang/String;\n+   #67 = Methodref          #54.#68       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #68 = NameAndType        #69:#70       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #69 = Utf8               append\n+   #70 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #71 = String             #72           //  is too short, only\n+   #72 = Utf8                is too short, only\n+   #73 = Methodref          #54.#74       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #74 = NameAndType        #69:#75       // append:(I)Ljava/lang/StringBuilder;\n+   #75 = Utf8               (I)Ljava/lang/StringBuilder;\n+   #76 = String             #77           //  bytes, expected at least\n+   #77 = Utf8                bytes, expected at least\n+   #78 = Methodref          #54.#79       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #79 = NameAndType        #80:#66       // toString:()Ljava/lang/String;\n+   #80 = Utf8               toString\n+   #81 = Methodref          #52.#82       // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+   #82 = NameAndType        #5:#83        // \"<init>\":(Ljava/lang/String;)V\n+   #83 = Utf8               (Ljava/lang/String;)V\n+   #84 = Class              #85           // org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #85 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #86 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #87 = Utf8               Code\n+   #88 = Utf8               LineNumberTable\n+   #89 = Utf8               LocalVariableTable\n+   #90 = Utf8               this\n+   #91 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader;\n+   #92 = Utf8               getHeaderId\n+   #93 = Utf8               data\n+   #94 = Utf8               StackMapTable\n+   #95 = Utf8               getCentralDirectoryLength\n+   #96 = Utf8               getCentralDirectoryData\n+   #97 = Utf8               parseFromLocalFileData\n+   #98 = Utf8               ([BII)V\n+   #99 = Utf8               offset\n+  #100 = Utf8               I\n+  #101 = Utf8               length\n+  #102 = Utf8               Exceptions\n+  #103 = Utf8               parseFromCentralDirectoryData\n+  #104 = Utf8               tmp\n+  #105 = Class              #22           // \"[B\"\n+  #106 = Utf8               assertMinimalLength\n+  #107 = Utf8               (II)V\n+  #108 = Utf8               minimum\n+  #109 = Utf8               SourceFile\n+  #110 = Utf8               PKWareExtraHeader.java\n+  #111 = Utf8               InnerClasses\n+  #112 = Class              #113          // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n+  #113 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n+  #114 = Utf8               HashAlgorithm\n+  #115 = Class              #116          // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n+  #116 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n+  #117 = Utf8               EncryptionAlgorithm\n {\n   private final org.apache.commons.compress.archivers.zip.ZipShort headerId;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private byte[] localData;\n     descriptor: [B\n@@ -143,15 +143,15 @@\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n-         6: putfield      #2                  // Field headerId:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         6: putfield      #7                  // Field headerId:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n          9: return\n       LineNumberTable:\n         line 82: 0\n         line 83: 4\n         line 84: 9\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -160,56 +160,56 @@\n \n   public org.apache.commons.compress.archivers.zip.ZipShort getHeaderId();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #2                  // Field headerId:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         1: getfield      #7                  // Field headerId:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n          4: areturn\n       LineNumberTable:\n         line 93: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader;\n \n   public void setLocalFileDataData(byte[]);\n     descriptor: ([B)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokestatic  #3                  // Method org/apache/commons/compress/archivers/zip/ZipUtil.copy:([B)[B\n-         5: putfield      #4                  // Field localData:[B\n+         2: invokestatic  #13                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.copy:([B)[B\n+         5: putfield      #19                 // Field localData:[B\n          8: return\n       LineNumberTable:\n         line 104: 0\n         line 105: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader;\n             0       9     1  data   [B\n \n   public org.apache.commons.compress.archivers.zip.ZipShort getLocalFileDataLength();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n-         0: new           #5                  // class org/apache/commons/compress/archivers/zip/ZipShort\n+         0: new           #23                 // class org/apache/commons/compress/archivers/zip/ZipShort\n          3: dup\n          4: aload_0\n-         5: getfield      #4                  // Field localData:[B\n+         5: getfield      #19                 // Field localData:[B\n          8: ifnull        19\n         11: aload_0\n-        12: getfield      #4                  // Field localData:[B\n+        12: getfield      #19                 // Field localData:[B\n         15: arraylength\n         16: goto          20\n         19: iconst_0\n-        20: invokespecial #6                  // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+        20: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n         23: areturn\n       LineNumberTable:\n         line 114: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      24     0  this   Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader;\n       StackMapTable: number_of_entries = 2\n@@ -224,32 +224,32 @@\n \n   public byte[] getLocalFileDataData();\n     descriptor: ()[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field localData:[B\n-         4: invokestatic  #3                  // Method org/apache/commons/compress/archivers/zip/ZipUtil.copy:([B)[B\n+         1: getfield      #19                 // Field localData:[B\n+         4: invokestatic  #13                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.copy:([B)[B\n          7: areturn\n       LineNumberTable:\n         line 124: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader;\n \n   public void setCentralDirectoryData(byte[]);\n     descriptor: ([B)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokestatic  #3                  // Method org/apache/commons/compress/archivers/zip/ZipUtil.copy:([B)[B\n-         5: putfield      #7                  // Field centralData:[B\n+         2: invokestatic  #13                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.copy:([B)[B\n+         5: putfield      #28                 // Field centralData:[B\n          8: return\n       LineNumberTable:\n         line 134: 0\n         line 135: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader;\n@@ -257,25 +257,25 @@\n \n   public org.apache.commons.compress.archivers.zip.ZipShort getCentralDirectoryLength();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field centralData:[B\n+         1: getfield      #28                 // Field centralData:[B\n          4: ifnull        20\n-         7: new           #5                  // class org/apache/commons/compress/archivers/zip/ZipShort\n+         7: new           #23                 // class org/apache/commons/compress/archivers/zip/ZipShort\n         10: dup\n         11: aload_0\n-        12: getfield      #7                  // Field centralData:[B\n+        12: getfield      #28                 // Field centralData:[B\n         15: arraylength\n-        16: invokespecial #6                  // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+        16: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n         19: areturn\n         20: aload_0\n-        21: invokevirtual #8                  // Method getLocalFileDataLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+        21: invokevirtual #31                 // Method getLocalFileDataLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n         24: areturn\n       LineNumberTable:\n         line 145: 0\n         line 146: 7\n         line 148: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -285,22 +285,22 @@\n \n   public byte[] getCentralDirectoryData();\n     descriptor: ()[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field centralData:[B\n+         1: getfield      #28                 // Field centralData:[B\n          4: ifnull        15\n          7: aload_0\n-         8: getfield      #7                  // Field centralData:[B\n-        11: invokestatic  #3                  // Method org/apache/commons/compress/archivers/zip/ZipUtil.copy:([B)[B\n+         8: getfield      #28                 // Field centralData:[B\n+        11: invokestatic  #13                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.copy:([B)[B\n         14: areturn\n         15: aload_0\n-        16: invokevirtual #9                  // Method getLocalFileDataData:()[B\n+        16: invokevirtual #35                 // Method getLocalFileDataData:()[B\n         19: areturn\n       LineNumberTable:\n         line 158: 0\n         line 159: 7\n         line 161: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -315,16 +315,16 @@\n       stack=5, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_2\n          4: iload_3\n          5: iadd\n-         6: invokestatic  #10                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-         9: invokevirtual #11                 // Method setLocalFileDataData:([B)V\n+         6: invokestatic  #39                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+         9: invokevirtual #45                 // Method setLocalFileDataData:([B)V\n         12: return\n       LineNumberTable:\n         line 176: 0\n         line 177: 12\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0  this   Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader;\n@@ -340,25 +340,25 @@\n     Code:\n       stack=4, locals=5, args_size=4\n          0: aload_1\n          1: iload_2\n          2: iload_2\n          3: iload_3\n          4: iadd\n-         5: invokestatic  #10                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+         5: invokestatic  #39                 // Method java/util/Arrays.copyOfRange:([BII)[B\n          8: astore        4\n         10: aload_0\n         11: aload         4\n-        13: invokevirtual #12                 // Method setCentralDirectoryData:([B)V\n+        13: invokevirtual #49                 // Method setCentralDirectoryData:([B)V\n         16: aload_0\n-        17: getfield      #4                  // Field localData:[B\n+        17: getfield      #19                 // Field localData:[B\n         20: ifnonnull     29\n         23: aload_0\n         24: aload         4\n-        26: invokevirtual #11                 // Method setLocalFileDataData:([B)V\n+        26: invokevirtual #45                 // Method setLocalFileDataData:([B)V\n         29: return\n       LineNumberTable:\n         line 191: 0\n         line 192: 10\n         line 193: 16\n         line 194: 23\n         line 196: 29\n@@ -380,33 +380,33 @@\n     descriptor: (II)V\n     flags: (0x0014) ACC_PROTECTED, ACC_FINAL\n     Code:\n       stack=4, locals=3, args_size=3\n          0: iload_2\n          1: iload_1\n          2: if_icmpge     51\n-         5: new           #13                 // class java/util/zip/ZipException\n+         5: new           #52                 // class java/util/zip/ZipException\n          8: dup\n-         9: new           #14                 // class java/lang/StringBuilder\n+         9: new           #54                 // class java/lang/StringBuilder\n         12: dup\n-        13: invokespecial #15                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        13: invokespecial #56                 // Method java/lang/StringBuilder.\"<init>\":()V\n         16: aload_0\n-        17: invokevirtual #16                 // Method java/lang/Object.getClass:()Ljava/lang/Class;\n-        20: invokevirtual #17                 // Method java/lang/Class.getName:()Ljava/lang/String;\n-        23: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        26: ldc           #19                 // String  is too short, only\n-        28: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        17: invokevirtual #57                 // Method java/lang/Object.getClass:()Ljava/lang/Class;\n+        20: invokevirtual #61                 // Method java/lang/Class.getName:()Ljava/lang/String;\n+        23: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        26: ldc           #71                 // String  is too short, only\n+        28: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         31: iload_2\n-        32: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        35: ldc           #21                 // String  bytes, expected at least\n-        37: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        32: invokevirtual #73                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        35: ldc           #76                 // String  bytes, expected at least\n+        37: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         40: iload_1\n-        41: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        44: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        47: invokespecial #23                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        41: invokevirtual #73                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        44: invokevirtual #78                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        47: invokespecial #81                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n         50: athrow\n         51: return\n       LineNumberTable:\n         line 200: 0\n         line 201: 5\n         line 204: 51\n       LocalVariableTable:\n@@ -417,9 +417,9 @@\n       StackMapTable: number_of_entries = 1\n         frame_type = 51 /* same */\n     Exceptions:\n       throws java.util.zip.ZipException\n }\n SourceFile: \"PKWareExtraHeader.java\"\n InnerClasses:\n-  public static final #28= #27 of #24;    // HashAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-  public static final #31= #30 of #24;    // EncryptionAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  public static final #114= #112 of #8;   // HashAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  public static final #117= #115 of #8;   // EncryptionAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n"}]}
