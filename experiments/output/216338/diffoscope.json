{"diffoscope-json-version": 1, "source1": "first/ConstantLong.class", "source2": "second/ConstantLong.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,41 +5,41 @@\n import java.io.IOException;\n import java.io.DataInput;\n \n public final class ConstantLong extends Constant implements ConstantObject\n {\n     private long bytes;\n     \n-    public ConstantLong(final ConstantLong c) {\n-        this(c.getBytes());\n+    public ConstantLong(final ConstantLong constantLong) {\n+        this(constantLong.getBytes());\n     }\n     \n-    ConstantLong(final DataInput file) throws IOException {\n-        this(file.readLong());\n+    ConstantLong(final DataInput dataInput) throws IOException {\n+        this(dataInput.readLong());\n     }\n     \n     public ConstantLong(final long bytes) {\n         super((byte)5);\n         this.bytes = bytes;\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitConstantLong(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitConstantLong(this);\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        file.writeByte(super.getTag());\n-        file.writeLong(this.bytes);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeByte(super.getTag());\n+        dataOutputStream.writeLong(this.bytes);\n     }\n     \n     public long getBytes() {\n         return this.bytes;\n     }\n     \n-    public Object getConstantValue(final ConstantPool cp) {\n+    public Object getConstantValue(final ConstantPool constantPool) {\n         return Long.valueOf(this.bytes);\n     }\n     \n     public void setBytes(final long bytes) {\n         this.bytes = bytes;\n     }\n     \n"}]}
