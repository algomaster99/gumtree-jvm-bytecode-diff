{"diffoscope-json-version": 1, "source1": "first/Pass2Verifier$FAMRAV_Visitor.class", "source2": "second/Pass2Verifier$FAMRAV_Visitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -22,86 +22,86 @@\n     private FAMRAV_Visitor(final Pass2Verifier this$0, final JavaClass jc) {\n         this.this$0 = this$0;\n         this.cp = jc.getConstantPool();\n     }\n     \n     public void visitConstantFieldref(final ConstantFieldref obj) {\n         if (obj.getTag() != 9) {\n-            throw new ClassConstraintException(\"ConstantFieldref '\" + Pass2Verifier.access$000((Node)obj) + \"' has wrong tag!\");\n+            throw new ClassConstraintException(\"ConstantFieldref '\" + Pass2Verifier.access$0((Node)obj) + \"' has wrong tag!\");\n         }\n         final int nameAndTypeIndex = obj.getNameAndTypeIndex();\n         final ConstantNameAndType cnat = (ConstantNameAndType)this.cp.getConstant(nameAndTypeIndex);\n         final String name = ((ConstantUtf8)this.cp.getConstant(cnat.getNameIndex())).getBytes();\n-        if (!Pass2Verifier.access$400(name)) {\n-            throw new ClassConstraintException(\"Invalid field name '\" + name + \"' referenced by '\" + Pass2Verifier.access$000((Node)obj) + \"'.\");\n+        if (!Pass2Verifier.access$4(name)) {\n+            throw new ClassConstraintException(\"Invalid field name '\" + name + \"' referenced by '\" + Pass2Verifier.access$0((Node)obj) + \"'.\");\n         }\n         final int classIndex = obj.getClassIndex();\n         final ConstantClass cc = (ConstantClass)this.cp.getConstant(classIndex);\n         final String className = ((ConstantUtf8)this.cp.getConstant(cc.getNameIndex())).getBytes();\n-        if (!Pass2Verifier.access$600(className)) {\n-            throw new ClassConstraintException(\"Illegal class name '\" + className + \"' used by '\" + Pass2Verifier.access$000((Node)obj) + \"'.\");\n+        if (!Pass2Verifier.access$6(className)) {\n+            throw new ClassConstraintException(\"Illegal class name '\" + className + \"' used by '\" + Pass2Verifier.access$0((Node)obj) + \"'.\");\n         }\n         final String sig = ((ConstantUtf8)this.cp.getConstant(cnat.getSignatureIndex())).getBytes();\n         try {\n             Type.getType(sig);\n         }\n         catch (final ClassFormatException cfe) {\n-            throw new ClassConstraintException(\"Illegal descriptor (==signature) '\" + sig + \"' used by '\" + Pass2Verifier.access$000((Node)obj) + \"'.\", (Throwable)cfe);\n+            throw new ClassConstraintException(\"Illegal descriptor (==signature) '\" + sig + \"' used by '\" + Pass2Verifier.access$0((Node)obj) + \"'.\", (Throwable)cfe);\n         }\n     }\n     \n     public void visitConstantInterfaceMethodref(final ConstantInterfaceMethodref obj) {\n         if (obj.getTag() != 11) {\n-            throw new ClassConstraintException(\"ConstantInterfaceMethodref '\" + Pass2Verifier.access$000((Node)obj) + \"' has wrong tag!\");\n+            throw new ClassConstraintException(\"ConstantInterfaceMethodref '\" + Pass2Verifier.access$0((Node)obj) + \"' has wrong tag!\");\n         }\n         final int nameAndTypeIndex = obj.getNameAndTypeIndex();\n         final ConstantNameAndType cnat = (ConstantNameAndType)this.cp.getConstant(nameAndTypeIndex);\n         final String name = ((ConstantUtf8)this.cp.getConstant(cnat.getNameIndex())).getBytes();\n-        if (!Pass2Verifier.access$700(name)) {\n-            throw new ClassConstraintException(\"Invalid (interface) method name '\" + name + \"' referenced by '\" + Pass2Verifier.access$000((Node)obj) + \"'.\");\n+        if (!Pass2Verifier.access$7(name)) {\n+            throw new ClassConstraintException(\"Invalid (interface) method name '\" + name + \"' referenced by '\" + Pass2Verifier.access$0((Node)obj) + \"'.\");\n         }\n         final int classIndex = obj.getClassIndex();\n         final ConstantClass cc = (ConstantClass)this.cp.getConstant(classIndex);\n         final String className = ((ConstantUtf8)this.cp.getConstant(cc.getNameIndex())).getBytes();\n-        if (!Pass2Verifier.access$600(className)) {\n-            throw new ClassConstraintException(\"Illegal class name '\" + className + \"' used by '\" + Pass2Verifier.access$000((Node)obj) + \"'.\");\n+        if (!Pass2Verifier.access$6(className)) {\n+            throw new ClassConstraintException(\"Illegal class name '\" + className + \"' used by '\" + Pass2Verifier.access$0((Node)obj) + \"'.\");\n         }\n         final String sig = ((ConstantUtf8)this.cp.getConstant(cnat.getSignatureIndex())).getBytes();\n         try {\n             final Type t = Type.getReturnType(sig);\n             if (name.equals(\"<clinit>\") && t != Type.VOID) {\n                 this.this$0.addMessage(\"Class or interface initialization method '<clinit>' usually has VOID return type instead of '\" + t + \"'. Note this is really not a requirement of The Java Virtual Machine Specification, Second Edition.\");\n             }\n         }\n         catch (final ClassFormatException cfe) {\n-            throw new ClassConstraintException(\"Illegal descriptor (==signature) '\" + sig + \"' used by '\" + Pass2Verifier.access$000((Node)obj) + \"'.\", (Throwable)cfe);\n+            throw new ClassConstraintException(\"Illegal descriptor (==signature) '\" + sig + \"' used by '\" + Pass2Verifier.access$0((Node)obj) + \"'.\", (Throwable)cfe);\n         }\n     }\n     \n     public void visitConstantMethodref(final ConstantMethodref obj) {\n         if (obj.getTag() != 10) {\n-            throw new ClassConstraintException(\"ConstantMethodref '\" + Pass2Verifier.access$000((Node)obj) + \"' has wrong tag!\");\n+            throw new ClassConstraintException(\"ConstantMethodref '\" + Pass2Verifier.access$0((Node)obj) + \"' has wrong tag!\");\n         }\n         final int nameAndTypeIndex = obj.getNameAndTypeIndex();\n         final ConstantNameAndType cnat = (ConstantNameAndType)this.cp.getConstant(nameAndTypeIndex);\n         final String name = ((ConstantUtf8)this.cp.getConstant(cnat.getNameIndex())).getBytes();\n-        if (!Pass2Verifier.access$800(name)) {\n-            throw new ClassConstraintException(\"Invalid (non-interface) method name '\" + name + \"' referenced by '\" + Pass2Verifier.access$000((Node)obj) + \"'.\");\n+        if (!Pass2Verifier.access$8(name)) {\n+            throw new ClassConstraintException(\"Invalid (non-interface) method name '\" + name + \"' referenced by '\" + Pass2Verifier.access$0((Node)obj) + \"'.\");\n         }\n         final int classIndex = obj.getClassIndex();\n         final ConstantClass cc = (ConstantClass)this.cp.getConstant(classIndex);\n         final String className = ((ConstantUtf8)this.cp.getConstant(cc.getNameIndex())).getBytes();\n-        if (!Pass2Verifier.access$600(className)) {\n-            throw new ClassConstraintException(\"Illegal class name '\" + className + \"' used by '\" + Pass2Verifier.access$000((Node)obj) + \"'.\");\n+        if (!Pass2Verifier.access$6(className)) {\n+            throw new ClassConstraintException(\"Illegal class name '\" + className + \"' used by '\" + Pass2Verifier.access$0((Node)obj) + \"'.\");\n         }\n         final String sig = ((ConstantUtf8)this.cp.getConstant(cnat.getSignatureIndex())).getBytes();\n         try {\n             final Type t = Type.getReturnType(sig);\n             if (name.equals(\"<init>\") && t != Type.VOID) {\n                 throw new ClassConstraintException(\"Instance initialization method must have VOID return type.\");\n             }\n         }\n         catch (final ClassFormatException cfe) {\n-            throw new ClassConstraintException(\"Illegal descriptor (==signature) '\" + sig + \"' used by '\" + Pass2Verifier.access$000((Node)obj) + \"'.\", (Throwable)cfe);\n+            throw new ClassConstraintException(\"Illegal descriptor (==signature) '\" + sig + \"' used by '\" + Pass2Verifier.access$0((Node)obj) + \"'.\", (Throwable)cfe);\n         }\n     }\n }\n"}]}
