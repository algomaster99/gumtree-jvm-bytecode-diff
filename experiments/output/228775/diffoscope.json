{"diffoscope-json-version": 1, "source1": "first/Blake3$Output.class", "source2": "second/Blake3$Output.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,23 +19,23 @@\n         this.flags = flags;\n     }\n     \n     private int[] chainingValue() {\n         return Arrays.copyOf(Blake3.access$600(this.inputChainingValue, this.blockWords, this.blockLength, this.counter, this.flags), 8);\n     }\n     \n-    private void rootOutputBytes(final byte[] out, int offset, int length) {\n-        int outputBlockCounter = 0;\n-        while (length > 0) {\n-            int chunkLength = Math.min(64, length);\n-            length -= chunkLength;\n-            final int[] words = Blake3.access$600(this.inputChainingValue, this.blockWords, this.blockLength, (long)(outputBlockCounter++), this.flags | 0x8);\n-            int wordCounter = 0;\n-            while (chunkLength > 0) {\n-                final int wordLength = Math.min(4, chunkLength);\n-                Blake3.access$700(words[wordCounter++], out, offset, wordLength);\n-                offset += wordLength;\n-                chunkLength -= wordLength;\n+    private void rootOutputBytes(final byte[] array, int n, int i) {\n+        int n2 = 0;\n+        while (i > 0) {\n+            int j = Math.min(64, i);\n+            i -= j;\n+            final int[] access$600 = Blake3.access$600(this.inputChainingValue, this.blockWords, this.blockLength, (long)(n2++), this.flags | 0x8);\n+            int n3 = 0;\n+            while (j > 0) {\n+                final int min = Math.min(4, j);\n+                Blake3.access$700(access$600[n3++], array, n, min);\n+                n += min;\n+                j -= min;\n             }\n         }\n     }\n }\n"}]}
