{"diffoscope-json-version": 1, "source1": "first/FTP.class", "source2": "second/FTP.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -58,204 +58,203 @@\n         this._replyLines = new ArrayList<String>();\n         this._newReplyString = false;\n         this._replyString = null;\n         this._controlEncoding = \"ISO-8859-1\";\n         this._commandSupport_ = new ProtocolCommandSupport((Object)this);\n     }\n     \n-    private boolean strictCheck(final String line, final String code) {\n-        return !line.startsWith(code) || line.charAt(3) != ' ';\n+    private boolean strictCheck(final String s, final String prefix) {\n+        return !s.startsWith(prefix) || s.charAt(3) != ' ';\n     }\n     \n-    private boolean lenientCheck(final String line) {\n-        return line.length() <= 3 || line.charAt(3) == '-' || !Character.isDigit(line.charAt(0));\n+    private boolean lenientCheck(final String s) {\n+        return s.length() <= 3 || s.charAt(3) == '-' || !Character.isDigit(s.charAt(0));\n     }\n     \n     protected void __getReplyNoReport() throws IOException {\n         this.getReply(false);\n     }\n     \n-    private int getReply(final boolean reportReply) throws IOException {\n+    private int getReply(final boolean b) throws IOException {\n         this._newReplyString = true;\n         this._replyLines.clear();\n-        String line = this._controlInput_.readLine();\n+        final String line = this._controlInput_.readLine();\n         if (line == null) {\n             throw new FTPConnectionClosedException(\"Connection closed without indication.\");\n         }\n         final int length = line.length();\n         if (length < 3) {\n             throw new MalformedServerReplyException(\"Truncated server reply: \" + line);\n         }\n-        String code = null;\n+        String substring;\n         try {\n-            code = line.substring(0, 3);\n-            this._replyCode = Integer.parseInt(code);\n+            substring = line.substring(0, 3);\n+            this._replyCode = Integer.parseInt(substring);\n         }\n-        catch (final NumberFormatException e) {\n+        catch (final NumberFormatException ex) {\n             throw new MalformedServerReplyException(\"Could not parse response code.\\nServer Reply: \" + line);\n         }\n         this._replyLines.add(line);\n         if (length > 3) {\n-            final char sep = line.charAt(3);\n-            if (sep == '-') {\n+            final char char1 = line.charAt(3);\n+            if (char1 == '-') {\n                 while (true) {\n-                    line = this._controlInput_.readLine();\n-                    if (line == null) {\n+                    final String line2 = this._controlInput_.readLine();\n+                    if (line2 == null) {\n                         throw new FTPConnectionClosedException(\"Connection closed without indication.\");\n                     }\n-                    this._replyLines.add(line);\n+                    this._replyLines.add(line2);\n                     if (this.isStrictMultilineParsing()) {\n-                        if (this.strictCheck(line, code)) {\n+                        if (this.strictCheck(line2, substring)) {\n                             continue;\n                         }\n                         break;\n                     }\n                     else {\n-                        if (!this.lenientCheck(line)) {\n+                        if (!this.lenientCheck(line2)) {\n                             break;\n                         }\n                         continue;\n                     }\n                 }\n             }\n             else if (this.isStrictReplyParsing()) {\n                 if (length == 4) {\n                     throw new MalformedServerReplyException(\"Truncated server reply: '\" + line + \"'\");\n                 }\n-                if (sep != ' ') {\n+                if (char1 != ' ') {\n                     throw new MalformedServerReplyException(\"Invalid server reply: '\" + line + \"'\");\n                 }\n             }\n         }\n         else if (this.isStrictReplyParsing()) {\n             throw new MalformedServerReplyException(\"Truncated server reply: '\" + line + \"'\");\n         }\n-        if (reportReply) {\n+        if (b) {\n             this.fireReplyReceived(this._replyCode, this.getReplyString());\n         }\n         if (this._replyCode == 421) {\n             throw new FTPConnectionClosedException(\"FTP response 421 received.  Server closed connection.\");\n         }\n         return this._replyCode;\n     }\n     \n     protected void _connectAction_() throws IOException {\n         this._connectAction_(null);\n     }\n     \n-    protected void _connectAction_(final Reader socketIsReader) throws IOException {\n+    protected void _connectAction_(final Reader reader) throws IOException {\n         super._connectAction_();\n-        if (socketIsReader == null) {\n+        if (reader == null) {\n             this._controlInput_ = (BufferedReader)new CRLFLineReader((Reader)new InputStreamReader(this._input_, this.getControlEncoding()));\n         }\n         else {\n-            this._controlInput_ = (BufferedReader)new CRLFLineReader(socketIsReader);\n+            this._controlInput_ = (BufferedReader)new CRLFLineReader(reader);\n         }\n         this._controlOutput_ = new BufferedWriter(new OutputStreamWriter(this._output_, this.getControlEncoding()));\n         if (this.connectTimeout > 0) {\n-            final int original = this._socket_.getSoTimeout();\n+            final int soTimeout = this._socket_.getSoTimeout();\n             this._socket_.setSoTimeout(this.connectTimeout);\n             try {\n                 this.getReply();\n                 if (FTPReply.isPositivePreliminary(this._replyCode)) {\n                     this.getReply();\n                 }\n             }\n-            catch (final SocketTimeoutException e) {\n-                final IOException ioe = new IOException(\"Timed out waiting for initial connect reply\");\n-                ioe.initCause(e);\n-                throw ioe;\n+            catch (final SocketTimeoutException cause) {\n+                final IOException ex = new IOException(\"Timed out waiting for initial connect reply\");\n+                ex.initCause(cause);\n+                throw ex;\n             }\n             finally {\n-                this._socket_.setSoTimeout(original);\n+                this._socket_.setSoTimeout(soTimeout);\n             }\n         }\n         else {\n             this.getReply();\n             if (FTPReply.isPositivePreliminary(this._replyCode)) {\n                 this.getReply();\n             }\n         }\n     }\n     \n-    public void setControlEncoding(final String encoding) {\n-        this._controlEncoding = encoding;\n+    public void setControlEncoding(final String controlEncoding) {\n+        this._controlEncoding = controlEncoding;\n     }\n     \n     public String getControlEncoding() {\n         return this._controlEncoding;\n     }\n     \n     public void disconnect() throws IOException {\n         super.disconnect();\n         this._controlInput_ = null;\n         this._controlOutput_ = null;\n         this._newReplyString = false;\n         this._replyString = null;\n     }\n     \n-    public int sendCommand(final String command, final String args) throws IOException {\n+    public int sendCommand(final String s, final String s2) throws IOException {\n         if (this._controlOutput_ == null) {\n             throw new IOException(\"Connection is not open\");\n         }\n-        final String message = this.buildMessage(command, args);\n-        this.send(message);\n-        this.fireCommandSent(command, message);\n+        final String buildMessage = this.buildMessage(s, s2);\n+        this.send(buildMessage);\n+        this.fireCommandSent(s, buildMessage);\n         return this.getReply();\n     }\n     \n-    private String buildMessage(final String command, final String args) {\n-        final StringBuilder __commandBuffer = new StringBuilder();\n-        __commandBuffer.append(command);\n-        if (args != null) {\n-            __commandBuffer.append(' ');\n-            __commandBuffer.append(args);\n+    private String buildMessage(final String str, final String str2) {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(str);\n+        if (str2 != null) {\n+            sb.append(' ');\n+            sb.append(str2);\n         }\n-        __commandBuffer.append(\"\\r\\n\");\n-        return __commandBuffer.toString();\n+        sb.append(\"\\r\\n\");\n+        return sb.toString();\n     }\n     \n-    private void send(final String message) throws IOException, FTPConnectionClosedException, SocketException {\n+    private void send(final String str) throws IOException, FTPConnectionClosedException, SocketException {\n         try {\n-            this._controlOutput_.write(message);\n+            this._controlOutput_.write(str);\n             this._controlOutput_.flush();\n         }\n-        catch (final SocketException e) {\n+        catch (final SocketException ex) {\n             if (!this.isConnected()) {\n                 throw new FTPConnectionClosedException(\"Connection unexpectedly closed.\");\n             }\n-            throw e;\n+            throw ex;\n         }\n     }\n     \n     protected void __noop() throws IOException {\n-        final String msg = this.buildMessage(FTPCmd.NOOP.getCommand(), null);\n-        this.send(msg);\n+        this.send(this.buildMessage(FTPCmd.NOOP.getCommand(), (String)null));\n         this.__getReplyNoReport();\n     }\n     \n     @Deprecated\n-    public int sendCommand(final int command, final String args) throws IOException {\n-        return this.sendCommand(FTPCommand.getCommand(command), args);\n+    public int sendCommand(final int n, final String s) throws IOException {\n+        return this.sendCommand(FTPCommand.getCommand(n), s);\n     }\n     \n-    public int sendCommand(final FTPCmd command) throws IOException {\n-        return this.sendCommand(command, null);\n+    public int sendCommand(final FTPCmd ftpCmd) throws IOException {\n+        return this.sendCommand(ftpCmd, null);\n     }\n     \n-    public int sendCommand(final FTPCmd command, final String args) throws IOException {\n-        return this.sendCommand(command.getCommand(), args);\n+    public int sendCommand(final FTPCmd ftpCmd, final String s) throws IOException {\n+        return this.sendCommand(ftpCmd.getCommand(), s);\n     }\n     \n-    public int sendCommand(final String command) throws IOException {\n-        return this.sendCommand(command, null);\n+    public int sendCommand(final String s) throws IOException {\n+        return this.sendCommand(s, null);\n     }\n     \n-    public int sendCommand(final int command) throws IOException {\n-        return this.sendCommand(command, null);\n+    public int sendCommand(final int n) throws IOException {\n+        return this.sendCommand(n, null);\n     }\n     \n     public int getReplyCode() {\n         return this._replyCode;\n     }\n     \n     public int getReply() throws IOException {\n@@ -270,260 +269,260 @@\n         return this._replyLines.get(index);\n     }\n     \n     public String getReplyString() {\n         if (!this._newReplyString) {\n             return this._replyString;\n         }\n-        final StringBuilder buffer = new StringBuilder(256);\n-        for (final String line : this._replyLines) {\n-            buffer.append(line);\n-            buffer.append(\"\\r\\n\");\n+        final StringBuilder sb = new StringBuilder(256);\n+        final Iterator<String> iterator = this._replyLines.iterator();\n+        while (iterator.hasNext()) {\n+            sb.append(iterator.next());\n+            sb.append(\"\\r\\n\");\n         }\n         this._newReplyString = false;\n-        return this._replyString = buffer.toString();\n+        return this._replyString = sb.toString();\n     }\n     \n-    public int user(final String username) throws IOException {\n-        return this.sendCommand(FTPCmd.USER, username);\n+    public int user(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.USER, s);\n     }\n     \n-    public int pass(final String password) throws IOException {\n-        return this.sendCommand(FTPCmd.PASS, password);\n+    public int pass(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.PASS, s);\n     }\n     \n-    public int acct(final String account) throws IOException {\n-        return this.sendCommand(FTPCmd.ACCT, account);\n+    public int acct(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.ACCT, s);\n     }\n     \n     public int abor() throws IOException {\n         return this.sendCommand(FTPCmd.ABOR);\n     }\n     \n-    public int cwd(final String directory) throws IOException {\n-        return this.sendCommand(FTPCmd.CWD, directory);\n+    public int cwd(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.CWD, s);\n     }\n     \n     public int cdup() throws IOException {\n         return this.sendCommand(FTPCmd.CDUP);\n     }\n     \n     public int quit() throws IOException {\n         return this.sendCommand(FTPCmd.QUIT);\n     }\n     \n     public int rein() throws IOException {\n         return this.sendCommand(FTPCmd.REIN);\n     }\n     \n-    public int smnt(final String dir) throws IOException {\n-        return this.sendCommand(FTPCmd.SMNT, dir);\n+    public int smnt(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.SMNT, s);\n     }\n     \n-    public int port(final InetAddress host, final int port) throws IOException {\n-        final StringBuilder info = new StringBuilder(24);\n-        info.append(host.getHostAddress().replace('.', ','));\n-        int num = port >>> 8;\n-        info.append(',');\n-        info.append(num);\n-        info.append(',');\n-        num = (port & 0xFF);\n-        info.append(num);\n-        return this.sendCommand(FTPCmd.PORT, info.toString());\n-    }\n-    \n-    public int eprt(final InetAddress host, final int port) throws IOException {\n-        final StringBuilder info = new StringBuilder();\n-        String h = host.getHostAddress();\n-        final int num = h.indexOf(37);\n-        if (num > 0) {\n-            h = h.substring(0, num);\n-        }\n-        info.append(\"|\");\n-        if (host instanceof Inet4Address) {\n-            info.append(\"1\");\n-        }\n-        else if (host instanceof Inet6Address) {\n-            info.append(\"2\");\n-        }\n-        info.append(\"|\");\n-        info.append(h);\n-        info.append(\"|\");\n-        info.append(port);\n-        info.append(\"|\");\n-        return this.sendCommand(FTPCmd.EPRT, info.toString());\n+    public int port(final InetAddress inetAddress, final int n) throws IOException {\n+        final StringBuilder sb = new StringBuilder(24);\n+        sb.append(inetAddress.getHostAddress().replace('.', ','));\n+        final int i = n >>> 8;\n+        sb.append(',');\n+        sb.append(i);\n+        sb.append(',');\n+        sb.append(n & 0xFF);\n+        return this.sendCommand(FTPCmd.PORT, sb.toString());\n+    }\n+    \n+    public int eprt(final InetAddress inetAddress, final int i) throws IOException {\n+        final StringBuilder sb = new StringBuilder();\n+        String str = inetAddress.getHostAddress();\n+        final int index = str.indexOf(37);\n+        if (index > 0) {\n+            str = str.substring(0, index);\n+        }\n+        sb.append(\"|\");\n+        if (inetAddress instanceof Inet4Address) {\n+            sb.append(\"1\");\n+        }\n+        else if (inetAddress instanceof Inet6Address) {\n+            sb.append(\"2\");\n+        }\n+        sb.append(\"|\");\n+        sb.append(str);\n+        sb.append(\"|\");\n+        sb.append(i);\n+        sb.append(\"|\");\n+        return this.sendCommand(FTPCmd.EPRT, sb.toString());\n     }\n     \n     public int pasv() throws IOException {\n         return this.sendCommand(FTPCmd.PASV);\n     }\n     \n     public int epsv() throws IOException {\n         return this.sendCommand(FTPCmd.EPSV);\n     }\n     \n-    public int type(final int fileType, final int formatOrByteSize) throws IOException {\n-        final StringBuilder arg = new StringBuilder();\n-        arg.append(\"AEILNTCFRPSBC\".charAt(fileType));\n-        arg.append(' ');\n-        if (fileType == 3) {\n-            arg.append(formatOrByteSize);\n+    public int type(final int index, final int n) throws IOException {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"AEILNTCFRPSBC\".charAt(index));\n+        sb.append(' ');\n+        if (index == 3) {\n+            sb.append(n);\n         }\n         else {\n-            arg.append(\"AEILNTCFRPSBC\".charAt(formatOrByteSize));\n+            sb.append(\"AEILNTCFRPSBC\".charAt(n));\n         }\n-        return this.sendCommand(FTPCmd.TYPE, arg.toString());\n+        return this.sendCommand(FTPCmd.TYPE, sb.toString());\n     }\n     \n-    public int type(final int fileType) throws IOException {\n-        return this.sendCommand(FTPCmd.TYPE, \"AEILNTCFRPSBC\".substring(fileType, fileType + 1));\n+    public int type(final int beginIndex) throws IOException {\n+        return this.sendCommand(FTPCmd.TYPE, \"AEILNTCFRPSBC\".substring(beginIndex, beginIndex + 1));\n     }\n     \n-    public int stru(final int structure) throws IOException {\n-        return this.sendCommand(FTPCmd.STRU, \"AEILNTCFRPSBC\".substring(structure, structure + 1));\n+    public int stru(final int beginIndex) throws IOException {\n+        return this.sendCommand(FTPCmd.STRU, \"AEILNTCFRPSBC\".substring(beginIndex, beginIndex + 1));\n     }\n     \n-    public int mode(final int mode) throws IOException {\n-        return this.sendCommand(FTPCmd.MODE, \"AEILNTCFRPSBC\".substring(mode, mode + 1));\n+    public int mode(final int beginIndex) throws IOException {\n+        return this.sendCommand(FTPCmd.MODE, \"AEILNTCFRPSBC\".substring(beginIndex, beginIndex + 1));\n     }\n     \n-    public int retr(final String pathname) throws IOException {\n-        return this.sendCommand(FTPCmd.RETR, pathname);\n+    public int retr(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.RETR, s);\n     }\n     \n-    public int stor(final String pathname) throws IOException {\n-        return this.sendCommand(FTPCmd.STOR, pathname);\n+    public int stor(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.STOR, s);\n     }\n     \n     public int stou() throws IOException {\n         return this.sendCommand(FTPCmd.STOU);\n     }\n     \n-    public int stou(final String pathname) throws IOException {\n-        return this.sendCommand(FTPCmd.STOU, pathname);\n+    public int stou(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.STOU, s);\n     }\n     \n-    public int appe(final String pathname) throws IOException {\n-        return this.sendCommand(FTPCmd.APPE, pathname);\n+    public int appe(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.APPE, s);\n     }\n     \n-    public int allo(final int bytes) throws IOException {\n-        return this.sendCommand(FTPCmd.ALLO, Integer.toString(bytes));\n+    public int allo(final int i) throws IOException {\n+        return this.sendCommand(FTPCmd.ALLO, Integer.toString(i));\n     }\n     \n-    public int allo(final long bytes) throws IOException {\n-        return this.sendCommand(FTPCmd.ALLO, Long.toString(bytes));\n+    public int allo(final long i) throws IOException {\n+        return this.sendCommand(FTPCmd.ALLO, Long.toString(i));\n     }\n     \n     public int feat() throws IOException {\n         return this.sendCommand(FTPCmd.FEAT);\n     }\n     \n-    public int allo(final int bytes, final int recordSize) throws IOException {\n-        return this.sendCommand(FTPCmd.ALLO, Integer.toString(bytes) + \" R \" + Integer.toString(recordSize));\n+    public int allo(final int i, final int j) throws IOException {\n+        return this.sendCommand(FTPCmd.ALLO, Integer.toString(i) + \" R \" + Integer.toString(j));\n     }\n     \n-    public int allo(final long bytes, final int recordSize) throws IOException {\n-        return this.sendCommand(FTPCmd.ALLO, Long.toString(bytes) + \" R \" + Integer.toString(recordSize));\n+    public int allo(final long i, final int j) throws IOException {\n+        return this.sendCommand(FTPCmd.ALLO, Long.toString(i) + \" R \" + Integer.toString(j));\n     }\n     \n-    public int rest(final String marker) throws IOException {\n-        return this.sendCommand(FTPCmd.REST, marker);\n+    public int rest(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.REST, s);\n     }\n     \n-    public int mdtm(final String file) throws IOException {\n-        return this.sendCommand(FTPCmd.MDTM, file);\n+    public int mdtm(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.MDTM, s);\n     }\n     \n-    public int mfmt(final String pathname, final String timeval) throws IOException {\n-        return this.sendCommand(FTPCmd.MFMT, timeval + \" \" + pathname);\n+    public int mfmt(final String str, final String str2) throws IOException {\n+        return this.sendCommand(FTPCmd.MFMT, str2 + \" \" + str);\n     }\n     \n-    public int rnfr(final String pathname) throws IOException {\n-        return this.sendCommand(FTPCmd.RNFR, pathname);\n+    public int rnfr(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.RNFR, s);\n     }\n     \n-    public int rnto(final String pathname) throws IOException {\n-        return this.sendCommand(FTPCmd.RNTO, pathname);\n+    public int rnto(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.RNTO, s);\n     }\n     \n-    public int dele(final String pathname) throws IOException {\n-        return this.sendCommand(FTPCmd.DELE, pathname);\n+    public int dele(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.DELE, s);\n     }\n     \n-    public int rmd(final String pathname) throws IOException {\n-        return this.sendCommand(FTPCmd.RMD, pathname);\n+    public int rmd(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.RMD, s);\n     }\n     \n-    public int mkd(final String pathname) throws IOException {\n-        return this.sendCommand(FTPCmd.MKD, pathname);\n+    public int mkd(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.MKD, s);\n     }\n     \n     public int pwd() throws IOException {\n         return this.sendCommand(FTPCmd.PWD);\n     }\n     \n     public int list() throws IOException {\n         return this.sendCommand(FTPCmd.LIST);\n     }\n     \n-    public int list(final String pathname) throws IOException {\n-        return this.sendCommand(FTPCmd.LIST, pathname);\n+    public int list(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.LIST, s);\n     }\n     \n     public int mlsd() throws IOException {\n         return this.sendCommand(FTPCmd.MLSD);\n     }\n     \n-    public int mlsd(final String path) throws IOException {\n-        return this.sendCommand(FTPCmd.MLSD, path);\n+    public int mlsd(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.MLSD, s);\n     }\n     \n     public int mlst() throws IOException {\n         return this.sendCommand(FTPCmd.MLST);\n     }\n     \n-    public int mlst(final String path) throws IOException {\n-        return this.sendCommand(FTPCmd.MLST, path);\n+    public int mlst(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.MLST, s);\n     }\n     \n     public int nlst() throws IOException {\n         return this.sendCommand(FTPCmd.NLST);\n     }\n     \n-    public int nlst(final String pathname) throws IOException {\n-        return this.sendCommand(FTPCmd.NLST, pathname);\n+    public int nlst(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.NLST, s);\n     }\n     \n-    public int site(final String parameters) throws IOException {\n-        return this.sendCommand(FTPCmd.SITE, parameters);\n+    public int site(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.SITE, s);\n     }\n     \n-    public int size(final String parameters) throws IOException {\n-        return this.sendCommand(FTPCmd.SIZE, parameters);\n+    public int size(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.SIZE, s);\n     }\n     \n     public int syst() throws IOException {\n         return this.sendCommand(FTPCmd.SYST);\n     }\n     \n     public int stat() throws IOException {\n         return this.sendCommand(FTPCmd.STAT);\n     }\n     \n-    public int stat(final String pathname) throws IOException {\n-        return this.sendCommand(FTPCmd.STAT, pathname);\n+    public int stat(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.STAT, s);\n     }\n     \n     public int help() throws IOException {\n         return this.sendCommand(FTPCmd.HELP);\n     }\n     \n-    public int help(final String command) throws IOException {\n-        return this.sendCommand(FTPCmd.HELP, command);\n+    public int help(final String s) throws IOException {\n+        return this.sendCommand(FTPCmd.HELP, s);\n     }\n     \n     public int noop() throws IOException {\n         return this.sendCommand(FTPCmd.NOOP);\n     }\n     \n     public boolean isStrictMultilineParsing() {\n"}]}
