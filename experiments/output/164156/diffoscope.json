{"diffoscope-json-version": 1, "source1": "first/MultiReadOnlySeekableByteChannel.class", "source2": "second/MultiReadOnlySeekableByteChannel.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,237 +1,235 @@\n-  SHA-256 checksum a9ffffc8d0a61165499d9f57a965742558a611b53323f517a5b057ff7f717894\n+  SHA-256 checksum d268cd4fffc7a7c5ff6cf3cf26f769b6f2eef227041cdd54e7b0157990148275\n   Compiled from \"MultiReadOnlySeekableByteChannel.java\"\n public class org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel implements java.nio.channels.SeekableByteChannel\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #44                         // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n-  super_class: #55                        // java/lang/Object\n-  interfaces: 1, fields: 3, methods: 12, attributes: 1\n+  this_class: #39                         // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n+  super_class: #50                        // java/lang/Object\n+  interfaces: 1, fields: 3, methods: 12, attributes: 3\n Constant pool:\n-    #1 = Methodref          #55.#123      // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #124          // java/util/ArrayList\n-    #3 = String             #125          // channels must not be null\n-    #4 = Methodref          #126.#127     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-    #5 = Class              #128          // java/util/Collection\n-    #6 = Methodref          #2.#129       // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n-    #7 = Methodref          #130.#131     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-    #8 = Fieldref           #44.#132      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.channels:Ljava/util/List;\n-    #9 = Methodref          #44.#133      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.isOpen:()Z\n-   #10 = Class              #134          // java/nio/channels/ClosedChannelException\n-   #11 = Methodref          #10.#123      // java/nio/channels/ClosedChannelException.\"<init>\":()V\n-   #12 = Methodref          #135.#136     // java/nio/ByteBuffer.hasRemaining:()Z\n-   #13 = Fieldref           #44.#137      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.currentChannelIdx:I\n-   #14 = InterfaceMethodref #138.#139     // java/util/List.size:()I\n-   #15 = InterfaceMethodref #138.#140     // java/util/List.get:(I)Ljava/lang/Object;\n-   #16 = Class              #141          // java/nio/channels/SeekableByteChannel\n-   #17 = InterfaceMethodref #16.#142      // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n-   #18 = InterfaceMethodref #16.#143      // java/nio/channels/SeekableByteChannel.position:()J\n-   #19 = InterfaceMethodref #16.#144      // java/nio/channels/SeekableByteChannel.size:()J\n-   #20 = Fieldref           #44.#145      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.globalPosition:J\n-   #21 = InterfaceMethodref #138.#146     // java/util/List.iterator:()Ljava/util/Iterator;\n-   #22 = InterfaceMethodref #147.#148     // java/util/Iterator.hasNext:()Z\n-   #23 = InterfaceMethodref #147.#149     // java/util/Iterator.next:()Ljava/lang/Object;\n-   #24 = InterfaceMethodref #16.#150      // java/nio/channels/SeekableByteChannel.close:()V\n-   #25 = Class              #151          // java/io/IOException\n-   #26 = String             #152          // failed to close wrapped channel\n-   #27 = Methodref          #25.#153      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #28 = InterfaceMethodref #16.#133      // java/nio/channels/SeekableByteChannel.isOpen:()Z\n-   #29 = Methodref          #44.#154      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #30 = Class              #155          // java/nio/channels/NonWritableChannelException\n-   #31 = Methodref          #30.#123      // java/nio/channels/NonWritableChannelException.\"<init>\":()V\n-   #32 = Class              #156          // java/lang/IllegalArgumentException\n-   #33 = Class              #157          // java/lang/StringBuilder\n-   #34 = Methodref          #33.#123      // java/lang/StringBuilder.\"<init>\":()V\n-   #35 = String             #158          // Negative position:\n-   #36 = Methodref          #33.#159      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #37 = Methodref          #33.#160      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #38 = Methodref          #33.#161      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #39 = Methodref          #32.#162      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #40 = Long               -1l\n-   #42 = InterfaceMethodref #16.#154      // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #43 = Class              #113          // \"[Ljava/nio/channels/SeekableByteChannel;\"\n-   #44 = Class              #163          // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n-   #45 = Methodref          #164.#165     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-   #46 = Methodref          #44.#166      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n-   #47 = Methodref          #2.#123       // java/util/ArrayList.\"<init>\":()V\n-   #48 = String             #167          // files must not be null\n-   #49 = Class              #119          // \"[Ljava/io/File;\"\n-   #50 = Methodref          #168.#169     // java/io/File.toPath:()Ljava/nio/file/Path;\n-   #51 = Class              #170          // java/nio/file/OpenOption\n-   #52 = Fieldref           #171.#172     // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-   #53 = Methodref          #173.#174     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-   #54 = InterfaceMethodref #138.#175     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #55 = Class              #176          // java/lang/Object\n-   #56 = Utf8               channels\n-   #57 = Utf8               Ljava/util/List;\n-   #58 = Utf8               Signature\n-   #59 = Utf8               Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n-   #60 = Utf8               globalPosition\n-   #61 = Utf8               J\n-   #62 = Utf8               currentChannelIdx\n-   #63 = Utf8               I\n-   #64 = Utf8               <init>\n-   #65 = Utf8               (Ljava/util/List;)V\n-   #66 = Utf8               Code\n-   #67 = Utf8               LineNumberTable\n-   #68 = Utf8               LocalVariableTable\n-   #69 = Utf8               this\n-   #70 = Utf8               Lorg/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel;\n-   #71 = Utf8               LocalVariableTypeTable\n-   #72 = Utf8               (Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;)V\n-   #73 = Utf8               read\n-   #74 = Utf8               (Ljava/nio/ByteBuffer;)I\n-   #75 = Utf8               currentChannel\n-   #76 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n-   #77 = Utf8               newBytesRead\n-   #78 = Utf8               dst\n-   #79 = Utf8               Ljava/nio/ByteBuffer;\n-   #80 = Utf8               totalBytesRead\n-   #81 = Utf8               StackMapTable\n-   #82 = Class              #141          // java/nio/channels/SeekableByteChannel\n-   #83 = Utf8               Exceptions\n-   #84 = Utf8               close\n-   #85 = Utf8               ()V\n-   #86 = Utf8               ex\n-   #87 = Utf8               Ljava/io/IOException;\n-   #88 = Utf8               ch\n-   #89 = Utf8               first\n-   #90 = Class              #151          // java/io/IOException\n-   #91 = Class              #177          // java/util/Iterator\n-   #92 = Class              #163          // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n-   #93 = Utf8               isOpen\n-   #94 = Utf8               ()Z\n-   #95 = Utf8               position\n-   #96 = Utf8               ()J\n-   #97 = Utf8               (JJ)Ljava/nio/channels/SeekableByteChannel;\n-   #98 = Utf8               i\n-   #99 = Utf8               channelNumber\n-  #100 = Utf8               relativeOffset\n-  #101 = Utf8               size\n-  #102 = Utf8               acc\n-  #103 = Utf8               truncate\n-  #104 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-  #105 = Utf8               write\n-  #106 = Utf8               src\n-  #107 = Utf8               newChannelPos\n-  #108 = Utf8               tmp\n-  #109 = Utf8               newPosition\n-  #110 = Utf8               pos\n-  #111 = Utf8               forSeekableByteChannels\n-  #112 = Utf8               ([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n-  #113 = Utf8               [Ljava/nio/channels/SeekableByteChannel;\n-  #114 = Utf8               forFiles\n-  #115 = Utf8               ([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-  #116 = Utf8               f\n-  #117 = Utf8               Ljava/io/File;\n-  #118 = Utf8               files\n-  #119 = Utf8               [Ljava/io/File;\n-  #120 = Class              #178          // java/util/List\n-  #121 = Utf8               SourceFile\n-  #122 = Utf8               MultiReadOnlySeekableByteChannel.java\n-  #123 = NameAndType        #64:#85       // \"<init>\":()V\n-  #124 = Utf8               java/util/ArrayList\n-  #125 = Utf8               channels must not be null\n-  #126 = Class              #179          // java/util/Objects\n-  #127 = NameAndType        #180:#181     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #128 = Utf8               java/util/Collection\n-  #129 = NameAndType        #64:#182      // \"<init>\":(Ljava/util/Collection;)V\n-  #130 = Class              #183          // java/util/Collections\n-  #131 = NameAndType        #184:#185     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-  #132 = NameAndType        #56:#57       // channels:Ljava/util/List;\n-  #133 = NameAndType        #93:#94       // isOpen:()Z\n-  #134 = Utf8               java/nio/channels/ClosedChannelException\n-  #135 = Class              #186          // java/nio/ByteBuffer\n-  #136 = NameAndType        #187:#94      // hasRemaining:()Z\n-  #137 = NameAndType        #62:#63       // currentChannelIdx:I\n-  #138 = Class              #178          // java/util/List\n-  #139 = NameAndType        #101:#188     // size:()I\n-  #140 = NameAndType        #189:#190     // get:(I)Ljava/lang/Object;\n-  #141 = Utf8               java/nio/channels/SeekableByteChannel\n-  #142 = NameAndType        #73:#74       // read:(Ljava/nio/ByteBuffer;)I\n-  #143 = NameAndType        #95:#96       // position:()J\n-  #144 = NameAndType        #101:#96      // size:()J\n-  #145 = NameAndType        #60:#61       // globalPosition:J\n-  #146 = NameAndType        #191:#192     // iterator:()Ljava/util/Iterator;\n-  #147 = Class              #177          // java/util/Iterator\n-  #148 = NameAndType        #193:#94      // hasNext:()Z\n-  #149 = NameAndType        #194:#195     // next:()Ljava/lang/Object;\n-  #150 = NameAndType        #84:#85       // close:()V\n-  #151 = Utf8               java/io/IOException\n-  #152 = Utf8               failed to close wrapped channel\n-  #153 = NameAndType        #64:#196      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #154 = NameAndType        #95:#104      // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #155 = Utf8               java/nio/channels/NonWritableChannelException\n-  #156 = Utf8               java/lang/IllegalArgumentException\n-  #157 = Utf8               java/lang/StringBuilder\n-  #158 = Utf8               Negative position:\n-  #159 = NameAndType        #197:#198     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #160 = NameAndType        #197:#199     // append:(J)Ljava/lang/StringBuilder;\n-  #161 = NameAndType        #200:#201     // toString:()Ljava/lang/String;\n-  #162 = NameAndType        #64:#202      // \"<init>\":(Ljava/lang/String;)V\n-  #163 = Utf8               org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n-  #164 = Class              #203          // java/util/Arrays\n-  #165 = NameAndType        #204:#205     // asList:([Ljava/lang/Object;)Ljava/util/List;\n-  #166 = NameAndType        #64:#65       // \"<init>\":(Ljava/util/List;)V\n-  #167 = Utf8               files must not be null\n-  #168 = Class              #206          // java/io/File\n-  #169 = NameAndType        #207:#208     // toPath:()Ljava/nio/file/Path;\n-  #170 = Utf8               java/nio/file/OpenOption\n-  #171 = Class              #209          // java/nio/file/StandardOpenOption\n-  #172 = NameAndType        #210:#211     // READ:Ljava/nio/file/StandardOpenOption;\n-  #173 = Class              #212          // java/nio/file/Files\n-  #174 = NameAndType        #213:#214     // newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-  #175 = NameAndType        #215:#216     // add:(Ljava/lang/Object;)Z\n-  #176 = Utf8               java/lang/Object\n-  #177 = Utf8               java/util/Iterator\n-  #178 = Utf8               java/util/List\n-  #179 = Utf8               java/util/Objects\n-  #180 = Utf8               requireNonNull\n-  #181 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #182 = Utf8               (Ljava/util/Collection;)V\n-  #183 = Utf8               java/util/Collections\n-  #184 = Utf8               unmodifiableList\n-  #185 = Utf8               (Ljava/util/List;)Ljava/util/List;\n-  #186 = Utf8               java/nio/ByteBuffer\n-  #187 = Utf8               hasRemaining\n-  #188 = Utf8               ()I\n-  #189 = Utf8               get\n-  #190 = Utf8               (I)Ljava/lang/Object;\n-  #191 = Utf8               iterator\n-  #192 = Utf8               ()Ljava/util/Iterator;\n-  #193 = Utf8               hasNext\n-  #194 = Utf8               next\n-  #195 = Utf8               ()Ljava/lang/Object;\n-  #196 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #197 = Utf8               append\n-  #198 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #199 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #200 = Utf8               toString\n-  #201 = Utf8               ()Ljava/lang/String;\n-  #202 = Utf8               (Ljava/lang/String;)V\n-  #203 = Utf8               java/util/Arrays\n-  #204 = Utf8               asList\n-  #205 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n-  #206 = Utf8               java/io/File\n-  #207 = Utf8               toPath\n-  #208 = Utf8               ()Ljava/nio/file/Path;\n-  #209 = Utf8               java/nio/file/StandardOpenOption\n-  #210 = Utf8               READ\n-  #211 = Utf8               Ljava/nio/file/StandardOpenOption;\n-  #212 = Utf8               java/nio/file/Files\n-  #213 = Utf8               newByteChannel\n-  #214 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-  #215 = Utf8               add\n-  #216 = Utf8               (Ljava/lang/Object;)Z\n+    #1 = Methodref          #50.#115      // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #116          // java/util/ArrayList\n+    #3 = String             #117          // channels must not be null\n+    #4 = Methodref          #118.#119     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+    #5 = Class              #120          // java/util/Collection\n+    #6 = Methodref          #2.#121       // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n+    #7 = Methodref          #122.#123     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+    #8 = Fieldref           #39.#124      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.channels:Ljava/util/List;\n+    #9 = Methodref          #39.#125      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.isOpen:()Z\n+   #10 = Class              #126          // java/nio/channels/ClosedChannelException\n+   #11 = Methodref          #10.#115      // java/nio/channels/ClosedChannelException.\"<init>\":()V\n+   #12 = Methodref          #127.#128     // java/nio/ByteBuffer.hasRemaining:()Z\n+   #13 = Fieldref           #39.#129      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.currentChannelIdx:I\n+   #14 = InterfaceMethodref #112.#130     // java/util/List.size:()I\n+   #15 = InterfaceMethodref #112.#131     // java/util/List.get:(I)Ljava/lang/Object;\n+   #16 = Class              #132          // java/nio/channels/SeekableByteChannel\n+   #17 = InterfaceMethodref #16.#133      // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+   #18 = InterfaceMethodref #16.#134      // java/nio/channels/SeekableByteChannel.position:()J\n+   #19 = InterfaceMethodref #16.#135      // java/nio/channels/SeekableByteChannel.size:()J\n+   #20 = Fieldref           #39.#136      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.globalPosition:J\n+   #21 = InterfaceMethodref #112.#137     // java/util/List.iterator:()Ljava/util/Iterator;\n+   #22 = InterfaceMethodref #84.#138      // java/util/Iterator.hasNext:()Z\n+   #23 = InterfaceMethodref #84.#139      // java/util/Iterator.next:()Ljava/lang/Object;\n+   #24 = InterfaceMethodref #16.#140      // java/nio/channels/SeekableByteChannel.close:()V\n+   #25 = Class              #141          // java/io/IOException\n+   #26 = String             #142          // failed to close wrapped channel\n+   #27 = Methodref          #25.#143      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #28 = InterfaceMethodref #16.#125      // java/nio/channels/SeekableByteChannel.isOpen:()Z\n+   #29 = Methodref          #39.#144      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #30 = Class              #145          // java/nio/channels/NonWritableChannelException\n+   #31 = Methodref          #30.#115      // java/nio/channels/NonWritableChannelException.\"<init>\":()V\n+   #32 = Class              #146          // java/lang/IllegalArgumentException\n+   #33 = InvokeDynamic      #0:#150       // #0:makeConcatWithConstants:(J)Ljava/lang/String;\n+   #34 = Methodref          #32.#151      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #35 = Long               -1l\n+   #37 = InterfaceMethodref #16.#144      // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #38 = Class              #105          // \"[Ljava/nio/channels/SeekableByteChannel;\"\n+   #39 = Class              #152          // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n+   #40 = Methodref          #153.#154     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+   #41 = Methodref          #39.#155      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n+   #42 = Methodref          #2.#115       // java/util/ArrayList.\"<init>\":()V\n+   #43 = String             #156          // files must not be null\n+   #44 = Class              #111          // \"[Ljava/io/File;\"\n+   #45 = Methodref          #157.#158     // java/io/File.toPath:()Ljava/nio/file/Path;\n+   #46 = Class              #159          // java/nio/file/OpenOption\n+   #47 = Fieldref           #160.#161     // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+   #48 = Methodref          #162.#163     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+   #49 = InterfaceMethodref #112.#164     // java/util/List.add:(Ljava/lang/Object;)Z\n+   #50 = Class              #165          // java/lang/Object\n+   #51 = Utf8               channels\n+   #52 = Utf8               Ljava/util/List;\n+   #53 = Utf8               Signature\n+   #54 = Utf8               Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n+   #55 = Utf8               globalPosition\n+   #56 = Utf8               J\n+   #57 = Utf8               currentChannelIdx\n+   #58 = Utf8               I\n+   #59 = Utf8               <init>\n+   #60 = Utf8               (Ljava/util/List;)V\n+   #61 = Utf8               Code\n+   #62 = Utf8               LineNumberTable\n+   #63 = Utf8               LocalVariableTable\n+   #64 = Utf8               this\n+   #65 = Utf8               Lorg/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel;\n+   #66 = Utf8               LocalVariableTypeTable\n+   #67 = Utf8               (Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;)V\n+   #68 = Utf8               read\n+   #69 = Utf8               (Ljava/nio/ByteBuffer;)I\n+   #70 = Utf8               currentChannel\n+   #71 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n+   #72 = Utf8               newBytesRead\n+   #73 = Utf8               dst\n+   #74 = Utf8               Ljava/nio/ByteBuffer;\n+   #75 = Utf8               totalBytesRead\n+   #76 = Utf8               StackMapTable\n+   #77 = Utf8               Exceptions\n+   #78 = Utf8               close\n+   #79 = Utf8               ()V\n+   #80 = Utf8               ex\n+   #81 = Utf8               Ljava/io/IOException;\n+   #82 = Utf8               ch\n+   #83 = Utf8               first\n+   #84 = Class              #166          // java/util/Iterator\n+   #85 = Utf8               isOpen\n+   #86 = Utf8               ()Z\n+   #87 = Utf8               position\n+   #88 = Utf8               ()J\n+   #89 = Utf8               (JJ)Ljava/nio/channels/SeekableByteChannel;\n+   #90 = Utf8               i\n+   #91 = Utf8               channelNumber\n+   #92 = Utf8               relativeOffset\n+   #93 = Utf8               size\n+   #94 = Utf8               acc\n+   #95 = Utf8               truncate\n+   #96 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+   #97 = Utf8               write\n+   #98 = Utf8               src\n+   #99 = Utf8               newChannelPos\n+  #100 = Utf8               tmp\n+  #101 = Utf8               newPosition\n+  #102 = Utf8               pos\n+  #103 = Utf8               forSeekableByteChannels\n+  #104 = Utf8               ([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n+  #105 = Utf8               [Ljava/nio/channels/SeekableByteChannel;\n+  #106 = Utf8               forFiles\n+  #107 = Utf8               ([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+  #108 = Utf8               f\n+  #109 = Utf8               Ljava/io/File;\n+  #110 = Utf8               files\n+  #111 = Utf8               [Ljava/io/File;\n+  #112 = Class              #167          // java/util/List\n+  #113 = Utf8               SourceFile\n+  #114 = Utf8               MultiReadOnlySeekableByteChannel.java\n+  #115 = NameAndType        #59:#79       // \"<init>\":()V\n+  #116 = Utf8               java/util/ArrayList\n+  #117 = Utf8               channels must not be null\n+  #118 = Class              #168          // java/util/Objects\n+  #119 = NameAndType        #169:#170     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #120 = Utf8               java/util/Collection\n+  #121 = NameAndType        #59:#171      // \"<init>\":(Ljava/util/Collection;)V\n+  #122 = Class              #172          // java/util/Collections\n+  #123 = NameAndType        #173:#174     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+  #124 = NameAndType        #51:#52       // channels:Ljava/util/List;\n+  #125 = NameAndType        #85:#86       // isOpen:()Z\n+  #126 = Utf8               java/nio/channels/ClosedChannelException\n+  #127 = Class              #175          // java/nio/ByteBuffer\n+  #128 = NameAndType        #176:#86      // hasRemaining:()Z\n+  #129 = NameAndType        #57:#58       // currentChannelIdx:I\n+  #130 = NameAndType        #93:#177      // size:()I\n+  #131 = NameAndType        #178:#179     // get:(I)Ljava/lang/Object;\n+  #132 = Utf8               java/nio/channels/SeekableByteChannel\n+  #133 = NameAndType        #68:#69       // read:(Ljava/nio/ByteBuffer;)I\n+  #134 = NameAndType        #87:#88       // position:()J\n+  #135 = NameAndType        #93:#88       // size:()J\n+  #136 = NameAndType        #55:#56       // globalPosition:J\n+  #137 = NameAndType        #180:#181     // iterator:()Ljava/util/Iterator;\n+  #138 = NameAndType        #182:#86      // hasNext:()Z\n+  #139 = NameAndType        #183:#184     // next:()Ljava/lang/Object;\n+  #140 = NameAndType        #78:#79       // close:()V\n+  #141 = Utf8               java/io/IOException\n+  #142 = Utf8               failed to close wrapped channel\n+  #143 = NameAndType        #59:#185      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #144 = NameAndType        #87:#96       // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #145 = Utf8               java/nio/channels/NonWritableChannelException\n+  #146 = Utf8               java/lang/IllegalArgumentException\n+  #147 = Utf8               BootstrapMethods\n+  #148 = MethodHandle       6:#186        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #149 = String             #187          // Negative position: \\u0001\n+  #150 = NameAndType        #188:#189     // makeConcatWithConstants:(J)Ljava/lang/String;\n+  #151 = NameAndType        #59:#190      // \"<init>\":(Ljava/lang/String;)V\n+  #152 = Utf8               org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n+  #153 = Class              #191          // java/util/Arrays\n+  #154 = NameAndType        #192:#193     // asList:([Ljava/lang/Object;)Ljava/util/List;\n+  #155 = NameAndType        #59:#60       // \"<init>\":(Ljava/util/List;)V\n+  #156 = Utf8               files must not be null\n+  #157 = Class              #194          // java/io/File\n+  #158 = NameAndType        #195:#196     // toPath:()Ljava/nio/file/Path;\n+  #159 = Utf8               java/nio/file/OpenOption\n+  #160 = Class              #197          // java/nio/file/StandardOpenOption\n+  #161 = NameAndType        #198:#199     // READ:Ljava/nio/file/StandardOpenOption;\n+  #162 = Class              #200          // java/nio/file/Files\n+  #163 = NameAndType        #201:#202     // newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+  #164 = NameAndType        #203:#204     // add:(Ljava/lang/Object;)Z\n+  #165 = Utf8               java/lang/Object\n+  #166 = Utf8               java/util/Iterator\n+  #167 = Utf8               java/util/List\n+  #168 = Utf8               java/util/Objects\n+  #169 = Utf8               requireNonNull\n+  #170 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #171 = Utf8               (Ljava/util/Collection;)V\n+  #172 = Utf8               java/util/Collections\n+  #173 = Utf8               unmodifiableList\n+  #174 = Utf8               (Ljava/util/List;)Ljava/util/List;\n+  #175 = Utf8               java/nio/ByteBuffer\n+  #176 = Utf8               hasRemaining\n+  #177 = Utf8               ()I\n+  #178 = Utf8               get\n+  #179 = Utf8               (I)Ljava/lang/Object;\n+  #180 = Utf8               iterator\n+  #181 = Utf8               ()Ljava/util/Iterator;\n+  #182 = Utf8               hasNext\n+  #183 = Utf8               next\n+  #184 = Utf8               ()Ljava/lang/Object;\n+  #185 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #186 = Methodref          #205.#206     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #187 = Utf8               Negative position: \\u0001\n+  #188 = Utf8               makeConcatWithConstants\n+  #189 = Utf8               (J)Ljava/lang/String;\n+  #190 = Utf8               (Ljava/lang/String;)V\n+  #191 = Utf8               java/util/Arrays\n+  #192 = Utf8               asList\n+  #193 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n+  #194 = Utf8               java/io/File\n+  #195 = Utf8               toPath\n+  #196 = Utf8               ()Ljava/nio/file/Path;\n+  #197 = Utf8               java/nio/file/StandardOpenOption\n+  #198 = Utf8               READ\n+  #199 = Utf8               Ljava/nio/file/StandardOpenOption;\n+  #200 = Utf8               java/nio/file/Files\n+  #201 = Utf8               newByteChannel\n+  #202 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+  #203 = Utf8               add\n+  #204 = Utf8               (Ljava/lang/Object;)Z\n+  #205 = Class              #207          // java/lang/invoke/StringConcatFactory\n+  #206 = NameAndType        #188:#211     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #207 = Utf8               java/lang/invoke/StringConcatFactory\n+  #208 = Class              #213          // java/lang/invoke/MethodHandles$Lookup\n+  #209 = Utf8               Lookup\n+  #210 = Utf8               InnerClasses\n+  #211 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #212 = Class              #214          // java/lang/invoke/MethodHandles\n+  #213 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #214 = Utf8               java/lang/invoke/MethodHandles\n {\n   private final java.util.List<java.nio.channels.SeekableByteChannel> channels;\n     descriptor: Ljava/util/List;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #59                          // Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n+    Signature: #54                          // Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n \n   private long globalPosition;\n     descriptor: J\n     flags: (0x0002) ACC_PRIVATE\n \n   private int currentChannelIdx;\n     descriptor: I\n@@ -264,15 +262,15 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      28     0  this   Lorg/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel;\n             0      28     1 channels   Ljava/util/List;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      28     1 channels   Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n-    Signature: #72                          // (Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;)V\n+    Signature: #67                          // (Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;)V\n \n   public synchronized int read(java.nio.ByteBuffer) throws java.io.IOException;\n     descriptor: (Ljava/nio/ByteBuffer;)I\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n     Code:\n       stack=5, locals=5, args_size=2\n          0: aload_0\n@@ -670,131 +668,125 @@\n             0       8     0  this   Lorg/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel;\n             0       8     1   src   Ljava/nio/ByteBuffer;\n \n   public synchronized java.nio.channels.SeekableByteChannel position(long) throws java.io.IOException;\n     descriptor: (J)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n     Code:\n-      stack=5, locals=13, args_size=2\n+      stack=4, locals=13, args_size=2\n          0: lload_1\n          1: lconst_0\n          2: lcmp\n-         3: ifge          33\n+         3: ifge          20\n          6: new           #32                 // class java/lang/IllegalArgumentException\n          9: dup\n-        10: new           #33                 // class java/lang/StringBuilder\n-        13: dup\n-        14: invokespecial #34                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        17: ldc           #35                 // String Negative position:\n-        19: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        22: lload_1\n-        23: invokevirtual #37                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        26: invokevirtual #38                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        29: invokespecial #39                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-        32: athrow\n-        33: aload_0\n-        34: invokevirtual #9                  // Method isOpen:()Z\n-        37: ifne          48\n-        40: new           #10                 // class java/nio/channels/ClosedChannelException\n-        43: dup\n-        44: invokespecial #11                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n-        47: athrow\n-        48: aload_0\n-        49: lload_1\n-        50: putfield      #20                 // Field globalPosition:J\n-        53: lload_1\n-        54: lstore_3\n-        55: iconst_0\n-        56: istore        5\n-        58: iload         5\n-        60: aload_0\n-        61: getfield      #8                  // Field channels:Ljava/util/List;\n-        64: invokeinterface #14,  1           // InterfaceMethod java/util/List.size:()I\n-        69: if_icmpge     163\n-        72: aload_0\n-        73: getfield      #8                  // Field channels:Ljava/util/List;\n-        76: iload         5\n-        78: invokeinterface #15,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n-        83: checkcast     #16                 // class java/nio/channels/SeekableByteChannel\n-        86: astore        6\n-        88: aload         6\n-        90: invokeinterface #19,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n-        95: lstore        7\n-        97: lload_3\n-        98: ldc2_w        #40                 // long -1l\n+        10: lload_1\n+        11: invokedynamic #33,  0             // InvokeDynamic #0:makeConcatWithConstants:(J)Ljava/lang/String;\n+        16: invokespecial #34                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        19: athrow\n+        20: aload_0\n+        21: invokevirtual #9                  // Method isOpen:()Z\n+        24: ifne          35\n+        27: new           #10                 // class java/nio/channels/ClosedChannelException\n+        30: dup\n+        31: invokespecial #11                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n+        34: athrow\n+        35: aload_0\n+        36: lload_1\n+        37: putfield      #20                 // Field globalPosition:J\n+        40: lload_1\n+        41: lstore_3\n+        42: iconst_0\n+        43: istore        5\n+        45: iload         5\n+        47: aload_0\n+        48: getfield      #8                  // Field channels:Ljava/util/List;\n+        51: invokeinterface #14,  1           // InterfaceMethod java/util/List.size:()I\n+        56: if_icmpge     150\n+        59: aload_0\n+        60: getfield      #8                  // Field channels:Ljava/util/List;\n+        63: iload         5\n+        65: invokeinterface #15,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n+        70: checkcast     #16                 // class java/nio/channels/SeekableByteChannel\n+        73: astore        6\n+        75: aload         6\n+        77: invokeinterface #19,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+        82: lstore        7\n+        84: lload_3\n+        85: ldc2_w        #35                 // long -1l\n+        88: lcmp\n+        89: ifne          98\n+        92: lconst_0\n+        93: lstore        9\n+        95: goto          134\n+        98: lload_3\n+        99: lload         7\n        101: lcmp\n-       102: ifne          111\n-       105: lconst_0\n-       106: lstore        9\n-       108: goto          147\n+       102: ifgt          125\n+       105: aload_0\n+       106: iload         5\n+       108: putfield      #13                 // Field currentChannelIdx:I\n        111: lload_3\n-       112: lload         7\n-       114: lcmp\n-       115: ifgt          138\n-       118: aload_0\n-       119: iload         5\n-       121: putfield      #13                 // Field currentChannelIdx:I\n-       124: lload_3\n-       125: lstore        11\n-       127: ldc2_w        #40                 // long -1l\n-       130: lstore_3\n-       131: lload         11\n-       133: lstore        9\n-       135: goto          147\n-       138: lload_3\n-       139: lload         7\n-       141: lsub\n-       142: lstore_3\n-       143: lload         7\n-       145: lstore        9\n-       147: aload         6\n-       149: lload         9\n-       151: invokeinterface #42,  3           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-       156: pop\n-       157: iinc          5, 1\n-       160: goto          58\n-       163: aload_0\n-       164: areturn\n+       112: lstore        11\n+       114: ldc2_w        #35                 // long -1l\n+       117: lstore_3\n+       118: lload         11\n+       120: lstore        9\n+       122: goto          134\n+       125: lload_3\n+       126: lload         7\n+       128: lsub\n+       129: lstore_3\n+       130: lload         7\n+       132: lstore        9\n+       134: aload         6\n+       136: lload         9\n+       138: invokeinterface #37,  3           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+       143: pop\n+       144: iinc          5, 1\n+       147: goto          45\n+       150: aload_0\n+       151: areturn\n       LineNumberTable:\n         line 182: 0\n         line 183: 6\n-        line 185: 33\n-        line 186: 40\n-        line 189: 48\n-        line 191: 53\n-        line 193: 55\n-        line 194: 72\n-        line 195: 88\n-        line 198: 97\n-        line 201: 105\n-        line 202: 111\n-        line 204: 118\n-        line 205: 124\n-        line 206: 127\n-        line 207: 131\n-        line 208: 135\n-        line 212: 138\n-        line 213: 143\n-        line 216: 147\n-        line 193: 157\n-        line 218: 163\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-          108       3     9 newChannelPos   J\n-          127       8    11   tmp   J\n-          135       3     9 newChannelPos   J\n-           88      69     6 currentChannel   Ljava/nio/channels/SeekableByteChannel;\n-           97      60     7  size   J\n-          147      10     9 newChannelPos   J\n-           58     105     5     i   I\n-            0     165     0  this   Lorg/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel;\n-            0     165     1 newPosition   J\n-           55     110     3   pos   J\n+        line 185: 20\n+        line 186: 27\n+        line 189: 35\n+        line 191: 40\n+        line 193: 42\n+        line 194: 59\n+        line 195: 75\n+        line 198: 84\n+        line 201: 92\n+        line 202: 98\n+        line 204: 105\n+        line 205: 111\n+        line 206: 114\n+        line 207: 118\n+        line 208: 122\n+        line 212: 125\n+        line 213: 130\n+        line 216: 134\n+        line 193: 144\n+        line 218: 150\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+           95       3     9 newChannelPos   J\n+          114       8    11   tmp   J\n+          122       3     9 newChannelPos   J\n+           75      69     6 currentChannel   Ljava/nio/channels/SeekableByteChannel;\n+           84      60     7  size   J\n+          134      10     9 newChannelPos   J\n+           45     105     5     i   I\n+            0     152     0  this   Lorg/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel;\n+            0     152     1 newPosition   J\n+           42     110     3   pos   J\n       StackMapTable: number_of_entries = 7\n-        frame_type = 33 /* same */\n+        frame_type = 20 /* same */\n         frame_type = 14 /* same */\n         frame_type = 253 /* append */\n           offset_delta = 9\n           locals = [ long, int ]\n         frame_type = 253 /* append */\n           offset_delta = 52\n           locals = [ class java/nio/channels/SeekableByteChannel, long ]\n@@ -813,27 +805,27 @@\n     descriptor: ([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0089) ACC_PUBLIC, ACC_STATIC, ACC_VARARGS\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: ldc           #3                  // String channels must not be null\n          3: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-         6: checkcast     #43                 // class \"[Ljava/nio/channels/SeekableByteChannel;\"\n+         6: checkcast     #38                 // class \"[Ljava/nio/channels/SeekableByteChannel;\"\n          9: arraylength\n         10: iconst_1\n         11: if_icmpne     18\n         14: aload_0\n         15: iconst_0\n         16: aaload\n         17: areturn\n-        18: new           #44                 // class org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n+        18: new           #39                 // class org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n         21: dup\n         22: aload_0\n-        23: invokestatic  #45                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-        26: invokespecial #46                 // Method \"<init>\":(Ljava/util/List;)V\n+        23: invokestatic  #40                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+        26: invokespecial #41                 // Method \"<init>\":(Ljava/util/List;)V\n         29: areturn\n       LineNumberTable:\n         line 229: 0\n         line 230: 14\n         line 232: 18\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -844,20 +836,20 @@\n   public static java.nio.channels.SeekableByteChannel forFiles(java.io.File...) throws java.io.IOException;\n     descriptor: ([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0089) ACC_PUBLIC, ACC_STATIC, ACC_VARARGS\n     Code:\n       stack=6, locals=6, args_size=1\n          0: new           #2                  // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #47                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #42                 // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n-         9: ldc           #48                 // String files must not be null\n+         9: ldc           #43                 // String files must not be null\n         11: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-        14: checkcast     #49                 // class \"[Ljava/io/File;\"\n+        14: checkcast     #44                 // class \"[Ljava/io/File;\"\n         17: astore_2\n         18: aload_2\n         19: arraylength\n         20: istore_3\n         21: iconst_0\n         22: istore        4\n         24: iload         4\n@@ -865,39 +857,39 @@\n         27: if_icmpge     67\n         30: aload_2\n         31: iload         4\n         33: aaload\n         34: astore        5\n         36: aload_1\n         37: aload         5\n-        39: invokevirtual #50                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+        39: invokevirtual #45                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n         42: iconst_1\n-        43: anewarray     #51                 // class java/nio/file/OpenOption\n+        43: anewarray     #46                 // class java/nio/file/OpenOption\n         46: dup\n         47: iconst_0\n-        48: getstatic     #52                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+        48: getstatic     #47                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n         51: aastore\n-        52: invokestatic  #53                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-        55: invokeinterface #54,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        52: invokestatic  #48                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+        55: invokeinterface #49,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n         60: pop\n         61: iinc          4, 1\n         64: goto          24\n         67: aload_1\n         68: invokeinterface #14,  1           // InterfaceMethod java/util/List.size:()I\n         73: iconst_1\n         74: if_icmpne     88\n         77: aload_1\n         78: iconst_0\n         79: invokeinterface #15,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n         84: checkcast     #16                 // class java/nio/channels/SeekableByteChannel\n         87: areturn\n-        88: new           #44                 // class org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n+        88: new           #39                 // class org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n         91: dup\n         92: aload_1\n-        93: invokespecial #46                 // Method \"<init>\":(Ljava/util/List;)V\n+        93: invokespecial #41                 // Method \"<init>\":(Ljava/util/List;)V\n         96: areturn\n       LineNumberTable:\n         line 244: 0\n         line 245: 8\n         line 246: 36\n         line 245: 61\n         line 248: 67\n@@ -919,7 +911,13 @@\n         frame_type = 248 /* chop */\n           offset_delta = 42\n         frame_type = 20 /* same */\n     Exceptions:\n       throws java.io.IOException\n }\n SourceFile: \"MultiReadOnlySeekableByteChannel.java\"\n+InnerClasses:\n+  public static final #209= #208 of #212; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+BootstrapMethods:\n+  0: #148 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #149 Negative position: \\u0001\n"}]}
