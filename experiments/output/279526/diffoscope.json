{"diffoscope-json-version": 1, "source1": "first/ByteCodeForm.class", "source2": "second/ByteCodeForm.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,56 +15,56 @@\n     protected static final Map<String, ByteCodeForm> byteCodesByName;\n     private final int opcode;\n     private final String name;\n     private final int[] rewrite;\n     private int firstOperandIndex;\n     private int operandLength;\n     \n-    public static ByteCodeForm get(final int opcode) {\n-        return ByteCodeForm.byteCodeArray[opcode];\n+    public static ByteCodeForm get(final int n) {\n+        return ByteCodeForm.byteCodeArray[n];\n     }\n     \n-    public ByteCodeForm(final int opcode, final String name) {\n-        this(opcode, name, new int[] { opcode });\n+    public ByteCodeForm(final int n, final String s) {\n+        this(n, s, new int[] { n });\n     }\n     \n     public ByteCodeForm(final int opcode, final String name, final int[] rewrite) {\n         this.opcode = opcode;\n         this.name = name;\n         this.rewrite = rewrite;\n         this.calculateOperandPosition();\n     }\n     \n     protected void calculateOperandPosition() {\n         this.firstOperandIndex = -1;\n         this.operandLength = -1;\n-        int iterationIndex = 0;\n-        while (iterationIndex < this.rewrite.length) {\n-            if (this.rewrite[iterationIndex] < 0) {\n-                this.firstOperandIndex = iterationIndex;\n-                iterationIndex = this.rewrite.length;\n+        int i = 0;\n+        while (i < this.rewrite.length) {\n+            if (this.rewrite[i] < 0) {\n+                this.firstOperandIndex = i;\n+                i = this.rewrite.length;\n             }\n             else {\n-                ++iterationIndex;\n+                ++i;\n             }\n         }\n         if (this.firstOperandIndex == -1) {\n             return;\n         }\n-        int lastOperandIndex = -1;\n-        for (iterationIndex = this.firstOperandIndex; iterationIndex < this.rewrite.length; ++iterationIndex) {\n-            if (this.rewrite[iterationIndex] < 0) {\n-                lastOperandIndex = iterationIndex;\n+        int n = -1;\n+        for (int j = this.firstOperandIndex; j < this.rewrite.length; ++j) {\n+            if (this.rewrite[j] < 0) {\n+                n = j;\n             }\n         }\n-        final int difference = lastOperandIndex - this.firstOperandIndex;\n-        if (difference < 0) {\n+        final int n2 = n - this.firstOperandIndex;\n+        if (n2 < 0) {\n             throw new Error(\"Logic error: not finding rewrite operands correctly\");\n         }\n-        this.operandLength = difference + 1;\n+        this.operandLength = n2 + 1;\n     }\n     \n     public int firstOperandIndex() {\n         return this.firstOperandIndex;\n     }\n     \n     public void fixUpByteCodeTargets(final ByteCode byteCode, final CodeAttribute codeAttribute) {\n@@ -350,14 +350,14 @@\n         ByteCodeForm.byteCodeArray[235] = (ByteCodeForm)new FloatRefForm(235, \"fldc\", new int[] { 18, -1 });\n         ByteCodeForm.byteCodeArray[236] = (ByteCodeForm)new NarrowClassRefForm(236, \"cldc_w\", new int[] { 19, -1, -1 }, true);\n         ByteCodeForm.byteCodeArray[237] = (ByteCodeForm)new IntRefForm(237, \"ildc_w\", new int[] { 19, -1, -1 }, true);\n         ByteCodeForm.byteCodeArray[238] = (ByteCodeForm)new FloatRefForm(238, \"fldc_w\", new int[] { 19, -1, -1 }, true);\n         ByteCodeForm.byteCodeArray[239] = (ByteCodeForm)new DoubleForm(239, \"dldc2_w\", new int[] { 20, -1, -1 });\n         ByteCodeForm.byteCodeArray[254] = (ByteCodeForm)new NoArgumentForm(254, \"impdep1\");\n         ByteCodeForm.byteCodeArray[255] = (ByteCodeForm)new NoArgumentForm(255, \"impdep2\");\n-        for (final ByteCodeForm byteCode : ByteCodeForm.byteCodeArray) {\n-            if (byteCode != null) {\n-                ByteCodeForm.byteCodesByName.put(byteCode.getName(), byteCode);\n+        for (final ByteCodeForm byteCodeForm : ByteCodeForm.byteCodeArray) {\n+            if (byteCodeForm != null) {\n+                ByteCodeForm.byteCodesByName.put(byteCodeForm.getName(), byteCodeForm);\n             }\n         }\n     }\n }\n"}]}
