{"diffoscope-json-version": 1, "source1": "first/JSONArray.class", "source2": "second/JSONArray.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,588 +1,567 @@\n-  SHA-256 checksum 37c6d209c11acbcd95b94517872de3f3fd9a290b83140dcb66c7295e533c5a66\n+  SHA-256 checksum f25341d1fde7031ef87bb4741dbd1beef3591757591439121eb1e9b9cf655dd0\n   Compiled from \"JSONArray.java\"\n public class org.json.JSONArray extends java.lang.Object implements java.lang.Iterable<java.lang.Object>\n   minor version: 0\n   major version: 50\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #70                         // org/json/JSONArray\n   super_class: #166                       // java/lang/Object\n   interfaces: 1, fields: 1, methods: 84, attributes: 2\n Constant pool:\n-    #1 = Methodref          #166.#324     // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #325          // java/util/ArrayList\n-    #3 = Methodref          #2.#324       // java/util/ArrayList.\"<init>\":()V\n-    #4 = Fieldref           #70.#326      // org/json/JSONArray.myArrayList:Ljava/util/ArrayList;\n-    #5 = Methodref          #70.#324      // org/json/JSONArray.\"<init>\":()V\n-    #6 = Methodref          #14.#327      // org/json/JSONTokener.nextClean:()C\n-    #7 = String             #328          // A JSONArray text must start with \\'[\\'\n-    #8 = Methodref          #14.#329      // org/json/JSONTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-    #9 = String             #330          // Expected a \\',\\' or \\']\\'\n-   #10 = Methodref          #14.#331      // org/json/JSONTokener.back:()V\n-   #11 = Fieldref           #72.#332      // org/json/JSONObject.NULL:Ljava/lang/Object;\n-   #12 = Methodref          #2.#333       // java/util/ArrayList.add:(Ljava/lang/Object;)Z\n-   #13 = Methodref          #14.#334      // org/json/JSONTokener.nextValue:()Ljava/lang/Object;\n-   #14 = Class              #335          // org/json/JSONTokener\n-   #15 = Methodref          #14.#336      // org/json/JSONTokener.\"<init>\":(Ljava/lang/String;)V\n-   #16 = Methodref          #70.#337      // org/json/JSONArray.\"<init>\":(Lorg/json/JSONTokener;)V\n-   #17 = InterfaceMethodref #157.#338     // java/util/Collection.size:()I\n-   #18 = Methodref          #2.#339       // java/util/ArrayList.\"<init>\":(I)V\n-   #19 = Methodref          #70.#340      // org/json/JSONArray.addAll:(Ljava/util/Collection;Z)V\n-   #20 = Methodref          #70.#341      // org/json/JSONArray.addAll:(Ljava/lang/Iterable;Z)V\n-   #21 = Methodref          #2.#342       // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n-   #22 = Methodref          #166.#343     // java/lang/Object.getClass:()Ljava/lang/Class;\n-   #23 = Methodref          #344.#345     // java/lang/Class.isArray:()Z\n-   #24 = Class              #346          // org/json/JSONException\n-   #25 = String             #347          // JSONArray initial value should be a string or collection or array.\n-   #26 = Methodref          #24.#336      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n-   #27 = Methodref          #70.#348      // org/json/JSONArray.addAll:(Ljava/lang/Object;Z)V\n-   #28 = String             #349          // JSONArray initial capacity cannot be negative.\n-   #29 = Methodref          #2.#350       // java/util/ArrayList.iterator:()Ljava/util/Iterator;\n-   #30 = Methodref          #70.#351      // org/json/JSONArray.opt:(I)Ljava/lang/Object;\n-   #31 = Class              #352          // java/lang/StringBuilder\n-   #32 = Methodref          #31.#324      // java/lang/StringBuilder.\"<init>\":()V\n-   #33 = String             #353          // JSONArray[\n-   #34 = Methodref          #31.#354      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #35 = Methodref          #31.#355      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #36 = String             #356          // ] not found.\n-   #37 = Methodref          #31.#357      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #38 = Methodref          #70.#358      // org/json/JSONArray.get:(I)Ljava/lang/Object;\n-   #39 = Fieldref           #359.#360     // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n-   #40 = Methodref          #166.#361     // java/lang/Object.equals:(Ljava/lang/Object;)Z\n-   #41 = Class              #362          // java/lang/String\n-   #42 = String             #363          // false\n-   #43 = Methodref          #41.#364      // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n-   #44 = Fieldref           #359.#365     // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n-   #45 = String             #366          // true\n-   #46 = String             #367          // boolean\n-   #47 = Methodref          #70.#368      // org/json/JSONArray.wrongValueFormatException:(ILjava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #48 = Class              #369          // java/lang/Number\n-   #49 = Methodref          #48.#370      // java/lang/Number.doubleValue:()D\n-   #50 = Methodref          #166.#357     // java/lang/Object.toString:()Ljava/lang/String;\n-   #51 = Methodref          #87.#371      // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n-   #52 = Class              #372          // java/lang/Exception\n-   #53 = String             #373          // double\n-   #54 = Methodref          #48.#374      // java/lang/Number.floatValue:()F\n-   #55 = Methodref          #92.#375      // java/lang/Float.parseFloat:(Ljava/lang/String;)F\n-   #56 = String             #376          // float\n-   #57 = Methodref          #72.#377      // org/json/JSONObject.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-   #58 = String             #378          // number\n-   #59 = Methodref          #70.#379      // org/json/JSONArray.optEnum:(Ljava/lang/Class;I)Ljava/lang/Enum;\n-   #60 = String             #380          // enum of type\n-   #61 = Methodref          #344.#381     // java/lang/Class.getSimpleName:()Ljava/lang/String;\n-   #62 = Methodref          #72.#382      // org/json/JSONObject.quote:(Ljava/lang/String;)Ljava/lang/String;\n-   #63 = Methodref          #72.#383      // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #64 = String             #384          // BigDecimal\n-   #65 = Methodref          #72.#385      // org/json/JSONObject.objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #66 = String             #386          // BigInteger\n-   #67 = Methodref          #48.#387      // java/lang/Number.intValue:()I\n-   #68 = Methodref          #388.#389     // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n-   #69 = String             #390          // int\n-   #70 = Class              #391          // org/json/JSONArray\n-   #71 = String             #392          // JSONArray\n-   #72 = Class              #393          // org/json/JSONObject\n-   #73 = String             #394          // JSONObject\n-   #74 = Methodref          #48.#395      // java/lang/Number.longValue:()J\n-   #75 = Methodref          #396.#397     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n-   #76 = String             #398          // long\n-   #77 = String             #399          // String\n-   #78 = Methodref          #70.#400      // org/json/JSONArray.length:()I\n-   #79 = String             #401          //\n-   #80 = Methodref          #2.#358       // java/util/ArrayList.get:(I)Ljava/lang/Object;\n-   #81 = Methodref          #72.#402      // org/json/JSONObject.valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n-   #82 = Methodref          #31.#336      // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n-   #83 = Methodref          #2.#338       // java/util/ArrayList.size:()I\n-   #84 = Methodref          #2.#403       // java/util/ArrayList.clear:()V\n-   #85 = Methodref          #70.#404      // org/json/JSONArray.optBoolean:(IZ)Z\n-   #86 = Methodref          #70.#405      // org/json/JSONArray.getBoolean:(I)Z\n-   #87 = Class              #406          // java/lang/Double\n+    #1 = Methodref          #166.#308     // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #309          // java/util/ArrayList\n+    #3 = Methodref          #2.#308       // java/util/ArrayList.\"<init>\":()V\n+    #4 = Fieldref           #70.#310      // org/json/JSONArray.myArrayList:Ljava/util/ArrayList;\n+    #5 = Methodref          #70.#308      // org/json/JSONArray.\"<init>\":()V\n+    #6 = Methodref          #14.#311      // org/json/JSONTokener.nextClean:()C\n+    #7 = String             #312          // A JSONArray text must start with \\'[\\'\n+    #8 = Methodref          #14.#313      // org/json/JSONTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+    #9 = String             #314          // Expected a \\',\\' or \\']\\'\n+   #10 = Methodref          #14.#315      // org/json/JSONTokener.back:()V\n+   #11 = Fieldref           #72.#316      // org/json/JSONObject.NULL:Ljava/lang/Object;\n+   #12 = Methodref          #2.#317       // java/util/ArrayList.add:(Ljava/lang/Object;)Z\n+   #13 = Methodref          #14.#318      // org/json/JSONTokener.nextValue:()Ljava/lang/Object;\n+   #14 = Class              #319          // org/json/JSONTokener\n+   #15 = Methodref          #14.#320      // org/json/JSONTokener.\"<init>\":(Ljava/lang/String;)V\n+   #16 = Methodref          #70.#321      // org/json/JSONArray.\"<init>\":(Lorg/json/JSONTokener;)V\n+   #17 = InterfaceMethodref #157.#322     // java/util/Collection.size:()I\n+   #18 = Methodref          #2.#323       // java/util/ArrayList.\"<init>\":(I)V\n+   #19 = Methodref          #70.#324      // org/json/JSONArray.addAll:(Ljava/util/Collection;Z)V\n+   #20 = Methodref          #70.#325      // org/json/JSONArray.addAll:(Ljava/lang/Iterable;Z)V\n+   #21 = Methodref          #2.#326       // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n+   #22 = Methodref          #166.#327     // java/lang/Object.getClass:()Ljava/lang/Class;\n+   #23 = Methodref          #235.#328     // java/lang/Class.isArray:()Z\n+   #24 = Class              #329          // org/json/JSONException\n+   #25 = String             #330          // JSONArray initial value should be a string or collection or array.\n+   #26 = Methodref          #24.#320      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n+   #27 = Methodref          #70.#331      // org/json/JSONArray.addAll:(Ljava/lang/Object;Z)V\n+   #28 = String             #332          // JSONArray initial capacity cannot be negative.\n+   #29 = Methodref          #2.#333       // java/util/ArrayList.iterator:()Ljava/util/Iterator;\n+   #30 = Methodref          #70.#334      // org/json/JSONArray.opt:(I)Ljava/lang/Object;\n+   #31 = Class              #335          // java/lang/StringBuilder\n+   #32 = Methodref          #31.#308      // java/lang/StringBuilder.\"<init>\":()V\n+   #33 = String             #336          // JSONArray[\n+   #34 = Methodref          #31.#337      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #35 = Methodref          #31.#338      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #36 = String             #339          // ] not found.\n+   #37 = Methodref          #31.#340      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #38 = Methodref          #70.#341      // org/json/JSONArray.get:(I)Ljava/lang/Object;\n+   #39 = Fieldref           #251.#342     // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n+   #40 = Methodref          #166.#343     // java/lang/Object.equals:(Ljava/lang/Object;)Z\n+   #41 = Class              #344          // java/lang/String\n+   #42 = String             #345          // false\n+   #43 = Methodref          #41.#346      // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n+   #44 = Fieldref           #251.#347     // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n+   #45 = String             #348          // true\n+   #46 = String             #349          // boolean\n+   #47 = Methodref          #70.#350      // org/json/JSONArray.wrongValueFormatException:(ILjava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+   #48 = Class              #351          // java/lang/Number\n+   #49 = Methodref          #48.#352      // java/lang/Number.doubleValue:()D\n+   #50 = Methodref          #166.#340     // java/lang/Object.toString:()Ljava/lang/String;\n+   #51 = Methodref          #87.#353      // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n+   #52 = Class              #354          // java/lang/Exception\n+   #53 = String             #355          // double\n+   #54 = Methodref          #48.#356      // java/lang/Number.floatValue:()F\n+   #55 = Methodref          #92.#357      // java/lang/Float.parseFloat:(Ljava/lang/String;)F\n+   #56 = String             #358          // float\n+   #57 = Methodref          #72.#359      // org/json/JSONObject.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+   #58 = String             #360          // number\n+   #59 = Methodref          #70.#361      // org/json/JSONArray.optEnum:(Ljava/lang/Class;I)Ljava/lang/Enum;\n+   #60 = String             #362          // enum of type\n+   #61 = Methodref          #235.#363     // java/lang/Class.getSimpleName:()Ljava/lang/String;\n+   #62 = Methodref          #72.#364      // org/json/JSONObject.quote:(Ljava/lang/String;)Ljava/lang/String;\n+   #63 = Methodref          #72.#365      // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #64 = String             #366          // BigDecimal\n+   #65 = Methodref          #72.#367      // org/json/JSONObject.objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #66 = String             #368          // BigInteger\n+   #67 = Methodref          #48.#369      // java/lang/Number.intValue:()I\n+   #68 = Methodref          #370.#371     // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+   #69 = String             #372          // int\n+   #70 = Class              #373          // org/json/JSONArray\n+   #71 = String             #374          // JSONArray\n+   #72 = Class              #375          // org/json/JSONObject\n+   #73 = String             #376          // JSONObject\n+   #74 = Methodref          #48.#377      // java/lang/Number.longValue:()J\n+   #75 = Methodref          #378.#379     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n+   #76 = String             #380          // long\n+   #77 = String             #381          // String\n+   #78 = Methodref          #70.#382      // org/json/JSONArray.length:()I\n+   #79 = String             #383          //\n+   #80 = Methodref          #2.#341       // java/util/ArrayList.get:(I)Ljava/lang/Object;\n+   #81 = Methodref          #72.#384      // org/json/JSONObject.valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n+   #82 = Methodref          #31.#320      // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+   #83 = Methodref          #2.#322       // java/util/ArrayList.size:()I\n+   #84 = Methodref          #2.#385       // java/util/ArrayList.clear:()V\n+   #85 = Methodref          #70.#386      // org/json/JSONArray.optBoolean:(IZ)Z\n+   #86 = Methodref          #70.#387      // org/json/JSONArray.getBoolean:(I)Z\n+   #87 = Class              #388          // java/lang/Double\n    #88 = Double             NaNd\n-   #90 = Methodref          #70.#407      // org/json/JSONArray.optDouble:(ID)D\n-   #91 = Methodref          #70.#408      // org/json/JSONArray.optNumber:(ILjava/lang/Number;)Ljava/lang/Number;\n-   #92 = Class              #409          // java/lang/Float\n+   #90 = Methodref          #70.#389      // org/json/JSONArray.optDouble:(ID)D\n+   #91 = Methodref          #70.#390      // org/json/JSONArray.optNumber:(ILjava/lang/Number;)Ljava/lang/Number;\n+   #92 = Class              #391          // java/lang/Float\n    #93 = Float              NaNf\n-   #94 = Methodref          #70.#410      // org/json/JSONArray.optFloat:(IF)F\n-   #95 = Methodref          #70.#411      // org/json/JSONArray.optInt:(II)I\n-   #96 = Methodref          #70.#412      // org/json/JSONArray.optEnum:(Ljava/lang/Class;ILjava/lang/Enum;)Ljava/lang/Enum;\n-   #97 = Methodref          #344.#413     // java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z\n-   #98 = Class              #414          // java/lang/Enum\n-   #99 = Methodref          #98.#415      // java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-  #100 = Class              #416          // java/lang/IllegalArgumentException\n-  #101 = Class              #417          // java/lang/NullPointerException\n-  #102 = Methodref          #70.#418      // org/json/JSONArray.optLong:(IJ)J\n-  #103 = Methodref          #70.#419      // org/json/JSONArray.optString:(ILjava/lang/String;)Ljava/lang/String;\n-  #104 = Methodref          #70.#420      // org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n-  #105 = Methodref          #70.#342      // org/json/JSONArray.\"<init>\":(Ljava/util/Collection;)V\n-  #106 = Methodref          #87.#421      // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n-  #107 = Methodref          #92.#422      // java/lang/Float.valueOf:(F)Ljava/lang/Float;\n-  #108 = Methodref          #388.#423     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-  #109 = Methodref          #396.#424     // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n-  #110 = Methodref          #72.#425      // org/json/JSONObject.\"<init>\":(Ljava/util/Map;)V\n-  #111 = Methodref          #72.#426      // org/json/JSONObject.testValidity:(Ljava/lang/Object;)V\n-  #112 = Methodref          #70.#427      // org/json/JSONArray.put:(ILjava/lang/Object;)Lorg/json/JSONArray;\n-  #113 = Methodref          #2.#428       // java/util/ArrayList.set:(ILjava/lang/Object;)Ljava/lang/Object;\n-  #114 = Methodref          #2.#429       // java/util/ArrayList.ensureCapacity:(I)V\n-  #115 = Methodref          #2.#430       // java/util/ArrayList.addAll:(Ljava/util/Collection;)Z\n-  #116 = Class              #431          // org/json/JSONPointer\n-  #117 = Methodref          #116.#336     // org/json/JSONPointer.\"<init>\":(Ljava/lang/String;)V\n-  #118 = Methodref          #70.#432      // org/json/JSONArray.query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-  #119 = Methodref          #116.#433     // org/json/JSONPointer.queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #120 = Methodref          #70.#434      // org/json/JSONArray.optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-  #121 = Class              #435          // org/json/JSONPointerException\n-  #122 = Methodref          #2.#436       // java/util/ArrayList.remove:(I)Ljava/lang/Object;\n-  #123 = Methodref          #72.#437      // org/json/JSONObject.similar:(Ljava/lang/Object;)Z\n-  #124 = Methodref          #70.#437      // org/json/JSONArray.similar:(Ljava/lang/Object;)Z\n-  #125 = Methodref          #72.#438      // org/json/JSONObject.isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n-  #126 = Class              #439          // org/json/JSONString\n-  #127 = InterfaceMethodref #126.#440     // org/json/JSONString.toJSONString:()Ljava/lang/String;\n-  #128 = Methodref          #41.#361      // java/lang/String.equals:(Ljava/lang/Object;)Z\n-  #129 = Methodref          #70.#441      // org/json/JSONArray.isEmpty:()Z\n-  #130 = Methodref          #72.#339      // org/json/JSONObject.\"<init>\":(I)V\n-  #131 = Methodref          #70.#442      // org/json/JSONArray.getString:(I)Ljava/lang/String;\n-  #132 = Methodref          #72.#443      // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #133 = Methodref          #70.#444      // org/json/JSONArray.toString:(I)Ljava/lang/String;\n-  #134 = Class              #445          // java/io/StringWriter\n-  #135 = Methodref          #134.#324     // java/io/StringWriter.\"<init>\":()V\n-  #136 = Methodref          #134.#446     // java/io/StringWriter.getBuffer:()Ljava/lang/StringBuffer;\n-  #137 = Methodref          #70.#447      // org/json/JSONArray.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n-  #138 = Methodref          #448.#449     // java/io/Writer.write:(I)V\n-  #139 = Methodref          #72.#450      // org/json/JSONObject.writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-  #140 = String             #451          // Unable to write JSONArray value at index: 0\n-  #141 = Methodref          #24.#452      // org/json/JSONException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #142 = Methodref          #72.#453      // org/json/JSONObject.indent:(Ljava/io/Writer;I)V\n-  #143 = String             #454          // Unable to write JSONArray value at index:\n-  #144 = Class              #455          // java/io/IOException\n-  #145 = Methodref          #24.#456      // org/json/JSONException.\"<init>\":(Ljava/lang/Throwable;)V\n-  #146 = InterfaceMethodref #457.#458     // java/util/Iterator.hasNext:()Z\n-  #147 = InterfaceMethodref #457.#459     // java/util/Iterator.next:()Ljava/lang/Object;\n-  #148 = InterfaceMethodref #460.#333     // java/util/List.add:(Ljava/lang/Object;)Z\n-  #149 = Methodref          #70.#461      // org/json/JSONArray.toList:()Ljava/util/List;\n-  #150 = Methodref          #72.#462      // org/json/JSONObject.toMap:()Ljava/util/Map;\n-  #151 = Methodref          #2.#441       // java/util/ArrayList.isEmpty:()Z\n-  #152 = InterfaceMethodref #157.#350     // java/util/Collection.iterator:()Ljava/util/Iterator;\n-  #153 = Methodref          #72.#463      // org/json/JSONObject.wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #154 = InterfaceMethodref #158.#350     // java/lang/Iterable.iterator:()Ljava/util/Iterator;\n-  #155 = Methodref          #464.#465     // java/lang/reflect/Array.getLength:(Ljava/lang/Object;)I\n-  #156 = Methodref          #464.#466     // java/lang/reflect/Array.get:(Ljava/lang/Object;I)Ljava/lang/Object;\n-  #157 = Class              #467          // java/util/Collection\n-  #158 = Class              #468          // java/lang/Iterable\n-  #159 = String             #469          // ] is not a\n-  #160 = String             #470          //  (null).\n-  #161 = Class              #471          // java/util/Map\n-  #162 = String             #472          //  (\n-  #163 = Methodref          #31.#473      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #164 = String             #474          // ).\n-  #165 = String             #475          //  :\n-  #166 = Class              #476          // java/lang/Object\n+   #94 = Methodref          #70.#392      // org/json/JSONArray.optFloat:(IF)F\n+   #95 = Methodref          #70.#393      // org/json/JSONArray.optInt:(II)I\n+   #96 = Methodref          #70.#394      // org/json/JSONArray.optEnum:(Ljava/lang/Class;ILjava/lang/Enum;)Ljava/lang/Enum;\n+   #97 = Methodref          #235.#395     // java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z\n+   #98 = Class              #396          // java/lang/Enum\n+   #99 = Methodref          #98.#397      // java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+  #100 = Class              #398          // java/lang/IllegalArgumentException\n+  #101 = Class              #399          // java/lang/NullPointerException\n+  #102 = Methodref          #70.#400      // org/json/JSONArray.optLong:(IJ)J\n+  #103 = Methodref          #70.#401      // org/json/JSONArray.optString:(ILjava/lang/String;)Ljava/lang/String;\n+  #104 = Methodref          #70.#402      // org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n+  #105 = Methodref          #70.#326      // org/json/JSONArray.\"<init>\":(Ljava/util/Collection;)V\n+  #106 = Methodref          #87.#403      // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n+  #107 = Methodref          #92.#404      // java/lang/Float.valueOf:(F)Ljava/lang/Float;\n+  #108 = Methodref          #370.#405     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+  #109 = Methodref          #378.#406     // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n+  #110 = Methodref          #72.#407      // org/json/JSONObject.\"<init>\":(Ljava/util/Map;)V\n+  #111 = Methodref          #72.#408      // org/json/JSONObject.testValidity:(Ljava/lang/Object;)V\n+  #112 = Methodref          #70.#409      // org/json/JSONArray.put:(ILjava/lang/Object;)Lorg/json/JSONArray;\n+  #113 = Methodref          #2.#410       // java/util/ArrayList.set:(ILjava/lang/Object;)Ljava/lang/Object;\n+  #114 = Methodref          #2.#411       // java/util/ArrayList.ensureCapacity:(I)V\n+  #115 = Methodref          #2.#412       // java/util/ArrayList.addAll:(Ljava/util/Collection;)Z\n+  #116 = Class              #413          // org/json/JSONPointer\n+  #117 = Methodref          #116.#320     // org/json/JSONPointer.\"<init>\":(Ljava/lang/String;)V\n+  #118 = Methodref          #70.#414      // org/json/JSONArray.query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+  #119 = Methodref          #116.#415     // org/json/JSONPointer.queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #120 = Methodref          #70.#416      // org/json/JSONArray.optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+  #121 = Class              #417          // org/json/JSONPointerException\n+  #122 = Methodref          #2.#418       // java/util/ArrayList.remove:(I)Ljava/lang/Object;\n+  #123 = Methodref          #72.#419      // org/json/JSONObject.similar:(Ljava/lang/Object;)Z\n+  #124 = Methodref          #70.#419      // org/json/JSONArray.similar:(Ljava/lang/Object;)Z\n+  #125 = Methodref          #72.#420      // org/json/JSONObject.isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n+  #126 = Class              #421          // org/json/JSONString\n+  #127 = InterfaceMethodref #126.#422     // org/json/JSONString.toJSONString:()Ljava/lang/String;\n+  #128 = Methodref          #41.#343      // java/lang/String.equals:(Ljava/lang/Object;)Z\n+  #129 = Methodref          #70.#423      // org/json/JSONArray.isEmpty:()Z\n+  #130 = Methodref          #72.#323      // org/json/JSONObject.\"<init>\":(I)V\n+  #131 = Methodref          #70.#424      // org/json/JSONArray.getString:(I)Ljava/lang/String;\n+  #132 = Methodref          #72.#425      // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #133 = Methodref          #70.#426      // org/json/JSONArray.toString:(I)Ljava/lang/String;\n+  #134 = Class              #427          // java/io/StringWriter\n+  #135 = Methodref          #134.#308     // java/io/StringWriter.\"<init>\":()V\n+  #136 = Methodref          #134.#428     // java/io/StringWriter.getBuffer:()Ljava/lang/StringBuffer;\n+  #137 = Methodref          #70.#429      // org/json/JSONArray.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n+  #138 = Methodref          #289.#430     // java/io/Writer.write:(I)V\n+  #139 = Methodref          #72.#431      // org/json/JSONObject.writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+  #140 = String             #432          // Unable to write JSONArray value at index: 0\n+  #141 = Methodref          #24.#433      // org/json/JSONException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #142 = Methodref          #72.#434      // org/json/JSONObject.indent:(Ljava/io/Writer;I)V\n+  #143 = String             #435          // Unable to write JSONArray value at index:\n+  #144 = Class              #436          // java/io/IOException\n+  #145 = Methodref          #24.#437      // org/json/JSONException.\"<init>\":(Ljava/lang/Throwable;)V\n+  #146 = InterfaceMethodref #293.#438     // java/util/Iterator.hasNext:()Z\n+  #147 = InterfaceMethodref #293.#439     // java/util/Iterator.next:()Ljava/lang/Object;\n+  #148 = InterfaceMethodref #292.#317     // java/util/List.add:(Ljava/lang/Object;)Z\n+  #149 = Methodref          #70.#440      // org/json/JSONArray.toList:()Ljava/util/List;\n+  #150 = Methodref          #72.#441      // org/json/JSONObject.toMap:()Ljava/util/Map;\n+  #151 = Methodref          #2.#423       // java/util/ArrayList.isEmpty:()Z\n+  #152 = InterfaceMethodref #157.#333     // java/util/Collection.iterator:()Ljava/util/Iterator;\n+  #153 = Methodref          #72.#442      // org/json/JSONObject.wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #154 = InterfaceMethodref #158.#333     // java/lang/Iterable.iterator:()Ljava/util/Iterator;\n+  #155 = Methodref          #443.#444     // java/lang/reflect/Array.getLength:(Ljava/lang/Object;)I\n+  #156 = Methodref          #443.#445     // java/lang/reflect/Array.get:(Ljava/lang/Object;I)Ljava/lang/Object;\n+  #157 = Class              #446          // java/util/Collection\n+  #158 = Class              #447          // java/lang/Iterable\n+  #159 = String             #448          // ] is not a\n+  #160 = String             #449          //  (null).\n+  #161 = Class              #450          // java/util/Map\n+  #162 = String             #451          //  (\n+  #163 = Methodref          #31.#452      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #164 = String             #453          // ).\n+  #165 = String             #454          //  :\n+  #166 = Class              #455          // java/lang/Object\n   #167 = Utf8               myArrayList\n   #168 = Utf8               Ljava/util/ArrayList;\n   #169 = Utf8               Signature\n   #170 = Utf8               Ljava/util/ArrayList<Ljava/lang/Object;>;\n   #171 = Utf8               <init>\n   #172 = Utf8               ()V\n   #173 = Utf8               Code\n   #174 = Utf8               LineNumberTable\n   #175 = Utf8               (Lorg/json/JSONTokener;)V\n   #176 = Utf8               StackMapTable\n-  #177 = Class              #391          // org/json/JSONArray\n-  #178 = Class              #335          // org/json/JSONTokener\n-  #179 = Utf8               Exceptions\n-  #180 = Utf8               (Ljava/lang/String;)V\n-  #181 = Utf8               (Ljava/util/Collection;)V\n-  #182 = Class              #467          // java/util/Collection\n-  #183 = Utf8               (Ljava/util/Collection<*>;)V\n-  #184 = Utf8               (Ljava/lang/Iterable;)V\n-  #185 = Class              #468          // java/lang/Iterable\n-  #186 = Utf8               (Ljava/lang/Iterable<*>;)V\n-  #187 = Utf8               (Lorg/json/JSONArray;)V\n-  #188 = Utf8               (Ljava/lang/Object;)V\n-  #189 = Class              #476          // java/lang/Object\n-  #190 = Utf8               (I)V\n-  #191 = Utf8               iterator\n-  #192 = Utf8               ()Ljava/util/Iterator;\n-  #193 = Utf8               ()Ljava/util/Iterator<Ljava/lang/Object;>;\n-  #194 = Utf8               get\n-  #195 = Utf8               (I)Ljava/lang/Object;\n-  #196 = Utf8               getBoolean\n-  #197 = Utf8               (I)Z\n-  #198 = Utf8               getDouble\n-  #199 = Utf8               (I)D\n-  #200 = Class              #372          // java/lang/Exception\n-  #201 = Utf8               getFloat\n-  #202 = Utf8               (I)F\n-  #203 = Utf8               getNumber\n-  #204 = Utf8               (I)Ljava/lang/Number;\n-  #205 = Utf8               getEnum\n-  #206 = Utf8               (Ljava/lang/Class;I)Ljava/lang/Enum;\n-  #207 = Class              #414          // java/lang/Enum\n-  #208 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;I)TE;\n-  #209 = Utf8               getBigDecimal\n-  #210 = Utf8               (I)Ljava/math/BigDecimal;\n-  #211 = Class              #477          // java/math/BigDecimal\n-  #212 = Utf8               getBigInteger\n-  #213 = Utf8               (I)Ljava/math/BigInteger;\n-  #214 = Class              #478          // java/math/BigInteger\n-  #215 = Utf8               getInt\n-  #216 = Utf8               (I)I\n-  #217 = Utf8               getJSONArray\n-  #218 = Utf8               (I)Lorg/json/JSONArray;\n-  #219 = Utf8               getJSONObject\n-  #220 = Utf8               (I)Lorg/json/JSONObject;\n-  #221 = Utf8               getLong\n-  #222 = Utf8               (I)J\n-  #223 = Utf8               getString\n-  #224 = Utf8               (I)Ljava/lang/String;\n-  #225 = Utf8               isNull\n-  #226 = Utf8               join\n-  #227 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #228 = Class              #352          // java/lang/StringBuilder\n-  #229 = Utf8               length\n-  #230 = Utf8               ()I\n-  #231 = Utf8               clear\n-  #232 = Utf8               opt\n-  #233 = Utf8               optBoolean\n-  #234 = Utf8               (IZ)Z\n-  #235 = Utf8               optDouble\n-  #236 = Utf8               (ID)D\n-  #237 = Class              #369          // java/lang/Number\n-  #238 = Utf8               optFloat\n-  #239 = Utf8               (IF)F\n-  #240 = Utf8               optInt\n-  #241 = Utf8               (II)I\n-  #242 = Utf8               optEnum\n-  #243 = Utf8               (Ljava/lang/Class;ILjava/lang/Enum;)Ljava/lang/Enum;\n-  #244 = Class              #479          // java/lang/Class\n-  #245 = Class              #416          // java/lang/IllegalArgumentException\n-  #246 = Class              #417          // java/lang/NullPointerException\n-  #247 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;ITE;)TE;\n-  #248 = Utf8               optBigInteger\n-  #249 = Utf8               (ILjava/math/BigInteger;)Ljava/math/BigInteger;\n-  #250 = Utf8               optBigDecimal\n-  #251 = Utf8               (ILjava/math/BigDecimal;)Ljava/math/BigDecimal;\n-  #252 = Utf8               optJSONArray\n-  #253 = Utf8               optJSONObject\n-  #254 = Class              #393          // org/json/JSONObject\n-  #255 = Utf8               optLong\n-  #256 = Utf8               (IJ)J\n-  #257 = Utf8               optNumber\n-  #258 = Utf8               (ILjava/lang/Number;)Ljava/lang/Number;\n-  #259 = Utf8               optString\n-  #260 = Utf8               (ILjava/lang/String;)Ljava/lang/String;\n-  #261 = Class              #362          // java/lang/String\n-  #262 = Utf8               put\n-  #263 = Utf8               (Z)Lorg/json/JSONArray;\n-  #264 = Class              #480          // java/lang/Boolean\n-  #265 = Utf8               (Ljava/util/Collection;)Lorg/json/JSONArray;\n-  #266 = Utf8               (Ljava/util/Collection<*>;)Lorg/json/JSONArray;\n-  #267 = Utf8               (D)Lorg/json/JSONArray;\n-  #268 = Utf8               (F)Lorg/json/JSONArray;\n-  #269 = Utf8               (J)Lorg/json/JSONArray;\n-  #270 = Utf8               (Ljava/util/Map;)Lorg/json/JSONArray;\n-  #271 = Utf8               (Ljava/util/Map<**>;)Lorg/json/JSONArray;\n-  #272 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONArray;\n-  #273 = Utf8               (IZ)Lorg/json/JSONArray;\n-  #274 = Utf8               (ILjava/util/Collection;)Lorg/json/JSONArray;\n-  #275 = Utf8               (ILjava/util/Collection<*>;)Lorg/json/JSONArray;\n-  #276 = Utf8               (ID)Lorg/json/JSONArray;\n-  #277 = Utf8               (IF)Lorg/json/JSONArray;\n-  #278 = Utf8               (II)Lorg/json/JSONArray;\n-  #279 = Utf8               (IJ)Lorg/json/JSONArray;\n-  #280 = Utf8               (ILjava/util/Map;)Lorg/json/JSONArray;\n-  #281 = Utf8               (ILjava/util/Map<**>;)Lorg/json/JSONArray;\n-  #282 = Utf8               (ILjava/lang/Object;)Lorg/json/JSONArray;\n-  #283 = Utf8               putAll\n-  #284 = Utf8               (Ljava/lang/Iterable;)Lorg/json/JSONArray;\n-  #285 = Utf8               (Ljava/lang/Iterable<*>;)Lorg/json/JSONArray;\n-  #286 = Utf8               (Lorg/json/JSONArray;)Lorg/json/JSONArray;\n-  #287 = Utf8               query\n-  #288 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n-  #289 = Utf8               (Lorg/json/JSONPointer;)Ljava/lang/Object;\n-  #290 = Utf8               optQuery\n-  #291 = Class              #435          // org/json/JSONPointerException\n-  #292 = Utf8               remove\n-  #293 = Utf8               similar\n-  #294 = Utf8               (Ljava/lang/Object;)Z\n-  #295 = Utf8               toJSONObject\n-  #296 = Utf8               (Lorg/json/JSONArray;)Lorg/json/JSONObject;\n-  #297 = Utf8               toString\n-  #298 = Utf8               ()Ljava/lang/String;\n-  #299 = Class              #445          // java/io/StringWriter\n-  #300 = Class              #481          // java/lang/Throwable\n-  #301 = Utf8               write\n-  #302 = Utf8               (Ljava/io/Writer;)Ljava/io/Writer;\n-  #303 = Utf8               (Ljava/io/Writer;II)Ljava/io/Writer;\n-  #304 = Class              #482          // java/io/Writer\n-  #305 = Class              #455          // java/io/IOException\n-  #306 = Utf8               toList\n-  #307 = Utf8               ()Ljava/util/List;\n-  #308 = Class              #483          // java/util/List\n-  #309 = Class              #484          // java/util/Iterator\n-  #310 = Utf8               ()Ljava/util/List<Ljava/lang/Object;>;\n-  #311 = Utf8               isEmpty\n-  #312 = Utf8               ()Z\n-  #313 = Utf8               addAll\n-  #314 = Utf8               (Ljava/util/Collection;Z)V\n-  #315 = Utf8               (Ljava/util/Collection<*>;Z)V\n-  #316 = Utf8               (Ljava/lang/Iterable;Z)V\n-  #317 = Utf8               (Ljava/lang/Iterable<*>;Z)V\n-  #318 = Utf8               (Ljava/lang/Object;Z)V\n-  #319 = Utf8               wrongValueFormatException\n-  #320 = Utf8               (ILjava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-  #321 = Utf8               Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Object;>;\n-  #322 = Utf8               SourceFile\n-  #323 = Utf8               JSONArray.java\n-  #324 = NameAndType        #171:#172     // \"<init>\":()V\n-  #325 = Utf8               java/util/ArrayList\n-  #326 = NameAndType        #167:#168     // myArrayList:Ljava/util/ArrayList;\n-  #327 = NameAndType        #485:#486     // nextClean:()C\n-  #328 = Utf8               A JSONArray text must start with \\'[\\'\n-  #329 = NameAndType        #487:#488     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-  #330 = Utf8               Expected a \\',\\' or \\']\\'\n-  #331 = NameAndType        #489:#172     // back:()V\n-  #332 = NameAndType        #490:#491     // NULL:Ljava/lang/Object;\n-  #333 = NameAndType        #492:#294     // add:(Ljava/lang/Object;)Z\n-  #334 = NameAndType        #493:#494     // nextValue:()Ljava/lang/Object;\n-  #335 = Utf8               org/json/JSONTokener\n-  #336 = NameAndType        #171:#180     // \"<init>\":(Ljava/lang/String;)V\n-  #337 = NameAndType        #171:#175     // \"<init>\":(Lorg/json/JSONTokener;)V\n-  #338 = NameAndType        #495:#230     // size:()I\n-  #339 = NameAndType        #171:#190     // \"<init>\":(I)V\n-  #340 = NameAndType        #313:#314     // addAll:(Ljava/util/Collection;Z)V\n-  #341 = NameAndType        #313:#316     // addAll:(Ljava/lang/Iterable;Z)V\n-  #342 = NameAndType        #171:#181     // \"<init>\":(Ljava/util/Collection;)V\n-  #343 = NameAndType        #496:#497     // getClass:()Ljava/lang/Class;\n-  #344 = Class              #479          // java/lang/Class\n-  #345 = NameAndType        #498:#312     // isArray:()Z\n-  #346 = Utf8               org/json/JSONException\n-  #347 = Utf8               JSONArray initial value should be a string or collection or array.\n-  #348 = NameAndType        #313:#318     // addAll:(Ljava/lang/Object;Z)V\n-  #349 = Utf8               JSONArray initial capacity cannot be negative.\n-  #350 = NameAndType        #191:#192     // iterator:()Ljava/util/Iterator;\n-  #351 = NameAndType        #232:#195     // opt:(I)Ljava/lang/Object;\n-  #352 = Utf8               java/lang/StringBuilder\n-  #353 = Utf8               JSONArray[\n-  #354 = NameAndType        #499:#500     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #355 = NameAndType        #499:#501     // append:(I)Ljava/lang/StringBuilder;\n-  #356 = Utf8               ] not found.\n-  #357 = NameAndType        #297:#298     // toString:()Ljava/lang/String;\n-  #358 = NameAndType        #194:#195     // get:(I)Ljava/lang/Object;\n-  #359 = Class              #480          // java/lang/Boolean\n-  #360 = NameAndType        #502:#503     // FALSE:Ljava/lang/Boolean;\n-  #361 = NameAndType        #504:#294     // equals:(Ljava/lang/Object;)Z\n-  #362 = Utf8               java/lang/String\n-  #363 = Utf8               false\n-  #364 = NameAndType        #505:#506     // equalsIgnoreCase:(Ljava/lang/String;)Z\n-  #365 = NameAndType        #507:#503     // TRUE:Ljava/lang/Boolean;\n-  #366 = Utf8               true\n-  #367 = Utf8               boolean\n-  #368 = NameAndType        #319:#320     // wrongValueFormatException:(ILjava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-  #369 = Utf8               java/lang/Number\n-  #370 = NameAndType        #508:#509     // doubleValue:()D\n-  #371 = NameAndType        #510:#511     // parseDouble:(Ljava/lang/String;)D\n-  #372 = Utf8               java/lang/Exception\n-  #373 = Utf8               double\n-  #374 = NameAndType        #512:#513     // floatValue:()F\n-  #375 = NameAndType        #514:#515     // parseFloat:(Ljava/lang/String;)F\n-  #376 = Utf8               float\n-  #377 = NameAndType        #516:#517     // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-  #378 = Utf8               number\n-  #379 = NameAndType        #242:#206     // optEnum:(Ljava/lang/Class;I)Ljava/lang/Enum;\n-  #380 = Utf8               enum of type\n-  #381 = NameAndType        #518:#298     // getSimpleName:()Ljava/lang/String;\n-  #382 = NameAndType        #519:#227     // quote:(Ljava/lang/String;)Ljava/lang/String;\n-  #383 = NameAndType        #520:#521     // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-  #384 = Utf8               BigDecimal\n-  #385 = NameAndType        #522:#523     // objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #386 = Utf8               BigInteger\n-  #387 = NameAndType        #524:#230     // intValue:()I\n-  #388 = Class              #525          // java/lang/Integer\n-  #389 = NameAndType        #526:#527     // parseInt:(Ljava/lang/String;)I\n-  #390 = Utf8               int\n-  #391 = Utf8               org/json/JSONArray\n-  #392 = Utf8               JSONArray\n-  #393 = Utf8               org/json/JSONObject\n-  #394 = Utf8               JSONObject\n-  #395 = NameAndType        #528:#529     // longValue:()J\n-  #396 = Class              #530          // java/lang/Long\n-  #397 = NameAndType        #531:#532     // parseLong:(Ljava/lang/String;)J\n-  #398 = Utf8               long\n-  #399 = Utf8               String\n-  #400 = NameAndType        #229:#230     // length:()I\n-  #401 = Utf8\n-  #402 = NameAndType        #533:#534     // valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n-  #403 = NameAndType        #231:#172     // clear:()V\n-  #404 = NameAndType        #233:#234     // optBoolean:(IZ)Z\n-  #405 = NameAndType        #196:#197     // getBoolean:(I)Z\n-  #406 = Utf8               java/lang/Double\n-  #407 = NameAndType        #235:#236     // optDouble:(ID)D\n-  #408 = NameAndType        #257:#258     // optNumber:(ILjava/lang/Number;)Ljava/lang/Number;\n-  #409 = Utf8               java/lang/Float\n-  #410 = NameAndType        #238:#239     // optFloat:(IF)F\n-  #411 = NameAndType        #240:#241     // optInt:(II)I\n-  #412 = NameAndType        #242:#243     // optEnum:(Ljava/lang/Class;ILjava/lang/Enum;)Ljava/lang/Enum;\n-  #413 = NameAndType        #535:#536     // isAssignableFrom:(Ljava/lang/Class;)Z\n-  #414 = Utf8               java/lang/Enum\n-  #415 = NameAndType        #537:#538     // valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-  #416 = Utf8               java/lang/IllegalArgumentException\n-  #417 = Utf8               java/lang/NullPointerException\n-  #418 = NameAndType        #255:#256     // optLong:(IJ)J\n-  #419 = NameAndType        #259:#260     // optString:(ILjava/lang/String;)Ljava/lang/String;\n-  #420 = NameAndType        #262:#272     // put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n-  #421 = NameAndType        #537:#539     // valueOf:(D)Ljava/lang/Double;\n-  #422 = NameAndType        #537:#540     // valueOf:(F)Ljava/lang/Float;\n-  #423 = NameAndType        #537:#541     // valueOf:(I)Ljava/lang/Integer;\n-  #424 = NameAndType        #537:#542     // valueOf:(J)Ljava/lang/Long;\n-  #425 = NameAndType        #171:#543     // \"<init>\":(Ljava/util/Map;)V\n-  #426 = NameAndType        #544:#188     // testValidity:(Ljava/lang/Object;)V\n-  #427 = NameAndType        #262:#282     // put:(ILjava/lang/Object;)Lorg/json/JSONArray;\n-  #428 = NameAndType        #545:#546     // set:(ILjava/lang/Object;)Ljava/lang/Object;\n-  #429 = NameAndType        #547:#190     // ensureCapacity:(I)V\n-  #430 = NameAndType        #313:#548     // addAll:(Ljava/util/Collection;)Z\n-  #431 = Utf8               org/json/JSONPointer\n-  #432 = NameAndType        #287:#289     // query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-  #433 = NameAndType        #549:#550     // queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #434 = NameAndType        #290:#289     // optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-  #435 = Utf8               org/json/JSONPointerException\n-  #436 = NameAndType        #292:#195     // remove:(I)Ljava/lang/Object;\n-  #437 = NameAndType        #293:#294     // similar:(Ljava/lang/Object;)Z\n-  #438 = NameAndType        #551:#552     // isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n-  #439 = Utf8               org/json/JSONString\n-  #440 = NameAndType        #553:#298     // toJSONString:()Ljava/lang/String;\n-  #441 = NameAndType        #311:#312     // isEmpty:()Z\n-  #442 = NameAndType        #223:#224     // getString:(I)Ljava/lang/String;\n-  #443 = NameAndType        #262:#554     // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #444 = NameAndType        #297:#224     // toString:(I)Ljava/lang/String;\n-  #445 = Utf8               java/io/StringWriter\n-  #446 = NameAndType        #555:#556     // getBuffer:()Ljava/lang/StringBuffer;\n-  #447 = NameAndType        #301:#303     // write:(Ljava/io/Writer;II)Ljava/io/Writer;\n-  #448 = Class              #482          // java/io/Writer\n-  #449 = NameAndType        #301:#190     // write:(I)V\n-  #450 = NameAndType        #557:#558     // writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-  #451 = Utf8               Unable to write JSONArray value at index: 0\n-  #452 = NameAndType        #171:#559     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #453 = NameAndType        #560:#561     // indent:(Ljava/io/Writer;I)V\n-  #454 = Utf8               Unable to write JSONArray value at index:\n-  #455 = Utf8               java/io/IOException\n-  #456 = NameAndType        #171:#562     // \"<init>\":(Ljava/lang/Throwable;)V\n-  #457 = Class              #484          // java/util/Iterator\n-  #458 = NameAndType        #563:#312     // hasNext:()Z\n-  #459 = NameAndType        #564:#494     // next:()Ljava/lang/Object;\n-  #460 = Class              #483          // java/util/List\n-  #461 = NameAndType        #306:#307     // toList:()Ljava/util/List;\n-  #462 = NameAndType        #565:#566     // toMap:()Ljava/util/Map;\n-  #463 = NameAndType        #567:#550     // wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #464 = Class              #568          // java/lang/reflect/Array\n-  #465 = NameAndType        #569:#570     // getLength:(Ljava/lang/Object;)I\n-  #466 = NameAndType        #194:#571     // get:(Ljava/lang/Object;I)Ljava/lang/Object;\n-  #467 = Utf8               java/util/Collection\n-  #468 = Utf8               java/lang/Iterable\n-  #469 = Utf8               ] is not a\n-  #470 = Utf8                (null).\n-  #471 = Utf8               java/util/Map\n-  #472 = Utf8                (\n-  #473 = NameAndType        #499:#572     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #474 = Utf8               ).\n-  #475 = Utf8                :\n-  #476 = Utf8               java/lang/Object\n-  #477 = Utf8               java/math/BigDecimal\n-  #478 = Utf8               java/math/BigInteger\n-  #479 = Utf8               java/lang/Class\n-  #480 = Utf8               java/lang/Boolean\n-  #481 = Utf8               java/lang/Throwable\n-  #482 = Utf8               java/io/Writer\n-  #483 = Utf8               java/util/List\n-  #484 = Utf8               java/util/Iterator\n-  #485 = Utf8               nextClean\n-  #486 = Utf8               ()C\n-  #487 = Utf8               syntaxError\n-  #488 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n-  #489 = Utf8               back\n-  #490 = Utf8               NULL\n-  #491 = Utf8               Ljava/lang/Object;\n-  #492 = Utf8               add\n-  #493 = Utf8               nextValue\n-  #494 = Utf8               ()Ljava/lang/Object;\n-  #495 = Utf8               size\n-  #496 = Utf8               getClass\n-  #497 = Utf8               ()Ljava/lang/Class;\n-  #498 = Utf8               isArray\n-  #499 = Utf8               append\n-  #500 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #501 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #502 = Utf8               FALSE\n-  #503 = Utf8               Ljava/lang/Boolean;\n-  #504 = Utf8               equals\n-  #505 = Utf8               equalsIgnoreCase\n-  #506 = Utf8               (Ljava/lang/String;)Z\n-  #507 = Utf8               TRUE\n-  #508 = Utf8               doubleValue\n-  #509 = Utf8               ()D\n-  #510 = Utf8               parseDouble\n-  #511 = Utf8               (Ljava/lang/String;)D\n-  #512 = Utf8               floatValue\n-  #513 = Utf8               ()F\n-  #514 = Utf8               parseFloat\n-  #515 = Utf8               (Ljava/lang/String;)F\n-  #516 = Utf8               stringToNumber\n-  #517 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n-  #518 = Utf8               getSimpleName\n-  #519 = Utf8               quote\n-  #520 = Utf8               objectToBigDecimal\n-  #521 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-  #522 = Utf8               objectToBigInteger\n-  #523 = Utf8               (Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #524 = Utf8               intValue\n-  #525 = Utf8               java/lang/Integer\n-  #526 = Utf8               parseInt\n-  #527 = Utf8               (Ljava/lang/String;)I\n-  #528 = Utf8               longValue\n-  #529 = Utf8               ()J\n-  #530 = Utf8               java/lang/Long\n-  #531 = Utf8               parseLong\n-  #532 = Utf8               (Ljava/lang/String;)J\n-  #533 = Utf8               valueToString\n-  #534 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n-  #535 = Utf8               isAssignableFrom\n-  #536 = Utf8               (Ljava/lang/Class;)Z\n-  #537 = Utf8               valueOf\n-  #538 = Utf8               (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-  #539 = Utf8               (D)Ljava/lang/Double;\n-  #540 = Utf8               (F)Ljava/lang/Float;\n-  #541 = Utf8               (I)Ljava/lang/Integer;\n-  #542 = Utf8               (J)Ljava/lang/Long;\n-  #543 = Utf8               (Ljava/util/Map;)V\n-  #544 = Utf8               testValidity\n-  #545 = Utf8               set\n-  #546 = Utf8               (ILjava/lang/Object;)Ljava/lang/Object;\n-  #547 = Utf8               ensureCapacity\n-  #548 = Utf8               (Ljava/util/Collection;)Z\n-  #549 = Utf8               queryFrom\n-  #550 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #551 = Utf8               isNumberSimilar\n-  #552 = Utf8               (Ljava/lang/Number;Ljava/lang/Number;)Z\n-  #553 = Utf8               toJSONString\n-  #554 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #555 = Utf8               getBuffer\n-  #556 = Utf8               ()Ljava/lang/StringBuffer;\n-  #557 = Utf8               writeValue\n-  #558 = Utf8               (Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-  #559 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #560 = Utf8               indent\n-  #561 = Utf8               (Ljava/io/Writer;I)V\n-  #562 = Utf8               (Ljava/lang/Throwable;)V\n-  #563 = Utf8               hasNext\n-  #564 = Utf8               next\n-  #565 = Utf8               toMap\n-  #566 = Utf8               ()Ljava/util/Map;\n-  #567 = Utf8               wrap\n-  #568 = Utf8               java/lang/reflect/Array\n-  #569 = Utf8               getLength\n-  #570 = Utf8               (Ljava/lang/Object;)I\n-  #571 = Utf8               (Ljava/lang/Object;I)Ljava/lang/Object;\n-  #572 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #177 = Utf8               Exceptions\n+  #178 = Utf8               (Ljava/lang/String;)V\n+  #179 = Utf8               (Ljava/util/Collection;)V\n+  #180 = Utf8               (Ljava/util/Collection<*>;)V\n+  #181 = Utf8               (Ljava/lang/Iterable;)V\n+  #182 = Utf8               (Ljava/lang/Iterable<*>;)V\n+  #183 = Utf8               (Lorg/json/JSONArray;)V\n+  #184 = Utf8               (Ljava/lang/Object;)V\n+  #185 = Utf8               (I)V\n+  #186 = Utf8               iterator\n+  #187 = Utf8               ()Ljava/util/Iterator;\n+  #188 = Utf8               ()Ljava/util/Iterator<Ljava/lang/Object;>;\n+  #189 = Utf8               get\n+  #190 = Utf8               (I)Ljava/lang/Object;\n+  #191 = Utf8               getBoolean\n+  #192 = Utf8               (I)Z\n+  #193 = Utf8               getDouble\n+  #194 = Utf8               (I)D\n+  #195 = Utf8               getFloat\n+  #196 = Utf8               (I)F\n+  #197 = Utf8               getNumber\n+  #198 = Utf8               (I)Ljava/lang/Number;\n+  #199 = Utf8               getEnum\n+  #200 = Utf8               (Ljava/lang/Class;I)Ljava/lang/Enum;\n+  #201 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;I)TE;\n+  #202 = Utf8               getBigDecimal\n+  #203 = Utf8               (I)Ljava/math/BigDecimal;\n+  #204 = Class              #456          // java/math/BigDecimal\n+  #205 = Utf8               getBigInteger\n+  #206 = Utf8               (I)Ljava/math/BigInteger;\n+  #207 = Class              #457          // java/math/BigInteger\n+  #208 = Utf8               getInt\n+  #209 = Utf8               (I)I\n+  #210 = Utf8               getJSONArray\n+  #211 = Utf8               (I)Lorg/json/JSONArray;\n+  #212 = Utf8               getJSONObject\n+  #213 = Utf8               (I)Lorg/json/JSONObject;\n+  #214 = Utf8               getLong\n+  #215 = Utf8               (I)J\n+  #216 = Utf8               getString\n+  #217 = Utf8               (I)Ljava/lang/String;\n+  #218 = Utf8               isNull\n+  #219 = Utf8               join\n+  #220 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #221 = Utf8               length\n+  #222 = Utf8               ()I\n+  #223 = Utf8               clear\n+  #224 = Utf8               opt\n+  #225 = Utf8               optBoolean\n+  #226 = Utf8               (IZ)Z\n+  #227 = Utf8               optDouble\n+  #228 = Utf8               (ID)D\n+  #229 = Utf8               optFloat\n+  #230 = Utf8               (IF)F\n+  #231 = Utf8               optInt\n+  #232 = Utf8               (II)I\n+  #233 = Utf8               optEnum\n+  #234 = Utf8               (Ljava/lang/Class;ILjava/lang/Enum;)Ljava/lang/Enum;\n+  #235 = Class              #458          // java/lang/Class\n+  #236 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;ITE;)TE;\n+  #237 = Utf8               optBigInteger\n+  #238 = Utf8               (ILjava/math/BigInteger;)Ljava/math/BigInteger;\n+  #239 = Utf8               optBigDecimal\n+  #240 = Utf8               (ILjava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #241 = Utf8               optJSONArray\n+  #242 = Utf8               optJSONObject\n+  #243 = Utf8               optLong\n+  #244 = Utf8               (IJ)J\n+  #245 = Utf8               optNumber\n+  #246 = Utf8               (ILjava/lang/Number;)Ljava/lang/Number;\n+  #247 = Utf8               optString\n+  #248 = Utf8               (ILjava/lang/String;)Ljava/lang/String;\n+  #249 = Utf8               put\n+  #250 = Utf8               (Z)Lorg/json/JSONArray;\n+  #251 = Class              #459          // java/lang/Boolean\n+  #252 = Utf8               (Ljava/util/Collection;)Lorg/json/JSONArray;\n+  #253 = Utf8               (Ljava/util/Collection<*>;)Lorg/json/JSONArray;\n+  #254 = Utf8               (D)Lorg/json/JSONArray;\n+  #255 = Utf8               (F)Lorg/json/JSONArray;\n+  #256 = Utf8               (J)Lorg/json/JSONArray;\n+  #257 = Utf8               (Ljava/util/Map;)Lorg/json/JSONArray;\n+  #258 = Utf8               (Ljava/util/Map<**>;)Lorg/json/JSONArray;\n+  #259 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONArray;\n+  #260 = Utf8               (IZ)Lorg/json/JSONArray;\n+  #261 = Utf8               (ILjava/util/Collection;)Lorg/json/JSONArray;\n+  #262 = Utf8               (ILjava/util/Collection<*>;)Lorg/json/JSONArray;\n+  #263 = Utf8               (ID)Lorg/json/JSONArray;\n+  #264 = Utf8               (IF)Lorg/json/JSONArray;\n+  #265 = Utf8               (II)Lorg/json/JSONArray;\n+  #266 = Utf8               (IJ)Lorg/json/JSONArray;\n+  #267 = Utf8               (ILjava/util/Map;)Lorg/json/JSONArray;\n+  #268 = Utf8               (ILjava/util/Map<**>;)Lorg/json/JSONArray;\n+  #269 = Utf8               (ILjava/lang/Object;)Lorg/json/JSONArray;\n+  #270 = Utf8               putAll\n+  #271 = Utf8               (Ljava/lang/Iterable;)Lorg/json/JSONArray;\n+  #272 = Utf8               (Ljava/lang/Iterable<*>;)Lorg/json/JSONArray;\n+  #273 = Utf8               (Lorg/json/JSONArray;)Lorg/json/JSONArray;\n+  #274 = Utf8               query\n+  #275 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n+  #276 = Utf8               (Lorg/json/JSONPointer;)Ljava/lang/Object;\n+  #277 = Utf8               optQuery\n+  #278 = Utf8               remove\n+  #279 = Utf8               similar\n+  #280 = Utf8               (Ljava/lang/Object;)Z\n+  #281 = Utf8               toJSONObject\n+  #282 = Utf8               (Lorg/json/JSONArray;)Lorg/json/JSONObject;\n+  #283 = Utf8               toString\n+  #284 = Utf8               ()Ljava/lang/String;\n+  #285 = Class              #460          // java/lang/Throwable\n+  #286 = Utf8               write\n+  #287 = Utf8               (Ljava/io/Writer;)Ljava/io/Writer;\n+  #288 = Utf8               (Ljava/io/Writer;II)Ljava/io/Writer;\n+  #289 = Class              #461          // java/io/Writer\n+  #290 = Utf8               toList\n+  #291 = Utf8               ()Ljava/util/List;\n+  #292 = Class              #462          // java/util/List\n+  #293 = Class              #463          // java/util/Iterator\n+  #294 = Utf8               ()Ljava/util/List<Ljava/lang/Object;>;\n+  #295 = Utf8               isEmpty\n+  #296 = Utf8               ()Z\n+  #297 = Utf8               addAll\n+  #298 = Utf8               (Ljava/util/Collection;Z)V\n+  #299 = Utf8               (Ljava/util/Collection<*>;Z)V\n+  #300 = Utf8               (Ljava/lang/Iterable;Z)V\n+  #301 = Utf8               (Ljava/lang/Iterable<*>;Z)V\n+  #302 = Utf8               (Ljava/lang/Object;Z)V\n+  #303 = Utf8               wrongValueFormatException\n+  #304 = Utf8               (ILjava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+  #305 = Utf8               Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Object;>;\n+  #306 = Utf8               SourceFile\n+  #307 = Utf8               JSONArray.java\n+  #308 = NameAndType        #171:#172     // \"<init>\":()V\n+  #309 = Utf8               java/util/ArrayList\n+  #310 = NameAndType        #167:#168     // myArrayList:Ljava/util/ArrayList;\n+  #311 = NameAndType        #464:#465     // nextClean:()C\n+  #312 = Utf8               A JSONArray text must start with \\'[\\'\n+  #313 = NameAndType        #466:#467     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+  #314 = Utf8               Expected a \\',\\' or \\']\\'\n+  #315 = NameAndType        #468:#172     // back:()V\n+  #316 = NameAndType        #469:#470     // NULL:Ljava/lang/Object;\n+  #317 = NameAndType        #471:#280     // add:(Ljava/lang/Object;)Z\n+  #318 = NameAndType        #472:#473     // nextValue:()Ljava/lang/Object;\n+  #319 = Utf8               org/json/JSONTokener\n+  #320 = NameAndType        #171:#178     // \"<init>\":(Ljava/lang/String;)V\n+  #321 = NameAndType        #171:#175     // \"<init>\":(Lorg/json/JSONTokener;)V\n+  #322 = NameAndType        #474:#222     // size:()I\n+  #323 = NameAndType        #171:#185     // \"<init>\":(I)V\n+  #324 = NameAndType        #297:#298     // addAll:(Ljava/util/Collection;Z)V\n+  #325 = NameAndType        #297:#300     // addAll:(Ljava/lang/Iterable;Z)V\n+  #326 = NameAndType        #171:#179     // \"<init>\":(Ljava/util/Collection;)V\n+  #327 = NameAndType        #475:#476     // getClass:()Ljava/lang/Class;\n+  #328 = NameAndType        #477:#296     // isArray:()Z\n+  #329 = Utf8               org/json/JSONException\n+  #330 = Utf8               JSONArray initial value should be a string or collection or array.\n+  #331 = NameAndType        #297:#302     // addAll:(Ljava/lang/Object;Z)V\n+  #332 = Utf8               JSONArray initial capacity cannot be negative.\n+  #333 = NameAndType        #186:#187     // iterator:()Ljava/util/Iterator;\n+  #334 = NameAndType        #224:#190     // opt:(I)Ljava/lang/Object;\n+  #335 = Utf8               java/lang/StringBuilder\n+  #336 = Utf8               JSONArray[\n+  #337 = NameAndType        #478:#479     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #338 = NameAndType        #478:#480     // append:(I)Ljava/lang/StringBuilder;\n+  #339 = Utf8               ] not found.\n+  #340 = NameAndType        #283:#284     // toString:()Ljava/lang/String;\n+  #341 = NameAndType        #189:#190     // get:(I)Ljava/lang/Object;\n+  #342 = NameAndType        #481:#482     // FALSE:Ljava/lang/Boolean;\n+  #343 = NameAndType        #483:#280     // equals:(Ljava/lang/Object;)Z\n+  #344 = Utf8               java/lang/String\n+  #345 = Utf8               false\n+  #346 = NameAndType        #484:#485     // equalsIgnoreCase:(Ljava/lang/String;)Z\n+  #347 = NameAndType        #486:#482     // TRUE:Ljava/lang/Boolean;\n+  #348 = Utf8               true\n+  #349 = Utf8               boolean\n+  #350 = NameAndType        #303:#304     // wrongValueFormatException:(ILjava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+  #351 = Utf8               java/lang/Number\n+  #352 = NameAndType        #487:#488     // doubleValue:()D\n+  #353 = NameAndType        #489:#490     // parseDouble:(Ljava/lang/String;)D\n+  #354 = Utf8               java/lang/Exception\n+  #355 = Utf8               double\n+  #356 = NameAndType        #491:#492     // floatValue:()F\n+  #357 = NameAndType        #493:#494     // parseFloat:(Ljava/lang/String;)F\n+  #358 = Utf8               float\n+  #359 = NameAndType        #495:#496     // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+  #360 = Utf8               number\n+  #361 = NameAndType        #233:#200     // optEnum:(Ljava/lang/Class;I)Ljava/lang/Enum;\n+  #362 = Utf8               enum of type\n+  #363 = NameAndType        #497:#284     // getSimpleName:()Ljava/lang/String;\n+  #364 = NameAndType        #498:#220     // quote:(Ljava/lang/String;)Ljava/lang/String;\n+  #365 = NameAndType        #499:#500     // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #366 = Utf8               BigDecimal\n+  #367 = NameAndType        #501:#502     // objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #368 = Utf8               BigInteger\n+  #369 = NameAndType        #503:#222     // intValue:()I\n+  #370 = Class              #504          // java/lang/Integer\n+  #371 = NameAndType        #505:#506     // parseInt:(Ljava/lang/String;)I\n+  #372 = Utf8               int\n+  #373 = Utf8               org/json/JSONArray\n+  #374 = Utf8               JSONArray\n+  #375 = Utf8               org/json/JSONObject\n+  #376 = Utf8               JSONObject\n+  #377 = NameAndType        #507:#508     // longValue:()J\n+  #378 = Class              #509          // java/lang/Long\n+  #379 = NameAndType        #510:#511     // parseLong:(Ljava/lang/String;)J\n+  #380 = Utf8               long\n+  #381 = Utf8               String\n+  #382 = NameAndType        #221:#222     // length:()I\n+  #383 = Utf8\n+  #384 = NameAndType        #512:#513     // valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n+  #385 = NameAndType        #223:#172     // clear:()V\n+  #386 = NameAndType        #225:#226     // optBoolean:(IZ)Z\n+  #387 = NameAndType        #191:#192     // getBoolean:(I)Z\n+  #388 = Utf8               java/lang/Double\n+  #389 = NameAndType        #227:#228     // optDouble:(ID)D\n+  #390 = NameAndType        #245:#246     // optNumber:(ILjava/lang/Number;)Ljava/lang/Number;\n+  #391 = Utf8               java/lang/Float\n+  #392 = NameAndType        #229:#230     // optFloat:(IF)F\n+  #393 = NameAndType        #231:#232     // optInt:(II)I\n+  #394 = NameAndType        #233:#234     // optEnum:(Ljava/lang/Class;ILjava/lang/Enum;)Ljava/lang/Enum;\n+  #395 = NameAndType        #514:#515     // isAssignableFrom:(Ljava/lang/Class;)Z\n+  #396 = Utf8               java/lang/Enum\n+  #397 = NameAndType        #516:#517     // valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+  #398 = Utf8               java/lang/IllegalArgumentException\n+  #399 = Utf8               java/lang/NullPointerException\n+  #400 = NameAndType        #243:#244     // optLong:(IJ)J\n+  #401 = NameAndType        #247:#248     // optString:(ILjava/lang/String;)Ljava/lang/String;\n+  #402 = NameAndType        #249:#259     // put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n+  #403 = NameAndType        #516:#518     // valueOf:(D)Ljava/lang/Double;\n+  #404 = NameAndType        #516:#519     // valueOf:(F)Ljava/lang/Float;\n+  #405 = NameAndType        #516:#520     // valueOf:(I)Ljava/lang/Integer;\n+  #406 = NameAndType        #516:#521     // valueOf:(J)Ljava/lang/Long;\n+  #407 = NameAndType        #171:#522     // \"<init>\":(Ljava/util/Map;)V\n+  #408 = NameAndType        #523:#184     // testValidity:(Ljava/lang/Object;)V\n+  #409 = NameAndType        #249:#269     // put:(ILjava/lang/Object;)Lorg/json/JSONArray;\n+  #410 = NameAndType        #524:#525     // set:(ILjava/lang/Object;)Ljava/lang/Object;\n+  #411 = NameAndType        #526:#185     // ensureCapacity:(I)V\n+  #412 = NameAndType        #297:#527     // addAll:(Ljava/util/Collection;)Z\n+  #413 = Utf8               org/json/JSONPointer\n+  #414 = NameAndType        #274:#276     // query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+  #415 = NameAndType        #528:#529     // queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #416 = NameAndType        #277:#276     // optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+  #417 = Utf8               org/json/JSONPointerException\n+  #418 = NameAndType        #278:#190     // remove:(I)Ljava/lang/Object;\n+  #419 = NameAndType        #279:#280     // similar:(Ljava/lang/Object;)Z\n+  #420 = NameAndType        #530:#531     // isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n+  #421 = Utf8               org/json/JSONString\n+  #422 = NameAndType        #532:#284     // toJSONString:()Ljava/lang/String;\n+  #423 = NameAndType        #295:#296     // isEmpty:()Z\n+  #424 = NameAndType        #216:#217     // getString:(I)Ljava/lang/String;\n+  #425 = NameAndType        #249:#533     // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #426 = NameAndType        #283:#217     // toString:(I)Ljava/lang/String;\n+  #427 = Utf8               java/io/StringWriter\n+  #428 = NameAndType        #534:#535     // getBuffer:()Ljava/lang/StringBuffer;\n+  #429 = NameAndType        #286:#288     // write:(Ljava/io/Writer;II)Ljava/io/Writer;\n+  #430 = NameAndType        #286:#185     // write:(I)V\n+  #431 = NameAndType        #536:#537     // writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+  #432 = Utf8               Unable to write JSONArray value at index: 0\n+  #433 = NameAndType        #171:#538     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #434 = NameAndType        #539:#540     // indent:(Ljava/io/Writer;I)V\n+  #435 = Utf8               Unable to write JSONArray value at index:\n+  #436 = Utf8               java/io/IOException\n+  #437 = NameAndType        #171:#541     // \"<init>\":(Ljava/lang/Throwable;)V\n+  #438 = NameAndType        #542:#296     // hasNext:()Z\n+  #439 = NameAndType        #543:#473     // next:()Ljava/lang/Object;\n+  #440 = NameAndType        #290:#291     // toList:()Ljava/util/List;\n+  #441 = NameAndType        #544:#545     // toMap:()Ljava/util/Map;\n+  #442 = NameAndType        #546:#529     // wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #443 = Class              #547          // java/lang/reflect/Array\n+  #444 = NameAndType        #548:#549     // getLength:(Ljava/lang/Object;)I\n+  #445 = NameAndType        #189:#550     // get:(Ljava/lang/Object;I)Ljava/lang/Object;\n+  #446 = Utf8               java/util/Collection\n+  #447 = Utf8               java/lang/Iterable\n+  #448 = Utf8               ] is not a\n+  #449 = Utf8                (null).\n+  #450 = Utf8               java/util/Map\n+  #451 = Utf8                (\n+  #452 = NameAndType        #478:#551     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #453 = Utf8               ).\n+  #454 = Utf8                :\n+  #455 = Utf8               java/lang/Object\n+  #456 = Utf8               java/math/BigDecimal\n+  #457 = Utf8               java/math/BigInteger\n+  #458 = Utf8               java/lang/Class\n+  #459 = Utf8               java/lang/Boolean\n+  #460 = Utf8               java/lang/Throwable\n+  #461 = Utf8               java/io/Writer\n+  #462 = Utf8               java/util/List\n+  #463 = Utf8               java/util/Iterator\n+  #464 = Utf8               nextClean\n+  #465 = Utf8               ()C\n+  #466 = Utf8               syntaxError\n+  #467 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n+  #468 = Utf8               back\n+  #469 = Utf8               NULL\n+  #470 = Utf8               Ljava/lang/Object;\n+  #471 = Utf8               add\n+  #472 = Utf8               nextValue\n+  #473 = Utf8               ()Ljava/lang/Object;\n+  #474 = Utf8               size\n+  #475 = Utf8               getClass\n+  #476 = Utf8               ()Ljava/lang/Class;\n+  #477 = Utf8               isArray\n+  #478 = Utf8               append\n+  #479 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #480 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #481 = Utf8               FALSE\n+  #482 = Utf8               Ljava/lang/Boolean;\n+  #483 = Utf8               equals\n+  #484 = Utf8               equalsIgnoreCase\n+  #485 = Utf8               (Ljava/lang/String;)Z\n+  #486 = Utf8               TRUE\n+  #487 = Utf8               doubleValue\n+  #488 = Utf8               ()D\n+  #489 = Utf8               parseDouble\n+  #490 = Utf8               (Ljava/lang/String;)D\n+  #491 = Utf8               floatValue\n+  #492 = Utf8               ()F\n+  #493 = Utf8               parseFloat\n+  #494 = Utf8               (Ljava/lang/String;)F\n+  #495 = Utf8               stringToNumber\n+  #496 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n+  #497 = Utf8               getSimpleName\n+  #498 = Utf8               quote\n+  #499 = Utf8               objectToBigDecimal\n+  #500 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #501 = Utf8               objectToBigInteger\n+  #502 = Utf8               (Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #503 = Utf8               intValue\n+  #504 = Utf8               java/lang/Integer\n+  #505 = Utf8               parseInt\n+  #506 = Utf8               (Ljava/lang/String;)I\n+  #507 = Utf8               longValue\n+  #508 = Utf8               ()J\n+  #509 = Utf8               java/lang/Long\n+  #510 = Utf8               parseLong\n+  #511 = Utf8               (Ljava/lang/String;)J\n+  #512 = Utf8               valueToString\n+  #513 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n+  #514 = Utf8               isAssignableFrom\n+  #515 = Utf8               (Ljava/lang/Class;)Z\n+  #516 = Utf8               valueOf\n+  #517 = Utf8               (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+  #518 = Utf8               (D)Ljava/lang/Double;\n+  #519 = Utf8               (F)Ljava/lang/Float;\n+  #520 = Utf8               (I)Ljava/lang/Integer;\n+  #521 = Utf8               (J)Ljava/lang/Long;\n+  #522 = Utf8               (Ljava/util/Map;)V\n+  #523 = Utf8               testValidity\n+  #524 = Utf8               set\n+  #525 = Utf8               (ILjava/lang/Object;)Ljava/lang/Object;\n+  #526 = Utf8               ensureCapacity\n+  #527 = Utf8               (Ljava/util/Collection;)Z\n+  #528 = Utf8               queryFrom\n+  #529 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #530 = Utf8               isNumberSimilar\n+  #531 = Utf8               (Ljava/lang/Number;Ljava/lang/Number;)Z\n+  #532 = Utf8               toJSONString\n+  #533 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #534 = Utf8               getBuffer\n+  #535 = Utf8               ()Ljava/lang/StringBuffer;\n+  #536 = Utf8               writeValue\n+  #537 = Utf8               (Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+  #538 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #539 = Utf8               indent\n+  #540 = Utf8               (Ljava/io/Writer;I)V\n+  #541 = Utf8               (Ljava/lang/Throwable;)V\n+  #542 = Utf8               hasNext\n+  #543 = Utf8               next\n+  #544 = Utf8               toMap\n+  #545 = Utf8               ()Ljava/util/Map;\n+  #546 = Utf8               wrap\n+  #547 = Utf8               java/lang/reflect/Array\n+  #548 = Utf8               getLength\n+  #549 = Utf8               (Ljava/lang/Object;)I\n+  #550 = Utf8               (Ljava/lang/Object;I)Ljava/lang/Object;\n+  #551 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n {\n   private final java.util.ArrayList<java.lang.Object> myArrayList;\n     descriptor: Ljava/util/ArrayList;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n     Signature: #170                         // Ljava/util/ArrayList<Ljava/lang/Object;>;\n \n   public org.json.JSONArray();\n@@ -787,15 +766,15 @@\n         line 158: 45\n       StackMapTable: number_of_entries = 2\n         frame_type = 255 /* full_frame */\n           offset_delta = 22\n           locals = [ class org/json/JSONArray, class java/util/Collection ]\n           stack = []\n         frame_type = 22 /* same */\n-    Signature: #183                         // (Ljava/util/Collection<*>;)V\n+    Signature: #180                         // (Ljava/util/Collection<*>;)V\n \n   public org.json.JSONArray(java.lang.Iterable<?>);\n     descriptor: (Ljava/lang/Iterable;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n@@ -815,15 +794,15 @@\n         line 171: 9\n         line 172: 15\n       StackMapTable: number_of_entries = 1\n         frame_type = 255 /* full_frame */\n           offset_delta = 9\n           locals = [ class org/json/JSONArray, class java/lang/Iterable ]\n           stack = []\n-    Signature: #186                         // (Ljava/lang/Iterable<*>;)V\n+    Signature: #182                         // (Ljava/lang/Iterable<*>;)V\n \n   public org.json.JSONArray(org.json.JSONArray);\n     descriptor: (Lorg/json/JSONArray;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n@@ -934,15 +913,15 @@\n       stack=1, locals=1, args_size=1\n          0: aload_0\n          1: getfield      #4                  // Field myArrayList:Ljava/util/ArrayList;\n          4: invokevirtual #29                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;\n          7: areturn\n       LineNumberTable:\n         line 229: 0\n-    Signature: #193                         // ()Ljava/util/Iterator<Ljava/lang/Object;>;\n+    Signature: #188                         // ()Ljava/util/Iterator<Ljava/lang/Object;>;\n \n   public java.lang.Object get(int) throws org.json.JSONException;\n     descriptor: (I)Ljava/lang/Object;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=2\n          0: aload_0\n@@ -1219,15 +1198,15 @@\n         line 363: 47\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 47\n           locals = [ class java/lang/Enum ]\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #208                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;I)TE;\n+    Signature: #201                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;I)TE;\n \n   public java.math.BigDecimal getBigDecimal(int) throws org.json.JSONException;\n     descriptor: (I)Ljava/math/BigDecimal;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=2\n          0: aload_0\n@@ -1607,15 +1586,15 @@\n         16: aload_0\n         17: getfield      #4                  // Field myArrayList:Ljava/util/ArrayList;\n         20: iload_1\n         21: invokevirtual #80                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;\n         24: areturn\n       LineNumberTable:\n         line 566: 0\n-        line 567: 21\n+        line 567: 16\n         line 566: 24\n       StackMapTable: number_of_entries = 3\n         frame_type = 12 /* same */\n         frame_type = 3 /* same */\n         frame_type = 71 /* same_locals_1_stack_item */\n           stack = [ class java/lang/Object ]\n \n@@ -1790,15 +1769,15 @@\n          1: aload_1\n          2: iload_2\n          3: aconst_null\n          4: invokevirtual #96                 // Method optEnum:(Ljava/lang/Class;ILjava/lang/Enum;)Ljava/lang/Enum;\n          7: areturn\n       LineNumberTable:\n         line 718: 0\n-    Signature: #208                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;I)TE;\n+    Signature: #201                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;I)TE;\n \n   public <E extends java.lang.Enum<E>> E optEnum(java.lang.Class<E>, int, E);\n     descriptor: (Ljava/lang/Class;ILjava/lang/Enum;)Ljava/lang/Enum;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=6, args_size=4\n          0: aload_0\n@@ -1859,15 +1838,15 @@\n         frame_type = 21 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 9\n           locals = [ class org/json/JSONArray, class java/lang/Class, int, class java/lang/Enum ]\n           stack = [ class java/lang/IllegalArgumentException ]\n         frame_type = 67 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NullPointerException ]\n-    Signature: #247                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;ITE;)TE;\n+    Signature: #236                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;ITE;)TE;\n \n   public java.math.BigInteger optBigInteger(int, java.math.BigInteger);\n     descriptor: (ILjava/math/BigInteger;)Ljava/math/BigInteger;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=4, args_size=3\n          0: aload_0\n@@ -2092,15 +2071,15 @@\n         17: goto          24\n         20: aload_3\n         21: invokevirtual #50                 // Method java/lang/Object.toString:()Ljava/lang/String;\n         24: areturn\n       LineNumberTable:\n         line 918: 0\n         line 919: 6\n-        line 920: 21\n+        line 920: 20\n         line 919: 24\n       StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n           offset_delta = 20\n           locals = [ class java/lang/Object ]\n         frame_type = 67 /* same_locals_1_stack_item */\n           stack = [ class java/lang/String ]\n@@ -2138,15 +2117,15 @@\n          4: dup\n          5: aload_1\n          6: invokespecial #105                // Method \"<init>\":(Ljava/util/Collection;)V\n          9: invokevirtual #104                // Method put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n         12: areturn\n       LineNumberTable:\n         line 945: 0\n-    Signature: #266                         // (Ljava/util/Collection<*>;)Lorg/json/JSONArray;\n+    Signature: #253                         // (Ljava/util/Collection<*>;)Lorg/json/JSONArray;\n \n   public org.json.JSONArray put(double) throws org.json.JSONException;\n     descriptor: (D)Lorg/json/JSONArray;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n@@ -2210,15 +2189,15 @@\n          4: dup\n          5: aload_1\n          6: invokespecial #110                // Method org/json/JSONObject.\"<init>\":(Ljava/util/Map;)V\n          9: invokevirtual #104                // Method put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n         12: areturn\n       LineNumberTable:\n         line 1009: 0\n-    Signature: #271                         // (Ljava/util/Map<**>;)Lorg/json/JSONArray;\n+    Signature: #258                         // (Ljava/util/Map<**>;)Lorg/json/JSONArray;\n \n   public org.json.JSONArray put(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)Lorg/json/JSONArray;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n@@ -2276,15 +2255,15 @@\n          7: invokespecial #105                // Method \"<init>\":(Ljava/util/Collection;)V\n         10: invokevirtual #112                // Method put:(ILjava/lang/Object;)Lorg/json/JSONArray;\n         13: areturn\n       LineNumberTable:\n         line 1059: 0\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #275                         // (ILjava/util/Collection<*>;)Lorg/json/JSONArray;\n+    Signature: #262                         // (ILjava/util/Collection<*>;)Lorg/json/JSONArray;\n \n   public org.json.JSONArray put(int, double) throws org.json.JSONException;\n     descriptor: (ID)Lorg/json/JSONArray;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=3\n          0: aload_0\n@@ -2362,15 +2341,15 @@\n         14: aload_0\n         15: areturn\n       LineNumberTable:\n         line 1146: 0\n         line 1147: 14\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #281                         // (ILjava/util/Map<**>;)Lorg/json/JSONArray;\n+    Signature: #268                         // (ILjava/util/Map<**>;)Lorg/json/JSONArray;\n \n   public org.json.JSONArray put(int, java.lang.Object) throws org.json.JSONException;\n     descriptor: (ILjava/lang/Object;)Lorg/json/JSONArray;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: iload_1\n@@ -2463,15 +2442,15 @@\n          2: iconst_0\n          3: invokespecial #19                 // Method addAll:(Ljava/util/Collection;Z)V\n          6: aload_0\n          7: areturn\n       LineNumberTable:\n         line 1197: 0\n         line 1198: 6\n-    Signature: #266                         // (Ljava/util/Collection<*>;)Lorg/json/JSONArray;\n+    Signature: #253                         // (Ljava/util/Collection<*>;)Lorg/json/JSONArray;\n \n   public org.json.JSONArray putAll(java.lang.Iterable<?>);\n     descriptor: (Ljava/lang/Iterable;)Lorg/json/JSONArray;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n@@ -2479,15 +2458,15 @@\n          2: iconst_0\n          3: invokespecial #20                 // Method addAll:(Ljava/lang/Iterable;Z)V\n          6: aload_0\n          7: areturn\n       LineNumberTable:\n         line 1209: 0\n         line 1210: 6\n-    Signature: #285                         // (Ljava/lang/Iterable<*>;)Lorg/json/JSONArray;\n+    Signature: #272                         // (Ljava/lang/Iterable<*>;)Lorg/json/JSONArray;\n \n   public org.json.JSONArray putAll(org.json.JSONArray);\n     descriptor: (Lorg/json/JSONArray;)Lorg/json/JSONArray;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n@@ -2600,15 +2579,16 @@\n         16: iload_1\n         17: invokevirtual #122                // Method java/util/ArrayList.remove:(I)Ljava/lang/Object;\n         20: goto          24\n         23: aconst_null\n         24: areturn\n       LineNumberTable:\n         line 1328: 0\n-        line 1329: 17\n+        line 1329: 12\n+        line 1330: 23\n         line 1328: 24\n       StackMapTable: number_of_entries = 2\n         frame_type = 23 /* same */\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ class java/lang/Object ]\n \n   public boolean similar(java.lang.Object);\n@@ -3155,15 +3135,15 @@\n         frame_type = 10 /* same */\n         frame_type = 23 /* same */\n         frame_type = 23 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 7\n         frame_type = 250 /* chop */\n           offset_delta = 2\n-    Signature: #310                         // ()Ljava/util/List<Ljava/lang/Object;>;\n+    Signature: #294                         // ()Ljava/util/List<Ljava/lang/Object;>;\n \n   public boolean isEmpty();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -3238,15 +3218,15 @@\n           offset_delta = 29\n         frame_type = 2 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 6\n           locals = [ class java/util/Iterator ]\n         frame_type = 250 /* chop */\n           offset_delta = 26\n-    Signature: #315                         // (Ljava/util/Collection<*>;Z)V\n+    Signature: #299                         // (Ljava/util/Collection<*>;Z)V\n \n   private void addAll(java.lang.Iterable<?>, boolean);\n     descriptor: (Ljava/lang/Iterable;Z)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=5, args_size=3\n          0: iload_2\n@@ -3299,15 +3279,15 @@\n           offset_delta = 29\n         frame_type = 2 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 6\n           locals = [ class java/util/Iterator ]\n         frame_type = 250 /* chop */\n           offset_delta = 26\n-    Signature: #317                         // (Ljava/lang/Iterable<*>;Z)V\n+    Signature: #301                         // (Ljava/lang/Iterable<*>;Z)V\n \n   private void addAll(java.lang.Object, boolean) throws org.json.JSONException;\n     descriptor: (Ljava/lang/Object;Z)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=5, args_size=3\n          0: aload_1\n@@ -3528,9 +3508,9 @@\n         line 1693: 156\n         line 1692: 183\n       StackMapTable: number_of_entries = 3\n         frame_type = 46 /* same */\n         frame_type = 20 /* same */\n         frame_type = 53 /* same */\n }\n-Signature: #321                         // Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Object;>;\n+Signature: #305                         // Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Object;>;\n SourceFile: \"JSONArray.java\"\n"}]}
