{"diffoscope-json-version": 1, "source1": "first/BitInputStream.class", "source2": "second/BitInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,39 +1,39 @@\n-  SHA-256 checksum bfc39c0f0c2c4dfcb38b00bb3e08918489283e9f1c24c4b249619712da6f29d7\n+  SHA-256 checksum 1b85da34a27cc3340383d0558b8dea98c4f812aafd299bf6be237b5a3703fde7\n   Compiled from \"BitInputStream.java\"\n public class org.apache.commons.compress.utils.BitInputStream implements java.io.Closeable\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #7                          // org/apache/commons/compress/utils/BitInputStream\n   super_class: #23                        // java/lang/Object\n   interfaces: 1, fields: 6, methods: 11, attributes: 1\n Constant pool:\n-    #1 = Methodref          #23.#74       // java/lang/Object.\"<init>\":()V\n-    #2 = Fieldref           #7.#75        // org/apache/commons/compress/utils/BitInputStream.bitsCached:J\n-    #3 = Fieldref           #7.#76        // org/apache/commons/compress/utils/BitInputStream.bitsCachedSize:I\n-    #4 = Fieldref           #7.#77        // org/apache/commons/compress/utils/BitInputStream.in:Ljava/io/InputStream;\n-    #5 = Fieldref           #7.#78        // org/apache/commons/compress/utils/BitInputStream.byteOrder:Ljava/nio/ByteOrder;\n-    #6 = Methodref          #79.#80       // java/io/InputStream.close:()V\n-    #7 = Class              #81           // org/apache/commons/compress/utils/BitInputStream\n-    #8 = Class              #82           // java/lang/IllegalArgumentException\n-    #9 = String             #83           // count must not be negative or greater than 63\n-   #10 = Methodref          #8.#84        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #11 = Methodref          #7.#85        // org/apache/commons/compress/utils/BitInputStream.ensureCache:(I)Z\n+    #1 = Methodref          #23.#73       // java/lang/Object.\"<init>\":()V\n+    #2 = Fieldref           #7.#74        // org/apache/commons/compress/utils/BitInputStream.bitsCached:J\n+    #3 = Fieldref           #7.#75        // org/apache/commons/compress/utils/BitInputStream.bitsCachedSize:I\n+    #4 = Fieldref           #7.#76        // org/apache/commons/compress/utils/BitInputStream.in:Ljava/io/InputStream;\n+    #5 = Fieldref           #7.#77        // org/apache/commons/compress/utils/BitInputStream.byteOrder:Ljava/nio/ByteOrder;\n+    #6 = Methodref          #78.#79       // java/io/InputStream.close:()V\n+    #7 = Class              #80           // org/apache/commons/compress/utils/BitInputStream\n+    #8 = Class              #81           // java/lang/IllegalArgumentException\n+    #9 = String             #82           // count must not be negative or greater than 63\n+   #10 = Methodref          #8.#83        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #11 = Methodref          #7.#84        // org/apache/commons/compress/utils/BitInputStream.ensureCache:(I)Z\n    #12 = Long               -1l\n-   #14 = Methodref          #7.#86        // org/apache/commons/compress/utils/BitInputStream.processBitsGreater57:(I)J\n-   #15 = Methodref          #7.#87        // org/apache/commons/compress/utils/BitInputStream.readCachedBits:(I)J\n-   #16 = Class              #88           // java/lang/Byte\n+   #14 = Methodref          #7.#85        // org/apache/commons/compress/utils/BitInputStream.processBitsGreater57:(I)J\n+   #15 = Methodref          #7.#86        // org/apache/commons/compress/utils/BitInputStream.readCachedBits:(I)J\n+   #16 = Class              #87           // java/lang/Byte\n    #17 = Long               8l\n-   #19 = Methodref          #79.#89       // java/io/InputStream.available:()I\n-   #20 = Methodref          #79.#90       // java/io/InputStream.read:()I\n-   #21 = Fieldref           #91.#92       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #22 = Fieldref           #7.#93        // org/apache/commons/compress/utils/BitInputStream.MASKS:[J\n-   #23 = Class              #94           // java/lang/Object\n-   #24 = Class              #95           // java/io/Closeable\n+   #19 = Methodref          #78.#88       // java/io/InputStream.available:()I\n+   #20 = Methodref          #78.#89       // java/io/InputStream.read:()I\n+   #21 = Fieldref           #90.#91       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #22 = Fieldref           #7.#92        // org/apache/commons/compress/utils/BitInputStream.MASKS:[J\n+   #23 = Class              #93           // java/lang/Object\n+   #24 = Class              #94           // java/io/Closeable\n    #25 = Utf8               MAXIMUM_CACHE_SIZE\n    #26 = Utf8               I\n    #27 = Utf8               ConstantValue\n    #28 = Integer            63\n    #29 = Utf8               MASKS\n    #30 = Utf8               [J\n    #31 = Utf8               in\n@@ -49,15 +49,15 @@\n    #41 = Utf8               LineNumberTable\n    #42 = Utf8               LocalVariableTable\n    #43 = Utf8               this\n    #44 = Utf8               Lorg/apache/commons/compress/utils/BitInputStream;\n    #45 = Utf8               close\n    #46 = Utf8               ()V\n    #47 = Utf8               Exceptions\n-   #48 = Class              #96           // java/io/IOException\n+   #48 = Class              #95           // java/io/IOException\n    #49 = Utf8               clearBitCache\n    #50 = Utf8               readBits\n    #51 = Utf8               (I)J\n    #52 = Utf8               count\n    #53 = Utf8               StackMapTable\n    #54 = Utf8               ()I\n    #55 = Utf8               bitsAvailable\n@@ -67,51 +67,50 @@\n    #59 = Utf8               processBitsGreater57\n    #60 = Utf8               bitsToAdd\n    #61 = Utf8               bitsOut\n    #62 = Utf8               overflowBits\n    #63 = Utf8               overflow\n    #64 = Utf8               bitsToAddCount\n    #65 = Utf8               nextByte\n-   #66 = Class              #81           // org/apache/commons/compress/utils/BitInputStream\n-   #67 = Utf8               readCachedBits\n-   #68 = Utf8               ensureCache\n-   #69 = Utf8               (I)Z\n-   #70 = Utf8               <clinit>\n-   #71 = Utf8               i\n-   #72 = Utf8               SourceFile\n-   #73 = Utf8               BitInputStream.java\n-   #74 = NameAndType        #38:#46       // \"<init>\":()V\n-   #75 = NameAndType        #35:#36       // bitsCached:J\n-   #76 = NameAndType        #37:#26       // bitsCachedSize:I\n-   #77 = NameAndType        #31:#32       // in:Ljava/io/InputStream;\n-   #78 = NameAndType        #33:#34       // byteOrder:Ljava/nio/ByteOrder;\n-   #79 = Class              #97           // java/io/InputStream\n-   #80 = NameAndType        #45:#46       // close:()V\n-   #81 = Utf8               org/apache/commons/compress/utils/BitInputStream\n-   #82 = Utf8               java/lang/IllegalArgumentException\n-   #83 = Utf8               count must not be negative or greater than 63\n-   #84 = NameAndType        #38:#98       // \"<init>\":(Ljava/lang/String;)V\n-   #85 = NameAndType        #68:#69       // ensureCache:(I)Z\n-   #86 = NameAndType        #59:#51       // processBitsGreater57:(I)J\n-   #87 = NameAndType        #67:#51       // readCachedBits:(I)J\n-   #88 = Utf8               java/lang/Byte\n-   #89 = NameAndType        #99:#54       // available:()I\n-   #90 = NameAndType        #100:#54      // read:()I\n-   #91 = Class              #101          // java/nio/ByteOrder\n-   #92 = NameAndType        #102:#34      // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #93 = NameAndType        #29:#30       // MASKS:[J\n-   #94 = Utf8               java/lang/Object\n-   #95 = Utf8               java/io/Closeable\n-   #96 = Utf8               java/io/IOException\n-   #97 = Utf8               java/io/InputStream\n-   #98 = Utf8               (Ljava/lang/String;)V\n-   #99 = Utf8               available\n-  #100 = Utf8               read\n-  #101 = Utf8               java/nio/ByteOrder\n-  #102 = Utf8               LITTLE_ENDIAN\n+   #66 = Utf8               readCachedBits\n+   #67 = Utf8               ensureCache\n+   #68 = Utf8               (I)Z\n+   #69 = Utf8               <clinit>\n+   #70 = Utf8               i\n+   #71 = Utf8               SourceFile\n+   #72 = Utf8               BitInputStream.java\n+   #73 = NameAndType        #38:#46       // \"<init>\":()V\n+   #74 = NameAndType        #35:#36       // bitsCached:J\n+   #75 = NameAndType        #37:#26       // bitsCachedSize:I\n+   #76 = NameAndType        #31:#32       // in:Ljava/io/InputStream;\n+   #77 = NameAndType        #33:#34       // byteOrder:Ljava/nio/ByteOrder;\n+   #78 = Class              #96           // java/io/InputStream\n+   #79 = NameAndType        #45:#46       // close:()V\n+   #80 = Utf8               org/apache/commons/compress/utils/BitInputStream\n+   #81 = Utf8               java/lang/IllegalArgumentException\n+   #82 = Utf8               count must not be negative or greater than 63\n+   #83 = NameAndType        #38:#97       // \"<init>\":(Ljava/lang/String;)V\n+   #84 = NameAndType        #67:#68       // ensureCache:(I)Z\n+   #85 = NameAndType        #59:#51       // processBitsGreater57:(I)J\n+   #86 = NameAndType        #66:#51       // readCachedBits:(I)J\n+   #87 = Utf8               java/lang/Byte\n+   #88 = NameAndType        #98:#54       // available:()I\n+   #89 = NameAndType        #99:#54       // read:()I\n+   #90 = Class              #100          // java/nio/ByteOrder\n+   #91 = NameAndType        #101:#34      // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #92 = NameAndType        #29:#30       // MASKS:[J\n+   #93 = Utf8               java/lang/Object\n+   #94 = Utf8               java/io/Closeable\n+   #95 = Utf8               java/io/IOException\n+   #96 = Utf8               java/io/InputStream\n+   #97 = Utf8               (Ljava/lang/String;)V\n+   #98 = Utf8               available\n+   #99 = Utf8               read\n+  #100 = Utf8               java/nio/ByteOrder\n+  #101 = Utf8               LITTLE_ENDIAN\n {\n   private static final int MAXIMUM_CACHE_SIZE = 63;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 63\n \n   private static final long[] MASKS;\n"}]}
