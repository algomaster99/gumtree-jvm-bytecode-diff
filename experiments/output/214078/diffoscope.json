{"diffoscope-json-version": 1, "source1": "first/RExecClient.class", "source2": "second/RExecClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,26 +19,26 @@\n     \n     public RExecClient() {\n         this._errorStream_ = null;\n         this.setDefaultPort(512);\n     }\n     \n     InputStream createErrorStream() throws IOException {\n-        Socket socket;\n-        try (final ServerSocket server = this._serverSocketFactory_.createServerSocket(0, 1, this.getLocalAddress())) {\n-            this._output_.write(Integer.toString(server.getLocalPort()).getBytes(StandardCharsets.UTF_8));\n+        Socket accept;\n+        try (final ServerSocket serverSocket = this._serverSocketFactory_.createServerSocket(0, 1, this.getLocalAddress())) {\n+            this._output_.write(Integer.toString(serverSocket.getLocalPort()).getBytes(StandardCharsets.UTF_8));\n             this._output_.write(0);\n             this._output_.flush();\n-            socket = server.accept();\n+            accept = serverSocket.accept();\n         }\n-        if (this.remoteVerificationEnabled && !this.verifyRemote(socket)) {\n-            socket.close();\n-            throw new IOException(\"Security violation: unexpected connection attempt by \" + socket.getInetAddress().getHostAddress());\n+        if (this.remoteVerificationEnabled && !this.verifyRemote(accept)) {\n+            accept.close();\n+            throw new IOException(\"Security violation: unexpected connection attempt by \" + accept.getInetAddress().getHostAddress());\n         }\n-        return (InputStream)new SocketInputStream(socket, socket.getInputStream());\n+        return (InputStream)new SocketInputStream(accept, accept.getInputStream());\n     }\n     \n     public void disconnect() throws IOException {\n         if (this._errorStream_ != null) {\n             this._errorStream_.close();\n         }\n         this._errorStream_ = null;\n@@ -57,42 +57,43 @@\n         return this._output_;\n     }\n     \n     public final boolean isRemoteVerificationEnabled() {\n         return this.remoteVerificationEnabled;\n     }\n     \n-    public void rexec(final String username, final String password, final String command) throws IOException {\n-        this.rexec(username, password, command, false);\n+    public void rexec(final String s, final String s2, final String s3) throws IOException {\n+        this.rexec(s, s2, s3, false);\n     }\n     \n-    public void rexec(final String username, final String password, final String command, final boolean separateErrorStream) throws IOException {\n-        if (separateErrorStream) {\n+    public void rexec(final String s, final String s2, final String s3, final boolean b) throws IOException {\n+        if (b) {\n             this._errorStream_ = this.createErrorStream();\n         }\n         else {\n             this._output_.write(0);\n         }\n-        this._output_.write(username.getBytes(this.getCharset()));\n+        this._output_.write(s.getBytes(this.getCharset()));\n         this._output_.write(0);\n-        this._output_.write(password.getBytes(this.getCharset()));\n+        this._output_.write(s2.getBytes(this.getCharset()));\n         this._output_.write(0);\n-        this._output_.write(command.getBytes(this.getCharset()));\n+        this._output_.write(s3.getBytes(this.getCharset()));\n         this._output_.write(0);\n         this._output_.flush();\n-        int ch = this._input_.read();\n-        if (ch > 0) {\n-            final StringBuilder buffer = new StringBuilder();\n-            while ((ch = this._input_.read()) != -1 && ch != 10) {\n-                buffer.append((char)ch);\n+        final int read = this._input_.read();\n+        if (read > 0) {\n+            final StringBuilder sb = new StringBuilder();\n+            int read2;\n+            while ((read2 = this._input_.read()) != -1 && read2 != 10) {\n+                sb.append((char)read2);\n             }\n-            throw new IOException(buffer.toString());\n+            throw new IOException(sb.toString());\n         }\n-        if (ch < 0) {\n+        if (read < 0) {\n             throw new IOException(\"Server closed connection.\");\n         }\n     }\n     \n-    public final void setRemoteVerificationEnabled(final boolean enable) {\n-        this.remoteVerificationEnabled = enable;\n+    public final void setRemoteVerificationEnabled(final boolean remoteVerificationEnabled) {\n+        this.remoteVerificationEnabled = remoteVerificationEnabled;\n     }\n }\n"}]}
