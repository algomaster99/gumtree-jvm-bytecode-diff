{"diffoscope-json-version": 1, "source1": "first/MultiReadOnlySeekableByteChannel.class", "source2": "second/MultiReadOnlySeekableByteChannel.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,207 +1,207 @@\n-  SHA-256 checksum 90f405249371c7cf3d82bede27efa6b2e06538ef6f44d93e253e4701ca1e9d57\n+  SHA-256 checksum 83fff9cd893640a863fa8a45ba8ef56111ced051b2bef672011bdfb054795f01\n   Compiled from \"MultiReadOnlySeekableByteChannel.java\"\n public class org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel implements java.nio.channels.SeekableByteChannel\n   minor version: 0\n   major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #38                         // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n-  super_class: #49                        // java/lang/Object\n+  this_class: #29                         // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n+  super_class: #2                         // java/lang/Object\n   interfaces: 1, fields: 3, methods: 12, attributes: 3\n Constant pool:\n-    #1 = Methodref          #49.#86       // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #87           // java/util/ArrayList\n-    #3 = String             #88           // channels must not be null\n-    #4 = Methodref          #89.#90       // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-    #5 = Class              #91           // java/util/Collection\n-    #6 = Methodref          #2.#92        // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n-    #7 = Methodref          #93.#94       // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-    #8 = Fieldref           #38.#95       // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.channels:Ljava/util/List;\n-    #9 = Methodref          #38.#96       // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.isOpen:()Z\n-   #10 = Class              #97           // java/nio/channels/ClosedChannelException\n-   #11 = Methodref          #10.#86       // java/nio/channels/ClosedChannelException.\"<init>\":()V\n-   #12 = Methodref          #98.#99       // java/nio/ByteBuffer.hasRemaining:()Z\n-   #13 = Fieldref           #38.#100      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.currentChannelIdx:I\n-   #14 = InterfaceMethodref #83.#101      // java/util/List.size:()I\n-   #15 = InterfaceMethodref #83.#102      // java/util/List.get:(I)Ljava/lang/Object;\n-   #16 = Class              #103          // java/nio/channels/SeekableByteChannel\n-   #17 = InterfaceMethodref #16.#104      // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n-   #18 = InterfaceMethodref #16.#105      // java/nio/channels/SeekableByteChannel.position:()J\n-   #19 = InterfaceMethodref #16.#106      // java/nio/channels/SeekableByteChannel.size:()J\n-   #20 = Fieldref           #38.#107      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.globalPosition:J\n-   #21 = InterfaceMethodref #83.#108      // java/util/List.iterator:()Ljava/util/Iterator;\n-   #22 = InterfaceMethodref #69.#109      // java/util/Iterator.hasNext:()Z\n-   #23 = InterfaceMethodref #69.#110      // java/util/Iterator.next:()Ljava/lang/Object;\n-   #24 = InterfaceMethodref #16.#111      // java/nio/channels/SeekableByteChannel.close:()V\n-   #25 = Class              #112          // java/io/IOException\n-   #26 = String             #113          // failed to close wrapped channel\n-   #27 = Methodref          #25.#114      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #28 = InterfaceMethodref #16.#96       // java/nio/channels/SeekableByteChannel.isOpen:()Z\n-   #29 = Methodref          #38.#115      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #30 = Class              #116          // java/nio/channels/NonWritableChannelException\n-   #31 = Methodref          #30.#86       // java/nio/channels/NonWritableChannelException.\"<init>\":()V\n-   #32 = InvokeDynamic      #0:#120       // #0:makeConcatWithConstants:(J)Ljava/lang/String;\n-   #33 = Methodref          #25.#121      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #34 = Long               -1l\n-   #36 = InterfaceMethodref #16.#115      // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #37 = Class              #122          // \"[Ljava/nio/channels/SeekableByteChannel;\"\n-   #38 = Class              #123          // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n-   #39 = Methodref          #124.#125     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-   #40 = Methodref          #38.#126      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n-   #41 = Methodref          #2.#86        // java/util/ArrayList.\"<init>\":()V\n-   #42 = String             #127          // files must not be null\n-   #43 = Class              #128          // \"[Ljava/io/File;\"\n-   #44 = Methodref          #129.#130     // java/io/File.toPath:()Ljava/nio/file/Path;\n-   #45 = Class              #131          // java/nio/file/OpenOption\n-   #46 = Fieldref           #132.#133     // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-   #47 = Methodref          #134.#135     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-   #48 = InterfaceMethodref #83.#136      // java/util/List.add:(Ljava/lang/Object;)Z\n-   #49 = Class              #137          // java/lang/Object\n-   #50 = Utf8               channels\n-   #51 = Utf8               Ljava/util/List;\n-   #52 = Utf8               Signature\n-   #53 = Utf8               Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n-   #54 = Utf8               globalPosition\n-   #55 = Utf8               J\n-   #56 = Utf8               currentChannelIdx\n-   #57 = Utf8               I\n-   #58 = Utf8               <init>\n-   #59 = Utf8               (Ljava/util/List;)V\n-   #60 = Utf8               Code\n-   #61 = Utf8               LineNumberTable\n-   #62 = Utf8               (Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;)V\n-   #63 = Utf8               read\n-   #64 = Utf8               (Ljava/nio/ByteBuffer;)I\n-   #65 = Utf8               StackMapTable\n-   #66 = Utf8               Exceptions\n-   #67 = Utf8               close\n-   #68 = Utf8               ()V\n-   #69 = Class              #138          // java/util/Iterator\n-   #70 = Utf8               isOpen\n-   #71 = Utf8               ()Z\n-   #72 = Utf8               position\n-   #73 = Utf8               ()J\n-   #74 = Utf8               (JJ)Ljava/nio/channels/SeekableByteChannel;\n-   #75 = Utf8               size\n-   #76 = Utf8               truncate\n-   #77 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-   #78 = Utf8               write\n-   #79 = Utf8               forSeekableByteChannels\n-   #80 = Utf8               ([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n-   #81 = Utf8               forFiles\n-   #82 = Utf8               ([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-   #83 = Class              #139          // java/util/List\n-   #84 = Utf8               SourceFile\n-   #85 = Utf8               MultiReadOnlySeekableByteChannel.java\n-   #86 = NameAndType        #58:#68       // \"<init>\":()V\n-   #87 = Utf8               java/util/ArrayList\n-   #88 = Utf8               channels must not be null\n-   #89 = Class              #140          // java/util/Objects\n-   #90 = NameAndType        #141:#142     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #91 = Utf8               java/util/Collection\n-   #92 = NameAndType        #58:#143      // \"<init>\":(Ljava/util/Collection;)V\n-   #93 = Class              #144          // java/util/Collections\n-   #94 = NameAndType        #145:#146     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-   #95 = NameAndType        #50:#51       // channels:Ljava/util/List;\n-   #96 = NameAndType        #70:#71       // isOpen:()Z\n-   #97 = Utf8               java/nio/channels/ClosedChannelException\n-   #98 = Class              #147          // java/nio/ByteBuffer\n-   #99 = NameAndType        #148:#71      // hasRemaining:()Z\n-  #100 = NameAndType        #56:#57       // currentChannelIdx:I\n-  #101 = NameAndType        #75:#149      // size:()I\n-  #102 = NameAndType        #150:#151     // get:(I)Ljava/lang/Object;\n-  #103 = Utf8               java/nio/channels/SeekableByteChannel\n-  #104 = NameAndType        #63:#64       // read:(Ljava/nio/ByteBuffer;)I\n-  #105 = NameAndType        #72:#73       // position:()J\n-  #106 = NameAndType        #75:#73       // size:()J\n-  #107 = NameAndType        #54:#55       // globalPosition:J\n-  #108 = NameAndType        #152:#153     // iterator:()Ljava/util/Iterator;\n-  #109 = NameAndType        #154:#71      // hasNext:()Z\n-  #110 = NameAndType        #155:#156     // next:()Ljava/lang/Object;\n-  #111 = NameAndType        #67:#68       // close:()V\n-  #112 = Utf8               java/io/IOException\n-  #113 = Utf8               failed to close wrapped channel\n-  #114 = NameAndType        #58:#157      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #115 = NameAndType        #72:#77       // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #116 = Utf8               java/nio/channels/NonWritableChannelException\n-  #117 = Utf8               BootstrapMethods\n-  #118 = MethodHandle       6:#158        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #119 = String             #159          // Negative position: \\u0001\n-  #120 = NameAndType        #160:#161     // makeConcatWithConstants:(J)Ljava/lang/String;\n-  #121 = NameAndType        #58:#162      // \"<init>\":(Ljava/lang/String;)V\n-  #122 = Utf8               [Ljava/nio/channels/SeekableByteChannel;\n-  #123 = Utf8               org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n-  #124 = Class              #163          // java/util/Arrays\n-  #125 = NameAndType        #164:#165     // asList:([Ljava/lang/Object;)Ljava/util/List;\n-  #126 = NameAndType        #58:#59       // \"<init>\":(Ljava/util/List;)V\n-  #127 = Utf8               files must not be null\n-  #128 = Utf8               [Ljava/io/File;\n-  #129 = Class              #166          // java/io/File\n-  #130 = NameAndType        #167:#168     // toPath:()Ljava/nio/file/Path;\n-  #131 = Utf8               java/nio/file/OpenOption\n-  #132 = Class              #169          // java/nio/file/StandardOpenOption\n-  #133 = NameAndType        #170:#171     // READ:Ljava/nio/file/StandardOpenOption;\n-  #134 = Class              #172          // java/nio/file/Files\n-  #135 = NameAndType        #173:#174     // newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-  #136 = NameAndType        #175:#176     // add:(Ljava/lang/Object;)Z\n-  #137 = Utf8               java/lang/Object\n-  #138 = Utf8               java/util/Iterator\n-  #139 = Utf8               java/util/List\n-  #140 = Utf8               java/util/Objects\n-  #141 = Utf8               requireNonNull\n-  #142 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #143 = Utf8               (Ljava/util/Collection;)V\n-  #144 = Utf8               java/util/Collections\n-  #145 = Utf8               unmodifiableList\n-  #146 = Utf8               (Ljava/util/List;)Ljava/util/List;\n-  #147 = Utf8               java/nio/ByteBuffer\n-  #148 = Utf8               hasRemaining\n-  #149 = Utf8               ()I\n-  #150 = Utf8               get\n-  #151 = Utf8               (I)Ljava/lang/Object;\n-  #152 = Utf8               iterator\n-  #153 = Utf8               ()Ljava/util/Iterator;\n-  #154 = Utf8               hasNext\n-  #155 = Utf8               next\n-  #156 = Utf8               ()Ljava/lang/Object;\n-  #157 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #158 = Methodref          #177.#178     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #159 = Utf8               Negative position: \\u0001\n-  #160 = Utf8               makeConcatWithConstants\n-  #161 = Utf8               (J)Ljava/lang/String;\n-  #162 = Utf8               (Ljava/lang/String;)V\n-  #163 = Utf8               java/util/Arrays\n-  #164 = Utf8               asList\n-  #165 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n-  #166 = Utf8               java/io/File\n-  #167 = Utf8               toPath\n-  #168 = Utf8               ()Ljava/nio/file/Path;\n-  #169 = Utf8               java/nio/file/StandardOpenOption\n-  #170 = Utf8               READ\n-  #171 = Utf8               Ljava/nio/file/StandardOpenOption;\n-  #172 = Utf8               java/nio/file/Files\n-  #173 = Utf8               newByteChannel\n-  #174 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-  #175 = Utf8               add\n-  #176 = Utf8               (Ljava/lang/Object;)Z\n-  #177 = Class              #179          // java/lang/invoke/StringConcatFactory\n-  #178 = NameAndType        #160:#183     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #179 = Utf8               java/lang/invoke/StringConcatFactory\n-  #180 = Class              #185          // java/lang/invoke/MethodHandles$Lookup\n-  #181 = Utf8               Lookup\n-  #182 = Utf8               InnerClasses\n-  #183 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #184 = Class              #186          // java/lang/invoke/MethodHandles\n-  #185 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #186 = Utf8               java/lang/invoke/MethodHandles\n+    #1 = Methodref          #2.#3         // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #4            // java/lang/Object\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               java/lang/Object\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Class              #8            // java/util/ArrayList\n+    #8 = Utf8               java/util/ArrayList\n+    #9 = String             #10           // channels must not be null\n+   #10 = Utf8               channels must not be null\n+   #11 = Methodref          #12.#13       // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #12 = Class              #14           // java/util/Objects\n+   #13 = NameAndType        #15:#16       // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #14 = Utf8               java/util/Objects\n+   #15 = Utf8               requireNonNull\n+   #16 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #17 = Class              #18           // java/util/Collection\n+   #18 = Utf8               java/util/Collection\n+   #19 = Methodref          #7.#20        // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n+   #20 = NameAndType        #5:#21        // \"<init>\":(Ljava/util/Collection;)V\n+   #21 = Utf8               (Ljava/util/Collection;)V\n+   #22 = Methodref          #23.#24       // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+   #23 = Class              #25           // java/util/Collections\n+   #24 = NameAndType        #26:#27       // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+   #25 = Utf8               java/util/Collections\n+   #26 = Utf8               unmodifiableList\n+   #27 = Utf8               (Ljava/util/List;)Ljava/util/List;\n+   #28 = Fieldref           #29.#30       // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.channels:Ljava/util/List;\n+   #29 = Class              #31           // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n+   #30 = NameAndType        #32:#33       // channels:Ljava/util/List;\n+   #31 = Utf8               org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n+   #32 = Utf8               channels\n+   #33 = Utf8               Ljava/util/List;\n+   #34 = Methodref          #29.#35       // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.isOpen:()Z\n+   #35 = NameAndType        #36:#37       // isOpen:()Z\n+   #36 = Utf8               isOpen\n+   #37 = Utf8               ()Z\n+   #38 = Class              #39           // java/nio/channels/ClosedChannelException\n+   #39 = Utf8               java/nio/channels/ClosedChannelException\n+   #40 = Methodref          #38.#3        // java/nio/channels/ClosedChannelException.\"<init>\":()V\n+   #41 = Methodref          #42.#43       // java/nio/ByteBuffer.hasRemaining:()Z\n+   #42 = Class              #44           // java/nio/ByteBuffer\n+   #43 = NameAndType        #45:#37       // hasRemaining:()Z\n+   #44 = Utf8               java/nio/ByteBuffer\n+   #45 = Utf8               hasRemaining\n+   #46 = Fieldref           #29.#47       // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.currentChannelIdx:I\n+   #47 = NameAndType        #48:#49       // currentChannelIdx:I\n+   #48 = Utf8               currentChannelIdx\n+   #49 = Utf8               I\n+   #50 = InterfaceMethodref #51.#52       // java/util/List.size:()I\n+   #51 = Class              #53           // java/util/List\n+   #52 = NameAndType        #54:#55       // size:()I\n+   #53 = Utf8               java/util/List\n+   #54 = Utf8               size\n+   #55 = Utf8               ()I\n+   #56 = InterfaceMethodref #51.#57       // java/util/List.get:(I)Ljava/lang/Object;\n+   #57 = NameAndType        #58:#59       // get:(I)Ljava/lang/Object;\n+   #58 = Utf8               get\n+   #59 = Utf8               (I)Ljava/lang/Object;\n+   #60 = Class              #61           // java/nio/channels/SeekableByteChannel\n+   #61 = Utf8               java/nio/channels/SeekableByteChannel\n+   #62 = InterfaceMethodref #60.#63       // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+   #63 = NameAndType        #64:#65       // read:(Ljava/nio/ByteBuffer;)I\n+   #64 = Utf8               read\n+   #65 = Utf8               (Ljava/nio/ByteBuffer;)I\n+   #66 = InterfaceMethodref #60.#67       // java/nio/channels/SeekableByteChannel.position:()J\n+   #67 = NameAndType        #68:#69       // position:()J\n+   #68 = Utf8               position\n+   #69 = Utf8               ()J\n+   #70 = InterfaceMethodref #60.#71       // java/nio/channels/SeekableByteChannel.size:()J\n+   #71 = NameAndType        #54:#69       // size:()J\n+   #72 = Fieldref           #29.#73       // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.globalPosition:J\n+   #73 = NameAndType        #74:#75       // globalPosition:J\n+   #74 = Utf8               globalPosition\n+   #75 = Utf8               J\n+   #76 = InterfaceMethodref #51.#77       // java/util/List.iterator:()Ljava/util/Iterator;\n+   #77 = NameAndType        #78:#79       // iterator:()Ljava/util/Iterator;\n+   #78 = Utf8               iterator\n+   #79 = Utf8               ()Ljava/util/Iterator;\n+   #80 = InterfaceMethodref #81.#82       // java/util/Iterator.hasNext:()Z\n+   #81 = Class              #83           // java/util/Iterator\n+   #82 = NameAndType        #84:#37       // hasNext:()Z\n+   #83 = Utf8               java/util/Iterator\n+   #84 = Utf8               hasNext\n+   #85 = InterfaceMethodref #81.#86       // java/util/Iterator.next:()Ljava/lang/Object;\n+   #86 = NameAndType        #87:#88       // next:()Ljava/lang/Object;\n+   #87 = Utf8               next\n+   #88 = Utf8               ()Ljava/lang/Object;\n+   #89 = InterfaceMethodref #60.#90       // java/nio/channels/SeekableByteChannel.close:()V\n+   #90 = NameAndType        #91:#6        // close:()V\n+   #91 = Utf8               close\n+   #92 = Class              #93           // java/io/IOException\n+   #93 = Utf8               java/io/IOException\n+   #94 = String             #95           // failed to close wrapped channel\n+   #95 = Utf8               failed to close wrapped channel\n+   #96 = Methodref          #92.#97       // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #97 = NameAndType        #5:#98        // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #98 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #99 = InterfaceMethodref #60.#35       // java/nio/channels/SeekableByteChannel.isOpen:()Z\n+  #100 = Methodref          #29.#101      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #101 = NameAndType        #68:#102      // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #102 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+  #103 = Class              #104          // java/nio/channels/NonWritableChannelException\n+  #104 = Utf8               java/nio/channels/NonWritableChannelException\n+  #105 = Methodref          #103.#3       // java/nio/channels/NonWritableChannelException.\"<init>\":()V\n+  #106 = InvokeDynamic      #0:#107       // #0:makeConcatWithConstants:(J)Ljava/lang/String;\n+  #107 = NameAndType        #108:#109     // makeConcatWithConstants:(J)Ljava/lang/String;\n+  #108 = Utf8               makeConcatWithConstants\n+  #109 = Utf8               (J)Ljava/lang/String;\n+  #110 = Methodref          #92.#111      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #111 = NameAndType        #5:#112       // \"<init>\":(Ljava/lang/String;)V\n+  #112 = Utf8               (Ljava/lang/String;)V\n+  #113 = Long               -1l\n+  #115 = InterfaceMethodref #60.#101      // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #116 = Class              #117          // \"[Ljava/nio/channels/SeekableByteChannel;\"\n+  #117 = Utf8               [Ljava/nio/channels/SeekableByteChannel;\n+  #118 = Methodref          #119.#120     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+  #119 = Class              #121          // java/util/Arrays\n+  #120 = NameAndType        #122:#123     // asList:([Ljava/lang/Object;)Ljava/util/List;\n+  #121 = Utf8               java/util/Arrays\n+  #122 = Utf8               asList\n+  #123 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n+  #124 = Methodref          #29.#125      // org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n+  #125 = NameAndType        #5:#126       // \"<init>\":(Ljava/util/List;)V\n+  #126 = Utf8               (Ljava/util/List;)V\n+  #127 = Methodref          #7.#3         // java/util/ArrayList.\"<init>\":()V\n+  #128 = String             #129          // files must not be null\n+  #129 = Utf8               files must not be null\n+  #130 = Class              #131          // \"[Ljava/io/File;\"\n+  #131 = Utf8               [Ljava/io/File;\n+  #132 = Methodref          #133.#134     // java/io/File.toPath:()Ljava/nio/file/Path;\n+  #133 = Class              #135          // java/io/File\n+  #134 = NameAndType        #136:#137     // toPath:()Ljava/nio/file/Path;\n+  #135 = Utf8               java/io/File\n+  #136 = Utf8               toPath\n+  #137 = Utf8               ()Ljava/nio/file/Path;\n+  #138 = Class              #139          // java/nio/file/OpenOption\n+  #139 = Utf8               java/nio/file/OpenOption\n+  #140 = Fieldref           #141.#142     // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+  #141 = Class              #143          // java/nio/file/StandardOpenOption\n+  #142 = NameAndType        #144:#145     // READ:Ljava/nio/file/StandardOpenOption;\n+  #143 = Utf8               java/nio/file/StandardOpenOption\n+  #144 = Utf8               READ\n+  #145 = Utf8               Ljava/nio/file/StandardOpenOption;\n+  #146 = Methodref          #147.#148     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+  #147 = Class              #149          // java/nio/file/Files\n+  #148 = NameAndType        #150:#151     // newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+  #149 = Utf8               java/nio/file/Files\n+  #150 = Utf8               newByteChannel\n+  #151 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+  #152 = InterfaceMethodref #51.#153      // java/util/List.add:(Ljava/lang/Object;)Z\n+  #153 = NameAndType        #154:#155     // add:(Ljava/lang/Object;)Z\n+  #154 = Utf8               add\n+  #155 = Utf8               (Ljava/lang/Object;)Z\n+  #156 = Utf8               Signature\n+  #157 = Utf8               Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n+  #158 = Utf8               Code\n+  #159 = Utf8               LineNumberTable\n+  #160 = Utf8               (Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;)V\n+  #161 = Utf8               StackMapTable\n+  #162 = Utf8               Exceptions\n+  #163 = Utf8               (JJ)Ljava/nio/channels/SeekableByteChannel;\n+  #164 = Utf8               truncate\n+  #165 = Utf8               write\n+  #166 = Utf8               forSeekableByteChannels\n+  #167 = Utf8               ([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n+  #168 = Utf8               forFiles\n+  #169 = Utf8               ([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+  #170 = Utf8               SourceFile\n+  #171 = Utf8               MultiReadOnlySeekableByteChannel.java\n+  #172 = Utf8               BootstrapMethods\n+  #173 = MethodHandle       6:#174        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #174 = Methodref          #175.#176     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #175 = Class              #177          // java/lang/invoke/StringConcatFactory\n+  #176 = NameAndType        #108:#178     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #177 = Utf8               java/lang/invoke/StringConcatFactory\n+  #178 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #179 = String             #180          // Negative position: \\u0001\n+  #180 = Utf8               Negative position: \\u0001\n+  #181 = Utf8               InnerClasses\n+  #182 = Class              #183          // java/lang/invoke/MethodHandles$Lookup\n+  #183 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #184 = Class              #185          // java/lang/invoke/MethodHandles\n+  #185 = Utf8               java/lang/invoke/MethodHandles\n+  #186 = Utf8               Lookup\n {\n   private final java.util.List<java.nio.channels.SeekableByteChannel> channels;\n     descriptor: Ljava/util/List;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #53                          // Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n+    Signature: #157                         // Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n \n   private long globalPosition;\n     descriptor: J\n     flags: (0x0002) ACC_PRIVATE\n \n   private int currentChannelIdx;\n     descriptor: I\n@@ -211,107 +211,107 @@\n     descriptor: (Ljava/util/List;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=2, args_size=2\n          0: aload_0\n          1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class java/util/ArrayList\n+         5: new           #7                  // class java/util/ArrayList\n          8: dup\n          9: aload_1\n-        10: ldc           #3                  // String channels must not be null\n-        12: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-        15: checkcast     #5                  // class java/util/Collection\n-        18: invokespecial #6                  // Method java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n-        21: invokestatic  #7                  // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-        24: putfield      #8                  // Field channels:Ljava/util/List;\n+        10: ldc           #9                  // String channels must not be null\n+        12: invokestatic  #11                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+        15: checkcast     #17                 // class java/util/Collection\n+        18: invokespecial #19                 // Method java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n+        21: invokestatic  #22                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+        24: putfield      #28                 // Field channels:Ljava/util/List;\n         27: return\n       LineNumberTable:\n         line 57: 0\n         line 58: 4\n         line 59: 12\n         line 58: 21\n         line 60: 27\n-    Signature: #62                          // (Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;)V\n+    Signature: #160                         // (Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;)V\n \n   public synchronized int read(java.nio.ByteBuffer) throws java.io.IOException;\n     descriptor: (Ljava/nio/ByteBuffer;)I\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n     Code:\n       stack=5, locals=5, args_size=2\n          0: aload_0\n-         1: invokevirtual #9                  // Method isOpen:()Z\n+         1: invokevirtual #34                 // Method isOpen:()Z\n          4: ifne          15\n-         7: new           #10                 // class java/nio/channels/ClosedChannelException\n+         7: new           #38                 // class java/nio/channels/ClosedChannelException\n         10: dup\n-        11: invokespecial #11                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n+        11: invokespecial #40                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n         14: athrow\n         15: aload_1\n-        16: invokevirtual #12                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n+        16: invokevirtual #41                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n         19: ifne          24\n         22: iconst_0\n         23: ireturn\n         24: iconst_0\n         25: istore_2\n         26: aload_1\n-        27: invokevirtual #12                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n+        27: invokevirtual #41                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n         30: ifeq          128\n         33: aload_0\n-        34: getfield      #13                 // Field currentChannelIdx:I\n+        34: getfield      #46                 // Field currentChannelIdx:I\n         37: aload_0\n-        38: getfield      #8                  // Field channels:Ljava/util/List;\n-        41: invokeinterface #14,  1           // InterfaceMethod java/util/List.size:()I\n+        38: getfield      #28                 // Field channels:Ljava/util/List;\n+        41: invokeinterface #50,  1           // InterfaceMethod java/util/List.size:()I\n         46: if_icmpge     128\n         49: aload_0\n-        50: getfield      #8                  // Field channels:Ljava/util/List;\n+        50: getfield      #28                 // Field channels:Ljava/util/List;\n         53: aload_0\n-        54: getfield      #13                 // Field currentChannelIdx:I\n-        57: invokeinterface #15,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n-        62: checkcast     #16                 // class java/nio/channels/SeekableByteChannel\n+        54: getfield      #46                 // Field currentChannelIdx:I\n+        57: invokeinterface #56,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n+        62: checkcast     #60                 // class java/nio/channels/SeekableByteChannel\n         65: astore_3\n         66: aload_3\n         67: aload_1\n-        68: invokeinterface #17,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+        68: invokeinterface #62,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         73: istore        4\n         75: iload         4\n         77: iconst_m1\n         78: if_icmpne     94\n         81: aload_0\n         82: dup\n-        83: getfield      #13                 // Field currentChannelIdx:I\n+        83: getfield      #46                 // Field currentChannelIdx:I\n         86: iconst_1\n         87: iadd\n-        88: putfield      #13                 // Field currentChannelIdx:I\n+        88: putfield      #46                 // Field currentChannelIdx:I\n         91: goto          26\n         94: aload_3\n-        95: invokeinterface #18,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        95: invokeinterface #66,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n        100: aload_3\n-       101: invokeinterface #19,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+       101: invokeinterface #70,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n        106: lcmp\n        107: iflt          120\n        110: aload_0\n        111: dup\n-       112: getfield      #13                 // Field currentChannelIdx:I\n+       112: getfield      #46                 // Field currentChannelIdx:I\n        115: iconst_1\n        116: iadd\n-       117: putfield      #13                 // Field currentChannelIdx:I\n+       117: putfield      #46                 // Field currentChannelIdx:I\n        120: iload_2\n        121: iload         4\n        123: iadd\n        124: istore_2\n        125: goto          26\n        128: iload_2\n        129: ifle          145\n        132: aload_0\n        133: dup\n-       134: getfield      #20                 // Field globalPosition:J\n+       134: getfield      #72                 // Field globalPosition:J\n        137: iload_2\n        138: i2l\n        139: ladd\n-       140: putfield      #20                 // Field globalPosition:J\n+       140: putfield      #72                 // Field globalPosition:J\n        143: iload_2\n        144: ireturn\n        145: iconst_m1\n        146: ireturn\n       LineNumberTable:\n         line 64: 0\n         line 65: 7\n@@ -352,40 +352,40 @@\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=5, args_size=1\n          0: aconst_null\n          1: astore_1\n          2: aload_0\n-         3: getfield      #8                  // Field channels:Ljava/util/List;\n-         6: invokeinterface #21,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n+         3: getfield      #28                 // Field channels:Ljava/util/List;\n+         6: invokeinterface #76,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n         11: astore_2\n         12: aload_2\n-        13: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n+        13: invokeinterface #80,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n         18: ifeq          52\n         21: aload_2\n-        22: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n-        27: checkcast     #16                 // class java/nio/channels/SeekableByteChannel\n+        22: invokeinterface #85,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        27: checkcast     #60                 // class java/nio/channels/SeekableByteChannel\n         30: astore_3\n         31: aload_3\n-        32: invokeinterface #24,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.close:()V\n+        32: invokeinterface #89,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.close:()V\n         37: goto          49\n         40: astore        4\n         42: aload_1\n         43: ifnonnull     49\n         46: aload         4\n         48: astore_1\n         49: goto          12\n         52: aload_1\n         53: ifnull        67\n-        56: new           #25                 // class java/io/IOException\n+        56: new           #92                 // class java/io/IOException\n         59: dup\n-        60: ldc           #26                 // String failed to close wrapped channel\n+        60: ldc           #94                 // String failed to close wrapped channel\n         62: aload_1\n-        63: invokespecial #27                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        63: invokespecial #96                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n         66: athrow\n         67: return\n       Exception table:\n          from    to  target type\n             31    37    40   Class java/io/IOException\n       LineNumberTable:\n         line 95: 0\n@@ -417,26 +417,26 @@\n \n   public boolean isOpen();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=3, args_size=1\n          0: aload_0\n-         1: getfield      #8                  // Field channels:Ljava/util/List;\n-         4: invokeinterface #21,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n+         1: getfield      #28                 // Field channels:Ljava/util/List;\n+         4: invokeinterface #76,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n          9: astore_1\n         10: aload_1\n-        11: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n+        11: invokeinterface #80,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n         16: ifeq          43\n         19: aload_1\n-        20: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n-        25: checkcast     #16                 // class java/nio/channels/SeekableByteChannel\n+        20: invokeinterface #85,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        25: checkcast     #60                 // class java/nio/channels/SeekableByteChannel\n         28: astore_2\n         29: aload_2\n-        30: invokeinterface #28,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.isOpen:()Z\n+        30: invokeinterface #99,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.isOpen:()Z\n         35: ifne          40\n         38: iconst_0\n         39: ireturn\n         40: goto          10\n         43: iconst_1\n         44: ireturn\n       LineNumberTable:\n@@ -455,54 +455,54 @@\n \n   public long position();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #20                 // Field globalPosition:J\n+         1: getfield      #72                 // Field globalPosition:J\n          4: lreturn\n       LineNumberTable:\n         line 129: 0\n \n   public synchronized java.nio.channels.SeekableByteChannel position(long, long) throws java.io.IOException;\n     descriptor: (JJ)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n     Code:\n       stack=4, locals=8, args_size=3\n          0: aload_0\n-         1: invokevirtual #9                  // Method isOpen:()Z\n+         1: invokevirtual #34                 // Method isOpen:()Z\n          4: ifne          15\n-         7: new           #10                 // class java/nio/channels/ClosedChannelException\n+         7: new           #38                 // class java/nio/channels/ClosedChannelException\n         10: dup\n-        11: invokespecial #11                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n+        11: invokespecial #40                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n         14: athrow\n         15: lload_3\n         16: lstore        5\n         18: iconst_0\n         19: istore        7\n         21: iload         7\n         23: i2l\n         24: lload_1\n         25: lcmp\n         26: ifge          59\n         29: lload         5\n         31: aload_0\n-        32: getfield      #8                  // Field channels:Ljava/util/List;\n+        32: getfield      #28                 // Field channels:Ljava/util/List;\n         35: iload         7\n-        37: invokeinterface #15,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n-        42: checkcast     #16                 // class java/nio/channels/SeekableByteChannel\n-        45: invokeinterface #19,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+        37: invokeinterface #56,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n+        42: checkcast     #60                 // class java/nio/channels/SeekableByteChannel\n+        45: invokeinterface #70,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n         50: ladd\n         51: lstore        5\n         53: iinc          7, 1\n         56: goto          21\n         59: aload_0\n         60: lload         5\n-        62: invokevirtual #29                 // Method position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        62: invokevirtual #100                // Method position:(J)Ljava/nio/channels/SeekableByteChannel;\n         65: areturn\n       LineNumberTable:\n         line 141: 0\n         line 142: 7\n         line 144: 15\n         line 145: 18\n         line 146: 29\n@@ -520,36 +520,36 @@\n \n   public long size() throws java.io.IOException;\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=5, args_size=1\n          0: aload_0\n-         1: invokevirtual #9                  // Method isOpen:()Z\n+         1: invokevirtual #34                 // Method isOpen:()Z\n          4: ifne          15\n-         7: new           #10                 // class java/nio/channels/ClosedChannelException\n+         7: new           #38                 // class java/nio/channels/ClosedChannelException\n         10: dup\n-        11: invokespecial #11                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n+        11: invokespecial #40                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n         14: athrow\n         15: lconst_0\n         16: lstore_1\n         17: aload_0\n-        18: getfield      #8                  // Field channels:Ljava/util/List;\n-        21: invokeinterface #21,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n+        18: getfield      #28                 // Field channels:Ljava/util/List;\n+        21: invokeinterface #76,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n         26: astore_3\n         27: aload_3\n-        28: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n+        28: invokeinterface #80,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n         33: ifeq          60\n         36: aload_3\n-        37: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n-        42: checkcast     #16                 // class java/nio/channels/SeekableByteChannel\n+        37: invokeinterface #85,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        42: checkcast     #60                 // class java/nio/channels/SeekableByteChannel\n         45: astore        4\n         47: lload_1\n         48: aload         4\n-        50: invokeinterface #19,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+        50: invokeinterface #70,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n         55: ladd\n         56: lstore_1\n         57: goto          27\n         60: lload_1\n         61: lreturn\n       LineNumberTable:\n         line 154: 0\n@@ -570,106 +570,106 @@\n       throws java.io.IOException\n \n   public java.nio.channels.SeekableByteChannel truncate(long);\n     descriptor: (J)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=2\n-         0: new           #30                 // class java/nio/channels/NonWritableChannelException\n+         0: new           #103                // class java/nio/channels/NonWritableChannelException\n          3: dup\n-         4: invokespecial #31                 // Method java/nio/channels/NonWritableChannelException.\"<init>\":()V\n+         4: invokespecial #105                // Method java/nio/channels/NonWritableChannelException.\"<init>\":()V\n          7: athrow\n       LineNumberTable:\n         line 169: 0\n \n   public int write(java.nio.ByteBuffer);\n     descriptor: (Ljava/nio/ByteBuffer;)I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n-         0: new           #30                 // class java/nio/channels/NonWritableChannelException\n+         0: new           #103                // class java/nio/channels/NonWritableChannelException\n          3: dup\n-         4: invokespecial #31                 // Method java/nio/channels/NonWritableChannelException.\"<init>\":()V\n+         4: invokespecial #105                // Method java/nio/channels/NonWritableChannelException.\"<init>\":()V\n          7: athrow\n       LineNumberTable:\n         line 177: 0\n \n   public synchronized java.nio.channels.SeekableByteChannel position(long) throws java.io.IOException;\n     descriptor: (J)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n     Code:\n       stack=4, locals=13, args_size=2\n          0: lload_1\n          1: lconst_0\n          2: lcmp\n          3: ifge          20\n-         6: new           #25                 // class java/io/IOException\n+         6: new           #92                 // class java/io/IOException\n          9: dup\n         10: lload_1\n-        11: invokedynamic #32,  0             // InvokeDynamic #0:makeConcatWithConstants:(J)Ljava/lang/String;\n-        16: invokespecial #33                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        11: invokedynamic #106,  0            // InvokeDynamic #0:makeConcatWithConstants:(J)Ljava/lang/String;\n+        16: invokespecial #110                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         19: athrow\n         20: aload_0\n-        21: invokevirtual #9                  // Method isOpen:()Z\n+        21: invokevirtual #34                 // Method isOpen:()Z\n         24: ifne          35\n-        27: new           #10                 // class java/nio/channels/ClosedChannelException\n+        27: new           #38                 // class java/nio/channels/ClosedChannelException\n         30: dup\n-        31: invokespecial #11                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n+        31: invokespecial #40                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n         34: athrow\n         35: aload_0\n         36: lload_1\n-        37: putfield      #20                 // Field globalPosition:J\n+        37: putfield      #72                 // Field globalPosition:J\n         40: lload_1\n         41: lstore_3\n         42: iconst_0\n         43: istore        5\n         45: iload         5\n         47: aload_0\n-        48: getfield      #8                  // Field channels:Ljava/util/List;\n-        51: invokeinterface #14,  1           // InterfaceMethod java/util/List.size:()I\n+        48: getfield      #28                 // Field channels:Ljava/util/List;\n+        51: invokeinterface #50,  1           // InterfaceMethod java/util/List.size:()I\n         56: if_icmpge     150\n         59: aload_0\n-        60: getfield      #8                  // Field channels:Ljava/util/List;\n+        60: getfield      #28                 // Field channels:Ljava/util/List;\n         63: iload         5\n-        65: invokeinterface #15,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n-        70: checkcast     #16                 // class java/nio/channels/SeekableByteChannel\n+        65: invokeinterface #56,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n+        70: checkcast     #60                 // class java/nio/channels/SeekableByteChannel\n         73: astore        6\n         75: aload         6\n-        77: invokeinterface #19,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+        77: invokeinterface #70,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n         82: lstore        7\n         84: lload_3\n-        85: ldc2_w        #34                 // long -1l\n+        85: ldc2_w        #113                // long -1l\n         88: lcmp\n         89: ifne          98\n         92: lconst_0\n         93: lstore        9\n         95: goto          134\n         98: lload_3\n         99: lload         7\n        101: lcmp\n        102: ifgt          125\n        105: aload_0\n        106: iload         5\n-       108: putfield      #13                 // Field currentChannelIdx:I\n+       108: putfield      #46                 // Field currentChannelIdx:I\n        111: lload_3\n        112: lstore        11\n-       114: ldc2_w        #34                 // long -1l\n+       114: ldc2_w        #113                // long -1l\n        117: lstore_3\n        118: lload         11\n        120: lstore        9\n        122: goto          134\n        125: lload_3\n        126: lload         7\n        128: lsub\n        129: lstore_3\n        130: lload         7\n        132: lstore        9\n        134: aload         6\n        136: lload         9\n-       138: invokeinterface #36,  3           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+       138: invokeinterface #115,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n        143: pop\n        144: iinc          5, 1\n        147: goto          45\n        150: aload_0\n        151: areturn\n       LineNumberTable:\n         line 182: 0\n@@ -716,50 +716,50 @@\n \n   public static java.nio.channels.SeekableByteChannel forSeekableByteChannels(java.nio.channels.SeekableByteChannel...);\n     descriptor: ([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0089) ACC_PUBLIC, ACC_STATIC, ACC_VARARGS\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n-         1: ldc           #3                  // String channels must not be null\n-         3: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-         6: checkcast     #37                 // class \"[Ljava/nio/channels/SeekableByteChannel;\"\n+         1: ldc           #9                  // String channels must not be null\n+         3: invokestatic  #11                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+         6: checkcast     #116                // class \"[Ljava/nio/channels/SeekableByteChannel;\"\n          9: arraylength\n         10: iconst_1\n         11: if_icmpne     18\n         14: aload_0\n         15: iconst_0\n         16: aaload\n         17: areturn\n-        18: new           #38                 // class org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n+        18: new           #29                 // class org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n         21: dup\n         22: aload_0\n-        23: invokestatic  #39                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-        26: invokespecial #40                 // Method \"<init>\":(Ljava/util/List;)V\n+        23: invokestatic  #118                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+        26: invokespecial #124                // Method \"<init>\":(Ljava/util/List;)V\n         29: areturn\n       LineNumberTable:\n         line 229: 0\n         line 230: 14\n         line 232: 18\n       StackMapTable: number_of_entries = 1\n         frame_type = 18 /* same */\n \n   public static java.nio.channels.SeekableByteChannel forFiles(java.io.File...) throws java.io.IOException;\n     descriptor: ([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0089) ACC_PUBLIC, ACC_STATIC, ACC_VARARGS\n     Code:\n       stack=6, locals=6, args_size=1\n-         0: new           #2                  // class java/util/ArrayList\n+         0: new           #7                  // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #41                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #127                // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n-         9: ldc           #42                 // String files must not be null\n-        11: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-        14: checkcast     #43                 // class \"[Ljava/io/File;\"\n+         9: ldc           #128                // String files must not be null\n+        11: invokestatic  #11                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+        14: checkcast     #130                // class \"[Ljava/io/File;\"\n         17: astore_2\n         18: aload_2\n         19: arraylength\n         20: istore_3\n         21: iconst_0\n         22: istore        4\n         24: iload         4\n@@ -767,39 +767,39 @@\n         27: if_icmpge     67\n         30: aload_2\n         31: iload         4\n         33: aaload\n         34: astore        5\n         36: aload_1\n         37: aload         5\n-        39: invokevirtual #44                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+        39: invokevirtual #132                // Method java/io/File.toPath:()Ljava/nio/file/Path;\n         42: iconst_1\n-        43: anewarray     #45                 // class java/nio/file/OpenOption\n+        43: anewarray     #138                // class java/nio/file/OpenOption\n         46: dup\n         47: iconst_0\n-        48: getstatic     #46                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+        48: getstatic     #140                // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n         51: aastore\n-        52: invokestatic  #47                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-        55: invokeinterface #48,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        52: invokestatic  #146                // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+        55: invokeinterface #152,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n         60: pop\n         61: iinc          4, 1\n         64: goto          24\n         67: aload_1\n-        68: invokeinterface #14,  1           // InterfaceMethod java/util/List.size:()I\n+        68: invokeinterface #50,  1           // InterfaceMethod java/util/List.size:()I\n         73: iconst_1\n         74: if_icmpne     88\n         77: aload_1\n         78: iconst_0\n-        79: invokeinterface #15,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n-        84: checkcast     #16                 // class java/nio/channels/SeekableByteChannel\n+        79: invokeinterface #56,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n+        84: checkcast     #60                 // class java/nio/channels/SeekableByteChannel\n         87: areturn\n-        88: new           #38                 // class org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n+        88: new           #29                 // class org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel\n         91: dup\n         92: aload_1\n-        93: invokespecial #40                 // Method \"<init>\":(Ljava/util/List;)V\n+        93: invokespecial #124                // Method \"<init>\":(Ljava/util/List;)V\n         96: areturn\n       LineNumberTable:\n         line 244: 0\n         line 245: 8\n         line 246: 36\n         line 245: 61\n         line 248: 67\n@@ -813,13 +813,13 @@\n         frame_type = 248 /* chop */\n           offset_delta = 42\n         frame_type = 20 /* same */\n     Exceptions:\n       throws java.io.IOException\n }\n SourceFile: \"MultiReadOnlySeekableByteChannel.java\"\n-InnerClasses:\n-  public static final #181= #180 of #184; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #118 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  0: #173 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #119 Negative position: \\u0001\n+      #179 Negative position: \\u0001\n+InnerClasses:\n+  public static final #186= #182 of #184; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
