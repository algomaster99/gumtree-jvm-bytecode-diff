{"diffoscope-json-version": 1, "source1": "first/BandSet.class", "source2": "second/BandSet.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,14 +3,15 @@\n \n import java.util.Arrays;\n import java.util.Map;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.ArrayList;\n+import java.util.Objects;\n import java.util.stream.IntStream;\n import java.io.IOException;\n import java.io.OutputStream;\n \n public abstract class BandSet\n {\n     protected final SegmentHeader segmentHeader;\n@@ -58,15 +59,18 @@\n                     final byte[] specifierEncoded = defaultCodec.encode(new int[] { specifier });\n                     final byte[] band = new byte[specifierEncoded.length + encodedBand.length];\n                     System.arraycopy(specifierEncoded, 0, band, 0, specifierEncoded.length);\n                     System.arraycopy(encodedBand, 0, band, specifierEncoded.length, encodedBand.length);\n                     return band;\n                 }\n                 if (betterCodec instanceof PopulationCodec) {\n-                    IntStream.of(BandSet.BandAnalysisResults.access$200(results)).forEach(this.segmentHeader::appendBandCodingSpecifier);\n+                    final IntStream of = IntStream.of(BandSet.BandAnalysisResults.access$200(results));\n+                    final SegmentHeader segmentHeader = this.segmentHeader;\n+                    Objects.requireNonNull(segmentHeader);\n+                    of.forEach(segmentHeader::appendBandCodingSpecifier);\n                     return encodedBand;\n                 }\n                 if (betterCodec instanceof RunCodec) {}\n             }\n         }\n         if (ints.length > 0) {\n             if (encodedBand == null) {\n@@ -224,44 +228,44 @@\n             if (this.timeToStop(results)) {\n                 return;\n             }\n         }\n     }\n     \n     private void encodeWithPopulationCodec(final String name, final int[] band, final BHSDCodec defaultCodec, final BandSet.BandData bandData, final BandSet.BandAnalysisResults results) throws Pack200Exception {\n-        BandSet.BandAnalysisResults.access$402(results, BandSet.BandAnalysisResults.access$400(results) + 3);\n+        BandSet.BandAnalysisResults.access$412(results, 3);\n         final Map<Integer, Integer> distinctValues = BandSet.BandData.access$900(bandData);\n         final List<Integer> favored = new ArrayList<Integer>();\n         final int k;\n         distinctValues.forEach((k, v) -> {\n             if (v > 2 || distinctValues.size() < 256) {\n                 favored.add(k);\n             }\n             return;\n         });\n         if (distinctValues.size() > 255) {\n             favored.sort((arg0, arg1) -> Integer.valueOf(distinctValues.get((Object)arg1)).compareTo(Integer.valueOf(distinctValues.get((Object)arg0))));\n         }\n         final Map<Integer, Integer> favoredToIndex = new HashMap<Integer, Integer>();\n         for (int i = 0; i < favored.size(); ++i) {\n-            favoredToIndex.put(favored.get(i), Integer.valueOf(i));\n+            favoredToIndex.put(Integer.valueOf(favored.get(i)), Integer.valueOf(i));\n         }\n         final IntList unfavoured = new IntList();\n         final int[] tokens = new int[band.length];\n         for (int j = 0; j < band.length; ++j) {\n             final Integer favouredIndex = Integer.valueOf(favoredToIndex.get((Object)Integer.valueOf(band[j])));\n             if (favouredIndex == null) {\n                 tokens[j] = 0;\n                 unfavoured.add(band[j]);\n             }\n             else {\n                 tokens[j] = favouredIndex + 1;\n             }\n         }\n-        favored.add(favored.get(favored.size() - 1));\n+        favored.add(Integer.valueOf(favored.get(favored.size() - 1)));\n         final int[] favouredBand = this.integerListToArray(favored);\n         final int[] unfavouredBand = unfavoured.toArray();\n         final BandSet.BandAnalysisResults favouredResults = this.analyseBand(\"POPULATION\", favouredBand, defaultCodec);\n         final BandSet.BandAnalysisResults unfavouredResults = this.analyseBand(\"POPULATION\", unfavouredBand, defaultCodec);\n         int tdefL = 0;\n         int l = 0;\n         Codec tokenCodec = null;\n@@ -344,34 +348,43 @@\n         final byte[] favouredEncoded = BandSet.BandAnalysisResults.access$100(favouredResults);\n         final byte[] unfavouredEncoded = BandSet.BandAnalysisResults.access$100(unfavouredResults);\n         final Codec favouredCodec = BandSet.BandAnalysisResults.access$000(favouredResults);\n         final Codec unfavouredCodec = BandSet.BandAnalysisResults.access$000(unfavouredResults);\n         int specifier = 141 + ((favouredCodec == null) ? 1 : 0) + 4 * tdefL + ((unfavouredCodec == null) ? 2 : 0);\n         final IntList extraBandMetadata = new IntList(3);\n         if (favouredCodec != null) {\n-            IntStream.of(CodecEncoding.getSpecifier(favouredCodec, (Codec)null)).forEach(extraBandMetadata::add);\n+            final IntStream of = IntStream.of(CodecEncoding.getSpecifier(favouredCodec, (Codec)null));\n+            final IntList obj = extraBandMetadata;\n+            Objects.requireNonNull(obj);\n+            of.forEach(obj::add);\n         }\n         if (tdefL == 0) {\n-            IntStream.of(CodecEncoding.getSpecifier(tokenCodec, (Codec)null)).forEach(extraBandMetadata::add);\n+            final IntStream of2 = IntStream.of(CodecEncoding.getSpecifier(tokenCodec, (Codec)null));\n+            final IntList obj2 = extraBandMetadata;\n+            Objects.requireNonNull(obj2);\n+            of2.forEach(obj2::add);\n         }\n         if (unfavouredCodec != null) {\n-            IntStream.of(CodecEncoding.getSpecifier(unfavouredCodec, (Codec)null)).forEach(extraBandMetadata::add);\n+            final IntStream of3 = IntStream.of(CodecEncoding.getSpecifier(unfavouredCodec, (Codec)null));\n+            final IntList obj3 = extraBandMetadata;\n+            Objects.requireNonNull(obj3);\n+            of3.forEach(obj3::add);\n         }\n         final int[] extraMetadata = extraBandMetadata.toArray();\n         final byte[] extraMetadataEncoded = Codec.UNSIGNED5.encode(extraMetadata);\n         if (defaultCodec.isSigned()) {\n             specifier = -1 - specifier;\n         }\n         else {\n             specifier += defaultCodec.getL();\n         }\n         final byte[] firstValueEncoded = defaultCodec.encode(new int[] { specifier });\n         final int totalBandLength = firstValueEncoded.length + favouredEncoded.length + tokensEncoded.length + unfavouredEncoded.length;\n         if (totalBandLength + extraMetadataEncoded.length < BandSet.BandAnalysisResults.access$100(results).length) {\n-            BandSet.BandAnalysisResults.access$802(results, BandSet.BandAnalysisResults.access$800(results) + (BandSet.BandAnalysisResults.access$100(results).length - (totalBandLength + extraMetadataEncoded.length)));\n+            BandSet.BandAnalysisResults.access$812(results, BandSet.BandAnalysisResults.access$100(results).length - (totalBandLength + extraMetadataEncoded.length));\n             final byte[] encodedBand = new byte[totalBandLength];\n             System.arraycopy(firstValueEncoded, 0, encodedBand, 0, firstValueEncoded.length);\n             System.arraycopy(favouredEncoded, 0, encodedBand, firstValueEncoded.length, favouredEncoded.length);\n             System.arraycopy(tokensEncoded, 0, encodedBand, firstValueEncoded.length + favouredEncoded.length, tokensEncoded.length);\n             System.arraycopy(unfavouredEncoded, 0, encodedBand, firstValueEncoded.length + favouredEncoded.length + tokensEncoded.length, unfavouredEncoded.length);\n             BandSet.BandAnalysisResults.access$102(results, encodedBand);\n             BandSet.BandAnalysisResults.access$202(results, extraMetadata);\n"}]}
