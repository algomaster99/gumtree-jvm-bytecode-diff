{"diffoscope-json-version": 1, "source1": "first/SubnetUtils.class", "source2": "second/SubnetUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,14 +14,19 @@\n     private static final String PARSE_FAIL = \"Could not parse [%s]\";\n     private final int netmask;\n     private final int address;\n     private final int network;\n     private final int broadcast;\n     private boolean inclusiveHostCount;\n     \n+    static {\n+        addressPattern = Pattern.compile(\"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\");\n+        cidrPattern = Pattern.compile(\"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\");\n+    }\n+    \n     public SubnetUtils(final String cidrNotation) {\n         this.inclusiveHostCount = false;\n         final Matcher matcher = SubnetUtils.cidrPattern.matcher(cidrNotation);\n         if (matcher.matches()) {\n             this.address = matchAddress(matcher);\n             final int trailingZeroes = 32 - rangeCheck(Integer.parseInt(matcher.group(5)), 0, 32);\n             this.netmask = (int)(4294967295L << trailingZeroes);\n@@ -48,15 +53,15 @@\n     }\n     \n     public void setInclusiveHostCount(final boolean inclusiveHostCount) {\n         this.inclusiveHostCount = inclusiveHostCount;\n     }\n     \n     public final SubnetUtils.SubnetInfo getInfo() {\n-        return new SubnetUtils.SubnetInfo(this, (SubnetUtils.SubnetUtils$1)null);\n+        return new SubnetUtils.SubnetInfo(this, (SubnetUtils.SubnetInfo)null);\n     }\n     \n     private static int toInteger(final String address) {\n         final Matcher matcher = SubnetUtils.addressPattern.matcher(address);\n         if (matcher.matches()) {\n             return matchAddress(matcher);\n         }\n@@ -91,13 +96,8 @@\n     public SubnetUtils getNext() {\n         return new SubnetUtils(this.getInfo().getNextAddress(), this.getInfo().getNetmask());\n     }\n     \n     public SubnetUtils getPrevious() {\n         return new SubnetUtils(this.getInfo().getPreviousAddress(), this.getInfo().getNetmask());\n     }\n-    \n-    static {\n-        addressPattern = Pattern.compile(\"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\");\n-        cidrPattern = Pattern.compile(\"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\");\n-    }\n }\n"}]}
