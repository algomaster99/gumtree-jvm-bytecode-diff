{"diffoscope-json-version": 1, "source1": "first/SizeFileFilter.class", "source2": "second/SizeFileFilter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,126 +1,126 @@\n-  SHA-256 checksum 958b6635430e881f183809e10bb3c2e5d5ec13dcbb4a212665b51d3d440e833a\n+  SHA-256 checksum 6d923484227e68212487fbfb32e2973bed4d53d36aa4558be7ebc6b7b0958809\n   Compiled from \"SizeFileFilter.java\"\n public class org.apache.commons.io.filefilter.SizeFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #26                         // org/apache/commons/io/filefilter/SizeFileFilter\n-  super_class: #27                        // org/apache/commons/io/filefilter/AbstractFileFilter\n+  this_class: #2                          // org/apache/commons/io/filefilter/SizeFileFilter\n+  super_class: #8                         // org/apache/commons/io/filefilter/AbstractFileFilter\n   interfaces: 1, fields: 3, methods: 8, attributes: 1\n Constant pool:\n-    #1 = Methodref          #26.#69       // org/apache/commons/io/filefilter/SizeFileFilter.\"<init>\":(JZ)V\n-    #2 = Methodref          #27.#70       // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n-    #3 = Class              #71           // java/lang/IllegalArgumentException\n-    #4 = String             #72           // The size must be non-negative\n-    #5 = Methodref          #3.#73        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #6 = Fieldref           #26.#74       // org/apache/commons/io/filefilter/SizeFileFilter.size:J\n-    #7 = Fieldref           #26.#75       // org/apache/commons/io/filefilter/SizeFileFilter.acceptLarger:Z\n-    #8 = Methodref          #76.#77       // java/io/File.length:()J\n-    #9 = Methodref          #26.#78       // org/apache/commons/io/filefilter/SizeFileFilter.accept:(J)Z\n-   #10 = Methodref          #79.#80       // java/nio/file/Files.size:(Ljava/nio/file/Path;)J\n-   #11 = Methodref          #26.#81       // org/apache/commons/io/filefilter/SizeFileFilter.toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-   #12 = Class              #82           // java/io/IOException\n-   #13 = Methodref          #26.#83       // org/apache/commons/io/filefilter/SizeFileFilter.handle:(Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n-   #14 = String             #84           // >=\n-   #15 = String             #85           // <\n-   #16 = Class              #86           // java/lang/StringBuilder\n-   #17 = Methodref          #16.#70       // java/lang/StringBuilder.\"<init>\":()V\n-   #18 = Methodref          #27.#87       // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n-   #19 = Methodref          #16.#88       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #20 = String             #89           // (\n-   #21 = Methodref          #16.#90       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #22 = String             #91           // )\n-   #23 = Methodref          #16.#87       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #24 = Class              #92           // java/nio/file/Path\n-   #25 = Methodref          #26.#93       // org/apache/commons/io/filefilter/SizeFileFilter.visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #26 = Class              #94           // org/apache/commons/io/filefilter/SizeFileFilter\n-   #27 = Class              #95           // org/apache/commons/io/filefilter/AbstractFileFilter\n-   #28 = Class              #96           // java/io/Serializable\n-   #29 = Utf8               serialVersionUID\n-   #30 = Utf8               J\n-   #31 = Utf8               ConstantValue\n-   #32 = Long               7388077430788600069l\n-   #34 = Utf8               acceptLarger\n-   #35 = Utf8               Z\n-   #36 = Utf8               size\n-   #37 = Utf8               <init>\n-   #38 = Utf8               (J)V\n-   #39 = Utf8               Code\n-   #40 = Utf8               LineNumberTable\n-   #41 = Utf8               LocalVariableTable\n-   #42 = Utf8               this\n-   #43 = Utf8               Lorg/apache/commons/io/filefilter/SizeFileFilter;\n-   #44 = Utf8               (JZ)V\n-   #45 = Utf8               StackMapTable\n-   #46 = Utf8               accept\n-   #47 = Utf8               (Ljava/io/File;)Z\n-   #48 = Utf8               file\n-   #49 = Utf8               Ljava/io/File;\n-   #50 = Utf8               (J)Z\n-   #51 = Utf8               length\n-   #52 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #53 = Utf8               e\n-   #54 = Utf8               Ljava/io/IOException;\n-   #55 = Utf8               Ljava/nio/file/Path;\n-   #56 = Utf8               attributes\n-   #57 = Utf8               Ljava/nio/file/attribute/BasicFileAttributes;\n-   #58 = Utf8               toString\n-   #59 = Utf8               ()Ljava/lang/String;\n-   #60 = Utf8               condition\n-   #61 = Utf8               Ljava/lang/String;\n-   #62 = Class              #97           // java/lang/String\n-   #63 = Utf8               visitFile\n-   #64 = Utf8               attrs\n-   #65 = Utf8               Exceptions\n-   #66 = Utf8               (Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #67 = Utf8               SourceFile\n-   #68 = Utf8               SizeFileFilter.java\n-   #69 = NameAndType        #37:#44       // \"<init>\":(JZ)V\n-   #70 = NameAndType        #37:#98       // \"<init>\":()V\n-   #71 = Utf8               java/lang/IllegalArgumentException\n-   #72 = Utf8               The size must be non-negative\n-   #73 = NameAndType        #37:#99       // \"<init>\":(Ljava/lang/String;)V\n-   #74 = NameAndType        #36:#30       // size:J\n-   #75 = NameAndType        #34:#35       // acceptLarger:Z\n-   #76 = Class              #100          // java/io/File\n-   #77 = NameAndType        #51:#101      // length:()J\n-   #78 = NameAndType        #46:#50       // accept:(J)Z\n-   #79 = Class              #102          // java/nio/file/Files\n-   #80 = NameAndType        #36:#103      // size:(Ljava/nio/file/Path;)J\n-   #81 = NameAndType        #104:#105     // toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-   #82 = Utf8               java/io/IOException\n-   #83 = NameAndType        #106:#107     // handle:(Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n-   #84 = Utf8               >=\n-   #85 = Utf8               <\n-   #86 = Utf8               java/lang/StringBuilder\n-   #87 = NameAndType        #58:#59       // toString:()Ljava/lang/String;\n-   #88 = NameAndType        #108:#109     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #89 = Utf8               (\n-   #90 = NameAndType        #108:#110     // append:(J)Ljava/lang/StringBuilder;\n-   #91 = Utf8               )\n-   #92 = Utf8               java/nio/file/Path\n-   #93 = NameAndType        #63:#52       // visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #94 = Utf8               org/apache/commons/io/filefilter/SizeFileFilter\n-   #95 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n-   #96 = Utf8               java/io/Serializable\n-   #97 = Utf8               java/lang/String\n-   #98 = Utf8               ()V\n-   #99 = Utf8               (Ljava/lang/String;)V\n-  #100 = Utf8               java/io/File\n-  #101 = Utf8               ()J\n-  #102 = Utf8               java/nio/file/Files\n-  #103 = Utf8               (Ljava/nio/file/Path;)J\n-  #104 = Utf8               toFileVisitResult\n-  #105 = Utf8               (ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-  #106 = Utf8               handle\n-  #107 = Utf8               (Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n-  #108 = Utf8               append\n-  #109 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #110 = Utf8               (J)Ljava/lang/StringBuilder;\n+    #1 = Methodref          #2.#3         // org/apache/commons/io/filefilter/SizeFileFilter.\"<init>\":(JZ)V\n+    #2 = Class              #4            // org/apache/commons/io/filefilter/SizeFileFilter\n+    #3 = NameAndType        #5:#6         // \"<init>\":(JZ)V\n+    #4 = Utf8               org/apache/commons/io/filefilter/SizeFileFilter\n+    #5 = Utf8               <init>\n+    #6 = Utf8               (JZ)V\n+    #7 = Methodref          #8.#9         // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+    #8 = Class              #10           // org/apache/commons/io/filefilter/AbstractFileFilter\n+    #9 = NameAndType        #5:#11        // \"<init>\":()V\n+   #10 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n+   #11 = Utf8               ()V\n+   #12 = Class              #13           // java/lang/IllegalArgumentException\n+   #13 = Utf8               java/lang/IllegalArgumentException\n+   #14 = String             #15           // The size must be non-negative\n+   #15 = Utf8               The size must be non-negative\n+   #16 = Methodref          #12.#17       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #17 = NameAndType        #5:#18        // \"<init>\":(Ljava/lang/String;)V\n+   #18 = Utf8               (Ljava/lang/String;)V\n+   #19 = Fieldref           #2.#20        // org/apache/commons/io/filefilter/SizeFileFilter.size:J\n+   #20 = NameAndType        #21:#22       // size:J\n+   #21 = Utf8               size\n+   #22 = Utf8               J\n+   #23 = Fieldref           #2.#24        // org/apache/commons/io/filefilter/SizeFileFilter.acceptLarger:Z\n+   #24 = NameAndType        #25:#26       // acceptLarger:Z\n+   #25 = Utf8               acceptLarger\n+   #26 = Utf8               Z\n+   #27 = Methodref          #28.#29       // java/io/File.length:()J\n+   #28 = Class              #30           // java/io/File\n+   #29 = NameAndType        #31:#32       // length:()J\n+   #30 = Utf8               java/io/File\n+   #31 = Utf8               length\n+   #32 = Utf8               ()J\n+   #33 = Methodref          #2.#34        // org/apache/commons/io/filefilter/SizeFileFilter.accept:(J)Z\n+   #34 = NameAndType        #35:#36       // accept:(J)Z\n+   #35 = Utf8               accept\n+   #36 = Utf8               (J)Z\n+   #37 = Methodref          #38.#39       // java/nio/file/Files.size:(Ljava/nio/file/Path;)J\n+   #38 = Class              #40           // java/nio/file/Files\n+   #39 = NameAndType        #21:#41       // size:(Ljava/nio/file/Path;)J\n+   #40 = Utf8               java/nio/file/Files\n+   #41 = Utf8               (Ljava/nio/file/Path;)J\n+   #42 = Methodref          #2.#43        // org/apache/commons/io/filefilter/SizeFileFilter.toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+   #43 = NameAndType        #44:#45       // toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+   #44 = Utf8               toFileVisitResult\n+   #45 = Utf8               (ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+   #46 = Class              #47           // java/io/IOException\n+   #47 = Utf8               java/io/IOException\n+   #48 = Methodref          #2.#49        // org/apache/commons/io/filefilter/SizeFileFilter.handle:(Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n+   #49 = NameAndType        #50:#51       // handle:(Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n+   #50 = Utf8               handle\n+   #51 = Utf8               (Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n+   #52 = String             #53           // >=\n+   #53 = Utf8               >=\n+   #54 = String             #55           // <\n+   #55 = Utf8               <\n+   #56 = Class              #57           // java/lang/StringBuilder\n+   #57 = Utf8               java/lang/StringBuilder\n+   #58 = Methodref          #56.#9        // java/lang/StringBuilder.\"<init>\":()V\n+   #59 = Methodref          #8.#60        // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n+   #60 = NameAndType        #61:#62       // toString:()Ljava/lang/String;\n+   #61 = Utf8               toString\n+   #62 = Utf8               ()Ljava/lang/String;\n+   #63 = Methodref          #56.#64       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #64 = NameAndType        #65:#66       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #65 = Utf8               append\n+   #66 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #67 = String             #68           // (\n+   #68 = Utf8               (\n+   #69 = Methodref          #56.#70       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #70 = NameAndType        #65:#71       // append:(J)Ljava/lang/StringBuilder;\n+   #71 = Utf8               (J)Ljava/lang/StringBuilder;\n+   #72 = String             #73           // )\n+   #73 = Utf8               )\n+   #74 = Methodref          #56.#60       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #75 = Class              #76           // java/nio/file/Path\n+   #76 = Utf8               java/nio/file/Path\n+   #77 = Methodref          #2.#78        // org/apache/commons/io/filefilter/SizeFileFilter.visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+   #78 = NameAndType        #79:#80       // visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+   #79 = Utf8               visitFile\n+   #80 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+   #81 = Class              #82           // java/io/Serializable\n+   #82 = Utf8               java/io/Serializable\n+   #83 = Utf8               serialVersionUID\n+   #84 = Utf8               ConstantValue\n+   #85 = Long               7388077430788600069l\n+   #87 = Utf8               (J)V\n+   #88 = Utf8               Code\n+   #89 = Utf8               LineNumberTable\n+   #90 = Utf8               LocalVariableTable\n+   #91 = Utf8               this\n+   #92 = Utf8               Lorg/apache/commons/io/filefilter/SizeFileFilter;\n+   #93 = Utf8               StackMapTable\n+   #94 = Utf8               (Ljava/io/File;)Z\n+   #95 = Utf8               file\n+   #96 = Utf8               Ljava/io/File;\n+   #97 = Utf8               e\n+   #98 = Utf8               Ljava/io/IOException;\n+   #99 = Utf8               Ljava/nio/file/Path;\n+  #100 = Utf8               attributes\n+  #101 = Utf8               Ljava/nio/file/attribute/BasicFileAttributes;\n+  #102 = Utf8               condition\n+  #103 = Utf8               Ljava/lang/String;\n+  #104 = Class              #105          // java/lang/String\n+  #105 = Utf8               java/lang/String\n+  #106 = Utf8               attrs\n+  #107 = Utf8               Exceptions\n+  #108 = Utf8               (Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #109 = Utf8               SourceFile\n+  #110 = Utf8               SizeFileFilter.java\n {\n   private static final long serialVersionUID = 7388077430788600069l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 7388077430788600069l\n \n   private final boolean acceptLarger;\n@@ -151,30 +151,30 @@\n \n   public org.apache.commons.io.filefilter.SizeFileFilter(long, boolean);\n     descriptor: (JZ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=3\n          0: aload_0\n-         1: invokespecial #2                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+         1: invokespecial #7                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n          4: lload_1\n          5: lconst_0\n          6: lcmp\n          7: ifge          20\n-        10: new           #3                  // class java/lang/IllegalArgumentException\n+        10: new           #12                 // class java/lang/IllegalArgumentException\n         13: dup\n-        14: ldc           #4                  // String The size must be non-negative\n-        16: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        14: ldc           #14                 // String The size must be non-negative\n+        16: invokespecial #16                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         19: athrow\n         20: aload_0\n         21: lload_1\n-        22: putfield      #6                  // Field size:J\n+        22: putfield      #19                 // Field size:J\n         25: aload_0\n         26: iload_3\n-        27: putfield      #7                  // Field acceptLarger:Z\n+        27: putfield      #23                 // Field acceptLarger:Z\n         30: return\n       LineNumberTable:\n         line 97: 0\n         line 98: 4\n         line 99: 10\n         line 101: 20\n         line 102: 25\n@@ -193,34 +193,34 @@\n   public boolean accept(java.io.File);\n     descriptor: (Ljava/io/File;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #8                  // Method java/io/File.length:()J\n-         5: invokespecial #9                  // Method accept:(J)Z\n+         2: invokevirtual #27                 // Method java/io/File.length:()J\n+         5: invokespecial #33                 // Method accept:(J)Z\n          8: ireturn\n       LineNumberTable:\n         line 119: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/io/filefilter/SizeFileFilter;\n             0       9     1  file   Ljava/io/File;\n \n   private boolean accept(long);\n     descriptor: (J)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #7                  // Field acceptLarger:Z\n+         1: getfield      #23                 // Field acceptLarger:Z\n          4: lload_1\n          5: aload_0\n-         6: getfield      #6                  // Field size:J\n+         6: getfield      #19                 // Field size:J\n          9: lcmp\n         10: ifge          17\n         13: iconst_1\n         14: goto          18\n         17: iconst_0\n         18: if_icmpeq     25\n         21: iconst_1\n@@ -247,23 +247,23 @@\n   public java.nio.file.FileVisitResult accept(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes);\n     descriptor: (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=4, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokestatic  #10                 // Method java/nio/file/Files.size:(Ljava/nio/file/Path;)J\n-         5: invokespecial #9                  // Method accept:(J)Z\n+         2: invokestatic  #37                 // Method java/nio/file/Files.size:(Ljava/nio/file/Path;)J\n+         5: invokespecial #33                 // Method accept:(J)Z\n          8: aload_1\n-         9: invokestatic  #11                 // Method toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+         9: invokestatic  #42                 // Method toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n         12: areturn\n         13: astore_3\n         14: aload_0\n         15: aload_3\n-        16: invokevirtual #13                 // Method handle:(Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n+        16: invokevirtual #48                 // Method handle:(Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n         19: areturn\n       Exception table:\n          from    to  target type\n              0    12    13   Class java/io/IOException\n       LineNumberTable:\n         line 141: 0\n         line 142: 13\n@@ -280,36 +280,36 @@\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field acceptLarger:Z\n+         1: getfield      #23                 // Field acceptLarger:Z\n          4: ifeq          12\n-         7: ldc           #14                 // String >=\n+         7: ldc           #52                 // String >=\n          9: goto          14\n-        12: ldc           #15                 // String <\n+        12: ldc           #54                 // String <\n         14: astore_1\n-        15: new           #16                 // class java/lang/StringBuilder\n+        15: new           #56                 // class java/lang/StringBuilder\n         18: dup\n-        19: invokespecial #17                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        19: invokespecial #58                 // Method java/lang/StringBuilder.\"<init>\":()V\n         22: aload_0\n-        23: invokespecial #18                 // Method org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n-        26: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        29: ldc           #20                 // String (\n-        31: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        23: invokespecial #59                 // Method org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n+        26: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        29: ldc           #67                 // String (\n+        31: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         34: aload_1\n-        35: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        35: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         38: aload_0\n-        39: getfield      #6                  // Field size:J\n-        42: invokevirtual #21                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        45: ldc           #22                 // String )\n-        47: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        50: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        39: getfield      #19                 // Field size:J\n+        42: invokevirtual #69                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        45: ldc           #72                 // String )\n+        47: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        50: invokevirtual #74                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n         53: areturn\n       LineNumberTable:\n         line 154: 0\n         line 155: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      54     0  this   Lorg/apache/commons/io/filefilter/SizeFileFilter;\n@@ -322,18 +322,18 @@\n   public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException;\n     descriptor: (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokestatic  #10                 // Method java/nio/file/Files.size:(Ljava/nio/file/Path;)J\n-         5: invokespecial #9                  // Method accept:(J)Z\n+         2: invokestatic  #37                 // Method java/nio/file/Files.size:(Ljava/nio/file/Path;)J\n+         5: invokespecial #33                 // Method accept:(J)Z\n          8: aload_1\n-         9: invokestatic  #11                 // Method toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+         9: invokestatic  #42                 // Method toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n         12: areturn\n       LineNumberTable:\n         line 160: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0  this   Lorg/apache/commons/io/filefilter/SizeFileFilter;\n             0      13     1  file   Ljava/nio/file/Path;\n@@ -344,17 +344,17 @@\n   public java.nio.file.FileVisitResult visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException;\n     descriptor: (Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n     flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: checkcast     #24                 // class java/nio/file/Path\n+         2: checkcast     #75                 // class java/nio/file/Path\n          5: aload_2\n-         6: invokevirtual #25                 // Method visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+         6: invokevirtual #77                 // Method visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n          9: areturn\n       LineNumberTable:\n         line 67: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/io/filefilter/SizeFileFilter;\n     Exceptions:\n"}]}
