{"diffoscope-json-version": 1, "source1": "first/BaseNCodecOutputStream.class", "source2": "second/BaseNCodecOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,58 +9,58 @@\n public class BaseNCodecOutputStream extends FilterOutputStream\n {\n     private final boolean doEncode;\n     private final BaseNCodec baseNCodec;\n     private final byte[] singleByte;\n     private final BaseNCodec.Context context;\n     \n-    public BaseNCodecOutputStream(final OutputStream output, final BaseNCodec basedCodec, final boolean doEncode) {\n-        super(output);\n+    public BaseNCodecOutputStream(final OutputStream out, final BaseNCodec baseNCodec, final boolean doEncode) {\n+        super(out);\n         this.singleByte = new byte[1];\n         this.context = new BaseNCodec.Context();\n-        this.baseNCodec = basedCodec;\n+        this.baseNCodec = baseNCodec;\n         this.doEncode = doEncode;\n     }\n     \n     @Override\n-    public void write(final int i) throws IOException {\n-        this.singleByte[0] = (byte)i;\n+    public void write(final int n) throws IOException {\n+        this.singleByte[0] = (byte)n;\n         this.write(this.singleByte, 0, 1);\n     }\n     \n     @Override\n-    public void write(final byte[] array, final int offset, final int len) throws IOException {\n-        Objects.requireNonNull(array, \"array\");\n-        if (offset < 0 || len < 0) {\n+    public void write(final byte[] obj, final int n, final int n2) throws IOException {\n+        Objects.requireNonNull(obj, \"array\");\n+        if (n < 0 || n2 < 0) {\n             throw new IndexOutOfBoundsException();\n         }\n-        if (offset > array.length || offset + len > array.length) {\n+        if (n > obj.length || n + n2 > obj.length) {\n             throw new IndexOutOfBoundsException();\n         }\n-        if (len > 0) {\n+        if (n2 > 0) {\n             if (this.doEncode) {\n-                this.baseNCodec.encode(array, offset, len, this.context);\n+                this.baseNCodec.encode(obj, n, n2, this.context);\n             }\n             else {\n-                this.baseNCodec.decode(array, offset, len, this.context);\n+                this.baseNCodec.decode(obj, n, n2, this.context);\n             }\n             this.flush(false);\n         }\n     }\n     \n-    private void flush(final boolean propagate) throws IOException {\n-        final int avail = this.baseNCodec.available(this.context);\n-        if (avail > 0) {\n-            final byte[] buf = new byte[avail];\n-            final int c = this.baseNCodec.readResults(buf, 0, avail, this.context);\n-            if (c > 0) {\n-                this.out.write(buf, 0, c);\n+    private void flush(final boolean b) throws IOException {\n+        final int available = this.baseNCodec.available(this.context);\n+        if (available > 0) {\n+            final byte[] b2 = new byte[available];\n+            final int results = this.baseNCodec.readResults(b2, 0, available, this.context);\n+            if (results > 0) {\n+                this.out.write(b2, 0, results);\n             }\n         }\n-        if (propagate) {\n+        if (b) {\n             this.out.flush();\n         }\n     }\n     \n     @Override\n     public void flush() throws IOException {\n         this.flush(true);\n"}]}
