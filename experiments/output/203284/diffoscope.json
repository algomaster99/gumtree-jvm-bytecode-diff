{"diffoscope-json-version": 1, "source1": "first/ClassRefForm.class", "source2": "second/ClassRefForm.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,38 +1,34 @@\n \n package org.apache.commons.compress.harmony.unpack200.bytecode.forms;\n \n import org.apache.commons.compress.harmony.pack200.Pack200Exception;\n-import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;\n import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;\n import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;\n import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;\n \n public class ClassRefForm extends ReferenceForm\n {\n     protected boolean widened;\n     \n-    public ClassRefForm(final int opcode, final String name, final int[] rewrite) {\n-        super(opcode, name, rewrite);\n+    public ClassRefForm(final int n, final String s, final int[] array) {\n+        super(n, s, array);\n     }\n     \n-    public ClassRefForm(final int opcode, final String name, final int[] rewrite, final boolean widened) {\n-        this(opcode, name, rewrite);\n+    public ClassRefForm(final int n, final String s, final int[] array, final boolean widened) {\n+        this(n, s, array);\n         this.widened = widened;\n     }\n     \n-    protected void setNestedEntries(final ByteCode byteCode, final OperandManager operandManager, final int offset) throws Pack200Exception {\n-        if (offset != 0) {\n-            super.setNestedEntries(byteCode, operandManager, offset - 1);\n+    protected void setNestedEntries(final ByteCode byteCode, final OperandManager operandManager, final int n) throws Pack200Exception {\n+        if (n != 0) {\n+            super.setNestedEntries(byteCode, operandManager, n - 1);\n             return;\n         }\n-        final SegmentConstantPool globalPool = operandManager.globalConstantPool();\n-        ClassFileEntry[] nested = null;\n-        nested = new ClassFileEntry[] { (ClassFileEntry)globalPool.getClassPoolEntry(operandManager.getCurrentClass()) };\n-        byteCode.setNested(nested);\n+        byteCode.setNested(new ClassFileEntry[] { (ClassFileEntry)operandManager.globalConstantPool().getClassPoolEntry(operandManager.getCurrentClass()) });\n         byteCode.setNestedPositions(new int[][] { { 0, 2 } });\n     }\n     \n     protected int getOffset(final OperandManager operandManager) {\n         return operandManager.nextClassRef();\n     }\n     \n"}]}
