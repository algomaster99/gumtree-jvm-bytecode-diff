{"diffoscope-json-version": 1, "source1": "first/HuffmanDecoder.class", "source2": "second/HuffmanDecoder.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,338 +1,337 @@\n-  SHA-256 checksum 536ed4b63d04aad5ad2cf147667f72d331b9884ec445e21902ac94c3cb2a0216\n+  SHA-256 checksum 888b950cb4f2257e1b1e8f0a9e557d154740c3bd7f9b3ef510190347496c3f2f\n   Compiled from \"HuffmanDecoder.java\"\n class org.apache.commons.compress.compressors.deflate64.HuffmanDecoder implements java.io.Closeable\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0020) ACC_SUPER\n-  this_class: #89                         // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  super_class: #90                        // java/lang/Object\n-  interfaces: 1, fields: 10, methods: 22, attributes: 2\n+  this_class: #84                         // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  super_class: #85                        // java/lang/Object\n+  interfaces: 1, fields: 10, methods: 22, attributes: 3\n Constant pool:\n-    #1 = Fieldref           #89.#211      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.DISTANCE_TABLE:[I\n-    #2 = Fieldref           #89.#212      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.RUN_LENGTH_TABLE:[S\n-    #3 = Methodref          #89.#213      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.nextSymbol:(Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n-    #4 = Methodref          #89.#214      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-    #5 = Fieldref           #89.#215      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.in:Ljava/io/InputStream;\n-    #6 = Fieldref           #89.#216      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.memory:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n-    #7 = Methodref          #89.#217      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readBits:(I)J\n-    #8 = Fieldref           #89.#218      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.reader:Lorg/apache/commons/compress/utils/BitInputStream;\n-    #9 = Methodref          #90.#219      // java/lang/Object.\"<init>\":()V\n-   #10 = Fieldref           #89.#220      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.finalBlock:Z\n-   #11 = Class              #221          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory\n-   #12 = Methodref          #11.#222      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-   #13 = Class              #223          // org/apache/commons/compress/utils/BitInputStream\n-   #14 = Fieldref           #224.#225     // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #15 = Methodref          #13.#226      // org/apache/commons/compress/utils/BitInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-   #16 = Class              #227          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState\n-   #17 = Methodref          #16.#228      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-   #18 = Fieldref           #89.#229      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n-   #19 = Methodref          #89.#230      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.decode:([BII)I\n-   #20 = Methodref          #99.#231      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.hasData:()Z\n-   #21 = Methodref          #99.#232      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.state:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-   #22 = Fieldref           #233.#234     // org/apache/commons/compress/compressors/deflate64/HuffmanState.INITIAL:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-   #23 = Methodref          #89.#235      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.switchToUncompressedState:()V\n-   #24 = Class              #236          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n-   #25 = Fieldref           #233.#237     // org/apache/commons/compress/compressors/deflate64/HuffmanState.FIXED_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-   #26 = Fieldref           #89.#238      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.FIXED_LITERALS:[I\n-   #27 = Fieldref           #89.#239      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.FIXED_DISTANCE:[I\n-   #28 = Methodref          #24.#240      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n-   #29 = Methodref          #89.#241      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readDynamicTables:()[[I\n-   #30 = Fieldref           #233.#242     // org/apache/commons/compress/compressors/deflate64/HuffmanState.DYNAMIC_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-   #31 = Class              #243          // java/lang/IllegalStateException\n-   #32 = Class              #244          // java/lang/StringBuilder\n-   #33 = Methodref          #32.#219      // java/lang/StringBuilder.\"<init>\":()V\n-   #34 = String             #245          // Unsupported compression:\n-   #35 = Methodref          #32.#246      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #36 = Methodref          #32.#247      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #37 = Methodref          #32.#248      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #38 = Methodref          #31.#249      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #39 = Methodref          #99.#250      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.read:([BII)I\n-   #40 = Methodref          #13.#251      // org/apache/commons/compress/utils/BitInputStream.alignWithByteBoundary:()V\n-   #41 = Long               65535l\n-   #43 = String             #252          // Illegal LEN / NLEN values\n-   #44 = Class              #253          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState\n-   #45 = Methodref          #44.#254      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-   #46 = Class              #104          // \"[I\"\n-   #47 = Long               257l\n-   #49 = Methodref          #89.#255      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.populateDynamicTables:(Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n-   #50 = Methodref          #99.#256      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.available:()I\n-   #51 = Fieldref           #64.#257      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.literal:I\n-   #52 = Methodref          #89.#258      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-   #53 = Fieldref           #64.#259      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-   #54 = Fieldref           #64.#260      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-   #55 = Long               4l\n-   #57 = Fieldref           #89.#261      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.CODE_LENGTHS_ORDER:[I\n-   #58 = Long               3l\n-   #60 = Long               11l\n-   #62 = Methodref          #262.#263     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #63 = Methodref          #89.#264      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.getCodes:([I)[I\n-   #64 = Class              #265          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n-   #65 = Methodref          #64.#266      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.\"<init>\":(ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-   #66 = Methodref          #64.#267      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.left:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-   #67 = Methodref          #64.#268      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.right:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-   #68 = Methodref          #64.#269      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leaf:(I)V\n-   #69 = Methodref          #270.#271     // java/lang/Math.max:(II)I\n-   #70 = Methodref          #272.#273     // java/util/Arrays.copyOf:([II)[I\n-   #71 = Methodref          #13.#217      // org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n-   #72 = Long               -1l\n-   #74 = Class              #274          // java/io/EOFException\n-   #75 = String             #275          // Truncated Deflate64 Stream\n-   #76 = Methodref          #74.#249      // java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n-   #77 = Integer            32794\n-   #78 = Integer            49178\n-   #79 = Integer            65563\n-   #80 = Integer            98331\n-   #81 = Integer            131100\n-   #82 = Integer            196636\n-   #83 = Integer            262173\n-   #84 = Integer            393245\n-   #85 = Integer            524318\n-   #86 = Integer            786462\n-   #87 = Methodref          #272.#276     // java/util/Arrays.fill:([IIII)V\n-   #88 = Methodref          #272.#277     // java/util/Arrays.fill:([II)V\n-   #89 = Class              #278          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-   #90 = Class              #279          // java/lang/Object\n-   #91 = Class              #280          // java/io/Closeable\n-   #92 = Class              #281          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1\n-   #93 = Utf8               InnerClasses\n-   #94 = Utf8               DecodingMemory\n-   #95 = Utf8               BinaryTreeNode\n-   #96 = Utf8               HuffmanCodes\n-   #97 = Utf8               InitialState\n-   #98 = Utf8               UncompressedState\n-   #99 = Class              #282          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState\n-  #100 = Utf8               DecoderState\n-  #101 = Utf8               RUN_LENGTH_TABLE\n-  #102 = Utf8               [S\n-  #103 = Utf8               DISTANCE_TABLE\n-  #104 = Utf8               [I\n-  #105 = Utf8               CODE_LENGTHS_ORDER\n-  #106 = Utf8               FIXED_LITERALS\n-  #107 = Utf8               FIXED_DISTANCE\n-  #108 = Utf8               finalBlock\n-  #109 = Utf8               Z\n-  #110 = Utf8               state\n-  #111 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n-  #112 = Utf8               reader\n-  #113 = Utf8               Lorg/apache/commons/compress/utils/BitInputStream;\n-  #114 = Utf8               in\n-  #115 = Utf8               Ljava/io/InputStream;\n-  #116 = Utf8               memory\n-  #117 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n-  #118 = Utf8               <init>\n-  #119 = Utf8               (Ljava/io/InputStream;)V\n-  #120 = Utf8               Code\n-  #121 = Utf8               LineNumberTable\n-  #122 = Utf8               LocalVariableTable\n-  #123 = Utf8               this\n-  #124 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n-  #125 = Utf8               close\n-  #126 = Utf8               ()V\n-  #127 = Utf8               decode\n-  #128 = Utf8               ([B)I\n-  #129 = Utf8               b\n-  #130 = Utf8               [B\n-  #131 = Utf8               Exceptions\n-  #132 = Class              #283          // java/io/IOException\n-  #133 = Utf8               ([BII)I\n-  #134 = Utf8               tables\n-  #135 = Utf8               [[I\n-  #136 = Utf8               mode\n-  #137 = Utf8               I\n-  #138 = Utf8               off\n-  #139 = Utf8               len\n-  #140 = Utf8               StackMapTable\n-  #141 = Class              #278          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  #142 = Class              #130          // \"[B\"\n-  #143 = Utf8               switchToUncompressedState\n-  #144 = Utf8               bLen\n-  #145 = Utf8               J\n-  #146 = Utf8               bNLen\n-  #147 = Utf8               readDynamicTables\n-  #148 = Utf8               ()[[I\n-  #149 = Utf8               result\n-  #150 = Utf8               literals\n-  #151 = Utf8               distances\n-  #152 = Utf8               available\n-  #153 = Utf8               ()I\n-  #154 = Utf8               nextSymbol\n-  #155 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n-  #156 = Utf8               bit\n-  #157 = Utf8               tree\n-  #158 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #159 = Utf8               node\n-  #160 = Class              #265          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n-  #161 = Utf8               populateDynamicTables\n-  #162 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n-  #163 = Utf8               cLen\n-  #164 = Utf8               symbol\n-  #165 = Utf8               codeLengths\n-  #166 = Utf8               codeLengthValues\n-  #167 = Utf8               codeLengthTree\n-  #168 = Utf8               auxBuffer\n-  #169 = Utf8               value\n-  #170 = Utf8               length\n-  #171 = Class              #223          // org/apache/commons/compress/utils/BitInputStream\n-  #172 = Utf8               buildTree\n-  #173 = Utf8               ([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #174 = Utf8               p\n-  #175 = Utf8               lit\n-  #176 = Utf8               i\n-  #177 = Utf8               litTable\n-  #178 = Utf8               literalCodes\n-  #179 = Utf8               root\n-  #180 = Utf8               getCodes\n-  #181 = Utf8               ([I)[I\n-  #182 = Utf8               aLitTable\n-  #183 = Utf8               max\n-  #184 = Utf8               blCount\n-  #185 = Utf8               code\n-  #186 = Utf8               nextCode\n-  #187 = Utf8               readBits\n-  #188 = Utf8               (I)J\n-  #189 = Utf8               numBits\n-  #190 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-  #191 = Utf8               r\n-  #192 = Utf8               access$400\n-  #193 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Lorg/apache/commons/compress/utils/BitInputStream;\n-  #194 = Utf8               x0\n-  #195 = Utf8               access$500\n-  #196 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;I)J\n-  #197 = Utf8               x1\n-  #198 = Utf8               access$600\n-  #199 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n-  #200 = Utf8               access$700\n-  #201 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Ljava/io/InputStream;\n-  #202 = Utf8               access$800\n-  #203 = Utf8               access$900\n-  #204 = Utf8               access$1000\n-  #205 = Utf8               ()[S\n-  #206 = Utf8               access$1100\n-  #207 = Utf8               ()[I\n-  #208 = Utf8               <clinit>\n-  #209 = Utf8               SourceFile\n-  #210 = Utf8               HuffmanDecoder.java\n-  #211 = NameAndType        #103:#104     // DISTANCE_TABLE:[I\n-  #212 = NameAndType        #101:#102     // RUN_LENGTH_TABLE:[S\n-  #213 = NameAndType        #154:#155     // nextSymbol:(Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n-  #214 = NameAndType        #172:#173     // buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #215 = NameAndType        #114:#115     // in:Ljava/io/InputStream;\n-  #216 = NameAndType        #116:#117     // memory:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n-  #217 = NameAndType        #187:#188     // readBits:(I)J\n-  #218 = NameAndType        #112:#113     // reader:Lorg/apache/commons/compress/utils/BitInputStream;\n-  #219 = NameAndType        #118:#126     // \"<init>\":()V\n-  #220 = NameAndType        #108:#109     // finalBlock:Z\n-  #221 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory\n-  #222 = NameAndType        #118:#284     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #223 = Utf8               org/apache/commons/compress/utils/BitInputStream\n-  #224 = Class              #285          // java/nio/ByteOrder\n-  #225 = NameAndType        #286:#287     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-  #226 = NameAndType        #118:#288     // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-  #227 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState\n-  #228 = NameAndType        #118:#289     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #229 = NameAndType        #110:#111     // state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n-  #230 = NameAndType        #127:#133     // decode:([BII)I\n-  #231 = NameAndType        #290:#291     // hasData:()Z\n-  #232 = NameAndType        #110:#292     // state:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #233 = Class              #293          // org/apache/commons/compress/compressors/deflate64/HuffmanState\n-  #234 = NameAndType        #294:#295     // INITIAL:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #235 = NameAndType        #143:#126     // switchToUncompressedState:()V\n-  #236 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n-  #237 = NameAndType        #296:#295     // FIXED_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #238 = NameAndType        #106:#104     // FIXED_LITERALS:[I\n-  #239 = NameAndType        #107:#104     // FIXED_DISTANCE:[I\n-  #240 = NameAndType        #118:#297     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n-  #241 = NameAndType        #147:#148     // readDynamicTables:()[[I\n-  #242 = NameAndType        #298:#295     // DYNAMIC_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #243 = Utf8               java/lang/IllegalStateException\n-  #244 = Utf8               java/lang/StringBuilder\n-  #245 = Utf8               Unsupported compression:\n-  #246 = NameAndType        #299:#300     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #247 = NameAndType        #299:#301     // append:(I)Ljava/lang/StringBuilder;\n-  #248 = NameAndType        #302:#303     // toString:()Ljava/lang/String;\n-  #249 = NameAndType        #118:#304     // \"<init>\":(Ljava/lang/String;)V\n-  #250 = NameAndType        #305:#133     // read:([BII)I\n-  #251 = NameAndType        #306:#126     // alignWithByteBoundary:()V\n-  #252 = Utf8               Illegal LEN / NLEN values\n-  #253 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState\n-  #254 = NameAndType        #118:#307     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #255 = NameAndType        #161:#162     // populateDynamicTables:(Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n-  #256 = NameAndType        #152:#153     // available:()I\n-  #257 = NameAndType        #308:#137     // literal:I\n-  #258 = NameAndType        #187:#190     // readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-  #259 = NameAndType        #309:#158     // leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #260 = NameAndType        #310:#158     // rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #261 = NameAndType        #105:#104     // CODE_LENGTHS_ORDER:[I\n-  #262 = Class              #311          // java/lang/System\n-  #263 = NameAndType        #312:#313     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #264 = NameAndType        #180:#181     // getCodes:([I)[I\n-  #265 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n-  #266 = NameAndType        #118:#314     // \"<init>\":(ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #267 = NameAndType        #315:#316     // left:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #268 = NameAndType        #317:#316     // right:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #269 = NameAndType        #318:#319     // leaf:(I)V\n-  #270 = Class              #320          // java/lang/Math\n-  #271 = NameAndType        #183:#321     // max:(II)I\n-  #272 = Class              #322          // java/util/Arrays\n-  #273 = NameAndType        #323:#324     // copyOf:([II)[I\n-  #274 = Utf8               java/io/EOFException\n-  #275 = Utf8               Truncated Deflate64 Stream\n-  #276 = NameAndType        #325:#326     // fill:([IIII)V\n-  #277 = NameAndType        #325:#327     // fill:([II)V\n-  #278 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  #279 = Utf8               java/lang/Object\n-  #280 = Utf8               java/io/Closeable\n-  #281 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1\n-  #282 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState\n-  #283 = Utf8               java/io/IOException\n-  #284 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #285 = Utf8               java/nio/ByteOrder\n-  #286 = Utf8               LITTLE_ENDIAN\n-  #287 = Utf8               Ljava/nio/ByteOrder;\n-  #288 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-  #289 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #290 = Utf8               hasData\n-  #291 = Utf8               ()Z\n-  #292 = Utf8               ()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #293 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanState\n-  #294 = Utf8               INITIAL\n-  #295 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-  #296 = Utf8               FIXED_CODES\n-  #297 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n-  #298 = Utf8               DYNAMIC_CODES\n-  #299 = Utf8               append\n-  #300 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #301 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #302 = Utf8               toString\n-  #303 = Utf8               ()Ljava/lang/String;\n-  #304 = Utf8               (Ljava/lang/String;)V\n-  #305 = Utf8               read\n-  #306 = Utf8               alignWithByteBoundary\n-  #307 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #308 = Utf8               literal\n-  #309 = Utf8               leftNode\n-  #310 = Utf8               rightNode\n-  #311 = Utf8               java/lang/System\n-  #312 = Utf8               arraycopy\n-  #313 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #314 = Utf8               (ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n-  #315 = Utf8               left\n-  #316 = Utf8               ()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n-  #317 = Utf8               right\n-  #318 = Utf8               leaf\n-  #319 = Utf8               (I)V\n-  #320 = Utf8               java/lang/Math\n-  #321 = Utf8               (II)I\n-  #322 = Utf8               java/util/Arrays\n-  #323 = Utf8               copyOf\n-  #324 = Utf8               ([II)[I\n-  #325 = Utf8               fill\n-  #326 = Utf8               ([IIII)V\n-  #327 = Utf8               ([II)V\n+    #1 = Fieldref           #84.#203      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.DISTANCE_TABLE:[I\n+    #2 = Fieldref           #84.#204      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.RUN_LENGTH_TABLE:[S\n+    #3 = Methodref          #84.#205      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.nextSymbol:(Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n+    #4 = Methodref          #84.#206      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+    #5 = Fieldref           #84.#207      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.in:Ljava/io/InputStream;\n+    #6 = Fieldref           #84.#208      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.memory:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n+    #7 = Methodref          #84.#209      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readBits:(I)J\n+    #8 = Fieldref           #84.#210      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.reader:Lorg/apache/commons/compress/utils/BitInputStream;\n+    #9 = Methodref          #85.#211      // java/lang/Object.\"<init>\":()V\n+   #10 = Fieldref           #84.#212      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.finalBlock:Z\n+   #11 = Class              #213          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory\n+   #12 = Methodref          #11.#214      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+   #13 = Class              #215          // org/apache/commons/compress/utils/BitInputStream\n+   #14 = Fieldref           #216.#217     // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #15 = Methodref          #13.#218      // org/apache/commons/compress/utils/BitInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #16 = Class              #219          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState\n+   #17 = Methodref          #16.#220      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+   #18 = Fieldref           #84.#221      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+   #19 = Methodref          #84.#222      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.decode:([BII)I\n+   #20 = Methodref          #94.#223      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.hasData:()Z\n+   #21 = Methodref          #94.#224      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.state:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+   #22 = Fieldref           #225.#226     // org/apache/commons/compress/compressors/deflate64/HuffmanState.INITIAL:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+   #23 = Methodref          #84.#227      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.switchToUncompressedState:()V\n+   #24 = Class              #228          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n+   #25 = Fieldref           #225.#229     // org/apache/commons/compress/compressors/deflate64/HuffmanState.FIXED_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+   #26 = Fieldref           #84.#230      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.FIXED_LITERALS:[I\n+   #27 = Fieldref           #84.#231      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.FIXED_DISTANCE:[I\n+   #28 = Methodref          #24.#232      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n+   #29 = Methodref          #84.#233      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readDynamicTables:()[[I\n+   #30 = Fieldref           #225.#234     // org/apache/commons/compress/compressors/deflate64/HuffmanState.DYNAMIC_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+   #31 = Class              #235          // java/lang/IllegalStateException\n+   #32 = InvokeDynamic      #0:#239       // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+   #33 = Methodref          #31.#240      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #34 = Methodref          #94.#241      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.read:([BII)I\n+   #35 = Methodref          #13.#242      // org/apache/commons/compress/utils/BitInputStream.alignWithByteBoundary:()V\n+   #36 = Long               65535l\n+   #38 = String             #243          // Illegal LEN / NLEN values\n+   #39 = Class              #244          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState\n+   #40 = Methodref          #39.#245      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+   #41 = Class              #99           // \"[I\"\n+   #42 = Long               257l\n+   #44 = Methodref          #84.#246      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.populateDynamicTables:(Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n+   #45 = Methodref          #94.#247      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.available:()I\n+   #46 = Fieldref           #59.#248      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.literal:I\n+   #47 = Methodref          #84.#249      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+   #48 = Fieldref           #59.#250      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+   #49 = Fieldref           #59.#251      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+   #50 = Long               4l\n+   #52 = Fieldref           #84.#252      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.CODE_LENGTHS_ORDER:[I\n+   #53 = Long               3l\n+   #55 = Long               11l\n+   #57 = Methodref          #253.#254     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #58 = Methodref          #84.#255      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.getCodes:([I)[I\n+   #59 = Class              #256          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n+   #60 = Methodref          #59.#257      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.\"<init>\":(ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+   #61 = Methodref          #59.#258      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.left:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+   #62 = Methodref          #59.#259      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.right:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+   #63 = Methodref          #59.#260      // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leaf:(I)V\n+   #64 = Methodref          #261.#262     // java/lang/Math.max:(II)I\n+   #65 = Methodref          #263.#264     // java/util/Arrays.copyOf:([II)[I\n+   #66 = Methodref          #13.#209      // org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n+   #67 = Long               -1l\n+   #69 = Class              #265          // java/io/EOFException\n+   #70 = String             #266          // Truncated Deflate64 Stream\n+   #71 = Methodref          #69.#240      // java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n+   #72 = Integer            32794\n+   #73 = Integer            49178\n+   #74 = Integer            65563\n+   #75 = Integer            98331\n+   #76 = Integer            131100\n+   #77 = Integer            196636\n+   #78 = Integer            262173\n+   #79 = Integer            393245\n+   #80 = Integer            524318\n+   #81 = Integer            786462\n+   #82 = Methodref          #263.#267     // java/util/Arrays.fill:([IIII)V\n+   #83 = Methodref          #263.#268     // java/util/Arrays.fill:([II)V\n+   #84 = Class              #269          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+   #85 = Class              #270          // java/lang/Object\n+   #86 = Class              #271          // java/io/Closeable\n+   #87 = Class              #272          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1\n+   #88 = Utf8               InnerClasses\n+   #89 = Utf8               DecodingMemory\n+   #90 = Utf8               BinaryTreeNode\n+   #91 = Utf8               HuffmanCodes\n+   #92 = Utf8               InitialState\n+   #93 = Utf8               UncompressedState\n+   #94 = Class              #273          // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState\n+   #95 = Utf8               DecoderState\n+   #96 = Utf8               RUN_LENGTH_TABLE\n+   #97 = Utf8               [S\n+   #98 = Utf8               DISTANCE_TABLE\n+   #99 = Utf8               [I\n+  #100 = Utf8               CODE_LENGTHS_ORDER\n+  #101 = Utf8               FIXED_LITERALS\n+  #102 = Utf8               FIXED_DISTANCE\n+  #103 = Utf8               finalBlock\n+  #104 = Utf8               Z\n+  #105 = Utf8               state\n+  #106 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+  #107 = Utf8               reader\n+  #108 = Utf8               Lorg/apache/commons/compress/utils/BitInputStream;\n+  #109 = Utf8               in\n+  #110 = Utf8               Ljava/io/InputStream;\n+  #111 = Utf8               memory\n+  #112 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n+  #113 = Utf8               <init>\n+  #114 = Utf8               (Ljava/io/InputStream;)V\n+  #115 = Utf8               Code\n+  #116 = Utf8               LineNumberTable\n+  #117 = Utf8               LocalVariableTable\n+  #118 = Utf8               this\n+  #119 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+  #120 = Utf8               close\n+  #121 = Utf8               ()V\n+  #122 = Utf8               decode\n+  #123 = Utf8               ([B)I\n+  #124 = Utf8               b\n+  #125 = Utf8               [B\n+  #126 = Utf8               Exceptions\n+  #127 = Class              #274          // java/io/IOException\n+  #128 = Utf8               ([BII)I\n+  #129 = Utf8               tables\n+  #130 = Utf8               [[I\n+  #131 = Utf8               mode\n+  #132 = Utf8               I\n+  #133 = Utf8               off\n+  #134 = Utf8               len\n+  #135 = Utf8               StackMapTable\n+  #136 = Class              #125          // \"[B\"\n+  #137 = Utf8               switchToUncompressedState\n+  #138 = Utf8               bLen\n+  #139 = Utf8               J\n+  #140 = Utf8               bNLen\n+  #141 = Utf8               readDynamicTables\n+  #142 = Utf8               ()[[I\n+  #143 = Utf8               result\n+  #144 = Utf8               literals\n+  #145 = Utf8               distances\n+  #146 = Utf8               available\n+  #147 = Utf8               ()I\n+  #148 = Utf8               nextSymbol\n+  #149 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n+  #150 = Utf8               bit\n+  #151 = Utf8               tree\n+  #152 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #153 = Utf8               node\n+  #154 = Utf8               populateDynamicTables\n+  #155 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n+  #156 = Utf8               cLen\n+  #157 = Utf8               symbol\n+  #158 = Utf8               codeLengths\n+  #159 = Utf8               codeLengthValues\n+  #160 = Utf8               codeLengthTree\n+  #161 = Utf8               auxBuffer\n+  #162 = Utf8               value\n+  #163 = Utf8               length\n+  #164 = Utf8               buildTree\n+  #165 = Utf8               ([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #166 = Utf8               p\n+  #167 = Utf8               lit\n+  #168 = Utf8               i\n+  #169 = Utf8               litTable\n+  #170 = Utf8               literalCodes\n+  #171 = Utf8               root\n+  #172 = Utf8               getCodes\n+  #173 = Utf8               ([I)[I\n+  #174 = Utf8               aLitTable\n+  #175 = Utf8               max\n+  #176 = Utf8               blCount\n+  #177 = Utf8               code\n+  #178 = Utf8               nextCode\n+  #179 = Utf8               readBits\n+  #180 = Utf8               (I)J\n+  #181 = Utf8               numBits\n+  #182 = Utf8               (Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+  #183 = Utf8               r\n+  #184 = Utf8               access$400\n+  #185 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Lorg/apache/commons/compress/utils/BitInputStream;\n+  #186 = Utf8               x0\n+  #187 = Utf8               access$500\n+  #188 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;I)J\n+  #189 = Utf8               x1\n+  #190 = Utf8               access$600\n+  #191 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n+  #192 = Utf8               access$700\n+  #193 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)Ljava/io/InputStream;\n+  #194 = Utf8               access$800\n+  #195 = Utf8               access$900\n+  #196 = Utf8               access$1000\n+  #197 = Utf8               ()[S\n+  #198 = Utf8               access$1100\n+  #199 = Utf8               ()[I\n+  #200 = Utf8               <clinit>\n+  #201 = Utf8               SourceFile\n+  #202 = Utf8               HuffmanDecoder.java\n+  #203 = NameAndType        #98:#99       // DISTANCE_TABLE:[I\n+  #204 = NameAndType        #96:#97       // RUN_LENGTH_TABLE:[S\n+  #205 = NameAndType        #148:#149     // nextSymbol:(Lorg/apache/commons/compress/utils/BitInputStream;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;)I\n+  #206 = NameAndType        #164:#165     // buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #207 = NameAndType        #109:#110     // in:Ljava/io/InputStream;\n+  #208 = NameAndType        #111:#112     // memory:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory;\n+  #209 = NameAndType        #179:#180     // readBits:(I)J\n+  #210 = NameAndType        #107:#108     // reader:Lorg/apache/commons/compress/utils/BitInputStream;\n+  #211 = NameAndType        #113:#121     // \"<init>\":()V\n+  #212 = NameAndType        #103:#104     // finalBlock:Z\n+  #213 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory\n+  #214 = NameAndType        #113:#275     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #215 = Utf8               org/apache/commons/compress/utils/BitInputStream\n+  #216 = Class              #276          // java/nio/ByteOrder\n+  #217 = NameAndType        #277:#278     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+  #218 = NameAndType        #113:#279     // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+  #219 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState\n+  #220 = NameAndType        #113:#280     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #221 = NameAndType        #105:#106     // state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+  #222 = NameAndType        #122:#128     // decode:([BII)I\n+  #223 = NameAndType        #281:#282     // hasData:()Z\n+  #224 = NameAndType        #105:#283     // state:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+  #225 = Class              #284          // org/apache/commons/compress/compressors/deflate64/HuffmanState\n+  #226 = NameAndType        #285:#286     // INITIAL:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+  #227 = NameAndType        #137:#121     // switchToUncompressedState:()V\n+  #228 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n+  #229 = NameAndType        #287:#286     // FIXED_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+  #230 = NameAndType        #101:#99      // FIXED_LITERALS:[I\n+  #231 = NameAndType        #102:#99      // FIXED_DISTANCE:[I\n+  #232 = NameAndType        #113:#288     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n+  #233 = NameAndType        #141:#142     // readDynamicTables:()[[I\n+  #234 = NameAndType        #289:#286     // DYNAMIC_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+  #235 = Utf8               java/lang/IllegalStateException\n+  #236 = Utf8               BootstrapMethods\n+  #237 = MethodHandle       6:#290        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #238 = String             #291          // Unsupported compression: \\u0001\n+  #239 = NameAndType        #292:#293     // makeConcatWithConstants:(I)Ljava/lang/String;\n+  #240 = NameAndType        #113:#294     // \"<init>\":(Ljava/lang/String;)V\n+  #241 = NameAndType        #295:#128     // read:([BII)I\n+  #242 = NameAndType        #296:#121     // alignWithByteBoundary:()V\n+  #243 = Utf8               Illegal LEN / NLEN values\n+  #244 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState\n+  #245 = NameAndType        #113:#297     // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #246 = NameAndType        #154:#155     // populateDynamicTables:(Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n+  #247 = NameAndType        #146:#147     // available:()I\n+  #248 = NameAndType        #298:#132     // literal:I\n+  #249 = NameAndType        #179:#182     // readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+  #250 = NameAndType        #299:#152     // leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #251 = NameAndType        #300:#152     // rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #252 = NameAndType        #100:#99      // CODE_LENGTHS_ORDER:[I\n+  #253 = Class              #301          // java/lang/System\n+  #254 = NameAndType        #302:#303     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #255 = NameAndType        #172:#173     // getCodes:([I)[I\n+  #256 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n+  #257 = NameAndType        #113:#304     // \"<init>\":(ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #258 = NameAndType        #305:#306     // left:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #259 = NameAndType        #307:#306     // right:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #260 = NameAndType        #308:#309     // leaf:(I)V\n+  #261 = Class              #310          // java/lang/Math\n+  #262 = NameAndType        #175:#311     // max:(II)I\n+  #263 = Class              #312          // java/util/Arrays\n+  #264 = NameAndType        #313:#314     // copyOf:([II)[I\n+  #265 = Utf8               java/io/EOFException\n+  #266 = Utf8               Truncated Deflate64 Stream\n+  #267 = NameAndType        #315:#316     // fill:([IIII)V\n+  #268 = NameAndType        #315:#317     // fill:([II)V\n+  #269 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  #270 = Utf8               java/lang/Object\n+  #271 = Utf8               java/io/Closeable\n+  #272 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1\n+  #273 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState\n+  #274 = Utf8               java/io/IOException\n+  #275 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #276 = Utf8               java/nio/ByteOrder\n+  #277 = Utf8               LITTLE_ENDIAN\n+  #278 = Utf8               Ljava/nio/ByteOrder;\n+  #279 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+  #280 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #281 = Utf8               hasData\n+  #282 = Utf8               ()Z\n+  #283 = Utf8               ()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+  #284 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanState\n+  #285 = Utf8               INITIAL\n+  #286 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n+  #287 = Utf8               FIXED_CODES\n+  #288 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n+  #289 = Utf8               DYNAMIC_CODES\n+  #290 = Methodref          #318.#319     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #291 = Utf8               Unsupported compression: \\u0001\n+  #292 = Utf8               makeConcatWithConstants\n+  #293 = Utf8               (I)Ljava/lang/String;\n+  #294 = Utf8               (Ljava/lang/String;)V\n+  #295 = Utf8               read\n+  #296 = Utf8               alignWithByteBoundary\n+  #297 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #298 = Utf8               literal\n+  #299 = Utf8               leftNode\n+  #300 = Utf8               rightNode\n+  #301 = Utf8               java/lang/System\n+  #302 = Utf8               arraycopy\n+  #303 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #304 = Utf8               (ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+  #305 = Utf8               left\n+  #306 = Utf8               ()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+  #307 = Utf8               right\n+  #308 = Utf8               leaf\n+  #309 = Utf8               (I)V\n+  #310 = Utf8               java/lang/Math\n+  #311 = Utf8               (II)I\n+  #312 = Utf8               java/util/Arrays\n+  #313 = Utf8               copyOf\n+  #314 = Utf8               ([II)[I\n+  #315 = Utf8               fill\n+  #316 = Utf8               ([IIII)V\n+  #317 = Utf8               ([II)V\n+  #318 = Class              #320          // java/lang/invoke/StringConcatFactory\n+  #319 = NameAndType        #292:#323     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #320 = Utf8               java/lang/invoke/StringConcatFactory\n+  #321 = Class              #325          // java/lang/invoke/MethodHandles$Lookup\n+  #322 = Utf8               Lookup\n+  #323 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #324 = Class              #326          // java/lang/invoke/MethodHandles\n+  #325 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #326 = Utf8               java/lang/invoke/MethodHandles\n {\n   private static final short[] RUN_LENGTH_TABLE;\n     descriptor: [S\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   private static final int[] DISTANCE_TABLE;\n     descriptor: [I\n@@ -469,20 +468,20 @@\n       stack=8, locals=6, args_size=4\n          0: aload_0\n          1: getfield      #10                 // Field finalBlock:Z\n          4: ifeq          17\n          7: aload_0\n          8: getfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n         11: invokevirtual #20                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.hasData:()Z\n-        14: ifeq          189\n+        14: ifeq          176\n         17: aload_0\n         18: getfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n         21: invokevirtual #21                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.state:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n         24: getstatic     #22                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanState.INITIAL:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n-        27: if_acmpne     178\n+        27: if_acmpne     165\n         30: aload_0\n         31: aload_0\n         32: iconst_1\n         33: invokespecial #7                  // Method readBits:(I)J\n         36: lconst_1\n         37: lcmp\n         38: ifne          45\n@@ -500,25 +499,25 @@\n                        0: 84\n                        1: 91\n                        2: 115\n                  default: 147\n             }\n         84: aload_0\n         85: invokespecial #23                 // Method switchToUncompressedState:()V\n-        88: goto          175\n+        88: goto          162\n         91: aload_0\n         92: new           #24                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n         95: dup\n         96: aload_0\n         97: getstatic     #25                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanState.FIXED_CODES:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;\n        100: getstatic     #26                 // Field FIXED_LITERALS:[I\n        103: getstatic     #27                 // Field FIXED_DISTANCE:[I\n        106: invokespecial #28                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n        109: putfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n-       112: goto          175\n+       112: goto          162\n        115: aload_0\n        116: invokespecial #29                 // Method readDynamicTables:()[[I\n        119: astore        5\n        121: aload_0\n        122: new           #24                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes\n        125: dup\n        126: aload_0\n@@ -527,62 +526,56 @@\n        132: iconst_0\n        133: aaload\n        134: aload         5\n        136: iconst_1\n        137: aaload\n        138: invokespecial #28                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;[I[I)V\n        141: putfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n-       144: goto          175\n+       144: goto          162\n        147: new           #31                 // class java/lang/IllegalStateException\n        150: dup\n-       151: new           #32                 // class java/lang/StringBuilder\n-       154: dup\n-       155: invokespecial #33                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       158: ldc           #34                 // String Unsupported compression:\n-       160: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       163: iload         4\n-       165: invokevirtual #36                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       168: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       171: invokespecial #38                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-       174: athrow\n-       175: goto          0\n-       178: aload_0\n-       179: getfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n-       182: aload_1\n-       183: iload_2\n-       184: iload_3\n-       185: invokevirtual #39                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.read:([BII)I\n-       188: ireturn\n-       189: iconst_m1\n-       190: ireturn\n+       151: iload         4\n+       153: invokedynamic #32,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+       158: invokespecial #33                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+       161: athrow\n+       162: goto          0\n+       165: aload_0\n+       166: getfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n+       169: aload_1\n+       170: iload_2\n+       171: iload_3\n+       172: invokevirtual #34                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.read:([BII)I\n+       175: ireturn\n+       176: iconst_m1\n+       177: ireturn\n       LineNumberTable:\n         line 133: 0\n         line 134: 17\n         line 135: 30\n         line 136: 49\n         line 137: 57\n         line 139: 84\n         line 140: 88\n         line 142: 91\n         line 143: 112\n         line 145: 115\n         line 146: 121\n         line 147: 144\n         line 149: 147\n-        line 151: 175\n-        line 152: 178\n-        line 155: 189\n+        line 151: 162\n+        line 152: 165\n+        line 155: 176\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n           121      26     5 tables   [[I\n-           57     118     4  mode   I\n-            0     191     0  this   Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n-            0     191     1     b   [B\n-            0     191     2   off   I\n-            0     191     3   len   I\n+           57     105     4  mode   I\n+            0     178     0  this   Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+            0     178     1     b   [B\n+            0     178     2   off   I\n+            0     178     3   len   I\n       StackMapTable: number_of_entries = 11\n         frame_type = 0 /* same */\n         frame_type = 16 /* same */\n         frame_type = 91 /* same_locals_1_stack_item */\n           stack = [ class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 0\n@@ -591,56 +584,56 @@\n         frame_type = 252 /* append */\n           offset_delta = 37\n           locals = [ int ]\n         frame_type = 6 /* same */\n         frame_type = 23 /* same */\n         frame_type = 31 /* same */\n         frame_type = 250 /* chop */\n-          offset_delta = 27\n+          offset_delta = 14\n         frame_type = 2 /* same */\n         frame_type = 10 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   private void switchToUncompressedState() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=5, args_size=1\n          0: aload_0\n          1: getfield      #8                  // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n-         4: invokevirtual #40                 // Method org/apache/commons/compress/utils/BitInputStream.alignWithByteBoundary:()V\n+         4: invokevirtual #35                 // Method org/apache/commons/compress/utils/BitInputStream.alignWithByteBoundary:()V\n          7: aload_0\n          8: bipush        16\n         10: invokespecial #7                  // Method readBits:(I)J\n         13: lstore_1\n         14: aload_0\n         15: bipush        16\n         17: invokespecial #7                  // Method readBits:(I)J\n         20: lstore_3\n         21: lload_1\n-        22: ldc2_w        #41                 // long 65535l\n+        22: ldc2_w        #36                 // long 65535l\n         25: lxor\n-        26: ldc2_w        #41                 // long 65535l\n+        26: ldc2_w        #36                 // long 65535l\n         29: land\n         30: lload_3\n         31: lcmp\n         32: ifeq          45\n         35: new           #31                 // class java/lang/IllegalStateException\n         38: dup\n-        39: ldc           #43                 // String Illegal LEN / NLEN values\n-        41: invokespecial #38                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        39: ldc           #38                 // String Illegal LEN / NLEN values\n+        41: invokespecial #33                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n         44: athrow\n         45: aload_0\n-        46: new           #44                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState\n+        46: new           #39                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState\n         49: dup\n         50: aload_0\n         51: lload_1\n         52: aconst_null\n-        53: invokespecial #45                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+        53: invokespecial #40                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;JLorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n         56: putfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n         59: return\n       LineNumberTable:\n         line 159: 0\n         line 160: 7\n         line 161: 14\n         line 162: 21\n@@ -661,20 +654,20 @@\n \n   private int[][] readDynamicTables() throws java.io.IOException;\n     descriptor: ()[[I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=4, args_size=1\n          0: iconst_2\n-         1: anewarray     #46                 // class \"[I\"\n+         1: anewarray     #41                 // class \"[I\"\n          4: astore_1\n          5: aload_0\n          6: iconst_5\n          7: invokespecial #7                  // Method readBits:(I)J\n-        10: ldc2_w        #47                 // long 257l\n+        10: ldc2_w        #42                 // long 257l\n         13: ladd\n         14: l2i\n         15: istore_2\n         16: aload_1\n         17: iconst_0\n         18: iload_2\n         19: newarray       int\n@@ -695,15 +688,15 @@\n         38: getfield      #8                  // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n         41: aload_1\n         42: iconst_0\n         43: aaload\n         44: aload_1\n         45: iconst_1\n         46: aaload\n-        47: invokestatic  #49                 // Method populateDynamicTables:(Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n+        47: invokestatic  #44                 // Method populateDynamicTables:(Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n         50: aload_1\n         51: areturn\n       LineNumberTable:\n         line 170: 0\n         line 171: 5\n         line 172: 16\n         line 174: 22\n@@ -722,15 +715,15 @@\n   int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0000)\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n          1: getfield      #18                 // Field state:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState;\n-         4: invokevirtual #50                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.available:()I\n+         4: invokevirtual #45                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState.available:()I\n          7: ireturn\n       LineNumberTable:\n         line 182: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n     Exceptions:\n@@ -742,36 +735,36 @@\n     Code:\n       stack=4, locals=5, args_size=2\n          0: aload_1\n          1: astore_2\n          2: aload_2\n          3: ifnull        41\n          6: aload_2\n-         7: getfield      #51                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.literal:I\n+         7: getfield      #46                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.literal:I\n         10: iconst_m1\n         11: if_icmpne     41\n         14: aload_0\n         15: iconst_1\n-        16: invokestatic  #52                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+        16: invokestatic  #47                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n         19: lstore_3\n         20: lload_3\n         21: lconst_0\n         22: lcmp\n         23: ifne          33\n         26: aload_2\n-        27: getfield      #53                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+        27: getfield      #48                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n         30: goto          37\n         33: aload_2\n-        34: getfield      #54                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+        34: getfield      #49                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n         37: astore_2\n         38: goto          2\n         41: aload_2\n         42: ifnull        52\n         45: aload_2\n-        46: getfield      #51                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.literal:I\n+        46: getfield      #46                 // Field org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.literal:I\n         49: goto          53\n         52: iconst_m1\n         53: ireturn\n       LineNumberTable:\n         line 354: 0\n         line 355: 2\n         line 356: 14\n@@ -804,34 +797,34 @@\n   private static void populateDynamicTables(org.apache.commons.compress.utils.BitInputStream, int[], int[]) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/utils/BitInputStream;[I[I)V\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=11, args_size=3\n          0: aload_0\n          1: iconst_4\n-         2: invokestatic  #52                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-         5: ldc2_w        #55                 // long 4l\n+         2: invokestatic  #47                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+         5: ldc2_w        #50                 // long 4l\n          8: ladd\n          9: l2i\n         10: istore_3\n         11: bipush        19\n         13: newarray       int\n         15: astore        4\n         17: iconst_0\n         18: istore        5\n         20: iload         5\n         22: iload_3\n         23: if_icmpge     47\n         26: aload         4\n-        28: getstatic     #57                 // Field CODE_LENGTHS_ORDER:[I\n+        28: getstatic     #52                 // Field CODE_LENGTHS_ORDER:[I\n         31: iload         5\n         33: iaload\n         34: aload_0\n         35: iconst_3\n-        36: invokestatic  #52                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+        36: invokestatic  #47                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n         39: l2i\n         40: iastore\n         41: iinc          5, 1\n         44: goto          20\n         47: aload         4\n         49: invokestatic  #4                  // Method buildTree:([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n         52: astore        5\n@@ -877,61 +870,61 @@\n        129: iastore\n        130: goto          203\n        133: iload         10\n        135: bipush        16\n        137: if_icmpne     155\n        140: aload_0\n        141: iconst_2\n-       142: invokestatic  #52                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-       145: ldc2_w        #58                 // long 3l\n+       142: invokestatic  #47                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+       145: ldc2_w        #53                 // long 3l\n        148: ladd\n        149: l2i\n        150: istore        8\n        152: goto          203\n        155: iload         10\n        157: bipush        17\n        159: if_icmpne     180\n        162: iconst_0\n        163: istore        7\n        165: aload_0\n        166: iconst_3\n-       167: invokestatic  #52                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-       170: ldc2_w        #58                 // long 3l\n+       167: invokestatic  #47                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+       170: ldc2_w        #53                 // long 3l\n        173: ladd\n        174: l2i\n        175: istore        8\n        177: goto          203\n        180: iload         10\n        182: bipush        18\n        184: if_icmpne     203\n        187: iconst_0\n        188: istore        7\n        190: aload_0\n        191: bipush        7\n-       193: invokestatic  #52                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n-       196: ldc2_w        #60                 // long 11l\n+       193: invokestatic  #47                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+       196: ldc2_w        #55                 // long 11l\n        199: ladd\n        200: l2i\n        201: istore        8\n        203: goto          72\n        206: aload         6\n        208: iconst_0\n        209: aload_1\n        210: iconst_0\n        211: aload_1\n        212: arraylength\n-       213: invokestatic  #62                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       213: invokestatic  #57                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        216: aload         6\n        218: aload_1\n        219: arraylength\n        220: aload_2\n        221: iconst_0\n        222: aload_2\n        223: arraylength\n-       224: invokestatic  #62                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       224: invokestatic  #57                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        227: return\n       LineNumberTable:\n         line 363: 0\n         line 365: 11\n         line 366: 17\n         line 367: 26\n         line 366: 41\n@@ -998,21 +991,21 @@\n \n   private static org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode buildTree(int[]);\n     descriptor: ([I)Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=9, args_size=1\n          0: aload_0\n-         1: invokestatic  #63                 // Method getCodes:([I)[I\n+         1: invokestatic  #58                 // Method getCodes:([I)[I\n          4: astore_1\n-         5: new           #64                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n+         5: new           #59                 // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode\n          8: dup\n          9: iconst_0\n         10: aconst_null\n-        11: invokespecial #65                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.\"<init>\":(ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n+        11: invokespecial #60                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.\"<init>\":(ILorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V\n         14: astore_2\n         15: iconst_0\n         16: istore_3\n         17: iload_3\n         18: aload_0\n         19: arraylength\n         20: if_icmpge     112\n@@ -1041,24 +1034,24 @@\n         58: iload         7\n         60: ishl\n         61: iand\n         62: istore        8\n         64: iload         8\n         66: ifne          77\n         69: aload         5\n-        71: invokevirtual #66                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.left:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+        71: invokevirtual #61                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.left:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n         74: goto          82\n         77: aload         5\n-        79: invokevirtual #67                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.right:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n+        79: invokevirtual #62                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.right:()Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;\n         82: astore        5\n         84: iinc          7, -1\n         87: goto          50\n         90: aload         5\n         92: iload_3\n-        93: invokevirtual #68                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leaf:(I)V\n+        93: invokevirtual #63                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode.leaf:(I)V\n         96: aload_1\n         97: iload         4\n         99: iconst_1\n        100: isub\n        101: dup2\n        102: iaload\n        103: iconst_1\n@@ -1137,30 +1130,30 @@\n         20: if_icmpge     50\n         23: aload_3\n         24: iload         5\n         26: iaload\n         27: istore        6\n         29: iload_1\n         30: iload         6\n-        32: invokestatic  #69                 // Method java/lang/Math.max:(II)I\n+        32: invokestatic  #64                 // Method java/lang/Math.max:(II)I\n         35: istore_1\n         36: aload_2\n         37: iload         6\n         39: dup2\n         40: iaload\n         41: iconst_1\n         42: iadd\n         43: iastore\n         44: iinc          5, 1\n         47: goto          16\n         50: aload_2\n         51: iload_1\n         52: iconst_1\n         53: iadd\n-        54: invokestatic  #70                 // Method java/util/Arrays.copyOf:([II)[I\n+        54: invokestatic  #65                 // Method java/util/Arrays.copyOf:([II)[I\n         57: astore_2\n         58: iconst_0\n         59: istore_3\n         60: iload_1\n         61: iconst_1\n         62: iadd\n         63: newarray       int\n@@ -1227,15 +1220,15 @@\n     descriptor: (I)J\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: getfield      #8                  // Field reader:Lorg/apache/commons/compress/utils/BitInputStream;\n          4: iload_1\n-         5: invokestatic  #52                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n+         5: invokestatic  #47                 // Method readBits:(Lorg/apache/commons/compress/utils/BitInputStream;I)J\n          8: lreturn\n       LineNumberTable:\n         line 524: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n             0       9     1 numBits   I\n@@ -1245,24 +1238,24 @@\n   private static long readBits(org.apache.commons.compress.utils.BitInputStream, int) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/utils/BitInputStream;I)J\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=4, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: invokevirtual #71                 // Method org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n+         2: invokevirtual #66                 // Method org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n          5: lstore_2\n          6: lload_2\n-         7: ldc2_w        #72                 // long -1l\n+         7: ldc2_w        #67                 // long -1l\n         10: lcmp\n         11: ifne          24\n-        14: new           #74                 // class java/io/EOFException\n+        14: new           #69                 // class java/io/EOFException\n         17: dup\n-        18: ldc           #75                 // String Truncated Deflate64 Stream\n-        20: invokespecial #76                 // Method java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n+        18: ldc           #70                 // String Truncated Deflate64 Stream\n+        20: invokespecial #71                 // Method java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n         23: athrow\n         24: lload_2\n         25: lreturn\n       LineNumberTable:\n         line 528: 0\n         line 529: 6\n         line 530: 14\n@@ -1603,51 +1596,51 @@\n        340: iastore\n        341: dup\n        342: bipush        21\n        344: sipush        24601\n        347: iastore\n        348: dup\n        349: bipush        22\n-       351: ldc           #77                 // int 32794\n+       351: ldc           #72                 // int 32794\n        353: iastore\n        354: dup\n        355: bipush        23\n-       357: ldc           #78                 // int 49178\n+       357: ldc           #73                 // int 49178\n        359: iastore\n        360: dup\n        361: bipush        24\n-       363: ldc           #79                 // int 65563\n+       363: ldc           #74                 // int 65563\n        365: iastore\n        366: dup\n        367: bipush        25\n-       369: ldc           #80                 // int 98331\n+       369: ldc           #75                 // int 98331\n        371: iastore\n        372: dup\n        373: bipush        26\n-       375: ldc           #81                 // int 131100\n+       375: ldc           #76                 // int 131100\n        377: iastore\n        378: dup\n        379: bipush        27\n-       381: ldc           #82                 // int 196636\n+       381: ldc           #77                 // int 196636\n        383: iastore\n        384: dup\n        385: bipush        28\n-       387: ldc           #83                 // int 262173\n+       387: ldc           #78                 // int 262173\n        389: iastore\n        390: dup\n        391: bipush        29\n-       393: ldc           #84                 // int 393245\n+       393: ldc           #79                 // int 393245\n        395: iastore\n        396: dup\n        397: bipush        30\n-       399: ldc           #85                 // int 524318\n+       399: ldc           #80                 // int 524318\n        401: iastore\n        402: dup\n        403: bipush        31\n-       405: ldc           #86                 // int 786462\n+       405: ldc           #81                 // int 786462\n        407: iastore\n        408: putstatic     #1                  // Field DISTANCE_TABLE:[I\n        411: bipush        19\n        413: newarray       int\n        415: dup\n        416: iconst_0\n        417: bipush        16\n@@ -1720,44 +1713,44 @@\n        507: bipush        17\n        509: iconst_1\n        510: iastore\n        511: dup\n        512: bipush        18\n        514: bipush        15\n        516: iastore\n-       517: putstatic     #57                 // Field CODE_LENGTHS_ORDER:[I\n+       517: putstatic     #52                 // Field CODE_LENGTHS_ORDER:[I\n        520: sipush        288\n        523: newarray       int\n        525: putstatic     #26                 // Field FIXED_LITERALS:[I\n        528: getstatic     #26                 // Field FIXED_LITERALS:[I\n        531: iconst_0\n        532: sipush        144\n        535: bipush        8\n-       537: invokestatic  #87                 // Method java/util/Arrays.fill:([IIII)V\n+       537: invokestatic  #82                 // Method java/util/Arrays.fill:([IIII)V\n        540: getstatic     #26                 // Field FIXED_LITERALS:[I\n        543: sipush        144\n        546: sipush        256\n        549: bipush        9\n-       551: invokestatic  #87                 // Method java/util/Arrays.fill:([IIII)V\n+       551: invokestatic  #82                 // Method java/util/Arrays.fill:([IIII)V\n        554: getstatic     #26                 // Field FIXED_LITERALS:[I\n        557: sipush        256\n        560: sipush        280\n        563: bipush        7\n-       565: invokestatic  #87                 // Method java/util/Arrays.fill:([IIII)V\n+       565: invokestatic  #82                 // Method java/util/Arrays.fill:([IIII)V\n        568: getstatic     #26                 // Field FIXED_LITERALS:[I\n        571: sipush        280\n        574: sipush        288\n        577: bipush        8\n-       579: invokestatic  #87                 // Method java/util/Arrays.fill:([IIII)V\n+       579: invokestatic  #82                 // Method java/util/Arrays.fill:([IIII)V\n        582: bipush        32\n        584: newarray       int\n        586: putstatic     #27                 // Field FIXED_DISTANCE:[I\n        589: getstatic     #27                 // Field FIXED_DISTANCE:[I\n        592: iconst_5\n-       593: invokestatic  #88                 // Method java/util/Arrays.fill:([II)V\n+       593: invokestatic  #83                 // Method java/util/Arrays.fill:([II)V\n        596: return\n       LineNumberTable:\n         line 52: 0\n         line 78: 202\n         line 89: 411\n         line 99: 520\n         line 100: 528\n@@ -1766,14 +1759,19 @@\n         line 103: 568\n         line 105: 582\n         line 106: 589\n         line 107: 596\n }\n SourceFile: \"HuffmanDecoder.java\"\n InnerClasses:\n-  static #92;                             // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1\n-  private static #94= #11 of #89;         // DecodingMemory=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  private static #95= #64 of #89;         // BinaryTreeNode=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  private #96= #24 of #89;                // HuffmanCodes=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  private #97= #16 of #89;                // InitialState=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  private #98= #44 of #89;                // UncompressedState=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-  private static abstract #100= #99 of #89; // DecoderState=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  static #87;                             // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1\n+  private static #89= #11 of #84;         // DecodingMemory=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  private static #90= #59 of #84;         // BinaryTreeNode=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  private #91= #24 of #84;                // HuffmanCodes=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  private #92= #16 of #84;                // InitialState=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  private #93= #39 of #84;                // UncompressedState=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  private static abstract #95= #94 of #84; // DecoderState=class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState of class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+  public static final #322= #321 of #324; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+BootstrapMethods:\n+  0: #237 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #238 Unsupported compression: \\u0001\n"}]}
