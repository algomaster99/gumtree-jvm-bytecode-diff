{"diffoscope-json-version": 1, "source1": "first/IntList.class", "source2": "second/IntList.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,218 +10,218 @@\n     private int lastIndex;\n     private int modCount;\n     \n     public IntList() {\n         this(10);\n     }\n     \n-    public IntList(final int capacity) {\n-        if (capacity < 0) {\n+    public IntList(final int n) {\n+        if (n < 0) {\n             throw new IllegalArgumentException();\n         }\n-        final int n = 0;\n-        this.lastIndex = n;\n-        this.firstIndex = n;\n-        this.array = new int[capacity];\n+        final int n2 = 0;\n+        this.lastIndex = n2;\n+        this.firstIndex = n2;\n+        this.array = new int[n];\n     }\n     \n-    public boolean add(final int object) {\n+    public boolean add(final int n) {\n         if (this.lastIndex == this.array.length) {\n             this.growAtEnd(1);\n         }\n-        this.array[this.lastIndex++] = object;\n+        this.array[this.lastIndex++] = n;\n         ++this.modCount;\n         return true;\n     }\n     \n-    public void add(final int location, final int object) {\n-        final int size = this.lastIndex - this.firstIndex;\n-        if (0 < location && location < size) {\n+    public void add(final int n, final int n2) {\n+        final int n3 = this.lastIndex - this.firstIndex;\n+        if (0 < n && n < n3) {\n             if (this.firstIndex == 0 && this.lastIndex == this.array.length) {\n-                this.growForInsert(location, 1);\n+                this.growForInsert(n, 1);\n             }\n-            else if ((location < size / 2 && this.firstIndex > 0) || this.lastIndex == this.array.length) {\n-                System.arraycopy(this.array, this.firstIndex, this.array, --this.firstIndex, location);\n+            else if ((n < n3 / 2 && this.firstIndex > 0) || this.lastIndex == this.array.length) {\n+                System.arraycopy(this.array, this.firstIndex, this.array, --this.firstIndex, n);\n             }\n             else {\n-                final int index = location + this.firstIndex;\n-                System.arraycopy(this.array, index, this.array, index + 1, size - location);\n+                final int n4 = n + this.firstIndex;\n+                System.arraycopy(this.array, n4, this.array, n4 + 1, n3 - n);\n                 ++this.lastIndex;\n             }\n-            this.array[location + this.firstIndex] = object;\n+            this.array[n + this.firstIndex] = n2;\n         }\n-        else if (location == 0) {\n+        else if (n == 0) {\n             if (this.firstIndex == 0) {\n                 this.growAtFront(1);\n             }\n-            this.array[--this.firstIndex] = object;\n+            this.array[--this.firstIndex] = n2;\n         }\n         else {\n-            if (location != size) {\n+            if (n != n3) {\n                 throw new IndexOutOfBoundsException();\n             }\n             if (this.lastIndex == this.array.length) {\n                 this.growAtEnd(1);\n             }\n-            this.array[this.lastIndex++] = object;\n+            this.array[this.lastIndex++] = n2;\n         }\n         ++this.modCount;\n     }\n     \n     public void clear() {\n         if (this.firstIndex != this.lastIndex) {\n             Arrays.fill(this.array, this.firstIndex, this.lastIndex, -1);\n             final int n = 0;\n             this.lastIndex = n;\n             this.firstIndex = n;\n             ++this.modCount;\n         }\n     }\n     \n-    public int get(final int location) {\n-        if (0 <= location && location < this.lastIndex - this.firstIndex) {\n-            return this.array[this.firstIndex + location];\n-        }\n-        throw new IndexOutOfBoundsException(\"\" + location);\n+    public int get(final int i) {\n+        if (0 <= i && i < this.lastIndex - this.firstIndex) {\n+            return this.array[this.firstIndex + i];\n+        }\n+        throw new IndexOutOfBoundsException(\"\" + i);\n     }\n     \n-    private void growAtEnd(final int required) {\n-        final int size = this.lastIndex - this.firstIndex;\n-        if (this.firstIndex >= required - (this.array.length - this.lastIndex)) {\n-            final int newLast = this.lastIndex - this.firstIndex;\n-            if (size > 0) {\n-                System.arraycopy(this.array, this.firstIndex, this.array, 0, size);\n+    private void growAtEnd(final int n) {\n+        final int lastIndex = this.lastIndex - this.firstIndex;\n+        if (this.firstIndex >= n - (this.array.length - this.lastIndex)) {\n+            final int lastIndex2 = this.lastIndex - this.firstIndex;\n+            if (lastIndex > 0) {\n+                System.arraycopy(this.array, this.firstIndex, this.array, 0, lastIndex);\n             }\n             this.firstIndex = 0;\n-            this.lastIndex = newLast;\n+            this.lastIndex = lastIndex2;\n         }\n         else {\n-            int increment = size / 2;\n-            if (required > increment) {\n-                increment = required;\n-            }\n-            if (increment < 12) {\n-                increment = 12;\n-            }\n-            final int[] newArray = new int[size + increment];\n-            if (size > 0) {\n-                System.arraycopy(this.array, this.firstIndex, newArray, 0, size);\n+            int n2 = lastIndex / 2;\n+            if (n > n2) {\n+                n2 = n;\n+            }\n+            if (n2 < 12) {\n+                n2 = 12;\n+            }\n+            final int[] array = new int[lastIndex + n2];\n+            if (lastIndex > 0) {\n+                System.arraycopy(this.array, this.firstIndex, array, 0, lastIndex);\n                 this.firstIndex = 0;\n-                this.lastIndex = size;\n+                this.lastIndex = lastIndex;\n             }\n-            this.array = newArray;\n+            this.array = array;\n         }\n     }\n     \n-    private void growAtFront(final int required) {\n-        final int size = this.lastIndex - this.firstIndex;\n-        if (this.array.length - this.lastIndex + this.firstIndex >= required) {\n-            final int newFirst = this.array.length - size;\n-            if (size > 0) {\n-                System.arraycopy(this.array, this.firstIndex, this.array, newFirst, size);\n+    private void growAtFront(final int n) {\n+        final int n2 = this.lastIndex - this.firstIndex;\n+        if (this.array.length - this.lastIndex + this.firstIndex >= n) {\n+            final int firstIndex = this.array.length - n2;\n+            if (n2 > 0) {\n+                System.arraycopy(this.array, this.firstIndex, this.array, firstIndex, n2);\n             }\n-            this.firstIndex = newFirst;\n+            this.firstIndex = firstIndex;\n             this.lastIndex = this.array.length;\n         }\n         else {\n-            int increment = size / 2;\n-            if (required > increment) {\n-                increment = required;\n+            int n3 = n2 / 2;\n+            if (n > n3) {\n+                n3 = n;\n             }\n-            if (increment < 12) {\n-                increment = 12;\n+            if (n3 < 12) {\n+                n3 = 12;\n             }\n-            final int[] newArray = new int[size + increment];\n-            if (size > 0) {\n-                System.arraycopy(this.array, this.firstIndex, newArray, newArray.length - size, size);\n+            final int[] array = new int[n2 + n3];\n+            if (n2 > 0) {\n+                System.arraycopy(this.array, this.firstIndex, array, array.length - n2, n2);\n             }\n-            this.firstIndex = newArray.length - size;\n-            this.lastIndex = newArray.length;\n-            this.array = newArray;\n+            this.firstIndex = array.length - n2;\n+            this.lastIndex = array.length;\n+            this.array = array;\n         }\n     }\n     \n-    private void growForInsert(final int location, final int required) {\n-        final int size = this.lastIndex - this.firstIndex;\n-        int increment = size / 2;\n-        if (required > increment) {\n-            increment = required;\n+    private void growForInsert(final int n, final int n2) {\n+        final int n3 = this.lastIndex - this.firstIndex;\n+        int n4 = n3 / 2;\n+        if (n2 > n4) {\n+            n4 = n2;\n         }\n-        if (increment < 12) {\n-            increment = 12;\n+        if (n4 < 12) {\n+            n4 = 12;\n         }\n-        final int[] newArray = new int[size + increment];\n-        final int newFirst = increment - required;\n-        System.arraycopy(this.array, location + this.firstIndex, newArray, newFirst + location + required, size - location);\n-        System.arraycopy(this.array, this.firstIndex, newArray, newFirst, location);\n-        this.firstIndex = newFirst;\n-        this.lastIndex = size + increment;\n-        this.array = newArray;\n+        final int[] array = new int[n3 + n4];\n+        final int firstIndex = n4 - n2;\n+        System.arraycopy(this.array, n + this.firstIndex, array, firstIndex + n + n2, n3 - n);\n+        System.arraycopy(this.array, this.firstIndex, array, firstIndex, n);\n+        this.firstIndex = firstIndex;\n+        this.lastIndex = n3 + n4;\n+        this.array = array;\n     }\n     \n-    public void increment(final int location) {\n-        if (0 > location || location >= this.lastIndex - this.firstIndex) {\n-            throw new IndexOutOfBoundsException(\"\" + location);\n+    public void increment(final int i) {\n+        if (0 > i || i >= this.lastIndex - this.firstIndex) {\n+            throw new IndexOutOfBoundsException(\"\" + i);\n         }\n         final int[] array = this.array;\n-        final int n = this.firstIndex + location;\n+        final int n = this.firstIndex + i;\n         ++array[n];\n     }\n     \n     public boolean isEmpty() {\n         return this.lastIndex == this.firstIndex;\n     }\n     \n-    public int remove(final int location) {\n-        final int size = this.lastIndex - this.firstIndex;\n-        if (0 > location || location >= size) {\n+    public int remove(final int n) {\n+        final int n2 = this.lastIndex - this.firstIndex;\n+        if (0 > n || n >= n2) {\n             throw new IndexOutOfBoundsException();\n         }\n-        int result;\n-        if (location == size - 1) {\n+        int n3;\n+        if (n == n2 - 1) {\n             final int[] array = this.array;\n             final int lastIndex = this.lastIndex - 1;\n             this.lastIndex = lastIndex;\n-            result = array[lastIndex];\n+            n3 = array[lastIndex];\n             this.array[this.lastIndex] = 0;\n         }\n-        else if (location == 0) {\n-            result = this.array[this.firstIndex];\n+        else if (n == 0) {\n+            n3 = this.array[this.firstIndex];\n             this.array[this.firstIndex++] = 0;\n         }\n         else {\n-            final int elementIndex = this.firstIndex + location;\n-            result = this.array[elementIndex];\n-            if (location < size / 2) {\n-                System.arraycopy(this.array, this.firstIndex, this.array, this.firstIndex + 1, location);\n+            final int n4 = this.firstIndex + n;\n+            n3 = this.array[n4];\n+            if (n < n2 / 2) {\n+                System.arraycopy(this.array, this.firstIndex, this.array, this.firstIndex + 1, n);\n                 this.array[this.firstIndex++] = 0;\n             }\n             else {\n-                System.arraycopy(this.array, elementIndex + 1, this.array, elementIndex, size - location - 1);\n+                System.arraycopy(this.array, n4 + 1, this.array, n4, n2 - n - 1);\n                 this.array[--this.lastIndex] = 0;\n             }\n         }\n         if (this.firstIndex == this.lastIndex) {\n-            final int n = 0;\n-            this.lastIndex = n;\n-            this.firstIndex = n;\n+            final int n5 = 0;\n+            this.lastIndex = n5;\n+            this.firstIndex = n5;\n         }\n         ++this.modCount;\n-        return result;\n+        return n3;\n     }\n     \n     public int size() {\n         return this.lastIndex - this.firstIndex;\n     }\n     \n     public int[] toArray() {\n-        final int size = this.lastIndex - this.firstIndex;\n-        final int[] result = new int[size];\n-        System.arraycopy(this.array, this.firstIndex, result, 0, size);\n-        return result;\n+        final int n = this.lastIndex - this.firstIndex;\n+        final int[] array = new int[n];\n+        System.arraycopy(this.array, this.firstIndex, array, 0, n);\n+        return array;\n     }\n     \n     public void addAll(final IntList list) {\n         this.growAtEnd(list.size());\n         for (int i = 0; i < list.size(); ++i) {\n             this.add(list.get(i));\n         }\n"}]}
