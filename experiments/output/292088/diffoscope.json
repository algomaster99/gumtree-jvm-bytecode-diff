{"diffoscope-json-version": 1, "source1": "first/AtomicSafeInitializer.class", "source2": "second/AtomicSafeInitializer.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,66 +1,65 @@\n-  SHA-256 checksum f0d9e9836bd760f4ee98ead7ade7397efccaec8780e5a189d596e159002881f6\n+  SHA-256 checksum f427bba52ba4288d02c5f23c99edc9a3913dbb5fd7eaca45d388cb5e01507322\n   Compiled from \"AtomicSafeInitializer.java\"\n public abstract class org.apache.commons.lang3.concurrent.AtomicSafeInitializer<T extends java.lang.Object> extends java.lang.Object implements org.apache.commons.lang3.concurrent.ConcurrentInitializer<T>\n   minor version: 0\n   major version: 51\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n   this_class: #10                         // org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n   super_class: #11                        // java/lang/Object\n   interfaces: 1, fields: 2, methods: 3, attributes: 2\n Constant pool:\n-   #1 = Methodref          #11.#34        // java/lang/Object.\"<init>\":()V\n-   #2 = Class              #35            // java/util/concurrent/atomic/AtomicReference\n-   #3 = Methodref          #2.#34         // java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n-   #4 = Fieldref           #10.#36        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.factory:Ljava/util/concurrent/atomic/AtomicReference;\n-   #5 = Fieldref           #10.#37        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.reference:Ljava/util/concurrent/atomic/AtomicReference;\n-   #6 = Methodref          #2.#38         // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n-   #7 = Methodref          #2.#39         // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-   #8 = Methodref          #10.#40        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.initialize:()Ljava/lang/Object;\n-   #9 = Methodref          #2.#41         // java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n-  #10 = Class              #42            // org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n-  #11 = Class              #43            // java/lang/Object\n-  #12 = Class              #44            // org/apache/commons/lang3/concurrent/ConcurrentInitializer\n+   #1 = Methodref          #11.#33        // java/lang/Object.\"<init>\":()V\n+   #2 = Class              #34            // java/util/concurrent/atomic/AtomicReference\n+   #3 = Methodref          #2.#33         // java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n+   #4 = Fieldref           #10.#35        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.factory:Ljava/util/concurrent/atomic/AtomicReference;\n+   #5 = Fieldref           #10.#36        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.reference:Ljava/util/concurrent/atomic/AtomicReference;\n+   #6 = Methodref          #2.#37         // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n+   #7 = Methodref          #2.#38         // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+   #8 = Methodref          #10.#39        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.initialize:()Ljava/lang/Object;\n+   #9 = Methodref          #2.#40         // java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n+  #10 = Class              #41            // org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n+  #11 = Class              #42            // java/lang/Object\n+  #12 = Class              #43            // org/apache/commons/lang3/concurrent/ConcurrentInitializer\n   #13 = Utf8               factory\n   #14 = Utf8               Ljava/util/concurrent/atomic/AtomicReference;\n   #15 = Utf8               Signature\n   #16 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;>;\n   #17 = Utf8               reference\n   #18 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<TT;>;\n   #19 = Utf8               <init>\n   #20 = Utf8               ()V\n   #21 = Utf8               Code\n   #22 = Utf8               LineNumberTable\n   #23 = Utf8               get\n   #24 = Utf8               ()Ljava/lang/Object;\n   #25 = Utf8               StackMapTable\n-  #26 = Class              #43            // java/lang/Object\n-  #27 = Utf8               Exceptions\n-  #28 = Class              #45            // org/apache/commons/lang3/concurrent/ConcurrentException\n-  #29 = Utf8               ()TT;\n-  #30 = Utf8               initialize\n-  #31 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n-  #32 = Utf8               SourceFile\n-  #33 = Utf8               AtomicSafeInitializer.java\n-  #34 = NameAndType        #19:#20        // \"<init>\":()V\n-  #35 = Utf8               java/util/concurrent/atomic/AtomicReference\n-  #36 = NameAndType        #13:#14        // factory:Ljava/util/concurrent/atomic/AtomicReference;\n-  #37 = NameAndType        #17:#14        // reference:Ljava/util/concurrent/atomic/AtomicReference;\n-  #38 = NameAndType        #23:#24        // get:()Ljava/lang/Object;\n-  #39 = NameAndType        #46:#47        // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #40 = NameAndType        #30:#24        // initialize:()Ljava/lang/Object;\n-  #41 = NameAndType        #48:#49        // set:(Ljava/lang/Object;)V\n-  #42 = Utf8               org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n-  #43 = Utf8               java/lang/Object\n-  #44 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentInitializer\n-  #45 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentException\n-  #46 = Utf8               compareAndSet\n-  #47 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #48 = Utf8               set\n-  #49 = Utf8               (Ljava/lang/Object;)V\n+  #26 = Utf8               Exceptions\n+  #27 = Class              #44            // org/apache/commons/lang3/concurrent/ConcurrentException\n+  #28 = Utf8               ()TT;\n+  #29 = Utf8               initialize\n+  #30 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n+  #31 = Utf8               SourceFile\n+  #32 = Utf8               AtomicSafeInitializer.java\n+  #33 = NameAndType        #19:#20        // \"<init>\":()V\n+  #34 = Utf8               java/util/concurrent/atomic/AtomicReference\n+  #35 = NameAndType        #13:#14        // factory:Ljava/util/concurrent/atomic/AtomicReference;\n+  #36 = NameAndType        #17:#14        // reference:Ljava/util/concurrent/atomic/AtomicReference;\n+  #37 = NameAndType        #23:#24        // get:()Ljava/lang/Object;\n+  #38 = NameAndType        #45:#46        // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #39 = NameAndType        #29:#24        // initialize:()Ljava/lang/Object;\n+  #40 = NameAndType        #47:#48        // set:(Ljava/lang/Object;)V\n+  #41 = Utf8               org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n+  #42 = Utf8               java/lang/Object\n+  #43 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentInitializer\n+  #44 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentException\n+  #45 = Utf8               compareAndSet\n+  #46 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #47 = Utf8               set\n+  #48 = Utf8               (Ljava/lang/Object;)V\n {\n   private final java.util.concurrent.atomic.AtomicReference<org.apache.commons.lang3.concurrent.AtomicSafeInitializer<T>> factory;\n     descriptor: Ljava/util/concurrent/atomic/AtomicReference;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n     Signature: #16                          // Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;>;\n \n   private final java.util.concurrent.atomic.AtomicReference<T> reference;\n@@ -124,18 +123,18 @@\n       StackMapTable: number_of_entries = 2\n         frame_type = 0 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 37\n           locals = [ class java/lang/Object ]\n     Exceptions:\n       throws org.apache.commons.lang3.concurrent.ConcurrentException\n-    Signature: #29                          // ()TT;\n+    Signature: #28                          // ()TT;\n \n   protected abstract T initialize() throws org.apache.commons.lang3.concurrent.ConcurrentException;\n     descriptor: ()Ljava/lang/Object;\n     flags: (0x0404) ACC_PROTECTED, ACC_ABSTRACT\n     Exceptions:\n       throws org.apache.commons.lang3.concurrent.ConcurrentException\n-    Signature: #29                          // ()TT;\n+    Signature: #28                          // ()TT;\n }\n-Signature: #31                          // <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n+Signature: #30                          // <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n SourceFile: \"AtomicSafeInitializer.java\"\n"}]}
