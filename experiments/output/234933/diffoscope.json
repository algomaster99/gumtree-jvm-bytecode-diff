{"diffoscope-json-version": 1, "source1": "first/CircularBufferInputStream.class", "source2": "second/CircularBufferInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,85 +9,85 @@\n public class CircularBufferInputStream extends InputStream\n {\n     protected final InputStream in;\n     protected final CircularByteBuffer buffer;\n     protected final int bufferSize;\n     private boolean eof;\n     \n-    public CircularBufferInputStream(final InputStream inputStream, final int bufferSize) {\n-        if (bufferSize <= 0) {\n-            throw new IllegalArgumentException(\"Invalid bufferSize: \" + bufferSize);\n-        }\n-        this.in = Objects.requireNonNull(inputStream, \"inputStream\");\n-        this.buffer = new CircularByteBuffer(bufferSize);\n-        this.bufferSize = bufferSize;\n+    public CircularBufferInputStream(final InputStream obj, final int n) {\n+        if (n <= 0) {\n+            throw new IllegalArgumentException(\"Invalid bufferSize: \" + n);\n+        }\n+        this.in = Objects.requireNonNull(obj, \"inputStream\");\n+        this.buffer = new CircularByteBuffer(n);\n+        this.bufferSize = n;\n         this.eof = false;\n     }\n     \n     public CircularBufferInputStream(final InputStream inputStream) {\n         this(inputStream, 8192);\n     }\n     \n     protected void fillBuffer() throws IOException {\n         if (this.eof) {\n             return;\n         }\n-        int space = this.buffer.getSpace();\n-        final byte[] buf = IOUtils.byteArray(space);\n-        while (space > 0) {\n-            final int res = this.in.read(buf, 0, space);\n-            if (res == -1) {\n+        int i = this.buffer.getSpace();\n+        final byte[] byteArray = IOUtils.byteArray(i);\n+        while (i > 0) {\n+            final int read = this.in.read(byteArray, 0, i);\n+            if (read == -1) {\n                 this.eof = true;\n                 return;\n             }\n-            if (res <= 0) {\n+            if (read <= 0) {\n                 continue;\n             }\n-            this.buffer.add(buf, 0, res);\n-            space -= res;\n+            this.buffer.add(byteArray, 0, read);\n+            i -= read;\n         }\n     }\n     \n-    protected boolean haveBytes(final int count) throws IOException {\n-        if (this.buffer.getCurrentNumberOfBytes() < count) {\n+    protected boolean haveBytes(final int n) throws IOException {\n+        if (this.buffer.getCurrentNumberOfBytes() < n) {\n             this.fillBuffer();\n         }\n         return this.buffer.hasBytes();\n     }\n     \n     @Override\n     public int read() throws IOException {\n         if (!this.haveBytes(1)) {\n             return -1;\n         }\n         return this.buffer.read() & 0xFF;\n     }\n     \n     @Override\n-    public int read(final byte[] buffer) throws IOException {\n-        return this.read(buffer, 0, buffer.length);\n+    public int read(final byte[] array) throws IOException {\n+        return this.read(array, 0, array.length);\n     }\n     \n     @Override\n-    public int read(final byte[] targetBuffer, final int offset, final int length) throws IOException {\n-        Objects.requireNonNull(targetBuffer, \"targetBuffer\");\n-        if (offset < 0) {\n+    public int read(final byte[] obj, final int n, final int a) throws IOException {\n+        Objects.requireNonNull(obj, \"targetBuffer\");\n+        if (n < 0) {\n             throw new IllegalArgumentException(\"Offset must not be negative\");\n         }\n-        if (length < 0) {\n+        if (a < 0) {\n             throw new IllegalArgumentException(\"Length must not be negative\");\n         }\n-        if (!this.haveBytes(length)) {\n+        if (!this.haveBytes(a)) {\n             return -1;\n         }\n-        final int result = Math.min(length, this.buffer.getCurrentNumberOfBytes());\n-        for (int i = 0; i < result; ++i) {\n-            targetBuffer[offset + i] = this.buffer.read();\n+        final int min = Math.min(a, this.buffer.getCurrentNumberOfBytes());\n+        for (int i = 0; i < min; ++i) {\n+            obj[n + i] = this.buffer.read();\n         }\n-        return result;\n+        return min;\n     }\n     \n     @Override\n     public void close() throws IOException {\n         this.in.close();\n         this.eof = true;\n         this.buffer.clear();\n"}]}
