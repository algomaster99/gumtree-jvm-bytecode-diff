{"diffoscope-json-version": 1, "source1": "first/BinaryCodec.class", "source2": "second/BinaryCodec.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,132 +16,132 @@\n     private static final int BIT_3 = 8;\n     private static final int BIT_4 = 16;\n     private static final int BIT_5 = 32;\n     private static final int BIT_6 = 64;\n     private static final int BIT_7 = 128;\n     private static final int[] BITS;\n     \n-    public static byte[] fromAscii(final byte[] ascii) {\n-        if (isEmpty(ascii)) {\n+    public static byte[] fromAscii(final byte[] array) {\n+        if (isEmpty(array)) {\n             return BinaryCodec.EMPTY_BYTE_ARRAY;\n         }\n-        final int asciiLength = ascii.length;\n-        final byte[] raw = new byte[asciiLength >> 3];\n-        for (int ii = 0, jj = asciiLength - 1; ii < raw.length; ++ii, jj -= 8) {\n-            for (int bits = 0; bits < BinaryCodec.BITS.length; ++bits) {\n-                if (ascii[jj - bits] == 49) {\n-                    final byte[] array = raw;\n-                    final int n = ii;\n-                    array[n] |= (byte)BinaryCodec.BITS[bits];\n+        final int length = array.length;\n+        final byte[] array2 = new byte[length >> 3];\n+        for (int i = 0, n = length - 1; i < array2.length; ++i, n -= 8) {\n+            for (int j = 0; j < BinaryCodec.BITS.length; ++j) {\n+                if (array[n - j] == 49) {\n+                    final byte[] array3 = array2;\n+                    final int n2 = i;\n+                    array3[n2] |= (byte)BinaryCodec.BITS[j];\n                 }\n             }\n         }\n-        return raw;\n+        return array2;\n     }\n     \n-    public static byte[] fromAscii(final char[] ascii) {\n-        if (ascii == null || ascii.length == 0) {\n+    public static byte[] fromAscii(final char[] array) {\n+        if (array == null || array.length == 0) {\n             return BinaryCodec.EMPTY_BYTE_ARRAY;\n         }\n-        final int asciiLength = ascii.length;\n-        final byte[] raw = new byte[asciiLength >> 3];\n-        for (int ii = 0, jj = asciiLength - 1; ii < raw.length; ++ii, jj -= 8) {\n-            for (int bits = 0; bits < BinaryCodec.BITS.length; ++bits) {\n-                if (ascii[jj - bits] == '1') {\n-                    final byte[] array = raw;\n-                    final int n = ii;\n-                    array[n] |= (byte)BinaryCodec.BITS[bits];\n+        final int length = array.length;\n+        final byte[] array2 = new byte[length >> 3];\n+        for (int i = 0, n = length - 1; i < array2.length; ++i, n -= 8) {\n+            for (int j = 0; j < BinaryCodec.BITS.length; ++j) {\n+                if (array[n - j] == '1') {\n+                    final byte[] array3 = array2;\n+                    final int n2 = i;\n+                    array3[n2] |= (byte)BinaryCodec.BITS[j];\n                 }\n             }\n         }\n-        return raw;\n+        return array2;\n     }\n     \n     static boolean isEmpty(final byte[] array) {\n         return array == null || array.length == 0;\n     }\n     \n-    public static byte[] toAsciiBytes(final byte[] raw) {\n-        if (isEmpty(raw)) {\n+    public static byte[] toAsciiBytes(final byte[] array) {\n+        if (isEmpty(array)) {\n             return BinaryCodec.EMPTY_BYTE_ARRAY;\n         }\n-        final int rawLength = raw.length;\n-        final byte[] l_ascii = new byte[rawLength << 3];\n-        for (int ii = 0, jj = l_ascii.length - 1; ii < rawLength; ++ii, jj -= 8) {\n-            for (int bits = 0; bits < BinaryCodec.BITS.length; ++bits) {\n-                if ((raw[ii] & BinaryCodec.BITS[bits]) == 0x0) {\n-                    l_ascii[jj - bits] = 48;\n+        final int length = array.length;\n+        final byte[] array2 = new byte[length << 3];\n+        for (int i = 0, n = array2.length - 1; i < length; ++i, n -= 8) {\n+            for (int j = 0; j < BinaryCodec.BITS.length; ++j) {\n+                if ((array[i] & BinaryCodec.BITS[j]) == 0x0) {\n+                    array2[n - j] = 48;\n                 }\n                 else {\n-                    l_ascii[jj - bits] = 49;\n+                    array2[n - j] = 49;\n                 }\n             }\n         }\n-        return l_ascii;\n+        return array2;\n     }\n     \n-    public static char[] toAsciiChars(final byte[] raw) {\n-        if (isEmpty(raw)) {\n+    public static char[] toAsciiChars(final byte[] array) {\n+        if (isEmpty(array)) {\n             return BinaryCodec.EMPTY_CHAR_ARRAY;\n         }\n-        final int rawLength = raw.length;\n-        final char[] l_ascii = new char[rawLength << 3];\n-        for (int ii = 0, jj = l_ascii.length - 1; ii < rawLength; ++ii, jj -= 8) {\n-            for (int bits = 0; bits < BinaryCodec.BITS.length; ++bits) {\n-                if ((raw[ii] & BinaryCodec.BITS[bits]) == 0x0) {\n-                    l_ascii[jj - bits] = '0';\n+        final int length = array.length;\n+        final char[] array2 = new char[length << 3];\n+        for (int i = 0, n = array2.length - 1; i < length; ++i, n -= 8) {\n+            for (int j = 0; j < BinaryCodec.BITS.length; ++j) {\n+                if ((array[i] & BinaryCodec.BITS[j]) == 0x0) {\n+                    array2[n - j] = '0';\n                 }\n                 else {\n-                    l_ascii[jj - bits] = '1';\n+                    array2[n - j] = '1';\n                 }\n             }\n         }\n-        return l_ascii;\n+        return array2;\n     }\n     \n-    public static String toAsciiString(final byte[] raw) {\n-        return new String(toAsciiChars(raw));\n+    public static String toAsciiString(final byte[] array) {\n+        return new String(toAsciiChars(array));\n     }\n     \n-    public byte[] decode(final byte[] ascii) {\n-        return fromAscii(ascii);\n+    public byte[] decode(final byte[] array) {\n+        return fromAscii(array);\n     }\n     \n-    public Object decode(final Object ascii) throws DecoderException {\n-        if (ascii == null) {\n+    public Object decode(final Object o) throws DecoderException {\n+        if (o == null) {\n             return BinaryCodec.EMPTY_BYTE_ARRAY;\n         }\n-        if (ascii instanceof byte[]) {\n-            return fromAscii((byte[])ascii);\n+        if (o instanceof byte[]) {\n+            return fromAscii((byte[])o);\n         }\n-        if (ascii instanceof char[]) {\n-            return fromAscii((char[])ascii);\n+        if (o instanceof char[]) {\n+            return fromAscii((char[])o);\n         }\n-        if (ascii instanceof String) {\n-            return fromAscii(((String)ascii).toCharArray());\n+        if (o instanceof String) {\n+            return fromAscii(((String)o).toCharArray());\n         }\n         throw new DecoderException(\"argument not a byte array\");\n     }\n     \n-    public byte[] encode(final byte[] raw) {\n-        return toAsciiBytes(raw);\n+    public byte[] encode(final byte[] array) {\n+        return toAsciiBytes(array);\n     }\n     \n-    public Object encode(final Object raw) throws EncoderException {\n-        if (!(raw instanceof byte[])) {\n+    public Object encode(final Object o) throws EncoderException {\n+        if (!(o instanceof byte[])) {\n             throw new EncoderException(\"argument not a byte array\");\n         }\n-        return toAsciiChars((byte[])raw);\n+        return toAsciiChars((byte[])o);\n     }\n     \n-    public byte[] toByteArray(final String ascii) {\n-        if (ascii == null) {\n+    public byte[] toByteArray(final String s) {\n+        if (s == null) {\n             return BinaryCodec.EMPTY_BYTE_ARRAY;\n         }\n-        return fromAscii(ascii.toCharArray());\n+        return fromAscii(s.toCharArray());\n     }\n     \n     static {\n         EMPTY_CHAR_ARRAY = new char[0];\n         EMPTY_BYTE_ARRAY = new byte[0];\n         BITS = new int[] { 1, 2, 4, 8, 16, 32, 64, 128 };\n     }\n"}]}
