{"diffoscope-json-version": 1, "source1": "first/FileUtils.class", "source2": "second/FileUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -74,14 +74,26 @@\n     public static final BigInteger ONE_PB_BI;\n     public static final long ONE_EB = 1152921504606846976L;\n     public static final BigInteger ONE_EB_BI;\n     public static final BigInteger ONE_ZB;\n     public static final BigInteger ONE_YB;\n     public static final File[] EMPTY_FILE_ARRAY;\n     \n+    static {\n+        ONE_KB_BI = BigInteger.valueOf(1024L);\n+        ONE_MB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_KB_BI);\n+        ONE_GB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_MB_BI);\n+        ONE_TB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_GB_BI);\n+        ONE_PB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_TB_BI);\n+        ONE_EB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_PB_BI);\n+        ONE_ZB = BigInteger.valueOf(1024L).multiply(BigInteger.valueOf(1152921504606846976L));\n+        ONE_YB = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_ZB);\n+        EMPTY_FILE_ARRAY = new File[0];\n+    }\n+    \n     private static CopyOption[] addCopyAttributes(final CopyOption... copyOptions) {\n         final CopyOption[] actual = (CopyOption[])Arrays.copyOf(copyOptions, copyOptions.length + 1);\n         Arrays.sort(actual, 0, copyOptions.length);\n         if (Arrays.binarySearch(copyOptions, 0, copyOptions.length, StandardCopyOption.COPY_ATTRIBUTES) >= 0) {\n             return copyOptions;\n         }\n         actual[actual.length - 1] = StandardCopyOption.COPY_ATTRIBUTES;\n@@ -119,28 +131,51 @@\n         return byteCountToDisplaySize(BigInteger.valueOf(size));\n     }\n     \n     public static Checksum checksum(final File file, final Checksum checksum) throws IOException {\n         requireExistsChecked(file, \"file\");\n         requireFile(file, \"file\");\n         Objects.requireNonNull(checksum, \"checksum\");\n-        try (final InputStream inputStream = new CheckedInputStream(new FileInputStream(file), checksum)) {\n-            IOUtils.consume(inputStream);\n+        Throwable t = null;\n+        try {\n+            final InputStream inputStream = new CheckedInputStream(new FileInputStream(file), checksum);\n+            try {\n+                IOUtils.consume(inputStream);\n+            }\n+            finally {\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n         return checksum;\n     }\n     \n     public static long checksumCRC32(final File file) throws IOException {\n         return checksum(file, new CRC32()).getValue();\n     }\n     \n     public static void cleanDirectory(final File directory) throws IOException {\n         final File[] files = listFiles(directory, null);\n         final List<Exception> causeList = new ArrayList<Exception>();\n-        for (final File file : files) {\n+        File[] array;\n+        for (int length = (array = files).length, i = 0; i < length; ++i) {\n+            final File file = array[i];\n             try {\n                 forceDelete(file);\n             }\n             catch (final IOException ioe) {\n                 causeList.add(ioe);\n             }\n         }\n@@ -148,15 +183,17 @@\n             throw new IOExceptionList(directory.toString(), (List)causeList);\n         }\n     }\n     \n     private static void cleanDirectoryOnExit(final File directory) throws IOException {\n         final File[] files = listFiles(directory, null);\n         final List<Exception> causeList = new ArrayList<Exception>();\n-        for (final File file : files) {\n+        File[] array;\n+        for (int length = (array = files).length, i = 0; i < length; ++i) {\n+            final File file = array[i];\n             try {\n                 forceDeleteOnExit(file);\n             }\n             catch (final IOException ioe) {\n                 causeList.add(ioe);\n             }\n         }\n@@ -183,17 +220,59 @@\n         requireFile(file2, \"file2\");\n         if (file1.length() != file2.length()) {\n             return false;\n         }\n         if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {\n             return true;\n         }\n-        try (final InputStream input1 = new FileInputStream(file1);\n-             final InputStream input2 = new FileInputStream(file2)) {\n-            return IOUtils.contentEquals(input1, input2);\n+        Throwable t = null;\n+        try {\n+            final InputStream input1 = new FileInputStream(file1);\n+            try {\n+                final InputStream input2 = new FileInputStream(file2);\n+                try {\n+                    final boolean contentEquals = IOUtils.contentEquals(input1, input2);\n+                    if (input2 != null) {\n+                        input2.close();\n+                    }\n+                    return contentEquals;\n+                }\n+                finally {\n+                    if (input2 != null) {\n+                        input2.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n+                if (input1 != null) {\n+                    input1.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception2;\n+                t = exception2;\n+            }\n+            else {\n+                final Throwable exception2;\n+                if (t != exception2) {\n+                    t.addSuppressed(exception2);\n+                }\n+            }\n         }\n     }\n     \n     public static boolean contentEqualsIgnoreEOL(final File file1, final File file2, final String charsetName) throws IOException {\n         if (file1 == null && file2 == null) {\n             return true;\n         }\n@@ -209,17 +288,59 @@\n         }\n         requireFile(file1, \"file1\");\n         requireFile(file2, \"file2\");\n         if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {\n             return true;\n         }\n         final Charset charset = Charsets.toCharset(charsetName);\n-        try (final Reader input1 = new InputStreamReader(new FileInputStream(file1), charset);\n-             final Reader input2 = new InputStreamReader(new FileInputStream(file2), charset)) {\n-            return IOUtils.contentEqualsIgnoreEOL(input1, input2);\n+        Throwable t = null;\n+        try {\n+            final Reader input1 = new InputStreamReader(new FileInputStream(file1), charset);\n+            try {\n+                final Reader input2 = new InputStreamReader(new FileInputStream(file2), charset);\n+                try {\n+                    final boolean contentEqualsIgnoreEOL = IOUtils.contentEqualsIgnoreEOL(input1, input2);\n+                    if (input2 != null) {\n+                        input2.close();\n+                    }\n+                    return contentEqualsIgnoreEOL;\n+                }\n+                finally {\n+                    if (input2 != null) {\n+                        input2.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n+                if (input1 != null) {\n+                    input1.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception2;\n+                t = exception2;\n+            }\n+            else {\n+                final Throwable exception2;\n+                if (t != exception2) {\n+                    t.addSuppressed(exception2);\n+                }\n+            }\n         }\n     }\n     \n     public static File[] convertFileCollectionToFileArray(final Collection<File> files) {\n         return files.toArray(FileUtils.EMPTY_FILE_ARRAY);\n     }\n     \n@@ -246,15 +367,17 @@\n         List<String> exclusionList = null;\n         final String srcDirCanonicalPath = srcDir.getCanonicalPath();\n         final String destDirCanonicalPath = destDir.getCanonicalPath();\n         if (destDirCanonicalPath.startsWith(srcDirCanonicalPath)) {\n             final File[] srcFiles = listFiles(srcDir, fileFilter);\n             if (srcFiles != null && srcFiles.length > 0) {\n                 exclusionList = new ArrayList<String>(srcFiles.length);\n-                for (final File srcFile : srcFiles) {\n+                File[] array;\n+                for (int length = (array = srcFiles).length, i = 0; i < length; ++i) {\n+                    final File srcFile = array[i];\n                     final File copiedFile = new File(destDir, srcFile.getName());\n                     exclusionList.add(copiedFile.getCanonicalPath());\n                 }\n             }\n         }\n         doCopyDirectory(srcDir, destDir, fileFilter, exclusionList, preserveFileDate, preserveFileDate ? addCopyAttributes(copyOptions) : copyOptions);\n     }\n@@ -287,32 +410,74 @@\n             requireCanWrite(destFile, \"destFile\");\n         }\n         Files.copy(srcFile.toPath(), destFile.toPath(), copyOptions);\n         requireEqualSizes(srcFile, destFile, srcFile.length(), destFile.length());\n     }\n     \n     public static long copyFile(final File input, final OutputStream output) throws IOException {\n-        try (final FileInputStream fis = new FileInputStream(input)) {\n-            return IOUtils.copyLarge((InputStream)fis, output);\n+        Throwable t = null;\n+        try {\n+            final FileInputStream fis = new FileInputStream(input);\n+            try {\n+                return IOUtils.copyLarge((InputStream)fis, output);\n+            }\n+            finally {\n+                if (fis != null) {\n+                    fis.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static void copyFileToDirectory(final File srcFile, final File destDir) throws IOException {\n         copyFileToDirectory(srcFile, destDir, true);\n     }\n     \n     public static void copyFileToDirectory(final File sourceFile, final File destinationDir, final boolean preserveFileDate) throws IOException {\n         Objects.requireNonNull(sourceFile, \"sourceFile\");\n         requireDirectoryIfExists(destinationDir, \"destinationDir\");\n         copyFile(sourceFile, new File(destinationDir, sourceFile.getName()), preserveFileDate);\n     }\n     \n     public static void copyInputStreamToFile(final InputStream source, final File destination) throws IOException {\n-        try (final InputStream inputStream = source) {\n-            copyToFile(inputStream, destination);\n+        Throwable t = null;\n+        try {\n+            final InputStream inputStream = source;\n+            try {\n+                copyToFile(inputStream, destination);\n+            }\n+            finally {\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static void copyToDirectory(final File sourceFile, final File destinationDir) throws IOException {\n         Objects.requireNonNull(sourceFile, \"sourceFile\");\n         if (sourceFile.isFile()) {\n             copyFileToDirectory(sourceFile, destinationDir);\n@@ -329,31 +494,94 @@\n         Objects.requireNonNull(sourceIterable, \"sourceIterable\");\n         for (final File src : sourceIterable) {\n             copyFileToDirectory(src, destinationDir);\n         }\n     }\n     \n     public static void copyToFile(final InputStream inputStream, final File file) throws IOException {\n-        try (final OutputStream out = openOutputStream(file)) {\n-            IOUtils.copy(inputStream, out);\n+        Throwable t = null;\n+        try {\n+            final OutputStream out = openOutputStream(file);\n+            try {\n+                IOUtils.copy(inputStream, out);\n+            }\n+            finally {\n+                if (out != null) {\n+                    out.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static void copyURLToFile(final URL source, final File destination) throws IOException {\n-        try (final InputStream stream = source.openStream()) {\n-            copyInputStreamToFile(stream, destination);\n+        Throwable t = null;\n+        try {\n+            final InputStream stream = source.openStream();\n+            try {\n+                copyInputStreamToFile(stream, destination);\n+            }\n+            finally {\n+                if (stream != null) {\n+                    stream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static void copyURLToFile(final URL source, final File destination, final int connectionTimeoutMillis, final int readTimeoutMillis) throws IOException {\n         final URLConnection connection = source.openConnection();\n         connection.setConnectTimeout(connectionTimeoutMillis);\n         connection.setReadTimeout(readTimeoutMillis);\n-        try (final InputStream stream = connection.getInputStream()) {\n-            copyInputStreamToFile(stream, destination);\n+        Throwable t = null;\n+        try {\n+            final InputStream stream = connection.getInputStream();\n+            try {\n+                copyInputStreamToFile(stream, destination);\n+            }\n+            finally {\n+                if (stream != null) {\n+                    stream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static File createParentDirectories(final File file) throws IOException {\n         return mkdirs(getParentFile(file));\n     }\n     \n@@ -441,15 +669,17 @@\n     }\n     \n     private static void doCopyDirectory(final File srcDir, final File destDir, final FileFilter fileFilter, final List<String> exclusionList, final boolean preserveDirDate, final CopyOption... copyOptions) throws IOException {\n         final File[] srcFiles = listFiles(srcDir, fileFilter);\n         requireDirectoryIfExists(destDir, \"destDir\");\n         mkdirs(destDir);\n         requireCanWrite(destDir, \"destDir\");\n-        for (final File srcFile : srcFiles) {\n+        File[] array;\n+        for (int length = (array = srcFiles).length, i = 0; i < length; ++i) {\n+            final File srcFile = array[i];\n             final File dstFile = new File(destDir, srcFile.getName());\n             if (exclusionList == null || !exclusionList.contains(srcFile.getCanonicalPath())) {\n                 if (srcFile.isDirectory()) {\n                     doCopyDirectory(srcFile, dstFile, fileFilter, exclusionList, preserveDirDate, copyOptions);\n                 }\n                 else {\n                     copyFile(srcFile, dstFile, copyOptions);\n@@ -685,18 +915,15 @@\n     public static LineIterator lineIterator(final File file, final String charsetName) throws IOException {\n         InputStream inputStream = null;\n         try {\n             inputStream = openInputStream(file);\n             return IOUtils.lineIterator(inputStream, charsetName);\n         }\n         catch (final IOException | RuntimeException ex) {\n-            final InputStream inputStream2 = inputStream;\n-            final Exception obj = ex;\n-            Objects.requireNonNull((IOException | RuntimeException)obj);\n-            IOUtils.closeQuietly((Closeable)inputStream2, (Consumer)obj::addSuppressed);\n+            IOUtils.closeQuietly((Closeable)inputStream, (Consumer)ex::addSuppressed);\n             throw ex;\n         }\n     }\n     \n     private static AccumulatorPathVisitor listAccumulate(final File directory, final IOFileFilter fileFilter, final IOFileFilter dirFilter) throws IOException {\n         final boolean isDirFilterSet = dirFilter != null;\n         final FileEqualsFileFilter rootDirFilter = new FileEqualsFileFilter(directory);\n@@ -754,15 +981,15 @@\n     }\n     \n     public static void moveDirectory(final File srcDir, final File destDir) throws IOException {\n         validateMoveParameters(srcDir, destDir);\n         requireDirectory(srcDir, \"srcDir\");\n         requireAbsent(destDir, \"destDir\");\n         if (!srcDir.renameTo(destDir)) {\n-            if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath() + File.separator)) {\n+            if (destDir.getCanonicalPath().startsWith(String.valueOf(srcDir.getCanonicalPath()) + File.separator)) {\n                 throw new IOException(\"Cannot move directory: \" + srcDir + \" to a subdirectory of itself: \" + destDir);\n             }\n             copyDirectory(srcDir, destDir);\n             deleteDirectory(srcDir);\n             if (srcDir.exists()) {\n                 throw new IOException(\"Failed to delete original directory '\" + srcDir + \"' after copy to '\" + destDir + \"'\");\n             }\n@@ -839,43 +1066,106 @@\n         else {\n             createParentDirectories(file);\n         }\n         return new FileOutputStream(file, append);\n     }\n     \n     public static byte[] readFileToByteArray(final File file) throws IOException {\n-        try (final InputStream inputStream = openInputStream(file)) {\n-            final long fileLength = file.length();\n-            return (fileLength > 0L) ? IOUtils.toByteArray(inputStream, fileLength) : IOUtils.toByteArray(inputStream);\n+        Throwable t = null;\n+        try {\n+            final InputStream inputStream = openInputStream(file);\n+            try {\n+                final long fileLength = file.length();\n+                return (fileLength > 0L) ? IOUtils.toByteArray(inputStream, fileLength) : IOUtils.toByteArray(inputStream);\n+            }\n+            finally {\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     @Deprecated\n     public static String readFileToString(final File file) throws IOException {\n         return readFileToString(file, Charset.defaultCharset());\n     }\n     \n     public static String readFileToString(final File file, final Charset charsetName) throws IOException {\n-        try (final InputStream inputStream = openInputStream(file)) {\n-            return IOUtils.toString(inputStream, Charsets.toCharset(charsetName));\n+        Throwable t = null;\n+        try {\n+            final InputStream inputStream = openInputStream(file);\n+            try {\n+                return IOUtils.toString(inputStream, Charsets.toCharset(charsetName));\n+            }\n+            finally {\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static String readFileToString(final File file, final String charsetName) throws IOException {\n         return readFileToString(file, Charsets.toCharset(charsetName));\n     }\n     \n     @Deprecated\n     public static List<String> readLines(final File file) throws IOException {\n         return readLines(file, Charset.defaultCharset());\n     }\n     \n     public static List<String> readLines(final File file, final Charset charset) throws IOException {\n-        try (final InputStream inputStream = openInputStream(file)) {\n-            return IOUtils.readLines(inputStream, Charsets.toCharset(charset));\n+        Throwable t = null;\n+        try {\n+            final InputStream inputStream = openInputStream(file);\n+            try {\n+                return IOUtils.readLines(inputStream, Charsets.toCharset(charset));\n+            }\n+            finally {\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static List<String> readLines(final File file, final String charsetName) throws IOException {\n         return readLines(file, Charsets.toCharset(charsetName));\n     }\n     \n@@ -1003,15 +1293,17 @@\n     private static long sizeOfDirectory0(final File directory) {\n         Objects.requireNonNull(directory, \"directory\");\n         final File[] files = directory.listFiles();\n         if (files == null) {\n             return 0L;\n         }\n         long size = 0L;\n-        for (final File file : files) {\n+        File[] array;\n+        for (int length = (array = files).length, i = 0; i < length; ++i) {\n+            final File file = array[i];\n             if (!isSymlink(file)) {\n                 size += sizeOf0(file);\n                 if (size < 0L) {\n                     break;\n                 }\n             }\n         }\n@@ -1025,15 +1317,17 @@\n     private static BigInteger sizeOfDirectoryBig0(final File directory) {\n         Objects.requireNonNull(directory, \"directory\");\n         final File[] files = directory.listFiles();\n         if (files == null) {\n             return BigInteger.ZERO;\n         }\n         BigInteger size = BigInteger.ZERO;\n-        for (final File file : files) {\n+        File[] array;\n+        for (int length = (array = files).length, i = 0; i < length; ++i) {\n+            final File file = array[i];\n             if (!isSymlink(file)) {\n                 size = size.add(sizeOfBig0(file));\n             }\n         }\n         return size;\n     }\n     \n@@ -1131,14 +1425,17 @@\n             }\n         }\n         finally {\n             if (wasInterrupted) {\n                 Thread.currentThread().interrupt();\n             }\n         }\n+        if (wasInterrupted) {\n+            Thread.currentThread().interrupt();\n+        }\n         return true;\n     }\n     \n     @Deprecated\n     public static void write(final File file, final CharSequence data) throws IOException {\n         write(file, data, Charset.defaultCharset(), false);\n     }\n@@ -1173,16 +1470,37 @@\n     }\n     \n     public static void writeByteArrayToFile(final File file, final byte[] data, final int off, final int len) throws IOException {\n         writeByteArrayToFile(file, data, off, len, false);\n     }\n     \n     public static void writeByteArrayToFile(final File file, final byte[] data, final int off, final int len, final boolean append) throws IOException {\n-        try (final OutputStream out = openOutputStream(file, append)) {\n-            out.write(data, off, len);\n+        Throwable t = null;\n+        try {\n+            final OutputStream out = openOutputStream(file, append);\n+            try {\n+                out.write(data, off, len);\n+            }\n+            finally {\n+                if (out != null) {\n+                    out.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static void writeLines(final File file, final Collection<?> lines) throws IOException {\n         writeLines(file, null, lines, null, false);\n     }\n     \n@@ -1207,16 +1525,37 @@\n     }\n     \n     public static void writeLines(final File file, final String charsetName, final Collection<?> lines, final String lineEnding) throws IOException {\n         writeLines(file, charsetName, lines, lineEnding, false);\n     }\n     \n     public static void writeLines(final File file, final String charsetName, final Collection<?> lines, final String lineEnding, final boolean append) throws IOException {\n-        try (final OutputStream out = new BufferedOutputStream(openOutputStream(file, append))) {\n-            IOUtils.writeLines((Collection)lines, lineEnding, out, charsetName);\n+        Throwable t = null;\n+        try {\n+            final OutputStream out = new BufferedOutputStream(openOutputStream(file, append));\n+            try {\n+                IOUtils.writeLines((Collection)lines, lineEnding, out, charsetName);\n+            }\n+            finally {\n+                if (out != null) {\n+                    out.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     @Deprecated\n     public static void writeStringToFile(final File file, final String data) throws IOException {\n         writeStringToFile(file, data, Charset.defaultCharset(), false);\n     }\n@@ -1227,36 +1566,45 @@\n     }\n     \n     public static void writeStringToFile(final File file, final String data, final Charset charset) throws IOException {\n         writeStringToFile(file, data, charset, false);\n     }\n     \n     public static void writeStringToFile(final File file, final String data, final Charset charset, final boolean append) throws IOException {\n-        try (final OutputStream out = openOutputStream(file, append)) {\n-            IOUtils.write(data, out, charset);\n+        Throwable t = null;\n+        try {\n+            final OutputStream out = openOutputStream(file, append);\n+            try {\n+                IOUtils.write(data, out, charset);\n+            }\n+            finally {\n+                if (out != null) {\n+                    out.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static void writeStringToFile(final File file, final String data, final String charsetName) throws IOException {\n         writeStringToFile(file, data, charsetName, false);\n     }\n     \n     public static void writeStringToFile(final File file, final String data, final String charsetName, final boolean append) throws IOException {\n         writeStringToFile(file, data, Charsets.toCharset(charsetName), append);\n     }\n     \n     @Deprecated\n     public FileUtils() {\n     }\n-    \n-    static {\n-        ONE_KB_BI = BigInteger.valueOf(1024L);\n-        ONE_MB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_KB_BI);\n-        ONE_GB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_MB_BI);\n-        ONE_TB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_GB_BI);\n-        ONE_PB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_TB_BI);\n-        ONE_EB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_PB_BI);\n-        ONE_ZB = BigInteger.valueOf(1024L).multiply(BigInteger.valueOf(1152921504606846976L));\n-        ONE_YB = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_ZB);\n-        EMPTY_FILE_ARRAY = new File[0];\n-    }\n }\n"}]}
