{"diffoscope-json-version": 1, "source1": "first/SkipShieldingInputStreamTest.class", "source2": "second/SkipShieldingInputStreamTest.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,67 +6,26 @@\n import org.junit.Assert;\n import java.io.InputStream;\n \n public class SkipShieldingInputStreamTest\n {\n     @Test\n     public void skipDelegatesToRead() throws IOException {\n-        final InputStream i = (InputStream)new SkipShieldingInputStream((InputStream)new SkipShieldingInputStreamTest.SkipShieldingInputStreamTest$1(this));\n-        Throwable x0 = null;\n-        try {\n+        try (final InputStream i = (InputStream)new SkipShieldingInputStream((InputStream)new SkipShieldingInputStreamTest.SkipShieldingInputStreamTest$1(this))) {\n             Assert.assertEquals(100L, i.skip(100L));\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, i);\n-        }\n     }\n     \n     @Test\n     public void skipHasAnUpperBoundOnRead() throws IOException {\n-        final InputStream i = (InputStream)new SkipShieldingInputStream((InputStream)new SkipShieldingInputStreamTest.SkipShieldingInputStreamTest$2(this));\n-        Throwable x0 = null;\n-        try {\n+        try (final InputStream i = (InputStream)new SkipShieldingInputStream((InputStream)new SkipShieldingInputStreamTest.SkipShieldingInputStreamTest$2(this))) {\n             Assert.assertTrue(2147483647L > i.skip(Long.MAX_VALUE));\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, i);\n-        }\n     }\n     \n     @Test\n     public void skipSwallowsNegativeArguments() throws IOException {\n-        final InputStream i = (InputStream)new SkipShieldingInputStream((InputStream)new SkipShieldingInputStreamTest.SkipShieldingInputStreamTest$3(this));\n-        Throwable x0 = null;\n-        try {\n+        try (final InputStream i = (InputStream)new SkipShieldingInputStream((InputStream)new SkipShieldingInputStreamTest.SkipShieldingInputStreamTest$3(this))) {\n             Assert.assertEquals(0L, i.skip(Long.MIN_VALUE));\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, i);\n-        }\n-    }\n-    \n-    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n-        if (x0 != null) {\n-            try {\n-                x1.close();\n-            }\n-            catch (final Throwable exception) {\n-                x0.addSuppressed(exception);\n-            }\n-        }\n-        else {\n-            x1.close();\n-        }\n     }\n }\n"}]}
