{"diffoscope-json-version": 1, "source1": "first/ProxyWriter.class", "source2": "second/ProxyWriter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,57 +5,57 @@\n import org.apache.commons.io.IOUtils;\n import java.io.IOException;\n import java.io.Writer;\n import java.io.FilterWriter;\n \n public class ProxyWriter extends FilterWriter\n {\n-    public ProxyWriter(final Writer proxy) {\n-        super(proxy);\n+    public ProxyWriter(final Writer out) {\n+        super(out);\n     }\n     \n     protected void afterWrite(final int n) throws IOException {\n     }\n     \n     @Override\n     public Writer append(final char c) throws IOException {\n         try {\n             this.beforeWrite(1);\n             this.out.append(c);\n             this.afterWrite(1);\n         }\n-        catch (final IOException e) {\n-            this.handleIOException(e);\n+        catch (final IOException ex) {\n+            this.handleIOException(ex);\n         }\n         return this;\n     }\n     \n     @Override\n     public Writer append(final CharSequence csq) throws IOException {\n         try {\n-            final int len = IOUtils.length(csq);\n-            this.beforeWrite(len);\n+            final int length = IOUtils.length(csq);\n+            this.beforeWrite(length);\n             this.out.append(csq);\n-            this.afterWrite(len);\n+            this.afterWrite(length);\n         }\n-        catch (final IOException e) {\n-            this.handleIOException(e);\n+        catch (final IOException ex) {\n+            this.handleIOException(ex);\n         }\n         return this;\n     }\n     \n     @Override\n     public Writer append(final CharSequence csq, final int start, final int end) throws IOException {\n         try {\n             this.beforeWrite(end - start);\n             this.out.append(csq, start, end);\n             this.afterWrite(end - start);\n         }\n-        catch (final IOException e) {\n-            this.handleIOException(e);\n+        catch (final IOException ex) {\n+            this.handleIOException(ex);\n         }\n         return this;\n     }\n     \n     protected void beforeWrite(final int n) throws IOException {\n     }\n     \n@@ -65,78 +65,78 @@\n     }\n     \n     @Override\n     public void flush() throws IOException {\n         try {\n             this.out.flush();\n         }\n-        catch (final IOException e) {\n-            this.handleIOException(e);\n+        catch (final IOException ex) {\n+            this.handleIOException(ex);\n         }\n     }\n     \n-    protected void handleIOException(final IOException e) throws IOException {\n-        throw e;\n+    protected void handleIOException(final IOException ex) throws IOException {\n+        throw ex;\n     }\n     \n     @Override\n     public void write(final char[] cbuf) throws IOException {\n         try {\n-            final int len = IOUtils.length(cbuf);\n-            this.beforeWrite(len);\n+            final int length = IOUtils.length(cbuf);\n+            this.beforeWrite(length);\n             this.out.write(cbuf);\n-            this.afterWrite(len);\n+            this.afterWrite(length);\n         }\n-        catch (final IOException e) {\n-            this.handleIOException(e);\n+        catch (final IOException ex) {\n+            this.handleIOException(ex);\n         }\n     }\n     \n     @Override\n-    public void write(final char[] cbuf, final int off, final int len) throws IOException {\n+    public void write(final char[] array, final int n, final int n2) throws IOException {\n         try {\n-            this.beforeWrite(len);\n-            this.out.write(cbuf, off, len);\n-            this.afterWrite(len);\n+            this.beforeWrite(n2);\n+            this.out.write(array, n, n2);\n+            this.afterWrite(n2);\n         }\n-        catch (final IOException e) {\n-            this.handleIOException(e);\n+        catch (final IOException ex) {\n+            this.handleIOException(ex);\n         }\n     }\n     \n     @Override\n     public void write(final int c) throws IOException {\n         try {\n             this.beforeWrite(1);\n             this.out.write(c);\n             this.afterWrite(1);\n         }\n-        catch (final IOException e) {\n-            this.handleIOException(e);\n+        catch (final IOException ex) {\n+            this.handleIOException(ex);\n         }\n     }\n     \n     @Override\n     public void write(final String str) throws IOException {\n         try {\n-            final int len = IOUtils.length((CharSequence)str);\n-            this.beforeWrite(len);\n+            final int length = IOUtils.length((CharSequence)str);\n+            this.beforeWrite(length);\n             this.out.write(str);\n-            this.afterWrite(len);\n+            this.afterWrite(length);\n         }\n-        catch (final IOException e) {\n-            this.handleIOException(e);\n+        catch (final IOException ex) {\n+            this.handleIOException(ex);\n         }\n     }\n     \n     @Override\n     public void write(final String str, final int off, final int len) throws IOException {\n         try {\n             this.beforeWrite(len);\n             this.out.write(str, off, len);\n             this.afterWrite(len);\n         }\n-        catch (final IOException e) {\n-            this.handleIOException(e);\n+        catch (final IOException ex) {\n+            this.handleIOException(ex);\n         }\n     }\n }\n"}]}
