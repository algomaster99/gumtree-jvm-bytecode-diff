{"diffoscope-json-version": 1, "source1": "first/ChunkedWriter.class", "source2": "second/ChunkedWriter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,28 +6,28 @@\n import java.io.FilterWriter;\n \n public class ChunkedWriter extends FilterWriter\n {\n     private static final int DEFAULT_CHUNK_SIZE = 4096;\n     private final int chunkSize;\n     \n-    public ChunkedWriter(final Writer writer, final int chunkSize) {\n-        super(writer);\n+    public ChunkedWriter(final Writer out, final int chunkSize) {\n+        super(out);\n         if (chunkSize <= 0) {\n             throw new IllegalArgumentException();\n         }\n         this.chunkSize = chunkSize;\n     }\n     \n     public ChunkedWriter(final Writer writer) {\n         this(writer, 4096);\n     }\n     \n     @Override\n-    public void write(final char[] data, final int srcOffset, final int length) throws IOException {\n-        int chunk;\n-        for (int bytes = length, dstOffset = srcOffset; bytes > 0; bytes -= chunk, dstOffset += chunk) {\n-            chunk = Math.min(bytes, this.chunkSize);\n-            this.out.write(data, dstOffset, chunk);\n+    public void write(final char[] array, final int n, final int n2) throws IOException {\n+        int min;\n+        for (int i = n2, n3 = n; i > 0; i -= min, n3 += min) {\n+            min = Math.min(i, this.chunkSize);\n+            this.out.write(array, n3, min);\n         }\n     }\n }\n"}]}
