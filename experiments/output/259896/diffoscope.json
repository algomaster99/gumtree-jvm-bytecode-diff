{"diffoscope-json-version": 1, "source1": "first/UncheckedIOSpliterator.class", "source2": "second/UncheckedIOSpliterator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,59 +6,59 @@\n import java.util.Objects;\n import java.util.Spliterator;\n \n final class UncheckedIOSpliterator<T> implements Spliterator<T>\n {\n     private final IOSpliterator<T> delegate;\n     \n-    UncheckedIOSpliterator(final IOSpliterator<T> delegate) {\n-        this.delegate = Objects.requireNonNull(delegate, \"delegate\");\n+    UncheckedIOSpliterator(final IOSpliterator<T> obj) {\n+        this.delegate = Objects.requireNonNull(obj, \"delegate\");\n     }\n     \n     @Override\n     public int characteristics() {\n         return this.delegate.characteristics();\n     }\n     \n     @Override\n     public long estimateSize() {\n         return this.delegate.estimateSize();\n     }\n     \n     @Override\n-    public void forEachRemaining(final Consumer<? super T> action) {\n+    public void forEachRemaining(final Consumer<? super T> obj) {\n         final org.apache.commons.io.function.IOSpliterator<T> delegate = this.delegate;\n         Objects.requireNonNull(delegate);\n         final IOConsumer ioConsumer = delegate::forEachRemaining;\n-        Objects.requireNonNull(action);\n-        Uncheck.accept(ioConsumer, (Object)action::accept);\n+        Objects.requireNonNull(obj);\n+        Uncheck.accept(ioConsumer, (Object)obj::accept);\n     }\n     \n     @Override\n     public Comparator<? super T> getComparator() {\n         return this.delegate.getComparator().asComparator();\n     }\n     \n     @Override\n     public long getExactSizeIfKnown() {\n         return this.delegate.getExactSizeIfKnown();\n     }\n     \n     @Override\n-    public boolean hasCharacteristics(final int characteristics) {\n-        return this.delegate.hasCharacteristics(characteristics);\n+    public boolean hasCharacteristics(final int n) {\n+        return this.delegate.hasCharacteristics(n);\n     }\n     \n     @Override\n-    public boolean tryAdvance(final Consumer<? super T> action) {\n+    public boolean tryAdvance(final Consumer<? super T> obj) {\n         final org.apache.commons.io.function.IOSpliterator<T> delegate = this.delegate;\n         Objects.requireNonNull(delegate);\n         final IOFunction ioFunction = delegate::tryAdvance;\n-        Objects.requireNonNull(action);\n-        return (boolean)Uncheck.apply(ioFunction, (Object)action::accept);\n+        Objects.requireNonNull(obj);\n+        return (boolean)Uncheck.apply(ioFunction, (Object)obj::accept);\n     }\n     \n     @Override\n     public Spliterator<T> trySplit() {\n         final org.apache.commons.io.function.IOSpliterator<T> delegate = this.delegate;\n         Objects.requireNonNull(delegate);\n         return ((IOSpliterator)Uncheck.get(delegate::trySplit)).unwrap();\n"}]}
