{"diffoscope-json-version": 1, "source1": "first/EventCountCircuitBreaker.class", "source2": "second/EventCountCircuitBreaker.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,14 +11,18 @@\n     private static final Map<AbstractCircuitBreaker.State, EventCountCircuitBreaker.StateStrategy> STRATEGY_MAP;\n     private final AtomicReference<EventCountCircuitBreaker.CheckIntervalData> checkIntervalData;\n     private final int openingThreshold;\n     private final long openingInterval;\n     private final int closingThreshold;\n     private final long closingInterval;\n     \n+    static {\n+        STRATEGY_MAP = createStrategyMap();\n+    }\n+    \n     public EventCountCircuitBreaker(final int openingThreshold, final long openingInterval, final TimeUnit openingUnit, final int closingThreshold, final long closingInterval, final TimeUnit closingUnit) {\n         this.checkIntervalData = new AtomicReference<EventCountCircuitBreaker.CheckIntervalData>(new EventCountCircuitBreaker.CheckIntervalData(0, 0L));\n         this.openingThreshold = openingThreshold;\n         this.openingInterval = openingUnit.toNanos(openingInterval);\n         this.closingThreshold = closingThreshold;\n         this.closingInterval = closingUnit.toNanos(closingInterval);\n     }\n@@ -112,16 +116,12 @@\n     \n     private static EventCountCircuitBreaker.StateStrategy stateStrategy(final AbstractCircuitBreaker.State state) {\n         return EventCountCircuitBreaker.STRATEGY_MAP.get(state);\n     }\n     \n     private static Map<AbstractCircuitBreaker.State, EventCountCircuitBreaker.StateStrategy> createStrategyMap() {\n         final Map<AbstractCircuitBreaker.State, EventCountCircuitBreaker.StateStrategy> map = new EnumMap<AbstractCircuitBreaker.State, EventCountCircuitBreaker.StateStrategy>(AbstractCircuitBreaker.State.class);\n-        map.put(AbstractCircuitBreaker.State.CLOSED, (EventCountCircuitBreaker.StateStrategy)new EventCountCircuitBreaker.StateStrategyClosed((EventCountCircuitBreaker.EventCountCircuitBreaker$1)null));\n-        map.put(AbstractCircuitBreaker.State.OPEN, (EventCountCircuitBreaker.StateStrategy)new EventCountCircuitBreaker.StateStrategyOpen((EventCountCircuitBreaker.EventCountCircuitBreaker$1)null));\n+        map.put(AbstractCircuitBreaker.State.CLOSED, (EventCountCircuitBreaker.StateStrategy)new EventCountCircuitBreaker.StateStrategyClosed((EventCountCircuitBreaker.StateStrategyClosed)null));\n+        map.put(AbstractCircuitBreaker.State.OPEN, (EventCountCircuitBreaker.StateStrategy)new EventCountCircuitBreaker.StateStrategyOpen((EventCountCircuitBreaker.StateStrategyOpen)null));\n         return map;\n     }\n-    \n-    static {\n-        STRATEGY_MAP = createStrategyMap();\n-    }\n }\n"}]}
