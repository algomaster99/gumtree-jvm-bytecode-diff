{"diffoscope-json-version": 1, "source1": "first/SubnetUtils$SubnetInfo.class", "source2": "second/SubnetUtils$SubnetInfo.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,67 +5,65 @@\n {\n     private static final long UNSIGNED_INT_MASK = 4294967295L;\n     \n     private SubnetInfo(final SubnetUtils this$0) {\n         this.this$0 = this$0;\n     }\n     \n-    public int asInteger(final String address) {\n-        return SubnetUtils.access$000(address);\n+    public int asInteger(final String s) {\n+        return SubnetUtils.access$000(s);\n     }\n     \n     private long broadcastLong() {\n         return (long)SubnetUtils.access$100(this.this$0) & 0xFFFFFFFFL;\n     }\n     \n-    private String format(final int[] octets) {\n-        final int last = octets.length - 1;\n-        final StringBuilder builder = new StringBuilder();\n-        int i = 0;\n+    private String format(final int[] array) {\n+        final int n = array.length - 1;\n+        final StringBuilder sb = new StringBuilder();\n+        int n2 = 0;\n         while (true) {\n-            builder.append(octets[i]);\n-            if (i == last) {\n+            sb.append(array[n2]);\n+            if (n2 == n) {\n                 break;\n             }\n-            builder.append('.');\n-            ++i;\n+            sb.append('.');\n+            ++n2;\n         }\n-        return builder.toString();\n+        return sb.toString();\n     }\n     \n     public String getAddress() {\n         return this.format(this.toArray(SubnetUtils.access$200(this.this$0)));\n     }\n     \n     @Deprecated\n     public int getAddressCount() {\n-        final long countLong = this.getAddressCountLong();\n-        if (countLong > 2147483647L) {\n-            throw new RuntimeException(\"Count is larger than an integer: \" + countLong);\n+        final long addressCountLong = this.getAddressCountLong();\n+        if (addressCountLong > 2147483647L) {\n+            throw new RuntimeException(\"Count is larger than an integer: \" + addressCountLong);\n         }\n-        return (int)countLong;\n+        return (int)addressCountLong;\n     }\n     \n     public long getAddressCountLong() {\n-        final long b = this.broadcastLong();\n-        final long n = this.networkLong();\n-        final long count = b - n + (this.this$0.isInclusiveHostCount() ? 1 : -1);\n-        return (count < 0L) ? 0L : count;\n+        final long n = this.broadcastLong() - this.networkLong() + (this.this$0.isInclusiveHostCount() ? 1 : -1);\n+        return (n < 0L) ? 0L : n;\n     }\n     \n     public String[] getAllAddresses() {\n-        final int ct = this.getAddressCount();\n-        final String[] addresses = new String[ct];\n-        if (ct == 0) {\n-            return addresses;\n+        final int addressCount = this.getAddressCount();\n+        final String[] array = new String[addressCount];\n+        if (addressCount == 0) {\n+            return array;\n         }\n-        for (int add = this.low(), j = 0; add <= this.high(); ++add, ++j) {\n-            addresses[j] = this.format(this.toArray(add));\n+        for (int i = this.low(), n = 0; i <= this.high(); ++i, ++n) {\n+            array[n] = this.format(this.toArray(i));\n         }\n-        return addresses;\n+        return array;\n     }\n     \n     public String getBroadcastAddress() {\n         return this.format(this.toArray(SubnetUtils.access$100(this.this$0)));\n     }\n     \n     public String getCidrSignature() {\n@@ -96,46 +94,46 @@\n         return this.format(this.toArray(SubnetUtils.access$200(this.this$0) - 1));\n     }\n     \n     private int high() {\n         return this.this$0.isInclusiveHostCount() ? SubnetUtils.access$100(this.this$0) : ((this.broadcastLong() - this.networkLong() > 1L) ? (SubnetUtils.access$100(this.this$0) - 1) : 0);\n     }\n     \n-    public boolean isInRange(final int address) {\n-        if (address == 0) {\n+    public boolean isInRange(final int n) {\n+        if (n == 0) {\n             return false;\n         }\n-        final long addLong = (long)address & 0xFFFFFFFFL;\n-        final long lowLong = (long)this.low() & 0xFFFFFFFFL;\n-        final long highLong = (long)this.high() & 0xFFFFFFFFL;\n-        return addLong >= lowLong && addLong <= highLong;\n+        final long n2 = (long)n & 0xFFFFFFFFL;\n+        final long n3 = (long)this.low() & 0xFFFFFFFFL;\n+        final long n4 = (long)this.high() & 0xFFFFFFFFL;\n+        return n2 >= n3 && n2 <= n4;\n     }\n     \n-    public boolean isInRange(final String address) {\n-        return this.isInRange(SubnetUtils.access$000(address));\n+    public boolean isInRange(final String s) {\n+        return this.isInRange(SubnetUtils.access$000(s));\n     }\n     \n     private int low() {\n         return this.this$0.isInclusiveHostCount() ? SubnetUtils.access$400(this.this$0) : ((this.broadcastLong() - this.networkLong() > 1L) ? (SubnetUtils.access$400(this.this$0) + 1) : 0);\n     }\n     \n     private long networkLong() {\n         return (long)SubnetUtils.access$400(this.this$0) & 0xFFFFFFFFL;\n     }\n     \n-    private int[] toArray(final int val) {\n-        final int[] ret = new int[4];\n-        for (int j = 3; j >= 0; --j) {\n-            final int[] array = ret;\n-            final int n = j;\n-            array[n] |= (val >>> 8 * (3 - j) & 0xFF);\n+    private int[] toArray(final int n) {\n+        final int[] array = new int[4];\n+        for (int i = 3; i >= 0; --i) {\n+            final int[] array2 = array;\n+            final int n2 = i;\n+            array2[n2] |= (n >>> 8 * (3 - i) & 0xFF);\n         }\n-        return ret;\n+        return array;\n     }\n     \n     @Override\n     public String toString() {\n-        final StringBuilder buf = new StringBuilder();\n-        buf.append(\"CIDR Signature:\\t[\").append(this.getCidrSignature()).append(\"]\\n\").append(\"  Netmask: [\").append(this.getNetmask()).append(\"]\\n\").append(\"  Network: [\").append(this.getNetworkAddress()).append(\"]\\n\").append(\"  Broadcast: [\").append(this.getBroadcastAddress()).append(\"]\\n\").append(\"  First address: [\").append(this.getLowAddress()).append(\"]\\n\").append(\"  Last address: [\").append(this.getHighAddress()).append(\"]\\n\").append(\"  Address Count: [\").append(this.getAddressCountLong()).append(\"]\\n\");\n-        return buf.toString();\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"CIDR Signature:\\t[\").append(this.getCidrSignature()).append(\"]\\n\").append(\"  Netmask: [\").append(this.getNetmask()).append(\"]\\n\").append(\"  Network: [\").append(this.getNetworkAddress()).append(\"]\\n\").append(\"  Broadcast: [\").append(this.getBroadcastAddress()).append(\"]\\n\").append(\"  First address: [\").append(this.getLowAddress()).append(\"]\\n\").append(\"  Last address: [\").append(this.getHighAddress()).append(\"]\\n\").append(\"  Address Count: [\").append(this.getAddressCountLong()).append(\"]\\n\");\n+        return sb.toString();\n     }\n }\n"}]}
