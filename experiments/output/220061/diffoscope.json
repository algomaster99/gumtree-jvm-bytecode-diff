{"diffoscope-json-version": 1, "source1": "first/MatchXpathCheck.class", "source2": "second/MatchXpathCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package com.puppycrawl.tools.checkstyle.checks.coding;\n \n-import net.sf.saxon.sxpath.XPathDynamicContext;\n import java.util.stream.Collector;\n import java.util.stream.Collectors;\n import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n import net.sf.saxon.om.Item;\n import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n import java.util.List;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n@@ -28,19 +27,18 @@\n         this.query = \"\";\n     }\n     \n     public void setQuery(final String query) {\n         this.query = query;\n         if (!query.isEmpty()) {\n             try {\n-                final XPathEvaluator xpathEvaluator = new XPathEvaluator(Configuration.newConfiguration());\n-                this.xpathExpression = xpathEvaluator.createExpression(query);\n+                this.xpathExpression = new XPathEvaluator(Configuration.newConfiguration()).createExpression(query);\n             }\n-            catch (final XPathException ex) {\n-                throw new IllegalStateException(\"Creating Xpath expression failed: \" + query, (Throwable)ex);\n+            catch (final XPathException cause) {\n+                throw new IllegalStateException(\"Creating Xpath expression failed: \" + query, (Throwable)cause);\n             }\n         }\n     }\n     \n     public int[] getDefaultTokens() {\n         return this.getRequiredTokens();\n     }\n@@ -53,26 +51,22 @@\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n     public boolean isCommentNodesRequired() {\n         return true;\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         if (this.xpathExpression != null) {\n-            final List<DetailAST> matchingNodes = this.findMatchingNodesByXpathQuery(rootAST);\n-            matchingNodes.forEach(node -> this.log(node, \"matchxpath.match\", new Object[0]));\n+            this.findMatchingNodesByXpathQuery(detailAST).forEach(detailAST2 -> this.log(detailAST2, \"matchxpath.match\", new Object[0]));\n         }\n     }\n     \n-    private List<DetailAST> findMatchingNodesByXpathQuery(final DetailAST rootAST) {\n+    private List<DetailAST> findMatchingNodesByXpathQuery(final DetailAST detailAST) {\n         try {\n-            final RootNode rootNode = new RootNode(rootAST);\n-            final XPathDynamicContext xpathDynamicContext = this.xpathExpression.createDynamicContext((Item)rootNode);\n-            final List<Item> matchingItems = this.xpathExpression.evaluate(xpathDynamicContext);\n-            return matchingItems.stream().map(item -> (Object)((AbstractNode)item).getUnderlyingNode()).collect((Collector<? super Object, ?, List<DetailAST>>)Collectors.toList());\n+            return (List)this.xpathExpression.evaluate(this.xpathExpression.createDynamicContext((Item)new RootNode(detailAST))).stream().map(item -> (Object)((AbstractNode)item).getUnderlyingNode()).collect(Collectors.toList());\n         }\n-        catch (final XPathException ex) {\n-            throw new IllegalStateException(\"Evaluation of Xpath query failed: \" + this.query, (Throwable)ex);\n+        catch (final XPathException cause) {\n+            throw new IllegalStateException(\"Evaluation of Xpath query failed: \" + this.query, (Throwable)cause);\n         }\n     }\n }\n"}]}
