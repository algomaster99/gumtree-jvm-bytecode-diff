{"diffoscope-json-version": 1, "source1": "first/X5455_ExtendedTimestamp.class", "source2": "second/X5455_ExtendedTimestamp.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,69 +29,68 @@\n     }\n     \n     public ZipShort getCentralDirectoryLength() {\n         return new ZipShort(1 + (this.bit0_modifyTimePresent ? 4 : 0));\n     }\n     \n     public byte[] getLocalFileDataData() {\n-        final byte[] data = new byte[this.getLocalFileDataLength().getValue()];\n-        int pos = 0;\n-        data[pos++] = 0;\n+        final byte[] array = new byte[this.getLocalFileDataLength().getValue()];\n+        int n = 0;\n+        array[n++] = 0;\n         if (this.bit0_modifyTimePresent) {\n-            final byte[] array = data;\n-            final int n = 0;\n-            array[n] |= 0x1;\n-            System.arraycopy(this.modifyTime.getBytes(), 0, data, pos, 4);\n-            pos += 4;\n+            final byte[] array2 = array;\n+            final int n2 = 0;\n+            array2[n2] |= 0x1;\n+            System.arraycopy(this.modifyTime.getBytes(), 0, array, n, 4);\n+            n += 4;\n         }\n         if (this.bit1_accessTimePresent && this.accessTime != null) {\n-            final byte[] array2 = data;\n-            final int n2 = 0;\n-            array2[n2] |= 0x2;\n-            System.arraycopy(this.accessTime.getBytes(), 0, data, pos, 4);\n-            pos += 4;\n+            final byte[] array3 = array;\n+            final int n3 = 0;\n+            array3[n3] |= 0x2;\n+            System.arraycopy(this.accessTime.getBytes(), 0, array, n, 4);\n+            n += 4;\n         }\n         if (this.bit2_createTimePresent && this.createTime != null) {\n-            final byte[] array3 = data;\n-            final int n3 = 0;\n-            array3[n3] |= 0x4;\n-            System.arraycopy(this.createTime.getBytes(), 0, data, pos, 4);\n-            pos += 4;\n+            final byte[] array4 = array;\n+            final int n4 = 0;\n+            array4[n4] |= 0x4;\n+            System.arraycopy(this.createTime.getBytes(), 0, array, n, 4);\n+            n += 4;\n         }\n-        return data;\n+        return array;\n     }\n     \n     public byte[] getCentralDirectoryData() {\n-        final byte[] centralData = new byte[this.getCentralDirectoryLength().getValue()];\n-        final byte[] localData = this.getLocalFileDataData();\n-        System.arraycopy(localData, 0, centralData, 0, centralData.length);\n-        return centralData;\n+        final byte[] array = new byte[this.getCentralDirectoryLength().getValue()];\n+        System.arraycopy(this.getLocalFileDataData(), 0, array, 0, array.length);\n+        return array;\n     }\n     \n-    public void parseFromLocalFileData(final byte[] data, int offset, final int length) throws ZipException {\n+    public void parseFromLocalFileData(final byte[] array, int n, final int n2) throws ZipException {\n         this.reset();\n-        final int len = offset + length;\n-        this.setFlags(data[offset++]);\n+        final int n3 = n + n2;\n+        this.setFlags(array[n++]);\n         if (this.bit0_modifyTimePresent) {\n-            this.modifyTime = new ZipLong(data, offset);\n-            offset += 4;\n+            this.modifyTime = new ZipLong(array, n);\n+            n += 4;\n         }\n-        if (this.bit1_accessTimePresent && offset + 4 <= len) {\n-            this.accessTime = new ZipLong(data, offset);\n-            offset += 4;\n+        if (this.bit1_accessTimePresent && n + 4 <= n3) {\n+            this.accessTime = new ZipLong(array, n);\n+            n += 4;\n         }\n-        if (this.bit2_createTimePresent && offset + 4 <= len) {\n-            this.createTime = new ZipLong(data, offset);\n-            offset += 4;\n+        if (this.bit2_createTimePresent && n + 4 <= n3) {\n+            this.createTime = new ZipLong(array, n);\n+            n += 4;\n         }\n     }\n     \n-    public void parseFromCentralDirectoryData(final byte[] buffer, final int offset, final int length) throws ZipException {\n+    public void parseFromCentralDirectoryData(final byte[] array, final int n, final int n2) throws ZipException {\n         this.reset();\n-        this.parseFromLocalFileData(buffer, offset, length);\n+        this.parseFromLocalFileData(array, n, n2);\n     }\n     \n     private void reset() {\n         this.setFlags((byte)0);\n         this.modifyTime = null;\n         this.accessTime = null;\n         this.createTime = null;\n@@ -140,107 +139,104 @@\n         return zipLongToDate(this.accessTime);\n     }\n     \n     public Date getCreateJavaTime() {\n         return zipLongToDate(this.createTime);\n     }\n     \n-    public void setModifyTime(final ZipLong l) {\n-        this.bit0_modifyTimePresent = (l != null);\n-        this.flags = (byte)((l != null) ? (this.flags | 0x1) : (this.flags & 0xFFFFFFFE));\n-        this.modifyTime = l;\n+    public void setModifyTime(final ZipLong modifyTime) {\n+        this.bit0_modifyTimePresent = (modifyTime != null);\n+        this.flags = (byte)((modifyTime != null) ? (this.flags | 0x1) : (this.flags & 0xFFFFFFFE));\n+        this.modifyTime = modifyTime;\n     }\n     \n-    public void setAccessTime(final ZipLong l) {\n-        this.bit1_accessTimePresent = (l != null);\n-        this.flags = (byte)((l != null) ? (this.flags | 0x2) : (this.flags & 0xFFFFFFFD));\n-        this.accessTime = l;\n+    public void setAccessTime(final ZipLong accessTime) {\n+        this.bit1_accessTimePresent = (accessTime != null);\n+        this.flags = (byte)((accessTime != null) ? (this.flags | 0x2) : (this.flags & 0xFFFFFFFD));\n+        this.accessTime = accessTime;\n     }\n     \n-    public void setCreateTime(final ZipLong l) {\n-        this.bit2_createTimePresent = (l != null);\n-        this.flags = (byte)((l != null) ? (this.flags | 0x4) : (this.flags & 0xFFFFFFFB));\n-        this.createTime = l;\n+    public void setCreateTime(final ZipLong createTime) {\n+        this.bit2_createTimePresent = (createTime != null);\n+        this.flags = (byte)((createTime != null) ? (this.flags | 0x4) : (this.flags & 0xFFFFFFFB));\n+        this.createTime = createTime;\n     }\n     \n-    public void setModifyJavaTime(final Date d) {\n-        this.setModifyTime(dateToZipLong(d));\n+    public void setModifyJavaTime(final Date date) {\n+        this.setModifyTime(dateToZipLong(date));\n     }\n     \n-    public void setAccessJavaTime(final Date d) {\n-        this.setAccessTime(dateToZipLong(d));\n+    public void setAccessJavaTime(final Date date) {\n+        this.setAccessTime(dateToZipLong(date));\n     }\n     \n-    public void setCreateJavaTime(final Date d) {\n-        this.setCreateTime(dateToZipLong(d));\n+    public void setCreateJavaTime(final Date date) {\n+        this.setCreateTime(dateToZipLong(date));\n     }\n     \n-    private static ZipLong dateToZipLong(final Date d) {\n-        if (d == null) {\n+    private static ZipLong dateToZipLong(final Date date) {\n+        if (date == null) {\n             return null;\n         }\n-        return unixTimeToZipLong(d.getTime() / 1000L);\n+        return unixTimeToZipLong(date.getTime() / 1000L);\n     }\n     \n     @Override\n     public String toString() {\n-        final StringBuilder buf = new StringBuilder();\n-        buf.append(\"0x5455 Zip Extra Field: Flags=\");\n-        buf.append(Integer.toBinaryString((int)ZipUtil.unsignedIntToSignedByte((int)this.flags))).append(\" \");\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"0x5455 Zip Extra Field: Flags=\");\n+        sb.append(Integer.toBinaryString((int)ZipUtil.unsignedIntToSignedByte((int)this.flags))).append(\" \");\n         if (this.bit0_modifyTimePresent && this.modifyTime != null) {\n-            final Date m = this.getModifyJavaTime();\n-            buf.append(\" Modify:[\").append(m).append(\"] \");\n+            sb.append(\" Modify:[\").append(this.getModifyJavaTime()).append(\"] \");\n         }\n         if (this.bit1_accessTimePresent && this.accessTime != null) {\n-            final Date a = this.getAccessJavaTime();\n-            buf.append(\" Access:[\").append(a).append(\"] \");\n+            sb.append(\" Access:[\").append(this.getAccessJavaTime()).append(\"] \");\n         }\n         if (this.bit2_createTimePresent && this.createTime != null) {\n-            final Date c = this.getCreateJavaTime();\n-            buf.append(\" Create:[\").append(c).append(\"] \");\n+            sb.append(\" Create:[\").append(this.getCreateJavaTime()).append(\"] \");\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n     public Object clone() throws CloneNotSupportedException {\n         return super.clone();\n     }\n     \n     @Override\n     public boolean equals(final Object o) {\n         if (o instanceof X5455_ExtendedTimestamp) {\n-            final X5455_ExtendedTimestamp xf = (X5455_ExtendedTimestamp)o;\n-            return (this.flags & 0x7) == (xf.flags & 0x7) && (this.modifyTime == xf.modifyTime || (this.modifyTime != null && this.modifyTime.equals((Object)xf.modifyTime))) && (this.accessTime == xf.accessTime || (this.accessTime != null && this.accessTime.equals((Object)xf.accessTime))) && (this.createTime == xf.createTime || (this.createTime != null && this.createTime.equals((Object)xf.createTime)));\n+            final X5455_ExtendedTimestamp x5455_ExtendedTimestamp = (X5455_ExtendedTimestamp)o;\n+            return (this.flags & 0x7) == (x5455_ExtendedTimestamp.flags & 0x7) && (this.modifyTime == x5455_ExtendedTimestamp.modifyTime || (this.modifyTime != null && this.modifyTime.equals((Object)x5455_ExtendedTimestamp.modifyTime))) && (this.accessTime == x5455_ExtendedTimestamp.accessTime || (this.accessTime != null && this.accessTime.equals((Object)x5455_ExtendedTimestamp.accessTime))) && (this.createTime == x5455_ExtendedTimestamp.createTime || (this.createTime != null && this.createTime.equals((Object)x5455_ExtendedTimestamp.createTime)));\n         }\n         return false;\n     }\n     \n     @Override\n     public int hashCode() {\n-        int hc = -123 * (this.flags & 0x7);\n+        int n = -123 * (this.flags & 0x7);\n         if (this.modifyTime != null) {\n-            hc ^= this.modifyTime.hashCode();\n+            n ^= this.modifyTime.hashCode();\n         }\n         if (this.accessTime != null) {\n-            hc ^= Integer.rotateLeft(this.accessTime.hashCode(), 11);\n+            n ^= Integer.rotateLeft(this.accessTime.hashCode(), 11);\n         }\n         if (this.createTime != null) {\n-            hc ^= Integer.rotateLeft(this.createTime.hashCode(), 22);\n+            n ^= Integer.rotateLeft(this.createTime.hashCode(), 22);\n         }\n-        return hc;\n+        return n;\n     }\n     \n-    private static Date zipLongToDate(final ZipLong unixTime) {\n-        return (unixTime != null) ? new Date(unixTime.getIntValue() * 1000L) : null;\n+    private static Date zipLongToDate(final ZipLong zipLong) {\n+        return (zipLong != null) ? new Date(zipLong.getIntValue() * 1000L) : null;\n     }\n     \n-    private static ZipLong unixTimeToZipLong(final long l) {\n-        if (l < -2147483648L || l > 2147483647L) {\n-            throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l);\n+    private static ZipLong unixTimeToZipLong(final long lng) {\n+        if (lng < -2147483648L || lng > 2147483647L) {\n+            throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + lng);\n         }\n-        return new ZipLong(l);\n+        return new ZipLong(lng);\n     }\n     \n     static {\n         HEADER_ID = new ZipShort(21589);\n     }\n }\n"}]}
