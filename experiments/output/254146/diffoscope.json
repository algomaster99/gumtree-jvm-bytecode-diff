{"diffoscope-json-version": 1, "source1": "first/CodePointUtil.class", "source2": "second/CodePointUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,26 +4,26 @@\n import java.util.Arrays;\n \n public final class CodePointUtil\n {\n     private CodePointUtil() {\n     }\n     \n-    public static boolean isBlank(final int... codePoints) {\n-        return hasWhitespaceBefore(codePoints.length, codePoints);\n+    public static boolean isBlank(final int... array) {\n+        return hasWhitespaceBefore(array.length, array);\n     }\n     \n-    public static boolean hasWhitespaceBefore(final int index, final int... codePoints) {\n-        return Arrays.stream(codePoints, 0, index).allMatch(Character::isWhitespace);\n+    public static boolean hasWhitespaceBefore(final int endExclusive, final int... array) {\n+        return Arrays.stream(array, 0, endExclusive).allMatch(Character::isWhitespace);\n     }\n     \n-    public static int[] stripTrailing(final int... codePoints) {\n-        int lastIndex;\n-        for (lastIndex = codePoints.length; CommonUtil.isCodePointWhitespace(codePoints, lastIndex - 1); --lastIndex) {}\n-        return Arrays.copyOfRange(codePoints, 0, lastIndex);\n+    public static int[] stripTrailing(final int... original) {\n+        int length;\n+        for (length = original.length; CommonUtil.isCodePointWhitespace(original, length - 1); --length) {}\n+        return Arrays.copyOfRange(original, 0, length);\n     }\n     \n-    public static boolean endsWith(final int[] codePoints, final String suffix) {\n-        final int startIndex = codePoints.length - suffix.length();\n-        return startIndex > -1 && Arrays.equals(Arrays.copyOfRange(codePoints, startIndex, codePoints.length), suffix.codePoints().toArray());\n+    public static boolean endsWith(final int[] original, final String s) {\n+        final int from = original.length - s.length();\n+        return from > -1 && Arrays.equals(Arrays.copyOfRange(original, from, original.length), s.codePoints().toArray());\n     }\n }\n"}]}
