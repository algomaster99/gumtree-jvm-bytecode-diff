{"diffoscope-json-version": 1, "source1": "first/Base64Test.class", "source2": "second/Base64Test.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,46 +1,46 @@\n-  SHA-256 checksum 0cb1949a480bfaaf1d8224b7a2e70d1c4322459de1795a40a0d410747deb8131\n+  SHA-256 checksum 40476eabf12301455261942285842da1cf180b6ad373bb5517424f833124f45c\n   Compiled from \"Base64Test.java\"\n public class org.apache.commons.net.util.Base64Test\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #31                         // org/apache/commons/net/util/Base64Test\n   super_class: #32                        // java/lang/Object\n   interfaces: 0, fields: 0, methods: 29, attributes: 1\n Constant pool:\n-    #1 = Methodref          #32.#82       // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #83           // org/apache/commons/net/util/Base64\n-    #3 = Methodref          #2.#82        // org/apache/commons/net/util/Base64.\"<init>\":()V\n-    #4 = Methodref          #2.#84        // org/apache/commons/net/util/Base64.isUrlSafe:()Z\n-    #5 = Methodref          #85.#86       // org/junit/Assert.assertFalse:(Z)V\n-    #6 = Methodref          #2.#87        // org/apache/commons/net/util/Base64.\"<init>\":(Z)V\n-    #7 = Methodref          #85.#88       // org/junit/Assert.assertTrue:(Z)V\n-    #8 = Methodref          #2.#89        // org/apache/commons/net/util/Base64.getLineSeparator:()[B\n-    #9 = Methodref          #90.#91       // java/util/Arrays.equals:([B[B)Z\n-   #10 = Methodref          #2.#92        // org/apache/commons/net/util/Base64.\"<init>\":(I)V\n+    #1 = Methodref          #32.#80       // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #81           // org/apache/commons/net/util/Base64\n+    #3 = Methodref          #2.#80        // org/apache/commons/net/util/Base64.\"<init>\":()V\n+    #4 = Methodref          #2.#82        // org/apache/commons/net/util/Base64.isUrlSafe:()Z\n+    #5 = Methodref          #83.#84       // org/junit/Assert.assertFalse:(Z)V\n+    #6 = Methodref          #2.#85        // org/apache/commons/net/util/Base64.\"<init>\":(Z)V\n+    #7 = Methodref          #83.#86       // org/junit/Assert.assertTrue:(Z)V\n+    #8 = Methodref          #2.#87        // org/apache/commons/net/util/Base64.getLineSeparator:()[B\n+    #9 = Methodref          #88.#89       // java/util/Arrays.equals:([B[B)Z\n+   #10 = Methodref          #2.#90        // org/apache/commons/net/util/Base64.\"<init>\":(I)V\n    #11 = Long               8l\n-   #13 = Methodref          #2.#93        // org/apache/commons/net/util/Base64.getLineLength:()I\n-   #14 = Methodref          #85.#94       // org/junit/Assert.assertEquals:(JJ)V\n-   #15 = Methodref          #2.#95        // org/apache/commons/net/util/Base64.\"<init>\":(I[B)V\n-   #16 = Methodref          #2.#96        // org/apache/commons/net/util/Base64.\"<init>\":(I[BZ)V\n-   #17 = Methodref          #2.#97        // org/apache/commons/net/util/Base64.isBase64:(B)Z\n-   #18 = Methodref          #2.#98        // org/apache/commons/net/util/Base64.isArrayByteBase64:([B)Z\n-   #19 = Methodref          #2.#99        // org/apache/commons/net/util/Base64.encodeBase64:([B)[B\n-   #20 = String             #100          // Not yet implemented\n-   #21 = Methodref          #85.#101      // org/junit/Assert.fail:(Ljava/lang/String;)V\n-   #22 = Methodref          #2.#102       // org/apache/commons/net/util/Base64.encodeBase64:([BZZ)[B\n-   #23 = Methodref          #85.#103      // org/junit/Assert.assertNotNull:(Ljava/lang/Object;)V\n+   #13 = Methodref          #2.#91        // org/apache/commons/net/util/Base64.getLineLength:()I\n+   #14 = Methodref          #83.#92       // org/junit/Assert.assertEquals:(JJ)V\n+   #15 = Methodref          #2.#93        // org/apache/commons/net/util/Base64.\"<init>\":(I[B)V\n+   #16 = Methodref          #2.#94        // org/apache/commons/net/util/Base64.\"<init>\":(I[BZ)V\n+   #17 = Methodref          #2.#95        // org/apache/commons/net/util/Base64.isBase64:(B)Z\n+   #18 = Methodref          #2.#96        // org/apache/commons/net/util/Base64.isArrayByteBase64:([B)Z\n+   #19 = Methodref          #2.#97        // org/apache/commons/net/util/Base64.encodeBase64:([B)[B\n+   #20 = String             #98           // Not yet implemented\n+   #21 = Methodref          #83.#99       // org/junit/Assert.fail:(Ljava/lang/String;)V\n+   #22 = Methodref          #2.#100       // org/apache/commons/net/util/Base64.encodeBase64:([BZZ)[B\n+   #23 = Methodref          #83.#101      // org/junit/Assert.assertNotNull:(Ljava/lang/Object;)V\n    #24 = Long               4l\n-   #26 = Methodref          #2.#104       // org/apache/commons/net/util/Base64.encodeBase64:([BZZI)[B\n-   #27 = String             #105          // Expected IllegalArgumentException\n-   #28 = Class              #106          // java/lang/IllegalArgumentException\n+   #26 = Methodref          #2.#102       // org/apache/commons/net/util/Base64.encodeBase64:([BZZI)[B\n+   #27 = String             #103          // Expected IllegalArgumentException\n+   #28 = Class              #104          // java/lang/IllegalArgumentException\n    #29 = Long               6l\n-   #31 = Class              #107          // org/apache/commons/net/util/Base64Test\n-   #32 = Class              #108          // java/lang/Object\n+   #31 = Class              #105          // org/apache/commons/net/util/Base64Test\n+   #32 = Class              #106          // java/lang/Object\n    #33 = Utf8               <init>\n    #34 = Utf8               ()V\n    #35 = Utf8               Code\n    #36 = Utf8               LineNumberTable\n    #37 = Utf8               LocalVariableTable\n    #38 = Utf8               this\n    #39 = Utf8               Lorg/apache/commons/net/util/Base64Test;\n@@ -69,84 +69,82 @@\n    #62 = Utf8               testDecodeString\n    #63 = Utf8               testDecodeByteArray\n    #64 = Utf8               testEncodeBase64ByteArrayBoolean\n    #65 = Utf8               testEncodeBase64ByteArrayBooleanBoolean\n    #66 = Utf8               testEncodeBase64ByteArrayBooleanBooleanInt\n    #67 = Utf8               encoded\n    #68 = Utf8               StackMapTable\n-   #69 = Class              #107          // org/apache/commons/net/util/Base64Test\n-   #70 = Class              #53           // \"[B\"\n-   #71 = Class              #106          // java/lang/IllegalArgumentException\n-   #72 = Utf8               testDecodeBase64String\n-   #73 = Utf8               testDecodeBase64ByteArray\n-   #74 = Utf8               testEncodeObject\n-   #75 = Utf8               testEncodeToString\n-   #76 = Utf8               testEncodeByteArray\n-   #77 = Utf8               testDecodeInteger\n-   #78 = Utf8               testEncodeInteger\n-   #79 = Utf8               testToIntegerBytes\n-   #80 = Utf8               SourceFile\n-   #81 = Utf8               Base64Test.java\n-   #82 = NameAndType        #33:#34       // \"<init>\":()V\n-   #83 = Utf8               org/apache/commons/net/util/Base64\n-   #84 = NameAndType        #109:#110     // isUrlSafe:()Z\n-   #85 = Class              #111          // org/junit/Assert\n-   #86 = NameAndType        #112:#113     // assertFalse:(Z)V\n-   #87 = NameAndType        #33:#113      // \"<init>\":(Z)V\n-   #88 = NameAndType        #114:#113     // assertTrue:(Z)V\n-   #89 = NameAndType        #115:#116     // getLineSeparator:()[B\n-   #90 = Class              #117          // java/util/Arrays\n-   #91 = NameAndType        #118:#119     // equals:([B[B)Z\n-   #92 = NameAndType        #33:#120      // \"<init>\":(I)V\n-   #93 = NameAndType        #121:#122     // getLineLength:()I\n-   #94 = NameAndType        #123:#124     // assertEquals:(JJ)V\n-   #95 = NameAndType        #33:#125      // \"<init>\":(I[B)V\n-   #96 = NameAndType        #33:#126      // \"<init>\":(I[BZ)V\n-   #97 = NameAndType        #127:#128     // isBase64:(B)Z\n-   #98 = NameAndType        #129:#130     // isArrayByteBase64:([B)Z\n-   #99 = NameAndType        #131:#132     // encodeBase64:([B)[B\n-  #100 = Utf8               Not yet implemented\n-  #101 = NameAndType        #133:#134     // fail:(Ljava/lang/String;)V\n-  #102 = NameAndType        #131:#135     // encodeBase64:([BZZ)[B\n-  #103 = NameAndType        #136:#137     // assertNotNull:(Ljava/lang/Object;)V\n-  #104 = NameAndType        #131:#138     // encodeBase64:([BZZI)[B\n-  #105 = Utf8               Expected IllegalArgumentException\n-  #106 = Utf8               java/lang/IllegalArgumentException\n-  #107 = Utf8               org/apache/commons/net/util/Base64Test\n-  #108 = Utf8               java/lang/Object\n-  #109 = Utf8               isUrlSafe\n-  #110 = Utf8               ()Z\n-  #111 = Utf8               org/junit/Assert\n-  #112 = Utf8               assertFalse\n-  #113 = Utf8               (Z)V\n-  #114 = Utf8               assertTrue\n-  #115 = Utf8               getLineSeparator\n-  #116 = Utf8               ()[B\n-  #117 = Utf8               java/util/Arrays\n-  #118 = Utf8               equals\n-  #119 = Utf8               ([B[B)Z\n-  #120 = Utf8               (I)V\n-  #121 = Utf8               getLineLength\n-  #122 = Utf8               ()I\n-  #123 = Utf8               assertEquals\n-  #124 = Utf8               (JJ)V\n-  #125 = Utf8               (I[B)V\n-  #126 = Utf8               (I[BZ)V\n-  #127 = Utf8               isBase64\n-  #128 = Utf8               (B)Z\n-  #129 = Utf8               isArrayByteBase64\n-  #130 = Utf8               ([B)Z\n-  #131 = Utf8               encodeBase64\n-  #132 = Utf8               ([B)[B\n-  #133 = Utf8               fail\n-  #134 = Utf8               (Ljava/lang/String;)V\n-  #135 = Utf8               ([BZZ)[B\n-  #136 = Utf8               assertNotNull\n-  #137 = Utf8               (Ljava/lang/Object;)V\n-  #138 = Utf8               ([BZZI)[B\n+   #69 = Class              #53           // \"[B\"\n+   #70 = Utf8               testDecodeBase64String\n+   #71 = Utf8               testDecodeBase64ByteArray\n+   #72 = Utf8               testEncodeObject\n+   #73 = Utf8               testEncodeToString\n+   #74 = Utf8               testEncodeByteArray\n+   #75 = Utf8               testDecodeInteger\n+   #76 = Utf8               testEncodeInteger\n+   #77 = Utf8               testToIntegerBytes\n+   #78 = Utf8               SourceFile\n+   #79 = Utf8               Base64Test.java\n+   #80 = NameAndType        #33:#34       // \"<init>\":()V\n+   #81 = Utf8               org/apache/commons/net/util/Base64\n+   #82 = NameAndType        #107:#108     // isUrlSafe:()Z\n+   #83 = Class              #109          // org/junit/Assert\n+   #84 = NameAndType        #110:#111     // assertFalse:(Z)V\n+   #85 = NameAndType        #33:#111      // \"<init>\":(Z)V\n+   #86 = NameAndType        #112:#111     // assertTrue:(Z)V\n+   #87 = NameAndType        #113:#114     // getLineSeparator:()[B\n+   #88 = Class              #115          // java/util/Arrays\n+   #89 = NameAndType        #116:#117     // equals:([B[B)Z\n+   #90 = NameAndType        #33:#118      // \"<init>\":(I)V\n+   #91 = NameAndType        #119:#120     // getLineLength:()I\n+   #92 = NameAndType        #121:#122     // assertEquals:(JJ)V\n+   #93 = NameAndType        #33:#123      // \"<init>\":(I[B)V\n+   #94 = NameAndType        #33:#124      // \"<init>\":(I[BZ)V\n+   #95 = NameAndType        #125:#126     // isBase64:(B)Z\n+   #96 = NameAndType        #127:#128     // isArrayByteBase64:([B)Z\n+   #97 = NameAndType        #129:#130     // encodeBase64:([B)[B\n+   #98 = Utf8               Not yet implemented\n+   #99 = NameAndType        #131:#132     // fail:(Ljava/lang/String;)V\n+  #100 = NameAndType        #129:#133     // encodeBase64:([BZZ)[B\n+  #101 = NameAndType        #134:#135     // assertNotNull:(Ljava/lang/Object;)V\n+  #102 = NameAndType        #129:#136     // encodeBase64:([BZZI)[B\n+  #103 = Utf8               Expected IllegalArgumentException\n+  #104 = Utf8               java/lang/IllegalArgumentException\n+  #105 = Utf8               org/apache/commons/net/util/Base64Test\n+  #106 = Utf8               java/lang/Object\n+  #107 = Utf8               isUrlSafe\n+  #108 = Utf8               ()Z\n+  #109 = Utf8               org/junit/Assert\n+  #110 = Utf8               assertFalse\n+  #111 = Utf8               (Z)V\n+  #112 = Utf8               assertTrue\n+  #113 = Utf8               getLineSeparator\n+  #114 = Utf8               ()[B\n+  #115 = Utf8               java/util/Arrays\n+  #116 = Utf8               equals\n+  #117 = Utf8               ([B[B)Z\n+  #118 = Utf8               (I)V\n+  #119 = Utf8               getLineLength\n+  #120 = Utf8               ()I\n+  #121 = Utf8               assertEquals\n+  #122 = Utf8               (JJ)V\n+  #123 = Utf8               (I[B)V\n+  #124 = Utf8               (I[BZ)V\n+  #125 = Utf8               isBase64\n+  #126 = Utf8               (B)Z\n+  #127 = Utf8               isArrayByteBase64\n+  #128 = Utf8               ([B)Z\n+  #129 = Utf8               encodeBase64\n+  #130 = Utf8               ([B)[B\n+  #131 = Utf8               fail\n+  #132 = Utf8               (Ljava/lang/String;)V\n+  #133 = Utf8               ([BZZ)[B\n+  #134 = Utf8               assertNotNull\n+  #135 = Utf8               (Ljava/lang/Object;)V\n+  #136 = Utf8               ([BZZI)[B\n {\n   public org.apache.commons.net.util.Base64Test();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n"}]}
