{"diffoscope-json-version": 1, "source1": "first/TarUtils.class", "source2": "second/TarUtils.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,160 +1,160 @@\n-  SHA-256 checksum 58172301c8af0ed369c1bb5b40a3d017cbb36baca54b42f7b4385fca5ec5ec54\n+  SHA-256 checksum b3dc691afb0285656647ce4f4ff1d3d99871149ea9c543b1f85cfd0cf41e31c0\n   Compiled from \"TarUtils.java\"\n public class org.apache.commons.compress.archivers.tar.TarUtils\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #96                         // org/apache/commons/compress/archivers/tar/TarUtils\n   super_class: #151                       // java/lang/Object\n   interfaces: 0, fields: 3, methods: 29, attributes: 2\n Constant pool:\n-    #1 = Class              #237          // org/apache/commons/compress/archivers/tar/TarConstants\n-    #2 = Methodref          #151.#238     // java/lang/Object.\"<init>\":()V\n-    #3 = Class              #239          // java/lang/IllegalArgumentException\n-    #4 = Class              #240          // java/lang/StringBuilder\n-    #5 = Methodref          #4.#238       // java/lang/StringBuilder.\"<init>\":()V\n-    #6 = String             #241          // Length\n-    #7 = Methodref          #4.#242       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #8 = Methodref          #4.#243       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-    #9 = String             #244          //  must be at least 2\n-   #10 = Methodref          #4.#245       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #11 = Methodref          #3.#246       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #12 = Methodref          #96.#247      // org/apache/commons/compress/archivers/tar/TarUtils.exceptionMessage:([BIIIB)Ljava/lang/String;\n-   #13 = Methodref          #96.#248      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctal:([BII)J\n-   #14 = Methodref          #96.#249      // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryLong:([BIIZ)J\n-   #15 = Methodref          #96.#250      // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryBigInteger:([BIIZ)J\n-   #16 = String             #251          // At offset\n-   #17 = String             #252          // ,\n-   #18 = String             #253          //  byte binary number exceeds maximum signed long value\n+    #1 = Class              #230          // org/apache/commons/compress/archivers/tar/TarConstants\n+    #2 = Methodref          #151.#231     // java/lang/Object.\"<init>\":()V\n+    #3 = Class              #232          // java/lang/IllegalArgumentException\n+    #4 = Class              #233          // java/lang/StringBuilder\n+    #5 = Methodref          #4.#231       // java/lang/StringBuilder.\"<init>\":()V\n+    #6 = String             #234          // Length\n+    #7 = Methodref          #4.#235       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+    #8 = Methodref          #4.#236       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+    #9 = String             #237          //  must be at least 2\n+   #10 = Methodref          #4.#238       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #11 = Methodref          #3.#239       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #12 = Methodref          #96.#240      // org/apache/commons/compress/archivers/tar/TarUtils.exceptionMessage:([BIIIB)Ljava/lang/String;\n+   #13 = Methodref          #96.#241      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctal:([BII)J\n+   #14 = Methodref          #96.#242      // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryLong:([BIIZ)J\n+   #15 = Methodref          #96.#243      // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryBigInteger:([BIIZ)J\n+   #16 = String             #244          // At offset\n+   #17 = String             #245          // ,\n+   #18 = String             #246          //  byte binary number exceeds maximum signed long value\n    #19 = Double             2.0d\n    #21 = Double             8.0d\n-   #23 = Methodref          #254.#255     // java/lang/Math.pow:(DD)D\n-   #24 = Methodref          #256.#257     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #25 = Class              #258          // java/math/BigInteger\n-   #26 = Methodref          #25.#259      // java/math/BigInteger.\"<init>\":([B)V\n+   #23 = Methodref          #247.#248     // java/lang/Math.pow:(DD)D\n+   #24 = Methodref          #249.#250     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #25 = Class              #251          // java/math/BigInteger\n+   #26 = Methodref          #25.#252      // java/math/BigInteger.\"<init>\":([B)V\n    #27 = Long               -1l\n-   #29 = Methodref          #25.#260      // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #30 = Methodref          #25.#261      // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #31 = Methodref          #25.#262      // java/math/BigInteger.not:()Ljava/math/BigInteger;\n-   #32 = Methodref          #25.#263      // java/math/BigInteger.bitLength:()I\n-   #33 = Methodref          #25.#264      // java/math/BigInteger.longValue:()J\n-   #34 = Class              #265          // java/lang/String\n-   #35 = Methodref          #266.#267     // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n-   #36 = Methodref          #34.#268      // java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n-   #37 = String             #269          // \\u0000\n-   #38 = String             #270          // {NUL}\n-   #39 = Methodref          #34.#271      // java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-   #40 = String             #272          // Invalid byte\n-   #41 = String             #273          //  at offset\n-   #42 = String             #274          //  in \\'\n-   #43 = String             #275          // \\' len=\n-   #44 = Fieldref           #96.#276      // org/apache/commons/compress/archivers/tar/TarUtils.DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #45 = Methodref          #96.#277      // org/apache/commons/compress/archivers/tar/TarUtils.parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-   #46 = Class              #278          // java/io/IOException\n-   #47 = Fieldref           #96.#279      // org/apache/commons/compress/archivers/tar/TarUtils.FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #48 = Class              #280          // java/io/UncheckedIOException\n-   #49 = Methodref          #48.#281      // java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n-   #50 = InterfaceMethodref #282.#283     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #51 = String             #284          //\n-   #52 = Methodref          #96.#285      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctalOrBinary:([BII)J\n-   #53 = Class              #286          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-   #54 = Methodref          #53.#287      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-   #55 = Class              #288          // java/util/ArrayList\n-   #56 = Methodref          #55.#238      // java/util/ArrayList.\"<init>\":()V\n-   #57 = Methodref          #96.#289      // org/apache/commons/compress/archivers/tar/TarUtils.parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-   #58 = Methodref          #53.#290      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n-   #59 = String             #291          // Corrupted TAR archive, sparse entry with negative offset\n-   #60 = Methodref          #46.#246      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #61 = Methodref          #53.#292      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-   #62 = String             #293          // Corrupted TAR archive, sparse entry with negative numbytes\n-   #63 = InterfaceMethodref #294.#295     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #64 = String             #296          // Corrupted TAR archive, sparse entry is invalid\n-   #65 = Methodref          #46.#297      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #66 = Methodref          #298.#299     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-   #67 = Methodref          #96.#300      // org/apache/commons/compress/archivers/tar/TarUtils.formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-   #68 = Methodref          #34.#301      // java/lang/String.length:()I\n-   #69 = InterfaceMethodref #282.#302     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-   #70 = Methodref          #303.#304     // java/nio/ByteBuffer.limit:()I\n-   #71 = Methodref          #34.#305      // java/lang/String.substring:(II)Ljava/lang/String;\n-   #72 = Methodref          #303.#306     // java/nio/ByteBuffer.position:()I\n-   #73 = Methodref          #303.#307     // java/nio/ByteBuffer.array:()[B\n-   #74 = Methodref          #303.#308     // java/nio/ByteBuffer.arrayOffset:()I\n+   #29 = Methodref          #25.#253      // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+   #30 = Methodref          #25.#254      // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #31 = Methodref          #25.#255      // java/math/BigInteger.not:()Ljava/math/BigInteger;\n+   #32 = Methodref          #25.#256      // java/math/BigInteger.bitLength:()I\n+   #33 = Methodref          #25.#257      // java/math/BigInteger.longValue:()J\n+   #34 = Class              #258          // java/lang/String\n+   #35 = Methodref          #259.#260     // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+   #36 = Methodref          #34.#261      // java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n+   #37 = String             #262          // \\u0000\n+   #38 = String             #263          // {NUL}\n+   #39 = Methodref          #34.#264      // java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+   #40 = String             #265          // Invalid byte\n+   #41 = String             #266          //  at offset\n+   #42 = String             #267          //  in \\'\n+   #43 = String             #268          // \\' len=\n+   #44 = Fieldref           #96.#269      // org/apache/commons/compress/archivers/tar/TarUtils.DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #45 = Methodref          #96.#270      // org/apache/commons/compress/archivers/tar/TarUtils.parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+   #46 = Class              #271          // java/io/IOException\n+   #47 = Fieldref           #96.#272      // org/apache/commons/compress/archivers/tar/TarUtils.FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #48 = Class              #273          // java/io/UncheckedIOException\n+   #49 = Methodref          #48.#274      // java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n+   #50 = InterfaceMethodref #275.#276     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+   #51 = String             #277          //\n+   #52 = Methodref          #96.#278      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctalOrBinary:([BII)J\n+   #53 = Class              #279          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+   #54 = Methodref          #53.#280      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+   #55 = Class              #281          // java/util/ArrayList\n+   #56 = Methodref          #55.#231      // java/util/ArrayList.\"<init>\":()V\n+   #57 = Methodref          #96.#282      // org/apache/commons/compress/archivers/tar/TarUtils.parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+   #58 = Methodref          #53.#283      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+   #59 = String             #284          // Corrupted TAR archive, sparse entry with negative offset\n+   #60 = Methodref          #46.#239      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #61 = Methodref          #53.#285      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+   #62 = String             #286          // Corrupted TAR archive, sparse entry with negative numbytes\n+   #63 = InterfaceMethodref #184.#287     // java/util/List.add:(Ljava/lang/Object;)Z\n+   #64 = String             #288          // Corrupted TAR archive, sparse entry is invalid\n+   #65 = Methodref          #46.#289      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #66 = Methodref          #290.#291     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+   #67 = Methodref          #96.#292      // org/apache/commons/compress/archivers/tar/TarUtils.formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+   #68 = Methodref          #34.#293      // java/lang/String.length:()I\n+   #69 = InterfaceMethodref #275.#294     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+   #70 = Methodref          #190.#295     // java/nio/ByteBuffer.limit:()I\n+   #71 = Methodref          #34.#296      // java/lang/String.substring:(II)Ljava/lang/String;\n+   #72 = Methodref          #190.#297     // java/nio/ByteBuffer.position:()I\n+   #73 = Methodref          #190.#298     // java/nio/ByteBuffer.array:()[B\n+   #74 = Methodref          #190.#299     // java/nio/ByteBuffer.arrayOffset:()I\n    #75 = Long               7l\n-   #77 = Methodref          #4.#309       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #78 = String             #310          // =\n-   #79 = Methodref          #311.#312     // java/lang/Long.toOctalString:(J)Ljava/lang/String;\n-   #80 = String             #313          //  will not fit in octal number buffer of length\n-   #81 = Methodref          #96.#314      // org/apache/commons/compress/archivers/tar/TarUtils.formatUnsignedOctalString:(J[BII)V\n+   #77 = Methodref          #4.#300       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #78 = String             #301          // =\n+   #79 = Methodref          #213.#302     // java/lang/Long.toOctalString:(J)Ljava/lang/String;\n+   #80 = String             #303          //  will not fit in octal number buffer of length\n+   #81 = Methodref          #96.#304      // org/apache/commons/compress/archivers/tar/TarUtils.formatUnsignedOctalString:(J[BII)V\n    #82 = Long               2097151l\n    #84 = Long               8589934591l\n-   #86 = Methodref          #96.#315      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongOctalBytes:(J[BII)I\n-   #87 = Methodref          #96.#316      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongBinary:(J[BIIZ)V\n-   #88 = Methodref          #96.#317      // org/apache/commons/compress/archivers/tar/TarUtils.formatBigIntegerBinary:(J[BIIZ)V\n-   #89 = Methodref          #254.#318     // java/lang/Math.abs:(J)J\n-   #90 = String             #319          // Value\n-   #91 = String             #320          //  is too large for\n-   #92 = String             #321          //  byte field.\n+   #86 = Methodref          #96.#305      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongOctalBytes:(J[BII)I\n+   #87 = Methodref          #96.#306      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongBinary:(J[BIIZ)V\n+   #88 = Methodref          #96.#307      // org/apache/commons/compress/archivers/tar/TarUtils.formatBigIntegerBinary:(J[BIIZ)V\n+   #89 = Methodref          #247.#308     // java/lang/Math.abs:(J)J\n+   #90 = String             #309          // Value\n+   #91 = String             #310          //  is too large for\n+   #92 = String             #311          //  byte field.\n    #93 = Long               255l\n-   #95 = Methodref          #25.#322      // java/math/BigInteger.toByteArray:()[B\n-   #96 = Class              #323          // org/apache/commons/compress/archivers/tar/TarUtils\n-   #97 = Methodref          #96.#324      // org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-   #98 = Class              #325          // java/util/HashMap\n-   #99 = Methodref          #98.#326      // java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n-  #100 = Methodref          #327.#328     // java/io/InputStream.read:()I\n-  #101 = Class              #329          // java/io/ByteArrayOutputStream\n-  #102 = Methodref          #101.#238     // java/io/ByteArrayOutputStream.\"<init>\":()V\n-  #103 = Class              #330          // org/apache/commons/compress/utils/CharsetNames\n-  #104 = String             #331          // UTF-8\n-  #105 = Methodref          #101.#332     // java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n-  #106 = InterfaceMethodref #333.#334     // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #107 = String             #335          // Paxheader value size\n-  #108 = String             #336          //  exceeds size of header record\n-  #109 = Methodref          #337.#338     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n-  #110 = String             #339          // Failed to read Paxheader. Expected\n-  #111 = String             #340          //  bytes, read\n-  #112 = String             #341          // Failed to read Paxheader.Value should end with a newline\n-  #113 = Fieldref           #342.#343     // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n-  #114 = InterfaceMethodref #333.#344     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #115 = String             #345          // GNU.sparse.offset\n-  #116 = Methodref          #34.#346      // java/lang/String.equals:(Ljava/lang/Object;)Z\n-  #117 = Methodref          #311.#264     // java/lang/Long.longValue:()J\n-  #118 = Methodref          #311.#347     // java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-  #119 = Class              #348          // java/lang/NumberFormatException\n-  #120 = String             #349          // Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n-  #121 = String             #350          // Failed to read Paxheader.GNU.sparse.offset contains negative value\n-  #122 = String             #351          // GNU.sparse.numbytes\n-  #123 = String             #352          // Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-  #124 = Methodref          #311.#353     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n-  #125 = String             #354          // Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n-  #126 = String             #355          // Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n-  #127 = Methodref          #101.#356     // java/io/ByteArrayOutputStream.write:(I)V\n-  #128 = String             #357          // Failed to read Paxheader. Encountered a non-number while reading length\n-  #129 = Methodref          #96.#358      // org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-  #130 = Methodref          #46.#359      // java/io/IOException.getMessage:()Ljava/lang/String;\n-  #131 = Methodref          #48.#360      // java/io/UncheckedIOException.\"<init>\":(Ljava/lang/String;Ljava/io/IOException;)V\n-  #132 = String             #361          // ,\n-  #133 = Methodref          #34.#362      // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n-  #134 = String             #363          // Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n-  #135 = String             #364          // Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n-  #136 = String             #365          // Corrupted TAR archive. Sparse struct offset contains negative value\n-  #137 = String             #366          // Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n-  #138 = String             #367          // Corrupted TAR archive. Sparse struct numbytes contains negative value\n-  #139 = Methodref          #96.#368      // org/apache/commons/compress/archivers/tar/TarUtils.readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-  #140 = String             #369          // Corrupted TAR archive. Negative value in sparse headers block\n-  #141 = String             #370          // Corrupted TAR archive. Sparse header block offset contains negative value\n-  #142 = String             #371          // Corrupted TAR archive. Sparse header block numbytes contains negative value\n-  #143 = Methodref          #337.#372     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-  #144 = String             #373          // Unexpected EOF when reading parse information of 1.X PAX format\n-  #145 = String             #374          // Corrupted TAR archive. Non-numeric value in sparse headers block\n+   #95 = Methodref          #25.#312      // java/math/BigInteger.toByteArray:()[B\n+   #96 = Class              #313          // org/apache/commons/compress/archivers/tar/TarUtils\n+   #97 = Methodref          #96.#314      // org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+   #98 = Class              #315          // java/util/HashMap\n+   #99 = Methodref          #98.#316      // java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n+  #100 = Methodref          #214.#317     // java/io/InputStream.read:()I\n+  #101 = Class              #318          // java/io/ByteArrayOutputStream\n+  #102 = Methodref          #101.#231     // java/io/ByteArrayOutputStream.\"<init>\":()V\n+  #103 = Class              #319          // org/apache/commons/compress/utils/CharsetNames\n+  #104 = String             #320          // UTF-8\n+  #105 = Methodref          #101.#321     // java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n+  #106 = InterfaceMethodref #212.#322     // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #107 = String             #323          // Paxheader value size\n+  #108 = String             #324          //  exceeds size of header record\n+  #109 = Methodref          #325.#326     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+  #110 = String             #327          // Failed to read Paxheader. Expected\n+  #111 = String             #328          //  bytes, read\n+  #112 = String             #329          // Failed to read Paxheader.Value should end with a newline\n+  #113 = Fieldref           #330.#331     // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n+  #114 = InterfaceMethodref #212.#332     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #115 = String             #333          // GNU.sparse.offset\n+  #116 = Methodref          #34.#334      // java/lang/String.equals:(Ljava/lang/Object;)Z\n+  #117 = Methodref          #213.#257     // java/lang/Long.longValue:()J\n+  #118 = Methodref          #213.#335     // java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+  #119 = Class              #336          // java/lang/NumberFormatException\n+  #120 = String             #337          // Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n+  #121 = String             #338          // Failed to read Paxheader.GNU.sparse.offset contains negative value\n+  #122 = String             #339          // GNU.sparse.numbytes\n+  #123 = String             #340          // Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+  #124 = Methodref          #213.#341     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n+  #125 = String             #342          // Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n+  #126 = String             #343          // Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n+  #127 = Methodref          #101.#344     // java/io/ByteArrayOutputStream.write:(I)V\n+  #128 = String             #345          // Failed to read Paxheader. Encountered a non-number while reading length\n+  #129 = Methodref          #96.#346      // org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+  #130 = Methodref          #46.#347      // java/io/IOException.getMessage:()Ljava/lang/String;\n+  #131 = Methodref          #48.#348      // java/io/UncheckedIOException.\"<init>\":(Ljava/lang/String;Ljava/io/IOException;)V\n+  #132 = String             #349          // ,\n+  #133 = Methodref          #34.#350      // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n+  #134 = String             #351          // Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n+  #135 = String             #352          // Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n+  #136 = String             #353          // Corrupted TAR archive. Sparse struct offset contains negative value\n+  #137 = String             #354          // Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n+  #138 = String             #355          // Corrupted TAR archive. Sparse struct numbytes contains negative value\n+  #139 = Methodref          #96.#356      // org/apache/commons/compress/archivers/tar/TarUtils.readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+  #140 = String             #357          // Corrupted TAR archive. Negative value in sparse headers block\n+  #141 = String             #358          // Corrupted TAR archive. Sparse header block offset contains negative value\n+  #142 = String             #359          // Corrupted TAR archive. Sparse header block numbytes contains negative value\n+  #143 = Methodref          #325.#360     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+  #144 = String             #361          // Unexpected EOF when reading parse information of 1.X PAX format\n+  #145 = String             #362          // Corrupted TAR archive. Non-numeric value in sparse headers block\n   #146 = Long               10l\n-  #148 = Methodref          #375.#376     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #149 = Class              #377          // org/apache/commons/compress/archivers/tar/TarUtils$1\n-  #150 = Methodref          #149.#238     // org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n-  #151 = Class              #378          // java/lang/Object\n+  #148 = Methodref          #363.#364     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #149 = Class              #365          // org/apache/commons/compress/archivers/tar/TarUtils$1\n+  #150 = Methodref          #149.#231     // org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n+  #151 = Class              #366          // java/lang/Object\n   #152 = Utf8               InnerClasses\n   #153 = Utf8               BYTE_MASK\n   #154 = Utf8               I\n   #155 = Utf8               ConstantValue\n   #156 = Integer            255\n   #157 = Utf8               DEFAULT_ENCODING\n   #158 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n@@ -166,315 +166,303 @@\n   #164 = Utf8               parseOctal\n   #165 = Utf8               ([BII)J\n   #166 = Utf8               StackMapTable\n   #167 = Utf8               parseOctalOrBinary\n   #168 = Utf8               parseBinaryLong\n   #169 = Utf8               ([BIIZ)J\n   #170 = Utf8               parseBinaryBigInteger\n-  #171 = Class              #379          // \"[B\"\n-  #172 = Class              #258          // java/math/BigInteger\n-  #173 = Utf8               parseBoolean\n-  #174 = Utf8               ([BI)Z\n-  #175 = Utf8               exceptionMessage\n-  #176 = Utf8               ([BIIIB)Ljava/lang/String;\n-  #177 = Utf8               parseName\n-  #178 = Utf8               ([BII)Ljava/lang/String;\n-  #179 = Class              #278          // java/io/IOException\n-  #180 = Utf8               ([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-  #181 = Utf8               Exceptions\n-  #182 = Utf8               parseSparse\n-  #183 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-  #184 = Utf8               readSparseStructs\n-  #185 = Utf8               ([BII)Ljava/util/List;\n-  #186 = Class              #380          // java/util/List\n-  #187 = Class              #286          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-  #188 = Class              #239          // java/lang/IllegalArgumentException\n-  #189 = Utf8               Signature\n-  #190 = Utf8               ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #191 = Utf8               formatNameBytes\n-  #192 = Utf8               (Ljava/lang/String;[BII)I\n-  #193 = Class              #265          // java/lang/String\n-  #194 = Utf8               (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-  #195 = Class              #381          // java/nio/ByteBuffer\n-  #196 = Utf8               formatUnsignedOctalString\n-  #197 = Utf8               (J[BII)V\n-  #198 = Utf8               formatOctalBytes\n-  #199 = Utf8               (J[BII)I\n-  #200 = Utf8               formatLongOctalBytes\n-  #201 = Utf8               formatLongOctalOrBinaryBytes\n-  #202 = Utf8               formatLongBinary\n-  #203 = Utf8               (J[BIIZ)V\n-  #204 = Utf8               formatBigIntegerBinary\n-  #205 = Utf8               formatCheckSumOctalBytes\n-  #206 = Utf8               computeCheckSum\n-  #207 = Utf8               ([B)J\n-  #208 = Utf8               verifyCheckSum\n-  #209 = Utf8               ([B)Z\n-  #210 = Utf8               parsePaxHeaders\n-  #211 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;)Ljava/util/Map;\n-  #212 = Utf8               Deprecated\n-  #213 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #214 = Utf8               RuntimeVisibleAnnotations\n-  #215 = Utf8               Ljava/lang/Deprecated;\n-  #216 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #217 = Class              #382          // java/util/Map\n-  #218 = Class              #383          // java/lang/Long\n-  #219 = Class              #384          // java/io/InputStream\n-  #220 = Class              #329          // java/io/ByteArrayOutputStream\n-  #221 = Class              #348          // java/lang/NumberFormatException\n-  #222 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #223 = Utf8               parsePAX01SparseHeaders\n-  #224 = Utf8               (Ljava/lang/String;)Ljava/util/List;\n-  #225 = Utf8               (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #226 = Utf8               parseFromPAX01SparseHeaders\n-  #227 = Class              #385          // \"[Ljava/lang/String;\"\n-  #228 = Utf8               parsePAX1XSparseHeaders\n-  #229 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List;\n-  #230 = Class              #386          // \"[J\"\n-  #231 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #232 = Utf8               readLineOfNumberForPax1X\n-  #233 = Utf8               (Ljava/io/InputStream;)[J\n-  #234 = Utf8               <clinit>\n-  #235 = Utf8               SourceFile\n-  #236 = Utf8               TarUtils.java\n-  #237 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n-  #238 = NameAndType        #160:#161     // \"<init>\":()V\n-  #239 = Utf8               java/lang/IllegalArgumentException\n-  #240 = Utf8               java/lang/StringBuilder\n-  #241 = Utf8               Length\n-  #242 = NameAndType        #387:#388     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #243 = NameAndType        #387:#389     // append:(I)Ljava/lang/StringBuilder;\n-  #244 = Utf8                must be at least 2\n-  #245 = NameAndType        #390:#391     // toString:()Ljava/lang/String;\n-  #246 = NameAndType        #160:#392     // \"<init>\":(Ljava/lang/String;)V\n-  #247 = NameAndType        #175:#176     // exceptionMessage:([BIIIB)Ljava/lang/String;\n-  #248 = NameAndType        #164:#165     // parseOctal:([BII)J\n-  #249 = NameAndType        #168:#169     // parseBinaryLong:([BIIZ)J\n-  #250 = NameAndType        #170:#169     // parseBinaryBigInteger:([BIIZ)J\n-  #251 = Utf8               At offset\n-  #252 = Utf8               ,\n-  #253 = Utf8                byte binary number exceeds maximum signed long value\n-  #254 = Class              #393          // java/lang/Math\n-  #255 = NameAndType        #394:#395     // pow:(DD)D\n-  #256 = Class              #396          // java/lang/System\n-  #257 = NameAndType        #397:#398     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #258 = Utf8               java/math/BigInteger\n-  #259 = NameAndType        #160:#399     // \"<init>\":([B)V\n-  #260 = NameAndType        #400:#401     // valueOf:(J)Ljava/math/BigInteger;\n-  #261 = NameAndType        #402:#403     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #262 = NameAndType        #404:#405     // not:()Ljava/math/BigInteger;\n-  #263 = NameAndType        #406:#407     // bitLength:()I\n-  #264 = NameAndType        #408:#409     // longValue:()J\n-  #265 = Utf8               java/lang/String\n-  #266 = Class              #410          // java/nio/charset/Charset\n-  #267 = NameAndType        #411:#412     // defaultCharset:()Ljava/nio/charset/Charset;\n-  #268 = NameAndType        #160:#413     // \"<init>\":([BIILjava/nio/charset/Charset;)V\n-  #269 = Utf8               \\u0000\n-  #270 = Utf8               {NUL}\n-  #271 = NameAndType        #414:#415     // replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-  #272 = Utf8               Invalid byte\n-  #273 = Utf8                at offset\n-  #274 = Utf8                in \\'\n-  #275 = Utf8               \\' len=\n-  #276 = NameAndType        #157:#158     // DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #277 = NameAndType        #177:#180     // parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-  #278 = Utf8               java/io/IOException\n-  #279 = NameAndType        #159:#158     // FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #280 = Utf8               java/io/UncheckedIOException\n-  #281 = NameAndType        #160:#416     // \"<init>\":(Ljava/io/IOException;)V\n-  #282 = Class              #417          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #283 = NameAndType        #418:#419     // decode:([B)Ljava/lang/String;\n-  #284 = Utf8\n-  #285 = NameAndType        #167:#165     // parseOctalOrBinary:([BII)J\n-  #286 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-  #287 = NameAndType        #160:#420     // \"<init>\":(JJ)V\n-  #288 = Utf8               java/util/ArrayList\n-  #289 = NameAndType        #182:#183     // parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-  #290 = NameAndType        #421:#409     // getOffset:()J\n-  #291 = Utf8               Corrupted TAR archive, sparse entry with negative offset\n-  #292 = NameAndType        #422:#409     // getNumbytes:()J\n-  #293 = Utf8               Corrupted TAR archive, sparse entry with negative numbytes\n-  #294 = Class              #380          // java/util/List\n-  #295 = NameAndType        #402:#423     // add:(Ljava/lang/Object;)Z\n-  #296 = Utf8               Corrupted TAR archive, sparse entry is invalid\n-  #297 = NameAndType        #160:#424     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #298 = Class              #425          // java/util/Collections\n-  #299 = NameAndType        #426:#427     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-  #300 = NameAndType        #191:#194     // formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-  #301 = NameAndType        #428:#407     // length:()I\n-  #302 = NameAndType        #429:#430     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #303 = Class              #381          // java/nio/ByteBuffer\n-  #304 = NameAndType        #431:#407     // limit:()I\n-  #305 = NameAndType        #432:#433     // substring:(II)Ljava/lang/String;\n-  #306 = NameAndType        #434:#407     // position:()I\n-  #307 = NameAndType        #435:#436     // array:()[B\n-  #308 = NameAndType        #437:#407     // arrayOffset:()I\n-  #309 = NameAndType        #387:#438     // append:(J)Ljava/lang/StringBuilder;\n-  #310 = Utf8               =\n-  #311 = Class              #383          // java/lang/Long\n-  #312 = NameAndType        #439:#440     // toOctalString:(J)Ljava/lang/String;\n-  #313 = Utf8                will not fit in octal number buffer of length\n-  #314 = NameAndType        #196:#197     // formatUnsignedOctalString:(J[BII)V\n-  #315 = NameAndType        #200:#199     // formatLongOctalBytes:(J[BII)I\n-  #316 = NameAndType        #202:#203     // formatLongBinary:(J[BIIZ)V\n-  #317 = NameAndType        #204:#203     // formatBigIntegerBinary:(J[BIIZ)V\n-  #318 = NameAndType        #441:#442     // abs:(J)J\n-  #319 = Utf8               Value\n-  #320 = Utf8                is too large for\n-  #321 = Utf8                byte field.\n-  #322 = NameAndType        #443:#436     // toByteArray:()[B\n-  #323 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n-  #324 = NameAndType        #210:#216     // parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #325 = Utf8               java/util/HashMap\n-  #326 = NameAndType        #160:#444     // \"<init>\":(Ljava/util/Map;)V\n-  #327 = Class              #384          // java/io/InputStream\n-  #328 = NameAndType        #445:#407     // read:()I\n-  #329 = Utf8               java/io/ByteArrayOutputStream\n-  #330 = Utf8               org/apache/commons/compress/utils/CharsetNames\n-  #331 = Utf8               UTF-8\n-  #332 = NameAndType        #390:#446     // toString:(Ljava/lang/String;)Ljava/lang/String;\n-  #333 = Class              #382          // java/util/Map\n-  #334 = NameAndType        #447:#448     // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #335 = Utf8               Paxheader value size\n-  #336 = Utf8                exceeds size of header record\n-  #337 = Class              #449          // org/apache/commons/compress/utils/IOUtils\n-  #338 = NameAndType        #450:#451     // readRange:(Ljava/io/InputStream;I)[B\n-  #339 = Utf8               Failed to read Paxheader. Expected\n-  #340 = Utf8                bytes, read\n-  #341 = Utf8               Failed to read Paxheader.Value should end with a newline\n-  #342 = Class              #452          // java/nio/charset/StandardCharsets\n-  #343 = NameAndType        #453:#454     // UTF_8:Ljava/nio/charset/Charset;\n-  #344 = NameAndType        #455:#456     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #345 = Utf8               GNU.sparse.offset\n-  #346 = NameAndType        #457:#423     // equals:(Ljava/lang/Object;)Z\n-  #347 = NameAndType        #400:#458     // valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-  #348 = Utf8               java/lang/NumberFormatException\n-  #349 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n-  #350 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains negative value\n-  #351 = Utf8               GNU.sparse.numbytes\n-  #352 = Utf8               Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-  #353 = NameAndType        #459:#460     // parseLong:(Ljava/lang/String;)J\n-  #354 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n-  #355 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n-  #356 = NameAndType        #461:#462     // write:(I)V\n-  #357 = Utf8               Failed to read Paxheader. Encountered a non-number while reading length\n-  #358 = NameAndType        #226:#224     // parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-  #359 = NameAndType        #463:#391     // getMessage:()Ljava/lang/String;\n-  #360 = NameAndType        #160:#464     // \"<init>\":(Ljava/lang/String;Ljava/io/IOException;)V\n-  #361 = Utf8               ,\n-  #362 = NameAndType        #465:#466     // split:(Ljava/lang/String;)[Ljava/lang/String;\n-  #363 = Utf8               Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n-  #364 = Utf8               Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n-  #365 = Utf8               Corrupted TAR archive. Sparse struct offset contains negative value\n-  #366 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n-  #367 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains negative value\n-  #368 = NameAndType        #232:#233     // readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-  #369 = Utf8               Corrupted TAR archive. Negative value in sparse headers block\n-  #370 = Utf8               Corrupted TAR archive. Sparse header block offset contains negative value\n-  #371 = Utf8               Corrupted TAR archive. Sparse header block numbytes contains negative value\n-  #372 = NameAndType        #467:#468     // skip:(Ljava/io/InputStream;J)J\n-  #373 = Utf8               Unexpected EOF when reading parse information of 1.X PAX format\n-  #374 = Utf8               Corrupted TAR archive. Non-numeric value in sparse headers block\n-  #375 = Class              #469          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #376 = NameAndType        #470:#471     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #377 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils$1\n-  #378 = Utf8               java/lang/Object\n-  #379 = Utf8               [B\n-  #380 = Utf8               java/util/List\n-  #381 = Utf8               java/nio/ByteBuffer\n-  #382 = Utf8               java/util/Map\n-  #383 = Utf8               java/lang/Long\n-  #384 = Utf8               java/io/InputStream\n-  #385 = Utf8               [Ljava/lang/String;\n-  #386 = Utf8               [J\n-  #387 = Utf8               append\n-  #388 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #389 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #390 = Utf8               toString\n-  #391 = Utf8               ()Ljava/lang/String;\n-  #392 = Utf8               (Ljava/lang/String;)V\n-  #393 = Utf8               java/lang/Math\n-  #394 = Utf8               pow\n-  #395 = Utf8               (DD)D\n-  #396 = Utf8               java/lang/System\n-  #397 = Utf8               arraycopy\n-  #398 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #399 = Utf8               ([B)V\n-  #400 = Utf8               valueOf\n-  #401 = Utf8               (J)Ljava/math/BigInteger;\n-  #402 = Utf8               add\n-  #403 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #404 = Utf8               not\n-  #405 = Utf8               ()Ljava/math/BigInteger;\n-  #406 = Utf8               bitLength\n-  #407 = Utf8               ()I\n-  #408 = Utf8               longValue\n-  #409 = Utf8               ()J\n-  #410 = Utf8               java/nio/charset/Charset\n-  #411 = Utf8               defaultCharset\n-  #412 = Utf8               ()Ljava/nio/charset/Charset;\n-  #413 = Utf8               ([BIILjava/nio/charset/Charset;)V\n-  #414 = Utf8               replace\n-  #415 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-  #416 = Utf8               (Ljava/io/IOException;)V\n-  #417 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #418 = Utf8               decode\n-  #419 = Utf8               ([B)Ljava/lang/String;\n-  #420 = Utf8               (JJ)V\n-  #421 = Utf8               getOffset\n-  #422 = Utf8               getNumbytes\n-  #423 = Utf8               (Ljava/lang/Object;)Z\n-  #424 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #425 = Utf8               java/util/Collections\n-  #426 = Utf8               unmodifiableList\n-  #427 = Utf8               (Ljava/util/List;)Ljava/util/List;\n-  #428 = Utf8               length\n-  #429 = Utf8               encode\n-  #430 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #431 = Utf8               limit\n-  #432 = Utf8               substring\n-  #433 = Utf8               (II)Ljava/lang/String;\n-  #434 = Utf8               position\n-  #435 = Utf8               array\n-  #436 = Utf8               ()[B\n-  #437 = Utf8               arrayOffset\n-  #438 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #439 = Utf8               toOctalString\n-  #440 = Utf8               (J)Ljava/lang/String;\n-  #441 = Utf8               abs\n-  #442 = Utf8               (J)J\n-  #443 = Utf8               toByteArray\n-  #444 = Utf8               (Ljava/util/Map;)V\n-  #445 = Utf8               read\n-  #446 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #447 = Utf8               remove\n-  #448 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #449 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #450 = Utf8               readRange\n-  #451 = Utf8               (Ljava/io/InputStream;I)[B\n-  #452 = Utf8               java/nio/charset/StandardCharsets\n-  #453 = Utf8               UTF_8\n-  #454 = Utf8               Ljava/nio/charset/Charset;\n-  #455 = Utf8               put\n-  #456 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #457 = Utf8               equals\n-  #458 = Utf8               (Ljava/lang/String;)Ljava/lang/Long;\n-  #459 = Utf8               parseLong\n-  #460 = Utf8               (Ljava/lang/String;)J\n-  #461 = Utf8               write\n-  #462 = Utf8               (I)V\n-  #463 = Utf8               getMessage\n-  #464 = Utf8               (Ljava/lang/String;Ljava/io/IOException;)V\n-  #465 = Utf8               split\n-  #466 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n-  #467 = Utf8               skip\n-  #468 = Utf8               (Ljava/io/InputStream;J)J\n-  #469 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #470 = Utf8               getZipEncoding\n-  #471 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #171 = Class              #367          // \"[B\"\n+  #172 = Utf8               parseBoolean\n+  #173 = Utf8               ([BI)Z\n+  #174 = Utf8               exceptionMessage\n+  #175 = Utf8               ([BIIIB)Ljava/lang/String;\n+  #176 = Utf8               parseName\n+  #177 = Utf8               ([BII)Ljava/lang/String;\n+  #178 = Utf8               ([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+  #179 = Utf8               Exceptions\n+  #180 = Utf8               parseSparse\n+  #181 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #182 = Utf8               readSparseStructs\n+  #183 = Utf8               ([BII)Ljava/util/List;\n+  #184 = Class              #368          // java/util/List\n+  #185 = Utf8               Signature\n+  #186 = Utf8               ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #187 = Utf8               formatNameBytes\n+  #188 = Utf8               (Ljava/lang/String;[BII)I\n+  #189 = Utf8               (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+  #190 = Class              #369          // java/nio/ByteBuffer\n+  #191 = Utf8               formatUnsignedOctalString\n+  #192 = Utf8               (J[BII)V\n+  #193 = Utf8               formatOctalBytes\n+  #194 = Utf8               (J[BII)I\n+  #195 = Utf8               formatLongOctalBytes\n+  #196 = Utf8               formatLongOctalOrBinaryBytes\n+  #197 = Utf8               formatLongBinary\n+  #198 = Utf8               (J[BIIZ)V\n+  #199 = Utf8               formatBigIntegerBinary\n+  #200 = Utf8               formatCheckSumOctalBytes\n+  #201 = Utf8               computeCheckSum\n+  #202 = Utf8               ([B)J\n+  #203 = Utf8               verifyCheckSum\n+  #204 = Utf8               ([B)Z\n+  #205 = Utf8               parsePaxHeaders\n+  #206 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;)Ljava/util/Map;\n+  #207 = Utf8               Deprecated\n+  #208 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #209 = Utf8               RuntimeVisibleAnnotations\n+  #210 = Utf8               Ljava/lang/Deprecated;\n+  #211 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #212 = Class              #370          // java/util/Map\n+  #213 = Class              #371          // java/lang/Long\n+  #214 = Class              #372          // java/io/InputStream\n+  #215 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #216 = Utf8               parsePAX01SparseHeaders\n+  #217 = Utf8               (Ljava/lang/String;)Ljava/util/List;\n+  #218 = Utf8               (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #219 = Utf8               parseFromPAX01SparseHeaders\n+  #220 = Class              #373          // \"[Ljava/lang/String;\"\n+  #221 = Utf8               parsePAX1XSparseHeaders\n+  #222 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List;\n+  #223 = Class              #374          // \"[J\"\n+  #224 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #225 = Utf8               readLineOfNumberForPax1X\n+  #226 = Utf8               (Ljava/io/InputStream;)[J\n+  #227 = Utf8               <clinit>\n+  #228 = Utf8               SourceFile\n+  #229 = Utf8               TarUtils.java\n+  #230 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n+  #231 = NameAndType        #160:#161     // \"<init>\":()V\n+  #232 = Utf8               java/lang/IllegalArgumentException\n+  #233 = Utf8               java/lang/StringBuilder\n+  #234 = Utf8               Length\n+  #235 = NameAndType        #375:#376     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #236 = NameAndType        #375:#377     // append:(I)Ljava/lang/StringBuilder;\n+  #237 = Utf8                must be at least 2\n+  #238 = NameAndType        #378:#379     // toString:()Ljava/lang/String;\n+  #239 = NameAndType        #160:#380     // \"<init>\":(Ljava/lang/String;)V\n+  #240 = NameAndType        #174:#175     // exceptionMessage:([BIIIB)Ljava/lang/String;\n+  #241 = NameAndType        #164:#165     // parseOctal:([BII)J\n+  #242 = NameAndType        #168:#169     // parseBinaryLong:([BIIZ)J\n+  #243 = NameAndType        #170:#169     // parseBinaryBigInteger:([BIIZ)J\n+  #244 = Utf8               At offset\n+  #245 = Utf8               ,\n+  #246 = Utf8                byte binary number exceeds maximum signed long value\n+  #247 = Class              #381          // java/lang/Math\n+  #248 = NameAndType        #382:#383     // pow:(DD)D\n+  #249 = Class              #384          // java/lang/System\n+  #250 = NameAndType        #385:#386     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #251 = Utf8               java/math/BigInteger\n+  #252 = NameAndType        #160:#387     // \"<init>\":([B)V\n+  #253 = NameAndType        #388:#389     // valueOf:(J)Ljava/math/BigInteger;\n+  #254 = NameAndType        #390:#391     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #255 = NameAndType        #392:#393     // not:()Ljava/math/BigInteger;\n+  #256 = NameAndType        #394:#395     // bitLength:()I\n+  #257 = NameAndType        #396:#397     // longValue:()J\n+  #258 = Utf8               java/lang/String\n+  #259 = Class              #398          // java/nio/charset/Charset\n+  #260 = NameAndType        #399:#400     // defaultCharset:()Ljava/nio/charset/Charset;\n+  #261 = NameAndType        #160:#401     // \"<init>\":([BIILjava/nio/charset/Charset;)V\n+  #262 = Utf8               \\u0000\n+  #263 = Utf8               {NUL}\n+  #264 = NameAndType        #402:#403     // replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+  #265 = Utf8               Invalid byte\n+  #266 = Utf8                at offset\n+  #267 = Utf8                in \\'\n+  #268 = Utf8               \\' len=\n+  #269 = NameAndType        #157:#158     // DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #270 = NameAndType        #176:#178     // parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+  #271 = Utf8               java/io/IOException\n+  #272 = NameAndType        #159:#158     // FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #273 = Utf8               java/io/UncheckedIOException\n+  #274 = NameAndType        #160:#404     // \"<init>\":(Ljava/io/IOException;)V\n+  #275 = Class              #405          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #276 = NameAndType        #406:#407     // decode:([B)Ljava/lang/String;\n+  #277 = Utf8\n+  #278 = NameAndType        #167:#165     // parseOctalOrBinary:([BII)J\n+  #279 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+  #280 = NameAndType        #160:#408     // \"<init>\":(JJ)V\n+  #281 = Utf8               java/util/ArrayList\n+  #282 = NameAndType        #180:#181     // parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #283 = NameAndType        #409:#397     // getOffset:()J\n+  #284 = Utf8               Corrupted TAR archive, sparse entry with negative offset\n+  #285 = NameAndType        #410:#397     // getNumbytes:()J\n+  #286 = Utf8               Corrupted TAR archive, sparse entry with negative numbytes\n+  #287 = NameAndType        #390:#411     // add:(Ljava/lang/Object;)Z\n+  #288 = Utf8               Corrupted TAR archive, sparse entry is invalid\n+  #289 = NameAndType        #160:#412     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #290 = Class              #413          // java/util/Collections\n+  #291 = NameAndType        #414:#415     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+  #292 = NameAndType        #187:#189     // formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+  #293 = NameAndType        #416:#395     // length:()I\n+  #294 = NameAndType        #417:#418     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #295 = NameAndType        #419:#395     // limit:()I\n+  #296 = NameAndType        #420:#421     // substring:(II)Ljava/lang/String;\n+  #297 = NameAndType        #422:#395     // position:()I\n+  #298 = NameAndType        #423:#424     // array:()[B\n+  #299 = NameAndType        #425:#395     // arrayOffset:()I\n+  #300 = NameAndType        #375:#426     // append:(J)Ljava/lang/StringBuilder;\n+  #301 = Utf8               =\n+  #302 = NameAndType        #427:#428     // toOctalString:(J)Ljava/lang/String;\n+  #303 = Utf8                will not fit in octal number buffer of length\n+  #304 = NameAndType        #191:#192     // formatUnsignedOctalString:(J[BII)V\n+  #305 = NameAndType        #195:#194     // formatLongOctalBytes:(J[BII)I\n+  #306 = NameAndType        #197:#198     // formatLongBinary:(J[BIIZ)V\n+  #307 = NameAndType        #199:#198     // formatBigIntegerBinary:(J[BIIZ)V\n+  #308 = NameAndType        #429:#430     // abs:(J)J\n+  #309 = Utf8               Value\n+  #310 = Utf8                is too large for\n+  #311 = Utf8                byte field.\n+  #312 = NameAndType        #431:#424     // toByteArray:()[B\n+  #313 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n+  #314 = NameAndType        #205:#211     // parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #315 = Utf8               java/util/HashMap\n+  #316 = NameAndType        #160:#432     // \"<init>\":(Ljava/util/Map;)V\n+  #317 = NameAndType        #433:#395     // read:()I\n+  #318 = Utf8               java/io/ByteArrayOutputStream\n+  #319 = Utf8               org/apache/commons/compress/utils/CharsetNames\n+  #320 = Utf8               UTF-8\n+  #321 = NameAndType        #378:#434     // toString:(Ljava/lang/String;)Ljava/lang/String;\n+  #322 = NameAndType        #435:#436     // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #323 = Utf8               Paxheader value size\n+  #324 = Utf8                exceeds size of header record\n+  #325 = Class              #437          // org/apache/commons/compress/utils/IOUtils\n+  #326 = NameAndType        #438:#439     // readRange:(Ljava/io/InputStream;I)[B\n+  #327 = Utf8               Failed to read Paxheader. Expected\n+  #328 = Utf8                bytes, read\n+  #329 = Utf8               Failed to read Paxheader.Value should end with a newline\n+  #330 = Class              #440          // java/nio/charset/StandardCharsets\n+  #331 = NameAndType        #441:#442     // UTF_8:Ljava/nio/charset/Charset;\n+  #332 = NameAndType        #443:#444     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #333 = Utf8               GNU.sparse.offset\n+  #334 = NameAndType        #445:#411     // equals:(Ljava/lang/Object;)Z\n+  #335 = NameAndType        #388:#446     // valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+  #336 = Utf8               java/lang/NumberFormatException\n+  #337 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n+  #338 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains negative value\n+  #339 = Utf8               GNU.sparse.numbytes\n+  #340 = Utf8               Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+  #341 = NameAndType        #447:#448     // parseLong:(Ljava/lang/String;)J\n+  #342 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n+  #343 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n+  #344 = NameAndType        #449:#450     // write:(I)V\n+  #345 = Utf8               Failed to read Paxheader. Encountered a non-number while reading length\n+  #346 = NameAndType        #219:#217     // parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+  #347 = NameAndType        #451:#379     // getMessage:()Ljava/lang/String;\n+  #348 = NameAndType        #160:#452     // \"<init>\":(Ljava/lang/String;Ljava/io/IOException;)V\n+  #349 = Utf8               ,\n+  #350 = NameAndType        #453:#454     // split:(Ljava/lang/String;)[Ljava/lang/String;\n+  #351 = Utf8               Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n+  #352 = Utf8               Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n+  #353 = Utf8               Corrupted TAR archive. Sparse struct offset contains negative value\n+  #354 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n+  #355 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains negative value\n+  #356 = NameAndType        #225:#226     // readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+  #357 = Utf8               Corrupted TAR archive. Negative value in sparse headers block\n+  #358 = Utf8               Corrupted TAR archive. Sparse header block offset contains negative value\n+  #359 = Utf8               Corrupted TAR archive. Sparse header block numbytes contains negative value\n+  #360 = NameAndType        #455:#456     // skip:(Ljava/io/InputStream;J)J\n+  #361 = Utf8               Unexpected EOF when reading parse information of 1.X PAX format\n+  #362 = Utf8               Corrupted TAR archive. Non-numeric value in sparse headers block\n+  #363 = Class              #457          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #364 = NameAndType        #458:#459     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #365 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils$1\n+  #366 = Utf8               java/lang/Object\n+  #367 = Utf8               [B\n+  #368 = Utf8               java/util/List\n+  #369 = Utf8               java/nio/ByteBuffer\n+  #370 = Utf8               java/util/Map\n+  #371 = Utf8               java/lang/Long\n+  #372 = Utf8               java/io/InputStream\n+  #373 = Utf8               [Ljava/lang/String;\n+  #374 = Utf8               [J\n+  #375 = Utf8               append\n+  #376 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #377 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #378 = Utf8               toString\n+  #379 = Utf8               ()Ljava/lang/String;\n+  #380 = Utf8               (Ljava/lang/String;)V\n+  #381 = Utf8               java/lang/Math\n+  #382 = Utf8               pow\n+  #383 = Utf8               (DD)D\n+  #384 = Utf8               java/lang/System\n+  #385 = Utf8               arraycopy\n+  #386 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #387 = Utf8               ([B)V\n+  #388 = Utf8               valueOf\n+  #389 = Utf8               (J)Ljava/math/BigInteger;\n+  #390 = Utf8               add\n+  #391 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #392 = Utf8               not\n+  #393 = Utf8               ()Ljava/math/BigInteger;\n+  #394 = Utf8               bitLength\n+  #395 = Utf8               ()I\n+  #396 = Utf8               longValue\n+  #397 = Utf8               ()J\n+  #398 = Utf8               java/nio/charset/Charset\n+  #399 = Utf8               defaultCharset\n+  #400 = Utf8               ()Ljava/nio/charset/Charset;\n+  #401 = Utf8               ([BIILjava/nio/charset/Charset;)V\n+  #402 = Utf8               replace\n+  #403 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+  #404 = Utf8               (Ljava/io/IOException;)V\n+  #405 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #406 = Utf8               decode\n+  #407 = Utf8               ([B)Ljava/lang/String;\n+  #408 = Utf8               (JJ)V\n+  #409 = Utf8               getOffset\n+  #410 = Utf8               getNumbytes\n+  #411 = Utf8               (Ljava/lang/Object;)Z\n+  #412 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #413 = Utf8               java/util/Collections\n+  #414 = Utf8               unmodifiableList\n+  #415 = Utf8               (Ljava/util/List;)Ljava/util/List;\n+  #416 = Utf8               length\n+  #417 = Utf8               encode\n+  #418 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #419 = Utf8               limit\n+  #420 = Utf8               substring\n+  #421 = Utf8               (II)Ljava/lang/String;\n+  #422 = Utf8               position\n+  #423 = Utf8               array\n+  #424 = Utf8               ()[B\n+  #425 = Utf8               arrayOffset\n+  #426 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #427 = Utf8               toOctalString\n+  #428 = Utf8               (J)Ljava/lang/String;\n+  #429 = Utf8               abs\n+  #430 = Utf8               (J)J\n+  #431 = Utf8               toByteArray\n+  #432 = Utf8               (Ljava/util/Map;)V\n+  #433 = Utf8               read\n+  #434 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #435 = Utf8               remove\n+  #436 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #437 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #438 = Utf8               readRange\n+  #439 = Utf8               (Ljava/io/InputStream;I)[B\n+  #440 = Utf8               java/nio/charset/StandardCharsets\n+  #441 = Utf8               UTF_8\n+  #442 = Utf8               Ljava/nio/charset/Charset;\n+  #443 = Utf8               put\n+  #444 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #445 = Utf8               equals\n+  #446 = Utf8               (Ljava/lang/String;)Ljava/lang/Long;\n+  #447 = Utf8               parseLong\n+  #448 = Utf8               (Ljava/lang/String;)J\n+  #449 = Utf8               write\n+  #450 = Utf8               (I)V\n+  #451 = Utf8               getMessage\n+  #452 = Utf8               (Ljava/lang/String;Ljava/io/IOException;)V\n+  #453 = Utf8               split\n+  #454 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n+  #455 = Utf8               skip\n+  #456 = Utf8               (Ljava/io/InputStream;J)J\n+  #457 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #458 = Utf8               getZipEncoding\n+  #459 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n {\n   private static final int BYTE_MASK = 255;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 255\n \n   static final org.apache.commons.compress.archivers.zip.ZipEncoding DEFAULT_ENCODING;\n@@ -1163,15 +1151,15 @@\n           locals = [ class \"[B\", int, int, class java/util/List, int ]\n           stack = [ class java/lang/IllegalArgumentException ]\n         frame_type = 13 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 5\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #190                         // ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #186                         // ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   public static int formatNameBytes(java.lang.String, byte[], int, int);\n     descriptor: (Ljava/lang/String;[BII)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=6, args_size=4\n          0: aload_0\n@@ -1957,17 +1945,17 @@\n          6: invokestatic  #97                 // Method parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n          9: areturn\n       LineNumberTable:\n         line 694: 0\n     Exceptions:\n       throws java.io.IOException\n     Deprecated: true\n-    Signature: #213                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #208                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n     RuntimeVisibleAnnotations:\n-      0: #215()\n+      0: #210()\n         java.lang.Deprecated\n \n   protected static java.util.Map<java.lang.String, java.lang.String> parsePaxHeaders(java.io.InputStream, java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>, java.util.Map<java.lang.String, java.lang.String>, long) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=7, locals=20, args_size=4\n@@ -2367,15 +2355,15 @@\n         frame_type = 19 /* same */\n         frame_type = 248 /* chop */\n           offset_delta = 8\n         frame_type = 2 /* same */\n         frame_type = 24 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #222                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #215                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n \n   protected static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parsePAX01SparseHeaders(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/util/List;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n@@ -2396,17 +2384,17 @@\n         line 856: 0\n         line 857: 5\n         line 858: 6\n       StackMapTable: number_of_entries = 1\n         frame_type = 69 /* same_locals_1_stack_item */\n           stack = [ class java/io/IOException ]\n     Deprecated: true\n-    Signature: #225                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #218                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n     RuntimeVisibleAnnotations:\n-      0: #215()\n+      0: #210()\n         java.lang.Deprecated\n \n   protected static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parseFromPAX01SparseHeaders(java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;)Ljava/util/List;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=7, locals=9, args_size=1\n@@ -2536,15 +2524,15 @@\n           offset_delta = 11\n           locals = [ long ]\n         frame_type = 16 /* same */\n         frame_type = 248 /* chop */\n           offset_delta = 23\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #225                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #218                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   protected static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parsePAX1XSparseHeaders(java.io.InputStream, int) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;I)Ljava/util/List;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=7, locals=12, args_size=2\n          0: new           #55                 // class java/util/ArrayList\n@@ -2686,15 +2674,15 @@\n         frame_type = 252 /* append */\n           offset_delta = 35\n           locals = [ long ]\n         frame_type = 249 /* chop */\n           offset_delta = 27\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #231                         // (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #224                         // (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   private static long[] readLineOfNumberForPax1X(java.io.InputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;)[J\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=6, args_size=1\n          0: lconst_0\n@@ -2797,8 +2785,8 @@\n       LineNumberTable:\n         line 55: 0\n         line 56: 1\n         line 62: 7\n }\n SourceFile: \"TarUtils.java\"\n InnerClasses:\n-  static #149;                            // class org/apache/commons/compress/archivers/tar/TarUtils$1\n+  #149;                                   // class org/apache/commons/compress/archivers/tar/TarUtils$1\n"}]}
