{"diffoscope-json-version": 1, "source1": "first/FileSystemUtils.class", "source2": "second/FileSystemUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -25,240 +25,233 @@\n     private static final int WINDOWS = 1;\n     private static final int UNIX = 2;\n     private static final int POSIX_UNIX = 3;\n     private static final int OS;\n     private static final String DF;\n     \n     @Deprecated\n-    public static long freeSpace(final String path) throws IOException {\n-        return FileSystemUtils.INSTANCE.freeSpaceOS(path, FileSystemUtils.OS, false, Duration.ofMillis(-1L));\n+    public static long freeSpace(final String s) throws IOException {\n+        return FileSystemUtils.INSTANCE.freeSpaceOS(s, FileSystemUtils.OS, false, Duration.ofMillis(-1L));\n     }\n     \n     @Deprecated\n-    public static long freeSpaceKb(final String path) throws IOException {\n-        return freeSpaceKb(path, -1L);\n+    public static long freeSpaceKb(final String s) throws IOException {\n+        return freeSpaceKb(s, -1L);\n     }\n     \n     @Deprecated\n-    public static long freeSpaceKb(final String path, final long timeout) throws IOException {\n-        return FileSystemUtils.INSTANCE.freeSpaceOS(path, FileSystemUtils.OS, true, Duration.ofMillis(timeout));\n+    public static long freeSpaceKb(final String s, final long millis) throws IOException {\n+        return FileSystemUtils.INSTANCE.freeSpaceOS(s, FileSystemUtils.OS, true, Duration.ofMillis(millis));\n     }\n     \n     @Deprecated\n     public static long freeSpaceKb() throws IOException {\n         return freeSpaceKb(-1L);\n     }\n     \n     @Deprecated\n-    public static long freeSpaceKb(final long timeout) throws IOException {\n-        return freeSpaceKb(new File(\".\").getAbsolutePath(), timeout);\n+    public static long freeSpaceKb(final long n) throws IOException {\n+        return freeSpaceKb(new File(\".\").getAbsolutePath(), n);\n     }\n     \n-    long freeSpaceOS(final String path, final int os, final boolean kb, final Duration timeout) throws IOException {\n-        if (path == null) {\n+    long freeSpaceOS(final String s, final int n, final boolean b, final Duration duration) throws IOException {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"Path must not be null\");\n         }\n-        switch (os) {\n+        switch (n) {\n             case 1: {\n-                return kb ? (this.freeSpaceWindows(path, timeout) / 1024L) : this.freeSpaceWindows(path, timeout);\n+                return b ? (this.freeSpaceWindows(s, duration) / 1024L) : this.freeSpaceWindows(s, duration);\n             }\n             case 2: {\n-                return this.freeSpaceUnix(path, kb, false, timeout);\n+                return this.freeSpaceUnix(s, b, false, duration);\n             }\n             case 3: {\n-                return this.freeSpaceUnix(path, kb, true, timeout);\n+                return this.freeSpaceUnix(s, b, true, duration);\n             }\n             case 0: {\n                 throw new IllegalStateException(\"Unsupported operating system\");\n             }\n             default: {\n                 throw new IllegalStateException(\"Exception caught when determining operating system\");\n             }\n         }\n     }\n     \n-    long freeSpaceWindows(final String path, final Duration timeout) throws IOException {\n-        String normPath = FilenameUtils.normalize(path, false);\n-        if (normPath == null) {\n-            throw new IllegalArgumentException(path);\n-        }\n-        if (!normPath.isEmpty() && normPath.charAt(0) != '\\\"') {\n-            normPath = \"\\\"\" + normPath + \"\\\"\";\n-        }\n-        final String[] cmdAttribs = { \"cmd.exe\", \"/C\", \"dir /a /-c \" + normPath };\n-        final List<String> lines = this.performCommand(cmdAttribs, Integer.MAX_VALUE, timeout);\n-        for (int i = lines.size() - 1; i >= 0; --i) {\n-            final String line = (String)lines.get(i);\n-            if (!line.isEmpty()) {\n-                return this.parseDir(line, normPath);\n-            }\n-        }\n-        throw new IOException(\"Command line 'dir /-c' did not return any info for path '\" + normPath + \"'\");\n-    }\n-    \n-    long parseDir(final String line, final String path) throws IOException {\n-        int bytesStart = 0;\n-        int bytesEnd = 0;\n-        int j;\n-        for (j = line.length() - 1; j >= 0; --j) {\n-            final char c = line.charAt(j);\n-            if (Character.isDigit(c)) {\n-                bytesEnd = j + 1;\n+    long freeSpaceWindows(final String s, final Duration duration) throws IOException {\n+        String str = FilenameUtils.normalize(s, false);\n+        if (str == null) {\n+            throw new IllegalArgumentException(s);\n+        }\n+        if (!str.isEmpty() && str.charAt(0) != '\\\"') {\n+            str = \"\\\"\" + str + \"\\\"\";\n+        }\n+        final List<String> performCommand = this.performCommand(new String[] { \"cmd.exe\", \"/C\", \"dir /a /-c \" + str }, Integer.MAX_VALUE, duration);\n+        for (int i = performCommand.size() - 1; i >= 0; --i) {\n+            final String s2 = (String)performCommand.get(i);\n+            if (!s2.isEmpty()) {\n+                return this.parseDir(s2, str);\n+            }\n+        }\n+        throw new IOException(\"Command line 'dir /-c' did not return any info for path '\" + str + \"'\");\n+    }\n+    \n+    long parseDir(final String s, final String str) throws IOException {\n+        int beginIndex = 0;\n+        int endIndex = 0;\n+        int i;\n+        for (i = s.length() - 1; i >= 0; --i) {\n+            if (Character.isDigit(s.charAt(i))) {\n+                endIndex = i + 1;\n                 break;\n             }\n         }\n-        while (j >= 0) {\n-            final char c = line.charAt(j);\n-            if (!Character.isDigit(c) && c != ',' && c != '.') {\n-                bytesStart = j + 1;\n+        while (i >= 0) {\n+            final char char1 = s.charAt(i);\n+            if (!Character.isDigit(char1) && char1 != ',' && char1 != '.') {\n+                beginIndex = i + 1;\n                 break;\n             }\n-            --j;\n+            --i;\n         }\n-        if (j < 0) {\n-            throw new IOException(\"Command line 'dir /-c' did not return valid info for path '\" + path + \"'\");\n+        if (i < 0) {\n+            throw new IOException(\"Command line 'dir /-c' did not return valid info for path '\" + str + \"'\");\n         }\n-        final StringBuilder buf = new StringBuilder(line.substring(bytesStart, bytesEnd));\n-        for (int k = 0; k < buf.length(); ++k) {\n-            if (buf.charAt() == ',' || buf.charAt() == '.') {\n-                buf.deleteCharAt(k--);\n+        final StringBuilder sb = new StringBuilder(s.substring(beginIndex, endIndex));\n+        for (int j = 0; j < sb.length(); ++j) {\n+            if (sb.charAt() == ',' || sb.charAt() == '.') {\n+                sb.deleteCharAt(j--);\n             }\n         }\n-        return this.parseBytes(buf.toString(), path);\n+        return this.parseBytes(sb.toString(), str);\n     }\n     \n-    long freeSpaceUnix(final String path, final boolean kb, final boolean posix, final Duration timeout) throws IOException {\n-        if (path.isEmpty()) {\n+    long freeSpaceUnix(final String s, final boolean b, final boolean b2, final Duration duration) throws IOException {\n+        if (s.isEmpty()) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n-        String flags = \"-\";\n-        if (kb) {\n-            flags += \"k\";\n-        }\n-        if (posix) {\n-            flags += \"P\";\n-        }\n-        final String[] cmdAttribs = (flags.length() > 1) ? new String[] { FileSystemUtils.DF, flags, path } : new String[] { FileSystemUtils.DF, path };\n-        final List<String> lines = this.performCommand(cmdAttribs, 3, timeout);\n-        if (lines.size() < 2) {\n-            throw new IOException(\"Command line '\" + FileSystemUtils.DF + \"' did not return info as expected for path '\" + path + \"'- response was \" + lines);\n-        }\n-        final String line2 = (String)lines.get(1);\n-        StringTokenizer tok = new StringTokenizer(line2, \" \");\n-        if (tok.countTokens() < 4) {\n-            if (tok.countTokens() != 1 || lines.size() < 3) {\n-                throw new IOException(\"Command line '\" + FileSystemUtils.DF + \"' did not return data as expected for path '\" + path + \"'- check path is valid\");\n+        String s2 = \"-\";\n+        if (b) {\n+            s2 += \"k\";\n+        }\n+        if (b2) {\n+            s2 += \"P\";\n+        }\n+        final List<String> performCommand = this.performCommand((s2.length() > 1) ? new String[] { FileSystemUtils.DF, s2, s } : new String[] { FileSystemUtils.DF, s }, 3, duration);\n+        if (performCommand.size() < 2) {\n+            throw new IOException(\"Command line '\" + FileSystemUtils.DF + \"' did not return info as expected for path '\" + s + \"'- response was \" + performCommand);\n+        }\n+        StringTokenizer stringTokenizer = new StringTokenizer(performCommand.get(1), \" \");\n+        if (stringTokenizer.countTokens() < 4) {\n+            if (stringTokenizer.countTokens() != 1 || performCommand.size() < 3) {\n+                throw new IOException(\"Command line '\" + FileSystemUtils.DF + \"' did not return data as expected for path '\" + s + \"'- check path is valid\");\n             }\n-            final String line3 = (String)lines.get(2);\n-            tok = new StringTokenizer(line3, \" \");\n+            stringTokenizer = new StringTokenizer(performCommand.get(2), \" \");\n         }\n         else {\n-            tok.nextToken();\n+            stringTokenizer.nextToken();\n         }\n-        tok.nextToken();\n-        tok.nextToken();\n-        final String freeSpace = tok.nextToken();\n-        return this.parseBytes(freeSpace, path);\n+        stringTokenizer.nextToken();\n+        stringTokenizer.nextToken();\n+        return this.parseBytes(stringTokenizer.nextToken(), s);\n     }\n     \n-    long parseBytes(final String freeSpace, final String path) throws IOException {\n+    long parseBytes(final String s, final String s2) throws IOException {\n         try {\n-            final long bytes = Long.parseLong(freeSpace);\n-            if (bytes < 0L) {\n-                throw new IOException(\"Command line '\" + FileSystemUtils.DF + \"' did not find free space in response for path '\" + path + \"'- check path is valid\");\n+            final long long1 = Long.parseLong(s);\n+            if (long1 < 0L) {\n+                throw new IOException(\"Command line '\" + FileSystemUtils.DF + \"' did not find free space in response for path '\" + s2 + \"'- check path is valid\");\n             }\n-            return bytes;\n+            return long1;\n         }\n-        catch (final NumberFormatException ex) {\n-            throw new IOException(\"Command line '\" + FileSystemUtils.DF + \"' did not return numeric data as expected for path '\" + path + \"'- check path is valid\", ex);\n+        catch (final NumberFormatException cause) {\n+            throw new IOException(\"Command line '\" + FileSystemUtils.DF + \"' did not return numeric data as expected for path '\" + s2 + \"'- check path is valid\", cause);\n         }\n     }\n     \n-    List<String> performCommand(final String[] cmdAttribs, final int max, final Duration timeout) throws IOException {\n-        final List<String> lines = new ArrayList<String>(20);\n-        Process proc = null;\n-        InputStream in = null;\n-        OutputStream out = null;\n-        InputStream err = null;\n-        BufferedReader inr = null;\n+    List<String> performCommand(final String[] a, final int n, final Duration obj) throws IOException {\n+        final ArrayList list = new ArrayList(20);\n+        Process openProcess = null;\n+        InputStream inputStream = null;\n+        OutputStream outputStream = null;\n+        InputStream errorStream = null;\n+        BufferedReader bufferedReader = null;\n         try {\n-            final Thread monitor = ThreadMonitor.start(timeout);\n-            proc = this.openProcess(cmdAttribs);\n-            in = proc.getInputStream();\n-            out = proc.getOutputStream();\n-            err = proc.getErrorStream();\n-            inr = new BufferedReader(new InputStreamReader(in, Charset.defaultCharset()));\n-            for (String line = inr.readLine(); line != null && lines.size() < max; line = inr.readLine()) {\n-                line = line.toLowerCase(Locale.ENGLISH).trim();\n-                lines.add(line);\n-            }\n-            proc.waitFor();\n-            ThreadMonitor.stop(monitor);\n-            if (proc.exitValue() != 0) {\n-                throw new IOException(\"Command line returned OS error code '\" + proc.exitValue() + \"' for command \" + Arrays.asList(cmdAttribs));\n-            }\n-            if (lines.isEmpty()) {\n-                throw new IOException(\"Command line did not return any info for command \" + Arrays.asList(cmdAttribs));\n-            }\n-            inr.close();\n-            inr = null;\n-            in.close();\n-            in = null;\n-            if (out != null) {\n-                out.close();\n-                out = null;\n-            }\n-            if (err != null) {\n-                err.close();\n-                err = null;\n+            final Thread start = ThreadMonitor.start(obj);\n+            openProcess = this.openProcess(a);\n+            inputStream = openProcess.getInputStream();\n+            outputStream = openProcess.getOutputStream();\n+            errorStream = openProcess.getErrorStream();\n+            bufferedReader = new BufferedReader(new InputStreamReader(inputStream, Charset.defaultCharset()));\n+            for (String s = bufferedReader.readLine(); s != null && list.size() < n; s = bufferedReader.readLine()) {\n+                list.add(s.toLowerCase(Locale.ENGLISH).trim());\n+            }\n+            openProcess.waitFor();\n+            ThreadMonitor.stop(start);\n+            if (openProcess.exitValue() != 0) {\n+                throw new IOException(\"Command line returned OS error code '\" + openProcess.exitValue() + \"' for command \" + Arrays.asList(a));\n+            }\n+            if (list.isEmpty()) {\n+                throw new IOException(\"Command line did not return any info for command \" + Arrays.asList(a));\n+            }\n+            bufferedReader.close();\n+            bufferedReader = null;\n+            inputStream.close();\n+            inputStream = null;\n+            if (outputStream != null) {\n+                outputStream.close();\n+                outputStream = null;\n+            }\n+            if (errorStream != null) {\n+                errorStream.close();\n+                errorStream = null;\n             }\n-            return lines;\n+            return list;\n         }\n-        catch (final InterruptedException ex) {\n-            throw new IOException(\"Command line threw an InterruptedException for command \" + Arrays.asList(cmdAttribs) + \" timeout=\" + timeout, ex);\n+        catch (final InterruptedException cause) {\n+            throw new IOException(\"Command line threw an InterruptedException for command \" + Arrays.asList(a) + \" timeout=\" + obj, cause);\n         }\n         finally {\n-            IOUtils.closeQuietly(in);\n-            IOUtils.closeQuietly(out);\n-            IOUtils.closeQuietly(err);\n-            IOUtils.closeQuietly((Reader)inr);\n-            if (proc != null) {\n-                proc.destroy();\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            IOUtils.closeQuietly(errorStream);\n+            IOUtils.closeQuietly((Reader)bufferedReader);\n+            if (openProcess != null) {\n+                openProcess.destroy();\n             }\n         }\n     }\n     \n-    Process openProcess(final String[] cmdAttribs) throws IOException {\n-        return Runtime.getRuntime().exec(cmdAttribs);\n+    Process openProcess(final String[] cmdarray) throws IOException {\n+        return Runtime.getRuntime().exec(cmdarray);\n     }\n     \n     static {\n         INSTANCE = new FileSystemUtils();\n         int os = 0;\n-        String dfPath = \"df\";\n+        String df = \"df\";\n         try {\n-            String osName = System.getProperty(\"os.name\");\n-            if (osName == null) {\n+            final String property = System.getProperty(\"os.name\");\n+            if (property == null) {\n                 throw new IOException(\"os.name not found\");\n             }\n-            osName = osName.toLowerCase(Locale.ENGLISH);\n-            if (osName.contains(\"windows\")) {\n+            final String lowerCase = property.toLowerCase(Locale.ENGLISH);\n+            if (lowerCase.contains(\"windows\")) {\n                 os = 1;\n             }\n-            else if (osName.contains(\"linux\") || osName.contains(\"mpe/ix\") || osName.contains(\"freebsd\") || osName.contains(\"openbsd\") || osName.contains(\"irix\") || osName.contains(\"digital unix\") || osName.contains(\"unix\") || osName.contains(\"mac os x\")) {\n+            else if (lowerCase.contains(\"linux\") || lowerCase.contains(\"mpe/ix\") || lowerCase.contains(\"freebsd\") || lowerCase.contains(\"openbsd\") || lowerCase.contains(\"irix\") || lowerCase.contains(\"digital unix\") || lowerCase.contains(\"unix\") || lowerCase.contains(\"mac os x\")) {\n                 os = 2;\n             }\n-            else if (osName.contains(\"sun os\") || osName.contains(\"sunos\") || osName.contains(\"solaris\")) {\n+            else if (lowerCase.contains(\"sun os\") || lowerCase.contains(\"sunos\") || lowerCase.contains(\"solaris\")) {\n                 os = 3;\n-                dfPath = \"/usr/xpg4/bin/df\";\n+                df = \"/usr/xpg4/bin/df\";\n             }\n-            else if (osName.contains(\"hp-ux\") || osName.contains(\"aix\")) {\n+            else if (lowerCase.contains(\"hp-ux\") || lowerCase.contains(\"aix\")) {\n                 os = 3;\n             }\n         }\n         catch (final Exception ex) {\n             os = -1;\n         }\n         OS = os;\n-        DF = dfPath;\n+        DF = df;\n     }\n }\n"}]}
