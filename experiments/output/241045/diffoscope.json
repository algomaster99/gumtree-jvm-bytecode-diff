{"diffoscope-json-version": 1, "source1": "first/TimeStamp.class", "source2": "second/TimeStamp.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,20 +18,20 @@\n     private DateFormat simpleFormatter;\n     private DateFormat utcFormatter;\n     \n     public TimeStamp(final long ntpTime) {\n         this.ntpTime = ntpTime;\n     }\n     \n-    public TimeStamp(final String hexStamp) throws NumberFormatException {\n-        this.ntpTime = decodeNtpHexString(hexStamp);\n+    public TimeStamp(final String s) throws NumberFormatException {\n+        this.ntpTime = decodeNtpHexString(s);\n     }\n     \n-    public TimeStamp(final Date d) {\n-        this.ntpTime = ((d == null) ? 0L : toNtpTime(d.getTime()));\n+    public TimeStamp(final Date date) {\n+        this.ntpTime = ((date == null) ? 0L : toNtpTime(date.getTime()));\n     }\n     \n     public long ntpValue() {\n         return this.ntpTime;\n     }\n     \n     public long getSeconds() {\n@@ -46,115 +46,111 @@\n         return getTime(this.ntpTime);\n     }\n     \n     public Date getDate() {\n         return new Date(getTime(this.ntpTime));\n     }\n     \n-    public static long getTime(final long ntpTimeValue) {\n-        final long seconds = ntpTimeValue >>> 32 & 0xFFFFFFFFL;\n-        long fraction = ntpTimeValue & 0xFFFFFFFFL;\n-        fraction = Math.round(1000.0 * fraction / 4.294967296E9);\n-        final long msb = seconds & 0x80000000L;\n-        if (msb == 0L) {\n-            return 2085978496000L + seconds * 1000L + fraction;\n+    public static long getTime(final long n) {\n+        final long n2 = n >>> 32 & 0xFFFFFFFFL;\n+        final long round = Math.round(1000.0 * (n & 0xFFFFFFFFL) / 4.294967296E9);\n+        if ((n2 & 0x80000000L) == 0x0L) {\n+            return 2085978496000L + n2 * 1000L + round;\n         }\n-        return -2208988800000L + seconds * 1000L + fraction;\n+        return -2208988800000L + n2 * 1000L + round;\n     }\n     \n-    public static TimeStamp getNtpTime(final long dateMillis) {\n-        return new TimeStamp(toNtpTime(dateMillis));\n+    public static TimeStamp getNtpTime(final long n) {\n+        return new TimeStamp(toNtpTime(n));\n     }\n     \n     public static TimeStamp getCurrentTime() {\n         return getNtpTime(System.currentTimeMillis());\n     }\n     \n-    protected static long decodeNtpHexString(final String hexString) throws NumberFormatException {\n-        if (hexString == null) {\n+    protected static long decodeNtpHexString(final String s) throws NumberFormatException {\n+        if (s == null) {\n             throw new NumberFormatException(\"null\");\n         }\n-        final int ind = hexString.indexOf(46);\n-        if (ind != -1) {\n-            return Long.parseLong(hexString.substring(0, ind), 16) << 32 | Long.parseLong(hexString.substring(ind + 1), 16);\n+        final int index = s.indexOf(46);\n+        if (index != -1) {\n+            return Long.parseLong(s.substring(0, index), 16) << 32 | Long.parseLong(s.substring(index + 1), 16);\n         }\n-        if (hexString.isEmpty()) {\n+        if (s.isEmpty()) {\n             return 0L;\n         }\n-        return Long.parseLong(hexString, 16) << 32;\n+        return Long.parseLong(s, 16) << 32;\n     }\n     \n     public static TimeStamp parseNtpString(final String s) throws NumberFormatException {\n         return new TimeStamp(decodeNtpHexString(s));\n     }\n     \n-    protected static long toNtpTime(final long millis) {\n-        final boolean useBase1 = millis < 2085978496000L;\n-        long baseTimeMillis;\n-        if (useBase1) {\n-            baseTimeMillis = millis + 2208988800000L;\n+    protected static long toNtpTime(final long n) {\n+        final boolean b = n < 2085978496000L;\n+        long n2;\n+        if (b) {\n+            n2 = n + 2208988800000L;\n         }\n         else {\n-            baseTimeMillis = millis - 2085978496000L;\n+            n2 = n - 2085978496000L;\n         }\n-        long seconds = baseTimeMillis / 1000L;\n-        final long fraction = baseTimeMillis % 1000L * 4294967296L / 1000L;\n-        if (useBase1) {\n-            seconds |= 0x80000000L;\n+        long n3 = n2 / 1000L;\n+        final long n4 = n2 % 1000L * 4294967296L / 1000L;\n+        if (b) {\n+            n3 |= 0x80000000L;\n         }\n-        return seconds << 32 | fraction;\n+        return n3 << 32 | n4;\n     }\n     \n     @Override\n     public int hashCode() {\n         return (int)(this.ntpTime ^ this.ntpTime >>> 32);\n     }\n     \n     @Override\n-    public boolean equals(final Object obj) {\n-        return obj instanceof TimeStamp && this.ntpTime == ((TimeStamp)obj).ntpValue();\n+    public boolean equals(final Object o) {\n+        return o instanceof TimeStamp && this.ntpTime == ((TimeStamp)o).ntpValue();\n     }\n     \n     @Override\n     public String toString() {\n         return toString(this.ntpTime);\n     }\n     \n-    private static void appendHexString(final StringBuilder buf, final long l) {\n-        final String s = Long.toHexString(l);\n-        for (int i = s.length(); i < 8; ++i) {\n-            buf.append('0');\n-        }\n-        buf.append(s);\n+    private static void appendHexString(final StringBuilder sb, final long i) {\n+        final String hexString = Long.toHexString(i);\n+        for (int j = hexString.length(); j < 8; ++j) {\n+            sb.append('0');\n+        }\n+        sb.append(hexString);\n     }\n     \n-    public static String toString(final long ntpTime) {\n-        final StringBuilder buf = new StringBuilder();\n-        appendHexString(buf, ntpTime >>> 32 & 0xFFFFFFFFL);\n-        buf.append('.');\n-        appendHexString(buf, ntpTime & 0xFFFFFFFFL);\n-        return buf.toString();\n+    public static String toString(final long n) {\n+        final StringBuilder sb = new StringBuilder();\n+        appendHexString(sb, n >>> 32 & 0xFFFFFFFFL);\n+        sb.append('.');\n+        appendHexString(sb, n & 0xFFFFFFFFL);\n+        return sb.toString();\n     }\n     \n     public String toDateString() {\n         if (this.simpleFormatter == null) {\n             (this.simpleFormatter = new SimpleDateFormat(\"EEE, MMM dd yyyy HH:mm:ss.SSS\", Locale.US)).setTimeZone(TimeZone.getDefault());\n         }\n-        final Date ntpDate = this.getDate();\n-        return this.simpleFormatter.format(ntpDate);\n+        return this.simpleFormatter.format(this.getDate());\n     }\n     \n     public String toUTCString() {\n         if (this.utcFormatter == null) {\n             (this.utcFormatter = new SimpleDateFormat(\"EEE, MMM dd yyyy HH:mm:ss.SSS 'UTC'\", Locale.US)).setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n         }\n-        final Date ntpDate = this.getDate();\n-        return this.utcFormatter.format(ntpDate);\n+        return this.utcFormatter.format(this.getDate());\n     }\n     \n     @Override\n-    public int compareTo(final TimeStamp anotherTimeStamp) {\n-        final long thisVal = this.ntpTime;\n-        final long anotherVal = anotherTimeStamp.ntpTime;\n-        return (thisVal < anotherVal) ? -1 : ((thisVal == anotherVal) ? 0 : 1);\n+    public int compareTo(final TimeStamp timeStamp) {\n+        final long ntpTime = this.ntpTime;\n+        final long ntpTime2 = timeStamp.ntpTime;\n+        return (ntpTime < ntpTime2) ? -1 : ((ntpTime == ntpTime2) ? false : true);\n     }\n }\n"}]}
