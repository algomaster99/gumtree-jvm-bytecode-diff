{"diffoscope-json-version": 1, "source1": "first/SimplePathVisitor.class", "source2": "second/SimplePathVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,19 +9,19 @@\n import java.nio.file.SimpleFileVisitor;\n \n public abstract class SimplePathVisitor extends SimpleFileVisitor<Path> implements PathVisitor\n {\n     private final IOBiFunction<Path, IOException, FileVisitResult> visitFileFailedFunction;\n     \n     protected SimplePathVisitor() {\n-        this.visitFileFailedFunction = (IOBiFunction<Path, IOException, FileVisitResult>)((x$0, x$1) -> super.visitFileFailed((Path)x$0, x$1));\n+        this.visitFileFailedFunction = (IOBiFunction<Path, IOException, FileVisitResult>)((file, exc) -> super.visitFileFailed((Path)file, exc));\n     }\n     \n-    protected SimplePathVisitor(final IOBiFunction<Path, IOException, FileVisitResult> visitFileFailed) {\n-        this.visitFileFailedFunction = Objects.requireNonNull(visitFileFailed, \"visitFileFailed\");\n+    protected SimplePathVisitor(final IOBiFunction<Path, IOException, FileVisitResult> obj) {\n+        this.visitFileFailedFunction = Objects.requireNonNull(obj, \"visitFileFailed\");\n     }\n     \n     @Override\n-    public FileVisitResult visitFileFailed(final Path file, final IOException exc) throws IOException {\n-        return (FileVisitResult)this.visitFileFailedFunction.apply((Object)file, (Object)exc);\n+    public FileVisitResult visitFileFailed(final Path path, final IOException ex) throws IOException {\n+        return (FileVisitResult)this.visitFileFailedFunction.apply((Object)path, (Object)ex);\n     }\n }\n"}]}
