{"diffoscope-json-version": 1, "source1": "first/UnusedImportsCheck.class", "source2": "second/UnusedImportsCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,18 +5,18 @@\n import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTag;\n import java.util.ArrayList;\n import com.puppycrawl.tools.checkstyle.api.TextBlock;\n import com.puppycrawl.tools.checkstyle.api.FileContents;\n import java.util.Collection;\n import java.util.regex.Matcher;\n-import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import java.util.HashSet;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import com.puppycrawl.tools.checkstyle.api.FullIdent;\n import java.util.Set;\n import java.util.regex.Pattern;\n import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n \n @FileStatefulCheck\n@@ -29,14 +29,21 @@\n     private static final Pattern JAVA_LANG_PACKAGE_PATTERN;\n     private static final String STAR_IMPORT_SUFFIX = \".*\";\n     private final Set<FullIdent> imports;\n     private boolean collect;\n     private boolean processJavadoc;\n     private UnusedImportsCheck.Frame currentFrame;\n     \n+    static {\n+        CLASS_NAME = CommonUtil.createPattern(\"((:?[\\\\p{L}_$][\\\\p{L}\\\\p{N}_$]*\\\\.)*[\\\\p{L}_$][\\\\p{L}\\\\p{N}_$]*)\");\n+        FIRST_CLASS_NAME = CommonUtil.createPattern(\"^\" + UnusedImportsCheck.CLASS_NAME);\n+        ARGUMENT_NAME = CommonUtil.createPattern(\"[(,]\\\\s*\" + UnusedImportsCheck.CLASS_NAME.pattern());\n+        JAVA_LANG_PACKAGE_PATTERN = CommonUtil.createPattern(\"^java\\\\.lang\\\\.[a-zA-Z]+$\");\n+    }\n+    \n     public UnusedImportsCheck() {\n         this.imports = new HashSet<FullIdent>();\n         this.processJavadoc = true;\n     }\n     \n     public void setProcessJavadoc(final boolean value) {\n         this.processJavadoc = value;\n@@ -146,26 +153,28 @@\n     }\n     \n     private static Set<String> collectReferencesFromJavadoc(final TextBlock textBlock) {\n         final List<JavadocTag> tags = new ArrayList<JavadocTag>();\n         tags.addAll(getValidTags(textBlock, JavadocUtil.JavadocTagType.INLINE));\n         tags.addAll(getValidTags(textBlock, JavadocUtil.JavadocTagType.BLOCK));\n         final Set<String> references = new HashSet<String>();\n-        tags.stream().filter(JavadocTag::canReferenceImports).forEach(tag -> references.addAll(processJavadocTag(tag)));\n+        tags.stream().filter(JavadocTag::canReferenceImports).forEach(tag -> set.addAll(processJavadocTag(tag)));\n         return references;\n     }\n     \n     private static List<JavadocTag> getValidTags(final TextBlock cmt, final JavadocUtil.JavadocTagType tagType) {\n         return JavadocUtil.getJavadocTags(cmt, tagType).getValidTags();\n     }\n     \n     private static Set<String> processJavadocTag(final JavadocTag tag) {\n         final Set<String> references = new HashSet<String>();\n         final String identifier = tag.getFirstArg();\n-        for (final Pattern pattern : new Pattern[] { UnusedImportsCheck.FIRST_CLASS_NAME, UnusedImportsCheck.ARGUMENT_NAME }) {\n+        Pattern[] array;\n+        for (int length = (array = new Pattern[] { UnusedImportsCheck.FIRST_CLASS_NAME, UnusedImportsCheck.ARGUMENT_NAME }).length, i = 0; i < length; ++i) {\n+            final Pattern pattern = array[i];\n             references.addAll(matchPattern(identifier, pattern));\n         }\n         return references;\n     }\n     \n     private static Set<String> matchPattern(final String identifier, final Pattern pattern) {\n         final Set<String> references = new HashSet<String>();\n@@ -183,15 +192,8 @@\n             topLevelType = type;\n         }\n         else {\n             topLevelType = type.substring(0, dotIndex);\n         }\n         return topLevelType;\n     }\n-    \n-    static {\n-        CLASS_NAME = CommonUtil.createPattern(\"((:?[\\\\p{L}_$][\\\\p{L}\\\\p{N}_$]*\\\\.)*[\\\\p{L}_$][\\\\p{L}\\\\p{N}_$]*)\");\n-        FIRST_CLASS_NAME = CommonUtil.createPattern(\"^\" + String.valueOf((Object)UnusedImportsCheck.CLASS_NAME));\n-        ARGUMENT_NAME = CommonUtil.createPattern(\"[(,]\\\\s*\" + UnusedImportsCheck.CLASS_NAME.pattern());\n-        JAVA_LANG_PACKAGE_PATTERN = CommonUtil.createPattern(\"^java\\\\.lang\\\\.[a-zA-Z]+$\");\n-    }\n }\n"}]}
