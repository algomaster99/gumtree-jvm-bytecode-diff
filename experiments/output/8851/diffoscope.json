{"diffoscope-json-version": 1, "source1": "first/InstructionList.class", "source2": "second/InstructionList.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -50,67 +50,56 @@\n         this.append(i);\n     }\n     \n     public InstructionList(final byte[] code) {\n         int count = 0;\n         InstructionHandle[] ihs;\n         int[] pos;\n-        try {\n-            final ByteSequence bytes = new ByteSequence(code);\n-            Throwable x0 = null;\n-            try {\n-                ihs = new InstructionHandle[code.length];\n-                pos = new int[code.length];\n-                while (bytes.available() > 0) {\n-                    final int off = bytes.getIndex();\n-                    pos[count] = off;\n-                    final Instruction i = Instruction.readInstruction(bytes);\n-                    InstructionHandle ih;\n-                    if (i instanceof BranchInstruction) {\n-                        ih = (InstructionHandle)this.append((BranchInstruction)i);\n-                    }\n-                    else {\n-                        ih = this.append(i);\n-                    }\n-                    ih.setPosition(off);\n-                    ihs[count] = ih;\n-                    ++count;\n+        try (final ByteSequence bytes = new ByteSequence(code)) {\n+            ihs = new InstructionHandle[code.length];\n+            pos = new int[code.length];\n+            while (bytes.available() > 0) {\n+                final int off = bytes.getIndex();\n+                pos[count] = off;\n+                final Instruction i = Instruction.readInstruction(bytes);\n+                InstructionHandle ih;\n+                if (i instanceof BranchInstruction) {\n+                    ih = (InstructionHandle)this.append((BranchInstruction)i);\n                 }\n-            }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n-            }\n-            finally {\n-                $closeResource(x0, (AutoCloseable)bytes);\n+                else {\n+                    ih = this.append(i);\n+                }\n+                ih.setPosition(off);\n+                ihs[count] = ih;\n+                ++count;\n             }\n         }\n         catch (final IOException e) {\n             throw new ClassGenException(e.toString(), (Throwable)e);\n         }\n         this.bytePositions = Arrays.copyOf(pos, count);\n         for (int j = 0; j < count; ++j) {\n             if (ihs[j] instanceof BranchHandle) {\n                 final BranchInstruction bi = (BranchInstruction)ihs[j].getInstruction();\n                 int target = bi.getPosition() + bi.getIndex();\n-                InstructionHandle ih2 = findHandle(ihs, pos, count, target);\n-                if (ih2 == null) {\n+                InstructionHandle ih = findHandle(ihs, pos, count, target);\n+                if (ih == null) {\n                     throw new ClassGenException(\"Couldn't find target for branch: \" + bi);\n                 }\n-                bi.setTarget(ih2);\n+                bi.setTarget(ih);\n                 if (bi instanceof Select) {\n                     final Select s = (Select)bi;\n                     final int[] indices = s.getIndices();\n                     for (int k = 0; k < indices.length; ++k) {\n                         target = bi.getPosition() + indices[k];\n-                        ih2 = findHandle(ihs, pos, count, target);\n-                        if (ih2 == null) {\n+                        ih = findHandle(ihs, pos, count, target);\n+                        if (ih == null) {\n                             throw new ClassGenException(\"Couldn't find target for switch: \" + bi);\n                         }\n-                        s.setTarget(k, ih2);\n+                        s.setTarget(k, ih);\n                     }\n                 }\n             }\n         }\n     }\n     \n     public InstructionList(final CompoundInstruction c) {\n@@ -385,28 +374,17 @@\n     \n     public int[] getInstructionPositions() {\n         return this.bytePositions;\n     }\n     \n     public Instruction[] getInstructions() {\n         final List<Instruction> instructions = new ArrayList<Instruction>();\n-        try {\n-            final ByteSequence bytes = new ByteSequence(this.getByteCode());\n-            Throwable x0 = null;\n-            try {\n-                while (bytes.available() > 0) {\n-                    instructions.add(Instruction.readInstruction(bytes));\n-                }\n-            }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n-            }\n-            finally {\n-                $closeResource(x0, (AutoCloseable)bytes);\n+        try (final ByteSequence bytes = new ByteSequence(this.getByteCode())) {\n+            while (bytes.available() > 0) {\n+                instructions.add(Instruction.readInstruction(bytes));\n             }\n         }\n         catch (final IOException e) {\n             throw new ClassGenException(e.toString(), (Throwable)e);\n         }\n         return instructions.toArray(Instruction.EMPTY_ARRAY);\n     }\n@@ -779,22 +757,8 @@\n     public void update() {\n         if (this.observers != null) {\n             for (final InstructionListObserver observer : this.observers) {\n                 observer.notify(this);\n             }\n         }\n     }\n-    \n-    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n-        if (x0 != null) {\n-            try {\n-                x1.close();\n-            }\n-            catch (final Throwable exception) {\n-                x0.addSuppressed(exception);\n-            }\n-        }\n-        else {\n-            x1.close();\n-        }\n-    }\n }\n"}]}
