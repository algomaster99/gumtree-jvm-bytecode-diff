{"diffoscope-json-version": 1, "source1": "first/ReflectionToStringBuilder.class", "source2": "second/ReflectionToStringBuilder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,141 +3,140 @@\n \n import java.lang.reflect.AccessibleObject;\n import java.lang.annotation.Annotation;\n import java.util.Arrays;\n import java.lang.reflect.Modifier;\n import java.lang.reflect.Field;\n import org.apache.commons.lang3.Validate;\n-import java.util.List;\n import java.util.ArrayList;\n import org.apache.commons.lang3.ArrayUtils;\n import java.util.Collection;\n \n public class ReflectionToStringBuilder extends ToStringBuilder\n {\n     private boolean appendStatics;\n     private boolean appendTransients;\n     private boolean excludeNullValues;\n     protected String[] excludeFieldNames;\n     private Class<?> upToClass;\n     \n-    public static String toString(final Object object) {\n-        return toString(object, null, false, false, null);\n+    public static String toString(final Object o) {\n+        return toString(o, null, false, false, null);\n     }\n     \n-    public static String toString(final Object object, final ToStringStyle style) {\n-        return toString(object, style, false, false, null);\n+    public static String toString(final Object o, final ToStringStyle toStringStyle) {\n+        return toString(o, toStringStyle, false, false, null);\n     }\n     \n-    public static String toString(final Object object, final ToStringStyle style, final boolean outputTransients) {\n-        return toString(object, style, outputTransients, false, null);\n+    public static String toString(final Object o, final ToStringStyle toStringStyle, final boolean b) {\n+        return toString(o, toStringStyle, b, false, null);\n     }\n     \n-    public static String toString(final Object object, final ToStringStyle style, final boolean outputTransients, final boolean outputStatics) {\n-        return toString(object, style, outputTransients, outputStatics, null);\n+    public static String toString(final Object o, final ToStringStyle toStringStyle, final boolean b, final boolean b2) {\n+        return toString(o, toStringStyle, b, b2, null);\n     }\n     \n-    public static <T> String toString(final T object, final ToStringStyle style, final boolean outputTransients, final boolean outputStatics, final Class<? super T> reflectUpToClass) {\n-        return new ReflectionToStringBuilder(object, style, (StringBuffer)null, (Class<? super T>)reflectUpToClass, outputTransients, outputStatics).toString();\n+    public static <T> String toString(final T t, final ToStringStyle toStringStyle, final boolean b, final boolean b2, final Class<? super T> clazz) {\n+        return new ReflectionToStringBuilder(t, toStringStyle, (StringBuffer)null, (Class<? super T>)clazz, b, b2).toString();\n     }\n     \n-    public static <T> String toString(final T object, final ToStringStyle style, final boolean outputTransients, final boolean outputStatics, final boolean excludeNullValues, final Class<? super T> reflectUpToClass) {\n-        return new ReflectionToStringBuilder(object, style, (StringBuffer)null, (Class<? super T>)reflectUpToClass, outputTransients, outputStatics, excludeNullValues).toString();\n+    public static <T> String toString(final T t, final ToStringStyle toStringStyle, final boolean b, final boolean b2, final boolean b3, final Class<? super T> clazz) {\n+        return new ReflectionToStringBuilder(t, toStringStyle, (StringBuffer)null, (Class<? super T>)clazz, b, b2, b3).toString();\n     }\n     \n-    public static String toStringExclude(final Object object, final Collection<String> excludeFieldNames) {\n-        return toStringExclude(object, toNoNullStringArray(excludeFieldNames));\n+    public static String toStringExclude(final Object o, final Collection<String> collection) {\n+        return toStringExclude(o, toNoNullStringArray(collection));\n     }\n     \n     static String[] toNoNullStringArray(final Collection<String> collection) {\n         if (collection == null) {\n             return ArrayUtils.EMPTY_STRING_ARRAY;\n         }\n         return toNoNullStringArray(collection.toArray());\n     }\n     \n     static String[] toNoNullStringArray(final Object[] array) {\n-        final List<String> list = new ArrayList<String>(array.length);\n-        for (final Object e : array) {\n-            if (e != null) {\n-                list.add(e.toString());\n+        final ArrayList list = new ArrayList(array.length);\n+        for (final Object o : array) {\n+            if (o != null) {\n+                list.add(o.toString());\n             }\n         }\n-        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\n+        return (String[])list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\n     }\n     \n-    public static String toStringExclude(final Object object, final String... excludeFieldNames) {\n-        return new ReflectionToStringBuilder(object).setExcludeFieldNames(excludeFieldNames).toString();\n+    public static String toStringExclude(final Object o, final String... excludeFieldNames) {\n+        return new ReflectionToStringBuilder(o).setExcludeFieldNames(excludeFieldNames).toString();\n     }\n     \n-    private static Object checkNotNull(final Object obj) {\n-        Validate.isTrue(obj != null, \"The Object passed in should not be null.\", new Object[0]);\n-        return obj;\n+    private static Object checkNotNull(final Object o) {\n+        Validate.isTrue(o != null, \"The Object passed in should not be null.\", new Object[0]);\n+        return o;\n     }\n     \n-    public ReflectionToStringBuilder(final Object object) {\n-        super(checkNotNull(object));\n+    public ReflectionToStringBuilder(final Object o) {\n+        super(checkNotNull(o));\n         this.appendStatics = false;\n         this.appendTransients = false;\n         this.upToClass = null;\n     }\n     \n-    public ReflectionToStringBuilder(final Object object, final ToStringStyle style) {\n-        super(checkNotNull(object), style);\n+    public ReflectionToStringBuilder(final Object o, final ToStringStyle toStringStyle) {\n+        super(checkNotNull(o), toStringStyle);\n         this.appendStatics = false;\n         this.appendTransients = false;\n         this.upToClass = null;\n     }\n     \n-    public ReflectionToStringBuilder(final Object object, final ToStringStyle style, final StringBuffer buffer) {\n-        super(checkNotNull(object), style, buffer);\n+    public ReflectionToStringBuilder(final Object o, final ToStringStyle toStringStyle, final StringBuffer sb) {\n+        super(checkNotNull(o), toStringStyle, sb);\n         this.appendStatics = false;\n         this.appendTransients = false;\n         this.upToClass = null;\n     }\n     \n-    public <T> ReflectionToStringBuilder(final T object, final ToStringStyle style, final StringBuffer buffer, final Class<? super T> reflectUpToClass, final boolean outputTransients, final boolean outputStatics) {\n-        super(checkNotNull((Object)object), style, buffer);\n+    public <T> ReflectionToStringBuilder(final T t, final ToStringStyle toStringStyle, final StringBuffer sb, final Class<? super T> upToClass, final boolean appendTransients, final boolean appendStatics) {\n+        super(checkNotNull((Object)t), toStringStyle, sb);\n         this.appendStatics = false;\n         this.appendTransients = false;\n         this.upToClass = null;\n-        this.setUpToClass(reflectUpToClass);\n-        this.setAppendTransients(outputTransients);\n-        this.setAppendStatics(outputStatics);\n+        this.setUpToClass(upToClass);\n+        this.setAppendTransients(appendTransients);\n+        this.setAppendStatics(appendStatics);\n     }\n     \n-    public <T> ReflectionToStringBuilder(final T object, final ToStringStyle style, final StringBuffer buffer, final Class<? super T> reflectUpToClass, final boolean outputTransients, final boolean outputStatics, final boolean excludeNullValues) {\n-        super(checkNotNull((Object)object), style, buffer);\n+    public <T> ReflectionToStringBuilder(final T t, final ToStringStyle toStringStyle, final StringBuffer sb, final Class<? super T> upToClass, final boolean appendTransients, final boolean appendStatics, final boolean excludeNullValues) {\n+        super(checkNotNull((Object)t), toStringStyle, sb);\n         this.appendStatics = false;\n         this.appendTransients = false;\n         this.upToClass = null;\n-        this.setUpToClass(reflectUpToClass);\n-        this.setAppendTransients(outputTransients);\n-        this.setAppendStatics(outputStatics);\n+        this.setUpToClass(upToClass);\n+        this.setAppendTransients(appendTransients);\n+        this.setAppendStatics(appendStatics);\n         this.setExcludeNullValues(excludeNullValues);\n     }\n     \n     protected boolean accept(final Field field) {\n         return field.getName().indexOf(36) == -1 && (!Modifier.isTransient(field.getModifiers()) || this.isAppendTransients()) && (!Modifier.isStatic(field.getModifiers()) || this.isAppendStatics()) && (this.excludeFieldNames == null || Arrays.binarySearch(this.excludeFieldNames, field.getName()) < 0) && !field.isAnnotationPresent((Class<? extends Annotation>)ToStringExclude.class);\n     }\n     \n     protected void appendFieldsIn(final Class<?> clazz) {\n         if (clazz.isArray()) {\n             this.reflectionAppendArray(this.getObject());\n             return;\n         }\n-        final Field[] fields = clazz.getDeclaredFields();\n-        AccessibleObject.setAccessible(fields, true);\n-        for (final Field field : fields) {\n-            final String fieldName = field.getName();\n+        final Field[] declaredFields = clazz.getDeclaredFields();\n+        AccessibleObject.setAccessible(declaredFields, true);\n+        for (final Field field : declaredFields) {\n+            final String name = field.getName();\n             if (this.accept(field)) {\n                 try {\n-                    final Object fieldValue = this.getValue(field);\n-                    if (!this.excludeNullValues || fieldValue != null) {\n-                        this.append(fieldName, fieldValue, !field.isAnnotationPresent((Class<? extends Annotation>)ToStringSummary.class));\n+                    final Object value = this.getValue(field);\n+                    if (!this.excludeNullValues || value != null) {\n+                        this.append(name, value, !field.isAnnotationPresent((Class<? extends Annotation>)ToStringSummary.class));\n                     }\n                 }\n                 catch (final IllegalAccessException ex) {\n                     throw new InternalError(\"Unexpected IllegalAccessException: \" + ex.getMessage());\n                 }\n             }\n         }\n@@ -163,16 +162,16 @@\n         return this.appendTransients;\n     }\n     \n     public boolean isExcludeNullValues() {\n         return this.excludeNullValues;\n     }\n     \n-    public ReflectionToStringBuilder reflectionAppendArray(final Object array) {\n-        this.getStyle().reflectionAppendArrayDetail(this.getStringBuffer(), (String)null, array);\n+    public ReflectionToStringBuilder reflectionAppendArray(final Object o) {\n+        this.getStyle().reflectionAppendArrayDetail(this.getStringBuffer(), (String)null, o);\n         return this;\n     }\n     \n     public void setAppendStatics(final boolean appendStatics) {\n         this.appendStatics = appendStatics;\n     }\n     \n@@ -180,32 +179,32 @@\n         this.appendTransients = appendTransients;\n     }\n     \n     public void setExcludeNullValues(final boolean excludeNullValues) {\n         this.excludeNullValues = excludeNullValues;\n     }\n     \n-    public ReflectionToStringBuilder setExcludeFieldNames(final String... excludeFieldNamesParam) {\n-        if (excludeFieldNamesParam == null) {\n+    public ReflectionToStringBuilder setExcludeFieldNames(final String... array) {\n+        if (array == null) {\n             this.excludeFieldNames = null;\n         }\n         else {\n-            Arrays.sort(this.excludeFieldNames = toNoNullStringArray(excludeFieldNamesParam));\n+            Arrays.sort(this.excludeFieldNames = toNoNullStringArray(array));\n         }\n         return this;\n     }\n     \n-    public void setUpToClass(final Class<?> clazz) {\n-        if (clazz != null) {\n+    public void setUpToClass(final Class<?> upToClass) {\n+        if (upToClass != null) {\n             final Object object = this.getObject();\n-            if (object != null && !clazz.isInstance(object)) {\n+            if (object != null && !upToClass.isInstance(object)) {\n                 throw new IllegalArgumentException(\"Specified class is not a superclass of the object\");\n             }\n         }\n-        this.upToClass = clazz;\n+        this.upToClass = upToClass;\n     }\n     \n     public String toString() {\n         if (this.getObject() == null) {\n             return this.getStyle().getNullText();\n         }\n         Class<?> clazz = this.getObject().getClass();\n"}]}
