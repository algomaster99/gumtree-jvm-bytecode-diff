{"diffoscope-json-version": 1, "source1": "first/SevenZFile.class", "source2": "second/SevenZFile.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -287,36 +287,27 @@\n         this.readHeader(buf, archive);\n         archive.subStreamsInfo = null;\n         return archive;\n     }\n     \n     private StartHeader readStartHeader(final long startHeaderCrc) throws IOException {\n         final StartHeader startHeader = new StartHeader();\n-        final DataInputStream dataInputStream = new DataInputStream((InputStream)new CRC32VerifyingInputStream((InputStream)new BoundedSeekableByteChannelInputStream(this.channel, 20L), 20L, startHeaderCrc));\n-        Throwable x0 = null;\n-        try {\n+        try (final DataInputStream dataInputStream = new DataInputStream((InputStream)new CRC32VerifyingInputStream((InputStream)new BoundedSeekableByteChannelInputStream(this.channel, 20L), 20L, startHeaderCrc))) {\n             startHeader.nextHeaderOffset = Long.reverseBytes(dataInputStream.readLong());\n             if (startHeader.nextHeaderOffset < 0L || startHeader.nextHeaderOffset + 32L > this.channel.size()) {\n                 throw new IOException(\"nextHeaderOffset is out of bounds\");\n             }\n             startHeader.nextHeaderSize = Long.reverseBytes(dataInputStream.readLong());\n             final long nextHeaderEnd = startHeader.nextHeaderOffset + startHeader.nextHeaderSize;\n             if (nextHeaderEnd < startHeader.nextHeaderOffset || nextHeaderEnd + 32L > this.channel.size()) {\n                 throw new IOException(\"nextHeaderSize is out of bounds\");\n             }\n             startHeader.nextHeaderCrc = (0xFFFFFFFFL & (long)Integer.reverseBytes(dataInputStream.readInt()));\n             return startHeader;\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, dataInputStream);\n-        }\n     }\n     \n     private void readHeader(final ByteBuffer header, final Archive archive) throws IOException {\n         final int pos = header.position();\n         final SevenZFile.ArchiveStatistics stats = this.sanityCheckAndCollectStatistics(header);\n         stats.assertValidity(this.options.getMaxMemoryLimitInKb());\n         header.position(pos);\n@@ -1319,28 +1310,17 @@\n         if (this.archive.files[this.currentEntryIndex].getSize() == 0L) {\n             return new ByteArrayInputStream(ByteUtils.EMPTY_BYTE_ARRAY);\n         }\n         if (this.deferredBlockStreams.isEmpty()) {\n             throw new IllegalStateException(\"No current 7z entry (call getNextEntry() first).\");\n         }\n         while (this.deferredBlockStreams.size() > 1) {\n-            final InputStream stream = (InputStream)this.deferredBlockStreams.remove(0);\n-            Throwable x0 = null;\n-            try {\n+            try (final InputStream stream = (InputStream)this.deferredBlockStreams.remove(0)) {\n                 IOUtils.skip(stream, Long.MAX_VALUE);\n             }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n-            }\n-            finally {\n-                if (stream != null) {\n-                    $closeResource(x0, stream);\n-                }\n-            }\n             this.compressedBytesReadFromCurrentEntry = 0L;\n         }\n         return this.deferredBlockStreams.get(0);\n     }\n     \n     public InputStream getInputStream(final SevenZArchiveEntry entry) throws IOException {\n         int entryIndex = -1;\n@@ -1492,26 +1472,12 @@\n     private static int assertFitsIntoNonNegativeInt(final String what, final long value) throws IOException {\n         if (value > 2147483647L || value < 0L) {\n             throw new IOException(\"Cannot handle \" + what + \" \" + value);\n         }\n         return (int)value;\n     }\n     \n-    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n-        if (x0 != null) {\n-            try {\n-                x1.close();\n-            }\n-            catch (final Throwable exception) {\n-                x0.addSuppressed(exception);\n-            }\n-        }\n-        else {\n-            x1.close();\n-        }\n-    }\n-    \n     static {\n         sevenZSignature = new byte[] { 55, 122, -68, -81, 39, 28 };\n         PASSWORD_ENCODER = StandardCharsets.UTF_16LE.newEncoder();\n     }\n }\n"}]}
