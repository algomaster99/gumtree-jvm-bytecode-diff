{"diffoscope-json-version": 1, "source1": "first/Telnet.class", "source2": "second/Telnet.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -33,14 +33,25 @@\n     private final TelnetOptionHandler[] optionHandlers;\n     static final byte[] COMMAND_AYT;\n     private final Object aytMonitor;\n     private volatile boolean aytFlag;\n     private volatile OutputStream spyStream;\n     private TelnetNotificationHandler notifhand;\n     \n+    static {\n+        COMMAND_DO = new byte[] { -1, -3 };\n+        COMMAND_DONT = new byte[] { -1, -2 };\n+        COMMAND_WILL = new byte[] { -1, -5 };\n+        COMMAND_WONT = new byte[] { -1, -4 };\n+        COMMAND_SB = new byte[] { -1, -6 };\n+        COMMAND_SE = new byte[] { -1, -16 };\n+        COMMAND_IS = new byte[] { 24, 0 };\n+        COMMAND_AYT = new byte[] { -1, -10 };\n+    }\n+    \n     Telnet() {\n         this.aytMonitor = new Object();\n         this.aytFlag = true;\n         this.setDefaultPort(23);\n         this.doResponse = new int[256];\n         this.willResponse = new int[256];\n         this.options = new int[256];\n@@ -307,14 +318,15 @@\n     }\n     \n     final synchronized void processAYTResponse() {\n         if (!this.aytFlag) {\n             synchronized (this.aytMonitor) {\n                 this.aytFlag = true;\n                 this.aytMonitor.notifyAll();\n+                monitorexit(this.aytMonitor);\n             }\n         }\n     }\n     \n     protected void _connectAction_() throws IOException {\n         for (int ii = 0; ii < 256; ++ii) {\n             this.doResponse[ii] = 0;\n@@ -408,27 +420,31 @@\n         this._output_.write(b);\n         this.spyWrite(b);\n     }\n     \n     final boolean _sendAYT(final long timeout) throws IOException, IllegalArgumentException, InterruptedException {\n         boolean retValue = false;\n         synchronized (this.aytMonitor) {\n-            synchronized (this) {\n+            monitorenter(this);\n+            try {\n                 this.aytFlag = false;\n                 this._output_.write(Telnet.COMMAND_AYT);\n                 this._output_.flush();\n+                monitorexit(this);\n             }\n+            finally {}\n             this.aytMonitor.wait(timeout);\n             if (!this.aytFlag) {\n                 retValue = false;\n                 this.aytFlag = true;\n             }\n             else {\n                 retValue = true;\n             }\n+            monitorexit(this.aytMonitor);\n         }\n         return retValue;\n     }\n     \n     void addOptionHandler(final TelnetOptionHandler opthand) throws InvalidTelnetOptionException, IOException {\n         final int optcode = opthand.getOptionCode();\n         if (!TelnetOption.isValidOption(optcode)) {\n@@ -482,47 +498,36 @@\n                     if (ch == 10) {\n                         spy.write(13);\n                     }\n                     spy.write(ch);\n                     spy.flush();\n                 }\n             }\n-            catch (final IOException e) {\n+            catch (final IOException ex) {\n                 this.spyStream = null;\n             }\n         }\n     }\n     \n     void spyWrite(final int ch) {\n         if (!this.stateIsDo(1) || !this.requestedDo(1)) {\n             final OutputStream spy = this.spyStream;\n             if (spy != null) {\n                 try {\n                     spy.write(ch);\n                     spy.flush();\n                 }\n-                catch (final IOException e) {\n+                catch (final IOException ex) {\n                     this.spyStream = null;\n                 }\n             }\n         }\n     }\n     \n     public void registerNotifHandler(final TelnetNotificationHandler notifhand) {\n         this.notifhand = notifhand;\n     }\n     \n     public void unregisterNotifHandler() {\n         this.notifhand = null;\n     }\n-    \n-    static {\n-        COMMAND_DO = new byte[] { -1, -3 };\n-        COMMAND_DONT = new byte[] { -1, -2 };\n-        COMMAND_WILL = new byte[] { -1, -5 };\n-        COMMAND_WONT = new byte[] { -1, -4 };\n-        COMMAND_SB = new byte[] { -1, -6 };\n-        COMMAND_SE = new byte[] { -1, -16 };\n-        COMMAND_IS = new byte[] { 24, 0 };\n-        COMMAND_AYT = new byte[] { -1, -10 };\n-    }\n }\n"}]}
