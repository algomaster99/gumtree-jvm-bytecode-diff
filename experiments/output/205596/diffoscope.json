{"diffoscope-json-version": 1, "source1": "first/CombinedBuilderParametersImpl.class", "source2": "second/CombinedBuilderParametersImpl.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,32 +29,32 @@\n     \n     public CombinedBuilderParametersImpl() {\n         this.providers = new HashMap<String, ConfigurationBuilderProvider>();\n         this.childParameters = new LinkedList<BuilderParameters>();\n         this.inheritSettings = true;\n     }\n     \n-    public static CombinedBuilderParametersImpl fromParameters(final Map<String, ?> params) {\n-        return fromParameters(params, false);\n+    public static CombinedBuilderParametersImpl fromParameters(final Map<String, ?> map) {\n+        return fromParameters(map, false);\n     }\n     \n-    public static CombinedBuilderParametersImpl fromParameters(final Map<String, ?> params, final boolean createIfMissing) {\n-        CombinedBuilderParametersImpl result = (CombinedBuilderParametersImpl)params.get(CombinedBuilderParametersImpl.PARAM_KEY);\n-        if (result == null && createIfMissing) {\n-            result = new CombinedBuilderParametersImpl();\n+    public static CombinedBuilderParametersImpl fromParameters(final Map<String, ?> map, final boolean b) {\n+        CombinedBuilderParametersImpl combinedBuilderParametersImpl = (CombinedBuilderParametersImpl)map.get(CombinedBuilderParametersImpl.PARAM_KEY);\n+        if (combinedBuilderParametersImpl == null && b) {\n+            combinedBuilderParametersImpl = new CombinedBuilderParametersImpl();\n         }\n-        return result;\n+        return combinedBuilderParametersImpl;\n     }\n     \n-    public void inheritFrom(final Map<String, ?> source) {\n-        super.inheritFrom((Map)source);\n-        final CombinedBuilderParametersImpl srcParams = fromParameters(source);\n-        if (srcParams != null) {\n-            this.setChildDefaultParametersManager(srcParams.getChildDefaultParametersManager());\n-            this.setInheritSettings(srcParams.isInheritSettings());\n+    public void inheritFrom(final Map<String, ?> map) {\n+        super.inheritFrom((Map)map);\n+        final CombinedBuilderParametersImpl fromParameters = fromParameters(map);\n+        if (fromParameters != null) {\n+            this.setChildDefaultParametersManager(fromParameters.getChildDefaultParametersManager());\n+            this.setInheritSettings(fromParameters.isInheritSettings());\n         }\n     }\n     \n     public boolean isInheritSettings() {\n         return this.inheritSettings;\n     }\n     \n@@ -63,110 +63,110 @@\n         return this;\n     }\n     \n     public ConfigurationBuilder<? extends HierarchicalConfiguration<?>> getDefinitionBuilder() {\n         return this.definitionBuilder;\n     }\n     \n-    public CombinedBuilderParametersImpl setDefinitionBuilder(final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> builder) {\n-        this.definitionBuilder = builder;\n+    public CombinedBuilderParametersImpl setDefinitionBuilder(final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> definitionBuilder) {\n+        this.definitionBuilder = definitionBuilder;\n         return this;\n     }\n     \n-    public CombinedBuilderParametersImpl registerProvider(final String tagName, final ConfigurationBuilderProvider provider) {\n-        if (tagName == null) {\n+    public CombinedBuilderParametersImpl registerProvider(final String s, final ConfigurationBuilderProvider configurationBuilderProvider) {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"Tag name must not be null!\");\n         }\n-        if (provider == null) {\n+        if (configurationBuilderProvider == null) {\n             throw new IllegalArgumentException(\"Provider must not be null!\");\n         }\n-        this.providers.put(tagName, provider);\n+        this.providers.put(s, configurationBuilderProvider);\n         return this;\n     }\n     \n-    public CombinedBuilderParametersImpl registerMissingProviders(final Map<String, ConfigurationBuilderProvider> providers) {\n-        if (providers == null) {\n+    public CombinedBuilderParametersImpl registerMissingProviders(final Map<String, ConfigurationBuilderProvider> map) {\n+        if (map == null) {\n             throw new IllegalArgumentException(\"Map with providers must not be null!\");\n         }\n-        for (final Map.Entry<String, ConfigurationBuilderProvider> e : providers.entrySet()) {\n-            if (!this.providers.containsKey(e.getKey())) {\n-                this.registerProvider(e.getKey(), e.getValue());\n+        for (final Map.Entry entry : map.entrySet()) {\n+            if (!this.providers.containsKey(entry.getKey())) {\n+                this.registerProvider((String)entry.getKey(), (ConfigurationBuilderProvider)entry.getValue());\n             }\n         }\n         return this;\n     }\n     \n-    public CombinedBuilderParametersImpl registerMissingProviders(final CombinedBuilderParametersImpl params) {\n-        if (params == null) {\n+    public CombinedBuilderParametersImpl registerMissingProviders(final CombinedBuilderParametersImpl combinedBuilderParametersImpl) {\n+        if (combinedBuilderParametersImpl == null) {\n             throw new IllegalArgumentException(\"Source parameters must not be null!\");\n         }\n-        return this.registerMissingProviders(params.getProviders());\n+        return this.registerMissingProviders(combinedBuilderParametersImpl.getProviders());\n     }\n     \n     public Map<String, ConfigurationBuilderProvider> getProviders() {\n         return Collections.unmodifiableMap((Map<? extends String, ? extends ConfigurationBuilderProvider>)this.providers);\n     }\n     \n-    public ConfigurationBuilderProvider providerForTag(final String tagName) {\n-        return this.providers.get(tagName);\n+    public ConfigurationBuilderProvider providerForTag(final String s) {\n+        return this.providers.get(s);\n     }\n     \n     public String getBasePath() {\n         return this.basePath;\n     }\n     \n-    public CombinedBuilderParametersImpl setBasePath(final String path) {\n-        this.basePath = path;\n+    public CombinedBuilderParametersImpl setBasePath(final String basePath) {\n+        this.basePath = basePath;\n         return this;\n     }\n     \n     public BuilderParameters getDefinitionBuilderParameters() {\n         return this.definitionBuilderParameters;\n     }\n     \n-    public CombinedBuilderParametersImpl setDefinitionBuilderParameters(final BuilderParameters params) {\n-        this.definitionBuilderParameters = params;\n+    public CombinedBuilderParametersImpl setDefinitionBuilderParameters(final BuilderParameters definitionBuilderParameters) {\n+        this.definitionBuilderParameters = definitionBuilderParameters;\n         return this;\n     }\n     \n     public Collection<? extends BuilderParameters> getDefaultChildParameters() {\n         return new ArrayList<BuilderParameters>(this.childParameters);\n     }\n     \n     public DefaultParametersManager getChildDefaultParametersManager() {\n         if (this.childDefaultParametersManager == null) {\n             this.childDefaultParametersManager = new DefaultParametersManager();\n         }\n         return this.childDefaultParametersManager;\n     }\n     \n-    public CombinedBuilderParametersImpl setChildDefaultParametersManager(final DefaultParametersManager manager) {\n-        this.childDefaultParametersManager = manager;\n+    public CombinedBuilderParametersImpl setChildDefaultParametersManager(final DefaultParametersManager childDefaultParametersManager) {\n+        this.childDefaultParametersManager = childDefaultParametersManager;\n         return this;\n     }\n     \n-    public <D> CombinedBuilderParametersImpl registerChildDefaultsHandler(final Class<D> paramClass, final DefaultParametersHandler<? super D> handler) {\n-        this.getChildDefaultParametersManager().registerDefaultsHandler((Class)paramClass, (DefaultParametersHandler)handler);\n+    public <D> CombinedBuilderParametersImpl registerChildDefaultsHandler(final Class<D> clazz, final DefaultParametersHandler<? super D> defaultParametersHandler) {\n+        this.getChildDefaultParametersManager().registerDefaultsHandler((Class)clazz, (DefaultParametersHandler)defaultParametersHandler);\n         return this;\n     }\n     \n-    public <D> CombinedBuilderParametersImpl registerChildDefaultsHandler(final Class<D> paramClass, final DefaultParametersHandler<? super D> handler, final Class<?> startClass) {\n-        this.getChildDefaultParametersManager().registerDefaultsHandler((Class)paramClass, (DefaultParametersHandler)handler, (Class)startClass);\n+    public <D> CombinedBuilderParametersImpl registerChildDefaultsHandler(final Class<D> clazz, final DefaultParametersHandler<? super D> defaultParametersHandler, final Class<?> clazz2) {\n+        this.getChildDefaultParametersManager().registerDefaultsHandler((Class)clazz, (DefaultParametersHandler)defaultParametersHandler, (Class)clazz2);\n         return this;\n     }\n     \n     public Map<String, Object> getParameters() {\n-        final Map<String, Object> params = super.getParameters();\n-        params.put(CombinedBuilderParametersImpl.PARAM_KEY, this);\n-        return params;\n+        final Map parameters = super.getParameters();\n+        parameters.put(CombinedBuilderParametersImpl.PARAM_KEY, this);\n+        return parameters;\n     }\n     \n     public CombinedBuilderParametersImpl clone() {\n-        final CombinedBuilderParametersImpl copy = (CombinedBuilderParametersImpl)super.clone();\n-        copy.setDefinitionBuilderParameters((BuilderParameters)ConfigurationUtils.cloneIfPossible((Object)this.getDefinitionBuilderParameters()));\n-        return copy;\n+        final CombinedBuilderParametersImpl combinedBuilderParametersImpl = (CombinedBuilderParametersImpl)super.clone();\n+        combinedBuilderParametersImpl.setDefinitionBuilderParameters((BuilderParameters)ConfigurationUtils.cloneIfPossible((Object)this.getDefinitionBuilderParameters()));\n+        return combinedBuilderParametersImpl;\n     }\n     \n     static {\n         PARAM_KEY = \"config-\" + CombinedBuilderParametersImpl.class.getName();\n     }\n }\n"}]}
