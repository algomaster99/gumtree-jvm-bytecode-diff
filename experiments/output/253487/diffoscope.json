{"diffoscope-json-version": 1, "source1": "first/RightCurlyCheck.class", "source2": "second/RightCurlyCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,106 +16,105 @@\n     public static final String MSG_KEY_LINE_SAME = \"line.same\";\n     private RightCurlyOption option;\n     \n     public RightCurlyCheck() {\n         this.option = RightCurlyOption.SAME;\n     }\n     \n-    public void setOption(final String optionStr) {\n-        this.option = RightCurlyOption.valueOf(optionStr.trim().toUpperCase(Locale.ENGLISH));\n+    public void setOption(final String s) {\n+        this.option = RightCurlyOption.valueOf(s.trim().toUpperCase(Locale.ENGLISH));\n     }\n     \n     public int[] getDefaultTokens() {\n         return new int[] { 95, 96, 97, 83, 92 };\n     }\n     \n     public int[] getAcceptableTokens() {\n         return new int[] { 95, 96, 97, 83, 92, 14, 9, 8, 91, 84, 85, 12, 11, 157, 154, 15, 199, 203, 89 };\n     }\n     \n     public int[] getRequiredTokens() {\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final RightCurlyCheck.Details details = RightCurlyCheck.Details.getDetails(ast);\n+    public void visitToken(final DetailAST detailAST) {\n+        final RightCurlyCheck.Details details = RightCurlyCheck.Details.getDetails(detailAST);\n         final DetailAST rcurly = details.rcurly;\n         if (rcurly != null) {\n-            final String violation = this.validate(details);\n-            if (!violation.isEmpty()) {\n-                this.log(rcurly, violation, new Object[] { \"}\", Integer.valueOf(rcurly.getColumnNo() + 1) });\n+            final String validate = this.validate(details);\n+            if (!validate.isEmpty()) {\n+                this.log(rcurly, validate, new Object[] { \"}\", Integer.valueOf(rcurly.getColumnNo() + 1) });\n             }\n         }\n     }\n     \n     private String validate(final RightCurlyCheck.Details details) {\n-        String violation = \"\";\n+        String s = \"\";\n         if (shouldHaveLineBreakBefore(this.option, details)) {\n-            violation = \"line.break.before\";\n+            s = \"line.break.before\";\n         }\n         else if (shouldBeOnSameLine(this.option, details)) {\n-            violation = \"line.same\";\n+            s = \"line.same\";\n         }\n         else if (shouldBeAloneOnLine(this.option, details, this.getLine(details.rcurly.getLineNo() - 1))) {\n-            violation = \"line.alone\";\n+            s = \"line.alone\";\n         }\n-        return violation;\n+        return s;\n     }\n     \n-    private static boolean shouldHaveLineBreakBefore(final RightCurlyOption bracePolicy, final RightCurlyCheck.Details details) {\n-        return bracePolicy == RightCurlyOption.SAME && !hasLineBreakBefore(details.rcurly) && !TokenUtil.areOnSameLine(details.lcurly, details.rcurly);\n+    private static boolean shouldHaveLineBreakBefore(final RightCurlyOption rightCurlyOption, final RightCurlyCheck.Details details) {\n+        return rightCurlyOption == RightCurlyOption.SAME && !hasLineBreakBefore(details.rcurly) && !TokenUtil.areOnSameLine(details.lcurly, details.rcurly);\n     }\n     \n-    private static boolean shouldBeOnSameLine(final RightCurlyOption bracePolicy, final RightCurlyCheck.Details details) {\n-        return bracePolicy == RightCurlyOption.SAME && !details.shouldCheckLastRcurly && !TokenUtil.areOnSameLine(details.rcurly, details.nextToken);\n+    private static boolean shouldBeOnSameLine(final RightCurlyOption rightCurlyOption, final RightCurlyCheck.Details details) {\n+        return rightCurlyOption == RightCurlyOption.SAME && !details.shouldCheckLastRcurly && !TokenUtil.areOnSameLine(details.rcurly, details.nextToken);\n     }\n     \n-    private static boolean shouldBeAloneOnLine(final RightCurlyOption bracePolicy, final RightCurlyCheck.Details details, final String targetSrcLine) {\n-        return (bracePolicy == RightCurlyOption.ALONE && shouldBeAloneOnLineWithAloneOption(details, targetSrcLine)) || ((bracePolicy == RightCurlyOption.ALONE_OR_SINGLELINE || details.shouldCheckLastRcurly) && shouldBeAloneOnLineWithNotAloneOption(details, targetSrcLine));\n+    private static boolean shouldBeAloneOnLine(final RightCurlyOption rightCurlyOption, final RightCurlyCheck.Details details, final String s) {\n+        return (rightCurlyOption == RightCurlyOption.ALONE && shouldBeAloneOnLineWithAloneOption(details, s)) || ((rightCurlyOption == RightCurlyOption.ALONE_OR_SINGLELINE || details.shouldCheckLastRcurly) && shouldBeAloneOnLineWithNotAloneOption(details, s));\n     }\n     \n-    private static boolean shouldBeAloneOnLineWithAloneOption(final RightCurlyCheck.Details details, final String targetSrcLine) {\n-        return !isAloneOnLine(details, targetSrcLine);\n+    private static boolean shouldBeAloneOnLineWithAloneOption(final RightCurlyCheck.Details details, final String s) {\n+        return !isAloneOnLine(details, s);\n     }\n     \n-    private static boolean shouldBeAloneOnLineWithNotAloneOption(final RightCurlyCheck.Details details, final String targetSrcLine) {\n-        return shouldBeAloneOnLineWithAloneOption(details, targetSrcLine) && !isBlockAloneOnSingleLine(details);\n+    private static boolean shouldBeAloneOnLineWithNotAloneOption(final RightCurlyCheck.Details details, final String s) {\n+        return shouldBeAloneOnLineWithAloneOption(details, s) && !isBlockAloneOnSingleLine(details);\n     }\n     \n-    private static boolean isAloneOnLine(final RightCurlyCheck.Details details, final String targetSrcLine) {\n+    private static boolean isAloneOnLine(final RightCurlyCheck.Details details, final String s) {\n         final DetailAST rcurly = details.rcurly;\n         final DetailAST nextToken = details.nextToken;\n-        return (nextToken == null || !TokenUtil.areOnSameLine(rcurly, nextToken) || skipDoubleBraceInstInit(details)) && CommonUtil.hasWhitespaceBefore(details.rcurly.getColumnNo(), targetSrcLine);\n+        return (nextToken == null || !TokenUtil.areOnSameLine(rcurly, nextToken) || skipDoubleBraceInstInit(details)) && CommonUtil.hasWhitespaceBefore(details.rcurly.getColumnNo(), s);\n     }\n     \n     private static boolean skipDoubleBraceInstInit(final RightCurlyCheck.Details details) {\n-        boolean skipDoubleBraceInstInit = false;\n-        final DetailAST tokenAfterNextToken = RightCurlyCheck.Details.getNextToken(details.nextToken);\n-        if (tokenAfterNextToken != null) {\n+        boolean b = false;\n+        final DetailAST nextToken = RightCurlyCheck.Details.getNextToken(details.nextToken);\n+        if (nextToken != null) {\n             final DetailAST rcurly = details.rcurly;\n-            skipDoubleBraceInstInit = (rcurly.getParent().getParent().getType() == 11 && details.nextToken.getType() == 73 && !TokenUtil.areOnSameLine(rcurly, RightCurlyCheck.Details.getNextToken(tokenAfterNextToken)));\n+            b = (rcurly.getParent().getParent().getType() == 11 && details.nextToken.getType() == 73 && !TokenUtil.areOnSameLine(rcurly, RightCurlyCheck.Details.getNextToken(nextToken)));\n         }\n-        return skipDoubleBraceInstInit;\n+        return b;\n     }\n     \n     private static boolean isBlockAloneOnSingleLine(final RightCurlyCheck.Details details) {\n-        DetailAST nextToken;\n-        for (nextToken = details.nextToken; nextToken != null && nextToken.getType() == 92; nextToken = RightCurlyCheck.Details.getNextToken(nextToken)) {}\n-        if (nextToken != null && nextToken.getType() == 175) {\n-            final DetailAST doWhileSemi = nextToken.getParent();\n-            nextToken = RightCurlyCheck.Details.getNextToken(doWhileSemi);\n+        DetailAST detailAST;\n+        for (detailAST = details.nextToken; detailAST != null && detailAST.getType() == 92; detailAST = RightCurlyCheck.Details.getNextToken(detailAST)) {}\n+        if (detailAST != null && detailAST.getType() == 175) {\n+            detailAST = RightCurlyCheck.Details.getNextToken(detailAST.getParent());\n         }\n-        return TokenUtil.areOnSameLine(details.lcurly, details.rcurly) && (nextToken == null || !TokenUtil.areOnSameLine(details.rcurly, nextToken) || isRightcurlyFollowedBySemicolon(details));\n+        return TokenUtil.areOnSameLine(details.lcurly, details.rcurly) && (detailAST == null || !TokenUtil.areOnSameLine(details.rcurly, detailAST) || isRightcurlyFollowedBySemicolon(details));\n     }\n     \n     private static boolean isRightcurlyFollowedBySemicolon(final RightCurlyCheck.Details details) {\n         return details.nextToken.getType() == 45;\n     }\n     \n-    private static boolean hasLineBreakBefore(final DetailAST rightCurly) {\n-        DetailAST previousToken = rightCurly.getPreviousSibling();\n-        if (previousToken == null) {\n-            previousToken = rightCurly.getParent();\n+    private static boolean hasLineBreakBefore(final DetailAST detailAST) {\n+        DetailAST detailAST2 = detailAST.getPreviousSibling();\n+        if (detailAST2 == null) {\n+            detailAST2 = detailAST.getParent();\n         }\n-        return !TokenUtil.areOnSameLine(rightCurly, previousToken);\n+        return !TokenUtil.areOnSameLine(detailAST, detailAST2);\n     }\n }\n"}]}
