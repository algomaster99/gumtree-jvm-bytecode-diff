{"diffoscope-json-version": 1, "source1": "first/Attribute.class", "source2": "second/Attribute.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,37 +9,37 @@\n     protected final CPUTF8 attributeName;\n     private int attributeNameIndex;\n     \n     public Attribute(final CPUTF8 attributeName) {\n         this.attributeName = attributeName;\n     }\n     \n-    protected void doWrite(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.attributeNameIndex);\n-        dos.writeInt(this.getLength());\n-        this.writeBody(dos);\n+    protected void doWrite(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.attributeNameIndex);\n+        dataOutputStream.writeInt(this.getLength());\n+        this.writeBody(dataOutputStream);\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (obj == null) {\n+        if (o == null) {\n             return false;\n         }\n-        if (this.getClass() != obj.getClass()) {\n+        if (this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final Attribute other = (Attribute)obj;\n+        final Attribute attribute = (Attribute)o;\n         if (this.attributeName == null) {\n-            if (other.attributeName != null) {\n+            if (attribute.attributeName != null) {\n                 return false;\n             }\n         }\n-        else if (!this.attributeName.equals((Object)other.attributeName)) {\n+        else if (!this.attributeName.equals((Object)attribute.attributeName)) {\n             return false;\n         }\n         return true;\n     }\n     \n     protected CPUTF8 getAttributeName() {\n         return this.attributeName;\n@@ -60,20 +60,17 @@\n     }\n     \n     public boolean isSourceFileAttribute() {\n         return false;\n     }\n     \n     public int hashCode() {\n-        final int PRIME = 31;\n-        int result = 1;\n-        result = 31 * result + ((this.attributeName == null) ? 0 : this.attributeName.hashCode());\n-        return result;\n+        return 31 * 1 + ((this.attributeName == null) ? 0 : this.attributeName.hashCode());\n     }\n     \n-    protected void resolve(final ClassConstantPool pool) {\n-        super.resolve(pool);\n-        this.attributeNameIndex = pool.indexOf((ClassFileEntry)this.attributeName);\n+    protected void resolve(final ClassConstantPool classConstantPool) {\n+        super.resolve(classConstantPool);\n+        this.attributeNameIndex = classConstantPool.indexOf((ClassFileEntry)this.attributeName);\n     }\n     \n     protected abstract void writeBody(final DataOutputStream p0) throws IOException;\n }\n"}]}
