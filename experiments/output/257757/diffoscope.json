{"diffoscope-json-version": 1, "source1": "first/AutoSaveListener.class", "source2": "second/AutoSaveListener.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,49 +14,49 @@\n class AutoSaveListener extends FileHandlerListenerAdapter implements EventListener<ConfigurationEvent>\n {\n     private final Log log;\n     private final FileBasedConfigurationBuilder<?> builder;\n     private FileHandler handler;\n     private int loading;\n     \n-    public AutoSaveListener(final FileBasedConfigurationBuilder<?> bldr) {\n+    public AutoSaveListener(final FileBasedConfigurationBuilder<?> builder) {\n         this.log = LogFactory.getLog((Class)this.getClass());\n-        this.builder = bldr;\n+        this.builder = builder;\n     }\n     \n-    public void onEvent(final ConfigurationEvent event) {\n-        if (this.autoSaveRequired(event)) {\n+    public void onEvent(final ConfigurationEvent configurationEvent) {\n+        if (this.autoSaveRequired(configurationEvent)) {\n             try {\n                 this.builder.save();\n             }\n-            catch (final ConfigurationException ce) {\n-                this.log.warn((Object)\"Auto save failed!\", (Throwable)ce);\n+            catch (final ConfigurationException ex) {\n+                this.log.warn((Object)\"Auto save failed!\", (Throwable)ex);\n             }\n         }\n     }\n     \n-    public synchronized void loading(final FileHandler handler) {\n+    public synchronized void loading(final FileHandler fileHandler) {\n         ++this.loading;\n     }\n     \n-    public synchronized void loaded(final FileHandler handler) {\n+    public synchronized void loaded(final FileHandler fileHandler) {\n         --this.loading;\n     }\n     \n-    public synchronized void updateFileHandler(final FileHandler fh) {\n+    public synchronized void updateFileHandler(final FileHandler handler) {\n         if (this.handler != null) {\n             this.handler.removeFileHandlerListener((FileHandlerListener)this);\n         }\n-        if (fh != null) {\n-            fh.addFileHandlerListener((FileHandlerListener)this);\n+        if (handler != null) {\n+            handler.addFileHandlerListener((FileHandlerListener)this);\n         }\n-        this.handler = fh;\n+        this.handler = handler;\n     }\n     \n     private synchronized boolean inLoadOperation() {\n         return this.loading > 0;\n     }\n     \n-    private boolean autoSaveRequired(final ConfigurationEvent event) {\n-        return !event.isBeforeUpdate() && !this.inLoadOperation();\n+    private boolean autoSaveRequired(final ConfigurationEvent configurationEvent) {\n+        return !configurationEvent.isBeforeUpdate() && !this.inLoadOperation();\n     }\n }\n"}]}
