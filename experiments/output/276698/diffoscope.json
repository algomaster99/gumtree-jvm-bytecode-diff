{"diffoscope-json-version": 1, "source1": "first/JavaLanguageParser$QualifiedNameContext.class", "source2": "second/JavaLanguageParser$QualifiedNameContext.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,27 +16,27 @@\n         return (JavaLanguageParser.IdContext)this.getRuleContext((Class)JavaLanguageParser.IdContext.class, 0);\n     }\n     \n     public List<JavaLanguageParser.QualifiedNameExtendedContext> qualifiedNameExtended() {\n         return this.getRuleContexts((Class)JavaLanguageParser.QualifiedNameExtendedContext.class);\n     }\n     \n-    public JavaLanguageParser.QualifiedNameExtendedContext qualifiedNameExtended(final int i) {\n-        return (JavaLanguageParser.QualifiedNameExtendedContext)this.getRuleContext((Class)JavaLanguageParser.QualifiedNameExtendedContext.class, i);\n+    public JavaLanguageParser.QualifiedNameExtendedContext qualifiedNameExtended(final int n) {\n+        return (JavaLanguageParser.QualifiedNameExtendedContext)this.getRuleContext((Class)JavaLanguageParser.QualifiedNameExtendedContext.class, n);\n     }\n     \n-    public QualifiedNameContext(final ParserRuleContext parent, final int invokingState) {\n-        super(parent, invokingState);\n+    public QualifiedNameContext(final ParserRuleContext parserRuleContext, final int n) {\n+        super(parserRuleContext, n);\n         this.extended = new ArrayList();\n     }\n     \n     public int getRuleIndex() {\n         return 55;\n     }\n     \n-    public <T> T accept(final ParseTreeVisitor<? extends T> visitor) {\n-        if (visitor instanceof JavaLanguageParserVisitor) {\n-            return (T)((JavaLanguageParserVisitor)visitor).visitQualifiedName(this);\n+    public <T> T accept(final ParseTreeVisitor<? extends T> parseTreeVisitor) {\n+        if (parseTreeVisitor instanceof JavaLanguageParserVisitor) {\n+            return (T)((JavaLanguageParserVisitor)parseTreeVisitor).visitQualifiedName(this);\n         }\n-        return (T)visitor.visitChildren((RuleNode)this);\n+        return (T)parseTreeVisitor.visitChildren((RuleNode)this);\n     }\n }\n"}]}
