{"diffoscope-json-version": 1, "source1": "first/PackageObjectFactory.class", "source2": "second/PackageObjectFactory.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -31,166 +31,163 @@\n     public static final String STRING_SEPARATOR = \", \";\n     private static final Map<String, String> NAME_TO_FULL_MODULE_NAME;\n     private final Set<String> packages;\n     private final ClassLoader moduleClassLoader;\n     private Map<String, Set<String>> thirdPartyNameToFullModuleNames;\n     private PackageObjectFactory.ModuleLoadOption moduleLoadOption;\n     \n-    public PackageObjectFactory(final Set<String> packageNames, final ClassLoader moduleClassLoader) {\n-        this(packageNames, moduleClassLoader, PackageObjectFactory.ModuleLoadOption.SEARCH_REGISTERED_PACKAGES);\n+    public PackageObjectFactory(final Set<String> set, final ClassLoader classLoader) {\n+        this(set, classLoader, PackageObjectFactory.ModuleLoadOption.SEARCH_REGISTERED_PACKAGES);\n     }\n     \n-    public PackageObjectFactory(final Set<String> packageNames, final ClassLoader moduleClassLoader, final PackageObjectFactory.ModuleLoadOption moduleLoadOption) {\n+    public PackageObjectFactory(final Set<String> c, final ClassLoader moduleClassLoader, final PackageObjectFactory.ModuleLoadOption moduleLoadOption) {\n         if (moduleClassLoader == null) {\n             throw new IllegalArgumentException(\"moduleClassLoader must not be null\");\n         }\n-        if (packageNames.contains(null)) {\n+        if (c.contains(null)) {\n             throw new IllegalArgumentException(\"package name must not be null\");\n         }\n-        this.packages = new LinkedHashSet<String>(packageNames);\n+        this.packages = new LinkedHashSet<String>(c);\n         this.moduleClassLoader = moduleClassLoader;\n         this.moduleLoadOption = moduleLoadOption;\n     }\n     \n-    public PackageObjectFactory(final String packageName, final ClassLoader moduleClassLoader) {\n+    public PackageObjectFactory(final String o, final ClassLoader moduleClassLoader) {\n         if (moduleClassLoader == null) {\n             throw new IllegalArgumentException(\"moduleClassLoader must not be null\");\n         }\n-        if (packageName == null) {\n+        if (o == null) {\n             throw new IllegalArgumentException(\"package name must not be null\");\n         }\n-        this.packages = Collections.singleton(packageName);\n+        this.packages = Collections.singleton(o);\n         this.moduleClassLoader = moduleClassLoader;\n     }\n     \n-    public Object createModule(final String name) throws CheckstyleException {\n-        Object instance = null;\n-        if (!name.contains(\".\")) {\n-            instance = this.createFromStandardCheckSet(name);\n-            if (instance == null) {\n-                instance = this.createObjectFromClassPath(name);\n-            }\n-        }\n-        if (instance == null) {\n-            instance = this.createObject(name);\n-        }\n-        if (instance == null && this.moduleLoadOption == PackageObjectFactory.ModuleLoadOption.TRY_IN_ALL_REGISTERED_PACKAGES) {\n-            instance = this.createModuleByTryInEachPackage(name);\n-        }\n-        if (instance == null) {\n-            String attemptedNames = null;\n-            if (!name.contains(\".\")) {\n-                final String nameCheck = name + \"Check\";\n-                attemptedNames = joinPackageNamesWithClassName(name, this.packages) + \", \" + nameCheck + \", \" + joinPackageNamesWithClassName(nameCheck, this.packages);\n-            }\n-            final LocalizedMessage exceptionMessage = new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.messages\", (Class)this.getClass(), \"PackageObjectFactory.unableToInstantiateExceptionMessage\", new Object[] { name, attemptedNames });\n-            throw new CheckstyleException(exceptionMessage.getMessage());\n-        }\n-        return instance;\n-    }\n-    \n-    private Object createFromStandardCheckSet(final String name) throws CheckstyleException {\n-        final String fullModuleName = (String)PackageObjectFactory.NAME_TO_FULL_MODULE_NAME.get(name);\n-        Object instance = null;\n-        if (fullModuleName == null) {\n-            final String fullCheckModuleName = (String)PackageObjectFactory.NAME_TO_FULL_MODULE_NAME.get(name + \"Check\");\n-            if (fullCheckModuleName != null) {\n-                instance = this.createObject(fullCheckModuleName);\n+    public Object createModule(final String s) throws CheckstyleException {\n+        Object o = null;\n+        if (!s.contains(\".\")) {\n+            o = this.createFromStandardCheckSet(s);\n+            if (o == null) {\n+                o = this.createObjectFromClassPath(s);\n+            }\n+        }\n+        if (o == null) {\n+            o = this.createObject(s);\n+        }\n+        if (o == null && this.moduleLoadOption == PackageObjectFactory.ModuleLoadOption.TRY_IN_ALL_REGISTERED_PACKAGES) {\n+            o = this.createModuleByTryInEachPackage(s);\n+        }\n+        if (o == null) {\n+            Object o2 = null;\n+            if (!s.contains(\".\")) {\n+                final String s2 = s + \"Check\";\n+                o2 = joinPackageNamesWithClassName(s, this.packages) + \", \" + s2 + \", \" + joinPackageNamesWithClassName(s2, this.packages);\n+            }\n+            throw new CheckstyleException(new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.messages\", (Class)this.getClass(), \"PackageObjectFactory.unableToInstantiateExceptionMessage\", new Object[] { s, o2 }).getMessage());\n+        }\n+        return o;\n+    }\n+    \n+    private Object createFromStandardCheckSet(final String s) throws CheckstyleException {\n+        final String s2 = (String)PackageObjectFactory.NAME_TO_FULL_MODULE_NAME.get(s);\n+        Object o = null;\n+        if (s2 == null) {\n+            final String s3 = (String)PackageObjectFactory.NAME_TO_FULL_MODULE_NAME.get(s + \"Check\");\n+            if (s3 != null) {\n+                o = this.createObject(s3);\n             }\n         }\n         else {\n-            instance = this.createObject(fullModuleName);\n+            o = this.createObject(s2);\n         }\n-        return instance;\n+        return o;\n     }\n     \n-    private Object createObjectFromClassPath(final String name) throws CheckstyleException {\n+    private Object createObjectFromClassPath(final String s) throws CheckstyleException {\n         this.thirdPartyNameToFullModuleNames = lazyLoad(this.thirdPartyNameToFullModuleNames, () -> this.generateThirdPartyNameToFullModuleName(this.moduleClassLoader));\n-        final Set<String> fullModuleNames = (Set<String>)this.thirdPartyNameToFullModuleNames.get(name);\n-        Object instance = null;\n-        if (fullModuleNames == null) {\n-            final Set<String> fullCheckModuleNames = (Set<String>)this.thirdPartyNameToFullModuleNames.get(name + \"Check\");\n-            if (fullCheckModuleNames != null) {\n-                instance = this.createObjectFromFullModuleNames(name, fullCheckModuleNames);\n+        final Set set = (Set)this.thirdPartyNameToFullModuleNames.get(s);\n+        Object o = null;\n+        if (set == null) {\n+            final Set set2 = (Set)this.thirdPartyNameToFullModuleNames.get(s + \"Check\");\n+            if (set2 != null) {\n+                o = this.createObjectFromFullModuleNames(s, set2);\n             }\n         }\n         else {\n-            instance = this.createObjectFromFullModuleNames(name, fullModuleNames);\n+            o = this.createObjectFromFullModuleNames(s, set);\n         }\n-        return instance;\n+        return o;\n     }\n     \n-    private Object createObjectFromFullModuleNames(final String name, final Set<String> fullModuleNames) throws CheckstyleException {\n-        if (fullModuleNames.size() == 1) {\n-            final Object returnValue = this.createObject(fullModuleNames.iterator().next());\n-            return returnValue;\n-        }\n-        final String optionalNames = (String)fullModuleNames.stream().sorted().collect((Collector<? super Object, ?, String>)Collectors.joining(\", \"));\n-        final LocalizedMessage exceptionMessage = new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.messages\", (Class)this.getClass(), \"PackageObjectFactory.ambiguousModuleNameExceptionMessage\", new Object[] { name, optionalNames });\n-        throw new CheckstyleException(exceptionMessage.getMessage());\n+    private Object createObjectFromFullModuleNames(final String s, final Set<String> set) throws CheckstyleException {\n+        if (set.size() != 0) {\n+            return this.createObject(set.iterator().next());\n+        }\n+        throw new CheckstyleException(new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.messages\", (Class)this.getClass(), \"PackageObjectFactory.ambiguousModuleNameExceptionMessage\", new Object[] { s, set.stream().sorted().collect(Collectors.joining(\", \")) }).getMessage());\n     }\n     \n-    private Map<String, Set<String>> generateThirdPartyNameToFullModuleName(final ClassLoader loader) {\n-        Map<String, Set<String>> returnValue;\n+    private Map<String, Set<String>> generateThirdPartyNameToFullModuleName(final ClassLoader classLoader) {\n+        Map<Object, Object> emptyMap;\n         try {\n-            returnValue = (Map)ModuleReflectionUtil.getCheckstyleModules((Collection)this.packages, loader).stream().collect(Collectors.groupingBy((Function<? super Object, ?>)Class::getSimpleName, (Collector<? super Object, ?, Object>)Collectors.mapping((Function<? super Object, ?>)Class::getCanonicalName, (Collector<? super Object, ?, D>)Collectors.toCollection((Supplier<R>)HashSet::new))));\n+            emptyMap = (Map)ModuleReflectionUtil.getCheckstyleModules((Collection)this.packages, classLoader).stream().collect(Collectors.groupingBy((Function<? super Object, ?>)Class::getSimpleName, (Collector<? super Object, ?, Object>)Collectors.mapping((Function<? super Object, ?>)Class::getCanonicalName, (Collector<? super Object, ?, D>)Collectors.toCollection((Supplier<R>)HashSet::new))));\n         }\n-        catch (final IOException ignore) {\n-            returnValue = Collections.emptyMap();\n+        catch (final IOException ex) {\n+            emptyMap = Collections.emptyMap();\n         }\n-        return returnValue;\n+        return (Map<String, Set<String>>)emptyMap;\n     }\n     \n-    public static String getShortFromFullModuleNames(final String fullName) {\n-        return PackageObjectFactory.NAME_TO_FULL_MODULE_NAME.entrySet().stream().filter(entry -> ((String)entry.getValue()).equals(fullName)).map((Function<? super Object, ? extends String>)Map.Entry::getKey).findFirst().orElse(fullName);\n+    public static String getShortFromFullModuleNames(final String other) {\n+        return PackageObjectFactory.NAME_TO_FULL_MODULE_NAME.entrySet().stream().filter(entry -> ((String)entry.getValue()).equals(anObject)).map((Function<? super Object, ? extends String>)Map.Entry::getKey).findFirst().orElse(other);\n     }\n     \n-    private static String joinPackageNamesWithClassName(final String className, final Set<String> packages) {\n-        return packages.stream().collect((Collector<? super Object, ?, String>)Collectors.joining(\".\" + className + \", \", (CharSequence)\"\", \".\" + className));\n+    private static String joinPackageNamesWithClassName(final String s, final Set<String> set) {\n+        return set.stream().collect((Collector<? super Object, ?, String>)Collectors.joining(\".\" + s + \", \", (CharSequence)\"\", \".\" + s));\n     }\n     \n-    private Object createObject(final String className) throws CheckstyleException {\n-        Class<?> clazz = null;\n+    private Object createObject(final String name) throws CheckstyleException {\n+        Class<?> forName = null;\n         try {\n-            clazz = Class.forName(className, true, this.moduleClassLoader);\n+            forName = Class.forName(name, true, this.moduleClassLoader);\n         }\n         catch (final ReflectiveOperationException | NoClassDefFoundError reflectiveOperationException | NoClassDefFoundError) {}\n         Object instance = null;\n-        if (clazz != null) {\n+        if (forName != null) {\n             try {\n-                instance = clazz.getDeclaredConstructor((Class<?>[])new Class[0]).newInstance(new Object[0]);\n+                instance = forName.getDeclaredConstructor((Class<?>[])new Class[0]).newInstance(new Object[0]);\n             }\n             catch (final ReflectiveOperationException ex) {\n-                throw new CheckstyleException(\"Unable to instantiate \" + className, (Throwable)ex);\n+                throw new CheckstyleException(\"Unable to instantiate \" + name, (Throwable)ex);\n             }\n         }\n         return instance;\n     }\n     \n-    private Object createModuleByTryInEachPackage(final String name) throws CheckstyleException {\n-        final List<String> possibleNames = (List<String>)this.packages.stream().map(packageName -> packageName + \".\" + name).flatMap(className -> Stream.of(new String[] { className, className + \"Check\" })).collect((Collector<? super Object, ?, List<String>>)Collectors.toList());\n-        Object instance = null;\n-        for (final String possibleName : possibleNames) {\n-            instance = this.createObject(possibleName);\n-            if (instance != null) {\n+    private Object createModuleByTryInEachPackage(final String s) throws CheckstyleException {\n+        final List<? super Object> list = (List<? super Object>)this.packages.stream().map(s3 -> s3 + \".\" + s2).flatMap(s4 -> Stream.of(new String[] { s4, s4 + \"Check\" })).collect((Collector<? super Object, ?, List<? super Object>>)Collectors.toList());\n+        Object object = null;\n+        final Iterator<? super Object> iterator = (Iterator<? super Object>)list.iterator();\n+        while (iterator.hasNext()) {\n+            object = this.createObject(iterator.next());\n+            if (object != null) {\n                 break;\n             }\n         }\n-        return instance;\n+        return object;\n     }\n     \n-    private static <T> T lazyLoad(final T object, final Supplier<T> supplier) {\n-        T result;\n-        if (object == null) {\n-            result = supplier.get();\n+    private static <T> T lazyLoad(final T t, final Supplier<T> supplier) {\n+        T value;\n+        if (t == null) {\n+            value = supplier.get();\n         }\n         else {\n-            result = object;\n+            value = t;\n         }\n-        return result;\n+        return value;\n     }\n     \n     private static void fillShortToFullModuleNamesMap() {\n         fillChecksFromAnnotationPackage();\n         fillChecksFromBlocksPackage();\n         fillChecksFromCodingPackage();\n         fillChecksFromDesignPackage();\n"}]}
