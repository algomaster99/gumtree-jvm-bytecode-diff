{"diffoscope-json-version": 1, "source1": "first/BaseHierarchicalConfiguration$InterpolatedVisitor.class", "source2": "second/BaseHierarchicalConfiguration$InterpolatedVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,28 +21,26 @@\n         this.builderStack = new LinkedList();\n     }\n     \n     public ImmutableNode getInterpolatedRoot() {\n         return this.interpolatedRoot;\n     }\n     \n-    public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {\n-        if (this.isLeafNode(node, (NodeHandler)handler)) {\n-            this.handleLeafNode(node, (NodeHandler)handler);\n+    public void visitBeforeChildren(final ImmutableNode immutableNode, final NodeHandler<ImmutableNode> nodeHandler) {\n+        if (this.isLeafNode(immutableNode, (NodeHandler)nodeHandler)) {\n+            this.handleLeafNode(immutableNode, (NodeHandler)nodeHandler);\n         }\n         else {\n-            final ImmutableNode.Builder builder = new ImmutableNode.Builder(handler.getChildrenCount((Object)node, (String)null)).name(handler.nodeName((Object)node)).value(this.this$0.interpolate(handler.getValue((Object)node))).addAttributes(this.interpolateAttributes(node, (NodeHandler)handler));\n-            this.push(builder);\n+            this.push(new ImmutableNode.Builder(nodeHandler.getChildrenCount((Object)immutableNode, (String)null)).name(nodeHandler.nodeName((Object)immutableNode)).value(this.this$0.interpolate(nodeHandler.getValue((Object)immutableNode))).addAttributes(this.interpolateAttributes(immutableNode, (NodeHandler)nodeHandler)));\n         }\n     }\n     \n-    public void visitAfterChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {\n-        if (!this.isLeafNode(node, (NodeHandler)handler)) {\n-            final ImmutableNode newNode = this.pop().create();\n-            this.storeInterpolatedNode(newNode);\n+    public void visitAfterChildren(final ImmutableNode immutableNode, final NodeHandler<ImmutableNode> nodeHandler) {\n+        if (!this.isLeafNode(immutableNode, (NodeHandler)nodeHandler)) {\n+            this.storeInterpolatedNode(this.pop().create());\n         }\n     }\n     \n     private void push(final ImmutableNode.Builder builder) {\n         this.builderStack.add(0, builder);\n     }\n     \n@@ -50,50 +48,49 @@\n         return this.builderStack.remove(0);\n     }\n     \n     private ImmutableNode.Builder peek() {\n         return this.builderStack.get(0);\n     }\n     \n-    private boolean isLeafNode(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {\n-        return handler.getChildren((Object)node).isEmpty();\n+    private boolean isLeafNode(final ImmutableNode immutableNode, final NodeHandler<ImmutableNode> nodeHandler) {\n+        return nodeHandler.getChildren((Object)immutableNode).isEmpty();\n     }\n     \n-    private void handleLeafNode(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {\n-        final Object value = this.this$0.interpolate(node.getValue());\n-        final Map<String, Object> interpolatedAttributes = new HashMap<String, Object>();\n-        final boolean attributeChanged = this.interpolateAttributes(node, (NodeHandler)handler, (Map)interpolatedAttributes);\n-        final ImmutableNode newNode = (this.valueChanged(value, handler.getValue((Object)node)) || attributeChanged) ? new ImmutableNode.Builder().name(handler.nodeName((Object)node)).value(value).addAttributes((Map)interpolatedAttributes).create() : node;\n-        this.storeInterpolatedNode(newNode);\n+    private void handleLeafNode(final ImmutableNode immutableNode, final NodeHandler<ImmutableNode> nodeHandler) {\n+        final Object interpolate = this.this$0.interpolate(immutableNode.getValue());\n+        final HashMap hashMap = new HashMap();\n+        final boolean interpolateAttributes = this.interpolateAttributes(immutableNode, (NodeHandler)nodeHandler, (Map)hashMap);\n+        this.storeInterpolatedNode((this.valueChanged(interpolate, nodeHandler.getValue((Object)immutableNode)) || interpolateAttributes) ? new ImmutableNode.Builder().name(nodeHandler.nodeName((Object)immutableNode)).value(interpolate).addAttributes((Map)hashMap).create() : immutableNode);\n     }\n     \n-    private void storeInterpolatedNode(final ImmutableNode node) {\n+    private void storeInterpolatedNode(final ImmutableNode interpolatedRoot) {\n         if (this.builderStack.isEmpty()) {\n-            this.interpolatedRoot = node;\n+            this.interpolatedRoot = interpolatedRoot;\n         }\n         else {\n-            this.peek().addChild(node);\n+            this.peek().addChild(interpolatedRoot);\n         }\n     }\n     \n-    private boolean interpolateAttributes(final ImmutableNode node, final NodeHandler<ImmutableNode> handler, final Map<String, Object> interpolatedAttributes) {\n-        boolean attributeChanged = false;\n-        for (final String attr : handler.getAttributes((Object)node)) {\n-            final Object attrValue = this.this$0.interpolate(handler.getAttributeValue((Object)node, attr));\n-            if (this.valueChanged(attrValue, handler.getAttributeValue((Object)node, attr))) {\n-                attributeChanged = true;\n+    private boolean interpolateAttributes(final ImmutableNode immutableNode, final NodeHandler<ImmutableNode> nodeHandler, final Map<String, Object> map) {\n+        boolean b = false;\n+        for (final String s : nodeHandler.getAttributes((Object)immutableNode)) {\n+            final Object interpolate = this.this$0.interpolate(nodeHandler.getAttributeValue((Object)immutableNode, s));\n+            if (this.valueChanged(interpolate, nodeHandler.getAttributeValue((Object)immutableNode, s))) {\n+                b = true;\n             }\n-            interpolatedAttributes.put(attr, attrValue);\n+            map.put(s, interpolate);\n         }\n-        return attributeChanged;\n+        return b;\n     }\n     \n-    private Map<String, Object> interpolateAttributes(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {\n-        final Map<String, Object> attributes = new HashMap<String, Object>();\n-        this.interpolateAttributes(node, (NodeHandler)handler, (Map)attributes);\n-        return attributes;\n+    private Map<String, Object> interpolateAttributes(final ImmutableNode immutableNode, final NodeHandler<ImmutableNode> nodeHandler) {\n+        final HashMap hashMap = new HashMap();\n+        this.interpolateAttributes(immutableNode, (NodeHandler)nodeHandler, (Map)hashMap);\n+        return hashMap;\n     }\n     \n-    private boolean valueChanged(final Object interpolatedValue, final Object value) {\n-        return ObjectUtils.notEqual(interpolatedValue, value);\n+    private boolean valueChanged(final Object o, final Object o2) {\n+        return ObjectUtils.notEqual(o, o2);\n     }\n }\n"}]}
