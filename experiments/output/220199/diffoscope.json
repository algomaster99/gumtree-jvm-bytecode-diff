{"diffoscope-json-version": 1, "source1": "first/JavadocTagContinuationIndentationCheck.class", "source2": "second/JavadocTagContinuationIndentationCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,15 +1,15 @@\n \n package com.puppycrawl.tools.checkstyle.checks.javadoc;\n \n import java.util.Collection;\n import java.util.ArrayList;\n+import java.util.List;\n import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import java.util.Iterator;\n-import java.util.List;\n import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n import com.puppycrawl.tools.checkstyle.api.DetailNode;\n import com.puppycrawl.tools.checkstyle.StatelessCheck;\n \n @StatelessCheck\n public class JavadocTagContinuationIndentationCheck extends AbstractJavadocCheck\n {\n@@ -29,64 +29,63 @@\n         return new int[] { 10068 };\n     }\n     \n     public int[] getRequiredJavadocTokens() {\n         return this.getAcceptableJavadocTokens();\n     }\n     \n-    public void visitJavadocToken(final DetailNode ast) {\n-        if (!isInlineDescription(ast)) {\n-            final List<DetailNode> textNodes = getAllNewlineNodes(ast);\n-            for (final DetailNode newlineNode : textNodes) {\n-                final DetailNode textNode = JavadocUtil.getNextSibling(newlineNode);\n-                if (textNode.getType() == 10074 && this.isViolation(textNode)) {\n-                    this.log(textNode.getLineNumber(), \"tag.continuation.indent\", new Object[] { Integer.valueOf(this.offset) });\n+    public void visitJavadocToken(final DetailNode detailNode) {\n+        if (!isInlineDescription(detailNode)) {\n+            final Iterator<DetailNode> iterator = getAllNewlineNodes(detailNode).iterator();\n+            while (iterator.hasNext()) {\n+                final DetailNode nextSibling = JavadocUtil.getNextSibling((DetailNode)iterator.next());\n+                if (nextSibling.getType() == 10074 && this.isViolation(nextSibling)) {\n+                    this.log(nextSibling.getLineNumber(), \"tag.continuation.indent\", new Object[] { Integer.valueOf(this.offset) });\n                 }\n             }\n         }\n     }\n     \n-    private boolean isViolation(final DetailNode textNode) {\n-        boolean result = false;\n-        final String text = textNode.getText();\n+    private boolean isViolation(final DetailNode detailNode) {\n+        boolean b = false;\n+        final String text = detailNode.getText();\n         if (text.length() <= this.offset) {\n             if (CommonUtil.isBlank(text)) {\n-                final DetailNode nextNode = JavadocUtil.getNextSibling(textNode);\n-                if (nextNode != null && nextNode.getType() != 6) {\n-                    result = true;\n+                final DetailNode nextSibling = JavadocUtil.getNextSibling(detailNode);\n+                if (nextSibling != null && nextSibling.getType() != 6) {\n+                    b = true;\n                 }\n             }\n             else {\n-                result = true;\n+                b = true;\n             }\n         }\n         else if (!CommonUtil.isBlank(text.substring(1, this.offset + 1))) {\n-            result = true;\n+            b = true;\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private static List<DetailNode> getAllNewlineNodes(final DetailNode descriptionNode) {\n-        final List<DetailNode> textNodes = new ArrayList<DetailNode>();\n-        for (DetailNode node = JavadocUtil.getFirstChild(descriptionNode); JavadocUtil.getNextSibling(node) != null; node = JavadocUtil.getNextSibling(node)) {\n-            if (node.getType() == 10001) {\n-                final DetailNode descriptionNodeChild = JavadocUtil.getFirstChild(node);\n-                textNodes.addAll(getAllNewlineNodes(descriptionNodeChild));\n+    private static List<DetailNode> getAllNewlineNodes(final DetailNode detailNode) {\n+        final ArrayList list = new ArrayList();\n+        for (DetailNode detailNode2 = JavadocUtil.getFirstChild(detailNode); JavadocUtil.getNextSibling(detailNode2) != null; detailNode2 = JavadocUtil.getNextSibling(detailNode2)) {\n+            if (detailNode2.getType() == 10001) {\n+                list.addAll(getAllNewlineNodes(JavadocUtil.getFirstChild(detailNode2)));\n             }\n-            if (node.getType() == 1) {\n-                textNodes.add(node);\n+            if (detailNode2.getType() == 1) {\n+                list.add(detailNode2);\n             }\n         }\n-        return textNodes;\n+        return list;\n     }\n     \n-    private static boolean isInlineDescription(final DetailNode description) {\n-        boolean isInline = false;\n-        for (DetailNode inlineTag = description.getParent(); inlineTag != null; inlineTag = inlineTag.getParent()) {\n-            if (inlineTag.getType() == 10072) {\n-                isInline = true;\n+    private static boolean isInlineDescription(final DetailNode detailNode) {\n+        boolean b = false;\n+        for (DetailNode detailNode2 = detailNode.getParent(); detailNode2 != null; detailNode2 = detailNode2.getParent()) {\n+            if (detailNode2.getType() == 10072) {\n+                b = true;\n                 break;\n             }\n         }\n-        return isInline;\n+        return b;\n     }\n }\n"}]}
