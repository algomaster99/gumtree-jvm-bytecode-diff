{"diffoscope-json-version": 1, "source1": "first/AbstractCheck.class", "source2": "second/AbstractCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,16 +26,16 @@\n     \n     public abstract int[] getRequiredTokens();\n     \n     public boolean isCommentNodesRequired() {\n         return false;\n     }\n     \n-    public final void setTokens(final String... strRep) {\n-        Collections.addAll(this.tokens, strRep);\n+    public final void setTokens(final String... elements) {\n+        Collections.addAll(this.tokens, elements);\n     }\n     \n     public final Set<String> getTokenNames() {\n         return Collections.unmodifiableSet((Set<? extends String>)this.tokens);\n     }\n     \n     public SortedSet<Violation> getViolations() {\n@@ -49,28 +49,28 @@\n     public void init() {\n     }\n     \n     public void destroy() {\n         this.context.remove();\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n     }\n     \n-    public void finishTree(final DetailAST rootAST) {\n+    public void finishTree(final DetailAST detailAST) {\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n+    public void visitToken(final DetailAST detailAST) {\n     }\n     \n-    public void leaveToken(final DetailAST ast) {\n+    public void leaveToken(final DetailAST detailAST) {\n     }\n     \n-    public final void setFileContents(final FileContents contents) {\n-        ((AbstractCheck.FileContext)this.context.get()).fileContents = contents;\n+    public final void setFileContents(final FileContents fileContents) {\n+        ((AbstractCheck.FileContext)this.context.get()).fileContents = fileContents;\n     }\n     \n     @Deprecated(since = \"9.3\")\n     public final FileContents getFileContents() {\n         return ((AbstractCheck.FileContext)this.context.get()).fileContents;\n     }\n     \n@@ -78,37 +78,35 @@\n         return this.tabWidth;\n     }\n     \n     public final void setTabWidth(final int tabWidth) {\n         this.tabWidth = tabWidth;\n     }\n     \n-    public final void log(final int line, final String key, final Object... args) {\n-        ((AbstractCheck.FileContext)this.context.get()).violations.add(new Violation(line, this.getMessageBundle(), key, args, this.getSeverityLevel(), this.getId(), (Class)this.getClass(), (String)this.getCustomMessages().get(key)));\n+    public final void log(final int n, final String s, final Object... array) {\n+        ((AbstractCheck.FileContext)this.context.get()).violations.add(new Violation(n, this.getMessageBundle(), s, array, this.getSeverityLevel(), this.getId(), (Class)this.getClass(), (String)this.getCustomMessages().get(s)));\n     }\n     \n-    public final void log(final int lineNo, final int colNo, final String key, final Object... args) {\n-        final int col = 1 + CommonUtil.lengthExpandedTabs(this.getLines()[lineNo - 1], colNo, this.tabWidth);\n-        ((AbstractCheck.FileContext)this.context.get()).violations.add(new Violation(lineNo, col, this.getMessageBundle(), key, args, this.getSeverityLevel(), this.getId(), (Class)this.getClass(), (String)this.getCustomMessages().get(key)));\n+    public final void log(final int n, final int n2, final String s, final Object... array) {\n+        ((AbstractCheck.FileContext)this.context.get()).violations.add(new Violation(n, 1 + CommonUtil.lengthExpandedTabs(this.getLines()[n - 1], n2, this.tabWidth), this.getMessageBundle(), s, array, this.getSeverityLevel(), this.getId(), (Class)this.getClass(), (String)this.getCustomMessages().get(s)));\n     }\n     \n-    public final void log(final DetailAST ast, final String key, final Object... args) {\n-        final int col = 1 + CommonUtil.lengthExpandedTabs(this.getLines()[ast.getLineNo() - 1], ast.getColumnNo(), this.tabWidth);\n-        ((AbstractCheck.FileContext)this.context.get()).violations.add(new Violation(ast.getLineNo(), col, ast.getColumnNo(), ast.getType(), this.getMessageBundle(), key, args, this.getSeverityLevel(), this.getId(), (Class)this.getClass(), (String)this.getCustomMessages().get(key)));\n+    public final void log(final DetailAST detailAST, final String s, final Object... array) {\n+        ((AbstractCheck.FileContext)this.context.get()).violations.add(new Violation(detailAST.getLineNo(), 1 + CommonUtil.lengthExpandedTabs(this.getLines()[detailAST.getLineNo() - 1], detailAST.getColumnNo(), this.tabWidth), detailAST.getColumnNo(), detailAST.getType(), this.getMessageBundle(), s, array, this.getSeverityLevel(), this.getId(), (Class)this.getClass(), (String)this.getCustomMessages().get(s)));\n     }\n     \n     public final String[] getLines() {\n         return ((AbstractCheck.FileContext)this.context.get()).fileContents.getLines();\n     }\n     \n-    public final String getLine(final int index) {\n-        return ((AbstractCheck.FileContext)this.context.get()).fileContents.getLine(index);\n+    public final String getLine(final int n) {\n+        return ((AbstractCheck.FileContext)this.context.get()).fileContents.getLine(n);\n     }\n     \n     public final String getFilePath() {\n         return ((AbstractCheck.FileContext)this.context.get()).fileContents.getFileName();\n     }\n     \n-    public final int[] getLineCodePoints(final int index) {\n-        return this.getLine(index).codePoints().toArray();\n+    public final int[] getLineCodePoints(final int n) {\n+        return this.getLine(n).codePoints().toArray();\n     }\n }\n"}]}
