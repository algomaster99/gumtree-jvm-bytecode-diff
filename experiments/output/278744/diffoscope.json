{"diffoscope-json-version": 1, "source1": "first/Pack200PackerAdapter.class", "source2": "second/Pack200PackerAdapter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,83 +11,79 @@\n {\n     private final PackingOptions options;\n     \n     public Pack200PackerAdapter() {\n         this.options = new PackingOptions();\n     }\n     \n-    public void pack(final JarFile file, final OutputStream out) throws IOException {\n-        if (file == null || out == null) {\n+    public void pack(final JarFile jarFile, final OutputStream outputStream) throws IOException {\n+        if (jarFile == null || outputStream == null) {\n             throw new IllegalArgumentException(\"Must specify both input and output streams\");\n         }\n         this.completed(0.0);\n         try {\n-            new Archive(file, out, this.options).pack();\n+            new Archive(jarFile, outputStream, this.options).pack();\n         }\n-        catch (final Pack200Exception e) {\n-            throw new IOException(\"Failed to pack Jar:\" + e);\n+        catch (final Pack200Exception obj) {\n+            throw new IOException(\"Failed to pack Jar:\" + obj);\n         }\n         this.completed(1.0);\n     }\n     \n-    public void pack(final JarInputStream in, final OutputStream out) throws IOException {\n-        if (in == null || out == null) {\n+    public void pack(final JarInputStream jarInputStream, final OutputStream outputStream) throws IOException {\n+        if (jarInputStream == null || outputStream == null) {\n             throw new IllegalArgumentException(\"Must specify both input and output streams\");\n         }\n         this.completed(0.0);\n-        final PackingOptions options = new PackingOptions();\n+        final PackingOptions packingOptions = new PackingOptions();\n         try {\n-            new Archive(in, out, options).pack();\n+            new Archive(jarInputStream, outputStream, packingOptions).pack();\n         }\n-        catch (final Pack200Exception e) {\n-            throw new IOException(\"Failed to pack Jar:\" + e);\n+        catch (final Pack200Exception obj) {\n+            throw new IOException(\"Failed to pack Jar:\" + obj);\n         }\n         this.completed(1.0);\n-        in.close();\n+        jarInputStream.close();\n     }\n     \n-    protected void firePropertyChange(final String propertyName, final Object oldValue, final Object newValue) {\n-        super.firePropertyChange(propertyName, oldValue, newValue);\n-        if (newValue != null && !newValue.equals(oldValue)) {\n-            if (propertyName.startsWith(\"pack.class.attribute.\")) {\n-                final String attributeName = propertyName.substring(\"pack.class.attribute.\".length());\n-                this.options.addClassAttributeAction(attributeName, (String)newValue);\n-            }\n-            else if (propertyName.startsWith(\"pack.code.attribute.\")) {\n-                final String attributeName = propertyName.substring(\"pack.code.attribute.\".length());\n-                this.options.addCodeAttributeAction(attributeName, (String)newValue);\n-            }\n-            else if (propertyName.equals(\"pack.deflate.hint\")) {\n-                this.options.setDeflateHint((String)newValue);\n-            }\n-            else if (propertyName.equals(\"pack.effort\")) {\n-                this.options.setEffort(Integer.parseInt((String)newValue));\n-            }\n-            else if (propertyName.startsWith(\"pack.field.attribute.\")) {\n-                final String attributeName = propertyName.substring(\"pack.field.attribute.\".length());\n-                this.options.addFieldAttributeAction(attributeName, (String)newValue);\n-            }\n-            else if (propertyName.equals(\"pack.keep.file.order\")) {\n-                this.options.setKeepFileOrder(Boolean.parseBoolean((String)newValue));\n-            }\n-            else if (propertyName.startsWith(\"pack.method.attribute.\")) {\n-                final String attributeName = propertyName.substring(\"pack.method.attribute.\".length());\n-                this.options.addMethodAttributeAction(attributeName, (String)newValue);\n-            }\n-            else if (propertyName.equals(\"pack.modification.time\")) {\n-                this.options.setModificationTime((String)newValue);\n-            }\n-            else if (propertyName.startsWith(\"pack.pass.file.\")) {\n-                if (oldValue != null && !oldValue.equals(\"\")) {\n-                    this.options.removePassFile((String)oldValue);\n+    protected void firePropertyChange(final String s, final Object obj, final Object o) {\n+        super.firePropertyChange(s, obj, o);\n+        if (o != null && !o.equals(obj)) {\n+            if (s.startsWith(\"pack.class.attribute.\")) {\n+                this.options.addClassAttributeAction(s.substring(\"pack.class.attribute.\".length()), (String)o);\n+            }\n+            else if (s.startsWith(\"pack.code.attribute.\")) {\n+                this.options.addCodeAttributeAction(s.substring(\"pack.code.attribute.\".length()), (String)o);\n+            }\n+            else if (s.equals(\"pack.deflate.hint\")) {\n+                this.options.setDeflateHint((String)o);\n+            }\n+            else if (s.equals(\"pack.effort\")) {\n+                this.options.setEffort(Integer.parseInt((String)o));\n+            }\n+            else if (s.startsWith(\"pack.field.attribute.\")) {\n+                this.options.addFieldAttributeAction(s.substring(\"pack.field.attribute.\".length()), (String)o);\n+            }\n+            else if (s.equals(\"pack.keep.file.order\")) {\n+                this.options.setKeepFileOrder(Boolean.parseBoolean((String)o));\n+            }\n+            else if (s.startsWith(\"pack.method.attribute.\")) {\n+                this.options.addMethodAttributeAction(s.substring(\"pack.method.attribute.\".length()), (String)o);\n+            }\n+            else if (s.equals(\"pack.modification.time\")) {\n+                this.options.setModificationTime((String)o);\n+            }\n+            else if (s.startsWith(\"pack.pass.file.\")) {\n+                if (obj != null && !obj.equals(\"\")) {\n+                    this.options.removePassFile((String)obj);\n                 }\n-                this.options.addPassFile((String)newValue);\n+                this.options.addPassFile((String)o);\n             }\n-            else if (propertyName.equals(\"pack.segment.limit\")) {\n-                this.options.setSegmentLimit(Long.parseLong((String)newValue));\n+            else if (s.equals(\"pack.segment.limit\")) {\n+                this.options.setSegmentLimit(Long.parseLong((String)o));\n             }\n-            else if (propertyName.equals(\"pack.unknown.attribute\")) {\n-                this.options.setUnknownAttributeAction((String)newValue);\n+            else if (s.equals(\"pack.unknown.attribute\")) {\n+                this.options.setUnknownAttributeAction((String)o);\n             }\n         }\n     }\n }\n"}]}
