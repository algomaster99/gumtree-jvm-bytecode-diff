{"diffoscope-json-version": 1, "source1": "first/TFTPAckPacket.class", "source2": "second/TFTPAckPacket.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,43 +4,43 @@\n import java.net.DatagramPacket;\n import java.net.InetAddress;\n \n public final class TFTPAckPacket extends TFTPPacket\n {\n     int blockNumber;\n     \n-    public TFTPAckPacket(final InetAddress destination, final int port, final int blockNumber) {\n-        super(4, destination, port);\n+    public TFTPAckPacket(final InetAddress inetAddress, final int n, final int blockNumber) {\n+        super(4, inetAddress, n);\n         this.blockNumber = blockNumber;\n     }\n     \n-    TFTPAckPacket(final DatagramPacket datagram) throws TFTPPacketException {\n-        super(4, datagram.getAddress(), datagram.getPort());\n-        final byte[] data = datagram.getData();\n+    TFTPAckPacket(final DatagramPacket datagramPacket) throws TFTPPacketException {\n+        super(4, datagramPacket.getAddress(), datagramPacket.getPort());\n+        final byte[] data = datagramPacket.getData();\n         if (this.getType() != data[1]) {\n             throw new TFTPPacketException(\"TFTP operator code does not match type.\");\n         }\n         this.blockNumber = ((data[2] & 0xFF) << 8 | (data[3] & 0xFF));\n     }\n     \n-    DatagramPacket _newDatagram(final DatagramPacket datagram, final byte[] data) {\n+    DatagramPacket _newDatagram(final DatagramPacket datagramPacket, final byte[] data) {\n         data[0] = 0;\n         data[1] = (byte)this.type;\n         data[2] = (byte)((this.blockNumber & 0xFFFF) >> 8);\n         data[3] = (byte)(this.blockNumber & 0xFF);\n-        datagram.setAddress(this.address);\n-        datagram.setPort(this.port);\n-        datagram.setData(data);\n-        datagram.setLength(4);\n-        return datagram;\n+        datagramPacket.setAddress(this.address);\n+        datagramPacket.setPort(this.port);\n+        datagramPacket.setData(data);\n+        datagramPacket.setLength(4);\n+        return datagramPacket;\n     }\n     \n     public DatagramPacket newDatagram() {\n-        final byte[] data = { 0, (byte)this.type, (byte)((this.blockNumber & 0xFFFF) >> 8), (byte)(this.blockNumber & 0xFF) };\n-        return new DatagramPacket(data, data.length, this.address, this.port);\n+        final byte[] buf = { 0, (byte)this.type, (byte)((this.blockNumber & 0xFFFF) >> 8), (byte)(this.blockNumber & 0xFF) };\n+        return new DatagramPacket(buf, buf.length, this.address, this.port);\n     }\n     \n     public int getBlockNumber() {\n         return this.blockNumber;\n     }\n     \n     public void setBlockNumber(final int blockNumber) {\n"}]}
