{"diffoscope-json-version": 1, "source1": "first/XML.class", "source2": "second/XML.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,179 +1,179 @@\n-  SHA-256 checksum eb2c24f29c3fdbc07e12db50d4e22d16481564296bb936bd4504910b90b89f4f\n+  SHA-256 checksum eccb6044b66f2432d70577d813d2cfa9af931cab1ce0e1d0e0dec1d54a601a3f\n   Compiled from \"XML.java\"\n public class org.json.XML\n   minor version: 0\n   major version: 50\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #76                         // org/json/XML\n   super_class: #163                       // java/lang/Object\n   interfaces: 0, fields: 11, methods: 21, attributes: 2\n Constant pool:\n-    #1 = Methodref          #163.#234     // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #235          // org/json/XML$1\n-    #3 = Methodref          #2.#236       // org/json/XML$1.\"<init>\":(Ljava/lang/String;)V\n-    #4 = Class              #237          // java/lang/StringBuilder\n-    #5 = Methodref          #70.#238      // java/lang/String.length:()I\n-    #6 = Methodref          #4.#239       // java/lang/StringBuilder.\"<init>\":(I)V\n-    #7 = Methodref          #76.#240      // org/json/XML.codePointIterator:(Ljava/lang/String;)Ljava/lang/Iterable;\n-    #8 = InterfaceMethodref #241.#242     // java/lang/Iterable.iterator:()Ljava/util/Iterator;\n-    #9 = InterfaceMethodref #243.#244     // java/util/Iterator.hasNext:()Z\n-   #10 = InterfaceMethodref #243.#245     // java/util/Iterator.next:()Ljava/lang/Object;\n-   #11 = Class              #246          // java/lang/Integer\n-   #12 = Methodref          #11.#247      // java/lang/Integer.intValue:()I\n-   #13 = String             #248          // &amp;\n-   #14 = Methodref          #4.#249       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #15 = String             #250          // &lt;\n-   #16 = String             #251          // &gt;\n-   #17 = String             #252          // &quot;\n-   #18 = String             #253          // &apos;\n-   #19 = Methodref          #76.#254      // org/json/XML.mustEscape:(I)Z\n-   #20 = String             #255          // &#x\n-   #21 = Methodref          #11.#256      // java/lang/Integer.toHexString:(I)Ljava/lang/String;\n-   #22 = Methodref          #4.#257       // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-   #23 = Methodref          #4.#258       // java/lang/StringBuilder.appendCodePoint:(I)Ljava/lang/StringBuilder;\n-   #24 = Methodref          #4.#259       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #25 = Methodref          #68.#260      // java/lang/Character.isISOControl:(I)Z\n+    #1 = Methodref          #163.#223     // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #224          // org/json/XML$1\n+    #3 = Methodref          #2.#225       // org/json/XML$1.\"<init>\":(Ljava/lang/String;)V\n+    #4 = Class              #226          // java/lang/StringBuilder\n+    #5 = Methodref          #70.#227      // java/lang/String.length:()I\n+    #6 = Methodref          #4.#228       // java/lang/StringBuilder.\"<init>\":(I)V\n+    #7 = Methodref          #76.#229      // org/json/XML.codePointIterator:(Ljava/lang/String;)Ljava/lang/Iterable;\n+    #8 = InterfaceMethodref #230.#231     // java/lang/Iterable.iterator:()Ljava/util/Iterator;\n+    #9 = InterfaceMethodref #190.#232     // java/util/Iterator.hasNext:()Z\n+   #10 = InterfaceMethodref #190.#233     // java/util/Iterator.next:()Ljava/lang/Object;\n+   #11 = Class              #234          // java/lang/Integer\n+   #12 = Methodref          #11.#235      // java/lang/Integer.intValue:()I\n+   #13 = String             #236          // &amp;\n+   #14 = Methodref          #4.#237       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #15 = String             #238          // &lt;\n+   #16 = String             #239          // &gt;\n+   #17 = String             #240          // &quot;\n+   #18 = String             #241          // &apos;\n+   #19 = Methodref          #76.#242      // org/json/XML.mustEscape:(I)Z\n+   #20 = String             #243          // &#x\n+   #21 = Methodref          #11.#244      // java/lang/Integer.toHexString:(I)Ljava/lang/String;\n+   #22 = Methodref          #4.#245       // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+   #23 = Methodref          #4.#246       // java/lang/StringBuilder.appendCodePoint:(I)Ljava/lang/StringBuilder;\n+   #24 = Methodref          #4.#247       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #25 = Methodref          #68.#248      // java/lang/Character.isISOControl:(I)Z\n    #26 = Integer            55295\n    #27 = Integer            57344\n    #28 = Integer            65533\n    #29 = Integer            65536\n    #30 = Integer            1114111\n-   #31 = Methodref          #70.#261      // java/lang/String.charAt:(I)C\n-   #32 = Methodref          #70.#262      // java/lang/String.indexOf:(II)I\n-   #33 = Methodref          #70.#263      // java/lang/String.substring:(II)Ljava/lang/String;\n-   #34 = Methodref          #137.#264     // org/json/XMLTokener.unescapeEntity:(Ljava/lang/String;)Ljava/lang/String;\n-   #35 = Class              #265          // org/json/JSONException\n-   #36 = String             #266          // Empty string.\n-   #37 = Methodref          #35.#236      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n-   #38 = Methodref          #68.#267      // java/lang/Character.isWhitespace:(C)Z\n-   #39 = Methodref          #4.#234       // java/lang/StringBuilder.\"<init>\":()V\n-   #40 = String             #268          // \\'\n-   #41 = String             #269          // \\' contains a space character.\n-   #42 = Methodref          #137.#270     // org/json/XMLTokener.nextToken:()Ljava/lang/Object;\n-   #43 = Fieldref           #76.#271      // org/json/XML.BANG:Ljava/lang/Character;\n-   #44 = Methodref          #137.#272     // org/json/XMLTokener.next:()C\n-   #45 = String             #273          // -->\n-   #46 = Methodref          #137.#274     // org/json/XMLTokener.skipPast:(Ljava/lang/String;)V\n-   #47 = Methodref          #137.#275     // org/json/XMLTokener.back:()V\n-   #48 = String             #276          // CDATA\n-   #49 = Methodref          #70.#277      // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #50 = Methodref          #137.#278     // org/json/XMLTokener.nextCDATA:()Ljava/lang/String;\n-   #51 = Methodref          #279.#280     // org/json/XMLParserConfiguration.getcDataTagName:()Ljava/lang/String;\n-   #52 = Methodref          #71.#281      // org/json/JSONObject.accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #53 = String             #282          // Expected \\'CDATA[\\'\n-   #54 = Methodref          #137.#283     // org/json/XMLTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-   #55 = Methodref          #137.#284     // org/json/XMLTokener.nextMeta:()Ljava/lang/Object;\n-   #56 = String             #285          // Missing \\'>\\' after \\'<!\\'.\n-   #57 = Fieldref           #76.#286      // org/json/XML.LT:Ljava/lang/Character;\n-   #58 = Fieldref           #76.#287      // org/json/XML.GT:Ljava/lang/Character;\n-   #59 = Fieldref           #76.#288      // org/json/XML.QUEST:Ljava/lang/Character;\n-   #60 = String             #289          // ?>\n-   #61 = Fieldref           #76.#290      // org/json/XML.SLASH:Ljava/lang/Character;\n-   #62 = String             #291          // Mismatched close tag\n-   #63 = Methodref          #4.#292       // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #64 = Methodref          #163.#277     // java/lang/Object.equals:(Ljava/lang/Object;)Z\n-   #65 = String             #293          // Mismatched\n-   #66 = String             #294          //  and\n-   #67 = String             #295          // Misshaped close tag\n-   #68 = Class              #296          // java/lang/Character\n-   #69 = String             #297          // Misshaped tag\n-   #70 = Class              #298          // java/lang/String\n-   #71 = Class              #299          // org/json/JSONObject\n-   #72 = Methodref          #71.#234      // org/json/JSONObject.\"<init>\":()V\n-   #73 = Fieldref           #76.#300      // org/json/XML.EQ:Ljava/lang/Character;\n-   #74 = String             #301          // Missing value\n-   #75 = Methodref          #279.#302     // org/json/XMLParserConfiguration.isConvertNilAttributeToNull:()Z\n-   #76 = Class              #303          // org/json/XML\n-   #77 = String             #304          // xsi:nil\n-   #78 = Methodref          #305.#306     // java/lang/Boolean.parseBoolean:(Ljava/lang/String;)Z\n-   #79 = Methodref          #279.#307     // org/json/XMLParserConfiguration.getXsiTypeMap:()Ljava/util/Map;\n-   #80 = InterfaceMethodref #308.#309     // java/util/Map.isEmpty:()Z\n-   #81 = String             #310          // xsi:type\n-   #82 = InterfaceMethodref #308.#311     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #83 = Class              #312          // org/json/XMLXsiTypeConverter\n-   #84 = Methodref          #279.#313     // org/json/XMLParserConfiguration.isKeepStrings:()Z\n-   #85 = Methodref          #76.#314      // org/json/XML.stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n-   #86 = String             #315          //\n-   #87 = Methodref          #279.#316     // org/json/XMLParserConfiguration.getForceList:()Ljava/util/Set;\n-   #88 = InterfaceMethodref #317.#318     // java/util/Set.contains:(Ljava/lang/Object;)Z\n-   #89 = Fieldref           #71.#319      // org/json/JSONObject.NULL:Ljava/lang/Object;\n-   #90 = Methodref          #71.#320      // org/json/JSONObject.append:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #91 = Methodref          #71.#238      // org/json/JSONObject.length:()I\n-   #92 = Class              #321          // org/json/JSONArray\n-   #93 = Methodref          #92.#234      // org/json/JSONArray.\"<init>\":()V\n-   #94 = Methodref          #71.#322      // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #95 = Methodref          #137.#323     // org/json/XMLTokener.nextContent:()Ljava/lang/Object;\n-   #96 = String             #324          // Unclosed tag\n-   #97 = Methodref          #76.#325      // org/json/XML.stringToValue:(Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n-   #98 = Methodref          #76.#326      // org/json/XML.parse:(Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Z\n-   #99 = Methodref          #71.#327      // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n-  #100 = InterfaceMethodref #83.#328      // org/json/XMLXsiTypeConverter.convert:(Ljava/lang/String;)Ljava/lang/Object;\n-  #101 = String             #329          // true\n-  #102 = Methodref          #70.#330      // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n-  #103 = Fieldref           #305.#331     // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n-  #104 = String             #332          // false\n-  #105 = Fieldref           #305.#333     // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n-  #106 = String             #334          // null\n-  #107 = Methodref          #76.#335      // org/json/XML.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-  #108 = Class              #336          // java/lang/Exception\n-  #109 = Methodref          #76.#337      // org/json/XML.isDecimalNotation:(Ljava/lang/String;)Z\n-  #110 = Class              #338          // java/math/BigDecimal\n-  #111 = Methodref          #110.#236     // java/math/BigDecimal.\"<init>\":(Ljava/lang/String;)V\n-  #112 = Fieldref           #110.#339     // java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;\n-  #113 = Methodref          #110.#340     // java/math/BigDecimal.compareTo:(Ljava/math/BigDecimal;)I\n+   #31 = Methodref          #70.#249      // java/lang/String.charAt:(I)C\n+   #32 = Methodref          #70.#250      // java/lang/String.indexOf:(II)I\n+   #33 = Methodref          #70.#251      // java/lang/String.substring:(II)Ljava/lang/String;\n+   #34 = Methodref          #137.#252     // org/json/XMLTokener.unescapeEntity:(Ljava/lang/String;)Ljava/lang/String;\n+   #35 = Class              #253          // org/json/JSONException\n+   #36 = String             #254          // Empty string.\n+   #37 = Methodref          #35.#225      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n+   #38 = Methodref          #68.#255      // java/lang/Character.isWhitespace:(C)Z\n+   #39 = Methodref          #4.#223       // java/lang/StringBuilder.\"<init>\":()V\n+   #40 = String             #256          // \\'\n+   #41 = String             #257          // \\' contains a space character.\n+   #42 = Methodref          #137.#258     // org/json/XMLTokener.nextToken:()Ljava/lang/Object;\n+   #43 = Fieldref           #76.#259      // org/json/XML.BANG:Ljava/lang/Character;\n+   #44 = Methodref          #137.#260     // org/json/XMLTokener.next:()C\n+   #45 = String             #261          // -->\n+   #46 = Methodref          #137.#262     // org/json/XMLTokener.skipPast:(Ljava/lang/String;)V\n+   #47 = Methodref          #137.#263     // org/json/XMLTokener.back:()V\n+   #48 = String             #264          // CDATA\n+   #49 = Methodref          #70.#265      // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #50 = Methodref          #137.#266     // org/json/XMLTokener.nextCDATA:()Ljava/lang/String;\n+   #51 = Methodref          #199.#267     // org/json/XMLParserConfiguration.getcDataTagName:()Ljava/lang/String;\n+   #52 = Methodref          #71.#268      // org/json/JSONObject.accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #53 = String             #269          // Expected \\'CDATA[\\'\n+   #54 = Methodref          #137.#270     // org/json/XMLTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+   #55 = Methodref          #137.#271     // org/json/XMLTokener.nextMeta:()Ljava/lang/Object;\n+   #56 = String             #272          // Missing \\'>\\' after \\'<!\\'.\n+   #57 = Fieldref           #76.#273      // org/json/XML.LT:Ljava/lang/Character;\n+   #58 = Fieldref           #76.#274      // org/json/XML.GT:Ljava/lang/Character;\n+   #59 = Fieldref           #76.#275      // org/json/XML.QUEST:Ljava/lang/Character;\n+   #60 = String             #276          // ?>\n+   #61 = Fieldref           #76.#277      // org/json/XML.SLASH:Ljava/lang/Character;\n+   #62 = String             #278          // Mismatched close tag\n+   #63 = Methodref          #4.#279       // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #64 = Methodref          #163.#265     // java/lang/Object.equals:(Ljava/lang/Object;)Z\n+   #65 = String             #280          // Mismatched\n+   #66 = String             #281          //  and\n+   #67 = String             #282          // Misshaped close tag\n+   #68 = Class              #283          // java/lang/Character\n+   #69 = String             #284          // Misshaped tag\n+   #70 = Class              #285          // java/lang/String\n+   #71 = Class              #286          // org/json/JSONObject\n+   #72 = Methodref          #71.#223      // org/json/JSONObject.\"<init>\":()V\n+   #73 = Fieldref           #76.#287      // org/json/XML.EQ:Ljava/lang/Character;\n+   #74 = String             #288          // Missing value\n+   #75 = Methodref          #199.#289     // org/json/XMLParserConfiguration.isConvertNilAttributeToNull:()Z\n+   #76 = Class              #290          // org/json/XML\n+   #77 = String             #291          // xsi:nil\n+   #78 = Methodref          #292.#293     // java/lang/Boolean.parseBoolean:(Ljava/lang/String;)Z\n+   #79 = Methodref          #199.#294     // org/json/XMLParserConfiguration.getXsiTypeMap:()Ljava/util/Map;\n+   #80 = InterfaceMethodref #295.#296     // java/util/Map.isEmpty:()Z\n+   #81 = String             #297          // xsi:type\n+   #82 = InterfaceMethodref #295.#298     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #83 = Class              #299          // org/json/XMLXsiTypeConverter\n+   #84 = Methodref          #199.#300     // org/json/XMLParserConfiguration.isKeepStrings:()Z\n+   #85 = Methodref          #76.#301      // org/json/XML.stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n+   #86 = String             #302          //\n+   #87 = Methodref          #199.#303     // org/json/XMLParserConfiguration.getForceList:()Ljava/util/Set;\n+   #88 = InterfaceMethodref #304.#305     // java/util/Set.contains:(Ljava/lang/Object;)Z\n+   #89 = Fieldref           #71.#306      // org/json/JSONObject.NULL:Ljava/lang/Object;\n+   #90 = Methodref          #71.#307      // org/json/JSONObject.append:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #91 = Methodref          #71.#227      // org/json/JSONObject.length:()I\n+   #92 = Class              #308          // org/json/JSONArray\n+   #93 = Methodref          #92.#223      // org/json/JSONArray.\"<init>\":()V\n+   #94 = Methodref          #71.#309      // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #95 = Methodref          #137.#310     // org/json/XMLTokener.nextContent:()Ljava/lang/Object;\n+   #96 = String             #311          // Unclosed tag\n+   #97 = Methodref          #76.#312      // org/json/XML.stringToValue:(Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n+   #98 = Methodref          #76.#313      // org/json/XML.parse:(Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Z\n+   #99 = Methodref          #71.#314      // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n+  #100 = InterfaceMethodref #83.#315      // org/json/XMLXsiTypeConverter.convert:(Ljava/lang/String;)Ljava/lang/Object;\n+  #101 = String             #316          // true\n+  #102 = Methodref          #70.#317      // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n+  #103 = Fieldref           #292.#318     // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n+  #104 = String             #319          // false\n+  #105 = Fieldref           #292.#320     // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n+  #106 = String             #321          // null\n+  #107 = Methodref          #76.#322      // org/json/XML.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+  #108 = Class              #323          // java/lang/Exception\n+  #109 = Methodref          #76.#324      // org/json/XML.isDecimalNotation:(Ljava/lang/String;)Z\n+  #110 = Class              #325          // java/math/BigDecimal\n+  #111 = Methodref          #110.#225     // java/math/BigDecimal.\"<init>\":(Ljava/lang/String;)V\n+  #112 = Fieldref           #110.#326     // java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;\n+  #113 = Methodref          #110.#327     // java/math/BigDecimal.compareTo:(Ljava/math/BigDecimal;)I\n   #114 = Double             -0.0d\n-  #116 = Methodref          #341.#342     // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n-  #117 = Class              #343          // java/lang/NumberFormatException\n-  #118 = Methodref          #341.#344     // java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n-  #119 = Methodref          #341.#345     // java/lang/Double.isNaN:()Z\n-  #120 = Methodref          #341.#346     // java/lang/Double.isInfinite:()Z\n-  #121 = String             #347          // val [\n-  #122 = String             #348          // ] is not a valid number.\n-  #123 = Methodref          #117.#236     // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n-  #124 = Class              #349          // java/math/BigInteger\n-  #125 = Methodref          #124.#236     // java/math/BigInteger.\"<init>\":(Ljava/lang/String;)V\n-  #126 = Methodref          #124.#350     // java/math/BigInteger.bitLength:()I\n-  #127 = Methodref          #124.#247     // java/math/BigInteger.intValue:()I\n-  #128 = Methodref          #11.#351      // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-  #129 = Methodref          #124.#352     // java/math/BigInteger.longValue:()J\n-  #130 = Methodref          #353.#354     // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n-  #131 = Methodref          #70.#355      // java/lang/String.indexOf:(I)I\n-  #132 = String             #356          // -0\n-  #133 = Fieldref           #279.#357     // org/json/XMLParserConfiguration.ORIGINAL:Lorg/json/XMLParserConfiguration;\n-  #134 = Methodref          #76.#358      // org/json/XML.toJSONObject:(Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #135 = Methodref          #76.#359      // org/json/XML.toJSONObject:(Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #136 = Fieldref           #279.#360     // org/json/XMLParserConfiguration.KEEP_STRINGS:Lorg/json/XMLParserConfiguration;\n-  #137 = Class              #361          // org/json/XMLTokener\n-  #138 = Methodref          #137.#362     // org/json/XMLTokener.\"<init>\":(Ljava/io/Reader;)V\n-  #139 = Methodref          #137.#363     // org/json/XMLTokener.more:()Z\n-  #140 = String             #364          // <\n-  #141 = Class              #365          // java/io/StringReader\n-  #142 = Methodref          #141.#236     // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n-  #143 = Methodref          #76.#366      // org/json/XML.toJSONObject:(Ljava/io/Reader;Z)Lorg/json/JSONObject;\n-  #144 = Methodref          #76.#367      // org/json/XML.toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n-  #145 = Methodref          #71.#368      // org/json/JSONObject.keySet:()Ljava/util/Set;\n-  #146 = InterfaceMethodref #317.#242     // java/util/Set.iterator:()Ljava/util/Iterator;\n-  #147 = Methodref          #163.#369     // java/lang/Object.getClass:()Ljava/lang/Class;\n-  #148 = Methodref          #370.#371     // java/lang/Class.isArray:()Z\n-  #149 = Methodref          #92.#372      // org/json/JSONArray.\"<init>\":(Ljava/lang/Object;)V\n-  #150 = Methodref          #92.#238      // org/json/JSONArray.length:()I\n-  #151 = Methodref          #92.#373      // org/json/JSONArray.opt:(I)Ljava/lang/Object;\n-  #152 = Methodref          #163.#259     // java/lang/Object.toString:()Ljava/lang/String;\n-  #153 = Methodref          #76.#374      // org/json/XML.escape:(Ljava/lang/String;)Ljava/lang/String;\n-  #154 = String             #375          // </\n-  #155 = String             #376          // />\n-  #156 = String             #377          // array\n-  #157 = String             #378          // \\\"\n-  #158 = String             #379          // >\n-  #159 = Methodref          #68.#380      // java/lang/Character.valueOf:(C)Ljava/lang/Character;\n-  #160 = Fieldref           #76.#381      // org/json/XML.AMP:Ljava/lang/Character;\n-  #161 = Fieldref           #76.#382      // org/json/XML.APOS:Ljava/lang/Character;\n-  #162 = Fieldref           #76.#383      // org/json/XML.QUOT:Ljava/lang/Character;\n-  #163 = Class              #384          // java/lang/Object\n+  #116 = Methodref          #206.#328     // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n+  #117 = Class              #329          // java/lang/NumberFormatException\n+  #118 = Methodref          #206.#330     // java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n+  #119 = Methodref          #206.#331     // java/lang/Double.isNaN:()Z\n+  #120 = Methodref          #206.#332     // java/lang/Double.isInfinite:()Z\n+  #121 = String             #333          // val [\n+  #122 = String             #334          // ] is not a valid number.\n+  #123 = Methodref          #117.#225     // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n+  #124 = Class              #335          // java/math/BigInteger\n+  #125 = Methodref          #124.#225     // java/math/BigInteger.\"<init>\":(Ljava/lang/String;)V\n+  #126 = Methodref          #124.#336     // java/math/BigInteger.bitLength:()I\n+  #127 = Methodref          #124.#235     // java/math/BigInteger.intValue:()I\n+  #128 = Methodref          #11.#337      // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+  #129 = Methodref          #124.#338     // java/math/BigInteger.longValue:()J\n+  #130 = Methodref          #339.#340     // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n+  #131 = Methodref          #70.#341      // java/lang/String.indexOf:(I)I\n+  #132 = String             #342          // -0\n+  #133 = Fieldref           #199.#343     // org/json/XMLParserConfiguration.ORIGINAL:Lorg/json/XMLParserConfiguration;\n+  #134 = Methodref          #76.#344      // org/json/XML.toJSONObject:(Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #135 = Methodref          #76.#345      // org/json/XML.toJSONObject:(Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #136 = Fieldref           #199.#346     // org/json/XMLParserConfiguration.KEEP_STRINGS:Lorg/json/XMLParserConfiguration;\n+  #137 = Class              #347          // org/json/XMLTokener\n+  #138 = Methodref          #137.#348     // org/json/XMLTokener.\"<init>\":(Ljava/io/Reader;)V\n+  #139 = Methodref          #137.#349     // org/json/XMLTokener.more:()Z\n+  #140 = String             #350          // <\n+  #141 = Class              #351          // java/io/StringReader\n+  #142 = Methodref          #141.#225     // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n+  #143 = Methodref          #76.#352      // org/json/XML.toJSONObject:(Ljava/io/Reader;Z)Lorg/json/JSONObject;\n+  #144 = Methodref          #76.#353      // org/json/XML.toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n+  #145 = Methodref          #71.#354      // org/json/JSONObject.keySet:()Ljava/util/Set;\n+  #146 = InterfaceMethodref #304.#231     // java/util/Set.iterator:()Ljava/util/Iterator;\n+  #147 = Methodref          #163.#355     // java/lang/Object.getClass:()Ljava/lang/Class;\n+  #148 = Methodref          #356.#357     // java/lang/Class.isArray:()Z\n+  #149 = Methodref          #92.#358      // org/json/JSONArray.\"<init>\":(Ljava/lang/Object;)V\n+  #150 = Methodref          #92.#227      // org/json/JSONArray.length:()I\n+  #151 = Methodref          #92.#359      // org/json/JSONArray.opt:(I)Ljava/lang/Object;\n+  #152 = Methodref          #163.#247     // java/lang/Object.toString:()Ljava/lang/String;\n+  #153 = Methodref          #76.#360      // org/json/XML.escape:(Ljava/lang/String;)Ljava/lang/String;\n+  #154 = String             #361          // </\n+  #155 = String             #362          // />\n+  #156 = String             #363          // array\n+  #157 = String             #364          // \\\"\n+  #158 = String             #365          // >\n+  #159 = Methodref          #68.#366      // java/lang/Character.valueOf:(C)Ljava/lang/Character;\n+  #160 = Fieldref           #76.#367      // org/json/XML.AMP:Ljava/lang/Character;\n+  #161 = Fieldref           #76.#368      // org/json/XML.APOS:Ljava/lang/Character;\n+  #162 = Fieldref           #76.#369      // org/json/XML.QUOT:Ljava/lang/Character;\n+  #163 = Class              #370          // java/lang/Object\n   #164 = Utf8               InnerClasses\n   #165 = Utf8               AMP\n   #166 = Utf8               Ljava/lang/Character;\n   #167 = Utf8               APOS\n   #168 = Utf8               BANG\n   #169 = Utf8               EQ\n   #170 = Utf8               GT\n@@ -192,308 +192,294 @@\n   #183 = Utf8               codePointIterator\n   #184 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable;\n   #185 = Utf8               Signature\n   #186 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable<Ljava/lang/Integer;>;\n   #187 = Utf8               escape\n   #188 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n   #189 = Utf8               StackMapTable\n-  #190 = Class              #237          // java/lang/StringBuilder\n-  #191 = Class              #385          // java/util/Iterator\n-  #192 = Utf8               mustEscape\n-  #193 = Utf8               (I)Z\n-  #194 = Utf8               unescape\n-  #195 = Utf8               noSpace\n-  #196 = Utf8               (Ljava/lang/String;)V\n-  #197 = Class              #298          // java/lang/String\n-  #198 = Utf8               Exceptions\n-  #199 = Utf8               parse\n-  #200 = Utf8               (Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Z\n-  #201 = Class              #361          // org/json/XMLTokener\n-  #202 = Class              #299          // org/json/JSONObject\n-  #203 = Class              #386          // org/json/XMLParserConfiguration\n-  #204 = Class              #384          // java/lang/Object\n-  #205 = Class              #312          // org/json/XMLXsiTypeConverter\n-  #206 = Utf8               stringToValue\n-  #207 = Utf8               (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n-  #208 = Utf8               (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter<*>;)Ljava/lang/Object;\n-  #209 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n-  #210 = Class              #336          // java/lang/Exception\n-  #211 = Utf8               stringToNumber\n-  #212 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n-  #213 = Class              #338          // java/math/BigDecimal\n-  #214 = Class              #343          // java/lang/NumberFormatException\n-  #215 = Class              #387          // java/lang/Double\n-  #216 = Class              #349          // java/math/BigInteger\n-  #217 = Utf8               isDecimalNotation\n-  #218 = Utf8               (Ljava/lang/String;)Z\n-  #219 = Utf8               toJSONObject\n-  #220 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n-  #221 = Utf8               (Ljava/io/Reader;)Lorg/json/JSONObject;\n-  #222 = Utf8               (Ljava/io/Reader;Z)Lorg/json/JSONObject;\n-  #223 = Utf8               (Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #224 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n-  #225 = Utf8               (Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #226 = Utf8               toString\n-  #227 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n-  #228 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n-  #229 = Utf8               (Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n-  #230 = Class              #321          // org/json/JSONArray\n-  #231 = Utf8               <clinit>\n-  #232 = Utf8               SourceFile\n-  #233 = Utf8               XML.java\n-  #234 = NameAndType        #179:#180     // \"<init>\":()V\n-  #235 = Utf8               org/json/XML$1\n-  #236 = NameAndType        #179:#196     // \"<init>\":(Ljava/lang/String;)V\n-  #237 = Utf8               java/lang/StringBuilder\n-  #238 = NameAndType        #388:#389     // length:()I\n-  #239 = NameAndType        #179:#390     // \"<init>\":(I)V\n-  #240 = NameAndType        #183:#184     // codePointIterator:(Ljava/lang/String;)Ljava/lang/Iterable;\n-  #241 = Class              #391          // java/lang/Iterable\n-  #242 = NameAndType        #392:#393     // iterator:()Ljava/util/Iterator;\n-  #243 = Class              #385          // java/util/Iterator\n-  #244 = NameAndType        #394:#395     // hasNext:()Z\n-  #245 = NameAndType        #396:#397     // next:()Ljava/lang/Object;\n-  #246 = Utf8               java/lang/Integer\n-  #247 = NameAndType        #398:#389     // intValue:()I\n-  #248 = Utf8               &amp;\n-  #249 = NameAndType        #399:#400     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #250 = Utf8               &lt;\n-  #251 = Utf8               &gt;\n-  #252 = Utf8               &quot;\n-  #253 = Utf8               &apos;\n-  #254 = NameAndType        #192:#193     // mustEscape:(I)Z\n-  #255 = Utf8               &#x\n-  #256 = NameAndType        #401:#402     // toHexString:(I)Ljava/lang/String;\n-  #257 = NameAndType        #399:#403     // append:(C)Ljava/lang/StringBuilder;\n-  #258 = NameAndType        #404:#405     // appendCodePoint:(I)Ljava/lang/StringBuilder;\n-  #259 = NameAndType        #226:#406     // toString:()Ljava/lang/String;\n-  #260 = NameAndType        #407:#193     // isISOControl:(I)Z\n-  #261 = NameAndType        #408:#409     // charAt:(I)C\n-  #262 = NameAndType        #410:#411     // indexOf:(II)I\n-  #263 = NameAndType        #412:#413     // substring:(II)Ljava/lang/String;\n-  #264 = NameAndType        #414:#188     // unescapeEntity:(Ljava/lang/String;)Ljava/lang/String;\n-  #265 = Utf8               org/json/JSONException\n-  #266 = Utf8               Empty string.\n-  #267 = NameAndType        #415:#416     // isWhitespace:(C)Z\n-  #268 = Utf8               \\'\n-  #269 = Utf8               \\' contains a space character.\n-  #270 = NameAndType        #417:#397     // nextToken:()Ljava/lang/Object;\n-  #271 = NameAndType        #168:#166     // BANG:Ljava/lang/Character;\n-  #272 = NameAndType        #396:#418     // next:()C\n-  #273 = Utf8               -->\n-  #274 = NameAndType        #419:#196     // skipPast:(Ljava/lang/String;)V\n-  #275 = NameAndType        #420:#180     // back:()V\n-  #276 = Utf8               CDATA\n-  #277 = NameAndType        #421:#422     // equals:(Ljava/lang/Object;)Z\n-  #278 = NameAndType        #423:#406     // nextCDATA:()Ljava/lang/String;\n-  #279 = Class              #386          // org/json/XMLParserConfiguration\n-  #280 = NameAndType        #424:#406     // getcDataTagName:()Ljava/lang/String;\n-  #281 = NameAndType        #425:#426     // accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #282 = Utf8               Expected \\'CDATA[\\'\n-  #283 = NameAndType        #427:#428     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-  #284 = NameAndType        #429:#397     // nextMeta:()Ljava/lang/Object;\n-  #285 = Utf8               Missing \\'>\\' after \\'<!\\'.\n-  #286 = NameAndType        #171:#166     // LT:Ljava/lang/Character;\n-  #287 = NameAndType        #170:#166     // GT:Ljava/lang/Character;\n-  #288 = NameAndType        #172:#166     // QUEST:Ljava/lang/Character;\n-  #289 = Utf8               ?>\n-  #290 = NameAndType        #174:#166     // SLASH:Ljava/lang/Character;\n-  #291 = Utf8               Mismatched close tag\n-  #292 = NameAndType        #399:#430     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #293 = Utf8               Mismatched\n-  #294 = Utf8                and\n-  #295 = Utf8               Misshaped close tag\n-  #296 = Utf8               java/lang/Character\n-  #297 = Utf8               Misshaped tag\n-  #298 = Utf8               java/lang/String\n-  #299 = Utf8               org/json/JSONObject\n-  #300 = NameAndType        #169:#166     // EQ:Ljava/lang/Character;\n-  #301 = Utf8               Missing value\n-  #302 = NameAndType        #431:#395     // isConvertNilAttributeToNull:()Z\n-  #303 = Utf8               org/json/XML\n-  #304 = Utf8               xsi:nil\n-  #305 = Class              #432          // java/lang/Boolean\n-  #306 = NameAndType        #433:#218     // parseBoolean:(Ljava/lang/String;)Z\n-  #307 = NameAndType        #434:#435     // getXsiTypeMap:()Ljava/util/Map;\n-  #308 = Class              #436          // java/util/Map\n-  #309 = NameAndType        #437:#395     // isEmpty:()Z\n-  #310 = Utf8               xsi:type\n-  #311 = NameAndType        #438:#439     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #312 = Utf8               org/json/XMLXsiTypeConverter\n-  #313 = NameAndType        #440:#395     // isKeepStrings:()Z\n-  #314 = NameAndType        #206:#209     // stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n-  #315 = Utf8\n-  #316 = NameAndType        #441:#442     // getForceList:()Ljava/util/Set;\n-  #317 = Class              #443          // java/util/Set\n-  #318 = NameAndType        #444:#422     // contains:(Ljava/lang/Object;)Z\n-  #319 = NameAndType        #445:#446     // NULL:Ljava/lang/Object;\n-  #320 = NameAndType        #399:#426     // append:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #321 = Utf8               org/json/JSONArray\n-  #322 = NameAndType        #447:#426     // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #323 = NameAndType        #448:#397     // nextContent:()Ljava/lang/Object;\n-  #324 = Utf8               Unclosed tag\n-  #325 = NameAndType        #206:#207     // stringToValue:(Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n-  #326 = NameAndType        #199:#200     // parse:(Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Z\n-  #327 = NameAndType        #449:#209     // opt:(Ljava/lang/String;)Ljava/lang/Object;\n-  #328 = NameAndType        #450:#209     // convert:(Ljava/lang/String;)Ljava/lang/Object;\n-  #329 = Utf8               true\n-  #330 = NameAndType        #451:#218     // equalsIgnoreCase:(Ljava/lang/String;)Z\n-  #331 = NameAndType        #452:#453     // TRUE:Ljava/lang/Boolean;\n-  #332 = Utf8               false\n-  #333 = NameAndType        #454:#453     // FALSE:Ljava/lang/Boolean;\n-  #334 = Utf8               null\n-  #335 = NameAndType        #211:#212     // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-  #336 = Utf8               java/lang/Exception\n-  #337 = NameAndType        #217:#218     // isDecimalNotation:(Ljava/lang/String;)Z\n-  #338 = Utf8               java/math/BigDecimal\n-  #339 = NameAndType        #455:#456     // ZERO:Ljava/math/BigDecimal;\n-  #340 = NameAndType        #457:#458     // compareTo:(Ljava/math/BigDecimal;)I\n-  #341 = Class              #387          // java/lang/Double\n-  #342 = NameAndType        #459:#460     // valueOf:(D)Ljava/lang/Double;\n-  #343 = Utf8               java/lang/NumberFormatException\n-  #344 = NameAndType        #459:#461     // valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n-  #345 = NameAndType        #462:#395     // isNaN:()Z\n-  #346 = NameAndType        #463:#395     // isInfinite:()Z\n-  #347 = Utf8               val [\n-  #348 = Utf8               ] is not a valid number.\n-  #349 = Utf8               java/math/BigInteger\n-  #350 = NameAndType        #464:#389     // bitLength:()I\n-  #351 = NameAndType        #459:#465     // valueOf:(I)Ljava/lang/Integer;\n-  #352 = NameAndType        #466:#467     // longValue:()J\n-  #353 = Class              #468          // java/lang/Long\n-  #354 = NameAndType        #459:#469     // valueOf:(J)Ljava/lang/Long;\n-  #355 = NameAndType        #410:#470     // indexOf:(I)I\n-  #356 = Utf8               -0\n-  #357 = NameAndType        #471:#472     // ORIGINAL:Lorg/json/XMLParserConfiguration;\n-  #358 = NameAndType        #219:#225     // toJSONObject:(Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #359 = NameAndType        #219:#223     // toJSONObject:(Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #360 = NameAndType        #473:#472     // KEEP_STRINGS:Lorg/json/XMLParserConfiguration;\n-  #361 = Utf8               org/json/XMLTokener\n-  #362 = NameAndType        #179:#474     // \"<init>\":(Ljava/io/Reader;)V\n-  #363 = NameAndType        #475:#395     // more:()Z\n-  #364 = Utf8               <\n-  #365 = Utf8               java/io/StringReader\n-  #366 = NameAndType        #219:#222     // toJSONObject:(Ljava/io/Reader;Z)Lorg/json/JSONObject;\n-  #367 = NameAndType        #226:#229     // toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n-  #368 = NameAndType        #476:#442     // keySet:()Ljava/util/Set;\n-  #369 = NameAndType        #477:#478     // getClass:()Ljava/lang/Class;\n-  #370 = Class              #479          // java/lang/Class\n-  #371 = NameAndType        #480:#395     // isArray:()Z\n-  #372 = NameAndType        #179:#481     // \"<init>\":(Ljava/lang/Object;)V\n-  #373 = NameAndType        #449:#482     // opt:(I)Ljava/lang/Object;\n-  #374 = NameAndType        #187:#188     // escape:(Ljava/lang/String;)Ljava/lang/String;\n-  #375 = Utf8               </\n-  #376 = Utf8               />\n-  #377 = Utf8               array\n-  #378 = Utf8               \\\"\n-  #379 = Utf8               >\n-  #380 = NameAndType        #459:#483     // valueOf:(C)Ljava/lang/Character;\n-  #381 = NameAndType        #165:#166     // AMP:Ljava/lang/Character;\n-  #382 = NameAndType        #167:#166     // APOS:Ljava/lang/Character;\n-  #383 = NameAndType        #173:#166     // QUOT:Ljava/lang/Character;\n-  #384 = Utf8               java/lang/Object\n-  #385 = Utf8               java/util/Iterator\n-  #386 = Utf8               org/json/XMLParserConfiguration\n-  #387 = Utf8               java/lang/Double\n-  #388 = Utf8               length\n-  #389 = Utf8               ()I\n-  #390 = Utf8               (I)V\n-  #391 = Utf8               java/lang/Iterable\n-  #392 = Utf8               iterator\n-  #393 = Utf8               ()Ljava/util/Iterator;\n-  #394 = Utf8               hasNext\n-  #395 = Utf8               ()Z\n-  #396 = Utf8               next\n-  #397 = Utf8               ()Ljava/lang/Object;\n-  #398 = Utf8               intValue\n-  #399 = Utf8               append\n-  #400 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #401 = Utf8               toHexString\n-  #402 = Utf8               (I)Ljava/lang/String;\n-  #403 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #404 = Utf8               appendCodePoint\n-  #405 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #406 = Utf8               ()Ljava/lang/String;\n-  #407 = Utf8               isISOControl\n-  #408 = Utf8               charAt\n-  #409 = Utf8               (I)C\n-  #410 = Utf8               indexOf\n-  #411 = Utf8               (II)I\n-  #412 = Utf8               substring\n-  #413 = Utf8               (II)Ljava/lang/String;\n-  #414 = Utf8               unescapeEntity\n-  #415 = Utf8               isWhitespace\n-  #416 = Utf8               (C)Z\n-  #417 = Utf8               nextToken\n-  #418 = Utf8               ()C\n-  #419 = Utf8               skipPast\n-  #420 = Utf8               back\n-  #421 = Utf8               equals\n-  #422 = Utf8               (Ljava/lang/Object;)Z\n-  #423 = Utf8               nextCDATA\n-  #424 = Utf8               getcDataTagName\n-  #425 = Utf8               accumulate\n-  #426 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #427 = Utf8               syntaxError\n-  #428 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n-  #429 = Utf8               nextMeta\n-  #430 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #431 = Utf8               isConvertNilAttributeToNull\n-  #432 = Utf8               java/lang/Boolean\n-  #433 = Utf8               parseBoolean\n-  #434 = Utf8               getXsiTypeMap\n-  #435 = Utf8               ()Ljava/util/Map;\n-  #436 = Utf8               java/util/Map\n-  #437 = Utf8               isEmpty\n-  #438 = Utf8               get\n-  #439 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #440 = Utf8               isKeepStrings\n-  #441 = Utf8               getForceList\n-  #442 = Utf8               ()Ljava/util/Set;\n-  #443 = Utf8               java/util/Set\n-  #444 = Utf8               contains\n-  #445 = Utf8               NULL\n-  #446 = Utf8               Ljava/lang/Object;\n-  #447 = Utf8               put\n-  #448 = Utf8               nextContent\n-  #449 = Utf8               opt\n-  #450 = Utf8               convert\n-  #451 = Utf8               equalsIgnoreCase\n-  #452 = Utf8               TRUE\n-  #453 = Utf8               Ljava/lang/Boolean;\n-  #454 = Utf8               FALSE\n-  #455 = Utf8               ZERO\n-  #456 = Utf8               Ljava/math/BigDecimal;\n-  #457 = Utf8               compareTo\n-  #458 = Utf8               (Ljava/math/BigDecimal;)I\n-  #459 = Utf8               valueOf\n-  #460 = Utf8               (D)Ljava/lang/Double;\n-  #461 = Utf8               (Ljava/lang/String;)Ljava/lang/Double;\n-  #462 = Utf8               isNaN\n-  #463 = Utf8               isInfinite\n-  #464 = Utf8               bitLength\n-  #465 = Utf8               (I)Ljava/lang/Integer;\n-  #466 = Utf8               longValue\n-  #467 = Utf8               ()J\n-  #468 = Utf8               java/lang/Long\n-  #469 = Utf8               (J)Ljava/lang/Long;\n-  #470 = Utf8               (I)I\n-  #471 = Utf8               ORIGINAL\n-  #472 = Utf8               Lorg/json/XMLParserConfiguration;\n-  #473 = Utf8               KEEP_STRINGS\n-  #474 = Utf8               (Ljava/io/Reader;)V\n-  #475 = Utf8               more\n-  #476 = Utf8               keySet\n-  #477 = Utf8               getClass\n-  #478 = Utf8               ()Ljava/lang/Class;\n-  #479 = Utf8               java/lang/Class\n-  #480 = Utf8               isArray\n-  #481 = Utf8               (Ljava/lang/Object;)V\n-  #482 = Utf8               (I)Ljava/lang/Object;\n-  #483 = Utf8               (C)Ljava/lang/Character;\n+  #190 = Class              #371          // java/util/Iterator\n+  #191 = Utf8               mustEscape\n+  #192 = Utf8               (I)Z\n+  #193 = Utf8               unescape\n+  #194 = Utf8               noSpace\n+  #195 = Utf8               (Ljava/lang/String;)V\n+  #196 = Utf8               Exceptions\n+  #197 = Utf8               parse\n+  #198 = Utf8               (Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Z\n+  #199 = Class              #372          // org/json/XMLParserConfiguration\n+  #200 = Utf8               stringToValue\n+  #201 = Utf8               (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n+  #202 = Utf8               (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter<*>;)Ljava/lang/Object;\n+  #203 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n+  #204 = Utf8               stringToNumber\n+  #205 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n+  #206 = Class              #373          // java/lang/Double\n+  #207 = Utf8               isDecimalNotation\n+  #208 = Utf8               (Ljava/lang/String;)Z\n+  #209 = Utf8               toJSONObject\n+  #210 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n+  #211 = Utf8               (Ljava/io/Reader;)Lorg/json/JSONObject;\n+  #212 = Utf8               (Ljava/io/Reader;Z)Lorg/json/JSONObject;\n+  #213 = Utf8               (Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #214 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n+  #215 = Utf8               (Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #216 = Utf8               toString\n+  #217 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n+  #218 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n+  #219 = Utf8               (Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n+  #220 = Utf8               <clinit>\n+  #221 = Utf8               SourceFile\n+  #222 = Utf8               XML.java\n+  #223 = NameAndType        #179:#180     // \"<init>\":()V\n+  #224 = Utf8               org/json/XML$1\n+  #225 = NameAndType        #179:#195     // \"<init>\":(Ljava/lang/String;)V\n+  #226 = Utf8               java/lang/StringBuilder\n+  #227 = NameAndType        #374:#375     // length:()I\n+  #228 = NameAndType        #179:#376     // \"<init>\":(I)V\n+  #229 = NameAndType        #183:#184     // codePointIterator:(Ljava/lang/String;)Ljava/lang/Iterable;\n+  #230 = Class              #377          // java/lang/Iterable\n+  #231 = NameAndType        #378:#379     // iterator:()Ljava/util/Iterator;\n+  #232 = NameAndType        #380:#381     // hasNext:()Z\n+  #233 = NameAndType        #382:#383     // next:()Ljava/lang/Object;\n+  #234 = Utf8               java/lang/Integer\n+  #235 = NameAndType        #384:#375     // intValue:()I\n+  #236 = Utf8               &amp;\n+  #237 = NameAndType        #385:#386     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #238 = Utf8               &lt;\n+  #239 = Utf8               &gt;\n+  #240 = Utf8               &quot;\n+  #241 = Utf8               &apos;\n+  #242 = NameAndType        #191:#192     // mustEscape:(I)Z\n+  #243 = Utf8               &#x\n+  #244 = NameAndType        #387:#388     // toHexString:(I)Ljava/lang/String;\n+  #245 = NameAndType        #385:#389     // append:(C)Ljava/lang/StringBuilder;\n+  #246 = NameAndType        #390:#391     // appendCodePoint:(I)Ljava/lang/StringBuilder;\n+  #247 = NameAndType        #216:#392     // toString:()Ljava/lang/String;\n+  #248 = NameAndType        #393:#192     // isISOControl:(I)Z\n+  #249 = NameAndType        #394:#395     // charAt:(I)C\n+  #250 = NameAndType        #396:#397     // indexOf:(II)I\n+  #251 = NameAndType        #398:#399     // substring:(II)Ljava/lang/String;\n+  #252 = NameAndType        #400:#188     // unescapeEntity:(Ljava/lang/String;)Ljava/lang/String;\n+  #253 = Utf8               org/json/JSONException\n+  #254 = Utf8               Empty string.\n+  #255 = NameAndType        #401:#402     // isWhitespace:(C)Z\n+  #256 = Utf8               \\'\n+  #257 = Utf8               \\' contains a space character.\n+  #258 = NameAndType        #403:#383     // nextToken:()Ljava/lang/Object;\n+  #259 = NameAndType        #168:#166     // BANG:Ljava/lang/Character;\n+  #260 = NameAndType        #382:#404     // next:()C\n+  #261 = Utf8               -->\n+  #262 = NameAndType        #405:#195     // skipPast:(Ljava/lang/String;)V\n+  #263 = NameAndType        #406:#180     // back:()V\n+  #264 = Utf8               CDATA\n+  #265 = NameAndType        #407:#408     // equals:(Ljava/lang/Object;)Z\n+  #266 = NameAndType        #409:#392     // nextCDATA:()Ljava/lang/String;\n+  #267 = NameAndType        #410:#392     // getcDataTagName:()Ljava/lang/String;\n+  #268 = NameAndType        #411:#412     // accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #269 = Utf8               Expected \\'CDATA[\\'\n+  #270 = NameAndType        #413:#414     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+  #271 = NameAndType        #415:#383     // nextMeta:()Ljava/lang/Object;\n+  #272 = Utf8               Missing \\'>\\' after \\'<!\\'.\n+  #273 = NameAndType        #171:#166     // LT:Ljava/lang/Character;\n+  #274 = NameAndType        #170:#166     // GT:Ljava/lang/Character;\n+  #275 = NameAndType        #172:#166     // QUEST:Ljava/lang/Character;\n+  #276 = Utf8               ?>\n+  #277 = NameAndType        #174:#166     // SLASH:Ljava/lang/Character;\n+  #278 = Utf8               Mismatched close tag\n+  #279 = NameAndType        #385:#416     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #280 = Utf8               Mismatched\n+  #281 = Utf8                and\n+  #282 = Utf8               Misshaped close tag\n+  #283 = Utf8               java/lang/Character\n+  #284 = Utf8               Misshaped tag\n+  #285 = Utf8               java/lang/String\n+  #286 = Utf8               org/json/JSONObject\n+  #287 = NameAndType        #169:#166     // EQ:Ljava/lang/Character;\n+  #288 = Utf8               Missing value\n+  #289 = NameAndType        #417:#381     // isConvertNilAttributeToNull:()Z\n+  #290 = Utf8               org/json/XML\n+  #291 = Utf8               xsi:nil\n+  #292 = Class              #418          // java/lang/Boolean\n+  #293 = NameAndType        #419:#208     // parseBoolean:(Ljava/lang/String;)Z\n+  #294 = NameAndType        #420:#421     // getXsiTypeMap:()Ljava/util/Map;\n+  #295 = Class              #422          // java/util/Map\n+  #296 = NameAndType        #423:#381     // isEmpty:()Z\n+  #297 = Utf8               xsi:type\n+  #298 = NameAndType        #424:#425     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #299 = Utf8               org/json/XMLXsiTypeConverter\n+  #300 = NameAndType        #426:#381     // isKeepStrings:()Z\n+  #301 = NameAndType        #200:#203     // stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n+  #302 = Utf8\n+  #303 = NameAndType        #427:#428     // getForceList:()Ljava/util/Set;\n+  #304 = Class              #429          // java/util/Set\n+  #305 = NameAndType        #430:#408     // contains:(Ljava/lang/Object;)Z\n+  #306 = NameAndType        #431:#432     // NULL:Ljava/lang/Object;\n+  #307 = NameAndType        #385:#412     // append:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #308 = Utf8               org/json/JSONArray\n+  #309 = NameAndType        #433:#412     // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #310 = NameAndType        #434:#383     // nextContent:()Ljava/lang/Object;\n+  #311 = Utf8               Unclosed tag\n+  #312 = NameAndType        #200:#201     // stringToValue:(Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n+  #313 = NameAndType        #197:#198     // parse:(Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Z\n+  #314 = NameAndType        #435:#203     // opt:(Ljava/lang/String;)Ljava/lang/Object;\n+  #315 = NameAndType        #436:#203     // convert:(Ljava/lang/String;)Ljava/lang/Object;\n+  #316 = Utf8               true\n+  #317 = NameAndType        #437:#208     // equalsIgnoreCase:(Ljava/lang/String;)Z\n+  #318 = NameAndType        #438:#439     // TRUE:Ljava/lang/Boolean;\n+  #319 = Utf8               false\n+  #320 = NameAndType        #440:#439     // FALSE:Ljava/lang/Boolean;\n+  #321 = Utf8               null\n+  #322 = NameAndType        #204:#205     // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+  #323 = Utf8               java/lang/Exception\n+  #324 = NameAndType        #207:#208     // isDecimalNotation:(Ljava/lang/String;)Z\n+  #325 = Utf8               java/math/BigDecimal\n+  #326 = NameAndType        #441:#442     // ZERO:Ljava/math/BigDecimal;\n+  #327 = NameAndType        #443:#444     // compareTo:(Ljava/math/BigDecimal;)I\n+  #328 = NameAndType        #445:#446     // valueOf:(D)Ljava/lang/Double;\n+  #329 = Utf8               java/lang/NumberFormatException\n+  #330 = NameAndType        #445:#447     // valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n+  #331 = NameAndType        #448:#381     // isNaN:()Z\n+  #332 = NameAndType        #449:#381     // isInfinite:()Z\n+  #333 = Utf8               val [\n+  #334 = Utf8               ] is not a valid number.\n+  #335 = Utf8               java/math/BigInteger\n+  #336 = NameAndType        #450:#375     // bitLength:()I\n+  #337 = NameAndType        #445:#451     // valueOf:(I)Ljava/lang/Integer;\n+  #338 = NameAndType        #452:#453     // longValue:()J\n+  #339 = Class              #454          // java/lang/Long\n+  #340 = NameAndType        #445:#455     // valueOf:(J)Ljava/lang/Long;\n+  #341 = NameAndType        #396:#456     // indexOf:(I)I\n+  #342 = Utf8               -0\n+  #343 = NameAndType        #457:#458     // ORIGINAL:Lorg/json/XMLParserConfiguration;\n+  #344 = NameAndType        #209:#215     // toJSONObject:(Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #345 = NameAndType        #209:#213     // toJSONObject:(Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #346 = NameAndType        #459:#458     // KEEP_STRINGS:Lorg/json/XMLParserConfiguration;\n+  #347 = Utf8               org/json/XMLTokener\n+  #348 = NameAndType        #179:#460     // \"<init>\":(Ljava/io/Reader;)V\n+  #349 = NameAndType        #461:#381     // more:()Z\n+  #350 = Utf8               <\n+  #351 = Utf8               java/io/StringReader\n+  #352 = NameAndType        #209:#212     // toJSONObject:(Ljava/io/Reader;Z)Lorg/json/JSONObject;\n+  #353 = NameAndType        #216:#219     // toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n+  #354 = NameAndType        #462:#428     // keySet:()Ljava/util/Set;\n+  #355 = NameAndType        #463:#464     // getClass:()Ljava/lang/Class;\n+  #356 = Class              #465          // java/lang/Class\n+  #357 = NameAndType        #466:#381     // isArray:()Z\n+  #358 = NameAndType        #179:#467     // \"<init>\":(Ljava/lang/Object;)V\n+  #359 = NameAndType        #435:#468     // opt:(I)Ljava/lang/Object;\n+  #360 = NameAndType        #187:#188     // escape:(Ljava/lang/String;)Ljava/lang/String;\n+  #361 = Utf8               </\n+  #362 = Utf8               />\n+  #363 = Utf8               array\n+  #364 = Utf8               \\\"\n+  #365 = Utf8               >\n+  #366 = NameAndType        #445:#469     // valueOf:(C)Ljava/lang/Character;\n+  #367 = NameAndType        #165:#166     // AMP:Ljava/lang/Character;\n+  #368 = NameAndType        #167:#166     // APOS:Ljava/lang/Character;\n+  #369 = NameAndType        #173:#166     // QUOT:Ljava/lang/Character;\n+  #370 = Utf8               java/lang/Object\n+  #371 = Utf8               java/util/Iterator\n+  #372 = Utf8               org/json/XMLParserConfiguration\n+  #373 = Utf8               java/lang/Double\n+  #374 = Utf8               length\n+  #375 = Utf8               ()I\n+  #376 = Utf8               (I)V\n+  #377 = Utf8               java/lang/Iterable\n+  #378 = Utf8               iterator\n+  #379 = Utf8               ()Ljava/util/Iterator;\n+  #380 = Utf8               hasNext\n+  #381 = Utf8               ()Z\n+  #382 = Utf8               next\n+  #383 = Utf8               ()Ljava/lang/Object;\n+  #384 = Utf8               intValue\n+  #385 = Utf8               append\n+  #386 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #387 = Utf8               toHexString\n+  #388 = Utf8               (I)Ljava/lang/String;\n+  #389 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #390 = Utf8               appendCodePoint\n+  #391 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #392 = Utf8               ()Ljava/lang/String;\n+  #393 = Utf8               isISOControl\n+  #394 = Utf8               charAt\n+  #395 = Utf8               (I)C\n+  #396 = Utf8               indexOf\n+  #397 = Utf8               (II)I\n+  #398 = Utf8               substring\n+  #399 = Utf8               (II)Ljava/lang/String;\n+  #400 = Utf8               unescapeEntity\n+  #401 = Utf8               isWhitespace\n+  #402 = Utf8               (C)Z\n+  #403 = Utf8               nextToken\n+  #404 = Utf8               ()C\n+  #405 = Utf8               skipPast\n+  #406 = Utf8               back\n+  #407 = Utf8               equals\n+  #408 = Utf8               (Ljava/lang/Object;)Z\n+  #409 = Utf8               nextCDATA\n+  #410 = Utf8               getcDataTagName\n+  #411 = Utf8               accumulate\n+  #412 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #413 = Utf8               syntaxError\n+  #414 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n+  #415 = Utf8               nextMeta\n+  #416 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #417 = Utf8               isConvertNilAttributeToNull\n+  #418 = Utf8               java/lang/Boolean\n+  #419 = Utf8               parseBoolean\n+  #420 = Utf8               getXsiTypeMap\n+  #421 = Utf8               ()Ljava/util/Map;\n+  #422 = Utf8               java/util/Map\n+  #423 = Utf8               isEmpty\n+  #424 = Utf8               get\n+  #425 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #426 = Utf8               isKeepStrings\n+  #427 = Utf8               getForceList\n+  #428 = Utf8               ()Ljava/util/Set;\n+  #429 = Utf8               java/util/Set\n+  #430 = Utf8               contains\n+  #431 = Utf8               NULL\n+  #432 = Utf8               Ljava/lang/Object;\n+  #433 = Utf8               put\n+  #434 = Utf8               nextContent\n+  #435 = Utf8               opt\n+  #436 = Utf8               convert\n+  #437 = Utf8               equalsIgnoreCase\n+  #438 = Utf8               TRUE\n+  #439 = Utf8               Ljava/lang/Boolean;\n+  #440 = Utf8               FALSE\n+  #441 = Utf8               ZERO\n+  #442 = Utf8               Ljava/math/BigDecimal;\n+  #443 = Utf8               compareTo\n+  #444 = Utf8               (Ljava/math/BigDecimal;)I\n+  #445 = Utf8               valueOf\n+  #446 = Utf8               (D)Ljava/lang/Double;\n+  #447 = Utf8               (Ljava/lang/String;)Ljava/lang/Double;\n+  #448 = Utf8               isNaN\n+  #449 = Utf8               isInfinite\n+  #450 = Utf8               bitLength\n+  #451 = Utf8               (I)Ljava/lang/Integer;\n+  #452 = Utf8               longValue\n+  #453 = Utf8               ()J\n+  #454 = Utf8               java/lang/Long\n+  #455 = Utf8               (J)Ljava/lang/Long;\n+  #456 = Utf8               (I)I\n+  #457 = Utf8               ORIGINAL\n+  #458 = Utf8               Lorg/json/XMLParserConfiguration;\n+  #459 = Utf8               KEEP_STRINGS\n+  #460 = Utf8               (Ljava/io/Reader;)V\n+  #461 = Utf8               more\n+  #462 = Utf8               keySet\n+  #463 = Utf8               getClass\n+  #464 = Utf8               ()Ljava/lang/Class;\n+  #465 = Utf8               java/lang/Class\n+  #466 = Utf8               isArray\n+  #467 = Utf8               (Ljava/lang/Object;)V\n+  #468 = Utf8               (I)Ljava/lang/Object;\n+  #469 = Utf8               (C)Ljava/lang/Character;\n {\n   public static final java.lang.Character AMP;\n     descriptor: Ljava/lang/Character;\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n \n   public static final java.lang.Character APOS;\n     descriptor: Ljava/lang/Character;\n@@ -1412,16 +1398,17 @@\n         line 361: 417\n         line 362: 423\n         line 363: 429\n         line 364: 452\n         line 365: 458\n         line 366: 477\n         line 367: 482\n-        line 368: 487\n-        line 370: 506\n+        line 368: 486\n+        line 369: 493\n+        line 370: 501\n         line 367: 509\n         line 372: 513\n         line 374: 519\n         line 378: 532\n         line 380: 540\n         line 381: 550\n         line 383: 557\n@@ -1446,15 +1433,15 @@\n         line 413: 734\n         line 414: 741\n         line 415: 749\n         line 416: 754\n         line 417: 764\n         line 416: 767\n         line 419: 774\n-        line 420: 781\n+        line 420: 780\n         line 419: 797\n         line 424: 804\n         line 426: 812\n         line 427: 824\n         line 429: 838\n         line 430: 846\n         line 431: 863\n@@ -1579,15 +1566,15 @@\n         16: areturn\n       LineNumberTable:\n         line 466: 0\n         line 467: 4\n         line 469: 12\n       StackMapTable: number_of_entries = 1\n         frame_type = 12 /* same */\n-    Signature: #208                         // (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter<*>;)Ljava/lang/Object;\n+    Signature: #202                         // (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter<*>;)Ljava/lang/Object;\n \n   public static java.lang.Object stringToValue(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/lang/Object;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=3, args_size=1\n          0: ldc           #86                 // String\n@@ -2492,15 +2479,16 @@\n         line 868: 489\n         line 869: 499\n         line 873: 508\n         line 868: 529\n         line 875: 535\n         line 878: 540\n         line 879: 558\n-        line 880: 592\n+        line 880: 590\n+        line 881: 625\n         line 879: 668\n       StackMapTable: number_of_entries = 32\n         frame_type = 252 /* append */\n           offset_delta = 39\n           locals = [ class java/lang/StringBuilder ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 17\n@@ -2622,8 +2610,8 @@\n         line 61: 40\n         line 64: 48\n         line 67: 56\n         line 70: 64\n }\n SourceFile: \"XML.java\"\n InnerClasses:\n-  static #2;                              // class org/json/XML$1\n+  #2;                                     // class org/json/XML$1\n"}]}
