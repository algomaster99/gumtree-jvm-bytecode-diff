{"diffoscope-json-version": 1, "source1": "first/DumpArchiveUtil.class", "source2": "second/DumpArchiveUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,44 +7,39 @@\n import org.apache.commons.compress.utils.ByteUtils;\n \n class DumpArchiveUtil\n {\n     private DumpArchiveUtil() {\n     }\n     \n-    public static int calculateChecksum(final byte[] buffer) {\n-        int calc = 0;\n+    public static int calculateChecksum(final byte[] array) {\n+        int n = 0;\n         for (int i = 0; i < 256; ++i) {\n-            calc += convert32(buffer, 4 * i);\n+            n += convert32(array, 4 * i);\n         }\n-        return 84446 - (calc - convert32(buffer, 28));\n+        return 84446 - (n - convert32(array, 28));\n     }\n     \n-    public static final boolean verify(final byte[] buffer) {\n-        final int magic = convert32(buffer, 24);\n-        if (magic != 60012) {\n-            return false;\n-        }\n-        final int checksum = convert32(buffer, 28);\n-        return checksum == calculateChecksum(buffer);\n+    public static final boolean verify(final byte[] array) {\n+        return convert32(array, 24) == 60012 && convert32(array, 28) == calculateChecksum(array);\n     }\n     \n-    public static final int getIno(final byte[] buffer) {\n-        return convert32(buffer, 20);\n+    public static final int getIno(final byte[] array) {\n+        return convert32(array, 20);\n     }\n     \n-    public static final long convert64(final byte[] buffer, final int offset) {\n-        return ByteUtils.fromLittleEndian(buffer, offset, 8);\n+    public static final long convert64(final byte[] array, final int n) {\n+        return ByteUtils.fromLittleEndian(array, n, 8);\n     }\n     \n-    public static final int convert32(final byte[] buffer, final int offset) {\n-        return (int)ByteUtils.fromLittleEndian(buffer, offset, 4);\n+    public static final int convert32(final byte[] array, final int n) {\n+        return (int)ByteUtils.fromLittleEndian(array, n, 4);\n     }\n     \n-    public static final int convert16(final byte[] buffer, final int offset) {\n-        return (int)ByteUtils.fromLittleEndian(buffer, offset, 2);\n+    public static final int convert16(final byte[] array, final int n) {\n+        return (int)ByteUtils.fromLittleEndian(array, n, 2);\n     }\n     \n-    static String decode(final ZipEncoding encoding, final byte[] b, final int offset, final int len) throws IOException {\n-        return encoding.decode(Arrays.copyOfRange(b, offset, offset + len));\n+    static String decode(final ZipEncoding zipEncoding, final byte[] original, final int from, final int n) throws IOException {\n+        return zipEncoding.decode(Arrays.copyOfRange(original, from, from + n));\n     }\n }\n"}]}
