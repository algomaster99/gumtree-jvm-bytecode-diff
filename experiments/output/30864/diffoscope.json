{"diffoscope-json-version": 1, "source1": "first/BufferedFileChannelInputStream.class", "source2": "second/BufferedFileChannelInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,302 +1,302 @@\n-  SHA-256 checksum cde992979b1ca60b8a55fd2db0eba01a95e0062bc8d1e494a2bc947241c4de9d\n+  SHA-256 checksum fbae3b33b966cc6e1dea5f9fcd9c0a08147cfb70c19c7255ab29f01f8fc83a3c\n   Compiled from \"BufferedFileChannelInputStream.java\"\n public final class org.apache.commons.io.input.BufferedFileChannelInputStream extends java.io.InputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n-  this_class: #63                         // org/apache/commons/io/input/BufferedFileChannelInputStream\n-  super_class: #64                        // java/io/InputStream\n+  this_class: #16                         // org/apache/commons/io/input/BufferedFileChannelInputStream\n+  super_class: #39                        // java/io/InputStream\n   interfaces: 0, fields: 3, methods: 16, attributes: 1\n Constant pool:\n-    #1 = Class              #144          // org/apache/commons/io/IOUtils\n-    #2 = String             #145          // sun.nio.ch.DirectBuffer\n-    #3 = Methodref          #30.#146      // java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;\n-    #4 = Class              #147          // java/lang/IllegalAccessError\n-    #5 = Class              #148          // java/lang/ClassNotFoundException\n-    #6 = Fieldref           #63.#149      // org/apache/commons/io/input/BufferedFileChannelInputStream.DIRECT_BUFFER_CLASS:Ljava/lang/Class;\n-    #7 = Methodref          #30.#150      // java/lang/Class.isInstance:(Ljava/lang/Object;)Z\n-    #8 = Methodref          #63.#151      // org/apache/commons/io/input/BufferedFileChannelInputStream.\"<init>\":(Ljava/io/File;I)V\n-    #9 = Methodref          #152.#153     // java/io/File.toPath:()Ljava/nio/file/Path;\n-   #10 = Methodref          #63.#154      // org/apache/commons/io/input/BufferedFileChannelInputStream.\"<init>\":(Ljava/nio/file/Path;I)V\n-   #11 = Methodref          #64.#155      // java/io/InputStream.\"<init>\":()V\n-   #12 = String             #99           // path\n-   #13 = Methodref          #156.#157     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #14 = Class              #158          // java/nio/file/OpenOption\n-   #15 = Fieldref           #159.#160     // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-   #16 = Methodref          #161.#162     // java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n-   #17 = Fieldref           #63.#163      // org/apache/commons/io/input/BufferedFileChannelInputStream.fileChannel:Ljava/nio/channels/FileChannel;\n-   #18 = Methodref          #40.#164      // java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;\n-   #19 = Fieldref           #63.#165      // org/apache/commons/io/input/BufferedFileChannelInputStream.byteBuffer:Ljava/nio/ByteBuffer;\n-   #20 = Methodref          #40.#166      // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n-   #21 = Methodref          #40.#167      // java/nio/ByteBuffer.remaining:()I\n-   #22 = Methodref          #63.#168      // org/apache/commons/io/input/BufferedFileChannelInputStream.isDirectBuffer:(Ljava/lang/Object;)Z\n-   #23 = Methodref          #63.#169      // org/apache/commons/io/input/BufferedFileChannelInputStream.cleanDirectBuffer:(Ljava/nio/ByteBuffer;)V\n-   #24 = String             #170          // java.specification.version\n-   #25 = Methodref          #171.#172     // java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;\n-   #26 = String             #173          // 1.8\n-   #27 = Methodref          #120.#174     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #28 = String             #175          // sun.misc.Cleaner\n-   #29 = String             #112          // cleaner\n-   #30 = Class              #176          // java/lang/Class\n-   #31 = Methodref          #30.#177      // java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n-   #32 = Class              #178          // java/lang/Object\n-   #33 = Methodref          #179.#180     // java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n-   #34 = String             #104          // clean\n-   #35 = Class              #181          // java/lang/ReflectiveOperationException\n-   #36 = Class              #182          // java/lang/IllegalStateException\n-   #37 = Methodref          #36.#183      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #38 = String             #184          // sun.misc.Unsafe\n-   #39 = String             #185          // invokeCleaner\n-   #40 = Class              #186          // java/nio/ByteBuffer\n-   #41 = String             #187          // theUnsafe\n-   #42 = Methodref          #30.#188      // java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n-   #43 = Methodref          #189.#190     // java/lang/reflect/Field.setAccessible:(Z)V\n-   #44 = Methodref          #189.#191     // java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #45 = Methodref          #161.#192     // java/nio/channels/FileChannel.close:()V\n-   #46 = Methodref          #63.#193      // org/apache/commons/io/input/BufferedFileChannelInputStream.clean:(Ljava/nio/ByteBuffer;)V\n-   #47 = Methodref          #63.#194      // org/apache/commons/io/input/BufferedFileChannelInputStream.refill:()Z\n-   #48 = Methodref          #40.#195      // java/nio/ByteBuffer.get:()B\n-   #49 = Class              #196          // java/lang/IndexOutOfBoundsException\n-   #50 = Methodref          #49.#155      // java/lang/IndexOutOfBoundsException.\"<init>\":()V\n-   #51 = Methodref          #197.#198     // java/lang/Math.min:(II)I\n-   #52 = Methodref          #40.#199      // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n-   #53 = Methodref          #40.#200      // java/nio/ByteBuffer.hasRemaining:()Z\n-   #54 = Methodref          #40.#201      // java/nio/ByteBuffer.clear:()Ljava/nio/ByteBuffer;\n-   #55 = Methodref          #161.#202     // java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;)I\n-   #56 = Methodref          #40.#203      // java/nio/ByteBuffer.position:()I\n-   #57 = Methodref          #40.#204      // java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n-   #58 = Methodref          #63.#205      // org/apache/commons/io/input/BufferedFileChannelInputStream.skipFromFileChannel:(J)J\n-   #59 = Methodref          #161.#206     // java/nio/channels/FileChannel.position:()J\n-   #60 = Methodref          #161.#207     // java/nio/channels/FileChannel.size:()J\n-   #61 = Methodref          #161.#208     // java/nio/channels/FileChannel.position:(J)Ljava/nio/channels/FileChannel;\n-   #62 = Methodref          #63.#209      // org/apache/commons/io/input/BufferedFileChannelInputStream.getDirectBufferClass:()Ljava/lang/Class;\n-   #63 = Class              #210          // org/apache/commons/io/input/BufferedFileChannelInputStream\n-   #64 = Class              #211          // java/io/InputStream\n-   #65 = Utf8               byteBuffer\n-   #66 = Utf8               Ljava/nio/ByteBuffer;\n+    #1 = Class              #2            // org/apache/commons/io/IOUtils\n+    #2 = Utf8               org/apache/commons/io/IOUtils\n+    #3 = String             #4            // sun.nio.ch.DirectBuffer\n+    #4 = Utf8               sun.nio.ch.DirectBuffer\n+    #5 = Methodref          #6.#7         // java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;\n+    #6 = Class              #8            // java/lang/Class\n+    #7 = NameAndType        #9:#10        // forName:(Ljava/lang/String;)Ljava/lang/Class;\n+    #8 = Utf8               java/lang/Class\n+    #9 = Utf8               forName\n+   #10 = Utf8               (Ljava/lang/String;)Ljava/lang/Class;\n+   #11 = Class              #12           // java/lang/IllegalAccessError\n+   #12 = Utf8               java/lang/IllegalAccessError\n+   #13 = Class              #14           // java/lang/ClassNotFoundException\n+   #14 = Utf8               java/lang/ClassNotFoundException\n+   #15 = Fieldref           #16.#17       // org/apache/commons/io/input/BufferedFileChannelInputStream.DIRECT_BUFFER_CLASS:Ljava/lang/Class;\n+   #16 = Class              #18           // org/apache/commons/io/input/BufferedFileChannelInputStream\n+   #17 = NameAndType        #19:#20       // DIRECT_BUFFER_CLASS:Ljava/lang/Class;\n+   #18 = Utf8               org/apache/commons/io/input/BufferedFileChannelInputStream\n+   #19 = Utf8               DIRECT_BUFFER_CLASS\n+   #20 = Utf8               Ljava/lang/Class;\n+   #21 = Methodref          #6.#22        // java/lang/Class.isInstance:(Ljava/lang/Object;)Z\n+   #22 = NameAndType        #23:#24       // isInstance:(Ljava/lang/Object;)Z\n+   #23 = Utf8               isInstance\n+   #24 = Utf8               (Ljava/lang/Object;)Z\n+   #25 = Methodref          #16.#26       // org/apache/commons/io/input/BufferedFileChannelInputStream.\"<init>\":(Ljava/io/File;I)V\n+   #26 = NameAndType        #27:#28       // \"<init>\":(Ljava/io/File;I)V\n+   #27 = Utf8               <init>\n+   #28 = Utf8               (Ljava/io/File;I)V\n+   #29 = Methodref          #30.#31       // java/io/File.toPath:()Ljava/nio/file/Path;\n+   #30 = Class              #32           // java/io/File\n+   #31 = NameAndType        #33:#34       // toPath:()Ljava/nio/file/Path;\n+   #32 = Utf8               java/io/File\n+   #33 = Utf8               toPath\n+   #34 = Utf8               ()Ljava/nio/file/Path;\n+   #35 = Methodref          #16.#36       // org/apache/commons/io/input/BufferedFileChannelInputStream.\"<init>\":(Ljava/nio/file/Path;I)V\n+   #36 = NameAndType        #27:#37       // \"<init>\":(Ljava/nio/file/Path;I)V\n+   #37 = Utf8               (Ljava/nio/file/Path;I)V\n+   #38 = Methodref          #39.#40       // java/io/InputStream.\"<init>\":()V\n+   #39 = Class              #41           // java/io/InputStream\n+   #40 = NameAndType        #27:#42       // \"<init>\":()V\n+   #41 = Utf8               java/io/InputStream\n+   #42 = Utf8               ()V\n+   #43 = String             #44           // path\n+   #44 = Utf8               path\n+   #45 = Methodref          #46.#47       // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #46 = Class              #48           // java/util/Objects\n+   #47 = NameAndType        #49:#50       // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #48 = Utf8               java/util/Objects\n+   #49 = Utf8               requireNonNull\n+   #50 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #51 = Class              #52           // java/nio/file/OpenOption\n+   #52 = Utf8               java/nio/file/OpenOption\n+   #53 = Fieldref           #54.#55       // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+   #54 = Class              #56           // java/nio/file/StandardOpenOption\n+   #55 = NameAndType        #57:#58       // READ:Ljava/nio/file/StandardOpenOption;\n+   #56 = Utf8               java/nio/file/StandardOpenOption\n+   #57 = Utf8               READ\n+   #58 = Utf8               Ljava/nio/file/StandardOpenOption;\n+   #59 = Methodref          #60.#61       // java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n+   #60 = Class              #62           // java/nio/channels/FileChannel\n+   #61 = NameAndType        #63:#64       // open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n+   #62 = Utf8               java/nio/channels/FileChannel\n+   #63 = Utf8               open\n+   #64 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n+   #65 = Fieldref           #16.#66       // org/apache/commons/io/input/BufferedFileChannelInputStream.fileChannel:Ljava/nio/channels/FileChannel;\n+   #66 = NameAndType        #67:#68       // fileChannel:Ljava/nio/channels/FileChannel;\n    #67 = Utf8               fileChannel\n    #68 = Utf8               Ljava/nio/channels/FileChannel;\n-   #69 = Utf8               DIRECT_BUFFER_CLASS\n-   #70 = Utf8               Ljava/lang/Class;\n-   #71 = Utf8               Signature\n-   #72 = Utf8               Ljava/lang/Class<*>;\n-   #73 = Utf8               getDirectBufferClass\n-   #74 = Utf8               ()Ljava/lang/Class;\n-   #75 = Utf8               Code\n-   #76 = Utf8               LineNumberTable\n-   #77 = Utf8               LocalVariableTable\n-   #78 = Utf8               res\n-   #79 = Utf8               LocalVariableTypeTable\n-   #80 = Utf8               StackMapTable\n-   #81 = Class              #212          // java/lang/Throwable\n-   #82 = Utf8               ()Ljava/lang/Class<*>;\n-   #83 = Utf8               isDirectBuffer\n-   #84 = Utf8               (Ljava/lang/Object;)Z\n-   #85 = Utf8               object\n-   #86 = Utf8               Ljava/lang/Object;\n-   #87 = Utf8               <init>\n-   #88 = Utf8               (Ljava/io/File;)V\n-   #89 = Utf8               this\n-   #90 = Utf8               Lorg/apache/commons/io/input/BufferedFileChannelInputStream;\n-   #91 = Utf8               file\n-   #92 = Utf8               Ljava/io/File;\n-   #93 = Utf8               Exceptions\n-   #94 = Class              #213          // java/io/IOException\n-   #95 = Utf8               (Ljava/io/File;I)V\n-   #96 = Utf8               bufferSizeInBytes\n-   #97 = Utf8               I\n-   #98 = Utf8               (Ljava/nio/file/Path;)V\n-   #99 = Utf8               path\n-  #100 = Utf8               Ljava/nio/file/Path;\n-  #101 = Utf8               (Ljava/nio/file/Path;I)V\n-  #102 = Utf8               available\n-  #103 = Utf8               ()I\n-  #104 = Utf8               clean\n-  #105 = Utf8               (Ljava/nio/ByteBuffer;)V\n-  #106 = Utf8               buffer\n-  #107 = Utf8               cleanDirectBuffer\n-  #108 = Utf8               cleanMethod\n-  #109 = Utf8               Ljava/lang/reflect/Method;\n-  #110 = Utf8               clsCleaner\n-  #111 = Utf8               cleanerMethod\n+   #69 = Methodref          #70.#71       // java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;\n+   #70 = Class              #72           // java/nio/ByteBuffer\n+   #71 = NameAndType        #73:#74       // allocateDirect:(I)Ljava/nio/ByteBuffer;\n+   #72 = Utf8               java/nio/ByteBuffer\n+   #73 = Utf8               allocateDirect\n+   #74 = Utf8               (I)Ljava/nio/ByteBuffer;\n+   #75 = Fieldref           #16.#76       // org/apache/commons/io/input/BufferedFileChannelInputStream.byteBuffer:Ljava/nio/ByteBuffer;\n+   #76 = NameAndType        #77:#78       // byteBuffer:Ljava/nio/ByteBuffer;\n+   #77 = Utf8               byteBuffer\n+   #78 = Utf8               Ljava/nio/ByteBuffer;\n+   #79 = Methodref          #70.#80       // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+   #80 = NameAndType        #81:#82       // flip:()Ljava/nio/ByteBuffer;\n+   #81 = Utf8               flip\n+   #82 = Utf8               ()Ljava/nio/ByteBuffer;\n+   #83 = Methodref          #70.#84       // java/nio/ByteBuffer.remaining:()I\n+   #84 = NameAndType        #85:#86       // remaining:()I\n+   #85 = Utf8               remaining\n+   #86 = Utf8               ()I\n+   #87 = Methodref          #16.#88       // org/apache/commons/io/input/BufferedFileChannelInputStream.isDirectBuffer:(Ljava/lang/Object;)Z\n+   #88 = NameAndType        #89:#24       // isDirectBuffer:(Ljava/lang/Object;)Z\n+   #89 = Utf8               isDirectBuffer\n+   #90 = Methodref          #16.#91       // org/apache/commons/io/input/BufferedFileChannelInputStream.cleanDirectBuffer:(Ljava/nio/ByteBuffer;)V\n+   #91 = NameAndType        #92:#93       // cleanDirectBuffer:(Ljava/nio/ByteBuffer;)V\n+   #92 = Utf8               cleanDirectBuffer\n+   #93 = Utf8               (Ljava/nio/ByteBuffer;)V\n+   #94 = String             #95           // java.specification.version\n+   #95 = Utf8               java.specification.version\n+   #96 = Methodref          #97.#98       // java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;\n+   #97 = Class              #99           // java/lang/System\n+   #98 = NameAndType        #100:#101     // getProperty:(Ljava/lang/String;)Ljava/lang/String;\n+   #99 = Utf8               java/lang/System\n+  #100 = Utf8               getProperty\n+  #101 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #102 = String             #103          // 1.8\n+  #103 = Utf8               1.8\n+  #104 = Methodref          #105.#106     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+  #105 = Class              #107          // java/lang/String\n+  #106 = NameAndType        #108:#24      // equals:(Ljava/lang/Object;)Z\n+  #107 = Utf8               java/lang/String\n+  #108 = Utf8               equals\n+  #109 = String             #110          // sun.misc.Cleaner\n+  #110 = Utf8               sun.misc.Cleaner\n+  #111 = String             #112          // cleaner\n   #112 = Utf8               cleaner\n-  #113 = Utf8               e\n-  #114 = Utf8               Ljava/lang/ReflectiveOperationException;\n-  #115 = Utf8               clsUnsafe\n-  #116 = Utf8               unsafeField\n-  #117 = Utf8               Ljava/lang/reflect/Field;\n-  #118 = Utf8               specVer\n-  #119 = Utf8               Ljava/lang/String;\n-  #120 = Class              #214          // java/lang/String\n-  #121 = Utf8               close\n-  #122 = Utf8               ()V\n-  #123 = Utf8               read\n-  #124 = Utf8               ([BII)I\n-  #125 = Utf8               b\n-  #126 = Utf8               [B\n-  #127 = Utf8               offset\n-  #128 = Utf8               len\n-  #129 = Utf8               refill\n-  #130 = Utf8               ()Z\n-  #131 = Utf8               nRead\n-  #132 = Utf8               skip\n-  #133 = Utf8               (J)J\n-  #134 = Utf8               n\n-  #135 = Utf8               J\n-  #136 = Utf8               skippedFromBuffer\n-  #137 = Utf8               toSkipFromFileChannel\n-  #138 = Utf8               skipFromFileChannel\n-  #139 = Utf8               currentFilePosition\n-  #140 = Utf8               size\n-  #141 = Utf8               <clinit>\n-  #142 = Utf8               SourceFile\n-  #143 = Utf8               BufferedFileChannelInputStream.java\n-  #144 = Utf8               org/apache/commons/io/IOUtils\n-  #145 = Utf8               sun.nio.ch.DirectBuffer\n-  #146 = NameAndType        #215:#216     // forName:(Ljava/lang/String;)Ljava/lang/Class;\n-  #147 = Utf8               java/lang/IllegalAccessError\n-  #148 = Utf8               java/lang/ClassNotFoundException\n-  #149 = NameAndType        #69:#70       // DIRECT_BUFFER_CLASS:Ljava/lang/Class;\n-  #150 = NameAndType        #217:#84      // isInstance:(Ljava/lang/Object;)Z\n-  #151 = NameAndType        #87:#95       // \"<init>\":(Ljava/io/File;I)V\n-  #152 = Class              #218          // java/io/File\n-  #153 = NameAndType        #219:#220     // toPath:()Ljava/nio/file/Path;\n-  #154 = NameAndType        #87:#101      // \"<init>\":(Ljava/nio/file/Path;I)V\n-  #155 = NameAndType        #87:#122      // \"<init>\":()V\n-  #156 = Class              #221          // java/util/Objects\n-  #157 = NameAndType        #222:#223     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #158 = Utf8               java/nio/file/OpenOption\n-  #159 = Class              #224          // java/nio/file/StandardOpenOption\n-  #160 = NameAndType        #225:#226     // READ:Ljava/nio/file/StandardOpenOption;\n-  #161 = Class              #227          // java/nio/channels/FileChannel\n-  #162 = NameAndType        #228:#229     // open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n-  #163 = NameAndType        #67:#68       // fileChannel:Ljava/nio/channels/FileChannel;\n-  #164 = NameAndType        #230:#231     // allocateDirect:(I)Ljava/nio/ByteBuffer;\n-  #165 = NameAndType        #65:#66       // byteBuffer:Ljava/nio/ByteBuffer;\n-  #166 = NameAndType        #232:#233     // flip:()Ljava/nio/ByteBuffer;\n-  #167 = NameAndType        #234:#103     // remaining:()I\n-  #168 = NameAndType        #83:#84       // isDirectBuffer:(Ljava/lang/Object;)Z\n-  #169 = NameAndType        #107:#105     // cleanDirectBuffer:(Ljava/nio/ByteBuffer;)V\n-  #170 = Utf8               java.specification.version\n-  #171 = Class              #235          // java/lang/System\n-  #172 = NameAndType        #236:#237     // getProperty:(Ljava/lang/String;)Ljava/lang/String;\n-  #173 = Utf8               1.8\n-  #174 = NameAndType        #238:#84      // equals:(Ljava/lang/Object;)Z\n-  #175 = Utf8               sun.misc.Cleaner\n-  #176 = Utf8               java/lang/Class\n-  #177 = NameAndType        #239:#240     // getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n-  #178 = Utf8               java/lang/Object\n-  #179 = Class              #241          // java/lang/reflect/Method\n-  #180 = NameAndType        #242:#243     // invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n-  #181 = Utf8               java/lang/ReflectiveOperationException\n-  #182 = Utf8               java/lang/IllegalStateException\n-  #183 = NameAndType        #87:#244      // \"<init>\":(Ljava/lang/Throwable;)V\n-  #184 = Utf8               sun.misc.Unsafe\n-  #185 = Utf8               invokeCleaner\n-  #186 = Utf8               java/nio/ByteBuffer\n-  #187 = Utf8               theUnsafe\n-  #188 = NameAndType        #245:#246     // getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n-  #189 = Class              #247          // java/lang/reflect/Field\n-  #190 = NameAndType        #248:#249     // setAccessible:(Z)V\n-  #191 = NameAndType        #250:#251     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #192 = NameAndType        #121:#122     // close:()V\n-  #193 = NameAndType        #104:#105     // clean:(Ljava/nio/ByteBuffer;)V\n-  #194 = NameAndType        #129:#130     // refill:()Z\n-  #195 = NameAndType        #250:#252     // get:()B\n-  #196 = Utf8               java/lang/IndexOutOfBoundsException\n-  #197 = Class              #253          // java/lang/Math\n-  #198 = NameAndType        #254:#255     // min:(II)I\n-  #199 = NameAndType        #250:#256     // get:([BII)Ljava/nio/ByteBuffer;\n-  #200 = NameAndType        #257:#130     // hasRemaining:()Z\n-  #201 = NameAndType        #258:#233     // clear:()Ljava/nio/ByteBuffer;\n-  #202 = NameAndType        #123:#259     // read:(Ljava/nio/ByteBuffer;)I\n-  #203 = NameAndType        #260:#103     // position:()I\n-  #204 = NameAndType        #260:#231     // position:(I)Ljava/nio/ByteBuffer;\n-  #205 = NameAndType        #138:#133     // skipFromFileChannel:(J)J\n-  #206 = NameAndType        #260:#261     // position:()J\n-  #207 = NameAndType        #140:#261     // size:()J\n-  #208 = NameAndType        #260:#262     // position:(J)Ljava/nio/channels/FileChannel;\n-  #209 = NameAndType        #73:#74       // getDirectBufferClass:()Ljava/lang/Class;\n-  #210 = Utf8               org/apache/commons/io/input/BufferedFileChannelInputStream\n-  #211 = Utf8               java/io/InputStream\n-  #212 = Utf8               java/lang/Throwable\n-  #213 = Utf8               java/io/IOException\n-  #214 = Utf8               java/lang/String\n-  #215 = Utf8               forName\n-  #216 = Utf8               (Ljava/lang/String;)Ljava/lang/Class;\n-  #217 = Utf8               isInstance\n-  #218 = Utf8               java/io/File\n-  #219 = Utf8               toPath\n-  #220 = Utf8               ()Ljava/nio/file/Path;\n-  #221 = Utf8               java/util/Objects\n-  #222 = Utf8               requireNonNull\n-  #223 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #224 = Utf8               java/nio/file/StandardOpenOption\n-  #225 = Utf8               READ\n-  #226 = Utf8               Ljava/nio/file/StandardOpenOption;\n-  #227 = Utf8               java/nio/channels/FileChannel\n-  #228 = Utf8               open\n-  #229 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n-  #230 = Utf8               allocateDirect\n-  #231 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #232 = Utf8               flip\n-  #233 = Utf8               ()Ljava/nio/ByteBuffer;\n-  #234 = Utf8               remaining\n-  #235 = Utf8               java/lang/System\n-  #236 = Utf8               getProperty\n-  #237 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #238 = Utf8               equals\n-  #239 = Utf8               getMethod\n-  #240 = Utf8               (Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n-  #241 = Utf8               java/lang/reflect/Method\n-  #242 = Utf8               invoke\n-  #243 = Utf8               (Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n-  #244 = Utf8               (Ljava/lang/Throwable;)V\n-  #245 = Utf8               getDeclaredField\n-  #246 = Utf8               (Ljava/lang/String;)Ljava/lang/reflect/Field;\n-  #247 = Utf8               java/lang/reflect/Field\n-  #248 = Utf8               setAccessible\n-  #249 = Utf8               (Z)V\n-  #250 = Utf8               get\n-  #251 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #252 = Utf8               ()B\n-  #253 = Utf8               java/lang/Math\n-  #254 = Utf8               min\n-  #255 = Utf8               (II)I\n-  #256 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #257 = Utf8               hasRemaining\n-  #258 = Utf8               clear\n-  #259 = Utf8               (Ljava/nio/ByteBuffer;)I\n-  #260 = Utf8               position\n-  #261 = Utf8               ()J\n-  #262 = Utf8               (J)Ljava/nio/channels/FileChannel;\n+  #113 = Methodref          #6.#114       // java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+  #114 = NameAndType        #115:#116     // getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+  #115 = Utf8               getMethod\n+  #116 = Utf8               (Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+  #117 = Class              #118          // java/lang/Object\n+  #118 = Utf8               java/lang/Object\n+  #119 = Methodref          #120.#121     // java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+  #120 = Class              #122          // java/lang/reflect/Method\n+  #121 = NameAndType        #123:#124     // invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+  #122 = Utf8               java/lang/reflect/Method\n+  #123 = Utf8               invoke\n+  #124 = Utf8               (Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+  #125 = String             #126          // clean\n+  #126 = Utf8               clean\n+  #127 = Class              #128          // java/lang/ReflectiveOperationException\n+  #128 = Utf8               java/lang/ReflectiveOperationException\n+  #129 = Class              #130          // java/lang/IllegalStateException\n+  #130 = Utf8               java/lang/IllegalStateException\n+  #131 = Methodref          #129.#132     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n+  #132 = NameAndType        #27:#133      // \"<init>\":(Ljava/lang/Throwable;)V\n+  #133 = Utf8               (Ljava/lang/Throwable;)V\n+  #134 = String             #135          // sun.misc.Unsafe\n+  #135 = Utf8               sun.misc.Unsafe\n+  #136 = String             #137          // invokeCleaner\n+  #137 = Utf8               invokeCleaner\n+  #138 = String             #139          // theUnsafe\n+  #139 = Utf8               theUnsafe\n+  #140 = Methodref          #6.#141       // java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n+  #141 = NameAndType        #142:#143     // getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n+  #142 = Utf8               getDeclaredField\n+  #143 = Utf8               (Ljava/lang/String;)Ljava/lang/reflect/Field;\n+  #144 = Methodref          #145.#146     // java/lang/reflect/Field.setAccessible:(Z)V\n+  #145 = Class              #147          // java/lang/reflect/Field\n+  #146 = NameAndType        #148:#149     // setAccessible:(Z)V\n+  #147 = Utf8               java/lang/reflect/Field\n+  #148 = Utf8               setAccessible\n+  #149 = Utf8               (Z)V\n+  #150 = Methodref          #145.#151     // java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #151 = NameAndType        #152:#153     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #152 = Utf8               get\n+  #153 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #154 = Methodref          #60.#155      // java/nio/channels/FileChannel.close:()V\n+  #155 = NameAndType        #156:#42      // close:()V\n+  #156 = Utf8               close\n+  #157 = Methodref          #16.#158      // org/apache/commons/io/input/BufferedFileChannelInputStream.clean:(Ljava/nio/ByteBuffer;)V\n+  #158 = NameAndType        #126:#93      // clean:(Ljava/nio/ByteBuffer;)V\n+  #159 = Methodref          #16.#160      // org/apache/commons/io/input/BufferedFileChannelInputStream.refill:()Z\n+  #160 = NameAndType        #161:#162     // refill:()Z\n+  #161 = Utf8               refill\n+  #162 = Utf8               ()Z\n+  #163 = Methodref          #70.#164      // java/nio/ByteBuffer.get:()B\n+  #164 = NameAndType        #152:#165     // get:()B\n+  #165 = Utf8               ()B\n+  #166 = Class              #167          // java/lang/IndexOutOfBoundsException\n+  #167 = Utf8               java/lang/IndexOutOfBoundsException\n+  #168 = Methodref          #166.#40      // java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+  #169 = Methodref          #170.#171     // java/lang/Math.min:(II)I\n+  #170 = Class              #172          // java/lang/Math\n+  #171 = NameAndType        #173:#174     // min:(II)I\n+  #172 = Utf8               java/lang/Math\n+  #173 = Utf8               min\n+  #174 = Utf8               (II)I\n+  #175 = Methodref          #70.#176      // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+  #176 = NameAndType        #152:#177     // get:([BII)Ljava/nio/ByteBuffer;\n+  #177 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #178 = Methodref          #70.#179      // java/nio/ByteBuffer.hasRemaining:()Z\n+  #179 = NameAndType        #180:#162     // hasRemaining:()Z\n+  #180 = Utf8               hasRemaining\n+  #181 = Methodref          #70.#182      // java/nio/ByteBuffer.clear:()Ljava/nio/ByteBuffer;\n+  #182 = NameAndType        #183:#82      // clear:()Ljava/nio/ByteBuffer;\n+  #183 = Utf8               clear\n+  #184 = Methodref          #60.#185      // java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;)I\n+  #185 = NameAndType        #186:#187     // read:(Ljava/nio/ByteBuffer;)I\n+  #186 = Utf8               read\n+  #187 = Utf8               (Ljava/nio/ByteBuffer;)I\n+  #188 = Methodref          #70.#189      // java/nio/ByteBuffer.position:()I\n+  #189 = NameAndType        #190:#86      // position:()I\n+  #190 = Utf8               position\n+  #191 = Methodref          #70.#192      // java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n+  #192 = NameAndType        #190:#74      // position:(I)Ljava/nio/ByteBuffer;\n+  #193 = Methodref          #16.#194      // org/apache/commons/io/input/BufferedFileChannelInputStream.skipFromFileChannel:(J)J\n+  #194 = NameAndType        #195:#196     // skipFromFileChannel:(J)J\n+  #195 = Utf8               skipFromFileChannel\n+  #196 = Utf8               (J)J\n+  #197 = Methodref          #60.#198      // java/nio/channels/FileChannel.position:()J\n+  #198 = NameAndType        #190:#199     // position:()J\n+  #199 = Utf8               ()J\n+  #200 = Methodref          #60.#201      // java/nio/channels/FileChannel.size:()J\n+  #201 = NameAndType        #202:#199     // size:()J\n+  #202 = Utf8               size\n+  #203 = Methodref          #60.#204      // java/nio/channels/FileChannel.position:(J)Ljava/nio/channels/FileChannel;\n+  #204 = NameAndType        #190:#205     // position:(J)Ljava/nio/channels/FileChannel;\n+  #205 = Utf8               (J)Ljava/nio/channels/FileChannel;\n+  #206 = Methodref          #16.#207      // org/apache/commons/io/input/BufferedFileChannelInputStream.getDirectBufferClass:()Ljava/lang/Class;\n+  #207 = NameAndType        #208:#209     // getDirectBufferClass:()Ljava/lang/Class;\n+  #208 = Utf8               getDirectBufferClass\n+  #209 = Utf8               ()Ljava/lang/Class;\n+  #210 = Utf8               Signature\n+  #211 = Utf8               Ljava/lang/Class<*>;\n+  #212 = Utf8               Code\n+  #213 = Utf8               LineNumberTable\n+  #214 = Utf8               LocalVariableTable\n+  #215 = Utf8               res\n+  #216 = Utf8               LocalVariableTypeTable\n+  #217 = Utf8               StackMapTable\n+  #218 = Class              #219          // java/lang/Throwable\n+  #219 = Utf8               java/lang/Throwable\n+  #220 = Utf8               ()Ljava/lang/Class<*>;\n+  #221 = Utf8               object\n+  #222 = Utf8               Ljava/lang/Object;\n+  #223 = Utf8               (Ljava/io/File;)V\n+  #224 = Utf8               this\n+  #225 = Utf8               Lorg/apache/commons/io/input/BufferedFileChannelInputStream;\n+  #226 = Utf8               file\n+  #227 = Utf8               Ljava/io/File;\n+  #228 = Utf8               Exceptions\n+  #229 = Class              #230          // java/io/IOException\n+  #230 = Utf8               java/io/IOException\n+  #231 = Utf8               bufferSizeInBytes\n+  #232 = Utf8               I\n+  #233 = Utf8               (Ljava/nio/file/Path;)V\n+  #234 = Utf8               Ljava/nio/file/Path;\n+  #235 = Utf8               available\n+  #236 = Utf8               buffer\n+  #237 = Utf8               cleanMethod\n+  #238 = Utf8               Ljava/lang/reflect/Method;\n+  #239 = Utf8               clsCleaner\n+  #240 = Utf8               cleanerMethod\n+  #241 = Utf8               e\n+  #242 = Utf8               Ljava/lang/ReflectiveOperationException;\n+  #243 = Utf8               clsUnsafe\n+  #244 = Utf8               unsafeField\n+  #245 = Utf8               Ljava/lang/reflect/Field;\n+  #246 = Utf8               specVer\n+  #247 = Utf8               Ljava/lang/String;\n+  #248 = Utf8               ([BII)I\n+  #249 = Utf8               b\n+  #250 = Utf8               [B\n+  #251 = Utf8               offset\n+  #252 = Utf8               len\n+  #253 = Utf8               nRead\n+  #254 = Utf8               skip\n+  #255 = Utf8               n\n+  #256 = Utf8               J\n+  #257 = Utf8               skippedFromBuffer\n+  #258 = Utf8               toSkipFromFileChannel\n+  #259 = Utf8               currentFilePosition\n+  #260 = Utf8               <clinit>\n+  #261 = Utf8               SourceFile\n+  #262 = Utf8               BufferedFileChannelInputStream.java\n {\n   private final java.nio.ByteBuffer byteBuffer;\n     descriptor: Ljava/nio/ByteBuffer;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final java.nio.channels.FileChannel fileChannel;\n     descriptor: Ljava/nio/channels/FileChannel;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private static final java.lang.Class<?> DIRECT_BUFFER_CLASS;\n     descriptor: Ljava/lang/Class;\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n-    Signature: #72                          // Ljava/lang/Class<*>;\n+    Signature: #211                         // Ljava/lang/Class<*>;\n \n   private static java.lang.Class<?> getDirectBufferClass();\n     descriptor: ()Ljava/lang/Class;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=1, locals=2, args_size=0\n          0: aconst_null\n          1: astore_0\n-         2: ldc           #2                  // String sun.nio.ch.DirectBuffer\n-         4: invokestatic  #3                  // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;\n+         2: ldc           #3                  // String sun.nio.ch.DirectBuffer\n+         4: invokestatic  #5                  // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;\n          7: astore_0\n          8: goto          12\n         11: astore_1\n         12: aload_0\n         13: areturn\n       Exception table:\n          from    to  target type\n@@ -316,26 +316,26 @@\n             2      12     0   res   Ljava/lang/Class<*>;\n       StackMapTable: number_of_entries = 2\n         frame_type = 255 /* full_frame */\n           offset_delta = 11\n           locals = [ class java/lang/Class ]\n           stack = [ class java/lang/Throwable ]\n         frame_type = 0 /* same */\n-    Signature: #82                          // ()Ljava/lang/Class<*>;\n+    Signature: #220                         // ()Ljava/lang/Class<*>;\n \n   private static boolean isDirectBuffer(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)Z\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n-         0: getstatic     #6                  // Field DIRECT_BUFFER_CLASS:Ljava/lang/Class;\n+         0: getstatic     #15                 // Field DIRECT_BUFFER_CLASS:Ljava/lang/Class;\n          3: ifnull        20\n-         6: getstatic     #6                  // Field DIRECT_BUFFER_CLASS:Ljava/lang/Class;\n+         6: getstatic     #15                 // Field DIRECT_BUFFER_CLASS:Ljava/lang/Class;\n          9: aload_0\n-        10: invokevirtual #7                  // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z\n+        10: invokevirtual #21                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z\n         13: ifeq          20\n         16: iconst_1\n         17: goto          21\n         20: iconst_0\n         21: ireturn\n       LineNumberTable:\n         line 63: 0\n@@ -351,15 +351,15 @@\n     descriptor: (Ljava/io/File;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: sipush        8192\n-         5: invokespecial #8                  // Method \"<init>\":(Ljava/io/File;I)V\n+         5: invokespecial #25                 // Method \"<init>\":(Ljava/io/File;I)V\n          8: return\n       LineNumberTable:\n         line 73: 0\n         line 74: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/io/input/BufferedFileChannelInputStream;\n@@ -370,17 +370,17 @@\n   public org.apache.commons.io.input.BufferedFileChannelInputStream(java.io.File, int) throws java.io.IOException;\n     descriptor: (Ljava/io/File;I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #9                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         2: invokevirtual #29                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n          5: iload_2\n-         6: invokespecial #10                 // Method \"<init>\":(Ljava/nio/file/Path;I)V\n+         6: invokespecial #35                 // Method \"<init>\":(Ljava/nio/file/Path;I)V\n          9: return\n       LineNumberTable:\n         line 84: 0\n         line 85: 9\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/io/input/BufferedFileChannelInputStream;\n@@ -393,15 +393,15 @@\n     descriptor: (Ljava/nio/file/Path;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: sipush        8192\n-         5: invokespecial #10                 // Method \"<init>\":(Ljava/nio/file/Path;I)V\n+         5: invokespecial #35                 // Method \"<init>\":(Ljava/nio/file/Path;I)V\n          8: return\n       LineNumberTable:\n         line 94: 0\n         line 95: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/io/input/BufferedFileChannelInputStream;\n@@ -411,36 +411,36 @@\n \n   public org.apache.commons.io.input.BufferedFileChannelInputStream(java.nio.file.Path, int) throws java.io.IOException;\n     descriptor: (Ljava/nio/file/Path;I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #11                 // Method java/io/InputStream.\"<init>\":()V\n+         1: invokespecial #38                 // Method java/io/InputStream.\"<init>\":()V\n          4: aload_1\n-         5: ldc           #12                 // String path\n-         7: invokestatic  #13                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+         5: ldc           #43                 // String path\n+         7: invokestatic  #45                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n         10: pop\n         11: aload_0\n         12: aload_1\n         13: iconst_1\n-        14: anewarray     #14                 // class java/nio/file/OpenOption\n+        14: anewarray     #51                 // class java/nio/file/OpenOption\n         17: dup\n         18: iconst_0\n-        19: getstatic     #15                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+        19: getstatic     #53                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n         22: aastore\n-        23: invokestatic  #16                 // Method java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n-        26: putfield      #17                 // Field fileChannel:Ljava/nio/channels/FileChannel;\n+        23: invokestatic  #59                 // Method java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n+        26: putfield      #65                 // Field fileChannel:Ljava/nio/channels/FileChannel;\n         29: aload_0\n         30: iload_2\n-        31: invokestatic  #18                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;\n-        34: putfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+        31: invokestatic  #69                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;\n+        34: putfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n         37: aload_0\n-        38: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n-        41: invokevirtual #20                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+        38: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+        41: invokevirtual #79                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         44: pop\n         45: return\n       LineNumberTable:\n         line 104: 0\n         line 105: 4\n         line 106: 11\n         line 107: 29\n@@ -456,16 +456,16 @@\n \n   public synchronized int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #21                 // Method java/nio/ByteBuffer.remaining:()I\n+         1: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+         4: invokevirtual #83                 // Method java/nio/ByteBuffer.remaining:()I\n          7: ireturn\n       LineNumberTable:\n         line 113: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/io/input/BufferedFileChannelInputStream;\n     Exceptions:\n@@ -473,19 +473,19 @@\n \n   private void clean(java.nio.ByteBuffer);\n     descriptor: (Ljava/nio/ByteBuffer;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: invokestatic  #22                 // Method isDirectBuffer:(Ljava/lang/Object;)Z\n+         1: invokestatic  #87                 // Method isDirectBuffer:(Ljava/lang/Object;)Z\n          4: ifeq          12\n          7: aload_0\n          8: aload_1\n-         9: invokespecial #23                 // Method cleanDirectBuffer:(Ljava/nio/ByteBuffer;)V\n+         9: invokespecial #90                 // Method cleanDirectBuffer:(Ljava/nio/ByteBuffer;)V\n         12: return\n       LineNumberTable:\n         line 126: 0\n         line 127: 7\n         line 129: 12\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -495,95 +495,95 @@\n         frame_type = 12 /* same */\n \n   private void cleanDirectBuffer(java.nio.ByteBuffer);\n     descriptor: (Ljava/nio/ByteBuffer;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=7, args_size=2\n-         0: ldc           #24                 // String java.specification.version\n-         2: invokestatic  #25                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;\n+         0: ldc           #94                 // String java.specification.version\n+         2: invokestatic  #96                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;\n          5: astore_2\n-         6: ldc           #26                 // String 1.8\n+         6: ldc           #102                // String 1.8\n          8: aload_2\n-         9: invokevirtual #27                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+         9: invokevirtual #104                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n         12: ifeq          89\n-        15: ldc           #28                 // String sun.misc.Cleaner\n-        17: invokestatic  #3                  // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;\n+        15: ldc           #109                // String sun.misc.Cleaner\n+        17: invokestatic  #5                  // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;\n         20: astore_3\n-        21: getstatic     #6                  // Field DIRECT_BUFFER_CLASS:Ljava/lang/Class;\n-        24: ldc           #29                 // String cleaner\n+        21: getstatic     #15                 // Field DIRECT_BUFFER_CLASS:Ljava/lang/Class;\n+        24: ldc           #111                // String cleaner\n         26: iconst_0\n-        27: anewarray     #30                 // class java/lang/Class\n-        30: invokevirtual #31                 // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+        27: anewarray     #6                  // class java/lang/Class\n+        30: invokevirtual #113                // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n         33: astore        4\n         35: aload         4\n         37: aload_1\n         38: iconst_0\n-        39: anewarray     #32                 // class java/lang/Object\n-        42: invokevirtual #33                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+        39: anewarray     #117                // class java/lang/Object\n+        42: invokevirtual #119                // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n         45: astore        5\n         47: aload         5\n         49: ifnull        76\n         52: aload_3\n-        53: ldc           #34                 // String clean\n+        53: ldc           #125                // String clean\n         55: iconst_0\n-        56: anewarray     #30                 // class java/lang/Class\n-        59: invokevirtual #31                 // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+        56: anewarray     #6                  // class java/lang/Class\n+        59: invokevirtual #113                // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n         62: astore        6\n         64: aload         6\n         66: aload         5\n         68: iconst_0\n-        69: anewarray     #32                 // class java/lang/Object\n-        72: invokevirtual #33                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+        69: anewarray     #117                // class java/lang/Object\n+        72: invokevirtual #119                // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n         75: pop\n         76: goto          159\n         79: astore_3\n-        80: new           #36                 // class java/lang/IllegalStateException\n+        80: new           #129                // class java/lang/IllegalStateException\n         83: dup\n         84: aload_3\n-        85: invokespecial #37                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n+        85: invokespecial #131                // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n         88: athrow\n-        89: ldc           #38                 // String sun.misc.Unsafe\n-        91: invokestatic  #3                  // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;\n+        89: ldc           #134                // String sun.misc.Unsafe\n+        91: invokestatic  #5                  // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;\n         94: astore_3\n         95: aload_3\n-        96: ldc           #39                 // String invokeCleaner\n+        96: ldc           #136                // String invokeCleaner\n         98: iconst_1\n-        99: anewarray     #30                 // class java/lang/Class\n+        99: anewarray     #6                  // class java/lang/Class\n        102: dup\n        103: iconst_0\n-       104: ldc           #40                 // class java/nio/ByteBuffer\n+       104: ldc           #70                 // class java/nio/ByteBuffer\n        106: aastore\n-       107: invokevirtual #31                 // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+       107: invokevirtual #113                // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n        110: astore        4\n        112: aload_3\n-       113: ldc           #41                 // String theUnsafe\n-       115: invokevirtual #42                 // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n+       113: ldc           #138                // String theUnsafe\n+       115: invokevirtual #140                // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n        118: astore        5\n        120: aload         5\n        122: iconst_1\n-       123: invokevirtual #43                 // Method java/lang/reflect/Field.setAccessible:(Z)V\n+       123: invokevirtual #144                // Method java/lang/reflect/Field.setAccessible:(Z)V\n        126: aload         4\n        128: aload         5\n        130: aconst_null\n-       131: invokevirtual #44                 // Method java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+       131: invokevirtual #150                // Method java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;\n        134: iconst_1\n-       135: anewarray     #32                 // class java/lang/Object\n+       135: anewarray     #117                // class java/lang/Object\n        138: dup\n        139: iconst_0\n        140: aload_1\n        141: aastore\n-       142: invokevirtual #33                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+       142: invokevirtual #119                // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n        145: pop\n        146: goto          159\n        149: astore_3\n-       150: new           #36                 // class java/lang/IllegalStateException\n+       150: new           #129                // class java/lang/IllegalStateException\n        153: dup\n        154: aload_3\n-       155: invokespecial #37                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n+       155: invokespecial #131                // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n        158: athrow\n        159: return\n       Exception table:\n          from    to  target type\n             15    76    79   Class java/lang/ReflectiveOperationException\n             89   146   149   Class java/lang/ReflectiveOperationException\n       LineNumberTable:\n@@ -638,26 +638,26 @@\n \n   public synchronized void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #17                 // Field fileChannel:Ljava/nio/channels/FileChannel;\n-         4: invokevirtual #45                 // Method java/nio/channels/FileChannel.close:()V\n+         1: getfield      #65                 // Field fileChannel:Ljava/nio/channels/FileChannel;\n+         4: invokevirtual #154                // Method java/nio/channels/FileChannel.close:()V\n          7: aload_0\n          8: aload_0\n-         9: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n-        12: invokespecial #46                 // Method clean:(Ljava/nio/ByteBuffer;)V\n+         9: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+        12: invokespecial #157                // Method clean:(Ljava/nio/ByteBuffer;)V\n         15: goto          29\n         18: astore_1\n         19: aload_0\n         20: aload_0\n-        21: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n-        24: invokespecial #46                 // Method clean:(Ljava/nio/ByteBuffer;)V\n+        21: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+        24: invokespecial #157                // Method clean:(Ljava/nio/ByteBuffer;)V\n         27: aload_1\n         28: athrow\n         29: return\n       Exception table:\n          from    to  target type\n              0     7    18   any\n       LineNumberTable:\n@@ -679,21 +679,21 @@\n \n   public synchronized int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #47                 // Method refill:()Z\n+         1: invokespecial #159                // Method refill:()Z\n          4: ifne          9\n          7: iconst_m1\n          8: ireturn\n          9: aload_0\n-        10: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n-        13: invokevirtual #48                 // Method java/nio/ByteBuffer.get:()B\n+        10: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+        13: invokevirtual #163                // Method java/nio/ByteBuffer.get:()B\n         16: sipush        255\n         19: iand\n         20: ireturn\n       LineNumberTable:\n         line 201: 0\n         line 202: 7\n         line 204: 9\n@@ -720,35 +720,35 @@\n         11: iflt          22\n         14: iload_2\n         15: iload_3\n         16: iadd\n         17: aload_1\n         18: arraylength\n         19: if_icmple     30\n-        22: new           #49                 // class java/lang/IndexOutOfBoundsException\n+        22: new           #166                // class java/lang/IndexOutOfBoundsException\n         25: dup\n-        26: invokespecial #50                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+        26: invokespecial #168                // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n         29: athrow\n         30: aload_0\n-        31: invokespecial #47                 // Method refill:()Z\n+        31: invokespecial #159                // Method refill:()Z\n         34: ifne          39\n         37: iconst_m1\n         38: ireturn\n         39: iload_3\n         40: aload_0\n-        41: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n-        44: invokevirtual #21                 // Method java/nio/ByteBuffer.remaining:()I\n-        47: invokestatic  #51                 // Method java/lang/Math.min:(II)I\n+        41: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+        44: invokevirtual #83                 // Method java/nio/ByteBuffer.remaining:()I\n+        47: invokestatic  #169                // Method java/lang/Math.min:(II)I\n         50: istore_3\n         51: aload_0\n-        52: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+        52: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n         55: aload_1\n         56: iload_2\n         57: iload_3\n-        58: invokevirtual #52                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+        58: invokevirtual #175                // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n         61: pop\n         62: iload_3\n         63: ireturn\n       LineNumberTable:\n         line 209: 0\n         line 210: 22\n         line 212: 30\n@@ -771,35 +771,35 @@\n \n   private boolean refill() throws java.io.IOException;\n     descriptor: ()Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #53                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n+         1: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+         4: invokevirtual #178                // Method java/nio/ByteBuffer.hasRemaining:()Z\n          7: ifne          57\n         10: aload_0\n-        11: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n-        14: invokevirtual #54                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/ByteBuffer;\n+        11: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+        14: invokevirtual #181                // Method java/nio/ByteBuffer.clear:()Ljava/nio/ByteBuffer;\n         17: pop\n         18: iconst_0\n         19: istore_1\n         20: iload_1\n         21: ifne          39\n         24: aload_0\n-        25: getfield      #17                 // Field fileChannel:Ljava/nio/channels/FileChannel;\n+        25: getfield      #65                 // Field fileChannel:Ljava/nio/channels/FileChannel;\n         28: aload_0\n-        29: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n-        32: invokevirtual #55                 // Method java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;)I\n+        29: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+        32: invokevirtual #184                // Method java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;)I\n         35: istore_1\n         36: goto          20\n         39: aload_0\n-        40: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n-        43: invokevirtual #20                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+        40: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+        43: invokevirtual #79                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         46: pop\n         47: iload_1\n         48: iflt          55\n         51: iconst_1\n         52: goto          56\n         55: iconst_0\n         56: ireturn\n@@ -839,54 +839,54 @@\n          0: lload_1\n          1: lconst_0\n          2: lcmp\n          3: ifgt          8\n          6: lconst_0\n          7: lreturn\n          8: aload_0\n-         9: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n-        12: invokevirtual #21                 // Method java/nio/ByteBuffer.remaining:()I\n+         9: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+        12: invokevirtual #83                 // Method java/nio/ByteBuffer.remaining:()I\n         15: i2l\n         16: lload_1\n         17: lcmp\n         18: iflt          41\n         21: aload_0\n-        22: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+        22: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n         25: aload_0\n-        26: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n-        29: invokevirtual #56                 // Method java/nio/ByteBuffer.position:()I\n+        26: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+        29: invokevirtual #188                // Method java/nio/ByteBuffer.position:()I\n         32: lload_1\n         33: l2i\n         34: iadd\n-        35: invokevirtual #57                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n+        35: invokevirtual #191                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n         38: pop\n         39: lload_1\n         40: lreturn\n         41: aload_0\n-        42: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n-        45: invokevirtual #21                 // Method java/nio/ByteBuffer.remaining:()I\n+        42: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+        45: invokevirtual #83                 // Method java/nio/ByteBuffer.remaining:()I\n         48: i2l\n         49: lstore_3\n         50: lload_1\n         51: lload_3\n         52: lsub\n         53: lstore        5\n         55: aload_0\n-        56: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+        56: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n         59: iconst_0\n-        60: invokevirtual #57                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n+        60: invokevirtual #191                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n         63: pop\n         64: aload_0\n-        65: getfield      #19                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n-        68: invokevirtual #20                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+        65: getfield      #75                 // Field byteBuffer:Ljava/nio/ByteBuffer;\n+        68: invokevirtual #79                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         71: pop\n         72: lload_3\n         73: aload_0\n         74: lload         5\n-        76: invokespecial #58                 // Method skipFromFileChannel:(J)J\n+        76: invokespecial #193                // Method skipFromFileChannel:(J)J\n         79: ladd\n         80: lreturn\n       LineNumberTable:\n         line 240: 0\n         line 241: 6\n         line 243: 8\n         line 245: 21\n@@ -910,42 +910,42 @@\n \n   private long skipFromFileChannel(long) throws java.io.IOException;\n     descriptor: (J)J\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=7, args_size=2\n          0: aload_0\n-         1: getfield      #17                 // Field fileChannel:Ljava/nio/channels/FileChannel;\n-         4: invokevirtual #59                 // Method java/nio/channels/FileChannel.position:()J\n+         1: getfield      #65                 // Field fileChannel:Ljava/nio/channels/FileChannel;\n+         4: invokevirtual #197                // Method java/nio/channels/FileChannel.position:()J\n          7: lstore_3\n          8: aload_0\n-         9: getfield      #17                 // Field fileChannel:Ljava/nio/channels/FileChannel;\n-        12: invokevirtual #60                 // Method java/nio/channels/FileChannel.size:()J\n+         9: getfield      #65                 // Field fileChannel:Ljava/nio/channels/FileChannel;\n+        12: invokevirtual #200                // Method java/nio/channels/FileChannel.size:()J\n         15: lstore        5\n         17: lload_1\n         18: lload         5\n         20: lload_3\n         21: lsub\n         22: lcmp\n         23: ifle          41\n         26: aload_0\n-        27: getfield      #17                 // Field fileChannel:Ljava/nio/channels/FileChannel;\n+        27: getfield      #65                 // Field fileChannel:Ljava/nio/channels/FileChannel;\n         30: lload         5\n-        32: invokevirtual #61                 // Method java/nio/channels/FileChannel.position:(J)Ljava/nio/channels/FileChannel;\n+        32: invokevirtual #203                // Method java/nio/channels/FileChannel.position:(J)Ljava/nio/channels/FileChannel;\n         35: pop\n         36: lload         5\n         38: lload_3\n         39: lsub\n         40: lreturn\n         41: aload_0\n-        42: getfield      #17                 // Field fileChannel:Ljava/nio/channels/FileChannel;\n+        42: getfield      #65                 // Field fileChannel:Ljava/nio/channels/FileChannel;\n         45: lload_3\n         46: lload_1\n         47: ladd\n-        48: invokevirtual #61                 // Method java/nio/channels/FileChannel.position:(J)Ljava/nio/channels/FileChannel;\n+        48: invokevirtual #203                // Method java/nio/channels/FileChannel.position:(J)Ljava/nio/channels/FileChannel;\n         51: pop\n         52: lload_1\n         53: lreturn\n       LineNumberTable:\n         line 257: 0\n         line 258: 8\n         line 259: 17\n@@ -967,14 +967,14 @@\n       throws java.io.IOException\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n-         0: invokestatic  #62                 // Method getDirectBufferClass:()Ljava/lang/Class;\n-         3: putstatic     #6                  // Field DIRECT_BUFFER_CLASS:Ljava/lang/Class;\n+         0: invokestatic  #206                // Method getDirectBufferClass:()Ljava/lang/Class;\n+         3: putstatic     #15                 // Field DIRECT_BUFFER_CLASS:Ljava/lang/Class;\n          6: return\n       LineNumberTable:\n         line 50: 0\n }\n SourceFile: \"BufferedFileChannelInputStream.java\"\n"}]}
