{"diffoscope-json-version": 1, "source1": "first/EmptyBlockCheck.class", "source2": "second/EmptyBlockCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,101 +16,99 @@\n     public static final String MSG_KEY_BLOCK_EMPTY = \"block.empty\";\n     private BlockOption option;\n     \n     public EmptyBlockCheck() {\n         this.option = BlockOption.STATEMENT;\n     }\n     \n-    public void setOption(final String optionStr) {\n-        this.option = BlockOption.valueOf(optionStr.trim().toUpperCase(Locale.ENGLISH));\n+    public void setOption(final String s) {\n+        this.option = BlockOption.valueOf(s.trim().toUpperCase(Locale.ENGLISH));\n     }\n     \n     public int[] getDefaultTokens() {\n         return new int[] { 84, 95, 97, 85, 83, 92, 91, 11, 12, 89, 67 };\n     }\n     \n     public int[] getAcceptableTokens() {\n         return new int[] { 84, 95, 96, 97, 85, 83, 92, 91, 11, 12, 89, 67, 93, 94, 29 };\n     }\n     \n     public int[] getRequiredTokens() {\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final DetailAST leftCurly = findLeftCurly(ast);\n+    public void visitToken(final DetailAST detailAST) {\n+        final DetailAST leftCurly = findLeftCurly(detailAST);\n         if (leftCurly != null) {\n             if (this.option == BlockOption.STATEMENT) {\n-                boolean emptyBlock;\n+                boolean b;\n                 if (leftCurly.getType() == 72) {\n                     final DetailAST nextSibling = leftCurly.getNextSibling();\n-                    emptyBlock = (nextSibling.getType() != 33 && nextSibling.getType() != 208);\n+                    b = (nextSibling.getType() != 33 && nextSibling.getType() != 208);\n                 }\n                 else {\n-                    emptyBlock = (leftCurly.getChildCount() <= 1);\n+                    b = (leftCurly.getChildCount() <= 1);\n                 }\n-                if (emptyBlock) {\n+                if (b) {\n                     this.log(leftCurly, \"block.noStatement\", new Object[0]);\n                 }\n             }\n             else if (!this.hasText(leftCurly)) {\n-                this.log(leftCurly, \"block.empty\", new Object[] { ast.getText() });\n+                this.log(leftCurly, \"block.empty\", new Object[] { detailAST.getText() });\n             }\n         }\n     }\n     \n-    private boolean hasText(final DetailAST slistAST) {\n-        final DetailAST rightCurly = slistAST.findFirstToken(73);\n-        DetailAST rcurlyAST;\n-        if (rightCurly == null) {\n-            rcurlyAST = slistAST.getParent().findFirstToken(73);\n+    private boolean hasText(final DetailAST detailAST) {\n+        final DetailAST firstToken = detailAST.findFirstToken(73);\n+        DetailAST firstToken2;\n+        if (firstToken == null) {\n+            firstToken2 = detailAST.getParent().findFirstToken(73);\n         }\n         else {\n-            rcurlyAST = rightCurly;\n+            firstToken2 = firstToken;\n         }\n-        final int slistLineNo = slistAST.getLineNo();\n-        final int slistColNo = slistAST.getColumnNo();\n-        final int rcurlyLineNo = rcurlyAST.getLineNo();\n-        final int rcurlyColNo = rcurlyAST.getColumnNo();\n-        boolean returnValue = false;\n-        if (slistLineNo == rcurlyLineNo) {\n-            final int[] txt = Arrays.copyOfRange(this.getLineCodePoints(slistLineNo - 1), slistColNo + 1, rcurlyColNo);\n-            if (!CodePointUtil.isBlank(txt)) {\n-                returnValue = true;\n+        final int lineNo = detailAST.getLineNo();\n+        final int columnNo = detailAST.getColumnNo();\n+        final int lineNo2 = firstToken2.getLineNo();\n+        final int columnNo2 = firstToken2.getColumnNo();\n+        boolean b = false;\n+        if (lineNo == lineNo2) {\n+            if (!CodePointUtil.isBlank(Arrays.copyOfRange(this.getLineCodePoints(lineNo - 1), columnNo + 1, columnNo2))) {\n+                b = true;\n             }\n         }\n         else {\n-            final int[] codePointsFirstLine = this.getLineCodePoints(slistLineNo - 1);\n-            final int[] firstLine = Arrays.copyOfRange(codePointsFirstLine, slistColNo + 1, codePointsFirstLine.length);\n-            final int[] codePointsLastLine = this.getLineCodePoints(rcurlyLineNo - 1);\n-            final int[] lastLine = Arrays.copyOfRange(codePointsLastLine, 0, rcurlyColNo);\n-            returnValue = (!CodePointUtil.isBlank(firstLine) || !CodePointUtil.isBlank(lastLine) || !this.checkIsAllLinesAreWhitespace(slistLineNo, rcurlyLineNo));\n-        }\n-        return returnValue;\n+            final int[] lineCodePoints = this.getLineCodePoints(lineNo - 1);\n+            final int[] copyOfRange = Arrays.copyOfRange(lineCodePoints, columnNo + 1, lineCodePoints.length);\n+            final int[] copyOfRange2 = Arrays.copyOfRange(this.getLineCodePoints(lineNo2 - 1), 0, columnNo2);\n+            b = (!CodePointUtil.isBlank(copyOfRange) || !CodePointUtil.isBlank(copyOfRange2) || !this.checkIsAllLinesAreWhitespace(lineNo, lineNo2));\n+        }\n+        return b;\n     }\n     \n-    private boolean checkIsAllLinesAreWhitespace(final int lineFrom, final int lineTo) {\n-        boolean result = true;\n-        for (int i = lineFrom; i < lineTo - 1; ++i) {\n+    private boolean checkIsAllLinesAreWhitespace(final int n, final int n2) {\n+        boolean b = true;\n+        for (int i = n; i < n2 - 1; ++i) {\n             if (!CodePointUtil.isBlank(this.getLineCodePoints(i))) {\n-                result = false;\n+                b = false;\n                 break;\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private static DetailAST findLeftCurly(final DetailAST ast) {\n-        final DetailAST slistAST = ast.findFirstToken(7);\n-        DetailAST leftCurly;\n-        if ((ast.getType() == 93 || ast.getType() == 94) && ast.getNextSibling() != null && ast.getNextSibling().getFirstChild() != null && ast.getNextSibling().getFirstChild().getType() == 7) {\n-            leftCurly = ast.getNextSibling().getFirstChild();\n+    private static DetailAST findLeftCurly(final DetailAST detailAST) {\n+        final DetailAST firstToken = detailAST.findFirstToken(7);\n+        DetailAST detailAST2;\n+        if ((detailAST.getType() == 93 || detailAST.getType() == 94) && detailAST.getNextSibling() != null && detailAST.getNextSibling().getFirstChild() != null && detailAST.getNextSibling().getFirstChild().getType() == 7) {\n+            detailAST2 = detailAST.getNextSibling().getFirstChild();\n         }\n-        else if (slistAST == null) {\n-            leftCurly = ast.findFirstToken(72);\n+        else if (firstToken == null) {\n+            detailAST2 = detailAST.findFirstToken(72);\n         }\n         else {\n-            leftCurly = slistAST;\n+            detailAST2 = firstToken;\n         }\n-        return leftCurly;\n+        return detailAST2;\n     }\n }\n"}]}
