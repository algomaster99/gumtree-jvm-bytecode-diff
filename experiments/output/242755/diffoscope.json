{"diffoscope-json-version": 1, "source1": "first/NEWARRAY.class", "source2": "second/NEWARRAY.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,49 +10,49 @@\n public class NEWARRAY extends Instruction implements AllocationInstruction, ExceptionThrower, StackProducer\n {\n     private byte type;\n     \n     NEWARRAY() {\n     }\n     \n-    public NEWARRAY(final BasicType type) {\n-        this(type.getType());\n+    public NEWARRAY(final BasicType basicType) {\n+        this(basicType.getType());\n     }\n     \n     public NEWARRAY(final byte type) {\n         super((short)188, (short)2);\n         this.type = type;\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitAllocationInstruction((AllocationInstruction)this);\n-        v.visitExceptionThrower((ExceptionThrower)this);\n-        v.visitStackProducer((StackProducer)this);\n-        v.visitNEWARRAY(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitAllocationInstruction((AllocationInstruction)this);\n+        visitor.visitExceptionThrower((ExceptionThrower)this);\n+        visitor.visitStackProducer((StackProducer)this);\n+        visitor.visitNEWARRAY(this);\n     }\n     \n-    public void dump(final DataOutputStream out) throws IOException {\n-        out.writeByte(super.getOpcode());\n-        out.writeByte(this.type);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeByte(super.getOpcode());\n+        dataOutputStream.writeByte(this.type);\n     }\n     \n     public Class<?>[] getExceptions() {\n         return new Class[] { ExceptionConst.NEGATIVE_ARRAY_SIZE_EXCEPTION };\n     }\n     \n     public final Type getType() {\n         return (Type)new ArrayType((Type)BasicType.getType(this.type), 1);\n     }\n     \n     public final byte getTypecode() {\n         return this.type;\n     }\n     \n-    protected void initFromFile(final ByteSequence bytes, final boolean wide) throws IOException {\n-        this.type = bytes.readByte();\n+    protected void initFromFile(final ByteSequence byteSequence, final boolean b) throws IOException {\n+        this.type = byteSequence.readByte();\n         super.setLength(2);\n     }\n     \n-    public String toString(final boolean verbose) {\n-        return super.toString(verbose) + \" \" + Const.getTypeName((int)this.type);\n+    public String toString(final boolean b) {\n+        return super.toString(b) + \" \" + Const.getTypeName((int)this.type);\n     }\n }\n"}]}
