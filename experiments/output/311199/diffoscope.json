{"diffoscope-json-version": 1, "source1": "first/X0017_StrongEncryptionHeader.class", "source2": "second/X0017_StrongEncryptionHeader.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,187 +1,187 @@\n-  SHA-256 checksum aa9e615d7eda76e7bf025fe9fed5482576f1bc785db48f0ea12f2fa1c4a99947\n+  SHA-256 checksum 7fedd5ecb565f20ed7bb434559adbe517389fa4d90bcb79f9f4f4faefbbd547e\n   Compiled from \"X0017_StrongEncryptionHeader.java\"\n public class org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader extends org.apache.commons.compress.archivers.zip.PKWareExtraHeader\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #48                         // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n-  super_class: #49                        // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  this_class: #13                         // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n+  super_class: #8                         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n   interfaces: 0, fields: 13, methods: 9, attributes: 2\n Constant pool:\n-    #1 = Class              #94           // org/apache/commons/compress/archivers/zip/ZipShort\n-    #2 = Methodref          #1.#95        // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-    #3 = Methodref          #49.#96       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-    #4 = Fieldref           #48.#97       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.rcount:J\n-    #5 = Fieldref           #48.#98       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-    #6 = Fieldref           #48.#99       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-    #7 = Methodref          #48.#100      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.assertMinimalLength:(II)V\n-    #8 = Methodref          #1.#101       // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-    #9 = Fieldref           #48.#102      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.format:I\n-   #10 = Methodref          #53.#103      // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-   #11 = Fieldref           #48.#104      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.bitlen:I\n-   #12 = Fieldref           #48.#105      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.flags:I\n-   #13 = Methodref          #106.#107     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-   #14 = Methodref          #62.#108      // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #15 = Fieldref           #48.#109      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.hashSize:I\n-   #16 = String             #110          // ivSize\n-   #17 = Methodref          #48.#111      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.assertDynamicLengthFits:(Ljava/lang/String;III)V\n-   #18 = Methodref          #112.#113     // java/util/Arrays.copyOfRange:([BII)[B\n-   #19 = Fieldref           #48.#114      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.ivData:[B\n-   #20 = String             #115          // erdSize\n-   #21 = Fieldref           #48.#116      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.erdData:[B\n-   #22 = String             #117          // vSize\n-   #23 = Class              #118          // java/util/zip/ZipException\n-   #24 = Class              #119          // java/lang/StringBuilder\n-   #25 = Methodref          #24.#120      // java/lang/StringBuilder.\"<init>\":()V\n-   #26 = String             #121          // Invalid X0017_StrongEncryptionHeader: vSize\n-   #27 = Methodref          #24.#122      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #28 = Methodref          #24.#123      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #29 = String             #124          //  is too small to hold CRC\n-   #30 = Methodref          #24.#125      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #31 = Methodref          #23.#126      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #32 = Fieldref           #48.#127      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.vData:[B\n-   #33 = Fieldref           #48.#128      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.vCRC32:[B\n-   #34 = String             #129          // Invalid X0017_StrongEncryptionHeader: resize\n-   #35 = String             #130          //  is too small to hold hashSize\n-   #36 = Fieldref           #48.#131      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.recipientKeyHash:[B\n-   #37 = Fieldref           #48.#132      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.keyBlob:[B\n-   #38 = String             #133          // resize\n-   #39 = Methodref          #134.#135     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #40 = Methodref          #49.#136      // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromLocalFileData:([BII)V\n-   #41 = Methodref          #48.#137      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.parseFileFormat:([BII)V\n-   #42 = Methodref          #49.#138      // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n-   #43 = Methodref          #48.#139      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.parseCentralDirectoryFormat:([BII)V\n-   #44 = String             #140          // Invalid X0017_StrongEncryptionHeader:\n-   #45 = String             #141          //\n-   #46 = String             #142          //  doesn\\'t fit into\n-   #47 = String             #143          //  bytes of data at position\n-   #48 = Class              #144          // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n-   #49 = Class              #145          // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-   #50 = Utf8               format\n-   #51 = Utf8               I\n-   #52 = Utf8               algId\n-   #53 = Class              #146          // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n-   #54 = Utf8               EncryptionAlgorithm\n-   #55 = Utf8               InnerClasses\n-   #56 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-   #57 = Utf8               bitlen\n-   #58 = Utf8               flags\n-   #59 = Utf8               rcount\n-   #60 = Utf8               J\n-   #61 = Utf8               hashAlg\n-   #62 = Class              #147          // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n-   #63 = Utf8               HashAlgorithm\n-   #64 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #65 = Utf8               hashSize\n-   #66 = Utf8               ivData\n-   #67 = Utf8               [B\n-   #68 = Utf8               erdData\n-   #69 = Utf8               recipientKeyHash\n-   #70 = Utf8               keyBlob\n-   #71 = Utf8               vData\n-   #72 = Utf8               vCRC32\n-   #73 = Utf8               <init>\n-   #74 = Utf8               ()V\n-   #75 = Utf8               Code\n-   #76 = Utf8               LineNumberTable\n-   #77 = Utf8               getRecordCount\n-   #78 = Utf8               ()J\n-   #79 = Utf8               getHashAlgorithm\n-   #80 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #81 = Utf8               getEncryptionAlgorithm\n-   #82 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-   #83 = Utf8               parseCentralDirectoryFormat\n-   #84 = Utf8               ([BII)V\n-   #85 = Utf8               StackMapTable\n-   #86 = Utf8               Exceptions\n-   #87 = Utf8               parseFileFormat\n-   #88 = Utf8               parseFromLocalFileData\n-   #89 = Utf8               parseFromCentralDirectoryData\n-   #90 = Utf8               assertDynamicLengthFits\n-   #91 = Utf8               (Ljava/lang/String;III)V\n-   #92 = Utf8               SourceFile\n-   #93 = Utf8               X0017_StrongEncryptionHeader.java\n-   #94 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-   #95 = NameAndType        #73:#148      // \"<init>\":(I)V\n-   #96 = NameAndType        #73:#149      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-   #97 = NameAndType        #59:#60       // rcount:J\n-   #98 = NameAndType        #61:#64       // hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #99 = NameAndType        #52:#56       // algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-  #100 = NameAndType        #150:#151     // assertMinimalLength:(II)V\n-  #101 = NameAndType        #152:#153     // getValue:([BI)I\n-  #102 = NameAndType        #50:#51       // format:I\n-  #103 = NameAndType        #154:#155     // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-  #104 = NameAndType        #57:#51       // bitlen:I\n-  #105 = NameAndType        #58:#51       // flags:I\n-  #106 = Class              #156          // org/apache/commons/compress/archivers/zip/ZipLong\n-  #107 = NameAndType        #152:#157     // getValue:([BI)J\n-  #108 = NameAndType        #154:#158     // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-  #109 = NameAndType        #65:#51       // hashSize:I\n-  #110 = Utf8               ivSize\n-  #111 = NameAndType        #90:#91       // assertDynamicLengthFits:(Ljava/lang/String;III)V\n-  #112 = Class              #159          // java/util/Arrays\n-  #113 = NameAndType        #160:#161     // copyOfRange:([BII)[B\n-  #114 = NameAndType        #66:#67       // ivData:[B\n-  #115 = Utf8               erdSize\n-  #116 = NameAndType        #68:#67       // erdData:[B\n-  #117 = Utf8               vSize\n-  #118 = Utf8               java/util/zip/ZipException\n-  #119 = Utf8               java/lang/StringBuilder\n-  #120 = NameAndType        #73:#74       // \"<init>\":()V\n-  #121 = Utf8               Invalid X0017_StrongEncryptionHeader: vSize\n-  #122 = NameAndType        #162:#163     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #123 = NameAndType        #162:#164     // append:(I)Ljava/lang/StringBuilder;\n-  #124 = Utf8                is too small to hold CRC\n-  #125 = NameAndType        #165:#166     // toString:()Ljava/lang/String;\n-  #126 = NameAndType        #73:#167      // \"<init>\":(Ljava/lang/String;)V\n-  #127 = NameAndType        #71:#67       // vData:[B\n-  #128 = NameAndType        #72:#67       // vCRC32:[B\n-  #129 = Utf8               Invalid X0017_StrongEncryptionHeader: resize\n-  #130 = Utf8                is too small to hold hashSize\n-  #131 = NameAndType        #69:#67       // recipientKeyHash:[B\n-  #132 = NameAndType        #70:#67       // keyBlob:[B\n-  #133 = Utf8               resize\n-  #134 = Class              #168          // java/lang/System\n-  #135 = NameAndType        #169:#170     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #136 = NameAndType        #88:#84       // parseFromLocalFileData:([BII)V\n-  #137 = NameAndType        #87:#84       // parseFileFormat:([BII)V\n-  #138 = NameAndType        #89:#84       // parseFromCentralDirectoryData:([BII)V\n-  #139 = NameAndType        #83:#84       // parseCentralDirectoryFormat:([BII)V\n-  #140 = Utf8               Invalid X0017_StrongEncryptionHeader:\n-  #141 = Utf8\n-  #142 = Utf8                doesn\\'t fit into\n-  #143 = Utf8                bytes of data at position\n-  #144 = Utf8               org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n-  #145 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-  #146 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n-  #147 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n-  #148 = Utf8               (I)V\n-  #149 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-  #150 = Utf8               assertMinimalLength\n-  #151 = Utf8               (II)V\n-  #152 = Utf8               getValue\n-  #153 = Utf8               ([BI)I\n-  #154 = Utf8               getAlgorithmByCode\n-  #155 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-  #156 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #157 = Utf8               ([BI)J\n-  #158 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-  #159 = Utf8               java/util/Arrays\n-  #160 = Utf8               copyOfRange\n-  #161 = Utf8               ([BII)[B\n-  #162 = Utf8               append\n-  #163 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #164 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #165 = Utf8               toString\n-  #166 = Utf8               ()Ljava/lang/String;\n-  #167 = Utf8               (Ljava/lang/String;)V\n-  #168 = Utf8               java/lang/System\n-  #169 = Utf8               arraycopy\n-  #170 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/ZipShort\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+    #3 = Methodref          #1.#4         // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+    #4 = NameAndType        #5:#6         // \"<init>\":(I)V\n+    #5 = Utf8               <init>\n+    #6 = Utf8               (I)V\n+    #7 = Methodref          #8.#9         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+    #8 = Class              #10           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+    #9 = NameAndType        #5:#11        // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #10 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+   #11 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #12 = Fieldref           #13.#14       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.rcount:J\n+   #13 = Class              #15           // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n+   #14 = NameAndType        #16:#17       // rcount:J\n+   #15 = Utf8               org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n+   #16 = Utf8               rcount\n+   #17 = Utf8               J\n+   #18 = Fieldref           #13.#19       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #19 = NameAndType        #20:#21       // hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #20 = Utf8               hashAlg\n+   #21 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #22 = Fieldref           #13.#23       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #23 = NameAndType        #24:#25       // algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #24 = Utf8               algId\n+   #25 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #26 = Methodref          #13.#27       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.assertMinimalLength:(II)V\n+   #27 = NameAndType        #28:#29       // assertMinimalLength:(II)V\n+   #28 = Utf8               assertMinimalLength\n+   #29 = Utf8               (II)V\n+   #30 = Methodref          #1.#31        // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+   #31 = NameAndType        #32:#33       // getValue:([BI)I\n+   #32 = Utf8               getValue\n+   #33 = Utf8               ([BI)I\n+   #34 = Fieldref           #13.#35       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.format:I\n+   #35 = NameAndType        #36:#37       // format:I\n+   #36 = Utf8               format\n+   #37 = Utf8               I\n+   #38 = Methodref          #39.#40       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #39 = Class              #41           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n+   #40 = NameAndType        #42:#43       // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #41 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n+   #42 = Utf8               getAlgorithmByCode\n+   #43 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #44 = Fieldref           #13.#45       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.bitlen:I\n+   #45 = NameAndType        #46:#37       // bitlen:I\n+   #46 = Utf8               bitlen\n+   #47 = Fieldref           #13.#48       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.flags:I\n+   #48 = NameAndType        #49:#37       // flags:I\n+   #49 = Utf8               flags\n+   #50 = Methodref          #51.#52       // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+   #51 = Class              #53           // org/apache/commons/compress/archivers/zip/ZipLong\n+   #52 = NameAndType        #32:#54       // getValue:([BI)J\n+   #53 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+   #54 = Utf8               ([BI)J\n+   #55 = Methodref          #56.#57       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #56 = Class              #58           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n+   #57 = NameAndType        #42:#59       // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #58 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n+   #59 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #60 = Fieldref           #13.#61       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.hashSize:I\n+   #61 = NameAndType        #62:#37       // hashSize:I\n+   #62 = Utf8               hashSize\n+   #63 = String             #64           // ivSize\n+   #64 = Utf8               ivSize\n+   #65 = Methodref          #13.#66       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.assertDynamicLengthFits:(Ljava/lang/String;III)V\n+   #66 = NameAndType        #67:#68       // assertDynamicLengthFits:(Ljava/lang/String;III)V\n+   #67 = Utf8               assertDynamicLengthFits\n+   #68 = Utf8               (Ljava/lang/String;III)V\n+   #69 = Methodref          #70.#71       // java/util/Arrays.copyOfRange:([BII)[B\n+   #70 = Class              #72           // java/util/Arrays\n+   #71 = NameAndType        #73:#74       // copyOfRange:([BII)[B\n+   #72 = Utf8               java/util/Arrays\n+   #73 = Utf8               copyOfRange\n+   #74 = Utf8               ([BII)[B\n+   #75 = Fieldref           #13.#76       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.ivData:[B\n+   #76 = NameAndType        #77:#78       // ivData:[B\n+   #77 = Utf8               ivData\n+   #78 = Utf8               [B\n+   #79 = String             #80           // erdSize\n+   #80 = Utf8               erdSize\n+   #81 = Fieldref           #13.#82       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.erdData:[B\n+   #82 = NameAndType        #83:#78       // erdData:[B\n+   #83 = Utf8               erdData\n+   #84 = String             #85           // vSize\n+   #85 = Utf8               vSize\n+   #86 = Class              #87           // java/util/zip/ZipException\n+   #87 = Utf8               java/util/zip/ZipException\n+   #88 = Class              #89           // java/lang/StringBuilder\n+   #89 = Utf8               java/lang/StringBuilder\n+   #90 = Methodref          #88.#91       // java/lang/StringBuilder.\"<init>\":()V\n+   #91 = NameAndType        #5:#92        // \"<init>\":()V\n+   #92 = Utf8               ()V\n+   #93 = String             #94           // Invalid X0017_StrongEncryptionHeader: vSize\n+   #94 = Utf8               Invalid X0017_StrongEncryptionHeader: vSize\n+   #95 = Methodref          #88.#96       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #96 = NameAndType        #97:#98       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #97 = Utf8               append\n+   #98 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #99 = Methodref          #88.#100      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #100 = NameAndType        #97:#101      // append:(I)Ljava/lang/StringBuilder;\n+  #101 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #102 = String             #103          //  is too small to hold CRC\n+  #103 = Utf8                is too small to hold CRC\n+  #104 = Methodref          #88.#105      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #105 = NameAndType        #106:#107     // toString:()Ljava/lang/String;\n+  #106 = Utf8               toString\n+  #107 = Utf8               ()Ljava/lang/String;\n+  #108 = Methodref          #86.#109      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+  #109 = NameAndType        #5:#110       // \"<init>\":(Ljava/lang/String;)V\n+  #110 = Utf8               (Ljava/lang/String;)V\n+  #111 = Fieldref           #13.#112      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.vData:[B\n+  #112 = NameAndType        #113:#78      // vData:[B\n+  #113 = Utf8               vData\n+  #114 = Fieldref           #13.#115      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.vCRC32:[B\n+  #115 = NameAndType        #116:#78      // vCRC32:[B\n+  #116 = Utf8               vCRC32\n+  #117 = String             #118          // Invalid X0017_StrongEncryptionHeader: resize\n+  #118 = Utf8               Invalid X0017_StrongEncryptionHeader: resize\n+  #119 = String             #120          //  is too small to hold hashSize\n+  #120 = Utf8                is too small to hold hashSize\n+  #121 = Fieldref           #13.#122      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.recipientKeyHash:[B\n+  #122 = NameAndType        #123:#78      // recipientKeyHash:[B\n+  #123 = Utf8               recipientKeyHash\n+  #124 = Fieldref           #13.#125      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.keyBlob:[B\n+  #125 = NameAndType        #126:#78      // keyBlob:[B\n+  #126 = Utf8               keyBlob\n+  #127 = String             #128          // resize\n+  #128 = Utf8               resize\n+  #129 = Methodref          #130.#131     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #130 = Class              #132          // java/lang/System\n+  #131 = NameAndType        #133:#134     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #132 = Utf8               java/lang/System\n+  #133 = Utf8               arraycopy\n+  #134 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #135 = Methodref          #8.#136       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromLocalFileData:([BII)V\n+  #136 = NameAndType        #137:#138     // parseFromLocalFileData:([BII)V\n+  #137 = Utf8               parseFromLocalFileData\n+  #138 = Utf8               ([BII)V\n+  #139 = Methodref          #13.#140      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.parseFileFormat:([BII)V\n+  #140 = NameAndType        #141:#138     // parseFileFormat:([BII)V\n+  #141 = Utf8               parseFileFormat\n+  #142 = Methodref          #8.#143       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n+  #143 = NameAndType        #144:#138     // parseFromCentralDirectoryData:([BII)V\n+  #144 = Utf8               parseFromCentralDirectoryData\n+  #145 = Methodref          #13.#146      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.parseCentralDirectoryFormat:([BII)V\n+  #146 = NameAndType        #147:#138     // parseCentralDirectoryFormat:([BII)V\n+  #147 = Utf8               parseCentralDirectoryFormat\n+  #148 = String             #149          // Invalid X0017_StrongEncryptionHeader:\n+  #149 = Utf8               Invalid X0017_StrongEncryptionHeader:\n+  #150 = String             #151          //\n+  #151 = Utf8\n+  #152 = String             #153          //  doesn\\'t fit into\n+  #153 = Utf8                doesn\\'t fit into\n+  #154 = String             #155          //  bytes of data at position\n+  #155 = Utf8                bytes of data at position\n+  #156 = Utf8               Code\n+  #157 = Utf8               LineNumberTable\n+  #158 = Utf8               getRecordCount\n+  #159 = Utf8               ()J\n+  #160 = Utf8               getHashAlgorithm\n+  #161 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+  #162 = Utf8               getEncryptionAlgorithm\n+  #163 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+  #164 = Utf8               StackMapTable\n+  #165 = Utf8               Exceptions\n+  #166 = Utf8               SourceFile\n+  #167 = Utf8               X0017_StrongEncryptionHeader.java\n+  #168 = Utf8               InnerClasses\n+  #169 = Utf8               HashAlgorithm\n+  #170 = Utf8               EncryptionAlgorithm\n {\n   private int format;\n     descriptor: I\n     flags: (0x0002) ACC_PRIVATE\n \n   private org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm algId;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n@@ -236,121 +236,121 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n          1: new           #1                  // class org/apache/commons/compress/archivers/zip/ZipShort\n          4: dup\n          5: bipush        23\n-         7: invokespecial #2                  // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-        10: invokespecial #3                  // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+         7: invokespecial #3                  // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+        10: invokespecial #7                  // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n         13: return\n       LineNumberTable:\n         line 251: 0\n         line 252: 13\n \n   public long getRecordCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field rcount:J\n+         1: getfield      #12                 // Field rcount:J\n          4: lreturn\n       LineNumberTable:\n         line 279: 0\n \n   public org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm getHashAlgorithm();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+         1: getfield      #18                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n          4: areturn\n       LineNumberTable:\n         line 287: 0\n \n   public org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm getEncryptionAlgorithm();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+         1: getfield      #22                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n          4: areturn\n       LineNumberTable:\n         line 295: 0\n \n   public void parseCentralDirectoryFormat(byte[], int, int) throws java.util.zip.ZipException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: bipush        12\n          3: iload_3\n-         4: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+         4: invokevirtual #26                 // Method assertMinimalLength:(II)V\n          7: aload_0\n          8: aload_1\n          9: iload_2\n-        10: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        13: putfield      #9                  // Field format:I\n+        10: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        13: putfield      #34                 // Field format:I\n         16: aload_0\n         17: aload_1\n         18: iload_2\n         19: iconst_2\n         20: iadd\n-        21: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        24: invokestatic  #10                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-        27: putfield      #6                  // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+        21: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        24: invokestatic  #38                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+        27: putfield      #22                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n         30: aload_0\n         31: aload_1\n         32: iload_2\n         33: iconst_4\n         34: iadd\n-        35: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        38: putfield      #11                 // Field bitlen:I\n+        35: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        38: putfield      #44                 // Field bitlen:I\n         41: aload_0\n         42: aload_1\n         43: iload_2\n         44: bipush        6\n         46: iadd\n-        47: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        50: putfield      #12                 // Field flags:I\n+        47: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        50: putfield      #47                 // Field flags:I\n         53: aload_0\n         54: aload_1\n         55: iload_2\n         56: bipush        8\n         58: iadd\n-        59: invokestatic  #13                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-        62: putfield      #4                  // Field rcount:J\n+        59: invokestatic  #50                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+        62: putfield      #12                 // Field rcount:J\n         65: aload_0\n-        66: getfield      #4                  // Field rcount:J\n+        66: getfield      #12                 // Field rcount:J\n         69: lconst_0\n         70: lcmp\n         71: ifle          108\n         74: aload_0\n         75: bipush        16\n         77: iload_3\n-        78: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+        78: invokevirtual #26                 // Method assertMinimalLength:(II)V\n         81: aload_0\n         82: aload_1\n         83: iload_2\n         84: bipush        12\n         86: iadd\n-        87: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        90: invokestatic  #14                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-        93: putfield      #5                  // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+        87: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        90: invokestatic  #55                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+        93: putfield      #18                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n         96: aload_0\n         97: aload_1\n         98: iload_2\n         99: bipush        14\n        101: iadd\n-       102: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       105: putfield      #15                 // Field hashSize:I\n+       102: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       105: putfield      #60                 // Field hashSize:I\n        108: return\n       LineNumberTable:\n         line 308: 0\n         line 310: 7\n         line 311: 16\n         line 312: 30\n         line 313: 41\n@@ -370,443 +370,443 @@\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=8, args_size=4\n          0: aload_0\n          1: iconst_4\n          2: iload_3\n-         3: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+         3: invokevirtual #26                 // Method assertMinimalLength:(II)V\n          6: aload_1\n          7: iload_2\n-         8: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+         8: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n         11: istore        4\n         13: aload_0\n-        14: ldc           #16                 // String ivSize\n+        14: ldc           #63                 // String ivSize\n         16: iload         4\n         18: iconst_4\n         19: iload_3\n-        20: invokespecial #17                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+        20: invokespecial #65                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n         23: aload_0\n         24: iload_2\n         25: iconst_4\n         26: iadd\n         27: iload         4\n-        29: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+        29: invokevirtual #26                 // Method assertMinimalLength:(II)V\n         32: aload_0\n         33: aload_1\n         34: iload_2\n         35: iconst_4\n         36: iadd\n         37: iload         4\n-        39: invokestatic  #18                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-        42: putfield      #19                 // Field ivData:[B\n+        39: invokestatic  #69                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+        42: putfield      #75                 // Field ivData:[B\n         45: aload_0\n         46: bipush        16\n         48: iload         4\n         50: iadd\n         51: iload_3\n-        52: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+        52: invokevirtual #26                 // Method assertMinimalLength:(II)V\n         55: aload_0\n         56: aload_1\n         57: iload_2\n         58: iload         4\n         60: iadd\n         61: bipush        6\n         63: iadd\n-        64: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        67: putfield      #9                  // Field format:I\n+        64: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        67: putfield      #34                 // Field format:I\n         70: aload_0\n         71: aload_1\n         72: iload_2\n         73: iload         4\n         75: iadd\n         76: bipush        8\n         78: iadd\n-        79: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        82: invokestatic  #10                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-        85: putfield      #6                  // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+        79: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        82: invokestatic  #38                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+        85: putfield      #22                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n         88: aload_0\n         89: aload_1\n         90: iload_2\n         91: iload         4\n         93: iadd\n         94: bipush        10\n         96: iadd\n-        97: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       100: putfield      #11                 // Field bitlen:I\n+        97: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       100: putfield      #44                 // Field bitlen:I\n        103: aload_0\n        104: aload_1\n        105: iload_2\n        106: iload         4\n        108: iadd\n        109: bipush        12\n        111: iadd\n-       112: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       115: putfield      #12                 // Field flags:I\n+       112: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       115: putfield      #47                 // Field flags:I\n        118: aload_1\n        119: iload_2\n        120: iload         4\n        122: iadd\n        123: bipush        14\n        125: iadd\n-       126: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       126: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        129: istore        5\n        131: aload_0\n-       132: ldc           #20                 // String erdSize\n+       132: ldc           #79                 // String erdSize\n        134: iload         5\n        136: iload         4\n        138: bipush        16\n        140: iadd\n        141: iload_3\n-       142: invokespecial #17                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+       142: invokespecial #65                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n        145: aload_0\n        146: iload_2\n        147: iload         4\n        149: iadd\n        150: bipush        16\n        152: iadd\n        153: iload         5\n-       155: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+       155: invokevirtual #26                 // Method assertMinimalLength:(II)V\n        158: aload_0\n        159: aload_1\n        160: iload_2\n        161: iload         4\n        163: iadd\n        164: bipush        16\n        166: iadd\n        167: iload         5\n-       169: invokestatic  #18                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       172: putfield      #21                 // Field erdData:[B\n+       169: invokestatic  #69                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+       172: putfield      #81                 // Field erdData:[B\n        175: aload_0\n        176: bipush        20\n        178: iload         4\n        180: iadd\n        181: iload         5\n        183: iadd\n        184: iload_3\n-       185: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+       185: invokevirtual #26                 // Method assertMinimalLength:(II)V\n        188: aload_0\n        189: aload_1\n        190: iload_2\n        191: iload         4\n        193: iadd\n        194: bipush        16\n        196: iadd\n        197: iload         5\n        199: iadd\n-       200: invokestatic  #13                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       203: putfield      #4                  // Field rcount:J\n+       200: invokestatic  #50                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       203: putfield      #12                 // Field rcount:J\n        206: aload_0\n-       207: getfield      #4                  // Field rcount:J\n+       207: getfield      #12                 // Field rcount:J\n        210: lconst_0\n        211: lcmp\n        212: ifne          389\n        215: aload_0\n        216: iload         4\n        218: bipush        20\n        220: iadd\n        221: iload         5\n        223: iadd\n        224: iconst_2\n        225: iadd\n        226: iload_3\n-       227: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+       227: invokevirtual #26                 // Method assertMinimalLength:(II)V\n        230: aload_1\n        231: iload_2\n        232: iload         4\n        234: iadd\n        235: bipush        20\n        237: iadd\n        238: iload         5\n        240: iadd\n-       241: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       241: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        244: istore        6\n        246: aload_0\n-       247: ldc           #22                 // String vSize\n+       247: ldc           #84                 // String vSize\n        249: iload         6\n        251: iload         4\n        253: bipush        22\n        255: iadd\n        256: iload         5\n        258: iadd\n        259: iload_3\n-       260: invokespecial #17                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+       260: invokespecial #65                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n        263: iload         6\n        265: iconst_4\n        266: if_icmpge     302\n-       269: new           #23                 // class java/util/zip/ZipException\n+       269: new           #86                 // class java/util/zip/ZipException\n        272: dup\n-       273: new           #24                 // class java/lang/StringBuilder\n+       273: new           #88                 // class java/lang/StringBuilder\n        276: dup\n-       277: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       280: ldc           #26                 // String Invalid X0017_StrongEncryptionHeader: vSize\n-       282: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       277: invokespecial #90                 // Method java/lang/StringBuilder.\"<init>\":()V\n+       280: ldc           #93                 // String Invalid X0017_StrongEncryptionHeader: vSize\n+       282: invokevirtual #95                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        285: iload         6\n-       287: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       290: ldc           #29                 // String  is too small to hold CRC\n-       292: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       295: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       298: invokespecial #31                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       287: invokevirtual #99                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       290: ldc           #102                // String  is too small to hold CRC\n+       292: invokevirtual #95                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       295: invokevirtual #104                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       298: invokespecial #108                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n        301: athrow\n        302: aload_0\n        303: iload_2\n        304: iload         4\n        306: iadd\n        307: bipush        22\n        309: iadd\n        310: iload         5\n        312: iadd\n        313: iload         6\n        315: iconst_4\n        316: isub\n-       317: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+       317: invokevirtual #26                 // Method assertMinimalLength:(II)V\n        320: aload_0\n        321: aload_1\n        322: iload_2\n        323: iload         4\n        325: iadd\n        326: bipush        22\n        328: iadd\n        329: iload         5\n        331: iadd\n        332: iload         6\n        334: iconst_4\n        335: isub\n-       336: invokestatic  #18                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       339: putfield      #32                 // Field vData:[B\n+       336: invokestatic  #69                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+       339: putfield      #111                // Field vData:[B\n        342: aload_0\n        343: iload_2\n        344: iload         4\n        346: iadd\n        347: bipush        22\n        349: iadd\n        350: iload         5\n        352: iadd\n        353: iload         6\n        355: iadd\n        356: iconst_4\n        357: isub\n        358: iconst_4\n-       359: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+       359: invokevirtual #26                 // Method assertMinimalLength:(II)V\n        362: aload_0\n        363: aload_1\n        364: iload_2\n        365: iload         4\n        367: iadd\n        368: bipush        22\n        370: iadd\n        371: iload         5\n        373: iadd\n        374: iload         6\n        376: iadd\n        377: iconst_4\n        378: isub\n        379: iconst_4\n-       380: invokestatic  #18                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       383: putfield      #33                 // Field vCRC32:[B\n+       380: invokestatic  #69                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+       383: putfield      #114                // Field vCRC32:[B\n        386: goto          770\n        389: aload_0\n        390: iload         4\n        392: bipush        20\n        394: iadd\n        395: iload         5\n        397: iadd\n        398: bipush        6\n        400: iadd\n        401: iload_3\n-       402: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+       402: invokevirtual #26                 // Method assertMinimalLength:(II)V\n        405: aload_0\n        406: aload_1\n        407: iload_2\n        408: iload         4\n        410: iadd\n        411: bipush        20\n        413: iadd\n        414: iload         5\n        416: iadd\n-       417: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       420: invokestatic  #14                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-       423: putfield      #5                  // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+       417: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       420: invokestatic  #55                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+       423: putfield      #18                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n        426: aload_0\n        427: aload_1\n        428: iload_2\n        429: iload         4\n        431: iadd\n        432: bipush        22\n        434: iadd\n        435: iload         5\n        437: iadd\n-       438: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       441: putfield      #15                 // Field hashSize:I\n+       438: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       441: putfield      #60                 // Field hashSize:I\n        444: aload_1\n        445: iload_2\n        446: iload         4\n        448: iadd\n        449: bipush        24\n        451: iadd\n        452: iload         5\n        454: iadd\n-       455: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       455: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        458: istore        6\n        460: iload         6\n        462: aload_0\n-       463: getfield      #15                 // Field hashSize:I\n+       463: getfield      #60                 // Field hashSize:I\n        466: if_icmpge     509\n-       469: new           #23                 // class java/util/zip/ZipException\n+       469: new           #86                 // class java/util/zip/ZipException\n        472: dup\n-       473: new           #24                 // class java/lang/StringBuilder\n+       473: new           #88                 // class java/lang/StringBuilder\n        476: dup\n-       477: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       480: ldc           #34                 // String Invalid X0017_StrongEncryptionHeader: resize\n-       482: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       477: invokespecial #90                 // Method java/lang/StringBuilder.\"<init>\":()V\n+       480: ldc           #117                // String Invalid X0017_StrongEncryptionHeader: resize\n+       482: invokevirtual #95                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        485: iload         6\n-       487: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       490: ldc           #35                 // String  is too small to hold hashSize\n-       492: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       487: invokevirtual #99                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       490: ldc           #119                // String  is too small to hold hashSize\n+       492: invokevirtual #95                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        495: aload_0\n-       496: getfield      #15                 // Field hashSize:I\n-       499: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       502: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       505: invokespecial #31                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       496: getfield      #60                 // Field hashSize:I\n+       499: invokevirtual #99                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       502: invokevirtual #104                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       505: invokespecial #108                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n        508: athrow\n        509: aload_0\n        510: aload_0\n-       511: getfield      #15                 // Field hashSize:I\n+       511: getfield      #60                 // Field hashSize:I\n        514: newarray       byte\n-       516: putfield      #36                 // Field recipientKeyHash:[B\n+       516: putfield      #121                // Field recipientKeyHash:[B\n        519: aload_0\n        520: iload         6\n        522: aload_0\n-       523: getfield      #15                 // Field hashSize:I\n+       523: getfield      #60                 // Field hashSize:I\n        526: isub\n        527: newarray       byte\n-       529: putfield      #37                 // Field keyBlob:[B\n+       529: putfield      #124                // Field keyBlob:[B\n        532: aload_0\n-       533: ldc           #38                 // String resize\n+       533: ldc           #127                // String resize\n        535: iload         6\n        537: iload         4\n        539: bipush        24\n        541: iadd\n        542: iload         5\n        544: iadd\n        545: iload_3\n-       546: invokespecial #17                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+       546: invokespecial #65                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n        549: aload_1\n        550: iload_2\n        551: iload         4\n        553: iadd\n        554: bipush        24\n        556: iadd\n        557: iload         5\n        559: iadd\n        560: aload_0\n-       561: getfield      #36                 // Field recipientKeyHash:[B\n+       561: getfield      #121                // Field recipientKeyHash:[B\n        564: iconst_0\n        565: aload_0\n-       566: getfield      #15                 // Field hashSize:I\n-       569: invokestatic  #39                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       566: getfield      #60                 // Field hashSize:I\n+       569: invokestatic  #129                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        572: aload_1\n        573: iload_2\n        574: iload         4\n        576: iadd\n        577: bipush        24\n        579: iadd\n        580: iload         5\n        582: iadd\n        583: aload_0\n-       584: getfield      #15                 // Field hashSize:I\n+       584: getfield      #60                 // Field hashSize:I\n        587: iadd\n        588: aload_0\n-       589: getfield      #37                 // Field keyBlob:[B\n+       589: getfield      #124                // Field keyBlob:[B\n        592: iconst_0\n        593: iload         6\n        595: aload_0\n-       596: getfield      #15                 // Field hashSize:I\n+       596: getfield      #60                 // Field hashSize:I\n        599: isub\n-       600: invokestatic  #39                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       600: invokestatic  #129                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        603: aload_0\n        604: iload         4\n        606: bipush        26\n        608: iadd\n        609: iload         5\n        611: iadd\n        612: iload         6\n        614: iadd\n        615: iconst_2\n        616: iadd\n        617: iload_3\n-       618: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+       618: invokevirtual #26                 // Method assertMinimalLength:(II)V\n        621: aload_1\n        622: iload_2\n        623: iload         4\n        625: iadd\n        626: bipush        26\n        628: iadd\n        629: iload         5\n        631: iadd\n        632: iload         6\n        634: iadd\n-       635: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       635: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        638: istore        7\n        640: iload         7\n        642: iconst_4\n        643: if_icmpge     679\n-       646: new           #23                 // class java/util/zip/ZipException\n+       646: new           #86                 // class java/util/zip/ZipException\n        649: dup\n-       650: new           #24                 // class java/lang/StringBuilder\n+       650: new           #88                 // class java/lang/StringBuilder\n        653: dup\n-       654: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       657: ldc           #26                 // String Invalid X0017_StrongEncryptionHeader: vSize\n-       659: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       654: invokespecial #90                 // Method java/lang/StringBuilder.\"<init>\":()V\n+       657: ldc           #93                 // String Invalid X0017_StrongEncryptionHeader: vSize\n+       659: invokevirtual #95                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        662: iload         7\n-       664: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       667: ldc           #29                 // String  is too small to hold CRC\n-       669: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       672: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       675: invokespecial #31                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       664: invokevirtual #99                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       667: ldc           #102                // String  is too small to hold CRC\n+       669: invokevirtual #95                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       672: invokevirtual #104                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       675: invokespecial #108                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n        678: athrow\n        679: aload_0\n-       680: ldc           #22                 // String vSize\n+       680: ldc           #84                 // String vSize\n        682: iload         7\n        684: iload         4\n        686: bipush        22\n        688: iadd\n        689: iload         5\n        691: iadd\n        692: iload         6\n        694: iadd\n        695: iload_3\n-       696: invokespecial #17                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+       696: invokespecial #65                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n        699: aload_0\n        700: iload         7\n        702: iconst_4\n        703: isub\n        704: newarray       byte\n-       706: putfield      #32                 // Field vData:[B\n+       706: putfield      #111                // Field vData:[B\n        709: aload_0\n        710: iconst_4\n        711: newarray       byte\n-       713: putfield      #33                 // Field vCRC32:[B\n+       713: putfield      #114                // Field vCRC32:[B\n        716: aload_1\n        717: iload_2\n        718: iload         4\n        720: iadd\n        721: bipush        22\n        723: iadd\n        724: iload         5\n        726: iadd\n        727: iload         6\n        729: iadd\n        730: aload_0\n-       731: getfield      #32                 // Field vData:[B\n+       731: getfield      #111                // Field vData:[B\n        734: iconst_0\n        735: iload         7\n        737: iconst_4\n        738: isub\n-       739: invokestatic  #39                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       739: invokestatic  #129                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        742: aload_1\n        743: iload_2\n        744: iload         4\n        746: iadd\n        747: bipush        22\n        749: iadd\n        750: iload         5\n@@ -814,18 +814,18 @@\n        753: iload         6\n        755: iadd\n        756: iload         7\n        758: iadd\n        759: iconst_4\n        760: isub\n        761: aload_0\n-       762: getfield      #33                 // Field vCRC32:[B\n+       762: getfield      #114                // Field vCRC32:[B\n        765: iconst_0\n        766: iconst_4\n-       767: invokestatic  #39                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       767: invokestatic  #129                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        770: return\n       LineNumberTable:\n         line 335: 0\n         line 336: 6\n         line 337: 13\n         line 338: 23\n         line 340: 32\n@@ -894,20 +894,20 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: invokespecial #40                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromLocalFileData:([BII)V\n+         4: invokespecial #135                // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromLocalFileData:([BII)V\n          7: aload_0\n          8: aload_1\n          9: iload_2\n         10: iload_3\n-        11: invokevirtual #41                 // Method parseFileFormat:([BII)V\n+        11: invokevirtual #139                // Method parseFileFormat:([BII)V\n         14: return\n       LineNumberTable:\n         line 407: 0\n         line 408: 7\n         line 409: 14\n     Exceptions:\n       throws java.util.zip.ZipException\n@@ -917,20 +917,20 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: invokespecial #42                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n+         4: invokespecial #142                // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n          7: aload_0\n          8: aload_1\n          9: iload_2\n         10: iload_3\n-        11: invokevirtual #43                 // Method parseCentralDirectoryFormat:([BII)V\n+        11: invokevirtual #145                // Method parseCentralDirectoryFormat:([BII)V\n         14: return\n       LineNumberTable:\n         line 414: 0\n         line 415: 7\n         line 416: 14\n     Exceptions:\n       throws java.util.zip.ZipException\n@@ -941,45 +941,45 @@\n     Code:\n       stack=4, locals=5, args_size=5\n          0: iload_3\n          1: iload_2\n          2: iadd\n          3: iload         4\n          5: if_icmple     63\n-         8: new           #23                 // class java/util/zip/ZipException\n+         8: new           #86                 // class java/util/zip/ZipException\n         11: dup\n-        12: new           #24                 // class java/lang/StringBuilder\n+        12: new           #88                 // class java/lang/StringBuilder\n         15: dup\n-        16: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        19: ldc           #44                 // String Invalid X0017_StrongEncryptionHeader:\n-        21: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        16: invokespecial #90                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        19: ldc           #148                // String Invalid X0017_StrongEncryptionHeader:\n+        21: invokevirtual #95                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         24: aload_1\n-        25: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        28: ldc           #45                 // String\n-        30: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        25: invokevirtual #95                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        28: ldc           #150                // String\n+        30: invokevirtual #95                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         33: iload_2\n-        34: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        37: ldc           #46                 // String  doesn\\'t fit into\n-        39: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        34: invokevirtual #99                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        37: ldc           #152                // String  doesn\\'t fit into\n+        39: invokevirtual #95                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         42: iload         4\n-        44: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        47: ldc           #47                 // String  bytes of data at position\n-        49: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        44: invokevirtual #99                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        47: ldc           #154                // String  bytes of data at position\n+        49: invokevirtual #95                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         52: iload_3\n-        53: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        56: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        59: invokespecial #31                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        53: invokevirtual #99                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        56: invokevirtual #104                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        59: invokespecial #108                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n         62: athrow\n         63: return\n       LineNumberTable:\n         line 420: 0\n         line 421: 8\n         line 425: 63\n       StackMapTable: number_of_entries = 1\n         frame_type = 63 /* same */\n     Exceptions:\n       throws java.util.zip.ZipException\n }\n SourceFile: \"X0017_StrongEncryptionHeader.java\"\n InnerClasses:\n-  public static final #54= #53 of #49;    // EncryptionAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-  public static final #63= #62 of #49;    // HashAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  public static final #169= #56 of #8;    // HashAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  public static final #170= #39 of #8;    // EncryptionAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n"}]}
