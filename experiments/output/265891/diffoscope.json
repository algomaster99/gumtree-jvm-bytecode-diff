{"diffoscope-json-version": 1, "source1": "first/Signature.class", "source2": "second/Signature.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,82 +21,83 @@\n     \n     public static boolean isFormalParameterList(final String s) {\n         return s.startsWith(\"<\") && s.indexOf(58) > 0;\n     }\n     \n     private static void matchGJIdent(final Signature.MyByteArrayInputStream in, final StringBuilder buf) {\n         matchIdent(in, buf);\n-        int ch = in.read();\n-        if (ch == 60 || ch == 40) {\n-            buf.append((char)ch);\n+        final int read = in.read();\n+        if (read == 60 || read == 40) {\n+            buf.append((char)read);\n             matchGJIdent(in, buf);\n-            while ((ch = in.read()) != 62 && ch != 41) {\n-                if (ch == -1) {\n+            int read2;\n+            while ((read2 = in.read()) != 62 && read2 != 41) {\n+                if (read2 == -1) {\n                     throw new IllegalArgumentException(\"Illegal signature: \" + in.getData() + \" reaching EOF\");\n                 }\n                 buf.append(\", \");\n                 in.unread();\n                 matchGJIdent(in, buf);\n             }\n-            buf.append((char)ch);\n+            buf.append((char)read2);\n         }\n         else {\n             in.unread();\n         }\n-        ch = in.read();\n-        if (identStart(ch)) {\n+        final int read3 = in.read();\n+        if (identStart(read3)) {\n             in.unread();\n             matchGJIdent(in, buf);\n         }\n-        else if (ch == 41) {\n+        else if (read3 == 41) {\n             in.unread();\n         }\n-        else if (ch != 59) {\n-            throw new IllegalArgumentException(\"Illegal signature: \" + in.getData() + \" read \" + (char)ch);\n+        else if (read3 != 59) {\n+            throw new IllegalArgumentException(\"Illegal signature: \" + in.getData() + \" read \" + (char)read3);\n         }\n     }\n     \n     private static void matchIdent(final Signature.MyByteArrayInputStream in, final StringBuilder buf) {\n         int ch;\n         if ((ch = in.read()) == -1) {\n             throw new IllegalArgumentException(\"Illegal signature: \" + in.getData() + \" no ident, reaching EOF\");\n         }\n         if (!identStart(ch)) {\n-            final StringBuilder buf2 = new StringBuilder();\n-            int count = 1;\n+            final StringBuilder s = new StringBuilder();\n+            int n = 1;\n             while (Character.isJavaIdentifierPart((char)ch)) {\n-                buf2.append((char)ch);\n-                ++count;\n+                s.append((char)ch);\n+                ++n;\n                 ch = in.read();\n             }\n             if (ch == 58) {\n-                final int skipExpected = \"Ljava/lang/Object\".length();\n-                final long skipActual = in.skip((long)skipExpected);\n-                if (skipActual != skipExpected) {\n-                    throw new IllegalStateException(String.format(\"Unexpected skip: expected=%,d, actual=%,d\", Integer.valueOf(skipExpected), Long.valueOf(skipActual)));\n+                final int length = \"Ljava/lang/Object\".length();\n+                final long skip = in.skip((long)length);\n+                if (skip != length) {\n+                    throw new IllegalStateException(String.format(\"Unexpected skip: expected=%,d, actual=%,d\", Integer.valueOf(length), Long.valueOf(skip)));\n                 }\n-                buf.append((CharSequence)buf2);\n-                ch = in.read();\n+                buf.append((CharSequence)s);\n+                in.read();\n                 in.unread();\n             }\n             else {\n-                for (int i = 0; i < count; ++i) {\n+                for (int i = 0; i < n; ++i) {\n                     in.unread();\n                 }\n             }\n             return;\n         }\n-        final StringBuilder buf2 = new StringBuilder();\n-        ch = in.read();\n+        final StringBuilder sb = new StringBuilder();\n+        int n2 = in.read();\n         do {\n-            buf2.append((char)ch);\n-            ch = in.read();\n-        } while (ch != -1 && (Character.isJavaIdentifierPart((char)ch) || ch == 47));\n-        buf.append(Utility.pathToPackage(buf2.toString()));\n-        if (ch != -1) {\n+            sb.append((char)n2);\n+            n2 = in.read();\n+        } while (n2 != -1 && (Character.isJavaIdentifierPart((char)n2) || n2 == 47));\n+        buf.append(Utility.pathToPackage(sb.toString()));\n+        if (n2 != -1) {\n             in.unread();\n         }\n     }\n     \n     public static String translate(final String s) {\n         final StringBuilder buf = new StringBuilder();\n         matchGJIdent(new Signature.MyByteArrayInputStream(s), buf);\n"}]}
