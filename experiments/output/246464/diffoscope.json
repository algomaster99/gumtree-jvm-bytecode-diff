{"diffoscope-json-version": 1, "source1": "first/ParenPadCheck.class", "source2": "second/ParenPadCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -22,134 +22,132 @@\n         return makeAcceptableTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        switch (ast.getType()) {\n+    public void visitToken(final DetailAST detailAST) {\n+        switch (detailAST.getType()) {\n             case 27: {\n-                this.processLeft(ast);\n-                this.processRight(ast.findFirstToken(77));\n+                this.processLeft(detailAST);\n+                this.processRight(detailAST.findFirstToken(77));\n                 break;\n             }\n             case 28:\n             case 59:\n             case 109: {\n-                this.processExpression(ast);\n+                this.processExpression(detailAST);\n                 break;\n             }\n             case 91: {\n-                this.visitLiteralFor(ast);\n+                this.visitLiteralFor(detailAST);\n                 break;\n             }\n             case 67:\n             case 136:\n             case 155:\n             case 159:\n             case 181: {\n-                this.visitTokenWithOptionalParentheses(ast);\n+                this.visitTokenWithOptionalParentheses(detailAST);\n                 break;\n             }\n             case 176: {\n-                this.visitResourceSpecification(ast);\n+                this.visitResourceSpecification(detailAST);\n                 break;\n             }\n             default: {\n-                this.processLeft(ast.findFirstToken(76));\n-                this.processRight(ast.findFirstToken(77));\n+                this.processLeft(detailAST.findFirstToken(76));\n+                this.processRight(detailAST.findFirstToken(77));\n                 break;\n             }\n         }\n     }\n     \n-    private void visitTokenWithOptionalParentheses(final DetailAST ast) {\n-        final DetailAST parenAst = ast.findFirstToken(76);\n-        if (parenAst != null) {\n-            this.processLeft(parenAst);\n-            this.processRight(ast.findFirstToken(77));\n+    private void visitTokenWithOptionalParentheses(final DetailAST detailAST) {\n+        final DetailAST firstToken = detailAST.findFirstToken(76);\n+        if (firstToken != null) {\n+            this.processLeft(firstToken);\n+            this.processRight(detailAST.findFirstToken(77));\n         }\n     }\n     \n-    private void visitResourceSpecification(final DetailAST ast) {\n-        this.processLeft(ast.findFirstToken(76));\n-        final DetailAST rparen = ast.findFirstToken(77);\n-        if (!hasPrecedingSemiColon(rparen)) {\n-            this.processRight(rparen);\n+    private void visitResourceSpecification(final DetailAST detailAST) {\n+        this.processLeft(detailAST.findFirstToken(76));\n+        final DetailAST firstToken = detailAST.findFirstToken(77);\n+        if (!hasPrecedingSemiColon(firstToken)) {\n+            this.processRight(firstToken);\n         }\n     }\n     \n-    private static boolean hasPrecedingSemiColon(final DetailAST ast) {\n-        return ast.getPreviousSibling().getType() == 45;\n+    private static boolean hasPrecedingSemiColon(final DetailAST detailAST) {\n+        return detailAST.getPreviousSibling().getType() == 45;\n     }\n     \n-    private void visitLiteralFor(final DetailAST ast) {\n-        final DetailAST lparen = ast.findFirstToken(76);\n-        if (!isPrecedingEmptyForInit(lparen)) {\n-            this.processLeft(lparen);\n+    private void visitLiteralFor(final DetailAST detailAST) {\n+        final DetailAST firstToken = detailAST.findFirstToken(76);\n+        if (!isPrecedingEmptyForInit(firstToken)) {\n+            this.processLeft(firstToken);\n         }\n-        final DetailAST rparen = ast.findFirstToken(77);\n-        if (!isFollowsEmptyForIterator(rparen)) {\n-            this.processRight(rparen);\n+        final DetailAST firstToken2 = detailAST.findFirstToken(77);\n+        if (!isFollowsEmptyForIterator(firstToken2)) {\n+            this.processRight(firstToken2);\n         }\n     }\n     \n-    private void processExpression(final DetailAST ast) {\n-        DetailAST currentNode = ast.getFirstChild();\n-        while (currentNode != null) {\n-            if (currentNode.getType() == 76) {\n-                this.processLeft(currentNode);\n+    private void processExpression(final DetailAST detailAST) {\n+        DetailAST detailAST2 = detailAST.getFirstChild();\n+        while (detailAST2 != null) {\n+            if (detailAST2.getType() == 76) {\n+                this.processLeft(detailAST2);\n             }\n-            else if (currentNode.getType() == 77 && !isInTypecast(currentNode)) {\n-                this.processRight(currentNode);\n+            else if (detailAST2.getType() == 77 && !isInTypecast(detailAST2)) {\n+                this.processRight(detailAST2);\n             }\n-            else if (currentNode.hasChildren() && !this.isAcceptableToken(currentNode)) {\n-                currentNode = currentNode.getFirstChild();\n+            else if (detailAST2.hasChildren() && !this.isAcceptableToken(detailAST2)) {\n+                detailAST2 = detailAST2.getFirstChild();\n                 continue;\n             }\n-            while (currentNode.getNextSibling() == null && currentNode.getParent() != ast) {\n-                currentNode = currentNode.getParent();\n+            while (detailAST2.getNextSibling() == null && detailAST2.getParent() != detailAST) {\n+                detailAST2 = detailAST2.getParent();\n             }\n-            currentNode = currentNode.getNextSibling();\n+            detailAST2 = detailAST2.getNextSibling();\n         }\n     }\n     \n-    private boolean isAcceptableToken(final DetailAST ast) {\n-        return this.acceptableTokens.get(ast.getType());\n+    private boolean isAcceptableToken(final DetailAST detailAST) {\n+        return this.acceptableTokens.get(detailAST.getType());\n     }\n     \n     private static int[] makeAcceptableTokens() {\n         return new int[] { 159, 161, 43, 8, 59, 155, 28, 96, 85, 91, 83, 136, 89, 67, 84, 27, 9, 109, 176, 42, 181, 199 };\n     }\n     \n-    private static boolean isInTypecast(final DetailAST ast) {\n-        boolean result = false;\n-        if (ast.getParent().getType() == 23) {\n-            final DetailAST firstRparen = ast.getParent().findFirstToken(77);\n-            if (TokenUtil.areOnSameLine(firstRparen, ast) && firstRparen.getColumnNo() == ast.getColumnNo()) {\n-                result = true;\n+    private static boolean isInTypecast(final DetailAST detailAST) {\n+        boolean b = false;\n+        if (detailAST.getParent().getType() == 23) {\n+            final DetailAST firstToken = detailAST.getParent().findFirstToken(77);\n+            if (TokenUtil.areOnSameLine(firstToken, detailAST) && firstToken.getColumnNo() == detailAST.getColumnNo()) {\n+                b = true;\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private static boolean isFollowsEmptyForIterator(final DetailAST ast) {\n-        boolean result = false;\n-        final DetailAST parent = ast.getParent();\n+    private static boolean isFollowsEmptyForIterator(final DetailAST detailAST) {\n+        boolean b = false;\n+        final DetailAST parent = detailAST.getParent();\n         if (parent.findFirstToken(156) == null) {\n-            final DetailAST forIterator = parent.findFirstToken(37);\n-            result = !forIterator.hasChildren();\n+            b = !parent.findFirstToken(37).hasChildren();\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private static boolean isPrecedingEmptyForInit(final DetailAST ast) {\n-        boolean result = false;\n-        final DetailAST parent = ast.getParent();\n+    private static boolean isPrecedingEmptyForInit(final DetailAST detailAST) {\n+        boolean b = false;\n+        final DetailAST parent = detailAST.getParent();\n         if (parent.findFirstToken(156) == null) {\n-            final DetailAST forIterator = parent.findFirstToken(35);\n-            result = !forIterator.hasChildren();\n+            b = !parent.findFirstToken(35).hasChildren();\n         }\n-        return result;\n+        return b;\n     }\n }\n"}]}
