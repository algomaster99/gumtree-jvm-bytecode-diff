{"diffoscope-json-version": 1, "source1": "first/ExceptionUtils.class", "source2": "second/ExceptionUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,14 +18,18 @@\n import org.apache.commons.lang3.ArrayUtils;\n \n public class ExceptionUtils\n {\n     static final String WRAPPED_MARKER = \" [wrapped] \";\n     private static final String[] CAUSE_METHOD_NAMES;\n     \n+    static {\n+        CAUSE_METHOD_NAMES = new String[] { \"getCause\", \"getNextException\", \"getTargetException\", \"getException\", \"getSourceException\", \"getRootCause\", \"getCausedByException\", \"getNested\", \"getLinkedException\", \"getNestedException\", \"getLinkedCause\", \"getThrowable\" };\n+    }\n+    \n     @Deprecated\n     public static String[] getDefaultCauseMethodNames() {\n         return (String[])ArrayUtils.clone((Object[])ExceptionUtils.CAUSE_METHOD_NAMES);\n     }\n     \n     @Deprecated\n     public static Throwable getCause(final Throwable throwable) {\n@@ -40,15 +44,17 @@\n         if (methodNames == null) {\n             final Throwable cause = throwable.getCause();\n             if (cause != null) {\n                 return cause;\n             }\n             methodNames = ExceptionUtils.CAUSE_METHOD_NAMES;\n         }\n-        for (final String methodName : methodNames) {\n+        String[] array;\n+        for (int length = (array = methodNames).length, i = 0; i < length; ++i) {\n+            final String methodName = array[i];\n             if (methodName != null) {\n                 final Throwable legacyCause = getCauseUsingMethodName(throwable, methodName);\n                 if (legacyCause != null) {\n                     return legacyCause;\n                 }\n             }\n         }\n@@ -141,30 +147,32 @@\n     }\n     \n     public static void printRootCauseStackTrace(final Throwable throwable, final PrintStream stream) {\n         if (throwable == null) {\n             return;\n         }\n         Validate.isTrue(stream != null, \"The PrintStream must not be null\", new Object[0]);\n-        final String[] rootCauseStackTrace;\n-        final String[] trace = rootCauseStackTrace = getRootCauseStackTrace(throwable);\n-        for (final String element : rootCauseStackTrace) {\n+        final String[] trace = getRootCauseStackTrace(throwable);\n+        String[] array;\n+        for (int length = (array = trace).length, i = 0; i < length; ++i) {\n+            final String element = array[i];\n             stream.println(element);\n         }\n         stream.flush();\n     }\n     \n     public static void printRootCauseStackTrace(final Throwable throwable, final PrintWriter writer) {\n         if (throwable == null) {\n             return;\n         }\n         Validate.isTrue(writer != null, \"The PrintWriter must not be null\", new Object[0]);\n-        final String[] rootCauseStackTrace;\n-        final String[] trace = rootCauseStackTrace = getRootCauseStackTrace(throwable);\n-        for (final String element : rootCauseStackTrace) {\n+        final String[] trace = getRootCauseStackTrace(throwable);\n+        String[] array;\n+        for (int length = (array = trace).length, i = 0; i < length; ++i) {\n+            final String element = array[i];\n             writer.println(element);\n         }\n         writer.flush();\n     }\n     \n     public static String[] getRootCauseStackTrace(final Throwable throwable) {\n         if (throwable == null) {\n@@ -254,15 +262,15 @@\n     \n     public static String getMessage(final Throwable th) {\n         if (th == null) {\n             return \"\";\n         }\n         final String clsName = ClassUtils.getShortClassName((Object)th, (String)null);\n         final String msg = th.getMessage();\n-        return clsName + \": \" + StringUtils.defaultString(msg);\n+        return String.valueOf(clsName) + \": \" + StringUtils.defaultString(msg);\n     }\n     \n     public static String getRootCauseMessage(final Throwable th) {\n         Throwable root = getRootCause(th);\n         root = ((root == null) ? th : root);\n         return getMessage(root);\n     }\n@@ -287,12 +295,8 @@\n     \n     public static boolean hasCause(Throwable chain, final Class<? extends Throwable> type) {\n         if (chain instanceof UndeclaredThrowableException) {\n             chain = chain.getCause();\n         }\n         return type.isInstance(chain);\n     }\n-    \n-    static {\n-        CAUSE_METHOD_NAMES = new String[] { \"getCause\", \"getNextException\", \"getTargetException\", \"getException\", \"getSourceException\", \"getRootCause\", \"getCausedByException\", \"getNested\", \"getLinkedException\", \"getNestedException\", \"getLinkedCause\", \"getThrowable\" };\n-    }\n }\n"}]}
