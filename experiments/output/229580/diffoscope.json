{"diffoscope-json-version": 1, "source1": "first/SevenZMethodConfiguration.class", "source2": "second/SevenZMethodConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,16 +4,16 @@\n import java.util.Objects;\n \n public class SevenZMethodConfiguration\n {\n     private final SevenZMethod method;\n     private final Object options;\n     \n-    public SevenZMethodConfiguration(final SevenZMethod method) {\n-        this(method, null);\n+    public SevenZMethodConfiguration(final SevenZMethod sevenZMethod) {\n+        this(sevenZMethod, null);\n     }\n     \n     public SevenZMethodConfiguration(final SevenZMethod method, final Object options) {\n         this.method = method;\n         this.options = options;\n         if (options != null && !Coders.findByMethod(method).canAcceptOptions(options)) {\n             throw new IllegalArgumentException(\"The \" + method + \" method doesn't support options of type \" + options.getClass());\n@@ -30,18 +30,18 @@\n     \n     @Override\n     public int hashCode() {\n         return (this.method == null) ? 0 : this.method.hashCode();\n     }\n     \n     @Override\n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (obj == null || this.getClass() != obj.getClass()) {\n+        if (o == null || this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final SevenZMethodConfiguration other = (SevenZMethodConfiguration)obj;\n-        return Objects.equals(this.method, other.method) && Objects.equals(this.options, other.options);\n+        final SevenZMethodConfiguration sevenZMethodConfiguration = (SevenZMethodConfiguration)o;\n+        return Objects.equals(this.method, sevenZMethodConfiguration.method) && Objects.equals(this.options, sevenZMethodConfiguration.options);\n     }\n }\n"}]}
