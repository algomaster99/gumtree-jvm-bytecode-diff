{"diffoscope-json-version": 1, "source1": "first/Archiver.class", "source2": "second/Archiver.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -24,20 +24,24 @@\n import java.nio.file.FileVisitOption;\n import java.util.EnumSet;\n \n public class Archiver\n {\n     public static final EnumSet<FileVisitOption> EMPTY_FileVisitOption;\n     \n+    static {\n+        EMPTY_FileVisitOption = EnumSet.noneOf(FileVisitOption.class);\n+    }\n+    \n     public void create(final ArchiveOutputStream target, final File directory) throws IOException {\n         this.create(target, directory.toPath(), Archiver.EMPTY_FileVisitOption, new LinkOption[0]);\n     }\n     \n     public void create(final ArchiveOutputStream target, final Path directory, final EnumSet<FileVisitOption> fileVisitOptions, final LinkOption... linkOptions) throws IOException {\n-        Files.walkFileTree(directory, fileVisitOptions, Integer.MAX_VALUE, (FileVisitor<? super Path>)new Archiver.ArchiverFileVisitor(target, directory, linkOptions, (Archiver.Archiver$1)null));\n+        Files.walkFileTree(directory, fileVisitOptions, Integer.MAX_VALUE, (FileVisitor<? super Path>)new Archiver.ArchiverFileVisitor(target, directory, linkOptions, (Archiver.ArchiverFileVisitor)null));\n         target.finish();\n     }\n     \n     public void create(final ArchiveOutputStream target, final Path directory) throws IOException {\n         this.create(target, directory, Archiver.EMPTY_FileVisitOption, new LinkOption[0]);\n     }\n     \n@@ -56,70 +60,190 @@\n     \n     @Deprecated\n     public void create(final String format, final OutputStream target, final File directory) throws IOException, ArchiveException {\n         this.create(format, target, directory, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n     public void create(final String format, final OutputStream target, final File directory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n-            this.create((ArchiveOutputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(format, target)), directory);\n+        Throwable t = null;\n+        try {\n+            final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n+            try {\n+                this.create((ArchiveOutputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(format, target)), directory);\n+            }\n+            finally {\n+                if (c != null) {\n+                    c.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public void create(final String format, final Path target, final Path directory) throws IOException, ArchiveException {\n         if (this.prefersSeekableByteChannel(format)) {\n-            try (final SeekableByteChannel channel = FileChannel.open(target, StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)) {\n-                this.create(format, channel, directory);\n-                return;\n+            Throwable t = null;\n+            try {\n+                final SeekableByteChannel channel = FileChannel.open(target, StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n+                try {\n+                    this.create(format, channel, directory);\n+                    return;\n+                }\n+                finally {\n+                    if (channel != null) {\n+                        channel.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n             }\n         }\n-        try (final ArchiveOutputStream outputStream = ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(format, Files.newOutputStream(target, new OpenOption[0]))) {\n-            this.create(outputStream, directory, Archiver.EMPTY_FileVisitOption, new LinkOption[0]);\n+        Throwable t2 = null;\n+        try {\n+            final ArchiveOutputStream outputStream = ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(format, Files.newOutputStream(target, new OpenOption[0]));\n+            try {\n+                this.create(outputStream, directory, Archiver.EMPTY_FileVisitOption, new LinkOption[0]);\n+            }\n+            finally {\n+                if (outputStream != null) {\n+                    outputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t2 == null) {\n+                final Throwable exception2;\n+                t2 = exception2;\n+            }\n+            else {\n+                final Throwable exception2;\n+                if (t2 != exception2) {\n+                    t2.addSuppressed(exception2);\n+                }\n+            }\n         }\n     }\n     \n     @Deprecated\n     public void create(final String format, final SeekableByteChannel target, final File directory) throws IOException, ArchiveException {\n         this.create(format, target, directory, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n     public void create(final String format, final SeekableByteChannel target, final File directory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n-            if (!this.prefersSeekableByteChannel(format)) {\n-                this.create(format, (OutputStream)c.track((Closeable)Channels.newOutputStream(target)), directory);\n+        Throwable t = null;\n+        try {\n+            final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n+            try {\n+                if (!this.prefersSeekableByteChannel(format)) {\n+                    this.create(format, (OutputStream)c.track((Closeable)Channels.newOutputStream(target)), directory);\n+                }\n+                else if (\"zip\".equalsIgnoreCase(format)) {\n+                    this.create((ArchiveOutputStream)c.track((Closeable)new ZipArchiveOutputStream(target)), directory);\n+                }\n+                else {\n+                    if (!\"7z\".equalsIgnoreCase(format)) {\n+                        throw new ArchiveException(\"Don't know how to handle format \" + format);\n+                    }\n+                    this.create((SevenZOutputFile)c.track((Closeable)new SevenZOutputFile(target)), directory);\n+                }\n             }\n-            else if (\"zip\".equalsIgnoreCase(format)) {\n-                this.create((ArchiveOutputStream)c.track((Closeable)new ZipArchiveOutputStream(target)), directory);\n+            finally {\n+                if (c != null) {\n+                    c.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n             }\n             else {\n-                if (!\"7z\".equalsIgnoreCase(format)) {\n-                    throw new ArchiveException(\"Don't know how to handle format \" + format);\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n                 }\n-                this.create((SevenZOutputFile)c.track((Closeable)new SevenZOutputFile(target)), directory);\n             }\n         }\n     }\n     \n     public void create(final String format, final SeekableByteChannel target, final Path directory) throws IOException {\n         if (\"7z\".equalsIgnoreCase(format)) {\n-            try (final SevenZOutputFile sevenZFile = new SevenZOutputFile(target)) {\n-                this.create(sevenZFile, directory);\n+            Throwable t = null;\n+            try {\n+                final SevenZOutputFile sevenZFile = new SevenZOutputFile(target);\n+                try {\n+                    this.create(sevenZFile, directory);\n+                }\n+                finally {\n+                    if (sevenZFile != null) {\n+                        sevenZFile.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n             }\n         }\n-        else {\n-            if (!\"zip\".equalsIgnoreCase(format)) {\n-                throw new IllegalStateException(format);\n+        if (\"zip\".equalsIgnoreCase(format)) {\n+            Throwable t2 = null;\n+            try {\n+                final ArchiveOutputStream archiveOutputStream = (ArchiveOutputStream)new ZipArchiveOutputStream(target);\n+                try {\n+                    this.create(archiveOutputStream, directory, Archiver.EMPTY_FileVisitOption, new LinkOption[0]);\n+                }\n+                finally {\n+                    if (archiveOutputStream != null) {\n+                        archiveOutputStream.close();\n+                    }\n+                }\n             }\n-            try (final ArchiveOutputStream archiveOutputStream = (ArchiveOutputStream)new ZipArchiveOutputStream(target)) {\n-                this.create(archiveOutputStream, directory, Archiver.EMPTY_FileVisitOption, new LinkOption[0]);\n+            finally {\n+                if (t2 == null) {\n+                    final Throwable exception2;\n+                    t2 = exception2;\n+                }\n+                else {\n+                    final Throwable exception2;\n+                    if (t2 != exception2) {\n+                        t2.addSuppressed(exception2);\n+                    }\n+                }\n             }\n         }\n+        throw new IllegalStateException(format);\n     }\n     \n     private boolean prefersSeekableByteChannel(final String format) {\n         return \"zip\".equalsIgnoreCase(format) || \"7z\".equalsIgnoreCase(format);\n     }\n-    \n-    static {\n-        EMPTY_FileVisitOption = EnumSet.noneOf(FileVisitOption.class);\n-    }\n }\n"}]}
