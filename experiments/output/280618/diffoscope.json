{"diffoscope-json-version": 1, "source1": "first/NodeTreeWalker.class", "source2": "second/NodeTreeWalker.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,59 +1,58 @@\n \n package org.apache.commons.configuration2.tree;\n \n-import java.util.List;\n import java.util.Collection;\n import java.util.LinkedList;\n \n public class NodeTreeWalker\n {\n     public static final NodeTreeWalker INSTANCE;\n     \n-    public <T> void walkDFS(final T root, final ConfigurationNodeVisitor<T> visitor, final NodeHandler<T> handler) {\n-        if (checkParameters(root, visitor, handler)) {\n-            dfs(root, (org.apache.commons.configuration2.tree.ConfigurationNodeVisitor<Object>)visitor, (org.apache.commons.configuration2.tree.NodeHandler<Object>)handler);\n+    public <T> void walkDFS(final T t, final ConfigurationNodeVisitor<T> configurationNodeVisitor, final NodeHandler<T> nodeHandler) {\n+        if (checkParameters(t, configurationNodeVisitor, nodeHandler)) {\n+            dfs(t, (org.apache.commons.configuration2.tree.ConfigurationNodeVisitor<Object>)configurationNodeVisitor, (org.apache.commons.configuration2.tree.NodeHandler<Object>)nodeHandler);\n         }\n     }\n     \n-    public <T> void walkBFS(final T root, final ConfigurationNodeVisitor<T> visitor, final NodeHandler<T> handler) {\n-        if (checkParameters(root, visitor, handler)) {\n-            bfs(root, (org.apache.commons.configuration2.tree.ConfigurationNodeVisitor<Object>)visitor, (org.apache.commons.configuration2.tree.NodeHandler<Object>)handler);\n+    public <T> void walkBFS(final T t, final ConfigurationNodeVisitor<T> configurationNodeVisitor, final NodeHandler<T> nodeHandler) {\n+        if (checkParameters(t, configurationNodeVisitor, nodeHandler)) {\n+            bfs(t, (org.apache.commons.configuration2.tree.ConfigurationNodeVisitor<Object>)configurationNodeVisitor, (org.apache.commons.configuration2.tree.NodeHandler<Object>)nodeHandler);\n         }\n     }\n     \n-    private static <T> void dfs(final T node, final ConfigurationNodeVisitor<T> visitor, final NodeHandler<T> handler) {\n-        if (!visitor.terminate()) {\n-            visitor.visitBeforeChildren((Object)node, (NodeHandler)handler);\n-            handler.getChildren((Object)node).forEach(c -> dfs(c, (org.apache.commons.configuration2.tree.ConfigurationNodeVisitor<Object>)visitor, (org.apache.commons.configuration2.tree.NodeHandler<Object>)handler));\n-            if (!visitor.terminate()) {\n-                visitor.visitAfterChildren((Object)node, (NodeHandler)handler);\n+    private static <T> void dfs(final T t, final ConfigurationNodeVisitor<T> configurationNodeVisitor, final NodeHandler<T> nodeHandler) {\n+        if (!configurationNodeVisitor.terminate()) {\n+            configurationNodeVisitor.visitBeforeChildren((Object)t, (NodeHandler)nodeHandler);\n+            nodeHandler.getChildren((Object)t).forEach(o -> dfs(o, (org.apache.commons.configuration2.tree.ConfigurationNodeVisitor<Object>)configurationNodeVisitor2, (org.apache.commons.configuration2.tree.NodeHandler<Object>)nodeHandler2));\n+            if (!configurationNodeVisitor.terminate()) {\n+                configurationNodeVisitor.visitAfterChildren((Object)t, (NodeHandler)nodeHandler);\n             }\n         }\n     }\n     \n-    private static <T> void bfs(final T root, final ConfigurationNodeVisitor<T> visitor, final NodeHandler<T> handler) {\n-        final List<T> pendingNodes = new LinkedList<T>();\n-        pendingNodes.add(root);\n-        boolean cancel = false;\n-        while (!pendingNodes.isEmpty() && !cancel) {\n-            final T node = pendingNodes.remove(0);\n-            visitor.visitBeforeChildren((Object)node, (NodeHandler)handler);\n-            cancel = visitor.terminate();\n-            pendingNodes.addAll(handler.getChildren((Object)node));\n+    private static <T> void bfs(final T t, final ConfigurationNodeVisitor<T> configurationNodeVisitor, final NodeHandler<T> nodeHandler) {\n+        final LinkedList list = new LinkedList();\n+        list.add(t);\n+        boolean terminate = false;\n+        while (!list.isEmpty() && !terminate) {\n+            final Object remove = list.remove(0);\n+            configurationNodeVisitor.visitBeforeChildren(remove, (NodeHandler)nodeHandler);\n+            terminate = configurationNodeVisitor.terminate();\n+            list.addAll(nodeHandler.getChildren(remove));\n         }\n     }\n     \n-    private static <T> boolean checkParameters(final T root, final ConfigurationNodeVisitor<T> visitor, final NodeHandler<T> handler) {\n-        if (visitor == null) {\n+    private static <T> boolean checkParameters(final T t, final ConfigurationNodeVisitor<T> configurationNodeVisitor, final NodeHandler<T> nodeHandler) {\n+        if (configurationNodeVisitor == null) {\n             throw new IllegalArgumentException(\"Visitor must not be null!\");\n         }\n-        if (handler == null) {\n+        if (nodeHandler == null) {\n             throw new IllegalArgumentException(\"NodeHandler must not be null!\");\n         }\n-        return root != null;\n+        return t != null;\n     }\n     \n     static {\n         INSTANCE = new NodeTreeWalker();\n     }\n }\n"}]}
