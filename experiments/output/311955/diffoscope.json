{"diffoscope-json-version": 1, "source1": "first/ZipFile.class", "source2": "second/ZipFile.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,967 +1,967 @@\n-  SHA-256 checksum 331edbf6786d4cc3c8aec5f32789a5e4868cd1b64c45b4c10923b29c1f1dd318\n+  SHA-256 checksum d8423fa24c55c552217b94409ffddacf024c216c83d8ef0e16839f9d8249533f\n   Compiled from \"ZipFile.java\"\n public class org.apache.commons.compress.archivers.zip.ZipFile implements java.io.Closeable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #2                          // org/apache/commons/compress/archivers/zip/ZipFile\n-  super_class: #284                       // java/lang/Object\n+  this_class: #3                          // org/apache/commons/compress/archivers/zip/ZipFile\n+  super_class: #79                        // java/lang/Object\n   interfaces: 1, fields: 43, methods: 51, attributes: 3\n Constant pool:\n-    #1 = Class              #462          // org/apache/commons/compress/archivers/zip/ZipConstants\n-    #2 = Class              #463          // org/apache/commons/compress/archivers/zip/ZipFile\n-    #3 = Fieldref           #2.#464       // org/apache/commons/compress/archivers/zip/ZipFile.archive:Ljava/nio/channels/SeekableByteChannel;\n-    #4 = Methodref          #465.#466     // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n-    #5 = Class              #467          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-    #6 = String             #468          // UTF8\n-    #7 = Methodref          #2.#469       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-    #8 = Methodref          #56.#470      // java/io/File.toPath:()Ljava/nio/file/Path;\n-    #9 = Methodref          #2.#471       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n-   #10 = Methodref          #2.#472       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n-   #11 = Fieldref           #473.#474     // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-   #12 = Methodref          #475.#476     // java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n-   #13 = Class              #477          // java/nio/file/attribute/FileAttribute\n-   #14 = Methodref          #478.#479     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-   #15 = Methodref          #56.#480      // java/io/File.getAbsolutePath:()Ljava/lang/String;\n-   #16 = Methodref          #2.#481       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n-   #17 = Methodref          #2.#482       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n-   #18 = InterfaceMethodref #483.#484     // java/nio/file/Path.toAbsolutePath:()Ljava/nio/file/Path;\n-   #19 = InterfaceMethodref #483.#485     // java/nio/file/Path.toString:()Ljava/lang/String;\n-   #20 = String             #486          // unknown archive\n-   #21 = Methodref          #2.#487       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n-   #22 = Methodref          #284.#488     // java/lang/Object.\"<init>\":()V\n-   #23 = Class              #489          // java/util/LinkedList\n-   #24 = Methodref          #23.#488      // java/util/LinkedList.\"<init>\":()V\n-   #25 = Fieldref           #2.#490       // org/apache/commons/compress/archivers/zip/ZipFile.entries:Ljava/util/List;\n-   #26 = Class              #491          // java/util/HashMap\n-   #27 = Methodref          #26.#492      // java/util/HashMap.\"<init>\":(I)V\n-   #28 = Fieldref           #2.#493       // org/apache/commons/compress/archivers/zip/ZipFile.nameMap:Ljava/util/Map;\n-   #29 = Fieldref           #2.#494       // org/apache/commons/compress/archivers/zip/ZipFile.closed:Z\n-   #30 = Fieldref           #2.#495       // org/apache/commons/compress/archivers/zip/ZipFile.dwordBuf:[B\n-   #31 = Fieldref           #2.#496       // org/apache/commons/compress/archivers/zip/ZipFile.wordBuf:[B\n-   #32 = Fieldref           #2.#497       // org/apache/commons/compress/archivers/zip/ZipFile.cfhBuf:[B\n-   #33 = Fieldref           #2.#498       // org/apache/commons/compress/archivers/zip/ZipFile.shortBuf:[B\n-   #34 = Methodref          #499.#500     // java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-   #35 = Fieldref           #2.#501       // org/apache/commons/compress/archivers/zip/ZipFile.dwordBbuf:Ljava/nio/ByteBuffer;\n-   #36 = Fieldref           #2.#502       // org/apache/commons/compress/archivers/zip/ZipFile.wordBbuf:Ljava/nio/ByteBuffer;\n-   #37 = Fieldref           #2.#503       // org/apache/commons/compress/archivers/zip/ZipFile.cfhBbuf:Ljava/nio/ByteBuffer;\n-   #38 = Fieldref           #2.#504       // org/apache/commons/compress/archivers/zip/ZipFile.shortBbuf:Ljava/nio/ByteBuffer;\n-   #39 = Class              #505          // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-   #40 = Fieldref           #2.#506       // org/apache/commons/compress/archivers/zip/ZipFile.isSplitZipArchive:Z\n-   #41 = Fieldref           #2.#507       // org/apache/commons/compress/archivers/zip/ZipFile.archiveName:Ljava/lang/String;\n-   #42 = Fieldref           #2.#508       // org/apache/commons/compress/archivers/zip/ZipFile.encoding:Ljava/lang/String;\n-   #43 = Methodref          #5.#509       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #44 = Fieldref           #2.#510       // org/apache/commons/compress/archivers/zip/ZipFile.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #45 = Fieldref           #2.#511       // org/apache/commons/compress/archivers/zip/ZipFile.useUnicodeExtraFields:Z\n-   #46 = Methodref          #2.#512       // org/apache/commons/compress/archivers/zip/ZipFile.populateFromCentralDirectory:()Ljava/util/Map;\n-   #47 = Methodref          #2.#513       // org/apache/commons/compress/archivers/zip/ZipFile.resolveLocalFileHeaderData:(Ljava/util/Map;)V\n-   #48 = Methodref          #2.#514       // org/apache/commons/compress/archivers/zip/ZipFile.fillNameMap:()V\n-   #49 = Class              #515          // java/io/IOException\n-   #50 = Class              #516          // java/lang/StringBuilder\n-   #51 = Methodref          #50.#488      // java/lang/StringBuilder.\"<init>\":()V\n-   #52 = String             #517          // Error on ZipFile\n-   #53 = Methodref          #50.#518      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #54 = Methodref          #50.#485      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #55 = Methodref          #49.#519      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #56 = Class              #520          // java/io/File\n-   #57 = Methodref          #56.#521      // java/io/File.\"<init>\":(Ljava/lang/String;)V\n-   #58 = Methodref          #522.#523     // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #59 = InterfaceMethodref #386.#524     // java/nio/channels/SeekableByteChannel.close:()V\n-   #60 = Methodref          #2.#525       // org/apache/commons/compress/archivers/zip/ZipFile.getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n-   #61 = InterfaceMethodref #397.#526     // java/util/Enumeration.hasMoreElements:()Z\n-   #62 = InterfaceMethodref #397.#527     // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n-   #63 = Class              #528          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-   #64 = InterfaceMethodref #529.#530     // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate.test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #65 = Methodref          #2.#531       // org/apache/commons/compress/archivers/zip/ZipFile.getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-   #66 = Methodref          #532.#533     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-   #67 = Class              #534          // java/lang/IllegalArgumentException\n-   #68 = String             #535          // Corrupted archive, stream boundaries are out of range\n-   #69 = Methodref          #67.#521      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #70 = Class              #536          // java/nio/channels/FileChannel\n-   #71 = Class              #537          // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n-   #72 = Methodref          #71.#538      // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-   #73 = Class              #539          // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n-   #74 = Methodref          #73.#540      // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n-   #75 = InvokeDynamic      #0:#546       // #0:accept:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n-   #76 = InterfaceMethodref #88.#547      // java/util/List.forEach:(Ljava/util/function/Consumer;)V\n-   #77 = Methodref          #2.#524       // org/apache/commons/compress/archivers/zip/ZipFile.close:()V\n-   #78 = Methodref          #284.#548     // java/lang/Object.finalize:()V\n-   #79 = Fieldref           #2.#549       // org/apache/commons/compress/archivers/zip/ZipFile.firstLocalFileHeaderOffset:J\n-   #80 = Methodref          #2.#550       // org/apache/commons/compress/archivers/zip/ZipFile.createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n-   #81 = Methodref          #63.#551      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n-   #82 = Class              #552          // org/apache/commons/compress/archivers/EntryStreamOffsets\n-   #83 = Long               -1l\n-   #85 = Methodref          #2.#553       // org/apache/commons/compress/archivers/zip/ZipFile.setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n-   #86 = Methodref          #554.#555     // java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n-   #87 = InterfaceMethodref #388.#556     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #88 = Class              #557          // java/util/List\n-   #89 = Methodref          #554.#558     // java/util/Collections.emptyList:()Ljava/util/List;\n-   #90 = Fieldref           #63.#559      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.EMPTY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #91 = InterfaceMethodref #88.#560      // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #92 = Class              #561          // \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\"\n-   #93 = Fieldref           #2.#562       // org/apache/commons/compress/archivers/zip/ZipFile.offsetComparator:Ljava/util/Comparator;\n-   #94 = Methodref          #563.#564     // java/util/Arrays.sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n-   #95 = Methodref          #563.#565     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-   #96 = Methodref          #23.#560      // java/util/LinkedList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #97 = Methodref          #23.#566      // java/util/LinkedList.getFirst:()Ljava/lang/Object;\n-   #98 = Class              #567          // org/apache/commons/compress/archivers/zip/ZipFile$Entry\n-   #99 = Methodref          #522.#568     // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #100 = Class              #569          // java/io/BufferedInputStream\n-  #101 = Methodref          #100.#570     // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-  #102 = Fieldref           #286.#571     // org/apache/commons/compress/archivers/zip/ZipFile$2.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n-  #103 = Methodref          #63.#572      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-  #104 = Methodref          #573.#574     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #105 = Methodref          #573.#575     // org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n-  #106 = Class              #576          // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n-  #107 = Methodref          #106.#570     // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream.\"<init>\":(Ljava/io/InputStream;)V\n-  #108 = Class              #577          // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-  #109 = Methodref          #108.#570     // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-  #110 = Class              #578          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-  #111 = Methodref          #63.#579      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #112 = Methodref          #435.#580     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n-  #113 = Methodref          #435.#581     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n-  #114 = Methodref          #110.#582     // org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n-  #115 = String             #583          // bad IMPLODE data\n-  #116 = Class              #584          // java/util/zip/Inflater\n-  #117 = Methodref          #116.#585     // java/util/zip/Inflater.\"<init>\":(Z)V\n-  #118 = Class              #586          // org/apache/commons/compress/archivers/zip/ZipFile$1\n-  #119 = Class              #587          // java/io/SequenceInputStream\n-  #120 = Class              #588          // java/io/ByteArrayInputStream\n-  #121 = Fieldref           #2.#589       // org/apache/commons/compress/archivers/zip/ZipFile.ONE_ZERO_BYTE:[B\n-  #122 = Methodref          #120.#590     // java/io/ByteArrayInputStream.\"<init>\":([B)V\n-  #123 = Methodref          #119.#591     // java/io/SequenceInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n-  #124 = Methodref          #118.#592     // org/apache/commons/compress/archivers/zip/ZipFile$1.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n-  #125 = Class              #593          // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-  #126 = Methodref          #125.#570     // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-  #127 = Class              #594          // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-  #128 = Methodref          #127.#570     // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-  #129 = Class              #595          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  #130 = Methodref          #129.#596     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #131 = Methodref          #2.#597       // org/apache/commons/compress/archivers/zip/ZipFile.getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-  #132 = Methodref          #63.#598      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-  #133 = Methodref          #63.#599      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z\n-  #134 = Methodref          #2.#600       // org/apache/commons/compress/archivers/zip/ZipFile.getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-  #135 = Methodref          #465.#601     // org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n-  #136 = InterfaceMethodref #436.#602     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-  #137 = Methodref          #405.#524     // java/io/InputStream.close:()V\n-  #138 = Class              #603          // java/lang/Throwable\n-  #139 = Methodref          #138.#604     // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-  #140 = Methodref          #26.#488      // java/util/HashMap.\"<init>\":()V\n-  #141 = Methodref          #2.#605       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory:()V\n-  #142 = InterfaceMethodref #386.#606     // java/nio/channels/SeekableByteChannel.position:()J\n-  #143 = Fieldref           #2.#607       // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartOffset:J\n-  #144 = Methodref          #499.#608     // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-  #145 = Methodref          #465.#609     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-  #146 = Methodref          #610.#611     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-  #147 = Fieldref           #2.#612       // org/apache/commons/compress/archivers/zip/ZipFile.CFH_SIG:J\n-  #148 = Methodref          #2.#613       // org/apache/commons/compress/archivers/zip/ZipFile.startsWithLocalFileHeader:()Z\n-  #149 = String             #614          // Central directory is empty, can\\'t expand corrupt archive.\n-  #150 = Methodref          #49.#521      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-  #151 = Methodref          #2.#615       // org/apache/commons/compress/archivers/zip/ZipFile.readCentralDirectoryEntry:(Ljava/util/Map;)V\n-  #152 = Methodref          #2.#616       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtEndOfCentralDirectoryRecord:()V\n-  #153 = Long               20l\n-  #155 = InterfaceMethodref #386.#617     // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #156 = Fieldref           #532.#618     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n-  #157 = Methodref          #563.#619     // java/util/Arrays.equals:([B[B)Z\n-  #158 = Methodref          #2.#620       // org/apache/commons/compress/archivers/zip/ZipFile.skipBytes:(I)V\n-  #159 = Methodref          #2.#621       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory32:()V\n-  #160 = Methodref          #2.#622       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory64:()V\n-  #161 = Methodref          #623.#624     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n-  #162 = Fieldref           #2.#625       // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartDiskNumber:J\n-  #163 = Fieldref           #2.#626       // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartRelativeOffset:J\n-  #164 = Methodref          #39.#627      // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n-  #165 = Methodref          #628.#629     // java/lang/Long.max:(JJ)J\n-  #166 = Methodref          #261.#630     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n-  #167 = Fieldref           #532.#631     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n-  #168 = Class              #632          // java/util/zip/ZipException\n-  #169 = String             #633          // Archive\\'s ZIP64 end of central directory locator is corrupt.\n-  #170 = Methodref          #168.#521     // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-  #171 = Long               22l\n-  #173 = Long               65557l\n-  #175 = Fieldref           #532.#634     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n-  #176 = Methodref          #2.#635       // org/apache/commons/compress/archivers/zip/ZipFile.tryToLocateSignature:(JJ[B)Z\n-  #177 = String             #636          // Archive is not a ZIP archive\n-  #178 = Methodref          #98.#488      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.\"<init>\":()V\n-  #179 = Methodref          #623.#637     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-  #180 = Methodref          #98.#638      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V\n-  #181 = Methodref          #98.#639      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V\n-  #182 = Methodref          #98.#640      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V\n-  #183 = Methodref          #435.#641     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #184 = Methodref          #435.#642     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n-  #185 = Fieldref           #5.#643       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #186 = Fieldref           #644.#645     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #187 = Methodref          #98.#646      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #188 = Methodref          #98.#647      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-  #189 = Methodref          #98.#648      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V\n-  #190 = Methodref          #98.#649      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V\n-  #191 = Methodref          #610.#650     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-  #192 = Methodref          #522.#651     // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n-  #193 = Methodref          #98.#652      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V\n-  #194 = Methodref          #98.#653      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V\n-  #195 = String             #654          // broken archive, entry with negative compressed size\n-  #196 = Methodref          #98.#655      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V\n-  #197 = String             #656          // broken archive, entry with negative size\n-  #198 = Methodref          #98.#657      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V\n-  #199 = String             #658          // broken archive, entry with negative fileNameLen\n-  #200 = String             #659          // broken archive, entry with negative extraLen\n-  #201 = String             #660          // broken archive, entry with negative commentLen\n-  #202 = Methodref          #98.#661      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDiskNumberStart:(J)V\n-  #203 = Methodref          #98.#662      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V\n-  #204 = Methodref          #98.#663      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V\n-  #205 = Methodref          #465.#664     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n-  #206 = Class              #665          // java/io/EOFException\n-  #207 = Methodref          #206.#488     // java/io/EOFException.\"<init>\":()V\n-  #208 = Methodref          #98.#666      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V\n-  #209 = Methodref          #98.#667      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V\n-  #210 = InterfaceMethodref #88.#668      // java/util/List.add:(Ljava/lang/Object;)Z\n-  #211 = Methodref          #98.#669      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V\n-  #212 = Class              #670          // java/lang/RuntimeException\n-  #213 = String             #671          // Invalid extra data in entry\n-  #214 = Methodref          #98.#672      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.getName:()Ljava/lang/String;\n-  #215 = Methodref          #168.#673     // java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-  #216 = Methodref          #2.#674       // org/apache/commons/compress/archivers/zip/ZipFile.setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #217 = Methodref          #2.#675       // org/apache/commons/compress/archivers/zip/ZipFile.sanityCheckLFHOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #218 = Methodref          #98.#676      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V\n-  #219 = Class              #677          // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n-  #220 = Methodref          #219.#678     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.\"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-  #221 = InterfaceMethodref #388.#679     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #222 = Methodref          #98.#680      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V\n-  #223 = InterfaceMethodref #88.#681      // java/util/List.iterator:()Ljava/util/Iterator;\n-  #224 = InterfaceMethodref #440.#682     // java/util/Iterator.hasNext:()Z\n-  #225 = InterfaceMethodref #440.#683     // java/util/Iterator.next:()Ljava/lang/Object;\n-  #226 = Methodref          #98.#684      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V\n-  #227 = InterfaceMethodref #388.#685     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-  #228 = Methodref          #219.#686     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #229 = Methodref          #219.#687     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #230 = Methodref          #522.#688     // org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #231 = Methodref          #63.#689      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n-  #232 = String             #690          // broken archive, entry with negative disk number\n-  #233 = Methodref          #63.#691      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-  #234 = String             #692          // broken archive, entry with negative local file header offset\n-  #235 = String             #693          // local file header for\n-  #236 = Methodref          #63.#672      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-  #237 = String             #694          //  starts on a later disk than central directory\n-  #238 = String             #695          //  starts after central directory\n-  #239 = Long               26l\n-  #241 = Methodref          #499.#696     // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n-  #242 = Methodref          #499.#697     // java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n-  #243 = Long               2l\n-  #245 = Methodref          #63.#698      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n-  #246 = String             #699          // data for\n-  #247 = String             #700          //  overlaps with central directory.\n-  #248 = Fieldref           #250.#701     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #249 = Methodref          #63.#702      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #250 = Class              #703          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #251 = String             #704          // archive contains unparseable zip64 extra field\n-  #252 = Methodref          #63.#705      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-  #253 = Long               4294967295l\n-  #255 = Long               65535l\n-  #257 = Methodref          #250.#706     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V\n-  #258 = Methodref          #250.#707     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #259 = Methodref          #261.#708     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-  #260 = Methodref          #63.#657      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n-  #261 = Class              #709          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #262 = Methodref          #261.#710     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-  #263 = Methodref          #250.#711     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #264 = Methodref          #250.#712     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #265 = Methodref          #63.#655      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n-  #266 = Methodref          #250.#713     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #267 = Methodref          #250.#714     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #268 = Methodref          #63.#667      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n-  #269 = Methodref          #250.#715     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #270 = Methodref          #610.#716     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-  #271 = Methodref          #63.#661      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDiskNumberStart:(J)V\n-  #272 = InterfaceMethodref #386.#717     // java/nio/channels/SeekableByteChannel.size:()J\n-  #273 = Fieldref           #532.#718     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n-  #274 = Methodref          #719.#629     // java/lang/Math.max:(JJ)J\n-  #275 = Methodref          #499.#720     // java/nio/ByteBuffer.get:()B\n-  #276 = InvokeDynamic      #1:#724       // #1:apply:()Ljava/util/function/Function;\n-  #277 = InterfaceMethodref #388.#725     // java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n-  #278 = Methodref          #23.#726      // java/util/LinkedList.addLast:(Ljava/lang/Object;)V\n-  #279 = Fieldref           #532.#727     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n-  #280 = InvokeDynamic      #2:#731       // #2:applyAsLong:()Ljava/util/function/ToLongFunction;\n-  #281 = InterfaceMethodref #732.#733     // java/util/Comparator.comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-  #282 = InvokeDynamic      #3:#731       // #3:applyAsLong:()Ljava/util/function/ToLongFunction;\n-  #283 = InterfaceMethodref #732.#735     // java/util/Comparator.thenComparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-  #284 = Class              #736          // java/lang/Object\n-  #285 = Class              #737          // java/io/Closeable\n-  #286 = Class              #738          // org/apache/commons/compress/archivers/zip/ZipFile$2\n-  #287 = Utf8               InnerClasses\n-  #288 = Utf8               StoredStatisticsStream\n-  #289 = Utf8               NameAndComment\n-  #290 = Utf8               Entry\n-  #291 = Utf8               BoundedFileChannelInputStream\n-  #292 = Utf8               HASH_SIZE\n-  #293 = Utf8               I\n-  #294 = Utf8               ConstantValue\n-  #295 = Integer            509\n-  #296 = Utf8               NIBLET_MASK\n-  #297 = Integer            15\n-  #298 = Utf8               BYTE_SHIFT\n-  #299 = Integer            8\n-  #300 = Utf8               POS_0\n-  #301 = Integer            0\n-  #302 = Utf8               POS_1\n-  #303 = Integer            1\n-  #304 = Utf8               POS_2\n-  #305 = Integer            2\n-  #306 = Utf8               POS_3\n-  #307 = Integer            3\n-  #308 = Utf8               ONE_ZERO_BYTE\n-  #309 = Utf8               [B\n-  #310 = Utf8               CFH_LEN\n-  #311 = Integer            42\n-  #312 = Utf8               CFH_SIG\n-  #313 = Utf8               J\n-  #314 = Utf8               MIN_EOCD_SIZE\n-  #315 = Integer            22\n-  #316 = Utf8               MAX_EOCD_SIZE\n-  #317 = Integer            65557\n-  #318 = Utf8               CFD_LENGTH_OFFSET\n-  #319 = Integer            12\n-  #320 = Utf8               CFD_DISK_OFFSET\n-  #321 = Integer            6\n-  #322 = Utf8               CFD_LOCATOR_RELATIVE_OFFSET\n-  #323 = Utf8               ZIP64_EOCDL_LENGTH\n-  #324 = Integer            20\n-  #325 = Utf8               ZIP64_EOCDL_LOCATOR_OFFSET\n-  #326 = Utf8               ZIP64_EOCD_CFD_LOCATOR_OFFSET\n-  #327 = Integer            48\n-  #328 = Utf8               ZIP64_EOCD_CFD_DISK_OFFSET\n-  #329 = Utf8               ZIP64_EOCD_CFD_LOCATOR_RELATIVE_OFFSET\n-  #330 = Integer            24\n-  #331 = Utf8               LFH_OFFSET_FOR_FILENAME_LENGTH\n-  #332 = Utf8               offsetComparator\n-  #333 = Utf8               Ljava/util/Comparator;\n-  #334 = Utf8               Signature\n-  #335 = Utf8               Ljava/util/Comparator<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-  #336 = Utf8               entries\n-  #337 = Utf8               Ljava/util/List;\n-  #338 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-  #339 = Utf8               nameMap\n-  #340 = Utf8               Ljava/util/Map;\n-  #341 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;>;\n-  #342 = Utf8               encoding\n-  #343 = Utf8               Ljava/lang/String;\n-  #344 = Utf8               zipEncoding\n-  #345 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #346 = Utf8               archiveName\n-  #347 = Utf8               archive\n-  #348 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n-  #349 = Utf8               useUnicodeExtraFields\n-  #350 = Utf8               Z\n-  #351 = Utf8               closed\n-  #352 = Utf8               isSplitZipArchive\n-  #353 = Utf8               dwordBuf\n-  #354 = Utf8               wordBuf\n-  #355 = Utf8               cfhBuf\n-  #356 = Utf8               shortBuf\n-  #357 = Utf8               dwordBbuf\n-  #358 = Utf8               Ljava/nio/ByteBuffer;\n-  #359 = Utf8               wordBbuf\n-  #360 = Utf8               cfhBbuf\n-  #361 = Utf8               shortBbuf\n-  #362 = Utf8               centralDirectoryStartDiskNumber\n-  #363 = Utf8               centralDirectoryStartRelativeOffset\n-  #364 = Utf8               centralDirectoryStartOffset\n-  #365 = Utf8               firstLocalFileHeaderOffset\n-  #366 = Utf8               closeQuietly\n-  #367 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n-  #368 = Utf8               Code\n-  #369 = Utf8               LineNumberTable\n-  #370 = Utf8               <init>\n-  #371 = Utf8               (Ljava/io/File;)V\n-  #372 = Utf8               Exceptions\n-  #373 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n-  #374 = Utf8               (Ljava/io/File;Ljava/lang/String;Z)V\n-  #375 = Utf8               (Ljava/io/File;Ljava/lang/String;ZZ)V\n-  #376 = Utf8               (Ljava/nio/file/Path;)V\n-  #377 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;)V\n-  #378 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;Z)V\n-  #379 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n-  #380 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n-  #381 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;)V\n-  #382 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n-  #383 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZ)V\n-  #384 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n-  #385 = Utf8               StackMapTable\n-  #386 = Class              #739          // java/nio/channels/SeekableByteChannel\n-  #387 = Class              #740          // java/lang/String\n-  #388 = Class              #741          // java/util/Map\n-  #389 = Utf8               (Ljava/lang/String;)V\n-  #390 = Utf8               (Ljava/lang/String;Ljava/lang/String;)V\n-  #391 = Utf8               canReadEntryData\n-  #392 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #393 = Utf8               close\n-  #394 = Utf8               ()V\n-  #395 = Utf8               copyRawEntries\n-  #396 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;)V\n-  #397 = Class              #742          // java/util/Enumeration\n-  #398 = Utf8               createBoundedInputStream\n-  #399 = Utf8               (JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n-  #400 = Class              #743          // org/apache/commons/compress/utils/BoundedArchiveInputStream\n-  #401 = Utf8               fillNameMap\n-  #402 = Utf8               finalize\n-  #403 = Utf8               getContentBeforeFirstLocalFileHeader\n-  #404 = Utf8               ()Ljava/io/InputStream;\n-  #405 = Class              #744          // java/io/InputStream\n-  #406 = Utf8               getDataOffset\n-  #407 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-  #408 = Utf8               getEncoding\n-  #409 = Utf8               ()Ljava/lang/String;\n-  #410 = Utf8               getEntries\n-  #411 = Utf8               ()Ljava/util/Enumeration;\n-  #412 = Utf8               ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-  #413 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable;\n-  #414 = Class              #745          // java/lang/Iterable\n-  #415 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-  #416 = Utf8               getEntriesInPhysicalOrder\n-  #417 = Utf8               getEntry\n-  #418 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #419 = Utf8               getFirstLocalFileHeaderOffset\n-  #420 = Utf8               ()J\n-  #421 = Utf8               getInputStream\n-  #422 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-  #423 = Utf8               getRawInputStream\n-  #424 = Utf8               getUnixSymlink\n-  #425 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n-  #426 = Utf8               populateFromCentralDirectory\n-  #427 = Utf8               ()Ljava/util/Map;\n-  #428 = Utf8               ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n-  #429 = Utf8               positionAtCentralDirectory\n-  #430 = Utf8               positionAtCentralDirectory32\n-  #431 = Utf8               positionAtCentralDirectory64\n-  #432 = Utf8               positionAtEndOfCentralDirectoryRecord\n-  #433 = Utf8               readCentralDirectoryEntry\n-  #434 = Utf8               (Ljava/util/Map;)V\n-  #435 = Class              #746          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #436 = Class              #747          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #437 = Class              #309          // \"[B\"\n-  #438 = Utf8               (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n-  #439 = Utf8               resolveLocalFileHeaderData\n-  #440 = Class              #748          // java/util/Iterator\n-  #441 = Class              #749          // \"[I\"\n-  #442 = Utf8               sanityCheckLFHOffset\n-  #443 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #444 = Utf8               setDataOffset\n-  #445 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n-  #446 = Utf8               setSizesAndOffsetFromZip64Extra\n-  #447 = Class              #750          // org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #448 = Utf8               skipBytes\n-  #449 = Utf8               (I)V\n-  #450 = Utf8               startsWithLocalFileHeader\n-  #451 = Utf8               ()Z\n-  #452 = Utf8               tryToLocateSignature\n-  #453 = Utf8               (JJ[B)Z\n-  #454 = Utf8               lambda$fillNameMap$1\n-  #455 = Utf8               lambda$fillNameMap$0\n-  #456 = Utf8               (Ljava/lang/String;)Ljava/util/LinkedList;\n-  #457 = Utf8               access$000\n-  #458 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n-  #459 = Utf8               <clinit>\n-  #460 = Utf8               SourceFile\n-  #461 = Utf8               ZipFile.java\n-  #462 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-  #463 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n-  #464 = NameAndType        #347:#348     // archive:Ljava/nio/channels/SeekableByteChannel;\n-  #465 = Class              #751          // org/apache/commons/compress/utils/IOUtils\n-  #466 = NameAndType        #366:#752     // closeQuietly:(Ljava/io/Closeable;)V\n-  #467 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #468 = Utf8               UTF8\n-  #469 = NameAndType        #370:#373     // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-  #470 = NameAndType        #753:#754     // toPath:()Ljava/nio/file/Path;\n-  #471 = NameAndType        #370:#378     // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n-  #472 = NameAndType        #370:#379     // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n-  #473 = Class              #755          // java/nio/file/StandardOpenOption\n-  #474 = NameAndType        #756:#757     // READ:Ljava/nio/file/StandardOpenOption;\n-  #475 = Class              #758          // java/util/EnumSet\n-  #476 = NameAndType        #759:#760     // of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n-  #477 = Utf8               java/nio/file/attribute/FileAttribute\n-  #478 = Class              #761          // java/nio/file/Files\n-  #479 = NameAndType        #762:#763     // newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-  #480 = NameAndType        #764:#409     // getAbsolutePath:()Ljava/lang/String;\n-  #481 = NameAndType        #370:#384     // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n-  #482 = NameAndType        #370:#377     // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n-  #483 = Class              #765          // java/nio/file/Path\n-  #484 = NameAndType        #766:#754     // toAbsolutePath:()Ljava/nio/file/Path;\n-  #485 = NameAndType        #767:#409     // toString:()Ljava/lang/String;\n-  #486 = Utf8               unknown archive\n-  #487 = NameAndType        #370:#382     // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n-  #488 = NameAndType        #370:#394     // \"<init>\":()V\n-  #489 = Utf8               java/util/LinkedList\n-  #490 = NameAndType        #336:#337     // entries:Ljava/util/List;\n-  #491 = Utf8               java/util/HashMap\n-  #492 = NameAndType        #370:#449     // \"<init>\":(I)V\n-  #493 = NameAndType        #339:#340     // nameMap:Ljava/util/Map;\n-  #494 = NameAndType        #351:#350     // closed:Z\n-  #495 = NameAndType        #353:#309     // dwordBuf:[B\n-  #496 = NameAndType        #354:#309     // wordBuf:[B\n-  #497 = NameAndType        #355:#309     // cfhBuf:[B\n-  #498 = NameAndType        #356:#309     // shortBuf:[B\n-  #499 = Class              #768          // java/nio/ByteBuffer\n-  #500 = NameAndType        #769:#770     // wrap:([B)Ljava/nio/ByteBuffer;\n-  #501 = NameAndType        #357:#358     // dwordBbuf:Ljava/nio/ByteBuffer;\n-  #502 = NameAndType        #359:#358     // wordBbuf:Ljava/nio/ByteBuffer;\n-  #503 = NameAndType        #360:#358     // cfhBbuf:Ljava/nio/ByteBuffer;\n-  #504 = NameAndType        #361:#358     // shortBbuf:Ljava/nio/ByteBuffer;\n-  #505 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-  #506 = NameAndType        #352:#350     // isSplitZipArchive:Z\n-  #507 = NameAndType        #346:#343     // archiveName:Ljava/lang/String;\n-  #508 = NameAndType        #342:#343     // encoding:Ljava/lang/String;\n-  #509 = NameAndType        #771:#772     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #510 = NameAndType        #344:#345     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #511 = NameAndType        #349:#350     // useUnicodeExtraFields:Z\n-  #512 = NameAndType        #426:#427     // populateFromCentralDirectory:()Ljava/util/Map;\n-  #513 = NameAndType        #439:#434     // resolveLocalFileHeaderData:(Ljava/util/Map;)V\n-  #514 = NameAndType        #401:#394     // fillNameMap:()V\n-  #515 = Utf8               java/io/IOException\n-  #516 = Utf8               java/lang/StringBuilder\n-  #517 = Utf8               Error on ZipFile\n-  #518 = NameAndType        #773:#774     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #519 = NameAndType        #370:#775     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #520 = Utf8               java/io/File\n-  #521 = NameAndType        #370:#389     // \"<init>\":(Ljava/lang/String;)V\n-  #522 = Class              #776          // org/apache/commons/compress/archivers/zip/ZipUtil\n-  #523 = NameAndType        #777:#392     // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #524 = NameAndType        #393:#394     // close:()V\n-  #525 = NameAndType        #416:#411     // getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n-  #526 = NameAndType        #778:#451     // hasMoreElements:()Z\n-  #527 = NameAndType        #779:#780     // nextElement:()Ljava/lang/Object;\n-  #528 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #529 = Class              #781          // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n-  #530 = NameAndType        #782:#392     // test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #531 = NameAndType        #423:#422     // getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-  #532 = Class              #783          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-  #533 = NameAndType        #784:#785     // addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-  #534 = Utf8               java/lang/IllegalArgumentException\n-  #535 = Utf8               Corrupted archive, stream boundaries are out of range\n-  #536 = Utf8               java/nio/channels/FileChannel\n-  #537 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n-  #538 = NameAndType        #370:#786     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-  #539 = Utf8               org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n-  #540 = NameAndType        #370:#787     // \"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n-  #541 = Utf8               BootstrapMethods\n-  #542 = MethodHandle       6:#788        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #543 = MethodType         #789          //  (Ljava/lang/Object;)V\n-  #544 = MethodHandle       7:#790        // REF_invokeSpecial org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #545 = MethodType         #443          //  (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #546 = NameAndType        #791:#792     // accept:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n-  #547 = NameAndType        #793:#794     // forEach:(Ljava/util/function/Consumer;)V\n-  #548 = NameAndType        #402:#394     // finalize:()V\n-  #549 = NameAndType        #365:#313     // firstLocalFileHeaderOffset:J\n-  #550 = NameAndType        #398:#399     // createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n-  #551 = NameAndType        #406:#420     // getDataOffset:()J\n-  #552 = Utf8               org/apache/commons/compress/archivers/EntryStreamOffsets\n-  #553 = NameAndType        #444:#445     // setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n-  #554 = Class              #795          // java/util/Collections\n-  #555 = NameAndType        #796:#797     // enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n-  #556 = NameAndType        #798:#799     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #557 = Utf8               java/util/List\n-  #558 = NameAndType        #800:#801     // emptyList:()Ljava/util/List;\n-  #559 = NameAndType        #802:#561     // EMPTY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #560 = NameAndType        #803:#804     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #561 = Utf8               [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #562 = NameAndType        #332:#333     // offsetComparator:Ljava/util/Comparator;\n-  #563 = Class              #805          // java/util/Arrays\n-  #564 = NameAndType        #806:#807     // sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n-  #565 = NameAndType        #808:#809     // asList:([Ljava/lang/Object;)Ljava/util/List;\n-  #566 = NameAndType        #810:#780     // getFirst:()Ljava/lang/Object;\n-  #567 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$Entry\n-  #568 = NameAndType        #811:#443     // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #569 = Utf8               java/io/BufferedInputStream\n-  #570 = NameAndType        #370:#812     // \"<init>\":(Ljava/io/InputStream;)V\n-  #571 = NameAndType        #813:#749     // $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n-  #572 = NameAndType        #814:#815     // getMethod:()I\n-  #573 = Class              #816          // org/apache/commons/compress/archivers/zip/ZipMethod\n-  #574 = NameAndType        #817:#818     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #575 = NameAndType        #819:#815     // ordinal:()I\n-  #576 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n-  #577 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-  #578 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-  #579 = NameAndType        #820:#821     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #580 = NameAndType        #822:#815     // getSlidingDictionarySize:()I\n-  #581 = NameAndType        #823:#815     // getNumberOfShannonFanoTrees:()I\n-  #582 = NameAndType        #370:#824     // \"<init>\":(IILjava/io/InputStream;)V\n-  #583 = Utf8               bad IMPLODE data\n-  #584 = Utf8               java/util/zip/Inflater\n-  #585 = NameAndType        #370:#825     // \"<init>\":(Z)V\n-  #586 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$1\n-  #587 = Utf8               java/io/SequenceInputStream\n-  #588 = Utf8               java/io/ByteArrayInputStream\n-  #589 = NameAndType        #308:#309     // ONE_ZERO_BYTE:[B\n-  #590 = NameAndType        #370:#826     // \"<init>\":([B)V\n-  #591 = NameAndType        #370:#827     // \"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n-  #592 = NameAndType        #370:#828     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n-  #593 = Utf8               org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-  #594 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-  #595 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  #596 = NameAndType        #370:#829     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #597 = NameAndType        #406:#407     // getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-  #598 = NameAndType        #830:#420     // getCompressedSize:()J\n-  #599 = NameAndType        #831:#451     // isUnixSymlink:()Z\n-  #600 = NameAndType        #421:#422     // getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-  #601 = NameAndType        #832:#833     // toByteArray:(Ljava/io/InputStream;)[B\n-  #602 = NameAndType        #834:#835     // decode:([B)Ljava/lang/String;\n-  #603 = Utf8               java/lang/Throwable\n-  #604 = NameAndType        #836:#837     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #605 = NameAndType        #429:#394     // positionAtCentralDirectory:()V\n-  #606 = NameAndType        #838:#420     // position:()J\n-  #607 = NameAndType        #364:#313     // centralDirectoryStartOffset:J\n-  #608 = NameAndType        #839:#840     // rewind:()Ljava/nio/Buffer;\n-  #609 = NameAndType        #841:#842     // readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-  #610 = Class              #843          // org/apache/commons/compress/archivers/zip/ZipLong\n-  #611 = NameAndType        #844:#845     // getValue:([B)J\n-  #612 = NameAndType        #312:#313     // CFH_SIG:J\n-  #613 = NameAndType        #450:#451     // startsWithLocalFileHeader:()Z\n-  #614 = Utf8               Central directory is empty, can\\'t expand corrupt archive.\n-  #615 = NameAndType        #433:#434     // readCentralDirectoryEntry:(Ljava/util/Map;)V\n-  #616 = NameAndType        #432:#394     // positionAtEndOfCentralDirectoryRecord:()V\n-  #617 = NameAndType        #838:#846     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #618 = NameAndType        #847:#309     // ZIP64_EOCD_LOC_SIG:[B\n-  #619 = NameAndType        #848:#849     // equals:([B[B)Z\n-  #620 = NameAndType        #448:#449     // skipBytes:(I)V\n-  #621 = NameAndType        #430:#394     // positionAtCentralDirectory32:()V\n-  #622 = NameAndType        #431:#394     // positionAtCentralDirectory64:()V\n-  #623 = Class              #850          // org/apache/commons/compress/archivers/zip/ZipShort\n-  #624 = NameAndType        #844:#851     // getValue:([B)I\n-  #625 = NameAndType        #362:#313     // centralDirectoryStartDiskNumber:J\n-  #626 = NameAndType        #363:#313     // centralDirectoryStartRelativeOffset:J\n-  #627 = NameAndType        #838:#852     // position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n-  #628 = Class              #853          // java/lang/Long\n-  #629 = NameAndType        #854:#855     // max:(JJ)J\n-  #630 = NameAndType        #856:#845     // getLongValue:([B)J\n-  #631 = NameAndType        #857:#309     // ZIP64_EOCD_SIG:[B\n-  #632 = Utf8               java/util/zip/ZipException\n-  #633 = Utf8               Archive\\'s ZIP64 end of central directory locator is corrupt.\n-  #634 = NameAndType        #858:#309     // EOCD_SIG:[B\n-  #635 = NameAndType        #452:#453     // tryToLocateSignature:(JJ[B)Z\n-  #636 = Utf8               Archive is not a ZIP archive\n-  #637 = NameAndType        #844:#859     // getValue:([BI)I\n-  #638 = NameAndType        #860:#449     // setVersionMadeBy:(I)V\n-  #639 = NameAndType        #861:#449     // setPlatform:(I)V\n-  #640 = NameAndType        #862:#449     // setVersionRequired:(I)V\n-  #641 = NameAndType        #863:#864     // parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #642 = NameAndType        #865:#451     // usesUTF8ForNames:()Z\n-  #643 = NameAndType        #866:#345     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #644 = Class              #867          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #645 = NameAndType        #869:#870     // NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #646 = NameAndType        #871:#872     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #647 = NameAndType        #873:#874     // setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-  #648 = NameAndType        #875:#449     // setRawFlag:(I)V\n-  #649 = NameAndType        #876:#449     // setMethod:(I)V\n-  #650 = NameAndType        #844:#877     // getValue:([BI)J\n-  #651 = NameAndType        #878:#879     // dosToJavaTime:(J)J\n-  #652 = NameAndType        #880:#881     // setTime:(J)V\n-  #653 = NameAndType        #882:#881     // setCrc:(J)V\n-  #654 = Utf8               broken archive, entry with negative compressed size\n-  #655 = NameAndType        #883:#881     // setCompressedSize:(J)V\n-  #656 = Utf8               broken archive, entry with negative size\n-  #657 = NameAndType        #884:#881     // setSize:(J)V\n-  #658 = Utf8               broken archive, entry with negative fileNameLen\n-  #659 = Utf8               broken archive, entry with negative extraLen\n-  #660 = Utf8               broken archive, entry with negative commentLen\n-  #661 = NameAndType        #885:#881     // setDiskNumberStart:(J)V\n-  #662 = NameAndType        #886:#449     // setInternalAttributes:(I)V\n-  #663 = NameAndType        #887:#881     // setExternalAttributes:(J)V\n-  #664 = NameAndType        #888:#889     // readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n-  #665 = Utf8               java/io/EOFException\n-  #666 = NameAndType        #890:#891     // setName:(Ljava/lang/String;[B)V\n-  #667 = NameAndType        #892:#881     // setLocalHeaderOffset:(J)V\n-  #668 = NameAndType        #893:#894     // add:(Ljava/lang/Object;)Z\n-  #669 = NameAndType        #895:#826     // setCentralDirectoryExtra:([B)V\n-  #670 = Utf8               java/lang/RuntimeException\n-  #671 = Utf8               Invalid extra data in entry\n-  #672 = NameAndType        #896:#409     // getName:()Ljava/lang/String;\n-  #673 = NameAndType        #897:#898     // initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-  #674 = NameAndType        #446:#443     // setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #675 = NameAndType        #442:#443     // sanityCheckLFHOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #676 = NameAndType        #899:#389     // setComment:(Ljava/lang/String;)V\n-  #677 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n-  #678 = NameAndType        #370:#900     // \"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-  #679 = NameAndType        #901:#902     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #680 = NameAndType        #903:#825     // setStreamContiguous:(Z)V\n-  #681 = NameAndType        #904:#905     // iterator:()Ljava/util/Iterator;\n-  #682 = NameAndType        #906:#451     // hasNext:()Z\n-  #683 = NameAndType        #907:#780     // next:()Ljava/lang/Object;\n-  #684 = NameAndType        #908:#826     // setExtra:([B)V\n-  #685 = NameAndType        #909:#894     // containsKey:(Ljava/lang/Object;)Z\n-  #686 = NameAndType        #910:#911     // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #687 = NameAndType        #912:#911     // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #688 = NameAndType        #913:#914     // setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #689 = NameAndType        #915:#420     // getDiskNumberStart:()J\n-  #690 = Utf8               broken archive, entry with negative disk number\n-  #691 = NameAndType        #916:#420     // getLocalHeaderOffset:()J\n-  #692 = Utf8               broken archive, entry with negative local file header offset\n-  #693 = Utf8               local file header for\n-  #694 = Utf8                starts on a later disk than central directory\n-  #695 = Utf8                starts after central directory\n-  #696 = NameAndType        #917:#840     // flip:()Ljava/nio/Buffer;\n-  #697 = NameAndType        #798:#770     // get:([B)Ljava/nio/ByteBuffer;\n-  #698 = NameAndType        #444:#881     // setDataOffset:(J)V\n-  #699 = Utf8               data for\n-  #700 = Utf8                overlaps with central directory.\n-  #701 = NameAndType        #918:#919     // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #702 = NameAndType        #920:#921     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #703 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #704 = Utf8               archive contains unparseable zip64 extra field\n-  #705 = NameAndType        #922:#420     // getSize:()J\n-  #706 = NameAndType        #923:#924     // reparseCentralDirectoryData:(ZZZZ)V\n-  #707 = NameAndType        #922:#925     // getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #708 = NameAndType        #856:#420     // getLongValue:()J\n-  #709 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #710 = NameAndType        #370:#881     // \"<init>\":(J)V\n-  #711 = NameAndType        #884:#926     // setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #712 = NameAndType        #830:#925     // getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #713 = NameAndType        #883:#926     // setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #714 = NameAndType        #927:#925     // getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #715 = NameAndType        #928:#929     // getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #716 = NameAndType        #844:#420     // getValue:()J\n-  #717 = NameAndType        #930:#420     // size:()J\n-  #718 = NameAndType        #931:#309     // LFH_SIG:[B\n-  #719 = Class              #932          // java/lang/Math\n-  #720 = NameAndType        #798:#933     // get:()B\n-  #721 = MethodType         #799          //  (Ljava/lang/Object;)Ljava/lang/Object;\n-  #722 = MethodHandle       6:#934        // REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n-  #723 = MethodType         #456          //  (Ljava/lang/String;)Ljava/util/LinkedList;\n-  #724 = NameAndType        #935:#936     // apply:()Ljava/util/function/Function;\n-  #725 = NameAndType        #937:#938     // computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n-  #726 = NameAndType        #939:#789     // addLast:(Ljava/lang/Object;)V\n-  #727 = NameAndType        #312:#309     // CFH_SIG:[B\n-  #728 = MethodType         #940          //  (Ljava/lang/Object;)J\n-  #729 = MethodHandle       5:#231        // REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n-  #730 = MethodType         #407          //  (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-  #731 = NameAndType        #941:#942     // applyAsLong:()Ljava/util/function/ToLongFunction;\n-  #732 = Class              #943          // java/util/Comparator\n-  #733 = NameAndType        #944:#945     // comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-  #734 = MethodHandle       5:#233        // REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-  #735 = NameAndType        #946:#945     // thenComparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-  #736 = Utf8               java/lang/Object\n-  #737 = Utf8               java/io/Closeable\n-  #738 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$2\n-  #739 = Utf8               java/nio/channels/SeekableByteChannel\n-  #740 = Utf8               java/lang/String\n-  #741 = Utf8               java/util/Map\n-  #742 = Utf8               java/util/Enumeration\n-  #743 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n-  #744 = Utf8               java/io/InputStream\n-  #745 = Utf8               java/lang/Iterable\n-  #746 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #747 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #748 = Utf8               java/util/Iterator\n-  #749 = Utf8               [I\n-  #750 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #751 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #752 = Utf8               (Ljava/io/Closeable;)V\n-  #753 = Utf8               toPath\n-  #754 = Utf8               ()Ljava/nio/file/Path;\n-  #755 = Utf8               java/nio/file/StandardOpenOption\n-  #756 = Utf8               READ\n-  #757 = Utf8               Ljava/nio/file/StandardOpenOption;\n-  #758 = Utf8               java/util/EnumSet\n-  #759 = Utf8               of\n-  #760 = Utf8               (Ljava/lang/Enum;)Ljava/util/EnumSet;\n-  #761 = Utf8               java/nio/file/Files\n-  #762 = Utf8               newByteChannel\n-  #763 = Utf8               (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-  #764 = Utf8               getAbsolutePath\n-  #765 = Utf8               java/nio/file/Path\n-  #766 = Utf8               toAbsolutePath\n-  #767 = Utf8               toString\n-  #768 = Utf8               java/nio/ByteBuffer\n-  #769 = Utf8               wrap\n-  #770 = Utf8               ([B)Ljava/nio/ByteBuffer;\n-  #771 = Utf8               getZipEncoding\n-  #772 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #773 = Utf8               append\n-  #774 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #775 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #776 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-  #777 = Utf8               canHandleEntryData\n-  #778 = Utf8               hasMoreElements\n-  #779 = Utf8               nextElement\n-  #780 = Utf8               ()Ljava/lang/Object;\n-  #781 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n-  #782 = Utf8               test\n-  #783 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-  #784 = Utf8               addRawArchiveEntry\n-  #785 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-  #786 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-  #787 = Utf8               (JJLjava/nio/channels/SeekableByteChannel;)V\n-  #788 = Methodref          #947.#948     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #789 = Utf8               (Ljava/lang/Object;)V\n-  #790 = Methodref          #2.#949       // org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #791 = Utf8               accept\n-  #792 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n-  #793 = Utf8               forEach\n-  #794 = Utf8               (Ljava/util/function/Consumer;)V\n-  #795 = Utf8               java/util/Collections\n-  #796 = Utf8               enumeration\n-  #797 = Utf8               (Ljava/util/Collection;)Ljava/util/Enumeration;\n-  #798 = Utf8               get\n-  #799 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #800 = Utf8               emptyList\n-  #801 = Utf8               ()Ljava/util/List;\n-  #802 = Utf8               EMPTY_ARRAY\n-  #803 = Utf8               toArray\n-  #804 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #805 = Utf8               java/util/Arrays\n-  #806 = Utf8               sort\n-  #807 = Utf8               ([Ljava/lang/Object;Ljava/util/Comparator;)V\n-  #808 = Utf8               asList\n-  #809 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n-  #810 = Utf8               getFirst\n-  #811 = Utf8               checkRequestedFeatures\n-  #812 = Utf8               (Ljava/io/InputStream;)V\n-  #813 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod\n-  #814 = Utf8               getMethod\n-  #815 = Utf8               ()I\n-  #816 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n-  #817 = Utf8               getMethodByCode\n-  #818 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #819 = Utf8               ordinal\n-  #820 = Utf8               getGeneralPurposeBit\n-  #821 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #822 = Utf8               getSlidingDictionarySize\n-  #823 = Utf8               getNumberOfShannonFanoTrees\n-  #824 = Utf8               (IILjava/io/InputStream;)V\n-  #825 = Utf8               (Z)V\n-  #826 = Utf8               ([B)V\n-  #827 = Utf8               (Ljava/io/InputStream;Ljava/io/InputStream;)V\n-  #828 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n-  #829 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #830 = Utf8               getCompressedSize\n-  #831 = Utf8               isUnixSymlink\n-  #832 = Utf8               toByteArray\n-  #833 = Utf8               (Ljava/io/InputStream;)[B\n-  #834 = Utf8               decode\n-  #835 = Utf8               ([B)Ljava/lang/String;\n-  #836 = Utf8               addSuppressed\n-  #837 = Utf8               (Ljava/lang/Throwable;)V\n-  #838 = Utf8               position\n-  #839 = Utf8               rewind\n-  #840 = Utf8               ()Ljava/nio/Buffer;\n-  #841 = Utf8               readFully\n-  #842 = Utf8               (Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-  #843 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #844 = Utf8               getValue\n-  #845 = Utf8               ([B)J\n-  #846 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-  #847 = Utf8               ZIP64_EOCD_LOC_SIG\n-  #848 = Utf8               equals\n-  #849 = Utf8               ([B[B)Z\n-  #850 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-  #851 = Utf8               ([B)I\n-  #852 = Utf8               (JJ)Ljava/nio/channels/SeekableByteChannel;\n-  #853 = Utf8               java/lang/Long\n-  #854 = Utf8               max\n-  #855 = Utf8               (JJ)J\n-  #856 = Utf8               getLongValue\n-  #857 = Utf8               ZIP64_EOCD_SIG\n-  #858 = Utf8               EOCD_SIG\n-  #859 = Utf8               ([BI)I\n-  #860 = Utf8               setVersionMadeBy\n-  #861 = Utf8               setPlatform\n-  #862 = Utf8               setVersionRequired\n-  #863 = Utf8               parse\n-  #864 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #865 = Utf8               usesUTF8ForNames\n-  #866 = Utf8               UTF8_ZIP_ENCODING\n-  #867 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #868 = Utf8               NameSource\n-  #869 = Utf8               NAME_WITH_EFS_FLAG\n-  #870 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #871 = Utf8               setNameSource\n-  #872 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #873 = Utf8               setGeneralPurposeBit\n-  #874 = Utf8               (Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-  #875 = Utf8               setRawFlag\n-  #876 = Utf8               setMethod\n-  #877 = Utf8               ([BI)J\n-  #878 = Utf8               dosToJavaTime\n-  #879 = Utf8               (J)J\n-  #880 = Utf8               setTime\n-  #881 = Utf8               (J)V\n-  #882 = Utf8               setCrc\n-  #883 = Utf8               setCompressedSize\n-  #884 = Utf8               setSize\n-  #885 = Utf8               setDiskNumberStart\n-  #886 = Utf8               setInternalAttributes\n-  #887 = Utf8               setExternalAttributes\n-  #888 = Utf8               readRange\n-  #889 = Utf8               (Ljava/nio/channels/ReadableByteChannel;I)[B\n-  #890 = Utf8               setName\n-  #891 = Utf8               (Ljava/lang/String;[B)V\n-  #892 = Utf8               setLocalHeaderOffset\n-  #893 = Utf8               add\n-  #894 = Utf8               (Ljava/lang/Object;)Z\n-  #895 = Utf8               setCentralDirectoryExtra\n-  #896 = Utf8               getName\n-  #897 = Utf8               initCause\n-  #898 = Utf8               (Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-  #899 = Utf8               setComment\n-  #900 = Utf8               ([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-  #901 = Utf8               put\n-  #902 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #903 = Utf8               setStreamContiguous\n-  #904 = Utf8               iterator\n-  #905 = Utf8               ()Ljava/util/Iterator;\n-  #906 = Utf8               hasNext\n-  #907 = Utf8               next\n-  #908 = Utf8               setExtra\n-  #909 = Utf8               containsKey\n-  #910 = Utf8               access$200\n-  #911 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #912 = Utf8               access$300\n-  #913 = Utf8               setNameAndCommentFromExtraFields\n-  #914 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #915 = Utf8               getDiskNumberStart\n-  #916 = Utf8               getLocalHeaderOffset\n-  #917 = Utf8               flip\n-  #918 = Utf8               HEADER_ID\n-  #919 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #920 = Utf8               getExtraField\n-  #921 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #922 = Utf8               getSize\n-  #923 = Utf8               reparseCentralDirectoryData\n-  #924 = Utf8               (ZZZZ)V\n-  #925 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #926 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #927 = Utf8               getRelativeHeaderOffset\n-  #928 = Utf8               getDiskStartNumber\n-  #929 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #930 = Utf8               size\n-  #931 = Utf8               LFH_SIG\n-  #932 = Utf8               java/lang/Math\n-  #933 = Utf8               ()B\n-  #934 = Methodref          #2.#950       // org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n-  #935 = Utf8               apply\n-  #936 = Utf8               ()Ljava/util/function/Function;\n-  #937 = Utf8               computeIfAbsent\n-  #938 = Utf8               (Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n-  #939 = Utf8               addLast\n-  #940 = Utf8               (Ljava/lang/Object;)J\n-  #941 = Utf8               applyAsLong\n-  #942 = Utf8               ()Ljava/util/function/ToLongFunction;\n-  #943 = Utf8               java/util/Comparator\n-  #944 = Utf8               comparingLong\n-  #945 = Utf8               (Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-  #946 = Utf8               thenComparingLong\n-  #947 = Class              #951          // java/lang/invoke/LambdaMetafactory\n-  #948 = NameAndType        #952:#955     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #949 = NameAndType        #454:#443     // lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #950 = NameAndType        #455:#456     // lambda$fillNameMap$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n-  #951 = Utf8               java/lang/invoke/LambdaMetafactory\n-  #952 = Utf8               metafactory\n-  #953 = Class              #957          // java/lang/invoke/MethodHandles$Lookup\n-  #954 = Utf8               Lookup\n-  #955 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #956 = Class              #958          // java/lang/invoke/MethodHandles\n-  #957 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #958 = Utf8               java/lang/invoke/MethodHandles\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/ZipConstants\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+    #3 = Class              #4            // org/apache/commons/compress/archivers/zip/ZipFile\n+    #4 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n+    #5 = Fieldref           #3.#6         // org/apache/commons/compress/archivers/zip/ZipFile.archive:Ljava/nio/channels/SeekableByteChannel;\n+    #6 = NameAndType        #7:#8         // archive:Ljava/nio/channels/SeekableByteChannel;\n+    #7 = Utf8               archive\n+    #8 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n+    #9 = Methodref          #10.#11       // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n+   #10 = Class              #12           // org/apache/commons/compress/utils/IOUtils\n+   #11 = NameAndType        #13:#14       // closeQuietly:(Ljava/io/Closeable;)V\n+   #12 = Utf8               org/apache/commons/compress/utils/IOUtils\n+   #13 = Utf8               closeQuietly\n+   #14 = Utf8               (Ljava/io/Closeable;)V\n+   #15 = Class              #16           // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #16 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #17 = String             #18           // UTF8\n+   #18 = Utf8               UTF8\n+   #19 = Methodref          #3.#20        // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+   #20 = NameAndType        #21:#22       // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+   #21 = Utf8               <init>\n+   #22 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n+   #23 = Methodref          #24.#25       // java/io/File.toPath:()Ljava/nio/file/Path;\n+   #24 = Class              #26           // java/io/File\n+   #25 = NameAndType        #27:#28       // toPath:()Ljava/nio/file/Path;\n+   #26 = Utf8               java/io/File\n+   #27 = Utf8               toPath\n+   #28 = Utf8               ()Ljava/nio/file/Path;\n+   #29 = Methodref          #3.#30        // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n+   #30 = NameAndType        #21:#31       // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n+   #31 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;Z)V\n+   #32 = Methodref          #3.#33        // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n+   #33 = NameAndType        #21:#34       // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n+   #34 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n+   #35 = Fieldref           #36.#37       // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+   #36 = Class              #38           // java/nio/file/StandardOpenOption\n+   #37 = NameAndType        #39:#40       // READ:Ljava/nio/file/StandardOpenOption;\n+   #38 = Utf8               java/nio/file/StandardOpenOption\n+   #39 = Utf8               READ\n+   #40 = Utf8               Ljava/nio/file/StandardOpenOption;\n+   #41 = Methodref          #42.#43       // java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n+   #42 = Class              #44           // java/util/EnumSet\n+   #43 = NameAndType        #45:#46       // of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n+   #44 = Utf8               java/util/EnumSet\n+   #45 = Utf8               of\n+   #46 = Utf8               (Ljava/lang/Enum;)Ljava/util/EnumSet;\n+   #47 = Class              #48           // java/nio/file/attribute/FileAttribute\n+   #48 = Utf8               java/nio/file/attribute/FileAttribute\n+   #49 = Methodref          #50.#51       // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+   #50 = Class              #52           // java/nio/file/Files\n+   #51 = NameAndType        #53:#54       // newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+   #52 = Utf8               java/nio/file/Files\n+   #53 = Utf8               newByteChannel\n+   #54 = Utf8               (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+   #55 = Methodref          #24.#56       // java/io/File.getAbsolutePath:()Ljava/lang/String;\n+   #56 = NameAndType        #57:#58       // getAbsolutePath:()Ljava/lang/String;\n+   #57 = Utf8               getAbsolutePath\n+   #58 = Utf8               ()Ljava/lang/String;\n+   #59 = Methodref          #3.#60        // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n+   #60 = NameAndType        #21:#61       // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n+   #61 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n+   #62 = Methodref          #3.#63        // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n+   #63 = NameAndType        #21:#64       // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n+   #64 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;)V\n+   #65 = InterfaceMethodref #66.#67       // java/nio/file/Path.toAbsolutePath:()Ljava/nio/file/Path;\n+   #66 = Class              #68           // java/nio/file/Path\n+   #67 = NameAndType        #69:#28       // toAbsolutePath:()Ljava/nio/file/Path;\n+   #68 = Utf8               java/nio/file/Path\n+   #69 = Utf8               toAbsolutePath\n+   #70 = InterfaceMethodref #66.#71       // java/nio/file/Path.toString:()Ljava/lang/String;\n+   #71 = NameAndType        #72:#58       // toString:()Ljava/lang/String;\n+   #72 = Utf8               toString\n+   #73 = String             #74           // unknown archive\n+   #74 = Utf8               unknown archive\n+   #75 = Methodref          #3.#76        // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n+   #76 = NameAndType        #21:#77       // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n+   #77 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n+   #78 = Methodref          #79.#80       // java/lang/Object.\"<init>\":()V\n+   #79 = Class              #81           // java/lang/Object\n+   #80 = NameAndType        #21:#82       // \"<init>\":()V\n+   #81 = Utf8               java/lang/Object\n+   #82 = Utf8               ()V\n+   #83 = Class              #84           // java/util/LinkedList\n+   #84 = Utf8               java/util/LinkedList\n+   #85 = Methodref          #83.#80       // java/util/LinkedList.\"<init>\":()V\n+   #86 = Fieldref           #3.#87        // org/apache/commons/compress/archivers/zip/ZipFile.entries:Ljava/util/List;\n+   #87 = NameAndType        #88:#89       // entries:Ljava/util/List;\n+   #88 = Utf8               entries\n+   #89 = Utf8               Ljava/util/List;\n+   #90 = Class              #91           // java/util/HashMap\n+   #91 = Utf8               java/util/HashMap\n+   #92 = Methodref          #90.#93       // java/util/HashMap.\"<init>\":(I)V\n+   #93 = NameAndType        #21:#94       // \"<init>\":(I)V\n+   #94 = Utf8               (I)V\n+   #95 = Fieldref           #3.#96        // org/apache/commons/compress/archivers/zip/ZipFile.nameMap:Ljava/util/Map;\n+   #96 = NameAndType        #97:#98       // nameMap:Ljava/util/Map;\n+   #97 = Utf8               nameMap\n+   #98 = Utf8               Ljava/util/Map;\n+   #99 = Fieldref           #3.#100       // org/apache/commons/compress/archivers/zip/ZipFile.closed:Z\n+  #100 = NameAndType        #101:#102     // closed:Z\n+  #101 = Utf8               closed\n+  #102 = Utf8               Z\n+  #103 = Fieldref           #3.#104       // org/apache/commons/compress/archivers/zip/ZipFile.dwordBuf:[B\n+  #104 = NameAndType        #105:#106     // dwordBuf:[B\n+  #105 = Utf8               dwordBuf\n+  #106 = Utf8               [B\n+  #107 = Fieldref           #3.#108       // org/apache/commons/compress/archivers/zip/ZipFile.wordBuf:[B\n+  #108 = NameAndType        #109:#106     // wordBuf:[B\n+  #109 = Utf8               wordBuf\n+  #110 = Fieldref           #3.#111       // org/apache/commons/compress/archivers/zip/ZipFile.cfhBuf:[B\n+  #111 = NameAndType        #112:#106     // cfhBuf:[B\n+  #112 = Utf8               cfhBuf\n+  #113 = Fieldref           #3.#114       // org/apache/commons/compress/archivers/zip/ZipFile.shortBuf:[B\n+  #114 = NameAndType        #115:#106     // shortBuf:[B\n+  #115 = Utf8               shortBuf\n+  #116 = Methodref          #117.#118     // java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n+  #117 = Class              #119          // java/nio/ByteBuffer\n+  #118 = NameAndType        #120:#121     // wrap:([B)Ljava/nio/ByteBuffer;\n+  #119 = Utf8               java/nio/ByteBuffer\n+  #120 = Utf8               wrap\n+  #121 = Utf8               ([B)Ljava/nio/ByteBuffer;\n+  #122 = Fieldref           #3.#123       // org/apache/commons/compress/archivers/zip/ZipFile.dwordBbuf:Ljava/nio/ByteBuffer;\n+  #123 = NameAndType        #124:#125     // dwordBbuf:Ljava/nio/ByteBuffer;\n+  #124 = Utf8               dwordBbuf\n+  #125 = Utf8               Ljava/nio/ByteBuffer;\n+  #126 = Fieldref           #3.#127       // org/apache/commons/compress/archivers/zip/ZipFile.wordBbuf:Ljava/nio/ByteBuffer;\n+  #127 = NameAndType        #128:#125     // wordBbuf:Ljava/nio/ByteBuffer;\n+  #128 = Utf8               wordBbuf\n+  #129 = Fieldref           #3.#130       // org/apache/commons/compress/archivers/zip/ZipFile.cfhBbuf:Ljava/nio/ByteBuffer;\n+  #130 = NameAndType        #131:#125     // cfhBbuf:Ljava/nio/ByteBuffer;\n+  #131 = Utf8               cfhBbuf\n+  #132 = Fieldref           #3.#133       // org/apache/commons/compress/archivers/zip/ZipFile.shortBbuf:Ljava/nio/ByteBuffer;\n+  #133 = NameAndType        #134:#125     // shortBbuf:Ljava/nio/ByteBuffer;\n+  #134 = Utf8               shortBbuf\n+  #135 = Class              #136          // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+  #136 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+  #137 = Fieldref           #3.#138       // org/apache/commons/compress/archivers/zip/ZipFile.isSplitZipArchive:Z\n+  #138 = NameAndType        #139:#102     // isSplitZipArchive:Z\n+  #139 = Utf8               isSplitZipArchive\n+  #140 = Fieldref           #3.#141       // org/apache/commons/compress/archivers/zip/ZipFile.archiveName:Ljava/lang/String;\n+  #141 = NameAndType        #142:#143     // archiveName:Ljava/lang/String;\n+  #142 = Utf8               archiveName\n+  #143 = Utf8               Ljava/lang/String;\n+  #144 = Fieldref           #3.#145       // org/apache/commons/compress/archivers/zip/ZipFile.encoding:Ljava/lang/String;\n+  #145 = NameAndType        #146:#143     // encoding:Ljava/lang/String;\n+  #146 = Utf8               encoding\n+  #147 = Methodref          #15.#148      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #148 = NameAndType        #149:#150     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #149 = Utf8               getZipEncoding\n+  #150 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #151 = Fieldref           #3.#152       // org/apache/commons/compress/archivers/zip/ZipFile.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #152 = NameAndType        #153:#154     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #153 = Utf8               zipEncoding\n+  #154 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #155 = Fieldref           #3.#156       // org/apache/commons/compress/archivers/zip/ZipFile.useUnicodeExtraFields:Z\n+  #156 = NameAndType        #157:#102     // useUnicodeExtraFields:Z\n+  #157 = Utf8               useUnicodeExtraFields\n+  #158 = Methodref          #3.#159       // org/apache/commons/compress/archivers/zip/ZipFile.populateFromCentralDirectory:()Ljava/util/Map;\n+  #159 = NameAndType        #160:#161     // populateFromCentralDirectory:()Ljava/util/Map;\n+  #160 = Utf8               populateFromCentralDirectory\n+  #161 = Utf8               ()Ljava/util/Map;\n+  #162 = Methodref          #3.#163       // org/apache/commons/compress/archivers/zip/ZipFile.resolveLocalFileHeaderData:(Ljava/util/Map;)V\n+  #163 = NameAndType        #164:#165     // resolveLocalFileHeaderData:(Ljava/util/Map;)V\n+  #164 = Utf8               resolveLocalFileHeaderData\n+  #165 = Utf8               (Ljava/util/Map;)V\n+  #166 = Methodref          #3.#167       // org/apache/commons/compress/archivers/zip/ZipFile.fillNameMap:()V\n+  #167 = NameAndType        #168:#82      // fillNameMap:()V\n+  #168 = Utf8               fillNameMap\n+  #169 = Class              #170          // java/io/IOException\n+  #170 = Utf8               java/io/IOException\n+  #171 = Class              #172          // java/lang/StringBuilder\n+  #172 = Utf8               java/lang/StringBuilder\n+  #173 = Methodref          #171.#80      // java/lang/StringBuilder.\"<init>\":()V\n+  #174 = String             #175          // Error on ZipFile\n+  #175 = Utf8               Error on ZipFile\n+  #176 = Methodref          #171.#177     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #177 = NameAndType        #178:#179     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #178 = Utf8               append\n+  #179 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #180 = Methodref          #171.#71      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #181 = Methodref          #169.#182     // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #182 = NameAndType        #21:#183      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #183 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #184 = Methodref          #24.#185      // java/io/File.\"<init>\":(Ljava/lang/String;)V\n+  #185 = NameAndType        #21:#186      // \"<init>\":(Ljava/lang/String;)V\n+  #186 = Utf8               (Ljava/lang/String;)V\n+  #187 = Methodref          #188.#189     // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #188 = Class              #190          // org/apache/commons/compress/archivers/zip/ZipUtil\n+  #189 = NameAndType        #191:#192     // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #190 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+  #191 = Utf8               canHandleEntryData\n+  #192 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #193 = InterfaceMethodref #194.#195     // java/nio/channels/SeekableByteChannel.close:()V\n+  #194 = Class              #196          // java/nio/channels/SeekableByteChannel\n+  #195 = NameAndType        #197:#82      // close:()V\n+  #196 = Utf8               java/nio/channels/SeekableByteChannel\n+  #197 = Utf8               close\n+  #198 = Methodref          #3.#199       // org/apache/commons/compress/archivers/zip/ZipFile.getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n+  #199 = NameAndType        #200:#201     // getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n+  #200 = Utf8               getEntriesInPhysicalOrder\n+  #201 = Utf8               ()Ljava/util/Enumeration;\n+  #202 = InterfaceMethodref #203.#204     // java/util/Enumeration.hasMoreElements:()Z\n+  #203 = Class              #205          // java/util/Enumeration\n+  #204 = NameAndType        #206:#207     // hasMoreElements:()Z\n+  #205 = Utf8               java/util/Enumeration\n+  #206 = Utf8               hasMoreElements\n+  #207 = Utf8               ()Z\n+  #208 = InterfaceMethodref #203.#209     // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n+  #209 = NameAndType        #210:#211     // nextElement:()Ljava/lang/Object;\n+  #210 = Utf8               nextElement\n+  #211 = Utf8               ()Ljava/lang/Object;\n+  #212 = Class              #213          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #213 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #214 = InterfaceMethodref #215.#216     // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate.test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #215 = Class              #217          // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n+  #216 = NameAndType        #218:#192     // test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #217 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n+  #218 = Utf8               test\n+  #219 = Methodref          #3.#220       // org/apache/commons/compress/archivers/zip/ZipFile.getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+  #220 = NameAndType        #221:#222     // getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+  #221 = Utf8               getRawInputStream\n+  #222 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+  #223 = Methodref          #224.#225     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+  #224 = Class              #226          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+  #225 = NameAndType        #227:#228     // addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+  #226 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+  #227 = Utf8               addRawArchiveEntry\n+  #228 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+  #229 = Class              #230          // java/lang/IllegalArgumentException\n+  #230 = Utf8               java/lang/IllegalArgumentException\n+  #231 = String             #232          // Corrupted archive, stream boundaries are out of range\n+  #232 = Utf8               Corrupted archive, stream boundaries are out of range\n+  #233 = Methodref          #229.#185     // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+  #234 = Class              #235          // java/nio/channels/FileChannel\n+  #235 = Utf8               java/nio/channels/FileChannel\n+  #236 = Class              #237          // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n+  #237 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n+  #238 = Methodref          #236.#239     // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+  #239 = NameAndType        #21:#240      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+  #240 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+  #241 = Class              #242          // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n+  #242 = Utf8               org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n+  #243 = Methodref          #241.#244     // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n+  #244 = NameAndType        #21:#245      // \"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n+  #245 = Utf8               (JJLjava/nio/channels/SeekableByteChannel;)V\n+  #246 = InvokeDynamic      #0:#247       // #0:accept:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n+  #247 = NameAndType        #248:#249     // accept:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n+  #248 = Utf8               accept\n+  #249 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n+  #250 = InterfaceMethodref #251.#252     // java/util/List.forEach:(Ljava/util/function/Consumer;)V\n+  #251 = Class              #253          // java/util/List\n+  #252 = NameAndType        #254:#255     // forEach:(Ljava/util/function/Consumer;)V\n+  #253 = Utf8               java/util/List\n+  #254 = Utf8               forEach\n+  #255 = Utf8               (Ljava/util/function/Consumer;)V\n+  #256 = Methodref          #3.#195       // org/apache/commons/compress/archivers/zip/ZipFile.close:()V\n+  #257 = Methodref          #79.#258      // java/lang/Object.finalize:()V\n+  #258 = NameAndType        #259:#82      // finalize:()V\n+  #259 = Utf8               finalize\n+  #260 = Fieldref           #3.#261       // org/apache/commons/compress/archivers/zip/ZipFile.firstLocalFileHeaderOffset:J\n+  #261 = NameAndType        #262:#263     // firstLocalFileHeaderOffset:J\n+  #262 = Utf8               firstLocalFileHeaderOffset\n+  #263 = Utf8               J\n+  #264 = Methodref          #3.#265       // org/apache/commons/compress/archivers/zip/ZipFile.createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n+  #265 = NameAndType        #266:#267     // createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n+  #266 = Utf8               createBoundedInputStream\n+  #267 = Utf8               (JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n+  #268 = Methodref          #212.#269     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n+  #269 = NameAndType        #270:#271     // getDataOffset:()J\n+  #270 = Utf8               getDataOffset\n+  #271 = Utf8               ()J\n+  #272 = Class              #273          // org/apache/commons/compress/archivers/EntryStreamOffsets\n+  #273 = Utf8               org/apache/commons/compress/archivers/EntryStreamOffsets\n+  #274 = Long               -1l\n+  #276 = Methodref          #3.#277       // org/apache/commons/compress/archivers/zip/ZipFile.setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n+  #277 = NameAndType        #278:#279     // setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n+  #278 = Utf8               setDataOffset\n+  #279 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n+  #280 = Methodref          #281.#282     // java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n+  #281 = Class              #283          // java/util/Collections\n+  #282 = NameAndType        #284:#285     // enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n+  #283 = Utf8               java/util/Collections\n+  #284 = Utf8               enumeration\n+  #285 = Utf8               (Ljava/util/Collection;)Ljava/util/Enumeration;\n+  #286 = InterfaceMethodref #287.#288     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #287 = Class              #289          // java/util/Map\n+  #288 = NameAndType        #290:#291     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #289 = Utf8               java/util/Map\n+  #290 = Utf8               get\n+  #291 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #292 = Methodref          #281.#293     // java/util/Collections.emptyList:()Ljava/util/List;\n+  #293 = NameAndType        #294:#295     // emptyList:()Ljava/util/List;\n+  #294 = Utf8               emptyList\n+  #295 = Utf8               ()Ljava/util/List;\n+  #296 = Fieldref           #212.#297     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.EMPTY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #297 = NameAndType        #298:#299     // EMPTY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #298 = Utf8               EMPTY_ARRAY\n+  #299 = Utf8               [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #300 = InterfaceMethodref #251.#301     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #301 = NameAndType        #302:#303     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #302 = Utf8               toArray\n+  #303 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #304 = Class              #299          // \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\"\n+  #305 = Fieldref           #3.#306       // org/apache/commons/compress/archivers/zip/ZipFile.offsetComparator:Ljava/util/Comparator;\n+  #306 = NameAndType        #307:#308     // offsetComparator:Ljava/util/Comparator;\n+  #307 = Utf8               offsetComparator\n+  #308 = Utf8               Ljava/util/Comparator;\n+  #309 = Methodref          #310.#311     // java/util/Arrays.sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n+  #310 = Class              #312          // java/util/Arrays\n+  #311 = NameAndType        #313:#314     // sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n+  #312 = Utf8               java/util/Arrays\n+  #313 = Utf8               sort\n+  #314 = Utf8               ([Ljava/lang/Object;Ljava/util/Comparator;)V\n+  #315 = Methodref          #310.#316     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+  #316 = NameAndType        #317:#318     // asList:([Ljava/lang/Object;)Ljava/util/List;\n+  #317 = Utf8               asList\n+  #318 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n+  #319 = Methodref          #83.#301      // java/util/LinkedList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #320 = Methodref          #83.#321      // java/util/LinkedList.getFirst:()Ljava/lang/Object;\n+  #321 = NameAndType        #322:#211     // getFirst:()Ljava/lang/Object;\n+  #322 = Utf8               getFirst\n+  #323 = Class              #324          // org/apache/commons/compress/archivers/zip/ZipFile$Entry\n+  #324 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$Entry\n+  #325 = Methodref          #188.#326     // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #326 = NameAndType        #327:#328     // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #327 = Utf8               checkRequestedFeatures\n+  #328 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #329 = Class              #330          // java/io/BufferedInputStream\n+  #330 = Utf8               java/io/BufferedInputStream\n+  #331 = Methodref          #329.#332     // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #332 = NameAndType        #21:#333      // \"<init>\":(Ljava/io/InputStream;)V\n+  #333 = Utf8               (Ljava/io/InputStream;)V\n+  #334 = Fieldref           #335.#336     // org/apache/commons/compress/archivers/zip/ZipFile$2.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+  #335 = Class              #337          // org/apache/commons/compress/archivers/zip/ZipFile$2\n+  #336 = NameAndType        #338:#339     // $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+  #337 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$2\n+  #338 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod\n+  #339 = Utf8               [I\n+  #340 = Methodref          #212.#341     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+  #341 = NameAndType        #342:#343     // getMethod:()I\n+  #342 = Utf8               getMethod\n+  #343 = Utf8               ()I\n+  #344 = Methodref          #345.#346     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #345 = Class              #347          // org/apache/commons/compress/archivers/zip/ZipMethod\n+  #346 = NameAndType        #348:#349     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #347 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n+  #348 = Utf8               getMethodByCode\n+  #349 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #350 = Methodref          #345.#351     // org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n+  #351 = NameAndType        #352:#343     // ordinal:()I\n+  #352 = Utf8               ordinal\n+  #353 = Class              #354          // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n+  #354 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n+  #355 = Methodref          #353.#332     // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #356 = Class              #357          // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+  #357 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+  #358 = Methodref          #356.#332     // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #359 = Class              #360          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+  #360 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+  #361 = Methodref          #212.#362     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #362 = NameAndType        #363:#364     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #363 = Utf8               getGeneralPurposeBit\n+  #364 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #365 = Methodref          #366.#367     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n+  #366 = Class              #368          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #367 = NameAndType        #369:#343     // getSlidingDictionarySize:()I\n+  #368 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #369 = Utf8               getSlidingDictionarySize\n+  #370 = Methodref          #366.#371     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n+  #371 = NameAndType        #372:#343     // getNumberOfShannonFanoTrees:()I\n+  #372 = Utf8               getNumberOfShannonFanoTrees\n+  #373 = Methodref          #359.#374     // org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n+  #374 = NameAndType        #21:#375      // \"<init>\":(IILjava/io/InputStream;)V\n+  #375 = Utf8               (IILjava/io/InputStream;)V\n+  #376 = String             #377          // bad IMPLODE data\n+  #377 = Utf8               bad IMPLODE data\n+  #378 = Class              #379          // java/util/zip/Inflater\n+  #379 = Utf8               java/util/zip/Inflater\n+  #380 = Methodref          #378.#381     // java/util/zip/Inflater.\"<init>\":(Z)V\n+  #381 = NameAndType        #21:#382      // \"<init>\":(Z)V\n+  #382 = Utf8               (Z)V\n+  #383 = Class              #384          // org/apache/commons/compress/archivers/zip/ZipFile$1\n+  #384 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$1\n+  #385 = Class              #386          // java/io/SequenceInputStream\n+  #386 = Utf8               java/io/SequenceInputStream\n+  #387 = Class              #388          // java/io/ByteArrayInputStream\n+  #388 = Utf8               java/io/ByteArrayInputStream\n+  #389 = Fieldref           #3.#390       // org/apache/commons/compress/archivers/zip/ZipFile.ONE_ZERO_BYTE:[B\n+  #390 = NameAndType        #391:#106     // ONE_ZERO_BYTE:[B\n+  #391 = Utf8               ONE_ZERO_BYTE\n+  #392 = Methodref          #387.#393     // java/io/ByteArrayInputStream.\"<init>\":([B)V\n+  #393 = NameAndType        #21:#394      // \"<init>\":([B)V\n+  #394 = Utf8               ([B)V\n+  #395 = Methodref          #385.#396     // java/io/SequenceInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n+  #396 = NameAndType        #21:#397      // \"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n+  #397 = Utf8               (Ljava/io/InputStream;Ljava/io/InputStream;)V\n+  #398 = Methodref          #383.#399     // org/apache/commons/compress/archivers/zip/ZipFile$1.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n+  #399 = NameAndType        #21:#400      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n+  #400 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n+  #401 = Class              #402          // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+  #402 = Utf8               org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+  #403 = Methodref          #401.#332     // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #404 = Class              #405          // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+  #405 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+  #406 = Methodref          #404.#332     // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #407 = Class              #408          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  #408 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  #409 = Methodref          #407.#410     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #410 = NameAndType        #21:#411      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #411 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #412 = Methodref          #3.#413       // org/apache/commons/compress/archivers/zip/ZipFile.getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+  #413 = NameAndType        #270:#414     // getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+  #414 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+  #415 = Methodref          #212.#416     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+  #416 = NameAndType        #417:#271     // getCompressedSize:()J\n+  #417 = Utf8               getCompressedSize\n+  #418 = Methodref          #212.#419     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z\n+  #419 = NameAndType        #420:#207     // isUnixSymlink:()Z\n+  #420 = Utf8               isUnixSymlink\n+  #421 = Methodref          #3.#422       // org/apache/commons/compress/archivers/zip/ZipFile.getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+  #422 = NameAndType        #423:#222     // getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+  #423 = Utf8               getInputStream\n+  #424 = Methodref          #10.#425      // org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n+  #425 = NameAndType        #426:#427     // toByteArray:(Ljava/io/InputStream;)[B\n+  #426 = Utf8               toByteArray\n+  #427 = Utf8               (Ljava/io/InputStream;)[B\n+  #428 = InterfaceMethodref #429.#430     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+  #429 = Class              #431          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #430 = NameAndType        #432:#433     // decode:([B)Ljava/lang/String;\n+  #431 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #432 = Utf8               decode\n+  #433 = Utf8               ([B)Ljava/lang/String;\n+  #434 = Methodref          #435.#195     // java/io/InputStream.close:()V\n+  #435 = Class              #436          // java/io/InputStream\n+  #436 = Utf8               java/io/InputStream\n+  #437 = Class              #438          // java/lang/Throwable\n+  #438 = Utf8               java/lang/Throwable\n+  #439 = Methodref          #437.#440     // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+  #440 = NameAndType        #441:#442     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #441 = Utf8               addSuppressed\n+  #442 = Utf8               (Ljava/lang/Throwable;)V\n+  #443 = Methodref          #90.#80       // java/util/HashMap.\"<init>\":()V\n+  #444 = Methodref          #3.#445       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory:()V\n+  #445 = NameAndType        #446:#82      // positionAtCentralDirectory:()V\n+  #446 = Utf8               positionAtCentralDirectory\n+  #447 = InterfaceMethodref #194.#448     // java/nio/channels/SeekableByteChannel.position:()J\n+  #448 = NameAndType        #449:#271     // position:()J\n+  #449 = Utf8               position\n+  #450 = Fieldref           #3.#451       // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartOffset:J\n+  #451 = NameAndType        #452:#263     // centralDirectoryStartOffset:J\n+  #452 = Utf8               centralDirectoryStartOffset\n+  #453 = Methodref          #117.#454     // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+  #454 = NameAndType        #455:#456     // rewind:()Ljava/nio/Buffer;\n+  #455 = Utf8               rewind\n+  #456 = Utf8               ()Ljava/nio/Buffer;\n+  #457 = Methodref          #10.#458      // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+  #458 = NameAndType        #459:#460     // readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+  #459 = Utf8               readFully\n+  #460 = Utf8               (Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+  #461 = Methodref          #462.#463     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+  #462 = Class              #464          // org/apache/commons/compress/archivers/zip/ZipLong\n+  #463 = NameAndType        #465:#466     // getValue:([B)J\n+  #464 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+  #465 = Utf8               getValue\n+  #466 = Utf8               ([B)J\n+  #467 = Fieldref           #3.#468       // org/apache/commons/compress/archivers/zip/ZipFile.CFH_SIG:J\n+  #468 = NameAndType        #469:#263     // CFH_SIG:J\n+  #469 = Utf8               CFH_SIG\n+  #470 = Methodref          #3.#471       // org/apache/commons/compress/archivers/zip/ZipFile.startsWithLocalFileHeader:()Z\n+  #471 = NameAndType        #472:#207     // startsWithLocalFileHeader:()Z\n+  #472 = Utf8               startsWithLocalFileHeader\n+  #473 = String             #474          // Central directory is empty, can\\'t expand corrupt archive.\n+  #474 = Utf8               Central directory is empty, can\\'t expand corrupt archive.\n+  #475 = Methodref          #169.#185     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #476 = Methodref          #3.#477       // org/apache/commons/compress/archivers/zip/ZipFile.readCentralDirectoryEntry:(Ljava/util/Map;)V\n+  #477 = NameAndType        #478:#165     // readCentralDirectoryEntry:(Ljava/util/Map;)V\n+  #478 = Utf8               readCentralDirectoryEntry\n+  #479 = Methodref          #3.#480       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtEndOfCentralDirectoryRecord:()V\n+  #480 = NameAndType        #481:#82      // positionAtEndOfCentralDirectoryRecord:()V\n+  #481 = Utf8               positionAtEndOfCentralDirectoryRecord\n+  #482 = Long               20l\n+  #484 = InterfaceMethodref #194.#485     // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #485 = NameAndType        #449:#486     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #486 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+  #487 = Fieldref           #224.#488     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n+  #488 = NameAndType        #489:#106     // ZIP64_EOCD_LOC_SIG:[B\n+  #489 = Utf8               ZIP64_EOCD_LOC_SIG\n+  #490 = Methodref          #310.#491     // java/util/Arrays.equals:([B[B)Z\n+  #491 = NameAndType        #492:#493     // equals:([B[B)Z\n+  #492 = Utf8               equals\n+  #493 = Utf8               ([B[B)Z\n+  #494 = Methodref          #3.#495       // org/apache/commons/compress/archivers/zip/ZipFile.skipBytes:(I)V\n+  #495 = NameAndType        #496:#94      // skipBytes:(I)V\n+  #496 = Utf8               skipBytes\n+  #497 = Methodref          #3.#498       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory32:()V\n+  #498 = NameAndType        #499:#82      // positionAtCentralDirectory32:()V\n+  #499 = Utf8               positionAtCentralDirectory32\n+  #500 = Methodref          #3.#501       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory64:()V\n+  #501 = NameAndType        #502:#82      // positionAtCentralDirectory64:()V\n+  #502 = Utf8               positionAtCentralDirectory64\n+  #503 = Methodref          #504.#505     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+  #504 = Class              #506          // org/apache/commons/compress/archivers/zip/ZipShort\n+  #505 = NameAndType        #465:#507     // getValue:([B)I\n+  #506 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+  #507 = Utf8               ([B)I\n+  #508 = Fieldref           #3.#509       // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartDiskNumber:J\n+  #509 = NameAndType        #510:#263     // centralDirectoryStartDiskNumber:J\n+  #510 = Utf8               centralDirectoryStartDiskNumber\n+  #511 = Fieldref           #3.#512       // org/apache/commons/compress/archivers/zip/ZipFile.centralDirectoryStartRelativeOffset:J\n+  #512 = NameAndType        #513:#263     // centralDirectoryStartRelativeOffset:J\n+  #513 = Utf8               centralDirectoryStartRelativeOffset\n+  #514 = Methodref          #135.#515     // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+  #515 = NameAndType        #449:#516     // position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+  #516 = Utf8               (JJ)Ljava/nio/channels/SeekableByteChannel;\n+  #517 = Methodref          #518.#519     // java/lang/Long.max:(JJ)J\n+  #518 = Class              #520          // java/lang/Long\n+  #519 = NameAndType        #521:#522     // max:(JJ)J\n+  #520 = Utf8               java/lang/Long\n+  #521 = Utf8               max\n+  #522 = Utf8               (JJ)J\n+  #523 = Methodref          #524.#525     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+  #524 = Class              #526          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #525 = NameAndType        #527:#466     // getLongValue:([B)J\n+  #526 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #527 = Utf8               getLongValue\n+  #528 = Fieldref           #224.#529     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n+  #529 = NameAndType        #530:#106     // ZIP64_EOCD_SIG:[B\n+  #530 = Utf8               ZIP64_EOCD_SIG\n+  #531 = Class              #532          // java/util/zip/ZipException\n+  #532 = Utf8               java/util/zip/ZipException\n+  #533 = String             #534          // Archive\\'s ZIP64 end of central directory locator is corrupt.\n+  #534 = Utf8               Archive\\'s ZIP64 end of central directory locator is corrupt.\n+  #535 = Methodref          #531.#185     // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+  #536 = Long               22l\n+  #538 = Long               65557l\n+  #540 = Fieldref           #224.#541     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+  #541 = NameAndType        #542:#106     // EOCD_SIG:[B\n+  #542 = Utf8               EOCD_SIG\n+  #543 = Methodref          #3.#544       // org/apache/commons/compress/archivers/zip/ZipFile.tryToLocateSignature:(JJ[B)Z\n+  #544 = NameAndType        #545:#546     // tryToLocateSignature:(JJ[B)Z\n+  #545 = Utf8               tryToLocateSignature\n+  #546 = Utf8               (JJ[B)Z\n+  #547 = String             #548          // Archive is not a ZIP archive\n+  #548 = Utf8               Archive is not a ZIP archive\n+  #549 = Methodref          #323.#80      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.\"<init>\":()V\n+  #550 = Methodref          #504.#551     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+  #551 = NameAndType        #465:#552     // getValue:([BI)I\n+  #552 = Utf8               ([BI)I\n+  #553 = Methodref          #323.#554     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V\n+  #554 = NameAndType        #555:#94      // setVersionMadeBy:(I)V\n+  #555 = Utf8               setVersionMadeBy\n+  #556 = Methodref          #323.#557     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V\n+  #557 = NameAndType        #558:#94      // setPlatform:(I)V\n+  #558 = Utf8               setPlatform\n+  #559 = Methodref          #323.#560     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V\n+  #560 = NameAndType        #561:#94      // setVersionRequired:(I)V\n+  #561 = Utf8               setVersionRequired\n+  #562 = Methodref          #366.#563     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #563 = NameAndType        #564:#565     // parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #564 = Utf8               parse\n+  #565 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #566 = Methodref          #366.#567     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n+  #567 = NameAndType        #568:#207     // usesUTF8ForNames:()Z\n+  #568 = Utf8               usesUTF8ForNames\n+  #569 = Fieldref           #15.#570      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #570 = NameAndType        #571:#154     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #571 = Utf8               UTF8_ZIP_ENCODING\n+  #572 = Fieldref           #573.#574     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #573 = Class              #575          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #574 = NameAndType        #576:#577     // NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #575 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #576 = Utf8               NAME_WITH_EFS_FLAG\n+  #577 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #578 = Methodref          #323.#579     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #579 = NameAndType        #580:#581     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #580 = Utf8               setNameSource\n+  #581 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #582 = Methodref          #323.#583     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+  #583 = NameAndType        #584:#585     // setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+  #584 = Utf8               setGeneralPurposeBit\n+  #585 = Utf8               (Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+  #586 = Methodref          #323.#587     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V\n+  #587 = NameAndType        #588:#94      // setRawFlag:(I)V\n+  #588 = Utf8               setRawFlag\n+  #589 = Methodref          #323.#590     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V\n+  #590 = NameAndType        #591:#94      // setMethod:(I)V\n+  #591 = Utf8               setMethod\n+  #592 = Methodref          #462.#593     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+  #593 = NameAndType        #465:#594     // getValue:([BI)J\n+  #594 = Utf8               ([BI)J\n+  #595 = Methodref          #188.#596     // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n+  #596 = NameAndType        #597:#598     // dosToJavaTime:(J)J\n+  #597 = Utf8               dosToJavaTime\n+  #598 = Utf8               (J)J\n+  #599 = Methodref          #323.#600     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V\n+  #600 = NameAndType        #601:#602     // setTime:(J)V\n+  #601 = Utf8               setTime\n+  #602 = Utf8               (J)V\n+  #603 = Methodref          #323.#604     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V\n+  #604 = NameAndType        #605:#602     // setCrc:(J)V\n+  #605 = Utf8               setCrc\n+  #606 = String             #607          // broken archive, entry with negative compressed size\n+  #607 = Utf8               broken archive, entry with negative compressed size\n+  #608 = Methodref          #323.#609     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V\n+  #609 = NameAndType        #610:#602     // setCompressedSize:(J)V\n+  #610 = Utf8               setCompressedSize\n+  #611 = String             #612          // broken archive, entry with negative size\n+  #612 = Utf8               broken archive, entry with negative size\n+  #613 = Methodref          #323.#614     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V\n+  #614 = NameAndType        #615:#602     // setSize:(J)V\n+  #615 = Utf8               setSize\n+  #616 = String             #617          // broken archive, entry with negative fileNameLen\n+  #617 = Utf8               broken archive, entry with negative fileNameLen\n+  #618 = String             #619          // broken archive, entry with negative extraLen\n+  #619 = Utf8               broken archive, entry with negative extraLen\n+  #620 = String             #621          // broken archive, entry with negative commentLen\n+  #621 = Utf8               broken archive, entry with negative commentLen\n+  #622 = Methodref          #323.#623     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDiskNumberStart:(J)V\n+  #623 = NameAndType        #624:#602     // setDiskNumberStart:(J)V\n+  #624 = Utf8               setDiskNumberStart\n+  #625 = Methodref          #323.#626     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V\n+  #626 = NameAndType        #627:#94      // setInternalAttributes:(I)V\n+  #627 = Utf8               setInternalAttributes\n+  #628 = Methodref          #323.#629     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V\n+  #629 = NameAndType        #630:#602     // setExternalAttributes:(J)V\n+  #630 = Utf8               setExternalAttributes\n+  #631 = Methodref          #10.#632      // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n+  #632 = NameAndType        #633:#634     // readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n+  #633 = Utf8               readRange\n+  #634 = Utf8               (Ljava/nio/channels/ReadableByteChannel;I)[B\n+  #635 = Class              #636          // java/io/EOFException\n+  #636 = Utf8               java/io/EOFException\n+  #637 = Methodref          #635.#80      // java/io/EOFException.\"<init>\":()V\n+  #638 = Methodref          #323.#639     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V\n+  #639 = NameAndType        #640:#641     // setName:(Ljava/lang/String;[B)V\n+  #640 = Utf8               setName\n+  #641 = Utf8               (Ljava/lang/String;[B)V\n+  #642 = Methodref          #323.#643     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V\n+  #643 = NameAndType        #644:#602     // setLocalHeaderOffset:(J)V\n+  #644 = Utf8               setLocalHeaderOffset\n+  #645 = InterfaceMethodref #251.#646     // java/util/List.add:(Ljava/lang/Object;)Z\n+  #646 = NameAndType        #647:#648     // add:(Ljava/lang/Object;)Z\n+  #647 = Utf8               add\n+  #648 = Utf8               (Ljava/lang/Object;)Z\n+  #649 = Methodref          #323.#650     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V\n+  #650 = NameAndType        #651:#394     // setCentralDirectoryExtra:([B)V\n+  #651 = Utf8               setCentralDirectoryExtra\n+  #652 = Class              #653          // java/lang/RuntimeException\n+  #653 = Utf8               java/lang/RuntimeException\n+  #654 = String             #655          // Invalid extra data in entry\n+  #655 = Utf8               Invalid extra data in entry\n+  #656 = Methodref          #323.#657     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.getName:()Ljava/lang/String;\n+  #657 = NameAndType        #658:#58      // getName:()Ljava/lang/String;\n+  #658 = Utf8               getName\n+  #659 = Methodref          #531.#660     // java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+  #660 = NameAndType        #661:#662     // initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+  #661 = Utf8               initCause\n+  #662 = Utf8               (Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+  #663 = Methodref          #3.#664       // org/apache/commons/compress/archivers/zip/ZipFile.setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #664 = NameAndType        #665:#328     // setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #665 = Utf8               setSizesAndOffsetFromZip64Extra\n+  #666 = Methodref          #3.#667       // org/apache/commons/compress/archivers/zip/ZipFile.sanityCheckLFHOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #667 = NameAndType        #668:#328     // sanityCheckLFHOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #668 = Utf8               sanityCheckLFHOffset\n+  #669 = Methodref          #323.#670     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V\n+  #670 = NameAndType        #671:#186     // setComment:(Ljava/lang/String;)V\n+  #671 = Utf8               setComment\n+  #672 = Class              #673          // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n+  #673 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n+  #674 = Methodref          #672.#675     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.\"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+  #675 = NameAndType        #21:#676      // \"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+  #676 = Utf8               ([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+  #677 = InterfaceMethodref #287.#678     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #678 = NameAndType        #679:#680     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #679 = Utf8               put\n+  #680 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #681 = Methodref          #323.#682     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V\n+  #682 = NameAndType        #683:#382     // setStreamContiguous:(Z)V\n+  #683 = Utf8               setStreamContiguous\n+  #684 = InterfaceMethodref #251.#685     // java/util/List.iterator:()Ljava/util/Iterator;\n+  #685 = NameAndType        #686:#687     // iterator:()Ljava/util/Iterator;\n+  #686 = Utf8               iterator\n+  #687 = Utf8               ()Ljava/util/Iterator;\n+  #688 = InterfaceMethodref #689.#690     // java/util/Iterator.hasNext:()Z\n+  #689 = Class              #691          // java/util/Iterator\n+  #690 = NameAndType        #692:#207     // hasNext:()Z\n+  #691 = Utf8               java/util/Iterator\n+  #692 = Utf8               hasNext\n+  #693 = InterfaceMethodref #689.#694     // java/util/Iterator.next:()Ljava/lang/Object;\n+  #694 = NameAndType        #695:#211     // next:()Ljava/lang/Object;\n+  #695 = Utf8               next\n+  #696 = Methodref          #323.#697     // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V\n+  #697 = NameAndType        #698:#394     // setExtra:([B)V\n+  #698 = Utf8               setExtra\n+  #699 = InterfaceMethodref #287.#700     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+  #700 = NameAndType        #701:#648     // containsKey:(Ljava/lang/Object;)Z\n+  #701 = Utf8               containsKey\n+  #702 = Methodref          #672.#703     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #703 = NameAndType        #704:#705     // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #704 = Utf8               access$200\n+  #705 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #706 = Methodref          #672.#707     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #707 = NameAndType        #708:#705     // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #708 = Utf8               access$300\n+  #709 = Methodref          #188.#710     // org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #710 = NameAndType        #711:#712     // setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #711 = Utf8               setNameAndCommentFromExtraFields\n+  #712 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #713 = Methodref          #212.#714     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+  #714 = NameAndType        #715:#271     // getDiskNumberStart:()J\n+  #715 = Utf8               getDiskNumberStart\n+  #716 = String             #717          // broken archive, entry with negative disk number\n+  #717 = Utf8               broken archive, entry with negative disk number\n+  #718 = Methodref          #212.#719     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+  #719 = NameAndType        #720:#271     // getLocalHeaderOffset:()J\n+  #720 = Utf8               getLocalHeaderOffset\n+  #721 = String             #722          // broken archive, entry with negative local file header offset\n+  #722 = Utf8               broken archive, entry with negative local file header offset\n+  #723 = String             #724          // local file header for\n+  #724 = Utf8               local file header for\n+  #725 = Methodref          #212.#657     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+  #726 = String             #727          //  starts on a later disk than central directory\n+  #727 = Utf8                starts on a later disk than central directory\n+  #728 = String             #729          //  starts after central directory\n+  #729 = Utf8                starts after central directory\n+  #730 = Long               26l\n+  #732 = Methodref          #117.#733     // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+  #733 = NameAndType        #734:#456     // flip:()Ljava/nio/Buffer;\n+  #734 = Utf8               flip\n+  #735 = Methodref          #117.#736     // java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n+  #736 = NameAndType        #290:#121     // get:([B)Ljava/nio/ByteBuffer;\n+  #737 = Long               2l\n+  #739 = Methodref          #212.#740     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n+  #740 = NameAndType        #278:#602     // setDataOffset:(J)V\n+  #741 = String             #742          // data for\n+  #742 = Utf8               data for\n+  #743 = String             #744          //  overlaps with central directory.\n+  #744 = Utf8                overlaps with central directory.\n+  #745 = Fieldref           #746.#747     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #746 = Class              #748          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+  #747 = NameAndType        #749:#750     // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #748 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+  #749 = Utf8               HEADER_ID\n+  #750 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #751 = Methodref          #212.#752     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #752 = NameAndType        #753:#754     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #753 = Utf8               getExtraField\n+  #754 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #755 = String             #756          // archive contains unparseable zip64 extra field\n+  #756 = Utf8               archive contains unparseable zip64 extra field\n+  #757 = Methodref          #212.#758     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+  #758 = NameAndType        #759:#271     // getSize:()J\n+  #759 = Utf8               getSize\n+  #760 = Long               4294967295l\n+  #762 = Long               65535l\n+  #764 = Methodref          #746.#765     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V\n+  #765 = NameAndType        #766:#767     // reparseCentralDirectoryData:(ZZZZ)V\n+  #766 = Utf8               reparseCentralDirectoryData\n+  #767 = Utf8               (ZZZZ)V\n+  #768 = Methodref          #746.#769     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #769 = NameAndType        #759:#770     // getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #770 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #771 = Methodref          #524.#772     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+  #772 = NameAndType        #527:#271     // getLongValue:()J\n+  #773 = Methodref          #212.#614     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+  #774 = Methodref          #524.#775     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+  #775 = NameAndType        #21:#602      // \"<init>\":(J)V\n+  #776 = Methodref          #746.#777     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #777 = NameAndType        #615:#778     // setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #778 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #779 = Methodref          #746.#780     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #780 = NameAndType        #417:#770     // getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #781 = Methodref          #212.#609     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+  #782 = Methodref          #746.#783     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #783 = NameAndType        #610:#778     // setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #784 = Methodref          #746.#785     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #785 = NameAndType        #786:#770     // getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #786 = Utf8               getRelativeHeaderOffset\n+  #787 = Methodref          #212.#643     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n+  #788 = Methodref          #746.#789     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #789 = NameAndType        #790:#791     // getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #790 = Utf8               getDiskStartNumber\n+  #791 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #792 = Methodref          #462.#793     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+  #793 = NameAndType        #465:#271     // getValue:()J\n+  #794 = Methodref          #212.#623     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDiskNumberStart:(J)V\n+  #795 = InterfaceMethodref #194.#796     // java/nio/channels/SeekableByteChannel.size:()J\n+  #796 = NameAndType        #797:#271     // size:()J\n+  #797 = Utf8               size\n+  #798 = Fieldref           #224.#799     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+  #799 = NameAndType        #800:#106     // LFH_SIG:[B\n+  #800 = Utf8               LFH_SIG\n+  #801 = Methodref          #802.#519     // java/lang/Math.max:(JJ)J\n+  #802 = Class              #803          // java/lang/Math\n+  #803 = Utf8               java/lang/Math\n+  #804 = Methodref          #117.#805     // java/nio/ByteBuffer.get:()B\n+  #805 = NameAndType        #290:#806     // get:()B\n+  #806 = Utf8               ()B\n+  #807 = InvokeDynamic      #1:#808       // #1:apply:()Ljava/util/function/Function;\n+  #808 = NameAndType        #809:#810     // apply:()Ljava/util/function/Function;\n+  #809 = Utf8               apply\n+  #810 = Utf8               ()Ljava/util/function/Function;\n+  #811 = InterfaceMethodref #287.#812     // java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n+  #812 = NameAndType        #813:#814     // computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n+  #813 = Utf8               computeIfAbsent\n+  #814 = Utf8               (Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n+  #815 = Methodref          #83.#816      // java/util/LinkedList.addLast:(Ljava/lang/Object;)V\n+  #816 = NameAndType        #817:#818     // addLast:(Ljava/lang/Object;)V\n+  #817 = Utf8               addLast\n+  #818 = Utf8               (Ljava/lang/Object;)V\n+  #819 = Fieldref           #224.#820     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n+  #820 = NameAndType        #469:#106     // CFH_SIG:[B\n+  #821 = InvokeDynamic      #2:#822       // #2:applyAsLong:()Ljava/util/function/ToLongFunction;\n+  #822 = NameAndType        #823:#824     // applyAsLong:()Ljava/util/function/ToLongFunction;\n+  #823 = Utf8               applyAsLong\n+  #824 = Utf8               ()Ljava/util/function/ToLongFunction;\n+  #825 = InterfaceMethodref #826.#827     // java/util/Comparator.comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+  #826 = Class              #828          // java/util/Comparator\n+  #827 = NameAndType        #829:#830     // comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+  #828 = Utf8               java/util/Comparator\n+  #829 = Utf8               comparingLong\n+  #830 = Utf8               (Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+  #831 = InvokeDynamic      #3:#822       // #3:applyAsLong:()Ljava/util/function/ToLongFunction;\n+  #832 = InterfaceMethodref #826.#833     // java/util/Comparator.thenComparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+  #833 = NameAndType        #834:#830     // thenComparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+  #834 = Utf8               thenComparingLong\n+  #835 = Class              #836          // java/io/Closeable\n+  #836 = Utf8               java/io/Closeable\n+  #837 = Utf8               HASH_SIZE\n+  #838 = Utf8               I\n+  #839 = Utf8               ConstantValue\n+  #840 = Integer            509\n+  #841 = Utf8               NIBLET_MASK\n+  #842 = Integer            15\n+  #843 = Utf8               BYTE_SHIFT\n+  #844 = Integer            8\n+  #845 = Utf8               POS_0\n+  #846 = Integer            0\n+  #847 = Utf8               POS_1\n+  #848 = Integer            1\n+  #849 = Utf8               POS_2\n+  #850 = Integer            2\n+  #851 = Utf8               POS_3\n+  #852 = Integer            3\n+  #853 = Utf8               CFH_LEN\n+  #854 = Integer            42\n+  #855 = Utf8               MIN_EOCD_SIZE\n+  #856 = Integer            22\n+  #857 = Utf8               MAX_EOCD_SIZE\n+  #858 = Integer            65557\n+  #859 = Utf8               CFD_LENGTH_OFFSET\n+  #860 = Integer            12\n+  #861 = Utf8               CFD_DISK_OFFSET\n+  #862 = Integer            6\n+  #863 = Utf8               CFD_LOCATOR_RELATIVE_OFFSET\n+  #864 = Utf8               ZIP64_EOCDL_LENGTH\n+  #865 = Integer            20\n+  #866 = Utf8               ZIP64_EOCDL_LOCATOR_OFFSET\n+  #867 = Utf8               ZIP64_EOCD_CFD_LOCATOR_OFFSET\n+  #868 = Integer            48\n+  #869 = Utf8               ZIP64_EOCD_CFD_DISK_OFFSET\n+  #870 = Utf8               ZIP64_EOCD_CFD_LOCATOR_RELATIVE_OFFSET\n+  #871 = Integer            24\n+  #872 = Utf8               LFH_OFFSET_FOR_FILENAME_LENGTH\n+  #873 = Utf8               Signature\n+  #874 = Utf8               Ljava/util/Comparator<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+  #875 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+  #876 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;>;\n+  #877 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n+  #878 = Utf8               Code\n+  #879 = Utf8               LineNumberTable\n+  #880 = Utf8               (Ljava/io/File;)V\n+  #881 = Utf8               Exceptions\n+  #882 = Utf8               (Ljava/io/File;Ljava/lang/String;Z)V\n+  #883 = Utf8               (Ljava/io/File;Ljava/lang/String;ZZ)V\n+  #884 = Utf8               (Ljava/nio/file/Path;)V\n+  #885 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n+  #886 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;)V\n+  #887 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZ)V\n+  #888 = Utf8               StackMapTable\n+  #889 = Class              #890          // java/lang/String\n+  #890 = Utf8               java/lang/String\n+  #891 = Utf8               (Ljava/lang/String;Ljava/lang/String;)V\n+  #892 = Utf8               canReadEntryData\n+  #893 = Utf8               copyRawEntries\n+  #894 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;)V\n+  #895 = Class              #896          // org/apache/commons/compress/utils/BoundedArchiveInputStream\n+  #896 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n+  #897 = Utf8               getContentBeforeFirstLocalFileHeader\n+  #898 = Utf8               ()Ljava/io/InputStream;\n+  #899 = Utf8               getEncoding\n+  #900 = Utf8               getEntries\n+  #901 = Utf8               ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+  #902 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable;\n+  #903 = Class              #904          // java/lang/Iterable\n+  #904 = Utf8               java/lang/Iterable\n+  #905 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+  #906 = Utf8               getEntry\n+  #907 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #908 = Utf8               getFirstLocalFileHeaderOffset\n+  #909 = Utf8               getUnixSymlink\n+  #910 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n+  #911 = Utf8               ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n+  #912 = Class              #106          // \"[B\"\n+  #913 = Utf8               (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n+  #914 = Class              #339          // \"[I\"\n+  #915 = Class              #916          // org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #916 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #917 = Utf8               lambda$fillNameMap$1\n+  #918 = Utf8               lambda$fillNameMap$0\n+  #919 = Utf8               (Ljava/lang/String;)Ljava/util/LinkedList;\n+  #920 = Utf8               access$000\n+  #921 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n+  #922 = Utf8               <clinit>\n+  #923 = Utf8               SourceFile\n+  #924 = Utf8               ZipFile.java\n+  #925 = Utf8               BootstrapMethods\n+  #926 = MethodHandle       6:#927        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #927 = Methodref          #928.#929     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #928 = Class              #930          // java/lang/invoke/LambdaMetafactory\n+  #929 = NameAndType        #931:#932     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #930 = Utf8               java/lang/invoke/LambdaMetafactory\n+  #931 = Utf8               metafactory\n+  #932 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #933 = MethodType         #818          //  (Ljava/lang/Object;)V\n+  #934 = MethodHandle       7:#935        // REF_invokeSpecial org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #935 = Methodref          #3.#936       // org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #936 = NameAndType        #917:#328     // lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #937 = MethodType         #328          //  (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #938 = MethodType         #291          //  (Ljava/lang/Object;)Ljava/lang/Object;\n+  #939 = MethodHandle       6:#940        // REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n+  #940 = Methodref          #3.#941       // org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n+  #941 = NameAndType        #918:#919     // lambda$fillNameMap$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n+  #942 = MethodType         #919          //  (Ljava/lang/String;)Ljava/util/LinkedList;\n+  #943 = MethodType         #944          //  (Ljava/lang/Object;)J\n+  #944 = Utf8               (Ljava/lang/Object;)J\n+  #945 = MethodHandle       5:#713        // REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+  #946 = MethodType         #414          //  (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+  #947 = MethodHandle       5:#718        // REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+  #948 = Utf8               InnerClasses\n+  #949 = Utf8               BoundedFileChannelInputStream\n+  #950 = Utf8               Entry\n+  #951 = Utf8               StoredStatisticsStream\n+  #952 = Utf8               NameSource\n+  #953 = Utf8               NameAndComment\n+  #954 = Class              #955          // java/lang/invoke/MethodHandles$Lookup\n+  #955 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #956 = Class              #957          // java/lang/invoke/MethodHandles\n+  #957 = Utf8               java/lang/invoke/MethodHandles\n+  #958 = Utf8               Lookup\n {\n   private static final int HASH_SIZE = 509;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 509\n \n   static final int NIBLET_MASK = 15;\n@@ -1061,25 +1061,25 @@\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 26l\n \n   private static final java.util.Comparator<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> offsetComparator;\n     descriptor: Ljava/util/Comparator;\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n-    Signature: #335                         // Ljava/util/Comparator<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #874                         // Ljava/util/Comparator<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   private final java.util.List<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> entries;\n     descriptor: Ljava/util/List;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #338                         // Ljava/util/List<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #875                         // Ljava/util/List<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   private final java.util.Map<java.lang.String, java.util.LinkedList<org.apache.commons.compress.archivers.zip.ZipArchiveEntry>> nameMap;\n     descriptor: Ljava/util/Map;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #341                         // Ljava/util/Map<Ljava/lang/String;Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;>;\n+    Signature: #876                         // Ljava/util/Map<Ljava/lang/String;Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;>;\n \n   private final java.lang.String encoding;\n     descriptor: Ljava/lang/String;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n@@ -1155,93 +1155,93 @@\n \n   public static void closeQuietly(org.apache.commons.compress.archivers.zip.ZipFile);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokestatic  #4                  // Method org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n+         1: invokestatic  #9                  // Method org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n          4: return\n       LineNumberTable:\n         line 365: 0\n         line 366: 4\n \n   public org.apache.commons.compress.archivers.zip.ZipFile(java.io.File) throws java.io.IOException;\n     descriptor: (Ljava/io/File;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: ldc           #6                  // String UTF8\n-         4: invokespecial #7                  // Method \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+         2: ldc           #17                 // String UTF8\n+         4: invokespecial #19                 // Method \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n          7: return\n       LineNumberTable:\n         line 449: 0\n         line 450: 7\n     Exceptions:\n       throws java.io.IOException\n \n   public org.apache.commons.compress.archivers.zip.ZipFile(java.io.File, java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/io/File;Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #8                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         2: invokevirtual #23                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n          5: aload_2\n          6: iconst_1\n-         7: invokespecial #9                  // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n+         7: invokespecial #29                 // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n         10: return\n       LineNumberTable:\n         line 463: 0\n         line 464: 10\n     Exceptions:\n       throws java.io.IOException\n \n   public org.apache.commons.compress.archivers.zip.ZipFile(java.io.File, java.lang.String, boolean) throws java.io.IOException;\n     descriptor: (Ljava/io/File;Ljava/lang/String;Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #8                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         2: invokevirtual #23                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n          5: aload_2\n          6: iload_3\n          7: iconst_0\n-         8: invokespecial #10                 // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n+         8: invokespecial #32                 // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n         11: return\n       LineNumberTable:\n         line 480: 0\n         line 481: 11\n     Exceptions:\n       throws java.io.IOException\n \n   public org.apache.commons.compress.archivers.zip.ZipFile(java.io.File, java.lang.String, boolean, boolean) throws java.io.IOException;\n     descriptor: (Ljava/io/File;Ljava/lang/String;ZZ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=7, locals=5, args_size=5\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #8                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n-         5: getstatic     #11                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-         8: invokestatic  #12                 // Method java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n+         2: invokevirtual #23                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         5: getstatic     #35                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+         8: invokestatic  #41                 // Method java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n         11: iconst_0\n-        12: anewarray     #13                 // class java/nio/file/attribute/FileAttribute\n-        15: invokestatic  #14                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+        12: anewarray     #47                 // class java/nio/file/attribute/FileAttribute\n+        15: invokestatic  #49                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n         18: aload_1\n-        19: invokevirtual #15                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;\n+        19: invokevirtual #55                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;\n         22: aload_2\n         23: iload_3\n         24: iconst_1\n         25: iload         4\n-        27: invokespecial #16                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n+        27: invokespecial #59                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n         30: return\n       LineNumberTable:\n         line 508: 0\n         line 509: 19\n         line 508: 27\n         line 510: 30\n     Exceptions:\n@@ -1250,16 +1250,16 @@\n   public org.apache.commons.compress.archivers.zip.ZipFile(java.nio.file.Path) throws java.io.IOException;\n     descriptor: (Ljava/nio/file/Path;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: ldc           #6                  // String UTF8\n-         4: invokespecial #17                 // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n+         2: ldc           #17                 // String UTF8\n+         4: invokespecial #62                 // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n          7: return\n       LineNumberTable:\n         line 520: 0\n         line 521: 7\n     Exceptions:\n       throws java.io.IOException\n \n@@ -1268,15 +1268,15 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: iconst_1\n-         4: invokespecial #9                  // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n+         4: invokespecial #29                 // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n          7: return\n       LineNumberTable:\n         line 534: 0\n         line 535: 7\n     Exceptions:\n       throws java.io.IOException\n \n@@ -1286,42 +1286,42 @@\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: iload_3\n          4: iconst_0\n-         5: invokespecial #10                 // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n+         5: invokespecial #32                 // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n          8: return\n       LineNumberTable:\n         line 552: 0\n         line 553: 8\n     Exceptions:\n       throws java.io.IOException\n \n   public org.apache.commons.compress.archivers.zip.ZipFile(java.nio.file.Path, java.lang.String, boolean, boolean) throws java.io.IOException;\n     descriptor: (Ljava/nio/file/Path;Ljava/lang/String;ZZ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=7, locals=5, args_size=5\n          0: aload_0\n          1: aload_1\n-         2: getstatic     #11                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-         5: invokestatic  #12                 // Method java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n+         2: getstatic     #35                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+         5: invokestatic  #41                 // Method java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n          8: iconst_0\n-         9: anewarray     #13                 // class java/nio/file/attribute/FileAttribute\n-        12: invokestatic  #14                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+         9: anewarray     #47                 // class java/nio/file/attribute/FileAttribute\n+        12: invokestatic  #49                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n         15: aload_1\n-        16: invokeinterface #18,  1           // InterfaceMethod java/nio/file/Path.toAbsolutePath:()Ljava/nio/file/Path;\n-        21: invokeinterface #19,  1           // InterfaceMethod java/nio/file/Path.toString:()Ljava/lang/String;\n+        16: invokeinterface #65,  1           // InterfaceMethod java/nio/file/Path.toAbsolutePath:()Ljava/nio/file/Path;\n+        21: invokeinterface #70,  1           // InterfaceMethod java/nio/file/Path.toString:()Ljava/lang/String;\n         26: aload_2\n         27: iload_3\n         28: iconst_1\n         29: iload         4\n-        31: invokespecial #16                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n+        31: invokespecial #59                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n         34: return\n       LineNumberTable:\n         line 578: 0\n         line 579: 16\n         line 578: 31\n         line 581: 34\n     Exceptions:\n@@ -1330,36 +1330,36 @@\n   public org.apache.commons.compress.archivers.zip.ZipFile(java.nio.channels.SeekableByteChannel) throws java.io.IOException;\n     descriptor: (Ljava/nio/channels/SeekableByteChannel;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: ldc           #20                 // String unknown archive\n-         4: ldc           #6                  // String UTF8\n+         2: ldc           #73                 // String unknown archive\n+         4: ldc           #17                 // String UTF8\n          6: iconst_1\n-         7: invokespecial #21                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n+         7: invokespecial #75                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n         10: return\n       LineNumberTable:\n         line 597: 0\n         line 598: 10\n     Exceptions:\n       throws java.io.IOException\n \n   public org.apache.commons.compress.archivers.zip.ZipFile(java.nio.channels.SeekableByteChannel, java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: ldc           #20                 // String unknown archive\n+         2: ldc           #73                 // String unknown archive\n          4: aload_2\n          5: iconst_1\n-         6: invokespecial #21                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n+         6: invokespecial #75                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n          9: return\n       LineNumberTable:\n         line 617: 0\n         line 618: 9\n     Exceptions:\n       throws java.io.IOException\n \n@@ -1371,15 +1371,15 @@\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: aload_3\n          4: iload         4\n          6: iconst_0\n          7: iconst_0\n-         8: invokespecial #16                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n+         8: invokespecial #59                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n         11: return\n       LineNumberTable:\n         line 641: 0\n         line 642: 11\n     Exceptions:\n       throws java.io.IOException\n \n@@ -1391,157 +1391,157 @@\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: aload_3\n          4: iload         4\n          6: iconst_0\n          7: iload         5\n-         9: invokespecial #16                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n+         9: invokespecial #59                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n         12: return\n       LineNumberTable:\n         line 675: 0\n         line 676: 12\n     Exceptions:\n       throws java.io.IOException\n \n   private org.apache.commons.compress.archivers.zip.ZipFile(java.nio.channels.SeekableByteChannel, java.lang.String, java.lang.String, boolean, boolean, boolean) throws java.io.IOException;\n     descriptor: (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=10, args_size=7\n          0: aload_0\n-         1: invokespecial #22                 // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #78                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n-         5: new           #23                 // class java/util/LinkedList\n+         5: new           #83                 // class java/util/LinkedList\n          8: dup\n-         9: invokespecial #24                 // Method java/util/LinkedList.\"<init>\":()V\n-        12: putfield      #25                 // Field entries:Ljava/util/List;\n+         9: invokespecial #85                 // Method java/util/LinkedList.\"<init>\":()V\n+        12: putfield      #86                 // Field entries:Ljava/util/List;\n         15: aload_0\n-        16: new           #26                 // class java/util/HashMap\n+        16: new           #90                 // class java/util/HashMap\n         19: dup\n         20: sipush        509\n-        23: invokespecial #27                 // Method java/util/HashMap.\"<init>\":(I)V\n-        26: putfield      #28                 // Field nameMap:Ljava/util/Map;\n+        23: invokespecial #92                 // Method java/util/HashMap.\"<init>\":(I)V\n+        26: putfield      #95                 // Field nameMap:Ljava/util/Map;\n         29: aload_0\n         30: iconst_1\n-        31: putfield      #29                 // Field closed:Z\n+        31: putfield      #99                 // Field closed:Z\n         34: aload_0\n         35: bipush        8\n         37: newarray       byte\n-        39: putfield      #30                 // Field dwordBuf:[B\n+        39: putfield      #103                // Field dwordBuf:[B\n         42: aload_0\n         43: iconst_4\n         44: newarray       byte\n-        46: putfield      #31                 // Field wordBuf:[B\n+        46: putfield      #107                // Field wordBuf:[B\n         49: aload_0\n         50: bipush        42\n         52: newarray       byte\n-        54: putfield      #32                 // Field cfhBuf:[B\n+        54: putfield      #110                // Field cfhBuf:[B\n         57: aload_0\n         58: iconst_2\n         59: newarray       byte\n-        61: putfield      #33                 // Field shortBuf:[B\n+        61: putfield      #113                // Field shortBuf:[B\n         64: aload_0\n         65: aload_0\n-        66: getfield      #30                 // Field dwordBuf:[B\n-        69: invokestatic  #34                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-        72: putfield      #35                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n+        66: getfield      #103                // Field dwordBuf:[B\n+        69: invokestatic  #116                // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n+        72: putfield      #122                // Field dwordBbuf:Ljava/nio/ByteBuffer;\n         75: aload_0\n         76: aload_0\n-        77: getfield      #31                 // Field wordBuf:[B\n-        80: invokestatic  #34                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-        83: putfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        77: getfield      #107                // Field wordBuf:[B\n+        80: invokestatic  #116                // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n+        83: putfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n         86: aload_0\n         87: aload_0\n-        88: getfield      #32                 // Field cfhBuf:[B\n-        91: invokestatic  #34                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-        94: putfield      #37                 // Field cfhBbuf:Ljava/nio/ByteBuffer;\n+        88: getfield      #110                // Field cfhBuf:[B\n+        91: invokestatic  #116                // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n+        94: putfield      #129                // Field cfhBbuf:Ljava/nio/ByteBuffer;\n         97: aload_0\n         98: aload_0\n-        99: getfield      #33                 // Field shortBuf:[B\n-       102: invokestatic  #34                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-       105: putfield      #38                 // Field shortBbuf:Ljava/nio/ByteBuffer;\n+        99: getfield      #113                // Field shortBuf:[B\n+       102: invokestatic  #116                // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n+       105: putfield      #132                // Field shortBbuf:Ljava/nio/ByteBuffer;\n        108: aload_0\n        109: aload_1\n-       110: instanceof    #39                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-       113: putfield      #40                 // Field isSplitZipArchive:Z\n+       110: instanceof    #135                // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+       113: putfield      #137                // Field isSplitZipArchive:Z\n        116: aload_0\n        117: aload_2\n-       118: putfield      #41                 // Field archiveName:Ljava/lang/String;\n+       118: putfield      #140                // Field archiveName:Ljava/lang/String;\n        121: aload_0\n        122: aload_3\n-       123: putfield      #42                 // Field encoding:Ljava/lang/String;\n+       123: putfield      #144                // Field encoding:Ljava/lang/String;\n        126: aload_0\n        127: aload_3\n-       128: invokestatic  #43                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-       131: putfield      #44                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       128: invokestatic  #147                // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       131: putfield      #151                // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        134: aload_0\n        135: iload         4\n-       137: putfield      #45                 // Field useUnicodeExtraFields:Z\n+       137: putfield      #155                // Field useUnicodeExtraFields:Z\n        140: aload_0\n        141: aload_1\n-       142: putfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       142: putfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        145: iconst_0\n        146: istore        7\n        148: aload_0\n-       149: invokespecial #46                 // Method populateFromCentralDirectory:()Ljava/util/Map;\n+       149: invokespecial #158                // Method populateFromCentralDirectory:()Ljava/util/Map;\n        152: astore        8\n        154: iload         6\n        156: ifne          165\n        159: aload_0\n        160: aload         8\n-       162: invokespecial #47                 // Method resolveLocalFileHeaderData:(Ljava/util/Map;)V\n+       162: invokespecial #162                // Method resolveLocalFileHeaderData:(Ljava/util/Map;)V\n        165: aload_0\n-       166: invokespecial #48                 // Method fillNameMap:()V\n+       166: invokespecial #166                // Method fillNameMap:()V\n        169: iconst_1\n        170: istore        7\n        172: aload_0\n        173: iload         7\n        175: ifne          182\n        178: iconst_1\n        179: goto          183\n        182: iconst_0\n-       183: putfield      #29                 // Field closed:Z\n+       183: putfield      #99                 // Field closed:Z\n        186: iload         7\n        188: ifne          273\n        191: iload         5\n        193: ifeq          273\n        196: aload_0\n-       197: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-       200: invokestatic  #4                  // Method org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n+       197: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       200: invokestatic  #9                  // Method org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n        203: goto          273\n        206: astore        8\n-       208: new           #49                 // class java/io/IOException\n+       208: new           #169                // class java/io/IOException\n        211: dup\n-       212: new           #50                 // class java/lang/StringBuilder\n+       212: new           #171                // class java/lang/StringBuilder\n        215: dup\n-       216: invokespecial #51                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       219: ldc           #52                 // String Error on ZipFile\n-       221: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       216: invokespecial #173                // Method java/lang/StringBuilder.\"<init>\":()V\n+       219: ldc           #174                // String Error on ZipFile\n+       221: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        224: aload_2\n-       225: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       228: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       225: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       228: invokevirtual #180                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n        231: aload         8\n-       233: invokespecial #55                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+       233: invokespecial #181                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n        236: athrow\n        237: astore        9\n        239: aload_0\n        240: iload         7\n        242: ifne          249\n        245: iconst_1\n        246: goto          250\n        249: iconst_0\n-       250: putfield      #29                 // Field closed:Z\n+       250: putfield      #99                 // Field closed:Z\n        253: iload         7\n        255: ifne          270\n        258: iload         5\n        260: ifeq          270\n        263: aload_0\n-       264: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-       267: invokestatic  #4                  // Method org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n+       264: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       267: invokestatic  #9                  // Method org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n        270: aload         9\n        272: athrow\n        273: return\n       Exception table:\n          from    to  target type\n            148   172   206   Class java/io/IOException\n            148   172   237   any\n@@ -1615,104 +1615,104 @@\n \n   public org.apache.commons.compress.archivers.zip.ZipFile(java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n-         1: new           #56                 // class java/io/File\n+         1: new           #24                 // class java/io/File\n          4: dup\n          5: aload_1\n-         6: invokespecial #57                 // Method java/io/File.\"<init>\":(Ljava/lang/String;)V\n-         9: invokevirtual #8                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n-        12: ldc           #6                  // String UTF8\n-        14: invokespecial #17                 // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n+         6: invokespecial #184                // Method java/io/File.\"<init>\":(Ljava/lang/String;)V\n+         9: invokevirtual #23                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+        12: ldc           #17                 // String UTF8\n+        14: invokespecial #62                 // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n         17: return\n       LineNumberTable:\n         line 716: 0\n         line 717: 17\n     Exceptions:\n       throws java.io.IOException\n \n   public org.apache.commons.compress.archivers.zip.ZipFile(java.lang.String, java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n-         1: new           #56                 // class java/io/File\n+         1: new           #24                 // class java/io/File\n          4: dup\n          5: aload_1\n-         6: invokespecial #57                 // Method java/io/File.\"<init>\":(Ljava/lang/String;)V\n-         9: invokevirtual #8                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         6: invokespecial #184                // Method java/io/File.\"<init>\":(Ljava/lang/String;)V\n+         9: invokevirtual #23                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n         12: aload_2\n         13: iconst_1\n-        14: invokespecial #9                  // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n+        14: invokespecial #29                 // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;Z)V\n         17: return\n       LineNumberTable:\n         line 730: 0\n         line 731: 17\n     Exceptions:\n       throws java.io.IOException\n \n   public boolean canReadEntryData(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=2, args_size=2\n          0: aload_1\n-         1: invokestatic  #58                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+         1: invokestatic  #187                // Method org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n          4: ireturn\n       LineNumberTable:\n         line 743: 0\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_1\n-         2: putfield      #29                 // Field closed:Z\n+         2: putfield      #99                 // Field closed:Z\n          5: aload_0\n-         6: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         9: invokeinterface #59,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.close:()V\n+         6: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         9: invokeinterface #193,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.close:()V\n         14: return\n       LineNumberTable:\n         line 755: 0\n         line 757: 5\n         line 758: 14\n     Exceptions:\n       throws java.io.IOException\n \n   public void copyRawEntries(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream, org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=5, args_size=3\n          0: aload_0\n-         1: invokevirtual #60                 // Method getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n+         1: invokevirtual #198                // Method getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n          4: astore_3\n          5: aload_3\n-         6: invokeinterface #61,  1           // InterfaceMethod java/util/Enumeration.hasMoreElements:()Z\n+         6: invokeinterface #202,  1          // InterfaceMethod java/util/Enumeration.hasMoreElements:()Z\n         11: ifeq          51\n         14: aload_3\n-        15: invokeinterface #62,  1           // InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;\n-        20: checkcast     #63                 // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+        15: invokeinterface #208,  1          // InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;\n+        20: checkcast     #212                // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n         23: astore        4\n         25: aload_2\n         26: aload         4\n-        28: invokeinterface #64,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate.test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+        28: invokeinterface #214,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate.test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n         33: ifeq          48\n         36: aload_1\n         37: aload         4\n         39: aload_0\n         40: aload         4\n-        42: invokevirtual #65                 // Method getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-        45: invokevirtual #66                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+        42: invokevirtual #219                // Method getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+        45: invokevirtual #223                // Method org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n         48: goto          5\n         51: return\n       LineNumberTable:\n         line 771: 0\n         line 772: 5\n         line 773: 14\n         line 774: 25\n@@ -1743,37 +1743,37 @@\n          9: iflt          20\n         12: lload_1\n         13: lload_3\n         14: ladd\n         15: lload_1\n         16: lcmp\n         17: ifge          30\n-        20: new           #67                 // class java/lang/IllegalArgumentException\n+        20: new           #229                // class java/lang/IllegalArgumentException\n         23: dup\n-        24: ldc           #68                 // String Corrupted archive, stream boundaries are out of range\n-        26: invokespecial #69                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        24: ldc           #231                // String Corrupted archive, stream boundaries are out of range\n+        26: invokespecial #233                // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         29: athrow\n         30: aload_0\n-        31: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        34: instanceof    #70                 // class java/nio/channels/FileChannel\n+        31: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        34: instanceof    #234                // class java/nio/channels/FileChannel\n         37: ifeq          53\n-        40: new           #71                 // class org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n+        40: new           #236                // class org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n         43: dup\n         44: aload_0\n         45: lload_1\n         46: lload_3\n-        47: invokespecial #72                 // Method org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+        47: invokespecial #238                // Method org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n         50: goto          66\n-        53: new           #73                 // class org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n+        53: new           #241                // class org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n         56: dup\n         57: lload_1\n         58: lload_3\n         59: aload_0\n-        60: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        63: invokespecial #74                 // Method org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n+        60: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        63: invokespecial #243                // Method org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n         66: areturn\n       LineNumberTable:\n         line 785: 0\n         line 786: 20\n         line 789: 30\n         line 790: 40\n         line 791: 53\n@@ -1787,39 +1787,39 @@\n \n   private void fillNameMap();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #25                 // Field entries:Ljava/util/List;\n+         1: getfield      #86                 // Field entries:Ljava/util/List;\n          4: aload_0\n-         5: invokedynamic #75,  0             // InvokeDynamic #0:accept:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n-        10: invokeinterface #76,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V\n+         5: invokedynamic #246,  0            // InvokeDynamic #0:accept:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/util/function/Consumer;\n+        10: invokeinterface #250,  2          // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V\n         15: return\n       LineNumberTable:\n         line 795: 0\n         line 802: 15\n \n   protected void finalize() throws java.lang.Throwable;\n     descriptor: ()V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=1, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #29                 // Field closed:Z\n+         1: getfield      #99                 // Field closed:Z\n          4: ifne          11\n          7: aload_0\n-         8: invokevirtual #77                 // Method close:()V\n+         8: invokevirtual #256                // Method close:()V\n         11: aload_0\n-        12: invokespecial #78                 // Method java/lang/Object.finalize:()V\n+        12: invokespecial #257                // Method java/lang/Object.finalize:()V\n         15: goto          25\n         18: astore_1\n         19: aload_0\n-        20: invokespecial #78                 // Method java/lang/Object.finalize:()V\n+        20: invokespecial #257                // Method java/lang/Object.finalize:()V\n         23: aload_1\n         24: athrow\n         25: return\n       Exception table:\n          from    to  target type\n              0    11    18   any\n       LineNumberTable:\n@@ -1840,25 +1840,25 @@\n \n   public java.io.InputStream getContentBeforeFirstLocalFileHeader();\n     descriptor: ()Ljava/io/InputStream;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #79                 // Field firstLocalFileHeaderOffset:J\n+         1: getfield      #260                // Field firstLocalFileHeaderOffset:J\n          4: lconst_0\n          5: lcmp\n          6: ifne          13\n          9: aconst_null\n         10: goto          22\n         13: aload_0\n         14: lconst_0\n         15: aload_0\n-        16: getfield      #79                 // Field firstLocalFileHeaderOffset:J\n-        19: invokespecial #80                 // Method createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n+        16: getfield      #260                // Field firstLocalFileHeaderOffset:J\n+        19: invokespecial #264                // Method createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n         22: areturn\n       LineNumberTable:\n         line 828: 0\n         line 829: 9\n         line 828: 22\n       StackMapTable: number_of_entries = 2\n         frame_type = 13 /* same */\n@@ -1867,26 +1867,26 @@\n \n   private long getDataOffset(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=4, args_size=2\n          0: aload_1\n-         1: invokevirtual #81                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n+         1: invokevirtual #268                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n          4: lstore_2\n          5: lload_2\n-         6: ldc2_w        #83                 // long -1l\n+         6: ldc2_w        #274                // long -1l\n          9: lcmp\n         10: ifne          24\n         13: aload_0\n         14: aload_1\n-        15: invokespecial #85                 // Method setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n+        15: invokespecial #276                // Method setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n         18: pop\n         19: aload_1\n-        20: invokevirtual #81                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n+        20: invokevirtual #268                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n         23: lreturn\n         24: lload_2\n         25: lreturn\n       LineNumberTable:\n         line 833: 0\n         line 834: 5\n         line 835: 13\n@@ -1901,141 +1901,141 @@\n \n   public java.lang.String getEncoding();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #42                 // Field encoding:Ljava/lang/String;\n+         1: getfield      #144                // Field encoding:Ljava/lang/String;\n          4: areturn\n       LineNumberTable:\n         line 847: 0\n \n   public java.util.Enumeration<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntries();\n     descriptor: ()Ljava/util/Enumeration;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #25                 // Field entries:Ljava/util/List;\n-         4: invokestatic  #86                 // Method java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n+         1: getfield      #86                 // Field entries:Ljava/util/List;\n+         4: invokestatic  #280                // Method java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n          7: areturn\n       LineNumberTable:\n         line 859: 0\n-    Signature: #412                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #901                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public java.lang.Iterable<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntries(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/lang/Iterable;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #28                 // Field nameMap:Ljava/util/Map;\n+         1: getfield      #95                 // Field nameMap:Ljava/util/Map;\n          4: aload_1\n-         5: invokeinterface #87,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-        10: checkcast     #88                 // class java/util/List\n+         5: invokeinterface #286,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+        10: checkcast     #251                // class java/util/List\n         13: astore_2\n         14: aload_2\n         15: ifnull        22\n         18: aload_2\n         19: goto          25\n-        22: invokestatic  #89                 // Method java/util/Collections.emptyList:()Ljava/util/List;\n+        22: invokestatic  #292                // Method java/util/Collections.emptyList:()Ljava/util/List;\n         25: areturn\n       LineNumberTable:\n         line 872: 0\n         line 873: 14\n         line 874: 22\n         line 873: 25\n       StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n           offset_delta = 22\n           locals = [ class java/util/List ]\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/lang/Iterable ]\n-    Signature: #415                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #905                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public java.util.Enumeration<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntriesInPhysicalOrder();\n     descriptor: ()Ljava/util/Enumeration;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #25                 // Field entries:Ljava/util/List;\n-         4: getstatic     #90                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry.EMPTY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-         7: invokeinterface #91,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-        12: checkcast     #92                 // class \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\"\n+         1: getfield      #86                 // Field entries:Ljava/util/List;\n+         4: getstatic     #296                // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry.EMPTY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+         7: invokeinterface #300,  2          // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+        12: checkcast     #304                // class \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\"\n         15: astore_1\n         16: aload_1\n-        17: getstatic     #93                 // Field offsetComparator:Ljava/util/Comparator;\n-        20: invokestatic  #94                 // Method java/util/Arrays.sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n+        17: getstatic     #305                // Field offsetComparator:Ljava/util/Comparator;\n+        20: invokestatic  #309                // Method java/util/Arrays.sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n         23: aload_1\n-        24: invokestatic  #95                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-        27: invokestatic  #86                 // Method java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n+        24: invokestatic  #315                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+        27: invokestatic  #280                // Method java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n         30: areturn\n       LineNumberTable:\n         line 888: 0\n         line 889: 16\n         line 890: 23\n-    Signature: #412                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #901                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public java.lang.Iterable<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntriesInPhysicalOrder(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/lang/Iterable;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=4, args_size=2\n-         0: getstatic     #90                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry.EMPTY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+         0: getstatic     #296                // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry.EMPTY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n          3: astore_2\n          4: aload_0\n-         5: getfield      #28                 // Field nameMap:Ljava/util/Map;\n+         5: getfield      #95                 // Field nameMap:Ljava/util/Map;\n          8: aload_1\n-         9: invokeinterface #87,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-        14: checkcast     #23                 // class java/util/LinkedList\n+         9: invokeinterface #286,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+        14: checkcast     #83                 // class java/util/LinkedList\n         17: astore_3\n         18: aload_3\n         19: ifnull        38\n         22: aload_3\n         23: aload_2\n-        24: invokevirtual #96                 // Method java/util/LinkedList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-        27: checkcast     #92                 // class \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\"\n+        24: invokevirtual #319                // Method java/util/LinkedList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+        27: checkcast     #304                // class \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\"\n         30: astore_2\n         31: aload_2\n-        32: getstatic     #93                 // Field offsetComparator:Ljava/util/Comparator;\n-        35: invokestatic  #94                 // Method java/util/Arrays.sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n+        32: getstatic     #305                // Field offsetComparator:Ljava/util/Comparator;\n+        35: invokestatic  #309                // Method java/util/Arrays.sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n         38: aload_2\n-        39: invokestatic  #95                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+        39: invokestatic  #315                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n         42: areturn\n       LineNumberTable:\n         line 903: 0\n         line 904: 4\n         line 905: 18\n         line 906: 22\n         line 907: 31\n         line 909: 38\n       StackMapTable: number_of_entries = 1\n         frame_type = 253 /* append */\n           offset_delta = 38\n           locals = [ class \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\", class java/util/LinkedList ]\n-    Signature: #415                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #905                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry(java.lang.String);\n     descriptor: (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #28                 // Field nameMap:Ljava/util/Map;\n+         1: getfield      #95                 // Field nameMap:Ljava/util/Map;\n          4: aload_1\n-         5: invokeinterface #87,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-        10: checkcast     #23                 // class java/util/LinkedList\n+         5: invokeinterface #286,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+        10: checkcast     #83                 // class java/util/LinkedList\n         13: astore_2\n         14: aload_2\n         15: ifnull        28\n         18: aload_2\n-        19: invokevirtual #97                 // Method java/util/LinkedList.getFirst:()Ljava/lang/Object;\n-        22: checkcast     #63                 // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+        19: invokevirtual #320                // Method java/util/LinkedList.getFirst:()Ljava/lang/Object;\n+        22: checkcast     #212                // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n         25: goto          29\n         28: aconst_null\n         29: areturn\n       LineNumberTable:\n         line 925: 0\n         line 926: 14\n       StackMapTable: number_of_entries = 2\n@@ -2047,132 +2047,132 @@\n \n   public long getFirstLocalFileHeaderOffset();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #79                 // Field firstLocalFileHeaderOffset:J\n+         1: getfield      #260                // Field firstLocalFileHeaderOffset:J\n          4: lreturn\n       LineNumberTable:\n         line 936: 0\n \n   public java.io.InputStream getInputStream(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=9, locals=4, args_size=2\n          0: aload_1\n-         1: instanceof    #98                 // class org/apache/commons/compress/archivers/zip/ZipFile$Entry\n+         1: instanceof    #323                // class org/apache/commons/compress/archivers/zip/ZipFile$Entry\n          4: ifne          9\n          7: aconst_null\n          8: areturn\n          9: aload_1\n-        10: invokestatic  #99                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-        13: new           #100                // class java/io/BufferedInputStream\n+        10: invokestatic  #325                // Method org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+        13: new           #329                // class java/io/BufferedInputStream\n         16: dup\n         17: aload_0\n         18: aload_1\n-        19: invokevirtual #65                 // Method getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-        22: invokespecial #101                // Method java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        19: invokevirtual #219                // Method getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+        22: invokespecial #331                // Method java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n         25: astore_2\n-        26: getstatic     #102                // Field org/apache/commons/compress/archivers/zip/ZipFile$2.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+        26: getstatic     #334                // Field org/apache/commons/compress/archivers/zip/ZipFile$2.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n         29: aload_1\n-        30: invokevirtual #103                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        33: invokestatic  #104                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        36: invokevirtual #105                // Method org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n+        30: invokevirtual #340                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        33: invokestatic  #344                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        36: invokevirtual #350                // Method org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n         39: iaload\n         40: tableswitch   { // 1 to 19\n                        1: 132\n                        2: 141\n                        3: 150\n-                       4: 185\n-                       5: 223\n-                       6: 232\n-                       7: 241\n-                       8: 241\n-                       9: 241\n-                      10: 241\n-                      11: 241\n-                      12: 241\n-                      13: 241\n-                      14: 241\n-                      15: 241\n-                      16: 241\n-                      17: 241\n-                      18: 241\n-                      19: 241\n-                 default: 241\n+                       4: 186\n+                       5: 224\n+                       6: 233\n+                       7: 242\n+                       8: 242\n+                       9: 242\n+                      10: 242\n+                      11: 242\n+                      12: 242\n+                      13: 242\n+                      14: 242\n+                      15: 242\n+                      16: 242\n+                      17: 242\n+                      18: 242\n+                      19: 242\n+                 default: 242\n             }\n-       132: new           #106                // class org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n+       132: new           #353                // class org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n        135: dup\n        136: aload_2\n-       137: invokespecial #107                // Method org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream.\"<init>\":(Ljava/io/InputStream;)V\n+       137: invokespecial #355                // Method org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream.\"<init>\":(Ljava/io/InputStream;)V\n        140: areturn\n-       141: new           #108                // class org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+       141: new           #356                // class org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n        144: dup\n        145: aload_2\n-       146: invokespecial #109                // Method org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+       146: invokespecial #358                // Method org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n        149: areturn\n-       150: new           #110                // class org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+       150: new           #359                // class org/apache/commons/compress/archivers/zip/ExplodingInputStream\n        153: dup\n        154: aload_1\n-       155: invokevirtual #111                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-       158: invokevirtual #112                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n+       155: invokevirtual #361                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+       158: invokevirtual #365                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n        161: aload_1\n-       162: invokevirtual #111                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-       165: invokevirtual #113                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n+       162: invokevirtual #361                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+       165: invokevirtual #370                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n        168: aload_2\n-       169: invokespecial #114                // Method org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n+       169: invokespecial #373                // Method org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n        172: areturn\n        173: astore_3\n-       174: new           #49                 // class java/io/IOException\n+       174: new           #169                // class java/io/IOException\n        177: dup\n-       178: ldc           #115                // String bad IMPLODE data\n-       180: aload_3\n-       181: invokespecial #55                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-       184: athrow\n-       185: new           #116                // class java/util/zip/Inflater\n-       188: dup\n-       189: iconst_1\n-       190: invokespecial #117                // Method java/util/zip/Inflater.\"<init>\":(Z)V\n-       193: astore_3\n-       194: new           #118                // class org/apache/commons/compress/archivers/zip/ZipFile$1\n-       197: dup\n-       198: aload_0\n-       199: new           #119                // class java/io/SequenceInputStream\n-       202: dup\n-       203: aload_2\n-       204: new           #120                // class java/io/ByteArrayInputStream\n-       207: dup\n-       208: getstatic     #121                // Field ONE_ZERO_BYTE:[B\n-       211: invokespecial #122                // Method java/io/ByteArrayInputStream.\"<init>\":([B)V\n-       214: invokespecial #123                // Method java/io/SequenceInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n-       217: aload_3\n+       178: ldc_w         #376                // String bad IMPLODE data\n+       181: aload_3\n+       182: invokespecial #181                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+       185: athrow\n+       186: new           #378                // class java/util/zip/Inflater\n+       189: dup\n+       190: iconst_1\n+       191: invokespecial #380                // Method java/util/zip/Inflater.\"<init>\":(Z)V\n+       194: astore_3\n+       195: new           #383                // class org/apache/commons/compress/archivers/zip/ZipFile$1\n+       198: dup\n+       199: aload_0\n+       200: new           #385                // class java/io/SequenceInputStream\n+       203: dup\n+       204: aload_2\n+       205: new           #387                // class java/io/ByteArrayInputStream\n+       208: dup\n+       209: getstatic     #389                // Field ONE_ZERO_BYTE:[B\n+       212: invokespecial #392                // Method java/io/ByteArrayInputStream.\"<init>\":([B)V\n+       215: invokespecial #395                // Method java/io/SequenceInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n        218: aload_3\n-       219: invokespecial #124                // Method org/apache/commons/compress/archivers/zip/ZipFile$1.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n-       222: areturn\n-       223: new           #125                // class org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-       226: dup\n-       227: aload_2\n-       228: invokespecial #126                // Method org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-       231: areturn\n-       232: new           #127                // class org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-       235: dup\n-       236: aload_2\n-       237: invokespecial #128                // Method org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-       240: areturn\n-       241: new           #129                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-       244: dup\n-       245: aload_1\n-       246: invokevirtual #103                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       249: invokestatic  #104                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       252: aload_1\n-       253: invokespecial #130                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-       256: athrow\n+       219: aload_3\n+       220: invokespecial #398                // Method org/apache/commons/compress/archivers/zip/ZipFile$1.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n+       223: areturn\n+       224: new           #401                // class org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+       227: dup\n+       228: aload_2\n+       229: invokespecial #403                // Method org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+       232: areturn\n+       233: new           #404                // class org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+       236: dup\n+       237: aload_2\n+       238: invokespecial #406                // Method org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+       241: areturn\n+       242: new           #407                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+       245: dup\n+       246: aload_1\n+       247: invokevirtual #340                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       250: invokestatic  #344                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       253: aload_1\n+       254: invokespecial #409                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+       257: athrow\n       Exception table:\n          from    to  target type\n            150   172   173   Class java/lang/IllegalArgumentException\n       LineNumberTable:\n         line 949: 0\n         line 950: 7\n         line 953: 9\n@@ -2181,60 +2181,60 @@\n         line 961: 132\n         line 963: 141\n         line 966: 150\n         line 967: 162\n         line 966: 172\n         line 968: 173\n         line 969: 174\n-        line 972: 185\n-        line 978: 194\n-        line 990: 223\n-        line 992: 232\n-        line 1007: 241\n+        line 972: 186\n+        line 978: 195\n+        line 990: 224\n+        line 992: 233\n+        line 1007: 242\n       StackMapTable: number_of_entries = 9\n         frame_type = 9 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 122\n           locals = [ class java/io/InputStream ]\n         frame_type = 8 /* same */\n         frame_type = 8 /* same */\n         frame_type = 86 /* same_locals_1_stack_item */\n           stack = [ class java/lang/IllegalArgumentException ]\n-        frame_type = 11 /* same */\n+        frame_type = 12 /* same */\n         frame_type = 37 /* same */\n         frame_type = 8 /* same */\n         frame_type = 8 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   public java.io.InputStream getRawInputStream(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=4, args_size=2\n          0: aload_1\n-         1: instanceof    #98                 // class org/apache/commons/compress/archivers/zip/ZipFile$Entry\n+         1: instanceof    #323                // class org/apache/commons/compress/archivers/zip/ZipFile$Entry\n          4: ifne          9\n          7: aconst_null\n          8: areturn\n          9: aload_0\n         10: aload_1\n-        11: invokespecial #131                // Method getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+        11: invokespecial #412                // Method getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n         14: lstore_2\n         15: lload_2\n-        16: ldc2_w        #83                 // long -1l\n+        16: ldc2_w        #274                // long -1l\n         19: lcmp\n         20: ifne          25\n         23: aconst_null\n         24: areturn\n         25: aload_0\n         26: lload_2\n         27: aload_1\n-        28: invokevirtual #132                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-        31: invokespecial #80                 // Method createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n+        28: invokevirtual #415                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+        31: invokespecial #264                // Method createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n         34: areturn\n       LineNumberTable:\n         line 1028: 0\n         line 1029: 7\n         line 1032: 9\n         line 1033: 15\n         line 1034: 23\n@@ -2251,42 +2251,42 @@\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=5, args_size=2\n          0: aload_1\n          1: ifnull        63\n          4: aload_1\n-         5: invokevirtual #133                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z\n+         5: invokevirtual #418                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z\n          8: ifeq          63\n         11: aload_0\n         12: aload_1\n-        13: invokevirtual #134                // Method getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+        13: invokevirtual #421                // Method getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n         16: astore_2\n         17: aload_0\n-        18: getfield      #44                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        18: getfield      #151                // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         21: aload_2\n-        22: invokestatic  #135                // Method org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n-        25: invokeinterface #136,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+        22: invokestatic  #424                // Method org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n+        25: invokeinterface #428,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n         30: astore_3\n         31: aload_2\n         32: ifnull        39\n         35: aload_2\n-        36: invokevirtual #137                // Method java/io/InputStream.close:()V\n+        36: invokevirtual #434                // Method java/io/InputStream.close:()V\n         39: aload_3\n         40: areturn\n         41: astore_3\n         42: aload_2\n         43: ifnull        61\n         46: aload_2\n-        47: invokevirtual #137                // Method java/io/InputStream.close:()V\n+        47: invokevirtual #434                // Method java/io/InputStream.close:()V\n         50: goto          61\n         53: astore        4\n         55: aload_3\n         56: aload         4\n-        58: invokevirtual #139                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        58: invokevirtual #439                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n         61: aload_3\n         62: athrow\n         63: aconst_null\n         64: areturn\n       Exception table:\n          from    to  target type\n             17    31    41   Class java/lang/Throwable\n@@ -2318,153 +2318,153 @@\n       throws java.io.IOException\n \n   private java.util.Map<org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment> populateFromCentralDirectory() throws java.io.IOException;\n     descriptor: ()Ljava/util/Map;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=4, args_size=1\n-         0: new           #26                 // class java/util/HashMap\n+         0: new           #90                 // class java/util/HashMap\n          3: dup\n-         4: invokespecial #140                // Method java/util/HashMap.\"<init>\":()V\n+         4: invokespecial #443                // Method java/util/HashMap.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n-         9: invokespecial #141                // Method positionAtCentralDirectory:()V\n+         9: invokespecial #444                // Method positionAtCentralDirectory:()V\n         12: aload_0\n         13: aload_0\n-        14: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        17: invokeinterface #142,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n-        22: putfield      #143                // Field centralDirectoryStartOffset:J\n+        14: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        17: invokeinterface #447,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        22: putfield      #450                // Field centralDirectoryStartOffset:J\n         25: aload_0\n-        26: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        29: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        26: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        29: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n         32: pop\n         33: aload_0\n-        34: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        34: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         37: aload_0\n-        38: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        41: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        38: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        41: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         44: aload_0\n-        45: getfield      #31                 // Field wordBuf:[B\n-        48: invokestatic  #146                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+        45: getfield      #107                // Field wordBuf:[B\n+        48: invokestatic  #461                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n         51: lstore_2\n         52: lload_2\n-        53: getstatic     #147                // Field CFH_SIG:J\n+        53: getstatic     #467                // Field CFH_SIG:J\n         56: lcmp\n-        57: ifeq          77\n+        57: ifeq          78\n         60: aload_0\n-        61: invokespecial #148                // Method startsWithLocalFileHeader:()Z\n-        64: ifeq          77\n-        67: new           #49                 // class java/io/IOException\n+        61: invokespecial #470                // Method startsWithLocalFileHeader:()Z\n+        64: ifeq          78\n+        67: new           #169                // class java/io/IOException\n         70: dup\n-        71: ldc           #149                // String Central directory is empty, can\\'t expand corrupt archive.\n-        73: invokespecial #150                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        76: athrow\n-        77: lload_2\n-        78: getstatic     #147                // Field CFH_SIG:J\n-        81: lcmp\n-        82: ifne          120\n-        85: aload_0\n-        86: aload_1\n-        87: invokespecial #151                // Method readCentralDirectoryEntry:(Ljava/util/Map;)V\n-        90: aload_0\n-        91: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        94: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-        97: pop\n-        98: aload_0\n-        99: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-       102: aload_0\n-       103: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       106: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-       109: aload_0\n-       110: getfield      #31                 // Field wordBuf:[B\n-       113: invokestatic  #146                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-       116: lstore_2\n-       117: goto          77\n-       120: aload_1\n-       121: areturn\n+        71: ldc_w         #473                // String Central directory is empty, can\\'t expand corrupt archive.\n+        74: invokespecial #475                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        77: athrow\n+        78: lload_2\n+        79: getstatic     #467                // Field CFH_SIG:J\n+        82: lcmp\n+        83: ifne          121\n+        86: aload_0\n+        87: aload_1\n+        88: invokespecial #476                // Method readCentralDirectoryEntry:(Ljava/util/Map;)V\n+        91: aload_0\n+        92: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        95: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        98: pop\n+        99: aload_0\n+       100: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       103: aload_0\n+       104: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+       107: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       110: aload_0\n+       111: getfield      #107                // Field wordBuf:[B\n+       114: invokestatic  #461                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+       117: lstore_2\n+       118: goto          78\n+       121: aload_1\n+       122: areturn\n       LineNumberTable:\n         line 1072: 0\n         line 1075: 8\n         line 1076: 12\n         line 1078: 25\n         line 1079: 33\n         line 1080: 44\n         line 1082: 52\n         line 1083: 67\n-        line 1087: 77\n-        line 1088: 85\n-        line 1089: 90\n-        line 1090: 98\n-        line 1091: 109\n-        line 1093: 120\n+        line 1087: 78\n+        line 1088: 86\n+        line 1089: 91\n+        line 1090: 99\n+        line 1091: 110\n+        line 1093: 121\n       StackMapTable: number_of_entries = 2\n         frame_type = 253 /* append */\n-          offset_delta = 77\n+          offset_delta = 78\n           locals = [ class java/util/HashMap, long ]\n         frame_type = 42 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #428                         // ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n+    Signature: #911                         // ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n \n   private void positionAtCentralDirectory() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=1\n          0: aload_0\n-         1: invokespecial #152                // Method positionAtEndOfCentralDirectoryRecord:()V\n+         1: invokespecial #479                // Method positionAtEndOfCentralDirectoryRecord:()V\n          4: iconst_0\n          5: istore_1\n          6: aload_0\n-         7: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        10: invokeinterface #142,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n-        15: ldc2_w        #153                // long 20l\n+         7: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        10: invokeinterface #447,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        15: ldc2_w        #482                // long 20l\n         18: lcmp\n         19: ifle          26\n         22: iconst_1\n         23: goto          27\n         26: iconst_0\n         27: istore_2\n         28: iload_2\n         29: ifeq          85\n         32: aload_0\n-        33: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        33: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         36: aload_0\n-        37: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        40: invokeinterface #142,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n-        45: ldc2_w        #153                // long 20l\n+        37: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        40: invokeinterface #447,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        45: ldc2_w        #482                // long 20l\n         48: lsub\n-        49: invokeinterface #155,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        49: invokeinterface #484,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         54: pop\n         55: aload_0\n-        56: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        59: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        56: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        59: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n         62: pop\n         63: aload_0\n-        64: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        64: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         67: aload_0\n-        68: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        71: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-        74: getstatic     #156                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n+        68: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        71: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        74: getstatic     #487                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n         77: aload_0\n-        78: getfield      #31                 // Field wordBuf:[B\n-        81: invokestatic  #157                // Method java/util/Arrays.equals:([B[B)Z\n+        78: getfield      #107                // Field wordBuf:[B\n+        81: invokestatic  #490                // Method java/util/Arrays.equals:([B[B)Z\n         84: istore_1\n         85: iload_1\n         86: ifne          106\n         89: iload_2\n         90: ifeq          99\n         93: aload_0\n         94: bipush        16\n-        96: invokespecial #158                // Method skipBytes:(I)V\n+        96: invokespecial #494                // Method skipBytes:(I)V\n         99: aload_0\n-       100: invokespecial #159                // Method positionAtCentralDirectory32:()V\n+       100: invokespecial #497                // Method positionAtCentralDirectory32:()V\n        103: goto          110\n        106: aload_0\n-       107: invokespecial #160                // Method positionAtCentralDirectory64:()V\n+       107: invokespecial #500                // Method positionAtCentralDirectory64:()V\n        110: return\n       LineNumberTable:\n         line 1104: 0\n         line 1105: 4\n         line 1106: 6\n         line 1107: 10\n         line 1108: 28\n@@ -2495,116 +2495,116 @@\n \n   private void positionAtCentralDirectory32() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=5, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         4: invokeinterface #142,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+         1: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         4: invokeinterface #447,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n          9: lstore_1\n         10: aload_0\n-        11: getfield      #40                 // Field isSplitZipArchive:Z\n+        11: getfield      #137                // Field isSplitZipArchive:Z\n         14: ifeq          112\n         17: aload_0\n         18: bipush        6\n-        20: invokespecial #158                // Method skipBytes:(I)V\n+        20: invokespecial #494                // Method skipBytes:(I)V\n         23: aload_0\n-        24: getfield      #38                 // Field shortBbuf:Ljava/nio/ByteBuffer;\n-        27: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        24: getfield      #132                // Field shortBbuf:Ljava/nio/ByteBuffer;\n+        27: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n         30: pop\n         31: aload_0\n-        32: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        32: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         35: aload_0\n-        36: getfield      #38                 // Field shortBbuf:Ljava/nio/ByteBuffer;\n-        39: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        36: getfield      #132                // Field shortBbuf:Ljava/nio/ByteBuffer;\n+        39: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         42: aload_0\n         43: aload_0\n-        44: getfield      #33                 // Field shortBuf:[B\n-        47: invokestatic  #161                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+        44: getfield      #113                // Field shortBuf:[B\n+        47: invokestatic  #503                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n         50: i2l\n-        51: putfield      #162                // Field centralDirectoryStartDiskNumber:J\n+        51: putfield      #508                // Field centralDirectoryStartDiskNumber:J\n         54: aload_0\n         55: bipush        8\n-        57: invokespecial #158                // Method skipBytes:(I)V\n+        57: invokespecial #494                // Method skipBytes:(I)V\n         60: aload_0\n-        61: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        64: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        61: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        64: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n         67: pop\n         68: aload_0\n-        69: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        69: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         72: aload_0\n-        73: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        76: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        73: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        76: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         79: aload_0\n         80: aload_0\n-        81: getfield      #31                 // Field wordBuf:[B\n-        84: invokestatic  #146                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-        87: putfield      #163                // Field centralDirectoryStartRelativeOffset:J\n+        81: getfield      #107                // Field wordBuf:[B\n+        84: invokestatic  #461                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+        87: putfield      #511                // Field centralDirectoryStartRelativeOffset:J\n         90: aload_0\n-        91: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        94: checkcast     #39                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+        91: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        94: checkcast     #135                // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n         97: aload_0\n-        98: getfield      #162                // Field centralDirectoryStartDiskNumber:J\n+        98: getfield      #508                // Field centralDirectoryStartDiskNumber:J\n        101: aload_0\n-       102: getfield      #163                // Field centralDirectoryStartRelativeOffset:J\n-       105: invokevirtual #164                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+       102: getfield      #511                // Field centralDirectoryStartRelativeOffset:J\n+       105: invokevirtual #514                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n        108: pop\n        109: goto          215\n        112: aload_0\n        113: bipush        12\n-       115: invokespecial #158                // Method skipBytes:(I)V\n+       115: invokespecial #494                // Method skipBytes:(I)V\n        118: aload_0\n-       119: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       122: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+       119: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+       122: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n        125: pop\n        126: aload_0\n-       127: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       127: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        130: aload_0\n-       131: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       134: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       131: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+       134: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        137: aload_0\n-       138: getfield      #31                 // Field wordBuf:[B\n-       141: invokestatic  #146                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+       138: getfield      #107                // Field wordBuf:[B\n+       141: invokestatic  #461                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n        144: lstore_3\n        145: aload_0\n-       146: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       149: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+       146: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+       149: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n        152: pop\n        153: aload_0\n-       154: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       154: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        157: aload_0\n-       158: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       161: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       158: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+       161: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        164: aload_0\n        165: lconst_0\n-       166: putfield      #162                // Field centralDirectoryStartDiskNumber:J\n+       166: putfield      #508                // Field centralDirectoryStartDiskNumber:J\n        169: aload_0\n        170: aload_0\n-       171: getfield      #31                 // Field wordBuf:[B\n-       174: invokestatic  #146                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-       177: putfield      #163                // Field centralDirectoryStartRelativeOffset:J\n+       171: getfield      #107                // Field wordBuf:[B\n+       174: invokestatic  #461                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+       177: putfield      #511                // Field centralDirectoryStartRelativeOffset:J\n        180: aload_0\n        181: lload_1\n        182: lload_3\n        183: lsub\n        184: aload_0\n-       185: getfield      #163                // Field centralDirectoryStartRelativeOffset:J\n+       185: getfield      #511                // Field centralDirectoryStartRelativeOffset:J\n        188: lsub\n        189: lconst_0\n-       190: invokestatic  #165                // Method java/lang/Long.max:(JJ)J\n-       193: putfield      #79                 // Field firstLocalFileHeaderOffset:J\n+       190: invokestatic  #517                // Method java/lang/Long.max:(JJ)J\n+       193: putfield      #260                // Field firstLocalFileHeaderOffset:J\n        196: aload_0\n-       197: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       197: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        200: aload_0\n-       201: getfield      #163                // Field centralDirectoryStartRelativeOffset:J\n+       201: getfield      #511                // Field centralDirectoryStartRelativeOffset:J\n        204: aload_0\n-       205: getfield      #79                 // Field firstLocalFileHeaderOffset:J\n+       205: getfield      #260                // Field firstLocalFileHeaderOffset:J\n        208: ladd\n-       209: invokeinterface #155,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+       209: invokeinterface #484,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n        214: pop\n        215: return\n       LineNumberTable:\n         line 1135: 0\n         line 1136: 10\n         line 1137: 17\n         line 1138: 23\n@@ -2638,162 +2638,162 @@\n \n   private void positionAtCentralDirectory64() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=5, args_size=1\n          0: aload_0\n-         1: getfield      #40                 // Field isSplitZipArchive:Z\n+         1: getfield      #137                // Field isSplitZipArchive:Z\n          4: ifeq          77\n          7: aload_0\n-         8: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        11: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+         8: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        11: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n         14: pop\n         15: aload_0\n-        16: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        16: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         19: aload_0\n-        20: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        23: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        20: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        23: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         26: aload_0\n-        27: getfield      #31                 // Field wordBuf:[B\n-        30: invokestatic  #146                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+        27: getfield      #107                // Field wordBuf:[B\n+        30: invokestatic  #461                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n         33: lstore_1\n         34: aload_0\n-        35: getfield      #35                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-        38: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        35: getfield      #122                // Field dwordBbuf:Ljava/nio/ByteBuffer;\n+        38: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n         41: pop\n         42: aload_0\n-        43: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        43: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         46: aload_0\n-        47: getfield      #35                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-        50: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        47: getfield      #122                // Field dwordBbuf:Ljava/nio/ByteBuffer;\n+        50: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         53: aload_0\n-        54: getfield      #30                 // Field dwordBuf:[B\n-        57: invokestatic  #166                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+        54: getfield      #103                // Field dwordBuf:[B\n+        57: invokestatic  #523                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n         60: lstore_3\n         61: aload_0\n-        62: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        65: checkcast     #39                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+        62: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        65: checkcast     #135                // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n         68: lload_1\n         69: lload_3\n-        70: invokevirtual #164                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+        70: invokevirtual #514                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n         73: pop\n         74: goto          118\n         77: aload_0\n         78: iconst_4\n-        79: invokespecial #158                // Method skipBytes:(I)V\n+        79: invokespecial #494                // Method skipBytes:(I)V\n         82: aload_0\n-        83: getfield      #35                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-        86: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        83: getfield      #122                // Field dwordBbuf:Ljava/nio/ByteBuffer;\n+        86: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n         89: pop\n         90: aload_0\n-        91: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        91: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         94: aload_0\n-        95: getfield      #35                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-        98: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        95: getfield      #122                // Field dwordBbuf:Ljava/nio/ByteBuffer;\n+        98: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        101: aload_0\n-       102: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       102: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        105: aload_0\n-       106: getfield      #30                 // Field dwordBuf:[B\n-       109: invokestatic  #166                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n-       112: invokeinterface #155,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+       106: getfield      #103                // Field dwordBuf:[B\n+       109: invokestatic  #523                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+       112: invokeinterface #484,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n        117: pop\n        118: aload_0\n-       119: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       122: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+       119: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+       122: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n        125: pop\n        126: aload_0\n-       127: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       127: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        130: aload_0\n-       131: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       134: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       131: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+       134: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        137: aload_0\n-       138: getfield      #31                 // Field wordBuf:[B\n-       141: getstatic     #167                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n-       144: invokestatic  #157                // Method java/util/Arrays.equals:([B[B)Z\n-       147: ifne          160\n-       150: new           #168                // class java/util/zip/ZipException\n+       138: getfield      #107                // Field wordBuf:[B\n+       141: getstatic     #528                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n+       144: invokestatic  #490                // Method java/util/Arrays.equals:([B[B)Z\n+       147: ifne          161\n+       150: new           #531                // class java/util/zip/ZipException\n        153: dup\n-       154: ldc           #169                // String Archive\\'s ZIP64 end of central directory locator is corrupt.\n-       156: invokespecial #170                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       159: athrow\n-       160: aload_0\n-       161: getfield      #40                 // Field isSplitZipArchive:Z\n-       164: ifeq          261\n-       167: aload_0\n-       168: bipush        16\n-       170: invokespecial #158                // Method skipBytes:(I)V\n-       173: aload_0\n-       174: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       177: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-       180: pop\n-       181: aload_0\n-       182: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-       185: aload_0\n-       186: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       189: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-       192: aload_0\n+       154: ldc_w         #533                // String Archive\\'s ZIP64 end of central directory locator is corrupt.\n+       157: invokespecial #535                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       160: athrow\n+       161: aload_0\n+       162: getfield      #137                // Field isSplitZipArchive:Z\n+       165: ifeq          262\n+       168: aload_0\n+       169: bipush        16\n+       171: invokespecial #494                // Method skipBytes:(I)V\n+       174: aload_0\n+       175: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+       178: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+       181: pop\n+       182: aload_0\n+       183: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       186: aload_0\n+       187: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+       190: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        193: aload_0\n-       194: getfield      #31                 // Field wordBuf:[B\n-       197: invokestatic  #146                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-       200: putfield      #162                // Field centralDirectoryStartDiskNumber:J\n-       203: aload_0\n-       204: bipush        24\n-       206: invokespecial #158                // Method skipBytes:(I)V\n-       209: aload_0\n-       210: getfield      #35                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-       213: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-       216: pop\n-       217: aload_0\n-       218: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-       221: aload_0\n-       222: getfield      #35                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-       225: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-       228: aload_0\n+       194: aload_0\n+       195: getfield      #107                // Field wordBuf:[B\n+       198: invokestatic  #461                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+       201: putfield      #508                // Field centralDirectoryStartDiskNumber:J\n+       204: aload_0\n+       205: bipush        24\n+       207: invokespecial #494                // Method skipBytes:(I)V\n+       210: aload_0\n+       211: getfield      #122                // Field dwordBbuf:Ljava/nio/ByteBuffer;\n+       214: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+       217: pop\n+       218: aload_0\n+       219: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       222: aload_0\n+       223: getfield      #122                // Field dwordBbuf:Ljava/nio/ByteBuffer;\n+       226: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        229: aload_0\n-       230: getfield      #30                 // Field dwordBuf:[B\n-       233: invokestatic  #166                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n-       236: putfield      #163                // Field centralDirectoryStartRelativeOffset:J\n-       239: aload_0\n-       240: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-       243: checkcast     #39                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-       246: aload_0\n-       247: getfield      #162                // Field centralDirectoryStartDiskNumber:J\n-       250: aload_0\n-       251: getfield      #163                // Field centralDirectoryStartRelativeOffset:J\n-       254: invokevirtual #164                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n-       257: pop\n-       258: goto          316\n-       261: aload_0\n-       262: bipush        44\n-       264: invokespecial #158                // Method skipBytes:(I)V\n-       267: aload_0\n-       268: getfield      #35                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-       271: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-       274: pop\n-       275: aload_0\n-       276: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-       279: aload_0\n-       280: getfield      #35                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-       283: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-       286: aload_0\n-       287: lconst_0\n-       288: putfield      #162                // Field centralDirectoryStartDiskNumber:J\n-       291: aload_0\n+       230: aload_0\n+       231: getfield      #103                // Field dwordBuf:[B\n+       234: invokestatic  #523                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+       237: putfield      #511                // Field centralDirectoryStartRelativeOffset:J\n+       240: aload_0\n+       241: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       244: checkcast     #135                // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+       247: aload_0\n+       248: getfield      #508                // Field centralDirectoryStartDiskNumber:J\n+       251: aload_0\n+       252: getfield      #511                // Field centralDirectoryStartRelativeOffset:J\n+       255: invokevirtual #514                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+       258: pop\n+       259: goto          317\n+       262: aload_0\n+       263: bipush        44\n+       265: invokespecial #494                // Method skipBytes:(I)V\n+       268: aload_0\n+       269: getfield      #122                // Field dwordBbuf:Ljava/nio/ByteBuffer;\n+       272: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+       275: pop\n+       276: aload_0\n+       277: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       280: aload_0\n+       281: getfield      #122                // Field dwordBbuf:Ljava/nio/ByteBuffer;\n+       284: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       287: aload_0\n+       288: lconst_0\n+       289: putfield      #508                // Field centralDirectoryStartDiskNumber:J\n        292: aload_0\n-       293: getfield      #30                 // Field dwordBuf:[B\n-       296: invokestatic  #166                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n-       299: putfield      #163                // Field centralDirectoryStartRelativeOffset:J\n-       302: aload_0\n-       303: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-       306: aload_0\n-       307: getfield      #163                // Field centralDirectoryStartRelativeOffset:J\n-       310: invokeinterface #155,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-       315: pop\n-       316: return\n+       293: aload_0\n+       294: getfield      #103                // Field dwordBuf:[B\n+       297: invokestatic  #523                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+       300: putfield      #511                // Field centralDirectoryStartRelativeOffset:J\n+       303: aload_0\n+       304: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       307: aload_0\n+       308: getfield      #511                // Field centralDirectoryStartRelativeOffset:J\n+       311: invokeinterface #484,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+       316: pop\n+       317: return\n       LineNumberTable:\n         line 1178: 0\n         line 1179: 7\n         line 1180: 15\n         line 1181: 26\n         line 1183: 34\n         line 1184: 42\n@@ -2805,384 +2805,384 @@\n         line 1191: 82\n         line 1192: 90\n         line 1193: 101\n         line 1196: 118\n         line 1197: 126\n         line 1198: 137\n         line 1199: 150\n-        line 1203: 160\n-        line 1204: 167\n-        line 1206: 173\n-        line 1207: 181\n-        line 1208: 192\n-        line 1210: 203\n-        line 1212: 209\n-        line 1213: 217\n-        line 1214: 228\n-        line 1215: 239\n-        line 1216: 254\n-        line 1218: 261\n-        line 1220: 267\n-        line 1221: 275\n-        line 1222: 286\n-        line 1223: 291\n-        line 1224: 302\n-        line 1226: 316\n+        line 1203: 161\n+        line 1204: 168\n+        line 1206: 174\n+        line 1207: 182\n+        line 1208: 193\n+        line 1210: 204\n+        line 1212: 210\n+        line 1213: 218\n+        line 1214: 229\n+        line 1215: 240\n+        line 1216: 255\n+        line 1218: 262\n+        line 1220: 268\n+        line 1221: 276\n+        line 1222: 287\n+        line 1223: 292\n+        line 1224: 303\n+        line 1226: 317\n       StackMapTable: number_of_entries = 5\n         frame_type = 251 /* same_frame_extended */\n           offset_delta = 77\n         frame_type = 40 /* same */\n-        frame_type = 41 /* same */\n+        frame_type = 42 /* same */\n         frame_type = 251 /* same_frame_extended */\n           offset_delta = 100\n         frame_type = 54 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   private void positionAtEndOfCentralDirectoryRecord() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=2, args_size=1\n          0: aload_0\n-         1: ldc2_w        #171                // long 22l\n-         4: ldc2_w        #173                // long 65557l\n-         7: getstatic     #175                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n-        10: invokespecial #176                // Method tryToLocateSignature:(JJ[B)Z\n+         1: ldc2_w        #536                // long 22l\n+         4: ldc2_w        #538                // long 65557l\n+         7: getstatic     #540                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+        10: invokespecial #543                // Method tryToLocateSignature:(JJ[B)Z\n         13: istore_1\n         14: iload_1\n-        15: ifne          28\n-        18: new           #168                // class java/util/zip/ZipException\n+        15: ifne          29\n+        18: new           #531                // class java/util/zip/ZipException\n         21: dup\n-        22: ldc           #177                // String Archive is not a ZIP archive\n-        24: invokespecial #170                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-        27: athrow\n-        28: return\n+        22: ldc_w         #547                // String Archive is not a ZIP archive\n+        25: invokespecial #535                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        28: athrow\n+        29: return\n       LineNumberTable:\n         line 1234: 0\n         line 1236: 14\n         line 1237: 18\n-        line 1239: 28\n+        line 1239: 29\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n-          offset_delta = 28\n+          offset_delta = 29\n           locals = [ int ]\n     Exceptions:\n       throws java.io.IOException\n \n   private void readCentralDirectoryEntry(java.util.Map<org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment>) throws java.io.IOException;\n     descriptor: (Ljava/util/Map;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=19, args_size=2\n          0: aload_0\n-         1: getfield      #37                 // Field cfhBbuf:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+         1: getfield      #129                // Field cfhBbuf:Ljava/nio/ByteBuffer;\n+         4: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n          7: pop\n          8: aload_0\n-         9: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         9: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         12: aload_0\n-        13: getfield      #37                 // Field cfhBbuf:Ljava/nio/ByteBuffer;\n-        16: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        13: getfield      #129                // Field cfhBbuf:Ljava/nio/ByteBuffer;\n+        16: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         19: iconst_0\n         20: istore_2\n-        21: new           #98                 // class org/apache/commons/compress/archivers/zip/ZipFile$Entry\n+        21: new           #323                // class org/apache/commons/compress/archivers/zip/ZipFile$Entry\n         24: dup\n-        25: invokespecial #178                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.\"<init>\":()V\n+        25: invokespecial #549                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.\"<init>\":()V\n         28: astore_3\n         29: aload_0\n-        30: getfield      #32                 // Field cfhBuf:[B\n+        30: getfield      #110                // Field cfhBuf:[B\n         33: iload_2\n-        34: invokestatic  #179                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        34: invokestatic  #550                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n         37: istore        4\n         39: iinc          2, 2\n         42: aload_3\n         43: iload         4\n-        45: invokevirtual #180                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V\n+        45: invokevirtual #553                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V\n         48: aload_3\n         49: iload         4\n         51: bipush        8\n         53: ishr\n         54: bipush        15\n         56: iand\n-        57: invokevirtual #181                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V\n+        57: invokevirtual #556                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V\n         60: aload_3\n         61: aload_0\n-        62: getfield      #32                 // Field cfhBuf:[B\n+        62: getfield      #110                // Field cfhBuf:[B\n         65: iload_2\n-        66: invokestatic  #179                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        69: invokevirtual #182                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V\n+        66: invokestatic  #550                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        69: invokevirtual #559                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V\n         72: iinc          2, 2\n         75: aload_0\n-        76: getfield      #32                 // Field cfhBuf:[B\n+        76: getfield      #110                // Field cfhBuf:[B\n         79: iload_2\n-        80: invokestatic  #183                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+        80: invokestatic  #562                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n         83: astore        5\n         85: aload         5\n-        87: invokevirtual #184                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n+        87: invokevirtual #566                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n         90: istore        6\n         92: iload         6\n         94: ifeq          103\n-        97: getstatic     #185                // Field org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        97: getstatic     #569                // Field org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        100: goto          107\n        103: aload_0\n-       104: getfield      #44                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       104: getfield      #151                // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        107: astore        7\n        109: iload         6\n        111: ifeq          121\n        114: aload_3\n-       115: getstatic     #186                // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-       118: invokevirtual #187                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+       115: getstatic     #572                // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+       118: invokevirtual #578                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n        121: aload_3\n        122: aload         5\n-       124: invokevirtual #188                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+       124: invokevirtual #582                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n        127: aload_3\n        128: aload_0\n-       129: getfield      #32                 // Field cfhBuf:[B\n+       129: getfield      #110                // Field cfhBuf:[B\n        132: iload_2\n-       133: invokestatic  #179                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       136: invokevirtual #189                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V\n+       133: invokestatic  #550                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       136: invokevirtual #586                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V\n        139: iinc          2, 2\n        142: aload_3\n        143: aload_0\n-       144: getfield      #32                 // Field cfhBuf:[B\n+       144: getfield      #110                // Field cfhBuf:[B\n        147: iload_2\n-       148: invokestatic  #179                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       151: invokevirtual #190                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V\n+       148: invokestatic  #550                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       151: invokevirtual #589                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V\n        154: iinc          2, 2\n        157: aload_0\n-       158: getfield      #32                 // Field cfhBuf:[B\n+       158: getfield      #110                // Field cfhBuf:[B\n        161: iload_2\n-       162: invokestatic  #191                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       165: invokestatic  #192                // Method org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n+       162: invokestatic  #592                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       165: invokestatic  #595                // Method org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n        168: lstore        8\n        170: aload_3\n        171: lload         8\n-       173: invokevirtual #193                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V\n+       173: invokevirtual #599                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V\n        176: iinc          2, 4\n        179: aload_3\n        180: aload_0\n-       181: getfield      #32                 // Field cfhBuf:[B\n+       181: getfield      #110                // Field cfhBuf:[B\n        184: iload_2\n-       185: invokestatic  #191                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       188: invokevirtual #194                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V\n+       185: invokestatic  #592                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       188: invokevirtual #603                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V\n        191: iinc          2, 4\n        194: aload_0\n-       195: getfield      #32                 // Field cfhBuf:[B\n+       195: getfield      #110                // Field cfhBuf:[B\n        198: iload_2\n-       199: invokestatic  #191                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       199: invokestatic  #592                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n        202: lstore        10\n        204: lload         10\n        206: lconst_0\n        207: lcmp\n-       208: ifge          221\n-       211: new           #49                 // class java/io/IOException\n+       208: ifge          222\n+       211: new           #169                // class java/io/IOException\n        214: dup\n-       215: ldc           #195                // String broken archive, entry with negative compressed size\n-       217: invokespecial #150                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       220: athrow\n-       221: aload_3\n-       222: lload         10\n-       224: invokevirtual #196                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V\n-       227: iinc          2, 4\n-       230: aload_0\n-       231: getfield      #32                 // Field cfhBuf:[B\n-       234: iload_2\n-       235: invokestatic  #191                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       238: lstore        10\n-       240: lload         10\n-       242: lconst_0\n-       243: lcmp\n-       244: ifge          257\n-       247: new           #49                 // class java/io/IOException\n-       250: dup\n-       251: ldc           #197                // String broken archive, entry with negative size\n-       253: invokespecial #150                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       256: athrow\n-       257: aload_3\n-       258: lload         10\n-       260: invokevirtual #198                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V\n-       263: iinc          2, 4\n-       266: aload_0\n-       267: getfield      #32                 // Field cfhBuf:[B\n-       270: iload_2\n-       271: invokestatic  #179                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       274: istore        12\n-       276: iinc          2, 2\n-       279: iload         12\n-       281: ifge          294\n-       284: new           #49                 // class java/io/IOException\n-       287: dup\n-       288: ldc           #199                // String broken archive, entry with negative fileNameLen\n-       290: invokespecial #150                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       293: athrow\n-       294: aload_0\n-       295: getfield      #32                 // Field cfhBuf:[B\n-       298: iload_2\n-       299: invokestatic  #179                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       302: istore        13\n-       304: iinc          2, 2\n-       307: iload         13\n-       309: ifge          322\n-       312: new           #49                 // class java/io/IOException\n-       315: dup\n-       316: ldc           #200                // String broken archive, entry with negative extraLen\n-       318: invokespecial #150                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       321: athrow\n-       322: aload_0\n-       323: getfield      #32                 // Field cfhBuf:[B\n-       326: iload_2\n-       327: invokestatic  #179                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       330: istore        14\n-       332: iinc          2, 2\n-       335: iload         14\n-       337: ifge          350\n-       340: new           #49                 // class java/io/IOException\n-       343: dup\n-       344: ldc           #201                // String broken archive, entry with negative commentLen\n-       346: invokespecial #150                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       349: athrow\n-       350: aload_3\n-       351: aload_0\n-       352: getfield      #32                 // Field cfhBuf:[B\n-       355: iload_2\n-       356: invokestatic  #179                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       359: i2l\n-       360: invokevirtual #202                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDiskNumberStart:(J)V\n-       363: iinc          2, 2\n-       366: aload_3\n-       367: aload_0\n-       368: getfield      #32                 // Field cfhBuf:[B\n-       371: iload_2\n-       372: invokestatic  #179                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       375: invokevirtual #203                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V\n-       378: iinc          2, 2\n-       381: aload_3\n-       382: aload_0\n-       383: getfield      #32                 // Field cfhBuf:[B\n-       386: iload_2\n-       387: invokestatic  #191                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       390: invokevirtual #204                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V\n-       393: iinc          2, 4\n-       396: aload_0\n-       397: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-       400: iload         12\n-       402: invokestatic  #205                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n-       405: astore        15\n-       407: aload         15\n-       409: arraylength\n-       410: iload         12\n-       412: if_icmpge     423\n-       415: new           #206                // class java/io/EOFException\n-       418: dup\n-       419: invokespecial #207                // Method java/io/EOFException.\"<init>\":()V\n-       422: athrow\n-       423: aload_3\n-       424: aload         7\n-       426: aload         15\n-       428: invokeinterface #136,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-       433: aload         15\n-       435: invokevirtual #208                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V\n-       438: aload_3\n-       439: aload_0\n-       440: getfield      #32                 // Field cfhBuf:[B\n-       443: iload_2\n-       444: invokestatic  #191                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       447: aload_0\n-       448: getfield      #79                 // Field firstLocalFileHeaderOffset:J\n-       451: ladd\n-       452: invokevirtual #209                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V\n-       455: aload_0\n-       456: getfield      #25                 // Field entries:Ljava/util/List;\n-       459: aload_3\n-       460: invokeinterface #210,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       465: pop\n-       466: aload_0\n-       467: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-       470: iload         13\n-       472: invokestatic  #205                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n-       475: astore        16\n-       477: aload         16\n-       479: arraylength\n-       480: iload         13\n-       482: if_icmpge     493\n-       485: new           #206                // class java/io/EOFException\n-       488: dup\n-       489: invokespecial #207                // Method java/io/EOFException.\"<init>\":()V\n-       492: athrow\n-       493: aload_3\n-       494: aload         16\n-       496: invokevirtual #211                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V\n-       499: goto          546\n-       502: astore        17\n-       504: new           #168                // class java/util/zip/ZipException\n-       507: dup\n-       508: new           #50                 // class java/lang/StringBuilder\n-       511: dup\n-       512: invokespecial #51                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       515: ldc           #213                // String Invalid extra data in entry\n-       517: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       520: aload_3\n-       521: invokevirtual #214                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.getName:()Ljava/lang/String;\n-       524: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       527: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       530: invokespecial #170                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       533: astore        18\n-       535: aload         18\n-       537: aload         17\n-       539: invokevirtual #215                // Method java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-       542: pop\n-       543: aload         18\n-       545: athrow\n-       546: aload_0\n-       547: aload_3\n-       548: invokespecial #216                // Method setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-       551: aload_0\n-       552: aload_3\n-       553: invokespecial #217                // Method sanityCheckLFHOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-       556: aload_0\n-       557: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-       560: iload         14\n-       562: invokestatic  #205                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n-       565: astore        17\n-       567: aload         17\n-       569: arraylength\n-       570: iload         14\n-       572: if_icmpge     583\n-       575: new           #206                // class java/io/EOFException\n-       578: dup\n-       579: invokespecial #207                // Method java/io/EOFException.\"<init>\":()V\n-       582: athrow\n-       583: aload_3\n-       584: aload         7\n-       586: aload         17\n-       588: invokeinterface #136,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-       593: invokevirtual #218                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V\n-       596: iload         6\n-       598: ifne          628\n-       601: aload_0\n-       602: getfield      #45                 // Field useUnicodeExtraFields:Z\n-       605: ifeq          628\n-       608: aload_1\n-       609: aload_3\n-       610: new           #219                // class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n-       613: dup\n-       614: aload         15\n-       616: aload         17\n-       618: aconst_null\n-       619: invokespecial #220                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.\"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-       622: invokeinterface #221,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-       627: pop\n-       628: aload_3\n-       629: iconst_1\n-       630: invokevirtual #222                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V\n-       633: return\n+       215: ldc_w         #606                // String broken archive, entry with negative compressed size\n+       218: invokespecial #475                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       221: athrow\n+       222: aload_3\n+       223: lload         10\n+       225: invokevirtual #608                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V\n+       228: iinc          2, 4\n+       231: aload_0\n+       232: getfield      #110                // Field cfhBuf:[B\n+       235: iload_2\n+       236: invokestatic  #592                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       239: lstore        10\n+       241: lload         10\n+       243: lconst_0\n+       244: lcmp\n+       245: ifge          259\n+       248: new           #169                // class java/io/IOException\n+       251: dup\n+       252: ldc_w         #611                // String broken archive, entry with negative size\n+       255: invokespecial #475                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       258: athrow\n+       259: aload_3\n+       260: lload         10\n+       262: invokevirtual #613                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V\n+       265: iinc          2, 4\n+       268: aload_0\n+       269: getfield      #110                // Field cfhBuf:[B\n+       272: iload_2\n+       273: invokestatic  #550                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       276: istore        12\n+       278: iinc          2, 2\n+       281: iload         12\n+       283: ifge          297\n+       286: new           #169                // class java/io/IOException\n+       289: dup\n+       290: ldc_w         #616                // String broken archive, entry with negative fileNameLen\n+       293: invokespecial #475                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       296: athrow\n+       297: aload_0\n+       298: getfield      #110                // Field cfhBuf:[B\n+       301: iload_2\n+       302: invokestatic  #550                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       305: istore        13\n+       307: iinc          2, 2\n+       310: iload         13\n+       312: ifge          326\n+       315: new           #169                // class java/io/IOException\n+       318: dup\n+       319: ldc_w         #618                // String broken archive, entry with negative extraLen\n+       322: invokespecial #475                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       325: athrow\n+       326: aload_0\n+       327: getfield      #110                // Field cfhBuf:[B\n+       330: iload_2\n+       331: invokestatic  #550                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       334: istore        14\n+       336: iinc          2, 2\n+       339: iload         14\n+       341: ifge          355\n+       344: new           #169                // class java/io/IOException\n+       347: dup\n+       348: ldc_w         #620                // String broken archive, entry with negative commentLen\n+       351: invokespecial #475                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       354: athrow\n+       355: aload_3\n+       356: aload_0\n+       357: getfield      #110                // Field cfhBuf:[B\n+       360: iload_2\n+       361: invokestatic  #550                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       364: i2l\n+       365: invokevirtual #622                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDiskNumberStart:(J)V\n+       368: iinc          2, 2\n+       371: aload_3\n+       372: aload_0\n+       373: getfield      #110                // Field cfhBuf:[B\n+       376: iload_2\n+       377: invokestatic  #550                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       380: invokevirtual #625                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V\n+       383: iinc          2, 2\n+       386: aload_3\n+       387: aload_0\n+       388: getfield      #110                // Field cfhBuf:[B\n+       391: iload_2\n+       392: invokestatic  #592                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       395: invokevirtual #628                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V\n+       398: iinc          2, 4\n+       401: aload_0\n+       402: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       405: iload         12\n+       407: invokestatic  #631                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n+       410: astore        15\n+       412: aload         15\n+       414: arraylength\n+       415: iload         12\n+       417: if_icmpge     428\n+       420: new           #635                // class java/io/EOFException\n+       423: dup\n+       424: invokespecial #637                // Method java/io/EOFException.\"<init>\":()V\n+       427: athrow\n+       428: aload_3\n+       429: aload         7\n+       431: aload         15\n+       433: invokeinterface #428,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+       438: aload         15\n+       440: invokevirtual #638                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V\n+       443: aload_3\n+       444: aload_0\n+       445: getfield      #110                // Field cfhBuf:[B\n+       448: iload_2\n+       449: invokestatic  #592                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       452: aload_0\n+       453: getfield      #260                // Field firstLocalFileHeaderOffset:J\n+       456: ladd\n+       457: invokevirtual #642                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V\n+       460: aload_0\n+       461: getfield      #86                 // Field entries:Ljava/util/List;\n+       464: aload_3\n+       465: invokeinterface #645,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       470: pop\n+       471: aload_0\n+       472: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       475: iload         13\n+       477: invokestatic  #631                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n+       480: astore        16\n+       482: aload         16\n+       484: arraylength\n+       485: iload         13\n+       487: if_icmpge     498\n+       490: new           #635                // class java/io/EOFException\n+       493: dup\n+       494: invokespecial #637                // Method java/io/EOFException.\"<init>\":()V\n+       497: athrow\n+       498: aload_3\n+       499: aload         16\n+       501: invokevirtual #649                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V\n+       504: goto          552\n+       507: astore        17\n+       509: new           #531                // class java/util/zip/ZipException\n+       512: dup\n+       513: new           #171                // class java/lang/StringBuilder\n+       516: dup\n+       517: invokespecial #173                // Method java/lang/StringBuilder.\"<init>\":()V\n+       520: ldc_w         #654                // String Invalid extra data in entry\n+       523: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       526: aload_3\n+       527: invokevirtual #656                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.getName:()Ljava/lang/String;\n+       530: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       533: invokevirtual #180                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       536: invokespecial #535                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       539: astore        18\n+       541: aload         18\n+       543: aload         17\n+       545: invokevirtual #659                // Method java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+       548: pop\n+       549: aload         18\n+       551: athrow\n+       552: aload_0\n+       553: aload_3\n+       554: invokespecial #663                // Method setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+       557: aload_0\n+       558: aload_3\n+       559: invokespecial #666                // Method sanityCheckLFHOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+       562: aload_0\n+       563: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       566: iload         14\n+       568: invokestatic  #631                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n+       571: astore        17\n+       573: aload         17\n+       575: arraylength\n+       576: iload         14\n+       578: if_icmpge     589\n+       581: new           #635                // class java/io/EOFException\n+       584: dup\n+       585: invokespecial #637                // Method java/io/EOFException.\"<init>\":()V\n+       588: athrow\n+       589: aload_3\n+       590: aload         7\n+       592: aload         17\n+       594: invokeinterface #428,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+       599: invokevirtual #669                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V\n+       602: iload         6\n+       604: ifne          634\n+       607: aload_0\n+       608: getfield      #155                // Field useUnicodeExtraFields:Z\n+       611: ifeq          634\n+       614: aload_1\n+       615: aload_3\n+       616: new           #672                // class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n+       619: dup\n+       620: aload         15\n+       622: aload         17\n+       624: aconst_null\n+       625: invokespecial #674                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.\"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+       628: invokeinterface #677,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+       633: pop\n+       634: aload_3\n+       635: iconst_1\n+       636: invokevirtual #681                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V\n+       639: return\n       Exception table:\n          from    to  target type\n-           493   499   502   Class java/lang/RuntimeException\n+           498   504   507   Class java/lang/RuntimeException\n       LineNumberTable:\n         line 1253: 0\n         line 1254: 8\n         line 1255: 19\n         line 1256: 21\n         line 1258: 29\n         line 1259: 39\n@@ -3204,192 +3204,192 @@\n         line 1283: 170\n         line 1284: 176\n         line 1286: 179\n         line 1287: 191\n         line 1289: 194\n         line 1290: 204\n         line 1291: 211\n-        line 1293: 221\n-        line 1294: 227\n-        line 1296: 230\n-        line 1297: 240\n-        line 1298: 247\n-        line 1300: 257\n-        line 1301: 263\n-        line 1303: 266\n-        line 1304: 276\n-        line 1305: 279\n-        line 1306: 284\n-        line 1309: 294\n-        line 1310: 304\n-        line 1311: 307\n-        line 1312: 312\n-        line 1315: 322\n-        line 1316: 332\n-        line 1317: 335\n-        line 1318: 340\n-        line 1321: 350\n-        line 1322: 363\n-        line 1324: 366\n-        line 1325: 378\n-        line 1327: 381\n-        line 1328: 393\n-        line 1330: 396\n-        line 1331: 407\n-        line 1332: 415\n-        line 1334: 423\n-        line 1337: 438\n-        line 1339: 455\n-        line 1341: 466\n-        line 1342: 477\n-        line 1343: 485\n-        line 1346: 493\n-        line 1351: 499\n-        line 1347: 502\n-        line 1348: 504\n-        line 1349: 535\n-        line 1350: 543\n-        line 1353: 546\n-        line 1354: 551\n-        line 1356: 556\n-        line 1357: 567\n-        line 1358: 575\n-        line 1360: 583\n-        line 1362: 596\n-        line 1363: 608\n-        line 1366: 628\n-        line 1367: 633\n+        line 1293: 222\n+        line 1294: 228\n+        line 1296: 231\n+        line 1297: 241\n+        line 1298: 248\n+        line 1300: 259\n+        line 1301: 265\n+        line 1303: 268\n+        line 1304: 278\n+        line 1305: 281\n+        line 1306: 286\n+        line 1309: 297\n+        line 1310: 307\n+        line 1311: 310\n+        line 1312: 315\n+        line 1315: 326\n+        line 1316: 336\n+        line 1317: 339\n+        line 1318: 344\n+        line 1321: 355\n+        line 1322: 368\n+        line 1324: 371\n+        line 1325: 383\n+        line 1327: 386\n+        line 1328: 398\n+        line 1330: 401\n+        line 1331: 412\n+        line 1332: 420\n+        line 1334: 428\n+        line 1337: 443\n+        line 1339: 460\n+        line 1341: 471\n+        line 1342: 482\n+        line 1343: 490\n+        line 1346: 498\n+        line 1351: 504\n+        line 1347: 507\n+        line 1348: 509\n+        line 1349: 541\n+        line 1350: 549\n+        line 1353: 552\n+        line 1354: 557\n+        line 1356: 562\n+        line 1357: 573\n+        line 1358: 581\n+        line 1360: 589\n+        line 1362: 602\n+        line 1363: 614\n+        line 1366: 634\n+        line 1367: 639\n       StackMapTable: number_of_entries = 14\n         frame_type = 255 /* full_frame */\n           offset_delta = 103\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class java/util/Map, int, class org/apache/commons/compress/archivers/zip/ZipFile$Entry, int, class org/apache/commons/compress/archivers/zip/GeneralPurposeBit, int ]\n           stack = []\n         frame_type = 67 /* same_locals_1_stack_item */\n           stack = [ class org/apache/commons/compress/archivers/zip/ZipEncoding ]\n         frame_type = 252 /* append */\n           offset_delta = 13\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipEncoding ]\n         frame_type = 253 /* append */\n-          offset_delta = 99\n+          offset_delta = 100\n           locals = [ long, long ]\n-        frame_type = 35 /* same */\n+        frame_type = 36 /* same */\n         frame_type = 252 /* append */\n-          offset_delta = 36\n+          offset_delta = 37\n           locals = [ int ]\n         frame_type = 252 /* append */\n-          offset_delta = 27\n+          offset_delta = 28\n           locals = [ int ]\n         frame_type = 252 /* append */\n-          offset_delta = 27\n+          offset_delta = 28\n           locals = [ int ]\n         frame_type = 252 /* append */\n           offset_delta = 72\n           locals = [ class \"[B\" ]\n         frame_type = 252 /* append */\n           offset_delta = 69\n           locals = [ class \"[B\" ]\n         frame_type = 72 /* same_locals_1_stack_item */\n           stack = [ class java/lang/RuntimeException ]\n-        frame_type = 43 /* same */\n+        frame_type = 44 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 36\n           locals = [ class \"[B\" ]\n         frame_type = 44 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #438                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n+    Signature: #913                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n \n   private void resolveLocalFileHeaderData(java.util.Map<org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment>) throws java.io.IOException;\n     descriptor: (Ljava/util/Map;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=11, args_size=2\n          0: aload_0\n-         1: getfield      #25                 // Field entries:Ljava/util/List;\n-         4: invokeinterface #223,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n+         1: getfield      #86                 // Field entries:Ljava/util/List;\n+         4: invokeinterface #684,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n          9: astore_2\n         10: aload_2\n-        11: invokeinterface #224,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n-        16: ifeq          185\n+        11: invokeinterface #688,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n+        16: ifeq          186\n         19: aload_2\n-        20: invokeinterface #225,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n-        25: checkcast     #63                 // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+        20: invokeinterface #693,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        25: checkcast     #212                // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n         28: astore_3\n         29: aload_3\n-        30: checkcast     #98                 // class org/apache/commons/compress/archivers/zip/ZipFile$Entry\n+        30: checkcast     #323                // class org/apache/commons/compress/archivers/zip/ZipFile$Entry\n         33: astore        4\n         35: aload_0\n         36: aload         4\n-        38: invokespecial #85                 // Method setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n+        38: invokespecial #276                // Method setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n         41: astore        5\n         43: aload         5\n         45: iconst_0\n         46: iaload\n         47: istore        6\n         49: aload         5\n         51: iconst_1\n         52: iaload\n         53: istore        7\n         55: aload_0\n         56: iload         6\n-        58: invokespecial #158                // Method skipBytes:(I)V\n+        58: invokespecial #494                // Method skipBytes:(I)V\n         61: aload_0\n-        62: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        62: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         65: iload         7\n-        67: invokestatic  #205                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n+        67: invokestatic  #631                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B\n         70: astore        8\n         72: aload         8\n         74: arraylength\n         75: iload         7\n         77: if_icmpge     88\n-        80: new           #206                // class java/io/EOFException\n+        80: new           #635                // class java/io/EOFException\n         83: dup\n-        84: invokespecial #207                // Method java/io/EOFException.\"<init>\":()V\n+        84: invokespecial #637                // Method java/io/EOFException.\"<init>\":()V\n         87: athrow\n         88: aload         4\n         90: aload         8\n-        92: invokevirtual #226                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V\n-        95: goto          143\n+        92: invokevirtual #696                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V\n+        95: goto          144\n         98: astore        9\n-       100: new           #168                // class java/util/zip/ZipException\n+       100: new           #531                // class java/util/zip/ZipException\n        103: dup\n-       104: new           #50                 // class java/lang/StringBuilder\n+       104: new           #171                // class java/lang/StringBuilder\n        107: dup\n-       108: invokespecial #51                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       111: ldc           #213                // String Invalid extra data in entry\n-       113: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       116: aload         4\n-       118: invokevirtual #214                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.getName:()Ljava/lang/String;\n-       121: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       124: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       127: invokespecial #170                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       130: astore        10\n-       132: aload         10\n-       134: aload         9\n-       136: invokevirtual #215                // Method java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-       139: pop\n-       140: aload         10\n-       142: athrow\n-       143: aload_1\n-       144: aload         4\n-       146: invokeinterface #227,  2          // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-       151: ifeq          182\n-       154: aload_1\n-       155: aload         4\n-       157: invokeinterface #87,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-       162: checkcast     #219                // class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n-       165: astore        9\n-       167: aload         4\n-       169: aload         9\n-       171: invokestatic  #228                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-       174: aload         9\n-       176: invokestatic  #229                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-       179: invokestatic  #230                // Method org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-       182: goto          10\n-       185: return\n+       108: invokespecial #173                // Method java/lang/StringBuilder.\"<init>\":()V\n+       111: ldc_w         #654                // String Invalid extra data in entry\n+       114: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       117: aload         4\n+       119: invokevirtual #656                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.getName:()Ljava/lang/String;\n+       122: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       125: invokevirtual #180                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       128: invokespecial #535                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       131: astore        10\n+       133: aload         10\n+       135: aload         9\n+       137: invokevirtual #659                // Method java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+       140: pop\n+       141: aload         10\n+       143: athrow\n+       144: aload_1\n+       145: aload         4\n+       147: invokeinterface #699,  2          // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+       152: ifeq          183\n+       155: aload_1\n+       156: aload         4\n+       158: invokeinterface #286,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+       163: checkcast     #672                // class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n+       166: astore        9\n+       168: aload         4\n+       170: aload         9\n+       172: invokestatic  #702                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+       175: aload         9\n+       177: invokestatic  #706                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+       180: invokestatic  #709                // Method org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+       183: goto          10\n+       186: return\n       Exception table:\n          from    to  target type\n             88    95    98   Class java/lang/RuntimeException\n       LineNumberTable:\n         line 1379: 0\n         line 1382: 29\n         line 1383: 35\n@@ -3399,283 +3399,283 @@\n         line 1387: 61\n         line 1388: 72\n         line 1389: 80\n         line 1392: 88\n         line 1397: 95\n         line 1393: 98\n         line 1394: 100\n-        line 1395: 132\n-        line 1396: 140\n-        line 1399: 143\n-        line 1400: 154\n-        line 1401: 167\n-        line 1402: 176\n-        line 1401: 179\n-        line 1404: 182\n-        line 1405: 185\n+        line 1395: 133\n+        line 1396: 141\n+        line 1399: 144\n+        line 1400: 155\n+        line 1401: 168\n+        line 1402: 177\n+        line 1401: 180\n+        line 1404: 183\n+        line 1405: 186\n       StackMapTable: number_of_entries = 6\n         frame_type = 252 /* append */\n           offset_delta = 10\n           locals = [ class java/util/Iterator ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 77\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class java/util/Map, class java/util/Iterator, class org/apache/commons/compress/archivers/zip/ZipArchiveEntry, class org/apache/commons/compress/archivers/zip/ZipFile$Entry, class \"[I\", int, int, class \"[B\" ]\n           stack = []\n         frame_type = 73 /* same_locals_1_stack_item */\n           stack = [ class java/lang/RuntimeException ]\n-        frame_type = 44 /* same */\n+        frame_type = 45 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 38\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class java/util/Map, class java/util/Iterator ]\n           stack = []\n         frame_type = 250 /* chop */\n           offset_delta = 2\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #438                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n+    Signature: #913                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n \n   private void sanityCheckLFHOffset(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_1\n-         1: invokevirtual #231                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+         1: invokevirtual #713                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n          4: lconst_0\n          5: lcmp\n-         6: ifge          19\n-         9: new           #49                 // class java/io/IOException\n+         6: ifge          20\n+         9: new           #169                // class java/io/IOException\n         12: dup\n-        13: ldc           #232                // String broken archive, entry with negative disk number\n-        15: invokespecial #150                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        18: athrow\n-        19: aload_1\n-        20: invokevirtual #233                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-        23: lconst_0\n-        24: lcmp\n-        25: ifge          38\n-        28: new           #49                 // class java/io/IOException\n-        31: dup\n-        32: ldc           #234                // String broken archive, entry with negative local file header offset\n-        34: invokespecial #150                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        37: athrow\n-        38: aload_0\n-        39: getfield      #40                 // Field isSplitZipArchive:Z\n-        42: ifeq          151\n-        45: aload_1\n-        46: invokevirtual #231                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n-        49: aload_0\n-        50: getfield      #162                // Field centralDirectoryStartDiskNumber:J\n-        53: lcmp\n-        54: ifle          92\n-        57: new           #49                 // class java/io/IOException\n-        60: dup\n-        61: new           #50                 // class java/lang/StringBuilder\n-        64: dup\n-        65: invokespecial #51                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        68: ldc           #235                // String local file header for\n-        70: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        73: aload_1\n-        74: invokevirtual #236                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-        77: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        80: ldc           #237                // String  starts on a later disk than central directory\n-        82: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        85: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        88: invokespecial #150                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        91: athrow\n-        92: aload_1\n-        93: invokevirtual #231                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n-        96: aload_0\n-        97: getfield      #162                // Field centralDirectoryStartDiskNumber:J\n-       100: lcmp\n-       101: ifne          198\n-       104: aload_1\n-       105: invokevirtual #233                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-       108: aload_0\n-       109: getfield      #163                // Field centralDirectoryStartRelativeOffset:J\n-       112: lcmp\n-       113: ifle          198\n-       116: new           #49                 // class java/io/IOException\n-       119: dup\n-       120: new           #50                 // class java/lang/StringBuilder\n+        13: ldc_w         #716                // String broken archive, entry with negative disk number\n+        16: invokespecial #475                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        19: athrow\n+        20: aload_1\n+        21: invokevirtual #718                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+        24: lconst_0\n+        25: lcmp\n+        26: ifge          40\n+        29: new           #169                // class java/io/IOException\n+        32: dup\n+        33: ldc_w         #721                // String broken archive, entry with negative local file header offset\n+        36: invokespecial #475                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        39: athrow\n+        40: aload_0\n+        41: getfield      #137                // Field isSplitZipArchive:Z\n+        44: ifeq          157\n+        47: aload_1\n+        48: invokevirtual #713                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+        51: aload_0\n+        52: getfield      #508                // Field centralDirectoryStartDiskNumber:J\n+        55: lcmp\n+        56: ifle          96\n+        59: new           #169                // class java/io/IOException\n+        62: dup\n+        63: new           #171                // class java/lang/StringBuilder\n+        66: dup\n+        67: invokespecial #173                // Method java/lang/StringBuilder.\"<init>\":()V\n+        70: ldc_w         #723                // String local file header for\n+        73: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        76: aload_1\n+        77: invokevirtual #725                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+        80: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        83: ldc_w         #726                // String  starts on a later disk than central directory\n+        86: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        89: invokevirtual #180                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        92: invokespecial #475                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        95: athrow\n+        96: aload_1\n+        97: invokevirtual #713                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+       100: aload_0\n+       101: getfield      #508                // Field centralDirectoryStartDiskNumber:J\n+       104: lcmp\n+       105: ifne          206\n+       108: aload_1\n+       109: invokevirtual #718                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+       112: aload_0\n+       113: getfield      #511                // Field centralDirectoryStartRelativeOffset:J\n+       116: lcmp\n+       117: ifle          206\n+       120: new           #169                // class java/io/IOException\n        123: dup\n-       124: invokespecial #51                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       127: ldc           #235                // String local file header for\n-       129: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       132: aload_1\n-       133: invokevirtual #236                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-       136: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       139: ldc           #238                // String  starts after central directory\n-       141: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       144: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       147: invokespecial #150                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       150: athrow\n-       151: aload_1\n-       152: invokevirtual #233                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-       155: aload_0\n-       156: getfield      #143                // Field centralDirectoryStartOffset:J\n-       159: lcmp\n-       160: ifle          198\n-       163: new           #49                 // class java/io/IOException\n-       166: dup\n-       167: new           #50                 // class java/lang/StringBuilder\n-       170: dup\n-       171: invokespecial #51                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       174: ldc           #235                // String local file header for\n-       176: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       179: aload_1\n-       180: invokevirtual #236                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-       183: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       186: ldc           #238                // String  starts after central directory\n-       188: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       191: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       194: invokespecial #150                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       197: athrow\n-       198: return\n+       124: new           #171                // class java/lang/StringBuilder\n+       127: dup\n+       128: invokespecial #173                // Method java/lang/StringBuilder.\"<init>\":()V\n+       131: ldc_w         #723                // String local file header for\n+       134: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       137: aload_1\n+       138: invokevirtual #725                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+       141: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       144: ldc_w         #728                // String  starts after central directory\n+       147: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       150: invokevirtual #180                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       153: invokespecial #475                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       156: athrow\n+       157: aload_1\n+       158: invokevirtual #718                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+       161: aload_0\n+       162: getfield      #450                // Field centralDirectoryStartOffset:J\n+       165: lcmp\n+       166: ifle          206\n+       169: new           #169                // class java/io/IOException\n+       172: dup\n+       173: new           #171                // class java/lang/StringBuilder\n+       176: dup\n+       177: invokespecial #173                // Method java/lang/StringBuilder.\"<init>\":()V\n+       180: ldc_w         #723                // String local file header for\n+       183: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       186: aload_1\n+       187: invokevirtual #725                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+       190: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       193: ldc_w         #728                // String  starts after central directory\n+       196: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       199: invokevirtual #180                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       202: invokespecial #475                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       205: athrow\n+       206: return\n       LineNumberTable:\n         line 1408: 0\n         line 1409: 9\n-        line 1411: 19\n-        line 1412: 28\n-        line 1414: 38\n-        line 1415: 45\n-        line 1416: 57\n-        line 1418: 92\n-        line 1419: 105\n-        line 1420: 116\n-        line 1422: 151\n-        line 1423: 163\n-        line 1425: 198\n+        line 1411: 20\n+        line 1412: 29\n+        line 1414: 40\n+        line 1415: 47\n+        line 1416: 59\n+        line 1418: 96\n+        line 1419: 109\n+        line 1420: 120\n+        line 1422: 157\n+        line 1423: 169\n+        line 1425: 206\n       StackMapTable: number_of_entries = 5\n+        frame_type = 20 /* same */\n         frame_type = 19 /* same */\n-        frame_type = 18 /* same */\n-        frame_type = 53 /* same */\n-        frame_type = 58 /* same */\n-        frame_type = 46 /* same */\n+        frame_type = 55 /* same */\n+        frame_type = 60 /* same */\n+        frame_type = 48 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   private int[] setDataOffset(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=6, args_size=2\n          0: aload_1\n-         1: invokevirtual #233                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+         1: invokevirtual #718                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n          4: lstore_2\n          5: aload_0\n-         6: getfield      #40                 // Field isSplitZipArchive:Z\n+         6: getfield      #137                // Field isSplitZipArchive:Z\n          9: ifeq          49\n         12: aload_0\n-        13: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        16: checkcast     #39                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+        13: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        16: checkcast     #135                // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n         19: aload_1\n-        20: invokevirtual #231                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+        20: invokevirtual #713                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n         23: lload_2\n-        24: ldc2_w        #239                // long 26l\n+        24: ldc2_w        #730                // long 26l\n         27: ladd\n-        28: invokevirtual #164                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+        28: invokevirtual #514                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n         31: pop\n         32: aload_0\n-        33: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        36: invokeinterface #142,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n-        41: ldc2_w        #239                // long 26l\n+        33: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        36: invokeinterface #447,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        41: ldc2_w        #730                // long 26l\n         44: lsub\n         45: lstore_2\n         46: goto          64\n         49: aload_0\n-        50: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        50: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         53: lload_2\n-        54: ldc2_w        #239                // long 26l\n+        54: ldc2_w        #730                // long 26l\n         57: ladd\n-        58: invokeinterface #155,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        58: invokeinterface #484,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         63: pop\n         64: aload_0\n-        65: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        68: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        65: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        68: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n         71: pop\n         72: aload_0\n-        73: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        73: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         76: aload_0\n-        77: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        80: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        77: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        80: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         83: aload_0\n-        84: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        87: invokevirtual #241                // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+        84: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        87: invokevirtual #732                // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n         90: pop\n         91: aload_0\n-        92: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        92: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n         95: aload_0\n-        96: getfield      #33                 // Field shortBuf:[B\n-        99: invokevirtual #242                // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n+        96: getfield      #113                // Field shortBuf:[B\n+        99: invokevirtual #735                // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n        102: pop\n        103: aload_0\n-       104: getfield      #33                 // Field shortBuf:[B\n-       107: invokestatic  #161                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+       104: getfield      #113                // Field shortBuf:[B\n+       107: invokestatic  #503                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n        110: istore        4\n        112: aload_0\n-       113: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n+       113: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n        116: aload_0\n-       117: getfield      #33                 // Field shortBuf:[B\n-       120: invokevirtual #242                // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n+       117: getfield      #113                // Field shortBuf:[B\n+       120: invokevirtual #735                // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n        123: pop\n        124: aload_0\n-       125: getfield      #33                 // Field shortBuf:[B\n-       128: invokestatic  #161                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+       125: getfield      #113                // Field shortBuf:[B\n+       128: invokestatic  #503                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n        131: istore        5\n        133: aload_1\n        134: lload_2\n-       135: ldc2_w        #239                // long 26l\n+       135: ldc2_w        #730                // long 26l\n        138: ladd\n-       139: ldc2_w        #243                // long 2l\n+       139: ldc2_w        #737                // long 2l\n        142: ladd\n-       143: ldc2_w        #243                // long 2l\n+       143: ldc2_w        #737                // long 2l\n        146: ladd\n        147: iload         4\n        149: i2l\n        150: ladd\n        151: iload         5\n        153: i2l\n        154: ladd\n-       155: invokevirtual #245                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n+       155: invokevirtual #739                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n        158: aload_1\n-       159: invokevirtual #81                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n+       159: invokevirtual #268                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n        162: aload_1\n-       163: invokevirtual #132                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+       163: invokevirtual #415                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n        166: ladd\n        167: aload_0\n-       168: getfield      #143                // Field centralDirectoryStartOffset:J\n+       168: getfield      #450                // Field centralDirectoryStartOffset:J\n        171: lcmp\n-       172: ifle          210\n-       175: new           #49                 // class java/io/IOException\n+       172: ifle          212\n+       175: new           #169                // class java/io/IOException\n        178: dup\n-       179: new           #50                 // class java/lang/StringBuilder\n+       179: new           #171                // class java/lang/StringBuilder\n        182: dup\n-       183: invokespecial #51                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       186: ldc           #246                // String data for\n-       188: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       191: aload_1\n-       192: invokevirtual #236                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-       195: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       198: ldc           #247                // String  overlaps with central directory.\n-       200: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       203: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       206: invokespecial #150                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       209: athrow\n-       210: iconst_2\n-       211: newarray       int\n-       213: dup\n-       214: iconst_0\n-       215: iload         4\n-       217: iastore\n-       218: dup\n-       219: iconst_1\n-       220: iload         5\n-       222: iastore\n-       223: areturn\n+       183: invokespecial #173                // Method java/lang/StringBuilder.\"<init>\":()V\n+       186: ldc_w         #741                // String data for\n+       189: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       192: aload_1\n+       193: invokevirtual #725                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+       196: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       199: ldc_w         #743                // String  overlaps with central directory.\n+       202: invokevirtual #176                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       205: invokevirtual #180                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       208: invokespecial #475                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       211: athrow\n+       212: iconst_2\n+       213: newarray       int\n+       215: dup\n+       216: iconst_0\n+       217: iload         4\n+       219: iastore\n+       220: dup\n+       221: iconst_1\n+       222: iload         5\n+       224: iastore\n+       225: areturn\n       LineNumberTable:\n         line 1428: 0\n         line 1429: 5\n         line 1430: 12\n         line 1431: 20\n         line 1433: 32\n         line 1435: 49\n@@ -3685,198 +3685,198 @@\n         line 1440: 91\n         line 1441: 103\n         line 1442: 112\n         line 1443: 124\n         line 1444: 133\n         line 1446: 158\n         line 1447: 175\n-        line 1449: 210\n+        line 1449: 212\n       StackMapTable: number_of_entries = 3\n         frame_type = 252 /* append */\n           offset_delta = 49\n           locals = [ long ]\n         frame_type = 14 /* same */\n         frame_type = 253 /* append */\n-          offset_delta = 145\n+          offset_delta = 147\n           locals = [ int, int ]\n     Exceptions:\n       throws java.io.IOException\n \n   private void setSizesAndOffsetFromZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=10, args_size=2\n          0: aload_1\n-         1: getstatic     #248                // Field org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-         4: invokevirtual #249                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+         1: getstatic     #745                // Field org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         4: invokevirtual #751                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n          7: astore_2\n          8: aload_2\n-         9: ifnull        29\n+         9: ifnull        30\n         12: aload_2\n-        13: instanceof    #250                // class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-        16: ifne          29\n-        19: new           #168                // class java/util/zip/ZipException\n+        13: instanceof    #746                // class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+        16: ifne          30\n+        19: new           #531                // class java/util/zip/ZipException\n         22: dup\n-        23: ldc           #251                // String archive contains unparseable zip64 extra field\n-        25: invokespecial #170                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-        28: athrow\n-        29: aload_2\n-        30: checkcast     #250                // class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-        33: astore_3\n-        34: aload_3\n-        35: ifnull        274\n-        38: aload_1\n-        39: invokevirtual #252                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-        42: ldc2_w        #253                // long 4294967295l\n-        45: lcmp\n-        46: ifne          53\n-        49: iconst_1\n-        50: goto          54\n-        53: iconst_0\n-        54: istore        4\n-        56: aload_1\n-        57: invokevirtual #132                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-        60: ldc2_w        #253                // long 4294967295l\n-        63: lcmp\n-        64: ifne          71\n-        67: iconst_1\n-        68: goto          72\n-        71: iconst_0\n-        72: istore        5\n-        74: aload_1\n-        75: invokevirtual #233                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-        78: ldc2_w        #253                // long 4294967295l\n-        81: lcmp\n-        82: ifne          89\n-        85: iconst_1\n-        86: goto          90\n-        89: iconst_0\n-        90: istore        6\n-        92: aload_1\n-        93: invokevirtual #231                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n-        96: ldc2_w        #255                // long 65535l\n-        99: lcmp\n-       100: ifne          107\n-       103: iconst_1\n-       104: goto          108\n-       107: iconst_0\n-       108: istore        7\n-       110: aload_3\n-       111: iload         4\n-       113: iload         5\n-       115: iload         6\n-       117: iload         7\n-       119: invokevirtual #257                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V\n-       122: iload         4\n-       124: ifeq          162\n-       127: aload_3\n-       128: invokevirtual #258                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-       131: invokevirtual #259                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-       134: lstore        8\n-       136: lload         8\n-       138: lconst_0\n-       139: lcmp\n-       140: ifge          153\n-       143: new           #49                 // class java/io/IOException\n-       146: dup\n-       147: ldc           #197                // String broken archive, entry with negative size\n-       149: invokespecial #150                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       152: athrow\n-       153: aload_1\n-       154: lload         8\n-       156: invokevirtual #260                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n-       159: goto          182\n-       162: iload         5\n-       164: ifeq          182\n-       167: aload_3\n-       168: new           #261                // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-       171: dup\n-       172: aload_1\n-       173: invokevirtual #252                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-       176: invokespecial #262                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-       179: invokevirtual #263                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-       182: iload         5\n-       184: ifeq          222\n-       187: aload_3\n-       188: invokevirtual #264                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-       191: invokevirtual #259                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-       194: lstore        8\n-       196: lload         8\n-       198: lconst_0\n-       199: lcmp\n-       200: ifge          213\n-       203: new           #49                 // class java/io/IOException\n-       206: dup\n-       207: ldc           #195                // String broken archive, entry with negative compressed size\n-       209: invokespecial #150                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       212: athrow\n-       213: aload_1\n-       214: lload         8\n-       216: invokevirtual #265                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n-       219: goto          242\n-       222: iload         4\n-       224: ifeq          242\n-       227: aload_3\n-       228: new           #261                // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-       231: dup\n-       232: aload_1\n-       233: invokevirtual #132                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-       236: invokespecial #262                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-       239: invokevirtual #266                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-       242: iload         6\n-       244: ifeq          258\n-       247: aload_1\n-       248: aload_3\n-       249: invokevirtual #267                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-       252: invokevirtual #259                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-       255: invokevirtual #268                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n-       258: iload         7\n-       260: ifeq          274\n-       263: aload_1\n-       264: aload_3\n-       265: invokevirtual #269                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-       268: invokevirtual #270                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-       271: invokevirtual #271                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDiskNumberStart:(J)V\n-       274: return\n+        23: ldc_w         #755                // String archive contains unparseable zip64 extra field\n+        26: invokespecial #535                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        29: athrow\n+        30: aload_2\n+        31: checkcast     #746                // class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+        34: astore_3\n+        35: aload_3\n+        36: ifnull        277\n+        39: aload_1\n+        40: invokevirtual #757                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+        43: ldc2_w        #760                // long 4294967295l\n+        46: lcmp\n+        47: ifne          54\n+        50: iconst_1\n+        51: goto          55\n+        54: iconst_0\n+        55: istore        4\n+        57: aload_1\n+        58: invokevirtual #415                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+        61: ldc2_w        #760                // long 4294967295l\n+        64: lcmp\n+        65: ifne          72\n+        68: iconst_1\n+        69: goto          73\n+        72: iconst_0\n+        73: istore        5\n+        75: aload_1\n+        76: invokevirtual #718                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+        79: ldc2_w        #760                // long 4294967295l\n+        82: lcmp\n+        83: ifne          90\n+        86: iconst_1\n+        87: goto          91\n+        90: iconst_0\n+        91: istore        6\n+        93: aload_1\n+        94: invokevirtual #713                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+        97: ldc2_w        #762                // long 65535l\n+       100: lcmp\n+       101: ifne          108\n+       104: iconst_1\n+       105: goto          109\n+       108: iconst_0\n+       109: istore        7\n+       111: aload_3\n+       112: iload         4\n+       114: iload         5\n+       116: iload         6\n+       118: iload         7\n+       120: invokevirtual #764                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V\n+       123: iload         4\n+       125: ifeq          164\n+       128: aload_3\n+       129: invokevirtual #768                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       132: invokevirtual #771                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+       135: lstore        8\n+       137: lload         8\n+       139: lconst_0\n+       140: lcmp\n+       141: ifge          155\n+       144: new           #169                // class java/io/IOException\n+       147: dup\n+       148: ldc_w         #611                // String broken archive, entry with negative size\n+       151: invokespecial #475                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       154: athrow\n+       155: aload_1\n+       156: lload         8\n+       158: invokevirtual #773                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+       161: goto          184\n+       164: iload         5\n+       166: ifeq          184\n+       169: aload_3\n+       170: new           #524                // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+       173: dup\n+       174: aload_1\n+       175: invokevirtual #757                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+       178: invokespecial #774                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+       181: invokevirtual #776                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+       184: iload         5\n+       186: ifeq          225\n+       189: aload_3\n+       190: invokevirtual #779                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       193: invokevirtual #771                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+       196: lstore        8\n+       198: lload         8\n+       200: lconst_0\n+       201: lcmp\n+       202: ifge          216\n+       205: new           #169                // class java/io/IOException\n+       208: dup\n+       209: ldc_w         #606                // String broken archive, entry with negative compressed size\n+       212: invokespecial #475                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       215: athrow\n+       216: aload_1\n+       217: lload         8\n+       219: invokevirtual #781                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+       222: goto          245\n+       225: iload         4\n+       227: ifeq          245\n+       230: aload_3\n+       231: new           #524                // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+       234: dup\n+       235: aload_1\n+       236: invokevirtual #415                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+       239: invokespecial #774                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+       242: invokevirtual #782                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+       245: iload         6\n+       247: ifeq          261\n+       250: aload_1\n+       251: aload_3\n+       252: invokevirtual #784                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       255: invokevirtual #771                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+       258: invokevirtual #787                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n+       261: iload         7\n+       263: ifeq          277\n+       266: aload_1\n+       267: aload_3\n+       268: invokevirtual #788                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+       271: invokevirtual #792                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+       274: invokevirtual #794                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDiskNumberStart:(J)V\n+       277: return\n       LineNumberTable:\n         line 1466: 0\n         line 1467: 4\n         line 1468: 8\n         line 1469: 19\n-        line 1471: 29\n-        line 1473: 34\n-        line 1474: 38\n-        line 1475: 56\n-        line 1476: 74\n-        line 1477: 75\n-        line 1478: 92\n-        line 1479: 110\n-        line 1484: 122\n-        line 1485: 127\n-        line 1486: 136\n-        line 1487: 143\n-        line 1489: 153\n-        line 1490: 159\n-        line 1491: 167\n-        line 1494: 182\n-        line 1495: 187\n-        line 1496: 196\n-        line 1497: 203\n-        line 1499: 213\n-        line 1500: 219\n-        line 1501: 227\n-        line 1504: 242\n-        line 1505: 247\n-        line 1508: 258\n-        line 1509: 263\n-        line 1512: 274\n+        line 1471: 30\n+        line 1473: 35\n+        line 1474: 39\n+        line 1475: 57\n+        line 1476: 75\n+        line 1477: 76\n+        line 1478: 93\n+        line 1479: 111\n+        line 1484: 123\n+        line 1485: 128\n+        line 1486: 137\n+        line 1487: 144\n+        line 1489: 155\n+        line 1490: 161\n+        line 1491: 169\n+        line 1494: 184\n+        line 1495: 189\n+        line 1496: 198\n+        line 1497: 205\n+        line 1499: 216\n+        line 1500: 222\n+        line 1501: 230\n+        line 1504: 245\n+        line 1505: 250\n+        line 1508: 261\n+        line 1509: 266\n+        line 1512: 277\n       StackMapTable: number_of_entries = 17\n         frame_type = 252 /* append */\n-          offset_delta = 29\n+          offset_delta = 30\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipExtraField ]\n         frame_type = 252 /* append */\n           offset_delta = 23\n           locals = [ class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField ]\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n         frame_type = 252 /* append */\n@@ -3891,21 +3891,21 @@\n           stack = [ int ]\n         frame_type = 252 /* append */\n           offset_delta = 16\n           locals = [ int ]\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n         frame_type = 253 /* append */\n-          offset_delta = 44\n+          offset_delta = 45\n           locals = [ int, long ]\n         frame_type = 250 /* chop */\n           offset_delta = 8\n         frame_type = 19 /* same */\n         frame_type = 252 /* append */\n-          offset_delta = 30\n+          offset_delta = 31\n           locals = [ long ]\n         frame_type = 250 /* chop */\n           offset_delta = 8\n         frame_type = 19 /* same */\n         frame_type = 15 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 15\n@@ -3916,36 +3916,36 @@\n \n   private void skipBytes(int) throws java.io.IOException;\n     descriptor: (I)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=6, args_size=2\n          0: aload_0\n-         1: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         4: invokeinterface #142,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+         1: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         4: invokeinterface #447,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n          9: lstore_2\n         10: lload_2\n         11: iload_1\n         12: i2l\n         13: ladd\n         14: lstore        4\n         16: lload         4\n         18: aload_0\n-        19: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        22: invokeinterface #272,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+        19: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        22: invokeinterface #795,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n         27: lcmp\n         28: ifle          39\n-        31: new           #206                // class java/io/EOFException\n+        31: new           #635                // class java/io/EOFException\n         34: dup\n-        35: invokespecial #207                // Method java/io/EOFException.\"<init>\":()V\n+        35: invokespecial #637                // Method java/io/EOFException.\"<init>\":()V\n         38: athrow\n         39: aload_0\n-        40: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        40: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         43: lload         4\n-        45: invokeinterface #155,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        45: invokeinterface #484,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         50: pop\n         51: return\n       LineNumberTable:\n         line 1519: 0\n         line 1520: 10\n         line 1521: 16\n         line 1522: 31\n@@ -3960,32 +3960,32 @@\n \n   private boolean startsWithLocalFileHeader() throws java.io.IOException;\n     descriptor: ()Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         1: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n          4: aload_0\n-         5: getfield      #79                 // Field firstLocalFileHeaderOffset:J\n-         8: invokeinterface #155,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+         5: getfield      #260                // Field firstLocalFileHeaderOffset:J\n+         8: invokeinterface #484,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         13: pop\n         14: aload_0\n-        15: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        18: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        15: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        18: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n         21: pop\n         22: aload_0\n-        23: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        23: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         26: aload_0\n-        27: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        30: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        27: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        30: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         33: aload_0\n-        34: getfield      #31                 // Field wordBuf:[B\n-        37: getstatic     #273                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n-        40: invokestatic  #157                // Method java/util/Arrays.equals:([B[B)Z\n+        34: getfield      #107                // Field wordBuf:[B\n+        37: getstatic     #798                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+        40: invokestatic  #490                // Method java/util/Arrays.equals:([B[B)Z\n         43: ireturn\n       LineNumberTable:\n         line 1532: 0\n         line 1533: 14\n         line 1534: 22\n         line 1535: 33\n     Exceptions:\n@@ -3995,86 +3995,86 @@\n     descriptor: (JJ[B)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=12, args_size=4\n          0: iconst_0\n          1: istore        6\n          3: aload_0\n-         4: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         7: invokeinterface #272,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+         4: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         7: invokeinterface #795,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n         12: lload_1\n         13: lsub\n         14: lstore        7\n         16: lconst_0\n         17: aload_0\n-        18: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        21: invokeinterface #272,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+        18: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        21: invokeinterface #795,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n         26: lload_3\n         27: lsub\n-        28: invokestatic  #274                // Method java/lang/Math.max:(JJ)J\n+        28: invokestatic  #801                // Method java/lang/Math.max:(JJ)J\n         31: lstore        9\n         33: lload         7\n         35: lconst_0\n         36: lcmp\n         37: iflt          182\n         40: lload         7\n         42: lload         9\n         44: lcmp\n         45: iflt          182\n         48: aload_0\n-        49: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        49: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         52: lload         7\n-        54: invokeinterface #155,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        54: invokeinterface #484,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         59: pop\n         60: aload_0\n-        61: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        64: invokevirtual #144                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        61: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        64: invokevirtual #453                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n         67: pop\n         68: aload_0\n-        69: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        69: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         72: aload_0\n-        73: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        76: invokestatic  #145                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        73: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        76: invokestatic  #457                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         79: aload_0\n-        80: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        83: invokevirtual #241                // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+        80: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        83: invokevirtual #732                // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n         86: pop\n         87: goto          95\n         90: astore        11\n         92: goto          182\n         95: aload_0\n-        96: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        99: invokevirtual #275                // Method java/nio/ByteBuffer.get:()B\n+        96: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+        99: invokevirtual #804                // Method java/nio/ByteBuffer.get:()B\n        102: istore        11\n        104: iload         11\n        106: aload         5\n        108: iconst_0\n        109: baload\n        110: if_icmpne     173\n        113: aload_0\n-       114: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       117: invokevirtual #275                // Method java/nio/ByteBuffer.get:()B\n+       114: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+       117: invokevirtual #804                // Method java/nio/ByteBuffer.get:()B\n        120: istore        11\n        122: iload         11\n        124: aload         5\n        126: iconst_1\n        127: baload\n        128: if_icmpne     173\n        131: aload_0\n-       132: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       135: invokevirtual #275                // Method java/nio/ByteBuffer.get:()B\n+       132: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+       135: invokevirtual #804                // Method java/nio/ByteBuffer.get:()B\n        138: istore        11\n        140: iload         11\n        142: aload         5\n        144: iconst_2\n        145: baload\n        146: if_icmpne     173\n        149: aload_0\n-       150: getfield      #36                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       153: invokevirtual #275                // Method java/nio/ByteBuffer.get:()B\n+       150: getfield      #126                // Field wordBbuf:Ljava/nio/ByteBuffer;\n+       153: invokevirtual #804                // Method java/nio/ByteBuffer.get:()B\n        156: istore        11\n        158: iload         11\n        160: aload         5\n        162: iconst_3\n        163: baload\n        164: if_icmpne     173\n        167: iconst_1\n@@ -4084,17 +4084,17 @@\n        175: lconst_1\n        176: lsub\n        177: lstore        7\n        179: goto          40\n        182: iload         6\n        184: ifeq          199\n        187: aload_0\n-       188: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       188: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        191: lload         7\n-       193: invokeinterface #155,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+       193: invokeinterface #484,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n        198: pop\n        199: iload         6\n        201: ireturn\n       Exception table:\n          from    to  target type\n             60    87    90   Class java/io/EOFException\n       LineNumberTable:\n@@ -4141,106 +4141,106 @@\n \n   private void lambda$fillNameMap$1(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n     flags: (0x1002) ACC_PRIVATE, ACC_SYNTHETIC\n     Code:\n       stack=3, locals=4, args_size=2\n          0: aload_1\n-         1: invokevirtual #236                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+         1: invokevirtual #725                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n          4: astore_2\n          5: aload_0\n-         6: getfield      #28                 // Field nameMap:Ljava/util/Map;\n+         6: getfield      #95                 // Field nameMap:Ljava/util/Map;\n          9: aload_2\n-        10: invokedynamic #276,  0            // InvokeDynamic #1:apply:()Ljava/util/function/Function;\n-        15: invokeinterface #277,  3          // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n-        20: checkcast     #23                 // class java/util/LinkedList\n+        10: invokedynamic #807,  0            // InvokeDynamic #1:apply:()Ljava/util/function/Function;\n+        15: invokeinterface #811,  3          // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;\n+        20: checkcast     #83                 // class java/util/LinkedList\n         23: astore_3\n         24: aload_3\n         25: aload_1\n-        26: invokevirtual #278                // Method java/util/LinkedList.addLast:(Ljava/lang/Object;)V\n+        26: invokevirtual #815                // Method java/util/LinkedList.addLast:(Ljava/lang/Object;)V\n         29: return\n       LineNumberTable:\n         line 798: 0\n         line 799: 5\n         line 800: 24\n         line 801: 29\n \n   private static java.util.LinkedList lambda$fillNameMap$0(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/util/LinkedList;\n     flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=1, args_size=1\n-         0: new           #23                 // class java/util/LinkedList\n+         0: new           #83                 // class java/util/LinkedList\n          3: dup\n-         4: invokespecial #24                 // Method java/util/LinkedList.\"<init>\":()V\n+         4: invokespecial #85                 // Method java/util/LinkedList.\"<init>\":()V\n          7: areturn\n       LineNumberTable:\n         line 799: 0\n \n   static java.nio.channels.SeekableByteChannel access$000(org.apache.commons.compress.archivers.zip.ZipFile);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         1: getfield      #5                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n          4: areturn\n       LineNumberTable:\n         line 85: 0\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=2, locals=0, args_size=0\n          0: iconst_1\n          1: newarray       byte\n-         3: putstatic     #121                // Field ONE_ZERO_BYTE:[B\n-         6: getstatic     #279                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n-         9: invokestatic  #146                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-        12: putstatic     #147                // Field CFH_SIG:J\n-        15: invokedynamic #280,  0            // InvokeDynamic #2:applyAsLong:()Ljava/util/function/ToLongFunction;\n-        20: invokestatic  #281                // InterfaceMethod java/util/Comparator.comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-        23: invokedynamic #282,  0            // InvokeDynamic #3:applyAsLong:()Ljava/util/function/ToLongFunction;\n-        28: invokeinterface #283,  2          // InterfaceMethod java/util/Comparator.thenComparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-        33: putstatic     #93                 // Field offsetComparator:Ljava/util/Comparator;\n+         3: putstatic     #389                // Field ONE_ZERO_BYTE:[B\n+         6: getstatic     #819                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n+         9: invokestatic  #461                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+        12: putstatic     #467                // Field CFH_SIG:J\n+        15: invokedynamic #821,  0            // InvokeDynamic #2:applyAsLong:()Ljava/util/function/ToLongFunction;\n+        20: invokestatic  #825                // InterfaceMethod java/util/Comparator.comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+        23: invokedynamic #831,  0            // InvokeDynamic #3:applyAsLong:()Ljava/util/function/ToLongFunction;\n+        28: invokeinterface #832,  2          // InterfaceMethod java/util/Comparator.thenComparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+        33: putstatic     #305                // Field offsetComparator:Ljava/util/Comparator;\n         36: return\n       LineNumberTable:\n         line 170: 0\n         line 194: 6\n         line 195: 9\n         line 355: 15\n         line 356: 20\n         line 357: 28\n         line 355: 36\n }\n SourceFile: \"ZipFile.java\"\n-InnerClasses:\n-  static #286;                            // class org/apache/commons/compress/archivers/zip/ZipFile$2\n-  private static #288= #106 of #2;        // StoredStatisticsStream=class org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream of class org/apache/commons/compress/archivers/zip/ZipFile\n-  private static final #289= #219 of #2;  // NameAndComment=class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment of class org/apache/commons/compress/archivers/zip/ZipFile\n-  private static #290= #98 of #2;         // Entry=class org/apache/commons/compress/archivers/zip/ZipFile$Entry of class org/apache/commons/compress/archivers/zip/ZipFile\n-  private #291= #71 of #2;                // BoundedFileChannelInputStream=class org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream of class org/apache/commons/compress/archivers/zip/ZipFile\n-  #118;                                   // class org/apache/commons/compress/archivers/zip/ZipFile$1\n-  public static final #868= #644 of #63;  // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  public static final #954= #953 of #956; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #542 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  0: #926 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #543 (Ljava/lang/Object;)V\n-      #544 REF_invokeSpecial org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-      #545 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  1: #542 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #933 (Ljava/lang/Object;)V\n+      #934 REF_invokeSpecial org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$1:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+      #937 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  1: #926 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #721 (Ljava/lang/Object;)Ljava/lang/Object;\n-      #722 REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n-      #723 (Ljava/lang/String;)Ljava/util/LinkedList;\n-  2: #542 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #938 (Ljava/lang/Object;)Ljava/lang/Object;\n+      #939 REF_invokeStatic org/apache/commons/compress/archivers/zip/ZipFile.lambda$fillNameMap$0:(Ljava/lang/String;)Ljava/util/LinkedList;\n+      #942 (Ljava/lang/String;)Ljava/util/LinkedList;\n+  2: #926 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #728 (Ljava/lang/Object;)J\n-      #729 REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n-      #730 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-  3: #542 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #943 (Ljava/lang/Object;)J\n+      #945 REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+      #946 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+  3: #926 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #728 (Ljava/lang/Object;)J\n-      #734 REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-      #730 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+      #943 (Ljava/lang/Object;)J\n+      #947 REF_invokeVirtual org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+      #946 (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+InnerClasses:\n+  private #949= #236 of #3;               // BoundedFileChannelInputStream=class org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream of class org/apache/commons/compress/archivers/zip/ZipFile\n+  private static #950= #323 of #3;        // Entry=class org/apache/commons/compress/archivers/zip/ZipFile$Entry of class org/apache/commons/compress/archivers/zip/ZipFile\n+  static #335;                            // class org/apache/commons/compress/archivers/zip/ZipFile$2\n+  private static #951= #353 of #3;        // StoredStatisticsStream=class org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream of class org/apache/commons/compress/archivers/zip/ZipFile\n+  #383;                                   // class org/apache/commons/compress/archivers/zip/ZipFile$1\n+  public static final #952= #573 of #212; // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  private static final #953= #672 of #3;  // NameAndComment=class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment of class org/apache/commons/compress/archivers/zip/ZipFile\n+  public static final #958= #954 of #956; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
