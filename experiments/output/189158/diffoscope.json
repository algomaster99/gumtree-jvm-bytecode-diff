{"diffoscope-json-version": 1, "source1": "first/AES256Options.class", "source2": "second/AES256Options.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,138 +1,138 @@\n-  SHA-256 checksum beaa0b43ba0adb4f60620fceda0d8ec83e5aac40f9d51d0fb5d4338ed7e775a6\n+  SHA-256 checksum 355a93a8297b4894e2105fada1da0d8e37c6b8b6af60127358d4d91ff1799570\n   Compiled from \"AES256Options.java\"\n class org.apache.commons.compress.archivers.sevenz.AES256Options\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n-  this_class: #2                          // org/apache/commons/compress/archivers/sevenz/AES256Options\n-  super_class: #28                        // java/lang/Object\n+  this_class: #3                          // org/apache/commons/compress/archivers/sevenz/AES256Options\n+  super_class: #38                        // java/lang/Object\n   interfaces: 0, fields: 6, methods: 8, attributes: 1\n Constant pool:\n-    #1 = Class              #76           // javax/crypto/spec/SecretKeySpec\n-    #2 = Class              #77           // org/apache/commons/compress/archivers/sevenz/AES256Options\n-    #3 = String             #78           // AES\n-    #4 = Methodref          #1.#79        // javax/crypto/spec/SecretKeySpec.\"<init>\":([BLjava/lang/String;)V\n-    #5 = Methodref          #80.#81       // java/security/SecureRandom.getInstanceStrong:()Ljava/security/SecureRandom;\n-    #6 = Methodref          #80.#82       // java/security/SecureRandom.nextBytes:([B)V\n-    #7 = Class              #83           // java/security/NoSuchAlgorithmException\n-    #8 = Class              #84           // java/lang/IllegalStateException\n-    #9 = String             #85           // No strong secure random available to generate strong AES key\n-   #10 = Methodref          #8.#86        // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #11 = Methodref          #2.#87        // org/apache/commons/compress/archivers/sevenz/AES256Options.randomBytes:(I)[B\n-   #12 = Methodref          #2.#88        // org/apache/commons/compress/archivers/sevenz/AES256Options.\"<init>\":([C[B[BI)V\n-   #13 = Methodref          #28.#89       // java/lang/Object.\"<init>\":()V\n-   #14 = Fieldref           #2.#90        // org/apache/commons/compress/archivers/sevenz/AES256Options.salt:[B\n-   #15 = Fieldref           #2.#91        // org/apache/commons/compress/archivers/sevenz/AES256Options.iv:[B\n-   #16 = Fieldref           #2.#92        // org/apache/commons/compress/archivers/sevenz/AES256Options.numCyclesPower:I\n-   #17 = Methodref          #93.#94       // org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.sha256Password:([CI[B)[B\n-   #18 = Methodref          #2.#95        // org/apache/commons/compress/archivers/sevenz/AES256Options.newSecretKeySpec:([B)Ljavax/crypto/spec/SecretKeySpec;\n-   #19 = String             #96           // AES/CBC/NoPadding\n-   #20 = Methodref          #22.#97       // javax/crypto/Cipher.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;\n-   #21 = Fieldref           #2.#98        // org/apache/commons/compress/archivers/sevenz/AES256Options.cipher:Ljavax/crypto/Cipher;\n-   #22 = Class              #99           // javax/crypto/Cipher\n-   #23 = Class              #100          // javax/crypto/spec/IvParameterSpec\n-   #24 = Methodref          #23.#101      // javax/crypto/spec/IvParameterSpec.\"<init>\":([B)V\n-   #25 = Methodref          #22.#102      // javax/crypto/Cipher.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V\n-   #26 = Class              #103          // java/security/GeneralSecurityException\n-   #27 = String             #104          // Encryption error (do you have the JCE Unlimited Strength Jurisdiction Policy Files installed?)\n-   #28 = Class              #105          // java/lang/Object\n-   #29 = Utf8               ALGORITHM\n-   #30 = Utf8               Ljava/lang/String;\n-   #31 = Utf8               ConstantValue\n-   #32 = Utf8               TRANSFORMATION\n-   #33 = Utf8               salt\n-   #34 = Utf8               [B\n-   #35 = Utf8               iv\n-   #36 = Utf8               numCyclesPower\n-   #37 = Utf8               I\n-   #38 = Utf8               cipher\n-   #39 = Utf8               Ljavax/crypto/Cipher;\n-   #40 = Utf8               newSecretKeySpec\n-   #41 = Utf8               ([B)Ljavax/crypto/spec/SecretKeySpec;\n-   #42 = Utf8               Code\n-   #43 = Utf8               LineNumberTable\n-   #44 = Utf8               LocalVariableTable\n-   #45 = Utf8               bytes\n-   #46 = Utf8               randomBytes\n-   #47 = Utf8               (I)[B\n-   #48 = Utf8               e\n-   #49 = Utf8               Ljava/security/NoSuchAlgorithmException;\n-   #50 = Utf8               size\n-   #51 = Utf8               StackMapTable\n-   #52 = Class              #34           // \"[B\"\n-   #53 = Utf8               <init>\n-   #54 = Utf8               ([C)V\n-   #55 = Utf8               this\n-   #56 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/AES256Options;\n-   #57 = Utf8               password\n-   #58 = Utf8               [C\n-   #59 = Utf8               ([C[B[BI)V\n-   #60 = Utf8               generalSecurityException\n-   #61 = Utf8               Ljava/security/GeneralSecurityException;\n-   #62 = Utf8               aesKeyBytes\n-   #63 = Utf8               aesKey\n-   #64 = Utf8               Ljavax/crypto/SecretKey;\n-   #65 = Class              #58           // \"[C\"\n-   #66 = Class              #106          // javax/crypto/SecretKey\n-   #67 = Utf8               getCipher\n-   #68 = Utf8               ()Ljavax/crypto/Cipher;\n-   #69 = Utf8               getIv\n-   #70 = Utf8               ()[B\n-   #71 = Utf8               getNumCyclesPower\n-   #72 = Utf8               ()I\n-   #73 = Utf8               getSalt\n-   #74 = Utf8               SourceFile\n-   #75 = Utf8               AES256Options.java\n-   #76 = Utf8               javax/crypto/spec/SecretKeySpec\n-   #77 = Utf8               org/apache/commons/compress/archivers/sevenz/AES256Options\n-   #78 = Utf8               AES\n-   #79 = NameAndType        #53:#107      // \"<init>\":([BLjava/lang/String;)V\n-   #80 = Class              #108          // java/security/SecureRandom\n-   #81 = NameAndType        #109:#110     // getInstanceStrong:()Ljava/security/SecureRandom;\n-   #82 = NameAndType        #111:#112     // nextBytes:([B)V\n-   #83 = Utf8               java/security/NoSuchAlgorithmException\n-   #84 = Utf8               java/lang/IllegalStateException\n-   #85 = Utf8               No strong secure random available to generate strong AES key\n-   #86 = NameAndType        #53:#113      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #87 = NameAndType        #46:#47       // randomBytes:(I)[B\n-   #88 = NameAndType        #53:#59       // \"<init>\":([C[B[BI)V\n-   #89 = NameAndType        #53:#114      // \"<init>\":()V\n-   #90 = NameAndType        #33:#34       // salt:[B\n-   #91 = NameAndType        #35:#34       // iv:[B\n-   #92 = NameAndType        #36:#37       // numCyclesPower:I\n-   #93 = Class              #115          // org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder\n-   #94 = NameAndType        #116:#117     // sha256Password:([CI[B)[B\n-   #95 = NameAndType        #40:#41       // newSecretKeySpec:([B)Ljavax/crypto/spec/SecretKeySpec;\n-   #96 = Utf8               AES/CBC/NoPadding\n-   #97 = NameAndType        #118:#119     // getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;\n-   #98 = NameAndType        #38:#39       // cipher:Ljavax/crypto/Cipher;\n-   #99 = Utf8               javax/crypto/Cipher\n-  #100 = Utf8               javax/crypto/spec/IvParameterSpec\n-  #101 = NameAndType        #53:#112      // \"<init>\":([B)V\n-  #102 = NameAndType        #120:#121     // init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V\n-  #103 = Utf8               java/security/GeneralSecurityException\n-  #104 = Utf8               Encryption error (do you have the JCE Unlimited Strength Jurisdiction Policy Files installed?)\n-  #105 = Utf8               java/lang/Object\n-  #106 = Utf8               javax/crypto/SecretKey\n-  #107 = Utf8               ([BLjava/lang/String;)V\n-  #108 = Utf8               java/security/SecureRandom\n-  #109 = Utf8               getInstanceStrong\n-  #110 = Utf8               ()Ljava/security/SecureRandom;\n-  #111 = Utf8               nextBytes\n-  #112 = Utf8               ([B)V\n-  #113 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #114 = Utf8               ()V\n-  #115 = Utf8               org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder\n-  #116 = Utf8               sha256Password\n-  #117 = Utf8               ([CI[B)[B\n-  #118 = Utf8               getInstance\n-  #119 = Utf8               (Ljava/lang/String;)Ljavax/crypto/Cipher;\n-  #120 = Utf8               init\n-  #121 = Utf8               (ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V\n+    #1 = Class              #2            // javax/crypto/spec/SecretKeySpec\n+    #2 = Utf8               javax/crypto/spec/SecretKeySpec\n+    #3 = Class              #4            // org/apache/commons/compress/archivers/sevenz/AES256Options\n+    #4 = Utf8               org/apache/commons/compress/archivers/sevenz/AES256Options\n+    #5 = String             #6            // AES\n+    #6 = Utf8               AES\n+    #7 = Methodref          #1.#8         // javax/crypto/spec/SecretKeySpec.\"<init>\":([BLjava/lang/String;)V\n+    #8 = NameAndType        #9:#10        // \"<init>\":([BLjava/lang/String;)V\n+    #9 = Utf8               <init>\n+   #10 = Utf8               ([BLjava/lang/String;)V\n+   #11 = Methodref          #12.#13       // java/security/SecureRandom.getInstanceStrong:()Ljava/security/SecureRandom;\n+   #12 = Class              #14           // java/security/SecureRandom\n+   #13 = NameAndType        #15:#16       // getInstanceStrong:()Ljava/security/SecureRandom;\n+   #14 = Utf8               java/security/SecureRandom\n+   #15 = Utf8               getInstanceStrong\n+   #16 = Utf8               ()Ljava/security/SecureRandom;\n+   #17 = Methodref          #12.#18       // java/security/SecureRandom.nextBytes:([B)V\n+   #18 = NameAndType        #19:#20       // nextBytes:([B)V\n+   #19 = Utf8               nextBytes\n+   #20 = Utf8               ([B)V\n+   #21 = Class              #22           // java/security/NoSuchAlgorithmException\n+   #22 = Utf8               java/security/NoSuchAlgorithmException\n+   #23 = Class              #24           // java/lang/IllegalStateException\n+   #24 = Utf8               java/lang/IllegalStateException\n+   #25 = String             #26           // No strong secure random available to generate strong AES key\n+   #26 = Utf8               No strong secure random available to generate strong AES key\n+   #27 = Methodref          #23.#28       // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #28 = NameAndType        #9:#29        // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #29 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #30 = Methodref          #3.#31        // org/apache/commons/compress/archivers/sevenz/AES256Options.randomBytes:(I)[B\n+   #31 = NameAndType        #32:#33       // randomBytes:(I)[B\n+   #32 = Utf8               randomBytes\n+   #33 = Utf8               (I)[B\n+   #34 = Methodref          #3.#35        // org/apache/commons/compress/archivers/sevenz/AES256Options.\"<init>\":([C[B[BI)V\n+   #35 = NameAndType        #9:#36        // \"<init>\":([C[B[BI)V\n+   #36 = Utf8               ([C[B[BI)V\n+   #37 = Methodref          #38.#39       // java/lang/Object.\"<init>\":()V\n+   #38 = Class              #40           // java/lang/Object\n+   #39 = NameAndType        #9:#41        // \"<init>\":()V\n+   #40 = Utf8               java/lang/Object\n+   #41 = Utf8               ()V\n+   #42 = Fieldref           #3.#43        // org/apache/commons/compress/archivers/sevenz/AES256Options.salt:[B\n+   #43 = NameAndType        #44:#45       // salt:[B\n+   #44 = Utf8               salt\n+   #45 = Utf8               [B\n+   #46 = Fieldref           #3.#47        // org/apache/commons/compress/archivers/sevenz/AES256Options.iv:[B\n+   #47 = NameAndType        #48:#45       // iv:[B\n+   #48 = Utf8               iv\n+   #49 = Fieldref           #3.#50        // org/apache/commons/compress/archivers/sevenz/AES256Options.numCyclesPower:I\n+   #50 = NameAndType        #51:#52       // numCyclesPower:I\n+   #51 = Utf8               numCyclesPower\n+   #52 = Utf8               I\n+   #53 = Methodref          #54.#55       // org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.sha256Password:([CI[B)[B\n+   #54 = Class              #56           // org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder\n+   #55 = NameAndType        #57:#58       // sha256Password:([CI[B)[B\n+   #56 = Utf8               org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder\n+   #57 = Utf8               sha256Password\n+   #58 = Utf8               ([CI[B)[B\n+   #59 = Methodref          #3.#60        // org/apache/commons/compress/archivers/sevenz/AES256Options.newSecretKeySpec:([B)Ljavax/crypto/spec/SecretKeySpec;\n+   #60 = NameAndType        #61:#62       // newSecretKeySpec:([B)Ljavax/crypto/spec/SecretKeySpec;\n+   #61 = Utf8               newSecretKeySpec\n+   #62 = Utf8               ([B)Ljavax/crypto/spec/SecretKeySpec;\n+   #63 = String             #64           // AES/CBC/NoPadding\n+   #64 = Utf8               AES/CBC/NoPadding\n+   #65 = Methodref          #66.#67       // javax/crypto/Cipher.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;\n+   #66 = Class              #68           // javax/crypto/Cipher\n+   #67 = NameAndType        #69:#70       // getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;\n+   #68 = Utf8               javax/crypto/Cipher\n+   #69 = Utf8               getInstance\n+   #70 = Utf8               (Ljava/lang/String;)Ljavax/crypto/Cipher;\n+   #71 = Fieldref           #3.#72        // org/apache/commons/compress/archivers/sevenz/AES256Options.cipher:Ljavax/crypto/Cipher;\n+   #72 = NameAndType        #73:#74       // cipher:Ljavax/crypto/Cipher;\n+   #73 = Utf8               cipher\n+   #74 = Utf8               Ljavax/crypto/Cipher;\n+   #75 = Class              #76           // javax/crypto/spec/IvParameterSpec\n+   #76 = Utf8               javax/crypto/spec/IvParameterSpec\n+   #77 = Methodref          #75.#78       // javax/crypto/spec/IvParameterSpec.\"<init>\":([B)V\n+   #78 = NameAndType        #9:#20        // \"<init>\":([B)V\n+   #79 = Methodref          #66.#80       // javax/crypto/Cipher.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V\n+   #80 = NameAndType        #81:#82       // init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V\n+   #81 = Utf8               init\n+   #82 = Utf8               (ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V\n+   #83 = Class              #84           // java/security/GeneralSecurityException\n+   #84 = Utf8               java/security/GeneralSecurityException\n+   #85 = String             #86           // Encryption error (do you have the JCE Unlimited Strength Jurisdiction Policy Files installed?)\n+   #86 = Utf8               Encryption error (do you have the JCE Unlimited Strength Jurisdiction Policy Files installed?)\n+   #87 = Utf8               ALGORITHM\n+   #88 = Utf8               Ljava/lang/String;\n+   #89 = Utf8               ConstantValue\n+   #90 = Utf8               TRANSFORMATION\n+   #91 = Utf8               Code\n+   #92 = Utf8               LineNumberTable\n+   #93 = Utf8               LocalVariableTable\n+   #94 = Utf8               bytes\n+   #95 = Utf8               e\n+   #96 = Utf8               Ljava/security/NoSuchAlgorithmException;\n+   #97 = Utf8               size\n+   #98 = Utf8               StackMapTable\n+   #99 = Class              #45           // \"[B\"\n+  #100 = Utf8               ([C)V\n+  #101 = Utf8               this\n+  #102 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/AES256Options;\n+  #103 = Utf8               password\n+  #104 = Utf8               [C\n+  #105 = Utf8               generalSecurityException\n+  #106 = Utf8               Ljava/security/GeneralSecurityException;\n+  #107 = Utf8               aesKeyBytes\n+  #108 = Utf8               aesKey\n+  #109 = Utf8               Ljavax/crypto/SecretKey;\n+  #110 = Class              #104          // \"[C\"\n+  #111 = Class              #112          // javax/crypto/SecretKey\n+  #112 = Utf8               javax/crypto/SecretKey\n+  #113 = Utf8               getCipher\n+  #114 = Utf8               ()Ljavax/crypto/Cipher;\n+  #115 = Utf8               getIv\n+  #116 = Utf8               ()[B\n+  #117 = Utf8               getNumCyclesPower\n+  #118 = Utf8               ()I\n+  #119 = Utf8               getSalt\n+  #120 = Utf8               SourceFile\n+  #121 = Utf8               AES256Options.java\n {\n   static final java.lang.String ALGORITHM = \"AES\";\n     descriptor: Ljava/lang/String;\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n     ConstantValue: String AES\n \n   static final java.lang.String TRANSFORMATION = \"AES/CBC/NoPadding\";\n@@ -160,16 +160,16 @@\n     descriptor: ([B)Ljavax/crypto/spec/SecretKeySpec;\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: new           #1                  // class javax/crypto/spec/SecretKeySpec\n          3: dup\n          4: aload_0\n-         5: ldc           #3                  // String AES\n-         7: invokespecial #4                  // Method javax/crypto/spec/SecretKeySpec.\"<init>\":([BLjava/lang/String;)V\n+         5: ldc           #5                  // String AES\n+         7: invokespecial #7                  // Method javax/crypto/spec/SecretKeySpec.\"<init>\":([BLjava/lang/String;)V\n         10: areturn\n       LineNumberTable:\n         line 42: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0 bytes   [B\n \n@@ -177,24 +177,24 @@\n     descriptor: (I)[B\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=3, args_size=1\n          0: iload_0\n          1: newarray       byte\n          3: astore_1\n-         4: invokestatic  #5                  // Method java/security/SecureRandom.getInstanceStrong:()Ljava/security/SecureRandom;\n+         4: invokestatic  #11                 // Method java/security/SecureRandom.getInstanceStrong:()Ljava/security/SecureRandom;\n          7: aload_1\n-         8: invokevirtual #6                  // Method java/security/SecureRandom.nextBytes:([B)V\n+         8: invokevirtual #17                 // Method java/security/SecureRandom.nextBytes:([B)V\n         11: goto          26\n         14: astore_2\n-        15: new           #8                  // class java/lang/IllegalStateException\n+        15: new           #23                 // class java/lang/IllegalStateException\n         18: dup\n-        19: ldc           #9                  // String No strong secure random available to generate strong AES key\n+        19: ldc           #25                 // String No strong secure random available to generate strong AES key\n         21: aload_2\n-        22: invokespecial #10                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        22: invokespecial #27                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n         25: athrow\n         26: aload_1\n         27: areturn\n       Exception table:\n          from    to  target type\n              4    11    14   Class java/security/NoSuchAlgorithmException\n       LineNumberTable:\n@@ -222,17 +222,17 @@\n     Code:\n       stack=5, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n          3: newarray       byte\n          5: bipush        16\n-         7: invokestatic  #11                 // Method randomBytes:(I)[B\n+         7: invokestatic  #30                 // Method randomBytes:(I)[B\n         10: bipush        19\n-        12: invokespecial #12                 // Method \"<init>\":([C[B[BI)V\n+        12: invokespecial #34                 // Method \"<init>\":([C[B[BI)V\n         15: return\n       LineNumberTable:\n         line 64: 0\n         line 65: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      16     0  this   Lorg/apache/commons/compress/archivers/sevenz/AES256Options;\n@@ -240,52 +240,52 @@\n \n   public org.apache.commons.compress.archivers.sevenz.AES256Options(char[], byte[], byte[], int);\n     descriptor: ([C[B[BI)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=8, args_size=5\n          0: aload_0\n-         1: invokespecial #13                 // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #37                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: aload_2\n-         6: putfield      #14                 // Field salt:[B\n+         6: putfield      #42                 // Field salt:[B\n          9: aload_0\n         10: aload_3\n-        11: putfield      #15                 // Field iv:[B\n+        11: putfield      #46                 // Field iv:[B\n         14: aload_0\n         15: iload         4\n-        17: putfield      #16                 // Field numCyclesPower:I\n+        17: putfield      #49                 // Field numCyclesPower:I\n         20: aload_1\n         21: iload         4\n         23: aload_2\n-        24: invokestatic  #17                 // Method org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.sha256Password:([CI[B)[B\n+        24: invokestatic  #53                 // Method org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.sha256Password:([CI[B)[B\n         27: astore        5\n         29: aload         5\n-        31: invokestatic  #18                 // Method newSecretKeySpec:([B)Ljavax/crypto/spec/SecretKeySpec;\n+        31: invokestatic  #59                 // Method newSecretKeySpec:([B)Ljavax/crypto/spec/SecretKeySpec;\n         34: astore        6\n         36: aload_0\n-        37: ldc           #19                 // String AES/CBC/NoPadding\n-        39: invokestatic  #20                 // Method javax/crypto/Cipher.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;\n-        42: putfield      #21                 // Field cipher:Ljavax/crypto/Cipher;\n+        37: ldc           #63                 // String AES/CBC/NoPadding\n+        39: invokestatic  #65                 // Method javax/crypto/Cipher.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;\n+        42: putfield      #71                 // Field cipher:Ljavax/crypto/Cipher;\n         45: aload_0\n-        46: getfield      #21                 // Field cipher:Ljavax/crypto/Cipher;\n+        46: getfield      #71                 // Field cipher:Ljavax/crypto/Cipher;\n         49: iconst_1\n         50: aload         6\n-        52: new           #23                 // class javax/crypto/spec/IvParameterSpec\n+        52: new           #75                 // class javax/crypto/spec/IvParameterSpec\n         55: dup\n         56: aload_3\n-        57: invokespecial #24                 // Method javax/crypto/spec/IvParameterSpec.\"<init>\":([B)V\n-        60: invokevirtual #25                 // Method javax/crypto/Cipher.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V\n+        57: invokespecial #77                 // Method javax/crypto/spec/IvParameterSpec.\"<init>\":([B)V\n+        60: invokevirtual #79                 // Method javax/crypto/Cipher.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V\n         63: goto          80\n         66: astore        7\n-        68: new           #8                  // class java/lang/IllegalStateException\n+        68: new           #23                 // class java/lang/IllegalStateException\n         71: dup\n-        72: ldc           #27                 // String Encryption error (do you have the JCE Unlimited Strength Jurisdiction Policy Files installed?)\n+        72: ldc           #85                 // String Encryption error (do you have the JCE Unlimited Strength Jurisdiction Policy Files installed?)\n         74: aload         7\n-        76: invokespecial #10                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        76: invokespecial #27                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n         79: athrow\n         80: return\n       Exception table:\n          from    to  target type\n             36    63    66   Class java/security/GeneralSecurityException\n       LineNumberTable:\n         line 74: 0\n@@ -319,57 +319,57 @@\n \n   javax.crypto.Cipher getCipher();\n     descriptor: ()Ljavax/crypto/Cipher;\n     flags: (0x0000)\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #21                 // Field cipher:Ljavax/crypto/Cipher;\n+         1: getfield      #71                 // Field cipher:Ljavax/crypto/Cipher;\n          4: areturn\n       LineNumberTable:\n         line 95: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/sevenz/AES256Options;\n \n   byte[] getIv();\n     descriptor: ()[B\n     flags: (0x0000)\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #15                 // Field iv:[B\n+         1: getfield      #46                 // Field iv:[B\n          4: areturn\n       LineNumberTable:\n         line 99: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/sevenz/AES256Options;\n \n   int getNumCyclesPower();\n     descriptor: ()I\n     flags: (0x0000)\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #16                 // Field numCyclesPower:I\n+         1: getfield      #49                 // Field numCyclesPower:I\n          4: ireturn\n       LineNumberTable:\n         line 103: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/sevenz/AES256Options;\n \n   byte[] getSalt();\n     descriptor: ()[B\n     flags: (0x0000)\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #14                 // Field salt:[B\n+         1: getfield      #42                 // Field salt:[B\n          4: areturn\n       LineNumberTable:\n         line 107: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/sevenz/AES256Options;\n }\n"}]}
