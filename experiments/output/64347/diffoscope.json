{"diffoscope-json-version": 1, "source1": "first/XZCompressorInputStream.class", "source2": "second/XZCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,439 +1,439 @@\n-  SHA-256 checksum 3365ea4e677d01f8484bde7fd26202ebe0c58e92e041e13f48e5f3e65c4890a2\n+  SHA-256 checksum 1919ee5441d25a76a5e1a572bac2835cc0c2fb745af032198710ebab99789f3e\n   Compiled from \"XZCompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.xz.XZCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream\n   minor version: 0\n-  major version: 53\n+  major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #21                         // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n-  super_class: #22                        // org/apache/commons/compress/compressors/CompressorInputStream\n+  this_class: #1                          // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n+  super_class: #3                         // org/apache/commons/compress/compressors/CompressorInputStream\n   interfaces: 0, fields: 1, methods: 9, attributes: 1\n Constant pool:\n-   #1 = Fieldref           #67.#68        // org/tukaani/xz/XZ.HEADER_MAGIC:[B\n-   #2 = Methodref          #21.#69        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n-   #3 = Methodref          #21.#70        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;ZI)V\n-   #4 = Methodref          #22.#71        // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-   #5 = Class              #72            // org/tukaani/xz/XZInputStream\n-   #6 = Methodref          #5.#73         // org/tukaani/xz/XZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-   #7 = Fieldref           #21.#74        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.in:Ljava/io/InputStream;\n-   #8 = Class              #75            // org/tukaani/xz/SingleXZInputStream\n-   #9 = Methodref          #8.#73         // org/tukaani/xz/SingleXZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-  #10 = Methodref          #48.#76        // java/io/InputStream.read:()I\n-  #11 = Methodref          #21.#77        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.count:(I)V\n-  #12 = Class              #78            // org/tukaani/xz/MemoryLimitException\n-  #13 = Class              #79            // org/apache/commons/compress/MemoryLimitException\n-  #14 = Methodref          #12.#80        // org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n-  #15 = Methodref          #12.#81        // org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n-  #16 = Methodref          #13.#82        // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n-  #17 = Methodref          #48.#83        // java/io/InputStream.read:([BII)I\n-  #18 = Methodref          #48.#84        // java/io/InputStream.skip:(J)J\n-  #19 = Methodref          #48.#85        // java/io/InputStream.available:()I\n-  #20 = Methodref          #48.#86        // java/io/InputStream.close:()V\n-  #21 = Class              #87            // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n-  #22 = Class              #88            // org/apache/commons/compress/compressors/CompressorInputStream\n-  #23 = Utf8               in\n-  #24 = Utf8               Ljava/io/InputStream;\n-  #25 = Utf8               matches\n-  #26 = Utf8               ([BI)Z\n-  #27 = Utf8               Code\n-  #28 = Utf8               LineNumberTable\n-  #29 = Utf8               LocalVariableTable\n-  #30 = Utf8               i\n-  #31 = Utf8               I\n-  #32 = Utf8               signature\n-  #33 = Utf8               [B\n-  #34 = Utf8               length\n-  #35 = Utf8               StackMapTable\n-  #36 = Utf8               <init>\n-  #37 = Utf8               (Ljava/io/InputStream;)V\n-  #38 = Utf8               this\n-  #39 = Utf8               Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n-  #40 = Utf8               inputStream\n-  #41 = Utf8               Exceptions\n-  #42 = Class              #89            // java/io/IOException\n-  #43 = Utf8               (Ljava/io/InputStream;Z)V\n-  #44 = Utf8               decompressConcatenated\n-  #45 = Utf8               Z\n-  #46 = Utf8               (Ljava/io/InputStream;ZI)V\n-  #47 = Utf8               memoryLimitInKb\n-  #48 = Class              #90            // java/io/InputStream\n-  #49 = Utf8               read\n-  #50 = Utf8               ()I\n-  #51 = Utf8               ret\n-  #52 = Utf8               e\n-  #53 = Utf8               Lorg/tukaani/xz/MemoryLimitException;\n-  #54 = Utf8               ([BII)I\n-  #55 = Utf8               buf\n-  #56 = Utf8               off\n-  #57 = Utf8               len\n-  #58 = Utf8               skip\n-  #59 = Utf8               (J)J\n-  #60 = Utf8               n\n-  #61 = Utf8               J\n-  #62 = Utf8               available\n-  #63 = Utf8               close\n-  #64 = Utf8               ()V\n-  #65 = Utf8               SourceFile\n-  #66 = Utf8               XZCompressorInputStream.java\n-  #67 = Class              #91            // org/tukaani/xz/XZ\n-  #68 = NameAndType        #92:#33        // HEADER_MAGIC:[B\n-  #69 = NameAndType        #36:#43        // \"<init>\":(Ljava/io/InputStream;Z)V\n-  #70 = NameAndType        #36:#46        // \"<init>\":(Ljava/io/InputStream;ZI)V\n-  #71 = NameAndType        #36:#64        // \"<init>\":()V\n-  #72 = Utf8               org/tukaani/xz/XZInputStream\n-  #73 = NameAndType        #36:#93        // \"<init>\":(Ljava/io/InputStream;I)V\n-  #74 = NameAndType        #23:#24        // in:Ljava/io/InputStream;\n-  #75 = Utf8               org/tukaani/xz/SingleXZInputStream\n-  #76 = NameAndType        #49:#50        // read:()I\n-  #77 = NameAndType        #94:#95        // count:(I)V\n-  #78 = Utf8               org/tukaani/xz/MemoryLimitException\n-  #79 = Utf8               org/apache/commons/compress/MemoryLimitException\n-  #80 = NameAndType        #96:#50        // getMemoryNeeded:()I\n-  #81 = NameAndType        #97:#50        // getMemoryLimit:()I\n-  #82 = NameAndType        #36:#98        // \"<init>\":(JILjava/lang/Exception;)V\n-  #83 = NameAndType        #49:#54        // read:([BII)I\n-  #84 = NameAndType        #58:#59        // skip:(J)J\n-  #85 = NameAndType        #62:#50        // available:()I\n-  #86 = NameAndType        #63:#64        // close:()V\n-  #87 = Utf8               org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n-  #88 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-  #89 = Utf8               java/io/IOException\n-  #90 = Utf8               java/io/InputStream\n-  #91 = Utf8               org/tukaani/xz/XZ\n-  #92 = Utf8               HEADER_MAGIC\n-  #93 = Utf8               (Ljava/io/InputStream;I)V\n-  #94 = Utf8               count\n-  #95 = Utf8               (I)V\n-  #96 = Utf8               getMemoryNeeded\n-  #97 = Utf8               getMemoryLimit\n-  #98 = Utf8               (JILjava/lang/Exception;)V\n+   #1 = Class              #2             // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n+   #2 = Utf8               org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n+   #3 = Class              #4             // org/apache/commons/compress/compressors/CompressorInputStream\n+   #4 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+   #5 = Utf8               in\n+   #6 = Utf8               Ljava/io/InputStream;\n+   #7 = Utf8               matches\n+   #8 = Utf8               ([BI)Z\n+   #9 = Utf8               Code\n+  #10 = Fieldref           #11.#13        // org/tukaani/xz/XZ.HEADER_MAGIC:[B\n+  #11 = Class              #12            // org/tukaani/xz/XZ\n+  #12 = Utf8               org/tukaani/xz/XZ\n+  #13 = NameAndType        #14:#15        // HEADER_MAGIC:[B\n+  #14 = Utf8               HEADER_MAGIC\n+  #15 = Utf8               [B\n+  #16 = Utf8               LineNumberTable\n+  #17 = Utf8               LocalVariableTable\n+  #18 = Utf8               signature\n+  #19 = Utf8               length\n+  #20 = Utf8               I\n+  #21 = Utf8               i\n+  #22 = Utf8               StackMapTable\n+  #23 = Utf8               <init>\n+  #24 = Utf8               (Ljava/io/InputStream;)V\n+  #25 = Utf8               Exceptions\n+  #26 = Class              #27            // java/io/IOException\n+  #27 = Utf8               java/io/IOException\n+  #28 = Methodref          #1.#29         // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n+  #29 = NameAndType        #23:#30        // \"<init>\":(Ljava/io/InputStream;Z)V\n+  #30 = Utf8               (Ljava/io/InputStream;Z)V\n+  #31 = Utf8               this\n+  #32 = Utf8               Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n+  #33 = Utf8               inputStream\n+  #34 = Methodref          #1.#35         // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;ZI)V\n+  #35 = NameAndType        #23:#36        // \"<init>\":(Ljava/io/InputStream;ZI)V\n+  #36 = Utf8               (Ljava/io/InputStream;ZI)V\n+  #37 = Utf8               decompressConcatenated\n+  #38 = Utf8               Z\n+  #39 = Methodref          #3.#40         // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+  #40 = NameAndType        #23:#41        // \"<init>\":()V\n+  #41 = Utf8               ()V\n+  #42 = Class              #43            // org/tukaani/xz/XZInputStream\n+  #43 = Utf8               org/tukaani/xz/XZInputStream\n+  #44 = Methodref          #42.#45        // org/tukaani/xz/XZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+  #45 = NameAndType        #23:#46        // \"<init>\":(Ljava/io/InputStream;I)V\n+  #46 = Utf8               (Ljava/io/InputStream;I)V\n+  #47 = Fieldref           #1.#48         // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.in:Ljava/io/InputStream;\n+  #48 = NameAndType        #5:#6          // in:Ljava/io/InputStream;\n+  #49 = Class              #50            // org/tukaani/xz/SingleXZInputStream\n+  #50 = Utf8               org/tukaani/xz/SingleXZInputStream\n+  #51 = Methodref          #49.#45        // org/tukaani/xz/SingleXZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+  #52 = Utf8               memoryLimitInKb\n+  #53 = Class              #54            // java/io/InputStream\n+  #54 = Utf8               java/io/InputStream\n+  #55 = Utf8               read\n+  #56 = Utf8               ()I\n+  #57 = Methodref          #53.#58        // java/io/InputStream.read:()I\n+  #58 = NameAndType        #55:#56        // read:()I\n+  #59 = Methodref          #1.#60         // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.count:(I)V\n+  #60 = NameAndType        #61:#62        // count:(I)V\n+  #61 = Utf8               count\n+  #62 = Utf8               (I)V\n+  #63 = Class              #64            // org/apache/commons/compress/MemoryLimitException\n+  #64 = Utf8               org/apache/commons/compress/MemoryLimitException\n+  #65 = Methodref          #66.#68        // org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+  #66 = Class              #67            // org/tukaani/xz/MemoryLimitException\n+  #67 = Utf8               org/tukaani/xz/MemoryLimitException\n+  #68 = NameAndType        #69:#56        // getMemoryNeeded:()I\n+  #69 = Utf8               getMemoryNeeded\n+  #70 = Methodref          #66.#71        // org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+  #71 = NameAndType        #72:#56        // getMemoryLimit:()I\n+  #72 = Utf8               getMemoryLimit\n+  #73 = Methodref          #63.#74        // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+  #74 = NameAndType        #23:#75        // \"<init>\":(JILjava/lang/Exception;)V\n+  #75 = Utf8               (JILjava/lang/Exception;)V\n+  #76 = Utf8               ret\n+  #77 = Utf8               e\n+  #78 = Utf8               Lorg/tukaani/xz/MemoryLimitException;\n+  #79 = Utf8               ([BII)I\n+  #80 = Methodref          #53.#81        // java/io/InputStream.read:([BII)I\n+  #81 = NameAndType        #55:#79        // read:([BII)I\n+  #82 = Utf8               buf\n+  #83 = Utf8               off\n+  #84 = Utf8               len\n+  #85 = Utf8               skip\n+  #86 = Utf8               (J)J\n+  #87 = Methodref          #53.#88        // java/io/InputStream.skip:(J)J\n+  #88 = NameAndType        #85:#86        // skip:(J)J\n+  #89 = Utf8               n\n+  #90 = Utf8               J\n+  #91 = Utf8               available\n+  #92 = Methodref          #53.#93        // java/io/InputStream.available:()I\n+  #93 = NameAndType        #91:#56        // available:()I\n+  #94 = Utf8               close\n+  #95 = Methodref          #53.#96        // java/io/InputStream.close:()V\n+  #96 = NameAndType        #94:#41        // close:()V\n+  #97 = Utf8               SourceFile\n+  #98 = Utf8               XZCompressorInputStream.java\n {\n   private final java.io.InputStream in;\n     descriptor: Ljava/io/InputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public static boolean matches(byte[], int);\n     descriptor: ([BI)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: iload_1\n-         1: getstatic     #1                  // Field org/tukaani/xz/XZ.HEADER_MAGIC:[B\n+         1: getstatic     #10                 // Field org/tukaani/xz/XZ.HEADER_MAGIC:[B\n          4: arraylength\n          5: if_icmpge     10\n          8: iconst_0\n          9: ireturn\n         10: iconst_0\n         11: istore_2\n-        12: iload_2\n-        13: getstatic     #1                  // Field org/tukaani/xz/XZ.HEADER_MAGIC:[B\n-        16: arraylength\n-        17: if_icmpge     39\n-        20: aload_0\n+        12: goto          31\n+        15: aload_0\n+        16: iload_2\n+        17: baload\n+        18: getstatic     #10                 // Field org/tukaani/xz/XZ.HEADER_MAGIC:[B\n         21: iload_2\n         22: baload\n-        23: getstatic     #1                  // Field org/tukaani/xz/XZ.HEADER_MAGIC:[B\n-        26: iload_2\n-        27: baload\n-        28: if_icmpeq     33\n-        31: iconst_0\n-        32: ireturn\n-        33: iinc          2, 1\n-        36: goto          12\n+        23: if_icmpeq     28\n+        26: iconst_0\n+        27: ireturn\n+        28: iinc          2, 1\n+        31: iload_2\n+        32: getstatic     #10                 // Field org/tukaani/xz/XZ.HEADER_MAGIC:[B\n+        35: arraylength\n+        36: if_icmplt     15\n         39: iconst_1\n         40: ireturn\n       LineNumberTable:\n         line 46: 0\n         line 47: 8\n         line 50: 10\n-        line 51: 20\n-        line 52: 31\n-        line 50: 33\n+        line 51: 15\n+        line 52: 26\n+        line 50: 28\n         line 56: 39\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           12      27     2     i   I\n             0      41     0 signature   [B\n             0      41     1 length   I\n+           12      27     2     i   I\n       StackMapTable: number_of_entries = 4\n         frame_type = 10 /* same */\n         frame_type = 252 /* append */\n-          offset_delta = 1\n+          offset_delta = 4\n           locals = [ int ]\n-        frame_type = 20 /* same */\n-        frame_type = 250 /* chop */\n-          offset_delta = 5\n+        frame_type = 12 /* same */\n+        frame_type = 2 /* same */\n \n   public org.apache.commons.compress.compressors.xz.XZCompressorInputStream(java.io.InputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: invokespecial #2                  // Method \"<init>\":(Ljava/io/InputStream;Z)V\n+         3: invokespecial #28                 // Method \"<init>\":(Ljava/io/InputStream;Z)V\n          6: return\n       LineNumberTable:\n         line 74: 0\n         line 75: 6\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n             0       7     1 inputStream   Ljava/io/InputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public org.apache.commons.compress.compressors.xz.XZCompressorInputStream(java.io.InputStream, boolean) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;Z)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iconst_m1\n-         4: invokespecial #3                  // Method \"<init>\":(Ljava/io/InputStream;ZI)V\n+         4: invokespecial #34                 // Method \"<init>\":(Ljava/io/InputStream;ZI)V\n          7: return\n       LineNumberTable:\n         line 97: 0\n         line 98: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n             0       8     1 inputStream   Ljava/io/InputStream;\n             0       8     2 decompressConcatenated   Z\n-    Exceptions:\n-      throws java.io.IOException\n \n   public org.apache.commons.compress.compressors.xz.XZCompressorInputStream(java.io.InputStream, boolean, int) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;ZI)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_0\n-         1: invokespecial #4                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+         1: invokespecial #39                 // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: iload_2\n          5: ifeq          24\n          8: aload_0\n-         9: new           #5                  // class org/tukaani/xz/XZInputStream\n+         9: new           #42                 // class org/tukaani/xz/XZInputStream\n         12: dup\n         13: aload_1\n         14: iload_3\n-        15: invokespecial #6                  // Method org/tukaani/xz/XZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-        18: putfield      #7                  // Field in:Ljava/io/InputStream;\n+        15: invokespecial #44                 // Method org/tukaani/xz/XZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        18: putfield      #47                 // Field in:Ljava/io/InputStream;\n         21: goto          37\n         24: aload_0\n-        25: new           #8                  // class org/tukaani/xz/SingleXZInputStream\n+        25: new           #49                 // class org/tukaani/xz/SingleXZInputStream\n         28: dup\n         29: aload_1\n         30: iload_3\n-        31: invokespecial #9                  // Method org/tukaani/xz/SingleXZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-        34: putfield      #7                  // Field in:Ljava/io/InputStream;\n+        31: invokespecial #51                 // Method org/tukaani/xz/SingleXZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        34: putfield      #47                 // Field in:Ljava/io/InputStream;\n         37: return\n       LineNumberTable:\n-        line 124: 0\n+        line 122: 0\n         line 125: 4\n         line 126: 8\n+        line 127: 21\n         line 128: 24\n         line 130: 37\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      38     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n             0      38     1 inputStream   Ljava/io/InputStream;\n             0      38     2 decompressConcatenated   Z\n             0      38     3 memoryLimitInKb   I\n       StackMapTable: number_of_entries = 2\n         frame_type = 255 /* full_frame */\n           offset_delta = 24\n           locals = [ class org/apache/commons/compress/compressors/xz/XZCompressorInputStream, class java/io/InputStream, int, int ]\n           stack = []\n         frame_type = 12 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=6, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #10                 // Method java/io/InputStream.read:()I\n+         1: getfield      #47                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #57                 // Method java/io/InputStream.read:()I\n          7: istore_1\n          8: aload_0\n          9: iload_1\n         10: iconst_m1\n         11: if_icmpne     18\n         14: iconst_m1\n         15: goto          19\n         18: iconst_1\n-        19: invokevirtual #11                 // Method count:(I)V\n+        19: invokevirtual #59                 // Method count:(I)V\n         22: iload_1\n         23: ireturn\n         24: astore_1\n-        25: new           #13                 // class org/apache/commons/compress/MemoryLimitException\n+        25: new           #63                 // class org/apache/commons/compress/MemoryLimitException\n         28: dup\n         29: aload_1\n-        30: invokevirtual #14                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+        30: invokevirtual #65                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n         33: i2l\n         34: aload_1\n-        35: invokevirtual #15                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+        35: invokevirtual #70                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n         38: aload_1\n-        39: invokespecial #16                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+        39: invokespecial #73                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n         42: athrow\n       Exception table:\n          from    to  target type\n              0    23    24   Class org/tukaani/xz/MemoryLimitException\n       LineNumberTable:\n         line 135: 0\n         line 136: 8\n         line 137: 22\n         line 138: 24\n         line 139: 25\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n+            0      43     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n             8      16     1   ret   I\n            25      18     1     e   Lorg/tukaani/xz/MemoryLimitException;\n-            0      43     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n       StackMapTable: number_of_entries = 3\n         frame_type = 255 /* full_frame */\n           offset_delta = 18\n           locals = [ class org/apache/commons/compress/compressors/xz/XZCompressorInputStream, int ]\n           stack = [ class org/apache/commons/compress/compressors/xz/XZCompressorInputStream ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 0\n           locals = [ class org/apache/commons/compress/compressors/xz/XZCompressorInputStream, int ]\n           stack = [ class org/apache/commons/compress/compressors/xz/XZCompressorInputStream, int ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 4\n           locals = [ class org/apache/commons/compress/compressors/xz/XZCompressorInputStream ]\n           stack = [ class org/tukaani/xz/MemoryLimitException ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int read(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=6, locals=5, args_size=4\n          0: aload_0\n-         1: getfield      #7                  // Field in:Ljava/io/InputStream;\n+         1: getfield      #47                 // Field in:Ljava/io/InputStream;\n          4: aload_1\n          5: iload_2\n          6: iload_3\n-         7: invokevirtual #17                 // Method java/io/InputStream.read:([BII)I\n+         7: invokevirtual #80                 // Method java/io/InputStream.read:([BII)I\n         10: istore        4\n         12: aload_0\n         13: iload         4\n-        15: invokevirtual #11                 // Method count:(I)V\n+        15: invokevirtual #59                 // Method count:(I)V\n         18: iload         4\n         20: ireturn\n         21: astore        4\n-        23: new           #13                 // class org/apache/commons/compress/MemoryLimitException\n+        23: new           #63                 // class org/apache/commons/compress/MemoryLimitException\n         26: dup\n         27: aload         4\n-        29: invokevirtual #14                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+        29: invokevirtual #65                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n         32: i2l\n         33: aload         4\n-        35: invokevirtual #15                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+        35: invokevirtual #70                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n         38: aload         4\n-        40: invokespecial #16                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+        40: invokespecial #73                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n         43: athrow\n       Exception table:\n          from    to  target type\n              0    20    21   Class org/tukaani/xz/MemoryLimitException\n       LineNumberTable:\n         line 146: 0\n         line 147: 12\n         line 148: 18\n         line 149: 21\n         line 151: 23\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           12       9     4   ret   I\n-           23      21     4     e   Lorg/tukaani/xz/MemoryLimitException;\n             0      44     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n             0      44     1   buf   [B\n             0      44     2   off   I\n             0      44     3   len   I\n+           12       9     4   ret   I\n+           23      21     4     e   Lorg/tukaani/xz/MemoryLimitException;\n       StackMapTable: number_of_entries = 1\n         frame_type = 85 /* same_locals_1_stack_item */\n           stack = [ class org/tukaani/xz/MemoryLimitException ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   public long skip(long) throws java.io.IOException;\n     descriptor: (J)J\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=6, locals=4, args_size=2\n          0: aload_0\n-         1: getfield      #7                  // Field in:Ljava/io/InputStream;\n+         1: getfield      #47                 // Field in:Ljava/io/InputStream;\n          4: lload_1\n-         5: invokevirtual #18                 // Method java/io/InputStream.skip:(J)J\n+         5: invokevirtual #87                 // Method java/io/InputStream.skip:(J)J\n          8: lreturn\n          9: astore_3\n-        10: new           #13                 // class org/apache/commons/compress/MemoryLimitException\n+        10: new           #63                 // class org/apache/commons/compress/MemoryLimitException\n         13: dup\n         14: aload_3\n-        15: invokevirtual #14                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+        15: invokevirtual #65                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n         18: i2l\n         19: aload_3\n-        20: invokevirtual #15                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+        20: invokevirtual #70                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n         23: aload_3\n-        24: invokespecial #16                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+        24: invokespecial #73                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n         27: athrow\n       Exception table:\n          from    to  target type\n              0     8     9   Class org/tukaani/xz/MemoryLimitException\n       LineNumberTable:\n         line 158: 0\n         line 159: 9\n         line 161: 10\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           10      18     3     e   Lorg/tukaani/xz/MemoryLimitException;\n             0      28     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n             0      28     1     n   J\n+           10      18     3     e   Lorg/tukaani/xz/MemoryLimitException;\n       StackMapTable: number_of_entries = 1\n         frame_type = 73 /* same_locals_1_stack_item */\n           stack = [ class org/tukaani/xz/MemoryLimitException ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #19                 // Method java/io/InputStream.available:()I\n+         1: getfield      #47                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #92                 // Method java/io/InputStream.available:()I\n          7: ireturn\n       LineNumberTable:\n         line 167: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #20                 // Method java/io/InputStream.close:()V\n+         1: getfield      #47                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #95                 // Method java/io/InputStream.close:()V\n          7: return\n       LineNumberTable:\n         line 172: 0\n         line 173: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n-    Exceptions:\n-      throws java.io.IOException\n }\n SourceFile: \"XZCompressorInputStream.java\"\n"}]}
