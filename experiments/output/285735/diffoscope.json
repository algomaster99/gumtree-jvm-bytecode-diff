{"diffoscope-json-version": 1, "source1": "first/Base64.class", "source2": "second/Base64.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,83 +1,83 @@\n-  SHA-256 checksum 2a784a2926ad4346fbbad81277c0897fcb2f046d896fe7f904915b75a5ef8272\n+  SHA-256 checksum ddbfe13230dd96074bbd54d9f76291f7fdef1eb61dac6f1e92da17a68e90c9f8\n   Compiled from \"Base64.java\"\n public class org.apache.commons.codec.binary.Base64 extends org.apache.commons.codec.binary.BaseNCodec\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #6                          // org/apache/commons/codec/binary/Base64\n   super_class: #2                         // org/apache/commons/codec/binary/BaseNCodec\n   interfaces: 0, fields: 13, methods: 27, attributes: 2\n Constant pool:\n-    #1 = Methodref          #6.#135       // org/apache/commons/codec/binary/Base64.\"<init>\":(I)V\n-    #2 = Class              #136          // org/apache/commons/codec/binary/BaseNCodec\n-    #3 = Fieldref           #6.#137       // org/apache/commons/codec/binary/Base64.CHUNK_SEPARATOR:[B\n-    #4 = Methodref          #6.#138       // org/apache/commons/codec/binary/Base64.\"<init>\":(I[BZ)V\n-    #5 = Methodref          #6.#139       // org/apache/commons/codec/binary/Base64.\"<init>\":(I[B)V\n-    #6 = Class              #140          // org/apache/commons/codec/binary/Base64\n-    #7 = Methodref          #2.#141       // org/apache/commons/codec/binary/BaseNCodec.\"<init>\":(IIII)V\n-    #8 = Fieldref           #6.#142       // org/apache/commons/codec/binary/Base64.DECODE_TABLE:[B\n-    #9 = Fieldref           #6.#143       // org/apache/commons/codec/binary/Base64.decodeTable:[B\n-   #10 = Methodref          #6.#144       // org/apache/commons/codec/binary/Base64.containsAlphabetOrPad:([B)Z\n-   #11 = Methodref          #145.#146     // org/apache/commons/codec/binary/StringUtils.newStringUtf8:([B)Ljava/lang/String;\n-   #12 = Class              #147          // java/lang/IllegalArgumentException\n-   #13 = Class              #148          // java/lang/StringBuilder\n-   #14 = Methodref          #13.#149      // java/lang/StringBuilder.\"<init>\":()V\n-   #15 = String             #150          // lineSeparator must not contain base64 characters: [\n-   #16 = Methodref          #13.#151      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #17 = String             #152          // ]\n-   #18 = Methodref          #13.#153      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #19 = Methodref          #12.#154      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #20 = Fieldref           #6.#155       // org/apache/commons/codec/binary/Base64.encodeSize:I\n-   #21 = Fieldref           #6.#156       // org/apache/commons/codec/binary/Base64.lineSeparator:[B\n-   #22 = Methodref          #157.#158     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #23 = Fieldref           #6.#159       // org/apache/commons/codec/binary/Base64.decodeSize:I\n-   #24 = Fieldref           #6.#160       // org/apache/commons/codec/binary/Base64.URL_SAFE_ENCODE_TABLE:[B\n-   #25 = Fieldref           #6.#161       // org/apache/commons/codec/binary/Base64.STANDARD_ENCODE_TABLE:[B\n-   #26 = Fieldref           #6.#162       // org/apache/commons/codec/binary/Base64.encodeTable:[B\n-   #27 = Fieldref           #101.#163     // org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n-   #28 = Fieldref           #101.#164     // org/apache/commons/codec/binary/BaseNCodec$Context.modulus:I\n-   #29 = Fieldref           #6.#165       // org/apache/commons/codec/binary/Base64.lineLength:I\n-   #30 = Methodref          #6.#166       // org/apache/commons/codec/binary/Base64.ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-   #31 = Fieldref           #101.#167     // org/apache/commons/codec/binary/BaseNCodec$Context.pos:I\n-   #32 = Fieldref           #101.#168     // org/apache/commons/codec/binary/BaseNCodec$Context.ibitWorkArea:I\n-   #33 = Fieldref           #6.#169       // org/apache/commons/codec/binary/Base64.pad:B\n-   #34 = Class              #170          // java/lang/IllegalStateException\n-   #35 = String             #171          // Impossible modulus\n-   #36 = Methodref          #13.#172      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #37 = Methodref          #34.#154      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #38 = Fieldref           #101.#173     // org/apache/commons/codec/binary/BaseNCodec$Context.currentLinePos:I\n-   #39 = Methodref          #6.#174       // org/apache/commons/codec/binary/Base64.isBase64:([B)Z\n-   #40 = Methodref          #145.#175     // org/apache/commons/codec/binary/StringUtils.getBytesUtf8:(Ljava/lang/String;)[B\n-   #41 = Methodref          #6.#176       // org/apache/commons/codec/binary/Base64.isBase64:(B)Z\n-   #42 = Methodref          #6.#177       // org/apache/commons/codec/binary/Base64.isWhiteSpace:(B)Z\n-   #43 = Methodref          #6.#178       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZ)[B\n-   #44 = Methodref          #145.#179     // org/apache/commons/codec/binary/StringUtils.newStringUsAscii:([B)Ljava/lang/String;\n-   #45 = Methodref          #6.#180       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZZ)[B\n-   #46 = Class              #181          // java/lang/Integer\n+    #1 = Methodref          #6.#134       // org/apache/commons/codec/binary/Base64.\"<init>\":(I)V\n+    #2 = Class              #135          // org/apache/commons/codec/binary/BaseNCodec\n+    #3 = Fieldref           #6.#136       // org/apache/commons/codec/binary/Base64.CHUNK_SEPARATOR:[B\n+    #4 = Methodref          #6.#137       // org/apache/commons/codec/binary/Base64.\"<init>\":(I[BZ)V\n+    #5 = Methodref          #6.#138       // org/apache/commons/codec/binary/Base64.\"<init>\":(I[B)V\n+    #6 = Class              #139          // org/apache/commons/codec/binary/Base64\n+    #7 = Methodref          #2.#140       // org/apache/commons/codec/binary/BaseNCodec.\"<init>\":(IIII)V\n+    #8 = Fieldref           #6.#141       // org/apache/commons/codec/binary/Base64.DECODE_TABLE:[B\n+    #9 = Fieldref           #6.#142       // org/apache/commons/codec/binary/Base64.decodeTable:[B\n+   #10 = Methodref          #6.#143       // org/apache/commons/codec/binary/Base64.containsAlphabetOrPad:([B)Z\n+   #11 = Methodref          #144.#145     // org/apache/commons/codec/binary/StringUtils.newStringUtf8:([B)Ljava/lang/String;\n+   #12 = Class              #146          // java/lang/IllegalArgumentException\n+   #13 = Class              #147          // java/lang/StringBuilder\n+   #14 = Methodref          #13.#148      // java/lang/StringBuilder.\"<init>\":()V\n+   #15 = String             #149          // lineSeparator must not contain base64 characters: [\n+   #16 = Methodref          #13.#150      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #17 = String             #151          // ]\n+   #18 = Methodref          #13.#152      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #19 = Methodref          #12.#153      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #20 = Fieldref           #6.#154       // org/apache/commons/codec/binary/Base64.encodeSize:I\n+   #21 = Fieldref           #6.#155       // org/apache/commons/codec/binary/Base64.lineSeparator:[B\n+   #22 = Methodref          #156.#157     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #23 = Fieldref           #6.#158       // org/apache/commons/codec/binary/Base64.decodeSize:I\n+   #24 = Fieldref           #6.#159       // org/apache/commons/codec/binary/Base64.URL_SAFE_ENCODE_TABLE:[B\n+   #25 = Fieldref           #6.#160       // org/apache/commons/codec/binary/Base64.STANDARD_ENCODE_TABLE:[B\n+   #26 = Fieldref           #6.#161       // org/apache/commons/codec/binary/Base64.encodeTable:[B\n+   #27 = Fieldref           #100.#162     // org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n+   #28 = Fieldref           #100.#163     // org/apache/commons/codec/binary/BaseNCodec$Context.modulus:I\n+   #29 = Fieldref           #6.#164       // org/apache/commons/codec/binary/Base64.lineLength:I\n+   #30 = Methodref          #6.#165       // org/apache/commons/codec/binary/Base64.ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+   #31 = Fieldref           #100.#166     // org/apache/commons/codec/binary/BaseNCodec$Context.pos:I\n+   #32 = Fieldref           #100.#167     // org/apache/commons/codec/binary/BaseNCodec$Context.ibitWorkArea:I\n+   #33 = Fieldref           #6.#168       // org/apache/commons/codec/binary/Base64.pad:B\n+   #34 = Class              #169          // java/lang/IllegalStateException\n+   #35 = String             #170          // Impossible modulus\n+   #36 = Methodref          #13.#171      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #37 = Methodref          #34.#153      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #38 = Fieldref           #100.#172     // org/apache/commons/codec/binary/BaseNCodec$Context.currentLinePos:I\n+   #39 = Methodref          #6.#173       // org/apache/commons/codec/binary/Base64.isBase64:([B)Z\n+   #40 = Methodref          #144.#174     // org/apache/commons/codec/binary/StringUtils.getBytesUtf8:(Ljava/lang/String;)[B\n+   #41 = Methodref          #6.#175       // org/apache/commons/codec/binary/Base64.isBase64:(B)Z\n+   #42 = Methodref          #6.#176       // org/apache/commons/codec/binary/Base64.isWhiteSpace:(B)Z\n+   #43 = Methodref          #6.#177       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZ)[B\n+   #44 = Methodref          #144.#178     // org/apache/commons/codec/binary/StringUtils.newStringUsAscii:([B)Ljava/lang/String;\n+   #45 = Methodref          #6.#179       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZZ)[B\n+   #46 = Class              #180          // java/lang/Integer\n    #47 = Integer            2147483647\n-   #48 = Methodref          #6.#182       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZZI)[B\n-   #49 = Methodref          #6.#183       // org/apache/commons/codec/binary/Base64.\"<init>\":(Z)V\n-   #50 = Methodref          #6.#184       // org/apache/commons/codec/binary/Base64.getEncodedLength:([B)J\n-   #51 = String             #185          // Input array too big, the output array would be bigger (\n-   #52 = Methodref          #13.#186      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #53 = String             #187          // ) than the specified maximum size of\n-   #54 = Methodref          #6.#188       // org/apache/commons/codec/binary/Base64.encode:([B)[B\n-   #55 = Methodref          #6.#149       // org/apache/commons/codec/binary/Base64.\"<init>\":()V\n-   #56 = Methodref          #6.#189       // org/apache/commons/codec/binary/Base64.decode:(Ljava/lang/String;)[B\n-   #57 = Methodref          #6.#190       // org/apache/commons/codec/binary/Base64.decode:([B)[B\n-   #58 = Class              #191          // java/math/BigInteger\n-   #59 = Methodref          #6.#192       // org/apache/commons/codec/binary/Base64.decodeBase64:([B)[B\n-   #60 = Methodref          #58.#139      // java/math/BigInteger.\"<init>\":(I[B)V\n-   #61 = Class              #193          // java/lang/NullPointerException\n-   #62 = String             #194          // encodeInteger called with null parameter\n-   #63 = Methodref          #61.#154      // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n-   #64 = Methodref          #6.#195       // org/apache/commons/codec/binary/Base64.toIntegerBytes:(Ljava/math/BigInteger;)[B\n-   #65 = Methodref          #58.#196      // java/math/BigInteger.bitLength:()I\n-   #66 = Methodref          #58.#197      // java/math/BigInteger.toByteArray:()[B\n+   #48 = Methodref          #6.#181       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZZI)[B\n+   #49 = Methodref          #6.#182       // org/apache/commons/codec/binary/Base64.\"<init>\":(Z)V\n+   #50 = Methodref          #6.#183       // org/apache/commons/codec/binary/Base64.getEncodedLength:([B)J\n+   #51 = String             #184          // Input array too big, the output array would be bigger (\n+   #52 = Methodref          #13.#185      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #53 = String             #186          // ) than the specified maximum size of\n+   #54 = Methodref          #6.#187       // org/apache/commons/codec/binary/Base64.encode:([B)[B\n+   #55 = Methodref          #6.#148       // org/apache/commons/codec/binary/Base64.\"<init>\":()V\n+   #56 = Methodref          #6.#188       // org/apache/commons/codec/binary/Base64.decode:(Ljava/lang/String;)[B\n+   #57 = Methodref          #6.#189       // org/apache/commons/codec/binary/Base64.decode:([B)[B\n+   #58 = Class              #190          // java/math/BigInteger\n+   #59 = Methodref          #6.#191       // org/apache/commons/codec/binary/Base64.decodeBase64:([B)[B\n+   #60 = Methodref          #58.#138      // java/math/BigInteger.\"<init>\":(I[B)V\n+   #61 = Class              #192          // java/lang/NullPointerException\n+   #62 = String             #193          // encodeInteger called with null parameter\n+   #63 = Methodref          #61.#153      // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n+   #64 = Methodref          #6.#194       // org/apache/commons/codec/binary/Base64.toIntegerBytes:(Ljava/math/BigInteger;)[B\n+   #65 = Methodref          #58.#195      // java/math/BigInteger.bitLength:()I\n+   #66 = Methodref          #58.#196      // java/math/BigInteger.toByteArray:()[B\n    #67 = Utf8               BITS_PER_ENCODED_BYTE\n    #68 = Utf8               I\n    #69 = Utf8               ConstantValue\n    #70 = Integer            6\n    #71 = Utf8               BYTES_PER_UNENCODED_BLOCK\n    #72 = Integer            3\n    #73 = Utf8               BYTES_PER_ENCODED_BLOCK\n@@ -100,150 +100,149 @@\n    #90 = Utf8               LineNumberTable\n    #91 = Utf8               (Z)V\n    #92 = Utf8               (I)V\n    #93 = Utf8               (I[B)V\n    #94 = Utf8               (I[BZ)V\n    #95 = Utf8               StackMapTable\n    #96 = Class              #76           // \"[B\"\n-   #97 = Class              #140          // org/apache/commons/codec/binary/Base64\n-   #98 = Utf8               isUrlSafe\n-   #99 = Utf8               ()Z\n-  #100 = Utf8               encode\n-  #101 = Class              #198          // org/apache/commons/codec/binary/BaseNCodec$Context\n-  #102 = Utf8               Context\n-  #103 = Utf8               InnerClasses\n-  #104 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #105 = Utf8               decode\n-  #106 = Utf8               isArrayByteBase64\n-  #107 = Utf8               ([B)Z\n-  #108 = Utf8               Deprecated\n-  #109 = Utf8               RuntimeVisibleAnnotations\n-  #110 = Utf8               Ljava/lang/Deprecated;\n-  #111 = Utf8               isBase64\n-  #112 = Utf8               (B)Z\n-  #113 = Utf8               (Ljava/lang/String;)Z\n-  #114 = Utf8               encodeBase64\n-  #115 = Utf8               ([B)[B\n-  #116 = Utf8               encodeBase64String\n-  #117 = Utf8               ([B)Ljava/lang/String;\n-  #118 = Utf8               encodeBase64URLSafe\n-  #119 = Utf8               encodeBase64URLSafeString\n-  #120 = Utf8               encodeBase64Chunked\n-  #121 = Utf8               ([BZ)[B\n-  #122 = Utf8               ([BZZ)[B\n-  #123 = Utf8               ([BZZI)[B\n-  #124 = Utf8               decodeBase64\n-  #125 = Utf8               (Ljava/lang/String;)[B\n-  #126 = Utf8               decodeInteger\n-  #127 = Utf8               ([B)Ljava/math/BigInteger;\n-  #128 = Utf8               encodeInteger\n-  #129 = Utf8               (Ljava/math/BigInteger;)[B\n-  #130 = Utf8               toIntegerBytes\n-  #131 = Utf8               isInAlphabet\n-  #132 = Utf8               <clinit>\n-  #133 = Utf8               SourceFile\n-  #134 = Utf8               Base64.java\n-  #135 = NameAndType        #87:#92       // \"<init>\":(I)V\n-  #136 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n-  #137 = NameAndType        #75:#76       // CHUNK_SEPARATOR:[B\n-  #138 = NameAndType        #87:#94       // \"<init>\":(I[BZ)V\n-  #139 = NameAndType        #87:#93       // \"<init>\":(I[B)V\n-  #140 = Utf8               org/apache/commons/codec/binary/Base64\n-  #141 = NameAndType        #87:#199      // \"<init>\":(IIII)V\n-  #142 = NameAndType        #79:#76       // DECODE_TABLE:[B\n-  #143 = NameAndType        #83:#76       // decodeTable:[B\n-  #144 = NameAndType        #200:#107     // containsAlphabetOrPad:([B)Z\n-  #145 = Class              #201          // org/apache/commons/codec/binary/StringUtils\n-  #146 = NameAndType        #202:#117     // newStringUtf8:([B)Ljava/lang/String;\n-  #147 = Utf8               java/lang/IllegalArgumentException\n-  #148 = Utf8               java/lang/StringBuilder\n-  #149 = NameAndType        #87:#88       // \"<init>\":()V\n-  #150 = Utf8               lineSeparator must not contain base64 characters: [\n-  #151 = NameAndType        #203:#204     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #152 = Utf8               ]\n-  #153 = NameAndType        #205:#206     // toString:()Ljava/lang/String;\n-  #154 = NameAndType        #87:#207      // \"<init>\":(Ljava/lang/String;)V\n-  #155 = NameAndType        #86:#68       // encodeSize:I\n-  #156 = NameAndType        #84:#76       // lineSeparator:[B\n-  #157 = Class              #208          // java/lang/System\n-  #158 = NameAndType        #209:#210     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #159 = NameAndType        #85:#68       // decodeSize:I\n-  #160 = NameAndType        #78:#76       // URL_SAFE_ENCODE_TABLE:[B\n-  #161 = NameAndType        #77:#76       // STANDARD_ENCODE_TABLE:[B\n-  #162 = NameAndType        #82:#76       // encodeTable:[B\n-  #163 = NameAndType        #211:#212     // eof:Z\n-  #164 = NameAndType        #213:#68      // modulus:I\n-  #165 = NameAndType        #214:#68      // lineLength:I\n-  #166 = NameAndType        #215:#216     // ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-  #167 = NameAndType        #217:#68      // pos:I\n-  #168 = NameAndType        #218:#68      // ibitWorkArea:I\n-  #169 = NameAndType        #219:#220     // pad:B\n-  #170 = Utf8               java/lang/IllegalStateException\n-  #171 = Utf8               Impossible modulus\n-  #172 = NameAndType        #203:#221     // append:(I)Ljava/lang/StringBuilder;\n-  #173 = NameAndType        #222:#68      // currentLinePos:I\n-  #174 = NameAndType        #111:#107     // isBase64:([B)Z\n-  #175 = NameAndType        #223:#125     // getBytesUtf8:(Ljava/lang/String;)[B\n-  #176 = NameAndType        #111:#112     // isBase64:(B)Z\n-  #177 = NameAndType        #224:#112     // isWhiteSpace:(B)Z\n-  #178 = NameAndType        #114:#121     // encodeBase64:([BZ)[B\n-  #179 = NameAndType        #225:#117     // newStringUsAscii:([B)Ljava/lang/String;\n-  #180 = NameAndType        #114:#122     // encodeBase64:([BZZ)[B\n-  #181 = Utf8               java/lang/Integer\n-  #182 = NameAndType        #114:#123     // encodeBase64:([BZZI)[B\n-  #183 = NameAndType        #87:#91       // \"<init>\":(Z)V\n-  #184 = NameAndType        #226:#227     // getEncodedLength:([B)J\n-  #185 = Utf8               Input array too big, the output array would be bigger (\n-  #186 = NameAndType        #203:#228     // append:(J)Ljava/lang/StringBuilder;\n-  #187 = Utf8               ) than the specified maximum size of\n-  #188 = NameAndType        #100:#115     // encode:([B)[B\n-  #189 = NameAndType        #105:#125     // decode:(Ljava/lang/String;)[B\n-  #190 = NameAndType        #105:#115     // decode:([B)[B\n-  #191 = Utf8               java/math/BigInteger\n-  #192 = NameAndType        #124:#115     // decodeBase64:([B)[B\n-  #193 = Utf8               java/lang/NullPointerException\n-  #194 = Utf8               encodeInteger called with null parameter\n-  #195 = NameAndType        #130:#129     // toIntegerBytes:(Ljava/math/BigInteger;)[B\n-  #196 = NameAndType        #229:#230     // bitLength:()I\n-  #197 = NameAndType        #231:#232     // toByteArray:()[B\n-  #198 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n-  #199 = Utf8               (IIII)V\n-  #200 = Utf8               containsAlphabetOrPad\n-  #201 = Utf8               org/apache/commons/codec/binary/StringUtils\n-  #202 = Utf8               newStringUtf8\n-  #203 = Utf8               append\n-  #204 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #205 = Utf8               toString\n-  #206 = Utf8               ()Ljava/lang/String;\n-  #207 = Utf8               (Ljava/lang/String;)V\n-  #208 = Utf8               java/lang/System\n-  #209 = Utf8               arraycopy\n-  #210 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #211 = Utf8               eof\n-  #212 = Utf8               Z\n-  #213 = Utf8               modulus\n-  #214 = Utf8               lineLength\n-  #215 = Utf8               ensureBufferSize\n-  #216 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-  #217 = Utf8               pos\n-  #218 = Utf8               ibitWorkArea\n-  #219 = Utf8               pad\n-  #220 = Utf8               B\n-  #221 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #222 = Utf8               currentLinePos\n-  #223 = Utf8               getBytesUtf8\n-  #224 = Utf8               isWhiteSpace\n-  #225 = Utf8               newStringUsAscii\n-  #226 = Utf8               getEncodedLength\n-  #227 = Utf8               ([B)J\n-  #228 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #229 = Utf8               bitLength\n-  #230 = Utf8               ()I\n-  #231 = Utf8               toByteArray\n-  #232 = Utf8               ()[B\n+   #97 = Utf8               isUrlSafe\n+   #98 = Utf8               ()Z\n+   #99 = Utf8               encode\n+  #100 = Class              #197          // org/apache/commons/codec/binary/BaseNCodec$Context\n+  #101 = Utf8               Context\n+  #102 = Utf8               InnerClasses\n+  #103 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #104 = Utf8               decode\n+  #105 = Utf8               isArrayByteBase64\n+  #106 = Utf8               ([B)Z\n+  #107 = Utf8               Deprecated\n+  #108 = Utf8               RuntimeVisibleAnnotations\n+  #109 = Utf8               Ljava/lang/Deprecated;\n+  #110 = Utf8               isBase64\n+  #111 = Utf8               (B)Z\n+  #112 = Utf8               (Ljava/lang/String;)Z\n+  #113 = Utf8               encodeBase64\n+  #114 = Utf8               ([B)[B\n+  #115 = Utf8               encodeBase64String\n+  #116 = Utf8               ([B)Ljava/lang/String;\n+  #117 = Utf8               encodeBase64URLSafe\n+  #118 = Utf8               encodeBase64URLSafeString\n+  #119 = Utf8               encodeBase64Chunked\n+  #120 = Utf8               ([BZ)[B\n+  #121 = Utf8               ([BZZ)[B\n+  #122 = Utf8               ([BZZI)[B\n+  #123 = Utf8               decodeBase64\n+  #124 = Utf8               (Ljava/lang/String;)[B\n+  #125 = Utf8               decodeInteger\n+  #126 = Utf8               ([B)Ljava/math/BigInteger;\n+  #127 = Utf8               encodeInteger\n+  #128 = Utf8               (Ljava/math/BigInteger;)[B\n+  #129 = Utf8               toIntegerBytes\n+  #130 = Utf8               isInAlphabet\n+  #131 = Utf8               <clinit>\n+  #132 = Utf8               SourceFile\n+  #133 = Utf8               Base64.java\n+  #134 = NameAndType        #87:#92       // \"<init>\":(I)V\n+  #135 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n+  #136 = NameAndType        #75:#76       // CHUNK_SEPARATOR:[B\n+  #137 = NameAndType        #87:#94       // \"<init>\":(I[BZ)V\n+  #138 = NameAndType        #87:#93       // \"<init>\":(I[B)V\n+  #139 = Utf8               org/apache/commons/codec/binary/Base64\n+  #140 = NameAndType        #87:#198      // \"<init>\":(IIII)V\n+  #141 = NameAndType        #79:#76       // DECODE_TABLE:[B\n+  #142 = NameAndType        #83:#76       // decodeTable:[B\n+  #143 = NameAndType        #199:#106     // containsAlphabetOrPad:([B)Z\n+  #144 = Class              #200          // org/apache/commons/codec/binary/StringUtils\n+  #145 = NameAndType        #201:#116     // newStringUtf8:([B)Ljava/lang/String;\n+  #146 = Utf8               java/lang/IllegalArgumentException\n+  #147 = Utf8               java/lang/StringBuilder\n+  #148 = NameAndType        #87:#88       // \"<init>\":()V\n+  #149 = Utf8               lineSeparator must not contain base64 characters: [\n+  #150 = NameAndType        #202:#203     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #151 = Utf8               ]\n+  #152 = NameAndType        #204:#205     // toString:()Ljava/lang/String;\n+  #153 = NameAndType        #87:#206      // \"<init>\":(Ljava/lang/String;)V\n+  #154 = NameAndType        #86:#68       // encodeSize:I\n+  #155 = NameAndType        #84:#76       // lineSeparator:[B\n+  #156 = Class              #207          // java/lang/System\n+  #157 = NameAndType        #208:#209     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #158 = NameAndType        #85:#68       // decodeSize:I\n+  #159 = NameAndType        #78:#76       // URL_SAFE_ENCODE_TABLE:[B\n+  #160 = NameAndType        #77:#76       // STANDARD_ENCODE_TABLE:[B\n+  #161 = NameAndType        #82:#76       // encodeTable:[B\n+  #162 = NameAndType        #210:#211     // eof:Z\n+  #163 = NameAndType        #212:#68      // modulus:I\n+  #164 = NameAndType        #213:#68      // lineLength:I\n+  #165 = NameAndType        #214:#215     // ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+  #166 = NameAndType        #216:#68      // pos:I\n+  #167 = NameAndType        #217:#68      // ibitWorkArea:I\n+  #168 = NameAndType        #218:#219     // pad:B\n+  #169 = Utf8               java/lang/IllegalStateException\n+  #170 = Utf8               Impossible modulus\n+  #171 = NameAndType        #202:#220     // append:(I)Ljava/lang/StringBuilder;\n+  #172 = NameAndType        #221:#68      // currentLinePos:I\n+  #173 = NameAndType        #110:#106     // isBase64:([B)Z\n+  #174 = NameAndType        #222:#124     // getBytesUtf8:(Ljava/lang/String;)[B\n+  #175 = NameAndType        #110:#111     // isBase64:(B)Z\n+  #176 = NameAndType        #223:#111     // isWhiteSpace:(B)Z\n+  #177 = NameAndType        #113:#120     // encodeBase64:([BZ)[B\n+  #178 = NameAndType        #224:#116     // newStringUsAscii:([B)Ljava/lang/String;\n+  #179 = NameAndType        #113:#121     // encodeBase64:([BZZ)[B\n+  #180 = Utf8               java/lang/Integer\n+  #181 = NameAndType        #113:#122     // encodeBase64:([BZZI)[B\n+  #182 = NameAndType        #87:#91       // \"<init>\":(Z)V\n+  #183 = NameAndType        #225:#226     // getEncodedLength:([B)J\n+  #184 = Utf8               Input array too big, the output array would be bigger (\n+  #185 = NameAndType        #202:#227     // append:(J)Ljava/lang/StringBuilder;\n+  #186 = Utf8               ) than the specified maximum size of\n+  #187 = NameAndType        #99:#114      // encode:([B)[B\n+  #188 = NameAndType        #104:#124     // decode:(Ljava/lang/String;)[B\n+  #189 = NameAndType        #104:#114     // decode:([B)[B\n+  #190 = Utf8               java/math/BigInteger\n+  #191 = NameAndType        #123:#114     // decodeBase64:([B)[B\n+  #192 = Utf8               java/lang/NullPointerException\n+  #193 = Utf8               encodeInteger called with null parameter\n+  #194 = NameAndType        #129:#128     // toIntegerBytes:(Ljava/math/BigInteger;)[B\n+  #195 = NameAndType        #228:#229     // bitLength:()I\n+  #196 = NameAndType        #230:#231     // toByteArray:()[B\n+  #197 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n+  #198 = Utf8               (IIII)V\n+  #199 = Utf8               containsAlphabetOrPad\n+  #200 = Utf8               org/apache/commons/codec/binary/StringUtils\n+  #201 = Utf8               newStringUtf8\n+  #202 = Utf8               append\n+  #203 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #204 = Utf8               toString\n+  #205 = Utf8               ()Ljava/lang/String;\n+  #206 = Utf8               (Ljava/lang/String;)V\n+  #207 = Utf8               java/lang/System\n+  #208 = Utf8               arraycopy\n+  #209 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #210 = Utf8               eof\n+  #211 = Utf8               Z\n+  #212 = Utf8               modulus\n+  #213 = Utf8               lineLength\n+  #214 = Utf8               ensureBufferSize\n+  #215 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+  #216 = Utf8               pos\n+  #217 = Utf8               ibitWorkArea\n+  #218 = Utf8               pad\n+  #219 = Utf8               B\n+  #220 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #221 = Utf8               currentLinePos\n+  #222 = Utf8               getBytesUtf8\n+  #223 = Utf8               isWhiteSpace\n+  #224 = Utf8               newStringUsAscii\n+  #225 = Utf8               getEncodedLength\n+  #226 = Utf8               ([B)J\n+  #227 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #228 = Utf8               bitLength\n+  #229 = Utf8               ()I\n+  #230 = Utf8               toByteArray\n+  #231 = Utf8               ()[B\n {\n   private static final int BITS_PER_ENCODED_BYTE = 6;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 6\n \n   private static final int BYTES_PER_UNENCODED_BLOCK = 3;\n@@ -443,14 +442,16 @@\n        148: getstatic     #24                 // Field URL_SAFE_ENCODE_TABLE:[B\n        151: goto          157\n        154: getstatic     #25                 // Field STANDARD_ENCODE_TABLE:[B\n        157: putfield      #26                 // Field encodeTable:[B\n        160: return\n       LineNumberTable:\n         line 275: 0\n+        line 277: 4\n+        line 275: 14\n         line 145: 17\n         line 280: 24\n         line 281: 28\n         line 282: 36\n         line 283: 42\n         line 285: 75\n         line 286: 79\n@@ -1220,15 +1221,15 @@\n          0: aload_0\n          1: invokestatic  #39                 // Method isBase64:([B)Z\n          4: ireturn\n       LineNumberTable:\n         line 499: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #110()\n+      0: #109()\n         java.lang.Deprecated\n \n   public static boolean isBase64(byte);\n     descriptor: (B)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n@@ -2696,8 +2697,8 @@\n         line 74: 0\n         line 83: 16\n         line 96: 401\n         line 115: 786\n }\n SourceFile: \"Base64.java\"\n InnerClasses:\n-  static #102= #101 of #2;                // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n+  static #101= #100 of #2;                // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n"}]}
