{"diffoscope-json-version": 1, "source1": "first/AbstractSuperCheck.class", "source2": "second/AbstractSuperCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -28,81 +28,76 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 9, 79 };\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         this.methodStack.clear();\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (this.isOverridingMethod(ast)) {\n-            this.methodStack.add(new AbstractSuperCheck.MethodNode(ast));\n+    public void visitToken(final DetailAST detailAST) {\n+        if (this.isOverridingMethod(detailAST)) {\n+            this.methodStack.add(new AbstractSuperCheck.MethodNode(detailAST));\n         }\n-        else if (this.isSuperCall(ast)) {\n-            final AbstractSuperCheck.MethodNode methodNode = (AbstractSuperCheck.MethodNode)this.methodStack.getLast();\n-            methodNode.setCallingSuper();\n+        else if (this.isSuperCall(detailAST)) {\n+            ((AbstractSuperCheck.MethodNode)this.methodStack.getLast()).setCallingSuper();\n         }\n     }\n     \n-    private boolean isSuperCall(final DetailAST literalSuperAst) {\n-        boolean superCall = false;\n-        if (!this.isSameNameMethod(literalSuperAst)) {\n-            final DetailAST parent = literalSuperAst.getParent();\n+    private boolean isSuperCall(final DetailAST detailAST) {\n+        boolean superCallInOverridingMethod = false;\n+        if (!this.isSameNameMethod(detailAST)) {\n+            final DetailAST parent = detailAST.getParent();\n             if (parent.getType() == 180 || !hasArguments(parent)) {\n-                superCall = this.isSuperCallInOverridingMethod(parent);\n+                superCallInOverridingMethod = this.isSuperCallInOverridingMethod(parent);\n             }\n         }\n-        return superCall;\n+        return superCallInOverridingMethod;\n     }\n     \n-    private boolean isSuperCallInOverridingMethod(final DetailAST ast) {\n-        boolean inOverridingMethod = false;\n-        for (DetailAST dotAst = ast; dotAst.getType() != 8 && dotAst.getType() != 11; dotAst = dotAst.getParent()) {\n-            if (dotAst.getType() == 9) {\n-                inOverridingMethod = this.isOverridingMethod(dotAst);\n+    private boolean isSuperCallInOverridingMethod(final DetailAST detailAST) {\n+        boolean overridingMethod = false;\n+        for (DetailAST parent = detailAST; parent.getType() != 8 && parent.getType() != 11; parent = parent.getParent()) {\n+            if (parent.getType() == 9) {\n+                overridingMethod = this.isOverridingMethod(parent);\n                 break;\n             }\n         }\n-        return inOverridingMethod;\n+        return overridingMethod;\n     }\n     \n-    private static boolean hasArguments(final DetailAST methodCallDotAst) {\n-        final DetailAST argumentsList = methodCallDotAst.getNextSibling();\n-        return argumentsList.hasChildren();\n+    private static boolean hasArguments(final DetailAST detailAST) {\n+        return detailAST.getNextSibling().hasChildren();\n     }\n     \n-    private boolean isSameNameMethod(final DetailAST ast) {\n-        DetailAST sibling = ast.getNextSibling();\n-        if (sibling != null && sibling.getType() == 163) {\n-            sibling = sibling.getNextSibling();\n+    private boolean isSameNameMethod(final DetailAST detailAST) {\n+        DetailAST detailAST2 = detailAST.getNextSibling();\n+        if (detailAST2 != null && detailAST2.getType() == 163) {\n+            detailAST2 = detailAST2.getNextSibling();\n         }\n-        return sibling == null || !this.getMethodName().equals(sibling.getText());\n+        return detailAST2 == null || !this.getMethodName().equals(detailAST2.getText());\n     }\n     \n-    public void leaveToken(final DetailAST ast) {\n-        if (this.isOverridingMethod(ast)) {\n+    public void leaveToken(final DetailAST detailAST) {\n+        if (this.isOverridingMethod(detailAST)) {\n             final AbstractSuperCheck.MethodNode methodNode = (AbstractSuperCheck.MethodNode)this.methodStack.removeLast();\n             if (!methodNode.isCallingSuper()) {\n-                final DetailAST methodAST = methodNode.getMethod();\n-                final DetailAST nameAST = methodAST.findFirstToken(58);\n-                this.log(nameAST, \"missing.super.call\", new Object[] { nameAST.getText() });\n+                final DetailAST firstToken = methodNode.getMethod().findFirstToken(58);\n+                this.log(firstToken, \"missing.super.call\", new Object[] { firstToken.getText() });\n             }\n         }\n     }\n     \n-    private boolean isOverridingMethod(final DetailAST ast) {\n-        boolean overridingMethod = false;\n-        if (ast.getType() == 9 && !ScopeUtil.isInInterfaceOrAnnotationBlock(ast)) {\n-            final DetailAST nameAST = ast.findFirstToken(58);\n-            final String name = nameAST.getText();\n-            final DetailAST modifiersAST = ast.findFirstToken(5);\n-            if (this.getMethodName().equals(name) && modifiersAST.findFirstToken(66) == null) {\n-                final DetailAST params = ast.findFirstToken(20);\n-                overridingMethod = !params.hasChildren();\n+    private boolean isOverridingMethod(final DetailAST detailAST) {\n+        boolean b = false;\n+        if (detailAST.getType() == 9 && !ScopeUtil.isInInterfaceOrAnnotationBlock(detailAST)) {\n+            final String text = detailAST.findFirstToken(58).getText();\n+            final DetailAST firstToken = detailAST.findFirstToken(5);\n+            if (this.getMethodName().equals(text) && firstToken.findFirstToken(66) == null) {\n+                b = !detailAST.findFirstToken(20).hasChildren();\n             }\n         }\n-        return overridingMethod;\n+        return b;\n     }\n }\n"}]}
