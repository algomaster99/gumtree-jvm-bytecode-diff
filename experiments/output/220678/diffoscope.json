{"diffoscope-json-version": 1, "source1": "first/AnnotationUtil.class", "source2": "second/AnnotationUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,101 +13,92 @@\n     private static final String FQ_OVERRIDE = \"java.lang.Override\";\n     private static final Set<String> OVERRIDE_ANNOTATIONS;\n     \n     private AnnotationUtil() {\n         throw new UnsupportedOperationException(\"do not instantiate.\");\n     }\n     \n-    public static boolean containsAnnotation(final DetailAST ast, final String annotation) {\n-        return getAnnotation(ast, annotation) != null;\n+    public static boolean containsAnnotation(final DetailAST detailAST, final String s) {\n+        return getAnnotation(detailAST, s) != null;\n     }\n     \n-    public static boolean containsAnnotation(final DetailAST ast) {\n-        if (ast == null) {\n+    public static boolean containsAnnotation(final DetailAST detailAST) {\n+        if (detailAST == null) {\n             throw new IllegalArgumentException(\"the ast is null\");\n         }\n-        final DetailAST holder = getAnnotationHolder(ast);\n-        return holder != null && holder.findFirstToken(159) != null;\n+        final DetailAST annotationHolder = getAnnotationHolder(detailAST);\n+        return annotationHolder != null && annotationHolder.findFirstToken(159) != null;\n     }\n     \n-    public static boolean containsAnnotation(final DetailAST ast, final Set<String> annotations) {\n-        if (ast == null) {\n+    public static boolean containsAnnotation(final DetailAST detailAST, final Set<String> set) {\n+        if (detailAST == null) {\n             throw new IllegalArgumentException(\"the ast is null\");\n         }\n-        if (annotations == null) {\n+        if (set == null) {\n             throw new IllegalArgumentException(\"annotations cannot be null\");\n         }\n-        boolean result = false;\n-        if (!annotations.isEmpty()) {\n-            final DetailAST firstMatchingAnnotation = findFirstAnnotation(ast, annotationNode -> {\n-                final String annotationFullIdent = getAnnotationFullIdent(annotationNode);\n-                return annotations.contains(annotationFullIdent);\n-            });\n-            result = (firstMatchingAnnotation != null);\n-        }\n-        return result;\n-    }\n-    \n-    private static String getAnnotationFullIdent(final DetailAST annotationNode) {\n-        final DetailAST identNode = annotationNode.findFirstToken(58);\n-        String annotationString;\n-        if (identNode == null) {\n-            final DetailAST dotNode = annotationNode.findFirstToken(59);\n-            annotationString = FullIdent.createFullIdent(dotNode).getText();\n+        boolean b = false;\n+        if (!set.isEmpty()) {\n+            b = (findFirstAnnotation(detailAST, detailAST2 -> set2.contains(getAnnotationFullIdent(detailAST2))) != null);\n+        }\n+        return b;\n+    }\n+    \n+    private static String getAnnotationFullIdent(final DetailAST detailAST) {\n+        final DetailAST firstToken = detailAST.findFirstToken(58);\n+        String s;\n+        if (firstToken == null) {\n+            s = FullIdent.createFullIdent(detailAST.findFirstToken(59)).getText();\n         }\n         else {\n-            annotationString = identNode.getText();\n+            s = firstToken.getText();\n         }\n-        return annotationString;\n+        return s;\n     }\n     \n-    public static boolean hasOverrideAnnotation(final DetailAST ast) {\n-        return containsAnnotation(ast, AnnotationUtil.OVERRIDE_ANNOTATIONS);\n+    public static boolean hasOverrideAnnotation(final DetailAST detailAST) {\n+        return containsAnnotation(detailAST, AnnotationUtil.OVERRIDE_ANNOTATIONS);\n     }\n     \n-    public static DetailAST getAnnotationHolder(final DetailAST ast) {\n-        if (ast == null) {\n+    public static DetailAST getAnnotationHolder(final DetailAST detailAST) {\n+        if (detailAST == null) {\n             throw new IllegalArgumentException(\"the ast is null\");\n         }\n-        DetailAST annotationHolder;\n-        if (ast.getType() == 155 || ast.getType() == 16) {\n-            annotationHolder = ast.findFirstToken(158);\n+        DetailAST detailAST2;\n+        if (detailAST.getType() == 155 || detailAST.getType() == 16) {\n+            detailAST2 = detailAST.findFirstToken(158);\n         }\n         else {\n-            annotationHolder = ast.findFirstToken(5);\n+            detailAST2 = detailAST.findFirstToken(5);\n         }\n-        return annotationHolder;\n+        return detailAST2;\n     }\n     \n-    public static DetailAST getAnnotation(final DetailAST ast, final String annotation) {\n-        if (ast == null) {\n+    public static DetailAST getAnnotation(final DetailAST detailAST, final String s) {\n+        if (detailAST == null) {\n             throw new IllegalArgumentException(\"the ast is null\");\n         }\n-        if (annotation == null) {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"the annotation is null\");\n         }\n-        if (CommonUtil.isBlank(annotation)) {\n+        if (CommonUtil.isBlank(s)) {\n             throw new IllegalArgumentException(\"the annotation is empty or spaces\");\n         }\n-        return findFirstAnnotation(ast, annotationNode -> {\n-            final DetailAST firstChild = annotationNode.findFirstToken(170);\n-            final String name = FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n-            return annotation.equals(name);\n-        });\n+        return findFirstAnnotation(detailAST, detailAST2 -> s2.equals(FullIdent.createFullIdent(detailAST2.findFirstToken(170).getNextSibling()).getText()));\n     }\n     \n-    private static DetailAST findFirstAnnotation(final DetailAST ast, final Predicate<DetailAST> predicate) {\n-        final DetailAST holder = getAnnotationHolder(ast);\n-        DetailAST result = null;\n-        for (DetailAST child = holder.getFirstChild(); child != null; child = child.getNextSibling()) {\n-            if (child.getType() == 159 && predicate.test(child)) {\n-                result = child;\n+    private static DetailAST findFirstAnnotation(final DetailAST detailAST, final Predicate<DetailAST> predicate) {\n+        final DetailAST annotationHolder = getAnnotationHolder(detailAST);\n+        DetailAST detailAST2 = null;\n+        for (DetailAST detailAST3 = annotationHolder.getFirstChild(); detailAST3 != null; detailAST3 = detailAST3.getNextSibling()) {\n+            if (detailAST3.getType() == 159 && predicate.test(detailAST3)) {\n+                detailAST2 = detailAST3;\n                 break;\n             }\n         }\n-        return result;\n+        return detailAST2;\n     }\n     \n     static {\n         OVERRIDE_ANNOTATIONS = Set.of(\"Override\", \"java.lang.Override\");\n     }\n }\n"}]}
