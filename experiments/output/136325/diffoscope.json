{"diffoscope-json-version": 1, "source1": "first/InnerClasses.class", "source2": "second/InnerClasses.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,14 +10,18 @@\n import java.io.DataInput;\n \n public final class InnerClasses extends Attribute implements Iterable<InnerClass>\n {\n     private static final InnerClass[] EMPTY_INNER_CLASSE_ARRAY;\n     private InnerClass[] innerClasses;\n     \n+    static {\n+        EMPTY_INNER_CLASSE_ARRAY = new InnerClass[0];\n+    }\n+    \n     public InnerClasses(final InnerClasses c) {\n         this(c.getNameIndex(), c.getLength(), c.getInnerClasses(), c.getConstantPool());\n     }\n     \n     InnerClasses(final int nameIndex, final int length, final DataInput input, final ConstantPool constantPool) throws IOException {\n         this(nameIndex, length, (InnerClass[])null, constantPool);\n         final int classCount = input.readUnsignedShort();\n@@ -43,15 +47,17 @@\n         c.setConstantPool(constantPool);\n         return c;\n     }\n     \n     public void dump(final DataOutputStream file) throws IOException {\n         super.dump(file);\n         file.writeShort(this.innerClasses.length);\n-        for (final InnerClass innerClass : this.innerClasses) {\n+        InnerClass[] innerClasses;\n+        for (int length = (innerClasses = this.innerClasses).length, i = 0; i < length; ++i) {\n+            final InnerClass innerClass = innerClasses[i];\n             innerClass.dump(file);\n         }\n     }\n     \n     public InnerClass[] getInnerClasses() {\n         return this.innerClasses;\n     }\n@@ -65,17 +71,15 @@\n     }\n     \n     public String toString() {\n         final StringBuilder buf = new StringBuilder();\n         buf.append(\"InnerClasses(\");\n         buf.append(this.innerClasses.length);\n         buf.append(\"):\\n\");\n-        for (final InnerClass innerClass : this.innerClasses) {\n+        InnerClass[] innerClasses;\n+        for (int length = (innerClasses = this.innerClasses).length, i = 0; i < length; ++i) {\n+            final InnerClass innerClass = innerClasses[i];\n             buf.append(innerClass.toString(super.getConstantPool())).append(\"\\n\");\n         }\n         return buf.substring();\n     }\n-    \n-    static {\n-        EMPTY_INNER_CLASSE_ARRAY = new InnerClass[0];\n-    }\n }\n"}]}
