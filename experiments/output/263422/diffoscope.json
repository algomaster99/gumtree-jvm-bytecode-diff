{"diffoscope-json-version": 1, "source1": "first/IMAP.class", "source2": "second/IMAP.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -38,74 +38,71 @@\n         this.createCommandSupport();\n     }\n     \n     private void getReply() throws IOException {\n         this.getReply(true);\n     }\n     \n-    private void getReply(final boolean wantTag) throws IOException {\n+    private void getReply(final boolean b) throws IOException {\n         this._replyLines.clear();\n-        String line = this._reader.readLine();\n-        if (line == null) {\n+        String s = this._reader.readLine();\n+        if (s == null) {\n             throw new EOFException(\"Connection closed without indication.\");\n         }\n-        this._replyLines.add(line);\n-        if (wantTag) {\n-            while (IMAPReply.isUntagged(line)) {\n-                int literalCount = IMAPReply.literalCount(line);\n-                final boolean isMultiLine = literalCount >= 0;\n-                while (literalCount >= 0) {\n-                    line = this._reader.readLine();\n+        this._replyLines.add(s);\n+        if (b) {\n+            while (IMAPReply.isUntagged(s)) {\n+                int i = IMAPReply.literalCount(s);\n+                final boolean b2 = i >= 0;\n+                while (i >= 0) {\n+                    final String line = this._reader.readLine();\n                     if (line == null) {\n                         throw new EOFException(\"Connection closed without indication.\");\n                     }\n                     this._replyLines.add(line);\n-                    literalCount -= line.length() + 2;\n+                    i -= line.length() + 2;\n                 }\n-                if (isMultiLine) {\n-                    final IMAP.IMAPChunkListener il = this.chunkListener;\n-                    if (il != null) {\n-                        final boolean clear = il.chunkReceived(this);\n-                        if (clear) {\n-                            this.fireReplyReceived(3, this.getReplyString());\n-                            this._replyLines.clear();\n-                        }\n+                if (b2) {\n+                    final IMAP.IMAPChunkListener chunkListener = this.chunkListener;\n+                    if (chunkListener != null && chunkListener.chunkReceived(this)) {\n+                        this.fireReplyReceived(3, this.getReplyString());\n+                        this._replyLines.clear();\n                     }\n                 }\n-                line = this._reader.readLine();\n-                if (line == null) {\n+                s = this._reader.readLine();\n+                if (s == null) {\n                     throw new EOFException(\"Connection closed without indication.\");\n                 }\n-                this._replyLines.add(line);\n+                this._replyLines.add(s);\n             }\n-            this.replyCode = IMAPReply.getReplyCode(line);\n+            this.replyCode = IMAPReply.getReplyCode(s);\n         }\n         else {\n-            this.replyCode = IMAPReply.getUntaggedReplyCode(line);\n+            this.replyCode = IMAPReply.getUntaggedReplyCode(s);\n         }\n         this.fireReplyReceived(this.replyCode, this.getReplyString());\n     }\n     \n-    protected void fireReplyReceived(final int replyCode, final String ignored) {\n+    protected void fireReplyReceived(final int n, final String s) {\n         if (this.getCommandSupport().getListenerCount() > 0) {\n-            this.getCommandSupport().fireReplyReceived(replyCode, this.getReplyString());\n+            this.getCommandSupport().fireReplyReceived(n, this.getReplyString());\n         }\n     }\n     \n     protected void _connectAction_() throws IOException {\n         super._connectAction_();\n         this._reader = (BufferedReader)new CRLFLineReader((Reader)new InputStreamReader(this._input_, \"ISO-8859-1\"));\n         this.__writer = new BufferedWriter(new OutputStreamWriter(this._output_, \"ISO-8859-1\"));\n-        final int tmo = this.getSoTimeout();\n-        if (tmo <= 0) {\n+        final int soTimeout = this.getSoTimeout();\n+        if (soTimeout <= 0) {\n             this.setSoTimeout(this.connectTimeout);\n         }\n         this.getReply(false);\n-        if (tmo <= 0) {\n-            this.setSoTimeout(tmo);\n+        if (soTimeout <= 0) {\n+            this.setSoTimeout(soTimeout);\n         }\n         this.setState(IMAP.IMAPState.NOT_AUTH_STATE);\n     }\n     \n     protected void setState(final IMAP.IMAPState state) {\n         this.state = state;\n     }\n@@ -118,109 +115,109 @@\n         super.disconnect();\n         this._reader = null;\n         this.__writer = null;\n         this._replyLines.clear();\n         this.setState(IMAP.IMAPState.DISCONNECTED_STATE);\n     }\n     \n-    private int sendCommandWithID(final String commandID, final String command, final String args) throws IOException {\n-        final StringBuilder __commandBuffer = new StringBuilder();\n-        if (commandID != null) {\n-            __commandBuffer.append(commandID);\n-            __commandBuffer.append(' ');\n-        }\n-        __commandBuffer.append(command);\n-        if (args != null) {\n-            __commandBuffer.append(' ');\n-            __commandBuffer.append(args);\n-        }\n-        __commandBuffer.append(\"\\r\\n\");\n-        final String message = __commandBuffer.toString();\n-        this.__writer.write(message);\n+    private int sendCommandWithID(final String str, final String str2, final String str3) throws IOException {\n+        final StringBuilder sb = new StringBuilder();\n+        if (str != null) {\n+            sb.append(str);\n+            sb.append(' ');\n+        }\n+        sb.append(str2);\n+        if (str3 != null) {\n+            sb.append(' ');\n+            sb.append(str3);\n+        }\n+        sb.append(\"\\r\\n\");\n+        final String string = sb.toString();\n+        this.__writer.write(string);\n         this.__writer.flush();\n-        this.fireCommandSent(command, message);\n+        this.fireCommandSent(str2, string);\n         this.getReply();\n         return this.replyCode;\n     }\n     \n-    public int sendCommand(final String command, final String args) throws IOException {\n-        return this.sendCommandWithID(this.generateCommandID(), command, args);\n+    public int sendCommand(final String s, final String s2) throws IOException {\n+        return this.sendCommandWithID(this.generateCommandID(), s, s2);\n     }\n     \n-    public int sendCommand(final String command) throws IOException {\n-        return this.sendCommand(command, null);\n+    public int sendCommand(final String s) throws IOException {\n+        return this.sendCommand(s, null);\n     }\n     \n-    public int sendCommand(final IMAPCommand command, final String args) throws IOException {\n-        return this.sendCommand(command.getIMAPCommand(), args);\n+    public int sendCommand(final IMAPCommand imapCommand, final String s) throws IOException {\n+        return this.sendCommand(imapCommand.getIMAPCommand(), s);\n     }\n     \n-    public boolean doCommand(final IMAPCommand command, final String args) throws IOException {\n-        return IMAPReply.isSuccess(this.sendCommand(command, args));\n+    public boolean doCommand(final IMAPCommand imapCommand, final String s) throws IOException {\n+        return IMAPReply.isSuccess(this.sendCommand(imapCommand, s));\n     }\n     \n-    public int sendCommand(final IMAPCommand command) throws IOException {\n-        return this.sendCommand(command, null);\n+    public int sendCommand(final IMAPCommand imapCommand) throws IOException {\n+        return this.sendCommand(imapCommand, null);\n     }\n     \n-    public boolean doCommand(final IMAPCommand command) throws IOException {\n-        return IMAPReply.isSuccess(this.sendCommand(command));\n+    public boolean doCommand(final IMAPCommand imapCommand) throws IOException {\n+        return IMAPReply.isSuccess(this.sendCommand(imapCommand));\n     }\n     \n-    public int sendData(final String command) throws IOException {\n-        return this.sendCommandWithID(null, command, null);\n+    public int sendData(final String s) throws IOException {\n+        return this.sendCommandWithID(null, s, null);\n     }\n     \n     public String[] getReplyStrings() {\n         return this._replyLines.toArray(new String[this._replyLines.size()]);\n     }\n     \n     public String getReplyString() {\n-        final StringBuilder buffer = new StringBuilder(256);\n-        for (final String s : this._replyLines) {\n-            buffer.append(s);\n-            buffer.append(\"\\r\\n\");\n+        final StringBuilder sb = new StringBuilder(256);\n+        final Iterator<String> iterator = this._replyLines.iterator();\n+        while (iterator.hasNext()) {\n+            sb.append(iterator.next());\n+            sb.append(\"\\r\\n\");\n         }\n-        return buffer.toString();\n+        return sb.toString();\n     }\n     \n-    public void setChunkListener(final IMAP.IMAPChunkListener listener) {\n-        this.chunkListener = listener;\n+    public void setChunkListener(final IMAP.IMAPChunkListener chunkListener) {\n+        this.chunkListener = chunkListener;\n     }\n     \n     protected String generateCommandID() {\n-        final String res = new String(this.initialID);\n-        boolean carry = true;\n-        for (int i = this.initialID.length - 1; carry && i >= 0; --i) {\n-            if (this.initialID[i] == 'Z') {\n-                this.initialID[i] = 'A';\n+        final String s = new String(this.initialID);\n+        for (int n = 1, n2 = this.initialID.length - 1; n != 0 && n2 >= 0; --n2) {\n+            if (this.initialID[n2] == 'Z') {\n+                this.initialID[n2] = 'A';\n             }\n             else {\n                 final char[] initialID = this.initialID;\n-                final int n = i;\n-                ++initialID[n];\n-                carry = false;\n+                final int n3 = n2;\n+                ++initialID[n3];\n+                n = 0;\n             }\n         }\n-        return res;\n+        return s;\n     }\n     \n-    static String quoteMailboxName(final String input) {\n-        if (input == null) {\n+    static String quoteMailboxName(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        if (input.isEmpty()) {\n+        if (s.isEmpty()) {\n             return \"\\\"\\\"\";\n         }\n-        if (input.length() > 1 && input.startsWith(\"\\\"\") && input.endsWith(\"\\\"\")) {\n-            return input;\n+        if (s.length() > 1 && s.startsWith(\"\\\"\") && s.endsWith(\"\\\"\")) {\n+            return s;\n         }\n-        if (input.contains(\" \")) {\n-            return \"\\\"\" + input.replaceAll(\"([\\\\\\\\\\\"])\", \"\\\\\\\\$1\") + \"\\\"\";\n+        if (s.contains(\" \")) {\n+            return \"\\\"\" + s.replaceAll(\"([\\\\\\\\\\\"])\", \"\\\\\\\\$1\") + \"\\\"\";\n         }\n-        return input;\n+        return s;\n     }\n     \n     static {\n         TRUE_CHUNK_LISTENER = (IMAP.IMAPChunkListener)new IMAP.IMAP$1();\n     }\n }\n"}]}
