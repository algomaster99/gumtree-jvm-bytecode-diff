{"diffoscope-json-version": 1, "source1": "first/ZipFile$BoundedFileChannelInputStream.class", "source2": "second/ZipFile$BoundedFileChannelInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,24 +1,24 @@\n-  SHA-256 checksum 78ef389943b0235d8677ffc3ddbd7fb700086396a41fe0152fdfc6e6ede3e7ae\n+  SHA-256 checksum 436bee7b80ead2a2569bd8eb15c86cceb250dfbe4c3abfe2595349b33fd0087e\n   Compiled from \"ZipFile.java\"\n class org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream extends org.apache.commons.compress.utils.BoundedArchiveInputStream\n   minor version: 0\n-  major version: 52\n+  major version: 53\n   flags: (0x0020) ACC_SUPER\n   this_class: #8                          // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n   super_class: #9                         // org/apache/commons/compress/utils/BoundedArchiveInputStream\n   interfaces: 0, fields: 2, methods: 2, attributes: 2\n Constant pool:\n    #1 = Fieldref           #8.#24         // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.this$0:Lorg/apache/commons/compress/archivers/zip/ZipFile;\n    #2 = Methodref          #9.#25         // org/apache/commons/compress/utils/BoundedArchiveInputStream.\"<init>\":(JJ)V\n    #3 = Methodref          #26.#27        // org/apache/commons/compress/archivers/zip/ZipFile.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n    #4 = Class              #28            // java/nio/channels/FileChannel\n    #5 = Fieldref           #8.#29         // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.archive:Ljava/nio/channels/FileChannel;\n    #6 = Methodref          #4.#30         // java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;J)I\n-   #7 = Methodref          #31.#32        // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+   #7 = Methodref          #31.#32        // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n    #8 = Class              #33            // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n    #9 = Class              #36            // org/apache/commons/compress/utils/BoundedArchiveInputStream\n   #10 = Utf8               archive\n   #11 = Utf8               Ljava/nio/channels/FileChannel;\n   #12 = Utf8               this$0\n   #13 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile;\n   #14 = Utf8               <init>\n@@ -35,28 +35,28 @@\n   #25 = NameAndType        #14:#38        // \"<init>\":(JJ)V\n   #26 = Class              #39            // org/apache/commons/compress/archivers/zip/ZipFile\n   #27 = NameAndType        #40:#41        // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n   #28 = Utf8               java/nio/channels/FileChannel\n   #29 = NameAndType        #10:#11        // archive:Ljava/nio/channels/FileChannel;\n   #30 = NameAndType        #18:#42        // read:(Ljava/nio/ByteBuffer;J)I\n   #31 = Class              #43            // java/nio/ByteBuffer\n-  #32 = NameAndType        #44:#45        // flip:()Ljava/nio/Buffer;\n+  #32 = NameAndType        #44:#45        // flip:()Ljava/nio/ByteBuffer;\n   #33 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n   #34 = Utf8               BoundedFileChannelInputStream\n   #35 = Utf8               InnerClasses\n   #36 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n   #37 = Utf8               java/io/IOException\n   #38 = Utf8               (JJ)V\n   #39 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n   #40 = Utf8               access$300\n   #41 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n   #42 = Utf8               (Ljava/nio/ByteBuffer;J)I\n   #43 = Utf8               java/nio/ByteBuffer\n   #44 = Utf8               flip\n-  #45 = Utf8               ()Ljava/nio/Buffer;\n+  #45 = Utf8               ()Ljava/nio/ByteBuffer;\n {\n   private final java.nio.channels.FileChannel archive;\n     descriptor: Ljava/nio/channels/FileChannel;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   final org.apache.commons.compress.archivers.zip.ZipFile this$0;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipFile;\n@@ -94,15 +94,15 @@\n          0: aload_0\n          1: getfield      #5                  // Field archive:Ljava/nio/channels/FileChannel;\n          4: aload_3\n          5: lload_1\n          6: invokevirtual #6                  // Method java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;J)I\n          9: istore        4\n         11: aload_3\n-        12: invokevirtual #7                  // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+        12: invokevirtual #7                  // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         15: pop\n         16: iload         4\n         18: ireturn\n       LineNumberTable:\n         line 1420: 0\n         line 1421: 11\n         line 1422: 16\n"}]}
