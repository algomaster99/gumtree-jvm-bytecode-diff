{"diffoscope-json-version": 1, "source1": "first/IOStreamAdapter.class", "source2": "second/IOStreamAdapter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,19 +2,19 @@\n package org.apache.commons.io.function;\n \n import java.util.stream.BaseStream;\n import java.util.stream.Stream;\n \n final class IOStreamAdapter<T> extends IOBaseStreamAdapter<T, IOStream<T>, Stream<T>> implements IOStream<T>\n {\n-    static <T> IOStream<T> adapt(final Stream<T> delegate) {\n-        return (IOStream<T>)((delegate != null) ? new IOStreamAdapter((Stream<Object>)delegate) : IOStream.empty());\n+    static <T> IOStream<T> adapt(final Stream<T> stream) {\n+        return (IOStream<T>)((stream != null) ? new IOStreamAdapter((Stream<Object>)stream) : IOStream.empty());\n     }\n     \n-    private IOStreamAdapter(final Stream<T> delegate) {\n-        super((BaseStream)delegate);\n+    private IOStreamAdapter(final Stream<T> stream) {\n+        super((BaseStream)stream);\n     }\n     \n-    public IOStream<T> wrap(final Stream<T> delegate) {\n-        return (IOStream<T>)((this.unwrap() == delegate) ? this : adapt(delegate));\n+    public IOStream<T> wrap(final Stream<T> stream) {\n+        return (IOStream<T>)((this.unwrap() == stream) ? this : adapt(stream));\n     }\n }\n"}]}
