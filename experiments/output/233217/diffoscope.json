{"diffoscope-json-version": 1, "source1": "first/ReloadingBuilderSupportListener.class", "source2": "second/ReloadingBuilderSupportListener.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,24 +7,24 @@\n import org.apache.commons.configuration2.event.EventListener;\n \n final class ReloadingBuilderSupportListener implements EventListener<Event>\n {\n     private final BasicConfigurationBuilder<?> builder;\n     private final ReloadingController reloadingController;\n     \n-    private ReloadingBuilderSupportListener(final BasicConfigurationBuilder<?> configBuilder, final ReloadingController controller) {\n-        this.builder = configBuilder;\n-        this.reloadingController = controller;\n+    private ReloadingBuilderSupportListener(final BasicConfigurationBuilder<?> builder, final ReloadingController reloadingController) {\n+        this.builder = builder;\n+        this.reloadingController = reloadingController;\n     }\n     \n-    public static ReloadingBuilderSupportListener connect(final BasicConfigurationBuilder<?> configBuilder, final ReloadingController controller) {\n-        final ReloadingBuilderSupportListener listener = new ReloadingBuilderSupportListener(configBuilder, controller);\n-        controller.addEventListener(ReloadingEvent.ANY, (EventListener)listener);\n-        configBuilder.installEventListener(ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, (EventListener)listener);\n-        return listener;\n+    public static ReloadingBuilderSupportListener connect(final BasicConfigurationBuilder<?> basicConfigurationBuilder, final ReloadingController reloadingController) {\n+        final ReloadingBuilderSupportListener reloadingBuilderSupportListener = new ReloadingBuilderSupportListener(basicConfigurationBuilder, reloadingController);\n+        reloadingController.addEventListener(ReloadingEvent.ANY, (EventListener)reloadingBuilderSupportListener);\n+        basicConfigurationBuilder.installEventListener(ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, (EventListener)reloadingBuilderSupportListener);\n+        return reloadingBuilderSupportListener;\n     }\n     \n     public void onEvent(final Event event) {\n         if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {\n             this.reloadingController.resetReloadingState();\n         }\n         else {\n"}]}
