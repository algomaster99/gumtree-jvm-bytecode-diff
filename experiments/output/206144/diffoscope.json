{"diffoscope-json-version": 1, "source1": "first/Event.class", "source2": "second/Event.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,38 +7,38 @@\n {\n     public static final EventType<Event> ANY;\n     private static final long serialVersionUID = -8168310049858198944L;\n     private static final String FMT_PROPERTY = \" %s=%s\";\n     private static final int BUF_SIZE = 256;\n     private final EventType<? extends Event> eventType;\n     \n-    public Event(final Object source, final EventType<? extends Event> evType) {\n+    public Event(final Object source, final EventType<? extends Event> eventType) {\n         super(source);\n-        if (evType == null) {\n+        if (eventType == null) {\n             throw new IllegalArgumentException(\"Event type must not be null!\");\n         }\n-        this.eventType = evType;\n+        this.eventType = eventType;\n     }\n     \n     public EventType<? extends Event> getEventType() {\n         return this.eventType;\n     }\n     \n     @Override\n     public String toString() {\n-        final StringBuilder buf = new StringBuilder(256);\n-        buf.append(this.getClass().getSimpleName());\n-        buf.append(\" [\");\n-        this.appendPropertyRepresentation(buf, \"source\", this.getSource());\n-        this.appendPropertyRepresentation(buf, \"eventType\", this.getEventType());\n-        buf.append(\" ]\");\n-        return buf.toString();\n+        final StringBuilder sb = new StringBuilder(256);\n+        sb.append(this.getClass().getSimpleName());\n+        sb.append(\" [\");\n+        this.appendPropertyRepresentation(sb, \"source\", this.getSource());\n+        this.appendPropertyRepresentation(sb, \"eventType\", this.getEventType());\n+        sb.append(\" ]\");\n+        return sb.toString();\n     }\n     \n-    protected void appendPropertyRepresentation(final StringBuilder buf, final String property, final Object value) {\n-        buf.append(String.format(\" %s=%s\", property, String.valueOf(value)));\n+    protected void appendPropertyRepresentation(final StringBuilder sb, final String s, final Object obj) {\n+        sb.append(String.format(\" %s=%s\", s, String.valueOf(obj)));\n     }\n     \n     static {\n         ANY = new EventType((EventType)null, \"ANY\");\n     }\n }\n"}]}
