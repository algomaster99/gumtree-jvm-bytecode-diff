{"diffoscope-json-version": 1, "source1": "first/MapConfiguration.class", "source2": "second/MapConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,90 +14,88 @@\n     protected Map<String, Object> map;\n     private boolean trimmingDisabled;\n     \n     public MapConfiguration(final Map<String, ?> map) {\n         this.map = (Map<String, Object>)map;\n     }\n     \n-    public MapConfiguration(final Properties props) {\n-        this.map = convertPropertiesToMap(props);\n+    public MapConfiguration(final Properties properties) {\n+        this.map = convertPropertiesToMap(properties);\n     }\n     \n     public Map<String, Object> getMap() {\n         return this.map;\n     }\n     \n     public boolean isTrimmingDisabled() {\n         return this.trimmingDisabled;\n     }\n     \n     public void setTrimmingDisabled(final boolean trimmingDisabled) {\n         this.trimmingDisabled = trimmingDisabled;\n     }\n     \n-    protected Object getPropertyInternal(final String key) {\n-        final Object value = this.map.get(key);\n+    protected Object getPropertyInternal(final String s) {\n+        final String value = this.map.get(s);\n         if (value instanceof String) {\n-            final Collection<String> list = this.getListDelimiterHandler().split((String)value, !this.isTrimmingDisabled());\n-            return (list.size() > 1) ? list : list.iterator().next();\n+            final Collection split = this.getListDelimiterHandler().split((String)value, !this.isTrimmingDisabled());\n+            return (split.size() > 1) ? split : split.iterator().next();\n         }\n         return value;\n     }\n     \n-    protected void addPropertyDirect(final String key, final Object value) {\n-        final Object previousValue = this.getProperty(key);\n-        if (previousValue == null) {\n-            this.map.put(key, value);\n+    protected void addPropertyDirect(final String s, final Object o) {\n+        final Object property = this.getProperty(s);\n+        if (property == null) {\n+            this.map.put(s, o);\n         }\n-        else if (previousValue instanceof List) {\n-            ((List)previousValue).add(value);\n+        else if (property instanceof List) {\n+            ((List<Object>)property).add(o);\n         }\n         else {\n-            final List<Object> list = new ArrayList<Object>();\n-            list.add(previousValue);\n-            list.add(value);\n-            this.map.put(key, list);\n+            final ArrayList list = new ArrayList();\n+            list.add(property);\n+            list.add(o);\n+            this.map.put(s, list);\n         }\n     }\n     \n     protected boolean isEmptyInternal() {\n         return this.map.isEmpty();\n     }\n     \n-    protected boolean containsKeyInternal(final String key) {\n-        return this.map.containsKey(key);\n+    protected boolean containsKeyInternal(final String s) {\n+        return this.map.containsKey(s);\n     }\n     \n-    protected void clearPropertyDirect(final String key) {\n-        this.map.remove(key);\n+    protected void clearPropertyDirect(final String s) {\n+        this.map.remove(s);\n     }\n     \n     protected Iterator<String> getKeysInternal() {\n         return this.map.keySet().iterator();\n     }\n     \n     protected int sizeInternal() {\n         return this.map.size();\n     }\n     \n     public Object clone() {\n         try {\n-            final MapConfiguration copy = (MapConfiguration)super.clone();\n-            final Map<String, Object> clonedMap = (Map)ConfigurationUtils.clone((Object)this.map);\n-            copy.map = clonedMap;\n-            copy.cloneInterpolator((AbstractConfiguration)this);\n-            return copy;\n+            final MapConfiguration mapConfiguration = (MapConfiguration)super.clone();\n+            mapConfiguration.map = (Map)ConfigurationUtils.clone((Object)this.map);\n+            mapConfiguration.cloneInterpolator((AbstractConfiguration)this);\n+            return mapConfiguration;\n         }\n-        catch (final CloneNotSupportedException cex) {\n-            throw new ConfigurationRuntimeException((Throwable)cex);\n+        catch (final CloneNotSupportedException ex) {\n+            throw new ConfigurationRuntimeException((Throwable)ex);\n         }\n     }\n     \n-    private static Map<String, Object> convertPropertiesToMap(final Properties props) {\n-        final Map map = props;\n-        return map;\n+    private static Map<String, Object> convertPropertiesToMap(final Properties properties) {\n+        return (Map<String, Object>)properties;\n     }\n     \n     public String toString() {\n         return this.getClass().getSimpleName() + \" [map=\" + this.map + \", trimmingDisabled=\" + this.trimmingDisabled + \"]\";\n     }\n }\n"}]}
