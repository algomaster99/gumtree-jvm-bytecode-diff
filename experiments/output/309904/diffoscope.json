{"diffoscope-json-version": 1, "source1": "first/TarArchiveInputStream.class", "source2": "second/TarArchiveInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,562 +1,562 @@\n-  SHA-256 checksum 6cd5f8a82abcdba3a90bf8845ba6b379148b13daf2d8bde891187a9799607473\n+  SHA-256 checksum 55a438caeff13c90c42a26ed6d3ff42336e2dd46dfd5d9bd5b41b9267f783d59\n   Compiled from \"TarArchiveInputStream.java\"\n public class org.apache.commons.compress.archivers.tar.TarArchiveInputStream extends org.apache.commons.compress.archivers.ArchiveInputStream\n   minor version: 0\n   major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #6                          // org/apache/commons/compress/archivers/tar/TarArchiveInputStream\n-  super_class: #165                       // org/apache/commons/compress/archivers/ArchiveInputStream\n+  this_class: #4                          // org/apache/commons/compress/archivers/tar/TarArchiveInputStream\n+  super_class: #16                        // org/apache/commons/compress/archivers/ArchiveInputStream\n   interfaces: 0, fields: 16, methods: 43, attributes: 3\n Constant pool:\n-    #1 = Class              #280          // org/apache/commons/compress/archivers/tar/TarConstants\n-    #2 = Methodref          #6.#281       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.\"<init>\":(Ljava/io/InputStream;II)V\n-    #3 = Methodref          #6.#282       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.\"<init>\":(Ljava/io/InputStream;IILjava/lang/String;Z)V\n-    #4 = Methodref          #6.#283       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.\"<init>\":(Ljava/io/InputStream;IILjava/lang/String;)V\n-    #5 = Methodref          #165.#284     // org/apache/commons/compress/archivers/ArchiveInputStream.\"<init>\":()V\n-    #6 = Class              #285          // org/apache/commons/compress/archivers/tar/TarArchiveInputStream\n-    #7 = Fieldref           #6.#286       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.smallBuf:[B\n-    #8 = Class              #287          // java/util/HashMap\n-    #9 = Methodref          #8.#284       // java/util/HashMap.\"<init>\":()V\n-   #10 = Fieldref           #6.#288       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.globalPaxHeaders:Ljava/util/Map;\n-   #11 = Class              #289          // java/util/ArrayList\n-   #12 = Methodref          #11.#284      // java/util/ArrayList.\"<init>\":()V\n-   #13 = Fieldref           #6.#290       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.globalSparseHeaders:Ljava/util/List;\n-   #14 = Fieldref           #6.#291       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.inputStream:Ljava/io/InputStream;\n-   #15 = Fieldref           #6.#292       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.hasHitEOF:Z\n-   #16 = Fieldref           #6.#293       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.encoding:Ljava/lang/String;\n-   #17 = Methodref          #294.#295     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #18 = Fieldref           #6.#296       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #19 = Fieldref           #6.#297       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.recordSize:I\n-   #20 = Fieldref           #6.#298       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.blockSize:I\n-   #21 = Fieldref           #6.#299       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.lenient:Z\n-   #22 = Fieldref           #6.#300       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.sparseInputStreams:Ljava/util/List;\n-   #23 = InterfaceMethodref #239.#301     // java/util/List.iterator:()Ljava/util/Iterator;\n-   #24 = InterfaceMethodref #214.#302     // java/util/Iterator.hasNext:()Z\n-   #25 = InterfaceMethodref #214.#303     // java/util/Iterator.next:()Ljava/lang/Object;\n-   #26 = Class              #304          // java/io/InputStream\n-   #27 = Methodref          #26.#305      // java/io/InputStream.close:()V\n-   #28 = Methodref          #6.#306       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.isDirectory:()Z\n-   #29 = Fieldref           #6.#307       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #30 = Methodref          #51.#308      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n-   #31 = Fieldref           #6.#309       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.entryOffset:J\n-   #32 = Class              #310          // java/lang/Integer\n-   #33 = Long               2147483647l\n-   #35 = Integer            2147483647\n-   #36 = Methodref          #51.#311      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n-   #37 = Methodref          #312.#313     // java/lang/Math.min:(JJ)J\n-   #38 = Methodref          #314.#315     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-   #39 = Methodref          #6.#316       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.skipSparse:(J)J\n-   #40 = Methodref          #6.#317       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.count:(J)V\n-   #41 = InterfaceMethodref #239.#318     // java/util/List.size:()I\n-   #42 = Methodref          #26.#319      // java/io/InputStream.skip:(J)J\n-   #43 = Fieldref           #6.#320       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.currentSparseInputStreamIndex:I\n-   #44 = InterfaceMethodref #239.#321     // java/util/List.get:(I)Ljava/lang/Object;\n-   #45 = Methodref          #6.#322       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.isAtEOF:()Z\n-   #46 = Class              #323          // java/lang/Long\n-   #47 = Long               9223372036854775807l\n-   #49 = Methodref          #6.#324       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.skipRecordPadding:()V\n-   #50 = Methodref          #6.#325       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getRecord:()[B\n-   #51 = Class              #326          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-   #52 = Methodref          #51.#327      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-   #53 = Class              #328          // java/lang/IllegalArgumentException\n-   #54 = Class              #329          // java/io/IOException\n-   #55 = String             #330          // Error detected parsing the header\n-   #56 = Methodref          #54.#331      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #57 = Methodref          #51.#332      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-   #58 = Fieldref           #6.#333       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.entrySize:J\n-   #59 = Methodref          #51.#334      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongLinkEntry:()Z\n-   #60 = Methodref          #6.#335       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getLongNameData:()[B\n-   #61 = InterfaceMethodref #336.#337     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #62 = Methodref          #51.#338      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V\n-   #63 = Methodref          #51.#339      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongNameEntry:()Z\n-   #64 = Methodref          #51.#340      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n-   #65 = Methodref          #51.#341      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n-   #66 = Methodref          #6.#342       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.readGlobalPaxHeaders:()V\n-   #67 = Methodref          #51.#343      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z\n-   #68 = Methodref          #6.#344       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.paxHeaders:()V\n-   #69 = InterfaceMethodref #240.#345     // java/util/Map.isEmpty:()Z\n-   #70 = Methodref          #6.#346       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n-   #71 = Methodref          #51.#347      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z\n-   #72 = Methodref          #6.#348       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.readOldGNUSparse:()V\n-   #73 = Class              #349          // java/io/ByteArrayOutputStream\n-   #74 = Methodref          #73.#284      // java/io/ByteArrayOutputStream.\"<init>\":()V\n-   #75 = Methodref          #6.#350       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.read:([B)I\n-   #76 = Methodref          #73.#351      // java/io/ByteArrayOutputStream.write:([BII)V\n-   #77 = Methodref          #6.#352       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-   #78 = Methodref          #73.#353      // java/io/ByteArrayOutputStream.toByteArray:()[B\n-   #79 = Methodref          #354.#355     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #80 = Methodref          #6.#356       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.readRecord:()[B\n-   #81 = Methodref          #6.#357       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.isEOFRecord:([B)Z\n-   #82 = Methodref          #6.#358       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.setAtEOF:(Z)V\n-   #83 = Methodref          #6.#359       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.tryToConsumeSecondEOFRecord:()V\n-   #84 = Methodref          #6.#360       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.consumeRemainderOfLastBlock:()V\n-   #85 = Methodref          #361.#362     // org/apache/commons/compress/utils/ArchiveUtils.isArrayZero:([BI)Z\n-   #86 = Methodref          #314.#363     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[B)I\n-   #87 = Methodref          #6.#364       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.count:(I)V\n-   #88 = Methodref          #6.#365       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;)Ljava/util/Map;\n-   #89 = String             #366          // GNU.sparse.map\n-   #90 = InterfaceMethodref #240.#367     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-   #91 = InterfaceMethodref #240.#368     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #92 = Class              #369          // java/lang/String\n-   #93 = Methodref          #6.#370       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.parsePAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-   #94 = Methodref          #51.#371      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxGNU1XSparse:()Z\n-   #95 = Methodref          #6.#372       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.parsePAX1XSparseHeaders:()Ljava/util/List;\n-   #96 = Methodref          #51.#373      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n-   #97 = Methodref          #6.#374       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.buildSparseInputStreams:()V\n-   #98 = String             #375          // ,\n-   #99 = Methodref          #92.#376      // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n-  #100 = Methodref          #46.#377      // java/lang/Long.parseLong:(Ljava/lang/String;)J\n-  #101 = Class              #378          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-  #102 = Methodref          #101.#379     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-  #103 = InterfaceMethodref #239.#380     // java/util/List.add:(Ljava/lang/Object;)Z\n-  #104 = Methodref          #6.#381       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-  #105 = Methodref          #26.#382      // java/io/InputStream.read:()I\n-  #106 = String             #383          // Unexpected EOF when reading parse information of 1.X PAX format\n-  #107 = Methodref          #54.#384      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-  #108 = Long               10l\n-  #110 = Methodref          #8.#385       // java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n-  #111 = Class              #386          // org/apache/commons/compress/utils/CharsetNames\n-  #112 = String             #387          // UTF-8\n-  #113 = Methodref          #73.#388      // java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n-  #114 = InterfaceMethodref #240.#389     // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #115 = InvokeDynamic      #0:#393       // #0:makeConcatWithConstants:(II)Ljava/lang/String;\n-  #116 = Methodref          #92.#394      // java/lang/String.\"<init>\":([BIILjava/lang/String;)V\n-  #117 = InterfaceMethodref #240.#395     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #118 = String             #396          // GNU.sparse.offset\n-  #119 = Methodref          #92.#397      // java/lang/String.equals:(Ljava/lang/Object;)Z\n-  #120 = Methodref          #46.#398      // java/lang/Long.longValue:()J\n-  #121 = Methodref          #46.#399      // java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-  #122 = String             #400          // GNU.sparse.numbytes\n-  #123 = String             #401          // Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-  #124 = Methodref          #73.#402      // java/io/ByteArrayOutputStream.write:(I)V\n-  #125 = Methodref          #51.#403      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n-  #126 = Methodref          #51.#404      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:()Z\n-  #127 = Class              #405          // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n-  #128 = Methodref          #127.#406     // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.\"<init>\":([B)V\n-  #129 = Methodref          #51.#407      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSparseHeaders:()Ljava/util/List;\n-  #130 = Methodref          #127.#407     // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.getSparseHeaders:()Ljava/util/List;\n-  #131 = InterfaceMethodref #239.#408     // java/util/List.addAll:(Ljava/util/Collection;)Z\n-  #132 = Methodref          #127.#404     // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.isExtended:()Z\n-  #133 = Methodref          #51.#306      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n-  #134 = Methodref          #6.#409       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-  #135 = Methodref          #26.#410      // java/io/InputStream.markSupported:()Z\n-  #136 = Methodref          #26.#411      // java/io/InputStream.mark:(I)V\n-  #137 = Methodref          #6.#412       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.pushedBackBytes:(J)V\n-  #138 = Methodref          #26.#413      // java/io/InputStream.reset:()V\n-  #139 = Class              #414          // java/lang/IllegalStateException\n-  #140 = String             #415          // No current tar entry\n-  #141 = Methodref          #139.#384     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-  #142 = Methodref          #6.#416       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.available:()I\n-  #143 = Methodref          #312.#417     // java/lang/Math.min:(II)I\n-  #144 = Methodref          #6.#418       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.readSparse:([BII)I\n-  #145 = Methodref          #26.#419      // java/io/InputStream.read:([BII)I\n-  #146 = String             #420          // Truncated TAR archive\n-  #147 = Methodref          #6.#421       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getBytesRead:()J\n-  #148 = String             #422          // ustar\\u0000\n-  #149 = Methodref          #361.#423     // org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n-  #150 = String             #424          // 00\n-  #151 = String             #425          // ustar\n-  #152 = String             #426          //  \\u0000\n-  #153 = String             #427          // 0\\u0000\n-  #154 = String             #428          // \\u0000\\u0000\n-  #155 = Class              #429          // org/apache/commons/compress/archivers/tar/TarArchiveInputStream$1\n-  #156 = Methodref          #155.#430     // org/apache/commons/compress/archivers/tar/TarArchiveInputStream$1.\"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream;)V\n-  #157 = Methodref          #431.#432     // java/util/Collections.sort:(Ljava/util/List;Ljava/util/Comparator;)V\n-  #158 = Class              #433          // org/apache/commons/compress/archivers/tar/TarArchiveInputStream$TarArchiveSparseZeroInputStream\n-  #159 = Methodref          #158.#434     // org/apache/commons/compress/archivers/tar/TarArchiveInputStream$TarArchiveSparseZeroInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream$1;)V\n-  #160 = Methodref          #101.#435     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n-  #161 = Methodref          #101.#436     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-  #162 = String             #437          // Corrupted struct sparse detected\n-  #163 = Class              #438          // org/apache/commons/compress/utils/BoundedInputStream\n-  #164 = Methodref          #163.#439     // org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n-  #165 = Class              #440          // org/apache/commons/compress/archivers/ArchiveInputStream\n-  #166 = Utf8               TarArchiveSparseZeroInputStream\n-  #167 = Utf8               InnerClasses\n-  #168 = Utf8               SMALL_BUFFER_SIZE\n-  #169 = Utf8               I\n-  #170 = Utf8               ConstantValue\n-  #171 = Integer            256\n-  #172 = Utf8               smallBuf\n-  #173 = Utf8               [B\n-  #174 = Utf8               recordSize\n-  #175 = Utf8               blockSize\n-  #176 = Utf8               hasHitEOF\n-  #177 = Utf8               Z\n-  #178 = Utf8               entrySize\n-  #179 = Utf8               J\n-  #180 = Utf8               entryOffset\n-  #181 = Utf8               inputStream\n-  #182 = Utf8               Ljava/io/InputStream;\n-  #183 = Utf8               sparseInputStreams\n-  #184 = Utf8               Ljava/util/List;\n-  #185 = Utf8               Signature\n-  #186 = Utf8               Ljava/util/List<Ljava/io/InputStream;>;\n-  #187 = Utf8               currentSparseInputStreamIndex\n-  #188 = Utf8               currEntry\n-  #189 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-  #190 = Utf8               zipEncoding\n-  #191 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #192 = Utf8               encoding\n-  #193 = Utf8               Ljava/lang/String;\n-  #194 = Utf8               globalPaxHeaders\n-  #195 = Utf8               Ljava/util/Map;\n-  #196 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #197 = Utf8               globalSparseHeaders\n-  #198 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #199 = Utf8               lenient\n-  #200 = Utf8               <init>\n-  #201 = Utf8               (Ljava/io/InputStream;)V\n-  #202 = Utf8               Code\n-  #203 = Utf8               LineNumberTable\n-  #204 = Utf8               (Ljava/io/InputStream;Z)V\n-  #205 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;)V\n-  #206 = Utf8               (Ljava/io/InputStream;I)V\n-  #207 = Utf8               (Ljava/io/InputStream;ILjava/lang/String;)V\n-  #208 = Utf8               (Ljava/io/InputStream;II)V\n-  #209 = Utf8               (Ljava/io/InputStream;IILjava/lang/String;)V\n-  #210 = Utf8               (Ljava/io/InputStream;IILjava/lang/String;Z)V\n-  #211 = Utf8               close\n-  #212 = Utf8               ()V\n-  #213 = Utf8               StackMapTable\n-  #214 = Class              #441          // java/util/Iterator\n-  #215 = Utf8               Exceptions\n-  #216 = Utf8               getRecordSize\n-  #217 = Utf8               ()I\n-  #218 = Utf8               available\n-  #219 = Utf8               skip\n-  #220 = Utf8               (J)J\n-  #221 = Utf8               skipSparse\n-  #222 = Utf8               markSupported\n-  #223 = Utf8               ()Z\n-  #224 = Utf8               mark\n-  #225 = Utf8               (I)V\n-  #226 = Utf8               reset\n-  #227 = Utf8               getNextTarEntry\n-  #228 = Utf8               ()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-  #229 = Class              #173          // \"[B\"\n-  #230 = Utf8               skipRecordPadding\n-  #231 = Utf8               getLongNameData\n-  #232 = Utf8               ()[B\n-  #233 = Utf8               getRecord\n-  #234 = Utf8               isEOFRecord\n-  #235 = Utf8               ([B)Z\n-  #236 = Utf8               readRecord\n-  #237 = Utf8               readGlobalPaxHeaders\n-  #238 = Utf8               paxHeaders\n-  #239 = Class              #442          // java/util/List\n-  #240 = Class              #443          // java/util/Map\n-  #241 = Utf8               parsePAX01SparseHeaders\n-  #242 = Utf8               (Ljava/lang/String;)Ljava/util/List;\n-  #243 = Class              #444          // \"[Ljava/lang/String;\"\n-  #244 = Utf8               (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #245 = Utf8               parsePAX1XSparseHeaders\n-  #246 = Utf8               ()Ljava/util/List;\n-  #247 = Class              #445          // \"[J\"\n-  #248 = Utf8               ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #249 = Utf8               readLineOfNumberForPax1X\n-  #250 = Utf8               (Ljava/io/InputStream;)[J\n-  #251 = Utf8               parsePaxHeaders\n-  #252 = Utf8               (Ljava/io/InputStream;Ljava/util/List;)Ljava/util/Map;\n-  #253 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #254 = Utf8               applyPaxHeadersToCurrentEntry\n-  #255 = Utf8               (Ljava/util/Map;Ljava/util/List;)V\n-  #256 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)V\n-  #257 = Utf8               readOldGNUSparse\n-  #258 = Utf8               isDirectory\n-  #259 = Utf8               getNextEntry\n-  #260 = Utf8               ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #261 = Utf8               tryToConsumeSecondEOFRecord\n-  #262 = Class              #446          // java/lang/Throwable\n-  #263 = Utf8               read\n-  #264 = Utf8               ([BII)I\n-  #265 = Utf8               readSparse\n-  #266 = Utf8               canReadEntryData\n-  #267 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n-  #268 = Utf8               getCurrentEntry\n-  #269 = Utf8               setCurrentEntry\n-  #270 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #271 = Utf8               isAtEOF\n-  #272 = Utf8               setAtEOF\n-  #273 = Utf8               (Z)V\n-  #274 = Utf8               consumeRemainderOfLastBlock\n-  #275 = Utf8               matches\n-  #276 = Utf8               ([BI)Z\n-  #277 = Utf8               buildSparseInputStreams\n-  #278 = Utf8               SourceFile\n-  #279 = Utf8               TarArchiveInputStream.java\n-  #280 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n-  #281 = NameAndType        #200:#208     // \"<init>\":(Ljava/io/InputStream;II)V\n-  #282 = NameAndType        #200:#210     // \"<init>\":(Ljava/io/InputStream;IILjava/lang/String;Z)V\n-  #283 = NameAndType        #200:#209     // \"<init>\":(Ljava/io/InputStream;IILjava/lang/String;)V\n-  #284 = NameAndType        #200:#212     // \"<init>\":()V\n-  #285 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveInputStream\n-  #286 = NameAndType        #172:#173     // smallBuf:[B\n-  #287 = Utf8               java/util/HashMap\n-  #288 = NameAndType        #194:#195     // globalPaxHeaders:Ljava/util/Map;\n-  #289 = Utf8               java/util/ArrayList\n-  #290 = NameAndType        #197:#184     // globalSparseHeaders:Ljava/util/List;\n-  #291 = NameAndType        #181:#182     // inputStream:Ljava/io/InputStream;\n-  #292 = NameAndType        #176:#177     // hasHitEOF:Z\n-  #293 = NameAndType        #192:#193     // encoding:Ljava/lang/String;\n-  #294 = Class              #447          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #295 = NameAndType        #448:#449     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #296 = NameAndType        #190:#191     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #297 = NameAndType        #174:#169     // recordSize:I\n-  #298 = NameAndType        #175:#169     // blockSize:I\n-  #299 = NameAndType        #199:#177     // lenient:Z\n-  #300 = NameAndType        #183:#184     // sparseInputStreams:Ljava/util/List;\n-  #301 = NameAndType        #450:#451     // iterator:()Ljava/util/Iterator;\n-  #302 = NameAndType        #452:#223     // hasNext:()Z\n-  #303 = NameAndType        #453:#454     // next:()Ljava/lang/Object;\n-  #304 = Utf8               java/io/InputStream\n-  #305 = NameAndType        #211:#212     // close:()V\n-  #306 = NameAndType        #258:#223     // isDirectory:()Z\n-  #307 = NameAndType        #188:#189     // currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-  #308 = NameAndType        #455:#456     // getRealSize:()J\n-  #309 = NameAndType        #180:#179     // entryOffset:J\n-  #310 = Utf8               java/lang/Integer\n-  #311 = NameAndType        #457:#223     // isSparse:()Z\n-  #312 = Class              #458          // java/lang/Math\n-  #313 = NameAndType        #459:#460     // min:(JJ)J\n-  #314 = Class              #461          // org/apache/commons/compress/utils/IOUtils\n-  #315 = NameAndType        #219:#462     // skip:(Ljava/io/InputStream;J)J\n-  #316 = NameAndType        #221:#220     // skipSparse:(J)J\n-  #317 = NameAndType        #463:#464     // count:(J)V\n-  #318 = NameAndType        #465:#217     // size:()I\n-  #319 = NameAndType        #219:#220     // skip:(J)J\n-  #320 = NameAndType        #187:#169     // currentSparseInputStreamIndex:I\n-  #321 = NameAndType        #466:#467     // get:(I)Ljava/lang/Object;\n-  #322 = NameAndType        #271:#223     // isAtEOF:()Z\n-  #323 = Utf8               java/lang/Long\n-  #324 = NameAndType        #230:#212     // skipRecordPadding:()V\n-  #325 = NameAndType        #233:#232     // getRecord:()[B\n-  #326 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-  #327 = NameAndType        #200:#468     // \"<init>\":([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-  #328 = Utf8               java/lang/IllegalArgumentException\n-  #329 = Utf8               java/io/IOException\n-  #330 = Utf8               Error detected parsing the header\n-  #331 = NameAndType        #200:#469     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #332 = NameAndType        #470:#456     // getSize:()J\n-  #333 = NameAndType        #178:#179     // entrySize:J\n-  #334 = NameAndType        #471:#223     // isGNULongLinkEntry:()Z\n-  #335 = NameAndType        #231:#232     // getLongNameData:()[B\n-  #336 = Class              #472          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #337 = NameAndType        #473:#474     // decode:([B)Ljava/lang/String;\n-  #338 = NameAndType        #475:#476     // setLinkName:(Ljava/lang/String;)V\n-  #339 = NameAndType        #477:#223     // isGNULongNameEntry:()Z\n-  #340 = NameAndType        #478:#476     // setName:(Ljava/lang/String;)V\n-  #341 = NameAndType        #479:#223     // isGlobalPaxHeader:()Z\n-  #342 = NameAndType        #237:#212     // readGlobalPaxHeaders:()V\n-  #343 = NameAndType        #480:#223     // isPaxHeader:()Z\n-  #344 = NameAndType        #238:#212     // paxHeaders:()V\n-  #345 = NameAndType        #481:#223     // isEmpty:()Z\n-  #346 = NameAndType        #254:#255     // applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n-  #347 = NameAndType        #482:#223     // isOldGNUSparse:()Z\n-  #348 = NameAndType        #257:#212     // readOldGNUSparse:()V\n-  #349 = Utf8               java/io/ByteArrayOutputStream\n-  #350 = NameAndType        #263:#483     // read:([B)I\n-  #351 = NameAndType        #484:#485     // write:([BII)V\n-  #352 = NameAndType        #259:#260     // getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #353 = NameAndType        #486:#232     // toByteArray:()[B\n-  #354 = Class              #487          // java/lang/System\n-  #355 = NameAndType        #488:#489     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #356 = NameAndType        #236:#232     // readRecord:()[B\n-  #357 = NameAndType        #234:#235     // isEOFRecord:([B)Z\n-  #358 = NameAndType        #272:#273     // setAtEOF:(Z)V\n-  #359 = NameAndType        #261:#212     // tryToConsumeSecondEOFRecord:()V\n-  #360 = NameAndType        #274:#212     // consumeRemainderOfLastBlock:()V\n-  #361 = Class              #490          // org/apache/commons/compress/utils/ArchiveUtils\n-  #362 = NameAndType        #491:#276     // isArrayZero:([BI)Z\n-  #363 = NameAndType        #492:#493     // readFully:(Ljava/io/InputStream;[B)I\n-  #364 = NameAndType        #463:#225     // count:(I)V\n-  #365 = NameAndType        #251:#252     // parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;)Ljava/util/Map;\n-  #366 = Utf8               GNU.sparse.map\n-  #367 = NameAndType        #494:#495     // containsKey:(Ljava/lang/Object;)Z\n-  #368 = NameAndType        #466:#496     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #369 = Utf8               java/lang/String\n-  #370 = NameAndType        #241:#242     // parsePAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-  #371 = NameAndType        #497:#223     // isPaxGNU1XSparse:()Z\n-  #372 = NameAndType        #245:#246     // parsePAX1XSparseHeaders:()Ljava/util/List;\n-  #373 = NameAndType        #498:#499     // setSparseHeaders:(Ljava/util/List;)V\n-  #374 = NameAndType        #277:#212     // buildSparseInputStreams:()V\n-  #375 = Utf8               ,\n-  #376 = NameAndType        #500:#501     // split:(Ljava/lang/String;)[Ljava/lang/String;\n-  #377 = NameAndType        #502:#503     // parseLong:(Ljava/lang/String;)J\n-  #378 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-  #379 = NameAndType        #200:#504     // \"<init>\":(JJ)V\n-  #380 = NameAndType        #505:#495     // add:(Ljava/lang/Object;)Z\n-  #381 = NameAndType        #249:#250     // readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-  #382 = NameAndType        #263:#217     // read:()I\n-  #383 = Utf8               Unexpected EOF when reading parse information of 1.X PAX format\n-  #384 = NameAndType        #200:#476     // \"<init>\":(Ljava/lang/String;)V\n-  #385 = NameAndType        #200:#506     // \"<init>\":(Ljava/util/Map;)V\n-  #386 = Utf8               org/apache/commons/compress/utils/CharsetNames\n-  #387 = Utf8               UTF-8\n-  #388 = NameAndType        #507:#508     // toString:(Ljava/lang/String;)Ljava/lang/String;\n-  #389 = NameAndType        #509:#496     // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #390 = Utf8               BootstrapMethods\n-  #391 = MethodHandle       6:#510        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #392 = String             #511          // Failed to read Paxheader. Expected \\u0001 bytes, read \\u0001\n-  #393 = NameAndType        #512:#513     // makeConcatWithConstants:(II)Ljava/lang/String;\n-  #394 = NameAndType        #200:#514     // \"<init>\":([BIILjava/lang/String;)V\n-  #395 = NameAndType        #515:#516     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #396 = Utf8               GNU.sparse.offset\n-  #397 = NameAndType        #517:#495     // equals:(Ljava/lang/Object;)Z\n-  #398 = NameAndType        #518:#456     // longValue:()J\n-  #399 = NameAndType        #519:#520     // valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-  #400 = Utf8               GNU.sparse.numbytes\n-  #401 = Utf8               Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-  #402 = NameAndType        #484:#225     // write:(I)V\n-  #403 = NameAndType        #521:#506     // updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n-  #404 = NameAndType        #522:#223     // isExtended:()Z\n-  #405 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n-  #406 = NameAndType        #200:#523     // \"<init>\":([B)V\n-  #407 = NameAndType        #524:#246     // getSparseHeaders:()Ljava/util/List;\n-  #408 = NameAndType        #525:#526     // addAll:(Ljava/util/Collection;)Z\n-  #409 = NameAndType        #227:#228     // getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-  #410 = NameAndType        #222:#223     // markSupported:()Z\n-  #411 = NameAndType        #224:#225     // mark:(I)V\n-  #412 = NameAndType        #527:#464     // pushedBackBytes:(J)V\n-  #413 = NameAndType        #226:#212     // reset:()V\n-  #414 = Utf8               java/lang/IllegalStateException\n-  #415 = Utf8               No current tar entry\n-  #416 = NameAndType        #218:#217     // available:()I\n-  #417 = NameAndType        #459:#528     // min:(II)I\n-  #418 = NameAndType        #265:#264     // readSparse:([BII)I\n-  #419 = NameAndType        #263:#264     // read:([BII)I\n-  #420 = Utf8               Truncated TAR archive\n-  #421 = NameAndType        #529:#456     // getBytesRead:()J\n-  #422 = Utf8               ustar\\u0000\n-  #423 = NameAndType        #530:#531     // matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n-  #424 = Utf8               00\n-  #425 = Utf8               ustar\n-  #426 = Utf8                \\u0000\n-  #427 = Utf8               0\\u0000\n-  #428 = Utf8               \\u0000\\u0000\n-  #429 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveInputStream$1\n-  #430 = NameAndType        #200:#532     // \"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream;)V\n-  #431 = Class              #533          // java/util/Collections\n-  #432 = NameAndType        #534:#535     // sort:(Ljava/util/List;Ljava/util/Comparator;)V\n-  #433 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveInputStream$TarArchiveSparseZeroInputStream\n-  #434 = NameAndType        #200:#536     // \"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream$1;)V\n-  #435 = NameAndType        #537:#456     // getOffset:()J\n-  #436 = NameAndType        #538:#456     // getNumbytes:()J\n-  #437 = Utf8               Corrupted struct sparse detected\n-  #438 = Utf8               org/apache/commons/compress/utils/BoundedInputStream\n-  #439 = NameAndType        #200:#539     // \"<init>\":(Ljava/io/InputStream;J)V\n-  #440 = Utf8               org/apache/commons/compress/archivers/ArchiveInputStream\n-  #441 = Utf8               java/util/Iterator\n-  #442 = Utf8               java/util/List\n-  #443 = Utf8               java/util/Map\n-  #444 = Utf8               [Ljava/lang/String;\n-  #445 = Utf8               [J\n-  #446 = Utf8               java/lang/Throwable\n-  #447 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #448 = Utf8               getZipEncoding\n-  #449 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #450 = Utf8               iterator\n-  #451 = Utf8               ()Ljava/util/Iterator;\n-  #452 = Utf8               hasNext\n-  #453 = Utf8               next\n-  #454 = Utf8               ()Ljava/lang/Object;\n-  #455 = Utf8               getRealSize\n-  #456 = Utf8               ()J\n-  #457 = Utf8               isSparse\n-  #458 = Utf8               java/lang/Math\n-  #459 = Utf8               min\n-  #460 = Utf8               (JJ)J\n-  #461 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #462 = Utf8               (Ljava/io/InputStream;J)J\n-  #463 = Utf8               count\n-  #464 = Utf8               (J)V\n-  #465 = Utf8               size\n-  #466 = Utf8               get\n-  #467 = Utf8               (I)Ljava/lang/Object;\n-  #468 = Utf8               ([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-  #469 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #470 = Utf8               getSize\n-  #471 = Utf8               isGNULongLinkEntry\n-  #472 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #473 = Utf8               decode\n-  #474 = Utf8               ([B)Ljava/lang/String;\n-  #475 = Utf8               setLinkName\n-  #476 = Utf8               (Ljava/lang/String;)V\n-  #477 = Utf8               isGNULongNameEntry\n-  #478 = Utf8               setName\n-  #479 = Utf8               isGlobalPaxHeader\n-  #480 = Utf8               isPaxHeader\n-  #481 = Utf8               isEmpty\n-  #482 = Utf8               isOldGNUSparse\n-  #483 = Utf8               ([B)I\n-  #484 = Utf8               write\n-  #485 = Utf8               ([BII)V\n-  #486 = Utf8               toByteArray\n-  #487 = Utf8               java/lang/System\n-  #488 = Utf8               arraycopy\n-  #489 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #490 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n-  #491 = Utf8               isArrayZero\n-  #492 = Utf8               readFully\n-  #493 = Utf8               (Ljava/io/InputStream;[B)I\n-  #494 = Utf8               containsKey\n-  #495 = Utf8               (Ljava/lang/Object;)Z\n-  #496 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #497 = Utf8               isPaxGNU1XSparse\n-  #498 = Utf8               setSparseHeaders\n-  #499 = Utf8               (Ljava/util/List;)V\n-  #500 = Utf8               split\n-  #501 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n-  #502 = Utf8               parseLong\n-  #503 = Utf8               (Ljava/lang/String;)J\n-  #504 = Utf8               (JJ)V\n-  #505 = Utf8               add\n-  #506 = Utf8               (Ljava/util/Map;)V\n-  #507 = Utf8               toString\n-  #508 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #509 = Utf8               remove\n-  #510 = Methodref          #540.#541     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #511 = Utf8               Failed to read Paxheader. Expected \\u0001 bytes, read \\u0001\n-  #512 = Utf8               makeConcatWithConstants\n-  #513 = Utf8               (II)Ljava/lang/String;\n-  #514 = Utf8               ([BIILjava/lang/String;)V\n-  #515 = Utf8               put\n-  #516 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #517 = Utf8               equals\n-  #518 = Utf8               longValue\n-  #519 = Utf8               valueOf\n-  #520 = Utf8               (Ljava/lang/String;)Ljava/lang/Long;\n-  #521 = Utf8               updateEntryFromPaxHeaders\n-  #522 = Utf8               isExtended\n-  #523 = Utf8               ([B)V\n-  #524 = Utf8               getSparseHeaders\n-  #525 = Utf8               addAll\n-  #526 = Utf8               (Ljava/util/Collection;)Z\n-  #527 = Utf8               pushedBackBytes\n-  #528 = Utf8               (II)I\n-  #529 = Utf8               getBytesRead\n-  #530 = Utf8               matchAsciiBuffer\n-  #531 = Utf8               (Ljava/lang/String;[BII)Z\n-  #532 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream;)V\n-  #533 = Utf8               java/util/Collections\n-  #534 = Utf8               sort\n-  #535 = Utf8               (Ljava/util/List;Ljava/util/Comparator;)V\n-  #536 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream$1;)V\n-  #537 = Utf8               getOffset\n-  #538 = Utf8               getNumbytes\n-  #539 = Utf8               (Ljava/io/InputStream;J)V\n-  #540 = Class              #542          // java/lang/invoke/StringConcatFactory\n-  #541 = NameAndType        #512:#545     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #542 = Utf8               java/lang/invoke/StringConcatFactory\n-  #543 = Class              #547          // java/lang/invoke/MethodHandles$Lookup\n-  #544 = Utf8               Lookup\n-  #545 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #546 = Class              #548          // java/lang/invoke/MethodHandles\n-  #547 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #548 = Utf8               java/lang/invoke/MethodHandles\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/tar/TarConstants\n+    #2 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n+    #3 = Methodref          #4.#5         // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.\"<init>\":(Ljava/io/InputStream;II)V\n+    #4 = Class              #6            // org/apache/commons/compress/archivers/tar/TarArchiveInputStream\n+    #5 = NameAndType        #7:#8         // \"<init>\":(Ljava/io/InputStream;II)V\n+    #6 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveInputStream\n+    #7 = Utf8               <init>\n+    #8 = Utf8               (Ljava/io/InputStream;II)V\n+    #9 = Methodref          #4.#10        // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.\"<init>\":(Ljava/io/InputStream;IILjava/lang/String;Z)V\n+   #10 = NameAndType        #7:#11        // \"<init>\":(Ljava/io/InputStream;IILjava/lang/String;Z)V\n+   #11 = Utf8               (Ljava/io/InputStream;IILjava/lang/String;Z)V\n+   #12 = Methodref          #4.#13        // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.\"<init>\":(Ljava/io/InputStream;IILjava/lang/String;)V\n+   #13 = NameAndType        #7:#14        // \"<init>\":(Ljava/io/InputStream;IILjava/lang/String;)V\n+   #14 = Utf8               (Ljava/io/InputStream;IILjava/lang/String;)V\n+   #15 = Methodref          #16.#17       // org/apache/commons/compress/archivers/ArchiveInputStream.\"<init>\":()V\n+   #16 = Class              #18           // org/apache/commons/compress/archivers/ArchiveInputStream\n+   #17 = NameAndType        #7:#19        // \"<init>\":()V\n+   #18 = Utf8               org/apache/commons/compress/archivers/ArchiveInputStream\n+   #19 = Utf8               ()V\n+   #20 = Fieldref           #4.#21        // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.smallBuf:[B\n+   #21 = NameAndType        #22:#23       // smallBuf:[B\n+   #22 = Utf8               smallBuf\n+   #23 = Utf8               [B\n+   #24 = Class              #25           // java/util/HashMap\n+   #25 = Utf8               java/util/HashMap\n+   #26 = Methodref          #24.#17       // java/util/HashMap.\"<init>\":()V\n+   #27 = Fieldref           #4.#28        // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.globalPaxHeaders:Ljava/util/Map;\n+   #28 = NameAndType        #29:#30       // globalPaxHeaders:Ljava/util/Map;\n+   #29 = Utf8               globalPaxHeaders\n+   #30 = Utf8               Ljava/util/Map;\n+   #31 = Class              #32           // java/util/ArrayList\n+   #32 = Utf8               java/util/ArrayList\n+   #33 = Methodref          #31.#17       // java/util/ArrayList.\"<init>\":()V\n+   #34 = Fieldref           #4.#35        // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.globalSparseHeaders:Ljava/util/List;\n+   #35 = NameAndType        #36:#37       // globalSparseHeaders:Ljava/util/List;\n+   #36 = Utf8               globalSparseHeaders\n+   #37 = Utf8               Ljava/util/List;\n+   #38 = Fieldref           #4.#39        // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.inputStream:Ljava/io/InputStream;\n+   #39 = NameAndType        #40:#41       // inputStream:Ljava/io/InputStream;\n+   #40 = Utf8               inputStream\n+   #41 = Utf8               Ljava/io/InputStream;\n+   #42 = Fieldref           #4.#43        // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.hasHitEOF:Z\n+   #43 = NameAndType        #44:#45       // hasHitEOF:Z\n+   #44 = Utf8               hasHitEOF\n+   #45 = Utf8               Z\n+   #46 = Fieldref           #4.#47        // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.encoding:Ljava/lang/String;\n+   #47 = NameAndType        #48:#49       // encoding:Ljava/lang/String;\n+   #48 = Utf8               encoding\n+   #49 = Utf8               Ljava/lang/String;\n+   #50 = Methodref          #51.#52       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #51 = Class              #53           // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #52 = NameAndType        #54:#55       // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #53 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #54 = Utf8               getZipEncoding\n+   #55 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #56 = Fieldref           #4.#57        // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #57 = NameAndType        #58:#59       // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #58 = Utf8               zipEncoding\n+   #59 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #60 = Fieldref           #4.#61        // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.recordSize:I\n+   #61 = NameAndType        #62:#63       // recordSize:I\n+   #62 = Utf8               recordSize\n+   #63 = Utf8               I\n+   #64 = Fieldref           #4.#65        // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.blockSize:I\n+   #65 = NameAndType        #66:#63       // blockSize:I\n+   #66 = Utf8               blockSize\n+   #67 = Fieldref           #4.#68        // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.lenient:Z\n+   #68 = NameAndType        #69:#45       // lenient:Z\n+   #69 = Utf8               lenient\n+   #70 = Fieldref           #4.#71        // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.sparseInputStreams:Ljava/util/List;\n+   #71 = NameAndType        #72:#37       // sparseInputStreams:Ljava/util/List;\n+   #72 = Utf8               sparseInputStreams\n+   #73 = InterfaceMethodref #74.#75       // java/util/List.iterator:()Ljava/util/Iterator;\n+   #74 = Class              #76           // java/util/List\n+   #75 = NameAndType        #77:#78       // iterator:()Ljava/util/Iterator;\n+   #76 = Utf8               java/util/List\n+   #77 = Utf8               iterator\n+   #78 = Utf8               ()Ljava/util/Iterator;\n+   #79 = InterfaceMethodref #80.#81       // java/util/Iterator.hasNext:()Z\n+   #80 = Class              #82           // java/util/Iterator\n+   #81 = NameAndType        #83:#84       // hasNext:()Z\n+   #82 = Utf8               java/util/Iterator\n+   #83 = Utf8               hasNext\n+   #84 = Utf8               ()Z\n+   #85 = InterfaceMethodref #80.#86       // java/util/Iterator.next:()Ljava/lang/Object;\n+   #86 = NameAndType        #87:#88       // next:()Ljava/lang/Object;\n+   #87 = Utf8               next\n+   #88 = Utf8               ()Ljava/lang/Object;\n+   #89 = Class              #90           // java/io/InputStream\n+   #90 = Utf8               java/io/InputStream\n+   #91 = Methodref          #89.#92       // java/io/InputStream.close:()V\n+   #92 = NameAndType        #93:#19       // close:()V\n+   #93 = Utf8               close\n+   #94 = Methodref          #4.#95        // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.isDirectory:()Z\n+   #95 = NameAndType        #96:#84       // isDirectory:()Z\n+   #96 = Utf8               isDirectory\n+   #97 = Fieldref           #4.#98        // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+   #98 = NameAndType        #99:#100      // currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+   #99 = Utf8               currEntry\n+  #100 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #101 = Methodref          #102.#103     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n+  #102 = Class              #104          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+  #103 = NameAndType        #105:#106     // getRealSize:()J\n+  #104 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+  #105 = Utf8               getRealSize\n+  #106 = Utf8               ()J\n+  #107 = Fieldref           #4.#108       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.entryOffset:J\n+  #108 = NameAndType        #109:#110     // entryOffset:J\n+  #109 = Utf8               entryOffset\n+  #110 = Utf8               J\n+  #111 = Class              #112          // java/lang/Integer\n+  #112 = Utf8               java/lang/Integer\n+  #113 = Long               2147483647l\n+  #115 = Integer            2147483647\n+  #116 = Methodref          #102.#117     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n+  #117 = NameAndType        #118:#84      // isSparse:()Z\n+  #118 = Utf8               isSparse\n+  #119 = Methodref          #120.#121     // java/lang/Math.min:(JJ)J\n+  #120 = Class              #122          // java/lang/Math\n+  #121 = NameAndType        #123:#124     // min:(JJ)J\n+  #122 = Utf8               java/lang/Math\n+  #123 = Utf8               min\n+  #124 = Utf8               (JJ)J\n+  #125 = Methodref          #126.#127     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+  #126 = Class              #128          // org/apache/commons/compress/utils/IOUtils\n+  #127 = NameAndType        #129:#130     // skip:(Ljava/io/InputStream;J)J\n+  #128 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #129 = Utf8               skip\n+  #130 = Utf8               (Ljava/io/InputStream;J)J\n+  #131 = Methodref          #4.#132       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.skipSparse:(J)J\n+  #132 = NameAndType        #133:#134     // skipSparse:(J)J\n+  #133 = Utf8               skipSparse\n+  #134 = Utf8               (J)J\n+  #135 = Methodref          #4.#136       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.count:(J)V\n+  #136 = NameAndType        #137:#138     // count:(J)V\n+  #137 = Utf8               count\n+  #138 = Utf8               (J)V\n+  #139 = InterfaceMethodref #74.#140      // java/util/List.size:()I\n+  #140 = NameAndType        #141:#142     // size:()I\n+  #141 = Utf8               size\n+  #142 = Utf8               ()I\n+  #143 = Methodref          #89.#144      // java/io/InputStream.skip:(J)J\n+  #144 = NameAndType        #129:#134     // skip:(J)J\n+  #145 = Fieldref           #4.#146       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.currentSparseInputStreamIndex:I\n+  #146 = NameAndType        #147:#63      // currentSparseInputStreamIndex:I\n+  #147 = Utf8               currentSparseInputStreamIndex\n+  #148 = InterfaceMethodref #74.#149      // java/util/List.get:(I)Ljava/lang/Object;\n+  #149 = NameAndType        #150:#151     // get:(I)Ljava/lang/Object;\n+  #150 = Utf8               get\n+  #151 = Utf8               (I)Ljava/lang/Object;\n+  #152 = Methodref          #4.#153       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.isAtEOF:()Z\n+  #153 = NameAndType        #154:#84      // isAtEOF:()Z\n+  #154 = Utf8               isAtEOF\n+  #155 = Class              #156          // java/lang/Long\n+  #156 = Utf8               java/lang/Long\n+  #157 = Long               9223372036854775807l\n+  #159 = Methodref          #4.#160       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.skipRecordPadding:()V\n+  #160 = NameAndType        #161:#19      // skipRecordPadding:()V\n+  #161 = Utf8               skipRecordPadding\n+  #162 = Methodref          #4.#163       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getRecord:()[B\n+  #163 = NameAndType        #164:#165     // getRecord:()[B\n+  #164 = Utf8               getRecord\n+  #165 = Utf8               ()[B\n+  #166 = Methodref          #102.#167     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+  #167 = NameAndType        #7:#168       // \"<init>\":([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+  #168 = Utf8               ([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+  #169 = Class              #170          // java/lang/IllegalArgumentException\n+  #170 = Utf8               java/lang/IllegalArgumentException\n+  #171 = Class              #172          // java/io/IOException\n+  #172 = Utf8               java/io/IOException\n+  #173 = String             #174          // Error detected parsing the header\n+  #174 = Utf8               Error detected parsing the header\n+  #175 = Methodref          #171.#176     // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #176 = NameAndType        #7:#177       // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #177 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #178 = Methodref          #102.#179     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+  #179 = NameAndType        #180:#106     // getSize:()J\n+  #180 = Utf8               getSize\n+  #181 = Fieldref           #4.#182       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.entrySize:J\n+  #182 = NameAndType        #183:#110     // entrySize:J\n+  #183 = Utf8               entrySize\n+  #184 = Methodref          #102.#185     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongLinkEntry:()Z\n+  #185 = NameAndType        #186:#84      // isGNULongLinkEntry:()Z\n+  #186 = Utf8               isGNULongLinkEntry\n+  #187 = Methodref          #4.#188       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getLongNameData:()[B\n+  #188 = NameAndType        #189:#165     // getLongNameData:()[B\n+  #189 = Utf8               getLongNameData\n+  #190 = InterfaceMethodref #191.#192     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+  #191 = Class              #193          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #192 = NameAndType        #194:#195     // decode:([B)Ljava/lang/String;\n+  #193 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #194 = Utf8               decode\n+  #195 = Utf8               ([B)Ljava/lang/String;\n+  #196 = Methodref          #102.#197     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V\n+  #197 = NameAndType        #198:#199     // setLinkName:(Ljava/lang/String;)V\n+  #198 = Utf8               setLinkName\n+  #199 = Utf8               (Ljava/lang/String;)V\n+  #200 = Methodref          #102.#201     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongNameEntry:()Z\n+  #201 = NameAndType        #202:#84      // isGNULongNameEntry:()Z\n+  #202 = Utf8               isGNULongNameEntry\n+  #203 = Methodref          #102.#204     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n+  #204 = NameAndType        #205:#199     // setName:(Ljava/lang/String;)V\n+  #205 = Utf8               setName\n+  #206 = Methodref          #102.#207     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n+  #207 = NameAndType        #208:#84      // isGlobalPaxHeader:()Z\n+  #208 = Utf8               isGlobalPaxHeader\n+  #209 = Methodref          #4.#210       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.readGlobalPaxHeaders:()V\n+  #210 = NameAndType        #211:#19      // readGlobalPaxHeaders:()V\n+  #211 = Utf8               readGlobalPaxHeaders\n+  #212 = Methodref          #102.#213     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z\n+  #213 = NameAndType        #214:#84      // isPaxHeader:()Z\n+  #214 = Utf8               isPaxHeader\n+  #215 = Methodref          #4.#216       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.paxHeaders:()V\n+  #216 = NameAndType        #217:#19      // paxHeaders:()V\n+  #217 = Utf8               paxHeaders\n+  #218 = InterfaceMethodref #219.#220     // java/util/Map.isEmpty:()Z\n+  #219 = Class              #221          // java/util/Map\n+  #220 = NameAndType        #222:#84      // isEmpty:()Z\n+  #221 = Utf8               java/util/Map\n+  #222 = Utf8               isEmpty\n+  #223 = Methodref          #4.#224       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n+  #224 = NameAndType        #225:#226     // applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n+  #225 = Utf8               applyPaxHeadersToCurrentEntry\n+  #226 = Utf8               (Ljava/util/Map;Ljava/util/List;)V\n+  #227 = Methodref          #102.#228     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z\n+  #228 = NameAndType        #229:#84      // isOldGNUSparse:()Z\n+  #229 = Utf8               isOldGNUSparse\n+  #230 = Methodref          #4.#231       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.readOldGNUSparse:()V\n+  #231 = NameAndType        #232:#19      // readOldGNUSparse:()V\n+  #232 = Utf8               readOldGNUSparse\n+  #233 = Class              #234          // java/io/ByteArrayOutputStream\n+  #234 = Utf8               java/io/ByteArrayOutputStream\n+  #235 = Methodref          #233.#17      // java/io/ByteArrayOutputStream.\"<init>\":()V\n+  #236 = Methodref          #4.#237       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.read:([B)I\n+  #237 = NameAndType        #238:#239     // read:([B)I\n+  #238 = Utf8               read\n+  #239 = Utf8               ([B)I\n+  #240 = Methodref          #233.#241     // java/io/ByteArrayOutputStream.write:([BII)V\n+  #241 = NameAndType        #242:#243     // write:([BII)V\n+  #242 = Utf8               write\n+  #243 = Utf8               ([BII)V\n+  #244 = Methodref          #4.#245       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #245 = NameAndType        #246:#247     // getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #246 = Utf8               getNextEntry\n+  #247 = Utf8               ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #248 = Methodref          #233.#249     // java/io/ByteArrayOutputStream.toByteArray:()[B\n+  #249 = NameAndType        #250:#165     // toByteArray:()[B\n+  #250 = Utf8               toByteArray\n+  #251 = Methodref          #252.#253     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #252 = Class              #254          // java/lang/System\n+  #253 = NameAndType        #255:#256     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #254 = Utf8               java/lang/System\n+  #255 = Utf8               arraycopy\n+  #256 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #257 = Methodref          #4.#258       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.readRecord:()[B\n+  #258 = NameAndType        #259:#165     // readRecord:()[B\n+  #259 = Utf8               readRecord\n+  #260 = Methodref          #4.#261       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.isEOFRecord:([B)Z\n+  #261 = NameAndType        #262:#263     // isEOFRecord:([B)Z\n+  #262 = Utf8               isEOFRecord\n+  #263 = Utf8               ([B)Z\n+  #264 = Methodref          #4.#265       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.setAtEOF:(Z)V\n+  #265 = NameAndType        #266:#267     // setAtEOF:(Z)V\n+  #266 = Utf8               setAtEOF\n+  #267 = Utf8               (Z)V\n+  #268 = Methodref          #4.#269       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.tryToConsumeSecondEOFRecord:()V\n+  #269 = NameAndType        #270:#19      // tryToConsumeSecondEOFRecord:()V\n+  #270 = Utf8               tryToConsumeSecondEOFRecord\n+  #271 = Methodref          #4.#272       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.consumeRemainderOfLastBlock:()V\n+  #272 = NameAndType        #273:#19      // consumeRemainderOfLastBlock:()V\n+  #273 = Utf8               consumeRemainderOfLastBlock\n+  #274 = Methodref          #275.#276     // org/apache/commons/compress/utils/ArchiveUtils.isArrayZero:([BI)Z\n+  #275 = Class              #277          // org/apache/commons/compress/utils/ArchiveUtils\n+  #276 = NameAndType        #278:#279     // isArrayZero:([BI)Z\n+  #277 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n+  #278 = Utf8               isArrayZero\n+  #279 = Utf8               ([BI)Z\n+  #280 = Methodref          #126.#281     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[B)I\n+  #281 = NameAndType        #282:#283     // readFully:(Ljava/io/InputStream;[B)I\n+  #282 = Utf8               readFully\n+  #283 = Utf8               (Ljava/io/InputStream;[B)I\n+  #284 = Methodref          #4.#285       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.count:(I)V\n+  #285 = NameAndType        #137:#286     // count:(I)V\n+  #286 = Utf8               (I)V\n+  #287 = Methodref          #4.#288       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;)Ljava/util/Map;\n+  #288 = NameAndType        #289:#290     // parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;)Ljava/util/Map;\n+  #289 = Utf8               parsePaxHeaders\n+  #290 = Utf8               (Ljava/io/InputStream;Ljava/util/List;)Ljava/util/Map;\n+  #291 = String             #292          // GNU.sparse.map\n+  #292 = Utf8               GNU.sparse.map\n+  #293 = InterfaceMethodref #219.#294     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+  #294 = NameAndType        #295:#296     // containsKey:(Ljava/lang/Object;)Z\n+  #295 = Utf8               containsKey\n+  #296 = Utf8               (Ljava/lang/Object;)Z\n+  #297 = InterfaceMethodref #219.#298     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #298 = NameAndType        #150:#299     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #299 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #300 = Class              #301          // java/lang/String\n+  #301 = Utf8               java/lang/String\n+  #302 = Methodref          #4.#303       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.parsePAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+  #303 = NameAndType        #304:#305     // parsePAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+  #304 = Utf8               parsePAX01SparseHeaders\n+  #305 = Utf8               (Ljava/lang/String;)Ljava/util/List;\n+  #306 = Methodref          #102.#307     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxGNU1XSparse:()Z\n+  #307 = NameAndType        #308:#84      // isPaxGNU1XSparse:()Z\n+  #308 = Utf8               isPaxGNU1XSparse\n+  #309 = Methodref          #4.#310       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.parsePAX1XSparseHeaders:()Ljava/util/List;\n+  #310 = NameAndType        #311:#312     // parsePAX1XSparseHeaders:()Ljava/util/List;\n+  #311 = Utf8               parsePAX1XSparseHeaders\n+  #312 = Utf8               ()Ljava/util/List;\n+  #313 = Methodref          #102.#314     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n+  #314 = NameAndType        #315:#316     // setSparseHeaders:(Ljava/util/List;)V\n+  #315 = Utf8               setSparseHeaders\n+  #316 = Utf8               (Ljava/util/List;)V\n+  #317 = Methodref          #4.#318       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.buildSparseInputStreams:()V\n+  #318 = NameAndType        #319:#19      // buildSparseInputStreams:()V\n+  #319 = Utf8               buildSparseInputStreams\n+  #320 = String             #321          // ,\n+  #321 = Utf8               ,\n+  #322 = Methodref          #300.#323     // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n+  #323 = NameAndType        #324:#325     // split:(Ljava/lang/String;)[Ljava/lang/String;\n+  #324 = Utf8               split\n+  #325 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n+  #326 = Methodref          #155.#327     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n+  #327 = NameAndType        #328:#329     // parseLong:(Ljava/lang/String;)J\n+  #328 = Utf8               parseLong\n+  #329 = Utf8               (Ljava/lang/String;)J\n+  #330 = Class              #331          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+  #331 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+  #332 = Methodref          #330.#333     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+  #333 = NameAndType        #7:#334       // \"<init>\":(JJ)V\n+  #334 = Utf8               (JJ)V\n+  #335 = InterfaceMethodref #74.#336      // java/util/List.add:(Ljava/lang/Object;)Z\n+  #336 = NameAndType        #337:#296     // add:(Ljava/lang/Object;)Z\n+  #337 = Utf8               add\n+  #338 = Methodref          #4.#339       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+  #339 = NameAndType        #340:#341     // readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+  #340 = Utf8               readLineOfNumberForPax1X\n+  #341 = Utf8               (Ljava/io/InputStream;)[J\n+  #342 = Methodref          #89.#343      // java/io/InputStream.read:()I\n+  #343 = NameAndType        #238:#142     // read:()I\n+  #344 = String             #345          // Unexpected EOF when reading parse information of 1.X PAX format\n+  #345 = Utf8               Unexpected EOF when reading parse information of 1.X PAX format\n+  #346 = Methodref          #171.#347     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #347 = NameAndType        #7:#199       // \"<init>\":(Ljava/lang/String;)V\n+  #348 = Long               10l\n+  #350 = Methodref          #24.#351      // java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n+  #351 = NameAndType        #7:#352       // \"<init>\":(Ljava/util/Map;)V\n+  #352 = Utf8               (Ljava/util/Map;)V\n+  #353 = Class              #354          // org/apache/commons/compress/utils/CharsetNames\n+  #354 = Utf8               org/apache/commons/compress/utils/CharsetNames\n+  #355 = String             #356          // UTF-8\n+  #356 = Utf8               UTF-8\n+  #357 = Methodref          #233.#358     // java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n+  #358 = NameAndType        #359:#360     // toString:(Ljava/lang/String;)Ljava/lang/String;\n+  #359 = Utf8               toString\n+  #360 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #361 = InterfaceMethodref #219.#362     // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #362 = NameAndType        #363:#299     // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #363 = Utf8               remove\n+  #364 = InvokeDynamic      #0:#365       // #0:makeConcatWithConstants:(II)Ljava/lang/String;\n+  #365 = NameAndType        #366:#367     // makeConcatWithConstants:(II)Ljava/lang/String;\n+  #366 = Utf8               makeConcatWithConstants\n+  #367 = Utf8               (II)Ljava/lang/String;\n+  #368 = Methodref          #300.#369     // java/lang/String.\"<init>\":([BIILjava/lang/String;)V\n+  #369 = NameAndType        #7:#370       // \"<init>\":([BIILjava/lang/String;)V\n+  #370 = Utf8               ([BIILjava/lang/String;)V\n+  #371 = InterfaceMethodref #219.#372     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #372 = NameAndType        #373:#374     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #373 = Utf8               put\n+  #374 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #375 = String             #376          // GNU.sparse.offset\n+  #376 = Utf8               GNU.sparse.offset\n+  #377 = Methodref          #300.#378     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+  #378 = NameAndType        #379:#296     // equals:(Ljava/lang/Object;)Z\n+  #379 = Utf8               equals\n+  #380 = Methodref          #155.#381     // java/lang/Long.longValue:()J\n+  #381 = NameAndType        #382:#106     // longValue:()J\n+  #382 = Utf8               longValue\n+  #383 = Methodref          #155.#384     // java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+  #384 = NameAndType        #385:#386     // valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+  #385 = Utf8               valueOf\n+  #386 = Utf8               (Ljava/lang/String;)Ljava/lang/Long;\n+  #387 = String             #388          // GNU.sparse.numbytes\n+  #388 = Utf8               GNU.sparse.numbytes\n+  #389 = String             #390          // Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+  #390 = Utf8               Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+  #391 = Methodref          #233.#392     // java/io/ByteArrayOutputStream.write:(I)V\n+  #392 = NameAndType        #242:#286     // write:(I)V\n+  #393 = Methodref          #102.#394     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n+  #394 = NameAndType        #395:#352     // updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n+  #395 = Utf8               updateEntryFromPaxHeaders\n+  #396 = Methodref          #102.#397     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:()Z\n+  #397 = NameAndType        #398:#84      // isExtended:()Z\n+  #398 = Utf8               isExtended\n+  #399 = Class              #400          // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n+  #400 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n+  #401 = Methodref          #399.#402     // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.\"<init>\":([B)V\n+  #402 = NameAndType        #7:#403       // \"<init>\":([B)V\n+  #403 = Utf8               ([B)V\n+  #404 = Methodref          #102.#405     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSparseHeaders:()Ljava/util/List;\n+  #405 = NameAndType        #406:#312     // getSparseHeaders:()Ljava/util/List;\n+  #406 = Utf8               getSparseHeaders\n+  #407 = Methodref          #399.#405     // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.getSparseHeaders:()Ljava/util/List;\n+  #408 = InterfaceMethodref #74.#409      // java/util/List.addAll:(Ljava/util/Collection;)Z\n+  #409 = NameAndType        #410:#411     // addAll:(Ljava/util/Collection;)Z\n+  #410 = Utf8               addAll\n+  #411 = Utf8               (Ljava/util/Collection;)Z\n+  #412 = Methodref          #399.#397     // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.isExtended:()Z\n+  #413 = Methodref          #102.#95      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n+  #414 = Methodref          #4.#415       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #415 = NameAndType        #416:#417     // getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #416 = Utf8               getNextTarEntry\n+  #417 = Utf8               ()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #418 = Methodref          #89.#419      // java/io/InputStream.markSupported:()Z\n+  #419 = NameAndType        #420:#84      // markSupported:()Z\n+  #420 = Utf8               markSupported\n+  #421 = Methodref          #89.#422      // java/io/InputStream.mark:(I)V\n+  #422 = NameAndType        #423:#286     // mark:(I)V\n+  #423 = Utf8               mark\n+  #424 = Methodref          #4.#425       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.pushedBackBytes:(J)V\n+  #425 = NameAndType        #426:#138     // pushedBackBytes:(J)V\n+  #426 = Utf8               pushedBackBytes\n+  #427 = Methodref          #89.#428      // java/io/InputStream.reset:()V\n+  #428 = NameAndType        #429:#19      // reset:()V\n+  #429 = Utf8               reset\n+  #430 = Class              #431          // java/lang/IllegalStateException\n+  #431 = Utf8               java/lang/IllegalStateException\n+  #432 = String             #433          // No current tar entry\n+  #433 = Utf8               No current tar entry\n+  #434 = Methodref          #430.#347     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+  #435 = Methodref          #4.#436       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.available:()I\n+  #436 = NameAndType        #437:#142     // available:()I\n+  #437 = Utf8               available\n+  #438 = Methodref          #120.#439     // java/lang/Math.min:(II)I\n+  #439 = NameAndType        #123:#440     // min:(II)I\n+  #440 = Utf8               (II)I\n+  #441 = Methodref          #4.#442       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.readSparse:([BII)I\n+  #442 = NameAndType        #443:#444     // readSparse:([BII)I\n+  #443 = Utf8               readSparse\n+  #444 = Utf8               ([BII)I\n+  #445 = Methodref          #89.#446      // java/io/InputStream.read:([BII)I\n+  #446 = NameAndType        #238:#444     // read:([BII)I\n+  #447 = String             #448          // Truncated TAR archive\n+  #448 = Utf8               Truncated TAR archive\n+  #449 = Methodref          #4.#450       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getBytesRead:()J\n+  #450 = NameAndType        #451:#106     // getBytesRead:()J\n+  #451 = Utf8               getBytesRead\n+  #452 = String             #453          // ustar\\u0000\n+  #453 = Utf8               ustar\\u0000\n+  #454 = Methodref          #275.#455     // org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n+  #455 = NameAndType        #456:#457     // matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n+  #456 = Utf8               matchAsciiBuffer\n+  #457 = Utf8               (Ljava/lang/String;[BII)Z\n+  #458 = String             #459          // 00\n+  #459 = Utf8               00\n+  #460 = String             #461          // ustar\n+  #461 = Utf8               ustar\n+  #462 = String             #463          //  \\u0000\n+  #463 = Utf8                \\u0000\n+  #464 = String             #465          // 0\\u0000\n+  #465 = Utf8               0\\u0000\n+  #466 = String             #467          // \\u0000\\u0000\n+  #467 = Utf8               \\u0000\\u0000\n+  #468 = Class              #469          // org/apache/commons/compress/archivers/tar/TarArchiveInputStream$1\n+  #469 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveInputStream$1\n+  #470 = Methodref          #468.#471     // org/apache/commons/compress/archivers/tar/TarArchiveInputStream$1.\"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream;)V\n+  #471 = NameAndType        #7:#472       // \"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream;)V\n+  #472 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream;)V\n+  #473 = Methodref          #474.#475     // java/util/Collections.sort:(Ljava/util/List;Ljava/util/Comparator;)V\n+  #474 = Class              #476          // java/util/Collections\n+  #475 = NameAndType        #477:#478     // sort:(Ljava/util/List;Ljava/util/Comparator;)V\n+  #476 = Utf8               java/util/Collections\n+  #477 = Utf8               sort\n+  #478 = Utf8               (Ljava/util/List;Ljava/util/Comparator;)V\n+  #479 = Class              #480          // org/apache/commons/compress/archivers/tar/TarArchiveInputStream$TarArchiveSparseZeroInputStream\n+  #480 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveInputStream$TarArchiveSparseZeroInputStream\n+  #481 = Methodref          #479.#482     // org/apache/commons/compress/archivers/tar/TarArchiveInputStream$TarArchiveSparseZeroInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream$1;)V\n+  #482 = NameAndType        #7:#483       // \"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream$1;)V\n+  #483 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream$1;)V\n+  #484 = Methodref          #330.#485     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+  #485 = NameAndType        #486:#106     // getOffset:()J\n+  #486 = Utf8               getOffset\n+  #487 = Methodref          #330.#488     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+  #488 = NameAndType        #489:#106     // getNumbytes:()J\n+  #489 = Utf8               getNumbytes\n+  #490 = String             #491          // Corrupted struct sparse detected\n+  #491 = Utf8               Corrupted struct sparse detected\n+  #492 = Class              #493          // org/apache/commons/compress/utils/BoundedInputStream\n+  #493 = Utf8               org/apache/commons/compress/utils/BoundedInputStream\n+  #494 = Methodref          #492.#495     // org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n+  #495 = NameAndType        #7:#496       // \"<init>\":(Ljava/io/InputStream;J)V\n+  #496 = Utf8               (Ljava/io/InputStream;J)V\n+  #497 = Utf8               SMALL_BUFFER_SIZE\n+  #498 = Utf8               ConstantValue\n+  #499 = Integer            256\n+  #500 = Utf8               Signature\n+  #501 = Utf8               Ljava/util/List<Ljava/io/InputStream;>;\n+  #502 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #503 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #504 = Utf8               (Ljava/io/InputStream;)V\n+  #505 = Utf8               Code\n+  #506 = Utf8               LineNumberTable\n+  #507 = Utf8               (Ljava/io/InputStream;Z)V\n+  #508 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;)V\n+  #509 = Utf8               (Ljava/io/InputStream;I)V\n+  #510 = Utf8               (Ljava/io/InputStream;ILjava/lang/String;)V\n+  #511 = Utf8               StackMapTable\n+  #512 = Utf8               Exceptions\n+  #513 = Utf8               getRecordSize\n+  #514 = Class              #23           // \"[B\"\n+  #515 = Class              #516          // \"[Ljava/lang/String;\"\n+  #516 = Utf8               [Ljava/lang/String;\n+  #517 = Utf8               (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #518 = Class              #519          // \"[J\"\n+  #519 = Utf8               [J\n+  #520 = Utf8               ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #521 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #522 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)V\n+  #523 = Class              #524          // java/lang/Throwable\n+  #524 = Utf8               java/lang/Throwable\n+  #525 = Utf8               canReadEntryData\n+  #526 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n+  #527 = Utf8               getCurrentEntry\n+  #528 = Utf8               setCurrentEntry\n+  #529 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #530 = Utf8               matches\n+  #531 = Utf8               SourceFile\n+  #532 = Utf8               TarArchiveInputStream.java\n+  #533 = Utf8               BootstrapMethods\n+  #534 = MethodHandle       6:#535        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #535 = Methodref          #536.#537     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #536 = Class              #538          // java/lang/invoke/StringConcatFactory\n+  #537 = NameAndType        #366:#539     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #538 = Utf8               java/lang/invoke/StringConcatFactory\n+  #539 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #540 = String             #541          // Failed to read Paxheader. Expected \\u0001 bytes, read \\u0001\n+  #541 = Utf8               Failed to read Paxheader. Expected \\u0001 bytes, read \\u0001\n+  #542 = Utf8               InnerClasses\n+  #543 = Utf8               TarArchiveSparseZeroInputStream\n+  #544 = Class              #545          // java/lang/invoke/MethodHandles$Lookup\n+  #545 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #546 = Class              #547          // java/lang/invoke/MethodHandles\n+  #547 = Utf8               java/lang/invoke/MethodHandles\n+  #548 = Utf8               Lookup\n {\n   private static final int SMALL_BUFFER_SIZE = 256;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 256\n \n   private final byte[] smallBuf;\n@@ -586,15 +586,15 @@\n   private final java.io.InputStream inputStream;\n     descriptor: Ljava/io/InputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private java.util.List<java.io.InputStream> sparseInputStreams;\n     descriptor: Ljava/util/List;\n     flags: (0x0002) ACC_PRIVATE\n-    Signature: #186                         // Ljava/util/List<Ljava/io/InputStream;>;\n+    Signature: #501                         // Ljava/util/List<Ljava/io/InputStream;>;\n \n   private int currentSparseInputStreamIndex;\n     descriptor: I\n     flags: (0x0002) ACC_PRIVATE\n \n   private org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry;\n     descriptor: Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n@@ -607,35 +607,35 @@\n   final java.lang.String encoding;\n     descriptor: Ljava/lang/String;\n     flags: (0x0010) ACC_FINAL\n \n   private java.util.Map<java.lang.String, java.lang.String> globalPaxHeaders;\n     descriptor: Ljava/util/Map;\n     flags: (0x0002) ACC_PRIVATE\n-    Signature: #196                         // Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #502                         // Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n \n   private final java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> globalSparseHeaders;\n     descriptor: Ljava/util/List;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #198                         // Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #503                         // Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   private final boolean lenient;\n     descriptor: Z\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveInputStream(java.io.InputStream);\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: sipush        10240\n          5: sipush        512\n-         8: invokespecial #2                  // Method \"<init>\":(Ljava/io/InputStream;II)V\n+         8: invokespecial #3                  // Method \"<init>\":(Ljava/io/InputStream;II)V\n         11: return\n       LineNumberTable:\n         line 104: 0\n         line 105: 11\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveInputStream(java.io.InputStream, boolean);\n     descriptor: (Ljava/io/InputStream;Z)V\n@@ -644,15 +644,15 @@\n       stack=6, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: sipush        10240\n          5: sipush        512\n          8: aconst_null\n          9: iload_2\n-        10: invokespecial #3                  // Method \"<init>\":(Ljava/io/InputStream;IILjava/lang/String;Z)V\n+        10: invokespecial #9                  // Method \"<init>\":(Ljava/io/InputStream;IILjava/lang/String;Z)V\n         13: return\n       LineNumberTable:\n         line 116: 0\n         line 117: 13\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveInputStream(java.io.InputStream, java.lang.String);\n     descriptor: (Ljava/io/InputStream;Ljava/lang/String;)V\n@@ -660,30 +660,30 @@\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: sipush        10240\n          5: sipush        512\n          8: aload_2\n-         9: invokespecial #4                  // Method \"<init>\":(Ljava/io/InputStream;IILjava/lang/String;)V\n+         9: invokespecial #12                 // Method \"<init>\":(Ljava/io/InputStream;IILjava/lang/String;)V\n         12: return\n       LineNumberTable:\n         line 126: 0\n         line 128: 12\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveInputStream(java.io.InputStream, int);\n     descriptor: (Ljava/io/InputStream;I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: sipush        512\n-         6: invokespecial #2                  // Method \"<init>\":(Ljava/io/InputStream;II)V\n+         6: invokespecial #3                  // Method \"<init>\":(Ljava/io/InputStream;II)V\n          9: return\n       LineNumberTable:\n         line 136: 0\n         line 137: 9\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveInputStream(java.io.InputStream, int, java.lang.String);\n     descriptor: (Ljava/io/InputStream;ILjava/lang/String;)V\n@@ -691,15 +691,15 @@\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: sipush        512\n          6: aload_3\n-         7: invokespecial #4                  // Method \"<init>\":(Ljava/io/InputStream;IILjava/lang/String;)V\n+         7: invokespecial #12                 // Method \"<init>\":(Ljava/io/InputStream;IILjava/lang/String;)V\n         10: return\n       LineNumberTable:\n         line 148: 0\n         line 149: 10\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveInputStream(java.io.InputStream, int, int);\n     descriptor: (Ljava/io/InputStream;II)V\n@@ -707,15 +707,15 @@\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n          4: aconst_null\n-         5: invokespecial #4                  // Method \"<init>\":(Ljava/io/InputStream;IILjava/lang/String;)V\n+         5: invokespecial #12                 // Method \"<init>\":(Ljava/io/InputStream;IILjava/lang/String;)V\n          8: return\n       LineNumberTable:\n         line 158: 0\n         line 159: 8\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveInputStream(java.io.InputStream, int, int, java.lang.String);\n     descriptor: (Ljava/io/InputStream;IILjava/lang/String;)V\n@@ -724,63 +724,63 @@\n       stack=6, locals=5, args_size=5\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n          4: aload         4\n          6: iconst_0\n-         7: invokespecial #3                  // Method \"<init>\":(Ljava/io/InputStream;IILjava/lang/String;Z)V\n+         7: invokespecial #9                  // Method \"<init>\":(Ljava/io/InputStream;IILjava/lang/String;Z)V\n         10: return\n       LineNumberTable:\n         line 171: 0\n         line 172: 10\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveInputStream(java.io.InputStream, int, int, java.lang.String, boolean);\n     descriptor: (Ljava/io/InputStream;IILjava/lang/String;Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=6, args_size=6\n          0: aload_0\n-         1: invokespecial #5                  // Method org/apache/commons/compress/archivers/ArchiveInputStream.\"<init>\":()V\n+         1: invokespecial #15                 // Method org/apache/commons/compress/archivers/ArchiveInputStream.\"<init>\":()V\n          4: aload_0\n          5: sipush        256\n          8: newarray       byte\n-        10: putfield      #7                  // Field smallBuf:[B\n+        10: putfield      #20                 // Field smallBuf:[B\n         13: aload_0\n-        14: new           #8                  // class java/util/HashMap\n+        14: new           #24                 // class java/util/HashMap\n         17: dup\n-        18: invokespecial #9                  // Method java/util/HashMap.\"<init>\":()V\n-        21: putfield      #10                 // Field globalPaxHeaders:Ljava/util/Map;\n+        18: invokespecial #26                 // Method java/util/HashMap.\"<init>\":()V\n+        21: putfield      #27                 // Field globalPaxHeaders:Ljava/util/Map;\n         24: aload_0\n-        25: new           #11                 // class java/util/ArrayList\n+        25: new           #31                 // class java/util/ArrayList\n         28: dup\n-        29: invokespecial #12                 // Method java/util/ArrayList.\"<init>\":()V\n-        32: putfield      #13                 // Field globalSparseHeaders:Ljava/util/List;\n+        29: invokespecial #33                 // Method java/util/ArrayList.\"<init>\":()V\n+        32: putfield      #34                 // Field globalSparseHeaders:Ljava/util/List;\n         35: aload_0\n         36: aload_1\n-        37: putfield      #14                 // Field inputStream:Ljava/io/InputStream;\n+        37: putfield      #38                 // Field inputStream:Ljava/io/InputStream;\n         40: aload_0\n         41: iconst_0\n-        42: putfield      #15                 // Field hasHitEOF:Z\n+        42: putfield      #42                 // Field hasHitEOF:Z\n         45: aload_0\n         46: aload         4\n-        48: putfield      #16                 // Field encoding:Ljava/lang/String;\n+        48: putfield      #46                 // Field encoding:Ljava/lang/String;\n         51: aload_0\n         52: aload         4\n-        54: invokestatic  #17                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-        57: putfield      #18                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        54: invokestatic  #50                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        57: putfield      #56                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         60: aload_0\n         61: iload_3\n-        62: putfield      #19                 // Field recordSize:I\n+        62: putfield      #60                 // Field recordSize:I\n         65: aload_0\n         66: iload_2\n-        67: putfield      #20                 // Field blockSize:I\n+        67: putfield      #64                 // Field blockSize:I\n         70: aload_0\n         71: iload         5\n-        73: putfield      #21                 // Field lenient:Z\n+        73: putfield      #67                 // Field lenient:Z\n         76: return\n       LineNumberTable:\n         line 186: 0\n         line 56: 4\n         line 92: 13\n         line 95: 24\n         line 187: 35\n@@ -794,33 +794,33 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=3, args_size=1\n          0: aload_0\n-         1: getfield      #22                 // Field sparseInputStreams:Ljava/util/List;\n+         1: getfield      #70                 // Field sparseInputStreams:Ljava/util/List;\n          4: ifnull        43\n          7: aload_0\n-         8: getfield      #22                 // Field sparseInputStreams:Ljava/util/List;\n-        11: invokeinterface #23,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n+         8: getfield      #70                 // Field sparseInputStreams:Ljava/util/List;\n+        11: invokeinterface #73,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n         16: astore_1\n         17: aload_1\n-        18: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n+        18: invokeinterface #79,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n         23: ifeq          43\n         26: aload_1\n-        27: invokeinterface #25,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n-        32: checkcast     #26                 // class java/io/InputStream\n+        27: invokeinterface #85,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        32: checkcast     #89                 // class java/io/InputStream\n         35: astore_2\n         36: aload_2\n-        37: invokevirtual #27                 // Method java/io/InputStream.close:()V\n+        37: invokevirtual #91                 // Method java/io/InputStream.close:()V\n         40: goto          17\n         43: aload_0\n-        44: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n-        47: invokevirtual #27                 // Method java/io/InputStream.close:()V\n+        44: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n+        47: invokevirtual #91                 // Method java/io/InputStream.close:()V\n         50: return\n       LineNumberTable:\n         line 203: 0\n         line 204: 7\n         line 205: 36\n         line 206: 40\n         line 209: 43\n@@ -836,45 +836,45 @@\n \n   public int getRecordSize();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #19                 // Field recordSize:I\n+         1: getfield      #60                 // Field recordSize:I\n          4: ireturn\n       LineNumberTable:\n         line 218: 0\n \n   public int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #28                 // Method isDirectory:()Z\n+         1: invokespecial #94                 // Method isDirectory:()Z\n          4: ifeq          9\n          7: iconst_0\n          8: ireturn\n          9: aload_0\n-        10: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        13: invokevirtual #30                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n+        10: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        13: invokevirtual #101                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n         16: aload_0\n-        17: getfield      #31                 // Field entryOffset:J\n+        17: getfield      #107                // Field entryOffset:J\n         20: lsub\n-        21: ldc2_w        #33                 // long 2147483647l\n+        21: ldc2_w        #113                // long 2147483647l\n         24: lcmp\n         25: ifle          31\n-        28: ldc           #35                 // int 2147483647\n+        28: ldc           #115                // int 2147483647\n         30: ireturn\n         31: aload_0\n-        32: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        35: invokevirtual #30                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n+        32: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        35: invokevirtual #101                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n         38: aload_0\n-        39: getfield      #31                 // Field entryOffset:J\n+        39: getfield      #107                // Field entryOffset:J\n         42: lsub\n         43: l2i\n         44: ireturn\n       LineNumberTable:\n         line 235: 0\n         line 236: 7\n         line 239: 9\n@@ -892,52 +892,52 @@\n     Code:\n       stack=5, locals=7, args_size=2\n          0: lload_1\n          1: lconst_0\n          2: lcmp\n          3: ifle          13\n          6: aload_0\n-         7: invokespecial #28                 // Method isDirectory:()Z\n+         7: invokespecial #94                 // Method isDirectory:()Z\n         10: ifeq          15\n         13: lconst_0\n         14: lreturn\n         15: aload_0\n-        16: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        19: invokevirtual #30                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n+        16: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        19: invokevirtual #101                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n         22: aload_0\n-        23: getfield      #31                 // Field entryOffset:J\n+        23: getfield      #107                // Field entryOffset:J\n         26: lsub\n         27: lstore_3\n         28: aload_0\n-        29: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        32: invokevirtual #36                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n+        29: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        32: invokevirtual #116                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n         35: ifne          55\n         38: aload_0\n-        39: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n+        39: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n         42: lload_1\n         43: lload_3\n-        44: invokestatic  #37                 // Method java/lang/Math.min:(JJ)J\n-        47: invokestatic  #38                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+        44: invokestatic  #119                // Method java/lang/Math.min:(JJ)J\n+        47: invokestatic  #125                // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n         50: lstore        5\n         52: goto          66\n         55: aload_0\n         56: lload_1\n         57: lload_3\n-        58: invokestatic  #37                 // Method java/lang/Math.min:(JJ)J\n-        61: invokespecial #39                 // Method skipSparse:(J)J\n+        58: invokestatic  #119                // Method java/lang/Math.min:(JJ)J\n+        61: invokespecial #131                // Method skipSparse:(J)J\n         64: lstore        5\n         66: aload_0\n         67: lload         5\n-        69: invokevirtual #40                 // Method count:(J)V\n+        69: invokevirtual #135                // Method count:(J)V\n         72: aload_0\n         73: dup\n-        74: getfield      #31                 // Field entryOffset:J\n+        74: getfield      #107                // Field entryOffset:J\n         77: lload         5\n         79: ladd\n-        80: putfield      #31                 // Field entryOffset:J\n+        80: putfield      #107                // Field entryOffset:J\n         83: lload         5\n         85: lreturn\n       LineNumberTable:\n         line 264: 0\n         line 265: 13\n         line 268: 15\n         line 270: 28\n@@ -960,62 +960,62 @@\n \n   private long skipSparse(long) throws java.io.IOException;\n     descriptor: (J)J\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=6, args_size=2\n          0: aload_0\n-         1: getfield      #22                 // Field sparseInputStreams:Ljava/util/List;\n+         1: getfield      #70                 // Field sparseInputStreams:Ljava/util/List;\n          4: ifnull        19\n          7: aload_0\n-         8: getfield      #22                 // Field sparseInputStreams:Ljava/util/List;\n-        11: invokeinterface #41,  1           // InterfaceMethod java/util/List.size:()I\n+         8: getfield      #70                 // Field sparseInputStreams:Ljava/util/List;\n+        11: invokeinterface #139,  1          // InterfaceMethod java/util/List.size:()I\n         16: ifne          28\n         19: aload_0\n-        20: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n+        20: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n         23: lload_1\n-        24: invokevirtual #42                 // Method java/io/InputStream.skip:(J)J\n+        24: invokevirtual #143                // Method java/io/InputStream.skip:(J)J\n         27: lreturn\n         28: lconst_0\n         29: lstore_3\n         30: lload_3\n         31: lload_1\n         32: lcmp\n         33: ifge          100\n         36: aload_0\n-        37: getfield      #43                 // Field currentSparseInputStreamIndex:I\n+        37: getfield      #145                // Field currentSparseInputStreamIndex:I\n         40: aload_0\n-        41: getfield      #22                 // Field sparseInputStreams:Ljava/util/List;\n-        44: invokeinterface #41,  1           // InterfaceMethod java/util/List.size:()I\n+        41: getfield      #70                 // Field sparseInputStreams:Ljava/util/List;\n+        44: invokeinterface #139,  1          // InterfaceMethod java/util/List.size:()I\n         49: if_icmpge     100\n         52: aload_0\n-        53: getfield      #22                 // Field sparseInputStreams:Ljava/util/List;\n+        53: getfield      #70                 // Field sparseInputStreams:Ljava/util/List;\n         56: aload_0\n-        57: getfield      #43                 // Field currentSparseInputStreamIndex:I\n-        60: invokeinterface #44,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n-        65: checkcast     #26                 // class java/io/InputStream\n+        57: getfield      #145                // Field currentSparseInputStreamIndex:I\n+        60: invokeinterface #148,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n+        65: checkcast     #89                 // class java/io/InputStream\n         68: astore        5\n         70: lload_3\n         71: aload         5\n         73: lload_1\n         74: lload_3\n         75: lsub\n-        76: invokevirtual #42                 // Method java/io/InputStream.skip:(J)J\n+        76: invokevirtual #143                // Method java/io/InputStream.skip:(J)J\n         79: ladd\n         80: lstore_3\n         81: lload_3\n         82: lload_1\n         83: lcmp\n         84: ifge          97\n         87: aload_0\n         88: dup\n-        89: getfield      #43                 // Field currentSparseInputStreamIndex:I\n+        89: getfield      #145                // Field currentSparseInputStreamIndex:I\n         92: iconst_1\n         93: iadd\n-        94: putfield      #43                 // Field currentSparseInputStreamIndex:I\n+        94: putfield      #145                // Field currentSparseInputStreamIndex:I\n         97: goto          30\n        100: lload_3\n        101: lreturn\n       LineNumberTable:\n         line 290: 0\n         line 291: 19\n         line 294: 28\n@@ -1068,135 +1068,135 @@\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=3, args_size=1\n          0: aload_0\n-         1: invokevirtual #45                 // Method isAtEOF:()Z\n+         1: invokevirtual #152                // Method isAtEOF:()Z\n          4: ifeq          9\n          7: aconst_null\n          8: areturn\n          9: aload_0\n-        10: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        10: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         13: ifnull        28\n         16: aload_0\n-        17: ldc2_w        #47                 // long 9223372036854775807l\n-        20: invokestatic  #38                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+        17: ldc2_w        #157                // long 9223372036854775807l\n+        20: invokestatic  #125                // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n         23: pop2\n         24: aload_0\n-        25: invokespecial #49                 // Method skipRecordPadding:()V\n+        25: invokespecial #159                // Method skipRecordPadding:()V\n         28: aload_0\n-        29: invokespecial #50                 // Method getRecord:()[B\n+        29: invokespecial #162                // Method getRecord:()[B\n         32: astore_1\n         33: aload_1\n         34: ifnonnull     44\n         37: aload_0\n         38: aconst_null\n-        39: putfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        39: putfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         42: aconst_null\n         43: areturn\n         44: aload_0\n-        45: new           #51                 // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+        45: new           #102                // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n         48: dup\n         49: aload_1\n         50: aload_0\n-        51: getfield      #18                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        51: getfield      #56                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         54: aload_0\n-        55: getfield      #21                 // Field lenient:Z\n-        58: invokespecial #52                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-        61: putfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        55: getfield      #67                 // Field lenient:Z\n+        58: invokespecial #166                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+        61: putfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         64: goto          79\n         67: astore_2\n-        68: new           #54                 // class java/io/IOException\n+        68: new           #171                // class java/io/IOException\n         71: dup\n-        72: ldc           #55                 // String Error detected parsing the header\n+        72: ldc           #173                // String Error detected parsing the header\n         74: aload_2\n-        75: invokespecial #56                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        75: invokespecial #175                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n         78: athrow\n         79: aload_0\n         80: lconst_0\n-        81: putfield      #31                 // Field entryOffset:J\n+        81: putfield      #107                // Field entryOffset:J\n         84: aload_0\n         85: aload_0\n-        86: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        89: invokevirtual #57                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-        92: putfield      #58                 // Field entrySize:J\n+        86: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        89: invokevirtual #178                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+        92: putfield      #181                // Field entrySize:J\n         95: aload_0\n-        96: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        99: invokevirtual #59                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongLinkEntry:()Z\n+        96: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        99: invokevirtual #184                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongLinkEntry:()Z\n        102: ifeq          133\n        105: aload_0\n-       106: invokevirtual #60                 // Method getLongNameData:()[B\n+       106: invokevirtual #187                // Method getLongNameData:()[B\n        109: astore_2\n        110: aload_2\n        111: ifnonnull     116\n        114: aconst_null\n        115: areturn\n        116: aload_0\n-       117: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       117: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n        120: aload_0\n-       121: getfield      #18                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       121: getfield      #56                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        124: aload_2\n-       125: invokeinterface #61,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-       130: invokevirtual #62                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V\n+       125: invokeinterface #190,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+       130: invokevirtual #196                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V\n        133: aload_0\n-       134: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       137: invokevirtual #63                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongNameEntry:()Z\n+       134: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       137: invokevirtual #200                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongNameEntry:()Z\n        140: ifeq          171\n        143: aload_0\n-       144: invokevirtual #60                 // Method getLongNameData:()[B\n+       144: invokevirtual #187                // Method getLongNameData:()[B\n        147: astore_2\n        148: aload_2\n        149: ifnonnull     154\n        152: aconst_null\n        153: areturn\n        154: aload_0\n-       155: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       155: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n        158: aload_0\n-       159: getfield      #18                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       159: getfield      #56                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        162: aload_2\n-       163: invokeinterface #61,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-       168: invokevirtual #64                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n+       163: invokeinterface #190,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+       168: invokevirtual #203                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n        171: aload_0\n-       172: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       175: invokevirtual #65                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n+       172: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       175: invokevirtual #206                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n        178: ifeq          185\n        181: aload_0\n-       182: invokespecial #66                 // Method readGlobalPaxHeaders:()V\n+       182: invokespecial #209                // Method readGlobalPaxHeaders:()V\n        185: aload_0\n-       186: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       189: invokevirtual #67                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z\n+       186: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       189: invokevirtual #212                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z\n        192: ifeq          202\n        195: aload_0\n-       196: invokespecial #68                 // Method paxHeaders:()V\n+       196: invokespecial #215                // Method paxHeaders:()V\n        199: goto          226\n        202: aload_0\n-       203: getfield      #10                 // Field globalPaxHeaders:Ljava/util/Map;\n-       206: invokeinterface #69,  1           // InterfaceMethod java/util/Map.isEmpty:()Z\n+       203: getfield      #27                 // Field globalPaxHeaders:Ljava/util/Map;\n+       206: invokeinterface #218,  1          // InterfaceMethod java/util/Map.isEmpty:()Z\n        211: ifne          226\n        214: aload_0\n        215: aload_0\n-       216: getfield      #10                 // Field globalPaxHeaders:Ljava/util/Map;\n+       216: getfield      #27                 // Field globalPaxHeaders:Ljava/util/Map;\n        219: aload_0\n-       220: getfield      #13                 // Field globalSparseHeaders:Ljava/util/List;\n-       223: invokespecial #70                 // Method applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n+       220: getfield      #34                 // Field globalSparseHeaders:Ljava/util/List;\n+       223: invokespecial #223                // Method applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n        226: aload_0\n-       227: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       230: invokevirtual #71                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z\n+       227: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       230: invokevirtual #227                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z\n        233: ifeq          240\n        236: aload_0\n-       237: invokespecial #72                 // Method readOldGNUSparse:()V\n+       237: invokespecial #230                // Method readOldGNUSparse:()V\n        240: aload_0\n        241: aload_0\n-       242: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       245: invokevirtual #57                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-       248: putfield      #58                 // Field entrySize:J\n+       242: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       245: invokevirtual #178                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+       248: putfield      #181                // Field entrySize:J\n        251: aload_0\n-       252: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       252: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n        255: areturn\n       Exception table:\n          from    to  target type\n             44    64    67   Class java/lang/IllegalArgumentException\n       LineNumberTable:\n         line 348: 0\n         line 349: 7\n@@ -1261,56 +1261,56 @@\n \n   private void skipRecordPadding() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=7, args_size=1\n          0: aload_0\n-         1: invokespecial #28                 // Method isDirectory:()Z\n+         1: invokespecial #94                 // Method isDirectory:()Z\n          4: ifne          73\n          7: aload_0\n-         8: getfield      #58                 // Field entrySize:J\n+         8: getfield      #181                // Field entrySize:J\n         11: lconst_0\n         12: lcmp\n         13: ifle          73\n         16: aload_0\n-        17: getfield      #58                 // Field entrySize:J\n+        17: getfield      #181                // Field entrySize:J\n         20: aload_0\n-        21: getfield      #19                 // Field recordSize:I\n+        21: getfield      #60                 // Field recordSize:I\n         24: i2l\n         25: lrem\n         26: lconst_0\n         27: lcmp\n         28: ifeq          73\n         31: aload_0\n-        32: getfield      #58                 // Field entrySize:J\n+        32: getfield      #181                // Field entrySize:J\n         35: aload_0\n-        36: getfield      #19                 // Field recordSize:I\n+        36: getfield      #60                 // Field recordSize:I\n         39: i2l\n         40: ldiv\n         41: lconst_1\n         42: ladd\n         43: lstore_1\n         44: lload_1\n         45: aload_0\n-        46: getfield      #19                 // Field recordSize:I\n+        46: getfield      #60                 // Field recordSize:I\n         49: i2l\n         50: lmul\n         51: aload_0\n-        52: getfield      #58                 // Field entrySize:J\n+        52: getfield      #181                // Field entrySize:J\n         55: lsub\n         56: lstore_3\n         57: aload_0\n-        58: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n+        58: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n         61: lload_3\n-        62: invokestatic  #38                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+        62: invokestatic  #125                // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n         65: lstore        5\n         67: aload_0\n         68: lload         5\n-        70: invokevirtual #40                 // Method count:(J)V\n+        70: invokevirtual #135                // Method count:(J)V\n         73: return\n       LineNumberTable:\n         line 427: 0\n         line 428: 31\n         line 429: 44\n         line 430: 57\n         line 431: 67\n@@ -1322,44 +1322,44 @@\n       throws java.io.IOException\n \n   protected byte[] getLongNameData() throws java.io.IOException;\n     descriptor: ()[B\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=5, locals=5, args_size=1\n-         0: new           #73                 // class java/io/ByteArrayOutputStream\n+         0: new           #233                // class java/io/ByteArrayOutputStream\n          3: dup\n-         4: invokespecial #74                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+         4: invokespecial #235                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n          7: astore_1\n          8: iconst_0\n          9: istore_2\n         10: aload_0\n         11: aload_0\n-        12: getfield      #7                  // Field smallBuf:[B\n-        15: invokevirtual #75                 // Method read:([B)I\n+        12: getfield      #20                 // Field smallBuf:[B\n+        15: invokevirtual #236                // Method read:([B)I\n         18: dup\n         19: istore_2\n         20: iflt          36\n         23: aload_1\n         24: aload_0\n-        25: getfield      #7                  // Field smallBuf:[B\n+        25: getfield      #20                 // Field smallBuf:[B\n         28: iconst_0\n         29: iload_2\n-        30: invokevirtual #76                 // Method java/io/ByteArrayOutputStream.write:([BII)V\n+        30: invokevirtual #240                // Method java/io/ByteArrayOutputStream.write:([BII)V\n         33: goto          10\n         36: aload_0\n-        37: invokevirtual #77                 // Method getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+        37: invokevirtual #244                // Method getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n         40: pop\n         41: aload_0\n-        42: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        42: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         45: ifnonnull     50\n         48: aconst_null\n         49: areturn\n         50: aload_1\n-        51: invokevirtual #78                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n+        51: invokevirtual #248                // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n         54: astore_3\n         55: aload_3\n         56: arraylength\n         57: istore_2\n         58: iload_2\n         59: ifle          76\n         62: aload_3\n@@ -1378,15 +1378,15 @@\n         83: newarray       byte\n         85: astore        4\n         87: aload_3\n         88: iconst_0\n         89: aload         4\n         91: iconst_0\n         92: iload_2\n-        93: invokestatic  #79                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        93: invokestatic  #251                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         96: aload         4\n         98: astore_3\n         99: aload_3\n        100: areturn\n       LineNumberTable:\n         line 443: 0\n         line 444: 8\n@@ -1420,30 +1420,30 @@\n \n   private byte[] getRecord() throws java.io.IOException;\n     descriptor: ()[B\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokevirtual #80                 // Method readRecord:()[B\n+         1: invokevirtual #257                // Method readRecord:()[B\n          4: astore_1\n          5: aload_0\n          6: aload_0\n          7: aload_1\n-         8: invokevirtual #81                 // Method isEOFRecord:([B)Z\n-        11: invokevirtual #82                 // Method setAtEOF:(Z)V\n+         8: invokevirtual #260                // Method isEOFRecord:([B)Z\n+        11: invokevirtual #264                // Method setAtEOF:(Z)V\n         14: aload_0\n-        15: invokevirtual #45                 // Method isAtEOF:()Z\n+        15: invokevirtual #152                // Method isAtEOF:()Z\n         18: ifeq          35\n         21: aload_1\n         22: ifnull        35\n         25: aload_0\n-        26: invokespecial #83                 // Method tryToConsumeSecondEOFRecord:()V\n+        26: invokespecial #268                // Method tryToConsumeSecondEOFRecord:()V\n         29: aload_0\n-        30: invokespecial #84                 // Method consumeRemainderOfLastBlock:()V\n+        30: invokespecial #271                // Method consumeRemainderOfLastBlock:()V\n         33: aconst_null\n         34: astore_1\n         35: aload_1\n         36: areturn\n       LineNumberTable:\n         line 483: 0\n         line 484: 5\n@@ -1464,16 +1464,16 @@\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n          1: ifnull        15\n          4: aload_1\n          5: aload_0\n-         6: getfield      #19                 // Field recordSize:I\n-         9: invokestatic  #85                 // Method org/apache/commons/compress/utils/ArchiveUtils.isArrayZero:([BI)Z\n+         6: getfield      #60                 // Field recordSize:I\n+         9: invokestatic  #274                // Method org/apache/commons/compress/utils/ArchiveUtils.isArrayZero:([BI)Z\n         12: ifeq          19\n         15: iconst_1\n         16: goto          20\n         19: iconst_0\n         20: ireturn\n       LineNumberTable:\n         line 501: 0\n@@ -1485,28 +1485,28 @@\n \n   protected byte[] readRecord() throws java.io.IOException;\n     descriptor: ()[B\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=2, locals=3, args_size=1\n          0: aload_0\n-         1: getfield      #19                 // Field recordSize:I\n+         1: getfield      #60                 // Field recordSize:I\n          4: newarray       byte\n          6: astore_1\n          7: aload_0\n-         8: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n+         8: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n         11: aload_1\n-        12: invokestatic  #86                 // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[B)I\n+        12: invokestatic  #280                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[B)I\n         15: istore_2\n         16: aload_0\n         17: iload_2\n-        18: invokevirtual #87                 // Method count:(I)V\n+        18: invokevirtual #284                // Method count:(I)V\n         21: iload_2\n         22: aload_0\n-        23: getfield      #19                 // Field recordSize:I\n+        23: getfield      #60                 // Field recordSize:I\n         26: if_icmpeq     31\n         29: aconst_null\n         30: areturn\n         31: aload_1\n         32: areturn\n       LineNumberTable:\n         line 512: 0\n@@ -1527,171 +1527,171 @@\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n          1: aload_0\n          2: aload_0\n          3: aload_0\n-         4: getfield      #13                 // Field globalSparseHeaders:Ljava/util/List;\n-         7: invokevirtual #88                 // Method parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;)Ljava/util/Map;\n-        10: putfield      #10                 // Field globalPaxHeaders:Ljava/util/Map;\n+         4: getfield      #34                 // Field globalSparseHeaders:Ljava/util/List;\n+         7: invokevirtual #287                // Method parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;)Ljava/util/Map;\n+        10: putfield      #27                 // Field globalPaxHeaders:Ljava/util/Map;\n         13: aload_0\n-        14: invokevirtual #77                 // Method getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+        14: invokevirtual #244                // Method getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n         17: pop\n         18: return\n       LineNumberTable:\n         line 524: 0\n         line 525: 13\n         line 526: 18\n     Exceptions:\n       throws java.io.IOException\n \n   private void paxHeaders() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=3, args_size=1\n-         0: new           #11                 // class java/util/ArrayList\n+         0: new           #31                 // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #12                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #33                 // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n          9: aload_0\n         10: aload_1\n-        11: invokevirtual #88                 // Method parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;)Ljava/util/Map;\n+        11: invokevirtual #287                // Method parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;)Ljava/util/Map;\n         14: astore_2\n         15: aload_2\n-        16: ldc           #89                 // String GNU.sparse.map\n-        18: invokeinterface #90,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-        23: ifeq          42\n-        26: aload_0\n-        27: aload_2\n-        28: ldc           #89                 // String GNU.sparse.map\n-        30: invokeinterface #91,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-        35: checkcast     #92                 // class java/lang/String\n-        38: invokespecial #93                 // Method parsePAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-        41: astore_1\n-        42: aload_0\n-        43: invokevirtual #77                 // Method getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-        46: pop\n-        47: aload_0\n-        48: aload_2\n-        49: aload_1\n-        50: invokespecial #70                 // Method applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n-        53: aload_0\n-        54: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        57: invokevirtual #94                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxGNU1XSparse:()Z\n-        60: ifeq          76\n-        63: aload_0\n-        64: invokespecial #95                 // Method parsePAX1XSparseHeaders:()Ljava/util/List;\n-        67: astore_1\n-        68: aload_0\n-        69: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        72: aload_1\n-        73: invokevirtual #96                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n-        76: aload_0\n-        77: invokespecial #97                 // Method buildSparseInputStreams:()V\n-        80: return\n+        16: ldc_w         #291                // String GNU.sparse.map\n+        19: invokeinterface #293,  2          // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+        24: ifeq          44\n+        27: aload_0\n+        28: aload_2\n+        29: ldc_w         #291                // String GNU.sparse.map\n+        32: invokeinterface #297,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+        37: checkcast     #300                // class java/lang/String\n+        40: invokespecial #302                // Method parsePAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+        43: astore_1\n+        44: aload_0\n+        45: invokevirtual #244                // Method getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+        48: pop\n+        49: aload_0\n+        50: aload_2\n+        51: aload_1\n+        52: invokespecial #223                // Method applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n+        55: aload_0\n+        56: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        59: invokevirtual #306                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxGNU1XSparse:()Z\n+        62: ifeq          78\n+        65: aload_0\n+        66: invokespecial #309                // Method parsePAX1XSparseHeaders:()Ljava/util/List;\n+        69: astore_1\n+        70: aload_0\n+        71: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        74: aload_1\n+        75: invokevirtual #313                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n+        78: aload_0\n+        79: invokespecial #317                // Method buildSparseInputStreams:()V\n+        82: return\n       LineNumberTable:\n         line 554: 0\n         line 555: 8\n         line 558: 15\n-        line 559: 26\n-        line 561: 42\n-        line 562: 47\n-        line 565: 53\n-        line 566: 63\n-        line 567: 68\n-        line 572: 76\n-        line 573: 80\n+        line 559: 27\n+        line 561: 44\n+        line 562: 49\n+        line 565: 55\n+        line 566: 65\n+        line 567: 70\n+        line 572: 78\n+        line 573: 82\n       StackMapTable: number_of_entries = 2\n         frame_type = 253 /* append */\n-          offset_delta = 42\n+          offset_delta = 44\n           locals = [ class java/util/List, class java/util/Map ]\n         frame_type = 33 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   private java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parsePAX01SparseHeaders(java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;)Ljava/util/List;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=9, args_size=2\n-         0: new           #11                 // class java/util/ArrayList\n+         0: new           #31                 // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #12                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #33                 // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_2\n          8: aload_1\n-         9: ldc           #98                 // String ,\n-        11: invokevirtual #99                 // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n-        14: astore_3\n-        15: iconst_0\n-        16: istore        4\n-        18: iload         4\n-        20: aload_3\n-        21: arraylength\n-        22: if_icmpge     69\n-        25: aload_3\n-        26: iload         4\n-        28: aaload\n-        29: invokestatic  #100                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n-        32: lstore        5\n-        34: aload_3\n-        35: iload         4\n-        37: iconst_1\n-        38: iadd\n-        39: aaload\n-        40: invokestatic  #100                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n-        43: lstore        7\n-        45: aload_2\n-        46: new           #101                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-        49: dup\n-        50: lload         5\n-        52: lload         7\n-        54: invokespecial #102                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-        57: invokeinterface #103,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-        62: pop\n-        63: iinc          4, 2\n-        66: goto          18\n-        69: aload_2\n-        70: areturn\n+         9: ldc_w         #320                // String ,\n+        12: invokevirtual #322                // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n+        15: astore_3\n+        16: iconst_0\n+        17: istore        4\n+        19: iload         4\n+        21: aload_3\n+        22: arraylength\n+        23: if_icmpge     70\n+        26: aload_3\n+        27: iload         4\n+        29: aaload\n+        30: invokestatic  #326                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n+        33: lstore        5\n+        35: aload_3\n+        36: iload         4\n+        38: iconst_1\n+        39: iadd\n+        40: aaload\n+        41: invokestatic  #326                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n+        44: lstore        7\n+        46: aload_2\n+        47: new           #330                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+        50: dup\n+        51: lload         5\n+        53: lload         7\n+        55: invokespecial #332                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+        58: invokeinterface #335,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        63: pop\n+        64: iinc          4, 2\n+        67: goto          19\n+        70: aload_2\n+        71: areturn\n       LineNumberTable:\n         line 585: 0\n         line 586: 8\n-        line 588: 15\n-        line 589: 25\n-        line 590: 34\n-        line 591: 45\n-        line 588: 63\n-        line 594: 69\n+        line 588: 16\n+        line 589: 26\n+        line 590: 35\n+        line 591: 46\n+        line 588: 64\n+        line 594: 70\n       StackMapTable: number_of_entries = 2\n         frame_type = 254 /* append */\n-          offset_delta = 18\n+          offset_delta = 19\n           locals = [ class java/util/List, class \"[Ljava/lang/String;\", int ]\n         frame_type = 250 /* chop */\n           offset_delta = 50\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #244                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #517                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   private java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parsePAX1XSparseHeaders() throws java.io.IOException;\n     descriptor: ()Ljava/util/List;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=11, args_size=1\n-         0: new           #11                 // class java/util/ArrayList\n+         0: new           #31                 // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #12                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #33                 // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_1\n          8: lconst_0\n          9: lstore_2\n         10: aload_0\n         11: aload_0\n-        12: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n-        15: invokespecial #104                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+        12: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n+        15: invokespecial #338                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n         18: astore        4\n         20: aload         4\n         22: iconst_0\n         23: laload\n         24: lstore        5\n         26: lload_2\n         27: aload         4\n@@ -1705,65 +1705,65 @@\n         37: lsub\n         38: lstore        5\n         40: lconst_0\n         41: lcmp\n         42: ifle          112\n         45: aload_0\n         46: aload_0\n-        47: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n-        50: invokespecial #104                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+        47: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n+        50: invokespecial #338                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n         53: astore        4\n         55: aload         4\n         57: iconst_0\n         58: laload\n         59: lstore        7\n         61: lload_2\n         62: aload         4\n         64: iconst_1\n         65: laload\n         66: ladd\n         67: lstore_2\n         68: aload_0\n         69: aload_0\n-        70: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n-        73: invokespecial #104                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+        70: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n+        73: invokespecial #338                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n         76: astore        4\n         78: aload         4\n         80: iconst_0\n         81: laload\n         82: lstore        9\n         84: lload_2\n         85: aload         4\n         87: iconst_1\n         88: laload\n         89: ladd\n         90: lstore_2\n         91: aload_1\n-        92: new           #101                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+        92: new           #330                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n         95: dup\n         96: lload         7\n         98: lload         9\n-       100: invokespecial #102                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       103: invokeinterface #103,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       100: invokespecial #332                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       103: invokeinterface #335,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n        108: pop\n        109: goto          33\n        112: aload_0\n-       113: getfield      #19                 // Field recordSize:I\n+       113: getfield      #60                 // Field recordSize:I\n        116: i2l\n        117: lload_2\n        118: aload_0\n-       119: getfield      #19                 // Field recordSize:I\n+       119: getfield      #60                 // Field recordSize:I\n        122: i2l\n        123: lrem\n        124: lsub\n        125: lstore        7\n        127: aload_0\n-       128: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n+       128: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n        131: lload         7\n-       133: invokestatic  #38                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+       133: invokestatic  #125                // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n        136: pop2\n        137: aload_1\n        138: areturn\n       LineNumberTable:\n         line 608: 0\n         line 609: 8\n         line 611: 10\n@@ -1786,259 +1786,259 @@\n           offset_delta = 33\n           locals = [ class org/apache/commons/compress/archivers/tar/TarArchiveInputStream, class java/util/List, long, class \"[J\", long ]\n           stack = []\n         frame_type = 251 /* same_frame_extended */\n           offset_delta = 78\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #248                         // ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #520                         // ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   private long[] readLineOfNumberForPax1X(java.io.InputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;)[J\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=7, args_size=2\n          0: lconst_0\n          1: lstore_3\n          2: lconst_0\n          3: lstore        5\n          5: aload_1\n-         6: invokevirtual #105                // Method java/io/InputStream.read:()I\n+         6: invokevirtual #342                // Method java/io/InputStream.read:()I\n          9: dup\n         10: istore_2\n         11: bipush        10\n-        13: if_icmpeq     52\n+        13: if_icmpeq     53\n         16: lload         5\n         18: lconst_1\n         19: ladd\n         20: lstore        5\n         22: iload_2\n         23: iconst_m1\n-        24: if_icmpne     37\n-        27: new           #54                 // class java/io/IOException\n+        24: if_icmpne     38\n+        27: new           #171                // class java/io/IOException\n         30: dup\n-        31: ldc           #106                // String Unexpected EOF when reading parse information of 1.X PAX format\n-        33: invokespecial #107                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        36: athrow\n-        37: lload_3\n-        38: ldc2_w        #108                // long 10l\n-        41: lmul\n-        42: iload_2\n-        43: bipush        48\n-        45: isub\n-        46: i2l\n-        47: ladd\n-        48: lstore_3\n-        49: goto          5\n-        52: lload         5\n-        54: lconst_1\n-        55: ladd\n-        56: lstore        5\n-        58: iconst_2\n-        59: newarray       long\n-        61: dup\n-        62: iconst_0\n-        63: lload_3\n-        64: lastore\n-        65: dup\n-        66: iconst_1\n-        67: lload         5\n-        69: lastore\n-        70: areturn\n+        31: ldc_w         #344                // String Unexpected EOF when reading parse information of 1.X PAX format\n+        34: invokespecial #346                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        37: athrow\n+        38: lload_3\n+        39: ldc2_w        #348                // long 10l\n+        42: lmul\n+        43: iload_2\n+        44: bipush        48\n+        46: isub\n+        47: i2l\n+        48: ladd\n+        49: lstore_3\n+        50: goto          5\n+        53: lload         5\n+        55: lconst_1\n+        56: ladd\n+        57: lstore        5\n+        59: iconst_2\n+        60: newarray       long\n+        62: dup\n+        63: iconst_0\n+        64: lload_3\n+        65: lastore\n+        66: dup\n+        67: iconst_1\n+        68: lload         5\n+        70: lastore\n+        71: areturn\n       LineNumberTable:\n         line 641: 0\n         line 642: 2\n         line 644: 5\n         line 645: 16\n         line 646: 22\n         line 647: 27\n-        line 649: 37\n-        line 651: 52\n-        line 653: 58\n+        line 649: 38\n+        line 651: 53\n+        line 653: 59\n       StackMapTable: number_of_entries = 3\n         frame_type = 254 /* append */\n           offset_delta = 5\n           locals = [ top, long, long ]\n         frame_type = 255 /* full_frame */\n-          offset_delta = 31\n+          offset_delta = 32\n           locals = [ class org/apache/commons/compress/archivers/tar/TarArchiveInputStream, class java/io/InputStream, int, long, long ]\n           stack = []\n         frame_type = 14 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   java.util.Map<java.lang.String, java.lang.String> parsePaxHeaders(java.io.InputStream, java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;Ljava/util/List;)Ljava/util/Map;\n     flags: (0x0000)\n     Code:\n       stack=7, locals=14, args_size=3\n-         0: new           #8                  // class java/util/HashMap\n+         0: new           #24                 // class java/util/HashMap\n          3: dup\n          4: aload_0\n-         5: getfield      #10                 // Field globalPaxHeaders:Ljava/util/Map;\n-         8: invokespecial #110                // Method java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n+         5: getfield      #27                 // Field globalPaxHeaders:Ljava/util/Map;\n+         8: invokespecial #350                // Method java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n         11: astore_3\n         12: aconst_null\n         13: astore        4\n         15: iconst_0\n         16: istore        6\n         18: iconst_0\n         19: istore        7\n         21: aload_1\n-        22: invokevirtual #105                // Method java/io/InputStream.read:()I\n+        22: invokevirtual #342                // Method java/io/InputStream.read:()I\n         25: dup\n         26: istore        5\n         28: iconst_m1\n-        29: if_icmpeq     311\n+        29: if_icmpeq     316\n         32: iinc          7, 1\n         35: iload         5\n         37: bipush        10\n         39: if_icmpne     45\n-        42: goto          311\n+        42: goto          316\n         45: iload         5\n         47: bipush        32\n-        49: if_icmpne     291\n-        52: new           #73                 // class java/io/ByteArrayOutputStream\n+        49: if_icmpne     296\n+        52: new           #233                // class java/io/ByteArrayOutputStream\n         55: dup\n-        56: invokespecial #74                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+        56: invokespecial #235                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n         59: astore        8\n         61: aload_1\n-        62: invokevirtual #105                // Method java/io/InputStream.read:()I\n+        62: invokevirtual #342                // Method java/io/InputStream.read:()I\n         65: dup\n         66: istore        5\n         68: iconst_m1\n-        69: if_icmpeq     311\n+        69: if_icmpeq     316\n         72: iinc          7, 1\n         75: iload         5\n         77: bipush        61\n-        79: if_icmpne     280\n+        79: if_icmpne     285\n         82: aload         8\n-        84: ldc           #112                // String UTF-8\n-        86: invokevirtual #113                // Method java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n-        89: astore        9\n-        91: iload         6\n-        93: iload         7\n-        95: isub\n-        96: istore        10\n-        98: iload         10\n-       100: iconst_1\n-       101: if_icmpne     116\n-       104: aload_3\n-       105: aload         9\n-       107: invokeinterface #114,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-       112: pop\n-       113: goto          311\n-       116: iload         10\n-       118: newarray       byte\n-       120: astore        11\n-       122: aload_1\n-       123: aload         11\n-       125: invokestatic  #86                 // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[B)I\n-       128: istore        12\n-       130: iload         12\n-       132: iload         10\n-       134: if_icmpeq     154\n-       137: new           #54                 // class java/io/IOException\n-       140: dup\n-       141: iload         10\n-       143: iload         12\n-       145: invokedynamic #115,  0            // InvokeDynamic #0:makeConcatWithConstants:(II)Ljava/lang/String;\n-       150: invokespecial #107                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       153: athrow\n-       154: new           #92                 // class java/lang/String\n-       157: dup\n-       158: aload         11\n-       160: iconst_0\n-       161: iload         10\n-       163: iconst_1\n-       164: isub\n-       165: ldc           #112                // String UTF-8\n-       167: invokespecial #116                // Method java/lang/String.\"<init>\":([BIILjava/lang/String;)V\n-       170: astore        13\n-       172: aload_3\n-       173: aload         9\n-       175: aload         13\n-       177: invokeinterface #117,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-       182: pop\n-       183: aload         9\n-       185: ldc           #118                // String GNU.sparse.offset\n-       187: invokevirtual #119                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n-       190: ifeq          225\n-       193: aload         4\n-       195: ifnull        218\n-       198: aload_2\n-       199: new           #101                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       202: dup\n-       203: aload         4\n-       205: invokevirtual #120                // Method java/lang/Long.longValue:()J\n-       208: lconst_0\n-       209: invokespecial #102                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       212: invokeinterface #103,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       217: pop\n-       218: aload         13\n-       220: invokestatic  #121                // Method java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-       223: astore        4\n-       225: aload         9\n-       227: ldc           #122                // String GNU.sparse.numbytes\n-       229: invokevirtual #119                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n-       232: ifeq          277\n-       235: aload         4\n-       237: ifnonnull     250\n-       240: new           #54                 // class java/io/IOException\n-       243: dup\n-       244: ldc           #123                // String Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-       246: invokespecial #107                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       249: athrow\n-       250: aload_2\n-       251: new           #101                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       254: dup\n-       255: aload         4\n-       257: invokevirtual #120                // Method java/lang/Long.longValue:()J\n-       260: aload         13\n-       262: invokestatic  #100                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n-       265: invokespecial #102                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       268: invokeinterface #103,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       273: pop\n-       274: aconst_null\n-       275: astore        4\n-       277: goto          311\n-       280: aload         8\n-       282: iload         5\n-       284: i2b\n-       285: invokevirtual #124                // Method java/io/ByteArrayOutputStream.write:(I)V\n-       288: goto          61\n-       291: iload         6\n-       293: bipush        10\n-       295: imul\n-       296: istore        6\n-       298: iload         6\n-       300: iload         5\n-       302: bipush        48\n-       304: isub\n-       305: iadd\n-       306: istore        6\n-       308: goto          21\n-       311: iload         5\n-       313: iconst_m1\n-       314: if_icmpne     320\n-       317: goto          323\n-       320: goto          15\n-       323: aload         4\n-       325: ifnull        348\n-       328: aload_2\n-       329: new           #101                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       332: dup\n-       333: aload         4\n-       335: invokevirtual #120                // Method java/lang/Long.longValue:()J\n-       338: lconst_0\n-       339: invokespecial #102                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       342: invokeinterface #103,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       347: pop\n-       348: aload_3\n-       349: areturn\n+        84: ldc_w         #355                // String UTF-8\n+        87: invokevirtual #357                // Method java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n+        90: astore        9\n+        92: iload         6\n+        94: iload         7\n+        96: isub\n+        97: istore        10\n+        99: iload         10\n+       101: iconst_1\n+       102: if_icmpne     117\n+       105: aload_3\n+       106: aload         9\n+       108: invokeinterface #361,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+       113: pop\n+       114: goto          316\n+       117: iload         10\n+       119: newarray       byte\n+       121: astore        11\n+       123: aload_1\n+       124: aload         11\n+       126: invokestatic  #280                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[B)I\n+       129: istore        12\n+       131: iload         12\n+       133: iload         10\n+       135: if_icmpeq     155\n+       138: new           #171                // class java/io/IOException\n+       141: dup\n+       142: iload         10\n+       144: iload         12\n+       146: invokedynamic #364,  0            // InvokeDynamic #0:makeConcatWithConstants:(II)Ljava/lang/String;\n+       151: invokespecial #346                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       154: athrow\n+       155: new           #300                // class java/lang/String\n+       158: dup\n+       159: aload         11\n+       161: iconst_0\n+       162: iload         10\n+       164: iconst_1\n+       165: isub\n+       166: ldc_w         #355                // String UTF-8\n+       169: invokespecial #368                // Method java/lang/String.\"<init>\":([BIILjava/lang/String;)V\n+       172: astore        13\n+       174: aload_3\n+       175: aload         9\n+       177: aload         13\n+       179: invokeinterface #371,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+       184: pop\n+       185: aload         9\n+       187: ldc_w         #375                // String GNU.sparse.offset\n+       190: invokevirtual #377                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+       193: ifeq          228\n+       196: aload         4\n+       198: ifnull        221\n+       201: aload_2\n+       202: new           #330                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       205: dup\n+       206: aload         4\n+       208: invokevirtual #380                // Method java/lang/Long.longValue:()J\n+       211: lconst_0\n+       212: invokespecial #332                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       215: invokeinterface #335,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       220: pop\n+       221: aload         13\n+       223: invokestatic  #383                // Method java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+       226: astore        4\n+       228: aload         9\n+       230: ldc_w         #387                // String GNU.sparse.numbytes\n+       233: invokevirtual #377                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+       236: ifeq          282\n+       239: aload         4\n+       241: ifnonnull     255\n+       244: new           #171                // class java/io/IOException\n+       247: dup\n+       248: ldc_w         #389                // String Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+       251: invokespecial #346                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       254: athrow\n+       255: aload_2\n+       256: new           #330                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       259: dup\n+       260: aload         4\n+       262: invokevirtual #380                // Method java/lang/Long.longValue:()J\n+       265: aload         13\n+       267: invokestatic  #326                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n+       270: invokespecial #332                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       273: invokeinterface #335,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       278: pop\n+       279: aconst_null\n+       280: astore        4\n+       282: goto          316\n+       285: aload         8\n+       287: iload         5\n+       289: i2b\n+       290: invokevirtual #391                // Method java/io/ByteArrayOutputStream.write:(I)V\n+       293: goto          61\n+       296: iload         6\n+       298: bipush        10\n+       300: imul\n+       301: istore        6\n+       303: iload         6\n+       305: iload         5\n+       307: bipush        48\n+       309: isub\n+       310: iadd\n+       311: istore        6\n+       313: goto          21\n+       316: iload         5\n+       318: iconst_m1\n+       319: if_icmpne     325\n+       322: goto          328\n+       325: goto          15\n+       328: aload         4\n+       330: ifnull        353\n+       333: aload_2\n+       334: new           #330                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       337: dup\n+       338: aload         4\n+       340: invokevirtual #380                // Method java/lang/Long.longValue:()J\n+       343: lconst_0\n+       344: invokespecial #332                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       347: invokeinterface #335,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       352: pop\n+       353: aload_3\n+       354: areturn\n       LineNumberTable:\n         line 680: 0\n         line 681: 12\n         line 685: 15\n         line 686: 18\n         line 687: 21\n         line 688: 32\n@@ -2046,42 +2046,42 @@\n         line 690: 42\n         line 691: 45\n         line 693: 52\n         line 694: 61\n         line 695: 72\n         line 696: 75\n         line 697: 82\n-        line 699: 91\n-        line 700: 98\n-        line 701: 104\n-        line 703: 116\n-        line 704: 122\n-        line 705: 130\n-        line 706: 137\n-        line 713: 154\n-        line 715: 172\n-        line 718: 183\n-        line 719: 193\n-        line 721: 198\n-        line 723: 218\n-        line 727: 225\n-        line 728: 235\n-        line 729: 240\n-        line 732: 250\n-        line 733: 274\n-        line 736: 277\n-        line 738: 280\n-        line 742: 291\n-        line 743: 298\n-        line 745: 311\n-        line 746: 317\n-        line 748: 320\n-        line 749: 323\n-        line 751: 328\n-        line 753: 348\n+        line 699: 92\n+        line 700: 99\n+        line 701: 105\n+        line 703: 117\n+        line 704: 123\n+        line 705: 131\n+        line 706: 138\n+        line 713: 155\n+        line 715: 174\n+        line 718: 185\n+        line 719: 196\n+        line 721: 201\n+        line 723: 221\n+        line 727: 228\n+        line 728: 239\n+        line 729: 244\n+        line 732: 255\n+        line 733: 279\n+        line 736: 282\n+        line 738: 285\n+        line 742: 296\n+        line 743: 303\n+        line 745: 316\n+        line 746: 322\n+        line 748: 325\n+        line 749: 328\n+        line 751: 333\n+        line 753: 353\n       StackMapTable: number_of_entries = 16\n         frame_type = 253 /* append */\n           offset_delta = 15\n           locals = [ class java/util/Map, class java/lang/Long ]\n         frame_type = 254 /* append */\n           offset_delta = 5\n           locals = [ top, int, int ]\n@@ -2089,94 +2089,94 @@\n           offset_delta = 23\n           locals = [ class org/apache/commons/compress/archivers/tar/TarArchiveInputStream, class java/io/InputStream, class java/util/List, class java/util/Map, class java/lang/Long, int, int, int ]\n           stack = []\n         frame_type = 252 /* append */\n           offset_delta = 15\n           locals = [ class java/io/ByteArrayOutputStream ]\n         frame_type = 253 /* append */\n-          offset_delta = 54\n+          offset_delta = 55\n           locals = [ class java/lang/String, int ]\n         frame_type = 253 /* append */\n           offset_delta = 37\n           locals = [ class \"[B\", int ]\n         frame_type = 252 /* append */\n-          offset_delta = 63\n+          offset_delta = 65\n           locals = [ class java/lang/String ]\n         frame_type = 6 /* same */\n-        frame_type = 24 /* same */\n+        frame_type = 26 /* same */\n         frame_type = 248 /* chop */\n           offset_delta = 26\n         frame_type = 249 /* chop */\n           offset_delta = 2\n         frame_type = 250 /* chop */\n           offset_delta = 10\n         frame_type = 19 /* same */\n         frame_type = 248 /* chop */\n           offset_delta = 8\n         frame_type = 2 /* same */\n         frame_type = 24 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #253                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #521                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n \n   private void applyPaxHeadersToCurrentEntry(java.util.Map<java.lang.String, java.lang.String>, java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>);\n     descriptor: (Ljava/util/Map;Ljava/util/List;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_0\n-         1: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         1: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n          4: aload_1\n-         5: invokevirtual #125                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n+         5: invokevirtual #393                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n          8: aload_0\n-         9: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         9: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         12: aload_2\n-        13: invokevirtual #96                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n+        13: invokevirtual #313                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n         16: return\n       LineNumberTable:\n         line 757: 0\n         line 758: 8\n         line 759: 16\n-    Signature: #256                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)V\n+    Signature: #522                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)V\n \n   private void readOldGNUSparse() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=3, args_size=1\n          0: aload_0\n-         1: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-         4: invokevirtual #126                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:()Z\n+         1: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         4: invokevirtual #396                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:()Z\n          7: ifeq          60\n         10: aload_0\n-        11: invokespecial #50                 // Method getRecord:()[B\n+        11: invokespecial #162                // Method getRecord:()[B\n         14: astore_2\n         15: aload_2\n         16: ifnonnull     27\n         19: aload_0\n         20: aconst_null\n-        21: putfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        21: putfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         24: goto          60\n-        27: new           #127                // class org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n+        27: new           #399                // class org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n         30: dup\n         31: aload_2\n-        32: invokespecial #128                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.\"<init>\":([B)V\n+        32: invokespecial #401                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.\"<init>\":([B)V\n         35: astore_1\n         36: aload_0\n-        37: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        40: invokevirtual #129                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSparseHeaders:()Ljava/util/List;\n+        37: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        40: invokevirtual #404                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSparseHeaders:()Ljava/util/List;\n         43: aload_1\n-        44: invokevirtual #130                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.getSparseHeaders:()Ljava/util/List;\n-        47: invokeinterface #131,  2          // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z\n+        44: invokevirtual #407                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.getSparseHeaders:()Ljava/util/List;\n+        47: invokeinterface #408,  2          // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z\n         52: pop\n         53: aload_1\n-        54: invokevirtual #132                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.isExtended:()Z\n+        54: invokevirtual #412                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.isExtended:()Z\n         57: ifne          10\n         60: aload_0\n-        61: invokespecial #97                 // Method buildSparseInputStreams:()V\n+        61: invokespecial #317                // Method buildSparseInputStreams:()V\n         64: return\n       LineNumberTable:\n         line 768: 0\n         line 771: 10\n         line 772: 15\n         line 773: 19\n         line 774: 24\n@@ -2197,19 +2197,19 @@\n \n   private boolean isDirectory();\n     descriptor: ()Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         1: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n          4: ifnull        21\n          7: aload_0\n-         8: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        11: invokevirtual #133                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n+         8: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        11: invokevirtual #413                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n         14: ifeq          21\n         17: iconst_1\n         18: goto          22\n         21: iconst_0\n         22: ireturn\n       LineNumberTable:\n         line 787: 0\n@@ -2220,74 +2220,74 @@\n \n   public org.apache.commons.compress.archivers.ArchiveEntry getNextEntry() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #134                // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         1: invokevirtual #414                // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n          4: areturn\n       LineNumberTable:\n         line 799: 0\n     Exceptions:\n       throws java.io.IOException\n \n   private void tryToConsumeSecondEOFRecord() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=4, args_size=1\n          0: iconst_1\n          1: istore_1\n          2: aload_0\n-         3: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n-         6: invokevirtual #135                // Method java/io/InputStream.markSupported:()Z\n+         3: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n+         6: invokevirtual #418                // Method java/io/InputStream.markSupported:()Z\n          9: istore_2\n         10: iload_2\n         11: ifeq          25\n         14: aload_0\n-        15: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n+        15: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n         18: aload_0\n-        19: getfield      #19                 // Field recordSize:I\n-        22: invokevirtual #136                // Method java/io/InputStream.mark:(I)V\n+        19: getfield      #60                 // Field recordSize:I\n+        22: invokevirtual #421                // Method java/io/InputStream.mark:(I)V\n         25: aload_0\n         26: aload_0\n-        27: invokevirtual #80                 // Method readRecord:()[B\n-        30: invokevirtual #81                 // Method isEOFRecord:([B)Z\n+        27: invokevirtual #257                // Method readRecord:()[B\n+        30: invokevirtual #260                // Method isEOFRecord:([B)Z\n         33: ifne          40\n         36: iconst_1\n         37: goto          41\n         40: iconst_0\n         41: istore_1\n         42: iload_1\n         43: ifeq          96\n         46: iload_2\n         47: ifeq          96\n         50: aload_0\n         51: aload_0\n-        52: getfield      #19                 // Field recordSize:I\n+        52: getfield      #60                 // Field recordSize:I\n         55: i2l\n-        56: invokevirtual #137                // Method pushedBackBytes:(J)V\n+        56: invokevirtual #424                // Method pushedBackBytes:(J)V\n         59: aload_0\n-        60: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n-        63: invokevirtual #138                // Method java/io/InputStream.reset:()V\n+        60: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n+        63: invokevirtual #427                // Method java/io/InputStream.reset:()V\n         66: goto          96\n         69: astore_3\n         70: iload_1\n         71: ifeq          94\n         74: iload_2\n         75: ifeq          94\n         78: aload_0\n         79: aload_0\n-        80: getfield      #19                 // Field recordSize:I\n+        80: getfield      #60                 // Field recordSize:I\n         83: i2l\n-        84: invokevirtual #137                // Method pushedBackBytes:(J)V\n+        84: invokevirtual #424                // Method pushedBackBytes:(J)V\n         87: aload_0\n-        88: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n-        91: invokevirtual #138                // Method java/io/InputStream.reset:()V\n+        88: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n+        91: invokevirtual #427                // Method java/io/InputStream.reset:()V\n         94: aload_3\n         95: athrow\n         96: return\n       Exception table:\n          from    to  target type\n             25    42    69   any\n       LineNumberTable:\n@@ -2329,223 +2329,223 @@\n          0: iload_3\n          1: ifne          6\n          4: iconst_0\n          5: ireturn\n          6: iconst_0\n          7: istore        4\n          9: aload_0\n-        10: invokevirtual #45                 // Method isAtEOF:()Z\n+        10: invokevirtual #152                // Method isAtEOF:()Z\n         13: ifne          23\n         16: aload_0\n-        17: invokespecial #28                 // Method isDirectory:()Z\n+        17: invokespecial #94                 // Method isDirectory:()Z\n         20: ifeq          25\n         23: iconst_m1\n         24: ireturn\n         25: aload_0\n-        26: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        29: ifnonnull     42\n-        32: new           #139                // class java/lang/IllegalStateException\n+        26: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        29: ifnonnull     43\n+        32: new           #430                // class java/lang/IllegalStateException\n         35: dup\n-        36: ldc           #140                // String No current tar entry\n-        38: invokespecial #141                // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-        41: athrow\n-        42: aload_0\n-        43: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        46: invokevirtual #36                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n-        49: ifne          66\n-        52: aload_0\n-        53: getfield      #31                 // Field entryOffset:J\n-        56: aload_0\n-        57: getfield      #58                 // Field entrySize:J\n-        60: lcmp\n-        61: iflt          83\n-        64: iconst_m1\n-        65: ireturn\n-        66: aload_0\n-        67: getfield      #31                 // Field entryOffset:J\n-        70: aload_0\n-        71: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        74: invokevirtual #30                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n-        77: lcmp\n-        78: iflt          83\n-        81: iconst_m1\n-        82: ireturn\n-        83: iload_3\n-        84: aload_0\n-        85: invokevirtual #142                // Method available:()I\n-        88: invokestatic  #143                // Method java/lang/Math.min:(II)I\n-        91: istore_3\n-        92: aload_0\n-        93: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        96: invokevirtual #36                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n-        99: ifeq          114\n-       102: aload_0\n-       103: aload_1\n-       104: iload_2\n-       105: iload_3\n-       106: invokespecial #144                // Method readSparse:([BII)I\n-       109: istore        4\n-       111: goto          126\n-       114: aload_0\n-       115: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n-       118: aload_1\n-       119: iload_2\n-       120: iload_3\n-       121: invokevirtual #145                // Method java/io/InputStream.read:([BII)I\n-       124: istore        4\n-       126: iload         4\n-       128: iconst_m1\n-       129: if_icmpne     154\n-       132: iload_3\n-       133: ifle          146\n-       136: new           #54                 // class java/io/IOException\n-       139: dup\n-       140: ldc           #146                // String Truncated TAR archive\n-       142: invokespecial #107                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       145: athrow\n-       146: aload_0\n-       147: iconst_1\n-       148: invokevirtual #82                 // Method setAtEOF:(Z)V\n-       151: goto          172\n-       154: aload_0\n-       155: iload         4\n-       157: invokevirtual #87                 // Method count:(I)V\n-       160: aload_0\n-       161: dup\n-       162: getfield      #31                 // Field entryOffset:J\n-       165: iload         4\n-       167: i2l\n-       168: ladd\n-       169: putfield      #31                 // Field entryOffset:J\n-       172: iload         4\n-       174: ireturn\n+        36: ldc_w         #432                // String No current tar entry\n+        39: invokespecial #434                // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        42: athrow\n+        43: aload_0\n+        44: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        47: invokevirtual #116                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n+        50: ifne          67\n+        53: aload_0\n+        54: getfield      #107                // Field entryOffset:J\n+        57: aload_0\n+        58: getfield      #181                // Field entrySize:J\n+        61: lcmp\n+        62: iflt          84\n+        65: iconst_m1\n+        66: ireturn\n+        67: aload_0\n+        68: getfield      #107                // Field entryOffset:J\n+        71: aload_0\n+        72: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        75: invokevirtual #101                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n+        78: lcmp\n+        79: iflt          84\n+        82: iconst_m1\n+        83: ireturn\n+        84: iload_3\n+        85: aload_0\n+        86: invokevirtual #435                // Method available:()I\n+        89: invokestatic  #438                // Method java/lang/Math.min:(II)I\n+        92: istore_3\n+        93: aload_0\n+        94: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        97: invokevirtual #116                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n+       100: ifeq          115\n+       103: aload_0\n+       104: aload_1\n+       105: iload_2\n+       106: iload_3\n+       107: invokespecial #441                // Method readSparse:([BII)I\n+       110: istore        4\n+       112: goto          127\n+       115: aload_0\n+       116: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n+       119: aload_1\n+       120: iload_2\n+       121: iload_3\n+       122: invokevirtual #445                // Method java/io/InputStream.read:([BII)I\n+       125: istore        4\n+       127: iload         4\n+       129: iconst_m1\n+       130: if_icmpne     156\n+       133: iload_3\n+       134: ifle          148\n+       137: new           #171                // class java/io/IOException\n+       140: dup\n+       141: ldc_w         #447                // String Truncated TAR archive\n+       144: invokespecial #346                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       147: athrow\n+       148: aload_0\n+       149: iconst_1\n+       150: invokevirtual #264                // Method setAtEOF:(Z)V\n+       153: goto          174\n+       156: aload_0\n+       157: iload         4\n+       159: invokevirtual #284                // Method count:(I)V\n+       162: aload_0\n+       163: dup\n+       164: getfield      #107                // Field entryOffset:J\n+       167: iload         4\n+       169: i2l\n+       170: ladd\n+       171: putfield      #107                // Field entryOffset:J\n+       174: iload         4\n+       176: ireturn\n       LineNumberTable:\n         line 843: 0\n         line 844: 4\n         line 846: 6\n         line 848: 9\n         line 849: 23\n         line 852: 25\n         line 853: 32\n-        line 856: 42\n-        line 857: 52\n-        line 858: 64\n-        line 862: 66\n-        line 863: 81\n-        line 867: 83\n-        line 869: 92\n-        line 871: 102\n-        line 873: 114\n-        line 876: 126\n-        line 877: 132\n-        line 878: 136\n-        line 880: 146\n-        line 882: 154\n-        line 883: 160\n-        line 886: 172\n+        line 856: 43\n+        line 857: 53\n+        line 858: 65\n+        line 862: 67\n+        line 863: 82\n+        line 867: 84\n+        line 869: 93\n+        line 871: 103\n+        line 873: 115\n+        line 876: 127\n+        line 877: 133\n+        line 878: 137\n+        line 880: 148\n+        line 882: 156\n+        line 883: 162\n+        line 886: 174\n       StackMapTable: number_of_entries = 11\n         frame_type = 6 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 16\n           locals = [ int ]\n         frame_type = 1 /* same */\n-        frame_type = 16 /* same */\n+        frame_type = 17 /* same */\n         frame_type = 23 /* same */\n         frame_type = 16 /* same */\n         frame_type = 30 /* same */\n         frame_type = 11 /* same */\n-        frame_type = 19 /* same */\n+        frame_type = 20 /* same */\n         frame_type = 7 /* same */\n         frame_type = 17 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   private int readSparse(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=7, args_size=4\n          0: aload_0\n-         1: getfield      #22                 // Field sparseInputStreams:Ljava/util/List;\n+         1: getfield      #70                 // Field sparseInputStreams:Ljava/util/List;\n          4: ifnull        19\n          7: aload_0\n-         8: getfield      #22                 // Field sparseInputStreams:Ljava/util/List;\n-        11: invokeinterface #41,  1           // InterfaceMethod java/util/List.size:()I\n+         8: getfield      #70                 // Field sparseInputStreams:Ljava/util/List;\n+        11: invokeinterface #139,  1          // InterfaceMethod java/util/List.size:()I\n         16: ifne          30\n         19: aload_0\n-        20: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n+        20: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n         23: aload_1\n         24: iload_2\n         25: iload_3\n-        26: invokevirtual #145                // Method java/io/InputStream.read:([BII)I\n+        26: invokevirtual #445                // Method java/io/InputStream.read:([BII)I\n         29: ireturn\n         30: aload_0\n-        31: getfield      #43                 // Field currentSparseInputStreamIndex:I\n+        31: getfield      #145                // Field currentSparseInputStreamIndex:I\n         34: aload_0\n-        35: getfield      #22                 // Field sparseInputStreams:Ljava/util/List;\n-        38: invokeinterface #41,  1           // InterfaceMethod java/util/List.size:()I\n+        35: getfield      #70                 // Field sparseInputStreams:Ljava/util/List;\n+        38: invokeinterface #139,  1          // InterfaceMethod java/util/List.size:()I\n         43: if_icmplt     48\n         46: iconst_m1\n         47: ireturn\n         48: aload_0\n-        49: getfield      #22                 // Field sparseInputStreams:Ljava/util/List;\n+        49: getfield      #70                 // Field sparseInputStreams:Ljava/util/List;\n         52: aload_0\n-        53: getfield      #43                 // Field currentSparseInputStreamIndex:I\n-        56: invokeinterface #44,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n-        61: checkcast     #26                 // class java/io/InputStream\n+        53: getfield      #145                // Field currentSparseInputStreamIndex:I\n+        56: invokeinterface #148,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n+        61: checkcast     #89                 // class java/io/InputStream\n         64: astore        4\n         66: aload         4\n         68: aload_1\n         69: iload_2\n         70: iload_3\n-        71: invokevirtual #145                // Method java/io/InputStream.read:([BII)I\n+        71: invokevirtual #445                // Method java/io/InputStream.read:([BII)I\n         74: istore        5\n         76: aload_0\n-        77: getfield      #43                 // Field currentSparseInputStreamIndex:I\n+        77: getfield      #145                // Field currentSparseInputStreamIndex:I\n         80: aload_0\n-        81: getfield      #22                 // Field sparseInputStreams:Ljava/util/List;\n-        84: invokeinterface #41,  1           // InterfaceMethod java/util/List.size:()I\n+        81: getfield      #70                 // Field sparseInputStreams:Ljava/util/List;\n+        84: invokeinterface #139,  1          // InterfaceMethod java/util/List.size:()I\n         89: iconst_1\n         90: isub\n         91: if_icmpne     97\n         94: iload         5\n         96: ireturn\n         97: iload         5\n         99: iconst_m1\n        100: if_icmpne     121\n        103: aload_0\n        104: dup\n-       105: getfield      #43                 // Field currentSparseInputStreamIndex:I\n+       105: getfield      #145                // Field currentSparseInputStreamIndex:I\n        108: iconst_1\n        109: iadd\n-       110: putfield      #43                 // Field currentSparseInputStreamIndex:I\n+       110: putfield      #145                // Field currentSparseInputStreamIndex:I\n        113: aload_0\n        114: aload_1\n        115: iload_2\n        116: iload_3\n-       117: invokespecial #144                // Method readSparse:([BII)I\n+       117: invokespecial #441                // Method readSparse:([BII)I\n        120: ireturn\n        121: iload         5\n        123: iload_3\n        124: if_icmpge     167\n        127: aload_0\n        128: dup\n-       129: getfield      #43                 // Field currentSparseInputStreamIndex:I\n+       129: getfield      #145                // Field currentSparseInputStreamIndex:I\n        132: iconst_1\n        133: iadd\n-       134: putfield      #43                 // Field currentSparseInputStreamIndex:I\n+       134: putfield      #145                // Field currentSparseInputStreamIndex:I\n        137: aload_0\n        138: aload_1\n        139: iload_2\n        140: iload         5\n        142: iadd\n        143: iload_3\n        144: iload         5\n        146: isub\n-       147: invokespecial #144                // Method readSparse:([BII)I\n+       147: invokespecial #441                // Method readSparse:([BII)I\n        150: istore        6\n        152: iload         6\n        154: iconst_m1\n        155: if_icmpne     161\n        158: iload         5\n        160: ireturn\n        161: iload         5\n@@ -2591,21 +2591,21 @@\n \n   public boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=3, args_size=2\n          0: aload_1\n-         1: instanceof    #51                 // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+         1: instanceof    #102                // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n          4: ifeq          25\n          7: aload_1\n-         8: checkcast     #51                 // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+         8: checkcast     #102                // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n         11: astore_2\n         12: aload_2\n-        13: invokevirtual #36                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n+        13: invokevirtual #116                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n         16: ifne          23\n         19: iconst_1\n         20: goto          24\n         23: iconst_0\n         24: ireturn\n         25: iconst_0\n         26: ireturn\n@@ -2625,84 +2625,84 @@\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveEntry getCurrentEntry();\n     descriptor: ()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         1: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n          4: areturn\n       LineNumberTable:\n         line 964: 0\n \n   protected final void setCurrentEntry(org.apache.commons.compress.archivers.tar.TarArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n     flags: (0x0014) ACC_PROTECTED, ACC_FINAL\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: putfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         2: putfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n          5: return\n       LineNumberTable:\n         line 968: 0\n         line 969: 5\n \n   protected final boolean isAtEOF();\n     descriptor: ()Z\n     flags: (0x0014) ACC_PROTECTED, ACC_FINAL\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #15                 // Field hasHitEOF:Z\n+         1: getfield      #42                 // Field hasHitEOF:Z\n          4: ireturn\n       LineNumberTable:\n         line 972: 0\n \n   protected final void setAtEOF(boolean);\n     descriptor: (Z)V\n     flags: (0x0014) ACC_PROTECTED, ACC_FINAL\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: putfield      #15                 // Field hasHitEOF:Z\n+         2: putfield      #42                 // Field hasHitEOF:Z\n          5: return\n       LineNumberTable:\n         line 976: 0\n         line 977: 5\n \n   private void consumeRemainderOfLastBlock() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=5, args_size=1\n          0: aload_0\n-         1: invokevirtual #147                // Method getBytesRead:()J\n+         1: invokevirtual #449                // Method getBytesRead:()J\n          4: aload_0\n-         5: getfield      #20                 // Field blockSize:I\n+         5: getfield      #64                 // Field blockSize:I\n          8: i2l\n          9: lrem\n         10: lstore_1\n         11: lload_1\n         12: lconst_0\n         13: lcmp\n         14: ifle          37\n         17: aload_0\n-        18: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n+        18: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n         21: aload_0\n-        22: getfield      #20                 // Field blockSize:I\n+        22: getfield      #64                 // Field blockSize:I\n         25: i2l\n         26: lload_1\n         27: lsub\n-        28: invokestatic  #38                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+        28: invokestatic  #125                // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n         31: lstore_3\n         32: aload_0\n         33: lload_3\n-        34: invokevirtual #40                 // Method count:(J)V\n+        34: invokevirtual #135                // Method count:(J)V\n         37: return\n       LineNumberTable:\n         line 985: 0\n         line 986: 11\n         line 987: 17\n         line 988: 32\n         line 990: 37\n@@ -2719,209 +2719,209 @@\n     Code:\n       stack=4, locals=2, args_size=2\n          0: iload_1\n          1: sipush        265\n          4: if_icmpge     9\n          7: iconst_0\n          8: ireturn\n-         9: ldc           #148                // String ustar\\u0000\n-        11: aload_0\n-        12: sipush        257\n-        15: bipush        6\n-        17: invokestatic  #149                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n-        20: ifeq          38\n-        23: ldc           #150                // String 00\n-        25: aload_0\n-        26: sipush        263\n-        29: iconst_2\n-        30: invokestatic  #149                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n-        33: ifeq          38\n-        36: iconst_1\n-        37: ireturn\n-        38: ldc           #151                // String ustar\n-        40: aload_0\n-        41: sipush        257\n-        44: bipush        6\n-        46: invokestatic  #149                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n-        49: ifeq          80\n-        52: ldc           #152                // String  \\u0000\n-        54: aload_0\n-        55: sipush        263\n-        58: iconst_2\n-        59: invokestatic  #149                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n-        62: ifne          78\n-        65: ldc           #153                // String 0\\u0000\n-        67: aload_0\n-        68: sipush        263\n-        71: iconst_2\n-        72: invokestatic  #149                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n-        75: ifeq          80\n-        78: iconst_1\n-        79: ireturn\n-        80: ldc           #148                // String ustar\\u0000\n-        82: aload_0\n-        83: sipush        257\n-        86: bipush        6\n-        88: invokestatic  #149                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n-        91: ifeq          111\n-        94: ldc           #154                // String \\u0000\\u0000\n-        96: aload_0\n-        97: sipush        263\n-       100: iconst_2\n-       101: invokestatic  #149                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n-       104: ifeq          111\n-       107: iconst_1\n-       108: goto          112\n-       111: iconst_0\n-       112: ireturn\n+         9: ldc_w         #452                // String ustar\\u0000\n+        12: aload_0\n+        13: sipush        257\n+        16: bipush        6\n+        18: invokestatic  #454                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n+        21: ifeq          40\n+        24: ldc_w         #458                // String 00\n+        27: aload_0\n+        28: sipush        263\n+        31: iconst_2\n+        32: invokestatic  #454                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n+        35: ifeq          40\n+        38: iconst_1\n+        39: ireturn\n+        40: ldc_w         #460                // String ustar\n+        43: aload_0\n+        44: sipush        257\n+        47: bipush        6\n+        49: invokestatic  #454                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n+        52: ifeq          85\n+        55: ldc_w         #462                // String  \\u0000\n+        58: aload_0\n+        59: sipush        263\n+        62: iconst_2\n+        63: invokestatic  #454                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n+        66: ifne          83\n+        69: ldc_w         #464                // String 0\\u0000\n+        72: aload_0\n+        73: sipush        263\n+        76: iconst_2\n+        77: invokestatic  #454                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n+        80: ifeq          85\n+        83: iconst_1\n+        84: ireturn\n+        85: ldc_w         #452                // String ustar\\u0000\n+        88: aload_0\n+        89: sipush        257\n+        92: bipush        6\n+        94: invokestatic  #454                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n+        97: ifeq          118\n+       100: ldc_w         #466                // String \\u0000\\u0000\n+       103: aload_0\n+       104: sipush        263\n+       107: iconst_2\n+       108: invokestatic  #454                // Method org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n+       111: ifeq          118\n+       114: iconst_1\n+       115: goto          119\n+       118: iconst_0\n+       119: ireturn\n       LineNumberTable:\n         line 1002: 0\n         line 1003: 7\n         line 1006: 9\n-        line 1009: 30\n-        line 1012: 36\n-        line 1014: 38\n-        line 1018: 59\n-        line 1021: 72\n-        line 1025: 78\n-        line 1028: 80\n-        line 1031: 101\n-        line 1028: 112\n+        line 1009: 32\n+        line 1012: 38\n+        line 1014: 40\n+        line 1018: 63\n+        line 1021: 77\n+        line 1025: 83\n+        line 1028: 85\n+        line 1031: 108\n+        line 1028: 119\n       StackMapTable: number_of_entries = 6\n         frame_type = 9 /* same */\n-        frame_type = 28 /* same */\n-        frame_type = 39 /* same */\n-        frame_type = 1 /* same */\n         frame_type = 30 /* same */\n+        frame_type = 42 /* same */\n+        frame_type = 1 /* same */\n+        frame_type = 32 /* same */\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n \n   private void buildSparseInputStreams() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=8, locals=7, args_size=1\n          0: aload_0\n          1: iconst_m1\n-         2: putfield      #43                 // Field currentSparseInputStreamIndex:I\n+         2: putfield      #145                // Field currentSparseInputStreamIndex:I\n          5: aload_0\n-         6: new           #11                 // class java/util/ArrayList\n+         6: new           #31                 // class java/util/ArrayList\n          9: dup\n-        10: invokespecial #12                 // Method java/util/ArrayList.\"<init>\":()V\n-        13: putfield      #22                 // Field sparseInputStreams:Ljava/util/List;\n+        10: invokespecial #33                 // Method java/util/ArrayList.\"<init>\":()V\n+        13: putfield      #70                 // Field sparseInputStreams:Ljava/util/List;\n         16: aload_0\n-        17: getfield      #29                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        20: invokevirtual #129                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSparseHeaders:()Ljava/util/List;\n+        17: getfield      #97                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        20: invokevirtual #404                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSparseHeaders:()Ljava/util/List;\n         23: astore_1\n         24: aload_1\n         25: ifnull        52\n         28: aload_1\n-        29: invokeinterface #41,  1           // InterfaceMethod java/util/List.size:()I\n+        29: invokeinterface #139,  1          // InterfaceMethod java/util/List.size:()I\n         34: iconst_1\n         35: if_icmple     52\n-        38: new           #155                // class org/apache/commons/compress/archivers/tar/TarArchiveInputStream$1\n+        38: new           #468                // class org/apache/commons/compress/archivers/tar/TarArchiveInputStream$1\n         41: dup\n         42: aload_0\n-        43: invokespecial #156                // Method org/apache/commons/compress/archivers/tar/TarArchiveInputStream$1.\"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream;)V\n+        43: invokespecial #470                // Method org/apache/commons/compress/archivers/tar/TarArchiveInputStream$1.\"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream;)V\n         46: astore_2\n         47: aload_1\n         48: aload_2\n-        49: invokestatic  #157                // Method java/util/Collections.sort:(Ljava/util/List;Ljava/util/Comparator;)V\n+        49: invokestatic  #473                // Method java/util/Collections.sort:(Ljava/util/List;Ljava/util/Comparator;)V\n         52: aload_1\n-        53: ifnull        230\n-        56: new           #158                // class org/apache/commons/compress/archivers/tar/TarArchiveInputStream$TarArchiveSparseZeroInputStream\n+        53: ifnull        231\n+        56: new           #479                // class org/apache/commons/compress/archivers/tar/TarArchiveInputStream$TarArchiveSparseZeroInputStream\n         59: dup\n         60: aconst_null\n-        61: invokespecial #159                // Method org/apache/commons/compress/archivers/tar/TarArchiveInputStream$TarArchiveSparseZeroInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream$1;)V\n+        61: invokespecial #481                // Method org/apache/commons/compress/archivers/tar/TarArchiveInputStream$TarArchiveSparseZeroInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream$1;)V\n         64: astore_2\n         65: lconst_0\n         66: lstore_3\n         67: aload_1\n-        68: invokeinterface #23,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n+        68: invokeinterface #73,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n         73: astore        5\n         75: aload         5\n-        77: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n-        82: ifeq          230\n+        77: invokeinterface #79,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n+        82: ifeq          231\n         85: aload         5\n-        87: invokeinterface #25,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n-        92: checkcast     #101                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+        87: invokeinterface #85,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        92: checkcast     #330                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n         95: astore        6\n         97: aload         6\n-        99: invokevirtual #160                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+        99: invokevirtual #484                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n        102: lconst_0\n        103: lcmp\n        104: ifne          120\n        107: aload         6\n-       109: invokevirtual #161                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+       109: invokevirtual #487                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n        112: lconst_0\n        113: lcmp\n        114: ifne          120\n-       117: goto          230\n+       117: goto          231\n        120: aload         6\n-       122: invokevirtual #160                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+       122: invokevirtual #484                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n        125: lload_3\n        126: lsub\n        127: lconst_0\n        128: lcmp\n-       129: ifge          142\n-       132: new           #54                 // class java/io/IOException\n+       129: ifge          143\n+       132: new           #171                // class java/io/IOException\n        135: dup\n-       136: ldc           #162                // String Corrupted struct sparse detected\n-       138: invokespecial #107                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       141: athrow\n-       142: aload         6\n-       144: invokevirtual #160                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n-       147: lload_3\n-       148: lsub\n-       149: lconst_0\n-       150: lcmp\n-       151: ifle          179\n-       154: aload_0\n-       155: getfield      #22                 // Field sparseInputStreams:Ljava/util/List;\n-       158: new           #163                // class org/apache/commons/compress/utils/BoundedInputStream\n-       161: dup\n-       162: aload_2\n-       163: aload         6\n-       165: invokevirtual #160                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n-       168: lload_3\n-       169: lsub\n-       170: invokespecial #164                // Method org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n-       173: invokeinterface #103,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       178: pop\n-       179: aload         6\n-       181: invokevirtual #161                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-       184: lconst_0\n-       185: lcmp\n-       186: ifle          215\n-       189: aload_0\n-       190: getfield      #22                 // Field sparseInputStreams:Ljava/util/List;\n-       193: new           #163                // class org/apache/commons/compress/utils/BoundedInputStream\n-       196: dup\n-       197: aload_0\n-       198: getfield      #14                 // Field inputStream:Ljava/io/InputStream;\n-       201: aload         6\n-       203: invokevirtual #161                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-       206: invokespecial #164                // Method org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n-       209: invokeinterface #103,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       214: pop\n-       215: aload         6\n-       217: invokevirtual #160                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n-       220: aload         6\n-       222: invokevirtual #161                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-       225: ladd\n-       226: lstore_3\n-       227: goto          75\n-       230: aload_0\n-       231: getfield      #22                 // Field sparseInputStreams:Ljava/util/List;\n-       234: invokeinterface #41,  1           // InterfaceMethod java/util/List.size:()I\n-       239: ifle          247\n-       242: aload_0\n-       243: iconst_0\n-       244: putfield      #43                 // Field currentSparseInputStreamIndex:I\n-       247: return\n+       136: ldc_w         #490                // String Corrupted struct sparse detected\n+       139: invokespecial #346                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       142: athrow\n+       143: aload         6\n+       145: invokevirtual #484                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+       148: lload_3\n+       149: lsub\n+       150: lconst_0\n+       151: lcmp\n+       152: ifle          180\n+       155: aload_0\n+       156: getfield      #70                 // Field sparseInputStreams:Ljava/util/List;\n+       159: new           #492                // class org/apache/commons/compress/utils/BoundedInputStream\n+       162: dup\n+       163: aload_2\n+       164: aload         6\n+       166: invokevirtual #484                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+       169: lload_3\n+       170: lsub\n+       171: invokespecial #494                // Method org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n+       174: invokeinterface #335,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       179: pop\n+       180: aload         6\n+       182: invokevirtual #487                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+       185: lconst_0\n+       186: lcmp\n+       187: ifle          216\n+       190: aload_0\n+       191: getfield      #70                 // Field sparseInputStreams:Ljava/util/List;\n+       194: new           #492                // class org/apache/commons/compress/utils/BoundedInputStream\n+       197: dup\n+       198: aload_0\n+       199: getfield      #38                 // Field inputStream:Ljava/io/InputStream;\n+       202: aload         6\n+       204: invokevirtual #487                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+       207: invokespecial #494                // Method org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n+       210: invokeinterface #335,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       215: pop\n+       216: aload         6\n+       218: invokevirtual #484                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+       221: aload         6\n+       223: invokevirtual #487                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+       226: ladd\n+       227: lstore_3\n+       228: goto          75\n+       231: aload_0\n+       232: getfield      #70                 // Field sparseInputStreams:Ljava/util/List;\n+       235: invokeinterface #139,  1          // InterfaceMethod java/util/List.size:()I\n+       240: ifle          248\n+       243: aload_0\n+       244: iconst_0\n+       245: putfield      #145                // Field currentSparseInputStreamIndex:I\n+       248: return\n       LineNumberTable:\n         line 1044: 0\n         line 1045: 5\n         line 1047: 16\n         line 1049: 24\n         line 1050: 38\n         line 1058: 47\n@@ -2929,46 +2929,46 @@\n         line 1063: 56\n         line 1064: 65\n         line 1065: 67\n         line 1066: 97\n         line 1067: 117\n         line 1070: 120\n         line 1071: 132\n-        line 1075: 142\n-        line 1076: 154\n-        line 1080: 179\n-        line 1081: 189\n-        line 1084: 215\n-        line 1085: 227\n-        line 1088: 230\n-        line 1089: 242\n-        line 1091: 247\n+        line 1075: 143\n+        line 1076: 155\n+        line 1080: 180\n+        line 1081: 190\n+        line 1084: 216\n+        line 1085: 228\n+        line 1088: 231\n+        line 1089: 243\n+        line 1091: 248\n       StackMapTable: number_of_entries = 8\n         frame_type = 252 /* append */\n           offset_delta = 52\n           locals = [ class java/util/List ]\n         frame_type = 254 /* append */\n           offset_delta = 22\n           locals = [ class java/io/InputStream, long, class java/util/Iterator ]\n         frame_type = 252 /* append */\n           offset_delta = 44\n           locals = [ class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse ]\n-        frame_type = 21 /* same */\n+        frame_type = 22 /* same */\n         frame_type = 36 /* same */\n         frame_type = 35 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 14\n           locals = [ class org/apache/commons/compress/archivers/tar/TarArchiveInputStream, class java/util/List ]\n           stack = []\n         frame_type = 16 /* same */\n     Exceptions:\n       throws java.io.IOException\n }\n SourceFile: \"TarArchiveInputStream.java\"\n-InnerClasses:\n-  private static #166= #158 of #6;        // TarArchiveSparseZeroInputStream=class org/apache/commons/compress/archivers/tar/TarArchiveInputStream$TarArchiveSparseZeroInputStream of class org/apache/commons/compress/archivers/tar/TarArchiveInputStream\n-  #155;                                   // class org/apache/commons/compress/archivers/tar/TarArchiveInputStream$1\n-  public static final #544= #543 of #546; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #391 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  0: #534 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #392 Failed to read Paxheader. Expected \\u0001 bytes, read \\u0001\n+      #540 Failed to read Paxheader. Expected \\u0001 bytes, read \\u0001\n+InnerClasses:\n+  #468;                                   // class org/apache/commons/compress/archivers/tar/TarArchiveInputStream$1\n+  private static #543= #479 of #4;        // TarArchiveSparseZeroInputStream=class org/apache/commons/compress/archivers/tar/TarArchiveInputStream$TarArchiveSparseZeroInputStream of class org/apache/commons/compress/archivers/tar/TarArchiveInputStream\n+  public static final #548= #544 of #546; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
