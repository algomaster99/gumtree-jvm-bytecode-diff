{"diffoscope-json-version": 1, "source1": "first/FileNameUtil.class", "source2": "second/FileNameUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,76 +13,76 @@\n     private final Map<String, String> uncompressSuffix;\n     private final int longestCompressedSuffix;\n     private final int shortestCompressedSuffix;\n     private final int longestUncompressedSuffix;\n     private final int shortestUncompressedSuffix;\n     private final String defaultExtension;\n     \n-    public FileNameUtil(final Map<String, String> uncompressSuffix, final String defaultExtension) {\n+    public FileNameUtil(final Map<String, String> m, final String defaultExtension) {\n         this.compressSuffix = new HashMap<String, String>();\n-        this.uncompressSuffix = Collections.unmodifiableMap((Map<? extends String, ? extends String>)uncompressSuffix);\n-        int lc = Integer.MIN_VALUE;\n-        int sc = Integer.MAX_VALUE;\n-        int lu = Integer.MIN_VALUE;\n-        int su = Integer.MAX_VALUE;\n-        for (final Map.Entry<String, String> ent : uncompressSuffix.entrySet()) {\n-            final int cl = ((String)ent.getKey()).length();\n-            if (cl > lc) {\n-                lc = cl;\n-            }\n-            if (cl < sc) {\n-                sc = cl;\n-            }\n-            final String u = (String)ent.getValue();\n-            final int ul = u.length();\n-            if (ul > 0) {\n-                if (!this.compressSuffix.containsKey(u)) {\n-                    this.compressSuffix.put(u, ent.getKey());\n+        this.uncompressSuffix = Collections.unmodifiableMap((Map<? extends String, ? extends String>)m);\n+        int longestCompressedSuffix = Integer.MIN_VALUE;\n+        int shortestCompressedSuffix = Integer.MAX_VALUE;\n+        int longestUncompressedSuffix = Integer.MIN_VALUE;\n+        int shortestUncompressedSuffix = Integer.MAX_VALUE;\n+        for (final Map.Entry entry : m.entrySet()) {\n+            final int length = ((String)entry.getKey()).length();\n+            if (length > longestCompressedSuffix) {\n+                longestCompressedSuffix = length;\n+            }\n+            if (length < shortestCompressedSuffix) {\n+                shortestCompressedSuffix = length;\n+            }\n+            final String s = (String)entry.getValue();\n+            final int length2 = s.length();\n+            if (length2 > 0) {\n+                if (!this.compressSuffix.containsKey(s)) {\n+                    this.compressSuffix.put(s, (String)entry.getKey());\n                 }\n-                if (ul > lu) {\n-                    lu = ul;\n+                if (length2 > longestUncompressedSuffix) {\n+                    longestUncompressedSuffix = length2;\n                 }\n-                if (ul >= su) {\n+                if (length2 >= shortestUncompressedSuffix) {\n                     continue;\n                 }\n-                su = ul;\n+                shortestUncompressedSuffix = length2;\n             }\n         }\n-        this.longestCompressedSuffix = lc;\n-        this.longestUncompressedSuffix = lu;\n-        this.shortestCompressedSuffix = sc;\n-        this.shortestUncompressedSuffix = su;\n+        this.longestCompressedSuffix = longestCompressedSuffix;\n+        this.longestUncompressedSuffix = longestUncompressedSuffix;\n+        this.shortestCompressedSuffix = shortestCompressedSuffix;\n+        this.shortestUncompressedSuffix = shortestUncompressedSuffix;\n         this.defaultExtension = defaultExtension;\n     }\n     \n-    public boolean isCompressedFilename(final String fileName) {\n-        final String lower = fileName.toLowerCase(Locale.ENGLISH);\n-        for (int n = lower.length(), i = this.shortestCompressedSuffix; i <= this.longestCompressedSuffix && i < n; ++i) {\n-            if (this.uncompressSuffix.containsKey(lower.substring(n - i))) {\n+    public boolean isCompressedFilename(final String s) {\n+        final String lowerCase = s.toLowerCase(Locale.ENGLISH);\n+        for (int length = lowerCase.length(), shortestCompressedSuffix = this.shortestCompressedSuffix; shortestCompressedSuffix <= this.longestCompressedSuffix && shortestCompressedSuffix < length; ++shortestCompressedSuffix) {\n+            if (this.uncompressSuffix.containsKey(lowerCase.substring(length - shortestCompressedSuffix))) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n-    public String getUncompressedFilename(final String fileName) {\n-        final String lower = fileName.toLowerCase(Locale.ENGLISH);\n-        for (int n = lower.length(), i = this.shortestCompressedSuffix; i <= this.longestCompressedSuffix && i < n; ++i) {\n-            final String suffix = (String)this.uncompressSuffix.get(lower.substring(n - i));\n-            if (suffix != null) {\n-                return fileName.substring(0, n - i) + suffix;\n+    public String getUncompressedFilename(final String s) {\n+        final String lowerCase = s.toLowerCase(Locale.ENGLISH);\n+        for (int length = lowerCase.length(), shortestCompressedSuffix = this.shortestCompressedSuffix; shortestCompressedSuffix <= this.longestCompressedSuffix && shortestCompressedSuffix < length; ++shortestCompressedSuffix) {\n+            final String str = (String)this.uncompressSuffix.get(lowerCase.substring(length - shortestCompressedSuffix));\n+            if (str != null) {\n+                return s.substring(0, length - shortestCompressedSuffix) + str;\n             }\n         }\n-        return fileName;\n+        return s;\n     }\n     \n-    public String getCompressedFilename(final String fileName) {\n-        final String lower = fileName.toLowerCase(Locale.ENGLISH);\n-        for (int n = lower.length(), i = this.shortestUncompressedSuffix; i <= this.longestUncompressedSuffix && i < n; ++i) {\n-            final String suffix = (String)this.compressSuffix.get(lower.substring(n - i));\n-            if (suffix != null) {\n-                return fileName.substring(0, n - i) + suffix;\n+    public String getCompressedFilename(final String str) {\n+        final String lowerCase = str.toLowerCase(Locale.ENGLISH);\n+        for (int length = lowerCase.length(), shortestUncompressedSuffix = this.shortestUncompressedSuffix; shortestUncompressedSuffix <= this.longestUncompressedSuffix && shortestUncompressedSuffix < length; ++shortestUncompressedSuffix) {\n+            final String str2 = (String)this.compressSuffix.get(lowerCase.substring(length - shortestUncompressedSuffix));\n+            if (str2 != null) {\n+                return str.substring(0, length - shortestUncompressedSuffix) + str2;\n             }\n         }\n-        return fileName + this.defaultExtension;\n+        return str + this.defaultExtension;\n     }\n }\n"}]}
