{"diffoscope-json-version": 1, "source1": "first/PrefixFileFilter.class", "source2": "second/PrefixFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,78 +8,80 @@\n \n public class PrefixFileFilter extends AbstractFileFilter implements Serializable\n {\n     private static final long serialVersionUID = 8533897440809599867L;\n     private final String[] prefixes;\n     private final IOCase caseSensitivity;\n     \n-    public PrefixFileFilter(final String prefix) {\n-        this(prefix, IOCase.SENSITIVE);\n+    public PrefixFileFilter(final String s) {\n+        this(s, IOCase.SENSITIVE);\n     }\n     \n-    public PrefixFileFilter(final String prefix, final IOCase caseSensitivity) {\n-        if (prefix == null) {\n+    public PrefixFileFilter(final String s, final IOCase ioCase) {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"The prefix must not be null\");\n         }\n-        this.prefixes = new String[] { prefix };\n-        this.caseSensitivity = ((caseSensitivity == null) ? IOCase.SENSITIVE : caseSensitivity);\n+        this.prefixes = new String[] { s };\n+        this.caseSensitivity = ((ioCase == null) ? IOCase.SENSITIVE : ioCase);\n     }\n     \n-    public PrefixFileFilter(final String... prefixes) {\n-        this(prefixes, IOCase.SENSITIVE);\n+    public PrefixFileFilter(final String... array) {\n+        this(array, IOCase.SENSITIVE);\n     }\n     \n-    public PrefixFileFilter(final String[] prefixes, final IOCase caseSensitivity) {\n-        if (prefixes == null) {\n+    public PrefixFileFilter(final String[] array, final IOCase ioCase) {\n+        if (array == null) {\n             throw new IllegalArgumentException(\"The array of prefixes must not be null\");\n         }\n-        System.arraycopy(prefixes, 0, this.prefixes = new String[prefixes.length], 0, prefixes.length);\n-        this.caseSensitivity = ((caseSensitivity == null) ? IOCase.SENSITIVE : caseSensitivity);\n+        System.arraycopy(array, 0, this.prefixes = new String[array.length], 0, array.length);\n+        this.caseSensitivity = ((ioCase == null) ? IOCase.SENSITIVE : ioCase);\n     }\n     \n-    public PrefixFileFilter(final List<String> prefixes) {\n-        this(prefixes, IOCase.SENSITIVE);\n+    public PrefixFileFilter(final List<String> list) {\n+        this(list, IOCase.SENSITIVE);\n     }\n     \n-    public PrefixFileFilter(final List<String> prefixes, final IOCase caseSensitivity) {\n-        if (prefixes == null) {\n+    public PrefixFileFilter(final List<String> list, final IOCase ioCase) {\n+        if (list == null) {\n             throw new IllegalArgumentException(\"The list of prefixes must not be null\");\n         }\n-        this.prefixes = prefixes.toArray(PrefixFileFilter.EMPTY_STRING_ARRAY);\n-        this.caseSensitivity = ((caseSensitivity == null) ? IOCase.SENSITIVE : caseSensitivity);\n+        this.prefixes = list.toArray(PrefixFileFilter.EMPTY_STRING_ARRAY);\n+        this.caseSensitivity = ((ioCase == null) ? IOCase.SENSITIVE : ioCase);\n     }\n     \n     public boolean accept(final File file) {\n         final String name = file.getName();\n-        for (final String prefix : this.prefixes) {\n-            if (this.caseSensitivity.checkStartsWith(name, prefix)) {\n+        final String[] prefixes = this.prefixes;\n+        for (int length = prefixes.length, i = 0; i < length; ++i) {\n+            if (this.caseSensitivity.checkStartsWith(name, prefixes[i])) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n-    public boolean accept(final File file, final String name) {\n-        for (final String prefix : this.prefixes) {\n-            if (this.caseSensitivity.checkStartsWith(name, prefix)) {\n+    public boolean accept(final File file, final String s) {\n+        final String[] prefixes = this.prefixes;\n+        for (int length = prefixes.length, i = 0; i < length; ++i) {\n+            if (this.caseSensitivity.checkStartsWith(s, prefixes[i])) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n     public String toString() {\n-        final StringBuilder buffer = new StringBuilder();\n-        buffer.append(super.toString());\n-        buffer.append(\"(\");\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(super.toString());\n+        sb.append(\"(\");\n         if (this.prefixes != null) {\n             for (int i = 0; i < this.prefixes.length; ++i) {\n                 if (i > 0) {\n-                    buffer.append(\",\");\n+                    sb.append(\",\");\n                 }\n-                buffer.append(this.prefixes[i]);\n+                sb.append(this.prefixes[i]);\n             }\n         }\n-        buffer.append(\")\");\n-        return buffer.toString();\n+        sb.append(\")\");\n+        return sb.toString();\n     }\n }\n"}]}
