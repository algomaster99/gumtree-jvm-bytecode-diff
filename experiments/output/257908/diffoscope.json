{"diffoscope-json-version": 1, "source1": "first/ModelTransaction$Operations.class", "source2": "second/ModelTransaction$Operations.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,65 +10,66 @@\n     private Collection<ModelTransaction.Operation> operations;\n     private Collection<ImmutableNode> addedNodesInOperation;\n     \n     private Operations(final ModelTransaction this$0) {\n         this.this$0 = this$0;\n     }\n     \n-    public void addChildrenOperation(final ModelTransaction.ChildrenUpdateOperation co) {\n+    public void addChildrenOperation(final ModelTransaction.ChildrenUpdateOperation childrenOperation) {\n         if (this.childrenOperation == null) {\n-            this.childrenOperation = co;\n+            this.childrenOperation = childrenOperation;\n         }\n         else {\n-            this.childrenOperation.combine(co);\n+            this.childrenOperation.combine(childrenOperation);\n         }\n     }\n     \n-    public void addOperation(final ModelTransaction.Operation op) {\n-        this.operations = ModelTransaction.access$900(this.operations, (Object)op);\n+    public void addOperation(final ModelTransaction.Operation operation) {\n+        this.operations = ModelTransaction.access$900(this.operations, (Object)operation);\n     }\n     \n-    public void newNodesAdded(final Collection<ImmutableNode> newNodes) {\n-        this.addedNodesInOperation = ModelTransaction.access$600(this.addedNodesInOperation, (Collection)newNodes);\n+    public void newNodesAdded(final Collection<ImmutableNode> collection) {\n+        this.addedNodesInOperation = ModelTransaction.access$600(this.addedNodesInOperation, (Collection)collection);\n     }\n     \n-    public void apply(final ImmutableNode target, final int level) {\n-        ImmutableNode node = target;\n+    public void apply(final ImmutableNode immutableNode, final int n) {\n+        ImmutableNode immutableNode2 = immutableNode;\n         if (this.childrenOperation != null) {\n-            node = this.childrenOperation.apply(node, this);\n+            immutableNode2 = this.childrenOperation.apply(immutableNode2, this);\n         }\n         if (this.operations != null) {\n-            for (final ModelTransaction.Operation op : this.operations) {\n-                node = op.apply(node, this);\n+            final Iterator iterator = this.operations.iterator();\n+            while (iterator.hasNext()) {\n+                immutableNode2 = ((ModelTransaction.Operation)iterator.next()).apply(immutableNode2, this);\n             }\n         }\n-        this.handleAddedNodes(node);\n-        if (level == 0) {\n-            ModelTransaction.access$1402(this.this$0, node);\n-            ModelTransaction.access$1200(this.this$0).put(target, node);\n+        this.handleAddedNodes(immutableNode2);\n+        if (n == 0) {\n+            ModelTransaction.access$1402(this.this$0, immutableNode2);\n+            ModelTransaction.access$1200(this.this$0).put(immutableNode, immutableNode2);\n         }\n         else {\n-            this.propagateChange(target, node, level);\n+            this.propagateChange(immutableNode, immutableNode2, n);\n         }\n     }\n     \n-    private void propagateChange(final ImmutableNode target, final ImmutableNode node, final int level) {\n-        final ImmutableNode parent = this.this$0.getParent(target);\n-        final ModelTransaction.ChildrenUpdateOperation co = new ModelTransaction.ChildrenUpdateOperation(this.this$0, (ModelTransaction.ModelTransaction$1)null);\n-        if (InMemoryNodeModel.checkIfNodeDefined(node)) {\n-            co.addNodeToReplace(target, node);\n+    private void propagateChange(final ImmutableNode immutableNode, final ImmutableNode immutableNode2, final int n) {\n+        final ImmutableNode parent = this.this$0.getParent(immutableNode);\n+        final ModelTransaction.ChildrenUpdateOperation childrenUpdateOperation = new ModelTransaction.ChildrenUpdateOperation(this.this$0, (ModelTransaction.ModelTransaction$1)null);\n+        if (InMemoryNodeModel.checkIfNodeDefined(immutableNode2)) {\n+            childrenUpdateOperation.addNodeToReplace(immutableNode, immutableNode2);\n         }\n         else {\n-            co.addNodeToRemove(target);\n+            childrenUpdateOperation.addNodeToRemove(immutableNode);\n         }\n-        this.this$0.fetchOperations(parent, level - 1).addChildrenOperation(co);\n+        this.this$0.fetchOperations(parent, n - 1).addChildrenOperation(childrenUpdateOperation);\n     }\n     \n-    private void handleAddedNodes(final ImmutableNode node) {\n+    private void handleAddedNodes(final ImmutableNode immutableNode) {\n         if (this.addedNodesInOperation != null) {\n-            for (final ImmutableNode child : this.addedNodesInOperation) {\n-                ModelTransaction.access$300(this.this$0).put(child, node);\n-                ModelTransaction.access$1500(this.this$0).add(child);\n+            for (final ImmutableNode immutableNode2 : this.addedNodesInOperation) {\n+                ModelTransaction.access$300(this.this$0).put(immutableNode2, immutableNode);\n+                ModelTransaction.access$1500(this.this$0).add(immutableNode2);\n             }\n         }\n     }\n }\n"}]}
