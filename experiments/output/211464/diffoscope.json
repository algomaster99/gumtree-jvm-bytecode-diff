{"diffoscope-json-version": 1, "source1": "first/BasicThreadFactory$Builder.class", "source2": "second/BasicThreadFactory$Builder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,49 +8,49 @@\n {\n     private ThreadFactory wrappedFactory;\n     private Thread.UncaughtExceptionHandler exceptionHandler;\n     private String namingPattern;\n     private Integer priority;\n     private Boolean daemon;\n     \n-    public Builder wrappedFactory(final ThreadFactory factory) {\n-        Validate.notNull((Object)factory, \"factory\", new Object[0]);\n-        this.wrappedFactory = factory;\n+    public Builder wrappedFactory(final ThreadFactory wrappedFactory) {\n+        Validate.notNull((Object)wrappedFactory, \"factory\", new Object[0]);\n+        this.wrappedFactory = wrappedFactory;\n         return this;\n     }\n     \n-    public Builder namingPattern(final String pattern) {\n-        Validate.notNull((Object)pattern, \"pattern\", new Object[0]);\n-        this.namingPattern = pattern;\n+    public Builder namingPattern(final String namingPattern) {\n+        Validate.notNull((Object)namingPattern, \"pattern\", new Object[0]);\n+        this.namingPattern = namingPattern;\n         return this;\n     }\n     \n-    public Builder daemon(final boolean daemon) {\n-        this.daemon = Boolean.valueOf(daemon);\n+    public Builder daemon(final boolean b) {\n+        this.daemon = Boolean.valueOf(b);\n         return this;\n     }\n     \n-    public Builder priority(final int priority) {\n-        this.priority = Integer.valueOf(priority);\n+    public Builder priority(final int i) {\n+        this.priority = Integer.valueOf(i);\n         return this;\n     }\n     \n-    public Builder uncaughtExceptionHandler(final Thread.UncaughtExceptionHandler handler) {\n-        Validate.notNull((Object)handler, \"handler\", new Object[0]);\n-        this.exceptionHandler = handler;\n+    public Builder uncaughtExceptionHandler(final Thread.UncaughtExceptionHandler exceptionHandler) {\n+        Validate.notNull((Object)exceptionHandler, \"handler\", new Object[0]);\n+        this.exceptionHandler = exceptionHandler;\n         return this;\n     }\n     \n     public void reset() {\n         this.wrappedFactory = null;\n         this.exceptionHandler = null;\n         this.namingPattern = null;\n         this.priority = null;\n         this.daemon = null;\n     }\n     \n     public BasicThreadFactory build() {\n-        final BasicThreadFactory factory = new BasicThreadFactory(this, (BasicThreadFactory.BasicThreadFactory$1)null);\n+        final BasicThreadFactory basicThreadFactory = new BasicThreadFactory(this, (BasicThreadFactory.BasicThreadFactory$1)null);\n         this.reset();\n-        return factory;\n+        return basicThreadFactory;\n     }\n }\n"}]}
