{"diffoscope-json-version": 1, "source1": "first/ZipArchiveInputStream.class", "source2": "second/ZipArchiveInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,933 +1,933 @@\n-  SHA-256 checksum 1e91a0ce6aca8f0acf1f8626c440225f50a373c703761e0f9feb4e867dc66cee\n+  SHA-256 checksum 723e92db2d19afbef269850f9b0bf12349bfd99ab335262a971f5e0dff8d2be1\n   Compiled from \"ZipArchiveInputStream.java\"\n public class org.apache.commons.compress.archivers.zip.ZipArchiveInputStream extends org.apache.commons.compress.archivers.ArchiveInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #22                         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n-  super_class: #264                       // org/apache/commons/compress/archivers/ArchiveInputStream\n+  this_class: #4                          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+  super_class: #31                        // org/apache/commons/compress/archivers/ArchiveInputStream\n   interfaces: 1, fields: 28, methods: 44, attributes: 3\n Constant pool:\n-    #1 = Class              #471          // org/apache/commons/compress/archivers/zip/ZipConstants\n-    #2 = Methodref          #22.#472      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.count:(I)V\n-    #3 = Fieldref           #22.#473      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-    #4 = Class              #474          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-    #5 = String             #475          // UTF8\n-    #6 = Methodref          #22.#476      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n-    #7 = Methodref          #22.#477      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;Z)V\n-    #8 = Methodref          #22.#478      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n-    #9 = Methodref          #22.#479      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n-   #10 = Methodref          #264.#480     // org/apache/commons/compress/archivers/ArchiveInputStream.\"<init>\":()V\n-   #11 = Class              #481          // java/util/zip/Inflater\n-   #12 = Methodref          #11.#482      // java/util/zip/Inflater.\"<init>\":(Z)V\n-   #13 = Fieldref           #22.#483      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.inf:Ljava/util/zip/Inflater;\n-   #14 = Class              #484          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-   #15 = Methodref          #485.#486     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #16 = Fieldref           #22.#487      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.buf:Ljava/nio/ByteBuffer;\n-   #17 = Fieldref           #22.#488      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.closed:Z\n-   #18 = Fieldref           #22.#489      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.hitCentralDirectory:Z\n-   #19 = Fieldref           #22.#490      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.lastStoredEntry:Ljava/io/ByteArrayInputStream;\n-   #20 = Fieldref           #22.#491      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.allowStoredEntriesWithDataDescriptor:Z\n-   #21 = Fieldref           #22.#492      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.uncompressedCount:J\n-   #22 = Class              #493          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n-   #23 = Fieldref           #22.#494      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.lfhBuf:[B\n-   #24 = Fieldref           #22.#495      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.skipBuf:[B\n-   #25 = Fieldref           #22.#496      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.shortBuf:[B\n-   #26 = Fieldref           #22.#497      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.wordBuf:[B\n-   #27 = Fieldref           #22.#498      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.twoDwordBuf:[B\n-   #28 = Fieldref           #22.#499      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.entriesRead:I\n-   #29 = Fieldref           #22.#500      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.encoding:Ljava/lang/String;\n-   #30 = Methodref          #4.#501       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #31 = Fieldref           #22.#502      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #32 = Fieldref           #22.#503      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.useUnicodeExtraFields:Z\n-   #33 = Class              #504          // java/io/PushbackInputStream\n-   #34 = Methodref          #485.#505     // java/nio/ByteBuffer.capacity:()I\n-   #35 = Methodref          #33.#506      // java/io/PushbackInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-   #36 = Fieldref           #22.#507      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.in:Ljava/io/InputStream;\n-   #37 = Fieldref           #22.#508      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.skipSplitSig:Z\n-   #38 = Methodref          #485.#509     // java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n-   #39 = Methodref          #22.#510      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.closeEntry:()V\n-   #40 = Methodref          #22.#511      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.getBytesRead:()J\n-   #41 = Methodref          #22.#512      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readFirstLocalFileHeader:([B)V\n-   #42 = Methodref          #22.#513      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readFully:([B)V\n-   #43 = Class              #514          // java/io/EOFException\n-   #44 = Class              #515          // org/apache/commons/compress/archivers/zip/ZipLong\n-   #45 = Methodref          #44.#516      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n-   #46 = Fieldref           #44.#517      // org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #47 = Methodref          #44.#518      // org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n-   #48 = Fieldref           #44.#519      // org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #49 = Fieldref           #44.#520      // org/apache/commons/compress/archivers/zip/ZipLong.AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #50 = Methodref          #22.#521      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.isApkSigningBlock:([B)Z\n-   #51 = Methodref          #22.#522      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.skipRemainderOfArchive:()V\n-   #52 = Class              #523          // java/util/zip/ZipException\n-   #53 = String             #524          // Unexpected record signature: 0X%X\n-   #54 = Class              #525          // java/lang/Object\n-   #55 = Methodref          #44.#526      // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-   #56 = Methodref          #196.#527     // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n-   #57 = Methodref          #528.#529     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-   #58 = Methodref          #52.#530      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #59 = Class              #531          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry\n-   #60 = Methodref          #59.#532      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1;)V\n-   #61 = Methodref          #533.#534     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-   #62 = Methodref          #59.#535      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #63 = Class              #536          // org/apache/commons/compress/archivers/zip/ZipFile\n-   #64 = Methodref          #131.#537     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setPlatform:(I)V\n-   #65 = Methodref          #351.#538     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #66 = Methodref          #351.#539     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n-   #67 = Fieldref           #4.#540       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #68 = Methodref          #351.#541     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesDataDescriptor:()Z\n-   #69 = Methodref          #59.#542      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$202:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n-   #70 = Methodref          #131.#543     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-   #71 = Methodref          #131.#544     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setMethod:(I)V\n-   #72 = Methodref          #44.#545      // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-   #73 = Methodref          #546.#547     // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n-   #74 = Methodref          #131.#548     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setTime:(J)V\n-   #75 = Methodref          #59.#549      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n-   #76 = Methodref          #131.#550     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n-   #77 = Methodref          #44.#551      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n-   #78 = InterfaceMethodref #352.#552     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #79 = Methodref          #131.#553     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;[B)V\n-   #80 = Fieldref           #554.#555     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-   #81 = Methodref          #131.#556     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-   #82 = Methodref          #131.#557     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setExtra:([B)V\n-   #83 = Methodref          #546.#558     // org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-   #84 = Methodref          #22.#559      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.processZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-   #85 = Methodref          #131.#560     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n-   #86 = Methodref          #131.#561     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n-   #87 = Methodref          #131.#562     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setStreamContiguous:(Z)V\n-   #88 = Methodref          #131.#563     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-   #89 = Methodref          #354.#564     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #90 = Methodref          #131.#565     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-   #91 = Class              #566          // org/apache/commons/compress/archivers/ArchiveEntry\n-   #92 = Long               -1l\n-   #94 = Methodref          #546.#567     // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #95 = Fieldref           #354.#568     // org/apache/commons/compress/archivers/zip/ZipMethod.STORED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #96 = Fieldref           #354.#569     // org/apache/commons/compress/archivers/zip/ZipMethod.DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #97 = Class              #570          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream\n-   #98 = Methodref          #97.#571      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V\n-   #99 = Fieldref           #266.#572     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n-  #100 = Methodref          #354.#573     // org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n-  #101 = Class              #574          // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-  #102 = Methodref          #101.#575     // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-  #103 = Methodref          #59.#576      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n-  #104 = Class              #577          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-  #105 = Methodref          #131.#578     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #106 = Methodref          #351.#579     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n-  #107 = Methodref          #351.#580     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n-  #108 = Methodref          #104.#581     // org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n-  #109 = Class              #582          // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-  #110 = Methodref          #109.#575     // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-  #111 = Class              #583          // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-  #112 = Methodref          #111.#575     // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-  #113 = Fieldref           #354.#584     // org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #114 = Fieldref           #44.#585      // org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #115 = Class              #586          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  #116 = Fieldref           #587.#588     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.SPLITTING:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #117 = Methodref          #115.#589     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n-  #118 = Fieldref           #44.#590      // org/apache/commons/compress/archivers/zip/ZipLong.SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #119 = Methodref          #591.#592     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #120 = Fieldref           #122.#593     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #121 = Methodref          #131.#594     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #122 = Class              #595          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #123 = Methodref          #59.#596      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n-  #124 = Fieldref           #44.#597      // org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #125 = Methodref          #122.#598     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #126 = Methodref          #599.#600     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-  #127 = Methodref          #131.#601     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n-  #128 = Methodref          #122.#602     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #129 = Methodref          #131.#603     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n-  #130 = Methodref          #22.#604      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #131 = Class              #605          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #132 = Methodref          #22.#606      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.supportsDataDescriptorFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #133 = Methodref          #22.#607      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.supportsCompressedSizeFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #134 = Class              #608          // java/io/IOException\n-  #135 = String             #609          // The stream is closed\n-  #136 = Methodref          #134.#530     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-  #137 = Class              #610          // java/lang/ArrayIndexOutOfBoundsException\n-  #138 = Methodref          #137.#480     // java/lang/ArrayIndexOutOfBoundsException.\"<init>\":()V\n-  #139 = Methodref          #546.#611     // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #140 = Fieldref           #587.#612     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.DATA_DESCRIPTOR:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #141 = Methodref          #115.#613     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #142 = Fieldref           #587.#614     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.UNKNOWN_COMPRESSED_SIZE:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #143 = Methodref          #22.#615      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readStored:([BII)I\n-  #144 = Methodref          #22.#616      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readDeflated:([BII)I\n-  #145 = Fieldref           #354.#617     // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #146 = Methodref          #354.#618     // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-  #147 = Fieldref           #354.#619     // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #148 = Fieldref           #354.#620     // org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #149 = Methodref          #59.#621      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n-  #150 = Methodref          #355.#622     // java/io/InputStream.read:([BII)I\n-  #151 = Methodref          #115.#623     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #152 = Methodref          #59.#624      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/util/zip/CRC32;\n-  #153 = Methodref          #625.#626     // java/util/zip/CRC32.update:([BII)V\n-  #154 = Methodref          #59.#627      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-  #155 = Methodref          #22.#628      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.getBytesInflated:()J\n-  #156 = Methodref          #101.#629     // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getCompressedCount:()J\n-  #157 = Methodref          #104.#629     // org/apache/commons/compress/archivers/zip/ExplodingInputStream.getCompressedCount:()J\n-  #158 = Methodref          #111.#629     // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.getCompressedCount:()J\n-  #159 = Methodref          #109.#629     // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.getCompressedCount:()J\n-  #160 = Methodref          #22.#630      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readStoredEntry:()V\n-  #161 = Methodref          #232.#622     // java/io/ByteArrayInputStream.read:([BII)I\n-  #162 = Methodref          #131.#631     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-  #163 = Methodref          #485.#632     // java/nio/ByteBuffer.position:()I\n-  #164 = Methodref          #485.#633     // java/nio/ByteBuffer.limit:()I\n-  #165 = Methodref          #485.#634     // java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n-  #166 = Methodref          #485.#635     // java/nio/ByteBuffer.array:()[B\n-  #167 = Methodref          #355.#636     // java/io/InputStream.read:([B)I\n-  #168 = String             #637          // Truncated ZIP file\n-  #169 = Methodref          #59.#638      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$714:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-  #170 = Methodref          #485.#639     // java/nio/ByteBuffer.remaining:()I\n-  #171 = Methodref          #640.#641     // java/lang/Math.min:(II)I\n-  #172 = Methodref          #485.#642     // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n-  #173 = Methodref          #59.#643      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$614:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-  #174 = Methodref          #22.#644      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readFromInflater:([BII)I\n-  #175 = Methodref          #11.#645      // java/util/zip/Inflater.finished:()Z\n-  #176 = Methodref          #11.#646      // java/util/zip/Inflater.needsDictionary:()Z\n-  #177 = String             #647          // This archive needs a preset dictionary which is not supported by Commons Compress.\n-  #178 = Methodref          #11.#648      // java/util/zip/Inflater.needsInput:()Z\n-  #179 = Methodref          #22.#649      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.fill:()I\n-  #180 = Methodref          #11.#650      // java/util/zip/Inflater.inflate:([BII)I\n-  #181 = Class              #651          // java/util/zip/DataFormatException\n-  #182 = Methodref          #181.#652     // java/util/zip/DataFormatException.getMessage:()Ljava/lang/String;\n-  #183 = Methodref          #52.#653      // java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-  #184 = Methodref          #355.#654     // java/io/InputStream.close:()V\n-  #185 = Methodref          #11.#655      // java/util/zip/Inflater.end:()V\n-  #186 = Methodref          #22.#622      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.read:([BII)I\n-  #187 = Class              #656          // java/lang/IllegalArgumentException\n-  #188 = Methodref          #187.#480     // java/lang/IllegalArgumentException.\"<init>\":()V\n-  #189 = Fieldref           #14.#657      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n-  #190 = Methodref          #22.#658      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.checksig:([B[B)Z\n-  #191 = Fieldref           #14.#659      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n-  #192 = Fieldref           #14.#660      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n-  #193 = Methodref          #44.#661      // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-  #194 = Methodref          #22.#662      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.currentEntryHasOutstandingBytes:()Z\n-  #195 = Methodref          #22.#663      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.drainCurrentEntryData:()V\n-  #196 = Class              #664          // java/lang/Long\n-  #197 = Long               9223372036854775807l\n-  #199 = Methodref          #22.#665      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.skip:(J)J\n-  #200 = Methodref          #59.#666      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-  #201 = Methodref          #22.#667      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.pushback:([BII)V\n-  #202 = Methodref          #59.#668      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$722:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-  #203 = Methodref          #22.#669      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readDataDescriptor:()V\n-  #204 = Methodref          #11.#670      // java/util/zip/Inflater.reset:()V\n-  #205 = Methodref          #485.#671     // java/nio/ByteBuffer.clear:()Ljava/nio/ByteBuffer;\n-  #206 = Methodref          #485.#672     // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n-  #207 = Methodref          #640.#673     // java/lang/Math.min:(JJ)J\n-  #208 = Methodref          #131.#674     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-  #209 = Methodref          #675.#676     // org/apache/commons/compress/utils/ArchiveUtils.sanitize:(Ljava/lang/String;)Ljava/lang/String;\n-  #210 = InvokeDynamic      #0:#680       // #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n-  #211 = Methodref          #43.#530      // java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n-  #212 = Methodref          #22.#681      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.count:(J)V\n-  #213 = Methodref          #11.#511      // java/util/zip/Inflater.getBytesRead:()J\n-  #214 = Long               4294967296l\n-  #216 = Methodref          #11.#682      // java/util/zip/Inflater.setInput:([BII)V\n-  #217 = Methodref          #22.#683      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readFully:([BI)V\n-  #218 = Methodref          #684.#685     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n-  #219 = Methodref          #43.#480      // java/io/EOFException.\"<init>\":()V\n-  #220 = Methodref          #44.#686      // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-  #221 = Methodref          #599.#687     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n-  #222 = Methodref          #599.#688     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([BI)J\n-  #223 = Class              #689          // java/util/zip/ZipEntry\n-  #224 = Class              #690          // java/io/ByteArrayOutputStream\n-  #225 = Methodref          #224.#480     // java/io/ByteArrayOutputStream.\"<init>\":()V\n-  #226 = Methodref          #59.#691      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n-  #227 = Methodref          #22.#692      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.bufferContainsSignature:(Ljava/io/ByteArrayOutputStream;III)Z\n-  #228 = Methodref          #22.#693      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.cacheBytesRead:(Ljava/io/ByteArrayOutputStream;III)I\n-  #229 = String             #694          // compressed and uncompressed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n-  #230 = Methodref          #224.#695     // java/io/ByteArrayOutputStream.toByteArray:()[B\n-  #231 = String             #696          // actual and claimed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n-  #232 = Class              #697          // java/io/ByteArrayInputStream\n-  #233 = Methodref          #232.#516     // java/io/ByteArrayInputStream.\"<init>\":([B)V\n-  #234 = Fieldref           #22.#698      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.LFH:[B\n-  #235 = Fieldref           #22.#699      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.CFH:[B\n-  #236 = Fieldref           #22.#700      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.DD:[B\n-  #237 = Methodref          #224.#701     // java/io/ByteArrayOutputStream.write:([BII)V\n-  #238 = Methodref          #33.#702      // java/io/PushbackInputStream.unread:([BII)V\n-  #239 = Methodref          #22.#703      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.pushedBackBytes:(J)V\n-  #240 = Long               46l\n-  #242 = Long               30l\n-  #244 = Methodref          #22.#704      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.realSkip:(J)V\n-  #245 = Methodref          #22.#705      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.findEocdRecord:()V\n-  #246 = Long               16l\n-  #248 = Methodref          #533.#706     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n-  #249 = Methodref          #22.#707      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readOneByte:()I\n-  #250 = Methodref          #22.#708      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.isFirstByteOfEocdSig:(I)Z\n-  #251 = Methodref          #355.#709     // java/io/InputStream.read:()I\n-  #252 = Methodref          #599.#710     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:([B)Ljava/math/BigInteger;\n-  #253 = Fieldref           #22.#711      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.APK_SIGNING_BLOCK_MAGIC:[B\n-  #254 = Methodref          #460.#712     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-  #255 = Methodref          #460.#713     // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #256 = Methodref          #460.#714     // java/math/BigInteger.signum:()I\n-  #257 = Methodref          #460.#715     // java/math/BigInteger.intValue:()I\n-  #258 = Methodref          #640.#716     // java/lang/Math.abs:(I)I\n-  #259 = Fieldref           #22.#717      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.LONG_MAX:Ljava/math/BigInteger;\n-  #260 = Methodref          #460.#718     // java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I\n-  #261 = Methodref          #460.#719     // java/math/BigInteger.negate:()Ljava/math/BigInteger;\n-  #262 = Methodref          #460.#720     // java/math/BigInteger.longValue:()J\n-  #263 = Methodref          #721.#722     // java/util/Arrays.equals:([B[B)Z\n-  #264 = Class              #723          // org/apache/commons/compress/archivers/ArchiveInputStream\n-  #265 = Class              #724          // org/apache/commons/compress/utils/InputStreamStatistics\n-  #266 = Class              #725          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1\n-  #267 = Utf8               InnerClasses\n-  #268 = Utf8               BoundedInputStream\n-  #269 = Utf8               CurrentEntry\n-  #270 = Utf8               zipEncoding\n-  #271 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #272 = Utf8               encoding\n-  #273 = Utf8               Ljava/lang/String;\n-  #274 = Utf8               useUnicodeExtraFields\n-  #275 = Utf8               Z\n-  #276 = Utf8               in\n-  #277 = Utf8               Ljava/io/InputStream;\n-  #278 = Utf8               inf\n-  #279 = Utf8               Ljava/util/zip/Inflater;\n-  #280 = Utf8               buf\n-  #281 = Utf8               Ljava/nio/ByteBuffer;\n-  #282 = Utf8               current\n-  #283 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-  #284 = Utf8               closed\n-  #285 = Utf8               hitCentralDirectory\n-  #286 = Utf8               lastStoredEntry\n-  #287 = Utf8               Ljava/io/ByteArrayInputStream;\n-  #288 = Utf8               allowStoredEntriesWithDataDescriptor\n-  #289 = Utf8               uncompressedCount\n-  #290 = Utf8               J\n-  #291 = Utf8               skipSplitSig\n-  #292 = Utf8               LFH_LEN\n-  #293 = Utf8               I\n-  #294 = Utf8               ConstantValue\n-  #295 = Integer            30\n-  #296 = Utf8               CFH_LEN\n-  #297 = Integer            46\n-  #298 = Utf8               TWO_EXP_32\n-  #299 = Utf8               lfhBuf\n-  #300 = Utf8               [B\n-  #301 = Utf8               skipBuf\n-  #302 = Utf8               shortBuf\n-  #303 = Utf8               wordBuf\n-  #304 = Utf8               twoDwordBuf\n-  #305 = Utf8               entriesRead\n-  #306 = Utf8               USE_ZIPFILE_INSTEAD_OF_STREAM_DISCLAIMER\n-  #307 = String             #726          //  while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n-  #308 = Utf8               LFH\n-  #309 = Utf8               CFH\n-  #310 = Utf8               DD\n-  #311 = Utf8               APK_SIGNING_BLOCK_MAGIC\n-  #312 = Utf8               LONG_MAX\n-  #313 = Utf8               Ljava/math/BigInteger;\n-  #314 = Utf8               <init>\n-  #315 = Utf8               (Ljava/io/InputStream;)V\n-  #316 = Utf8               Code\n-  #317 = Utf8               LineNumberTable\n-  #318 = Utf8               LocalVariableTable\n-  #319 = Utf8               this\n-  #320 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n-  #321 = Utf8               inputStream\n-  #322 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;)V\n-  #323 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;Z)V\n-  #324 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n-  #325 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n-  #326 = Utf8               getNextZipEntry\n-  #327 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #328 = Utf8               e\n-  #329 = Utf8               Ljava/io/EOFException;\n-  #330 = Utf8               bis\n-  #331 = Utf8               firstEntry\n-  #332 = Utf8               currentHeaderOffset\n-  #333 = Utf8               sig\n-  #334 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #335 = Utf8               off\n-  #336 = Utf8               versionMadeBy\n-  #337 = Utf8               gpFlag\n-  #338 = Utf8               Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #339 = Utf8               hasUTF8Flag\n-  #340 = Utf8               entryEncoding\n-  #341 = Utf8               time\n-  #342 = Utf8               size\n-  #343 = Utf8               cSize\n-  #344 = Utf8               fileNameLen\n-  #345 = Utf8               extraLen\n-  #346 = Utf8               fileName\n-  #347 = Utf8               extraData\n-  #348 = Utf8               m\n-  #349 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #350 = Utf8               StackMapTable\n-  #351 = Class              #727          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #352 = Class              #728          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #353 = Class              #300          // \"[B\"\n-  #354 = Class              #729          // org/apache/commons/compress/archivers/zip/ZipMethod\n-  #355 = Class              #730          // java/io/InputStream\n-  #356 = Utf8               Exceptions\n-  #357 = Utf8               readFirstLocalFileHeader\n-  #358 = Utf8               ([B)V\n-  #359 = Utf8               missedLfhBytes\n-  #360 = Utf8               lfh\n-  #361 = Utf8               processZip64Extra\n-  #362 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-  #363 = Utf8               z64\n-  #364 = Utf8               Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-  #365 = Utf8               getNextEntry\n-  #366 = Utf8               ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #367 = Utf8               canReadEntryData\n-  #368 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n-  #369 = Utf8               ze\n-  #370 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #371 = Utf8               ae\n-  #372 = Utf8               Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #373 = Utf8               read\n-  #374 = Utf8               ([BII)I\n-  #375 = Utf8               buffer\n-  #376 = Utf8               offset\n-  #377 = Utf8               length\n-  #378 = Utf8               getCompressedCount\n-  #379 = Utf8               ()J\n-  #380 = Utf8               getUncompressedCount\n-  #381 = Utf8               readStored\n-  #382 = Utf8               l\n-  #383 = Utf8               csize\n-  #384 = Utf8               toRead\n-  #385 = Utf8               readDeflated\n-  #386 = Utf8               readFromInflater\n-  #387 = Utf8               Ljava/util/zip/DataFormatException;\n-  #388 = Utf8               close\n-  #389 = Utf8               ()V\n-  #390 = Class              #731          // java/lang/Throwable\n-  #391 = Utf8               skip\n-  #392 = Utf8               (J)J\n-  #393 = Utf8               rem\n-  #394 = Utf8               x\n-  #395 = Utf8               skipped\n-  #396 = Utf8               value\n-  #397 = Utf8               matches\n-  #398 = Utf8               ([BI)Z\n-  #399 = Utf8               signature\n-  #400 = Utf8               checksig\n-  #401 = Utf8               ([B[B)Z\n-  #402 = Utf8               i\n-  #403 = Utf8               expected\n-  #404 = Utf8               closeEntry\n-  #405 = Utf8               inB\n-  #406 = Utf8               diff\n-  #407 = Utf8               currentEntryHasOutstandingBytes\n-  #408 = Utf8               ()Z\n-  #409 = Utf8               drainCurrentEntryData\n-  #410 = Utf8               n\n-  #411 = Utf8               remaining\n-  #412 = Utf8               getBytesInflated\n-  #413 = Utf8               fill\n-  #414 = Utf8               ()I\n-  #415 = Utf8               readFully\n-  #416 = Utf8               b\n-  #417 = Utf8               ([BI)V\n-  #418 = Utf8               len\n-  #419 = Utf8               count\n-  #420 = Utf8               readDataDescriptor\n-  #421 = Utf8               val\n-  #422 = Utf8               potentialSig\n-  #423 = Utf8               supportsDataDescriptorFor\n-  #424 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #425 = Utf8               entry\n-  #426 = Utf8               supportsCompressedSizeFor\n-  #427 = Utf8               readStoredEntry\n-  #428 = Utf8               r\n-  #429 = Utf8               bos\n-  #430 = Utf8               Ljava/io/ByteArrayOutputStream;\n-  #431 = Utf8               done\n-  #432 = Utf8               ddLen\n-  #433 = Utf8               bufferContainsSignature\n-  #434 = Utf8               (Ljava/io/ByteArrayOutputStream;III)Z\n-  #435 = Utf8               expectDDPos\n-  #436 = Utf8               lastRead\n-  #437 = Utf8               expectedDDLen\n-  #438 = Utf8               cacheBytesRead\n-  #439 = Utf8               (Ljava/io/ByteArrayOutputStream;III)I\n-  #440 = Utf8               expecteDDLen\n-  #441 = Utf8               cacheable\n-  #442 = Utf8               pushback\n-  #443 = Utf8               ([BII)V\n-  #444 = Utf8               skipRemainderOfArchive\n-  #445 = Utf8               findEocdRecord\n-  #446 = Utf8               currentByte\n-  #447 = Utf8               skipReadCall\n-  #448 = Utf8               realSkip\n-  #449 = Utf8               (J)V\n-  #450 = Utf8               readOneByte\n-  #451 = Utf8               isFirstByteOfEocdSig\n-  #452 = Utf8               (I)Z\n-  #453 = Utf8               isApkSigningBlock\n-  #454 = Utf8               ([B)Z\n-  #455 = Utf8               bytesInBuffer\n-  #456 = Utf8               ex\n-  #457 = Utf8               suspectLocalFileHeader\n-  #458 = Utf8               toSkip\n-  #459 = Utf8               magic\n-  #460 = Class              #732          // java/math/BigInteger\n-  #461 = Utf8               access$800\n-  #462 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;I)V\n-  #463 = Utf8               x0\n-  #464 = Utf8               x1\n-  #465 = Utf8               access$900\n-  #466 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-  #467 = Utf8               access$1000\n-  #468 = Utf8               <clinit>\n-  #469 = Utf8               SourceFile\n-  #470 = Utf8               ZipArchiveInputStream.java\n-  #471 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-  #472 = NameAndType        #419:#733     // count:(I)V\n-  #473 = NameAndType        #282:#283     // current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-  #474 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #475 = Utf8               UTF8\n-  #476 = NameAndType        #314:#322     // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n-  #477 = NameAndType        #314:#323     // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;Z)V\n-  #478 = NameAndType        #314:#324     // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n-  #479 = NameAndType        #314:#325     // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n-  #480 = NameAndType        #314:#389     // \"<init>\":()V\n-  #481 = Utf8               java/util/zip/Inflater\n-  #482 = NameAndType        #314:#734     // \"<init>\":(Z)V\n-  #483 = NameAndType        #278:#279     // inf:Ljava/util/zip/Inflater;\n-  #484 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-  #485 = Class              #735          // java/nio/ByteBuffer\n-  #486 = NameAndType        #736:#737     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #487 = NameAndType        #280:#281     // buf:Ljava/nio/ByteBuffer;\n-  #488 = NameAndType        #284:#275     // closed:Z\n-  #489 = NameAndType        #285:#275     // hitCentralDirectory:Z\n-  #490 = NameAndType        #286:#287     // lastStoredEntry:Ljava/io/ByteArrayInputStream;\n-  #491 = NameAndType        #288:#275     // allowStoredEntriesWithDataDescriptor:Z\n-  #492 = NameAndType        #289:#290     // uncompressedCount:J\n-  #493 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n-  #494 = NameAndType        #299:#300     // lfhBuf:[B\n-  #495 = NameAndType        #301:#300     // skipBuf:[B\n-  #496 = NameAndType        #302:#300     // shortBuf:[B\n-  #497 = NameAndType        #303:#300     // wordBuf:[B\n-  #498 = NameAndType        #304:#300     // twoDwordBuf:[B\n-  #499 = NameAndType        #305:#293     // entriesRead:I\n-  #500 = NameAndType        #272:#273     // encoding:Ljava/lang/String;\n-  #501 = NameAndType        #738:#739     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #502 = NameAndType        #270:#271     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #503 = NameAndType        #274:#275     // useUnicodeExtraFields:Z\n-  #504 = Utf8               java/io/PushbackInputStream\n-  #505 = NameAndType        #740:#414     // capacity:()I\n-  #506 = NameAndType        #314:#741     // \"<init>\":(Ljava/io/InputStream;I)V\n-  #507 = NameAndType        #276:#277     // in:Ljava/io/InputStream;\n-  #508 = NameAndType        #291:#275     // skipSplitSig:Z\n-  #509 = NameAndType        #742:#737     // limit:(I)Ljava/nio/ByteBuffer;\n-  #510 = NameAndType        #404:#389     // closeEntry:()V\n-  #511 = NameAndType        #743:#379     // getBytesRead:()J\n-  #512 = NameAndType        #357:#358     // readFirstLocalFileHeader:([B)V\n-  #513 = NameAndType        #415:#358     // readFully:([B)V\n-  #514 = Utf8               java/io/EOFException\n-  #515 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #516 = NameAndType        #314:#358     // \"<init>\":([B)V\n-  #517 = NameAndType        #744:#334     // LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #518 = NameAndType        #745:#746     // equals:(Ljava/lang/Object;)Z\n-  #519 = NameAndType        #747:#334     // CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #520 = NameAndType        #748:#334     // AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #521 = NameAndType        #453:#454     // isApkSigningBlock:([B)Z\n-  #522 = NameAndType        #444:#389     // skipRemainderOfArchive:()V\n-  #523 = Utf8               java/util/zip/ZipException\n-  #524 = Utf8               Unexpected record signature: 0X%X\n-  #525 = Utf8               java/lang/Object\n-  #526 = NameAndType        #749:#379     // getValue:()J\n-  #527 = NameAndType        #750:#751     // valueOf:(J)Ljava/lang/Long;\n-  #528 = Class              #752          // java/lang/String\n-  #529 = NameAndType        #753:#754     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #530 = NameAndType        #314:#755     // \"<init>\":(Ljava/lang/String;)V\n-  #531 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry\n-  #532 = NameAndType        #314:#756     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1;)V\n-  #533 = Class              #757          // org/apache/commons/compress/archivers/zip/ZipShort\n-  #534 = NameAndType        #749:#758     // getValue:([BI)I\n-  #535 = NameAndType        #759:#760     // access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #536 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n-  #537 = NameAndType        #761:#733     // setPlatform:(I)V\n-  #538 = NameAndType        #762:#763     // parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #539 = NameAndType        #764:#408     // usesUTF8ForNames:()Z\n-  #540 = NameAndType        #765:#271     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #541 = NameAndType        #766:#408     // usesDataDescriptor:()Z\n-  #542 = NameAndType        #767:#768     // access$202:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n-  #543 = NameAndType        #769:#770     // setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-  #544 = NameAndType        #771:#733     // setMethod:(I)V\n-  #545 = NameAndType        #749:#772     // getValue:([BI)J\n-  #546 = Class              #773          // org/apache/commons/compress/archivers/zip/ZipUtil\n-  #547 = NameAndType        #774:#392     // dosToJavaTime:(J)J\n-  #548 = NameAndType        #775:#449     // setTime:(J)V\n-  #549 = NameAndType        #776:#777     // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n-  #550 = NameAndType        #778:#449     // setCrc:(J)V\n-  #551 = NameAndType        #314:#417     // \"<init>\":([BI)V\n-  #552 = NameAndType        #779:#780     // decode:([B)Ljava/lang/String;\n-  #553 = NameAndType        #781:#782     // setName:(Ljava/lang/String;[B)V\n-  #554 = Class              #783          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #555 = NameAndType        #785:#786     // NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #556 = NameAndType        #787:#788     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #557 = NameAndType        #789:#358     // setExtra:([B)V\n-  #558 = NameAndType        #790:#791     // setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #559 = NameAndType        #361:#362     // processZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-  #560 = NameAndType        #792:#449     // setLocalHeaderOffset:(J)V\n-  #561 = NameAndType        #793:#449     // setDataOffset:(J)V\n-  #562 = NameAndType        #794:#734     // setStreamContiguous:(Z)V\n-  #563 = NameAndType        #795:#414     // getMethod:()I\n-  #564 = NameAndType        #796:#797     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #565 = NameAndType        #798:#379     // getCompressedSize:()J\n-  #566 = Utf8               org/apache/commons/compress/archivers/ArchiveEntry\n-  #567 = NameAndType        #799:#424     // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #568 = NameAndType        #800:#349     // STORED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #569 = NameAndType        #801:#349     // DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #570 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream\n-  #571 = NameAndType        #314:#802     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V\n-  #572 = NameAndType        #803:#804     // $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n-  #573 = NameAndType        #805:#414     // ordinal:()I\n-  #574 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-  #575 = NameAndType        #314:#315     // \"<init>\":(Ljava/io/InputStream;)V\n-  #576 = NameAndType        #806:#807     // access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n-  #577 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-  #578 = NameAndType        #808:#809     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #579 = NameAndType        #810:#414     // getSlidingDictionarySize:()I\n-  #580 = NameAndType        #811:#414     // getNumberOfShannonFanoTrees:()I\n-  #581 = NameAndType        #314:#812     // \"<init>\":(IILjava/io/InputStream;)V\n-  #582 = Utf8               org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-  #583 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-  #584 = NameAndType        #813:#349     // ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #585 = NameAndType        #814:#334     // DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #586 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  #587 = Class              #815          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n-  #588 = NameAndType        #817:#818     // SPLITTING:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #589 = NameAndType        #314:#819     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n-  #590 = NameAndType        #820:#334     // SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #591 = Class              #821          // java/lang/System\n-  #592 = NameAndType        #822:#823     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #593 = NameAndType        #824:#825     // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #594 = NameAndType        #826:#827     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #595 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #596 = NameAndType        #828:#768     // access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n-  #597 = NameAndType        #829:#334     // ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #598 = NameAndType        #798:#830     // getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #599 = Class              #831          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #600 = NameAndType        #832:#379     // getLongValue:()J\n-  #601 = NameAndType        #833:#449     // setCompressedSize:(J)V\n-  #602 = NameAndType        #834:#830     // getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #603 = NameAndType        #835:#449     // setSize:(J)V\n-  #604 = NameAndType        #326:#327     // getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #605 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #606 = NameAndType        #423:#424     // supportsDataDescriptorFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #607 = NameAndType        #426:#424     // supportsCompressedSizeFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #608 = Utf8               java/io/IOException\n-  #609 = Utf8               The stream is closed\n-  #610 = Utf8               java/lang/ArrayIndexOutOfBoundsException\n-  #611 = NameAndType        #836:#837     // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #612 = NameAndType        #838:#818     // DATA_DESCRIPTOR:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #613 = NameAndType        #314:#839     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #614 = NameAndType        #840:#818     // UNKNOWN_COMPRESSED_SIZE:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #615 = NameAndType        #381:#374     // readStored:([BII)I\n-  #616 = NameAndType        #385:#374     // readDeflated:([BII)I\n-  #617 = NameAndType        #841:#349     // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #618 = NameAndType        #842:#414     // getCode:()I\n-  #619 = NameAndType        #843:#349     // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #620 = NameAndType        #844:#349     // BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #621 = NameAndType        #845:#846     // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n-  #622 = NameAndType        #373:#374     // read:([BII)I\n-  #623 = NameAndType        #314:#847     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #624 = NameAndType        #848:#849     // access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/util/zip/CRC32;\n-  #625 = Class              #850          // java/util/zip/CRC32\n-  #626 = NameAndType        #851:#443     // update:([BII)V\n-  #627 = NameAndType        #852:#853     // access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-  #628 = NameAndType        #412:#379     // getBytesInflated:()J\n-  #629 = NameAndType        #378:#379     // getCompressedCount:()J\n-  #630 = NameAndType        #427:#389     // readStoredEntry:()V\n-  #631 = NameAndType        #834:#379     // getSize:()J\n-  #632 = NameAndType        #854:#414     // position:()I\n-  #633 = NameAndType        #742:#414     // limit:()I\n-  #634 = NameAndType        #854:#737     // position:(I)Ljava/nio/ByteBuffer;\n-  #635 = NameAndType        #855:#856     // array:()[B\n-  #636 = NameAndType        #373:#857     // read:([B)I\n-  #637 = Utf8               Truncated ZIP file\n-  #638 = NameAndType        #858:#859     // access$714:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-  #639 = NameAndType        #411:#414     // remaining:()I\n-  #640 = Class              #860          // java/lang/Math\n-  #641 = NameAndType        #861:#862     // min:(II)I\n-  #642 = NameAndType        #863:#864     // get:([BII)Ljava/nio/ByteBuffer;\n-  #643 = NameAndType        #865:#859     // access$614:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-  #644 = NameAndType        #386:#374     // readFromInflater:([BII)I\n-  #645 = NameAndType        #866:#408     // finished:()Z\n-  #646 = NameAndType        #867:#408     // needsDictionary:()Z\n-  #647 = Utf8               This archive needs a preset dictionary which is not supported by Commons Compress.\n-  #648 = NameAndType        #868:#408     // needsInput:()Z\n-  #649 = NameAndType        #413:#414     // fill:()I\n-  #650 = NameAndType        #869:#374     // inflate:([BII)I\n-  #651 = Utf8               java/util/zip/DataFormatException\n-  #652 = NameAndType        #870:#871     // getMessage:()Ljava/lang/String;\n-  #653 = NameAndType        #872:#873     // initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-  #654 = NameAndType        #388:#389     // close:()V\n-  #655 = NameAndType        #874:#389     // end:()V\n-  #656 = Utf8               java/lang/IllegalArgumentException\n-  #657 = NameAndType        #744:#300     // LFH_SIG:[B\n-  #658 = NameAndType        #400:#401     // checksig:([B[B)Z\n-  #659 = NameAndType        #875:#300     // EOCD_SIG:[B\n-  #660 = NameAndType        #814:#300     // DD_SIG:[B\n-  #661 = NameAndType        #876:#856     // getBytes:()[B\n-  #662 = NameAndType        #407:#408     // currentEntryHasOutstandingBytes:()Z\n-  #663 = NameAndType        #409:#389     // drainCurrentEntryData:()V\n-  #664 = Utf8               java/lang/Long\n-  #665 = NameAndType        #391:#392     // skip:(J)J\n-  #666 = NameAndType        #877:#853     // access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-  #667 = NameAndType        #442:#443     // pushback:([BII)V\n-  #668 = NameAndType        #878:#859     // access$722:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-  #669 = NameAndType        #420:#389     // readDataDescriptor:()V\n-  #670 = NameAndType        #879:#389     // reset:()V\n-  #671 = NameAndType        #880:#881     // clear:()Ljava/nio/ByteBuffer;\n-  #672 = NameAndType        #882:#881     // flip:()Ljava/nio/ByteBuffer;\n-  #673 = NameAndType        #861:#883     // min:(JJ)J\n-  #674 = NameAndType        #884:#871     // getName:()Ljava/lang/String;\n-  #675 = Class              #885          // org/apache/commons/compress/utils/ArchiveUtils\n-  #676 = NameAndType        #886:#887     // sanitize:(Ljava/lang/String;)Ljava/lang/String;\n-  #677 = Utf8               BootstrapMethods\n-  #678 = MethodHandle       6:#888        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #679 = String             #889          // Truncated ZIP entry: \\u0001\n-  #680 = NameAndType        #890:#887     // makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n-  #681 = NameAndType        #419:#449     // count:(J)V\n-  #682 = NameAndType        #891:#443     // setInput:([BII)V\n-  #683 = NameAndType        #415:#417     // readFully:([BI)V\n-  #684 = Class              #892          // org/apache/commons/compress/utils/IOUtils\n-  #685 = NameAndType        #415:#893     // readFully:(Ljava/io/InputStream;[BII)I\n-  #686 = NameAndType        #749:#894     // getValue:([B)J\n-  #687 = NameAndType        #832:#894     // getLongValue:([B)J\n-  #688 = NameAndType        #832:#772     // getLongValue:([BI)J\n-  #689 = Utf8               java/util/zip/ZipEntry\n-  #690 = Utf8               java/io/ByteArrayOutputStream\n-  #691 = NameAndType        #895:#777     // access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n-  #692 = NameAndType        #433:#434     // bufferContainsSignature:(Ljava/io/ByteArrayOutputStream;III)Z\n-  #693 = NameAndType        #438:#439     // cacheBytesRead:(Ljava/io/ByteArrayOutputStream;III)I\n-  #694 = Utf8               compressed and uncompressed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n-  #695 = NameAndType        #896:#856     // toByteArray:()[B\n-  #696 = Utf8               actual and claimed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n-  #697 = Utf8               java/io/ByteArrayInputStream\n-  #698 = NameAndType        #308:#300     // LFH:[B\n-  #699 = NameAndType        #309:#300     // CFH:[B\n-  #700 = NameAndType        #310:#300     // DD:[B\n-  #701 = NameAndType        #897:#443     // write:([BII)V\n-  #702 = NameAndType        #898:#443     // unread:([BII)V\n-  #703 = NameAndType        #899:#449     // pushedBackBytes:(J)V\n-  #704 = NameAndType        #448:#449     // realSkip:(J)V\n-  #705 = NameAndType        #445:#389     // findEocdRecord:()V\n-  #706 = NameAndType        #749:#857     // getValue:([B)I\n-  #707 = NameAndType        #450:#414     // readOneByte:()I\n-  #708 = NameAndType        #451:#452     // isFirstByteOfEocdSig:(I)Z\n-  #709 = NameAndType        #373:#414     // read:()I\n-  #710 = NameAndType        #749:#900     // getValue:([B)Ljava/math/BigInteger;\n-  #711 = NameAndType        #311:#300     // APK_SIGNING_BLOCK_MAGIC:[B\n-  #712 = NameAndType        #750:#901     // valueOf:(J)Ljava/math/BigInteger;\n-  #713 = NameAndType        #902:#903     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #714 = NameAndType        #904:#414     // signum:()I\n-  #715 = NameAndType        #905:#414     // intValue:()I\n-  #716 = NameAndType        #906:#907     // abs:(I)I\n-  #717 = NameAndType        #312:#313     // LONG_MAX:Ljava/math/BigInteger;\n-  #718 = NameAndType        #908:#909     // compareTo:(Ljava/math/BigInteger;)I\n-  #719 = NameAndType        #910:#911     // negate:()Ljava/math/BigInteger;\n-  #720 = NameAndType        #912:#379     // longValue:()J\n-  #721 = Class              #913          // java/util/Arrays\n-  #722 = NameAndType        #745:#401     // equals:([B[B)Z\n-  #723 = Utf8               org/apache/commons/compress/archivers/ArchiveInputStream\n-  #724 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #725 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1\n-  #726 = Utf8                while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n-  #727 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #728 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #729 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n-  #730 = Utf8               java/io/InputStream\n-  #731 = Utf8               java/lang/Throwable\n-  #732 = Utf8               java/math/BigInteger\n-  #733 = Utf8               (I)V\n-  #734 = Utf8               (Z)V\n-  #735 = Utf8               java/nio/ByteBuffer\n-  #736 = Utf8               allocate\n-  #737 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #738 = Utf8               getZipEncoding\n-  #739 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #740 = Utf8               capacity\n-  #741 = Utf8               (Ljava/io/InputStream;I)V\n-  #742 = Utf8               limit\n-  #743 = Utf8               getBytesRead\n-  #744 = Utf8               LFH_SIG\n-  #745 = Utf8               equals\n-  #746 = Utf8               (Ljava/lang/Object;)Z\n-  #747 = Utf8               CFH_SIG\n-  #748 = Utf8               AED_SIG\n-  #749 = Utf8               getValue\n-  #750 = Utf8               valueOf\n-  #751 = Utf8               (J)Ljava/lang/Long;\n-  #752 = Utf8               java/lang/String\n-  #753 = Utf8               format\n-  #754 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #755 = Utf8               (Ljava/lang/String;)V\n-  #756 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1;)V\n-  #757 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-  #758 = Utf8               ([BI)I\n-  #759 = Utf8               access$100\n-  #760 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #761 = Utf8               setPlatform\n-  #762 = Utf8               parse\n-  #763 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #764 = Utf8               usesUTF8ForNames\n-  #765 = Utf8               UTF8_ZIP_ENCODING\n-  #766 = Utf8               usesDataDescriptor\n-  #767 = Utf8               access$202\n-  #768 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n-  #769 = Utf8               setGeneralPurposeBit\n-  #770 = Utf8               (Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-  #771 = Utf8               setMethod\n-  #772 = Utf8               ([BI)J\n-  #773 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-  #774 = Utf8               dosToJavaTime\n-  #775 = Utf8               setTime\n-  #776 = Utf8               access$200\n-  #777 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n-  #778 = Utf8               setCrc\n-  #779 = Utf8               decode\n-  #780 = Utf8               ([B)Ljava/lang/String;\n-  #781 = Utf8               setName\n-  #782 = Utf8               (Ljava/lang/String;[B)V\n-  #783 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #784 = Utf8               NameSource\n-  #785 = Utf8               NAME_WITH_EFS_FLAG\n-  #786 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #787 = Utf8               setNameSource\n-  #788 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #789 = Utf8               setExtra\n-  #790 = Utf8               setNameAndCommentFromExtraFields\n-  #791 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #792 = Utf8               setLocalHeaderOffset\n-  #793 = Utf8               setDataOffset\n-  #794 = Utf8               setStreamContiguous\n-  #795 = Utf8               getMethod\n-  #796 = Utf8               getMethodByCode\n-  #797 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #798 = Utf8               getCompressedSize\n-  #799 = Utf8               canHandleEntryData\n-  #800 = Utf8               STORED\n-  #801 = Utf8               DEFLATED\n-  #802 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V\n-  #803 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod\n-  #804 = Utf8               [I\n-  #805 = Utf8               ordinal\n-  #806 = Utf8               access$302\n-  #807 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n-  #808 = Utf8               getGeneralPurposeBit\n-  #809 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #810 = Utf8               getSlidingDictionarySize\n-  #811 = Utf8               getNumberOfShannonFanoTrees\n-  #812 = Utf8               (IILjava/io/InputStream;)V\n-  #813 = Utf8               ENHANCED_DEFLATED\n-  #814 = Utf8               DD_SIG\n-  #815 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n-  #816 = Utf8               Feature\n-  #817 = Utf8               SPLITTING\n-  #818 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #819 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n-  #820 = Utf8               SINGLE_SEGMENT_SPLIT_MARKER\n-  #821 = Utf8               java/lang/System\n-  #822 = Utf8               arraycopy\n-  #823 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #824 = Utf8               HEADER_ID\n-  #825 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #826 = Utf8               getExtraField\n-  #827 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #828 = Utf8               access$402\n-  #829 = Utf8               ZIP64_MAGIC\n-  #830 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #831 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #832 = Utf8               getLongValue\n-  #833 = Utf8               setCompressedSize\n-  #834 = Utf8               getSize\n-  #835 = Utf8               setSize\n-  #836 = Utf8               checkRequestedFeatures\n-  #837 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #838 = Utf8               DATA_DESCRIPTOR\n-  #839 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #840 = Utf8               UNKNOWN_COMPRESSED_SIZE\n-  #841 = Utf8               UNSHRINKING\n-  #842 = Utf8               getCode\n-  #843 = Utf8               IMPLODING\n-  #844 = Utf8               BZIP2\n-  #845 = Utf8               access$300\n-  #846 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n-  #847 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #848 = Utf8               access$500\n-  #849 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/util/zip/CRC32;\n-  #850 = Utf8               java/util/zip/CRC32\n-  #851 = Utf8               update\n-  #852 = Utf8               access$600\n-  #853 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-  #854 = Utf8               position\n-  #855 = Utf8               array\n-  #856 = Utf8               ()[B\n-  #857 = Utf8               ([B)I\n-  #858 = Utf8               access$714\n-  #859 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-  #860 = Utf8               java/lang/Math\n-  #861 = Utf8               min\n-  #862 = Utf8               (II)I\n-  #863 = Utf8               get\n-  #864 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #865 = Utf8               access$614\n-  #866 = Utf8               finished\n-  #867 = Utf8               needsDictionary\n-  #868 = Utf8               needsInput\n-  #869 = Utf8               inflate\n-  #870 = Utf8               getMessage\n-  #871 = Utf8               ()Ljava/lang/String;\n-  #872 = Utf8               initCause\n-  #873 = Utf8               (Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-  #874 = Utf8               end\n-  #875 = Utf8               EOCD_SIG\n-  #876 = Utf8               getBytes\n-  #877 = Utf8               access$700\n-  #878 = Utf8               access$722\n-  #879 = Utf8               reset\n-  #880 = Utf8               clear\n-  #881 = Utf8               ()Ljava/nio/ByteBuffer;\n-  #882 = Utf8               flip\n-  #883 = Utf8               (JJ)J\n-  #884 = Utf8               getName\n-  #885 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n-  #886 = Utf8               sanitize\n-  #887 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #888 = Methodref          #914.#915     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #889 = Utf8               Truncated ZIP entry: \\u0001\n-  #890 = Utf8               makeConcatWithConstants\n-  #891 = Utf8               setInput\n-  #892 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #893 = Utf8               (Ljava/io/InputStream;[BII)I\n-  #894 = Utf8               ([B)J\n-  #895 = Utf8               access$400\n-  #896 = Utf8               toByteArray\n-  #897 = Utf8               write\n-  #898 = Utf8               unread\n-  #899 = Utf8               pushedBackBytes\n-  #900 = Utf8               ([B)Ljava/math/BigInteger;\n-  #901 = Utf8               (J)Ljava/math/BigInteger;\n-  #902 = Utf8               add\n-  #903 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #904 = Utf8               signum\n-  #905 = Utf8               intValue\n-  #906 = Utf8               abs\n-  #907 = Utf8               (I)I\n-  #908 = Utf8               compareTo\n-  #909 = Utf8               (Ljava/math/BigInteger;)I\n-  #910 = Utf8               negate\n-  #911 = Utf8               ()Ljava/math/BigInteger;\n-  #912 = Utf8               longValue\n-  #913 = Utf8               java/util/Arrays\n-  #914 = Class              #916          // java/lang/invoke/StringConcatFactory\n-  #915 = NameAndType        #890:#919     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #916 = Utf8               java/lang/invoke/StringConcatFactory\n-  #917 = Class              #921          // java/lang/invoke/MethodHandles$Lookup\n-  #918 = Utf8               Lookup\n-  #919 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #920 = Class              #922          // java/lang/invoke/MethodHandles\n-  #921 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #922 = Utf8               java/lang/invoke/MethodHandles\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/ZipConstants\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+    #3 = Methodref          #4.#5         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.count:(I)V\n+    #4 = Class              #6            // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+    #5 = NameAndType        #7:#8         // count:(I)V\n+    #6 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+    #7 = Utf8               count\n+    #8 = Utf8               (I)V\n+    #9 = Fieldref           #4.#10        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+   #10 = NameAndType        #11:#12       // current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+   #11 = Utf8               current\n+   #12 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+   #13 = Class              #14           // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #14 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #15 = String             #16           // UTF8\n+   #16 = Utf8               UTF8\n+   #17 = Methodref          #4.#18        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n+   #18 = NameAndType        #19:#20       // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n+   #19 = Utf8               <init>\n+   #20 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;)V\n+   #21 = Methodref          #4.#22        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;Z)V\n+   #22 = NameAndType        #19:#23       // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;Z)V\n+   #23 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;Z)V\n+   #24 = Methodref          #4.#25        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n+   #25 = NameAndType        #19:#26       // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n+   #26 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n+   #27 = Methodref          #4.#28        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n+   #28 = NameAndType        #19:#29       // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n+   #29 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n+   #30 = Methodref          #31.#32       // org/apache/commons/compress/archivers/ArchiveInputStream.\"<init>\":()V\n+   #31 = Class              #33           // org/apache/commons/compress/archivers/ArchiveInputStream\n+   #32 = NameAndType        #19:#34       // \"<init>\":()V\n+   #33 = Utf8               org/apache/commons/compress/archivers/ArchiveInputStream\n+   #34 = Utf8               ()V\n+   #35 = Class              #36           // java/util/zip/Inflater\n+   #36 = Utf8               java/util/zip/Inflater\n+   #37 = Methodref          #35.#38       // java/util/zip/Inflater.\"<init>\":(Z)V\n+   #38 = NameAndType        #19:#39       // \"<init>\":(Z)V\n+   #39 = Utf8               (Z)V\n+   #40 = Fieldref           #4.#41        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.inf:Ljava/util/zip/Inflater;\n+   #41 = NameAndType        #42:#43       // inf:Ljava/util/zip/Inflater;\n+   #42 = Utf8               inf\n+   #43 = Utf8               Ljava/util/zip/Inflater;\n+   #44 = Class              #45           // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+   #45 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+   #46 = Methodref          #47.#48       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #47 = Class              #49           // java/nio/ByteBuffer\n+   #48 = NameAndType        #50:#51       // allocate:(I)Ljava/nio/ByteBuffer;\n+   #49 = Utf8               java/nio/ByteBuffer\n+   #50 = Utf8               allocate\n+   #51 = Utf8               (I)Ljava/nio/ByteBuffer;\n+   #52 = Fieldref           #4.#53        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.buf:Ljava/nio/ByteBuffer;\n+   #53 = NameAndType        #54:#55       // buf:Ljava/nio/ByteBuffer;\n+   #54 = Utf8               buf\n+   #55 = Utf8               Ljava/nio/ByteBuffer;\n+   #56 = Fieldref           #4.#57        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.closed:Z\n+   #57 = NameAndType        #58:#59       // closed:Z\n+   #58 = Utf8               closed\n+   #59 = Utf8               Z\n+   #60 = Fieldref           #4.#61        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.hitCentralDirectory:Z\n+   #61 = NameAndType        #62:#59       // hitCentralDirectory:Z\n+   #62 = Utf8               hitCentralDirectory\n+   #63 = Fieldref           #4.#64        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.lastStoredEntry:Ljava/io/ByteArrayInputStream;\n+   #64 = NameAndType        #65:#66       // lastStoredEntry:Ljava/io/ByteArrayInputStream;\n+   #65 = Utf8               lastStoredEntry\n+   #66 = Utf8               Ljava/io/ByteArrayInputStream;\n+   #67 = Fieldref           #4.#68        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.allowStoredEntriesWithDataDescriptor:Z\n+   #68 = NameAndType        #69:#59       // allowStoredEntriesWithDataDescriptor:Z\n+   #69 = Utf8               allowStoredEntriesWithDataDescriptor\n+   #70 = Fieldref           #4.#71        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.uncompressedCount:J\n+   #71 = NameAndType        #72:#73       // uncompressedCount:J\n+   #72 = Utf8               uncompressedCount\n+   #73 = Utf8               J\n+   #74 = Fieldref           #4.#75        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.lfhBuf:[B\n+   #75 = NameAndType        #76:#77       // lfhBuf:[B\n+   #76 = Utf8               lfhBuf\n+   #77 = Utf8               [B\n+   #78 = Fieldref           #4.#79        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.skipBuf:[B\n+   #79 = NameAndType        #80:#77       // skipBuf:[B\n+   #80 = Utf8               skipBuf\n+   #81 = Fieldref           #4.#82        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.shortBuf:[B\n+   #82 = NameAndType        #83:#77       // shortBuf:[B\n+   #83 = Utf8               shortBuf\n+   #84 = Fieldref           #4.#85        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.wordBuf:[B\n+   #85 = NameAndType        #86:#77       // wordBuf:[B\n+   #86 = Utf8               wordBuf\n+   #87 = Fieldref           #4.#88        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.twoDwordBuf:[B\n+   #88 = NameAndType        #89:#77       // twoDwordBuf:[B\n+   #89 = Utf8               twoDwordBuf\n+   #90 = Fieldref           #4.#91        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.entriesRead:I\n+   #91 = NameAndType        #92:#93       // entriesRead:I\n+   #92 = Utf8               entriesRead\n+   #93 = Utf8               I\n+   #94 = Fieldref           #4.#95        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.encoding:Ljava/lang/String;\n+   #95 = NameAndType        #96:#97       // encoding:Ljava/lang/String;\n+   #96 = Utf8               encoding\n+   #97 = Utf8               Ljava/lang/String;\n+   #98 = Methodref          #13.#99       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #99 = NameAndType        #100:#101     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #100 = Utf8               getZipEncoding\n+  #101 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #102 = Fieldref           #4.#103       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #103 = NameAndType        #104:#105     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #104 = Utf8               zipEncoding\n+  #105 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #106 = Fieldref           #4.#107       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.useUnicodeExtraFields:Z\n+  #107 = NameAndType        #108:#59      // useUnicodeExtraFields:Z\n+  #108 = Utf8               useUnicodeExtraFields\n+  #109 = Class              #110          // java/io/PushbackInputStream\n+  #110 = Utf8               java/io/PushbackInputStream\n+  #111 = Methodref          #47.#112      // java/nio/ByteBuffer.capacity:()I\n+  #112 = NameAndType        #113:#114     // capacity:()I\n+  #113 = Utf8               capacity\n+  #114 = Utf8               ()I\n+  #115 = Methodref          #109.#116     // java/io/PushbackInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+  #116 = NameAndType        #19:#117      // \"<init>\":(Ljava/io/InputStream;I)V\n+  #117 = Utf8               (Ljava/io/InputStream;I)V\n+  #118 = Fieldref           #4.#119       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.in:Ljava/io/InputStream;\n+  #119 = NameAndType        #120:#121     // in:Ljava/io/InputStream;\n+  #120 = Utf8               in\n+  #121 = Utf8               Ljava/io/InputStream;\n+  #122 = Fieldref           #4.#123       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.skipSplitSig:Z\n+  #123 = NameAndType        #124:#59      // skipSplitSig:Z\n+  #124 = Utf8               skipSplitSig\n+  #125 = Methodref          #47.#126      // java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+  #126 = NameAndType        #127:#51      // limit:(I)Ljava/nio/ByteBuffer;\n+  #127 = Utf8               limit\n+  #128 = Methodref          #4.#129       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.closeEntry:()V\n+  #129 = NameAndType        #130:#34      // closeEntry:()V\n+  #130 = Utf8               closeEntry\n+  #131 = Methodref          #4.#132       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.getBytesRead:()J\n+  #132 = NameAndType        #133:#134     // getBytesRead:()J\n+  #133 = Utf8               getBytesRead\n+  #134 = Utf8               ()J\n+  #135 = Methodref          #4.#136       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readFirstLocalFileHeader:([B)V\n+  #136 = NameAndType        #137:#138     // readFirstLocalFileHeader:([B)V\n+  #137 = Utf8               readFirstLocalFileHeader\n+  #138 = Utf8               ([B)V\n+  #139 = Methodref          #4.#140       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readFully:([B)V\n+  #140 = NameAndType        #141:#138     // readFully:([B)V\n+  #141 = Utf8               readFully\n+  #142 = Class              #143          // java/io/EOFException\n+  #143 = Utf8               java/io/EOFException\n+  #144 = Class              #145          // org/apache/commons/compress/archivers/zip/ZipLong\n+  #145 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+  #146 = Methodref          #144.#147     // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+  #147 = NameAndType        #19:#138      // \"<init>\":([B)V\n+  #148 = Fieldref           #144.#149     // org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #149 = NameAndType        #150:#151     // LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #150 = Utf8               LFH_SIG\n+  #151 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #152 = Methodref          #144.#153     // org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+  #153 = NameAndType        #154:#155     // equals:(Ljava/lang/Object;)Z\n+  #154 = Utf8               equals\n+  #155 = Utf8               (Ljava/lang/Object;)Z\n+  #156 = Fieldref           #144.#157     // org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #157 = NameAndType        #158:#151     // CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #158 = Utf8               CFH_SIG\n+  #159 = Fieldref           #144.#160     // org/apache/commons/compress/archivers/zip/ZipLong.AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #160 = NameAndType        #161:#151     // AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #161 = Utf8               AED_SIG\n+  #162 = Methodref          #4.#163       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.isApkSigningBlock:([B)Z\n+  #163 = NameAndType        #164:#165     // isApkSigningBlock:([B)Z\n+  #164 = Utf8               isApkSigningBlock\n+  #165 = Utf8               ([B)Z\n+  #166 = Methodref          #4.#167       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.skipRemainderOfArchive:()V\n+  #167 = NameAndType        #168:#34      // skipRemainderOfArchive:()V\n+  #168 = Utf8               skipRemainderOfArchive\n+  #169 = Class              #170          // java/util/zip/ZipException\n+  #170 = Utf8               java/util/zip/ZipException\n+  #171 = String             #172          // Unexpected record signature: 0X%X\n+  #172 = Utf8               Unexpected record signature: 0X%X\n+  #173 = Class              #174          // java/lang/Object\n+  #174 = Utf8               java/lang/Object\n+  #175 = Methodref          #144.#176     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+  #176 = NameAndType        #177:#134     // getValue:()J\n+  #177 = Utf8               getValue\n+  #178 = Methodref          #179.#180     // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n+  #179 = Class              #181          // java/lang/Long\n+  #180 = NameAndType        #182:#183     // valueOf:(J)Ljava/lang/Long;\n+  #181 = Utf8               java/lang/Long\n+  #182 = Utf8               valueOf\n+  #183 = Utf8               (J)Ljava/lang/Long;\n+  #184 = Methodref          #185.#186     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #185 = Class              #187          // java/lang/String\n+  #186 = NameAndType        #188:#189     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #187 = Utf8               java/lang/String\n+  #188 = Utf8               format\n+  #189 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #190 = Methodref          #169.#191     // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+  #191 = NameAndType        #19:#192      // \"<init>\":(Ljava/lang/String;)V\n+  #192 = Utf8               (Ljava/lang/String;)V\n+  #193 = Class              #194          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry\n+  #194 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry\n+  #195 = Methodref          #193.#196     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1;)V\n+  #196 = NameAndType        #19:#197      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1;)V\n+  #197 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1;)V\n+  #198 = Methodref          #199.#200     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+  #199 = Class              #201          // org/apache/commons/compress/archivers/zip/ZipShort\n+  #200 = NameAndType        #177:#202     // getValue:([BI)I\n+  #201 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+  #202 = Utf8               ([BI)I\n+  #203 = Methodref          #193.#204     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #204 = NameAndType        #205:#206     // access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #205 = Utf8               access$100\n+  #206 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #207 = Class              #208          // org/apache/commons/compress/archivers/zip/ZipFile\n+  #208 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n+  #209 = Methodref          #210.#211     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setPlatform:(I)V\n+  #210 = Class              #212          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #211 = NameAndType        #213:#8       // setPlatform:(I)V\n+  #212 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #213 = Utf8               setPlatform\n+  #214 = Methodref          #215.#216     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #215 = Class              #217          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #216 = NameAndType        #218:#219     // parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #217 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #218 = Utf8               parse\n+  #219 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #220 = Methodref          #215.#221     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n+  #221 = NameAndType        #222:#223     // usesUTF8ForNames:()Z\n+  #222 = Utf8               usesUTF8ForNames\n+  #223 = Utf8               ()Z\n+  #224 = Fieldref           #13.#225      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #225 = NameAndType        #226:#105     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #226 = Utf8               UTF8_ZIP_ENCODING\n+  #227 = Methodref          #215.#228     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesDataDescriptor:()Z\n+  #228 = NameAndType        #229:#223     // usesDataDescriptor:()Z\n+  #229 = Utf8               usesDataDescriptor\n+  #230 = Methodref          #193.#231     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$202:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n+  #231 = NameAndType        #232:#233     // access$202:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n+  #232 = Utf8               access$202\n+  #233 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n+  #234 = Methodref          #210.#235     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+  #235 = NameAndType        #236:#237     // setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+  #236 = Utf8               setGeneralPurposeBit\n+  #237 = Utf8               (Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+  #238 = Methodref          #210.#239     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setMethod:(I)V\n+  #239 = NameAndType        #240:#8       // setMethod:(I)V\n+  #240 = Utf8               setMethod\n+  #241 = Methodref          #144.#242     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+  #242 = NameAndType        #177:#243     // getValue:([BI)J\n+  #243 = Utf8               ([BI)J\n+  #244 = Methodref          #245.#246     // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n+  #245 = Class              #247          // org/apache/commons/compress/archivers/zip/ZipUtil\n+  #246 = NameAndType        #248:#249     // dosToJavaTime:(J)J\n+  #247 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+  #248 = Utf8               dosToJavaTime\n+  #249 = Utf8               (J)J\n+  #250 = Methodref          #210.#251     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setTime:(J)V\n+  #251 = NameAndType        #252:#253     // setTime:(J)V\n+  #252 = Utf8               setTime\n+  #253 = Utf8               (J)V\n+  #254 = Methodref          #193.#255     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+  #255 = NameAndType        #256:#257     // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+  #256 = Utf8               access$200\n+  #257 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+  #258 = Methodref          #210.#259     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n+  #259 = NameAndType        #260:#253     // setCrc:(J)V\n+  #260 = Utf8               setCrc\n+  #261 = Methodref          #144.#262     // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+  #262 = NameAndType        #19:#263      // \"<init>\":([BI)V\n+  #263 = Utf8               ([BI)V\n+  #264 = InterfaceMethodref #265.#266     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+  #265 = Class              #267          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #266 = NameAndType        #268:#269     // decode:([B)Ljava/lang/String;\n+  #267 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #268 = Utf8               decode\n+  #269 = Utf8               ([B)Ljava/lang/String;\n+  #270 = Methodref          #210.#271     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;[B)V\n+  #271 = NameAndType        #272:#273     // setName:(Ljava/lang/String;[B)V\n+  #272 = Utf8               setName\n+  #273 = Utf8               (Ljava/lang/String;[B)V\n+  #274 = Fieldref           #275.#276     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #275 = Class              #277          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #276 = NameAndType        #278:#279     // NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #277 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #278 = Utf8               NAME_WITH_EFS_FLAG\n+  #279 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #280 = Methodref          #210.#281     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #281 = NameAndType        #282:#283     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #282 = Utf8               setNameSource\n+  #283 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #284 = Methodref          #210.#285     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setExtra:([B)V\n+  #285 = NameAndType        #286:#138     // setExtra:([B)V\n+  #286 = Utf8               setExtra\n+  #287 = Methodref          #245.#288     // org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #288 = NameAndType        #289:#290     // setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #289 = Utf8               setNameAndCommentFromExtraFields\n+  #290 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #291 = Methodref          #4.#292       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.processZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+  #292 = NameAndType        #293:#294     // processZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+  #293 = Utf8               processZip64Extra\n+  #294 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+  #295 = Methodref          #210.#296     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n+  #296 = NameAndType        #297:#253     // setLocalHeaderOffset:(J)V\n+  #297 = Utf8               setLocalHeaderOffset\n+  #298 = Methodref          #210.#299     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n+  #299 = NameAndType        #300:#253     // setDataOffset:(J)V\n+  #300 = Utf8               setDataOffset\n+  #301 = Methodref          #210.#302     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setStreamContiguous:(Z)V\n+  #302 = NameAndType        #303:#39      // setStreamContiguous:(Z)V\n+  #303 = Utf8               setStreamContiguous\n+  #304 = Methodref          #210.#305     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+  #305 = NameAndType        #306:#114     // getMethod:()I\n+  #306 = Utf8               getMethod\n+  #307 = Methodref          #308.#309     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #308 = Class              #310          // org/apache/commons/compress/archivers/zip/ZipMethod\n+  #309 = NameAndType        #311:#312     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #310 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n+  #311 = Utf8               getMethodByCode\n+  #312 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #313 = Methodref          #210.#314     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+  #314 = NameAndType        #315:#134     // getCompressedSize:()J\n+  #315 = Utf8               getCompressedSize\n+  #316 = Class              #317          // org/apache/commons/compress/archivers/ArchiveEntry\n+  #317 = Utf8               org/apache/commons/compress/archivers/ArchiveEntry\n+  #318 = Long               -1l\n+  #320 = Methodref          #245.#321     // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #321 = NameAndType        #322:#323     // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #322 = Utf8               canHandleEntryData\n+  #323 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #324 = Fieldref           #308.#325     // org/apache/commons/compress/archivers/zip/ZipMethod.STORED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #325 = NameAndType        #326:#327     // STORED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #326 = Utf8               STORED\n+  #327 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #328 = Fieldref           #308.#329     // org/apache/commons/compress/archivers/zip/ZipMethod.DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #329 = NameAndType        #330:#327     // DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #330 = Utf8               DEFLATED\n+  #331 = Class              #332          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream\n+  #332 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream\n+  #333 = Methodref          #331.#334     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V\n+  #334 = NameAndType        #19:#335      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V\n+  #335 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V\n+  #336 = Fieldref           #337.#338     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+  #337 = Class              #339          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1\n+  #338 = NameAndType        #340:#341     // $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+  #339 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1\n+  #340 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod\n+  #341 = Utf8               [I\n+  #342 = Methodref          #308.#343     // org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n+  #343 = NameAndType        #344:#114     // ordinal:()I\n+  #344 = Utf8               ordinal\n+  #345 = Class              #346          // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+  #346 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+  #347 = Methodref          #345.#348     // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #348 = NameAndType        #19:#349      // \"<init>\":(Ljava/io/InputStream;)V\n+  #349 = Utf8               (Ljava/io/InputStream;)V\n+  #350 = Methodref          #193.#351     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n+  #351 = NameAndType        #352:#353     // access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n+  #352 = Utf8               access$302\n+  #353 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n+  #354 = Class              #355          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+  #355 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+  #356 = Methodref          #210.#357     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #357 = NameAndType        #358:#359     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #358 = Utf8               getGeneralPurposeBit\n+  #359 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #360 = Methodref          #215.#361     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n+  #361 = NameAndType        #362:#114     // getSlidingDictionarySize:()I\n+  #362 = Utf8               getSlidingDictionarySize\n+  #363 = Methodref          #215.#364     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n+  #364 = NameAndType        #365:#114     // getNumberOfShannonFanoTrees:()I\n+  #365 = Utf8               getNumberOfShannonFanoTrees\n+  #366 = Methodref          #354.#367     // org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n+  #367 = NameAndType        #19:#368      // \"<init>\":(IILjava/io/InputStream;)V\n+  #368 = Utf8               (IILjava/io/InputStream;)V\n+  #369 = Class              #370          // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+  #370 = Utf8               org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+  #371 = Methodref          #369.#348     // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #372 = Class              #373          // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+  #373 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+  #374 = Methodref          #372.#348     // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #375 = Fieldref           #308.#376     // org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #376 = NameAndType        #377:#327     // ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #377 = Utf8               ENHANCED_DEFLATED\n+  #378 = Fieldref           #144.#379     // org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #379 = NameAndType        #380:#151     // DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #380 = Utf8               DD_SIG\n+  #381 = Class              #382          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  #382 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  #383 = Fieldref           #384.#385     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.SPLITTING:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #384 = Class              #386          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n+  #385 = NameAndType        #387:#388     // SPLITTING:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #386 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n+  #387 = Utf8               SPLITTING\n+  #388 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #389 = Methodref          #381.#390     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n+  #390 = NameAndType        #19:#391      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n+  #391 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n+  #392 = Fieldref           #144.#393     // org/apache/commons/compress/archivers/zip/ZipLong.SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #393 = NameAndType        #394:#151     // SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #394 = Utf8               SINGLE_SEGMENT_SPLIT_MARKER\n+  #395 = Methodref          #396.#397     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #396 = Class              #398          // java/lang/System\n+  #397 = NameAndType        #399:#400     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #398 = Utf8               java/lang/System\n+  #399 = Utf8               arraycopy\n+  #400 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #401 = Fieldref           #402.#403     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #402 = Class              #404          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+  #403 = NameAndType        #405:#406     // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #404 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+  #405 = Utf8               HEADER_ID\n+  #406 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #407 = Methodref          #210.#408     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #408 = NameAndType        #409:#410     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #409 = Utf8               getExtraField\n+  #410 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #411 = Methodref          #193.#412     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n+  #412 = NameAndType        #413:#233     // access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n+  #413 = Utf8               access$402\n+  #414 = Fieldref           #144.#415     // org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #415 = NameAndType        #416:#151     // ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #416 = Utf8               ZIP64_MAGIC\n+  #417 = Methodref          #402.#418     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #418 = NameAndType        #315:#419     // getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #419 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #420 = Methodref          #421.#422     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+  #421 = Class              #423          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #422 = NameAndType        #424:#134     // getLongValue:()J\n+  #423 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #424 = Utf8               getLongValue\n+  #425 = Methodref          #210.#426     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+  #426 = NameAndType        #427:#253     // setCompressedSize:(J)V\n+  #427 = Utf8               setCompressedSize\n+  #428 = Methodref          #402.#429     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #429 = NameAndType        #430:#419     // getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #430 = Utf8               getSize\n+  #431 = Methodref          #210.#432     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+  #432 = NameAndType        #433:#253     // setSize:(J)V\n+  #433 = Utf8               setSize\n+  #434 = Methodref          #4.#435       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #435 = NameAndType        #436:#437     // getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #436 = Utf8               getNextZipEntry\n+  #437 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #438 = Methodref          #4.#439       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.supportsDataDescriptorFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #439 = NameAndType        #440:#323     // supportsDataDescriptorFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #440 = Utf8               supportsDataDescriptorFor\n+  #441 = Methodref          #4.#442       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.supportsCompressedSizeFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #442 = NameAndType        #443:#323     // supportsCompressedSizeFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #443 = Utf8               supportsCompressedSizeFor\n+  #444 = Class              #445          // java/io/IOException\n+  #445 = Utf8               java/io/IOException\n+  #446 = String             #447          // The stream is closed\n+  #447 = Utf8               The stream is closed\n+  #448 = Methodref          #444.#191     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #449 = Class              #450          // java/lang/ArrayIndexOutOfBoundsException\n+  #450 = Utf8               java/lang/ArrayIndexOutOfBoundsException\n+  #451 = Methodref          #449.#32      // java/lang/ArrayIndexOutOfBoundsException.\"<init>\":()V\n+  #452 = Methodref          #245.#453     // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #453 = NameAndType        #454:#455     // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #454 = Utf8               checkRequestedFeatures\n+  #455 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #456 = Fieldref           #384.#457     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.DATA_DESCRIPTOR:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #457 = NameAndType        #458:#388     // DATA_DESCRIPTOR:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #458 = Utf8               DATA_DESCRIPTOR\n+  #459 = Methodref          #381.#460     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #460 = NameAndType        #19:#461      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #461 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #462 = Fieldref           #384.#463     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.UNKNOWN_COMPRESSED_SIZE:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #463 = NameAndType        #464:#388     // UNKNOWN_COMPRESSED_SIZE:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #464 = Utf8               UNKNOWN_COMPRESSED_SIZE\n+  #465 = Methodref          #4.#466       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readStored:([BII)I\n+  #466 = NameAndType        #467:#468     // readStored:([BII)I\n+  #467 = Utf8               readStored\n+  #468 = Utf8               ([BII)I\n+  #469 = Methodref          #4.#470       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readDeflated:([BII)I\n+  #470 = NameAndType        #471:#468     // readDeflated:([BII)I\n+  #471 = Utf8               readDeflated\n+  #472 = Fieldref           #308.#473     // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #473 = NameAndType        #474:#327     // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #474 = Utf8               UNSHRINKING\n+  #475 = Methodref          #308.#476     // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+  #476 = NameAndType        #477:#114     // getCode:()I\n+  #477 = Utf8               getCode\n+  #478 = Fieldref           #308.#479     // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #479 = NameAndType        #480:#327     // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #480 = Utf8               IMPLODING\n+  #481 = Fieldref           #308.#482     // org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #482 = NameAndType        #483:#327     // BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #483 = Utf8               BZIP2\n+  #484 = Methodref          #193.#485     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n+  #485 = NameAndType        #486:#487     // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n+  #486 = Utf8               access$300\n+  #487 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n+  #488 = Methodref          #489.#490     // java/io/InputStream.read:([BII)I\n+  #489 = Class              #491          // java/io/InputStream\n+  #490 = NameAndType        #492:#468     // read:([BII)I\n+  #491 = Utf8               java/io/InputStream\n+  #492 = Utf8               read\n+  #493 = Methodref          #381.#494     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #494 = NameAndType        #19:#495      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #495 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #496 = Methodref          #193.#497     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/util/zip/CRC32;\n+  #497 = NameAndType        #498:#499     // access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/util/zip/CRC32;\n+  #498 = Utf8               access$500\n+  #499 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/util/zip/CRC32;\n+  #500 = Methodref          #501.#502     // java/util/zip/CRC32.update:([BII)V\n+  #501 = Class              #503          // java/util/zip/CRC32\n+  #502 = NameAndType        #504:#505     // update:([BII)V\n+  #503 = Utf8               java/util/zip/CRC32\n+  #504 = Utf8               update\n+  #505 = Utf8               ([BII)V\n+  #506 = Methodref          #193.#507     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+  #507 = NameAndType        #508:#509     // access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+  #508 = Utf8               access$600\n+  #509 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+  #510 = Methodref          #4.#511       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.getBytesInflated:()J\n+  #511 = NameAndType        #512:#134     // getBytesInflated:()J\n+  #512 = Utf8               getBytesInflated\n+  #513 = Methodref          #345.#514     // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getCompressedCount:()J\n+  #514 = NameAndType        #515:#134     // getCompressedCount:()J\n+  #515 = Utf8               getCompressedCount\n+  #516 = Methodref          #354.#514     // org/apache/commons/compress/archivers/zip/ExplodingInputStream.getCompressedCount:()J\n+  #517 = Methodref          #372.#514     // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.getCompressedCount:()J\n+  #518 = Methodref          #369.#514     // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.getCompressedCount:()J\n+  #519 = Methodref          #4.#520       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readStoredEntry:()V\n+  #520 = NameAndType        #521:#34      // readStoredEntry:()V\n+  #521 = Utf8               readStoredEntry\n+  #522 = Methodref          #523.#490     // java/io/ByteArrayInputStream.read:([BII)I\n+  #523 = Class              #524          // java/io/ByteArrayInputStream\n+  #524 = Utf8               java/io/ByteArrayInputStream\n+  #525 = Methodref          #210.#526     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+  #526 = NameAndType        #430:#134     // getSize:()J\n+  #527 = Methodref          #47.#528      // java/nio/ByteBuffer.position:()I\n+  #528 = NameAndType        #529:#114     // position:()I\n+  #529 = Utf8               position\n+  #530 = Methodref          #47.#531      // java/nio/ByteBuffer.limit:()I\n+  #531 = NameAndType        #127:#114     // limit:()I\n+  #532 = Methodref          #47.#533      // java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n+  #533 = NameAndType        #529:#51      // position:(I)Ljava/nio/ByteBuffer;\n+  #534 = Methodref          #47.#535      // java/nio/ByteBuffer.array:()[B\n+  #535 = NameAndType        #536:#537     // array:()[B\n+  #536 = Utf8               array\n+  #537 = Utf8               ()[B\n+  #538 = Methodref          #489.#539     // java/io/InputStream.read:([B)I\n+  #539 = NameAndType        #492:#540     // read:([B)I\n+  #540 = Utf8               ([B)I\n+  #541 = String             #542          // Truncated ZIP file\n+  #542 = Utf8               Truncated ZIP file\n+  #543 = Methodref          #193.#544     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$714:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+  #544 = NameAndType        #545:#546     // access$714:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+  #545 = Utf8               access$714\n+  #546 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+  #547 = Methodref          #47.#548      // java/nio/ByteBuffer.remaining:()I\n+  #548 = NameAndType        #549:#114     // remaining:()I\n+  #549 = Utf8               remaining\n+  #550 = Methodref          #551.#552     // java/lang/Math.min:(II)I\n+  #551 = Class              #553          // java/lang/Math\n+  #552 = NameAndType        #554:#555     // min:(II)I\n+  #553 = Utf8               java/lang/Math\n+  #554 = Utf8               min\n+  #555 = Utf8               (II)I\n+  #556 = Methodref          #47.#557      // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+  #557 = NameAndType        #558:#559     // get:([BII)Ljava/nio/ByteBuffer;\n+  #558 = Utf8               get\n+  #559 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #560 = Methodref          #193.#561     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$614:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+  #561 = NameAndType        #562:#546     // access$614:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+  #562 = Utf8               access$614\n+  #563 = Methodref          #4.#564       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readFromInflater:([BII)I\n+  #564 = NameAndType        #565:#468     // readFromInflater:([BII)I\n+  #565 = Utf8               readFromInflater\n+  #566 = Methodref          #35.#567      // java/util/zip/Inflater.finished:()Z\n+  #567 = NameAndType        #568:#223     // finished:()Z\n+  #568 = Utf8               finished\n+  #569 = Methodref          #35.#570      // java/util/zip/Inflater.needsDictionary:()Z\n+  #570 = NameAndType        #571:#223     // needsDictionary:()Z\n+  #571 = Utf8               needsDictionary\n+  #572 = String             #573          // This archive needs a preset dictionary which is not supported by Commons Compress.\n+  #573 = Utf8               This archive needs a preset dictionary which is not supported by Commons Compress.\n+  #574 = Methodref          #35.#575      // java/util/zip/Inflater.needsInput:()Z\n+  #575 = NameAndType        #576:#223     // needsInput:()Z\n+  #576 = Utf8               needsInput\n+  #577 = Methodref          #4.#578       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.fill:()I\n+  #578 = NameAndType        #579:#114     // fill:()I\n+  #579 = Utf8               fill\n+  #580 = Methodref          #35.#581      // java/util/zip/Inflater.inflate:([BII)I\n+  #581 = NameAndType        #582:#468     // inflate:([BII)I\n+  #582 = Utf8               inflate\n+  #583 = Class              #584          // java/util/zip/DataFormatException\n+  #584 = Utf8               java/util/zip/DataFormatException\n+  #585 = Methodref          #583.#586     // java/util/zip/DataFormatException.getMessage:()Ljava/lang/String;\n+  #586 = NameAndType        #587:#588     // getMessage:()Ljava/lang/String;\n+  #587 = Utf8               getMessage\n+  #588 = Utf8               ()Ljava/lang/String;\n+  #589 = Methodref          #169.#590     // java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+  #590 = NameAndType        #591:#592     // initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+  #591 = Utf8               initCause\n+  #592 = Utf8               (Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+  #593 = Methodref          #489.#594     // java/io/InputStream.close:()V\n+  #594 = NameAndType        #595:#34      // close:()V\n+  #595 = Utf8               close\n+  #596 = Methodref          #35.#597      // java/util/zip/Inflater.end:()V\n+  #597 = NameAndType        #598:#34      // end:()V\n+  #598 = Utf8               end\n+  #599 = Methodref          #4.#490       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.read:([BII)I\n+  #600 = Class              #601          // java/lang/IllegalArgumentException\n+  #601 = Utf8               java/lang/IllegalArgumentException\n+  #602 = Methodref          #600.#32      // java/lang/IllegalArgumentException.\"<init>\":()V\n+  #603 = Fieldref           #44.#604      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+  #604 = NameAndType        #150:#77      // LFH_SIG:[B\n+  #605 = Methodref          #4.#606       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.checksig:([B[B)Z\n+  #606 = NameAndType        #607:#608     // checksig:([B[B)Z\n+  #607 = Utf8               checksig\n+  #608 = Utf8               ([B[B)Z\n+  #609 = Fieldref           #44.#610      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+  #610 = NameAndType        #611:#77      // EOCD_SIG:[B\n+  #611 = Utf8               EOCD_SIG\n+  #612 = Fieldref           #44.#613      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n+  #613 = NameAndType        #380:#77      // DD_SIG:[B\n+  #614 = Methodref          #144.#615     // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+  #615 = NameAndType        #616:#537     // getBytes:()[B\n+  #616 = Utf8               getBytes\n+  #617 = Methodref          #4.#618       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.currentEntryHasOutstandingBytes:()Z\n+  #618 = NameAndType        #619:#223     // currentEntryHasOutstandingBytes:()Z\n+  #619 = Utf8               currentEntryHasOutstandingBytes\n+  #620 = Methodref          #4.#621       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.drainCurrentEntryData:()V\n+  #621 = NameAndType        #622:#34      // drainCurrentEntryData:()V\n+  #622 = Utf8               drainCurrentEntryData\n+  #623 = Long               9223372036854775807l\n+  #625 = Methodref          #4.#626       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.skip:(J)J\n+  #626 = NameAndType        #627:#249     // skip:(J)J\n+  #627 = Utf8               skip\n+  #628 = Methodref          #193.#629     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+  #629 = NameAndType        #630:#509     // access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+  #630 = Utf8               access$700\n+  #631 = Methodref          #4.#632       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.pushback:([BII)V\n+  #632 = NameAndType        #633:#505     // pushback:([BII)V\n+  #633 = Utf8               pushback\n+  #634 = Methodref          #193.#635     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$722:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+  #635 = NameAndType        #636:#546     // access$722:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+  #636 = Utf8               access$722\n+  #637 = Methodref          #4.#638       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readDataDescriptor:()V\n+  #638 = NameAndType        #639:#34      // readDataDescriptor:()V\n+  #639 = Utf8               readDataDescriptor\n+  #640 = Methodref          #35.#641      // java/util/zip/Inflater.reset:()V\n+  #641 = NameAndType        #642:#34      // reset:()V\n+  #642 = Utf8               reset\n+  #643 = Methodref          #47.#644      // java/nio/ByteBuffer.clear:()Ljava/nio/ByteBuffer;\n+  #644 = NameAndType        #645:#646     // clear:()Ljava/nio/ByteBuffer;\n+  #645 = Utf8               clear\n+  #646 = Utf8               ()Ljava/nio/ByteBuffer;\n+  #647 = Methodref          #47.#648      // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+  #648 = NameAndType        #649:#646     // flip:()Ljava/nio/ByteBuffer;\n+  #649 = Utf8               flip\n+  #650 = Methodref          #551.#651     // java/lang/Math.min:(JJ)J\n+  #651 = NameAndType        #554:#652     // min:(JJ)J\n+  #652 = Utf8               (JJ)J\n+  #653 = Methodref          #210.#654     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+  #654 = NameAndType        #655:#588     // getName:()Ljava/lang/String;\n+  #655 = Utf8               getName\n+  #656 = Methodref          #657.#658     // org/apache/commons/compress/utils/ArchiveUtils.sanitize:(Ljava/lang/String;)Ljava/lang/String;\n+  #657 = Class              #659          // org/apache/commons/compress/utils/ArchiveUtils\n+  #658 = NameAndType        #660:#661     // sanitize:(Ljava/lang/String;)Ljava/lang/String;\n+  #659 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n+  #660 = Utf8               sanitize\n+  #661 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #662 = InvokeDynamic      #0:#663       // #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n+  #663 = NameAndType        #664:#661     // makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n+  #664 = Utf8               makeConcatWithConstants\n+  #665 = Methodref          #142.#191     // java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n+  #666 = Methodref          #4.#667       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.count:(J)V\n+  #667 = NameAndType        #7:#253       // count:(J)V\n+  #668 = Methodref          #35.#132      // java/util/zip/Inflater.getBytesRead:()J\n+  #669 = Long               4294967296l\n+  #671 = Methodref          #35.#672      // java/util/zip/Inflater.setInput:([BII)V\n+  #672 = NameAndType        #673:#505     // setInput:([BII)V\n+  #673 = Utf8               setInput\n+  #674 = Methodref          #4.#675       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readFully:([BI)V\n+  #675 = NameAndType        #141:#263     // readFully:([BI)V\n+  #676 = Methodref          #677.#678     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n+  #677 = Class              #679          // org/apache/commons/compress/utils/IOUtils\n+  #678 = NameAndType        #141:#680     // readFully:(Ljava/io/InputStream;[BII)I\n+  #679 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #680 = Utf8               (Ljava/io/InputStream;[BII)I\n+  #681 = Methodref          #142.#32      // java/io/EOFException.\"<init>\":()V\n+  #682 = Methodref          #144.#683     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+  #683 = NameAndType        #177:#684     // getValue:([B)J\n+  #684 = Utf8               ([B)J\n+  #685 = Methodref          #421.#686     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+  #686 = NameAndType        #424:#684     // getLongValue:([B)J\n+  #687 = Methodref          #421.#688     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([BI)J\n+  #688 = NameAndType        #424:#243     // getLongValue:([BI)J\n+  #689 = Class              #690          // java/util/zip/ZipEntry\n+  #690 = Utf8               java/util/zip/ZipEntry\n+  #691 = Class              #692          // java/io/ByteArrayOutputStream\n+  #692 = Utf8               java/io/ByteArrayOutputStream\n+  #693 = Methodref          #691.#32      // java/io/ByteArrayOutputStream.\"<init>\":()V\n+  #694 = Methodref          #193.#695     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+  #695 = NameAndType        #696:#257     // access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+  #696 = Utf8               access$400\n+  #697 = Methodref          #4.#698       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.bufferContainsSignature:(Ljava/io/ByteArrayOutputStream;III)Z\n+  #698 = NameAndType        #699:#700     // bufferContainsSignature:(Ljava/io/ByteArrayOutputStream;III)Z\n+  #699 = Utf8               bufferContainsSignature\n+  #700 = Utf8               (Ljava/io/ByteArrayOutputStream;III)Z\n+  #701 = Methodref          #4.#702       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.cacheBytesRead:(Ljava/io/ByteArrayOutputStream;III)I\n+  #702 = NameAndType        #703:#704     // cacheBytesRead:(Ljava/io/ByteArrayOutputStream;III)I\n+  #703 = Utf8               cacheBytesRead\n+  #704 = Utf8               (Ljava/io/ByteArrayOutputStream;III)I\n+  #705 = String             #706          // compressed and uncompressed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n+  #706 = Utf8               compressed and uncompressed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n+  #707 = Methodref          #691.#708     // java/io/ByteArrayOutputStream.toByteArray:()[B\n+  #708 = NameAndType        #709:#537     // toByteArray:()[B\n+  #709 = Utf8               toByteArray\n+  #710 = String             #711          // actual and claimed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n+  #711 = Utf8               actual and claimed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n+  #712 = Methodref          #523.#147     // java/io/ByteArrayInputStream.\"<init>\":([B)V\n+  #713 = Fieldref           #4.#714       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.LFH:[B\n+  #714 = NameAndType        #715:#77      // LFH:[B\n+  #715 = Utf8               LFH\n+  #716 = Fieldref           #4.#717       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.CFH:[B\n+  #717 = NameAndType        #718:#77      // CFH:[B\n+  #718 = Utf8               CFH\n+  #719 = Fieldref           #4.#720       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.DD:[B\n+  #720 = NameAndType        #721:#77      // DD:[B\n+  #721 = Utf8               DD\n+  #722 = Methodref          #691.#723     // java/io/ByteArrayOutputStream.write:([BII)V\n+  #723 = NameAndType        #724:#505     // write:([BII)V\n+  #724 = Utf8               write\n+  #725 = Methodref          #109.#726     // java/io/PushbackInputStream.unread:([BII)V\n+  #726 = NameAndType        #727:#505     // unread:([BII)V\n+  #727 = Utf8               unread\n+  #728 = Methodref          #4.#729       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.pushedBackBytes:(J)V\n+  #729 = NameAndType        #730:#253     // pushedBackBytes:(J)V\n+  #730 = Utf8               pushedBackBytes\n+  #731 = Long               46l\n+  #733 = Long               30l\n+  #735 = Methodref          #4.#736       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.realSkip:(J)V\n+  #736 = NameAndType        #737:#253     // realSkip:(J)V\n+  #737 = Utf8               realSkip\n+  #738 = Methodref          #4.#739       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.findEocdRecord:()V\n+  #739 = NameAndType        #740:#34      // findEocdRecord:()V\n+  #740 = Utf8               findEocdRecord\n+  #741 = Long               16l\n+  #743 = Methodref          #199.#744     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+  #744 = NameAndType        #177:#540     // getValue:([B)I\n+  #745 = Methodref          #4.#746       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readOneByte:()I\n+  #746 = NameAndType        #747:#114     // readOneByte:()I\n+  #747 = Utf8               readOneByte\n+  #748 = Methodref          #4.#749       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.isFirstByteOfEocdSig:(I)Z\n+  #749 = NameAndType        #750:#751     // isFirstByteOfEocdSig:(I)Z\n+  #750 = Utf8               isFirstByteOfEocdSig\n+  #751 = Utf8               (I)Z\n+  #752 = Methodref          #489.#753     // java/io/InputStream.read:()I\n+  #753 = NameAndType        #492:#114     // read:()I\n+  #754 = Methodref          #421.#755     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:([B)Ljava/math/BigInteger;\n+  #755 = NameAndType        #177:#756     // getValue:([B)Ljava/math/BigInteger;\n+  #756 = Utf8               ([B)Ljava/math/BigInteger;\n+  #757 = Fieldref           #4.#758       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.APK_SIGNING_BLOCK_MAGIC:[B\n+  #758 = NameAndType        #759:#77      // APK_SIGNING_BLOCK_MAGIC:[B\n+  #759 = Utf8               APK_SIGNING_BLOCK_MAGIC\n+  #760 = Methodref          #761.#762     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+  #761 = Class              #763          // java/math/BigInteger\n+  #762 = NameAndType        #182:#764     // valueOf:(J)Ljava/math/BigInteger;\n+  #763 = Utf8               java/math/BigInteger\n+  #764 = Utf8               (J)Ljava/math/BigInteger;\n+  #765 = Methodref          #761.#766     // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #766 = NameAndType        #767:#768     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #767 = Utf8               add\n+  #768 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #769 = Methodref          #761.#770     // java/math/BigInteger.signum:()I\n+  #770 = NameAndType        #771:#114     // signum:()I\n+  #771 = Utf8               signum\n+  #772 = Methodref          #761.#773     // java/math/BigInteger.intValue:()I\n+  #773 = NameAndType        #774:#114     // intValue:()I\n+  #774 = Utf8               intValue\n+  #775 = Methodref          #551.#776     // java/lang/Math.abs:(I)I\n+  #776 = NameAndType        #777:#778     // abs:(I)I\n+  #777 = Utf8               abs\n+  #778 = Utf8               (I)I\n+  #779 = Fieldref           #4.#780       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.LONG_MAX:Ljava/math/BigInteger;\n+  #780 = NameAndType        #781:#782     // LONG_MAX:Ljava/math/BigInteger;\n+  #781 = Utf8               LONG_MAX\n+  #782 = Utf8               Ljava/math/BigInteger;\n+  #783 = Methodref          #761.#784     // java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I\n+  #784 = NameAndType        #785:#786     // compareTo:(Ljava/math/BigInteger;)I\n+  #785 = Utf8               compareTo\n+  #786 = Utf8               (Ljava/math/BigInteger;)I\n+  #787 = Methodref          #761.#788     // java/math/BigInteger.negate:()Ljava/math/BigInteger;\n+  #788 = NameAndType        #789:#790     // negate:()Ljava/math/BigInteger;\n+  #789 = Utf8               negate\n+  #790 = Utf8               ()Ljava/math/BigInteger;\n+  #791 = Methodref          #761.#792     // java/math/BigInteger.longValue:()J\n+  #792 = NameAndType        #793:#134     // longValue:()J\n+  #793 = Utf8               longValue\n+  #794 = Methodref          #795.#796     // java/util/Arrays.equals:([B[B)Z\n+  #795 = Class              #797          // java/util/Arrays\n+  #796 = NameAndType        #154:#608     // equals:([B[B)Z\n+  #797 = Utf8               java/util/Arrays\n+  #798 = Class              #799          // org/apache/commons/compress/utils/InputStreamStatistics\n+  #799 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+  #800 = Utf8               LFH_LEN\n+  #801 = Utf8               ConstantValue\n+  #802 = Integer            30\n+  #803 = Utf8               CFH_LEN\n+  #804 = Integer            46\n+  #805 = Utf8               TWO_EXP_32\n+  #806 = Utf8               USE_ZIPFILE_INSTEAD_OF_STREAM_DISCLAIMER\n+  #807 = String             #808          //  while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n+  #808 = Utf8                while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n+  #809 = Utf8               Code\n+  #810 = Utf8               LineNumberTable\n+  #811 = Utf8               LocalVariableTable\n+  #812 = Utf8               this\n+  #813 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n+  #814 = Utf8               inputStream\n+  #815 = Utf8               e\n+  #816 = Utf8               Ljava/io/EOFException;\n+  #817 = Utf8               bis\n+  #818 = Utf8               firstEntry\n+  #819 = Utf8               currentHeaderOffset\n+  #820 = Utf8               sig\n+  #821 = Utf8               off\n+  #822 = Utf8               versionMadeBy\n+  #823 = Utf8               gpFlag\n+  #824 = Utf8               Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #825 = Utf8               hasUTF8Flag\n+  #826 = Utf8               entryEncoding\n+  #827 = Utf8               time\n+  #828 = Utf8               size\n+  #829 = Utf8               cSize\n+  #830 = Utf8               fileNameLen\n+  #831 = Utf8               extraLen\n+  #832 = Utf8               fileName\n+  #833 = Utf8               extraData\n+  #834 = Utf8               m\n+  #835 = Utf8               StackMapTable\n+  #836 = Class              #77           // \"[B\"\n+  #837 = Utf8               Exceptions\n+  #838 = Utf8               missedLfhBytes\n+  #839 = Utf8               lfh\n+  #840 = Utf8               z64\n+  #841 = Utf8               Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+  #842 = Utf8               getNextEntry\n+  #843 = Utf8               ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #844 = Utf8               canReadEntryData\n+  #845 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n+  #846 = Utf8               ze\n+  #847 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #848 = Utf8               ae\n+  #849 = Utf8               Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #850 = Utf8               buffer\n+  #851 = Utf8               offset\n+  #852 = Utf8               length\n+  #853 = Utf8               getUncompressedCount\n+  #854 = Utf8               l\n+  #855 = Utf8               csize\n+  #856 = Utf8               toRead\n+  #857 = Utf8               Ljava/util/zip/DataFormatException;\n+  #858 = Class              #859          // java/lang/Throwable\n+  #859 = Utf8               java/lang/Throwable\n+  #860 = Utf8               rem\n+  #861 = Utf8               x\n+  #862 = Utf8               skipped\n+  #863 = Utf8               value\n+  #864 = Utf8               matches\n+  #865 = Utf8               ([BI)Z\n+  #866 = Utf8               signature\n+  #867 = Utf8               i\n+  #868 = Utf8               expected\n+  #869 = Utf8               inB\n+  #870 = Utf8               diff\n+  #871 = Utf8               n\n+  #872 = Utf8               b\n+  #873 = Utf8               len\n+  #874 = Utf8               val\n+  #875 = Utf8               potentialSig\n+  #876 = Utf8               entry\n+  #877 = Utf8               r\n+  #878 = Utf8               bos\n+  #879 = Utf8               Ljava/io/ByteArrayOutputStream;\n+  #880 = Utf8               done\n+  #881 = Utf8               ddLen\n+  #882 = Utf8               expectDDPos\n+  #883 = Utf8               lastRead\n+  #884 = Utf8               expectedDDLen\n+  #885 = Utf8               expecteDDLen\n+  #886 = Utf8               cacheable\n+  #887 = Utf8               currentByte\n+  #888 = Utf8               skipReadCall\n+  #889 = Utf8               bytesInBuffer\n+  #890 = Utf8               ex\n+  #891 = Utf8               suspectLocalFileHeader\n+  #892 = Utf8               toSkip\n+  #893 = Utf8               magic\n+  #894 = Utf8               access$800\n+  #895 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;I)V\n+  #896 = Utf8               x0\n+  #897 = Utf8               x1\n+  #898 = Utf8               access$900\n+  #899 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+  #900 = Utf8               access$1000\n+  #901 = Utf8               <clinit>\n+  #902 = Utf8               SourceFile\n+  #903 = Utf8               ZipArchiveInputStream.java\n+  #904 = Utf8               BootstrapMethods\n+  #905 = MethodHandle       6:#906        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #906 = Methodref          #907.#908     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #907 = Class              #909          // java/lang/invoke/StringConcatFactory\n+  #908 = NameAndType        #664:#910     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #909 = Utf8               java/lang/invoke/StringConcatFactory\n+  #910 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #911 = String             #912          // Truncated ZIP entry: \\u0001\n+  #912 = Utf8               Truncated ZIP entry: \\u0001\n+  #913 = Utf8               InnerClasses\n+  #914 = Utf8               CurrentEntry\n+  #915 = Utf8               NameSource\n+  #916 = Utf8               BoundedInputStream\n+  #917 = Utf8               Feature\n+  #918 = Class              #919          // java/lang/invoke/MethodHandles$Lookup\n+  #919 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #920 = Class              #921          // java/lang/invoke/MethodHandles\n+  #921 = Utf8               java/lang/invoke/MethodHandles\n+  #922 = Utf8               Lookup\n {\n   private final org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   final java.lang.String encoding;\n     descriptor: Ljava/lang/String;\n@@ -1044,16 +1044,16 @@\n   public org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(java.io.InputStream);\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: ldc           #5                  // String UTF8\n-         4: invokespecial #6                  // Method \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n+         2: ldc           #15                 // String UTF8\n+         4: invokespecial #17                 // Method \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n          7: return\n       LineNumberTable:\n         line 178: 0\n         line 179: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n@@ -1064,15 +1064,15 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: iconst_1\n-         4: invokespecial #7                  // Method \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;Z)V\n+         4: invokespecial #21                 // Method \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;Z)V\n          7: return\n       LineNumberTable:\n         line 189: 0\n         line 190: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n@@ -1085,15 +1085,15 @@\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: iload_3\n          4: iconst_0\n-         5: invokespecial #8                  // Method \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n+         5: invokespecial #24                 // Method \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n          8: return\n       LineNumberTable:\n         line 201: 0\n         line 202: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n@@ -1108,15 +1108,15 @@\n       stack=6, locals=5, args_size=5\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: iload_3\n          4: iload         4\n          6: iconst_0\n-         7: invokespecial #9                  // Method \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n+         7: invokespecial #27                 // Method \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n         10: return\n       LineNumberTable:\n         line 219: 0\n         line 220: 10\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n@@ -1127,95 +1127,95 @@\n \n   public org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(java.io.InputStream, java.lang.String, boolean, boolean, boolean);\n     descriptor: (Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=6, args_size=6\n          0: aload_0\n-         1: invokespecial #10                 // Method org/apache/commons/compress/archivers/ArchiveInputStream.\"<init>\":()V\n+         1: invokespecial #30                 // Method org/apache/commons/compress/archivers/ArchiveInputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #11                 // class java/util/zip/Inflater\n+         5: new           #35                 // class java/util/zip/Inflater\n          8: dup\n          9: iconst_1\n-        10: invokespecial #12                 // Method java/util/zip/Inflater.\"<init>\":(Z)V\n-        13: putfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n+        10: invokespecial #37                 // Method java/util/zip/Inflater.\"<init>\":(Z)V\n+        13: putfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n         16: aload_0\n         17: sipush        512\n-        20: invokestatic  #15                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-        23: putfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n+        20: invokestatic  #46                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        23: putfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n         26: aload_0\n         27: aconst_null\n-        28: putfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        28: putfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n         31: aload_0\n         32: iconst_0\n-        33: putfield      #17                 // Field closed:Z\n+        33: putfield      #56                 // Field closed:Z\n         36: aload_0\n         37: iconst_0\n-        38: putfield      #18                 // Field hitCentralDirectory:Z\n+        38: putfield      #60                 // Field hitCentralDirectory:Z\n         41: aload_0\n         42: aconst_null\n-        43: putfield      #19                 // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n+        43: putfield      #63                 // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n         46: aload_0\n         47: iconst_0\n-        48: putfield      #20                 // Field allowStoredEntriesWithDataDescriptor:Z\n+        48: putfield      #67                 // Field allowStoredEntriesWithDataDescriptor:Z\n         51: aload_0\n         52: lconst_0\n-        53: putfield      #21                 // Field uncompressedCount:J\n+        53: putfield      #70                 // Field uncompressedCount:J\n         56: aload_0\n         57: bipush        30\n         59: newarray       byte\n-        61: putfield      #23                 // Field lfhBuf:[B\n+        61: putfield      #74                 // Field lfhBuf:[B\n         64: aload_0\n         65: sipush        1024\n         68: newarray       byte\n-        70: putfield      #24                 // Field skipBuf:[B\n+        70: putfield      #78                 // Field skipBuf:[B\n         73: aload_0\n         74: iconst_2\n         75: newarray       byte\n-        77: putfield      #25                 // Field shortBuf:[B\n+        77: putfield      #81                 // Field shortBuf:[B\n         80: aload_0\n         81: iconst_4\n         82: newarray       byte\n-        84: putfield      #26                 // Field wordBuf:[B\n+        84: putfield      #84                 // Field wordBuf:[B\n         87: aload_0\n         88: bipush        16\n         90: newarray       byte\n-        92: putfield      #27                 // Field twoDwordBuf:[B\n+        92: putfield      #87                 // Field twoDwordBuf:[B\n         95: aload_0\n         96: iconst_0\n-        97: putfield      #28                 // Field entriesRead:I\n+        97: putfield      #90                 // Field entriesRead:I\n        100: aload_0\n        101: aload_2\n-       102: putfield      #29                 // Field encoding:Ljava/lang/String;\n+       102: putfield      #94                 // Field encoding:Ljava/lang/String;\n        105: aload_0\n        106: aload_2\n-       107: invokestatic  #30                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-       110: putfield      #31                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       107: invokestatic  #98                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       110: putfield      #102                // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        113: aload_0\n        114: iload_3\n-       115: putfield      #32                 // Field useUnicodeExtraFields:Z\n+       115: putfield      #106                // Field useUnicodeExtraFields:Z\n        118: aload_0\n-       119: new           #33                 // class java/io/PushbackInputStream\n+       119: new           #109                // class java/io/PushbackInputStream\n        122: dup\n        123: aload_1\n        124: aload_0\n-       125: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       128: invokevirtual #34                 // Method java/nio/ByteBuffer.capacity:()I\n-       131: invokespecial #35                 // Method java/io/PushbackInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-       134: putfield      #36                 // Field in:Ljava/io/InputStream;\n+       125: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       128: invokevirtual #111                // Method java/nio/ByteBuffer.capacity:()I\n+       131: invokespecial #115                // Method java/io/PushbackInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+       134: putfield      #118                // Field in:Ljava/io/InputStream;\n        137: aload_0\n        138: iload         4\n-       140: putfield      #20                 // Field allowStoredEntriesWithDataDescriptor:Z\n+       140: putfield      #67                 // Field allowStoredEntriesWithDataDescriptor:Z\n        143: aload_0\n        144: iload         5\n-       146: putfield      #37                 // Field skipSplitSig:Z\n+       146: putfield      #122                // Field skipSplitSig:Z\n        149: aload_0\n-       150: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n+       150: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n        153: iconst_0\n-       154: invokevirtual #38                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+       154: invokevirtual #125                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n        157: pop\n        158: return\n       LineNumberTable:\n         line 240: 0\n         line 96: 4\n         line 99: 16\n         line 102: 26\n@@ -1250,389 +1250,389 @@\n   public org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=8, locals=20, args_size=1\n          0: aload_0\n          1: lconst_0\n-         2: putfield      #21                 // Field uncompressedCount:J\n+         2: putfield      #70                 // Field uncompressedCount:J\n          5: iconst_1\n          6: istore_1\n          7: aload_0\n-         8: getfield      #17                 // Field closed:Z\n+         8: getfield      #56                 // Field closed:Z\n         11: ifne          21\n         14: aload_0\n-        15: getfield      #18                 // Field hitCentralDirectory:Z\n+        15: getfield      #60                 // Field hitCentralDirectory:Z\n         18: ifeq          23\n         21: aconst_null\n         22: areturn\n         23: aload_0\n-        24: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        24: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n         27: ifnull        36\n         30: aload_0\n-        31: invokespecial #39                 // Method closeEntry:()V\n+        31: invokespecial #128                // Method closeEntry:()V\n         34: iconst_0\n         35: istore_1\n         36: aload_0\n-        37: invokevirtual #40                 // Method getBytesRead:()J\n+        37: invokevirtual #131                // Method getBytesRead:()J\n         40: lstore_2\n         41: iload_1\n         42: ifeq          56\n         45: aload_0\n         46: aload_0\n-        47: getfield      #23                 // Field lfhBuf:[B\n-        50: invokespecial #41                 // Method readFirstLocalFileHeader:([B)V\n+        47: getfield      #74                 // Field lfhBuf:[B\n+        50: invokespecial #135                // Method readFirstLocalFileHeader:([B)V\n         53: goto          64\n         56: aload_0\n         57: aload_0\n-        58: getfield      #23                 // Field lfhBuf:[B\n-        61: invokespecial #42                 // Method readFully:([B)V\n+        58: getfield      #74                 // Field lfhBuf:[B\n+        61: invokespecial #139                // Method readFully:([B)V\n         64: goto          71\n         67: astore        4\n         69: aconst_null\n         70: areturn\n-        71: new           #44                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+        71: new           #144                // class org/apache/commons/compress/archivers/zip/ZipLong\n         74: dup\n         75: aload_0\n-        76: getfield      #23                 // Field lfhBuf:[B\n-        79: invokespecial #45                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+        76: getfield      #74                 // Field lfhBuf:[B\n+        79: invokespecial #146                // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n         82: astore        4\n         84: aload         4\n-        86: getstatic     #46                 // Field org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        89: invokevirtual #47                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        86: getstatic     #148                // Field org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        89: invokevirtual #152                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n         92: ifne          167\n         95: aload         4\n-        97: getstatic     #48                 // Field org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-       100: invokevirtual #47                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        97: getstatic     #156                // Field org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+       100: invokevirtual #152                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n        103: ifne          128\n        106: aload         4\n-       108: getstatic     #49                 // Field org/apache/commons/compress/archivers/zip/ZipLong.AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-       111: invokevirtual #47                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+       108: getstatic     #159                // Field org/apache/commons/compress/archivers/zip/ZipLong.AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+       111: invokevirtual #152                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n        114: ifne          128\n        117: aload_0\n        118: aload_0\n-       119: getfield      #23                 // Field lfhBuf:[B\n-       122: invokespecial #50                 // Method isApkSigningBlock:([B)Z\n+       119: getfield      #74                 // Field lfhBuf:[B\n+       122: invokespecial #162                // Method isApkSigningBlock:([B)Z\n        125: ifeq          139\n        128: aload_0\n        129: iconst_1\n-       130: putfield      #18                 // Field hitCentralDirectory:Z\n+       130: putfield      #60                 // Field hitCentralDirectory:Z\n        133: aload_0\n-       134: invokespecial #51                 // Method skipRemainderOfArchive:()V\n+       134: invokespecial #166                // Method skipRemainderOfArchive:()V\n        137: aconst_null\n        138: areturn\n-       139: new           #52                 // class java/util/zip/ZipException\n+       139: new           #169                // class java/util/zip/ZipException\n        142: dup\n-       143: ldc           #53                 // String Unexpected record signature: 0X%X\n+       143: ldc           #171                // String Unexpected record signature: 0X%X\n        145: iconst_1\n-       146: anewarray     #54                 // class java/lang/Object\n+       146: anewarray     #173                // class java/lang/Object\n        149: dup\n        150: iconst_0\n        151: aload         4\n-       153: invokevirtual #55                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-       156: invokestatic  #56                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;\n+       153: invokevirtual #175                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+       156: invokestatic  #178                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;\n        159: aastore\n-       160: invokestatic  #57                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-       163: invokespecial #58                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       160: invokestatic  #184                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+       163: invokespecial #190                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n        166: athrow\n        167: iconst_4\n        168: istore        5\n        170: aload_0\n-       171: new           #59                 // class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry\n+       171: new           #193                // class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry\n        174: dup\n        175: aconst_null\n-       176: invokespecial #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1;)V\n-       179: putfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       176: invokespecial #195                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1;)V\n+       179: putfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n        182: aload_0\n-       183: getfield      #23                 // Field lfhBuf:[B\n+       183: getfield      #74                 // Field lfhBuf:[B\n        186: iload         5\n-       188: invokestatic  #61                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       188: invokestatic  #198                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        191: istore        6\n        193: iinc          5, 2\n        196: aload_0\n-       197: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       200: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       197: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       200: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        203: iload         6\n        205: bipush        8\n        207: ishr\n        208: bipush        15\n        210: iand\n-       211: invokevirtual #64                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setPlatform:(I)V\n+       211: invokevirtual #209                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setPlatform:(I)V\n        214: aload_0\n-       215: getfield      #23                 // Field lfhBuf:[B\n+       215: getfield      #74                 // Field lfhBuf:[B\n        218: iload         5\n-       220: invokestatic  #65                 // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+       220: invokestatic  #214                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n        223: astore        7\n        225: aload         7\n-       227: invokevirtual #66                 // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n+       227: invokevirtual #220                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n        230: istore        8\n        232: iload         8\n        234: ifeq          243\n-       237: getstatic     #67                 // Field org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       237: getstatic     #224                // Field org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        240: goto          247\n        243: aload_0\n-       244: getfield      #31                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       244: getfield      #102                // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        247: astore        9\n        249: aload_0\n-       250: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       250: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n        253: aload         7\n-       255: invokevirtual #68                 // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesDataDescriptor:()Z\n-       258: invokestatic  #69                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$202:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n+       255: invokevirtual #227                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesDataDescriptor:()Z\n+       258: invokestatic  #230                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$202:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n        261: pop\n        262: aload_0\n-       263: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       266: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       263: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       266: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        269: aload         7\n-       271: invokevirtual #70                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+       271: invokevirtual #234                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n        274: iinc          5, 2\n        277: aload_0\n-       278: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       281: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       278: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       281: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        284: aload_0\n-       285: getfield      #23                 // Field lfhBuf:[B\n+       285: getfield      #74                 // Field lfhBuf:[B\n        288: iload         5\n-       290: invokestatic  #61                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       293: invokevirtual #71                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setMethod:(I)V\n+       290: invokestatic  #198                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       293: invokevirtual #238                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setMethod:(I)V\n        296: iinc          5, 2\n        299: aload_0\n-       300: getfield      #23                 // Field lfhBuf:[B\n+       300: getfield      #74                 // Field lfhBuf:[B\n        303: iload         5\n-       305: invokestatic  #72                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       308: invokestatic  #73                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n+       305: invokestatic  #241                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       308: invokestatic  #244                // Method org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n        311: lstore        10\n        313: aload_0\n-       314: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       317: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       314: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       317: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        320: lload         10\n-       322: invokevirtual #74                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setTime:(J)V\n+       322: invokevirtual #250                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setTime:(J)V\n        325: iinc          5, 4\n        328: aconst_null\n        329: astore        12\n        331: aconst_null\n        332: astore        13\n        334: aload_0\n-       335: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       338: invokestatic  #75                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+       335: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       338: invokestatic  #254                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n        341: ifne          405\n        344: aload_0\n-       345: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       348: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       345: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       348: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        351: aload_0\n-       352: getfield      #23                 // Field lfhBuf:[B\n+       352: getfield      #74                 // Field lfhBuf:[B\n        355: iload         5\n-       357: invokestatic  #72                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       360: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n+       357: invokestatic  #241                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       360: invokevirtual #258                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n        363: iinc          5, 4\n-       366: new           #44                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+       366: new           #144                // class org/apache/commons/compress/archivers/zip/ZipLong\n        369: dup\n        370: aload_0\n-       371: getfield      #23                 // Field lfhBuf:[B\n+       371: getfield      #74                 // Field lfhBuf:[B\n        374: iload         5\n-       376: invokespecial #77                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+       376: invokespecial #261                // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n        379: astore        13\n        381: iinc          5, 4\n-       384: new           #44                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+       384: new           #144                // class org/apache/commons/compress/archivers/zip/ZipLong\n        387: dup\n        388: aload_0\n-       389: getfield      #23                 // Field lfhBuf:[B\n+       389: getfield      #74                 // Field lfhBuf:[B\n        392: iload         5\n-       394: invokespecial #77                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+       394: invokespecial #261                // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n        397: astore        12\n        399: iinc          5, 4\n        402: goto          408\n        405: iinc          5, 12\n        408: aload_0\n-       409: getfield      #23                 // Field lfhBuf:[B\n+       409: getfield      #74                 // Field lfhBuf:[B\n        412: iload         5\n-       414: invokestatic  #61                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       414: invokestatic  #198                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        417: istore        14\n        419: iinc          5, 2\n        422: aload_0\n-       423: getfield      #23                 // Field lfhBuf:[B\n+       423: getfield      #74                 // Field lfhBuf:[B\n        426: iload         5\n-       428: invokestatic  #61                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       428: invokestatic  #198                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        431: istore        15\n        433: iinc          5, 2\n        436: iload         14\n        438: newarray       byte\n        440: astore        16\n        442: aload_0\n        443: aload         16\n-       445: invokespecial #42                 // Method readFully:([B)V\n+       445: invokespecial #139                // Method readFully:([B)V\n        448: aload_0\n-       449: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       452: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       449: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       452: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        455: aload         9\n        457: aload         16\n-       459: invokeinterface #78,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+       459: invokeinterface #264,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n        464: aload         16\n-       466: invokevirtual #79                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;[B)V\n+       466: invokevirtual #270                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;[B)V\n        469: iload         8\n        471: ifeq          487\n        474: aload_0\n-       475: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       478: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       481: getstatic     #80                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-       484: invokevirtual #81                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+       475: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       478: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       481: getstatic     #274                // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+       484: invokevirtual #280                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n        487: iload         15\n        489: newarray       byte\n        491: astore        17\n        493: aload_0\n        494: aload         17\n-       496: invokespecial #42                 // Method readFully:([B)V\n+       496: invokespecial #139                // Method readFully:([B)V\n        499: aload_0\n-       500: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       503: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       500: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       503: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        506: aload         17\n-       508: invokevirtual #82                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setExtra:([B)V\n+       508: invokevirtual #284                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setExtra:([B)V\n        511: iload         8\n        513: ifne          536\n        516: aload_0\n-       517: getfield      #32                 // Field useUnicodeExtraFields:Z\n+       517: getfield      #106                // Field useUnicodeExtraFields:Z\n        520: ifeq          536\n        523: aload_0\n-       524: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       527: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       524: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       527: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        530: aload         16\n        532: aconst_null\n-       533: invokestatic  #83                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+       533: invokestatic  #287                // Method org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n        536: aload_0\n        537: aload         12\n        539: aload         13\n-       541: invokespecial #84                 // Method processZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+       541: invokespecial #291                // Method processZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n        544: aload_0\n-       545: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       548: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       545: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       548: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        551: lload_2\n-       552: invokevirtual #85                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n+       552: invokevirtual #295                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n        555: aload_0\n-       556: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       559: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       556: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       559: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        562: aload_0\n-       563: invokevirtual #40                 // Method getBytesRead:()J\n-       566: invokevirtual #86                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n+       563: invokevirtual #131                // Method getBytesRead:()J\n+       566: invokevirtual #298                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n        569: aload_0\n-       570: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       573: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       570: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       573: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        576: iconst_1\n-       577: invokevirtual #87                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setStreamContiguous:(Z)V\n+       577: invokevirtual #301                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setStreamContiguous:(Z)V\n        580: aload_0\n-       581: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       584: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       587: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       590: invokestatic  #89                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       581: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       584: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       587: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       590: invokestatic  #307                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n        593: astore        18\n        595: aload_0\n-       596: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       599: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       602: invokevirtual #90                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-       605: ldc2_w        #92                 // long -1l\n+       596: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       599: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       602: invokevirtual #313                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+       605: ldc2_w        #318                // long -1l\n        608: lcmp\n        609: ifeq          813\n        612: aload_0\n-       613: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       616: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       619: invokestatic  #94                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+       613: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       616: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       619: invokestatic  #320                // Method org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n        622: ifeq          840\n        625: aload         18\n-       627: getstatic     #95                 // Field org/apache/commons/compress/archivers/zip/ZipMethod.STORED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       627: getstatic     #324                // Field org/apache/commons/compress/archivers/zip/ZipMethod.STORED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n        630: if_acmpeq     840\n        633: aload         18\n-       635: getstatic     #96                 // Field org/apache/commons/compress/archivers/zip/ZipMethod.DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       635: getstatic     #328                // Field org/apache/commons/compress/archivers/zip/ZipMethod.DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n        638: if_acmpeq     840\n-       641: new           #97                 // class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream\n+       641: new           #331                // class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream\n        644: dup\n        645: aload_0\n        646: aload_0\n-       647: getfield      #36                 // Field in:Ljava/io/InputStream;\n+       647: getfield      #118                // Field in:Ljava/io/InputStream;\n        650: aload_0\n-       651: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       654: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       657: invokevirtual #90                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-       660: invokespecial #98                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V\n+       651: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       654: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       657: invokevirtual #313                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+       660: invokespecial #333                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V\n        663: astore        19\n-       665: getstatic     #99                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+       665: getstatic     #336                // Field org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n        668: aload         18\n-       670: invokevirtual #100                // Method org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n+       670: invokevirtual #342                // Method org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n        673: iaload\n        674: tableswitch   { // 1 to 4\n                        1: 704\n                        2: 724\n                        3: 770\n                        4: 790\n                  default: 810\n             }\n        704: aload_0\n-       705: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       708: new           #101                // class org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+       705: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       708: new           #345                // class org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n        711: dup\n        712: aload         19\n-       714: invokespecial #102                // Method org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-       717: invokestatic  #103                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n+       714: invokespecial #347                // Method org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+       717: invokestatic  #350                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n        720: pop\n        721: goto          810\n        724: aload_0\n-       725: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       728: new           #104                // class org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+       725: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       728: new           #354                // class org/apache/commons/compress/archivers/zip/ExplodingInputStream\n        731: dup\n        732: aload_0\n-       733: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       736: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       739: invokevirtual #105                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-       742: invokevirtual #106                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n+       733: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       736: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       739: invokevirtual #356                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+       742: invokevirtual #360                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n        745: aload_0\n-       746: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       749: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       752: invokevirtual #105                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-       755: invokevirtual #107                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n+       746: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       749: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       752: invokevirtual #356                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+       755: invokevirtual #363                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n        758: aload         19\n-       760: invokespecial #108                // Method org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n-       763: invokestatic  #103                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n+       760: invokespecial #366                // Method org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n+       763: invokestatic  #350                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n        766: pop\n        767: goto          810\n        770: aload_0\n-       771: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       774: new           #109                // class org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+       771: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       774: new           #369                // class org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n        777: dup\n        778: aload         19\n-       780: invokespecial #110                // Method org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-       783: invokestatic  #103                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n+       780: invokespecial #371                // Method org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+       783: invokestatic  #350                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n        786: pop\n        787: goto          810\n        790: aload_0\n-       791: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       794: new           #111                // class org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+       791: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       794: new           #372                // class org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n        797: dup\n        798: aload         19\n-       800: invokespecial #112                // Method org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-       803: invokestatic  #103                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n+       800: invokespecial #374                // Method org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+       803: invokestatic  #350                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n        806: pop\n        807: goto          810\n        810: goto          840\n        813: aload         18\n-       815: getstatic     #113                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       815: getstatic     #375                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n        818: if_acmpne     840\n        821: aload_0\n-       822: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       825: new           #111                // class org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+       822: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       825: new           #372                // class org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n        828: dup\n        829: aload_0\n-       830: getfield      #36                 // Field in:Ljava/io/InputStream;\n-       833: invokespecial #112                // Method org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-       836: invokestatic  #103                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n+       830: getfield      #118                // Field in:Ljava/io/InputStream;\n+       833: invokespecial #374                // Method org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+       836: invokestatic  #350                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n        839: pop\n        840: aload_0\n        841: dup\n-       842: getfield      #28                 // Field entriesRead:I\n+       842: getfield      #90                 // Field entriesRead:I\n        845: iconst_1\n        846: iadd\n-       847: putfield      #28                 // Field entriesRead:I\n+       847: putfield      #90                 // Field entriesRead:I\n        850: aload_0\n-       851: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       854: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       851: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       854: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        857: areturn\n       Exception table:\n          from    to  target type\n             41    64    67   Class java/io/EOFException\n       LineNumberTable:\n         line 253: 0\n         line 255: 5\n@@ -1791,58 +1791,58 @@\n   private void readFirstLocalFileHeader(byte[]) throws java.io.IOException;\n     descriptor: ([B)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=4, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #42                 // Method readFully:([B)V\n-         5: new           #44                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+         2: invokespecial #139                // Method readFully:([B)V\n+         5: new           #144                // class org/apache/commons/compress/archivers/zip/ZipLong\n          8: dup\n          9: aload_1\n-        10: invokespecial #45                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+        10: invokespecial #146                // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n         13: astore_2\n         14: aload_0\n-        15: getfield      #37                 // Field skipSplitSig:Z\n+        15: getfield      #122                // Field skipSplitSig:Z\n         18: ifne          42\n         21: aload_2\n-        22: getstatic     #114                // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        25: invokevirtual #47                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        22: getstatic     #378                // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        25: invokevirtual #152                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n         28: ifeq          42\n-        31: new           #115                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+        31: new           #381                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n         34: dup\n-        35: getstatic     #116                // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.SPLITTING:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-        38: invokespecial #117                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n+        35: getstatic     #383                // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.SPLITTING:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+        38: invokespecial #389                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n         41: athrow\n         42: aload_2\n-        43: getstatic     #118                // Field org/apache/commons/compress/archivers/zip/ZipLong.SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        46: invokevirtual #47                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        43: getstatic     #392                // Field org/apache/commons/compress/archivers/zip/ZipLong.SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        46: invokevirtual #152                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n         49: ifne          62\n         52: aload_2\n-        53: getstatic     #114                // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        56: invokevirtual #47                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        53: getstatic     #378                // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        56: invokevirtual #152                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n         59: ifeq          89\n         62: iconst_4\n         63: newarray       byte\n         65: astore_3\n         66: aload_0\n         67: aload_3\n-        68: invokespecial #42                 // Method readFully:([B)V\n+        68: invokespecial #139                // Method readFully:([B)V\n         71: aload_1\n         72: iconst_4\n         73: aload_1\n         74: iconst_0\n         75: bipush        26\n-        77: invokestatic  #119                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        77: invokestatic  #395                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         80: aload_3\n         81: iconst_0\n         82: aload_1\n         83: bipush        26\n         85: iconst_4\n-        86: invokestatic  #119                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        86: invokestatic  #395                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         89: return\n       LineNumberTable:\n         line 394: 0\n         line 395: 5\n         line 397: 14\n         line 398: 31\n         line 402: 42\n@@ -1868,74 +1868,74 @@\n \n   private void processZip64Extra(org.apache.commons.compress.archivers.zip.ZipLong, org.apache.commons.compress.archivers.zip.ZipLong);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=4, args_size=3\n          0: aload_0\n-         1: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-         4: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-         7: getstatic     #120                // Field org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-        10: invokevirtual #121                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-        13: checkcast     #122                // class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+         1: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+         4: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+         7: getstatic     #401                // Field org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+        10: invokevirtual #407                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+        13: checkcast     #402                // class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n         16: astore_3\n         17: aload_0\n-        18: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        18: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n         21: aload_3\n         22: ifnull        29\n         25: iconst_1\n         26: goto          30\n         29: iconst_0\n-        30: invokestatic  #123                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n+        30: invokestatic  #411                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n         33: pop\n         34: aload_0\n-        35: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        38: invokestatic  #75                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+        35: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        38: invokestatic  #254                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n         41: ifne          141\n         44: aload_3\n         45: ifnull        105\n-        48: getstatic     #124                // Field org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        48: getstatic     #414                // Field org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n         51: aload_2\n-        52: invokevirtual #47                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        52: invokevirtual #152                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n         55: ifne          68\n-        58: getstatic     #124                // Field org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        58: getstatic     #414                // Field org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n         61: aload_1\n-        62: invokevirtual #47                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        62: invokevirtual #152                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n         65: ifeq          105\n         68: aload_0\n-        69: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        72: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        69: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        72: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n         75: aload_3\n-        76: invokevirtual #125                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-        79: invokevirtual #126                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-        82: invokevirtual #127                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+        76: invokevirtual #417                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        79: invokevirtual #420                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+        82: invokevirtual #425                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n         85: aload_0\n-        86: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        89: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        86: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        89: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n         92: aload_3\n-        93: invokevirtual #128                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-        96: invokevirtual #126                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-        99: invokevirtual #129                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+        93: invokevirtual #428                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        96: invokevirtual #420                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+        99: invokevirtual #431                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n        102: goto          141\n        105: aload_2\n        106: ifnull        141\n        109: aload_1\n        110: ifnull        141\n        113: aload_0\n-       114: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       117: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       114: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       117: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        120: aload_2\n-       121: invokevirtual #55                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-       124: invokevirtual #127                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+       121: invokevirtual #175                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+       124: invokevirtual #425                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n        127: aload_0\n-       128: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       131: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       128: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       131: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        134: aload_1\n-       135: invokevirtual #55                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-       138: invokevirtual #129                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+       135: invokevirtual #175                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+       138: invokevirtual #431                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n        141: return\n       LineNumberTable:\n         line 417: 0\n         line 419: 4\n         line 420: 17\n         line 421: 34\n         line 422: 44\n@@ -1967,15 +1967,15 @@\n \n   public org.apache.commons.compress.archivers.ArchiveEntry getNextEntry() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #130                // Method getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+         1: invokevirtual #434                // Method getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n          4: areturn\n       LineNumberTable:\n         line 435: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n     Exceptions:\n@@ -1983,29 +1983,29 @@\n \n   public boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_1\n-         1: instanceof    #131                // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+         1: instanceof    #210                // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n          4: ifeq          41\n          7: aload_1\n-         8: checkcast     #131                // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+         8: checkcast     #210                // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n         11: astore_2\n         12: aload_2\n-        13: invokestatic  #94                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+        13: invokestatic  #320                // Method org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n         16: ifeq          39\n         19: aload_0\n         20: aload_2\n-        21: invokespecial #132                // Method supportsDataDescriptorFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+        21: invokespecial #438                // Method supportsDataDescriptorFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n         24: ifeq          39\n         27: aload_0\n         28: aload_2\n-        29: invokespecial #133                // Method supportsCompressedSizeFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+        29: invokespecial #441                // Method supportsCompressedSizeFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n         32: ifeq          39\n         35: iconst_1\n         36: goto          40\n         39: iconst_0\n         40: ireturn\n         41: iconst_0\n         42: ireturn\n@@ -2037,212 +2037,212 @@\n     Code:\n       stack=5, locals=5, args_size=4\n          0: iload_3\n          1: ifne          6\n          4: iconst_0\n          5: ireturn\n          6: aload_0\n-         7: getfield      #17                 // Field closed:Z\n-        10: ifeq          23\n-        13: new           #134                // class java/io/IOException\n+         7: getfield      #56                 // Field closed:Z\n+        10: ifeq          24\n+        13: new           #444                // class java/io/IOException\n         16: dup\n-        17: ldc           #135                // String The stream is closed\n-        19: invokespecial #136                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        22: athrow\n-        23: aload_0\n-        24: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        27: ifnonnull     32\n-        30: iconst_m1\n-        31: ireturn\n-        32: iload_2\n-        33: aload_1\n-        34: arraylength\n-        35: if_icmpgt     54\n-        38: iload_3\n-        39: iflt          54\n-        42: iload_2\n-        43: iflt          54\n-        46: aload_1\n-        47: arraylength\n-        48: iload_2\n-        49: isub\n-        50: iload_3\n-        51: if_icmpge     62\n-        54: new           #137                // class java/lang/ArrayIndexOutOfBoundsException\n-        57: dup\n-        58: invokespecial #138                // Method java/lang/ArrayIndexOutOfBoundsException.\"<init>\":()V\n-        61: athrow\n-        62: aload_0\n-        63: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        66: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        69: invokestatic  #139                // Method org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-        72: aload_0\n+        17: ldc_w         #446                // String The stream is closed\n+        20: invokespecial #448                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        23: athrow\n+        24: aload_0\n+        25: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        28: ifnonnull     33\n+        31: iconst_m1\n+        32: ireturn\n+        33: iload_2\n+        34: aload_1\n+        35: arraylength\n+        36: if_icmpgt     55\n+        39: iload_3\n+        40: iflt          55\n+        43: iload_2\n+        44: iflt          55\n+        47: aload_1\n+        48: arraylength\n+        49: iload_2\n+        50: isub\n+        51: iload_3\n+        52: if_icmpge     63\n+        55: new           #449                // class java/lang/ArrayIndexOutOfBoundsException\n+        58: dup\n+        59: invokespecial #451                // Method java/lang/ArrayIndexOutOfBoundsException.\"<init>\":()V\n+        62: athrow\n+        63: aload_0\n+        64: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        67: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        70: invokestatic  #452                // Method org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n         73: aload_0\n-        74: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        77: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        80: invokespecial #132                // Method supportsDataDescriptorFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-        83: ifne          104\n-        86: new           #115                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-        89: dup\n-        90: getstatic     #140                // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.DATA_DESCRIPTOR:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-        93: aload_0\n-        94: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        97: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       100: invokespecial #141                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-       103: athrow\n-       104: aload_0\n+        74: aload_0\n+        75: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        78: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        81: invokespecial #438                // Method supportsDataDescriptorFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+        84: ifne          105\n+        87: new           #381                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+        90: dup\n+        91: getstatic     #456                // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.DATA_DESCRIPTOR:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+        94: aload_0\n+        95: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        98: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       101: invokespecial #459                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+       104: athrow\n        105: aload_0\n-       106: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       109: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       112: invokespecial #133                // Method supportsCompressedSizeFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-       115: ifne          136\n-       118: new           #115                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-       121: dup\n-       122: getstatic     #142                // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.UNKNOWN_COMPRESSED_SIZE:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-       125: aload_0\n-       126: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       129: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       132: invokespecial #141                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-       135: athrow\n-       136: aload_0\n-       137: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       140: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       143: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       146: ifne          161\n-       149: aload_0\n-       150: aload_1\n-       151: iload_2\n-       152: iload_3\n-       153: invokespecial #143                // Method readStored:([BII)I\n-       156: istore        4\n-       158: goto          310\n-       161: aload_0\n-       162: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       165: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       168: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       171: bipush        8\n-       173: if_icmpne     188\n-       176: aload_0\n-       177: aload_1\n-       178: iload_2\n-       179: iload_3\n-       180: invokespecial #144                // Method readDeflated:([BII)I\n-       183: istore        4\n-       185: goto          310\n-       188: aload_0\n-       189: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       192: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       195: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       198: getstatic     #145                // Field org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       201: invokevirtual #146                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-       204: if_icmpeq     264\n-       207: aload_0\n-       208: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       211: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       214: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       217: getstatic     #147                // Field org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       220: invokevirtual #146                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-       223: if_icmpeq     264\n-       226: aload_0\n-       227: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       230: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       233: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       236: getstatic     #113                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       239: invokevirtual #146                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-       242: if_icmpeq     264\n-       245: aload_0\n-       246: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       249: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       252: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       255: getstatic     #148                // Field org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       258: invokevirtual #146                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-       261: if_icmpne     282\n-       264: aload_0\n-       265: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       268: invokestatic  #149                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n-       271: aload_1\n-       272: iload_2\n-       273: iload_3\n-       274: invokevirtual #150                // Method java/io/InputStream.read:([BII)I\n-       277: istore        4\n-       279: goto          310\n-       282: new           #115                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-       285: dup\n-       286: aload_0\n-       287: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       290: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       293: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       296: invokestatic  #89                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       299: aload_0\n-       300: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       303: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       306: invokespecial #151                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-       309: athrow\n-       310: iload         4\n-       312: iflt          341\n-       315: aload_0\n-       316: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       319: invokestatic  #152                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/util/zip/CRC32;\n-       322: aload_1\n-       323: iload_2\n-       324: iload         4\n-       326: invokevirtual #153                // Method java/util/zip/CRC32.update:([BII)V\n-       329: aload_0\n-       330: dup\n-       331: getfield      #21                 // Field uncompressedCount:J\n-       334: iload         4\n-       336: i2l\n-       337: ladd\n-       338: putfield      #21                 // Field uncompressedCount:J\n-       341: iload         4\n-       343: ireturn\n+       106: aload_0\n+       107: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       110: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       113: invokespecial #441                // Method supportsCompressedSizeFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+       116: ifne          137\n+       119: new           #381                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+       122: dup\n+       123: getstatic     #462                // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.UNKNOWN_COMPRESSED_SIZE:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+       126: aload_0\n+       127: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       130: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       133: invokespecial #459                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+       136: athrow\n+       137: aload_0\n+       138: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       141: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       144: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       147: ifne          162\n+       150: aload_0\n+       151: aload_1\n+       152: iload_2\n+       153: iload_3\n+       154: invokespecial #465                // Method readStored:([BII)I\n+       157: istore        4\n+       159: goto          311\n+       162: aload_0\n+       163: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       166: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       169: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       172: bipush        8\n+       174: if_icmpne     189\n+       177: aload_0\n+       178: aload_1\n+       179: iload_2\n+       180: iload_3\n+       181: invokespecial #469                // Method readDeflated:([BII)I\n+       184: istore        4\n+       186: goto          311\n+       189: aload_0\n+       190: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       193: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       196: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       199: getstatic     #472                // Field org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       202: invokevirtual #475                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+       205: if_icmpeq     265\n+       208: aload_0\n+       209: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       212: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       215: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       218: getstatic     #478                // Field org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       221: invokevirtual #475                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+       224: if_icmpeq     265\n+       227: aload_0\n+       228: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       231: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       234: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       237: getstatic     #375                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       240: invokevirtual #475                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+       243: if_icmpeq     265\n+       246: aload_0\n+       247: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       250: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       253: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       256: getstatic     #481                // Field org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       259: invokevirtual #475                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+       262: if_icmpne     283\n+       265: aload_0\n+       266: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       269: invokestatic  #484                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n+       272: aload_1\n+       273: iload_2\n+       274: iload_3\n+       275: invokevirtual #488                // Method java/io/InputStream.read:([BII)I\n+       278: istore        4\n+       280: goto          311\n+       283: new           #381                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+       286: dup\n+       287: aload_0\n+       288: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       291: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       294: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       297: invokestatic  #307                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       300: aload_0\n+       301: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       304: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       307: invokespecial #493                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+       310: athrow\n+       311: iload         4\n+       313: iflt          342\n+       316: aload_0\n+       317: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       320: invokestatic  #496                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/util/zip/CRC32;\n+       323: aload_1\n+       324: iload_2\n+       325: iload         4\n+       327: invokevirtual #500                // Method java/util/zip/CRC32.update:([BII)V\n+       330: aload_0\n+       331: dup\n+       332: getfield      #70                 // Field uncompressedCount:J\n+       335: iload         4\n+       337: i2l\n+       338: ladd\n+       339: putfield      #70                 // Field uncompressedCount:J\n+       342: iload         4\n+       344: ireturn\n       LineNumberTable:\n         line 458: 0\n         line 459: 4\n         line 461: 6\n         line 462: 13\n-        line 465: 23\n-        line 466: 30\n-        line 470: 32\n-        line 471: 54\n-        line 474: 62\n-        line 475: 72\n-        line 476: 86\n-        line 477: 97\n-        line 479: 104\n-        line 480: 118\n-        line 481: 129\n-        line 485: 136\n-        line 486: 149\n-        line 487: 161\n-        line 488: 176\n-        line 489: 188\n-        line 490: 211\n-        line 491: 230\n-        line 492: 249\n-        line 493: 264\n-        line 495: 282\n-        line 496: 303\n-        line 499: 310\n-        line 500: 315\n-        line 501: 329\n-        line 504: 341\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-          158       3     4  read   I\n-          185       3     4  read   I\n-          279       3     4  read   I\n-            0     344     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n-            0     344     1 buffer   [B\n-            0     344     2 offset   I\n-            0     344     3 length   I\n-          310      34     4  read   I\n+        line 465: 24\n+        line 466: 31\n+        line 470: 33\n+        line 471: 55\n+        line 474: 63\n+        line 475: 73\n+        line 476: 87\n+        line 477: 98\n+        line 479: 105\n+        line 480: 119\n+        line 481: 130\n+        line 485: 137\n+        line 486: 150\n+        line 487: 162\n+        line 488: 177\n+        line 489: 189\n+        line 490: 212\n+        line 491: 231\n+        line 492: 250\n+        line 493: 265\n+        line 495: 283\n+        line 496: 304\n+        line 499: 311\n+        line 500: 316\n+        line 501: 330\n+        line 504: 342\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+          159       3     4  read   I\n+          186       3     4  read   I\n+          280       3     4  read   I\n+            0     345     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n+            0     345     1 buffer   [B\n+            0     345     2 offset   I\n+            0     345     3 length   I\n+          311      34     4  read   I\n       StackMapTable: number_of_entries = 13\n         frame_type = 6 /* same */\n-        frame_type = 16 /* same */\n+        frame_type = 17 /* same */\n         frame_type = 8 /* same */\n         frame_type = 21 /* same */\n         frame_type = 7 /* same */\n         frame_type = 41 /* same */\n         frame_type = 31 /* same */\n         frame_type = 24 /* same */\n         frame_type = 26 /* same */\n@@ -2258,84 +2258,84 @@\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-         4: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-         7: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+         1: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+         4: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+         7: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n         10: ifne          21\n         13: aload_0\n-        14: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        17: invokestatic  #154                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+        14: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        17: invokestatic  #506                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n         20: lreturn\n         21: aload_0\n-        22: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        25: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        28: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        22: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        25: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        28: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n         31: bipush        8\n         33: if_icmpne     41\n         36: aload_0\n-        37: invokespecial #155                // Method getBytesInflated:()J\n+        37: invokespecial #510                // Method getBytesInflated:()J\n         40: lreturn\n         41: aload_0\n-        42: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        45: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        48: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        51: getstatic     #145                // Field org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        54: invokevirtual #146                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        42: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        45: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        48: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        51: getstatic     #472                // Field org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        54: invokevirtual #475                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n         57: if_icmpne     74\n         60: aload_0\n-        61: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        64: invokestatic  #149                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n-        67: checkcast     #101                // class org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-        70: invokevirtual #156                // Method org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getCompressedCount:()J\n+        61: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        64: invokestatic  #484                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n+        67: checkcast     #345                // class org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+        70: invokevirtual #513                // Method org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getCompressedCount:()J\n         73: lreturn\n         74: aload_0\n-        75: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        78: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        81: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        84: getstatic     #147                // Field org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        87: invokevirtual #146                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        75: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        78: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        81: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        84: getstatic     #478                // Field org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        87: invokevirtual #475                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n         90: if_icmpne     107\n         93: aload_0\n-        94: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        97: invokestatic  #149                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n-       100: checkcast     #104                // class org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-       103: invokevirtual #157                // Method org/apache/commons/compress/archivers/zip/ExplodingInputStream.getCompressedCount:()J\n+        94: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        97: invokestatic  #484                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n+       100: checkcast     #354                // class org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+       103: invokevirtual #516                // Method org/apache/commons/compress/archivers/zip/ExplodingInputStream.getCompressedCount:()J\n        106: lreturn\n        107: aload_0\n-       108: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       111: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       114: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       117: getstatic     #113                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       120: invokevirtual #146                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+       108: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       111: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       114: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       117: getstatic     #375                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       120: invokevirtual #475                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n        123: if_icmpne     140\n        126: aload_0\n-       127: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       130: invokestatic  #149                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n-       133: checkcast     #111                // class org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-       136: invokevirtual #158                // Method org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.getCompressedCount:()J\n+       127: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       130: invokestatic  #484                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n+       133: checkcast     #372                // class org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+       136: invokevirtual #517                // Method org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.getCompressedCount:()J\n        139: lreturn\n        140: aload_0\n-       141: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       144: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       147: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       150: getstatic     #148                // Field org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       153: invokevirtual #146                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+       141: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       144: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       147: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       150: getstatic     #481                // Field org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       153: invokevirtual #475                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n        156: if_icmpne     173\n        159: aload_0\n-       160: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       163: invokestatic  #149                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n-       166: checkcast     #109                // class org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-       169: invokevirtual #159                // Method org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.getCompressedCount:()J\n+       160: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       163: invokestatic  #484                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n+       166: checkcast     #369                // class org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+       169: invokevirtual #518                // Method org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.getCompressedCount:()J\n        172: lreturn\n-       173: ldc2_w        #92                 // long -1l\n+       173: ldc2_w        #318                // long -1l\n        176: lreturn\n       LineNumberTable:\n         line 512: 0\n         line 513: 13\n         line 514: 21\n         line 515: 36\n         line 516: 41\n@@ -2360,179 +2360,179 @@\n \n   public long getUncompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #21                 // Field uncompressedCount:J\n+         1: getfield      #70                 // Field uncompressedCount:J\n          4: lreturn\n       LineNumberTable:\n         line 534: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n \n   private int readStored(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=7, args_size=4\n          0: aload_0\n-         1: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-         4: invokestatic  #75                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+         1: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+         4: invokestatic  #254                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n          7: ifeq          32\n         10: aload_0\n-        11: getfield      #19                 // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n+        11: getfield      #63                 // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n         14: ifnonnull     21\n         17: aload_0\n-        18: invokespecial #160                // Method readStoredEntry:()V\n+        18: invokespecial #519                // Method readStoredEntry:()V\n         21: aload_0\n-        22: getfield      #19                 // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n+        22: getfield      #63                 // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n         25: aload_1\n         26: iload_2\n         27: iload_3\n-        28: invokevirtual #161                // Method java/io/ByteArrayInputStream.read:([BII)I\n+        28: invokevirtual #522                // Method java/io/ByteArrayInputStream.read:([BII)I\n         31: ireturn\n         32: aload_0\n-        33: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        36: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        39: invokevirtual #162                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+        33: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        36: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        39: invokevirtual #525                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n         42: lstore        4\n         44: aload_0\n-        45: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        48: invokestatic  #154                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+        45: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        48: invokestatic  #506                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n         51: lload         4\n         53: lcmp\n         54: iflt          59\n         57: iconst_m1\n         58: ireturn\n         59: aload_0\n-        60: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        63: invokevirtual #163                // Method java/nio/ByteBuffer.position:()I\n+        60: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        63: invokevirtual #527                // Method java/nio/ByteBuffer.position:()I\n         66: aload_0\n-        67: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        70: invokevirtual #164                // Method java/nio/ByteBuffer.limit:()I\n-        73: if_icmplt     153\n+        67: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        70: invokevirtual #530                // Method java/nio/ByteBuffer.limit:()I\n+        73: if_icmplt     154\n         76: aload_0\n-        77: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n+        77: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n         80: iconst_0\n-        81: invokevirtual #165                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n+        81: invokevirtual #532                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n         84: pop\n         85: aload_0\n-        86: getfield      #36                 // Field in:Ljava/io/InputStream;\n+        86: getfield      #118                // Field in:Ljava/io/InputStream;\n         89: aload_0\n-        90: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        93: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n-        96: invokevirtual #167                // Method java/io/InputStream.read:([B)I\n+        90: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        93: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n+        96: invokevirtual #538                // Method java/io/InputStream.read:([B)I\n         99: istore        6\n        101: iload         6\n        103: iconst_m1\n-       104: if_icmpne     126\n+       104: if_icmpne     127\n        107: aload_0\n-       108: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n+       108: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n        111: iconst_0\n-       112: invokevirtual #38                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+       112: invokevirtual #125                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n        115: pop\n-       116: new           #134                // class java/io/IOException\n+       116: new           #444                // class java/io/IOException\n        119: dup\n-       120: ldc           #168                // String Truncated ZIP file\n-       122: invokespecial #136                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       125: athrow\n-       126: aload_0\n-       127: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       130: iload         6\n-       132: invokevirtual #38                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n-       135: pop\n-       136: aload_0\n-       137: iload         6\n-       139: invokevirtual #2                  // Method count:(I)V\n-       142: aload_0\n-       143: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       146: iload         6\n-       148: i2l\n-       149: invokestatic  #169                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$714:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-       152: pop2\n-       153: aload_0\n-       154: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       157: invokevirtual #170                // Method java/nio/ByteBuffer.remaining:()I\n-       160: iload_3\n-       161: invokestatic  #171                // Method java/lang/Math.min:(II)I\n-       164: istore        6\n-       166: lload         4\n-       168: aload_0\n-       169: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       172: invokestatic  #154                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-       175: lsub\n-       176: iload         6\n-       178: i2l\n-       179: lcmp\n-       180: ifge          196\n-       183: lload         4\n-       185: aload_0\n-       186: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       189: invokestatic  #154                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-       192: lsub\n-       193: l2i\n-       194: istore        6\n-       196: aload_0\n-       197: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       200: aload_1\n-       201: iload_2\n-       202: iload         6\n-       204: invokevirtual #172                // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n-       207: pop\n-       208: aload_0\n-       209: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       212: iload         6\n-       214: i2l\n-       215: invokestatic  #173                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$614:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-       218: pop2\n-       219: iload         6\n-       221: ireturn\n+       120: ldc_w         #541                // String Truncated ZIP file\n+       123: invokespecial #448                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       126: athrow\n+       127: aload_0\n+       128: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       131: iload         6\n+       133: invokevirtual #125                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+       136: pop\n+       137: aload_0\n+       138: iload         6\n+       140: invokevirtual #3                  // Method count:(I)V\n+       143: aload_0\n+       144: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       147: iload         6\n+       149: i2l\n+       150: invokestatic  #543                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$714:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+       153: pop2\n+       154: aload_0\n+       155: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       158: invokevirtual #547                // Method java/nio/ByteBuffer.remaining:()I\n+       161: iload_3\n+       162: invokestatic  #550                // Method java/lang/Math.min:(II)I\n+       165: istore        6\n+       167: lload         4\n+       169: aload_0\n+       170: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       173: invokestatic  #506                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+       176: lsub\n+       177: iload         6\n+       179: i2l\n+       180: lcmp\n+       181: ifge          197\n+       184: lload         4\n+       186: aload_0\n+       187: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       190: invokestatic  #506                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+       193: lsub\n+       194: l2i\n+       195: istore        6\n+       197: aload_0\n+       198: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       201: aload_1\n+       202: iload_2\n+       203: iload         6\n+       205: invokevirtual #556                // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+       208: pop\n+       209: aload_0\n+       210: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       213: iload         6\n+       215: i2l\n+       216: invokestatic  #560                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$614:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+       219: pop2\n+       220: iload         6\n+       222: ireturn\n       LineNumberTable:\n         line 542: 0\n         line 543: 10\n         line 544: 17\n         line 546: 21\n         line 549: 32\n         line 550: 44\n         line 551: 57\n         line 554: 59\n         line 555: 76\n         line 556: 85\n         line 557: 101\n         line 558: 107\n         line 559: 116\n-        line 561: 126\n-        line 563: 136\n-        line 564: 142\n-        line 567: 153\n-        line 568: 166\n-        line 570: 183\n-        line 572: 196\n-        line 573: 208\n-        line 574: 219\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-          101      52     6     l   I\n-            0     222     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n-            0     222     1 buffer   [B\n-            0     222     2 offset   I\n-            0     222     3 length   I\n-           44     178     4 csize   J\n-          166      56     6 toRead   I\n+        line 561: 127\n+        line 563: 137\n+        line 564: 143\n+        line 567: 154\n+        line 568: 167\n+        line 570: 184\n+        line 572: 197\n+        line 573: 209\n+        line 574: 220\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+          101      53     6     l   I\n+            0     223     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n+            0     223     1 buffer   [B\n+            0     223     2 offset   I\n+            0     223     3 length   I\n+           44     179     4 csize   J\n+          167      56     6 toRead   I\n       StackMapTable: number_of_entries = 6\n         frame_type = 21 /* same */\n         frame_type = 10 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 26\n           locals = [ long ]\n         frame_type = 252 /* append */\n-          offset_delta = 66\n+          offset_delta = 67\n           locals = [ int ]\n         frame_type = 250 /* chop */\n           offset_delta = 26\n         frame_type = 252 /* append */\n           offset_delta = 42\n           locals = [ int ]\n     Exceptions:\n@@ -2543,122 +2543,122 @@\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=5, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: invokespecial #174                // Method readFromInflater:([BII)I\n+         4: invokespecial #563                // Method readFromInflater:([BII)I\n          7: istore        4\n          9: iload         4\n-        11: ifgt          62\n+        11: ifgt          64\n         14: aload_0\n-        15: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-        18: invokevirtual #175                // Method java/util/zip/Inflater.finished:()Z\n+        15: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+        18: invokevirtual #566                // Method java/util/zip/Inflater.finished:()Z\n         21: ifeq          26\n         24: iconst_m1\n         25: ireturn\n         26: aload_0\n-        27: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-        30: invokevirtual #176                // Method java/util/zip/Inflater.needsDictionary:()Z\n-        33: ifeq          46\n-        36: new           #52                 // class java/util/zip/ZipException\n+        27: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+        30: invokevirtual #569                // Method java/util/zip/Inflater.needsDictionary:()Z\n+        33: ifeq          47\n+        36: new           #169                // class java/util/zip/ZipException\n         39: dup\n-        40: ldc           #177                // String This archive needs a preset dictionary which is not supported by Commons Compress.\n-        42: invokespecial #58                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-        45: athrow\n-        46: iload         4\n-        48: iconst_m1\n-        49: if_icmpne     62\n-        52: new           #134                // class java/io/IOException\n-        55: dup\n-        56: ldc           #168                // String Truncated ZIP file\n-        58: invokespecial #136                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        61: athrow\n-        62: iload         4\n-        64: ireturn\n+        40: ldc_w         #572                // String This archive needs a preset dictionary which is not supported by Commons Compress.\n+        43: invokespecial #190                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        46: athrow\n+        47: iload         4\n+        49: iconst_m1\n+        50: if_icmpne     64\n+        53: new           #444                // class java/io/IOException\n+        56: dup\n+        57: ldc_w         #541                // String Truncated ZIP file\n+        60: invokespecial #448                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        63: athrow\n+        64: iload         4\n+        66: ireturn\n       LineNumberTable:\n         line 581: 0\n         line 582: 9\n         line 583: 14\n         line 584: 24\n         line 585: 26\n         line 586: 36\n-        line 589: 46\n-        line 590: 52\n-        line 593: 62\n+        line 589: 47\n+        line 590: 53\n+        line 593: 64\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      65     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n-            0      65     1 buffer   [B\n-            0      65     2 offset   I\n-            0      65     3 length   I\n-            9      56     4  read   I\n+            0      67     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n+            0      67     1 buffer   [B\n+            0      67     2 offset   I\n+            0      67     3 length   I\n+            9      58     4  read   I\n       StackMapTable: number_of_entries = 3\n         frame_type = 252 /* append */\n           offset_delta = 26\n           locals = [ int ]\n-        frame_type = 19 /* same */\n-        frame_type = 15 /* same */\n+        frame_type = 20 /* same */\n+        frame_type = 16 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   private int readFromInflater(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=6, args_size=4\n          0: iconst_0\n          1: istore        4\n          3: aload_0\n-         4: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-         7: invokevirtual #178                // Method java/util/zip/Inflater.needsInput:()Z\n+         4: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+         7: invokevirtual #574                // Method java/util/zip/Inflater.needsInput:()Z\n         10: ifeq          51\n         13: aload_0\n-        14: invokespecial #179                // Method fill:()I\n+        14: invokespecial #577                // Method fill:()I\n         17: istore        5\n         19: iload         5\n         21: ifle          43\n         24: aload_0\n-        25: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        25: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n         28: aload_0\n-        29: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        32: invokevirtual #164                // Method java/nio/ByteBuffer.limit:()I\n+        29: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        32: invokevirtual #530                // Method java/nio/ByteBuffer.limit:()I\n         35: i2l\n-        36: invokestatic  #169                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$714:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+        36: invokestatic  #543                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$714:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n         39: pop2\n         40: goto          51\n         43: iload         5\n         45: iconst_m1\n         46: if_icmpne     104\n         49: iconst_m1\n         50: ireturn\n         51: aload_0\n-        52: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n+        52: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n         55: aload_1\n         56: iload_2\n         57: iload_3\n-        58: invokevirtual #180                // Method java/util/zip/Inflater.inflate:([BII)I\n+        58: invokevirtual #580                // Method java/util/zip/Inflater.inflate:([BII)I\n         61: istore        4\n         63: goto          89\n         66: astore        5\n-        68: new           #52                 // class java/util/zip/ZipException\n+        68: new           #169                // class java/util/zip/ZipException\n         71: dup\n         72: aload         5\n-        74: invokevirtual #182                // Method java/util/zip/DataFormatException.getMessage:()Ljava/lang/String;\n-        77: invokespecial #58                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        74: invokevirtual #585                // Method java/util/zip/DataFormatException.getMessage:()Ljava/lang/String;\n+        77: invokespecial #190                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n         80: aload         5\n-        82: invokevirtual #183                // Method java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-        85: checkcast     #134                // class java/io/IOException\n+        82: invokevirtual #589                // Method java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+        85: checkcast     #444                // class java/io/IOException\n         88: athrow\n         89: iload         4\n         91: ifne          104\n         94: aload_0\n-        95: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-        98: invokevirtual #178                // Method java/util/zip/Inflater.needsInput:()Z\n+        95: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+        98: invokevirtual #574                // Method java/util/zip/Inflater.needsInput:()Z\n        101: ifne          3\n        104: iload         4\n        106: ireturn\n       Exception table:\n          from    to  target type\n             51    63    66   Class java/util/zip/DataFormatException\n       LineNumberTable:\n@@ -2702,30 +2702,30 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #17                 // Field closed:Z\n+         1: getfield      #56                 // Field closed:Z\n          4: ifne          39\n          7: aload_0\n          8: iconst_1\n-         9: putfield      #17                 // Field closed:Z\n+         9: putfield      #56                 // Field closed:Z\n         12: aload_0\n-        13: getfield      #36                 // Field in:Ljava/io/InputStream;\n-        16: invokevirtual #184                // Method java/io/InputStream.close:()V\n+        13: getfield      #118                // Field in:Ljava/io/InputStream;\n+        16: invokevirtual #593                // Method java/io/InputStream.close:()V\n         19: aload_0\n-        20: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-        23: invokevirtual #185                // Method java/util/zip/Inflater.end:()V\n+        20: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+        23: invokevirtual #596                // Method java/util/zip/Inflater.end:()V\n         26: goto          39\n         29: astore_1\n         30: aload_0\n-        31: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-        34: invokevirtual #185                // Method java/util/zip/Inflater.end:()V\n+        31: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+        34: invokevirtual #596                // Method java/util/zip/Inflater.end:()V\n         37: aload_1\n         38: athrow\n         39: return\n       Exception table:\n          from    to  target type\n             12    19    29   any\n       LineNumberTable:\n@@ -2764,48 +2764,48 @@\n         11: ifge          71\n         14: lload_1\n         15: lload_3\n         16: lsub\n         17: lstore        5\n         19: aload_0\n         20: aload_0\n-        21: getfield      #24                 // Field skipBuf:[B\n+        21: getfield      #78                 // Field skipBuf:[B\n         24: iconst_0\n         25: aload_0\n-        26: getfield      #24                 // Field skipBuf:[B\n+        26: getfield      #78                 // Field skipBuf:[B\n         29: arraylength\n         30: i2l\n         31: lload         5\n         33: lcmp\n         34: ifle          42\n         37: lload         5\n         39: goto          48\n         42: aload_0\n-        43: getfield      #24                 // Field skipBuf:[B\n+        43: getfield      #78                 // Field skipBuf:[B\n         46: arraylength\n         47: i2l\n         48: l2i\n-        49: invokevirtual #186                // Method read:([BII)I\n+        49: invokevirtual #599                // Method read:([BII)I\n         52: istore        7\n         54: iload         7\n         56: iconst_m1\n         57: if_icmpne     62\n         60: lload_3\n         61: lreturn\n         62: lload_3\n         63: iload         7\n         65: i2l\n         66: ladd\n         67: lstore_3\n         68: goto          8\n         71: lload_3\n         72: lreturn\n-        73: new           #187                // class java/lang/IllegalArgumentException\n+        73: new           #600                // class java/lang/IllegalArgumentException\n         76: dup\n-        77: invokespecial #188                // Method java/lang/IllegalArgumentException.\"<init>\":()V\n+        77: invokespecial #602                // Method java/lang/IllegalArgumentException.\"<init>\":()V\n         80: athrow\n       LineNumberTable:\n         line 651: 0\n         line 652: 6\n         line 653: 8\n         line 654: 14\n         line 655: 19\n@@ -2846,35 +2846,35 @@\n \n   public static boolean matches(byte[], int);\n     descriptor: ([BI)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: iload_1\n-         1: getstatic     #189                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+         1: getstatic     #603                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n          4: arraylength\n          5: if_icmpge     10\n          8: iconst_0\n          9: ireturn\n         10: aload_0\n-        11: getstatic     #189                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n-        14: invokestatic  #190                // Method checksig:([B[B)Z\n+        11: getstatic     #603                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+        14: invokestatic  #605                // Method checksig:([B[B)Z\n         17: ifne          53\n         20: aload_0\n-        21: getstatic     #191                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n-        24: invokestatic  #190                // Method checksig:([B[B)Z\n+        21: getstatic     #609                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+        24: invokestatic  #605                // Method checksig:([B[B)Z\n         27: ifne          53\n         30: aload_0\n-        31: getstatic     #192                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n-        34: invokestatic  #190                // Method checksig:([B[B)Z\n+        31: getstatic     #612                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n+        34: invokestatic  #605                // Method checksig:([B[B)Z\n         37: ifne          53\n         40: aload_0\n-        41: getstatic     #118                // Field org/apache/commons/compress/archivers/zip/ZipLong.SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        44: invokevirtual #193                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-        47: invokestatic  #190                // Method checksig:([B[B)Z\n+        41: getstatic     #392                // Field org/apache/commons/compress/archivers/zip/ZipLong.SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        44: invokevirtual #614                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+        47: invokestatic  #605                // Method checksig:([B[B)Z\n         50: ifeq          57\n         53: iconst_1\n         54: goto          58\n         57: iconst_0\n         58: ireturn\n       LineNumberTable:\n         line 676: 0\n@@ -2940,133 +2940,133 @@\n \n   private void closeEntry() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=4, args_size=1\n          0: aload_0\n-         1: getfield      #17                 // Field closed:Z\n-         4: ifeq          17\n-         7: new           #134                // class java/io/IOException\n+         1: getfield      #56                 // Field closed:Z\n+         4: ifeq          18\n+         7: new           #444                // class java/io/IOException\n         10: dup\n-        11: ldc           #135                // String The stream is closed\n-        13: invokespecial #136                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        16: athrow\n-        17: aload_0\n-        18: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        21: ifnonnull     25\n-        24: return\n-        25: aload_0\n-        26: invokespecial #194                // Method currentEntryHasOutstandingBytes:()Z\n-        29: ifeq          39\n-        32: aload_0\n-        33: invokespecial #195                // Method drainCurrentEntryData:()V\n-        36: goto          134\n-        39: aload_0\n-        40: ldc2_w        #197                // long 9223372036854775807l\n-        43: invokevirtual #199                // Method skip:(J)J\n-        46: pop2\n-        47: aload_0\n-        48: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        51: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        54: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        57: bipush        8\n-        59: if_icmpne     69\n-        62: aload_0\n-        63: invokespecial #155                // Method getBytesInflated:()J\n-        66: goto          76\n-        69: aload_0\n-        70: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        73: invokestatic  #154                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-        76: lstore_1\n-        77: aload_0\n-        78: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        81: invokestatic  #200                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-        84: lload_1\n-        85: lsub\n-        86: l2i\n-        87: istore_3\n-        88: iload_3\n-        89: ifle          123\n-        92: aload_0\n+        11: ldc_w         #446                // String The stream is closed\n+        14: invokespecial #448                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        17: athrow\n+        18: aload_0\n+        19: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        22: ifnonnull     26\n+        25: return\n+        26: aload_0\n+        27: invokespecial #617                // Method currentEntryHasOutstandingBytes:()Z\n+        30: ifeq          40\n+        33: aload_0\n+        34: invokespecial #620                // Method drainCurrentEntryData:()V\n+        37: goto          135\n+        40: aload_0\n+        41: ldc2_w        #623                // long 9223372036854775807l\n+        44: invokevirtual #625                // Method skip:(J)J\n+        47: pop2\n+        48: aload_0\n+        49: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        52: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        55: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        58: bipush        8\n+        60: if_icmpne     70\n+        63: aload_0\n+        64: invokespecial #510                // Method getBytesInflated:()J\n+        67: goto          77\n+        70: aload_0\n+        71: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        74: invokestatic  #506                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+        77: lstore_1\n+        78: aload_0\n+        79: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        82: invokestatic  #628                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+        85: lload_1\n+        86: lsub\n+        87: l2i\n+        88: istore_3\n+        89: iload_3\n+        90: ifle          124\n         93: aload_0\n-        94: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        97: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n-       100: aload_0\n-       101: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       104: invokevirtual #164                // Method java/nio/ByteBuffer.limit:()I\n-       107: iload_3\n-       108: isub\n-       109: iload_3\n-       110: invokespecial #201                // Method pushback:([BII)V\n-       113: aload_0\n-       114: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       117: iload_3\n-       118: i2l\n-       119: invokestatic  #202                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$722:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-       122: pop2\n-       123: aload_0\n-       124: invokespecial #194                // Method currentEntryHasOutstandingBytes:()Z\n-       127: ifeq          134\n-       130: aload_0\n-       131: invokespecial #195                // Method drainCurrentEntryData:()V\n-       134: aload_0\n-       135: getfield      #19                 // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n-       138: ifnonnull     155\n-       141: aload_0\n-       142: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       145: invokestatic  #75                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n-       148: ifeq          155\n-       151: aload_0\n-       152: invokespecial #203                // Method readDataDescriptor:()V\n-       155: aload_0\n-       156: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-       159: invokevirtual #204                // Method java/util/zip/Inflater.reset:()V\n-       162: aload_0\n-       163: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       166: invokevirtual #205                // Method java/nio/ByteBuffer.clear:()Ljava/nio/ByteBuffer;\n-       169: invokevirtual #206                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n-       172: pop\n-       173: aload_0\n-       174: aconst_null\n-       175: putfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       178: aload_0\n-       179: aconst_null\n-       180: putfield      #19                 // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n-       183: return\n+        94: aload_0\n+        95: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        98: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n+       101: aload_0\n+       102: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       105: invokevirtual #530                // Method java/nio/ByteBuffer.limit:()I\n+       108: iload_3\n+       109: isub\n+       110: iload_3\n+       111: invokespecial #631                // Method pushback:([BII)V\n+       114: aload_0\n+       115: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       118: iload_3\n+       119: i2l\n+       120: invokestatic  #634                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$722:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+       123: pop2\n+       124: aload_0\n+       125: invokespecial #617                // Method currentEntryHasOutstandingBytes:()Z\n+       128: ifeq          135\n+       131: aload_0\n+       132: invokespecial #620                // Method drainCurrentEntryData:()V\n+       135: aload_0\n+       136: getfield      #63                 // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n+       139: ifnonnull     156\n+       142: aload_0\n+       143: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       146: invokestatic  #254                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+       149: ifeq          156\n+       152: aload_0\n+       153: invokespecial #637                // Method readDataDescriptor:()V\n+       156: aload_0\n+       157: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+       160: invokevirtual #640                // Method java/util/zip/Inflater.reset:()V\n+       163: aload_0\n+       164: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       167: invokevirtual #643                // Method java/nio/ByteBuffer.clear:()Ljava/nio/ByteBuffer;\n+       170: invokevirtual #647                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+       173: pop\n+       174: aload_0\n+       175: aconst_null\n+       176: putfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       179: aload_0\n+       180: aconst_null\n+       181: putfield      #63                 // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n+       184: return\n       LineNumberTable:\n         line 714: 0\n         line 715: 7\n-        line 717: 17\n-        line 718: 24\n-        line 722: 25\n-        line 723: 32\n-        line 726: 39\n-        line 728: 47\n-        line 729: 62\n-        line 733: 77\n-        line 736: 88\n-        line 737: 92\n-        line 738: 113\n-        line 742: 123\n-        line 743: 130\n-        line 747: 134\n-        line 748: 151\n-        line 751: 155\n-        line 752: 162\n-        line 753: 173\n-        line 754: 178\n-        line 755: 183\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-           77      57     1   inB   J\n-           88      46     3  diff   I\n-            0     184     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n+        line 717: 18\n+        line 718: 25\n+        line 722: 26\n+        line 723: 33\n+        line 726: 40\n+        line 728: 48\n+        line 729: 63\n+        line 733: 78\n+        line 736: 89\n+        line 737: 93\n+        line 738: 114\n+        line 742: 124\n+        line 743: 131\n+        line 747: 135\n+        line 748: 152\n+        line 751: 156\n+        line 752: 163\n+        line 753: 174\n+        line 754: 179\n+        line 755: 184\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+           78      57     1   inB   J\n+           89      46     3  diff   I\n+            0     185     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n       StackMapTable: number_of_entries = 8\n-        frame_type = 17 /* same */\n+        frame_type = 18 /* same */\n         frame_type = 7 /* same */\n         frame_type = 13 /* same */\n         frame_type = 29 /* same */\n         frame_type = 70 /* same_locals_1_stack_item */\n           stack = [ long ]\n         frame_type = 253 /* append */\n           offset_delta = 46\n@@ -3079,25 +3079,25 @@\n \n   private boolean currentEntryHasOutstandingBytes();\n     descriptor: ()Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-         4: invokestatic  #200                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+         1: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+         4: invokestatic  #628                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n          7: aload_0\n-         8: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        11: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        14: invokevirtual #90                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+         8: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        11: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        14: invokevirtual #313                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n         17: lcmp\n         18: ifgt          35\n         21: aload_0\n-        22: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        25: invokestatic  #75                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+        22: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        25: invokestatic  #254                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n         28: ifne          35\n         31: iconst_1\n         32: goto          36\n         35: iconst_0\n         36: ireturn\n       LineNumberTable:\n         line 765: 0\n@@ -3113,59 +3113,59 @@\n \n   private void drainCurrentEntryData() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=5, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-         4: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-         7: invokevirtual #90                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+         1: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+         4: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+         7: invokevirtual #313                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n         10: aload_0\n-        11: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        14: invokestatic  #200                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+        11: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        14: invokestatic  #628                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n         17: lsub\n         18: lstore_1\n         19: lload_1\n         20: lconst_0\n         21: lcmp\n         22: ifle          99\n         25: aload_0\n-        26: getfield      #36                 // Field in:Ljava/io/InputStream;\n+        26: getfield      #118                // Field in:Ljava/io/InputStream;\n         29: aload_0\n-        30: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        33: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n+        30: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        33: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n         36: iconst_0\n         37: aload_0\n-        38: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        41: invokevirtual #34                 // Method java/nio/ByteBuffer.capacity:()I\n+        38: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        41: invokevirtual #111                // Method java/nio/ByteBuffer.capacity:()I\n         44: i2l\n         45: lload_1\n-        46: invokestatic  #207                // Method java/lang/Math.min:(JJ)J\n+        46: invokestatic  #650                // Method java/lang/Math.min:(JJ)J\n         49: l2i\n-        50: invokevirtual #150                // Method java/io/InputStream.read:([BII)I\n+        50: invokevirtual #488                // Method java/io/InputStream.read:([BII)I\n         53: i2l\n         54: lstore_3\n         55: lload_3\n         56: lconst_0\n         57: lcmp\n         58: ifge          87\n-        61: new           #43                 // class java/io/EOFException\n+        61: new           #142                // class java/io/EOFException\n         64: dup\n         65: aload_0\n-        66: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        69: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        72: invokevirtual #208                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-        75: invokestatic  #209                // Method org/apache/commons/compress/utils/ArchiveUtils.sanitize:(Ljava/lang/String;)Ljava/lang/String;\n-        78: invokedynamic #210,  0            // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n-        83: invokespecial #211                // Method java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n+        66: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        69: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        72: invokevirtual #653                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+        75: invokestatic  #656                // Method org/apache/commons/compress/utils/ArchiveUtils.sanitize:(Ljava/lang/String;)Ljava/lang/String;\n+        78: invokedynamic #662,  0            // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n+        83: invokespecial #665                // Method java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n         86: athrow\n         87: aload_0\n         88: lload_3\n-        89: invokevirtual #212                // Method count:(J)V\n+        89: invokevirtual #666                // Method count:(J)V\n         92: lload_1\n         93: lload_3\n         94: lsub\n         95: lstore_1\n         96: goto          19\n         99: return\n       LineNumberTable:\n@@ -3198,33 +3198,33 @@\n \n   private long getBytesInflated();\n     descriptor: ()J\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=3, args_size=1\n          0: aload_0\n-         1: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-         4: invokevirtual #213                // Method java/util/zip/Inflater.getBytesRead:()J\n+         1: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+         4: invokevirtual #668                // Method java/util/zip/Inflater.getBytesRead:()J\n          7: lstore_1\n          8: aload_0\n-         9: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        12: invokestatic  #200                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-        15: ldc2_w        #214                // long 4294967296l\n+         9: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        12: invokestatic  #628                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+        15: ldc2_w        #669                // long 4294967296l\n         18: lcmp\n         19: iflt          47\n         22: lload_1\n-        23: ldc2_w        #214                // long 4294967296l\n+        23: ldc2_w        #669                // long 4294967296l\n         26: ladd\n         27: aload_0\n-        28: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        31: invokestatic  #200                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+        28: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        31: invokestatic  #628                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n         34: lcmp\n         35: ifgt          47\n         38: lload_1\n-        39: ldc2_w        #214                // long 4294967296l\n+        39: ldc2_w        #669                // long 4294967296l\n         42: ladd\n         43: lstore_1\n         44: goto          22\n         47: lload_1\n         48: lreturn\n       LineNumberTable:\n         line 802: 0\n@@ -3244,82 +3244,82 @@\n \n   private int fill() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #17                 // Field closed:Z\n-         4: ifeq          17\n-         7: new           #134                // class java/io/IOException\n+         1: getfield      #56                 // Field closed:Z\n+         4: ifeq          18\n+         7: new           #444                // class java/io/IOException\n         10: dup\n-        11: ldc           #135                // String The stream is closed\n-        13: invokespecial #136                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        16: athrow\n-        17: aload_0\n-        18: getfield      #36                 // Field in:Ljava/io/InputStream;\n-        21: aload_0\n-        22: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        25: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n-        28: invokevirtual #167                // Method java/io/InputStream.read:([B)I\n-        31: istore_1\n-        32: iload_1\n-        33: ifle          78\n-        36: aload_0\n-        37: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        40: iload_1\n-        41: invokevirtual #38                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n-        44: pop\n-        45: aload_0\n+        11: ldc_w         #446                // String The stream is closed\n+        14: invokespecial #448                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        17: athrow\n+        18: aload_0\n+        19: getfield      #118                // Field in:Ljava/io/InputStream;\n+        22: aload_0\n+        23: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        26: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n+        29: invokevirtual #538                // Method java/io/InputStream.read:([B)I\n+        32: istore_1\n+        33: iload_1\n+        34: ifle          79\n+        37: aload_0\n+        38: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        41: iload_1\n+        42: invokevirtual #125                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+        45: pop\n         46: aload_0\n-        47: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        50: invokevirtual #164                // Method java/nio/ByteBuffer.limit:()I\n-        53: invokevirtual #2                  // Method count:(I)V\n-        56: aload_0\n-        57: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-        60: aload_0\n-        61: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        64: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n-        67: iconst_0\n-        68: aload_0\n-        69: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        72: invokevirtual #164                // Method java/nio/ByteBuffer.limit:()I\n-        75: invokevirtual #216                // Method java/util/zip/Inflater.setInput:([BII)V\n-        78: iload_1\n-        79: ireturn\n+        47: aload_0\n+        48: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        51: invokevirtual #530                // Method java/nio/ByteBuffer.limit:()I\n+        54: invokevirtual #3                  // Method count:(I)V\n+        57: aload_0\n+        58: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+        61: aload_0\n+        62: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        65: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n+        68: iconst_0\n+        69: aload_0\n+        70: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        73: invokevirtual #530                // Method java/nio/ByteBuffer.limit:()I\n+        76: invokevirtual #671                // Method java/util/zip/Inflater.setInput:([BII)V\n+        79: iload_1\n+        80: ireturn\n       LineNumberTable:\n         line 812: 0\n         line 813: 7\n-        line 815: 17\n-        line 816: 32\n-        line 817: 36\n-        line 818: 45\n-        line 819: 56\n-        line 821: 78\n+        line 815: 18\n+        line 816: 33\n+        line 817: 37\n+        line 818: 46\n+        line 819: 57\n+        line 821: 79\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      80     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n-           32      48     1 length   I\n+            0      81     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n+           33      48     1 length   I\n       StackMapTable: number_of_entries = 2\n-        frame_type = 17 /* same */\n+        frame_type = 18 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 60\n           locals = [ int ]\n     Exceptions:\n       throws java.io.IOException\n \n   private void readFully(byte[]) throws java.io.IOException;\n     descriptor: ([B)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: invokespecial #217                // Method readFully:([BI)V\n+         3: invokespecial #674                // Method readFully:([BI)V\n          6: return\n       LineNumberTable:\n         line 825: 0\n         line 826: 6\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n@@ -3334,29 +3334,29 @@\n       stack=4, locals=5, args_size=3\n          0: aload_1\n          1: arraylength\n          2: iload_2\n          3: isub\n          4: istore_3\n          5: aload_0\n-         6: getfield      #36                 // Field in:Ljava/io/InputStream;\n+         6: getfield      #118                // Field in:Ljava/io/InputStream;\n          9: aload_1\n         10: iload_2\n         11: iload_3\n-        12: invokestatic  #218                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n+        12: invokestatic  #676                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n         15: istore        4\n         17: aload_0\n         18: iload         4\n-        20: invokevirtual #2                  // Method count:(I)V\n+        20: invokevirtual #3                  // Method count:(I)V\n         23: iload         4\n         25: iload_3\n         26: if_icmpge     37\n-        29: new           #43                 // class java/io/EOFException\n+        29: new           #142                // class java/io/EOFException\n         32: dup\n-        33: invokespecial #219                // Method java/io/EOFException.\"<init>\":()V\n+        33: invokespecial #681                // Method java/io/EOFException.\"<init>\":()V\n         36: athrow\n         37: return\n       LineNumberTable:\n         line 829: 0\n         line 830: 5\n         line 831: 17\n         line 832: 23\n@@ -3379,98 +3379,98 @@\n   private void readDataDescriptor() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=3, args_size=1\n          0: aload_0\n          1: aload_0\n-         2: getfield      #26                 // Field wordBuf:[B\n-         5: invokespecial #42                 // Method readFully:([B)V\n-         8: new           #44                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+         2: getfield      #84                 // Field wordBuf:[B\n+         5: invokespecial #139                // Method readFully:([B)V\n+         8: new           #144                // class org/apache/commons/compress/archivers/zip/ZipLong\n         11: dup\n         12: aload_0\n-        13: getfield      #26                 // Field wordBuf:[B\n-        16: invokespecial #45                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+        13: getfield      #84                 // Field wordBuf:[B\n+        16: invokespecial #146                // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n         19: astore_1\n-        20: getstatic     #114                // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        20: getstatic     #378                // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n         23: aload_1\n-        24: invokevirtual #47                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        24: invokevirtual #152                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n         27: ifeq          50\n         30: aload_0\n         31: aload_0\n-        32: getfield      #26                 // Field wordBuf:[B\n-        35: invokespecial #42                 // Method readFully:([B)V\n-        38: new           #44                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+        32: getfield      #84                 // Field wordBuf:[B\n+        35: invokespecial #139                // Method readFully:([B)V\n+        38: new           #144                // class org/apache/commons/compress/archivers/zip/ZipLong\n         41: dup\n         42: aload_0\n-        43: getfield      #26                 // Field wordBuf:[B\n-        46: invokespecial #45                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+        43: getfield      #84                 // Field wordBuf:[B\n+        46: invokespecial #146                // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n         49: astore_1\n         50: aload_0\n-        51: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        54: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        51: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        54: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n         57: aload_1\n-        58: invokevirtual #55                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-        61: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n+        58: invokevirtual #175                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+        61: invokevirtual #258                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n         64: aload_0\n         65: aload_0\n-        66: getfield      #27                 // Field twoDwordBuf:[B\n-        69: invokespecial #42                 // Method readFully:([B)V\n-        72: new           #44                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+        66: getfield      #87                 // Field twoDwordBuf:[B\n+        69: invokespecial #139                // Method readFully:([B)V\n+        72: new           #144                // class org/apache/commons/compress/archivers/zip/ZipLong\n         75: dup\n         76: aload_0\n-        77: getfield      #27                 // Field twoDwordBuf:[B\n+        77: getfield      #87                 // Field twoDwordBuf:[B\n         80: bipush        8\n-        82: invokespecial #77                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+        82: invokespecial #261                // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n         85: astore_2\n         86: aload_2\n-        87: getstatic     #48                 // Field org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        90: invokevirtual #47                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        87: getstatic     #156                // Field org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        90: invokevirtual #152                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n         93: ifne          106\n         96: aload_2\n-        97: getstatic     #46                 // Field org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-       100: invokevirtual #47                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        97: getstatic     #148                // Field org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+       100: invokevirtual #152                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n        103: ifeq          156\n        106: aload_0\n        107: aload_0\n-       108: getfield      #27                 // Field twoDwordBuf:[B\n+       108: getfield      #87                 // Field twoDwordBuf:[B\n        111: bipush        8\n        113: bipush        8\n-       115: invokespecial #201                // Method pushback:([BII)V\n+       115: invokespecial #631                // Method pushback:([BII)V\n        118: aload_0\n-       119: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       122: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       119: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       122: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        125: aload_0\n-       126: getfield      #27                 // Field twoDwordBuf:[B\n-       129: invokestatic  #220                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-       132: invokevirtual #127                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+       126: getfield      #87                 // Field twoDwordBuf:[B\n+       129: invokestatic  #682                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+       132: invokevirtual #425                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n        135: aload_0\n-       136: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       139: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       136: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       139: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        142: aload_0\n-       143: getfield      #27                 // Field twoDwordBuf:[B\n+       143: getfield      #87                 // Field twoDwordBuf:[B\n        146: iconst_4\n-       147: invokestatic  #72                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       150: invokevirtual #129                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+       147: invokestatic  #241                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       150: invokevirtual #431                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n        153: goto          192\n        156: aload_0\n-       157: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       160: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       157: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       160: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        163: aload_0\n-       164: getfield      #27                 // Field twoDwordBuf:[B\n-       167: invokestatic  #221                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n-       170: invokevirtual #127                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+       164: getfield      #87                 // Field twoDwordBuf:[B\n+       167: invokestatic  #685                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+       170: invokevirtual #425                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n        173: aload_0\n-       174: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       177: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       174: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       177: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        180: aload_0\n-       181: getfield      #27                 // Field twoDwordBuf:[B\n+       181: getfield      #87                 // Field twoDwordBuf:[B\n        184: bipush        8\n-       186: invokestatic  #222                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([BI)J\n-       189: invokevirtual #129                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+       186: invokestatic  #687                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([BI)J\n+       189: invokevirtual #431                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n        192: return\n       LineNumberTable:\n         line 838: 0\n         line 839: 8\n         line 840: 20\n         line 842: 30\n         line 843: 38\n@@ -3503,31 +3503,31 @@\n \n   private boolean supportsDataDescriptorFor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: invokevirtual #105                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-         4: invokevirtual #68                 // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesDataDescriptor:()Z\n+         1: invokevirtual #356                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+         4: invokevirtual #227                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesDataDescriptor:()Z\n          7: ifeq          46\n         10: aload_0\n-        11: getfield      #20                 // Field allowStoredEntriesWithDataDescriptor:Z\n+        11: getfield      #67                 // Field allowStoredEntriesWithDataDescriptor:Z\n         14: ifeq          24\n         17: aload_1\n-        18: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        18: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n         21: ifeq          46\n         24: aload_1\n-        25: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        25: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n         28: bipush        8\n         30: if_icmpeq     46\n         33: aload_1\n-        34: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        37: getstatic     #113                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        40: invokevirtual #146                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        34: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        37: getstatic     #375                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        40: invokevirtual #475                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n         43: if_icmpne     50\n         46: iconst_1\n         47: goto          51\n         50: iconst_0\n         51: ireturn\n       LineNumberTable:\n         line 878: 0\n@@ -3548,36 +3548,36 @@\n \n   private boolean supportsCompressedSizeFor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_1\n-         1: invokevirtual #90                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-         4: ldc2_w        #92                 // long -1l\n+         1: invokevirtual #313                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+         4: ldc2_w        #318                // long -1l\n          7: lcmp\n          8: ifne          57\n         11: aload_1\n-        12: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        12: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n         15: bipush        8\n         17: if_icmpeq     57\n         20: aload_1\n-        21: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        24: getstatic     #113                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        27: invokevirtual #146                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        21: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        24: getstatic     #375                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        27: invokevirtual #475                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n         30: if_icmpeq     57\n         33: aload_1\n-        34: invokevirtual #105                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-        37: invokevirtual #68                 // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesDataDescriptor:()Z\n+        34: invokevirtual #356                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+        37: invokevirtual #227                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesDataDescriptor:()Z\n         40: ifeq          61\n         43: aload_0\n-        44: getfield      #20                 // Field allowStoredEntriesWithDataDescriptor:Z\n+        44: getfield      #67                 // Field allowStoredEntriesWithDataDescriptor:Z\n         47: ifeq          61\n         50: aload_1\n-        51: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        51: invokevirtual #304                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n         54: ifne          61\n         57: iconst_1\n         58: goto          62\n         61: iconst_0\n         62: ireturn\n       LineNumberTable:\n         line 890: 0\n@@ -3597,167 +3597,167 @@\n           stack = [ int ]\n \n   private void readStoredEntry() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=6, args_size=1\n-         0: new           #224                // class java/io/ByteArrayOutputStream\n+         0: new           #691                // class java/io/ByteArrayOutputStream\n          3: dup\n-         4: invokespecial #225                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+         4: invokespecial #693                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n          7: astore_1\n          8: iconst_0\n          9: istore_2\n         10: iconst_0\n         11: istore_3\n         12: aload_0\n-        13: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        16: invokestatic  #226                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+        13: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        16: invokestatic  #694                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n         19: ifeq          27\n         22: bipush        20\n         24: goto          29\n         27: bipush        12\n         29: istore        4\n         31: iload_3\n-        32: ifne          117\n+        32: ifne          118\n         35: aload_0\n-        36: getfield      #36                 // Field in:Ljava/io/InputStream;\n+        36: getfield      #118                // Field in:Ljava/io/InputStream;\n         39: aload_0\n-        40: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        43: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n+        40: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        43: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n         46: iload_2\n         47: sipush        512\n         50: iload_2\n         51: isub\n-        52: invokevirtual #150                // Method java/io/InputStream.read:([BII)I\n+        52: invokevirtual #488                // Method java/io/InputStream.read:([BII)I\n         55: istore        5\n         57: iload         5\n-        59: ifgt          72\n-        62: new           #134                // class java/io/IOException\n+        59: ifgt          73\n+        62: new           #444                // class java/io/IOException\n         65: dup\n-        66: ldc           #168                // String Truncated ZIP file\n-        68: invokespecial #136                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        71: athrow\n-        72: iload         5\n-        74: iload_2\n-        75: iadd\n-        76: iconst_4\n-        77: if_icmpge     88\n-        80: iload_2\n-        81: iload         5\n-        83: iadd\n-        84: istore_2\n-        85: goto          31\n-        88: aload_0\n-        89: aload_1\n-        90: iload_2\n-        91: iload         5\n-        93: iload         4\n-        95: invokespecial #227                // Method bufferContainsSignature:(Ljava/io/ByteArrayOutputStream;III)Z\n-        98: istore_3\n-        99: iload_3\n-       100: ifne          114\n-       103: aload_0\n-       104: aload_1\n-       105: iload_2\n-       106: iload         5\n-       108: iload         4\n-       110: invokespecial #228                // Method cacheBytesRead:(Ljava/io/ByteArrayOutputStream;III)I\n-       113: istore_2\n-       114: goto          31\n-       117: aload_0\n-       118: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       121: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       124: invokevirtual #90                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-       127: aload_0\n-       128: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       131: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       134: invokevirtual #162                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-       137: lcmp\n-       138: ifeq          151\n-       141: new           #52                 // class java/util/zip/ZipException\n-       144: dup\n-       145: ldc           #229                // String compressed and uncompressed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n-       147: invokespecial #58                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       150: athrow\n-       151: aload_1\n-       152: invokevirtual #230                // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n-       155: astore        5\n-       157: aload         5\n-       159: arraylength\n-       160: i2l\n-       161: aload_0\n-       162: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       165: invokestatic  #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       168: invokevirtual #162                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-       171: lcmp\n-       172: ifeq          185\n-       175: new           #52                 // class java/util/zip/ZipException\n-       178: dup\n-       179: ldc           #231                // String actual and claimed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n-       181: invokespecial #58                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       184: athrow\n-       185: aload_0\n-       186: new           #232                // class java/io/ByteArrayInputStream\n-       189: dup\n-       190: aload         5\n-       192: invokespecial #233                // Method java/io/ByteArrayInputStream.\"<init>\":([B)V\n-       195: putfield      #19                 // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n-       198: return\n+        66: ldc_w         #541                // String Truncated ZIP file\n+        69: invokespecial #448                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        72: athrow\n+        73: iload         5\n+        75: iload_2\n+        76: iadd\n+        77: iconst_4\n+        78: if_icmpge     89\n+        81: iload_2\n+        82: iload         5\n+        84: iadd\n+        85: istore_2\n+        86: goto          31\n+        89: aload_0\n+        90: aload_1\n+        91: iload_2\n+        92: iload         5\n+        94: iload         4\n+        96: invokespecial #697                // Method bufferContainsSignature:(Ljava/io/ByteArrayOutputStream;III)Z\n+        99: istore_3\n+       100: iload_3\n+       101: ifne          115\n+       104: aload_0\n+       105: aload_1\n+       106: iload_2\n+       107: iload         5\n+       109: iload         4\n+       111: invokespecial #701                // Method cacheBytesRead:(Ljava/io/ByteArrayOutputStream;III)I\n+       114: istore_2\n+       115: goto          31\n+       118: aload_0\n+       119: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       122: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       125: invokevirtual #313                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+       128: aload_0\n+       129: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       132: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       135: invokevirtual #525                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+       138: lcmp\n+       139: ifeq          153\n+       142: new           #169                // class java/util/zip/ZipException\n+       145: dup\n+       146: ldc_w         #705                // String compressed and uncompressed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n+       149: invokespecial #190                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       152: athrow\n+       153: aload_1\n+       154: invokevirtual #707                // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n+       157: astore        5\n+       159: aload         5\n+       161: arraylength\n+       162: i2l\n+       163: aload_0\n+       164: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       167: invokestatic  #203                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       170: invokevirtual #525                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+       173: lcmp\n+       174: ifeq          188\n+       177: new           #169                // class java/util/zip/ZipException\n+       180: dup\n+       181: ldc_w         #710                // String actual and claimed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n+       184: invokespecial #190                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       187: athrow\n+       188: aload_0\n+       189: new           #523                // class java/io/ByteArrayInputStream\n+       192: dup\n+       193: aload         5\n+       195: invokespecial #712                // Method java/io/ByteArrayInputStream.\"<init>\":([B)V\n+       198: putfield      #63                 // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n+       201: return\n       LineNumberTable:\n         line 922: 0\n         line 923: 8\n         line 924: 10\n         line 927: 12\n         line 929: 31\n         line 930: 35\n         line 931: 57\n         line 934: 62\n-        line 936: 72\n-        line 938: 80\n-        line 939: 85\n-        line 942: 88\n-        line 943: 99\n-        line 944: 103\n-        line 946: 114\n-        line 947: 117\n-        line 948: 141\n-        line 951: 151\n-        line 952: 157\n-        line 953: 175\n-        line 956: 185\n-        line 957: 198\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-           57      57     5     r   I\n-            0     199     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n-            8     191     1   bos   Ljava/io/ByteArrayOutputStream;\n-           10     189     2   off   I\n-           12     187     3  done   Z\n-           31     168     4 ddLen   I\n-          157      42     5     b   [B\n+        line 936: 73\n+        line 938: 81\n+        line 939: 86\n+        line 942: 89\n+        line 943: 100\n+        line 944: 104\n+        line 946: 115\n+        line 947: 118\n+        line 948: 142\n+        line 951: 153\n+        line 952: 159\n+        line 953: 177\n+        line 956: 188\n+        line 957: 201\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+           57      58     5     r   I\n+            0     202     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n+            8     194     1   bos   Ljava/io/ByteArrayOutputStream;\n+           10     192     2   off   I\n+           12     190     3  done   Z\n+           31     171     4 ddLen   I\n+          159      43     5     b   [B\n       StackMapTable: number_of_entries = 9\n         frame_type = 254 /* append */\n           offset_delta = 27\n           locals = [ class java/io/ByteArrayOutputStream, int, int ]\n         frame_type = 65 /* same_locals_1_stack_item */\n           stack = [ int ]\n         frame_type = 252 /* append */\n           offset_delta = 1\n           locals = [ int ]\n         frame_type = 252 /* append */\n-          offset_delta = 40\n+          offset_delta = 41\n           locals = [ int ]\n         frame_type = 15 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 25\n         frame_type = 2 /* same */\n-        frame_type = 33 /* same */\n+        frame_type = 34 /* same */\n         frame_type = 252 /* append */\n-          offset_delta = 33\n+          offset_delta = 34\n           locals = [ class \"[B\" ]\n     Exceptions:\n       throws java.io.IOException\n \n   private boolean bufferContainsSignature(java.io.ByteArrayOutputStream, int, int, int) throws java.io.IOException;\n     descriptor: (Ljava/io/ByteArrayOutputStream;III)Z\n     flags: (0x0002) ACC_PRIVATE\n@@ -3773,133 +3773,133 @@\n         13: iload_2\n         14: iload_3\n         15: iadd\n         16: iconst_4\n         17: isub\n         18: if_icmpge     252\n         21: aload_0\n-        22: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        25: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n+        22: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        25: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n         28: iload         6\n         30: baload\n-        31: getstatic     #234                // Field LFH:[B\n+        31: getstatic     #713                // Field LFH:[B\n         34: iconst_0\n         35: baload\n         36: if_icmpne     246\n         39: aload_0\n-        40: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        43: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n+        40: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        43: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n         46: iload         6\n         48: iconst_1\n         49: iadd\n         50: baload\n-        51: getstatic     #234                // Field LFH:[B\n+        51: getstatic     #713                // Field LFH:[B\n         54: iconst_1\n         55: baload\n         56: if_icmpne     246\n         59: iload         6\n         61: istore        7\n         63: iload         6\n         65: iload         4\n         67: if_icmplt     110\n         70: aload_0\n-        71: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        74: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n+        71: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        74: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n         77: iload         6\n         79: iconst_2\n         80: iadd\n         81: baload\n-        82: getstatic     #234                // Field LFH:[B\n+        82: getstatic     #713                // Field LFH:[B\n         85: iconst_2\n         86: baload\n         87: if_icmpne     110\n         90: aload_0\n-        91: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        94: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n+        91: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        94: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n         97: iload         6\n         99: iconst_3\n        100: iadd\n        101: baload\n-       102: getstatic     #234                // Field LFH:[B\n+       102: getstatic     #713                // Field LFH:[B\n        105: iconst_3\n        106: baload\n        107: if_icmpeq     148\n        110: aload_0\n-       111: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       114: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n+       111: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       114: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n        117: iload         6\n        119: baload\n-       120: getstatic     #235                // Field CFH:[B\n+       120: getstatic     #716                // Field CFH:[B\n        123: iconst_2\n        124: baload\n        125: if_icmpne     161\n        128: aload_0\n-       129: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       132: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n+       129: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       132: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n        135: iload         6\n        137: iconst_3\n        138: iadd\n        139: baload\n-       140: getstatic     #235                // Field CFH:[B\n+       140: getstatic     #716                // Field CFH:[B\n        143: iconst_3\n        144: baload\n        145: if_icmpne     161\n        148: iload         6\n        150: iload         4\n        152: isub\n        153: istore        7\n        155: iconst_1\n        156: istore        5\n        158: goto          204\n        161: aload_0\n-       162: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       165: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n+       162: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       165: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n        168: iload         6\n        170: iconst_2\n        171: iadd\n        172: baload\n-       173: getstatic     #236                // Field DD:[B\n+       173: getstatic     #719                // Field DD:[B\n        176: iconst_2\n        177: baload\n        178: if_icmpne     204\n        181: aload_0\n-       182: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       185: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n+       182: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       185: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n        188: iload         6\n        190: iconst_3\n        191: iadd\n        192: baload\n-       193: getstatic     #236                // Field DD:[B\n+       193: getstatic     #719                // Field DD:[B\n        196: iconst_3\n        197: baload\n        198: if_icmpne     204\n        201: iconst_1\n        202: istore        5\n        204: iload         5\n        206: ifeq          246\n        209: aload_0\n        210: aload_0\n-       211: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       214: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n+       211: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       214: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n        217: iload         7\n        219: iload_2\n        220: iload_3\n        221: iadd\n        222: iload         7\n        224: isub\n-       225: invokespecial #201                // Method pushback:([BII)V\n+       225: invokespecial #631                // Method pushback:([BII)V\n        228: aload_1\n        229: aload_0\n-       230: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       233: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n+       230: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       233: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n        236: iconst_0\n        237: iload         7\n-       239: invokevirtual #237                // Method java/io/ByteArrayOutputStream.write:([BII)V\n+       239: invokevirtual #722                // Method java/io/ByteArrayOutputStream.write:([BII)V\n        242: aload_0\n-       243: invokespecial #203                // Method readDataDescriptor:()V\n+       243: invokespecial #637                // Method readDataDescriptor:()V\n        246: iinc          6, 1\n        249: goto          6\n        252: iload         5\n        254: ireturn\n       LineNumberTable:\n         line 974: 0\n         line 975: 3\n@@ -3958,31 +3958,31 @@\n          6: iconst_3\n          7: isub\n          8: istore        5\n         10: iload         5\n         12: ifle          61\n         15: aload_1\n         16: aload_0\n-        17: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        20: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n+        17: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        20: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n         23: iconst_0\n         24: iload         5\n-        26: invokevirtual #237                // Method java/io/ByteArrayOutputStream.write:([BII)V\n+        26: invokevirtual #722                // Method java/io/ByteArrayOutputStream.write:([BII)V\n         29: aload_0\n-        30: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        33: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n+        30: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        33: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n         36: iload         5\n         38: aload_0\n-        39: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        42: invokevirtual #166                // Method java/nio/ByteBuffer.array:()[B\n+        39: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        42: invokevirtual #534                // Method java/nio/ByteBuffer.array:()[B\n         45: iconst_0\n         46: iload         4\n         48: iconst_3\n         49: iadd\n-        50: invokestatic  #119                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        50: invokestatic  #395                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         53: iload         4\n         55: iconst_3\n         56: iadd\n         57: istore_2\n         58: goto          65\n         61: iload_2\n         62: iload_3\n@@ -4014,24 +4014,24 @@\n \n   private void pushback(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n-         1: getfield      #36                 // Field in:Ljava/io/InputStream;\n-         4: checkcast     #33                 // class java/io/PushbackInputStream\n+         1: getfield      #118                // Field in:Ljava/io/InputStream;\n+         4: checkcast     #109                // class java/io/PushbackInputStream\n          7: aload_1\n          8: iload_2\n          9: iload_3\n-        10: invokevirtual #238                // Method java/io/PushbackInputStream.unread:([BII)V\n+        10: invokevirtual #725                // Method java/io/PushbackInputStream.unread:([BII)V\n         13: aload_0\n         14: iload_3\n         15: i2l\n-        16: invokevirtual #239                // Method pushedBackBytes:(J)V\n+        16: invokevirtual #728                // Method pushedBackBytes:(J)V\n         19: return\n       LineNumberTable:\n         line 1025: 0\n         line 1026: 13\n         line 1027: 19\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -4045,36 +4045,36 @@\n   private void skipRemainderOfArchive() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=1, args_size=1\n          0: aload_0\n          1: aload_0\n-         2: getfield      #28                 // Field entriesRead:I\n+         2: getfield      #90                 // Field entriesRead:I\n          5: i2l\n-         6: ldc2_w        #240                // long 46l\n+         6: ldc2_w        #731                // long 46l\n          9: lmul\n-        10: ldc2_w        #242                // long 30l\n+        10: ldc2_w        #733                // long 30l\n         13: lsub\n-        14: invokespecial #244                // Method realSkip:(J)V\n+        14: invokespecial #735                // Method realSkip:(J)V\n         17: aload_0\n-        18: invokespecial #245                // Method findEocdRecord:()V\n+        18: invokespecial #738                // Method findEocdRecord:()V\n         21: aload_0\n-        22: ldc2_w        #246                // long 16l\n-        25: invokespecial #244                // Method realSkip:(J)V\n+        22: ldc2_w        #741                // long 16l\n+        25: invokespecial #735                // Method realSkip:(J)V\n         28: aload_0\n         29: aload_0\n-        30: getfield      #25                 // Field shortBuf:[B\n-        33: invokespecial #42                 // Method readFully:([B)V\n+        30: getfield      #81                 // Field shortBuf:[B\n+        33: invokespecial #139                // Method readFully:([B)V\n         36: aload_0\n         37: aload_0\n-        38: getfield      #25                 // Field shortBuf:[B\n-        41: invokestatic  #248                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+        38: getfield      #81                 // Field shortBuf:[B\n+        41: invokestatic  #743                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n         44: i2l\n-        45: invokespecial #244                // Method realSkip:(J)V\n+        45: invokespecial #735                // Method realSkip:(J)V\n         48: return\n       LineNumberTable:\n         line 1054: 0\n         line 1055: 17\n         line 1056: 21\n         line 1057: 28\n         line 1059: 36\n@@ -4093,75 +4093,75 @@\n          0: iconst_m1\n          1: istore_1\n          2: iconst_0\n          3: istore_2\n          4: iload_2\n          5: ifne          18\n          8: aload_0\n-         9: invokespecial #249                // Method readOneByte:()I\n+         9: invokespecial #745                // Method readOneByte:()I\n         12: dup\n         13: istore_1\n         14: iconst_m1\n         15: if_icmple     124\n         18: iconst_0\n         19: istore_2\n         20: aload_0\n         21: iload_1\n-        22: invokespecial #250                // Method isFirstByteOfEocdSig:(I)Z\n+        22: invokespecial #748                // Method isFirstByteOfEocdSig:(I)Z\n         25: ifne          31\n         28: goto          4\n         31: aload_0\n-        32: invokespecial #249                // Method readOneByte:()I\n+        32: invokespecial #745                // Method readOneByte:()I\n         35: istore_1\n         36: iload_1\n-        37: getstatic     #191                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+        37: getstatic     #609                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n         40: iconst_1\n         41: baload\n         42: if_icmpeq     62\n         45: iload_1\n         46: iconst_m1\n         47: if_icmpne     53\n         50: goto          124\n         53: aload_0\n         54: iload_1\n-        55: invokespecial #250                // Method isFirstByteOfEocdSig:(I)Z\n+        55: invokespecial #748                // Method isFirstByteOfEocdSig:(I)Z\n         58: istore_2\n         59: goto          4\n         62: aload_0\n-        63: invokespecial #249                // Method readOneByte:()I\n+        63: invokespecial #745                // Method readOneByte:()I\n         66: istore_1\n         67: iload_1\n-        68: getstatic     #191                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+        68: getstatic     #609                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n         71: iconst_2\n         72: baload\n         73: if_icmpeq     93\n         76: iload_1\n         77: iconst_m1\n         78: if_icmpne     84\n         81: goto          124\n         84: aload_0\n         85: iload_1\n-        86: invokespecial #250                // Method isFirstByteOfEocdSig:(I)Z\n+        86: invokespecial #748                // Method isFirstByteOfEocdSig:(I)Z\n         89: istore_2\n         90: goto          4\n         93: aload_0\n-        94: invokespecial #249                // Method readOneByte:()I\n+        94: invokespecial #745                // Method readOneByte:()I\n         97: istore_1\n         98: iload_1\n         99: iconst_m1\n        100: if_icmpeq     124\n        103: iload_1\n-       104: getstatic     #191                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+       104: getstatic     #609                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n        107: iconst_3\n        108: baload\n        109: if_icmpne     115\n        112: goto          124\n        115: aload_0\n        116: iload_1\n-       117: invokespecial #250                // Method isFirstByteOfEocdSig:(I)Z\n+       117: invokespecial #748                // Method isFirstByteOfEocdSig:(I)Z\n        120: istore_2\n        121: goto          4\n        124: return\n       LineNumberTable:\n         line 1067: 0\n         line 1068: 2\n         line 1069: 4\n@@ -4221,51 +4221,51 @@\n         10: lcmp\n         11: ifge          79\n         14: lload_1\n         15: lload_3\n         16: lsub\n         17: lstore        5\n         19: aload_0\n-        20: getfield      #36                 // Field in:Ljava/io/InputStream;\n+        20: getfield      #118                // Field in:Ljava/io/InputStream;\n         23: aload_0\n-        24: getfield      #24                 // Field skipBuf:[B\n+        24: getfield      #78                 // Field skipBuf:[B\n         27: iconst_0\n         28: aload_0\n-        29: getfield      #24                 // Field skipBuf:[B\n+        29: getfield      #78                 // Field skipBuf:[B\n         32: arraylength\n         33: i2l\n         34: lload         5\n         36: lcmp\n         37: ifle          45\n         40: lload         5\n         42: goto          51\n         45: aload_0\n-        46: getfield      #24                 // Field skipBuf:[B\n+        46: getfield      #78                 // Field skipBuf:[B\n         49: arraylength\n         50: i2l\n         51: l2i\n-        52: invokevirtual #150                // Method java/io/InputStream.read:([BII)I\n+        52: invokevirtual #488                // Method java/io/InputStream.read:([BII)I\n         55: istore        7\n         57: iload         7\n         59: iconst_m1\n         60: if_icmpne     64\n         63: return\n         64: aload_0\n         65: iload         7\n-        67: invokevirtual #2                  // Method count:(I)V\n+        67: invokevirtual #3                  // Method count:(I)V\n         70: lload_3\n         71: iload         7\n         73: i2l\n         74: ladd\n         75: lstore_3\n         76: goto          8\n         79: return\n-        80: new           #187                // class java/lang/IllegalArgumentException\n+        80: new           #600                // class java/lang/IllegalArgumentException\n         83: dup\n-        84: invokespecial #188                // Method java/lang/IllegalArgumentException.\"<init>\":()V\n+        84: invokespecial #602                // Method java/lang/IllegalArgumentException.\"<init>\":()V\n         87: athrow\n       LineNumberTable:\n         line 1107: 0\n         line 1108: 6\n         line 1109: 8\n         line 1110: 14\n         line 1111: 19\n@@ -4307,23 +4307,23 @@\n \n   private int readOneByte() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #36                 // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #251                // Method java/io/InputStream.read:()I\n+         1: getfield      #118                // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #752                // Method java/io/InputStream.read:()I\n          7: istore_1\n          8: iload_1\n          9: iconst_m1\n         10: if_icmpeq     18\n         13: aload_0\n         14: iconst_1\n-        15: invokevirtual #2                  // Method count:(I)V\n+        15: invokevirtual #3                  // Method count:(I)V\n         18: iload_1\n         19: ireturn\n       LineNumberTable:\n         line 1130: 0\n         line 1131: 8\n         line 1132: 13\n         line 1134: 18\n@@ -4340,15 +4340,15 @@\n \n   private boolean isFirstByteOfEocdSig(int);\n     descriptor: (I)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=2, args_size=2\n          0: iload_1\n-         1: getstatic     #191                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+         1: getstatic     #609                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n          4: iconst_0\n          5: baload\n          6: if_icmpne     13\n          9: iconst_1\n         10: goto          14\n         13: iconst_0\n         14: ireturn\n@@ -4365,96 +4365,96 @@\n \n   private boolean isApkSigningBlock(byte[]) throws java.io.IOException;\n     descriptor: ([B)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=7, args_size=2\n          0: aload_1\n-         1: invokestatic  #252                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:([B)Ljava/math/BigInteger;\n+         1: invokestatic  #754                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:([B)Ljava/math/BigInteger;\n          4: astore_2\n          5: aload_2\n          6: bipush        8\n          8: aload_1\n          9: arraylength\n         10: isub\n         11: i2l\n-        12: getstatic     #253                // Field APK_SIGNING_BLOCK_MAGIC:[B\n+        12: getstatic     #757                // Field APK_SIGNING_BLOCK_MAGIC:[B\n         15: arraylength\n         16: i2l\n         17: lsub\n-        18: invokestatic  #254                // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-        21: invokevirtual #255                // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+        18: invokestatic  #760                // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+        21: invokevirtual #765                // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n         24: astore_3\n-        25: getstatic     #253                // Field APK_SIGNING_BLOCK_MAGIC:[B\n+        25: getstatic     #757                // Field APK_SIGNING_BLOCK_MAGIC:[B\n         28: arraylength\n         29: newarray       byte\n         31: astore        4\n         33: aload_3\n-        34: invokevirtual #256                // Method java/math/BigInteger.signum:()I\n+        34: invokevirtual #769                // Method java/math/BigInteger.signum:()I\n         37: ifge          103\n         40: aload_1\n         41: arraylength\n         42: aload_3\n-        43: invokevirtual #257                // Method java/math/BigInteger.intValue:()I\n+        43: invokevirtual #772                // Method java/math/BigInteger.intValue:()I\n         46: iadd\n         47: istore        5\n         49: iload         5\n         51: bipush        8\n         53: if_icmpge     58\n         56: iconst_0\n         57: ireturn\n         58: aload_3\n-        59: invokevirtual #257                // Method java/math/BigInteger.intValue:()I\n-        62: invokestatic  #258                // Method java/lang/Math.abs:(I)I\n+        59: invokevirtual #772                // Method java/math/BigInteger.intValue:()I\n+        62: invokestatic  #775                // Method java/lang/Math.abs:(I)I\n         65: istore        6\n         67: aload_1\n         68: iload         5\n         70: aload         4\n         72: iconst_0\n         73: iload         6\n         75: aload         4\n         77: arraylength\n-        78: invokestatic  #171                // Method java/lang/Math.min:(II)I\n-        81: invokestatic  #119                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        78: invokestatic  #550                // Method java/lang/Math.min:(II)I\n+        81: invokestatic  #395                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         84: iload         6\n         86: aload         4\n         88: arraylength\n         89: if_icmpge     100\n         92: aload_0\n         93: aload         4\n         95: iload         6\n-        97: invokespecial #217                // Method readFully:([BI)V\n+        97: invokespecial #674                // Method readFully:([BI)V\n        100: goto          148\n        103: aload_3\n-       104: getstatic     #259                // Field LONG_MAX:Ljava/math/BigInteger;\n-       107: invokevirtual #260                // Method java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I\n+       104: getstatic     #779                // Field LONG_MAX:Ljava/math/BigInteger;\n+       107: invokevirtual #783                // Method java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I\n        110: ifle          134\n        113: aload_0\n-       114: ldc2_w        #197                // long 9223372036854775807l\n-       117: invokespecial #244                // Method realSkip:(J)V\n+       114: ldc2_w        #623                // long 9223372036854775807l\n+       117: invokespecial #735                // Method realSkip:(J)V\n        120: aload_3\n-       121: getstatic     #259                // Field LONG_MAX:Ljava/math/BigInteger;\n-       124: invokevirtual #261                // Method java/math/BigInteger.negate:()Ljava/math/BigInteger;\n-       127: invokevirtual #255                // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+       121: getstatic     #779                // Field LONG_MAX:Ljava/math/BigInteger;\n+       124: invokevirtual #787                // Method java/math/BigInteger.negate:()Ljava/math/BigInteger;\n+       127: invokevirtual #765                // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n        130: astore_3\n        131: goto          103\n        134: aload_0\n        135: aload_3\n-       136: invokevirtual #262                // Method java/math/BigInteger.longValue:()J\n-       139: invokespecial #244                // Method realSkip:(J)V\n+       136: invokevirtual #791                // Method java/math/BigInteger.longValue:()J\n+       139: invokespecial #735                // Method realSkip:(J)V\n        142: aload_0\n        143: aload         4\n-       145: invokespecial #42                 // Method readFully:([B)V\n+       145: invokespecial #139                // Method readFully:([B)V\n        148: goto          155\n        151: astore        5\n        153: iconst_0\n        154: ireturn\n        155: aload         4\n-       157: getstatic     #253                // Field APK_SIGNING_BLOCK_MAGIC:[B\n-       160: invokestatic  #263                // Method java/util/Arrays.equals:([B[B)Z\n+       157: getstatic     #757                // Field APK_SIGNING_BLOCK_MAGIC:[B\n+       160: invokestatic  #794                // Method java/util/Arrays.equals:([B[B)Z\n        163: ireturn\n       Exception table:\n          from    to  target type\n             33    57   151   Class java/io/EOFException\n             58   148   151   Class java/io/EOFException\n       LineNumberTable:\n         line 1162: 0\n@@ -4507,67 +4507,67 @@\n   static void access$800(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream, int);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;I)V\n     flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: invokevirtual #2                  // Method count:(I)V\n+         2: invokevirtual #3                  // Method count:(I)V\n          5: return\n       LineNumberTable:\n         line 81: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0    x0   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n             0       6     1    x1   I\n \n   static org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry access$900(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n     flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+         1: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n          4: areturn\n       LineNumberTable:\n         line 81: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0    x0   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n \n   static void access$1000(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream, int);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;I)V\n     flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: invokevirtual #2                  // Method count:(I)V\n+         2: invokevirtual #3                  // Method count:(I)V\n          5: return\n       LineNumberTable:\n         line 81: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0    x0   Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;\n             0       6     1    x1   I\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=0, args_size=0\n-         0: getstatic     #46                 // Field org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-         3: invokevirtual #193                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-         6: putstatic     #234                // Field LFH:[B\n-         9: getstatic     #48                 // Field org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        12: invokevirtual #193                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-        15: putstatic     #235                // Field CFH:[B\n-        18: getstatic     #114                // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        21: invokevirtual #193                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-        24: putstatic     #236                // Field DD:[B\n+         0: getstatic     #148                // Field org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+         3: invokevirtual #614                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+         6: putstatic     #713                // Field LFH:[B\n+         9: getstatic     #156                // Field org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        12: invokevirtual #614                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+        15: putstatic     #716                // Field CFH:[B\n+        18: getstatic     #378                // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        21: invokevirtual #614                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+        24: putstatic     #719                // Field DD:[B\n         27: bipush        16\n         29: newarray       byte\n         31: dup\n         32: iconst_0\n         33: bipush        65\n         35: bastore\n         36: dup\n@@ -4626,31 +4626,31 @@\n        110: bipush        14\n        112: bipush        52\n        114: bastore\n        115: dup\n        116: bipush        15\n        118: bipush        50\n        120: bastore\n-       121: putstatic     #253                // Field APK_SIGNING_BLOCK_MAGIC:[B\n-       124: ldc2_w        #197                // long 9223372036854775807l\n-       127: invokestatic  #254                // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-       130: putstatic     #259                // Field LONG_MAX:Ljava/math/BigInteger;\n+       121: putstatic     #757                // Field APK_SIGNING_BLOCK_MAGIC:[B\n+       124: ldc2_w        #623                // long 9223372036854775807l\n+       127: invokestatic  #760                // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+       130: putstatic     #779                // Field LONG_MAX:Ljava/math/BigInteger;\n        133: return\n       LineNumberTable:\n         line 959: 0\n         line 960: 9\n         line 961: 18\n         line 1141: 27\n         line 1144: 124\n }\n SourceFile: \"ZipArchiveInputStream.java\"\n-InnerClasses:\n-  static #266;                            // class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1\n-  private #268= #97 of #22;               // BoundedInputStream=class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream of class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n-  private static final #269= #59 of #22;  // CurrentEntry=class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry of class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n-  public static final #784= #554 of #131; // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  public static #816= #587 of #115;       // Feature=class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature of class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  public static final #918= #917 of #920; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #678 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  0: #905 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #679 Truncated ZIP entry: \\u0001\n+      #911 Truncated ZIP entry: \\u0001\n+InnerClasses:\n+  private static final #914= #193 of #4;  // CurrentEntry=class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry of class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+  static #337;                            // class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1\n+  public static final #915= #275 of #210; // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  private #916= #331 of #4;               // BoundedInputStream=class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream of class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+  public static #917= #384 of #381;       // Feature=class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature of class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  public static final #922= #918 of #920; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
