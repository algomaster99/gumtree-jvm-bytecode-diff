{"diffoscope-json-version": 1, "source1": "first/BandSet.class", "source2": "second/BandSet.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,14 +2,15 @@\n package org.apache.commons.compress.harmony.pack200;\n \n import java.io.IOException;\n import java.io.OutputStream;\n import java.util.Map;\n import java.util.HashMap;\n import java.util.Arrays;\n+import java.util.Objects;\n import java.util.stream.IntStream;\n import java.util.List;\n import java.util.Iterator;\n import java.util.ArrayList;\n \n public abstract class BandSet\n {\n@@ -162,15 +163,18 @@\n                     final byte[] encode = bhsdCodec.encode(new int[] { n2 });\n                     final byte[] array3 = new byte[encode.length + array2.length];\n                     System.arraycopy(encode, 0, array3, 0, encode.length);\n                     System.arraycopy(array2, 0, array3, encode.length, array2.length);\n                     return array3;\n                 }\n                 if (access$200 instanceof PopulationCodec) {\n-                    IntStream.of(BandSet.BandAnalysisResults.access$300(analyseBand)).forEach(this.segmentHeader::appendBandCodingSpecifier);\n+                    final IntStream of = IntStream.of(BandSet.BandAnalysisResults.access$300(analyseBand));\n+                    final SegmentHeader segmentHeader = this.segmentHeader;\n+                    Objects.requireNonNull(segmentHeader);\n+                    of.forEach(segmentHeader::appendBandCodingSpecifier);\n                     return array2;\n                 }\n                 if (access$200 instanceof RunCodec) {}\n             }\n         }\n         if (array.length > 0) {\n             if (array2 == null) {\n@@ -228,15 +232,15 @@\n     }\n     \n     public byte[] encodeScalar(final int[] array, final BHSDCodec bhsdCodec) throws Pack200Exception {\n         return bhsdCodec.encode(array);\n     }\n     \n     private void encodeWithPopulationCodec(final String s, final int[] array, final BHSDCodec bhsdCodec, final BandSet.BandData bandData, final BandSet.BandAnalysisResults bandAnalysisResults) throws Pack200Exception {\n-        BandSet.BandAnalysisResults.access$402(bandAnalysisResults, BandSet.BandAnalysisResults.access$400(bandAnalysisResults) + 3);\n+        BandSet.BandAnalysisResults.access$412(bandAnalysisResults, 3);\n         final Map access$500 = BandSet.BandData.access$500(bandData);\n         final ArrayList list = new ArrayList();\n         access$500.forEach((n7, n8) -> {\n             if (n8 > 2 || map.size() < 256) {\n                 list4.add(n7);\n             }\n             return;\n@@ -344,35 +348,44 @@\n         final byte[] access$502 = BandSet.BandAnalysisResults.access$000(analyseBand);\n         final byte[] access$503 = BandSet.BandAnalysisResults.access$000(analyseBand2);\n         final Codec access$504 = BandSet.BandAnalysisResults.access$200(analyseBand);\n         final Codec access$505 = BandSet.BandAnalysisResults.access$200(analyseBand2);\n         final int n4 = 141 + ((access$504 == null) ? 1 : 0) + 4 * n2 + ((access$505 == null) ? 2 : 0);\n         final IntList list3 = new IntList(3);\n         if (access$504 != null) {\n-            IntStream.of(CodecEncoding.getSpecifier(access$504, (Codec)null)).forEach(list3::add);\n+            final IntStream of = IntStream.of(CodecEncoding.getSpecifier(access$504, (Codec)null));\n+            final IntList obj = list3;\n+            Objects.requireNonNull(obj);\n+            of.forEach(obj::add);\n         }\n         if (n2 == 0) {\n-            IntStream.of(CodecEncoding.getSpecifier((Codec)access$501, (Codec)null)).forEach(list3::add);\n+            final IntStream of2 = IntStream.of(CodecEncoding.getSpecifier((Codec)access$501, (Codec)null));\n+            final IntList obj2 = list3;\n+            Objects.requireNonNull(obj2);\n+            of2.forEach(obj2::add);\n         }\n         if (access$505 != null) {\n-            IntStream.of(CodecEncoding.getSpecifier(access$505, (Codec)null)).forEach(list3::add);\n+            final IntStream of3 = IntStream.of(CodecEncoding.getSpecifier(access$505, (Codec)null));\n+            final IntList obj3 = list3;\n+            Objects.requireNonNull(obj3);\n+            of3.forEach(obj3::add);\n         }\n         final int[] array5 = list3.toArray();\n         final byte[] encode = Codec.UNSIGNED5.encode(array5);\n         int n5;\n         if (bhsdCodec.isSigned()) {\n             n5 = -1 - n4;\n         }\n         else {\n             n5 = n4 + bhsdCodec.getL();\n         }\n         final byte[] encode2 = bhsdCodec.encode(new int[] { n5 });\n         final int n6 = encode2.length + access$502.length + array4.length + access$503.length;\n         if (n6 + encode.length < BandSet.BandAnalysisResults.access$000(bandAnalysisResults).length) {\n-            BandSet.BandAnalysisResults.access$602(bandAnalysisResults, BandSet.BandAnalysisResults.access$600(bandAnalysisResults) + (BandSet.BandAnalysisResults.access$000(bandAnalysisResults).length - (n6 + encode.length)));\n+            BandSet.BandAnalysisResults.access$612(bandAnalysisResults, BandSet.BandAnalysisResults.access$000(bandAnalysisResults).length - (n6 + encode.length));\n             final byte[] array6 = new byte[n6];\n             System.arraycopy(encode2, 0, array6, 0, encode2.length);\n             System.arraycopy(access$502, 0, array6, encode2.length, access$502.length);\n             System.arraycopy(array4, 0, array6, encode2.length + access$502.length, array4.length);\n             System.arraycopy(access$503, 0, array6, encode2.length + access$502.length + array4.length, access$503.length);\n             BandSet.BandAnalysisResults.access$002(bandAnalysisResults, array6);\n             BandSet.BandAnalysisResults.access$302(bandAnalysisResults, array5);\n"}]}
