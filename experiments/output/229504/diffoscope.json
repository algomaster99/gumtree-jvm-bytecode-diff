{"diffoscope-json-version": 1, "source1": "first/SkipShieldingInputStreamTest.class", "source2": "second/SkipShieldingInputStreamTest.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,26 +6,26 @@\n import org.junit.Assert;\n import java.io.InputStream;\n \n public class SkipShieldingInputStreamTest\n {\n     @Test\n     public void skipDelegatesToRead() throws IOException {\n-        try (final InputStream i = (InputStream)new SkipShieldingInputStream((InputStream)new SkipShieldingInputStreamTest.SkipShieldingInputStreamTest$1(this))) {\n-            Assert.assertEquals(100L, i.skip(100L));\n+        try (final SkipShieldingInputStream skipShieldingInputStream = new SkipShieldingInputStream((InputStream)new SkipShieldingInputStreamTest.SkipShieldingInputStreamTest$1(this))) {\n+            Assert.assertEquals(100L, ((InputStream)skipShieldingInputStream).skip(100L));\n         }\n     }\n     \n     @Test\n     public void skipHasAnUpperBoundOnRead() throws IOException {\n-        try (final InputStream i = (InputStream)new SkipShieldingInputStream((InputStream)new SkipShieldingInputStreamTest.SkipShieldingInputStreamTest$2(this))) {\n-            Assert.assertTrue(2147483647L > i.skip(Long.MAX_VALUE));\n+        try (final SkipShieldingInputStream skipShieldingInputStream = new SkipShieldingInputStream((InputStream)new SkipShieldingInputStreamTest.SkipShieldingInputStreamTest$2(this))) {\n+            Assert.assertTrue(2147483647L > ((InputStream)skipShieldingInputStream).skip(Long.MAX_VALUE));\n         }\n     }\n     \n     @Test\n     public void skipSwallowsNegativeArguments() throws IOException {\n-        try (final InputStream i = (InputStream)new SkipShieldingInputStream((InputStream)new SkipShieldingInputStreamTest.SkipShieldingInputStreamTest$3(this))) {\n-            Assert.assertEquals(0L, i.skip(Long.MIN_VALUE));\n+        try (final SkipShieldingInputStream skipShieldingInputStream = new SkipShieldingInputStream((InputStream)new SkipShieldingInputStreamTest.SkipShieldingInputStreamTest$3(this))) {\n+            Assert.assertEquals(0L, ((InputStream)skipShieldingInputStream).skip(Long.MIN_VALUE));\n         }\n     }\n }\n"}]}
