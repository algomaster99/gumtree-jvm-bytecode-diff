{"diffoscope-json-version": 1, "source1": "first/CommonUtil.class", "source2": "second/CommonUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,27 +29,37 @@\n     public static final int[] EMPTY_INT_ARRAY;\n     public static final byte[] EMPTY_BYTE_ARRAY;\n     public static final double[] EMPTY_DOUBLE_ARRAY;\n     public static final String CLASSPATH_URL_PROTOCOL = \"classpath:\";\n     private static final String UNABLE_TO_FIND_EXCEPTION_PREFIX = \"Unable to find: \";\n     private static final String EXTENSION_SEPARATOR = \".\";\n     \n+    static {\n+        EMPTY_BIT_SET = new BitSet();\n+        EMPTY_STRING_ARRAY = new String[0];\n+        EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];\n+        EMPTY_OBJECT_ARRAY = new Object[0];\n+        EMPTY_INT_ARRAY = new int[0];\n+        EMPTY_BYTE_ARRAY = new byte[0];\n+        EMPTY_DOUBLE_ARRAY = new double[0];\n+    }\n+    \n     private CommonUtil() {\n     }\n     \n     public static Pattern createPattern(final String pattern) {\n         return createPattern(pattern, 0);\n     }\n     \n     public static Pattern createPattern(final String pattern, final int flags) {\n         try {\n             return Pattern.compile(pattern, flags);\n         }\n         catch (final PatternSyntaxException ex) {\n-            throw new IllegalArgumentException(\"Failed to initialise regular expression \" + pattern, (Throwable)ex);\n+            throw new IllegalArgumentException(\"Failed to initialise regular expression \" + pattern, ex);\n         }\n     }\n     \n     public static boolean matchesFileExtension(final File file, final String... fileExtensions) {\n         boolean result = false;\n         if (fileExtensions == null || fileExtensions.length == 0) {\n             result = true;\n@@ -62,15 +72,17 @@\n                     withDotExtensions[i] = extension;\n                 }\n                 else {\n                     withDotExtensions[i] = \".\" + extension;\n                 }\n             }\n             final String fileName = file.getName();\n-            for (final String fileExtension : withDotExtensions) {\n+            String[] array;\n+            for (int length = (array = withDotExtensions).length, j = 0; j < length; ++j) {\n+                final String fileExtension = array[j];\n                 if (fileName.endsWith(fileExtension)) {\n                     result = true;\n                     break;\n                 }\n             }\n         }\n         return result;\n@@ -278,17 +290,18 @@\n             }\n         }\n         return isIdentifier;\n     }\n     \n     public static boolean isName(final String str) {\n         boolean isName = false;\n-        final String[] split;\n-        final String[] identifiers = split = str.split(\"\\\\.\", -1);\n-        for (final String identifier : split) {\n+        final String[] identifiers = str.split(\"\\\\.\", -1);\n+        String[] array;\n+        for (int length = (array = identifiers).length, i = 0; i < length; ++i) {\n+            final String identifier = array[i];\n             isName = isIdentifier(identifier);\n             if (!isName) {\n                 break;\n             }\n         }\n         return isName;\n     }\n@@ -310,18 +323,8 @@\n         return left;\n     }\n     \n     public static boolean isCodePointWhitespace(final int[] codePoints, final int index) {\n         final char character = Character.toChars(codePoints[index])[0];\n         return Character.isWhitespace(character);\n     }\n-    \n-    static {\n-        EMPTY_BIT_SET = new BitSet();\n-        EMPTY_STRING_ARRAY = new String[0];\n-        EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];\n-        EMPTY_OBJECT_ARRAY = new Object[0];\n-        EMPTY_INT_ARRAY = new int[0];\n-        EMPTY_BYTE_ARRAY = new byte[0];\n-        EMPTY_DOUBLE_ARRAY = new double[0];\n-    }\n }\n"}]}
