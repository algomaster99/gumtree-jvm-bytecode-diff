{"diffoscope-json-version": 1, "source1": "first/DaitchMokotoffSoundex$Rule.class", "source2": "second/DaitchMokotoffSoundex$Rule.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,43 +6,42 @@\n private static final class Rule\n {\n     private final String pattern;\n     private final String[] replacementAtStart;\n     private final String[] replacementBeforeVowel;\n     private final String[] replacementDefault;\n     \n-    protected Rule(final String pattern, final String replacementAtStart, final String replacementBeforeVowel, final String replacementDefault) {\n+    protected Rule(final String pattern, final String s, final String s2, final String s3) {\n         this.pattern = pattern;\n-        this.replacementAtStart = replacementAtStart.split(\"\\\\|\");\n-        this.replacementBeforeVowel = replacementBeforeVowel.split(\"\\\\|\");\n-        this.replacementDefault = replacementDefault.split(\"\\\\|\");\n+        this.replacementAtStart = s.split(\"\\\\|\");\n+        this.replacementBeforeVowel = s2.split(\"\\\\|\");\n+        this.replacementDefault = s3.split(\"\\\\|\");\n     }\n     \n     public int getPatternLength() {\n         return this.pattern.length();\n     }\n     \n-    public String[] getReplacements(final String context, final boolean atStart) {\n-        if (atStart) {\n+    public String[] getReplacements(final String s, final boolean b) {\n+        if (b) {\n             return this.replacementAtStart;\n         }\n-        final int nextIndex = this.getPatternLength();\n-        final boolean nextCharIsVowel = nextIndex < context.length() && this.isVowel(context.charAt(nextIndex));\n-        if (nextCharIsVowel) {\n+        final int patternLength = this.getPatternLength();\n+        if (patternLength < s.length() && this.isVowel(s.charAt(patternLength))) {\n             return this.replacementBeforeVowel;\n         }\n         return this.replacementDefault;\n     }\n     \n-    private boolean isVowel(final char ch) {\n-        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';\n+    private boolean isVowel(final char c) {\n+        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n     }\n     \n-    public boolean matches(final String context) {\n-        return context.startsWith(this.pattern);\n+    public boolean matches(final String s) {\n+        return s.startsWith(this.pattern);\n     }\n     \n     @Override\n     public String toString() {\n         return String.format(\"%s=(%s,%s,%s)\", this.pattern, Arrays.asList(this.replacementAtStart), Arrays.asList(this.replacementBeforeVowel), Arrays.asList(this.replacementDefault));\n     }\n }\n"}]}
