{"diffoscope-json-version": 1, "source1": "first/ZCompressorInputStream.class", "source2": "second/ZCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,52 +1,52 @@\n-  SHA-256 checksum 94aeb49ef55db512575f052b5699cb92bbef3616f4ccdadd425ddc1bde232e32\n+  SHA-256 checksum 12da45df5171ff2ee0d1f5070ab567d8e9ab0fa5378ef67c238abbd867cd1d8a\n   Compiled from \"ZCompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.z.ZCompressorInputStream extends org.apache.commons.compress.compressors.lzw.LZWInputStream\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #6                          // org/apache/commons/compress/compressors/z/ZCompressorInputStream\n   super_class: #12                        // org/apache/commons/compress/compressors/lzw/LZWInputStream\n   interfaces: 0, fields: 7, methods: 8, attributes: 1\n Constant pool:\n-    #1 = Fieldref           #93.#94       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-    #2 = Methodref          #12.#95       // org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-    #3 = Fieldref           #6.#96        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.totalCodesRead:J\n-    #4 = Fieldref           #6.#97        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.in:Lorg/apache/commons/compress/utils/BitInputStream;\n-    #5 = Methodref          #98.#99       // org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n-    #6 = Class              #100          // org/apache/commons/compress/compressors/z/ZCompressorInputStream\n-    #7 = Class              #101          // java/io/IOException\n-    #8 = String             #102          // Input is not in .Z format\n-    #9 = Methodref          #7.#103       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #10 = Fieldref           #6.#104       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.blockMode:Z\n-   #11 = Fieldref           #6.#105       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.maxCodeSize:I\n-   #12 = Class              #106          // org/apache/commons/compress/compressors/lzw/LZWInputStream\n-   #13 = Methodref          #6.#107       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.setClearCode:(I)V\n-   #14 = Methodref          #6.#108       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.initializeTables:(II)V\n-   #15 = Methodref          #6.#109       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.clearEntries:()V\n-   #16 = Methodref          #6.#110       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-   #17 = Methodref          #6.#111       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.setTableSize:(I)V\n-   #18 = Methodref          #12.#112      // org/apache/commons/compress/compressors/lzw/LZWInputStream.readNextCode:()I\n+    #1 = Fieldref           #92.#93       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+    #2 = Methodref          #12.#94       // org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+    #3 = Fieldref           #6.#95        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.totalCodesRead:J\n+    #4 = Fieldref           #6.#96        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.in:Lorg/apache/commons/compress/utils/BitInputStream;\n+    #5 = Methodref          #97.#98       // org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n+    #6 = Class              #99           // org/apache/commons/compress/compressors/z/ZCompressorInputStream\n+    #7 = Class              #100          // java/io/IOException\n+    #8 = String             #101          // Input is not in .Z format\n+    #9 = Methodref          #7.#102       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #10 = Fieldref           #6.#103       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.blockMode:Z\n+   #11 = Fieldref           #6.#104       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.maxCodeSize:I\n+   #12 = Class              #105          // org/apache/commons/compress/compressors/lzw/LZWInputStream\n+   #13 = Methodref          #6.#106       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.setClearCode:(I)V\n+   #14 = Methodref          #6.#107       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.initializeTables:(II)V\n+   #15 = Methodref          #6.#108       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.clearEntries:()V\n+   #16 = Methodref          #6.#109       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+   #17 = Methodref          #6.#110       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.setTableSize:(I)V\n+   #18 = Methodref          #12.#111      // org/apache/commons/compress/compressors/lzw/LZWInputStream.readNextCode:()I\n    #19 = Long               8l\n-   #21 = Methodref          #6.#112       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.readNextCode:()I\n-   #22 = Methodref          #98.#113      // org/apache/commons/compress/utils/BitInputStream.clearBitCache:()V\n-   #23 = Methodref          #6.#114       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getCodeSize:()I\n-   #24 = Methodref          #6.#115       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.addEntry:(IBI)I\n-   #25 = Methodref          #6.#116       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getTableSize:()I\n-   #26 = Methodref          #6.#117       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.reAlignReading:()V\n-   #27 = Methodref          #6.#118       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.incrementCodeSize:()V\n-   #28 = Methodref          #6.#119       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getClearCode:()I\n-   #29 = Methodref          #6.#120       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.resetCodeSize:()V\n-   #30 = Methodref          #6.#121       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.resetPreviousCode:()V\n-   #31 = Methodref          #6.#122       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.addRepeatOfPreviousCode:()I\n-   #32 = String             #123          // Invalid %d bit code 0x%x\n-   #33 = Class              #124          // java/lang/Object\n-   #34 = Methodref          #125.#126     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #35 = Methodref          #127.#128     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-   #36 = Methodref          #6.#129       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.expandCodeToOutputStack:(IZ)I\n+   #21 = Methodref          #6.#111       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.readNextCode:()I\n+   #22 = Methodref          #97.#112      // org/apache/commons/compress/utils/BitInputStream.clearBitCache:()V\n+   #23 = Methodref          #6.#113       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getCodeSize:()I\n+   #24 = Methodref          #6.#114       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.addEntry:(IBI)I\n+   #25 = Methodref          #6.#115       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getTableSize:()I\n+   #26 = Methodref          #6.#116       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.reAlignReading:()V\n+   #27 = Methodref          #6.#117       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.incrementCodeSize:()V\n+   #28 = Methodref          #6.#118       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getClearCode:()I\n+   #29 = Methodref          #6.#119       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.resetCodeSize:()V\n+   #30 = Methodref          #6.#120       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.resetPreviousCode:()V\n+   #31 = Methodref          #6.#121       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.addRepeatOfPreviousCode:()I\n+   #32 = String             #122          // Invalid %d bit code 0x%x\n+   #33 = Class              #123          // java/lang/Object\n+   #34 = Methodref          #124.#125     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #35 = Methodref          #126.#127     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+   #36 = Methodref          #6.#128       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.expandCodeToOutputStack:(IZ)I\n    #37 = Utf8               MAGIC_1\n    #38 = Utf8               I\n    #39 = Utf8               ConstantValue\n    #40 = Integer            31\n    #41 = Utf8               MAGIC_2\n    #42 = Integer            157\n    #43 = Utf8               BLOCK_MODE_MASK\n@@ -67,112 +67,111 @@\n    #58 = Utf8               inputStream\n    #59 = Utf8               Ljava/io/InputStream;\n    #60 = Utf8               memoryLimitInKb\n    #61 = Utf8               firstByte\n    #62 = Utf8               secondByte\n    #63 = Utf8               thirdByte\n    #64 = Utf8               StackMapTable\n-   #65 = Class              #100          // org/apache/commons/compress/compressors/z/ZCompressorInputStream\n-   #66 = Class              #130          // java/io/InputStream\n-   #67 = Utf8               Exceptions\n-   #68 = Utf8               (Ljava/io/InputStream;)V\n-   #69 = Utf8               clearEntries\n-   #70 = Utf8               ()V\n-   #71 = Utf8               readNextCode\n-   #72 = Utf8               ()I\n-   #73 = Utf8               code\n-   #74 = Utf8               reAlignReading\n-   #75 = Utf8               i\n-   #76 = Utf8               codeReadsToThrowAway\n-   #77 = Utf8               addEntry\n-   #78 = Utf8               (IB)I\n-   #79 = Utf8               previousCode\n-   #80 = Utf8               character\n-   #81 = Utf8               B\n-   #82 = Utf8               maxTableSize\n-   #83 = Utf8               r\n-   #84 = Utf8               decompressNextSymbol\n-   #85 = Utf8               addedUnfinishedEntry\n-   #86 = Utf8               matches\n-   #87 = Utf8               ([BI)Z\n-   #88 = Utf8               signature\n-   #89 = Utf8               [B\n-   #90 = Utf8               length\n-   #91 = Utf8               SourceFile\n-   #92 = Utf8               ZCompressorInputStream.java\n-   #93 = Class              #131          // java/nio/ByteOrder\n-   #94 = NameAndType        #132:#133     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #95 = NameAndType        #51:#134      // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-   #96 = NameAndType        #49:#50       // totalCodesRead:J\n-   #97 = NameAndType        #135:#136     // in:Lorg/apache/commons/compress/utils/BitInputStream;\n-   #98 = Class              #137          // org/apache/commons/compress/utils/BitInputStream\n-   #99 = NameAndType        #138:#139     // readBits:(I)J\n-  #100 = Utf8               org/apache/commons/compress/compressors/z/ZCompressorInputStream\n-  #101 = Utf8               java/io/IOException\n-  #102 = Utf8               Input is not in .Z format\n-  #103 = NameAndType        #51:#140      // \"<init>\":(Ljava/lang/String;)V\n-  #104 = NameAndType        #46:#47       // blockMode:Z\n-  #105 = NameAndType        #48:#38       // maxCodeSize:I\n-  #106 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n-  #107 = NameAndType        #141:#142     // setClearCode:(I)V\n-  #108 = NameAndType        #143:#144     // initializeTables:(II)V\n-  #109 = NameAndType        #69:#70       // clearEntries:()V\n-  #110 = NameAndType        #51:#52       // \"<init>\":(Ljava/io/InputStream;I)V\n-  #111 = NameAndType        #145:#142     // setTableSize:(I)V\n-  #112 = NameAndType        #71:#72       // readNextCode:()I\n-  #113 = NameAndType        #146:#70      // clearBitCache:()V\n-  #114 = NameAndType        #147:#72      // getCodeSize:()I\n-  #115 = NameAndType        #77:#148      // addEntry:(IBI)I\n-  #116 = NameAndType        #149:#72      // getTableSize:()I\n-  #117 = NameAndType        #74:#70       // reAlignReading:()V\n-  #118 = NameAndType        #150:#70      // incrementCodeSize:()V\n-  #119 = NameAndType        #151:#72      // getClearCode:()I\n-  #120 = NameAndType        #152:#70      // resetCodeSize:()V\n-  #121 = NameAndType        #153:#70      // resetPreviousCode:()V\n-  #122 = NameAndType        #154:#72      // addRepeatOfPreviousCode:()I\n-  #123 = Utf8               Invalid %d bit code 0x%x\n-  #124 = Utf8               java/lang/Object\n-  #125 = Class              #155          // java/lang/Integer\n-  #126 = NameAndType        #156:#157     // valueOf:(I)Ljava/lang/Integer;\n-  #127 = Class              #158          // java/lang/String\n-  #128 = NameAndType        #159:#160     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #129 = NameAndType        #161:#162     // expandCodeToOutputStack:(IZ)I\n-  #130 = Utf8               java/io/InputStream\n-  #131 = Utf8               java/nio/ByteOrder\n-  #132 = Utf8               LITTLE_ENDIAN\n-  #133 = Utf8               Ljava/nio/ByteOrder;\n-  #134 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-  #135 = Utf8               in\n-  #136 = Utf8               Lorg/apache/commons/compress/utils/BitInputStream;\n-  #137 = Utf8               org/apache/commons/compress/utils/BitInputStream\n-  #138 = Utf8               readBits\n-  #139 = Utf8               (I)J\n-  #140 = Utf8               (Ljava/lang/String;)V\n-  #141 = Utf8               setClearCode\n-  #142 = Utf8               (I)V\n-  #143 = Utf8               initializeTables\n-  #144 = Utf8               (II)V\n-  #145 = Utf8               setTableSize\n-  #146 = Utf8               clearBitCache\n-  #147 = Utf8               getCodeSize\n-  #148 = Utf8               (IBI)I\n-  #149 = Utf8               getTableSize\n-  #150 = Utf8               incrementCodeSize\n-  #151 = Utf8               getClearCode\n-  #152 = Utf8               resetCodeSize\n-  #153 = Utf8               resetPreviousCode\n-  #154 = Utf8               addRepeatOfPreviousCode\n-  #155 = Utf8               java/lang/Integer\n-  #156 = Utf8               valueOf\n-  #157 = Utf8               (I)Ljava/lang/Integer;\n-  #158 = Utf8               java/lang/String\n-  #159 = Utf8               format\n-  #160 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #161 = Utf8               expandCodeToOutputStack\n-  #162 = Utf8               (IZ)I\n+   #65 = Class              #129          // java/io/InputStream\n+   #66 = Utf8               Exceptions\n+   #67 = Utf8               (Ljava/io/InputStream;)V\n+   #68 = Utf8               clearEntries\n+   #69 = Utf8               ()V\n+   #70 = Utf8               readNextCode\n+   #71 = Utf8               ()I\n+   #72 = Utf8               code\n+   #73 = Utf8               reAlignReading\n+   #74 = Utf8               i\n+   #75 = Utf8               codeReadsToThrowAway\n+   #76 = Utf8               addEntry\n+   #77 = Utf8               (IB)I\n+   #78 = Utf8               previousCode\n+   #79 = Utf8               character\n+   #80 = Utf8               B\n+   #81 = Utf8               maxTableSize\n+   #82 = Utf8               r\n+   #83 = Utf8               decompressNextSymbol\n+   #84 = Utf8               addedUnfinishedEntry\n+   #85 = Utf8               matches\n+   #86 = Utf8               ([BI)Z\n+   #87 = Utf8               signature\n+   #88 = Utf8               [B\n+   #89 = Utf8               length\n+   #90 = Utf8               SourceFile\n+   #91 = Utf8               ZCompressorInputStream.java\n+   #92 = Class              #130          // java/nio/ByteOrder\n+   #93 = NameAndType        #131:#132     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #94 = NameAndType        #51:#133      // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #95 = NameAndType        #49:#50       // totalCodesRead:J\n+   #96 = NameAndType        #134:#135     // in:Lorg/apache/commons/compress/utils/BitInputStream;\n+   #97 = Class              #136          // org/apache/commons/compress/utils/BitInputStream\n+   #98 = NameAndType        #137:#138     // readBits:(I)J\n+   #99 = Utf8               org/apache/commons/compress/compressors/z/ZCompressorInputStream\n+  #100 = Utf8               java/io/IOException\n+  #101 = Utf8               Input is not in .Z format\n+  #102 = NameAndType        #51:#139      // \"<init>\":(Ljava/lang/String;)V\n+  #103 = NameAndType        #46:#47       // blockMode:Z\n+  #104 = NameAndType        #48:#38       // maxCodeSize:I\n+  #105 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n+  #106 = NameAndType        #140:#141     // setClearCode:(I)V\n+  #107 = NameAndType        #142:#143     // initializeTables:(II)V\n+  #108 = NameAndType        #68:#69       // clearEntries:()V\n+  #109 = NameAndType        #51:#52       // \"<init>\":(Ljava/io/InputStream;I)V\n+  #110 = NameAndType        #144:#141     // setTableSize:(I)V\n+  #111 = NameAndType        #70:#71       // readNextCode:()I\n+  #112 = NameAndType        #145:#69      // clearBitCache:()V\n+  #113 = NameAndType        #146:#71      // getCodeSize:()I\n+  #114 = NameAndType        #76:#147      // addEntry:(IBI)I\n+  #115 = NameAndType        #148:#71      // getTableSize:()I\n+  #116 = NameAndType        #73:#69       // reAlignReading:()V\n+  #117 = NameAndType        #149:#69      // incrementCodeSize:()V\n+  #118 = NameAndType        #150:#71      // getClearCode:()I\n+  #119 = NameAndType        #151:#69      // resetCodeSize:()V\n+  #120 = NameAndType        #152:#69      // resetPreviousCode:()V\n+  #121 = NameAndType        #153:#71      // addRepeatOfPreviousCode:()I\n+  #122 = Utf8               Invalid %d bit code 0x%x\n+  #123 = Utf8               java/lang/Object\n+  #124 = Class              #154          // java/lang/Integer\n+  #125 = NameAndType        #155:#156     // valueOf:(I)Ljava/lang/Integer;\n+  #126 = Class              #157          // java/lang/String\n+  #127 = NameAndType        #158:#159     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #128 = NameAndType        #160:#161     // expandCodeToOutputStack:(IZ)I\n+  #129 = Utf8               java/io/InputStream\n+  #130 = Utf8               java/nio/ByteOrder\n+  #131 = Utf8               LITTLE_ENDIAN\n+  #132 = Utf8               Ljava/nio/ByteOrder;\n+  #133 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+  #134 = Utf8               in\n+  #135 = Utf8               Lorg/apache/commons/compress/utils/BitInputStream;\n+  #136 = Utf8               org/apache/commons/compress/utils/BitInputStream\n+  #137 = Utf8               readBits\n+  #138 = Utf8               (I)J\n+  #139 = Utf8               (Ljava/lang/String;)V\n+  #140 = Utf8               setClearCode\n+  #141 = Utf8               (I)V\n+  #142 = Utf8               initializeTables\n+  #143 = Utf8               (II)V\n+  #144 = Utf8               setTableSize\n+  #145 = Utf8               clearBitCache\n+  #146 = Utf8               getCodeSize\n+  #147 = Utf8               (IBI)I\n+  #148 = Utf8               getTableSize\n+  #149 = Utf8               incrementCodeSize\n+  #150 = Utf8               getClearCode\n+  #151 = Utf8               resetCodeSize\n+  #152 = Utf8               resetPreviousCode\n+  #153 = Utf8               addRepeatOfPreviousCode\n+  #154 = Utf8               java/lang/Integer\n+  #155 = Utf8               valueOf\n+  #156 = Utf8               (I)Ljava/lang/Integer;\n+  #157 = Utf8               java/lang/String\n+  #158 = Utf8               format\n+  #159 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #160 = Utf8               expandCodeToOutputStack\n+  #161 = Utf8               (IZ)I\n {\n   private static final int MAGIC_1 = 31;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 31\n \n   private static final int MAGIC_2 = 157;\n"}]}
