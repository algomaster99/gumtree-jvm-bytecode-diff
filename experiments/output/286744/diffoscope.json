{"diffoscope-json-version": 1, "source1": "first/GzipCompressorOutputStream.class", "source2": "second/GzipCompressorOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,71 +1,71 @@\n-  SHA-256 checksum 90b05f78b221ea349734cdc00e72509998ea750571ed78046250e04c916be02b\n+  SHA-256 checksum 4777955325e7ba76e8dbaf46d4e71096cd3bc7e64430b840c553dd887cfece4c\n   Compiled from \"GzipCompressorOutputStream.java\"\n public class org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream extends org.apache.commons.compress.compressors.CompressorOutputStream\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #23                         // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n   super_class: #55                        // org/apache/commons/compress/compressors/CompressorOutputStream\n   interfaces: 0, fields: 7, methods: 11, attributes: 1\n Constant pool:\n-    #1 = Class              #98           // org/apache/commons/compress/compressors/gzip/GzipParameters\n-    #2 = Methodref          #1.#99        // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n-    #3 = Methodref          #23.#100      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-    #4 = Methodref          #55.#99       // org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n-    #5 = Fieldref           #23.#101      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflateBuffer:[B\n-    #6 = Class              #102          // java/util/zip/CRC32\n-    #7 = Methodref          #6.#99        // java/util/zip/CRC32.\"<init>\":()V\n-    #8 = Fieldref           #23.#103      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.crc:Ljava/util/zip/CRC32;\n-    #9 = Fieldref           #23.#104      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.out:Ljava/io/OutputStream;\n-   #10 = Class              #105          // java/util/zip/Deflater\n-   #11 = Methodref          #1.#106       // org/apache/commons/compress/compressors/gzip/GzipParameters.getCompressionLevel:()I\n-   #12 = Methodref          #10.#107      // java/util/zip/Deflater.\"<init>\":(IZ)V\n-   #13 = Fieldref           #23.#108      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflater:Ljava/util/zip/Deflater;\n-   #14 = Methodref          #23.#109      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-   #15 = Methodref          #1.#110       // org/apache/commons/compress/compressors/gzip/GzipParameters.getFilename:()Ljava/lang/String;\n-   #16 = Methodref          #1.#111       // org/apache/commons/compress/compressors/gzip/GzipParameters.getComment:()Ljava/lang/String;\n-   #17 = Methodref          #112.#113     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #18 = Fieldref           #114.#115     // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #19 = Methodref          #112.#116     // java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-   #20 = Class              #117          // java/util/zip/GZIPInputStream\n-   #21 = Methodref          #112.#118     // java/nio/ByteBuffer.putShort:(S)Ljava/nio/ByteBuffer;\n-   #22 = Methodref          #112.#119     // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n-   #23 = Class              #120          // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n-   #24 = Methodref          #1.#121       // org/apache/commons/compress/compressors/gzip/GzipParameters.getModificationTime:()J\n+    #1 = Class              #96           // org/apache/commons/compress/compressors/gzip/GzipParameters\n+    #2 = Methodref          #1.#97        // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n+    #3 = Methodref          #23.#98       // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+    #4 = Methodref          #55.#97       // org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n+    #5 = Fieldref           #23.#99       // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflateBuffer:[B\n+    #6 = Class              #100          // java/util/zip/CRC32\n+    #7 = Methodref          #6.#97        // java/util/zip/CRC32.\"<init>\":()V\n+    #8 = Fieldref           #23.#101      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.crc:Ljava/util/zip/CRC32;\n+    #9 = Fieldref           #23.#102      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.out:Ljava/io/OutputStream;\n+   #10 = Class              #103          // java/util/zip/Deflater\n+   #11 = Methodref          #1.#104       // org/apache/commons/compress/compressors/gzip/GzipParameters.getCompressionLevel:()I\n+   #12 = Methodref          #10.#105      // java/util/zip/Deflater.\"<init>\":(IZ)V\n+   #13 = Fieldref           #23.#106      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflater:Ljava/util/zip/Deflater;\n+   #14 = Methodref          #23.#107      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+   #15 = Methodref          #1.#108       // org/apache/commons/compress/compressors/gzip/GzipParameters.getFilename:()Ljava/lang/String;\n+   #16 = Methodref          #1.#109       // org/apache/commons/compress/compressors/gzip/GzipParameters.getComment:()Ljava/lang/String;\n+   #17 = Methodref          #82.#110      // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #18 = Fieldref           #111.#112     // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #19 = Methodref          #82.#113      // java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+   #20 = Class              #114          // java/util/zip/GZIPInputStream\n+   #21 = Methodref          #82.#115      // java/nio/ByteBuffer.putShort:(S)Ljava/nio/ByteBuffer;\n+   #22 = Methodref          #82.#116      // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+   #23 = Class              #117          // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n+   #24 = Methodref          #1.#118       // org/apache/commons/compress/compressors/gzip/GzipParameters.getModificationTime:()J\n    #25 = Long               1000l\n-   #27 = Methodref          #112.#122     // java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n-   #28 = Methodref          #1.#123       // org/apache/commons/compress/compressors/gzip/GzipParameters.getOperatingSystem:()I\n-   #29 = Methodref          #112.#124     // java/nio/ByteBuffer.array:()[B\n-   #30 = Methodref          #125.#126     // java/io/OutputStream.write:([B)V\n-   #31 = Class              #127          // org/apache/commons/compress/utils/CharsetNames\n-   #32 = String             #128          // ISO-8859-1\n-   #33 = Methodref          #129.#130     // java/lang/String.getBytes:(Ljava/lang/String;)[B\n-   #34 = Methodref          #125.#131     // java/io/OutputStream.write:(I)V\n-   #35 = Methodref          #6.#132       // java/util/zip/CRC32.getValue:()J\n-   #36 = Methodref          #10.#133      // java/util/zip/Deflater.getTotalIn:()I\n-   #37 = Methodref          #23.#134      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.write:([BII)V\n-   #38 = Methodref          #10.#135      // java/util/zip/Deflater.finished:()Z\n-   #39 = Class              #136          // java/io/IOException\n-   #40 = String             #137          // Cannot write more data, the end of the compressed data stream has been reached\n-   #41 = Methodref          #39.#138      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #42 = Methodref          #10.#139      // java/util/zip/Deflater.setInput:([BII)V\n-   #43 = Methodref          #10.#140      // java/util/zip/Deflater.needsInput:()Z\n-   #44 = Methodref          #23.#141      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflate:()V\n-   #45 = Methodref          #6.#142       // java/util/zip/CRC32.update:([BII)V\n-   #46 = Methodref          #10.#143      // java/util/zip/Deflater.deflate:([BII)I\n-   #47 = Methodref          #125.#134     // java/io/OutputStream.write:([BII)V\n-   #48 = Methodref          #10.#144      // java/util/zip/Deflater.finish:()V\n-   #49 = Methodref          #23.#145      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.writeTrailer:()V\n-   #50 = Methodref          #125.#146     // java/io/OutputStream.flush:()V\n-   #51 = Fieldref           #23.#147      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.closed:Z\n-   #52 = Methodref          #23.#144      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.finish:()V\n-   #53 = Methodref          #10.#148      // java/util/zip/Deflater.end:()V\n-   #54 = Methodref          #125.#149     // java/io/OutputStream.close:()V\n-   #55 = Class              #150          // org/apache/commons/compress/compressors/CompressorOutputStream\n+   #27 = Methodref          #82.#119      // java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n+   #28 = Methodref          #1.#120       // org/apache/commons/compress/compressors/gzip/GzipParameters.getOperatingSystem:()I\n+   #29 = Methodref          #82.#121      // java/nio/ByteBuffer.array:()[B\n+   #30 = Methodref          #122.#123     // java/io/OutputStream.write:([B)V\n+   #31 = Class              #124          // org/apache/commons/compress/utils/CharsetNames\n+   #32 = String             #125          // ISO-8859-1\n+   #33 = Methodref          #81.#126      // java/lang/String.getBytes:(Ljava/lang/String;)[B\n+   #34 = Methodref          #122.#127     // java/io/OutputStream.write:(I)V\n+   #35 = Methodref          #6.#128       // java/util/zip/CRC32.getValue:()J\n+   #36 = Methodref          #10.#129      // java/util/zip/Deflater.getTotalIn:()I\n+   #37 = Methodref          #23.#130      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.write:([BII)V\n+   #38 = Methodref          #10.#131      // java/util/zip/Deflater.finished:()Z\n+   #39 = Class              #132          // java/io/IOException\n+   #40 = String             #133          // Cannot write more data, the end of the compressed data stream has been reached\n+   #41 = Methodref          #39.#134      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #42 = Methodref          #10.#135      // java/util/zip/Deflater.setInput:([BII)V\n+   #43 = Methodref          #10.#136      // java/util/zip/Deflater.needsInput:()Z\n+   #44 = Methodref          #23.#137      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflate:()V\n+   #45 = Methodref          #6.#138       // java/util/zip/CRC32.update:([BII)V\n+   #46 = Methodref          #10.#139      // java/util/zip/Deflater.deflate:([BII)I\n+   #47 = Methodref          #122.#130     // java/io/OutputStream.write:([BII)V\n+   #48 = Methodref          #10.#140      // java/util/zip/Deflater.finish:()V\n+   #49 = Methodref          #23.#141      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.writeTrailer:()V\n+   #50 = Methodref          #122.#142     // java/io/OutputStream.flush:()V\n+   #51 = Fieldref           #23.#143      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.closed:Z\n+   #52 = Methodref          #23.#140      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.finish:()V\n+   #53 = Methodref          #10.#144      // java/util/zip/Deflater.end:()V\n+   #54 = Methodref          #122.#145     // java/io/OutputStream.close:()V\n+   #55 = Class              #146          // org/apache/commons/compress/compressors/CompressorOutputStream\n    #56 = Utf8               FNAME\n    #57 = Utf8               I\n    #58 = Utf8               ConstantValue\n    #59 = Integer            8\n    #60 = Utf8               FCOMMENT\n    #61 = Integer            16\n    #62 = Utf8               out\n@@ -83,123 +83,119 @@\n    #74 = Utf8               Code\n    #75 = Utf8               LineNumberTable\n    #76 = Utf8               Exceptions\n    #77 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n    #78 = Utf8               writeHeader\n    #79 = Utf8               (Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n    #80 = Utf8               StackMapTable\n-   #81 = Class              #120          // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n-   #82 = Class              #98           // org/apache/commons/compress/compressors/gzip/GzipParameters\n-   #83 = Class              #151          // java/lang/String\n-   #84 = Class              #152          // java/nio/ByteBuffer\n-   #85 = Utf8               writeTrailer\n-   #86 = Utf8               ()V\n-   #87 = Utf8               write\n-   #88 = Utf8               (I)V\n-   #89 = Utf8               ([B)V\n-   #90 = Utf8               ([BII)V\n-   #91 = Utf8               deflate\n-   #92 = Utf8               finish\n-   #93 = Utf8               flush\n-   #94 = Utf8               close\n-   #95 = Class              #153          // java/lang/Throwable\n-   #96 = Utf8               SourceFile\n-   #97 = Utf8               GzipCompressorOutputStream.java\n-   #98 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n-   #99 = NameAndType        #72:#86       // \"<init>\":()V\n-  #100 = NameAndType        #72:#77       // \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-  #101 = NameAndType        #66:#67       // deflateBuffer:[B\n-  #102 = Utf8               java/util/zip/CRC32\n-  #103 = NameAndType        #70:#71       // crc:Ljava/util/zip/CRC32;\n-  #104 = NameAndType        #62:#63       // out:Ljava/io/OutputStream;\n-  #105 = Utf8               java/util/zip/Deflater\n-  #106 = NameAndType        #154:#155     // getCompressionLevel:()I\n-  #107 = NameAndType        #72:#156      // \"<init>\":(IZ)V\n-  #108 = NameAndType        #64:#65       // deflater:Ljava/util/zip/Deflater;\n-  #109 = NameAndType        #78:#79       // writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-  #110 = NameAndType        #157:#158     // getFilename:()Ljava/lang/String;\n-  #111 = NameAndType        #159:#158     // getComment:()Ljava/lang/String;\n-  #112 = Class              #152          // java/nio/ByteBuffer\n-  #113 = NameAndType        #160:#161     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #114 = Class              #162          // java/nio/ByteOrder\n-  #115 = NameAndType        #163:#164     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-  #116 = NameAndType        #165:#166     // order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-  #117 = Utf8               java/util/zip/GZIPInputStream\n-  #118 = NameAndType        #167:#168     // putShort:(S)Ljava/nio/ByteBuffer;\n-  #119 = NameAndType        #169:#170     // put:(B)Ljava/nio/ByteBuffer;\n-  #120 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n-  #121 = NameAndType        #171:#172     // getModificationTime:()J\n-  #122 = NameAndType        #173:#161     // putInt:(I)Ljava/nio/ByteBuffer;\n-  #123 = NameAndType        #174:#155     // getOperatingSystem:()I\n-  #124 = NameAndType        #175:#176     // array:()[B\n-  #125 = Class              #177          // java/io/OutputStream\n-  #126 = NameAndType        #87:#89       // write:([B)V\n-  #127 = Utf8               org/apache/commons/compress/utils/CharsetNames\n-  #128 = Utf8               ISO-8859-1\n-  #129 = Class              #151          // java/lang/String\n-  #130 = NameAndType        #178:#179     // getBytes:(Ljava/lang/String;)[B\n-  #131 = NameAndType        #87:#88       // write:(I)V\n-  #132 = NameAndType        #180:#172     // getValue:()J\n-  #133 = NameAndType        #181:#155     // getTotalIn:()I\n-  #134 = NameAndType        #87:#90       // write:([BII)V\n-  #135 = NameAndType        #182:#183     // finished:()Z\n-  #136 = Utf8               java/io/IOException\n-  #137 = Utf8               Cannot write more data, the end of the compressed data stream has been reached\n-  #138 = NameAndType        #72:#184      // \"<init>\":(Ljava/lang/String;)V\n-  #139 = NameAndType        #185:#90      // setInput:([BII)V\n-  #140 = NameAndType        #186:#183     // needsInput:()Z\n-  #141 = NameAndType        #91:#86       // deflate:()V\n-  #142 = NameAndType        #187:#90      // update:([BII)V\n-  #143 = NameAndType        #91:#188      // deflate:([BII)I\n-  #144 = NameAndType        #92:#86       // finish:()V\n-  #145 = NameAndType        #85:#86       // writeTrailer:()V\n-  #146 = NameAndType        #93:#86       // flush:()V\n-  #147 = NameAndType        #68:#69       // closed:Z\n-  #148 = NameAndType        #189:#86      // end:()V\n-  #149 = NameAndType        #94:#86       // close:()V\n-  #150 = Utf8               org/apache/commons/compress/compressors/CompressorOutputStream\n-  #151 = Utf8               java/lang/String\n-  #152 = Utf8               java/nio/ByteBuffer\n-  #153 = Utf8               java/lang/Throwable\n-  #154 = Utf8               getCompressionLevel\n-  #155 = Utf8               ()I\n-  #156 = Utf8               (IZ)V\n-  #157 = Utf8               getFilename\n-  #158 = Utf8               ()Ljava/lang/String;\n-  #159 = Utf8               getComment\n-  #160 = Utf8               allocate\n-  #161 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #162 = Utf8               java/nio/ByteOrder\n-  #163 = Utf8               LITTLE_ENDIAN\n-  #164 = Utf8               Ljava/nio/ByteOrder;\n-  #165 = Utf8               order\n-  #166 = Utf8               (Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-  #167 = Utf8               putShort\n-  #168 = Utf8               (S)Ljava/nio/ByteBuffer;\n-  #169 = Utf8               put\n-  #170 = Utf8               (B)Ljava/nio/ByteBuffer;\n-  #171 = Utf8               getModificationTime\n-  #172 = Utf8               ()J\n-  #173 = Utf8               putInt\n-  #174 = Utf8               getOperatingSystem\n-  #175 = Utf8               array\n-  #176 = Utf8               ()[B\n-  #177 = Utf8               java/io/OutputStream\n-  #178 = Utf8               getBytes\n-  #179 = Utf8               (Ljava/lang/String;)[B\n-  #180 = Utf8               getValue\n-  #181 = Utf8               getTotalIn\n-  #182 = Utf8               finished\n-  #183 = Utf8               ()Z\n-  #184 = Utf8               (Ljava/lang/String;)V\n-  #185 = Utf8               setInput\n-  #186 = Utf8               needsInput\n-  #187 = Utf8               update\n-  #188 = Utf8               ([BII)I\n-  #189 = Utf8               end\n+   #81 = Class              #147          // java/lang/String\n+   #82 = Class              #148          // java/nio/ByteBuffer\n+   #83 = Utf8               writeTrailer\n+   #84 = Utf8               ()V\n+   #85 = Utf8               write\n+   #86 = Utf8               (I)V\n+   #87 = Utf8               ([B)V\n+   #88 = Utf8               ([BII)V\n+   #89 = Utf8               deflate\n+   #90 = Utf8               finish\n+   #91 = Utf8               flush\n+   #92 = Utf8               close\n+   #93 = Class              #149          // java/lang/Throwable\n+   #94 = Utf8               SourceFile\n+   #95 = Utf8               GzipCompressorOutputStream.java\n+   #96 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n+   #97 = NameAndType        #72:#84       // \"<init>\":()V\n+   #98 = NameAndType        #72:#77       // \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+   #99 = NameAndType        #66:#67       // deflateBuffer:[B\n+  #100 = Utf8               java/util/zip/CRC32\n+  #101 = NameAndType        #70:#71       // crc:Ljava/util/zip/CRC32;\n+  #102 = NameAndType        #62:#63       // out:Ljava/io/OutputStream;\n+  #103 = Utf8               java/util/zip/Deflater\n+  #104 = NameAndType        #150:#151     // getCompressionLevel:()I\n+  #105 = NameAndType        #72:#152      // \"<init>\":(IZ)V\n+  #106 = NameAndType        #64:#65       // deflater:Ljava/util/zip/Deflater;\n+  #107 = NameAndType        #78:#79       // writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+  #108 = NameAndType        #153:#154     // getFilename:()Ljava/lang/String;\n+  #109 = NameAndType        #155:#154     // getComment:()Ljava/lang/String;\n+  #110 = NameAndType        #156:#157     // allocate:(I)Ljava/nio/ByteBuffer;\n+  #111 = Class              #158          // java/nio/ByteOrder\n+  #112 = NameAndType        #159:#160     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+  #113 = NameAndType        #161:#162     // order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+  #114 = Utf8               java/util/zip/GZIPInputStream\n+  #115 = NameAndType        #163:#164     // putShort:(S)Ljava/nio/ByteBuffer;\n+  #116 = NameAndType        #165:#166     // put:(B)Ljava/nio/ByteBuffer;\n+  #117 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n+  #118 = NameAndType        #167:#168     // getModificationTime:()J\n+  #119 = NameAndType        #169:#157     // putInt:(I)Ljava/nio/ByteBuffer;\n+  #120 = NameAndType        #170:#151     // getOperatingSystem:()I\n+  #121 = NameAndType        #171:#172     // array:()[B\n+  #122 = Class              #173          // java/io/OutputStream\n+  #123 = NameAndType        #85:#87       // write:([B)V\n+  #124 = Utf8               org/apache/commons/compress/utils/CharsetNames\n+  #125 = Utf8               ISO-8859-1\n+  #126 = NameAndType        #174:#175     // getBytes:(Ljava/lang/String;)[B\n+  #127 = NameAndType        #85:#86       // write:(I)V\n+  #128 = NameAndType        #176:#168     // getValue:()J\n+  #129 = NameAndType        #177:#151     // getTotalIn:()I\n+  #130 = NameAndType        #85:#88       // write:([BII)V\n+  #131 = NameAndType        #178:#179     // finished:()Z\n+  #132 = Utf8               java/io/IOException\n+  #133 = Utf8               Cannot write more data, the end of the compressed data stream has been reached\n+  #134 = NameAndType        #72:#180      // \"<init>\":(Ljava/lang/String;)V\n+  #135 = NameAndType        #181:#88      // setInput:([BII)V\n+  #136 = NameAndType        #182:#179     // needsInput:()Z\n+  #137 = NameAndType        #89:#84       // deflate:()V\n+  #138 = NameAndType        #183:#88      // update:([BII)V\n+  #139 = NameAndType        #89:#184      // deflate:([BII)I\n+  #140 = NameAndType        #90:#84       // finish:()V\n+  #141 = NameAndType        #83:#84       // writeTrailer:()V\n+  #142 = NameAndType        #91:#84       // flush:()V\n+  #143 = NameAndType        #68:#69       // closed:Z\n+  #144 = NameAndType        #185:#84      // end:()V\n+  #145 = NameAndType        #92:#84       // close:()V\n+  #146 = Utf8               org/apache/commons/compress/compressors/CompressorOutputStream\n+  #147 = Utf8               java/lang/String\n+  #148 = Utf8               java/nio/ByteBuffer\n+  #149 = Utf8               java/lang/Throwable\n+  #150 = Utf8               getCompressionLevel\n+  #151 = Utf8               ()I\n+  #152 = Utf8               (IZ)V\n+  #153 = Utf8               getFilename\n+  #154 = Utf8               ()Ljava/lang/String;\n+  #155 = Utf8               getComment\n+  #156 = Utf8               allocate\n+  #157 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #158 = Utf8               java/nio/ByteOrder\n+  #159 = Utf8               LITTLE_ENDIAN\n+  #160 = Utf8               Ljava/nio/ByteOrder;\n+  #161 = Utf8               order\n+  #162 = Utf8               (Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+  #163 = Utf8               putShort\n+  #164 = Utf8               (S)Ljava/nio/ByteBuffer;\n+  #165 = Utf8               put\n+  #166 = Utf8               (B)Ljava/nio/ByteBuffer;\n+  #167 = Utf8               getModificationTime\n+  #168 = Utf8               ()J\n+  #169 = Utf8               putInt\n+  #170 = Utf8               getOperatingSystem\n+  #171 = Utf8               array\n+  #172 = Utf8               ()[B\n+  #173 = Utf8               java/io/OutputStream\n+  #174 = Utf8               getBytes\n+  #175 = Utf8               (Ljava/lang/String;)[B\n+  #176 = Utf8               getValue\n+  #177 = Utf8               getTotalIn\n+  #178 = Utf8               finished\n+  #179 = Utf8               ()Z\n+  #180 = Utf8               (Ljava/lang/String;)V\n+  #181 = Utf8               setInput\n+  #182 = Utf8               needsInput\n+  #183 = Utf8               update\n+  #184 = Utf8               ([BII)I\n+  #185 = Utf8               end\n {\n   private static final int FNAME = 8;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 8\n \n   private static final int FCOMMENT = 16;\n"}]}
