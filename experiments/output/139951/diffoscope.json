{"diffoscope-json-version": 1, "source1": "first/XpathFilterElement.class", "source2": "second/XpathFilterElement.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,20 +1,19 @@\n \n package com.puppycrawl.tools.checkstyle.filters;\n \n+import java.util.Objects;\n import net.sf.saxon.sxpath.XPathDynamicContext;\n import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n import net.sf.saxon.om.Item;\n import java.util.Iterator;\n-import java.util.stream.Stream;\n import java.util.stream.Collector;\n import java.util.stream.Collectors;\n-import java.util.List;\n-import java.util.Objects;\n import com.puppycrawl.tools.checkstyle.xpath.AbstractNode;\n+import java.util.List;\n import com.puppycrawl.tools.checkstyle.TreeWalkerAuditEvent;\n import net.sf.saxon.trans.XPathException;\n import net.sf.saxon.sxpath.XPathEvaluator;\n import net.sf.saxon.Configuration;\n import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import java.util.function.Function;\n import java.util.Optional;\n@@ -96,18 +95,15 @@\n     private boolean isXpathQueryMatching(final TreeWalkerAuditEvent event) {\n         boolean isMatching;\n         if (this.xpathExpression == null) {\n             isMatching = true;\n         }\n         else {\n             isMatching = false;\n-            final Stream<Object> stream = this.getItems(event).stream();\n-            final Class<AbstractNode> obj = AbstractNode.class;\n-            Objects.requireNonNull(obj);\n-            final List<AbstractNode> nodes = (List<AbstractNode>)stream.map((Function<? super Object, ?>)obj::cast).collect((Collector<? super Object, ?, List<AbstractNode>>)Collectors.toList());\n+            final List<AbstractNode> nodes = (List<AbstractNode>)this.getItems(event).stream().map((Function<? super Object, ?>)AbstractNode.class::cast).collect((Collector<? super Object, ?, List<AbstractNode>>)Collectors.toList());\n             for (final AbstractNode abstractNode : nodes) {\n                 isMatching = (abstractNode.getTokenType() == event.getTokenType() && abstractNode.getLineNumber() == event.getLine() && abstractNode.getColumnNumber() == event.getColumnCharIndex());\n                 if (isMatching) {\n                     break;\n                 }\n             }\n         }\n"}]}
