{"diffoscope-json-version": 1, "source1": "first/Functions.class", "source2": "second/Functions.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,47 +15,47 @@\n import java.util.function.BiConsumer;\n import java.util.concurrent.Callable;\n import java.util.function.Consumer;\n \n public class Functions\n {\n     public static Runnable asRunnable(final Functions.FailableRunnable<?> runnable) {\n-        return () -> run((Functions.FailableRunnable<Throwable>)runnable);\n+        return () -> run((Functions.FailableRunnable<Throwable>)runnable2);\n     }\n     \n     public static <I> Consumer<I> asConsumer(final Functions.FailableConsumer<I, ?> consumer) {\n-        return input -> accept((Functions.FailableConsumer<Object, Throwable>)consumer, input);\n+        return input -> accept((Functions.FailableConsumer<Object, Throwable>)consumer2, input);\n     }\n     \n     public static <O> Callable<O> asCallable(final Functions.FailableCallable<O, ?> callable) {\n-        return (Callable<O>)(() -> call((Functions.FailableCallable<Object, Throwable>)callable));\n+        return (Callable<O>)(() -> call((Functions.FailableCallable<Object, Throwable>)callable2));\n     }\n     \n     public static <I1, I2> BiConsumer<I1, I2> asBiConsumer(final Functions.FailableBiConsumer<I1, I2, ?> consumer) {\n-        return (input1, input2) -> accept((Functions.FailableBiConsumer<Object, Object, Throwable>)consumer, input1, input2);\n+        return (input1, input2) -> accept((Functions.FailableBiConsumer<Object, Object, Throwable>)consumer2, input1, input2);\n     }\n     \n     public static <I, O> Function<I, O> asFunction(final Functions.FailableFunction<I, O, ?> function) {\n-        return (Function<I, O>)(input -> apply((Functions.FailableFunction<Object, Object, Throwable>)function, input));\n+        return (Function<I, O>)(input -> apply((Functions.FailableFunction<Object, Object, Throwable>)function2, input));\n     }\n     \n     public static <I1, I2, O> BiFunction<I1, I2, O> asBiFunction(final Functions.FailableBiFunction<I1, I2, O, ?> function) {\n-        return (BiFunction<I1, I2, O>)((input1, input2) -> apply((Functions.FailableBiFunction<Object, Object, Object, Throwable>)function, input1, input2));\n+        return (BiFunction<I1, I2, O>)((input1, input2) -> apply((Functions.FailableBiFunction<Object, Object, Object, Throwable>)function2, input1, input2));\n     }\n     \n     public static <I> Predicate<I> asPredicate(final Functions.FailablePredicate<I, ?> predicate) {\n-        return input -> test((Functions.FailablePredicate<Object, Throwable>)predicate, input);\n+        return input -> test((Functions.FailablePredicate<Object, Throwable>)predicate2, input);\n     }\n     \n     public static <I1, I2> BiPredicate<I1, I2> asBiPredicate(final Functions.FailableBiPredicate<I1, I2, ?> predicate) {\n-        return (input1, input2) -> test((Functions.FailableBiPredicate<Object, Object, Throwable>)predicate, input1, input2);\n+        return (input1, input2) -> test((Functions.FailableBiPredicate<Object, Object, Throwable>)predicate2, input1, input2);\n     }\n     \n     public static <O> Supplier<O> asSupplier(final Functions.FailableSupplier<O, ?> supplier) {\n-        return (Supplier<O>)(() -> get((Functions.FailableSupplier<Object, Throwable>)supplier));\n+        return (Supplier<O>)(() -> get((Functions.FailableSupplier<Object, Throwable>)supplier2));\n     }\n     \n     public static <T extends Throwable> void run(final Functions.FailableRunnable<T> runnable) {\n         try {\n             runnable.run();\n         }\n         catch (final Throwable t) {\n"}]}
