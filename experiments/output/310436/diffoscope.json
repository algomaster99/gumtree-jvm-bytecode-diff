{"diffoscope-json-version": 1, "source1": "first/TarUtils.class", "source2": "second/TarUtils.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,455 +1,455 @@\n-  SHA-256 checksum fa152bdb60b939f74b4d38d448783458dd3c353d160b70e1bc3935cdd0a3b98d\n+  SHA-256 checksum 14ccfa3f7f7c53e41c584c0c3016ae59d096089900a749cd3108476495359cf2\n   Compiled from \"TarUtils.java\"\n public class org.apache.commons.compress.archivers.tar.TarUtils\n   minor version: 0\n   major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #80                         // org/apache/commons/compress/archivers/tar/TarUtils\n-  super_class: #134                       // java/lang/Object\n+  this_class: #19                         // org/apache/commons/compress/archivers/tar/TarUtils\n+  super_class: #4                         // java/lang/Object\n   interfaces: 0, fields: 3, methods: 29, attributes: 3\n Constant pool:\n-    #1 = Class              #213          // org/apache/commons/compress/archivers/tar/TarConstants\n-    #2 = Methodref          #134.#214     // java/lang/Object.\"<init>\":()V\n-    #3 = Class              #215          // java/lang/IllegalArgumentException\n-    #4 = InvokeDynamic      #0:#219       // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n-    #5 = Methodref          #3.#220       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #6 = Methodref          #80.#221      // org/apache/commons/compress/archivers/tar/TarUtils.exceptionMessage:([BIIIB)Ljava/lang/String;\n-    #7 = Methodref          #80.#222      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctal:([BII)J\n-    #8 = Methodref          #80.#223      // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryLong:([BIIZ)J\n-    #9 = Methodref          #80.#224      // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryBigInteger:([BIIZ)J\n-   #10 = InvokeDynamic      #1:#226       // #1:makeConcatWithConstants:(II)Ljava/lang/String;\n-   #11 = Double             2.0d\n-   #13 = Double             8.0d\n-   #15 = Methodref          #227.#228     // java/lang/Math.pow:(DD)D\n-   #16 = Methodref          #229.#230     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #17 = Class              #231          // java/math/BigInteger\n-   #18 = Methodref          #17.#232      // java/math/BigInteger.\"<init>\":([B)V\n-   #19 = Long               -1l\n-   #21 = Methodref          #17.#233      // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #22 = Methodref          #17.#234      // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #23 = Methodref          #17.#235      // java/math/BigInteger.not:()Ljava/math/BigInteger;\n-   #24 = Methodref          #17.#236      // java/math/BigInteger.bitLength:()I\n-   #25 = Methodref          #17.#237      // java/math/BigInteger.longValue:()J\n-   #26 = Class              #238          // java/lang/String\n-   #27 = Methodref          #26.#239      // java/lang/String.\"<init>\":([BII)V\n-   #28 = String             #240          // \\u0000\n-   #29 = String             #241          // {NUL}\n-   #30 = Methodref          #26.#242      // java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-   #31 = InvokeDynamic      #2:#244       // #2:makeConcatWithConstants:(BILjava/lang/String;I)Ljava/lang/String;\n-   #32 = Fieldref           #80.#245      // org/apache/commons/compress/archivers/tar/TarUtils.DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #33 = Methodref          #80.#246      // org/apache/commons/compress/archivers/tar/TarUtils.parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-   #34 = Class              #247          // java/io/IOException\n-   #35 = Fieldref           #80.#248      // org/apache/commons/compress/archivers/tar/TarUtils.FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #36 = Class              #249          // java/lang/RuntimeException\n-   #37 = Methodref          #36.#250      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #38 = InterfaceMethodref #251.#252     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #39 = String             #253          //\n-   #40 = Methodref          #80.#254      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctalOrBinary:([BII)J\n-   #41 = Class              #255          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-   #42 = Methodref          #41.#256      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-   #43 = Class              #257          // java/util/ArrayList\n-   #44 = Methodref          #43.#214      // java/util/ArrayList.\"<init>\":()V\n-   #45 = Methodref          #80.#258      // org/apache/commons/compress/archivers/tar/TarUtils.parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-   #46 = Methodref          #41.#259      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n-   #47 = String             #260          // Corrupted TAR archive, sparse entry with negative offset\n-   #48 = Methodref          #34.#220      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #49 = Methodref          #41.#261      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-   #50 = String             #262          // Corrupted TAR archive, sparse entry with negative numbytes\n-   #51 = InterfaceMethodref #167.#263     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #52 = String             #264          // Corrupted TAR archive, sparse entry is invalid\n-   #53 = Methodref          #34.#265      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #54 = Methodref          #266.#267     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-   #55 = Methodref          #80.#268      // org/apache/commons/compress/archivers/tar/TarUtils.formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-   #56 = Methodref          #26.#269      // java/lang/String.length:()I\n-   #57 = InterfaceMethodref #251.#270     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-   #58 = Methodref          #173.#271     // java/nio/ByteBuffer.limit:()I\n-   #59 = Methodref          #26.#272      // java/lang/String.substring:(II)Ljava/lang/String;\n-   #60 = Methodref          #173.#273     // java/nio/ByteBuffer.position:()I\n-   #61 = Methodref          #173.#274     // java/nio/ByteBuffer.array:()[B\n-   #62 = Methodref          #173.#275     // java/nio/ByteBuffer.arrayOffset:()I\n-   #63 = Long               7l\n-   #65 = Methodref          #196.#276     // java/lang/Long.toOctalString:(J)Ljava/lang/String;\n-   #66 = InvokeDynamic      #3:#278       // #3:makeConcatWithConstants:(JLjava/lang/String;I)Ljava/lang/String;\n-   #67 = Methodref          #80.#279      // org/apache/commons/compress/archivers/tar/TarUtils.formatUnsignedOctalString:(J[BII)V\n-   #68 = Long               2097151l\n-   #70 = Long               8589934591l\n-   #72 = Methodref          #80.#280      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongOctalBytes:(J[BII)I\n-   #73 = Methodref          #80.#281      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongBinary:(J[BIIZ)V\n-   #74 = Methodref          #80.#282      // org/apache/commons/compress/archivers/tar/TarUtils.formatBigIntegerBinary:(J[BIIZ)V\n-   #75 = Methodref          #227.#283     // java/lang/Math.abs:(J)J\n-   #76 = InvokeDynamic      #4:#285       // #4:makeConcatWithConstants:(JI)Ljava/lang/String;\n-   #77 = Long               255l\n-   #79 = Methodref          #17.#286      // java/math/BigInteger.toByteArray:()[B\n-   #80 = Class              #287          // org/apache/commons/compress/archivers/tar/TarUtils\n-   #81 = Methodref          #80.#288      // org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-   #82 = Class              #289          // java/util/HashMap\n-   #83 = Methodref          #82.#290      // java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n-   #84 = Methodref          #197.#291     // java/io/InputStream.read:()I\n-   #85 = Class              #292          // java/io/ByteArrayOutputStream\n-   #86 = Methodref          #85.#214      // java/io/ByteArrayOutputStream.\"<init>\":()V\n-   #87 = Class              #293          // org/apache/commons/compress/utils/CharsetNames\n-   #88 = String             #294          // UTF-8\n-   #89 = Methodref          #85.#295      // java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n-   #90 = InterfaceMethodref #195.#296     // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #91 = InvokeDynamic      #5:#219       // #5:makeConcatWithConstants:(I)Ljava/lang/String;\n-   #92 = Methodref          #298.#299     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n-   #93 = InvokeDynamic      #6:#226       // #6:makeConcatWithConstants:(II)Ljava/lang/String;\n-   #94 = String             #301          // Failed to read Paxheader.Value should end with a newline\n-   #95 = Fieldref           #302.#303     // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n-   #96 = Methodref          #26.#304      // java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n-   #97 = InterfaceMethodref #195.#305     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #98 = String             #306          // GNU.sparse.offset\n-   #99 = Methodref          #26.#307      // java/lang/String.equals:(Ljava/lang/Object;)Z\n-  #100 = Methodref          #196.#237     // java/lang/Long.longValue:()J\n-  #101 = Methodref          #196.#308     // java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-  #102 = Class              #309          // java/lang/NumberFormatException\n-  #103 = String             #310          // Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n-  #104 = String             #311          // Failed to read Paxheader.GNU.sparse.offset contains negative value\n-  #105 = String             #312          // GNU.sparse.numbytes\n-  #106 = String             #313          // Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-  #107 = Methodref          #196.#314     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n-  #108 = String             #315          // Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n-  #109 = String             #316          // Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n-  #110 = Methodref          #85.#317      // java/io/ByteArrayOutputStream.write:(I)V\n-  #111 = String             #318          // Failed to read Paxheader. Encountered a non-number while reading length\n-  #112 = Methodref          #80.#319      // org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-  #113 = Methodref          #34.#320      // java/io/IOException.getMessage:()Ljava/lang/String;\n-  #114 = Methodref          #36.#265      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #115 = String             #321          // ,\n-  #116 = Methodref          #26.#322      // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n-  #117 = String             #323          // Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n-  #118 = String             #324          // Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n-  #119 = String             #325          // Corrupted TAR archive. Sparse struct offset contains negative value\n-  #120 = String             #326          // Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n-  #121 = String             #327          // Corrupted TAR archive. Sparse struct numbytes contains negative value\n-  #122 = Methodref          #80.#328      // org/apache/commons/compress/archivers/tar/TarUtils.readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-  #123 = String             #329          // Corrupted TAR archive. Negative value in sparse headers block\n-  #124 = String             #330          // Corrupted TAR archive. Sparse header block offset contains negative value\n-  #125 = String             #331          // Corrupted TAR archive. Sparse header block numbytes contains negative value\n-  #126 = Methodref          #298.#332     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-  #127 = String             #333          // Unexpected EOF when reading parse information of 1.X PAX format\n-  #128 = String             #334          // Corrupted TAR archive. Non-numeric value in sparse headers block\n-  #129 = Long               10l\n-  #131 = Methodref          #335.#336     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #132 = Class              #337          // org/apache/commons/compress/archivers/tar/TarUtils$1\n-  #133 = Methodref          #132.#214     // org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n-  #134 = Class              #338          // java/lang/Object\n-  #135 = Utf8               InnerClasses\n-  #136 = Utf8               BYTE_MASK\n-  #137 = Utf8               I\n-  #138 = Utf8               ConstantValue\n-  #139 = Integer            255\n-  #140 = Utf8               DEFAULT_ENCODING\n-  #141 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #142 = Utf8               FALLBACK_ENCODING\n-  #143 = Utf8               <init>\n-  #144 = Utf8               ()V\n-  #145 = Utf8               Code\n-  #146 = Utf8               LineNumberTable\n-  #147 = Utf8               parseOctal\n-  #148 = Utf8               ([BII)J\n-  #149 = Utf8               StackMapTable\n-  #150 = Utf8               parseOctalOrBinary\n-  #151 = Utf8               parseBinaryLong\n-  #152 = Utf8               ([BIIZ)J\n-  #153 = Utf8               parseBinaryBigInteger\n-  #154 = Class              #339          // \"[B\"\n-  #155 = Utf8               parseBoolean\n-  #156 = Utf8               ([BI)Z\n-  #157 = Utf8               exceptionMessage\n-  #158 = Utf8               ([BIIIB)Ljava/lang/String;\n-  #159 = Utf8               parseName\n-  #160 = Utf8               ([BII)Ljava/lang/String;\n-  #161 = Utf8               ([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-  #162 = Utf8               Exceptions\n-  #163 = Utf8               parseSparse\n-  #164 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-  #165 = Utf8               readSparseStructs\n-  #166 = Utf8               ([BII)Ljava/util/List;\n-  #167 = Class              #340          // java/util/List\n-  #168 = Utf8               Signature\n-  #169 = Utf8               ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #170 = Utf8               formatNameBytes\n-  #171 = Utf8               (Ljava/lang/String;[BII)I\n-  #172 = Utf8               (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-  #173 = Class              #341          // java/nio/ByteBuffer\n-  #174 = Utf8               formatUnsignedOctalString\n-  #175 = Utf8               (J[BII)V\n-  #176 = Utf8               formatOctalBytes\n-  #177 = Utf8               (J[BII)I\n-  #178 = Utf8               formatLongOctalBytes\n-  #179 = Utf8               formatLongOctalOrBinaryBytes\n-  #180 = Utf8               formatLongBinary\n-  #181 = Utf8               (J[BIIZ)V\n-  #182 = Utf8               formatBigIntegerBinary\n-  #183 = Utf8               formatCheckSumOctalBytes\n-  #184 = Utf8               computeCheckSum\n-  #185 = Utf8               ([B)J\n-  #186 = Utf8               verifyCheckSum\n-  #187 = Utf8               ([B)Z\n-  #188 = Utf8               parsePaxHeaders\n-  #189 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;)Ljava/util/Map;\n-  #190 = Utf8               Deprecated\n-  #191 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #192 = Utf8               RuntimeVisibleAnnotations\n-  #193 = Utf8               Ljava/lang/Deprecated;\n-  #194 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #195 = Class              #342          // java/util/Map\n-  #196 = Class              #343          // java/lang/Long\n-  #197 = Class              #344          // java/io/InputStream\n-  #198 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #199 = Utf8               parsePAX01SparseHeaders\n-  #200 = Utf8               (Ljava/lang/String;)Ljava/util/List;\n-  #201 = Utf8               (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #202 = Utf8               parseFromPAX01SparseHeaders\n-  #203 = Class              #345          // \"[Ljava/lang/String;\"\n-  #204 = Utf8               parsePAX1XSparseHeaders\n-  #205 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List;\n-  #206 = Class              #346          // \"[J\"\n-  #207 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #208 = Utf8               readLineOfNumberForPax1X\n-  #209 = Utf8               (Ljava/io/InputStream;)[J\n-  #210 = Utf8               <clinit>\n-  #211 = Utf8               SourceFile\n-  #212 = Utf8               TarUtils.java\n-  #213 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n-  #214 = NameAndType        #143:#144     // \"<init>\":()V\n-  #215 = Utf8               java/lang/IllegalArgumentException\n-  #216 = Utf8               BootstrapMethods\n-  #217 = MethodHandle       6:#347        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #218 = String             #348          // Length \\u0001 must be at least 2\n-  #219 = NameAndType        #349:#350     // makeConcatWithConstants:(I)Ljava/lang/String;\n-  #220 = NameAndType        #143:#351     // \"<init>\":(Ljava/lang/String;)V\n-  #221 = NameAndType        #157:#158     // exceptionMessage:([BIIIB)Ljava/lang/String;\n-  #222 = NameAndType        #147:#148     // parseOctal:([BII)J\n-  #223 = NameAndType        #151:#152     // parseBinaryLong:([BIIZ)J\n-  #224 = NameAndType        #153:#152     // parseBinaryBigInteger:([BIIZ)J\n-  #225 = String             #352          // At offset \\u0001, \\u0001 byte binary number exceeds maximum signed long value\n-  #226 = NameAndType        #349:#353     // makeConcatWithConstants:(II)Ljava/lang/String;\n-  #227 = Class              #354          // java/lang/Math\n-  #228 = NameAndType        #355:#356     // pow:(DD)D\n-  #229 = Class              #357          // java/lang/System\n-  #230 = NameAndType        #358:#359     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #231 = Utf8               java/math/BigInteger\n-  #232 = NameAndType        #143:#360     // \"<init>\":([B)V\n-  #233 = NameAndType        #361:#362     // valueOf:(J)Ljava/math/BigInteger;\n-  #234 = NameAndType        #363:#364     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #235 = NameAndType        #365:#366     // not:()Ljava/math/BigInteger;\n-  #236 = NameAndType        #367:#368     // bitLength:()I\n-  #237 = NameAndType        #369:#370     // longValue:()J\n-  #238 = Utf8               java/lang/String\n-  #239 = NameAndType        #143:#371     // \"<init>\":([BII)V\n-  #240 = Utf8               \\u0000\n-  #241 = Utf8               {NUL}\n-  #242 = NameAndType        #372:#373     // replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-  #243 = String             #374          // Invalid byte \\u0001 at offset \\u0001 in \\'\\u0001\\' len=\\u0001\n-  #244 = NameAndType        #349:#375     // makeConcatWithConstants:(BILjava/lang/String;I)Ljava/lang/String;\n-  #245 = NameAndType        #140:#141     // DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #246 = NameAndType        #159:#161     // parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-  #247 = Utf8               java/io/IOException\n-  #248 = NameAndType        #142:#141     // FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #249 = Utf8               java/lang/RuntimeException\n-  #250 = NameAndType        #143:#376     // \"<init>\":(Ljava/lang/Throwable;)V\n-  #251 = Class              #377          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #252 = NameAndType        #378:#379     // decode:([B)Ljava/lang/String;\n-  #253 = Utf8\n-  #254 = NameAndType        #150:#148     // parseOctalOrBinary:([BII)J\n-  #255 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-  #256 = NameAndType        #143:#380     // \"<init>\":(JJ)V\n-  #257 = Utf8               java/util/ArrayList\n-  #258 = NameAndType        #163:#164     // parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-  #259 = NameAndType        #381:#370     // getOffset:()J\n-  #260 = Utf8               Corrupted TAR archive, sparse entry with negative offset\n-  #261 = NameAndType        #382:#370     // getNumbytes:()J\n-  #262 = Utf8               Corrupted TAR archive, sparse entry with negative numbytes\n-  #263 = NameAndType        #363:#383     // add:(Ljava/lang/Object;)Z\n-  #264 = Utf8               Corrupted TAR archive, sparse entry is invalid\n-  #265 = NameAndType        #143:#384     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #266 = Class              #385          // java/util/Collections\n-  #267 = NameAndType        #386:#387     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-  #268 = NameAndType        #170:#172     // formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-  #269 = NameAndType        #388:#368     // length:()I\n-  #270 = NameAndType        #389:#390     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #271 = NameAndType        #391:#368     // limit:()I\n-  #272 = NameAndType        #392:#353     // substring:(II)Ljava/lang/String;\n-  #273 = NameAndType        #393:#368     // position:()I\n-  #274 = NameAndType        #394:#395     // array:()[B\n-  #275 = NameAndType        #396:#368     // arrayOffset:()I\n-  #276 = NameAndType        #397:#398     // toOctalString:(J)Ljava/lang/String;\n-  #277 = String             #399          // \\u0001=\\u0001 will not fit in octal number buffer of length \\u0001\n-  #278 = NameAndType        #349:#400     // makeConcatWithConstants:(JLjava/lang/String;I)Ljava/lang/String;\n-  #279 = NameAndType        #174:#175     // formatUnsignedOctalString:(J[BII)V\n-  #280 = NameAndType        #178:#177     // formatLongOctalBytes:(J[BII)I\n-  #281 = NameAndType        #180:#181     // formatLongBinary:(J[BIIZ)V\n-  #282 = NameAndType        #182:#181     // formatBigIntegerBinary:(J[BIIZ)V\n-  #283 = NameAndType        #401:#402     // abs:(J)J\n-  #284 = String             #403          // Value \\u0001 is too large for \\u0001 byte field.\n-  #285 = NameAndType        #349:#404     // makeConcatWithConstants:(JI)Ljava/lang/String;\n-  #286 = NameAndType        #405:#395     // toByteArray:()[B\n-  #287 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n-  #288 = NameAndType        #188:#194     // parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #289 = Utf8               java/util/HashMap\n-  #290 = NameAndType        #143:#406     // \"<init>\":(Ljava/util/Map;)V\n-  #291 = NameAndType        #407:#368     // read:()I\n-  #292 = Utf8               java/io/ByteArrayOutputStream\n-  #293 = Utf8               org/apache/commons/compress/utils/CharsetNames\n-  #294 = Utf8               UTF-8\n-  #295 = NameAndType        #408:#409     // toString:(Ljava/lang/String;)Ljava/lang/String;\n-  #296 = NameAndType        #410:#411     // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #297 = String             #412          // Paxheader value size \\u0001 exceeds size of header record\n-  #298 = Class              #413          // org/apache/commons/compress/utils/IOUtils\n-  #299 = NameAndType        #414:#415     // readRange:(Ljava/io/InputStream;I)[B\n-  #300 = String             #416          // Failed to read Paxheader. Expected \\u0001 bytes, read \\u0001\n-  #301 = Utf8               Failed to read Paxheader.Value should end with a newline\n-  #302 = Class              #417          // java/nio/charset/StandardCharsets\n-  #303 = NameAndType        #418:#419     // UTF_8:Ljava/nio/charset/Charset;\n-  #304 = NameAndType        #143:#420     // \"<init>\":([BIILjava/nio/charset/Charset;)V\n-  #305 = NameAndType        #421:#422     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #306 = Utf8               GNU.sparse.offset\n-  #307 = NameAndType        #423:#383     // equals:(Ljava/lang/Object;)Z\n-  #308 = NameAndType        #361:#424     // valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-  #309 = Utf8               java/lang/NumberFormatException\n-  #310 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n-  #311 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains negative value\n-  #312 = Utf8               GNU.sparse.numbytes\n-  #313 = Utf8               Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-  #314 = NameAndType        #425:#426     // parseLong:(Ljava/lang/String;)J\n-  #315 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/tar/TarConstants\n+    #2 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n+    #3 = Methodref          #4.#5         // java/lang/Object.\"<init>\":()V\n+    #4 = Class              #6            // java/lang/Object\n+    #5 = NameAndType        #7:#8         // \"<init>\":()V\n+    #6 = Utf8               java/lang/Object\n+    #7 = Utf8               <init>\n+    #8 = Utf8               ()V\n+    #9 = Class              #10           // java/lang/IllegalArgumentException\n+   #10 = Utf8               java/lang/IllegalArgumentException\n+   #11 = InvokeDynamic      #0:#12        // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+   #12 = NameAndType        #13:#14       // makeConcatWithConstants:(I)Ljava/lang/String;\n+   #13 = Utf8               makeConcatWithConstants\n+   #14 = Utf8               (I)Ljava/lang/String;\n+   #15 = Methodref          #9.#16        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #16 = NameAndType        #7:#17        // \"<init>\":(Ljava/lang/String;)V\n+   #17 = Utf8               (Ljava/lang/String;)V\n+   #18 = Methodref          #19.#20       // org/apache/commons/compress/archivers/tar/TarUtils.exceptionMessage:([BIIIB)Ljava/lang/String;\n+   #19 = Class              #21           // org/apache/commons/compress/archivers/tar/TarUtils\n+   #20 = NameAndType        #22:#23       // exceptionMessage:([BIIIB)Ljava/lang/String;\n+   #21 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n+   #22 = Utf8               exceptionMessage\n+   #23 = Utf8               ([BIIIB)Ljava/lang/String;\n+   #24 = Methodref          #19.#25       // org/apache/commons/compress/archivers/tar/TarUtils.parseOctal:([BII)J\n+   #25 = NameAndType        #26:#27       // parseOctal:([BII)J\n+   #26 = Utf8               parseOctal\n+   #27 = Utf8               ([BII)J\n+   #28 = Methodref          #19.#29       // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryLong:([BIIZ)J\n+   #29 = NameAndType        #30:#31       // parseBinaryLong:([BIIZ)J\n+   #30 = Utf8               parseBinaryLong\n+   #31 = Utf8               ([BIIZ)J\n+   #32 = Methodref          #19.#33       // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryBigInteger:([BIIZ)J\n+   #33 = NameAndType        #34:#31       // parseBinaryBigInteger:([BIIZ)J\n+   #34 = Utf8               parseBinaryBigInteger\n+   #35 = InvokeDynamic      #1:#36        // #1:makeConcatWithConstants:(II)Ljava/lang/String;\n+   #36 = NameAndType        #13:#37       // makeConcatWithConstants:(II)Ljava/lang/String;\n+   #37 = Utf8               (II)Ljava/lang/String;\n+   #38 = Double             2.0d\n+   #40 = Double             8.0d\n+   #42 = Methodref          #43.#44       // java/lang/Math.pow:(DD)D\n+   #43 = Class              #45           // java/lang/Math\n+   #44 = NameAndType        #46:#47       // pow:(DD)D\n+   #45 = Utf8               java/lang/Math\n+   #46 = Utf8               pow\n+   #47 = Utf8               (DD)D\n+   #48 = Methodref          #49.#50       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #49 = Class              #51           // java/lang/System\n+   #50 = NameAndType        #52:#53       // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #51 = Utf8               java/lang/System\n+   #52 = Utf8               arraycopy\n+   #53 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #54 = Class              #55           // java/math/BigInteger\n+   #55 = Utf8               java/math/BigInteger\n+   #56 = Methodref          #54.#57       // java/math/BigInteger.\"<init>\":([B)V\n+   #57 = NameAndType        #7:#58        // \"<init>\":([B)V\n+   #58 = Utf8               ([B)V\n+   #59 = Long               -1l\n+   #61 = Methodref          #54.#62       // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+   #62 = NameAndType        #63:#64       // valueOf:(J)Ljava/math/BigInteger;\n+   #63 = Utf8               valueOf\n+   #64 = Utf8               (J)Ljava/math/BigInteger;\n+   #65 = Methodref          #54.#66       // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #66 = NameAndType        #67:#68       // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #67 = Utf8               add\n+   #68 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #69 = Methodref          #54.#70       // java/math/BigInteger.not:()Ljava/math/BigInteger;\n+   #70 = NameAndType        #71:#72       // not:()Ljava/math/BigInteger;\n+   #71 = Utf8               not\n+   #72 = Utf8               ()Ljava/math/BigInteger;\n+   #73 = Methodref          #54.#74       // java/math/BigInteger.bitLength:()I\n+   #74 = NameAndType        #75:#76       // bitLength:()I\n+   #75 = Utf8               bitLength\n+   #76 = Utf8               ()I\n+   #77 = Methodref          #54.#78       // java/math/BigInteger.longValue:()J\n+   #78 = NameAndType        #79:#80       // longValue:()J\n+   #79 = Utf8               longValue\n+   #80 = Utf8               ()J\n+   #81 = Class              #82           // java/lang/String\n+   #82 = Utf8               java/lang/String\n+   #83 = Methodref          #81.#84       // java/lang/String.\"<init>\":([BII)V\n+   #84 = NameAndType        #7:#85        // \"<init>\":([BII)V\n+   #85 = Utf8               ([BII)V\n+   #86 = String             #87           // \\u0000\n+   #87 = Utf8               \\u0000\n+   #88 = String             #89           // {NUL}\n+   #89 = Utf8               {NUL}\n+   #90 = Methodref          #81.#91       // java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+   #91 = NameAndType        #92:#93       // replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+   #92 = Utf8               replace\n+   #93 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+   #94 = InvokeDynamic      #2:#95        // #2:makeConcatWithConstants:(BILjava/lang/String;I)Ljava/lang/String;\n+   #95 = NameAndType        #13:#96       // makeConcatWithConstants:(BILjava/lang/String;I)Ljava/lang/String;\n+   #96 = Utf8               (BILjava/lang/String;I)Ljava/lang/String;\n+   #97 = Fieldref           #19.#98       // org/apache/commons/compress/archivers/tar/TarUtils.DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #98 = NameAndType        #99:#100      // DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #99 = Utf8               DEFAULT_ENCODING\n+  #100 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #101 = Methodref          #19.#102      // org/apache/commons/compress/archivers/tar/TarUtils.parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+  #102 = NameAndType        #103:#104     // parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+  #103 = Utf8               parseName\n+  #104 = Utf8               ([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+  #105 = Class              #106          // java/io/IOException\n+  #106 = Utf8               java/io/IOException\n+  #107 = Fieldref           #19.#108      // org/apache/commons/compress/archivers/tar/TarUtils.FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #108 = NameAndType        #109:#100     // FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #109 = Utf8               FALLBACK_ENCODING\n+  #110 = Class              #111          // java/lang/RuntimeException\n+  #111 = Utf8               java/lang/RuntimeException\n+  #112 = Methodref          #110.#113     // java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n+  #113 = NameAndType        #7:#114       // \"<init>\":(Ljava/lang/Throwable;)V\n+  #114 = Utf8               (Ljava/lang/Throwable;)V\n+  #115 = InterfaceMethodref #116.#117     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+  #116 = Class              #118          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #117 = NameAndType        #119:#120     // decode:([B)Ljava/lang/String;\n+  #118 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #119 = Utf8               decode\n+  #120 = Utf8               ([B)Ljava/lang/String;\n+  #121 = String             #122          //\n+  #122 = Utf8\n+  #123 = Methodref          #19.#124      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctalOrBinary:([BII)J\n+  #124 = NameAndType        #125:#27      // parseOctalOrBinary:([BII)J\n+  #125 = Utf8               parseOctalOrBinary\n+  #126 = Class              #127          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+  #127 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+  #128 = Methodref          #126.#129     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+  #129 = NameAndType        #7:#130       // \"<init>\":(JJ)V\n+  #130 = Utf8               (JJ)V\n+  #131 = Class              #132          // java/util/ArrayList\n+  #132 = Utf8               java/util/ArrayList\n+  #133 = Methodref          #131.#5       // java/util/ArrayList.\"<init>\":()V\n+  #134 = Methodref          #19.#135      // org/apache/commons/compress/archivers/tar/TarUtils.parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #135 = NameAndType        #136:#137     // parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #136 = Utf8               parseSparse\n+  #137 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #138 = Methodref          #126.#139     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+  #139 = NameAndType        #140:#80      // getOffset:()J\n+  #140 = Utf8               getOffset\n+  #141 = String             #142          // Corrupted TAR archive, sparse entry with negative offset\n+  #142 = Utf8               Corrupted TAR archive, sparse entry with negative offset\n+  #143 = Methodref          #105.#16      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #144 = Methodref          #126.#145     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+  #145 = NameAndType        #146:#80      // getNumbytes:()J\n+  #146 = Utf8               getNumbytes\n+  #147 = String             #148          // Corrupted TAR archive, sparse entry with negative numbytes\n+  #148 = Utf8               Corrupted TAR archive, sparse entry with negative numbytes\n+  #149 = InterfaceMethodref #150.#151     // java/util/List.add:(Ljava/lang/Object;)Z\n+  #150 = Class              #152          // java/util/List\n+  #151 = NameAndType        #67:#153      // add:(Ljava/lang/Object;)Z\n+  #152 = Utf8               java/util/List\n+  #153 = Utf8               (Ljava/lang/Object;)Z\n+  #154 = String             #155          // Corrupted TAR archive, sparse entry is invalid\n+  #155 = Utf8               Corrupted TAR archive, sparse entry is invalid\n+  #156 = Methodref          #105.#157     // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #157 = NameAndType        #7:#158       // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #158 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #159 = Methodref          #160.#161     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+  #160 = Class              #162          // java/util/Collections\n+  #161 = NameAndType        #163:#164     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+  #162 = Utf8               java/util/Collections\n+  #163 = Utf8               unmodifiableList\n+  #164 = Utf8               (Ljava/util/List;)Ljava/util/List;\n+  #165 = Methodref          #19.#166      // org/apache/commons/compress/archivers/tar/TarUtils.formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+  #166 = NameAndType        #167:#168     // formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+  #167 = Utf8               formatNameBytes\n+  #168 = Utf8               (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+  #169 = Methodref          #81.#170      // java/lang/String.length:()I\n+  #170 = NameAndType        #171:#76      // length:()I\n+  #171 = Utf8               length\n+  #172 = InterfaceMethodref #116.#173     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #173 = NameAndType        #174:#175     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #174 = Utf8               encode\n+  #175 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #176 = Methodref          #177.#178     // java/nio/ByteBuffer.limit:()I\n+  #177 = Class              #179          // java/nio/ByteBuffer\n+  #178 = NameAndType        #180:#76      // limit:()I\n+  #179 = Utf8               java/nio/ByteBuffer\n+  #180 = Utf8               limit\n+  #181 = Methodref          #81.#182      // java/lang/String.substring:(II)Ljava/lang/String;\n+  #182 = NameAndType        #183:#37      // substring:(II)Ljava/lang/String;\n+  #183 = Utf8               substring\n+  #184 = Methodref          #177.#185     // java/nio/ByteBuffer.position:()I\n+  #185 = NameAndType        #186:#76      // position:()I\n+  #186 = Utf8               position\n+  #187 = Methodref          #177.#188     // java/nio/ByteBuffer.array:()[B\n+  #188 = NameAndType        #189:#190     // array:()[B\n+  #189 = Utf8               array\n+  #190 = Utf8               ()[B\n+  #191 = Methodref          #177.#192     // java/nio/ByteBuffer.arrayOffset:()I\n+  #192 = NameAndType        #193:#76      // arrayOffset:()I\n+  #193 = Utf8               arrayOffset\n+  #194 = Long               7l\n+  #196 = Methodref          #197.#198     // java/lang/Long.toOctalString:(J)Ljava/lang/String;\n+  #197 = Class              #199          // java/lang/Long\n+  #198 = NameAndType        #200:#201     // toOctalString:(J)Ljava/lang/String;\n+  #199 = Utf8               java/lang/Long\n+  #200 = Utf8               toOctalString\n+  #201 = Utf8               (J)Ljava/lang/String;\n+  #202 = InvokeDynamic      #3:#203       // #3:makeConcatWithConstants:(JLjava/lang/String;I)Ljava/lang/String;\n+  #203 = NameAndType        #13:#204      // makeConcatWithConstants:(JLjava/lang/String;I)Ljava/lang/String;\n+  #204 = Utf8               (JLjava/lang/String;I)Ljava/lang/String;\n+  #205 = Methodref          #19.#206      // org/apache/commons/compress/archivers/tar/TarUtils.formatUnsignedOctalString:(J[BII)V\n+  #206 = NameAndType        #207:#208     // formatUnsignedOctalString:(J[BII)V\n+  #207 = Utf8               formatUnsignedOctalString\n+  #208 = Utf8               (J[BII)V\n+  #209 = Long               2097151l\n+  #211 = Long               8589934591l\n+  #213 = Methodref          #19.#214      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongOctalBytes:(J[BII)I\n+  #214 = NameAndType        #215:#216     // formatLongOctalBytes:(J[BII)I\n+  #215 = Utf8               formatLongOctalBytes\n+  #216 = Utf8               (J[BII)I\n+  #217 = Methodref          #19.#218      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongBinary:(J[BIIZ)V\n+  #218 = NameAndType        #219:#220     // formatLongBinary:(J[BIIZ)V\n+  #219 = Utf8               formatLongBinary\n+  #220 = Utf8               (J[BIIZ)V\n+  #221 = Methodref          #19.#222      // org/apache/commons/compress/archivers/tar/TarUtils.formatBigIntegerBinary:(J[BIIZ)V\n+  #222 = NameAndType        #223:#220     // formatBigIntegerBinary:(J[BIIZ)V\n+  #223 = Utf8               formatBigIntegerBinary\n+  #224 = Methodref          #43.#225      // java/lang/Math.abs:(J)J\n+  #225 = NameAndType        #226:#227     // abs:(J)J\n+  #226 = Utf8               abs\n+  #227 = Utf8               (J)J\n+  #228 = InvokeDynamic      #4:#229       // #4:makeConcatWithConstants:(JI)Ljava/lang/String;\n+  #229 = NameAndType        #13:#230      // makeConcatWithConstants:(JI)Ljava/lang/String;\n+  #230 = Utf8               (JI)Ljava/lang/String;\n+  #231 = Long               255l\n+  #233 = Methodref          #54.#234      // java/math/BigInteger.toByteArray:()[B\n+  #234 = NameAndType        #235:#190     // toByteArray:()[B\n+  #235 = Utf8               toByteArray\n+  #236 = Methodref          #19.#237      // org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #237 = NameAndType        #238:#239     // parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #238 = Utf8               parsePaxHeaders\n+  #239 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #240 = Class              #241          // java/util/HashMap\n+  #241 = Utf8               java/util/HashMap\n+  #242 = Methodref          #240.#243     // java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n+  #243 = NameAndType        #7:#244       // \"<init>\":(Ljava/util/Map;)V\n+  #244 = Utf8               (Ljava/util/Map;)V\n+  #245 = Methodref          #246.#247     // java/io/InputStream.read:()I\n+  #246 = Class              #248          // java/io/InputStream\n+  #247 = NameAndType        #249:#76      // read:()I\n+  #248 = Utf8               java/io/InputStream\n+  #249 = Utf8               read\n+  #250 = Class              #251          // java/io/ByteArrayOutputStream\n+  #251 = Utf8               java/io/ByteArrayOutputStream\n+  #252 = Methodref          #250.#5       // java/io/ByteArrayOutputStream.\"<init>\":()V\n+  #253 = Class              #254          // org/apache/commons/compress/utils/CharsetNames\n+  #254 = Utf8               org/apache/commons/compress/utils/CharsetNames\n+  #255 = String             #256          // UTF-8\n+  #256 = Utf8               UTF-8\n+  #257 = Methodref          #250.#258     // java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n+  #258 = NameAndType        #259:#260     // toString:(Ljava/lang/String;)Ljava/lang/String;\n+  #259 = Utf8               toString\n+  #260 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #261 = InterfaceMethodref #262.#263     // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #262 = Class              #264          // java/util/Map\n+  #263 = NameAndType        #265:#266     // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #264 = Utf8               java/util/Map\n+  #265 = Utf8               remove\n+  #266 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #267 = InvokeDynamic      #5:#12        // #5:makeConcatWithConstants:(I)Ljava/lang/String;\n+  #268 = Methodref          #269.#270     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+  #269 = Class              #271          // org/apache/commons/compress/utils/IOUtils\n+  #270 = NameAndType        #272:#273     // readRange:(Ljava/io/InputStream;I)[B\n+  #271 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #272 = Utf8               readRange\n+  #273 = Utf8               (Ljava/io/InputStream;I)[B\n+  #274 = InvokeDynamic      #6:#36        // #6:makeConcatWithConstants:(II)Ljava/lang/String;\n+  #275 = String             #276          // Failed to read Paxheader.Value should end with a newline\n+  #276 = Utf8               Failed to read Paxheader.Value should end with a newline\n+  #277 = Fieldref           #278.#279     // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n+  #278 = Class              #280          // java/nio/charset/StandardCharsets\n+  #279 = NameAndType        #281:#282     // UTF_8:Ljava/nio/charset/Charset;\n+  #280 = Utf8               java/nio/charset/StandardCharsets\n+  #281 = Utf8               UTF_8\n+  #282 = Utf8               Ljava/nio/charset/Charset;\n+  #283 = Methodref          #81.#284      // java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n+  #284 = NameAndType        #7:#285       // \"<init>\":([BIILjava/nio/charset/Charset;)V\n+  #285 = Utf8               ([BIILjava/nio/charset/Charset;)V\n+  #286 = InterfaceMethodref #262.#287     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #287 = NameAndType        #288:#289     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #288 = Utf8               put\n+  #289 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #290 = String             #291          // GNU.sparse.offset\n+  #291 = Utf8               GNU.sparse.offset\n+  #292 = Methodref          #81.#293      // java/lang/String.equals:(Ljava/lang/Object;)Z\n+  #293 = NameAndType        #294:#153     // equals:(Ljava/lang/Object;)Z\n+  #294 = Utf8               equals\n+  #295 = Methodref          #197.#78      // java/lang/Long.longValue:()J\n+  #296 = Methodref          #197.#297     // java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+  #297 = NameAndType        #63:#298      // valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+  #298 = Utf8               (Ljava/lang/String;)Ljava/lang/Long;\n+  #299 = Class              #300          // java/lang/NumberFormatException\n+  #300 = Utf8               java/lang/NumberFormatException\n+  #301 = String             #302          // Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n+  #302 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n+  #303 = String             #304          // Failed to read Paxheader.GNU.sparse.offset contains negative value\n+  #304 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains negative value\n+  #305 = String             #306          // GNU.sparse.numbytes\n+  #306 = Utf8               GNU.sparse.numbytes\n+  #307 = String             #308          // Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+  #308 = Utf8               Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+  #309 = Methodref          #197.#310     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n+  #310 = NameAndType        #311:#312     // parseLong:(Ljava/lang/String;)J\n+  #311 = Utf8               parseLong\n+  #312 = Utf8               (Ljava/lang/String;)J\n+  #313 = String             #314          // Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n+  #314 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n+  #315 = String             #316          // Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n   #316 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n-  #317 = NameAndType        #427:#428     // write:(I)V\n-  #318 = Utf8               Failed to read Paxheader. Encountered a non-number while reading length\n-  #319 = NameAndType        #202:#200     // parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-  #320 = NameAndType        #429:#430     // getMessage:()Ljava/lang/String;\n-  #321 = Utf8               ,\n-  #322 = NameAndType        #431:#432     // split:(Ljava/lang/String;)[Ljava/lang/String;\n-  #323 = Utf8               Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n-  #324 = Utf8               Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n-  #325 = Utf8               Corrupted TAR archive. Sparse struct offset contains negative value\n-  #326 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n-  #327 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains negative value\n-  #328 = NameAndType        #208:#209     // readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-  #329 = Utf8               Corrupted TAR archive. Negative value in sparse headers block\n-  #330 = Utf8               Corrupted TAR archive. Sparse header block offset contains negative value\n-  #331 = Utf8               Corrupted TAR archive. Sparse header block numbytes contains negative value\n-  #332 = NameAndType        #433:#434     // skip:(Ljava/io/InputStream;J)J\n-  #333 = Utf8               Unexpected EOF when reading parse information of 1.X PAX format\n-  #334 = Utf8               Corrupted TAR archive. Non-numeric value in sparse headers block\n-  #335 = Class              #435          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #336 = NameAndType        #436:#437     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #337 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils$1\n-  #338 = Utf8               java/lang/Object\n-  #339 = Utf8               [B\n-  #340 = Utf8               java/util/List\n-  #341 = Utf8               java/nio/ByteBuffer\n-  #342 = Utf8               java/util/Map\n-  #343 = Utf8               java/lang/Long\n-  #344 = Utf8               java/io/InputStream\n-  #345 = Utf8               [Ljava/lang/String;\n-  #346 = Utf8               [J\n-  #347 = Methodref          #438.#439     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #348 = Utf8               Length \\u0001 must be at least 2\n-  #349 = Utf8               makeConcatWithConstants\n-  #350 = Utf8               (I)Ljava/lang/String;\n-  #351 = Utf8               (Ljava/lang/String;)V\n-  #352 = Utf8               At offset \\u0001, \\u0001 byte binary number exceeds maximum signed long value\n-  #353 = Utf8               (II)Ljava/lang/String;\n-  #354 = Utf8               java/lang/Math\n-  #355 = Utf8               pow\n-  #356 = Utf8               (DD)D\n-  #357 = Utf8               java/lang/System\n-  #358 = Utf8               arraycopy\n-  #359 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #360 = Utf8               ([B)V\n-  #361 = Utf8               valueOf\n-  #362 = Utf8               (J)Ljava/math/BigInteger;\n-  #363 = Utf8               add\n-  #364 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #365 = Utf8               not\n-  #366 = Utf8               ()Ljava/math/BigInteger;\n-  #367 = Utf8               bitLength\n-  #368 = Utf8               ()I\n-  #369 = Utf8               longValue\n-  #370 = Utf8               ()J\n-  #371 = Utf8               ([BII)V\n-  #372 = Utf8               replace\n-  #373 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-  #374 = Utf8               Invalid byte \\u0001 at offset \\u0001 in \\'\\u0001\\' len=\\u0001\n-  #375 = Utf8               (BILjava/lang/String;I)Ljava/lang/String;\n-  #376 = Utf8               (Ljava/lang/Throwable;)V\n-  #377 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #378 = Utf8               decode\n-  #379 = Utf8               ([B)Ljava/lang/String;\n-  #380 = Utf8               (JJ)V\n-  #381 = Utf8               getOffset\n-  #382 = Utf8               getNumbytes\n-  #383 = Utf8               (Ljava/lang/Object;)Z\n-  #384 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #385 = Utf8               java/util/Collections\n-  #386 = Utf8               unmodifiableList\n-  #387 = Utf8               (Ljava/util/List;)Ljava/util/List;\n-  #388 = Utf8               length\n-  #389 = Utf8               encode\n-  #390 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #391 = Utf8               limit\n-  #392 = Utf8               substring\n-  #393 = Utf8               position\n-  #394 = Utf8               array\n-  #395 = Utf8               ()[B\n-  #396 = Utf8               arrayOffset\n-  #397 = Utf8               toOctalString\n-  #398 = Utf8               (J)Ljava/lang/String;\n-  #399 = Utf8               \\u0001=\\u0001 will not fit in octal number buffer of length \\u0001\n-  #400 = Utf8               (JLjava/lang/String;I)Ljava/lang/String;\n-  #401 = Utf8               abs\n-  #402 = Utf8               (J)J\n-  #403 = Utf8               Value \\u0001 is too large for \\u0001 byte field.\n-  #404 = Utf8               (JI)Ljava/lang/String;\n-  #405 = Utf8               toByteArray\n-  #406 = Utf8               (Ljava/util/Map;)V\n-  #407 = Utf8               read\n-  #408 = Utf8               toString\n-  #409 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #410 = Utf8               remove\n-  #411 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #412 = Utf8               Paxheader value size \\u0001 exceeds size of header record\n-  #413 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #414 = Utf8               readRange\n-  #415 = Utf8               (Ljava/io/InputStream;I)[B\n-  #416 = Utf8               Failed to read Paxheader. Expected \\u0001 bytes, read \\u0001\n-  #417 = Utf8               java/nio/charset/StandardCharsets\n-  #418 = Utf8               UTF_8\n-  #419 = Utf8               Ljava/nio/charset/Charset;\n-  #420 = Utf8               ([BIILjava/nio/charset/Charset;)V\n-  #421 = Utf8               put\n-  #422 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #423 = Utf8               equals\n-  #424 = Utf8               (Ljava/lang/String;)Ljava/lang/Long;\n-  #425 = Utf8               parseLong\n-  #426 = Utf8               (Ljava/lang/String;)J\n-  #427 = Utf8               write\n-  #428 = Utf8               (I)V\n-  #429 = Utf8               getMessage\n-  #430 = Utf8               ()Ljava/lang/String;\n-  #431 = Utf8               split\n-  #432 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n-  #433 = Utf8               skip\n-  #434 = Utf8               (Ljava/io/InputStream;J)J\n-  #435 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #436 = Utf8               getZipEncoding\n-  #437 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #438 = Class              #440          // java/lang/invoke/StringConcatFactory\n-  #439 = NameAndType        #349:#443     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #440 = Utf8               java/lang/invoke/StringConcatFactory\n-  #441 = Class              #445          // java/lang/invoke/MethodHandles$Lookup\n-  #442 = Utf8               Lookup\n-  #443 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #444 = Class              #446          // java/lang/invoke/MethodHandles\n-  #445 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #446 = Utf8               java/lang/invoke/MethodHandles\n+  #317 = Methodref          #250.#318     // java/io/ByteArrayOutputStream.write:(I)V\n+  #318 = NameAndType        #319:#320     // write:(I)V\n+  #319 = Utf8               write\n+  #320 = Utf8               (I)V\n+  #321 = String             #322          // Failed to read Paxheader. Encountered a non-number while reading length\n+  #322 = Utf8               Failed to read Paxheader. Encountered a non-number while reading length\n+  #323 = Methodref          #19.#324      // org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+  #324 = NameAndType        #325:#326     // parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+  #325 = Utf8               parseFromPAX01SparseHeaders\n+  #326 = Utf8               (Ljava/lang/String;)Ljava/util/List;\n+  #327 = Methodref          #105.#328     // java/io/IOException.getMessage:()Ljava/lang/String;\n+  #328 = NameAndType        #329:#330     // getMessage:()Ljava/lang/String;\n+  #329 = Utf8               getMessage\n+  #330 = Utf8               ()Ljava/lang/String;\n+  #331 = Methodref          #110.#157     // java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #332 = String             #333          // ,\n+  #333 = Utf8               ,\n+  #334 = Methodref          #81.#335      // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n+  #335 = NameAndType        #336:#337     // split:(Ljava/lang/String;)[Ljava/lang/String;\n+  #336 = Utf8               split\n+  #337 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n+  #338 = String             #339          // Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n+  #339 = Utf8               Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n+  #340 = String             #341          // Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n+  #341 = Utf8               Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n+  #342 = String             #343          // Corrupted TAR archive. Sparse struct offset contains negative value\n+  #343 = Utf8               Corrupted TAR archive. Sparse struct offset contains negative value\n+  #344 = String             #345          // Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n+  #345 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n+  #346 = String             #347          // Corrupted TAR archive. Sparse struct numbytes contains negative value\n+  #347 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains negative value\n+  #348 = Methodref          #19.#349      // org/apache/commons/compress/archivers/tar/TarUtils.readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+  #349 = NameAndType        #350:#351     // readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+  #350 = Utf8               readLineOfNumberForPax1X\n+  #351 = Utf8               (Ljava/io/InputStream;)[J\n+  #352 = String             #353          // Corrupted TAR archive. Negative value in sparse headers block\n+  #353 = Utf8               Corrupted TAR archive. Negative value in sparse headers block\n+  #354 = String             #355          // Corrupted TAR archive. Sparse header block offset contains negative value\n+  #355 = Utf8               Corrupted TAR archive. Sparse header block offset contains negative value\n+  #356 = String             #357          // Corrupted TAR archive. Sparse header block numbytes contains negative value\n+  #357 = Utf8               Corrupted TAR archive. Sparse header block numbytes contains negative value\n+  #358 = Methodref          #269.#359     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+  #359 = NameAndType        #360:#361     // skip:(Ljava/io/InputStream;J)J\n+  #360 = Utf8               skip\n+  #361 = Utf8               (Ljava/io/InputStream;J)J\n+  #362 = String             #363          // Unexpected EOF when reading parse information of 1.X PAX format\n+  #363 = Utf8               Unexpected EOF when reading parse information of 1.X PAX format\n+  #364 = String             #365          // Corrupted TAR archive. Non-numeric value in sparse headers block\n+  #365 = Utf8               Corrupted TAR archive. Non-numeric value in sparse headers block\n+  #366 = Long               10l\n+  #368 = Methodref          #369.#370     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #369 = Class              #371          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #370 = NameAndType        #372:#373     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #371 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #372 = Utf8               getZipEncoding\n+  #373 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #374 = Class              #375          // org/apache/commons/compress/archivers/tar/TarUtils$1\n+  #375 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils$1\n+  #376 = Methodref          #374.#5       // org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n+  #377 = Utf8               BYTE_MASK\n+  #378 = Utf8               I\n+  #379 = Utf8               ConstantValue\n+  #380 = Integer            255\n+  #381 = Utf8               Code\n+  #382 = Utf8               LineNumberTable\n+  #383 = Utf8               StackMapTable\n+  #384 = Class              #385          // \"[B\"\n+  #385 = Utf8               [B\n+  #386 = Utf8               parseBoolean\n+  #387 = Utf8               ([BI)Z\n+  #388 = Utf8               ([BII)Ljava/lang/String;\n+  #389 = Utf8               Exceptions\n+  #390 = Utf8               readSparseStructs\n+  #391 = Utf8               ([BII)Ljava/util/List;\n+  #392 = Utf8               Signature\n+  #393 = Utf8               ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #394 = Utf8               (Ljava/lang/String;[BII)I\n+  #395 = Utf8               formatOctalBytes\n+  #396 = Utf8               formatLongOctalOrBinaryBytes\n+  #397 = Utf8               formatCheckSumOctalBytes\n+  #398 = Utf8               computeCheckSum\n+  #399 = Utf8               ([B)J\n+  #400 = Utf8               verifyCheckSum\n+  #401 = Utf8               ([B)Z\n+  #402 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;)Ljava/util/Map;\n+  #403 = Utf8               Deprecated\n+  #404 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #405 = Utf8               RuntimeVisibleAnnotations\n+  #406 = Utf8               Ljava/lang/Deprecated;\n+  #407 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #408 = Utf8               parsePAX01SparseHeaders\n+  #409 = Utf8               (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #410 = Class              #411          // \"[Ljava/lang/String;\"\n+  #411 = Utf8               [Ljava/lang/String;\n+  #412 = Utf8               parsePAX1XSparseHeaders\n+  #413 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List;\n+  #414 = Class              #415          // \"[J\"\n+  #415 = Utf8               [J\n+  #416 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #417 = Utf8               <clinit>\n+  #418 = Utf8               SourceFile\n+  #419 = Utf8               TarUtils.java\n+  #420 = Utf8               BootstrapMethods\n+  #421 = MethodHandle       6:#422        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #422 = Methodref          #423.#424     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #423 = Class              #425          // java/lang/invoke/StringConcatFactory\n+  #424 = NameAndType        #13:#426      // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #425 = Utf8               java/lang/invoke/StringConcatFactory\n+  #426 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #427 = String             #428          // Length \\u0001 must be at least 2\n+  #428 = Utf8               Length \\u0001 must be at least 2\n+  #429 = String             #430          // At offset \\u0001, \\u0001 byte binary number exceeds maximum signed long value\n+  #430 = Utf8               At offset \\u0001, \\u0001 byte binary number exceeds maximum signed long value\n+  #431 = String             #432          // Invalid byte \\u0001 at offset \\u0001 in \\'\\u0001\\' len=\\u0001\n+  #432 = Utf8               Invalid byte \\u0001 at offset \\u0001 in \\'\\u0001\\' len=\\u0001\n+  #433 = String             #434          // \\u0001=\\u0001 will not fit in octal number buffer of length \\u0001\n+  #434 = Utf8               \\u0001=\\u0001 will not fit in octal number buffer of length \\u0001\n+  #435 = String             #436          // Value \\u0001 is too large for \\u0001 byte field.\n+  #436 = Utf8               Value \\u0001 is too large for \\u0001 byte field.\n+  #437 = String             #438          // Paxheader value size \\u0001 exceeds size of header record\n+  #438 = Utf8               Paxheader value size \\u0001 exceeds size of header record\n+  #439 = String             #440          // Failed to read Paxheader. Expected \\u0001 bytes, read \\u0001\n+  #440 = Utf8               Failed to read Paxheader. Expected \\u0001 bytes, read \\u0001\n+  #441 = Utf8               InnerClasses\n+  #442 = Class              #443          // java/lang/invoke/MethodHandles$Lookup\n+  #443 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #444 = Class              #445          // java/lang/invoke/MethodHandles\n+  #445 = Utf8               java/lang/invoke/MethodHandles\n+  #446 = Utf8               Lookup\n {\n   private static final int BYTE_MASK = 255;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 255\n \n   static final org.apache.commons.compress.archivers.zip.ZipEncoding DEFAULT_ENCODING;\n@@ -462,15 +462,15 @@\n \n   private org.apache.commons.compress.archivers.tar.TarUtils();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #3                  // Method java/lang/Object.\"<init>\":()V\n          4: return\n       LineNumberTable:\n         line 93: 0\n         line 94: 4\n \n   public static long parseOctal(byte[], int, int);\n     descriptor: ([BII)J\n@@ -484,19 +484,19 @@\n          4: iadd\n          5: istore        5\n          7: iload_1\n          8: istore        6\n         10: iload_2\n         11: iconst_2\n         12: if_icmpge     29\n-        15: new           #3                  // class java/lang/IllegalArgumentException\n+        15: new           #9                  // class java/lang/IllegalArgumentException\n         18: dup\n         19: iload_2\n-        20: invokedynamic #4,  0              // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n-        25: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        20: invokedynamic #11,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+        25: invokespecial #15                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         28: athrow\n         29: aload_0\n         30: iload         6\n         32: baload\n         33: ifne          38\n         36: lconst_0\n         37: lreturn\n@@ -542,23 +542,23 @@\n        115: istore        8\n        117: iload         8\n        119: bipush        48\n        121: if_icmplt     131\n        124: iload         8\n        126: bipush        55\n        128: if_icmple     149\n-       131: new           #3                  // class java/lang/IllegalArgumentException\n+       131: new           #9                  // class java/lang/IllegalArgumentException\n        134: dup\n        135: aload_0\n        136: iload_1\n        137: iload_2\n        138: iload         6\n        140: iload         8\n-       142: invokestatic  #6                  // Method exceptionMessage:([BIIIB)Ljava/lang/String;\n-       145: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+       142: invokestatic  #18                 // Method exceptionMessage:([BIIIB)Ljava/lang/String;\n+       145: invokespecial #15                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n        148: athrow\n        149: lload_3\n        150: iconst_3\n        151: lshl\n        152: iload         8\n        154: bipush        48\n        156: isub\n@@ -622,15 +622,15 @@\n          2: baload\n          3: sipush        128\n          6: iand\n          7: ifne          17\n         10: aload_0\n         11: iload_1\n         12: iload_2\n-        13: invokestatic  #7                  // Method parseOctal:([BII)J\n+        13: invokestatic  #24                 // Method parseOctal:([BII)J\n         16: lreturn\n         17: aload_0\n         18: iload_1\n         19: baload\n         20: iconst_m1\n         21: if_icmpne     28\n         24: iconst_1\n@@ -640,21 +640,21 @@\n         30: iload_2\n         31: bipush        9\n         33: if_icmpge     44\n         36: aload_0\n         37: iload_1\n         38: iload_2\n         39: iload_3\n-        40: invokestatic  #8                  // Method parseBinaryLong:([BIIZ)J\n+        40: invokestatic  #28                 // Method parseBinaryLong:([BIIZ)J\n         43: lreturn\n         44: aload_0\n         45: iload_1\n         46: iload_2\n         47: iload_3\n-        48: invokestatic  #9                  // Method parseBinaryBigInteger:([BIIZ)J\n+        48: invokestatic  #32                 // Method parseBinaryBigInteger:([BIIZ)J\n         51: lreturn\n       LineNumberTable:\n         line 182: 0\n         line 183: 10\n         line 185: 17\n         line 186: 30\n         line 187: 36\n@@ -672,20 +672,20 @@\n     descriptor: ([BIIZ)J\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=8, locals=7, args_size=4\n          0: iload_2\n          1: bipush        9\n          3: if_icmplt     21\n-         6: new           #3                  // class java/lang/IllegalArgumentException\n+         6: new           #9                  // class java/lang/IllegalArgumentException\n          9: dup\n         10: iload_1\n         11: iload_2\n-        12: invokedynamic #10,  0             // InvokeDynamic #1:makeConcatWithConstants:(II)Ljava/lang/String;\n-        17: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        12: invokedynamic #35,  0             // InvokeDynamic #1:makeConcatWithConstants:(II)Ljava/lang/String;\n+        17: invokespecial #15                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         20: athrow\n         21: lconst_0\n         22: lstore        4\n         24: iconst_1\n         25: istore        6\n         27: iload         6\n         29: iload_2\n@@ -708,22 +708,22 @@\n         58: iload_3\n         59: ifeq          90\n         62: lload         4\n         64: lconst_1\n         65: lsub\n         66: lstore        4\n         68: lload         4\n-        70: ldc2_w        #11                 // double 2.0d\n+        70: ldc2_w        #38                 // double 2.0d\n         73: iload_2\n         74: iconst_1\n         75: isub\n         76: i2d\n-        77: ldc2_w        #13                 // double 8.0d\n+        77: ldc2_w        #40                 // double 8.0d\n         80: dmul\n-        81: invokestatic  #15                 // Method java/lang/Math.pow:(DD)D\n+        81: invokestatic  #42                 // Method java/lang/Math.pow:(DD)D\n         84: d2l\n         85: lconst_1\n         86: lsub\n         87: lxor\n         88: lstore        4\n         90: iload_3\n         91: ifeq          100\n@@ -770,47 +770,47 @@\n          9: iconst_1\n         10: iadd\n         11: aload         4\n         13: iconst_0\n         14: iload_2\n         15: iconst_1\n         16: isub\n-        17: invokestatic  #16                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-        20: new           #17                 // class java/math/BigInteger\n+        17: invokestatic  #48                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        20: new           #54                 // class java/math/BigInteger\n         23: dup\n         24: aload         4\n-        26: invokespecial #18                 // Method java/math/BigInteger.\"<init>\":([B)V\n+        26: invokespecial #56                 // Method java/math/BigInteger.\"<init>\":([B)V\n         29: astore        5\n         31: iload_3\n         32: ifeq          51\n         35: aload         5\n-        37: ldc2_w        #19                 // long -1l\n-        40: invokestatic  #21                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-        43: invokevirtual #22                 // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-        46: invokevirtual #23                 // Method java/math/BigInteger.not:()Ljava/math/BigInteger;\n+        37: ldc2_w        #59                 // long -1l\n+        40: invokestatic  #61                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+        43: invokevirtual #65                 // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+        46: invokevirtual #69                 // Method java/math/BigInteger.not:()Ljava/math/BigInteger;\n         49: astore        5\n         51: aload         5\n-        53: invokevirtual #24                 // Method java/math/BigInteger.bitLength:()I\n+        53: invokevirtual #73                 // Method java/math/BigInteger.bitLength:()I\n         56: bipush        63\n         58: if_icmple     76\n-        61: new           #3                  // class java/lang/IllegalArgumentException\n+        61: new           #9                  // class java/lang/IllegalArgumentException\n         64: dup\n         65: iload_1\n         66: iload_2\n-        67: invokedynamic #10,  0             // InvokeDynamic #1:makeConcatWithConstants:(II)Ljava/lang/String;\n-        72: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        67: invokedynamic #35,  0             // InvokeDynamic #1:makeConcatWithConstants:(II)Ljava/lang/String;\n+        72: invokespecial #15                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         75: athrow\n         76: iload_3\n         77: ifeq          89\n         80: aload         5\n-        82: invokevirtual #25                 // Method java/math/BigInteger.longValue:()J\n+        82: invokevirtual #77                 // Method java/math/BigInteger.longValue:()J\n         85: lneg\n         86: goto          94\n         89: aload         5\n-        91: invokevirtual #25                 // Method java/math/BigInteger.longValue:()J\n+        91: invokevirtual #77                 // Method java/math/BigInteger.longValue:()J\n         94: lreturn\n       LineNumberTable:\n         line 217: 0\n         line 218: 7\n         line 219: 20\n         line 220: 31\n         line 222: 35\n@@ -848,62 +848,62 @@\n           stack = [ int ]\n \n   private static java.lang.String exceptionMessage(byte[], int, int, int, byte);\n     descriptor: ([BIIIB)Ljava/lang/String;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=6, args_size=5\n-         0: new           #26                 // class java/lang/String\n+         0: new           #81                 // class java/lang/String\n          3: dup\n          4: aload_0\n          5: iload_1\n          6: iload_2\n-         7: invokespecial #27                 // Method java/lang/String.\"<init>\":([BII)V\n+         7: invokespecial #83                 // Method java/lang/String.\"<init>\":([BII)V\n         10: astore        5\n         12: aload         5\n-        14: ldc           #28                 // String \\u0000\n-        16: ldc           #29                 // String {NUL}\n-        18: invokevirtual #30                 // Method java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+        14: ldc           #86                 // String \\u0000\n+        16: ldc           #88                 // String {NUL}\n+        18: invokevirtual #90                 // Method java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n         21: astore        5\n         23: iload         4\n         25: iload_3\n         26: iload_1\n         27: isub\n         28: aload         5\n         30: iload_2\n-        31: invokedynamic #31,  0             // InvokeDynamic #2:makeConcatWithConstants:(BILjava/lang/String;I)Ljava/lang/String;\n+        31: invokedynamic #94,  0             // InvokeDynamic #2:makeConcatWithConstants:(BILjava/lang/String;I)Ljava/lang/String;\n         36: areturn\n       LineNumberTable:\n         line 257: 0\n         line 259: 12\n         line 260: 23\n \n   public static java.lang.String parseName(byte[], int, int);\n     descriptor: ([BII)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=5, args_size=3\n          0: aload_0\n          1: iload_1\n          2: iload_2\n-         3: getstatic     #32                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         6: invokestatic  #33                 // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+         3: getstatic     #97                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         6: invokestatic  #101                // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n          9: areturn\n         10: astore_3\n         11: aload_0\n         12: iload_1\n         13: iload_2\n-        14: getstatic     #35                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-        17: invokestatic  #33                 // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+        14: getstatic     #107                // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        17: invokestatic  #101                // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n         20: areturn\n         21: astore        4\n-        23: new           #36                 // class java/lang/RuntimeException\n+        23: new           #110                // class java/lang/RuntimeException\n         26: dup\n         27: aload         4\n-        29: invokespecial #37                 // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n+        29: invokespecial #112                // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n         32: athrow\n       Exception table:\n          from    to  target type\n              0     9    10   Class java/io/IOException\n             11    20    21   Class java/io/IOException\n       LineNumberTable:\n         line 275: 0\n@@ -944,20 +944,20 @@\n         35: newarray       byte\n         37: astore        5\n         39: aload_0\n         40: iload_1\n         41: aload         5\n         43: iconst_0\n         44: iload         4\n-        46: invokestatic  #16                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        46: invokestatic  #48                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         49: aload_3\n         50: aload         5\n-        52: invokeinterface #38,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+        52: invokeinterface #115,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n         57: areturn\n-        58: ldc           #39                 // String\n+        58: ldc           #121                // String\n         60: areturn\n       LineNumberTable:\n         line 304: 0\n         line 305: 3\n         line 306: 19\n         line 305: 22\n         line 308: 28\n@@ -979,92 +979,92 @@\n     descriptor: ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=6, locals=6, args_size=2\n          0: aload_0\n          1: iload_1\n          2: bipush        12\n-         4: invokestatic  #40                 // Method parseOctalOrBinary:([BII)J\n+         4: invokestatic  #123                // Method parseOctalOrBinary:([BII)J\n          7: lstore_2\n          8: aload_0\n          9: iload_1\n         10: bipush        12\n         12: iadd\n         13: bipush        12\n-        15: invokestatic  #40                 // Method parseOctalOrBinary:([BII)J\n+        15: invokestatic  #123                // Method parseOctalOrBinary:([BII)J\n         18: lstore        4\n-        20: new           #41                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+        20: new           #126                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n         23: dup\n         24: lload_2\n         25: lload         4\n-        27: invokespecial #42                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+        27: invokespecial #128                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n         30: areturn\n       LineNumberTable:\n         line 324: 0\n         line 325: 8\n         line 327: 20\n \n   static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> readSparseStructs(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)Ljava/util/List;\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=6, args_size=3\n-         0: new           #43                 // class java/util/ArrayList\n+         0: new           #131                // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #44                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #133                // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_3\n          8: iconst_0\n          9: istore        4\n         11: iload         4\n         13: iload_2\n         14: if_icmpge     102\n         17: aload_0\n         18: iload_1\n         19: iload         4\n         21: bipush        24\n         23: imul\n         24: iadd\n-        25: invokestatic  #45                 // Method parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+        25: invokestatic  #134                // Method parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n         28: astore        5\n         30: aload         5\n-        32: invokevirtual #46                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+        32: invokevirtual #138                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n         35: lconst_0\n         36: lcmp\n         37: ifge          50\n-        40: new           #34                 // class java/io/IOException\n+        40: new           #105                // class java/io/IOException\n         43: dup\n-        44: ldc           #47                 // String Corrupted TAR archive, sparse entry with negative offset\n-        46: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        44: ldc           #141                // String Corrupted TAR archive, sparse entry with negative offset\n+        46: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         49: athrow\n         50: aload         5\n-        52: invokevirtual #49                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+        52: invokevirtual #144                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n         55: lconst_0\n         56: lcmp\n         57: ifge          70\n-        60: new           #34                 // class java/io/IOException\n+        60: new           #105                // class java/io/IOException\n         63: dup\n-        64: ldc           #50                 // String Corrupted TAR archive, sparse entry with negative numbytes\n-        66: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        64: ldc           #147                // String Corrupted TAR archive, sparse entry with negative numbytes\n+        66: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         69: athrow\n         70: aload_3\n         71: aload         5\n-        73: invokeinterface #51,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        73: invokeinterface #149,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n         78: pop\n         79: goto          96\n         82: astore        5\n-        84: new           #34                 // class java/io/IOException\n+        84: new           #105                // class java/io/IOException\n         87: dup\n-        88: ldc           #52                 // String Corrupted TAR archive, sparse entry is invalid\n+        88: ldc           #154                // String Corrupted TAR archive, sparse entry is invalid\n         90: aload         5\n-        92: invokespecial #53                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        92: invokespecial #156                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n         95: athrow\n         96: iinc          4, 1\n         99: goto          11\n        102: aload_3\n-       103: invokestatic  #54                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+       103: invokestatic  #159                // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n        106: areturn\n       Exception table:\n          from    to  target type\n             17    79    82   Class java/lang/IllegalArgumentException\n       LineNumberTable:\n         line 335: 0\n         line 336: 8\n@@ -1093,41 +1093,41 @@\n           locals = [ class \"[B\", int, int, class java/util/List, int ]\n           stack = [ class java/lang/IllegalArgumentException ]\n         frame_type = 13 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 5\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #169                         // ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #393                         // ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   public static int formatNameBytes(java.lang.String, byte[], int, int);\n     descriptor: (Ljava/lang/String;[BII)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=6, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: getstatic     #32                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         7: invokestatic  #55                 // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+         4: getstatic     #97                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         7: invokestatic  #165                // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n         10: ireturn\n         11: astore        4\n         13: aload_0\n         14: aload_1\n         15: iload_2\n         16: iload_3\n-        17: getstatic     #35                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-        20: invokestatic  #55                 // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+        17: getstatic     #107                // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        20: invokestatic  #165                // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n         23: ireturn\n         24: astore        5\n-        26: new           #36                 // class java/lang/RuntimeException\n+        26: new           #110                // class java/lang/RuntimeException\n         29: dup\n         30: aload         5\n-        32: invokespecial #37                 // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n+        32: invokespecial #112                // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n         35: athrow\n       Exception table:\n          from    to  target type\n              0    10    11   Class java/io/IOException\n             13    23    24   Class java/io/IOException\n       LineNumberTable:\n         line 373: 0\n@@ -1145,49 +1145,49 @@\n \n   public static int formatNameBytes(java.lang.String, byte[], int, int, org.apache.commons.compress.archivers.zip.ZipEncoding) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=9, args_size=5\n          0: aload_0\n-         1: invokevirtual #56                 // Method java/lang/String.length:()I\n+         1: invokevirtual #169                // Method java/lang/String.length:()I\n          4: istore        5\n          6: aload         4\n          8: aload_0\n-         9: invokeinterface #57,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+         9: invokeinterface #172,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n         14: astore        6\n         16: aload         6\n-        18: invokevirtual #58                 // Method java/nio/ByteBuffer.limit:()I\n+        18: invokevirtual #176                // Method java/nio/ByteBuffer.limit:()I\n         21: iload_3\n         22: if_icmple     52\n         25: iload         5\n         27: ifle          52\n         30: aload         4\n         32: aload_0\n         33: iconst_0\n         34: iinc          5, -1\n         37: iload         5\n-        39: invokevirtual #59                 // Method java/lang/String.substring:(II)Ljava/lang/String;\n-        42: invokeinterface #57,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+        39: invokevirtual #181                // Method java/lang/String.substring:(II)Ljava/lang/String;\n+        42: invokeinterface #172,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n         47: astore        6\n         49: goto          16\n         52: aload         6\n-        54: invokevirtual #58                 // Method java/nio/ByteBuffer.limit:()I\n+        54: invokevirtual #176                // Method java/nio/ByteBuffer.limit:()I\n         57: aload         6\n-        59: invokevirtual #60                 // Method java/nio/ByteBuffer.position:()I\n+        59: invokevirtual #184                // Method java/nio/ByteBuffer.position:()I\n         62: isub\n         63: istore        7\n         65: aload         6\n-        67: invokevirtual #61                 // Method java/nio/ByteBuffer.array:()[B\n+        67: invokevirtual #187                // Method java/nio/ByteBuffer.array:()[B\n         70: aload         6\n-        72: invokevirtual #62                 // Method java/nio/ByteBuffer.arrayOffset:()I\n+        72: invokevirtual #191                // Method java/nio/ByteBuffer.arrayOffset:()I\n         75: aload_1\n         76: iload_2\n         77: iload         7\n-        79: invokestatic  #16                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        79: invokestatic  #48                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         82: iload         7\n         84: istore        8\n         86: iload         8\n         88: iload_3\n         89: if_icmpge     105\n         92: aload_1\n         93: iload_2\n@@ -1255,15 +1255,15 @@\n         39: ifeq          72\n         42: aload_2\n         43: iload_3\n         44: iload         5\n         46: iadd\n         47: bipush        48\n         49: lload         6\n-        51: ldc2_w        #63                 // long 7l\n+        51: ldc2_w        #194                // long 7l\n         54: land\n         55: l2i\n         56: i2b\n         57: iadd\n         58: i2b\n         59: bastore\n         60: lload         6\n@@ -1272,22 +1272,22 @@\n         64: lstore        6\n         66: iinc          5, -1\n         69: goto          30\n         72: lload         6\n         74: lconst_0\n         75: lcmp\n         76: ifeq          99\n-        79: new           #3                  // class java/lang/IllegalArgumentException\n+        79: new           #9                  // class java/lang/IllegalArgumentException\n         82: dup\n         83: lload_0\n         84: lload_0\n-        85: invokestatic  #65                 // Method java/lang/Long.toOctalString:(J)Ljava/lang/String;\n+        85: invokestatic  #196                // Method java/lang/Long.toOctalString:(J)Ljava/lang/String;\n         88: iload         4\n-        90: invokedynamic #66,  0             // InvokeDynamic #3:makeConcatWithConstants:(JLjava/lang/String;I)Ljava/lang/String;\n-        95: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        90: invokedynamic #202,  0            // InvokeDynamic #3:makeConcatWithConstants:(JLjava/lang/String;I)Ljava/lang/String;\n+        95: invokespecial #15                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         98: athrow\n         99: iload         5\n        101: iflt          118\n        104: aload_2\n        105: iload_3\n        106: iload         5\n        108: iadd\n@@ -1334,15 +1334,15 @@\n          2: iconst_2\n          3: isub\n          4: istore        5\n          6: lload_0\n          7: aload_2\n          8: iload_3\n          9: iload         5\n-        11: invokestatic  #67                 // Method formatUnsignedOctalString:(J[BII)V\n+        11: invokestatic  #205                // Method formatUnsignedOctalString:(J[BII)V\n         14: aload_2\n         15: iload_3\n         16: iload         5\n         18: iinc          5, 1\n         21: iadd\n         22: bipush        32\n         24: bastore\n@@ -1372,15 +1372,15 @@\n          2: iconst_1\n          3: isub\n          4: istore        5\n          6: lload_0\n          7: aload_2\n          8: iload_3\n          9: iload         5\n-        11: invokestatic  #67                 // Method formatUnsignedOctalString:(J[BII)V\n+        11: invokestatic  #205                // Method formatUnsignedOctalString:(J[BII)V\n         14: aload_2\n         15: iload_3\n         16: iload         5\n         18: iadd\n         19: bipush        32\n         21: bastore\n         22: iload_3\n@@ -1397,17 +1397,17 @@\n     descriptor: (J[BII)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=6, locals=8, args_size=4\n          0: iload         4\n          2: bipush        8\n          4: if_icmpne     13\n-         7: ldc2_w        #68                 // long 2097151l\n+         7: ldc2_w        #209                // long 2097151l\n         10: goto          16\n-        13: ldc2_w        #70                 // long 8589934591l\n+        13: ldc2_w        #211                // long 8589934591l\n         16: lstore        5\n         18: lload_0\n         19: lconst_0\n         20: lcmp\n         21: ifge          28\n         24: iconst_1\n         25: goto          29\n@@ -1419,32 +1419,32 @@\n         37: lload         5\n         39: lcmp\n         40: ifgt          52\n         43: lload_0\n         44: aload_2\n         45: iload_3\n         46: iload         4\n-        48: invokestatic  #72                 // Method formatLongOctalBytes:(J[BII)I\n+        48: invokestatic  #213                // Method formatLongOctalBytes:(J[BII)I\n         51: ireturn\n         52: iload         4\n         54: bipush        9\n         56: if_icmpge     72\n         59: lload_0\n         60: aload_2\n         61: iload_3\n         62: iload         4\n         64: iload         7\n-        66: invokestatic  #73                 // Method formatLongBinary:(J[BIIZ)V\n+        66: invokestatic  #217                // Method formatLongBinary:(J[BIIZ)V\n         69: goto          82\n         72: lload_0\n         73: aload_2\n         74: iload_3\n         75: iload         4\n         77: iload         7\n-        79: invokestatic  #74                 // Method formatBigIntegerBinary:(J[BIIZ)V\n+        79: invokestatic  #221                // Method formatBigIntegerBinary:(J[BIIZ)V\n         82: aload_2\n         83: iload_3\n         84: iload         7\n         86: ifeq          95\n         89: sipush        255\n         92: goto          98\n         95: sipush        128\n@@ -1499,45 +1499,45 @@\n          6: imul\n          7: istore        6\n          9: lconst_1\n         10: iload         6\n         12: lshl\n         13: lstore        7\n         15: lload_0\n-        16: invokestatic  #75                 // Method java/lang/Math.abs:(J)J\n+        16: invokestatic  #224                // Method java/lang/Math.abs:(J)J\n         19: lstore        9\n         21: lload         9\n         23: lconst_0\n         24: lcmp\n         25: iflt          36\n         28: lload         9\n         30: lload         7\n         32: lcmp\n         33: iflt          52\n-        36: new           #3                  // class java/lang/IllegalArgumentException\n+        36: new           #9                  // class java/lang/IllegalArgumentException\n         39: dup\n         40: lload_0\n         41: iload         4\n-        43: invokedynamic #76,  0             // InvokeDynamic #4:makeConcatWithConstants:(JI)Ljava/lang/String;\n-        48: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        43: invokedynamic #228,  0            // InvokeDynamic #4:makeConcatWithConstants:(JI)Ljava/lang/String;\n+        48: invokespecial #15                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         51: athrow\n         52: iload         5\n         54: ifeq          83\n         57: lload         9\n         59: lload         7\n         61: lconst_1\n         62: lsub\n         63: lxor\n         64: lstore        9\n         66: lload         9\n         68: lconst_1\n         69: ladd\n         70: lstore        9\n         72: lload         9\n-        74: ldc2_w        #77                 // long 255l\n+        74: ldc2_w        #231                // long 255l\n         77: iload         6\n         79: lshl\n         80: lor\n         81: lstore        9\n         83: iload_3\n         84: iload         4\n         86: iadd\n@@ -1589,46 +1589,46 @@\n \n   private static void formatBigIntegerBinary(long, byte[], int, int, boolean);\n     descriptor: (J[BIIZ)V\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=12, args_size=5\n          0: lload_0\n-         1: invokestatic  #21                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+         1: invokestatic  #61                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n          4: astore        6\n          6: aload         6\n-         8: invokevirtual #79                 // Method java/math/BigInteger.toByteArray:()[B\n+         8: invokevirtual #233                // Method java/math/BigInteger.toByteArray:()[B\n         11: astore        7\n         13: aload         7\n         15: arraylength\n         16: istore        8\n         18: iload         8\n         20: iload         4\n         22: iconst_1\n         23: isub\n         24: if_icmple     43\n-        27: new           #3                  // class java/lang/IllegalArgumentException\n+        27: new           #9                  // class java/lang/IllegalArgumentException\n         30: dup\n         31: lload_0\n         32: iload         4\n-        34: invokedynamic #76,  0             // InvokeDynamic #4:makeConcatWithConstants:(JI)Ljava/lang/String;\n-        39: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        34: invokedynamic #228,  0            // InvokeDynamic #4:makeConcatWithConstants:(JI)Ljava/lang/String;\n+        39: invokespecial #15                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         42: athrow\n         43: iload_3\n         44: iload         4\n         46: iadd\n         47: iload         8\n         49: isub\n         50: istore        9\n         52: aload         7\n         54: iconst_0\n         55: aload_2\n         56: iload         9\n         58: iload         8\n-        60: invokestatic  #16                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        60: invokestatic  #48                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         63: iload         5\n         65: ifeq          74\n         68: sipush        255\n         71: goto          75\n         74: iconst_0\n         75: i2b\n         76: istore        10\n@@ -1683,15 +1683,15 @@\n          2: iconst_2\n          3: isub\n          4: istore        5\n          6: lload_0\n          7: aload_2\n          8: iload_3\n          9: iload         5\n-        11: invokestatic  #67                 // Method formatUnsignedOctalString:(J[BII)V\n+        11: invokestatic  #205                // Method formatUnsignedOctalString:(J[BII)V\n         14: aload_2\n         15: iload_3\n         16: iload         5\n         18: iinc          5, 1\n         21: iadd\n         22: iconst_0\n         23: bastore\n@@ -1762,15 +1762,15 @@\n     descriptor: ([B)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=9, args_size=1\n          0: aload_0\n          1: sipush        148\n          4: bipush        8\n-         6: invokestatic  #7                  // Method parseOctal:([BII)J\n+         6: invokestatic  #24                 // Method parseOctal:([BII)J\n          9: lstore_1\n         10: lconst_0\n         11: lstore_3\n         12: lconst_0\n         13: lstore        5\n         15: iconst_0\n         16: istore        7\n@@ -1847,295 +1847,295 @@\n     descriptor: (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;)Ljava/util/Map;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n-         3: ldc2_w        #19                 // long -1l\n-         6: invokestatic  #81                 // Method parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+         3: ldc2_w        #59                 // long -1l\n+         6: invokestatic  #236                // Method parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n          9: areturn\n       LineNumberTable:\n         line 693: 0\n     Exceptions:\n       throws java.io.IOException\n     Deprecated: true\n-    Signature: #191                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #404                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n     RuntimeVisibleAnnotations:\n-      0: #193()\n+      0: #406()\n         java.lang.Deprecated\n \n   protected static java.util.Map<java.lang.String, java.lang.String> parsePaxHeaders(java.io.InputStream, java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>, java.util.Map<java.lang.String, java.lang.String>, long) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=7, locals=20, args_size=4\n-         0: new           #82                 // class java/util/HashMap\n+         0: new           #240                // class java/util/HashMap\n          3: dup\n          4: aload_2\n-         5: invokespecial #83                 // Method java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n+         5: invokespecial #242                // Method java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n          8: astore        5\n         10: aconst_null\n         11: astore        6\n         13: iconst_0\n         14: istore        7\n         16: iconst_0\n         17: istore        9\n         19: iconst_0\n         20: istore        10\n         22: aload_0\n-        23: invokevirtual #84                 // Method java/io/InputStream.read:()I\n+        23: invokevirtual #245                // Method java/io/InputStream.read:()I\n         26: dup\n         27: istore        8\n         29: iconst_m1\n-        30: if_icmpeq     499\n+        30: if_icmpeq     508\n         33: iinc          10, 1\n         36: iinc          7, 1\n         39: iload         8\n         41: bipush        10\n         43: if_icmpne     49\n-        46: goto          499\n+        46: goto          508\n         49: iload         8\n         51: bipush        32\n-        53: if_icmpne     455\n-        56: new           #85                 // class java/io/ByteArrayOutputStream\n+        53: if_icmpne     463\n+        56: new           #250                // class java/io/ByteArrayOutputStream\n         59: dup\n-        60: invokespecial #86                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+        60: invokespecial #252                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n         63: astore        11\n         65: aload_0\n-        66: invokevirtual #84                 // Method java/io/InputStream.read:()I\n+        66: invokevirtual #245                // Method java/io/InputStream.read:()I\n         69: dup\n         70: istore        8\n         72: iconst_m1\n-        73: if_icmpeq     499\n+        73: if_icmpeq     508\n         76: iinc          10, 1\n         79: iinc          7, 1\n         82: iload         7\n-        84: iflt          499\n+        84: iflt          508\n         87: lload_3\n         88: lconst_0\n         89: lcmp\n         90: iflt          104\n         93: iload         7\n         95: i2l\n         96: lload_3\n         97: lcmp\n         98: iflt          104\n-       101: goto          499\n+       101: goto          508\n        104: iload         8\n        106: bipush        61\n-       108: if_icmpne     444\n+       108: if_icmpne     452\n        111: aload         11\n-       113: ldc           #88                 // String UTF-8\n-       115: invokevirtual #89                 // Method java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n+       113: ldc           #255                // String UTF-8\n+       115: invokevirtual #257                // Method java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n        118: astore        12\n        120: iload         9\n        122: iload         10\n        124: isub\n        125: istore        13\n        127: iload         13\n        129: iconst_1\n        130: if_icmpgt     146\n        133: aload         5\n        135: aload         12\n-       137: invokeinterface #90,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+       137: invokeinterface #261,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n        142: pop\n-       143: goto          499\n+       143: goto          508\n        146: lload_3\n        147: lconst_0\n        148: lcmp\n        149: iflt          179\n        152: iload         13\n        154: i2l\n        155: lload_3\n        156: iload         7\n        158: i2l\n        159: lsub\n        160: lcmp\n        161: ifle          179\n-       164: new           #34                 // class java/io/IOException\n+       164: new           #105                // class java/io/IOException\n        167: dup\n        168: iload         13\n-       170: invokedynamic #91,  0             // InvokeDynamic #5:makeConcatWithConstants:(I)Ljava/lang/String;\n-       175: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       170: invokedynamic #267,  0            // InvokeDynamic #5:makeConcatWithConstants:(I)Ljava/lang/String;\n+       175: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        178: athrow\n        179: aload_0\n        180: iload         13\n-       182: invokestatic  #92                 // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+       182: invokestatic  #268                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n        185: astore        14\n        187: aload         14\n        189: arraylength\n        190: istore        15\n        192: iload         15\n        194: iload         13\n        196: if_icmpeq     216\n-       199: new           #34                 // class java/io/IOException\n+       199: new           #105                // class java/io/IOException\n        202: dup\n        203: iload         13\n        205: iload         15\n-       207: invokedynamic #93,  0             // InvokeDynamic #6:makeConcatWithConstants:(II)Ljava/lang/String;\n-       212: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       207: invokedynamic #274,  0            // InvokeDynamic #6:makeConcatWithConstants:(II)Ljava/lang/String;\n+       212: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        215: athrow\n        216: iload         7\n        218: iload         13\n        220: iadd\n        221: istore        7\n        223: aload         14\n        225: iload         13\n        227: iconst_1\n        228: isub\n        229: baload\n        230: bipush        10\n-       232: if_icmpeq     245\n-       235: new           #34                 // class java/io/IOException\n+       232: if_icmpeq     246\n+       235: new           #105                // class java/io/IOException\n        238: dup\n-       239: ldc           #94                 // String Failed to read Paxheader.Value should end with a newline\n-       241: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       244: athrow\n-       245: new           #26                 // class java/lang/String\n-       248: dup\n-       249: aload         14\n-       251: iconst_0\n-       252: iload         13\n-       254: iconst_1\n-       255: isub\n-       256: getstatic     #95                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n-       259: invokespecial #96                 // Method java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n-       262: astore        16\n-       264: aload         5\n-       266: aload         12\n-       268: aload         16\n-       270: invokeinterface #97,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-       275: pop\n-       276: aload         12\n-       278: ldc           #98                 // String GNU.sparse.offset\n-       280: invokevirtual #99                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n-       283: ifeq          353\n-       286: aload         6\n-       288: ifnull        311\n-       291: aload_1\n-       292: new           #41                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       295: dup\n-       296: aload         6\n-       298: invokevirtual #100                // Method java/lang/Long.longValue:()J\n-       301: lconst_0\n-       302: invokespecial #42                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       305: invokeinterface #51,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       310: pop\n-       311: aload         16\n-       313: invokestatic  #101                // Method java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-       316: astore        6\n-       318: goto          333\n-       321: astore        17\n-       323: new           #34                 // class java/io/IOException\n-       326: dup\n-       327: ldc           #103                // String Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n-       329: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       332: athrow\n-       333: aload         6\n-       335: invokevirtual #100                // Method java/lang/Long.longValue:()J\n-       338: lconst_0\n-       339: lcmp\n-       340: ifge          353\n-       343: new           #34                 // class java/io/IOException\n-       346: dup\n-       347: ldc           #104                // String Failed to read Paxheader.GNU.sparse.offset contains negative value\n-       349: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       352: athrow\n-       353: aload         12\n-       355: ldc           #105                // String GNU.sparse.numbytes\n-       357: invokevirtual #99                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n-       360: ifeq          441\n-       363: aload         6\n-       365: ifnonnull     378\n-       368: new           #34                 // class java/io/IOException\n-       371: dup\n-       372: ldc           #106                // String Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-       374: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       377: athrow\n-       378: aload         16\n-       380: invokestatic  #107                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n-       383: lstore        17\n-       385: goto          400\n-       388: astore        19\n-       390: new           #34                 // class java/io/IOException\n-       393: dup\n-       394: ldc           #108                // String Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n-       396: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       399: athrow\n-       400: lload         17\n-       402: lconst_0\n-       403: lcmp\n-       404: ifge          417\n-       407: new           #34                 // class java/io/IOException\n-       410: dup\n-       411: ldc           #109                // String Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n-       413: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       416: athrow\n-       417: aload_1\n-       418: new           #41                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       421: dup\n-       422: aload         6\n-       424: invokevirtual #100                // Method java/lang/Long.longValue:()J\n-       427: lload         17\n-       429: invokespecial #42                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       432: invokeinterface #51,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       437: pop\n-       438: aconst_null\n-       439: astore        6\n-       441: goto          499\n-       444: aload         11\n-       446: iload         8\n-       448: i2b\n-       449: invokevirtual #110                // Method java/io/ByteArrayOutputStream.write:(I)V\n-       452: goto          65\n-       455: iload         8\n-       457: bipush        48\n-       459: if_icmplt     469\n-       462: iload         8\n-       464: bipush        57\n-       466: if_icmple     479\n-       469: new           #34                 // class java/io/IOException\n-       472: dup\n-       473: ldc           #111                // String Failed to read Paxheader. Encountered a non-number while reading length\n-       475: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       478: athrow\n-       479: iload         9\n-       481: bipush        10\n-       483: imul\n-       484: istore        9\n-       486: iload         9\n-       488: iload         8\n-       490: bipush        48\n-       492: isub\n-       493: iadd\n-       494: istore        9\n-       496: goto          22\n-       499: iload         8\n-       501: iconst_m1\n-       502: if_icmpne     508\n-       505: goto          511\n-       508: goto          16\n-       511: aload         6\n-       513: ifnull        536\n-       516: aload_1\n-       517: new           #41                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       520: dup\n-       521: aload         6\n-       523: invokevirtual #100                // Method java/lang/Long.longValue:()J\n-       526: lconst_0\n-       527: invokespecial #42                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       530: invokeinterface #51,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       535: pop\n-       536: aload         5\n-       538: areturn\n+       239: ldc_w         #275                // String Failed to read Paxheader.Value should end with a newline\n+       242: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       245: athrow\n+       246: new           #81                 // class java/lang/String\n+       249: dup\n+       250: aload         14\n+       252: iconst_0\n+       253: iload         13\n+       255: iconst_1\n+       256: isub\n+       257: getstatic     #277                // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n+       260: invokespecial #283                // Method java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n+       263: astore        16\n+       265: aload         5\n+       267: aload         12\n+       269: aload         16\n+       271: invokeinterface #286,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+       276: pop\n+       277: aload         12\n+       279: ldc_w         #290                // String GNU.sparse.offset\n+       282: invokevirtual #292                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+       285: ifeq          357\n+       288: aload         6\n+       290: ifnull        313\n+       293: aload_1\n+       294: new           #126                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       297: dup\n+       298: aload         6\n+       300: invokevirtual #295                // Method java/lang/Long.longValue:()J\n+       303: lconst_0\n+       304: invokespecial #128                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       307: invokeinterface #149,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       312: pop\n+       313: aload         16\n+       315: invokestatic  #296                // Method java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+       318: astore        6\n+       320: goto          336\n+       323: astore        17\n+       325: new           #105                // class java/io/IOException\n+       328: dup\n+       329: ldc_w         #301                // String Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n+       332: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       335: athrow\n+       336: aload         6\n+       338: invokevirtual #295                // Method java/lang/Long.longValue:()J\n+       341: lconst_0\n+       342: lcmp\n+       343: ifge          357\n+       346: new           #105                // class java/io/IOException\n+       349: dup\n+       350: ldc_w         #303                // String Failed to read Paxheader.GNU.sparse.offset contains negative value\n+       353: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       356: athrow\n+       357: aload         12\n+       359: ldc_w         #305                // String GNU.sparse.numbytes\n+       362: invokevirtual #292                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+       365: ifeq          449\n+       368: aload         6\n+       370: ifnonnull     384\n+       373: new           #105                // class java/io/IOException\n+       376: dup\n+       377: ldc_w         #307                // String Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+       380: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       383: athrow\n+       384: aload         16\n+       386: invokestatic  #309                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n+       389: lstore        17\n+       391: goto          407\n+       394: astore        19\n+       396: new           #105                // class java/io/IOException\n+       399: dup\n+       400: ldc_w         #313                // String Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n+       403: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       406: athrow\n+       407: lload         17\n+       409: lconst_0\n+       410: lcmp\n+       411: ifge          425\n+       414: new           #105                // class java/io/IOException\n+       417: dup\n+       418: ldc_w         #315                // String Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n+       421: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       424: athrow\n+       425: aload_1\n+       426: new           #126                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       429: dup\n+       430: aload         6\n+       432: invokevirtual #295                // Method java/lang/Long.longValue:()J\n+       435: lload         17\n+       437: invokespecial #128                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       440: invokeinterface #149,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       445: pop\n+       446: aconst_null\n+       447: astore        6\n+       449: goto          508\n+       452: aload         11\n+       454: iload         8\n+       456: i2b\n+       457: invokevirtual #317                // Method java/io/ByteArrayOutputStream.write:(I)V\n+       460: goto          65\n+       463: iload         8\n+       465: bipush        48\n+       467: if_icmplt     477\n+       470: iload         8\n+       472: bipush        57\n+       474: if_icmple     488\n+       477: new           #105                // class java/io/IOException\n+       480: dup\n+       481: ldc_w         #321                // String Failed to read Paxheader. Encountered a non-number while reading length\n+       484: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       487: athrow\n+       488: iload         9\n+       490: bipush        10\n+       492: imul\n+       493: istore        9\n+       495: iload         9\n+       497: iload         8\n+       499: bipush        48\n+       501: isub\n+       502: iadd\n+       503: istore        9\n+       505: goto          22\n+       508: iload         8\n+       510: iconst_m1\n+       511: if_icmpne     517\n+       514: goto          520\n+       517: goto          16\n+       520: aload         6\n+       522: ifnull        545\n+       525: aload_1\n+       526: new           #126                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       529: dup\n+       530: aload         6\n+       532: invokevirtual #295                // Method java/lang/Long.longValue:()J\n+       535: lconst_0\n+       536: invokespecial #128                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       539: invokeinterface #149,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       544: pop\n+       545: aload         5\n+       547: areturn\n       Exception table:\n          from    to  target type\n-           311   318   321   Class java/lang/NumberFormatException\n-           378   385   388   Class java/lang/NumberFormatException\n+           313   320   323   Class java/lang/NumberFormatException\n+           384   391   394   Class java/lang/NumberFormatException\n       LineNumberTable:\n         line 724: 0\n         line 725: 10\n         line 727: 13\n         line 730: 16\n         line 731: 19\n         line 732: 22\n@@ -2160,48 +2160,48 @@\n         line 757: 179\n         line 758: 187\n         line 759: 192\n         line 760: 199\n         line 766: 216\n         line 768: 223\n         line 769: 235\n-        line 772: 245\n-        line 774: 264\n-        line 777: 276\n-        line 778: 286\n-        line 780: 291\n-        line 783: 311\n-        line 787: 318\n-        line 784: 321\n-        line 785: 323\n-        line 788: 333\n-        line 789: 343\n-        line 795: 353\n-        line 796: 363\n-        line 797: 368\n-        line 802: 378\n-        line 806: 385\n-        line 803: 388\n-        line 804: 390\n-        line 807: 400\n-        line 808: 407\n-        line 811: 417\n-        line 812: 438\n-        line 815: 441\n-        line 817: 444\n-        line 823: 455\n-        line 824: 469\n-        line 827: 479\n-        line 828: 486\n-        line 830: 499\n-        line 831: 505\n-        line 833: 508\n-        line 834: 511\n-        line 836: 516\n-        line 838: 536\n+        line 772: 246\n+        line 774: 265\n+        line 777: 277\n+        line 778: 288\n+        line 780: 293\n+        line 783: 313\n+        line 787: 320\n+        line 784: 323\n+        line 785: 325\n+        line 788: 336\n+        line 789: 346\n+        line 795: 357\n+        line 796: 368\n+        line 797: 373\n+        line 802: 384\n+        line 806: 391\n+        line 803: 394\n+        line 804: 396\n+        line 807: 407\n+        line 808: 414\n+        line 811: 425\n+        line 812: 446\n+        line 815: 449\n+        line 817: 452\n+        line 823: 463\n+        line 824: 477\n+        line 827: 488\n+        line 828: 495\n+        line 830: 508\n+        line 831: 514\n+        line 833: 517\n+        line 834: 520\n+        line 836: 525\n+        line 838: 545\n       StackMapTable: number_of_entries = 26\n         frame_type = 254 /* append */\n           offset_delta = 16\n           locals = [ class java/util/Map, class java/lang/Long, int ]\n         frame_type = 254 /* append */\n           offset_delta = 5\n           locals = [ top, int, int ]\n@@ -2216,490 +2216,490 @@\n         frame_type = 253 /* append */\n           offset_delta = 41\n           locals = [ class java/lang/String, int ]\n         frame_type = 32 /* same */\n         frame_type = 253 /* append */\n           offset_delta = 36\n           locals = [ class \"[B\", int ]\n-        frame_type = 28 /* same */\n+        frame_type = 29 /* same */\n         frame_type = 252 /* append */\n-          offset_delta = 65\n+          offset_delta = 66\n           locals = [ class java/lang/String ]\n         frame_type = 73 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NumberFormatException ]\n-        frame_type = 11 /* same */\n-        frame_type = 19 /* same */\n-        frame_type = 24 /* same */\n+        frame_type = 12 /* same */\n+        frame_type = 20 /* same */\n+        frame_type = 26 /* same */\n         frame_type = 73 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NumberFormatException ]\n         frame_type = 252 /* append */\n-          offset_delta = 11\n+          offset_delta = 12\n           locals = [ long ]\n-        frame_type = 16 /* same */\n+        frame_type = 17 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 23\n           locals = [ class java/io/InputStream, class java/util/List, class java/util/Map, long, class java/util/Map, class java/lang/Long, int, int, int, int, class java/io/ByteArrayOutputStream, class java/lang/String, int ]\n           stack = []\n         frame_type = 249 /* chop */\n           offset_delta = 2\n         frame_type = 250 /* chop */\n           offset_delta = 10\n         frame_type = 13 /* same */\n-        frame_type = 9 /* same */\n+        frame_type = 10 /* same */\n         frame_type = 19 /* same */\n         frame_type = 248 /* chop */\n           offset_delta = 8\n         frame_type = 2 /* same */\n         frame_type = 24 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #198                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #407                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n \n   protected static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parsePAX01SparseHeaders(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/util/List;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n-         1: invokestatic  #112                // Method parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+         1: invokestatic  #323                // Method parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n          4: areturn\n          5: astore_1\n-         6: new           #36                 // class java/lang/RuntimeException\n+         6: new           #110                // class java/lang/RuntimeException\n          9: dup\n         10: aload_1\n-        11: invokevirtual #113                // Method java/io/IOException.getMessage:()Ljava/lang/String;\n+        11: invokevirtual #327                // Method java/io/IOException.getMessage:()Ljava/lang/String;\n         14: aload_1\n-        15: invokespecial #114                // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        15: invokespecial #331                // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n         18: athrow\n       Exception table:\n          from    to  target type\n              0     4     5   Class java/io/IOException\n       LineNumberTable:\n         line 855: 0\n         line 856: 5\n         line 857: 6\n       StackMapTable: number_of_entries = 1\n         frame_type = 69 /* same_locals_1_stack_item */\n           stack = [ class java/io/IOException ]\n     Deprecated: true\n-    Signature: #201                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #409                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   protected static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parseFromPAX01SparseHeaders(java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;)Ljava/util/List;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=7, locals=9, args_size=1\n-         0: new           #43                 // class java/util/ArrayList\n+         0: new           #131                // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #44                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #133                // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n-         9: ldc           #115                // String ,\n-        11: invokevirtual #116                // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n-        14: astore_2\n-        15: aload_2\n-        16: arraylength\n-        17: iconst_2\n-        18: irem\n-        19: iconst_1\n-        20: if_icmpne     33\n-        23: new           #34                 // class java/io/IOException\n-        26: dup\n-        27: ldc           #117                // String Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n-        29: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        32: athrow\n-        33: iconst_0\n-        34: istore_3\n-        35: iload_3\n-        36: aload_2\n-        37: arraylength\n-        38: if_icmpge     147\n-        41: aload_2\n-        42: iload_3\n-        43: aaload\n-        44: invokestatic  #107                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n-        47: lstore        4\n-        49: goto          64\n-        52: astore        6\n-        54: new           #34                 // class java/io/IOException\n-        57: dup\n-        58: ldc           #118                // String Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n-        60: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        63: athrow\n-        64: lload         4\n-        66: lconst_0\n-        67: lcmp\n-        68: ifge          81\n-        71: new           #34                 // class java/io/IOException\n-        74: dup\n-        75: ldc           #119                // String Corrupted TAR archive. Sparse struct offset contains negative value\n-        77: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        80: athrow\n-        81: aload_2\n-        82: iload_3\n-        83: iconst_1\n-        84: iadd\n-        85: aaload\n-        86: invokestatic  #107                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n-        89: lstore        6\n-        91: goto          106\n-        94: astore        8\n-        96: new           #34                 // class java/io/IOException\n-        99: dup\n-       100: ldc           #120                // String Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n-       102: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       105: athrow\n-       106: lload         6\n-       108: lconst_0\n-       109: lcmp\n-       110: ifge          123\n-       113: new           #34                 // class java/io/IOException\n-       116: dup\n-       117: ldc           #121                // String Corrupted TAR archive. Sparse struct numbytes contains negative value\n-       119: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       122: athrow\n-       123: aload_1\n-       124: new           #41                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       127: dup\n-       128: lload         4\n-       130: lload         6\n-       132: invokespecial #42                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       135: invokeinterface #51,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       140: pop\n-       141: iinc          3, 2\n-       144: goto          35\n-       147: aload_1\n-       148: invokestatic  #54                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-       151: areturn\n+         9: ldc_w         #332                // String ,\n+        12: invokevirtual #334                // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n+        15: astore_2\n+        16: aload_2\n+        17: arraylength\n+        18: iconst_2\n+        19: irem\n+        20: iconst_1\n+        21: if_icmpne     35\n+        24: new           #105                // class java/io/IOException\n+        27: dup\n+        28: ldc_w         #338                // String Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n+        31: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        34: athrow\n+        35: iconst_0\n+        36: istore_3\n+        37: iload_3\n+        38: aload_2\n+        39: arraylength\n+        40: if_icmpge     153\n+        43: aload_2\n+        44: iload_3\n+        45: aaload\n+        46: invokestatic  #309                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n+        49: lstore        4\n+        51: goto          67\n+        54: astore        6\n+        56: new           #105                // class java/io/IOException\n+        59: dup\n+        60: ldc_w         #340                // String Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n+        63: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        66: athrow\n+        67: lload         4\n+        69: lconst_0\n+        70: lcmp\n+        71: ifge          85\n+        74: new           #105                // class java/io/IOException\n+        77: dup\n+        78: ldc_w         #342                // String Corrupted TAR archive. Sparse struct offset contains negative value\n+        81: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        84: athrow\n+        85: aload_2\n+        86: iload_3\n+        87: iconst_1\n+        88: iadd\n+        89: aaload\n+        90: invokestatic  #309                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n+        93: lstore        6\n+        95: goto          111\n+        98: astore        8\n+       100: new           #105                // class java/io/IOException\n+       103: dup\n+       104: ldc_w         #344                // String Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n+       107: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       110: athrow\n+       111: lload         6\n+       113: lconst_0\n+       114: lcmp\n+       115: ifge          129\n+       118: new           #105                // class java/io/IOException\n+       121: dup\n+       122: ldc_w         #346                // String Corrupted TAR archive. Sparse struct numbytes contains negative value\n+       125: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       128: athrow\n+       129: aload_1\n+       130: new           #126                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       133: dup\n+       134: lload         4\n+       136: lload         6\n+       138: invokespecial #128                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       141: invokeinterface #149,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       146: pop\n+       147: iinc          3, 2\n+       150: goto          37\n+       153: aload_1\n+       154: invokestatic  #159                // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+       157: areturn\n       Exception table:\n          from    to  target type\n-            41    49    52   Class java/lang/NumberFormatException\n-            81    91    94   Class java/lang/NumberFormatException\n+            43    51    54   Class java/lang/NumberFormatException\n+            85    95    98   Class java/lang/NumberFormatException\n       LineNumberTable:\n         line 873: 0\n         line 874: 8\n-        line 875: 15\n-        line 876: 23\n-        line 879: 33\n-        line 882: 41\n-        line 886: 49\n-        line 883: 52\n-        line 884: 54\n-        line 887: 64\n-        line 888: 71\n-        line 893: 81\n-        line 897: 91\n-        line 894: 94\n-        line 895: 96\n-        line 898: 106\n-        line 899: 113\n-        line 902: 123\n-        line 879: 141\n-        line 905: 147\n+        line 875: 16\n+        line 876: 24\n+        line 879: 35\n+        line 882: 43\n+        line 886: 51\n+        line 883: 54\n+        line 884: 56\n+        line 887: 67\n+        line 888: 74\n+        line 893: 85\n+        line 897: 95\n+        line 894: 98\n+        line 895: 100\n+        line 898: 111\n+        line 899: 118\n+        line 902: 129\n+        line 879: 147\n+        line 905: 153\n       StackMapTable: number_of_entries = 9\n         frame_type = 253 /* append */\n-          offset_delta = 33\n+          offset_delta = 35\n           locals = [ class java/util/List, class \"[Ljava/lang/String;\" ]\n         frame_type = 252 /* append */\n           offset_delta = 1\n           locals = [ int ]\n         frame_type = 80 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NumberFormatException ]\n         frame_type = 252 /* append */\n-          offset_delta = 11\n+          offset_delta = 12\n           locals = [ long ]\n-        frame_type = 16 /* same */\n+        frame_type = 17 /* same */\n         frame_type = 76 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NumberFormatException ]\n         frame_type = 252 /* append */\n-          offset_delta = 11\n+          offset_delta = 12\n           locals = [ long ]\n-        frame_type = 16 /* same */\n+        frame_type = 17 /* same */\n         frame_type = 248 /* chop */\n           offset_delta = 23\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #201                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #409                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   protected static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parsePAX1XSparseHeaders(java.io.InputStream, int) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;I)Ljava/util/List;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=7, locals=12, args_size=2\n-         0: new           #43                 // class java/util/ArrayList\n+         0: new           #131                // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #44                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #133                // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_2\n          8: lconst_0\n          9: lstore_3\n         10: aload_0\n-        11: invokestatic  #122                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+        11: invokestatic  #348                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n         14: astore        5\n         16: aload         5\n         18: iconst_0\n         19: laload\n         20: lstore        6\n         22: lload         6\n         24: lconst_0\n         25: lcmp\n-        26: ifge          39\n-        29: new           #34                 // class java/io/IOException\n+        26: ifge          40\n+        29: new           #105                // class java/io/IOException\n         32: dup\n-        33: ldc           #123                // String Corrupted TAR archive. Negative value in sparse headers block\n-        35: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        38: athrow\n-        39: lload_3\n-        40: aload         5\n-        42: iconst_1\n-        43: laload\n-        44: ladd\n-        45: lstore_3\n-        46: lload         6\n-        48: dup2\n-        49: lconst_1\n-        50: lsub\n-        51: lstore        6\n-        53: lconst_0\n-        54: lcmp\n-        55: ifle          151\n-        58: aload_0\n-        59: invokestatic  #122                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-        62: astore        5\n-        64: aload         5\n-        66: iconst_0\n-        67: laload\n-        68: lstore        8\n-        70: lload         8\n-        72: lconst_0\n-        73: lcmp\n-        74: ifge          87\n-        77: new           #34                 // class java/io/IOException\n-        80: dup\n-        81: ldc           #124                // String Corrupted TAR archive. Sparse header block offset contains negative value\n-        83: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        86: athrow\n-        87: lload_3\n-        88: aload         5\n-        90: iconst_1\n-        91: laload\n-        92: ladd\n-        93: lstore_3\n-        94: aload_0\n-        95: invokestatic  #122                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-        98: astore        5\n-       100: aload         5\n-       102: iconst_0\n-       103: laload\n-       104: lstore        10\n-       106: lload         10\n-       108: lconst_0\n-       109: lcmp\n-       110: ifge          123\n-       113: new           #34                 // class java/io/IOException\n-       116: dup\n-       117: ldc           #125                // String Corrupted TAR archive. Sparse header block numbytes contains negative value\n-       119: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       122: athrow\n-       123: lload_3\n-       124: aload         5\n-       126: iconst_1\n-       127: laload\n-       128: ladd\n-       129: lstore_3\n-       130: aload_2\n-       131: new           #41                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       134: dup\n-       135: lload         8\n-       137: lload         10\n-       139: invokespecial #42                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       142: invokeinterface #51,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       147: pop\n-       148: goto          46\n-       151: iload_1\n-       152: i2l\n-       153: lload_3\n+        33: ldc_w         #352                // String Corrupted TAR archive. Negative value in sparse headers block\n+        36: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        39: athrow\n+        40: lload_3\n+        41: aload         5\n+        43: iconst_1\n+        44: laload\n+        45: ladd\n+        46: lstore_3\n+        47: lload         6\n+        49: dup2\n+        50: lconst_1\n+        51: lsub\n+        52: lstore        6\n+        54: lconst_0\n+        55: lcmp\n+        56: ifle          154\n+        59: aload_0\n+        60: invokestatic  #348                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+        63: astore        5\n+        65: aload         5\n+        67: iconst_0\n+        68: laload\n+        69: lstore        8\n+        71: lload         8\n+        73: lconst_0\n+        74: lcmp\n+        75: ifge          89\n+        78: new           #105                // class java/io/IOException\n+        81: dup\n+        82: ldc_w         #354                // String Corrupted TAR archive. Sparse header block offset contains negative value\n+        85: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        88: athrow\n+        89: lload_3\n+        90: aload         5\n+        92: iconst_1\n+        93: laload\n+        94: ladd\n+        95: lstore_3\n+        96: aload_0\n+        97: invokestatic  #348                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+       100: astore        5\n+       102: aload         5\n+       104: iconst_0\n+       105: laload\n+       106: lstore        10\n+       108: lload         10\n+       110: lconst_0\n+       111: lcmp\n+       112: ifge          126\n+       115: new           #105                // class java/io/IOException\n+       118: dup\n+       119: ldc_w         #356                // String Corrupted TAR archive. Sparse header block numbytes contains negative value\n+       122: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       125: athrow\n+       126: lload_3\n+       127: aload         5\n+       129: iconst_1\n+       130: laload\n+       131: ladd\n+       132: lstore_3\n+       133: aload_2\n+       134: new           #126                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       137: dup\n+       138: lload         8\n+       140: lload         10\n+       142: invokespecial #128                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       145: invokeinterface #149,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       150: pop\n+       151: goto          47\n        154: iload_1\n        155: i2l\n-       156: lrem\n-       157: lsub\n-       158: lstore        8\n-       160: aload_0\n-       161: lload         8\n-       163: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-       166: pop2\n-       167: aload_2\n-       168: areturn\n+       156: lload_3\n+       157: iload_1\n+       158: i2l\n+       159: lrem\n+       160: lsub\n+       161: lstore        8\n+       163: aload_0\n+       164: lload         8\n+       166: invokestatic  #358                // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+       169: pop2\n+       170: aload_2\n+       171: areturn\n       LineNumberTable:\n         line 921: 0\n         line 922: 8\n         line 924: 10\n         line 925: 16\n         line 926: 22\n         line 928: 29\n-        line 930: 39\n-        line 931: 46\n-        line 932: 58\n-        line 933: 64\n-        line 934: 70\n-        line 935: 77\n-        line 938: 87\n-        line 940: 94\n-        line 941: 100\n-        line 942: 106\n-        line 943: 113\n-        line 946: 123\n-        line 947: 130\n-        line 948: 148\n-        line 951: 151\n-        line 952: 160\n-        line 953: 167\n+        line 930: 40\n+        line 931: 47\n+        line 932: 59\n+        line 933: 65\n+        line 934: 71\n+        line 935: 78\n+        line 938: 89\n+        line 940: 96\n+        line 941: 102\n+        line 942: 108\n+        line 943: 115\n+        line 946: 126\n+        line 947: 133\n+        line 948: 151\n+        line 951: 154\n+        line 952: 163\n+        line 953: 170\n       StackMapTable: number_of_entries = 5\n         frame_type = 255 /* full_frame */\n-          offset_delta = 39\n+          offset_delta = 40\n           locals = [ class java/io/InputStream, int, class java/util/List, long, class \"[J\", long ]\n           stack = []\n         frame_type = 6 /* same */\n         frame_type = 252 /* append */\n-          offset_delta = 40\n+          offset_delta = 41\n           locals = [ long ]\n         frame_type = 252 /* append */\n-          offset_delta = 35\n+          offset_delta = 36\n           locals = [ long ]\n         frame_type = 249 /* chop */\n           offset_delta = 27\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #207                         // (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #416                         // (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   private static long[] readLineOfNumberForPax1X(java.io.InputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;)[J\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=6, args_size=1\n          0: lconst_0\n          1: lstore_2\n          2: lconst_0\n          3: lstore        4\n          5: aload_0\n-         6: invokevirtual #84                 // Method java/io/InputStream.read:()I\n+         6: invokevirtual #245                // Method java/io/InputStream.read:()I\n          9: dup\n         10: istore_1\n         11: bipush        10\n-        13: if_icmpeq     74\n+        13: if_icmpeq     76\n         16: lload         4\n         18: lconst_1\n         19: ladd\n         20: lstore        4\n         22: iload_1\n         23: iconst_m1\n-        24: if_icmpne     37\n-        27: new           #34                 // class java/io/IOException\n+        24: if_icmpne     38\n+        27: new           #105                // class java/io/IOException\n         30: dup\n-        31: ldc           #127                // String Unexpected EOF when reading parse information of 1.X PAX format\n-        33: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        36: athrow\n-        37: iload_1\n-        38: bipush        48\n-        40: if_icmplt     49\n-        43: iload_1\n-        44: bipush        57\n-        46: if_icmple     59\n-        49: new           #34                 // class java/io/IOException\n-        52: dup\n-        53: ldc           #128                // String Corrupted TAR archive. Non-numeric value in sparse headers block\n-        55: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        58: athrow\n-        59: lload_2\n-        60: ldc2_w        #129                // long 10l\n-        63: lmul\n-        64: iload_1\n-        65: bipush        48\n-        67: isub\n-        68: i2l\n-        69: ladd\n-        70: lstore_2\n-        71: goto          5\n-        74: lload         4\n-        76: lconst_1\n-        77: ladd\n-        78: lstore        4\n-        80: iconst_2\n-        81: newarray       long\n-        83: dup\n-        84: iconst_0\n-        85: lload_2\n-        86: lastore\n-        87: dup\n-        88: iconst_1\n-        89: lload         4\n-        91: lastore\n-        92: areturn\n+        31: ldc_w         #362                // String Unexpected EOF when reading parse information of 1.X PAX format\n+        34: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        37: athrow\n+        38: iload_1\n+        39: bipush        48\n+        41: if_icmplt     50\n+        44: iload_1\n+        45: bipush        57\n+        47: if_icmple     61\n+        50: new           #105                // class java/io/IOException\n+        53: dup\n+        54: ldc_w         #364                // String Corrupted TAR archive. Non-numeric value in sparse headers block\n+        57: invokespecial #143                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        60: athrow\n+        61: lload_2\n+        62: ldc2_w        #366                // long 10l\n+        65: lmul\n+        66: iload_1\n+        67: bipush        48\n+        69: isub\n+        70: i2l\n+        71: ladd\n+        72: lstore_2\n+        73: goto          5\n+        76: lload         4\n+        78: lconst_1\n+        79: ladd\n+        80: lstore        4\n+        82: iconst_2\n+        83: newarray       long\n+        85: dup\n+        86: iconst_0\n+        87: lload_2\n+        88: lastore\n+        89: dup\n+        90: iconst_1\n+        91: lload         4\n+        93: lastore\n+        94: areturn\n       LineNumberTable:\n         line 966: 0\n         line 967: 2\n         line 969: 5\n         line 970: 16\n         line 971: 22\n         line 972: 27\n-        line 974: 37\n-        line 975: 49\n-        line 977: 59\n-        line 979: 74\n-        line 981: 80\n+        line 974: 38\n+        line 975: 50\n+        line 977: 61\n+        line 979: 76\n+        line 981: 82\n       StackMapTable: number_of_entries = 5\n         frame_type = 254 /* append */\n           offset_delta = 5\n           locals = [ top, long, long ]\n         frame_type = 255 /* full_frame */\n-          offset_delta = 31\n+          offset_delta = 32\n           locals = [ class java/io/InputStream, int, long, long ]\n           stack = []\n         frame_type = 11 /* same */\n-        frame_type = 9 /* same */\n+        frame_type = 10 /* same */\n         frame_type = 14 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=2, locals=0, args_size=0\n          0: aconst_null\n-         1: invokestatic  #131                // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         4: putstatic     #32                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         7: new           #132                // class org/apache/commons/compress/archivers/tar/TarUtils$1\n+         1: invokestatic  #368                // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         4: putstatic     #97                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         7: new           #374                // class org/apache/commons/compress/archivers/tar/TarUtils$1\n         10: dup\n-        11: invokespecial #133                // Method org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n-        14: putstatic     #35                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        11: invokespecial #376                // Method org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n+        14: putstatic     #107                // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         17: return\n       LineNumberTable:\n         line 53: 0\n         line 54: 1\n         line 60: 7\n }\n SourceFile: \"TarUtils.java\"\n-InnerClasses:\n-  #132;                                   // class org/apache/commons/compress/archivers/tar/TarUtils$1\n-  public static final #442= #441 of #444; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #217 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  0: #421 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #218 Length \\u0001 must be at least 2\n-  1: #217 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #427 Length \\u0001 must be at least 2\n+  1: #421 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #225 At offset \\u0001, \\u0001 byte binary number exceeds maximum signed long value\n-  2: #217 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #429 At offset \\u0001, \\u0001 byte binary number exceeds maximum signed long value\n+  2: #421 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #243 Invalid byte \\u0001 at offset \\u0001 in \\'\\u0001\\' len=\\u0001\n-  3: #217 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #431 Invalid byte \\u0001 at offset \\u0001 in \\'\\u0001\\' len=\\u0001\n+  3: #421 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #277 \\u0001=\\u0001 will not fit in octal number buffer of length \\u0001\n-  4: #217 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #433 \\u0001=\\u0001 will not fit in octal number buffer of length \\u0001\n+  4: #421 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #284 Value \\u0001 is too large for \\u0001 byte field.\n-  5: #217 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #435 Value \\u0001 is too large for \\u0001 byte field.\n+  5: #421 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #297 Paxheader value size \\u0001 exceeds size of header record\n-  6: #217 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #437 Paxheader value size \\u0001 exceeds size of header record\n+  6: #421 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #300 Failed to read Paxheader. Expected \\u0001 bytes, read \\u0001\n+      #439 Failed to read Paxheader. Expected \\u0001 bytes, read \\u0001\n+InnerClasses:\n+  #374;                                   // class org/apache/commons/compress/archivers/tar/TarUtils$1\n+  public static final #446= #442 of #444; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
