{"diffoscope-json-version": 1, "source1": "first/ExecutionVisitor.class", "source2": "second/ExecutionVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -186,21 +186,20 @@\n     \n     private OperandStack stack() {\n         return this.frame.getStack();\n     }\n     \n     public void visitAALOAD(final AALOAD o) {\n         this.stack().pop();\n-        final Type t = this.stack().pop();\n-        if (t == Type.NULL) {\n+        final Type pop = this.stack().pop();\n+        if (pop == Type.NULL) {\n             this.stack().push((Type)Type.NULL);\n         }\n         else {\n-            final ArrayType at = (ArrayType)t;\n-            this.stack().push(at.getElementType());\n+            this.stack().push(((ArrayType)pop).getElementType());\n         }\n     }\n     \n     public void visitAASTORE(final AASTORE o) {\n         this.stack().pop(3);\n     }\n     \n@@ -227,21 +226,21 @@\n     }\n     \n     public void visitASTORE(final ASTORE o) {\n         this.locals().set(o.getIndex(), this.stack().pop());\n     }\n     \n     public void visitATHROW(final ATHROW o) {\n-        final Type t = this.stack().pop();\n+        final Type pop = this.stack().pop();\n         this.stack().clear();\n-        if (t.equals((Object)Type.NULL)) {\n+        if (pop.equals((Object)Type.NULL)) {\n             this.stack().push(Type.getType(\"Ljava/lang/NullPointerException;\"));\n         }\n         else {\n-            this.stack().push(t);\n+            this.stack().push(pop);\n         }\n     }\n     \n     public void visitBALOAD(final BALOAD o) {\n         this.stack().pop(2);\n         this.stack().push((Type)Type.INT);\n     }\n@@ -346,105 +345,105 @@\n     \n     public void visitDSUB(final DSUB o) {\n         this.stack().pop(2);\n         this.stack().push((Type)Type.DOUBLE);\n     }\n     \n     public void visitDUP(final DUP o) {\n-        final Type t = this.stack().pop();\n-        this.stack().push(t);\n-        this.stack().push(t);\n+        final Type pop = this.stack().pop();\n+        this.stack().push(pop);\n+        this.stack().push(pop);\n     }\n     \n     public void visitDUP_X1(final DUP_X1 o) {\n-        final Type w1 = this.stack().pop();\n-        final Type w2 = this.stack().pop();\n-        this.stack().push(w1);\n-        this.stack().push(w2);\n-        this.stack().push(w1);\n+        final Type pop = this.stack().pop();\n+        final Type pop2 = this.stack().pop();\n+        this.stack().push(pop);\n+        this.stack().push(pop2);\n+        this.stack().push(pop);\n     }\n     \n     public void visitDUP_X2(final DUP_X2 o) {\n-        final Type w1 = this.stack().pop();\n-        final Type w2 = this.stack().pop();\n-        if (w2.getSize() == 2) {\n-            this.stack().push(w1);\n+        final Type pop = this.stack().pop();\n+        final Type pop2 = this.stack().pop();\n+        if (pop2.getSize() == 2) {\n+            this.stack().push(pop);\n         }\n         else {\n-            final Type w3 = this.stack().pop();\n-            this.stack().push(w1);\n-            this.stack().push(w3);\n+            final Type pop3 = this.stack().pop();\n+            this.stack().push(pop);\n+            this.stack().push(pop3);\n         }\n-        this.stack().push(w2);\n-        this.stack().push(w1);\n+        this.stack().push(pop2);\n+        this.stack().push(pop);\n     }\n     \n     public void visitDUP2(final DUP2 o) {\n-        final Type t = this.stack().pop();\n-        if (t.getSize() == 2) {\n-            this.stack().push(t);\n+        final Type pop = this.stack().pop();\n+        if (pop.getSize() == 2) {\n+            this.stack().push(pop);\n         }\n         else {\n-            final Type u = this.stack().pop();\n-            this.stack().push(u);\n-            this.stack().push(t);\n-            this.stack().push(u);\n+            final Type pop2 = this.stack().pop();\n+            this.stack().push(pop2);\n+            this.stack().push(pop);\n+            this.stack().push(pop2);\n         }\n-        this.stack().push(t);\n+        this.stack().push(pop);\n     }\n     \n     public void visitDUP2_X1(final DUP2_X1 o) {\n-        final Type t = this.stack().pop();\n-        if (t.getSize() == 2) {\n-            final Type u = this.stack().pop();\n-            this.stack().push(t);\n-            this.stack().push(u);\n+        final Type pop = this.stack().pop();\n+        if (pop.getSize() == 2) {\n+            final Type pop2 = this.stack().pop();\n+            this.stack().push(pop);\n+            this.stack().push(pop2);\n         }\n         else {\n-            final Type u = this.stack().pop();\n-            final Type v = this.stack().pop();\n-            this.stack().push(u);\n-            this.stack().push(t);\n-            this.stack().push(v);\n-            this.stack().push(u);\n+            final Type pop3 = this.stack().pop();\n+            final Type pop4 = this.stack().pop();\n+            this.stack().push(pop3);\n+            this.stack().push(pop);\n+            this.stack().push(pop4);\n+            this.stack().push(pop3);\n         }\n-        this.stack().push(t);\n+        this.stack().push(pop);\n     }\n     \n     public void visitDUP2_X2(final DUP2_X2 o) {\n-        final Type t = this.stack().pop();\n-        if (t.getSize() == 2) {\n-            final Type u = this.stack().pop();\n-            if (u.getSize() == 2) {\n-                this.stack().push(t);\n+        final Type pop = this.stack().pop();\n+        if (pop.getSize() == 2) {\n+            final Type pop2 = this.stack().pop();\n+            if (pop2.getSize() == 2) {\n+                this.stack().push(pop);\n             }\n             else {\n-                final Type v = this.stack().pop();\n-                this.stack().push(t);\n-                this.stack().push(v);\n+                final Type pop3 = this.stack().pop();\n+                this.stack().push(pop);\n+                this.stack().push(pop3);\n             }\n-            this.stack().push(u);\n-            this.stack().push(t);\n+            this.stack().push(pop2);\n+            this.stack().push(pop);\n         }\n         else {\n-            final Type u = this.stack().pop();\n-            final Type v = this.stack().pop();\n-            if (v.getSize() == 2) {\n-                this.stack().push(u);\n-                this.stack().push(t);\n+            final Type pop4 = this.stack().pop();\n+            final Type pop5 = this.stack().pop();\n+            if (pop5.getSize() == 2) {\n+                this.stack().push(pop4);\n+                this.stack().push(pop);\n             }\n             else {\n-                final Type w = this.stack().pop();\n-                this.stack().push(u);\n-                this.stack().push(t);\n-                this.stack().push(w);\n+                final Type pop6 = this.stack().pop();\n+                this.stack().push(pop4);\n+                this.stack().push(pop);\n+                this.stack().push(pop6);\n             }\n-            this.stack().push(v);\n-            this.stack().push(u);\n-            this.stack().push(t);\n+            this.stack().push(pop5);\n+            this.stack().push(pop4);\n+            this.stack().push(pop);\n         }\n     }\n     \n     public void visitF2D(final F2D o) {\n         this.stack().pop();\n         this.stack().push((Type)Type.DOUBLE);\n     }\n@@ -522,27 +521,27 @@\n     public void visitFSUB(final FSUB o) {\n         this.stack().pop(2);\n         this.stack().push((Type)Type.FLOAT);\n     }\n     \n     public void visitGETFIELD(final GETFIELD o) {\n         this.stack().pop();\n-        Type t = o.getFieldType(this.cpg);\n-        if (t.equals((Object)Type.BOOLEAN) || t.equals((Object)Type.CHAR) || t.equals((Object)Type.BYTE) || t.equals((Object)Type.SHORT)) {\n-            t = (Type)Type.INT;\n+        Object o2 = o.getFieldType(this.cpg);\n+        if (((Type)o2).equals((Object)Type.BOOLEAN) || ((Type)o2).equals((Object)Type.CHAR) || ((Type)o2).equals((Object)Type.BYTE) || ((Type)o2).equals((Object)Type.SHORT)) {\n+            o2 = Type.INT;\n         }\n-        this.stack().push(t);\n+        this.stack().push((Type)o2);\n     }\n     \n     public void visitGETSTATIC(final GETSTATIC o) {\n-        Type t = o.getFieldType(this.cpg);\n-        if (t.equals((Object)Type.BOOLEAN) || t.equals((Object)Type.CHAR) || t.equals((Object)Type.BYTE) || t.equals((Object)Type.SHORT)) {\n-            t = (Type)Type.INT;\n+        Object o2 = o.getFieldType(this.cpg);\n+        if (((Type)o2).equals((Object)Type.BOOLEAN) || ((Type)o2).equals((Object)Type.CHAR) || ((Type)o2).equals((Object)Type.BYTE) || ((Type)o2).equals((Object)Type.SHORT)) {\n+            o2 = Type.INT;\n         }\n-        this.stack().push(t);\n+        this.stack().push((Type)o2);\n     }\n     \n     public void visitGOTO(final GOTO o) {\n     }\n     \n     public void visitGOTO_W(final GOTO_W o) {\n     }\n@@ -690,71 +689,71 @@\n         this.stack().pop();\n         this.stack().push((Type)Type.INT);\n     }\n     \n     private void visitInvokedInternals(final InvokeInstruction o) {\n         this.stack().pop(o.getArgumentTypes(this.cpg).length);\n         if (o.getReturnType(this.cpg) != Type.VOID) {\n-            Type t = o.getReturnType(this.cpg);\n-            if (t.equals((Object)Type.BOOLEAN) || t.equals((Object)Type.CHAR) || t.equals((Object)Type.BYTE) || t.equals((Object)Type.SHORT)) {\n-                t = (Type)Type.INT;\n+            Object o2 = o.getReturnType(this.cpg);\n+            if (((Type)o2).equals((Object)Type.BOOLEAN) || ((Type)o2).equals((Object)Type.CHAR) || ((Type)o2).equals((Object)Type.BYTE) || ((Type)o2).equals((Object)Type.SHORT)) {\n+                o2 = Type.INT;\n             }\n-            this.stack().push(t);\n+            this.stack().push((Type)o2);\n         }\n     }\n     \n     public void visitINVOKEDYNAMIC(final INVOKEDYNAMIC o) {\n         this.visitInvokedInternals((InvokeInstruction)o);\n     }\n     \n     public void visitINVOKEINTERFACE(final INVOKEINTERFACE o) {\n         this.stack().pop();\n         this.stack().pop(o.getArgumentTypes(this.cpg).length);\n         if (o.getReturnType(this.cpg) != Type.VOID) {\n-            Type t = o.getReturnType(this.cpg);\n-            if (t.equals((Object)Type.BOOLEAN) || t.equals((Object)Type.CHAR) || t.equals((Object)Type.BYTE) || t.equals((Object)Type.SHORT)) {\n-                t = (Type)Type.INT;\n+            Object o2 = o.getReturnType(this.cpg);\n+            if (((Type)o2).equals((Object)Type.BOOLEAN) || ((Type)o2).equals((Object)Type.CHAR) || ((Type)o2).equals((Object)Type.BYTE) || ((Type)o2).equals((Object)Type.SHORT)) {\n+                o2 = Type.INT;\n             }\n-            this.stack().push(t);\n+            this.stack().push((Type)o2);\n         }\n     }\n     \n     public void visitINVOKESPECIAL(final INVOKESPECIAL o) {\n         if (o.getMethodName(this.cpg).equals(\"<init>\")) {\n-            final UninitializedObjectType t = (UninitializedObjectType)this.stack().peek(o.getArgumentTypes(this.cpg).length);\n-            if (t == Frame.getThis()) {\n+            final UninitializedObjectType uninitializedObjectType = (UninitializedObjectType)this.stack().peek(o.getArgumentTypes(this.cpg).length);\n+            if (uninitializedObjectType == Frame.getThis()) {\n                 Frame.setThis((UninitializedObjectType)null);\n             }\n-            this.stack().initializeObject(t);\n-            this.locals().initializeObject(t);\n+            this.stack().initializeObject(uninitializedObjectType);\n+            this.locals().initializeObject(uninitializedObjectType);\n         }\n         this.stack().pop();\n         this.stack().pop(o.getArgumentTypes(this.cpg).length);\n         if (o.getReturnType(this.cpg) != Type.VOID) {\n-            Type t2 = o.getReturnType(this.cpg);\n-            if (t2.equals((Object)Type.BOOLEAN) || t2.equals((Object)Type.CHAR) || t2.equals((Object)Type.BYTE) || t2.equals((Object)Type.SHORT)) {\n-                t2 = (Type)Type.INT;\n+            Object o2 = o.getReturnType(this.cpg);\n+            if (((Type)o2).equals((Object)Type.BOOLEAN) || ((Type)o2).equals((Object)Type.CHAR) || ((Type)o2).equals((Object)Type.BYTE) || ((Type)o2).equals((Object)Type.SHORT)) {\n+                o2 = Type.INT;\n             }\n-            this.stack().push(t2);\n+            this.stack().push((Type)o2);\n         }\n     }\n     \n     public void visitINVOKESTATIC(final INVOKESTATIC o) {\n         this.visitInvokedInternals((InvokeInstruction)o);\n     }\n     \n     public void visitINVOKEVIRTUAL(final INVOKEVIRTUAL o) {\n         this.stack().pop();\n         this.stack().pop(o.getArgumentTypes(this.cpg).length);\n         if (o.getReturnType(this.cpg) != Type.VOID) {\n-            Type t = o.getReturnType(this.cpg);\n-            if (t.equals((Object)Type.BOOLEAN) || t.equals((Object)Type.CHAR) || t.equals((Object)Type.BYTE) || t.equals((Object)Type.SHORT)) {\n-                t = (Type)Type.INT;\n+            Object o2 = o.getReturnType(this.cpg);\n+            if (((Type)o2).equals((Object)Type.BOOLEAN) || ((Type)o2).equals((Object)Type.CHAR) || ((Type)o2).equals((Object)Type.BYTE) || ((Type)o2).equals((Object)Type.SHORT)) {\n+                o2 = Type.INT;\n             }\n-            this.stack().push(t);\n+            this.stack().push((Type)o2);\n         }\n     }\n     \n     public void visitIOR(final IOR o) {\n         this.stack().pop(2);\n         this.stack().push((Type)Type.INT);\n     }\n@@ -845,51 +844,51 @@\n     }\n     \n     public void visitLCONST(final LCONST o) {\n         this.stack().push((Type)Type.LONG);\n     }\n     \n     public void visitLDC(final LDC o) {\n-        final Constant c = this.cpg.getConstant(o.getIndex());\n-        if (c instanceof ConstantInteger) {\n+        final Constant constant = this.cpg.getConstant(o.getIndex());\n+        if (constant instanceof ConstantInteger) {\n             this.stack().push((Type)Type.INT);\n         }\n-        if (c instanceof ConstantFloat) {\n+        if (constant instanceof ConstantFloat) {\n             this.stack().push((Type)Type.FLOAT);\n         }\n-        if (c instanceof ConstantString) {\n+        if (constant instanceof ConstantString) {\n             this.stack().push((Type)Type.STRING);\n         }\n-        if (c instanceof ConstantClass) {\n+        if (constant instanceof ConstantClass) {\n             this.stack().push((Type)Type.CLASS);\n         }\n     }\n     \n     public void visitLDC_W(final LDC_W o) {\n-        final Constant c = this.cpg.getConstant(o.getIndex());\n-        if (c instanceof ConstantInteger) {\n+        final Constant constant = this.cpg.getConstant(o.getIndex());\n+        if (constant instanceof ConstantInteger) {\n             this.stack().push((Type)Type.INT);\n         }\n-        if (c instanceof ConstantFloat) {\n+        if (constant instanceof ConstantFloat) {\n             this.stack().push((Type)Type.FLOAT);\n         }\n-        if (c instanceof ConstantString) {\n+        if (constant instanceof ConstantString) {\n             this.stack().push((Type)Type.STRING);\n         }\n-        if (c instanceof ConstantClass) {\n+        if (constant instanceof ConstantClass) {\n             this.stack().push((Type)Type.CLASS);\n         }\n     }\n     \n     public void visitLDC2_W(final LDC2_W o) {\n-        final Constant c = this.cpg.getConstant(o.getIndex());\n-        if (c instanceof ConstantLong) {\n+        final Constant constant = this.cpg.getConstant(o.getIndex());\n+        if (constant instanceof ConstantLong) {\n             this.stack().push((Type)Type.LONG);\n         }\n-        if (c instanceof ConstantDouble) {\n+        if (constant instanceof ConstantDouble) {\n             this.stack().push((Type)Type.DOUBLE);\n         }\n     }\n     \n     public void visitLDIV(final LDIV o) {\n         this.stack().pop(2);\n         this.stack().push((Type)Type.LONG);\n@@ -983,16 +982,15 @@\n     }\n     \n     public void visitPOP(final POP o) {\n         this.stack().pop();\n     }\n     \n     public void visitPOP2(final POP2 o) {\n-        final Type t = this.stack().pop();\n-        if (t.getSize() == 1) {\n+        if (this.stack().pop().getSize() == 1) {\n             this.stack().pop();\n         }\n     }\n     \n     public void visitPUTFIELD(final PUTFIELD o) {\n         this.stack().pop(2);\n     }\n@@ -1017,17 +1015,17 @@\n     }\n     \n     public void visitSIPUSH(final SIPUSH o) {\n         this.stack().push((Type)Type.INT);\n     }\n     \n     public void visitSWAP(final SWAP o) {\n-        final Type t = this.stack().pop();\n-        final Type u = this.stack().pop();\n-        this.stack().push(t);\n-        this.stack().push(u);\n+        final Type pop = this.stack().pop();\n+        final Type pop2 = this.stack().pop();\n+        this.stack().push(pop);\n+        this.stack().push(pop2);\n     }\n     \n     public void visitTABLESWITCH(final TABLESWITCH o) {\n         this.stack().pop();\n     }\n }\n"}]}
