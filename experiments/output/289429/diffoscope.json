{"diffoscope-json-version": 1, "source1": "first/CSVParser.class", "source2": "second/CSVParser.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,159 +1,159 @@\n-  SHA-256 checksum bf3f76599ca5de387f63a3c070498b61e468e36bb094798e5aa1fb2361663d0a\n+  SHA-256 checksum 5605bb68bc9bb9c3cd796ceea0f8c0df75de6b13d7e3a6768cf11c202ef54350\n   Compiled from \"CSVParser.java\"\n public final class org.apache.commons.csv.CSVParser extends java.lang.Object implements java.lang.Iterable<org.apache.commons.csv.CSVRecord>, java.io.Closeable\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #14                         // org/apache/commons/csv/CSVParser\n   super_class: #80                        // java/lang/Object\n   interfaces: 2, fields: 10, methods: 29, attributes: 3\n Constant pool:\n-    #1 = String             #228          // file\n-    #2 = Methodref          #229.#230     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-    #3 = Methodref          #231.#232     // java/io/File.toPath:()Ljava/nio/file/Path;\n-    #4 = Methodref          #14.#233      // org/apache/commons/csv/CSVParser.parse:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-    #5 = String             #234          // inputStream\n+    #1 = String             #224          // file\n+    #2 = Methodref          #225.#226     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+    #3 = Methodref          #227.#228     // java/io/File.toPath:()Ljava/nio/file/Path;\n+    #4 = Methodref          #14.#229      // org/apache/commons/csv/CSVParser.parse:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+    #5 = String             #230          // inputStream\n     #6 = String             #149          // format\n-    #7 = Class              #235          // java/io/InputStreamReader\n-    #8 = Methodref          #7.#236       // java/io/InputStreamReader.\"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n-    #9 = Methodref          #14.#237      // org/apache/commons/csv/CSVParser.parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-   #10 = String             #238          // path\n-   #11 = Class              #239          // java/nio/file/OpenOption\n-   #12 = Methodref          #240.#241     // java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-   #13 = Methodref          #14.#242      // org/apache/commons/csv/CSVParser.parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-   #14 = Class              #243          // org/apache/commons/csv/CSVParser\n-   #15 = Methodref          #14.#244      // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-   #16 = String             #245          // string\n-   #17 = Class              #246          // java/io/StringReader\n-   #18 = Methodref          #17.#247      // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n-   #19 = String             #248          // url\n-   #20 = String             #249          // charset\n-   #21 = Methodref          #250.#251     // java/net/URL.openStream:()Ljava/io/InputStream;\n-   #22 = Methodref          #14.#252      // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n-   #23 = Methodref          #80.#253      // java/lang/Object.\"<init>\":()V\n-   #24 = Class              #254          // java/util/ArrayList\n-   #25 = Methodref          #24.#253      // java/util/ArrayList.\"<init>\":()V\n-   #26 = Fieldref           #14.#255      // org/apache/commons/csv/CSVParser.recordList:Ljava/util/List;\n-   #27 = Class              #256          // org/apache/commons/csv/Token\n-   #28 = Methodref          #27.#253      // org/apache/commons/csv/Token.\"<init>\":()V\n-   #29 = Fieldref           #14.#257      // org/apache/commons/csv/CSVParser.reusableToken:Lorg/apache/commons/csv/Token;\n-   #30 = String             #258          // reader\n-   #31 = Methodref          #259.#260     // org/apache/commons/csv/CSVFormat.copy:()Lorg/apache/commons/csv/CSVFormat;\n-   #32 = Fieldref           #14.#261      // org/apache/commons/csv/CSVParser.format:Lorg/apache/commons/csv/CSVFormat;\n-   #33 = Class              #262          // org/apache/commons/csv/Lexer\n-   #34 = Class              #263          // org/apache/commons/csv/ExtendedBufferedReader\n-   #35 = Methodref          #34.#264      // org/apache/commons/csv/ExtendedBufferedReader.\"<init>\":(Ljava/io/Reader;)V\n-   #36 = Methodref          #33.#265      // org/apache/commons/csv/Lexer.\"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-   #37 = Fieldref           #14.#266      // org/apache/commons/csv/CSVParser.lexer:Lorg/apache/commons/csv/Lexer;\n-   #38 = Class              #267          // org/apache/commons/csv/CSVParser$CSVRecordIterator\n-   #39 = Methodref          #38.#268      // org/apache/commons/csv/CSVParser$CSVRecordIterator.\"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n-   #40 = Fieldref           #14.#269      // org/apache/commons/csv/CSVParser.csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n-   #41 = Methodref          #14.#270      // org/apache/commons/csv/CSVParser.createHeaders:()Lorg/apache/commons/csv/CSVParser$Headers;\n-   #42 = Fieldref           #14.#271      // org/apache/commons/csv/CSVParser.headers:Lorg/apache/commons/csv/CSVParser$Headers;\n-   #43 = Fieldref           #14.#272      // org/apache/commons/csv/CSVParser.characterOffset:J\n-   #44 = Fieldref           #14.#273      // org/apache/commons/csv/CSVParser.recordNumber:J\n-   #45 = Fieldref           #27.#274      // org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n-   #46 = Methodref          #69.#275      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #47 = Methodref          #259.#276     // org/apache/commons/csv/CSVFormat.trim:(Ljava/lang/String;)Ljava/lang/String;\n-   #48 = Methodref          #277.#278     // java/lang/String.isEmpty:()Z\n-   #49 = Methodref          #259.#279     // org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z\n-   #50 = Methodref          #14.#280      // org/apache/commons/csv/CSVParser.handleNull:(Ljava/lang/String;)Ljava/lang/String;\n-   #51 = InterfaceMethodref #97.#281      // java/util/List.add:(Ljava/lang/Object;)Z\n-   #52 = Methodref          #33.#282      // org/apache/commons/csv/Lexer.close:()V\n-   #53 = Methodref          #259.#283     // org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z\n-   #54 = Class              #284          // java/util/TreeMap\n-   #55 = Fieldref           #277.#285     // java/lang/String.CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n-   #56 = Methodref          #54.#286      // java/util/TreeMap.\"<init>\":(Ljava/util/Comparator;)V\n-   #57 = Class              #287          // java/util/LinkedHashMap\n-   #58 = Methodref          #57.#253      // java/util/LinkedHashMap.\"<init>\":()V\n-   #59 = Methodref          #259.#288     // org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n-   #60 = Methodref          #14.#289      // org/apache/commons/csv/CSVParser.createEmptyHeaderMap:()Ljava/util/Map;\n-   #61 = Methodref          #14.#290      // org/apache/commons/csv/CSVParser.nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n-   #62 = Methodref          #131.#291     // org/apache/commons/csv/CSVRecord.values:()[Ljava/lang/String;\n-   #63 = Methodref          #131.#292     // org/apache/commons/csv/CSVRecord.getComment:()Ljava/lang/String;\n-   #64 = Fieldref           #14.#293      // org/apache/commons/csv/CSVParser.headerComment:Ljava/lang/String;\n-   #65 = Methodref          #259.#294     // org/apache/commons/csv/CSVFormat.getSkipHeaderRecord:()Z\n-   #66 = Methodref          #259.#295     // org/apache/commons/csv/CSVFormat.isBlank:(Ljava/lang/String;)Z\n-   #67 = Methodref          #259.#296     // org/apache/commons/csv/CSVFormat.getAllowMissingColumnNames:()Z\n-   #68 = Class              #297          // java/lang/IllegalArgumentException\n-   #69 = Class              #298          // java/lang/StringBuilder\n-   #70 = Methodref          #69.#253      // java/lang/StringBuilder.\"<init>\":()V\n-   #71 = String             #299          // A header name is missing in\n-   #72 = Methodref          #69.#300      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #73 = Methodref          #301.#302     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n-   #74 = Methodref          #68.#247      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #75 = InterfaceMethodref #303.#304     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-   #76 = Methodref          #259.#305     // org/apache/commons/csv/CSVFormat.getDuplicateHeaderMode:()Lorg/apache/commons/csv/DuplicateHeaderMode;\n-   #77 = Fieldref           #306.#307     // org/apache/commons/csv/DuplicateHeaderMode.ALLOW_ALL:Lorg/apache/commons/csv/DuplicateHeaderMode;\n-   #78 = Fieldref           #306.#308     // org/apache/commons/csv/DuplicateHeaderMode.ALLOW_EMPTY:Lorg/apache/commons/csv/DuplicateHeaderMode;\n-   #79 = String             #309          // The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.Builder.setDuplicateHeaderMode().\n-   #80 = Class              #310          // java/lang/Object\n-   #81 = Methodref          #277.#311     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-   #82 = Methodref          #312.#313     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #83 = InterfaceMethodref #303.#314     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #84 = Methodref          #24.#315      // java/util/ArrayList.\"<init>\":(I)V\n-   #85 = Methodref          #316.#317     // java/util/Collections.emptyList:()Ljava/util/List;\n-   #86 = Methodref          #316.#318     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-   #87 = Class              #319          // org/apache/commons/csv/CSVParser$Headers\n-   #88 = Methodref          #87.#320      // org/apache/commons/csv/CSVParser$Headers.\"<init>\":(Ljava/util/Map;Ljava/util/List;)V\n-   #89 = Methodref          #33.#321      // org/apache/commons/csv/Lexer.getCurrentLineNumber:()J\n-   #90 = Methodref          #33.#322      // org/apache/commons/csv/Lexer.getFirstEol:()Ljava/lang/String;\n-   #91 = Fieldref           #87.#323      // org/apache/commons/csv/CSVParser$Headers.headerMap:Ljava/util/Map;\n-   #92 = InterfaceMethodref #303.#324     // java/util/Map.putAll:(Ljava/util/Map;)V\n-   #93 = Fieldref           #87.#325      // org/apache/commons/csv/CSVParser$Headers.headerNames:Ljava/util/List;\n-   #94 = Methodref          #14.#326      // org/apache/commons/csv/CSVParser.stream:()Ljava/util/stream/Stream;\n-   #95 = Methodref          #327.#328     // java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;\n-   #96 = InterfaceMethodref #329.#330     // java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;\n-   #97 = Class              #331          // java/util/List\n-   #98 = Fieldref           #14.#332      // org/apache/commons/csv/CSVParser.trailerComment:Ljava/lang/String;\n-   #99 = Fieldref           #27.#333      // org/apache/commons/csv/Token.isQuoted:Z\n-  #100 = Methodref          #259.#334     // org/apache/commons/csv/CSVFormat.getNullString:()Ljava/lang/String;\n-  #101 = Methodref          #14.#335      // org/apache/commons/csv/CSVParser.isStrictQuoteMode:()Z\n-  #102 = Methodref          #277.#336     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-  #103 = Methodref          #33.#337      // org/apache/commons/csv/Lexer.isClosed:()Z\n-  #104 = Methodref          #259.#338     // org/apache/commons/csv/CSVFormat.getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n-  #105 = Fieldref           #339.#340     // org/apache/commons/csv/QuoteMode.ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n-  #106 = Fieldref           #339.#341     // org/apache/commons/csv/QuoteMode.NON_NUMERIC:Lorg/apache/commons/csv/QuoteMode;\n-  #107 = InterfaceMethodref #97.#342      // java/util/List.clear:()V\n-  #108 = Methodref          #33.#343      // org/apache/commons/csv/Lexer.getCharacterPosition:()J\n-  #109 = Methodref          #27.#344      // org/apache/commons/csv/Token.reset:()V\n-  #110 = Methodref          #33.#345      // org/apache/commons/csv/Lexer.nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #111 = Fieldref           #142.#346     // org/apache/commons/csv/CSVParser$1.$SwitchMap$org$apache$commons$csv$Token$Type:[I\n-  #112 = Fieldref           #27.#347      // org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n-  #113 = Methodref          #348.#349     // org/apache/commons/csv/Token$Type.ordinal:()I\n-  #114 = Methodref          #14.#350      // org/apache/commons/csv/CSVParser.addRecordValue:(Z)V\n-  #115 = Fieldref           #27.#351      // org/apache/commons/csv/Token.isReady:Z\n-  #116 = Class              #352          // java/io/IOException\n-  #117 = String             #353          // (line\n-  #118 = Methodref          #14.#321      // org/apache/commons/csv/CSVParser.getCurrentLineNumber:()J\n-  #119 = Methodref          #69.#354      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-  #120 = String             #355          // ) invalid parse sequence\n-  #121 = Methodref          #116.#247     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-  #122 = Class              #356          // org/apache/commons/csv/Constants\n-  #123 = Methodref          #69.#357      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-  #124 = Methodref          #69.#358      // java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n-  #125 = Fieldref           #348.#359     // org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n-  #126 = Class              #360          // java/lang/IllegalStateException\n-  #127 = String             #361          // Unexpected Token type:\n-  #128 = Methodref          #69.#362      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #129 = Methodref          #126.#247     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-  #130 = InterfaceMethodref #97.#278      // java/util/List.isEmpty:()Z\n-  #131 = Class              #363          // org/apache/commons/csv/CSVRecord\n-  #132 = Fieldref           #122.#364     // org/apache/commons/csv/Constants.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-  #133 = InterfaceMethodref #97.#365      // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #134 = Class              #366          // \"[Ljava/lang/String;\"\n-  #135 = Methodref          #131.#367     // org/apache/commons/csv/CSVRecord.\"<init>\":(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n-  #136 = Methodref          #14.#368      // org/apache/commons/csv/CSVParser.iterator:()Ljava/util/Iterator;\n-  #137 = Class              #369          // java/util/Spliterator\n-  #138 = Methodref          #370.#371     // java/util/Spliterators.spliteratorUnknownSize:(Ljava/util/Iterator;I)Ljava/util/Spliterator;\n-  #139 = Methodref          #372.#373     // java/util/stream/StreamSupport.stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n-  #140 = Class              #374          // java/lang/Iterable\n-  #141 = Class              #375          // java/io/Closeable\n-  #142 = Class              #376          // org/apache/commons/csv/CSVParser$1\n+    #7 = Class              #231          // java/io/InputStreamReader\n+    #8 = Methodref          #7.#232       // java/io/InputStreamReader.\"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n+    #9 = Methodref          #14.#233      // org/apache/commons/csv/CSVParser.parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+   #10 = String             #234          // path\n+   #11 = Class              #235          // java/nio/file/OpenOption\n+   #12 = Methodref          #236.#237     // java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+   #13 = Methodref          #14.#238      // org/apache/commons/csv/CSVParser.parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+   #14 = Class              #239          // org/apache/commons/csv/CSVParser\n+   #15 = Methodref          #14.#240      // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+   #16 = String             #241          // string\n+   #17 = Class              #242          // java/io/StringReader\n+   #18 = Methodref          #17.#243      // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n+   #19 = String             #244          // url\n+   #20 = String             #245          // charset\n+   #21 = Methodref          #246.#247     // java/net/URL.openStream:()Ljava/io/InputStream;\n+   #22 = Methodref          #14.#248      // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n+   #23 = Methodref          #80.#249      // java/lang/Object.\"<init>\":()V\n+   #24 = Class              #250          // java/util/ArrayList\n+   #25 = Methodref          #24.#249      // java/util/ArrayList.\"<init>\":()V\n+   #26 = Fieldref           #14.#251      // org/apache/commons/csv/CSVParser.recordList:Ljava/util/List;\n+   #27 = Class              #252          // org/apache/commons/csv/Token\n+   #28 = Methodref          #27.#249      // org/apache/commons/csv/Token.\"<init>\":()V\n+   #29 = Fieldref           #14.#253      // org/apache/commons/csv/CSVParser.reusableToken:Lorg/apache/commons/csv/Token;\n+   #30 = String             #254          // reader\n+   #31 = Methodref          #255.#256     // org/apache/commons/csv/CSVFormat.copy:()Lorg/apache/commons/csv/CSVFormat;\n+   #32 = Fieldref           #14.#257      // org/apache/commons/csv/CSVParser.format:Lorg/apache/commons/csv/CSVFormat;\n+   #33 = Class              #258          // org/apache/commons/csv/Lexer\n+   #34 = Class              #259          // org/apache/commons/csv/ExtendedBufferedReader\n+   #35 = Methodref          #34.#260      // org/apache/commons/csv/ExtendedBufferedReader.\"<init>\":(Ljava/io/Reader;)V\n+   #36 = Methodref          #33.#261      // org/apache/commons/csv/Lexer.\"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+   #37 = Fieldref           #14.#262      // org/apache/commons/csv/CSVParser.lexer:Lorg/apache/commons/csv/Lexer;\n+   #38 = Class              #263          // org/apache/commons/csv/CSVParser$CSVRecordIterator\n+   #39 = Methodref          #38.#264      // org/apache/commons/csv/CSVParser$CSVRecordIterator.\"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n+   #40 = Fieldref           #14.#265      // org/apache/commons/csv/CSVParser.csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n+   #41 = Methodref          #14.#266      // org/apache/commons/csv/CSVParser.createHeaders:()Lorg/apache/commons/csv/CSVParser$Headers;\n+   #42 = Fieldref           #14.#267      // org/apache/commons/csv/CSVParser.headers:Lorg/apache/commons/csv/CSVParser$Headers;\n+   #43 = Fieldref           #14.#268      // org/apache/commons/csv/CSVParser.characterOffset:J\n+   #44 = Fieldref           #14.#269      // org/apache/commons/csv/CSVParser.recordNumber:J\n+   #45 = Fieldref           #27.#270      // org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+   #46 = Methodref          #69.#271      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #47 = Methodref          #255.#272     // org/apache/commons/csv/CSVFormat.trim:(Ljava/lang/String;)Ljava/lang/String;\n+   #48 = Methodref          #182.#273     // java/lang/String.isEmpty:()Z\n+   #49 = Methodref          #255.#274     // org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z\n+   #50 = Methodref          #14.#275      // org/apache/commons/csv/CSVParser.handleNull:(Ljava/lang/String;)Ljava/lang/String;\n+   #51 = InterfaceMethodref #97.#276      // java/util/List.add:(Ljava/lang/Object;)Z\n+   #52 = Methodref          #33.#277      // org/apache/commons/csv/Lexer.close:()V\n+   #53 = Methodref          #255.#278     // org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z\n+   #54 = Class              #279          // java/util/TreeMap\n+   #55 = Fieldref           #182.#280     // java/lang/String.CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n+   #56 = Methodref          #54.#281      // java/util/TreeMap.\"<init>\":(Ljava/util/Comparator;)V\n+   #57 = Class              #282          // java/util/LinkedHashMap\n+   #58 = Methodref          #57.#249      // java/util/LinkedHashMap.\"<init>\":()V\n+   #59 = Methodref          #255.#283     // org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n+   #60 = Methodref          #14.#284      // org/apache/commons/csv/CSVParser.createEmptyHeaderMap:()Ljava/util/Map;\n+   #61 = Methodref          #14.#285      // org/apache/commons/csv/CSVParser.nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n+   #62 = Methodref          #131.#286     // org/apache/commons/csv/CSVRecord.values:()[Ljava/lang/String;\n+   #63 = Methodref          #131.#287     // org/apache/commons/csv/CSVRecord.getComment:()Ljava/lang/String;\n+   #64 = Fieldref           #14.#288      // org/apache/commons/csv/CSVParser.headerComment:Ljava/lang/String;\n+   #65 = Methodref          #255.#289     // org/apache/commons/csv/CSVFormat.getSkipHeaderRecord:()Z\n+   #66 = Methodref          #255.#290     // org/apache/commons/csv/CSVFormat.isBlank:(Ljava/lang/String;)Z\n+   #67 = Methodref          #255.#291     // org/apache/commons/csv/CSVFormat.getAllowMissingColumnNames:()Z\n+   #68 = Class              #292          // java/lang/IllegalArgumentException\n+   #69 = Class              #293          // java/lang/StringBuilder\n+   #70 = Methodref          #69.#249      // java/lang/StringBuilder.\"<init>\":()V\n+   #71 = String             #294          // A header name is missing in\n+   #72 = Methodref          #69.#295      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #73 = Methodref          #296.#297     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n+   #74 = Methodref          #68.#243      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #75 = InterfaceMethodref #187.#298     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+   #76 = Methodref          #255.#299     // org/apache/commons/csv/CSVFormat.getDuplicateHeaderMode:()Lorg/apache/commons/csv/DuplicateHeaderMode;\n+   #77 = Fieldref           #191.#300     // org/apache/commons/csv/DuplicateHeaderMode.ALLOW_ALL:Lorg/apache/commons/csv/DuplicateHeaderMode;\n+   #78 = Fieldref           #191.#301     // org/apache/commons/csv/DuplicateHeaderMode.ALLOW_EMPTY:Lorg/apache/commons/csv/DuplicateHeaderMode;\n+   #79 = String             #302          // The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.Builder.setDuplicateHeaderMode().\n+   #80 = Class              #303          // java/lang/Object\n+   #81 = Methodref          #182.#304     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+   #82 = Methodref          #305.#306     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #83 = InterfaceMethodref #187.#307     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #84 = Methodref          #24.#308      // java/util/ArrayList.\"<init>\":(I)V\n+   #85 = Methodref          #309.#310     // java/util/Collections.emptyList:()Ljava/util/List;\n+   #86 = Methodref          #309.#311     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+   #87 = Class              #312          // org/apache/commons/csv/CSVParser$Headers\n+   #88 = Methodref          #87.#313      // org/apache/commons/csv/CSVParser$Headers.\"<init>\":(Ljava/util/Map;Ljava/util/List;)V\n+   #89 = Methodref          #33.#314      // org/apache/commons/csv/Lexer.getCurrentLineNumber:()J\n+   #90 = Methodref          #33.#315      // org/apache/commons/csv/Lexer.getFirstEol:()Ljava/lang/String;\n+   #91 = Fieldref           #87.#316      // org/apache/commons/csv/CSVParser$Headers.headerMap:Ljava/util/Map;\n+   #92 = InterfaceMethodref #187.#317     // java/util/Map.putAll:(Ljava/util/Map;)V\n+   #93 = Fieldref           #87.#318      // org/apache/commons/csv/CSVParser$Headers.headerNames:Ljava/util/List;\n+   #94 = Methodref          #14.#319      // org/apache/commons/csv/CSVParser.stream:()Ljava/util/stream/Stream;\n+   #95 = Methodref          #320.#321     // java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;\n+   #96 = InterfaceMethodref #322.#323     // java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;\n+   #97 = Class              #324          // java/util/List\n+   #98 = Fieldref           #14.#325      // org/apache/commons/csv/CSVParser.trailerComment:Ljava/lang/String;\n+   #99 = Fieldref           #27.#326      // org/apache/commons/csv/Token.isQuoted:Z\n+  #100 = Methodref          #255.#327     // org/apache/commons/csv/CSVFormat.getNullString:()Ljava/lang/String;\n+  #101 = Methodref          #14.#328      // org/apache/commons/csv/CSVParser.isStrictQuoteMode:()Z\n+  #102 = Methodref          #182.#329     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+  #103 = Methodref          #33.#330      // org/apache/commons/csv/Lexer.isClosed:()Z\n+  #104 = Methodref          #255.#331     // org/apache/commons/csv/CSVFormat.getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n+  #105 = Fieldref           #332.#333     // org/apache/commons/csv/QuoteMode.ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n+  #106 = Fieldref           #332.#334     // org/apache/commons/csv/QuoteMode.NON_NUMERIC:Lorg/apache/commons/csv/QuoteMode;\n+  #107 = InterfaceMethodref #97.#335      // java/util/List.clear:()V\n+  #108 = Methodref          #33.#336      // org/apache/commons/csv/Lexer.getCharacterPosition:()J\n+  #109 = Methodref          #27.#337      // org/apache/commons/csv/Token.reset:()V\n+  #110 = Methodref          #33.#338      // org/apache/commons/csv/Lexer.nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #111 = Fieldref           #142.#339     // org/apache/commons/csv/CSVParser$1.$SwitchMap$org$apache$commons$csv$Token$Type:[I\n+  #112 = Fieldref           #27.#340      // org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+  #113 = Methodref          #341.#342     // org/apache/commons/csv/Token$Type.ordinal:()I\n+  #114 = Methodref          #14.#343      // org/apache/commons/csv/CSVParser.addRecordValue:(Z)V\n+  #115 = Fieldref           #27.#344      // org/apache/commons/csv/Token.isReady:Z\n+  #116 = Class              #345          // java/io/IOException\n+  #117 = String             #346          // (line\n+  #118 = Methodref          #14.#314      // org/apache/commons/csv/CSVParser.getCurrentLineNumber:()J\n+  #119 = Methodref          #69.#347      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+  #120 = String             #348          // ) invalid parse sequence\n+  #121 = Methodref          #116.#243     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #122 = Class              #349          // org/apache/commons/csv/Constants\n+  #123 = Methodref          #69.#350      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+  #124 = Methodref          #69.#351      // java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n+  #125 = Fieldref           #341.#352     // org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n+  #126 = Class              #353          // java/lang/IllegalStateException\n+  #127 = String             #354          // Unexpected Token type:\n+  #128 = Methodref          #69.#355      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #129 = Methodref          #126.#243     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+  #130 = InterfaceMethodref #97.#273      // java/util/List.isEmpty:()Z\n+  #131 = Class              #356          // org/apache/commons/csv/CSVRecord\n+  #132 = Fieldref           #122.#357     // org/apache/commons/csv/Constants.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+  #133 = InterfaceMethodref #97.#358      // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #134 = Class              #359          // \"[Ljava/lang/String;\"\n+  #135 = Methodref          #131.#360     // org/apache/commons/csv/CSVRecord.\"<init>\":(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n+  #136 = Methodref          #14.#361      // org/apache/commons/csv/CSVParser.iterator:()Ljava/util/Iterator;\n+  #137 = Class              #362          // java/util/Spliterator\n+  #138 = Methodref          #363.#364     // java/util/Spliterators.spliteratorUnknownSize:(Ljava/util/Iterator;I)Ljava/util/Spliterator;\n+  #139 = Methodref          #365.#366     // java/util/stream/StreamSupport.stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n+  #140 = Class              #367          // java/lang/Iterable\n+  #141 = Class              #368          // java/io/Closeable\n+  #142 = Class              #369          // org/apache/commons/csv/CSVParser$1\n   #143 = Utf8               InnerClasses\n   #144 = Utf8               Headers\n   #145 = Utf8               CSVRecordIterator\n   #146 = Utf8               headerComment\n   #147 = Utf8               Ljava/lang/String;\n   #148 = Utf8               trailerComment\n   #149 = Utf8               format\n@@ -185,324 +185,317 @@\n   #175 = Utf8               (Ljava/net/URL;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n   #176 = Utf8               <init>\n   #177 = Utf8               (Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n   #178 = Utf8               (Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n   #179 = Utf8               addRecordValue\n   #180 = Utf8               (Z)V\n   #181 = Utf8               StackMapTable\n-  #182 = Class              #377          // java/lang/String\n+  #182 = Class              #370          // java/lang/String\n   #183 = Utf8               close\n   #184 = Utf8               ()V\n   #185 = Utf8               createEmptyHeaderMap\n   #186 = Utf8               ()Ljava/util/Map;\n-  #187 = Class              #378          // java/util/Map\n+  #187 = Class              #371          // java/util/Map\n   #188 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n   #189 = Utf8               createHeaders\n   #190 = Utf8               ()Lorg/apache/commons/csv/CSVParser$Headers;\n-  #191 = Class              #243          // org/apache/commons/csv/CSVParser\n-  #192 = Class              #331          // java/util/List\n-  #193 = Class              #379          // org/apache/commons/csv/DuplicateHeaderMode\n-  #194 = Utf8               getCurrentLineNumber\n-  #195 = Utf8               ()J\n-  #196 = Utf8               getFirstEndOfLine\n-  #197 = Utf8               ()Ljava/lang/String;\n-  #198 = Utf8               getHeaderComment\n-  #199 = Utf8               getHeaderMap\n-  #200 = Utf8               getHeaderMapRaw\n-  #201 = Utf8               getHeaderNames\n-  #202 = Utf8               ()Ljava/util/List;\n-  #203 = Utf8               ()Ljava/util/List<Ljava/lang/String;>;\n-  #204 = Utf8               getRecordNumber\n-  #205 = Utf8               getRecords\n-  #206 = Utf8               ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n-  #207 = Utf8               getTrailerComment\n-  #208 = Utf8               handleNull\n-  #209 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #210 = Utf8               hasHeaderComment\n-  #211 = Utf8               ()Z\n-  #212 = Utf8               hasTrailerComment\n-  #213 = Utf8               isClosed\n-  #214 = Utf8               isStrictQuoteMode\n-  #215 = Utf8               iterator\n-  #216 = Utf8               ()Ljava/util/Iterator;\n-  #217 = Utf8               ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n-  #218 = Utf8               nextRecord\n-  #219 = Utf8               ()Lorg/apache/commons/csv/CSVRecord;\n-  #220 = Class              #363          // org/apache/commons/csv/CSVRecord\n-  #221 = Class              #298          // java/lang/StringBuilder\n-  #222 = Utf8               stream\n-  #223 = Utf8               ()Ljava/util/stream/Stream;\n-  #224 = Utf8               ()Ljava/util/stream/Stream<Lorg/apache/commons/csv/CSVRecord;>;\n-  #225 = Utf8               Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n-  #226 = Utf8               SourceFile\n-  #227 = Utf8               CSVParser.java\n-  #228 = Utf8               file\n-  #229 = Class              #380          // java/util/Objects\n-  #230 = NameAndType        #381:#382     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #231 = Class              #383          // java/io/File\n-  #232 = NameAndType        #384:#385     // toPath:()Ljava/nio/file/Path;\n-  #233 = NameAndType        #166:#172     // parse:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-  #234 = Utf8               inputStream\n-  #235 = Utf8               java/io/InputStreamReader\n-  #236 = NameAndType        #176:#386     // \"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n-  #237 = NameAndType        #166:#173     // parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-  #238 = Utf8               path\n-  #239 = Utf8               java/nio/file/OpenOption\n-  #240 = Class              #387          // java/nio/file/Files\n-  #241 = NameAndType        #388:#389     // newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #242 = NameAndType        #166:#171     // parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-  #243 = Utf8               org/apache/commons/csv/CSVParser\n-  #244 = NameAndType        #176:#177     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-  #245 = Utf8               string\n-  #246 = Utf8               java/io/StringReader\n-  #247 = NameAndType        #176:#390     // \"<init>\":(Ljava/lang/String;)V\n-  #248 = Utf8               url\n-  #249 = Utf8               charset\n-  #250 = Class              #391          // java/net/URL\n-  #251 = NameAndType        #392:#393     // openStream:()Ljava/io/InputStream;\n-  #252 = NameAndType        #176:#178     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n-  #253 = NameAndType        #176:#184     // \"<init>\":()V\n-  #254 = Utf8               java/util/ArrayList\n-  #255 = NameAndType        #157:#158     // recordList:Ljava/util/List;\n-  #256 = Utf8               org/apache/commons/csv/Token\n-  #257 = NameAndType        #164:#165     // reusableToken:Lorg/apache/commons/csv/Token;\n-  #258 = Utf8               reader\n-  #259 = Class              #394          // org/apache/commons/csv/CSVFormat\n-  #260 = NameAndType        #395:#396     // copy:()Lorg/apache/commons/csv/CSVFormat;\n-  #261 = NameAndType        #149:#150     // format:Lorg/apache/commons/csv/CSVFormat;\n-  #262 = Utf8               org/apache/commons/csv/Lexer\n-  #263 = Utf8               org/apache/commons/csv/ExtendedBufferedReader\n-  #264 = NameAndType        #176:#397     // \"<init>\":(Ljava/io/Reader;)V\n-  #265 = NameAndType        #176:#398     // \"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-  #266 = NameAndType        #153:#154     // lexer:Lorg/apache/commons/csv/Lexer;\n-  #267 = Utf8               org/apache/commons/csv/CSVParser$CSVRecordIterator\n-  #268 = NameAndType        #176:#399     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n-  #269 = NameAndType        #155:#156     // csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n-  #270 = NameAndType        #189:#190     // createHeaders:()Lorg/apache/commons/csv/CSVParser$Headers;\n-  #271 = NameAndType        #151:#152     // headers:Lorg/apache/commons/csv/CSVParser$Headers;\n-  #272 = NameAndType        #163:#162     // characterOffset:J\n-  #273 = NameAndType        #161:#162     // recordNumber:J\n-  #274 = NameAndType        #400:#401     // content:Ljava/lang/StringBuilder;\n-  #275 = NameAndType        #402:#197     // toString:()Ljava/lang/String;\n-  #276 = NameAndType        #403:#209     // trim:(Ljava/lang/String;)Ljava/lang/String;\n-  #277 = Class              #377          // java/lang/String\n-  #278 = NameAndType        #404:#211     // isEmpty:()Z\n-  #279 = NameAndType        #405:#211     // getTrailingDelimiter:()Z\n-  #280 = NameAndType        #208:#209     // handleNull:(Ljava/lang/String;)Ljava/lang/String;\n-  #281 = NameAndType        #406:#407     // add:(Ljava/lang/Object;)Z\n-  #282 = NameAndType        #183:#184     // close:()V\n-  #283 = NameAndType        #408:#211     // getIgnoreHeaderCase:()Z\n-  #284 = Utf8               java/util/TreeMap\n-  #285 = NameAndType        #409:#410     // CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n-  #286 = NameAndType        #176:#411     // \"<init>\":(Ljava/util/Comparator;)V\n-  #287 = Utf8               java/util/LinkedHashMap\n-  #288 = NameAndType        #412:#413     // getHeader:()[Ljava/lang/String;\n-  #289 = NameAndType        #185:#186     // createEmptyHeaderMap:()Ljava/util/Map;\n-  #290 = NameAndType        #218:#219     // nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n-  #291 = NameAndType        #414:#413     // values:()[Ljava/lang/String;\n-  #292 = NameAndType        #415:#197     // getComment:()Ljava/lang/String;\n-  #293 = NameAndType        #146:#147     // headerComment:Ljava/lang/String;\n-  #294 = NameAndType        #416:#211     // getSkipHeaderRecord:()Z\n-  #295 = NameAndType        #417:#418     // isBlank:(Ljava/lang/String;)Z\n-  #296 = NameAndType        #419:#211     // getAllowMissingColumnNames:()Z\n-  #297 = Utf8               java/lang/IllegalArgumentException\n-  #298 = Utf8               java/lang/StringBuilder\n-  #299 = Utf8               A header name is missing in\n-  #300 = NameAndType        #420:#421     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #301 = Class              #422          // java/util/Arrays\n-  #302 = NameAndType        #402:#423     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n-  #303 = Class              #378          // java/util/Map\n-  #304 = NameAndType        #424:#407     // containsKey:(Ljava/lang/Object;)Z\n-  #305 = NameAndType        #425:#426     // getDuplicateHeaderMode:()Lorg/apache/commons/csv/DuplicateHeaderMode;\n-  #306 = Class              #379          // org/apache/commons/csv/DuplicateHeaderMode\n-  #307 = NameAndType        #427:#428     // ALLOW_ALL:Lorg/apache/commons/csv/DuplicateHeaderMode;\n-  #308 = NameAndType        #429:#428     // ALLOW_EMPTY:Lorg/apache/commons/csv/DuplicateHeaderMode;\n-  #309 = Utf8               The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.Builder.setDuplicateHeaderMode().\n-  #310 = Utf8               java/lang/Object\n-  #311 = NameAndType        #149:#430     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #312 = Class              #431          // java/lang/Integer\n-  #313 = NameAndType        #432:#433     // valueOf:(I)Ljava/lang/Integer;\n-  #314 = NameAndType        #434:#435     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #315 = NameAndType        #176:#436     // \"<init>\":(I)V\n-  #316 = Class              #437          // java/util/Collections\n-  #317 = NameAndType        #438:#202     // emptyList:()Ljava/util/List;\n-  #318 = NameAndType        #439:#440     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-  #319 = Utf8               org/apache/commons/csv/CSVParser$Headers\n-  #320 = NameAndType        #176:#441     // \"<init>\":(Ljava/util/Map;Ljava/util/List;)V\n-  #321 = NameAndType        #194:#195     // getCurrentLineNumber:()J\n-  #322 = NameAndType        #442:#197     // getFirstEol:()Ljava/lang/String;\n-  #323 = NameAndType        #443:#444     // headerMap:Ljava/util/Map;\n-  #324 = NameAndType        #445:#446     // putAll:(Ljava/util/Map;)V\n-  #325 = NameAndType        #447:#158     // headerNames:Ljava/util/List;\n-  #326 = NameAndType        #222:#223     // stream:()Ljava/util/stream/Stream;\n-  #327 = Class              #448          // java/util/stream/Collectors\n-  #328 = NameAndType        #449:#450     // toList:()Ljava/util/stream/Collector;\n-  #329 = Class              #451          // java/util/stream/Stream\n-  #330 = NameAndType        #452:#453     // collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;\n-  #331 = Utf8               java/util/List\n-  #332 = NameAndType        #148:#147     // trailerComment:Ljava/lang/String;\n-  #333 = NameAndType        #454:#455     // isQuoted:Z\n-  #334 = NameAndType        #456:#197     // getNullString:()Ljava/lang/String;\n-  #335 = NameAndType        #214:#211     // isStrictQuoteMode:()Z\n-  #336 = NameAndType        #457:#407     // equals:(Ljava/lang/Object;)Z\n-  #337 = NameAndType        #213:#211     // isClosed:()Z\n-  #338 = NameAndType        #458:#459     // getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n-  #339 = Class              #460          // org/apache/commons/csv/QuoteMode\n-  #340 = NameAndType        #461:#462     // ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n-  #341 = NameAndType        #463:#462     // NON_NUMERIC:Lorg/apache/commons/csv/QuoteMode;\n-  #342 = NameAndType        #464:#184     // clear:()V\n-  #343 = NameAndType        #465:#195     // getCharacterPosition:()J\n-  #344 = NameAndType        #466:#184     // reset:()V\n-  #345 = NameAndType        #467:#468     // nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #346 = NameAndType        #469:#470     // $SwitchMap$org$apache$commons$csv$Token$Type:[I\n-  #347 = NameAndType        #471:#473     // type:Lorg/apache/commons/csv/Token$Type;\n-  #348 = Class              #474          // org/apache/commons/csv/Token$Type\n-  #349 = NameAndType        #475:#476     // ordinal:()I\n-  #350 = NameAndType        #179:#180     // addRecordValue:(Z)V\n-  #351 = NameAndType        #477:#455     // isReady:Z\n-  #352 = Utf8               java/io/IOException\n-  #353 = Utf8               (line\n-  #354 = NameAndType        #420:#478     // append:(J)Ljava/lang/StringBuilder;\n-  #355 = Utf8               ) invalid parse sequence\n-  #356 = Utf8               org/apache/commons/csv/Constants\n-  #357 = NameAndType        #420:#479     // append:(C)Ljava/lang/StringBuilder;\n-  #358 = NameAndType        #420:#480     // append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n-  #359 = NameAndType        #481:#473     // TOKEN:Lorg/apache/commons/csv/Token$Type;\n-  #360 = Utf8               java/lang/IllegalStateException\n-  #361 = Utf8               Unexpected Token type:\n-  #362 = NameAndType        #420:#482     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #363 = Utf8               org/apache/commons/csv/CSVRecord\n-  #364 = NameAndType        #483:#366     // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-  #365 = NameAndType        #484:#485     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #366 = Utf8               [Ljava/lang/String;\n-  #367 = NameAndType        #176:#486     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n-  #368 = NameAndType        #215:#216     // iterator:()Ljava/util/Iterator;\n-  #369 = Utf8               java/util/Spliterator\n-  #370 = Class              #487          // java/util/Spliterators\n-  #371 = NameAndType        #488:#489     // spliteratorUnknownSize:(Ljava/util/Iterator;I)Ljava/util/Spliterator;\n-  #372 = Class              #490          // java/util/stream/StreamSupport\n-  #373 = NameAndType        #222:#491     // stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n-  #374 = Utf8               java/lang/Iterable\n-  #375 = Utf8               java/io/Closeable\n-  #376 = Utf8               org/apache/commons/csv/CSVParser$1\n-  #377 = Utf8               java/lang/String\n-  #378 = Utf8               java/util/Map\n-  #379 = Utf8               org/apache/commons/csv/DuplicateHeaderMode\n-  #380 = Utf8               java/util/Objects\n-  #381 = Utf8               requireNonNull\n-  #382 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #383 = Utf8               java/io/File\n-  #384 = Utf8               toPath\n-  #385 = Utf8               ()Ljava/nio/file/Path;\n-  #386 = Utf8               (Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n-  #387 = Utf8               java/nio/file/Files\n-  #388 = Utf8               newInputStream\n-  #389 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #390 = Utf8               (Ljava/lang/String;)V\n-  #391 = Utf8               java/net/URL\n-  #392 = Utf8               openStream\n-  #393 = Utf8               ()Ljava/io/InputStream;\n-  #394 = Utf8               org/apache/commons/csv/CSVFormat\n-  #395 = Utf8               copy\n-  #396 = Utf8               ()Lorg/apache/commons/csv/CSVFormat;\n-  #397 = Utf8               (Ljava/io/Reader;)V\n-  #398 = Utf8               (Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-  #399 = Utf8               (Lorg/apache/commons/csv/CSVParser;)V\n-  #400 = Utf8               content\n-  #401 = Utf8               Ljava/lang/StringBuilder;\n-  #402 = Utf8               toString\n-  #403 = Utf8               trim\n-  #404 = Utf8               isEmpty\n-  #405 = Utf8               getTrailingDelimiter\n-  #406 = Utf8               add\n-  #407 = Utf8               (Ljava/lang/Object;)Z\n-  #408 = Utf8               getIgnoreHeaderCase\n-  #409 = Utf8               CASE_INSENSITIVE_ORDER\n-  #410 = Utf8               Ljava/util/Comparator;\n-  #411 = Utf8               (Ljava/util/Comparator;)V\n-  #412 = Utf8               getHeader\n-  #413 = Utf8               ()[Ljava/lang/String;\n-  #414 = Utf8               values\n-  #415 = Utf8               getComment\n-  #416 = Utf8               getSkipHeaderRecord\n-  #417 = Utf8               isBlank\n-  #418 = Utf8               (Ljava/lang/String;)Z\n-  #419 = Utf8               getAllowMissingColumnNames\n-  #420 = Utf8               append\n-  #421 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #422 = Utf8               java/util/Arrays\n-  #423 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n-  #424 = Utf8               containsKey\n-  #425 = Utf8               getDuplicateHeaderMode\n-  #426 = Utf8               ()Lorg/apache/commons/csv/DuplicateHeaderMode;\n-  #427 = Utf8               ALLOW_ALL\n-  #428 = Utf8               Lorg/apache/commons/csv/DuplicateHeaderMode;\n-  #429 = Utf8               ALLOW_EMPTY\n-  #430 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #431 = Utf8               java/lang/Integer\n-  #432 = Utf8               valueOf\n-  #433 = Utf8               (I)Ljava/lang/Integer;\n-  #434 = Utf8               put\n-  #435 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #436 = Utf8               (I)V\n-  #437 = Utf8               java/util/Collections\n-  #438 = Utf8               emptyList\n-  #439 = Utf8               unmodifiableList\n-  #440 = Utf8               (Ljava/util/List;)Ljava/util/List;\n-  #441 = Utf8               (Ljava/util/Map;Ljava/util/List;)V\n-  #442 = Utf8               getFirstEol\n-  #443 = Utf8               headerMap\n-  #444 = Utf8               Ljava/util/Map;\n-  #445 = Utf8               putAll\n-  #446 = Utf8               (Ljava/util/Map;)V\n-  #447 = Utf8               headerNames\n-  #448 = Utf8               java/util/stream/Collectors\n-  #449 = Utf8               toList\n-  #450 = Utf8               ()Ljava/util/stream/Collector;\n-  #451 = Utf8               java/util/stream/Stream\n-  #452 = Utf8               collect\n-  #453 = Utf8               (Ljava/util/stream/Collector;)Ljava/lang/Object;\n-  #454 = Utf8               isQuoted\n-  #455 = Utf8               Z\n-  #456 = Utf8               getNullString\n-  #457 = Utf8               equals\n-  #458 = Utf8               getQuoteMode\n-  #459 = Utf8               ()Lorg/apache/commons/csv/QuoteMode;\n-  #460 = Utf8               org/apache/commons/csv/QuoteMode\n-  #461 = Utf8               ALL_NON_NULL\n-  #462 = Utf8               Lorg/apache/commons/csv/QuoteMode;\n-  #463 = Utf8               NON_NUMERIC\n-  #464 = Utf8               clear\n-  #465 = Utf8               getCharacterPosition\n-  #466 = Utf8               reset\n-  #467 = Utf8               nextToken\n-  #468 = Utf8               (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #469 = Utf8               $SwitchMap$org$apache$commons$csv$Token$Type\n-  #470 = Utf8               [I\n-  #471 = Utf8               type\n-  #472 = Utf8               Type\n-  #473 = Utf8               Lorg/apache/commons/csv/Token$Type;\n-  #474 = Utf8               org/apache/commons/csv/Token$Type\n-  #475 = Utf8               ordinal\n-  #476 = Utf8               ()I\n-  #477 = Utf8               isReady\n-  #478 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #479 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #480 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n-  #481 = Utf8               TOKEN\n-  #482 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #483 = Utf8               EMPTY_STRING_ARRAY\n-  #484 = Utf8               toArray\n-  #485 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #486 = Utf8               (Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n-  #487 = Utf8               java/util/Spliterators\n-  #488 = Utf8               spliteratorUnknownSize\n-  #489 = Utf8               (Ljava/util/Iterator;I)Ljava/util/Spliterator;\n-  #490 = Utf8               java/util/stream/StreamSupport\n-  #491 = Utf8               (Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n+  #191 = Class              #372          // org/apache/commons/csv/DuplicateHeaderMode\n+  #192 = Utf8               getCurrentLineNumber\n+  #193 = Utf8               ()J\n+  #194 = Utf8               getFirstEndOfLine\n+  #195 = Utf8               ()Ljava/lang/String;\n+  #196 = Utf8               getHeaderComment\n+  #197 = Utf8               getHeaderMap\n+  #198 = Utf8               getHeaderMapRaw\n+  #199 = Utf8               getHeaderNames\n+  #200 = Utf8               ()Ljava/util/List;\n+  #201 = Utf8               ()Ljava/util/List<Ljava/lang/String;>;\n+  #202 = Utf8               getRecordNumber\n+  #203 = Utf8               getRecords\n+  #204 = Utf8               ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n+  #205 = Utf8               getTrailerComment\n+  #206 = Utf8               handleNull\n+  #207 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #208 = Utf8               hasHeaderComment\n+  #209 = Utf8               ()Z\n+  #210 = Utf8               hasTrailerComment\n+  #211 = Utf8               isClosed\n+  #212 = Utf8               isStrictQuoteMode\n+  #213 = Utf8               iterator\n+  #214 = Utf8               ()Ljava/util/Iterator;\n+  #215 = Utf8               ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n+  #216 = Utf8               nextRecord\n+  #217 = Utf8               ()Lorg/apache/commons/csv/CSVRecord;\n+  #218 = Utf8               stream\n+  #219 = Utf8               ()Ljava/util/stream/Stream;\n+  #220 = Utf8               ()Ljava/util/stream/Stream<Lorg/apache/commons/csv/CSVRecord;>;\n+  #221 = Utf8               Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n+  #222 = Utf8               SourceFile\n+  #223 = Utf8               CSVParser.java\n+  #224 = Utf8               file\n+  #225 = Class              #373          // java/util/Objects\n+  #226 = NameAndType        #374:#375     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #227 = Class              #376          // java/io/File\n+  #228 = NameAndType        #377:#378     // toPath:()Ljava/nio/file/Path;\n+  #229 = NameAndType        #166:#172     // parse:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+  #230 = Utf8               inputStream\n+  #231 = Utf8               java/io/InputStreamReader\n+  #232 = NameAndType        #176:#379     // \"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n+  #233 = NameAndType        #166:#173     // parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+  #234 = Utf8               path\n+  #235 = Utf8               java/nio/file/OpenOption\n+  #236 = Class              #380          // java/nio/file/Files\n+  #237 = NameAndType        #381:#382     // newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+  #238 = NameAndType        #166:#171     // parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+  #239 = Utf8               org/apache/commons/csv/CSVParser\n+  #240 = NameAndType        #176:#177     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+  #241 = Utf8               string\n+  #242 = Utf8               java/io/StringReader\n+  #243 = NameAndType        #176:#383     // \"<init>\":(Ljava/lang/String;)V\n+  #244 = Utf8               url\n+  #245 = Utf8               charset\n+  #246 = Class              #384          // java/net/URL\n+  #247 = NameAndType        #385:#386     // openStream:()Ljava/io/InputStream;\n+  #248 = NameAndType        #176:#178     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n+  #249 = NameAndType        #176:#184     // \"<init>\":()V\n+  #250 = Utf8               java/util/ArrayList\n+  #251 = NameAndType        #157:#158     // recordList:Ljava/util/List;\n+  #252 = Utf8               org/apache/commons/csv/Token\n+  #253 = NameAndType        #164:#165     // reusableToken:Lorg/apache/commons/csv/Token;\n+  #254 = Utf8               reader\n+  #255 = Class              #387          // org/apache/commons/csv/CSVFormat\n+  #256 = NameAndType        #388:#389     // copy:()Lorg/apache/commons/csv/CSVFormat;\n+  #257 = NameAndType        #149:#150     // format:Lorg/apache/commons/csv/CSVFormat;\n+  #258 = Utf8               org/apache/commons/csv/Lexer\n+  #259 = Utf8               org/apache/commons/csv/ExtendedBufferedReader\n+  #260 = NameAndType        #176:#390     // \"<init>\":(Ljava/io/Reader;)V\n+  #261 = NameAndType        #176:#391     // \"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+  #262 = NameAndType        #153:#154     // lexer:Lorg/apache/commons/csv/Lexer;\n+  #263 = Utf8               org/apache/commons/csv/CSVParser$CSVRecordIterator\n+  #264 = NameAndType        #176:#392     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n+  #265 = NameAndType        #155:#156     // csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n+  #266 = NameAndType        #189:#190     // createHeaders:()Lorg/apache/commons/csv/CSVParser$Headers;\n+  #267 = NameAndType        #151:#152     // headers:Lorg/apache/commons/csv/CSVParser$Headers;\n+  #268 = NameAndType        #163:#162     // characterOffset:J\n+  #269 = NameAndType        #161:#162     // recordNumber:J\n+  #270 = NameAndType        #393:#394     // content:Ljava/lang/StringBuilder;\n+  #271 = NameAndType        #395:#195     // toString:()Ljava/lang/String;\n+  #272 = NameAndType        #396:#207     // trim:(Ljava/lang/String;)Ljava/lang/String;\n+  #273 = NameAndType        #397:#209     // isEmpty:()Z\n+  #274 = NameAndType        #398:#209     // getTrailingDelimiter:()Z\n+  #275 = NameAndType        #206:#207     // handleNull:(Ljava/lang/String;)Ljava/lang/String;\n+  #276 = NameAndType        #399:#400     // add:(Ljava/lang/Object;)Z\n+  #277 = NameAndType        #183:#184     // close:()V\n+  #278 = NameAndType        #401:#209     // getIgnoreHeaderCase:()Z\n+  #279 = Utf8               java/util/TreeMap\n+  #280 = NameAndType        #402:#403     // CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n+  #281 = NameAndType        #176:#404     // \"<init>\":(Ljava/util/Comparator;)V\n+  #282 = Utf8               java/util/LinkedHashMap\n+  #283 = NameAndType        #405:#406     // getHeader:()[Ljava/lang/String;\n+  #284 = NameAndType        #185:#186     // createEmptyHeaderMap:()Ljava/util/Map;\n+  #285 = NameAndType        #216:#217     // nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n+  #286 = NameAndType        #407:#406     // values:()[Ljava/lang/String;\n+  #287 = NameAndType        #408:#195     // getComment:()Ljava/lang/String;\n+  #288 = NameAndType        #146:#147     // headerComment:Ljava/lang/String;\n+  #289 = NameAndType        #409:#209     // getSkipHeaderRecord:()Z\n+  #290 = NameAndType        #410:#411     // isBlank:(Ljava/lang/String;)Z\n+  #291 = NameAndType        #412:#209     // getAllowMissingColumnNames:()Z\n+  #292 = Utf8               java/lang/IllegalArgumentException\n+  #293 = Utf8               java/lang/StringBuilder\n+  #294 = Utf8               A header name is missing in\n+  #295 = NameAndType        #413:#414     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #296 = Class              #415          // java/util/Arrays\n+  #297 = NameAndType        #395:#416     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n+  #298 = NameAndType        #417:#400     // containsKey:(Ljava/lang/Object;)Z\n+  #299 = NameAndType        #418:#419     // getDuplicateHeaderMode:()Lorg/apache/commons/csv/DuplicateHeaderMode;\n+  #300 = NameAndType        #420:#421     // ALLOW_ALL:Lorg/apache/commons/csv/DuplicateHeaderMode;\n+  #301 = NameAndType        #422:#421     // ALLOW_EMPTY:Lorg/apache/commons/csv/DuplicateHeaderMode;\n+  #302 = Utf8               The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.Builder.setDuplicateHeaderMode().\n+  #303 = Utf8               java/lang/Object\n+  #304 = NameAndType        #149:#423     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #305 = Class              #424          // java/lang/Integer\n+  #306 = NameAndType        #425:#426     // valueOf:(I)Ljava/lang/Integer;\n+  #307 = NameAndType        #427:#428     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #308 = NameAndType        #176:#429     // \"<init>\":(I)V\n+  #309 = Class              #430          // java/util/Collections\n+  #310 = NameAndType        #431:#200     // emptyList:()Ljava/util/List;\n+  #311 = NameAndType        #432:#433     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+  #312 = Utf8               org/apache/commons/csv/CSVParser$Headers\n+  #313 = NameAndType        #176:#434     // \"<init>\":(Ljava/util/Map;Ljava/util/List;)V\n+  #314 = NameAndType        #192:#193     // getCurrentLineNumber:()J\n+  #315 = NameAndType        #435:#195     // getFirstEol:()Ljava/lang/String;\n+  #316 = NameAndType        #436:#437     // headerMap:Ljava/util/Map;\n+  #317 = NameAndType        #438:#439     // putAll:(Ljava/util/Map;)V\n+  #318 = NameAndType        #440:#158     // headerNames:Ljava/util/List;\n+  #319 = NameAndType        #218:#219     // stream:()Ljava/util/stream/Stream;\n+  #320 = Class              #441          // java/util/stream/Collectors\n+  #321 = NameAndType        #442:#443     // toList:()Ljava/util/stream/Collector;\n+  #322 = Class              #444          // java/util/stream/Stream\n+  #323 = NameAndType        #445:#446     // collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;\n+  #324 = Utf8               java/util/List\n+  #325 = NameAndType        #148:#147     // trailerComment:Ljava/lang/String;\n+  #326 = NameAndType        #447:#448     // isQuoted:Z\n+  #327 = NameAndType        #449:#195     // getNullString:()Ljava/lang/String;\n+  #328 = NameAndType        #212:#209     // isStrictQuoteMode:()Z\n+  #329 = NameAndType        #450:#400     // equals:(Ljava/lang/Object;)Z\n+  #330 = NameAndType        #211:#209     // isClosed:()Z\n+  #331 = NameAndType        #451:#452     // getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n+  #332 = Class              #453          // org/apache/commons/csv/QuoteMode\n+  #333 = NameAndType        #454:#455     // ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n+  #334 = NameAndType        #456:#455     // NON_NUMERIC:Lorg/apache/commons/csv/QuoteMode;\n+  #335 = NameAndType        #457:#184     // clear:()V\n+  #336 = NameAndType        #458:#193     // getCharacterPosition:()J\n+  #337 = NameAndType        #459:#184     // reset:()V\n+  #338 = NameAndType        #460:#461     // nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #339 = NameAndType        #462:#463     // $SwitchMap$org$apache$commons$csv$Token$Type:[I\n+  #340 = NameAndType        #464:#466     // type:Lorg/apache/commons/csv/Token$Type;\n+  #341 = Class              #467          // org/apache/commons/csv/Token$Type\n+  #342 = NameAndType        #468:#469     // ordinal:()I\n+  #343 = NameAndType        #179:#180     // addRecordValue:(Z)V\n+  #344 = NameAndType        #470:#448     // isReady:Z\n+  #345 = Utf8               java/io/IOException\n+  #346 = Utf8               (line\n+  #347 = NameAndType        #413:#471     // append:(J)Ljava/lang/StringBuilder;\n+  #348 = Utf8               ) invalid parse sequence\n+  #349 = Utf8               org/apache/commons/csv/Constants\n+  #350 = NameAndType        #413:#472     // append:(C)Ljava/lang/StringBuilder;\n+  #351 = NameAndType        #413:#473     // append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n+  #352 = NameAndType        #474:#466     // TOKEN:Lorg/apache/commons/csv/Token$Type;\n+  #353 = Utf8               java/lang/IllegalStateException\n+  #354 = Utf8               Unexpected Token type:\n+  #355 = NameAndType        #413:#475     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #356 = Utf8               org/apache/commons/csv/CSVRecord\n+  #357 = NameAndType        #476:#359     // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+  #358 = NameAndType        #477:#478     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #359 = Utf8               [Ljava/lang/String;\n+  #360 = NameAndType        #176:#479     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n+  #361 = NameAndType        #213:#214     // iterator:()Ljava/util/Iterator;\n+  #362 = Utf8               java/util/Spliterator\n+  #363 = Class              #480          // java/util/Spliterators\n+  #364 = NameAndType        #481:#482     // spliteratorUnknownSize:(Ljava/util/Iterator;I)Ljava/util/Spliterator;\n+  #365 = Class              #483          // java/util/stream/StreamSupport\n+  #366 = NameAndType        #218:#484     // stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n+  #367 = Utf8               java/lang/Iterable\n+  #368 = Utf8               java/io/Closeable\n+  #369 = Utf8               org/apache/commons/csv/CSVParser$1\n+  #370 = Utf8               java/lang/String\n+  #371 = Utf8               java/util/Map\n+  #372 = Utf8               org/apache/commons/csv/DuplicateHeaderMode\n+  #373 = Utf8               java/util/Objects\n+  #374 = Utf8               requireNonNull\n+  #375 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #376 = Utf8               java/io/File\n+  #377 = Utf8               toPath\n+  #378 = Utf8               ()Ljava/nio/file/Path;\n+  #379 = Utf8               (Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n+  #380 = Utf8               java/nio/file/Files\n+  #381 = Utf8               newInputStream\n+  #382 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+  #383 = Utf8               (Ljava/lang/String;)V\n+  #384 = Utf8               java/net/URL\n+  #385 = Utf8               openStream\n+  #386 = Utf8               ()Ljava/io/InputStream;\n+  #387 = Utf8               org/apache/commons/csv/CSVFormat\n+  #388 = Utf8               copy\n+  #389 = Utf8               ()Lorg/apache/commons/csv/CSVFormat;\n+  #390 = Utf8               (Ljava/io/Reader;)V\n+  #391 = Utf8               (Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+  #392 = Utf8               (Lorg/apache/commons/csv/CSVParser;)V\n+  #393 = Utf8               content\n+  #394 = Utf8               Ljava/lang/StringBuilder;\n+  #395 = Utf8               toString\n+  #396 = Utf8               trim\n+  #397 = Utf8               isEmpty\n+  #398 = Utf8               getTrailingDelimiter\n+  #399 = Utf8               add\n+  #400 = Utf8               (Ljava/lang/Object;)Z\n+  #401 = Utf8               getIgnoreHeaderCase\n+  #402 = Utf8               CASE_INSENSITIVE_ORDER\n+  #403 = Utf8               Ljava/util/Comparator;\n+  #404 = Utf8               (Ljava/util/Comparator;)V\n+  #405 = Utf8               getHeader\n+  #406 = Utf8               ()[Ljava/lang/String;\n+  #407 = Utf8               values\n+  #408 = Utf8               getComment\n+  #409 = Utf8               getSkipHeaderRecord\n+  #410 = Utf8               isBlank\n+  #411 = Utf8               (Ljava/lang/String;)Z\n+  #412 = Utf8               getAllowMissingColumnNames\n+  #413 = Utf8               append\n+  #414 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #415 = Utf8               java/util/Arrays\n+  #416 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n+  #417 = Utf8               containsKey\n+  #418 = Utf8               getDuplicateHeaderMode\n+  #419 = Utf8               ()Lorg/apache/commons/csv/DuplicateHeaderMode;\n+  #420 = Utf8               ALLOW_ALL\n+  #421 = Utf8               Lorg/apache/commons/csv/DuplicateHeaderMode;\n+  #422 = Utf8               ALLOW_EMPTY\n+  #423 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #424 = Utf8               java/lang/Integer\n+  #425 = Utf8               valueOf\n+  #426 = Utf8               (I)Ljava/lang/Integer;\n+  #427 = Utf8               put\n+  #428 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #429 = Utf8               (I)V\n+  #430 = Utf8               java/util/Collections\n+  #431 = Utf8               emptyList\n+  #432 = Utf8               unmodifiableList\n+  #433 = Utf8               (Ljava/util/List;)Ljava/util/List;\n+  #434 = Utf8               (Ljava/util/Map;Ljava/util/List;)V\n+  #435 = Utf8               getFirstEol\n+  #436 = Utf8               headerMap\n+  #437 = Utf8               Ljava/util/Map;\n+  #438 = Utf8               putAll\n+  #439 = Utf8               (Ljava/util/Map;)V\n+  #440 = Utf8               headerNames\n+  #441 = Utf8               java/util/stream/Collectors\n+  #442 = Utf8               toList\n+  #443 = Utf8               ()Ljava/util/stream/Collector;\n+  #444 = Utf8               java/util/stream/Stream\n+  #445 = Utf8               collect\n+  #446 = Utf8               (Ljava/util/stream/Collector;)Ljava/lang/Object;\n+  #447 = Utf8               isQuoted\n+  #448 = Utf8               Z\n+  #449 = Utf8               getNullString\n+  #450 = Utf8               equals\n+  #451 = Utf8               getQuoteMode\n+  #452 = Utf8               ()Lorg/apache/commons/csv/QuoteMode;\n+  #453 = Utf8               org/apache/commons/csv/QuoteMode\n+  #454 = Utf8               ALL_NON_NULL\n+  #455 = Utf8               Lorg/apache/commons/csv/QuoteMode;\n+  #456 = Utf8               NON_NUMERIC\n+  #457 = Utf8               clear\n+  #458 = Utf8               getCharacterPosition\n+  #459 = Utf8               reset\n+  #460 = Utf8               nextToken\n+  #461 = Utf8               (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #462 = Utf8               $SwitchMap$org$apache$commons$csv$Token$Type\n+  #463 = Utf8               [I\n+  #464 = Utf8               type\n+  #465 = Utf8               Type\n+  #466 = Utf8               Lorg/apache/commons/csv/Token$Type;\n+  #467 = Utf8               org/apache/commons/csv/Token$Type\n+  #468 = Utf8               ordinal\n+  #469 = Utf8               ()I\n+  #470 = Utf8               isReady\n+  #471 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #472 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #473 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n+  #474 = Utf8               TOKEN\n+  #475 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #476 = Utf8               EMPTY_STRING_ARRAY\n+  #477 = Utf8               toArray\n+  #478 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #479 = Utf8               (Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V\n+  #480 = Utf8               java/util/Spliterators\n+  #481 = Utf8               spliteratorUnknownSize\n+  #482 = Utf8               (Ljava/util/Iterator;I)Ljava/util/Spliterator;\n+  #483 = Utf8               java/util/stream/StreamSupport\n+  #484 = Utf8               (Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n {\n   private java.lang.String headerComment;\n     descriptor: Ljava/lang/String;\n     flags: (0x0002) ACC_PRIVATE\n \n   private java.lang.String trailerComment;\n     descriptor: Ljava/lang/String;\n@@ -870,14 +863,17 @@\n         20: goto          30\n         23: new           #57                 // class java/util/LinkedHashMap\n         26: dup\n         27: invokespecial #58                 // Method java/util/LinkedHashMap.\"<init>\":()V\n         30: areturn\n       LineNumberTable:\n         line 465: 0\n+        line 466: 10\n+        line 467: 23\n+        line 465: 30\n       StackMapTable: number_of_entries = 2\n         frame_type = 23 /* same */\n         frame_type = 70 /* same_locals_1_stack_item */\n           stack = [ class java/util/Map ]\n     Signature: #188                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n \n   private org.apache.commons.csv.CSVParser$Headers createHeaders() throws java.io.IOException;\n@@ -1233,15 +1229,15 @@\n          0: aload_0\n          1: getfield      #42                 // Field headers:Lorg/apache/commons/csv/CSVParser$Headers;\n          4: getfield      #93                 // Field org/apache/commons/csv/CSVParser$Headers.headerNames:Ljava/util/List;\n          7: invokestatic  #86                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n         10: areturn\n       LineNumberTable:\n         line 620: 0\n-    Signature: #203                         // ()Ljava/util/List<Ljava/lang/String;>;\n+    Signature: #201                         // ()Ljava/util/List<Ljava/lang/String;>;\n \n   public long getRecordNumber();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n@@ -1259,15 +1255,15 @@\n          1: invokevirtual #94                 // Method stream:()Ljava/util/stream/Stream;\n          4: invokestatic  #95                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;\n          7: invokeinterface #96,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;\n         12: checkcast     #97                 // class java/util/List\n         15: areturn\n       LineNumberTable:\n         line 650: 0\n-    Signature: #206                         // ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n+    Signature: #204                         // ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n \n   public java.lang.String getTrailerComment();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -1420,15 +1416,15 @@\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n          1: getfield      #40                 // Field csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n          4: areturn\n       LineNumberTable:\n         line 753: 0\n-    Signature: #217                         // ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n+    Signature: #215                         // ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n \n   org.apache.commons.csv.CSVRecord nextRecord() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/csv/CSVRecord;\n     flags: (0x0000)\n     Code:\n       stack=9, locals=6, args_size=1\n          0: aconst_null\n@@ -1642,16 +1638,16 @@\n          4: bipush        16\n          6: invokestatic  #138                // Method java/util/Spliterators.spliteratorUnknownSize:(Ljava/util/Iterator;I)Ljava/util/Spliterator;\n          9: iconst_0\n         10: invokestatic  #139                // Method java/util/stream/StreamSupport.stream:(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;\n         13: areturn\n       LineNumberTable:\n         line 820: 0\n-    Signature: #224                         // ()Ljava/util/stream/Stream<Lorg/apache/commons/csv/CSVRecord;>;\n+    Signature: #220                         // ()Ljava/util/stream/Stream<Lorg/apache/commons/csv/CSVRecord;>;\n }\n-Signature: #225                         // Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n+Signature: #221                         // Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n SourceFile: \"CSVParser.java\"\n InnerClasses:\n   static #142;                            // class org/apache/commons/csv/CSVParser$1\n   private static final #144= #87 of #14;  // Headers=class org/apache/commons/csv/CSVParser$Headers of class org/apache/commons/csv/CSVParser\n   #145= #38 of #14;                       // CSVRecordIterator=class org/apache/commons/csv/CSVParser$CSVRecordIterator of class org/apache/commons/csv/CSVParser\n-  static final #472= #348 of #27;         // Type=class org/apache/commons/csv/Token$Type of class org/apache/commons/csv/Token\n+  static final #465= #341 of #27;         // Type=class org/apache/commons/csv/Token$Type of class org/apache/commons/csv/Token\n"}]}
