{"diffoscope-json-version": 1, "source1": "first/FileSystem.class", "source2": "second/FileSystem.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,18 +3,18 @@\n \n import java.util.Arrays;\n import java.util.Objects;\n import java.util.Locale;\n \n public enum FileSystem\n {\n-    GENERIC(4096, false, false, Integer.MAX_VALUE, Integer.MAX_VALUE, new int[] { 0 }, new String[0], false, false, '/'), \n-    LINUX(8192, true, true, 255, 4096, new int[] { 0, 47 }, new String[0], false, false, '/'), \n-    MAC_OSX(4096, true, true, 255, 1024, new int[] { 0, 47, 58 }, new String[0], false, false, '/'), \n-    WINDOWS(4096, false, true, 255, 32000, new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 42, 47, 58, 60, 62, 63, 92, 124 }, new String[] { \"AUX\", \"COM1\", \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\", \"CON\", \"CONIN$\", \"CONOUT$\", \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", \"LPT9\", \"NUL\", \"PRN\" }, true, true, '\\\\');\n+    GENERIC(\"GENERIC\", 0, 4096, false, false, Integer.MAX_VALUE, Integer.MAX_VALUE, new int[1], new String[0], false, false, '/'), \n+    LINUX(\"LINUX\", 1, 8192, true, true, 255, 4096, new int[] { 0, 47 }, new String[0], false, false, '/'), \n+    MAC_OSX(\"MAC_OSX\", 2, 4096, true, true, 255, 1024, new int[] { 0, 47, 58 }, new String[0], false, false, '/'), \n+    WINDOWS(\"WINDOWS\", 3, 4096, false, true, 255, 32000, new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 42, 47, 58, 60, 62, 63, 92, 124 }, new String[] { \"AUX\", \"COM1\", \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\", \"CON\", \"CONIN$\", \"CONOUT$\", \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", \"LPT9\", \"NUL\", \"PRN\" }, true, true, '\\\\');\n     \n     private static final boolean IS_OS_LINUX;\n     private static final boolean IS_OS_MAC;\n     private static final String OS_NAME_WINDOWS_PREFIX = \"Windows\";\n     private static final boolean IS_OS_WINDOWS;\n     private static final FileSystem CURRENT;\n     private final int blockSize;\n@@ -25,14 +25,21 @@\n     private final int maxPathLength;\n     private final String[] reservedFileNames;\n     private final boolean reservedFileNamesExtensions;\n     private final boolean supportsDriveLetter;\n     private final char nameSeparator;\n     private final char nameSeparatorOther;\n     \n+    static {\n+        IS_OS_LINUX = getOsMatchesName(\"Linux\");\n+        IS_OS_MAC = getOsMatchesName(\"Mac\");\n+        IS_OS_WINDOWS = getOsMatchesName(\"Windows\");\n+        CURRENT = current();\n+    }\n+    \n     private static FileSystem current() {\n         if (FileSystem.IS_OS_LINUX) {\n             return FileSystem.LINUX;\n         }\n         if (FileSystem.IS_OS_MAC) {\n             return FileSystem.MAC_OSX;\n         }\n@@ -93,15 +100,15 @@\n         return osName != null && osName.toUpperCase(Locale.ROOT).startsWith(osNamePrefix.toUpperCase(Locale.ROOT));\n     }\n     \n     private static String replace(final String path, final char oldChar, final char newChar) {\n         return (path == null) ? null : path.replace(oldChar, newChar);\n     }\n     \n-    private FileSystem(final int blockSize, final boolean caseSensitive, final boolean casePreserving, final int maxFileLength, final int maxPathLength, final int[] illegalFileNameChars, final String[] reservedFileNames, final boolean reservedFileNamesExtensions, final boolean supportsDriveLetter, final char nameSeparator) {\n+    private FileSystem(final String name, final int ordinal, final int blockSize, final boolean caseSensitive, final boolean casePreserving, final int maxFileLength, final int maxPathLength, final int[] illegalFileNameChars, final String[] reservedFileNames, final boolean reservedFileNamesExtensions, final boolean supportsDriveLetter, final char nameSeparator) {\n         this.blockSize = blockSize;\n         this.maxFileNameLength = maxFileLength;\n         this.maxPathLength = maxPathLength;\n         this.illegalFileNameChars = Objects.requireNonNull(illegalFileNameChars, \"illegalFileNameChars\");\n         this.reservedFileNames = Objects.requireNonNull(reservedFileNames, \"reservedFileNames\");\n         this.reservedFileNamesExtensions = reservedFileNamesExtensions;\n         this.caseSensitive = caseSensitive;\n@@ -173,23 +180,16 @@\n     }\n     \n     public String toLegalFileName(final String candidate, final char replacement) {\n         if (this.isIllegalFileNameChar(replacement)) {\n             throw new IllegalArgumentException(String.format(\"The replacement character '%s' cannot be one of the %s illegal characters: %s\", (replacement == '\\0') ? \"\\\\0\" : Character.valueOf(replacement), this.name(), Arrays.toString(this.illegalFileNameChars)));\n         }\n         final String truncated = (candidate.length() > this.maxFileNameLength) ? candidate.substring(0, this.maxFileNameLength) : candidate;\n-        final int[] array = truncated.chars().map(i -> this.isIllegalFileNameChar(i) ? replacement : i).toArray();\n+        final int[] array = truncated.chars().map(i -> this.isIllegalFileNameChar(i) ? c : i).toArray();\n         return new String(array, 0, array.length);\n     }\n     \n     CharSequence trimExtension(final CharSequence cs) {\n         final int index = indexOf(cs, 46, 0);\n         return (index < 0) ? cs : cs.subSequence(0, index);\n     }\n-    \n-    static {\n-        IS_OS_LINUX = getOsMatchesName(\"Linux\");\n-        IS_OS_MAC = getOsMatchesName(\"Mac\");\n-        IS_OS_WINDOWS = getOsMatchesName(\"Windows\");\n-        CURRENT = current();\n-    }\n }\n"}]}
