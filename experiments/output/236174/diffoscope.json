{"diffoscope-json-version": 1, "source1": "first/WildcardFilter.class", "source2": "second/WildcardFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,52 +8,54 @@\n \n @Deprecated\n public class WildcardFilter extends AbstractFileFilter implements Serializable\n {\n     private static final long serialVersionUID = -5037645902506953517L;\n     private final String[] wildcards;\n     \n-    public WildcardFilter(final String wildcard) {\n-        if (wildcard == null) {\n+    public WildcardFilter(final String s) {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"The wildcard must not be null\");\n         }\n-        this.wildcards = new String[] { wildcard };\n+        this.wildcards = new String[] { s };\n     }\n     \n-    public WildcardFilter(final String... wildcards) {\n-        if (wildcards == null) {\n+    public WildcardFilter(final String... array) {\n+        if (array == null) {\n             throw new IllegalArgumentException(\"The wildcard array must not be null\");\n         }\n-        System.arraycopy(wildcards, 0, this.wildcards = new String[wildcards.length], 0, wildcards.length);\n+        System.arraycopy(array, 0, this.wildcards = new String[array.length], 0, array.length);\n     }\n     \n-    public WildcardFilter(final List<String> wildcards) {\n-        if (wildcards == null) {\n+    public WildcardFilter(final List<String> list) {\n+        if (list == null) {\n             throw new IllegalArgumentException(\"The wildcard list must not be null\");\n         }\n-        this.wildcards = wildcards.toArray(WildcardFilter.EMPTY_STRING_ARRAY);\n+        this.wildcards = list.toArray(WildcardFilter.EMPTY_STRING_ARRAY);\n     }\n     \n-    public boolean accept(final File dir, final String name) {\n-        if (dir != null && new File(dir, name).isDirectory()) {\n+    public boolean accept(final File parent, final String child) {\n+        if (parent != null && new File(parent, child).isDirectory()) {\n             return false;\n         }\n-        for (final String wildcard : this.wildcards) {\n-            if (FilenameUtils.wildcardMatch(name, wildcard)) {\n+        final String[] wildcards = this.wildcards;\n+        for (int length = wildcards.length, i = 0; i < length; ++i) {\n+            if (FilenameUtils.wildcardMatch(child, wildcards[i])) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n     public boolean accept(final File file) {\n         if (file.isDirectory()) {\n             return false;\n         }\n-        for (final String wildcard : this.wildcards) {\n-            if (FilenameUtils.wildcardMatch(file.getName(), wildcard)) {\n+        final String[] wildcards = this.wildcards;\n+        for (int length = wildcards.length, i = 0; i < length; ++i) {\n+            if (FilenameUtils.wildcardMatch(file.getName(), wildcards[i])) {\n                 return true;\n             }\n         }\n         return false;\n     }\n }\n"}]}
