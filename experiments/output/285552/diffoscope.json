{"diffoscope-json-version": 1, "source1": "first/SimpleElementValue.class", "source2": "second/SimpleElementValue.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,203 +1,200 @@\n-  SHA-256 checksum 3374dfef626f0910064fec8286a0118144f076a89691da9ed1126e6cfcf017c5\n+  SHA-256 checksum 6b9845a9fb1f1b73c041cc266b80d5d7b5400921cca639b5a4acca3c87df04b4\n   Compiled from \"SimpleElementValue.java\"\n public class org.apache.bcel.classfile.SimpleElementValue extends org.apache.bcel.classfile.ElementValue\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #51                         // org/apache/bcel/classfile/SimpleElementValue\n   super_class: #15                        // org/apache/bcel/classfile/ElementValue\n   interfaces: 0, fields: 1, methods: 15, attributes: 1\n Constant pool:\n-    #1 = Methodref          #15.#95       // org/apache/bcel/classfile/ElementValue.\"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n-    #2 = Fieldref           #51.#96       // org/apache/bcel/classfile/SimpleElementValue.index:I\n-    #3 = Methodref          #15.#97       // org/apache/bcel/classfile/ElementValue.getType:()I\n-    #4 = Methodref          #98.#99       // java/io/DataOutputStream.writeByte:(I)V\n-    #5 = Methodref          #51.#100      // org/apache/bcel/classfile/SimpleElementValue.getIndex:()I\n-    #6 = Methodref          #98.#101      // java/io/DataOutputStream.writeShort:(I)V\n-    #7 = Class              #102          // org/apache/bcel/classfile/ClassFormatException\n-    #8 = Class              #103          // java/lang/StringBuilder\n-    #9 = Methodref          #8.#104       // java/lang/StringBuilder.\"<init>\":()V\n-   #10 = String             #105          // SimpleElementValue doesnt know how to write out type\n-   #11 = Methodref          #8.#106       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #12 = Methodref          #8.#107       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #13 = Methodref          #8.#108       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #14 = Methodref          #7.#109       // org/apache/bcel/classfile/ClassFormatException.\"<init>\":(Ljava/lang/String;)V\n-   #15 = Class              #110          // org/apache/bcel/classfile/ElementValue\n-   #16 = Class              #111          // java/lang/IllegalStateException\n-   #17 = String             #112          // Dont call getValueBoolean() on a non BOOLEAN ElementValue\n-   #18 = Methodref          #16.#109      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #19 = Methodref          #15.#113      // org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n-   #20 = Methodref          #114.#115     // org/apache/bcel/classfile/ConstantPool.getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n-   #21 = Class              #116          // org/apache/bcel/classfile/ConstantInteger\n-   #22 = Methodref          #21.#117      // org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n-   #23 = String             #118          // Dont call getValueByte() on a non BYTE ElementValue\n-   #24 = Methodref          #114.#119     // org/apache/bcel/classfile/ConstantPool.getConstantInteger:(I)Lorg/apache/bcel/classfile/ConstantInteger;\n-   #25 = String             #120          // Dont call getValueChar() on a non CHAR ElementValue\n-   #26 = String             #121          // Dont call getValueDouble() on a non DOUBLE ElementValue\n-   #27 = Class              #122          // org/apache/bcel/classfile/ConstantDouble\n-   #28 = Methodref          #27.#123      // org/apache/bcel/classfile/ConstantDouble.getBytes:()D\n-   #29 = String             #124          // Dont call getValueFloat() on a non FLOAT ElementValue\n-   #30 = Class              #125          // org/apache/bcel/classfile/ConstantFloat\n-   #31 = Methodref          #30.#126      // org/apache/bcel/classfile/ConstantFloat.getBytes:()F\n-   #32 = String             #127          // Dont call getValueInt() on a non INT ElementValue\n-   #33 = String             #128          // Dont call getValueLong() on a non LONG ElementValue\n-   #34 = Class              #129          // org/apache/bcel/classfile/ConstantLong\n-   #35 = Methodref          #34.#130      // org/apache/bcel/classfile/ConstantLong.getBytes:()J\n-   #36 = String             #131          // Dont call getValueShort() on a non SHORT ElementValue\n-   #37 = String             #132          // Dont call getValueString() on a non STRING ElementValue\n-   #38 = Methodref          #114.#133     // org/apache/bcel/classfile/ConstantPool.getConstantUtf8:(I)Lorg/apache/bcel/classfile/ConstantUtf8;\n-   #39 = Methodref          #134.#135     // org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n-   #40 = Methodref          #136.#137     // java/lang/Integer.toString:(I)Ljava/lang/String;\n-   #41 = Class              #138          // org/apache/bcel/Const\n-   #42 = Methodref          #114.#139     // org/apache/bcel/classfile/ConstantPool.getConstant:(IBLjava/lang/Class;)Lorg/apache/bcel/classfile/Constant;\n-   #43 = Methodref          #140.#141     // java/lang/Long.toString:(J)Ljava/lang/String;\n-   #44 = Methodref          #142.#143     // java/lang/Double.toString:(D)Ljava/lang/String;\n-   #45 = Methodref          #144.#145     // java/lang/Float.toString:(F)Ljava/lang/String;\n-   #46 = Methodref          #146.#147     // java/lang/String.valueOf:(C)Ljava/lang/String;\n-   #47 = String             #148          // false\n-   #48 = String             #149          // true\n-   #49 = String             #150          // SimpleElementValue class does not know how to stringify type\n-   #50 = Methodref          #51.#151      // org/apache/bcel/classfile/SimpleElementValue.stringifyValue:()Ljava/lang/String;\n-   #51 = Class              #152          // org/apache/bcel/classfile/SimpleElementValue\n+    #1 = Methodref          #15.#93       // org/apache/bcel/classfile/ElementValue.\"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n+    #2 = Fieldref           #51.#94       // org/apache/bcel/classfile/SimpleElementValue.index:I\n+    #3 = Methodref          #15.#95       // org/apache/bcel/classfile/ElementValue.getType:()I\n+    #4 = Methodref          #96.#97       // java/io/DataOutputStream.writeByte:(I)V\n+    #5 = Methodref          #51.#98       // org/apache/bcel/classfile/SimpleElementValue.getIndex:()I\n+    #6 = Methodref          #96.#99       // java/io/DataOutputStream.writeShort:(I)V\n+    #7 = Class              #100          // org/apache/bcel/classfile/ClassFormatException\n+    #8 = Class              #101          // java/lang/StringBuilder\n+    #9 = Methodref          #8.#102       // java/lang/StringBuilder.\"<init>\":()V\n+   #10 = String             #103          // SimpleElementValue doesnt know how to write out type\n+   #11 = Methodref          #8.#104       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #12 = Methodref          #8.#105       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #13 = Methodref          #8.#106       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #14 = Methodref          #7.#107       // org/apache/bcel/classfile/ClassFormatException.\"<init>\":(Ljava/lang/String;)V\n+   #15 = Class              #108          // org/apache/bcel/classfile/ElementValue\n+   #16 = Class              #109          // java/lang/IllegalStateException\n+   #17 = String             #110          // Dont call getValueBoolean() on a non BOOLEAN ElementValue\n+   #18 = Methodref          #16.#107      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #19 = Methodref          #15.#111      // org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+   #20 = Methodref          #89.#112      // org/apache/bcel/classfile/ConstantPool.getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n+   #21 = Class              #113          // org/apache/bcel/classfile/ConstantInteger\n+   #22 = Methodref          #21.#114      // org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n+   #23 = String             #115          // Dont call getValueByte() on a non BYTE ElementValue\n+   #24 = Methodref          #89.#116      // org/apache/bcel/classfile/ConstantPool.getConstantInteger:(I)Lorg/apache/bcel/classfile/ConstantInteger;\n+   #25 = String             #117          // Dont call getValueChar() on a non CHAR ElementValue\n+   #26 = String             #118          // Dont call getValueDouble() on a non DOUBLE ElementValue\n+   #27 = Class              #119          // org/apache/bcel/classfile/ConstantDouble\n+   #28 = Methodref          #27.#120      // org/apache/bcel/classfile/ConstantDouble.getBytes:()D\n+   #29 = String             #121          // Dont call getValueFloat() on a non FLOAT ElementValue\n+   #30 = Class              #122          // org/apache/bcel/classfile/ConstantFloat\n+   #31 = Methodref          #30.#123      // org/apache/bcel/classfile/ConstantFloat.getBytes:()F\n+   #32 = String             #124          // Dont call getValueInt() on a non INT ElementValue\n+   #33 = String             #125          // Dont call getValueLong() on a non LONG ElementValue\n+   #34 = Class              #126          // org/apache/bcel/classfile/ConstantLong\n+   #35 = Methodref          #34.#127      // org/apache/bcel/classfile/ConstantLong.getBytes:()J\n+   #36 = String             #128          // Dont call getValueShort() on a non SHORT ElementValue\n+   #37 = String             #129          // Dont call getValueString() on a non STRING ElementValue\n+   #38 = Methodref          #89.#130      // org/apache/bcel/classfile/ConstantPool.getConstantUtf8:(I)Lorg/apache/bcel/classfile/ConstantUtf8;\n+   #39 = Methodref          #131.#132     // org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n+   #40 = Methodref          #133.#134     // java/lang/Integer.toString:(I)Ljava/lang/String;\n+   #41 = Class              #135          // org/apache/bcel/Const\n+   #42 = Methodref          #89.#136      // org/apache/bcel/classfile/ConstantPool.getConstant:(IBLjava/lang/Class;)Lorg/apache/bcel/classfile/Constant;\n+   #43 = Methodref          #137.#138     // java/lang/Long.toString:(J)Ljava/lang/String;\n+   #44 = Methodref          #139.#140     // java/lang/Double.toString:(D)Ljava/lang/String;\n+   #45 = Methodref          #141.#142     // java/lang/Float.toString:(F)Ljava/lang/String;\n+   #46 = Methodref          #143.#144     // java/lang/String.valueOf:(C)Ljava/lang/String;\n+   #47 = String             #145          // false\n+   #48 = String             #146          // true\n+   #49 = String             #147          // SimpleElementValue class does not know how to stringify type\n+   #50 = Methodref          #51.#148      // org/apache/bcel/classfile/SimpleElementValue.stringifyValue:()Ljava/lang/String;\n+   #51 = Class              #149          // org/apache/bcel/classfile/SimpleElementValue\n    #52 = Utf8               index\n    #53 = Utf8               I\n    #54 = Utf8               <init>\n    #55 = Utf8               (IILorg/apache/bcel/classfile/ConstantPool;)V\n    #56 = Utf8               Code\n    #57 = Utf8               LineNumberTable\n    #58 = Utf8               MethodParameters\n    #59 = Utf8               type\n    #60 = Utf8               cpool\n    #61 = Utf8               dump\n    #62 = Utf8               (Ljava/io/DataOutputStream;)V\n    #63 = Utf8               StackMapTable\n    #64 = Utf8               Exceptions\n-   #65 = Class              #153          // java/io/IOException\n+   #65 = Class              #150          // java/io/IOException\n    #66 = Utf8               dos\n    #67 = Utf8               getIndex\n    #68 = Utf8               ()I\n    #69 = Utf8               getValueBoolean\n    #70 = Utf8               ()Z\n-   #71 = Class              #116          // org/apache/bcel/classfile/ConstantInteger\n-   #72 = Utf8               getValueByte\n-   #73 = Utf8               ()B\n-   #74 = Utf8               getValueChar\n-   #75 = Utf8               ()C\n-   #76 = Utf8               getValueDouble\n-   #77 = Utf8               ()D\n-   #78 = Utf8               getValueFloat\n-   #79 = Utf8               ()F\n-   #80 = Utf8               getValueInt\n-   #81 = Utf8               getValueLong\n-   #82 = Utf8               ()J\n-   #83 = Utf8               getValueShort\n-   #84 = Utf8               ()S\n-   #85 = Utf8               getValueString\n-   #86 = Utf8               ()Ljava/lang/String;\n-   #87 = Utf8               setIndex\n-   #88 = Utf8               (I)V\n-   #89 = Utf8               stringifyValue\n-   #90 = Class              #154          // org/apache/bcel/classfile/ConstantPool\n-   #91 = Class              #152          // org/apache/bcel/classfile/SimpleElementValue\n-   #92 = Utf8               toString\n-   #93 = Utf8               SourceFile\n-   #94 = Utf8               SimpleElementValue.java\n-   #95 = NameAndType        #54:#155      // \"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n-   #96 = NameAndType        #52:#53       // index:I\n-   #97 = NameAndType        #156:#68      // getType:()I\n-   #98 = Class              #157          // java/io/DataOutputStream\n-   #99 = NameAndType        #158:#88      // writeByte:(I)V\n-  #100 = NameAndType        #67:#68       // getIndex:()I\n-  #101 = NameAndType        #159:#88      // writeShort:(I)V\n-  #102 = Utf8               org/apache/bcel/classfile/ClassFormatException\n-  #103 = Utf8               java/lang/StringBuilder\n-  #104 = NameAndType        #54:#160      // \"<init>\":()V\n-  #105 = Utf8               SimpleElementValue doesnt know how to write out type\n-  #106 = NameAndType        #161:#162     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #107 = NameAndType        #161:#163     // append:(I)Ljava/lang/StringBuilder;\n-  #108 = NameAndType        #92:#86       // toString:()Ljava/lang/String;\n-  #109 = NameAndType        #54:#164      // \"<init>\":(Ljava/lang/String;)V\n-  #110 = Utf8               org/apache/bcel/classfile/ElementValue\n-  #111 = Utf8               java/lang/IllegalStateException\n-  #112 = Utf8               Dont call getValueBoolean() on a non BOOLEAN ElementValue\n-  #113 = NameAndType        #165:#166     // getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n-  #114 = Class              #154          // org/apache/bcel/classfile/ConstantPool\n-  #115 = NameAndType        #167:#168     // getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n-  #116 = Utf8               org/apache/bcel/classfile/ConstantInteger\n-  #117 = NameAndType        #169:#68      // getBytes:()I\n-  #118 = Utf8               Dont call getValueByte() on a non BYTE ElementValue\n-  #119 = NameAndType        #170:#171     // getConstantInteger:(I)Lorg/apache/bcel/classfile/ConstantInteger;\n-  #120 = Utf8               Dont call getValueChar() on a non CHAR ElementValue\n-  #121 = Utf8               Dont call getValueDouble() on a non DOUBLE ElementValue\n-  #122 = Utf8               org/apache/bcel/classfile/ConstantDouble\n-  #123 = NameAndType        #169:#77      // getBytes:()D\n-  #124 = Utf8               Dont call getValueFloat() on a non FLOAT ElementValue\n-  #125 = Utf8               org/apache/bcel/classfile/ConstantFloat\n-  #126 = NameAndType        #169:#79      // getBytes:()F\n-  #127 = Utf8               Dont call getValueInt() on a non INT ElementValue\n-  #128 = Utf8               Dont call getValueLong() on a non LONG ElementValue\n-  #129 = Utf8               org/apache/bcel/classfile/ConstantLong\n-  #130 = NameAndType        #169:#82      // getBytes:()J\n-  #131 = Utf8               Dont call getValueShort() on a non SHORT ElementValue\n-  #132 = Utf8               Dont call getValueString() on a non STRING ElementValue\n-  #133 = NameAndType        #172:#173     // getConstantUtf8:(I)Lorg/apache/bcel/classfile/ConstantUtf8;\n-  #134 = Class              #174          // org/apache/bcel/classfile/ConstantUtf8\n-  #135 = NameAndType        #169:#86      // getBytes:()Ljava/lang/String;\n-  #136 = Class              #175          // java/lang/Integer\n-  #137 = NameAndType        #92:#176      // toString:(I)Ljava/lang/String;\n-  #138 = Utf8               org/apache/bcel/Const\n-  #139 = NameAndType        #167:#177     // getConstant:(IBLjava/lang/Class;)Lorg/apache/bcel/classfile/Constant;\n-  #140 = Class              #178          // java/lang/Long\n-  #141 = NameAndType        #92:#179      // toString:(J)Ljava/lang/String;\n-  #142 = Class              #180          // java/lang/Double\n-  #143 = NameAndType        #92:#181      // toString:(D)Ljava/lang/String;\n-  #144 = Class              #182          // java/lang/Float\n-  #145 = NameAndType        #92:#183      // toString:(F)Ljava/lang/String;\n-  #146 = Class              #184          // java/lang/String\n-  #147 = NameAndType        #185:#186     // valueOf:(C)Ljava/lang/String;\n-  #148 = Utf8               false\n-  #149 = Utf8               true\n-  #150 = Utf8               SimpleElementValue class does not know how to stringify type\n-  #151 = NameAndType        #89:#86       // stringifyValue:()Ljava/lang/String;\n-  #152 = Utf8               org/apache/bcel/classfile/SimpleElementValue\n-  #153 = Utf8               java/io/IOException\n-  #154 = Utf8               org/apache/bcel/classfile/ConstantPool\n-  #155 = Utf8               (ILorg/apache/bcel/classfile/ConstantPool;)V\n-  #156 = Utf8               getType\n-  #157 = Utf8               java/io/DataOutputStream\n-  #158 = Utf8               writeByte\n-  #159 = Utf8               writeShort\n-  #160 = Utf8               ()V\n-  #161 = Utf8               append\n-  #162 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #163 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #164 = Utf8               (Ljava/lang/String;)V\n-  #165 = Utf8               getConstantPool\n-  #166 = Utf8               ()Lorg/apache/bcel/classfile/ConstantPool;\n-  #167 = Utf8               getConstant\n-  #168 = Utf8               (I)Lorg/apache/bcel/classfile/Constant;\n-  #169 = Utf8               getBytes\n-  #170 = Utf8               getConstantInteger\n-  #171 = Utf8               (I)Lorg/apache/bcel/classfile/ConstantInteger;\n-  #172 = Utf8               getConstantUtf8\n-  #173 = Utf8               (I)Lorg/apache/bcel/classfile/ConstantUtf8;\n-  #174 = Utf8               org/apache/bcel/classfile/ConstantUtf8\n-  #175 = Utf8               java/lang/Integer\n-  #176 = Utf8               (I)Ljava/lang/String;\n-  #177 = Utf8               (IBLjava/lang/Class;)Lorg/apache/bcel/classfile/Constant;\n-  #178 = Utf8               java/lang/Long\n-  #179 = Utf8               (J)Ljava/lang/String;\n-  #180 = Utf8               java/lang/Double\n-  #181 = Utf8               (D)Ljava/lang/String;\n-  #182 = Utf8               java/lang/Float\n-  #183 = Utf8               (F)Ljava/lang/String;\n-  #184 = Utf8               java/lang/String\n-  #185 = Utf8               valueOf\n-  #186 = Utf8               (C)Ljava/lang/String;\n+   #71 = Utf8               getValueByte\n+   #72 = Utf8               ()B\n+   #73 = Utf8               getValueChar\n+   #74 = Utf8               ()C\n+   #75 = Utf8               getValueDouble\n+   #76 = Utf8               ()D\n+   #77 = Utf8               getValueFloat\n+   #78 = Utf8               ()F\n+   #79 = Utf8               getValueInt\n+   #80 = Utf8               getValueLong\n+   #81 = Utf8               ()J\n+   #82 = Utf8               getValueShort\n+   #83 = Utf8               ()S\n+   #84 = Utf8               getValueString\n+   #85 = Utf8               ()Ljava/lang/String;\n+   #86 = Utf8               setIndex\n+   #87 = Utf8               (I)V\n+   #88 = Utf8               stringifyValue\n+   #89 = Class              #151          // org/apache/bcel/classfile/ConstantPool\n+   #90 = Utf8               toString\n+   #91 = Utf8               SourceFile\n+   #92 = Utf8               SimpleElementValue.java\n+   #93 = NameAndType        #54:#152      // \"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n+   #94 = NameAndType        #52:#53       // index:I\n+   #95 = NameAndType        #153:#68      // getType:()I\n+   #96 = Class              #154          // java/io/DataOutputStream\n+   #97 = NameAndType        #155:#87      // writeByte:(I)V\n+   #98 = NameAndType        #67:#68       // getIndex:()I\n+   #99 = NameAndType        #156:#87      // writeShort:(I)V\n+  #100 = Utf8               org/apache/bcel/classfile/ClassFormatException\n+  #101 = Utf8               java/lang/StringBuilder\n+  #102 = NameAndType        #54:#157      // \"<init>\":()V\n+  #103 = Utf8               SimpleElementValue doesnt know how to write out type\n+  #104 = NameAndType        #158:#159     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #105 = NameAndType        #158:#160     // append:(I)Ljava/lang/StringBuilder;\n+  #106 = NameAndType        #90:#85       // toString:()Ljava/lang/String;\n+  #107 = NameAndType        #54:#161      // \"<init>\":(Ljava/lang/String;)V\n+  #108 = Utf8               org/apache/bcel/classfile/ElementValue\n+  #109 = Utf8               java/lang/IllegalStateException\n+  #110 = Utf8               Dont call getValueBoolean() on a non BOOLEAN ElementValue\n+  #111 = NameAndType        #162:#163     // getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+  #112 = NameAndType        #164:#165     // getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n+  #113 = Utf8               org/apache/bcel/classfile/ConstantInteger\n+  #114 = NameAndType        #166:#68      // getBytes:()I\n+  #115 = Utf8               Dont call getValueByte() on a non BYTE ElementValue\n+  #116 = NameAndType        #167:#168     // getConstantInteger:(I)Lorg/apache/bcel/classfile/ConstantInteger;\n+  #117 = Utf8               Dont call getValueChar() on a non CHAR ElementValue\n+  #118 = Utf8               Dont call getValueDouble() on a non DOUBLE ElementValue\n+  #119 = Utf8               org/apache/bcel/classfile/ConstantDouble\n+  #120 = NameAndType        #166:#76      // getBytes:()D\n+  #121 = Utf8               Dont call getValueFloat() on a non FLOAT ElementValue\n+  #122 = Utf8               org/apache/bcel/classfile/ConstantFloat\n+  #123 = NameAndType        #166:#78      // getBytes:()F\n+  #124 = Utf8               Dont call getValueInt() on a non INT ElementValue\n+  #125 = Utf8               Dont call getValueLong() on a non LONG ElementValue\n+  #126 = Utf8               org/apache/bcel/classfile/ConstantLong\n+  #127 = NameAndType        #166:#81      // getBytes:()J\n+  #128 = Utf8               Dont call getValueShort() on a non SHORT ElementValue\n+  #129 = Utf8               Dont call getValueString() on a non STRING ElementValue\n+  #130 = NameAndType        #169:#170     // getConstantUtf8:(I)Lorg/apache/bcel/classfile/ConstantUtf8;\n+  #131 = Class              #171          // org/apache/bcel/classfile/ConstantUtf8\n+  #132 = NameAndType        #166:#85      // getBytes:()Ljava/lang/String;\n+  #133 = Class              #172          // java/lang/Integer\n+  #134 = NameAndType        #90:#173      // toString:(I)Ljava/lang/String;\n+  #135 = Utf8               org/apache/bcel/Const\n+  #136 = NameAndType        #164:#174     // getConstant:(IBLjava/lang/Class;)Lorg/apache/bcel/classfile/Constant;\n+  #137 = Class              #175          // java/lang/Long\n+  #138 = NameAndType        #90:#176      // toString:(J)Ljava/lang/String;\n+  #139 = Class              #177          // java/lang/Double\n+  #140 = NameAndType        #90:#178      // toString:(D)Ljava/lang/String;\n+  #141 = Class              #179          // java/lang/Float\n+  #142 = NameAndType        #90:#180      // toString:(F)Ljava/lang/String;\n+  #143 = Class              #181          // java/lang/String\n+  #144 = NameAndType        #182:#183     // valueOf:(C)Ljava/lang/String;\n+  #145 = Utf8               false\n+  #146 = Utf8               true\n+  #147 = Utf8               SimpleElementValue class does not know how to stringify type\n+  #148 = NameAndType        #88:#85       // stringifyValue:()Ljava/lang/String;\n+  #149 = Utf8               org/apache/bcel/classfile/SimpleElementValue\n+  #150 = Utf8               java/io/IOException\n+  #151 = Utf8               org/apache/bcel/classfile/ConstantPool\n+  #152 = Utf8               (ILorg/apache/bcel/classfile/ConstantPool;)V\n+  #153 = Utf8               getType\n+  #154 = Utf8               java/io/DataOutputStream\n+  #155 = Utf8               writeByte\n+  #156 = Utf8               writeShort\n+  #157 = Utf8               ()V\n+  #158 = Utf8               append\n+  #159 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #160 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #161 = Utf8               (Ljava/lang/String;)V\n+  #162 = Utf8               getConstantPool\n+  #163 = Utf8               ()Lorg/apache/bcel/classfile/ConstantPool;\n+  #164 = Utf8               getConstant\n+  #165 = Utf8               (I)Lorg/apache/bcel/classfile/Constant;\n+  #166 = Utf8               getBytes\n+  #167 = Utf8               getConstantInteger\n+  #168 = Utf8               (I)Lorg/apache/bcel/classfile/ConstantInteger;\n+  #169 = Utf8               getConstantUtf8\n+  #170 = Utf8               (I)Lorg/apache/bcel/classfile/ConstantUtf8;\n+  #171 = Utf8               org/apache/bcel/classfile/ConstantUtf8\n+  #172 = Utf8               java/lang/Integer\n+  #173 = Utf8               (I)Ljava/lang/String;\n+  #174 = Utf8               (IBLjava/lang/Class;)Lorg/apache/bcel/classfile/Constant;\n+  #175 = Utf8               java/lang/Long\n+  #176 = Utf8               (J)Ljava/lang/String;\n+  #177 = Utf8               java/lang/Double\n+  #178 = Utf8               (D)Ljava/lang/String;\n+  #179 = Utf8               java/lang/Float\n+  #180 = Utf8               (F)Ljava/lang/String;\n+  #181 = Utf8               java/lang/String\n+  #182 = Utf8               valueOf\n+  #183 = Utf8               (C)Ljava/lang/String;\n {\n   private int index;\n     descriptor: I\n     flags: (0x0002) ACC_PRIVATE\n \n   public org.apache.bcel.classfile.SimpleElementValue(int, int, org.apache.bcel.classfile.ConstantPool);\n     descriptor: (IILorg/apache/bcel/classfile/ConstantPool;)V\n"}]}
