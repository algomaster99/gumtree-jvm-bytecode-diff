{"diffoscope-json-version": 1, "source1": "first/Expander.class", "source2": "second/Expander.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,14 +1,12 @@\n \n package org.apache.commons.compress.archivers.examples;\n \n import java.io.OutputStream;\n import org.apache.commons.compress.archivers.ArchiveEntry;\n-import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n-import java.util.Enumeration;\n import org.apache.commons.compress.archivers.sevenz.SevenZFile;\n import org.apache.commons.compress.archivers.zip.ZipFile;\n import java.nio.channels.ReadableByteChannel;\n import java.nio.channels.Channels;\n import java.io.Closeable;\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n import java.nio.channels.SeekableByteChannel;\n@@ -21,116 +19,115 @@\n import java.io.BufferedInputStream;\n import java.nio.file.Files;\n import java.nio.file.OpenOption;\n import java.io.File;\n \n public class Expander\n {\n-    public void expand(final File archive, final File targetDirectory) throws IOException, ArchiveException {\n-        String format = null;\n-        try (final InputStream i = new BufferedInputStream(Files.newInputStream(archive.toPath(), new OpenOption[0]))) {\n+    public void expand(final File file, final File file2) throws IOException, ArchiveException {\n+        String detect;\n+        try (final BufferedInputStream bufferedInputStream = new BufferedInputStream(Files.newInputStream(file.toPath(), new OpenOption[0]))) {\n             new ArchiveStreamFactory();\n-            format = ArchiveStreamFactory.detect(i);\n+            detect = ArchiveStreamFactory.detect((InputStream)bufferedInputStream);\n         }\n-        this.expand(format, archive, targetDirectory);\n+        this.expand(detect, file, file2);\n     }\n     \n-    public void expand(final String format, final File archive, final File targetDirectory) throws IOException, ArchiveException {\n-        if (this.prefersSeekableByteChannel(format)) {\n-            try (final SeekableByteChannel c = FileChannel.open(archive.toPath(), StandardOpenOption.READ)) {\n-                this.expand(format, c, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);\n+    public void expand(final String s, final File file, final File file2) throws IOException, ArchiveException {\n+        if (this.prefersSeekableByteChannel(s)) {\n+            try (final FileChannel open = FileChannel.open(file.toPath(), StandardOpenOption.READ)) {\n+                this.expand(s, open, file2, CloseableConsumer.CLOSING_CONSUMER);\n             }\n             return;\n         }\n-        try (final InputStream i = new BufferedInputStream(Files.newInputStream(archive.toPath(), new OpenOption[0]))) {\n-            this.expand(format, i, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);\n+        try (final BufferedInputStream bufferedInputStream = new BufferedInputStream(Files.newInputStream(file.toPath(), new OpenOption[0]))) {\n+            this.expand(s, bufferedInputStream, file2, CloseableConsumer.CLOSING_CONSUMER);\n         }\n     }\n     \n     @Deprecated\n-    public void expand(final InputStream archive, final File targetDirectory) throws IOException, ArchiveException {\n-        this.expand(archive, targetDirectory, CloseableConsumer.NULL_CONSUMER);\n+    public void expand(final InputStream inputStream, final File file) throws IOException, ArchiveException {\n+        this.expand(inputStream, file, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n-    public void expand(final InputStream archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n-            this.expand((ArchiveInputStream)c.track((Closeable)new ArchiveStreamFactory().createArchiveInputStream(archive)), targetDirectory);\n+    public void expand(final InputStream inputStream, final File file, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n+        try (final CloseableConsumerAdapter closeableConsumerAdapter = new CloseableConsumerAdapter(closeableConsumer)) {\n+            this.expand((ArchiveInputStream)closeableConsumerAdapter.track((Closeable)new ArchiveStreamFactory().createArchiveInputStream(inputStream)), file);\n         }\n     }\n     \n     @Deprecated\n-    public void expand(final String format, final InputStream archive, final File targetDirectory) throws IOException, ArchiveException {\n-        this.expand(format, archive, targetDirectory, CloseableConsumer.NULL_CONSUMER);\n+    public void expand(final String s, final InputStream inputStream, final File file) throws IOException, ArchiveException {\n+        this.expand(s, inputStream, file, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n-    public void expand(final String format, final InputStream archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n-            this.expand((ArchiveInputStream)c.track((Closeable)new ArchiveStreamFactory().createArchiveInputStream(format, archive)), targetDirectory);\n+    public void expand(final String s, final InputStream inputStream, final File file, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n+        try (final CloseableConsumerAdapter closeableConsumerAdapter = new CloseableConsumerAdapter(closeableConsumer)) {\n+            this.expand((ArchiveInputStream)closeableConsumerAdapter.track((Closeable)new ArchiveStreamFactory().createArchiveInputStream(s, inputStream)), file);\n         }\n     }\n     \n     @Deprecated\n-    public void expand(final String format, final SeekableByteChannel archive, final File targetDirectory) throws IOException, ArchiveException {\n-        this.expand(format, archive, targetDirectory, CloseableConsumer.NULL_CONSUMER);\n+    public void expand(final String s, final SeekableByteChannel seekableByteChannel, final File file) throws IOException, ArchiveException {\n+        this.expand(s, seekableByteChannel, file, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n-    public void expand(final String format, final SeekableByteChannel archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n-            if (!this.prefersSeekableByteChannel(format)) {\n-                this.expand(format, (InputStream)c.track((Closeable)Channels.newInputStream(archive)), targetDirectory);\n+    public void expand(final String s, final SeekableByteChannel ch, final File file, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n+        try (final CloseableConsumerAdapter closeableConsumerAdapter = new CloseableConsumerAdapter(closeableConsumer)) {\n+            if (!this.prefersSeekableByteChannel(s)) {\n+                this.expand(s, (InputStream)closeableConsumerAdapter.track((Closeable)Channels.newInputStream(ch)), file);\n             }\n-            else if (\"zip\".equalsIgnoreCase(format)) {\n-                this.expand((ZipFile)c.track((Closeable)new ZipFile(archive)), targetDirectory);\n+            else if (\"zip\".equalsIgnoreCase(s)) {\n+                this.expand((ZipFile)closeableConsumerAdapter.track((Closeable)new ZipFile(ch)), file);\n             }\n             else {\n-                if (!\"7z\".equalsIgnoreCase(format)) {\n-                    throw new ArchiveException(\"Don't know how to handle format \" + format);\n+                if (!\"7z\".equalsIgnoreCase(s)) {\n+                    throw new ArchiveException(\"Don't know how to handle format \" + s);\n                 }\n-                this.expand((SevenZFile)c.track((Closeable)new SevenZFile(archive)), targetDirectory);\n+                this.expand((SevenZFile)closeableConsumerAdapter.track((Closeable)new SevenZFile(ch)), file);\n             }\n         }\n     }\n     \n-    public void expand(final ArchiveInputStream archive, final File targetDirectory) throws IOException, ArchiveException {\n-        this.expand((Expander.ArchiveEntrySupplier)new Expander.Expander$1(this, archive), (Expander.EntryWriter)new Expander.Expander$2(this, archive), targetDirectory);\n+    public void expand(final ArchiveInputStream archiveInputStream, final File file) throws IOException, ArchiveException {\n+        this.expand((Expander.ArchiveEntrySupplier)new Expander.Expander$1(this, archiveInputStream), (Expander.EntryWriter)new Expander.Expander$2(this, archiveInputStream), file);\n     }\n     \n-    public void expand(final ZipFile archive, final File targetDirectory) throws IOException, ArchiveException {\n-        final Enumeration<ZipArchiveEntry> entries = archive.getEntries();\n-        this.expand((Expander.ArchiveEntrySupplier)new Expander.Expander$3(this, (Enumeration)entries, archive), (Expander.EntryWriter)new Expander.Expander$4(this, archive), targetDirectory);\n+    public void expand(final ZipFile zipFile, final File file) throws IOException, ArchiveException {\n+        this.expand((Expander.ArchiveEntrySupplier)new Expander.Expander$3(this, zipFile.getEntries(), zipFile), (Expander.EntryWriter)new Expander.Expander$4(this, zipFile), file);\n     }\n     \n-    public void expand(final SevenZFile archive, final File targetDirectory) throws IOException, ArchiveException {\n-        this.expand((Expander.ArchiveEntrySupplier)new Expander.Expander$5(this, archive), (Expander.EntryWriter)new Expander.Expander$6(this, archive), targetDirectory);\n+    public void expand(final SevenZFile sevenZFile, final File file) throws IOException, ArchiveException {\n+        this.expand((Expander.ArchiveEntrySupplier)new Expander.Expander$5(this, sevenZFile), (Expander.EntryWriter)new Expander.Expander$6(this, sevenZFile), file);\n     }\n     \n-    private boolean prefersSeekableByteChannel(final String format) {\n-        return \"zip\".equalsIgnoreCase(format) || \"7z\".equalsIgnoreCase(format);\n+    private boolean prefersSeekableByteChannel(final String s) {\n+        return \"zip\".equalsIgnoreCase(s) || \"7z\".equalsIgnoreCase(s);\n     }\n     \n-    private void expand(final Expander.ArchiveEntrySupplier supplier, final Expander.EntryWriter writer, final File targetDirectory) throws IOException {\n-        String targetDirPath = targetDirectory.getCanonicalPath();\n-        if (!targetDirPath.endsWith(File.separator)) {\n-            targetDirPath += File.separator;\n+    private void expand(final Expander.ArchiveEntrySupplier archiveEntrySupplier, final Expander.EntryWriter entryWriter, final File parent) throws IOException {\n+        String canonicalPath = parent.getCanonicalPath();\n+        if (!canonicalPath.endsWith(File.separator)) {\n+            canonicalPath += File.separator;\n         }\n-        for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n-            final File f = new File(targetDirectory, nextEntry.getName());\n-            if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n-                throw new IOException(\"Expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory);\n+        for (ArchiveEntry archiveEntry = archiveEntrySupplier.getNextReadableEntry(); archiveEntry != null; archiveEntry = archiveEntrySupplier.getNextReadableEntry()) {\n+            final File file = new File(parent, archiveEntry.getName());\n+            if (!file.getCanonicalPath().startsWith(canonicalPath)) {\n+                throw new IOException(\"Expanding \" + archiveEntry.getName() + \" would create file outside of \" + parent);\n             }\n-            if (nextEntry.isDirectory()) {\n-                if (!f.isDirectory() && !f.mkdirs()) {\n-                    throw new IOException(\"Failed to create directory \" + f);\n+            if (archiveEntry.isDirectory()) {\n+                if (!file.isDirectory() && !file.mkdirs()) {\n+                    throw new IOException(\"Failed to create directory \" + file);\n                 }\n             }\n             else {\n-                final File parent = f.getParentFile();\n-                if (!parent.isDirectory() && !parent.mkdirs()) {\n-                    throw new IOException(\"Failed to create directory \" + parent);\n+                final File parentFile = file.getParentFile();\n+                if (!parentFile.isDirectory() && !parentFile.mkdirs()) {\n+                    throw new IOException(\"Failed to create directory \" + parentFile);\n                 }\n-                try (final OutputStream o = Files.newOutputStream(f.toPath(), new OpenOption[0])) {\n-                    writer.writeEntryDataTo(nextEntry, o);\n+                try (final OutputStream outputStream = Files.newOutputStream(file.toPath(), new OpenOption[0])) {\n+                    entryWriter.writeEntryDataTo(archiveEntry, outputStream);\n                 }\n             }\n         }\n     }\n }\n"}]}
