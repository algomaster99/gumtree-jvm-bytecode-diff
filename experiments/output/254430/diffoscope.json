{"diffoscope-json-version": 1, "source1": "first/RefinedSoundex.class", "source2": "second/RefinedSoundex.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,65 +11,65 @@\n     private final char[] soundexMapping;\n     public static final RefinedSoundex US_ENGLISH;\n     \n     public RefinedSoundex() {\n         this.soundexMapping = RefinedSoundex.US_ENGLISH_MAPPING;\n     }\n     \n-    public RefinedSoundex(final char[] mapping) {\n-        System.arraycopy(mapping, 0, this.soundexMapping = new char[mapping.length], 0, mapping.length);\n+    public RefinedSoundex(final char[] array) {\n+        System.arraycopy(array, 0, this.soundexMapping = new char[array.length], 0, array.length);\n     }\n     \n-    public RefinedSoundex(final String mapping) {\n-        this.soundexMapping = mapping.toCharArray();\n+    public RefinedSoundex(final String s) {\n+        this.soundexMapping = s.toCharArray();\n     }\n     \n-    public int difference(final String s1, final String s2) throws EncoderException {\n-        return SoundexUtils.difference((StringEncoder)this, s1, s2);\n+    public int difference(final String s, final String s2) throws EncoderException {\n+        return SoundexUtils.difference((StringEncoder)this, s, s2);\n     }\n     \n-    public Object encode(final Object obj) throws EncoderException {\n-        if (!(obj instanceof String)) {\n+    public Object encode(final Object o) throws EncoderException {\n+        if (!(o instanceof String)) {\n             throw new EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n         }\n-        return this.soundex((String)obj);\n+        return this.soundex((String)o);\n     }\n     \n-    public String encode(final String str) {\n-        return this.soundex(str);\n+    public String encode(final String s) {\n+        return this.soundex(s);\n     }\n     \n     char getMappingCode(final char c) {\n         if (!Character.isLetter(c)) {\n             return '\\0';\n         }\n         return this.soundexMapping[Character.toUpperCase(c) - 'A'];\n     }\n     \n-    public String soundex(String str) {\n-        if (str == null) {\n+    public String soundex(String clean) {\n+        if (clean == null) {\n             return null;\n         }\n-        str = SoundexUtils.clean(str);\n-        if (str.length() == 0) {\n-            return str;\n+        clean = SoundexUtils.clean(clean);\n+        if (clean.length() == 0) {\n+            return clean;\n         }\n-        final StringBuilder sBuf = new StringBuilder();\n-        sBuf.append(str.charAt(0));\n-        char last = '*';\n-        for (int i = 0; i < str.length(); ++i) {\n-            final char current = this.getMappingCode(str.charAt(i));\n-            if (current != last) {\n-                if (current != '\\0') {\n-                    sBuf.append(current);\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(clean.charAt(0));\n+        char c = '*';\n+        for (int i = 0; i < clean.length(); ++i) {\n+            final char mappingCode = this.getMappingCode(clean.charAt(i));\n+            if (mappingCode != c) {\n+                if (mappingCode != '\\0') {\n+                    sb.append(mappingCode);\n                 }\n-                last = current;\n+                c = mappingCode;\n             }\n         }\n-        return sBuf.toString();\n+        return sb.toString();\n     }\n     \n     static {\n         US_ENGLISH_MAPPING = \"01360240043788015936020505\".toCharArray();\n         US_ENGLISH = new RefinedSoundex();\n     }\n }\n"}]}
